
Clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027108  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d2f8  080272c8  080272c8  000372c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080345c0  080345c0  000445c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080345c8  080345c8  000445c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080345cc  080345cc  000445cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001140  20000000  080345d0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00090cd4  20001140  08035710  00051140  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20091e14  08035710  00051e14  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00051140  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007ad4a  00000000  00000000  00051170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c177  00000000  00000000  000cbeba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00030cfd  00000000  00000000  000d8031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002ea8  00000000  00000000  00108d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004f10  00000000  00000000  0010bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002043b  00000000  00000000  00110ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000f24d  00000000  00000000  00130f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00140170  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a874  00000000  00000000  001401ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20001140 	.word	0x20001140
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080272b0 	.word	0x080272b0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20001144 	.word	0x20001144
 80001fc:	080272b0 	.word	0x080272b0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f092 0f00 	teq	r2, #0
 800059a:	bf14      	ite	ne
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e720      	b.n	80003f4 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aedc 	beq.w	80003a2 <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6c1      	b.n	80003a2 <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97a 	b.w	8000fbc <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	9e08      	ldr	r6, [sp, #32]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d151      	bne.n	8000d94 <__udivmoddi4+0xb4>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4617      	mov	r7, r2
 8000cf4:	d96d      	bls.n	8000dd2 <__udivmoddi4+0xf2>
 8000cf6:	fab2 fe82 	clz	lr, r2
 8000cfa:	f1be 0f00 	cmp.w	lr, #0
 8000cfe:	d00b      	beq.n	8000d18 <__udivmoddi4+0x38>
 8000d00:	f1ce 0c20 	rsb	ip, lr, #32
 8000d04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d1c:	0c25      	lsrs	r5, r4, #16
 8000d1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d22:	fa1f f987 	uxth.w	r9, r7
 8000d26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d2e:	fb08 f309 	mul.w	r3, r8, r9
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x6c>
 8000d36:	19ed      	adds	r5, r5, r7
 8000d38:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d3c:	f080 8123 	bcs.w	8000f86 <__udivmoddi4+0x2a6>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	f240 8120 	bls.w	8000f86 <__udivmoddi4+0x2a6>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	1aed      	subs	r5, r5, r3
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb00 f909 	mul.w	r9, r0, r9
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x98>
 8000d64:	19e4      	adds	r4, r4, r7
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 810a 	bcs.w	8000f82 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8107 	bls.w	8000f82 <__udivmoddi4+0x2a2>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 0409 	sub.w	r4, r4, r9
 8000d7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d80:	2100      	movs	r1, #0
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d061      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000d86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	6034      	str	r4, [r6, #0]
 8000d8e:	6073      	str	r3, [r6, #4]
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0xc8>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d054      	beq.n	8000e46 <__udivmoddi4+0x166>
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000da2:	4608      	mov	r0, r1
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	fab3 f183 	clz	r1, r3
 8000dac:	2900      	cmp	r1, #0
 8000dae:	f040 808e 	bne.w	8000ece <__udivmoddi4+0x1ee>
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xdc>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80fa 	bhi.w	8000fb0 <__udivmoddi4+0x2d0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	46ac      	mov	ip, r5
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d03f      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000dca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	b912      	cbnz	r2, 8000dda <__udivmoddi4+0xfa>
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dda:	fab7 fe87 	clz	lr, r7
 8000dde:	f1be 0f00 	cmp.w	lr, #0
 8000de2:	d134      	bne.n	8000e4e <__udivmoddi4+0x16e>
 8000de4:	1beb      	subs	r3, r5, r7
 8000de6:	0c3a      	lsrs	r2, r7, #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000df2:	0c25      	lsrs	r5, r4, #16
 8000df4:	fb02 3318 	mls	r3, r2, r8, r3
 8000df8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfc:	fb0c f308 	mul.w	r3, ip, r8
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x134>
 8000e04:	19ed      	adds	r5, r5, r7
 8000e06:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x132>
 8000e0c:	42ab      	cmp	r3, r5
 8000e0e:	f200 80d1 	bhi.w	8000fb4 <__udivmoddi4+0x2d4>
 8000e12:	4680      	mov	r8, r0
 8000e14:	1aed      	subs	r5, r5, r3
 8000e16:	b2a3      	uxth	r3, r4
 8000e18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e24:	fb0c fc00 	mul.w	ip, ip, r0
 8000e28:	45a4      	cmp	ip, r4
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x15c>
 8000e2c:	19e4      	adds	r4, r4, r7
 8000e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x15a>
 8000e34:	45a4      	cmp	ip, r4
 8000e36:	f200 80b8 	bhi.w	8000faa <__udivmoddi4+0x2ca>
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	eba4 040c 	sub.w	r4, r4, ip
 8000e40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e44:	e79d      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1ce 0420 	rsb	r4, lr, #32
 8000e52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e5e:	0c3a      	lsrs	r2, r7, #16
 8000e60:	fa25 f404 	lsr.w	r4, r5, r4
 8000e64:	ea48 0803 	orr.w	r8, r8, r3
 8000e68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e70:	fb02 4411 	mls	r4, r2, r1, r4
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e86:	d909      	bls.n	8000e9c <__udivmoddi4+0x1bc>
 8000e88:	19ed      	adds	r5, r5, r7
 8000e8a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e8e:	f080 808a 	bcs.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	f240 8087 	bls.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e98:	3902      	subs	r1, #2
 8000e9a:	443d      	add	r5, r7
 8000e9c:	1aeb      	subs	r3, r5, r3
 8000e9e:	fa1f f588 	uxth.w	r5, r8
 8000ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ea6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eaa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000eae:	fb00 f30c 	mul.w	r3, r0, ip
 8000eb2:	42ab      	cmp	r3, r5
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x1e6>
 8000eb6:	19ed      	adds	r5, r5, r7
 8000eb8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebc:	d26f      	bcs.n	8000f9e <__udivmoddi4+0x2be>
 8000ebe:	42ab      	cmp	r3, r5
 8000ec0:	d96d      	bls.n	8000f9e <__udivmoddi4+0x2be>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	1aeb      	subs	r3, r5, r3
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	e78f      	b.n	8000dee <__udivmoddi4+0x10e>
 8000ece:	f1c1 0720 	rsb	r7, r1, #32
 8000ed2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ed6:	408b      	lsls	r3, r1
 8000ed8:	fa05 f401 	lsl.w	r4, r5, r1
 8000edc:	ea48 0303 	orr.w	r3, r8, r3
 8000ee0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ee4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ef2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ef6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000efa:	fa1f f883 	uxth.w	r8, r3
 8000efe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f02:	fb09 f408 	mul.w	r4, r9, r8
 8000f06:	42ac      	cmp	r4, r5
 8000f08:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x244>
 8000f12:	18ed      	adds	r5, r5, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d243      	bcs.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	d941      	bls.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	441d      	add	r5, r3
 8000f24:	1b2d      	subs	r5, r5, r4
 8000f26:	fa1f fe8e 	uxth.w	lr, lr
 8000f2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45a0      	cmp	r8, r4
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x26e>
 8000f3e:	18e4      	adds	r4, r4, r3
 8000f40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f44:	d229      	bcs.n	8000f9a <__udivmoddi4+0x2ba>
 8000f46:	45a0      	cmp	r8, r4
 8000f48:	d927      	bls.n	8000f9a <__udivmoddi4+0x2ba>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	441c      	add	r4, r3
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba4 0408 	sub.w	r4, r4, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454c      	cmp	r4, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	464d      	mov	r5, r9
 8000f60:	d315      	bcc.n	8000f8e <__udivmoddi4+0x2ae>
 8000f62:	d012      	beq.n	8000f8a <__udivmoddi4+0x2aa>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x29c>
 8000f66:	ebba 030e 	subs.w	r3, sl, lr
 8000f6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40cb      	lsrs	r3, r1
 8000f74:	431f      	orrs	r7, r3
 8000f76:	40cc      	lsrs	r4, r1
 8000f78:	6037      	str	r7, [r6, #0]
 8000f7a:	6074      	str	r4, [r6, #4]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	4618      	mov	r0, r3
 8000f84:	e6f8      	b.n	8000d78 <__udivmoddi4+0x98>
 8000f86:	4690      	mov	r8, r2
 8000f88:	e6e0      	b.n	8000d4c <__udivmoddi4+0x6c>
 8000f8a:	45c2      	cmp	sl, r8
 8000f8c:	d2ea      	bcs.n	8000f64 <__udivmoddi4+0x284>
 8000f8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f92:	eb69 0503 	sbc.w	r5, r9, r3
 8000f96:	3801      	subs	r0, #1
 8000f98:	e7e4      	b.n	8000f64 <__udivmoddi4+0x284>
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	e7d7      	b.n	8000f4e <__udivmoddi4+0x26e>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	e791      	b.n	8000ec6 <__udivmoddi4+0x1e6>
 8000fa2:	4681      	mov	r9, r0
 8000fa4:	e7be      	b.n	8000f24 <__udivmoddi4+0x244>
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	e778      	b.n	8000e9c <__udivmoddi4+0x1bc>
 8000faa:	3802      	subs	r0, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	e745      	b.n	8000e3c <__udivmoddi4+0x15c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xe6>
 8000fb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb8:	443d      	add	r5, r7
 8000fba:	e72b      	b.n	8000e14 <__udivmoddi4+0x134>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_InitTick+0x2c>)
{
 8000fc4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd0:	f000 fddc 	bl	8001b8c <HAL_SYSTICK_Config>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b938      	cbnz	r0, 8000fe8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fd86 	bl	8001af0 <HAL_NVIC_SetPriority>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000a50 	.word	0x20000a50

08000ff0 <HAL_Init>:
{
 8000ff0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 fd6a 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ffe1 	bl	8000fc0 <HAL_InitTick>
 8000ffe:	4604      	mov	r4, r0
 8001000:	b918      	cbnz	r0, 800100a <HAL_Init+0x1a>
    HAL_MspInit();
 8001002:	f020 fd79 	bl	8021af8 <HAL_MspInit>
}
 8001006:	4620      	mov	r0, r4
 8001008:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800100a:	2401      	movs	r4, #1
 800100c:	e7fb      	b.n	8001006 <HAL_Init+0x16>
	...

08001010 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001010:	4a02      	ldr	r2, [pc, #8]	; (800101c <HAL_IncTick+0xc>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2008bed8 	.word	0x2008bed8

08001020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <HAL_GetTick+0x8>)
 8001022:	6818      	ldr	r0, [r3, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2008bed8 	.word	0x2008bed8

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff6 	bl	8001020 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001034:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001036:	4605      	mov	r5, r0
  {
    wait++;
 8001038:	bf18      	it	ne
 800103a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	4284      	cmp	r4, r0
 8001044:	d8fa      	bhi.n	800103c <HAL_Delay+0x10>
  {
  }
}
 8001046:	bd38      	pop	{r3, r4, r5, pc}

08001048 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001050:	2800      	cmp	r0, #0
 8001052:	f000 80a8 	beq.w	80011a6 <HAL_ADC_Init+0x15e>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001056:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001058:	4604      	mov	r4, r0
 800105a:	2d00      	cmp	r5, #0
 800105c:	f000 8099 	beq.w	8001192 <HAL_ADC_Init+0x14a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 8001060:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 8001062:	6893      	ldr	r3, [r2, #8]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	d505      	bpl.n	8001074 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001068:	6893      	ldr	r3, [r2, #8]
 800106a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800106e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001072:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8001074:	6893      	ldr	r3, [r2, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8001076:	00df      	lsls	r7, r3, #3
 8001078:	d419      	bmi.n	80010ae <HAL_ADC_Init+0x66>
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800107a:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <HAL_ADC_Init+0x1a0>)
 800107c:	485b      	ldr	r0, [pc, #364]	; (80011ec <HAL_ADC_Init+0x1a4>)
 800107e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001080:	6891      	ldr	r1, [r2, #8]
 8001082:	fba0 0303 	umull	r0, r3, r0, r3
 8001086:	0cdb      	lsrs	r3, r3, #19
 8001088:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 800108c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001090:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800109a:	6091      	str	r1, [r2, #8]
 800109c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800109e:	9b01      	ldr	r3, [sp, #4]
 80010a0:	b12b      	cbz	r3, 80010ae <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80010a2:	9b01      	ldr	r3, [sp, #4]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80010a8:	9b01      	ldr	r3, [sp, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f9      	bne.n	80010a2 <HAL_ADC_Init+0x5a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 80010ae:	6893      	ldr	r3, [r2, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010b0:	00de      	lsls	r6, r3, #3
 80010b2:	d55a      	bpl.n	800116a <HAL_ADC_Init+0x122>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80010b6:	06dd      	lsls	r5, r3, #27
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	f04f 0000 	mov.w	r0, #0
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010bc:	d462      	bmi.n	8001184 <HAL_ADC_Init+0x13c>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80010be:	6893      	ldr	r3, [r2, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010c0:	0759      	lsls	r1, r3, #29
 80010c2:	d45f      	bmi.n	8001184 <HAL_ADC_Init+0x13c>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80010c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010d0:	6893      	ldr	r3, [r2, #8]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d061      	beq.n	800119e <HAL_ADC_Init+0x156>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010da:	4945      	ldr	r1, [pc, #276]	; (80011f0 <HAL_ADC_Init+0x1a8>)
 80010dc:	6865      	ldr	r5, [r4, #4]
 80010de:	688b      	ldr	r3, [r1, #8]
 80010e0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80010e4:	432b      	orrs	r3, r5
 80010e6:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 80010e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010ea:	68e7      	ldr	r7, [r4, #12]
 80010ec:	68a6      	ldr	r6, [r4, #8]
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 80010ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80010f0:	69e5      	ldr	r5, [r4, #28]
                hadc->Init.DataAlign                                         |
 80010f2:	433b      	orrs	r3, r7
 80010f4:	4333      	orrs	r3, r6
 80010f6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010fa:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80010fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001100:	d054      	beq.n	80011ac <HAL_ADC_Init+0x164>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001102:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001104:	b121      	cbz	r1, 8001110 <HAL_ADC_Init+0xc8>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001106:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001108:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800110c:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800110e:	430b      	orrs	r3, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8001110:	68d5      	ldr	r5, [r2, #12]
 8001112:	4938      	ldr	r1, [pc, #224]	; (80011f4 <HAL_ADC_Init+0x1ac>)
 8001114:	4029      	ands	r1, r5
 8001116:	430b      	orrs	r3, r1
 8001118:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800111a:	6893      	ldr	r3, [r2, #8]
 800111c:	f013 0f0c 	tst.w	r3, #12
 8001120:	d114      	bne.n	800114c <HAL_ADC_Init+0x104>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001122:	6b63      	ldr	r3, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001124:	69a6      	ldr	r6, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001126:	68d1      	ldr	r1, [r2, #12]
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001128:	6d25      	ldr	r5, [r4, #80]	; 0x50
      
      if (hadc->Init.OversamplingMode == ENABLE)
 800112a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800112c:	005b      	lsls	r3, r3, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 800112e:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001132:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001136:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001138:	f021 0106 	bic.w	r1, r1, #6
 800113c:	430b      	orrs	r3, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 800113e:	2f01      	cmp	r7, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001140:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001142:	d040      	beq.n	80011c6 <HAL_ADC_Init+0x17e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001144:	6913      	ldr	r3, [r2, #16]
 8001146:	f023 0301 	bic.w	r3, r3, #1
 800114a:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800114c:	6923      	ldr	r3, [r4, #16]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d031      	beq.n	80011b6 <HAL_ADC_Init+0x16e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001152:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001154:	f023 030f 	bic.w	r3, r3, #15
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800115a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800115c:	f023 0303 	bic.w	r3, r3, #3
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001166:	b003      	add	sp, #12
 8001168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001172:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6623      	str	r3, [r4, #96]	; 0x60
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800117c:	06dd      	lsls	r5, r3, #27
    tmp_hal_status = HAL_ERROR;
 800117e:	f04f 0001 	mov.w	r0, #1
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001182:	d59c      	bpl.n	80010be <HAL_ADC_Init+0x76>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001184:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8001186:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800118e:	b003      	add	sp, #12
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8001192:	f020 fdfd 	bl	8021d90 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001196:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8001198:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800119c:	e760      	b.n	8001060 <HAL_ADC_Init+0x18>
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	07db      	lsls	r3, r3, #31
 80011a2:	d59a      	bpl.n	80010da <HAL_ADC_Init+0x92>
 80011a4:	e7a0      	b.n	80010e8 <HAL_ADC_Init+0xa0>
    return HAL_ERROR;
 80011a6:	2001      	movs	r0, #1
}
 80011a8:	b003      	add	sp, #12
 80011aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80011ae:	3901      	subs	r1, #1
 80011b0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80011b4:	e7a5      	b.n	8001102 <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011b8:	6a23      	ldr	r3, [r4, #32]
 80011ba:	f021 010f 	bic.w	r1, r1, #15
 80011be:	3b01      	subs	r3, #1
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
 80011c4:	e7c9      	b.n	800115a <HAL_ADC_Init+0x112>
        MODIFY_REG(hadc->Instance->CFGR2,
 80011c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011c8:	6c67      	ldr	r7, [r4, #68]	; 0x44
 80011ca:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80011cc:	6915      	ldr	r5, [r2, #16]
 80011ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80011d0:	433b      	orrs	r3, r7
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	4333      	orrs	r3, r6
 80011d8:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80011dc:	430b      	orrs	r3, r1
 80011de:	f025 0504 	bic.w	r5, r5, #4
 80011e2:	432b      	orrs	r3, r5
 80011e4:	6113      	str	r3, [r2, #16]
 80011e6:	e7b1      	b.n	800114c <HAL_ADC_Init+0x104>
 80011e8:	20000a50 	.word	0x20000a50
 80011ec:	431bde83 	.word	0x431bde83
 80011f0:	50040300 	.word	0x50040300
 80011f4:	fff0c007 	.word	0xfff0c007

080011f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011fa:	6944      	ldr	r4, [r0, #20]
 80011fc:	2c08      	cmp	r4, #8
 80011fe:	d004      	beq.n	800120a <HAL_ADC_PollForConversion+0x12>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8001200:	6803      	ldr	r3, [r0, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	07dc      	lsls	r4, r3, #31
 8001206:	d43f      	bmi.n	8001288 <HAL_ADC_PollForConversion+0x90>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001208:	2404      	movs	r4, #4
 800120a:	460d      	mov	r5, r1
 800120c:	4606      	mov	r6, r0
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800120e:	f7ff ff07 	bl	8001020 <HAL_GetTick>
 8001212:	4607      	mov	r7, r0
 8001214:	6832      	ldr	r2, [r6, #0]
 8001216:	e001      	b.n	800121c <HAL_ADC_PollForConversion+0x24>
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001218:	1c68      	adds	r0, r5, #1
 800121a:	d114      	bne.n	8001246 <HAL_ADC_PollForConversion+0x4e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	421c      	tst	r4, r3
 8001220:	d0fa      	beq.n	8001218 <HAL_ADC_PollForConversion+0x20>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001222:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8001224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001228:	65f3      	str	r3, [r6, #92]	; 0x5c
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800122a:	68d3      	ldr	r3, [r2, #12]
 800122c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8001230:	d018      	beq.n	8001264 <HAL_ADC_PollForConversion+0x6c>
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001232:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001234:	68d0      	ldr	r0, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001236:	d02d      	beq.n	8001294 <HAL_ADC_PollForConversion+0x9c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001238:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800123c:	bf06      	itte	eq
 800123e:	230c      	moveq	r3, #12
 8001240:	6013      	streq	r3, [r2, #0]
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001242:	2000      	movne	r0, #0
}
 8001244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001246:	b125      	cbz	r5, 8001252 <HAL_ADC_PollForConversion+0x5a>
 8001248:	f7ff feea 	bl	8001020 <HAL_GetTick>
 800124c:	1bc0      	subs	r0, r0, r7
 800124e:	4285      	cmp	r5, r0
 8001250:	d2e0      	bcs.n	8001214 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001252:	6df3      	ldr	r3, [r6, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 8001254:	2200      	movs	r2, #0
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	65f3      	str	r3, [r6, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 800125c:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
        return HAL_TIMEOUT;
 8001260:	2003      	movs	r0, #3
 8001262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001264:	69f3      	ldr	r3, [r6, #28]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e3      	bne.n	8001232 <HAL_ADC_PollForConversion+0x3a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	0719      	lsls	r1, r3, #28
 800126e:	d5e0      	bpl.n	8001232 <HAL_ADC_PollForConversion+0x3a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001270:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8001272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001276:	65f3      	str	r3, [r6, #92]	; 0x5c
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001278:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800127a:	04db      	lsls	r3, r3, #19
 800127c:	d4d9      	bmi.n	8001232 <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800127e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	65f3      	str	r3, [r6, #92]	; 0x5c
 8001286:	e7d4      	b.n	8001232 <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001288:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800128a:	f043 0320 	orr.w	r3, r3, #32
 800128e:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001290:	2001      	movs	r0, #1
 8001292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 8001294:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8001296:	2000      	movs	r0, #0
 8001298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800129a:	bf00      	nop

0800129c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800129c:	6803      	ldr	r3, [r0, #0]
 800129e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	4603      	mov	r3, r0
 80012a8:	b083      	sub	sp, #12
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012aa:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0;
 80012ae:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 80012b0:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 80012b2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80012b4:	f000 80a9 	beq.w	800140a <HAL_ADC_ConfigChannel+0x166>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012b8:	681c      	ldr	r4, [r3, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012ba:	68a6      	ldr	r6, [r4, #8]
  __HAL_LOCK(hadc);
 80012bc:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012be:	f016 0604 	ands.w	r6, r6, #4
  __HAL_LOCK(hadc);
 80012c2:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012c6:	d008      	beq.n	80012da <HAL_ADC_ConfigChannel+0x36>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012ca:	f042 0220 	orr.w	r2, r2, #32
 80012ce:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80012d6:	b003      	add	sp, #12
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank <= 5U)
 80012da:	6848      	ldr	r0, [r1, #4]
 80012dc:	2805      	cmp	r0, #5
 80012de:	f240 8097 	bls.w	8001410 <HAL_ADC_ConfigChannel+0x16c>
 80012e2:	f000 0e1f 	and.w	lr, r0, #31
 80012e6:	251f      	movs	r5, #31
 80012e8:	fa05 f50e 	lsl.w	r5, r5, lr
 80012ec:	f400 7640 	and.w	r6, r0, #768	; 0x300
 80012f0:	43ef      	mvns	r7, r5
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f44f 7540 	mov.w	r5, #768	; 0x300
 80012f6:	fa95 f5a5 	rbit	r5, r5
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80012fa:	fab5 f585 	clz	r5, r5
 80012fe:	fa26 f005 	lsr.w	r0, r6, r5
 8001302:	f104 0630 	add.w	r6, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8001306:	680a      	ldr	r2, [r1, #0]
 8001308:	f856 5020 	ldr.w	r5, [r6, r0, lsl #2]
 800130c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001310:	fa02 f20e 	lsl.w	r2, r2, lr
 8001314:	403d      	ands	r5, r7
 8001316:	432a      	orrs	r2, r5
 8001318:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800131c:	68a2      	ldr	r2, [r4, #8]
 800131e:	f012 0f0c 	tst.w	r2, #12
 8001322:	d14d      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x11c>
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001324:	f8d1 e008 	ldr.w	lr, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001328:	680a      	ldr	r2, [r1, #0]
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800132a:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800132e:	f000 80d5 	beq.w	80014dc <HAL_ADC_ConfigChannel+0x238>
 8001332:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001336:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800133a:	fab6 f086 	clz	r0, r6
 800133e:	f002 7600 	and.w	r6, r2, #33554432	; 0x2000000
 8001342:	40c6      	lsrs	r6, r0
  MODIFY_REG(*preg,
 8001344:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001348:	f104 0714 	add.w	r7, r4, #20
 800134c:	f04f 70f8 	mov.w	r0, #32505856	; 0x1f00000
 8001350:	fa90 f5a0 	rbit	r5, r0
  MODIFY_REG(*preg,
 8001354:	fab5 f585 	clz	r5, r5
 8001358:	fa90 f0a0 	rbit	r0, r0
 800135c:	fab0 f080 	clz	r0, r0
 8001360:	fa22 f505 	lsr.w	r5, r2, r5
 8001364:	f04f 0c07 	mov.w	ip, #7
 8001368:	40c2      	lsrs	r2, r0
 800136a:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 800136e:	fa0c f505 	lsl.w	r5, ip, r5
 8001372:	fa0e f202 	lsl.w	r2, lr, r2
 8001376:	ea20 0005 	bic.w	r0, r0, r5
 800137a:	4302      	orrs	r2, r0
 800137c:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001380:	6962      	ldr	r2, [r4, #20]
 8001382:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001386:	6162      	str	r2, [r4, #20]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001388:	690e      	ldr	r6, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800138a:	68e0      	ldr	r0, [r4, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800138c:	2e04      	cmp	r6, #4
 800138e:	f000 80ca 	beq.w	8001526 <HAL_ADC_ConfigChannel+0x282>
  MODIFY_REG(*preg,
 8001392:	680d      	ldr	r5, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001394:	694a      	ldr	r2, [r1, #20]
 8001396:	f8df e340 	ldr.w	lr, [pc, #832]	; 80016d8 <HAL_ADC_ConfigChannel+0x434>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139a:	f104 0760 	add.w	r7, r4, #96	; 0x60
 800139e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80013a2:	0040      	lsls	r0, r0, #1
 80013a4:	4082      	lsls	r2, r0
  MODIFY_REG(*preg,
 80013a6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80013aa:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80013ae:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80013b2:	432a      	orrs	r2, r5
 80013b4:	ea00 0e0e 	and.w	lr, r0, lr
 80013b8:	ea42 020e 	orr.w	r2, r2, lr
 80013bc:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
    if (ADC_IS_ENABLE(hadc) == RESET)
 80013c0:	68a2      	ldr	r2, [r4, #8]
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	2a01      	cmp	r2, #1
 80013c8:	d02a      	beq.n	8001420 <HAL_ADC_ConfigChannel+0x17c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80013ca:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80013cc:	4aba      	ldr	r2, [pc, #744]	; (80016b8 <HAL_ADC_ConfigChannel+0x414>)
 80013ce:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
 80013d2:	6808      	ldr	r0, [r1, #0]
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013d4:	f8df e304 	ldr.w	lr, [pc, #772]	; 80016dc <HAL_ADC_ConfigChannel+0x438>
 80013d8:	f005 0720 	and.w	r7, r5, #32
 80013dc:	40ba      	lsls	r2, r7
 80013de:	4072      	eors	r2, r6
 80013e0:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80013e4:	403a      	ands	r2, r7
 80013e6:	4072      	eors	r2, r6
 80013e8:	4575      	cmp	r5, lr
 80013ea:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80013ee:	f000 80e7 	beq.w	80015c0 <HAL_ADC_ConfigChannel+0x31c>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013f2:	4ab2      	ldr	r2, [pc, #712]	; (80016bc <HAL_ADC_ConfigChannel+0x418>)
 80013f4:	4290      	cmp	r0, r2
 80013f6:	d045      	beq.n	8001484 <HAL_ADC_ConfigChannel+0x1e0>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 80013f8:	4ab1      	ldr	r2, [pc, #708]	; (80016c0 <HAL_ADC_ConfigChannel+0x41c>)
 80013fa:	4290      	cmp	r0, r2
 80013fc:	f000 8119 	beq.w	8001632 <HAL_ADC_ConfigChannel+0x38e>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 8001400:	4ab0      	ldr	r2, [pc, #704]	; (80016c4 <HAL_ADC_ConfigChannel+0x420>)
 8001402:	4290      	cmp	r0, r2
 8001404:	d02a      	beq.n	800145c <HAL_ADC_ConfigChannel+0x1b8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001406:	2000      	movs	r0, #0
 8001408:	e762      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x2c>
  __HAL_LOCK(hadc);
 800140a:	2002      	movs	r0, #2
}
 800140c:	b003      	add	sp, #12
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (sConfig->Rank)
 8001410:	3802      	subs	r0, #2
 8001412:	2803      	cmp	r0, #3
 8001414:	f200 812b 	bhi.w	800166e <HAL_ADC_ConfigChannel+0x3ca>
 8001418:	e8df f000 	tbb	[pc, r0]
 800141c:	060e141a 	.word	0x060e141a
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001420:	6822      	ldr	r2, [r4, #0]
 8001422:	07d2      	lsls	r2, r2, #31
 8001424:	d5d1      	bpl.n	80013ca <HAL_ADC_ConfigChannel+0x126>
 8001426:	e7ee      	b.n	8001406 <HAL_ADC_ConfigChannel+0x162>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001428:	f44f 7680 	mov.w	r6, #256	; 0x100
 800142c:	604e      	str	r6, [r1, #4]
 800142e:	f04f 0e00 	mov.w	lr, #0
 8001432:	f06f 071f 	mvn.w	r7, #31
 8001436:	e75c      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x4e>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001438:	2218      	movs	r2, #24
 800143a:	604a      	str	r2, [r1, #4]
 800143c:	4696      	mov	lr, r2
 800143e:	f06f 57f8 	mvn.w	r7, #520093696	; 0x1f000000
 8001442:	e756      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x4e>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001444:	2212      	movs	r2, #18
 8001446:	604a      	str	r2, [r1, #4]
 8001448:	4696      	mov	lr, r2
 800144a:	f46f 07f8 	mvn.w	r7, #8126464	; 0x7c0000
 800144e:	e750      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x4e>
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001450:	220c      	movs	r2, #12
 8001452:	604a      	str	r2, [r1, #4]
 8001454:	4696      	mov	lr, r2
 8001456:	f46f 37f8 	mvn.w	r7, #126976	; 0x1f000
 800145a:	e74a      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x4e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800145c:	4a9a      	ldr	r2, [pc, #616]	; (80016c8 <HAL_ADC_ConfigChannel+0x424>)
 800145e:	6892      	ldr	r2, [r2, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001460:	0255      	lsls	r5, r2, #9
 8001462:	d4d0      	bmi.n	8001406 <HAL_ADC_ConfigChannel+0x162>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001464:	68a2      	ldr	r2, [r4, #8]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	2a01      	cmp	r2, #1
 800146c:	f040 81a0 	bne.w	80017b0 <HAL_ADC_ConfigChannel+0x50c>
 8001470:	6822      	ldr	r2, [r4, #0]
 8001472:	07d2      	lsls	r2, r2, #31
 8001474:	f140 819c 	bpl.w	80017b0 <HAL_ADC_ConfigChannel+0x50c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001478:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800147a:	f042 0220 	orr.w	r2, r2, #32
 800147e:	65da      	str	r2, [r3, #92]	; 0x5c
          tmp_hal_status = HAL_ERROR;
 8001480:	2001      	movs	r0, #1
 8001482:	e725      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x2c>
 8001484:	4a90      	ldr	r2, [pc, #576]	; (80016c8 <HAL_ADC_ConfigChannel+0x424>)
 8001486:	6892      	ldr	r2, [r2, #8]
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001488:	0217      	lsls	r7, r2, #8
 800148a:	d4bc      	bmi.n	8001406 <HAL_ADC_ConfigChannel+0x162>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 800148c:	68a2      	ldr	r2, [r4, #8]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	2a01      	cmp	r2, #1
 8001494:	f000 8187 	beq.w	80017a6 <HAL_ADC_ConfigChannel+0x502>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001498:	4a8c      	ldr	r2, [pc, #560]	; (80016cc <HAL_ADC_ConfigChannel+0x428>)
 800149a:	4294      	cmp	r4, r2
 800149c:	d1b3      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x162>
 800149e:	498a      	ldr	r1, [pc, #552]	; (80016c8 <HAL_ADC_ConfigChannel+0x424>)
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80014a0:	4d8b      	ldr	r5, [pc, #556]	; (80016d0 <HAL_ADC_ConfigChannel+0x42c>)
 80014a2:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014a4:	688a      	ldr	r2, [r1, #8]
 80014a6:	4c8b      	ldr	r4, [pc, #556]	; (80016d4 <HAL_ADC_ConfigChannel+0x430>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014a8:	f000 70e0 	and.w	r0, r0, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014ac:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80014b0:	4302      	orrs	r2, r0
 80014b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014b6:	608a      	str	r2, [r1, #8]
 80014b8:	682a      	ldr	r2, [r5, #0]
 80014ba:	fba4 1202 	umull	r1, r2, r4, r2
 80014be:	0cd2      	lsrs	r2, r2, #19
 80014c0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80014c4:	00d2      	lsls	r2, r2, #3
 80014c6:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0)
 80014c8:	9a01      	ldr	r2, [sp, #4]
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d09b      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x162>
                wait_loop_index--;
 80014ce:	9a01      	ldr	r2, [sp, #4]
 80014d0:	3a01      	subs	r2, #1
 80014d2:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0)
 80014d4:	9a01      	ldr	r2, [sp, #4]
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	d1f9      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x22a>
 80014da:	e794      	b.n	8001406 <HAL_ADC_ConfigChannel+0x162>
 80014dc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80014e0:	fa90 f0a0 	rbit	r0, r0
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80014e4:	f002 7500 	and.w	r5, r2, #33554432	; 0x2000000
 80014e8:	fab0 f080 	clz	r0, r0
 80014ec:	fa25 f000 	lsr.w	r0, r5, r0
 80014f0:	f104 0714 	add.w	r7, r4, #20
 80014f4:	f04f 76f8 	mov.w	r6, #32505856	; 0x1f00000
 80014f8:	fa96 f5a6 	rbit	r5, r6
  MODIFY_REG(*preg,
 80014fc:	fab5 f585 	clz	r5, r5
 8001500:	fa96 f6a6 	rbit	r6, r6
 8001504:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8001508:	40ea      	lsrs	r2, r5
 800150a:	2607      	movs	r6, #7
 800150c:	f857 5020 	ldr.w	r5, [r7, r0, lsl #2]
 8001510:	fa06 f202 	lsl.w	r2, r6, r2
 8001514:	ea25 0502 	bic.w	r5, r5, r2
 8001518:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800151c:	6962      	ldr	r2, [r4, #20]
 800151e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001522:	6162      	str	r2, [r4, #20]
 8001524:	e730      	b.n	8001388 <HAL_ADC_ConfigChannel+0xe4>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001526:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001528:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800152a:	f3c2 0012 	ubfx	r0, r2, #0, #19
 800152e:	f3c5 6684 	ubfx	r6, r5, #26, #5
 8001532:	2800      	cmp	r0, #0
 8001534:	f040 80d4 	bne.w	80016e0 <HAL_ADC_ConfigChannel+0x43c>
 8001538:	f3c2 6784 	ubfx	r7, r2, #26, #5
 800153c:	42be      	cmp	r6, r7
 800153e:	f040 811f 	bne.w	8001780 <HAL_ADC_ConfigChannel+0x4dc>
  MODIFY_REG(*preg,
 8001542:	4620      	mov	r0, r4
 8001544:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8001548:	f840 5f60 	str.w	r5, [r0, #96]!
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800154c:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800154e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001550:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8001554:	f3c5 6684 	ubfx	r6, r5, #26, #5
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001558:	f104 0e64 	add.w	lr, r4, #100	; 0x64
 800155c:	2f00      	cmp	r7, #0
 800155e:	f040 80cd 	bne.w	80016fc <HAL_ADC_ConfigChannel+0x458>
 8001562:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8001566:	42be      	cmp	r6, r7
 8001568:	f040 8112 	bne.w	8001790 <HAL_ADC_ConfigChannel+0x4ec>
  MODIFY_REG(*preg,
 800156c:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8001570:	f8ce 5000 	str.w	r5, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001574:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001576:	6885      	ldr	r5, [r0, #8]
 8001578:	f3c2 0712 	ubfx	r7, r2, #0, #19
 800157c:	f3c5 6684 	ubfx	r6, r5, #26, #5
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001580:	f100 0e08 	add.w	lr, r0, #8
 8001584:	2f00      	cmp	r7, #0
 8001586:	f040 80c5 	bne.w	8001714 <HAL_ADC_ConfigChannel+0x470>
 800158a:	f3c2 6784 	ubfx	r7, r2, #26, #5
 800158e:	42b7      	cmp	r7, r6
 8001590:	f040 8104 	bne.w	800179c <HAL_ADC_ConfigChannel+0x4f8>
  MODIFY_REG(*preg,
 8001594:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8001598:	f8ce 5000 	str.w	r5, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800159c:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800159e:	68c5      	ldr	r5, [r0, #12]
 80015a0:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a4:	300c      	adds	r0, #12
 80015a6:	f3c5 6684 	ubfx	r6, r5, #26, #5
 80015aa:	2f00      	cmp	r7, #0
 80015ac:	f040 80bd 	bne.w	800172a <HAL_ADC_ConfigChannel+0x486>
 80015b0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80015b4:	42b2      	cmp	r2, r6
  MODIFY_REG(*preg,
 80015b6:	bf04      	itt	eq
 80015b8:	f025 4500 	biceq.w	r5, r5, #2147483648	; 0x80000000
 80015bc:	6005      	streq	r5, [r0, #0]
 80015be:	e6ff      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x11c>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015c0:	2f00      	cmp	r7, #0
 80015c2:	d15a      	bne.n	800167a <HAL_ADC_ConfigChannel+0x3d6>
 80015c4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80015c8:	1c46      	adds	r6, r0, #1
 80015ca:	2e09      	cmp	r6, #9
 80015cc:	f200 80b2 	bhi.w	8001734 <HAL_ADC_ConfigChannel+0x490>
 80015d0:	2501      	movs	r5, #1
 80015d2:	40b5      	lsls	r5, r6
 80015d4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80015d8:	ea45 6586 	orr.w	r5, r5, r6, lsl #26
 80015dc:	0512      	lsls	r2, r2, #20
 80015de:	432a      	orrs	r2, r5
 80015e0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80015e4:	fa97 f7a7 	rbit	r7, r7
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80015e8:	fab7 f087 	clz	r0, r7
 80015ec:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 80015f0:	40c7      	lsrs	r7, r0
  MODIFY_REG(*preg,
 80015f2:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80015f6:	f104 0e14 	add.w	lr, r4, #20
 80015fa:	f04f 70f8 	mov.w	r0, #32505856	; 0x1f00000
 80015fe:	fa90 fca0 	rbit	ip, r0
  MODIFY_REG(*preg,
 8001602:	fabc fc8c 	clz	ip, ip
 8001606:	fa90 f0a0 	rbit	r0, r0
 800160a:	fab0 f080 	clz	r0, r0
 800160e:	fa22 fc0c 	lsr.w	ip, r2, ip
 8001612:	688e      	ldr	r6, [r1, #8]
 8001614:	f85e 5027 	ldr.w	r5, [lr, r7, lsl #2]
 8001618:	40c2      	lsrs	r2, r0
 800161a:	2007      	movs	r0, #7
 800161c:	fa00 fc0c 	lsl.w	ip, r0, ip
 8001620:	fa06 f202 	lsl.w	r2, r6, r2
 8001624:	ea25 050c 	bic.w	r5, r5, ip
 8001628:	432a      	orrs	r2, r5
 800162a:	f84e 2027 	str.w	r2, [lr, r7, lsl #2]
 800162e:	6808      	ldr	r0, [r1, #0]
 8001630:	e6df      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x14e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001632:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_ADC_ConfigChannel+0x424>)
 8001634:	6892      	ldr	r2, [r2, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001636:	01d6      	lsls	r6, r2, #7
 8001638:	f53f aee5 	bmi.w	8001406 <HAL_ADC_ConfigChannel+0x162>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 800163c:	68a2      	ldr	r2, [r4, #8]
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	2a01      	cmp	r2, #1
 8001644:	d103      	bne.n	800164e <HAL_ADC_ConfigChannel+0x3aa>
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	07d1      	lsls	r1, r2, #31
 800164a:	f53f af15 	bmi.w	8001478 <HAL_ADC_ConfigChannel+0x1d4>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <HAL_ADC_ConfigChannel+0x428>)
 8001650:	4294      	cmp	r4, r2
 8001652:	f47f aed8 	bne.w	8001406 <HAL_ADC_ConfigChannel+0x162>
 8001656:	491c      	ldr	r1, [pc, #112]	; (80016c8 <HAL_ADC_ConfigChannel+0x424>)
 8001658:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800165a:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800165c:	f000 70e0 	and.w	r0, r0, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001660:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001664:	4302      	orrs	r2, r0
 8001666:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800166a:	608a      	str	r2, [r1, #8]
 800166c:	e6cb      	b.n	8001406 <HAL_ADC_ConfigChannel+0x162>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 800166e:	2206      	movs	r2, #6
 8001670:	604a      	str	r2, [r1, #4]
 8001672:	4696      	mov	lr, r2
 8001674:	f46f 67f8 	mvn.w	r7, #1984	; 0x7c0
 8001678:	e63b      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x4e>
 800167a:	fa90 f2a0 	rbit	r2, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 800167e:	fab2 f282 	clz	r2, r2
 8001682:	3201      	adds	r2, #1
 8001684:	2a09      	cmp	r2, #9
 8001686:	d861      	bhi.n	800174c <HAL_ADC_ConfigChannel+0x4a8>
 8001688:	fa90 f5a0 	rbit	r5, r0
 800168c:	fab5 f585 	clz	r5, r5
 8001690:	fa90 f2a0 	rbit	r2, r0
 8001694:	fab2 f282 	clz	r2, r2
 8001698:	1c56      	adds	r6, r2, #1
 800169a:	2201      	movs	r2, #1
 800169c:	4415      	add	r5, r2
 800169e:	40b2      	lsls	r2, r6
 80016a0:	ea42 6585 	orr.w	r5, r2, r5, lsl #26
 80016a4:	fa90 f2a0 	rbit	r2, r0
 80016a8:	fab2 f282 	clz	r2, r2
 80016ac:	3201      	adds	r2, #1
 80016ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016b2:	0512      	lsls	r2, r2, #20
 80016b4:	e793      	b.n	80015de <HAL_ADC_ConfigChannel+0x33a>
 80016b6:	bf00      	nop
 80016b8:	0007ffff 	.word	0x0007ffff
 80016bc:	c7520000 	.word	0xc7520000
 80016c0:	cb840000 	.word	0xcb840000
 80016c4:	80000001 	.word	0x80000001
 80016c8:	50040300 	.word	0x50040300
 80016cc:	50040000 	.word	0x50040000
 80016d0:	20000a50 	.word	0x20000a50
 80016d4:	431bde83 	.word	0x431bde83
 80016d8:	03fff000 	.word	0x03fff000
 80016dc:	407f0000 	.word	0x407f0000
 80016e0:	fa92 f0a2 	rbit	r0, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016e4:	fab0 f080 	clz	r0, r0
 80016e8:	4286      	cmp	r6, r0
 80016ea:	f43f af2a 	beq.w	8001542 <HAL_ADC_ConfigChannel+0x29e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016ee:	6e65      	ldr	r5, [r4, #100]	; 0x64
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f0:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016f4:	f3c5 6684 	ubfx	r6, r5, #26, #5
 80016f8:	f104 0e64 	add.w	lr, r4, #100	; 0x64
 80016fc:	fa92 f7a2 	rbit	r7, r2
 8001700:	fab7 f787 	clz	r7, r7
 8001704:	42b7      	cmp	r7, r6
 8001706:	f43f af31 	beq.w	800156c <HAL_ADC_ConfigChannel+0x2c8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800170a:	6885      	ldr	r5, [r0, #8]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170c:	f100 0e08 	add.w	lr, r0, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001710:	f3c5 6684 	ubfx	r6, r5, #26, #5
 8001714:	fa92 f7a2 	rbit	r7, r2
 8001718:	fab7 f787 	clz	r7, r7
 800171c:	42b7      	cmp	r7, r6
 800171e:	f43f af39 	beq.w	8001594 <HAL_ADC_ConfigChannel+0x2f0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001722:	68c5      	ldr	r5, [r0, #12]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001724:	300c      	adds	r0, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001726:	f3c5 6684 	ubfx	r6, r5, #26, #5
 800172a:	fa92 f2a2 	rbit	r2, r2
 800172e:	fab2 f282 	clz	r2, r2
 8001732:	e73f      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x310>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8001734:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001738:	f1a0 021b 	sub.w	r2, r0, #27
 800173c:	2501      	movs	r5, #1
 800173e:	0512      	lsls	r2, r2, #20
 8001740:	40b5      	lsls	r5, r6
 8001742:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001746:	ea45 6586 	orr.w	r5, r5, r6, lsl #26
 800174a:	e748      	b.n	80015de <HAL_ADC_ConfigChannel+0x33a>
 800174c:	fa90 f5a0 	rbit	r5, r0
 8001750:	fab5 f585 	clz	r5, r5
 8001754:	fa90 f2a0 	rbit	r2, r0
 8001758:	fab2 f282 	clz	r2, r2
 800175c:	1c56      	adds	r6, r2, #1
 800175e:	2201      	movs	r2, #1
 8001760:	4415      	add	r5, r2
 8001762:	40b2      	lsls	r2, r6
 8001764:	ea42 6585 	orr.w	r5, r2, r5, lsl #26
 8001768:	fa90 f0a0 	rbit	r0, r0
 800176c:	fab0 f080 	clz	r0, r0
 8001770:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001774:	f1a0 021b 	sub.w	r2, r0, #27
 8001778:	0512      	lsls	r2, r2, #20
 800177a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800177e:	e72e      	b.n	80015de <HAL_ADC_ConfigChannel+0x33a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001780:	6e65      	ldr	r5, [r4, #100]	; 0x64
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001782:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001786:	f3c5 6684 	ubfx	r6, r5, #26, #5
 800178a:	f104 0e64 	add.w	lr, r4, #100	; 0x64
 800178e:	e6ea      	b.n	8001566 <HAL_ADC_ConfigChannel+0x2c2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001790:	6885      	ldr	r5, [r0, #8]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001792:	f100 0e08 	add.w	lr, r0, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001796:	f3c5 6684 	ubfx	r6, r5, #26, #5
 800179a:	e6f6      	b.n	800158a <HAL_ADC_ConfigChannel+0x2e6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800179c:	68c5      	ldr	r5, [r0, #12]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179e:	300c      	adds	r0, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017a0:	f3c5 6684 	ubfx	r6, r5, #26, #5
 80017a4:	e704      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x30c>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80017a6:	6822      	ldr	r2, [r4, #0]
 80017a8:	07d0      	lsls	r0, r2, #31
 80017aa:	f53f ae65 	bmi.w	8001478 <HAL_ADC_ConfigChannel+0x1d4>
 80017ae:	e673      	b.n	8001498 <HAL_ADC_ConfigChannel+0x1f4>
            if (ADC_VREFINT_INSTANCE(hadc))
 80017b0:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_ADC_ConfigChannel+0x530>)
 80017b2:	4294      	cmp	r4, r2
 80017b4:	f47f ae27 	bne.w	8001406 <HAL_ADC_ConfigChannel+0x162>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017b8:	4907      	ldr	r1, [pc, #28]	; (80017d8 <HAL_ADC_ConfigChannel+0x534>)
 80017ba:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017bc:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017be:	f000 70e0 	and.w	r0, r0, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017c2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80017c6:	4302      	orrs	r2, r0
 80017c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80017cc:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ce:	2000      	movs	r0, #0
 80017d0:	e57e      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x2c>
 80017d2:	bf00      	nop
 80017d4:	50040000 	.word	0x50040000
 80017d8:	50040300 	.word	0x50040300

080017dc <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80017dc:	6803      	ldr	r3, [r0, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	f012 0f0c 	tst.w	r2, #12
 80017e4:	d032      	beq.n	800184c <ADC_ConversionStop+0x70>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80017e6:	68da      	ldr	r2, [r3, #12]
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80017ea:	0195      	lsls	r5, r2, #6
 80017ec:	4604      	mov	r4, r0
 80017ee:	d502      	bpl.n	80017f6 <ADC_ConversionStop+0x1a>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 80017f0:	69c2      	ldr	r2, [r0, #28]
 80017f2:	2a01      	cmp	r2, #1
 80017f4:	d03d      	beq.n	8001872 <ADC_ConversionStop+0x96>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80017f6:	2902      	cmp	r1, #2
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80017f8:	689a      	ldr	r2, [r3, #8]
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80017fa:	d029      	beq.n	8001850 <ADC_ConversionStop+0x74>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80017fc:	0755      	lsls	r5, r2, #29
 80017fe:	d502      	bpl.n	8001806 <ADC_ConversionStop+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001800:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001802:	0790      	lsls	r0, r2, #30
 8001804:	d54b      	bpl.n	800189e <ADC_ConversionStop+0xc2>
        LL_ADC_REG_StopConversion(hadc->Instance);
      }
    }
    
    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001806:	2901      	cmp	r1, #1
 8001808:	d029      	beq.n	800185e <ADC_ConversionStop+0x82>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	0712      	lsls	r2, r2, #28
 800180e:	d428      	bmi.n	8001862 <ADC_ConversionStop+0x86>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
      }   
    }
    
    /* Selection of start and stop bits with respect to the regular or injected group */
    switch(ConversionGroup)
 8001810:	2902      	cmp	r1, #2
 8001812:	d022      	beq.n	800185a <ADC_ConversionStop+0x7e>
 8001814:	2903      	cmp	r1, #3
 8001816:	d122      	bne.n	800185e <ADC_ConversionStop+0x82>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001818:	250c      	movs	r5, #12
    }
    
    /* Wait for conversion effectively stopped */
    
    
    tickstart = HAL_GetTick();
 800181a:	f7ff fc01 	bl	8001020 <HAL_GetTick>
 800181e:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001820:	e004      	b.n	800182c <ADC_ConversionStop+0x50>
    {
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001822:	f7ff fbfd 	bl	8001020 <HAL_GetTick>
 8001826:	1b80      	subs	r0, r0, r6
 8001828:	2805      	cmp	r0, #5
 800182a:	d805      	bhi.n	8001838 <ADC_ConversionStop+0x5c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	421d      	tst	r5, r3
 8001832:	d1f6      	bne.n	8001822 <ADC_ConversionStop+0x46>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001834:	2000      	movs	r0, #0
 8001836:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001838:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001848:	2001      	movs	r0, #1
 800184a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800184c:	2000      	movs	r0, #0
}
 800184e:	4770      	bx	lr
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001850:	0715      	lsls	r5, r2, #28
 8001852:	d502      	bpl.n	800185a <ADC_ConversionStop+0x7e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001854:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001856:	0790      	lsls	r0, r2, #30
 8001858:	d506      	bpl.n	8001868 <ADC_ConversionStop+0x8c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800185a:	2508      	movs	r5, #8
        break;
 800185c:	e7dd      	b.n	800181a <ADC_ConversionStop+0x3e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800185e:	2504      	movs	r5, #4
        break;
 8001860:	e7db      	b.n	800181a <ADC_ConversionStop+0x3e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001862:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001864:	0796      	lsls	r6, r2, #30
 8001866:	d4d3      	bmi.n	8001810 <ADC_ConversionStop+0x34>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	f042 0220 	orr.w	r2, r2, #32
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	e7ce      	b.n	8001810 <ADC_ConversionStop+0x34>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 8001872:	6982      	ldr	r2, [r0, #24]
 8001874:	2a01      	cmp	r2, #1
 8001876:	d1be      	bne.n	80017f6 <ADC_ConversionStop+0x1a>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	0650      	lsls	r0, r2, #25
 800187c:	d406      	bmi.n	800188c <ADC_ConversionStop+0xb0>
 800187e:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <ADC_ConversionStop+0xd4>)
 8001880:	e001      	b.n	8001886 <ADC_ConversionStop+0xaa>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 8001882:	3a01      	subs	r2, #1
 8001884:	d0d8      	beq.n	8001838 <ADC_ConversionStop+0x5c>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	0649      	lsls	r1, r1, #25
 800188a:	d5fa      	bpl.n	8001882 <ADC_ConversionStop+0xa6>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	0756      	lsls	r6, r2, #29
 8001894:	d5e3      	bpl.n	800185e <ADC_ConversionStop+0x82>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001896:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001898:	0792      	lsls	r2, r2, #30
 800189a:	d4e0      	bmi.n	800185e <ADC_ConversionStop+0x82>
      ConversionGroup = ADC_REGULAR_GROUP;
 800189c:	2101      	movs	r1, #1
  MODIFY_REG(ADCx->CR,
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018a4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80018a8:	f042 0210 	orr.w	r2, r2, #16
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	e7aa      	b.n	8001806 <ADC_ConversionStop+0x2a>
 80018b0:	0a340000 	.word	0x0a340000

080018b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	b082      	sub	sp, #8
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 80018b8:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018ba:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 80018bc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018be:	6893      	ldr	r3, [r2, #8]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d037      	beq.n	8001938 <ADC_Enable+0x84>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018c8:	6891      	ldr	r1, [r2, #8]
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <ADC_Enable+0xc0>)
 80018cc:	4219      	tst	r1, r3
 80018ce:	d13a      	bne.n	8001946 <ADC_Enable+0x92>
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80018d0:	4b29      	ldr	r3, [pc, #164]	; (8001978 <ADC_Enable+0xc4>)
 80018d2:	4c2a      	ldr	r4, [pc, #168]	; (800197c <ADC_Enable+0xc8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80018d6:	6891      	ldr	r1, [r2, #8]
 80018d8:	fba4 4303 	umull	r4, r3, r4, r3
 80018dc:	0cdb      	lsrs	r3, r3, #19
 80018de:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80018e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018e6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	f041 0101 	orr.w	r1, r1, #1
 80018f0:	6091      	str	r1, [r2, #8]
 80018f2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80018f4:	9b01      	ldr	r3, [sp, #4]
 80018f6:	b12b      	cbz	r3, 8001904 <ADC_Enable+0x50>
    {
      wait_loop_index--;
 80018f8:	9b01      	ldr	r3, [sp, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80018fe:	9b01      	ldr	r3, [sp, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f9      	bne.n	80018f8 <ADC_Enable+0x44>
 8001904:	4604      	mov	r4, r0
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001906:	f7ff fb8b 	bl	8001020 <HAL_GetTick>
 800190a:	4e1d      	ldr	r6, [pc, #116]	; (8001980 <ADC_Enable+0xcc>)
 800190c:	4605      	mov	r5, r0
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800190e:	e00c      	b.n	800192a <ADC_Enable+0x76>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001910:	689a      	ldr	r2, [r3, #8]
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 8001912:	07d1      	lsls	r1, r2, #31
 8001914:	d404      	bmi.n	8001920 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	4032      	ands	r2, r6
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	609a      	str	r2, [r3, #8]
      {
        LL_ADC_Enable(hadc->Instance);
      }
      
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001920:	f7ff fb7e 	bl	8001020 <HAL_GetTick>
 8001924:	1b40      	subs	r0, r0, r5
 8001926:	2802      	cmp	r0, #2
 8001928:	d818      	bhi.n	800195c <ADC_Enable+0xa8>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	07d2      	lsls	r2, r2, #31
 8001930:	d5ee      	bpl.n	8001910 <ADC_Enable+0x5c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001932:	2000      	movs	r0, #0
}
 8001934:	b002      	add	sp, #8
 8001936:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	07dc      	lsls	r4, r3, #31
 800193c:	d4f9      	bmi.n	8001932 <ADC_Enable+0x7e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800193e:	6891      	ldr	r1, [r2, #8]
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <ADC_Enable+0xc0>)
 8001942:	4219      	tst	r1, r3
 8001944:	d0c4      	beq.n	80018d0 <ADC_Enable+0x1c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001946:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8001956:	2001      	movs	r0, #1
}
 8001958:	b002      	add	sp, #8
 800195a:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	6e23      	ldr	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800196e:	b002      	add	sp, #8
 8001970:	bd70      	pop	{r4, r5, r6, pc}
 8001972:	bf00      	nop
 8001974:	8000003f 	.word	0x8000003f
 8001978:	20000a50 	.word	0x20000a50
 800197c:	431bde83 	.word	0x431bde83
 8001980:	7fffffc0 	.word	0x7fffffc0

08001984 <HAL_ADC_Start>:
{
 8001984:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001986:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001988:	689c      	ldr	r4, [r3, #8]
 800198a:	f014 0404 	ands.w	r4, r4, #4
 800198e:	d001      	beq.n	8001994 <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 8001990:	2002      	movs	r0, #2
}
 8001992:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8001994:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001998:	2b01      	cmp	r3, #1
 800199a:	4605      	mov	r5, r0
 800199c:	d0f8      	beq.n	8001990 <HAL_ADC_Start+0xc>
 800199e:	2301      	movs	r3, #1
 80019a0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 80019a4:	f7ff ff86 	bl	80018b4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80019a8:	2800      	cmp	r0, #0
 80019aa:	d12c      	bne.n	8001a06 <HAL_ADC_Start+0x82>
      ADC_STATE_CLR_SET(hadc->State,
 80019ac:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80019ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	65eb      	str	r3, [r5, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019bc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80019be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019c2:	65eb      	str	r3, [r5, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80019c6:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019c8:	bf48      	it	mi
 80019ca:	6e2b      	ldrmi	r3, [r5, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019cc:	682a      	ldr	r2, [r5, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 80019ce:	bf52      	itee	pl
 80019d0:	6628      	strpl	r0, [r5, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019d2:	f023 0306 	bicmi.w	r3, r3, #6
 80019d6:	662b      	strmi	r3, [r5, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019d8:	231c      	movs	r3, #28
 80019da:	6013      	str	r3, [r2, #0]
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019dc:	68d3      	ldr	r3, [r2, #12]
      __HAL_UNLOCK(hadc);
 80019de:	2100      	movs	r1, #0
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019e0:	019b      	lsls	r3, r3, #6
      __HAL_UNLOCK(hadc);
 80019e2:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019e6:	d505      	bpl.n	80019f4 <HAL_ADC_Start+0x70>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019e8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80019ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f2:	65eb      	str	r3, [r5, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 80019f4:	6893      	ldr	r3, [r2, #8]
 80019f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	6093      	str	r3, [r2, #8]
 8001a04:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8001a06:	f885 4058 	strb.w	r4, [r5, #88]	; 0x58
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}

08001a0c <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a0c:	6802      	ldr	r2, [r0, #0]
{
 8001a0e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a10:	6893      	ldr	r3, [r2, #8]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d002      	beq.n	8001a20 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a20:	6811      	ldr	r1, [r2, #0]
 8001a22:	07c9      	lsls	r1, r1, #31
 8001a24:	d5f9      	bpl.n	8001a1a <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a26:	6891      	ldr	r1, [r2, #8]
 8001a28:	f001 010d 	and.w	r1, r1, #13
 8001a2c:	2901      	cmp	r1, #1
 8001a2e:	d009      	beq.n	8001a44 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001a32:	f042 0210 	orr.w	r2, r2, #16
 8001a36:	65c2      	str	r2, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a38:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	6602      	str	r2, [r0, #96]	; 0x60
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001a44:	6893      	ldr	r3, [r2, #8]
 8001a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001a52:	2103      	movs	r1, #3
 8001a54:	6093      	str	r3, [r2, #8]
 8001a56:	6011      	str	r1, [r2, #0]
 8001a58:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001a5a:	f7ff fae1 	bl	8001020 <HAL_GetTick>
 8001a5e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	07db      	lsls	r3, r3, #31
 8001a66:	d5d8      	bpl.n	8001a1a <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a68:	f7ff fada 	bl	8001020 <HAL_GetTick>
 8001a6c:	1b40      	subs	r0, r0, r5
 8001a6e:	2802      	cmp	r0, #2
 8001a70:	d9f6      	bls.n	8001a60 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a74:	f043 0310 	orr.w	r3, r3, #16
 8001a78:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e7ca      	b.n	8001a1c <ADC_Disable+0x10>
 8001a86:	bf00      	nop

08001a88 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001a88:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8001a8c:	2a01      	cmp	r2, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_ADC_Stop+0xc>
 8001a90:	2002      	movs	r0, #2
 8001a92:	4770      	bx	lr
 8001a94:	2301      	movs	r3, #1
{
 8001a96:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a98:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8001a9a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 8001a9e:	4604      	mov	r4, r0
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001aa0:	f7ff fe9c 	bl	80017dc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001aa4:	b118      	cbz	r0, 8001aae <HAL_ADC_Stop+0x26>
  __HAL_UNLOCK(hadc);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8001aac:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7ff ffac 	bl	8001a0c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d1f6      	bne.n	8001aa6 <HAL_ADC_Stop+0x1e>
      ADC_STATE_CLR_SET(hadc->State,
 8001ab8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001aba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001ac8:	e7ed      	b.n	8001aa6 <HAL_ADC_Stop+0x1e>
 8001aca:	bf00      	nop

08001acc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ace:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	0c1b      	lsrs	r3, r3, #16
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001adc:	0200      	lsls	r0, r0, #8
 8001ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001ae6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001ae8:	60d3      	str	r3, [r2, #12]
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af2:	b530      	push	{r4, r5, lr}
 8001af4:	68dc      	ldr	r4, [r3, #12]
 8001af6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	bf28      	it	cs
 8001b04:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 0501 	mov.w	r5, #1
 8001b0c:	fa05 f303 	lsl.w	r3, r5, r3
 8001b10:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b14:	bf8c      	ite	hi
 8001b16:	3c03      	subhi	r4, #3
 8001b18:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1a:	4019      	ands	r1, r3
 8001b1c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1e:	fa05 f404 	lsl.w	r4, r5, r4
 8001b22:	3c01      	subs	r4, #1
 8001b24:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001b26:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	ea42 0201 	orr.w	r2, r2, r1
 8001b2c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	bfaf      	iteee	ge
 8001b32:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	f000 000f 	andlt.w	r0, r0, #15
 8001b3a:	4b06      	ldrlt	r3, [pc, #24]	; (8001b54 <HAL_NVIC_SetPriority+0x64>)
 8001b3c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	bfa5      	ittet	ge
 8001b40:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001b44:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001b4c:	bd30      	pop	{r4, r5, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	e000ed14 	.word	0xe000ed14

08001b58 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b58:	0942      	lsrs	r2, r0, #5
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f000 001f 	and.w	r0, r0, #31
 8001b60:	fa03 f000 	lsl.w	r0, r3, r0
 8001b64:	4b01      	ldr	r3, [pc, #4]	; (8001b6c <HAL_NVIC_EnableIRQ+0x14>)
 8001b66:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b70:	0943      	lsrs	r3, r0, #5
 8001b72:	2201      	movs	r2, #1
 8001b74:	f000 001f 	and.w	r0, r0, #31
 8001b78:	fa02 f000 	lsl.w	r0, r2, r0
 8001b7c:	3320      	adds	r3, #32
 8001b7e:	4a02      	ldr	r2, [pc, #8]	; (8001b88 <HAL_NVIC_DisableIRQ+0x18>)
 8001b80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	3801      	subs	r0, #1
 8001b8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b92:	d20a      	bcs.n	8001baa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b98:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	21f0      	movs	r1, #240	; 0xf0
 8001b9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001bb8:	0943      	lsrs	r3, r0, #5
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f000 001f 	and.w	r0, r0, #31
 8001bc0:	fa02 f000 	lsl.w	r0, r2, r0
 8001bc4:	3360      	adds	r3, #96	; 0x60
 8001bc6:	4a02      	ldr	r2, [pc, #8]	; (8001bd0 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001bc8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001bd6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001bd8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001bda:	bf0c      	ite	eq
 8001bdc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001be0:	f022 0204 	bicne.w	r2, r2, #4
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	4770      	bx	lr
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001bec:	4770      	bx	lr

08001bee <HAL_SYSTICK_IRQHandler>:
{
 8001bee:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001bf0:	f7ff fffc 	bl	8001bec <HAL_SYSTICK_Callback>
 8001bf4:	bd08      	pop	{r3, pc}

08001bf6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf6:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bf8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001bfa:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001bfc:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001bfe:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001c00:	b114      	cbz	r4, 8001c08 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c02:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001c04:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001c06:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c08:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c0a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001c0c:	f004 051c 	and.w	r5, r4, #28
 8001c10:	2401      	movs	r4, #1
 8001c12:	40ac      	lsls	r4, r5
 8001c14:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c16:	6804      	ldr	r4, [r0, #0]
 8001c18:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c1a:	6883      	ldr	r3, [r0, #8]
 8001c1c:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c1e:	bf0b      	itete	eq
 8001c20:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c22:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c24:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c26:	60e2      	strne	r2, [r4, #12]
 8001c28:	bd70      	pop	{r4, r5, r6, pc}
	...

08001c2c <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c2c:	6803      	ldr	r3, [r0, #0]
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
  }
  else
  {
    /* DMA2 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001c2e:	490d      	ldr	r1, [pc, #52]	; (8001c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 8001c32:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001c34:	4c0d      	ldr	r4, [pc, #52]	; (8001c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8001c36:	42a3      	cmp	r3, r4
 8001c38:	bf88      	it	hi
 8001c3a:	460a      	movhi	r2, r1
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c3c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001c3e:	f021 0103 	bic.w	r1, r1, #3
 8001c42:	440a      	add	r2, r1
 8001c44:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c46:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001c4a:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c4c:	3b08      	subs	r3, #8
 8001c4e:	2214      	movs	r2, #20
 8001c50:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f003 031c 	and.w	r3, r3, #28
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	6503      	str	r3, [r0, #80]	; 0x50
 8001c60:	bd10      	pop	{r4, pc}
 8001c62:	bf00      	nop
 8001c64:	4002081c 	.word	0x4002081c
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020407 	.word	0x40020407
 8001c70:	40020880 	.word	0x40020880

08001c74 <HAL_DMA_Init>:
{
 8001c74:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8001c76:	4604      	mov	r4, r0
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d05d      	beq.n	8001d38 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c7c:	6801      	ldr	r1, [r0, #0]
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_DMA_Init+0xc8>)
 8001c80:	4299      	cmp	r1, r3
 8001c82:	f04f 0014 	mov.w	r0, #20
 8001c86:	d84a      	bhi.n	8001d1e <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c88:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <HAL_DMA_Init+0xcc>)
 8001c8a:	440a      	add	r2, r1
 8001c8c:	fbb2 f2f0 	udiv	r2, r2, r0
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c94:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001c98:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001ca0:	68e0      	ldr	r0, [r4, #12]
 8001ca2:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8001ca4:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001ca6:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca8:	6920      	ldr	r0, [r4, #16]
 8001caa:	4303      	orrs	r3, r0
 8001cac:	6960      	ldr	r0, [r4, #20]
 8001cae:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb0:	69a0      	ldr	r0, [r4, #24]
 8001cb2:	4303      	orrs	r3, r0
 8001cb4:	69e0      	ldr	r0, [r4, #28]
 8001cb6:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb8:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cba:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001cbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc2:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001cc4:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001cc6:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff ffaf 	bl	8001c2c <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cce:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cd2:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cd8:	bf04      	itt	eq
 8001cda:	2300      	moveq	r3, #0
 8001cdc:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cde:	6862      	ldr	r2, [r4, #4]
 8001ce0:	b2d3      	uxtb	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ce4:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ce8:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cea:	6048      	str	r0, [r1, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001cec:	d81f      	bhi.n	8001d2e <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cf0:	4815      	ldr	r0, [pc, #84]	; (8001d48 <HAL_DMA_Init+0xd4>)
 8001cf2:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cf4:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cf6:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cf8:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d04:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d06:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d08:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d0a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d0c:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d0e:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001d10:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d12:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001d14:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001d18:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 8001d1c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_DMA_Init+0xd8>)
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_DMA_Init+0xdc>)
 8001d2c:	e7b4      	b.n	8001c98 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d32:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d34:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001d36:	e7ea      	b.n	8001d0e <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8001d38:	2001      	movs	r0, #1
}
 8001d3a:	bd10      	pop	{r4, pc}
 8001d3c:	40020407 	.word	0x40020407
 8001d40:	bffdfff8 	.word	0xbffdfff8
 8001d44:	1000823f 	.word	0x1000823f
 8001d48:	40020940 	.word	0x40020940
 8001d4c:	bffdfbf8 	.word	0xbffdfbf8
 8001d50:	40020400 	.word	0x40020400

08001d54 <HAL_DMA_DeInit>:
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma )
 8001d56:	4604      	mov	r4, r0
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	d045      	beq.n	8001de8 <HAL_DMA_DeInit+0x94>
  __HAL_DMA_DISABLE(hdma);
 8001d5c:	6801      	ldr	r1, [r0, #0]
 8001d5e:	680b      	ldr	r3, [r1, #0]
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_DMA_DeInit+0x98>)
 8001d68:	4299      	cmp	r1, r3
 8001d6a:	f04f 0014 	mov.w	r0, #20
 8001d6e:	d833      	bhi.n	8001dd8 <HAL_DMA_DeInit+0x84>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d70:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <HAL_DMA_DeInit+0x9c>)
 8001d72:	440a      	add	r2, r1
 8001d74:	fbb2 f2f0 	udiv	r2, r2, r0
 8001d78:	0092      	lsls	r2, r2, #2
 8001d7a:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d7c:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001d80:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d86:	f003 031c 	and.w	r3, r3, #28
 8001d8a:	2501      	movs	r5, #1
 8001d8c:	fa05 f303 	lsl.w	r3, r5, r3
  hdma->Instance->CCR  = 0;
 8001d90:	2600      	movs	r6, #0
 8001d92:	600e      	str	r6, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d94:	4620      	mov	r0, r4
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d96:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d98:	f7ff ff48 	bl	8001c2c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 8001d9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d9e:	6861      	ldr	r1, [r4, #4]
  hdma->DMAmuxChannel->CCR = 0;
 8001da0:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001da4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001da6:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001da8:	1e4a      	subs	r2, r1, #1
 8001daa:	2a03      	cmp	r2, #3
 8001dac:	d806      	bhi.n	8001dbc <HAL_DMA_DeInit+0x68>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_DMA_DeInit+0xa0>)
 8001db0:	440b      	add	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001db4:	4095      	lsls	r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001db6:	601e      	str	r6, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_DMA_DeInit+0xa4>)
 8001dba:	605d      	str	r5, [r3, #4]
  hdma->DMAmuxRequestGen = 0U;
 8001dbc:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dbe:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->DMAmuxRequestGen = 0U;
 8001dc0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001dc2:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dc4:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8001dc6:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001dc8:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001dca:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001dcc:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 8001dce:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001dd2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return HAL_OK;
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_DMA_DeInit+0xa8>)
 8001dda:	440b      	add	r3, r1
 8001ddc:	fbb3 f3f0 	udiv	r3, r3, r0
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_DMA_DeInit+0xac>)
 8001de6:	e7cb      	b.n	8001d80 <HAL_DMA_DeInit+0x2c>
    return HAL_ERROR;
 8001de8:	2001      	movs	r0, #1
}
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	40020407 	.word	0x40020407
 8001df0:	bffdfff8 	.word	0xbffdfff8
 8001df4:	1000823f 	.word	0x1000823f
 8001df8:	40020940 	.word	0x40020940
 8001dfc:	bffdfbf8 	.word	0xbffdfbf8
 8001e00:	40020400 	.word	0x40020400

08001e04 <HAL_DMA_Start_IT>:
{
 8001e04:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001e06:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8001e0a:	2d01      	cmp	r5, #1
{
 8001e0c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001e0e:	d039      	beq.n	8001e84 <HAL_DMA_Start_IT+0x80>
 8001e10:	2501      	movs	r5, #1
 8001e12:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e16:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8001e1a:	2d01      	cmp	r5, #1
 8001e1c:	f04f 0600 	mov.w	r6, #0
 8001e20:	f04f 0502 	mov.w	r5, #2
 8001e24:	d12c      	bne.n	8001e80 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e26:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2a:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001e2c:	6806      	ldr	r6, [r0, #0]
 8001e2e:	6835      	ldr	r5, [r6, #0]
 8001e30:	f025 0501 	bic.w	r5, r5, #1
 8001e34:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e36:	f7ff fede 	bl	8001bf6 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001e3a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001e3c:	6803      	ldr	r3, [r0, #0]
 8001e3e:	b1ba      	cbz	r2, 8001e70 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e46:	601a      	str	r2, [r3, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e48:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001e4a:	6811      	ldr	r1, [r2, #0]
 8001e4c:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e4e:	bf42      	ittt	mi
 8001e50:	6811      	ldrmi	r1, [r2, #0]
 8001e52:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8001e56:	6011      	strmi	r1, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001e58:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e5a:	b11a      	cbz	r2, 8001e64 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e5c:	6811      	ldr	r1, [r2, #0]
 8001e5e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001e62:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f022 0204 	bic.w	r2, r2, #4
 8001e76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	f042 020a 	orr.w	r2, r2, #10
 8001e7e:	e7e2      	b.n	8001e46 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001e80:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001e84:	2002      	movs	r0, #2
}
 8001e86:	bd70      	pop	{r4, r5, r6, pc}

08001e88 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e88:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001e8c:	2b02      	cmp	r3, #2
{
 8001e8e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e90:	d003      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e92:	2304      	movs	r3, #4
 8001e94:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001e96:	2001      	movs	r0, #1
 8001e98:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	f022 020e 	bic.w	r2, r2, #14
 8001ea4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eae:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001eb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001eba:	f003 021c 	and.w	r2, r3, #28
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	4093      	lsls	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ec4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001ec6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001ec8:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001eca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001ecc:	b133      	cbz	r3, 8001edc <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001ed8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001eda:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001edc:	2301      	movs	r3, #1
 8001ede:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferAbortCallback != NULL)
 8001ee2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001ee4:	2400      	movs	r4, #0
 8001ee6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001eea:	b113      	cbz	r3, 8001ef2 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001eec:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	4620      	mov	r0, r4
 8001ef0:	bd10      	pop	{r4, pc}
 8001ef2:	4618      	mov	r0, r3
}
 8001ef4:	bd10      	pop	{r4, pc}

08001ef6 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ef6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001ef8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001efa:	6803      	ldr	r3, [r0, #0]
{
 8001efc:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001efe:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f02:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001f04:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f06:	2404      	movs	r4, #4
 8001f08:	4094      	lsls	r4, r2
 8001f0a:	4226      	tst	r6, r4
 8001f0c:	d00e      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x36>
 8001f0e:	f015 0f04 	tst.w	r5, #4
 8001f12:	d00b      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f18:	bf5e      	ittt	pl
 8001f1a:	681a      	ldrpl	r2, [r3, #0]
 8001f1c:	f022 0204 	bicpl.w	r2, r2, #4
 8001f20:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001f22:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001f24:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001f26:	b373      	cbz	r3, 8001f86 <HAL_DMA_IRQHandler+0x90>
}
 8001f28:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001f2a:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f2c:	2402      	movs	r4, #2
 8001f2e:	4094      	lsls	r4, r2
 8001f30:	4226      	tst	r6, r4
 8001f32:	d012      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x64>
 8001f34:	f015 0f02 	tst.w	r5, #2
 8001f38:	d00f      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	0695      	lsls	r5, r2, #26
 8001f3e:	d406      	bmi.n	8001f4e <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f022 020a 	bic.w	r2, r2, #10
 8001f46:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001f4e:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f50:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001f52:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001f56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001f58:	e7e5      	b.n	8001f26 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001f5a:	2408      	movs	r4, #8
 8001f5c:	4094      	lsls	r4, r2
 8001f5e:	4234      	tst	r4, r6
 8001f60:	d011      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x90>
 8001f62:	072c      	lsls	r4, r5, #28
 8001f64:	d50f      	bpl.n	8001f86 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f66:	681c      	ldr	r4, [r3, #0]
 8001f68:	f024 040e 	bic.w	r4, r4, #14
 8001f6c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f6e:	2301      	movs	r3, #1
 8001f70:	fa03 f202 	lsl.w	r2, r3, r2
 8001f74:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f76:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001f78:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001f82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f84:	e7cf      	b.n	8001f26 <HAL_DMA_IRQHandler+0x30>
}
 8001f86:	bc70      	pop	{r4, r5, r6}
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d048      	beq.n	8002022 <HAL_DMA2D_Init+0x96>
{ 
 8001f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  assert_param(IS_DMA2D_LOM_MODE(hdma2d->Init.LineOffsetMode));
  assert_param(IS_DMA2D_BYTES_SWAP(hdma2d->Init.BytesSwap));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001f92:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001f96:	4604      	mov	r4, r0
 8001f98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d03b      	beq.n	8002018 <HAL_DMA2D_Init+0x8c>
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D CR register configuration -------------------------------------------*/
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001fa4:	68a1      	ldr	r1, [r4, #8]
 8001fa6:	69a7      	ldr	r7, [r4, #24]
#else
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001fa8:	68e6      	ldr	r6, [r4, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001faa:	2202      	movs	r2, #2
 8001fac:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001fb0:	681d      	ldr	r5, [r3, #0]
 8001fb2:	69e2      	ldr	r2, [r4, #28]
 8001fb4:	f425 25e0 	bic.w	r5, r5, #458752	; 0x70000
 8001fb8:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8001fbc:	4310      	orrs	r0, r2
 8001fbe:	4328      	orrs	r0, r5
 8001fc0:	6018      	str	r0, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001fc2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001fc4:	f420 7083 	bic.w	r0, r0, #262	; 0x106
 8001fc8:	f020 0001 	bic.w	r0, r0, #1
 8001fcc:	4339      	orrs	r1, r7
 8001fce:	4301      	orrs	r1, r0
 8001fd0:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd4:	0c12      	lsrs	r2, r2, #16
 8001fd6:	0412      	lsls	r2, r2, #16
 8001fd8:	4332      	orrs	r2, r6
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* DMA2D OPFCCR RBS and AI fields setting */
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 8001fdc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001fde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fe2:	fa92 f2a2 	rbit	r2, r2
 8001fe6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001fea:	fab2 f182 	clz	r1, r2
 8001fee:	fa90 f0a0 	rbit	r0, r0
 8001ff2:	6966      	ldr	r6, [r4, #20]
 8001ff4:	6922      	ldr	r2, [r4, #16]
 8001ff6:	fab0 f080 	clz	r0, r0
 8001ffa:	fa06 f000 	lsl.w	r0, r6, r0
 8001ffe:	408a      	lsls	r2, r1
 8002000:	4302      	orrs	r2, r0
 8002002:	f425 1140 	bic.w	r1, r5, #3145728	; 0x300000
 8002006:	430a      	orrs	r2, r1

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002008:	2501      	movs	r5, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800200a:	2100      	movs	r1, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 800200c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800200e:	4608      	mov	r0, r1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002010:	65e1      	str	r1, [r4, #92]	; 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002012:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
  return HAL_OK;
 8002016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002018:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_DMA2D_MspInit(hdma2d);
 800201c:	f01f ff98 	bl	8021f50 <HAL_DMA2D_MspInit>
 8002020:	e7be      	b.n	8001fa0 <HAL_DMA2D_Init+0x14>
     return HAL_ERROR;
 8002022:	2001      	movs	r0, #1
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop

08002028 <HAL_DMA2D_Start>:
  * @param  Width:      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height:     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002028:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800202a:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 800202e:	2c01      	cmp	r4, #1
 8002030:	d022      	beq.n	8002078 <HAL_DMA2D_Start+0x50>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002032:	2402      	movs	r4, #2
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8002034:	6805      	ldr	r5, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002036:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  __HAL_LOCK(hdma2d);
 800203a:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 800203c:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  __HAL_LOCK(hdma2d);
 800203e:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
 8002042:	4e0f      	ldr	r6, [pc, #60]	; (8002080 <HAL_DMA2D_Start+0x58>)
 8002044:	fa96 f6a6 	rbit	r6, r6
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8002048:	fab6 f686 	clz	r6, r6
 800204c:	fa03 f606 	lsl.w	r6, r3, r6
 8002050:	9b03      	ldr	r3, [sp, #12]
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002052:	6840      	ldr	r0, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8002054:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8002058:	4323      	orrs	r3, r4
 800205a:	4333      	orrs	r3, r6
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800205c:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8002060:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002062:	63ea      	str	r2, [r5, #60]	; 0x3c
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, pdata);    
 8002064:	bf0c      	ite	eq
 8002066:	63a9      	streq	r1, [r5, #56]	; 0x38
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
  WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002068:	60e9      	strne	r1, [r5, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800206a:	682b      	ldr	r3, [r5, #0]
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	602b      	str	r3, [r5, #0]
  return HAL_OK;
 8002072:	2000      	movs	r0, #0
}
 8002074:	bc70      	pop	{r4, r5, r6}
 8002076:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 8002078:	2002      	movs	r0, #2
}
 800207a:	bc70      	pop	{r4, r5, r6}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	3fff0000 	.word	0x3fff0000

08002084 <HAL_DMA2D_PollForTransfer>:
{
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	b082      	sub	sp, #8
  __IO uint32_t isrflags = 0x0;  
 8002088:	2200      	movs	r2, #0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 800208a:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t isrflags = 0x0;  
 800208c:	9201      	str	r2, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	07d6      	lsls	r6, r2, #31
{
 8002092:	4605      	mov	r5, r0
 8002094:	460c      	mov	r4, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002096:	d420      	bmi.n	80020da <HAL_DMA2D_PollForTransfer+0x56>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	0691      	lsls	r1, r2, #26
 800209c:	d402      	bmi.n	80020a4 <HAL_DMA2D_PollForTransfer+0x20>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 800209e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 80020a0:	0692      	lsls	r2, r2, #26
 80020a2:	d50f      	bpl.n	80020c4 <HAL_DMA2D_PollForTransfer+0x40>
    tickstart = HAL_GetTick();
 80020a4:	f7fe ffbc 	bl	8001020 <HAL_GetTick>
 80020a8:	4606      	mov	r6, r0
 80020aa:	682b      	ldr	r3, [r5, #0]
 80020ac:	e007      	b.n	80020be <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 80020b2:	9a01      	ldr	r2, [sp, #4]
 80020b4:	f012 0f29 	tst.w	r2, #41	; 0x29
 80020b8:	d12f      	bne.n	800211a <HAL_DMA2D_PollForTransfer+0x96>
      if(Timeout != HAL_MAX_DELAY)
 80020ba:	1c61      	adds	r1, r4, #1
 80020bc:	d14d      	bne.n	800215a <HAL_DMA2D_PollForTransfer+0xd6>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	06d2      	lsls	r2, r2, #27
 80020c2:	d5f4      	bpl.n	80020ae <HAL_DMA2D_PollForTransfer+0x2a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80020c4:	2012      	movs	r0, #18
  __HAL_UNLOCK(hdma2d);
 80020c6:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020c8:	2101      	movs	r1, #1
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80020ca:	6098      	str	r0, [r3, #8]
  return HAL_OK;
 80020cc:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020ce:	f885 1059 	strb.w	r1, [r5, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);
 80020d2:	f885 2058 	strb.w	r2, [r5, #88]	; 0x58
}
 80020d6:	b002      	add	sp, #8
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 80020da:	f7fe ffa1 	bl	8001020 <HAL_GetTick>
 80020de:	4606      	mov	r6, r0
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	e001      	b.n	80020e8 <HAL_DMA2D_PollForTransfer+0x64>
      if(Timeout != HAL_MAX_DELAY)
 80020e4:	1c62      	adds	r2, r4, #1
 80020e6:	d14a      	bne.n	800217e <HAL_DMA2D_PollForTransfer+0xfa>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	0790      	lsls	r0, r2, #30
 80020ec:	d4d4      	bmi.n	8002098 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 80020f2:	9a01      	ldr	r2, [sp, #4]
 80020f4:	f012 0f21 	tst.w	r2, #33	; 0x21
 80020f8:	d0f4      	beq.n	80020e4 <HAL_DMA2D_PollForTransfer+0x60>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80020fa:	9a01      	ldr	r2, [sp, #4]
 80020fc:	0690      	lsls	r0, r2, #26
 80020fe:	d503      	bpl.n	8002108 <HAL_DMA2D_PollForTransfer+0x84>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002100:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002102:	f042 0202 	orr.w	r2, r2, #2
 8002106:	65ea      	str	r2, [r5, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002108:	9a01      	ldr	r2, [sp, #4]
 800210a:	07d1      	lsls	r1, r2, #31
 800210c:	d503      	bpl.n	8002116 <HAL_DMA2D_PollForTransfer+0x92>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800210e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	65ea      	str	r2, [r5, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002116:	2021      	movs	r0, #33	; 0x21
 8002118:	e015      	b.n	8002146 <HAL_DMA2D_PollForTransfer+0xc2>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 800211a:	9a01      	ldr	r2, [sp, #4]
 800211c:	0716      	lsls	r6, r2, #28
 800211e:	d503      	bpl.n	8002128 <HAL_DMA2D_PollForTransfer+0xa4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002120:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002122:	f042 0204 	orr.w	r2, r2, #4
 8002126:	65ea      	str	r2, [r5, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002128:	9a01      	ldr	r2, [sp, #4]
 800212a:	0694      	lsls	r4, r2, #26
 800212c:	d503      	bpl.n	8002136 <HAL_DMA2D_PollForTransfer+0xb2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 800212e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002130:	f042 0202 	orr.w	r2, r2, #2
 8002134:	65ea      	str	r2, [r5, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002136:	9a01      	ldr	r2, [sp, #4]
 8002138:	07d0      	lsls	r0, r2, #31
 800213a:	d503      	bpl.n	8002144 <HAL_DMA2D_PollForTransfer+0xc0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800213c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	65ea      	str	r2, [r5, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002144:	2029      	movs	r0, #41	; 0x29
 8002146:	6098      	str	r0, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002148:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800214a:	2200      	movs	r2, #0
        return HAL_ERROR;      
 800214c:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800214e:	f885 1059 	strb.w	r1, [r5, #89]	; 0x59
        __HAL_UNLOCK(hdma2d);
 8002152:	f885 2058 	strb.w	r2, [r5, #88]	; 0x58
}
 8002156:	b002      	add	sp, #8
 8002158:	bd70      	pop	{r4, r5, r6, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800215a:	b124      	cbz	r4, 8002166 <HAL_DMA2D_PollForTransfer+0xe2>
 800215c:	f7fe ff60 	bl	8001020 <HAL_GetTick>
 8002160:	1b80      	subs	r0, r0, r6
 8002162:	4284      	cmp	r4, r0
 8002164:	d2a1      	bcs.n	80020aa <HAL_DMA2D_PollForTransfer+0x26>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002166:	6deb      	ldr	r3, [r5, #92]	; 0x5c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002168:	2203      	movs	r2, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800216a:	f043 0320 	orr.w	r3, r3, #32
          __HAL_UNLOCK(hdma2d);
 800216e:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002170:	65eb      	str	r3, [r5, #92]	; 0x5c
          return HAL_TIMEOUT;
 8002172:	4610      	mov	r0, r2
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002174:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
          __HAL_UNLOCK(hdma2d);
 8002178:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
          return HAL_TIMEOUT;
 800217c:	e7ab      	b.n	80020d6 <HAL_DMA2D_PollForTransfer+0x52>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800217e:	2c00      	cmp	r4, #0
 8002180:	d0f1      	beq.n	8002166 <HAL_DMA2D_PollForTransfer+0xe2>
 8002182:	f7fe ff4d 	bl	8001020 <HAL_GetTick>
 8002186:	1b80      	subs	r0, r0, r6
 8002188:	4284      	cmp	r4, r0
 800218a:	d2a9      	bcs.n	80020e0 <HAL_DMA2D_PollForTransfer+0x5c>
 800218c:	e7eb      	b.n	8002166 <HAL_DMA2D_PollForTransfer+0xe2>
 800218e:	bf00      	nop

08002190 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002190:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8002194:	2b01      	cmp	r3, #1
 8002196:	f000 8090 	beq.w	80022ba <HAL_DMA2D_ConfigLayer+0x12a>
 800219a:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 800219c:	2302      	movs	r3, #2
{   
 800219e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdma2d);
 80021a2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 80021a6:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  if(LayerIdx == 0)
 80021aa:	2900      	cmp	r1, #0
 80021ac:	d049      	beq.n	8002242 <HAL_DMA2D_ConfigLayer+0xb2>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80021ae:	004d      	lsls	r5, r1, #1
 80021b0:	186c      	adds	r4, r5, r1
 80021b2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80021b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021b8:	f1a3 0709 	sub.w	r7, r3, #9
 80021bc:	2f01      	cmp	r7, #1
 80021be:	f240 8094 	bls.w	80022ea <HAL_DMA2D_ConfigLayer+0x15a>
 80021c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021c6:	fa92 f2a2 	rbit	r2, r2
 80021ca:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 80021ce:	fab2 f682 	clz	r6, r2
 80021d2:	fa9e feae 	rbit	lr, lr
 80021d6:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
 80021da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80021dc:	fabe f48e 	clz	r4, lr
 80021e0:	fa0c f404 	lsl.w	r4, ip, r4
 80021e4:	40b2      	lsls	r2, r6
 80021e6:	4322      	orrs	r2, r4
 80021e8:	431a      	orrs	r2, r3
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 80021ea:	6806      	ldr	r6, [r0, #0]
 80021ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80021fc:	fab3 fc83 	clz	ip, r3
 8002200:	fa94 f4a4 	rbit	r4, r4
 8002204:	4429      	add	r1, r5
 8002206:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800220a:	4d40      	ldr	r5, [pc, #256]	; (800230c <HAL_DMA2D_ConfigLayer+0x17c>)
 800220c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800220e:	ea08 0505 	and.w	r5, r8, r5
 8002212:	432a      	orrs	r2, r5
 8002214:	fa03 f30c 	lsl.w	r3, r3, ip
 8002218:	4313      	orrs	r3, r2
 800221a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800221c:	fab4 f484 	clz	r4, r4
 8002220:	fa02 f404 	lsl.w	r4, r2, r4
 8002224:	4323      	orrs	r3, r4
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 8002226:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 8002228:	61f3      	str	r3, [r6, #28]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800222a:	2f01      	cmp	r7, #1
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 800222c:	6132      	str	r2, [r6, #16]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800222e:	d957      	bls.n	80022e0 <HAL_DMA2D_ConfigLayer+0x150>
  __HAL_UNLOCK(hdma2d);  
 8002230:	2300      	movs	r3, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002232:	2201      	movs	r2, #1
 8002234:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);  
 8002238:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  return HAL_OK;
 800223c:	4618      	mov	r0, r3
 800223e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002242:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002244:	f1a3 0709 	sub.w	r7, r3, #9
 8002248:	4297      	cmp	r7, r2
 800224a:	d938      	bls.n	80022be <HAL_DMA2D_ConfigLayer+0x12e>
 800224c:	f44f 3440 	mov.w	r4, #196608	; 0x30000
 8002250:	fa94 f4a4 	rbit	r4, r4
 8002254:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA));
 8002258:	fab4 f284 	clz	r2, r4
 800225c:	fa91 f1a1 	rbit	r1, r1
 8002260:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002262:	f8d0 e034 	ldr.w	lr, [r0, #52]	; 0x34
 8002266:	fab1 f181 	clz	r1, r1
 800226a:	4094      	lsls	r4, r2
 800226c:	fa0e f101 	lsl.w	r1, lr, r1
 8002270:	4321      	orrs	r1, r4
 8002272:	ea41 0203 	orr.w	r2, r1, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 8002276:	6806      	ldr	r6, [r0, #0]
 8002278:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800227c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002286:	fab3 fc83 	clz	ip, r3
 800228a:	fa91 f1a1 	rbit	r1, r1
 800228e:	4d1f      	ldr	r5, [pc, #124]	; (800230c <HAL_DMA2D_ConfigLayer+0x17c>)
 8002290:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002292:	4025      	ands	r5, r4
 8002294:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002296:	432a      	orrs	r2, r5
 8002298:	fab1 f181 	clz	r1, r1
 800229c:	fa03 f30c 	lsl.w	r3, r3, ip
 80022a0:	4313      	orrs	r3, r2
 80022a2:	fa04 f101 	lsl.w	r1, r4, r1
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 80022a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 80022a8:	430b      	orrs	r3, r1
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022aa:	2f01      	cmp	r7, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 80022ac:	6273      	str	r3, [r6, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 80022ae:	61b2      	str	r2, [r6, #24]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022b0:	d8be      	bhi.n	8002230 <HAL_DMA2D_ConfigLayer+0xa0>
      WRITE_REG(hdma2d->Instance->BGCOLR, LayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80022b2:	f02e 437f 	bic.w	r3, lr, #4278190080	; 0xff000000
 80022b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80022b8:	e7ba      	b.n	8002230 <HAL_DMA2D_ConfigLayer+0xa0>
  __HAL_LOCK(hdma2d);
 80022ba:	2002      	movs	r0, #2
 80022bc:	4770      	bx	lr
 80022be:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80022c2:	fa91 f1a1 	rbit	r1, r1
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA));
 80022c6:	f8d0 e034 	ldr.w	lr, [r0, #52]	; 0x34
 80022ca:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80022cc:	fab1 f181 	clz	r1, r1
 80022d0:	f00e 447f 	and.w	r4, lr, #4278190080	; 0xff000000
 80022d4:	fa02 f101 	lsl.w	r1, r2, r1
 80022d8:	ea44 0203 	orr.w	r2, r4, r3
 80022dc:	430a      	orrs	r2, r1
 80022de:	e7ca      	b.n	8002276 <HAL_DMA2D_ConfigLayer+0xe6>
      WRITE_REG(hdma2d->Instance->FGCOLR, LayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 80022e0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80022e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022e6:	6233      	str	r3, [r6, #32]
 80022e8:	e7a2      	b.n	8002230 <HAL_DMA2D_ConfigLayer+0xa0>
 80022ea:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 80022ee:	fa96 f6a6 	rbit	r6, r6
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_FGPFCCR_ALPHA));
 80022f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80022f4:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 80022f8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80022fc:	fab6 f486 	clz	r4, r6
 8002300:	fa0e f404 	lsl.w	r4, lr, r4
 8002304:	431a      	orrs	r2, r3
 8002306:	4322      	orrs	r2, r4
 8002308:	e76f      	b.n	80021ea <HAL_DMA2D_ConfigLayer+0x5a>
 800230a:	bf00      	nop
 800230c:	00ccfff0 	.word	0x00ccfff0

08002310 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002310:	4a07      	ldr	r2, [pc, #28]	; (8002330 <FLASH_Program_Fast+0x20>)
 8002312:	6953      	ldr	r3, [r2, #20]
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800231a:	b672      	cpsid	i
 800231c:	f501 7300 	add.w	r3, r1, #512	; 0x200
 8002320:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002322:	680a      	ldr	r2, [r1, #0]
 8002324:	500a      	str	r2, [r1, r0]
    dest_addr++;
    src_addr++;
 8002326:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 8002328:	4299      	cmp	r1, r3
 800232a:	d1fa      	bne.n	8002322 <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 800232c:	b662      	cpsie	i
 800232e:	4770      	bx	lr
 8002330:	40022000 	.word	0x40022000

08002334 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_FLASH_Unlock+0x1c>)
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800233a:	bfbf      	itttt	lt
 800233c:	4a05      	ldrlt	r2, [pc, #20]	; (8002354 <HAL_FLASH_Unlock+0x20>)
 800233e:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002340:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8002344:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002346:	bfba      	itte	lt
 8002348:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	0fc0      	lsrlt	r0, r0, #31
 800234c:	2000      	movge	r0, #0
}
 800234e:	4770      	bx	lr
 8002350:	40022000 	.word	0x40022000
 8002354:	45670123 	.word	0x45670123

08002358 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002358:	4a03      	ldr	r2, [pc, #12]	; (8002368 <HAL_FLASH_Lock+0x10>)
 800235a:	6953      	ldr	r3, [r2, #20]
 800235c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002360:	6153      	str	r3, [r2, #20]
}
 8002362:	2000      	movs	r0, #0
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40022000 	.word	0x40022000

0800236c <FLASH_WaitForLastOperation>:
{
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7fe fe56 	bl	8001020 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002374:	4c1a      	ldr	r4, [pc, #104]	; (80023e0 <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 8002376:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002378:	6923      	ldr	r3, [r4, #16]
 800237a:	03db      	lsls	r3, r3, #15
 800237c:	d41e      	bmi.n	80023bc <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800237e:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8002380:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002382:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002386:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800238a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800238e:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8002392:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 8002396:	4318      	orrs	r0, r3
 8002398:	d019      	beq.n	80023ce <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <FLASH_WaitForLastOperation+0x78>)
 800239c:	6853      	ldr	r3, [r2, #4]
 800239e:	4303      	orrs	r3, r0
 80023a0:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 80023a2:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 80023a6:	bf1e      	ittt	ne
 80023a8:	69a2      	ldrne	r2, [r4, #24]
 80023aa:	4313      	orrne	r3, r2
 80023ac:	61a3      	strne	r3, [r4, #24]
 80023ae:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 80023b2:	d001      	beq.n	80023b8 <FLASH_WaitForLastOperation+0x4c>
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <FLASH_WaitForLastOperation+0x74>)
 80023b6:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 80023b8:	2001      	movs	r0, #1
 80023ba:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80023bc:	1c6a      	adds	r2, r5, #1
 80023be:	d0db      	beq.n	8002378 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 80023c0:	f7fe fe2e 	bl	8001020 <HAL_GetTick>
 80023c4:	1b80      	subs	r0, r0, r6
 80023c6:	4285      	cmp	r5, r0
 80023c8:	d8d6      	bhi.n	8002378 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80023ca:	2003      	movs	r0, #3
 80023cc:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80023ce:	6923      	ldr	r3, [r4, #16]
 80023d0:	f013 0301 	ands.w	r3, r3, #1
 80023d4:	d002      	beq.n	80023dc <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023d6:	2301      	movs	r3, #1
 80023d8:	6123      	str	r3, [r4, #16]
 80023da:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80023dc:	4618      	mov	r0, r3
}
 80023de:	bd70      	pop	{r4, r5, r6, pc}
 80023e0:	40022000 	.word	0x40022000
 80023e4:	20000000 	.word	0x20000000

080023e8 <HAL_FLASH_Program>:
{
 80023e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80023ec:	4c24      	ldr	r4, [pc, #144]	; (8002480 <HAL_FLASH_Program+0x98>)
{
 80023ee:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 80023f0:	7823      	ldrb	r3, [r4, #0]
 80023f2:	2b01      	cmp	r3, #1
{
 80023f4:	4607      	mov	r7, r0
 80023f6:	4688      	mov	r8, r1
 80023f8:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80023fa:	d03f      	beq.n	800247c <HAL_FLASH_Program+0x94>
 80023fc:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023fe:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002402:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002404:	f7ff ffb2 	bl	800236c <FLASH_WaitForLastOperation>
 8002408:	4606      	mov	r6, r0
  if(status == HAL_OK)
 800240a:	bb20      	cbnz	r0, 8002456 <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800240c:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800240e:	481d      	ldr	r0, [pc, #116]	; (8002484 <HAL_FLASH_Program+0x9c>)
 8002410:	6805      	ldr	r5, [r0, #0]
 8002412:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002416:	bf17      	itett	ne
 8002418:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800241a:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800241c:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8002420:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002422:	bf1c      	itt	ne
 8002424:	2302      	movne	r3, #2
 8002426:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002428:	b9d7      	cbnz	r7, 8002460 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800242a:	6945      	ldr	r5, [r0, #20]
 800242c:	f045 0501 	orr.w	r5, r5, #1
 8002430:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002432:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 8002436:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002438:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800243c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002440:	f7ff ff94 	bl	800236c <FLASH_WaitForLastOperation>
 8002444:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 8002446:	b125      	cbz	r5, 8002452 <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_FLASH_Program+0x9c>)
 800244a:	6953      	ldr	r3, [r2, #20]
 800244c:	ea23 0505 	bic.w	r5, r3, r5
 8002450:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 8002452:	f000 f85d 	bl	8002510 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002456:	2300      	movs	r3, #0
 8002458:	7023      	strb	r3, [r4, #0]
}
 800245a:	4630      	mov	r0, r6
 800245c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002460:	1e7b      	subs	r3, r7, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d901      	bls.n	800246a <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 8002466:	2500      	movs	r5, #0
 8002468:	e7e8      	b.n	800243c <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800246a:	4649      	mov	r1, r9
 800246c:	4640      	mov	r0, r8
 800246e:	f7ff ff4f 	bl	8002310 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002472:	2f02      	cmp	r7, #2
 8002474:	d1f7      	bne.n	8002466 <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 8002476:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800247a:	e7df      	b.n	800243c <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 800247c:	2602      	movs	r6, #2
 800247e:	e7ec      	b.n	800245a <HAL_FLASH_Program+0x72>
 8002480:	20000000 	.word	0x20000000
 8002484:	40022000 	.word	0x40022000

08002488 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <FLASH_MassErase+0x40>)
 800248a:	6a13      	ldr	r3, [r2, #32]
 800248c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002490:	4613      	mov	r3, r2
 8002492:	d011      	beq.n	80024b8 <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002494:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002496:	bf42      	ittt	mi
 8002498:	6952      	ldrmi	r2, [r2, #20]
 800249a:	f042 0204 	orrmi.w	r2, r2, #4
 800249e:	615a      	strmi	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80024a0:	0782      	lsls	r2, r0, #30
 80024a2:	d503      	bpl.n	80024ac <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024aa:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <FLASH_MassErase+0x40>)
 80024ae:	6953      	ldr	r3, [r2, #20]
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6153      	str	r3, [r2, #20]
 80024b6:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80024b8:	6953      	ldr	r3, [r2, #20]
 80024ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6153      	str	r3, [r2, #20]
 80024c4:	e7f2      	b.n	80024ac <FLASH_MassErase+0x24>
 80024c6:	bf00      	nop
 80024c8:	40022000 	.word	0x40022000

080024cc <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <FLASH_PageErase+0x40>)
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80024d4:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80024d6:	d113      	bne.n	8002500 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80024d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80024dc:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	00c0      	lsls	r0, r0, #3
 80024e2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80024e6:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80024ea:	4310      	orrs	r0, r2
 80024ec:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	f042 0202 	orr.w	r2, r2, #2
 80024f4:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024fc:	615a      	str	r2, [r3, #20]
 80024fe:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 8002500:	07c9      	lsls	r1, r1, #31
 8002502:	d4e9      	bmi.n	80024d8 <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002508:	e7e8      	b.n	80024dc <FLASH_PageErase+0x10>
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000

08002510 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002510:	4913      	ldr	r1, [pc, #76]	; (8002560 <FLASH_FlushCaches+0x50>)
 8002512:	7f0b      	ldrb	r3, [r1, #28]
 8002514:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 8002516:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800251a:	2a01      	cmp	r2, #1
 800251c:	d10c      	bne.n	8002538 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800251e:	4a11      	ldr	r2, [pc, #68]	; (8002564 <FLASH_FlushCaches+0x54>)
 8002520:	6810      	ldr	r0, [r2, #0]
 8002522:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8002526:	6010      	str	r0, [r2, #0]
 8002528:	6810      	ldr	r0, [r2, #0]
 800252a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 800252e:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002530:	6810      	ldr	r0, [r2, #0]
 8002532:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8002536:	6010      	str	r0, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 8002538:	3b02      	subs	r3, #2
 800253a:	2b01      	cmp	r3, #1
 800253c:	d80c      	bhi.n	8002558 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <FLASH_FlushCaches+0x54>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800254e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002556:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002558:	2300      	movs	r3, #0
 800255a:	770b      	strb	r3, [r1, #28]
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000
 8002564:	40022000 	.word	0x40022000

08002568 <HAL_FLASHEx_Erase>:
{
 8002568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 800256c:	4c35      	ldr	r4, [pc, #212]	; (8002644 <HAL_FLASHEx_Erase+0xdc>)
 800256e:	7823      	ldrb	r3, [r4, #0]
 8002570:	2b01      	cmp	r3, #1
{
 8002572:	4606      	mov	r6, r0
 8002574:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002576:	d062      	beq.n	800263e <HAL_FLASHEx_Erase+0xd6>
 8002578:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800257a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800257e:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002580:	f7ff fef4 	bl	800236c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8002584:	4605      	mov	r5, r0
 8002586:	bb40      	cbnz	r0, 80025da <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002588:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800258a:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002592:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002594:	d026      	beq.n	80025e4 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002596:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	0551      	lsls	r1, r2, #21
 80025a0:	d506      	bpl.n	80025b0 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a8:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80025aa:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80025ac:	7723      	strb	r3, [r4, #28]
 80025ae:	e000      	b.n	80025b2 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80025b0:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80025b2:	6833      	ldr	r3, [r6, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d11f      	bne.n	80025f8 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 80025b8:	6870      	ldr	r0, [r6, #4]
 80025ba:	f7ff ff65 	bl	8002488 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025c2:	f7ff fed3 	bl	800236c <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80025c6:	4a20      	ldr	r2, [pc, #128]	; (8002648 <HAL_FLASHEx_Erase+0xe0>)
 80025c8:	6953      	ldr	r3, [r2, #20]
 80025ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025ce:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025d2:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80025d4:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 80025d6:	f7ff ff9b 	bl	8002510 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80025da:	2300      	movs	r3, #0
 80025dc:	7023      	strb	r3, [r4, #0]
}
 80025de:	4628      	mov	r0, r5
 80025e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80025e4:	0552      	lsls	r2, r2, #21
 80025e6:	d505      	bpl.n	80025f4 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ee:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80025f0:	2302      	movs	r3, #2
 80025f2:	e7db      	b.n	80025ac <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80025f4:	7720      	strb	r0, [r4, #28]
 80025f6:	e7dc      	b.n	80025b2 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002600:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002602:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002648 <HAL_FLASHEx_Erase+0xe0>
 8002606:	f8df a044 	ldr.w	sl, [pc, #68]	; 800264c <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800260a:	68b3      	ldr	r3, [r6, #8]
 800260c:	68f2      	ldr	r2, [r6, #12]
 800260e:	4413      	add	r3, r2
 8002610:	429f      	cmp	r7, r3
 8002612:	d2e0      	bcs.n	80025d6 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002614:	6871      	ldr	r1, [r6, #4]
 8002616:	4638      	mov	r0, r7
 8002618:	f7ff ff58 	bl	80024cc <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800261c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002620:	f7ff fea4 	bl	800236c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002624:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8002628:	ea03 030a 	and.w	r3, r3, sl
 800262c:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8002630:	b118      	cbz	r0, 800263a <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8002632:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002636:	4605      	mov	r5, r0
          break;
 8002638:	e7cd      	b.n	80025d6 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800263a:	3701      	adds	r7, #1
 800263c:	e7e5      	b.n	800260a <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 800263e:	2502      	movs	r5, #2
 8002640:	e7cd      	b.n	80025de <HAL_FLASHEx_Erase+0x76>
 8002642:	bf00      	nop
 8002644:	20000000 	.word	0x20000000
 8002648:	40022000 	.word	0x40022000
 800264c:	fffff805 	.word	0xfffff805

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002654:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002658:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80027fc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800265c:	4a65      	ldr	r2, [pc, #404]	; (80027f4 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 800265e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002660:	fa38 f403 	lsrs.w	r4, r8, r3
 8002664:	d102      	bne.n	800266c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8002666:	b003      	add	sp, #12
 8002668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800266c:	f04f 0e01 	mov.w	lr, #1
 8002670:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8002674:	ea18 060e 	ands.w	r6, r8, lr
 8002678:	f000 80ab 	beq.w	80027d2 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800267c:	684c      	ldr	r4, [r1, #4]
 800267e:	f024 0710 	bic.w	r7, r4, #16
 8002682:	2f02      	cmp	r7, #2
 8002684:	d116      	bne.n	80026b4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8002686:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800268a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800268e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002692:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002696:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800269a:	f04f 0c0f 	mov.w	ip, #15
 800269e:	fa0c fc0b 	lsl.w	ip, ip, fp
 80026a2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026a6:	690d      	ldr	r5, [r1, #16]
 80026a8:	fa05 f50b 	lsl.w	r5, r5, fp
 80026ac:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80026b0:	f8ca 5020 	str.w	r5, [sl, #32]
 80026b4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026b8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80026ba:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026be:	fa05 f50a 	lsl.w	r5, r5, sl
 80026c2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026c4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026c8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026cc:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026d2:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80026d8:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026dc:	d811      	bhi.n	8002702 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80026de:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026e0:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e4:	68cf      	ldr	r7, [r1, #12]
 80026e6:	fa07 fc0a 	lsl.w	ip, r7, sl
 80026ea:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80026ee:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80026f0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026f2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026f6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80026fa:	409f      	lsls	r7, r3
 80026fc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002700:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002702:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002704:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002706:	688f      	ldr	r7, [r1, #8]
 8002708:	fa07 f70a 	lsl.w	r7, r7, sl
 800270c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800270e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002710:	00e5      	lsls	r5, r4, #3
 8002712:	d55e      	bpl.n	80027d2 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002714:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002718:	f045 0501 	orr.w	r5, r5, #1
 800271c:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8002720:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002724:	f023 0703 	bic.w	r7, r3, #3
 8002728:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800272c:	f005 0501 	and.w	r5, r5, #1
 8002730:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002734:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002736:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800273c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002740:	f04f 0c0f 	mov.w	ip, #15
 8002744:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002748:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800274c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002750:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002754:	d03f      	beq.n	80027d6 <HAL_GPIO_Init+0x186>
 8002756:	4d28      	ldr	r5, [pc, #160]	; (80027f8 <HAL_GPIO_Init+0x1a8>)
 8002758:	42a8      	cmp	r0, r5
 800275a:	d03e      	beq.n	80027da <HAL_GPIO_Init+0x18a>
 800275c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002760:	42a8      	cmp	r0, r5
 8002762:	d03c      	beq.n	80027de <HAL_GPIO_Init+0x18e>
 8002764:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002768:	42a8      	cmp	r0, r5
 800276a:	d03a      	beq.n	80027e2 <HAL_GPIO_Init+0x192>
 800276c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002770:	42a8      	cmp	r0, r5
 8002772:	d038      	beq.n	80027e6 <HAL_GPIO_Init+0x196>
 8002774:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002778:	42a8      	cmp	r0, r5
 800277a:	d036      	beq.n	80027ea <HAL_GPIO_Init+0x19a>
 800277c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002780:	42a8      	cmp	r0, r5
 8002782:	d034      	beq.n	80027ee <HAL_GPIO_Init+0x19e>
 8002784:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002788:	42a8      	cmp	r0, r5
 800278a:	bf14      	ite	ne
 800278c:	2508      	movne	r5, #8
 800278e:	2507      	moveq	r5, #7
 8002790:	fa05 f50e 	lsl.w	r5, r5, lr
 8002794:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002798:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 800279a:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 800279c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800279e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80027a2:	bf0c      	ite	eq
 80027a4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80027a6:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 80027a8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 80027aa:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ac:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80027b0:	bf0c      	ite	eq
 80027b2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80027b4:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 80027b6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 80027b8:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ba:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80027be:	bf0c      	ite	eq
 80027c0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80027c2:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 80027c4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 80027c6:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c8:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80027ca:	bf54      	ite	pl
 80027cc:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80027ce:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 80027d0:	60d5      	str	r5, [r2, #12]
    position++;
 80027d2:	3301      	adds	r3, #1
 80027d4:	e744      	b.n	8002660 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027d6:	2500      	movs	r5, #0
 80027d8:	e7da      	b.n	8002790 <HAL_GPIO_Init+0x140>
 80027da:	2501      	movs	r5, #1
 80027dc:	e7d8      	b.n	8002790 <HAL_GPIO_Init+0x140>
 80027de:	2502      	movs	r5, #2
 80027e0:	e7d6      	b.n	8002790 <HAL_GPIO_Init+0x140>
 80027e2:	2503      	movs	r5, #3
 80027e4:	e7d4      	b.n	8002790 <HAL_GPIO_Init+0x140>
 80027e6:	2504      	movs	r5, #4
 80027e8:	e7d2      	b.n	8002790 <HAL_GPIO_Init+0x140>
 80027ea:	2505      	movs	r5, #5
 80027ec:	e7d0      	b.n	8002790 <HAL_GPIO_Init+0x140>
 80027ee:	2506      	movs	r5, #6
 80027f0:	e7ce      	b.n	8002790 <HAL_GPIO_Init+0x140>
 80027f2:	bf00      	nop
 80027f4:	40010400 	.word	0x40010400
 80027f8:	48000400 	.word	0x48000400
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002804:	4d46      	ldr	r5, [pc, #280]	; (8002920 <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002806:	f8df a120 	ldr.w	sl, [pc, #288]	; 8002928 <HAL_GPIO_DeInit+0x128>
 800280a:	f8df b120 	ldr.w	fp, [pc, #288]	; 800292c <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 800280e:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002810:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002814:	fa31 f302 	lsrs.w	r3, r1, r2
 8002818:	d101      	bne.n	800281e <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 800281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800281e:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 8002822:	ea11 0608 	ands.w	r6, r1, r8
 8002826:	d06b      	beq.n	8002900 <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002828:	6807      	ldr	r7, [r0, #0]
 800282a:	2303      	movs	r3, #3
 800282c:	0054      	lsls	r4, r2, #1
 800282e:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002832:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002836:	4327      	orrs	r7, r4
 8002838:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800283c:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800283e:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8002842:	f002 0e07 	and.w	lr, r2, #7
 8002846:	463b      	mov	r3, r7
 8002848:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800284c:	270f      	movs	r7, #15
 800284e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8002852:	ea23 0e0e 	bic.w	lr, r3, lr
 8002856:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800285a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800285e:	43e4      	mvns	r4, r4
 8002860:	ea0e 0e04 	and.w	lr, lr, r4
 8002864:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002868:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800286c:	ea2e 0808 	bic.w	r8, lr, r8
 8002870:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002874:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8002878:	ea04 040e 	and.w	r4, r4, lr
 800287c:	60c4      	str	r4, [r0, #12]
 800287e:	f022 0403 	bic.w	r4, r2, #3
 8002882:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002886:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800288a:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 800288e:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002892:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002896:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800289a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800289e:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80028a2:	d02f      	beq.n	8002904 <HAL_GPIO_DeInit+0x104>
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_GPIO_DeInit+0x124>)
 80028a6:	4298      	cmp	r0, r3
 80028a8:	d02e      	beq.n	8002908 <HAL_GPIO_DeInit+0x108>
 80028aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ae:	4298      	cmp	r0, r3
 80028b0:	d02c      	beq.n	800290c <HAL_GPIO_DeInit+0x10c>
 80028b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b6:	4298      	cmp	r0, r3
 80028b8:	d02a      	beq.n	8002910 <HAL_GPIO_DeInit+0x110>
 80028ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028be:	4298      	cmp	r0, r3
 80028c0:	d028      	beq.n	8002914 <HAL_GPIO_DeInit+0x114>
 80028c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028c6:	4298      	cmp	r0, r3
 80028c8:	d026      	beq.n	8002918 <HAL_GPIO_DeInit+0x118>
 80028ca:	4550      	cmp	r0, sl
 80028cc:	d026      	beq.n	800291c <HAL_GPIO_DeInit+0x11c>
 80028ce:	4558      	cmp	r0, fp
 80028d0:	bf0c      	ite	eq
 80028d2:	2307      	moveq	r3, #7
 80028d4:	2308      	movne	r3, #8
 80028d6:	fa03 f30e 	lsl.w	r3, r3, lr
 80028da:	459c      	cmp	ip, r3
 80028dc:	d110      	bne.n	8002900 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80028de:	68a3      	ldr	r3, [r4, #8]
 80028e0:	ea23 0707 	bic.w	r7, r3, r7
 80028e4:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 80028e6:	682b      	ldr	r3, [r5, #0]
 80028e8:	43f6      	mvns	r6, r6
 80028ea:	4033      	ands	r3, r6
 80028ec:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80028ee:	686b      	ldr	r3, [r5, #4]
 80028f0:	4033      	ands	r3, r6
 80028f2:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80028f4:	68ab      	ldr	r3, [r5, #8]
 80028f6:	4033      	ands	r3, r6
 80028f8:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80028fa:	68eb      	ldr	r3, [r5, #12]
 80028fc:	401e      	ands	r6, r3
 80028fe:	60ee      	str	r6, [r5, #12]
    position++;
 8002900:	3201      	adds	r2, #1
 8002902:	e787      	b.n	8002814 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002904:	2300      	movs	r3, #0
 8002906:	e7e6      	b.n	80028d6 <HAL_GPIO_DeInit+0xd6>
 8002908:	2301      	movs	r3, #1
 800290a:	e7e4      	b.n	80028d6 <HAL_GPIO_DeInit+0xd6>
 800290c:	2302      	movs	r3, #2
 800290e:	e7e2      	b.n	80028d6 <HAL_GPIO_DeInit+0xd6>
 8002910:	2303      	movs	r3, #3
 8002912:	e7e0      	b.n	80028d6 <HAL_GPIO_DeInit+0xd6>
 8002914:	2304      	movs	r3, #4
 8002916:	e7de      	b.n	80028d6 <HAL_GPIO_DeInit+0xd6>
 8002918:	2305      	movs	r3, #5
 800291a:	e7dc      	b.n	80028d6 <HAL_GPIO_DeInit+0xd6>
 800291c:	2306      	movs	r3, #6
 800291e:	e7da      	b.n	80028d6 <HAL_GPIO_DeInit+0xd6>
 8002920:	40010400 	.word	0x40010400
 8002924:	48000400 	.word	0x48000400
 8002928:	48001800 	.word	0x48001800
 800292c:	48001c00 	.word	0x48001c00

08002930 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002930:	6903      	ldr	r3, [r0, #16]
 8002932:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002934:	bf14      	ite	ne
 8002936:	2001      	movne	r0, #1
 8002938:	2000      	moveq	r0, #0
 800293a:	4770      	bx	lr

0800293c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800293c:	b10a      	cbz	r2, 8002942 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800293e:	6181      	str	r1, [r0, #24]
 8002940:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002942:	6281      	str	r1, [r0, #40]	; 0x28
 8002944:	4770      	bx	lr

08002946 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002946:	6943      	ldr	r3, [r0, #20]
 8002948:	4059      	eors	r1, r3
 800294a:	6141      	str	r1, [r0, #20]
 800294c:	4770      	bx	lr

0800294e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002950:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002954:	6959      	ldr	r1, [r3, #20]
 8002956:	4201      	tst	r1, r0
 8002958:	d002      	beq.n	8002960 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800295a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800295c:	f7ff fff7 	bl	800294e <HAL_GPIO_EXTI_Callback>
 8002960:	bd08      	pop	{r3, pc}
 8002962:	bf00      	nop
 8002964:	40010400 	.word	0x40010400

08002968 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002968:	6803      	ldr	r3, [r0, #0]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800296e:	bf44      	itt	mi
 8002970:	2200      	movmi	r2, #0
 8002972:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002978:	bf5e      	ittt	pl
 800297a:	699a      	ldrpl	r2, [r3, #24]
 800297c:	f042 0201 	orrpl.w	r2, r2, #1
 8002980:	619a      	strpl	r2, [r3, #24]
 8002982:	4770      	bx	lr

08002984 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002984:	b530      	push	{r4, r5, lr}
 8002986:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002988:	6805      	ldr	r5, [r0, #0]
 800298a:	4323      	orrs	r3, r4
 800298c:	0d64      	lsrs	r4, r4, #21
 800298e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002992:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002996:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800299a:	6868      	ldr	r0, [r5, #4]
 800299c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80029a0:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80029a4:	4319      	orrs	r1, r3
 80029a6:	f044 0403 	orr.w	r4, r4, #3
 80029aa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80029ae:	ea20 0404 	bic.w	r4, r0, r4
 80029b2:	4321      	orrs	r1, r4
 80029b4:	6069      	str	r1, [r5, #4]
 80029b6:	bd30      	pop	{r4, r5, pc}

080029b8 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029b8:	f011 0301 	ands.w	r3, r1, #1
 80029bc:	d007      	beq.n	80029ce <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029c6:	2b28      	cmp	r3, #40	; 0x28
 80029c8:	bf0c      	ite	eq
 80029ca:	2342      	moveq	r3, #66	; 0x42
 80029cc:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029ce:	078a      	lsls	r2, r1, #30
 80029d0:	d509      	bpl.n	80029e6 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029d2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80029d6:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80029da:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80029dc:	bf0c      	ite	eq
 80029de:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029e2:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80029e6:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80029e8:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029ec:	bf48      	it	mi
 80029ee:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80029f2:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80029f6:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80029f8:	bf08      	it	eq
 80029fa:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80029fe:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a00:	6801      	ldr	r1, [r0, #0]
 8002a02:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 8002a04:	bf08      	it	eq
 8002a06:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a0a:	ea22 0303 	bic.w	r3, r2, r3
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	4770      	bx	lr

08002a12 <I2C_WaitOnFlagUntilTimeout>:
{
 8002a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a16:	9f06      	ldr	r7, [sp, #24]
 8002a18:	4604      	mov	r4, r0
 8002a1a:	4688      	mov	r8, r1
 8002a1c:	4616      	mov	r6, r2
 8002a1e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	6993      	ldr	r3, [r2, #24]
 8002a24:	ea38 0303 	bics.w	r3, r8, r3
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	42b3      	cmp	r3, r6
 8002a30:	d002      	beq.n	8002a38 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002a32:	2000      	movs	r0, #0
}
 8002a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002a38:	1c6b      	adds	r3, r5, #1
 8002a3a:	d0f2      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7fe faf0 	bl	8001020 <HAL_GetTick>
 8002a40:	1bc0      	subs	r0, r0, r7
 8002a42:	4285      	cmp	r5, r0
 8002a44:	d301      	bcc.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x38>
 8002a46:	2d00      	cmp	r5, #0
 8002a48:	d1ea      	bne.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a4c:	f043 0320 	orr.w	r3, r3, #32
 8002a50:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	2320      	movs	r3, #32
 8002a54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a62:	2001      	movs	r0, #1
 8002a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a68 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a68:	6803      	ldr	r3, [r0, #0]
{
 8002a6a:	b570      	push	{r4, r5, r6, lr}
 8002a6c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a6e:	6998      	ldr	r0, [r3, #24]
 8002a70:	f010 0010 	ands.w	r0, r0, #16
{
 8002a74:	460d      	mov	r5, r1
 8002a76:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a78:	d116      	bne.n	8002aa8 <I2C_IsAcknowledgeFailed+0x40>
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002a7c:	1c69      	adds	r1, r5, #1
 8002a7e:	d014      	beq.n	8002aaa <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a80:	f7fe face 	bl	8001020 <HAL_GetTick>
 8002a84:	1b80      	subs	r0, r0, r6
 8002a86:	4285      	cmp	r5, r0
 8002a88:	d300      	bcc.n	8002a8c <I2C_IsAcknowledgeFailed+0x24>
 8002a8a:	b96d      	cbnz	r5, 8002aa8 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a8e:	f043 0320 	orr.w	r3, r3, #32
 8002a92:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	2320      	movs	r3, #32
 8002a96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002aa0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002aa4:	2001      	movs	r0, #1
}
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	6999      	ldr	r1, [r3, #24]
 8002aac:	068a      	lsls	r2, r1, #26
 8002aae:	d5e5      	bpl.n	8002a7c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab0:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab2:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002ab6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002aba:	f7ff ff55 	bl	8002968 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	6853      	ldr	r3, [r2, #4]
 8002ac2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002ac6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002aca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ad4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8002ae0:	e7db      	b.n	8002a9a <I2C_IsAcknowledgeFailed+0x32>

08002ae2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002ae2:	b570      	push	{r4, r5, r6, lr}
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	460d      	mov	r5, r1
 8002ae8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	079b      	lsls	r3, r3, #30
 8002af0:	d501      	bpl.n	8002af6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002af2:	2000      	movs	r0, #0
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af6:	4632      	mov	r2, r6
 8002af8:	4629      	mov	r1, r5
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff ffb4 	bl	8002a68 <I2C_IsAcknowledgeFailed>
 8002b00:	b9a0      	cbnz	r0, 8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	1c6a      	adds	r2, r5, #1
 8002b04:	d0f1      	beq.n	8002aea <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe fa8b 	bl	8001020 <HAL_GetTick>
 8002b0a:	1b80      	subs	r0, r0, r6
 8002b0c:	4285      	cmp	r5, r0
 8002b0e:	d301      	bcc.n	8002b14 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002b10:	2d00      	cmp	r5, #0
 8002b12:	d1ea      	bne.n	8002aea <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b16:	f043 0320 	orr.w	r3, r3, #32
 8002b1a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002b28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002b2c:	2001      	movs	r0, #1
}
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}

08002b30 <I2C_RequestMemoryRead>:
{
 8002b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002b34:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <I2C_RequestMemoryRead+0x60>)
 8002b38:	9300      	str	r3, [sp, #0]
{
 8002b3a:	4605      	mov	r5, r0
 8002b3c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	b2fa      	uxtb	r2, r7
 8002b42:	f7ff ff1f 	bl	8002984 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b46:	4632      	mov	r2, r6
 8002b48:	9908      	ldr	r1, [sp, #32]
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f7ff ffc9 	bl	8002ae2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b50:	b110      	cbz	r0, 8002b58 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8002b52:	2001      	movs	r0, #1
}
 8002b54:	b003      	add	sp, #12
 8002b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b58:	2f01      	cmp	r7, #1
 8002b5a:	682b      	ldr	r3, [r5, #0]
 8002b5c:	d10c      	bne.n	8002b78 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5e:	b2e4      	uxtb	r4, r4
 8002b60:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b62:	9b08      	ldr	r3, [sp, #32]
 8002b64:	9600      	str	r6, [sp, #0]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2140      	movs	r1, #64	; 0x40
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f7ff ff51 	bl	8002a12 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002b70:	3000      	adds	r0, #0
 8002b72:	bf18      	it	ne
 8002b74:	2001      	movne	r0, #1
 8002b76:	e7ed      	b.n	8002b54 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b78:	0a22      	lsrs	r2, r4, #8
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7c:	9908      	ldr	r1, [sp, #32]
 8002b7e:	4632      	mov	r2, r6
 8002b80:	4628      	mov	r0, r5
 8002b82:	f7ff ffae 	bl	8002ae2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d1e3      	bne.n	8002b52 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b8a:	682b      	ldr	r3, [r5, #0]
 8002b8c:	e7e7      	b.n	8002b5e <I2C_RequestMemoryRead+0x2e>
 8002b8e:	bf00      	nop
 8002b90:	80002000 	.word	0x80002000

08002b94 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	4604      	mov	r4, r0
 8002b98:	460d      	mov	r5, r1
 8002b9a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	069b      	lsls	r3, r3, #26
 8002ba2:	d501      	bpl.n	8002ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba8:	4632      	mov	r2, r6
 8002baa:	4629      	mov	r1, r5
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7ff ff5b 	bl	8002a68 <I2C_IsAcknowledgeFailed>
 8002bb2:	b990      	cbnz	r0, 8002bda <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb4:	f7fe fa34 	bl	8001020 <HAL_GetTick>
 8002bb8:	1b80      	subs	r0, r0, r6
 8002bba:	4285      	cmp	r5, r0
 8002bbc:	d301      	bcc.n	8002bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	d1ec      	bne.n	8002b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002bc4:	f043 0320 	orr.w	r3, r3, #32
 8002bc8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	2320      	movs	r3, #32
 8002bcc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002bda:	2001      	movs	r0, #1
}
 8002bdc:	bd70      	pop	{r4, r5, r6, pc}

08002bde <HAL_I2C_Init>:
{
 8002bde:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002be0:	4604      	mov	r4, r0
 8002be2:	2800      	cmp	r0, #0
 8002be4:	d04a      	beq.n	8002c7c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bee:	b91b      	cbnz	r3, 8002bf8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002bf0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002bf4:	f01f f9ca 	bl	8021f8c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf8:	2324      	movs	r3, #36	; 0x24
 8002bfa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002bfe:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c00:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c0a:	6862      	ldr	r2, [r4, #4]
 8002c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c10:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c12:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c14:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1e:	d124      	bne.n	8002c6a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c24:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c26:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c28:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c2a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c32:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c3a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c3c:	6922      	ldr	r2, [r4, #16]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	69a1      	ldr	r1, [r4, #24]
 8002c42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c46:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c48:	6a21      	ldr	r1, [r4, #32]
 8002c4a:	69e2      	ldr	r2, [r4, #28]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c58:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c5c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c62:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002c68:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c6e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c70:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c72:	bf04      	itt	eq
 8002c74:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002c78:	605a      	streq	r2, [r3, #4]
 8002c7a:	e7d4      	b.n	8002c26 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002c7c:	2001      	movs	r0, #1
}
 8002c7e:	bd10      	pop	{r4, pc}

08002c80 <HAL_I2C_Mem_Read>:
{
 8002c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c84:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002c8a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8c:	2b20      	cmp	r3, #32
{
 8002c8e:	4604      	mov	r4, r0
 8002c90:	460f      	mov	r7, r1
 8002c92:	9203      	str	r2, [sp, #12]
 8002c94:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002c98:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9c:	f040 80a9 	bne.w	8002df2 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ca2:	b113      	cbz	r3, 8002caa <HAL_I2C_Mem_Read+0x2a>
 8002ca4:	f1ba 0f00 	cmp.w	sl, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cae:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002cb0:	2001      	movs	r0, #1
}
 8002cb2:	b005      	add	sp, #20
 8002cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002cb8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	f000 8098 	beq.w	8002df2 <HAL_I2C_Mem_Read+0x172>
 8002cc2:	2501      	movs	r5, #1
 8002cc4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002cc8:	f7fe f9aa 	bl	8001020 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ccc:	2319      	movs	r3, #25
 8002cce:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002cd0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cd2:	462a      	mov	r2, r5
 8002cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff fe9a 	bl	8002a12 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4681      	mov	r9, r0
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	d1e5      	bne.n	8002cb0 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ce4:	2322      	movs	r3, #34	; 0x22
 8002ce6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cea:	2340      	movs	r3, #64	; 0x40
 8002cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002cf4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8002cf6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002cf8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cfc:	9601      	str	r6, [sp, #4]
 8002cfe:	f8cd 8000 	str.w	r8, [sp]
 8002d02:	465b      	mov	r3, fp
 8002d04:	9a03      	ldr	r2, [sp, #12]
 8002d06:	4639      	mov	r1, r7
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7ff ff11 	bl	8002b30 <I2C_RequestMemoryRead>
 8002d0e:	b110      	cbz	r0, 8002d16 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8002d10:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002d14:	e7cc      	b.n	8002cb0 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2bff      	cmp	r3, #255	; 0xff
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_I2C_Mem_Read+0x178>)
 8002d1e:	d958      	bls.n	8002dd2 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d20:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d22:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d24:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d2a:	4639      	mov	r1, r7
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff fe29 	bl	8002984 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d32:	9600      	str	r6, [sp, #0]
 8002d34:	4643      	mov	r3, r8
 8002d36:	2200      	movs	r2, #0
 8002d38:	2104      	movs	r1, #4
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff fe69 	bl	8002a12 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d1b5      	bne.n	8002cb0 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d44:	6822      	ldr	r2, [r4, #0]
 8002d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d4a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002d4e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002d50:	3301      	adds	r3, #1
 8002d52:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002d54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002d5e:	3a01      	subs	r2, #1
 8002d60:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d62:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002d64:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d66:	b1ab      	cbz	r3, 8002d94 <HAL_I2C_Mem_Read+0x114>
 8002d68:	b9a2      	cbnz	r2, 8002d94 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d6a:	9600      	str	r6, [sp, #0]
 8002d6c:	4643      	mov	r3, r8
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7ff fe4e 	bl	8002a12 <I2C_WaitOnFlagUntilTimeout>
 8002d76:	2800      	cmp	r0, #0
 8002d78:	d19a      	bne.n	8002cb0 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2bff      	cmp	r3, #255	; 0xff
 8002d80:	d92f      	bls.n	8002de2 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d82:	22ff      	movs	r2, #255	; 0xff
 8002d84:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d86:	9000      	str	r0, [sp, #0]
 8002d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d8c:	4639      	mov	r1, r7
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f7ff fdf8 	bl	8002984 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002d94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ca      	bne.n	8002d32 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	4632      	mov	r2, r6
 8002d9e:	4641      	mov	r1, r8
 8002da0:	4620      	mov	r0, r4
 8002da2:	f7ff fef7 	bl	8002b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d182      	bne.n	8002cb0 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	2120      	movs	r1, #32
 8002dae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002db6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002dba:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dc4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002dc8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dcc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002dd0:	e76f      	b.n	8002cb2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002dd2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002dd4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	e7a3      	b.n	8002d2a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002de2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002de4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002de6:	b292      	uxth	r2, r2
 8002de8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	e7cc      	b.n	8002d8c <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8002df2:	2002      	movs	r0, #2
 8002df4:	e75d      	b.n	8002cb2 <HAL_I2C_Mem_Read+0x32>
 8002df6:	bf00      	nop
 8002df8:	80002400 	.word	0x80002400

08002dfc <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002dfc:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8002dfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e00:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e02:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8002e04:	b103      	cbz	r3, 8002e08 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e06:	4718      	bx	r3
 8002e08:	4770      	bx	lr

08002e0a <HAL_I2C_SlaveTxCpltCallback>:
 8002e0a:	4770      	bx	lr

08002e0c <HAL_I2C_SlaveRxCpltCallback>:
 8002e0c:	4770      	bx	lr

08002e0e <I2C_ITSlaveSequentialCplt>:
{
 8002e0e:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	2500      	movs	r5, #0
 8002e12:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e16:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e1a:	2b29      	cmp	r3, #41	; 0x29
 8002e1c:	d10c      	bne.n	8002e38 <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e1e:	2328      	movs	r3, #40	; 0x28
 8002e20:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e24:	2321      	movs	r3, #33	; 0x21
 8002e26:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e28:	2101      	movs	r1, #1
 8002e2a:	f7ff fdc5 	bl	80029b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e2e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e32:	f7ff ffea 	bl	8002e0a <HAL_I2C_SlaveTxCpltCallback>
 8002e36:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e38:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e3e:	d10b      	bne.n	8002e58 <I2C_ITSlaveSequentialCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e40:	2328      	movs	r3, #40	; 0x28
 8002e42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e46:	2322      	movs	r3, #34	; 0x22
 8002e48:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	f7ff fdb4 	bl	80029b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e50:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e54:	f7ff ffda 	bl	8002e0c <HAL_I2C_SlaveRxCpltCallback>
 8002e58:	bd38      	pop	{r3, r4, r5, pc}

08002e5a <HAL_I2C_AddrCallback>:
{
 8002e5a:	4770      	bx	lr

08002e5c <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e5e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e66:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002e68:	4604      	mov	r4, r0
 8002e6a:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e6c:	d134      	bne.n	8002ed8 <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8002e6e:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e70:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e72:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e74:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e76:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e78:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e7a:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002e7c:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e80:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e84:	d120      	bne.n	8002ec8 <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e86:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002e8a:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002e8e:	f015 0506 	ands.w	r5, r5, #6
 8002e92:	d10e      	bne.n	8002eb2 <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8002e94:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002e96:	3101      	adds	r1, #1
 8002e98:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e9a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002e9c:	2902      	cmp	r1, #2
 8002e9e:	d120      	bne.n	8002ee2 <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ea0:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8002ea2:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ea4:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002ea6:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eaa:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eac:	f7ff ffd5 	bl	8002e5a <HAL_I2C_AddrCallback>
 8002eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002eb2:	2104      	movs	r1, #4
 8002eb4:	f7ff fd80 	bl	80029b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ebe:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ec2:	4631      	mov	r1, r6
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	e7f1      	b.n	8002eac <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ec8:	2104      	movs	r1, #4
 8002eca:	f7ff fd75 	bl	80029b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ed4:	462a      	mov	r2, r5
 8002ed6:	e7f4      	b.n	8002ec2 <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ed8:	2208      	movs	r2, #8
 8002eda:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002edc:	2300      	movs	r3, #0
 8002ede:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ee4 <HAL_I2C_ListenCpltCallback>:
 8002ee4:	4770      	bx	lr
	...

08002ee8 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee8:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <I2C_ITListenCplt+0x60>)
{
 8002eea:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002ef4:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efa:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002efe:	074b      	lsls	r3, r1, #29
{
 8002f00:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002f02:	d512      	bpl.n	8002f2a <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f04:	6802      	ldr	r2, [r0, #0]
 8002f06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f0e:	3301      	adds	r3, #1
 8002f10:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002f12:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002f14:	b14b      	cbz	r3, 8002f2a <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8002f16:	3b01      	subs	r3, #1
 8002f18:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002f1a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f22:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	2107      	movs	r1, #7
 8002f2e:	f7ff fd43 	bl	80029b8 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	2210      	movs	r2, #16
 8002f36:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7ff ffd0 	bl	8002ee4 <HAL_I2C_ListenCpltCallback>
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	bf00      	nop
 8002f48:	ffff0000 	.word	0xffff0000

08002f4c <HAL_I2C_ErrorCallback>:
 8002f4c:	4770      	bx	lr

08002f4e <HAL_I2C_AbortCpltCallback>:
{
 8002f4e:	4770      	bx	lr

08002f50 <I2C_ITError>:
{
 8002f50:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f52:	4a32      	ldr	r2, [pc, #200]	; (800301c <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f54:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f58:	2500      	movs	r5, #0
 8002f5a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f5e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002f60:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002f62:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f64:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002f66:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f68:	2b02      	cmp	r3, #2
{
 8002f6a:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8002f6c:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f6e:	d822      	bhi.n	8002fb6 <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f70:	2103      	movs	r1, #3
 8002f72:	f7ff fd21 	bl	80029b8 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f76:	2328      	movs	r3, #40	; 0x28
 8002f78:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002f7c:	4b28      	ldr	r3, [pc, #160]	; (8003020 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f7e:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002f80:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f86:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f88:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8002f8c:	d020      	beq.n	8002fd0 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8002f8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f94:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d03e      	beq.n	8003018 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <I2C_ITError+0xd4>)
 8002f9c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002fa4:	f7fe ff70 	bl	8001e88 <HAL_DMA_Abort_IT>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d035      	beq.n	8003018 <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fae:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fb4:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fb6:	2107      	movs	r1, #7
 8002fb8:	f7ff fcfe 	bl	80029b8 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002fbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002fc0:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002fc2:	bf1c      	itt	ne
 8002fc4:	2320      	movne	r3, #32
 8002fc6:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	6303      	str	r3, [r0, #48]	; 0x30
 8002fce:	e7d7      	b.n	8002f80 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002fd0:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8002fd4:	d00e      	beq.n	8002ff4 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fd6:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002fd8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fde:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002fe0:	b1d0      	cbz	r0, 8003018 <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <I2C_ITError+0xd4>)
 8002fe4:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002fe6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fea:	f7fe ff4d 	bl	8001e88 <HAL_DMA_Abort_IT>
 8002fee:	b198      	cbz	r0, 8003018 <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ff0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ff2:	e7dc      	b.n	8002fae <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ff4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002ff8:	2b60      	cmp	r3, #96	; 0x60
 8002ffa:	d108      	bne.n	800300e <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003002:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff ffa1 	bl	8002f4e <HAL_I2C_AbortCpltCallback>
 800300c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 800300e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003012:	4620      	mov	r0, r4
 8003014:	f7ff ff9a 	bl	8002f4c <HAL_I2C_ErrorCallback>
 8003018:	bd70      	pop	{r4, r5, r6, pc}
 800301a:	bf00      	nop
 800301c:	ffff0000 	.word	0xffff0000
 8003020:	08003119 	.word	0x08003119
 8003024:	08003289 	.word	0x08003289

08003028 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003028:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800302a:	2220      	movs	r2, #32
{
 800302c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800302e:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003030:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003032:	2208      	movs	r2, #8
 8003034:	61da      	str	r2, [r3, #28]
{
 8003036:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003038:	2107      	movs	r1, #7
{
 800303a:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800303c:	f7ff fcbc 	bl	80029b8 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003040:	6803      	ldr	r3, [r0, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003048:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003050:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003054:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800305e:	f7ff fc83 	bl	8002968 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003062:	0471      	lsls	r1, r6, #17
 8003064:	d532      	bpl.n	80030cc <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8003066:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8003068:	b11b      	cbz	r3, 8003072 <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b29b      	uxth	r3, r3
 8003070:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003072:	076b      	lsls	r3, r5, #29
 8003074:	d50e      	bpl.n	8003094 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800307a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800307c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800307e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003080:	3301      	adds	r3, #1
 8003082:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003084:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003086:	b12b      	cbz	r3, 8003094 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8003088:	3b01      	subs	r3, #1
 800308a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800308c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800308e:	3b01      	subs	r3, #1
 8003090:	b29b      	uxth	r3, r3
 8003092:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8003094:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	b11b      	cbz	r3, 80030a2 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800309a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80030aa:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030ae:	b18b      	cbz	r3, 80030d4 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80030b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80030b2:	4620      	mov	r0, r4
 80030b4:	f7ff ff4c 	bl	8002f50 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030b8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80030bc:	2b28      	cmp	r3, #40	; 0x28
 80030be:	d128      	bne.n	8003112 <I2C_ITSlaveCplt+0xea>
      I2C_ITListenCplt(hi2c, ITFlags);
 80030c0:	4629      	mov	r1, r5
 80030c2:	4620      	mov	r0, r4
}
 80030c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 80030c8:	f7ff bf0e 	b.w	8002ee8 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030cc:	0432      	lsls	r2, r6, #16
 80030ce:	d5d0      	bpl.n	8003072 <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 80030d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80030d2:	e7c9      	b.n	8003068 <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030d6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80030da:	d00a      	beq.n	80030f2 <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030dc:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <I2C_ITSlaveCplt+0xec>)
 80030de:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	2220      	movs	r2, #32
 80030e2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7ff fefa 	bl	8002ee4 <HAL_I2C_ListenCpltCallback>
 80030f0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030f2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030fa:	2a22      	cmp	r2, #34	; 0x22
 80030fc:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8003100:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003104:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003106:	d102      	bne.n	800310e <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003108:	f7ff fe80 	bl	8002e0c <HAL_I2C_SlaveRxCpltCallback>
 800310c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800310e:	f7ff fe7c 	bl	8002e0a <HAL_I2C_SlaveTxCpltCallback>
 8003112:	bd70      	pop	{r4, r5, r6, pc}
 8003114:	ffff0000 	.word	0xffff0000

08003118 <I2C_Slave_ISR_IT>:
{
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 800311c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8003120:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003122:	2a01      	cmp	r2, #1
{
 8003124:	4604      	mov	r4, r0
 8003126:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8003128:	d07c      	beq.n	8003224 <I2C_Slave_ISR_IT+0x10c>
 800312a:	2201      	movs	r2, #1
 800312c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003130:	06ca      	lsls	r2, r1, #27
 8003132:	d539      	bpl.n	80031a8 <I2C_Slave_ISR_IT+0x90>
 8003134:	06f2      	lsls	r2, r6, #27
 8003136:	d537      	bpl.n	80031a8 <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8003138:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800313a:	b292      	uxth	r2, r2
 800313c:	bb32      	cbnz	r2, 800318c <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800313e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003142:	2a28      	cmp	r2, #40	; 0x28
 8003144:	d110      	bne.n	8003168 <I2C_Slave_ISR_IT+0x50>
 8003146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800314a:	d10d      	bne.n	8003168 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 800314c:	f7ff fecc 	bl	8002ee8 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003150:	06aa      	lsls	r2, r5, #26
 8003152:	d505      	bpl.n	8003160 <I2C_Slave_ISR_IT+0x48>
 8003154:	06b3      	lsls	r3, r6, #26
 8003156:	d503      	bpl.n	8003160 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003158:	4629      	mov	r1, r5
 800315a:	4620      	mov	r0, r4
 800315c:	f7ff ff64 	bl	8003028 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8003160:	2000      	movs	r0, #0
 8003162:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8003166:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003168:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800316c:	2a29      	cmp	r2, #41	; 0x29
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003174:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003176:	d1eb      	bne.n	8003150 <I2C_Slave_ISR_IT+0x38>
 8003178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800317c:	d0e8      	beq.n	8003150 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 800317e:	4620      	mov	r0, r4
 8003180:	f7ff fbf2 	bl	8002968 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8003184:	4620      	mov	r0, r4
 8003186:	f7ff fe42 	bl	8002e0e <I2C_ITSlaveSequentialCplt>
 800318a:	e7e1      	b.n	8003150 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318c:	6802      	ldr	r2, [r0, #0]
 800318e:	2110      	movs	r1, #16
 8003190:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003192:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003194:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003198:	f042 0204 	orr.w	r2, r2, #4
 800319c:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800319e:	d1d7      	bne.n	8003150 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031a0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80031a2:	f7ff fed5 	bl	8002f50 <I2C_ITError>
 80031a6:	e7d3      	b.n	8003150 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80031a8:	076a      	lsls	r2, r5, #29
 80031aa:	d51a      	bpl.n	80031e2 <I2C_Slave_ISR_IT+0xca>
 80031ac:	0770      	lsls	r0, r6, #29
 80031ae:	d518      	bpl.n	80031e2 <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 80031b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031b2:	b292      	uxth	r2, r2
 80031b4:	b16a      	cbz	r2, 80031d2 <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031b6:	6821      	ldr	r1, [r4, #0]
 80031b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031ba:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80031bc:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 80031be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031c0:	3201      	adds	r2, #1
 80031c2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80031c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80031c6:	3a01      	subs	r2, #1
 80031c8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80031ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031cc:	3a01      	subs	r2, #1
 80031ce:	b292      	uxth	r2, r2
 80031d0:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80031d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031d4:	b292      	uxth	r2, r2
 80031d6:	2a00      	cmp	r2, #0
 80031d8:	d1ba      	bne.n	8003150 <I2C_Slave_ISR_IT+0x38>
 80031da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031de:	d1d1      	bne.n	8003184 <I2C_Slave_ISR_IT+0x6c>
 80031e0:	e7b6      	b.n	8003150 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80031e2:	0729      	lsls	r1, r5, #28
 80031e4:	d505      	bpl.n	80031f2 <I2C_Slave_ISR_IT+0xda>
 80031e6:	0732      	lsls	r2, r6, #28
 80031e8:	d503      	bpl.n	80031f2 <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7ff fe36 	bl	8002e5c <I2C_ITAddrCplt.isra.8>
 80031f0:	e7ae      	b.n	8003150 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031f2:	07a8      	lsls	r0, r5, #30
 80031f4:	d5ac      	bpl.n	8003150 <I2C_Slave_ISR_IT+0x38>
 80031f6:	07b1      	lsls	r1, r6, #30
 80031f8:	d5aa      	bpl.n	8003150 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 80031fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031fc:	b292      	uxth	r2, r2
 80031fe:	b16a      	cbz	r2, 800321c <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003208:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800320a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800320c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800320e:	3b01      	subs	r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003214:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	8523      	strh	r3, [r4, #40]	; 0x28
 800321a:	e799      	b.n	8003150 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800321c:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8003220:	d0b0      	beq.n	8003184 <I2C_Slave_ISR_IT+0x6c>
 8003222:	e795      	b.n	8003150 <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 8003224:	2002      	movs	r0, #2
}
 8003226:	bd70      	pop	{r4, r5, r6, pc}

08003228 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003228:	6803      	ldr	r3, [r0, #0]
 800322a:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800322c:	681a      	ldr	r2, [r3, #0]
{
 800322e:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003230:	05cc      	lsls	r4, r1, #23
 8003232:	d508      	bpl.n	8003246 <HAL_I2C_ER_IRQHandler+0x1e>
 8003234:	0614      	lsls	r4, r2, #24
 8003236:	d506      	bpl.n	8003246 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003238:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800323a:	f044 0401 	orr.w	r4, r4, #1
 800323e:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003240:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003244:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003246:	054c      	lsls	r4, r1, #21
 8003248:	d508      	bpl.n	800325c <HAL_I2C_ER_IRQHandler+0x34>
 800324a:	0614      	lsls	r4, r2, #24
 800324c:	d506      	bpl.n	800325c <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800324e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003250:	f044 0408 	orr.w	r4, r4, #8
 8003254:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003256:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800325a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800325c:	0589      	lsls	r1, r1, #22
 800325e:	d508      	bpl.n	8003272 <HAL_I2C_ER_IRQHandler+0x4a>
 8003260:	0612      	lsls	r2, r2, #24
 8003262:	d506      	bpl.n	8003272 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003264:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003266:	f042 0202 	orr.w	r2, r2, #2
 800326a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800326c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003270:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8003272:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003274:	f011 0f0b 	tst.w	r1, #11
 8003278:	d003      	beq.n	8003282 <HAL_I2C_ER_IRQHandler+0x5a>
}
 800327a:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800327e:	f7ff be67 	b.w	8002f50 <I2C_ITError>
}
 8003282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003286:	4770      	bx	lr

08003288 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003288:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 800328a:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 800328c:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003292:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003294:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003296:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800329a:	2b60      	cmp	r3, #96	; 0x60
 800329c:	d105      	bne.n	80032aa <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 800329e:	2320      	movs	r3, #32
 80032a0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80032a4:	f7ff fe53 	bl	8002f4e <HAL_I2C_AbortCpltCallback>
 80032a8:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 80032aa:	f7ff fe4f 	bl	8002f4c <HAL_I2C_ErrorCallback>
 80032ae:	bd08      	pop	{r3, pc}

080032b0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	2a20      	cmp	r2, #32
{
 80032b8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ba:	d11d      	bne.n	80032f8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d019      	beq.n	80032f8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c4:	2324      	movs	r3, #36	; 0x24
 80032c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ca:	6803      	ldr	r3, [r0, #0]
 80032cc:	681c      	ldr	r4, [r3, #0]
 80032ce:	f024 0401 	bic.w	r4, r4, #1
 80032d2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032d4:	681c      	ldr	r4, [r3, #0]
 80032d6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80032da:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032dc:	681c      	ldr	r4, [r3, #0]
 80032de:	4321      	orrs	r1, r4
 80032e0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	f041 0101 	orr.w	r1, r1, #1
 80032e8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ea:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80032f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80032f8:	2002      	movs	r0, #2
  }
}
 80032fa:	bd10      	pop	{r4, pc}

080032fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032fc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fe:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8003302:	b2e4      	uxtb	r4, r4
 8003304:	2c20      	cmp	r4, #32
 8003306:	d11c      	bne.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003308:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800330c:	2b01      	cmp	r3, #1
 800330e:	d018      	beq.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003310:	2324      	movs	r3, #36	; 0x24
 8003312:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003316:	6803      	ldr	r3, [r0, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003320:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003322:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003326:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800332a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003336:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800333a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800333e:	4618      	mov	r0, r3
 8003340:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8003342:	2002      	movs	r0, #2
  }
}
 8003344:	bd10      	pop	{r4, pc}
	...

08003348 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800334c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800334e:	6804      	ldr	r4, [r0, #0]
 8003350:	6848      	ldr	r0, [r1, #4]
 8003352:	f8d4 800c 	ldr.w	r8, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003356:	f8d1 e000 	ldr.w	lr, [r1]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800335a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800335e:	688e      	ldr	r6, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003360:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003364:	690f      	ldr	r7, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003366:	3284      	adds	r2, #132	; 0x84
 8003368:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800336a:	f10e 0a01 	add.w	sl, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800336e:	685d      	ldr	r5, [r3, #4]
 8003370:	f005 25f0 	and.w	r5, r5, #4026593280	; 0xf000f000
 8003374:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003376:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003378:	f3c8 480b 	ubfx	r8, r8, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800337c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003380:	4480      	add	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003382:	4455      	add	r5, sl
 8003384:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 8003388:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800338a:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800338c:	f8d3 a008 	ldr.w	sl, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003390:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003394:	f00a 2af0 	and.w	sl, sl, #4026593280	; 0xf000f000
 8003398:	f8c3 a008 	str.w	sl, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800339c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80033a0:	f3c5 0a0a 	ubfx	sl, r5, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80033a4:	3601      	adds	r6, #1
 80033a6:	f3cb 050a 	ubfx	r5, fp, #0, #11
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80033aa:	44d4      	add	ip, sl
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80033ac:	442e      	add	r6, r5
 80033ae:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80033b2:	609e      	str	r6, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80033b4:	691d      	ldr	r5, [r3, #16]
 80033b6:	f025 0507 	bic.w	r5, r5, #7
 80033ba:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80033bc:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80033c0:	611f      	str	r7, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80033c2:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 80033c4:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 80033c8:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80033cc:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80033d0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80033d4:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80033d8:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 80033dc:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 80033e0:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80033e2:	695d      	ldr	r5, [r3, #20]
 80033e4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80033e8:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80033ea:	f8c3 8014 	str.w	r8, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80033ee:	69dd      	ldr	r5, [r3, #28]
 80033f0:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80033f4:	f025 0507 	bic.w	r5, r5, #7
 80033f8:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80033fa:	f101 051c 	add.w	r5, r1, #28
 80033fe:	e895 0160 	ldmia.w	r5, {r5, r6, r8}
 8003402:	4335      	orrs	r5, r6
 8003404:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003406:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8003408:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800340c:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003410:	b33f      	cbz	r7, 8003462 <LTDC_SetConfig+0x11a>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003412:	2f01      	cmp	r7, #1
 8003414:	d028      	beq.n	8003468 <LTDC_SetConfig+0x120>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003416:	1ebd      	subs	r5, r7, #2
 8003418:	2d02      	cmp	r5, #2
 800341a:	d928      	bls.n	800346e <LTDC_SetConfig+0x126>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800341c:	2f07      	cmp	r7, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 800341e:	bf0c      	ite	eq
 8003420:	f04f 0c02 	moveq.w	ip, #2
 8003424:	f04f 0c01 	movne.w	ip, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003428:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800342a:	6add      	ldr	r5, [r3, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800342c:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800342e:	eba0 000e 	sub.w	r0, r0, lr
 8003432:	fb0c f000 	mul.w	r0, ip, r0
 8003436:	fb06 f10c 	mul.w	r1, r6, ip
 800343a:	3003      	adds	r0, #3
 800343c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003440:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003444:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003446:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003448:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800344a:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800344e:	f021 0107 	bic.w	r1, r1, #7
 8003452:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003454:	631f      	str	r7, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003456:	58a3      	ldr	r3, [r4, r2]
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	50a3      	str	r3, [r4, r2]
 800345e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 4;
 8003462:	f04f 0c04 	mov.w	ip, #4
 8003466:	e7df      	b.n	8003428 <LTDC_SetConfig+0xe0>
    tmp = 3;
 8003468:	f04f 0c03 	mov.w	ip, #3
 800346c:	e7dc      	b.n	8003428 <LTDC_SetConfig+0xe0>
    tmp = 2;
 800346e:	f04f 0c02 	mov.w	ip, #2
 8003472:	e7d9      	b.n	8003428 <LTDC_SetConfig+0xe0>

08003474 <HAL_LTDC_Init>:
  if(hltdc == NULL)
 8003474:	2800      	cmp	r0, #0
 8003476:	d06a      	beq.n	800354e <HAL_LTDC_Init+0xda>
{
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800347a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800347e:	4604      	mov	r4, r0
 8003480:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05d      	beq.n	8003544 <HAL_LTDC_Init+0xd0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003488:	2202      	movs	r2, #2
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800348a:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800348c:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003490:	1d22      	adds	r2, r4, #4
 8003492:	cac4      	ldmia	r2, {r2, r6, r7}
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003494:	6999      	ldr	r1, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003496:	6925      	ldr	r5, [r4, #16]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003498:	482e      	ldr	r0, [pc, #184]	; (8003554 <HAL_LTDC_Init+0xe0>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800349a:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 800349e:	6199      	str	r1, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034a0:	4332      	orrs	r2, r6
 80034a2:	6999      	ldr	r1, [r3, #24]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80034a4:	6966      	ldr	r6, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034a6:	433a      	orrs	r2, r7
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034a8:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034aa:	430a      	orrs	r2, r1
 80034ac:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034ae:	689d      	ldr	r5, [r3, #8]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80034b0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034b2:	4005      	ands	r5, r0
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80034b4:	f104 0218 	add.w	r2, r4, #24
 80034b8:	e892 5004 	ldmia.w	r2, {r2, ip, lr}
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034bc:	609d      	str	r5, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80034be:	6899      	ldr	r1, [r3, #8]
 80034c0:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 80034c4:	4311      	orrs	r1, r2
 80034c6:	6099      	str	r1, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80034c8:	68dd      	ldr	r5, [r3, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80034ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80034cc:	4005      	ands	r5, r0
 80034ce:	60dd      	str	r5, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80034d6:	ea42 020e 	orr.w	r2, r2, lr
 80034da:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80034dc:	691d      	ldr	r5, [r3, #16]
  tmp = (hltdc->Init.TotalWidth << 16);
 80034de:	f8d4 e02c 	ldr.w	lr, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80034e2:	4005      	ands	r5, r0
 80034e4:	611d      	str	r5, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80034e6:	6919      	ldr	r1, [r3, #16]
 80034e8:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80034ec:	4331      	orrs	r1, r6
 80034ee:	6119      	str	r1, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80034f0:	6959      	ldr	r1, [r3, #20]
 80034f2:	4008      	ands	r0, r1
 80034f4:	6158      	str	r0, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80034fa:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80034fe:	430a      	orrs	r2, r1
 8003500:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003502:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8003504:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8003508:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800350c:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003510:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003512:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003514:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003518:	430a      	orrs	r2, r1
 800351a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800351e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003526:	f042 0206 	orr.w	r2, r2, #6
 800352a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800352c:	699a      	ldr	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800352e:	2100      	movs	r1, #0
  __HAL_LTDC_ENABLE(hltdc);
 8003530:	f042 0201 	orr.w	r2, r2, #1
  hltdc->State = HAL_LTDC_STATE_READY;
 8003534:	2501      	movs	r5, #1
  __HAL_LTDC_ENABLE(hltdc);
 8003536:	619a      	str	r2, [r3, #24]
  return HAL_OK;
 8003538:	4608      	mov	r0, r1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800353a:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800353e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  return HAL_OK;
 8003542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003544:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003548:	f01e fb1c 	bl	8021b84 <HAL_LTDC_MspInit>
 800354c:	e79c      	b.n	8003488 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800354e:	2001      	movs	r0, #1
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	f000f800 	.word	0xf000f800

08003558 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8003558:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_LTDC_ConfigLayer+0xc>
 8003560:	2002      	movs	r0, #2
 8003562:	4770      	bx	lr
{   
 8003564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003568:	460d      	mov	r5, r1
 800356a:	4606      	mov	r6, r0
 800356c:	4696      	mov	lr, r2
 800356e:	460f      	mov	r7, r1
 8003570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003572:	2434      	movs	r4, #52	; 0x34
 8003574:	fb04 640e 	mla	r4, r4, lr, r6
  __HAL_LOCK(hltdc);
 8003578:	f04f 0801 	mov.w	r8, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800357c:	f04f 0c02 	mov.w	ip, #2
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003580:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 8003582:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003586:	f886 c0a1 	strb.w	ip, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800358a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800358c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800358e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003598:	4672      	mov	r2, lr
 800359a:	4630      	mov	r0, r6
 800359c:	4639      	mov	r1, r7
 800359e:	f7ff fed3 	bl	8003348 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035a2:	6832      	ldr	r2, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80035a4:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035a6:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  return HAL_OK;
 80035aa:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035ac:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80035b0:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
  return HAL_OK;
 80035b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080035b8 <HAL_LTDC_SetAddress>:
{
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80035ba:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
 80035be:	2d01      	cmp	r5, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_LTDC_SetAddress+0xe>
 80035c2:	2002      	movs	r0, #2
}
 80035c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  pLayerCfg->FBStartAdress = Address;
 80035c6:	2334      	movs	r3, #52	; 0x34
 80035c8:	fb03 f302 	mul.w	r3, r3, r2
 80035cc:	18c7      	adds	r7, r0, r3
 80035ce:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 80035d0:	2601      	movs	r6, #1
 80035d2:	460d      	mov	r5, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80035d4:	3338      	adds	r3, #56	; 0x38
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035d6:	f04f 0e02 	mov.w	lr, #2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035da:	18c1      	adds	r1, r0, r3
  __HAL_LOCK(hltdc);
 80035dc:	f880 60a0 	strb.w	r6, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035e0:	f880 e0a1 	strb.w	lr, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 80035e4:	65fd      	str	r5, [r7, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035e6:	f7ff feaf 	bl	8003348 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035ea:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hltdc);
 80035ec:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035ee:	6256      	str	r6, [r2, #36]	; 0x24
  return HAL_OK;
 80035f0:	4618      	mov	r0, r3
  hltdc->State = HAL_LTDC_STATE_READY;
 80035f2:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80035f6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
  return HAL_OK;
 80035fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003600:	4604      	mov	r4, r0
{
 8003602:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8003604:	2800      	cmp	r0, #0
 8003606:	d074      	beq.n	80036f2 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003608:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800360c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003610:	b91b      	cbnz	r3, 800361a <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003612:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003616:	f01e fe01 	bl	802221c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800361a:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800361c:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 800361e:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003622:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8003626:	f004 f9f6 	bl	8007a16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 800362a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362c:	466e      	mov	r6, sp
 800362e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003632:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003634:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003638:	e886 0003 	stmia.w	r6, {r0, r1}
 800363c:	f104 0804 	add.w	r8, r4, #4
 8003640:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003644:	6820      	ldr	r0, [r4, #0]
 8003646:	f004 f9b1 	bl	80079ac <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800364a:	2100      	movs	r1, #0
 800364c:	6820      	ldr	r0, [r4, #0]
 800364e:	f004 f9e8 	bl	8007a22 <USB_SetCurrentMode>
 8003652:	2100      	movs	r1, #0
 8003654:	4622      	mov	r2, r4
 8003656:	4623      	mov	r3, r4
 8003658:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800365c:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800365e:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8003660:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003664:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8003668:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 800366a:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 800366c:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003670:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8003674:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003676:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8003678:	6518      	str	r0, [r3, #80]	; 0x50
 800367a:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 800367e:	d1ef      	bne.n	8003660 <HAL_PCD_Init+0x64>
 8003680:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003682:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8003684:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8003688:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 800368a:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 800368c:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003690:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003694:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003698:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800369c:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 80036a0:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 80036a4:	d1ee      	bne.n	8003684 <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036a8:	466e      	mov	r6, sp
 80036aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80036b4:	e886 0003 	stmia.w	r6, {r0, r1}
 80036b8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80036bc:	6820      	ldr	r0, [r4, #0]
 80036be:	f004 f9f1 	bl	8007aa4 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 80036c2:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80036c4:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036c8:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036d2:	4620      	mov	r0, r4
 80036d4:	f000 fc26 	bl	8003f24 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 80036d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d102      	bne.n	80036e4 <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 80036de:	4620      	mov	r0, r4
 80036e0:	f000 fc33 	bl	8003f4a <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	f004 fcb7 	bl	8008058 <USB_DevDisconnect>

  return HAL_OK;
 80036ea:	2000      	movs	r0, #0
}
 80036ec:	b00a      	add	sp, #40	; 0x28
 80036ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80036f2:	2001      	movs	r0, #1
 80036f4:	e7fa      	b.n	80036ec <HAL_PCD_Init+0xf0>

080036f6 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80036f6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80036fa:	2b01      	cmp	r3, #1
{
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003700:	d00c      	beq.n	800371c <HAL_PCD_Start+0x26>
 8003702:	2301      	movs	r3, #1
 8003704:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8003708:	6800      	ldr	r0, [r0, #0]
 800370a:	f004 fc99 	bl	8008040 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	f004 f97b 	bl	8007a0a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003714:	2000      	movs	r0, #0
 8003716:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800371a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800371c:	2002      	movs	r0, #2
}
 800371e:	bd10      	pop	{r4, pc}

08003720 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003724:	f8d0 9000 	ldr.w	r9, [r0]
{
 8003728:	b085      	sub	sp, #20
 800372a:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800372c:	4648      	mov	r0, r9
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 800372e:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003732:	f004 fccc 	bl	80080ce <USB_GetMode>
 8003736:	9000      	str	r0, [sp, #0]
 8003738:	2800      	cmp	r0, #0
 800373a:	f040 8154 	bne.w	80039e6 <HAL_PCD_IRQHandler+0x2c6>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800373e:	6820      	ldr	r0, [r4, #0]
 8003740:	f004 fc96 	bl	8008070 <USB_ReadInterrupts>
 8003744:	2800      	cmp	r0, #0
 8003746:	f000 814e 	beq.w	80039e6 <HAL_PCD_IRQHandler+0x2c6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800374a:	6820      	ldr	r0, [r4, #0]
 800374c:	f004 fc90 	bl	8008070 <USB_ReadInterrupts>
 8003750:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003752:	bf48      	it	mi
 8003754:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003756:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003758:	bf42      	ittt	mi
 800375a:	6953      	ldrmi	r3, [r2, #20]
 800375c:	f003 0302 	andmi.w	r3, r3, #2
 8003760:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003762:	f004 fc85 	bl	8008070 <USB_ReadInterrupts>
 8003766:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
 800376a:	d00b      	beq.n	8003784 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	f004 fc83 	bl	8008078 <USB_ReadDevAllOutEpInterrupt>
 8003772:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8003776:	4605      	mov	r5, r0

      while (ep_intr != 0U)
 8003778:	46b2      	mov	sl, r6
      epnum = 0U;
 800377a:	f04f 0b00 	mov.w	fp, #0
      while (ep_intr != 0U)
 800377e:	2d00      	cmp	r5, #0
 8003780:	f040 8134 	bne.w	80039ec <HAL_PCD_IRQHandler+0x2cc>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	f004 fc73 	bl	8008070 <USB_ReadInterrupts>
 800378a:	0347      	lsls	r7, r0, #13
 800378c:	d50c      	bpl.n	80037a8 <HAL_PCD_IRQHandler+0x88>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	f004 fc7a 	bl	8008088 <USB_ReadDevAllInEpInterrupt>
 8003794:	4625      	mov	r5, r4
 8003796:	9001      	str	r0, [sp, #4]
 8003798:	f509 6810 	add.w	r8, r9, #2304	; 0x900

      epnum = 0U;
 800379c:	f04f 0b00 	mov.w	fp, #0

      while (ep_intr != 0U)
 80037a0:	9b01      	ldr	r3, [sp, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 8164 	bne.w	8003a70 <HAL_PCD_IRQHandler+0x350>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	f004 fc61 	bl	8008070 <USB_ReadInterrupts>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	da15      	bge.n	80037de <HAL_PCD_IRQHandler+0xbe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037b2:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 80037be:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	f040 81cf 	bne.w	8003b66 <HAL_PCD_IRQHandler+0x446>
      {
        hpcd->LPM_State = LPM_L0;
 80037c8:	2100      	movs	r1, #0
 80037ca:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037ce:	4620      	mov	r0, r4
 80037d0:	f01e fe8a 	bl	80224e8 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037d4:	6822      	ldr	r2, [r4, #0]
 80037d6:	6953      	ldr	r3, [r2, #20]
 80037d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037dc:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	f004 fc46 	bl	8008070 <USB_ReadInterrupts>
 80037e4:	0505      	lsls	r5, r0, #20
 80037e6:	d50b      	bpl.n	8003800 <HAL_PCD_IRQHandler+0xe0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037e8:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 80037ec:	07d8      	lsls	r0, r3, #31
 80037ee:	d502      	bpl.n	80037f6 <HAL_PCD_IRQHandler+0xd6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037f0:	4620      	mov	r0, r4
 80037f2:	f01e fd7d 	bl	80222f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037f6:	6822      	ldr	r2, [r4, #0]
 80037f8:	6953      	ldr	r3, [r2, #20]
 80037fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fe:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	f004 fc35 	bl	8008070 <USB_ReadInterrupts>
 8003806:	0101      	lsls	r1, r0, #4
 8003808:	d514      	bpl.n	8003834 <HAL_PCD_IRQHandler+0x114>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003812:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003814:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8003818:	2a00      	cmp	r2, #0
 800381a:	f040 81a8 	bne.w	8003b6e <HAL_PCD_IRQHandler+0x44e>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8003820:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003822:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8003826:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800382a:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800382e:	4620      	mov	r0, r4
 8003830:	f01e fe5a 	bl	80224e8 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003834:	6820      	ldr	r0, [r4, #0]
 8003836:	f004 fc1b 	bl	8008070 <USB_ReadInterrupts>
 800383a:	04c2      	lsls	r2, r0, #19
 800383c:	d534      	bpl.n	80038a8 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800383e:	f509 6500 	add.w	r5, r9, #2048	; 0x800
 8003842:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003844:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800384c:	2110      	movs	r1, #16
 800384e:	f004 f8ff 	bl	8007a50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	6860      	ldr	r0, [r4, #4]
 8003854:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003858:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385c:	9a00      	ldr	r2, [sp, #0]
 800385e:	4282      	cmp	r2, r0
 8003860:	f040 8189 	bne.w	8003b76 <HAL_PCD_IRQHandler+0x456>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003864:	69eb      	ldr	r3, [r5, #28]
 8003866:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800386a:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800386c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 819a 	beq.w	8003ba8 <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8003874:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8003878:	f043 030b 	orr.w	r3, r3, #11
 800387c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8003880:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003882:	f043 030b 	orr.w	r3, r3, #11
 8003886:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003888:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800388c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800388e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003892:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003896:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800389a:	f004 fc37 	bl	800810c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	6953      	ldr	r3, [r2, #20]
 80038a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a6:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	f004 fbe1 	bl	8008070 <USB_ReadInterrupts>
 80038ae:	0483      	lsls	r3, r0, #18
 80038b0:	d520      	bpl.n	80038f4 <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	f004 fc0f 	bl	80080d6 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038b8:	6822      	ldr	r2, [r4, #0]
 80038ba:	68d3      	ldr	r3, [r2, #12]
 80038bc:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80038c0:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80038c2:	2303      	movs	r3, #3
 80038c4:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 80038c6:	2340      	movs	r3, #64	; 0x40
 80038c8:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 80038ca:	f000 ff9d 	bl	8004808 <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038ce:	4bb3      	ldr	r3, [pc, #716]	; (8003b9c <HAL_PCD_IRQHandler+0x47c>)
 80038d0:	4ab3      	ldr	r2, [pc, #716]	; (8003ba0 <HAL_PCD_IRQHandler+0x480>)
 80038d2:	4403      	add	r3, r0
 80038d4:	4293      	cmp	r3, r2
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	f200 816f 	bhi.w	8003bba <HAL_PCD_IRQHandler+0x49a>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80038e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038e4:	4620      	mov	r0, r4
 80038e6:	f01e fcf6 	bl	80222d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	6953      	ldr	r3, [r2, #20]
 80038ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f2:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038f4:	6820      	ldr	r0, [r4, #0]
 80038f6:	f004 fbbb 	bl	8008070 <USB_ReadInterrupts>
 80038fa:	06c7      	lsls	r7, r0, #27
 80038fc:	d52b      	bpl.n	8003956 <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038fe:	6822      	ldr	r2, [r4, #0]
 8003900:	6993      	ldr	r3, [r2, #24]
 8003902:	f023 0310 	bic.w	r3, r3, #16
 8003906:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8003908:	f8d9 5020 	ldr.w	r5, [r9, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800390c:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8003910:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003912:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003916:	f040 81a0 	bne.w	8003c5a <HAL_PCD_IRQHandler+0x53a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800391a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800391e:	421d      	tst	r5, r3
 8003920:	d014      	beq.n	800394c <HAL_PCD_IRQHandler+0x22c>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003922:	261c      	movs	r6, #28
 8003924:	fb06 4607 	mla	r6, r6, r7, r4
 8003928:	f3c5 150a 	ubfx	r5, r5, #4, #11
 800392c:	462a      	mov	r2, r5
 800392e:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8003932:	4648      	mov	r0, r9
 8003934:	f004 fb0e 	bl	8007f54 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003938:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 800393c:	442b      	add	r3, r5
 800393e:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003942:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8003946:	441d      	add	r5, r3
 8003948:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800394c:	6822      	ldr	r2, [r4, #0]
 800394e:	6993      	ldr	r3, [r2, #24]
 8003950:	f043 0310 	orr.w	r3, r3, #16
 8003954:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	f004 fb8a 	bl	8008070 <USB_ReadInterrupts>
 800395c:	0706      	lsls	r6, r0, #28
 800395e:	d507      	bpl.n	8003970 <HAL_PCD_IRQHandler+0x250>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003960:	4620      	mov	r0, r4
 8003962:	f01e fcb4 	bl	80222ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	6953      	ldr	r3, [r2, #20]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	f004 fb7d 	bl	8008070 <USB_ReadInterrupts>
 8003976:	02c5      	lsls	r5, r0, #11
 8003978:	d509      	bpl.n	800398e <HAL_PCD_IRQHandler+0x26e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800397a:	fa5f f18b 	uxtb.w	r1, fp
 800397e:	4620      	mov	r0, r4
 8003980:	f01e fcec 	bl	802235c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003984:	6822      	ldr	r2, [r4, #0]
 8003986:	6953      	ldr	r3, [r2, #20]
 8003988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	f004 fb6e 	bl	8008070 <USB_ReadInterrupts>
 8003994:	0280      	lsls	r0, r0, #10
 8003996:	d509      	bpl.n	80039ac <HAL_PCD_IRQHandler+0x28c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003998:	fa5f f18b 	uxtb.w	r1, fp
 800399c:	4620      	mov	r0, r4
 800399e:	f01e fcd9 	bl	8022354 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039a2:	6822      	ldr	r2, [r4, #0]
 80039a4:	6953      	ldr	r3, [r2, #20]
 80039a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039aa:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039ac:	6820      	ldr	r0, [r4, #0]
 80039ae:	f004 fb5f 	bl	8008070 <USB_ReadInterrupts>
 80039b2:	0041      	lsls	r1, r0, #1
 80039b4:	d507      	bpl.n	80039c6 <HAL_PCD_IRQHandler+0x2a6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039b6:	4620      	mov	r0, r4
 80039b8:	f01e fcd4 	bl	8022364 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	6953      	ldr	r3, [r2, #20]
 80039c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039c4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039c6:	6820      	ldr	r0, [r4, #0]
 80039c8:	f004 fb52 	bl	8008070 <USB_ReadInterrupts>
 80039cc:	0742      	lsls	r2, r0, #29
 80039ce:	d50a      	bpl.n	80039e6 <HAL_PCD_IRQHandler+0x2c6>
    {
      temp = hpcd->Instance->GOTGINT;
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039d4:	076b      	lsls	r3, r5, #29
 80039d6:	d502      	bpl.n	80039de <HAL_PCD_IRQHandler+0x2be>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039d8:	4620      	mov	r0, r4
 80039da:	f01e fcc7 	bl	802236c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	4315      	orrs	r5, r2
 80039e4:	605d      	str	r5, [r3, #4]
    }
  }
}
 80039e6:	b005      	add	sp, #20
 80039e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 80039ec:	07e9      	lsls	r1, r5, #31
 80039ee:	d52e      	bpl.n	8003a4e <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039f0:	fa5f f28b 	uxtb.w	r2, fp
 80039f4:	4611      	mov	r1, r2
 80039f6:	6820      	ldr	r0, [r4, #0]
 80039f8:	9201      	str	r2, [sp, #4]
 80039fa:	f004 fb4d 	bl	8008098 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039fe:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a00:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a02:	d50d      	bpl.n	8003a20 <HAL_PCD_IRQHandler+0x300>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a04:	4b67      	ldr	r3, [pc, #412]	; (8003ba4 <HAL_PCD_IRQHandler+0x484>)
 8003a06:	9a01      	ldr	r2, [sp, #4]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a08:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a0a:	4598      	cmp	r8, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a0c:	f8ca 1008 	str.w	r1, [sl, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a10:	d129      	bne.n	8003a66 <HAL_PCD_IRQHandler+0x346>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003a12:	68b1      	ldr	r1, [r6, #8]
 8003a14:	040b      	lsls	r3, r1, #16
 8003a16:	d520      	bpl.n	8003a5a <HAL_PCD_IRQHandler+0x33a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003a18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a1c:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a20:	0739      	lsls	r1, r7, #28
 8003a22:	d50f      	bpl.n	8003a44 <HAL_PCD_IRQHandler+0x324>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a24:	4b5f      	ldr	r3, [pc, #380]	; (8003ba4 <HAL_PCD_IRQHandler+0x484>)
 8003a26:	4598      	cmp	r8, r3
 8003a28:	d106      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x318>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003a2a:	68b2      	ldr	r2, [r6, #8]
 8003a2c:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003a2e:	bf44      	itt	mi
 8003a30:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 8003a34:	f8ca 2008 	strmi.w	r2, [sl, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f01e fc31 	bl	80222a0 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a3e:	2308      	movs	r3, #8
 8003a40:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a44:	06fb      	lsls	r3, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a46:	bf44      	itt	mi
 8003a48:	2310      	movmi	r3, #16
 8003a4a:	f8ca 3008 	strmi.w	r3, [sl, #8]
        epnum++;
 8003a4e:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 8003a52:	086d      	lsrs	r5, r5, #1
 8003a54:	f10a 0a20 	add.w	sl, sl, #32
 8003a58:	e691      	b.n	800377e <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 8003a5a:	68b1      	ldr	r1, [r6, #8]
 8003a5c:	0688      	lsls	r0, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 8003a5e:	bf44      	itt	mi
 8003a60:	2120      	movmi	r1, #32
 8003a62:	f8ca 1008 	strmi.w	r1, [sl, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a66:	4611      	mov	r1, r2
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f01e fc1f 	bl	80222ac <HAL_PCD_DataOutStageCallback>
 8003a6e:	e7d7      	b.n	8003a20 <HAL_PCD_IRQHandler+0x300>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	07de      	lsls	r6, r3, #31
 8003a74:	d56e      	bpl.n	8003b54 <HAL_PCD_IRQHandler+0x434>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a76:	fa5f fa8b 	uxtb.w	sl, fp
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	f004 fb14 	bl	80080aa <USB_ReadDevInEPInterrupt>
 8003a82:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a84:	07f0      	lsls	r0, r6, #31
 8003a86:	d510      	bpl.n	8003aaa <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a88:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f00b 020f 	and.w	r2, fp, #15
 8003a92:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a96:	ea23 0302 	bic.w	r3, r3, r2
 8003a9a:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a9e:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003aa0:	f8c8 0008 	str.w	r0, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f01e fc0a 	bl	80222be <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003aaa:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003aac:	bf44      	itt	mi
 8003aae:	2308      	movmi	r3, #8
 8003ab0:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ab4:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ab6:	bf44      	itt	mi
 8003ab8:	2310      	movmi	r3, #16
 8003aba:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003abe:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ac0:	bf44      	itt	mi
 8003ac2:	2340      	movmi	r3, #64	; 0x40
 8003ac4:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ac8:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003aca:	bf44      	itt	mi
 8003acc:	2302      	movmi	r3, #2
 8003ace:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ad2:	0636      	lsls	r6, r6, #24
 8003ad4:	d53e      	bpl.n	8003b54 <HAL_PCD_IRQHandler+0x434>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8003ad6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003ad8:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 8003ada:	42b3      	cmp	r3, r6
 8003adc:	d83a      	bhi.n	8003b54 <HAL_PCD_IRQHandler+0x434>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ade:	1af6      	subs	r6, r6, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8003ae0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 8003ae6:	429e      	cmp	r6, r3
 8003ae8:	bf28      	it	cs
 8003aea:	461e      	movcs	r6, r3

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003aec:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003af0:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003af2:	eb03 134b 	add.w	r3, r3, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8003af6:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003af8:	9303      	str	r3, [sp, #12]
 8003afa:	9b03      	ldr	r3, [sp, #12]
 8003afc:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	42b3      	cmp	r3, r6
 8003b04:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003b06:	d923      	bls.n	8003b50 <HAL_PCD_IRQHandler+0x430>
 8003b08:	429f      	cmp	r7, r3
 8003b0a:	d921      	bls.n	8003b50 <HAL_PCD_IRQHandler+0x430>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b0c:	b967      	cbnz	r7, 8003b28 <HAL_PCD_IRQHandler+0x408>
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b0e:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003b10:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b12:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8003b16:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003b1a:	fa02 f20b 	lsl.w	r2, r2, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b1e:	ea23 0302 	bic.w	r3, r3, r2
 8003b22:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 8003b26:	e015      	b.n	8003b54 <HAL_PCD_IRQHandler+0x434>
    len = ep->xfer_len - ep->xfer_count;
 8003b28:	1aff      	subs	r7, r7, r3
 8003b2a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003b2c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8003b2e:	9802      	ldr	r0, [sp, #8]
 8003b30:	429f      	cmp	r7, r3
 8003b32:	bf28      	it	cs
 8003b34:	461f      	movcs	r7, r3
 8003b36:	b2bb      	uxth	r3, r7
 8003b38:	4652      	mov	r2, sl
 8003b3a:	f004 f935 	bl	8007da8 <USB_WritePacket>
    ep->xfer_buff  += len;
 8003b3e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003b40:	443b      	add	r3, r7
 8003b42:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8003b44:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 8003b46:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 8003b48:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 8003b4a:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 8003b4c:	656f      	str	r7, [r5, #84]	; 0x54
 8003b4e:	e7d4      	b.n	8003afa <HAL_PCD_IRQHandler+0x3da>
  if (ep->xfer_len <= ep->xfer_count)
 8003b50:	429f      	cmp	r7, r3
 8003b52:	d9dc      	bls.n	8003b0e <HAL_PCD_IRQHandler+0x3ee>
        ep_intr >>= 1U;
 8003b54:	9b01      	ldr	r3, [sp, #4]
 8003b56:	085b      	lsrs	r3, r3, #1
        epnum++;
 8003b58:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	351c      	adds	r5, #28
 8003b60:	f108 0820 	add.w	r8, r8, #32
 8003b64:	e61c      	b.n	80037a0 <HAL_PCD_IRQHandler+0x80>
        HAL_PCD_ResumeCallback(hpcd);
 8003b66:	4620      	mov	r0, r4
 8003b68:	f01e fbda 	bl	8022320 <HAL_PCD_ResumeCallback>
 8003b6c:	e632      	b.n	80037d4 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f01e fbbe 	bl	80222f0 <HAL_PCD_SuspendCallback>
 8003b74:	e65e      	b.n	8003834 <HAL_PCD_IRQHandler+0x114>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b76:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003b7e:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b80:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b84:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b88:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003b8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b90:	9a00      	ldr	r2, [sp, #0]
 8003b92:	3201      	adds	r2, #1
 8003b94:	9200      	str	r2, [sp, #0]
 8003b96:	3320      	adds	r3, #32
 8003b98:	e660      	b.n	800385c <HAL_PCD_IRQHandler+0x13c>
 8003b9a:	bf00      	nop
 8003b9c:	ff275340 	.word	0xff275340
 8003ba0:	000c34ff 	.word	0x000c34ff
 8003ba4:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8003ba8:	696b      	ldr	r3, [r5, #20]
 8003baa:	f043 030b 	orr.w	r3, r3, #11
 8003bae:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8003bb0:	692b      	ldr	r3, [r5, #16]
 8003bb2:	f043 030b 	orr.w	r3, r3, #11
 8003bb6:	612b      	str	r3, [r5, #16]
 8003bb8:	e666      	b.n	8003888 <HAL_PCD_IRQHandler+0x168>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bba:	4a2f      	ldr	r2, [pc, #188]	; (8003c78 <HAL_PCD_IRQHandler+0x558>)
 8003bbc:	492f      	ldr	r1, [pc, #188]	; (8003c7c <HAL_PCD_IRQHandler+0x55c>)
 8003bbe:	4402      	add	r2, r0
 8003bc0:	428a      	cmp	r2, r1
 8003bc2:	d803      	bhi.n	8003bcc <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003bca:	e68a      	b.n	80038e2 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003bcc:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8003bd0:	492b      	ldr	r1, [pc, #172]	; (8003c80 <HAL_PCD_IRQHandler+0x560>)
 8003bd2:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003bd6:	428a      	cmp	r2, r1
 8003bd8:	d803      	bhi.n	8003be2 <HAL_PCD_IRQHandler+0x4c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8003be0:	e67f      	b.n	80038e2 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003be2:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8003be6:	4927      	ldr	r1, [pc, #156]	; (8003c84 <HAL_PCD_IRQHandler+0x564>)
 8003be8:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8003bec:	428a      	cmp	r2, r1
 8003bee:	d803      	bhi.n	8003bf8 <HAL_PCD_IRQHandler+0x4d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003bf6:	e674      	b.n	80038e2 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <HAL_PCD_IRQHandler+0x568>)
 8003bfa:	4924      	ldr	r1, [pc, #144]	; (8003c8c <HAL_PCD_IRQHandler+0x56c>)
 8003bfc:	4402      	add	r2, r0
 8003bfe:	428a      	cmp	r2, r1
 8003c00:	d803      	bhi.n	8003c0a <HAL_PCD_IRQHandler+0x4ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8003c08:	e66b      	b.n	80038e2 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_PCD_IRQHandler+0x570>)
 8003c0c:	4921      	ldr	r1, [pc, #132]	; (8003c94 <HAL_PCD_IRQHandler+0x574>)
 8003c0e:	4402      	add	r2, r0
 8003c10:	428a      	cmp	r2, r1
 8003c12:	d803      	bhi.n	8003c1c <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8003c1a:	e662      	b.n	80038e2 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c1c:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <HAL_PCD_IRQHandler+0x578>)
 8003c1e:	491f      	ldr	r1, [pc, #124]	; (8003c9c <HAL_PCD_IRQHandler+0x57c>)
 8003c20:	4402      	add	r2, r0
 8003c22:	428a      	cmp	r2, r1
 8003c24:	d803      	bhi.n	8003c2e <HAL_PCD_IRQHandler+0x50e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8003c2c:	e659      	b.n	80038e2 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c2e:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8003c32:	491b      	ldr	r1, [pc, #108]	; (8003ca0 <HAL_PCD_IRQHandler+0x580>)
 8003c34:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8003c38:	428a      	cmp	r2, r1
 8003c3a:	d803      	bhi.n	8003c44 <HAL_PCD_IRQHandler+0x524>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c42:	e64e      	b.n	80038e2 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c44:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <HAL_PCD_IRQHandler+0x584>)
 8003c46:	4918      	ldr	r1, [pc, #96]	; (8003ca8 <HAL_PCD_IRQHandler+0x588>)
 8003c48:	4402      	add	r2, r0
 8003c4a:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	bf94      	ite	ls
 8003c50:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c54:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8003c58:	e643      	b.n	80038e2 <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	f47f ae76 	bne.w	800394c <HAL_PCD_IRQHandler+0x22c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c60:	2208      	movs	r2, #8
 8003c62:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003c66:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c68:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c6a:	f004 f973 	bl	8007f54 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c6e:	fb06 4607 	mla	r6, r6, r7, r4
 8003c72:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003c76:	e664      	b.n	8003942 <HAL_PCD_IRQHandler+0x222>
 8003c78:	ff1b1e40 	.word	0xff1b1e40
 8003c7c:	000f423f 	.word	0x000f423f
 8003c80:	00124f7f 	.word	0x00124f7f
 8003c84:	0013d61f 	.word	0x0013d61f
 8003c88:	fee5b660 	.word	0xfee5b660
 8003c8c:	0016e35f 	.word	0x0016e35f
 8003c90:	feced300 	.word	0xfeced300
 8003c94:	001b773f 	.word	0x001b773f
 8003c98:	feb35bc0 	.word	0xfeb35bc0
 8003c9c:	002191bf 	.word	0x002191bf
 8003ca0:	0038751f 	.word	0x0038751f
 8003ca4:	fe5954e0 	.word	0xfe5954e0
 8003ca8:	00419cdf 	.word	0x00419cdf

08003cac <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003cac:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003cb0:	2a01      	cmp	r2, #1
{
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_PCD_SetAddress+0x24>
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003cbe:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cc2:	6800      	ldr	r0, [r0, #0]
 8003cc4:	f004 f9ac 	bl	8008020 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003cce:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003cd0:	2002      	movs	r0, #2
}
 8003cd2:	bd10      	pop	{r4, pc}

08003cd4 <HAL_PCD_EP_Open>:
{
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003cdc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ce0:	f04f 061c 	mov.w	r6, #28
 8003ce4:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003ce6:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003cea:	bf15      	itete	ne
 8003cec:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8003cf0:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003cf4:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003cf6:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003cfa:	bf15      	itete	ne
 8003cfc:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8003cfe:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8003d00:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8003d04:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8003d08:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003d0a:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8003d0c:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8003d0e:	b2c0      	uxtb	r0, r0
 8003d10:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8003d12:	b102      	cbz	r2, 8003d16 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003d14:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003d16:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003d18:	bf04      	itt	eq
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003d1e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d009      	beq.n	8003d3a <HAL_PCD_EP_Open+0x66>
 8003d26:	2301      	movs	r3, #1
 8003d28:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d2c:	6820      	ldr	r0, [r4, #0]
 8003d2e:	f003 ff55 	bl	8007bdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d32:	2000      	movs	r0, #0
 8003d34:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8003d38:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8003d3a:	2002      	movs	r0, #2
}
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}

08003d3e <HAL_PCD_EP_Close>:
{
 8003d3e:	f001 030f 	and.w	r3, r1, #15
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	b510      	push	{r4, lr}
 8003d46:	4604      	mov	r4, r0
 8003d48:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8003d4a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003d4e:	fb00 4102 	mla	r1, r0, r2, r4
 8003d52:	bf19      	ittee	ne
 8003d54:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003d56:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 8003d5a:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003d5e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003d62:	bf15      	itete	ne
 8003d64:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003d66:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8003d68:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8003d6c:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 8003d70:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003d72:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d009      	beq.n	8003d8e <HAL_PCD_EP_Close+0x50>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d80:	6820      	ldr	r0, [r4, #0]
 8003d82:	f003 ff6d 	bl	8007c60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d86:	2000      	movs	r0, #0
 8003d88:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003d8c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003d8e:	2002      	movs	r0, #2
}
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <HAL_PCD_EP_Receive>:
{
 8003d92:	b538      	push	{r3, r4, r5, lr}
 8003d94:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003d98:	241c      	movs	r4, #28
 8003d9a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003d9e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003da2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003da6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003daa:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003dac:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003db0:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003db4:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 8003db8:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003dbc:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003dbe:	b91d      	cbnz	r5, 8003dc8 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003dc0:	f003 ff80 	bl	8007cc4 <USB_EP0StartXfer>
}
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dc8:	f003 fffe 	bl	8007dc8 <USB_EPStartXfer>
 8003dcc:	e7fa      	b.n	8003dc4 <HAL_PCD_EP_Receive+0x32>

08003dce <HAL_PCD_EP_Transmit>:
{
 8003dce:	b538      	push	{r3, r4, r5, lr}
 8003dd0:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003dd4:	241c      	movs	r4, #28
 8003dd6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003dda:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003dde:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003de0:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003de6:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003de8:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003dea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 8003dee:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003df2:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003df4:	b91d      	cbnz	r5, 8003dfe <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003df6:	f003 ff65 	bl	8007cc4 <USB_EP0StartXfer>
}
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dfe:	f003 ffe3 	bl	8007dc8 <USB_EPStartXfer>
 8003e02:	e7fa      	b.n	8003dfa <HAL_PCD_EP_Transmit+0x2c>

08003e04 <HAL_PCD_EP_SetStall>:
{
 8003e04:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003e06:	6843      	ldr	r3, [r0, #4]
 8003e08:	f001 050f 	and.w	r5, r1, #15
 8003e0c:	429d      	cmp	r5, r3
{
 8003e0e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003e10:	d82d      	bhi.n	8003e6e <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003e12:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e16:	f04f 021c 	mov.w	r2, #28
 8003e1a:	d01e      	beq.n	8003e5a <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8003e1c:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003e20:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8003e24:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003e26:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8003e28:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8003e30:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003e32:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8003e36:	4291      	cmp	r1, r2
 8003e38:	d01b      	beq.n	8003e72 <HAL_PCD_EP_SetStall+0x6e>
 8003e3a:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	f004 f895 	bl	8007f70 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8003e46:	b925      	cbnz	r5, 8003e52 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e48:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	f004 f95d 	bl	800810c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003e52:	2000      	movs	r0, #0
 8003e54:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003e58:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003e5a:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003e5e:	fb02 0101 	mla	r1, r2, r1, r0
 8003e62:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003e64:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003e68:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003e6c:	e7de      	b.n	8003e2c <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003e6e:	2001      	movs	r0, #1
 8003e70:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003e72:	2002      	movs	r0, #2
}
 8003e74:	bd38      	pop	{r3, r4, r5, pc}

08003e76 <HAL_PCD_EP_ClrStall>:
{
 8003e76:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e78:	6843      	ldr	r3, [r0, #4]
 8003e7a:	f001 020f 	and.w	r2, r1, #15
 8003e7e:	429a      	cmp	r2, r3
{
 8003e80:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e82:	d826      	bhi.n	8003ed2 <HAL_PCD_EP_ClrStall+0x5c>
 8003e84:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003e86:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003e8a:	fb03 0102 	mla	r1, r3, r2, r0
 8003e8e:	bf19      	ittee	ne
 8003e90:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003e92:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003e96:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003e9a:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003e9e:	bf14      	ite	ne
 8003ea0:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003ea2:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003ea4:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003ea8:	bf14      	ite	ne
 8003eaa:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003eae:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003eb2:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8003eb4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003eb6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_PCD_EP_ClrStall+0x60>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ec4:	6820      	ldr	r0, [r4, #0]
 8003ec6:	f004 f880 	bl	8007fca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eca:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003ece:	4628      	mov	r0, r5
 8003ed0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003ed6:	2002      	movs	r0, #2
}
 8003ed8:	bd38      	pop	{r3, r4, r5, pc}

08003eda <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003eda:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003edc:	6804      	ldr	r4, [r0, #0]
 8003ede:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003ee0:	b921      	cbnz	r1, 8003eec <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ee6:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003ee8:	2000      	movs	r0, #0
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003eee:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ef0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	1c46      	adds	r6, r0, #1
 8003ef8:	b2c0      	uxtb	r0, r0
 8003efa:	4285      	cmp	r5, r0
 8003efc:	d806      	bhi.n	8003f0c <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003efe:	313f      	adds	r1, #63	; 0x3f
 8003f00:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f08:	6063      	str	r3, [r4, #4]
 8003f0a:	e7ed      	b.n	8003ee8 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f0c:	3040      	adds	r0, #64	; 0x40
 8003f0e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003f12:	6840      	ldr	r0, [r0, #4]
 8003f14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003f18:	4630      	mov	r0, r6
 8003f1a:	e7ec      	b.n	8003ef6 <HAL_PCDEx_SetTxFiFo+0x1c>

08003f1c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003f1c:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003f1e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003f20:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003f22:	4770      	bx	lr

08003f24 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f24:	6802      	ldr	r2, [r0, #0]
{
 8003f26:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003f28:	2101      	movs	r1, #1
 8003f2a:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f34:	6993      	ldr	r3, [r2, #24]
 8003f36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f3a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f3c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f42:	f043 0303 	orr.w	r3, r3, #3
 8003f46:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003f48:	4770      	bx	lr

08003f4a <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f4a:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003f52:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f58:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	4770      	bx	lr
	...

08003f60 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_PWREx_GetVoltageRange+0x20>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003f68:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003f6c:	d007      	beq.n	8003f7e <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f72:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003f76:	bf14      	ite	ne
 8003f78:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003f7c:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003f7e:	4770      	bx	lr
 8003f80:	40007000 	.word	0x40007000

08003f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f84:	4b29      	ldr	r3, [pc, #164]	; (800402c <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f86:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f88:	bb28      	cbnz	r0, 8003fd6 <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f8a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003f8e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f92:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f9e:	d119      	bne.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003fac:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003fae:	6811      	ldr	r1, [r2, #0]
 8003fb0:	2232      	movs	r2, #50	; 0x32
 8003fb2:	434a      	muls	r2, r1
 8003fb4:	491f      	ldr	r1, [pc, #124]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003fb6:	fbb2 f2f1 	udiv	r2, r2, r1
 8003fba:	4619      	mov	r1, r3
 8003fbc:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fbe:	6958      	ldr	r0, [r3, #20]
 8003fc0:	0540      	lsls	r0, r0, #21
 8003fc2:	d500      	bpl.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x42>
 8003fc4:	b922      	cbnz	r2, 8003fd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fc6:	694b      	ldr	r3, [r1, #20]
 8003fc8:	055b      	lsls	r3, r3, #21
 8003fca:	d52d      	bpl.n	8004028 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8003fcc:	2003      	movs	r0, #3
 8003fce:	4770      	bx	lr
        wait_loop_index--;
 8003fd0:	3a01      	subs	r2, #1
 8003fd2:	e7f4      	b.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003fd4:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fd6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003fda:	d120      	bne.n	800401e <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fdc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003fe0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ff0:	d11a      	bne.n	8004028 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ffe:	4a0c      	ldr	r2, [pc, #48]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004000:	6811      	ldr	r1, [r2, #0]
 8004002:	2232      	movs	r2, #50	; 0x32
 8004004:	434a      	muls	r2, r1
 8004006:	490b      	ldr	r1, [pc, #44]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004008:	fbb2 f2f1 	udiv	r2, r2, r1
 800400c:	4619      	mov	r1, r3
 800400e:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004010:	6958      	ldr	r0, [r3, #20]
 8004012:	0540      	lsls	r0, r0, #21
 8004014:	d5d7      	bpl.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x42>
 8004016:	2a00      	cmp	r2, #0
 8004018:	d0d5      	beq.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 800401a:	3a01      	subs	r2, #1
 800401c:	e7f8      	b.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800401e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8004022:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004026:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004028:	2000      	movs	r0, #0
}
 800402a:	4770      	bx	lr
 800402c:	40007000 	.word	0x40007000
 8004030:	20000a50 	.word	0x20000a50
 8004034:	000f4240 	.word	0x000f4240

08004038 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004038:	4a02      	ldr	r2, [pc, #8]	; (8004044 <HAL_PWREx_EnableVddUSB+0xc>)
 800403a:	6853      	ldr	r3, [r2, #4]
 800403c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004040:	6053      	str	r3, [r2, #4]
 8004042:	4770      	bx	lr
 8004044:	40007000 	.word	0x40007000

08004048 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004048:	4a02      	ldr	r2, [pc, #8]	; (8004054 <HAL_PWREx_EnableVddIO2+0xc>)
 800404a:	6853      	ldr	r3, [r2, #4]
 800404c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004050:	6053      	str	r3, [r2, #4]
 8004052:	4770      	bx	lr
 8004054:	40007000 	.word	0x40007000

08004058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004058:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800405a:	4d1c      	ldr	r5, [pc, #112]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0x74>)
 800405c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800405e:	00da      	lsls	r2, r3, #3
{
 8004060:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004062:	d518      	bpl.n	8004096 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004064:	f7ff ff7c 	bl	8003f60 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004068:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800406c:	d123      	bne.n	80040b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800406e:	2c80      	cmp	r4, #128	; 0x80
 8004070:	d928      	bls.n	80040c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004072:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004074:	bf8c      	ite	hi
 8004076:	2002      	movhi	r0, #2
 8004078:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800407a:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800407c:	6813      	ldr	r3, [r2, #0]
 800407e:	f023 030f 	bic.w	r3, r3, #15
 8004082:	4303      	orrs	r3, r0
 8004084:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004086:	6813      	ldr	r3, [r2, #0]
 8004088:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800408c:	1a18      	subs	r0, r3, r0
 800408e:	bf18      	it	ne
 8004090:	2001      	movne	r0, #1
 8004092:	b003      	add	sp, #12
 8004094:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409c:	65ab      	str	r3, [r5, #88]	; 0x58
 800409e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80040a8:	f7ff ff5a 	bl	8003f60 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80040ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b2:	65ab      	str	r3, [r5, #88]	; 0x58
 80040b4:	e7d8      	b.n	8004068 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 80040b6:	2c7f      	cmp	r4, #127	; 0x7f
 80040b8:	d806      	bhi.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 80040ba:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80040be:	4258      	negs	r0, r3
 80040c0:	4158      	adcs	r0, r3
 80040c2:	e7da      	b.n	800407a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040c4:	2000      	movs	r0, #0
 80040c6:	e7d8      	b.n	800407a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80040c8:	2002      	movs	r0, #2
 80040ca:	e7d6      	b.n	800407a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40022000 	.word	0x40022000

080040d4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d4:	4b23      	ldr	r3, [pc, #140]	; (8004164 <HAL_RCC_GetSysClockFreq+0x90>)
 80040d6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040da:	f012 020c 	ands.w	r2, r2, #12
 80040de:	d005      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x18>
 80040e0:	2a0c      	cmp	r2, #12
 80040e2:	d115      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040e8:	2901      	cmp	r1, #1
 80040ea:	d118      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040ec:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80040ee:	481e      	ldr	r0, [pc, #120]	; (8004168 <HAL_RCC_GetSysClockFreq+0x94>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040f0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040f2:	bf55      	itete	pl
 80040f4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040f8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040fa:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040fe:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8004102:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004106:	b112      	cbz	r2, 800410e <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004108:	2a0c      	cmp	r2, #12
 800410a:	d009      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x4c>
 800410c:	2000      	movs	r0, #0
}
 800410e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004110:	2a04      	cmp	r2, #4
 8004112:	d024      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x8a>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004114:	2a08      	cmp	r2, #8
 8004116:	4815      	ldr	r0, [pc, #84]	; (800416c <HAL_RCC_GetSysClockFreq+0x98>)
 8004118:	bf18      	it	ne
 800411a:	2000      	movne	r0, #0
 800411c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800411e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004120:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004122:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004124:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004128:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 800412c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800412e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8004132:	d005      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x6c>
 8004134:	2903      	cmp	r1, #3
 8004136:	d003      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x6c>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004138:	68d9      	ldr	r1, [r3, #12]
 800413a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800413e:	e003      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004140:	68d9      	ldr	r1, [r3, #12]
 8004142:	480a      	ldr	r0, [pc, #40]	; (800416c <HAL_RCC_GetSysClockFreq+0x98>)
 8004144:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004148:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800414a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800414e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004152:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004154:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004156:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004158:	fbb0 f0f3 	udiv	r0, r0, r3
 800415c:	4770      	bx	lr
 800415e:	4803      	ldr	r0, [pc, #12]	; (800416c <HAL_RCC_GetSysClockFreq+0x98>)
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	08034234 	.word	0x08034234
 800416c:	00f42400 	.word	0x00f42400

08004170 <HAL_RCC_OscConfig>:
{
 8004170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8004174:	4605      	mov	r5, r0
 8004176:	b908      	cbnz	r0, 800417c <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8004178:	2001      	movs	r0, #1
 800417a:	e046      	b.n	800420a <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800417c:	4ca8      	ldr	r4, [pc, #672]	; (8004420 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800417e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004180:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004182:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004184:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004186:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800418e:	d572      	bpl.n	8004276 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004190:	b11e      	cbz	r6, 800419a <HAL_RCC_OscConfig+0x2a>
 8004192:	2e0c      	cmp	r6, #12
 8004194:	d151      	bne.n	800423a <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004196:	2f01      	cmp	r7, #1
 8004198:	d14f      	bne.n	800423a <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	0799      	lsls	r1, r3, #30
 800419e:	d502      	bpl.n	80041a6 <HAL_RCC_OscConfig+0x36>
 80041a0:	69ab      	ldr	r3, [r5, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0e8      	beq.n	8004178 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	6a28      	ldr	r0, [r5, #32]
 80041aa:	071a      	lsls	r2, r3, #28
 80041ac:	bf56      	itet	pl
 80041ae:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80041b2:	6823      	ldrmi	r3, [r4, #0]
 80041b4:	091b      	lsrpl	r3, r3, #4
 80041b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ba:	4283      	cmp	r3, r0
 80041bc:	d228      	bcs.n	8004210 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041be:	f7ff ff4b 	bl	8004058 <RCC_SetFlashLatencyFromMSIRange>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d1d8      	bne.n	8004178 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	f043 0308 	orr.w	r3, r3, #8
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	6a2a      	ldr	r2, [r5, #32]
 80041d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041d6:	4313      	orrs	r3, r2
 80041d8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	69ea      	ldr	r2, [r5, #28]
 80041de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80041e6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041e8:	f7ff ff74 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 80041ec:	68a3      	ldr	r3, [r4, #8]
 80041ee:	4a8d      	ldr	r2, [pc, #564]	; (8004424 <HAL_RCC_OscConfig+0x2b4>)
 80041f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80041f4:	5cd3      	ldrb	r3, [r2, r3]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	40d8      	lsrs	r0, r3
 80041fc:	4b8a      	ldr	r3, [pc, #552]	; (8004428 <HAL_RCC_OscConfig+0x2b8>)
 80041fe:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004200:	2000      	movs	r0, #0
 8004202:	f7fc fedd 	bl	8000fc0 <HAL_InitTick>
        if(status != HAL_OK)
 8004206:	2800      	cmp	r0, #0
 8004208:	d035      	beq.n	8004276 <HAL_RCC_OscConfig+0x106>
}
 800420a:	b003      	add	sp, #12
 800420c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	f043 0308 	orr.w	r3, r3, #8
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421e:	4303      	orrs	r3, r0
 8004220:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004222:	6863      	ldr	r3, [r4, #4]
 8004224:	69ea      	ldr	r2, [r5, #28]
 8004226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800422a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800422e:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004230:	f7ff ff12 	bl	8004058 <RCC_SetFlashLatencyFromMSIRange>
 8004234:	2800      	cmp	r0, #0
 8004236:	d0d7      	beq.n	80041e8 <HAL_RCC_OscConfig+0x78>
 8004238:	e79e      	b.n	8004178 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800423a:	69ab      	ldr	r3, [r5, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d03a      	beq.n	80042b6 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004248:	f7fc feea 	bl	8001020 <HAL_GetTick>
 800424c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	079b      	lsls	r3, r3, #30
 8004252:	d528      	bpl.n	80042a6 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	f043 0308 	orr.w	r3, r3, #8
 800425a:	6023      	str	r3, [r4, #0]
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	6a2a      	ldr	r2, [r5, #32]
 8004260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004264:	4313      	orrs	r3, r2
 8004266:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004268:	6863      	ldr	r3, [r4, #4]
 800426a:	69ea      	ldr	r2, [r5, #28]
 800426c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004270:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004274:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004276:	682b      	ldr	r3, [r5, #0]
 8004278:	07d9      	lsls	r1, r3, #31
 800427a:	d42d      	bmi.n	80042d8 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	079a      	lsls	r2, r3, #30
 8004280:	d46b      	bmi.n	800435a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	682b      	ldr	r3, [r5, #0]
 8004284:	0719      	lsls	r1, r3, #28
 8004286:	f100 80a0 	bmi.w	80043ca <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	075a      	lsls	r2, r3, #29
 800428e:	f100 80cd 	bmi.w	800442c <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	069a      	lsls	r2, r3, #26
 8004296:	f100 8136 	bmi.w	8004506 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800429a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800429c:	2b00      	cmp	r3, #0
 800429e:	f040 815c 	bne.w	800455a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80042a2:	2000      	movs	r0, #0
 80042a4:	e7b1      	b.n	800420a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a6:	f7fc febb 	bl	8001020 <HAL_GetTick>
 80042aa:	eba0 0008 	sub.w	r0, r0, r8
 80042ae:	2802      	cmp	r0, #2
 80042b0:	d9cd      	bls.n	800424e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 80042b2:	2003      	movs	r0, #3
 80042b4:	e7a9      	b.n	800420a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042be:	f7fc feaf 	bl	8001020 <HAL_GetTick>
 80042c2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	0798      	lsls	r0, r3, #30
 80042c8:	d5d5      	bpl.n	8004276 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ca:	f7fc fea9 	bl	8001020 <HAL_GetTick>
 80042ce:	eba0 0008 	sub.w	r0, r0, r8
 80042d2:	2802      	cmp	r0, #2
 80042d4:	d9f6      	bls.n	80042c4 <HAL_RCC_OscConfig+0x154>
 80042d6:	e7ec      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042d8:	2e08      	cmp	r6, #8
 80042da:	d003      	beq.n	80042e4 <HAL_RCC_OscConfig+0x174>
 80042dc:	2e0c      	cmp	r6, #12
 80042de:	d108      	bne.n	80042f2 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80042e0:	2f03      	cmp	r7, #3
 80042e2:	d106      	bne.n	80042f2 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	039b      	lsls	r3, r3, #14
 80042e8:	d5c8      	bpl.n	800427c <HAL_RCC_OscConfig+0x10c>
 80042ea:	686b      	ldr	r3, [r5, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1c5      	bne.n	800427c <HAL_RCC_OscConfig+0x10c>
 80042f0:	e742      	b.n	8004178 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f2:	686b      	ldr	r3, [r5, #4]
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d110      	bne.n	800431c <HAL_RCC_OscConfig+0x1ac>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004300:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004302:	f7fc fe8d 	bl	8001020 <HAL_GetTick>
 8004306:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	0398      	lsls	r0, r3, #14
 800430c:	d4b6      	bmi.n	800427c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800430e:	f7fc fe87 	bl	8001020 <HAL_GetTick>
 8004312:	eba0 0008 	sub.w	r0, r0, r8
 8004316:	2864      	cmp	r0, #100	; 0x64
 8004318:	d9f6      	bls.n	8004308 <HAL_RCC_OscConfig+0x198>
 800431a:	e7ca      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004320:	d104      	bne.n	800432c <HAL_RCC_OscConfig+0x1bc>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	e7e6      	b.n	80042fa <HAL_RCC_OscConfig+0x18a>
 800432c:	6822      	ldr	r2, [r4, #0]
 800432e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004332:	6022      	str	r2, [r4, #0]
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800433a:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e0      	bne.n	8004302 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8004340:	f7fc fe6e 	bl	8001020 <HAL_GetTick>
 8004344:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	0399      	lsls	r1, r3, #14
 800434a:	d597      	bpl.n	800427c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fc fe68 	bl	8001020 <HAL_GetTick>
 8004350:	eba0 0008 	sub.w	r0, r0, r8
 8004354:	2864      	cmp	r0, #100	; 0x64
 8004356:	d9f6      	bls.n	8004346 <HAL_RCC_OscConfig+0x1d6>
 8004358:	e7ab      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800435a:	2e04      	cmp	r6, #4
 800435c:	d003      	beq.n	8004366 <HAL_RCC_OscConfig+0x1f6>
 800435e:	2e0c      	cmp	r6, #12
 8004360:	d110      	bne.n	8004384 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8004362:	2f02      	cmp	r7, #2
 8004364:	d10e      	bne.n	8004384 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	055a      	lsls	r2, r3, #21
 800436a:	d503      	bpl.n	8004374 <HAL_RCC_OscConfig+0x204>
 800436c:	68eb      	ldr	r3, [r5, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f43f af02 	beq.w	8004178 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	692a      	ldr	r2, [r5, #16]
 8004378:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800437c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004380:	6063      	str	r3, [r4, #4]
 8004382:	e77e      	b.n	8004282 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004384:	68eb      	ldr	r3, [r5, #12]
 8004386:	b17b      	cbz	r3, 80043a8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004390:	f7fc fe46 	bl	8001020 <HAL_GetTick>
 8004394:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	055b      	lsls	r3, r3, #21
 800439a:	d4eb      	bmi.n	8004374 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439c:	f7fc fe40 	bl	8001020 <HAL_GetTick>
 80043a0:	1bc0      	subs	r0, r0, r7
 80043a2:	2802      	cmp	r0, #2
 80043a4:	d9f7      	bls.n	8004396 <HAL_RCC_OscConfig+0x226>
 80043a6:	e784      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043b0:	f7fc fe36 	bl	8001020 <HAL_GetTick>
 80043b4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	0558      	lsls	r0, r3, #21
 80043ba:	f57f af62 	bpl.w	8004282 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043be:	f7fc fe2f 	bl	8001020 <HAL_GetTick>
 80043c2:	1bc0      	subs	r0, r0, r7
 80043c4:	2802      	cmp	r0, #2
 80043c6:	d9f6      	bls.n	80043b6 <HAL_RCC_OscConfig+0x246>
 80043c8:	e773      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ca:	696b      	ldr	r3, [r5, #20]
 80043cc:	b19b      	cbz	r3, 80043f6 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80043ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80043da:	f7fc fe21 	bl	8001020 <HAL_GetTick>
 80043de:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80043e4:	079b      	lsls	r3, r3, #30
 80043e6:	f53f af50 	bmi.w	800428a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ea:	f7fc fe19 	bl	8001020 <HAL_GetTick>
 80043ee:	1bc0      	subs	r0, r0, r7
 80043f0:	2802      	cmp	r0, #2
 80043f2:	d9f5      	bls.n	80043e0 <HAL_RCC_OscConfig+0x270>
 80043f4:	e75d      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 80043f6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004402:	f7fc fe0d 	bl	8001020 <HAL_GetTick>
 8004406:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004408:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800440c:	0798      	lsls	r0, r3, #30
 800440e:	f57f af3c 	bpl.w	800428a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004412:	f7fc fe05 	bl	8001020 <HAL_GetTick>
 8004416:	1bc0      	subs	r0, r0, r7
 8004418:	2802      	cmp	r0, #2
 800441a:	d9f5      	bls.n	8004408 <HAL_RCC_OscConfig+0x298>
 800441c:	e749      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	0803421b 	.word	0x0803421b
 8004428:	20000a50 	.word	0x20000a50
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800442c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800442e:	00d9      	lsls	r1, r3, #3
 8004430:	d429      	bmi.n	8004486 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004438:	65a3      	str	r3, [r4, #88]	; 0x58
 800443a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004444:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004448:	4f71      	ldr	r7, [pc, #452]	; (8004610 <HAL_RCC_OscConfig+0x4a0>)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	05da      	lsls	r2, r3, #23
 800444e:	d51d      	bpl.n	800448c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004450:	68ab      	ldr	r3, [r5, #8]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d12b      	bne.n	80044ae <HAL_RCC_OscConfig+0x33e>
 8004456:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004462:	f7fc fddd 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800446a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004470:	0798      	lsls	r0, r3, #30
 8004472:	d542      	bpl.n	80044fa <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8004474:	f1b8 0f00 	cmp.w	r8, #0
 8004478:	f43f af0b 	beq.w	8004292 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 800447c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800447e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004482:	65a3      	str	r3, [r4, #88]	; 0x58
 8004484:	e705      	b.n	8004292 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8004486:	f04f 0800 	mov.w	r8, #0
 800448a:	e7dd      	b.n	8004448 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004492:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004494:	f7fc fdc4 	bl	8001020 <HAL_GetTick>
 8004498:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	05db      	lsls	r3, r3, #23
 800449e:	d4d7      	bmi.n	8004450 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7fc fdbe 	bl	8001020 <HAL_GetTick>
 80044a4:	eba0 0009 	sub.w	r0, r0, r9
 80044a8:	2802      	cmp	r0, #2
 80044aa:	d9f6      	bls.n	800449a <HAL_RCC_OscConfig+0x32a>
 80044ac:	e701      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d106      	bne.n	80044c0 <HAL_RCC_OscConfig+0x350>
 80044b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80044be:	e7ca      	b.n	8004456 <HAL_RCC_OscConfig+0x2e6>
 80044c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80044cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80044d0:	f022 0204 	bic.w	r2, r2, #4
 80044d4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1c2      	bne.n	8004462 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 80044dc:	f7fc fda0 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80044e4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80044ea:	0799      	lsls	r1, r3, #30
 80044ec:	d5c2      	bpl.n	8004474 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f7fc fd97 	bl	8001020 <HAL_GetTick>
 80044f2:	1bc0      	subs	r0, r0, r7
 80044f4:	4548      	cmp	r0, r9
 80044f6:	d9f6      	bls.n	80044e6 <HAL_RCC_OscConfig+0x376>
 80044f8:	e6db      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fa:	f7fc fd91 	bl	8001020 <HAL_GetTick>
 80044fe:	1bc0      	subs	r0, r0, r7
 8004500:	4548      	cmp	r0, r9
 8004502:	d9b3      	bls.n	800446c <HAL_RCC_OscConfig+0x2fc>
 8004504:	e6d5      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004508:	b19b      	cbz	r3, 8004532 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 800450a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004516:	f7fc fd83 	bl	8001020 <HAL_GetTick>
 800451a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800451c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004520:	079b      	lsls	r3, r3, #30
 8004522:	f53f aeba 	bmi.w	800429a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004526:	f7fc fd7b 	bl	8001020 <HAL_GetTick>
 800452a:	1bc0      	subs	r0, r0, r7
 800452c:	2802      	cmp	r0, #2
 800452e:	d9f5      	bls.n	800451c <HAL_RCC_OscConfig+0x3ac>
 8004530:	e6bf      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8004532:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800453e:	f7fc fd6f 	bl	8001020 <HAL_GetTick>
 8004542:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004544:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004548:	0798      	lsls	r0, r3, #30
 800454a:	f57f aea6 	bpl.w	800429a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800454e:	f7fc fd67 	bl	8001020 <HAL_GetTick>
 8004552:	1bc0      	subs	r0, r0, r7
 8004554:	2802      	cmp	r0, #2
 8004556:	d9f5      	bls.n	8004544 <HAL_RCC_OscConfig+0x3d4>
 8004558:	e6ab      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800455a:	2e0c      	cmp	r6, #12
 800455c:	f43f ae0c 	beq.w	8004178 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004560:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004568:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800456a:	d136      	bne.n	80045da <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 800456c:	f7fc fd58 	bl	8001020 <HAL_GetTick>
 8004570:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	0199      	lsls	r1, r3, #6
 8004576:	d42a      	bmi.n	80045ce <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004578:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800457a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800457c:	06db      	lsls	r3, r3, #27
 800457e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004582:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004584:	4313      	orrs	r3, r2
 8004586:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004588:	3a01      	subs	r2, #1
 800458a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800458e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004590:	0852      	lsrs	r2, r2, #1
 8004592:	3a01      	subs	r2, #1
 8004594:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004598:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800459a:	0852      	lsrs	r2, r2, #1
 800459c:	3a01      	subs	r2, #1
 800459e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80045a2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045aa:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045ac:	68e3      	ldr	r3, [r4, #12]
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80045b4:	f7fc fd34 	bl	8001020 <HAL_GetTick>
 80045b8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	019a      	lsls	r2, r3, #6
 80045be:	f53f ae70 	bmi.w	80042a2 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fc fd2d 	bl	8001020 <HAL_GetTick>
 80045c6:	1b40      	subs	r0, r0, r5
 80045c8:	2802      	cmp	r0, #2
 80045ca:	d9f6      	bls.n	80045ba <HAL_RCC_OscConfig+0x44a>
 80045cc:	e671      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ce:	f7fc fd27 	bl	8001020 <HAL_GetTick>
 80045d2:	1b80      	subs	r0, r0, r6
 80045d4:	2802      	cmp	r0, #2
 80045d6:	d9cc      	bls.n	8004572 <HAL_RCC_OscConfig+0x402>
 80045d8:	e66b      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045e0:	bf02      	ittt	eq
 80045e2:	68e3      	ldreq	r3, [r4, #12]
 80045e4:	f023 0303 	biceq.w	r3, r3, #3
 80045e8:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045ea:	68e3      	ldr	r3, [r4, #12]
 80045ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80045f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80045f6:	f7fc fd13 	bl	8001020 <HAL_GetTick>
 80045fa:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	019b      	lsls	r3, r3, #6
 8004600:	f57f ae4f 	bpl.w	80042a2 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004604:	f7fc fd0c 	bl	8001020 <HAL_GetTick>
 8004608:	1b40      	subs	r0, r0, r5
 800460a:	2802      	cmp	r0, #2
 800460c:	d9f6      	bls.n	80045fc <HAL_RCC_OscConfig+0x48c>
 800460e:	e650      	b.n	80042b2 <HAL_RCC_OscConfig+0x142>
 8004610:	40007000 	.word	0x40007000

08004614 <HAL_RCC_ClockConfig>:
{
 8004614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004618:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800461a:	4605      	mov	r5, r0
 800461c:	b910      	cbnz	r0, 8004624 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800461e:	2001      	movs	r0, #1
 8004620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004624:	4a71      	ldr	r2, [pc, #452]	; (80047ec <HAL_RCC_ClockConfig+0x1d8>)
 8004626:	6813      	ldr	r3, [r2, #0]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	428b      	cmp	r3, r1
 800462e:	d334      	bcc.n	800469a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004630:	6829      	ldr	r1, [r5, #0]
 8004632:	f011 0701 	ands.w	r7, r1, #1
 8004636:	d13b      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004638:	682a      	ldr	r2, [r5, #0]
 800463a:	0791      	lsls	r1, r2, #30
 800463c:	f140 80bb 	bpl.w	80047b6 <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004640:	496b      	ldr	r1, [pc, #428]	; (80047f0 <HAL_RCC_ClockConfig+0x1dc>)
 8004642:	68a8      	ldr	r0, [r5, #8]
 8004644:	688b      	ldr	r3, [r1, #8]
 8004646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800464a:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800464c:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800464e:	4967      	ldr	r1, [pc, #412]	; (80047ec <HAL_RCC_ClockConfig+0x1d8>)
 8004650:	680b      	ldr	r3, [r1, #0]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	429e      	cmp	r6, r3
 8004658:	f0c0 80b5 	bcc.w	80047c6 <HAL_RCC_ClockConfig+0x1b2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465c:	f012 0f04 	tst.w	r2, #4
 8004660:	4c63      	ldr	r4, [pc, #396]	; (80047f0 <HAL_RCC_ClockConfig+0x1dc>)
 8004662:	f040 80bc 	bne.w	80047de <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004666:	0713      	lsls	r3, r2, #28
 8004668:	d506      	bpl.n	8004678 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800466a:	68a3      	ldr	r3, [r4, #8]
 800466c:	692a      	ldr	r2, [r5, #16]
 800466e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004672:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004676:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004678:	f7ff fd2c 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 800467c:	68a3      	ldr	r3, [r4, #8]
 800467e:	4a5d      	ldr	r2, [pc, #372]	; (80047f4 <HAL_RCC_ClockConfig+0x1e0>)
 8004680:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004684:	5cd3      	ldrb	r3, [r2, r3]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	40d8      	lsrs	r0, r3
 800468c:	4b5a      	ldr	r3, [pc, #360]	; (80047f8 <HAL_RCC_ClockConfig+0x1e4>)
 800468e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004690:	2000      	movs	r0, #0
}
 8004692:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004696:	f7fc bc93 	b.w	8000fc0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469a:	6813      	ldr	r3, [r2, #0]
 800469c:	f023 030f 	bic.w	r3, r3, #15
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a4:	6813      	ldr	r3, [r2, #0]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	4299      	cmp	r1, r3
 80046ac:	d1b7      	bne.n	800461e <HAL_RCC_ClockConfig+0xa>
 80046ae:	e7bf      	b.n	8004630 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b0:	686b      	ldr	r3, [r5, #4]
 80046b2:	4c4f      	ldr	r4, [pc, #316]	; (80047f0 <HAL_RCC_ClockConfig+0x1dc>)
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d168      	bne.n	800478a <HAL_RCC_ClockConfig+0x176>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	019b      	lsls	r3, r3, #6
 80046bc:	d5af      	bpl.n	800461e <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d11e      	bne.n	8004706 <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046c8:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046ca:	4a4c      	ldr	r2, [pc, #304]	; (80047fc <HAL_RCC_ClockConfig+0x1e8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046cc:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046ce:	bf55      	itete	pl
 80046d0:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046d4:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046d6:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046da:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 80046de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046e2:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e4:	68e3      	ldr	r3, [r4, #12]
 80046e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80046ea:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ec:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d00a      	beq.n	800470a <HAL_RCC_ClockConfig+0xf6>
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d008      	beq.n	800470a <HAL_RCC_ClockConfig+0xf6>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f8:	fbb2 f3f0 	udiv	r3, r2, r0
 80046fc:	68e7      	ldr	r7, [r4, #12]
 80046fe:	f3c7 2706 	ubfx	r7, r7, #8, #7
 8004702:	437b      	muls	r3, r7
 8004704:	e008      	b.n	8004718 <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 8004706:	2200      	movs	r2, #0
 8004708:	e7eb      	b.n	80046e2 <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470a:	68e2      	ldr	r2, [r4, #12]
 800470c:	4b3c      	ldr	r3, [pc, #240]	; (8004800 <HAL_RCC_ClockConfig+0x1ec>)
 800470e:	fbb3 f3f0 	udiv	r3, r3, r0
 8004712:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004716:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004718:	68e2      	ldr	r2, [r4, #12]
 800471a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800471e:	3201      	adds	r2, #1
 8004720:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 8004722:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004726:	4a37      	ldr	r2, [pc, #220]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d81c      	bhi.n	8004766 <HAL_RCC_ClockConfig+0x152>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800472c:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800472e:	68a3      	ldr	r3, [r4, #8]
 8004730:	686a      	ldr	r2, [r5, #4]
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	4313      	orrs	r3, r2
 8004738:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800473a:	f7fc fc71 	bl	8001020 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800473e:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004742:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004744:	68a3      	ldr	r3, [r4, #8]
 8004746:	686a      	ldr	r2, [r5, #4]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004750:	f43f af72 	beq.w	8004638 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004754:	f7fc fc64 	bl	8001020 <HAL_GetTick>
 8004758:	eba0 0008 	sub.w	r0, r0, r8
 800475c:	4548      	cmp	r0, r9
 800475e:	d9f1      	bls.n	8004744 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8004760:	2003      	movs	r0, #3
}
 8004762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004766:	68a3      	ldr	r3, [r4, #8]
 8004768:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0x16a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 800477a:	2780      	movs	r7, #128	; 0x80
 800477c:	e7d7      	b.n	800472e <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800477e:	0788      	lsls	r0, r1, #30
 8004780:	d5d4      	bpl.n	800472c <HAL_RCC_ClockConfig+0x118>
 8004782:	68ab      	ldr	r3, [r5, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1d1      	bne.n	800472c <HAL_RCC_ClockConfig+0x118>
 8004788:	e7f1      	b.n	800476e <HAL_RCC_ClockConfig+0x15a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478a:	2b02      	cmp	r3, #2
 800478c:	d10a      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x190>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004794:	f43f af43 	beq.w	800461e <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004798:	f7ff fc9c 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 800479e:	4298      	cmp	r0, r3
 80047a0:	d9c4      	bls.n	800472c <HAL_RCC_ClockConfig+0x118>
 80047a2:	e7e4      	b.n	800476e <HAL_RCC_ClockConfig+0x15a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047a4:	b91b      	cbnz	r3, 80047ae <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	f013 0f02 	tst.w	r3, #2
 80047ac:	e7f2      	b.n	8004794 <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80047b4:	e7ee      	b.n	8004794 <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 80047b6:	2f80      	cmp	r7, #128	; 0x80
 80047b8:	f47f af49 	bne.w	800464e <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047bc:	490c      	ldr	r1, [pc, #48]	; (80047f0 <HAL_RCC_ClockConfig+0x1dc>)
 80047be:	688b      	ldr	r3, [r1, #8]
 80047c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047c4:	e742      	b.n	800464c <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	680b      	ldr	r3, [r1, #0]
 80047c8:	f023 030f 	bic.w	r3, r3, #15
 80047cc:	4333      	orrs	r3, r6
 80047ce:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d0:	680b      	ldr	r3, [r1, #0]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	429e      	cmp	r6, r3
 80047d8:	f47f af21 	bne.w	800461e <HAL_RCC_ClockConfig+0xa>
 80047dc:	e73e      	b.n	800465c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047de:	68a3      	ldr	r3, [r4, #8]
 80047e0:	68e9      	ldr	r1, [r5, #12]
 80047e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047e6:	430b      	orrs	r3, r1
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	e73c      	b.n	8004666 <HAL_RCC_ClockConfig+0x52>
 80047ec:	40022000 	.word	0x40022000
 80047f0:	40021000 	.word	0x40021000
 80047f4:	0803421b 	.word	0x0803421b
 80047f8:	20000a50 	.word	0x20000a50
 80047fc:	08034234 	.word	0x08034234
 8004800:	00f42400 	.word	0x00f42400
 8004804:	04c4b400 	.word	0x04c4b400

08004808 <HAL_RCC_GetHCLKFreq>:
}
 8004808:	4b01      	ldr	r3, [pc, #4]	; (8004810 <HAL_RCC_GetHCLKFreq+0x8>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000a50 	.word	0x20000a50

08004814 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004816:	4a06      	ldr	r2, [pc, #24]	; (8004830 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	4a04      	ldr	r2, [pc, #16]	; (8004834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004822:	6810      	ldr	r0, [r2, #0]
 8004824:	f003 031f 	and.w	r3, r3, #31
}
 8004828:	40d8      	lsrs	r0, r3
 800482a:	4770      	bx	lr
 800482c:	40021000 	.word	0x40021000
 8004830:	0803422b 	.word	0x0803422b
 8004834:	20000a50 	.word	0x20000a50

08004838 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK2Freq+0x18>)
 800483a:	4a06      	ldr	r2, [pc, #24]	; (8004854 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004842:	5cd3      	ldrb	r3, [r2, r3]
 8004844:	4a04      	ldr	r2, [pc, #16]	; (8004858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004846:	6810      	ldr	r0, [r2, #0]
 8004848:	f003 031f 	and.w	r3, r3, #31
}
 800484c:	40d8      	lsrs	r0, r3
 800484e:	4770      	bx	lr
 8004850:	40021000 	.word	0x40021000
 8004854:	0803422b 	.word	0x0803422b
 8004858:	20000a50 	.word	0x20000a50

0800485c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800485e:	4b3f      	ldr	r3, [pc, #252]	; (800495c <RCCEx_PLLSAI1_Config+0x100>)
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	f012 0f03 	tst.w	r2, #3
{
 8004866:	4605      	mov	r5, r0
 8004868:	460e      	mov	r6, r1
 800486a:	461c      	mov	r4, r3
 800486c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800486e:	d022      	beq.n	80048b6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	4283      	cmp	r3, r0
 8004878:	d130      	bne.n	80048dc <RCCEx_PLLSAI1_Config+0x80>
       ||
 800487a:	b37b      	cbz	r3, 80048dc <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004882:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fc fbcc 	bl	8001020 <HAL_GetTick>
 8004888:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	011a      	lsls	r2, r3, #4
 800488e:	d42e      	bmi.n	80048ee <RCCEx_PLLSAI1_Config+0x92>
 8004890:	68af      	ldr	r7, [r5, #8]
 8004892:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004894:	b396      	cbz	r6, 80048fc <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004896:	2e01      	cmp	r6, #1
 8004898:	d14c      	bne.n	8004934 <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800489a:	6922      	ldr	r2, [r4, #16]
 800489c:	4930      	ldr	r1, [pc, #192]	; (8004960 <RCCEx_PLLSAI1_Config+0x104>)
 800489e:	4011      	ands	r1, r2
 80048a0:	692a      	ldr	r2, [r5, #16]
 80048a2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80048a6:	3b01      	subs	r3, #1
 80048a8:	0852      	lsrs	r2, r2, #1
 80048aa:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 80048ae:	3a01      	subs	r2, #1
 80048b0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80048b4:	e02d      	b.n	8004912 <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 80048b6:	2802      	cmp	r0, #2
 80048b8:	d00c      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x78>
 80048ba:	2803      	cmp	r0, #3
 80048bc:	d010      	beq.n	80048e0 <RCCEx_PLLSAI1_Config+0x84>
 80048be:	2801      	cmp	r0, #1
 80048c0:	d10c      	bne.n	80048dc <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	079f      	lsls	r7, r3, #30
 80048c6:	d534      	bpl.n	8004932 <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80048c8:	68e3      	ldr	r3, [r4, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	4318      	orrs	r0, r3
 80048d0:	60e0      	str	r0, [r4, #12]
 80048d2:	e7d3      	b.n	800487c <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048da:	d1f5      	bne.n	80048c8 <RCCEx_PLLSAI1_Config+0x6c>
 80048dc:	2001      	movs	r0, #1
 80048de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	0391      	lsls	r1, r2, #14
 80048e4:	d4f0      	bmi.n	80048c8 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80048ec:	e7f5      	b.n	80048da <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ee:	f7fc fb97 	bl	8001020 <HAL_GetTick>
 80048f2:	1bc0      	subs	r0, r0, r7
 80048f4:	2802      	cmp	r0, #2
 80048f6:	d9c8      	bls.n	800488a <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 80048f8:	2003      	movs	r0, #3
 80048fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048fc:	68e8      	ldr	r0, [r5, #12]
 80048fe:	6926      	ldr	r6, [r4, #16]
 8004900:	4918      	ldr	r1, [pc, #96]	; (8004964 <RCCEx_PLLSAI1_Config+0x108>)
 8004902:	06c2      	lsls	r2, r0, #27
 8004904:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004908:	4031      	ands	r1, r6
 800490a:	430a      	orrs	r2, r1
 800490c:	3b01      	subs	r3, #1
 800490e:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004912:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800491a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fc fb80 	bl	8001020 <HAL_GetTick>
 8004920:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	d513      	bpl.n	8004950 <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004928:	6923      	ldr	r3, [r4, #16]
 800492a:	69aa      	ldr	r2, [r5, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004934:	6921      	ldr	r1, [r4, #16]
 8004936:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <RCCEx_PLLSAI1_Config+0x10c>)
 8004938:	400a      	ands	r2, r1
 800493a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800493e:	3b01      	subs	r3, #1
 8004940:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8004944:	696a      	ldr	r2, [r5, #20]
 8004946:	0852      	lsrs	r2, r2, #1
 8004948:	3a01      	subs	r2, #1
 800494a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800494e:	e7e0      	b.n	8004912 <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004950:	f7fc fb66 	bl	8001020 <HAL_GetTick>
 8004954:	1b80      	subs	r0, r0, r6
 8004956:	2802      	cmp	r0, #2
 8004958:	d9e3      	bls.n	8004922 <RCCEx_PLLSAI1_Config+0xc6>
 800495a:	e7cd      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x9c>
 800495c:	40021000 	.word	0x40021000
 8004960:	ff9f800f 	.word	0xff9f800f
 8004964:	07ff800f 	.word	0x07ff800f
 8004968:	f9ff800f 	.word	0xf9ff800f

0800496c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800496e:	4b3f      	ldr	r3, [pc, #252]	; (8004a6c <RCCEx_PLLSAI2_Config+0x100>)
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	f012 0f03 	tst.w	r2, #3
{
 8004976:	4605      	mov	r5, r0
 8004978:	460e      	mov	r6, r1
 800497a:	461c      	mov	r4, r3
 800497c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800497e:	d022      	beq.n	80049c6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	4283      	cmp	r3, r0
 8004988:	d130      	bne.n	80049ec <RCCEx_PLLSAI2_Config+0x80>
       ||
 800498a:	b37b      	cbz	r3, 80049ec <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004992:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004994:	f7fc fb44 	bl	8001020 <HAL_GetTick>
 8004998:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	009a      	lsls	r2, r3, #2
 800499e:	d42e      	bmi.n	80049fe <RCCEx_PLLSAI2_Config+0x92>
 80049a0:	68af      	ldr	r7, [r5, #8]
 80049a2:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049a4:	b396      	cbz	r6, 8004a0c <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80049a6:	2e01      	cmp	r6, #1
 80049a8:	d14c      	bne.n	8004a44 <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049aa:	6962      	ldr	r2, [r4, #20]
 80049ac:	4930      	ldr	r1, [pc, #192]	; (8004a70 <RCCEx_PLLSAI2_Config+0x104>)
 80049ae:	4011      	ands	r1, r2
 80049b0:	692a      	ldr	r2, [r5, #16]
 80049b2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80049b6:	3b01      	subs	r3, #1
 80049b8:	0852      	lsrs	r2, r2, #1
 80049ba:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 80049be:	3a01      	subs	r2, #1
 80049c0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80049c4:	e02d      	b.n	8004a22 <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 80049c6:	2802      	cmp	r0, #2
 80049c8:	d00c      	beq.n	80049e4 <RCCEx_PLLSAI2_Config+0x78>
 80049ca:	2803      	cmp	r0, #3
 80049cc:	d010      	beq.n	80049f0 <RCCEx_PLLSAI2_Config+0x84>
 80049ce:	2801      	cmp	r0, #1
 80049d0:	d10c      	bne.n	80049ec <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	079f      	lsls	r7, r3, #30
 80049d6:	d534      	bpl.n	8004a42 <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80049d8:	68e3      	ldr	r3, [r4, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	4318      	orrs	r0, r3
 80049e0:	60e0      	str	r0, [r4, #12]
 80049e2:	e7d3      	b.n	800498c <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ea:	d1f5      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x6c>
 80049ec:	2001      	movs	r0, #1
 80049ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	0391      	lsls	r1, r2, #14
 80049f4:	d4f0      	bmi.n	80049d8 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80049fc:	e7f5      	b.n	80049ea <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049fe:	f7fc fb0f 	bl	8001020 <HAL_GetTick>
 8004a02:	1bc0      	subs	r0, r0, r7
 8004a04:	2802      	cmp	r0, #2
 8004a06:	d9c8      	bls.n	800499a <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 8004a08:	2003      	movs	r0, #3
 8004a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a0c:	68e8      	ldr	r0, [r5, #12]
 8004a0e:	6966      	ldr	r6, [r4, #20]
 8004a10:	4918      	ldr	r1, [pc, #96]	; (8004a74 <RCCEx_PLLSAI2_Config+0x108>)
 8004a12:	06c2      	lsls	r2, r0, #27
 8004a14:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004a18:	4031      	ands	r1, r6
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a22:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2c:	f7fc faf8 	bl	8001020 <HAL_GetTick>
 8004a30:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	d513      	bpl.n	8004a60 <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a38:	6963      	ldr	r3, [r4, #20]
 8004a3a:	69aa      	ldr	r2, [r5, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	6163      	str	r3, [r4, #20]
 8004a40:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a44:	6961      	ldr	r1, [r4, #20]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <RCCEx_PLLSAI2_Config+0x10c>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8004a54:	696a      	ldr	r2, [r5, #20]
 8004a56:	0852      	lsrs	r2, r2, #1
 8004a58:	3a01      	subs	r2, #1
 8004a5a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004a5e:	e7e0      	b.n	8004a22 <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a60:	f7fc fade 	bl	8001020 <HAL_GetTick>
 8004a64:	1b80      	subs	r0, r0, r6
 8004a66:	2802      	cmp	r0, #2
 8004a68:	d9e3      	bls.n	8004a32 <RCCEx_PLLSAI2_Config+0xc6>
 8004a6a:	e7cd      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0x9c>
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	ff9f800f 	.word	0xff9f800f
 8004a74:	07ff800f 	.word	0x07ff800f
 8004a78:	f9ff800f 	.word	0xf9ff800f

08004a7c <HAL_RCCEx_PeriphCLKConfig>:
{
 8004a7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a80:	6805      	ldr	r5, [r0, #0]
 8004a82:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8004a86:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a88:	d023      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a8a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8004a8c:	2940      	cmp	r1, #64	; 0x40
 8004a8e:	d014      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8004a90:	d804      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004a92:	b1c1      	cbz	r1, 8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004a94:	2920      	cmp	r1, #32
 8004a96:	d02b      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 8004a98:	2501      	movs	r5, #1
 8004a9a:	e01a      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a9c:	2960      	cmp	r1, #96	; 0x60
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004aa0:	2980      	cmp	r1, #128	; 0x80
 8004aa2:	d1f9      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aa4:	4a4e      	ldr	r2, [pc, #312]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aa6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004aa8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004aac:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ab6:	2500      	movs	r5, #0
 8004ab8:	e00b      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aba:	4a49      	ldr	r2, [pc, #292]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004abc:	68d3      	ldr	r3, [r2, #12]
 8004abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac2:	60d3      	str	r3, [r2, #12]
      break;
 8004ac4:	e7ee      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ac6:	3004      	adds	r0, #4
 8004ac8:	f7ff fec8 	bl	800485c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004acc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d0e8      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	04db      	lsls	r3, r3, #19
 8004ad6:	d509      	bpl.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004ad8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004ada:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004ade:	d014      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8004ae0:	d80b      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004ae2:	b1c1      	cbz	r1, 8004b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004ae4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004ae8:	d071      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 8004aea:	2501      	movs	r5, #1
 8004aec:	462e      	mov	r6, r5
 8004aee:	e021      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004af0:	2100      	movs	r1, #0
 8004af2:	3020      	adds	r0, #32
 8004af4:	f7ff ff3a 	bl	800496c <RCCEx_PLLSAI2_Config>
 8004af8:	e7e8      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004afa:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004afe:	d002      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004b00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b04:	d1f1      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004b06:	462e      	mov	r6, r5
 8004b08:	e009      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b0a:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b0c:	68d3      	ldr	r3, [r2, #12]
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	60d3      	str	r3, [r2, #12]
 8004b14:	e7f7      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b16:	1d20      	adds	r0, r4, #4
 8004b18:	f7ff fea0 	bl	800485c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b1c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004b1e:	2e00      	cmp	r6, #0
 8004b20:	d15b      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b22:	4a2f      	ldr	r2, [pc, #188]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b24:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004b26:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	039f      	lsls	r7, r3, #14
 8004b38:	d565      	bpl.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b3a:	4f29      	ldr	r7, [pc, #164]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b3e:	00d8      	lsls	r0, r3, #3
 8004b40:	f140 81f3 	bpl.w	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 8004b44:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b48:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004be4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004b4c:	f8d9 3000 	ldr.w	r3, [r9]
 8004b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b54:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8004b58:	f7fc fa62 	bl	8001020 <HAL_GetTick>
 8004b5c:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b5e:	f8d9 3000 	ldr.w	r3, [r9]
 8004b62:	05d9      	lsls	r1, r3, #23
 8004b64:	d540      	bpl.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	f040 8197 	bne.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b70:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004b74:	d015      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8004b76:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d011      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b82:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004b86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b8e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ba2:	07da      	lsls	r2, r3, #31
 8004ba4:	d509      	bpl.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 8004ba6:	f7fc fa3b 	bl	8001020 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004bae:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bb4:	079b      	lsls	r3, r3, #30
 8004bb6:	f140 8168 	bpl.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bbe:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8004bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bcc:	e014      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bce:	2100      	movs	r1, #0
 8004bd0:	f104 0020 	add.w	r0, r4, #32
 8004bd4:	f7ff feca 	bl	800496c <RCCEx_PLLSAI2_Config>
 8004bd8:	e7a0      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004bda:	4635      	mov	r5, r6
 8004bdc:	e7aa      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be8:	f7fc fa1a 	bl	8001020 <HAL_GetTick>
 8004bec:	eba0 000a 	sub.w	r0, r0, sl
 8004bf0:	2802      	cmp	r0, #2
 8004bf2:	d9b4      	bls.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8004bf4:	2503      	movs	r5, #3
 8004bf6:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 8004bf8:	f1b8 0f00 	cmp.w	r8, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c04:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	07df      	lsls	r7, r3, #31
 8004c0a:	d508      	bpl.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c0c:	49c0      	ldr	r1, [pc, #768]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c14:	f022 0203 	bic.w	r2, r2, #3
 8004c18:	4302      	orrs	r2, r0
 8004c1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c1e:	0798      	lsls	r0, r3, #30
 8004c20:	d508      	bpl.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c22:	49bb      	ldr	r1, [pc, #748]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c24:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004c26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c2a:	f022 020c 	bic.w	r2, r2, #12
 8004c2e:	4302      	orrs	r2, r0
 8004c30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c34:	0759      	lsls	r1, r3, #29
 8004c36:	d508      	bpl.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c38:	49b5      	ldr	r1, [pc, #724]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c3a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004c3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c40:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004c44:	4302      	orrs	r2, r0
 8004c46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c4a:	071a      	lsls	r2, r3, #28
 8004c4c:	d508      	bpl.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c4e:	49b0      	ldr	r1, [pc, #704]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c50:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004c52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c5a:	4302      	orrs	r2, r0
 8004c5c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c60:	06df      	lsls	r7, r3, #27
 8004c62:	d508      	bpl.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c64:	49aa      	ldr	r1, [pc, #680]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c66:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004c68:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c70:	4302      	orrs	r2, r0
 8004c72:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c76:	0698      	lsls	r0, r3, #26
 8004c78:	d508      	bpl.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c7a:	49a5      	ldr	r1, [pc, #660]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c7c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004c7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c86:	4302      	orrs	r2, r0
 8004c88:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c8c:	0599      	lsls	r1, r3, #22
 8004c8e:	d508      	bpl.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c90:	499f      	ldr	r1, [pc, #636]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c92:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004c94:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c98:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004c9c:	4302      	orrs	r2, r0
 8004c9e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ca2:	055a      	lsls	r2, r3, #21
 8004ca4:	d508      	bpl.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ca6:	499a      	ldr	r1, [pc, #616]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ca8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004caa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004cae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004cb2:	4302      	orrs	r2, r0
 8004cb4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cb8:	065f      	lsls	r7, r3, #25
 8004cba:	d508      	bpl.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cbc:	4994      	ldr	r1, [pc, #592]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004cc4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004cc8:	4302      	orrs	r2, r0
 8004cca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cce:	0618      	lsls	r0, r3, #24
 8004cd0:	d508      	bpl.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cd2:	498f      	ldr	r1, [pc, #572]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004cda:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004cde:	4302      	orrs	r2, r0
 8004ce0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ce4:	05d9      	lsls	r1, r3, #23
 8004ce6:	d508      	bpl.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ce8:	4989      	ldr	r1, [pc, #548]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004cea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004cec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004cf0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004cf4:	4302      	orrs	r2, r0
 8004cf6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cfa:	02da      	lsls	r2, r3, #11
 8004cfc:	d508      	bpl.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cfe:	4984      	ldr	r1, [pc, #528]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d00:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004d02:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004d06:	f022 0203 	bic.w	r2, r2, #3
 8004d0a:	4302      	orrs	r2, r0
 8004d0c:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d10:	049f      	lsls	r7, r3, #18
 8004d12:	d510      	bpl.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d14:	4a7e      	ldr	r2, [pc, #504]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d16:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004d18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d1c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004d20:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d22:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d2a:	f040 80b8 	bne.w	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2e:	68d3      	ldr	r3, [r2, #12]
 8004d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d34:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	0318      	lsls	r0, r3, #12
 8004d3a:	d50f      	bpl.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d3c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004d3e:	4b74      	ldr	r3, [pc, #464]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d40:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004d44:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004d48:	f040 80b6 	bne.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5a:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	0359      	lsls	r1, r3, #13
 8004d60:	d510      	bpl.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d62:	4a6b      	ldr	r2, [pc, #428]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d64:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004d66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d6a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004d6e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d70:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d78:	f040 80bd 	bne.w	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d7c:	68d3      	ldr	r3, [r2, #12]
 8004d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d82:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	045a      	lsls	r2, r3, #17
 8004d88:	d514      	bpl.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d8a:	4961      	ldr	r1, [pc, #388]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d8c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004d90:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d94:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004d98:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d9a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004da2:	d107      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004da4:	2102      	movs	r1, #2
 8004da6:	1d20      	adds	r0, r4, #4
 8004da8:	f7ff fd58 	bl	800485c <RCCEx_PLLSAI1_Config>
 8004dac:	4606      	mov	r6, r0
 8004dae:	2800      	cmp	r0, #0
 8004db0:	bf18      	it	ne
 8004db2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004db4:	6822      	ldr	r2, [r4, #0]
 8004db6:	03d3      	lsls	r3, r2, #15
 8004db8:	d509      	bpl.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dba:	4955      	ldr	r1, [pc, #340]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004dbc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004dc0:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004dc4:	f023 0304 	bic.w	r3, r3, #4
 8004dc8:	4303      	orrs	r3, r0
 8004dca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004dce:	0297      	lsls	r7, r2, #10
 8004dd0:	d509      	bpl.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004dd2:	494f      	ldr	r1, [pc, #316]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004dd4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004dd8:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004ddc:	f023 0318 	bic.w	r3, r3, #24
 8004de0:	4303      	orrs	r3, r0
 8004de2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004de6:	0250      	lsls	r0, r2, #9
 8004de8:	d51f      	bpl.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dea:	4f49      	ldr	r7, [pc, #292]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004df4:	f7fc f914 	bl	8001020 <HAL_GetTick>
 8004df8:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	0099      	lsls	r1, r3, #2
 8004dfe:	f100 8089 	bmi.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 8004e02:	2e00      	cmp	r6, #0
 8004e04:	f040 808f 	bne.w	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e0c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004e10:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	f104 0020 	add.w	r0, r4, #32
 8004e20:	f7ff fda4 	bl	800496c <RCCEx_PLLSAI2_Config>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	bf18      	it	ne
 8004e28:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	021a      	lsls	r2, r3, #8
 8004e2e:	d514      	bpl.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004e30:	4937      	ldr	r1, [pc, #220]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004e32:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004e36:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e3e:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004e40:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004e44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004e48:	d107      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	f104 0020 	add.w	r0, r4, #32
 8004e50:	f7ff fd8c 	bl	800496c <RCCEx_PLLSAI2_Config>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	bf18      	it	ne
 8004e58:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	01db      	lsls	r3, r3, #7
 8004e5e:	d510      	bpl.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e60:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004e62:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004e66:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004e6a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e6e:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004e70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e74:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004e78:	d103      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7a:	68d3      	ldr	r3, [r2, #12]
 8004e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e80:	60d3      	str	r3, [r2, #12]
}
 8004e82:	4628      	mov	r0, r5
 8004e84:	b002      	add	sp, #8
 8004e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fc f8c9 	bl	8001020 <HAL_GetTick>
 8004e8e:	eba0 0009 	sub.w	r0, r0, r9
 8004e92:	4550      	cmp	r0, sl
 8004e94:	f67f ae8c 	bls.w	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004e98:	e6ac      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004e9a:	4635      	mov	r5, r6
 8004e9c:	e6ac      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e9e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004ea2:	f47f af48 	bne.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	1d20      	adds	r0, r4, #4
 8004eaa:	f7ff fcd7 	bl	800485c <RCCEx_PLLSAI1_Config>
 8004eae:	4606      	mov	r6, r0
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	bf18      	it	ne
 8004eb4:	4605      	movne	r5, r0
 8004eb6:	e73e      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ebc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004ec0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ec4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004ec8:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ed2:	d103      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004eda:	e73e      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004edc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004ee0:	f47f af3c 	bne.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	1d20      	adds	r0, r4, #4
 8004ee8:	f7ff fcb8 	bl	800485c <RCCEx_PLLSAI1_Config>
 8004eec:	4606      	mov	r6, r0
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	bf18      	it	ne
 8004ef2:	4605      	movne	r5, r0
 8004ef4:	e732      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ef6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004efa:	f47f af43 	bne.w	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004efe:	2101      	movs	r1, #1
 8004f00:	1d20      	adds	r0, r4, #4
 8004f02:	f7ff fcab 	bl	800485c <RCCEx_PLLSAI1_Config>
 8004f06:	4606      	mov	r6, r0
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	bf18      	it	ne
 8004f0c:	4605      	movne	r5, r0
 8004f0e:	e739      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004f10:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f14:	f7fc f884 	bl	8001020 <HAL_GetTick>
 8004f18:	eba0 0008 	sub.w	r0, r0, r8
 8004f1c:	2802      	cmp	r0, #2
 8004f1e:	f67f af6c 	bls.w	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 8004f22:	2503      	movs	r5, #3
 8004f24:	e781      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004f26:	4635      	mov	r5, r6
 8004f28:	e77f      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004f3c:	f04f 0801 	mov.w	r8, #1
 8004f40:	e602      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004f42:	bf00      	nop

08004f44 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004f4e:	f7fc f867 	bl	8001020 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004f52:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004f54:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004f56:	6828      	ldr	r0, [r5, #0]
 8004f58:	f002 fb4e 	bl	80075f8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	b118      	cbz	r0, 8004f68 <SD_FindSCR+0x24>
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004f60:	4620      	mov	r0, r4
 8004f62:	b007      	add	sp, #28
 8004f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004f68:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8004f6a:	6828      	ldr	r0, [r5, #0]
 8004f6c:	0409      	lsls	r1, r1, #16
 8004f6e:	f002 fc29 	bl	80077c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004f72:	4604      	mov	r4, r0
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1f3      	bne.n	8004f60 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f78:	f04f 31ff 	mov.w	r1, #4294967295
  config.DataLength    = 8;
 8004f7c:	2008      	movs	r0, #8
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004f7e:	2202      	movs	r2, #2
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004f80:	2301      	movs	r3, #1
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f82:	9100      	str	r1, [sp, #0]
  config.DataLength    = 8;
 8004f84:	9001      	str	r0, [sp, #4]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004f86:	4669      	mov	r1, sp
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004f88:	2730      	movs	r7, #48	; 0x30
  SDMMC_ConfigData(hsd->Instance, &config);
 8004f8a:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f8c:	9404      	str	r4, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004f8e:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004f90:	9305      	str	r3, [sp, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004f92:	9702      	str	r7, [sp, #8]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004f94:	f002 fb1c 	bl	80075d0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004f98:	6828      	ldr	r0, [r5, #0]
 8004f9a:	f002 fc31 	bl	8007800 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d1dd      	bne.n	8004f60 <SD_FindSCR+0x1c>
 8004fa4:	4682      	mov	sl, r0
 8004fa6:	4683      	mov	fp, r0
 8004fa8:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004faa:	f240 572a 	movw	r7, #1322	; 0x52a
 8004fae:	e004      	b.n	8004fba <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004fb0:	f7fc f836 	bl	8001020 <HAL_GetTick>
 8004fb4:	1b80      	subs	r0, r0, r6
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d018      	beq.n	8004fec <SD_FindSCR+0xa8>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004fba:	6828      	ldr	r0, [r5, #0]
 8004fbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004fbe:	423b      	tst	r3, r7
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004fc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004fc2:	d10e      	bne.n	8004fe2 <SD_FindSCR+0x9e>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	d4f3      	bmi.n	8004fb0 <SD_FindSCR+0x6c>
 8004fc8:	f1b9 0f00 	cmp.w	r9, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004fce:	f002 fad7 	bl	8007580 <SDMMC_ReadFIFO>
 8004fd2:	4683      	mov	fp, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004fd4:	6828      	ldr	r0, [r5, #0]
 8004fd6:	f002 fad3 	bl	8007580 <SDMMC_ReadFIFO>
      index++;
 8004fda:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004fde:	4682      	mov	sl, r0
 8004fe0:	e7e6      	b.n	8004fb0 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004fe2:	0719      	lsls	r1, r3, #28
 8004fe4:	d505      	bpl.n	8004ff2 <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004fe6:	2408      	movs	r4, #8
 8004fe8:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004fea:	e7b9      	b.n	8004f60 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8004fec:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004ff0:	e7b6      	b.n	8004f60 <SD_FindSCR+0x1c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004ff2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ff4:	079a      	lsls	r2, r3, #30
 8004ff6:	d502      	bpl.n	8004ffe <SD_FindSCR+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004ff8:	2402      	movs	r4, #2
 8004ffa:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ffc:	e7b0      	b.n	8004f60 <SD_FindSCR+0x1c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004ffe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005000:	069b      	lsls	r3, r3, #26
 8005002:	d502      	bpl.n	800500a <SD_FindSCR+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005004:	2420      	movs	r4, #32
 8005006:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005008:	e7aa      	b.n	8004f60 <SD_FindSCR+0x1c>
 800500a:	fa9b f28b 	rev.w	r2, fp
 800500e:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005012:	4903      	ldr	r1, [pc, #12]	; (8005020 <SD_FindSCR+0xdc>)
 8005014:	6381      	str	r1, [r0, #56]	; 0x38
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005016:	f8c8 2004 	str.w	r2, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800501a:	f8c8 3000 	str.w	r3, [r8]
  return HAL_SD_ERROR_NONE;
 800501e:	e79f      	b.n	8004f60 <SD_FindSCR+0x1c>
 8005020:	18000f3a 	.word	0x18000f3a

08005024 <HAL_SD_DeInit>:
  if(hsd == NULL)
 8005024:	b180      	cbz	r0, 8005048 <HAL_SD_DeInit+0x24>
{
 8005026:	b510      	push	{r4, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8005028:	2303      	movs	r3, #3
 800502a:	4604      	mov	r4, r0
 800502c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  SDMMC_PowerState_OFF(hsd->Instance);
 8005030:	6800      	ldr	r0, [r0, #0]
 8005032:	f002 fab7 	bl	80075a4 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8005036:	4620      	mov	r0, r4
 8005038:	f01d f830 	bl	802209c <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800503c:	2300      	movs	r3, #0
 800503e:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8005040:	4618      	mov	r0, r3
  hsd->State = HAL_SD_STATE_RESET;
 8005042:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005046:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005048:	2001      	movs	r0, #1
 800504a:	4770      	bx	lr

0800504c <HAL_SD_ReadBlocks_DMA>:
{
 800504c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504e:	4604      	mov	r4, r0
 8005050:	b089      	sub	sp, #36	; 0x24
  if(NULL == pData)
 8005052:	b379      	cbz	r1, 80050b4 <HAL_SD_ReadBlocks_DMA+0x68>
  if(hsd->State == HAL_SD_STATE_READY)
 8005054:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005058:	b2c0      	uxtb	r0, r0
 800505a:	2801      	cmp	r0, #1
 800505c:	d002      	beq.n	8005064 <HAL_SD_ReadBlocks_DMA+0x18>
    return HAL_BUSY;
 800505e:	2002      	movs	r0, #2
}
 8005060:	b009      	add	sp, #36	; 0x24
 8005062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005064:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8005066:	460d      	mov	r5, r1
 8005068:	18d1      	adds	r1, r2, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800506a:	2700      	movs	r7, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800506c:	42b1      	cmp	r1, r6
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800506e:	63a7      	str	r7, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005070:	d827      	bhi.n	80050c2 <HAL_SD_ReadBlocks_DMA+0x76>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005072:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8005074:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8005076:	2603      	movs	r6, #3
 8005078:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800507c:	2901      	cmp	r1, #1
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800507e:	ea4f 2643 	mov.w	r6, r3, lsl #9
    hsd->Instance->DCTRL = 0U;
 8005082:	62c7      	str	r7, [r0, #44]	; 0x2c
      BlockAdd *= 512U;
 8005084:	bf18      	it	ne
 8005086:	0252      	lslne	r2, r2, #9
    hsd->pRxBuffPtr = (uint32_t*)pData;
 8005088:	62a5      	str	r5, [r4, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800508a:	62e6      	str	r6, [r4, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800508c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005090:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005094:	f002 fab0 	bl	80075f8 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005098:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800509c:	b1b0      	cbz	r0, 80050cc <HAL_SD_ReadBlocks_DMA+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	4a25      	ldr	r2, [pc, #148]	; (8005138 <HAL_SD_ReadBlocks_DMA+0xec>)
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80050a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050a6:	2301      	movs	r3, #1
      hsd->ErrorCode |= errorstate;
 80050a8:	4310      	orrs	r0, r2
 80050aa:	63a0      	str	r0, [r4, #56]	; 0x38
      return HAL_ERROR;
 80050ac:	4618      	mov	r0, r3
      hsd->State = HAL_SD_STATE_READY;
 80050ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80050b2:	e7d5      	b.n	8005060 <HAL_SD_ReadBlocks_DMA+0x14>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80050b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80050b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050ba:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80050bc:	2001      	movs	r0, #1
}
 80050be:	b009      	add	sp, #36	; 0x24
 80050c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80050c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050c8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80050ca:	e7c9      	b.n	8005060 <HAL_SD_ReadBlocks_DMA+0x14>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050cc:	f04f 3eff 	mov.w	lr, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80050d0:	9603      	str	r6, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80050d2:	9006      	str	r0, [sp, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80050d4:	2602      	movs	r6, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80050d6:	9007      	str	r0, [sp, #28]
    SDMMC_ConfigData(hsd->Instance, &config);
 80050d8:	a902      	add	r1, sp, #8
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80050da:	2790      	movs	r7, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 80050dc:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80050de:	9605      	str	r6, [sp, #20]
 80050e0:	e88d 000c 	stmia.w	sp, {r2, r3}
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050e4:	f8cd e008 	str.w	lr, [sp, #8]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80050e8:	9704      	str	r7, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 80050ea:	f002 fa71 	bl	80075d0 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80050ee:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 80050f0:	9b01      	ldr	r3, [sp, #4]
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80050f2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    if(NumberOfBlocks > 1U)
 80050f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80050f6:	f441 7195 	orr.w	r1, r1, #298	; 0x12a
 80050fa:	63c1      	str	r1, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80050fc:	68c1      	ldr	r1, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 80050fe:	2601      	movs	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005100:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    if(NumberOfBlocks > 1U)
 8005104:	42b3      	cmp	r3, r6
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005106:	60c1      	str	r1, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8005108:	6506      	str	r6, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800510a:	6585      	str	r5, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800510c:	d90e      	bls.n	800512c <HAL_SD_ReadBlocks_DMA+0xe0>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800510e:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8005110:	4611      	mov	r1, r2
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005112:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8005114:	f002 fa90 	bl	8007638 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005118:	2800      	cmp	r0, #0
 800511a:	d0a1      	beq.n	8005060 <HAL_SD_ReadBlocks_DMA+0x14>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	4a06      	ldr	r2, [pc, #24]	; (8005138 <HAL_SD_ReadBlocks_DMA+0xec>)
 8005120:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005124:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005128:	63da      	str	r2, [r3, #60]	; 0x3c
 800512a:	e7bb      	b.n	80050a4 <HAL_SD_ReadBlocks_DMA+0x58>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800512c:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800512e:	4611      	mov	r1, r2
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005130:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8005132:	f002 fa71 	bl	8007618 <SDMMC_CmdReadSingleBlock>
 8005136:	e7ef      	b.n	8005118 <HAL_SD_ReadBlocks_DMA+0xcc>
 8005138:	1fe00fff 	.word	0x1fe00fff

0800513c <HAL_SD_WriteBlocks_DMA>:
{
 800513c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800513e:	4604      	mov	r4, r0
 8005140:	b089      	sub	sp, #36	; 0x24
  if(NULL == pData)
 8005142:	b379      	cbz	r1, 80051a4 <HAL_SD_WriteBlocks_DMA+0x68>
  if(hsd->State == HAL_SD_STATE_READY)
 8005144:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005148:	b2c0      	uxtb	r0, r0
 800514a:	2801      	cmp	r0, #1
 800514c:	d002      	beq.n	8005154 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 800514e:	2002      	movs	r0, #2
}
 8005150:	b009      	add	sp, #36	; 0x24
 8005152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005154:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8005156:	460d      	mov	r5, r1
 8005158:	18d1      	adds	r1, r2, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800515a:	2700      	movs	r7, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800515c:	42b1      	cmp	r1, r6
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800515e:	63a7      	str	r7, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005160:	d827      	bhi.n	80051b2 <HAL_SD_WriteBlocks_DMA+0x76>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005162:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8005164:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8005166:	2603      	movs	r6, #3
 8005168:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800516c:	2901      	cmp	r1, #1
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800516e:	ea4f 2643 	mov.w	r6, r3, lsl #9
    hsd->Instance->DCTRL = 0U;
 8005172:	62c7      	str	r7, [r0, #44]	; 0x2c
      BlockAdd *= 512U;
 8005174:	bf18      	it	ne
 8005176:	0252      	lslne	r2, r2, #9
    hsd->pTxBuffPtr = (uint32_t*)pData;
 8005178:	6225      	str	r5, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800517a:	6266      	str	r6, [r4, #36]	; 0x24
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800517c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005180:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005184:	f002 fa38 	bl	80075f8 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005188:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800518c:	b1b0      	cbz	r0, 80051bc <HAL_SD_WriteBlocks_DMA+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	4a24      	ldr	r2, [pc, #144]	; (8005224 <HAL_SD_WriteBlocks_DMA+0xe8>)
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005194:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005196:	2301      	movs	r3, #1
      hsd->ErrorCode |= errorstate;
 8005198:	4310      	orrs	r0, r2
 800519a:	63a0      	str	r0, [r4, #56]	; 0x38
      return HAL_ERROR;
 800519c:	4618      	mov	r0, r3
      hsd->State = HAL_SD_STATE_READY;
 800519e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80051a2:	e7d5      	b.n	8005150 <HAL_SD_WriteBlocks_DMA+0x14>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80051a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80051a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051aa:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80051ac:	2001      	movs	r0, #1
}
 80051ae:	b009      	add	sp, #36	; 0x24
 80051b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80051b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051b8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80051ba:	e7c9      	b.n	8005150 <HAL_SD_WriteBlocks_DMA+0x14>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051bc:	f04f 3eff 	mov.w	lr, #4294967295
    SDMMC_ConfigData(hsd->Instance, &config);
 80051c0:	a902      	add	r1, sp, #8
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80051c2:	9005      	str	r0, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80051c4:	9006      	str	r0, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80051c6:	9007      	str	r0, [sp, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80051c8:	2790      	movs	r7, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 80051ca:	6820      	ldr	r0, [r4, #0]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80051cc:	9603      	str	r6, [sp, #12]
 80051ce:	e88d 000c 	stmia.w	sp, {r2, r3}
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051d2:	f8cd e008 	str.w	lr, [sp, #8]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80051d6:	9704      	str	r7, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 80051d8:	f002 f9fa 	bl	80075d0 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 80051dc:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 80051de:	9b01      	ldr	r3, [sp, #4]
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 80051e0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    if(NumberOfBlocks > 1U)
 80051e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 80051e4:	f441 718d 	orr.w	r1, r1, #282	; 0x11a
 80051e8:	63c1      	str	r1, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80051ea:	68c1      	ldr	r1, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 80051ec:	2601      	movs	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80051ee:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    if(NumberOfBlocks > 1U)
 80051f2:	42b3      	cmp	r3, r6
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80051f4:	60c1      	str	r1, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 80051f6:	6506      	str	r6, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80051f8:	6585      	str	r5, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 80051fa:	d90e      	bls.n	800521a <HAL_SD_WriteBlocks_DMA+0xde>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80051fc:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80051fe:	4611      	mov	r1, r2
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005200:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8005202:	f002 fa39 	bl	8007678 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005206:	2800      	cmp	r0, #0
 8005208:	d0a2      	beq.n	8005150 <HAL_SD_WriteBlocks_DMA+0x14>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	4a05      	ldr	r2, [pc, #20]	; (8005224 <HAL_SD_WriteBlocks_DMA+0xe8>)
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005212:	f422 728d 	bic.w	r2, r2, #282	; 0x11a
 8005216:	63da      	str	r2, [r3, #60]	; 0x3c
 8005218:	e7bc      	b.n	8005194 <HAL_SD_WriteBlocks_DMA+0x58>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800521a:	6327      	str	r7, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800521c:	4611      	mov	r1, r2
 800521e:	f002 fa1b 	bl	8007658 <SDMMC_CmdWriteSingleBlock>
 8005222:	e7f0      	b.n	8005206 <HAL_SD_WriteBlocks_DMA+0xca>
 8005224:	1fe00fff 	.word	0x1fe00fff

08005228 <HAL_SD_ErrorCallback>:
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop

0800522c <HAL_SD_IRQHandler>:
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800522c:	6803      	ldr	r3, [r0, #0]
 800522e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{  
 8005230:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8005232:	05d5      	lsls	r5, r2, #23
{  
 8005234:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8005236:	d531      	bpl.n	800529c <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8005238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT   |\
 800523e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005240:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 8005244:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8005248:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800524a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800524c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005250:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005258:	60da      	str	r2, [r3, #12]
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800525a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800525c:	f012 0208 	ands.w	r2, r2, #8
 8005260:	d053      	beq.n	800530a <HAL_SD_IRQHandler+0xde>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8005262:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005264:	0790      	lsls	r0, r2, #30
 8005266:	d402      	bmi.n	800526e <HAL_SD_IRQHandler+0x42>
 8005268:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800526a:	0691      	lsls	r1, r2, #26
 800526c:	d506      	bpl.n	800527c <HAL_SD_IRQHandler+0x50>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800526e:	4618      	mov	r0, r3
 8005270:	f002 fa12 	bl	8007698 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005274:	2800      	cmp	r0, #0
 8005276:	f040 80a9 	bne.w	80053cc <HAL_SD_IRQHandler+0x1a0>
 800527a:	6823      	ldr	r3, [r4, #0]
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800527c:	4a63      	ldr	r2, [pc, #396]	; (800540c <HAL_SD_IRQHandler+0x1e0>)
 800527e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005280:	2301      	movs	r3, #1
 8005282:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8005286:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005288:	07da      	lsls	r2, r3, #31
 800528a:	d403      	bmi.n	8005294 <HAL_SD_IRQHandler+0x68>
 800528c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800528e:	079b      	lsls	r3, r3, #30
 8005290:	f140 8087 	bpl.w	80053a2 <HAL_SD_IRQHandler+0x176>
        HAL_SD_RxCpltCallback(hsd);
 8005294:	4620      	mov	r0, r4
 8005296:	f019 f975 	bl	801e584 <HAL_SD_RxCpltCallback>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 800529c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529e:	0456      	lsls	r6, r2, #17
 80052a0:	d45f      	bmi.n	8005362 <HAL_SD_IRQHandler+0x136>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 80052a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a4:	0415      	lsls	r5, r2, #16
 80052a6:	d46c      	bmi.n	8005382 <HAL_SD_IRQHandler+0x156>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 80052a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052aa:	f012 0f3a 	tst.w	r2, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80052ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 80052b0:	d047      	beq.n	8005342 <HAL_SD_IRQHandler+0x116>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80052b2:	0791      	lsls	r1, r2, #30
 80052b4:	d503      	bpl.n	80052be <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80052b6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80052b8:	f042 0202 	orr.w	r2, r2, #2
 80052bc:	6382      	str	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80052be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c0:	0712      	lsls	r2, r2, #28
 80052c2:	d503      	bpl.n	80052cc <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80052c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052c6:	f042 0208 	orr.w	r2, r2, #8
 80052ca:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80052cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ce:	0696      	lsls	r6, r2, #26
 80052d0:	d503      	bpl.n	80052da <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80052d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052d4:	f042 0220 	orr.w	r2, r2, #32
 80052d8:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80052da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052dc:	06d5      	lsls	r5, r2, #27
 80052de:	d503      	bpl.n	80052e8 <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 80052e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052e2:	f042 0210 	orr.w	r2, r2, #16
 80052e6:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052e8:	4a48      	ldr	r2, [pc, #288]	; (800540c <HAL_SD_IRQHandler+0x1e0>)
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80052ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ee:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80052f2:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80052f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80052f6:	f012 0208 	ands.w	r2, r2, #8
 80052fa:	d17a      	bne.n	80053f2 <HAL_SD_IRQHandler+0x1c6>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80052fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80052fe:	0608      	lsls	r0, r1, #24
 8005300:	d502      	bpl.n	8005308 <HAL_SD_IRQHandler+0xdc>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005302:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005304:	2900      	cmp	r1, #0
 8005306:	d155      	bne.n	80053b4 <HAL_SD_IRQHandler+0x188>
 8005308:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800530a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800530c:	060e      	lsls	r6, r1, #24
 800530e:	d5fb      	bpl.n	8005308 <HAL_SD_IRQHandler+0xdc>
      hsd->Instance->DLEN = 0;
 8005310:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005314:	651a      	str	r2, [r3, #80]	; 0x50
      if((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET)
 8005316:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005318:	07d5      	lsls	r5, r2, #31
 800531a:	d55e      	bpl.n	80053da <HAL_SD_IRQHandler+0x1ae>
      hsd->State = HAL_SD_STATE_READY;
 800531c:	2301      	movs	r3, #1
 800531e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8005322:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005324:	06d8      	lsls	r0, r3, #27
 8005326:	d402      	bmi.n	800532e <HAL_SD_IRQHandler+0x102>
 8005328:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800532a:	0699      	lsls	r1, r3, #26
 800532c:	d502      	bpl.n	8005334 <HAL_SD_IRQHandler+0x108>
        HAL_SD_TxCpltCallback(hsd);
 800532e:	4620      	mov	r0, r4
 8005330:	f019 f922 	bl	801e578 <HAL_SD_TxCpltCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8005334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005336:	07da      	lsls	r2, r3, #31
 8005338:	d4ac      	bmi.n	8005294 <HAL_SD_IRQHandler+0x68>
 800533a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800533c:	079b      	lsls	r3, r3, #30
 800533e:	d4a9      	bmi.n	8005294 <HAL_SD_IRQHandler+0x68>
 8005340:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_IDMABTC) != RESET)
 8005342:	00d1      	lsls	r1, r2, #3
 8005344:	d5e0      	bpl.n	8005308 <HAL_SD_IRQHandler+0xdc>
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 8005346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005348:	f013 0f04 	tst.w	r3, #4
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800534c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 800534e:	d02c      	beq.n	80053aa <HAL_SD_IRQHandler+0x17e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005350:	069b      	lsls	r3, r3, #26
 8005352:	d555      	bpl.n	8005400 <HAL_SD_IRQHandler+0x1d4>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8005354:	f000 fbdc 	bl	8005b10 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005360:	e7d2      	b.n	8005308 <HAL_SD_IRQHandler+0xdc>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005362:	6a05      	ldr	r5, [r0, #32]
 8005364:	f105 0620 	add.w	r6, r5, #32
 8005368:	e000      	b.n	800536c <HAL_SD_IRQHandler+0x140>
 800536a:	6823      	ldr	r3, [r4, #0]
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 800536c:	4629      	mov	r1, r5
 800536e:	4618      	mov	r0, r3
 8005370:	3504      	adds	r5, #4
 8005372:	f002 f909 	bl	8007588 <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8005376:	42ae      	cmp	r6, r5
 8005378:	d1f7      	bne.n	800536a <HAL_SD_IRQHandler+0x13e>
  }
  
  hsd->pTxBuffPtr += 8;
 800537a:	6a23      	ldr	r3, [r4, #32]
 800537c:	3320      	adds	r3, #32
 800537e:	6223      	str	r3, [r4, #32]
 8005380:	bd70      	pop	{r4, r5, r6, pc}
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005382:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8005384:	1f35      	subs	r5, r6, #4
 8005386:	361c      	adds	r6, #28
 8005388:	e000      	b.n	800538c <HAL_SD_IRQHandler+0x160>
 800538a:	6823      	ldr	r3, [r4, #0]
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 800538c:	4618      	mov	r0, r3
 800538e:	f002 f8f7 	bl	8007580 <SDMMC_ReadFIFO>
 8005392:	f845 0f04 	str.w	r0, [r5, #4]!
  for(count = 0; count < 8; count++)
 8005396:	42b5      	cmp	r5, r6
 8005398:	d1f7      	bne.n	800538a <HAL_SD_IRQHandler+0x15e>
  hsd->pRxBuffPtr += 8;
 800539a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800539c:	3320      	adds	r3, #32
 800539e:	62a3      	str	r3, [r4, #40]	; 0x28
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SD_TxCpltCallback(hsd);
 80053a2:	4620      	mov	r0, r4
 80053a4:	f019 f8e8 	bl	801e578 <HAL_SD_TxCpltCallback>
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80053aa:	069a      	lsls	r2, r3, #26
 80053ac:	d52b      	bpl.n	8005406 <HAL_SD_IRQHandler+0x1da>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 80053ae:	f000 fbb1 	bl	8005b14 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
 80053b2:	e7d1      	b.n	8005358 <HAL_SD_IRQHandler+0x12c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80053b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        hsd->State = HAL_SD_STATE_READY;
 80053b6:	2501      	movs	r5, #1
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80053b8:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80053bc:	63d9      	str	r1, [r3, #60]	; 0x3c
        HAL_SD_ErrorCallback(hsd);
 80053be:	4620      	mov	r0, r4
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80053c0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80053c2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80053c6:	f7ff ff2f 	bl	8005228 <HAL_SD_ErrorCallback>
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
          hsd->ErrorCode |= errorstate;
 80053cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053ce:	4318      	orrs	r0, r3
 80053d0:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80053d2:	4620      	mov	r0, r4
 80053d4:	f7ff ff28 	bl	8005228 <HAL_SD_ErrorCallback>
 80053d8:	e74f      	b.n	800527a <HAL_SD_IRQHandler+0x4e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053da:	4618      	mov	r0, r3
 80053dc:	f002 f95c 	bl	8007698 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d09b      	beq.n	800531c <HAL_SD_IRQHandler+0xf0>
          hsd->ErrorCode |= errorstate;
 80053e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053e6:	4318      	orrs	r0, r3
 80053e8:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7ff ff1c 	bl	8005228 <HAL_SD_ErrorCallback>
 80053f0:	e794      	b.n	800531c <HAL_SD_IRQHandler+0xf0>
      hsd->State = HAL_SD_STATE_READY;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);   
 80053f8:	4620      	mov	r0, r4
 80053fa:	f7ff ff15 	bl	8005228 <HAL_SD_ErrorCallback>
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8005400:	f000 fb82 	bl	8005b08 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
 8005404:	e7a8      	b.n	8005358 <HAL_SD_IRQHandler+0x12c>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8005406:	f000 fb81 	bl	8005b0c <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 800540a:	e7a5      	b.n	8005358 <HAL_SD_IRQHandler+0x12c>
 800540c:	18000f3a 	.word	0x18000f3a

08005410 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8005410:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 8005412:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->NSAC = (uint8_t)tmp;
 8005414:	f3c3 2207 	ubfx	r2, r3, #8, #8
{
 8005418:	4604      	mov	r4, r0
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800541a:	0f9f      	lsrs	r7, r3, #30
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800541c:	f3c3 6683 	ubfx	r6, r3, #26, #4
  pCSD->Reserved1      = tmp & 0x03;
 8005420:	f3c3 6501 	ubfx	r5, r3, #24, #2
  pCSD->TAAC = (uint8_t)tmp;
 8005424:	f3c3 4007 	ubfx	r0, r3, #16, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005428:	b2db      	uxtb	r3, r3
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800542a:	700f      	strb	r7, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800542c:	704e      	strb	r6, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800542e:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8005430:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8005432:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005434:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8005436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005438:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800543e:	88c8      	ldrh	r0, [r1, #6]
 8005440:	f3c3 5503 	ubfx	r5, r3, #20, #4
 8005444:	b280      	uxth	r0, r0
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8005446:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800544a:	4328      	orrs	r0, r5
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800544c:	f3c3 4503 	ubfx	r5, r3, #16, #4
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005450:	80c8      	strh	r0, [r1, #6]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8005452:	ea4f 1ed2 	mov.w	lr, r2, lsr #7
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005456:	720d      	strb	r5, [r1, #8]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8005458:	2000      	movs	r0, #0
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800545a:	f3c2 1780 	ubfx	r7, r2, #6, #1
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800545e:	f3c2 1640 	ubfx	r6, r2, #5, #1
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8005462:	f3c2 1500 	ubfx	r5, r2, #4, #1
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8005466:	f881 e009 	strb.w	lr, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800546a:	728f      	strb	r7, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800546c:	72ce      	strb	r6, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800546e:	730d      	strb	r5, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8005470:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005472:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005474:	2800      	cmp	r0, #0
 8005476:	f040 8083 	bne.w	8005580 <HAL_SD_GetCardCSD+0x170>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800547a:	0292      	lsls	r2, r2, #10
 800547c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005480:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8005482:	6908      	ldr	r0, [r1, #16]
 8005484:	009a      	lsls	r2, r3, #2
 8005486:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 800548a:	4302      	orrs	r2, r0
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800548c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    pCSD->DeviceSize |= (tmp) << 2;
 800548e:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8005490:	6908      	ldr	r0, [r1, #16]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8005492:	0bda      	lsrs	r2, r3, #15
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8005494:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 8005498:	6108      	str	r0, [r1, #16]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 800549a:	f002 0206 	and.w	r2, r2, #6
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800549e:	f3c3 5542 	ubfx	r5, r3, #21, #3
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80054a2:	f3c3 4082 	ubfx	r0, r3, #18, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80054a6:	f3c3 67c2 	ubfx	r7, r3, #27, #3
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80054aa:	f3c3 6602 	ubfx	r6, r3, #24, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80054ae:	750f      	strb	r7, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80054b0:	754e      	strb	r6, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80054b2:	758d      	strb	r5, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80054b4:	75c8      	strb	r0, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80054b6:	760a      	strb	r2, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80054b8:	7e0a      	ldrb	r2, [r1, #24]
 80054ba:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 80054be:	4302      	orrs	r2, r0
 80054c0:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80054c2:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80054c4:	7e08      	ldrb	r0, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80054c6:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80054c8:	3002      	adds	r0, #2
 80054ca:	4082      	lsls	r2, r0
 80054cc:	64e2      	str	r2, [r4, #76]	; 0x4c
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80054ce:	7a0d      	ldrb	r5, [r1, #8]
 80054d0:	2001      	movs	r0, #1
 80054d2:	40a8      	lsls	r0, r5
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80054d4:	0a45      	lsrs	r5, r0, #9
 80054d6:	fb02 f205 	mul.w	r2, r2, r5
    hsd->SdCard.LogBlockSize = 512;
 80054da:	f44f 7500 	mov.w	r5, #512	; 0x200
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80054de:	6562      	str	r2, [r4, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80054e0:	6520      	str	r0, [r4, #80]	; 0x50
 80054e2:	f3c3 2207 	ubfx	r2, r3, #8, #8
    hsd->SdCard.LogBlockSize = 512;
 80054e6:	65a5      	str	r5, [r4, #88]	; 0x58
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80054e8:	0050      	lsls	r0, r2, #1
 80054ea:	f000 007e 	and.w	r0, r0, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80054ee:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80054f2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80054f4:	7688      	strb	r0, [r1, #26]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80054f6:	7e8a      	ldrb	r2, [r1, #26]
 80054f8:	f3c3 10c0 	ubfx	r0, r3, #7, #1
 80054fc:	4302      	orrs	r2, r0
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80054fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005502:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005504:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8005506:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8005508:	0d9a      	lsrs	r2, r3, #22
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800550a:	0fdd      	lsrs	r5, r3, #31
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800550c:	f3c3 7441 	ubfx	r4, r3, #29, #2
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005510:	f3c3 6082 	ubfx	r0, r3, #26, #3
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8005514:	f002 020c 	and.w	r2, r2, #12
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8005518:	770d      	strb	r5, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800551a:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800551c:	7788      	strb	r0, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800551e:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005520:	7fca      	ldrb	r2, [r1, #31]
 8005522:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8005526:	4302      	orrs	r2, r0
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005528:	f3c3 5640 	ubfx	r6, r3, #21, #1
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800552c:	f3c3 4500 	ubfx	r5, r3, #16, #1
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8005530:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3           = 0;
 8005534:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005536:	77ca      	strb	r2, [r1, #31]
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8005538:	f3c3 3e80 	ubfx	lr, r3, #14, #1
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800553c:	f881 6020 	strb.w	r6, [r1, #32]
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8005540:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->Reserved3           = 0;
 8005544:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8005548:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800554c:	f881 5022 	strb.w	r5, [r1, #34]	; 0x22
  pCSD->Reserved4 = 1;
 8005550:	2201      	movs	r2, #1
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8005552:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8005556:	f3c3 2581 	ubfx	r5, r3, #10, #2
  pCSD->ECC              = (tmp & 0x03);
 800555a:	f3c3 2401 	ubfx	r4, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800555e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8005562:	f881 e024 	strb.w	lr, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8005566:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800556a:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800556e:	f881 5027 	strb.w	r5, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8005572:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8005576:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800557a:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 800557e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005580:	2801      	cmp	r0, #1
 8005582:	d00b      	beq.n	800559c <HAL_SD_GetCardCSD+0x18c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	4a13      	ldr	r2, [pc, #76]	; (80055d4 <HAL_SD_GetCardCSD+0x1c4>)
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800558a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800558c:	2201      	movs	r2, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800558e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005592:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005594:	4610      	mov	r0, r2
    hsd->State = HAL_SD_STATE_READY;
 8005596:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 800559a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80055a2:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80055a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    pCSD->DeviceSize |= (tmp << 8);
 80055a6:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80055a8:	0e18      	lsrs	r0, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 80055aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80055ae:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80055b0:	6908      	ldr	r0, [r1, #16]
 80055b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80055b6:	4302      	orrs	r2, r0
 80055b8:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80055ba:	690a      	ldr	r2, [r1, #16]
 80055bc:	0292      	lsls	r2, r2, #10
 80055be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80055c2:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80055c6:	64e2      	str	r2, [r4, #76]	; 0x4c
 80055c8:	6562      	str	r2, [r4, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80055ca:	6520      	str	r0, [r4, #80]	; 0x50
 80055cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80055d0:	65a0      	str	r0, [r4, #88]	; 0x58
 80055d2:	e789      	b.n	80054e8 <HAL_SD_GetCardCSD+0xd8>
 80055d4:	1fe00fff 	.word	0x1fe00fff

080055d8 <HAL_SD_InitCard>:
{
 80055d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80055da:	6982      	ldr	r2, [r0, #24]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80055dc:	6805      	ldr	r5, [r0, #0]
{
 80055de:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80055e0:	2300      	movs	r3, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80055e2:	213c      	movs	r1, #60	; 0x3c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80055e4:	2a01      	cmp	r2, #1
{
 80055e6:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80055e8:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80055ea:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80055ee:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80055f0:	910b      	str	r1, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80055f2:	d025      	beq.n	8005640 <HAL_SD_InitCard+0x68>
  status = SDMMC_Init(hsd->Instance, Init);
 80055f4:	ab0a      	add	r3, sp, #40	; 0x28
 80055f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80055fe:	ab07      	add	r3, sp, #28
 8005600:	4628      	mov	r0, r5
 8005602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005604:	f001 ffa2 	bl	800754c <SDMMC_Init>
  if(status != HAL_OK)
 8005608:	b118      	cbz	r0, 8005612 <HAL_SD_InitCard+0x3a>
    return HAL_ERROR;
 800560a:	2501      	movs	r5, #1
}
 800560c:	4628      	mov	r0, r5
 800560e:	b019      	add	sp, #100	; 0x64
 8005610:	bdf0      	pop	{r4, r5, r6, r7, pc}
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005612:	6820      	ldr	r0, [r4, #0]
 8005614:	f001 ffbe 	bl	8007594 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8005618:	4605      	mov	r5, r0
 800561a:	2800      	cmp	r0, #0
 800561c:	d1f5      	bne.n	800560a <HAL_SD_InitCard+0x32>
  HAL_Delay(2U);
 800561e:	2002      	movs	r0, #2
 8005620:	f7fb fd04 	bl	800102c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005624:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8005626:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005628:	f002 f85c 	bl	80076e4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800562c:	b168      	cbz	r0, 800564a <HAL_SD_InitCard+0x72>
    hsd->State = HAL_SD_STATE_READY;
 800562e:	2501      	movs	r5, #1
 8005630:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005634:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005636:	4318      	orrs	r0, r3
 8005638:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800563a:	4628      	mov	r0, r5
 800563c:	b019      	add	sp, #100	; 0x64
 800563e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	602b      	str	r3, [r5, #0]
 8005648:	e7d4      	b.n	80055f4 <HAL_SD_InitCard+0x1c>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800564a:	6820      	ldr	r0, [r4, #0]
 800564c:	f002 f878 	bl	8007740 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005650:	b948      	cbnz	r0, 8005666 <HAL_SD_InitCard+0x8e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005652:	2301      	movs	r3, #1
 8005654:	6423      	str	r3, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005656:	2100      	movs	r1, #0
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	f002 f8b3 	bl	80077c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800565e:	b120      	cbz	r0, 800566a <HAL_SD_InitCard+0x92>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005660:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005664:	e7e3      	b.n	800562e <HAL_SD_InitCard+0x56>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005666:	6425      	str	r5, [r4, #64]	; 0x40
 8005668:	e7f5      	b.n	8005656 <HAL_SD_InitCard+0x7e>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800566a:	4f62      	ldr	r7, [pc, #392]	; (80057f4 <HAL_SD_InitCard+0x21c>)
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 800566c:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8005670:	9b06      	ldr	r3, [sp, #24]
 8005672:	42b3      	cmp	r3, r6
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005674:	f04f 0100 	mov.w	r1, #0
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005678:	d814      	bhi.n	80056a4 <HAL_SD_InitCard+0xcc>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800567a:	6820      	ldr	r0, [r4, #0]
 800567c:	f002 f8a2 	bl	80077c4 <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005680:	4639      	mov	r1, r7
      if(errorstate != HAL_SD_ERROR_NONE)
 8005682:	2800      	cmp	r0, #0
 8005684:	d1d3      	bne.n	800562e <HAL_SD_InitCard+0x56>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005686:	6820      	ldr	r0, [r4, #0]
 8005688:	f002 f8ac 	bl	80077e4 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800568c:	4601      	mov	r1, r0
 800568e:	2800      	cmp	r0, #0
 8005690:	d1e6      	bne.n	8005660 <HAL_SD_InitCard+0x88>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	f001 ff92 	bl	80075bc <SDMMC_GetResponse>
      count++;
 8005698:	9b06      	ldr	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 800569a:	2800      	cmp	r0, #0
      count++;
 800569c:	f103 0301 	add.w	r3, r3, #1
 80056a0:	9306      	str	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80056a2:	dae5      	bge.n	8005670 <HAL_SD_InitCard+0x98>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 80056a4:	9a06      	ldr	r2, [sp, #24]
 80056a6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d902      	bls.n	80056b4 <HAL_SD_InitCard+0xdc>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80056ae:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80056b2:	e7bc      	b.n	800562e <HAL_SD_InitCard+0x56>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80056b4:	0047      	lsls	r7, r0, #1
 80056b6:	d504      	bpl.n	80056c2 <HAL_SD_InitCard+0xea>
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80056b8:	69a3      	ldr	r3, [r4, #24]
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80056ba:	2201      	movs	r2, #1
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80056bc:	4293      	cmp	r3, r2
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80056be:	63e2      	str	r2, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80056c0:	d065      	beq.n	800578e <HAL_SD_InitCard+0x1b6>
 80056c2:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80056ca:	f001 ff73 	bl	80075b4 <SDMMC_GetPowerState>
 80056ce:	b910      	cbnz	r0, 80056d6 <HAL_SD_InitCard+0xfe>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80056d4:	e7ab      	b.n	800562e <HAL_SD_InitCard+0x56>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80056d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d112      	bne.n	8005702 <HAL_SD_InitCard+0x12a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80056dc:	2104      	movs	r1, #4
 80056de:	6820      	ldr	r0, [r4, #0]
 80056e0:	f001 ff6c 	bl	80075bc <SDMMC_GetResponse>
 80056e4:	0d00      	lsrs	r0, r0, #20
 80056e6:	6460      	str	r0, [r4, #68]	; 0x44
  HAL_SD_GetCardCSD(hsd, &CSD);
 80056e8:	a90d      	add	r1, sp, #52	; 0x34
 80056ea:	4620      	mov	r0, r4
 80056ec:	f7ff fe90 	bl	8005410 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80056f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80056f2:	6820      	ldr	r0, [r4, #0]
 80056f4:	0412      	lsls	r2, r2, #16
 80056f6:	2300      	movs	r3, #0
 80056f8:	f001 ffe4 	bl	80076c4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d085      	beq.n	800560c <HAL_SD_InitCard+0x34>
 8005700:	e795      	b.n	800562e <HAL_SD_InitCard+0x56>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005702:	6820      	ldr	r0, [r4, #0]
 8005704:	f002 f88e 	bl	8007824 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005708:	2800      	cmp	r0, #0
 800570a:	d190      	bne.n	800562e <HAL_SD_InitCard+0x56>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800570c:	4601      	mov	r1, r0
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	f001 ff54 	bl	80075bc <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005714:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005716:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	f001 ff4f 	bl	80075bc <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800571e:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005720:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005722:	6820      	ldr	r0, [r4, #0]
 8005724:	f001 ff4a 	bl	80075bc <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005728:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800572a:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800572c:	6820      	ldr	r0, [r4, #0]
 800572e:	f001 ff45 	bl	80075bc <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005732:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005734:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005736:	2b03      	cmp	r3, #3
 8005738:	d0d0      	beq.n	80056dc <HAL_SD_InitCard+0x104>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800573a:	f10d 0116 	add.w	r1, sp, #22
 800573e:	6820      	ldr	r0, [r4, #0]
 8005740:	f002 f88c 	bl	800785c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005744:	2800      	cmp	r0, #0
 8005746:	f47f af72 	bne.w	800562e <HAL_SD_InitCard+0x56>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800574a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800574c:	2b03      	cmp	r3, #3
 800574e:	d0c5      	beq.n	80056dc <HAL_SD_InitCard+0x104>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005750:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8005754:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	0409      	lsls	r1, r1, #16
 800575a:	f002 f871 	bl	8007840 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800575e:	2800      	cmp	r0, #0
 8005760:	f47f af65 	bne.w	800562e <HAL_SD_InitCard+0x56>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005764:	4601      	mov	r1, r0
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	f001 ff28 	bl	80075bc <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800576c:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800576e:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	f001 ff23 	bl	80075bc <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005776:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005778:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800577a:	6820      	ldr	r0, [r4, #0]
 800577c:	f001 ff1e 	bl	80075bc <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005780:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005782:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	f001 ff19 	bl	80075bc <SDMMC_GetResponse>
 800578a:	66e0      	str	r0, [r4, #108]	; 0x6c
 800578c:	e7a6      	b.n	80056dc <HAL_SD_InitCard+0x104>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800578e:	01c6      	lsls	r6, r0, #7
 8005790:	d597      	bpl.n	80056c2 <HAL_SD_InitCard+0xea>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005796:	f44f 7100 	mov.w	r1, #512	; 0x200
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800579a:	f042 0203 	orr.w	r2, r2, #3
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800579e:	65e1      	str	r1, [r4, #92]	; 0x5c
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80057a0:	4618      	mov	r0, r3
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80057a2:	601a      	str	r2, [r3, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80057a4:	f002 f8d8 	bl	8007958 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 80057a8:	2800      	cmp	r0, #0
 80057aa:	f47f af40 	bne.w	800562e <HAL_SD_InitCard+0x56>
 80057ae:	6823      	ldr	r3, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP);
 80057b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b2:	0150      	lsls	r0, r2, #5
 80057b4:	d5fc      	bpl.n	80057b0 <HAL_SD_InitCard+0x1d8>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80057b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80057bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057be:	02d9      	lsls	r1, r3, #11
 80057c0:	f57f af4e 	bpl.w	8005660 <HAL_SD_InitCard+0x88>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80057c4:	2001      	movs	r0, #1
 80057c6:	f000 f909 	bl	80059dc <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80057ca:	6820      	ldr	r0, [r4, #0]
 80057cc:	6803      	ldr	r3, [r0, #0]
 80057ce:	f043 0302 	orr.w	r3, r3, #2
 80057d2:	6003      	str	r3, [r0, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND);
 80057d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057d6:	019a      	lsls	r2, r3, #6
 80057d8:	d5fc      	bpl.n	80057d4 <HAL_SD_InitCard+0x1fc>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80057da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057de:	6383      	str	r3, [r0, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80057e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057e2:	02db      	lsls	r3, r3, #11
 80057e4:	f53f af63 	bmi.w	80056ae <HAL_SD_InitCard+0xd6>
            hsd->Instance->POWER = 0x13; 
 80057e8:	2213      	movs	r2, #19
            hsd->Instance->ICR = 0xFFFFFFFF;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
            hsd->Instance->POWER = 0x13; 
 80057ee:	6002      	str	r2, [r0, #0]
            hsd->Instance->ICR = 0xFFFFFFFF;
 80057f0:	6383      	str	r3, [r0, #56]	; 0x38
 80057f2:	e767      	b.n	80056c4 <HAL_SD_InitCard+0xec>
 80057f4:	c1100000 	.word	0xc1100000

080057f8 <HAL_SD_GetCardInfo>:
{
 80057f8:	b4f0      	push	{r4, r5, r6, r7}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80057fa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80057fc:	6c07      	ldr	r7, [r0, #64]	; 0x40
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80057fe:	6c46      	ldr	r6, [r0, #68]	; 0x44
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005800:	6c85      	ldr	r5, [r0, #72]	; 0x48
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005802:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005804:	6d02      	ldr	r2, [r0, #80]	; 0x50
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005806:	600b      	str	r3, [r1, #0]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005808:	6d43      	ldr	r3, [r0, #84]	; 0x54
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800580a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800580c:	61c8      	str	r0, [r1, #28]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800580e:	604f      	str	r7, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005810:	608e      	str	r6, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005812:	60cd      	str	r5, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005814:	610c      	str	r4, [r1, #16]
}
 8005816:	2000      	movs	r0, #0
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005818:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800581a:	618b      	str	r3, [r1, #24]
}
 800581c:	bcf0      	pop	{r4, r5, r6, r7}
 800581e:	4770      	bx	lr

08005820 <HAL_SD_ConfigWideBusOperation>:
{
 8005820:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005822:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 8005824:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005826:	4293      	cmp	r3, r2
{
 8005828:	b08b      	sub	sp, #44	; 0x2c
 800582a:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 800582c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
{
 8005830:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005832:	d015      	beq.n	8005860 <HAL_SD_ConfigWideBusOperation+0x40>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005834:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005838:	d012      	beq.n	8005860 <HAL_SD_ConfigWideBusOperation+0x40>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800583a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800583e:	d030      	beq.n	80058a2 <HAL_SD_ConfigWideBusOperation+0x82>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005840:	2900      	cmp	r1, #0
 8005842:	d03d      	beq.n	80058c0 <HAL_SD_ConfigWideBusOperation+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005844:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800584a:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800584c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800584e:	b175      	cbz	r5, 800586e <HAL_SD_ConfigWideBusOperation+0x4e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	4a3a      	ldr	r2, [pc, #232]	; (800593c <HAL_SD_ConfigWideBusOperation+0x11c>)
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005856:	2001      	movs	r0, #1
 8005858:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 800585c:	b00b      	add	sp, #44	; 0x2c
 800585e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005860:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005866:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005868:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800586a:	2d00      	cmp	r5, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_SD_ConfigWideBusOperation+0x30>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800586e:	6922      	ldr	r2, [r4, #16]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005870:	6963      	ldr	r3, [r4, #20]
 8005872:	9308      	str	r3, [sp, #32]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005874:	9207      	str	r2, [sp, #28]
    SDMMC_Init(hsd->Instance, Init);
 8005876:	ab0a      	add	r3, sp, #40	; 0x28
 8005878:	e913 0007 	ldmdb	r3, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800587c:	6867      	ldr	r7, [r4, #4]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800587e:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 8005880:	9606      	str	r6, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 8005882:	6826      	ldr	r6, [r4, #0]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005884:	9305      	str	r3, [sp, #20]
    SDMMC_Init(hsd->Instance, Init);
 8005886:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800588a:	9704      	str	r7, [sp, #16]
    SDMMC_Init(hsd->Instance, Init);
 800588c:	ab04      	add	r3, sp, #16
 800588e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005890:	4630      	mov	r0, r6
 8005892:	f001 fe5b 	bl	800754c <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8005896:	2301      	movs	r3, #1
  return HAL_OK;
 8005898:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800589a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800589e:	b00b      	add	sp, #44	; 0x2c
 80058a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t scr[2] = {0, 0};
 80058a2:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058a4:	4619      	mov	r1, r3
 80058a6:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80058a8:	9304      	str	r3, [sp, #16]
 80058aa:	9305      	str	r3, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058ac:	f001 fe86 	bl	80075bc <SDMMC_GetResponse>
 80058b0:	0180      	lsls	r0, r0, #6
 80058b2:	d51e      	bpl.n	80058f2 <HAL_SD_ConfigWideBusOperation+0xd2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80058b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 80058b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058ba:	4318      	orrs	r0, r3
 80058bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80058be:	e7c5      	b.n	800584c <HAL_SD_ConfigWideBusOperation+0x2c>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058c0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80058c2:	9104      	str	r1, [sp, #16]
 80058c4:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058c6:	f001 fe79 	bl	80075bc <SDMMC_GetResponse>
 80058ca:	0182      	lsls	r2, r0, #6
 80058cc:	d505      	bpl.n	80058da <HAL_SD_ConfigWideBusOperation+0xba>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80058ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 80058d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80058d4:	4308      	orrs	r0, r1
 80058d6:	63a0      	str	r0, [r4, #56]	; 0x38
 80058d8:	e7b8      	b.n	800584c <HAL_SD_ConfigWideBusOperation+0x2c>
  errorstate = SD_FindSCR(hsd, scr);
 80058da:	a904      	add	r1, sp, #16
 80058dc:	4620      	mov	r0, r4
 80058de:	f7ff fb31 	bl	8004f44 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d1f5      	bne.n	80058d2 <HAL_SD_ConfigWideBusOperation+0xb2>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80058e6:	9b05      	ldr	r3, [sp, #20]
 80058e8:	03db      	lsls	r3, r3, #15
 80058ea:	d40e      	bmi.n	800590a <HAL_SD_ConfigWideBusOperation+0xea>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058ec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80058f0:	e7ef      	b.n	80058d2 <HAL_SD_ConfigWideBusOperation+0xb2>
  errorstate = SD_FindSCR(hsd, scr);
 80058f2:	a904      	add	r1, sp, #16
 80058f4:	4620      	mov	r0, r4
 80058f6:	f7ff fb25 	bl	8004f44 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d1dc      	bne.n	80058b8 <HAL_SD_ConfigWideBusOperation+0x98>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80058fe:	9b05      	ldr	r3, [sp, #20]
 8005900:	0359      	lsls	r1, r3, #13
 8005902:	d40e      	bmi.n	8005922 <HAL_SD_ConfigWideBusOperation+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005904:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005908:	e7d6      	b.n	80058b8 <HAL_SD_ConfigWideBusOperation+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800590a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	0409      	lsls	r1, r1, #16
 8005910:	f001 ff58 	bl	80077c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005914:	2800      	cmp	r0, #0
 8005916:	d1dc      	bne.n	80058d2 <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8005918:	4601      	mov	r1, r0
 800591a:	6820      	ldr	r0, [r4, #0]
 800591c:	f002 f81a 	bl	8007954 <SDMMC_CmdBusWidth>
 8005920:	e7d7      	b.n	80058d2 <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005922:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	0409      	lsls	r1, r1, #16
 8005928:	f001 ff4c 	bl	80077c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800592c:	2800      	cmp	r0, #0
 800592e:	d1c3      	bne.n	80058b8 <HAL_SD_ConfigWideBusOperation+0x98>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005930:	2102      	movs	r1, #2
 8005932:	6820      	ldr	r0, [r4, #0]
 8005934:	f002 f80e 	bl	8007954 <SDMMC_CmdBusWidth>
 8005938:	e7be      	b.n	80058b8 <HAL_SD_ConfigWideBusOperation+0x98>
 800593a:	bf00      	nop
 800593c:	1fe00fff 	.word	0x1fe00fff

08005940 <HAL_SD_Init>:
{ 
 8005940:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 8005942:	b160      	cbz	r0, 800595e <HAL_SD_Init+0x1e>
  if(hsd->State == HAL_SD_STATE_RESET)
 8005944:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005948:	4604      	mov	r4, r0
 800594a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800594e:	b1db      	cbz	r3, 8005988 <HAL_SD_Init+0x48>
  hsd->State = HAL_SD_STATE_BUSY;
 8005950:	2303      	movs	r3, #3
 8005952:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005956:	4620      	mov	r0, r4
 8005958:	f7ff fe3e 	bl	80055d8 <HAL_SD_InitCard>
 800595c:	b110      	cbz	r0, 8005964 <HAL_SD_Init+0x24>
    return HAL_ERROR;
 800595e:	2501      	movs	r5, #1
}
 8005960:	4628      	mov	r0, r5
 8005962:	bd38      	pop	{r3, r4, r5, pc}
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005964:	68e1      	ldr	r1, [r4, #12]
 8005966:	4620      	mov	r0, r4
 8005968:	f7ff ff5a 	bl	8005820 <HAL_SD_ConfigWideBusOperation>
 800596c:	4605      	mov	r5, r0
 800596e:	2800      	cmp	r0, #0
 8005970:	d1f5      	bne.n	800595e <HAL_SD_Init+0x1e>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005972:	69a3      	ldr	r3, [r4, #24]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d00b      	beq.n	8005990 <HAL_SD_Init+0x50>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005978:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 800597a:	2201      	movs	r2, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800597c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800597e:	4628      	mov	r0, r5
  hsd->Context = SD_CONTEXT_NONE;
 8005980:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005982:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8005986:	bd38      	pop	{r3, r4, r5, pc}
    hsd->Lock = HAL_UNLOCKED;
 8005988:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800598a:	f01c fb37 	bl	8021ffc <HAL_SD_MspInit>
 800598e:	e7df      	b.n	8005950 <HAL_SD_Init+0x10>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 8005990:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005996:	d002      	beq.n	800599e <HAL_SD_Init+0x5e>
 8005998:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d1ec      	bne.n	8005978 <HAL_SD_Init+0x38>
      hsd->Instance->CLKCR |= 0x00100000;
 800599e:	6822      	ldr	r2, [r4, #0]
 80059a0:	6853      	ldr	r3, [r2, #4]
 80059a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a6:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_OK)
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 f819 	bl	80059e0 <HAL_SDEx_HighSpeed>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d0e2      	beq.n	8005978 <HAL_SD_Init+0x38>
 80059b2:	e7d4      	b.n	800595e <HAL_SD_Init+0x1e>

080059b4 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80059b4:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 80059b6:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80059b8:	0409      	lsls	r1, r1, #16
{
 80059ba:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	f001 ffa9 	bl	8007914 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80059c2:	b120      	cbz	r0, 80059ce <HAL_SD_GetCardState+0x1a>
    hsd->ErrorCode |= errorstate;
 80059c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80059c6:	4308      	orrs	r0, r1
 80059c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80059ca:	2000      	movs	r0, #0
}
 80059cc:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80059ce:	4601      	mov	r1, r0
 80059d0:	6820      	ldr	r0, [r4, #0]
 80059d2:	f001 fdf3 	bl	80075bc <SDMMC_GetResponse>
 80059d6:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80059da:	bd10      	pop	{r4, pc}

080059dc <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transciver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop

080059e0 <HAL_SDEx_HighSpeed>:
{
 80059e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	4604      	mov	r4, r0
 80059e6:	b096      	sub	sp, #88	; 0x58
  uint8_t SD_hs[64]  = {0};
 80059e8:	2540      	movs	r5, #64	; 0x40
 80059ea:	462a      	mov	r2, r5
 80059ec:	2100      	movs	r1, #0
 80059ee:	a806      	add	r0, sp, #24
 80059f0:	f01c fe85 	bl	80226fe <memset>
  uint32_t Timeout = HAL_GetTick();
 80059f4:	f7fb fb14 	bl	8001020 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80059f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059fa:	b92b      	cbnz	r3, 8005a08 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 80059fc:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 8005a00:	4630      	mov	r0, r6
 8005a02:	b016      	add	sp, #88	; 0x58
 8005a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8005a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0c:	d004      	beq.n	8005a18 <HAL_SDEx_HighSpeed+0x38>
  uint32_t errorstate = HAL_OK;
 8005a0e:	2600      	movs	r6, #0
}
 8005a10:	4630      	mov	r0, r6
 8005a12:	b016      	add	sp, #88	; 0x58
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 8005a18:	f8d4 8018 	ldr.w	r8, [r4, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8005a1c:	f1b8 0f01 	cmp.w	r8, #1
 8005a20:	d1f5      	bne.n	8005a0e <HAL_SDEx_HighSpeed+0x2e>
 8005a22:	4607      	mov	r7, r0
    hsd->Instance->DCTRL = 0;
 8005a24:	6820      	ldr	r0, [r4, #0]
 8005a26:	2300      	movs	r3, #0
 8005a28:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	f001 fde4 	bl	80075f8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_OK)
 8005a30:	4606      	mov	r6, r0
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d1e4      	bne.n	8005a00 <HAL_SDEx_HighSpeed+0x20>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a36:	f04f 3eff 	mov.w	lr, #4294967295
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005a3a:	2260      	movs	r2, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a3c:	2302      	movs	r3, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a3e:	9004      	str	r0, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005a40:	4669      	mov	r1, sp
 8005a42:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a44:	f8cd e000 	str.w	lr, [sp]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005a48:	9202      	str	r2, [sp, #8]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a4a:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DataLength    = 64;
 8005a4c:	9501      	str	r5, [sp, #4]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005a4e:	f8cd 8014 	str.w	r8, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005a52:	f001 fdbd 	bl	80075d0 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 8005a56:	492a      	ldr	r1, [pc, #168]	; (8005b00 <HAL_SDEx_HighSpeed+0x120>)
 8005a58:	6820      	ldr	r0, [r4, #0]
 8005a5a:	f001 ff6b 	bl	8007934 <SDMMC_CmdSwitch>
    if(errorstate != HAL_OK)
 8005a5e:	4606      	mov	r6, r0
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d1cd      	bne.n	8005a00 <HAL_SDEx_HighSpeed+0x20>
 8005a64:	ad06      	add	r5, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8005a66:	f240 5a2a 	movw	sl, #1322	; 0x52a
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a6e:	ea13 0f0a 	tst.w	r3, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005a72:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8005a74:	d11b      	bne.n	8005aae <HAL_SDEx_HighSpeed+0xce>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	d50c      	bpl.n	8005a94 <HAL_SDEx_HighSpeed+0xb4>
 8005a7a:	f1a5 0804 	sub.w	r8, r5, #4
 8005a7e:	f105 091c 	add.w	r9, r5, #28
 8005a82:	e000      	b.n	8005a86 <HAL_SDEx_HighSpeed+0xa6>
 8005a84:	6820      	ldr	r0, [r4, #0]
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005a86:	f001 fd7b 	bl	8007580 <SDMMC_ReadFIFO>
 8005a8a:	f848 0f04 	str.w	r0, [r8, #4]!
        for (count = 0; count < 8; count++)
 8005a8e:	45c8      	cmp	r8, r9
 8005a90:	d1f8      	bne.n	8005a84 <HAL_SDEx_HighSpeed+0xa4>
        tempbuff += 8;
 8005a92:	3520      	adds	r5, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8005a94:	f7fb fac4 	bl	8001020 <HAL_GetTick>
 8005a98:	1bc0      	subs	r0, r0, r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d1e5      	bne.n	8005a6a <HAL_SDEx_HighSpeed+0x8a>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8005aa2:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005aa4:	63a2      	str	r2, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8005aa6:	2603      	movs	r6, #3
        hsd->State= HAL_SD_STATE_READY;
 8005aa8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8005aac:	e7a8      	b.n	8005a00 <HAL_SDEx_HighSpeed+0x20>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005aae:	071d      	lsls	r5, r3, #28
 8005ab0:	d405      	bmi.n	8005abe <HAL_SDEx_HighSpeed+0xde>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005ab2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ab4:	0799      	lsls	r1, r3, #30
 8005ab6:	d505      	bpl.n	8005ac4 <HAL_SDEx_HighSpeed+0xe4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005ab8:	2602      	movs	r6, #2
 8005aba:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 8005abc:	e7a0      	b.n	8005a00 <HAL_SDEx_HighSpeed+0x20>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005abe:	2308      	movs	r3, #8
 8005ac0:	6383      	str	r3, [r0, #56]	; 0x38
      return errorstate;
 8005ac2:	e79d      	b.n	8005a00 <HAL_SDEx_HighSpeed+0x20>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005ac4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ac6:	069a      	lsls	r2, r3, #26
 8005ac8:	d502      	bpl.n	8005ad0 <HAL_SDEx_HighSpeed+0xf0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005aca:	2620      	movs	r6, #32
 8005acc:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 8005ace:	e797      	b.n	8005a00 <HAL_SDEx_HighSpeed+0x20>
    if ((SD_hs[13]& 2) != 2)
 8005ad0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ad4:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <HAL_SDEx_HighSpeed+0x124>)
 8005ad6:	6382      	str	r2, [r0, #56]	; 0x38
    if ((SD_hs[13]& 2) != 2)
 8005ad8:	079b      	lsls	r3, r3, #30
 8005ada:	d502      	bpl.n	8005ae2 <HAL_SDEx_HighSpeed+0x102>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005adc:	2001      	movs	r0, #1
 8005ade:	f7ff ff7d 	bl	80059dc <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ae6:	6820      	ldr	r0, [r4, #0]
 8005ae8:	f001 fd86 	bl	80075f8 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d08e      	beq.n	8005a0e <HAL_SDEx_HighSpeed+0x2e>
      hsd->State = HAL_SD_STATE_READY;
 8005af0:	2601      	movs	r6, #1
 8005af2:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 8005af6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005af8:	4318      	orrs	r0, r3
 8005afa:	63a0      	str	r0, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005afc:	e780      	b.n	8005a00 <HAL_SDEx_HighSpeed+0x20>
 8005afe:	bf00      	nop
 8005b00:	80ffff01 	.word	0x80ffff01
 8005b04:	18000f3a 	.word	0x18000f3a

08005b08 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop

08005b0c <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop

08005b10 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop

08005b14 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop

08005b18 <HAL_SPI_TransmitReceive.part.4>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8005b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b1c:	4604      	mov	r4, r0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8005b24:	4699      	mov	r9, r3
 8005b26:	460f      	mov	r7, r1
 8005b28:	4615      	mov	r5, r2
 8005b2a:	f8dd 8020 	ldr.w	r8, [sp, #32]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b2e:	f7fb fa77 	bl	8001020 <HAL_GetTick>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b32:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	hspi->TxISR       = NULL;


  /* Set the Rx Fifo threshold */
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b36:	6822      	ldr	r2, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b38:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b3a:	bf18      	it	ne
 8005b3c:	2305      	movne	r3, #5
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3e:	f04f 0100 	mov.w	r1, #0
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b42:	bf18      	it	ne
 8005b44:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b48:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8005b4a:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8005b4e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b52:	6853      	ldr	r3, [r2, #4]
  hspi->RxXferSize  = Size;
 8005b54:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
	hspi->TxXferSize  = Size;
 8005b5c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b60:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b62:	63a7      	str	r7, [r4, #56]	; 0x38
	hspi->TxISR       = NULL;
 8005b64:	6521      	str	r1, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005b66:	4606      	mov	r6, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b68:	6053      	str	r3, [r2, #4]
  uint32_t txallowed = 1U;
 8005b6a:	f04f 0901 	mov.w	r9, #1


    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	b923      	cbnz	r3, 8005b7e <HAL_SPI_TransmitReceive.part.4+0x66>
 8005b74:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8005b78:	b280      	uxth	r0, r0
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d03c      	beq.n	8005bf8 <HAL_SPI_TransmitReceive.part.4+0xe0>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005b7e:	f1b9 0f00 	cmp.w	r9, #0
 8005b82:	d013      	beq.n	8005bac <HAL_SPI_TransmitReceive.part.4+0x94>
 8005b84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	b183      	cbz	r3, 8005bac <HAL_SPI_TransmitReceive.part.4+0x94>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	0791      	lsls	r1, r2, #30
 8005b90:	d50c      	bpl.n	8005bac <HAL_SPI_TransmitReceive.part.4+0x94>
      {
        if (hspi->TxXferCount > 1U)
 8005b92:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005b94:	b292      	uxth	r2, r2
 8005b96:	2a01      	cmp	r2, #1
 8005b98:	d949      	bls.n	8005c2e <HAL_SPI_TransmitReceive.part.4+0x116>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005b9a:	f837 2b02 	ldrh.w	r2, [r7], #2
 8005b9e:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
 8005ba0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ba2:	3b02      	subs	r3, #2
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
          hspi->TxXferCount--;
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ba8:	f04f 0900 	mov.w	r9, #0
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005bac:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	b1c3      	cbz	r3, 8005be6 <HAL_SPI_TransmitReceive.part.4+0xce>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	07d2      	lsls	r2, r2, #31
 8005bba:	d514      	bpl.n	8005be6 <HAL_SPI_TransmitReceive.part.4+0xce>
      {
        if (hspi->RxXferCount > 1U)
 8005bbc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005bc0:	b292      	uxth	r2, r2
 8005bc2:	2a01      	cmp	r2, #1
 8005bc4:	d920      	bls.n	8005c08 <HAL_SPI_TransmitReceive.part.4+0xf0>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	f825 2b02 	strh.w	r2, [r5], #2
          pRxData += sizeof(uint16_t);
          hspi->RxXferCount -= 2U;
 8005bcc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005bd0:	3a02      	subs	r2, #2
 8005bd2:	b292      	uxth	r2, r2
 8005bd4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005bd8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005bdc:	b292      	uxth	r2, r2
 8005bde:	2a01      	cmp	r2, #1
 8005be0:	d91e      	bls.n	8005c20 <HAL_SPI_TransmitReceive.part.4+0x108>
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005be2:	f04f 0901 	mov.w	r9, #1
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005be6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005bea:	d0c0      	beq.n	8005b6e <HAL_SPI_TransmitReceive.part.4+0x56>
 8005bec:	f7fb fa18 	bl	8001020 <HAL_GetTick>
 8005bf0:	1b80      	subs	r0, r0, r6
 8005bf2:	4580      	cmp	r8, r0
 8005bf4:	d8bb      	bhi.n	8005b6e <HAL_SPI_TransmitReceive.part.4+0x56>
      {
        errorcode = HAL_TIMEOUT;
 8005bf6:	2003      	movs	r0, #3
    }
 // }


error :
  hspi->State = HAL_SPI_STATE_READY;
 8005bf8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005bfa:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005bfc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c00:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
}
 8005c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c08:	7b1b      	ldrb	r3, [r3, #12]
 8005c0a:	702b      	strb	r3, [r5, #0]
          hspi->RxXferCount--;
 8005c0c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29b      	uxth	r3, r3
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c14:	3501      	adds	r5, #1
          hspi->RxXferCount--;
 8005c16:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005c1a:	f04f 0901 	mov.w	r9, #1
 8005c1e:	e7e2      	b.n	8005be6 <HAL_SPI_TransmitReceive.part.4+0xce>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c26:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8005c28:	f04f 0901 	mov.w	r9, #1
 8005c2c:	e7db      	b.n	8005be6 <HAL_SPI_TransmitReceive.part.4+0xce>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005c2e:	783a      	ldrb	r2, [r7, #0]
 8005c30:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8005c32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29b      	uxth	r3, r3
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005c38:	3701      	adds	r7, #1
          hspi->TxXferCount--;
 8005c3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005c3c:	f04f 0900 	mov.w	r9, #0
 8005c40:	e7b4      	b.n	8005bac <HAL_SPI_TransmitReceive.part.4+0x94>
 8005c42:	bf00      	nop

08005c44 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d068      	beq.n	8005d1a <HAL_SPI_Init+0xd6>
{
 8005c48:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c4a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c4e:	2200      	movs	r2, #0
{
 8005c50:	b083      	sub	sp, #12
 8005c52:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c54:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c58:	6282      	str	r2, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d04d      	beq.n	8005cfa <HAL_SPI_Init+0xb6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005c5e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005c60:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005c62:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005c66:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c68:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8005c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c6e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8005c72:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c74:	d90b      	bls.n	8005c8e <HAL_SPI_Init+0x4a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c76:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8005c7a:	d146      	bne.n	8005d0a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d13f      	bne.n	8005d04 <HAL_SPI_Init+0xc0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005c84:	2302      	movs	r3, #2
 8005c86:	6323      	str	r3, [r4, #48]	; 0x30
 8005c88:	f04f 0e00 	mov.w	lr, #0
 8005c8c:	e00f      	b.n	8005cae <HAL_SPI_Init+0x6a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c8e:	d007      	beq.n	8005ca0 <HAL_SPI_Init+0x5c>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c90:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c96:	b130      	cbz	r0, 8005ca6 <HAL_SPI_Init+0x62>
 8005c98:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c9a:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 8005c9e:	e006      	b.n	8005cae <HAL_SPI_Init+0x6a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005ca0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ca2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005ca4:	b90b      	cbnz	r3, 8005caa <HAL_SPI_Init+0x66>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	6323      	str	r3, [r4, #48]	; 0x30
 8005caa:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005cae:	68a5      	ldr	r5, [r4, #8]
 8005cb0:	6863      	ldr	r3, [r4, #4]
 8005cb2:	6927      	ldr	r7, [r4, #16]
 8005cb4:	6966      	ldr	r6, [r4, #20]
 8005cb6:	432b      	orrs	r3, r5
 8005cb8:	433b      	orrs	r3, r7
 8005cba:	69e5      	ldr	r5, [r4, #28]
 8005cbc:	69a7      	ldr	r7, [r4, #24]
 8005cbe:	4333      	orrs	r3, r6
 8005cc0:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005cc2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005cc4:	9501      	str	r5, [sp, #4]
 8005cc6:	6a65      	ldr	r5, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005cc8:	6a26      	ldr	r6, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005cca:	432a      	orrs	r2, r5
 8005ccc:	9d01      	ldr	r5, [sp, #4]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005cce:	4333      	orrs	r3, r6
 8005cd0:	f407 7600 	and.w	r6, r7, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005cd4:	0c3f      	lsrs	r7, r7, #16
 8005cd6:	f007 0704 	and.w	r7, r7, #4
 8005cda:	4315      	orrs	r5, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005cdc:	4333      	orrs	r3, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cde:	2200      	movs	r2, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005ce0:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005ce2:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005ce4:	ea45 050e 	orr.w	r5, r5, lr
  hspi->State     = HAL_SPI_STATE_READY;
 8005ce8:	2601      	movs	r6, #1
  return HAL_OK;
 8005cea:	4610      	mov	r0, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005cec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005cee:	604d      	str	r5, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cf0:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cf2:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
}
 8005cf6:	b003      	add	sp, #12
 8005cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005cfa:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005cfe:	f01b ffb1 	bl	8021c64 <HAL_SPI_MspInit>
 8005d02:	e7ac      	b.n	8005c5e <HAL_SPI_Init+0x1a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d04:	f04f 0e00 	mov.w	lr, #0
 8005d08:	e7d1      	b.n	8005cae <HAL_SPI_Init+0x6a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005d0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d0b7      	beq.n	8005c84 <HAL_SPI_Init+0x40>
 8005d14:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d16:	469e      	mov	lr, r3
 8005d18:	e7c9      	b.n	8005cae <HAL_SPI_Init+0x6a>
    return HAL_ERROR;
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop

08005d20 <HAL_SPI_TransmitReceive>:
{
 8005d20:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 8005d22:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8005d26:	2c01      	cmp	r4, #1
 8005d28:	d102      	bne.n	8005d30 <HAL_SPI_TransmitReceive+0x10>
}
 8005d2a:	2002      	movs	r0, #2
 8005d2c:	bc30      	pop	{r4, r5}
 8005d2e:	4770      	bx	lr
 8005d30:	bc30      	pop	{r4, r5}
 8005d32:	f7ff bef1 	b.w	8005b18 <HAL_SPI_TransmitReceive.part.4>
 8005d36:	bf00      	nop

08005d38 <HAL_SPI_ErrorCallback>:
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop

08005d3c <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8005d3c:	6802      	ldr	r2, [r0, #0]
{
 8005d3e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005d40:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005d42:	6893      	ldr	r3, [r2, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8005d44:	f003 0541 	and.w	r5, r3, #65	; 0x41
 8005d48:	2d01      	cmp	r5, #1
{
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8005d4e:	d054      	beq.n	8005dfa <HAL_SPI_IRQHandler+0xbe>
    hspi->RxISR(hspi);
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8005d50:	079d      	lsls	r5, r3, #30
 8005d52:	d44c      	bmi.n	8005dee <HAL_SPI_IRQHandler+0xb2>
    hspi->TxISR(hspi);
    return;
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8005d54:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8005d58:	d047      	beq.n	8005dea <HAL_SPI_IRQHandler+0xae>
 8005d5a:	068d      	lsls	r5, r1, #26
 8005d5c:	d545      	bpl.n	8005dea <HAL_SPI_IRQHandler+0xae>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8005d5e:	0658      	lsls	r0, r3, #25
 8005d60:	d50e      	bpl.n	8005d80 <HAL_SPI_IRQHandler+0x44>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d62:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005d66:	2803      	cmp	r0, #3
 8005d68:	d050      	beq.n	8005e0c <HAL_SPI_IRQHandler+0xd0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d6a:	6e20      	ldr	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d6c:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d6e:	f040 0004 	orr.w	r0, r0, #4
 8005d72:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d74:	9500      	str	r5, [sp, #0]
 8005d76:	68d0      	ldr	r0, [r2, #12]
 8005d78:	9000      	str	r0, [sp, #0]
 8005d7a:	6890      	ldr	r0, [r2, #8]
 8005d7c:	9000      	str	r0, [sp, #0]
 8005d7e:	9800      	ldr	r0, [sp, #0]
        return;
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8005d80:	069d      	lsls	r5, r3, #26
 8005d82:	d50c      	bpl.n	8005d9e <HAL_SPI_IRQHandler+0x62>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d84:	6e20      	ldr	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d86:	2500      	movs	r5, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d88:	f040 0001 	orr.w	r0, r0, #1
 8005d8c:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d8e:	9502      	str	r5, [sp, #8]
 8005d90:	6890      	ldr	r0, [r2, #8]
 8005d92:	9002      	str	r0, [sp, #8]
 8005d94:	6810      	ldr	r0, [r2, #0]
 8005d96:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005d9a:	6010      	str	r0, [r2, #0]
 8005d9c:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8005d9e:	05d8      	lsls	r0, r3, #23
 8005da0:	d508      	bpl.n	8005db4 <HAL_SPI_IRQHandler+0x78>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005da2:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005da4:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005da6:	f043 0308 	orr.w	r3, r3, #8
 8005daa:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dac:	9003      	str	r0, [sp, #12]
 8005dae:	6893      	ldr	r3, [r2, #8]
 8005db0:	9303      	str	r3, [sp, #12]
 8005db2:	9b03      	ldr	r3, [sp, #12]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005db6:	b1c3      	cbz	r3, 8005dea <HAL_SPI_IRQHandler+0xae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005db8:	6853      	ldr	r3, [r2, #4]
 8005dba:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005dbe:	6053      	str	r3, [r2, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005dc0:	2001      	movs	r0, #1
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005dc2:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8005dc4:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005dc8:	d01c      	beq.n	8005e04 <HAL_SPI_IRQHandler+0xc8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005dca:	6853      	ldr	r3, [r2, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005dd4:	b118      	cbz	r0, 8005dde <HAL_SPI_IRQHandler+0xa2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <HAL_SPI_IRQHandler+0xe0>)
 8005dd8:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005dda:	f7fc f855 	bl	8001e88 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005dde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005de0:	b118      	cbz	r0, 8005dea <HAL_SPI_IRQHandler+0xae>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005de2:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <HAL_SPI_IRQHandler+0xe0>)
 8005de4:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005de6:	f7fc f84f 	bl	8001e88 <HAL_DMA_Abort_IT>
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8005dea:	b005      	add	sp, #20
 8005dec:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8005dee:	0608      	lsls	r0, r1, #24
 8005df0:	d5b0      	bpl.n	8005d54 <HAL_SPI_IRQHandler+0x18>
    hspi->TxISR(hspi);
 8005df2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005df4:	4620      	mov	r0, r4
 8005df6:	4798      	blx	r3
    return;
 8005df8:	e7f7      	b.n	8005dea <HAL_SPI_IRQHandler+0xae>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8005dfa:	064d      	lsls	r5, r1, #25
 8005dfc:	d5a8      	bpl.n	8005d50 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8005dfe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005e00:	4798      	blx	r3
    return;
 8005e02:	e7f2      	b.n	8005dea <HAL_SPI_IRQHandler+0xae>
        HAL_SPI_ErrorCallback(hspi);
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7ff ff97 	bl	8005d38 <HAL_SPI_ErrorCallback>
 8005e0a:	e7ee      	b.n	8005dea <HAL_SPI_IRQHandler+0xae>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	68d3      	ldr	r3, [r2, #12]
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	6893      	ldr	r3, [r2, #8]
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	9b01      	ldr	r3, [sp, #4]
        return;
 8005e1a:	e7e6      	b.n	8005dea <HAL_SPI_IRQHandler+0xae>
 8005e1c:	08005e21 	.word	0x08005e21

08005e20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e20:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e22:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;

  HAL_SPI_ErrorCallback(hspi);
 8005e2a:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 8005e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8005e2e:	f7ff ff83 	bl	8005d38 <HAL_SPI_ErrorCallback>
 8005e32:	bd08      	pop	{r3, pc}

08005e34 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e34:	6a03      	ldr	r3, [r0, #32]
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3c:	6a03      	ldr	r3, [r0, #32]
{
 8005e3e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e42:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e4a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005e4e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e50:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005e52:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005e56:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e58:	4d1b      	ldr	r5, [pc, #108]	; (8005ec8 <TIM_OC1_SetConfig+0x94>)
 8005e5a:	42a8      	cmp	r0, r5
 8005e5c:	d00f      	beq.n	8005e7e <TIM_OC1_SetConfig+0x4a>
 8005e5e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005e62:	42a8      	cmp	r0, r5
 8005e64:	d00b      	beq.n	8005e7e <TIM_OC1_SetConfig+0x4a>
 8005e66:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005e6a:	42a8      	cmp	r0, r5
 8005e6c:	d007      	beq.n	8005e7e <TIM_OC1_SetConfig+0x4a>
 8005e6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005e72:	42a8      	cmp	r0, r5
 8005e74:	d003      	beq.n	8005e7e <TIM_OC1_SetConfig+0x4a>
 8005e76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005e7a:	42a8      	cmp	r0, r5
 8005e7c:	d11e      	bne.n	8005ebc <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e7e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e80:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005e84:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e86:	4d10      	ldr	r5, [pc, #64]	; (8005ec8 <TIM_OC1_SetConfig+0x94>)
 8005e88:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e8a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8e:	d00f      	beq.n	8005eb0 <TIM_OC1_SetConfig+0x7c>
 8005e90:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005e94:	42a8      	cmp	r0, r5
 8005e96:	d00b      	beq.n	8005eb0 <TIM_OC1_SetConfig+0x7c>
 8005e98:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005e9c:	42a8      	cmp	r0, r5
 8005e9e:	d007      	beq.n	8005eb0 <TIM_OC1_SetConfig+0x7c>
 8005ea0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ea4:	42a8      	cmp	r0, r5
 8005ea6:	d003      	beq.n	8005eb0 <TIM_OC1_SetConfig+0x7c>
 8005ea8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005eac:	42a8      	cmp	r0, r5
 8005eae:	d105      	bne.n	8005ebc <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eb0:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eb4:	698e      	ldr	r6, [r1, #24]
 8005eb6:	694c      	ldr	r4, [r1, #20]
 8005eb8:	4334      	orrs	r4, r6
 8005eba:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebe:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec0:	684a      	ldr	r2, [r1, #4]
 8005ec2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec4:	6203      	str	r3, [r0, #32]
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	40012c00 	.word	0x40012c00

08005ecc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ecc:	6a03      	ldr	r3, [r0, #32]
 8005ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed4:	6a03      	ldr	r3, [r0, #32]
{
 8005ed6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eda:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005edc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ede:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ee2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005ee6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ee8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005eea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ef2:	4d16      	ldr	r5, [pc, #88]	; (8005f4c <TIM_OC3_SetConfig+0x80>)
 8005ef4:	42a8      	cmp	r0, r5
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC3_SetConfig+0x34>
 8005ef8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005efc:	42a8      	cmp	r0, r5
 8005efe:	d10d      	bne.n	8005f1c <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f00:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f06:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0a:	4d10      	ldr	r5, [pc, #64]	; (8005f4c <TIM_OC3_SetConfig+0x80>)
 8005f0c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f12:	d00e      	beq.n	8005f32 <TIM_OC3_SetConfig+0x66>
 8005f14:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f18:	42a8      	cmp	r0, r5
 8005f1a:	d00a      	beq.n	8005f32 <TIM_OC3_SetConfig+0x66>
 8005f1c:	4d0c      	ldr	r5, [pc, #48]	; (8005f50 <TIM_OC3_SetConfig+0x84>)
 8005f1e:	42a8      	cmp	r0, r5
 8005f20:	d007      	beq.n	8005f32 <TIM_OC3_SetConfig+0x66>
 8005f22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f26:	42a8      	cmp	r0, r5
 8005f28:	d003      	beq.n	8005f32 <TIM_OC3_SetConfig+0x66>
 8005f2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f2e:	42a8      	cmp	r0, r5
 8005f30:	d106      	bne.n	8005f40 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f32:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f36:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f38:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f3a:	4334      	orrs	r4, r6
 8005f3c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f40:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f42:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f44:	684a      	ldr	r2, [r1, #4]
 8005f46:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	6203      	str	r3, [r0, #32]
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40014000 	.word	0x40014000

08005f54 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f54:	6a03      	ldr	r3, [r0, #32]
 8005f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f5a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5c:	6a03      	ldr	r3, [r0, #32]
{
 8005f5e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f62:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f66:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005f6a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f6e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f72:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f78:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7c:	4d0e      	ldr	r5, [pc, #56]	; (8005fb8 <TIM_OC4_SetConfig+0x64>)
 8005f7e:	42a8      	cmp	r0, r5
 8005f80:	d00f      	beq.n	8005fa2 <TIM_OC4_SetConfig+0x4e>
 8005f82:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f86:	42a8      	cmp	r0, r5
 8005f88:	d00b      	beq.n	8005fa2 <TIM_OC4_SetConfig+0x4e>
 8005f8a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005f8e:	42a8      	cmp	r0, r5
 8005f90:	d007      	beq.n	8005fa2 <TIM_OC4_SetConfig+0x4e>
 8005f92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f96:	42a8      	cmp	r0, r5
 8005f98:	d003      	beq.n	8005fa2 <TIM_OC4_SetConfig+0x4e>
 8005f9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f9e:	42a8      	cmp	r0, r5
 8005fa0:	d104      	bne.n	8005fac <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fa2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fa4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fa8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fb0:	684a      	ldr	r2, [r1, #4]
 8005fb2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb4:	6203      	str	r3, [r0, #32]
 8005fb6:	bd30      	pop	{r4, r5, pc}
 8005fb8:	40012c00 	.word	0x40012c00

08005fbc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fbc:	6a03      	ldr	r3, [r0, #32]
 8005fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc4:	6a03      	ldr	r3, [r0, #32]
{
 8005fc6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fca:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005fd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005fd6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fd8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005fda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fde:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe2:	4d0f      	ldr	r5, [pc, #60]	; (8006020 <TIM_OC5_SetConfig+0x64>)
 8005fe4:	42a8      	cmp	r0, r5
 8005fe6:	d00f      	beq.n	8006008 <TIM_OC5_SetConfig+0x4c>
 8005fe8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005fec:	42a8      	cmp	r0, r5
 8005fee:	d00b      	beq.n	8006008 <TIM_OC5_SetConfig+0x4c>
 8005ff0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005ff4:	42a8      	cmp	r0, r5
 8005ff6:	d007      	beq.n	8006008 <TIM_OC5_SetConfig+0x4c>
 8005ff8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ffc:	42a8      	cmp	r0, r5
 8005ffe:	d003      	beq.n	8006008 <TIM_OC5_SetConfig+0x4c>
 8006000:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006004:	42a8      	cmp	r0, r5
 8006006:	d104      	bne.n	8006012 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006008:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800600a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800600e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006012:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006014:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006016:	684a      	ldr	r2, [r1, #4]
 8006018:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601a:	6203      	str	r3, [r0, #32]
 800601c:	bd30      	pop	{r4, r5, pc}
 800601e:	bf00      	nop
 8006020:	40012c00 	.word	0x40012c00

08006024 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006024:	6a03      	ldr	r3, [r0, #32]
 8006026:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800602a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602c:	6a03      	ldr	r3, [r0, #32]
{
 800602e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006032:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006034:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006036:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800603a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800603e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006042:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006048:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604c:	4d0e      	ldr	r5, [pc, #56]	; (8006088 <TIM_OC6_SetConfig+0x64>)
 800604e:	42a8      	cmp	r0, r5
 8006050:	d00f      	beq.n	8006072 <TIM_OC6_SetConfig+0x4e>
 8006052:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006056:	42a8      	cmp	r0, r5
 8006058:	d00b      	beq.n	8006072 <TIM_OC6_SetConfig+0x4e>
 800605a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800605e:	42a8      	cmp	r0, r5
 8006060:	d007      	beq.n	8006072 <TIM_OC6_SetConfig+0x4e>
 8006062:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006066:	42a8      	cmp	r0, r5
 8006068:	d003      	beq.n	8006072 <TIM_OC6_SetConfig+0x4e>
 800606a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800606e:	42a8      	cmp	r0, r5
 8006070:	d104      	bne.n	800607c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006072:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006074:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006078:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800607e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006080:	684a      	ldr	r2, [r1, #4]
 8006082:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006084:	6203      	str	r3, [r0, #32]
 8006086:	bd30      	pop	{r4, r5, pc}
 8006088:	40012c00 	.word	0x40012c00

0800608c <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	2302      	movs	r3, #2
{
 800608e:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8006090:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8006094:	6803      	ldr	r3, [r0, #0]
 8006096:	4c09      	ldr	r4, [pc, #36]	; (80060bc <HAL_TIM_Base_Start+0x30>)
 8006098:	6899      	ldr	r1, [r3, #8]
 800609a:	4021      	ands	r1, r4
 800609c:	2906      	cmp	r1, #6
 800609e:	d008      	beq.n	80060b2 <HAL_TIM_Base_Start+0x26>
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	4022      	ands	r2, r4
 80060a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 80060a8:	bf1e      	ittt	ne
 80060aa:	681a      	ldrne	r2, [r3, #0]
 80060ac:	f042 0201 	orrne.w	r2, r2, #1
 80060b0:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80060b8:	2000      	movs	r0, #0
 80060ba:	bd10      	pop	{r4, pc}
 80060bc:	00010007 	.word	0x00010007

080060c0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060c0:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80060c2:	480a      	ldr	r0, [pc, #40]	; (80060ec <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80060cc:	6899      	ldr	r1, [r3, #8]
 80060ce:	4001      	ands	r1, r0
 80060d0:	2906      	cmp	r1, #6
 80060d2:	d008      	beq.n	80060e6 <HAL_TIM_Base_Start_IT+0x26>
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	4002      	ands	r2, r0
 80060d8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 80060dc:	bf1e      	ittt	ne
 80060de:	681a      	ldrne	r2, [r3, #0]
 80060e0:	f042 0201 	orrne.w	r2, r2, #1
 80060e4:	601a      	strne	r2, [r3, #0]
}
 80060e6:	2000      	movs	r0, #0
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	00010007 	.word	0x00010007

080060f0 <HAL_TIM_PeriodElapsedCallback>:
 80060f0:	4770      	bx	lr

080060f2 <HAL_TIM_OC_DelayElapsedCallback>:
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIM_IC_CaptureCallback>:
 80060f4:	4770      	bx	lr

080060f6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIM_TriggerCallback>:
 80060f8:	4770      	bx	lr

080060fa <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060fa:	6803      	ldr	r3, [r0, #0]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	0791      	lsls	r1, r2, #30
{
 8006100:	b510      	push	{r4, lr}
 8006102:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006104:	d50f      	bpl.n	8006126 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	0792      	lsls	r2, r2, #30
 800610a:	d50c      	bpl.n	8006126 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800610c:	f06f 0202 	mvn.w	r2, #2
 8006110:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006112:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006114:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006116:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006118:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800611a:	f000 8085 	beq.w	8006228 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800611e:	f7ff ffe9 	bl	80060f4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006122:	2300      	movs	r3, #0
 8006124:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	0752      	lsls	r2, r2, #29
 800612c:	d510      	bpl.n	8006150 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	0750      	lsls	r0, r2, #29
 8006132:	d50d      	bpl.n	8006150 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006134:	f06f 0204 	mvn.w	r2, #4
 8006138:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800613a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800613c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800613e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006142:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006144:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006146:	d075      	beq.n	8006234 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006148:	f7ff ffd4 	bl	80060f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614c:	2300      	movs	r3, #0
 800614e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	0711      	lsls	r1, r2, #28
 8006156:	d50f      	bpl.n	8006178 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	0712      	lsls	r2, r2, #28
 800615c:	d50c      	bpl.n	8006178 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800615e:	f06f 0208 	mvn.w	r2, #8
 8006162:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006164:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006166:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006168:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800616a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800616c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800616e:	d067      	beq.n	8006240 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006170:	f7ff ffc0 	bl	80060f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006174:	2300      	movs	r3, #0
 8006176:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	06d0      	lsls	r0, r2, #27
 800617e:	d510      	bpl.n	80061a2 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	06d1      	lsls	r1, r2, #27
 8006184:	d50d      	bpl.n	80061a2 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006186:	f06f 0210 	mvn.w	r2, #16
 800618a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800618c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800618e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006190:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006194:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006198:	d058      	beq.n	800624c <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	f7ff ffab 	bl	80060f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	2300      	movs	r3, #0
 80061a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	07d2      	lsls	r2, r2, #31
 80061a8:	d508      	bpl.n	80061bc <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	07d0      	lsls	r0, r2, #31
 80061ae:	d505      	bpl.n	80061bc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061b0:	f06f 0201 	mvn.w	r2, #1
 80061b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80061b6:	4620      	mov	r0, r4
 80061b8:	f7ff ff9a 	bl	80060f0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	0611      	lsls	r1, r2, #24
 80061c2:	d508      	bpl.n	80061d6 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	0612      	lsls	r2, r2, #24
 80061c8:	d505      	bpl.n	80061d6 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fb98 	bl	8006906 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	05d0      	lsls	r0, r2, #23
 80061dc:	d508      	bpl.n	80061f0 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	0611      	lsls	r1, r2, #24
 80061e2:	d505      	bpl.n	80061f0 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 fb8c 	bl	8006908 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	0652      	lsls	r2, r2, #25
 80061f6:	d508      	bpl.n	800620a <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	0650      	lsls	r0, r2, #25
 80061fc:	d505      	bpl.n	800620a <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006202:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006204:	4620      	mov	r0, r4
 8006206:	f7ff ff77 	bl	80060f8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	0691      	lsls	r1, r2, #26
 8006210:	d522      	bpl.n	8006258 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	0692      	lsls	r2, r2, #26
 8006216:	d51f      	bpl.n	8006258 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006218:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800621c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800621e:	611a      	str	r2, [r3, #16]
}
 8006220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8006224:	f000 bb6e 	b.w	8006904 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006228:	f7ff ff63 	bl	80060f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff ff62 	bl	80060f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006232:	e776      	b.n	8006122 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006234:	f7ff ff5d 	bl	80060f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	4620      	mov	r0, r4
 800623a:	f7ff ff5c 	bl	80060f6 <HAL_TIM_PWM_PulseFinishedCallback>
 800623e:	e785      	b.n	800614c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006240:	f7ff ff57 	bl	80060f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	4620      	mov	r0, r4
 8006246:	f7ff ff56 	bl	80060f6 <HAL_TIM_PWM_PulseFinishedCallback>
 800624a:	e793      	b.n	8006174 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624c:	f7ff ff51 	bl	80060f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006250:	4620      	mov	r0, r4
 8006252:	f7ff ff50 	bl	80060f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006256:	e7a2      	b.n	800619e <HAL_TIM_IRQHandler+0xa4>
 8006258:	bd10      	pop	{r4, pc}
	...

0800625c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800625c:	4a30      	ldr	r2, [pc, #192]	; (8006320 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800625e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006260:	4290      	cmp	r0, r2
 8006262:	d012      	beq.n	800628a <TIM_Base_SetConfig+0x2e>
 8006264:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006268:	d00f      	beq.n	800628a <TIM_Base_SetConfig+0x2e>
 800626a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800626e:	4290      	cmp	r0, r2
 8006270:	d00b      	beq.n	800628a <TIM_Base_SetConfig+0x2e>
 8006272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006276:	4290      	cmp	r0, r2
 8006278:	d007      	beq.n	800628a <TIM_Base_SetConfig+0x2e>
 800627a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800627e:	4290      	cmp	r0, r2
 8006280:	d003      	beq.n	800628a <TIM_Base_SetConfig+0x2e>
 8006282:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006286:	4290      	cmp	r0, r2
 8006288:	d119      	bne.n	80062be <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800628a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006290:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006292:	4a23      	ldr	r2, [pc, #140]	; (8006320 <TIM_Base_SetConfig+0xc4>)
 8006294:	4290      	cmp	r0, r2
 8006296:	d01d      	beq.n	80062d4 <TIM_Base_SetConfig+0x78>
 8006298:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800629c:	d01a      	beq.n	80062d4 <TIM_Base_SetConfig+0x78>
 800629e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80062a2:	4290      	cmp	r0, r2
 80062a4:	d016      	beq.n	80062d4 <TIM_Base_SetConfig+0x78>
 80062a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062aa:	4290      	cmp	r0, r2
 80062ac:	d012      	beq.n	80062d4 <TIM_Base_SetConfig+0x78>
 80062ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062b2:	4290      	cmp	r0, r2
 80062b4:	d00e      	beq.n	80062d4 <TIM_Base_SetConfig+0x78>
 80062b6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80062ba:	4290      	cmp	r0, r2
 80062bc:	d00a      	beq.n	80062d4 <TIM_Base_SetConfig+0x78>
 80062be:	4a19      	ldr	r2, [pc, #100]	; (8006324 <TIM_Base_SetConfig+0xc8>)
 80062c0:	4290      	cmp	r0, r2
 80062c2:	d007      	beq.n	80062d4 <TIM_Base_SetConfig+0x78>
 80062c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062c8:	4290      	cmp	r0, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_Base_SetConfig+0x78>
 80062cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062d0:	4290      	cmp	r0, r2
 80062d2:	d103      	bne.n	80062dc <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80062d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062dc:	694a      	ldr	r2, [r1, #20]
 80062de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80062e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e6:	688b      	ldr	r3, [r1, #8]
 80062e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062ea:	680b      	ldr	r3, [r1, #0]
 80062ec:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ee:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <TIM_Base_SetConfig+0xc4>)
 80062f0:	4298      	cmp	r0, r3
 80062f2:	d00f      	beq.n	8006314 <TIM_Base_SetConfig+0xb8>
 80062f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f8:	4298      	cmp	r0, r3
 80062fa:	d00b      	beq.n	8006314 <TIM_Base_SetConfig+0xb8>
 80062fc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006300:	4298      	cmp	r0, r3
 8006302:	d007      	beq.n	8006314 <TIM_Base_SetConfig+0xb8>
 8006304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006308:	4298      	cmp	r0, r3
 800630a:	d003      	beq.n	8006314 <TIM_Base_SetConfig+0xb8>
 800630c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006310:	4298      	cmp	r0, r3
 8006312:	d101      	bne.n	8006318 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006314:	690b      	ldr	r3, [r1, #16]
 8006316:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006318:	2301      	movs	r3, #1
 800631a:	6143      	str	r3, [r0, #20]
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40014000 	.word	0x40014000

08006328 <HAL_TIM_Base_Init>:
{
 8006328:	b510      	push	{r4, lr}
  if (htim == NULL)
 800632a:	4604      	mov	r4, r0
 800632c:	b1a0      	cbz	r0, 8006358 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800632e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006332:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006336:	b91b      	cbnz	r3, 8006340 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006338:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800633c:	f01b fd4c 	bl	8021dd8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	2302      	movs	r3, #2
 8006342:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006346:	6820      	ldr	r0, [r4, #0]
 8006348:	1d21      	adds	r1, r4, #4
 800634a:	f7ff ff87 	bl	800625c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800634e:	2301      	movs	r3, #1
 8006350:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006354:	2000      	movs	r0, #0
 8006356:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006358:	2001      	movs	r0, #1
}
 800635a:	bd10      	pop	{r4, pc}

0800635c <HAL_TIM_OC_Init>:
{
 800635c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800635e:	4604      	mov	r4, r0
 8006360:	b1a0      	cbz	r0, 800638c <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006362:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006366:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800636a:	b91b      	cbnz	r3, 8006374 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800636c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8006370:	f01b fd94 	bl	8021e9c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	2302      	movs	r3, #2
 8006376:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800637a:	6820      	ldr	r0, [r4, #0]
 800637c:	1d21      	adds	r1, r4, #4
 800637e:	f7ff ff6d 	bl	800625c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006382:	2301      	movs	r3, #1
 8006384:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006388:	2000      	movs	r0, #0
 800638a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800638c:	2001      	movs	r0, #1
}
 800638e:	bd10      	pop	{r4, pc}

08006390 <HAL_TIM_PWM_Init>:
{
 8006390:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006392:	4604      	mov	r4, r0
 8006394:	b1a0      	cbz	r0, 80063c0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006396:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800639a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800639e:	b91b      	cbnz	r3, 80063a8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80063a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80063a4:	f01b fe66 	bl	8022074 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	2302      	movs	r3, #2
 80063aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ae:	6820      	ldr	r0, [r4, #0]
 80063b0:	1d21      	adds	r1, r4, #4
 80063b2:	f7ff ff53 	bl	800625c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80063bc:	2000      	movs	r0, #0
 80063be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80063c0:	2001      	movs	r0, #1
}
 80063c2:	bd10      	pop	{r4, pc}

080063c4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c4:	6a03      	ldr	r3, [r0, #32]
 80063c6:	f023 0310 	bic.w	r3, r3, #16
 80063ca:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80063cc:	6a03      	ldr	r3, [r0, #32]
{
 80063ce:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80063d0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80063d2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80063da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80063e4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063ec:	4d16      	ldr	r5, [pc, #88]	; (8006448 <TIM_OC2_SetConfig+0x84>)
 80063ee:	42a8      	cmp	r0, r5
 80063f0:	d003      	beq.n	80063fa <TIM_OC2_SetConfig+0x36>
 80063f2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80063f6:	42a8      	cmp	r0, r5
 80063f8:	d10d      	bne.n	8006416 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063fa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80063fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006400:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006404:	4d10      	ldr	r5, [pc, #64]	; (8006448 <TIM_OC2_SetConfig+0x84>)
 8006406:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640c:	d00e      	beq.n	800642c <TIM_OC2_SetConfig+0x68>
 800640e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006412:	42a8      	cmp	r0, r5
 8006414:	d00a      	beq.n	800642c <TIM_OC2_SetConfig+0x68>
 8006416:	4d0d      	ldr	r5, [pc, #52]	; (800644c <TIM_OC2_SetConfig+0x88>)
 8006418:	42a8      	cmp	r0, r5
 800641a:	d007      	beq.n	800642c <TIM_OC2_SetConfig+0x68>
 800641c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006420:	42a8      	cmp	r0, r5
 8006422:	d003      	beq.n	800642c <TIM_OC2_SetConfig+0x68>
 8006424:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006428:	42a8      	cmp	r0, r5
 800642a:	d106      	bne.n	800643a <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800642c:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006430:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006432:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006434:	4334      	orrs	r4, r6
 8006436:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800643a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800643c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800643e:	684a      	ldr	r2, [r1, #4]
 8006440:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006442:	6203      	str	r3, [r0, #32]
 8006444:	bd70      	pop	{r4, r5, r6, pc}
 8006446:	bf00      	nop
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40014000 	.word	0x40014000

08006450 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006450:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006454:	2b01      	cmp	r3, #1
{
 8006456:	b510      	push	{r4, lr}
 8006458:	4604      	mov	r4, r0
 800645a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800645e:	d010      	beq.n	8006482 <HAL_TIM_OC_ConfigChannel+0x32>
 8006460:	2301      	movs	r3, #1
  switch (Channel)
 8006462:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006464:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800646c:	d01c      	beq.n	80064a8 <HAL_TIM_OC_ConfigChannel+0x58>
 800646e:	d809      	bhi.n	8006484 <HAL_TIM_OC_ConfigChannel+0x34>
 8006470:	b192      	cbz	r2, 8006498 <HAL_TIM_OC_ConfigChannel+0x48>
 8006472:	2a04      	cmp	r2, #4
 8006474:	d014      	beq.n	80064a0 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8006476:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006478:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800647a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800647e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006482:	bd10      	pop	{r4, pc}
  switch (Channel)
 8006484:	2a10      	cmp	r2, #16
 8006486:	d013      	beq.n	80064b0 <HAL_TIM_OC_ConfigChannel+0x60>
 8006488:	2a14      	cmp	r2, #20
 800648a:	d015      	beq.n	80064b8 <HAL_TIM_OC_ConfigChannel+0x68>
 800648c:	2a0c      	cmp	r2, #12
 800648e:	d1f2      	bne.n	8006476 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006490:	6820      	ldr	r0, [r4, #0]
 8006492:	f7ff fd5f 	bl	8005f54 <TIM_OC4_SetConfig>
      break;
 8006496:	e7ee      	b.n	8006476 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	f7ff fccb 	bl	8005e34 <TIM_OC1_SetConfig>
      break;
 800649e:	e7ea      	b.n	8006476 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a0:	6820      	ldr	r0, [r4, #0]
 80064a2:	f7ff ff8f 	bl	80063c4 <TIM_OC2_SetConfig>
      break;
 80064a6:	e7e6      	b.n	8006476 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064a8:	6820      	ldr	r0, [r4, #0]
 80064aa:	f7ff fd0f 	bl	8005ecc <TIM_OC3_SetConfig>
      break;
 80064ae:	e7e2      	b.n	8006476 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	f7ff fd83 	bl	8005fbc <TIM_OC5_SetConfig>
      break;
 80064b6:	e7de      	b.n	8006476 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064b8:	6820      	ldr	r0, [r4, #0]
 80064ba:	f7ff fdb3 	bl	8006024 <TIM_OC6_SetConfig>
      break;
 80064be:	e7da      	b.n	8006476 <HAL_TIM_OC_ConfigChannel+0x26>

080064c0 <HAL_TIM_PWM_ConfigChannel>:
{
 80064c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80064c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80064c6:	2b01      	cmp	r3, #1
{
 80064c8:	4604      	mov	r4, r0
 80064ca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80064ce:	d010      	beq.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80064d0:	2301      	movs	r3, #1
  switch (Channel)
 80064d2:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80064d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80064dc:	d043      	beq.n	8006566 <HAL_TIM_PWM_ConfigChannel+0xa6>
 80064de:	d809      	bhi.n	80064f4 <HAL_TIM_PWM_ConfigChannel+0x34>
 80064e0:	b1fa      	cbz	r2, 8006522 <HAL_TIM_PWM_ConfigChannel+0x62>
 80064e2:	2a04      	cmp	r2, #4
 80064e4:	d02e      	beq.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 80064e6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80064e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80064ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80064ee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80064f4:	2a10      	cmp	r2, #16
 80064f6:	d047      	beq.n	8006588 <HAL_TIM_PWM_ConfigChannel+0xc8>
 80064f8:	2a14      	cmp	r2, #20
 80064fa:	d056      	beq.n	80065aa <HAL_TIM_PWM_ConfigChannel+0xea>
 80064fc:	2a0c      	cmp	r2, #12
 80064fe:	d1f2      	bne.n	80064e6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	f7ff fd27 	bl	8005f54 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006506:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006508:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006520:	e030      	b.n	8006584 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	f7ff fc86 	bl	8005e34 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006528:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800652a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	f042 0208 	orr.w	r2, r2, #8
 8006532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	f022 0204 	bic.w	r2, r2, #4
 800653a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006540:	619a      	str	r2, [r3, #24]
      break;
 8006542:	e7d0      	b.n	80064e6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	f7ff ff3d 	bl	80063c4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800654a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800654c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800654e:	699a      	ldr	r2, [r3, #24]
 8006550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006554:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006556:	699a      	ldr	r2, [r3, #24]
 8006558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800655c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006564:	e7ec      	b.n	8006540 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006566:	6820      	ldr	r0, [r4, #0]
 8006568:	f7ff fcb0 	bl	8005ecc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800656c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800656e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006570:	69da      	ldr	r2, [r3, #28]
 8006572:	f042 0208 	orr.w	r2, r2, #8
 8006576:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006578:	69da      	ldr	r2, [r3, #28]
 800657a:	f022 0204 	bic.w	r2, r2, #4
 800657e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006580:	69da      	ldr	r2, [r3, #28]
 8006582:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006584:	61da      	str	r2, [r3, #28]
      break;
 8006586:	e7ae      	b.n	80064e6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	f7ff fd17 	bl	8005fbc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800658e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006590:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006592:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006594:	f042 0208 	orr.w	r2, r2, #8
 8006598:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800659a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800659c:	f022 0204 	bic.w	r2, r2, #4
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065a4:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065a8:	e79d      	b.n	80064e6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	f7ff fd3a 	bl	8006024 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065b2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80065ca:	e7ec      	b.n	80065a6 <HAL_TIM_PWM_ConfigChannel+0xe6>

080065cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065cc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80065da:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065dc:	6083      	str	r3, [r0, #8]
 80065de:	bd10      	pop	{r4, pc}

080065e0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80065e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80065e4:	2b01      	cmp	r3, #1
{
 80065e6:	b570      	push	{r4, r5, r6, lr}
 80065e8:	4604      	mov	r4, r0
 80065ea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80065ee:	d017      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80065f0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80065f4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80065f6:	2301      	movs	r3, #1
 80065f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80065fc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fe:	4b48      	ldr	r3, [pc, #288]	; (8006720 <HAL_TIM_ConfigClockSource+0x140>)
 8006600:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8006602:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006604:	680b      	ldr	r3, [r1, #0]
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d072      	beq.n	80066f0 <HAL_TIM_ConfigClockSource+0x110>
 800660a:	d815      	bhi.n	8006638 <HAL_TIM_ConfigClockSource+0x58>
 800660c:	2b10      	cmp	r3, #16
 800660e:	d00c      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x4a>
 8006610:	d807      	bhi.n	8006622 <HAL_TIM_ConfigClockSource+0x42>
 8006612:	b153      	cbz	r3, 800662a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8006614:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006616:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006618:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800661c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006620:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006622:	2b20      	cmp	r3, #32
 8006624:	d001      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x4a>
 8006626:	2b30      	cmp	r3, #48	; 0x30
 8006628:	d1f4      	bne.n	8006614 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800662a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800662c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8006630:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006634:	4313      	orrs	r3, r2
 8006636:	e033      	b.n	80066a0 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8006638:	2b70      	cmp	r3, #112	; 0x70
 800663a:	d033      	beq.n	80066a4 <HAL_TIM_ConfigClockSource+0xc4>
 800663c:	d81b      	bhi.n	8006676 <HAL_TIM_ConfigClockSource+0x96>
 800663e:	2b50      	cmp	r3, #80	; 0x50
 8006640:	d03f      	beq.n	80066c2 <HAL_TIM_ConfigClockSource+0xe2>
 8006642:	2b60      	cmp	r3, #96	; 0x60
 8006644:	d1e6      	bne.n	8006614 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006646:	684d      	ldr	r5, [r1, #4]
 8006648:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800664a:	6a01      	ldr	r1, [r0, #32]
 800664c:	f021 0110 	bic.w	r1, r1, #16
 8006650:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006652:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006654:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006656:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800665a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800665e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006662:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006666:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006668:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800666a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006670:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8006674:	e014      	b.n	80066a0 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	d00c      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0xb6>
 800667c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006680:	d1c8      	bne.n	8006614 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	68cb      	ldr	r3, [r1, #12]
 8006684:	684a      	ldr	r2, [r1, #4]
 8006686:	6889      	ldr	r1, [r1, #8]
 8006688:	f7ff ffa0 	bl	80065cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	6893      	ldr	r3, [r2, #8]
 8006690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006694:	e013      	b.n	80066be <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006696:	6883      	ldr	r3, [r0, #8]
 8006698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669c:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80066a0:	6083      	str	r3, [r0, #8]
 80066a2:	e7b7      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80066a4:	68cb      	ldr	r3, [r1, #12]
 80066a6:	684a      	ldr	r2, [r1, #4]
 80066a8:	6889      	ldr	r1, [r1, #8]
 80066aa:	f7ff ff8f 	bl	80065cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066be:	6093      	str	r3, [r2, #8]
      break;
 80066c0:	e7a8      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c2:	684a      	ldr	r2, [r1, #4]
 80066c4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80066c6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c8:	6a05      	ldr	r5, [r0, #32]
 80066ca:	f025 0501 	bic.w	r5, r5, #1
 80066ce:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066d2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066da:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80066de:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80066e0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80066e2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80066e4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ea:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80066ee:	e7d7      	b.n	80066a0 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f0:	684a      	ldr	r2, [r1, #4]
 80066f2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80066f4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066f6:	6a05      	ldr	r5, [r0, #32]
 80066f8:	f025 0501 	bic.w	r5, r5, #1
 80066fc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066fe:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006700:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006704:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006708:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800670c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800670e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006710:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006712:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006718:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800671c:	e7c0      	b.n	80066a0 <HAL_TIM_ConfigClockSource+0xc0>
 800671e:	bf00      	nop
 8006720:	fffe0088 	.word	0xfffe0088

08006724 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006724:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006726:	f001 011f 	and.w	r1, r1, #31
{
 800672a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800672c:	2401      	movs	r4, #1
 800672e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8006730:	ea23 0304 	bic.w	r3, r3, r4
 8006734:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006736:	6a03      	ldr	r3, [r0, #32]
 8006738:	408a      	lsls	r2, r1
 800673a:	431a      	orrs	r2, r3
 800673c:	6202      	str	r2, [r0, #32]
 800673e:	bd10      	pop	{r4, pc}

08006740 <HAL_TIM_PWM_Start>:
{
 8006740:	b510      	push	{r4, lr}
 8006742:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006744:	2201      	movs	r2, #1
 8006746:	6800      	ldr	r0, [r0, #0]
 8006748:	f7ff ffec 	bl	8006724 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	4a14      	ldr	r2, [pc, #80]	; (80067a0 <HAL_TIM_PWM_Start+0x60>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d01f      	beq.n	8006794 <HAL_TIM_PWM_Start+0x54>
 8006754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006758:	4293      	cmp	r3, r2
 800675a:	d01b      	beq.n	8006794 <HAL_TIM_PWM_Start+0x54>
 800675c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006760:	4293      	cmp	r3, r2
 8006762:	d017      	beq.n	8006794 <HAL_TIM_PWM_Start+0x54>
 8006764:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006768:	4293      	cmp	r3, r2
 800676a:	d013      	beq.n	8006794 <HAL_TIM_PWM_Start+0x54>
 800676c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006770:	4293      	cmp	r3, r2
 8006772:	d00f      	beq.n	8006794 <HAL_TIM_PWM_Start+0x54>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8006774:	6899      	ldr	r1, [r3, #8]
 8006776:	480b      	ldr	r0, [pc, #44]	; (80067a4 <HAL_TIM_PWM_Start+0x64>)
 8006778:	4001      	ands	r1, r0
 800677a:	2906      	cmp	r1, #6
 800677c:	d008      	beq.n	8006790 <HAL_TIM_PWM_Start+0x50>
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	4002      	ands	r2, r0
 8006782:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006786:	d003      	beq.n	8006790 <HAL_TIM_PWM_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]
}
 8006790:	2000      	movs	r0, #0
 8006792:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8006794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800679a:	645a      	str	r2, [r3, #68]	; 0x44
 800679c:	e7ea      	b.n	8006774 <HAL_TIM_PWM_Start+0x34>
 800679e:	bf00      	nop
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	00010007 	.word	0x00010007

080067a8 <HAL_TIM_OC_Start>:
 80067a8:	f7ff bfca 	b.w	8006740 <HAL_TIM_PWM_Start>

080067ac <HAL_TIM_PWM_Stop>:
{
 80067ac:	b510      	push	{r4, lr}
 80067ae:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067b0:	2200      	movs	r2, #0
 80067b2:	6800      	ldr	r0, [r0, #0]
 80067b4:	f7ff ffb6 	bl	8006724 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	4a1a      	ldr	r2, [pc, #104]	; (8006824 <HAL_TIM_PWM_Stop+0x78>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00f      	beq.n	80067e0 <HAL_TIM_PWM_Stop+0x34>
 80067c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00b      	beq.n	80067e0 <HAL_TIM_PWM_Stop+0x34>
 80067c8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d007      	beq.n	80067e0 <HAL_TIM_PWM_Stop+0x34>
 80067d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <HAL_TIM_PWM_Stop+0x34>
 80067d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10d      	bne.n	80067fc <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 80067e0:	6a19      	ldr	r1, [r3, #32]
 80067e2:	f241 1211 	movw	r2, #4369	; 0x1111
 80067e6:	4211      	tst	r1, r2
 80067e8:	d108      	bne.n	80067fc <HAL_TIM_PWM_Stop+0x50>
 80067ea:	6a19      	ldr	r1, [r3, #32]
 80067ec:	f240 4244 	movw	r2, #1092	; 0x444
 80067f0:	4211      	tst	r1, r2
 80067f2:	bf02      	ittt	eq
 80067f4:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80067f6:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80067fa:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80067fc:	6a19      	ldr	r1, [r3, #32]
 80067fe:	f241 1211 	movw	r2, #4369	; 0x1111
 8006802:	4211      	tst	r1, r2
 8006804:	d108      	bne.n	8006818 <HAL_TIM_PWM_Stop+0x6c>
 8006806:	6a19      	ldr	r1, [r3, #32]
 8006808:	f240 4244 	movw	r2, #1092	; 0x444
 800680c:	4211      	tst	r1, r2
 800680e:	d103      	bne.n	8006818 <HAL_TIM_PWM_Stop+0x6c>
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	f022 0201 	bic.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006818:	2301      	movs	r3, #1
 800681a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800681e:	2000      	movs	r0, #0
 8006820:	bd10      	pop	{r4, pc}
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00

08006828 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006828:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800682c:	2b01      	cmp	r3, #1
{
 800682e:	b530      	push	{r4, r5, lr}
 8006830:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8006834:	d01f      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006836:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006838:	4d10      	ldr	r5, [pc, #64]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 800683a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800683e:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006840:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006842:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006844:	d003      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8006846:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800684a:	42aa      	cmp	r2, r5
 800684c:	d103      	bne.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800684e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006850:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006854:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006856:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006858:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800685e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006860:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006864:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006866:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006868:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 800686a:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800686c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006870:	2300      	movs	r3, #0
 8006872:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006876:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006878:	bd30      	pop	{r4, r5, pc}
 800687a:	bf00      	nop
 800687c:	40012c00 	.word	0x40012c00

08006880 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006880:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006884:	2b01      	cmp	r3, #1
{
 8006886:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8006888:	d038      	beq.n	80068fc <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800688a:	68cb      	ldr	r3, [r1, #12]
 800688c:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800688e:	4c1c      	ldr	r4, [pc, #112]	; (8006900 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006894:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006896:	684a      	ldr	r2, [r1, #4]
 8006898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800689c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800689e:	680a      	ldr	r2, [r1, #0]
 80068a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068a6:	690a      	ldr	r2, [r1, #16]
 80068a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068ae:	694a      	ldr	r2, [r1, #20]
 80068b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068b6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80068b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068be:	698a      	ldr	r2, [r1, #24]
 80068c0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80068c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068c8:	6802      	ldr	r2, [r0, #0]
 80068ca:	42a2      	cmp	r2, r4
 80068cc:	d003      	beq.n	80068d6 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 80068ce:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80068d2:	42a2      	cmp	r2, r4
 80068d4:	d10c      	bne.n	80068f0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068d6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80068d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068dc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068e0:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068e2:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068e8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80068ee:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068f0:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068f2:	2300      	movs	r3, #0
 80068f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80068f8:	4618      	mov	r0, r3
 80068fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80068fc:	2002      	movs	r0, #2
}
 80068fe:	bd10      	pop	{r4, pc}
 8006900:	40012c00 	.word	0x40012c00

08006904 <HAL_TIMEx_CommutationCallback>:
 8006904:	4770      	bx	lr

08006906 <HAL_TIMEx_BreakCallback>:
 8006906:	4770      	bx	lr

08006908 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006908:	4770      	bx	lr
	...

0800690c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800690e:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8006912:	2c20      	cmp	r4, #32
 8006914:	d001      	beq.n	800691a <HAL_UART_Transmit_DMA+0xe>
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8006916:	2002      	movs	r0, #2
  }
}
 8006918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 800691a:	b369      	cbz	r1, 8006978 <HAL_UART_Transmit_DMA+0x6c>
 800691c:	b362      	cbz	r2, 8006978 <HAL_UART_Transmit_DMA+0x6c>
    __HAL_LOCK(huart);
 800691e:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 8006922:	2c01      	cmp	r4, #1
 8006924:	d0f7      	beq.n	8006916 <HAL_UART_Transmit_DMA+0xa>
 8006926:	4604      	mov	r4, r0
 8006928:	2601      	movs	r6, #1
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800692a:	6f80      	ldr	r0, [r0, #120]	; 0x78
    __HAL_LOCK(huart);
 800692c:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
 8006930:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006932:	2500      	movs	r5, #0
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8006934:	6822      	ldr	r2, [r4, #0]
    huart->TxXferCount = Size;
 8006936:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800693a:	2621      	movs	r6, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006940:	f8df e040 	ldr.w	lr, [pc, #64]	; 8006984 <HAL_UART_Transmit_DMA+0x78>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006944:	f884 6081 	strb.w	r6, [r4, #129]	; 0x81
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006948:	4f0c      	ldr	r7, [pc, #48]	; (800697c <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800694a:	4e0d      	ldr	r6, [pc, #52]	; (8006980 <HAL_UART_Transmit_DMA+0x74>)
    huart->TxXferSize  = Size;
 800694c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->pTxBuffPtr  = pData;
 8006950:	6521      	str	r1, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8006952:	3228      	adds	r2, #40	; 0x28
    huart->hdmatx->XferAbortCallback = NULL;
 8006954:	6385      	str	r5, [r0, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006956:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800695a:	6307      	str	r7, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800695c:	6346      	str	r6, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800695e:	f7fb fa51 	bl	8001e04 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	2240      	movs	r2, #64	; 0x40
 8006966:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006968:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800696a:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800696e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8006972:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006974:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8006976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8006978:	2001      	movs	r0, #1
 800697a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800697c:	080069bd 	.word	0x080069bd
 8006980:	080069cd 	.word	0x080069cd
 8006984:	0800698d 	.word	0x0800698d

08006988 <HAL_UART_TxCpltCallback>:
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop

0800698c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800698c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800698e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006990:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f013 0320 	ands.w	r3, r3, #32
 8006998:	d10b      	bne.n	80069b2 <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0U;
    
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800699a:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0U;
 800699c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069a0:	6893      	ldr	r3, [r2, #8]
 80069a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a6:	6093      	str	r3, [r2, #8]
    
    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069a8:	6813      	ldr	r3, [r2, #0]
 80069aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 80069b2:	f7ff ffe9 	bl	8006988 <HAL_UART_TxCpltCallback>
 80069b6:	bd08      	pop	{r3, pc}

080069b8 <HAL_UART_TxHalfCpltCallback>:
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop

080069bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069bc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_TxHalfCpltCallback(huart);
 80069be:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80069c0:	f7ff fffa 	bl	80069b8 <HAL_UART_TxHalfCpltCallback>
 80069c4:	bd08      	pop	{r3, pc}
 80069c6:	bf00      	nop

080069c8 <HAL_UART_ErrorCallback>:
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop

080069cc <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80069cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069ce:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80069d2:	2b21      	cmp	r3, #33	; 0x21
{
 80069d4:	b510      	push	{r4, lr}
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069d6:	d020      	beq.n	8006a1a <UART_DMAError+0x4e>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d8:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 80069dc:	2b22      	cmp	r3, #34	; 0x22
 80069de:	d008      	beq.n	80069f2 <UART_DMAError+0x26>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }
  
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069e0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80069e4:	f043 0310 	orr.w	r3, r3, #16
 80069e8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  HAL_UART_ErrorCallback(huart);
 80069ec:	f7ff ffec 	bl	80069c8 <HAL_UART_ErrorCallback>
 80069f0:	bd10      	pop	{r4, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80069f2:	6803      	ldr	r3, [r0, #0]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	0652      	lsls	r2, r2, #25
 80069f8:	d5f2      	bpl.n	80069e0 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 80069fa:	2100      	movs	r1, #0
 80069fc:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a06:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a08:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	609a      	str	r2, [r3, #8]
  huart->RxISR = NULL;
 8006a12:	6701      	str	r1, [r0, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8006a14:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
 8006a18:	e7e2      	b.n	80069e0 <UART_DMAError+0x14>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8006a1a:	6803      	ldr	r3, [r0, #0]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	0611      	lsls	r1, r2, #24
 8006a20:	d5da      	bpl.n	80069d8 <UART_DMAError+0xc>
    huart->TxXferCount = 0U;
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a28:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006a2a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006a30:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006a32:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
 8006a36:	e7cf      	b.n	80069d8 <UART_DMAError+0xc>

08006a38 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a38:	6803      	ldr	r3, [r0, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
{
 8006a3c:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8006a3e:	0716      	lsls	r6, r2, #28
{
 8006a40:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a42:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a44:	6899      	ldr	r1, [r3, #8]
  if (errorflags == RESET)
 8006a46:	d05d      	beq.n	8006b04 <HAL_UART_IRQHandler+0xcc>
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8006a48:	4d6e      	ldr	r5, [pc, #440]	; (8006c04 <HAL_UART_IRQHandler+0x1cc>)
 8006a4a:	400d      	ands	r5, r1
 8006a4c:	f000 8083 	beq.w	8006b56 <HAL_UART_IRQHandler+0x11e>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a50:	07d6      	lsls	r6, r2, #31
 8006a52:	d509      	bpl.n	8006a68 <HAL_UART_IRQHandler+0x30>
 8006a54:	05c6      	lsls	r6, r0, #23
 8006a56:	d507      	bpl.n	8006a68 <HAL_UART_IRQHandler+0x30>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a58:	2601      	movs	r6, #1
 8006a5a:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a5c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8006a60:	f046 0601 	orr.w	r6, r6, #1
 8006a64:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a68:	0796      	lsls	r6, r2, #30
 8006a6a:	f140 808d 	bpl.w	8006b88 <HAL_UART_IRQHandler+0x150>
 8006a6e:	07ce      	lsls	r6, r1, #31
 8006a70:	d50a      	bpl.n	8006a88 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a72:	2602      	movs	r6, #2
 8006a74:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a76:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8006a7a:	f046 0604 	orr.w	r6, r6, #4
 8006a7e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a82:	0756      	lsls	r6, r2, #29
 8006a84:	f100 8086 	bmi.w	8006b94 <HAL_UART_IRQHandler+0x15c>
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8006a88:	0716      	lsls	r6, r2, #28
 8006a8a:	d505      	bpl.n	8006a98 <HAL_UART_IRQHandler+0x60>
       &&(  ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 8006a8c:	0686      	lsls	r6, r0, #26
 8006a8e:	f100 808a 	bmi.w	8006ba6 <HAL_UART_IRQHandler+0x16e>
 8006a92:	2d00      	cmp	r5, #0
 8006a94:	f040 8087 	bne.w	8006ba6 <HAL_UART_IRQHandler+0x16e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a98:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006a9c:	2d00      	cmp	r5, #0
 8006a9e:	d030      	beq.n	8006b02 <HAL_UART_IRQHandler+0xca>
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006aa0:	0695      	lsls	r5, r2, #26
 8006aa2:	d507      	bpl.n	8006ab4 <HAL_UART_IRQHandler+0x7c>
         && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006aa4:	0680      	lsls	r0, r0, #26
 8006aa6:	f140 8087 	bpl.w	8006bb8 <HAL_UART_IRQHandler+0x180>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8006aaa:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8006aac:	b112      	cbz	r2, 8006ab4 <HAL_UART_IRQHandler+0x7c>
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4790      	blx	r2
 8006ab2:	6823      	ldr	r3, [r4, #0]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006ab4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006ab8:	0712      	lsls	r2, r2, #28
 8006aba:	d404      	bmi.n	8006ac6 <HAL_UART_IRQHandler+0x8e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006abc:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006abe:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006ac2:	f000 8098 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x1be>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006acc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ace:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8006ad0:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad2:	f022 0201 	bic.w	r2, r2, #1
 8006ad6:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	f884 1082 	strb.w	r1, [r4, #130]	; 0x82
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006adc:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 8006ade:	2100      	movs	r1, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	0656      	lsls	r6, r2, #25
  huart->RxISR = NULL;
 8006ae2:	6721      	str	r1, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae4:	f140 8083 	bpl.w	8006bee <HAL_UART_IRQHandler+0x1b6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae8:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006aea:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d07b      	beq.n	8006bee <HAL_UART_IRQHandler+0x1b6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006af6:	4b44      	ldr	r3, [pc, #272]	; (8006c08 <HAL_UART_IRQHandler+0x1d0>)
 8006af8:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006afa:	f7fb f9c5 	bl	8001e88 <HAL_DMA_Abort_IT>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d15e      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x188>
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006b04:	0695      	lsls	r5, r2, #26
 8006b06:	d50a      	bpl.n	8006b1e <HAL_UART_IRQHandler+0xe6>
       && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006b08:	0686      	lsls	r6, r0, #26
 8006b0a:	d506      	bpl.n	8006b1a <HAL_UART_IRQHandler+0xe2>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8006b0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f7      	beq.n	8006b02 <HAL_UART_IRQHandler+0xca>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8006b12:	4620      	mov	r0, r4
}
 8006b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8006b18:	4718      	bx	r3
           || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8006b1a:	00cd      	lsls	r5, r1, #3
 8006b1c:	d4f6      	bmi.n	8006b0c <HAL_UART_IRQHandler+0xd4>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006b1e:	02d5      	lsls	r5, r2, #11
 8006b20:	d40a      	bmi.n	8006b38 <HAL_UART_IRQHandler+0x100>
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET) 
 8006b22:	0615      	lsls	r5, r2, #24
 8006b24:	d51f      	bpl.n	8006b66 <HAL_UART_IRQHandler+0x12e>
     && (   ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 8006b26:	0606      	lsls	r6, r0, #24
 8006b28:	d51b      	bpl.n	8006b62 <HAL_UART_IRQHandler+0x12a>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8006b2a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0e8      	beq.n	8006b02 <HAL_UART_IRQHandler+0xca>
 8006b30:	4620      	mov	r0, r4
}
 8006b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8006b36:	4718      	bx	r3
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006b38:	024e      	lsls	r6, r1, #9
 8006b3a:	d5f2      	bpl.n	8006b22 <HAL_UART_IRQHandler+0xea>
    huart->gState  = HAL_UART_STATE_READY;
 8006b3c:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b3e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006b42:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006b44:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 8006b46:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
}
 8006b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006b52:	f000 bbb9 	b.w	80072c8 <HAL_UARTEx_WakeupCallback>
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
 8006b56:	f410 7f90 	tst.w	r0, #288	; 0x120
 8006b5a:	d0e0      	beq.n	8006b1e <HAL_UART_IRQHandler+0xe6>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b5c:	07d6      	lsls	r6, r2, #31
 8006b5e:	d583      	bpl.n	8006a68 <HAL_UART_IRQHandler+0x30>
 8006b60:	e778      	b.n	8006a54 <HAL_UART_IRQHandler+0x1c>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8006b62:	020d      	lsls	r5, r1, #8
 8006b64:	d4e1      	bmi.n	8006b2a <HAL_UART_IRQHandler+0xf2>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b66:	0651      	lsls	r1, r2, #25
 8006b68:	d501      	bpl.n	8006b6e <HAL_UART_IRQHandler+0x136>
 8006b6a:	0646      	lsls	r6, r0, #25
 8006b6c:	d42d      	bmi.n	8006bca <HAL_UART_IRQHandler+0x192>
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8006b6e:	0215      	lsls	r5, r2, #8
 8006b70:	d501      	bpl.n	8006b76 <HAL_UART_IRQHandler+0x13e>
 8006b72:	0041      	lsls	r1, r0, #1
 8006b74:	d436      	bmi.n	8006be4 <HAL_UART_IRQHandler+0x1ac>
  if(((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 8006b76:	01d3      	lsls	r3, r2, #7
 8006b78:	d5c3      	bpl.n	8006b02 <HAL_UART_IRQHandler+0xca>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	dac1      	bge.n	8006b02 <HAL_UART_IRQHandler+0xca>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b7e:	4620      	mov	r0, r4
}
 8006b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b84:	f000 bba2 	b.w	80072cc <HAL_UARTEx_RxFifoFullCallback>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b88:	0756      	lsls	r6, r2, #29
 8006b8a:	f57f af7d 	bpl.w	8006a88 <HAL_UART_IRQHandler+0x50>
 8006b8e:	07ce      	lsls	r6, r1, #31
 8006b90:	f57f af7a 	bpl.w	8006a88 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b94:	2604      	movs	r6, #4
 8006b96:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b98:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8006b9c:	f046 0602 	orr.w	r6, r6, #2
 8006ba0:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
 8006ba4:	e770      	b.n	8006a88 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ba6:	2508      	movs	r5, #8
 8006ba8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006baa:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006bae:	f045 0508 	orr.w	r5, r5, #8
 8006bb2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8006bb6:	e76f      	b.n	8006a98 <HAL_UART_IRQHandler+0x60>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8006bb8:	00c9      	lsls	r1, r1, #3
 8006bba:	f57f af7b 	bpl.w	8006ab4 <HAL_UART_IRQHandler+0x7c>
 8006bbe:	e774      	b.n	8006aaa <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bc0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}
 8006bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006bc8:	4718      	bx	r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bca:	681a      	ldr	r2, [r3, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bcc:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bd2:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bd4:	601a      	str	r2, [r3, #0]
  
  HAL_UART_TxCpltCallback(huart);
 8006bd6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	f884 5081 	strb.w	r5, [r4, #129]	; 0x81
  huart->TxISR = NULL;
 8006bdc:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8006bde:	f7ff fed3 	bl	8006988 <HAL_UART_TxCpltCallback>
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006be4:	4620      	mov	r0, r4
}
 8006be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006bea:	f000 bb71 	b.w	80072d0 <HAL_UARTEx_TxFifoEmptyCallback>
            HAL_UART_ErrorCallback(huart);
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f7ff feea 	bl	80069c8 <HAL_UART_ErrorCallback>
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f7ff fee6 	bl	80069c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	bf00      	nop
 8006c04:	10000001 	.word	0x10000001
 8006c08:	08006c0d 	.word	0x08006c0d

08006c0c <UART_DMAAbortOnError>:
{
 8006c0c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006c0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 8006c16:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8006c18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006c1c:	f7ff fed4 	bl	80069c8 <HAL_UART_ErrorCallback>
 8006c20:	bd08      	pop	{r3, pc}
 8006c22:	bf00      	nop

08006c24 <UART_SetConfig>:
{
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c28:	48c2      	ldr	r0, [pc, #776]	; (8006f34 <UART_SetConfig+0x310>)
  if(UART_INSTANCE_LOWPOWER(huart))
 8006c2a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c2c:	68a2      	ldr	r2, [r4, #8]
 8006c2e:	6927      	ldr	r7, [r4, #16]
 8006c30:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c32:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c34:	69e1      	ldr	r1, [r4, #28]
 8006c36:	433a      	orrs	r2, r7
 8006c38:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c3a:	4028      	ands	r0, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c3c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c3e:	4302      	orrs	r2, r0
 8006c40:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	68e6      	ldr	r6, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c46:	48bc      	ldr	r0, [pc, #752]	; (8006f38 <UART_SetConfig+0x314>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c48:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c4a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006c4e:	4332      	orrs	r2, r6
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c50:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c52:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c54:	f000 80c6 	beq.w	8006de4 <UART_SetConfig+0x1c0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c58:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006c5a:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c5e:	4fb7      	ldr	r7, [pc, #732]	; (8006f3c <UART_SetConfig+0x318>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c60:	f020 406e 	bic.w	r0, r0, #3992977408	; 0xee000000
 8006c64:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006c68:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c6a:	4302      	orrs	r2, r0
 8006c6c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	f022 020f 	bic.w	r2, r2, #15
 8006c74:	4332      	orrs	r2, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c76:	42bb      	cmp	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c78:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c7a:	f000 8101 	beq.w	8006e80 <UART_SetConfig+0x25c>
 8006c7e:	4ab0      	ldr	r2, [pc, #704]	; (8006f40 <UART_SetConfig+0x31c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	f000 8105 	beq.w	8006e90 <UART_SetConfig+0x26c>
 8006c86:	4aaf      	ldr	r2, [pc, #700]	; (8006f44 <UART_SetConfig+0x320>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d04d      	beq.n	8006d28 <UART_SetConfig+0x104>
 8006c8c:	4aae      	ldr	r2, [pc, #696]	; (8006f48 <UART_SetConfig+0x324>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	f000 8106 	beq.w	8006ea0 <UART_SetConfig+0x27c>
 8006c94:	4aad      	ldr	r2, [pc, #692]	; (8006f4c <UART_SetConfig+0x328>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d05b      	beq.n	8006d52 <UART_SetConfig+0x12e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006c9a:	2310      	movs	r3, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006ca0:	f000 8089 	beq.w	8006db6 <UART_SetConfig+0x192>
    switch (clocksource)
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d81d      	bhi.n	8006ce4 <UART_SetConfig+0xc0>
 8006ca8:	e8df f003 	tbb	[pc, r3]
 8006cac:	1c782663 	.word	0x1c782663
 8006cb0:	1c1c1c50 	.word	0x1c1c1c50
 8006cb4:	66          	.byte	0x66
 8006cb5:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cb8:	f44f 7e80 	mov.w	lr, #256	; 0x100
 8006cbc:	0878      	lsrs	r0, r7, #1
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8006cc4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8006cc8:	463a      	mov	r2, r7
 8006cca:	fbb5 f5f3 	udiv	r5, r5, r3
 8006cce:	2300      	movs	r3, #0
 8006cd0:	fbe5 010e 	umlal	r0, r1, r5, lr
 8006cd4:	f7f9 ffec 	bl	8000cb0 <__aeabi_uldivmod>
 8006cd8:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cda:	4a9d      	ldr	r2, [pc, #628]	; (8006f50 <UART_SetConfig+0x32c>)
 8006cdc:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8006ce0:	4291      	cmp	r1, r2
 8006ce2:	d91d      	bls.n	8006d20 <UART_SetConfig+0xfc>
      ret = HAL_ERROR;
 8006ce4:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8006ce6:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8006ce8:	2300      	movs	r3, #0
  huart->NbTxDataToProcess = 1;
 8006cea:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  huart->NbRxDataToProcess = 1;
 8006cee:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  huart->RxISR = NULL;
 8006cf2:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006cf4:	6763      	str	r3, [r4, #116]	; 0x74
}
 8006cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf8:	f7fd fd9e 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8006cfc:	4b95      	ldr	r3, [pc, #596]	; (8006f54 <UART_SetConfig+0x330>)
 8006cfe:	6861      	ldr	r1, [r4, #4]
 8006d00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d02:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006d06:	fbb0 f3f2 	udiv	r3, r0, r2
 8006d0a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8006d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d12:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d14:	f1a3 0110 	sub.w	r1, r3, #16
 8006d18:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006d1c:	4291      	cmp	r1, r2
 8006d1e:	d8e1      	bhi.n	8006ce4 <UART_SetConfig+0xc0>
      huart->Instance->BRR = usartdiv;
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	2000      	movs	r0, #0
 8006d24:	60d3      	str	r3, [r2, #12]
 8006d26:	e7de      	b.n	8006ce6 <UART_SetConfig+0xc2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d28:	4b8b      	ldr	r3, [pc, #556]	; (8006f58 <UART_SetConfig+0x334>)
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d32:	2b10      	cmp	r3, #16
 8006d34:	d006      	beq.n	8006d44 <UART_SetConfig+0x120>
 8006d36:	d916      	bls.n	8006d66 <UART_SetConfig+0x142>
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d02b      	beq.n	8006d94 <UART_SetConfig+0x170>
 8006d3c:	2b30      	cmp	r3, #48	; 0x30
 8006d3e:	f000 80bf 	beq.w	8006ec0 <UART_SetConfig+0x29c>
 8006d42:	e7cf      	b.n	8006ce4 <UART_SetConfig+0xc0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d44:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006d48:	f000 8127 	beq.w	8006f9a <UART_SetConfig+0x376>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d4c:	f7fd f9c2 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8006d50:	e7d4      	b.n	8006cfc <UART_SetConfig+0xd8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d52:	4b81      	ldr	r3, [pc, #516]	; (8006f58 <UART_SetConfig+0x334>)
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d60:	d0f0      	beq.n	8006d44 <UART_SetConfig+0x120>
 8006d62:	f200 80df 	bhi.w	8006f24 <UART_SetConfig+0x300>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1bc      	bne.n	8006ce4 <UART_SetConfig+0xc0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d6a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006d6e:	f000 8103 	beq.w	8006f78 <UART_SetConfig+0x354>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d72:	f7fd fd4f 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8006d76:	e7c1      	b.n	8006cfc <UART_SetConfig+0xd8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d78:	4b76      	ldr	r3, [pc, #472]	; (8006f54 <UART_SetConfig+0x330>)
 8006d7a:	6862      	ldr	r2, [r4, #4]
 8006d7c:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
 8006d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d84:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d88:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d90:	b29b      	uxth	r3, r3
      break;
 8006d92:	e7bf      	b.n	8006d14 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006d98:	f000 80f1 	beq.w	8006f7e <UART_SetConfig+0x35a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d9c:	4b6d      	ldr	r3, [pc, #436]	; (8006f54 <UART_SetConfig+0x330>)
 8006d9e:	6862      	ldr	r2, [r4, #4]
 8006da0:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
 8006da4:	4b6d      	ldr	r3, [pc, #436]	; (8006f5c <UART_SetConfig+0x338>)
 8006da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006daa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db2:	b29b      	uxth	r3, r3
      break;
 8006db4:	e7ae      	b.n	8006d14 <UART_SetConfig+0xf0>
    switch (clocksource)
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d894      	bhi.n	8006ce4 <UART_SetConfig+0xc0>
 8006dba:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UART_SetConfig+0x19c>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006f79 	.word	0x08006f79
 8006dc4:	08006f05 	.word	0x08006f05
 8006dc8:	08006f7f 	.word	0x08006f7f
 8006dcc:	08006ce5 	.word	0x08006ce5
 8006dd0:	08006f9b 	.word	0x08006f9b
 8006dd4:	08006ce5 	.word	0x08006ce5
 8006dd8:	08006ce5 	.word	0x08006ce5
 8006ddc:	08006ce5 	.word	0x08006ce5
 8006de0:	08006ec9 	.word	0x08006ec9
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de4:	689a      	ldr	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006de6:	485c      	ldr	r0, [pc, #368]	; (8006f58 <UART_SetConfig+0x334>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de8:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006dec:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006df0:	432a      	orrs	r2, r5
 8006df2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006df8:	f022 020f 	bic.w	r2, r2, #15
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e00:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8006e04:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8006e08:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006e0c:	f000 8109 	beq.w	8007022 <UART_SetConfig+0x3fe>
 8006e10:	f240 80fb 	bls.w	800700a <UART_SetConfig+0x3e6>
 8006e14:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006e18:	f000 80a6 	beq.w	8006f68 <UART_SetConfig+0x344>
 8006e1c:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8006e20:	f47f af60 	bne.w	8006ce4 <UART_SetConfig+0xc0>
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e24:	4e4b      	ldr	r6, [pc, #300]	; (8006f54 <UART_SetConfig+0x330>)
      break;
 8006e26:	2508      	movs	r5, #8
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006e2c:	f836 3011 	ldrh.w	r3, [r6, r1, lsl #1]
 8006e30:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f43f af56 	beq.w	8006ce6 <UART_SetConfig+0xc2>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8006e3a:	6867      	ldr	r7, [r4, #4]
 8006e3c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8006e40:	4283      	cmp	r3, r0
 8006e42:	f63f af4f 	bhi.w	8006ce4 <UART_SetConfig+0xc0>
 8006e46:	ebb0 3f07 	cmp.w	r0, r7, lsl #12
 8006e4a:	f63f af4b 	bhi.w	8006ce4 <UART_SetConfig+0xc0>
        switch (clocksource)
 8006e4e:	2d08      	cmp	r5, #8
 8006e50:	f63f af48 	bhi.w	8006ce4 <UART_SetConfig+0xc0>
 8006e54:	a301      	add	r3, pc, #4	; (adr r3, 8006e5c <UART_SetConfig+0x238>)
 8006e56:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08007005 	.word	0x08007005
 8006e60:	08006ce5 	.word	0x08006ce5
 8006e64:	08006fd5 	.word	0x08006fd5
 8006e68:	08006ce5 	.word	0x08006ce5
 8006e6c:	08006fa1 	.word	0x08006fa1
 8006e70:	08006ce5 	.word	0x08006ce5
 8006e74:	08006ce5 	.word	0x08006ce5
 8006e78:	08006ce5 	.word	0x08006ce5
 8006e7c:	08006cb7 	.word	0x08006cb7
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e80:	4b35      	ldr	r3, [pc, #212]	; (8006f58 <UART_SetConfig+0x334>)
 8006e82:	4a37      	ldr	r2, [pc, #220]	; (8006f60 <UART_SetConfig+0x33c>)
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	5cd3      	ldrb	r3, [r2, r3]
 8006e8e:	e705      	b.n	8006c9c <UART_SetConfig+0x78>
 8006e90:	4b31      	ldr	r3, [pc, #196]	; (8006f58 <UART_SetConfig+0x334>)
 8006e92:	4a34      	ldr	r2, [pc, #208]	; (8006f64 <UART_SetConfig+0x340>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e98:	f003 030c 	and.w	r3, r3, #12
 8006e9c:	5cd3      	ldrb	r3, [r2, r3]
 8006e9e:	e6fd      	b.n	8006c9c <UART_SetConfig+0x78>
 8006ea0:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <UART_SetConfig+0x334>)
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006eaa:	2b40      	cmp	r3, #64	; 0x40
 8006eac:	f43f af4a 	beq.w	8006d44 <UART_SetConfig+0x120>
 8006eb0:	f67f af59 	bls.w	8006d66 <UART_SetConfig+0x142>
 8006eb4:	2b80      	cmp	r3, #128	; 0x80
 8006eb6:	f43f af6d 	beq.w	8006d94 <UART_SetConfig+0x170>
 8006eba:	2bc0      	cmp	r3, #192	; 0xc0
 8006ebc:	f47f af12 	bne.w	8006ce4 <UART_SetConfig+0xc0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ec0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006ec4:	f47f af58 	bne.w	8006d78 <UART_SetConfig+0x154>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ec8:	6861      	ldr	r1, [r4, #4]
 8006eca:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <UART_SetConfig+0x330>)
 8006ecc:	084b      	lsrs	r3, r1, #1
 8006ece:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 8006ed2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006ed6:	fbb2 f2f0 	udiv	r2, r2, r0
 8006eda:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ee2:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ee4:	f1a3 0110 	sub.w	r1, r3, #16
 8006ee8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006eec:	4291      	cmp	r1, r2
 8006eee:	f63f aef9 	bhi.w	8006ce4 <UART_SetConfig+0xc0>
      brrtemp = usartdiv & 0xFFF0U;
 8006ef2:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8006ef6:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ef8:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60cb      	str	r3, [r1, #12]
 8006f00:	2000      	movs	r0, #0
 8006f02:	e6f0      	b.n	8006ce6 <UART_SetConfig+0xc2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f04:	f7fd fc98 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	4a12      	ldr	r2, [pc, #72]	; (8006f54 <UART_SetConfig+0x330>)
 8006f0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f0e:	084b      	lsrs	r3, r1, #1
 8006f10:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 8006f14:	fbb0 f0f2 	udiv	r0, r0, r2
 8006f18:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006f1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f20:	b29b      	uxth	r3, r3
      break;
 8006f22:	e7df      	b.n	8006ee4 <UART_SetConfig+0x2c0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f28:	f43f af34 	beq.w	8006d94 <UART_SetConfig+0x170>
 8006f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f30:	d0c6      	beq.n	8006ec0 <UART_SetConfig+0x29c>
 8006f32:	e6d7      	b.n	8006ce4 <UART_SetConfig+0xc0>
 8006f34:	cfff69f3 	.word	0xcfff69f3
 8006f38:	40008000 	.word	0x40008000
 8006f3c:	40013800 	.word	0x40013800
 8006f40:	40004400 	.word	0x40004400
 8006f44:	40004800 	.word	0x40004800
 8006f48:	40004c00 	.word	0x40004c00
 8006f4c:	40005000 	.word	0x40005000
 8006f50:	000ffcff 	.word	0x000ffcff
 8006f54:	080272dc 	.word	0x080272dc
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	00f42400 	.word	0x00f42400
 8006f60:	080272c8 	.word	0x080272c8
 8006f64:	080272cc 	.word	0x080272cc
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f68:	4e33      	ldr	r6, [pc, #204]	; (8007038 <UART_SetConfig+0x414>)
 8006f6a:	4834      	ldr	r0, [pc, #208]	; (800703c <UART_SetConfig+0x418>)
 8006f6c:	f836 3011 	ldrh.w	r3, [r6, r1, lsl #1]
 8006f70:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f74:	2502      	movs	r5, #2
 8006f76:	e760      	b.n	8006e3a <UART_SetConfig+0x216>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f78:	f7fd fc4c 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8006f7c:	e7c4      	b.n	8006f08 <UART_SetConfig+0x2e4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f7e:	6861      	ldr	r1, [r4, #4]
 8006f80:	4a2d      	ldr	r2, [pc, #180]	; (8007038 <UART_SetConfig+0x414>)
 8006f82:	4b2e      	ldr	r3, [pc, #184]	; (800703c <UART_SetConfig+0x418>)
 8006f84:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8006f88:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f8c:	084b      	lsrs	r3, r1, #1
 8006f8e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f96:	b29b      	uxth	r3, r3
      break;
 8006f98:	e7a4      	b.n	8006ee4 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f9a:	f7fd f89b 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8006f9e:	e7b3      	b.n	8006f08 <UART_SetConfig+0x2e4>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa0:	f7fd f898 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8006fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa6:	6865      	ldr	r5, [r4, #4]
 8006fa8:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8006fac:	2100      	movs	r1, #0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f7f9 fe7e 	bl	8000cb0 <__aeabi_uldivmod>
 8006fb4:	020b      	lsls	r3, r1, #8
 8006fb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fba:	0202      	lsls	r2, r0, #8
 8006fbc:	0868      	lsrs	r0, r5, #1
 8006fbe:	1816      	adds	r6, r2, r0
 8006fc0:	f143 0700 	adc.w	r7, r3, #0
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4639      	mov	r1, r7
 8006fca:	462a      	mov	r2, r5
 8006fcc:	f7f9 fe70 	bl	8000cb0 <__aeabi_uldivmod>
 8006fd0:	4603      	mov	r3, r0
          break;
 8006fd2:	e682      	b.n	8006cda <UART_SetConfig+0xb6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd6:	4819      	ldr	r0, [pc, #100]	; (800703c <UART_SetConfig+0x418>)
 8006fd8:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8006fdc:	2100      	movs	r1, #0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f7f9 fe66 	bl	8000cb0 <__aeabi_uldivmod>
 8006fe4:	020b      	lsls	r3, r1, #8
 8006fe6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fea:	0202      	lsls	r2, r0, #8
 8006fec:	0878      	lsrs	r0, r7, #1
 8006fee:	1815      	adds	r5, r2, r0
 8006ff0:	f143 0600 	adc.w	r6, r3, #0
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	463a      	mov	r2, r7
 8006ffc:	f7f9 fe58 	bl	8000cb0 <__aeabi_uldivmod>
 8007000:	4603      	mov	r3, r0
          break;
 8007002:	e66a      	b.n	8006cda <UART_SetConfig+0xb6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007004:	f7fd fc06 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8007008:	e7cc      	b.n	8006fa4 <UART_SetConfig+0x380>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800700a:	2d00      	cmp	r5, #0
 800700c:	f47f ae6a 	bne.w	8006ce4 <UART_SetConfig+0xc0>
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8007010:	f7fd fc00 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8007014:	4e08      	ldr	r6, [pc, #32]	; (8007038 <UART_SetConfig+0x414>)
 8007016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007018:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800701c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8007020:	e708      	b.n	8006e34 <UART_SetConfig+0x210>
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8007022:	f7fd f857 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8007026:	4e04      	ldr	r6, [pc, #16]	; (8007038 <UART_SetConfig+0x414>)
 8007028:	6a63      	ldr	r3, [r4, #36]	; 0x24
      break;
 800702a:	2504      	movs	r5, #4
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 800702c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8007030:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8007034:	e6fe      	b.n	8006e34 <UART_SetConfig+0x210>
 8007036:	bf00      	nop
 8007038:	080272dc 	.word	0x080272dc
 800703c:	00f42400 	.word	0x00f42400

08007040 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007040:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007042:	07da      	lsls	r2, r3, #31
{
 8007044:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007046:	d506      	bpl.n	8007056 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007048:	6801      	ldr	r1, [r0, #0]
 800704a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800704c:	684a      	ldr	r2, [r1, #4]
 800704e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007052:	4322      	orrs	r2, r4
 8007054:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007056:	079c      	lsls	r4, r3, #30
 8007058:	d506      	bpl.n	8007068 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800705a:	6801      	ldr	r1, [r0, #0]
 800705c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800705e:	684a      	ldr	r2, [r1, #4]
 8007060:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007064:	4322      	orrs	r2, r4
 8007066:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007068:	0759      	lsls	r1, r3, #29
 800706a:	d506      	bpl.n	800707a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800706c:	6801      	ldr	r1, [r0, #0]
 800706e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007070:	684a      	ldr	r2, [r1, #4]
 8007072:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007076:	4322      	orrs	r2, r4
 8007078:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800707a:	071a      	lsls	r2, r3, #28
 800707c:	d506      	bpl.n	800708c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800707e:	6801      	ldr	r1, [r0, #0]
 8007080:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007082:	684a      	ldr	r2, [r1, #4]
 8007084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007088:	4322      	orrs	r2, r4
 800708a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800708c:	06dc      	lsls	r4, r3, #27
 800708e:	d506      	bpl.n	800709e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007090:	6801      	ldr	r1, [r0, #0]
 8007092:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007094:	688a      	ldr	r2, [r1, #8]
 8007096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800709a:	4322      	orrs	r2, r4
 800709c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800709e:	0699      	lsls	r1, r3, #26
 80070a0:	d506      	bpl.n	80070b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070a2:	6801      	ldr	r1, [r0, #0]
 80070a4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80070a6:	688a      	ldr	r2, [r1, #8]
 80070a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ac:	4322      	orrs	r2, r4
 80070ae:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070b0:	065a      	lsls	r2, r3, #25
 80070b2:	d509      	bpl.n	80070c8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070b4:	6801      	ldr	r1, [r0, #0]
 80070b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80070b8:	684a      	ldr	r2, [r1, #4]
 80070ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80070be:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070c4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c6:	d00b      	beq.n	80070e0 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c8:	061b      	lsls	r3, r3, #24
 80070ca:	d506      	bpl.n	80070da <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070cc:	6802      	ldr	r2, [r0, #0]
 80070ce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80070d0:	6853      	ldr	r3, [r2, #4]
 80070d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80070d6:	430b      	orrs	r3, r1
 80070d8:	6053      	str	r3, [r2, #4]
}
 80070da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070de:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070e0:	684a      	ldr	r2, [r1, #4]
 80070e2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80070e4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80070e8:	4322      	orrs	r2, r4
 80070ea:	604a      	str	r2, [r1, #4]
 80070ec:	e7ec      	b.n	80070c8 <UART_AdvFeatureConfig+0x88>
 80070ee:	bf00      	nop

080070f0 <UART_WaitOnFlagUntilTimeout>:
{
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	9d08      	ldr	r5, [sp, #32]
 80070f6:	4680      	mov	r8, r0
 80070f8:	460f      	mov	r7, r1
 80070fa:	4616      	mov	r6, r2
 80070fc:	4699      	mov	r9, r3
 80070fe:	f8d8 4000 	ldr.w	r4, [r8]
 8007102:	e001      	b.n	8007108 <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 8007104:	1c6b      	adds	r3, r5, #1
 8007106:	d10a      	bne.n	800711e <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007108:	69e0      	ldr	r0, [r4, #28]
 800710a:	ea37 0300 	bics.w	r3, r7, r0
 800710e:	bf0c      	ite	eq
 8007110:	2001      	moveq	r0, #1
 8007112:	2000      	movne	r0, #0
 8007114:	42b0      	cmp	r0, r6
 8007116:	d0f5      	beq.n	8007104 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8007118:	2000      	movs	r0, #0
}
 800711a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800711e:	b13d      	cbz	r5, 8007130 <UART_WaitOnFlagUntilTimeout+0x40>
 8007120:	f7f9 ff7e 	bl	8001020 <HAL_GetTick>
 8007124:	eba0 0009 	sub.w	r0, r0, r9
 8007128:	4285      	cmp	r5, r0
 800712a:	d2e8      	bcs.n	80070fe <UART_WaitOnFlagUntilTimeout+0xe>
 800712c:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007136:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007138:	68a3      	ldr	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 800713a:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713c:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8007140:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007142:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 8007144:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8007146:	f888 2081 	strb.w	r2, [r8, #129]	; 0x81
        __HAL_UNLOCK(huart);
 800714a:	f888 1080 	strb.w	r1, [r8, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800714e:	f888 2082 	strb.w	r2, [r8, #130]	; 0x82
 8007152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007156:	bf00      	nop

08007158 <UART_CheckIdleState>:
{
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800715c:	2500      	movs	r5, #0
{
 800715e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007160:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8007164:	f7f9 ff5c 	bl	8001020 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800716e:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007170:	d40c      	bmi.n	800718c <UART_CheckIdleState+0x34>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	075b      	lsls	r3, r3, #29
 8007176:	d417      	bmi.n	80071a8 <UART_CheckIdleState+0x50>
  huart->gState= HAL_UART_STATE_READY;
 8007178:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800717a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800717c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8007180:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState= HAL_UART_STATE_READY;
 8007184:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
}
 8007188:	b002      	add	sp, #8
 800718a:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800718c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	462a      	mov	r2, r5
 8007194:	4603      	mov	r3, r0
 8007196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800719a:	4620      	mov	r0, r4
 800719c:	f7ff ffa8 	bl	80070f0 <UART_WaitOnFlagUntilTimeout>
 80071a0:	b180      	cbz	r0, 80071c4 <UART_CheckIdleState+0x6c>
      return HAL_TIMEOUT;
 80071a2:	2003      	movs	r0, #3
}
 80071a4:	b002      	add	sp, #8
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80071ac:	9200      	str	r2, [sp, #0]
 80071ae:	4633      	mov	r3, r6
 80071b0:	2200      	movs	r2, #0
 80071b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071b6:	4620      	mov	r0, r4
 80071b8:	f7ff ff9a 	bl	80070f0 <UART_WaitOnFlagUntilTimeout>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d0db      	beq.n	8007178 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80071c0:	2003      	movs	r0, #3
 80071c2:	e7ef      	b.n	80071a4 <UART_CheckIdleState+0x4c>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	e7d4      	b.n	8007172 <UART_CheckIdleState+0x1a>

080071c8 <HAL_UART_Init>:
  if(huart == NULL)
 80071c8:	b390      	cbz	r0, 8007230 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 80071ca:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
{
 80071ce:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80071d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071d4:	4604      	mov	r4, r0
 80071d6:	b303      	cbz	r3, 800721a <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80071d8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80071da:	2324      	movs	r3, #36	; 0x24
 80071dc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 80071e0:	6813      	ldr	r3, [r2, #0]
 80071e2:	f023 0301 	bic.w	r3, r3, #1
 80071e6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7ff fd1b 	bl	8006c24 <UART_SetConfig>
 80071ee:	2801      	cmp	r0, #1
 80071f0:	d018      	beq.n	8007224 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071f4:	b9c3      	cbnz	r3, 8007228 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007206:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800720e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007216:	f7ff bf9f 	b.w	8007158 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800721a:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800721e:	f01a fd4d 	bl	8021cbc <HAL_UART_MspInit>
 8007222:	e7d9      	b.n	80071d8 <HAL_UART_Init+0x10>
}
 8007224:	2001      	movs	r0, #1
 8007226:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8007228:	4620      	mov	r0, r4
 800722a:	f7ff ff09 	bl	8007040 <UART_AdvFeatureConfig>
 800722e:	e7e2      	b.n	80071f6 <HAL_UART_Init+0x2e>
}
 8007230:	2001      	movs	r0, #1
 8007232:	4770      	bx	lr

08007234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007234:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
  
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007236:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8007238:	b084      	sub	sp, #16
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 800723a:	2301      	movs	r3, #1
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 800723c:	2108      	movs	r1, #8
 800723e:	2204      	movs	r2, #4
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8007240:	2703      	movs	r7, #3
 8007242:	2607      	movs	r6, #7
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8007244:	2502      	movs	r5, #2
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8007246:	f88d 3000 	strb.w	r3, [sp]
 800724a:	f88d 3001 	strb.w	r3, [sp, #1]
 800724e:	f88d 3002 	strb.w	r3, [sp, #2]
 8007252:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8007256:	f88d 300d 	strb.w	r3, [sp, #13]
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 800725a:	f88d 7003 	strb.w	r7, [sp, #3]
 800725e:	f88d 6004 	strb.w	r6, [sp, #4]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8007262:	f88d 1008 	strb.w	r1, [sp, #8]
 8007266:	f88d 100c 	strb.w	r1, [sp, #12]
 800726a:	f88d 2009 	strb.w	r2, [sp, #9]
 800726e:	f88d 200b 	strb.w	r2, [sp, #11]
 8007272:	f88d 500a 	strb.w	r5, [sp, #10]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007276:	b1fc      	cbz	r4, 80072b8 <UARTEx_SetNbDataToProcess+0x84>
  }
  else
  {
    rx_fifo_depth = 8; /* RX Fifo size */
    tx_fifo_depth = 8; /* TX Fifo size */
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007278:	6803      	ldr	r3, [r0, #0]
 800727a:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800727c:	689c      	ldr	r4, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 800727e:	f3c1 6142 	ubfx	r1, r1, #25, #3
 8007282:	ab04      	add	r3, sp, #16
 8007284:	4419      	add	r1, r3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8007286:	eb03 7454 	add.w	r4, r3, r4, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 800728a:	f811 2c10 	ldrb.w	r2, [r1, #-16]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 800728e:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8007292:	f811 5c08 	ldrb.w	r5, [r1, #-8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8007296:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 800729a:	00d2      	lsls	r2, r2, #3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 800729c:	00db      	lsls	r3, r3, #3
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 800729e:	b2d2      	uxtb	r2, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 80072a0:	b2db      	uxtb	r3, r3
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 80072a2:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 80072a6:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 80072aa:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 80072ae:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
  }
}
 80072b2:	b004      	add	sp, #16
 80072b4:	bcf0      	pop	{r4, r5, r6, r7}
 80072b6:	4770      	bx	lr
    huart->NbTxDataToProcess = 1;
 80072b8:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    huart->NbRxDataToProcess = 1;
 80072bc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
}
 80072c0:	b004      	add	sp, #16
 80072c2:	bcf0      	pop	{r4, r5, r6, r7}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop

080072c8 <HAL_UARTEx_WakeupCallback>:
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop

080072cc <HAL_UARTEx_RxFifoFullCallback>:
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop

080072d0 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop

080072d4 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 80072d4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_UARTEx_SetTxFifoThreshold+0xc>
 80072dc:	2002      	movs	r0, #2
 80072de:	4770      	bx	lr
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072e0:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072e2:	2224      	movs	r2, #36	; 0x24
{
 80072e4:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80072e6:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ea:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80072ec:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(huart);
 80072ee:	2601      	movs	r6, #1
  __HAL_UART_DISABLE(huart);
 80072f0:	f022 0201 	bic.w	r2, r2, #1
  __HAL_LOCK(huart);
 80072f4:	f880 6080 	strb.w	r6, [r0, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80072f8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8007300:	4311      	orrs	r1, r2
 8007302:	6099      	str	r1, [r3, #8]
 8007304:	4604      	mov	r4, r0
  UARTEx_SetNbDataToProcess(huart);
 8007306:	f7ff ff95 	bl	8007234 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800730a:	6801      	ldr	r1, [r0, #0]
  __HAL_UNLOCK(huart);
 800730c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800730e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007310:	600d      	str	r5, [r1, #0]
  return HAL_OK;
 8007312:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8007314:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8007318:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return HAL_OK;
 800731c:	bd70      	pop	{r4, r5, r6, pc}
 800731e:	bf00      	nop

08007320 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007320:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_UARTEx_SetRxFifoThreshold+0xc>
 8007328:	2002      	movs	r0, #2
 800732a:	4770      	bx	lr
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800732c:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800732e:	2224      	movs	r2, #36	; 0x24
{
 8007330:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007332:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007336:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007338:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(huart);
 800733a:	2601      	movs	r6, #1
  __HAL_UART_DISABLE(huart);
 800733c:	f022 0201 	bic.w	r2, r2, #1
  __HAL_LOCK(huart);
 8007340:	f880 6080 	strb.w	r6, [r0, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8007344:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800734c:	4311      	orrs	r1, r2
 800734e:	6099      	str	r1, [r3, #8]
 8007350:	4604      	mov	r4, r0
  UARTEx_SetNbDataToProcess(huart);
 8007352:	f7ff ff6f 	bl	8007234 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007356:	6801      	ldr	r1, [r0, #0]
  __HAL_UNLOCK(huart);
 8007358:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800735a:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800735c:	600d      	str	r5, [r1, #0]
  return HAL_OK;
 800735e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8007360:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8007364:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return HAL_OK;
 8007368:	bd70      	pop	{r4, r5, r6, pc}
 800736a:	bf00      	nop

0800736c <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800736c:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <SDMMC_GetCmdResp2+0x4c>)
 800736e:	4a13      	ldr	r2, [pc, #76]	; (80073bc <SDMMC_GetCmdResp2+0x50>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	0a5a      	lsrs	r2, r3, #9
 8007378:	f241 3388 	movw	r3, #5000	; 0x1388
 800737c:	fb03 f302 	mul.w	r3, r3, r2
 8007380:	e003      	b.n	800738a <SDMMC_GetCmdResp2+0x1e>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007382:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007384:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007388:	d105      	bne.n	8007396 <SDMMC_GetCmdResp2+0x2a>
    if (count-- == 0)
 800738a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800738e:	d2f8      	bcs.n	8007382 <SDMMC_GetCmdResp2+0x16>
      return SDMMC_ERROR_TIMEOUT;
 8007390:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8007394:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007396:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007398:	075b      	lsls	r3, r3, #29
 800739a:	d503      	bpl.n	80073a4 <SDMMC_GetCmdResp2+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800739c:	2304      	movs	r3, #4
 800739e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073a0:	4618      	mov	r0, r3
 80073a2:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80073a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073a6:	f013 0301 	ands.w	r3, r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80073aa:	bf15      	itete	ne
 80073ac:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073ae:	4a04      	ldreq	r2, [pc, #16]	; (80073c0 <SDMMC_GetCmdResp2+0x54>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80073b0:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073b2:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80073b4:	4618      	mov	r0, r3
 80073b6:	4770      	bx	lr
 80073b8:	20000a50 	.word	0x20000a50
 80073bc:	10624dd3 	.word	0x10624dd3
 80073c0:	002000c5 	.word	0x002000c5

080073c4 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80073c4:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <SDMMC_GetCmdResp3+0x40>)
 80073c6:	4a10      	ldr	r2, [pc, #64]	; (8007408 <SDMMC_GetCmdResp3+0x44>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	0a5a      	lsrs	r2, r3, #9
 80073d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80073d4:	fb03 f302 	mul.w	r3, r3, r2
 80073d8:	e003      	b.n	80073e2 <SDMMC_GetCmdResp3+0x1e>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80073da:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80073dc:	f012 0f45 	tst.w	r2, #69	; 0x45
 80073e0:	d105      	bne.n	80073ee <SDMMC_GetCmdResp3+0x2a>
    if (count-- == 0)
 80073e2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80073e6:	d2f8      	bcs.n	80073da <SDMMC_GetCmdResp3+0x16>
      return SDMMC_ERROR_TIMEOUT;
 80073e8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
}
 80073ec:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80073ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073f0:	f013 0304 	ands.w	r3, r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073f4:	bf15      	itete	ne
 80073f6:	2304      	movne	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073f8:	4a04      	ldreq	r2, [pc, #16]	; (800740c <SDMMC_GetCmdResp3+0x48>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073fa:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073fc:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80073fe:	4618      	mov	r0, r3
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000a50 	.word	0x20000a50
 8007408:	10624dd3 	.word	0x10624dd3
 800740c:	002000c5 	.word	0x002000c5

08007410 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007410:	4b4a      	ldr	r3, [pc, #296]	; (800753c <SDMMC_GetCmdResp1+0x12c>)
{
 8007412:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4c4a      	ldr	r4, [pc, #296]	; (8007540 <SDMMC_GetCmdResp1+0x130>)
 8007418:	fba4 4303 	umull	r4, r3, r4, r3
 800741c:	0a5b      	lsrs	r3, r3, #9
{
 800741e:	b083      	sub	sp, #12
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007420:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0)
 8007424:	b17a      	cbz	r2, 8007446 <SDMMC_GetCmdResp1+0x36>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007426:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007428:	f013 0f45 	tst.w	r3, #69	; 0x45
 800742c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007430:	d0f8      	beq.n	8007424 <SDMMC_GetCmdResp1+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007432:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007434:	075c      	lsls	r4, r3, #29
 8007436:	d50c      	bpl.n	8007452 <SDMMC_GetCmdResp1+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007438:	2304      	movs	r3, #4
 800743a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800743c:	4618      	mov	r0, r3
}
 800743e:	b003      	add	sp, #12
 8007440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007444:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007446:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800744a:	b003      	add	sp, #12
 800744c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007450:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007452:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007454:	f013 0301 	ands.w	r3, r3, #1
 8007458:	d105      	bne.n	8007466 <SDMMC_GetCmdResp1+0x56>
  return (uint8_t)(SDMMCx->RESPCMD);
 800745a:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	4291      	cmp	r1, r2
 8007460:	d005      	beq.n	800746e <SDMMC_GetCmdResp1+0x5e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007462:	2001      	movs	r0, #1
 8007464:	e7f1      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007466:	2301      	movs	r3, #1
 8007468:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800746a:	4618      	mov	r0, r3
 800746c:	e7ed      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800746e:	4a35      	ldr	r2, [pc, #212]	; (8007544 <SDMMC_GetCmdResp1+0x134>)
 8007470:	6382      	str	r2, [r0, #56]	; 0x38
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007472:	3014      	adds	r0, #20
  __IO uint32_t tmp = 0;
 8007474:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007476:	9001      	str	r0, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8007478:	9b01      	ldr	r3, [sp, #4]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800747a:	4833      	ldr	r0, [pc, #204]	; (8007548 <SDMMC_GetCmdResp1+0x138>)
  return (*(__IO uint32_t *) tmp);
 800747c:	681b      	ldr	r3, [r3, #0]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800747e:	4018      	ands	r0, r3
 8007480:	2800      	cmp	r0, #0
 8007482:	d0e2      	beq.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007484:	2b00      	cmp	r3, #0
 8007486:	db03      	blt.n	8007490 <SDMMC_GetCmdResp1+0x80>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007488:	005a      	lsls	r2, r3, #1
 800748a:	d504      	bpl.n	8007496 <SDMMC_GetCmdResp1+0x86>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800748c:	2040      	movs	r0, #64	; 0x40
 800748e:	e7dc      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007490:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007494:	e7d9      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007496:	009c      	lsls	r4, r3, #2
 8007498:	d501      	bpl.n	800749e <SDMMC_GetCmdResp1+0x8e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800749a:	2080      	movs	r0, #128	; 0x80
 800749c:	e7d5      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800749e:	00d9      	lsls	r1, r3, #3
 80074a0:	d502      	bpl.n	80074a8 <SDMMC_GetCmdResp1+0x98>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80074a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80074a6:	e7d0      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80074a8:	011a      	lsls	r2, r3, #4
 80074aa:	d502      	bpl.n	80074b2 <SDMMC_GetCmdResp1+0xa2>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80074ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80074b0:	e7cb      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80074b2:	015c      	lsls	r4, r3, #5
 80074b4:	d502      	bpl.n	80074bc <SDMMC_GetCmdResp1+0xac>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80074b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80074ba:	e7c6      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80074bc:	01d9      	lsls	r1, r3, #7
 80074be:	d502      	bpl.n	80074c6 <SDMMC_GetCmdResp1+0xb6>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80074c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80074c4:	e7c1      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80074c6:	021a      	lsls	r2, r3, #8
 80074c8:	d502      	bpl.n	80074d0 <SDMMC_GetCmdResp1+0xc0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80074ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80074ce:	e7bc      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80074d0:	025c      	lsls	r4, r3, #9
 80074d2:	d502      	bpl.n	80074da <SDMMC_GetCmdResp1+0xca>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80074d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80074d8:	e7b7      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80074da:	0299      	lsls	r1, r3, #10
 80074dc:	d502      	bpl.n	80074e4 <SDMMC_GetCmdResp1+0xd4>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80074de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80074e2:	e7b2      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80074e4:	02da      	lsls	r2, r3, #11
 80074e6:	d502      	bpl.n	80074ee <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 80074e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80074ec:	e7ad      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80074ee:	035c      	lsls	r4, r3, #13
 80074f0:	d502      	bpl.n	80074f8 <SDMMC_GetCmdResp1+0xe8>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80074f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80074f6:	e7a8      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80074f8:	0399      	lsls	r1, r3, #14
 80074fa:	d502      	bpl.n	8007502 <SDMMC_GetCmdResp1+0xf2>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80074fc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007500:	e7a3      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007502:	03da      	lsls	r2, r3, #15
 8007504:	d502      	bpl.n	800750c <SDMMC_GetCmdResp1+0xfc>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007506:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800750a:	e79e      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800750c:	041c      	lsls	r4, r3, #16
 800750e:	d502      	bpl.n	8007516 <SDMMC_GetCmdResp1+0x106>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007510:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007514:	e799      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007516:	0459      	lsls	r1, r3, #17
 8007518:	d502      	bpl.n	8007520 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800751a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800751e:	e794      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007520:	049a      	lsls	r2, r3, #18
 8007522:	d502      	bpl.n	800752a <SDMMC_GetCmdResp1+0x11a>
    return SDMMC_ERROR_ERASE_RESET;
 8007524:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007528:	e78f      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800752a:	f013 0f08 	tst.w	r3, #8
 800752e:	bf14      	ite	ne
 8007530:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8007534:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007538:	e787      	b.n	800744a <SDMMC_GetCmdResp1+0x3a>
 800753a:	bf00      	nop
 800753c:	20000a50 	.word	0x20000a50
 8007540:	10624dd3 	.word	0x10624dd3
 8007544:	002000c5 	.word	0x002000c5
 8007548:	fdffe008 	.word	0xfdffe008

0800754c <SDMMC_Init>:
{
 800754c:	b084      	sub	sp, #16
 800754e:	b470      	push	{r4, r5, r6}
 8007550:	ac04      	add	r4, sp, #16
 8007552:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007556:	9e05      	ldr	r6, [sp, #20]
 8007558:	9d06      	ldr	r5, [sp, #24]
 800755a:	9c07      	ldr	r4, [sp, #28]
 800755c:	4a07      	ldr	r2, [pc, #28]	; (800757c <SDMMC_Init+0x30>)
 800755e:	460b      	mov	r3, r1
 8007560:	4333      	orrs	r3, r6
 8007562:	432b      	orrs	r3, r5
 8007564:	6845      	ldr	r5, [r0, #4]
 8007566:	9908      	ldr	r1, [sp, #32]
 8007568:	4323      	orrs	r3, r4
 800756a:	402a      	ands	r2, r5
}
 800756c:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 800756e:	430b      	orrs	r3, r1
 8007570:	4313      	orrs	r3, r2
 8007572:	6043      	str	r3, [r0, #4]
}
 8007574:	b004      	add	sp, #16
 8007576:	2000      	movs	r0, #0
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	fffc2c00 	.word	0xfffc2c00

08007580 <SDMMC_ReadFIFO>:
 8007580:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop

08007588 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8007588:	680b      	ldr	r3, [r1, #0]
 800758a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800758e:	2000      	movs	r0, #0
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop

08007594 <SDMMC_PowerState_ON>:
{  
 8007594:	4602      	mov	r2, r0
}
 8007596:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007598:	6813      	ldr	r3, [r2, #0]
 800759a:	f043 0303 	orr.w	r3, r3, #3
 800759e:	6013      	str	r3, [r2, #0]
}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop

080075a4 <SDMMC_PowerState_OFF>:
{
 80075a4:	4602      	mov	r2, r0
}
 80075a6:	2000      	movs	r0, #0
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 80075a8:	6813      	ldr	r3, [r2, #0]
 80075aa:	f023 0303 	bic.w	r3, r3, #3
 80075ae:	6013      	str	r3, [r2, #0]
}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop

080075b4 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80075b4:	6800      	ldr	r0, [r0, #0]
}
 80075b6:	f000 0003 	and.w	r0, r0, #3
 80075ba:	4770      	bx	lr

080075bc <SDMMC_GetResponse>:
{
 80075bc:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80075be:	3014      	adds	r0, #20
 80075c0:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80075c6:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80075c8:	9b01      	ldr	r3, [sp, #4]
 80075ca:	6818      	ldr	r0, [r3, #0]
}  
 80075cc:	b002      	add	sp, #8
 80075ce:	4770      	bx	lr

080075d0 <SDMMC_ConfigData>:
  SDMMCx->DLEN = Data->DataLength;
 80075d0:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 80075d4:	b470      	push	{r4, r5, r6}
  SDMMCx->DTIMER = Data->DataTimeOut;
 80075d6:	6242      	str	r2, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80075d8:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 80075da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80075dc:	688e      	ldr	r6, [r1, #8]
 80075de:	68cd      	ldr	r5, [r1, #12]
 80075e0:	690c      	ldr	r4, [r1, #16]
 80075e2:	694a      	ldr	r2, [r1, #20]
 80075e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075e8:	4333      	orrs	r3, r6
 80075ea:	432b      	orrs	r3, r5
 80075ec:	4323      	orrs	r3, r4
 80075ee:	4313      	orrs	r3, r2
 80075f0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80075f2:	bc70      	pop	{r4, r5, r6}
 80075f4:	2000      	movs	r0, #0
 80075f6:	4770      	bx	lr

080075f8 <SDMMC_CmdBlockLength>:
  SDMMCx->ARG = Command->Argument;
 80075f8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80075fa:	68c1      	ldr	r1, [r0, #12]
 80075fc:	4b05      	ldr	r3, [pc, #20]	; (8007614 <SDMMC_CmdBlockLength+0x1c>)
 80075fe:	400b      	ands	r3, r1
 8007600:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007604:	f043 0310 	orr.w	r3, r3, #16
 8007608:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800760a:	f241 3288 	movw	r2, #5000	; 0x1388
 800760e:	2110      	movs	r1, #16
 8007610:	f7ff befe 	b.w	8007410 <SDMMC_GetCmdResp1>
 8007614:	fffee0c0 	.word	0xfffee0c0

08007618 <SDMMC_CmdReadSingleBlock>:
  SDMMCx->ARG = Command->Argument;
 8007618:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800761a:	68c1      	ldr	r1, [r0, #12]
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <SDMMC_CmdReadSingleBlock+0x1c>)
 800761e:	400b      	ands	r3, r1
 8007620:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007624:	f043 0311 	orr.w	r3, r3, #17
 8007628:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800762a:	f241 3288 	movw	r2, #5000	; 0x1388
 800762e:	2111      	movs	r1, #17
 8007630:	f7ff beee 	b.w	8007410 <SDMMC_GetCmdResp1>
 8007634:	fffee0c0 	.word	0xfffee0c0

08007638 <SDMMC_CmdReadMultiBlock>:
  SDMMCx->ARG = Command->Argument;
 8007638:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800763a:	68c1      	ldr	r1, [r0, #12]
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <SDMMC_CmdReadMultiBlock+0x1c>)
 800763e:	400b      	ands	r3, r1
 8007640:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007644:	f043 0312 	orr.w	r3, r3, #18
 8007648:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800764a:	f241 3288 	movw	r2, #5000	; 0x1388
 800764e:	2112      	movs	r1, #18
 8007650:	f7ff bede 	b.w	8007410 <SDMMC_GetCmdResp1>
 8007654:	fffee0c0 	.word	0xfffee0c0

08007658 <SDMMC_CmdWriteSingleBlock>:
  SDMMCx->ARG = Command->Argument;
 8007658:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800765a:	68c1      	ldr	r1, [r0, #12]
 800765c:	4b05      	ldr	r3, [pc, #20]	; (8007674 <SDMMC_CmdWriteSingleBlock+0x1c>)
 800765e:	400b      	ands	r3, r1
 8007660:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007664:	f043 0318 	orr.w	r3, r3, #24
 8007668:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800766a:	f241 3288 	movw	r2, #5000	; 0x1388
 800766e:	2118      	movs	r1, #24
 8007670:	f7ff bece 	b.w	8007410 <SDMMC_GetCmdResp1>
 8007674:	fffee0c0 	.word	0xfffee0c0

08007678 <SDMMC_CmdWriteMultiBlock>:
  SDMMCx->ARG = Command->Argument;
 8007678:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800767a:	68c1      	ldr	r1, [r0, #12]
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <SDMMC_CmdWriteMultiBlock+0x1c>)
 800767e:	400b      	ands	r3, r1
 8007680:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007684:	f043 0319 	orr.w	r3, r3, #25
 8007688:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800768a:	f241 3288 	movw	r2, #5000	; 0x1388
 800768e:	2119      	movs	r1, #25
 8007690:	f7ff bebe 	b.w	8007410 <SDMMC_GetCmdResp1>
 8007694:	fffee0c0 	.word	0xfffee0c0

08007698 <SDMMC_CmdStopTransfer>:
  SDMMCx->ARG = Command->Argument;
 8007698:	2300      	movs	r3, #0
{
 800769a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800769c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800769e:	68c4      	ldr	r4, [r0, #12]
 80076a0:	4b06      	ldr	r3, [pc, #24]	; (80076bc <SDMMC_CmdStopTransfer+0x24>)
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80076a2:	4a07      	ldr	r2, [pc, #28]	; (80076c0 <SDMMC_CmdStopTransfer+0x28>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80076a4:	4023      	ands	r3, r4
 80076a6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80076aa:	f043 030c 	orr.w	r3, r3, #12
 80076ae:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80076b0:	210c      	movs	r1, #12
}
 80076b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80076b6:	f7ff beab 	b.w	8007410 <SDMMC_GetCmdResp1>
 80076ba:	bf00      	nop
 80076bc:	fffee0c0 	.word	0xfffee0c0
 80076c0:	05f5e100 	.word	0x05f5e100

080076c4 <SDMMC_CmdSelDesel>:
  SDMMCx->ARG = Command->Argument;
 80076c4:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80076c6:	68c2      	ldr	r2, [r0, #12]
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <SDMMC_CmdSelDesel+0x1c>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80076d0:	f043 0307 	orr.w	r3, r3, #7
 80076d4:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80076d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076da:	2107      	movs	r1, #7
 80076dc:	f7ff be98 	b.w	8007410 <SDMMC_GetCmdResp1>
 80076e0:	fffee0c0 	.word	0xfffee0c0

080076e4 <SDMMC_CmdGoIdleState>:
  SDMMCx->ARG = Command->Argument;
 80076e4:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80076e6:	4b12      	ldr	r3, [pc, #72]	; (8007730 <SDMMC_CmdGoIdleState+0x4c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80076e8:	4912      	ldr	r1, [pc, #72]	; (8007734 <SDMMC_CmdGoIdleState+0x50>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80076ea:	681b      	ldr	r3, [r3, #0]
{
 80076ec:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 80076ee:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80076f0:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80076f2:	4a11      	ldr	r2, [pc, #68]	; (8007738 <SDMMC_CmdGoIdleState+0x54>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80076f4:	4021      	ands	r1, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80076fc:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007700:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007704:	60c1      	str	r1, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007706:	fb03 f302 	mul.w	r3, r3, r2
 800770a:	e002      	b.n	8007712 <SDMMC_CmdGoIdleState+0x2e>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800770c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800770e:	0612      	lsls	r2, r2, #24
 8007710:	d407      	bmi.n	8007722 <SDMMC_CmdGoIdleState+0x3e>
    if (count-- == 0)
 8007712:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007716:	d2f9      	bcs.n	800770c <SDMMC_CmdGoIdleState+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8007718:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800771c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007720:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007722:	4b06      	ldr	r3, [pc, #24]	; (800773c <SDMMC_CmdGoIdleState+0x58>)
 8007724:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007726:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SDMMC_ERROR_NONE;
 800772a:	2000      	movs	r0, #0
}
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000a50 	.word	0x20000a50
 8007734:	fffee0c0 	.word	0xfffee0c0
 8007738:	10624dd3 	.word	0x10624dd3
 800773c:	002000c5 	.word	0x002000c5

08007740 <SDMMC_CmdOperCond>:
  SDMMCx->ARG = Command->Argument;
 8007740:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 8007744:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007746:	6083      	str	r3, [r0, #8]
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007748:	4b1b      	ldr	r3, [pc, #108]	; (80077b8 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800774a:	68c4      	ldr	r4, [r0, #12]
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800774e:	681b      	ldr	r3, [r3, #0]
{
 8007750:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007752:	481b      	ldr	r0, [pc, #108]	; (80077c0 <SDMMC_CmdOperCond+0x80>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007754:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007756:	fba0 0303 	umull	r0, r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800775a:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800775e:	0a58      	lsrs	r0, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007760:	f042 0208 	orr.w	r2, r2, #8
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007764:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007768:	60ca      	str	r2, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800776a:	fb03 f300 	mul.w	r3, r3, r0
 800776e:	e003      	b.n	8007778 <SDMMC_CmdOperCond+0x38>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007770:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007772:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007776:	d107      	bne.n	8007788 <SDMMC_CmdOperCond+0x48>
    if (count-- == 0)
 8007778:	f113 33ff 	adds.w	r3, r3, #4294967295
 800777c:	d2f8      	bcs.n	8007770 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800777e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007786:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007788:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800778a:	075b      	lsls	r3, r3, #29
 800778c:	d504      	bpl.n	8007798 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800778e:	2004      	movs	r0, #4
 8007790:	6388      	str	r0, [r1, #56]	; 0x38
}
 8007792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007796:	4770      	bx	lr
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007798:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800779a:	f010 0001 	ands.w	r0, r0, #1
 800779e:	d106      	bne.n	80077ae <SDMMC_CmdOperCond+0x6e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80077a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80077a2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80077a6:	d005      	beq.n	80077b4 <SDMMC_CmdOperCond+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80077a8:	2340      	movs	r3, #64	; 0x40
 80077aa:	638b      	str	r3, [r1, #56]	; 0x38
 80077ac:	e7e9      	b.n	8007782 <SDMMC_CmdOperCond+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80077ae:	2001      	movs	r0, #1
 80077b0:	6388      	str	r0, [r1, #56]	; 0x38
 80077b2:	e7e6      	b.n	8007782 <SDMMC_CmdOperCond+0x42>
  }
  
  return SDMMC_ERROR_NONE;
 80077b4:	4618      	mov	r0, r3
  return errorstate;
 80077b6:	e7e4      	b.n	8007782 <SDMMC_CmdOperCond+0x42>
 80077b8:	20000a50 	.word	0x20000a50
 80077bc:	fffee0c0 	.word	0xfffee0c0
 80077c0:	10624dd3 	.word	0x10624dd3

080077c4 <SDMMC_CmdAppCommand>:
  SDMMCx->ARG = Command->Argument;
 80077c4:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80077c6:	68c1      	ldr	r1, [r0, #12]
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <SDMMC_CmdAppCommand+0x1c>)
 80077ca:	400b      	ands	r3, r1
 80077cc:	f443 5389 	orr.w	r3, r3, #4384	; 0x1120
 80077d0:	f043 0317 	orr.w	r3, r3, #23
 80077d4:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80077d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077da:	2137      	movs	r1, #55	; 0x37
 80077dc:	f7ff be18 	b.w	8007410 <SDMMC_GetCmdResp1>
 80077e0:	fffee0c0 	.word	0xfffee0c0

080077e4 <SDMMC_CmdAppOperCommand>:
  SDMMCx->ARG = Command->Argument;
 80077e4:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80077e6:	68c1      	ldr	r1, [r0, #12]
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <SDMMC_CmdAppOperCommand+0x18>)
 80077ea:	400b      	ands	r3, r1
 80077ec:	f443 5389 	orr.w	r3, r3, #4384	; 0x1120
 80077f0:	f043 0309 	orr.w	r3, r3, #9
 80077f4:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80077f6:	f7ff bde5 	b.w	80073c4 <SDMMC_GetCmdResp3>
 80077fa:	bf00      	nop
 80077fc:	fffee0c0 	.word	0xfffee0c0

08007800 <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 8007800:	2300      	movs	r3, #0
 8007802:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007804:	68c1      	ldr	r1, [r0, #12]
 8007806:	4b06      	ldr	r3, [pc, #24]	; (8007820 <SDMMC_CmdSendSCR+0x20>)
 8007808:	400b      	ands	r3, r1
 800780a:	f443 5389 	orr.w	r3, r3, #4384	; 0x1120
 800780e:	f043 0313 	orr.w	r3, r3, #19
 8007812:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007814:	f241 3288 	movw	r2, #5000	; 0x1388
 8007818:	2133      	movs	r1, #51	; 0x33
 800781a:	f7ff bdf9 	b.w	8007410 <SDMMC_GetCmdResp1>
 800781e:	bf00      	nop
 8007820:	fffee0c0 	.word	0xfffee0c0

08007824 <SDMMC_CmdSendCID>:
  SDMMCx->ARG = Command->Argument;
 8007824:	2300      	movs	r3, #0
 8007826:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007828:	68c1      	ldr	r1, [r0, #12]
 800782a:	4b04      	ldr	r3, [pc, #16]	; (800783c <SDMMC_CmdSendCID+0x18>)
 800782c:	400b      	ands	r3, r1
 800782e:	f443 5398 	orr.w	r3, r3, #4864	; 0x1300
 8007832:	f043 0302 	orr.w	r3, r3, #2
 8007836:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007838:	f7ff bd98 	b.w	800736c <SDMMC_GetCmdResp2>
 800783c:	fffee0c0 	.word	0xfffee0c0

08007840 <SDMMC_CmdSendCSD>:
  SDMMCx->ARG = Command->Argument;
 8007840:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007842:	68c1      	ldr	r1, [r0, #12]
 8007844:	4b04      	ldr	r3, [pc, #16]	; (8007858 <SDMMC_CmdSendCSD+0x18>)
 8007846:	400b      	ands	r3, r1
 8007848:	f443 5398 	orr.w	r3, r3, #4864	; 0x1300
 800784c:	f043 0309 	orr.w	r3, r3, #9
 8007850:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007852:	f7ff bd8b 	b.w	800736c <SDMMC_GetCmdResp2>
 8007856:	bf00      	nop
 8007858:	fffee0c0 	.word	0xfffee0c0

0800785c <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800785c:	2300      	movs	r3, #0
{
 800785e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8007860:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007862:	4b28      	ldr	r3, [pc, #160]	; (8007904 <SDMMC_CmdSetRelAdd+0xa8>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007864:	68c5      	ldr	r5, [r0, #12]
 8007866:	4a28      	ldr	r2, [pc, #160]	; (8007908 <SDMMC_CmdSetRelAdd+0xac>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007868:	4c28      	ldr	r4, [pc, #160]	; (800790c <SDMMC_CmdSetRelAdd+0xb0>)
 800786a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800786c:	402a      	ands	r2, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800786e:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007872:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007876:	0a5c      	lsrs	r4, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007878:	f042 0203 	orr.w	r2, r2, #3
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800787c:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8007880:	b082      	sub	sp, #8
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007882:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007884:	fb03 f304 	mul.w	r3, r3, r4
 8007888:	e003      	b.n	8007892 <SDMMC_CmdSetRelAdd+0x36>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800788a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800788c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007890:	d107      	bne.n	80078a2 <SDMMC_CmdSetRelAdd+0x46>
    if (count-- == 0)
 8007892:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007896:	d2f8      	bcs.n	800788a <SDMMC_CmdSetRelAdd+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8007898:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800789c:	b002      	add	sp, #8
 800789e:	bc30      	pop	{r4, r5}
 80078a0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80078a4:	075c      	lsls	r4, r3, #29
 80078a6:	d505      	bpl.n	80078b4 <SDMMC_CmdSetRelAdd+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078a8:	2304      	movs	r3, #4
 80078aa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078ac:	4618      	mov	r0, r3
}
 80078ae:	b002      	add	sp, #8
 80078b0:	bc30      	pop	{r4, r5}
 80078b2:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80078b6:	f013 0301 	ands.w	r3, r3, #1
 80078ba:	d105      	bne.n	80078c8 <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 80078bc:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	2a03      	cmp	r2, #3
 80078c2:	d005      	beq.n	80078d0 <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078c4:	2001      	movs	r0, #1
 80078c6:	e7e9      	b.n	800789c <SDMMC_CmdSetRelAdd+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078c8:	2301      	movs	r3, #1
 80078ca:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078cc:	4618      	mov	r0, r3
 80078ce:	e7e5      	b.n	800789c <SDMMC_CmdSetRelAdd+0x40>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078d0:	4a0f      	ldr	r2, [pc, #60]	; (8007910 <SDMMC_CmdSetRelAdd+0xb4>)
 80078d2:	6382      	str	r2, [r0, #56]	; 0x38
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80078d4:	3014      	adds	r0, #20
  __IO uint32_t tmp = 0;
 80078d6:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80078d8:	9001      	str	r0, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80078da:	9b01      	ldr	r3, [sp, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80078de:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 80078e2:	d004      	beq.n	80078ee <SDMMC_CmdSetRelAdd+0x92>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80078e4:	045a      	lsls	r2, r3, #17
 80078e6:	d505      	bpl.n	80078f4 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80078e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80078ec:	e7d6      	b.n	800789c <SDMMC_CmdSetRelAdd+0x40>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80078ee:	0c1b      	lsrs	r3, r3, #16
 80078f0:	800b      	strh	r3, [r1, #0]
 80078f2:	e7d3      	b.n	800789c <SDMMC_CmdSetRelAdd+0x40>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80078f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80078f8:	bf14      	ite	ne
 80078fa:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80078fe:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007902:	e7cb      	b.n	800789c <SDMMC_CmdSetRelAdd+0x40>
 8007904:	20000a50 	.word	0x20000a50
 8007908:	fffee0c0 	.word	0xfffee0c0
 800790c:	10624dd3 	.word	0x10624dd3
 8007910:	002000c5 	.word	0x002000c5

08007914 <SDMMC_CmdSendStatus>:
  SDMMCx->ARG = Command->Argument;
 8007914:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007916:	68c1      	ldr	r1, [r0, #12]
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <SDMMC_CmdSendStatus+0x1c>)
 800791a:	400b      	ands	r3, r1
 800791c:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007920:	f043 030d 	orr.w	r3, r3, #13
 8007924:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007926:	f241 3288 	movw	r2, #5000	; 0x1388
 800792a:	210d      	movs	r1, #13
 800792c:	f7ff bd70 	b.w	8007410 <SDMMC_GetCmdResp1>
 8007930:	fffee0c0 	.word	0xfffee0c0

08007934 <SDMMC_CmdSwitch>:
  SDMMCx->ARG = Command->Argument;
 8007934:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007936:	68c1      	ldr	r1, [r0, #12]
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <SDMMC_CmdSwitch+0x1c>)
 800793a:	400b      	ands	r3, r1
 800793c:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007940:	f043 0306 	orr.w	r3, r3, #6
 8007944:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8007946:	f241 3288 	movw	r2, #5000	; 0x1388
 800794a:	2106      	movs	r1, #6
 800794c:	f7ff bd60 	b.w	8007410 <SDMMC_GetCmdResp1>
 8007950:	fffee0c0 	.word	0xfffee0c0

08007954 <SDMMC_CmdBusWidth>:
 8007954:	f7ff bfee 	b.w	8007934 <SDMMC_CmdSwitch>

08007958 <SDMMC_CmdVoltageSwitch>:
  SDMMCx->ARG = Command->Argument;
 8007958:	2300      	movs	r3, #0
 800795a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800795c:	68c1      	ldr	r1, [r0, #12]
 800795e:	4b06      	ldr	r3, [pc, #24]	; (8007978 <SDMMC_CmdVoltageSwitch+0x20>)
 8007960:	400b      	ands	r3, r1
 8007962:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007966:	f043 030b 	orr.w	r3, r3, #11
 800796a:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800796c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007970:	210b      	movs	r1, #11
 8007972:	f7ff bd4d 	b.w	8007410 <SDMMC_GetCmdResp1>
 8007976:	bf00      	nop
 8007978:	fffee0c0 	.word	0xfffee0c0

0800797c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800797e:	3b01      	subs	r3, #1
 8007980:	d101      	bne.n	8007986 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8007982:	2003      	movs	r0, #3
 8007984:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007986:	6902      	ldr	r2, [r0, #16]
 8007988:	2a00      	cmp	r2, #0
 800798a:	daf8      	bge.n	800797e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800798c:	6903      	ldr	r3, [r0, #16]
 800798e:	4a06      	ldr	r2, [pc, #24]	; (80079a8 <USB_CoreReset+0x2c>)
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8007996:	3a01      	subs	r2, #1
 8007998:	d0f3      	beq.n	8007982 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800799a:	6903      	ldr	r3, [r0, #16]
 800799c:	f013 0301 	ands.w	r3, r3, #1
 80079a0:	d1f9      	bne.n	8007996 <USB_CoreReset+0x1a>

  return HAL_OK;
 80079a2:	4618      	mov	r0, r3
}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	00030d41 	.word	0x00030d41

080079ac <USB_CoreInit>:
{
 80079ac:	b084      	sub	sp, #16
 80079ae:	b538      	push	{r3, r4, r5, lr}
 80079b0:	ad05      	add	r5, sp, #20
 80079b2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b8:	2b01      	cmp	r3, #1
{
 80079ba:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079bc:	d11b      	bne.n	80079f6 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80079c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80079c6:	68c3      	ldr	r3, [r0, #12]
 80079c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80079cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80079d2:	68c3      	ldr	r3, [r0, #12]
 80079d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80079d8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80079da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079dc:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80079de:	bf02      	ittt	eq
 80079e0:	68c3      	ldreq	r3, [r0, #12]
 80079e2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80079e6:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80079e8:	f7ff ffc8 	bl	800797c <USB_CoreReset>
}
 80079ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f0:	2000      	movs	r0, #0
 80079f2:	b004      	add	sp, #16
 80079f4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079f6:	68c3      	ldr	r3, [r0, #12]
 80079f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079fc:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80079fe:	f7ff ffbd 	bl	800797c <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a06:	63a3      	str	r3, [r4, #56]	; 0x38
 8007a08:	e7f0      	b.n	80079ec <USB_CoreInit+0x40>

08007a0a <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a0a:	6883      	ldr	r3, [r0, #8]
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	6083      	str	r3, [r0, #8]
}
 8007a12:	2000      	movs	r0, #0
 8007a14:	4770      	bx	lr

08007a16 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a16:	6883      	ldr	r3, [r0, #8]
 8007a18:	f023 0301 	bic.w	r3, r3, #1
 8007a1c:	6083      	str	r3, [r0, #8]
}
 8007a1e:	2000      	movs	r0, #0
 8007a20:	4770      	bx	lr

08007a22 <USB_SetCurrentMode>:
{
 8007a22:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a24:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007a26:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a2c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007a2e:	d108      	bne.n	8007a42 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a30:	68c3      	ldr	r3, [r0, #12]
 8007a32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a36:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8007a38:	2032      	movs	r0, #50	; 0x32
 8007a3a:	f7f9 faf7 	bl	800102c <HAL_Delay>
  return HAL_OK;
 8007a3e:	2000      	movs	r0, #0
 8007a40:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8007a42:	b919      	cbnz	r1, 8007a4c <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a44:	68c3      	ldr	r3, [r0, #12]
 8007a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a4a:	e7f4      	b.n	8007a36 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8007a4c:	2001      	movs	r0, #1
}
 8007a4e:	bd08      	pop	{r3, pc}

08007a50 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a50:	0189      	lsls	r1, r1, #6
 8007a52:	f041 0120 	orr.w	r1, r1, #32
 8007a56:	4a06      	ldr	r2, [pc, #24]	; (8007a70 <USB_FlushTxFifo+0x20>)
 8007a58:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8007a5a:	3a01      	subs	r2, #1
 8007a5c:	d005      	beq.n	8007a6a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a5e:	6903      	ldr	r3, [r0, #16]
 8007a60:	f013 0320 	ands.w	r3, r3, #32
 8007a64:	d1f9      	bne.n	8007a5a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8007a66:	4618      	mov	r0, r3
 8007a68:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007a6a:	2003      	movs	r0, #3
}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	00030d41 	.word	0x00030d41

08007a74 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a74:	2310      	movs	r3, #16
 8007a76:	4a06      	ldr	r2, [pc, #24]	; (8007a90 <USB_FlushRxFifo+0x1c>)
 8007a78:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8007a7a:	3a01      	subs	r2, #1
 8007a7c:	d005      	beq.n	8007a8a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a7e:	6903      	ldr	r3, [r0, #16]
 8007a80:	f013 0310 	ands.w	r3, r3, #16
 8007a84:	d1f9      	bne.n	8007a7a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8007a86:	4618      	mov	r0, r3
 8007a88:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007a8a:	2003      	movs	r0, #3
}
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	00030d41 	.word	0x00030d41

08007a94 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8007a94:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007a98:	4319      	orrs	r1, r3
 8007a9a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	4770      	bx	lr
	...

08007aa4 <USB_DevInit>:
{
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aaa:	4604      	mov	r4, r0
 8007aac:	a807      	add	r0, sp, #28
 8007aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007ab6:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8007ab8:	4619      	mov	r1, r3
 8007aba:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007abe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8007ac6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8007ac8:	d1f7      	bne.n	8007aba <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007acc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ad0:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8007ad2:	b95f      	cbnz	r7, 8007aec <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ad4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ada:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae2:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aea:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8007aec:	2500      	movs	r5, #0
 8007aee:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007af2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8007af6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007afa:	2103      	movs	r1, #3
 8007afc:	4620      	mov	r0, r4
 8007afe:	f7ff ffc9 	bl	8007a94 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b02:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007b06:	2110      	movs	r1, #16
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7ff ffa1 	bl	8007a50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f7ff ffb0 	bl	8007a74 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8007b14:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b16:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8007b18:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b1a:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8007b1c:	61f5      	str	r5, [r6, #28]
 8007b1e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b26:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b2a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b2e:	4543      	cmp	r3, r8
 8007b30:	d12f      	bne.n	8007b92 <USB_DevInit+0xee>
 8007b32:	2100      	movs	r1, #0
 8007b34:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b38:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b3a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b3e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b42:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b46:	428b      	cmp	r3, r1
 8007b48:	d134      	bne.n	8007bb4 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b4a:	6933      	ldr	r3, [r6, #16]
 8007b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b50:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b56:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8007b5a:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b5c:	69a3      	ldr	r3, [r4, #24]
 8007b5e:	f043 0310 	orr.w	r3, r3, #16
 8007b62:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b64:	69a2      	ldr	r2, [r4, #24]
 8007b66:	4b1c      	ldr	r3, [pc, #112]	; (8007bd8 <USB_DevInit+0x134>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8007b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b6e:	b11b      	cbz	r3, 8007b78 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b70:	69a3      	ldr	r3, [r4, #24]
 8007b72:	f043 0308 	orr.w	r3, r3, #8
 8007b76:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8007b78:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b7a:	bf01      	itttt	eq
 8007b7c:	69a3      	ldreq	r3, [r4, #24]
 8007b7e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007b82:	f043 0304 	orreq.w	r3, r3, #4
 8007b86:	61a3      	streq	r3, [r4, #24]
}
 8007b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	b004      	add	sp, #16
 8007b90:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b92:	f8d2 c000 	ldr.w	ip, [r2]
 8007b96:	f1bc 0f00 	cmp.w	ip, #0
 8007b9a:	da09      	bge.n	8007bb0 <USB_DevInit+0x10c>
      if (i == 0U)
 8007b9c:	b933      	cbnz	r3, 8007bac <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b9e:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ba0:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ba2:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ba4:	f8c2 e008 	str.w	lr, [r2, #8]
 8007ba8:	3220      	adds	r2, #32
 8007baa:	e7c0      	b.n	8007b2e <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007bac:	6010      	str	r0, [r2, #0]
 8007bae:	e7f7      	b.n	8007ba0 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	e7f5      	b.n	8007ba0 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bb4:	f8d2 8000 	ldr.w	r8, [r2]
 8007bb8:	f1b8 0f00 	cmp.w	r8, #0
 8007bbc:	da0a      	bge.n	8007bd4 <USB_DevInit+0x130>
      if (i == 0U)
 8007bbe:	b939      	cbnz	r1, 8007bd0 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bc0:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bc4:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bc6:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007bc8:	f8c2 c008 	str.w	ip, [r2, #8]
 8007bcc:	3220      	adds	r2, #32
 8007bce:	e7ba      	b.n	8007b46 <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bd0:	6015      	str	r5, [r2, #0]
 8007bd2:	e7f7      	b.n	8007bc4 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007bd4:	6010      	str	r0, [r2, #0]
 8007bd6:	e7f5      	b.n	8007bc4 <USB_DevInit+0x120>
 8007bd8:	803c3800 	.word	0x803c3800

08007bdc <USB_ActivateEndpoint>:
{
 8007bdc:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007bde:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007be0:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007be2:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8007be6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8007bea:	2a01      	cmp	r2, #1
 8007bec:	f004 050f 	and.w	r5, r4, #15
 8007bf0:	d11b      	bne.n	8007c2a <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007bf2:	40aa      	lsls	r2, r5
 8007bf4:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bf6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007bfa:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bfc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007c00:	041a      	lsls	r2, r3, #16
 8007c02:	d410      	bmi.n	8007c26 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c04:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c06:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c08:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c18:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007c1c:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8007c20:	4313      	orrs	r3, r2
 8007c22:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007c26:	2000      	movs	r0, #0
 8007c28:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8007c2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007c2e:	40aa      	lsls	r2, r5
 8007c30:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c32:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8007c36:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c38:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007c3c:	041b      	lsls	r3, r3, #16
 8007c3e:	d4f2      	bmi.n	8007c26 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c40:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8007c42:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c44:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c54:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007c5e:	e7e2      	b.n	8007c26 <USB_ActivateEndpoint+0x4a>

08007c60 <USB_DeactivateEndpoint>:
{
 8007c60:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8007c62:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007c64:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007c66:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8007c6a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	f004 050f 	and.w	r5, r4, #15
 8007c74:	d110      	bne.n	8007c98 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007c76:	40ab      	lsls	r3, r5
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	4019      	ands	r1, r3
 8007c7c:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007c7e:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c80:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007c84:	400b      	ands	r3, r1
 8007c86:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c88:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <USB_DeactivateEndpoint+0x5c>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007c94:	2000      	movs	r0, #0
 8007c96:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c9c:	40ab      	lsls	r3, r5
 8007c9e:	43db      	mvns	r3, r3
 8007ca0:	4019      	ands	r1, r3
 8007ca2:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007ca4:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ca6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007caa:	400b      	ands	r3, r1
 8007cac:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007cae:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007cb2:	4b03      	ldr	r3, [pc, #12]	; (8007cc0 <USB_DeactivateEndpoint+0x60>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007cba:	e7eb      	b.n	8007c94 <USB_DeactivateEndpoint+0x34>
 8007cbc:	ec337800 	.word	0xec337800
 8007cc0:	eff37800 	.word	0xeff37800

08007cc4 <USB_EP0StartXfer>:
{
 8007cc4:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007cc6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007cc8:	780a      	ldrb	r2, [r1, #0]
 8007cca:	694d      	ldr	r5, [r1, #20]
 8007ccc:	4e35      	ldr	r6, [pc, #212]	; (8007da4 <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	f04f 0320 	mov.w	r3, #32
 8007cd4:	d145      	bne.n	8007d62 <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cd6:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 8007cda:	bb45      	cbnz	r5, 8007d2e <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cdc:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007ce0:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007ce4:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007ce8:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cec:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007cf0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007cf4:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cf8:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007cfc:	4026      	ands	r6, r4
 8007cfe:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    if (ep->xfer_len > 0U)
 8007d02:	694b      	ldr	r3, [r1, #20]
 8007d04:	b14b      	cbz	r3, 8007d1a <USB_EP0StartXfer+0x56>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007d06:	780b      	ldrb	r3, [r1, #0]
 8007d08:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 8007d0c:	f003 010f 	and.w	r1, r3, #15
 8007d10:	2301      	movs	r3, #1
 8007d12:	408b      	lsls	r3, r1
 8007d14:	432b      	orrs	r3, r5
 8007d16:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d1a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8007d1e:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8007d22:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8007d26:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d32:	691c      	ldr	r4, [r3, #16]
 8007d34:	4026      	ands	r6, r4
 8007d36:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d38:	691c      	ldr	r4, [r3, #16]
 8007d3a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007d3e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007d42:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007d44:	688c      	ldr	r4, [r1, #8]
 8007d46:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8007d48:	bf88      	it	hi
 8007d4a:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d4c:	691c      	ldr	r4, [r3, #16]
 8007d4e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007d52:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d54:	694c      	ldr	r4, [r1, #20]
 8007d56:	691d      	ldr	r5, [r3, #16]
 8007d58:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007d5c:	432c      	orrs	r4, r5
 8007d5e:	611c      	str	r4, [r3, #16]
 8007d60:	e7cf      	b.n	8007d02 <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d62:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007d66:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	4032      	ands	r2, r6
 8007d6e:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d70:	691a      	ldr	r2, [r3, #16]
 8007d72:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007d76:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007d7a:	611a      	str	r2, [r3, #16]
 8007d7c:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8007d7e:	b105      	cbz	r5, 8007d82 <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8007d80:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d82:	6919      	ldr	r1, [r3, #16]
 8007d84:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8007d88:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007d8a:	6919      	ldr	r1, [r3, #16]
 8007d8c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007d90:	430a      	orrs	r2, r1
 8007d92:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d94:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d9c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007da0:	e7c3      	b.n	8007d2a <USB_EP0StartXfer+0x66>
 8007da2:	bf00      	nop
 8007da4:	fff80000 	.word	0xfff80000

08007da8 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8007da8:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007daa:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007db6:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8007db8:	4299      	cmp	r1, r3
 8007dba:	d101      	bne.n	8007dc0 <USB_WritePacket+0x18>
}
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007dc0:	f851 0b04 	ldr.w	r0, [r1], #4
 8007dc4:	6010      	str	r0, [r2, #0]
 8007dc6:	e7f7      	b.n	8007db8 <USB_WritePacket+0x10>

08007dc8 <USB_EPStartXfer>:
{
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8007dca:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007dcc:	780d      	ldrb	r5, [r1, #0]
 8007dce:	4e5f      	ldr	r6, [pc, #380]	; (8007f4c <USB_EPStartXfer+0x184>)
  if (ep->is_in == 1U)
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	f04f 0220 	mov.w	r2, #32
 8007dd6:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dd8:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8007ddc:	d169      	bne.n	8007eb2 <USB_EPStartXfer+0xea>
    if (ep->xfer_len == 0U)
 8007dde:	bb83      	cbnz	r3, 8007e42 <USB_EPStartXfer+0x7a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007de0:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8007de4:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8007de8:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007dec:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007df0:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007df2:	6922      	ldr	r2, [r4, #16]
 8007df4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007df8:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dfa:	6922      	ldr	r2, [r4, #16]
 8007dfc:	4016      	ands	r6, r2
 8007dfe:	6126      	str	r6, [r4, #16]
    if (ep->type != EP_TYPE_ISOC)
 8007e00:	78ce      	ldrb	r6, [r1, #3]
 8007e02:	2e01      	cmp	r6, #1
 8007e04:	f000 8094 	beq.w	8007f30 <USB_EPStartXfer+0x168>
      if (ep->xfer_len > 0U)
 8007e08:	b153      	cbz	r3, 8007e20 <USB_EPStartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007e0a:	780a      	ldrb	r2, [r1, #0]
 8007e0c:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8007e10:	f002 040f 	and.w	r4, r2, #15
 8007e14:	2201      	movs	r2, #1
 8007e16:	40a2      	lsls	r2, r4
 8007e18:	ea42 020e 	orr.w	r2, r2, lr
 8007e1c:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e20:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 8007e24:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e26:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007e2a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007e2e:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8007e32:	d104      	bne.n	8007e3e <USB_EPStartXfer+0x76>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007e34:	780a      	ldrb	r2, [r1, #0]
 8007e36:	68c9      	ldr	r1, [r1, #12]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	f7ff ffb5 	bl	8007da8 <USB_WritePacket>
}
 8007e3e:	2000      	movs	r0, #0
 8007e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e42:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007e46:	4034      	ands	r4, r6
 8007e48:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e4c:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e50:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e52:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007e56:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007e5a:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e5e:	199c      	adds	r4, r3, r6
 8007e60:	3c01      	subs	r4, #1
 8007e62:	fbb4 f6f6 	udiv	r6, r4, r6
 8007e66:	4c3a      	ldr	r4, [pc, #232]	; (8007f50 <USB_EPStartXfer+0x188>)
 8007e68:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8007e6c:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 8007e70:	433c      	orrs	r4, r7
 8007e72:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e76:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8007e7a:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8007e7e:	4334      	orrs	r4, r6
 8007e80:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8007e84:	78cc      	ldrb	r4, [r1, #3]
 8007e86:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8007e8c:	d1b8      	bne.n	8007e00 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007e8e:	6914      	ldr	r4, [r2, #16]
 8007e90:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8007e94:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007e96:	6914      	ldr	r4, [r2, #16]
 8007e98:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8007e9c:	6114      	str	r4, [r2, #16]
 8007e9e:	e7af      	b.n	8007e00 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ea0:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007ea4:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007ea8:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007eac:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
 8007eb0:	e7b6      	b.n	8007e20 <USB_EPStartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007eb2:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8007eb6:	692c      	ldr	r4, [r5, #16]
 8007eb8:	4034      	ands	r4, r6
 8007eba:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ebc:	692c      	ldr	r4, [r5, #16]
 8007ebe:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007ec2:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007ec6:	612c      	str	r4, [r5, #16]
 8007ec8:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8007eca:	b9fb      	cbnz	r3, 8007f0c <USB_EPStartXfer+0x144>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ecc:	692b      	ldr	r3, [r5, #16]
 8007ece:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007ed2:	431c      	orrs	r4, r3
 8007ed4:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ed6:	692b      	ldr	r3, [r5, #16]
 8007ed8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007edc:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8007ede:	78cb      	ldrb	r3, [r1, #3]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d10c      	bne.n	8007efe <USB_EPStartXfer+0x136>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ee4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007ee8:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007eec:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007ef0:	bf0c      	ite	eq
 8007ef2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ef6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8007efa:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007efe:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007f02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f06:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  return HAL_OK;
 8007f0a:	e798      	b.n	8007e3e <USB_EPStartXfer+0x76>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f0c:	4e10      	ldr	r6, [pc, #64]	; (8007f50 <USB_EPStartXfer+0x188>)
 8007f0e:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f10:	4423      	add	r3, r4
 8007f12:	3b01      	subs	r3, #1
 8007f14:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f18:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8007f1c:	433e      	orrs	r6, r7
 8007f1e:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	692e      	ldr	r6, [r5, #16]
 8007f24:	435c      	muls	r4, r3
 8007f26:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007f2a:	4334      	orrs	r4, r6
 8007f2c:	612c      	str	r4, [r5, #16]
 8007f2e:	e7d6      	b.n	8007ede <USB_EPStartXfer+0x116>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f30:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007f34:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007f38:	f04f 0220 	mov.w	r2, #32
 8007f3c:	d0b0      	beq.n	8007ea0 <USB_EPStartXfer+0xd8>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f3e:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007f42:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007f46:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007f4a:	e7af      	b.n	8007eac <USB_EPStartXfer+0xe4>
 8007f4c:	fff80000 	.word	0xfff80000
 8007f50:	1ff80000 	.word	0x1ff80000

08007f54 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007f54:	3203      	adds	r2, #3
 8007f56:	f022 0203 	bic.w	r2, r2, #3
 8007f5a:	440a      	add	r2, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007f5c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8007f60:	4291      	cmp	r1, r2
 8007f62:	d101      	bne.n	8007f68 <USB_ReadPacket+0x14>
}
 8007f64:	4608      	mov	r0, r1
 8007f66:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007f68:	6803      	ldr	r3, [r0, #0]
 8007f6a:	f841 3b04 	str.w	r3, [r1], #4
 8007f6e:	e7f7      	b.n	8007f60 <USB_ReadPacket+0xc>

08007f70 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8007f70:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007f72:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f7a:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007f7e:	d112      	bne.n	8007fa6 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f80:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	db06      	blt.n	8007f96 <USB_EPSetStall+0x26>
 8007f88:	b12a      	cbz	r2, 8007f96 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f8a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007f8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f92:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f96:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f9e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fa6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	db06      	blt.n	8007fbc <USB_EPSetStall+0x4c>
 8007fae:	b12a      	cbz	r2, 8007fbc <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007fb0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007fb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fb8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007fbc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007fc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fc4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007fc8:	e7eb      	b.n	8007fa2 <USB_EPSetStall+0x32>

08007fca <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8007fca:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007fcc:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007fd4:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007fd8:	d111      	bne.n	8007ffe <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007fda:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007fde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fe2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007fe6:	78cb      	ldrb	r3, [r1, #3]
 8007fe8:	3b02      	subs	r3, #2
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d805      	bhi.n	8007ffa <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007fee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ffe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8008002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008006:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800800a:	78cb      	ldrb	r3, [r1, #3]
 800800c:	3b02      	subs	r3, #2
 800800e:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008010:	bf9e      	ittt	ls
 8008012:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8008016:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 800801a:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 800801e:	e7ec      	b.n	8007ffa <USB_EPClearStall+0x30>

08008020 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008020:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8008024:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008028:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800802c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8008030:	0109      	lsls	r1, r1, #4
 8008032:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8008036:	4319      	orrs	r1, r3
 8008038:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800803c:	2000      	movs	r0, #0
 800803e:	4770      	bx	lr

08008040 <USB_DevConnect>:
{
 8008040:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008042:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8008046:	f023 0302 	bic.w	r3, r3, #2
 800804a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800804e:	2003      	movs	r0, #3
 8008050:	f7f8 ffec 	bl	800102c <HAL_Delay>
}
 8008054:	2000      	movs	r0, #0
 8008056:	bd08      	pop	{r3, pc}

08008058 <USB_DevDisconnect>:
{
 8008058:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800805a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800805e:	f043 0302 	orr.w	r3, r3, #2
 8008062:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8008066:	2003      	movs	r0, #3
 8008068:	f7f8 ffe0 	bl	800102c <HAL_Delay>
}
 800806c:	2000      	movs	r0, #0
 800806e:	bd08      	pop	{r3, pc}

08008070 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8008070:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8008072:	6980      	ldr	r0, [r0, #24]
}
 8008074:	4010      	ands	r0, r2
 8008076:	4770      	bx	lr

08008078 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008078:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800807c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008080:	69c0      	ldr	r0, [r0, #28]
 8008082:	4018      	ands	r0, r3
}
 8008084:	0c00      	lsrs	r0, r0, #16
 8008086:	4770      	bx	lr

08008088 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008088:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800808c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008090:	69c0      	ldr	r0, [r0, #28]
 8008092:	4018      	ands	r0, r3
}
 8008094:	b280      	uxth	r0, r0
 8008096:	4770      	bx	lr

08008098 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008098:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800809c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80080a0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80080a4:	6940      	ldr	r0, [r0, #20]
}
 80080a6:	4010      	ands	r0, r2
 80080a8:	4770      	bx	lr

080080aa <USB_ReadDevInEPInterrupt>:
{
 80080aa:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 80080ac:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80080b0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80080b4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 80080b8:	f001 010f 	and.w	r1, r1, #15
 80080bc:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80080be:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 80080c2:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80080c4:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	4323      	orrs	r3, r4
}
 80080ca:	4018      	ands	r0, r3
 80080cc:	bd10      	pop	{r4, pc}

080080ce <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80080ce:	6940      	ldr	r0, [r0, #20]
}
 80080d0:	f000 0001 	and.w	r0, r0, #1
 80080d4:	4770      	bx	lr

080080d6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80080d6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80080da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080de:	f023 0307 	bic.w	r3, r3, #7
 80080e2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80080e6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	f002 0206 	and.w	r2, r2, #6
 80080f0:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80080f2:	bf02      	ittt	eq
 80080f4:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80080f8:	f042 0203 	orreq.w	r2, r2, #3
 80080fc:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008106:	605a      	str	r2, [r3, #4]
}
 8008108:	2000      	movs	r0, #0
 800810a:	4770      	bx	lr

0800810c <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800810c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008110:	2000      	movs	r0, #0
 8008112:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800811a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800811c:	691a      	ldr	r2, [r3, #16]
 800811e:	f042 0218 	orr.w	r2, r2, #24
 8008122:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008124:	691a      	ldr	r2, [r3, #16]
 8008126:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800812a:	611a      	str	r2, [r3, #16]
}
 800812c:	4770      	bx	lr
	...

08008130 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8008130:	2329      	movs	r3, #41	; 0x29
 8008132:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8008134:	4800      	ldr	r0, [pc, #0]	; (8008138 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8008136:	4770      	bx	lr
 8008138:	2000005c 	.word	0x2000005c

0800813c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 800813c:	2329      	movs	r3, #41	; 0x29
 800813e:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8008140:	4800      	ldr	r0, [pc, #0]	; (8008144 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8008142:	4770      	bx	lr
 8008144:	20000088 	.word	0x20000088

08008148 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008148:	2329      	movs	r3, #41	; 0x29
 800814a:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 800814c:	4800      	ldr	r0, [pc, #0]	; (8008150 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 800814e:	4770      	bx	lr
 8008150:	200000cc 	.word	0x200000cc

08008154 <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008154:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8008158:	2000      	movs	r0, #0
 800815a:	7718      	strb	r0, [r3, #28]

  return USBD_OK;
}
 800815c:	4770      	bx	lr

0800815e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800815e:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008160:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if (hhid->IsReportAvailable == 1U)
 8008164:	69a3      	ldr	r3, [r4, #24]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d107      	bne.n	800817a <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800816a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800816e:	7861      	ldrb	r1, [r4, #1]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	7820      	ldrb	r0, [r4, #0]
 8008174:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	61a3      	str	r3, [r4, #24]
  }

  return USBD_OK;
}
 800817a:	2000      	movs	r0, #0
 800817c:	bd10      	pop	{r4, pc}
	...

08008180 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008180:	230a      	movs	r3, #10
 8008182:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8008184:	4800      	ldr	r0, [pc, #0]	; (8008188 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8008186:	4770      	bx	lr
 8008188:	200000c0 	.word	0x200000c0

0800818c <USBD_CUSTOM_HID_DataOut>:
{
 800818c:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800818e:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008192:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8008196:	7869      	ldrb	r1, [r5, #1]
 8008198:	68db      	ldr	r3, [r3, #12]
{
 800819a:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800819c:	7828      	ldrb	r0, [r5, #0]
 800819e:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 80081a0:	230c      	movs	r3, #12
 80081a2:	462a      	mov	r2, r5
 80081a4:	2101      	movs	r1, #1
 80081a6:	4620      	mov	r0, r4
 80081a8:	f01a f990 	bl	80224cc <USBD_LL_PrepareReceive>
}
 80081ac:	2000      	movs	r0, #0
 80081ae:	bd38      	pop	{r3, r4, r5, pc}

080081b0 <USBD_CUSTOM_HID_Setup>:
{
 80081b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 80081b2:	2500      	movs	r5, #0
 80081b4:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081b8:	780d      	ldrb	r5, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80081ba:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081be:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 80081c2:	4603      	mov	r3, r0
 80081c4:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c6:	d028      	beq.n	800821a <USBD_CUSTOM_HID_Setup+0x6a>
 80081c8:	2d20      	cmp	r5, #32
 80081ca:	d161      	bne.n	8008290 <USBD_CUSTOM_HID_Setup+0xe0>
    switch (req->bRequest)
 80081cc:	7849      	ldrb	r1, [r1, #1]
 80081ce:	3902      	subs	r1, #2
 80081d0:	2909      	cmp	r1, #9
 80081d2:	d85b      	bhi.n	800828c <USBD_CUSTOM_HID_Setup+0xdc>
 80081d4:	e8df f001 	tbb	[pc, r1]
 80081d8:	5a5a0a15 	.word	0x5a5a0a15
 80081dc:	195a5a5a 	.word	0x195a5a5a
 80081e0:	0511      	.short	0x0511
      hhid->Protocol = (uint8_t)(req->wValue);
 80081e2:	7893      	ldrb	r3, [r2, #2]
 80081e4:	60e3      	str	r3, [r4, #12]
  uint8_t ret = USBD_OK;
 80081e6:	2000      	movs	r0, #0
}
 80081e8:	b003      	add	sp, #12
 80081ea:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80081ec:	2201      	movs	r2, #1
 80081ee:	f104 010c 	add.w	r1, r4, #12
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fca8 	bl	8008b48 <USBD_CtlSendData>
 80081f8:	e7f5      	b.n	80081e6 <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80081fa:	8853      	ldrh	r3, [r2, #2]
 80081fc:	0a1b      	lsrs	r3, r3, #8
 80081fe:	6123      	str	r3, [r4, #16]
 8008200:	e7f1      	b.n	80081e6 <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008202:	2201      	movs	r2, #1
 8008204:	f104 0110 	add.w	r1, r4, #16
 8008208:	e7f3      	b.n	80081f2 <USBD_CUSTOM_HID_Setup+0x42>
      hhid->IsReportAvailable = 1U;
 800820a:	2101      	movs	r1, #1
 800820c:	61a1      	str	r1, [r4, #24]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 800820e:	88d2      	ldrh	r2, [r2, #6]
 8008210:	4621      	mov	r1, r4
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fcad 	bl	8008b72 <USBD_CtlPrepareRx>
 8008218:	e7e5      	b.n	80081e6 <USBD_CUSTOM_HID_Setup+0x36>
    switch (req->bRequest)
 800821a:	7849      	ldrb	r1, [r1, #1]
 800821c:	290b      	cmp	r1, #11
 800821e:	d835      	bhi.n	800828c <USBD_CUSTOM_HID_Setup+0xdc>
 8008220:	e8df f001 	tbb	[pc, r1]
 8008224:	34343406 	.word	0x34343406
 8008228:	340e3434 	.word	0x340e3434
 800822c:	2d253434 	.word	0x2d253434
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008230:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8008234:	2903      	cmp	r1, #3
 8008236:	d129      	bne.n	800828c <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008238:	2202      	movs	r2, #2
 800823a:	f10d 0106 	add.w	r1, sp, #6
 800823e:	e7d8      	b.n	80081f2 <USBD_CUSTOM_HID_Setup+0x42>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008240:	8851      	ldrh	r1, [r2, #2]
 8008242:	0a09      	lsrs	r1, r1, #8
 8008244:	2922      	cmp	r1, #34	; 0x22
 8008246:	d107      	bne.n	8008258 <USBD_CUSTOM_HID_Setup+0xa8>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008248:	88d2      	ldrh	r2, [r2, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800824a:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 800824e:	2a21      	cmp	r2, #33	; 0x21
 8008250:	bf28      	it	cs
 8008252:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008254:	6809      	ldr	r1, [r1, #0]
 8008256:	e7cc      	b.n	80081f2 <USBD_CUSTOM_HID_Setup+0x42>
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008258:	2921      	cmp	r1, #33	; 0x21
 800825a:	d105      	bne.n	8008268 <USBD_CUSTOM_HID_Setup+0xb8>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 800825c:	88d2      	ldrh	r2, [r2, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 800825e:	490e      	ldr	r1, [pc, #56]	; (8008298 <USBD_CUSTOM_HID_Setup+0xe8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8008260:	2a09      	cmp	r2, #9
 8008262:	bf28      	it	cs
 8008264:	2209      	movcs	r2, #9
 8008266:	e7c4      	b.n	80081f2 <USBD_CUSTOM_HID_Setup+0x42>
  uint8_t  *pbuf = NULL;
 8008268:	2100      	movs	r1, #0
  uint16_t len = 0U;
 800826a:	460a      	mov	r2, r1
 800826c:	e7c1      	b.n	80081f2 <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800826e:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8008272:	2903      	cmp	r1, #3
 8008274:	d10a      	bne.n	800828c <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008276:	2201      	movs	r2, #1
 8008278:	f104 0114 	add.w	r1, r4, #20
 800827c:	e7b9      	b.n	80081f2 <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827e:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8008282:	2903      	cmp	r1, #3
 8008284:	d102      	bne.n	800828c <USBD_CUSTOM_HID_Setup+0xdc>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8008286:	7893      	ldrb	r3, [r2, #2]
 8008288:	6163      	str	r3, [r4, #20]
 800828a:	e7ac      	b.n	80081e6 <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8008290:	f000 fc2a 	bl	8008ae8 <USBD_CtlError>
    ret = USBD_FAIL;
 8008294:	2002      	movs	r0, #2
    break;
 8008296:	e7a7      	b.n	80081e8 <USBD_CUSTOM_HID_Setup+0x38>
 8008298:	200000b4 	.word	0x200000b4

0800829c <USBD_CUSTOM_HID_DeInit>:
{
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80082a0:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80082a2:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80082a4:	f01a f8b8 	bl	8022418 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80082a8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80082aa:	2101      	movs	r1, #1
 80082ac:	4620      	mov	r0, r4
 80082ae:	f01a f8b3 	bl	8022418 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80082b2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80082b6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if(pdev->pClassData != NULL)
 80082ba:	b14b      	cbz	r3, 80082d0 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80082bc:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80082c4:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 80082c8:	f01a f944 	bl	8022554 <USBD_static_free>
    pdev->pClassData = NULL;
 80082cc:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 80082d0:	2000      	movs	r0, #0
 80082d2:	bd38      	pop	{r3, r4, r5, pc}

080082d4 <USBD_CUSTOM_HID_Init>:
{
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	4605      	mov	r5, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80082d8:	2401      	movs	r4, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80082da:	2340      	movs	r3, #64	; 0x40
 80082dc:	2203      	movs	r2, #3
 80082de:	2181      	movs	r1, #129	; 0x81
 80082e0:	f01a f88a 	bl	80223f8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80082e4:	230c      	movs	r3, #12
 80082e6:	2203      	movs	r2, #3
 80082e8:	4621      	mov	r1, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80082ea:	62ec      	str	r4, [r5, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80082ec:	4628      	mov	r0, r5
 80082ee:	f01a f883 	bl	80223f8 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80082f2:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80082f6:	2020      	movs	r0, #32
 80082f8:	f01a f928 	bl	802254c <USBD_static_malloc>
 80082fc:	4606      	mov	r6, r0
 80082fe:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8008302:	b168      	cbz	r0, 8008320 <USBD_CUSTOM_HID_Init+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008304:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    hhid->state = CUSTOM_HID_IDLE;
 8008308:	2700      	movs	r7, #0
 800830a:	7707      	strb	r7, [r0, #28]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008310:	230c      	movs	r3, #12
 8008312:	4632      	mov	r2, r6
 8008314:	4621      	mov	r1, r4
 8008316:	4628      	mov	r0, r5
 8008318:	f01a f8d8 	bl	80224cc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800831c:	4638      	mov	r0, r7
 800831e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 8008320:	4620      	mov	r0, r4
}
 8008322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008324 <USBD_CUSTOM_HID_SendReport>:
{
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8008328:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800832c:	2a03      	cmp	r2, #3
 800832e:	d109      	bne.n	8008344 <USBD_CUSTOM_HID_SendReport+0x20>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008330:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    if(hhid->state == CUSTOM_HID_IDLE)
 8008334:	7f35      	ldrb	r5, [r6, #28]
 8008336:	2401      	movs	r4, #1
 8008338:	b935      	cbnz	r5, 8008348 <USBD_CUSTOM_HID_SendReport+0x24>
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800833a:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 800833c:	7734      	strb	r4, [r6, #28]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800833e:	2181      	movs	r1, #129	; 0x81
 8008340:	f01a f8b6 	bl	80224b0 <USBD_LL_Transmit>
  return USBD_OK;
 8008344:	2000      	movs	r0, #0
 8008346:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 8008348:	4620      	mov	r0, r4
}
 800834a:	bd70      	pop	{r4, r5, r6, pc}

0800834c <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800834c:	b119      	cbz	r1, 8008356 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800834e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8008352:	2000      	movs	r0, #0
 8008354:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008356:	2002      	movs	r0, #2
  }

  return ret;
}
 8008358:	4770      	bx	lr

0800835a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800835a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800835c:	b180      	cbz	r0, 8008380 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800835e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008362:	b113      	cbz	r3, 800836a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008364:	2300      	movs	r3, #0
 8008366:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800836a:	b109      	cbz	r1, 8008370 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800836c:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008370:	2301      	movs	r3, #1
 8008372:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8008376:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008378:	f019 fffc 	bl	8022374 <USBD_LL_Init>

  return USBD_OK;
 800837c:	2000      	movs	r0, #0
 800837e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008380:	2002      	movs	r0, #2
}
 8008382:	bd08      	pop	{r3, pc}

08008384 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8008384:	b119      	cbz	r1, 800838e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008386:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800838a:	2000      	movs	r0, #0
 800838c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800838e:	2002      	movs	r0, #2
  }

  return status;
}
 8008390:	4770      	bx	lr

08008392 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008392:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008394:	f01a f822 	bl	80223dc <USBD_LL_Start>

  return USBD_OK;
}
 8008398:	2000      	movs	r0, #0
 800839a:	bd08      	pop	{r3, pc}

0800839c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800839c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800839e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80083a2:	b90b      	cbnz	r3, 80083a8 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80083a4:	2002      	movs	r0, #2
 80083a6:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4798      	blx	r3
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d1f9      	bne.n	80083a4 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80083b0:	bd08      	pop	{r3, pc}

080083b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083b2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80083b4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	4798      	blx	r3
  return USBD_OK;
}
 80083bc:	2000      	movs	r0, #0
 80083be:	bd08      	pop	{r3, pc}

080083c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083c4:	f500 7520 	add.w	r5, r0, #640	; 0x280
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 fb79 	bl	8008ac0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083ce:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80083d0:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 80083d4:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 80083d8:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80083dc:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 80083e0:	f001 031f 	and.w	r3, r1, #31
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d00e      	beq.n	8008406 <USBD_LL_SetupStage+0x46>
 80083e8:	d307      	bcc.n	80083fa <USBD_LL_SetupStage+0x3a>
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d010      	beq.n	8008410 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083ee:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80083f2:	4620      	mov	r0, r4
 80083f4:	f01a f81e 	bl	8022434 <USBD_LL_StallEP>
    break;
 80083f8:	e003      	b.n	8008402 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80083fa:	4629      	mov	r1, r5
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 f8f7 	bl	80085f0 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8008402:	2000      	movs	r0, #0
 8008404:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8008406:	4629      	mov	r1, r5
 8008408:	4620      	mov	r0, r4
 800840a:	f000 fa7d 	bl	8008908 <USBD_StdItfReq>
    break;
 800840e:	e7f8      	b.n	8008402 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8008410:	4629      	mov	r1, r5
 8008412:	4620      	mov	r0, r4
 8008414:	f000 faae 	bl	8008974 <USBD_StdEPReq>
    break;
 8008418:	e7f3      	b.n	8008402 <USBD_LL_SetupStage+0x42>

0800841a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800841a:	b570      	push	{r4, r5, r6, lr}
 800841c:	4605      	mov	r5, r0
 800841e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008420:	bb39      	cbnz	r1, 8008472 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008422:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8008426:	2b03      	cmp	r3, #3
 8008428:	d11e      	bne.n	8008468 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 800842a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800842e:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8008432:	4293      	cmp	r3, r2
 8008434:	d90b      	bls.n	800844e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8008436:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8008438:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800843a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800843e:	bf8c      	ite	hi
 8008440:	b29a      	uxthhi	r2, r3
 8008442:	b292      	uxthls	r2, r2
 8008444:	4631      	mov	r1, r6
 8008446:	f000 fba3 	bl	8008b90 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800844a:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 800844c:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800844e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	b123      	cbz	r3, 8008460 <USBD_LL_DataOutStage+0x46>
 8008456:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800845a:	2a03      	cmp	r2, #3
 800845c:	d100      	bne.n	8008460 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800845e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008460:	4628      	mov	r0, r5
 8008462:	f000 fb9d 	bl	8008ba0 <USBD_CtlSendStatus>
 8008466:	e7f0      	b.n	800844a <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008468:	2b05      	cmp	r3, #5
 800846a:	d1ee      	bne.n	800844a <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 800846c:	f019 ffe2 	bl	8022434 <USBD_LL_StallEP>
 8008470:	e7eb      	b.n	800844a <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8008472:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	b12b      	cbz	r3, 8008486 <USBD_LL_DataOutStage+0x6c>
 800847a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800847e:	2a03      	cmp	r2, #3
 8008480:	d101      	bne.n	8008486 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8008482:	4798      	blx	r3
 8008484:	e7e1      	b.n	800844a <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8008486:	2002      	movs	r0, #2
}
 8008488:	bd70      	pop	{r4, r5, r6, pc}

0800848a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	4613      	mov	r3, r2
 800848e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008490:	460e      	mov	r6, r1
 8008492:	2900      	cmp	r1, #0
 8008494:	d148      	bne.n	8008528 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008496:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800849a:	2a02      	cmp	r2, #2
 800849c:	d13d      	bne.n	800851a <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800849e:	6a05      	ldr	r5, [r0, #32]
 80084a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80084a2:	4295      	cmp	r5, r2
 80084a4:	d914      	bls.n	80084d0 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80084a6:	1aaa      	subs	r2, r5, r2
 80084a8:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80084aa:	4619      	mov	r1, r3
 80084ac:	b292      	uxth	r2, r2
 80084ae:	f000 fb58 	bl	8008b62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80084b2:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80084b4:	461a      	mov	r2, r3
 80084b6:	4619      	mov	r1, r3
 80084b8:	4620      	mov	r0, r4
 80084ba:	f01a f807 	bl	80224cc <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80084be:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	f04f 0000 	mov.w	r0, #0
 80084c8:	d13a      	bne.n	8008540 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80084ca:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 80084d0:	69c3      	ldr	r3, [r0, #28]
 80084d2:	fbb3 f5f2 	udiv	r5, r3, r2
 80084d6:	fb02 3515 	mls	r5, r2, r5, r3
 80084da:	b965      	cbnz	r5, 80084f6 <USBD_LL_DataInStage+0x6c>
 80084dc:	429a      	cmp	r2, r3
 80084de:	d80a      	bhi.n	80084f6 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80084e0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d206      	bcs.n	80084f6 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084e8:	462a      	mov	r2, r5
 80084ea:	f000 fb3a 	bl	8008b62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084ee:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80084f2:	462b      	mov	r3, r5
 80084f4:	e7de      	b.n	80084b4 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80084f6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	b12b      	cbz	r3, 800850a <USBD_LL_DataInStage+0x80>
 80084fe:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8008502:	2a03      	cmp	r2, #3
 8008504:	d101      	bne.n	800850a <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8008506:	4620      	mov	r0, r4
 8008508:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800850a:	2180      	movs	r1, #128	; 0x80
 800850c:	4620      	mov	r0, r4
 800850e:	f019 ff91 	bl	8022434 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fb4f 	bl	8008bb6 <USBD_CtlReceiveStatus>
 8008518:	e7d1      	b.n	80084be <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800851a:	f032 0304 	bics.w	r3, r2, #4
 800851e:	d1ce      	bne.n	80084be <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8008520:	2180      	movs	r1, #128	; 0x80
 8008522:	f019 ff87 	bl	8022434 <USBD_LL_StallEP>
 8008526:	e7ca      	b.n	80084be <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008528:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	b133      	cbz	r3, 800853e <USBD_LL_DataInStage+0xb4>
 8008530:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008534:	2a03      	cmp	r2, #3
 8008536:	d102      	bne.n	800853e <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008538:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800853a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800853c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800853e:	2002      	movs	r0, #2
}
 8008540:	bd70      	pop	{r4, r5, r6, pc}

08008542 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008542:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008544:	2200      	movs	r2, #0
{
 8008546:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008548:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800854a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800854c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800854e:	2340      	movs	r3, #64	; 0x40
 8008550:	f019 ff52 	bl	80223f8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008554:	4633      	mov	r3, r6
 8008556:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008558:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800855c:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008560:	2200      	movs	r2, #0
 8008562:	4620      	mov	r0, r4
 8008564:	f019 ff48 	bl	80223f8 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008568:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800856c:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800856e:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008570:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008572:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008576:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800857a:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800857c:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8008580:	b123      	cbz	r3, 800858c <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008582:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008586:	4620      	mov	r0, r4
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800858c:	2000      	movs	r0, #0
 800858e:	bd70      	pop	{r4, r5, r6, pc}

08008590 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008590:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8008592:	2000      	movs	r0, #0
 8008594:	4770      	bx	lr

08008596 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008596:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800859a:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800859e:	2304      	movs	r3, #4
 80085a0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80085a4:	2000      	movs	r0, #0
 80085a6:	4770      	bx	lr

080085a8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 80085a8:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80085ac:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80085b0:	2000      	movs	r0, #0
 80085b2:	4770      	bx	lr

080085b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80085b4:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b6:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80085ba:	2a03      	cmp	r2, #3
 80085bc:	d104      	bne.n	80085c8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80085be:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	b103      	cbz	r3, 80085c8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80085c6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80085c8:	2000      	movs	r0, #0
 80085ca:	bd08      	pop	{r3, pc}

080085cc <USBD_LL_IsoINIncomplete>:
 80085cc:	2000      	movs	r0, #0
 80085ce:	4770      	bx	lr

080085d0 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80085d0:	2000      	movs	r0, #0
 80085d2:	4770      	bx	lr

080085d4 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80085d4:	2000      	movs	r0, #0
 80085d6:	4770      	bx	lr

080085d8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80085d8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085da:	2201      	movs	r2, #1
 80085dc:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085e0:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 80085e4:	7901      	ldrb	r1, [r0, #4]
 80085e6:	6852      	ldr	r2, [r2, #4]
 80085e8:	4790      	blx	r2

  return USBD_OK;
}
 80085ea:	2000      	movs	r0, #0
 80085ec:	bd08      	pop	{r3, pc}
	...

080085f0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80085f0:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085f2:	780b      	ldrb	r3, [r1, #0]
 80085f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f8:	2b20      	cmp	r3, #32
{
 80085fa:	b083      	sub	sp, #12
 80085fc:	460c      	mov	r4, r1
 80085fe:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008600:	d016      	beq.n	8008630 <USBD_StdDevReq+0x40>
 8008602:	2b40      	cmp	r3, #64	; 0x40
 8008604:	d014      	beq.n	8008630 <USBD_StdDevReq+0x40>
 8008606:	b14b      	cbz	r3, 800861c <USBD_StdDevReq+0x2c>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8008608:	2180      	movs	r1, #128	; 0x80
 800860a:	f019 ff13 	bl	8022434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800860e:	4628      	mov	r0, r5
 8008610:	2100      	movs	r1, #0
 8008612:	f019 ff0f 	bl	8022434 <USBD_LL_StallEP>
}
 8008616:	2000      	movs	r0, #0
 8008618:	b003      	add	sp, #12
 800861a:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800861c:	784b      	ldrb	r3, [r1, #1]
 800861e:	2b09      	cmp	r3, #9
 8008620:	d819      	bhi.n	8008656 <USBD_StdDevReq+0x66>
 8008622:	e8df f003 	tbb	[pc, r3]
 8008626:	5a43      	.short	0x5a43
 8008628:	6a186618 	.word	0x6a186618
 800862c:	23ad1886 	.word	0x23ad1886
    pdev->pClass->Setup(pdev, req);
 8008630:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 8008634:	4621      	mov	r1, r4
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	4628      	mov	r0, r5
 800863a:	4798      	blx	r3
}
 800863c:	2000      	movs	r0, #0
 800863e:	b003      	add	sp, #12
 8008640:	bd30      	pop	{r4, r5, pc}
      if (cfgidx)
 8008642:	b379      	cbz	r1, 80086a4 <USBD_StdDevReq+0xb4>
        pdev->dev_config = cfgidx;
 8008644:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008646:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8008648:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800864a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800864e:	f7ff fea5 	bl	800839c <USBD_SetClassConfig>
 8008652:	2802      	cmp	r0, #2
 8008654:	d126      	bne.n	80086a4 <USBD_StdDevReq+0xb4>
  USBD_LL_StallEP(pdev , 0x80U);
 8008656:	2180      	movs	r1, #128	; 0x80
 8008658:	4628      	mov	r0, r5
 800865a:	f019 feeb 	bl	8022434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800865e:	4628      	mov	r0, r5
 8008660:	2100      	movs	r1, #0
 8008662:	f019 fee7 	bl	8022434 <USBD_LL_StallEP>
}
 8008666:	2000      	movs	r0, #0
 8008668:	b003      	add	sp, #12
 800866a:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 800866c:	7889      	ldrb	r1, [r1, #2]
 800866e:	4ca5      	ldr	r4, [pc, #660]	; (8008904 <USBD_StdDevReq+0x314>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008670:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008672:	7021      	strb	r1, [r4, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008674:	d8ef      	bhi.n	8008656 <USBD_StdDevReq+0x66>
    switch (pdev->dev_state)
 8008676:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800867a:	2b02      	cmp	r3, #2
 800867c:	d0e1      	beq.n	8008642 <USBD_StdDevReq+0x52>
 800867e:	2b03      	cmp	r3, #3
 8008680:	f040 8119 	bne.w	80088b6 <USBD_StdDevReq+0x2c6>
      if (cfgidx == 0U)
 8008684:	2900      	cmp	r1, #0
 8008686:	f000 812f 	beq.w	80088e8 <USBD_StdDevReq+0x2f8>
      else if (cfgidx != pdev->dev_config)
 800868a:	6841      	ldr	r1, [r0, #4]
 800868c:	2901      	cmp	r1, #1
 800868e:	d009      	beq.n	80086a4 <USBD_StdDevReq+0xb4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008690:	b2c9      	uxtb	r1, r1
 8008692:	f7ff fe8e 	bl	80083b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008696:	7821      	ldrb	r1, [r4, #0]
 8008698:	6069      	str	r1, [r5, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800869a:	4628      	mov	r0, r5
 800869c:	f7ff fe7e 	bl	800839c <USBD_SetClassConfig>
 80086a0:	2802      	cmp	r0, #2
 80086a2:	d0d8      	beq.n	8008656 <USBD_StdDevReq+0x66>
        USBD_CtlSendStatus(pdev);
 80086a4:	4628      	mov	r0, r5
 80086a6:	f000 fa7b 	bl	8008ba0 <USBD_CtlSendStatus>
 80086aa:	e7b4      	b.n	8008616 <USBD_StdDevReq+0x26>
  switch (pdev->dev_state)
 80086ac:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80086b0:	3b01      	subs	r3, #1
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	f04f 0203 	mov.w	r2, #3
 80086b8:	d8cd      	bhi.n	8008656 <USBD_StdDevReq+0x66>
    if(req->wLength != 0x2U)
 80086ba:	88cb      	ldrh	r3, [r1, #6]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d1ca      	bne.n	8008656 <USBD_StdDevReq+0x66>
    if (pdev->dev_remote_wakeup)
 80086c0:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086c4:	2101      	movs	r1, #1
 80086c6:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80086c8:	b103      	cbz	r3, 80086cc <USBD_StdDevReq+0xdc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086ca:	60c2      	str	r2, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80086cc:	2202      	movs	r2, #2
 80086ce:	f105 010c 	add.w	r1, r5, #12
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 fa38 	bl	8008b48 <USBD_CtlSendData>
 80086d8:	e79d      	b.n	8008616 <USBD_StdDevReq+0x26>
  switch (pdev->dev_state)
 80086da:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80086de:	3b01      	subs	r3, #1
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d8b8      	bhi.n	8008656 <USBD_StdDevReq+0x66>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086e4:	884b      	ldrh	r3, [r1, #2]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d195      	bne.n	8008616 <USBD_StdDevReq+0x26>
      pdev->dev_remote_wakeup = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	f8c5 327c 	str.w	r3, [r5, #636]	; 0x27c
 80086f0:	e7d8      	b.n	80086a4 <USBD_StdDevReq+0xb4>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086f2:	884b      	ldrh	r3, [r1, #2]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d18e      	bne.n	8008616 <USBD_StdDevReq+0x26>
 80086f8:	e7f8      	b.n	80086ec <USBD_StdDevReq+0xfc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086fa:	888b      	ldrh	r3, [r1, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1aa      	bne.n	8008656 <USBD_StdDevReq+0x66>
 8008700:	88cb      	ldrh	r3, [r1, #6]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1a7      	bne.n	8008656 <USBD_StdDevReq+0x66>
 8008706:	884c      	ldrh	r4, [r1, #2]
 8008708:	2c7f      	cmp	r4, #127	; 0x7f
 800870a:	d8a4      	bhi.n	8008656 <USBD_StdDevReq+0x66>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008710:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008712:	b2e1      	uxtb	r1, r4
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008714:	d09f      	beq.n	8008656 <USBD_StdDevReq+0x66>
      pdev->dev_address = dev_addr;
 8008716:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800871a:	f019 febb 	bl	8022494 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800871e:	4628      	mov	r0, r5
 8008720:	f000 fa3e 	bl	8008ba0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008724:	2c00      	cmp	r4, #0
 8008726:	f000 80d2 	beq.w	80088ce <USBD_StdDevReq+0x2de>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800872a:	2302      	movs	r3, #2
 800872c:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
 8008730:	e771      	b.n	8008616 <USBD_StdDevReq+0x26>
 8008732:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 8008734:	0a13      	lsrs	r3, r2, #8
 8008736:	3b01      	subs	r3, #1
 8008738:	2b0e      	cmp	r3, #14
 800873a:	d88c      	bhi.n	8008656 <USBD_StdDevReq+0x66>
 800873c:	a101      	add	r1, pc, #4	; (adr r1, 8008744 <USBD_StdDevReq+0x154>)
 800873e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008839 	.word	0x08008839
 8008748:	08008807 	.word	0x08008807
 800874c:	080087f7 	.word	0x080087f7
 8008750:	08008657 	.word	0x08008657
 8008754:	08008657 	.word	0x08008657
 8008758:	080087e1 	.word	0x080087e1
 800875c:	0800881f 	.word	0x0800881f
 8008760:	08008657 	.word	0x08008657
 8008764:	08008657 	.word	0x08008657
 8008768:	08008657 	.word	0x08008657
 800876c:	08008657 	.word	0x08008657
 8008770:	08008657 	.word	0x08008657
 8008774:	08008657 	.word	0x08008657
 8008778:	08008657 	.word	0x08008657
 800877c:	080087a7 	.word	0x080087a7
  if (req->wLength != 1U)
 8008780:	88ca      	ldrh	r2, [r1, #6]
 8008782:	2a01      	cmp	r2, #1
 8008784:	f47f af67 	bne.w	8008656 <USBD_StdDevReq+0x66>
    switch (pdev->dev_state)
 8008788:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800878c:	2b00      	cmp	r3, #0
 800878e:	f43f af62 	beq.w	8008656 <USBD_StdDevReq+0x66>
 8008792:	2b02      	cmp	r3, #2
 8008794:	f240 8088 	bls.w	80088a8 <USBD_StdDevReq+0x2b8>
 8008798:	2b03      	cmp	r3, #3
 800879a:	f47f af5c 	bne.w	8008656 <USBD_StdDevReq+0x66>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800879e:	1d01      	adds	r1, r0, #4
 80087a0:	f000 f9d2 	bl	8008b48 <USBD_CtlSendData>
 80087a4:	e737      	b.n	8008616 <USBD_StdDevReq+0x26>
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80087a6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80087aa:	7c00      	ldrb	r0, [r0, #16]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	f10d 0106 	add.w	r1, sp, #6
 80087b2:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80087b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80087b8:	b16b      	cbz	r3, 80087d6 <USBD_StdDevReq+0x1e6>
 80087ba:	88e2      	ldrh	r2, [r4, #6]
 80087bc:	2a00      	cmp	r2, #0
 80087be:	f43f af71 	beq.w	80086a4 <USBD_StdDevReq+0xb4>
    len = MIN(len, req->wLength);
 80087c2:	4293      	cmp	r3, r2
 80087c4:	bf28      	it	cs
 80087c6:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 80087c8:	4601      	mov	r1, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	4628      	mov	r0, r5
    len = MIN(len, req->wLength);
 80087ce:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80087d2:	f000 f9b9 	bl	8008b48 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80087d6:	88e3      	ldrh	r3, [r4, #6]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f47f af1c 	bne.w	8008616 <USBD_StdDevReq+0x26>
 80087de:	e761      	b.n	80086a4 <USBD_StdDevReq+0xb4>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80087e0:	7c03      	ldrb	r3, [r0, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f47f af37 	bne.w	8008656 <USBD_StdDevReq+0x66>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80087e8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80087ec:	f10d 0006 	add.w	r0, sp, #6
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	4798      	blx	r3
 80087f4:	e7de      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
    switch ((uint8_t)(req->wValue))
 80087f6:	b2d1      	uxtb	r1, r2
 80087f8:	2905      	cmp	r1, #5
 80087fa:	d87c      	bhi.n	80088f6 <USBD_StdDevReq+0x306>
 80087fc:	e8df f001 	tbb	[pc, r1]
 8008800:	343c444c 	.word	0x343c444c
 8008804:	242c      	.short	0x242c
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008806:	7c03      	ldrb	r3, [r0, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d164      	bne.n	80088d6 <USBD_StdDevReq+0x2e6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800880c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008810:	f10d 0006 	add.w	r0, sp, #6
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008818:	2302      	movs	r3, #2
 800881a:	7043      	strb	r3, [r0, #1]
 800881c:	e7ca      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800881e:	7c03      	ldrb	r3, [r0, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f47f af18 	bne.w	8008656 <USBD_StdDevReq+0x66>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008826:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800882a:	f10d 0006 	add.w	r0, sp, #6
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008832:	2307      	movs	r3, #7
 8008834:	7043      	strb	r3, [r0, #1]
 8008836:	e7bd      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008838:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800883c:	7c00      	ldrb	r0, [r0, #16]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f10d 0106 	add.w	r1, sp, #6
 8008844:	4798      	blx	r3
 8008846:	e7b5      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008848:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800884c:	7c00      	ldrb	r0, [r0, #16]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	f10d 0106 	add.w	r1, sp, #6
 8008854:	4798      	blx	r3
 8008856:	e7ad      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008858:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800885c:	7c00      	ldrb	r0, [r0, #16]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	f10d 0106 	add.w	r1, sp, #6
 8008864:	4798      	blx	r3
 8008866:	e7a5      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008868:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800886c:	7c00      	ldrb	r0, [r0, #16]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	f10d 0106 	add.w	r1, sp, #6
 8008874:	4798      	blx	r3
 8008876:	e79d      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008878:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800887c:	7c00      	ldrb	r0, [r0, #16]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f10d 0106 	add.w	r1, sp, #6
 8008884:	4798      	blx	r3
 8008886:	e795      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008888:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800888c:	7c00      	ldrb	r0, [r0, #16]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f10d 0106 	add.w	r1, sp, #6
 8008894:	4798      	blx	r3
 8008896:	e78d      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008898:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800889c:	7c00      	ldrb	r0, [r0, #16]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f10d 0106 	add.w	r1, sp, #6
 80088a4:	4798      	blx	r3
 80088a6:	e785      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
      pdev->dev_default_config = 0U;
 80088a8:	4601      	mov	r1, r0
 80088aa:	2300      	movs	r3, #0
 80088ac:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80088b0:	f000 f94a 	bl	8008b48 <USBD_CtlSendData>
 80088b4:	e6af      	b.n	8008616 <USBD_StdDevReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 80088b6:	2180      	movs	r1, #128	; 0x80
 80088b8:	f019 fdbc 	bl	8022434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80088bc:	2100      	movs	r1, #0
 80088be:	4628      	mov	r0, r5
 80088c0:	f019 fdb8 	bl	8022434 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 80088c4:	7821      	ldrb	r1, [r4, #0]
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7ff fd73 	bl	80083b2 <USBD_ClrClassConfig>
 80088cc:	e6a3      	b.n	8008616 <USBD_StdDevReq+0x26>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
 80088d4:	e69f      	b.n	8008616 <USBD_StdDevReq+0x26>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80088d6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80088da:	f10d 0006 	add.w	r0, sp, #6
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088e2:	2302      	movs	r3, #2
 80088e4:	7043      	strb	r3, [r0, #1]
 80088e6:	e765      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e8:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 80088ea:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ec:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 80088f0:	f7ff fd5f 	bl	80083b2 <USBD_ClrClassConfig>
 80088f4:	e6d6      	b.n	80086a4 <USBD_StdDevReq+0xb4>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 80088f6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80088fa:	f10d 0206 	add.w	r2, sp, #6
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	4798      	blx	r3
 8008902:	e757      	b.n	80087b4 <USBD_StdDevReq+0x1c4>
 8008904:	2000115c 	.word	0x2000115c

08008908 <USBD_StdItfReq>:
{
 8008908:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890a:	780b      	ldrb	r3, [r1, #0]
 800890c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008910:	2b20      	cmp	r3, #32
{
 8008912:	460d      	mov	r5, r1
 8008914:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008916:	d00b      	beq.n	8008930 <USBD_StdItfReq+0x28>
 8008918:	2b40      	cmp	r3, #64	; 0x40
 800891a:	d009      	beq.n	8008930 <USBD_StdItfReq+0x28>
 800891c:	b143      	cbz	r3, 8008930 <USBD_StdItfReq+0x28>
  USBD_LL_StallEP(pdev , 0x80U);
 800891e:	2180      	movs	r1, #128	; 0x80
 8008920:	f019 fd88 	bl	8022434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008924:	4620      	mov	r0, r4
 8008926:	2100      	movs	r1, #0
 8008928:	f019 fd84 	bl	8022434 <USBD_LL_StallEP>
}
 800892c:	2000      	movs	r0, #0
 800892e:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8008930:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8008934:	3b01      	subs	r3, #1
 8008936:	2b02      	cmp	r3, #2
 8008938:	d802      	bhi.n	8008940 <USBD_StdItfReq+0x38>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800893a:	792b      	ldrb	r3, [r5, #4]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d909      	bls.n	8008954 <USBD_StdItfReq+0x4c>
  USBD_LL_StallEP(pdev , 0x80U);
 8008940:	2180      	movs	r1, #128	; 0x80
 8008942:	4620      	mov	r0, r4
 8008944:	f019 fd76 	bl	8022434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008948:	4620      	mov	r0, r4
 800894a:	2100      	movs	r1, #0
 800894c:	f019 fd72 	bl	8022434 <USBD_LL_StallEP>
}
 8008950:	2000      	movs	r0, #0
 8008952:	bd38      	pop	{r3, r4, r5, pc}
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008954:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008958:	4629      	mov	r1, r5
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	4620      	mov	r0, r4
 800895e:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008960:	88eb      	ldrh	r3, [r5, #6]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f4      	bne.n	8008950 <USBD_StdItfReq+0x48>
 8008966:	2800      	cmp	r0, #0
 8008968:	d1f2      	bne.n	8008950 <USBD_StdItfReq+0x48>
          USBD_CtlSendStatus(pdev);
 800896a:	4620      	mov	r0, r4
 800896c:	f000 f918 	bl	8008ba0 <USBD_CtlSendStatus>
 8008970:	e7ee      	b.n	8008950 <USBD_StdItfReq+0x48>
 8008972:	bf00      	nop

08008974 <USBD_StdEPReq>:
{
 8008974:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008976:	780c      	ldrb	r4, [r1, #0]
 8008978:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800897c:	2c20      	cmp	r4, #32
{
 800897e:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008980:	d025      	beq.n	80089ce <USBD_StdEPReq+0x5a>
 8008982:	2c40      	cmp	r4, #64	; 0x40
 8008984:	d023      	beq.n	80089ce <USBD_StdEPReq+0x5a>
 8008986:	b144      	cbz	r4, 800899a <USBD_StdEPReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 8008988:	2180      	movs	r1, #128	; 0x80
 800898a:	f019 fd53 	bl	8022434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800898e:	4628      	mov	r0, r5
 8008990:	2100      	movs	r1, #0
 8008992:	f019 fd4f 	bl	8022434 <USBD_LL_StallEP>
}
 8008996:	2000      	movs	r0, #0
 8008998:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 800899a:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800899c:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800899e:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 80089a0:	b2d6      	uxtb	r6, r2
    switch (req->bRequest)
 80089a2:	d043      	beq.n	8008a2c <USBD_StdEPReq+0xb8>
 80089a4:	d31a      	bcc.n	80089dc <USBD_StdEPReq+0x68>
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d146      	bne.n	8008a38 <USBD_StdEPReq+0xc4>
      switch (pdev->dev_state)
 80089aa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d04b      	beq.n	8008a4a <USBD_StdEPReq+0xd6>
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d140      	bne.n	8008a38 <USBD_StdEPReq+0xc4>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089b6:	884b      	ldrh	r3, [r1, #2]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d158      	bne.n	8008a6e <USBD_StdEPReq+0xfa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089bc:	0672      	lsls	r2, r6, #25
 80089be:	d056      	beq.n	8008a6e <USBD_StdEPReq+0xfa>
 80089c0:	88cb      	ldrh	r3, [r1, #6]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d153      	bne.n	8008a6e <USBD_StdEPReq+0xfa>
            USBD_LL_StallEP(pdev, ep_addr);
 80089c6:	4631      	mov	r1, r6
 80089c8:	f019 fd34 	bl	8022434 <USBD_LL_StallEP>
 80089cc:	e04f      	b.n	8008a6e <USBD_StdEPReq+0xfa>
    pdev->pClass->Setup (pdev, req);
 80089ce:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 80089d2:	4628      	mov	r0, r5
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	4798      	blx	r3
}
 80089d8:	2000      	movs	r0, #0
 80089da:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80089dc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d051      	beq.n	8008a88 <USBD_StdEPReq+0x114>
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d127      	bne.n	8008a38 <USBD_StdEPReq+0xc4>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089e8:	f006 030f 	and.w	r3, r6, #15
 80089ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 80089f0:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 80089f6:	d456      	bmi.n	8008aa6 <USBD_StdEPReq+0x132>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089f8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d03a      	beq.n	8008a76 <USBD_StdEPReq+0x102>
 8008a00:	f006 037f 	and.w	r3, r6, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008a04:	2414      	movs	r4, #20
 8008a06:	fb04 0403 	mla	r4, r4, r3, r0
 8008a0a:	f504 74a0 	add.w	r4, r4, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a0e:	b133      	cbz	r3, 8008a1e <USBD_StdEPReq+0xaa>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	f019 fd2a 	bl	802246c <USBD_LL_IsStallEP>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d04f      	beq.n	8008abc <USBD_StdEPReq+0x148>
            pep->status = 0x0001U;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	6023      	str	r3, [r4, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a20:	4621      	mov	r1, r4
 8008a22:	4628      	mov	r0, r5
 8008a24:	2202      	movs	r2, #2
 8008a26:	f000 f88f 	bl	8008b48 <USBD_CtlSendData>
          break;
 8008a2a:	e7b4      	b.n	8008996 <USBD_StdEPReq+0x22>
      switch (pdev->dev_state)
 8008a2c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d00a      	beq.n	8008a4a <USBD_StdEPReq+0xd6>
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d012      	beq.n	8008a5e <USBD_StdEPReq+0xea>
  USBD_LL_StallEP(pdev , 0x80U);
 8008a38:	2180      	movs	r1, #128	; 0x80
 8008a3a:	f019 fcfb 	bl	8022434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4628      	mov	r0, r5
 8008a42:	f019 fcf7 	bl	8022434 <USBD_LL_StallEP>
}
 8008a46:	2000      	movs	r0, #0
 8008a48:	bd70      	pop	{r4, r5, r6, pc}
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a4a:	0673      	lsls	r3, r6, #25
 8008a4c:	d013      	beq.n	8008a76 <USBD_StdEPReq+0x102>
          USBD_LL_StallEP(pdev, ep_addr);
 8008a4e:	4631      	mov	r1, r6
 8008a50:	f019 fcf0 	bl	8022434 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008a54:	4628      	mov	r0, r5
 8008a56:	2180      	movs	r1, #128	; 0x80
 8008a58:	f019 fcec 	bl	8022434 <USBD_LL_StallEP>
 8008a5c:	e79b      	b.n	8008996 <USBD_StdEPReq+0x22>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a5e:	884b      	ldrh	r3, [r1, #2]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d198      	bne.n	8008996 <USBD_StdEPReq+0x22>
          if ((ep_addr & 0x7FU) != 0x00U)
 8008a64:	0674      	lsls	r4, r6, #25
 8008a66:	d002      	beq.n	8008a6e <USBD_StdEPReq+0xfa>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a68:	4631      	mov	r1, r6
 8008a6a:	f019 fcf1 	bl	8022450 <USBD_LL_ClearStallEP>
        USBD_CtlSendStatus(pdev);
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f000 f896 	bl	8008ba0 <USBD_CtlSendStatus>
        break;
 8008a74:	e78f      	b.n	8008996 <USBD_StdEPReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 8008a76:	2180      	movs	r1, #128	; 0x80
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f019 fcdb 	bl	8022434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008a7e:	4628      	mov	r0, r5
 8008a80:	2100      	movs	r1, #0
 8008a82:	f019 fcd7 	bl	8022434 <USBD_LL_StallEP>
 8008a86:	e786      	b.n	8008996 <USBD_StdEPReq+0x22>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a88:	0670      	lsls	r0, r6, #25
 8008a8a:	d1f4      	bne.n	8008a76 <USBD_StdEPReq+0x102>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008a8c:	0611      	lsls	r1, r2, #24
 8008a8e:	bf4c      	ite	mi
 8008a90:	f105 0114 	addmi.w	r1, r5, #20
 8008a94:	f505 71a0 	addpl.w	r1, r5, #320	; 0x140
          pep->status = 0x0000U;
 8008a98:	2300      	movs	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a9a:	4628      	mov	r0, r5
          pep->status = 0x0000U;
 8008a9c:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f000 f852 	bl	8008b48 <USBD_CtlSendData>
          break;
 8008aa4:	e777      	b.n	8008996 <USBD_StdEPReq+0x22>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d0e4      	beq.n	8008a76 <USBD_StdEPReq+0x102>
 8008aac:	f006 037f 	and.w	r3, r6, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008ab0:	1c5c      	adds	r4, r3, #1
 8008ab2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008ab6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008aba:	e7a8      	b.n	8008a0e <USBD_StdEPReq+0x9a>
            pep->status = 0x0000U;
 8008abc:	6020      	str	r0, [r4, #0]
 8008abe:	e7af      	b.n	8008a20 <USBD_StdEPReq+0xac>

08008ac0 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008ac0:	780b      	ldrb	r3, [r1, #0]
 8008ac2:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008ac4:	784b      	ldrb	r3, [r1, #1]
 8008ac6:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008ac8:	78ca      	ldrb	r2, [r1, #3]
 8008aca:	788b      	ldrb	r3, [r1, #2]
 8008acc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008ad0:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008ad2:	794a      	ldrb	r2, [r1, #5]
 8008ad4:	790b      	ldrb	r3, [r1, #4]
 8008ad6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008ada:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008adc:	79ca      	ldrb	r2, [r1, #7]
 8008ade:	798b      	ldrb	r3, [r1, #6]
 8008ae0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008ae4:	80c3      	strh	r3, [r0, #6]
 8008ae6:	4770      	bx	lr

08008ae8 <USBD_CtlError>:
{
 8008ae8:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8008aea:	2180      	movs	r1, #128	; 0x80
{
 8008aec:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8008aee:	f019 fca1 	bl	8022434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008af2:	4620      	mov	r0, r4
 8008af4:	2100      	movs	r1, #0
}
 8008af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8008afa:	f019 bc9b 	b.w	8022434 <USBD_LL_StallEP>
 8008afe:	bf00      	nop

08008b00 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8008b00:	b1f8      	cbz	r0, 8008b42 <USBD_GetString+0x42>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8008b02:	7803      	ldrb	r3, [r0, #0]
{
 8008b04:	b430      	push	{r4, r5}
    while (*buf != '\0')
 8008b06:	b1eb      	cbz	r3, 8008b44 <USBD_GetString+0x44>
 8008b08:	4604      	mov	r4, r0
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 8008b10:	3301      	adds	r3, #1
 8008b12:	b2db      	uxtb	r3, r3
    while (*buf != '\0')
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	d1f9      	bne.n	8008b0c <USBD_GetString+0xc>
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b1c:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b1e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b20:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b22:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8008b24:	7804      	ldrb	r4, [r0, #0]
 8008b26:	b15c      	cbz	r4, 8008b40 <USBD_GetString+0x40>
 8008b28:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8008b2a:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8008b32:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8008b34:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8008b38:	3302      	adds	r3, #2
 8008b3a:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8008b3c:	2c00      	cmp	r4, #0
 8008b3e:	d1f5      	bne.n	8008b2c <USBD_GetString+0x2c>
}
 8008b40:	bc30      	pop	{r4, r5}
 8008b42:	4770      	bx	lr
    while (*buf != '\0')
 8008b44:	2302      	movs	r3, #2
 8008b46:	e7e9      	b.n	8008b1c <USBD_GetString+0x1c>

08008b48 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008b52:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008b54:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8008b56:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008b58:	2100      	movs	r1, #0
 8008b5a:	f019 fca9 	bl	80224b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008b5e:	2000      	movs	r0, #0
 8008b60:	bd10      	pop	{r4, pc}

08008b62 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008b62:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008b64:	4613      	mov	r3, r2
 8008b66:	460a      	mov	r2, r1
 8008b68:	2100      	movs	r1, #0
 8008b6a:	f019 fca1 	bl	80224b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008b6e:	2000      	movs	r0, #0
 8008b70:	bd08      	pop	{r3, pc}

08008b72 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008b72:	b510      	push	{r4, lr}
 8008b74:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b76:	2203      	movs	r2, #3
 8008b78:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008b7c:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008b80:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8008b82:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008b86:	2100      	movs	r1, #0
 8008b88:	f019 fca0 	bl	80224cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	bd10      	pop	{r4, pc}

08008b90 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008b90:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b92:	4613      	mov	r3, r2
 8008b94:	460a      	mov	r2, r1
 8008b96:	2100      	movs	r1, #0
 8008b98:	f019 fc98 	bl	80224cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	bd08      	pop	{r3, pc}

08008ba0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008ba0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ba2:	2304      	movs	r3, #4
 8008ba4:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ba8:	2300      	movs	r3, #0
 8008baa:	461a      	mov	r2, r3
 8008bac:	4619      	mov	r1, r3
 8008bae:	f019 fc7f 	bl	80224b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	bd08      	pop	{r3, pc}

08008bb6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008bb6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bb8:	2305      	movs	r3, #5
 8008bba:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	f019 fc82 	bl	80224cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008bc8:	2000      	movs	r0, #0
 8008bca:	bd08      	pop	{r3, pc}

08008bcc <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008bcc:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <disk_status+0x10>)
 8008bce:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8008bd2:	4403      	add	r3, r0
 8008bd4:	6852      	ldr	r2, [r2, #4]
 8008bd6:	7a18      	ldrb	r0, [r3, #8]
 8008bd8:	6853      	ldr	r3, [r2, #4]
 8008bda:	4718      	bx	r3
 8008bdc:	20001188 	.word	0x20001188

08008be0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008be0:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <disk_initialize+0x1c>)
 8008be2:	5c1a      	ldrb	r2, [r3, r0]
 8008be4:	b10a      	cbz	r2, 8008bea <disk_initialize+0xa>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
  }
  return stat;
}
 8008be6:	2000      	movs	r0, #0
 8008be8:	4770      	bx	lr
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008bea:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 8008bee:	2101      	movs	r1, #1
 8008bf0:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008bf2:	6852      	ldr	r2, [r2, #4]
 8008bf4:	4403      	add	r3, r0
 8008bf6:	6812      	ldr	r2, [r2, #0]
 8008bf8:	7a18      	ldrb	r0, [r3, #8]
 8008bfa:	4710      	bx	r2
 8008bfc:	20001188 	.word	0x20001188

08008c00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c00:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c02:	4c05      	ldr	r4, [pc, #20]	; (8008c18 <disk_read+0x18>)
 8008c04:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8008c08:	4404      	add	r4, r0
 8008c0a:	686d      	ldr	r5, [r5, #4]
 8008c0c:	7a20      	ldrb	r0, [r4, #8]
 8008c0e:	68ac      	ldr	r4, [r5, #8]
 8008c10:	46a4      	mov	ip, r4
  return res;
}
 8008c12:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c14:	4760      	bx	ip
 8008c16:	bf00      	nop
 8008c18:	20001188 	.word	0x20001188

08008c1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008c1c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008c1e:	4c05      	ldr	r4, [pc, #20]	; (8008c34 <disk_write+0x18>)
 8008c20:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8008c24:	4404      	add	r4, r0
 8008c26:	686d      	ldr	r5, [r5, #4]
 8008c28:	7a20      	ldrb	r0, [r4, #8]
 8008c2a:	68ec      	ldr	r4, [r5, #12]
 8008c2c:	46a4      	mov	ip, r4
  return res;
}
 8008c2e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008c30:	4760      	bx	ip
 8008c32:	bf00      	nop
 8008c34:	20001188 	.word	0x20001188

08008c38 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <disk_ioctl+0x18>)
{
 8008c3a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c3c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8008c40:	4403      	add	r3, r0
 8008c42:	6864      	ldr	r4, [r4, #4]
 8008c44:	7a18      	ldrb	r0, [r3, #8]
 8008c46:	6923      	ldr	r3, [r4, #16]
  return res;
}
 8008c48:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c4c:	4718      	bx	r3
 8008c4e:	bf00      	nop
 8008c50:	20001188 	.word	0x20001188

08008c54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c54:	b4f0      	push	{r4, r5, r6, r7}
 8008c56:	4f18      	ldr	r7, [pc, #96]	; (8008cb8 <chk_lock+0x64>)
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c58:	2600      	movs	r6, #0
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	4632      	mov	r2, r6
		if (Files[i].fs) {	/* Existing entry */
 8008c5e:	681c      	ldr	r4, [r3, #0]
 8008c60:	b18c      	cbz	r4, 8008c86 <chk_lock+0x32>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c62:	6805      	ldr	r5, [r0, #0]
 8008c64:	42ac      	cmp	r4, r5
 8008c66:	d010      	beq.n	8008c8a <chk_lock+0x36>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c68:	3201      	adds	r2, #1
 8008c6a:	2a02      	cmp	r2, #2
 8008c6c:	f103 0310 	add.w	r3, r3, #16
 8008c70:	d1f5      	bne.n	8008c5e <chk_lock+0xa>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008c72:	b92e      	cbnz	r6, 8008c80 <chk_lock+0x2c>
 8008c74:	2902      	cmp	r1, #2
 8008c76:	bf0c      	ite	eq
 8008c78:	2000      	moveq	r0, #0
 8008c7a:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8008c7c:	bcf0      	pop	{r4, r5, r6, r7}
 8008c7e:	4770      	bx	lr
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c80:	2000      	movs	r0, #0
}
 8008c82:	bcf0      	pop	{r4, r5, r6, r7}
 8008c84:	4770      	bx	lr
			be = 1;
 8008c86:	2601      	movs	r6, #1
 8008c88:	e7ee      	b.n	8008c68 <chk_lock+0x14>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c8a:	685d      	ldr	r5, [r3, #4]
 8008c8c:	6884      	ldr	r4, [r0, #8]
 8008c8e:	42a5      	cmp	r5, r4
 8008c90:	d1ea      	bne.n	8008c68 <chk_lock+0x14>
				Files[i].clu == dp->obj.sclust &&
 8008c92:	689d      	ldr	r5, [r3, #8]
 8008c94:	6944      	ldr	r4, [r0, #20]
 8008c96:	42a5      	cmp	r5, r4
 8008c98:	d1e6      	bne.n	8008c68 <chk_lock+0x14>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c9a:	b111      	cbz	r1, 8008ca2 <chk_lock+0x4e>
 8008c9c:	2010      	movs	r0, #16
}
 8008c9e:	bcf0      	pop	{r4, r5, r6, r7}
 8008ca0:	4770      	bx	lr
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ca2:	eb07 1202 	add.w	r2, r7, r2, lsl #4
}
 8008ca6:	bcf0      	pop	{r4, r5, r6, r7}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ca8:	8993      	ldrh	r3, [r2, #12]
 8008caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cae:	bf14      	ite	ne
 8008cb0:	2000      	movne	r0, #0
 8008cb2:	2010      	moveq	r0, #16
}
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	20001164 	.word	0x20001164

08008cbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008cbc:	b4f0      	push	{r4, r5, r6, r7}
 8008cbe:	4c22      	ldr	r4, [pc, #136]	; (8008d48 <inc_lock+0x8c>)
 8008cc0:	6806      	ldr	r6, [r0, #0]
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	4622      	mov	r2, r4
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cc6:	2300      	movs	r3, #0
		if (Files[i].fs == dp->obj.fs &&
 8008cc8:	6815      	ldr	r5, [r2, #0]
 8008cca:	42b5      	cmp	r5, r6
 8008ccc:	d00c      	beq.n	8008ce8 <inc_lock+0x2c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cce:	3301      	adds	r3, #1
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	f102 0210 	add.w	r2, r2, #16
 8008cd6:	d1f7      	bne.n	8008cc8 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008cd8:	6822      	ldr	r2, [r4, #0]
 8008cda:	2a00      	cmp	r2, #0
 8008cdc:	d031      	beq.n	8008d42 <inc_lock+0x86>
 8008cde:	6922      	ldr	r2, [r4, #16]
 8008ce0:	b1ea      	cbz	r2, 8008d1e <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008ce2:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8008ce4:	bcf0      	pop	{r4, r5, r6, r7}
 8008ce6:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8008ce8:	6855      	ldr	r5, [r2, #4]
 8008cea:	68b8      	ldr	r0, [r7, #8]
 8008cec:	4285      	cmp	r5, r0
 8008cee:	d1ee      	bne.n	8008cce <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 8008cf0:	6895      	ldr	r5, [r2, #8]
 8008cf2:	6978      	ldr	r0, [r7, #20]
 8008cf4:	4285      	cmp	r5, r0
 8008cf6:	d1ea      	bne.n	8008cce <inc_lock+0x12>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008cf8:	011a      	lsls	r2, r3, #4
 8008cfa:	b151      	cbz	r1, 8008d12 <inc_lock+0x56>
 8008cfc:	18a1      	adds	r1, r4, r2
 8008cfe:	8989      	ldrh	r1, [r1, #12]
 8008d00:	2900      	cmp	r1, #0
 8008d02:	d1ee      	bne.n	8008ce2 <inc_lock+0x26>
 8008d04:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d0a:	4414      	add	r4, r2
 8008d0c:	81a3      	strh	r3, [r4, #12]
}
 8008d0e:	bcf0      	pop	{r4, r5, r6, r7}
 8008d10:	4770      	bx	lr
 8008d12:	18a1      	adds	r1, r4, r2
 8008d14:	1c58      	adds	r0, r3, #1
 8008d16:	898b      	ldrh	r3, [r1, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	e7f5      	b.n	8008d0a <inc_lock+0x4e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d1e:	4618      	mov	r0, r3
 8008d20:	2301      	movs	r3, #1
		Files[i].fs = dp->obj.fs;
 8008d22:	011a      	lsls	r2, r3, #4
 8008d24:	18a3      	adds	r3, r4, r2
		Files[i].clu = dp->obj.sclust;
 8008d26:	68bd      	ldr	r5, [r7, #8]
		Files[i].ofs = dp->dptr;
 8008d28:	697f      	ldr	r7, [r7, #20]
 8008d2a:	609f      	str	r7, [r3, #8]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008d2c:	2900      	cmp	r1, #0
		Files[i].ctr = 0;
 8008d2e:	f04f 0100 	mov.w	r1, #0
		Files[i].clu = dp->obj.sclust;
 8008d32:	605d      	str	r5, [r3, #4]
		Files[i].ctr = 0;
 8008d34:	8199      	strh	r1, [r3, #12]
		Files[i].fs = dp->obj.fs;
 8008d36:	50a6      	str	r6, [r4, r2]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008d38:	bf14      	ite	ne
 8008d3a:	f44f 7380 	movne.w	r3, #256	; 0x100
 8008d3e:	2301      	moveq	r3, #1
 8008d40:	e7e3      	b.n	8008d0a <inc_lock+0x4e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d42:	4613      	mov	r3, r2
 8008d44:	2001      	movs	r0, #1
 8008d46:	e7ec      	b.n	8008d22 <inc_lock+0x66>
 8008d48:	20001164 	.word	0x20001164

08008d4c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008d4c:	b430      	push	{r4, r5}
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008d4e:	6804      	ldr	r4, [r0, #0]
 8008d50:	b1dc      	cbz	r4, 8008d8a <get_ldnumber+0x3e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008d52:	7825      	ldrb	r5, [r4, #0]
 8008d54:	2d20      	cmp	r5, #32
 8008d56:	d90b      	bls.n	8008d70 <get_ldnumber+0x24>
 8008d58:	2d3a      	cmp	r5, #58	; 0x3a
 8008d5a:	d016      	beq.n	8008d8a <get_ldnumber+0x3e>
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	e002      	b.n	8008d66 <get_ldnumber+0x1a>
 8008d60:	2a3a      	cmp	r2, #58	; 0x3a
 8008d62:	d008      	beq.n	8008d76 <get_ldnumber+0x2a>
 8008d64:	460b      	mov	r3, r1
 8008d66:	785a      	ldrb	r2, [r3, #1]
 8008d68:	2a20      	cmp	r2, #32
 8008d6a:	f103 0101 	add.w	r1, r3, #1
 8008d6e:	d8f7      	bhi.n	8008d60 <get_ldnumber+0x14>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d70:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8008d72:	bc30      	pop	{r4, r5}
 8008d74:	4770      	bx	lr
			i = *tp++ - '0';
 8008d76:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d78:	42a1      	cmp	r1, r4
 8008d7a:	d106      	bne.n	8008d8a <get_ldnumber+0x3e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d7c:	2d30      	cmp	r5, #48	; 0x30
 8008d7e:	d104      	bne.n	8008d8a <get_ldnumber+0x3e>
					*path = ++tt;
 8008d80:	3302      	adds	r3, #2
 8008d82:	6003      	str	r3, [r0, #0]
}
 8008d84:	bc30      	pop	{r4, r5}
			i = *tp++ - '0';
 8008d86:	2000      	movs	r0, #0
}
 8008d88:	4770      	bx	lr
	int vol = -1;
 8008d8a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d8e:	bc30      	pop	{r4, r5}
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop

08008d94 <validate>:
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008d94:	b158      	cbz	r0, 8008dae <validate+0x1a>
{
 8008d96:	b510      	push	{r4, lr}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008d98:	6803      	ldr	r3, [r0, #0]
{
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	4604      	mov	r4, r0
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008d9e:	b10b      	cbz	r3, 8008da4 <validate+0x10>
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	b942      	cbnz	r2, 8008db6 <validate+0x22>
		*fs = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	600b      	str	r3, [r1, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8008da8:	2009      	movs	r0, #9
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8008daa:	b002      	add	sp, #8
 8008dac:	bd10      	pop	{r4, pc}
		*fs = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	600b      	str	r3, [r1, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8008db2:	2009      	movs	r0, #9
}
 8008db4:	4770      	bx	lr
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008db6:	88d8      	ldrh	r0, [r3, #6]
 8008db8:	88a2      	ldrh	r2, [r4, #4]
 8008dba:	4290      	cmp	r0, r2
 8008dbc:	d1f2      	bne.n	8008da4 <validate+0x10>
 8008dbe:	7858      	ldrb	r0, [r3, #1]
 8008dc0:	9101      	str	r1, [sp, #4]
 8008dc2:	f7ff ff03 	bl	8008bcc <disk_status>
 8008dc6:	f010 0001 	ands.w	r0, r0, #1
 8008dca:	9901      	ldr	r1, [sp, #4]
 8008dcc:	d1ea      	bne.n	8008da4 <validate+0x10>
		*fs = obj->fs;			/* Owner file sytem object */
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	600b      	str	r3, [r1, #0]
 8008dd2:	e7ea      	b.n	8008daa <validate+0x16>

08008dd4 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008dd4:	440a      	add	r2, r1
 8008dd6:	3801      	subs	r0, #1
			*d++ = *s++;
 8008dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ddc:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8008de0:	4291      	cmp	r1, r2
 8008de2:	d1f9      	bne.n	8008dd8 <mem_cpy.part.0+0x4>
}
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop

08008de8 <sync_window.part.6>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008dea:	6b04      	ldr	r4, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008dec:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008df0:	4605      	mov	r5, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008df2:	4622      	mov	r2, r4
 8008df4:	7840      	ldrb	r0, [r0, #1]
 8008df6:	4639      	mov	r1, r7
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f7ff ff0f 	bl	8008c1c <disk_write>
 8008dfe:	b9b0      	cbnz	r0, 8008e2e <sync_window.part.6+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008e00:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008e02:	69eb      	ldr	r3, [r5, #28]
			fs->wflag = 0;
 8008e04:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008e06:	1aa2      	subs	r2, r4, r2
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d20e      	bcs.n	8008e2a <sync_window.part.6+0x42>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e0c:	78ae      	ldrb	r6, [r5, #2]
 8008e0e:	2e01      	cmp	r6, #1
 8008e10:	d801      	bhi.n	8008e16 <sync_window.part.6+0x2e>
 8008e12:	e00a      	b.n	8008e2a <sync_window.part.6+0x42>
 8008e14:	69eb      	ldr	r3, [r5, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e16:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8008e18:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e1a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4639      	mov	r1, r7
 8008e22:	f7ff fefb 	bl	8008c1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e26:	2e01      	cmp	r6, #1
 8008e28:	d1f4      	bne.n	8008e14 <sync_window.part.6+0x2c>
	FRESULT res = FR_OK;
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = FR_DISK_ERR;
 8008e2e:	2001      	movs	r0, #1
}
 8008e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e32:	bf00      	nop

08008e34 <move_window>:
{
 8008e34:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008e36:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	d018      	beq.n	8008e6e <move_window+0x3a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008e3c:	78c3      	ldrb	r3, [r0, #3]
 8008e3e:	4604      	mov	r4, r0
 8008e40:	460d      	mov	r5, r1
 8008e42:	b97b      	cbnz	r3, 8008e64 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008e44:	462a      	mov	r2, r5
 8008e46:	2301      	movs	r3, #1
 8008e48:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8008e4c:	7860      	ldrb	r0, [r4, #1]
 8008e4e:	f7ff fed7 	bl	8008c00 <disk_read>
				res = FR_DISK_ERR;
 8008e52:	2800      	cmp	r0, #0
 8008e54:	bf18      	it	ne
 8008e56:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8008e5a:	6325      	str	r5, [r4, #48]	; 0x30
				res = FR_DISK_ERR;
 8008e5c:	bf0c      	ite	eq
 8008e5e:	2000      	moveq	r0, #0
 8008e60:	2001      	movne	r0, #1
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	f7ff ffc0 	bl	8008de8 <sync_window.part.6>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d0eb      	beq.n	8008e44 <move_window+0x10>
}
 8008e6c:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8008e6e:	2000      	movs	r0, #0
}
 8008e70:	bd38      	pop	{r3, r4, r5, pc}
 8008e72:	bf00      	nop

08008e74 <sync_fs>:
{
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008e76:	78c3      	ldrb	r3, [r0, #3]
{
 8008e78:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008e7a:	b95b      	cbnz	r3, 8008e94 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008e7c:	7823      	ldrb	r3, [r4, #0]
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d00d      	beq.n	8008e9e <sync_fs+0x2a>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008e82:	2200      	movs	r2, #0
 8008e84:	7860      	ldrb	r0, [r4, #1]
 8008e86:	4611      	mov	r1, r2
 8008e88:	f7ff fed6 	bl	8008c38 <disk_ioctl>
 8008e8c:	3000      	adds	r0, #0
 8008e8e:	bf18      	it	ne
 8008e90:	2001      	movne	r0, #1
}
 8008e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e94:	f7ff ffa8 	bl	8008de8 <sync_window.part.6>
	if (res == FR_OK) {
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d0ef      	beq.n	8008e7c <sync_fs+0x8>
}
 8008e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008e9e:	7923      	ldrb	r3, [r4, #4]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d1ee      	bne.n	8008e82 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8008ea4:	89a2      	ldrh	r2, [r4, #12]
 8008ea6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8008eaa:	440a      	add	r2, r1
	BYTE *d = (BYTE*)dst;
 8008eac:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
 8008eae:	2500      	movs	r5, #0
 8008eb0:	f803 5b01 	strb.w	r5, [r3], #1
	} while (--cnt);
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d1fb      	bne.n	8008eb0 <sync_fs+0x3c>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008eb8:	6963      	ldr	r3, [r4, #20]
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008eba:	6920      	ldr	r0, [r4, #16]
			fs->winsect = fs->volbase + 1;
 8008ebc:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ebe:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
 8008ec2:	0a1f      	lsrs	r7, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008ec4:	0c1e      	lsrs	r6, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008ec6:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008ec8:	ea4f 2e10 	mov.w	lr, r0, lsr #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008ecc:	f884 721d 	strb.w	r7, [r4, #541]	; 0x21d
	*ptr++ = (BYTE)val; val >>= 8;
 8008ed0:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val; val >>= 8;
 8008ed4:	0c07      	lsrs	r7, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008ed6:	0e06      	lsrs	r6, r0, #24
	*ptr++ = (BYTE)val;
 8008ed8:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8008edc:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val;
 8008ee0:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
 8008ee2:	2055      	movs	r0, #85	; 0x55
			fs->winsect = fs->volbase + 1;
 8008ee4:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8008ee6:	f884 7222 	strb.w	r7, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 8008eea:	f884 6223 	strb.w	r6, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 8008eee:	2752      	movs	r7, #82	; 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 8008ef0:	2661      	movs	r6, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8008ef2:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8008ef6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val;
 8008efa:	2041      	movs	r0, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8008efc:	2372      	movs	r3, #114	; 0x72
	*ptr++ = (BYTE)val;
 8008efe:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8008f02:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val; val >>= 8;
 8008f06:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8008f0a:	f884 3219 	strb.w	r3, [r4, #537]	; 0x219
 8008f0e:	f884 e221 	strb.w	lr, [r4, #545]	; 0x221
			fs->winsect = fs->volbase + 1;
 8008f12:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8008f14:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8008f18:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8008f1c:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8008f20:	f884 621b 	strb.w	r6, [r4, #539]	; 0x21b
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008f24:	2301      	movs	r3, #1
 8008f26:	7860      	ldrb	r0, [r4, #1]
 8008f28:	f7ff fe78 	bl	8008c1c <disk_write>
			fs->fsi_flag = 0;
 8008f2c:	7125      	strb	r5, [r4, #4]
 8008f2e:	e7a8      	b.n	8008e82 <sync_fs+0xe>

08008f30 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f30:	2200      	movs	r2, #0
 8008f32:	f04f 33ff 	mov.w	r3, #4294967295
{
 8008f36:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f38:	70c2      	strb	r2, [r0, #3]
 8008f3a:	6303      	str	r3, [r0, #48]	; 0x30
{
 8008f3c:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f3e:	f7ff ff79 	bl	8008e34 <move_window>
 8008f42:	b108      	cbz	r0, 8008f48 <check_fs+0x18>
 8008f44:	2004      	movs	r0, #4
 8008f46:	bd10      	pop	{r4, pc}
	rv = rv << 8 | ptr[0];
 8008f48:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
 8008f4c:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f50:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8008f54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d001      	beq.n	8008f60 <check_fs+0x30>
 8008f5c:	2003      	movs	r0, #3
 8008f5e:	bd10      	pop	{r4, pc}
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f60:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008f64:	2be9      	cmp	r3, #233	; 0xe9
 8008f66:	d007      	beq.n	8008f78 <check_fs+0x48>
 8008f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f6a:	4a14      	ldr	r2, [pc, #80]	; (8008fbc <check_fs+0x8c>)
 8008f6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d001      	beq.n	8008f78 <check_fs+0x48>
	return 2;
 8008f74:	2002      	movs	r0, #2
 8008f76:	bd10      	pop	{r4, pc}
	rv = rv << 8 | ptr[2];
 8008f78:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 8008f7c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 8008f80:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f84:	490e      	ldr	r1, [pc, #56]	; (8008fc0 <check_fs+0x90>)
	rv = rv << 8 | ptr[1];
 8008f86:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8008f8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f92:	428b      	cmp	r3, r1
 8008f94:	d00f      	beq.n	8008fb6 <check_fs+0x86>
	rv = rv << 8 | ptr[2];
 8008f96:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 8008f9a:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 8008f9e:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008fa2:	4a08      	ldr	r2, [pc, #32]	; (8008fc4 <check_fs+0x94>)
	rv = rv << 8 | ptr[1];
 8008fa4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8008fa8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008fac:	4290      	cmp	r0, r2
 8008fae:	bf14      	ite	ne
 8008fb0:	2002      	movne	r0, #2
 8008fb2:	2000      	moveq	r0, #0
 8008fb4:	bd10      	pop	{r4, pc}
 8008fb6:	2000      	movs	r0, #0
}
 8008fb8:	bd10      	pop	{r4, pc}
 8008fba:	bf00      	nop
 8008fbc:	009000eb 	.word	0x009000eb
 8008fc0:	00544146 	.word	0x00544146
 8008fc4:	33544146 	.word	0x33544146

08008fc8 <find_volume>:
{
 8008fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8008fcc:	2300      	movs	r3, #0
{
 8008fce:	b084      	sub	sp, #16
	*rfs = 0;
 8008fd0:	600b      	str	r3, [r1, #0]
{
 8008fd2:	460f      	mov	r7, r1
 8008fd4:	4614      	mov	r4, r2
	vol = get_ldnumber(path);
 8008fd6:	f7ff feb9 	bl	8008d4c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008fda:	1e06      	subs	r6, r0, #0
 8008fdc:	db19      	blt.n	8009012 <find_volume+0x4a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008fde:	4bb4      	ldr	r3, [pc, #720]	; (80092b0 <find_volume+0x2e8>)
 8008fe0:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008fe4:	b1cd      	cbz	r5, 800901a <find_volume+0x52>
	*rfs = fs;							/* Return pointer to the file system object */
 8008fe6:	603d      	str	r5, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008fe8:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008fea:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008fee:	b123      	cbz	r3, 8008ffa <find_volume+0x32>
		stat = disk_status(fs->drv);
 8008ff0:	7868      	ldrb	r0, [r5, #1]
 8008ff2:	f7ff fdeb 	bl	8008bcc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008ff6:	07c1      	lsls	r1, r0, #31
 8008ff8:	d513      	bpl.n	8009022 <find_volume+0x5a>
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ffa:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8008ffc:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ffe:	7068      	strb	r0, [r5, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 8009000:	702b      	strb	r3, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009002:	f7ff fded 	bl	8008be0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009006:	07c2      	lsls	r2, r0, #31
 8009008:	d511      	bpl.n	800902e <find_volume+0x66>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800900a:	2003      	movs	r0, #3
}
 800900c:	b004      	add	sp, #16
 800900e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009012:	200b      	movs	r0, #11
}
 8009014:	b004      	add	sp, #16
 8009016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800901a:	200c      	movs	r0, #12
}
 800901c:	b004      	add	sp, #16
 800901e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009022:	b1d4      	cbz	r4, 800905a <find_volume+0x92>
 8009024:	f010 0004 	ands.w	r0, r0, #4
 8009028:	d0f0      	beq.n	800900c <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 800902a:	200a      	movs	r0, #10
 800902c:	e7ee      	b.n	800900c <find_volume+0x44>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800902e:	b10c      	cbz	r4, 8009034 <find_volume+0x6c>
 8009030:	0743      	lsls	r3, r0, #29
 8009032:	d4fa      	bmi.n	800902a <find_volume+0x62>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009034:	f105 020c 	add.w	r2, r5, #12
 8009038:	2102      	movs	r1, #2
 800903a:	7868      	ldrb	r0, [r5, #1]
 800903c:	f7ff fdfc 	bl	8008c38 <disk_ioctl>
 8009040:	b948      	cbnz	r0, 8009056 <find_volume+0x8e>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009042:	89ab      	ldrh	r3, [r5, #12]
 8009044:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8009048:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 800904c:	d803      	bhi.n	8009056 <find_volume+0x8e>
 800904e:	1e5a      	subs	r2, r3, #1
 8009050:	ea12 0403 	ands.w	r4, r2, r3
 8009054:	d003      	beq.n	800905e <find_volume+0x96>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009056:	2001      	movs	r0, #1
 8009058:	e7d8      	b.n	800900c <find_volume+0x44>
			return FR_OK;				/* The file system object is valid */
 800905a:	4620      	mov	r0, r4
 800905c:	e7d6      	b.n	800900c <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800905e:	4621      	mov	r1, r4
 8009060:	4628      	mov	r0, r5
 8009062:	f7ff ff65 	bl	8008f30 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009066:	2802      	cmp	r0, #2
 8009068:	d005      	beq.n	8009076 <find_volume+0xae>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800906a:	2804      	cmp	r0, #4
 800906c:	d0f3      	beq.n	8009056 <find_volume+0x8e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800906e:	2801      	cmp	r0, #1
 8009070:	d928      	bls.n	80090c4 <find_volume+0xfc>
 8009072:	200d      	movs	r0, #13
 8009074:	e7ca      	b.n	800900c <find_volume+0x44>
 8009076:	466e      	mov	r6, sp
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009078:	4669      	mov	r1, sp
 800907a:	f505 73fe 	add.w	r3, r5, #508	; 0x1fc
 800907e:	f505 740f 	add.w	r4, r5, #572	; 0x23c
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009082:	f813 2c06 	ldrb.w	r2, [r3, #-6]
 8009086:	b142      	cbz	r2, 800909a <find_volume+0xd2>
	rv = rv << 8 | ptr[2];
 8009088:	881f      	ldrh	r7, [r3, #0]
	rv = rv << 8 | ptr[1];
 800908a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
	rv = rv << 8 | ptr[0];
 800908e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
	rv = rv << 8 | ptr[1];
 8009092:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	rv = rv << 8 | ptr[0];
 8009096:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800909a:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800909c:	42a3      	cmp	r3, r4
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800909e:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090a2:	d1ee      	bne.n	8009082 <find_volume+0xba>
 80090a4:	af04      	add	r7, sp, #16
			bsect = br[i];
 80090a6:	f856 4b04 	ldr.w	r4, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80090aa:	b92c      	cbnz	r4, 80090b8 <find_volume+0xf0>
 80090ac:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80090ae:	42b7      	cmp	r7, r6
 80090b0:	d1f9      	bne.n	80090a6 <find_volume+0xde>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80090b2:	2804      	cmp	r0, #4
 80090b4:	d1dd      	bne.n	8009072 <find_volume+0xaa>
 80090b6:	e7ce      	b.n	8009056 <find_volume+0x8e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	f7ff ff38 	bl	8008f30 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80090c0:	2801      	cmp	r0, #1
 80090c2:	d8f4      	bhi.n	80090ae <find_volume+0xe6>
	rv = rv << 8 | ptr[0];
 80090c4:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 80090c8:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80090cc:	89a9      	ldrh	r1, [r5, #12]
 80090ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090d2:	4299      	cmp	r1, r3
 80090d4:	d1cd      	bne.n	8009072 <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 80090d6:	f895 204b 	ldrb.w	r2, [r5, #75]	; 0x4b
 80090da:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80090de:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80090e2:	f000 8087 	beq.w	80091f4 <find_volume+0x22c>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80090e6:	461a      	mov	r2, r3
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80090e8:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
		fs->fsize = fasize;
 80090ec:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80090ee:	1e7b      	subs	r3, r7, #1
 80090f0:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80090f2:	70af      	strb	r7, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80090f4:	d8bd      	bhi.n	8009072 <find_volume+0xaa>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80090f6:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
 80090fa:	fa1f f38c 	uxth.w	r3, ip
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80090fe:	fb02 f707 	mul.w	r7, r2, r7
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009102:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0b4      	beq.n	8009072 <find_volume+0xaa>
 8009108:	f10c 33ff 	add.w	r3, ip, #4294967295
 800910c:	ea13 0f0c 	tst.w	r3, ip
 8009110:	d1af      	bne.n	8009072 <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 8009112:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
 8009116:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800911a:	094b      	lsrs	r3, r1, #5
	rv = rv << 8 | ptr[0];
 800911c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009120:	fbb6 fef3 	udiv	lr, r6, r3
 8009124:	fb03 631e 	mls	r3, r3, lr, r6
 8009128:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800912a:	812e      	strh	r6, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1a0      	bne.n	8009072 <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 8009130:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 8009134:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009138:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
 800913c:	d109      	bne.n	8009152 <find_volume+0x18a>
	rv = rv << 8 | ptr[2];
 800913e:	f8b5 8056 	ldrh.w	r8, [r5, #86]	; 0x56
	rv = rv << 8 | ptr[1];
 8009142:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
	rv = rv << 8 | ptr[0];
 8009146:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
	rv = rv << 8 | ptr[1];
 800914a:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
	rv = rv << 8 | ptr[0];
 800914e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8009152:	f895 8043 	ldrb.w	r8, [r5, #67]	; 0x43
 8009156:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800915a:	ea50 2008 	orrs.w	r0, r0, r8, lsl #8
 800915e:	d088      	beq.n	8009072 <find_volume+0xaa>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009160:	fa10 fe8e 	uxtah	lr, r0, lr
 8009164:	44be      	add	lr, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009166:	4573      	cmp	r3, lr
 8009168:	d383      	bcc.n	8009072 <find_volume+0xaa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800916a:	eba3 030e 	sub.w	r3, r3, lr
 800916e:	fbb3 f3fc 	udiv	r3, r3, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009172:	2b00      	cmp	r3, #0
 8009174:	f43f af7d 	beq.w	8009072 <find_volume+0xaa>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009178:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
 800917c:	4563      	cmp	r3, ip
 800917e:	d861      	bhi.n	8009244 <find_volume+0x27c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009180:	f640 7cf5 	movw	ip, #4085	; 0xff5
 8009184:	4563      	cmp	r3, ip
 8009186:	d840      	bhi.n	800920a <find_volume+0x242>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009188:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800918a:	4420      	add	r0, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800918c:	44a6      	add	lr, r4
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800918e:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009190:	6268      	str	r0, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009192:	f8c5 e02c 	str.w	lr, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8009196:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009198:	2e00      	cmp	r6, #0
 800919a:	f43f af6a 	beq.w	8009072 <find_volume+0xaa>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800919e:	f003 0401 	and.w	r4, r3, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80091a2:	1e4e      	subs	r6, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80091a4:	4407      	add	r7, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80091a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80091aa:	19a0      	adds	r0, r4, r6
 80091ac:	eb00 0353 	add.w	r3, r0, r3, lsr #1
 80091b0:	fbb3 f1f1 	udiv	r1, r3, r1
 80091b4:	428a      	cmp	r2, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80091b6:	62af      	str	r7, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80091b8:	f4ff af5b 	bcc.w	8009072 <find_volume+0xaa>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80091bc:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 80091c0:	2280      	movs	r2, #128	; 0x80
 80091c2:	712a      	strb	r2, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80091c4:	616b      	str	r3, [r5, #20]
 80091c6:	612b      	str	r3, [r5, #16]
 80091c8:	2201      	movs	r2, #1
	fs->id = ++Fsid;		/* File system mount ID */
 80091ca:	483a      	ldr	r0, [pc, #232]	; (80092b4 <find_volume+0x2ec>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80091cc:	493a      	ldr	r1, [pc, #232]	; (80092b8 <find_volume+0x2f0>)
	fs->id = ++Fsid;		/* File system mount ID */
 80091ce:	8803      	ldrh	r3, [r0, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 80091d0:	702a      	strb	r2, [r5, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80091d2:	680a      	ldr	r2, [r1, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80091d4:	3301      	adds	r3, #1
 80091d6:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 80091d8:	4295      	cmp	r5, r2
	fs->id = ++Fsid;		/* File system mount ID */
 80091da:	8003      	strh	r3, [r0, #0]
 80091dc:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80091de:	bf04      	itt	eq
 80091e0:	2300      	moveq	r3, #0
 80091e2:	600b      	streq	r3, [r1, #0]
 80091e4:	690b      	ldr	r3, [r1, #16]
 80091e6:	429d      	cmp	r5, r3
 80091e8:	f04f 0000 	mov.w	r0, #0
 80091ec:	f47f af0e 	bne.w	800900c <find_volume+0x44>
 80091f0:	6108      	str	r0, [r1, #16]
 80091f2:	e70b      	b.n	800900c <find_volume+0x44>
	rv = rv << 8 | ptr[2];
 80091f4:	f8b5 005a 	ldrh.w	r0, [r5, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 80091f8:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 80091fc:	f895 2058 	ldrb.w	r2, [r5, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 8009200:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8009204:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009208:	e76e      	b.n	80090e8 <find_volume+0x120>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800920a:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800920c:	4420      	add	r0, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800920e:	44a6      	add	lr, r4
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009210:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009212:	6268      	str	r0, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009214:	f8c5 e02c 	str.w	lr, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8009218:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800921a:	2e00      	cmp	r6, #0
 800921c:	f43f af29 	beq.w	8009072 <find_volume+0xaa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009220:	4407      	add	r7, r0
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009222:	1e48      	subs	r0, r1, #1
 8009224:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009228:	fbb3 f1f1 	udiv	r1, r3, r1
 800922c:	428a      	cmp	r2, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800922e:	62af      	str	r7, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009230:	f4ff af1f 	bcc.w	8009072 <find_volume+0xaa>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009234:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8009238:	2280      	movs	r2, #128	; 0x80
 800923a:	712a      	strb	r2, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800923c:	616b      	str	r3, [r5, #20]
 800923e:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 0x80;
 8009240:	2202      	movs	r2, #2
 8009242:	e7c2      	b.n	80091ca <find_volume+0x202>
	rv = rv << 8 | ptr[0];
 8009244:	f895 805f 	ldrb.w	r8, [r5, #95]	; 0x5f
 8009248:	f895 c05e 	ldrb.w	ip, [r5, #94]	; 0x5e
		fs->volbase = bsect;							/* Volume start sector */
 800924c:	622c      	str	r4, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800924e:	4420      	add	r0, r4
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009250:	3302      	adds	r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8009252:	eb0e 0704 	add.w	r7, lr, r4
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009256:	6268      	str	r0, [r5, #36]	; 0x24
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009258:	ea5c 2008 	orrs.w	r0, ip, r8, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800925c:	61ab      	str	r3, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800925e:	62ef      	str	r7, [r5, #44]	; 0x2c
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009260:	f47f af07 	bne.w	8009072 <find_volume+0xaa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009264:	2e00      	cmp	r6, #0
 8009266:	f47f af04 	bne.w	8009072 <find_volume+0xaa>
	rv = rv << 8 | ptr[2];
 800926a:	f8b5 e062 	ldrh.w	lr, [r5, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 800926e:	f895 0061 	ldrb.w	r0, [r5, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 8009272:	f895 7060 	ldrb.w	r7, [r5, #96]	; 0x60
	rv = rv << 8 | ptr[1];
 8009276:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
	rv = rv << 8 | ptr[0];
 800927a:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800927e:	1e48      	subs	r0, r1, #1
 8009280:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009284:	fbb3 f1f1 	udiv	r1, r3, r1
 8009288:	428a      	cmp	r2, r1
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800928a:	62af      	str	r7, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800928c:	f4ff aef1 	bcc.w	8009072 <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 8009290:	f895 1065 	ldrb.w	r1, [r5, #101]	; 0x65
 8009294:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 8009298:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800929c:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 80092a0:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80092a2:	2b01      	cmp	r3, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80092a4:	616a      	str	r2, [r5, #20]
 80092a6:	612a      	str	r2, [r5, #16]
		fs->fsi_flag = 0x80;
 80092a8:	7129      	strb	r1, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80092aa:	d007      	beq.n	80092bc <find_volume+0x2f4>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80092ac:	2203      	movs	r2, #3
 80092ae:	e78c      	b.n	80091ca <find_volume+0x202>
 80092b0:	20001160 	.word	0x20001160
 80092b4:	20001184 	.word	0x20001184
 80092b8:	20001164 	.word	0x20001164
			&& move_window(fs, bsect + 1) == FR_OK)
 80092bc:	1c61      	adds	r1, r4, #1
 80092be:	4628      	mov	r0, r5
 80092c0:	f7ff fdb8 	bl	8008e34 <move_window>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d1f1      	bne.n	80092ac <find_volume+0x2e4>
	rv = rv << 8 | ptr[0];
 80092c8:	f895 2233 	ldrb.w	r2, [r5, #563]	; 0x233
 80092cc:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 80092d0:	712e      	strb	r6, [r5, #4]
	rv = rv << 8 | ptr[0];
 80092d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80092d6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80092da:	4293      	cmp	r3, r2
 80092dc:	d1e6      	bne.n	80092ac <find_volume+0x2e4>
	rv = rv << 8 | ptr[2];
 80092de:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 80092e0:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 80092e4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80092e8:	4917      	ldr	r1, [pc, #92]	; (8009348 <find_volume+0x380>)
	rv = rv << 8 | ptr[1];
 80092ea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 80092ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80092f2:	428b      	cmp	r3, r1
 80092f4:	d1da      	bne.n	80092ac <find_volume+0x2e4>
	rv = rv << 8 | ptr[2];
 80092f6:	f8b5 021a 	ldrh.w	r0, [r5, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 80092fa:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
	rv = rv << 8 | ptr[0];
 80092fe:	f895 3218 	ldrb.w	r3, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009302:	f101 51ff 	add.w	r1, r1, #534773760	; 0x1fe00000
 8009306:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
	rv = rv << 8 | ptr[1];
 800930a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800930e:	3120      	adds	r1, #32
	rv = rv << 8 | ptr[0];
 8009310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009314:	428b      	cmp	r3, r1
 8009316:	d1c9      	bne.n	80092ac <find_volume+0x2e4>
	rv = rv << 8 | ptr[2];
 8009318:	f8b5 621e 	ldrh.w	r6, [r5, #542]	; 0x21e
	rv = rv << 8 | ptr[1];
 800931c:	f895 021d 	ldrb.w	r0, [r5, #541]	; 0x21d
	rv = rv << 8 | ptr[2];
 8009320:	f8b5 4222 	ldrh.w	r4, [r5, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 8009324:	f895 1221 	ldrb.w	r1, [r5, #545]	; 0x221
	rv = rv << 8 | ptr[0];
 8009328:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
 800932c:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
	rv = rv << 8 | ptr[1];
 8009330:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8009334:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
	rv = rv << 8 | ptr[0];
 8009338:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800933c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009340:	616a      	str	r2, [r5, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009342:	612b      	str	r3, [r5, #16]
 8009344:	e7b2      	b.n	80092ac <find_volume+0x2e4>
 8009346:	bf00      	nop
 8009348:	41615252 	.word	0x41615252

0800934c <put_fat.part.8>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800934c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 8009350:	7803      	ldrb	r3, [r0, #0]
 8009352:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8009354:	4604      	mov	r4, r0
 8009356:	460d      	mov	r5, r1
 8009358:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800935a:	d06e      	beq.n	800943a <put_fat.part.8+0xee>
 800935c:	2b03      	cmp	r3, #3
 800935e:	d045      	beq.n	80093ec <put_fat.part.8+0xa0>
 8009360:	2b01      	cmp	r3, #1
 8009362:	d002      	beq.n	800936a <put_fat.part.8+0x1e>
	FRESULT res = FR_INT_ERR;
 8009364:	2002      	movs	r0, #2
}
 8009366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800936a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800936c:	8983      	ldrh	r3, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 800936e:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009372:	fbb7 f3f3 	udiv	r3, r7, r3
 8009376:	4419      	add	r1, r3
 8009378:	f7ff fd5c 	bl	8008e34 <move_window>
			if (res != FR_OK) break;
 800937c:	2800      	cmp	r0, #0
 800937e:	d1f2      	bne.n	8009366 <put_fat.part.8+0x1a>
			p = fs->win + bc++ % SS(fs);
 8009380:	89a2      	ldrh	r2, [r4, #12]
 8009382:	fbb7 f3f2 	udiv	r3, r7, r2
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009386:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
 800938a:	f107 0801 	add.w	r8, r7, #1
 800938e:	f104 0934 	add.w	r9, r4, #52	; 0x34
 8009392:	fb02 7713 	mls	r7, r2, r3, r7
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009396:	d06b      	beq.n	8009470 <put_fat.part.8+0x124>
 8009398:	f819 2007 	ldrb.w	r2, [r9, r7]
 800939c:	0133      	lsls	r3, r6, #4
 800939e:	f002 020f 	and.w	r2, r2, #15
 80093a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093a6:	4313      	orrs	r3, r2
 80093a8:	f809 3007 	strb.w	r3, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	fbb8 f3f3 	udiv	r3, r8, r3
			fs->wflag = 1;
 80093b4:	2201      	movs	r2, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093b6:	4419      	add	r1, r3
			fs->wflag = 1;
 80093b8:	70e2      	strb	r2, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff fd3a 	bl	8008e34 <move_window>
			if (res != FR_OK) break;
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d1d0      	bne.n	8009366 <put_fat.part.8+0x1a>
			p = fs->win + bc % SS(fs);
 80093c4:	89a2      	ldrh	r2, [r4, #12]
 80093c6:	fbb8 f3f2 	udiv	r3, r8, r2
 80093ca:	fb02 8813 	mls	r8, r2, r3, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	d150      	bne.n	8009474 <put_fat.part.8+0x128>
 80093d2:	f819 3008 	ldrb.w	r3, [r9, r8]
 80093d6:	f3c6 2203 	ubfx	r2, r6, #8, #4
 80093da:	f023 060f 	bic.w	r6, r3, #15
 80093de:	4316      	orrs	r6, r2
			fs->wflag = 1;
 80093e0:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80093e2:	f809 6008 	strb.w	r6, [r9, r8]
			fs->wflag = 1;
 80093e6:	70e3      	strb	r3, [r4, #3]
 80093e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80093ec:	8983      	ldrh	r3, [r0, #12]
 80093ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80093f0:	089b      	lsrs	r3, r3, #2
 80093f2:	fbb5 f3f3 	udiv	r3, r5, r3
 80093f6:	4419      	add	r1, r3
 80093f8:	f7ff fd1c 	bl	8008e34 <move_window>
			if (res != FR_OK) break;
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d1b2      	bne.n	8009366 <put_fat.part.8+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009400:	89a2      	ldrh	r2, [r4, #12]
 8009402:	00ad      	lsls	r5, r5, #2
 8009404:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8009408:	fbb5 f3f2 	udiv	r3, r5, r2
 800940c:	fb02 5513 	mls	r5, r2, r3, r5
 8009410:	194a      	adds	r2, r1, r5
 8009412:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[2];
 8009416:	8853      	ldrh	r3, [r2, #2]
	rv = rv << 8 | ptr[0];
 8009418:	041b      	lsls	r3, r3, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800941a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800941e:	431e      	orrs	r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8009420:	554e      	strb	r6, [r1, r5]
 8009422:	ea4f 2e16 	mov.w	lr, r6, lsr #8
	*ptr++ = (BYTE)val; val >>= 8;
 8009426:	0c37      	lsrs	r7, r6, #16
			fs->wflag = 1;
 8009428:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800942a:	0e36      	lsrs	r6, r6, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800942c:	f882 e001 	strb.w	lr, [r2, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8009430:	7097      	strb	r7, [r2, #2]
	*ptr++ = (BYTE)val;
 8009432:	70d6      	strb	r6, [r2, #3]
			fs->wflag = 1;
 8009434:	70e3      	strb	r3, [r4, #3]
 8009436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800943a:	8983      	ldrh	r3, [r0, #12]
 800943c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800943e:	085b      	lsrs	r3, r3, #1
 8009440:	fbb5 f3f3 	udiv	r3, r5, r3
 8009444:	4419      	add	r1, r3
 8009446:	f7ff fcf5 	bl	8008e34 <move_window>
			if (res != FR_OK) break;
 800944a:	2800      	cmp	r0, #0
 800944c:	d18b      	bne.n	8009366 <put_fat.part.8+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800944e:	89a1      	ldrh	r1, [r4, #12]
 8009450:	006d      	lsls	r5, r5, #1
 8009452:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8009456:	fbb5 f3f1 	udiv	r3, r5, r1
 800945a:	fb01 5513 	mls	r5, r1, r3, r5
 800945e:	1951      	adds	r1, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8009460:	5556      	strb	r6, [r2, r5]
 8009462:	f3c6 2707 	ubfx	r7, r6, #8, #8
			fs->wflag = 1;
 8009466:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8009468:	704f      	strb	r7, [r1, #1]
			fs->wflag = 1;
 800946a:	70e3      	strb	r3, [r4, #3]
 800946c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009470:	b2f3      	uxtb	r3, r6
 8009472:	e799      	b.n	80093a8 <put_fat.part.8+0x5c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009474:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8009478:	e7b2      	b.n	80093e0 <put_fat.part.8+0x94>
 800947a:	bf00      	nop

0800947c <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800947c:	2901      	cmp	r1, #1
 800947e:	d91c      	bls.n	80094ba <get_fat.isra.9+0x3e>
 8009480:	6982      	ldr	r2, [r0, #24]
 8009482:	4291      	cmp	r1, r2
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	4606      	mov	r6, r0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009488:	d207      	bcs.n	800949a <get_fat.isra.9+0x1e>
		switch (fs->fs_type) {
 800948a:	7802      	ldrb	r2, [r0, #0]
 800948c:	2a02      	cmp	r2, #2
 800948e:	460c      	mov	r4, r1
 8009490:	d032      	beq.n	80094f8 <get_fat.isra.9+0x7c>
 8009492:	2a03      	cmp	r2, #3
 8009494:	d013      	beq.n	80094be <get_fat.isra.9+0x42>
 8009496:	2a01      	cmp	r2, #1
 8009498:	d001      	beq.n	800949e <get_fat.isra.9+0x22>
			val = 1;	/* Internal error */
 800949a:	2001      	movs	r0, #1
}
 800949c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800949e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80094a0:	8983      	ldrh	r3, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 80094a2:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094a6:	fbb7 f3f3 	udiv	r3, r7, r3
 80094aa:	4419      	add	r1, r3
 80094ac:	f7ff fcc2 	bl	8008e34 <move_window>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d039      	beq.n	8009528 <get_fat.isra.9+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80094ba:	2001      	movs	r0, #1
 80094bc:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80094be:	8983      	ldrh	r3, [r0, #12]
 80094c0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80094c2:	089b      	lsrs	r3, r3, #2
 80094c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80094c8:	4419      	add	r1, r3
 80094ca:	f7ff fcb3 	bl	8008e34 <move_window>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d1f0      	bne.n	80094b4 <get_fat.isra.9+0x38>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80094d2:	89b2      	ldrh	r2, [r6, #12]
 80094d4:	00a1      	lsls	r1, r4, #2
 80094d6:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80094da:	fbb1 f4f2 	udiv	r4, r1, r2
 80094de:	fb02 1114 	mls	r1, r2, r4, r1
 80094e2:	185a      	adds	r2, r3, r1
	rv = rv << 8 | ptr[0];
 80094e4:	5c58      	ldrb	r0, [r3, r1]
	rv = rv << 8 | ptr[2];
 80094e6:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80094e8:	7853      	ldrb	r3, [r2, #1]
 80094ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80094ee:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80094f2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80094f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80094f8:	8983      	ldrh	r3, [r0, #12]
 80094fa:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80094fc:	085b      	lsrs	r3, r3, #1
 80094fe:	fbb4 f3f3 	udiv	r3, r4, r3
 8009502:	4419      	add	r1, r3
 8009504:	f7ff fc96 	bl	8008e34 <move_window>
 8009508:	2800      	cmp	r0, #0
 800950a:	d1d3      	bne.n	80094b4 <get_fat.isra.9+0x38>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800950c:	89b0      	ldrh	r0, [r6, #12]
 800950e:	0061      	lsls	r1, r4, #1
 8009510:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8009514:	fbb1 f2f0 	udiv	r2, r1, r0
 8009518:	fb00 1112 	mls	r1, r0, r2, r1
 800951c:	185a      	adds	r2, r3, r1
	rv = rv << 8 | ptr[0];
 800951e:	5c58      	ldrb	r0, [r3, r1]
 8009520:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009522:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8009528:	89b1      	ldrh	r1, [r6, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800952a:	6a72      	ldr	r2, [r6, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800952c:	fbb7 f3f1 	udiv	r3, r7, r1
 8009530:	fb01 7313 	mls	r3, r1, r3, r7
 8009534:	4433      	add	r3, r6
 8009536:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009538:	4630      	mov	r0, r6
 800953a:	fbb7 f1f1 	udiv	r1, r7, r1
 800953e:	4411      	add	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8009540:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009544:	f7ff fc76 	bl	8008e34 <move_window>
 8009548:	2800      	cmp	r0, #0
 800954a:	d1b3      	bne.n	80094b4 <get_fat.isra.9+0x38>
			wc |= fs->win[bc % SS(fs)] << 8;
 800954c:	89b2      	ldrh	r2, [r6, #12]
 800954e:	fbb7 f3f2 	udiv	r3, r7, r2
 8009552:	fb02 7313 	mls	r3, r2, r3, r7
 8009556:	4433      	add	r3, r6
 8009558:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800955c:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800955e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009562:	bf4c      	ite	mi
 8009564:	0900      	lsrmi	r0, r0, #4
 8009566:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800956a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800956c <create_chain>:
{
 800956c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009570:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 8009572:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 8009574:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8009576:	bb49      	cbnz	r1, 80095cc <create_chain+0x60>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009578:	6935      	ldr	r5, [r6, #16]
 800957a:	69b3      	ldr	r3, [r6, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800957c:	b9f5      	cbnz	r5, 80095bc <create_chain+0x50>
 800957e:	2501      	movs	r5, #1
 8009580:	462c      	mov	r4, r5
 8009582:	e006      	b.n	8009592 <create_chain+0x26>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009584:	2801      	cmp	r0, #1
 8009586:	d015      	beq.n	80095b4 <create_chain+0x48>
 8009588:	3001      	adds	r0, #1
 800958a:	d02e      	beq.n	80095ea <create_chain+0x7e>
			if (ncl == scl) return 0;		/* No free cluster */
 800958c:	42ac      	cmp	r4, r5
 800958e:	d019      	beq.n	80095c4 <create_chain+0x58>
 8009590:	69b3      	ldr	r3, [r6, #24]
			ncl++;							/* Next cluster */
 8009592:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009594:	429c      	cmp	r4, r3
 8009596:	d302      	bcc.n	800959e <create_chain+0x32>
				if (ncl > scl) return 0;	/* No free cluster */
 8009598:	2d01      	cmp	r5, #1
 800959a:	d913      	bls.n	80095c4 <create_chain+0x58>
				ncl = 2;
 800959c:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800959e:	4621      	mov	r1, r4
 80095a0:	6838      	ldr	r0, [r7, #0]
 80095a2:	f7ff ff6b 	bl	800947c <get_fat.isra.9>
			if (cs == 0) break;				/* Found a free cluster */
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d1ec      	bne.n	8009584 <create_chain+0x18>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80095aa:	2c01      	cmp	r4, #1
 80095ac:	d902      	bls.n	80095b4 <create_chain+0x48>
 80095ae:	69b3      	ldr	r3, [r6, #24]
 80095b0:	429c      	cmp	r4, r3
 80095b2:	d31f      	bcc.n	80095f4 <create_chain+0x88>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80095b4:	2401      	movs	r4, #1
}
 80095b6:	4620      	mov	r0, r4
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80095bc:	429d      	cmp	r5, r3
 80095be:	bf28      	it	cs
 80095c0:	2501      	movcs	r5, #1
 80095c2:	e7dd      	b.n	8009580 <create_chain+0x14>
				if (ncl > scl) return 0;	/* No free cluster */
 80095c4:	2400      	movs	r4, #0
}
 80095c6:	4620      	mov	r0, r4
 80095c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80095cc:	4630      	mov	r0, r6
 80095ce:	f7ff ff55 	bl	800947c <get_fat.isra.9>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80095d2:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80095d4:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80095d6:	d9ed      	bls.n	80095b4 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d006      	beq.n	80095ea <create_chain+0x7e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80095dc:	69b3      	ldr	r3, [r6, #24]
 80095de:	4298      	cmp	r0, r3
 80095e0:	d3e9      	bcc.n	80095b6 <create_chain+0x4a>
 80095e2:	4645      	mov	r5, r8
 80095e4:	e7cc      	b.n	8009580 <create_chain+0x14>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80095e6:	2801      	cmp	r0, #1
 80095e8:	d1e4      	bne.n	80095b4 <create_chain+0x48>
 80095ea:	f04f 34ff 	mov.w	r4, #4294967295
}
 80095ee:	4620      	mov	r0, r4
 80095f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f4:	f04f 32ff 	mov.w	r2, #4294967295
 80095f8:	4621      	mov	r1, r4
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7ff fea6 	bl	800934c <put_fat.part.8>
		if (res == FR_OK && clst != 0) {
 8009600:	2800      	cmp	r0, #0
 8009602:	d1f0      	bne.n	80095e6 <create_chain+0x7a>
 8009604:	f1b8 0f00 	cmp.w	r8, #0
 8009608:	d00c      	beq.n	8009624 <create_chain+0xb8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800960a:	f1b8 0f01 	cmp.w	r8, #1
 800960e:	d9d1      	bls.n	80095b4 <create_chain+0x48>
 8009610:	69b3      	ldr	r3, [r6, #24]
 8009612:	4598      	cmp	r8, r3
 8009614:	d2ce      	bcs.n	80095b4 <create_chain+0x48>
 8009616:	4641      	mov	r1, r8
 8009618:	4622      	mov	r2, r4
 800961a:	4630      	mov	r0, r6
 800961c:	f7ff fe96 	bl	800934c <put_fat.part.8>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009620:	2800      	cmp	r0, #0
 8009622:	d1e0      	bne.n	80095e6 <create_chain+0x7a>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009624:	69b2      	ldr	r2, [r6, #24]
 8009626:	6973      	ldr	r3, [r6, #20]
		fs->last_clst = ncl;
 8009628:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800962a:	3a02      	subs	r2, #2
 800962c:	4293      	cmp	r3, r2
 800962e:	d801      	bhi.n	8009634 <create_chain+0xc8>
 8009630:	3b01      	subs	r3, #1
 8009632:	6173      	str	r3, [r6, #20]
		fs->fsi_flag |= 1;
 8009634:	7933      	ldrb	r3, [r6, #4]
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	7133      	strb	r3, [r6, #4]
 800963c:	e7bb      	b.n	80095b6 <create_chain+0x4a>
 800963e:	bf00      	nop

08009640 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009640:	2901      	cmp	r1, #1
 8009642:	d908      	bls.n	8009656 <remove_chain+0x16>
{
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8009646:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009648:	69b3      	ldr	r3, [r6, #24]
 800964a:	4299      	cmp	r1, r3
 800964c:	460d      	mov	r5, r1
 800964e:	4607      	mov	r7, r0
 8009650:	d303      	bcc.n	800965a <remove_chain+0x1a>
 8009652:	2002      	movs	r0, #2
 8009654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009656:	2002      	movs	r0, #2
}
 8009658:	4770      	bx	lr
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800965a:	b162      	cbz	r2, 8009676 <remove_chain+0x36>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800965c:	2a01      	cmp	r2, #1
 800965e:	d9f8      	bls.n	8009652 <remove_chain+0x12>
 8009660:	4293      	cmp	r3, r2
 8009662:	d9f6      	bls.n	8009652 <remove_chain+0x12>
 8009664:	4611      	mov	r1, r2
 8009666:	4630      	mov	r0, r6
 8009668:	f04f 32ff 	mov.w	r2, #4294967295
 800966c:	f7ff fe6e 	bl	800934c <put_fat.part.8>
		if (res != FR_OK) return res;
 8009670:	bb48      	cbnz	r0, 80096c6 <remove_chain+0x86>
 8009672:	6838      	ldr	r0, [r7, #0]
 8009674:	e016      	b.n	80096a4 <remove_chain+0x64>
 8009676:	4630      	mov	r0, r6
 8009678:	e014      	b.n	80096a4 <remove_chain+0x64>
 800967a:	4629      	mov	r1, r5
 800967c:	2200      	movs	r2, #0
 800967e:	4630      	mov	r0, r6
 8009680:	f7ff fe64 	bl	800934c <put_fat.part.8>
			if (res != FR_OK) return res;
 8009684:	b9f8      	cbnz	r0, 80096c6 <remove_chain+0x86>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009686:	69b2      	ldr	r2, [r6, #24]
 8009688:	6973      	ldr	r3, [r6, #20]
 800968a:	1e91      	subs	r1, r2, #2
 800968c:	428b      	cmp	r3, r1
 800968e:	d205      	bcs.n	800969c <remove_chain+0x5c>
			fs->fsi_flag |= 1;
 8009690:	7931      	ldrb	r1, [r6, #4]
			fs->free_clst++;
 8009692:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 8009694:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 8009698:	6173      	str	r3, [r6, #20]
			fs->fsi_flag |= 1;
 800969a:	7131      	strb	r1, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800969c:	4294      	cmp	r4, r2
 800969e:	d213      	bcs.n	80096c8 <remove_chain+0x88>
 80096a0:	6838      	ldr	r0, [r7, #0]
 80096a2:	4625      	mov	r5, r4
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7ff fee9 	bl	800947c <get_fat.isra.9>
		if (nxt == 0) break;				/* Empty cluster? */
 80096aa:	4604      	mov	r4, r0
 80096ac:	b160      	cbz	r0, 80096c8 <remove_chain+0x88>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80096ae:	2801      	cmp	r0, #1
 80096b0:	d0cf      	beq.n	8009652 <remove_chain+0x12>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	d006      	beq.n	80096c4 <remove_chain+0x84>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80096b6:	2d01      	cmp	r5, #1
 80096b8:	d9cb      	bls.n	8009652 <remove_chain+0x12>
 80096ba:	69b3      	ldr	r3, [r6, #24]
 80096bc:	429d      	cmp	r5, r3
 80096be:	d3dc      	bcc.n	800967a <remove_chain+0x3a>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80096c0:	2002      	movs	r0, #2
 80096c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80096c4:	2001      	movs	r0, #1
}
 80096c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 80096c8:	2000      	movs	r0, #0
 80096ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096cc <dir_next>:
{
 80096cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80096d0:	69c3      	ldr	r3, [r0, #28]
 80096d2:	b913      	cbnz	r3, 80096da <dir_next+0xe>
 80096d4:	2004      	movs	r0, #4
 80096d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80096da:	6945      	ldr	r5, [r0, #20]
 80096dc:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80096de:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80096e2:	d2f7      	bcs.n	80096d4 <dir_next+0x8>
	FATFS *fs = dp->obj.fs;
 80096e4:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80096e6:	89ba      	ldrh	r2, [r7, #12]
 80096e8:	4604      	mov	r4, r0
 80096ea:	fbb5 f0f2 	udiv	r0, r5, r2
 80096ee:	fb02 5210 	mls	r2, r2, r0, r5
 80096f2:	460e      	mov	r6, r1
 80096f4:	bb52      	cbnz	r2, 800974c <dir_next+0x80>
		if (!dp->clust) {		/* Static table */
 80096f6:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80096f8:	3301      	adds	r3, #1
 80096fa:	61e3      	str	r3, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80096fc:	b371      	cbz	r1, 800975c <dir_next+0x90>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80096fe:	897b      	ldrh	r3, [r7, #10]
 8009700:	3b01      	subs	r3, #1
 8009702:	4203      	tst	r3, r0
 8009704:	d122      	bne.n	800974c <dir_next+0x80>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009706:	4638      	mov	r0, r7
 8009708:	f7ff feb8 	bl	800947c <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800970c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800970e:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009710:	d92d      	bls.n	800976e <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009712:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009716:	d03c      	beq.n	8009792 <dir_next+0xc6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	4298      	cmp	r0, r3
 800971c:	d22a      	bcs.n	8009774 <dir_next+0xa8>
 800971e:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8009722:	f1a0 0a02 	sub.w	sl, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009726:	3b02      	subs	r3, #2
 8009728:	459a      	cmp	sl, r3
	return clst * fs->csize + fs->database;
 800972a:	bf3c      	itt	cc
 800972c:	897b      	ldrhcc	r3, [r7, #10]
 800972e:	6afa      	ldrcc	r2, [r7, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8009730:	f8c4 8018 	str.w	r8, [r4, #24]
	return clst * fs->csize + fs->database;
 8009734:	bf38      	it	cc
 8009736:	fb0a 2303 	mlacc	r3, sl, r3, r2
 800973a:	89ba      	ldrh	r2, [r7, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800973c:	bf28      	it	cs
 800973e:	2300      	movcs	r3, #0
				dp->sect = clust2sect(fs, clst);
 8009740:	61e3      	str	r3, [r4, #28]
 8009742:	fbb5 f3f2 	udiv	r3, r5, r2
 8009746:	fb02 5213 	mls	r2, r2, r3, r5
 800974a:	e001      	b.n	8009750 <dir_next+0x84>
 800974c:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009750:	4432      	add	r2, r6
 8009752:	6222      	str	r2, [r4, #32]
	dp->dptr = ofs;						/* Current entry */
 8009754:	6165      	str	r5, [r4, #20]
	return FR_OK;
 8009756:	2000      	movs	r0, #0
 8009758:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800975c:	893b      	ldrh	r3, [r7, #8]
 800975e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8009762:	d8f3      	bhi.n	800974c <dir_next+0x80>
				dp->sect = 0; return FR_NO_FILE;
 8009764:	2300      	movs	r3, #0
 8009766:	61e3      	str	r3, [r4, #28]
 8009768:	2004      	movs	r0, #4
 800976a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800976e:	2002      	movs	r0, #2
 8009770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (!stretch) {								/* If no stretch, report EOT */
 8009774:	2e00      	cmp	r6, #0
 8009776:	d0f5      	beq.n	8009764 <dir_next+0x98>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009778:	69a1      	ldr	r1, [r4, #24]
 800977a:	4620      	mov	r0, r4
 800977c:	f7ff fef6 	bl	800956c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009780:	4680      	mov	r8, r0
 8009782:	b948      	cbnz	r0, 8009798 <dir_next+0xcc>
 8009784:	2007      	movs	r0, #7
}
 8009786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	4638      	mov	r0, r7
 800978c:	f7ff fb2c 	bl	8008de8 <sync_window.part.6>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009790:	b150      	cbz	r0, 80097a8 <dir_next+0xdc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009792:	2001      	movs	r0, #1
 8009794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009798:	2801      	cmp	r0, #1
 800979a:	d0e8      	beq.n	800976e <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800979c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80097a0:	d0f7      	beq.n	8009792 <dir_next+0xc6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1f0      	bne.n	800978a <dir_next+0xbe>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80097a8:	f107 0634 	add.w	r6, r7, #52	; 0x34
 80097ac:	f8b7 900c 	ldrh.w	r9, [r7, #12]
	BYTE *d = (BYTE*)dst;
 80097b0:	4633      	mov	r3, r6
		*d++ = (BYTE)val;
 80097b2:	2200      	movs	r2, #0
	} while (--cnt);
 80097b4:	f1b9 0901 	subs.w	r9, r9, #1
		*d++ = (BYTE)val;
 80097b8:	f803 2b01 	strb.w	r2, [r3], #1
	} while (--cnt);
 80097bc:	d1fa      	bne.n	80097b4 <dir_next+0xe8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	897a      	ldrh	r2, [r7, #10]
 80097c2:	3b02      	subs	r3, #2
	clst -= 2;
 80097c4:	f1a8 0a02 	sub.w	sl, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80097c8:	459a      	cmp	sl, r3
	return clst * fs->csize + fs->database;
 80097ca:	bf36      	itet	cc
 80097cc:	6afb      	ldrcc	r3, [r7, #44]	; 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80097ce:	464b      	movcs	r3, r9
	return clst * fs->csize + fs->database;
 80097d0:	fb0a 3302 	mlacc	r3, sl, r2, r3
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80097d4:	633b      	str	r3, [r7, #48]	; 0x30
						fs->wflag = 1;
 80097d6:	f04f 0b01 	mov.w	fp, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80097da:	e00b      	b.n	80097f4 <dir_next+0x128>
						fs->wflag = 1;
 80097dc:	f887 b003 	strb.w	fp, [r7, #3]
 80097e0:	f7ff fb02 	bl	8008de8 <sync_window.part.6>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d1d4      	bne.n	8009792 <dir_next+0xc6>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	897a      	ldrh	r2, [r7, #10]
 80097ec:	3301      	adds	r3, #1
 80097ee:	f109 0901 	add.w	r9, r9, #1
 80097f2:	633b      	str	r3, [r7, #48]	; 0x30
 80097f4:	4591      	cmp	r9, r2
 80097f6:	4638      	mov	r0, r7
 80097f8:	d3f0      	bcc.n	80097dc <dir_next+0x110>
					fs->winsect -= n;							/* Restore window offset */
 80097fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	eba2 0209 	sub.w	r2, r2, r9
 8009802:	633a      	str	r2, [r7, #48]	; 0x30
 8009804:	e78f      	b.n	8009726 <dir_next+0x5a>
 8009806:	bf00      	nop

08009808 <dir_sdi.constprop.12>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009808:	6881      	ldr	r1, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800980a:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 800980c:	2300      	movs	r3, #0
 800980e:	6143      	str	r3, [r0, #20]
	FATFS *fs = dp->obj.fs;
 8009810:	6805      	ldr	r5, [r0, #0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009812:	b929      	cbnz	r1, 8009820 <dir_sdi.constprop.12+0x18>
 8009814:	782b      	ldrb	r3, [r5, #0]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d917      	bls.n	800984a <dir_sdi.constprop.12+0x42>
		clst = fs->dirbase;
 800981a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800981c:	b1ab      	cbz	r3, 800984a <dir_sdi.constprop.12+0x42>
 800981e:	4619      	mov	r1, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009820:	896a      	ldrh	r2, [r5, #10]
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	fb02 f303 	mul.w	r3, r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8009828:	b9e3      	cbnz	r3, 8009864 <dir_sdi.constprop.12+0x5c>
 800982a:	4604      	mov	r4, r0
 800982c:	4628      	mov	r0, r5
 800982e:	e005      	b.n	800983c <dir_sdi.constprop.12+0x34>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009830:	2801      	cmp	r0, #1
 8009832:	d90c      	bls.n	800984e <dir_sdi.constprop.12+0x46>
 8009834:	69aa      	ldr	r2, [r5, #24]
 8009836:	4290      	cmp	r0, r2
 8009838:	d209      	bcs.n	800984e <dir_sdi.constprop.12+0x46>
 800983a:	6820      	ldr	r0, [r4, #0]
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800983c:	f7ff fe1e 	bl	800947c <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009840:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009842:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009844:	d1f4      	bne.n	8009830 <dir_sdi.constprop.12+0x28>
 8009846:	2001      	movs	r0, #1
}
 8009848:	bd38      	pop	{r3, r4, r5, pc}
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800984a:	892b      	ldrh	r3, [r5, #8]
 800984c:	b90b      	cbnz	r3, 8009852 <dir_sdi.constprop.12+0x4a>
 800984e:	2002      	movs	r0, #2
 8009850:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8009852:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009854:	61c2      	str	r2, [r0, #28]
	dp->clust = clst;					/* Current cluster# */
 8009856:	6181      	str	r1, [r0, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009858:	2a00      	cmp	r2, #0
 800985a:	d0f8      	beq.n	800984e <dir_sdi.constprop.12+0x46>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800985c:	3534      	adds	r5, #52	; 0x34
 800985e:	6205      	str	r5, [r0, #32]
	return FR_OK;
 8009860:	2000      	movs	r0, #0
 8009862:	bd38      	pop	{r3, r4, r5, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009864:	69ab      	ldr	r3, [r5, #24]
	clst -= 2;
 8009866:	1e8c      	subs	r4, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009868:	3b02      	subs	r3, #2
 800986a:	429c      	cmp	r4, r3
	return clst * fs->csize + fs->database;
 800986c:	bf36      	itet	cc
 800986e:	6aeb      	ldrcc	r3, [r5, #44]	; 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009870:	2200      	movcs	r2, #0
	return clst * fs->csize + fs->database;
 8009872:	fb04 3202 	mlacc	r2, r4, r2, r3
		dp->sect = clust2sect(fs, clst);
 8009876:	61c2      	str	r2, [r0, #28]
 8009878:	e7ed      	b.n	8009856 <dir_sdi.constprop.12+0x4e>
 800987a:	bf00      	nop

0800987c <dir_register>:
{
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8009880:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8009882:	f7ff ffc1 	bl	8009808 <dir_sdi.constprop.12>
	if (res == FR_OK) {
 8009886:	4604      	mov	r4, r0
 8009888:	b148      	cbz	r0, 800989e <dir_register+0x22>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800988a:	2c04      	cmp	r4, #4
 800988c:	bf08      	it	eq
 800988e:	2407      	moveq	r4, #7
}
 8009890:	4620      	mov	r0, r4
 8009892:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_next(dp, 1);
 8009894:	f7ff ff1a 	bl	80096cc <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009898:	4604      	mov	r4, r0
 800989a:	2800      	cmp	r0, #0
 800989c:	d1f5      	bne.n	800988a <dir_register+0xe>
			res = move_window(fs, dp->sect);
 800989e:	69e9      	ldr	r1, [r5, #28]
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7ff fac7 	bl	8008e34 <move_window>
			if (res != FR_OK) break;
 80098a6:	4604      	mov	r4, r0
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d1ee      	bne.n	800988a <dir_register+0xe>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80098ac:	6a2b      	ldr	r3, [r5, #32]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2be5      	cmp	r3, #229	; 0xe5
 80098b2:	d003      	beq.n	80098bc <dir_register+0x40>
			res = dir_next(dp, 1);
 80098b4:	2101      	movs	r1, #1
 80098b6:	4628      	mov	r0, r5
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1eb      	bne.n	8009894 <dir_register+0x18>
		res = move_window(fs, dp->sect);
 80098bc:	69e9      	ldr	r1, [r5, #28]
 80098be:	4630      	mov	r0, r6
 80098c0:	f7ff fab8 	bl	8008e34 <move_window>
		if (res == FR_OK) {
 80098c4:	4604      	mov	r4, r0
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d1e2      	bne.n	8009890 <dir_register+0x14>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80098ca:	6a2b      	ldr	r3, [r5, #32]
		*d++ = (BYTE)val;
 80098cc:	4601      	mov	r1, r0
 80098ce:	f103 0220 	add.w	r2, r3, #32
 80098d2:	f803 1b01 	strb.w	r1, [r3], #1
	} while (--cnt);
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d1fb      	bne.n	80098d2 <dir_register+0x56>
 80098da:	6a28      	ldr	r0, [r5, #32]
 80098dc:	220b      	movs	r2, #11
 80098de:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80098e2:	f7ff fa77 	bl	8008dd4 <mem_cpy.part.0>
			fs->wflag = 1;
 80098e6:	2301      	movs	r3, #1
 80098e8:	70f3      	strb	r3, [r6, #3]
}
 80098ea:	4620      	mov	r0, r4
 80098ec:	bd70      	pop	{r4, r5, r6, pc}
 80098ee:	bf00      	nop

080098f0 <follow_path>:
{
 80098f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 80098f4:	f8d0 8000 	ldr.w	r8, [r0]
{
 80098f8:	4682      	mov	sl, r0
 80098fa:	460f      	mov	r7, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80098fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009900:	2b2f      	cmp	r3, #47	; 0x2f
 8009902:	d0fa      	beq.n	80098fa <follow_path+0xa>
 8009904:	2b5c      	cmp	r3, #92	; 0x5c
 8009906:	d0f8      	beq.n	80098fa <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8009908:	2300      	movs	r3, #0
 800990a:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800990e:	783b      	ldrb	r3, [r7, #0]
 8009910:	2b1f      	cmp	r3, #31
 8009912:	f240 80c3 	bls.w	8009a9c <follow_path+0x1ac>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009916:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8009abc <follow_path+0x1cc>
 800991a:	f10a 0624 	add.w	r6, sl, #36	; 0x24
 800991e:	f10a 042f 	add.w	r4, sl, #47	; 0x2f
	BYTE *d = (BYTE*)dst;
 8009922:	4633      	mov	r3, r6
		*d++ = (BYTE)val;
 8009924:	2220      	movs	r2, #32
 8009926:	f803 2b01 	strb.w	r2, [r3], #1
	} while (--cnt);
 800992a:	42a3      	cmp	r3, r4
 800992c:	d1fb      	bne.n	8009926 <follow_path+0x36>
 800992e:	2500      	movs	r5, #0
 8009930:	4628      	mov	r0, r5
 8009932:	f107 3eff 	add.w	lr, r7, #4294967295
 8009936:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 800993a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800993e:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8009940:	f100 0001 	add.w	r0, r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009944:	d925      	bls.n	8009992 <follow_path+0xa2>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009946:	2b2f      	cmp	r3, #47	; 0x2f
 8009948:	d02f      	beq.n	80099aa <follow_path+0xba>
 800994a:	2b5c      	cmp	r3, #92	; 0x5c
 800994c:	d02d      	beq.n	80099aa <follow_path+0xba>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800994e:	2b2e      	cmp	r3, #46	; 0x2e
 8009950:	d024      	beq.n	800999c <follow_path+0xac>
 8009952:	45ac      	cmp	ip, r5
 8009954:	d91f      	bls.n	8009996 <follow_path+0xa6>
		if (c >= 0x80) {				/* Extended character? */
 8009956:	061a      	lsls	r2, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009958:	bf44      	itt	mi
 800995a:	3b80      	submi	r3, #128	; 0x80
 800995c:	f819 3003 	ldrbmi.w	r3, [r9, r3]
	while (*str && *str != chr) str++;
 8009960:	2b22      	cmp	r3, #34	; 0x22
 8009962:	d018      	beq.n	8009996 <follow_path+0xa6>
 8009964:	4954      	ldr	r1, [pc, #336]	; (8009ab8 <follow_path+0x1c8>)
 8009966:	222a      	movs	r2, #42	; 0x2a
 8009968:	4293      	cmp	r3, r2
 800996a:	d014      	beq.n	8009996 <follow_path+0xa6>
 800996c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009970:	2a00      	cmp	r2, #0
 8009972:	d1f9      	bne.n	8009968 <follow_path+0x78>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009974:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009978:	2a19      	cmp	r2, #25
 800997a:	d801      	bhi.n	8009980 <follow_path+0x90>
 800997c:	3b20      	subs	r3, #32
 800997e:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8009980:	5573      	strb	r3, [r6, r5]
		c = (BYTE)p[si++];
 8009982:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009986:	2b20      	cmp	r3, #32
			sfn[i++] = c;
 8009988:	f105 0501 	add.w	r5, r5, #1
		c = (BYTE)p[si++];
 800998c:	f100 0001 	add.w	r0, r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009990:	d8d9      	bhi.n	8009946 <follow_path+0x56>
 8009992:	4407      	add	r7, r0
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009994:	b99d      	cbnz	r5, 80099be <follow_path+0xce>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009996:	2006      	movs	r0, #6
 8009998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999c:	f1bc 0f0b 	cmp.w	ip, #11
 80099a0:	d0f9      	beq.n	8009996 <follow_path+0xa6>
			i = 8; ni = 11;				/* Goto extension */
 80099a2:	2508      	movs	r5, #8
 80099a4:	f04f 0c0b 	mov.w	ip, #11
 80099a8:	e7c7      	b.n	800993a <follow_path+0x4a>
 80099aa:	4438      	add	r0, r7
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80099ac:	4607      	mov	r7, r0
 80099ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b2:	2a2f      	cmp	r2, #47	; 0x2f
 80099b4:	d0fa      	beq.n	80099ac <follow_path+0xbc>
 80099b6:	2a5c      	cmp	r2, #92	; 0x5c
 80099b8:	d0f8      	beq.n	80099ac <follow_path+0xbc>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80099ba:	2d00      	cmp	r5, #0
 80099bc:	d0eb      	beq.n	8009996 <follow_path+0xa6>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80099be:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 80099c2:	f8da 5000 	ldr.w	r5, [sl]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80099c6:	2ae5      	cmp	r2, #229	; 0xe5
 80099c8:	bf04      	itt	eq
 80099ca:	2205      	moveq	r2, #5
 80099cc:	f88a 2024 	strbeq.w	r2, [sl, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	bf8c      	ite	hi
 80099d4:	2300      	movhi	r3, #0
 80099d6:	2304      	movls	r3, #4
 80099d8:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80099dc:	4650      	mov	r0, sl
 80099de:	f7ff ff13 	bl	8009808 <dir_sdi.constprop.12>
	if (res != FR_OK) return res;
 80099e2:	bb60      	cbnz	r0, 8009a3e <follow_path+0x14e>
		res = move_window(fs, dp->sect);
 80099e4:	f8da 101c 	ldr.w	r1, [sl, #28]
 80099e8:	4628      	mov	r0, r5
 80099ea:	f7ff fa23 	bl	8008e34 <move_window>
		if (res != FR_OK) break;
 80099ee:	bb30      	cbnz	r0, 8009a3e <follow_path+0x14e>
		c = dp->dir[DIR_Name];
 80099f0:	f8da 2020 	ldr.w	r2, [sl, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80099f4:	7813      	ldrb	r3, [r2, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d042      	beq.n	8009a80 <follow_path+0x190>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80099fa:	f892 e00b 	ldrb.w	lr, [r2, #11]
 80099fe:	f00e 033f 	and.w	r3, lr, #63	; 0x3f
 8009a02:	f88a 3006 	strb.w	r3, [sl, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009a06:	7ad3      	ldrb	r3, [r2, #11]
 8009a08:	0719      	lsls	r1, r3, #28
 8009a0a:	d412      	bmi.n	8009a32 <follow_path+0x142>
		r = *d++ - *s++;
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	f89a c024 	ldrb.w	ip, [sl, #36]	; 0x24
 8009a12:	f811 3b0b 	ldrb.w	r3, [r1], #11
 8009a16:	3201      	adds	r2, #1
 8009a18:	eba3 030c 	sub.w	r3, r3, ip
 8009a1c:	46b4      	mov	ip, r6
	} while (--cnt && r == 0);
 8009a1e:	b943      	cbnz	r3, 8009a32 <follow_path+0x142>
		r = *d++ - *s++;
 8009a20:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009a24:	f81c bf01 	ldrb.w	fp, [ip, #1]!
	} while (--cnt && r == 0);
 8009a28:	4291      	cmp	r1, r2
		r = *d++ - *s++;
 8009a2a:	eba3 030b 	sub.w	r3, r3, fp
	} while (--cnt && r == 0);
 8009a2e:	d1f6      	bne.n	8009a1e <follow_path+0x12e>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009a30:	b14b      	cbz	r3, 8009a46 <follow_path+0x156>
		res = dir_next(dp, 0);	/* Next entry */
 8009a32:	2100      	movs	r1, #0
 8009a34:	4650      	mov	r0, sl
 8009a36:	f7ff fe49 	bl	80096cc <dir_next>
	} while (res == FR_OK);
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d0d2      	beq.n	80099e4 <follow_path+0xf4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009a3e:	2804      	cmp	r0, #4
 8009a40:	d01e      	beq.n	8009a80 <follow_path+0x190>
}
 8009a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009a46:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
 8009a4a:	075b      	lsls	r3, r3, #29
 8009a4c:	d42e      	bmi.n	8009aac <follow_path+0x1bc>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009a4e:	f01e 0f10 	tst.w	lr, #16
 8009a52:	d019      	beq.n	8009a88 <follow_path+0x198>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009a54:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 8009a58:	f8da 0014 	ldr.w	r0, [sl, #20]
 8009a5c:	fbb0 f2f1 	udiv	r2, r0, r1
 8009a60:	f108 0334 	add.w	r3, r8, #52	; 0x34
 8009a64:	fb01 0212 	mls	r2, r1, r2, r0
 8009a68:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 8009a6a:	f898 1000 	ldrb.w	r1, [r8]
	rv = rv << 8 | ptr[0];
 8009a6e:	7ed8      	ldrb	r0, [r3, #27]
 8009a70:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8009a72:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8009a74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8009a78:	d009      	beq.n	8009a8e <follow_path+0x19e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009a7a:	f8ca 2008 	str.w	r2, [sl, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009a7e:	e750      	b.n	8009922 <follow_path+0x32>
			ns = dp->fn[NSFLAG];
 8009a80:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009a84:	075a      	lsls	r2, r3, #29
 8009a86:	d413      	bmi.n	8009ab0 <follow_path+0x1c0>
 8009a88:	2005      	movs	r0, #5
 8009a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rv = rv << 8 | ptr[0];
 8009a8e:	7d59      	ldrb	r1, [r3, #21]
 8009a90:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009a92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009a96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009a9a:	e7ee      	b.n	8009a7a <follow_path+0x18a>
		dp->fn[NSFLAG] = NS_NONAME;
 8009a9c:	2380      	movs	r3, #128	; 0x80
 8009a9e:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009aa2:	4650      	mov	r0, sl
}
 8009aa4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8009aa8:	f7ff beae 	b.w	8009808 <dir_sdi.constprop.12>
 8009aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab0:	2004      	movs	r0, #4
 8009ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab6:	bf00      	nop
 8009ab8:	08027375 	.word	0x08027375
 8009abc:	080272f4 	.word	0x080272f4

08009ac0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009ac0:	b530      	push	{r4, r5, lr}
 8009ac2:	b085      	sub	sp, #20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009ac4:	ab04      	add	r3, sp, #16
{
 8009ac6:	9001      	str	r0, [sp, #4]
	const TCHAR *rp = path;
 8009ac8:	f843 1d04 	str.w	r1, [r3, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009acc:	4618      	mov	r0, r3
{
 8009ace:	9100      	str	r1, [sp, #0]
 8009ad0:	4615      	mov	r5, r2
	vol = get_ldnumber(&rp);
 8009ad2:	f7ff f93b 	bl	8008d4c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ad6:	1e01      	subs	r1, r0, #0
 8009ad8:	db1a      	blt.n	8009b10 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009ada:	4c14      	ldr	r4, [pc, #80]	; (8009b2c <f_mount+0x6c>)
 8009adc:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]

	if (cfs) {
 8009ae0:	b163      	cbz	r3, 8009afc <f_mount+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009ae2:	4a13      	ldr	r2, [pc, #76]	; (8009b30 <f_mount+0x70>)
 8009ae4:	6810      	ldr	r0, [r2, #0]
 8009ae6:	4283      	cmp	r3, r0
 8009ae8:	bf04      	itt	eq
 8009aea:	2000      	moveq	r0, #0
 8009aec:	6010      	streq	r0, [r2, #0]
 8009aee:	6910      	ldr	r0, [r2, #16]
 8009af0:	4283      	cmp	r3, r0
 8009af2:	bf04      	itt	eq
 8009af4:	2000      	moveq	r0, #0
 8009af6:	6110      	streq	r0, [r2, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009afc:	9a01      	ldr	r2, [sp, #4]
 8009afe:	b18a      	cbz	r2, 8009b24 <f_mount+0x64>
		fs->fs_type = 0;				/* Clear new fs object */
 8009b00:	2000      	movs	r0, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b02:	2d01      	cmp	r5, #1
		fs->fs_type = 0;				/* Clear new fs object */
 8009b04:	7010      	strb	r0, [r2, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8009b06:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b0a:	d004      	beq.n	8009b16 <f_mount+0x56>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8009b0c:	b005      	add	sp, #20
 8009b0e:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b10:	200b      	movs	r0, #11
}
 8009b12:	b005      	add	sp, #20
 8009b14:	bd30      	pop	{r4, r5, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009b16:	4602      	mov	r2, r0
 8009b18:	a901      	add	r1, sp, #4
 8009b1a:	4668      	mov	r0, sp
 8009b1c:	f7ff fa54 	bl	8008fc8 <find_volume>
}
 8009b20:	b005      	add	sp, #20
 8009b22:	bd30      	pop	{r4, r5, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 8009b24:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b28:	4610      	mov	r0, r2
 8009b2a:	e7ef      	b.n	8009b0c <f_mount+0x4c>
 8009b2c:	20001160 	.word	0x20001160
 8009b30:	20001164 	.word	0x20001164

08009b34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	b090      	sub	sp, #64	; 0x40
 8009b3a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009b3c:	b180      	cbz	r0, 8009b60 <f_open+0x2c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b3e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
 8009b42:	4605      	mov	r5, r0
 8009b44:	4616      	mov	r6, r2
	res = find_volume(&path, &fs, mode);
 8009b46:	a903      	add	r1, sp, #12
 8009b48:	463a      	mov	r2, r7
 8009b4a:	a801      	add	r0, sp, #4
 8009b4c:	f7ff fa3c 	bl	8008fc8 <find_volume>
	if (res == FR_OK) {
 8009b50:	4604      	mov	r4, r0
 8009b52:	b150      	cbz	r0, 8009b6a <f_open+0x36>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009b54:	2300      	movs	r3, #0
 8009b56:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8009b58:	4620      	mov	r0, r4
 8009b5a:	b010      	add	sp, #64	; 0x40
 8009b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fp) return FR_INVALID_OBJECT;
 8009b60:	2409      	movs	r4, #9
}
 8009b62:	4620      	mov	r0, r4
 8009b64:	b010      	add	sp, #64	; 0x40
 8009b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dj.obj.fs = fs;
 8009b6a:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b6c:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8009b6e:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b70:	a804      	add	r0, sp, #16
 8009b72:	f7ff febd 	bl	80098f0 <follow_path>
		if (res == FR_OK) {
 8009b76:	b9d0      	cbnz	r0, 8009bae <f_open+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b78:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f2c0 80ed 	blt.w	8009d5c <f_open+0x228>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b82:	f037 0801 	bics.w	r8, r7, #1
 8009b86:	bf14      	ite	ne
 8009b88:	2101      	movne	r1, #1
 8009b8a:	2100      	moveq	r1, #0
 8009b8c:	a804      	add	r0, sp, #16
 8009b8e:	f7ff f861 	bl	8008c54 <chk_lock>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009b92:	f016 0f1c 	tst.w	r6, #28
 8009b96:	d05e      	beq.n	8009c56 <f_open+0x122>
			if (res != FR_OK) {					/* No file, create new */
 8009b98:	b960      	cbnz	r0, 8009bb4 <f_open+0x80>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009b9a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009b9e:	f013 0f11 	tst.w	r3, #17
 8009ba2:	d162      	bne.n	8009c6a <f_open+0x136>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009ba4:	0776      	lsls	r6, r6, #29
 8009ba6:	f140 80cb 	bpl.w	8009d40 <f_open+0x20c>
 8009baa:	2408      	movs	r4, #8
 8009bac:	e7d2      	b.n	8009b54 <f_open+0x20>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009bae:	f016 0f1c 	tst.w	r6, #28
 8009bb2:	d04e      	beq.n	8009c52 <f_open+0x11e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009bb4:	2804      	cmp	r0, #4
 8009bb6:	d14c      	bne.n	8009c52 <f_open+0x11e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009bb8:	4b7e      	ldr	r3, [pc, #504]	; (8009db4 <f_open+0x280>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	f000 80b8 	beq.w	8009d32 <f_open+0x1fe>
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 80b4 	beq.w	8009d32 <f_open+0x1fe>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009bca:	2412      	movs	r4, #18
 8009bcc:	e7c2      	b.n	8009b54 <f_open+0x20>
				dw = GET_FATTIME();
 8009bce:	f014 fceb 	bl	801e5a8 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009bd4:	9b03      	ldr	r3, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bd6:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8009bda:	f3c0 4107 	ubfx	r1, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8009bde:	fa5f fe80 	uxtb.w	lr, r0
	*ptr++ = (BYTE)val;
 8009be2:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8009be4:	73d6      	strb	r6, [r2, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8009be6:	7411      	strb	r1, [r2, #16]
	*ptr++ = (BYTE)val;
 8009be8:	7450      	strb	r0, [r2, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bea:	f882 e00e 	strb.w	lr, [r2, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8009bf0:	75d6      	strb	r6, [r2, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bf2:	7611      	strb	r1, [r2, #24]
	*ptr++ = (BYTE)val;
 8009bf4:	7650      	strb	r0, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bf6:	f882 e016 	strb.w	lr, [r2, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bfc:	2120      	movs	r1, #32
 8009bfe:	72d1      	strb	r1, [r2, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8009c02:	7819      	ldrb	r1, [r3, #0]
	rv = rv << 8 | ptr[0];
 8009c04:	7ed0      	ldrb	r0, [r2, #27]
 8009c06:	7e96      	ldrb	r6, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 8009c08:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8009c0a:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8009c0e:	f000 80ca 	beq.w	8009da6 <f_open+0x272>
	*ptr++ = (BYTE)val; val >>= 8;
 8009c12:	2100      	movs	r1, #0
 8009c14:	7691      	strb	r1, [r2, #26]
	*ptr++ = (BYTE)val;
 8009c16:	76d1      	strb	r1, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8009c18:	7818      	ldrb	r0, [r3, #0]
 8009c1a:	2803      	cmp	r0, #3
	*ptr++ = (BYTE)val; val >>= 8;
 8009c1c:	bf04      	itt	eq
 8009c1e:	7511      	strbeq	r1, [r2, #20]
	*ptr++ = (BYTE)val;
 8009c20:	7551      	strbeq	r1, [r2, #21]
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c22:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8009c24:	2200      	movs	r2, #0
					fs->wflag = 1;
 8009c26:	2001      	movs	r0, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8009c28:	770a      	strb	r2, [r1, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c2a:	774a      	strb	r2, [r1, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c2c:	778a      	strb	r2, [r1, #30]
	*ptr++ = (BYTE)val;
 8009c2e:	77ca      	strb	r2, [r1, #31]
					fs->wflag = 1;
 8009c30:	70d8      	strb	r0, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8009c32:	b1fe      	cbz	r6, 8009c74 <f_open+0x140>
						res = remove_chain(&dj.obj, cl, 0);
 8009c34:	4631      	mov	r1, r6
 8009c36:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8009c38:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8009c3c:	f7ff fd00 	bl	8009640 <remove_chain>
						if (res == FR_OK) {
 8009c40:	b938      	cbnz	r0, 8009c52 <f_open+0x11e>
							res = move_window(fs, dw);
 8009c42:	4641      	mov	r1, r8
 8009c44:	9803      	ldr	r0, [sp, #12]
 8009c46:	f7ff f8f5 	bl	8008e34 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	3e01      	subs	r6, #1
 8009c4e:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8009c50:	b180      	cbz	r0, 8009c74 <f_open+0x140>
 8009c52:	4604      	mov	r4, r0
 8009c54:	e77e      	b.n	8009b54 <f_open+0x20>
			if (res == FR_OK) {					/* Following succeeded */
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d1fb      	bne.n	8009c52 <f_open+0x11e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009c5a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009c5e:	06d9      	lsls	r1, r3, #27
 8009c60:	d47e      	bmi.n	8009d60 <f_open+0x22c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009c62:	07b2      	lsls	r2, r6, #30
 8009c64:	d503      	bpl.n	8009c6e <f_open+0x13a>
 8009c66:	07db      	lsls	r3, r3, #31
 8009c68:	d501      	bpl.n	8009c6e <f_open+0x13a>
					res = FR_DENIED;
 8009c6a:	2407      	movs	r4, #7
 8009c6c:	e772      	b.n	8009b54 <f_open+0x20>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009c6e:	0730      	lsls	r0, r6, #28
 8009c70:	9b03      	ldr	r3, [sp, #12]
 8009c72:	d503      	bpl.n	8009c7c <f_open+0x148>
				mode |= FA_MODIFIED;
 8009c74:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8009c78:	f027 0801 	bic.w	r8, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			fp->dir_ptr = dj.dir;
 8009c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009c80:	626a      	str	r2, [r5, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c82:	f118 0100 	adds.w	r1, r8, #0
 8009c86:	bf18      	it	ne
 8009c88:	2101      	movne	r1, #1
 8009c8a:	a804      	add	r0, sp, #16
			fp->dir_ptr = dj.dir;
 8009c8c:	62ab      	str	r3, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c8e:	f7ff f815 	bl	8008cbc <inc_lock>
 8009c92:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009c94:	b908      	cbnz	r0, 8009c9a <f_open+0x166>
 8009c96:	2402      	movs	r4, #2
 8009c98:	e75c      	b.n	8009b54 <f_open+0x20>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009c9a:	9803      	ldr	r0, [sp, #12]
 8009c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8009c9e:	7801      	ldrb	r1, [r0, #0]
	rv = rv << 8 | ptr[0];
 8009ca0:	7ede      	ldrb	r6, [r3, #27]
 8009ca2:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8009ca4:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8009ca6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8009caa:	d050      	beq.n	8009d4e <f_open+0x21a>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009cac:	60aa      	str	r2, [r5, #8]
	rv = rv << 8 | ptr[2];
 8009cae:	8bd9      	ldrh	r1, [r3, #30]
	rv = rv << 8 | ptr[1];
 8009cb0:	7f5a      	ldrb	r2, [r3, #29]
	rv = rv << 8 | ptr[0];
 8009cb2:	7f1b      	ldrb	r3, [r3, #28]
			fp->obj.id = fs->id;
 8009cb4:	f8b0 e006 	ldrh.w	lr, [r0, #6]
 8009cb8:	f8a5 e004 	strh.w	lr, [r5, #4]
	rv = rv << 8 | ptr[1];
 8009cbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8009cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009cc4:	f105 0630 	add.w	r6, r5, #48	; 0x30
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f505 5181 	add.w	r1, r5, #4128	; 0x1020
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009cce:	60eb      	str	r3, [r5, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009cd0:	6028      	str	r0, [r5, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009cd2:	62ea      	str	r2, [r5, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 8009cd4:	756a      	strb	r2, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009cd6:	622a      	str	r2, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009cd8:	61aa      	str	r2, [r5, #24]
			fp->flag = mode;		/* Set file access mode */
 8009cda:	752f      	strb	r7, [r5, #20]
	BYTE *d = (BYTE*)dst;
 8009cdc:	4633      	mov	r3, r6
 8009cde:	3110      	adds	r1, #16
		*d++ = (BYTE)val;
 8009ce0:	f803 2b01 	strb.w	r2, [r3], #1
	} while (--cnt);
 8009ce4:	428b      	cmp	r3, r1
 8009ce6:	d1fb      	bne.n	8009ce0 <f_open+0x1ac>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009ce8:	06b9      	lsls	r1, r7, #26
 8009cea:	f57f af35 	bpl.w	8009b58 <f_open+0x24>
 8009cee:	68ef      	ldr	r7, [r5, #12]
 8009cf0:	2f00      	cmp	r7, #0
 8009cf2:	f43f af31 	beq.w	8009b58 <f_open+0x24>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009cf6:	8983      	ldrh	r3, [r0, #12]
 8009cf8:	f8b0 800a 	ldrh.w	r8, [r0, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009cfc:	68a9      	ldr	r1, [r5, #8]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009cfe:	61af      	str	r7, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009d00:	fb03 f808 	mul.w	r8, r3, r8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009d04:	4547      	cmp	r7, r8
 8009d06:	d92f      	bls.n	8009d68 <f_open+0x234>
 8009d08:	eba7 0708 	sub.w	r7, r7, r8
 8009d0c:	e004      	b.n	8009d18 <f_open+0x1e4>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009d0e:	1c42      	adds	r2, r0, #1
 8009d10:	d00d      	beq.n	8009d2e <f_open+0x1fa>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009d12:	45b8      	cmp	r8, r7
 8009d14:	d226      	bcs.n	8009d64 <f_open+0x230>
 8009d16:	461f      	mov	r7, r3
					clst = get_fat(&fp->obj, clst);
 8009d18:	6828      	ldr	r0, [r5, #0]
 8009d1a:	f7ff fbaf 	bl	800947c <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 8009d1e:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8009d20:	4601      	mov	r1, r0
 8009d22:	eba7 0308 	sub.w	r3, r7, r8
					if (clst <= 1) res = FR_INT_ERR;
 8009d26:	d8f2      	bhi.n	8009d0e <f_open+0x1da>
 8009d28:	2402      	movs	r4, #2
				fp->clust = clst;
 8009d2a:	61e9      	str	r1, [r5, #28]
 8009d2c:	e712      	b.n	8009b54 <f_open+0x20>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009d2e:	2401      	movs	r4, #1
 8009d30:	e7fb      	b.n	8009d2a <f_open+0x1f6>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d32:	a804      	add	r0, sp, #16
 8009d34:	f7ff fda2 	bl	800987c <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009d38:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d188      	bne.n	8009c52 <f_open+0x11e>
 8009d40:	0738      	lsls	r0, r7, #28
 8009d42:	f53f af44 	bmi.w	8009bce <f_open+0x9a>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	f027 0801 	bic.w	r8, r7, #1
 8009d4c:	e796      	b.n	8009c7c <f_open+0x148>
	rv = rv << 8 | ptr[0];
 8009d4e:	7d5e      	ldrb	r6, [r3, #21]
 8009d50:	7d19      	ldrb	r1, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009d52:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8009d56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009d5a:	e7a7      	b.n	8009cac <f_open+0x178>
				res = FR_INVALID_NAME;
 8009d5c:	2406      	movs	r4, #6
 8009d5e:	e6f9      	b.n	8009b54 <f_open+0x20>
					res = FR_NO_FILE;
 8009d60:	2404      	movs	r4, #4
 8009d62:	e6f7      	b.n	8009b54 <f_open+0x20>
 8009d64:	9803      	ldr	r0, [sp, #12]
 8009d66:	8983      	ldrh	r3, [r0, #12]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009d68:	fbb7 fef3 	udiv	lr, r7, r3
 8009d6c:	fb03 731e 	mls	r3, r3, lr, r7
				fp->clust = clst;
 8009d70:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f43f aef0 	beq.w	8009b58 <f_open+0x24>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009d78:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8009d7a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009d7c:	3b02      	subs	r3, #2
 8009d7e:	4299      	cmp	r1, r3
 8009d80:	d289      	bcs.n	8009c96 <f_open+0x162>
	return clst * fs->csize + fs->database;
 8009d82:	8942      	ldrh	r2, [r0, #10]
 8009d84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009d86:	fb01 3202 	mla	r2, r1, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009d8a:	2a00      	cmp	r2, #0
 8009d8c:	d083      	beq.n	8009c96 <f_open+0x162>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009d8e:	4472      	add	r2, lr
 8009d90:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009d92:	7840      	ldrb	r0, [r0, #1]
 8009d94:	4631      	mov	r1, r6
 8009d96:	2301      	movs	r3, #1
 8009d98:	f7fe ff32 	bl	8008c00 <disk_read>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f43f aedb 	beq.w	8009b58 <f_open+0x24>
 8009da2:	2401      	movs	r4, #1
 8009da4:	e6d6      	b.n	8009b54 <f_open+0x20>
	rv = rv << 8 | ptr[0];
 8009da6:	7d50      	ldrb	r0, [r2, #21]
 8009da8:	7d11      	ldrb	r1, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009daa:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8009dae:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 8009db2:	e72e      	b.n	8009c12 <f_open+0xde>
 8009db4:	20001164 	.word	0x20001164

08009db8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	4698      	mov	r8, r3
 8009dbe:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009dc0:	2300      	movs	r3, #0
{
 8009dc2:	468a      	mov	sl, r1
	*bw = 0;	/* Clear write byte counter */
 8009dc4:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009dc8:	a903      	add	r1, sp, #12
{
 8009dca:	4617      	mov	r7, r2
 8009dcc:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009dce:	f7fe ffe1 	bl	8008d94 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	b928      	cbnz	r0, 8009de2 <f_write+0x2a>
 8009dd6:	7d65      	ldrb	r5, [r4, #21]
 8009dd8:	b91d      	cbnz	r5, 8009de2 <f_write+0x2a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009dda:	7d22      	ldrb	r2, [r4, #20]
 8009ddc:	0791      	lsls	r1, r2, #30
 8009dde:	d404      	bmi.n	8009dea <f_write+0x32>
 8009de0:	2507      	movs	r5, #7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8009de2:	4628      	mov	r0, r5
 8009de4:	b005      	add	sp, #20
 8009de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009dea:	69a3      	ldr	r3, [r4, #24]
 8009dec:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009dee:	bf28      	it	cs
 8009df0:	43df      	mvncs	r7, r3
	for ( ;  btw;							/* Repeat until all data written */
 8009df2:	2f00      	cmp	r7, #0
 8009df4:	f000 80a7 	beq.w	8009f46 <f_write+0x18e>
 8009df8:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8009dfc:	9201      	str	r2, [sp, #4]
 8009dfe:	e01a      	b.n	8009e36 <f_write+0x7e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009e00:	465a      	mov	r2, fp
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009e02:	1a12      	subs	r2, r2, r0
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009e04:	42ba      	cmp	r2, r7
 8009e06:	d86e      	bhi.n	8009ee6 <f_write+0x12e>
	if (cnt) {
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	f040 80de 	bne.w	8009fca <f_write+0x212>
		fp->flag |= FA_DIRTY;
 8009e0e:	7d21      	ldrb	r1, [r4, #20]
 8009e10:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8009e14:	7521      	strb	r1, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009e16:	68e0      	ldr	r0, [r4, #12]
 8009e18:	f8d8 1000 	ldr.w	r1, [r8]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	4298      	cmp	r0, r3
 8009e20:	bf38      	it	cc
 8009e22:	4618      	movcc	r0, r3
 8009e24:	4411      	add	r1, r2
 8009e26:	61a3      	str	r3, [r4, #24]
 8009e28:	60e0      	str	r0, [r4, #12]
 8009e2a:	4492      	add	sl, r2
 8009e2c:	f8c8 1000 	str.w	r1, [r8]
	for ( ;  btw;							/* Repeat until all data written */
 8009e30:	2f00      	cmp	r7, #0
 8009e32:	f000 8087 	beq.w	8009f44 <f_write+0x18c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009e36:	9903      	ldr	r1, [sp, #12]
 8009e38:	f8b1 b00c 	ldrh.w	fp, [r1, #12]
 8009e3c:	fbb3 f2fb 	udiv	r2, r3, fp
 8009e40:	fb0b 3012 	mls	r0, fp, r2, r3
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d1db      	bne.n	8009e00 <f_write+0x48>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009e48:	f8b1 900a 	ldrh.w	r9, [r1, #10]
 8009e4c:	f109 39ff 	add.w	r9, r9, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 8009e50:	ea19 0902 	ands.w	r9, r9, r2
 8009e54:	d10f      	bne.n	8009e76 <f_write+0xbe>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d15d      	bne.n	8009f16 <f_write+0x15e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009e5a:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	f000 80a1 	beq.w	8009fa4 <f_write+0x1ec>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009e62:	2801      	cmp	r0, #1
 8009e64:	f000 80a6 	beq.w	8009fb4 <f_write+0x1fc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d070      	beq.n	8009f4e <f_write+0x196>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009e6c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8009e6e:	61e0      	str	r0, [r4, #28]
 8009e70:	9903      	ldr	r1, [sp, #12]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009e72:	b903      	cbnz	r3, 8009e76 <f_write+0xbe>
 8009e74:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009e76:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	db6a      	blt.n	8009f54 <f_write+0x19c>
	clst -= 2;
 8009e7e:	69e6      	ldr	r6, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e80:	698b      	ldr	r3, [r1, #24]
	clst -= 2;
 8009e82:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e84:	3b02      	subs	r3, #2
 8009e86:	429e      	cmp	r6, r3
 8009e88:	f080 8094 	bcs.w	8009fb4 <f_write+0x1fc>
	return clst * fs->csize + fs->database;
 8009e8c:	894b      	ldrh	r3, [r1, #10]
 8009e8e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009e90:	fb06 2603 	mla	r6, r6, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e94:	2e00      	cmp	r6, #0
 8009e96:	f000 808d 	beq.w	8009fb4 <f_write+0x1fc>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e9a:	898a      	ldrh	r2, [r1, #12]
 8009e9c:	fbb7 fbf2 	udiv	fp, r7, r2
			sect += csect;
 8009ea0:	444e      	add	r6, r9
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009ea2:	f1bb 0f00 	cmp.w	fp, #0
 8009ea6:	d029      	beq.n	8009efc <f_write+0x144>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009ea8:	eb09 020b 	add.w	r2, r9, fp
 8009eac:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8009eae:	bf88      	it	hi
 8009eb0:	eba3 0b09 	subhi.w	fp, r3, r9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009eb4:	7848      	ldrb	r0, [r1, #1]
 8009eb6:	465b      	mov	r3, fp
 8009eb8:	4632      	mov	r2, r6
 8009eba:	4651      	mov	r1, sl
 8009ebc:	f7fe feae 	bl	8008c1c <disk_write>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d144      	bne.n	8009f4e <f_write+0x196>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009ec4:	6a21      	ldr	r1, [r4, #32]
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009ec6:	9b03      	ldr	r3, [sp, #12]
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009ec8:	1b89      	subs	r1, r1, r6
 8009eca:	458b      	cmp	fp, r1
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009ecc:	899a      	ldrh	r2, [r3, #12]
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009ece:	d905      	bls.n	8009edc <f_write+0x124>
	if (cnt) {
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	d153      	bne.n	8009f7c <f_write+0x1c4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ed4:	7d23      	ldrb	r3, [r4, #20]
 8009ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eda:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009edc:	fb02 f20b 	mul.w	r2, r2, fp
 8009ee0:	1abf      	subs	r7, r7, r2
 8009ee2:	69a3      	ldr	r3, [r4, #24]
				continue;
 8009ee4:	e797      	b.n	8009e16 <f_write+0x5e>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009ee6:	9b01      	ldr	r3, [sp, #4]
 8009ee8:	2600      	movs	r6, #0
 8009eea:	4418      	add	r0, r3
 8009eec:	463a      	mov	r2, r7
 8009eee:	4651      	mov	r1, sl
 8009ef0:	f7fe ff70 	bl	8008dd4 <mem_cpy.part.0>
 8009ef4:	463a      	mov	r2, r7
 8009ef6:	69a3      	ldr	r3, [r4, #24]
 8009ef8:	4637      	mov	r7, r6
 8009efa:	e788      	b.n	8009e0e <f_write+0x56>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009efc:	6a23      	ldr	r3, [r4, #32]
 8009efe:	429e      	cmp	r6, r3
				fp->fptr < fp->obj.objsize &&
 8009f00:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f02:	d002      	beq.n	8009f0a <f_write+0x152>
 8009f04:	68e0      	ldr	r0, [r4, #12]
 8009f06:	4283      	cmp	r3, r0
 8009f08:	d340      	bcc.n	8009f8c <f_write+0x1d4>
 8009f0a:	fbb3 f0f2 	udiv	r0, r3, r2
			fp->sect = sect;
 8009f0e:	6226      	str	r6, [r4, #32]
 8009f10:	fb02 3010 	mls	r0, r2, r0, r3
 8009f14:	e775      	b.n	8009e02 <f_write+0x4a>
					if (fp->cltbl) {
 8009f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f18:	2e00      	cmp	r6, #0
 8009f1a:	d04e      	beq.n	8009fba <f_write+0x202>
 8009f1c:	6820      	ldr	r0, [r4, #0]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f1e:	6871      	ldr	r1, [r6, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f20:	8982      	ldrh	r2, [r0, #12]
 8009f22:	8940      	ldrh	r0, [r0, #10]
 8009f24:	fbb3 f3f2 	udiv	r3, r3, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f28:	1d32      	adds	r2, r6, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f2a:	fbb3 f3f0 	udiv	r3, r3, r0
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f2e:	b149      	cbz	r1, 8009f44 <f_write+0x18c>
		if (cl < ncl) break;	/* In this fragment? */
 8009f30:	428b      	cmp	r3, r1
 8009f32:	d202      	bcs.n	8009f3a <f_write+0x182>
 8009f34:	e01c      	b.n	8009f70 <f_write+0x1b8>
 8009f36:	4299      	cmp	r1, r3
 8009f38:	d81a      	bhi.n	8009f70 <f_write+0x1b8>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f3a:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f3c:	f852 1f08 	ldr.w	r1, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f40:	2900      	cmp	r1, #0
 8009f42:	d1f8      	bne.n	8009f36 <f_write+0x17e>
 8009f44:	7d22      	ldrb	r2, [r4, #20]
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f4a:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8009f4c:	e749      	b.n	8009de2 <f_write+0x2a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f4e:	2501      	movs	r5, #1
 8009f50:	7565      	strb	r5, [r4, #21]
 8009f52:	e746      	b.n	8009de2 <f_write+0x2a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f54:	7848      	ldrb	r0, [r1, #1]
 8009f56:	6a22      	ldr	r2, [r4, #32]
 8009f58:	9901      	ldr	r1, [sp, #4]
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	f7fe fe5e 	bl	8008c1c <disk_write>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d1f4      	bne.n	8009f4e <f_write+0x196>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f64:	7d23      	ldrb	r3, [r4, #20]
 8009f66:	9903      	ldr	r1, [sp, #12]
 8009f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f6c:	7523      	strb	r3, [r4, #20]
 8009f6e:	e786      	b.n	8009e7e <f_write+0xc6>
	return cl + *tbl;	/* Return the cluster number */
 8009f70:	6850      	ldr	r0, [r2, #4]
 8009f72:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f47f af74 	bne.w	8009e62 <f_write+0xaa>
 8009f7a:	e7e3      	b.n	8009f44 <f_write+0x18c>
 8009f7c:	fb02 a101 	mla	r1, r2, r1, sl
 8009f80:	9801      	ldr	r0, [sp, #4]
 8009f82:	f7fe ff27 	bl	8008dd4 <mem_cpy.part.0>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	899a      	ldrh	r2, [r3, #12]
 8009f8a:	e7a3      	b.n	8009ed4 <f_write+0x11c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f8c:	7848      	ldrb	r0, [r1, #1]
 8009f8e:	9901      	ldr	r1, [sp, #4]
 8009f90:	2301      	movs	r3, #1
 8009f92:	4632      	mov	r2, r6
 8009f94:	f7fe fe34 	bl	8008c00 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d1d8      	bne.n	8009f4e <f_write+0x196>
 8009f9c:	9a03      	ldr	r2, [sp, #12]
 8009f9e:	69a3      	ldr	r3, [r4, #24]
 8009fa0:	8992      	ldrh	r2, [r2, #12]
 8009fa2:	e7b2      	b.n	8009f0a <f_write+0x152>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f7ff fae0 	bl	800956c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009fac:	2800      	cmp	r0, #0
 8009fae:	f47f af58 	bne.w	8009e62 <f_write+0xaa>
 8009fb2:	e7c7      	b.n	8009f44 <f_write+0x18c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009fb4:	2502      	movs	r5, #2
 8009fb6:	7565      	strb	r5, [r4, #21]
 8009fb8:	e713      	b.n	8009de2 <f_write+0x2a>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009fba:	69e1      	ldr	r1, [r4, #28]
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f7ff fad5 	bl	800956c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	f47f af4d 	bne.w	8009e62 <f_write+0xaa>
 8009fc8:	e7bc      	b.n	8009f44 <f_write+0x18c>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009fca:	9b01      	ldr	r3, [sp, #4]
 8009fcc:	1abe      	subs	r6, r7, r2
 8009fce:	4418      	add	r0, r3
 8009fd0:	4617      	mov	r7, r2
 8009fd2:	e78b      	b.n	8009eec <f_write+0x134>

08009fd4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fd6:	b083      	sub	sp, #12
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009fd8:	a901      	add	r1, sp, #4
{
 8009fda:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009fdc:	f7fe feda 	bl	8008d94 <validate>
	if (res == FR_OK) {
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d136      	bne.n	800a052 <f_sync+0x7e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009fe4:	7d23      	ldrb	r3, [r4, #20]
 8009fe6:	065a      	lsls	r2, r3, #25
 8009fe8:	d533      	bpl.n	800a052 <f_sync+0x7e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009fea:	061b      	lsls	r3, r3, #24
 8009fec:	d438      	bmi.n	800a060 <f_sync+0x8c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009fee:	f014 fadb 	bl	801e5a8 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009ff2:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8009ff4:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 8009ff6:	9801      	ldr	r0, [sp, #4]
 8009ff8:	f7fe ff1c 	bl	8008e34 <move_window>
				if (res == FR_OK) {
 8009ffc:	bb48      	cbnz	r0, 800a052 <f_sync+0x7e>
					dir = fp->dir_ptr;
 8009ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a000:	7ada      	ldrb	r2, [r3, #11]
 800a002:	f042 0220 	orr.w	r2, r2, #32
 800a006:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a008:	68a2      	ldr	r2, [r4, #8]
 800a00a:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a00c:	769a      	strb	r2, [r3, #26]
 800a00e:	f3c2 2007 	ubfx	r0, r2, #8, #8
	*ptr++ = (BYTE)val;
 800a012:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800a014:	7809      	ldrb	r1, [r1, #0]
 800a016:	2903      	cmp	r1, #3
 800a018:	d01d      	beq.n	800a056 <f_sync+0x82>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a01a:	68e2      	ldr	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800a01c:	771a      	strb	r2, [r3, #28]
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 800a01e:	9901      	ldr	r1, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800a020:	759d      	strb	r5, [r3, #22]
 800a022:	0a16      	lsrs	r6, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800a024:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800a026:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800a028:	775e      	strb	r6, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800a02a:	7798      	strb	r0, [r3, #30]
	*ptr++ = (BYTE)val;
 800a02c:	77da      	strb	r2, [r3, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 800a02e:	2000      	movs	r0, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800a030:	0a2f      	lsrs	r7, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800a032:	0c2e      	lsrs	r6, r5, #16
					fs->wflag = 1;
 800a034:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800a036:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800a038:	7498      	strb	r0, [r3, #18]
	*ptr++ = (BYTE)val;
 800a03a:	74d8      	strb	r0, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 800a03c:	75df      	strb	r7, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800a03e:	761e      	strb	r6, [r3, #24]
	*ptr++ = (BYTE)val;
 800a040:	765d      	strb	r5, [r3, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a042:	4608      	mov	r0, r1
					fs->wflag = 1;
 800a044:	70ca      	strb	r2, [r1, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a046:	f7fe ff15 	bl	8008e74 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a04a:	7d23      	ldrb	r3, [r4, #20]
 800a04c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a050:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800a052:	b003      	add	sp, #12
 800a054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a056:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800a058:	0a11      	lsrs	r1, r2, #8
 800a05a:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 800a05c:	7559      	strb	r1, [r3, #21]
 800a05e:	e7dc      	b.n	800a01a <f_sync+0x46>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a060:	9b01      	ldr	r3, [sp, #4]
 800a062:	6a22      	ldr	r2, [r4, #32]
 800a064:	7858      	ldrb	r0, [r3, #1]
 800a066:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a06a:	2301      	movs	r3, #1
 800a06c:	f7fe fdd6 	bl	8008c1c <disk_write>
 800a070:	b920      	cbnz	r0, 800a07c <f_sync+0xa8>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a072:	7d23      	ldrb	r3, [r4, #20]
 800a074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a078:	7523      	strb	r3, [r4, #20]
 800a07a:	e7b8      	b.n	8009fee <f_sync+0x1a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a07c:	2001      	movs	r0, #1
 800a07e:	e7e8      	b.n	800a052 <f_sync+0x7e>

0800a080 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a086:	f7ff ffa5 	bl	8009fd4 <f_sync>
	if (res == FR_OK)
 800a08a:	b108      	cbz	r0, 800a090 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800a08c:	b002      	add	sp, #8
 800a08e:	bd70      	pop	{r4, r5, r6, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a090:	a901      	add	r1, sp, #4
 800a092:	4620      	mov	r0, r4
 800a094:	f7fe fe7e 	bl	8008d94 <validate>
		if (res == FR_OK) {
 800a098:	2800      	cmp	r0, #0
 800a09a:	d1f7      	bne.n	800a08c <f_close+0xc>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d902      	bls.n	800a0aa <f_close+0x2a>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a0a4:	2002      	movs	r0, #2
}
 800a0a6:	b002      	add	sp, #8
 800a0a8:	bd70      	pop	{r4, r5, r6, pc}
		n = Files[i].ctr;
 800a0aa:	4d09      	ldr	r5, [pc, #36]	; (800a0d0 <f_close+0x50>)
 800a0ac:	011b      	lsls	r3, r3, #4
 800a0ae:	18e9      	adds	r1, r5, r3
 800a0b0:	898a      	ldrh	r2, [r1, #12]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a0b2:	f422 7680 	bic.w	r6, r2, #256	; 0x100
 800a0b6:	b13e      	cbz	r6, 800a0c8 <f_close+0x48>
 800a0b8:	3a01      	subs	r2, #1
 800a0ba:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800a0bc:	818a      	strh	r2, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a0be:	b122      	cbz	r2, 800a0ca <f_close+0x4a>
				fp->obj.fs = 0;			/* Invalidate file object */
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	6023      	str	r3, [r4, #0]
}
 800a0c4:	b002      	add	sp, #8
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800a0c8:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	50ea      	str	r2, [r5, r3]
 800a0ce:	e7f7      	b.n	800a0c0 <f_close+0x40>
 800a0d0:	20001164 	.word	0x20001164

0800a0d4 <FATFS_UnLinkDriverEx.part.1>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
 800a0d4:	b410      	push	{r4}
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
  {
    DiskNum = path[0] - '0';
 800a0d6:	7803      	ldrb	r3, [r0, #0]
    if(disk.drv[DiskNum] != 0)
 800a0d8:	490a      	ldr	r1, [pc, #40]	; (800a104 <FATFS_UnLinkDriverEx.part.1+0x30>)
    DiskNum = path[0] - '0';
 800a0da:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800a0e2:	6862      	ldr	r2, [r4, #4]
 800a0e4:	b152      	cbz	r2, 800a0fc <FATFS_UnLinkDriverEx.part.1+0x28>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
      disk.nbr--;
 800a0e6:	7a4a      	ldrb	r2, [r1, #9]
      disk.lun[DiskNum] = 0;
 800a0e8:	440b      	add	r3, r1
      disk.nbr--;
 800a0ea:	3a01      	subs	r2, #1
      disk.drv[DiskNum] = 0;
 800a0ec:	2000      	movs	r0, #0
      disk.nbr--;
 800a0ee:	b2d2      	uxtb	r2, r2
      disk.lun[DiskNum] = 0;
 800a0f0:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800a0f2:	724a      	strb	r2, [r1, #9]
      disk.drv[DiskNum] = 0;
 800a0f4:	6060      	str	r0, [r4, #4]
      ret = 0;
    }
  }

  return ret;
}
 800a0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0fa:	4770      	bx	lr
  uint8_t ret = 1;
 800a0fc:	2001      	movs	r0, #1
}
 800a0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	20001188 	.word	0x20001188

0800a108 <FATFS_LinkDriver>:
  if(disk.nbr < _VOLUMES)
 800a108:	4b10      	ldr	r3, [pc, #64]	; (800a14c <FATFS_LinkDriver+0x44>)
 800a10a:	7a5a      	ldrb	r2, [r3, #9]
 800a10c:	b10a      	cbz	r2, 800a112 <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 800a10e:	2001      	movs	r0, #1
 800a110:	4770      	bx	lr
{
 800a112:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a114:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 800a118:	7a5d      	ldrb	r5, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800a11a:	7a5f      	ldrb	r7, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800a11c:	7a5e      	ldrb	r6, [r3, #9]
    DiskNum = disk.nbr++;
 800a11e:	7a5a      	ldrb	r2, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 800a120:	555c      	strb	r4, [r3, r5]
    DiskNum = disk.nbr++;
 800a122:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 800a124:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    disk.lun[disk.nbr] = lun;
 800a128:	441e      	add	r6, r3
    DiskNum = disk.nbr++;
 800a12a:	1c55      	adds	r5, r2, #1
 800a12c:	b2ed      	uxtb	r5, r5
    disk.drv[disk.nbr] = drv;
 800a12e:	6078      	str	r0, [r7, #4]
    disk.lun[disk.nbr] = lun;
 800a130:	7234      	strb	r4, [r6, #8]
    DiskNum = disk.nbr++;
 800a132:	725d      	strb	r5, [r3, #9]
    path[0] = DiskNum + '0';
 800a134:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800a136:	f04f 0e3a 	mov.w	lr, #58	; 0x3a
    path[2] = '/';
 800a13a:	272f      	movs	r7, #47	; 0x2f
    path[3] = 0;
 800a13c:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800a13e:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 800a140:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 800a142:	f881 e001 	strb.w	lr, [r1, #1]
    path[2] = '/';
 800a146:	708f      	strb	r7, [r1, #2]
 800a148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a14a:	bf00      	nop
 800a14c:	20001188 	.word	0x20001188

0800a150 <FATFS_UnLinkDriver>:
  if(disk.nbr >= 1)
 800a150:	4b03      	ldr	r3, [pc, #12]	; (800a160 <FATFS_UnLinkDriver+0x10>)
 800a152:	7a5b      	ldrb	r3, [r3, #9]
 800a154:	b90b      	cbnz	r3, 800a15a <FATFS_UnLinkDriver+0xa>
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
}
 800a156:	2001      	movs	r0, #1
 800a158:	4770      	bx	lr
 800a15a:	f7ff bfbb 	b.w	800a0d4 <FATFS_UnLinkDriverEx.part.1>
 800a15e:	bf00      	nop
 800a160:	20001188 	.word	0x20001188
 800a164:	00000000 	.word	0x00000000

0800a168 <calcNorm560>:
double M_inv[9] = { 1.07645, -0.237662, 0.161212,
					0.410964, 0.554342, 0.034694,
					-0.010954, -0.013389, 1.024343 };
					
void calcNorm560(uint16_t CCT_measure)
{
 800a168:	b508      	push	{r3, lr}
	norm_560 = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800a16a:	f7f6 f9f3 	bl	8000554 <__aeabi_i2d>
 800a16e:	a316      	add	r3, pc, #88	; (adr r3, 800a1c8 <calcNorm560+0x60>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f7f6 fa54 	bl	8000620 <__aeabi_dmul>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	a114      	add	r1, pc, #80	; (adr r1, 800a1d0 <calcNorm560+0x68>)
 800a17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a182:	f7f6 fb77 	bl	8000874 <__aeabi_ddiv>
 800a186:	ec41 0b10 	vmov	d0, r0, r1
 800a18a:	f01b faf1 	bl	8025770 <exp>
 800a18e:	2200      	movs	r2, #0
 800a190:	ec51 0b10 	vmov	r0, r1, d0
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <calcNorm560+0x58>)
 800a196:	f7f6 f88f 	bl	80002b8 <__aeabi_dsub>
 800a19a:	460b      	mov	r3, r1
 800a19c:	4602      	mov	r2, r0
 800a19e:	a106      	add	r1, pc, #24	; (adr r1, 800a1b8 <calcNorm560+0x50>)
 800a1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a4:	f7f6 fb66 	bl	8000874 <__aeabi_ddiv>
 800a1a8:	f7f6 fd32 	bl	8000c10 <__aeabi_d2f>
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <calcNorm560+0x5c>)
 800a1ae:	6018      	str	r0, [r3, #0]
 800a1b0:	bd08      	pop	{r3, pc}
 800a1b2:	bf00      	nop
 800a1b4:	f3af 8000 	nop.w
 800a1b8:	f9f35846 	.word	0xf9f35846
 800a1bc:	466ca5d1 	.word	0x466ca5d1
 800a1c0:	3ff00000 	.word	0x3ff00000
 800a1c4:	2008c0d0 	.word	0x2008c0d0
 800a1c8:	05ea7ab3 	.word	0x05ea7ab3
 800a1cc:	3ea2ca5d 	.word	0x3ea2ca5d
 800a1d0:	aba38759 	.word	0xaba38759
 800a1d4:	3f8d7774 	.word	0x3f8d7774

0800a1d8 <calcSref>:
}

double ans = 0;
double calcSref(int idx, uint16_t CCT_measure)
{
 800a1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (CCT_measure < 5000)
 800a1dc:	f241 3387 	movw	r3, #4999	; 0x1387
 800a1e0:	4299      	cmp	r1, r3
{
 800a1e2:	460e      	mov	r6, r1
 800a1e4:	ea4f 0080 	mov.w	r0, r0, lsl #2
 800a1e8:	4c3b      	ldr	r4, [pc, #236]	; (800a2d8 <calcSref+0x100>)
	if (CCT_measure < 5000)
 800a1ea:	d84d      	bhi.n	800a288 <calcSref+0xb0>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800a1ec:	4d3b      	ldr	r5, [pc, #236]	; (800a2dc <calcSref+0x104>)
 800a1ee:	4405      	add	r5, r0
 800a1f0:	6828      	ldr	r0, [r5, #0]
 800a1f2:	f7f6 f9c1 	bl	8000578 <__aeabi_f2d>
 800a1f6:	a332      	add	r3, pc, #200	; (adr r3, 800a2c0 <calcSref+0xe8>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f6 fa10 	bl	8000620 <__aeabi_dmul>
 800a200:	4680      	mov	r8, r0
 800a202:	4630      	mov	r0, r6
 800a204:	4689      	mov	r9, r1
 800a206:	f7f6 f9a5 	bl	8000554 <__aeabi_i2d>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4640      	mov	r0, r8
 800a210:	4649      	mov	r1, r9
 800a212:	f7f6 fa05 	bl	8000620 <__aeabi_dmul>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	a12b      	add	r1, pc, #172	; (adr r1, 800a2c8 <calcSref+0xf0>)
 800a21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a220:	f7f6 fb28 	bl	8000874 <__aeabi_ddiv>
 800a224:	ec41 0b10 	vmov	d0, r0, r1
 800a228:	f01b faa2 	bl	8025770 <exp>
 800a22c:	2200      	movs	r2, #0
 800a22e:	ec51 0b10 	vmov	r0, r1, d0
 800a232:	4b2b      	ldr	r3, [pc, #172]	; (800a2e0 <calcSref+0x108>)
 800a234:	f7f6 f840 	bl	80002b8 <__aeabi_dsub>
 800a238:	e9c4 0100 	strd	r0, r1, [r4]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800a23c:	6828      	ldr	r0, [r5, #0]
 800a23e:	f7f6 f99b 	bl	8000578 <__aeabi_f2d>
 800a242:	a31f      	add	r3, pc, #124	; (adr r3, 800a2c0 <calcSref+0xe8>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f7f6 f9ea 	bl	8000620 <__aeabi_dmul>
 800a24c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 800a2d0 <calcSref+0xf8>
 800a250:	ec41 0b10 	vmov	d0, r0, r1
 800a254:	f01b fb88 	bl	8025968 <pow>
 800a258:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a25c:	ec51 0b10 	vmov	r0, r1, d0
 800a260:	f7f6 fb08 	bl	8000874 <__aeabi_ddiv>
		ans /= norm_560;
 800a264:	4b1f      	ldr	r3, [pc, #124]	; (800a2e4 <calcSref+0x10c>)
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800a266:	4606      	mov	r6, r0
		ans /= norm_560;
 800a268:	6818      	ldr	r0, [r3, #0]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800a26a:	460f      	mov	r7, r1
		ans /= norm_560;
 800a26c:	f7f6 f984 	bl	8000578 <__aeabi_f2d>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4630      	mov	r0, r6
 800a276:	4639      	mov	r1, r7
 800a278:	f7f6 fafc 	bl	8000874 <__aeabi_ddiv>
	}
	else
	{
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 800a27c:	e9c4 0100 	strd	r0, r1, [r4]
	}
	return ans;
}
 800a280:	ed94 0b00 	vldr	d0, [r4]
 800a284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 800a288:	4a17      	ldr	r2, [pc, #92]	; (800a2e8 <calcSref+0x110>)
 800a28a:	4b18      	ldr	r3, [pc, #96]	; (800a2ec <calcSref+0x114>)
 800a28c:	4918      	ldr	r1, [pc, #96]	; (800a2f0 <calcSref+0x118>)
 800a28e:	4403      	add	r3, r0
 800a290:	4401      	add	r1, r0
 800a292:	4410      	add	r0, r2
 800a294:	4a17      	ldr	r2, [pc, #92]	; (800a2f4 <calcSref+0x11c>)
 800a296:	edd1 6a00 	vldr	s13, [r1]
 800a29a:	ed92 7a00 	vldr	s14, [r2]
 800a29e:	edd0 7a00 	vldr	s15, [r0]
 800a2a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a2a6:	edd3 6a00 	vldr	s13, [r3]
 800a2aa:	4b13      	ldr	r3, [pc, #76]	; (800a2f8 <calcSref+0x120>)
 800a2ac:	ed93 7a00 	vldr	s14, [r3]
 800a2b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a2b4:	ee17 0a90 	vmov	r0, s15
 800a2b8:	f7f6 f95e 	bl	8000578 <__aeabi_f2d>
 800a2bc:	e7de      	b.n	800a27c <calcSref+0xa4>
 800a2be:	bf00      	nop
 800a2c0:	e826d695 	.word	0xe826d695
 800a2c4:	3e112e0b 	.word	0x3e112e0b
 800a2c8:	aba38759 	.word	0xaba38759
 800a2cc:	3f8d7774 	.word	0x3f8d7774
 800a2d0:	00000000 	.word	0x00000000
 800a2d4:	c0140000 	.word	0xc0140000
 800a2d8:	200031b0 	.word	0x200031b0
 800a2dc:	200501ec 	.word	0x200501ec
 800a2e0:	3ff00000 	.word	0x3ff00000
 800a2e4:	2008c0d0 	.word	0x2008c0d0
 800a2e8:	2004a1e4 	.word	0x2004a1e4
 800a2ec:	2004c1e4 	.word	0x2004c1e4
 800a2f0:	2004b1e4 	.word	0x2004b1e4
 800a2f4:	20003194 	.word	0x20003194
 800a2f8:	20003198 	.word	0x20003198
 800a2fc:	00000000 	.word	0x00000000

0800a300 <cqs_func>:

void cqs_func(uint16_t CCT_measure, float *Rabs)
{
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	ed2d 8b0a 	vpush	{d8-d12}
 800a308:	b0af      	sub	sp, #188	; 0xbc
 800a30a:	460c      	mov	r4, r1
 800a30c:	9004      	str	r0, [sp, #16]
	double x_test = 0;	
	double y_test = 0;		
	double z_test = 0;	
	
	
	memset(CQS_S_test, 0, sizeof(CQS_S_test));
 800a30e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a312:	2100      	movs	r1, #0
 800a314:	48c4      	ldr	r0, [pc, #784]	; (800a628 <cqs_func+0x328>)
 800a316:	f018 f9f2 	bl	80226fe <memset>
	memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a31a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a31e:	2100      	movs	r1, #0
 800a320:	48c2      	ldr	r0, [pc, #776]	; (800a62c <cqs_func+0x32c>)
 800a322:	f018 f9ec 	bl	80226fe <memset>
	
	for (uint16_t i = 0; i < 1024; i++){
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 800a326:	4bc2      	ldr	r3, [pc, #776]	; (800a630 <cqs_func+0x330>)
 800a328:	ed93 7a00 	vldr	s14, [r3]
 800a32c:	4bbe      	ldr	r3, [pc, #760]	; (800a628 <cqs_func+0x328>)
 800a32e:	4621      	mov	r1, r4
 800a330:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800a334:	ecf1 6a01 	vldmia	r1!, {s13}
 800a338:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t i = 0; i < 1024; i++){
 800a33c:	428a      	cmp	r2, r1
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 800a33e:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t i = 0; i < 1024; i++){
 800a342:	d1f7      	bne.n	800a334 <cqs_func+0x34>
	}

	if (CCT_measure < 3500){
 800a344:	9a04      	ldr	r2, [sp, #16]
 800a346:	f640 53ab 	movw	r3, #3499	; 0xdab
 800a34a:	429a      	cmp	r2, r3
 800a34c:	f200 870d 	bhi.w	800b16a <cqs_func+0xe6a>
		Mcct = (float)CCT_measure*(float)CCT_measure*(float)CCT_measure*0.000000000092672 - (float)CCT_measure*(float)CCT_measure*0.00000083959 + (float)CCT_measure*0.00255 - 1.612;
 800a350:	ee07 2a90 	vmov	s15, r2
 800a354:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800a358:	ee68 8a08 	vmul.f32	s17, s16, s16
 800a35c:	ee68 7a28 	vmul.f32	s15, s16, s17
 800a360:	ee17 0a90 	vmov	r0, s15
 800a364:	f7f6 f908 	bl	8000578 <__aeabi_f2d>
 800a368:	a3a3      	add	r3, pc, #652	; (adr r3, 800a5f8 <cqs_func+0x2f8>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f7f6 f957 	bl	8000620 <__aeabi_dmul>
 800a372:	4604      	mov	r4, r0
 800a374:	ee18 0a90 	vmov	r0, s17
 800a378:	460d      	mov	r5, r1
 800a37a:	f7f6 f8fd 	bl	8000578 <__aeabi_f2d>
 800a37e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a600 <cqs_func+0x300>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	f7f6 f94c 	bl	8000620 <__aeabi_dmul>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4620      	mov	r0, r4
 800a38e:	4629      	mov	r1, r5
 800a390:	f7f5 ff92 	bl	80002b8 <__aeabi_dsub>
 800a394:	4604      	mov	r4, r0
 800a396:	ee18 0a10 	vmov	r0, s16
 800a39a:	460d      	mov	r5, r1
 800a39c:	f7f6 f8ec 	bl	8000578 <__aeabi_f2d>
 800a3a0:	a399      	add	r3, pc, #612	; (adr r3, 800a608 <cqs_func+0x308>)
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f7f6 f93b 	bl	8000620 <__aeabi_dmul>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f5 ff83 	bl	80002bc <__adddf3>
 800a3b6:	a396      	add	r3, pc, #600	; (adr r3, 800a610 <cqs_func+0x310>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f7f5 ff7c 	bl	80002b8 <__aeabi_dsub>
 800a3c0:	4b9c      	ldr	r3, [pc, #624]	; (800a634 <cqs_func+0x334>)
 800a3c2:	e9c3 0100 	strd	r0, r1, [r3]
	}
	
	if (CCT_measure < 5000)
	{
		calcNorm560(CCT_measure);
 800a3c6:	9804      	ldr	r0, [sp, #16]
 800a3c8:	f7ff fece 	bl	800a168 <calcNorm560>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
	}
	
	bar_CQS = 0.2;
 800a3cc:	a192      	add	r1, pc, #584	; (adr r1, 800a618 <cqs_func+0x318>)
 800a3ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3d2:	4b99      	ldr	r3, [pc, #612]	; (800a638 <cqs_func+0x338>)
	GUI_Bar_Measure(85, 13, bar_CQS);
 800a3d4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800a63c <cqs_func+0x33c>
	bar_CQS = 0.2;
 800a3d8:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CQS);
 800a3dc:	210d      	movs	r1, #13
 800a3de:	2055      	movs	r0, #85	; 0x55
 800a3e0:	f00b fce0 	bl	8015da4 <GUI_Bar_Measure>

	memset(x_ref, 0, sizeof(x_ref));
 800a3e4:	2278      	movs	r2, #120	; 0x78
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	4895      	ldr	r0, [pc, #596]	; (800a640 <cqs_func+0x340>)
 800a3ea:	f018 f988 	bl	80226fe <memset>
	memset(y_ref, 0, sizeof(y_ref));
 800a3ee:	2278      	movs	r2, #120	; 0x78
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	4894      	ldr	r0, [pc, #592]	; (800a644 <cqs_func+0x344>)
 800a3f4:	f018 f983 	bl	80226fe <memset>
	memset(z_ref, 0, sizeof(z_ref));
 800a3f8:	2278      	movs	r2, #120	; 0x78
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	4892      	ldr	r0, [pc, #584]	; (800a648 <cqs_func+0x348>)
 800a3fe:	f018 f97e 	bl	80226fe <memset>
	double zw_test = 0;
 800a402:	f04f 0a00 	mov.w	sl, #0
 800a406:	f04f 0b00 	mov.w	fp, #0
 800a40a:	4b8d      	ldr	r3, [pc, #564]	; (800a640 <cqs_func+0x340>)
 800a40c:	930a      	str	r3, [sp, #40]	; 0x28
	double yw_test = 0;
 800a40e:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 800a412:	4b8c      	ldr	r3, [pc, #560]	; (800a644 <cqs_func+0x344>)
 800a414:	9308      	str	r3, [sp, #32]
	double xw_test = 0;
 800a416:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
	double zw_ref = 0;
 800a41a:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	double yw_ref = 0;
 800a41e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	double xw_ref = 0;
 800a422:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	double k_test = 0;
 800a426:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double k_ref = 0;
 800a42a:	e9cd ab00 	strd	sl, fp, [sp]
 800a42e:	4b86      	ldr	r3, [pc, #536]	; (800a648 <cqs_func+0x348>)
 800a430:	9306      	str	r3, [sp, #24]
		bar_CQS += 0.04;
		GUI_Bar_Measure(85, 13, bar_CQS);
		
		 x_test = 0;	
		 y_test = 0;		
		 z_test = 0;	
 800a432:	ec4b ab1b 	vmov	d11, sl, fp
		 y_test = 0;		
 800a436:	ec4b ab1a 	vmov	d10, sl, fp
	memset(z_ref, 0, sizeof(z_ref));
 800a43a:	2400      	movs	r4, #0
		bar_CQS += 0.04;
 800a43c:	4d7e      	ldr	r5, [pc, #504]	; (800a638 <cqs_func+0x338>)
 800a43e:	4f83      	ldr	r7, [pc, #524]	; (800a64c <cqs_func+0x34c>)
	
	
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 800a440:	4e79      	ldr	r6, [pc, #484]	; (800a628 <cqs_func+0x328>)
		bar_CQS += 0.04;
 800a442:	a377      	add	r3, pc, #476	; (adr r3, 800a620 <cqs_func+0x320>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a44c:	f7f5 ff36 	bl	80002bc <__adddf3>
 800a450:	e9c5 0100 	strd	r0, r1, [r5]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a454:	f7f6 fbdc 	bl	8000c10 <__aeabi_d2f>
 800a458:	210d      	movs	r1, #13
 800a45a:	ee00 0a10 	vmov	s0, r0
 800a45e:	2055      	movs	r0, #85	; 0x55
 800a460:	f00b fca0 	bl	8015da4 <GUI_Bar_Measure>
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 800a464:	487a      	ldr	r0, [pc, #488]	; (800a650 <cqs_func+0x350>)
 800a466:	4a71      	ldr	r2, [pc, #452]	; (800a62c <cqs_func+0x32c>)
 800a468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a46c:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800a470:	f004 ff72 	bl	800f358 <Calibration_Load_Pack>
 800a474:	4b77      	ldr	r3, [pc, #476]	; (800a654 <cqs_func+0x354>)
 800a476:	9320      	str	r3, [sp, #128]	; 0x80
 800a478:	4b77      	ldr	r3, [pc, #476]	; (800a658 <cqs_func+0x358>)
 800a47a:	931e      	str	r3, [sp, #120]	; 0x78
		 z_test = 0;	
 800a47c:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
 800a480:	4b76      	ldr	r3, [pc, #472]	; (800a65c <cqs_func+0x35c>)
 800a482:	931c      	str	r3, [sp, #112]	; 0x70
		 y_test = 0;		
 800a484:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
		 x_test = 0;	
 800a488:	ed8d ab16 	vstr	d10, [sp, #88]	; 0x58
 800a48c:	b2e3      	uxtb	r3, r4

		for (int j = 0; j < 1024; j++)
 800a48e:	2500      	movs	r5, #0
 800a490:	9326      	str	r3, [sp, #152]	; 0x98
		{
			if (i == 0)
 800a492:	2c00      	cmp	r4, #0
 800a494:	d17d      	bne.n	800a592 <cqs_func+0x292>
			{
				s_ref[j] = calcSref(j, CCT_measure);
 800a496:	9904      	ldr	r1, [sp, #16]
 800a498:	4628      	mov	r0, r5
 800a49a:	f7ff fe9d 	bl	800a1d8 <calcSref>
 800a49e:	ec51 0b10 	vmov	r0, r1, d0
 800a4a2:	f7f6 fbb5 	bl	8000c10 <__aeabi_d2f>
 800a4a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4a8:	6018      	str	r0, [r3, #0]
				k_ref += s_ref[j] * Spectral_day[j];
 800a4aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
				s_ref[j] = calcSref(j, CCT_measure);
 800a4ac:	ee08 0a10 	vmov	s16, r0
				k_ref += s_ref[j] * Spectral_day[j];
 800a4b0:	edd3 9a00 	vldr	s19, [r3]
 800a4b4:	ee68 7a29 	vmul.f32	s15, s16, s19
 800a4b8:	ee17 0a90 	vmov	r0, s15
 800a4bc:	f7f6 f85c 	bl	8000578 <__aeabi_f2d>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	4689      	mov	r9, r1
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4cc:	f7f5 fef6 	bl	80002bc <__adddf3>
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a4d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a4d2:	ed93 9a00 	vldr	s18, [r3]
 800a4d6:	ee68 7a09 	vmul.f32	s15, s16, s18
				k_ref += s_ref[j] * Spectral_day[j];
 800a4da:	e9cd 0100 	strd	r0, r1, [sp]
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a4de:	ee17 0a90 	vmov	r0, s15
 800a4e2:	f7f6 f849 	bl	8000578 <__aeabi_f2d>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4ee:	f7f5 fee5 	bl	80002bc <__adddf3>
				yw_ref += s_ref[j] * Spectral_day[j];
 800a4f2:	4642      	mov	r2, r8
 800a4f4:	464b      	mov	r3, r9
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a4f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				yw_ref += s_ref[j] * Spectral_day[j];
 800a4fa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a4fe:	f7f5 fedd 	bl	80002bc <__adddf3>
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a502:	edd7 8a00 	vldr	s17, [r7]
 800a506:	ee68 7a28 	vmul.f32	s15, s16, s17
				yw_ref += s_ref[j] * Spectral_day[j];
 800a50a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a50e:	ee17 0a90 	vmov	r0, s15
 800a512:	f7f6 f831 	bl	8000578 <__aeabi_f2d>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a51e:	f7f5 fecd 	bl	80002bc <__adddf3>
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a522:	ed96 8a00 	vldr	s16, [r6]
 800a526:	ee69 7a88 	vmul.f32	s15, s19, s16
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a52a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a52e:	ee17 0a90 	vmov	r0, s15
 800a532:	f7f6 f821 	bl	8000578 <__aeabi_f2d>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4680      	mov	r8, r0
 800a53c:	4689      	mov	r9, r1
 800a53e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a542:	f7f5 febb 	bl	80002bc <__adddf3>
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a546:	ee69 7a08 	vmul.f32	s15, s18, s16
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a54a:	e9cd 0102 	strd	r0, r1, [sp, #8]
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a54e:	ee17 0a90 	vmov	r0, s15
 800a552:	f7f6 f811 	bl	8000578 <__aeabi_f2d>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a55e:	f7f5 fead 	bl	80002bc <__adddf3>
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a562:	4642      	mov	r2, r8
 800a564:	464b      	mov	r3, r9
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a566:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a56a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800a56e:	f7f5 fea5 	bl	80002bc <__adddf3>
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 800a572:	ee68 7a88 	vmul.f32	s15, s17, s16
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a576:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 800a57a:	ee17 0a90 	vmov	r0, s15
 800a57e:	f7f5 fffb 	bl	8000578 <__aeabi_f2d>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4650      	mov	r0, sl
 800a588:	4659      	mov	r1, fp
 800a58a:	f7f5 fe97 	bl	80002bc <__adddf3>
 800a58e:	4682      	mov	sl, r0
 800a590:	468b      	mov	fp, r1
			}

			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a592:	4b26      	ldr	r3, [pc, #152]	; (800a62c <cqs_func+0x32c>)
 800a594:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a598:	ed93 8a00 	vldr	s16, [r3]
 800a59c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a59e:	ecb3 9a01 	vldmia	r3!, {s18}
 800a5a2:	9320      	str	r3, [sp, #128]	; 0x80
 800a5a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a5a6:	ee28 9a09 	vmul.f32	s18, s16, s18
 800a5aa:	ecf3 9a01 	vldmia	r3!, {s19}
 800a5ae:	ee69 7a29 	vmul.f32	s15, s18, s19
 800a5b2:	931e      	str	r3, [sp, #120]	; 0x78
 800a5b4:	ee17 0a90 	vmov	r0, s15
 800a5b8:	f7f5 ffde 	bl	8000578 <__aeabi_f2d>
 800a5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f5 fe7b 	bl	80002bc <__adddf3>
 800a5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c8:	e9c3 0100 	strd	r0, r1, [r3]
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a5cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a5ce:	ecf3 8a01 	vldmia	r3!, {s17}
 800a5d2:	ee68 8a28 	vmul.f32	s17, s16, s17
			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a5d6:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a5da:	ee69 7aa8 	vmul.f32	s15, s19, s17
 800a5de:	931c      	str	r3, [sp, #112]	; 0x70
 800a5e0:	ee17 0a90 	vmov	r0, s15
 800a5e4:	f7f5 ffc8 	bl	8000578 <__aeabi_f2d>
 800a5e8:	9b08      	ldr	r3, [sp, #32]
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	f7f5 fe65 	bl	80002bc <__adddf3>
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a5f2:	ecf7 7a01 	vldmia	r7!, {s15}
 800a5f6:	e033      	b.n	800a660 <cqs_func+0x360>
 800a5f8:	56b31fbb 	.word	0x56b31fbb
 800a5fc:	3dd97936 	.word	0x3dd97936
 800a600:	ef649b9b 	.word	0xef649b9b
 800a604:	3eac2c05 	.word	0x3eac2c05
 800a608:	d35a8588 	.word	0xd35a8588
 800a60c:	3f64e3bc 	.word	0x3f64e3bc
 800a610:	83126e98 	.word	0x83126e98
 800a614:	3ff9cac0 	.word	0x3ff9cac0
 800a618:	9999999a 	.word	0x9999999a
 800a61c:	3fc99999 	.word	0x3fc99999
 800a620:	47ae147b 	.word	0x47ae147b
 800a624:	3fa47ae1 	.word	0x3fa47ae1
 800a628:	20002194 	.word	0x20002194
 800a62c:	20001194 	.word	0x20001194
 800a630:	20091164 	.word	0x20091164
 800a634:	20000188 	.word	0x20000188
 800a638:	2008bf58 	.word	0x2008bf58
 800a63c:	3e4ccccd 	.word	0x3e4ccccd
 800a640:	2008bf60 	.word	0x2008bf60
 800a644:	2008c0f0 	.word	0x2008c0f0
 800a648:	2008c058 	.word	0x2008c058
 800a64c:	20088db8 	.word	0x20088db8
 800a650:	0810c040 	.word	0x0810c040
 800a654:	20085db8 	.word	0x20085db8
 800a658:	200031b8 	.word	0x200031b8
 800a65c:	2004e1e8 	.word	0x2004e1e8
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a660:	9b08      	ldr	r3, [sp, #32]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a662:	ee28 8a27 	vmul.f32	s16, s16, s15
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a666:	e9c3 0100 	strd	r0, r1, [r3]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a66a:	ee69 7a88 	vmul.f32	s15, s19, s16
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a66e:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a672:	ee17 0a90 	vmov	r0, s15
 800a676:	f7f5 ff7f 	bl	8000578 <__aeabi_f2d>
 800a67a:	9b06      	ldr	r3, [sp, #24]
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	f7f5 fe1c 	bl	80002bc <__adddf3>
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a684:	ecf6 9a01 	vldmia	r6!, {s19}
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a688:	9b06      	ldr	r3, [sp, #24]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a68a:	ee69 7a29 	vmul.f32	s15, s18, s19
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a68e:	4680      	mov	r8, r0
 800a690:	4689      	mov	r9, r1
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a692:	ee17 0a90 	vmov	r0, s15
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a696:	e9c3 8900 	strd	r8, r9, [r3]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a69a:	f7f5 ff6d 	bl	8000578 <__aeabi_f2d>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a6a6:	f7f5 fe09 	bl	80002bc <__adddf3>
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a6aa:	ee68 7aa9 	vmul.f32	s15, s17, s19
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a6ae:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a6b2:	ee17 0a90 	vmov	r0, s15
 800a6b6:	f7f5 ff5f 	bl	8000578 <__aeabi_f2d>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a6c2:	f7f5 fdfb 	bl	80002bc <__adddf3>
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a6c6:	ee68 7a29 	vmul.f32	s15, s16, s19
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a6ca:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a6ce:	ee17 0a90 	vmov	r0, s15
 800a6d2:	f7f5 ff51 	bl	8000578 <__aeabi_f2d>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a6de:	f7f5 fded 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800a6e2:	3501      	adds	r5, #1
 800a6e4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a6e8:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		for (int j = 0; j < 1024; j++)
 800a6ec:	f47f aed1 	bne.w	800a492 <cqs_func+0x192>
		}
		
		memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a6f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4874      	ldr	r0, [pc, #464]	; (800a8c8 <cqs_func+0x5c8>)
 800a6f8:	f018 f801 	bl	80226fe <memset>
		
		if (i == 0) {
 800a6fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6fe:	b97b      	cbnz	r3, 800a720 <cqs_func+0x420>
			k_ref = 100 / k_ref;
 800a700:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a704:	2000      	movs	r0, #0
 800a706:	4971      	ldr	r1, [pc, #452]	; (800a8cc <cqs_func+0x5cc>)
 800a708:	f7f6 f8b4 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800a70c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_ref = 100 / k_ref;
 800a710:	e9cd 0100 	strd	r0, r1, [sp]
			k_test = 100 / k_test;
 800a714:	2000      	movs	r0, #0
 800a716:	496d      	ldr	r1, [pc, #436]	; (800a8cc <cqs_func+0x5cc>)
 800a718:	f7f6 f8ac 	bl	8000874 <__aeabi_ddiv>
 800a71c:	e9cd 0102 	strd	r0, r1, [sp, #8]
		}
			
		x_ref[i] *= k_ref;
 800a720:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a724:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a728:	f7f5 ff7a 	bl	8000620 <__aeabi_dmul>
 800a72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
		z_ref[i] *= k_ref;
		x_test *= k_test;
		y_test *= k_test;
		z_test *= k_test;
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a72e:	4d68      	ldr	r5, [pc, #416]	; (800a8d0 <cqs_func+0x5d0>)
 800a730:	4f68      	ldr	r7, [pc, #416]	; (800a8d4 <cqs_func+0x5d4>)
		x_ref[i] *= k_ref;
 800a732:	e8e3 0102 	strd	r0, r1, [r3], #8
		y_ref[i] *= k_ref;
 800a736:	e9dd 0100 	ldrd	r0, r1, [sp]
		x_ref[i] *= k_ref;
 800a73a:	930a      	str	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
 800a73c:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a740:	f7f5 ff6e 	bl	8000620 <__aeabi_dmul>
 800a744:	9b08      	ldr	r3, [sp, #32]
 800a746:	e8e3 0102 	strd	r0, r1, [r3], #8
		z_ref[i] *= k_ref;
 800a74a:	4642      	mov	r2, r8
		y_ref[i] *= k_ref;
 800a74c:	9308      	str	r3, [sp, #32]
		z_ref[i] *= k_ref;
 800a74e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a752:	464b      	mov	r3, r9
 800a754:	f7f5 ff64 	bl	8000620 <__aeabi_dmul>
 800a758:	9b06      	ldr	r3, [sp, #24]
 800a75a:	e8e3 0102 	strd	r0, r1, [r3], #8
		x_test *= k_test;
 800a75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		z_ref[i] *= k_ref;
 800a762:	9306      	str	r3, [sp, #24]
		x_test *= k_test;
 800a764:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a768:	f7f5 ff5a 	bl	8000620 <__aeabi_dmul>
		y_test *= k_test;
 800a76c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
		x_test *= k_test;
 800a770:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
		y_test *= k_test;
 800a774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a778:	f7f5 ff52 	bl	8000620 <__aeabi_dmul>
		z_test *= k_test;
 800a77c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
		y_test *= k_test;
 800a780:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		z_test *= k_test;
 800a784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a788:	f7f5 ff4a 	bl	8000620 <__aeabi_dmul>
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a78c:	ed95 7b00 	vldr	d7, [r5]
 800a790:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800a794:	ed95 7b02 	vldr	d7, [r5, #8]
 800a798:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800a79c:	ed95 7b04 	vldr	d7, [r5, #16]
 800a7a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		z_test *= k_test;
 800a7a4:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a7a8:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a7ac:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800a7b0:	f7f5 ff36 	bl	8000620 <__aeabi_dmul>
 800a7b4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a7b8:	4680      	mov	r8, r0
 800a7ba:	4689      	mov	r9, r1
 800a7bc:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a7c0:	f7f5 ff2e 	bl	8000620 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	f7f5 fd76 	bl	80002bc <__adddf3>
 800a7d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a7d4:	4680      	mov	r8, r0
 800a7d6:	4689      	mov	r9, r1
 800a7d8:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a7dc:	f7f5 ff20 	bl	8000620 <__aeabi_dmul>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	f7f5 fd68 	bl	80002bc <__adddf3>
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a7ec:	ed95 7b06 	vldr	d7, [r5, #24]
 800a7f0:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800a7f4:	ed95 7b08 	vldr	d7, [r5, #32]
 800a7f8:	00e6      	lsls	r6, r4, #3
 800a7fa:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800a7fe:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a802:	4437      	add	r7, r6
 800a804:	e9c7 0100 	strd	r0, r1, [r7]
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a808:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800a80c:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a810:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 800a814:	f7f5 ff04 	bl	8000620 <__aeabi_dmul>
 800a818:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a81c:	4680      	mov	r8, r0
 800a81e:	4689      	mov	r9, r1
 800a820:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a824:	f7f5 fefc 	bl	8000620 <__aeabi_dmul>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f5 fd44 	bl	80002bc <__adddf3>
 800a834:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a838:	4680      	mov	r8, r0
 800a83a:	4689      	mov	r9, r1
 800a83c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a840:	f7f5 feee 	bl	8000620 <__aeabi_dmul>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4640      	mov	r0, r8
 800a84a:	4649      	mov	r1, r9
 800a84c:	f7f5 fd36 	bl	80002bc <__adddf3>
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a850:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
 800a854:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800a858:	ed95 7b0e 	vldr	d7, [r5, #56]	; 0x38
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a85c:	4f1e      	ldr	r7, [pc, #120]	; (800a8d8 <cqs_func+0x5d8>)
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a85e:	4b1f      	ldr	r3, [pc, #124]	; (800a8dc <cqs_func+0x5dc>)
 800a860:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 800a864:	ed95 7b10 	vldr	d7, [r5, #64]	; 0x40
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a868:	4437      	add	r7, r6
 800a86a:	e9c7 0100 	strd	r0, r1, [r7]
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a86e:	441e      	add	r6, r3
 800a870:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a874:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a878:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800a87c:	f7f5 fed0 	bl	8000620 <__aeabi_dmul>
 800a880:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a88c:	f7f5 fec8 	bl	8000620 <__aeabi_dmul>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4640      	mov	r0, r8
 800a896:	4649      	mov	r1, r9
 800a898:	f7f5 fd10 	bl	80002bc <__adddf3>
 800a89c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	4689      	mov	r9, r1
 800a8a4:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a8a8:	f7f5 feba 	bl	8000620 <__aeabi_dmul>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	f7f5 fd02 	bl	80002bc <__adddf3>
 800a8b8:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 15; i++)
 800a8ba:	2c0f      	cmp	r4, #15
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a8bc:	e9c6 0100 	strd	r0, r1, [r6]
	for (uint8_t i = 0; i < 15; i++)
 800a8c0:	f47f adbc 	bne.w	800a43c <cqs_func+0x13c>
 800a8c4:	e00e      	b.n	800a8e4 <cqs_func+0x5e4>
 800a8c6:	bf00      	nop
 800a8c8:	20001194 	.word	0x20001194
 800a8cc:	40590000 	.word	0x40590000
 800a8d0:	200000f8 	.word	0x200000f8
 800a8d4:	2008bfe0 	.word	0x2008bfe0
 800a8d8:	2008c168 	.word	0x2008c168
 800a8dc:	2008bee0 	.word	0x2008bee0
 800a8e0:	00000000 	.word	0x00000000
	}

	xw_ref *= k_ref;
 800a8e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8ec:	f7f5 fe98 	bl	8000620 <__aeabi_dmul>
	yw_ref *= k_ref;
 800a8f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	xw_ref *= k_ref;
 800a8f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
	yw_ref *= k_ref;
 800a8f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8fc:	f7f5 fe90 	bl	8000620 <__aeabi_dmul>
	zw_ref *= k_ref;
 800a900:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	yw_ref *= k_ref;
 800a904:	e9cd 0104 	strd	r0, r1, [sp, #16]
	zw_ref *= k_ref;
 800a908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a90c:	f7f5 fe88 	bl	8000620 <__aeabi_dmul>
	xw_test *= k_test;
 800a910:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
	zw_ref *= k_ref;
 800a914:	e9cd 0108 	strd	r0, r1, [sp, #32]
	xw_test *= k_test;
 800a918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a91c:	f7f5 fe80 	bl	8000620 <__aeabi_dmul>
	yw_test *= k_test;
 800a920:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	xw_test *= k_test;
 800a924:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	yw_test *= k_test;
 800a928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a92c:	f7f5 fe78 	bl	8000620 <__aeabi_dmul>
	zw_test *= k_test;
 800a930:	4652      	mov	r2, sl
 800a932:	465b      	mov	r3, fp
	yw_test *= k_test;
 800a934:	e9cd 0100 	strd	r0, r1, [sp]
	zw_test *= k_test;
 800a938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a93c:	f7f5 fe70 	bl	8000620 <__aeabi_dmul>

	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a940:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	zw_test *= k_test;
 800a944:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a948:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a94c:	f7f5 fe68 	bl	8000620 <__aeabi_dmul>
 800a950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a954:	4604      	mov	r4, r0
 800a956:	460d      	mov	r5, r1
 800a958:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a95c:	f7f5 fe60 	bl	8000620 <__aeabi_dmul>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4620      	mov	r0, r4
 800a966:	4629      	mov	r1, r5
 800a968:	f7f5 fca8 	bl	80002bc <__adddf3>
 800a96c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a970:	4604      	mov	r4, r0
 800a972:	460d      	mov	r5, r1
 800a974:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a978:	f7f5 fe52 	bl	8000620 <__aeabi_dmul>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4620      	mov	r0, r4
 800a982:	4629      	mov	r1, r5
 800a984:	f7f5 fc9a 	bl	80002bc <__adddf3>
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a988:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a98c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a990:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a994:	f7f5 fe44 	bl	8000620 <__aeabi_dmul>
 800a998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a9a4:	f7f5 fe3c 	bl	8000620 <__aeabi_dmul>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f7f5 fc84 	bl	80002bc <__adddf3>
 800a9b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a9c0:	f7f5 fe2e 	bl	8000620 <__aeabi_dmul>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7f5 fc76 	bl	80002bc <__adddf3>
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a9d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a9d4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a9d8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a9dc:	f7f5 fe20 	bl	8000620 <__aeabi_dmul>
 800a9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	460d      	mov	r5, r1
 800a9e8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a9ec:	f7f5 fe18 	bl	8000620 <__aeabi_dmul>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	f7f5 fc60 	bl	80002bc <__adddf3>
 800a9fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa00:	4604      	mov	r4, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800aa08:	f7f5 fe0a 	bl	8000620 <__aeabi_dmul>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4620      	mov	r0, r4
 800aa12:	4629      	mov	r1, r5
 800aa14:	f7f5 fc52 	bl	80002bc <__adddf3>
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800aa18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800aa1c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800aa20:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800aa24:	f7f5 fdfc 	bl	8000620 <__aeabi_dmul>
 800aa28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	460d      	mov	r5, r1
 800aa30:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800aa34:	f7f5 fdf4 	bl	8000620 <__aeabi_dmul>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f5 fc3c 	bl	80002bc <__adddf3>
 800aa44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa48:	4604      	mov	r4, r0
 800aa4a:	460d      	mov	r5, r1
 800aa4c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800aa50:	f7f5 fde6 	bl	8000620 <__aeabi_dmul>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4620      	mov	r0, r4
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	f7f5 fc2e 	bl	80002bc <__adddf3>
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800aa60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800aa64:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800aa68:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800aa6c:	f7f5 fdd8 	bl	8000620 <__aeabi_dmul>
 800aa70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa74:	4604      	mov	r4, r0
 800aa76:	460d      	mov	r5, r1
 800aa78:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800aa7c:	f7f5 fdd0 	bl	8000620 <__aeabi_dmul>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7f5 fc18 	bl	80002bc <__adddf3>
 800aa8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa90:	4604      	mov	r4, r0
 800aa92:	460d      	mov	r5, r1
 800aa94:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800aa98:	f7f5 fdc2 	bl	8000620 <__aeabi_dmul>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f7f5 fc0a 	bl	80002bc <__adddf3>
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800aaa8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800aaac:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800aab0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800aab4:	f7f5 fdb4 	bl	8000620 <__aeabi_dmul>
 800aab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aabc:	4604      	mov	r4, r0
 800aabe:	460d      	mov	r5, r1
 800aac0:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800aac4:	f7f5 fdac 	bl	8000620 <__aeabi_dmul>
 800aac8:	4602      	mov	r2, r0
 800aaca:	460b      	mov	r3, r1
 800aacc:	4620      	mov	r0, r4
 800aace:	4629      	mov	r1, r5
 800aad0:	f7f5 fbf4 	bl	80002bc <__adddf3>
 800aad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800aae0:	f7f5 fd9e 	bl	8000620 <__aeabi_dmul>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4620      	mov	r0, r4
 800aaea:	4629      	mov	r1, r5
 800aaec:	f7f5 fbe6 	bl	80002bc <__adddf3>

	float alpha = yw_test / yw_ref;
 800aaf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800aaf4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	float alpha = yw_test / yw_ref;
 800aaf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aafc:	f7f5 feba 	bl	8000874 <__aeabi_ddiv>
 800ab00:	f7f6 f886 	bl	8000c10 <__aeabi_d2f>
	float delta_e_rms = 0;
	float sum_delta_e = 0;
	float sum_delta_c = 0;
 800ab04:	ed5f 8a8a 	vldr	s17, [pc, #-552]	; 800a8e0 <cqs_func+0x5e0>
 800ab08:	f8df b390 	ldr.w	fp, [pc, #912]	; 800ae9c <cqs_func+0xb9c>
	float alpha = yw_test / yw_ref;
 800ab0c:	901c      	str	r0, [sp, #112]	; 0x70
 800ab0e:	f04f 0a00 	mov.w	sl, #0
	float sum_delta_e = 0;
 800ab12:	eef0 9a68 	vmov.f32	s19, s17
	float delta_e_rms = 0;
 800ab16:	eeb0 aa68 	vmov.f32	s20, s17

	for (int i = 0; i < 15; i++)
	{
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800ab1a:	981c      	ldr	r0, [sp, #112]	; 0x70
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;

		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ab1c:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800aea0 <cqs_func+0xba0>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];

		float y_tmp = cbrt(y_ref[i] / yw_ref);
		float L_ref = 116* y_tmp - 16;
 800ab20:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 800ae70 <cqs_func+0xb70>
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800ab24:	f7f5 fd28 	bl	8000578 <__aeabi_f2d>
 800ab28:	4bd2      	ldr	r3, [pc, #840]	; (800ae74 <cqs_func+0xb74>)
 800ab2a:	4453      	add	r3, sl
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	4604      	mov	r4, r0
 800ab32:	460d      	mov	r5, r1
 800ab34:	f7f5 fd74 	bl	8000620 <__aeabi_dmul>
 800ab38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab3c:	f7f5 fd70 	bl	8000620 <__aeabi_dmul>
 800ab40:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ab44:	f7f5 fe96 	bl	8000874 <__aeabi_ddiv>
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800ab48:	4bcb      	ldr	r3, [pc, #812]	; (800ae78 <cqs_func+0xb78>)
 800ab4a:	4453      	add	r3, sl
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	460f      	mov	r7, r1
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	4620      	mov	r0, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	f7f5 fd62 	bl	8000620 <__aeabi_dmul>
 800ab5c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ab60:	f7f5 fd5e 	bl	8000620 <__aeabi_dmul>
 800ab64:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ab68:	f7f5 fe84 	bl	8000874 <__aeabi_ddiv>
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800ab6c:	4bc3      	ldr	r3, [pc, #780]	; (800ae7c <cqs_func+0xb7c>)
 800ab6e:	4453      	add	r3, sl
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800ab70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	f7f5 fd50 	bl	8000620 <__aeabi_dmul>
 800ab80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ab84:	f7f5 fd4c 	bl	8000620 <__aeabi_dmul>
 800ab88:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ab8c:	f7f5 fe72 	bl	8000874 <__aeabi_ddiv>
 800ab90:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800ab94:	49ba      	ldr	r1, [pc, #744]	; (800ae80 <cqs_func+0xb80>)
 800ab96:	4451      	add	r1, sl
 800ab98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aba0:	f7f5 fe68 	bl	8000874 <__aeabi_ddiv>
 800aba4:	ec41 0b10 	vmov	d0, r0, r1
 800aba8:	f01a fca2 	bl	80254f0 <cbrt>
 800abac:	ec51 0b10 	vmov	r0, r1, d0
 800abb0:	f7f6 f82e 	bl	8000c10 <__aeabi_d2f>
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800abb4:	49b3      	ldr	r1, [pc, #716]	; (800ae84 <cqs_func+0xb84>)
 800abb6:	4451      	add	r1, sl
 800abb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800abbc:	ee0a 0a90 	vmov	s21, r0
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800abc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abc4:	f7f5 fe56 	bl	8000874 <__aeabi_ddiv>
 800abc8:	ec41 0b10 	vmov	d0, r0, r1
 800abcc:	f01a fc90 	bl	80254f0 <cbrt>
 800abd0:	ee1a 0a90 	vmov	r0, s21
 800abd4:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800abd8:	f7f5 fcce 	bl	8000578 <__aeabi_f2d>
 800abdc:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800abe0:	4604      	mov	r4, r0
 800abe2:	460d      	mov	r5, r1
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	ec51 0b10 	vmov	r0, r1, d0
 800abec:	f7f5 fb64 	bl	80002b8 <__aeabi_dsub>
 800abf0:	2200      	movs	r2, #0
 800abf2:	4ba5      	ldr	r3, [pc, #660]	; (800ae88 <cqs_func+0xb88>)
 800abf4:	f7f5 fd14 	bl	8000620 <__aeabi_dmul>
 800abf8:	f7f6 f80a 	bl	8000c10 <__aeabi_d2f>
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800abfc:	49a3      	ldr	r1, [pc, #652]	; (800ae8c <cqs_func+0xb8c>)
 800abfe:	4451      	add	r1, sl
 800ac00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800ac04:	ee0b 0a90 	vmov	s23, r0
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800ac08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac0c:	f7f5 fe32 	bl	8000874 <__aeabi_ddiv>
 800ac10:	ec41 0b10 	vmov	d0, r0, r1
 800ac14:	f01a fc6c 	bl	80254f0 <cbrt>
 800ac18:	4620      	mov	r0, r4
 800ac1a:	ec53 2b10 	vmov	r2, r3, d0
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7f5 fb4a 	bl	80002b8 <__aeabi_dsub>
 800ac24:	2200      	movs	r2, #0
 800ac26:	4b9a      	ldr	r3, [pc, #616]	; (800ae90 <cqs_func+0xb90>)
 800ac28:	f7f5 fcfa 	bl	8000620 <__aeabi_dmul>
 800ac2c:	f7f5 fff0 	bl	8000c10 <__aeabi_d2f>
		float L_ref = 116* y_tmp - 16;
 800ac30:	eebb 8a00 	vmov.f32	s16, #176	; 0xc1800000 -16.0
 800ac34:	eef0 ca48 	vmov.f32	s25, s16
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ac38:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
		float L_ref = 116* y_tmp - 16;
 800ac3c:	eeea ca89 	vfma.f32	s25, s21, s18
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ac40:	4639      	mov	r1, r7
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800ac42:	ee0a 0a90 	vmov	s21, r0
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ac46:	4630      	mov	r0, r6
 800ac48:	f7f5 fcea 	bl	8000620 <__aeabi_dmul>
 800ac4c:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800ac50:	4604      	mov	r4, r0
 800ac52:	460d      	mov	r5, r1
 800ac54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac58:	f7f5 fce2 	bl	8000620 <__aeabi_dmul>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4620      	mov	r0, r4
 800ac62:	4629      	mov	r1, r5
 800ac64:	f7f5 fb2a 	bl	80002bc <__adddf3>
 800ac68:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	460d      	mov	r5, r1
 800ac70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ac74:	f7f5 fcd4 	bl	8000620 <__aeabi_dmul>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	4629      	mov	r1, r5
 800ac80:	f7f5 fb1c 	bl	80002bc <__adddf3>

		y_tmp = cbrt(Y_ic_test / yw_test);
 800ac84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac88:	f7f5 fdf4 	bl	8000874 <__aeabi_ddiv>
 800ac8c:	ec41 0b10 	vmov	d0, r0, r1
 800ac90:	f01a fc2e 	bl	80254f0 <cbrt>
 800ac94:	ec51 0b10 	vmov	r0, r1, d0
 800ac98:	f7f5 ffba 	bl	8000c10 <__aeabi_d2f>
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800ac9c:	e9d8 2300 	ldrd	r2, r3, [r8]
		y_tmp = cbrt(Y_ic_test / yw_test);
 800aca0:	ee0b 0a10 	vmov	s22, r0
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800aca4:	4639      	mov	r1, r7
 800aca6:	4630      	mov	r0, r6
 800aca8:	f7f5 fcba 	bl	8000620 <__aeabi_dmul>
 800acac:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 800acb0:	4604      	mov	r4, r0
 800acb2:	460d      	mov	r5, r1
 800acb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acb8:	f7f5 fcb2 	bl	8000620 <__aeabi_dmul>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4620      	mov	r0, r4
 800acc2:	4629      	mov	r1, r5
 800acc4:	f7f5 fafa 	bl	80002bc <__adddf3>
 800acc8:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800accc:	4604      	mov	r4, r0
 800acce:	460d      	mov	r5, r1
 800acd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800acd4:	f7f5 fca4 	bl	8000620 <__aeabi_dmul>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4620      	mov	r0, r4
 800acde:	4629      	mov	r1, r5
 800ace0:	f7f5 faec 	bl	80002bc <__adddf3>
		float L_test = 116 * y_tmp - 16;
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800ace4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ace8:	f7f5 fdc4 	bl	8000874 <__aeabi_ddiv>
 800acec:	ec41 0b10 	vmov	d0, r0, r1
 800acf0:	f01a fbfe 	bl	80254f0 <cbrt>
 800acf4:	ee1b 0a10 	vmov	r0, s22
 800acf8:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800acfc:	f7f5 fc3c 	bl	8000578 <__aeabi_f2d>
 800ad00:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800ad04:	4604      	mov	r4, r0
 800ad06:	460d      	mov	r5, r1
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	ec51 0b10 	vmov	r0, r1, d0
 800ad10:	f7f5 fad2 	bl	80002b8 <__aeabi_dsub>
 800ad14:	2200      	movs	r2, #0
 800ad16:	4b5c      	ldr	r3, [pc, #368]	; (800ae88 <cqs_func+0xb88>)
 800ad18:	f7f5 fc82 	bl	8000620 <__aeabi_dmul>
 800ad1c:	f7f5 ff78 	bl	8000c10 <__aeabi_d2f>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800ad20:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800ad24:	ee0c 0a10 	vmov	s24, r0
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800ad28:	4639      	mov	r1, r7
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f7f5 fc78 	bl	8000620 <__aeabi_dmul>
 800ad30:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800ad34:	4606      	mov	r6, r0
 800ad36:	460f      	mov	r7, r1
 800ad38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad3c:	f7f5 fc70 	bl	8000620 <__aeabi_dmul>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	4630      	mov	r0, r6
 800ad46:	4639      	mov	r1, r7
 800ad48:	f7f5 fab8 	bl	80002bc <__adddf3>
 800ad4c:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
 800ad50:	4606      	mov	r6, r0
 800ad52:	460f      	mov	r7, r1
 800ad54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad58:	f7f5 fc62 	bl	8000620 <__aeabi_dmul>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4630      	mov	r0, r6
 800ad62:	4639      	mov	r1, r7
 800ad64:	f7f5 faaa 	bl	80002bc <__adddf3>
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800ad68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad6c:	f7f5 fd82 	bl	8000874 <__aeabi_ddiv>
 800ad70:	ec41 0b10 	vmov	d0, r0, r1
 800ad74:	f01a fbbc 	bl	80254f0 <cbrt>
 800ad78:	4620      	mov	r0, r4
 800ad7a:	ec53 2b10 	vmov	r2, r3, d0
 800ad7e:	4629      	mov	r1, r5
 800ad80:	f7f5 fa9a 	bl	80002b8 <__aeabi_dsub>
 800ad84:	2200      	movs	r2, #0
 800ad86:	4b42      	ldr	r3, [pc, #264]	; (800ae90 <cqs_func+0xb90>)
 800ad88:	f7f5 fc4a 	bl	8000620 <__aeabi_dmul>
 800ad8c:	f7f5 ff40 	bl	8000c10 <__aeabi_d2f>
		float L_test = 116 * y_tmp - 16;
 800ad90:	eeab 8a09 	vfma.f32	s16, s22, s18
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800ad94:	ee0b 0a10 	vmov	s22, r0

		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800ad98:	ee6b 7a0b 	vmul.f32	s15, s22, s22
		float L_test = 116 * y_tmp - 16;
 800ad9c:	eeb0 9a48 	vmov.f32	s18, s16
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800ada0:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800ada4:	ee17 0a90 	vmov	r0, s15
 800ada8:	f7f5 fbe6 	bl	8000578 <__aeabi_f2d>
 800adac:	ec41 0b10 	vmov	d0, r0, r1
 800adb0:	f01a ff52 	bl	8025c58 <sqrt>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800adb4:	ee6a 7aaa 	vmul.f32	s15, s21, s21
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800adb8:	ec55 4b10 	vmov	r4, r5, d0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800adbc:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800adc0:	ee17 0a90 	vmov	r0, s15
 800adc4:	f7f5 fbd8 	bl	8000578 <__aeabi_f2d>
 800adc8:	ec41 0b10 	vmov	d0, r0, r1
 800adcc:	f01a ff44 	bl	8025c58 <sqrt>
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800add0:	4629      	mov	r1, r5
 800add2:	4620      	mov	r0, r4
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800add4:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800add8:	f7f5 ff1a 	bl	8000c10 <__aeabi_d2f>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800addc:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800ade0:	ee08 0a10 	vmov	s16, r0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800ade4:	ec51 0b10 	vmov	r0, r1, d0
 800ade8:	f7f5 ff12 	bl	8000c10 <__aeabi_d2f>
		float delta_c = delta_c_test - delta_c_ref;
 800adec:	ee07 0a90 	vmov	s15, r0

		bar_CQS = 0.9;
 800adf0:	a11d      	add	r1, pc, #116	; (adr r1, 800ae68 <cqs_func+0xb68>)
 800adf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf6:	4b27      	ldr	r3, [pc, #156]	; (800ae94 <cqs_func+0xb94>)
		GUI_Bar_Measure(85, 13, bar_CQS);
 800adf8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800ae98 <cqs_func+0xb98>
		bar_CQS = 0.9;
 800adfc:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ae00:	210d      	movs	r1, #13
 800ae02:	2055      	movs	r0, #85	; 0x55
		float delta_c = delta_c_test - delta_c_ref;
 800ae04:	ee38 8a67 	vsub.f32	s16, s16, s15
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ae08:	f00a ffcc 	bl	8015da4 <GUI_Bar_Measure>
	
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800ae0c:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800ae10:	ee17 0a90 	vmov	r0, s15
 800ae14:	f7f5 fbb0 	bl	8000578 <__aeabi_f2d>
 800ae18:	ee7c 7a6b 	vsub.f32	s15, s24, s23
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	ee17 0a90 	vmov	r0, s15
 800ae22:	460f      	mov	r7, r1
 800ae24:	f7f5 fba8 	bl	8000578 <__aeabi_f2d>
 800ae28:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 800ae2c:	4680      	mov	r8, r0
 800ae2e:	ee17 0a90 	vmov	r0, s15
 800ae32:	4689      	mov	r9, r1
 800ae34:	f7f5 fba0 	bl	8000578 <__aeabi_f2d>
 800ae38:	4632      	mov	r2, r6
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	460d      	mov	r5, r1
 800ae3e:	463b      	mov	r3, r7
 800ae40:	4630      	mov	r0, r6
 800ae42:	4639      	mov	r1, r7
 800ae44:	f7f5 fbec 	bl	8000620 <__aeabi_dmul>
 800ae48:	4642      	mov	r2, r8
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	464b      	mov	r3, r9
 800ae50:	4640      	mov	r0, r8
 800ae52:	4649      	mov	r1, r9
 800ae54:	f7f5 fbe4 	bl	8000620 <__aeabi_dmul>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4639      	mov	r1, r7
 800ae60:	f7f5 fa2c 	bl	80002bc <__adddf3>
 800ae64:	e01e      	b.n	800aea4 <cqs_func+0xba4>
 800ae66:	bf00      	nop
 800ae68:	cccccccd 	.word	0xcccccccd
 800ae6c:	3feccccc 	.word	0x3feccccc
 800ae70:	42e80000 	.word	0x42e80000
 800ae74:	2008bfe0 	.word	0x2008bfe0
 800ae78:	2008c168 	.word	0x2008c168
 800ae7c:	2008bee0 	.word	0x2008bee0
 800ae80:	2008c0f0 	.word	0x2008c0f0
 800ae84:	2008bf60 	.word	0x2008bf60
 800ae88:	407f4000 	.word	0x407f4000
 800ae8c:	2008c058 	.word	0x2008c058
 800ae90:	40690000 	.word	0x40690000
 800ae94:	2008bf58 	.word	0x2008bf58
 800ae98:	3f666666 	.word	0x3f666666
 800ae9c:	2000319b 	.word	0x2000319b
 800aea0:	20000140 	.word	0x20000140
 800aea4:	4622      	mov	r2, r4
 800aea6:	4606      	mov	r6, r0
 800aea8:	460f      	mov	r7, r1
 800aeaa:	462b      	mov	r3, r5
 800aeac:	4620      	mov	r0, r4
 800aeae:	4629      	mov	r1, r5
 800aeb0:	f7f5 fbb6 	bl	8000620 <__aeabi_dmul>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 f9fe 	bl	80002bc <__adddf3>
 800aec0:	ec41 0b10 	vmov	d0, r0, r1
 800aec4:	f01a fec8 	bl	8025c58 <sqrt>
 800aec8:	ec51 0b10 	vmov	r0, r1, d0
 800aecc:	f7f5 fea0 	bl	8000c10 <__aeabi_d2f>
		float E_sat = delta_E_CQS;
		if (delta_c > 0)
 800aed0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800aed8:	ee09 0a10 	vmov	s18, r0
		if (delta_c > 0)
 800aedc:	f340 82a4 	ble.w	800b428 <cqs_func+0x1128>
		{
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800aee0:	ee68 7a48 	vnmul.f32	s15, s16, s16
 800aee4:	eee9 7a09 	vfma.f32	s15, s18, s18
 800aee8:	ee17 0a90 	vmov	r0, s15
 800aeec:	f7f5 fb44 	bl	8000578 <__aeabi_f2d>
 800aef0:	ec41 0b10 	vmov	d0, r0, r1
 800aef4:	f01a feb0 	bl	8025c58 <sqrt>
 800aef8:	ec51 0b10 	vmov	r0, r1, d0
 800aefc:	f7f5 fe88 	bl	8000c10 <__aeabi_d2f>
			sum_delta_c += delta_c;
 800af00:	ee78 8a88 	vadd.f32	s17, s17, s16
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800af04:	ee07 0a90 	vmov	s15, r0
		}			

		delta_e_rms += (E_sat*E_sat);
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800af08:	ee17 0a90 	vmov	r0, s15
		delta_e_rms += (E_sat*E_sat);
 800af0c:	eea7 aaa7 	vfma.f32	s20, s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800af10:	f7f5 fb32 	bl	8000578 <__aeabi_f2d>
 800af14:	a3bc      	add	r3, pc, #752	; (adr r3, 800b208 <cqs_func+0xf08>)
 800af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1a:	f7f5 fb81 	bl	8000620 <__aeabi_dmul>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	2000      	movs	r0, #0
 800af24:	49c8      	ldr	r1, [pc, #800]	; (800b248 <cqs_func+0xf48>)
 800af26:	4cc9      	ldr	r4, [pc, #804]	; (800b24c <cqs_func+0xf4c>)
 800af28:	f7f5 f9c6 	bl	80002b8 <__aeabi_dsub>
 800af2c:	2200      	movs	r2, #0
 800af2e:	4bc8      	ldr	r3, [pc, #800]	; (800b250 <cqs_func+0xf50>)
 800af30:	f7f5 fca0 	bl	8000874 <__aeabi_ddiv>
 800af34:	ec41 0b10 	vmov	d0, r0, r1
 800af38:	f01a fc1a 	bl	8025770 <exp>
 800af3c:	2200      	movs	r2, #0
 800af3e:	4bc5      	ldr	r3, [pc, #788]	; (800b254 <cqs_func+0xf54>)
 800af40:	ec51 0b10 	vmov	r0, r1, d0
 800af44:	f7f5 f9ba 	bl	80002bc <__adddf3>
 800af48:	ec41 0b10 	vmov	d0, r0, r1
 800af4c:	f01a fc8c 	bl	8025868 <log>
 800af50:	2200      	movs	r2, #0
 800af52:	ec51 0b10 	vmov	r0, r1, d0
 800af56:	4bbe      	ldr	r3, [pc, #760]	; (800b250 <cqs_func+0xf50>)
 800af58:	f7f5 fb62 	bl	8000620 <__aeabi_dmul>
 800af5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af60:	f7f5 fb5e 	bl	8000620 <__aeabi_dmul>
 800af64:	f7f5 fe54 	bl	8000c10 <__aeabi_d2f>
 800af68:	ee07 0a90 	vmov	s15, r0
 800af6c:	4bba      	ldr	r3, [pc, #744]	; (800b258 <cqs_func+0xf58>)
		Q_i[i] = (uint8_t)Q_i_temp;		
 800af6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800af72:	6018      	str	r0, [r3, #0]
 800af74:	f10a 0a08 	add.w	sl, sl, #8
		Q_i[i] = (uint8_t)Q_i_temp;		
 800af78:	ee17 3a90 	vmov	r3, s15
	for (int i = 0; i < 15; i++)
 800af7c:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
 800af80:	eee9 9a09 	vfma.f32	s19, s18, s18
		Q_i[i] = (uint8_t)Q_i_temp;		
 800af84:	f80b 3f01 	strb.w	r3, [fp, #1]!
	for (int i = 0; i < 15; i++)
 800af88:	f47f adc7 	bne.w	800ab1a <cqs_func+0x81a>
	}
	delta_e_rms /= 15;
 800af8c:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
	delta_e_rms = sqrt(delta_e_rms);
 800af90:	eeca 7a08 	vdiv.f32	s15, s20, s16
 800af94:	ee17 0a90 	vmov	r0, s15
 800af98:	f7f5 faee 	bl	8000578 <__aeabi_f2d>
 800af9c:	ec41 0b10 	vmov	d0, r0, r1
 800afa0:	f01a fe5a 	bl	8025c58 <sqrt>
 800afa4:	ec51 0b10 	vmov	r0, r1, d0
 800afa8:	f7f5 fe32 	bl	8000c10 <__aeabi_d2f>
	sum_delta_e /= 15;
	sum_delta_e = sqrt(sum_delta_e);
 800afac:	eec9 7a88 	vdiv.f32	s15, s19, s16
	delta_e_rms = sqrt(delta_e_rms);
 800afb0:	ee09 0a10 	vmov	s18, r0
	sum_delta_e = sqrt(sum_delta_e);
 800afb4:	ee17 0a90 	vmov	r0, s15
 800afb8:	f7f5 fade 	bl	8000578 <__aeabi_f2d>
 800afbc:	ec41 0b10 	vmov	d0, r0, r1
 800afc0:	f01a fe4a 	bl	8025c58 <sqrt>
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800afc4:	ee19 0a10 	vmov	r0, s18
	sum_delta_e = sqrt(sum_delta_e);
 800afc8:	ec59 8b10 	vmov	r8, r9, d0
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800afcc:	f7f5 fad4 	bl	8000578 <__aeabi_f2d>
 800afd0:	a38d      	add	r3, pc, #564	; (adr r3, 800b208 <cqs_func+0xf08>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	f7f5 fb23 	bl	8000620 <__aeabi_dmul>
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	2000      	movs	r0, #0
 800afe0:	4999      	ldr	r1, [pc, #612]	; (800b248 <cqs_func+0xf48>)
 800afe2:	f7f5 f969 	bl	80002b8 <__aeabi_dsub>
 800afe6:	f7f5 fe13 	bl	8000c10 <__aeabi_d2f>
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800afea:	ee06 0a90 	vmov	s13, r0
 800afee:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800aff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff6:	ee17 0a10 	vmov	r0, s14
 800affa:	f7f5 fabd 	bl	8000578 <__aeabi_f2d>
 800affe:	ec41 0b10 	vmov	d0, r0, r1
 800b002:	f01a fbb5 	bl	8025770 <exp>
 800b006:	2200      	movs	r2, #0
 800b008:	4b92      	ldr	r3, [pc, #584]	; (800b254 <cqs_func+0xf54>)
 800b00a:	ec51 0b10 	vmov	r0, r1, d0
 800b00e:	f7f5 f955 	bl	80002bc <__adddf3>
 800b012:	ec41 0b10 	vmov	d0, r0, r1
 800b016:	f01a fc27 	bl	8025868 <log>

	 Qa_temp = Mcct * Qa0_100;
 800b01a:	e9d4 6700 	ldrd	r6, r7, [r4]
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800b01e:	ec51 0b10 	vmov	r0, r1, d0
 800b022:	2200      	movs	r2, #0
 800b024:	4b8a      	ldr	r3, [pc, #552]	; (800b250 <cqs_func+0xf50>)
 800b026:	f7f5 fafb 	bl	8000620 <__aeabi_dmul>
 800b02a:	f7f5 fdf1 	bl	8000c10 <__aeabi_d2f>
	 Qa_temp = Mcct * Qa0_100;
 800b02e:	f7f5 faa3 	bl	8000578 <__aeabi_f2d>
 800b032:	4632      	mov	r2, r6
 800b034:	463b      	mov	r3, r7
 800b036:	f7f5 faf3 	bl	8000620 <__aeabi_dmul>
 800b03a:	f7f5 fde9 	bl	8000c10 <__aeabi_d2f>
 800b03e:	ee07 0a90 	vmov	s15, r0
 800b042:	4b86      	ldr	r3, [pc, #536]	; (800b25c <cqs_func+0xf5c>)
	 Qa = (uint8_t)Qa_temp;
 800b044:	4a86      	ldr	r2, [pc, #536]	; (800b260 <cqs_func+0xf60>)
	 Qa_temp = Mcct * Qa0_100;
 800b046:	6018      	str	r0, [r3, #0]
	 Qa = (uint8_t)Qa_temp;
 800b048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sum_delta_e = sqrt(sum_delta_e);
 800b04c:	4649      	mov	r1, r9
	 Qa = (uint8_t)Qa_temp;
 800b04e:	ee17 3a90 	vmov	r3, s15
	sum_delta_e = sqrt(sum_delta_e);
 800b052:	4640      	mov	r0, r8
	 Qa = (uint8_t)Qa_temp;
 800b054:	7013      	strb	r3, [r2, #0]
	sum_delta_e = sqrt(sum_delta_e);
 800b056:	f7f5 fddb 	bl	8000c10 <__aeabi_d2f>
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800b05a:	f7f5 fa8d 	bl	8000578 <__aeabi_f2d>
 800b05e:	a36c      	add	r3, pc, #432	; (adr r3, 800b210 <cqs_func+0xf10>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	f7f5 fadc 	bl	8000620 <__aeabi_dmul>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	2000      	movs	r0, #0
 800b06e:	4976      	ldr	r1, [pc, #472]	; (800b248 <cqs_func+0xf48>)
 800b070:	f7f5 f922 	bl	80002b8 <__aeabi_dsub>
 800b074:	2200      	movs	r2, #0
 800b076:	4b76      	ldr	r3, [pc, #472]	; (800b250 <cqs_func+0xf50>)
 800b078:	f7f5 fbfc 	bl	8000874 <__aeabi_ddiv>
 800b07c:	ec41 0b10 	vmov	d0, r0, r1
 800b080:	f01a fb76 	bl	8025770 <exp>
 800b084:	2200      	movs	r2, #0
 800b086:	4b73      	ldr	r3, [pc, #460]	; (800b254 <cqs_func+0xf54>)
 800b088:	ec51 0b10 	vmov	r0, r1, d0
 800b08c:	f7f5 f914 	bl	80002b8 <__aeabi_dsub>
 800b090:	ec41 0b10 	vmov	d0, r0, r1
 800b094:	f01a fbe8 	bl	8025868 <log>
 800b098:	2200      	movs	r2, #0
 800b09a:	4b6d      	ldr	r3, [pc, #436]	; (800b250 <cqs_func+0xf50>)
 800b09c:	4630      	mov	r0, r6
 800b09e:	4639      	mov	r1, r7
 800b0a0:	ed8d 0b00 	vstr	d0, [sp]
 800b0a4:	f7f5 fabc 	bl	8000620 <__aeabi_dmul>
 800b0a8:	ed9d 0b00 	vldr	d0, [sp]
 800b0ac:	ec53 2b10 	vmov	r2, r3, d0
 800b0b0:	f7f5 fab6 	bl	8000620 <__aeabi_dmul>
 800b0b4:	f7f5 fdac 	bl	8000c10 <__aeabi_d2f>
 800b0b8:	ee07 0a90 	vmov	s15, r0
 800b0bc:	4b69      	ldr	r3, [pc, #420]	; (800b264 <cqs_func+0xf64>)
		Qf = (uint8_t)Qf_temp;
 800b0be:	4a6a      	ldr	r2, [pc, #424]	; (800b268 <cqs_func+0xf68>)
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800b0c0:	6018      	str	r0, [r3, #0]
		Qf = (uint8_t)Qf_temp;
 800b0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800b0c6:	e9d4 0100 	ldrd	r0, r1, [r4]
		Qf = (uint8_t)Qf_temp;
 800b0ca:	ee17 3a90 	vmov	r3, s15
 800b0ce:	7013      	strb	r3, [r2, #0]
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4b5f      	ldr	r3, [pc, #380]	; (800b250 <cqs_func+0xf50>)
 800b0d4:	f7f5 faa4 	bl	8000620 <__aeabi_dmul>
 800b0d8:	eec8 7a88 	vdiv.f32	s15, s17, s16
 800b0dc:	4604      	mov	r4, r0
 800b0de:	460d      	mov	r5, r1
 800b0e0:	ee79 7a67 	vsub.f32	s15, s18, s15
 800b0e4:	ee17 0a90 	vmov	r0, s15
 800b0e8:	f7f5 fa46 	bl	8000578 <__aeabi_f2d>
 800b0ec:	a34a      	add	r3, pc, #296	; (adr r3, 800b218 <cqs_func+0xf18>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	f7f5 fa95 	bl	8000620 <__aeabi_dmul>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	4952      	ldr	r1, [pc, #328]	; (800b248 <cqs_func+0xf48>)
 800b0fe:	f7f5 f8db 	bl	80002b8 <__aeabi_dsub>
 800b102:	2200      	movs	r2, #0
 800b104:	4b52      	ldr	r3, [pc, #328]	; (800b250 <cqs_func+0xf50>)
 800b106:	f7f5 fbb5 	bl	8000874 <__aeabi_ddiv>
 800b10a:	ec41 0b10 	vmov	d0, r0, r1
 800b10e:	f01a fb2f 	bl	8025770 <exp>
 800b112:	2200      	movs	r2, #0
 800b114:	4b4f      	ldr	r3, [pc, #316]	; (800b254 <cqs_func+0xf54>)
 800b116:	ec51 0b10 	vmov	r0, r1, d0
 800b11a:	f7f5 f8cd 	bl	80002b8 <__aeabi_dsub>
 800b11e:	ec41 0b10 	vmov	d0, r0, r1
 800b122:	f01a fba1 	bl	8025868 <log>
 800b126:	4620      	mov	r0, r4
 800b128:	ec53 2b10 	vmov	r2, r3, d0
 800b12c:	4629      	mov	r1, r5
 800b12e:	f7f5 fa77 	bl	8000620 <__aeabi_dmul>
 800b132:	f7f5 fd6d 	bl	8000c10 <__aeabi_d2f>
 800b136:	ee07 0a90 	vmov	s15, r0
 800b13a:	4b4c      	ldr	r3, [pc, #304]	; (800b26c <cqs_func+0xf6c>)
		Qp = (uint8_t)Qp_temp;
 800b13c:	4a4c      	ldr	r2, [pc, #304]	; (800b270 <cqs_func+0xf70>)
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800b13e:	6018      	str	r0, [r3, #0]
		Qp = (uint8_t)Qp_temp;
 800b140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	
		bar_CQS = 1.0;
 800b144:	4943      	ldr	r1, [pc, #268]	; (800b254 <cqs_func+0xf54>)
		Qp = (uint8_t)Qp_temp;
 800b146:	ee17 3a90 	vmov	r3, s15
 800b14a:	7013      	strb	r3, [r2, #0]
		bar_CQS = 1.0;
 800b14c:	4b49      	ldr	r3, [pc, #292]	; (800b274 <cqs_func+0xf74>)
 800b14e:	2000      	movs	r0, #0
 800b150:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800b154:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b158:	210d      	movs	r1, #13
 800b15a:	2055      	movs	r0, #85	; 0x55
 800b15c:	b02f      	add	sp, #188	; 0xbc
 800b15e:	ecbd 8b0a 	vpop	{d8-d12}
 800b162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Bar_Measure(85, 13, bar_CQS);
 800b166:	f00a be1d 	b.w	8015da4 <GUI_Bar_Measure>
	if (CCT_measure < 5000)
 800b16a:	9a04      	ldr	r2, [sp, #16]
 800b16c:	f241 3387 	movw	r3, #4999	; 0x1387
 800b170:	429a      	cmp	r2, r3
 800b172:	f67f a928 	bls.w	800a3c6 <cqs_func+0xc6>
		if (CCT_measure < 7000)
 800b176:	9a04      	ldr	r2, [sp, #16]
 800b178:	f641 3357 	movw	r3, #6999	; 0x1b57
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d97b      	bls.n	800b278 <cqs_func+0xf78>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b180:	9804      	ldr	r0, [sp, #16]
 800b182:	f7f5 f9d7 	bl	8000534 <__aeabi_ui2d>
 800b186:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800b220 <cqs_func+0xf20>
 800b18a:	ec41 0b10 	vmov	d0, r0, r1
 800b18e:	f01a fbeb 	bl	8025968 <pow>
 800b192:	eddd 7a04 	vldr	s15, [sp, #16]
 800b196:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b19a:	ed8d 0b00 	vstr	d0, [sp]
 800b19e:	ee68 7a08 	vmul.f32	s15, s16, s16
 800b1a2:	ee17 0a90 	vmov	r0, s15
 800b1a6:	f7f5 f9e7 	bl	8000578 <__aeabi_f2d>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	a11e      	add	r1, pc, #120	; (adr r1, 800b228 <cqs_func+0xf28>)
 800b1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1b4:	f7f5 fb5e 	bl	8000874 <__aeabi_ddiv>
 800b1b8:	ed9d 0b00 	vldr	d0, [sp]
 800b1bc:	4604      	mov	r4, r0
 800b1be:	ec53 2b10 	vmov	r2, r3, d0
 800b1c2:	460d      	mov	r5, r1
 800b1c4:	a11a      	add	r1, pc, #104	; (adr r1, 800b230 <cqs_func+0xf30>)
 800b1c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ca:	f7f5 fb53 	bl	8000874 <__aeabi_ddiv>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	f7f5 f871 	bl	80002bc <__adddf3>
 800b1da:	4604      	mov	r4, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b1dc:	ee18 0a10 	vmov	r0, s16
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b1e0:	460d      	mov	r5, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b1e2:	f7f5 f9c9 	bl	8000578 <__aeabi_f2d>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	a113      	add	r1, pc, #76	; (adr r1, 800b238 <cqs_func+0xf38>)
 800b1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1f0:	f7f5 fb40 	bl	8000874 <__aeabi_ddiv>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	f7f5 f85e 	bl	80002bc <__adddf3>
 800b200:	a30f      	add	r3, pc, #60	; (adr r3, 800b240 <cqs_func+0xf40>)
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	e073      	b.n	800b2f0 <cqs_func+0xff0>
 800b208:	cccccccd 	.word	0xcccccccd
 800b20c:	4008cccc 	.word	0x4008cccc
 800b210:	d70a3d71 	.word	0xd70a3d71
 800b214:	400770a3 	.word	0x400770a3
 800b218:	a3d70a3d 	.word	0xa3d70a3d
 800b21c:	400e3d70 	.word	0x400e3d70
 800b220:	00000000 	.word	0x00000000
 800b224:	40080000 	.word	0x40080000
 800b228:	00000000 	.word	0x00000000
 800b22c:	413d04e8 	.word	0x413d04e8
 800b230:	00000001 	.word	0x00000001
 800b234:	c1dde5cf 	.word	0xc1dde5cf
 800b238:	28f5c290 	.word	0x28f5c290
 800b23c:	406eef5c 	.word	0x406eef5c
 800b240:	a3ec02f3 	.word	0xa3ec02f3
 800b244:	3fce5753 	.word	0x3fce5753
 800b248:	40590000 	.word	0x40590000
 800b24c:	20000188 	.word	0x20000188
 800b250:	40240000 	.word	0x40240000
 800b254:	3ff00000 	.word	0x3ff00000
 800b258:	2008c0e8 	.word	0x2008c0e8
 800b25c:	2008c1e0 	.word	0x2008c1e0
 800b260:	200031ab 	.word	0x200031ab
 800b264:	2008c1e4 	.word	0x2008c1e4
 800b268:	200031ac 	.word	0x200031ac
 800b26c:	2008bfd8 	.word	0x2008bfd8
 800b270:	200031ad 	.word	0x200031ad
 800b274:	2008bf58 	.word	0x2008bf58
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b278:	eddd 7a04 	vldr	s15, [sp, #16]
 800b27c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b280:	ee68 8a08 	vmul.f32	s17, s16, s16
 800b284:	ee68 7a28 	vmul.f32	s15, s16, s17
 800b288:	ee17 0a90 	vmov	r0, s15
 800b28c:	f7f5 f974 	bl	8000578 <__aeabi_f2d>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	a181      	add	r1, pc, #516	; (adr r1, 800b49c <cqs_func+0x119c>)
 800b296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b29a:	f7f5 faeb 	bl	8000874 <__aeabi_ddiv>
 800b29e:	4604      	mov	r4, r0
 800b2a0:	ee18 0a90 	vmov	r0, s17
 800b2a4:	460d      	mov	r5, r1
 800b2a6:	f7f5 f967 	bl	8000578 <__aeabi_f2d>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	a17d      	add	r1, pc, #500	; (adr r1, 800b4a4 <cqs_func+0x11a4>)
 800b2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2b4:	f7f5 fade 	bl	8000874 <__aeabi_ddiv>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4620      	mov	r0, r4
 800b2be:	4629      	mov	r1, r5
 800b2c0:	f7f4 fffc 	bl	80002bc <__adddf3>
 800b2c4:	4604      	mov	r4, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800b2c6:	ee18 0a10 	vmov	r0, s16
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b2ca:	460d      	mov	r5, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800b2cc:	f7f5 f954 	bl	8000578 <__aeabi_f2d>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	a175      	add	r1, pc, #468	; (adr r1, 800b4ac <cqs_func+0x11ac>)
 800b2d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2da:	f7f5 facb 	bl	8000874 <__aeabi_ddiv>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	f7f4 ffe9 	bl	80002bc <__adddf3>
 800b2ea:	a372      	add	r3, pc, #456	; (adr r3, 800b4b4 <cqs_func+0x11b4>)
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b2f0:	f7f4 ffe4 	bl	80002bc <__adddf3>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b2f4:	4b64      	ldr	r3, [pc, #400]	; (800b488 <cqs_func+0x1188>)
 800b2f6:	e9c3 0100 	strd	r0, r1, [r3]
		yD = -3 * xD*xD + 2.87*xD - 0.275;
 800b2fa:	4b63      	ldr	r3, [pc, #396]	; (800b488 <cqs_func+0x1188>)
 800b2fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b300:	2200      	movs	r2, #0
 800b302:	4b62      	ldr	r3, [pc, #392]	; (800b48c <cqs_func+0x118c>)
 800b304:	4620      	mov	r0, r4
 800b306:	4629      	mov	r1, r5
 800b308:	f7f5 f98a 	bl	8000620 <__aeabi_dmul>
 800b30c:	4622      	mov	r2, r4
 800b30e:	462b      	mov	r3, r5
 800b310:	f7f5 f986 	bl	8000620 <__aeabi_dmul>
 800b314:	a346      	add	r3, pc, #280	; (adr r3, 800b430 <cqs_func+0x1130>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	4606      	mov	r6, r0
 800b31c:	460f      	mov	r7, r1
 800b31e:	4620      	mov	r0, r4
 800b320:	4629      	mov	r1, r5
 800b322:	f7f5 f97d 	bl	8000620 <__aeabi_dmul>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4630      	mov	r0, r6
 800b32c:	4639      	mov	r1, r7
 800b32e:	f7f4 ffc5 	bl	80002bc <__adddf3>
 800b332:	a341      	add	r3, pc, #260	; (adr r3, 800b438 <cqs_func+0x1138>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f7f4 ffbe 	bl	80002b8 <__aeabi_dsub>
 800b33c:	4b54      	ldr	r3, [pc, #336]	; (800b490 <cqs_func+0x1190>)
 800b33e:	4606      	mov	r6, r0
 800b340:	460f      	mov	r7, r1
 800b342:	e9c3 6700 	strd	r6, r7, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b346:	4620      	mov	r0, r4
 800b348:	a33d      	add	r3, pc, #244	; (adr r3, 800b440 <cqs_func+0x1140>)
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	4629      	mov	r1, r5
 800b350:	f7f5 f966 	bl	8000620 <__aeabi_dmul>
 800b354:	a33c      	add	r3, pc, #240	; (adr r3, 800b448 <cqs_func+0x1148>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	f7f4 ffaf 	bl	80002bc <__adddf3>
 800b35e:	a33c      	add	r3, pc, #240	; (adr r3, 800b450 <cqs_func+0x1150>)
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	4680      	mov	r8, r0
 800b366:	4689      	mov	r9, r1
 800b368:	4630      	mov	r0, r6
 800b36a:	4639      	mov	r1, r7
 800b36c:	f7f5 f958 	bl	8000620 <__aeabi_dmul>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4640      	mov	r0, r8
 800b376:	4649      	mov	r1, r9
 800b378:	f7f4 ff9e 	bl	80002b8 <__aeabi_dsub>
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800b37c:	a336      	add	r3, pc, #216	; (adr r3, 800b458 <cqs_func+0x1158>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b382:	4680      	mov	r8, r0
 800b384:	4689      	mov	r9, r1
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800b386:	4620      	mov	r0, r4
 800b388:	4629      	mov	r1, r5
 800b38a:	f7f5 f949 	bl	8000620 <__aeabi_dmul>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	a133      	add	r1, pc, #204	; (adr r1, 800b460 <cqs_func+0x1160>)
 800b394:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b398:	f7f4 ff8e 	bl	80002b8 <__aeabi_dsub>
 800b39c:	a332      	add	r3, pc, #200	; (adr r3, 800b468 <cqs_func+0x1168>)
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	4682      	mov	sl, r0
 800b3a4:	468b      	mov	fp, r1
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	f7f5 f939 	bl	8000620 <__aeabi_dmul>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	4659      	mov	r1, fp
 800b3b6:	f7f4 ff81 	bl	80002bc <__adddf3>
 800b3ba:	f7f5 fc29 	bl	8000c10 <__aeabi_d2f>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b3be:	f7f5 f8db 	bl	8000578 <__aeabi_f2d>
 800b3c2:	4642      	mov	r2, r8
 800b3c4:	464b      	mov	r3, r9
 800b3c6:	f7f5 fa55 	bl	8000874 <__aeabi_ddiv>
 800b3ca:	f7f5 fc21 	bl	8000c10 <__aeabi_d2f>
 800b3ce:	4b31      	ldr	r3, [pc, #196]	; (800b494 <cqs_func+0x1194>)
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800b3d0:	4629      	mov	r1, r5
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b3d2:	6018      	str	r0, [r3, #0]
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800b3d4:	a326      	add	r3, pc, #152	; (adr r3, 800b470 <cqs_func+0x1170>)
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f7f5 f920 	bl	8000620 <__aeabi_dmul>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	a124      	add	r1, pc, #144	; (adr r1, 800b478 <cqs_func+0x1178>)
 800b3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ea:	f7f4 ff65 	bl	80002b8 <__aeabi_dsub>
 800b3ee:	a324      	add	r3, pc, #144	; (adr r3, 800b480 <cqs_func+0x1180>)
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	460d      	mov	r5, r1
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	f7f5 f910 	bl	8000620 <__aeabi_dmul>
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	4620      	mov	r0, r4
 800b406:	4629      	mov	r1, r5
 800b408:	f7f4 ff58 	bl	80002bc <__adddf3>
 800b40c:	f7f5 fc00 	bl	8000c10 <__aeabi_d2f>
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b410:	f7f5 f8b2 	bl	8000578 <__aeabi_f2d>
 800b414:	464b      	mov	r3, r9
 800b416:	4642      	mov	r2, r8
 800b418:	f7f5 fa2c 	bl	8000874 <__aeabi_ddiv>
 800b41c:	f7f5 fbf8 	bl	8000c10 <__aeabi_d2f>
 800b420:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <cqs_func+0x1198>)
 800b422:	6018      	str	r0, [r3, #0]
 800b424:	f7fe bfd2 	b.w	800a3cc <cqs_func+0xcc>
		float E_sat = delta_E_CQS;
 800b428:	ee07 0a90 	vmov	s15, r0
 800b42c:	e56c      	b.n	800af08 <cqs_func+0xc08>
 800b42e:	bf00      	nop
 800b430:	8f5c28f6 	.word	0x8f5c28f6
 800b434:	4006f5c2 	.word	0x4006f5c2
 800b438:	9999999a 	.word	0x9999999a
 800b43c:	3fd19999 	.word	0x3fd19999
 800b440:	af4f0d84 	.word	0xaf4f0d84
 800b444:	3fd06594 	.word	0x3fd06594
 800b448:	9f559b3d 	.word	0x9f559b3d
 800b44c:	3f98adab 	.word	0x3f98adab
 800b450:	487fcb92 	.word	0x487fcb92
 800b454:	3fe77dbf 	.word	0x3fe77dbf
 800b458:	17c1bda5 	.word	0x17c1bda5
 800b45c:	3ffc5326 	.word	0x3ffc5326
 800b460:	76c8b439 	.word	0x76c8b439
 800b464:	bff59fbe 	.word	0xbff59fbe
 800b468:	0aa64c30 	.word	0x0aa64c30
 800b46c:	4017a546 	.word	0x4017a546
 800b470:	205bc01a 	.word	0x205bc01a
 800b474:	403f7141 	.word	0x403f7141
 800b478:	eb851eb8 	.word	0xeb851eb8
 800b47c:	3f9eb851 	.word	0x3f9eb851
 800b480:	ee631f8a 	.word	0xee631f8a
 800b484:	403e125a 	.word	0x403e125a
 800b488:	2008c0e0 	.word	0x2008c0e0
 800b48c:	c0080000 	.word	0xc0080000
 800b490:	2008c0d8 	.word	0x2008c0d8
 800b494:	20003194 	.word	0x20003194
 800b498:	20003198 	.word	0x20003198
 800b49c:	dc000000 	.word	0xdc000000
 800b4a0:	c1f12993 	.word	0xc1f12993
 800b4a4:	00000000 	.word	0x00000000
 800b4a8:	4146a47c 	.word	0x4146a47c
 800b4ac:	3d70a3d7 	.word	0x3d70a3d7
 800b4b0:	4058c70a 	.word	0x4058c70a
 800b4b4:	d594f26b 	.word	0xd594f26b
 800b4b8:	3fcf3d74 	.word	0x3fcf3d74

0800b4bc <CQS_Axes>:
#include "CQS_graph.h"
extern uint8_t TFT_direction;


void CQS_Axes(uint8_t direction){
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	b082      	sub	sp, #8
	if (direction == 0x00)
 800b4c0:	b128      	cbz	r0, 800b4ce <CQS_Axes+0x12>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
	} else if (direction == 0x01)
 800b4c2:	2801      	cmp	r0, #1
 800b4c4:	d06e      	beq.n	800b5a4 <CQS_Axes+0xe8>
		
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
	}else if (direction == 0x02)
 800b4c6:	2802      	cmp	r0, #2
 800b4c8:	d039      	beq.n	800b53e <CQS_Axes+0x82>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
		}
}
 800b4ca:	b002      	add	sp, #8
 800b4cc:	bd10      	pop	{r4, pc}
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800b4ce:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b4d2:	9400      	str	r4, [sp, #0]
 800b4d4:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800b4d8:	2212      	movs	r2, #18
 800b4da:	215f      	movs	r1, #95	; 0x5f
 800b4dc:	2010      	movs	r0, #16
 800b4de:	f013 fad7 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800b4e2:	9400      	str	r4, [sp, #0]
 800b4e4:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800b4e8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b4ec:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800b4f0:	2010      	movs	r0, #16
 800b4f2:	f013 facd 	bl	801ea90 <TFT_FillRectangle>
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800b4f6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	9400      	str	r4, [sp, #0]
 800b4fe:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b502:	2010      	movs	r0, #16
 800b504:	f013 fa5c 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800b508:	f240 1301 	movw	r3, #257	; 0x101
 800b50c:	4619      	mov	r1, r3
 800b50e:	9400      	str	r4, [sp, #0]
 800b510:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b514:	2010      	movs	r0, #16
 800b516:	f013 fa53 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800b51a:	23b5      	movs	r3, #181	; 0xb5
 800b51c:	4619      	mov	r1, r3
 800b51e:	9400      	str	r4, [sp, #0]
 800b520:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b524:	2010      	movs	r0, #16
 800b526:	f013 fa4b 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800b52a:	2369      	movs	r3, #105	; 0x69
 800b52c:	9400      	str	r4, [sp, #0]
 800b52e:	4619      	mov	r1, r3
 800b530:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b534:	2010      	movs	r0, #16
 800b536:	f013 fa43 	bl	801e9c0 <TFT_DrawLine>
}
 800b53a:	b002      	add	sp, #8
 800b53c:	bd10      	pop	{r4, pc}
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800b53e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b542:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b546:	2210      	movs	r2, #16
 800b548:	214a      	movs	r1, #74	; 0x4a
 800b54a:	2012      	movs	r0, #18
 800b54c:	9400      	str	r4, [sp, #0]
 800b54e:	f013 fa9f 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800b552:	234c      	movs	r3, #76	; 0x4c
 800b554:	22e8      	movs	r2, #232	; 0xe8
 800b556:	214a      	movs	r1, #74	; 0x4a
 800b558:	2011      	movs	r0, #17
 800b55a:	9400      	str	r4, [sp, #0]
 800b55c:	f013 fa98 	bl	801ea90 <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800b560:	2244      	movs	r2, #68	; 0x44
 800b562:	4610      	mov	r0, r2
 800b564:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b568:	2146      	movs	r1, #70	; 0x46
 800b56a:	9400      	str	r4, [sp, #0]
 800b56c:	f013 fa28 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800b570:	2279      	movs	r2, #121	; 0x79
 800b572:	4610      	mov	r0, r2
 800b574:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b578:	2146      	movs	r1, #70	; 0x46
 800b57a:	9400      	str	r4, [sp, #0]
 800b57c:	f013 fa20 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800b580:	22ae      	movs	r2, #174	; 0xae
 800b582:	4610      	mov	r0, r2
 800b584:	9400      	str	r4, [sp, #0]
 800b586:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b58a:	2146      	movs	r1, #70	; 0x46
 800b58c:	f013 fa18 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b590:	22e3      	movs	r2, #227	; 0xe3
 800b592:	9400      	str	r4, [sp, #0]
 800b594:	4610      	mov	r0, r2
 800b596:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b59a:	2146      	movs	r1, #70	; 0x46
 800b59c:	f013 fa10 	bl	801e9c0 <TFT_DrawLine>
}
 800b5a0:	b002      	add	sp, #8
 800b5a2:	bd10      	pop	{r4, pc}
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800b5a4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b5a8:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b5ac:	22ff      	movs	r2, #255	; 0xff
 800b5ae:	2146      	movs	r1, #70	; 0x46
 800b5b0:	20fd      	movs	r0, #253	; 0xfd
 800b5b2:	9400      	str	r4, [sp, #0]
 800b5b4:	f013 fa6c 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800b5b8:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b5bc:	22ff      	movs	r2, #255	; 0xff
 800b5be:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800b5c2:	2028      	movs	r0, #40	; 0x28
 800b5c4:	9400      	str	r4, [sp, #0]
 800b5c6:	f013 fa63 	bl	801ea90 <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800b5ca:	22cc      	movs	r2, #204	; 0xcc
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b5d2:	2146      	movs	r1, #70	; 0x46
 800b5d4:	9400      	str	r4, [sp, #0]
 800b5d6:	f013 f9f3 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800b5da:	2297      	movs	r2, #151	; 0x97
 800b5dc:	4610      	mov	r0, r2
 800b5de:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b5e2:	2146      	movs	r1, #70	; 0x46
 800b5e4:	9400      	str	r4, [sp, #0]
 800b5e6:	f013 f9eb 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800b5ea:	2262      	movs	r2, #98	; 0x62
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	9400      	str	r4, [sp, #0]
 800b5f0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b5f4:	2146      	movs	r1, #70	; 0x46
 800b5f6:	f013 f9e3 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800b5fa:	222d      	movs	r2, #45	; 0x2d
 800b5fc:	e7c9      	b.n	800b592 <CQS_Axes+0xd6>
 800b5fe:	bf00      	nop

0800b600 <CQS_Axes_Measure>:

void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b602:	b083      	sub	sp, #12

	char buffer[2] = {0};
 800b604:	2400      	movs	r4, #0
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b606:	460f      	mov	r7, r1
 800b608:	4616      	mov	r6, r2
 800b60a:	461d      	mov	r5, r3
	char buffer[2] = {0};
 800b60c:	f8ad 4004 	strh.w	r4, [sp, #4]
	
	
if (direction == 0x00)
 800b610:	2800      	cmp	r0, #0
 800b612:	d065      	beq.n	800b6e0 <CQS_Axes_Measure+0xe0>

		sprintf (buffer, "%d", Qf);
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
	} else if(direction != 0x00)
	{
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b614:	4c5f      	ldr	r4, [pc, #380]	; (800b794 <CQS_Axes_Measure+0x194>)
 800b616:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800b618:	bf14      	ite	ne
 800b61a:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b61c:	7020      	strbeq	r0, [r4, #0]

		TFT_SetTextColor(TFT_White);
 800b61e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b622:	bf18      	it	ne
 800b624:	7023      	strbne	r3, [r4, #0]
		TFT_SetTextColor(TFT_White);
 800b626:	f013 fcdd 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b62a:	2063      	movs	r0, #99	; 0x63
 800b62c:	f013 fce0 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b630:	4859      	ldr	r0, [pc, #356]	; (800b798 <CQS_Axes_Measure+0x198>)
 800b632:	f013 fcd1 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800b636:	2261      	movs	r2, #97	; 0x61
 800b638:	2110      	movs	r1, #16
 800b63a:	2064      	movs	r0, #100	; 0x64
 800b63c:	f013 fdc2 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b640:	4856      	ldr	r0, [pc, #344]	; (800b79c <CQS_Axes_Measure+0x19c>)
 800b642:	f013 fcc9 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'Q');
 800b646:	2251      	movs	r2, #81	; 0x51
 800b648:	210e      	movs	r1, #14
 800b64a:	2055      	movs	r0, #85	; 0x55
 800b64c:	f013 fdba 	bl	801f1c4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qa);
 800b650:	463a      	mov	r2, r7
 800b652:	a801      	add	r0, sp, #4
 800b654:	4952      	ldr	r1, [pc, #328]	; (800b7a0 <CQS_Axes_Measure+0x1a0>)
 800b656:	f017 f85b 	bl	8022710 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b65a:	2303      	movs	r3, #3
 800b65c:	aa01      	add	r2, sp, #4
 800b65e:	210e      	movs	r1, #14
 800b660:	207d      	movs	r0, #125	; 0x7d
 800b662:	f013 fe25 	bl	801f2b0 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b666:	484c      	ldr	r0, [pc, #304]	; (800b798 <CQS_Axes_Measure+0x198>)
 800b668:	f013 fcb6 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(216, 16, 'p');
 800b66c:	2270      	movs	r2, #112	; 0x70
 800b66e:	2110      	movs	r1, #16
 800b670:	20d8      	movs	r0, #216	; 0xd8
 800b672:	f013 fda7 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800b676:	4849      	ldr	r0, [pc, #292]	; (800b79c <CQS_Axes_Measure+0x19c>)
 800b678:	f013 fcae 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(199, 16-2, 'Q');
 800b67c:	2251      	movs	r2, #81	; 0x51
 800b67e:	210e      	movs	r1, #14
 800b680:	20c7      	movs	r0, #199	; 0xc7
 800b682:	f013 fd9f 	bl	801f1c4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qp);
 800b686:	4632      	mov	r2, r6
 800b688:	a801      	add	r0, sp, #4
 800b68a:	4945      	ldr	r1, [pc, #276]	; (800b7a0 <CQS_Axes_Measure+0x1a0>)
 800b68c:	f017 f840 	bl	8022710 <sprintf>
		TFT_DisplayString(252, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b690:	2303      	movs	r3, #3
 800b692:	aa01      	add	r2, sp, #4
 800b694:	210e      	movs	r1, #14
 800b696:	20fc      	movs	r0, #252	; 0xfc
 800b698:	f013 fe0a 	bl	801f2b0 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b69c:	483e      	ldr	r0, [pc, #248]	; (800b798 <CQS_Axes_Measure+0x198>)
 800b69e:	f013 fc9b 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(340, 16-2, 'f');
 800b6a2:	2266      	movs	r2, #102	; 0x66
 800b6a4:	210e      	movs	r1, #14
 800b6a6:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800b6aa:	f013 fd8b 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b6ae:	483b      	ldr	r0, [pc, #236]	; (800b79c <CQS_Axes_Measure+0x19c>)
 800b6b0:	f013 fc92 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(325, 16-2, 'Q');
 800b6b4:	2251      	movs	r2, #81	; 0x51
 800b6b6:	210e      	movs	r1, #14
 800b6b8:	f240 1045 	movw	r0, #325	; 0x145
 800b6bc:	f013 fd82 	bl	801f1c4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qf);
 800b6c0:	462a      	mov	r2, r5
 800b6c2:	a801      	add	r0, sp, #4
 800b6c4:	4936      	ldr	r1, [pc, #216]	; (800b7a0 <CQS_Axes_Measure+0x1a0>)
 800b6c6:	f017 f823 	bl	8022710 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b6ca:	aa01      	add	r2, sp, #4
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	210e      	movs	r1, #14
 800b6d0:	f240 106d 	movw	r0, #365	; 0x16d
 800b6d4:	f013 fdec 	bl	801f2b0 <TFT_DisplayString>
		TFT_direction = 0x00;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	7023      	strb	r3, [r4, #0]
	}
}
 800b6dc:	b003      	add	sp, #12
 800b6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		TFT_SetTextColor(TFT_White);
 800b6e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b6e4:	f013 fc7e 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b6e8:	2063      	movs	r0, #99	; 0x63
 800b6ea:	f013 fc81 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b6ee:	482a      	ldr	r0, [pc, #168]	; (800b798 <CQS_Axes_Measure+0x198>)
 800b6f0:	f013 fc72 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(20, 70, 'a');
 800b6f4:	2261      	movs	r2, #97	; 0x61
 800b6f6:	2146      	movs	r1, #70	; 0x46
 800b6f8:	2014      	movs	r0, #20
 800b6fa:	f013 fd63 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b6fe:	4827      	ldr	r0, [pc, #156]	; (800b79c <CQS_Axes_Measure+0x19c>)
 800b700:	f013 fc6a 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(5, 70-2, 'Q');
 800b704:	2251      	movs	r2, #81	; 0x51
 800b706:	2144      	movs	r1, #68	; 0x44
 800b708:	2005      	movs	r0, #5
 800b70a:	f013 fd5b 	bl	801f1c4 <TFT_DrawChar>
		sprintf (buffer, "%d", Qa);
 800b70e:	463a      	mov	r2, r7
 800b710:	a801      	add	r0, sp, #4
 800b712:	4923      	ldr	r1, [pc, #140]	; (800b7a0 <CQS_Axes_Measure+0x1a0>)
 800b714:	f016 fffc 	bl	8022710 <sprintf>
		TFT_DisplayString(39, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b718:	2303      	movs	r3, #3
 800b71a:	aa01      	add	r2, sp, #4
 800b71c:	2144      	movs	r1, #68	; 0x44
 800b71e:	2027      	movs	r0, #39	; 0x27
 800b720:	f013 fdc6 	bl	801f2b0 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b724:	481c      	ldr	r0, [pc, #112]	; (800b798 <CQS_Axes_Measure+0x198>)
 800b726:	f013 fc57 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(112, 70, 'p');
 800b72a:	2270      	movs	r2, #112	; 0x70
 800b72c:	4610      	mov	r0, r2
 800b72e:	2146      	movs	r1, #70	; 0x46
 800b730:	f013 fd48 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b734:	4819      	ldr	r0, [pc, #100]	; (800b79c <CQS_Axes_Measure+0x19c>)
 800b736:	f013 fc4f 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(93, 70-2, 'Q');
 800b73a:	2251      	movs	r2, #81	; 0x51
 800b73c:	2144      	movs	r1, #68	; 0x44
 800b73e:	205d      	movs	r0, #93	; 0x5d
 800b740:	f013 fd40 	bl	801f1c4 <TFT_DrawChar>
		sprintf (buffer, "%d", Qp);
 800b744:	4632      	mov	r2, r6
 800b746:	a801      	add	r0, sp, #4
 800b748:	4915      	ldr	r1, [pc, #84]	; (800b7a0 <CQS_Axes_Measure+0x1a0>)
 800b74a:	f016 ffe1 	bl	8022710 <sprintf>
		TFT_DisplayString(130, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b74e:	2303      	movs	r3, #3
 800b750:	aa01      	add	r2, sp, #4
 800b752:	2144      	movs	r1, #68	; 0x44
 800b754:	2082      	movs	r0, #130	; 0x82
 800b756:	f013 fdab 	bl	801f2b0 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b75a:	480f      	ldr	r0, [pc, #60]	; (800b798 <CQS_Axes_Measure+0x198>)
 800b75c:	f013 fc3c 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(206, 70, 'f');
 800b760:	2266      	movs	r2, #102	; 0x66
 800b762:	2146      	movs	r1, #70	; 0x46
 800b764:	20ce      	movs	r0, #206	; 0xce
 800b766:	f013 fd2d 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b76a:	480c      	ldr	r0, [pc, #48]	; (800b79c <CQS_Axes_Measure+0x19c>)
 800b76c:	f013 fc34 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(191, 70-2, 'Q');
 800b770:	2251      	movs	r2, #81	; 0x51
 800b772:	2144      	movs	r1, #68	; 0x44
 800b774:	20bf      	movs	r0, #191	; 0xbf
 800b776:	f013 fd25 	bl	801f1c4 <TFT_DrawChar>
		sprintf (buffer, "%d", Qf);
 800b77a:	462a      	mov	r2, r5
 800b77c:	a801      	add	r0, sp, #4
 800b77e:	4908      	ldr	r1, [pc, #32]	; (800b7a0 <CQS_Axes_Measure+0x1a0>)
 800b780:	f016 ffc6 	bl	8022710 <sprintf>
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b784:	aa01      	add	r2, sp, #4
 800b786:	2303      	movs	r3, #3
 800b788:	2144      	movs	r1, #68	; 0x44
 800b78a:	20e6      	movs	r0, #230	; 0xe6
 800b78c:	f013 fd90 	bl	801f2b0 <TFT_DisplayString>
}
 800b790:	b003      	add	sp, #12
 800b792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b794:	20005218 	.word	0x20005218
 800b798:	200001c0 	.word	0x200001c0
 800b79c:	200001b0 	.word	0x200001b0
 800b7a0:	08027384 	.word	0x08027384

0800b7a4 <CQS_Axes_Text>:

void CQS_Axes_Text(uint8_t direction){
 800b7a4:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	f000 8137 	beq.w	800ba1c <CQS_Axes_Text+0x278>
		TFT_DrawChar(0, 105, '1');
		TFT_DrawChar(4, 105, '0');
		TFT_DrawChar(9, 105, '0');
	} else if(direction != 0x00)
	{
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b7ae:	4d99      	ldr	r5, [pc, #612]	; (800ba14 <CQS_Axes_Text+0x270>)
 800b7b0:	2801      	cmp	r0, #1
 800b7b2:	bf0c      	ite	eq
 800b7b4:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800b7b6:	2302      	movne	r3, #2

		TFT_SetTextColor(TFT_White);
 800b7b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b7bc:	bf18      	it	ne
 800b7be:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b7c0:	f013 fc10 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b7c4:	2063      	movs	r0, #99	; 0x63
 800b7c6:	f013 fc13 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800b7ca:	4893      	ldr	r0, [pc, #588]	; (800ba18 <CQS_Axes_Text+0x274>)
 800b7cc:	f013 fc04 	bl	801efd8 <TFT_SetFont>
		
		TFT_DrawChar(87, 258, 'Q');
 800b7d0:	2251      	movs	r2, #81	; 0x51
 800b7d2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b7d6:	2057      	movs	r0, #87	; 0x57
 800b7d8:	f013 fcf4 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800b7dc:	2231      	movs	r2, #49	; 0x31
 800b7de:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b7e2:	205d      	movs	r0, #93	; 0x5d
 800b7e4:	f013 fcee 	bl	801f1c4 <TFT_DrawChar>

		TFT_DrawChar(109, 258, 'Q');
 800b7e8:	2251      	movs	r2, #81	; 0x51
 800b7ea:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b7ee:	206d      	movs	r0, #109	; 0x6d
 800b7f0:	f013 fce8 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800b7f4:	2232      	movs	r2, #50	; 0x32
 800b7f6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b7fa:	2073      	movs	r0, #115	; 0x73
 800b7fc:	f013 fce2 	bl	801f1c4 <TFT_DrawChar>

		TFT_DrawChar(131, 258, 'Q');
 800b800:	2251      	movs	r2, #81	; 0x51
 800b802:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b806:	2083      	movs	r0, #131	; 0x83
 800b808:	f013 fcdc 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800b80c:	2233      	movs	r2, #51	; 0x33
 800b80e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b812:	2089      	movs	r0, #137	; 0x89
 800b814:	f013 fcd6 	bl	801f1c4 <TFT_DrawChar>

		TFT_DrawChar(153, 258, 'Q');
 800b818:	2251      	movs	r2, #81	; 0x51
 800b81a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b81e:	2099      	movs	r0, #153	; 0x99
 800b820:	f013 fcd0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800b824:	2234      	movs	r2, #52	; 0x34
 800b826:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b82a:	209f      	movs	r0, #159	; 0x9f
 800b82c:	f013 fcca 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(175, 258, 'Q');
 800b830:	2251      	movs	r2, #81	; 0x51
 800b832:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b836:	20af      	movs	r0, #175	; 0xaf
 800b838:	f013 fcc4 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800b83c:	2235      	movs	r2, #53	; 0x35
 800b83e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b842:	20b5      	movs	r0, #181	; 0xb5
 800b844:	f013 fcbe 	bl	801f1c4 <TFT_DrawChar>


		TFT_DrawChar(197, 258, 'Q');
 800b848:	2251      	movs	r2, #81	; 0x51
 800b84a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b84e:	20c5      	movs	r0, #197	; 0xc5
 800b850:	f013 fcb8 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800b854:	2236      	movs	r2, #54	; 0x36
 800b856:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b85a:	20cb      	movs	r0, #203	; 0xcb
 800b85c:	f013 fcb2 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(219, 258, 'Q');
 800b860:	2251      	movs	r2, #81	; 0x51
 800b862:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b866:	20db      	movs	r0, #219	; 0xdb
 800b868:	f013 fcac 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800b86c:	2237      	movs	r2, #55	; 0x37
 800b86e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b872:	20e1      	movs	r0, #225	; 0xe1
 800b874:	f013 fca6 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(241, 258, 'Q');
 800b878:	2251      	movs	r2, #81	; 0x51
 800b87a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b87e:	20f1      	movs	r0, #241	; 0xf1
 800b880:	f013 fca0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800b884:	2238      	movs	r2, #56	; 0x38
 800b886:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b88a:	20f7      	movs	r0, #247	; 0xf7
 800b88c:	f013 fc9a 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(263, 258, 'Q');
 800b890:	2251      	movs	r2, #81	; 0x51
 800b892:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b896:	f240 1007 	movw	r0, #263	; 0x107
 800b89a:	f013 fc93 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800b89e:	2239      	movs	r2, #57	; 0x39
 800b8a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b8a4:	f240 100d 	movw	r0, #269	; 0x10d
 800b8a8:	f013 fc8c 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(290, 258, '1');
 800b8ac:	2231      	movs	r2, #49	; 0x31
 800b8ae:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b8b2:	f44f 7091 	mov.w	r0, #290	; 0x122
 800b8b6:	f013 fc85 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'Q');
 800b8ba:	2251      	movs	r2, #81	; 0x51
 800b8bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b8c0:	f240 101d 	movw	r0, #285	; 0x11d
 800b8c4:	f013 fc7e 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800b8c8:	2230      	movs	r2, #48	; 0x30
 800b8ca:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b8ce:	f44f 7093 	mov.w	r0, #294	; 0x126
 800b8d2:	f013 fc77 	bl	801f1c4 <TFT_DrawChar>


		TFT_DrawChar(312, 258, '1');
 800b8d6:	2231      	movs	r2, #49	; 0x31
 800b8d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b8dc:	f44f 709c 	mov.w	r0, #312	; 0x138
 800b8e0:	f013 fc70 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'Q');
 800b8e4:	2251      	movs	r2, #81	; 0x51
 800b8e6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b8ea:	f240 1033 	movw	r0, #307	; 0x133
 800b8ee:	f013 fc69 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800b8f2:	2231      	movs	r2, #49	; 0x31
 800b8f4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b8f8:	f240 103d 	movw	r0, #317	; 0x13d
 800b8fc:	f013 fc62 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(334, 258, '1');
 800b900:	2231      	movs	r2, #49	; 0x31
 800b902:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b906:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800b90a:	f013 fc5b 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'Q');
 800b90e:	2251      	movs	r2, #81	; 0x51
 800b910:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b914:	f240 1049 	movw	r0, #329	; 0x149
 800b918:	f013 fc54 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800b91c:	2232      	movs	r2, #50	; 0x32
 800b91e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b922:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800b926:	f013 fc4d 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(356, 258, '1');
 800b92a:	2231      	movs	r2, #49	; 0x31
 800b92c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b930:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800b934:	f013 fc46 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'Q');
 800b938:	2251      	movs	r2, #81	; 0x51
 800b93a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b93e:	f240 105f 	movw	r0, #351	; 0x15f
 800b942:	f013 fc3f 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800b946:	2233      	movs	r2, #51	; 0x33
 800b948:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b94c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800b950:	f013 fc38 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(378, 258, '1');
 800b954:	2231      	movs	r2, #49	; 0x31
 800b956:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b95a:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800b95e:	f013 fc31 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'Q');
 800b962:	2251      	movs	r2, #81	; 0x51
 800b964:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b968:	f240 1075 	movw	r0, #373	; 0x175
 800b96c:	f013 fc2a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800b970:	2234      	movs	r2, #52	; 0x34
 800b972:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b976:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800b97a:	f013 fc23 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(400, 258, '1');		
 800b97e:	2231      	movs	r2, #49	; 0x31
 800b980:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b984:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b988:	f013 fc1c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'Q');
 800b98c:	2251      	movs	r2, #81	; 0x51
 800b98e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b992:	f240 108b 	movw	r0, #395	; 0x18b
 800b996:	f013 fc15 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800b99a:	2235      	movs	r2, #53	; 0x35
 800b99c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b9a0:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b9a4:	f013 fc0e 	bl	801f1c4 <TFT_DrawChar>

		TFT_DrawChar(65, 250, '0');
 800b9a8:	2230      	movs	r2, #48	; 0x30
 800b9aa:	21fa      	movs	r1, #250	; 0xfa
 800b9ac:	2041      	movs	r0, #65	; 0x41
 800b9ae:	f013 fc09 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(58, 202, '2');
 800b9b2:	2232      	movs	r2, #50	; 0x32
 800b9b4:	21ca      	movs	r1, #202	; 0xca
 800b9b6:	203a      	movs	r0, #58	; 0x3a
 800b9b8:	f013 fc04 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800b9bc:	2235      	movs	r2, #53	; 0x35
 800b9be:	21ca      	movs	r1, #202	; 0xca
 800b9c0:	2041      	movs	r0, #65	; 0x41
 800b9c2:	f013 fbff 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(58, 149, '5');
 800b9c6:	2235      	movs	r2, #53	; 0x35
 800b9c8:	2195      	movs	r1, #149	; 0x95
 800b9ca:	203a      	movs	r0, #58	; 0x3a
 800b9cc:	f013 fbfa 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800b9d0:	2230      	movs	r2, #48	; 0x30
 800b9d2:	2195      	movs	r1, #149	; 0x95
 800b9d4:	2041      	movs	r0, #65	; 0x41
 800b9d6:	f013 fbf5 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(58, 96, '7');
 800b9da:	2237      	movs	r2, #55	; 0x37
 800b9dc:	2160      	movs	r1, #96	; 0x60
 800b9de:	203a      	movs	r0, #58	; 0x3a
 800b9e0:	f013 fbf0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800b9e4:	2235      	movs	r2, #53	; 0x35
 800b9e6:	2160      	movs	r1, #96	; 0x60
 800b9e8:	2041      	movs	r0, #65	; 0x41
 800b9ea:	f013 fbeb 	bl	801f1c4 <TFT_DrawChar>
			
		TFT_DrawChar(57, 43, '1');
 800b9ee:	2231      	movs	r2, #49	; 0x31
 800b9f0:	212b      	movs	r1, #43	; 0x2b
 800b9f2:	2039      	movs	r0, #57	; 0x39
 800b9f4:	f013 fbe6 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800b9f8:	2230      	movs	r2, #48	; 0x30
 800b9fa:	212b      	movs	r1, #43	; 0x2b
 800b9fc:	203e      	movs	r0, #62	; 0x3e
 800b9fe:	f013 fbe1 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800ba02:	2230      	movs	r2, #48	; 0x30
 800ba04:	212b      	movs	r1, #43	; 0x2b
 800ba06:	2043      	movs	r0, #67	; 0x43
 800ba08:	f013 fbdc 	bl	801f1c4 <TFT_DrawChar>
		

		TFT_direction = 0x00;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	702b      	strb	r3, [r5, #0]
 800ba10:	bd38      	pop	{r3, r4, r5, pc}
 800ba12:	bf00      	nop
 800ba14:	20005218 	.word	0x20005218
 800ba18:	20000210 	.word	0x20000210
		TFT_SetFont(&Font6EN_arch_big);
 800ba1c:	488d      	ldr	r0, [pc, #564]	; (800bc54 <CQS_Axes_Text+0x4b0>)
 800ba1e:	f013 fadb 	bl	801efd8 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800ba22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ba26:	f013 fadd 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800ba2a:	2063      	movs	r0, #99	; 0x63
 800ba2c:	f013 fae0 	bl	801eff0 <TFT_SetBackColor>
		TFT_DrawChar(24, 415, 'Q');
 800ba30:	2251      	movs	r2, #81	; 0x51
 800ba32:	f240 119f 	movw	r1, #415	; 0x19f
 800ba36:	2018      	movs	r0, #24
 800ba38:	f013 fbc4 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800ba3c:	2231      	movs	r2, #49	; 0x31
 800ba3e:	f240 119f 	movw	r1, #415	; 0x19f
 800ba42:	201e      	movs	r0, #30
 800ba44:	f013 fbbe 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(40, 415, 'Q');
 800ba48:	2251      	movs	r2, #81	; 0x51
 800ba4a:	f240 119f 	movw	r1, #415	; 0x19f
 800ba4e:	2028      	movs	r0, #40	; 0x28
 800ba50:	f013 fbb8 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800ba54:	2232      	movs	r2, #50	; 0x32
 800ba56:	f240 119f 	movw	r1, #415	; 0x19f
 800ba5a:	202e      	movs	r0, #46	; 0x2e
 800ba5c:	f013 fbb2 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(56, 415, 'Q');
 800ba60:	2251      	movs	r2, #81	; 0x51
 800ba62:	f240 119f 	movw	r1, #415	; 0x19f
 800ba66:	2038      	movs	r0, #56	; 0x38
 800ba68:	f013 fbac 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800ba6c:	2233      	movs	r2, #51	; 0x33
 800ba6e:	f240 119f 	movw	r1, #415	; 0x19f
 800ba72:	203e      	movs	r0, #62	; 0x3e
 800ba74:	f013 fba6 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(72, 415, 'Q');
 800ba78:	2251      	movs	r2, #81	; 0x51
 800ba7a:	f240 119f 	movw	r1, #415	; 0x19f
 800ba7e:	2048      	movs	r0, #72	; 0x48
 800ba80:	f013 fba0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800ba84:	2234      	movs	r2, #52	; 0x34
 800ba86:	f240 119f 	movw	r1, #415	; 0x19f
 800ba8a:	204e      	movs	r0, #78	; 0x4e
 800ba8c:	f013 fb9a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(88, 415, 'Q');
 800ba90:	2251      	movs	r2, #81	; 0x51
 800ba92:	f240 119f 	movw	r1, #415	; 0x19f
 800ba96:	2058      	movs	r0, #88	; 0x58
 800ba98:	f013 fb94 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800ba9c:	2235      	movs	r2, #53	; 0x35
 800ba9e:	f240 119f 	movw	r1, #415	; 0x19f
 800baa2:	205e      	movs	r0, #94	; 0x5e
 800baa4:	f013 fb8e 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(104, 415, 'Q');
 800baa8:	2251      	movs	r2, #81	; 0x51
 800baaa:	f240 119f 	movw	r1, #415	; 0x19f
 800baae:	2068      	movs	r0, #104	; 0x68
 800bab0:	f013 fb88 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800bab4:	2236      	movs	r2, #54	; 0x36
 800bab6:	f240 119f 	movw	r1, #415	; 0x19f
 800baba:	206e      	movs	r0, #110	; 0x6e
 800babc:	f013 fb82 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(120, 415, 'Q');
 800bac0:	2251      	movs	r2, #81	; 0x51
 800bac2:	f240 119f 	movw	r1, #415	; 0x19f
 800bac6:	2078      	movs	r0, #120	; 0x78
 800bac8:	f013 fb7c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800bacc:	2237      	movs	r2, #55	; 0x37
 800bace:	f240 119f 	movw	r1, #415	; 0x19f
 800bad2:	207e      	movs	r0, #126	; 0x7e
 800bad4:	f013 fb76 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(136, 415, 'Q');
 800bad8:	2251      	movs	r2, #81	; 0x51
 800bada:	f240 119f 	movw	r1, #415	; 0x19f
 800bade:	2088      	movs	r0, #136	; 0x88
 800bae0:	f013 fb70 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800bae4:	2238      	movs	r2, #56	; 0x38
 800bae6:	f240 119f 	movw	r1, #415	; 0x19f
 800baea:	208e      	movs	r0, #142	; 0x8e
 800baec:	f013 fb6a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(152, 415, 'Q');
 800baf0:	2251      	movs	r2, #81	; 0x51
 800baf2:	f240 119f 	movw	r1, #415	; 0x19f
 800baf6:	2098      	movs	r0, #152	; 0x98
 800baf8:	f013 fb64 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800bafc:	2239      	movs	r2, #57	; 0x39
 800bafe:	f240 119f 	movw	r1, #415	; 0x19f
 800bb02:	209e      	movs	r0, #158	; 0x9e
 800bb04:	f013 fb5e 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(173, 415, '1');
 800bb08:	2231      	movs	r2, #49	; 0x31
 800bb0a:	f240 119f 	movw	r1, #415	; 0x19f
 800bb0e:	20ad      	movs	r0, #173	; 0xad
 800bb10:	f013 fb58 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'Q');
 800bb14:	2251      	movs	r2, #81	; 0x51
 800bb16:	f240 119f 	movw	r1, #415	; 0x19f
 800bb1a:	20a8      	movs	r0, #168	; 0xa8
 800bb1c:	f013 fb52 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800bb20:	2230      	movs	r2, #48	; 0x30
 800bb22:	f240 119f 	movw	r1, #415	; 0x19f
 800bb26:	20b1      	movs	r0, #177	; 0xb1
 800bb28:	f013 fb4c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(189, 415, '1');
 800bb2c:	2231      	movs	r2, #49	; 0x31
 800bb2e:	f240 119f 	movw	r1, #415	; 0x19f
 800bb32:	20bd      	movs	r0, #189	; 0xbd
 800bb34:	f013 fb46 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'Q');
 800bb38:	2251      	movs	r2, #81	; 0x51
 800bb3a:	f240 119f 	movw	r1, #415	; 0x19f
 800bb3e:	20b8      	movs	r0, #184	; 0xb8
 800bb40:	f013 fb40 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800bb44:	2231      	movs	r2, #49	; 0x31
 800bb46:	f240 119f 	movw	r1, #415	; 0x19f
 800bb4a:	20c2      	movs	r0, #194	; 0xc2
 800bb4c:	f013 fb3a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(205, 415, '1');
 800bb50:	2231      	movs	r2, #49	; 0x31
 800bb52:	f240 119f 	movw	r1, #415	; 0x19f
 800bb56:	20cd      	movs	r0, #205	; 0xcd
 800bb58:	f013 fb34 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'Q');
 800bb5c:	2251      	movs	r2, #81	; 0x51
 800bb5e:	f240 119f 	movw	r1, #415	; 0x19f
 800bb62:	20c8      	movs	r0, #200	; 0xc8
 800bb64:	f013 fb2e 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800bb68:	2232      	movs	r2, #50	; 0x32
 800bb6a:	f240 119f 	movw	r1, #415	; 0x19f
 800bb6e:	20d1      	movs	r0, #209	; 0xd1
 800bb70:	f013 fb28 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(221, 415, '1');
 800bb74:	2231      	movs	r2, #49	; 0x31
 800bb76:	f240 119f 	movw	r1, #415	; 0x19f
 800bb7a:	20dd      	movs	r0, #221	; 0xdd
 800bb7c:	f013 fb22 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'Q');
 800bb80:	2251      	movs	r2, #81	; 0x51
 800bb82:	f240 119f 	movw	r1, #415	; 0x19f
 800bb86:	20d8      	movs	r0, #216	; 0xd8
 800bb88:	f013 fb1c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800bb8c:	2233      	movs	r2, #51	; 0x33
 800bb8e:	f240 119f 	movw	r1, #415	; 0x19f
 800bb92:	20e1      	movs	r0, #225	; 0xe1
 800bb94:	f013 fb16 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(237, 415, '1');
 800bb98:	2231      	movs	r2, #49	; 0x31
 800bb9a:	f240 119f 	movw	r1, #415	; 0x19f
 800bb9e:	20ed      	movs	r0, #237	; 0xed
 800bba0:	f013 fb10 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'Q');
 800bba4:	2251      	movs	r2, #81	; 0x51
 800bba6:	f240 119f 	movw	r1, #415	; 0x19f
 800bbaa:	20e8      	movs	r0, #232	; 0xe8
 800bbac:	f013 fb0a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800bbb0:	2234      	movs	r2, #52	; 0x34
 800bbb2:	f240 119f 	movw	r1, #415	; 0x19f
 800bbb6:	20f1      	movs	r0, #241	; 0xf1
 800bbb8:	f013 fb04 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(253, 415, '1');		
 800bbbc:	2231      	movs	r2, #49	; 0x31
 800bbbe:	f240 119f 	movw	r1, #415	; 0x19f
 800bbc2:	20fd      	movs	r0, #253	; 0xfd
 800bbc4:	f013 fafe 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'Q');
 800bbc8:	2251      	movs	r2, #81	; 0x51
 800bbca:	f240 119f 	movw	r1, #415	; 0x19f
 800bbce:	20f8      	movs	r0, #248	; 0xf8
 800bbd0:	f013 faf8 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800bbd4:	2235      	movs	r2, #53	; 0x35
 800bbd6:	f240 119f 	movw	r1, #415	; 0x19f
 800bbda:	f240 1001 	movw	r0, #257	; 0x101
 800bbde:	f013 faf1 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(5, 410, '0');
 800bbe2:	2230      	movs	r2, #48	; 0x30
 800bbe4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800bbe8:	2005      	movs	r0, #5
 800bbea:	f013 faeb 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(1, 334, '2');
 800bbee:	2232      	movs	r2, #50	; 0x32
 800bbf0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	f013 fae5 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800bbfa:	2235      	movs	r2, #53	; 0x35
 800bbfc:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800bc00:	2007      	movs	r0, #7
 800bc02:	f013 fadf 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(1, 257, '5');
 800bc06:	2235      	movs	r2, #53	; 0x35
 800bc08:	f240 1101 	movw	r1, #257	; 0x101
 800bc0c:	2001      	movs	r0, #1
 800bc0e:	f013 fad9 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800bc12:	2230      	movs	r2, #48	; 0x30
 800bc14:	f240 1101 	movw	r1, #257	; 0x101
 800bc18:	2007      	movs	r0, #7
 800bc1a:	f013 fad3 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(1, 181, '7');
 800bc1e:	2237      	movs	r2, #55	; 0x37
 800bc20:	21b5      	movs	r1, #181	; 0xb5
 800bc22:	2001      	movs	r0, #1
 800bc24:	f013 face 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800bc28:	2235      	movs	r2, #53	; 0x35
 800bc2a:	21b5      	movs	r1, #181	; 0xb5
 800bc2c:	2007      	movs	r0, #7
 800bc2e:	f013 fac9 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(0, 105, '1');
 800bc32:	4620      	mov	r0, r4
 800bc34:	2231      	movs	r2, #49	; 0x31
 800bc36:	2169      	movs	r1, #105	; 0x69
 800bc38:	f013 fac4 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800bc3c:	2230      	movs	r2, #48	; 0x30
 800bc3e:	2169      	movs	r1, #105	; 0x69
 800bc40:	2004      	movs	r0, #4
 800bc42:	f013 fabf 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800bc46:	2230      	movs	r2, #48	; 0x30
 800bc48:	2169      	movs	r1, #105	; 0x69
 800bc4a:	2009      	movs	r0, #9
	}
}
 800bc4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800bc50:	f013 bab8 	b.w	801f1c4 <TFT_DrawChar>
 800bc54:	20000210 	.word	0x20000210

0800bc58 <CQS_chart>:

void CQS_chart(uint8_t direction, uint8_t *GraphData)
{
 800bc58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc5c:	ed2d 8b08 	vpush	{d8-d11}
 800bc60:	b087      	sub	sp, #28
	char buffer[2] = {0};
 800bc62:	2300      	movs	r3, #0
{
 800bc64:	4689      	mov	r9, r1
	char buffer[2] = {0};
 800bc66:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t X = 0;
	
	if(direction == 0x00){
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	f000 81f6 	beq.w	800c05c <CQS_chart+0x404>
			X += 16;
		}
	} 
	else if(direction != 0x00)
	{
		if(direction == 0x01){TFT_direction = 0x01;} 
 800bc70:	2801      	cmp	r0, #1
 800bc72:	f8df 83d4 	ldr.w	r8, [pc, #980]	; 800c048 <CQS_chart+0x3f0>
		else {TFT_direction = 0x02;}
		
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bc76:	eddf 8aed 	vldr	s17, [pc, #948]	; 800c02c <CQS_chart+0x3d4>
		if(direction == 0x01){TFT_direction = 0x01;} 
 800bc7a:	bf0e      	itee	eq
 800bc7c:	f888 0000 	strbeq.w	r0, [r8]
		else {TFT_direction = 0x02;}
 800bc80:	2302      	movne	r3, #2
 800bc82:	f888 3000 	strbne.w	r3, [r8]
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bc86:	780b      	ldrb	r3, [r1, #0]
 800bc88:	ed9f 8ae9 	vldr	s16, [pc, #932]	; 800c030 <CQS_chart+0x3d8>
 800bc8c:	ed9f aae9 	vldr	s20, [pc, #932]	; 800c034 <CQS_chart+0x3dc>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
			
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800bc90:	4fe9      	ldr	r7, [pc, #932]	; (800c038 <CQS_chart+0x3e0>)
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bc92:	eddf 9aea 	vldr	s19, [pc, #936]	; 800c03c <CQS_chart+0x3e4>
 800bc96:	ed9f baea 	vldr	s22, [pc, #936]	; 800c040 <CQS_chart+0x3e8>
 800bc9a:	eddf aaea 	vldr	s21, [pc, #936]	; 800c044 <CQS_chart+0x3ec>
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bc9e:	ee07 3a90 	vmov	s15, r3
 800bca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca6:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800bcaa:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bcae:	2057      	movs	r0, #87	; 0x57
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	2262      	movs	r2, #98	; 0x62
 800bcb4:	23fc      	movs	r3, #252	; 0xfc
 800bcb6:	1e4d      	subs	r5, r1, #1
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bcb8:	4604      	mov	r4, r0
 800bcba:	ae05      	add	r6, sp, #20
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bcbc:	eef0 7a48 	vmov.f32	s15, s16
 800bcc0:	eee7 7a4a 	vfms.f32	s15, s14, s20
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bcc4:	eeb0 9a68 	vmov.f32	s18, s17
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bcc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bccc:	edcd 7a03 	vstr	s15, [sp, #12]
 800bcd0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bcd4:	f012 fedc 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(109, 252-(float)GraphData[1]/100*210, 120, 252, CQS_COLOR_Q2);
 800bcd8:	f899 3001 	ldrb.w	r3, [r9, #1]
 800bcdc:	ee07 3a90 	vmov	s15, r3
 800bce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce4:	f645 2392 	movw	r3, #23186	; 0x5a92
 800bce8:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	2278      	movs	r2, #120	; 0x78
 800bcf0:	23fc      	movs	r3, #252	; 0xfc
 800bcf2:	206d      	movs	r0, #109	; 0x6d
 800bcf4:	eef0 7a48 	vmov.f32	s15, s16
 800bcf8:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bcfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd00:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd04:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd08:	f012 fec2 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(131, 252-(float)GraphData[2]/100*210, 142, 252, CQS_COLOR_Q3);
 800bd0c:	f899 3002 	ldrb.w	r3, [r9, #2]
 800bd10:	ee07 3a90 	vmov	s15, r3
 800bd14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd18:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800bd1c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	228e      	movs	r2, #142	; 0x8e
 800bd24:	23fc      	movs	r3, #252	; 0xfc
 800bd26:	2083      	movs	r0, #131	; 0x83
 800bd28:	eef0 7a48 	vmov.f32	s15, s16
 800bd2c:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bd30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd34:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd38:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd3c:	f012 fea8 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(153, 252-(float)GraphData[3]/100*210, 164, 252, CQS_COLOR_Q4);
 800bd40:	f899 3003 	ldrb.w	r3, [r9, #3]
 800bd44:	ee07 3a90 	vmov	s15, r3
 800bd48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4c:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800bd50:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	22a4      	movs	r2, #164	; 0xa4
 800bd58:	23fc      	movs	r3, #252	; 0xfc
 800bd5a:	2099      	movs	r0, #153	; 0x99
 800bd5c:	eef0 7a48 	vmov.f32	s15, s16
 800bd60:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bd64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd68:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd6c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd70:	f012 fe8e 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(175, 252-(float)GraphData[4]/100*210, 186, 252, CQS_COLOR_Q5);
 800bd74:	f899 3004 	ldrb.w	r3, [r9, #4]
 800bd78:	ee07 3a90 	vmov	s15, r3
 800bd7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd80:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800bd84:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	22ba      	movs	r2, #186	; 0xba
 800bd8c:	23fc      	movs	r3, #252	; 0xfc
 800bd8e:	20af      	movs	r0, #175	; 0xaf
 800bd90:	eef0 7a48 	vmov.f32	s15, s16
 800bd94:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bd98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd9c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bda0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bda4:	f012 fe74 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(197, 252-(float)GraphData[5]/100*210, 208, 252, CQS_COLOR_Q6);
 800bda8:	f899 3005 	ldrb.w	r3, [r9, #5]
 800bdac:	ee07 3a90 	vmov	s15, r3
 800bdb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb4:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800bdb8:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	22d0      	movs	r2, #208	; 0xd0
 800bdc0:	23fc      	movs	r3, #252	; 0xfc
 800bdc2:	20c5      	movs	r0, #197	; 0xc5
 800bdc4:	eef0 7a48 	vmov.f32	s15, s16
 800bdc8:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bdcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd0:	edcd 7a03 	vstr	s15, [sp, #12]
 800bdd4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bdd8:	f012 fe5a 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(219, 252-(float)GraphData[6]/100*210, 230, 252, CQS_COLOR_Q7);
 800bddc:	f899 3006 	ldrb.w	r3, [r9, #6]
 800bde0:	ee07 3a90 	vmov	s15, r3
 800bde4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde8:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800bdec:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	22e6      	movs	r2, #230	; 0xe6
 800bdf4:	23fc      	movs	r3, #252	; 0xfc
 800bdf6:	20db      	movs	r0, #219	; 0xdb
 800bdf8:	eef0 7a48 	vmov.f32	s15, s16
 800bdfc:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800be00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be04:	edcd 7a03 	vstr	s15, [sp, #12]
 800be08:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be0c:	f012 fe40 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(241, 252-(float)GraphData[7]/100*210, 252, 252, CQS_COLOR_Q8);
 800be10:	f899 3007 	ldrb.w	r3, [r9, #7]
 800be14:	ee07 3a90 	vmov	s15, r3
 800be18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1c:	23fc      	movs	r3, #252	; 0xfc
 800be1e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800be22:	f247 5269 	movw	r2, #30057	; 0x7569
 800be26:	9200      	str	r2, [sp, #0]
 800be28:	20f1      	movs	r0, #241	; 0xf1
 800be2a:	461a      	mov	r2, r3
 800be2c:	eef0 7a48 	vmov.f32	s15, s16
 800be30:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800be34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be38:	edcd 7a03 	vstr	s15, [sp, #12]
 800be3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be40:	f012 fe26 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(263, 252-(float)GraphData[8]/100*210, 274, 252, CQS_COLOR_Q9);
 800be44:	f899 3008 	ldrb.w	r3, [r9, #8]
 800be48:	ee07 3a90 	vmov	s15, r3
 800be4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be50:	f24b 6307 	movw	r3, #46599	; 0xb607
 800be54:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800be5e:	23fc      	movs	r3, #252	; 0xfc
 800be60:	f240 1007 	movw	r0, #263	; 0x107
 800be64:	eef0 7a48 	vmov.f32	s15, s16
 800be68:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800be6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be70:	edcd 7a03 	vstr	s15, [sp, #12]
 800be74:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be78:	f012 fe0a 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(285, 252-(float)GraphData[9]/100*210, 296, 252, CQS_COLOR_Q10);
 800be7c:	f899 3009 	ldrb.w	r3, [r9, #9]
 800be80:	ee07 3a90 	vmov	s15, r3
 800be84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be88:	f64e 6325 	movw	r3, #60965	; 0xee25
 800be8c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	f44f 7294 	mov.w	r2, #296	; 0x128
 800be96:	23fc      	movs	r3, #252	; 0xfc
 800be98:	f240 101d 	movw	r0, #285	; 0x11d
 800be9c:	eef0 7a48 	vmov.f32	s15, s16
 800bea0:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bea8:	edcd 7a03 	vstr	s15, [sp, #12]
 800beac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800beb0:	f012 fdee 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(307, 252-(float)GraphData[10]/100*210,318, 252, CQS_COLOR_Q11);
 800beb4:	f899 300a 	ldrb.w	r3, [r9, #10]
 800beb8:	ee07 3a90 	vmov	s15, r3
 800bebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec0:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800bec4:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800bece:	23fc      	movs	r3, #252	; 0xfc
 800bed0:	f240 1033 	movw	r0, #307	; 0x133
 800bed4:	eef0 7a48 	vmov.f32	s15, s16
 800bed8:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bee0:	edcd 7a03 	vstr	s15, [sp, #12]
 800bee4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bee8:	f012 fdd2 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(329, 252-(float)GraphData[11]/100*210,340, 252, CQS_COLOR_Q12);
 800beec:	f899 300b 	ldrb.w	r3, [r9, #11]
 800bef0:	ee07 3a90 	vmov	s15, r3
 800bef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef8:	f64e 4347 	movw	r3, #60487	; 0xec47
 800befc:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800bf06:	23fc      	movs	r3, #252	; 0xfc
 800bf08:	f240 1049 	movw	r0, #329	; 0x149
 800bf0c:	eef0 7a48 	vmov.f32	s15, s16
 800bf10:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bf14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf18:	edcd 7a03 	vstr	s15, [sp, #12]
 800bf1c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bf20:	f012 fdb6 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(351, 252-(float)GraphData[12]/100*210,362, 252, CQS_COLOR_Q13);
 800bf24:	f899 300c 	ldrb.w	r3, [r9, #12]
 800bf28:	ee07 3a90 	vmov	s15, r3
 800bf2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf30:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800bf34:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800bf3e:	23fc      	movs	r3, #252	; 0xfc
 800bf40:	f240 105f 	movw	r0, #351	; 0x15f
 800bf44:	eef0 7a48 	vmov.f32	s15, s16
 800bf48:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bf4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf50:	edcd 7a03 	vstr	s15, [sp, #12]
 800bf54:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bf58:	f012 fd9a 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
 800bf5c:	f899 300d 	ldrb.w	r3, [r9, #13]
 800bf60:	ee07 3a90 	vmov	s15, r3
 800bf64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf68:	f64a 1347 	movw	r3, #43335	; 0xa947
 800bf6c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800bf76:	23fc      	movs	r3, #252	; 0xfc
 800bf78:	f240 1075 	movw	r0, #373	; 0x175
 800bf7c:	eef0 7a48 	vmov.f32	s15, s16
 800bf80:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bf84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf88:	edcd 7a03 	vstr	s15, [sp, #12]
 800bf8c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bf90:	f012 fd7e 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bf94:	f899 300e 	ldrb.w	r3, [r9, #14]
 800bf98:	ee07 3a90 	vmov	s15, r3
 800bf9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa0:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800bfa4:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800bfae:	23fc      	movs	r3, #252	; 0xfc
 800bfb0:	f240 108b 	movw	r0, #395	; 0x18b
 800bfb4:	eef0 7a48 	vmov.f32	s15, s16
 800bfb8:	eee7 7a4a 	vfms.f32	s15, s14, s20
 800bfbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfc0:	edcd 7a03 	vstr	s15, [sp, #12]
 800bfc4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bfc8:	f012 fd62 	bl	801ea90 <TFT_FillRectangle>
			sprintf (buffer, "%d", GraphData[i]);
 800bfcc:	786a      	ldrb	r2, [r5, #1]
 800bfce:	4639      	mov	r1, r7
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f016 fb9d 	bl	8022710 <sprintf>
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bfd6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe2:	2b09      	cmp	r3, #9
 800bfe4:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800bfe8:	f04f 0303 	mov.w	r3, #3
 800bfec:	4620      	mov	r0, r4
 800bfee:	4632      	mov	r2, r6
 800bff0:	f104 0416 	add.w	r4, r4, #22
 800bff4:	b2a4      	uxth	r4, r4
 800bff6:	bf94      	ite	ls
 800bff8:	eef0 7a6a 	vmovls.f32	s15, s21
 800bffc:	eef0 7a4b 	vmovhi.f32	s15, s22
 800c000:	eee7 7a69 	vfms.f32	s15, s14, s19
 800c004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c008:	edcd 7a03 	vstr	s15, [sp, #12]
 800c00c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c010:	f013 f94e 	bl	801f2b0 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800c014:	f240 13a1 	movw	r3, #417	; 0x1a1
 800c018:	429c      	cmp	r4, r3
 800c01a:	d1d7      	bne.n	800bfcc <CQS_chart+0x374>
			X += 22;
		}
		
		TFT_direction = 0x00;
 800c01c:	2300      	movs	r3, #0
 800c01e:	f888 3000 	strb.w	r3, [r8]
	}
}
 800c022:	b007      	add	sp, #28
 800c024:	ecbd 8b08 	vpop	{d8-d11}
 800c028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c02c:	42c80000 	.word	0x42c80000
 800c030:	437c0000 	.word	0x437c0000
 800c034:	43520000 	.word	0x43520000
 800c038:	08027384 	.word	0x08027384
 800c03c:	43570000 	.word	0x43570000
 800c040:	437a0000 	.word	0x437a0000
 800c044:	43730000 	.word	0x43730000
 800c048:	20005218 	.word	0x20005218
 800c04c:	42c80000 	.word	0x42c80000
 800c050:	43cd0000 	.word	0x43cd0000
 800c054:	43988000 	.word	0x43988000
 800c058:	43c80000 	.word	0x43c80000
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800c05c:	780b      	ldrb	r3, [r1, #0]
 800c05e:	ed1f 9a05 	vldr	s18, [pc, #-20]	; 800c04c <CQS_chart+0x3f4>
 800c062:	ed1f 8a05 	vldr	s16, [pc, #-20]	; 800c050 <CQS_chart+0x3f8>
 800c066:	ed5f 8a05 	vldr	s17, [pc, #-20]	; 800c054 <CQS_chart+0x3fc>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800c06a:	ed5f aa05 	vldr	s21, [pc, #-20]	; 800c058 <CQS_chart+0x400>
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800c06e:	ee07 3a90 	vmov	s15, r3
 800c072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c076:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800c07a:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c07e:	2018      	movs	r0, #24
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	2222      	movs	r2, #34	; 0x22
 800c084:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c088:	1e4d      	subs	r5, r1, #1
		TFT_SetBackColor(TFT_Black_Bkgr);
 800c08a:	4604      	mov	r4, r0
 800c08c:	ae05      	add	r6, sp, #20
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800c08e:	eef0 7a48 	vmov.f32	s15, s16
 800c092:	eee7 7a68 	vfms.f32	s15, s14, s17
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800c096:	eeb0 aa49 	vmov.f32	s20, s18
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800c09a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800c09e:	eef0 9a68 	vmov.f32	s19, s17
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800c0a2:	edcd 7a03 	vstr	s15, [sp, #12]
 800c0a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c0aa:	f012 fcf1 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(float)GraphData[1]/100*305, 50, 410, CQS_COLOR_Q2);
 800c0ae:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ba:	f645 2392 	movw	r3, #23186	; 0x5a92
 800c0be:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	2232      	movs	r2, #50	; 0x32
 800c0c6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c0ca:	2028      	movs	r0, #40	; 0x28
 800c0cc:	eef0 7a48 	vmov.f32	s15, s16
 800c0d0:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c0d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0d8:	edcd 7a03 	vstr	s15, [sp, #12]
 800c0dc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c0e0:	f012 fcd6 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(float)GraphData[2]/100*305, 66, 410, CQS_COLOR_Q3);
 800c0e4:	f899 3002 	ldrb.w	r3, [r9, #2]
 800c0e8:	ee07 3a90 	vmov	s15, r3
 800c0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f0:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800c0f4:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	2242      	movs	r2, #66	; 0x42
 800c0fc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c100:	2038      	movs	r0, #56	; 0x38
 800c102:	eef0 7a48 	vmov.f32	s15, s16
 800c106:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c10a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10e:	edcd 7a03 	vstr	s15, [sp, #12]
 800c112:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c116:	f012 fcbb 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(float)GraphData[3]/100*305, 82, 410, CQS_COLOR_Q4);
 800c11a:	f899 3003 	ldrb.w	r3, [r9, #3]
 800c11e:	ee07 3a90 	vmov	s15, r3
 800c122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c126:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800c12a:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	2252      	movs	r2, #82	; 0x52
 800c132:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c136:	2048      	movs	r0, #72	; 0x48
 800c138:	eef0 7a48 	vmov.f32	s15, s16
 800c13c:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c144:	edcd 7a03 	vstr	s15, [sp, #12]
 800c148:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c14c:	f012 fca0 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(float)GraphData[4]/100*305, 98, 410, CQS_COLOR_Q5);
 800c150:	f899 3004 	ldrb.w	r3, [r9, #4]
 800c154:	ee07 3a90 	vmov	s15, r3
 800c158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15c:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800c160:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	2262      	movs	r2, #98	; 0x62
 800c168:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c16c:	2058      	movs	r0, #88	; 0x58
 800c16e:	eef0 7a48 	vmov.f32	s15, s16
 800c172:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c17a:	edcd 7a03 	vstr	s15, [sp, #12]
 800c17e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c182:	f012 fc85 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(float)GraphData[5]/100*305, 114, 410, CQS_COLOR_Q6);
 800c186:	f899 3005 	ldrb.w	r3, [r9, #5]
 800c18a:	ee07 3a90 	vmov	s15, r3
 800c18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c192:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800c196:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	2272      	movs	r2, #114	; 0x72
 800c19e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c1a2:	2068      	movs	r0, #104	; 0x68
 800c1a4:	eef0 7a48 	vmov.f32	s15, s16
 800c1a8:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c1ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1b0:	edcd 7a03 	vstr	s15, [sp, #12]
 800c1b4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c1b8:	f012 fc6a 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(float)GraphData[6]/100*305, 130, 410, CQS_COLOR_Q7);
 800c1bc:	f899 3006 	ldrb.w	r3, [r9, #6]
 800c1c0:	ee07 3a90 	vmov	s15, r3
 800c1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c8:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800c1cc:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	2282      	movs	r2, #130	; 0x82
 800c1d4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c1d8:	2078      	movs	r0, #120	; 0x78
 800c1da:	eef0 7a48 	vmov.f32	s15, s16
 800c1de:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c1e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1e6:	edcd 7a03 	vstr	s15, [sp, #12]
 800c1ea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c1ee:	f012 fc4f 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(float)GraphData[7]/100*305, 146, 410, CQS_COLOR_Q8);
 800c1f2:	f899 3007 	ldrb.w	r3, [r9, #7]
 800c1f6:	ee07 3a90 	vmov	s15, r3
 800c1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1fe:	f247 5369 	movw	r3, #30057	; 0x7569
 800c202:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	2292      	movs	r2, #146	; 0x92
 800c20a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c20e:	2088      	movs	r0, #136	; 0x88
 800c210:	eef0 7a48 	vmov.f32	s15, s16
 800c214:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c21c:	edcd 7a03 	vstr	s15, [sp, #12]
 800c220:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c224:	f012 fc34 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(float)GraphData[8]/100*305, 162, 410, CQS_COLOR_Q9);
 800c228:	f899 3008 	ldrb.w	r3, [r9, #8]
 800c22c:	ee07 3a90 	vmov	s15, r3
 800c230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c234:	f24b 6307 	movw	r3, #46599	; 0xb607
 800c238:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	22a2      	movs	r2, #162	; 0xa2
 800c240:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c244:	2098      	movs	r0, #152	; 0x98
 800c246:	eef0 7a48 	vmov.f32	s15, s16
 800c24a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c24e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c252:	edcd 7a03 	vstr	s15, [sp, #12]
 800c256:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c25a:	f012 fc19 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(float)GraphData[9]/100*305, 178, 410, CQS_COLOR_Q10);
 800c25e:	f899 3009 	ldrb.w	r3, [r9, #9]
 800c262:	ee07 3a90 	vmov	s15, r3
 800c266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26a:	f64e 6325 	movw	r3, #60965	; 0xee25
 800c26e:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	22b2      	movs	r2, #178	; 0xb2
 800c276:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c27a:	20a8      	movs	r0, #168	; 0xa8
 800c27c:	eef0 7a48 	vmov.f32	s15, s16
 800c280:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c288:	edcd 7a03 	vstr	s15, [sp, #12]
 800c28c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c290:	f012 fbfe 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(float)GraphData[10]/100*305, 194, 410, CQS_COLOR_Q11);
 800c294:	f899 300a 	ldrb.w	r3, [r9, #10]
 800c298:	ee07 3a90 	vmov	s15, r3
 800c29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2a0:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800c2a4:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	22c2      	movs	r2, #194	; 0xc2
 800c2ac:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c2b0:	20b8      	movs	r0, #184	; 0xb8
 800c2b2:	eef0 7a48 	vmov.f32	s15, s16
 800c2b6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2be:	edcd 7a03 	vstr	s15, [sp, #12]
 800c2c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c2c6:	f012 fbe3 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(float)GraphData[11]/100*305, 210, 410, CQS_COLOR_Q12);
 800c2ca:	f899 300b 	ldrb.w	r3, [r9, #11]
 800c2ce:	ee07 3a90 	vmov	s15, r3
 800c2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d6:	f64e 4347 	movw	r3, #60487	; 0xec47
 800c2da:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	22d2      	movs	r2, #210	; 0xd2
 800c2e2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c2e6:	20c8      	movs	r0, #200	; 0xc8
 800c2e8:	eef0 7a48 	vmov.f32	s15, s16
 800c2ec:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c2f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2f4:	edcd 7a03 	vstr	s15, [sp, #12]
 800c2f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c2fc:	f012 fbc8 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(float)GraphData[12]/100*305, 226, 410, CQS_COLOR_Q13);
 800c300:	f899 300c 	ldrb.w	r3, [r9, #12]
 800c304:	ee07 3a90 	vmov	s15, r3
 800c308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30c:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800c310:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	22e2      	movs	r2, #226	; 0xe2
 800c318:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c31c:	20d8      	movs	r0, #216	; 0xd8
 800c31e:	eef0 7a48 	vmov.f32	s15, s16
 800c322:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c32a:	edcd 7a03 	vstr	s15, [sp, #12]
 800c32e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c332:	f012 fbad 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(float)GraphData[13]/100*305, 242, 410, CQS_COLOR_Q14);
 800c336:	f899 300d 	ldrb.w	r3, [r9, #13]
 800c33a:	ee07 3a90 	vmov	s15, r3
 800c33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c342:	f64a 1347 	movw	r3, #43335	; 0xa947
 800c346:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	22f2      	movs	r2, #242	; 0xf2
 800c34e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c352:	20e8      	movs	r0, #232	; 0xe8
 800c354:	eef0 7a48 	vmov.f32	s15, s16
 800c358:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c360:	edcd 7a03 	vstr	s15, [sp, #12]
 800c364:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c368:	f012 fb92 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800c36c:	f899 300e 	ldrb.w	r3, [r9, #14]
 800c370:	ee07 3a90 	vmov	s15, r3
 800c374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c378:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800c37c:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800c380:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	20f8      	movs	r0, #248	; 0xf8
 800c388:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c38c:	eea7 8a68 	vfms.f32	s16, s14, s17
 800c390:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800c394:	edcd 7a03 	vstr	s15, [sp, #12]
 800c398:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c39c:	f012 fb78 	bl	801ea90 <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800c3a0:	4817      	ldr	r0, [pc, #92]	; (800c400 <CQS_chart+0x7a8>)
 800c3a2:	f012 fe19 	bl	801efd8 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800c3a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c3aa:	f012 fe1b 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800c3ae:	2063      	movs	r0, #99	; 0x63
 800c3b0:	f012 fe1e 	bl	801eff0 <TFT_SetBackColor>
			sprintf (buffer, "%d", GraphData[i]);
 800c3b4:	786a      	ldrb	r2, [r5, #1]
 800c3b6:	4913      	ldr	r1, [pc, #76]	; (800c404 <CQS_chart+0x7ac>)
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	f016 f9a9 	bl	8022710 <sprintf>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800c3be:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	ee87 7a8a 	vdiv.f32	s14, s15, s20
 800c3d0:	3410      	adds	r4, #16
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	4632      	mov	r2, r6
 800c3d6:	b2a4      	uxth	r4, r4
 800c3d8:	eef0 7a6a 	vmov.f32	s15, s21
 800c3dc:	eee7 7a69 	vfms.f32	s15, s14, s19
 800c3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3e4:	edcd 7a03 	vstr	s15, [sp, #12]
 800c3e8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c3ec:	f012 ff60 	bl	801f2b0 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800c3f0:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800c3f4:	d1de      	bne.n	800c3b4 <CQS_chart+0x75c>
}
 800c3f6:	b007      	add	sp, #28
 800c3f8:	ecbd 8b08 	vpop	{d8-d11}
 800c3fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c400:	20000210 	.word	0x20000210
 800c404:	08027384 	.word	0x08027384

0800c408 <CQS_Draw>:

void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40c:	b082      	sub	sp, #8
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c40e:	2763      	movs	r7, #99	; 0x63
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c410:	4604      	mov	r4, r0
 800c412:	4688      	mov	r8, r1
 800c414:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c416:	213a      	movs	r1, #58	; 0x3a
 800c418:	f44f 7287 	mov.w	r2, #270	; 0x10e
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c41c:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c41e:	9700      	str	r7, [sp, #0]
 800c420:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800c424:	2005      	movs	r0, #5
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c426:	f89d 7020 	ldrb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c42a:	f012 fb31 	bl	801ea90 <TFT_FillRectangle>
	CQS_Axes(direction);
 800c42e:	4620      	mov	r0, r4
 800c430:	f7ff f844 	bl	800b4bc <CQS_Axes>
	CQS_Axes_Text(direction);
 800c434:	4620      	mov	r0, r4
 800c436:	f7ff f9b5 	bl	800b7a4 <CQS_Axes_Text>
	CQS_chart(direction, GraphData);
 800c43a:	4641      	mov	r1, r8
 800c43c:	4620      	mov	r0, r4
 800c43e:	f7ff fc0b 	bl	800bc58 <CQS_chart>
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800c442:	463b      	mov	r3, r7
 800c444:	4632      	mov	r2, r6
 800c446:	4629      	mov	r1, r5
 800c448:	4620      	mov	r0, r4
 800c44a:	b002      	add	sp, #8
 800c44c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800c450:	f7ff b8d6 	b.w	800b600 <CQS_Axes_Measure>

0800c454 <flash_data_read_buff>:
#include "CRC_check.h"

uint64_t flash_data_read_buff(uint32_t flash_addr_buff) 
{ 
	return ( *(__IO uint64_t*) flash_addr_buff);
}
 800c454:	e9d0 0100 	ldrd	r0, r1, [r0]
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop

0800c45c <CRC_Check>:

uint64_t CRC_buff = 0, crcr_flash = 0;
uint32_t addr_i;

CRC_Check_StatusTypeDef CRC_Check(uint32_t start_flash_addr, uint32_t flash_size, uint32_t CRC_addr)
{
 800c45c:	b5f0      	push	{r4, r5, r6, r7, lr}

	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800c45e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c462:	f8df e048 	ldr.w	lr, [pc, #72]	; 800c4ac <CRC_Check+0x50>
 800c466:	4b0f      	ldr	r3, [pc, #60]	; (800c4a4 <CRC_Check+0x48>)
 800c468:	f8ce 0000 	str.w	r0, [lr]
 800c46c:	4288      	cmp	r0, r1
 800c46e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c472:	d209      	bcs.n	800c488 <CRC_Check+0x2c>
	return ( *(__IO uint64_t*) flash_addr_buff);
 800c474:	e8f0 6702 	ldrd	r6, r7, [r0], #8
	{
		CRC_buff += flash_data_read_buff(addr_i);
 800c478:	19a4      	adds	r4, r4, r6
 800c47a:	417d      	adcs	r5, r7
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800c47c:	4288      	cmp	r0, r1
		CRC_buff += flash_data_read_buff(addr_i);
 800c47e:	e9c3 4500 	strd	r4, r5, [r3]
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800c482:	d3f7      	bcc.n	800c474 <CRC_Check+0x18>
 800c484:	f8ce 0000 	str.w	r0, [lr]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800c488:	e9d2 0100 	ldrd	r0, r1, [r2]
	}
	crcr_flash = flash_data_read_buff(CRC_addr);
 800c48c:	4b06      	ldr	r3, [pc, #24]	; (800c4a8 <CRC_Check+0x4c>)
 800c48e:	e9c3 0100 	strd	r0, r1, [r3]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800c492:	e9d2 2300 	ldrd	r2, r3, [r2]
	
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800c496:	429d      	cmp	r5, r3
 800c498:	bf0a      	itet	eq
 800c49a:	4294      	cmpeq	r4, r2
		return	CRC_OK;
	} else
	{
		return	CRC_ERROR;
	}
};
 800c49c:	2001      	movne	r0, #1
 800c49e:	2000      	moveq	r0, #0
 800c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	200041b8 	.word	0x200041b8
 800c4a8:	200041c0 	.word	0x200041c0
 800c4ac:	2008c1e8 	.word	0x2008c1e8

0800c4b0 <calcNorm560_CRI>:
double L_i_ref ;
double u_i_ref ;
double v_i_ref ;

void calcNorm560_CRI(uint16_t CCT_measure)
{
 800c4b0:	b508      	push	{r3, lr}
	norm_560_CRI = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800c4b2:	f7f4 f84f 	bl	8000554 <__aeabi_i2d>
 800c4b6:	a316      	add	r3, pc, #88	; (adr r3, 800c510 <calcNorm560_CRI+0x60>)
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	f7f4 f8b0 	bl	8000620 <__aeabi_dmul>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	a114      	add	r1, pc, #80	; (adr r1, 800c518 <calcNorm560_CRI+0x68>)
 800c4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4ca:	f7f4 f9d3 	bl	8000874 <__aeabi_ddiv>
 800c4ce:	ec41 0b10 	vmov	d0, r0, r1
 800c4d2:	f019 f94d 	bl	8025770 <exp>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	ec51 0b10 	vmov	r0, r1, d0
 800c4dc:	4b0a      	ldr	r3, [pc, #40]	; (800c508 <calcNorm560_CRI+0x58>)
 800c4de:	f7f3 feeb 	bl	80002b8 <__aeabi_dsub>
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	a106      	add	r1, pc, #24	; (adr r1, 800c500 <calcNorm560_CRI+0x50>)
 800c4e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4ec:	f7f4 f9c2 	bl	8000874 <__aeabi_ddiv>
 800c4f0:	f7f4 fb8e 	bl	8000c10 <__aeabi_d2f>
 800c4f4:	4b05      	ldr	r3, [pc, #20]	; (800c50c <calcNorm560_CRI+0x5c>)
 800c4f6:	6018      	str	r0, [r3, #0]
 800c4f8:	bd08      	pop	{r3, pc}
 800c4fa:	bf00      	nop
 800c4fc:	f3af 8000 	nop.w
 800c500:	f9f35846 	.word	0xf9f35846
 800c504:	466ca5d1 	.word	0x466ca5d1
 800c508:	3ff00000 	.word	0x3ff00000
 800c50c:	2008c218 	.word	0x2008c218
 800c510:	05ea7ab3 	.word	0x05ea7ab3
 800c514:	3ea2ca5d 	.word	0x3ea2ca5d
 800c518:	aba38759 	.word	0xaba38759
 800c51c:	3f8d7774 	.word	0x3f8d7774

0800c520 <calcSref_CRI>:


float calcSref_CRI(int idx, uint16_t CCT_measure)
{
	float ans;
	if (CCT_measure < 5000)
 800c520:	f241 3387 	movw	r3, #4999	; 0x1387
 800c524:	4299      	cmp	r1, r3
{
 800c526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c528:	460d      	mov	r5, r1
 800c52a:	ea4f 0080 	mov.w	r0, r0, lsl #2
	if (CCT_measure < 5000)
 800c52e:	d84e      	bhi.n	800c5ce <calcSref_CRI+0xae>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c530:	4c39      	ldr	r4, [pc, #228]	; (800c618 <calcSref_CRI+0xf8>)
 800c532:	4404      	add	r4, r0
 800c534:	6820      	ldr	r0, [r4, #0]
 800c536:	f7f4 f81f 	bl	8000578 <__aeabi_f2d>
 800c53a:	a331      	add	r3, pc, #196	; (adr r3, 800c600 <calcSref_CRI+0xe0>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	f7f4 f86e 	bl	8000620 <__aeabi_dmul>
 800c544:	4606      	mov	r6, r0
 800c546:	4628      	mov	r0, r5
 800c548:	460f      	mov	r7, r1
 800c54a:	f7f4 f803 	bl	8000554 <__aeabi_i2d>
 800c54e:	4602      	mov	r2, r0
 800c550:	460b      	mov	r3, r1
 800c552:	4630      	mov	r0, r6
 800c554:	4639      	mov	r1, r7
 800c556:	f7f4 f863 	bl	8000620 <__aeabi_dmul>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	a12a      	add	r1, pc, #168	; (adr r1, 800c608 <calcSref_CRI+0xe8>)
 800c560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c564:	f7f4 f986 	bl	8000874 <__aeabi_ddiv>
 800c568:	ec41 0b10 	vmov	d0, r0, r1
 800c56c:	f019 f900 	bl	8025770 <exp>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c570:	6820      	ldr	r0, [r4, #0]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c572:	ec57 6b10 	vmov	r6, r7, d0
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c576:	f7f3 ffff 	bl	8000578 <__aeabi_f2d>
 800c57a:	a321      	add	r3, pc, #132	; (adr r3, 800c600 <calcSref_CRI+0xe0>)
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	f7f4 f84e 	bl	8000620 <__aeabi_dmul>
 800c584:	ed9f 1b22 	vldr	d1, [pc, #136]	; 800c610 <calcSref_CRI+0xf0>
 800c588:	ec41 0b10 	vmov	d0, r0, r1
 800c58c:	f019 f9ec 	bl	8025968 <pow>
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c590:	2200      	movs	r2, #0
 800c592:	4b22      	ldr	r3, [pc, #136]	; (800c61c <calcSref_CRI+0xfc>)
 800c594:	4630      	mov	r0, r6
 800c596:	4639      	mov	r1, r7
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c598:	ed8d 0b00 	vstr	d0, [sp]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c59c:	f7f3 fe8c 	bl	80002b8 <__aeabi_dsub>
 800c5a0:	f7f4 fb36 	bl	8000c10 <__aeabi_d2f>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c5a4:	f7f3 ffe8 	bl	8000578 <__aeabi_f2d>
 800c5a8:	ed9d 0b00 	vldr	d0, [sp]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	ec51 0b10 	vmov	r0, r1, d0
 800c5b4:	f7f4 f95e 	bl	8000874 <__aeabi_ddiv>
 800c5b8:	f7f4 fb2a 	bl	8000c10 <__aeabi_d2f>
		ans /= norm_560_CRI;
 800c5bc:	4b18      	ldr	r3, [pc, #96]	; (800c620 <calcSref_CRI+0x100>)
 800c5be:	ee07 0a10 	vmov	s14, r0
 800c5c2:	edd3 7a00 	vldr	s15, [r3]
 800c5c6:	ee87 0a27 	vdiv.f32	s0, s14, s15
	else
	{
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
	}
	return ans;
}
 800c5ca:	b003      	add	sp, #12
 800c5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
 800c5ce:	4a15      	ldr	r2, [pc, #84]	; (800c624 <calcSref_CRI+0x104>)
 800c5d0:	4b15      	ldr	r3, [pc, #84]	; (800c628 <calcSref_CRI+0x108>)
 800c5d2:	4916      	ldr	r1, [pc, #88]	; (800c62c <calcSref_CRI+0x10c>)
 800c5d4:	4403      	add	r3, r0
 800c5d6:	4401      	add	r1, r0
 800c5d8:	4410      	add	r0, r2
 800c5da:	4a15      	ldr	r2, [pc, #84]	; (800c630 <calcSref_CRI+0x110>)
 800c5dc:	ed91 7a00 	vldr	s14, [r1]
 800c5e0:	edd2 7a00 	vldr	s15, [r2]
 800c5e4:	ed90 0a00 	vldr	s0, [r0]
 800c5e8:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c5ec:	ed93 7a00 	vldr	s14, [r3]
 800c5f0:	4b10      	ldr	r3, [pc, #64]	; (800c634 <calcSref_CRI+0x114>)
 800c5f2:	edd3 7a00 	vldr	s15, [r3]
 800c5f6:	eea7 0a27 	vfma.f32	s0, s14, s15
	return ans;
 800c5fa:	e7e6      	b.n	800c5ca <calcSref_CRI+0xaa>
 800c5fc:	f3af 8000 	nop.w
 800c600:	e826d695 	.word	0xe826d695
 800c604:	3e112e0b 	.word	0x3e112e0b
 800c608:	aba38759 	.word	0xaba38759
 800c60c:	3f8d7774 	.word	0x3f8d7774
 800c610:	00000000 	.word	0x00000000
 800c614:	c0140000 	.word	0xc0140000
 800c618:	200501ec 	.word	0x200501ec
 800c61c:	3ff00000 	.word	0x3ff00000
 800c620:	2008c218 	.word	0x2008c218
 800c624:	2004a1e4 	.word	0x2004a1e4
 800c628:	2004c1e4 	.word	0x2004c1e4
 800c62c:	2004b1e4 	.word	0x2004b1e4
 800c630:	200041c8 	.word	0x200041c8
 800c634:	200041cc 	.word	0x200041cc

0800c638 <CRI_func>:
		double x_i_ref = 0;
		double y_i_ref = 0;
		double z_i_ref = 0;

void CRI_func(uint16_t CCT_measure, float *Rabs)
{
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	ed2d 8b08 	vpush	{d8-d11}
 800c640:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800c644:	b083      	sub	sp, #12
	int16_t Ra_temp = 0, Rall_temp = 0, R9_temp = 0;
	float s_ref_CRI[1024] = {0};
 800c646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
{
 800c64a:	900c      	str	r0, [sp, #48]	; 0x30
 800c64c:	468a      	mov	sl, r1
	float s_ref_CRI[1024] = {0};
 800c64e:	a822      	add	r0, sp, #136	; 0x88
 800c650:	2100      	movs	r1, #0
 800c652:	f016 f854 	bl	80226fe <memset>
	float CRI_R_temp[1024] = {0};
 800c656:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800c65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c65e:	2100      	movs	r1, #0
 800c660:	3008      	adds	r0, #8
 800c662:	f016 f84c 	bl	80226fe <memset>

	memset(Ri_temp, 0, sizeof(Ri_temp));
 800c666:	2278      	movs	r2, #120	; 0x78
 800c668:	2100      	movs	r1, #0
 800c66a:	48c1      	ldr	r0, [pc, #772]	; (800c970 <CRI_func+0x338>)
 800c66c:	f016 f847 	bl	80226fe <memset>
	double y_ref = 0;
	double z_ref = 0;
	double u_ref = 0;
	double v_ref = 0;

	if (CCT_measure < 5000)
 800c670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c672:	f241 3387 	movw	r3, #4999	; 0x1387
 800c676:	429a      	cmp	r2, r3
 800c678:	f200 8514 	bhi.w	800d0a4 <CRI_func+0xa6c>
	{
		calcNorm560_CRI(CCT_measure);
 800c67c:	4610      	mov	r0, r2
 800c67e:	f7ff ff17 	bl	800c4b0 <calcNorm560_CRI>
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
	}
	
	
	float u_test = colorimetry_uv[0];	
 800c682:	4bbc      	ldr	r3, [pc, #752]	; (800c974 <CRI_func+0x33c>)
	float v_test = colorimetry_uv[1];
	
	bar_CRI = 0.1;
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c684:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800c978 <CRI_func+0x340>
	float u_test = colorimetry_uv[0];	
 800c688:	edd3 7a00 	vldr	s15, [r3]
	bar_CRI = 0.1;
 800c68c:	a1b2      	add	r1, pc, #712	; (adr r1, 800c958 <CRI_func+0x320>)
 800c68e:	e9d1 0100 	ldrd	r0, r1, [r1]
	float u_test = colorimetry_uv[0];	
 800c692:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
	float v_test = colorimetry_uv[1];
 800c696:	edd3 7a01 	vldr	s15, [r3, #4]
	bar_CRI = 0.1;
 800c69a:	4bb8      	ldr	r3, [pc, #736]	; (800c97c <CRI_func+0x344>)
	float v_test = colorimetry_uv[1];
 800c69c:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
	bar_CRI = 0.1;
 800c6a0:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c6a4:	210d      	movs	r1, #13
 800c6a6:	2055      	movs	r0, #85	; 0x55
 800c6a8:	f009 fb7c 	bl	8015da4 <GUI_Bar_Measure>
	
	for (uint16_t y = 0; y < 1024; y++){
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c6ac:	4bb4      	ldr	r3, [pc, #720]	; (800c980 <CRI_func+0x348>)
 800c6ae:	ed93 7a00 	vldr	s14, [r3]
 800c6b2:	4bb4      	ldr	r3, [pc, #720]	; (800c984 <CRI_func+0x34c>)
 800c6b4:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 800c6b8:	ecfa 6a01 	vldmia	sl!, {s13}
 800c6bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t y = 0; y < 1024; y++){
 800c6c0:	4552      	cmp	r2, sl
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c6c2:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t y = 0; y < 1024; y++){
 800c6c6:	d1f7      	bne.n	800c6b8 <CRI_func+0x80>
 800c6c8:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 800c960 <CRI_func+0x328>
 800c6cc:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800c6d0:	eeb0 8a47 	vmov.f32	s16, s14
 800c6d4:	eef0 8a67 	vmov.f32	s17, s15
 800c6d8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800c6dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c6e0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c6e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c6ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	9300      	str	r3, [sp, #0]
 800c6f4:	9310      	str	r3, [sp, #64]	; 0x40
 800c6f6:	9311      	str	r3, [sp, #68]	; 0x44
	}
	
	for (uint8_t i = 0; i < 15; i++)
	{
		bar_CRI += 0.05;
 800c6f8:	4ca0      	ldr	r4, [pc, #640]	; (800c97c <CRI_func+0x344>)
		for (int j = 0; j < 1024; j++)
		{
			if (i == 0)
			{
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c6fa:	4fa3      	ldr	r7, [pc, #652]	; (800c988 <CRI_func+0x350>)
 800c6fc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800c984 <CRI_func+0x34c>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c700:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800c9b0 <CRI_func+0x378>
		bar_CRI += 0.05;
 800c704:	a398      	add	r3, pc, #608	; (adr r3, 800c968 <CRI_func+0x330>)
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c70e:	f7f3 fdd5 	bl	80002bc <__adddf3>
 800c712:	e9c4 0100 	strd	r0, r1, [r4]
		GUI_Bar_Measure(85, 13, bar_CRI);
 800c716:	f7f4 fa7b 	bl	8000c10 <__aeabi_d2f>
 800c71a:	210d      	movs	r1, #13
 800c71c:	ee00 0a10 	vmov	s0, r0
 800c720:	2055      	movs	r0, #85	; 0x55
 800c722:	f009 fb3f 	bl	8015da4 <GUI_Bar_Measure>
		 x_i_test = 0;
 800c726:	4b99      	ldr	r3, [pc, #612]	; (800c98c <CRI_func+0x354>)
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c728:	4899      	ldr	r0, [pc, #612]	; (800c990 <CRI_func+0x358>)
		 x_i_test = 0;
 800c72a:	ed83 8b00 	vstr	d8, [r3]
		 y_i_test = 0;
 800c72e:	4b99      	ldr	r3, [pc, #612]	; (800c994 <CRI_func+0x35c>)
 800c730:	ed83 8b00 	vstr	d8, [r3]
		 z_i_test = 0;
 800c734:	4b98      	ldr	r3, [pc, #608]	; (800c998 <CRI_func+0x360>)
 800c736:	ed83 8b00 	vstr	d8, [r3]
		 x_i_ref = 0;
 800c73a:	4b98      	ldr	r3, [pc, #608]	; (800c99c <CRI_func+0x364>)
 800c73c:	ed83 8b00 	vstr	d8, [r3]
		 y_i_ref = 0;
 800c740:	4b97      	ldr	r3, [pc, #604]	; (800c9a0 <CRI_func+0x368>)
 800c742:	ed83 8b00 	vstr	d8, [r3]
		 z_i_ref = 0;
 800c746:	4b97      	ldr	r3, [pc, #604]	; (800c9a4 <CRI_func+0x36c>)
 800c748:	ed83 8b00 	vstr	d8, [r3]
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c74c:	9b00      	ldr	r3, [sp, #0]
 800c74e:	f50d 5284 	add.w	r2, sp, #4224	; 0x1080
 800c752:	3208      	adds	r2, #8
 800c754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c758:	eb00 3003 	add.w	r0, r0, r3, lsl #12
 800c75c:	f002 fdfc 	bl	800f358 <Calibration_Load_Pack>
 800c760:	2400      	movs	r4, #0
		for (int j = 0; j < 1024; j++)
 800c762:	4625      	mov	r5, r4
 800c764:	f89d 3000 	ldrb.w	r3, [sp]
 800c768:	930d      	str	r3, [sp, #52]	; 0x34
			if (i == 0)
 800c76a:	9b00      	ldr	r3, [sp, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d150      	bne.n	800c812 <CRI_func+0x1da>
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c770:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c772:	4628      	mov	r0, r5
 800c774:	f7ff fed4 	bl	800c520 <calcSref_CRI>
 800c778:	ab22      	add	r3, sp, #136	; 0x88
 800c77a:	4423      	add	r3, r4
 800c77c:	ed83 0a00 	vstr	s0, [r3]
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c780:	19e3      	adds	r3, r4, r7
 800c782:	edd3 9a00 	vldr	s19, [r3]
 800c786:	eb09 0304 	add.w	r3, r9, r4
 800c78a:	edd3 7a00 	vldr	s15, [r3]
 800c78e:	ee69 7aa7 	vmul.f32	s15, s19, s15
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c792:	eeb0 9a40 	vmov.f32	s18, s0
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c796:	ee17 0a90 	vmov	r0, s15
 800c79a:	f7f3 feed 	bl	8000578 <__aeabi_f2d>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7a6:	f7f3 fd89 	bl	80002bc <__adddf3>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c7aa:	eb04 0308 	add.w	r3, r4, r8
 800c7ae:	edd3 7a00 	vldr	s15, [r3]
 800c7b2:	ee69 7a27 	vmul.f32	s15, s18, s15
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c7b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c7ba:	ee17 0a90 	vmov	r0, s15
 800c7be:	f7f3 fedb 	bl	8000578 <__aeabi_f2d>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7ca:	f7f3 fd77 	bl	80002bc <__adddf3>
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c7ce:	ee69 7a29 	vmul.f32	s15, s18, s19
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c7d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c7d6:	ee17 0a90 	vmov	r0, s15
 800c7da:	f7f3 fecd 	bl	8000578 <__aeabi_f2d>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7e6:	f7f3 fd69 	bl	80002bc <__adddf3>
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c7ea:	4b6f      	ldr	r3, [pc, #444]	; (800c9a8 <CRI_func+0x370>)
 800c7ec:	4423      	add	r3, r4
 800c7ee:	edd3 7a00 	vldr	s15, [r3]
 800c7f2:	ee69 7a27 	vmul.f32	s15, s18, s15
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c7f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c7fa:	ee17 0a90 	vmov	r0, s15
 800c7fe:	f7f3 febb 	bl	8000578 <__aeabi_f2d>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c80a:	f7f3 fd57 	bl	80002bc <__adddf3>
 800c80e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			}

			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c812:	f50d 5384 	add.w	r3, sp, #4224	; 0x1080
 800c816:	3308      	adds	r3, #8
 800c818:	4423      	add	r3, r4
 800c81a:	ed93 9a00 	vldr	s18, [r3]
 800c81e:	4e5b      	ldr	r6, [pc, #364]	; (800c98c <CRI_func+0x354>)
 800c820:	eb09 0304 	add.w	r3, r9, r4
 800c824:	edd3 9a00 	vldr	s19, [r3]
 800c828:	eb04 0308 	add.w	r3, r4, r8
 800c82c:	ee69 9a29 	vmul.f32	s19, s18, s19
 800c830:	ed93 ba00 	vldr	s22, [r3]
 800c834:	ee69 7a8b 	vmul.f32	s15, s19, s22
		for (int j = 0; j < 1024; j++)
 800c838:	3501      	adds	r5, #1
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c83a:	ee17 0a90 	vmov	r0, s15
 800c83e:	f7f3 fe9b 	bl	8000578 <__aeabi_f2d>
 800c842:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c846:	f7f3 fd39 	bl	80002bc <__adddf3>
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c84a:	19e3      	adds	r3, r4, r7
 800c84c:	edd3 aa00 	vldr	s21, [r3]
 800c850:	ee69 7aaa 	vmul.f32	s15, s19, s21
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c854:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c858:	4e4e      	ldr	r6, [pc, #312]	; (800c994 <CRI_func+0x35c>)
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c85a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c85e:	ee17 0a90 	vmov	r0, s15
 800c862:	f7f3 fe89 	bl	8000578 <__aeabi_f2d>
 800c866:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c86a:	f7f3 fd27 	bl	80002bc <__adddf3>
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c86e:	4b4e      	ldr	r3, [pc, #312]	; (800c9a8 <CRI_func+0x370>)
 800c870:	4423      	add	r3, r4
 800c872:	ed93 aa00 	vldr	s20, [r3]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c876:	4682      	mov	sl, r0
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c878:	ee69 7a8a 	vmul.f32	s15, s19, s20
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c87c:	468b      	mov	fp, r1
 800c87e:	e9c6 ab00 	strd	sl, fp, [r6]
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c882:	4e45      	ldr	r6, [pc, #276]	; (800c998 <CRI_func+0x360>)
 800c884:	ee17 0a90 	vmov	r0, s15
 800c888:	f7f3 fe76 	bl	8000578 <__aeabi_f2d>
 800c88c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c890:	f7f3 fd14 	bl	80002bc <__adddf3>

			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c894:	ab22      	add	r3, sp, #136	; 0x88
 800c896:	4423      	add	r3, r4
 800c898:	edd3 7a00 	vldr	s15, [r3]
 800c89c:	ee29 9a27 	vmul.f32	s18, s18, s15
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c8a0:	e9c6 0100 	strd	r0, r1, [r6]
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c8a4:	ee6b 7a09 	vmul.f32	s15, s22, s18
 800c8a8:	4e3c      	ldr	r6, [pc, #240]	; (800c99c <CRI_func+0x364>)
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c8aa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c8ae:	ee17 0a90 	vmov	r0, s15
 800c8b2:	f7f3 fe61 	bl	8000578 <__aeabi_f2d>
 800c8b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8ba:	f7f3 fcff 	bl	80002bc <__adddf3>
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c8be:	ee6a 7a89 	vmul.f32	s15, s21, s18
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c8c2:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c8c6:	4e36      	ldr	r6, [pc, #216]	; (800c9a0 <CRI_func+0x368>)
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c8c8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c8cc:	ee17 0a90 	vmov	r0, s15
 800c8d0:	f7f3 fe52 	bl	8000578 <__aeabi_f2d>
 800c8d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8d8:	f7f3 fcf0 	bl	80002bc <__adddf3>
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c8dc:	ee6a 7a09 	vmul.f32	s15, s20, s18
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c8e0:	e9c6 0100 	strd	r0, r1, [r6]
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c8e4:	4e2f      	ldr	r6, [pc, #188]	; (800c9a4 <CRI_func+0x36c>)
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c8e6:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c8ea:	ee17 0a90 	vmov	r0, s15
 800c8ee:	f7f3 fe43 	bl	8000578 <__aeabi_f2d>
 800c8f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8f6:	f7f3 fce1 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800c8fa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c8fe:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c902:	e9c6 0100 	strd	r0, r1, [r6]
 800c906:	f104 0404 	add.w	r4, r4, #4
		for (int j = 0; j < 1024; j++)
 800c90a:	f47f af2b 	bne.w	800c764 <CRI_func+0x12c>
		}
		if (i == 0) 
 800c90e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c910:	2b00      	cmp	r3, #0
 800c912:	f040 8089 	bne.w	800ca28 <CRI_func+0x3f0>
		{
			k_ref = 100 / y_ref;
 800c916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c91a:	2000      	movs	r0, #0
 800c91c:	4923      	ldr	r1, [pc, #140]	; (800c9ac <CRI_func+0x374>)
 800c91e:	f7f3 ffa9 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800c922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			k_ref = 100 / y_ref;
 800c926:	e9cd 0102 	strd	r0, r1, [sp, #8]
			k_test = 100 / k_test;
 800c92a:	2000      	movs	r0, #0
 800c92c:	491f      	ldr	r1, [pc, #124]	; (800c9ac <CRI_func+0x374>)
 800c92e:	f7f3 ffa1 	bl	8000874 <__aeabi_ddiv>
			x_ref *= k_ref;
 800c932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_test = 100 / k_test;
 800c936:	e9cd 0104 	strd	r0, r1, [sp, #16]
			x_ref *= k_ref;
 800c93a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c93e:	f7f3 fe6f 	bl	8000620 <__aeabi_dmul>
			y_ref *= k_ref;
 800c942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			x_ref *= k_ref;
 800c946:	e9cd 0108 	strd	r0, r1, [sp, #32]
			y_ref *= k_ref;
 800c94a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c94e:	f7f3 fe67 	bl	8000620 <__aeabi_dmul>
			z_ref *= k_ref;
 800c952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c956:	e02d      	b.n	800c9b4 <CRI_func+0x37c>
 800c958:	9999999a 	.word	0x9999999a
 800c95c:	3fb99999 	.word	0x3fb99999
	...
 800c968:	9999999a 	.word	0x9999999a
 800c96c:	3fa99999 	.word	0x3fa99999
 800c970:	2008c278 	.word	0x2008c278
 800c974:	2008add4 	.word	0x2008add4
 800c978:	3dcccccd 	.word	0x3dcccccd
 800c97c:	2008c228 	.word	0x2008c228
 800c980:	20091164 	.word	0x20091164
 800c984:	200041e4 	.word	0x200041e4
 800c988:	2004e1e8 	.word	0x2004e1e8
 800c98c:	200051f0 	.word	0x200051f0
 800c990:	0811b040 	.word	0x0811b040
 800c994:	20005200 	.word	0x20005200
 800c998:	20005210 	.word	0x20005210
 800c99c:	200051e8 	.word	0x200051e8
 800c9a0:	200051f8 	.word	0x200051f8
 800c9a4:	20005208 	.word	0x20005208
 800c9a8:	20088db8 	.word	0x20088db8
 800c9ac:	40590000 	.word	0x40590000
 800c9b0:	20085db8 	.word	0x20085db8
			y_ref *= k_ref;
 800c9b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
			z_ref *= k_ref;
 800c9b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c9bc:	f7f3 fe30 	bl	8000620 <__aeabi_dmul>
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c9c0:	2200      	movs	r2, #0
			z_ref *= k_ref;
 800c9c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c9c6:	4bb7      	ldr	r3, [pc, #732]	; (800cca4 <CRI_func+0x66c>)
 800c9c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9cc:	f7f3 fe28 	bl	8000620 <__aeabi_dmul>
 800c9d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c9d4:	f7f3 fc72 	bl	80002bc <__adddf3>
 800c9d8:	2200      	movs	r2, #0
 800c9da:	4604      	mov	r4, r0
 800c9dc:	460d      	mov	r5, r1
 800c9de:	4bb2      	ldr	r3, [pc, #712]	; (800cca8 <CRI_func+0x670>)
 800c9e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c9e4:	f7f3 fe1c 	bl	8000620 <__aeabi_dmul>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	f7f3 fc64 	bl	80002bc <__adddf3>
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	460d      	mov	r5, r1
 800c9fa:	4bac      	ldr	r3, [pc, #688]	; (800ccac <CRI_func+0x674>)
 800c9fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca00:	f7f3 fe0e 	bl	8000620 <__aeabi_dmul>
 800ca04:	4622      	mov	r2, r4
 800ca06:	462b      	mov	r3, r5
 800ca08:	f7f3 ff34 	bl	8000874 <__aeabi_ddiv>
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800ca0c:	2200      	movs	r2, #0
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800ca0e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800ca12:	4ba7      	ldr	r3, [pc, #668]	; (800ccb0 <CRI_func+0x678>)
 800ca14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca18:	f7f3 fe02 	bl	8000620 <__aeabi_dmul>
 800ca1c:	4622      	mov	r2, r4
 800ca1e:	462b      	mov	r3, r5
 800ca20:	f7f3 ff28 	bl	8000874 <__aeabi_ddiv>
 800ca24:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

		}	
		x_i_test *= k_test;	
 800ca28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ca2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca30:	f7f3 fdf6 	bl	8000620 <__aeabi_dmul>
 800ca34:	4b9f      	ldr	r3, [pc, #636]	; (800ccb4 <CRI_func+0x67c>)
 800ca36:	4680      	mov	r8, r0
 800ca38:	4689      	mov	r9, r1
 800ca3a:	e9c3 8900 	strd	r8, r9, [r3]
		y_i_test *= k_test;
 800ca3e:	4652      	mov	r2, sl
 800ca40:	465b      	mov	r3, fp
 800ca42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca46:	f7f3 fdeb 	bl	8000620 <__aeabi_dmul>
 800ca4a:	4b9b      	ldr	r3, [pc, #620]	; (800ccb8 <CRI_func+0x680>)
 800ca4c:	4682      	mov	sl, r0
 800ca4e:	468b      	mov	fp, r1
 800ca50:	e9c3 ab00 	strd	sl, fp, [r3]
		z_i_test *= k_test;
 800ca54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca58:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ca5c:	f7f3 fde0 	bl	8000620 <__aeabi_dmul>
 800ca60:	4b96      	ldr	r3, [pc, #600]	; (800ccbc <CRI_func+0x684>)
 800ca62:	4604      	mov	r4, r0
 800ca64:	460d      	mov	r5, r1
 800ca66:	e9c3 4500 	strd	r4, r5, [r3]
		
		x_i_ref *= k_ref;
 800ca6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca6e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ca72:	f7f3 fdd5 	bl	8000620 <__aeabi_dmul>
 800ca76:	4b92      	ldr	r3, [pc, #584]	; (800ccc0 <CRI_func+0x688>)
 800ca78:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800ca7c:	e9c3 0100 	strd	r0, r1, [r3]
		y_i_ref *= k_ref;
 800ca80:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ca84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca88:	f7f3 fdca 	bl	8000620 <__aeabi_dmul>
 800ca8c:	4b8d      	ldr	r3, [pc, #564]	; (800ccc4 <CRI_func+0x68c>)
 800ca8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ca92:	e9c3 0100 	strd	r0, r1, [r3]
		z_i_ref *= k_ref;	
 800ca96:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800ca9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca9e:	f7f3 fdbf 	bl	8000620 <__aeabi_dmul>
 800caa2:	4b89      	ldr	r3, [pc, #548]	; (800ccc8 <CRI_func+0x690>)
 800caa4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800caa8:	e9c3 0100 	strd	r0, r1, [r3]
	
		 u_test_s = 4 * x_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800caac:	2200      	movs	r2, #0
 800caae:	4b7d      	ldr	r3, [pc, #500]	; (800cca4 <CRI_func+0x66c>)
 800cab0:	4650      	mov	r0, sl
 800cab2:	4659      	mov	r1, fp
 800cab4:	f7f3 fdb4 	bl	8000620 <__aeabi_dmul>
 800cab8:	4642      	mov	r2, r8
 800caba:	464b      	mov	r3, r9
 800cabc:	f7f3 fbfe 	bl	80002bc <__adddf3>
 800cac0:	2200      	movs	r2, #0
 800cac2:	4606      	mov	r6, r0
 800cac4:	460f      	mov	r7, r1
 800cac6:	4b78      	ldr	r3, [pc, #480]	; (800cca8 <CRI_func+0x670>)
 800cac8:	4620      	mov	r0, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	f7f3 fda8 	bl	8000620 <__aeabi_dmul>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4630      	mov	r0, r6
 800cad6:	4639      	mov	r1, r7
 800cad8:	f7f3 fbf0 	bl	80002bc <__adddf3>
 800cadc:	2200      	movs	r2, #0
 800cade:	4604      	mov	r4, r0
 800cae0:	460d      	mov	r5, r1
 800cae2:	4b72      	ldr	r3, [pc, #456]	; (800ccac <CRI_func+0x674>)
 800cae4:	4640      	mov	r0, r8
 800cae6:	4649      	mov	r1, r9
 800cae8:	f7f3 fd9a 	bl	8000620 <__aeabi_dmul>
 800caec:	4622      	mov	r2, r4
 800caee:	462b      	mov	r3, r5
 800caf0:	f7f3 fec0 	bl	8000874 <__aeabi_ddiv>
 800caf4:	4b75      	ldr	r3, [pc, #468]	; (800cccc <CRI_func+0x694>)
 800caf6:	4680      	mov	r8, r0
 800caf8:	4689      	mov	r9, r1
 800cafa:	e9c3 8900 	strd	r8, r9, [r3]
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800cafe:	2200      	movs	r2, #0
 800cb00:	4b6b      	ldr	r3, [pc, #428]	; (800ccb0 <CRI_func+0x678>)
 800cb02:	4650      	mov	r0, sl
 800cb04:	4659      	mov	r1, fp
 800cb06:	f7f3 fd8b 	bl	8000620 <__aeabi_dmul>
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	462b      	mov	r3, r5
 800cb0e:	f7f3 feb1 	bl	8000874 <__aeabi_ddiv>
 800cb12:	4b6f      	ldr	r3, [pc, #444]	; (800ccd0 <CRI_func+0x698>)
 800cb14:	4606      	mov	r6, r0
 800cb16:	460f      	mov	r7, r1
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800cb18:	ec4b ab10 	vmov	d0, sl, fp
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800cb1c:	e9c3 6700 	strd	r6, r7, [r3]
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800cb20:	f018 fce6 	bl	80254f0 <cbrt>
 800cb24:	2200      	movs	r2, #0
 800cb26:	ec51 0b10 	vmov	r0, r1, d0
 800cb2a:	4b6a      	ldr	r3, [pc, #424]	; (800ccd4 <CRI_func+0x69c>)
 800cb2c:	f7f3 fd78 	bl	8000620 <__aeabi_dmul>
 800cb30:	2200      	movs	r2, #0
 800cb32:	4b69      	ldr	r3, [pc, #420]	; (800ccd8 <CRI_func+0x6a0>)
 800cb34:	f7f3 fbc0 	bl	80002b8 <__aeabi_dsub>
 800cb38:	4b68      	ldr	r3, [pc, #416]	; (800ccdc <CRI_func+0x6a4>)
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800cb3a:	2200      	movs	r2, #0
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800cb3c:	e9c3 0100 	strd	r0, r1, [r3]
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800cb40:	4b67      	ldr	r3, [pc, #412]	; (800cce0 <CRI_func+0x6a8>)
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800cb42:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800cb46:	f7f3 fd6b 	bl	8000620 <__aeabi_dmul>
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	9820      	ldr	r0, [sp, #128]	; 0x80
 800cb4e:	460d      	mov	r5, r1
 800cb50:	f7f3 fd12 	bl	8000578 <__aeabi_f2d>
 800cb54:	4602      	mov	r2, r0
 800cb56:	460b      	mov	r3, r1
 800cb58:	4640      	mov	r0, r8
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	f7f3 fbac 	bl	80002b8 <__aeabi_dsub>
 800cb60:	4622      	mov	r2, r4
 800cb62:	462b      	mov	r3, r5
 800cb64:	f7f3 fd5c 	bl	8000620 <__aeabi_dmul>
 800cb68:	4b5e      	ldr	r3, [pc, #376]	; (800cce4 <CRI_func+0x6ac>)
 800cb6a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800cb6e:	e9c3 0100 	strd	r0, r1, [r3]
		 v_i_test = 13 * L_i_test * (v_test_s - v_test);
 800cb72:	9821      	ldr	r0, [sp, #132]	; 0x84
 800cb74:	f7f3 fd00 	bl	8000578 <__aeabi_f2d>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	4639      	mov	r1, r7
 800cb80:	f7f3 fb9a 	bl	80002b8 <__aeabi_dsub>
 800cb84:	4622      	mov	r2, r4
 800cb86:	462b      	mov	r3, r5
 800cb88:	f7f3 fd4a 	bl	8000620 <__aeabi_dmul>
 800cb8c:	4b56      	ldr	r3, [pc, #344]	; (800cce8 <CRI_func+0x6b0>)
 800cb8e:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800cb92:	e9c3 0100 	strd	r0, r1, [r3]

		 u_ref_s = 4 * x_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800cb96:	2200      	movs	r2, #0
 800cb98:	4b42      	ldr	r3, [pc, #264]	; (800cca4 <CRI_func+0x66c>)
 800cb9a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cb9e:	f7f3 fd3f 	bl	8000620 <__aeabi_dmul>
 800cba2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cba6:	f7f3 fb89 	bl	80002bc <__adddf3>
 800cbaa:	2200      	movs	r2, #0
 800cbac:	4604      	mov	r4, r0
 800cbae:	460d      	mov	r5, r1
 800cbb0:	4b3d      	ldr	r3, [pc, #244]	; (800cca8 <CRI_func+0x670>)
 800cbb2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800cbb6:	f7f3 fd33 	bl	8000620 <__aeabi_dmul>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	f7f3 fb7b 	bl	80002bc <__adddf3>
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	4606      	mov	r6, r0
 800cbca:	460f      	mov	r7, r1
 800cbcc:	4b37      	ldr	r3, [pc, #220]	; (800ccac <CRI_func+0x674>)
 800cbce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800cbd2:	f7f3 fd25 	bl	8000620 <__aeabi_dmul>
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	463b      	mov	r3, r7
 800cbda:	f7f3 fe4b 	bl	8000874 <__aeabi_ddiv>
 800cbde:	4b43      	ldr	r3, [pc, #268]	; (800ccec <CRI_func+0x6b4>)
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	460d      	mov	r5, r1
 800cbe4:	e9c3 4500 	strd	r4, r5, [r3]
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800cbe8:	2200      	movs	r2, #0
 800cbea:	4b31      	ldr	r3, [pc, #196]	; (800ccb0 <CRI_func+0x678>)
 800cbec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cbf0:	f7f3 fd16 	bl	8000620 <__aeabi_dmul>
 800cbf4:	4632      	mov	r2, r6
 800cbf6:	463b      	mov	r3, r7
 800cbf8:	f7f3 fe3c 	bl	8000874 <__aeabi_ddiv>
 800cbfc:	4b3c      	ldr	r3, [pc, #240]	; (800ccf0 <CRI_func+0x6b8>)
 800cbfe:	4682      	mov	sl, r0
 800cc00:	468b      	mov	fp, r1
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800cc02:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800cc06:	e9c3 ab00 	strd	sl, fp, [r3]
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800cc0a:	f018 fc71 	bl	80254f0 <cbrt>
 800cc0e:	2200      	movs	r2, #0
 800cc10:	ec51 0b10 	vmov	r0, r1, d0
 800cc14:	4b2f      	ldr	r3, [pc, #188]	; (800ccd4 <CRI_func+0x69c>)
 800cc16:	f7f3 fd03 	bl	8000620 <__aeabi_dmul>
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	4b2e      	ldr	r3, [pc, #184]	; (800ccd8 <CRI_func+0x6a0>)
 800cc1e:	f7f3 fb4b 	bl	80002b8 <__aeabi_dsub>
 800cc22:	4b34      	ldr	r3, [pc, #208]	; (800ccf4 <CRI_func+0x6bc>)
 800cc24:	4606      	mov	r6, r0
 800cc26:	460f      	mov	r7, r1
 800cc28:	e9c3 6700 	strd	r6, r7, [r3]
		 u_i_ref = 13 * L_i_ref * (u_ref_s - u_ref);
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4b2c      	ldr	r3, [pc, #176]	; (800cce0 <CRI_func+0x6a8>)
 800cc30:	f7f3 fcf6 	bl	8000620 <__aeabi_dmul>
 800cc34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cc38:	4680      	mov	r8, r0
 800cc3a:	4689      	mov	r9, r1
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	4629      	mov	r1, r5
 800cc40:	f7f3 fb3a 	bl	80002b8 <__aeabi_dsub>
 800cc44:	4642      	mov	r2, r8
 800cc46:	464b      	mov	r3, r9
 800cc48:	f7f3 fcea 	bl	8000620 <__aeabi_dmul>
 800cc4c:	4b2a      	ldr	r3, [pc, #168]	; (800ccf8 <CRI_func+0x6c0>)
 800cc4e:	4604      	mov	r4, r0
 800cc50:	460d      	mov	r5, r1
 800cc52:	e9c3 4500 	strd	r4, r5, [r3]
		 v_i_ref = 13 * L_i_ref * (v_ref_s - v_ref);
 800cc56:	4650      	mov	r0, sl
 800cc58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cc5c:	4659      	mov	r1, fp
 800cc5e:	f7f3 fb2b 	bl	80002b8 <__aeabi_dsub>
 800cc62:	4642      	mov	r2, r8
 800cc64:	464b      	mov	r3, r9
 800cc66:	f7f3 fcdb 	bl	8000620 <__aeabi_dmul>
 800cc6a:	4b24      	ldr	r3, [pc, #144]	; (800ccfc <CRI_func+0x6c4>)
 800cc6c:	4680      	mov	r8, r0
 800cc6e:	4689      	mov	r9, r1
 800cc70:	e9c3 8900 	strd	r8, r9, [r3]

		 delta_L = L_i_ref - L_i_test;
 800cc74:	4630      	mov	r0, r6
 800cc76:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800cc7a:	4639      	mov	r1, r7
 800cc7c:	f7f3 fb1c 	bl	80002b8 <__aeabi_dsub>
 800cc80:	4b1f      	ldr	r3, [pc, #124]	; (800cd00 <CRI_func+0x6c8>)
 800cc82:	4606      	mov	r6, r0
 800cc84:	460f      	mov	r7, r1
 800cc86:	e9c3 6700 	strd	r6, r7, [r3]
		 delta_u = u_i_ref - u_i_test;
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800cc90:	4629      	mov	r1, r5
 800cc92:	f7f3 fb11 	bl	80002b8 <__aeabi_dsub>
 800cc96:	4b1b      	ldr	r3, [pc, #108]	; (800cd04 <CRI_func+0x6cc>)
 800cc98:	4604      	mov	r4, r0
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	e9c3 4500 	strd	r4, r5, [r3]
		 delta_v = v_i_ref - v_i_test;	
 800cca0:	4640      	mov	r0, r8
 800cca2:	e031      	b.n	800cd08 <CRI_func+0x6d0>
 800cca4:	402e0000 	.word	0x402e0000
 800cca8:	40080000 	.word	0x40080000
 800ccac:	40100000 	.word	0x40100000
 800ccb0:	40180000 	.word	0x40180000
 800ccb4:	200051f0 	.word	0x200051f0
 800ccb8:	20005200 	.word	0x20005200
 800ccbc:	20005210 	.word	0x20005210
 800ccc0:	200051e8 	.word	0x200051e8
 800ccc4:	200051f8 	.word	0x200051f8
 800ccc8:	20005208 	.word	0x20005208
 800cccc:	2008c248 	.word	0x2008c248
 800ccd0:	2008c1f8 	.word	0x2008c1f8
 800ccd4:	40390000 	.word	0x40390000
 800ccd8:	40310000 	.word	0x40310000
 800ccdc:	2008c270 	.word	0x2008c270
 800cce0:	402a0000 	.word	0x402a0000
 800cce4:	2008c200 	.word	0x2008c200
 800cce8:	2008c240 	.word	0x2008c240
 800ccec:	2008c268 	.word	0x2008c268
 800ccf0:	2008c208 	.word	0x2008c208
 800ccf4:	2008c250 	.word	0x2008c250
 800ccf8:	2008c220 	.word	0x2008c220
 800ccfc:	2008c1f0 	.word	0x2008c1f0
 800cd00:	2008c238 	.word	0x2008c238
 800cd04:	2008c230 	.word	0x2008c230
 800cd08:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	f7f3 fad3 	bl	80002b8 <__aeabi_dsub>
 800cd12:	4bd5      	ldr	r3, [pc, #852]	; (800d068 <CRI_func+0xa30>)
 800cd14:	4680      	mov	r8, r0
 800cd16:	4689      	mov	r9, r1
		
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800cd18:	4632      	mov	r2, r6
		 delta_v = v_i_ref - v_i_test;	
 800cd1a:	e9c3 8900 	strd	r8, r9, [r3]
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800cd1e:	4630      	mov	r0, r6
 800cd20:	463b      	mov	r3, r7
 800cd22:	4639      	mov	r1, r7
 800cd24:	f7f3 fc7c 	bl	8000620 <__aeabi_dmul>
 800cd28:	4622      	mov	r2, r4
 800cd2a:	462b      	mov	r3, r5
 800cd2c:	4606      	mov	r6, r0
 800cd2e:	460f      	mov	r7, r1
 800cd30:	4620      	mov	r0, r4
 800cd32:	4629      	mov	r1, r5
 800cd34:	f7f3 fc74 	bl	8000620 <__aeabi_dmul>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	4639      	mov	r1, r7
 800cd40:	f7f3 fabc 	bl	80002bc <__adddf3>
 800cd44:	4642      	mov	r2, r8
 800cd46:	4604      	mov	r4, r0
 800cd48:	460d      	mov	r5, r1
 800cd4a:	464b      	mov	r3, r9
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	4649      	mov	r1, r9
 800cd50:	f7f3 fc66 	bl	8000620 <__aeabi_dmul>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	4620      	mov	r0, r4
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	f7f3 faae 	bl	80002bc <__adddf3>
 800cd60:	ec41 0b10 	vmov	d0, r0, r1
 800cd64:	f018 ff78 	bl	8025c58 <sqrt>
 800cd68:	4bc0      	ldr	r3, [pc, #768]	; (800d06c <CRI_func+0xa34>)
 800cd6a:	ec51 0b10 	vmov	r0, r1, d0
 800cd6e:	ed83 0b00 	vstr	d0, [r3]
		Ri_temp[i] = 100 - 4.6*delta_E_CRI;
 800cd72:	a39b      	add	r3, pc, #620	; (adr r3, 800cfe0 <CRI_func+0x9a8>)
 800cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd78:	f7f3 fc52 	bl	8000620 <__aeabi_dmul>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	2000      	movs	r0, #0
 800cd82:	49bb      	ldr	r1, [pc, #748]	; (800d070 <CRI_func+0xa38>)
 800cd84:	f7f3 fa98 	bl	80002b8 <__aeabi_dsub>
 800cd88:	9a00      	ldr	r2, [sp, #0]
 800cd8a:	4bba      	ldr	r3, [pc, #744]	; (800d074 <CRI_func+0xa3c>)
 800cd8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd90:	e9c3 0100 	strd	r0, r1, [r3]
		Ri[i] = (int8_t)Ri_temp[i];
 800cd94:	f7f3 fef4 	bl	8000b80 <__aeabi_d2iz>
 800cd98:	4bb7      	ldr	r3, [pc, #732]	; (800d078 <CRI_func+0xa40>)
 800cd9a:	9a00      	ldr	r2, [sp, #0]
 800cd9c:	b240      	sxtb	r0, r0
 800cd9e:	54d0      	strb	r0, [r2, r3]
		
		if (i < 8)
 800cda0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cda2:	2b07      	cmp	r3, #7
 800cda4:	f200 8111 	bhi.w	800cfca <CRI_func+0x992>
			Ra_temp += Ri[i];
 800cda8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdaa:	4403      	add	r3, r0
 800cdac:	b21b      	sxth	r3, r3
 800cdae:	9311      	str	r3, [sp, #68]	; 0x44
		if (i == 8)
			R9 = Ri[i];
		if(i < 14)
 800cdb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdb2:	2b0e      	cmp	r3, #14
 800cdb4:	f040 810f 	bne.w	800cfd6 <CRI_func+0x99e>
			Rall_temp += Ri[i];
		
		memset(CRI_R_temp, 0, sizeof(CRI_R_temp));		
 800cdb8:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800cdbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	3008      	adds	r0, #8
 800cdc4:	f015 fc9b 	bl	80226fe <memset>
 800cdc8:	9b00      	ldr	r3, [sp, #0]
 800cdca:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 15; i++)
 800cdcc:	2b0f      	cmp	r3, #15
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	f47f ac92 	bne.w	800c6f8 <CRI_func+0xc0>
	}
	
	bar_CRI = 0.9;
 800cdd4:	a384      	add	r3, pc, #528	; (adr r3, 800cfe8 <CRI_func+0x9b0>)
 800cdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdda:	4ca8      	ldr	r4, [pc, #672]	; (800d07c <CRI_func+0xa44>)
	GUI_Bar_Measure(85, 13, bar_CRI);
 800cddc:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800d080 <CRI_func+0xa48>
 800cde0:	210d      	movs	r1, #13
 800cde2:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 0.9;
 800cde4:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800cde8:	f008 ffdc 	bl	8015da4 <GUI_Bar_Measure>
	
	Rall_temp /= 14;
 800cdec:	9b10      	ldr	r3, [sp, #64]	; 0x40
	Rall = (int8_t)Rall_temp;
	
	Ra_temp /= 8;
 800cdee:	9a11      	ldr	r2, [sp, #68]	; 0x44
	Rall_temp /= 14;
 800cdf0:	200e      	movs	r0, #14
 800cdf2:	fb93 f0f0 	sdiv	r0, r3, r0
	Rall = (int8_t)Rall_temp;
 800cdf6:	4ba3      	ldr	r3, [pc, #652]	; (800d084 <CRI_func+0xa4c>)
 800cdf8:	7018      	strb	r0, [r3, #0]
	Ra_temp /= 8;
 800cdfa:	2308      	movs	r3, #8
 800cdfc:	fb92 f3f3 	sdiv	r3, r2, r3
	Ra = (int8_t)Ra_temp;
 800ce00:	4aa1      	ldr	r2, [pc, #644]	; (800d088 <CRI_func+0xa50>)
 800ce02:	7013      	strb	r3, [r2, #0]
	
	bar_CRI = 1.0;
 800ce04:	4ba1      	ldr	r3, [pc, #644]	; (800d08c <CRI_func+0xa54>)
 800ce06:	2200      	movs	r2, #0
	GUI_Bar_Measure(85, 13, bar_CRI);
 800ce08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce0c:	210d      	movs	r1, #13
 800ce0e:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 1.0;
 800ce10:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800ce14:	f008 ffc6 	bl	8015da4 <GUI_Bar_Measure>
 800ce18:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 800ce1c:	b003      	add	sp, #12
 800ce1e:	ecbd 8b08 	vpop	{d8-d11}
 800ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ce26:	ee68 8a08 	vmul.f32	s17, s16, s16
 800ce2a:	ee68 7a28 	vmul.f32	s15, s16, s17
 800ce2e:	ee17 0a90 	vmov	r0, s15
 800ce32:	f7f3 fba1 	bl	8000578 <__aeabi_f2d>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	a16d      	add	r1, pc, #436	; (adr r1, 800cff0 <CRI_func+0x9b8>)
 800ce3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce40:	f7f3 fd18 	bl	8000874 <__aeabi_ddiv>
 800ce44:	4606      	mov	r6, r0
 800ce46:	ee18 0a90 	vmov	r0, s17
 800ce4a:	460f      	mov	r7, r1
 800ce4c:	f7f3 fb94 	bl	8000578 <__aeabi_f2d>
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	a168      	add	r1, pc, #416	; (adr r1, 800cff8 <CRI_func+0x9c0>)
 800ce56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce5a:	f7f3 fd0b 	bl	8000874 <__aeabi_ddiv>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4630      	mov	r0, r6
 800ce64:	4639      	mov	r1, r7
 800ce66:	f7f3 fa29 	bl	80002bc <__adddf3>
 800ce6a:	4606      	mov	r6, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800ce6c:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ce70:	460f      	mov	r7, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800ce72:	f7f3 fb81 	bl	8000578 <__aeabi_f2d>
 800ce76:	4602      	mov	r2, r0
 800ce78:	460b      	mov	r3, r1
 800ce7a:	a161      	add	r1, pc, #388	; (adr r1, 800d000 <CRI_func+0x9c8>)
 800ce7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce80:	f7f3 fcf8 	bl	8000874 <__aeabi_ddiv>
 800ce84:	4602      	mov	r2, r0
 800ce86:	460b      	mov	r3, r1
 800ce88:	4630      	mov	r0, r6
 800ce8a:	4639      	mov	r1, r7
 800ce8c:	f7f3 fa16 	bl	80002bc <__adddf3>
 800ce90:	a35d      	add	r3, pc, #372	; (adr r3, 800d008 <CRI_func+0x9d0>)
 800ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ce96:	f7f3 fa11 	bl	80002bc <__adddf3>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ce9a:	e9c4 0100 	strd	r0, r1, [r4]
		yD_CRI = -3 * xD_CRI*xD_CRI + 2.87*xD_CRI - 0.275;
 800ce9e:	e9d4 4500 	ldrd	r4, r5, [r4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	4b7a      	ldr	r3, [pc, #488]	; (800d090 <CRI_func+0xa58>)
 800cea6:	4620      	mov	r0, r4
 800cea8:	4629      	mov	r1, r5
 800ceaa:	f7f3 fbb9 	bl	8000620 <__aeabi_dmul>
 800ceae:	4622      	mov	r2, r4
 800ceb0:	462b      	mov	r3, r5
 800ceb2:	f7f3 fbb5 	bl	8000620 <__aeabi_dmul>
 800ceb6:	a356      	add	r3, pc, #344	; (adr r3, 800d010 <CRI_func+0x9d8>)
 800ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebc:	4606      	mov	r6, r0
 800cebe:	460f      	mov	r7, r1
 800cec0:	4620      	mov	r0, r4
 800cec2:	4629      	mov	r1, r5
 800cec4:	f7f3 fbac 	bl	8000620 <__aeabi_dmul>
 800cec8:	4602      	mov	r2, r0
 800ceca:	460b      	mov	r3, r1
 800cecc:	4630      	mov	r0, r6
 800cece:	4639      	mov	r1, r7
 800ced0:	f7f3 f9f4 	bl	80002bc <__adddf3>
 800ced4:	a350      	add	r3, pc, #320	; (adr r3, 800d018 <CRI_func+0x9e0>)
 800ced6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceda:	f7f3 f9ed 	bl	80002b8 <__aeabi_dsub>
 800cede:	4b6d      	ldr	r3, [pc, #436]	; (800d094 <CRI_func+0xa5c>)
 800cee0:	4606      	mov	r6, r0
 800cee2:	460f      	mov	r7, r1
 800cee4:	e9c3 6700 	strd	r6, r7, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cee8:	4620      	mov	r0, r4
 800ceea:	a34d      	add	r3, pc, #308	; (adr r3, 800d020 <CRI_func+0x9e8>)
 800ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef0:	4629      	mov	r1, r5
 800cef2:	f7f3 fb95 	bl	8000620 <__aeabi_dmul>
 800cef6:	a34c      	add	r3, pc, #304	; (adr r3, 800d028 <CRI_func+0x9f0>)
 800cef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefc:	f7f3 f9de 	bl	80002bc <__adddf3>
 800cf00:	a34b      	add	r3, pc, #300	; (adr r3, 800d030 <CRI_func+0x9f8>)
 800cf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf06:	4680      	mov	r8, r0
 800cf08:	4689      	mov	r9, r1
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	4639      	mov	r1, r7
 800cf0e:	f7f3 fb87 	bl	8000620 <__aeabi_dmul>
 800cf12:	4602      	mov	r2, r0
 800cf14:	460b      	mov	r3, r1
 800cf16:	4640      	mov	r0, r8
 800cf18:	4649      	mov	r1, r9
 800cf1a:	f7f3 f9cd 	bl	80002b8 <__aeabi_dsub>
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800cf1e:	a346      	add	r3, pc, #280	; (adr r3, 800d038 <CRI_func+0xa00>)
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cf24:	4680      	mov	r8, r0
 800cf26:	4689      	mov	r9, r1
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800cf28:	4620      	mov	r0, r4
 800cf2a:	4629      	mov	r1, r5
 800cf2c:	f7f3 fb78 	bl	8000620 <__aeabi_dmul>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	a142      	add	r1, pc, #264	; (adr r1, 800d040 <CRI_func+0xa08>)
 800cf36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf3a:	f7f3 f9bd 	bl	80002b8 <__aeabi_dsub>
 800cf3e:	a342      	add	r3, pc, #264	; (adr r3, 800d048 <CRI_func+0xa10>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	e9cd 0100 	strd	r0, r1, [sp]
 800cf48:	4630      	mov	r0, r6
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	f7f3 fb68 	bl	8000620 <__aeabi_dmul>
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf58:	f7f3 f9b0 	bl	80002bc <__adddf3>
 800cf5c:	f7f3 fe58 	bl	8000c10 <__aeabi_d2f>
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cf60:	f7f3 fb0a 	bl	8000578 <__aeabi_f2d>
 800cf64:	4642      	mov	r2, r8
 800cf66:	464b      	mov	r3, r9
 800cf68:	f7f3 fc84 	bl	8000874 <__aeabi_ddiv>
 800cf6c:	f7f3 fe50 	bl	8000c10 <__aeabi_d2f>
 800cf70:	4b49      	ldr	r3, [pc, #292]	; (800d098 <CRI_func+0xa60>)
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800cf72:	4629      	mov	r1, r5
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cf74:	6018      	str	r0, [r3, #0]
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800cf76:	a336      	add	r3, pc, #216	; (adr r3, 800d050 <CRI_func+0xa18>)
 800cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7f3 fb4f 	bl	8000620 <__aeabi_dmul>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	a134      	add	r1, pc, #208	; (adr r1, 800d058 <CRI_func+0xa20>)
 800cf88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf8c:	f7f3 f994 	bl	80002b8 <__aeabi_dsub>
 800cf90:	a333      	add	r3, pc, #204	; (adr r3, 800d060 <CRI_func+0xa28>)
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	4604      	mov	r4, r0
 800cf98:	460d      	mov	r5, r1
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	4639      	mov	r1, r7
 800cf9e:	f7f3 fb3f 	bl	8000620 <__aeabi_dmul>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	f7f3 f987 	bl	80002bc <__adddf3>
 800cfae:	f7f3 fe2f 	bl	8000c10 <__aeabi_d2f>
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cfb2:	f7f3 fae1 	bl	8000578 <__aeabi_f2d>
 800cfb6:	464b      	mov	r3, r9
 800cfb8:	4642      	mov	r2, r8
 800cfba:	f7f3 fc5b 	bl	8000874 <__aeabi_ddiv>
 800cfbe:	f7f3 fe27 	bl	8000c10 <__aeabi_d2f>
 800cfc2:	4b36      	ldr	r3, [pc, #216]	; (800d09c <CRI_func+0xa64>)
 800cfc4:	6018      	str	r0, [r3, #0]
 800cfc6:	f7ff bb5c 	b.w	800c682 <CRI_func+0x4a>
		if (i == 8)
 800cfca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfcc:	2b08      	cmp	r3, #8
 800cfce:	f47f aeef 	bne.w	800cdb0 <CRI_func+0x778>
			R9 = Ri[i];
 800cfd2:	4b33      	ldr	r3, [pc, #204]	; (800d0a0 <CRI_func+0xa68>)
 800cfd4:	7018      	strb	r0, [r3, #0]
			Rall_temp += Ri[i];
 800cfd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfd8:	4418      	add	r0, r3
 800cfda:	b203      	sxth	r3, r0
 800cfdc:	9310      	str	r3, [sp, #64]	; 0x40
 800cfde:	e6eb      	b.n	800cdb8 <CRI_func+0x780>
 800cfe0:	66666666 	.word	0x66666666
 800cfe4:	40126666 	.word	0x40126666
 800cfe8:	cccccccd 	.word	0xcccccccd
 800cfec:	3feccccc 	.word	0x3feccccc
 800cff0:	dc000000 	.word	0xdc000000
 800cff4:	c1f12993 	.word	0xc1f12993
 800cff8:	00000000 	.word	0x00000000
 800cffc:	4146a47c 	.word	0x4146a47c
 800d000:	3d70a3d7 	.word	0x3d70a3d7
 800d004:	4058c70a 	.word	0x4058c70a
 800d008:	d594f26b 	.word	0xd594f26b
 800d00c:	3fcf3d74 	.word	0x3fcf3d74
 800d010:	8f5c28f6 	.word	0x8f5c28f6
 800d014:	4006f5c2 	.word	0x4006f5c2
 800d018:	9999999a 	.word	0x9999999a
 800d01c:	3fd19999 	.word	0x3fd19999
 800d020:	af4f0d84 	.word	0xaf4f0d84
 800d024:	3fd06594 	.word	0x3fd06594
 800d028:	9f559b3d 	.word	0x9f559b3d
 800d02c:	3f98adab 	.word	0x3f98adab
 800d030:	487fcb92 	.word	0x487fcb92
 800d034:	3fe77dbf 	.word	0x3fe77dbf
 800d038:	17c1bda5 	.word	0x17c1bda5
 800d03c:	3ffc5326 	.word	0x3ffc5326
 800d040:	76c8b439 	.word	0x76c8b439
 800d044:	bff59fbe 	.word	0xbff59fbe
 800d048:	0aa64c30 	.word	0x0aa64c30
 800d04c:	4017a546 	.word	0x4017a546
 800d050:	205bc01a 	.word	0x205bc01a
 800d054:	403f7141 	.word	0x403f7141
 800d058:	eb851eb8 	.word	0xeb851eb8
 800d05c:	3f9eb851 	.word	0x3f9eb851
 800d060:	ee631f8a 	.word	0xee631f8a
 800d064:	403e125a 	.word	0x403e125a
 800d068:	2008c2f0 	.word	0x2008c2f0
 800d06c:	2008c260 	.word	0x2008c260
 800d070:	40590000 	.word	0x40590000
 800d074:	2008c278 	.word	0x2008c278
 800d078:	200041d3 	.word	0x200041d3
 800d07c:	2008c228 	.word	0x2008c228
 800d080:	3f666666 	.word	0x3f666666
 800d084:	200041d2 	.word	0x200041d2
 800d088:	200041d1 	.word	0x200041d1
 800d08c:	3ff00000 	.word	0x3ff00000
 800d090:	c0080000 	.word	0xc0080000
 800d094:	2008c258 	.word	0x2008c258
 800d098:	200041c8 	.word	0x200041c8
 800d09c:	200041cc 	.word	0x200041cc
 800d0a0:	200041d0 	.word	0x200041d0
		if (CCT_measure < 7000)
 800d0a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0a6:	4c30      	ldr	r4, [pc, #192]	; (800d168 <CRI_func+0xb30>)
 800d0a8:	f641 3357 	movw	r3, #6999	; 0x1b57
 800d0ac:	ee07 2a90 	vmov	s15, r2
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800d0b6:	f67f aeb6 	bls.w	800ce26 <CRI_func+0x7ee>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800d0ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d0bc:	f7f3 fa3a 	bl	8000534 <__aeabi_ui2d>
 800d0c0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d140 <CRI_func+0xb08>
 800d0c4:	ec41 0b10 	vmov	d0, r0, r1
 800d0c8:	f018 fc4e 	bl	8025968 <pow>
 800d0cc:	ee68 7a08 	vmul.f32	s15, s16, s16
 800d0d0:	ed8d 0b00 	vstr	d0, [sp]
 800d0d4:	ee17 0a90 	vmov	r0, s15
 800d0d8:	f7f3 fa4e 	bl	8000578 <__aeabi_f2d>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	a119      	add	r1, pc, #100	; (adr r1, 800d148 <CRI_func+0xb10>)
 800d0e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0e6:	f7f3 fbc5 	bl	8000874 <__aeabi_ddiv>
 800d0ea:	ed9d 0b00 	vldr	d0, [sp]
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	ec53 2b10 	vmov	r2, r3, d0
 800d0f4:	460f      	mov	r7, r1
 800d0f6:	a116      	add	r1, pc, #88	; (adr r1, 800d150 <CRI_func+0xb18>)
 800d0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0fc:	f7f3 fbba 	bl	8000874 <__aeabi_ddiv>
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	4630      	mov	r0, r6
 800d106:	4639      	mov	r1, r7
 800d108:	f7f3 f8d8 	bl	80002bc <__adddf3>
 800d10c:	4606      	mov	r6, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800d10e:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800d112:	460f      	mov	r7, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800d114:	f7f3 fa30 	bl	8000578 <__aeabi_f2d>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	a10e      	add	r1, pc, #56	; (adr r1, 800d158 <CRI_func+0xb20>)
 800d11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d122:	f7f3 fba7 	bl	8000874 <__aeabi_ddiv>
 800d126:	4602      	mov	r2, r0
 800d128:	460b      	mov	r3, r1
 800d12a:	4630      	mov	r0, r6
 800d12c:	4639      	mov	r1, r7
 800d12e:	f7f3 f8c5 	bl	80002bc <__adddf3>
 800d132:	a30b      	add	r3, pc, #44	; (adr r3, 800d160 <CRI_func+0xb28>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	e6ad      	b.n	800ce96 <CRI_func+0x85e>
 800d13a:	bf00      	nop
 800d13c:	f3af 8000 	nop.w
 800d140:	00000000 	.word	0x00000000
 800d144:	40080000 	.word	0x40080000
 800d148:	00000000 	.word	0x00000000
 800d14c:	413d04e8 	.word	0x413d04e8
 800d150:	00000001 	.word	0x00000001
 800d154:	c1dde5cf 	.word	0xc1dde5cf
 800d158:	28f5c290 	.word	0x28f5c290
 800d15c:	406eef5c 	.word	0x406eef5c
 800d160:	a3ec02f3 	.word	0xa3ec02f3
 800d164:	3fce5753 	.word	0x3fce5753
 800d168:	2008c210 	.word	0x2008c210

0800d16c <CRI_Axes>:
#include "CRI_graph.h"
uint8_t TFT_direction = 0x00;



void CRI_Axes(uint8_t direction){
 800d16c:	b510      	push	{r4, lr}
 800d16e:	b082      	sub	sp, #8
	if (direction == 0x00)
 800d170:	b128      	cbz	r0, 800d17e <CRI_Axes+0x12>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
	} else if (direction == 0x01)
 800d172:	2801      	cmp	r0, #1
 800d174:	d06e      	beq.n	800d254 <CRI_Axes+0xe8>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100

	} else if (direction == 0x02)
 800d176:	2802      	cmp	r0, #2
 800d178:	d039      	beq.n	800d1ee <CRI_Axes+0x82>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
		
	}
}
 800d17a:	b002      	add	sp, #8
 800d17c:	bd10      	pop	{r4, pc}
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800d17e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d182:	9400      	str	r4, [sp, #0]
 800d184:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800d188:	2212      	movs	r2, #18
 800d18a:	215f      	movs	r1, #95	; 0x5f
 800d18c:	2010      	movs	r0, #16
 800d18e:	f011 fc7f 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800d192:	9400      	str	r4, [sp, #0]
 800d194:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800d198:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800d19c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d1a0:	2010      	movs	r0, #16
 800d1a2:	f011 fc75 	bl	801ea90 <TFT_FillRectangle>
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800d1a6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	9400      	str	r4, [sp, #0]
 800d1ae:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d1b2:	2010      	movs	r0, #16
 800d1b4:	f011 fc04 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800d1b8:	f240 1301 	movw	r3, #257	; 0x101
 800d1bc:	4619      	mov	r1, r3
 800d1be:	9400      	str	r4, [sp, #0]
 800d1c0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d1c4:	2010      	movs	r0, #16
 800d1c6:	f011 fbfb 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800d1ca:	23b5      	movs	r3, #181	; 0xb5
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	9400      	str	r4, [sp, #0]
 800d1d0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d1d4:	2010      	movs	r0, #16
 800d1d6:	f011 fbf3 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800d1da:	2369      	movs	r3, #105	; 0x69
 800d1dc:	9400      	str	r4, [sp, #0]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d1e4:	2010      	movs	r0, #16
 800d1e6:	f011 fbeb 	bl	801e9c0 <TFT_DrawLine>
}
 800d1ea:	b002      	add	sp, #8
 800d1ec:	bd10      	pop	{r4, pc}
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800d1ee:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d1f2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d1f6:	2210      	movs	r2, #16
 800d1f8:	214a      	movs	r1, #74	; 0x4a
 800d1fa:	2012      	movs	r0, #18
 800d1fc:	9400      	str	r4, [sp, #0]
 800d1fe:	f011 fc47 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800d202:	234c      	movs	r3, #76	; 0x4c
 800d204:	22e8      	movs	r2, #232	; 0xe8
 800d206:	214a      	movs	r1, #74	; 0x4a
 800d208:	2011      	movs	r0, #17
 800d20a:	9400      	str	r4, [sp, #0]
 800d20c:	f011 fc40 	bl	801ea90 <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800d210:	2244      	movs	r2, #68	; 0x44
 800d212:	4610      	mov	r0, r2
 800d214:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d218:	2146      	movs	r1, #70	; 0x46
 800d21a:	9400      	str	r4, [sp, #0]
 800d21c:	f011 fbd0 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800d220:	2279      	movs	r2, #121	; 0x79
 800d222:	4610      	mov	r0, r2
 800d224:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d228:	2146      	movs	r1, #70	; 0x46
 800d22a:	9400      	str	r4, [sp, #0]
 800d22c:	f011 fbc8 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800d230:	22ae      	movs	r2, #174	; 0xae
 800d232:	4610      	mov	r0, r2
 800d234:	9400      	str	r4, [sp, #0]
 800d236:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d23a:	2146      	movs	r1, #70	; 0x46
 800d23c:	f011 fbc0 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800d240:	22e3      	movs	r2, #227	; 0xe3
 800d242:	9400      	str	r4, [sp, #0]
 800d244:	4610      	mov	r0, r2
 800d246:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d24a:	2146      	movs	r1, #70	; 0x46
 800d24c:	f011 fbb8 	bl	801e9c0 <TFT_DrawLine>
}
 800d250:	b002      	add	sp, #8
 800d252:	bd10      	pop	{r4, pc}
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800d254:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d258:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d25c:	22ff      	movs	r2, #255	; 0xff
 800d25e:	2146      	movs	r1, #70	; 0x46
 800d260:	20fd      	movs	r0, #253	; 0xfd
 800d262:	9400      	str	r4, [sp, #0]
 800d264:	f011 fc14 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800d268:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d26c:	22ff      	movs	r2, #255	; 0xff
 800d26e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800d272:	2028      	movs	r0, #40	; 0x28
 800d274:	9400      	str	r4, [sp, #0]
 800d276:	f011 fc0b 	bl	801ea90 <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800d27a:	22cc      	movs	r2, #204	; 0xcc
 800d27c:	4610      	mov	r0, r2
 800d27e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d282:	2146      	movs	r1, #70	; 0x46
 800d284:	9400      	str	r4, [sp, #0]
 800d286:	f011 fb9b 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800d28a:	2297      	movs	r2, #151	; 0x97
 800d28c:	4610      	mov	r0, r2
 800d28e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d292:	2146      	movs	r1, #70	; 0x46
 800d294:	9400      	str	r4, [sp, #0]
 800d296:	f011 fb93 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800d29a:	2262      	movs	r2, #98	; 0x62
 800d29c:	4610      	mov	r0, r2
 800d29e:	9400      	str	r4, [sp, #0]
 800d2a0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d2a4:	2146      	movs	r1, #70	; 0x46
 800d2a6:	f011 fb8b 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800d2aa:	222d      	movs	r2, #45	; 0x2d
 800d2ac:	e7c9      	b.n	800d242 <CRI_Axes+0xd6>
 800d2ae:	bf00      	nop

0800d2b0 <CRI_Axes_Measure>:

void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800d2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2b2:	b083      	sub	sp, #12

	char buffer[2] = {0};
 800d2b4:	2500      	movs	r5, #0
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800d2b6:	460f      	mov	r7, r1
 800d2b8:	4616      	mov	r6, r2
 800d2ba:	461c      	mov	r4, r3
	char buffer[2] = {0};
 800d2bc:	f8ad 5004 	strh.w	r5, [sp, #4]
	
	
if (direction == 0x00)
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	d069      	beq.n	800d398 <CRI_Axes_Measure+0xe8>
		TFT_DrawChar(183, 70-2, 'R');
		TFT_DrawChar(198, 70-2, '9');
		
	} else if(direction != 0x00)
	{
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d2c4:	4d65      	ldr	r5, [pc, #404]	; (800d45c <CRI_Axes_Measure+0x1ac>)
 800d2c6:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800d2c8:	bf14      	ite	ne
 800d2ca:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d2cc:	7028      	strbeq	r0, [r5, #0]
		
		TFT_SetTextColor(TFT_White);
 800d2ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d2d2:	bf18      	it	ne
 800d2d4:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d2d6:	f011 fe85 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d2da:	2063      	movs	r0, #99	; 0x63
 800d2dc:	f011 fe88 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800d2e0:	485f      	ldr	r0, [pc, #380]	; (800d460 <CRI_Axes_Measure+0x1b0>)
 800d2e2:	f011 fe79 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800d2e6:	2261      	movs	r2, #97	; 0x61
 800d2e8:	2110      	movs	r1, #16
 800d2ea:	2064      	movs	r0, #100	; 0x64
 800d2ec:	f011 ff6a 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800d2f0:	485c      	ldr	r0, [pc, #368]	; (800d464 <CRI_Axes_Measure+0x1b4>)
 800d2f2:	f011 fe71 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'R');
 800d2f6:	2252      	movs	r2, #82	; 0x52
 800d2f8:	210e      	movs	r1, #14
 800d2fa:	2055      	movs	r0, #85	; 0x55
 800d2fc:	f011 ff62 	bl	801f1c4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Ra);
 800d300:	463a      	mov	r2, r7
 800d302:	a801      	add	r0, sp, #4
 800d304:	4958      	ldr	r1, [pc, #352]	; (800d468 <CRI_Axes_Measure+0x1b8>)
 800d306:	f015 fa03 	bl	8022710 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800d30a:	2303      	movs	r3, #3
 800d30c:	aa01      	add	r2, sp, #4
 800d30e:	210e      	movs	r1, #14
 800d310:	207d      	movs	r0, #125	; 0x7d
 800d312:	f011 ffcd 	bl	801f2b0 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800d316:	4852      	ldr	r0, [pc, #328]	; (800d460 <CRI_Axes_Measure+0x1b0>)
 800d318:	f011 fe5e 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(221, 16, 'l');
 800d31c:	226c      	movs	r2, #108	; 0x6c
 800d31e:	2110      	movs	r1, #16
 800d320:	20dd      	movs	r0, #221	; 0xdd
 800d322:	f011 ff4f 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(230, 16, 'l');
 800d326:	226c      	movs	r2, #108	; 0x6c
 800d328:	2110      	movs	r1, #16
 800d32a:	20e6      	movs	r0, #230	; 0xe6
 800d32c:	f011 ff4a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(210, 16, 'a');
 800d330:	2261      	movs	r2, #97	; 0x61
 800d332:	2110      	movs	r1, #16
 800d334:	20d2      	movs	r0, #210	; 0xd2
 800d336:	f011 ff45 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800d33a:	484a      	ldr	r0, [pc, #296]	; (800d464 <CRI_Axes_Measure+0x1b4>)
 800d33c:	f011 fe4c 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(195, 16-2, 'R');
 800d340:	2252      	movs	r2, #82	; 0x52
 800d342:	210e      	movs	r1, #14
 800d344:	20c3      	movs	r0, #195	; 0xc3
 800d346:	f011 ff3d 	bl	801f1c4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Rall);
 800d34a:	4632      	mov	r2, r6
 800d34c:	a801      	add	r0, sp, #4
 800d34e:	4946      	ldr	r1, [pc, #280]	; (800d468 <CRI_Axes_Measure+0x1b8>)
 800d350:	f015 f9de 	bl	8022710 <sprintf>
		TFT_DisplayString(255, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800d354:	2303      	movs	r3, #3
 800d356:	aa01      	add	r2, sp, #4
 800d358:	210e      	movs	r1, #14
 800d35a:	20ff      	movs	r0, #255	; 0xff
 800d35c:	f011 ffa8 	bl	801f2b0 <TFT_DisplayString>

		TFT_DrawChar(325, 16-2, 'R');
 800d360:	2252      	movs	r2, #82	; 0x52
 800d362:	210e      	movs	r1, #14
 800d364:	f240 1045 	movw	r0, #325	; 0x145
 800d368:	f011 ff2c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(340, 16-2, '9');
 800d36c:	2239      	movs	r2, #57	; 0x39
 800d36e:	210e      	movs	r1, #14
 800d370:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800d374:	f011 ff26 	bl	801f1c4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", R9);
 800d378:	4622      	mov	r2, r4
 800d37a:	a801      	add	r0, sp, #4
 800d37c:	493a      	ldr	r1, [pc, #232]	; (800d468 <CRI_Axes_Measure+0x1b8>)
 800d37e:	f015 f9c7 	bl	8022710 <sprintf>
	
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800d382:	aa01      	add	r2, sp, #4
 800d384:	2303      	movs	r3, #3
 800d386:	210e      	movs	r1, #14
 800d388:	f240 106d 	movw	r0, #365	; 0x16d
 800d38c:	f011 ff90 	bl	801f2b0 <TFT_DisplayString>
		TFT_direction = 0x00;
 800d390:	2300      	movs	r3, #0
 800d392:	702b      	strb	r3, [r5, #0]
	}
}
 800d394:	b003      	add	sp, #12
 800d396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		TFT_SetTextColor(TFT_White);
 800d398:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d39c:	f011 fe22 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d3a0:	2063      	movs	r0, #99	; 0x63
 800d3a2:	f011 fe25 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800d3a6:	482e      	ldr	r0, [pc, #184]	; (800d460 <CRI_Axes_Measure+0x1b0>)
 800d3a8:	f011 fe16 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(17, 70, 'a');
 800d3ac:	2261      	movs	r2, #97	; 0x61
 800d3ae:	2146      	movs	r1, #70	; 0x46
 800d3b0:	2011      	movs	r0, #17
 800d3b2:	f011 ff07 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800d3b6:	482b      	ldr	r0, [pc, #172]	; (800d464 <CRI_Axes_Measure+0x1b4>)
 800d3b8:	f011 fe0e 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(3, 70-2, 'R');
 800d3bc:	2252      	movs	r2, #82	; 0x52
 800d3be:	2144      	movs	r1, #68	; 0x44
 800d3c0:	2003      	movs	r0, #3
 800d3c2:	f011 feff 	bl	801f1c4 <TFT_DrawChar>
		sprintf (buffer, "%d", Ra);
 800d3c6:	463a      	mov	r2, r7
 800d3c8:	a801      	add	r0, sp, #4
 800d3ca:	4927      	ldr	r1, [pc, #156]	; (800d468 <CRI_Axes_Measure+0x1b8>)
 800d3cc:	f015 f9a0 	bl	8022710 <sprintf>
		TFT_DisplayString(35, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	aa01      	add	r2, sp, #4
 800d3d4:	2144      	movs	r1, #68	; 0x44
 800d3d6:	2023      	movs	r0, #35	; 0x23
 800d3d8:	f011 ff6a 	bl	801f2b0 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800d3dc:	4820      	ldr	r0, [pc, #128]	; (800d460 <CRI_Axes_Measure+0x1b0>)
 800d3de:	f011 fdfb 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(113, 70, 'l');
 800d3e2:	226c      	movs	r2, #108	; 0x6c
 800d3e4:	2146      	movs	r1, #70	; 0x46
 800d3e6:	2071      	movs	r0, #113	; 0x71
 800d3e8:	f011 feec 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(122, 70, 'l');
 800d3ec:	226c      	movs	r2, #108	; 0x6c
 800d3ee:	2146      	movs	r1, #70	; 0x46
 800d3f0:	207a      	movs	r0, #122	; 0x7a
 800d3f2:	f011 fee7 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(102, 70, 'a');
 800d3f6:	2261      	movs	r2, #97	; 0x61
 800d3f8:	2146      	movs	r1, #70	; 0x46
 800d3fa:	2066      	movs	r0, #102	; 0x66
 800d3fc:	f011 fee2 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800d400:	4818      	ldr	r0, [pc, #96]	; (800d464 <CRI_Axes_Measure+0x1b4>)
 800d402:	f011 fde9 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(86, 70-2, 'R');
 800d406:	2252      	movs	r2, #82	; 0x52
 800d408:	2144      	movs	r1, #68	; 0x44
 800d40a:	2056      	movs	r0, #86	; 0x56
 800d40c:	f011 feda 	bl	801f1c4 <TFT_DrawChar>
		sprintf (buffer, "%d", Rall);
 800d410:	4632      	mov	r2, r6
 800d412:	a801      	add	r0, sp, #4
 800d414:	4914      	ldr	r1, [pc, #80]	; (800d468 <CRI_Axes_Measure+0x1b8>)
 800d416:	f015 f97b 	bl	8022710 <sprintf>
		TFT_DisplayString(138, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800d41a:	aa01      	add	r2, sp, #4
 800d41c:	2303      	movs	r3, #3
 800d41e:	2144      	movs	r1, #68	; 0x44
 800d420:	208a      	movs	r0, #138	; 0x8a
 800d422:	f011 ff45 	bl	801f2b0 <TFT_DisplayString>
		sprintf (buffer, "%d", R9);
 800d426:	4622      	mov	r2, r4
 800d428:	a801      	add	r0, sp, #4
 800d42a:	490f      	ldr	r1, [pc, #60]	; (800d468 <CRI_Axes_Measure+0x1b8>)
 800d42c:	f015 f970 	bl	8022710 <sprintf>
		TFT_DisplayString(R9 < 0 ? 215 : 220, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800d430:	42ac      	cmp	r4, r5
 800d432:	bfb4      	ite	lt
 800d434:	20d7      	movlt	r0, #215	; 0xd7
 800d436:	20dc      	movge	r0, #220	; 0xdc
 800d438:	2303      	movs	r3, #3
 800d43a:	aa01      	add	r2, sp, #4
 800d43c:	2144      	movs	r1, #68	; 0x44
 800d43e:	f011 ff37 	bl	801f2b0 <TFT_DisplayString>
		TFT_DrawChar(183, 70-2, 'R');
 800d442:	2252      	movs	r2, #82	; 0x52
 800d444:	2144      	movs	r1, #68	; 0x44
 800d446:	20b7      	movs	r0, #183	; 0xb7
 800d448:	f011 febc 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(198, 70-2, '9');
 800d44c:	2239      	movs	r2, #57	; 0x39
 800d44e:	2144      	movs	r1, #68	; 0x44
 800d450:	20c6      	movs	r0, #198	; 0xc6
 800d452:	f011 feb7 	bl	801f1c4 <TFT_DrawChar>
}
 800d456:	b003      	add	sp, #12
 800d458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d45a:	bf00      	nop
 800d45c:	20005218 	.word	0x20005218
 800d460:	200001c0 	.word	0x200001c0
 800d464:	200001b0 	.word	0x200001b0
 800d468:	08027384 	.word	0x08027384

0800d46c <CRI_Axes_Text>:

void CRI_Axes_Text(uint8_t direction){
 800d46c:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800d46e:	4604      	mov	r4, r0
 800d470:	2800      	cmp	r0, #0
 800d472:	f000 8137 	beq.w	800d6e4 <CRI_Axes_Text+0x278>
		TFT_DrawChar(0, 105, '1');
		TFT_DrawChar(4, 105, '0');
		TFT_DrawChar(9, 105, '0');
	} else if (direction != 0x00)
	{
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d476:	4d99      	ldr	r5, [pc, #612]	; (800d6dc <CRI_Axes_Text+0x270>)
 800d478:	2801      	cmp	r0, #1
 800d47a:	bf0c      	ite	eq
 800d47c:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800d47e:	2302      	movne	r3, #2

		TFT_SetTextColor(TFT_White);
 800d480:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d484:	bf18      	it	ne
 800d486:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d488:	f011 fdac 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d48c:	2063      	movs	r0, #99	; 0x63
 800d48e:	f011 fdaf 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800d492:	4893      	ldr	r0, [pc, #588]	; (800d6e0 <CRI_Axes_Text+0x274>)
 800d494:	f011 fda0 	bl	801efd8 <TFT_SetFont>
		
		TFT_DrawChar(87, 258, 'R');
 800d498:	2252      	movs	r2, #82	; 0x52
 800d49a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d49e:	2057      	movs	r0, #87	; 0x57
 800d4a0:	f011 fe90 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800d4a4:	2231      	movs	r2, #49	; 0x31
 800d4a6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d4aa:	205d      	movs	r0, #93	; 0x5d
 800d4ac:	f011 fe8a 	bl	801f1c4 <TFT_DrawChar>

		TFT_DrawChar(109, 258, 'R');
 800d4b0:	2252      	movs	r2, #82	; 0x52
 800d4b2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d4b6:	206d      	movs	r0, #109	; 0x6d
 800d4b8:	f011 fe84 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800d4bc:	2232      	movs	r2, #50	; 0x32
 800d4be:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d4c2:	2073      	movs	r0, #115	; 0x73
 800d4c4:	f011 fe7e 	bl	801f1c4 <TFT_DrawChar>

		TFT_DrawChar(131, 258, 'R');
 800d4c8:	2252      	movs	r2, #82	; 0x52
 800d4ca:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d4ce:	2083      	movs	r0, #131	; 0x83
 800d4d0:	f011 fe78 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800d4d4:	2233      	movs	r2, #51	; 0x33
 800d4d6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d4da:	2089      	movs	r0, #137	; 0x89
 800d4dc:	f011 fe72 	bl	801f1c4 <TFT_DrawChar>

		TFT_DrawChar(153, 258, 'R');
 800d4e0:	2252      	movs	r2, #82	; 0x52
 800d4e2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d4e6:	2099      	movs	r0, #153	; 0x99
 800d4e8:	f011 fe6c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800d4ec:	2234      	movs	r2, #52	; 0x34
 800d4ee:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d4f2:	209f      	movs	r0, #159	; 0x9f
 800d4f4:	f011 fe66 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(175, 258, 'R');
 800d4f8:	2252      	movs	r2, #82	; 0x52
 800d4fa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d4fe:	20af      	movs	r0, #175	; 0xaf
 800d500:	f011 fe60 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800d504:	2235      	movs	r2, #53	; 0x35
 800d506:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d50a:	20b5      	movs	r0, #181	; 0xb5
 800d50c:	f011 fe5a 	bl	801f1c4 <TFT_DrawChar>


		TFT_DrawChar(197, 258, 'R');
 800d510:	2252      	movs	r2, #82	; 0x52
 800d512:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d516:	20c5      	movs	r0, #197	; 0xc5
 800d518:	f011 fe54 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800d51c:	2236      	movs	r2, #54	; 0x36
 800d51e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d522:	20cb      	movs	r0, #203	; 0xcb
 800d524:	f011 fe4e 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(219, 258, 'R');
 800d528:	2252      	movs	r2, #82	; 0x52
 800d52a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d52e:	20db      	movs	r0, #219	; 0xdb
 800d530:	f011 fe48 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800d534:	2237      	movs	r2, #55	; 0x37
 800d536:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d53a:	20e1      	movs	r0, #225	; 0xe1
 800d53c:	f011 fe42 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(241, 258, 'R');
 800d540:	2252      	movs	r2, #82	; 0x52
 800d542:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d546:	20f1      	movs	r0, #241	; 0xf1
 800d548:	f011 fe3c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800d54c:	2238      	movs	r2, #56	; 0x38
 800d54e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d552:	20f7      	movs	r0, #247	; 0xf7
 800d554:	f011 fe36 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(263, 258, 'R');
 800d558:	2252      	movs	r2, #82	; 0x52
 800d55a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d55e:	f240 1007 	movw	r0, #263	; 0x107
 800d562:	f011 fe2f 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800d566:	2239      	movs	r2, #57	; 0x39
 800d568:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d56c:	f240 100d 	movw	r0, #269	; 0x10d
 800d570:	f011 fe28 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(290, 258, '1');
 800d574:	2231      	movs	r2, #49	; 0x31
 800d576:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d57a:	f44f 7091 	mov.w	r0, #290	; 0x122
 800d57e:	f011 fe21 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'R');
 800d582:	2252      	movs	r2, #82	; 0x52
 800d584:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d588:	f240 101d 	movw	r0, #285	; 0x11d
 800d58c:	f011 fe1a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800d590:	2230      	movs	r2, #48	; 0x30
 800d592:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d596:	f44f 7093 	mov.w	r0, #294	; 0x126
 800d59a:	f011 fe13 	bl	801f1c4 <TFT_DrawChar>


		TFT_DrawChar(312, 258, '1');
 800d59e:	2231      	movs	r2, #49	; 0x31
 800d5a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5a4:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d5a8:	f011 fe0c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'R');
 800d5ac:	2252      	movs	r2, #82	; 0x52
 800d5ae:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5b2:	f240 1033 	movw	r0, #307	; 0x133
 800d5b6:	f011 fe05 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800d5ba:	2231      	movs	r2, #49	; 0x31
 800d5bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5c0:	f240 103d 	movw	r0, #317	; 0x13d
 800d5c4:	f011 fdfe 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(334, 258, '1');
 800d5c8:	2231      	movs	r2, #49	; 0x31
 800d5ca:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5ce:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800d5d2:	f011 fdf7 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'R');
 800d5d6:	2252      	movs	r2, #82	; 0x52
 800d5d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5dc:	f240 1049 	movw	r0, #329	; 0x149
 800d5e0:	f011 fdf0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800d5e4:	2232      	movs	r2, #50	; 0x32
 800d5e6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5ea:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800d5ee:	f011 fde9 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(356, 258, '1');
 800d5f2:	2231      	movs	r2, #49	; 0x31
 800d5f4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5f8:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800d5fc:	f011 fde2 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'R');
 800d600:	2252      	movs	r2, #82	; 0x52
 800d602:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d606:	f240 105f 	movw	r0, #351	; 0x15f
 800d60a:	f011 fddb 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800d60e:	2233      	movs	r2, #51	; 0x33
 800d610:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d614:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800d618:	f011 fdd4 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(378, 258, '1');
 800d61c:	2231      	movs	r2, #49	; 0x31
 800d61e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d622:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800d626:	f011 fdcd 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'R');
 800d62a:	2252      	movs	r2, #82	; 0x52
 800d62c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d630:	f240 1075 	movw	r0, #373	; 0x175
 800d634:	f011 fdc6 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800d638:	2234      	movs	r2, #52	; 0x34
 800d63a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d63e:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800d642:	f011 fdbf 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(400, 258, '1');		
 800d646:	2231      	movs	r2, #49	; 0x31
 800d648:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d64c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d650:	f011 fdb8 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'R');
 800d654:	2252      	movs	r2, #82	; 0x52
 800d656:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d65a:	f240 108b 	movw	r0, #395	; 0x18b
 800d65e:	f011 fdb1 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800d662:	2235      	movs	r2, #53	; 0x35
 800d664:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d668:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d66c:	f011 fdaa 	bl	801f1c4 <TFT_DrawChar>

		TFT_DrawChar(65, 250, '0');
 800d670:	2230      	movs	r2, #48	; 0x30
 800d672:	21fa      	movs	r1, #250	; 0xfa
 800d674:	2041      	movs	r0, #65	; 0x41
 800d676:	f011 fda5 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(58, 202, '2');
 800d67a:	2232      	movs	r2, #50	; 0x32
 800d67c:	21ca      	movs	r1, #202	; 0xca
 800d67e:	203a      	movs	r0, #58	; 0x3a
 800d680:	f011 fda0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800d684:	2235      	movs	r2, #53	; 0x35
 800d686:	21ca      	movs	r1, #202	; 0xca
 800d688:	2041      	movs	r0, #65	; 0x41
 800d68a:	f011 fd9b 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(58, 149, '5');
 800d68e:	2235      	movs	r2, #53	; 0x35
 800d690:	2195      	movs	r1, #149	; 0x95
 800d692:	203a      	movs	r0, #58	; 0x3a
 800d694:	f011 fd96 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800d698:	2230      	movs	r2, #48	; 0x30
 800d69a:	2195      	movs	r1, #149	; 0x95
 800d69c:	2041      	movs	r0, #65	; 0x41
 800d69e:	f011 fd91 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(58, 96, '7');
 800d6a2:	2237      	movs	r2, #55	; 0x37
 800d6a4:	2160      	movs	r1, #96	; 0x60
 800d6a6:	203a      	movs	r0, #58	; 0x3a
 800d6a8:	f011 fd8c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800d6ac:	2235      	movs	r2, #53	; 0x35
 800d6ae:	2160      	movs	r1, #96	; 0x60
 800d6b0:	2041      	movs	r0, #65	; 0x41
 800d6b2:	f011 fd87 	bl	801f1c4 <TFT_DrawChar>
			
		TFT_DrawChar(57, 43, '1');
 800d6b6:	2231      	movs	r2, #49	; 0x31
 800d6b8:	212b      	movs	r1, #43	; 0x2b
 800d6ba:	2039      	movs	r0, #57	; 0x39
 800d6bc:	f011 fd82 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800d6c0:	2230      	movs	r2, #48	; 0x30
 800d6c2:	212b      	movs	r1, #43	; 0x2b
 800d6c4:	203e      	movs	r0, #62	; 0x3e
 800d6c6:	f011 fd7d 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800d6ca:	2230      	movs	r2, #48	; 0x30
 800d6cc:	212b      	movs	r1, #43	; 0x2b
 800d6ce:	2043      	movs	r0, #67	; 0x43
 800d6d0:	f011 fd78 	bl	801f1c4 <TFT_DrawChar>

		TFT_direction = 0x00;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	702b      	strb	r3, [r5, #0]
 800d6d8:	bd38      	pop	{r3, r4, r5, pc}
 800d6da:	bf00      	nop
 800d6dc:	20005218 	.word	0x20005218
 800d6e0:	20000210 	.word	0x20000210
		TFT_SetFont(&Font6EN_arch_big);
 800d6e4:	488d      	ldr	r0, [pc, #564]	; (800d91c <CRI_Axes_Text+0x4b0>)
 800d6e6:	f011 fc77 	bl	801efd8 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800d6ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d6ee:	f011 fc79 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d6f2:	2063      	movs	r0, #99	; 0x63
 800d6f4:	f011 fc7c 	bl	801eff0 <TFT_SetBackColor>
		TFT_DrawChar(24, 415, 'R');
 800d6f8:	2252      	movs	r2, #82	; 0x52
 800d6fa:	f240 119f 	movw	r1, #415	; 0x19f
 800d6fe:	2018      	movs	r0, #24
 800d700:	f011 fd60 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800d704:	2231      	movs	r2, #49	; 0x31
 800d706:	f240 119f 	movw	r1, #415	; 0x19f
 800d70a:	201e      	movs	r0, #30
 800d70c:	f011 fd5a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(40, 415, 'R');
 800d710:	2252      	movs	r2, #82	; 0x52
 800d712:	f240 119f 	movw	r1, #415	; 0x19f
 800d716:	2028      	movs	r0, #40	; 0x28
 800d718:	f011 fd54 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800d71c:	2232      	movs	r2, #50	; 0x32
 800d71e:	f240 119f 	movw	r1, #415	; 0x19f
 800d722:	202e      	movs	r0, #46	; 0x2e
 800d724:	f011 fd4e 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(56, 415, 'R');
 800d728:	2252      	movs	r2, #82	; 0x52
 800d72a:	f240 119f 	movw	r1, #415	; 0x19f
 800d72e:	2038      	movs	r0, #56	; 0x38
 800d730:	f011 fd48 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800d734:	2233      	movs	r2, #51	; 0x33
 800d736:	f240 119f 	movw	r1, #415	; 0x19f
 800d73a:	203e      	movs	r0, #62	; 0x3e
 800d73c:	f011 fd42 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(72, 415, 'R');
 800d740:	2252      	movs	r2, #82	; 0x52
 800d742:	f240 119f 	movw	r1, #415	; 0x19f
 800d746:	2048      	movs	r0, #72	; 0x48
 800d748:	f011 fd3c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800d74c:	2234      	movs	r2, #52	; 0x34
 800d74e:	f240 119f 	movw	r1, #415	; 0x19f
 800d752:	204e      	movs	r0, #78	; 0x4e
 800d754:	f011 fd36 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(88, 415, 'R');
 800d758:	2252      	movs	r2, #82	; 0x52
 800d75a:	f240 119f 	movw	r1, #415	; 0x19f
 800d75e:	2058      	movs	r0, #88	; 0x58
 800d760:	f011 fd30 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800d764:	2235      	movs	r2, #53	; 0x35
 800d766:	f240 119f 	movw	r1, #415	; 0x19f
 800d76a:	205e      	movs	r0, #94	; 0x5e
 800d76c:	f011 fd2a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(104, 415, 'R');
 800d770:	2252      	movs	r2, #82	; 0x52
 800d772:	f240 119f 	movw	r1, #415	; 0x19f
 800d776:	2068      	movs	r0, #104	; 0x68
 800d778:	f011 fd24 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800d77c:	2236      	movs	r2, #54	; 0x36
 800d77e:	f240 119f 	movw	r1, #415	; 0x19f
 800d782:	206e      	movs	r0, #110	; 0x6e
 800d784:	f011 fd1e 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(120, 415, 'R');
 800d788:	2252      	movs	r2, #82	; 0x52
 800d78a:	f240 119f 	movw	r1, #415	; 0x19f
 800d78e:	2078      	movs	r0, #120	; 0x78
 800d790:	f011 fd18 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800d794:	2237      	movs	r2, #55	; 0x37
 800d796:	f240 119f 	movw	r1, #415	; 0x19f
 800d79a:	207e      	movs	r0, #126	; 0x7e
 800d79c:	f011 fd12 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(136, 415, 'R');
 800d7a0:	2252      	movs	r2, #82	; 0x52
 800d7a2:	f240 119f 	movw	r1, #415	; 0x19f
 800d7a6:	2088      	movs	r0, #136	; 0x88
 800d7a8:	f011 fd0c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800d7ac:	2238      	movs	r2, #56	; 0x38
 800d7ae:	f240 119f 	movw	r1, #415	; 0x19f
 800d7b2:	208e      	movs	r0, #142	; 0x8e
 800d7b4:	f011 fd06 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(152, 415, 'R');
 800d7b8:	2252      	movs	r2, #82	; 0x52
 800d7ba:	f240 119f 	movw	r1, #415	; 0x19f
 800d7be:	2098      	movs	r0, #152	; 0x98
 800d7c0:	f011 fd00 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800d7c4:	2239      	movs	r2, #57	; 0x39
 800d7c6:	f240 119f 	movw	r1, #415	; 0x19f
 800d7ca:	209e      	movs	r0, #158	; 0x9e
 800d7cc:	f011 fcfa 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(173, 415, '1');
 800d7d0:	2231      	movs	r2, #49	; 0x31
 800d7d2:	f240 119f 	movw	r1, #415	; 0x19f
 800d7d6:	20ad      	movs	r0, #173	; 0xad
 800d7d8:	f011 fcf4 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'R');
 800d7dc:	2252      	movs	r2, #82	; 0x52
 800d7de:	f240 119f 	movw	r1, #415	; 0x19f
 800d7e2:	20a8      	movs	r0, #168	; 0xa8
 800d7e4:	f011 fcee 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800d7e8:	2230      	movs	r2, #48	; 0x30
 800d7ea:	f240 119f 	movw	r1, #415	; 0x19f
 800d7ee:	20b1      	movs	r0, #177	; 0xb1
 800d7f0:	f011 fce8 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(189, 415, '1');
 800d7f4:	2231      	movs	r2, #49	; 0x31
 800d7f6:	f240 119f 	movw	r1, #415	; 0x19f
 800d7fa:	20bd      	movs	r0, #189	; 0xbd
 800d7fc:	f011 fce2 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'R');
 800d800:	2252      	movs	r2, #82	; 0x52
 800d802:	f240 119f 	movw	r1, #415	; 0x19f
 800d806:	20b8      	movs	r0, #184	; 0xb8
 800d808:	f011 fcdc 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800d80c:	2231      	movs	r2, #49	; 0x31
 800d80e:	f240 119f 	movw	r1, #415	; 0x19f
 800d812:	20c2      	movs	r0, #194	; 0xc2
 800d814:	f011 fcd6 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(205, 415, '1');
 800d818:	2231      	movs	r2, #49	; 0x31
 800d81a:	f240 119f 	movw	r1, #415	; 0x19f
 800d81e:	20cd      	movs	r0, #205	; 0xcd
 800d820:	f011 fcd0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'R');
 800d824:	2252      	movs	r2, #82	; 0x52
 800d826:	f240 119f 	movw	r1, #415	; 0x19f
 800d82a:	20c8      	movs	r0, #200	; 0xc8
 800d82c:	f011 fcca 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800d830:	2232      	movs	r2, #50	; 0x32
 800d832:	f240 119f 	movw	r1, #415	; 0x19f
 800d836:	20d1      	movs	r0, #209	; 0xd1
 800d838:	f011 fcc4 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(221, 415, '1');
 800d83c:	2231      	movs	r2, #49	; 0x31
 800d83e:	f240 119f 	movw	r1, #415	; 0x19f
 800d842:	20dd      	movs	r0, #221	; 0xdd
 800d844:	f011 fcbe 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'R');
 800d848:	2252      	movs	r2, #82	; 0x52
 800d84a:	f240 119f 	movw	r1, #415	; 0x19f
 800d84e:	20d8      	movs	r0, #216	; 0xd8
 800d850:	f011 fcb8 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800d854:	2233      	movs	r2, #51	; 0x33
 800d856:	f240 119f 	movw	r1, #415	; 0x19f
 800d85a:	20e1      	movs	r0, #225	; 0xe1
 800d85c:	f011 fcb2 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(237, 415, '1');
 800d860:	2231      	movs	r2, #49	; 0x31
 800d862:	f240 119f 	movw	r1, #415	; 0x19f
 800d866:	20ed      	movs	r0, #237	; 0xed
 800d868:	f011 fcac 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'R');
 800d86c:	2252      	movs	r2, #82	; 0x52
 800d86e:	f240 119f 	movw	r1, #415	; 0x19f
 800d872:	20e8      	movs	r0, #232	; 0xe8
 800d874:	f011 fca6 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800d878:	2234      	movs	r2, #52	; 0x34
 800d87a:	f240 119f 	movw	r1, #415	; 0x19f
 800d87e:	20f1      	movs	r0, #241	; 0xf1
 800d880:	f011 fca0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(253, 415, '1');		
 800d884:	2231      	movs	r2, #49	; 0x31
 800d886:	f240 119f 	movw	r1, #415	; 0x19f
 800d88a:	20fd      	movs	r0, #253	; 0xfd
 800d88c:	f011 fc9a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'R');
 800d890:	2252      	movs	r2, #82	; 0x52
 800d892:	f240 119f 	movw	r1, #415	; 0x19f
 800d896:	20f8      	movs	r0, #248	; 0xf8
 800d898:	f011 fc94 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800d89c:	2235      	movs	r2, #53	; 0x35
 800d89e:	f240 119f 	movw	r1, #415	; 0x19f
 800d8a2:	f240 1001 	movw	r0, #257	; 0x101
 800d8a6:	f011 fc8d 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(5, 410, '0');
 800d8aa:	2230      	movs	r2, #48	; 0x30
 800d8ac:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d8b0:	2005      	movs	r0, #5
 800d8b2:	f011 fc87 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(1, 334, '2');
 800d8b6:	2232      	movs	r2, #50	; 0x32
 800d8b8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d8bc:	2001      	movs	r0, #1
 800d8be:	f011 fc81 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800d8c2:	2235      	movs	r2, #53	; 0x35
 800d8c4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d8c8:	2007      	movs	r0, #7
 800d8ca:	f011 fc7b 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(1, 257, '5');
 800d8ce:	2235      	movs	r2, #53	; 0x35
 800d8d0:	f240 1101 	movw	r1, #257	; 0x101
 800d8d4:	2001      	movs	r0, #1
 800d8d6:	f011 fc75 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800d8da:	2230      	movs	r2, #48	; 0x30
 800d8dc:	f240 1101 	movw	r1, #257	; 0x101
 800d8e0:	2007      	movs	r0, #7
 800d8e2:	f011 fc6f 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(1, 181, '7');
 800d8e6:	2237      	movs	r2, #55	; 0x37
 800d8e8:	21b5      	movs	r1, #181	; 0xb5
 800d8ea:	2001      	movs	r0, #1
 800d8ec:	f011 fc6a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800d8f0:	2235      	movs	r2, #53	; 0x35
 800d8f2:	21b5      	movs	r1, #181	; 0xb5
 800d8f4:	2007      	movs	r0, #7
 800d8f6:	f011 fc65 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(0, 105, '1');
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	2231      	movs	r2, #49	; 0x31
 800d8fe:	2169      	movs	r1, #105	; 0x69
 800d900:	f011 fc60 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800d904:	2230      	movs	r2, #48	; 0x30
 800d906:	2169      	movs	r1, #105	; 0x69
 800d908:	2004      	movs	r0, #4
 800d90a:	f011 fc5b 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800d90e:	2230      	movs	r2, #48	; 0x30
 800d910:	2169      	movs	r1, #105	; 0x69
 800d912:	2009      	movs	r0, #9
	}
}
 800d914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800d918:	f011 bc54 	b.w	801f1c4 <TFT_DrawChar>
 800d91c:	20000210 	.word	0x20000210

0800d920 <CRI_chart>:

void CRI_chart(uint8_t direction, int8_t *GraphData)
{
 800d920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d922:	ed2d 8b04 	vpush	{d8-d9}
 800d926:	b087      	sub	sp, #28
	char buffer[2] = {0};
 800d928:	2300      	movs	r3, #0
{
 800d92a:	460d      	mov	r5, r1
	char buffer[2] = {0};
 800d92c:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t X = 0;
	
	if(direction == 0x00){
 800d930:	2800      	cmp	r0, #0
 800d932:	f040 8283 	bne.w	800de3c <CRI_chart+0x51c>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d936:	f991 3000 	ldrsb.w	r3, [r1]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f2c0 8528 	blt.w	800e390 <CRI_chart+0xa70>
 800d940:	2b64      	cmp	r3, #100	; 0x64
 800d942:	f340 84f4 	ble.w	800e32e <CRI_chart+0xa0e>
 800d946:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d94a:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	2222      	movs	r2, #34	; 0x22
 800d952:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d956:	2018      	movs	r0, #24
 800d958:	f011 f89a 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d95c:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800d960:	2b00      	cmp	r3, #0
 800d962:	f2c0 85b7 	blt.w	800e4d4 <CRI_chart+0xbb4>
 800d966:	2b64      	cmp	r3, #100	; 0x64
 800d968:	f300 853b 	bgt.w	800e3e2 <CRI_chart+0xac2>
 800d96c:	ee07 3a90 	vmov	s15, r3
 800d970:	eddf 5af5 	vldr	s11, [pc, #980]	; 800dd48 <CRI_chart+0x428>
 800d974:	ed9f 7af3 	vldr	s14, [pc, #972]	; 800dd44 <CRI_chart+0x424>
 800d978:	eddf 6af4 	vldr	s13, [pc, #976]	; 800dd4c <CRI_chart+0x42c>
 800d97c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d980:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800d984:	eef0 7a47 	vmov.f32	s15, s14
 800d988:	eee6 7a66 	vfms.f32	s15, s12, s13
 800d98c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d990:	edcd 7a03 	vstr	s15, [sp, #12]
 800d994:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d998:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	2232      	movs	r2, #50	; 0x32
 800d9a0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d9a4:	2028      	movs	r0, #40	; 0x28
 800d9a6:	f011 f873 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d9aa:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f2c0 856d 	blt.w	800e48e <CRI_chart+0xb6e>
 800d9b4:	2b64      	cmp	r3, #100	; 0x64
 800d9b6:	f300 8529 	bgt.w	800e40c <CRI_chart+0xaec>
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eddf 5ae2 	vldr	s11, [pc, #904]	; 800dd48 <CRI_chart+0x428>
 800d9c2:	ed9f 7ae0 	vldr	s14, [pc, #896]	; 800dd44 <CRI_chart+0x424>
 800d9c6:	eddf 6ae1 	vldr	s13, [pc, #900]	; 800dd4c <CRI_chart+0x42c>
 800d9ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9ce:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800d9d2:	eef0 7a47 	vmov.f32	s15, s14
 800d9d6:	eee6 7a66 	vfms.f32	s15, s12, s13
 800d9da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9de:	edcd 7a03 	vstr	s15, [sp, #12]
 800d9e2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d9e6:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	2242      	movs	r2, #66	; 0x42
 800d9ee:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d9f2:	2038      	movs	r0, #56	; 0x38
 800d9f4:	f011 f84c 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d9f8:	f995 3003 	ldrsb.w	r3, [r5, #3]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f2c0 8542 	blt.w	800e486 <CRI_chart+0xb66>
 800da02:	2b64      	cmp	r3, #100	; 0x64
 800da04:	f300 84fe 	bgt.w	800e404 <CRI_chart+0xae4>
 800da08:	ee07 3a90 	vmov	s15, r3
 800da0c:	eddf 5ace 	vldr	s11, [pc, #824]	; 800dd48 <CRI_chart+0x428>
 800da10:	ed9f 7acc 	vldr	s14, [pc, #816]	; 800dd44 <CRI_chart+0x424>
 800da14:	eddf 6acd 	vldr	s13, [pc, #820]	; 800dd4c <CRI_chart+0x42c>
 800da18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da1c:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800da20:	eef0 7a47 	vmov.f32	s15, s14
 800da24:	eee6 7a66 	vfms.f32	s15, s12, s13
 800da28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da2c:	edcd 7a03 	vstr	s15, [sp, #12]
 800da30:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da34:	f241 430f 	movw	r3, #5135	; 0x140f
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	2252      	movs	r2, #82	; 0x52
 800da3c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800da40:	2048      	movs	r0, #72	; 0x48
 800da42:	f011 f825 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800da46:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f2c0 8527 	blt.w	800e49e <CRI_chart+0xb7e>
 800da50:	2b64      	cmp	r3, #100	; 0x64
 800da52:	f300 84d3 	bgt.w	800e3fc <CRI_chart+0xadc>
 800da56:	ee07 3a90 	vmov	s15, r3
 800da5a:	eddf 5abb 	vldr	s11, [pc, #748]	; 800dd48 <CRI_chart+0x428>
 800da5e:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800dd44 <CRI_chart+0x424>
 800da62:	eddf 6aba 	vldr	s13, [pc, #744]	; 800dd4c <CRI_chart+0x42c>
 800da66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da6a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800da6e:	eef0 7a47 	vmov.f32	s15, s14
 800da72:	eee6 7a66 	vfms.f32	s15, s12, s13
 800da76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da7a:	edcd 7a03 	vstr	s15, [sp, #12]
 800da7e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da82:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	2262      	movs	r2, #98	; 0x62
 800da8a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800da8e:	2058      	movs	r0, #88	; 0x58
 800da90:	f010 fffe 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800da94:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f2c0 84fc 	blt.w	800e496 <CRI_chart+0xb76>
 800da9e:	2b64      	cmp	r3, #100	; 0x64
 800daa0:	f300 84a8 	bgt.w	800e3f4 <CRI_chart+0xad4>
 800daa4:	ee07 3a90 	vmov	s15, r3
 800daa8:	eddf 5aa7 	vldr	s11, [pc, #668]	; 800dd48 <CRI_chart+0x428>
 800daac:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800dd44 <CRI_chart+0x424>
 800dab0:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800dd4c <CRI_chart+0x42c>
 800dab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dab8:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dabc:	eef0 7a47 	vmov.f32	s15, s14
 800dac0:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dac8:	edcd 7a03 	vstr	s15, [sp, #12]
 800dacc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dad0:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	2272      	movs	r2, #114	; 0x72
 800dad8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dadc:	2068      	movs	r0, #104	; 0x68
 800dade:	f010 ffd7 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800dae2:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f2c0 84b4 	blt.w	800e454 <CRI_chart+0xb34>
 800daec:	2b64      	cmp	r3, #100	; 0x64
 800daee:	f300 84a9 	bgt.w	800e444 <CRI_chart+0xb24>
 800daf2:	ee07 3a90 	vmov	s15, r3
 800daf6:	eddf 5a94 	vldr	s11, [pc, #592]	; 800dd48 <CRI_chart+0x428>
 800dafa:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800dd44 <CRI_chart+0x424>
 800dafe:	eddf 6a93 	vldr	s13, [pc, #588]	; 800dd4c <CRI_chart+0x42c>
 800db02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db06:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800db0a:	eef0 7a47 	vmov.f32	s15, s14
 800db0e:	eee6 7a66 	vfms.f32	s15, s12, s13
 800db12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db16:	edcd 7a03 	vstr	s15, [sp, #12]
 800db1a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db1e:	f248 4357 	movw	r3, #33879	; 0x8457
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	2282      	movs	r2, #130	; 0x82
 800db26:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800db2a:	2078      	movs	r0, #120	; 0x78
 800db2c:	f010 ffb0 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800db30:	f995 3007 	ldrsb.w	r3, [r5, #7]
 800db34:	2b00      	cmp	r3, #0
 800db36:	f2c0 8489 	blt.w	800e44c <CRI_chart+0xb2c>
 800db3a:	2b64      	cmp	r3, #100	; 0x64
 800db3c:	f300 847e 	bgt.w	800e43c <CRI_chart+0xb1c>
 800db40:	ee07 3a90 	vmov	s15, r3
 800db44:	eddf 5a80 	vldr	s11, [pc, #512]	; 800dd48 <CRI_chart+0x428>
 800db48:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800dd44 <CRI_chart+0x424>
 800db4c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800dd4c <CRI_chart+0x42c>
 800db50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db54:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800db58:	eef0 7a47 	vmov.f32	s15, s14
 800db5c:	eee6 7a66 	vfms.f32	s15, s12, s13
 800db60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db64:	edcd 7a03 	vstr	s15, [sp, #12]
 800db68:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db6c:	f24a 4377 	movw	r3, #42103	; 0xa477
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	2292      	movs	r2, #146	; 0x92
 800db74:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800db78:	2088      	movs	r0, #136	; 0x88
 800db7a:	f010 ff89 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800db7e:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	f2c0 846e 	blt.w	800e464 <CRI_chart+0xb44>
 800db88:	2b64      	cmp	r3, #100	; 0x64
 800db8a:	f300 8453 	bgt.w	800e434 <CRI_chart+0xb14>
 800db8e:	ee07 3a90 	vmov	s15, r3
 800db92:	eddf 5a6d 	vldr	s11, [pc, #436]	; 800dd48 <CRI_chart+0x428>
 800db96:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800dd44 <CRI_chart+0x424>
 800db9a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800dd4c <CRI_chart+0x42c>
 800db9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dba2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dba6:	eef0 7a47 	vmov.f32	s15, s14
 800dbaa:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dbae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbb2:	edcd 7a03 	vstr	s15, [sp, #12]
 800dbb6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dbba:	f24e 1365 	movw	r3, #57701	; 0xe165
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	22a2      	movs	r2, #162	; 0xa2
 800dbc2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dbc6:	2098      	movs	r0, #152	; 0x98
 800dbc8:	f010 ff62 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800dbcc:	f995 3009 	ldrsb.w	r3, [r5, #9]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f2c0 8443 	blt.w	800e45c <CRI_chart+0xb3c>
 800dbd6:	2b64      	cmp	r3, #100	; 0x64
 800dbd8:	f300 8428 	bgt.w	800e42c <CRI_chart+0xb0c>
 800dbdc:	ee07 3a90 	vmov	s15, r3
 800dbe0:	eddf 5a59 	vldr	s11, [pc, #356]	; 800dd48 <CRI_chart+0x428>
 800dbe4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800dd44 <CRI_chart+0x424>
 800dbe8:	eddf 6a58 	vldr	s13, [pc, #352]	; 800dd4c <CRI_chart+0x42c>
 800dbec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbf0:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dbf4:	eef0 7a47 	vmov.f32	s15, s14
 800dbf8:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dbfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc00:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc04:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc08:	f24e 7323 	movw	r3, #59171	; 0xe723
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	22b2      	movs	r2, #178	; 0xb2
 800dc10:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dc14:	20a8      	movs	r0, #168	; 0xa8
 800dc16:	f010 ff3b 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800dc1a:	f995 300a 	ldrsb.w	r3, [r5, #10]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	f2c0 8427 	blt.w	800e472 <CRI_chart+0xb52>
 800dc24:	2b64      	cmp	r3, #100	; 0x64
 800dc26:	f300 83fe 	bgt.w	800e426 <CRI_chart+0xb06>
 800dc2a:	ee07 3a90 	vmov	s15, r3
 800dc2e:	eddf 5a46 	vldr	s11, [pc, #280]	; 800dd48 <CRI_chart+0x428>
 800dc32:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800dd44 <CRI_chart+0x424>
 800dc36:	eddf 6a45 	vldr	s13, [pc, #276]	; 800dd4c <CRI_chart+0x42c>
 800dc3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc3e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dc42:	eef0 7a47 	vmov.f32	s15, s14
 800dc46:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dc4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc4e:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc52:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc56:	f241 4327 	movw	r3, #5159	; 0x1427
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	22c2      	movs	r2, #194	; 0xc2
 800dc5e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dc62:	20b8      	movs	r0, #184	; 0xb8
 800dc64:	f010 ff14 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800dc68:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f2c0 83fd 	blt.w	800e46c <CRI_chart+0xb4c>
 800dc72:	2b64      	cmp	r3, #100	; 0x64
 800dc74:	f300 83d4 	bgt.w	800e420 <CRI_chart+0xb00>
 800dc78:	ee07 3a90 	vmov	s15, r3
 800dc7c:	eddf 5a32 	vldr	s11, [pc, #200]	; 800dd48 <CRI_chart+0x428>
 800dc80:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dd44 <CRI_chart+0x424>
 800dc84:	eddf 6a31 	vldr	s13, [pc, #196]	; 800dd4c <CRI_chart+0x42c>
 800dc88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc8c:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dc90:	eef0 7a47 	vmov.f32	s15, s14
 800dc94:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dc98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc9c:	edcd 7a03 	vstr	s15, [sp, #12]
 800dca0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dca4:	f242 138d 	movw	r3, #8589	; 0x218d
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	22d2      	movs	r2, #210	; 0xd2
 800dcac:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dcb0:	20c8      	movs	r0, #200	; 0xc8
 800dcb2:	f010 feed 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800dcb6:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f2c0 83e0 	blt.w	800e480 <CRI_chart+0xb60>
 800dcc0:	2b64      	cmp	r3, #100	; 0x64
 800dcc2:	f300 83aa 	bgt.w	800e41a <CRI_chart+0xafa>
 800dcc6:	ee07 3a90 	vmov	s15, r3
 800dcca:	eddf 5a1f 	vldr	s11, [pc, #124]	; 800dd48 <CRI_chart+0x428>
 800dcce:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800dd44 <CRI_chart+0x424>
 800dcd2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800dd4c <CRI_chart+0x42c>
 800dcd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcda:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dcde:	eef0 7a47 	vmov.f32	s15, s14
 800dce2:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcea:	edcd 7a03 	vstr	s15, [sp, #12]
 800dcee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dcf2:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	22e2      	movs	r2, #226	; 0xe2
 800dcfa:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dcfe:	20d8      	movs	r0, #216	; 0xd8
 800dd00:	f010 fec6 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800dd04:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f2c0 83b6 	blt.w	800e47a <CRI_chart+0xb5a>
 800dd0e:	2b64      	cmp	r3, #100	; 0x64
 800dd10:	f300 8380 	bgt.w	800e414 <CRI_chart+0xaf4>
 800dd14:	ee07 3a90 	vmov	s15, r3
 800dd18:	eddf 5a0b 	vldr	s11, [pc, #44]	; 800dd48 <CRI_chart+0x428>
 800dd1c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800dd44 <CRI_chart+0x424>
 800dd20:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800dd4c <CRI_chart+0x42c>
 800dd24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd28:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dd2c:	eef0 7a47 	vmov.f32	s15, s14
 800dd30:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dd34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd38:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd40:	e008      	b.n	800dd54 <CRI_chart+0x434>
 800dd42:	bf00      	nop
 800dd44:	43cd0000 	.word	0x43cd0000
 800dd48:	42c80000 	.word	0x42c80000
 800dd4c:	43988000 	.word	0x43988000
 800dd50:	43c80000 	.word	0x43c80000
 800dd54:	f641 3346 	movw	r3, #6982	; 0x1b46
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	22f2      	movs	r2, #242	; 0xf2
 800dd5c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dd60:	20e8      	movs	r0, #232	; 0xe8
 800dd62:	f010 fe95 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800dd66:	f995 300e 	ldrsb.w	r3, [r5, #14]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f2c0 83ad 	blt.w	800e4ca <CRI_chart+0xbaa>
 800dd70:	2b64      	cmp	r3, #100	; 0x64
 800dd72:	f300 833c 	bgt.w	800e3ee <CRI_chart+0xace>
 800dd76:	ee07 3a90 	vmov	s15, r3
 800dd7a:	ed5f 5a0d 	vldr	s11, [pc, #-52]	; 800dd48 <CRI_chart+0x428>
 800dd7e:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800dd44 <CRI_chart+0x424>
 800dd82:	ed5f 6a0e 	vldr	s13, [pc, #-56]	; 800dd4c <CRI_chart+0x42c>
 800dd86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd8a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dd8e:	eef0 7a47 	vmov.f32	s15, s14
 800dd92:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dd96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd9a:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd9e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800dda2:	ed1f 9a17 	vldr	s18, [pc, #-92]	; 800dd48 <CRI_chart+0x428>
 800dda6:	ed5f 8a17 	vldr	s17, [pc, #-92]	; 800dd4c <CRI_chart+0x42c>
 800ddaa:	ed1f 8a17 	vldr	s16, [pc, #-92]	; 800dd50 <CRI_chart+0x430>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800ddae:	f24f 6311 	movw	r3, #62993	; 0xf611
 800ddb2:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	20f8      	movs	r0, #248	; 0xf8
 800ddba:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800ddbe:	f010 fe67 	bl	801ea90 <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800ddc2:	481c      	ldr	r0, [pc, #112]	; (800de34 <CRI_chart+0x514>)
 800ddc4:	f011 f908 	bl	801efd8 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800ddc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ddcc:	f011 f90a 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800ddd0:	2063      	movs	r0, #99	; 0x63
 800ddd2:	f011 f90d 	bl	801eff0 <TFT_SetBackColor>
 800ddd6:	3d01      	subs	r5, #1
 800ddd8:	2418      	movs	r4, #24
 800ddda:	ae05      	add	r6, sp, #20
 800dddc:	e01a      	b.n	800de14 <CRI_chart+0x4f4>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800ddde:	ee07 3a90 	vmov	s15, r3
 800dde2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dde6:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800ddea:	eef0 7a48 	vmov.f32	s15, s16
 800ddee:	eee7 7a68 	vfms.f32	s15, s14, s17
 800ddf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddf6:	edcd 7a03 	vstr	s15, [sp, #12]
 800ddfa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ddfe:	4620      	mov	r0, r4
 800de00:	3410      	adds	r4, #16
 800de02:	2303      	movs	r3, #3
 800de04:	4632      	mov	r2, r6
 800de06:	b2a4      	uxth	r4, r4
 800de08:	f011 fa52 	bl	801f2b0 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800de0c:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800de10:	f000 82c9 	beq.w	800e3a6 <CRI_chart+0xa86>
			sprintf (buffer, "%d", GraphData[i]);
 800de14:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800de18:	4907      	ldr	r1, [pc, #28]	; (800de38 <CRI_chart+0x518>)
 800de1a:	4630      	mov	r0, r6
 800de1c:	f014 fc78 	bl	8022710 <sprintf>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800de20:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800de24:	2b00      	cmp	r3, #0
 800de26:	f2c0 82b9 	blt.w	800e39c <CRI_chart+0xa7c>
 800de2a:	2b64      	cmp	r3, #100	; 0x64
 800de2c:	ddd7      	ble.n	800ddde <CRI_chart+0x4be>
 800de2e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800de32:	e7e4      	b.n	800ddfe <CRI_chart+0x4de>
 800de34:	20000210 	.word	0x20000210
 800de38:	08027384 	.word	0x08027384
			X += 16;
		}
	} else if (direction != 0x00)
	{
		
		if(direction == 0x01){TFT_direction = 0x01;} 
 800de3c:	2801      	cmp	r0, #1
 800de3e:	4fef      	ldr	r7, [pc, #956]	; (800e1fc <CRI_chart+0x8dc>)
		else {TFT_direction = 0x02;}
 800de40:	bf16      	itet	ne
 800de42:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800de44:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800de46:	703b      	strbne	r3, [r7, #0]

		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800de48:	f991 3000 	ldrsb.w	r3, [r1]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f2c0 829d 	blt.w	800e38c <CRI_chart+0xa6c>
 800de52:	2b64      	cmp	r3, #100	; 0x64
 800de54:	f340 8283 	ble.w	800e35e <CRI_chart+0xa3e>
 800de58:	219a      	movs	r1, #154	; 0x9a
 800de5a:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	2262      	movs	r2, #98	; 0x62
 800de62:	23fc      	movs	r3, #252	; 0xfc
 800de64:	2057      	movs	r0, #87	; 0x57
 800de66:	f010 fe13 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800de6a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f2c0 832e 	blt.w	800e4d0 <CRI_chart+0xbb0>
 800de74:	2b64      	cmp	r3, #100	; 0x64
 800de76:	f300 82b2 	bgt.w	800e3de <CRI_chart+0xabe>
 800de7a:	ee07 3a90 	vmov	s15, r3
 800de7e:	eddf 5ae2 	vldr	s11, [pc, #904]	; 800e208 <CRI_chart+0x8e8>
 800de82:	ed9f 7adf 	vldr	s14, [pc, #892]	; 800e200 <CRI_chart+0x8e0>
 800de86:	eddf 6adf 	vldr	s13, [pc, #892]	; 800e204 <CRI_chart+0x8e4>
 800de8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de8e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800de92:	eef0 7a47 	vmov.f32	s15, s14
 800de96:	eee6 7a66 	vfms.f32	s15, s12, s13
 800de9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de9e:	edcd 7a03 	vstr	s15, [sp, #12]
 800dea2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dea6:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	2278      	movs	r2, #120	; 0x78
 800deae:	23fc      	movs	r3, #252	; 0xfc
 800deb0:	206d      	movs	r0, #109	; 0x6d
 800deb2:	f010 fded 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800deb6:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800deba:	2b00      	cmp	r3, #0
 800debc:	f2c0 82f5 	blt.w	800e4aa <CRI_chart+0xb8a>
 800dec0:	2b64      	cmp	r3, #100	; 0x64
 800dec2:	f300 8282 	bgt.w	800e3ca <CRI_chart+0xaaa>
 800dec6:	ee07 3a90 	vmov	s15, r3
 800deca:	eddf 5acf 	vldr	s11, [pc, #828]	; 800e208 <CRI_chart+0x8e8>
 800dece:	ed9f 7acc 	vldr	s14, [pc, #816]	; 800e200 <CRI_chart+0x8e0>
 800ded2:	eddf 6acc 	vldr	s13, [pc, #816]	; 800e204 <CRI_chart+0x8e4>
 800ded6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800deda:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dede:	eef0 7a47 	vmov.f32	s15, s14
 800dee2:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800deea:	edcd 7a03 	vstr	s15, [sp, #12]
 800deee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800def2:	f64a 5388 	movw	r3, #44424	; 0xad88
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	228e      	movs	r2, #142	; 0x8e
 800defa:	23fc      	movs	r3, #252	; 0xfc
 800defc:	2083      	movs	r0, #131	; 0x83
 800defe:	f010 fdc7 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800df02:	f995 3003 	ldrsb.w	r3, [r5, #3]
 800df06:	2b00      	cmp	r3, #0
 800df08:	f2c0 82cd 	blt.w	800e4a6 <CRI_chart+0xb86>
 800df0c:	2b64      	cmp	r3, #100	; 0x64
 800df0e:	f300 825a 	bgt.w	800e3c6 <CRI_chart+0xaa6>
 800df12:	ee07 3a90 	vmov	s15, r3
 800df16:	eddf 5abc 	vldr	s11, [pc, #752]	; 800e208 <CRI_chart+0x8e8>
 800df1a:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800e200 <CRI_chart+0x8e0>
 800df1e:	eddf 6ab9 	vldr	s13, [pc, #740]	; 800e204 <CRI_chart+0x8e4>
 800df22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df26:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800df2a:	eef0 7a47 	vmov.f32	s15, s14
 800df2e:	eee6 7a66 	vfms.f32	s15, s12, s13
 800df32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df36:	edcd 7a03 	vstr	s15, [sp, #12]
 800df3a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800df3e:	f241 430f 	movw	r3, #5135	; 0x140f
 800df42:	9300      	str	r3, [sp, #0]
 800df44:	22a4      	movs	r2, #164	; 0xa4
 800df46:	23fc      	movs	r3, #252	; 0xfc
 800df48:	2099      	movs	r0, #153	; 0x99
 800df4a:	f010 fda1 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800df4e:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	f2c0 82c4 	blt.w	800e4e0 <CRI_chart+0xbc0>
 800df58:	2b64      	cmp	r3, #100	; 0x64
 800df5a:	f300 823e 	bgt.w	800e3da <CRI_chart+0xaba>
 800df5e:	ee07 3a90 	vmov	s15, r3
 800df62:	eddf 5aa9 	vldr	s11, [pc, #676]	; 800e208 <CRI_chart+0x8e8>
 800df66:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800e200 <CRI_chart+0x8e0>
 800df6a:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800e204 <CRI_chart+0x8e4>
 800df6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df72:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800df76:	eef0 7a47 	vmov.f32	s15, s14
 800df7a:	eee6 7a66 	vfms.f32	s15, s12, s13
 800df7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df82:	edcd 7a03 	vstr	s15, [sp, #12]
 800df86:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800df8a:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800df8e:	9300      	str	r3, [sp, #0]
 800df90:	22ba      	movs	r2, #186	; 0xba
 800df92:	23fc      	movs	r3, #252	; 0xfc
 800df94:	20af      	movs	r0, #175	; 0xaf
 800df96:	f010 fd7b 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800df9a:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f2c0 829c 	blt.w	800e4dc <CRI_chart+0xbbc>
 800dfa4:	2b64      	cmp	r3, #100	; 0x64
 800dfa6:	f300 8216 	bgt.w	800e3d6 <CRI_chart+0xab6>
 800dfaa:	ee07 3a90 	vmov	s15, r3
 800dfae:	eddf 5a96 	vldr	s11, [pc, #600]	; 800e208 <CRI_chart+0x8e8>
 800dfb2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e200 <CRI_chart+0x8e0>
 800dfb6:	eddf 6a93 	vldr	s13, [pc, #588]	; 800e204 <CRI_chart+0x8e4>
 800dfba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfbe:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dfc2:	eef0 7a47 	vmov.f32	s15, s14
 800dfc6:	eee6 7a66 	vfms.f32	s15, s12, s13
 800dfca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfce:	edcd 7a03 	vstr	s15, [sp, #12]
 800dfd2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dfd6:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	22d0      	movs	r2, #208	; 0xd0
 800dfde:	23fc      	movs	r3, #252	; 0xfc
 800dfe0:	20c5      	movs	r0, #197	; 0xc5
 800dfe2:	f010 fd55 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800dfe6:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f2c0 827c 	blt.w	800e4e8 <CRI_chart+0xbc8>
 800dff0:	2b64      	cmp	r3, #100	; 0x64
 800dff2:	f300 81ee 	bgt.w	800e3d2 <CRI_chart+0xab2>
 800dff6:	ee07 3a90 	vmov	s15, r3
 800dffa:	eddf 5a83 	vldr	s11, [pc, #524]	; 800e208 <CRI_chart+0x8e8>
 800dffe:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800e200 <CRI_chart+0x8e0>
 800e002:	eddf 6a80 	vldr	s13, [pc, #512]	; 800e204 <CRI_chart+0x8e4>
 800e006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e00a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e00e:	eef0 7a47 	vmov.f32	s15, s14
 800e012:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e01a:	edcd 7a03 	vstr	s15, [sp, #12]
 800e01e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e022:	f248 4357 	movw	r3, #33879	; 0x8457
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	22e6      	movs	r2, #230	; 0xe6
 800e02a:	23fc      	movs	r3, #252	; 0xfc
 800e02c:	20db      	movs	r0, #219	; 0xdb
 800e02e:	f010 fd2f 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800e032:	f995 3007 	ldrsb.w	r3, [r5, #7]
 800e036:	2b00      	cmp	r3, #0
 800e038:	f2c0 8254 	blt.w	800e4e4 <CRI_chart+0xbc4>
 800e03c:	2b64      	cmp	r3, #100	; 0x64
 800e03e:	f300 81c6 	bgt.w	800e3ce <CRI_chart+0xaae>
 800e042:	ee07 3a90 	vmov	s15, r3
 800e046:	eddf 5a70 	vldr	s11, [pc, #448]	; 800e208 <CRI_chart+0x8e8>
 800e04a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e200 <CRI_chart+0x8e0>
 800e04e:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800e204 <CRI_chart+0x8e4>
 800e052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e056:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e05a:	eef0 7a47 	vmov.f32	s15, s14
 800e05e:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e066:	edcd 7a03 	vstr	s15, [sp, #12]
 800e06a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e06e:	23fc      	movs	r3, #252	; 0xfc
 800e070:	f24a 4277 	movw	r2, #42103	; 0xa477
 800e074:	9200      	str	r2, [sp, #0]
 800e076:	20f1      	movs	r0, #241	; 0xf1
 800e078:	461a      	mov	r2, r3
 800e07a:	f010 fd09 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800e07e:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	f2c0 8219 	blt.w	800e4ba <CRI_chart+0xb9a>
 800e088:	2b64      	cmp	r3, #100	; 0x64
 800e08a:	f300 8196 	bgt.w	800e3ba <CRI_chart+0xa9a>
 800e08e:	ee07 3a90 	vmov	s15, r3
 800e092:	eddf 5a5d 	vldr	s11, [pc, #372]	; 800e208 <CRI_chart+0x8e8>
 800e096:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800e200 <CRI_chart+0x8e0>
 800e09a:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800e204 <CRI_chart+0x8e4>
 800e09e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0a2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e0a6:	eef0 7a47 	vmov.f32	s15, s14
 800e0aa:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e0ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0b2:	edcd 7a03 	vstr	s15, [sp, #12]
 800e0b6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e0ba:	f24e 1365 	movw	r3, #57701	; 0xe165
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e0c4:	23fc      	movs	r3, #252	; 0xfc
 800e0c6:	f240 1007 	movw	r0, #263	; 0x107
 800e0ca:	f010 fce1 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800e0ce:	f995 3009 	ldrsb.w	r3, [r5, #9]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f2c0 81ef 	blt.w	800e4b6 <CRI_chart+0xb96>
 800e0d8:	2b64      	cmp	r3, #100	; 0x64
 800e0da:	f300 816c 	bgt.w	800e3b6 <CRI_chart+0xa96>
 800e0de:	ee07 3a90 	vmov	s15, r3
 800e0e2:	eddf 5a49 	vldr	s11, [pc, #292]	; 800e208 <CRI_chart+0x8e8>
 800e0e6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e200 <CRI_chart+0x8e0>
 800e0ea:	eddf 6a46 	vldr	s13, [pc, #280]	; 800e204 <CRI_chart+0x8e4>
 800e0ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0f2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e0f6:	eef0 7a47 	vmov.f32	s15, s14
 800e0fa:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e0fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e102:	edcd 7a03 	vstr	s15, [sp, #12]
 800e106:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e10a:	f24e 7323 	movw	r3, #59171	; 0xe723
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e114:	23fc      	movs	r3, #252	; 0xfc
 800e116:	f240 101d 	movw	r0, #285	; 0x11d
 800e11a:	f010 fcb9 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800e11e:	f995 300a 	ldrsb.w	r3, [r5, #10]
 800e122:	2b00      	cmp	r3, #0
 800e124:	f2c0 81cd 	blt.w	800e4c2 <CRI_chart+0xba2>
 800e128:	2b64      	cmp	r3, #100	; 0x64
 800e12a:	f300 8142 	bgt.w	800e3b2 <CRI_chart+0xa92>
 800e12e:	ee07 3a90 	vmov	s15, r3
 800e132:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e208 <CRI_chart+0x8e8>
 800e136:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e200 <CRI_chart+0x8e0>
 800e13a:	eddf 6a32 	vldr	s13, [pc, #200]	; 800e204 <CRI_chart+0x8e4>
 800e13e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e142:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e146:	eef0 7a47 	vmov.f32	s15, s14
 800e14a:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e152:	edcd 7a03 	vstr	s15, [sp, #12]
 800e156:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e15a:	f241 4327 	movw	r3, #5159	; 0x1427
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800e164:	23fc      	movs	r3, #252	; 0xfc
 800e166:	f240 1033 	movw	r0, #307	; 0x133
 800e16a:	f010 fc91 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800e16e:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800e172:	2b00      	cmp	r3, #0
 800e174:	f2c0 81a3 	blt.w	800e4be <CRI_chart+0xb9e>
 800e178:	2b64      	cmp	r3, #100	; 0x64
 800e17a:	f300 8118 	bgt.w	800e3ae <CRI_chart+0xa8e>
 800e17e:	ee07 3a90 	vmov	s15, r3
 800e182:	eddf 5a21 	vldr	s11, [pc, #132]	; 800e208 <CRI_chart+0x8e8>
 800e186:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800e200 <CRI_chart+0x8e0>
 800e18a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800e204 <CRI_chart+0x8e4>
 800e18e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e192:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e196:	eef0 7a47 	vmov.f32	s15, s14
 800e19a:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e19e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1a2:	edcd 7a03 	vstr	s15, [sp, #12]
 800e1a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e1aa:	f242 138d 	movw	r3, #8589	; 0x218d
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800e1b4:	23fc      	movs	r3, #252	; 0xfc
 800e1b6:	f240 1049 	movw	r0, #329	; 0x149
 800e1ba:	f010 fc69 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800e1be:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	f2c0 8175 	blt.w	800e4b2 <CRI_chart+0xb92>
 800e1c8:	2b64      	cmp	r3, #100	; 0x64
 800e1ca:	f300 80fa 	bgt.w	800e3c2 <CRI_chart+0xaa2>
 800e1ce:	ee07 3a90 	vmov	s15, r3
 800e1d2:	eddf 5a0d 	vldr	s11, [pc, #52]	; 800e208 <CRI_chart+0x8e8>
 800e1d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800e200 <CRI_chart+0x8e0>
 800e1da:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800e204 <CRI_chart+0x8e4>
 800e1de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1e2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e1e6:	eef0 7a47 	vmov.f32	s15, s14
 800e1ea:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e1ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1f2:	edcd 7a03 	vstr	s15, [sp, #12]
 800e1f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e1fa:	e00b      	b.n	800e214 <CRI_chart+0x8f4>
 800e1fc:	20005218 	.word	0x20005218
 800e200:	437e0000 	.word	0x437e0000
 800e204:	43520000 	.word	0x43520000
 800e208:	42c80000 	.word	0x42c80000
 800e20c:	43570000 	.word	0x43570000
 800e210:	43740000 	.word	0x43740000
 800e214:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e21e:	23fc      	movs	r3, #252	; 0xfc
 800e220:	f240 105f 	movw	r0, #351	; 0x15f
 800e224:	f010 fc34 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800e228:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f2c0 813e 	blt.w	800e4ae <CRI_chart+0xb8e>
 800e232:	2b64      	cmp	r3, #100	; 0x64
 800e234:	f300 80c3 	bgt.w	800e3be <CRI_chart+0xa9e>
 800e238:	ee07 3a90 	vmov	s15, r3
 800e23c:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 800e208 <CRI_chart+0x8e8>
 800e240:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800e200 <CRI_chart+0x8e0>
 800e244:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 800e204 <CRI_chart+0x8e4>
 800e248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e24c:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e250:	eef0 7a47 	vmov.f32	s15, s14
 800e254:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e25c:	edcd 7a03 	vstr	s15, [sp, #12]
 800e260:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e264:	f641 3346 	movw	r3, #6982	; 0x1b46
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800e26e:	23fc      	movs	r3, #252	; 0xfc
 800e270:	f240 1075 	movw	r0, #373	; 0x175
 800e274:	f010 fc0c 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e278:	f995 300e 	ldrsb.w	r3, [r5, #14]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f2c0 8122 	blt.w	800e4c6 <CRI_chart+0xba6>
 800e282:	2b64      	cmp	r3, #100	; 0x64
 800e284:	f300 80b1 	bgt.w	800e3ea <CRI_chart+0xaca>
 800e288:	ee07 3a90 	vmov	s15, r3
 800e28c:	ed5f 5a22 	vldr	s11, [pc, #-136]	; 800e208 <CRI_chart+0x8e8>
 800e290:	ed1f 7a25 	vldr	s14, [pc, #-148]	; 800e200 <CRI_chart+0x8e0>
 800e294:	ed5f 6a25 	vldr	s13, [pc, #-148]	; 800e204 <CRI_chart+0x8e4>
 800e298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e29c:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e2a0:	eef0 7a47 	vmov.f32	s15, s14
 800e2a4:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e2a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2ac:	edcd 7a03 	vstr	s15, [sp, #12]
 800e2b0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
			
		for(uint8_t i = 0; i<=14; i++)
		{
					sprintf (buffer, "%d", GraphData[i]);
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e2b4:	ed1f 9a2c 	vldr	s18, [pc, #-176]	; 800e208 <CRI_chart+0x8e8>
 800e2b8:	ed5f 8a2c 	vldr	s17, [pc, #-176]	; 800e20c <CRI_chart+0x8ec>
 800e2bc:	ed1f 8a2c 	vldr	s16, [pc, #-176]	; 800e210 <CRI_chart+0x8f0>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e2c0:	f24f 6311 	movw	r3, #62993	; 0xf611
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800e2ca:	23fc      	movs	r3, #252	; 0xfc
 800e2cc:	f240 108b 	movw	r0, #395	; 0x18b
 800e2d0:	f010 fbde 	bl	801ea90 <TFT_FillRectangle>
 800e2d4:	3d01      	subs	r5, #1
 800e2d6:	2457      	movs	r4, #87	; 0x57
 800e2d8:	ae05      	add	r6, sp, #20
 800e2da:	e01a      	b.n	800e312 <CRI_chart+0x9f2>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e2dc:	ee07 3a90 	vmov	s15, r3
 800e2e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2e4:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800e2e8:	eef0 7a48 	vmov.f32	s15, s16
 800e2ec:	eee7 7a68 	vfms.f32	s15, s14, s17
 800e2f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2f4:	edcd 7a03 	vstr	s15, [sp, #12]
 800e2f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	4620      	mov	r0, r4
 800e300:	4632      	mov	r2, r6
 800e302:	3416      	adds	r4, #22
 800e304:	f010 ffd4 	bl	801f2b0 <TFT_DisplayString>
 800e308:	b2a4      	uxth	r4, r4
		for(uint8_t i = 0; i<=14; i++)
 800e30a:	f240 13a1 	movw	r3, #417	; 0x1a1
 800e30e:	429c      	cmp	r4, r3
 800e310:	d047      	beq.n	800e3a2 <CRI_chart+0xa82>
					sprintf (buffer, "%d", GraphData[i]);
 800e312:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800e316:	4975      	ldr	r1, [pc, #468]	; (800e4ec <CRI_chart+0xbcc>)
 800e318:	4630      	mov	r0, r6
 800e31a:	f014 f9f9 	bl	8022710 <sprintf>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e31e:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800e322:	2b00      	cmp	r3, #0
 800e324:	db38      	blt.n	800e398 <CRI_chart+0xa78>
 800e326:	2b64      	cmp	r3, #100	; 0x64
 800e328:	ddd8      	ble.n	800e2dc <CRI_chart+0x9bc>
 800e32a:	2190      	movs	r1, #144	; 0x90
 800e32c:	e7e6      	b.n	800e2fc <CRI_chart+0x9dc>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800e32e:	ee07 3a90 	vmov	s15, r3
 800e332:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e4f0 <CRI_chart+0xbd0>
 800e336:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800e4f4 <CRI_chart+0xbd4>
 800e33a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e4f8 <CRI_chart+0xbd8>
 800e33e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e342:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e346:	eef0 7a47 	vmov.f32	s15, s14
 800e34a:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e34e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e352:	edcd 7a03 	vstr	s15, [sp, #12]
 800e356:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e35a:	f7ff baf6 	b.w	800d94a <CRI_chart+0x2a>
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800e35e:	ee07 3a90 	vmov	s15, r3
 800e362:	eddf 5a63 	vldr	s11, [pc, #396]	; 800e4f0 <CRI_chart+0xbd0>
 800e366:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800e4fc <CRI_chart+0xbdc>
 800e36a:	eddf 6a65 	vldr	s13, [pc, #404]	; 800e500 <CRI_chart+0xbe0>
 800e36e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e372:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800e376:	eef0 7a47 	vmov.f32	s15, s14
 800e37a:	eee6 7a66 	vfms.f32	s15, s12, s13
 800e37e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e382:	edcd 7a03 	vstr	s15, [sp, #12]
 800e386:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e38a:	e566      	b.n	800de5a <CRI_chart+0x53a>
 800e38c:	21fe      	movs	r1, #254	; 0xfe
 800e38e:	e564      	b.n	800de5a <CRI_chart+0x53a>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800e390:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e394:	f7ff bad9 	b.w	800d94a <CRI_chart+0x2a>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e398:	21f4      	movs	r1, #244	; 0xf4
 800e39a:	e7af      	b.n	800e2fc <CRI_chart+0x9dc>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800e39c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800e3a0:	e52d      	b.n	800ddfe <CRI_chart+0x4de>
					X += 22;
		}
		
		TFT_direction = 0x00;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	703b      	strb	r3, [r7, #0]
	}
}
 800e3a6:	b007      	add	sp, #28
 800e3a8:	ecbd 8b04 	vpop	{d8-d9}
 800e3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800e3ae:	219a      	movs	r1, #154	; 0x9a
 800e3b0:	e6fb      	b.n	800e1aa <CRI_chart+0x88a>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800e3b2:	219a      	movs	r1, #154	; 0x9a
 800e3b4:	e6d1      	b.n	800e15a <CRI_chart+0x83a>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800e3b6:	219a      	movs	r1, #154	; 0x9a
 800e3b8:	e6a7      	b.n	800e10a <CRI_chart+0x7ea>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800e3ba:	219a      	movs	r1, #154	; 0x9a
 800e3bc:	e67d      	b.n	800e0ba <CRI_chart+0x79a>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800e3be:	219a      	movs	r1, #154	; 0x9a
 800e3c0:	e750      	b.n	800e264 <CRI_chart+0x944>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800e3c2:	219a      	movs	r1, #154	; 0x9a
 800e3c4:	e726      	b.n	800e214 <CRI_chart+0x8f4>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800e3c6:	219a      	movs	r1, #154	; 0x9a
 800e3c8:	e5b9      	b.n	800df3e <CRI_chart+0x61e>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800e3ca:	219a      	movs	r1, #154	; 0x9a
 800e3cc:	e591      	b.n	800def2 <CRI_chart+0x5d2>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800e3ce:	219a      	movs	r1, #154	; 0x9a
 800e3d0:	e64d      	b.n	800e06e <CRI_chart+0x74e>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800e3d2:	219a      	movs	r1, #154	; 0x9a
 800e3d4:	e625      	b.n	800e022 <CRI_chart+0x702>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800e3d6:	219a      	movs	r1, #154	; 0x9a
 800e3d8:	e5fd      	b.n	800dfd6 <CRI_chart+0x6b6>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800e3da:	219a      	movs	r1, #154	; 0x9a
 800e3dc:	e5d5      	b.n	800df8a <CRI_chart+0x66a>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800e3de:	219a      	movs	r1, #154	; 0x9a
 800e3e0:	e561      	b.n	800dea6 <CRI_chart+0x586>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800e3e2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e3e6:	f7ff bad7 	b.w	800d998 <CRI_chart+0x78>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e3ea:	219a      	movs	r1, #154	; 0x9a
 800e3ec:	e762      	b.n	800e2b4 <CRI_chart+0x994>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800e3ee:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e3f2:	e4d6      	b.n	800dda2 <CRI_chart+0x482>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800e3f4:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e3f8:	f7ff bb6a 	b.w	800dad0 <CRI_chart+0x1b0>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800e3fc:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e400:	f7ff bb3f 	b.w	800da82 <CRI_chart+0x162>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800e404:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e408:	f7ff bb14 	b.w	800da34 <CRI_chart+0x114>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800e40c:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e410:	f7ff bae9 	b.w	800d9e6 <CRI_chart+0xc6>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800e414:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e418:	e49c      	b.n	800dd54 <CRI_chart+0x434>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800e41a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e41e:	e468      	b.n	800dcf2 <CRI_chart+0x3d2>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800e420:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e424:	e43e      	b.n	800dca4 <CRI_chart+0x384>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800e426:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e42a:	e414      	b.n	800dc56 <CRI_chart+0x336>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800e42c:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e430:	f7ff bbea 	b.w	800dc08 <CRI_chart+0x2e8>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800e434:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e438:	f7ff bbbf 	b.w	800dbba <CRI_chart+0x29a>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800e43c:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e440:	f7ff bb94 	b.w	800db6c <CRI_chart+0x24c>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800e444:	f44f 719b 	mov.w	r1, #310	; 0x136
 800e448:	f7ff bb69 	b.w	800db1e <CRI_chart+0x1fe>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800e44c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e450:	f7ff bb8c 	b.w	800db6c <CRI_chart+0x24c>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800e454:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e458:	f7ff bb61 	b.w	800db1e <CRI_chart+0x1fe>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800e45c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e460:	f7ff bbd2 	b.w	800dc08 <CRI_chart+0x2e8>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800e464:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e468:	f7ff bba7 	b.w	800dbba <CRI_chart+0x29a>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800e46c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e470:	e418      	b.n	800dca4 <CRI_chart+0x384>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800e472:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e476:	f7ff bbee 	b.w	800dc56 <CRI_chart+0x336>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800e47a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e47e:	e469      	b.n	800dd54 <CRI_chart+0x434>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800e480:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e484:	e435      	b.n	800dcf2 <CRI_chart+0x3d2>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800e486:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e48a:	f7ff bad3 	b.w	800da34 <CRI_chart+0x114>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800e48e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e492:	f7ff baa8 	b.w	800d9e6 <CRI_chart+0xc6>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800e496:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e49a:	f7ff bb19 	b.w	800dad0 <CRI_chart+0x1b0>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800e49e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e4a2:	f7ff baee 	b.w	800da82 <CRI_chart+0x162>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800e4a6:	21fe      	movs	r1, #254	; 0xfe
 800e4a8:	e549      	b.n	800df3e <CRI_chart+0x61e>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800e4aa:	21fe      	movs	r1, #254	; 0xfe
 800e4ac:	e521      	b.n	800def2 <CRI_chart+0x5d2>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800e4ae:	21fe      	movs	r1, #254	; 0xfe
 800e4b0:	e6d8      	b.n	800e264 <CRI_chart+0x944>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800e4b2:	21fe      	movs	r1, #254	; 0xfe
 800e4b4:	e6ae      	b.n	800e214 <CRI_chart+0x8f4>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800e4b6:	21fe      	movs	r1, #254	; 0xfe
 800e4b8:	e627      	b.n	800e10a <CRI_chart+0x7ea>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800e4ba:	21fe      	movs	r1, #254	; 0xfe
 800e4bc:	e5fd      	b.n	800e0ba <CRI_chart+0x79a>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800e4be:	21fe      	movs	r1, #254	; 0xfe
 800e4c0:	e673      	b.n	800e1aa <CRI_chart+0x88a>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800e4c2:	21fe      	movs	r1, #254	; 0xfe
 800e4c4:	e649      	b.n	800e15a <CRI_chart+0x83a>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e4c6:	21fe      	movs	r1, #254	; 0xfe
 800e4c8:	e6f4      	b.n	800e2b4 <CRI_chart+0x994>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800e4ca:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e4ce:	e468      	b.n	800dda2 <CRI_chart+0x482>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800e4d0:	21fe      	movs	r1, #254	; 0xfe
 800e4d2:	e4e8      	b.n	800dea6 <CRI_chart+0x586>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800e4d4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800e4d8:	f7ff ba5e 	b.w	800d998 <CRI_chart+0x78>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800e4dc:	21fe      	movs	r1, #254	; 0xfe
 800e4de:	e57a      	b.n	800dfd6 <CRI_chart+0x6b6>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800e4e0:	21fe      	movs	r1, #254	; 0xfe
 800e4e2:	e552      	b.n	800df8a <CRI_chart+0x66a>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800e4e4:	21fe      	movs	r1, #254	; 0xfe
 800e4e6:	e5c2      	b.n	800e06e <CRI_chart+0x74e>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800e4e8:	21fe      	movs	r1, #254	; 0xfe
 800e4ea:	e59a      	b.n	800e022 <CRI_chart+0x702>
 800e4ec:	08027384 	.word	0x08027384
 800e4f0:	42c80000 	.word	0x42c80000
 800e4f4:	43cd0000 	.word	0x43cd0000
 800e4f8:	43988000 	.word	0x43988000
 800e4fc:	437e0000 	.word	0x437e0000
 800e500:	43520000 	.word	0x43520000

0800e504 <CRI_Draw>:

void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e508:	b082      	sub	sp, #8
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e50a:	2763      	movs	r7, #99	; 0x63
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e50c:	4604      	mov	r4, r0
 800e50e:	4688      	mov	r8, r1
 800e510:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e512:	213a      	movs	r1, #58	; 0x3a
 800e514:	f44f 7287 	mov.w	r2, #270	; 0x10e
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e518:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e51a:	9700      	str	r7, [sp, #0]
 800e51c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800e520:	2005      	movs	r0, #5
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e522:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e526:	f010 fab3 	bl	801ea90 <TFT_FillRectangle>
	CRI_Axes(direction);
 800e52a:	4620      	mov	r0, r4
 800e52c:	f7fe fe1e 	bl	800d16c <CRI_Axes>
	CRI_Axes_Text(direction);
 800e530:	4620      	mov	r0, r4
 800e532:	f7fe ff9b 	bl	800d46c <CRI_Axes_Text>
	CRI_chart(direction, GraphData);
 800e536:	4641      	mov	r1, r8
 800e538:	4620      	mov	r0, r4
 800e53a:	f7ff f9f1 	bl	800d920 <CRI_chart>
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800e53e:	463b      	mov	r3, r7
 800e540:	4632      	mov	r2, r6
 800e542:	4629      	mov	r1, r5
 800e544:	4620      	mov	r0, r4
 800e546:	b002      	add	sp, #8
 800e548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800e54c:	f7fe beb0 	b.w	800d2b0 <CRI_Axes_Measure>

0800e550 <Calculate_EL_Day>:
extern float colorimetry_xy1964[2], colorimetry_uv[2], colorimetry_uv1976[2], colorimetry_xy1931[2];
extern float calibratre_x_1931[1024], Spectral_day[1024], calibratre_z_1931[1024];
	
float Calculate_EL_Day(float R_data[], float Spectral_Day_const[])
{
	sum = 0;
 800e550:	4a0c      	ldr	r2, [pc, #48]	; (800e584 <Calculate_EL_Day+0x34>)
 800e552:	2300      	movs	r3, #0
 800e554:	6013      	str	r3, [r2, #0]
 800e556:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800e558:	ecb0 7a01 	vldmia	r0!, {s14}
 800e55c:	ecf1 7a01 	vldmia	r1!, {s15}
 800e560:	ed92 0a00 	vldr	s0, [r2]
 800e564:	eea7 0a27 	vfma.f32	s0, s14, s15
	for ( iq = 0; iq < 1024; iq++)
 800e568:	3301      	adds	r3, #1
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800e570:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e574:	d1f0      	bne.n	800e558 <Calculate_EL_Day+0x8>
 800e576:	4a04      	ldr	r2, [pc, #16]	; (800e588 <Calculate_EL_Day+0x38>)
	}
	return 683*sum;
}
 800e578:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e58c <Calculate_EL_Day+0x3c>
 800e57c:	8013      	strh	r3, [r2, #0]
 800e57e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e582:	4770      	bx	lr
 800e584:	2008c304 	.word	0x2008c304
 800e588:	2008c2fc 	.word	0x2008c2fc
 800e58c:	442ac000 	.word	0x442ac000

0800e590 <Calculate_EL_Day_Wt>:


float Calculate_EL_Day_Wt(float R_data[])
{
	sum = 0;
 800e590:	4a09      	ldr	r2, [pc, #36]	; (800e5b8 <Calculate_EL_Day_Wt+0x28>)
 800e592:	2300      	movs	r3, #0
 800e594:	6013      	str	r3, [r2, #0]
 800e596:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]);
 800e598:	ecf0 7a01 	vldmia	r0!, {s15}
 800e59c:	ed92 0a00 	vldr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e5a0:	3301      	adds	r3, #1
		sum = sum + (R_data[iq]);
 800e5a2:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( iq = 0; iq < 1024; iq++)
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]);
 800e5ac:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e5b0:	d1f2      	bne.n	800e598 <Calculate_EL_Day_Wt+0x8>
 800e5b2:	4a02      	ldr	r2, [pc, #8]	; (800e5bc <Calculate_EL_Day_Wt+0x2c>)
 800e5b4:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e5b6:	4770      	bx	lr
 800e5b8:	2008c304 	.word	0x2008c304
 800e5bc:	2008c2fc 	.word	0x2008c2fc

0800e5c0 <Calculate_EL_Night>:

float Calculate_EL_Night(float R_data[], float Spectral_Night_const[])
{
	sum = 0;
 800e5c0:	4a0c      	ldr	r2, [pc, #48]	; (800e5f4 <Calculate_EL_Night+0x34>)
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	6013      	str	r3, [r2, #0]
 800e5c6:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800e5c8:	ecb0 7a01 	vldmia	r0!, {s14}
 800e5cc:	ecf1 7a01 	vldmia	r1!, {s15}
 800e5d0:	ed92 0a00 	vldr	s0, [r2]
 800e5d4:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e5d8:	3301      	adds	r3, #1
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800e5e0:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e5e4:	d1f0      	bne.n	800e5c8 <Calculate_EL_Night+0x8>
 800e5e6:	4a04      	ldr	r2, [pc, #16]	; (800e5f8 <Calculate_EL_Night+0x38>)
	}
	return 1700*sum;
}
 800e5e8:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e5fc <Calculate_EL_Night+0x3c>
 800e5ec:	8013      	strh	r3, [r2, #0]
 800e5ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e5f2:	4770      	bx	lr
 800e5f4:	2008c304 	.word	0x2008c304
 800e5f8:	2008c2fc 	.word	0x2008c2fc
 800e5fc:	44d48000 	.word	0x44d48000

0800e600 <Calculate_SP>:

float Calculate_SP(float EL_day_data, float EL_Night_data)
{
	return (EL_day_data !=0) ? EL_Night_data/EL_day_data: 0;
 800e600:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e608:	bf14      	ite	ne
 800e60a:	eec0 7a80 	vdivne.f32	s15, s1, s0
 800e60e:	eddf 7a02 	vldreq	s15, [pc, #8]	; 800e618 <Calculate_SP+0x18>
}
 800e612:	eeb0 0a67 	vmov.f32	s0, s15
 800e616:	4770      	bx	lr
	...

0800e620 <Calculate_PPFD_PPL>:

float Calculate_PPFD_PPL(float R_data[], float Wavelenght[])
{
 800e620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sum = 0;
 800e624:	4d1a      	ldr	r5, [pc, #104]	; (800e690 <Calculate_PPFD_PPL+0x70>)
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e626:	f20f 0960 	addw	r9, pc, #96	; 0x60
 800e62a:	e9d9 8900 	ldrd	r8, r9, [r9]
	sum = 0;
 800e62e:	2300      	movs	r3, #0
 800e630:	602b      	str	r3, [r5, #0]
 800e632:	4683      	mov	fp, r0
 800e634:	468a      	mov	sl, r1
 800e636:	2400      	movs	r4, #0
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e638:	ecbb 7a01 	vldmia	fp!, {s14}
 800e63c:	ecfa 7a01 	vldmia	sl!, {s15}
 800e640:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e644:	3401      	adds	r4, #1
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e646:	ee17 0a90 	vmov	r0, s15
 800e64a:	f7f1 ff95 	bl	8000578 <__aeabi_f2d>
 800e64e:	4642      	mov	r2, r8
 800e650:	464b      	mov	r3, r9
 800e652:	f7f1 ffe5 	bl	8000620 <__aeabi_dmul>
 800e656:	4606      	mov	r6, r0
 800e658:	6828      	ldr	r0, [r5, #0]
 800e65a:	460f      	mov	r7, r1
 800e65c:	f7f1 ff8c 	bl	8000578 <__aeabi_f2d>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	4630      	mov	r0, r6
 800e666:	4639      	mov	r1, r7
 800e668:	f7f1 fe28 	bl	80002bc <__adddf3>
 800e66c:	f7f2 fad0 	bl	8000c10 <__aeabi_d2f>
	for (iq = 0; iq < 1024; iq++)
 800e670:	b2a4      	uxth	r4, r4
 800e672:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e676:	6028      	str	r0, [r5, #0]
	for (iq = 0; iq < 1024; iq++)
 800e678:	d1de      	bne.n	800e638 <Calculate_PPFD_PPL+0x18>
 800e67a:	4b06      	ldr	r3, [pc, #24]	; (800e694 <Calculate_PPFD_PPL+0x74>)
	}
	return sum;
}
 800e67c:	ee00 0a10 	vmov	s0, r0
 800e680:	801c      	strh	r4, [r3, #0]
 800e682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e686:	bf00      	nop
 800e688:	73f2981b 	.word	0x73f2981b
 800e68c:	3f811eb6 	.word	0x3f811eb6
 800e690:	2008c304 	.word	0x2008c304
 800e694:	2008c2fc 	.word	0x2008c2fc

0800e698 <Calculate_PPFD_PPL_Range>:

float Calculate_PPFD_PPL_Range(float R_data[], float Wavelenght[], uint8_t Range)
{
 800e698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t Range_min, Range_max;
	sum = 0;
 800e69c:	4d34      	ldr	r5, [pc, #208]	; (800e770 <Calculate_PPFD_PPL_Range+0xd8>)
 800e69e:	2300      	movs	r3, #0
 800e6a0:	602b      	str	r3, [r5, #0]
	
	if (Range == BLUE_RANGE)
 800e6a2:	b1f2      	cbz	r2, 800e6e2 <Calculate_PPFD_PPL_Range+0x4a>
	{
		Range_min = 400;
		Range_max = 500;
	} else if (Range == GREEN_RANGE)
 800e6a4:	2a01      	cmp	r2, #1
 800e6a6:	d021      	beq.n	800e6ec <Calculate_PPFD_PPL_Range+0x54>
	{
		Range_min = 500;
		Range_max = 600;
	} else if (Range == RED_RANGE)
 800e6a8:	2a02      	cmp	r2, #2
 800e6aa:	d024      	beq.n	800e6f6 <Calculate_PPFD_PPL_Range+0x5e>
		Range_min = 600;
		Range_max = 700;
	}else if (Range == FAR_RED_RANGE)
	{
		Range_min = 700;
		Range_max = 1000;
 800e6ac:	2a03      	cmp	r2, #3
 800e6ae:	bf0b      	itete	eq
 800e6b0:	f44f 7a7a 	moveq.w	sl, #1000	; 0x3e8
 800e6b4:	f04f 0a00 	movne.w	sl, #0
 800e6b8:	f44f 772f 	moveq.w	r7, #700	; 0x2bc
 800e6bc:	2700      	movne	r7, #0
	}
	
	for(iq = 0; iq < 1024; iq++)
 800e6be:	4a2d      	ldr	r2, [pc, #180]	; (800e774 <Calculate_PPFD_PPL_Range+0xdc>)
 800e6c0:	9201      	str	r2, [sp, #4]
 800e6c2:	2400      	movs	r4, #0
 800e6c4:	8014      	strh	r4, [r2, #0]
 800e6c6:	4606      	mov	r6, r0
 800e6c8:	468b      	mov	fp, r1
 800e6ca:	4623      	mov	r3, r4
 800e6cc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e6d0:	d116      	bne.n	800e700 <Calculate_PPFD_PPL_Range+0x68>
 800e6d2:	b10b      	cbz	r3, 800e6d8 <Calculate_PPFD_PPL_Range+0x40>
 800e6d4:	9b01      	ldr	r3, [sp, #4]
 800e6d6:	801c      	strh	r4, [r3, #0]
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
			}
		}
	}
	return sum;
}
 800e6d8:	ed95 0a00 	vldr	s0, [r5]
 800e6dc:	b003      	add	sp, #12
 800e6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Range_max = 500;
 800e6e2:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
		Range_min = 400;
 800e6e6:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800e6ea:	e7e8      	b.n	800e6be <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 600;
 800e6ec:	f44f 7a16 	mov.w	sl, #600	; 0x258
		Range_min = 500;
 800e6f0:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800e6f4:	e7e3      	b.n	800e6be <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 700;
 800e6f6:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
		Range_min = 600;
 800e6fa:	f44f 7716 	mov.w	r7, #600	; 0x258
 800e6fe:	e7de      	b.n	800e6be <Calculate_PPFD_PPL_Range+0x26>
		if(Wavelenght[iq] > Range_min && Wavelenght[iq] < Range_max)
 800e700:	ee07 7a10 	vmov	s14, r7
 800e704:	ecfb 7a01 	vldmia	fp!, {s15}
 800e708:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e70c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e714:	dd23      	ble.n	800e75e <Calculate_PPFD_PPL_Range+0xc6>
 800e716:	ee07 aa10 	vmov	s14, sl
 800e71a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e71e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e726:	d51a      	bpl.n	800e75e <Calculate_PPFD_PPL_Range+0xc6>
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e728:	ed96 7a00 	vldr	s14, [r6]
 800e72c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e730:	ee17 0a90 	vmov	r0, s15
 800e734:	f7f1 ff20 	bl	8000578 <__aeabi_f2d>
 800e738:	a30b      	add	r3, pc, #44	; (adr r3, 800e768 <Calculate_PPFD_PPL_Range+0xd0>)
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	f7f1 ff6f 	bl	8000620 <__aeabi_dmul>
 800e742:	4680      	mov	r8, r0
 800e744:	6828      	ldr	r0, [r5, #0]
 800e746:	4689      	mov	r9, r1
 800e748:	f7f1 ff16 	bl	8000578 <__aeabi_f2d>
 800e74c:	4602      	mov	r2, r0
 800e74e:	460b      	mov	r3, r1
 800e750:	4640      	mov	r0, r8
 800e752:	4649      	mov	r1, r9
 800e754:	f7f1 fdb2 	bl	80002bc <__adddf3>
 800e758:	f7f2 fa5a 	bl	8000c10 <__aeabi_d2f>
 800e75c:	6028      	str	r0, [r5, #0]
 800e75e:	3401      	adds	r4, #1
 800e760:	b2a4      	uxth	r4, r4
 800e762:	3604      	adds	r6, #4
 800e764:	2301      	movs	r3, #1
 800e766:	e7b1      	b.n	800e6cc <Calculate_PPFD_PPL_Range+0x34>
 800e768:	73f2981b 	.word	0x73f2981b
 800e76c:	3f811eb6 	.word	0x3f811eb6
 800e770:	2008c304 	.word	0x2008c304
 800e774:	2008c2fc 	.word	0x2008c2fc

0800e778 <Calculate_ELb>:
	return sum;
}

float Calculate_ELb(float R_data[], float Hazard_Blue[])
{
		sum = 0;
 800e778:	4a0a      	ldr	r2, [pc, #40]	; (800e7a4 <Calculate_ELb+0x2c>)
 800e77a:	2300      	movs	r3, #0
 800e77c:	6013      	str	r3, [r2, #0]
 800e77e:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e780:	ecb0 7a01 	vldmia	r0!, {s14}
 800e784:	ecf1 7a01 	vldmia	r1!, {s15}
 800e788:	ed92 0a00 	vldr	s0, [r2]
 800e78c:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e790:	3301      	adds	r3, #1
 800e792:	b29b      	uxth	r3, r3
 800e794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e798:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e79c:	d1f0      	bne.n	800e780 <Calculate_ELb+0x8>
 800e79e:	4a02      	ldr	r2, [pc, #8]	; (800e7a8 <Calculate_ELb+0x30>)
 800e7a0:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e7a2:	4770      	bx	lr
 800e7a4:	2008c304 	.word	0x2008c304
 800e7a8:	2008c2fc 	.word	0x2008c2fc

0800e7ac <Calculate_ELr>:
 800e7ac:	f7ff bfe4 	b.w	800e778 <Calculate_ELb>

0800e7b0 <Calculate_XYZ1964>:




void Calculate_XYZ1964(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e7b0:	b5d0      	push	{r4, r6, r7, lr}
 800e7b2:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e7b6:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e83c <Calculate_XYZ1964+0x8c>
{
 800e7ba:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e7bc:	eef0 7a48 	vmov.f32	s15, s16
 800e7c0:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1964[0] = 0;
	colorimetry_XYZ1964[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e7c4:	ecb0 7a01 	vldmia	r0!, {s14}
 800e7c8:	ecf1 6a01 	vldmia	r1!, {s13}
 800e7cc:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e7d0:	3401      	adds	r4, #1
 800e7d2:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e7d4:	ecf2 6a01 	vldmia	r2!, {s13}
 800e7d8:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e7dc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e7e0:	ecf3 6a01 	vldmia	r3!, {s13}
 800e7e4:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e7e8:	d1ec      	bne.n	800e7c4 <Calculate_XYZ1964+0x14>
	}
	
	k = 100/Y_sum;
 800e7ea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e840 <Calculate_XYZ1964+0x90>
 800e7ee:	4b15      	ldr	r3, [pc, #84]	; (800e844 <Calculate_XYZ1964+0x94>)
 800e7f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e7f4:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1964[0] = k*X_sum;
 800e7f6:	4c14      	ldr	r4, [pc, #80]	; (800e848 <Calculate_XYZ1964+0x98>)
	k = 100/Y_sum;
 800e7f8:	ee16 0a90 	vmov	r0, s13
 800e7fc:	f7f1 febc 	bl	8000578 <__aeabi_f2d>
 800e800:	4606      	mov	r6, r0
 800e802:	460f      	mov	r7, r1
	colorimetry_XYZ1964[0] = k*X_sum;
 800e804:	ee18 0a90 	vmov	r0, s17
 800e808:	f7f1 feb6 	bl	8000578 <__aeabi_f2d>
 800e80c:	4632      	mov	r2, r6
 800e80e:	463b      	mov	r3, r7
 800e810:	f7f1 ff06 	bl	8000620 <__aeabi_dmul>
 800e814:	f7f2 f9dc 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1964[1] = 100;
 800e818:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1964[0] = k*X_sum;
 800e81a:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1964[1] = 100;
 800e81c:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e81e:	ee18 0a10 	vmov	r0, s16
 800e822:	f7f1 fea9 	bl	8000578 <__aeabi_f2d>
 800e826:	4632      	mov	r2, r6
 800e828:	463b      	mov	r3, r7
 800e82a:	f7f1 fef9 	bl	8000620 <__aeabi_dmul>
 800e82e:	f7f2 f9cf 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e832:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e836:	80a0      	strh	r0, [r4, #4]
}
 800e838:	bdd0      	pop	{r4, r6, r7, pc}
 800e83a:	bf00      	nop
 800e83c:	00000000 	.word	0x00000000
 800e840:	42c80000 	.word	0x42c80000
 800e844:	2008c2fc 	.word	0x2008c2fc
 800e848:	2008adcc 	.word	0x2008adcc

0800e84c <Calculate_XYZ1931>:
void Calculate_XYZ1931(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e84c:	b5d0      	push	{r4, r6, r7, lr}
 800e84e:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e852:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e8d8 <Calculate_XYZ1931+0x8c>
{
 800e856:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e858:	eef0 7a48 	vmov.f32	s15, s16
 800e85c:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1931[0] = 0;
	colorimetry_XYZ1931[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e860:	ecb0 7a01 	vldmia	r0!, {s14}
 800e864:	ecf1 6a01 	vldmia	r1!, {s13}
 800e868:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e86c:	3401      	adds	r4, #1
 800e86e:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e870:	ecf2 6a01 	vldmia	r2!, {s13}
 800e874:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e878:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e87c:	ecf3 6a01 	vldmia	r3!, {s13}
 800e880:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e884:	d1ec      	bne.n	800e860 <Calculate_XYZ1931+0x14>
	}
	
	k = 100/Y_sum;
 800e886:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e8dc <Calculate_XYZ1931+0x90>
 800e88a:	4b15      	ldr	r3, [pc, #84]	; (800e8e0 <Calculate_XYZ1931+0x94>)
 800e88c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e890:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1931[0] = k*X_sum;
 800e892:	4c14      	ldr	r4, [pc, #80]	; (800e8e4 <Calculate_XYZ1931+0x98>)
	k = 100/Y_sum;
 800e894:	ee16 0a90 	vmov	r0, s13
 800e898:	f7f1 fe6e 	bl	8000578 <__aeabi_f2d>
 800e89c:	4606      	mov	r6, r0
 800e89e:	460f      	mov	r7, r1
	colorimetry_XYZ1931[0] = k*X_sum;
 800e8a0:	ee18 0a90 	vmov	r0, s17
 800e8a4:	f7f1 fe68 	bl	8000578 <__aeabi_f2d>
 800e8a8:	4632      	mov	r2, r6
 800e8aa:	463b      	mov	r3, r7
 800e8ac:	f7f1 feb8 	bl	8000620 <__aeabi_dmul>
 800e8b0:	f7f2 f98e 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1931[1] = 100;
 800e8b4:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1931[0] = k*X_sum;
 800e8b6:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1931[1] = 100;
 800e8b8:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e8ba:	ee18 0a10 	vmov	r0, s16
 800e8be:	f7f1 fe5b 	bl	8000578 <__aeabi_f2d>
 800e8c2:	4632      	mov	r2, r6
 800e8c4:	463b      	mov	r3, r7
 800e8c6:	f7f1 feab 	bl	8000620 <__aeabi_dmul>
 800e8ca:	f7f2 f981 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e8ce:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e8d2:	80a0      	strh	r0, [r4, #4]
}
 800e8d4:	bdd0      	pop	{r4, r6, r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	00000000 	.word	0x00000000
 800e8dc:	42c80000 	.word	0x42c80000
 800e8e0:	2008c2fc 	.word	0x2008c2fc
 800e8e4:	2008adc6 	.word	0x2008adc6

0800e8e8 <Calculate_xy1964>:
void Calculate_xy1964(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e8e8:	8801      	ldrh	r1, [r0, #0]
 800e8ea:	8842      	ldrh	r2, [r0, #2]
 800e8ec:	8880      	ldrh	r0, [r0, #4]
 800e8ee:	188b      	adds	r3, r1, r2
 800e8f0:	4403      	add	r3, r0
	
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	ee07 3a90 	vmov	s15, r3
 800e8f8:	ee07 1a10 	vmov	s14, r1
 800e8fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e900:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e904:	4b06      	ldr	r3, [pc, #24]	; (800e920 <Calculate_xy1964+0x38>)
 800e906:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e90a:	ee07 2a10 	vmov	s14, r2
 800e90e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e912:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e916:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e91a:	edc3 6a01 	vstr	s13, [r3, #4]
 800e91e:	4770      	bx	lr
 800e920:	2008adec 	.word	0x2008adec

0800e924 <Calculate_xy1931>:
}

void Calculate_xy1931(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e924:	8801      	ldrh	r1, [r0, #0]
 800e926:	8842      	ldrh	r2, [r0, #2]
 800e928:	8880      	ldrh	r0, [r0, #4]
 800e92a:	188b      	adds	r3, r1, r2
 800e92c:	4403      	add	r3, r0
	
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e92e:	b29b      	uxth	r3, r3
 800e930:	ee07 3a90 	vmov	s15, r3
 800e934:	ee07 1a10 	vmov	s14, r1
 800e938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e93c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e940:	4b06      	ldr	r3, [pc, #24]	; (800e95c <Calculate_xy1931+0x38>)
 800e942:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e946:	ee07 2a10 	vmov	s14, r2
 800e94a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e94e:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e952:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e956:	edc3 6a01 	vstr	s13, [r3, #4]
 800e95a:	4770      	bx	lr
 800e95c:	2008ade4 	.word	0x2008ade4

0800e960 <Calculate_uv>:
}

void Calculate_uv(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e960:	ed90 7a01 	vldr	s14, [r0, #4]
 800e964:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e968:	4b0e      	ldr	r3, [pc, #56]	; (800e9a4 <Calculate_uv+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e96a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e972:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e976:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e97a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e97e:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e982:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e986:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e98a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e98e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e992:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e996:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e99a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e99e:	edc3 6a01 	vstr	s13, [r3, #4]
 800e9a2:	4770      	bx	lr
 800e9a4:	2008add4 	.word	0x2008add4

0800e9a8 <Calculate_uv1976>:
}

void Calculate_uv1976(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e9a8:	ed90 7a01 	vldr	s14, [r0, #4]
 800e9ac:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e9b0:	4b0e      	ldr	r3, [pc, #56]	; (800e9ec <Calculate_uv1976+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e9b2:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e9b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9ba:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e9be:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e9c2:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e9c6:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e9ca:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e9ce:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e9d2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e9d6:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800e9da:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e9de:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e9e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e9e6:	edc3 6a01 	vstr	s13, [r3, #4]
 800e9ea:	4770      	bx	lr
 800e9ec:	2008addc 	.word	0x2008addc

0800e9f0 <Calculate_Tc>:
}

double up = 0, vp = 0, factor_uvp = 0, result_tc, u_dop = 0, v_dop = 0, deltaC = 0;
float Calculate_Tc(float R_data[], uint8_t CIE_Type)
{
 800e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f4:	ed2d 8b02 	vpush	{d8}
 800e9f8:	b08b      	sub	sp, #44	; 0x2c
	
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
	uint8_t	 i_min1 = 0, i_min2 = 0;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800e9fa:	b921      	cbnz	r1, 800ea06 <Calculate_Tc+0x16>
	{
		Calculate_XYZ1931(R_data, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 800e9fc:	4bb4      	ldr	r3, [pc, #720]	; (800ecd0 <Calculate_Tc+0x2e0>)
 800e9fe:	4ab5      	ldr	r2, [pc, #724]	; (800ecd4 <Calculate_Tc+0x2e4>)
 800ea00:	49b5      	ldr	r1, [pc, #724]	; (800ecd8 <Calculate_Tc+0x2e8>)
 800ea02:	f7ff ff23 	bl	800e84c <Calculate_XYZ1931>
	}
	
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800ea06:	4bb5      	ldr	r3, [pc, #724]	; (800ecdc <Calculate_Tc+0x2ec>)
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800ea08:	eddf 8ab5 	vldr	s17, [pc, #724]	; 800ece0 <Calculate_Tc+0x2f0>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800ea0c:	885e      	ldrh	r6, [r3, #2]
 800ea0e:	881f      	ldrh	r7, [r3, #0]
 800ea10:	889b      	ldrh	r3, [r3, #4]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
	
	
	for(uint8_t i = 0; i < 31; i++)
	{
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800ea12:	f8df a30c 	ldr.w	sl, [pc, #780]	; 800ed20 <Calculate_Tc+0x330>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800ea16:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800ea1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea1e:	4438      	add	r0, r7
 800ea20:	4418      	add	r0, r3
 800ea22:	f7f1 fd97 	bl	8000554 <__aeabi_i2d>
 800ea26:	4baf      	ldr	r3, [pc, #700]	; (800ece4 <Calculate_Tc+0x2f4>)
 800ea28:	4604      	mov	r4, r0
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	e9c3 4500 	strd	r4, r5, [r3]
	up = (4.*colorimetry_XYZ1931[0])/factor_uvp;
 800ea30:	4638      	mov	r0, r7
 800ea32:	f7f1 fd8f 	bl	8000554 <__aeabi_i2d>
 800ea36:	2200      	movs	r2, #0
 800ea38:	4bab      	ldr	r3, [pc, #684]	; (800ece8 <Calculate_Tc+0x2f8>)
 800ea3a:	4fac      	ldr	r7, [pc, #688]	; (800ecec <Calculate_Tc+0x2fc>)
 800ea3c:	f7f1 fdf0 	bl	8000620 <__aeabi_dmul>
 800ea40:	4622      	mov	r2, r4
 800ea42:	462b      	mov	r3, r5
 800ea44:	f7f1 ff16 	bl	8000874 <__aeabi_ddiv>
 800ea48:	4ba9      	ldr	r3, [pc, #676]	; (800ecf0 <Calculate_Tc+0x300>)
 800ea4a:	e9cd 0100 	strd	r0, r1, [sp]
 800ea4e:	e9c3 0100 	strd	r0, r1, [r3]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
 800ea52:	4630      	mov	r0, r6
 800ea54:	f7f1 fd7e 	bl	8000554 <__aeabi_i2d>
 800ea58:	2200      	movs	r2, #0
 800ea5a:	4ba6      	ldr	r3, [pc, #664]	; (800ecf4 <Calculate_Tc+0x304>)
 800ea5c:	f7f1 fde0 	bl	8000620 <__aeabi_dmul>
 800ea60:	462b      	mov	r3, r5
 800ea62:	4622      	mov	r2, r4
 800ea64:	f7f1 ff06 	bl	8000874 <__aeabi_ddiv>
 800ea68:	4ba3      	ldr	r3, [pc, #652]	; (800ecf8 <Calculate_Tc+0x308>)
 800ea6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea6e:	2600      	movs	r6, #0
 800ea70:	e9c3 0100 	strd	r0, r1, [r3]
 800ea74:	4ba1      	ldr	r3, [pc, #644]	; (800ecfc <Calculate_Tc+0x30c>)
 800ea76:	9304      	str	r3, [sp, #16]
	uint8_t	 i_min1 = 0, i_min2 = 0;
 800ea78:	4635      	mov	r5, r6
 800ea7a:	4634      	mov	r4, r6
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800ea7c:	eeb0 8a68 	vmov.f32	s16, s17
 800ea80:	46d3      	mov	fp, sl
 800ea82:	b2f3      	uxtb	r3, r6
 800ea84:	9307      	str	r3, [sp, #28]
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800ea86:	9b04      	ldr	r3, [sp, #16]
 800ea88:	ecf3 7a01 	vldmia	r3!, {s15}
 800ea8c:	9304      	str	r3, [sp, #16]
 800ea8e:	4b9c      	ldr	r3, [pc, #624]	; (800ed00 <Calculate_Tc+0x310>)
 800ea90:	edcd 7a05 	vstr	s15, [sp, #20]
 800ea94:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800ea98:	ecf7 7a01 	vldmia	r7!, {s15}
 800ea9c:	edcd 7a06 	vstr	s15, [sp, #24]
 800eaa0:	ee07 0a90 	vmov	s15, r0
 800eaa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaa8:	ee17 0a90 	vmov	r0, s15
 800eaac:	f7f1 fd64 	bl	8000578 <__aeabi_f2d>
 800eab0:	a381      	add	r3, pc, #516	; (adr r3, 800ecb8 <Calculate_Tc+0x2c8>)
 800eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab6:	f7f1 fedd 	bl	8000874 <__aeabi_ddiv>
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eac2:	f7f1 fbf9 	bl	80002b8 <__aeabi_dsub>
 800eac6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eaca:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 800eace:	ee07 0a90 	vmov	s15, r0
 800ead2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ead6:	3601      	adds	r6, #1
 800ead8:	ee17 0a90 	vmov	r0, s15
 800eadc:	f7f1 fd4c 	bl	8000578 <__aeabi_f2d>
 800eae0:	a375      	add	r3, pc, #468	; (adr r3, 800ecb8 <Calculate_Tc+0x2c8>)
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	f7f1 fec5 	bl	8000874 <__aeabi_ddiv>
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eaf2:	f7f1 fbe1 	bl	80002b8 <__aeabi_dsub>
 800eaf6:	4680      	mov	r8, r0
 800eaf8:	9805      	ldr	r0, [sp, #20]
 800eafa:	4689      	mov	r9, r1
 800eafc:	f7f1 fd3c 	bl	8000578 <__aeabi_f2d>
 800eb00:	4602      	mov	r2, r0
 800eb02:	460b      	mov	r3, r1
 800eb04:	4640      	mov	r0, r8
 800eb06:	4649      	mov	r1, r9
 800eb08:	f7f1 fd8a 	bl	8000620 <__aeabi_dmul>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb14:	f7f1 fbd0 	bl	80002b8 <__aeabi_dsub>
 800eb18:	4680      	mov	r8, r0
 800eb1a:	9806      	ldr	r0, [sp, #24]
 800eb1c:	4689      	mov	r9, r1
 800eb1e:	f7f1 fd2b 	bl	8000578 <__aeabi_f2d>
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	4640      	mov	r0, r8
 800eb28:	4649      	mov	r1, r9
 800eb2a:	f7f1 fea3 	bl	8000874 <__aeabi_ddiv>
 800eb2e:	f7f2 f86f 	bl	8000c10 <__aeabi_d2f>
 800eb32:	ee07 0a10 	vmov	s14, r0
		if (fabs(dmin1) > fabs(dline)) {
 800eb36:	eef0 7ac8 	vabs.f32	s15, s16
 800eb3a:	eef0 6ac7 	vabs.f32	s13, s14
 800eb3e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800eb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb46:	bfc1      	itttt	gt
 800eb48:	4625      	movgt	r5, r4
 800eb4a:	eef0 8a48 	vmovgt.f32	s17, s16
 800eb4e:	9c07      	ldrgt	r4, [sp, #28]
				dmin2 = dmin1; 
				dmin1 = dline;
 800eb50:	eeb0 8a47 	vmovgt.f32	s16, s14
	for(uint8_t i = 0; i < 31; i++)
 800eb54:	2e1f      	cmp	r6, #31
 800eb56:	d194      	bne.n	800ea82 <Calculate_Tc+0x92>
				i_min2 = i_min1;
				i_min1 = i;
			}
	}
	
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800eb58:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800eb5c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800ed00 <Calculate_Tc+0x310>
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800eb60:	f7f1 fcf8 	bl	8000554 <__aeabi_i2d>
 800eb64:	a354      	add	r3, pc, #336	; (adr r3, 800ecb8 <Calculate_Tc+0x2c8>)
 800eb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6a:	f7f1 fe83 	bl	8000874 <__aeabi_ddiv>
 800eb6e:	4606      	mov	r6, r0
 800eb70:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800eb74:	460f      	mov	r7, r1
 800eb76:	f7f1 fced 	bl	8000554 <__aeabi_i2d>
 800eb7a:	a34f      	add	r3, pc, #316	; (adr r3, 800ecb8 <Calculate_Tc+0x2c8>)
 800eb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb80:	f7f1 fe78 	bl	8000874 <__aeabi_ddiv>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4630      	mov	r0, r6
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	f7f1 fb96 	bl	80002bc <__adddf3>
 800eb90:	2200      	movs	r2, #0
 800eb92:	4b5c      	ldr	r3, [pc, #368]	; (800ed04 <Calculate_Tc+0x314>)
 800eb94:	f7f1 fd44 	bl	8000620 <__aeabi_dmul>
 800eb98:	4b5b      	ldr	r3, [pc, #364]	; (800ed08 <Calculate_Tc+0x318>)
 800eb9a:	4680      	mov	r8, r0
 800eb9c:	4689      	mov	r9, r1
 800eb9e:	e9c3 8900 	strd	r8, r9, [r3]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800eba2:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800eba6:	f7f1 fcd5 	bl	8000554 <__aeabi_i2d>
 800ebaa:	a343      	add	r3, pc, #268	; (adr r3, 800ecb8 <Calculate_Tc+0x2c8>)
 800ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb0:	f7f1 fe60 	bl	8000874 <__aeabi_ddiv>
 800ebb4:	4606      	mov	r6, r0
 800ebb6:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 800ebba:	460f      	mov	r7, r1
 800ebbc:	f7f1 fcca 	bl	8000554 <__aeabi_i2d>
 800ebc0:	a33d      	add	r3, pc, #244	; (adr r3, 800ecb8 <Calculate_Tc+0x2c8>)
 800ebc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc6:	f7f1 fe55 	bl	8000874 <__aeabi_ddiv>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	460b      	mov	r3, r1
 800ebce:	4630      	mov	r0, r6
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	f7f1 fb73 	bl	80002bc <__adddf3>
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	4b4a      	ldr	r3, [pc, #296]	; (800ed04 <Calculate_Tc+0x314>)
 800ebda:	f7f1 fd21 	bl	8000620 <__aeabi_dmul>
 800ebde:	4b4b      	ldr	r3, [pc, #300]	; (800ed0c <Calculate_Tc+0x31c>)
 800ebe0:	4606      	mov	r6, r0
 800ebe2:	460f      	mov	r7, r1
 800ebe4:	e9c3 6700 	strd	r6, r7, [r3]
	
	deltaC = sqrt((pow((u_dop - up), 2)+ pow((v_dop - vp), 2)));
 800ebe8:	4640      	mov	r0, r8
 800ebea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebee:	4649      	mov	r1, r9
 800ebf0:	f7f1 fb62 	bl	80002b8 <__aeabi_dsub>
 800ebf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebf8:	4680      	mov	r8, r0
 800ebfa:	4689      	mov	r9, r1
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	4639      	mov	r1, r7
 800ec00:	f7f1 fb5a 	bl	80002b8 <__aeabi_dsub>
 800ec04:	4642      	mov	r2, r8
 800ec06:	4606      	mov	r6, r0
 800ec08:	460f      	mov	r7, r1
 800ec0a:	464b      	mov	r3, r9
 800ec0c:	4640      	mov	r0, r8
 800ec0e:	4649      	mov	r1, r9
 800ec10:	f7f1 fd06 	bl	8000620 <__aeabi_dmul>
 800ec14:	4632      	mov	r2, r6
 800ec16:	4680      	mov	r8, r0
 800ec18:	4689      	mov	r9, r1
 800ec1a:	463b      	mov	r3, r7
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	4639      	mov	r1, r7
 800ec20:	f7f1 fcfe 	bl	8000620 <__aeabi_dmul>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4640      	mov	r0, r8
 800ec2a:	4649      	mov	r1, r9
 800ec2c:	f7f1 fb46 	bl	80002bc <__adddf3>
 800ec30:	ec41 0b10 	vmov	d0, r0, r1
 800ec34:	f017 f810 	bl	8025c58 <sqrt>
 800ec38:	4b35      	ldr	r3, [pc, #212]	; (800ed10 <Calculate_Tc+0x320>)
 800ec3a:	ec51 0b10 	vmov	r0, r1, d0
 800ec3e:	ed83 0b00 	vstr	d0, [r3]
	
	if(deltaC > 0.05)
 800ec42:	a31f      	add	r3, pc, #124	; (adr r3, 800ecc0 <Calculate_Tc+0x2d0>)
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	f7f1 ff7a 	bl	8000b40 <__aeabi_dcmpgt>
 800ec4c:	bb78      	cbnz	r0, 800ecae <Calculate_Tc+0x2be>
	{
		return 0xFFFF;
	}else
	{
		return result_tc = fabs(1000000./(Tc_tabl[i_min1]+dmin1*((Tc_tabl[i_min2]-Tc_tabl[i_min1])/(dmin1-dmin2))));
 800ec4e:	4b31      	ldr	r3, [pc, #196]	; (800ed14 <Calculate_Tc+0x324>)
 800ec50:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800ec54:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800ec58:	ee07 2a90 	vmov	s15, r2
 800ec5c:	1a9b      	subs	r3, r3, r2
 800ec5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ec62:	ee07 3a90 	vmov	s15, r3
 800ec66:	ee78 8a68 	vsub.f32	s17, s16, s17
 800ec6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec6e:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800ec72:	eea8 7a26 	vfma.f32	s14, s16, s13
 800ec76:	ee17 0a10 	vmov	r0, s14
 800ec7a:	f7f1 fc7d 	bl	8000578 <__aeabi_f2d>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	460b      	mov	r3, r1
 800ec82:	a111      	add	r1, pc, #68	; (adr r1, 800ecc8 <Calculate_Tc+0x2d8>)
 800ec84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec88:	f7f1 fdf4 	bl	8000874 <__aeabi_ddiv>
 800ec8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec90:	4921      	ldr	r1, [pc, #132]	; (800ed18 <Calculate_Tc+0x328>)
 800ec92:	4602      	mov	r2, r0
 800ec94:	e9c1 2300 	strd	r2, r3, [r1]
 800ec98:	4610      	mov	r0, r2
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	f7f1 ffb8 	bl	8000c10 <__aeabi_d2f>
	}
}
 800eca0:	ee00 0a10 	vmov	s0, r0
 800eca4:	b00b      	add	sp, #44	; 0x2c
 800eca6:	ecbd 8b02 	vpop	{d8}
 800ecaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0xFFFF;
 800ecae:	481b      	ldr	r0, [pc, #108]	; (800ed1c <Calculate_Tc+0x32c>)
 800ecb0:	e7f6      	b.n	800eca0 <Calculate_Tc+0x2b0>
 800ecb2:	bf00      	nop
 800ecb4:	f3af 8000 	nop.w
 800ecb8:	00000000 	.word	0x00000000
 800ecbc:	40f86a00 	.word	0x40f86a00
 800ecc0:	9999999a 	.word	0x9999999a
 800ecc4:	3fa99999 	.word	0x3fa99999
 800ecc8:	00000000 	.word	0x00000000
 800eccc:	412e8480 	.word	0x412e8480
 800ecd0:	20088db8 	.word	0x20088db8
 800ecd4:	2004e1e8 	.word	0x2004e1e8
 800ecd8:	20085db8 	.word	0x20085db8
 800ecdc:	2008adc6 	.word	0x2008adc6
 800ece0:	447a0000 	.word	0x447a0000
 800ece4:	20005228 	.word	0x20005228
 800ece8:	40100000 	.word	0x40100000
 800ecec:	080274f8 	.word	0x080274f8
 800ecf0:	20005238 	.word	0x20005238
 800ecf4:	40180000 	.word	0x40180000
 800ecf8:	20005248 	.word	0x20005248
 800ecfc:	0802747c 	.word	0x0802747c
 800ed00:	080275b2 	.word	0x080275b2
 800ed04:	3fe00000 	.word	0x3fe00000
 800ed08:	20005230 	.word	0x20005230
 800ed0c:	20005240 	.word	0x20005240
 800ed10:	20005220 	.word	0x20005220
 800ed14:	08027388 	.word	0x08027388
 800ed18:	2008c308 	.word	0x2008c308
 800ed1c:	477fff00 	.word	0x477fff00
 800ed20:	08027574 	.word	0x08027574
 800ed24:	00000000 	.word	0x00000000

0800ed28 <Calculate_Lab>:

void Calculate_Lab(uint16_t colorimetry_XYZ_calculate[], uint8_t CIE_Type, uint8_t Source_Type)
{
 800ed28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float Xref, Yref = 100, Zref;
	uint8_t i;
	double factor_x = 0, factor_y = 0, factor_z = 0, fx = 0, fy = 0, fz = 0;
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800ed2c:	2a01      	cmp	r2, #1
{
 800ed2e:	ed2d 8b02 	vpush	{d8}
 800ed32:	4606      	mov	r6, r0
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800ed34:	f000 80b9 	beq.w	800eeaa <Calculate_Lab+0x182>
 800ed38:	2a02      	cmp	r2, #2
 800ed3a:	f000 80b8 	beq.w	800eeae <Calculate_Lab+0x186>
 800ed3e:	2a04      	cmp	r2, #4
 800ed40:	f000 80b7 	beq.w	800eeb2 <Calculate_Lab+0x18a>
 800ed44:	2a08      	cmp	r2, #8
 800ed46:	f000 80b6 	beq.w	800eeb6 <Calculate_Lab+0x18e>
 800ed4a:	2a10      	cmp	r2, #16
 800ed4c:	f000 80b5 	beq.w	800eeba <Calculate_Lab+0x192>
 800ed50:	2a20      	cmp	r2, #32
 800ed52:	bf14      	ite	ne
 800ed54:	2400      	movne	r4, #0
 800ed56:	2405      	moveq	r4, #5
	
	if (CIE_Type == 0x01) //check CIE 1931
 800ed58:	2901      	cmp	r1, #1
 800ed5a:	f040 80b0 	bne.w	800eebe <Calculate_Lab+0x196>
	{
		Xref = Xref_CIE1931[i]/100.0;
 800ed5e:	4b82      	ldr	r3, [pc, #520]	; (800ef68 <Calculate_Lab+0x240>)
 800ed60:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800ed64:	f7f1 fbf6 	bl	8000554 <__aeabi_i2d>
 800ed68:	4b80      	ldr	r3, [pc, #512]	; (800ef6c <Calculate_Lab+0x244>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f7f1 fd82 	bl	8000874 <__aeabi_ddiv>
 800ed70:	f7f1 ff4e 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1931[i]/100.0;
 800ed74:	4b7e      	ldr	r3, [pc, #504]	; (800ef70 <Calculate_Lab+0x248>)
		Xref = Xref_CIE1931[i]/100.0;
 800ed76:	ee08 0a90 	vmov	s17, r0
	
	} else if(CIE_Type == 0x00) ////check CIE 1964
	{
		Xref = Xref_CIE1964[i]/100.0;
		Zref = Zref_CIE1964[i]/100.0;
 800ed7a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800ed7e:	f7f1 fbe9 	bl	8000554 <__aeabi_i2d>
 800ed82:	2200      	movs	r2, #0
 800ed84:	4b79      	ldr	r3, [pc, #484]	; (800ef6c <Calculate_Lab+0x244>)
 800ed86:	f7f1 fd75 	bl	8000874 <__aeabi_ddiv>
 800ed8a:	f7f1 ff41 	bl	8000c10 <__aeabi_d2f>
 800ed8e:	ee08 0a10 	vmov	s16, r0
	}
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800ed92:	8833      	ldrh	r3, [r6, #0]
 800ed94:	ee07 3a90 	vmov	s15, r3
 800ed98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed9c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800eda0:	ee17 0a10 	vmov	r0, s14
 800eda4:	f7f1 fbe8 	bl	8000578 <__aeabi_f2d>
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800eda8:	8873      	ldrh	r3, [r6, #2]
 800edaa:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800ef74 <Calculate_Lab+0x24c>
 800edae:	ee07 3a90 	vmov	s15, r3
 800edb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800edb6:	4680      	mov	r8, r0
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800edb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800edbc:	4689      	mov	r9, r1
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800edbe:	ee16 0a90 	vmov	r0, s13
 800edc2:	f7f1 fbd9 	bl	8000578 <__aeabi_f2d>
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800edc6:	88b3      	ldrh	r3, [r6, #4]
 800edc8:	ee07 3a90 	vmov	s15, r3
 800edcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800edd0:	4604      	mov	r4, r0
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800edd2:	ee87 7a88 	vdiv.f32	s14, s15, s16
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800edd6:	460d      	mov	r5, r1
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800edd8:	ee17 0a10 	vmov	r0, s14
 800eddc:	f7f1 fbcc 	bl	8000578 <__aeabi_f2d>
	
		if(factor_x > 0.00885645)
 800ede0:	a35b      	add	r3, pc, #364	; (adr r3, 800ef50 <Calculate_Lab+0x228>)
 800ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800ede6:	4606      	mov	r6, r0
 800ede8:	460f      	mov	r7, r1
		if(factor_x > 0.00885645)
 800edea:	4640      	mov	r0, r8
 800edec:	4649      	mov	r1, r9
 800edee:	f7f1 fea7 	bl	8000b40 <__aeabi_dcmpgt>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d075      	beq.n	800eee2 <Calculate_Lab+0x1ba>
	{
		fx = pow(factor_x, 1./3.);
 800edf6:	ec49 8b10 	vmov	d0, r8, r9
 800edfa:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800ef58 <Calculate_Lab+0x230>
 800edfe:	f016 fdb3 	bl	8025968 <pow>
 800ee02:	ec59 8b10 	vmov	r8, r9, d0
	} else 
	{
		fx = (903.3*factor_x + 16.) / 116.;
	}
	
		if(factor_y > 0.00885645)
 800ee06:	a352      	add	r3, pc, #328	; (adr r3, 800ef50 <Calculate_Lab+0x228>)
 800ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	4629      	mov	r1, r5
 800ee10:	f7f1 fe96 	bl	8000b40 <__aeabi_dcmpgt>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d076      	beq.n	800ef06 <Calculate_Lab+0x1de>
	{
		fy = pow(factor_y, 1./3.);
 800ee18:	ec45 4b10 	vmov	d0, r4, r5
 800ee1c:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 800ef58 <Calculate_Lab+0x230>
 800ee20:	f016 fda2 	bl	8025968 <pow>
 800ee24:	ec55 4b10 	vmov	r4, r5, d0
	} else 
	{
		fy = (903.3*factor_y + 16.) / 116.;
	}
	
		if(factor_z > 0.00885645)
 800ee28:	a349      	add	r3, pc, #292	; (adr r3, 800ef50 <Calculate_Lab+0x228>)
 800ee2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2e:	4630      	mov	r0, r6
 800ee30:	4639      	mov	r1, r7
 800ee32:	f7f1 fe85 	bl	8000b40 <__aeabi_dcmpgt>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d077      	beq.n	800ef2a <Calculate_Lab+0x202>
	{
		fz = pow(factor_z, 1./3.);
 800ee3a:	ec47 6b10 	vmov	d0, r6, r7
 800ee3e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 800ef58 <Calculate_Lab+0x230>
 800ee42:	f016 fd91 	bl	8025968 <pow>
 800ee46:	ec57 6b10 	vmov	r6, r7, d0
	} else 
	{
		fz = (903.3*factor_z + 16.) / 116.;
	}
	
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	4b4a      	ldr	r3, [pc, #296]	; (800ef78 <Calculate_Lab+0x250>)
 800ee4e:	f8df a140 	ldr.w	sl, [pc, #320]	; 800ef90 <Calculate_Lab+0x268>
 800ee52:	4620      	mov	r0, r4
 800ee54:	4629      	mov	r1, r5
 800ee56:	f7f1 fbe3 	bl	8000620 <__aeabi_dmul>
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	4b47      	ldr	r3, [pc, #284]	; (800ef7c <Calculate_Lab+0x254>)
 800ee5e:	f7f1 fa2b 	bl	80002b8 <__aeabi_dsub>
 800ee62:	f7f1 fe8d 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800ee66:	4622      	mov	r2, r4
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800ee68:	f8aa 0000 	strh.w	r0, [sl]
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800ee6c:	462b      	mov	r3, r5
 800ee6e:	4640      	mov	r0, r8
 800ee70:	4649      	mov	r1, r9
 800ee72:	f7f1 fa21 	bl	80002b8 <__aeabi_dsub>
 800ee76:	2200      	movs	r2, #0
 800ee78:	4b41      	ldr	r3, [pc, #260]	; (800ef80 <Calculate_Lab+0x258>)
 800ee7a:	f7f1 fbd1 	bl	8000620 <__aeabi_dmul>
 800ee7e:	f7f1 fe7f 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800ee82:	4632      	mov	r2, r6
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800ee84:	f8aa 0002 	strh.w	r0, [sl, #2]
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800ee88:	463b      	mov	r3, r7
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	4629      	mov	r1, r5
 800ee8e:	f7f1 fa13 	bl	80002b8 <__aeabi_dsub>
 800ee92:	2200      	movs	r2, #0
 800ee94:	4b3b      	ldr	r3, [pc, #236]	; (800ef84 <Calculate_Lab+0x25c>)
 800ee96:	f7f1 fbc3 	bl	8000620 <__aeabi_dmul>
 800ee9a:	f7f1 fe71 	bl	8000b80 <__aeabi_d2iz>
	
}
 800ee9e:	ecbd 8b02 	vpop	{d8}
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800eea2:	f8aa 0004 	strh.w	r0, [sl, #4]
}
 800eea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800eeaa:	2400      	movs	r4, #0
 800eeac:	e754      	b.n	800ed58 <Calculate_Lab+0x30>
 800eeae:	2401      	movs	r4, #1
 800eeb0:	e752      	b.n	800ed58 <Calculate_Lab+0x30>
 800eeb2:	2402      	movs	r4, #2
 800eeb4:	e750      	b.n	800ed58 <Calculate_Lab+0x30>
 800eeb6:	2403      	movs	r4, #3
 800eeb8:	e74e      	b.n	800ed58 <Calculate_Lab+0x30>
 800eeba:	2404      	movs	r4, #4
 800eebc:	e74c      	b.n	800ed58 <Calculate_Lab+0x30>
	} else if(CIE_Type == 0x00) ////check CIE 1964
 800eebe:	2900      	cmp	r1, #0
 800eec0:	f47f af67 	bne.w	800ed92 <Calculate_Lab+0x6a>
		Xref = Xref_CIE1964[i]/100.0;
 800eec4:	4b30      	ldr	r3, [pc, #192]	; (800ef88 <Calculate_Lab+0x260>)
 800eec6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800eeca:	f7f1 fb43 	bl	8000554 <__aeabi_i2d>
 800eece:	4b27      	ldr	r3, [pc, #156]	; (800ef6c <Calculate_Lab+0x244>)
 800eed0:	2200      	movs	r2, #0
 800eed2:	f7f1 fccf 	bl	8000874 <__aeabi_ddiv>
 800eed6:	f7f1 fe9b 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1964[i]/100.0;
 800eeda:	4b2c      	ldr	r3, [pc, #176]	; (800ef8c <Calculate_Lab+0x264>)
		Xref = Xref_CIE1964[i]/100.0;
 800eedc:	ee08 0a90 	vmov	s17, r0
 800eee0:	e74b      	b.n	800ed7a <Calculate_Lab+0x52>
		fx = (903.3*factor_x + 16.) / 116.;
 800eee2:	a31f      	add	r3, pc, #124	; (adr r3, 800ef60 <Calculate_Lab+0x238>)
 800eee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee8:	4640      	mov	r0, r8
 800eeea:	4649      	mov	r1, r9
 800eeec:	f7f1 fb98 	bl	8000620 <__aeabi_dmul>
 800eef0:	2200      	movs	r2, #0
 800eef2:	4b22      	ldr	r3, [pc, #136]	; (800ef7c <Calculate_Lab+0x254>)
 800eef4:	f7f1 f9e2 	bl	80002bc <__adddf3>
 800eef8:	2200      	movs	r2, #0
 800eefa:	4b1f      	ldr	r3, [pc, #124]	; (800ef78 <Calculate_Lab+0x250>)
 800eefc:	f7f1 fcba 	bl	8000874 <__aeabi_ddiv>
 800ef00:	4680      	mov	r8, r0
 800ef02:	4689      	mov	r9, r1
 800ef04:	e77f      	b.n	800ee06 <Calculate_Lab+0xde>
		fy = (903.3*factor_y + 16.) / 116.;
 800ef06:	a316      	add	r3, pc, #88	; (adr r3, 800ef60 <Calculate_Lab+0x238>)
 800ef08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	4629      	mov	r1, r5
 800ef10:	f7f1 fb86 	bl	8000620 <__aeabi_dmul>
 800ef14:	2200      	movs	r2, #0
 800ef16:	4b19      	ldr	r3, [pc, #100]	; (800ef7c <Calculate_Lab+0x254>)
 800ef18:	f7f1 f9d0 	bl	80002bc <__adddf3>
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	4b16      	ldr	r3, [pc, #88]	; (800ef78 <Calculate_Lab+0x250>)
 800ef20:	f7f1 fca8 	bl	8000874 <__aeabi_ddiv>
 800ef24:	4604      	mov	r4, r0
 800ef26:	460d      	mov	r5, r1
 800ef28:	e77e      	b.n	800ee28 <Calculate_Lab+0x100>
		fz = (903.3*factor_z + 16.) / 116.;
 800ef2a:	a30d      	add	r3, pc, #52	; (adr r3, 800ef60 <Calculate_Lab+0x238>)
 800ef2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef30:	4630      	mov	r0, r6
 800ef32:	4639      	mov	r1, r7
 800ef34:	f7f1 fb74 	bl	8000620 <__aeabi_dmul>
 800ef38:	2200      	movs	r2, #0
 800ef3a:	4b10      	ldr	r3, [pc, #64]	; (800ef7c <Calculate_Lab+0x254>)
 800ef3c:	f7f1 f9be 	bl	80002bc <__adddf3>
 800ef40:	2200      	movs	r2, #0
 800ef42:	4b0d      	ldr	r3, [pc, #52]	; (800ef78 <Calculate_Lab+0x250>)
 800ef44:	f7f1 fc96 	bl	8000874 <__aeabi_ddiv>
 800ef48:	4606      	mov	r6, r0
 800ef4a:	460f      	mov	r7, r1
 800ef4c:	e77d      	b.n	800ee4a <Calculate_Lab+0x122>
 800ef4e:	bf00      	nop
 800ef50:	98de88b7 	.word	0x98de88b7
 800ef54:	3f822354 	.word	0x3f822354
 800ef58:	55555555 	.word	0x55555555
 800ef5c:	3fd55555 	.word	0x3fd55555
 800ef60:	66666666 	.word	0x66666666
 800ef64:	408c3a66 	.word	0x408c3a66
 800ef68:	080273c6 	.word	0x080273c6
 800ef6c:	40590000 	.word	0x40590000
 800ef70:	080273de 	.word	0x080273de
 800ef74:	42c80000 	.word	0x42c80000
 800ef78:	405d0000 	.word	0x405d0000
 800ef7c:	40300000 	.word	0x40300000
 800ef80:	407f4000 	.word	0x407f4000
 800ef84:	40690000 	.word	0x40690000
 800ef88:	080273d2 	.word	0x080273d2
 800ef8c:	080273ea 	.word	0x080273ea
 800ef90:	2008adc0 	.word	0x2008adc0

0800ef94 <Calculate_Lambda_Dominant>:
void Calculate_Lambda_Dominant(float R_data[], uint8_t CIE_Type)
{	
	float Px, Py, x1 = 0.3333, y1 = 0.3333, x2, y2, divider;
	int8_t triangle_p1, triangle_p2, triangle_p3, triangle_out, ld;
	
	x2 = colorimetry_xy1931[0];
 800ef94:	4b75      	ldr	r3, [pc, #468]	; (800f16c <Calculate_Lambda_Dominant+0x1d8>)
	y2 = colorimetry_xy1931[1];
	
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ef96:	eddf 7a76 	vldr	s15, [pc, #472]	; 800f170 <Calculate_Lambda_Dominant+0x1dc>
	y2 = colorimetry_xy1931[1];
 800ef9a:	ed93 6a01 	vldr	s12, [r3, #4]
	x2 = colorimetry_xy1931[0];
 800ef9e:	edd3 5a00 	vldr	s11, [r3]
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800efa2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800f174 <Calculate_Lambda_Dominant+0x1e0>
 800efa6:	eddf 6a74 	vldr	s13, [pc, #464]	; 800f178 <Calculate_Lambda_Dominant+0x1e4>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800efaa:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800f17c <Calculate_Lambda_Dominant+0x1e8>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800efae:	ee77 1ac6 	vsub.f32	s3, s15, s12
 800efb2:	ee37 2ae5 	vsub.f32	s4, s15, s11
 800efb6:	ee27 7a61 	vnmul.f32	s14, s14, s3
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800efba:	ee35 5a65 	vsub.f32	s10, s10, s11
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800efbe:	eea2 7a26 	vfma.f32	s14, s4, s13
{	
 800efc2:	b5f0      	push	{r4, r5, r6, r7, lr}
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800efc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f180 <Calculate_Lambda_Dominant+0x1ec>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800efc8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800efcc:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800efd0:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800f184 <Calculate_Lambda_Dominant+0x1f0>
 800efd4:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 800efd8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800f188 <Calculate_Lambda_Dominant+0x1f4>
 800efdc:	eee5 6a07 	vfma.f32	s13, s10, s14
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800efe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800efe4:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800f18c <Calculate_Lambda_Dominant+0x1f8>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800efe8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800efec:	ee77 6a46 	vsub.f32	s13, s14, s12
 800eff0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f190 <Calculate_Lambda_Dominant+0x1fc>
 800eff4:	ee35 5a65 	vsub.f32	s10, s10, s11
 800eff8:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800effc:	eddf 6a65 	vldr	s13, [pc, #404]	; 800f194 <Calculate_Lambda_Dominant+0x200>
 800f000:	eea5 7a26 	vfma.f32	s14, s10, s13
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800f004:	bfcc      	ite	gt
 800f006:	2101      	movgt	r1, #1
 800f008:	f04f 31ff 	movle.w	r1, #4294967295
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800f00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800f010:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800f014:	bfcc      	ite	gt
 800f016:	2201      	movgt	r2, #1
 800f018:	f04f 32ff 	movle.w	r2, #4294967295
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800f01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f020:	bfcc      	ite	gt
 800f022:	2301      	movgt	r3, #1
 800f024:	f04f 33ff 	movle.w	r3, #4294967295
		
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800f028:	4291      	cmp	r1, r2
 800f02a:	f040 8093 	bne.w	800f154 <Calculate_Lambda_Dominant+0x1c0>
 800f02e:	4299      	cmp	r1, r3
 800f030:	bf14      	ite	ne
 800f032:	2101      	movne	r1, #1
 800f034:	f04f 31ff 	moveq.w	r1, #4294967295
	
	for(uint8_t i = 0; i < 65; i++)
	{
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f038:	ee67 3ae5 	vnmul.f32	s7, s15, s11
 800f03c:	4856      	ldr	r0, [pc, #344]	; (800f198 <Calculate_Lambda_Dominant+0x204>)
 800f03e:	4a57      	ldr	r2, [pc, #348]	; (800f19c <Calculate_Lambda_Dominant+0x208>)
 800f040:	8804      	ldrh	r4, [r0, #0]
 800f042:	4e57      	ldr	r6, [pc, #348]	; (800f1a0 <Calculate_Lambda_Dominant+0x20c>)
 800f044:	4d57      	ldr	r5, [pc, #348]	; (800f1a4 <Calculate_Lambda_Dominant+0x210>)
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
		
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
		{
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800f046:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800f170 <Calculate_Lambda_Dominant+0x1dc>
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f04a:	eee6 3a27 	vfma.f32	s7, s12, s15
 800f04e:	f102 0782 	add.w	r7, r2, #130	; 0x82
 800f052:	2300      	movs	r3, #0
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f054:	eeb1 0a61 	vneg.f32	s0, s3
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800f058:	ed95 6a00 	vldr	s12, [r5]
 800f05c:	edd6 6a00 	vldr	s13, [r6]
 800f060:	ed95 4a01 	vldr	s8, [r5, #4]
 800f064:	ed96 5a01 	vldr	s10, [r6, #4]
 800f068:	3504      	adds	r5, #4
 800f06a:	3604      	adds	r6, #4
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f06c:	ee64 2a66 	vnmul.f32	s5, s8, s13
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800f070:	ee36 7a44 	vsub.f32	s14, s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f074:	eee5 2a06 	vfma.f32	s5, s10, s12
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800f078:	ee27 3a61 	vnmul.f32	s6, s14, s3
 800f07c:	ee76 4ac5 	vsub.f32	s9, s13, s10
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f080:	ee22 1ac2 	vnmul.f32	s2, s5, s4
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800f084:	eea2 3a24 	vfma.f32	s6, s4, s9
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f088:	eea7 1a23 	vfma.f32	s2, s14, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f08c:	eeb4 6ac4 	vcmpe.f32	s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f090:	ee81 7a03 	vdiv.f32	s14, s2, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f098:	bf54      	ite	pl
 800f09a:	eeb0 1a44 	vmovpl.f32	s2, s8
 800f09e:	eeb0 1a46 	vmovmi.f32	s2, s12
 800f0a2:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800f0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0aa:	d54d      	bpl.n	800f148 <Calculate_Lambda_Dominant+0x1b4>
 800f0ac:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800f0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b4:	bfd8      	it	le
 800f0b6:	eeb0 6a44 	vmovle.f32	s12, s8
 800f0ba:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800f0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c2:	dd41      	ble.n	800f148 <Calculate_Lambda_Dominant+0x1b4>
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0c4:	ee64 4aa3 	vmul.f32	s9, s9, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f0c8:	eef4 6ac5 	vcmpe.f32	s13, s10
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0cc:	eee0 4a22 	vfma.f32	s9, s0, s5
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800f0d4:	ee84 6a83 	vdiv.f32	s12, s9, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800f0d8:	bf54      	ite	pl
 800f0da:	eeb0 4a45 	vmovpl.f32	s8, s10
 800f0de:	eeb0 4a66 	vmovmi.f32	s8, s13
 800f0e2:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800f0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ea:	d52d      	bpl.n	800f148 <Calculate_Lambda_Dominant+0x1b4>
 800f0ec:	eef4 6ac5 	vcmpe.f32	s13, s10
 800f0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f4:	bfd8      	it	le
 800f0f6:	eef0 6a45 	vmovle.f32	s13, s10
 800f0fa:	eef4 6ac6 	vcmpe.f32	s13, s12
 800f0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f102:	dd21      	ble.n	800f148 <Calculate_Lambda_Dominant+0x1b4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800f104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10c:	bf54      	ite	pl
 800f10e:	eef0 6a60 	vmovpl.f32	s13, s1
 800f112:	eef0 6a47 	vmovmi.f32	s13, s14
 800f116:	eef4 6ae5 	vcmpe.f32	s13, s11
 800f11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11e:	d51b      	bpl.n	800f158 <Calculate_Lambda_Dominant+0x1c4>
 800f120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f128:	bfd8      	it	le
 800f12a:	eeb0 7a60 	vmovle.f32	s14, s1
 800f12e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800f132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f136:	bfcc      	ite	gt
 800f138:	2301      	movgt	r3, #1
 800f13a:	f04f 33ff 	movle.w	r3, #4294967295
			
			if((ld*triangle_out) > 0)
 800f13e:	fb13 f301 	smulbb	r3, r3, r1
 800f142:	2b01      	cmp	r3, #1
 800f144:	d10b      	bne.n	800f15e <Calculate_Lambda_Dominant+0x1ca>
			{
				lambda_d_Measure = lamda_dominant[i+1];
 800f146:	8814      	ldrh	r4, [r2, #0]
 800f148:	3202      	adds	r2, #2
	for(uint8_t i = 0; i < 65; i++)
 800f14a:	4297      	cmp	r7, r2
 800f14c:	d184      	bne.n	800f058 <Calculate_Lambda_Dominant+0xc4>
 800f14e:	b103      	cbz	r3, 800f152 <Calculate_Lambda_Dominant+0x1be>
 800f150:	8004      	strh	r4, [r0, #0]
 800f152:	bdf0      	pop	{r4, r5, r6, r7, pc}
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800f154:	2101      	movs	r1, #1
 800f156:	e76f      	b.n	800f038 <Calculate_Lambda_Dominant+0xa4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800f158:	f04f 33ff 	mov.w	r3, #4294967295
 800f15c:	e7ef      	b.n	800f13e <Calculate_Lambda_Dominant+0x1aa>
			} else {
				lambda_d_Measure = triangle_out < 0 ? 0 : lamda_dominant[i+1];
 800f15e:	1c4b      	adds	r3, r1, #1
 800f160:	bf14      	ite	ne
 800f162:	8814      	ldrhne	r4, [r2, #0]
 800f164:	2400      	moveq	r4, #0
 800f166:	2301      	movs	r3, #1
 800f168:	e7ee      	b.n	800f148 <Calculate_Lambda_Dominant+0x1b4>
 800f16a:	bf00      	nop
 800f16c:	2008ade4 	.word	0x2008ade4
 800f170:	3eaaa64c 	.word	0x3eaaa64c
 800f174:	be1fd4b2 	.word	0xbe1fd4b2
 800f178:	beaaa64c 	.word	0xbeaaa64c
 800f17c:	3e3577e6 	.word	0x3e3577e6
 800f180:	00000000 	.word	0x00000000
 800f184:	3f0eeab2 	.word	0x3f0eeab2
 800f188:	3e876ea8 	.word	0x3e876ea8
 800f18c:	3f3c48ac 	.word	0x3f3c48ac
 800f190:	becdeb0c 	.word	0xbecdeb0c
 800f194:	3d8cde90 	.word	0x3d8cde90
 800f198:	200913ec 	.word	0x200913ec
 800f19c:	080273f8 	.word	0x080273f8
 800f1a0:	080276f8 	.word	0x080276f8
 800f1a4:	080275f0 	.word	0x080275f0

0800f1a8 <Calculate_deltaEab>:

extern int16_t colorimetry_LAB_mem[3];
float result, res1, res2, res3;

int16_t Calculate_deltaEab() {
	if((Measure_Field&CIE_Lab) == 0){
 800f1a8:	4b2c      	ldr	r3, [pc, #176]	; (800f25c <Calculate_deltaEab+0xb4>)
 800f1aa:	881b      	ldrh	r3, [r3, #0]
 800f1ac:	061b      	lsls	r3, r3, #24
int16_t Calculate_deltaEab() {
 800f1ae:	b507      	push	{r0, r1, r2, lr}
	if((Measure_Field&CIE_Lab) == 0){
 800f1b0:	d40a      	bmi.n	800f1c8 <Calculate_deltaEab+0x20>
		Calculate_Lab(Measure_Color_xy == 0x00 ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 800f1b2:	4b2b      	ldr	r3, [pc, #172]	; (800f260 <Calculate_deltaEab+0xb8>)
 800f1b4:	482b      	ldr	r0, [pc, #172]	; (800f264 <Calculate_deltaEab+0xbc>)
 800f1b6:	7819      	ldrb	r1, [r3, #0]
 800f1b8:	4b2b      	ldr	r3, [pc, #172]	; (800f268 <Calculate_deltaEab+0xc0>)
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	4b2b      	ldr	r3, [pc, #172]	; (800f26c <Calculate_deltaEab+0xc4>)
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	bf18      	it	ne
 800f1c2:	4618      	movne	r0, r3
 800f1c4:	f7ff fdb0 	bl	800ed28 <Calculate_Lab>
	}
	res1 = ((float)(colorimetry_LAB[0]) - (float)(colorimetry_LAB_mem[0]));
 800f1c8:	4a29      	ldr	r2, [pc, #164]	; (800f270 <Calculate_deltaEab+0xc8>)
 800f1ca:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f1ce:	ee06 3a90 	vmov	s13, r3
 800f1d2:	4b28      	ldr	r3, [pc, #160]	; (800f274 <Calculate_deltaEab+0xcc>)
 800f1d4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f1d8:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800f1dc:	ee06 1a90 	vmov	s13, r1
 800f1e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f1e4:	4924      	ldr	r1, [pc, #144]	; (800f278 <Calculate_deltaEab+0xd0>)
 800f1e6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f1ea:	edc1 6a00 	vstr	s13, [r1]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f1ee:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f1f2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f1f6:	ee00 1a10 	vmov	s0, r1
 800f1fa:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f1fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f202:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800f206:	ee00 1a10 	vmov	s0, r1
 800f20a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f20e:	491b      	ldr	r1, [pc, #108]	; (800f27c <Calculate_deltaEab+0xd4>)
 800f210:	ee37 0ac0 	vsub.f32	s0, s15, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f214:	ee07 2a90 	vmov	s15, r2
 800f218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f21c:	ee07 3a90 	vmov	s15, r3
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f220:	ed81 0a00 	vstr	s0, [r1]
	Calculate_deltaEab_Done = 0x01;
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f224:	ee20 0a00 	vmul.f32	s0, s0, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f22c:	eea6 0aa6 	vfma.f32	s0, s13, s13
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f230:	4b13      	ldr	r3, [pc, #76]	; (800f280 <Calculate_deltaEab+0xd8>)
 800f232:	ee77 7a67 	vsub.f32	s15, s14, s15
	Calculate_deltaEab_Done = 0x01;
 800f236:	2201      	movs	r2, #1
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f238:	edc3 7a00 	vstr	s15, [r3]
	Calculate_deltaEab_Done = 0x01;
 800f23c:	4b11      	ldr	r3, [pc, #68]	; (800f284 <Calculate_deltaEab+0xdc>)
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f23e:	eea7 0aa7 	vfma.f32	s0, s15, s15
	Calculate_deltaEab_Done = 0x01;
 800f242:	701a      	strb	r2, [r3, #0]
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f244:	f016 fd62 	bl	8025d0c <sqrtf>
 800f248:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f24c:	edcd 7a01 	vstr	s15, [sp, #4]
 800f250:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800f254:	b003      	add	sp, #12
 800f256:	f85d fb04 	ldr.w	pc, [sp], #4
 800f25a:	bf00      	nop
 800f25c:	2000527e 	.word	0x2000527e
 800f260:	2000527c 	.word	0x2000527c
 800f264:	2008adcc 	.word	0x2008adcc
 800f268:	2008c321 	.word	0x2008c321
 800f26c:	2008adc6 	.word	0x2008adc6
 800f270:	2008adc0 	.word	0x2008adc0
 800f274:	2008c8b0 	.word	0x2008c8b0
 800f278:	2008c300 	.word	0x2008c300
 800f27c:	2008c2f8 	.word	0x2008c2f8
 800f280:	2008c310 	.word	0x2008c310
 800f284:	20005219 	.word	0x20005219

0800f288 <Calibration_Load_2byte>:
extern float Unit_nm[7], Spectral_Corection_Buff[1024], Scattering_Light, Exposure_Factor;
extern float Spectral_day[1024], Spectral_night[1024], Spectral_B[1024], Spectral_R[1024];
	
uint16_t buff2_array[4] = {0};
uint16_t Calibration_Load_2byte(uint32_t Address, uint8_t num)
{
 800f288:	b510      	push	{r4, lr}
	uint64_t buff = 0;

	uint16_t byte_array[4] = {0};
	uint8_t i = 0;
	
	i = num > 3 ? (num - 4*(num/4)) : num;
 800f28a:	2903      	cmp	r1, #3
{
 800f28c:	b084      	sub	sp, #16
 800f28e:	460c      	mov	r4, r1
 800f290:	bf88      	it	hi
 800f292:	f001 0403 	andhi.w	r4, r1, #3
	buff = flash_data_read_buff(Address);
 800f296:	f7fd f8dd 	bl	800c454 <flash_data_read_buff>
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800f29a:	ab04      	add	r3, sp, #16
 800f29c:	e963 0104 	strd	r0, r1, [r3, #-16]!
 800f2a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f2a4:	4b0a      	ldr	r3, [pc, #40]	; (800f2d0 <Calibration_Load_2byte+0x48>)
 800f2a6:	e883 0003 	stmia.w	r3, {r0, r1}
	byte_array[0] = buff2_array[1];
	byte_array[1] = buff2_array[0];
	byte_array[2] = buff2_array[3];
	byte_array[3] = buff2_array[2];
	
	return byte_array[i];
 800f2aa:	aa04      	add	r2, sp, #16
	byte_array[0] = buff2_array[1];
 800f2ac:	8858      	ldrh	r0, [r3, #2]
	byte_array[1] = buff2_array[0];
 800f2ae:	8819      	ldrh	r1, [r3, #0]
	byte_array[0] = buff2_array[1];
 800f2b0:	f8ad 0008 	strh.w	r0, [sp, #8]
	return byte_array[i];
 800f2b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
	byte_array[2] = buff2_array[3];
 800f2b8:	88da      	ldrh	r2, [r3, #6]
	byte_array[3] = buff2_array[2];
 800f2ba:	889b      	ldrh	r3, [r3, #4]
	byte_array[1] = buff2_array[0];
 800f2bc:	f8ad 100a 	strh.w	r1, [sp, #10]
	byte_array[2] = buff2_array[3];
 800f2c0:	f8ad 200c 	strh.w	r2, [sp, #12]
	byte_array[3] = buff2_array[2];
 800f2c4:	f8ad 300e 	strh.w	r3, [sp, #14]
}
 800f2c8:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800f2cc:	b004      	add	sp, #16
 800f2ce:	bd10      	pop	{r4, pc}
 800f2d0:	20005258 	.word	0x20005258

0800f2d4 <Calibration_Load_1byte>:
	

	uint8_t byte1[8] = {0};
uint8_t Calibration_Load_1byte(uint32_t Address, uint8_t num)
{
 800f2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t buff = 0;
	uint8_t buff_array[8] = {0};

	uint8_t i = 0;
	
	i = num > 7 ? (num - 8) : num;
 800f2d6:	2907      	cmp	r1, #7
{
 800f2d8:	b085      	sub	sp, #20
 800f2da:	460c      	mov	r4, r1
	i = num > 7 ? (num - 8) : num;
 800f2dc:	bf84      	itt	hi
 800f2de:	f1a1 0408 	subhi.w	r4, r1, #8
 800f2e2:	b2e4      	uxtbhi	r4, r4
	buff = flash_data_read_buff(Address);
 800f2e4:	f7fd f8b6 	bl	800c454 <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f2e8:	e9cd 0100 	strd	r0, r1, [sp]
 800f2ec:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800f2f0:	ab04      	add	r3, sp, #16
 800f2f2:	e903 0003 	stmdb	r3, {r0, r1}
	
	byte1[0] =  buff_array[3];
 800f2f6:	4b0e      	ldr	r3, [pc, #56]	; (800f330 <Calibration_Load_1byte+0x5c>)
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f2f8:	f89d 1008 	ldrb.w	r1, [sp, #8]
	byte1[0] =  buff_array[3];
 800f2fc:	f89d 200b 	ldrb.w	r2, [sp, #11]
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f300:	f89d 000e 	ldrb.w	r0, [sp, #14]
	byte1[1] =  buff_array[2];
	byte1[2] =  buff_array[1];
	byte1[3] =  buff_array[0];
 800f304:	70d9      	strb	r1, [r3, #3]
	byte1[0] =  buff_array[3];
 800f306:	701a      	strb	r2, [r3, #0]
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f308:	f89d 700a 	ldrb.w	r7, [sp, #10]
 800f30c:	f89d 6009 	ldrb.w	r6, [sp, #9]
 800f310:	f89d 500f 	ldrb.w	r5, [sp, #15]
 800f314:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800f318:	f89d 200c 	ldrb.w	r2, [sp, #12]
	byte1[1] =  buff_array[2];
 800f31c:	705f      	strb	r7, [r3, #1]
	byte1[2] =  buff_array[1];
 800f31e:	709e      	strb	r6, [r3, #2]
	byte1[4] =  buff_array[7];
 800f320:	711d      	strb	r5, [r3, #4]
	byte1[5] =  buff_array[6];
 800f322:	7158      	strb	r0, [r3, #5]
	byte1[6] =  buff_array[5];
 800f324:	7199      	strb	r1, [r3, #6]
	byte1[7] =  buff_array[4];
 800f326:	71da      	strb	r2, [r3, #7]
	
	return byte1[i];
}
 800f328:	5d18      	ldrb	r0, [r3, r4]
 800f32a:	b005      	add	sp, #20
 800f32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f32e:	bf00      	nop
 800f330:	2000526c 	.word	0x2000526c

0800f334 <Calibration_Load_float>:


	
float Calibration_Load_float(uint32_t Address)
{
 800f334:	b500      	push	{lr}
 800f336:	b085      	sub	sp, #20
	uint8_t buff_array[8] = {0};
	uint32_t buff_float = 0;
	float res = 0;
	uint64_t buff = 0;
	buff = flash_data_read_buff(Address);
 800f338:	f7fd f88c 	bl	800c454 <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f33c:	e9cd 0100 	strd	r0, r1, [sp]
 800f340:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800f344:	ab04      	add	r3, sp, #16
 800f346:	e903 0003 	stmdb	r3, {r0, r1}
 800f34a:	9b02      	ldr	r3, [sp, #8]
	buff_float = (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
	memcpy(&res, &buff_float, sizeof(uint32_t));
	return res;
 800f34c:	ba1b      	rev	r3, r3
}
 800f34e:	ee00 3a10 	vmov	s0, r3
 800f352:	b005      	add	sp, #20
 800f354:	f85d fb04 	ldr.w	pc, [sp], #4

0800f358 <Calibration_Load_Pack>:
	
void Calibration_Load_Pack(uint32_t Address, uint16_t size, float data[])
{
	uint16_t idx = 0;
	
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f358:	b351      	cbz	r1, 800f3b0 <Calibration_Load_Pack+0x58>
{
 800f35a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f35e:	2400      	movs	r4, #0
 800f360:	f8df a058 	ldr.w	sl, [pc, #88]	; 800f3bc <Calibration_Load_Pack+0x64>
 800f364:	f8df b058 	ldr.w	fp, [pc, #88]	; 800f3c0 <Calibration_Load_Pack+0x68>
 800f368:	4e12      	ldr	r6, [pc, #72]	; (800f3b4 <Calibration_Load_Pack+0x5c>)
 800f36a:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800f36e:	4691      	mov	r9, r2
 800f370:	4607      	mov	r7, r0
 800f372:	4625      	mov	r5, r4
		addr = Address + i;
 800f374:	19e3      	adds	r3, r4, r7
		buff = flash_data_read_buff(Address+i);
 800f376:	4618      	mov	r0, r3
		addr = Address + i;
 800f378:	f8ca 3000 	str.w	r3, [sl]
		buff = flash_data_read_buff(Address+i);
 800f37c:	f7fd f86a 	bl	800c454 <flash_data_read_buff>
 800f380:	e9cb 0100 	strd	r0, r1, [fp]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800f384:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800f388:	e886 0003 	stmia.w	r6, {r0, r1}
 800f38c:	ba00      	rev	r0, r0

		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
 800f38e:	f849 0025 	str.w	r0, [r9, r5, lsl #2]
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f392:	3408      	adds	r4, #8
 800f394:	6873      	ldr	r3, [r6, #4]
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800f396:	4a08      	ldr	r2, [pc, #32]	; (800f3b8 <Calibration_Load_Pack+0x60>)
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800f398:	eb09 0185 	add.w	r1, r9, r5, lsl #2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f39c:	b2a4      	uxth	r4, r4
 800f39e:	ba1b      	rev	r3, r3
		idx+=2;
 800f3a0:	3502      	adds	r5, #2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f3a2:	4544      	cmp	r4, r8
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800f3a4:	6013      	str	r3, [r2, #0]
		idx+=2;
 800f3a6:	b2ad      	uxth	r5, r5
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800f3a8:	604b      	str	r3, [r1, #4]
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f3aa:	dbe3      	blt.n	800f374 <Calibration_Load_Pack+0x1c>
 800f3ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop
 800f3b4:	20005260 	.word	0x20005260
 800f3b8:	20005268 	.word	0x20005268
 800f3bc:	2008c318 	.word	0x2008c318
 800f3c0:	20005250 	.word	0x20005250

0800f3c4 <Calibration_Exposure_Change>:
	}
}


void Calibration_Exposure_Change(uint8_t Exp)
{
 800f3c4:	b538      	push	{r3, r4, r5, lr}
 800f3c6:	4605      	mov	r5, r0
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800f3c8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800f3cc:	f100 6001 	add.w	r0, r0, #135266304	; 0x8100000
 800f3d0:	4629      	mov	r1, r5
 800f3d2:	f600 0028 	addw	r0, r0, #2088	; 0x828
 800f3d6:	f7ff ff7d 	bl	800f2d4 <Calibration_Load_1byte>
 800f3da:	ee07 0a90 	vmov	s15, r0
 800f3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f3e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f3ea:	08a8      	lsrs	r0, r5, #2
 800f3ec:	f100 2001 	add.w	r0, r0, #16777472	; 0x1000100
 800f3f0:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800f3f4:	4b0d      	ldr	r3, [pc, #52]	; (800f42c <Calibration_Exposure_Change+0x68>)
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f3f6:	00c4      	lsls	r4, r0, #3
 800f3f8:	4629      	mov	r1, r5
 800f3fa:	4620      	mov	r0, r4
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800f3fc:	edc3 7a00 	vstr	s15, [r3]
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f400:	f7ff ff42 	bl	800f288 <Calibration_Load_2byte>
 800f404:	4b0a      	ldr	r3, [pc, #40]	; (800f430 <Calibration_Exposure_Change+0x6c>)
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800f406:	4629      	mov	r1, r5
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f408:	8018      	strh	r0, [r3, #0]
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800f40a:	f104 0014 	add.w	r0, r4, #20
 800f40e:	f7ff ff3b 	bl	800f288 <Calibration_Load_2byte>
 800f412:	ee07 0a90 	vmov	s15, r0
 800f416:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800f434 <Calibration_Exposure_Change+0x70>
 800f41a:	4b07      	ldr	r3, [pc, #28]	; (800f438 <Calibration_Exposure_Change+0x74>)
 800f41c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f424:	edc3 7a00 	vstr	s15, [r3]
 800f428:	bd38      	pop	{r3, r4, r5, pc}
 800f42a:	bf00      	nop
 800f42c:	2004d1e4 	.word	0x2004d1e4
 800f430:	200055ca 	.word	0x200055ca
 800f434:	42c80000 	.word	0x42c80000
 800f438:	200055d4 	.word	0x200055d4
 800f43c:	00000000 	.word	0x00000000

0800f440 <Calibration_WaveLenght_Graph>:
}

void Calibration_WaveLenght_Graph()
{
 800f440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i <= 7; i++){
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f444:	a717      	add	r7, pc, #92	; (adr r7, 800f4a4 <Calibration_WaveLenght_Graph+0x64>)
 800f446:	e9d7 6700 	ldrd	r6, r7, [r7]
 800f44a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800f4ac <Calibration_WaveLenght_Graph+0x6c>
 800f44e:	f8df a060 	ldr.w	sl, [pc, #96]	; 800f4b0 <Calibration_WaveLenght_Graph+0x70>
 800f452:	4d13      	ldr	r5, [pc, #76]	; (800f4a0 <Calibration_WaveLenght_Graph+0x60>)
	for (uint8_t i = 0; i <= 7; i++){
 800f454:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800f4b4 <Calibration_WaveLenght_Graph+0x74>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f458:	f04f 0800 	mov.w	r8, #0
{
 800f45c:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800f460:	2100      	movs	r1, #0
 800f462:	4620      	mov	r0, r4
 800f464:	f7ff ff10 	bl	800f288 <Calibration_Load_2byte>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f468:	ee07 0a90 	vmov	s15, r0
 800f46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800f470:	f82a 0f02 	strh.w	r0, [sl, #2]!
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f474:	ee17 0a90 	vmov	r0, s15
 800f478:	f7f1 f87e 	bl	8000578 <__aeabi_f2d>
 800f47c:	4642      	mov	r2, r8
 800f47e:	464b      	mov	r3, r9
 800f480:	f7f1 f9f8 	bl	8000874 <__aeabi_ddiv>
 800f484:	4632      	mov	r2, r6
 800f486:	463b      	mov	r3, r7
 800f488:	f7f0 ff18 	bl	80002bc <__adddf3>
 800f48c:	f7f1 fbc0 	bl	8000c10 <__aeabi_d2f>
 800f490:	f504 7492 	add.w	r4, r4, #292	; 0x124
	for (uint8_t i = 0; i <= 7; i++){
 800f494:	455c      	cmp	r4, fp
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f496:	f845 0b04 	str.w	r0, [r5], #4
	for (uint8_t i = 0; i <= 7; i++){
 800f49a:	d1e1      	bne.n	800f460 <Calibration_WaveLenght_Graph+0x20>
	}
}
 800f49c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4a0:	200055a8 	.word	0x200055a8
 800f4a4:	00000000 	.word	0x00000000
 800f4a8:	4072c000 	.word	0x4072c000
 800f4ac:	40590000 	.word	0x40590000
 800f4b0:	200511ea 	.word	0x200511ea
 800f4b4:	08100920 	.word	0x08100920

0800f4b8 <GUI_OptionMenuRu>:
uint8_t screen_count = 0, screen_count_old = 0, state_Measure_Elements = 0;
sImage Locus;
extern volatile uint8_t TFT_direction;

void GUI_OptionMenuRu()
{	
 800f4b8:	b513      	push	{r0, r1, r4, lr}
	GUI_TextRu_Language(10, 86);
 800f4ba:	2156      	movs	r1, #86	; 0x56
 800f4bc:	200a      	movs	r0, #10
 800f4be:	f00b fb45 	bl	801ab4c <GUI_TextRu_Language>
	GUI_TextRu_Russian(118, 86);
 800f4c2:	2156      	movs	r1, #86	; 0x56
 800f4c4:	2076      	movs	r0, #118	; 0x76
 800f4c6:	f00b fb73 	bl	801abb0 <GUI_TextRu_Russian>
	GUI_Flag_Ru(218, 86);
 800f4ca:	2156      	movs	r1, #86	; 0x56
 800f4cc:	20da      	movs	r0, #218	; 0xda
 800f4ce:	f006 fb4e 	bl	8015b6e <GUI_Flag_Ru>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f4d2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f4d6:	2378      	movs	r3, #120	; 0x78
 800f4d8:	4619      	mov	r1, r3
 800f4da:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f4de:	9400      	str	r4, [sp, #0]
 800f4e0:	200a      	movs	r0, #10
 800f4e2:	f00f fa6d 	bl	801e9c0 <TFT_DrawLine>
	GUI_TextRu_Info(10, 145);
 800f4e6:	2191      	movs	r1, #145	; 0x91
 800f4e8:	200a      	movs	r0, #10
 800f4ea:	f00b fba9 	bl	801ac40 <GUI_TextRu_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800f4ee:	23b7      	movs	r3, #183	; 0xb7
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f4f6:	9400      	str	r4, [sp, #0]
 800f4f8:	200a      	movs	r0, #10
 800f4fa:	f00f fa61 	bl	801e9c0 <TFT_DrawLine>
	
	GUI_TextRu_Mode(10, 209);
 800f4fe:	21d1      	movs	r1, #209	; 0xd1
 800f500:	200a      	movs	r0, #10
 800f502:	f00b fc3f 	bl	801ad84 <GUI_TextRu_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800f506:	4b21      	ldr	r3, [pc, #132]	; (800f58c <GUI_OptionMenuRu+0xd4>)
 800f508:	21ca      	movs	r1, #202	; 0xca
 800f50a:	781a      	ldrb	r2, [r3, #0]
 800f50c:	20b6      	movs	r0, #182	; 0xb6
 800f50e:	f006 faf5 	bl	8015afc <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800f512:	4620      	mov	r0, r4
 800f514:	f00f fd66 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800f518:	2063      	movs	r0, #99	; 0x63
 800f51a:	f00f fd69 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800f51e:	481c      	ldr	r0, [pc, #112]	; (800f590 <GUI_OptionMenuRu+0xd8>)
 800f520:	f00f fd5a 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800f524:	2245      	movs	r2, #69	; 0x45
 800f526:	21d2      	movs	r1, #210	; 0xd2
 800f528:	20e1      	movs	r0, #225	; 0xe1
 800f52a:	f00f fe4b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800f52e:	224c      	movs	r2, #76	; 0x4c
 800f530:	21d2      	movs	r1, #210	; 0xd2
 800f532:	209b      	movs	r0, #155	; 0x9b
 800f534:	f00f fe46 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f538:	23f8      	movs	r3, #248	; 0xf8
 800f53a:	4619      	mov	r1, r3
 800f53c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f540:	9400      	str	r4, [sp, #0]
 800f542:	200a      	movs	r0, #10
 800f544:	f00f fa3c 	bl	801e9c0 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800f548:	f240 1113 	movw	r1, #275	; 0x113
 800f54c:	200a      	movs	r0, #10
 800f54e:	f009 fdf5 	bl	801913c <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800f552:	4b10      	ldr	r3, [pc, #64]	; (800f594 <GUI_OptionMenuRu+0xdc>)
 800f554:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800f558:	781a      	ldrb	r2, [r3, #0]
 800f55a:	20b6      	movs	r0, #182	; 0xb6
 800f55c:	f006 fa74 	bl	8015a48 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800f560:	f240 1113 	movw	r1, #275	; 0x113
 800f564:	20de      	movs	r0, #222	; 0xde
 800f566:	f00a f929 	bl	80197bc <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800f56a:	f240 1113 	movw	r1, #275	; 0x113
 800f56e:	208c      	movs	r0, #140	; 0x8c
 800f570:	f00a f948 	bl	8019804 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f574:	f240 1339 	movw	r3, #313	; 0x139
 800f578:	9400      	str	r4, [sp, #0]
 800f57a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f57e:	4619      	mov	r1, r3
 800f580:	200a      	movs	r0, #10
 800f582:	f00f fa1d 	bl	801e9c0 <TFT_DrawLine>
}
 800f586:	b002      	add	sp, #8
 800f588:	bd10      	pop	{r4, pc}
 800f58a:	bf00      	nop
 800f58c:	20000a48 	.word	0x20000a48
 800f590:	200001b0 	.word	0x200001b0
 800f594:	2008c322 	.word	0x2008c322

0800f598 <GUI_OptionMenuEn>:
void GUI_OptionMenuEn()
{
 800f598:	b513      	push	{r0, r1, r4, lr}
	GUI_TextEn_Language(10, 88);
 800f59a:	2158      	movs	r1, #88	; 0x58
 800f59c:	200a      	movs	r0, #10
 800f59e:	f00a f9d1 	bl	8019944 <GUI_TextEn_Language>
	GUI_TextEn_English(127, 88);
 800f5a2:	2158      	movs	r1, #88	; 0x58
 800f5a4:	207f      	movs	r0, #127	; 0x7f
 800f5a6:	f00a fa1b 	bl	80199e0 <GUI_TextEn_English>
	GUI_Flag_En(218, 86);
 800f5aa:	2156      	movs	r1, #86	; 0x56
 800f5ac:	20da      	movs	r0, #218	; 0xda
 800f5ae:	f006 fb08 	bl	8015bc2 <GUI_Flag_En>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f5b2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f5b6:	2378      	movs	r3, #120	; 0x78
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f5be:	9400      	str	r4, [sp, #0]
 800f5c0:	200a      	movs	r0, #10
 800f5c2:	f00f f9fd 	bl	801e9c0 <TFT_DrawLine>
	GUI_TextEn_Info(10, 147);
 800f5c6:	2193      	movs	r1, #147	; 0x93
 800f5c8:	200a      	movs	r0, #10
 800f5ca:	f00a fa51 	bl	8019a70 <GUI_TextEn_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800f5ce:	23b7      	movs	r3, #183	; 0xb7
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f5d6:	9400      	str	r4, [sp, #0]
 800f5d8:	200a      	movs	r0, #10
 800f5da:	f00f f9f1 	bl	801e9c0 <TFT_DrawLine>
	
	GUI_TextEn_Mode(10, 211);
 800f5de:	21d3      	movs	r1, #211	; 0xd3
 800f5e0:	200a      	movs	r0, #10
 800f5e2:	f00a fd93 	bl	801a10c <GUI_TextEn_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800f5e6:	4b21      	ldr	r3, [pc, #132]	; (800f66c <GUI_OptionMenuEn+0xd4>)
 800f5e8:	21ca      	movs	r1, #202	; 0xca
 800f5ea:	781a      	ldrb	r2, [r3, #0]
 800f5ec:	20b6      	movs	r0, #182	; 0xb6
 800f5ee:	f006 fa85 	bl	8015afc <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f00f fcf6 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800f5f8:	2063      	movs	r0, #99	; 0x63
 800f5fa:	f00f fcf9 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800f5fe:	481c      	ldr	r0, [pc, #112]	; (800f670 <GUI_OptionMenuEn+0xd8>)
 800f600:	f00f fcea 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800f604:	2245      	movs	r2, #69	; 0x45
 800f606:	21d2      	movs	r1, #210	; 0xd2
 800f608:	20e1      	movs	r0, #225	; 0xe1
 800f60a:	f00f fddb 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800f60e:	224c      	movs	r2, #76	; 0x4c
 800f610:	21d2      	movs	r1, #210	; 0xd2
 800f612:	209b      	movs	r0, #155	; 0x9b
 800f614:	f00f fdd6 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f618:	23f8      	movs	r3, #248	; 0xf8
 800f61a:	4619      	mov	r1, r3
 800f61c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f620:	9400      	str	r4, [sp, #0]
 800f622:	200a      	movs	r0, #10
 800f624:	f00f f9cc 	bl	801e9c0 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800f628:	f240 1113 	movw	r1, #275	; 0x113
 800f62c:	200a      	movs	r0, #10
 800f62e:	f009 fd85 	bl	801913c <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800f632:	4b10      	ldr	r3, [pc, #64]	; (800f674 <GUI_OptionMenuEn+0xdc>)
 800f634:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800f638:	781a      	ldrb	r2, [r3, #0]
 800f63a:	20b6      	movs	r0, #182	; 0xb6
 800f63c:	f006 fa04 	bl	8015a48 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800f640:	f240 1113 	movw	r1, #275	; 0x113
 800f644:	20de      	movs	r0, #222	; 0xde
 800f646:	f00a f8b9 	bl	80197bc <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800f64a:	f240 1113 	movw	r1, #275	; 0x113
 800f64e:	208c      	movs	r0, #140	; 0x8c
 800f650:	f00a f8d8 	bl	8019804 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f654:	f240 1339 	movw	r3, #313	; 0x139
 800f658:	9400      	str	r4, [sp, #0]
 800f65a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f65e:	4619      	mov	r1, r3
 800f660:	200a      	movs	r0, #10
 800f662:	f00f f9ad 	bl	801e9c0 <TFT_DrawLine>
}
 800f666:	b002      	add	sp, #8
 800f668:	bd10      	pop	{r4, pc}
 800f66a:	bf00      	nop
 800f66c:	20000a48 	.word	0x20000a48
 800f670:	200001b0 	.word	0x200001b0
 800f674:	2008c322 	.word	0x2008c322

0800f678 <GUI_Title_Screen>:
void GUI_Title_Screen()
{
 800f678:	b507      	push	{r0, r1, r2, lr}
	TFT_FillScreen_DMA(0x0084);
 800f67a:	2084      	movs	r0, #132	; 0x84
 800f67c:	f00e ffd4 	bl	801e628 <TFT_FillScreen_DMA>
	GUI_TitleString_Name(80, 330);
 800f680:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800f684:	2050      	movs	r0, #80	; 0x50
 800f686:	f00b f9c3 	bl	801aa10 <GUI_TitleString_Name>
	GUI_TitleString_Version(180, 420, VERSION);
 800f68a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f68e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800f692:	20b4      	movs	r0, #180	; 0xb4
 800f694:	f00b fa16 	bl	801aac4 <GUI_TitleString_Version>
	sImage bmTKA_logo_Flash = {
 800f698:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800f69c:	f8ad 3000 	strh.w	r3, [sp]
 800f6a0:	23b5      	movs	r3, #181	; 0xb5
 800f6a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f6a6:	4b08      	ldr	r3, [pc, #32]	; (800f6c8 <GUI_Title_Screen+0x50>)
 800f6a8:	9301      	str	r3, [sp, #4]
			TKA_LOGO_BMP_SIZEX, // xSize
			TKA_LOGO_BMP_SIZEY, // ySize
			(uint16_t *)bmp,  // Pointer to picture data
		};
	TFT_DrawBitmap(0, 100, bmTKA_logo_Flash);
 800f6aa:	ab02      	add	r3, sp, #8
 800f6ac:	e913 000c 	ldmdb	r3, {r2, r3}
 800f6b0:	2164      	movs	r1, #100	; 0x64
 800f6b2:	2000      	movs	r0, #0
 800f6b4:	f00f fc64 	bl	801ef80 <TFT_DrawBitmap>
	Measure_Color_xy |= CIE_xy_1931_1964;
 800f6b8:	4a04      	ldr	r2, [pc, #16]	; (800f6cc <GUI_Title_Screen+0x54>)
 800f6ba:	7813      	ldrb	r3, [r2, #0]
 800f6bc:	f043 0301 	orr.w	r3, r3, #1
 800f6c0:	7013      	strb	r3, [r2, #0]
}
 800f6c2:	b003      	add	sp, #12
 800f6c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6c8:	200511f6 	.word	0x200511f6
 800f6cc:	2000527c 	.word	0x2000527c

0800f6d0 <Measure_Elements_Draw>:
		Prev_Inf_Screen = Measure_Screen;
		preGUI_screen_state = Measure_Screen;
}

void Measure_Elements_Draw(uint8_t Measure_Number)
{	
 800f6d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t Y = 70, limit = 410;
	
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
	{
		screen_count_old = screen_count;
 800f6d4:	4da4      	ldr	r5, [pc, #656]	; (800f968 <Measure_Elements_Draw+0x298>)
 800f6d6:	4fa5      	ldr	r7, [pc, #660]	; (800f96c <Measure_Elements_Draw+0x29c>)
{	
 800f6d8:	4606      	mov	r6, r0
	uint16_t Y = 70, limit = 410;
 800f6da:	2446      	movs	r4, #70	; 0x46
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f6dc:	2e0e      	cmp	r6, #14
 800f6de:	f200 8099 	bhi.w	800f814 <Measure_Elements_Draw+0x144>
		screen_count_old = screen_count;
 800f6e2:	782b      	ldrb	r3, [r5, #0]
 800f6e4:	703b      	strb	r3, [r7, #0]
		
		switch(state_i){
 800f6e6:	2e0c      	cmp	r6, #12
 800f6e8:	f200 808c 	bhi.w	800f804 <Measure_Elements_Draw+0x134>
 800f6ec:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f6f0:	0035000d 	.word	0x0035000d
 800f6f4:	0060004c 	.word	0x0060004c
 800f6f8:	00ba0095 	.word	0x00ba0095
 800f6fc:	00fc00d2 	.word	0x00fc00d2
 800f700:	01680124 	.word	0x01680124
 800f704:	019a0183 	.word	0x019a0183
 800f708:	01ba      	.short	0x01ba
					case 0: if(Measure_Field&Illuminance){
 800f70a:	4a99      	ldr	r2, [pc, #612]	; (800f970 <Measure_Elements_Draw+0x2a0>)
 800f70c:	8812      	ldrh	r2, [r2, #0]
 800f70e:	07d2      	lsls	r2, r2, #31
 800f710:	d578      	bpl.n	800f804 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f712:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f716:	f280 81b9 	bge.w	800fa8c <Measure_Elements_Draw+0x3bc>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f71a:	4b96      	ldr	r3, [pc, #600]	; (800f974 <Measure_Elements_Draw+0x2a4>)
 800f71c:	4996      	ldr	r1, [pc, #600]	; (800f978 <Measure_Elements_Draw+0x2a8>)
 800f71e:	781a      	ldrb	r2, [r3, #0]
 800f720:	4b96      	ldr	r3, [pc, #600]	; (800f97c <Measure_Elements_Draw+0x2ac>)
 800f722:	4897      	ldr	r0, [pc, #604]	; (800f980 <Measure_Elements_Draw+0x2b0>)
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	b17a      	cbz	r2, 800f748 <Measure_Elements_Draw+0x78>
 800f728:	7802      	ldrb	r2, [r0, #0]
 800f72a:	9200      	str	r2, [sp, #0]
 800f72c:	ed91 0a00 	vldr	s0, [r1]
 800f730:	2200      	movs	r2, #0
 800f732:	4621      	mov	r1, r4
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
									Y+=10;
							} else {screen_count++;}} break;
				case 1: if(Measure_Field&Irradiance){
					if(Y+35 <= limit){
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f734:	2014      	movs	r0, #20
 800f736:	f006 fb65 	bl	8015e04 <GUI_Text_E_Measure>
									Y+=10;
							}else {screen_count++;}} break;
				case 12: if(Measure_Field&SP_measure){
					if(Y+35 <= limit){
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
									Y+=35;
 800f73a:	f104 0323 	add.w	r3, r4, #35	; 0x23
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f73e:	f64f 72ff 	movw	r2, #65535	; 0xffff
									Y+=35;
 800f742:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f744:	9200      	str	r2, [sp, #0]
 800f746:	e085      	b.n	800f854 <Measure_Elements_Draw+0x184>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f748:	7800      	ldrb	r0, [r0, #0]
 800f74a:	9000      	str	r0, [sp, #0]
 800f74c:	ed91 0a00 	vldr	s0, [r1]
 800f750:	4621      	mov	r1, r4
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f752:	2014      	movs	r0, #20
 800f754:	f006 fd70 	bl	8016238 <GUI_Text_L_Measure>
 800f758:	e7ef      	b.n	800f73a <Measure_Elements_Draw+0x6a>
				case 1: if(Measure_Field&Irradiance){
 800f75a:	4a85      	ldr	r2, [pc, #532]	; (800f970 <Measure_Elements_Draw+0x2a0>)
 800f75c:	8812      	ldrh	r2, [r2, #0]
 800f75e:	0790      	lsls	r0, r2, #30
 800f760:	d550      	bpl.n	800f804 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f762:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f766:	f280 8191 	bge.w	800fa8c <Measure_Elements_Draw+0x3bc>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f76a:	4b82      	ldr	r3, [pc, #520]	; (800f974 <Measure_Elements_Draw+0x2a4>)
 800f76c:	4a84      	ldr	r2, [pc, #528]	; (800f980 <Measure_Elements_Draw+0x2b0>)
 800f76e:	7818      	ldrb	r0, [r3, #0]
 800f770:	4b82      	ldr	r3, [pc, #520]	; (800f97c <Measure_Elements_Draw+0x2ac>)
 800f772:	4984      	ldr	r1, [pc, #528]	; (800f984 <Measure_Elements_Draw+0x2b4>)
 800f774:	7812      	ldrb	r2, [r2, #0]
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	9200      	str	r2, [sp, #0]
 800f77a:	ed91 0a00 	vldr	s0, [r1]
 800f77e:	2201      	movs	r2, #1
 800f780:	4621      	mov	r1, r4
 800f782:	2800      	cmp	r0, #0
 800f784:	d0e5      	beq.n	800f752 <Measure_Elements_Draw+0x82>
 800f786:	e7d5      	b.n	800f734 <Measure_Elements_Draw+0x64>
				case 2: if(Measure_Field&PPFD){
 800f788:	4a79      	ldr	r2, [pc, #484]	; (800f970 <Measure_Elements_Draw+0x2a0>)
 800f78a:	8812      	ldrh	r2, [r2, #0]
 800f78c:	0751      	lsls	r1, r2, #29
 800f78e:	d539      	bpl.n	800f804 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f790:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f794:	f280 817a 	bge.w	800fa8c <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPF_Measure(20, Y, PPFD_PPL_Measure, exp_start, exp_set);
 800f798:	497b      	ldr	r1, [pc, #492]	; (800f988 <Measure_Elements_Draw+0x2b8>)
 800f79a:	4b79      	ldr	r3, [pc, #484]	; (800f980 <Measure_Elements_Draw+0x2b0>)
 800f79c:	4a77      	ldr	r2, [pc, #476]	; (800f97c <Measure_Elements_Draw+0x2ac>)
 800f79e:	ed91 0a00 	vldr	s0, [r1]
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	7812      	ldrb	r2, [r2, #0]
 800f7a6:	4621      	mov	r1, r4
 800f7a8:	2014      	movs	r0, #20
 800f7aa:	f006 ff23 	bl	80165f4 <GUI_Text_PPF_Measure>
 800f7ae:	e7c4      	b.n	800f73a <Measure_Elements_Draw+0x6a>
				case 3: if(Measure_Field&PPFD_BGR){
 800f7b0:	4a6f      	ldr	r2, [pc, #444]	; (800f970 <Measure_Elements_Draw+0x2a0>)
 800f7b2:	8812      	ldrh	r2, [r2, #0]
 800f7b4:	0712      	lsls	r2, r2, #28
 800f7b6:	d525      	bpl.n	800f804 <Measure_Elements_Draw+0x134>
						if(Y+95 <= limit){
 800f7b8:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 800f7bc:	f280 8166 	bge.w	800fa8c <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPFRGB_Measure(20, Y, PPFD_PPL_Red_Measure, PPFD_PPL_Green_Measure, PPFD_PPL_Blue_Measure, PPFD_PPL_Far_Red_Measure, exp_start, exp_set);
 800f7c0:	4972      	ldr	r1, [pc, #456]	; (800f98c <Measure_Elements_Draw+0x2bc>)
 800f7c2:	4b6f      	ldr	r3, [pc, #444]	; (800f980 <Measure_Elements_Draw+0x2b0>)
 800f7c4:	edd1 1a00 	vldr	s3, [r1]
 800f7c8:	4971      	ldr	r1, [pc, #452]	; (800f990 <Measure_Elements_Draw+0x2c0>)
 800f7ca:	4a6c      	ldr	r2, [pc, #432]	; (800f97c <Measure_Elements_Draw+0x2ac>)
 800f7cc:	ed91 1a00 	vldr	s2, [r1]
 800f7d0:	4970      	ldr	r1, [pc, #448]	; (800f994 <Measure_Elements_Draw+0x2c4>)
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	edd1 0a00 	vldr	s1, [r1]
 800f7d8:	496f      	ldr	r1, [pc, #444]	; (800f998 <Measure_Elements_Draw+0x2c8>)
 800f7da:	7812      	ldrb	r2, [r2, #0]
 800f7dc:	ed91 0a00 	vldr	s0, [r1]
 800f7e0:	2014      	movs	r0, #20
 800f7e2:	4621      	mov	r1, r4
 800f7e4:	f007 f886 	bl	80168f4 <GUI_Text_PPFRGB_Measure>
									Y+=95;
 800f7e8:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 800f7ec:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f7ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7f2:	9200      	str	r2, [sp, #0]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f7fa:	200a      	movs	r0, #10
 800f7fc:	f00f f8e0 	bl	801e9c0 <TFT_DrawLine>
									Y+=10;
 800f800:	3469      	adds	r4, #105	; 0x69
									Y+=10;
 800f802:	b2a4      	uxth	r4, r4
							}else {screen_count++;}} break;
			default: break;
		}

		if (screen_count != screen_count_old)
 800f804:	782b      	ldrb	r3, [r5, #0]
 800f806:	783a      	ldrb	r2, [r7, #0]
 800f808:	429a      	cmp	r2, r3
 800f80a:	f000 8142 	beq.w	800fa92 <Measure_Elements_Draw+0x3c2>
			{
				state_Measure_Elements = state_i;
 800f80e:	4a63      	ldr	r2, [pc, #396]	; (800f99c <Measure_Elements_Draw+0x2cc>)
				screen_count_old = screen_count;
 800f810:	703b      	strb	r3, [r7, #0]
				state_Measure_Elements = state_i;
 800f812:	7016      	strb	r6, [r2, #0]
				break;
			}	
			
	}
	
}
 800f814:	b004      	add	sp, #16
 800f816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				case 4: if(Measure_Field&CCT){
 800f81a:	4a55      	ldr	r2, [pc, #340]	; (800f970 <Measure_Elements_Draw+0x2a0>)
 800f81c:	8812      	ldrh	r2, [r2, #0]
 800f81e:	05d0      	lsls	r0, r2, #23
 800f820:	d5f0      	bpl.n	800f804 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f822:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f826:	f280 8131 	bge.w	800fa8c <Measure_Elements_Draw+0x3bc>
							GUI_Text_CCT_Measure(20, Y,  Tc_Measure == 0xFFFF ? 0 : Tc_Measure, exp_start, exp_set); //
 800f82a:	4b5d      	ldr	r3, [pc, #372]	; (800f9a0 <Measure_Elements_Draw+0x2d0>)
 800f82c:	4954      	ldr	r1, [pc, #336]	; (800f980 <Measure_Elements_Draw+0x2b0>)
 800f82e:	881a      	ldrh	r2, [r3, #0]
 800f830:	4b52      	ldr	r3, [pc, #328]	; (800f97c <Measure_Elements_Draw+0x2ac>)
 800f832:	7809      	ldrb	r1, [r1, #0]
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	9100      	str	r1, [sp, #0]
 800f838:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800f83c:	4542      	cmp	r2, r8
 800f83e:	bf08      	it	eq
 800f840:	2200      	moveq	r2, #0
 800f842:	4621      	mov	r1, r4
 800f844:	2014      	movs	r0, #20
 800f846:	f007 ffad 	bl	80177a4 <GUI_Text_CCT_Measure>
									Y+=35;
 800f84a:	f104 0323 	add.w	r3, r4, #35	; 0x23
 800f84e:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f850:	f8cd 8000 	str.w	r8, [sp]
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f854:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f858:	4619      	mov	r1, r3
 800f85a:	200a      	movs	r0, #10
 800f85c:	f00f f8b0 	bl	801e9c0 <TFT_DrawLine>
									Y+=10;
 800f860:	342d      	adds	r4, #45	; 0x2d
 800f862:	e7ce      	b.n	800f802 <Measure_Elements_Draw+0x132>
				case 5: if(Measure_Field&delta_E){
 800f864:	4a42      	ldr	r2, [pc, #264]	; (800f970 <Measure_Elements_Draw+0x2a0>)
 800f866:	8812      	ldrh	r2, [r2, #0]
 800f868:	0511      	lsls	r1, r2, #20
 800f86a:	d5cb      	bpl.n	800f804 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f86c:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f870:	f280 810c 	bge.w	800fa8c <Measure_Elements_Draw+0x3bc>
									GUI_Text_deltaE_Measure(20, Y, delta_Eab_Measure, exp_start, exp_set);
 800f874:	4b4b      	ldr	r3, [pc, #300]	; (800f9a4 <Measure_Elements_Draw+0x2d4>)
 800f876:	4a41      	ldr	r2, [pc, #260]	; (800f97c <Measure_Elements_Draw+0x2ac>)
 800f878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f87c:	7812      	ldrb	r2, [r2, #0]
 800f87e:	ee00 3a10 	vmov	s0, r3
 800f882:	4b3f      	ldr	r3, [pc, #252]	; (800f980 <Measure_Elements_Draw+0x2b0>)
 800f884:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	4621      	mov	r1, r4
 800f88c:	2014      	movs	r0, #20
 800f88e:	f008 f981 	bl	8017b94 <GUI_Text_deltaE_Measure>
 800f892:	e752      	b.n	800f73a <Measure_Elements_Draw+0x6a>
				case 6: if(Measure_Field&CIE_XYZ){
 800f894:	4a36      	ldr	r2, [pc, #216]	; (800f970 <Measure_Elements_Draw+0x2a0>)
 800f896:	8812      	ldrh	r2, [r2, #0]
 800f898:	06d2      	lsls	r2, r2, #27
 800f89a:	d5b3      	bpl.n	800f804 <Measure_Elements_Draw+0x134>
						if(Y+105 <= limit){
 800f89c:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f8a0:	f280 80f4 	bge.w	800fa8c <Measure_Elements_Draw+0x3bc>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f8a4:	4b40      	ldr	r3, [pc, #256]	; (800f9a8 <Measure_Elements_Draw+0x2d8>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	b9e3      	cbnz	r3, 800f8e4 <Measure_Elements_Draw+0x214>
 800f8aa:	4940      	ldr	r1, [pc, #256]	; (800f9ac <Measure_Elements_Draw+0x2dc>)
 800f8ac:	4834      	ldr	r0, [pc, #208]	; (800f980 <Measure_Elements_Draw+0x2b0>)
 800f8ae:	880a      	ldrh	r2, [r1, #0]
 800f8b0:	7800      	ldrb	r0, [r0, #0]
 800f8b2:	884b      	ldrh	r3, [r1, #2]
 800f8b4:	8889      	ldrh	r1, [r1, #4]
 800f8b6:	9002      	str	r0, [sp, #8]
 800f8b8:	4830      	ldr	r0, [pc, #192]	; (800f97c <Measure_Elements_Draw+0x2ac>)
 800f8ba:	7800      	ldrb	r0, [r0, #0]
 800f8bc:	9001      	str	r0, [sp, #4]
 800f8be:	9100      	str	r1, [sp, #0]
 800f8c0:	2014      	movs	r0, #20
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	f007 fc3c 	bl	8017140 <GUI_Text_XYZ_Measure>
									Y+=105;
 800f8c8:	f104 0369 	add.w	r3, r4, #105	; 0x69
 800f8cc:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f8ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8d2:	9200      	str	r2, [sp, #0]
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f8da:	200a      	movs	r0, #10
 800f8dc:	f00f f870 	bl	801e9c0 <TFT_DrawLine>
									Y+=10;
 800f8e0:	3473      	adds	r4, #115	; 0x73
 800f8e2:	e78e      	b.n	800f802 <Measure_Elements_Draw+0x132>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f8e4:	4932      	ldr	r1, [pc, #200]	; (800f9b0 <Measure_Elements_Draw+0x2e0>)
 800f8e6:	e7e1      	b.n	800f8ac <Measure_Elements_Draw+0x1dc>
				case 7: if(Measure_Field&CIE_xy){
 800f8e8:	4a21      	ldr	r2, [pc, #132]	; (800f970 <Measure_Elements_Draw+0x2a0>)
 800f8ea:	8812      	ldrh	r2, [r2, #0]
 800f8ec:	0690      	lsls	r0, r2, #26
 800f8ee:	d589      	bpl.n	800f804 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f8f0:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f8f4:	f300 80ca 	bgt.w	800fa8c <Measure_Elements_Draw+0x3bc>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f8f8:	4b2b      	ldr	r3, [pc, #172]	; (800f9a8 <Measure_Elements_Draw+0x2d8>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	b9d3      	cbnz	r3, 800f934 <Measure_Elements_Draw+0x264>
 800f8fe:	4b2d      	ldr	r3, [pc, #180]	; (800f9b4 <Measure_Elements_Draw+0x2e4>)
 800f900:	ed93 0a00 	vldr	s0, [r3]
 800f904:	edd3 0a01 	vldr	s1, [r3, #4]
 800f908:	4a1c      	ldr	r2, [pc, #112]	; (800f97c <Measure_Elements_Draw+0x2ac>)
 800f90a:	4b1d      	ldr	r3, [pc, #116]	; (800f980 <Measure_Elements_Draw+0x2b0>)
 800f90c:	7812      	ldrb	r2, [r2, #0]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	4621      	mov	r1, r4
 800f912:	2014      	movs	r0, #20
 800f914:	f007 fda2 	bl	801745c <GUI_Text_xy_Measure>
									Y+=70;
 800f918:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800f91c:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f91e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f922:	9200      	str	r2, [sp, #0]
 800f924:	4619      	mov	r1, r3
 800f926:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f92a:	200a      	movs	r0, #10
 800f92c:	f00f f848 	bl	801e9c0 <TFT_DrawLine>
									Y+=10;
 800f930:	3450      	adds	r4, #80	; 0x50
 800f932:	e766      	b.n	800f802 <Measure_Elements_Draw+0x132>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f934:	4b20      	ldr	r3, [pc, #128]	; (800f9b8 <Measure_Elements_Draw+0x2e8>)
 800f936:	e7e3      	b.n	800f900 <Measure_Elements_Draw+0x230>
				case 8: if(Measure_Field&CIE_Luv){
 800f938:	4a0d      	ldr	r2, [pc, #52]	; (800f970 <Measure_Elements_Draw+0x2a0>)
 800f93a:	8812      	ldrh	r2, [r2, #0]
 800f93c:	0651      	lsls	r1, r2, #25
 800f93e:	f57f af61 	bpl.w	800f804 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f942:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f946:	f300 80a1 	bgt.w	800fa8c <Measure_Elements_Draw+0x3bc>
									GUI_Text_uv_Measure(20, Y, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 800f94a:	491c      	ldr	r1, [pc, #112]	; (800f9bc <Measure_Elements_Draw+0x2ec>)
 800f94c:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <Measure_Elements_Draw+0x2b0>)
 800f94e:	4a0b      	ldr	r2, [pc, #44]	; (800f97c <Measure_Elements_Draw+0x2ac>)
 800f950:	edd1 0a01 	vldr	s1, [r1, #4]
 800f954:	ed91 0a00 	vldr	s0, [r1]
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	7812      	ldrb	r2, [r2, #0]
 800f95c:	4621      	mov	r1, r4
 800f95e:	2014      	movs	r0, #20
 800f960:	f007 fe3e 	bl	80175e0 <GUI_Text_uv_Measure>
 800f964:	e7d8      	b.n	800f918 <Measure_Elements_Draw+0x248>
 800f966:	bf00      	nop
 800f968:	200052a3 	.word	0x200052a3
 800f96c:	200052a4 	.word	0x200052a4
 800f970:	2000527e 	.word	0x2000527e
 800f974:	20000a48 	.word	0x20000a48
 800f978:	20091514 	.word	0x20091514
 800f97c:	20000a4d 	.word	0x20000a4d
 800f980:	20000a4c 	.word	0x20000a4c
 800f984:	20090f80 	.word	0x20090f80
 800f988:	20090f88 	.word	0x20090f88
 800f98c:	20090f84 	.word	0x20090f84
 800f990:	2009106c 	.word	0x2009106c
 800f994:	200913f0 	.word	0x200913f0
 800f998:	2009132c 	.word	0x2009132c
 800f99c:	200052a8 	.word	0x200052a8
 800f9a0:	200501e8 	.word	0x200501e8
 800f9a4:	2008c31e 	.word	0x2008c31e
 800f9a8:	2000527c 	.word	0x2000527c
 800f9ac:	2008adcc 	.word	0x2008adcc
 800f9b0:	2008adc6 	.word	0x2008adc6
 800f9b4:	2008adec 	.word	0x2008adec
 800f9b8:	2008ade4 	.word	0x2008ade4
 800f9bc:	2008addc 	.word	0x2008addc
				case 9: if(Measure_Field&CIE_Lab){
 800f9c0:	4a35      	ldr	r2, [pc, #212]	; (800fa98 <Measure_Elements_Draw+0x3c8>)
 800f9c2:	8812      	ldrh	r2, [r2, #0]
 800f9c4:	0612      	lsls	r2, r2, #24
 800f9c6:	f57f af1d 	bpl.w	800f804 <Measure_Elements_Draw+0x134>
					if(Y+105 <= limit){
 800f9ca:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f9ce:	da5d      	bge.n	800fa8c <Measure_Elements_Draw+0x3bc>
									GUI_Text_LAB_Measure(20, Y, colorimetry_LAB[0],colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 800f9d0:	4832      	ldr	r0, [pc, #200]	; (800fa9c <Measure_Elements_Draw+0x3cc>)
 800f9d2:	4933      	ldr	r1, [pc, #204]	; (800faa0 <Measure_Elements_Draw+0x3d0>)
 800f9d4:	7800      	ldrb	r0, [r0, #0]
 800f9d6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f9da:	f9b1 2000 	ldrsh.w	r2, [r1]
 800f9de:	9002      	str	r0, [sp, #8]
 800f9e0:	4830      	ldr	r0, [pc, #192]	; (800faa4 <Measure_Elements_Draw+0x3d4>)
 800f9e2:	7800      	ldrb	r0, [r0, #0]
 800f9e4:	9001      	str	r0, [sp, #4]
 800f9e6:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800f9ea:	9100      	str	r1, [sp, #0]
 800f9ec:	2014      	movs	r0, #20
 800f9ee:	4621      	mov	r1, r4
 800f9f0:	f008 fdae 	bl	8018550 <GUI_Text_LAB_Measure>
 800f9f4:	e768      	b.n	800f8c8 <Measure_Elements_Draw+0x1f8>
				case 10: if(Measure_Field&lambda_d){
 800f9f6:	4a28      	ldr	r2, [pc, #160]	; (800fa98 <Measure_Elements_Draw+0x3c8>)
 800f9f8:	8812      	ldrh	r2, [r2, #0]
 800f9fa:	0590      	lsls	r0, r2, #22
 800f9fc:	f57f af02 	bpl.w	800f804 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800fa00:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800fa04:	da42      	bge.n	800fa8c <Measure_Elements_Draw+0x3bc>
									GUI_Text_lambdaD_Measure(20, Y, lambda_d_Measure, exp_start, exp_set);
 800fa06:	4b28      	ldr	r3, [pc, #160]	; (800faa8 <Measure_Elements_Draw+0x3d8>)
 800fa08:	4a26      	ldr	r2, [pc, #152]	; (800faa4 <Measure_Elements_Draw+0x3d4>)
 800fa0a:	881b      	ldrh	r3, [r3, #0]
 800fa0c:	7812      	ldrb	r2, [r2, #0]
 800fa0e:	ee00 3a10 	vmov	s0, r3
 800fa12:	4b22      	ldr	r3, [pc, #136]	; (800fa9c <Measure_Elements_Draw+0x3cc>)
 800fa14:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	4621      	mov	r1, r4
 800fa1c:	2014      	movs	r0, #20
 800fa1e:	f007 ffbb 	bl	8017998 <GUI_Text_lambdaD_Measure>
 800fa22:	e68a      	b.n	800f73a <Measure_Elements_Draw+0x6a>
				case 11: if(Measure_Field&EbEr){
 800fa24:	4a1c      	ldr	r2, [pc, #112]	; (800fa98 <Measure_Elements_Draw+0x3c8>)
 800fa26:	8812      	ldrh	r2, [r2, #0]
 800fa28:	04d1      	lsls	r1, r2, #19
 800fa2a:	f57f aeeb 	bpl.w	800f804 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800fa2e:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800fa32:	dc2b      	bgt.n	800fa8c <Measure_Elements_Draw+0x3bc>
						Mode_EL ?	 GUI_Text_EbEr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set); 
 800fa34:	4b1d      	ldr	r3, [pc, #116]	; (800faac <Measure_Elements_Draw+0x3dc>)
 800fa36:	481e      	ldr	r0, [pc, #120]	; (800fab0 <Measure_Elements_Draw+0x3e0>)
 800fa38:	491e      	ldr	r1, [pc, #120]	; (800fab4 <Measure_Elements_Draw+0x3e4>)
 800fa3a:	f893 e000 	ldrb.w	lr, [r3]
 800fa3e:	4a19      	ldr	r2, [pc, #100]	; (800faa4 <Measure_Elements_Draw+0x3d4>)
 800fa40:	4b16      	ldr	r3, [pc, #88]	; (800fa9c <Measure_Elements_Draw+0x3cc>)
 800fa42:	edd0 0a00 	vldr	s1, [r0]
 800fa46:	ed91 0a00 	vldr	s0, [r1]
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	7812      	ldrb	r2, [r2, #0]
 800fa4e:	4621      	mov	r1, r4
 800fa50:	2014      	movs	r0, #20
 800fa52:	f1be 0f00 	cmp.w	lr, #0
 800fa56:	d002      	beq.n	800fa5e <Measure_Elements_Draw+0x38e>
 800fa58:	f008 f9a0 	bl	8017d9c <GUI_Text_EbEr_Measure>
 800fa5c:	e75c      	b.n	800f918 <Measure_Elements_Draw+0x248>
 800fa5e:	f008 fb25 	bl	80180ac <GUI_Text_LbLr_Measure>
 800fa62:	e759      	b.n	800f918 <Measure_Elements_Draw+0x248>
				case 12: if(Measure_Field&SP_measure){
 800fa64:	4a0c      	ldr	r2, [pc, #48]	; (800fa98 <Measure_Elements_Draw+0x3c8>)
 800fa66:	8812      	ldrh	r2, [r2, #0]
 800fa68:	0492      	lsls	r2, r2, #18
 800fa6a:	f57f aecb 	bpl.w	800f804 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800fa6e:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800fa72:	da0b      	bge.n	800fa8c <Measure_Elements_Draw+0x3bc>
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
 800fa74:	4910      	ldr	r1, [pc, #64]	; (800fab8 <Measure_Elements_Draw+0x3e8>)
 800fa76:	4b09      	ldr	r3, [pc, #36]	; (800fa9c <Measure_Elements_Draw+0x3cc>)
 800fa78:	4a0a      	ldr	r2, [pc, #40]	; (800faa4 <Measure_Elements_Draw+0x3d4>)
 800fa7a:	ed91 0a00 	vldr	s0, [r1]
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	7812      	ldrb	r2, [r2, #0]
 800fa82:	4621      	mov	r1, r4
 800fa84:	2014      	movs	r0, #20
 800fa86:	f008 fc9d 	bl	80183c4 <GUI_Text_S_P_Measure>
 800fa8a:	e656      	b.n	800f73a <Measure_Elements_Draw+0x6a>
							}else {screen_count++;}} break;
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	702b      	strb	r3, [r5, #0]
 800fa90:	e6b8      	b.n	800f804 <Measure_Elements_Draw+0x134>
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800fa92:	3601      	adds	r6, #1
 800fa94:	b2f6      	uxtb	r6, r6
 800fa96:	e621      	b.n	800f6dc <Measure_Elements_Draw+0xc>
 800fa98:	2000527e 	.word	0x2000527e
 800fa9c:	20000a4c 	.word	0x20000a4c
 800faa0:	2008adc0 	.word	0x2008adc0
 800faa4:	20000a4d 	.word	0x20000a4d
 800faa8:	200913ec 	.word	0x200913ec
 800faac:	20000a48 	.word	0x20000a48
 800fab0:	20091510 	.word	0x20091510
 800fab4:	2009150c 	.word	0x2009150c
 800fab8:	20091068 	.word	0x20091068

0800fabc <GUI_Information_Screen>:
	TFT_FillScreen_DMA(TFT_Red);

}

void GUI_Information_Screen()
{
 800fabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fabe:	4b1e      	ldr	r3, [pc, #120]	; (800fb38 <GUI_Information_Screen+0x7c>)
 800fac0:	4a1e      	ldr	r2, [pc, #120]	; (800fb3c <GUI_Information_Screen+0x80>)
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	7812      	ldrb	r2, [r2, #0]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d034      	beq.n	800fb34 <GUI_Information_Screen+0x78>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800faca:	2063      	movs	r0, #99	; 0x63
 800facc:	f00e fdac 	bl	801e628 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800fad0:	4b1b      	ldr	r3, [pc, #108]	; (800fb40 <GUI_Information_Screen+0x84>)
 800fad2:	491c      	ldr	r1, [pc, #112]	; (800fb44 <GUI_Information_Screen+0x88>)
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	4a1c      	ldr	r2, [pc, #112]	; (800fb48 <GUI_Information_Screen+0x8c>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800fad8:	8809      	ldrh	r1, [r1, #0]
 800fada:	7812      	ldrb	r2, [r2, #0]
 800fadc:	4d1b      	ldr	r5, [pc, #108]	; (800fb4c <GUI_Information_Screen+0x90>)
 800fade:	4c1c      	ldr	r4, [pc, #112]	; (800fb50 <GUI_Information_Screen+0x94>)
		if(Language_status == En){
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	4b1c      	ldr	r3, [pc, #112]	; (800fb54 <GUI_Information_Screen+0x98>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	9100      	str	r1, [sp, #0]
 800fae8:	f04f 0100 	mov.w	r1, #0
 800faec:	4608      	mov	r0, r1
		if(Language_status == En){
 800faee:	d110      	bne.n	800fb12 <GUI_Information_Screen+0x56>
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800faf0:	f00a fe22 	bl	801a738 <GUI_TextEn_Info_Callibration>
			GUI_TextEn_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800faf4:	2100      	movs	r1, #0
 800faf6:	4608      	mov	r0, r1
 800faf8:	882b      	ldrh	r3, [r5, #0]
 800fafa:	8822      	ldrh	r2, [r4, #0]
 800fafc:	f00a fe9e 	bl	801a83c <GUI_TextEn_Info_Serial>
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800fb00:	2100      	movs	r1, #0
 800fb02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fb06:	4608      	mov	r0, r1
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
			GUI_TextRu_Info_Ver(0, 0, VERSION);
		}
	}
}
 800fb08:	b003      	add	sp, #12
 800fb0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800fb0e:	f00a bf0b 	b.w	801a928 <GUI_TextEn_Info_Ver>
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800fb12:	f00b faf7 	bl	801b104 <GUI_TextRu_Info_Callibration>
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800fb16:	2100      	movs	r1, #0
 800fb18:	4608      	mov	r0, r1
 800fb1a:	882b      	ldrh	r3, [r5, #0]
 800fb1c:	8822      	ldrh	r2, [r4, #0]
 800fb1e:	f00b fbaf 	bl	801b280 <GUI_TextRu_Info_Serial>
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800fb22:	2100      	movs	r1, #0
 800fb24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fb28:	4608      	mov	r0, r1
}
 800fb2a:	b003      	add	sp, #12
 800fb2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800fb30:	f00b bc20 	b.w	801b374 <GUI_TextRu_Info_Ver>
}
 800fb34:	b003      	add	sp, #12
 800fb36:	bd30      	pop	{r4, r5, pc}
 800fb38:	2000022a 	.word	0x2000022a
 800fb3c:	20005279 	.word	0x20005279
 800fb40:	2000527b 	.word	0x2000527b
 800fb44:	20091298 	.word	0x20091298
 800fb48:	20090f78 	.word	0x20090f78
 800fb4c:	20091340 	.word	0x20091340
 800fb50:	20090f7c 	.word	0x20090f7c
 800fb54:	20090f8c 	.word	0x20090f8c

0800fb58 <GUI_SD_Write_Screen>:

void GUI_SD_Write_Screen()
{
 800fb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	if(preGUI_screen_state != GUI_screen_state){
 800fb5a:	4b29      	ldr	r3, [pc, #164]	; (800fc00 <GUI_SD_Write_Screen+0xa8>)
 800fb5c:	4d29      	ldr	r5, [pc, #164]	; (800fc04 <GUI_SD_Write_Screen+0xac>)
 800fb5e:	781a      	ldrb	r2, [r3, #0]
 800fb60:	7829      	ldrb	r1, [r5, #0]
 800fb62:	4291      	cmp	r1, r2
 800fb64:	d020      	beq.n	800fba8 <GUI_SD_Write_Screen+0x50>
		pause = 1;
 800fb66:	4b28      	ldr	r3, [pc, #160]	; (800fc08 <GUI_SD_Write_Screen+0xb0>)
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
		if(Language_status == En){
 800fb68:	4c28      	ldr	r4, [pc, #160]	; (800fc0c <GUI_SD_Write_Screen+0xb4>)
		pause = 1;
 800fb6a:	2201      	movs	r2, #1
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fb6c:	2063      	movs	r0, #99	; 0x63
		pause = 1;
 800fb6e:	701a      	strb	r2, [r3, #0]
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fb70:	f00e fd5a 	bl	801e628 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800fb74:	7822      	ldrb	r2, [r4, #0]
 800fb76:	2a01      	cmp	r2, #1
			GUI_TextEn_WriteSD(80, 120);
 800fb78:	f04f 0178 	mov.w	r1, #120	; 0x78
 800fb7c:	f04f 0050 	mov.w	r0, #80	; 0x50
		if(Language_status == En){
 800fb80:	d13a      	bne.n	800fbf8 <GUI_SD_Write_Screen+0xa0>
			GUI_TextEn_WriteSD(80, 120);
 800fb82:	f00a fd9f 	bl	801a6c4 <GUI_TextEn_WriteSD>
		}
		else
		{	
				 GUI_TextRu_WriteSD(80, 120);
		}
		if (SD_Detect == 0) {
 800fb86:	4b22      	ldr	r3, [pc, #136]	; (800fc10 <GUI_SD_Write_Screen+0xb8>)
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	b96b      	cbnz	r3, 800fba8 <GUI_SD_Write_Screen+0x50>
			Calculate_SD_Data(); 
 800fb8c:	f00c fdb4 	bl	801c6f8 <Calculate_SD_Data>
			SD_Witer(sdfile_cnt, Language_status, Memory_Data_satus, Mode_EL, CRICQS_done);
 800fb90:	7821      	ldrb	r1, [r4, #0]
 800fb92:	4c20      	ldr	r4, [pc, #128]	; (800fc14 <GUI_SD_Write_Screen+0xbc>)
 800fb94:	4b20      	ldr	r3, [pc, #128]	; (800fc18 <GUI_SD_Write_Screen+0xc0>)
 800fb96:	4a21      	ldr	r2, [pc, #132]	; (800fc1c <GUI_SD_Write_Screen+0xc4>)
 800fb98:	4821      	ldr	r0, [pc, #132]	; (800fc20 <GUI_SD_Write_Screen+0xc8>)
 800fb9a:	7824      	ldrb	r4, [r4, #0]
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	7812      	ldrb	r2, [r2, #0]
 800fba0:	8800      	ldrh	r0, [r0, #0]
 800fba2:	9400      	str	r4, [sp, #0]
 800fba4:	f00c fe9c 	bl	801c8e0 <SD_Witer>

		}
	}
	
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 800fba8:	4c1e      	ldr	r4, [pc, #120]	; (800fc24 <GUI_SD_Write_Screen+0xcc>)
 800fbaa:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fbae:	f7f1 f82f 	bl	8000c10 <__aeabi_d2f>
 800fbb2:	f44f 718c 	mov.w	r1, #280	; 0x118
 800fbb6:	ee00 0a10 	vmov	s0, r0
 800fbba:	2055      	movs	r0, #85	; 0x55
 800fbbc:	f006 f8f2 	bl	8015da4 <GUI_Bar_Measure>
	
	if(SDWr_Status_bar == 1){
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	4b19      	ldr	r3, [pc, #100]	; (800fc28 <GUI_SD_Write_Screen+0xd0>)
 800fbc4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fbc8:	f7f0 ff92 	bl	8000af0 <__aeabi_dcmpeq>
 800fbcc:	b190      	cbz	r0, 800fbf4 <GUI_SD_Write_Screen+0x9c>
			if(sdfile_cnt < 999){
 800fbce:	4b14      	ldr	r3, [pc, #80]	; (800fc20 <GUI_SD_Write_Screen+0xc8>)
 800fbd0:	881a      	ldrh	r2, [r3, #0]
 800fbd2:	f240 31e6 	movw	r1, #998	; 0x3e6
 800fbd6:	428a      	cmp	r2, r1
					sdfile_cnt++;
 800fbd8:	bf94      	ite	ls
 800fbda:	3201      	addls	r2, #1
				}else{
					sdfile_cnt = 0;
 800fbdc:	2200      	movhi	r2, #0
 800fbde:	801a      	strh	r2, [r3, #0]
				} 
			WriteSDFLASH_t(sdfile_cnt);  
 800fbe0:	8818      	ldrh	r0, [r3, #0]
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	f00c fc7a 	bl	801c4dc <WriteSDFLASH_t>
			pause = 0; 
 800fbe8:	4b07      	ldr	r3, [pc, #28]	; (800fc08 <GUI_SD_Write_Screen+0xb0>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	701a      	strb	r2, [r3, #0]
			GUI_screen_state = Prev_Inf_Screen;
 800fbee:	4b0f      	ldr	r3, [pc, #60]	; (800fc2c <GUI_SD_Write_Screen+0xd4>)
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	702b      	strb	r3, [r5, #0]
	}

}
 800fbf4:	b003      	add	sp, #12
 800fbf6:	bd30      	pop	{r4, r5, pc}
				 GUI_TextRu_WriteSD(80, 120);
 800fbf8:	f00b fb02 	bl	801b200 <GUI_TextRu_WriteSD>
 800fbfc:	e7c3      	b.n	800fb86 <GUI_SD_Write_Screen+0x2e>
 800fbfe:	bf00      	nop
 800fc00:	2000022a 	.word	0x2000022a
 800fc04:	20005279 	.word	0x20005279
 800fc08:	200052a0 	.word	0x200052a0
 800fc0c:	2000527b 	.word	0x2000527b
 800fc10:	200914c8 	.word	0x200914c8
 800fc14:	20005274 	.word	0x20005274
 800fc18:	20000a48 	.word	0x20000a48
 800fc1c:	20000228 	.word	0x20000228
 800fc20:	200052a6 	.word	0x200052a6
 800fc24:	200052d0 	.word	0x200052d0
 800fc28:	3ff00000 	.word	0x3ff00000
 800fc2c:	2008c31d 	.word	0x2008c31d

0800fc30 <GUI_Up_Panel>:


void GUI_Up_Panel()
{
	GUI_Battery_Level(0, 0, percentage_charge);
 800fc30:	4b0f      	ldr	r3, [pc, #60]	; (800fc70 <GUI_Up_Panel+0x40>)
{
 800fc32:	b507      	push	{r0, r1, r2, lr}
	GUI_Battery_Level(0, 0, percentage_charge);
 800fc34:	2100      	movs	r1, #0
 800fc36:	ed93 0b00 	vldr	d0, [r3]
 800fc3a:	4608      	mov	r0, r1
 800fc3c:	f008 fe84 	bl	8018948 <GUI_Battery_Level>
	if (Bluetooth == ON){
 800fc40:	4b0c      	ldr	r3, [pc, #48]	; (800fc74 <GUI_Up_Panel+0x44>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d106      	bne.n	800fc56 <GUI_Up_Panel+0x26>
		GUI_Bluetooth_Logo(240, 2);
 800fc48:	2102      	movs	r1, #2
 800fc4a:	20f0      	movs	r0, #240	; 0xf0
	} else
	{
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
	}
}
 800fc4c:	b003      	add	sp, #12
 800fc4e:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Bluetooth_Logo(240, 2);
 800fc52:	f005 b915 	b.w	8014e80 <GUI_Bluetooth_Logo>
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
 800fc56:	2363      	movs	r3, #99	; 0x63
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fc5e:	2323      	movs	r3, #35	; 0x23
 800fc60:	2101      	movs	r1, #1
 800fc62:	20ef      	movs	r0, #239	; 0xef
 800fc64:	f00e ff14 	bl	801ea90 <TFT_FillRectangle>
}
 800fc68:	b003      	add	sp, #12
 800fc6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc6e:	bf00      	nop
 800fc70:	200913f8 	.word	0x200913f8
 800fc74:	2008c322 	.word	0x2008c322

0800fc78 <GUI_Down_Panel>:

void GUI_Down_Panel()
{		
 800fc78:	b508      	push	{r3, lr}
	GUI_Button_Settings(1, 426);
 800fc7a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fc7e:	2001      	movs	r0, #1
 800fc80:	f005 f950 	bl	8014f24 <GUI_Button_Settings>
	GUI_Button_SD_Card(55, 426, !SD_Detect);
 800fc84:	4b1b      	ldr	r3, [pc, #108]	; (800fcf4 <GUI_Down_Panel+0x7c>)
 800fc86:	781a      	ldrb	r2, [r3, #0]
 800fc88:	fab2 f282 	clz	r2, r2
 800fc8c:	0952      	lsrs	r2, r2, #5
 800fc8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fc92:	2037      	movs	r0, #55	; 0x37
 800fc94:	f005 fb00 	bl	8015298 <GUI_Button_SD_Card>
	GUI_Button_Measure_Start_Pause(109, 426);
 800fc98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fc9c:	206d      	movs	r0, #109	; 0x6d
 800fc9e:	f005 fbc7 	bl	8015430 <GUI_Button_Measure_Start_Pause>
	
	if(GUI_screen_state >= DataSet1_Screen)
 800fca2:	4b15      	ldr	r3, [pc, #84]	; (800fcf8 <GUI_Down_Panel+0x80>)
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	2b06      	cmp	r3, #6
 800fca8:	d90b      	bls.n	800fcc2 <GUI_Down_Panel+0x4a>
	{
		GUI_Button_Down(163, 426);
 800fcaa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fcae:	20a3      	movs	r0, #163	; 0xa3
 800fcb0:	f005 f976 	bl	8014fa0 <GUI_Button_Down>
		GUI_Button_TFT_On_Off(217, 426);
 800fcb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fcb8:	20d9      	movs	r0, #217	; 0xd9
	else
	{
		GUI_Button_TFT_Rotate(163, 426);
		GUI_Button_Right(217, 426);
	}
}
 800fcba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_TFT_On_Off(217, 426);
 800fcbe:	f005 ba48 	b.w	8015152 <GUI_Button_TFT_On_Off>
	}else if(GUI_screen_state <= Measure3_Screen)
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	d810      	bhi.n	800fce8 <GUI_Down_Panel+0x70>
		GUI_Button_Down_Active(163, 426, (screen_count > 0));
 800fcc6:	4b0d      	ldr	r3, [pc, #52]	; (800fcfc <GUI_Down_Panel+0x84>)
 800fcc8:	781a      	ldrb	r2, [r3, #0]
 800fcca:	3200      	adds	r2, #0
 800fccc:	bf18      	it	ne
 800fcce:	2201      	movne	r2, #1
 800fcd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fcd4:	20a3      	movs	r0, #163	; 0xa3
 800fcd6:	f005 f9a8 	bl	801502a <GUI_Button_Down_Active>
		GUI_Button_Right(217, 426);
 800fcda:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fcde:	20d9      	movs	r0, #217	; 0xd9
}
 800fce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_Right(217, 426);
 800fce4:	f005 b9eb 	b.w	80150be <GUI_Button_Right>
		GUI_Button_TFT_Rotate(163, 426);
 800fce8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fcec:	20a3      	movs	r0, #163	; 0xa3
 800fcee:	f005 fa5e 	bl	80151ae <GUI_Button_TFT_Rotate>
 800fcf2:	e7f2      	b.n	800fcda <GUI_Down_Panel+0x62>
 800fcf4:	200914c8 	.word	0x200914c8
 800fcf8:	20005279 	.word	0x20005279
 800fcfc:	200052a3 	.word	0x200052a3

0800fd00 <GUI_Panels>:

void GUI_Panels()
{
 800fd00:	b507      	push	{r0, r1, r2, lr}
	if((GUI_screen_state == Measure_Screen && (preGUI_screen_state !=Measure2_Screen 
 800fd02:	4b1c      	ldr	r3, [pc, #112]	; (800fd74 <GUI_Panels+0x74>)
 800fd04:	781a      	ldrb	r2, [r3, #0]
 800fd06:	2a01      	cmp	r2, #1
 800fd08:	d121      	bne.n	800fd4e <GUI_Panels+0x4e>
 800fd0a:	4b1b      	ldr	r3, [pc, #108]	; (800fd78 <GUI_Panels+0x78>)
 800fd0c:	7819      	ldrb	r1, [r3, #0]
 800fd0e:	2902      	cmp	r1, #2
 800fd10:	d125      	bne.n	800fd5e <GUI_Panels+0x5e>
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	2b03      	cmp	r3, #3
 800fd16:	d122      	bne.n	800fd5e <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
			|| (preGUI_screen_state >= DataSet1_Screen && GUI_screen_state < DataSet1_Screen)
 800fd18:	4b17      	ldr	r3, [pc, #92]	; (800fd78 <GUI_Panels+0x78>)
 800fd1a:	7819      	ldrb	r1, [r3, #0]
 800fd1c:	2906      	cmp	r1, #6
 800fd1e:	d901      	bls.n	800fd24 <GUI_Panels+0x24>
 800fd20:	2a06      	cmp	r2, #6
 800fd22:	d91c      	bls.n	800fd5e <GUI_Panels+0x5e>
			|| (preGUI_screen_state == Information_Screen) || ((GUI_screen_state == Color_Rendition_Screen) && preGUI_screen_state < Color_Rendition_Screen))
 800fd24:	7819      	ldrb	r1, [r3, #0]
 800fd26:	2911      	cmp	r1, #17
 800fd28:	d019      	beq.n	800fd5e <GUI_Panels+0x5e>
 800fd2a:	2a06      	cmp	r2, #6
 800fd2c:	d102      	bne.n	800fd34 <GUI_Panels+0x34>
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	2b05      	cmp	r3, #5
 800fd32:	d914      	bls.n	800fd5e <GUI_Panels+0x5e>
		GUI_Up_Panel();
		GUI_Down_Panel();
	} 
	else 
	{
		TFT_FillRectangle(0, 40, 271, 425, TFT_Black_Bkgr);
 800fd34:	2363      	movs	r3, #99	; 0x63
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	f240 120f 	movw	r2, #271	; 0x10f
 800fd3c:	f240 13a9 	movw	r3, #425	; 0x1a9
 800fd40:	2128      	movs	r1, #40	; 0x28
 800fd42:	2000      	movs	r0, #0
 800fd44:	f00e fea4 	bl	801ea90 <TFT_FillRectangle>
	}
}
 800fd48:	b003      	add	sp, #12
 800fd4a:	f85d fb04 	ldr.w	pc, [sp], #4
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800fd4e:	2a04      	cmp	r2, #4
 800fd50:	d005      	beq.n	800fd5e <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
 800fd52:	2a06      	cmp	r2, #6
 800fd54:	d9e0      	bls.n	800fd18 <GUI_Panels+0x18>
 800fd56:	4b08      	ldr	r3, [pc, #32]	; (800fd78 <GUI_Panels+0x78>)
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	2b06      	cmp	r3, #6
 800fd5c:	d8dc      	bhi.n	800fd18 <GUI_Panels+0x18>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fd5e:	2063      	movs	r0, #99	; 0x63
 800fd60:	f00e fc62 	bl	801e628 <TFT_FillScreen_DMA>
		GUI_Up_Panel();
 800fd64:	f7ff ff64 	bl	800fc30 <GUI_Up_Panel>
}
 800fd68:	b003      	add	sp, #12
 800fd6a:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Down_Panel();
 800fd6e:	f7ff bf83 	b.w	800fc78 <GUI_Down_Panel>
 800fd72:	bf00      	nop
 800fd74:	20005279 	.word	0x20005279
 800fd78:	2000022a 	.word	0x2000022a

0800fd7c <GUI_DataSet1_Screen>:
{
 800fd7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800fd7e:	4b28      	ldr	r3, [pc, #160]	; (800fe20 <GUI_DataSet1_Screen+0xa4>)
 800fd80:	4c28      	ldr	r4, [pc, #160]	; (800fe24 <GUI_DataSet1_Screen+0xa8>)
 800fd82:	4d29      	ldr	r5, [pc, #164]	; (800fe28 <GUI_DataSet1_Screen+0xac>)
 800fd84:	2202      	movs	r2, #2
 800fd86:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Mode_EL_Old != Mode_EL || Language_status_prev != Language_status){
 800fd88:	4b28      	ldr	r3, [pc, #160]	; (800fe2c <GUI_DataSet1_Screen+0xb0>)
 800fd8a:	4a29      	ldr	r2, [pc, #164]	; (800fe30 <GUI_DataSet1_Screen+0xb4>)
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	7812      	ldrb	r2, [r2, #0]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	4a28      	ldr	r2, [pc, #160]	; (800fe34 <GUI_DataSet1_Screen+0xb8>)
 800fd94:	4b28      	ldr	r3, [pc, #160]	; (800fe38 <GUI_DataSet1_Screen+0xbc>)
 800fd96:	d107      	bne.n	800fda8 <GUI_DataSet1_Screen+0x2c>
 800fd98:	7810      	ldrb	r0, [r2, #0]
 800fd9a:	7821      	ldrb	r1, [r4, #0]
 800fd9c:	4288      	cmp	r0, r1
 800fd9e:	d103      	bne.n	800fda8 <GUI_DataSet1_Screen+0x2c>
 800fda0:	7818      	ldrb	r0, [r3, #0]
 800fda2:	7829      	ldrb	r1, [r5, #0]
 800fda4:	4288      	cmp	r0, r1
 800fda6:	d027      	beq.n	800fdf8 <GUI_DataSet1_Screen+0x7c>
		Mode_EL_Old = Mode_EL;
 800fda8:	7821      	ldrb	r1, [r4, #0]
 800fdaa:	7011      	strb	r1, [r2, #0]
		Language_status_prev = Language_status;
 800fdac:	782a      	ldrb	r2, [r5, #0]
 800fdae:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800fdb0:	f7ff ffa6 	bl	800fd00 <GUI_Panels>
		Prev_Inf_Screen2 = DataSet1_Screen;
 800fdb4:	4b21      	ldr	r3, [pc, #132]	; (800fe3c <GUI_DataSet1_Screen+0xc0>)
 800fdb6:	2207      	movs	r2, #7
 800fdb8:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800fdba:	782b      	ldrb	r3, [r5, #0]
 800fdbc:	bb0b      	cbnz	r3, 800fe02 <GUI_DataSet1_Screen+0x86>
			GUI_OptionMenuRu();
 800fdbe:	f7ff fb7b 	bl	800f4b8 <GUI_OptionMenuRu>
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800fdc2:	7823      	ldrb	r3, [r4, #0]
 800fdc4:	f240 1151 	movw	r1, #337	; 0x151
 800fdc8:	200a      	movs	r0, #10
 800fdca:	b1bb      	cbz	r3, 800fdfc <GUI_DataSet1_Screen+0x80>
 800fdcc:	f00b f814 	bl	801adf8 <GUI_TextRu_Illuminance>
		GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 800fdd0:	4b1b      	ldr	r3, [pc, #108]	; (800fe40 <GUI_DataSet1_Screen+0xc4>)
 800fdd2:	881a      	ldrh	r2, [r3, #0]
 800fdd4:	f240 1147 	movw	r1, #327	; 0x147
 800fdd8:	f002 0201 	and.w	r2, r2, #1
 800fddc:	20c8      	movs	r0, #200	; 0xc8
 800fdde:	f005 fdc3 	bl	8015968 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fde2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	f240 1379 	movw	r3, #377	; 0x179
 800fdec:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	200a      	movs	r0, #10
 800fdf4:	f00e fde4 	bl	801e9c0 <TFT_DrawLine>
}
 800fdf8:	b003      	add	sp, #12
 800fdfa:	bd30      	pop	{r4, r5, pc}
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800fdfc:	f00b fdc2 	bl	801b984 <GUI_TextRu_Luminance>
 800fe00:	e7e6      	b.n	800fdd0 <GUI_DataSet1_Screen+0x54>
		else if (Language_status == En) {
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d1e4      	bne.n	800fdd0 <GUI_DataSet1_Screen+0x54>
			GUI_OptionMenuEn();
 800fe06:	f7ff fbc7 	bl	800f598 <GUI_OptionMenuEn>
			Mode_EL ? GUI_TextEn_Illuminance(10, 339):GUI_TextEn_Luminance(10, 339);
 800fe0a:	7823      	ldrb	r3, [r4, #0]
 800fe0c:	f240 1153 	movw	r1, #339	; 0x153
 800fe10:	200a      	movs	r0, #10
 800fe12:	b113      	cbz	r3, 800fe1a <GUI_DataSet1_Screen+0x9e>
 800fe14:	f00a f916 	bl	801a044 <GUI_TextEn_Illuminance>
 800fe18:	e7da      	b.n	800fdd0 <GUI_DataSet1_Screen+0x54>
 800fe1a:	f00a f8bd 	bl	8019f98 <GUI_TextEn_Luminance>
 800fe1e:	e7d7      	b.n	800fdd0 <GUI_DataSet1_Screen+0x54>
 800fe20:	20000230 	.word	0x20000230
 800fe24:	20000a48 	.word	0x20000a48
 800fe28:	2000527b 	.word	0x2000527b
 800fe2c:	2000022a 	.word	0x2000022a
 800fe30:	20005279 	.word	0x20005279
 800fe34:	2008c323 	.word	0x2008c323
 800fe38:	2008c31c 	.word	0x2008c31c
 800fe3c:	2008c8c0 	.word	0x2008c8c0
 800fe40:	2000527e 	.word	0x2000527e

0800fe44 <GUI_DataSet2_Screen>:
{
 800fe44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fe46:	4b66      	ldr	r3, [pc, #408]	; (800ffe0 <GUI_DataSet2_Screen+0x19c>)
 800fe48:	4a66      	ldr	r2, [pc, #408]	; (800ffe4 <GUI_DataSet2_Screen+0x1a0>)
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	7812      	ldrb	r2, [r2, #0]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	f000 80c3 	beq.w	800ffda <GUI_DataSet2_Screen+0x196>
			GUI_Panels();
 800fe54:	f7ff ff54 	bl	800fd00 <GUI_Panels>
			if(Language_status == Ru){
 800fe58:	4b63      	ldr	r3, [pc, #396]	; (800ffe8 <GUI_DataSet2_Screen+0x1a4>)
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d172      	bne.n	800ff46 <GUI_DataSet2_Screen+0x102>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800fe60:	4b62      	ldr	r3, [pc, #392]	; (800ffec <GUI_DataSet2_Screen+0x1a8>)
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	2152      	movs	r1, #82	; 0x52
 800fe66:	2012      	movs	r0, #18
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d069      	beq.n	800ff40 <GUI_DataSet2_Screen+0xfc>
 800fe6c:	f00b fd20 	bl	801b8b0 <GUI_TextRu_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800fe70:	4c5f      	ldr	r4, [pc, #380]	; (800fff0 <GUI_DataSet2_Screen+0x1ac>)
 800fe72:	8822      	ldrh	r2, [r4, #0]
 800fe74:	2146      	movs	r1, #70	; 0x46
 800fe76:	f002 0202 	and.w	r2, r2, #2
 800fe7a:	20c8      	movs	r0, #200	; 0xc8
 800fe7c:	f005 fd74 	bl	8015968 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800fe80:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800fe84:	2378      	movs	r3, #120	; 0x78
 800fe86:	4619      	mov	r1, r3
 800fe88:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe8c:	200a      	movs	r0, #10
 800fe8e:	9500      	str	r5, [sp, #0]
 800fe90:	f00e fd96 	bl	801e9c0 <TFT_DrawLine>
				GUI_TextRu_PPF(10, 145);
 800fe94:	2191      	movs	r1, #145	; 0x91
 800fe96:	200a      	movs	r0, #10
 800fe98:	f00b f818 	bl	801aecc <GUI_TextRu_PPF>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800fe9c:	8822      	ldrh	r2, [r4, #0]
 800fe9e:	2185      	movs	r1, #133	; 0x85
 800fea0:	f002 0204 	and.w	r2, r2, #4
 800fea4:	20c8      	movs	r0, #200	; 0xc8
 800fea6:	f005 fd5f 	bl	8015968 <GUI_CheckBox>
				GUI_TextRu_PPF_RGB(10, 209);
 800feaa:	21d1      	movs	r1, #209	; 0xd1
 800feac:	200a      	movs	r0, #10
 800feae:	f00b f831 	bl	801af14 <GUI_TextRu_PPF_RGB>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800feb2:	8822      	ldrh	r2, [r4, #0]
 800feb4:	21c6      	movs	r1, #198	; 0xc6
 800feb6:	f002 0208 	and.w	r2, r2, #8
 800feba:	20c8      	movs	r0, #200	; 0xc8
 800febc:	f005 fd54 	bl	8015968 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800fec0:	23f8      	movs	r3, #248	; 0xf8
 800fec2:	4619      	mov	r1, r3
 800fec4:	200a      	movs	r0, #10
 800fec6:	9500      	str	r5, [sp, #0]
 800fec8:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fecc:	f00e fd78 	bl	801e9c0 <TFT_DrawLine>
				GUI_TextRu_CCT(20, 275);
 800fed0:	f240 1113 	movw	r1, #275	; 0x113
 800fed4:	2014      	movs	r0, #20
 800fed6:	f00b fa99 	bl	801b40c <GUI_TextRu_CCT>
				GUI_CheckBox(200, 263, Measure_Field&CCT);
 800feda:	8822      	ldrh	r2, [r4, #0]
 800fedc:	f240 1107 	movw	r1, #263	; 0x107
 800fee0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fee4:	20c8      	movs	r0, #200	; 0xc8
 800fee6:	f005 fd3f 	bl	8015968 <GUI_CheckBox>
				TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800feea:	f240 1339 	movw	r3, #313	; 0x139
 800feee:	4619      	mov	r1, r3
 800fef0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fef4:	9500      	str	r5, [sp, #0]
 800fef6:	200a      	movs	r0, #10
 800fef8:	f00e fd62 	bl	801e9c0 <TFT_DrawLine>
				GUI_Text_deltaE(20, 337);
 800fefc:	f240 1151 	movw	r1, #337	; 0x151
 800ff00:	2014      	movs	r0, #20
 800ff02:	f009 fb51 	bl	80195a8 <GUI_Text_deltaE>
				GUI_CheckBox(200, 327, Measure_Field&delta_E);
 800ff06:	8822      	ldrh	r2, [r4, #0]
 800ff08:	f240 1147 	movw	r1, #327	; 0x147
 800ff0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ff10:	20c8      	movs	r0, #200	; 0xc8
 800ff12:	f005 fd29 	bl	8015968 <GUI_CheckBox>
				TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800ff16:	f240 1379 	movw	r3, #377	; 0x179
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	9500      	str	r5, [sp, #0]
 800ff1e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ff22:	200a      	movs	r0, #10
 800ff24:	f00e fd4c 	bl	801e9c0 <TFT_DrawLine>
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800ff28:	8822      	ldrh	r2, [r4, #0]
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ff30:	f240 1147 	movw	r1, #327	; 0x147
 800ff34:	2082      	movs	r0, #130	; 0x82
}
 800ff36:	b003      	add	sp, #12
 800ff38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800ff3c:	f005 bbf4 	b.w	8015728 <GUI_Button_Measure_deltaE_Small>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800ff40:	f00b fd68 	bl	801ba14 <GUI_TextRu_Radiance>
 800ff44:	e794      	b.n	800fe70 <GUI_DataSet2_Screen+0x2c>
			else if(Language_status == En){
 800ff46:	2b01      	cmp	r3, #1
 800ff48:	d147      	bne.n	800ffda <GUI_DataSet2_Screen+0x196>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800ff4a:	4d28      	ldr	r5, [pc, #160]	; (800ffec <GUI_DataSet2_Screen+0x1a8>)
 800ff4c:	782a      	ldrb	r2, [r5, #0]
 800ff4e:	2154      	movs	r1, #84	; 0x54
 800ff50:	2012      	movs	r0, #18
 800ff52:	2a00      	cmp	r2, #0
 800ff54:	d03b      	beq.n	800ffce <GUI_DataSet2_Screen+0x18a>
 800ff56:	f009 fe0b 	bl	8019b70 <GUI_TextEn_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800ff5a:	4c25      	ldr	r4, [pc, #148]	; (800fff0 <GUI_DataSet2_Screen+0x1ac>)
 800ff5c:	8822      	ldrh	r2, [r4, #0]
 800ff5e:	2146      	movs	r1, #70	; 0x46
 800ff60:	f002 0202 	and.w	r2, r2, #2
 800ff64:	20c8      	movs	r0, #200	; 0xc8
 800ff66:	f005 fcff 	bl	8015968 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800ff6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	2378      	movs	r3, #120	; 0x78
 800ff72:	4619      	mov	r1, r3
 800ff74:	200a      	movs	r0, #10
 800ff76:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ff7a:	f00e fd21 	bl	801e9c0 <TFT_DrawLine>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800ff7e:	782b      	ldrb	r3, [r5, #0]
 800ff80:	2193      	movs	r1, #147	; 0x93
 800ff82:	200a      	movs	r0, #10
 800ff84:	b333      	cbz	r3, 800ffd4 <GUI_DataSet2_Screen+0x190>
 800ff86:	f00a f8f3 	bl	801a170 <GUI_TextEn_PPFD>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800ff8a:	8822      	ldrh	r2, [r4, #0]
 800ff8c:	2185      	movs	r1, #133	; 0x85
 800ff8e:	f002 0204 	and.w	r2, r2, #4
 800ff92:	20c8      	movs	r0, #200	; 0xc8
 800ff94:	f005 fce8 	bl	8015968 <GUI_CheckBox>
				GUI_TextEn_B_G_R_FR(10, 211);
 800ff98:	21d3      	movs	r1, #211	; 0xd3
 800ff9a:	200a      	movs	r0, #10
 800ff9c:	f00a f9a2 	bl	801a2e4 <GUI_TextEn_B_G_R_FR>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800ffa0:	8822      	ldrh	r2, [r4, #0]
 800ffa2:	21c6      	movs	r1, #198	; 0xc6
 800ffa4:	f002 0208 	and.w	r2, r2, #8
 800ffa8:	20c8      	movs	r0, #200	; 0xc8
 800ffaa:	f005 fcdd 	bl	8015968 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ffae:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800ffb2:	23f8      	movs	r3, #248	; 0xf8
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	9500      	str	r5, [sp, #0]
 800ffb8:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ffbc:	200a      	movs	r0, #10
 800ffbe:	f00e fcff 	bl	801e9c0 <TFT_DrawLine>
				GUI_TextEn_CCT(20, 277);
 800ffc2:	f240 1115 	movw	r1, #277	; 0x115
 800ffc6:	2014      	movs	r0, #20
 800ffc8:	f00a f9d4 	bl	801a374 <GUI_TextEn_CCT>
 800ffcc:	e785      	b.n	800feda <GUI_DataSet2_Screen+0x96>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800ffce:	f009 fd81 	bl	8019ad4 <GUI_TextEn_Radiance>
 800ffd2:	e7c2      	b.n	800ff5a <GUI_DataSet2_Screen+0x116>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800ffd4:	f00a f8f8 	bl	801a1c8 <GUI_TextEn_PPL>
 800ffd8:	e7d7      	b.n	800ff8a <GUI_DataSet2_Screen+0x146>
}
 800ffda:	b003      	add	sp, #12
 800ffdc:	bd30      	pop	{r4, r5, pc}
 800ffde:	bf00      	nop
 800ffe0:	2000022a 	.word	0x2000022a
 800ffe4:	20005279 	.word	0x20005279
 800ffe8:	2000527b 	.word	0x2000527b
 800ffec:	20000a48 	.word	0x20000a48
 800fff0:	2000527e 	.word	0x2000527e

0800fff4 <GUI_DataSet3_Screen>:
{
 800fff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fff6:	4b35      	ldr	r3, [pc, #212]	; (80100cc <GUI_DataSet3_Screen+0xd8>)
 800fff8:	4a35      	ldr	r2, [pc, #212]	; (80100d0 <GUI_DataSet3_Screen+0xdc>)
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	7812      	ldrb	r2, [r2, #0]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d061      	beq.n	80100c6 <GUI_DataSet3_Screen+0xd2>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 8010002:	4c34      	ldr	r4, [pc, #208]	; (80100d4 <GUI_DataSet3_Screen+0xe0>)
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8010004:	4e34      	ldr	r6, [pc, #208]	; (80100d8 <GUI_DataSet3_Screen+0xe4>)
		GUI_Panels();
 8010006:	f7ff fe7b 	bl	800fd00 <GUI_Panels>
		GUI_Text_CIE_XYZ(20, 82);
 801000a:	2152      	movs	r1, #82	; 0x52
 801000c:	2014      	movs	r0, #20
 801000e:	f008 feff 	bl	8018e10 <GUI_Text_CIE_XYZ>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 8010012:	8822      	ldrh	r2, [r4, #0]
 8010014:	2146      	movs	r1, #70	; 0x46
 8010016:	f002 0210 	and.w	r2, r2, #16
 801001a:	20c8      	movs	r0, #200	; 0xc8
 801001c:	f005 fca4 	bl	8015968 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 8010020:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8010024:	2378      	movs	r3, #120	; 0x78
 8010026:	4619      	mov	r1, r3
 8010028:	f44f 7283 	mov.w	r2, #262	; 0x106
 801002c:	200a      	movs	r0, #10
 801002e:	9500      	str	r5, [sp, #0]
 8010030:	f00e fcc6 	bl	801e9c0 <TFT_DrawLine>
		GUI_Text_CIE_xy(20, 145);
 8010034:	2191      	movs	r1, #145	; 0x91
 8010036:	2014      	movs	r0, #20
 8010038:	f009 f996 	bl	8019368 <GUI_Text_CIE_xy>
		GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 801003c:	8822      	ldrh	r2, [r4, #0]
 801003e:	2185      	movs	r1, #133	; 0x85
 8010040:	f002 0220 	and.w	r2, r2, #32
 8010044:	20c8      	movs	r0, #200	; 0xc8
 8010046:	f005 fc8f 	bl	8015968 <GUI_CheckBox>
		GUI_Text_CIE_xy_1931(35, 209);
 801004a:	21d1      	movs	r1, #209	; 0xd1
 801004c:	2023      	movs	r0, #35	; 0x23
 801004e:	f008 ff19 	bl	8018e84 <GUI_Text_CIE_xy_1931>
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8010052:	8823      	ldrh	r3, [r4, #0]
 8010054:	7832      	ldrb	r2, [r6, #0]
 8010056:	f003 0320 	and.w	r3, r3, #32
 801005a:	f002 0201 	and.w	r2, r2, #1
 801005e:	21c6      	movs	r1, #198	; 0xc6
 8010060:	20c8      	movs	r0, #200	; 0xc8
 8010062:	f005 fcc2 	bl	80159ea <GUI_RadioBox>
		GUI_Text_CIE_xy_1964(35, 275);
 8010066:	f240 1113 	movw	r1, #275	; 0x113
 801006a:	2023      	movs	r0, #35	; 0x23
 801006c:	f008 ff6a 	bl	8018f44 <GUI_Text_CIE_xy_1964>
		GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 8010070:	7832      	ldrb	r2, [r6, #0]
 8010072:	8823      	ldrh	r3, [r4, #0]
 8010074:	43d2      	mvns	r2, r2
 8010076:	f003 0320 	and.w	r3, r3, #32
 801007a:	f002 0201 	and.w	r2, r2, #1
 801007e:	f240 1107 	movw	r1, #263	; 0x107
 8010082:	20c8      	movs	r0, #200	; 0xc8
 8010084:	f005 fcb1 	bl	80159ea <GUI_RadioBox>
		TFT_DrawLine(10, 313, 262, 313, TFT_White);
 8010088:	f240 1339 	movw	r3, #313	; 0x139
 801008c:	4619      	mov	r1, r3
 801008e:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010092:	200a      	movs	r0, #10
 8010094:	9500      	str	r5, [sp, #0]
 8010096:	f00e fc93 	bl	801e9c0 <TFT_DrawLine>
		GUI_Text_CIE_Luv(20, 337);
 801009a:	f240 1151 	movw	r1, #337	; 0x151
 801009e:	2014      	movs	r0, #20
 80100a0:	f008 ffb0 	bl	8019004 <GUI_Text_CIE_Luv>
		GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 80100a4:	8822      	ldrh	r2, [r4, #0]
 80100a6:	f240 1147 	movw	r1, #327	; 0x147
 80100aa:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80100ae:	20c8      	movs	r0, #200	; 0xc8
 80100b0:	f005 fc5a 	bl	8015968 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 80100b4:	f240 1379 	movw	r3, #377	; 0x179
 80100b8:	9500      	str	r5, [sp, #0]
 80100ba:	f44f 7283 	mov.w	r2, #262	; 0x106
 80100be:	4619      	mov	r1, r3
 80100c0:	200a      	movs	r0, #10
 80100c2:	f00e fc7d 	bl	801e9c0 <TFT_DrawLine>
}
 80100c6:	b002      	add	sp, #8
 80100c8:	bd70      	pop	{r4, r5, r6, pc}
 80100ca:	bf00      	nop
 80100cc:	2000022a 	.word	0x2000022a
 80100d0:	20005279 	.word	0x20005279
 80100d4:	2000527e 	.word	0x2000527e
 80100d8:	2000527c 	.word	0x2000527c

080100dc <GUI_DataSet4_Screen>:
{
 80100dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 80100de:	4b4b      	ldr	r3, [pc, #300]	; (801020c <GUI_DataSet4_Screen+0x130>)
 80100e0:	4a4b      	ldr	r2, [pc, #300]	; (8010210 <GUI_DataSet4_Screen+0x134>)
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	7812      	ldrb	r2, [r2, #0]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	f000 808b 	beq.w	8010202 <GUI_DataSet4_Screen+0x126>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 80100ec:	4c49      	ldr	r4, [pc, #292]	; (8010214 <GUI_DataSet4_Screen+0x138>)
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 80100ee:	4d4a      	ldr	r5, [pc, #296]	; (8010218 <GUI_DataSet4_Screen+0x13c>)
		GUI_Panels();
 80100f0:	f7ff fe06 	bl	800fd00 <GUI_Panels>
		GUI_Text_CIE_Lab(20, 80);
 80100f4:	2150      	movs	r1, #80	; 0x50
 80100f6:	2014      	movs	r0, #20
 80100f8:	f008 ffd2 	bl	80190a0 <GUI_Text_CIE_Lab>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 80100fc:	8822      	ldrh	r2, [r4, #0]
 80100fe:	2141      	movs	r1, #65	; 0x41
 8010100:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8010104:	20c8      	movs	r0, #200	; 0xc8
 8010106:	f005 fc2f 	bl	8015968 <GUI_CheckBox>
		GUI_Text_A(40, 115);
 801010a:	2173      	movs	r1, #115	; 0x73
 801010c:	2028      	movs	r0, #40	; 0x28
 801010e:	f009 f86f 	bl	80191f0 <GUI_Text_A>
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8010112:	8823      	ldrh	r3, [r4, #0]
 8010114:	782a      	ldrb	r2, [r5, #0]
 8010116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801011a:	f002 0201 	and.w	r2, r2, #1
 801011e:	216c      	movs	r1, #108	; 0x6c
 8010120:	20c8      	movs	r0, #200	; 0xc8
 8010122:	f005 fc62 	bl	80159ea <GUI_RadioBox>
		GUI_Text_D65(40, 150);
 8010126:	2196      	movs	r1, #150	; 0x96
 8010128:	2028      	movs	r0, #40	; 0x28
 801012a:	f009 f877 	bl	801921c <GUI_Text_D65>
		GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 801012e:	8823      	ldrh	r3, [r4, #0]
 8010130:	782a      	ldrb	r2, [r5, #0]
 8010132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010136:	f002 0202 	and.w	r2, r2, #2
 801013a:	218f      	movs	r1, #143	; 0x8f
 801013c:	20c8      	movs	r0, #200	; 0xc8
 801013e:	f005 fc54 	bl	80159ea <GUI_RadioBox>
		GUI_Text_C(40, 185);
 8010142:	21b9      	movs	r1, #185	; 0xb9
 8010144:	2028      	movs	r0, #40	; 0x28
 8010146:	f009 f88d 	bl	8019264 <GUI_Text_C>
		GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 801014a:	8823      	ldrh	r3, [r4, #0]
 801014c:	782a      	ldrb	r2, [r5, #0]
 801014e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010152:	f002 0204 	and.w	r2, r2, #4
 8010156:	21b2      	movs	r1, #178	; 0xb2
 8010158:	20c8      	movs	r0, #200	; 0xc8
 801015a:	f005 fc46 	bl	80159ea <GUI_RadioBox>
		GUI_Text_D50(40, 220);
 801015e:	21dc      	movs	r1, #220	; 0xdc
 8010160:	2028      	movs	r0, #40	; 0x28
 8010162:	f009 f895 	bl	8019290 <GUI_Text_D50>
		GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 8010166:	8823      	ldrh	r3, [r4, #0]
 8010168:	782a      	ldrb	r2, [r5, #0]
 801016a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801016e:	f002 0208 	and.w	r2, r2, #8
 8010172:	21d5      	movs	r1, #213	; 0xd5
 8010174:	20c8      	movs	r0, #200	; 0xc8
 8010176:	f005 fc38 	bl	80159ea <GUI_RadioBox>
		GUI_Text_D55(40, 255);
 801017a:	21ff      	movs	r1, #255	; 0xff
 801017c:	2028      	movs	r0, #40	; 0x28
 801017e:	f009 f8ab 	bl	80192d8 <GUI_Text_D55>
		GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 8010182:	8823      	ldrh	r3, [r4, #0]
 8010184:	782a      	ldrb	r2, [r5, #0]
 8010186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801018a:	f002 0210 	and.w	r2, r2, #16
 801018e:	21f8      	movs	r1, #248	; 0xf8
 8010190:	20c8      	movs	r0, #200	; 0xc8
 8010192:	f005 fc2a 	bl	80159ea <GUI_RadioBox>
		GUI_Text_D75(40, 290);
 8010196:	f44f 7191 	mov.w	r1, #290	; 0x122
 801019a:	2028      	movs	r0, #40	; 0x28
 801019c:	f009 f8c0 	bl	8019320 <GUI_Text_D75>
		GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 80101a0:	8823      	ldrh	r3, [r4, #0]
 80101a2:	782a      	ldrb	r2, [r5, #0]
 80101a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101a8:	f002 0220 	and.w	r2, r2, #32
 80101ac:	f240 111b 	movw	r1, #283	; 0x11b
 80101b0:	20c8      	movs	r0, #200	; 0xc8
 80101b2:	f005 fc1a 	bl	80159ea <GUI_RadioBox>
		TFT_DrawLine(10, 330, 262, 330, TFT_White);
 80101b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80101c0:	4619      	mov	r1, r3
 80101c2:	200a      	movs	r0, #10
 80101c4:	f44f 7283 	mov.w	r2, #262	; 0x106
 80101c8:	f00e fbfa 	bl	801e9c0 <TFT_DrawLine>
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 80101cc:	4b13      	ldr	r3, [pc, #76]	; (801021c <GUI_DataSet4_Screen+0x140>)
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80101d4:	2014      	movs	r0, #20
 80101d6:	b1b3      	cbz	r3, 8010206 <GUI_DataSet4_Screen+0x12a>
 80101d8:	f009 fb40 	bl	801985c <GUI_Text_EbEr>
		GUI_CheckBox(200, 345, Measure_Field&EbEr);
 80101dc:	8822      	ldrh	r2, [r4, #0]
 80101de:	f240 1159 	movw	r1, #345	; 0x159
 80101e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80101e6:	20c8      	movs	r0, #200	; 0xc8
 80101e8:	f005 fbbe 	bl	8015968 <GUI_CheckBox>
		TFT_DrawLine(10, 390, 262, 390, TFT_White);
 80101ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	f44f 73c3 	mov.w	r3, #390	; 0x186
 80101f6:	f44f 7283 	mov.w	r2, #262	; 0x106
 80101fa:	4619      	mov	r1, r3
 80101fc:	200a      	movs	r0, #10
 80101fe:	f00e fbdf 	bl	801e9c0 <TFT_DrawLine>
}
 8010202:	b003      	add	sp, #12
 8010204:	bd30      	pop	{r4, r5, pc}
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 8010206:	f009 fb63 	bl	80198d0 <GUI_Text_LbLr>
 801020a:	e7e7      	b.n	80101dc <GUI_DataSet4_Screen+0x100>
 801020c:	2000022a 	.word	0x2000022a
 8010210:	20005279 	.word	0x20005279
 8010214:	2000527e 	.word	0x2000527e
 8010218:	2008c321 	.word	0x2008c321
 801021c:	20000a48 	.word	0x20000a48

08010220 <GUI_DataSet5_Screen>:
{
 8010220:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 8010222:	4b19      	ldr	r3, [pc, #100]	; (8010288 <GUI_DataSet5_Screen+0x68>)
 8010224:	4a19      	ldr	r2, [pc, #100]	; (801028c <GUI_DataSet5_Screen+0x6c>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	7812      	ldrb	r2, [r2, #0]
 801022a:	429a      	cmp	r2, r3
 801022c:	d02a      	beq.n	8010284 <GUI_DataSet5_Screen+0x64>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 801022e:	4d18      	ldr	r5, [pc, #96]	; (8010290 <GUI_DataSet5_Screen+0x70>)
		GUI_Panels();
 8010230:	f7ff fd66 	bl	800fd00 <GUI_Panels>
		GUI_Text_lambda_d(35, 86);
 8010234:	2156      	movs	r1, #86	; 0x56
 8010236:	2023      	movs	r0, #35	; 0x23
 8010238:	f009 f93c 	bl	80194b4 <GUI_Text_lambda_d>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 801023c:	882a      	ldrh	r2, [r5, #0]
 801023e:	2146      	movs	r1, #70	; 0x46
 8010240:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8010244:	20c8      	movs	r0, #200	; 0xc8
 8010246:	f005 fb8f 	bl	8015968 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 801024a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801024e:	2378      	movs	r3, #120	; 0x78
 8010250:	4619      	mov	r1, r3
 8010252:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010256:	200a      	movs	r0, #10
 8010258:	9400      	str	r4, [sp, #0]
 801025a:	f00e fbb1 	bl	801e9c0 <TFT_DrawLine>
		GUI_Text_SP(35, 145);
 801025e:	2191      	movs	r1, #145	; 0x91
 8010260:	2023      	movs	r0, #35	; 0x23
 8010262:	f009 f903 	bl	801946c <GUI_Text_SP>
		GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 8010266:	882a      	ldrh	r2, [r5, #0]
 8010268:	2185      	movs	r1, #133	; 0x85
 801026a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801026e:	20c8      	movs	r0, #200	; 0xc8
 8010270:	f005 fb7a 	bl	8015968 <GUI_CheckBox>
		TFT_DrawLine(10, 183, 262, 183, TFT_White);
 8010274:	23b7      	movs	r3, #183	; 0xb7
 8010276:	9400      	str	r4, [sp, #0]
 8010278:	f44f 7283 	mov.w	r2, #262	; 0x106
 801027c:	4619      	mov	r1, r3
 801027e:	200a      	movs	r0, #10
 8010280:	f00e fb9e 	bl	801e9c0 <TFT_DrawLine>
}
 8010284:	b003      	add	sp, #12
 8010286:	bd30      	pop	{r4, r5, pc}
 8010288:	2000022a 	.word	0x2000022a
 801028c:	20005279 	.word	0x20005279
 8010290:	2000527e 	.word	0x2000527e

08010294 <GUI_GraphSet1_Screen>:
{
 8010294:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 8010296:	4b1d      	ldr	r3, [pc, #116]	; (801030c <GUI_GraphSet1_Screen+0x78>)
 8010298:	4a1d      	ldr	r2, [pc, #116]	; (8010310 <GUI_GraphSet1_Screen+0x7c>)
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	7812      	ldrb	r2, [r2, #0]
 801029e:	4c1d      	ldr	r4, [pc, #116]	; (8010314 <GUI_GraphSet1_Screen+0x80>)
 80102a0:	4d1d      	ldr	r5, [pc, #116]	; (8010318 <GUI_GraphSet1_Screen+0x84>)
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d103      	bne.n	80102ae <GUI_GraphSet1_Screen+0x1a>
 80102a6:	7822      	ldrb	r2, [r4, #0]
 80102a8:	782b      	ldrb	r3, [r5, #0]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d022      	beq.n	80102f4 <GUI_GraphSet1_Screen+0x60>
		GUI_Panels();
 80102ae:	f7ff fd27 	bl	800fd00 <GUI_Panels>
		Language_status_prev = Language_status;
 80102b2:	782b      	ldrb	r3, [r5, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 80102b4:	4a19      	ldr	r2, [pc, #100]	; (801031c <GUI_GraphSet1_Screen+0x88>)
		Language_status_prev = Language_status;
 80102b6:	7023      	strb	r3, [r4, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 80102b8:	210c      	movs	r1, #12
 80102ba:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 80102bc:	b9e3      	cbnz	r3, 80102f8 <GUI_GraphSet1_Screen+0x64>
			GUI_OptionMenuRu();
 80102be:	f7ff f8fb 	bl	800f4b8 <GUI_OptionMenuRu>
			GUI_TextRu_PPF_bands(10, 337);
 80102c2:	f240 1151 	movw	r1, #337	; 0x151
 80102c6:	200a      	movs	r0, #10
 80102c8:	f00a feb2 	bl	801b030 <GUI_TextRu_PPF_bands>
			GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 80102cc:	4b14      	ldr	r3, [pc, #80]	; (8010320 <GUI_GraphSet1_Screen+0x8c>)
 80102ce:	781a      	ldrb	r2, [r3, #0]
 80102d0:	f240 1147 	movw	r1, #327	; 0x147
 80102d4:	f002 0201 	and.w	r2, r2, #1
 80102d8:	20c8      	movs	r0, #200	; 0xc8
 80102da:	f005 fb45 	bl	8015968 <GUI_CheckBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 80102de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	f240 1379 	movw	r3, #377	; 0x179
 80102e8:	f44f 7283 	mov.w	r2, #262	; 0x106
 80102ec:	4619      	mov	r1, r3
 80102ee:	200a      	movs	r0, #10
 80102f0:	f00e fb66 	bl	801e9c0 <TFT_DrawLine>
}
 80102f4:	b003      	add	sp, #12
 80102f6:	bd30      	pop	{r4, r5, pc}
		else if(Language_status == En){
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d1e7      	bne.n	80102cc <GUI_GraphSet1_Screen+0x38>
			GUI_OptionMenuEn();
 80102fc:	f7ff f94c 	bl	800f598 <GUI_OptionMenuEn>
			GUI_TextEn_PARwavebands(10, 339);
 8010300:	f240 1153 	movw	r1, #339	; 0x153
 8010304:	200a      	movs	r0, #10
 8010306:	f009 ff83 	bl	801a210 <GUI_TextEn_PARwavebands>
 801030a:	e7df      	b.n	80102cc <GUI_GraphSet1_Screen+0x38>
 801030c:	2000022a 	.word	0x2000022a
 8010310:	20005279 	.word	0x20005279
 8010314:	2008c31c 	.word	0x2008c31c
 8010318:	2000527b 	.word	0x2000527b
 801031c:	2008c8c0 	.word	0x2008c8c0
 8010320:	2000527a 	.word	0x2000527a

08010324 <GUI_GraphSet2_Screen>:
{
 8010324:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 8010326:	4b19      	ldr	r3, [pc, #100]	; (801038c <GUI_GraphSet2_Screen+0x68>)
 8010328:	4a19      	ldr	r2, [pc, #100]	; (8010390 <GUI_GraphSet2_Screen+0x6c>)
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	7812      	ldrb	r2, [r2, #0]
 801032e:	429a      	cmp	r2, r3
 8010330:	d02a      	beq.n	8010388 <GUI_GraphSet2_Screen+0x64>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8010332:	4d18      	ldr	r5, [pc, #96]	; (8010394 <GUI_GraphSet2_Screen+0x70>)
		GUI_Panels();
 8010334:	f7ff fce4 	bl	800fd00 <GUI_Panels>
		GUI_Text_EbEr(18, 82);
 8010338:	2152      	movs	r1, #82	; 0x52
 801033a:	2012      	movs	r0, #18
 801033c:	f009 fa8e 	bl	801985c <GUI_Text_EbEr>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8010340:	782a      	ldrb	r2, [r5, #0]
 8010342:	2146      	movs	r1, #70	; 0x46
 8010344:	f002 0202 	and.w	r2, r2, #2
 8010348:	20c8      	movs	r0, #200	; 0xc8
 801034a:	f005 fb0d 	bl	8015968 <GUI_CheckBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 801034e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8010352:	237a      	movs	r3, #122	; 0x7a
 8010354:	4619      	mov	r1, r3
 8010356:	f44f 7283 	mov.w	r2, #262	; 0x106
 801035a:	200a      	movs	r0, #10
 801035c:	9400      	str	r4, [sp, #0]
 801035e:	f00e fb2f 	bl	801e9c0 <TFT_DrawLine>
		GUI_Text_V_lambda(10, 145);
 8010362:	2191      	movs	r1, #145	; 0x91
 8010364:	200a      	movs	r0, #10
 8010366:	f009 f8c9 	bl	80194fc <GUI_Text_V_lambda>
		GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 801036a:	782a      	ldrb	r2, [r5, #0]
 801036c:	2185      	movs	r1, #133	; 0x85
 801036e:	f002 0204 	and.w	r2, r2, #4
 8010372:	20c8      	movs	r0, #200	; 0xc8
 8010374:	f005 faf8 	bl	8015968 <GUI_CheckBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 8010378:	23b9      	movs	r3, #185	; 0xb9
 801037a:	9400      	str	r4, [sp, #0]
 801037c:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010380:	4619      	mov	r1, r3
 8010382:	200a      	movs	r0, #10
 8010384:	f00e fb1c 	bl	801e9c0 <TFT_DrawLine>
}
 8010388:	b003      	add	sp, #12
 801038a:	bd30      	pop	{r4, r5, pc}
 801038c:	2000022a 	.word	0x2000022a
 8010390:	20005279 	.word	0x20005279
 8010394:	2000527a 	.word	0x2000527a

08010398 <GUI_ColorSet1_Screen>:
{
 8010398:	b513      	push	{r0, r1, r4, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 801039a:	4b1b      	ldr	r3, [pc, #108]	; (8010408 <GUI_ColorSet1_Screen+0x70>)
 801039c:	4a1b      	ldr	r2, [pc, #108]	; (801040c <GUI_ColorSet1_Screen+0x74>)
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	7812      	ldrb	r2, [r2, #0]
 80103a2:	4c1b      	ldr	r4, [pc, #108]	; (8010410 <GUI_ColorSet1_Screen+0x78>)
 80103a4:	429a      	cmp	r2, r3
 80103a6:	4b1b      	ldr	r3, [pc, #108]	; (8010414 <GUI_ColorSet1_Screen+0x7c>)
 80103a8:	d103      	bne.n	80103b2 <GUI_ColorSet1_Screen+0x1a>
 80103aa:	7819      	ldrb	r1, [r3, #0]
 80103ac:	7822      	ldrb	r2, [r4, #0]
 80103ae:	4291      	cmp	r1, r2
 80103b0:	d023      	beq.n	80103fa <GUI_ColorSet1_Screen+0x62>
		Language_status_prev = Language_status;
 80103b2:	7822      	ldrb	r2, [r4, #0]
 80103b4:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 80103b6:	f7ff fca3 	bl	800fd00 <GUI_Panels>
		Prev_Inf_Screen2 = ColorSet1_Screen;
 80103ba:	4b17      	ldr	r3, [pc, #92]	; (8010418 <GUI_ColorSet1_Screen+0x80>)
 80103bc:	220e      	movs	r2, #14
 80103be:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 80103c0:	7823      	ldrb	r3, [r4, #0]
 80103c2:	b9e3      	cbnz	r3, 80103fe <GUI_ColorSet1_Screen+0x66>
			GUI_OptionMenuRu();
 80103c4:	f7ff f878 	bl	800f4b8 <GUI_OptionMenuRu>
			GUI_Text_CIE_xy(10, 337);
 80103c8:	f240 1151 	movw	r1, #337	; 0x151
 80103cc:	200a      	movs	r0, #10
 80103ce:	f008 ffcb 	bl	8019368 <GUI_Text_CIE_xy>
			GUI_RadioBox(200, 327, Color_Field&Color_CIE_xy, 0x01);
 80103d2:	4b12      	ldr	r3, [pc, #72]	; (801041c <GUI_ColorSet1_Screen+0x84>)
 80103d4:	781a      	ldrb	r2, [r3, #0]
 80103d6:	2301      	movs	r3, #1
 80103d8:	401a      	ands	r2, r3
 80103da:	f240 1147 	movw	r1, #327	; 0x147
 80103de:	20c8      	movs	r0, #200	; 0xc8
 80103e0:	f005 fb03 	bl	80159ea <GUI_RadioBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 80103e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	f240 1379 	movw	r3, #377	; 0x179
 80103ee:	f44f 7283 	mov.w	r2, #262	; 0x106
 80103f2:	4619      	mov	r1, r3
 80103f4:	200a      	movs	r0, #10
 80103f6:	f00e fae3 	bl	801e9c0 <TFT_DrawLine>
}
 80103fa:	b002      	add	sp, #8
 80103fc:	bd10      	pop	{r4, pc}
		else if(Language_status == En){
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d1e2      	bne.n	80103c8 <GUI_ColorSet1_Screen+0x30>
			GUI_OptionMenuEn();
 8010402:	f7ff f8c9 	bl	800f598 <GUI_OptionMenuEn>
 8010406:	e7df      	b.n	80103c8 <GUI_ColorSet1_Screen+0x30>
 8010408:	2000022a 	.word	0x2000022a
 801040c:	20005279 	.word	0x20005279
 8010410:	2000527b 	.word	0x2000527b
 8010414:	2008c31c 	.word	0x2008c31c
 8010418:	2008c8c0 	.word	0x2008c8c0
 801041c:	20005277 	.word	0x20005277

08010420 <GUI_ColorSet2_Screen>:
{
 8010420:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 8010422:	4b1a      	ldr	r3, [pc, #104]	; (801048c <GUI_ColorSet2_Screen+0x6c>)
 8010424:	4a1a      	ldr	r2, [pc, #104]	; (8010490 <GUI_ColorSet2_Screen+0x70>)
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	7812      	ldrb	r2, [r2, #0]
 801042a:	429a      	cmp	r2, r3
 801042c:	d02c      	beq.n	8010488 <GUI_ColorSet2_Screen+0x68>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 801042e:	4d19      	ldr	r5, [pc, #100]	; (8010494 <GUI_ColorSet2_Screen+0x74>)
		GUI_Panels();
 8010430:	f7ff fc66 	bl	800fd00 <GUI_Panels>
		GUI_Text_CIE_Luv(20, 82);
 8010434:	2152      	movs	r1, #82	; 0x52
 8010436:	2014      	movs	r0, #20
 8010438:	f008 fde4 	bl	8019004 <GUI_Text_CIE_Luv>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 801043c:	782a      	ldrb	r2, [r5, #0]
 801043e:	2301      	movs	r3, #1
 8010440:	f002 0204 	and.w	r2, r2, #4
 8010444:	2146      	movs	r1, #70	; 0x46
 8010446:	20c8      	movs	r0, #200	; 0xc8
 8010448:	f005 facf 	bl	80159ea <GUI_RadioBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 801044c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8010450:	237a      	movs	r3, #122	; 0x7a
 8010452:	4619      	mov	r1, r3
 8010454:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010458:	200a      	movs	r0, #10
 801045a:	9400      	str	r4, [sp, #0]
 801045c:	f00e fab0 	bl	801e9c0 <TFT_DrawLine>
		GUI_Text_CIE_Lab(20, 145);
 8010460:	2191      	movs	r1, #145	; 0x91
 8010462:	2014      	movs	r0, #20
 8010464:	f008 fe1c 	bl	80190a0 <GUI_Text_CIE_Lab>
		GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 8010468:	782a      	ldrb	r2, [r5, #0]
 801046a:	2301      	movs	r3, #1
 801046c:	f002 0202 	and.w	r2, r2, #2
 8010470:	2185      	movs	r1, #133	; 0x85
 8010472:	20c8      	movs	r0, #200	; 0xc8
 8010474:	f005 fab9 	bl	80159ea <GUI_RadioBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 8010478:	23b9      	movs	r3, #185	; 0xb9
 801047a:	9400      	str	r4, [sp, #0]
 801047c:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010480:	4619      	mov	r1, r3
 8010482:	200a      	movs	r0, #10
 8010484:	f00e fa9c 	bl	801e9c0 <TFT_DrawLine>
}
 8010488:	b003      	add	sp, #12
 801048a:	bd30      	pop	{r4, r5, pc}
 801048c:	2000022a 	.word	0x2000022a
 8010490:	20005279 	.word	0x20005279
 8010494:	20005277 	.word	0x20005277

08010498 <GUI_ColorRendSet_Screen>:
{
 8010498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 801049a:	4b28      	ldr	r3, [pc, #160]	; (801053c <GUI_ColorRendSet_Screen+0xa4>)
 801049c:	4d28      	ldr	r5, [pc, #160]	; (8010540 <GUI_ColorRendSet_Screen+0xa8>)
 801049e:	4c29      	ldr	r4, [pc, #164]	; (8010544 <GUI_ColorRendSet_Screen+0xac>)
 80104a0:	2202      	movs	r2, #2
 80104a2:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 80104a4:	4b28      	ldr	r3, [pc, #160]	; (8010548 <GUI_ColorRendSet_Screen+0xb0>)
 80104a6:	4a29      	ldr	r2, [pc, #164]	; (801054c <GUI_ColorRendSet_Screen+0xb4>)
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	7812      	ldrb	r2, [r2, #0]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d103      	bne.n	80104b8 <GUI_ColorRendSet_Screen+0x20>
 80104b0:	782a      	ldrb	r2, [r5, #0]
 80104b2:	7823      	ldrb	r3, [r4, #0]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d03e      	beq.n	8010536 <GUI_ColorRendSet_Screen+0x9e>
		GUI_Panels();
 80104b8:	f7ff fc22 	bl	800fd00 <GUI_Panels>
		Language_status_prev = Language_status;
 80104bc:	7823      	ldrb	r3, [r4, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 80104be:	4a24      	ldr	r2, [pc, #144]	; (8010550 <GUI_ColorRendSet_Screen+0xb8>)
		Language_status_prev = Language_status;
 80104c0:	702b      	strb	r3, [r5, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 80104c2:	2110      	movs	r1, #16
 80104c4:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 80104c6:	b90b      	cbnz	r3, 80104cc <GUI_ColorRendSet_Screen+0x34>
			GUI_OptionMenuRu();
 80104c8:	f7fe fff6 	bl	800f4b8 <GUI_OptionMenuRu>
		if(Language_status == En){
 80104cc:	7823      	ldrb	r3, [r4, #0]
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d101      	bne.n	80104d6 <GUI_ColorRendSet_Screen+0x3e>
			GUI_OptionMenuEn();
 80104d2:	f7ff f861 	bl	800f598 <GUI_OptionMenuEn>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80104d6:	4d1f      	ldr	r5, [pc, #124]	; (8010554 <GUI_ColorRendSet_Screen+0xbc>)
			GUI_Text_CRI(30, 325);
 80104d8:	f240 1145 	movw	r1, #325	; 0x145
 80104dc:	201e      	movs	r0, #30
 80104de:	f008 ff7d 	bl	80193dc <GUI_Text_CRI>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80104e2:	782a      	ldrb	r2, [r5, #0]
 80104e4:	2301      	movs	r3, #1
 80104e6:	401a      	ands	r2, r3
 80104e8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80104ec:	20b9      	movs	r0, #185	; 0xb9
 80104ee:	f005 fa7c 	bl	80159ea <GUI_RadioBox>
			TFT_DrawLine(10, 355, 262, 355, TFT_White);
 80104f2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80104f6:	f240 1363 	movw	r3, #355	; 0x163
 80104fa:	4619      	mov	r1, r3
 80104fc:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010500:	200a      	movs	r0, #10
 8010502:	9400      	str	r4, [sp, #0]
 8010504:	f00e fa5c 	bl	801e9c0 <TFT_DrawLine>
			GUI_Text_CQS(30, 369);
 8010508:	f240 1171 	movw	r1, #369	; 0x171
 801050c:	201e      	movs	r0, #30
 801050e:	f008 ff89 	bl	8019424 <GUI_Text_CQS>
			GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 8010512:	782a      	ldrb	r2, [r5, #0]
 8010514:	2301      	movs	r3, #1
 8010516:	43d2      	mvns	r2, r2
 8010518:	401a      	ands	r2, r3
 801051a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801051e:	20b9      	movs	r0, #185	; 0xb9
 8010520:	f005 fa63 	bl	80159ea <GUI_RadioBox>
			TFT_DrawLine(10, 401, 262, 401, TFT_White);
 8010524:	f240 1391 	movw	r3, #401	; 0x191
 8010528:	9400      	str	r4, [sp, #0]
 801052a:	f44f 7283 	mov.w	r2, #262	; 0x106
 801052e:	4619      	mov	r1, r3
 8010530:	200a      	movs	r0, #10
 8010532:	f00e fa45 	bl	801e9c0 <TFT_DrawLine>
}
 8010536:	b003      	add	sp, #12
 8010538:	bd30      	pop	{r4, r5, pc}
 801053a:	bf00      	nop
 801053c:	20000230 	.word	0x20000230
 8010540:	2008c31c 	.word	0x2008c31c
 8010544:	2000527b 	.word	0x2000527b
 8010548:	2000022a 	.word	0x2000022a
 801054c:	20005279 	.word	0x20005279
 8010550:	2008c8c0 	.word	0x2008c8c0
 8010554:	20005278 	.word	0x20005278

08010558 <GUI_Graph_Screen>:
void GUI_Graph_Screen(){
 8010558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801055c:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 8010560:	4b87      	ldr	r3, [pc, #540]	; (8010780 <GUI_Graph_Screen+0x228>)
 8010562:	4a88      	ldr	r2, [pc, #544]	; (8010784 <GUI_Graph_Screen+0x22c>)
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	7812      	ldrb	r2, [r2, #0]
 8010568:	4d87      	ldr	r5, [pc, #540]	; (8010788 <GUI_Graph_Screen+0x230>)
 801056a:	4c88      	ldr	r4, [pc, #544]	; (801078c <GUI_Graph_Screen+0x234>)
 801056c:	429a      	cmp	r2, r3
void GUI_Graph_Screen(){
 801056e:	b083      	sub	sp, #12
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 8010570:	d104      	bne.n	801057c <GUI_Graph_Screen+0x24>
 8010572:	782a      	ldrb	r2, [r5, #0]
 8010574:	7823      	ldrb	r3, [r4, #0]
 8010576:	429a      	cmp	r2, r3
 8010578:	f000 809d 	beq.w	80106b6 <GUI_Graph_Screen+0x15e>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801057c:	2063      	movs	r0, #99	; 0x63
 801057e:	f00e f853 	bl	801e628 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 8010582:	4a83      	ldr	r2, [pc, #524]	; (8010790 <GUI_Graph_Screen+0x238>)
 8010584:	2300      	movs	r3, #0
 8010586:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010588:	4a82      	ldr	r2, [pc, #520]	; (8010794 <GUI_Graph_Screen+0x23c>)
 801058a:	7013      	strb	r3, [r2, #0]
		GUI_Panels();		
 801058c:	f7ff fbb8 	bl	800fd00 <GUI_Panels>
		Rotation_Screen_Spectral_Old = Rotation_Screen_Spectral;
 8010590:	7820      	ldrb	r0, [r4, #0]
 8010592:	7028      	strb	r0, [r5, #0]
		if(Graph_Field&PPF_Bands)
 8010594:	4d80      	ldr	r5, [pc, #512]	; (8010798 <GUI_Graph_Screen+0x240>)
 8010596:	782b      	ldrb	r3, [r5, #0]
 8010598:	07d9      	lsls	r1, r3, #31
 801059a:	d501      	bpl.n	80105a0 <GUI_Graph_Screen+0x48>
			Spectral_PAR_Range(Rotation_Screen_Spectral);
 801059c:	f00d fa78 	bl	801da90 <Spectral_PAR_Range>
		if(Graph_Field&V_lambda)
 80105a0:	782b      	ldrb	r3, [r5, #0]
 80105a2:	075a      	lsls	r2, r3, #29
 80105a4:	d538      	bpl.n	8010618 <GUI_Graph_Screen+0xc0>
			if(Rotation_Screen_Spectral == 0)
 80105a6:	7820      	ldrb	r0, [r4, #0]
 80105a8:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80107a8 <GUI_Graph_Screen+0x250>
 80105ac:	f8df c210 	ldr.w	ip, [pc, #528]	; 80107c0 <GUI_Graph_Screen+0x268>
 80105b0:	4e7a      	ldr	r6, [pc, #488]	; (801079c <GUI_Graph_Screen+0x244>)
 80105b2:	4f7b      	ldr	r7, [pc, #492]	; (80107a0 <GUI_Graph_Screen+0x248>)
 80105b4:	2800      	cmp	r0, #0
 80105b6:	f040 8086 	bne.w	80106c6 <GUI_Graph_Screen+0x16e>
						buf_pix = (Spectral_day[i])*307;
 80105ba:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80107a4 <GUI_Graph_Screen+0x24c>
 80105be:	4603      	mov	r3, r0
 80105c0:	0119      	lsls	r1, r3, #4
 80105c2:	eb0c 0201 	add.w	r2, ip, r1
 80105c6:	edd2 7a00 	vldr	s15, [r2]
 80105ca:	ee67 7a87 	vmul.f32	s15, s15, s14
						buf_pix = (Spectral_night[i])*307;
 80105ce:	4439      	add	r1, r7
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 80105d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105d4:	ee17 2a90 	vmov	r2, s15
						buf_pix = (Spectral_night[i])*307;
 80105d8:	edd1 7a00 	vldr	s15, [r1]
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 80105dc:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
						buf_pix = (Spectral_night[i])*307;
 80105e0:	ee67 7a87 	vmul.f32	s15, s15, s14
						graph_spectral_night[jj] = (uint16_t)buf_pix;
 80105e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105e8:	ee17 2a90 	vmov	r2, s15
 80105ec:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80105f0:	3301      	adds	r3, #1
				for(uint16_t i = 0; i < 1024; i+=4)
 80105f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105f6:	d1e3      	bne.n	80105c0 <GUI_Graph_Screen+0x68>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, Rotation_Screen_Spectral);
 80105f8:	2114      	movs	r1, #20
 80105fa:	9000      	str	r0, [sp, #0]
 80105fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8010600:	4608      	mov	r0, r1
 8010602:	4a69      	ldr	r2, [pc, #420]	; (80107a8 <GUI_Graph_Screen+0x250>)
 8010604:	f00d fc04 	bl	801de10 <Spectral_DrawGraph_Const>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, Rotation_Screen_Spectral);
 8010608:	7823      	ldrb	r3, [r4, #0]
 801060a:	9300      	str	r3, [sp, #0]
 801060c:	2114      	movs	r1, #20
 801060e:	231f      	movs	r3, #31
 8010610:	4a62      	ldr	r2, [pc, #392]	; (801079c <GUI_Graph_Screen+0x244>)
 8010612:	4608      	mov	r0, r1
 8010614:	f00d fbfc 	bl	801de10 <Spectral_DrawGraph_Const>
			if(Graph_Field&EbEr_graph)
 8010618:	782b      	ldrb	r3, [r5, #0]
 801061a:	079b      	lsls	r3, r3, #30
 801061c:	d545      	bpl.n	80106aa <GUI_Graph_Screen+0x152>
				if(Rotation_Screen_Spectral == 0)
 801061e:	7826      	ldrb	r6, [r4, #0]
 8010620:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80107b4 <GUI_Graph_Screen+0x25c>
 8010624:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80107c4 <GUI_Graph_Screen+0x26c>
 8010628:	4f60      	ldr	r7, [pc, #384]	; (80107ac <GUI_Graph_Screen+0x254>)
 801062a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80107c8 <GUI_Graph_Screen+0x270>
 801062e:	2e00      	cmp	r6, #0
 8010630:	d16c      	bne.n	801070c <GUI_Graph_Screen+0x1b4>
							buf_pix = (Hazard_Blue[i])*307;
 8010632:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 80107a4 <GUI_Graph_Screen+0x24c>
 8010636:	4635      	mov	r5, r6
 8010638:	012a      	lsls	r2, r5, #4
 801063a:	eb0a 0302 	add.w	r3, sl, r2
 801063e:	edd3 7a00 	vldr	s15, [r3]
 8010642:	ee67 7a88 	vmul.f32	s15, s15, s16
							buf_pix = (Hazard_Retina[i])/10.*307;
 8010646:	4442      	add	r2, r8
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 8010648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							buf_pix = (Hazard_Retina[i])/10.*307;
 801064c:	6810      	ldr	r0, [r2, #0]
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 801064e:	ee17 3a90 	vmov	r3, s15
 8010652:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
							buf_pix = (Hazard_Retina[i])/10.*307;
 8010656:	f7ef ff8f 	bl	8000578 <__aeabi_f2d>
 801065a:	2200      	movs	r2, #0
 801065c:	4b54      	ldr	r3, [pc, #336]	; (80107b0 <GUI_Graph_Screen+0x258>)
 801065e:	f7f0 f909 	bl	8000874 <__aeabi_ddiv>
 8010662:	a343      	add	r3, pc, #268	; (adr r3, 8010770 <GUI_Graph_Screen+0x218>)
 8010664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010668:	f7ef ffda 	bl	8000620 <__aeabi_dmul>
 801066c:	f7f0 fad0 	bl	8000c10 <__aeabi_d2f>
							graph_spectral_Retina[jj] = (uint16_t)buf_pix;
 8010670:	ee07 0a90 	vmov	s15, r0
 8010674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010678:	ee17 0a90 	vmov	r0, s15
 801067c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 8010680:	3501      	adds	r5, #1
					for(uint16_t i = 0; i < 1024; i+=4)
 8010682:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010686:	d1d7      	bne.n	8010638 <GUI_Graph_Screen+0xe0>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, Rotation_Screen_Spectral);
 8010688:	2114      	movs	r1, #20
 801068a:	4608      	mov	r0, r1
 801068c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8010690:	4a48      	ldr	r2, [pc, #288]	; (80107b4 <GUI_Graph_Screen+0x25c>)
 8010692:	9600      	str	r6, [sp, #0]
 8010694:	f00d fbbc 	bl	801de10 <Spectral_DrawGraph_Const>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, Rotation_Screen_Spectral);
 8010698:	7823      	ldrb	r3, [r4, #0]
 801069a:	9300      	str	r3, [sp, #0]
 801069c:	2114      	movs	r1, #20
 801069e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80106a2:	4a42      	ldr	r2, [pc, #264]	; (80107ac <GUI_Graph_Screen+0x254>)
 80106a4:	4608      	mov	r0, r1
 80106a6:	f00d fbb3 	bl	801de10 <Spectral_DrawGraph_Const>
		Spectral_Axes(Rotation_Screen_Spectral);
 80106aa:	7820      	ldrb	r0, [r4, #0]
 80106ac:	f00d f922 	bl	801d8f4 <Spectral_Axes>
		Spectral_Axes_Text(Rotation_Screen_Spectral);
 80106b0:	7820      	ldrb	r0, [r4, #0]
 80106b2:	f00d facf 	bl	801dc54 <Spectral_Axes_Text>
	Prev_Inf_Screen = Graph_Screen;	
 80106b6:	4b40      	ldr	r3, [pc, #256]	; (80107b8 <GUI_Graph_Screen+0x260>)
 80106b8:	2204      	movs	r2, #4
 80106ba:	701a      	strb	r2, [r3, #0]
}
 80106bc:	b003      	add	sp, #12
 80106be:	ecbd 8b02 	vpop	{d8}
 80106c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								buf_pix = (Spectral_day[i])*209;
 80106c6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80107bc <GUI_Graph_Screen+0x264>
 80106ca:	2300      	movs	r3, #0
 80106cc:	f04f 080c 	mov.w	r8, #12
 80106d0:	fb08 f103 	mul.w	r1, r8, r3
 80106d4:	eb0c 0201 	add.w	r2, ip, r1
 80106d8:	edd2 7a00 	vldr	s15, [r2]
 80106dc:	ee67 7a87 	vmul.f32	s15, s15, s14
								buf_pix = (Spectral_night[i])*209;
 80106e0:	4439      	add	r1, r7
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 80106e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80106e6:	ee17 2a90 	vmov	r2, s15
								buf_pix = (Spectral_night[i])*209;
 80106ea:	edd1 7a00 	vldr	s15, [r1]
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 80106ee:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
								buf_pix = (Spectral_night[i])*209;
 80106f2:	ee67 7a87 	vmul.f32	s15, s15, s14
								graph_spectral_night[ii] = (uint16_t)buf_pix;
 80106f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80106fa:	ee17 2a90 	vmov	r2, s15
 80106fe:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8010702:	3301      	adds	r3, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 8010704:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8010708:	d1e2      	bne.n	80106d0 <GUI_Graph_Screen+0x178>
 801070a:	e775      	b.n	80105f8 <GUI_Graph_Screen+0xa0>
								buf_pix = (Hazard_Blue[i])*209;
 801070c:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 80107bc <GUI_Graph_Screen+0x264>
 8010710:	2500      	movs	r5, #0
 8010712:	f04f 0b0c 	mov.w	fp, #12
 8010716:	fb0b f205 	mul.w	r2, fp, r5
 801071a:	eb0a 0302 	add.w	r3, sl, r2
 801071e:	edd3 7a00 	vldr	s15, [r3]
 8010722:	ee67 7a88 	vmul.f32	s15, s15, s16
								buf_pix = (Hazard_Retina[i])/10.*209;
 8010726:	4442      	add	r2, r8
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 8010728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
								buf_pix = (Hazard_Retina[i])/10.*209;
 801072c:	6810      	ldr	r0, [r2, #0]
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 801072e:	ee17 3a90 	vmov	r3, s15
 8010732:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
								buf_pix = (Hazard_Retina[i])/10.*209;
 8010736:	f7ef ff1f 	bl	8000578 <__aeabi_f2d>
 801073a:	2200      	movs	r2, #0
 801073c:	4b1c      	ldr	r3, [pc, #112]	; (80107b0 <GUI_Graph_Screen+0x258>)
 801073e:	f7f0 f899 	bl	8000874 <__aeabi_ddiv>
 8010742:	a30d      	add	r3, pc, #52	; (adr r3, 8010778 <GUI_Graph_Screen+0x220>)
 8010744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010748:	f7ef ff6a 	bl	8000620 <__aeabi_dmul>
 801074c:	f7f0 fa60 	bl	8000c10 <__aeabi_d2f>
								graph_spectral_Retina[ii] = (uint16_t)buf_pix;
 8010750:	ee07 0a90 	vmov	s15, r0
 8010754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010758:	ee17 0a90 	vmov	r0, s15
 801075c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 8010760:	3501      	adds	r5, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 8010762:	f5b5 7fab 	cmp.w	r5, #342	; 0x156
 8010766:	d1d6      	bne.n	8010716 <GUI_Graph_Screen+0x1be>
 8010768:	e78e      	b.n	8010688 <GUI_Graph_Screen+0x130>
 801076a:	bf00      	nop
 801076c:	f3af 8000 	nop.w
 8010770:	00000000 	.word	0x00000000
 8010774:	40733000 	.word	0x40733000
 8010778:	00000000 	.word	0x00000000
 801077c:	406a2000 	.word	0x406a2000
 8010780:	2000022a 	.word	0x2000022a
 8010784:	20005279 	.word	0x20005279
 8010788:	2008c8c1 	.word	0x2008c8c1
 801078c:	20005282 	.word	0x20005282
 8010790:	2000529f 	.word	0x2000529f
 8010794:	2000529e 	.word	0x2000529e
 8010798:	2000527a 	.word	0x2000527a
 801079c:	2008cb88 	.word	0x2008cb88
 80107a0:	2004f1e8 	.word	0x2004f1e8
 80107a4:	43998000 	.word	0x43998000
 80107a8:	2008c5ea 	.word	0x2008c5ea
 80107ac:	2008c324 	.word	0x2008c324
 80107b0:	40240000 	.word	0x40240000
 80107b4:	2008c8c2 	.word	0x2008c8c2
 80107b8:	2008c31d 	.word	0x2008c31d
 80107bc:	43510000 	.word	0x43510000
 80107c0:	2004e1e8 	.word	0x2004e1e8
 80107c4:	200055e0 	.word	0x200055e0
 80107c8:	200065e0 	.word	0x200065e0

080107cc <GUI_SignalLevel>:
}



void GUI_SignalLevel()
{
 80107cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(oldHighSignal != highSignal)
 80107ce:	4f2a      	ldr	r7, [pc, #168]	; (8010878 <GUI_SignalLevel+0xac>)
 80107d0:	4e2a      	ldr	r6, [pc, #168]	; (801087c <GUI_SignalLevel+0xb0>)
 80107d2:	783b      	ldrb	r3, [r7, #0]
 80107d4:	7832      	ldrb	r2, [r6, #0]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d00a      	beq.n	80107f0 <GUI_SignalLevel+0x24>
  {
    if(highSignal)
 80107da:	b363      	cbz	r3, 8010836 <GUI_SignalLevel+0x6a>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 80107dc:	4b28      	ldr	r3, [pc, #160]	; (8010880 <GUI_SignalLevel+0xb4>)
 80107de:	781a      	ldrb	r2, [r3, #0]
 80107e0:	4b28      	ldr	r3, [pc, #160]	; (8010884 <GUI_SignalLevel+0xb8>)
 80107e2:	211e      	movs	r1, #30
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	b9f2      	cbnz	r2, 8010826 <GUI_SignalLevel+0x5a>
 80107e8:	b1cb      	cbz	r3, 801081e <GUI_SignalLevel+0x52>
 80107ea:	200f      	movs	r0, #15
 80107ec:	f00b fa7e 	bl	801bcec <GUI_TextMsgRu_HighIrradiance>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
  
  if(oldLowSignal != lowSignal)
 80107f0:	4d25      	ldr	r5, [pc, #148]	; (8010888 <GUI_SignalLevel+0xbc>)
 80107f2:	4c26      	ldr	r4, [pc, #152]	; (801088c <GUI_SignalLevel+0xc0>)
 80107f4:	782b      	ldrb	r3, [r5, #0]
 80107f6:	7820      	ldrb	r0, [r4, #0]
 80107f8:	4298      	cmp	r0, r3
 80107fa:	d00a      	beq.n	8010812 <GUI_SignalLevel+0x46>
  {
    if(lowSignal)
 80107fc:	b38b      	cbz	r3, 8010862 <GUI_SignalLevel+0x96>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 80107fe:	4b20      	ldr	r3, [pc, #128]	; (8010880 <GUI_SignalLevel+0xb4>)
 8010800:	781a      	ldrb	r2, [r3, #0]
 8010802:	4b20      	ldr	r3, [pc, #128]	; (8010884 <GUI_SignalLevel+0xb8>)
 8010804:	211e      	movs	r1, #30
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	bb1a      	cbnz	r2, 8010852 <GUI_SignalLevel+0x86>
 801080a:	b1f3      	cbz	r3, 801084a <GUI_SignalLevel+0x7e>
 801080c:	2014      	movs	r0, #20
 801080e:	f00b f975 	bl	801bafc <GUI_TextMsgRu_LowIrradiance>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
	oldHighSignal = highSignal;
 8010812:	783b      	ldrb	r3, [r7, #0]
 8010814:	7033      	strb	r3, [r6, #0]
	oldLowSignal = lowSignal;
 8010816:	782b      	ldrb	r3, [r5, #0]
 8010818:	7023      	strb	r3, [r4, #0]
}
 801081a:	b003      	add	sp, #12
 801081c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 801081e:	2032      	movs	r0, #50	; 0x32
 8010820:	f00b fb00 	bl	801be24 <GUI_TextMsgRu_HighRadiance>
 8010824:	e7e4      	b.n	80107f0 <GUI_SignalLevel+0x24>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
 8010826:	2037      	movs	r0, #55	; 0x37
 8010828:	b113      	cbz	r3, 8010830 <GUI_SignalLevel+0x64>
 801082a:	f009 f9fd 	bl	8019c28 <GUI_TextMsgEn_HighIrradiance>
 801082e:	e7df      	b.n	80107f0 <GUI_SignalLevel+0x24>
 8010830:	f009 fa72 	bl	8019d18 <GUI_TextMsgEn_HighRadiance>
 8010834:	e7dc      	b.n	80107f0 <GUI_SignalLevel+0x24>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 8010836:	2363      	movs	r3, #99	; 0x63
 8010838:	9300      	str	r3, [sp, #0]
 801083a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801083e:	2338      	movs	r3, #56	; 0x38
 8010840:	2120      	movs	r1, #32
 8010842:	200a      	movs	r0, #10
 8010844:	f00e f924 	bl	801ea90 <TFT_FillRectangle>
 8010848:	e7d2      	b.n	80107f0 <GUI_SignalLevel+0x24>
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 801084a:	2037      	movs	r0, #55	; 0x37
 801084c:	f00b f9e4 	bl	801bc18 <GUI_TextMsgRu_LowRadiance>
 8010850:	e7df      	b.n	8010812 <GUI_SignalLevel+0x46>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
 8010852:	2046      	movs	r0, #70	; 0x46
 8010854:	b113      	cbz	r3, 801085c <GUI_SignalLevel+0x90>
 8010856:	f009 fb2d 	bl	8019eb4 <GUI_TextMsgEn_LowIrradiance>
 801085a:	e7da      	b.n	8010812 <GUI_SignalLevel+0x46>
 801085c:	f009 fac6 	bl	8019dec <GUI_TextMsgEn_LowRadiance>
 8010860:	e7d7      	b.n	8010812 <GUI_SignalLevel+0x46>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 8010862:	2363      	movs	r3, #99	; 0x63
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801086a:	2338      	movs	r3, #56	; 0x38
 801086c:	2120      	movs	r1, #32
 801086e:	200a      	movs	r0, #10
 8010870:	f00e f90e 	bl	801ea90 <TFT_FillRectangle>
 8010874:	e7cd      	b.n	8010812 <GUI_SignalLevel+0x46>
 8010876:	bf00      	nop
 8010878:	2008be63 	.word	0x2008be63
 801087c:	2000529e 	.word	0x2000529e
 8010880:	2000527b 	.word	0x2000527b
 8010884:	20000a48 	.word	0x20000a48
 8010888:	2008be66 	.word	0x2008be66
 801088c:	2000529f 	.word	0x2000529f

08010890 <GUI_Measure_Screen>:
void GUI_Measure_Screen(){
 8010890:	b510      	push	{r4, lr}
	if(preGUI_screen_state != GUI_screen_state){
 8010892:	4910      	ldr	r1, [pc, #64]	; (80108d4 <GUI_Measure_Screen+0x44>)
 8010894:	4c10      	ldr	r4, [pc, #64]	; (80108d8 <GUI_Measure_Screen+0x48>)
 8010896:	7809      	ldrb	r1, [r1, #0]
 8010898:	7822      	ldrb	r2, [r4, #0]
 801089a:	4291      	cmp	r1, r2
 801089c:	d014      	beq.n	80108c8 <GUI_Measure_Screen+0x38>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801089e:	2063      	movs	r0, #99	; 0x63
 80108a0:	f00d fec2 	bl	801e628 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 80108a4:	4b0d      	ldr	r3, [pc, #52]	; (80108dc <GUI_Measure_Screen+0x4c>)
 80108a6:	2000      	movs	r0, #0
 80108a8:	7018      	strb	r0, [r3, #0]
		oldHighSignal = 0;
 80108aa:	4b0d      	ldr	r3, [pc, #52]	; (80108e0 <GUI_Measure_Screen+0x50>)
 80108ac:	7018      	strb	r0, [r3, #0]
		screen_count = 0;
 80108ae:	4b0d      	ldr	r3, [pc, #52]	; (80108e4 <GUI_Measure_Screen+0x54>)
 80108b0:	7018      	strb	r0, [r3, #0]
		Measure_Elements_Draw(0);
 80108b2:	f7fe ff0d 	bl	800f6d0 <Measure_Elements_Draw>
		GUI_Up_Panel();
 80108b6:	f7ff f9bb 	bl	800fc30 <GUI_Up_Panel>
		GUI_Down_Panel();
 80108ba:	f7ff f9dd 	bl	800fc78 <GUI_Down_Panel>
		Prev_Inf_Screen = Measure_Screen;
 80108be:	4a0a      	ldr	r2, [pc, #40]	; (80108e8 <GUI_Measure_Screen+0x58>)
 80108c0:	2301      	movs	r3, #1
 80108c2:	7013      	strb	r3, [r2, #0]
		preGUI_screen_state = Measure_Screen;
 80108c4:	7023      	strb	r3, [r4, #0]
 80108c6:	bd10      	pop	{r4, pc}
		GUI_SignalLevel();
 80108c8:	f7ff ff80 	bl	80107cc <GUI_SignalLevel>
		Measure_Elements_Draw(0);
 80108cc:	2000      	movs	r0, #0
 80108ce:	f7fe feff 	bl	800f6d0 <Measure_Elements_Draw>
 80108d2:	e7f4      	b.n	80108be <GUI_Measure_Screen+0x2e>
 80108d4:	20005279 	.word	0x20005279
 80108d8:	2000022a 	.word	0x2000022a
 80108dc:	2000529f 	.word	0x2000529f
 80108e0:	2000529e 	.word	0x2000529e
 80108e4:	200052a3 	.word	0x200052a3
 80108e8:	2008c31d 	.word	0x2008c31d

080108ec <GUI_Measure2_Screen>:
{
 80108ec:	b510      	push	{r4, lr}
 old_meas_type_L = 2;
 80108ee:	4b13      	ldr	r3, [pc, #76]	; (801093c <GUI_Measure2_Screen+0x50>)
 80108f0:	4c13      	ldr	r4, [pc, #76]	; (8010940 <GUI_Measure2_Screen+0x54>)
 80108f2:	2202      	movs	r2, #2
 80108f4:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != Measure2_Screen){
 80108f6:	4b13      	ldr	r3, [pc, #76]	; (8010944 <GUI_Measure2_Screen+0x58>)
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d017      	beq.n	801092e <GUI_Measure2_Screen+0x42>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80108fe:	2063      	movs	r0, #99	; 0x63
 8010900:	f00d fe92 	bl	801e628 <TFT_FillScreen_DMA>
		current_state_Measure_Draw = state_Measure_Elements;
 8010904:	4b10      	ldr	r3, [pc, #64]	; (8010948 <GUI_Measure2_Screen+0x5c>)
 8010906:	7818      	ldrb	r0, [r3, #0]
		screen_count = 1;
 8010908:	4b10      	ldr	r3, [pc, #64]	; (801094c <GUI_Measure2_Screen+0x60>)
		current_state_Measure_Draw = state_Measure_Elements;
 801090a:	7020      	strb	r0, [r4, #0]
		screen_count = 1;
 801090c:	2201      	movs	r2, #1
 801090e:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010910:	4a0f      	ldr	r2, [pc, #60]	; (8010950 <GUI_Measure2_Screen+0x64>)
 8010912:	2300      	movs	r3, #0
 8010914:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010916:	4a0f      	ldr	r2, [pc, #60]	; (8010954 <GUI_Measure2_Screen+0x68>)
 8010918:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 801091a:	f7fe fed9 	bl	800f6d0 <Measure_Elements_Draw>
		GUI_Up_Panel();
 801091e:	f7ff f987 	bl	800fc30 <GUI_Up_Panel>
		GUI_Down_Panel();
 8010922:	f7ff f9a9 	bl	800fc78 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 8010926:	4b0c      	ldr	r3, [pc, #48]	; (8010958 <GUI_Measure2_Screen+0x6c>)
 8010928:	2201      	movs	r2, #1
 801092a:	701a      	strb	r2, [r3, #0]
 801092c:	bd10      	pop	{r4, pc}
			GUI_SignalLevel();
 801092e:	f7ff ff4d 	bl	80107cc <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 8010932:	7820      	ldrb	r0, [r4, #0]
 8010934:	f7fe fecc 	bl	800f6d0 <Measure_Elements_Draw>
 8010938:	e7f5      	b.n	8010926 <GUI_Measure2_Screen+0x3a>
 801093a:	bf00      	nop
 801093c:	20000230 	.word	0x20000230
 8010940:	2000529c 	.word	0x2000529c
 8010944:	2000022a 	.word	0x2000022a
 8010948:	200052a8 	.word	0x200052a8
 801094c:	200052a3 	.word	0x200052a3
 8010950:	2000529f 	.word	0x2000529f
 8010954:	2000529e 	.word	0x2000529e
 8010958:	2008c31d 	.word	0x2008c31d

0801095c <GUI_Measure3_Screen>:
{
 801095c:	b538      	push	{r3, r4, r5, lr}
 old_meas_type_L = 2;
 801095e:	4b12      	ldr	r3, [pc, #72]	; (80109a8 <GUI_Measure3_Screen+0x4c>)
 8010960:	4c12      	ldr	r4, [pc, #72]	; (80109ac <GUI_Measure3_Screen+0x50>)
 8010962:	2502      	movs	r5, #2
 8010964:	701d      	strb	r5, [r3, #0]
	if(preGUI_screen_state != Measure3_Screen){
 8010966:	4b12      	ldr	r3, [pc, #72]	; (80109b0 <GUI_Measure3_Screen+0x54>)
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b03      	cmp	r3, #3
 801096c:	d016      	beq.n	801099c <GUI_Measure3_Screen+0x40>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801096e:	2063      	movs	r0, #99	; 0x63
 8010970:	f00d fe5a 	bl	801e628 <TFT_FillScreen_DMA>
		current_state_Measure_Draw= state_Measure_Elements;
 8010974:	4b0f      	ldr	r3, [pc, #60]	; (80109b4 <GUI_Measure3_Screen+0x58>)
		oldLowSignal = 0;
 8010976:	4a10      	ldr	r2, [pc, #64]	; (80109b8 <GUI_Measure3_Screen+0x5c>)
		current_state_Measure_Draw= state_Measure_Elements;
 8010978:	7818      	ldrb	r0, [r3, #0]
		screen_count = 2;
 801097a:	4b10      	ldr	r3, [pc, #64]	; (80109bc <GUI_Measure3_Screen+0x60>)
		current_state_Measure_Draw= state_Measure_Elements;
 801097c:	7020      	strb	r0, [r4, #0]
		screen_count = 2;
 801097e:	701d      	strb	r5, [r3, #0]
		oldLowSignal = 0;
 8010980:	2300      	movs	r3, #0
 8010982:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010984:	4a0e      	ldr	r2, [pc, #56]	; (80109c0 <GUI_Measure3_Screen+0x64>)
 8010986:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010988:	f7fe fea2 	bl	800f6d0 <Measure_Elements_Draw>
		GUI_Up_Panel();
 801098c:	f7ff f950 	bl	800fc30 <GUI_Up_Panel>
		GUI_Down_Panel();
 8010990:	f7ff f972 	bl	800fc78 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 8010994:	4b0b      	ldr	r3, [pc, #44]	; (80109c4 <GUI_Measure3_Screen+0x68>)
 8010996:	2201      	movs	r2, #1
 8010998:	701a      	strb	r2, [r3, #0]
 801099a:	bd38      	pop	{r3, r4, r5, pc}
			GUI_SignalLevel();
 801099c:	f7ff ff16 	bl	80107cc <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 80109a0:	7820      	ldrb	r0, [r4, #0]
 80109a2:	f7fe fe95 	bl	800f6d0 <Measure_Elements_Draw>
 80109a6:	e7f5      	b.n	8010994 <GUI_Measure3_Screen+0x38>
 80109a8:	20000230 	.word	0x20000230
 80109ac:	2000529c 	.word	0x2000529c
 80109b0:	2000022a 	.word	0x2000022a
 80109b4:	200052a8 	.word	0x200052a8
 80109b8:	2000529f 	.word	0x2000529f
 80109bc:	200052a3 	.word	0x200052a3
 80109c0:	2000529e 	.word	0x2000529e
 80109c4:	2008c31d 	.word	0x2008c31d

080109c8 <GUI_Color_Screen>:
void GUI_Color_Screen(){
 80109c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109cc:	ed2d 8b04 	vpush	{d8-d9}
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 80109d0:	4c8f      	ldr	r4, [pc, #572]	; (8010c10 <GUI_Color_Screen+0x248>)
 80109d2:	4f90      	ldr	r7, [pc, #576]	; (8010c14 <GUI_Color_Screen+0x24c>)
 80109d4:	7823      	ldrb	r3, [r4, #0]
 80109d6:	4d90      	ldr	r5, [pc, #576]	; (8010c18 <GUI_Color_Screen+0x250>)
 80109d8:	2b04      	cmp	r3, #4
void GUI_Color_Screen(){
 80109da:	b089      	sub	sp, #36	; 0x24
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 80109dc:	d008      	beq.n	80109f0 <GUI_Color_Screen+0x28>
 80109de:	7823      	ldrb	r3, [r4, #0]
 80109e0:	2b0e      	cmp	r3, #14
 80109e2:	d005      	beq.n	80109f0 <GUI_Color_Screen+0x28>
 80109e4:	7823      	ldrb	r3, [r4, #0]
 80109e6:	2b0f      	cmp	r3, #15
 80109e8:	d002      	beq.n	80109f0 <GUI_Color_Screen+0x28>
 80109ea:	7823      	ldrb	r3, [r4, #0]
 80109ec:	2b12      	cmp	r3, #18
 80109ee:	d125      	bne.n	8010a3c <GUI_Color_Screen+0x74>
		GUI_Panels();	
 80109f0:	f7ff f986 	bl	800fd00 <GUI_Panels>
		TFT_direction = Rotation_Screen_Color;
 80109f4:	4b89      	ldr	r3, [pc, #548]	; (8010c1c <GUI_Color_Screen+0x254>)
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	703b      	strb	r3, [r7, #0]
		TFT_DrawBitmap(Color_Field&Color_CIE_xy? 18:
 80109fa:	782b      	ldrb	r3, [r5, #0]
 80109fc:	f013 0f05 	tst.w	r3, #5
 8010a00:	bf0c      	ite	eq
 8010a02:	200b      	moveq	r0, #11
 8010a04:	2012      	movne	r0, #18
 8010a06:	f013 0f04 	tst.w	r3, #4
 8010a0a:	4b85      	ldr	r3, [pc, #532]	; (8010c20 <GUI_Color_Screen+0x258>)
 8010a0c:	bf18      	it	ne
 8010a0e:	21ac      	movne	r1, #172	; 0xac
 8010a10:	cb0c      	ldmia	r3, {r2, r3}
 8010a12:	bf08      	it	eq
 8010a14:	2196      	moveq	r1, #150	; 0x96
 8010a16:	f00e fab3 	bl	801ef80 <TFT_DrawBitmap>
		flag = 0;	
 8010a1a:	4b82      	ldr	r3, [pc, #520]	; (8010c24 <GUI_Color_Screen+0x25c>)
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010a20:	4b81      	ldr	r3, [pc, #516]	; (8010c28 <GUI_Color_Screen+0x260>)
 8010a22:	701a      	strb	r2, [r3, #0]
		oldHighSignal = 0;
 8010a24:	4b81      	ldr	r3, [pc, #516]	; (8010c2c <GUI_Color_Screen+0x264>)
 8010a26:	701a      	strb	r2, [r3, #0]
		if(Color_Field&Color_CIE_xy){GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);}
 8010a28:	782b      	ldrb	r3, [r5, #0]
 8010a2a:	f013 0101 	ands.w	r1, r3, #1
 8010a2e:	f000 80cf 	beq.w	8010bd0 <GUI_Color_Screen+0x208>
 8010a32:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010a36:	2012      	movs	r0, #18
 8010a38:	f008 f858 	bl	8018aec <GUI_Axes_Locus_XY>
	Prev_Inf_Screen = Color_Screen;
 8010a3c:	4a7c      	ldr	r2, [pc, #496]	; (8010c30 <GUI_Color_Screen+0x268>)
	preGUI_screen_state = Color_Screen;
 8010a3e:	2305      	movs	r3, #5
 8010a40:	7023      	strb	r3, [r4, #0]
	Prev_Inf_Screen = Color_Screen;
 8010a42:	7013      	strb	r3, [r2, #0]
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 8010a44:	4b7b      	ldr	r3, [pc, #492]	; (8010c34 <GUI_Color_Screen+0x26c>)
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	f040 80d4 	bne.w	8010bf6 <GUI_Color_Screen+0x22e>
 8010a4e:	4b7a      	ldr	r3, [pc, #488]	; (8010c38 <GUI_Color_Screen+0x270>)
 8010a50:	edd3 8a00 	vldr	s17, [r3]
colorimetry_xy_buff[1] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[1] : colorimetry_xy1931[1];
 8010a54:	ed93 8a01 	vldr	s16, [r3, #4]
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 8010a58:	782b      	ldrb	r3, [r5, #0]
 8010a5a:	07d9      	lsls	r1, r3, #31
 8010a5c:	f140 8102 	bpl.w	8010c64 <GUI_Color_Screen+0x29c>
 8010a60:	4b76      	ldr	r3, [pc, #472]	; (8010c3c <GUI_Color_Screen+0x274>)
 8010a62:	4a77      	ldr	r2, [pc, #476]	; (8010c40 <GUI_Color_Screen+0x278>)
		 scr_refresh++;
 8010a64:	4e77      	ldr	r6, [pc, #476]	; (8010c44 <GUI_Color_Screen+0x27c>)
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	7812      	ldrb	r2, [r2, #0]
 8010a6a:	eef0 0a48 	vmov.f32	s1, s16
 8010a6e:	eeb0 0a68 	vmov.f32	s0, s17
 8010a72:	2146      	movs	r1, #70	; 0x46
 8010a74:	2014      	movs	r0, #20
 8010a76:	f006 fcf1 	bl	801745c <GUI_Text_xy_Measure>
		 scr_refresh++;
 8010a7a:	7833      	ldrb	r3, [r6, #0]
 8010a7c:	3301      	adds	r3, #1
 8010a7e:	b2db      	uxtb	r3, r3
   if(scr_refresh > 15 ){
 8010a80:	2b0f      	cmp	r3, #15
		 scr_refresh++;
 8010a82:	7033      	strb	r3, [r6, #0]
   if(scr_refresh > 15 ){
 8010a84:	f240 809b 	bls.w	8010bbe <GUI_Color_Screen+0x1f6>
		 if(colorimetry_xy_buff[0] < 0.74 & colorimetry_xy_buff[1] < 0.84 ){
 8010a88:	ee18 0a90 	vmov	r0, s17
 8010a8c:	f7ef fd74 	bl	8000578 <__aeabi_f2d>
 8010a90:	a35b      	add	r3, pc, #364	; (adr r3, 8010c00 <GUI_Color_Screen+0x238>)
 8010a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a96:	f04f 0401 	mov.w	r4, #1
 8010a9a:	f7f0 f833 	bl	8000b04 <__aeabi_dcmplt>
 8010a9e:	b900      	cbnz	r0, 8010aa2 <GUI_Color_Screen+0xda>
 8010aa0:	4604      	mov	r4, r0
 8010aa2:	f014 0fff 	tst.w	r4, #255	; 0xff
 8010aa6:	f000 808a 	beq.w	8010bbe <GUI_Color_Screen+0x1f6>
 8010aaa:	ee18 0a10 	vmov	r0, s16
 8010aae:	f7ef fd63 	bl	8000578 <__aeabi_f2d>
 8010ab2:	a355      	add	r3, pc, #340	; (adr r3, 8010c08 <GUI_Color_Screen+0x240>)
 8010ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab8:	f04f 0401 	mov.w	r4, #1
 8010abc:	f7f0 f822 	bl	8000b04 <__aeabi_dcmplt>
 8010ac0:	b900      	cbnz	r0, 8010ac4 <GUI_Color_Screen+0xfc>
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	f014 0fff 	tst.w	r4, #255	; 0xff
 8010ac8:	d079      	beq.n	8010bbe <GUI_Color_Screen+0x1f6>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010aca:	4b56      	ldr	r3, [pc, #344]	; (8010c24 <GUI_Color_Screen+0x25c>)
 8010acc:	4c5e      	ldr	r4, [pc, #376]	; (8010c48 <GUI_Color_Screen+0x280>)
 8010ace:	781a      	ldrb	r2, [r3, #0]
 8010ad0:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 8010c4c <GUI_Color_Screen+0x284>
 8010ad4:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8010c50 <GUI_Color_Screen+0x288>
 8010ad8:	4698      	mov	r8, r3
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	d03f      	beq.n	8010b5e <GUI_Color_Screen+0x196>
 8010ade:	edd4 6a01 	vldr	s13, [r4, #4]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010ae2:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8010c54 <GUI_Color_Screen+0x28c>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010ae6:	edd4 5a00 	vldr	s11, [r4]
 8010aea:	4a4d      	ldr	r2, [pc, #308]	; (8010c20 <GUI_Color_Screen+0x258>)
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010aec:	eef1 6a66 	vneg.f32	s13, s13
 8010af0:	eea6 7a89 	vfma.f32	s14, s13, s18
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010af4:	e892 0003 	ldmia.w	r2, {r0, r1}
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010af8:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010afc:	ee37 7a46 	vsub.f32	s14, s14, s12
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010b00:	ab01      	add	r3, sp, #4
 8010b02:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010b06:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8010c58 <GUI_Color_Screen+0x290>
 8010b0a:	edcd 7a04 	vstr	s15, [sp, #16]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010b0e:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 8010b12:	eee5 7aa9 	vfma.f32	s15, s11, s19
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010b16:	eea6 7a89 	vfma.f32	s14, s13, s18
 8010b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b1e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010b22:	edcd 7a05 	vstr	s15, [sp, #20]
 8010b26:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010b2a:	edcd 7a06 	vstr	s15, [sp, #24]
 8010b2e:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 8010b32:	eee5 7aa9 	vfma.f32	s15, s11, s19
 8010b36:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b3e:	edcd 7a07 	vstr	s15, [sp, #28]
 8010b42:	e883 0003 	stmia.w	r3, {r0, r1}
 8010b46:	230f      	movs	r3, #15
 8010b48:	9300      	str	r3, [sp, #0]
 8010b4a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010b4e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010b52:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010b56:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010b5a:	f00e fad9 	bl	801f110 <TFT_DrawCutBMP>
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010b5e:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8010b62:	eee8 7aa9 	vfma.f32	s15, s17, s19
 8010b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b6a:	2204      	movs	r2, #4
		colorimetry_xy_old[0] = colorimetry_xy_buff[0];
 8010b6c:	edc4 8a00 	vstr	s17, [r4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		colorimetry_xy_old[1] = colorimetry_xy_buff[1];
 8010b74:	ed84 8a01 	vstr	s16, [r4, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010b78:	edcd 7a04 	vstr	s15, [sp, #16]
 8010b7c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8010c5c <GUI_Color_Screen+0x294>
 8010b80:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8010b84:	eee8 7a49 	vfms.f32	s15, s16, s18
 8010b88:	4620      	mov	r0, r4
 8010b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b8e:	edcd 7a04 	vstr	s15, [sp, #16]
 8010b92:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8010b96:	4629      	mov	r1, r5
 8010b98:	f00d ffba 	bl	801eb10 <TFT_DrawFilledCircle>
		TFT_DrawFilledCircle(18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 2, TFT_Black);
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	2202      	movs	r2, #2
 8010ba0:	4629      	mov	r1, r5
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f00d ffb4 	bl	801eb10 <TFT_DrawFilledCircle>
		GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010bae:	2012      	movs	r0, #18
 8010bb0:	f007 ff9c 	bl	8018aec <GUI_Axes_Locus_XY>
		flag = 1;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	f888 3000 	strb.w	r3, [r8]
			scr_refresh = 0;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	7033      	strb	r3, [r6, #0]
	TFT_direction = 0x00;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	703b      	strb	r3, [r7, #0]
}         
 8010bc2:	b009      	add	sp, #36	; 0x24
 8010bc4:	ecbd 8b04 	vpop	{d8-d9}
 8010bc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_SignalLevel();
 8010bcc:	f7ff bdfe 	b.w	80107cc <GUI_SignalLevel>
		else if(Color_Field&Color_CIE_Luv){GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);}
 8010bd0:	f013 0204 	ands.w	r2, r3, #4
 8010bd4:	d006      	beq.n	8010be4 <GUI_Color_Screen+0x21c>
 8010bd6:	460a      	mov	r2, r1
 8010bd8:	2012      	movs	r0, #18
 8010bda:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010bde:	f007 ffeb 	bl	8018bb8 <GUI_Axes_Locus_LUV>
 8010be2:	e72b      	b.n	8010a3c <GUI_Color_Screen+0x74>
		else if(Color_Field&Color_CIE_Lab) {GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);}
 8010be4:	0798      	lsls	r0, r3, #30
 8010be6:	f57f af29 	bpl.w	8010a3c <GUI_Color_Screen+0x74>
 8010bea:	f240 1113 	movw	r1, #275	; 0x113
 8010bee:	2088      	movs	r0, #136	; 0x88
 8010bf0:	f008 f848 	bl	8018c84 <GUI_Axes_Locus_Lab>
 8010bf4:	e722      	b.n	8010a3c <GUI_Color_Screen+0x74>
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 8010bf6:	4b1a      	ldr	r3, [pc, #104]	; (8010c60 <GUI_Color_Screen+0x298>)
 8010bf8:	e72a      	b.n	8010a50 <GUI_Color_Screen+0x88>
 8010bfa:	bf00      	nop
 8010bfc:	f3af 8000 	nop.w
 8010c00:	7ae147ae 	.word	0x7ae147ae
 8010c04:	3fe7ae14 	.word	0x3fe7ae14
 8010c08:	ae147ae1 	.word	0xae147ae1
 8010c0c:	3feae147 	.word	0x3feae147
 8010c10:	2000022a 	.word	0x2000022a
 8010c14:	20005218 	.word	0x20005218
 8010c18:	20005277 	.word	0x20005277
 8010c1c:	20005280 	.word	0x20005280
 8010c20:	2008c8b8 	.word	0x2008c8b8
 8010c24:	2000529d 	.word	0x2000529d
 8010c28:	2000529f 	.word	0x2000529f
 8010c2c:	2000529e 	.word	0x2000529e
 8010c30:	2008c31d 	.word	0x2008c31d
 8010c34:	2000527c 	.word	0x2000527c
 8010c38:	2008adec 	.word	0x2008adec
 8010c3c:	20000a4c 	.word	0x20000a4c
 8010c40:	20000a4d 	.word	0x20000a4d
 8010c44:	200052a2 	.word	0x200052a2
 8010c48:	20005294 	.word	0x20005294
 8010c4c:	43960000 	.word	0x43960000
 8010c50:	43938000 	.word	0x43938000
 8010c54:	43790000 	.word	0x43790000
 8010c58:	43c78000 	.word	0x43c78000
 8010c5c:	43c80000 	.word	0x43c80000
 8010c60:	2008ade4 	.word	0x2008ade4
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 8010c64:	075a      	lsls	r2, r3, #29
 8010c66:	f140 80fb 	bpl.w	8010e60 <GUI_Color_Screen+0x498>
 8010c6a:	4c71      	ldr	r4, [pc, #452]	; (8010e30 <GUI_Color_Screen+0x468>)
 8010c6c:	4b71      	ldr	r3, [pc, #452]	; (8010e34 <GUI_Color_Screen+0x46c>)
 8010c6e:	4a72      	ldr	r2, [pc, #456]	; (8010e38 <GUI_Color_Screen+0x470>)
		scr_refresh++;
 8010c70:	4e72      	ldr	r6, [pc, #456]	; (8010e3c <GUI_Color_Screen+0x474>)
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	7812      	ldrb	r2, [r2, #0]
 8010c76:	edd4 0a01 	vldr	s1, [r4, #4]
 8010c7a:	ed94 0a00 	vldr	s0, [r4]
 8010c7e:	2146      	movs	r1, #70	; 0x46
 8010c80:	2014      	movs	r0, #20
 8010c82:	f006 fcad 	bl	80175e0 <GUI_Text_uv_Measure>
		scr_refresh++;
 8010c86:	7833      	ldrb	r3, [r6, #0]
 8010c88:	3301      	adds	r3, #1
 8010c8a:	b2db      	uxtb	r3, r3
		if(scr_refresh > 15 ){
 8010c8c:	2b0f      	cmp	r3, #15
		scr_refresh++;
 8010c8e:	7033      	strb	r3, [r6, #0]
		if(scr_refresh > 15 ){
 8010c90:	d995      	bls.n	8010bbe <GUI_Color_Screen+0x1f6>
		if(colorimetry_uv1976[0] < 0.63 & colorimetry_uv1976[1] < 0.59 & colorimetry_uv1976[0] > 0.0 & colorimetry_uv1976[1] > 0.0){
 8010c92:	edd4 7a00 	vldr	s15, [r4]
 8010c96:	ed94 8a01 	vldr	s16, [r4, #4]
 8010c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010ca6:	bfcc      	ite	gt
 8010ca8:	2501      	movgt	r5, #1
 8010caa:	2500      	movle	r5, #0
 8010cac:	ee17 0a90 	vmov	r0, s15
 8010cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb4:	f005 0501 	and.w	r5, r5, #1
 8010cb8:	bfd8      	it	le
 8010cba:	2500      	movle	r5, #0
 8010cbc:	f7ef fc5c 	bl	8000578 <__aeabi_f2d>
 8010cc0:	a357      	add	r3, pc, #348	; (adr r3, 8010e20 <GUI_Color_Screen+0x458>)
 8010cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc6:	f04f 0801 	mov.w	r8, #1
 8010cca:	f7ef ff1b 	bl	8000b04 <__aeabi_dcmplt>
 8010cce:	b900      	cbnz	r0, 8010cd2 <GUI_Color_Screen+0x30a>
 8010cd0:	4680      	mov	r8, r0
 8010cd2:	ea15 0f08 	tst.w	r5, r8
 8010cd6:	f43f af72 	beq.w	8010bbe <GUI_Color_Screen+0x1f6>
 8010cda:	ee18 0a10 	vmov	r0, s16
 8010cde:	f7ef fc4b 	bl	8000578 <__aeabi_f2d>
 8010ce2:	a351      	add	r3, pc, #324	; (adr r3, 8010e28 <GUI_Color_Screen+0x460>)
 8010ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce8:	f04f 0501 	mov.w	r5, #1
 8010cec:	f7ef ff0a 	bl	8000b04 <__aeabi_dcmplt>
 8010cf0:	b900      	cbnz	r0, 8010cf4 <GUI_Color_Screen+0x32c>
 8010cf2:	4605      	mov	r5, r0
 8010cf4:	f015 0fff 	tst.w	r5, #255	; 0xff
 8010cf8:	f43f af61 	beq.w	8010bbe <GUI_Color_Screen+0x1f6>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010cfc:	4d50      	ldr	r5, [pc, #320]	; (8010e40 <GUI_Color_Screen+0x478>)
 8010cfe:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8010e5c <GUI_Color_Screen+0x494>
 8010d02:	782a      	ldrb	r2, [r5, #0]
 8010d04:	eddf 9a4f 	vldr	s19, [pc, #316]	; 8010e44 <GUI_Color_Screen+0x47c>
 8010d08:	eddf 8a4f 	vldr	s17, [pc, #316]	; 8010e48 <GUI_Color_Screen+0x480>
 8010d0c:	2a00      	cmp	r2, #0
 8010d0e:	d03f      	beq.n	8010d90 <GUI_Color_Screen+0x3c8>
 8010d10:	edd8 6a01 	vldr	s13, [r8, #4]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010d14:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8010e4c <GUI_Color_Screen+0x484>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010d18:	edd8 5a00 	vldr	s11, [r8]
 8010d1c:	4a4c      	ldr	r2, [pc, #304]	; (8010e50 <GUI_Color_Screen+0x488>)
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010d1e:	eef1 6a66 	vneg.f32	s13, s13
 8010d22:	eea6 7aa9 	vfma.f32	s14, s13, s19
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010d26:	e892 0003 	ldmia.w	r2, {r0, r1}
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010d2a:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010d2e:	ee37 7a46 	vsub.f32	s14, s14, s12
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010d32:	ab01      	add	r3, sp, #4
 8010d34:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010d38:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8010e54 <GUI_Color_Screen+0x48c>
 8010d3c:	edcd 7a04 	vstr	s15, [sp, #16]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010d40:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 8010d44:	eee5 7aa8 	vfma.f32	s15, s11, s17
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010d48:	eea6 7aa9 	vfma.f32	s14, s13, s19
 8010d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d50:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010d54:	edcd 7a05 	vstr	s15, [sp, #20]
 8010d58:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010d5c:	edcd 7a06 	vstr	s15, [sp, #24]
 8010d60:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 8010d64:	eee5 7aa8 	vfma.f32	s15, s11, s17
 8010d68:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d70:	edcd 7a07 	vstr	s15, [sp, #28]
 8010d74:	e883 0003 	stmia.w	r3, {r0, r1}
 8010d78:	230c      	movs	r3, #12
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010d80:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010d84:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010d88:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010d8c:	f00e f9c0 	bl	801f110 <TFT_DrawCutBMP>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010d90:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8010e58 <GUI_Color_Screen+0x490>
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 8010d94:	ed94 7a01 	vldr	s14, [r4, #4]
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010d98:	edd4 7a00 	vldr	s15, [r4]
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 8010d9c:	ed88 7a01 	vstr	s14, [r8, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010da0:	eef0 6a49 	vmov.f32	s13, s18
 8010da4:	eee7 6a69 	vfms.f32	s13, s14, s19
 8010da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010dac:	2204      	movs	r2, #4
 8010dae:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 8010db2:	eebd 7ae6 	vcvt.s32.f32	s14, s13
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010db6:	edc8 7a00 	vstr	s15, [r8]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010dba:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010dbe:	eeb0 7a48 	vmov.f32	s14, s16
 8010dc2:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8010dc6:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8010dca:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8010dce:	edcd 7a05 	vstr	s15, [sp, #20]
 8010dd2:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8010dd6:	f00d fe9b 	bl	801eb10 <TFT_DrawFilledCircle>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 8010dda:	edd4 7a01 	vldr	s15, [r4, #4]
 8010dde:	eea7 9ae9 	vfms.f32	s18, s15, s19
 8010de2:	2300      	movs	r3, #0
 8010de4:	2202      	movs	r2, #2
 8010de6:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8010dea:	edcd 7a04 	vstr	s15, [sp, #16]
 8010dee:	edd4 7a00 	vldr	s15, [r4]
 8010df2:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8010df6:	eea7 8aa8 	vfma.f32	s16, s15, s17
 8010dfa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010dfe:	edcd 7a05 	vstr	s15, [sp, #20]
 8010e02:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8010e06:	f00d fe83 	bl	801eb10 <TFT_DrawFilledCircle>
			GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010e10:	2012      	movs	r0, #18
 8010e12:	f007 fed1 	bl	8018bb8 <GUI_Axes_Locus_LUV>
			flag = 1;
 8010e16:	2301      	movs	r3, #1
 8010e18:	702b      	strb	r3, [r5, #0]
 8010e1a:	e6ce      	b.n	8010bba <GUI_Color_Screen+0x1f2>
 8010e1c:	f3af 8000 	nop.w
 8010e20:	c28f5c29 	.word	0xc28f5c29
 8010e24:	3fe428f5 	.word	0x3fe428f5
 8010e28:	ae147ae1 	.word	0xae147ae1
 8010e2c:	3fe2e147 	.word	0x3fe2e147
 8010e30:	2008addc 	.word	0x2008addc
 8010e34:	20000a4c 	.word	0x20000a4c
 8010e38:	20000a4d 	.word	0x20000a4d
 8010e3c:	200052a2 	.word	0x200052a2
 8010e40:	2000529d 	.word	0x2000529d
 8010e44:	43c60000 	.word	0x43c60000
 8010e48:	43c98000 	.word	0x43c98000
 8010e4c:	43690000 	.word	0x43690000
 8010e50:	2008c8b8 	.word	0x2008c8b8
 8010e54:	43ca8000 	.word	0x43ca8000
 8010e58:	43cb0000 	.word	0x43cb0000
 8010e5c:	2000528c 	.word	0x2000528c
	if(Color_Field&Color_CIE_Lab) {GUI_Text_LAB_Measure(20, 54, colorimetry_LAB[0], colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 8010e60:	079b      	lsls	r3, r3, #30
 8010e62:	f57f aeac 	bpl.w	8010bbe <GUI_Color_Screen+0x1f6>
 8010e66:	4984      	ldr	r1, [pc, #528]	; (8011078 <GUI_Color_Screen+0x6b0>)
 8010e68:	4c84      	ldr	r4, [pc, #528]	; (801107c <GUI_Color_Screen+0x6b4>)
 8010e6a:	7809      	ldrb	r1, [r1, #0]
 8010e6c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010e70:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010e74:	9102      	str	r1, [sp, #8]
 8010e76:	4982      	ldr	r1, [pc, #520]	; (8011080 <GUI_Color_Screen+0x6b8>)
 8010e78:	7809      	ldrb	r1, [r1, #0]
 8010e7a:	9101      	str	r1, [sp, #4]
 8010e7c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010e80:	9100      	str	r1, [sp, #0]
 8010e82:	2014      	movs	r0, #20
 8010e84:	2136      	movs	r1, #54	; 0x36
 8010e86:	f007 fb63 	bl	8018550 <GUI_Text_LAB_Measure>
		if(colorimetry_LAB[1] < 128 & colorimetry_LAB[1] > -128 & colorimetry_LAB[2]<128 & colorimetry_LAB[2] > -128){
 8010e8a:	8863      	ldrh	r3, [r4, #2]
 8010e8c:	337f      	adds	r3, #127	; 0x7f
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	2bfe      	cmp	r3, #254	; 0xfe
 8010e92:	f63f ae94 	bhi.w	8010bbe <GUI_Color_Screen+0x1f6>
 8010e96:	88a3      	ldrh	r3, [r4, #4]
 8010e98:	337f      	adds	r3, #127	; 0x7f
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	2bfe      	cmp	r3, #254	; 0xfe
 8010e9e:	f63f ae8e 	bhi.w	8010bbe <GUI_Color_Screen+0x1f6>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010ea2:	4d78      	ldr	r5, [pc, #480]	; (8011084 <GUI_Color_Screen+0x6bc>)
 8010ea4:	4e78      	ldr	r6, [pc, #480]	; (8011088 <GUI_Color_Screen+0x6c0>)
 8010ea6:	782b      	ldrb	r3, [r5, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d05d      	beq.n	8010f68 <GUI_Color_Screen+0x5a0>
 8010eac:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8010eb0:	f7ef fb50 	bl	8000554 <__aeabi_i2d>
 8010eb4:	a368      	add	r3, pc, #416	; (adr r3, 8011058 <GUI_Color_Screen+0x690>)
 8010eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eba:	f7ef fbb1 	bl	8000620 <__aeabi_dmul>
 8010ebe:	4682      	mov	sl, r0
 8010ec0:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8010ec4:	468b      	mov	fp, r1
 8010ec6:	f7ef fb45 	bl	8000554 <__aeabi_i2d>
 8010eca:	a363      	add	r3, pc, #396	; (adr r3, 8011058 <GUI_Color_Screen+0x690>)
 8010ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed0:	f7ef fba6 	bl	8000620 <__aeabi_dmul>
 8010ed4:	4680      	mov	r8, r0
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	460b      	mov	r3, r1
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010eda:	4689      	mov	r9, r1
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010edc:	2000      	movs	r0, #0
 8010ede:	496b      	ldr	r1, [pc, #428]	; (801108c <GUI_Color_Screen+0x6c4>)
 8010ee0:	f7ef f9ea 	bl	80002b8 <__aeabi_dsub>
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	4b6a      	ldr	r3, [pc, #424]	; (8011090 <GUI_Color_Screen+0x6c8>)
 8010ee8:	f7ef f9e6 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010eec:	f7ef fe70 	bl	8000bd0 <__aeabi_d2uiz>
 8010ef0:	b283      	uxth	r3, r0
 8010ef2:	9304      	str	r3, [sp, #16]
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	4b67      	ldr	r3, [pc, #412]	; (8011094 <GUI_Color_Screen+0x6cc>)
 8010ef8:	4650      	mov	r0, sl
 8010efa:	4659      	mov	r1, fp
 8010efc:	f7ef f9de 	bl	80002bc <__adddf3>
 8010f00:	2200      	movs	r2, #0
 8010f02:	4b63      	ldr	r3, [pc, #396]	; (8011090 <GUI_Color_Screen+0x6c8>)
 8010f04:	f7ef f9d8 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010f08:	f7ef fe62 	bl	8000bd0 <__aeabi_d2uiz>
 8010f0c:	b283      	uxth	r3, r0
 8010f0e:	4642      	mov	r2, r8
 8010f10:	9305      	str	r3, [sp, #20]
 8010f12:	a153      	add	r1, pc, #332	; (adr r1, 8011060 <GUI_Color_Screen+0x698>)
 8010f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f18:	464b      	mov	r3, r9
 8010f1a:	f7ef f9cd 	bl	80002b8 <__aeabi_dsub>
 8010f1e:	2200      	movs	r2, #0
 8010f20:	4b5b      	ldr	r3, [pc, #364]	; (8011090 <GUI_Color_Screen+0x6c8>)
 8010f22:	f7ef f9c9 	bl	80002b8 <__aeabi_dsub>
 8010f26:	f7ef fe53 	bl	8000bd0 <__aeabi_d2uiz>
 8010f2a:	a34f      	add	r3, pc, #316	; (adr r3, 8011068 <GUI_Color_Screen+0x6a0>)
 8010f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f30:	fa1f f880 	uxth.w	r8, r0
 8010f34:	4659      	mov	r1, fp
 8010f36:	4650      	mov	r0, sl
 8010f38:	f7ef f9c0 	bl	80002bc <__adddf3>
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	4b54      	ldr	r3, [pc, #336]	; (8011090 <GUI_Color_Screen+0x6c8>)
 8010f40:	f7ef f9ba 	bl	80002b8 <__aeabi_dsub>
 8010f44:	f7ef fe44 	bl	8000bd0 <__aeabi_d2uiz>
 8010f48:	4a53      	ldr	r2, [pc, #332]	; (8011098 <GUI_Color_Screen+0x6d0>)
 8010f4a:	fa1f fe80 	uxth.w	lr, r0
 8010f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f52:	ab01      	add	r3, sp, #4
 8010f54:	e883 0003 	stmia.w	r3, {r0, r1}
 8010f58:	230c      	movs	r3, #12
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	9a05      	ldr	r2, [sp, #20]
 8010f5e:	9b04      	ldr	r3, [sp, #16]
 8010f60:	4641      	mov	r1, r8
 8010f62:	4670      	mov	r0, lr
 8010f64:	f00e f8d4 	bl	801f110 <TFT_DrawCutBMP>
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010f68:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010f6c:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010f70:	80b0      	strh	r0, [r6, #4]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010f72:	ee07 0a90 	vmov	s15, r0
 8010f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010f7a:	f8a6 8002 	strh.w	r8, [r6, #2]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010f7e:	ee17 0a90 	vmov	r0, s15
 8010f82:	f7ef faf9 	bl	8000578 <__aeabi_f2d>
 8010f86:	a334      	add	r3, pc, #208	; (adr r3, 8011058 <GUI_Color_Screen+0x690>)
 8010f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8c:	f7ef fb48 	bl	8000620 <__aeabi_dmul>
 8010f90:	4602      	mov	r2, r0
 8010f92:	460b      	mov	r3, r1
 8010f94:	a136      	add	r1, pc, #216	; (adr r1, 8011070 <GUI_Color_Screen+0x6a8>)
 8010f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f9a:	f7ef f98d 	bl	80002b8 <__aeabi_dsub>
 8010f9e:	f7ef fdef 	bl	8000b80 <__aeabi_d2iz>
 8010fa2:	ee07 8a90 	vmov	s15, r8
 8010fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010faa:	b206      	sxth	r6, r0
 8010fac:	ee17 0a90 	vmov	r0, s15
 8010fb0:	f7ef fae2 	bl	8000578 <__aeabi_f2d>
 8010fb4:	a328      	add	r3, pc, #160	; (adr r3, 8011058 <GUI_Color_Screen+0x690>)
 8010fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fba:	f7ef fb31 	bl	8000620 <__aeabi_dmul>
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	4b36      	ldr	r3, [pc, #216]	; (801109c <GUI_Color_Screen+0x6d4>)
 8010fc2:	f7ef f97b 	bl	80002bc <__adddf3>
 8010fc6:	f7ef fddb 	bl	8000b80 <__aeabi_d2iz>
 8010fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fce:	2204      	movs	r2, #4
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	b200      	sxth	r0, r0
 8010fd4:	f00d fd9c 	bl	801eb10 <TFT_DrawFilledCircle>
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 8010fd8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010fdc:	ee07 0a90 	vmov	s15, r0
 8010fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fe4:	ee17 0a90 	vmov	r0, s15
 8010fe8:	f7ef fac6 	bl	8000578 <__aeabi_f2d>
 8010fec:	a31a      	add	r3, pc, #104	; (adr r3, 8011058 <GUI_Color_Screen+0x690>)
 8010fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff2:	f7ef fb15 	bl	8000620 <__aeabi_dmul>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	a11d      	add	r1, pc, #116	; (adr r1, 8011070 <GUI_Color_Screen+0x6a8>)
 8010ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011000:	f7ef f95a 	bl	80002b8 <__aeabi_dsub>
 8011004:	f7ef fdbc 	bl	8000b80 <__aeabi_d2iz>
 8011008:	b206      	sxth	r6, r0
 801100a:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801100e:	ee07 0a90 	vmov	s15, r0
 8011012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011016:	ee17 0a90 	vmov	r0, s15
 801101a:	f7ef faad 	bl	8000578 <__aeabi_f2d>
 801101e:	a30e      	add	r3, pc, #56	; (adr r3, 8011058 <GUI_Color_Screen+0x690>)
 8011020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011024:	f7ef fafc 	bl	8000620 <__aeabi_dmul>
 8011028:	2200      	movs	r2, #0
 801102a:	4b1c      	ldr	r3, [pc, #112]	; (801109c <GUI_Color_Screen+0x6d4>)
 801102c:	f7ef f946 	bl	80002bc <__adddf3>
 8011030:	f7ef fda6 	bl	8000b80 <__aeabi_d2iz>
 8011034:	2300      	movs	r3, #0
 8011036:	2202      	movs	r2, #2
 8011038:	4631      	mov	r1, r6
 801103a:	b200      	sxth	r0, r0
 801103c:	f00d fd68 	bl	801eb10 <TFT_DrawFilledCircle>
				GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);
 8011040:	2200      	movs	r2, #0
 8011042:	f240 1113 	movw	r1, #275	; 0x113
 8011046:	2088      	movs	r0, #136	; 0x88
 8011048:	f007 fe1c 	bl	8018c84 <GUI_Axes_Locus_Lab>
				flag = 1;
 801104c:	2301      	movs	r3, #1
 801104e:	702b      	strb	r3, [r5, #0]
				scr_refresh = 0;
 8011050:	4b13      	ldr	r3, [pc, #76]	; (80110a0 <GUI_Color_Screen+0x6d8>)
 8011052:	2200      	movs	r2, #0
 8011054:	701a      	strb	r2, [r3, #0]
 8011056:	e5b2      	b.n	8010bbe <GUI_Color_Screen+0x1f6>
 8011058:	5a1cac08 	.word	0x5a1cac08
 801105c:	3fef3b64 	.word	0x3fef3b64
 8011060:	00000000 	.word	0x00000000
 8011064:	40712000 	.word	0x40712000
 8011068:	00000000 	.word	0x00000000
 801106c:	4060e000 	.word	0x4060e000
 8011070:	00000000 	.word	0x00000000
 8011074:	40713000 	.word	0x40713000
 8011078:	20000a4c 	.word	0x20000a4c
 801107c:	2008adc0 	.word	0x2008adc0
 8011080:	20000a4d 	.word	0x20000a4d
 8011084:	2000529d 	.word	0x2000529d
 8011088:	20005284 	.word	0x20005284
 801108c:	405f0000 	.word	0x405f0000
 8011090:	40140000 	.word	0x40140000
 8011094:	405f4000 	.word	0x405f4000
 8011098:	2008c8b8 	.word	0x2008c8b8
 801109c:	40610000 	.word	0x40610000
 80110a0:	200052a2 	.word	0x200052a2

080110a4 <GUI_ColorRend_Screen>:
void GUI_ColorRend_Screen(){
 80110a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 80110a6:	4b39      	ldr	r3, [pc, #228]	; (801118c <GUI_ColorRend_Screen+0xe8>)
 80110a8:	4d39      	ldr	r5, [pc, #228]	; (8011190 <GUI_ColorRend_Screen+0xec>)
 80110aa:	4c3a      	ldr	r4, [pc, #232]	; (8011194 <GUI_ColorRend_Screen+0xf0>)
 80110ac:	2202      	movs	r2, #2
 80110ae:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Rotation_Screen_Rend_Old != Rotation_Screen_Rend){
 80110b0:	4b39      	ldr	r3, [pc, #228]	; (8011198 <GUI_ColorRend_Screen+0xf4>)
 80110b2:	4a3a      	ldr	r2, [pc, #232]	; (801119c <GUI_ColorRend_Screen+0xf8>)
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	7812      	ldrb	r2, [r2, #0]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d103      	bne.n	80110c4 <GUI_ColorRend_Screen+0x20>
 80110bc:	782a      	ldrb	r2, [r5, #0]
 80110be:	7823      	ldrb	r3, [r4, #0]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d02b      	beq.n	801111c <GUI_ColorRend_Screen+0x78>
	GUI_Panels();		
 80110c4:	f7fe fe1c 	bl	800fd00 <GUI_Panels>
	oldLowSignal = 0;
 80110c8:	4a35      	ldr	r2, [pc, #212]	; (80111a0 <GUI_ColorRend_Screen+0xfc>)
 80110ca:	2300      	movs	r3, #0
 80110cc:	7013      	strb	r3, [r2, #0]
	oldHighSignal = 0;
 80110ce:	4a35      	ldr	r2, [pc, #212]	; (80111a4 <GUI_ColorRend_Screen+0x100>)
 80110d0:	7013      	strb	r3, [r2, #0]
	Rotation_Screen_Rend_Old = Rotation_Screen_Rend;
 80110d2:	7823      	ldrb	r3, [r4, #0]
 80110d4:	702b      	strb	r3, [r5, #0]
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 80110d6:	4d34      	ldr	r5, [pc, #208]	; (80111a8 <GUI_ColorRend_Screen+0x104>)
 80110d8:	782a      	ldrb	r2, [r5, #0]
 80110da:	2a00      	cmp	r2, #0
 80110dc:	d03c      	beq.n	8011158 <GUI_ColorRend_Screen+0xb4>
 80110de:	4b33      	ldr	r3, [pc, #204]	; (80111ac <GUI_ColorRend_Screen+0x108>)
 80110e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110e4:	f7ef fd94 	bl	8000c10 <__aeabi_d2f>
 80110e8:	210d      	movs	r1, #13
 80110ea:	ee00 0a10 	vmov	s0, r0
 80110ee:	2055      	movs	r0, #85	; 0x55
 80110f0:	f004 fe58 	bl	8015da4 <GUI_Bar_Measure>
	Prev_Inf_Screen = Color_Rendition_Screen;
 80110f4:	4b2e      	ldr	r3, [pc, #184]	; (80111b0 <GUI_ColorRend_Screen+0x10c>)
 80110f6:	2206      	movs	r2, #6
 80110f8:	701a      	strb	r2, [r3, #0]
	if (Color_rend_Field&CRI_CQS){
 80110fa:	782b      	ldrb	r3, [r5, #0]
 80110fc:	07da      	lsls	r2, r3, #31
 80110fe:	d52d      	bpl.n	801115c <GUI_ColorRend_Screen+0xb8>
		CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8011100:	492c      	ldr	r1, [pc, #176]	; (80111b4 <GUI_ColorRend_Screen+0x110>)
 8011102:	4b2d      	ldr	r3, [pc, #180]	; (80111b8 <GUI_ColorRend_Screen+0x114>)
 8011104:	4a2d      	ldr	r2, [pc, #180]	; (80111bc <GUI_ColorRend_Screen+0x118>)
 8011106:	f991 1000 	ldrsb.w	r1, [r1]
 801110a:	f993 3000 	ldrsb.w	r3, [r3]
 801110e:	f992 2000 	ldrsb.w	r2, [r2]
 8011112:	7820      	ldrb	r0, [r4, #0]
 8011114:	9100      	str	r1, [sp, #0]
 8011116:	492a      	ldr	r1, [pc, #168]	; (80111c0 <GUI_ColorRend_Screen+0x11c>)
 8011118:	f7fd f9f4 	bl	800e504 <CRI_Draw>
	if(Calc_ColorRend != Calc_ColorRend_old){
 801111c:	4b29      	ldr	r3, [pc, #164]	; (80111c4 <GUI_ColorRend_Screen+0x120>)
 801111e:	781a      	ldrb	r2, [r3, #0]
 8011120:	4b29      	ldr	r3, [pc, #164]	; (80111c8 <GUI_ColorRend_Screen+0x124>)
 8011122:	7819      	ldrb	r1, [r3, #0]
 8011124:	4291      	cmp	r1, r2
 8011126:	d012      	beq.n	801114e <GUI_ColorRend_Screen+0xaa>
		Calc_ColorRend_old = Calc_ColorRend;
 8011128:	701a      	strb	r2, [r3, #0]
		if (Color_rend_Field&CRI_CQS){
 801112a:	4b1f      	ldr	r3, [pc, #124]	; (80111a8 <GUI_ColorRend_Screen+0x104>)
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	07db      	lsls	r3, r3, #31
 8011130:	d520      	bpl.n	8011174 <GUI_ColorRend_Screen+0xd0>
			CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8011132:	4920      	ldr	r1, [pc, #128]	; (80111b4 <GUI_ColorRend_Screen+0x110>)
 8011134:	4b20      	ldr	r3, [pc, #128]	; (80111b8 <GUI_ColorRend_Screen+0x114>)
 8011136:	4a21      	ldr	r2, [pc, #132]	; (80111bc <GUI_ColorRend_Screen+0x118>)
 8011138:	f991 1000 	ldrsb.w	r1, [r1]
 801113c:	f993 3000 	ldrsb.w	r3, [r3]
 8011140:	f992 2000 	ldrsb.w	r2, [r2]
 8011144:	7820      	ldrb	r0, [r4, #0]
 8011146:	9100      	str	r1, [sp, #0]
 8011148:	491d      	ldr	r1, [pc, #116]	; (80111c0 <GUI_ColorRend_Screen+0x11c>)
 801114a:	f7fd f9db 	bl	800e504 <CRI_Draw>
}
 801114e:	b003      	add	sp, #12
 8011150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GUI_SignalLevel();
 8011154:	f7ff bb3a 	b.w	80107cc <GUI_SignalLevel>
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8011158:	4b1c      	ldr	r3, [pc, #112]	; (80111cc <GUI_ColorRend_Screen+0x128>)
 801115a:	e7c1      	b.n	80110e0 <GUI_ColorRend_Screen+0x3c>
		CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 801115c:	491c      	ldr	r1, [pc, #112]	; (80111d0 <GUI_ColorRend_Screen+0x12c>)
 801115e:	4b1d      	ldr	r3, [pc, #116]	; (80111d4 <GUI_ColorRend_Screen+0x130>)
 8011160:	4a1d      	ldr	r2, [pc, #116]	; (80111d8 <GUI_ColorRend_Screen+0x134>)
 8011162:	7809      	ldrb	r1, [r1, #0]
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	7812      	ldrb	r2, [r2, #0]
 8011168:	7820      	ldrb	r0, [r4, #0]
 801116a:	9100      	str	r1, [sp, #0]
 801116c:	491b      	ldr	r1, [pc, #108]	; (80111dc <GUI_ColorRend_Screen+0x138>)
 801116e:	f7fb f94b 	bl	800c408 <CQS_Draw>
 8011172:	e7d3      	b.n	801111c <GUI_ColorRend_Screen+0x78>
			CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8011174:	4916      	ldr	r1, [pc, #88]	; (80111d0 <GUI_ColorRend_Screen+0x12c>)
 8011176:	4b17      	ldr	r3, [pc, #92]	; (80111d4 <GUI_ColorRend_Screen+0x130>)
 8011178:	4a17      	ldr	r2, [pc, #92]	; (80111d8 <GUI_ColorRend_Screen+0x134>)
 801117a:	7809      	ldrb	r1, [r1, #0]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	7812      	ldrb	r2, [r2, #0]
 8011180:	7820      	ldrb	r0, [r4, #0]
 8011182:	9100      	str	r1, [sp, #0]
 8011184:	4915      	ldr	r1, [pc, #84]	; (80111dc <GUI_ColorRend_Screen+0x138>)
 8011186:	f7fb f93f 	bl	800c408 <CQS_Draw>
 801118a:	e7e0      	b.n	801114e <GUI_ColorRend_Screen+0xaa>
 801118c:	20000230 	.word	0x20000230
 8011190:	2008c320 	.word	0x2008c320
 8011194:	20005281 	.word	0x20005281
 8011198:	2000022a 	.word	0x2000022a
 801119c:	20005279 	.word	0x20005279
 80111a0:	2000529f 	.word	0x2000529f
 80111a4:	2000529e 	.word	0x2000529e
 80111a8:	20005278 	.word	0x20005278
 80111ac:	2008c228 	.word	0x2008c228
 80111b0:	2008c31d 	.word	0x2008c31d
 80111b4:	200041d0 	.word	0x200041d0
 80111b8:	200041d2 	.word	0x200041d2
 80111bc:	200041d1 	.word	0x200041d1
 80111c0:	200041d3 	.word	0x200041d3
 80111c4:	20005275 	.word	0x20005275
 80111c8:	20005276 	.word	0x20005276
 80111cc:	2008bf58 	.word	0x2008bf58
 80111d0:	200031ac 	.word	0x200031ac
 80111d4:	200031ad 	.word	0x200031ad
 80111d8:	200031ab 	.word	0x200031ab
 80111dc:	2000319c 	.word	0x2000319c

080111e0 <GUI_Display_Refresh>:

void GUI_Display_Refresh()
{
 80111e0:	b508      	push	{r3, lr}
	
	switch(GUI_screen_state){
 80111e2:	4b2d      	ldr	r3, [pc, #180]	; (8011298 <GUI_Display_Refresh+0xb8>)
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	3b01      	subs	r3, #1
 80111e8:	2b11      	cmp	r3, #17
 80111ea:	d80f      	bhi.n	801120c <GUI_Display_Refresh+0x2c>
 80111ec:	e8df f003 	tbb	[pc, r3]
 80111f0:	17130f09 	.word	0x17130f09
 80111f4:	27231f1b 	.word	0x27231f1b
 80111f8:	37332f2b 	.word	0x37332f2b
 80111fc:	47433f3b 	.word	0x47433f3b
 8011200:	4f4b      	.short	0x4f4b
		case Measure_Screen: GUI_Measure_Screen(); preGUI_screen_state = Measure_Screen; break;
 8011202:	f7ff fb45 	bl	8010890 <GUI_Measure_Screen>
 8011206:	2201      	movs	r2, #1
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
					
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8011208:	4b24      	ldr	r3, [pc, #144]	; (801129c <GUI_Display_Refresh+0xbc>)
 801120a:	701a      	strb	r2, [r3, #0]
 801120c:	bd08      	pop	{r3, pc}
		case Measure2_Screen: GUI_Measure2_Screen(); preGUI_screen_state = Measure2_Screen; break;
 801120e:	f7ff fb6d 	bl	80108ec <GUI_Measure2_Screen>
 8011212:	2202      	movs	r2, #2
 8011214:	e7f8      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case Measure3_Screen: GUI_Measure3_Screen(); preGUI_screen_state = Measure3_Screen; break;
 8011216:	f7ff fba1 	bl	801095c <GUI_Measure3_Screen>
 801121a:	2203      	movs	r2, #3
 801121c:	e7f4      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case Graph_Screen: GUI_Graph_Screen(); preGUI_screen_state = Graph_Screen; break;
 801121e:	f7ff f99b 	bl	8010558 <GUI_Graph_Screen>
 8011222:	2204      	movs	r2, #4
 8011224:	e7f0      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case Color_Screen: GUI_Color_Screen(); preGUI_screen_state = Color_Screen; break; 
 8011226:	f7ff fbcf 	bl	80109c8 <GUI_Color_Screen>
 801122a:	2205      	movs	r2, #5
 801122c:	e7ec      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case Color_Rendition_Screen: GUI_ColorRend_Screen(); preGUI_screen_state = Color_Rendition_Screen; break;		
 801122e:	f7ff ff39 	bl	80110a4 <GUI_ColorRend_Screen>
 8011232:	2206      	movs	r2, #6
 8011234:	e7e8      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case DataSet1_Screen: GUI_DataSet1_Screen();  preGUI_screen_state = DataSet1_Screen; break;
 8011236:	f7fe fda1 	bl	800fd7c <GUI_DataSet1_Screen>
 801123a:	2207      	movs	r2, #7
 801123c:	e7e4      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case DataSet2_Screen: GUI_DataSet2_Screen();  preGUI_screen_state = DataSet2_Screen; break;
 801123e:	f7fe fe01 	bl	800fe44 <GUI_DataSet2_Screen>
 8011242:	2208      	movs	r2, #8
 8011244:	e7e0      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case DataSet3_Screen: GUI_DataSet3_Screen();  preGUI_screen_state = DataSet3_Screen; break;
 8011246:	f7fe fed5 	bl	800fff4 <GUI_DataSet3_Screen>
 801124a:	2209      	movs	r2, #9
 801124c:	e7dc      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case DataSet4_Screen: GUI_DataSet4_Screen();  preGUI_screen_state = DataSet4_Screen; break;
 801124e:	f7fe ff45 	bl	80100dc <GUI_DataSet4_Screen>
 8011252:	220a      	movs	r2, #10
 8011254:	e7d8      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case DataSet5_Screen: GUI_DataSet5_Screen();  preGUI_screen_state = DataSet5_Screen; break;
 8011256:	f7fe ffe3 	bl	8010220 <GUI_DataSet5_Screen>
 801125a:	220b      	movs	r2, #11
 801125c:	e7d4      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case GraphSet1_Screen: GUI_GraphSet1_Screen(); preGUI_screen_state = GraphSet1_Screen; break;
 801125e:	f7ff f819 	bl	8010294 <GUI_GraphSet1_Screen>
 8011262:	220c      	movs	r2, #12
 8011264:	e7d0      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case GraphSet2_Screen: GUI_GraphSet2_Screen(); preGUI_screen_state = GraphSet2_Screen; break;
 8011266:	f7ff f85d 	bl	8010324 <GUI_GraphSet2_Screen>
 801126a:	220d      	movs	r2, #13
 801126c:	e7cc      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
 801126e:	f7ff f893 	bl	8010398 <GUI_ColorSet1_Screen>
 8011272:	220e      	movs	r2, #14
 8011274:	e7c8      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
 8011276:	f7ff f8d3 	bl	8010420 <GUI_ColorSet2_Screen>
 801127a:	220f      	movs	r2, #15
 801127c:	e7c4      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
 801127e:	f7ff f90b 	bl	8010498 <GUI_ColorRendSet_Screen>
 8011282:	2210      	movs	r2, #16
 8011284:	e7c0      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
 8011286:	f7fe fc19 	bl	800fabc <GUI_Information_Screen>
 801128a:	2211      	movs	r2, #17
 801128c:	e7bc      	b.n	8011208 <GUI_Display_Refresh+0x28>
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 801128e:	f7fe fc63 	bl	800fb58 <GUI_SD_Write_Screen>
 8011292:	2212      	movs	r2, #18
 8011294:	e7b8      	b.n	8011208 <GUI_Display_Refresh+0x28>
 8011296:	bf00      	nop
 8011298:	20005279 	.word	0x20005279
 801129c:	2000022a 	.word	0x2000022a

080112a0 <GUI_Touch_Processing>:
		default: break;
	}
}

void GUI_Touch_Processing()
{
 80112a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a4:	b087      	sub	sp, #28
	uint16_t Touch_x = 0, Touch_y = 0;
 80112a6:	aa06      	add	r2, sp, #24
 80112a8:	2300      	movs	r3, #0
 80112aa:	f822 3d02 	strh.w	r3, [r2, #-2]!
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 80112ae:	a905      	add	r1, sp, #20
 80112b0:	2070      	movs	r0, #112	; 0x70
	uint16_t Touch_x = 0, Touch_y = 0;
 80112b2:	f8ad 3014 	strh.w	r3, [sp, #20]
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 80112b6:	f00d f8e3 	bl	801e480 <TS_Get_XY1>
	switch(GUI_screen_state){
 80112ba:	4a87      	ldr	r2, [pc, #540]	; (80114d8 <GUI_Touch_Processing+0x238>)
 80112bc:	7813      	ldrb	r3, [r2, #0]
 80112be:	3b01      	subs	r3, #1
 80112c0:	4693      	mov	fp, r2
 80112c2:	2b11      	cmp	r3, #17
 80112c4:	f203 85a4 	bhi.w	8014e10 <GUI_Touch_Processing+0x3b70>
 80112c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80112cc:	01140012 	.word	0x01140012
 80112d0:	02cb01dc 	.word	0x02cb01dc
 80112d4:	04700395 	.word	0x04700395
 80112d8:	08650607 	.word	0x08650607
 80112dc:	0d130aed 	.word	0x0d130aed
 80112e0:	1270111e 	.word	0x1270111e
 80112e4:	161b14be 	.word	0x161b14be
 80112e8:	1a3c186c 	.word	0x1a3c186c
 80112ec:	00781d1d 	.word	0x00781d1d
		
		case Measure_Screen:
			preGUI_screen_state = GUI_screen_state;
 80112f0:	4b7a      	ldr	r3, [pc, #488]	; (80114dc <GUI_Touch_Processing+0x23c>)
		
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80112f2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 80112f6:	2401      	movs	r4, #1
 80112f8:	701c      	strb	r4, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80112fa:	f7ef f92b 	bl	8000554 <__aeabi_i2d>
 80112fe:	4606      	mov	r6, r0
 8011300:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011304:	460f      	mov	r7, r1
 8011306:	f7ef f925 	bl	8000554 <__aeabi_i2d>
 801130a:	a365      	add	r3, pc, #404	; (adr r3, 80114a0 <GUI_Touch_Processing+0x200>)
 801130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011310:	4680      	mov	r8, r0
 8011312:	4689      	mov	r9, r1
 8011314:	f7ef fc0a 	bl	8000b2c <__aeabi_dcmpge>
 8011318:	b900      	cbnz	r0, 801131c <GUI_Touch_Processing+0x7c>
 801131a:	4604      	mov	r4, r0
 801131c:	2200      	movs	r2, #0
 801131e:	4b70      	ldr	r3, [pc, #448]	; (80114e0 <GUI_Touch_Processing+0x240>)
 8011320:	4640      	mov	r0, r8
 8011322:	4649      	mov	r1, r9
 8011324:	b2e4      	uxtb	r4, r4
 8011326:	f04f 0501 	mov.w	r5, #1
 801132a:	f7ef fbf5 	bl	8000b18 <__aeabi_dcmple>
 801132e:	b900      	cbnz	r0, 8011332 <GUI_Touch_Processing+0x92>
 8011330:	4605      	mov	r5, r0
 8011332:	a35d      	add	r3, pc, #372	; (adr r3, 80114a8 <GUI_Touch_Processing+0x208>)
 8011334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011338:	4630      	mov	r0, r6
 801133a:	4639      	mov	r1, r7
 801133c:	b2ed      	uxtb	r5, r5
 801133e:	f04f 0801 	mov.w	r8, #1
 8011342:	f7ef fbf3 	bl	8000b2c <__aeabi_dcmpge>
 8011346:	b900      	cbnz	r0, 801134a <GUI_Touch_Processing+0xaa>
 8011348:	4680      	mov	r8, r0
 801134a:	a359      	add	r3, pc, #356	; (adr r3, 80114b0 <GUI_Touch_Processing+0x210>)
 801134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011350:	4630      	mov	r0, r6
 8011352:	4639      	mov	r1, r7
 8011354:	f04f 0901 	mov.w	r9, #1
 8011358:	f7ef fbde 	bl	8000b18 <__aeabi_dcmple>
 801135c:	b900      	cbnz	r0, 8011360 <GUI_Touch_Processing+0xc0>
 801135e:	4681      	mov	r9, r0
 8011360:	ea08 0309 	and.w	r3, r8, r9
 8011364:	421c      	tst	r4, r3
 8011366:	d003      	beq.n	8011370 <GUI_Touch_Processing+0xd0>
 8011368:	b115      	cbz	r5, 8011370 <GUI_Touch_Processing+0xd0>
				{	
					GUI_screen_state = DataSet1_Screen;
 801136a:	2307      	movs	r3, #7
 801136c:	f88b 3000 	strb.w	r3, [fp]
				} 
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 8011370:	a351      	add	r3, pc, #324	; (adr r3, 80114b8 <GUI_Touch_Processing+0x218>)
 8011372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011376:	4630      	mov	r0, r6
 8011378:	4639      	mov	r1, r7
 801137a:	402c      	ands	r4, r5
 801137c:	f04f 0501 	mov.w	r5, #1
 8011380:	f7ef fbd4 	bl	8000b2c <__aeabi_dcmpge>
 8011384:	b900      	cbnz	r0, 8011388 <GUI_Touch_Processing+0xe8>
 8011386:	4605      	mov	r5, r0
 8011388:	a34d      	add	r3, pc, #308	; (adr r3, 80114c0 <GUI_Touch_Processing+0x220>)
 801138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138e:	4630      	mov	r0, r6
 8011390:	4639      	mov	r1, r7
 8011392:	f04f 0801 	mov.w	r8, #1
 8011396:	f7ef fbbf 	bl	8000b18 <__aeabi_dcmple>
 801139a:	b900      	cbnz	r0, 801139e <GUI_Touch_Processing+0xfe>
 801139c:	4680      	mov	r8, r0
 801139e:	ea05 0508 	and.w	r5, r5, r8
 80113a2:	07ea      	lsls	r2, r5, #31
 80113a4:	d50d      	bpl.n	80113c2 <GUI_Touch_Processing+0x122>
 80113a6:	b164      	cbz	r4, 80113c2 <GUI_Touch_Processing+0x122>
				{	
					GUI_screen_state = (screen_count > 0) ? Measure2_Screen : Measure_Screen; 
 80113a8:	4b4e      	ldr	r3, [pc, #312]	; (80114e4 <GUI_Touch_Processing+0x244>)
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	bf0c      	ite	eq
 80113b0:	2001      	moveq	r0, #1
 80113b2:	2002      	movne	r0, #2
 80113b4:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 80113b8:	f00b f95e 	bl	801c678 <WriteFLASH_Screen>

		break;
				
		default: preGUI_screen_state = Measure_Screen;
			}
 80113bc:	b007      	add	sp, #28
 80113be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 80113c2:	a33f      	add	r3, pc, #252	; (adr r3, 80114c0 <GUI_Touch_Processing+0x220>)
 80113c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c8:	4630      	mov	r0, r6
 80113ca:	4639      	mov	r1, r7
 80113cc:	f04f 0501 	mov.w	r5, #1
 80113d0:	f7ef fbac 	bl	8000b2c <__aeabi_dcmpge>
 80113d4:	b900      	cbnz	r0, 80113d8 <GUI_Touch_Processing+0x138>
 80113d6:	4605      	mov	r5, r0
 80113d8:	a33b      	add	r3, pc, #236	; (adr r3, 80114c8 <GUI_Touch_Processing+0x228>)
 80113da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113de:	4630      	mov	r0, r6
 80113e0:	4639      	mov	r1, r7
 80113e2:	f04f 0801 	mov.w	r8, #1
 80113e6:	f7ef fb97 	bl	8000b18 <__aeabi_dcmple>
 80113ea:	b900      	cbnz	r0, 80113ee <GUI_Touch_Processing+0x14e>
 80113ec:	4680      	mov	r8, r0
 80113ee:	ea05 0508 	and.w	r5, r5, r8
 80113f2:	07eb      	lsls	r3, r5, #31
 80113f4:	d507      	bpl.n	8011406 <GUI_Touch_Processing+0x166>
 80113f6:	b134      	cbz	r4, 8011406 <GUI_Touch_Processing+0x166>
					WriteFLASH_Screen(Graph_Screen);
 80113f8:	2004      	movs	r0, #4
 80113fa:	f00b f93d 	bl	801c678 <WriteFLASH_Screen>
					GUI_screen_state =  Graph_Screen;
 80113fe:	2304      	movs	r3, #4
 8011400:	f88b 3000 	strb.w	r3, [fp]
 8011404:	e7da      	b.n	80113bc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011406:	a32a      	add	r3, pc, #168	; (adr r3, 80114b0 <GUI_Touch_Processing+0x210>)
 8011408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140c:	4630      	mov	r0, r6
 801140e:	4639      	mov	r1, r7
 8011410:	f04f 0501 	mov.w	r5, #1
 8011414:	f7ef fb8a 	bl	8000b2c <__aeabi_dcmpge>
 8011418:	b900      	cbnz	r0, 801141c <GUI_Touch_Processing+0x17c>
 801141a:	4605      	mov	r5, r0
 801141c:	a32c      	add	r3, pc, #176	; (adr r3, 80114d0 <GUI_Touch_Processing+0x230>)
 801141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011422:	4630      	mov	r0, r6
 8011424:	4639      	mov	r1, r7
 8011426:	f04f 0801 	mov.w	r8, #1
 801142a:	f7ef fb75 	bl	8000b18 <__aeabi_dcmple>
 801142e:	b900      	cbnz	r0, 8011432 <GUI_Touch_Processing+0x192>
 8011430:	4680      	mov	r8, r0
 8011432:	ea05 0508 	and.w	r5, r5, r8
 8011436:	07ed      	lsls	r5, r5, #31
 8011438:	d508      	bpl.n	801144c <GUI_Touch_Processing+0x1ac>
 801143a:	b13c      	cbz	r4, 801144c <GUI_Touch_Processing+0x1ac>
					if(!SD_Detect){if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}}
 801143c:	4b2a      	ldr	r3, [pc, #168]	; (80114e8 <GUI_Touch_Processing+0x248>)
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d1bb      	bne.n	80113bc <GUI_Touch_Processing+0x11c>
 8011444:	4b24      	ldr	r3, [pc, #144]	; (80114d8 <GUI_Touch_Processing+0x238>)
 8011446:	2212      	movs	r2, #18
 8011448:	701a      	strb	r2, [r3, #0]
 801144a:	e7b7      	b.n	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 801144c:	a320      	add	r3, pc, #128	; (adr r3, 80114d0 <GUI_Touch_Processing+0x230>)
 801144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011452:	4630      	mov	r0, r6
 8011454:	4639      	mov	r1, r7
 8011456:	f04f 0501 	mov.w	r5, #1
 801145a:	f7ef fb67 	bl	8000b2c <__aeabi_dcmpge>
 801145e:	b900      	cbnz	r0, 8011462 <GUI_Touch_Processing+0x1c2>
 8011460:	4605      	mov	r5, r0
 8011462:	a315      	add	r3, pc, #84	; (adr r3, 80114b8 <GUI_Touch_Processing+0x218>)
 8011464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011468:	4630      	mov	r0, r6
 801146a:	4639      	mov	r1, r7
 801146c:	f04f 0801 	mov.w	r8, #1
 8011470:	f7ef fb52 	bl	8000b18 <__aeabi_dcmple>
 8011474:	b900      	cbnz	r0, 8011478 <GUI_Touch_Processing+0x1d8>
 8011476:	4680      	mov	r8, r0
 8011478:	ea05 0508 	and.w	r5, r5, r8
 801147c:	07e8      	lsls	r0, r5, #31
 801147e:	d59d      	bpl.n	80113bc <GUI_Touch_Processing+0x11c>
 8011480:	2c00      	cmp	r4, #0
 8011482:	d09b      	beq.n	80113bc <GUI_Touch_Processing+0x11c>
						pause = !pause;
 8011484:	4a19      	ldr	r2, [pc, #100]	; (80114ec <GUI_Touch_Processing+0x24c>)
						GUI_Bar_Measure(85, 13, 0.0);
 8011486:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80114f0 <GUI_Touch_Processing+0x250>
						pause = !pause;
 801148a:	7813      	ldrb	r3, [r2, #0]
 801148c:	fab3 f383 	clz	r3, r3
 8011490:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 8011492:	210d      	movs	r1, #13
 8011494:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 8011496:	7013      	strb	r3, [r2, #0]
						GUI_Bar_Measure(85, 13, 0.0);
 8011498:	f004 fc84 	bl	8015da4 <GUI_Bar_Measure>
 801149c:	e78e      	b.n	80113bc <GUI_Touch_Processing+0x11c>
 801149e:	bf00      	nop
 80114a0:	99999999 	.word	0x99999999
 80114a4:	4091a399 	.word	0x4091a399
 80114a8:	33333333 	.word	0x33333333
 80114ac:	40053333 	.word	0x40053333
 80114b0:	00000000 	.word	0x00000000
 80114b4:	40623800 	.word	0x40623800
 80114b8:	33333333 	.word	0x33333333
 80114bc:	407aff33 	.word	0x407aff33
 80114c0:	66666666 	.word	0x66666666
 80114c4:	4081f866 	.word	0x4081f866
 80114c8:	33333333 	.word	0x33333333
 80114cc:	40867133 	.word	0x40867133
 80114d0:	99999999 	.word	0x99999999
 80114d4:	40720d99 	.word	0x40720d99
 80114d8:	20005279 	.word	0x20005279
 80114dc:	2000022a 	.word	0x2000022a
 80114e0:	4093e000 	.word	0x4093e000
 80114e4:	200052a3 	.word	0x200052a3
 80114e8:	200914c8 	.word	0x200914c8
 80114ec:	200052a0 	.word	0x200052a0
 80114f0:	00000000 	.word	0x00000000
			preGUI_screen_state = GUI_screen_state;
 80114f4:	4ba4      	ldr	r3, [pc, #656]	; (8011788 <GUI_Touch_Processing+0x4e8>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80114f6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 80114fa:	2202      	movs	r2, #2
 80114fc:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80114fe:	f7ef f829 	bl	8000554 <__aeabi_i2d>
 8011502:	4606      	mov	r6, r0
 8011504:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011508:	460f      	mov	r7, r1
 801150a:	f7ef f823 	bl	8000554 <__aeabi_i2d>
 801150e:	a390      	add	r3, pc, #576	; (adr r3, 8011750 <GUI_Touch_Processing+0x4b0>)
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	4680      	mov	r8, r0
 8011516:	4689      	mov	r9, r1
 8011518:	f04f 0501 	mov.w	r5, #1
 801151c:	f7ef fb06 	bl	8000b2c <__aeabi_dcmpge>
 8011520:	b900      	cbnz	r0, 8011524 <GUI_Touch_Processing+0x284>
 8011522:	4605      	mov	r5, r0
 8011524:	2200      	movs	r2, #0
 8011526:	4b99      	ldr	r3, [pc, #612]	; (801178c <GUI_Touch_Processing+0x4ec>)
 8011528:	4640      	mov	r0, r8
 801152a:	4649      	mov	r1, r9
 801152c:	b2ed      	uxtb	r5, r5
 801152e:	f04f 0401 	mov.w	r4, #1
 8011532:	f7ef faf1 	bl	8000b18 <__aeabi_dcmple>
 8011536:	b900      	cbnz	r0, 801153a <GUI_Touch_Processing+0x29a>
 8011538:	4604      	mov	r4, r0
 801153a:	a387      	add	r3, pc, #540	; (adr r3, 8011758 <GUI_Touch_Processing+0x4b8>)
 801153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011540:	4630      	mov	r0, r6
 8011542:	4639      	mov	r1, r7
 8011544:	b2e4      	uxtb	r4, r4
 8011546:	f04f 0801 	mov.w	r8, #1
 801154a:	f7ef faef 	bl	8000b2c <__aeabi_dcmpge>
 801154e:	b900      	cbnz	r0, 8011552 <GUI_Touch_Processing+0x2b2>
 8011550:	4680      	mov	r8, r0
 8011552:	a383      	add	r3, pc, #524	; (adr r3, 8011760 <GUI_Touch_Processing+0x4c0>)
 8011554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011558:	4630      	mov	r0, r6
 801155a:	4639      	mov	r1, r7
 801155c:	f04f 0901 	mov.w	r9, #1
 8011560:	f7ef fada 	bl	8000b18 <__aeabi_dcmple>
 8011564:	b900      	cbnz	r0, 8011568 <GUI_Touch_Processing+0x2c8>
 8011566:	4681      	mov	r9, r0
 8011568:	ea08 0309 	and.w	r3, r8, r9
 801156c:	421d      	tst	r5, r3
 801156e:	d003      	beq.n	8011578 <GUI_Touch_Processing+0x2d8>
 8011570:	b114      	cbz	r4, 8011578 <GUI_Touch_Processing+0x2d8>
					GUI_screen_state = DataSet1_Screen;
 8011572:	2307      	movs	r3, #7
 8011574:	f88b 3000 	strb.w	r3, [fp]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8011578:	a37b      	add	r3, pc, #492	; (adr r3, 8011768 <GUI_Touch_Processing+0x4c8>)
 801157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801157e:	4630      	mov	r0, r6
 8011580:	4639      	mov	r1, r7
 8011582:	402c      	ands	r4, r5
 8011584:	f04f 0501 	mov.w	r5, #1
 8011588:	f7ef fad0 	bl	8000b2c <__aeabi_dcmpge>
 801158c:	b900      	cbnz	r0, 8011590 <GUI_Touch_Processing+0x2f0>
 801158e:	4605      	mov	r5, r0
 8011590:	a377      	add	r3, pc, #476	; (adr r3, 8011770 <GUI_Touch_Processing+0x4d0>)
 8011592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011596:	4630      	mov	r0, r6
 8011598:	4639      	mov	r1, r7
 801159a:	f04f 0801 	mov.w	r8, #1
 801159e:	f7ef fabb 	bl	8000b18 <__aeabi_dcmple>
 80115a2:	b900      	cbnz	r0, 80115a6 <GUI_Touch_Processing+0x306>
 80115a4:	4680      	mov	r8, r0
 80115a6:	ea05 0508 	and.w	r5, r5, r8
 80115aa:	07e9      	lsls	r1, r5, #31
 80115ac:	d50b      	bpl.n	80115c6 <GUI_Touch_Processing+0x326>
 80115ae:	b154      	cbz	r4, 80115c6 <GUI_Touch_Processing+0x326>
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 80115b0:	4b77      	ldr	r3, [pc, #476]	; (8011790 <GUI_Touch_Processing+0x4f0>)
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	bf34      	ite	cc
 80115b8:	2001      	movcc	r0, #1
 80115ba:	2003      	movcs	r0, #3
 80115bc:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 80115c0:	f00b f85a 	bl	801c678 <WriteFLASH_Screen>
 80115c4:	e6fa      	b.n	80113bc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 80115c6:	a36a      	add	r3, pc, #424	; (adr r3, 8011770 <GUI_Touch_Processing+0x4d0>)
 80115c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115cc:	4630      	mov	r0, r6
 80115ce:	4639      	mov	r1, r7
 80115d0:	f04f 0501 	mov.w	r5, #1
 80115d4:	f7ef faaa 	bl	8000b2c <__aeabi_dcmpge>
 80115d8:	b900      	cbnz	r0, 80115dc <GUI_Touch_Processing+0x33c>
 80115da:	4605      	mov	r5, r0
 80115dc:	a366      	add	r3, pc, #408	; (adr r3, 8011778 <GUI_Touch_Processing+0x4d8>)
 80115de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e2:	4630      	mov	r0, r6
 80115e4:	4639      	mov	r1, r7
 80115e6:	f04f 0801 	mov.w	r8, #1
 80115ea:	f7ef fa95 	bl	8000b18 <__aeabi_dcmple>
 80115ee:	b900      	cbnz	r0, 80115f2 <GUI_Touch_Processing+0x352>
 80115f0:	4680      	mov	r8, r0
 80115f2:	ea05 0508 	and.w	r5, r5, r8
 80115f6:	07ea      	lsls	r2, r5, #31
 80115f8:	d502      	bpl.n	8011600 <GUI_Touch_Processing+0x360>
 80115fa:	2c00      	cmp	r4, #0
 80115fc:	f47f aefc 	bne.w	80113f8 <GUI_Touch_Processing+0x158>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011600:	a357      	add	r3, pc, #348	; (adr r3, 8011760 <GUI_Touch_Processing+0x4c0>)
 8011602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011606:	4630      	mov	r0, r6
 8011608:	4639      	mov	r1, r7
 801160a:	f04f 0501 	mov.w	r5, #1
 801160e:	f7ef fa8d 	bl	8000b2c <__aeabi_dcmpge>
 8011612:	b900      	cbnz	r0, 8011616 <GUI_Touch_Processing+0x376>
 8011614:	4605      	mov	r5, r0
 8011616:	a35a      	add	r3, pc, #360	; (adr r3, 8011780 <GUI_Touch_Processing+0x4e0>)
 8011618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161c:	4630      	mov	r0, r6
 801161e:	4639      	mov	r1, r7
 8011620:	f04f 0801 	mov.w	r8, #1
 8011624:	f7ef fa78 	bl	8000b18 <__aeabi_dcmple>
 8011628:	b900      	cbnz	r0, 801162c <GUI_Touch_Processing+0x38c>
 801162a:	4680      	mov	r8, r0
 801162c:	ea05 0508 	and.w	r5, r5, r8
 8011630:	07eb      	lsls	r3, r5, #31
 8011632:	d502      	bpl.n	801163a <GUI_Touch_Processing+0x39a>
 8011634:	2c00      	cmp	r4, #0
 8011636:	f47f af01 	bne.w	801143c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 801163a:	a351      	add	r3, pc, #324	; (adr r3, 8011780 <GUI_Touch_Processing+0x4e0>)
 801163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011640:	4630      	mov	r0, r6
 8011642:	4639      	mov	r1, r7
 8011644:	f04f 0501 	mov.w	r5, #1
 8011648:	f7ef fa70 	bl	8000b2c <__aeabi_dcmpge>
 801164c:	b900      	cbnz	r0, 8011650 <GUI_Touch_Processing+0x3b0>
 801164e:	4605      	mov	r5, r0
 8011650:	a345      	add	r3, pc, #276	; (adr r3, 8011768 <GUI_Touch_Processing+0x4c8>)
 8011652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011656:	4630      	mov	r0, r6
 8011658:	4639      	mov	r1, r7
 801165a:	f04f 0801 	mov.w	r8, #1
 801165e:	f7ef fa5b 	bl	8000b18 <__aeabi_dcmple>
 8011662:	b900      	cbnz	r0, 8011666 <GUI_Touch_Processing+0x3c6>
 8011664:	4680      	mov	r8, r0
 8011666:	ea05 0508 	and.w	r5, r5, r8
 801166a:	07ee      	lsls	r6, r5, #31
 801166c:	f57f aea6 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
 8011670:	2c00      	cmp	r4, #0
 8011672:	f43f aea3 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
						pause = !pause;
 8011676:	4a47      	ldr	r2, [pc, #284]	; (8011794 <GUI_Touch_Processing+0x4f4>)
 8011678:	7813      	ldrb	r3, [r2, #0]
 801167a:	fab3 f383 	clz	r3, r3
 801167e:	095b      	lsrs	r3, r3, #5
 8011680:	7013      	strb	r3, [r2, #0]
 8011682:	e69b      	b.n	80113bc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 8011684:	4b40      	ldr	r3, [pc, #256]	; (8011788 <GUI_Touch_Processing+0x4e8>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8011686:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 801168a:	2203      	movs	r2, #3
 801168c:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 801168e:	f7ee ff61 	bl	8000554 <__aeabi_i2d>
 8011692:	4606      	mov	r6, r0
 8011694:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011698:	460f      	mov	r7, r1
 801169a:	f7ee ff5b 	bl	8000554 <__aeabi_i2d>
 801169e:	a32c      	add	r3, pc, #176	; (adr r3, 8011750 <GUI_Touch_Processing+0x4b0>)
 80116a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a4:	4680      	mov	r8, r0
 80116a6:	4689      	mov	r9, r1
 80116a8:	f04f 0501 	mov.w	r5, #1
 80116ac:	f7ef fa3e 	bl	8000b2c <__aeabi_dcmpge>
 80116b0:	b900      	cbnz	r0, 80116b4 <GUI_Touch_Processing+0x414>
 80116b2:	4605      	mov	r5, r0
 80116b4:	2200      	movs	r2, #0
 80116b6:	4b35      	ldr	r3, [pc, #212]	; (801178c <GUI_Touch_Processing+0x4ec>)
 80116b8:	4640      	mov	r0, r8
 80116ba:	4649      	mov	r1, r9
 80116bc:	b2ed      	uxtb	r5, r5
 80116be:	f04f 0401 	mov.w	r4, #1
 80116c2:	f7ef fa29 	bl	8000b18 <__aeabi_dcmple>
 80116c6:	b900      	cbnz	r0, 80116ca <GUI_Touch_Processing+0x42a>
 80116c8:	4604      	mov	r4, r0
 80116ca:	a323      	add	r3, pc, #140	; (adr r3, 8011758 <GUI_Touch_Processing+0x4b8>)
 80116cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d0:	4630      	mov	r0, r6
 80116d2:	4639      	mov	r1, r7
 80116d4:	b2e4      	uxtb	r4, r4
 80116d6:	f04f 0801 	mov.w	r8, #1
 80116da:	f7ef fa27 	bl	8000b2c <__aeabi_dcmpge>
 80116de:	b900      	cbnz	r0, 80116e2 <GUI_Touch_Processing+0x442>
 80116e0:	4680      	mov	r8, r0
 80116e2:	a31f      	add	r3, pc, #124	; (adr r3, 8011760 <GUI_Touch_Processing+0x4c0>)
 80116e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e8:	4630      	mov	r0, r6
 80116ea:	4639      	mov	r1, r7
 80116ec:	f04f 0901 	mov.w	r9, #1
 80116f0:	f7ef fa12 	bl	8000b18 <__aeabi_dcmple>
 80116f4:	b900      	cbnz	r0, 80116f8 <GUI_Touch_Processing+0x458>
 80116f6:	4681      	mov	r9, r0
 80116f8:	ea08 0309 	and.w	r3, r8, r9
 80116fc:	421d      	tst	r5, r3
 80116fe:	d003      	beq.n	8011708 <GUI_Touch_Processing+0x468>
 8011700:	b114      	cbz	r4, 8011708 <GUI_Touch_Processing+0x468>
					GUI_screen_state = DataSet1_Screen;
 8011702:	2307      	movs	r3, #7
 8011704:	f88b 3000 	strb.w	r3, [fp]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 8011708:	a317      	add	r3, pc, #92	; (adr r3, 8011768 <GUI_Touch_Processing+0x4c8>)
 801170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170e:	4630      	mov	r0, r6
 8011710:	4639      	mov	r1, r7
 8011712:	402c      	ands	r4, r5
 8011714:	f04f 0501 	mov.w	r5, #1
 8011718:	f7ef fa08 	bl	8000b2c <__aeabi_dcmpge>
 801171c:	b900      	cbnz	r0, 8011720 <GUI_Touch_Processing+0x480>
 801171e:	4605      	mov	r5, r0
 8011720:	a313      	add	r3, pc, #76	; (adr r3, 8011770 <GUI_Touch_Processing+0x4d0>)
 8011722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011726:	4630      	mov	r0, r6
 8011728:	4639      	mov	r1, r7
 801172a:	f04f 0801 	mov.w	r8, #1
 801172e:	f7ef f9f3 	bl	8000b18 <__aeabi_dcmple>
 8011732:	b900      	cbnz	r0, 8011736 <GUI_Touch_Processing+0x496>
 8011734:	4680      	mov	r8, r0
 8011736:	ea05 0508 	and.w	r5, r5, r8
 801173a:	07ed      	lsls	r5, r5, #31
 801173c:	d52c      	bpl.n	8011798 <GUI_Touch_Processing+0x4f8>
 801173e:	b35c      	cbz	r4, 8011798 <GUI_Touch_Processing+0x4f8>
					GUI_screen_state = Measure_Screen;
 8011740:	2001      	movs	r0, #1
 8011742:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 8011746:	f00a ff97 	bl	801c678 <WriteFLASH_Screen>
 801174a:	e637      	b.n	80113bc <GUI_Touch_Processing+0x11c>
 801174c:	f3af 8000 	nop.w
 8011750:	99999999 	.word	0x99999999
 8011754:	4091a399 	.word	0x4091a399
 8011758:	33333333 	.word	0x33333333
 801175c:	40053333 	.word	0x40053333
 8011760:	00000000 	.word	0x00000000
 8011764:	40623800 	.word	0x40623800
 8011768:	33333333 	.word	0x33333333
 801176c:	407aff33 	.word	0x407aff33
 8011770:	66666666 	.word	0x66666666
 8011774:	4081f866 	.word	0x4081f866
 8011778:	33333333 	.word	0x33333333
 801177c:	40867133 	.word	0x40867133
 8011780:	99999999 	.word	0x99999999
 8011784:	40720d99 	.word	0x40720d99
 8011788:	2000022a 	.word	0x2000022a
 801178c:	4093e000 	.word	0x4093e000
 8011790:	200052a3 	.word	0x200052a3
 8011794:	200052a0 	.word	0x200052a0
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8011798:	a3d5      	add	r3, pc, #852	; (adr r3, 8011af0 <GUI_Touch_Processing+0x850>)
 801179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179e:	4630      	mov	r0, r6
 80117a0:	4639      	mov	r1, r7
 80117a2:	f04f 0501 	mov.w	r5, #1
 80117a6:	f7ef f9c1 	bl	8000b2c <__aeabi_dcmpge>
 80117aa:	b900      	cbnz	r0, 80117ae <GUI_Touch_Processing+0x50e>
 80117ac:	4605      	mov	r5, r0
 80117ae:	a3d2      	add	r3, pc, #840	; (adr r3, 8011af8 <GUI_Touch_Processing+0x858>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	4630      	mov	r0, r6
 80117b6:	4639      	mov	r1, r7
 80117b8:	f04f 0801 	mov.w	r8, #1
 80117bc:	f7ef f9ac 	bl	8000b18 <__aeabi_dcmple>
 80117c0:	b900      	cbnz	r0, 80117c4 <GUI_Touch_Processing+0x524>
 80117c2:	4680      	mov	r8, r0
 80117c4:	ea05 0508 	and.w	r5, r5, r8
 80117c8:	07e8      	lsls	r0, r5, #31
 80117ca:	d502      	bpl.n	80117d2 <GUI_Touch_Processing+0x532>
 80117cc:	2c00      	cmp	r4, #0
 80117ce:	f47f ae13 	bne.w	80113f8 <GUI_Touch_Processing+0x158>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80117d2:	a3c3      	add	r3, pc, #780	; (adr r3, 8011ae0 <GUI_Touch_Processing+0x840>)
 80117d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d8:	4630      	mov	r0, r6
 80117da:	4639      	mov	r1, r7
 80117dc:	f04f 0501 	mov.w	r5, #1
 80117e0:	f7ef f9a4 	bl	8000b2c <__aeabi_dcmpge>
 80117e4:	b900      	cbnz	r0, 80117e8 <GUI_Touch_Processing+0x548>
 80117e6:	4605      	mov	r5, r0
 80117e8:	a3c5      	add	r3, pc, #788	; (adr r3, 8011b00 <GUI_Touch_Processing+0x860>)
 80117ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ee:	4630      	mov	r0, r6
 80117f0:	4639      	mov	r1, r7
 80117f2:	f04f 0801 	mov.w	r8, #1
 80117f6:	f7ef f98f 	bl	8000b18 <__aeabi_dcmple>
 80117fa:	b900      	cbnz	r0, 80117fe <GUI_Touch_Processing+0x55e>
 80117fc:	4680      	mov	r8, r0
 80117fe:	ea05 0508 	and.w	r5, r5, r8
 8011802:	07e9      	lsls	r1, r5, #31
 8011804:	d502      	bpl.n	801180c <GUI_Touch_Processing+0x56c>
 8011806:	2c00      	cmp	r4, #0
 8011808:	f47f ae18 	bne.w	801143c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 801180c:	a3bc      	add	r3, pc, #752	; (adr r3, 8011b00 <GUI_Touch_Processing+0x860>)
 801180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011812:	4630      	mov	r0, r6
 8011814:	4639      	mov	r1, r7
 8011816:	f04f 0501 	mov.w	r5, #1
 801181a:	f7ef f987 	bl	8000b2c <__aeabi_dcmpge>
 801181e:	b900      	cbnz	r0, 8011822 <GUI_Touch_Processing+0x582>
 8011820:	4605      	mov	r5, r0
 8011822:	a3b1      	add	r3, pc, #708	; (adr r3, 8011ae8 <GUI_Touch_Processing+0x848>)
 8011824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011828:	4630      	mov	r0, r6
 801182a:	4639      	mov	r1, r7
 801182c:	f04f 0801 	mov.w	r8, #1
 8011830:	f7ef f972 	bl	8000b18 <__aeabi_dcmple>
 8011834:	b900      	cbnz	r0, 8011838 <GUI_Touch_Processing+0x598>
 8011836:	4680      	mov	r8, r0
 8011838:	ea05 0508 	and.w	r5, r5, r8
 801183c:	07ea      	lsls	r2, r5, #31
 801183e:	f57f adbd 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
 8011842:	2c00      	cmp	r4, #0
 8011844:	f43f adba 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
						pause = !pause;
 8011848:	4aaf      	ldr	r2, [pc, #700]	; (8011b08 <GUI_Touch_Processing+0x868>)
						GUI_Bar_Measure(85, 13, 0.0);
 801184a:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8011b0c <GUI_Touch_Processing+0x86c>
						pause = !pause;
 801184e:	7813      	ldrb	r3, [r2, #0]
 8011850:	fab3 f383 	clz	r3, r3
 8011854:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 8011856:	210d      	movs	r1, #13
 8011858:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 801185a:	7013      	strb	r3, [r2, #0]
						GUI_Bar_Measure(85, 13, 0.0);
 801185c:	f004 faa2 	bl	8015da4 <GUI_Bar_Measure>
 8011860:	e5ac      	b.n	80113bc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 8011862:	4bab      	ldr	r3, [pc, #684]	; (8011b10 <GUI_Touch_Processing+0x870>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8011864:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8011868:	2204      	movs	r2, #4
 801186a:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 801186c:	f7ee fe72 	bl	8000554 <__aeabi_i2d>
 8011870:	4606      	mov	r6, r0
 8011872:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011876:	460f      	mov	r7, r1
 8011878:	f7ee fe6c 	bl	8000554 <__aeabi_i2d>
 801187c:	a394      	add	r3, pc, #592	; (adr r3, 8011ad0 <GUI_Touch_Processing+0x830>)
 801187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011882:	4680      	mov	r8, r0
 8011884:	4689      	mov	r9, r1
 8011886:	f04f 0501 	mov.w	r5, #1
 801188a:	f7ef f94f 	bl	8000b2c <__aeabi_dcmpge>
 801188e:	b900      	cbnz	r0, 8011892 <GUI_Touch_Processing+0x5f2>
 8011890:	4605      	mov	r5, r0
 8011892:	2200      	movs	r2, #0
 8011894:	4b9f      	ldr	r3, [pc, #636]	; (8011b14 <GUI_Touch_Processing+0x874>)
 8011896:	4640      	mov	r0, r8
 8011898:	4649      	mov	r1, r9
 801189a:	b2ed      	uxtb	r5, r5
 801189c:	f04f 0401 	mov.w	r4, #1
 80118a0:	f7ef f93a 	bl	8000b18 <__aeabi_dcmple>
 80118a4:	b900      	cbnz	r0, 80118a8 <GUI_Touch_Processing+0x608>
 80118a6:	4604      	mov	r4, r0
 80118a8:	a38b      	add	r3, pc, #556	; (adr r3, 8011ad8 <GUI_Touch_Processing+0x838>)
 80118aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ae:	4630      	mov	r0, r6
 80118b0:	4639      	mov	r1, r7
 80118b2:	b2e4      	uxtb	r4, r4
 80118b4:	f04f 0801 	mov.w	r8, #1
 80118b8:	f7ef f938 	bl	8000b2c <__aeabi_dcmpge>
 80118bc:	b900      	cbnz	r0, 80118c0 <GUI_Touch_Processing+0x620>
 80118be:	4680      	mov	r8, r0
 80118c0:	a387      	add	r3, pc, #540	; (adr r3, 8011ae0 <GUI_Touch_Processing+0x840>)
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	4630      	mov	r0, r6
 80118c8:	4639      	mov	r1, r7
 80118ca:	f04f 0901 	mov.w	r9, #1
 80118ce:	f7ef f923 	bl	8000b18 <__aeabi_dcmple>
 80118d2:	b900      	cbnz	r0, 80118d6 <GUI_Touch_Processing+0x636>
 80118d4:	4681      	mov	r9, r0
 80118d6:	ea08 0309 	and.w	r3, r8, r9
 80118da:	421d      	tst	r5, r3
 80118dc:	d003      	beq.n	80118e6 <GUI_Touch_Processing+0x646>
 80118de:	b114      	cbz	r4, 80118e6 <GUI_Touch_Processing+0x646>
					GUI_screen_state = GraphSet1_Screen;
 80118e0:	230c      	movs	r3, #12
 80118e2:	f88b 3000 	strb.w	r3, [fp]
			if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Rotation_Screen
 80118e6:	a380      	add	r3, pc, #512	; (adr r3, 8011ae8 <GUI_Touch_Processing+0x848>)
 80118e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ec:	4630      	mov	r0, r6
 80118ee:	4639      	mov	r1, r7
 80118f0:	402c      	ands	r4, r5
 80118f2:	f04f 0501 	mov.w	r5, #1
 80118f6:	f7ef f919 	bl	8000b2c <__aeabi_dcmpge>
 80118fa:	b900      	cbnz	r0, 80118fe <GUI_Touch_Processing+0x65e>
 80118fc:	4605      	mov	r5, r0
 80118fe:	a37c      	add	r3, pc, #496	; (adr r3, 8011af0 <GUI_Touch_Processing+0x850>)
 8011900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011904:	4630      	mov	r0, r6
 8011906:	4639      	mov	r1, r7
 8011908:	f04f 0801 	mov.w	r8, #1
 801190c:	f7ef f904 	bl	8000b18 <__aeabi_dcmple>
 8011910:	b900      	cbnz	r0, 8011914 <GUI_Touch_Processing+0x674>
 8011912:	4680      	mov	r8, r0
 8011914:	ea05 0508 	and.w	r5, r5, r8
 8011918:	07eb      	lsls	r3, r5, #31
 801191a:	d508      	bpl.n	801192e <GUI_Touch_Processing+0x68e>
 801191c:	b13c      	cbz	r4, 801192e <GUI_Touch_Processing+0x68e>
					if(Rotation_Screen_Spectral < 0x02) {Rotation_Screen_Spectral++;} else{Rotation_Screen_Spectral= 0x00;}
 801191e:	4a7e      	ldr	r2, [pc, #504]	; (8011b18 <GUI_Touch_Processing+0x878>)
 8011920:	7813      	ldrb	r3, [r2, #0]
 8011922:	2b01      	cmp	r3, #1
 8011924:	bf94      	ite	ls
 8011926:	3301      	addls	r3, #1
 8011928:	2300      	movhi	r3, #0
 801192a:	7013      	strb	r3, [r2, #0]
 801192c:	e546      	b.n	80113bc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 801192e:	a370      	add	r3, pc, #448	; (adr r3, 8011af0 <GUI_Touch_Processing+0x850>)
 8011930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011934:	4630      	mov	r0, r6
 8011936:	4639      	mov	r1, r7
 8011938:	f04f 0501 	mov.w	r5, #1
 801193c:	f7ef f8f6 	bl	8000b2c <__aeabi_dcmpge>
 8011940:	b900      	cbnz	r0, 8011944 <GUI_Touch_Processing+0x6a4>
 8011942:	4605      	mov	r5, r0
 8011944:	a36c      	add	r3, pc, #432	; (adr r3, 8011af8 <GUI_Touch_Processing+0x858>)
 8011946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194a:	4630      	mov	r0, r6
 801194c:	4639      	mov	r1, r7
 801194e:	f04f 0801 	mov.w	r8, #1
 8011952:	f7ef f8e1 	bl	8000b18 <__aeabi_dcmple>
 8011956:	b900      	cbnz	r0, 801195a <GUI_Touch_Processing+0x6ba>
 8011958:	4680      	mov	r8, r0
 801195a:	ea05 0508 	and.w	r5, r5, r8
 801195e:	07ed      	lsls	r5, r5, #31
 8011960:	d507      	bpl.n	8011972 <GUI_Touch_Processing+0x6d2>
 8011962:	b134      	cbz	r4, 8011972 <GUI_Touch_Processing+0x6d2>
					WriteFLASH_Screen(Color_Screen);
 8011964:	2005      	movs	r0, #5
 8011966:	f00a fe87 	bl	801c678 <WriteFLASH_Screen>
					GUI_screen_state = Color_Screen;
 801196a:	2305      	movs	r3, #5
 801196c:	f88b 3000 	strb.w	r3, [fp]
 8011970:	e524      	b.n	80113bc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011972:	a35b      	add	r3, pc, #364	; (adr r3, 8011ae0 <GUI_Touch_Processing+0x840>)
 8011974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011978:	4630      	mov	r0, r6
 801197a:	4639      	mov	r1, r7
 801197c:	f04f 0501 	mov.w	r5, #1
 8011980:	f7ef f8d4 	bl	8000b2c <__aeabi_dcmpge>
 8011984:	b900      	cbnz	r0, 8011988 <GUI_Touch_Processing+0x6e8>
 8011986:	4605      	mov	r5, r0
 8011988:	a35d      	add	r3, pc, #372	; (adr r3, 8011b00 <GUI_Touch_Processing+0x860>)
 801198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198e:	4630      	mov	r0, r6
 8011990:	4639      	mov	r1, r7
 8011992:	f04f 0801 	mov.w	r8, #1
 8011996:	f7ef f8bf 	bl	8000b18 <__aeabi_dcmple>
 801199a:	b900      	cbnz	r0, 801199e <GUI_Touch_Processing+0x6fe>
 801199c:	4680      	mov	r8, r0
 801199e:	ea05 0508 	and.w	r5, r5, r8
 80119a2:	07e8      	lsls	r0, r5, #31
 80119a4:	d502      	bpl.n	80119ac <GUI_Touch_Processing+0x70c>
 80119a6:	2c00      	cmp	r4, #0
 80119a8:	f47f ad48 	bne.w	801143c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 80119ac:	a354      	add	r3, pc, #336	; (adr r3, 8011b00 <GUI_Touch_Processing+0x860>)
 80119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b2:	4630      	mov	r0, r6
 80119b4:	4639      	mov	r1, r7
 80119b6:	f04f 0501 	mov.w	r5, #1
 80119ba:	f7ef f8b7 	bl	8000b2c <__aeabi_dcmpge>
 80119be:	b900      	cbnz	r0, 80119c2 <GUI_Touch_Processing+0x722>
 80119c0:	4605      	mov	r5, r0
 80119c2:	a349      	add	r3, pc, #292	; (adr r3, 8011ae8 <GUI_Touch_Processing+0x848>)
 80119c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c8:	4630      	mov	r0, r6
 80119ca:	4639      	mov	r1, r7
 80119cc:	f04f 0801 	mov.w	r8, #1
 80119d0:	f7ef f8a2 	bl	8000b18 <__aeabi_dcmple>
 80119d4:	b900      	cbnz	r0, 80119d8 <GUI_Touch_Processing+0x738>
 80119d6:	4680      	mov	r8, r0
 80119d8:	ea05 0508 	and.w	r5, r5, r8
 80119dc:	07e9      	lsls	r1, r5, #31
 80119de:	f57f aced 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
 80119e2:	2c00      	cmp	r4, #0
 80119e4:	f43f acea 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
					pause = !pause;
 80119e8:	4a47      	ldr	r2, [pc, #284]	; (8011b08 <GUI_Touch_Processing+0x868>)
 80119ea:	7813      	ldrb	r3, [r2, #0]
 80119ec:	fab3 f383 	clz	r3, r3
 80119f0:	095b      	lsrs	r3, r3, #5
 80119f2:	7013      	strb	r3, [r2, #0]
 80119f4:	e4e2      	b.n	80113bc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 80119f6:	4b46      	ldr	r3, [pc, #280]	; (8011b10 <GUI_Touch_Processing+0x870>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80119f8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 80119fc:	2205      	movs	r2, #5
 80119fe:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8011a00:	f7ee fda8 	bl	8000554 <__aeabi_i2d>
 8011a04:	4604      	mov	r4, r0
 8011a06:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011a0a:	460d      	mov	r5, r1
 8011a0c:	f7ee fda2 	bl	8000554 <__aeabi_i2d>
 8011a10:	a32f      	add	r3, pc, #188	; (adr r3, 8011ad0 <GUI_Touch_Processing+0x830>)
 8011a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a16:	4680      	mov	r8, r0
 8011a18:	4689      	mov	r9, r1
 8011a1a:	f04f 0701 	mov.w	r7, #1
 8011a1e:	f7ef f885 	bl	8000b2c <__aeabi_dcmpge>
 8011a22:	b900      	cbnz	r0, 8011a26 <GUI_Touch_Processing+0x786>
 8011a24:	4607      	mov	r7, r0
 8011a26:	2200      	movs	r2, #0
 8011a28:	4b3a      	ldr	r3, [pc, #232]	; (8011b14 <GUI_Touch_Processing+0x874>)
 8011a2a:	4640      	mov	r0, r8
 8011a2c:	4649      	mov	r1, r9
 8011a2e:	b2ff      	uxtb	r7, r7
 8011a30:	f04f 0601 	mov.w	r6, #1
 8011a34:	f7ef f870 	bl	8000b18 <__aeabi_dcmple>
 8011a38:	b900      	cbnz	r0, 8011a3c <GUI_Touch_Processing+0x79c>
 8011a3a:	4606      	mov	r6, r0
 8011a3c:	a326      	add	r3, pc, #152	; (adr r3, 8011ad8 <GUI_Touch_Processing+0x838>)
 8011a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a42:	4620      	mov	r0, r4
 8011a44:	4629      	mov	r1, r5
 8011a46:	b2f6      	uxtb	r6, r6
 8011a48:	f04f 0801 	mov.w	r8, #1
 8011a4c:	f7ef f86e 	bl	8000b2c <__aeabi_dcmpge>
 8011a50:	b900      	cbnz	r0, 8011a54 <GUI_Touch_Processing+0x7b4>
 8011a52:	4680      	mov	r8, r0
 8011a54:	a322      	add	r3, pc, #136	; (adr r3, 8011ae0 <GUI_Touch_Processing+0x840>)
 8011a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	4629      	mov	r1, r5
 8011a5e:	f04f 0901 	mov.w	r9, #1
 8011a62:	f7ef f859 	bl	8000b18 <__aeabi_dcmple>
 8011a66:	b900      	cbnz	r0, 8011a6a <GUI_Touch_Processing+0x7ca>
 8011a68:	4681      	mov	r9, r0
 8011a6a:	ea08 0309 	and.w	r3, r8, r9
 8011a6e:	421f      	tst	r7, r3
 8011a70:	d008      	beq.n	8011a84 <GUI_Touch_Processing+0x7e4>
 8011a72:	b13e      	cbz	r6, 8011a84 <GUI_Touch_Processing+0x7e4>
					preColor_Field = Color_Field;
 8011a74:	4b29      	ldr	r3, [pc, #164]	; (8011b1c <GUI_Touch_Processing+0x87c>)
 8011a76:	781a      	ldrb	r2, [r3, #0]
 8011a78:	4b29      	ldr	r3, [pc, #164]	; (8011b20 <GUI_Touch_Processing+0x880>)
 8011a7a:	701a      	strb	r2, [r3, #0]
					GUI_screen_state = ColorSet1_Screen;
 8011a7c:	230e      	movs	r3, #14
 8011a7e:	f88b 3000 	strb.w	r3, [fp]
 8011a82:	e49b      	b.n	80113bc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8011a84:	a31a      	add	r3, pc, #104	; (adr r3, 8011af0 <GUI_Touch_Processing+0x850>)
 8011a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	4629      	mov	r1, r5
 8011a8e:	ea07 0806 	and.w	r8, r7, r6
 8011a92:	f04f 0901 	mov.w	r9, #1
 8011a96:	f7ef f849 	bl	8000b2c <__aeabi_dcmpge>
 8011a9a:	b900      	cbnz	r0, 8011a9e <GUI_Touch_Processing+0x7fe>
 8011a9c:	4681      	mov	r9, r0
 8011a9e:	a316      	add	r3, pc, #88	; (adr r3, 8011af8 <GUI_Touch_Processing+0x858>)
 8011aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	4629      	mov	r1, r5
 8011aa8:	f04f 0a01 	mov.w	sl, #1
 8011aac:	f7ef f834 	bl	8000b18 <__aeabi_dcmple>
 8011ab0:	b900      	cbnz	r0, 8011ab4 <GUI_Touch_Processing+0x814>
 8011ab2:	4682      	mov	sl, r0
 8011ab4:	ea09 030a 	and.w	r3, r9, sl
 8011ab8:	07da      	lsls	r2, r3, #31
 8011aba:	d533      	bpl.n	8011b24 <GUI_Touch_Processing+0x884>
 8011abc:	f1b8 0f00 	cmp.w	r8, #0
 8011ac0:	d030      	beq.n	8011b24 <GUI_Touch_Processing+0x884>
					WriteFLASH_Screen(Color_Rendition_Screen);
 8011ac2:	2006      	movs	r0, #6
 8011ac4:	f00a fdd8 	bl	801c678 <WriteFLASH_Screen>
					GUI_screen_state = Color_Rendition_Screen;
 8011ac8:	2306      	movs	r3, #6
 8011aca:	f88b 3000 	strb.w	r3, [fp]
 8011ace:	e475      	b.n	80113bc <GUI_Touch_Processing+0x11c>
 8011ad0:	99999999 	.word	0x99999999
 8011ad4:	4091a399 	.word	0x4091a399
 8011ad8:	33333333 	.word	0x33333333
 8011adc:	40053333 	.word	0x40053333
 8011ae0:	00000000 	.word	0x00000000
 8011ae4:	40623800 	.word	0x40623800
 8011ae8:	33333333 	.word	0x33333333
 8011aec:	407aff33 	.word	0x407aff33
 8011af0:	66666666 	.word	0x66666666
 8011af4:	4081f866 	.word	0x4081f866
 8011af8:	33333333 	.word	0x33333333
 8011afc:	40867133 	.word	0x40867133
 8011b00:	99999999 	.word	0x99999999
 8011b04:	40720d99 	.word	0x40720d99
 8011b08:	200052a0 	.word	0x200052a0
 8011b0c:	00000000 	.word	0x00000000
 8011b10:	2000022a 	.word	0x2000022a
 8011b14:	4093e000 	.word	0x4093e000
 8011b18:	20005282 	.word	0x20005282
 8011b1c:	20005277 	.word	0x20005277
 8011b20:	200052a1 	.word	0x200052a1
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 8011b24:	a3b4      	add	r3, pc, #720	; (adr r3, 8011df8 <GUI_Touch_Processing+0xb58>)
 8011b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	f04f 0901 	mov.w	r9, #1
 8011b32:	f7ee fffb 	bl	8000b2c <__aeabi_dcmpge>
 8011b36:	b900      	cbnz	r0, 8011b3a <GUI_Touch_Processing+0x89a>
 8011b38:	4681      	mov	r9, r0
 8011b3a:	a3b9      	add	r3, pc, #740	; (adr r3, 8011e20 <GUI_Touch_Processing+0xb80>)
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	4620      	mov	r0, r4
 8011b42:	4629      	mov	r1, r5
 8011b44:	f04f 0a01 	mov.w	sl, #1
 8011b48:	f7ee ffe6 	bl	8000b18 <__aeabi_dcmple>
 8011b4c:	b900      	cbnz	r0, 8011b50 <GUI_Touch_Processing+0x8b0>
 8011b4e:	4682      	mov	sl, r0
 8011b50:	ea09 030a 	and.w	r3, r9, sl
 8011b54:	07db      	lsls	r3, r3, #31
 8011b56:	d509      	bpl.n	8011b6c <GUI_Touch_Processing+0x8cc>
 8011b58:	f1b8 0f00 	cmp.w	r8, #0
 8011b5c:	d006      	beq.n	8011b6c <GUI_Touch_Processing+0x8cc>
					pause = !pause;
 8011b5e:	4ab2      	ldr	r2, [pc, #712]	; (8011e28 <GUI_Touch_Processing+0xb88>)
 8011b60:	7813      	ldrb	r3, [r2, #0]
 8011b62:	fab3 f383 	clz	r3, r3
 8011b66:	095b      	lsrs	r3, r3, #5
 8011b68:	7013      	strb	r3, [r2, #0]
 8011b6a:	e427      	b.n	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011b6c:	a3a0      	add	r3, pc, #640	; (adr r3, 8011df0 <GUI_Touch_Processing+0xb50>)
 8011b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b72:	4620      	mov	r0, r4
 8011b74:	4629      	mov	r1, r5
 8011b76:	f04f 0801 	mov.w	r8, #1
 8011b7a:	f7ee ffd7 	bl	8000b2c <__aeabi_dcmpge>
 8011b7e:	b900      	cbnz	r0, 8011b82 <GUI_Touch_Processing+0x8e2>
 8011b80:	4680      	mov	r8, r0
 8011b82:	a39d      	add	r3, pc, #628	; (adr r3, 8011df8 <GUI_Touch_Processing+0xb58>)
 8011b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b88:	4620      	mov	r0, r4
 8011b8a:	4629      	mov	r1, r5
 8011b8c:	f04f 0901 	mov.w	r9, #1
 8011b90:	f7ee ffc2 	bl	8000b18 <__aeabi_dcmple>
 8011b94:	b900      	cbnz	r0, 8011b98 <GUI_Touch_Processing+0x8f8>
 8011b96:	4681      	mov	r9, r0
 8011b98:	ea08 0809 	and.w	r8, r8, r9
 8011b9c:	ea17 0f08 	tst.w	r7, r8
 8011ba0:	f43f ac0c 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
 8011ba4:	2e00      	cmp	r6, #0
 8011ba6:	f47f ac49 	bne.w	801143c <GUI_Touch_Processing+0x19c>
 8011baa:	e407      	b.n	80113bc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 8011bac:	4b9f      	ldr	r3, [pc, #636]	; (8011e2c <GUI_Touch_Processing+0xb8c>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8011bae:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8011bb2:	2206      	movs	r2, #6
 8011bb4:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8011bb6:	f7ee fccd 	bl	8000554 <__aeabi_i2d>
 8011bba:	4606      	mov	r6, r0
 8011bbc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011bc0:	460f      	mov	r7, r1
 8011bc2:	f7ee fcc7 	bl	8000554 <__aeabi_i2d>
 8011bc6:	a38e      	add	r3, pc, #568	; (adr r3, 8011e00 <GUI_Touch_Processing+0xb60>)
 8011bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bcc:	4680      	mov	r8, r0
 8011bce:	4689      	mov	r9, r1
 8011bd0:	f04f 0501 	mov.w	r5, #1
 8011bd4:	f7ee ffaa 	bl	8000b2c <__aeabi_dcmpge>
 8011bd8:	b900      	cbnz	r0, 8011bdc <GUI_Touch_Processing+0x93c>
 8011bda:	4605      	mov	r5, r0
 8011bdc:	2200      	movs	r2, #0
 8011bde:	4b94      	ldr	r3, [pc, #592]	; (8011e30 <GUI_Touch_Processing+0xb90>)
 8011be0:	4640      	mov	r0, r8
 8011be2:	4649      	mov	r1, r9
 8011be4:	b2ed      	uxtb	r5, r5
 8011be6:	f04f 0401 	mov.w	r4, #1
 8011bea:	f7ee ff95 	bl	8000b18 <__aeabi_dcmple>
 8011bee:	b900      	cbnz	r0, 8011bf2 <GUI_Touch_Processing+0x952>
 8011bf0:	4604      	mov	r4, r0
 8011bf2:	a385      	add	r3, pc, #532	; (adr r3, 8011e08 <GUI_Touch_Processing+0xb68>)
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	4639      	mov	r1, r7
 8011bfc:	b2e4      	uxtb	r4, r4
 8011bfe:	f04f 0801 	mov.w	r8, #1
 8011c02:	f7ee ff93 	bl	8000b2c <__aeabi_dcmpge>
 8011c06:	b900      	cbnz	r0, 8011c0a <GUI_Touch_Processing+0x96a>
 8011c08:	4680      	mov	r8, r0
 8011c0a:	a379      	add	r3, pc, #484	; (adr r3, 8011df0 <GUI_Touch_Processing+0xb50>)
 8011c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c10:	4630      	mov	r0, r6
 8011c12:	4639      	mov	r1, r7
 8011c14:	f04f 0901 	mov.w	r9, #1
 8011c18:	f7ee ff7e 	bl	8000b18 <__aeabi_dcmple>
 8011c1c:	b900      	cbnz	r0, 8011c20 <GUI_Touch_Processing+0x980>
 8011c1e:	4681      	mov	r9, r0
 8011c20:	ea08 0309 	and.w	r3, r8, r9
 8011c24:	421d      	tst	r5, r3
 8011c26:	d005      	beq.n	8011c34 <GUI_Touch_Processing+0x994>
 8011c28:	b124      	cbz	r4, 8011c34 <GUI_Touch_Processing+0x994>
					GUI_screen_state = ColorRendSet_Screen;
 8011c2a:	2310      	movs	r3, #16
 8011c2c:	f88b 3000 	strb.w	r3, [fp]
 8011c30:	f7ff bbc4 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8011c34:	a376      	add	r3, pc, #472	; (adr r3, 8011e10 <GUI_Touch_Processing+0xb70>)
 8011c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	4639      	mov	r1, r7
 8011c3e:	402c      	ands	r4, r5
 8011c40:	f04f 0501 	mov.w	r5, #1
 8011c44:	f7ee ff72 	bl	8000b2c <__aeabi_dcmpge>
 8011c48:	b900      	cbnz	r0, 8011c4c <GUI_Touch_Processing+0x9ac>
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	a372      	add	r3, pc, #456	; (adr r3, 8011e18 <GUI_Touch_Processing+0xb78>)
 8011c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c52:	4630      	mov	r0, r6
 8011c54:	4639      	mov	r1, r7
 8011c56:	f04f 0801 	mov.w	r8, #1
 8011c5a:	f7ee ff5d 	bl	8000b18 <__aeabi_dcmple>
 8011c5e:	b900      	cbnz	r0, 8011c62 <GUI_Touch_Processing+0x9c2>
 8011c60:	4680      	mov	r8, r0
 8011c62:	ea05 0508 	and.w	r5, r5, r8
 8011c66:	07ed      	lsls	r5, r5, #31
 8011c68:	d508      	bpl.n	8011c7c <GUI_Touch_Processing+0x9dc>
 8011c6a:	b13c      	cbz	r4, 8011c7c <GUI_Touch_Processing+0x9dc>
					WriteFLASH_Screen(Measure_Screen);
 8011c6c:	2001      	movs	r0, #1
 8011c6e:	f00a fd03 	bl	801c678 <WriteFLASH_Screen>
					GUI_screen_state = Measure_Screen;
 8011c72:	2301      	movs	r3, #1
 8011c74:	f88b 3000 	strb.w	r3, [fp]
 8011c78:	f7ff bba0 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Rotation_Screen
 8011c7c:	a368      	add	r3, pc, #416	; (adr r3, 8011e20 <GUI_Touch_Processing+0xb80>)
 8011c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c82:	4630      	mov	r0, r6
 8011c84:	4639      	mov	r1, r7
 8011c86:	f04f 0501 	mov.w	r5, #1
 8011c8a:	f7ee ff4f 	bl	8000b2c <__aeabi_dcmpge>
 8011c8e:	b900      	cbnz	r0, 8011c92 <GUI_Touch_Processing+0x9f2>
 8011c90:	4605      	mov	r5, r0
 8011c92:	a35f      	add	r3, pc, #380	; (adr r3, 8011e10 <GUI_Touch_Processing+0xb70>)
 8011c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c98:	4630      	mov	r0, r6
 8011c9a:	4639      	mov	r1, r7
 8011c9c:	f04f 0801 	mov.w	r8, #1
 8011ca0:	f7ee ff3a 	bl	8000b18 <__aeabi_dcmple>
 8011ca4:	b900      	cbnz	r0, 8011ca8 <GUI_Touch_Processing+0xa08>
 8011ca6:	4680      	mov	r8, r0
 8011ca8:	ea05 0508 	and.w	r5, r5, r8
 8011cac:	07e8      	lsls	r0, r5, #31
 8011cae:	d509      	bpl.n	8011cc4 <GUI_Touch_Processing+0xa24>
 8011cb0:	b144      	cbz	r4, 8011cc4 <GUI_Touch_Processing+0xa24>
					if(Rotation_Screen_Rend < 0x02) {Rotation_Screen_Rend++;} else{Rotation_Screen_Rend = 0x00;}
 8011cb2:	4a60      	ldr	r2, [pc, #384]	; (8011e34 <GUI_Touch_Processing+0xb94>)
 8011cb4:	7813      	ldrb	r3, [r2, #0]
 8011cb6:	2b01      	cmp	r3, #1
 8011cb8:	bf94      	ite	ls
 8011cba:	3301      	addls	r3, #1
 8011cbc:	2300      	movhi	r3, #0
 8011cbe:	7013      	strb	r3, [r2, #0]
 8011cc0:	f7ff bb7c 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 8011cc4:	a34c      	add	r3, pc, #304	; (adr r3, 8011df8 <GUI_Touch_Processing+0xb58>)
 8011cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cca:	4630      	mov	r0, r6
 8011ccc:	4639      	mov	r1, r7
 8011cce:	f04f 0501 	mov.w	r5, #1
 8011cd2:	f7ee ff2b 	bl	8000b2c <__aeabi_dcmpge>
 8011cd6:	b900      	cbnz	r0, 8011cda <GUI_Touch_Processing+0xa3a>
 8011cd8:	4605      	mov	r5, r0
 8011cda:	a351      	add	r3, pc, #324	; (adr r3, 8011e20 <GUI_Touch_Processing+0xb80>)
 8011cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f04f 0801 	mov.w	r8, #1
 8011ce8:	f7ee ff16 	bl	8000b18 <__aeabi_dcmple>
 8011cec:	b900      	cbnz	r0, 8011cf0 <GUI_Touch_Processing+0xa50>
 8011cee:	4680      	mov	r8, r0
 8011cf0:	ea05 0508 	and.w	r5, r5, r8
 8011cf4:	07e9      	lsls	r1, r5, #31
 8011cf6:	f140 80c7 	bpl.w	8011e88 <GUI_Touch_Processing+0xbe8>
 8011cfa:	2c00      	cmp	r4, #0
 8011cfc:	f000 80c4 	beq.w	8011e88 <GUI_Touch_Processing+0xbe8>
					if (Color_rend_Field & CRI_CQS){
 8011d00:	4b4d      	ldr	r3, [pc, #308]	; (8011e38 <GUI_Touch_Processing+0xb98>)
 8011d02:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8011e84 <GUI_Touch_Processing+0xbe4>
 8011d06:	781c      	ldrb	r4, [r3, #0]
 8011d08:	4e4c      	ldr	r6, [pc, #304]	; (8011e3c <GUI_Touch_Processing+0xb9c>)
 8011d0a:	4f4d      	ldr	r7, [pc, #308]	; (8011e40 <GUI_Touch_Processing+0xba0>)
 8011d0c:	4d4d      	ldr	r5, [pc, #308]	; (8011e44 <GUI_Touch_Processing+0xba4>)
 8011d0e:	f014 0401 	ands.w	r4, r4, #1
 8011d12:	d03e      	beq.n	8011d92 <GUI_Touch_Processing+0xaf2>
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011d14:	484c      	ldr	r0, [pc, #304]	; (8011e48 <GUI_Touch_Processing+0xba8>)
						CRICQS_done = 0x00;
 8011d16:	2400      	movs	r4, #0
 8011d18:	f888 4000 	strb.w	r4, [r8]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011d1c:	f00a fbcc 	bl	801c4b8 <Rabs_find_MAX_all>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011d20:	4b4a      	ldr	r3, [pc, #296]	; (8011e4c <GUI_Touch_Processing+0xbac>)
 8011d22:	4a4b      	ldr	r2, [pc, #300]	; (8011e50 <GUI_Touch_Processing+0xbb0>)
 8011d24:	494b      	ldr	r1, [pc, #300]	; (8011e54 <GUI_Touch_Processing+0xbb4>)
 8011d26:	4848      	ldr	r0, [pc, #288]	; (8011e48 <GUI_Touch_Processing+0xba8>)
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011d28:	ed86 0a00 	vstr	s0, [r6]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011d2c:	f7fc fd8e 	bl	800e84c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8011d30:	4849      	ldr	r0, [pc, #292]	; (8011e58 <GUI_Touch_Processing+0xbb8>)
 8011d32:	f7fc fdf7 	bl	800e924 <Calculate_xy1931>
						Calculate_uv(colorimetry_xy1931);
 8011d36:	4849      	ldr	r0, [pc, #292]	; (8011e5c <GUI_Touch_Processing+0xbbc>)
 8011d38:	f7fc fe12 	bl	800e960 <Calculate_uv>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011d3c:	4842      	ldr	r0, [pc, #264]	; (8011e48 <GUI_Touch_Processing+0xba8>)
 8011d3e:	7839      	ldrb	r1, [r7, #0]
 8011d40:	f7fc fe56 	bl	800e9f0 <Calculate_Tc>
 8011d44:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8011d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011d4c:	edcd 7a00 	vstr	s15, [sp]
 8011d50:	f8bd 0000 	ldrh.w	r0, [sp]
 8011d54:	8028      	strh	r0, [r5, #0]
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8011d56:	4298      	cmp	r0, r3
 8011d58:	d10b      	bne.n	8011d72 <GUI_Touch_Processing+0xad2>
 8011d5a:	4b41      	ldr	r3, [pc, #260]	; (8011e60 <GUI_Touch_Processing+0xbc0>)
 8011d5c:	4841      	ldr	r0, [pc, #260]	; (8011e64 <GUI_Touch_Processing+0xbc4>)
 8011d5e:	701c      	strb	r4, [r3, #0]
 8011d60:	4b41      	ldr	r3, [pc, #260]	; (8011e68 <GUI_Touch_Processing+0xbc8>)
 8011d62:	701c      	strb	r4, [r3, #0]
 8011d64:	4b41      	ldr	r3, [pc, #260]	; (8011e6c <GUI_Touch_Processing+0xbcc>)
 8011d66:	220e      	movs	r2, #14
 8011d68:	701c      	strb	r4, [r3, #0]
 8011d6a:	4621      	mov	r1, r4
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8011d6c:	f010 fcc7 	bl	80226fe <memset>
 8011d70:	e002      	b.n	8011d78 <GUI_Touch_Processing+0xad8>
						else	{CRI_func(Tc_Measure, Line_Rabs_buff);}
 8011d72:	4935      	ldr	r1, [pc, #212]	; (8011e48 <GUI_Touch_Processing+0xba8>)
 8011d74:	f7fa fc60 	bl	800c638 <CRI_func>
					Calc_ColorRend = !Calc_ColorRend;
 8011d78:	4a3d      	ldr	r2, [pc, #244]	; (8011e70 <GUI_Touch_Processing+0xbd0>)
						CRICQS_done = 0x01;
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	f888 3000 	strb.w	r3, [r8]
					Calc_ColorRend = !Calc_ColorRend;
 8011d80:	7813      	ldrb	r3, [r2, #0]
 8011d82:	fab3 f383 	clz	r3, r3
 8011d86:	095b      	lsrs	r3, r3, #5
 8011d88:	7013      	strb	r3, [r2, #0]
					GUI_Display_Refresh();
 8011d8a:	f7ff fa29 	bl	80111e0 <GUI_Display_Refresh>
 8011d8e:	f7ff bb15 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011d92:	4b2e      	ldr	r3, [pc, #184]	; (8011e4c <GUI_Touch_Processing+0xbac>)
 8011d94:	4a2e      	ldr	r2, [pc, #184]	; (8011e50 <GUI_Touch_Processing+0xbb0>)
 8011d96:	492f      	ldr	r1, [pc, #188]	; (8011e54 <GUI_Touch_Processing+0xbb4>)
 8011d98:	482b      	ldr	r0, [pc, #172]	; (8011e48 <GUI_Touch_Processing+0xba8>)
						CRICQS_done = 0x00;
 8011d9a:	f888 4000 	strb.w	r4, [r8]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011d9e:	f7fc fd55 	bl	800e84c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8011da2:	482d      	ldr	r0, [pc, #180]	; (8011e58 <GUI_Touch_Processing+0xbb8>)
 8011da4:	f7fc fdbe 	bl	800e924 <Calculate_xy1931>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011da8:	7839      	ldrb	r1, [r7, #0]
 8011daa:	4827      	ldr	r0, [pc, #156]	; (8011e48 <GUI_Touch_Processing+0xba8>)
 8011dac:	f7fc fe20 	bl	800e9f0 <Calculate_Tc>
 8011db0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011db4:	4824      	ldr	r0, [pc, #144]	; (8011e48 <GUI_Touch_Processing+0xba8>)
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011db6:	ee17 3a90 	vmov	r3, s15
 8011dba:	802b      	strh	r3, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011dbc:	f00a fb7c 	bl	801c4b8 <Rabs_find_MAX_all>
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8011dc0:	8828      	ldrh	r0, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011dc2:	ed86 0a00 	vstr	s0, [r6]
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8011dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011dca:	4298      	cmp	r0, r3
 8011dcc:	d109      	bne.n	8011de2 <GUI_Touch_Processing+0xb42>
 8011dce:	4b29      	ldr	r3, [pc, #164]	; (8011e74 <GUI_Touch_Processing+0xbd4>)
 8011dd0:	4829      	ldr	r0, [pc, #164]	; (8011e78 <GUI_Touch_Processing+0xbd8>)
 8011dd2:	701c      	strb	r4, [r3, #0]
 8011dd4:	4b29      	ldr	r3, [pc, #164]	; (8011e7c <GUI_Touch_Processing+0xbdc>)
 8011dd6:	701c      	strb	r4, [r3, #0]
 8011dd8:	4b29      	ldr	r3, [pc, #164]	; (8011e80 <GUI_Touch_Processing+0xbe0>)
 8011dda:	220f      	movs	r2, #15
 8011ddc:	701c      	strb	r4, [r3, #0]
 8011dde:	4621      	mov	r1, r4
 8011de0:	e7c4      	b.n	8011d6c <GUI_Touch_Processing+0xacc>
						else	{cqs_func(Tc_Measure, Line_Rabs_buff);}
 8011de2:	4919      	ldr	r1, [pc, #100]	; (8011e48 <GUI_Touch_Processing+0xba8>)
 8011de4:	f7f8 fa8c 	bl	800a300 <cqs_func>
 8011de8:	e7c6      	b.n	8011d78 <GUI_Touch_Processing+0xad8>
 8011dea:	bf00      	nop
 8011dec:	f3af 8000 	nop.w
 8011df0:	00000000 	.word	0x00000000
 8011df4:	40623800 	.word	0x40623800
 8011df8:	99999999 	.word	0x99999999
 8011dfc:	40720d99 	.word	0x40720d99
 8011e00:	99999999 	.word	0x99999999
 8011e04:	4091a399 	.word	0x4091a399
 8011e08:	33333333 	.word	0x33333333
 8011e0c:	40053333 	.word	0x40053333
 8011e10:	66666666 	.word	0x66666666
 8011e14:	4081f866 	.word	0x4081f866
 8011e18:	33333333 	.word	0x33333333
 8011e1c:	40867133 	.word	0x40867133
 8011e20:	33333333 	.word	0x33333333
 8011e24:	407aff33 	.word	0x407aff33
 8011e28:	200052a0 	.word	0x200052a0
 8011e2c:	2000022a 	.word	0x2000022a
 8011e30:	4093e000 	.word	0x4093e000
 8011e34:	20005281 	.word	0x20005281
 8011e38:	20005278 	.word	0x20005278
 8011e3c:	20091164 	.word	0x20091164
 8011e40:	2000527c 	.word	0x2000527c
 8011e44:	200501e8 	.word	0x200501e8
 8011e48:	20007de4 	.word	0x20007de4
 8011e4c:	20088db8 	.word	0x20088db8
 8011e50:	2004e1e8 	.word	0x2004e1e8
 8011e54:	20085db8 	.word	0x20085db8
 8011e58:	2008adc6 	.word	0x2008adc6
 8011e5c:	2008ade4 	.word	0x2008ade4
 8011e60:	200041d1 	.word	0x200041d1
 8011e64:	200041d3 	.word	0x200041d3
 8011e68:	200041d2 	.word	0x200041d2
 8011e6c:	200041d0 	.word	0x200041d0
 8011e70:	20005275 	.word	0x20005275
 8011e74:	200031ab 	.word	0x200031ab
 8011e78:	2000319c 	.word	0x2000319c
 8011e7c:	200031ad 	.word	0x200031ad
 8011e80:	200031ac 	.word	0x200031ac
 8011e84:	20005274 	.word	0x20005274
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011e88:	a3be      	add	r3, pc, #760	; (adr r3, 8012184 <GUI_Touch_Processing+0xee4>)
 8011e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8e:	4630      	mov	r0, r6
 8011e90:	4639      	mov	r1, r7
 8011e92:	f04f 0501 	mov.w	r5, #1
 8011e96:	f7ee fe49 	bl	8000b2c <__aeabi_dcmpge>
 8011e9a:	b900      	cbnz	r0, 8011e9e <GUI_Touch_Processing+0xbfe>
 8011e9c:	4605      	mov	r5, r0
 8011e9e:	a3bb      	add	r3, pc, #748	; (adr r3, 801218c <GUI_Touch_Processing+0xeec>)
 8011ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea4:	4630      	mov	r0, r6
 8011ea6:	4639      	mov	r1, r7
 8011ea8:	f04f 0801 	mov.w	r8, #1
 8011eac:	f7ee fe34 	bl	8000b18 <__aeabi_dcmple>
 8011eb0:	b900      	cbnz	r0, 8011eb4 <GUI_Touch_Processing+0xc14>
 8011eb2:	4680      	mov	r8, r0
 8011eb4:	ea05 0508 	and.w	r5, r5, r8
 8011eb8:	07ea      	lsls	r2, r5, #31
 8011eba:	f57f aa7f 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
 8011ebe:	2c00      	cmp	r4, #0
 8011ec0:	f43f aa7c 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
						if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}
 8011ec4:	4ba2      	ldr	r3, [pc, #648]	; (8012150 <GUI_Touch_Processing+0xeb0>)
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	b913      	cbnz	r3, 8011ed0 <GUI_Touch_Processing+0xc30>
 8011eca:	2312      	movs	r3, #18
 8011ecc:	f88b 3000 	strb.w	r3, [fp]
						pause = 0;
 8011ed0:	4ba0      	ldr	r3, [pc, #640]	; (8012154 <GUI_Touch_Processing+0xeb4>)
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	701a      	strb	r2, [r3, #0]
 8011ed6:	f7ff ba71 	b.w	80113bc <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 8011eda:	4b9f      	ldr	r3, [pc, #636]	; (8012158 <GUI_Touch_Processing+0xeb8>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 8011edc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8011ee0:	2207      	movs	r2, #7
 8011ee2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 8011ee4:	f7ee fb36 	bl	8000554 <__aeabi_i2d>
 8011ee8:	4604      	mov	r4, r0
 8011eea:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011eee:	460d      	mov	r5, r1
 8011ef0:	f7ee fb30 	bl	8000554 <__aeabi_i2d>
 8011ef4:	a37c      	add	r3, pc, #496	; (adr r3, 80120e8 <GUI_Touch_Processing+0xe48>)
 8011ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011efa:	e9cd 0100 	strd	r0, r1, [sp]
 8011efe:	f04f 0701 	mov.w	r7, #1
 8011f02:	f7ee fe13 	bl	8000b2c <__aeabi_dcmpge>
 8011f06:	b900      	cbnz	r0, 8011f0a <GUI_Touch_Processing+0xc6a>
 8011f08:	4607      	mov	r7, r0
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	4b93      	ldr	r3, [pc, #588]	; (801215c <GUI_Touch_Processing+0xebc>)
 8011f0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f12:	b2ff      	uxtb	r7, r7
 8011f14:	f04f 0601 	mov.w	r6, #1
 8011f18:	f7ee fdfe 	bl	8000b18 <__aeabi_dcmple>
 8011f1c:	b900      	cbnz	r0, 8011f20 <GUI_Touch_Processing+0xc80>
 8011f1e:	4606      	mov	r6, r0
 8011f20:	b2f3      	uxtb	r3, r6
 8011f22:	9303      	str	r3, [sp, #12]
 8011f24:	4620      	mov	r0, r4
 8011f26:	a372      	add	r3, pc, #456	; (adr r3, 80120f0 <GUI_Touch_Processing+0xe50>)
 8011f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2c:	4629      	mov	r1, r5
 8011f2e:	f04f 0601 	mov.w	r6, #1
 8011f32:	f7ee fdfb 	bl	8000b2c <__aeabi_dcmpge>
 8011f36:	b900      	cbnz	r0, 8011f3a <GUI_Touch_Processing+0xc9a>
 8011f38:	4606      	mov	r6, r0
 8011f3a:	a36f      	add	r3, pc, #444	; (adr r3, 80120f8 <GUI_Touch_Processing+0xe58>)
 8011f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f40:	4620      	mov	r0, r4
 8011f42:	4629      	mov	r1, r5
 8011f44:	f04f 0801 	mov.w	r8, #1
 8011f48:	f7ee fde6 	bl	8000b18 <__aeabi_dcmple>
 8011f4c:	b900      	cbnz	r0, 8011f50 <GUI_Touch_Processing+0xcb0>
 8011f4e:	4680      	mov	r8, r0
 8011f50:	ea06 0608 	and.w	r6, r6, r8
 8011f54:	4237      	tst	r7, r6
 8011f56:	d006      	beq.n	8011f66 <GUI_Touch_Processing+0xcc6>
 8011f58:	9b03      	ldr	r3, [sp, #12]
 8011f5a:	b123      	cbz	r3, 8011f66 <GUI_Touch_Processing+0xcc6>
					GUI_screen_state = DataSet2_Screen;
 8011f5c:	2308      	movs	r3, #8
 8011f5e:	f88b 3000 	strb.w	r3, [fp]
 8011f62:	f7ff ba2b 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8011f66:	a366      	add	r3, pc, #408	; (adr r3, 8012100 <GUI_Touch_Processing+0xe60>)
 8011f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	4629      	mov	r1, r5
 8011f70:	f04f 0601 	mov.w	r6, #1
 8011f74:	f7ee fdda 	bl	8000b2c <__aeabi_dcmpge>
 8011f78:	b900      	cbnz	r0, 8011f7c <GUI_Touch_Processing+0xcdc>
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	a362      	add	r3, pc, #392	; (adr r3, 8012108 <GUI_Touch_Processing+0xe68>)
 8011f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f82:	4620      	mov	r0, r4
 8011f84:	4629      	mov	r1, r5
 8011f86:	f04f 0801 	mov.w	r8, #1
 8011f8a:	f7ee fdc5 	bl	8000b18 <__aeabi_dcmple>
 8011f8e:	b900      	cbnz	r0, 8011f92 <GUI_Touch_Processing+0xcf2>
 8011f90:	4680      	mov	r8, r0
 8011f92:	ea06 0608 	and.w	r6, r6, r8
 8011f96:	a35e      	add	r3, pc, #376	; (adr r3, 8012110 <GUI_Touch_Processing+0xe70>)
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fa0:	b2f6      	uxtb	r6, r6
 8011fa2:	f04f 0801 	mov.w	r8, #1
 8011fa6:	f7ee fdc1 	bl	8000b2c <__aeabi_dcmpge>
 8011faa:	b900      	cbnz	r0, 8011fae <GUI_Touch_Processing+0xd0e>
 8011fac:	4680      	mov	r8, r0
 8011fae:	a35a      	add	r3, pc, #360	; (adr r3, 8012118 <GUI_Touch_Processing+0xe78>)
 8011fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fb8:	f04f 0901 	mov.w	r9, #1
 8011fbc:	f7ee fdac 	bl	8000b18 <__aeabi_dcmple>
 8011fc0:	b900      	cbnz	r0, 8011fc4 <GUI_Touch_Processing+0xd24>
 8011fc2:	4681      	mov	r9, r0
 8011fc4:	ea08 0809 	and.w	r8, r8, r9
 8011fc8:	f018 0f01 	tst.w	r8, #1
 8011fcc:	d026      	beq.n	801201c <GUI_Touch_Processing+0xd7c>
 8011fce:	b32e      	cbz	r6, 801201c <GUI_Touch_Processing+0xd7c>
					Mode_EL = !Mode_EL;
 8011fd0:	4c63      	ldr	r4, [pc, #396]	; (8012160 <GUI_Touch_Processing+0xec0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011fd2:	4b64      	ldr	r3, [pc, #400]	; (8012164 <GUI_Touch_Processing+0xec4>)
					Mode_EL = !Mode_EL;
 8011fd4:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011fd6:	4864      	ldr	r0, [pc, #400]	; (8012168 <GUI_Touch_Processing+0xec8>)
					Mode_EL = !Mode_EL;
 8011fd8:	2a00      	cmp	r2, #0
 8011fda:	bf0c      	ite	eq
 8011fdc:	2201      	moveq	r2, #1
 8011fde:	2200      	movne	r2, #0
 8011fe0:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011fe2:	bf18      	it	ne
 8011fe4:	4618      	movne	r0, r3
 8011fe6:	4a61      	ldr	r2, [pc, #388]	; (801216c <GUI_Touch_Processing+0xecc>)
 8011fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011fec:	f7fd f9b4 	bl	800f358 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011ff0:	7822      	ldrb	r2, [r4, #0]
 8011ff2:	4b5f      	ldr	r3, [pc, #380]	; (8012170 <GUI_Touch_Processing+0xed0>)
 8011ff4:	b982      	cbnz	r2, 8012018 <GUI_Touch_Processing+0xd78>
 8011ff6:	4a5f      	ldr	r2, [pc, #380]	; (8012174 <GUI_Touch_Processing+0xed4>)
 8011ff8:	edd2 0a00 	vldr	s1, [r2]
 8011ffc:	ed93 0a00 	vldr	s0, [r3]
 8012000:	f00a f9da 	bl	801c3b8 <Rabs_calc_Factor2_Settings_change>
 8012004:	4b5c      	ldr	r3, [pc, #368]	; (8012178 <GUI_Touch_Processing+0xed8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8012006:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8012008:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801200c:	21ca      	movs	r1, #202	; 0xca
 801200e:	20b6      	movs	r0, #182	; 0xb6
 8012010:	f003 fd74 	bl	8015afc <GUI_Switch_ButtonActive>
 8012014:	f7ff b9d2 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8012018:	4a58      	ldr	r2, [pc, #352]	; (801217c <GUI_Touch_Processing+0xedc>)
 801201a:	e7ed      	b.n	8011ff8 <GUI_Touch_Processing+0xd58>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 801201c:	a340      	add	r3, pc, #256	; (adr r3, 8012120 <GUI_Touch_Processing+0xe80>)
 801201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012022:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012026:	f04f 0801 	mov.w	r8, #1
 801202a:	f7ee fd7f 	bl	8000b2c <__aeabi_dcmpge>
 801202e:	b900      	cbnz	r0, 8012032 <GUI_Touch_Processing+0xd92>
 8012030:	4680      	mov	r8, r0
 8012032:	a33d      	add	r3, pc, #244	; (adr r3, 8012128 <GUI_Touch_Processing+0xe88>)
 8012034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012038:	e9dd 0100 	ldrd	r0, r1, [sp]
 801203c:	f04f 0901 	mov.w	r9, #1
 8012040:	f7ee fd6a 	bl	8000b18 <__aeabi_dcmple>
 8012044:	b900      	cbnz	r0, 8012048 <GUI_Touch_Processing+0xda8>
 8012046:	4681      	mov	r9, r0
 8012048:	ea08 0809 	and.w	r8, r8, r9
 801204c:	f018 0f01 	tst.w	r8, #1
 8012050:	d00f      	beq.n	8012072 <GUI_Touch_Processing+0xdd2>
 8012052:	b176      	cbz	r6, 8012072 <GUI_Touch_Processing+0xdd2>
					Bluetooth = !Bluetooth;
 8012054:	4b4a      	ldr	r3, [pc, #296]	; (8012180 <GUI_Touch_Processing+0xee0>)
 8012056:	781a      	ldrb	r2, [r3, #0]
 8012058:	fab2 f282 	clz	r2, r2
 801205c:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801205e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8012062:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8012064:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8012066:	f003 fcef 	bl	8015a48 <GUI_Switch_Button>
					GUI_Up_Panel();
 801206a:	f7fd fde1 	bl	800fc30 <GUI_Up_Panel>
 801206e:	f7ff b9a5 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 8012072:	a32f      	add	r3, pc, #188	; (adr r3, 8012130 <GUI_Touch_Processing+0xe90>)
 8012074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012078:	4620      	mov	r0, r4
 801207a:	4629      	mov	r1, r5
 801207c:	f04f 0601 	mov.w	r6, #1
 8012080:	f7ee fd54 	bl	8000b2c <__aeabi_dcmpge>
 8012084:	b900      	cbnz	r0, 8012088 <GUI_Touch_Processing+0xde8>
 8012086:	4606      	mov	r6, r0
 8012088:	a32b      	add	r3, pc, #172	; (adr r3, 8012138 <GUI_Touch_Processing+0xe98>)
 801208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208e:	4620      	mov	r0, r4
 8012090:	4629      	mov	r1, r5
 8012092:	f04f 0801 	mov.w	r8, #1
 8012096:	f7ee fd3f 	bl	8000b18 <__aeabi_dcmple>
 801209a:	b900      	cbnz	r0, 801209e <GUI_Touch_Processing+0xdfe>
 801209c:	4680      	mov	r8, r0
 801209e:	ea06 0608 	and.w	r6, r6, r8
 80120a2:	a327      	add	r3, pc, #156	; (adr r3, 8012140 <GUI_Touch_Processing+0xea0>)
 80120a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120ac:	b2f6      	uxtb	r6, r6
 80120ae:	f04f 0801 	mov.w	r8, #1
 80120b2:	f7ee fd3b 	bl	8000b2c <__aeabi_dcmpge>
 80120b6:	b900      	cbnz	r0, 80120ba <GUI_Touch_Processing+0xe1a>
 80120b8:	4680      	mov	r8, r0
 80120ba:	a323      	add	r3, pc, #140	; (adr r3, 8012148 <GUI_Touch_Processing+0xea8>)
 80120bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120c4:	f04f 0901 	mov.w	r9, #1
 80120c8:	f7ee fd26 	bl	8000b18 <__aeabi_dcmple>
 80120cc:	b900      	cbnz	r0, 80120d0 <GUI_Touch_Processing+0xe30>
 80120ce:	4681      	mov	r9, r0
 80120d0:	ea08 0809 	and.w	r8, r8, r9
 80120d4:	f018 0f01 	tst.w	r8, #1
 80120d8:	d05c      	beq.n	8012194 <GUI_Touch_Processing+0xef4>
 80120da:	2e00      	cmp	r6, #0
 80120dc:	d05a      	beq.n	8012194 <GUI_Touch_Processing+0xef4>
					GUI_screen_state = Information_Screen;
 80120de:	2311      	movs	r3, #17
 80120e0:	f88b 3000 	strb.w	r3, [fp]
 80120e4:	f7ff b96a 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 80120e8:	99999999 	.word	0x99999999
 80120ec:	4091a399 	.word	0x4091a399
 80120f0:	33333333 	.word	0x33333333
 80120f4:	407aff33 	.word	0x407aff33
 80120f8:	66666666 	.word	0x66666666
 80120fc:	4081f866 	.word	0x4081f866
 8012100:	cccccccd 	.word	0xcccccccd
 8012104:	407e24cc 	.word	0x407e24cc
 8012108:	33333333 	.word	0x33333333
 801210c:	40838b33 	.word	0x40838b33
 8012110:	66666666 	.word	0x66666666
 8012114:	4080ba66 	.word	0x4080ba66
 8012118:	33333333 	.word	0x33333333
 801211c:	40853333 	.word	0x40853333
 8012120:	99999999 	.word	0x99999999
 8012124:	40863199 	.word	0x40863199
 8012128:	66666666 	.word	0x66666666
 801212c:	408aaa66 	.word	0x408aaa66
 8012130:	33333333 	.word	0x33333333
 8012134:	40353333 	.word	0x40353333
 8012138:	00000000 	.word	0x00000000
 801213c:	4084b400 	.word	0x4084b400
 8012140:	99999999 	.word	0x99999999
 8012144:	40748999 	.word	0x40748999
 8012148:	99999999 	.word	0x99999999
 801214c:	407cd199 	.word	0x407cd199
 8012150:	200914c8 	.word	0x200914c8
 8012154:	200052a0 	.word	0x200052a0
 8012158:	2000022a 	.word	0x2000022a
 801215c:	4093e000 	.word	0x4093e000
 8012160:	20000a48 	.word	0x20000a48
 8012164:	08101838 	.word	0x08101838
 8012168:	08100838 	.word	0x08100838
 801216c:	2004d1e8 	.word	0x2004d1e8
 8012170:	200055d4 	.word	0x200055d4
 8012174:	200055d0 	.word	0x200055d0
 8012178:	200055dc 	.word	0x200055dc
 801217c:	200055cc 	.word	0x200055cc
 8012180:	2008c322 	.word	0x2008c322
 8012184:	00000000 	.word	0x00000000
 8012188:	40623800 	.word	0x40623800
 801218c:	99999999 	.word	0x99999999
 8012190:	40720d99 	.word	0x40720d99
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //Illuminance
 8012194:	2200      	movs	r2, #0
 8012196:	4bbc      	ldr	r3, [pc, #752]	; (8012488 <GUI_Touch_Processing+0x11e8>)
 8012198:	4620      	mov	r0, r4
 801219a:	4629      	mov	r1, r5
 801219c:	f04f 0901 	mov.w	r9, #1
 80121a0:	f7ee fcc4 	bl	8000b2c <__aeabi_dcmpge>
 80121a4:	b900      	cbnz	r0, 80121a8 <GUI_Touch_Processing+0xf08>
 80121a6:	4681      	mov	r9, r0
 80121a8:	a3a1      	add	r3, pc, #644	; (adr r3, 8012430 <GUI_Touch_Processing+0x1190>)
 80121aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ae:	4620      	mov	r0, r4
 80121b0:	4629      	mov	r1, r5
 80121b2:	f04f 0801 	mov.w	r8, #1
 80121b6:	f7ee fcaf 	bl	8000b18 <__aeabi_dcmple>
 80121ba:	b900      	cbnz	r0, 80121be <GUI_Touch_Processing+0xf1e>
 80121bc:	4680      	mov	r8, r0
 80121be:	a39e      	add	r3, pc, #632	; (adr r3, 8012438 <GUI_Touch_Processing+0x1198>)
 80121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121c8:	ea09 0808 	and.w	r8, r9, r8
 80121cc:	f04f 0901 	mov.w	r9, #1
 80121d0:	f7ee fcac 	bl	8000b2c <__aeabi_dcmpge>
 80121d4:	b900      	cbnz	r0, 80121d8 <GUI_Touch_Processing+0xf38>
 80121d6:	4681      	mov	r9, r0
 80121d8:	ea08 0809 	and.w	r8, r8, r9
 80121dc:	f018 0f01 	tst.w	r8, #1
 80121e0:	d01b      	beq.n	801221a <GUI_Touch_Processing+0xf7a>
 80121e2:	a397      	add	r3, pc, #604	; (adr r3, 8012440 <GUI_Touch_Processing+0x11a0>)
 80121e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121ec:	f04f 0801 	mov.w	r8, #1
 80121f0:	f7ee fc92 	bl	8000b18 <__aeabi_dcmple>
 80121f4:	b900      	cbnz	r0, 80121f8 <GUI_Touch_Processing+0xf58>
 80121f6:	4680      	mov	r8, r0
 80121f8:	f018 0fff 	tst.w	r8, #255	; 0xff
 80121fc:	d00d      	beq.n	801221a <GUI_Touch_Processing+0xf7a>
					Measure_Field ^= Illuminance;
 80121fe:	4ba3      	ldr	r3, [pc, #652]	; (801248c <GUI_Touch_Processing+0x11ec>)
 8012200:	881a      	ldrh	r2, [r3, #0]
 8012202:	f082 0201 	eor.w	r2, r2, #1
 8012206:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 8012208:	f240 1147 	movw	r1, #327	; 0x147
 801220c:	f002 0201 	and.w	r2, r2, #1
 8012210:	20c8      	movs	r0, #200	; 0xc8
 8012212:	f003 fba9 	bl	8015968 <GUI_CheckBox>
 8012216:	f7ff b8d1 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 801221a:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 801221c:	4620      	mov	r0, r4
 801221e:	ea07 0903 	and.w	r9, r7, r3
 8012222:	4629      	mov	r1, r5
 8012224:	a388      	add	r3, pc, #544	; (adr r3, 8012448 <GUI_Touch_Processing+0x11a8>)
 8012226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222a:	f04f 0801 	mov.w	r8, #1
 801222e:	f7ee fc7d 	bl	8000b2c <__aeabi_dcmpge>
 8012232:	b900      	cbnz	r0, 8012236 <GUI_Touch_Processing+0xf96>
 8012234:	4680      	mov	r8, r0
 8012236:	a386      	add	r3, pc, #536	; (adr r3, 8012450 <GUI_Touch_Processing+0x11b0>)
 8012238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223c:	4620      	mov	r0, r4
 801223e:	4629      	mov	r1, r5
 8012240:	f04f 0a01 	mov.w	sl, #1
 8012244:	f7ee fc68 	bl	8000b18 <__aeabi_dcmple>
 8012248:	b900      	cbnz	r0, 801224c <GUI_Touch_Processing+0xfac>
 801224a:	4682      	mov	sl, r0
 801224c:	ea08 080a 	and.w	r8, r8, sl
 8012250:	f018 0f01 	tst.w	r8, #1
 8012254:	d029      	beq.n	80122aa <GUI_Touch_Processing+0x100a>
 8012256:	f1b9 0f00 	cmp.w	r9, #0
 801225a:	d026      	beq.n	80122aa <GUI_Touch_Processing+0x100a>
					WriteSDFLASH_t(sdfile_cnt);
 801225c:	4b8c      	ldr	r3, [pc, #560]	; (8012490 <GUI_Touch_Processing+0x11f0>)
 801225e:	2100      	movs	r1, #0
 8012260:	8818      	ldrh	r0, [r3, #0]
 8012262:	f00a f93b 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012266:	4b8b      	ldr	r3, [pc, #556]	; (8012494 <GUI_Touch_Processing+0x11f4>)
 8012268:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801226a:	1e5a      	subs	r2, r3, #1
 801226c:	2a05      	cmp	r2, #5
 801226e:	d804      	bhi.n	801227a <GUI_Touch_Processing+0xfda>
 8012270:	e8df f002 	tbb	[pc, r2]
 8012274:	0c030307 	.word	0x0c030307
 8012278:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 801227a:	f88b 3000 	strb.w	r3, [fp]
 801227e:	f7ff b89d 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012282:	2301      	movs	r3, #1
 8012284:	f88b 3000 	strb.w	r3, [fp]
 8012288:	f7ff b898 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801228c:	2304      	movs	r3, #4
 801228e:	f88b 3000 	strb.w	r3, [fp]
 8012292:	f7ff b893 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012296:	2306      	movs	r3, #6
 8012298:	f88b 3000 	strb.w	r3, [fp]
 801229c:	f7ff b88e 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80122a0:	2305      	movs	r3, #5
 80122a2:	f88b 3000 	strb.w	r3, [fp]
 80122a6:	f7ff b889 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 80122aa:	2200      	movs	r2, #0
 80122ac:	4b7a      	ldr	r3, [pc, #488]	; (8012498 <GUI_Touch_Processing+0x11f8>)
 80122ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122b2:	f04f 0801 	mov.w	r8, #1
 80122b6:	f7ee fc39 	bl	8000b2c <__aeabi_dcmpge>
 80122ba:	b900      	cbnz	r0, 80122be <GUI_Touch_Processing+0x101e>
 80122bc:	4680      	mov	r8, r0
 80122be:	a366      	add	r3, pc, #408	; (adr r3, 8012458 <GUI_Touch_Processing+0x11b8>)
 80122c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122c8:	f04f 0a01 	mov.w	sl, #1
 80122cc:	f7ee fc24 	bl	8000b18 <__aeabi_dcmple>
 80122d0:	b900      	cbnz	r0, 80122d4 <GUI_Touch_Processing+0x1034>
 80122d2:	4682      	mov	sl, r0
 80122d4:	ea08 080a 	and.w	r8, r8, sl
 80122d8:	f018 0f01 	tst.w	r8, #1
 80122dc:	d00e      	beq.n	80122fc <GUI_Touch_Processing+0x105c>
 80122de:	b16e      	cbz	r6, 80122fc <GUI_Touch_Processing+0x105c>
					if (Language_status == Ru) Language_status=En;
 80122e0:	4b6e      	ldr	r3, [pc, #440]	; (801249c <GUI_Touch_Processing+0x11fc>)
 80122e2:	781a      	ldrb	r2, [r3, #0]
 80122e4:	b91a      	cbnz	r2, 80122ee <GUI_Touch_Processing+0x104e>
 80122e6:	2201      	movs	r2, #1
 80122e8:	701a      	strb	r2, [r3, #0]
 80122ea:	f7ff b867 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					else if (Language_status == En) Language_status=Ru;
 80122ee:	2a01      	cmp	r2, #1
 80122f0:	f47f a864 	bne.w	80113bc <GUI_Touch_Processing+0x11c>
 80122f4:	2200      	movs	r2, #0
 80122f6:	701a      	strb	r2, [r3, #0]
 80122f8:	f7ff b860 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 80122fc:	a358      	add	r3, pc, #352	; (adr r3, 8012460 <GUI_Touch_Processing+0x11c0>)
 80122fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012302:	4620      	mov	r0, r4
 8012304:	4629      	mov	r1, r5
 8012306:	f04f 0601 	mov.w	r6, #1
 801230a:	f7ee fc0f 	bl	8000b2c <__aeabi_dcmpge>
 801230e:	b900      	cbnz	r0, 8012312 <GUI_Touch_Processing+0x1072>
 8012310:	4606      	mov	r6, r0
 8012312:	a355      	add	r3, pc, #340	; (adr r3, 8012468 <GUI_Touch_Processing+0x11c8>)
 8012314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012318:	4620      	mov	r0, r4
 801231a:	4629      	mov	r1, r5
 801231c:	f04f 0801 	mov.w	r8, #1
 8012320:	f7ee fbfa 	bl	8000b18 <__aeabi_dcmple>
 8012324:	b900      	cbnz	r0, 8012328 <GUI_Touch_Processing+0x1088>
 8012326:	4680      	mov	r8, r0
 8012328:	ea06 0308 	and.w	r3, r6, r8
 801232c:	07db      	lsls	r3, r3, #31
 801232e:	d511      	bpl.n	8012354 <GUI_Touch_Processing+0x10b4>
 8012330:	f1b9 0f00 	cmp.w	r9, #0
 8012334:	d00e      	beq.n	8012354 <GUI_Touch_Processing+0x10b4>
					TFT_ON_OFF = 0x00;
 8012336:	4b5a      	ldr	r3, [pc, #360]	; (80124a0 <GUI_Touch_Processing+0x1200>)
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8012338:	485a      	ldr	r0, [pc, #360]	; (80124a4 <GUI_Touch_Processing+0x1204>)
					TFT_ON_OFF = 0x00;
 801233a:	2400      	movs	r4, #0
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801233c:	2104      	movs	r1, #4
					TFT_ON_OFF = 0x00;
 801233e:	701c      	strb	r4, [r3, #0]
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8012340:	f7f4 fa34 	bl	80067ac <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 8012344:	4622      	mov	r2, r4
 8012346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801234a:	4857      	ldr	r0, [pc, #348]	; (80124a8 <GUI_Touch_Processing+0x1208>)
 801234c:	f7f0 faf6 	bl	800293c <HAL_GPIO_WritePin>
 8012350:	f7ff b834 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012354:	a33e      	add	r3, pc, #248	; (adr r3, 8012450 <GUI_Touch_Processing+0x11b0>)
 8012356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235a:	4620      	mov	r0, r4
 801235c:	4629      	mov	r1, r5
 801235e:	f04f 0601 	mov.w	r6, #1
 8012362:	f7ee fbe3 	bl	8000b2c <__aeabi_dcmpge>
 8012366:	b900      	cbnz	r0, 801236a <GUI_Touch_Processing+0x10ca>
 8012368:	4606      	mov	r6, r0
 801236a:	a341      	add	r3, pc, #260	; (adr r3, 8012470 <GUI_Touch_Processing+0x11d0>)
 801236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012370:	4620      	mov	r0, r4
 8012372:	4629      	mov	r1, r5
 8012374:	f04f 0801 	mov.w	r8, #1
 8012378:	f7ee fbce 	bl	8000b18 <__aeabi_dcmple>
 801237c:	b900      	cbnz	r0, 8012380 <GUI_Touch_Processing+0x10e0>
 801237e:	4680      	mov	r8, r0
 8012380:	ea06 0608 	and.w	r6, r6, r8
 8012384:	4237      	tst	r7, r6
 8012386:	f43f a819 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
 801238a:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801238c:	2b00      	cmp	r3, #0
 801238e:	f47f a855 	bne.w	801143c <GUI_Touch_Processing+0x19c>
 8012392:	f7ff b813 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				preGUI_screen_state = GUI_screen_state;
 8012396:	4b45      	ldr	r3, [pc, #276]	; (80124ac <GUI_Touch_Processing+0x120c>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)////down
 8012398:	f8bd 0014 	ldrh.w	r0, [sp, #20]
				preGUI_screen_state = GUI_screen_state;
 801239c:	2208      	movs	r2, #8
 801239e:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)////down
 80123a0:	f7ee f8d8 	bl	8000554 <__aeabi_i2d>
 80123a4:	4604      	mov	r4, r0
 80123a6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80123aa:	460d      	mov	r5, r1
 80123ac:	f7ee f8d2 	bl	8000554 <__aeabi_i2d>
 80123b0:	a331      	add	r3, pc, #196	; (adr r3, 8012478 <GUI_Touch_Processing+0x11d8>)
 80123b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b6:	4606      	mov	r6, r0
 80123b8:	460f      	mov	r7, r1
 80123ba:	f04f 0a01 	mov.w	sl, #1
 80123be:	f7ee fbb5 	bl	8000b2c <__aeabi_dcmpge>
 80123c2:	b900      	cbnz	r0, 80123c6 <GUI_Touch_Processing+0x1126>
 80123c4:	4682      	mov	sl, r0
 80123c6:	2200      	movs	r2, #0
 80123c8:	4b39      	ldr	r3, [pc, #228]	; (80124b0 <GUI_Touch_Processing+0x1210>)
 80123ca:	4630      	mov	r0, r6
 80123cc:	4639      	mov	r1, r7
 80123ce:	fa5f fa8a 	uxtb.w	sl, sl
 80123d2:	f04f 0801 	mov.w	r8, #1
 80123d6:	f7ee fb9f 	bl	8000b18 <__aeabi_dcmple>
 80123da:	b900      	cbnz	r0, 80123de <GUI_Touch_Processing+0x113e>
 80123dc:	4680      	mov	r8, r0
 80123de:	fa5f f388 	uxtb.w	r3, r8
 80123e2:	9300      	str	r3, [sp, #0]
 80123e4:	4620      	mov	r0, r4
 80123e6:	a326      	add	r3, pc, #152	; (adr r3, 8012480 <GUI_Touch_Processing+0x11e0>)
 80123e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ec:	4629      	mov	r1, r5
 80123ee:	f04f 0801 	mov.w	r8, #1
 80123f2:	f7ee fb9b 	bl	8000b2c <__aeabi_dcmpge>
 80123f6:	b900      	cbnz	r0, 80123fa <GUI_Touch_Processing+0x115a>
 80123f8:	4680      	mov	r8, r0
 80123fa:	a319      	add	r3, pc, #100	; (adr r3, 8012460 <GUI_Touch_Processing+0x11c0>)
 80123fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012400:	4620      	mov	r0, r4
 8012402:	4629      	mov	r1, r5
 8012404:	f04f 0901 	mov.w	r9, #1
 8012408:	f7ee fb86 	bl	8000b18 <__aeabi_dcmple>
 801240c:	b900      	cbnz	r0, 8012410 <GUI_Touch_Processing+0x1170>
 801240e:	4681      	mov	r9, r0
 8012410:	ea08 0809 	and.w	r8, r8, r9
 8012414:	ea1a 0f08 	tst.w	sl, r8
 8012418:	d04c      	beq.n	80124b4 <GUI_Touch_Processing+0x1214>
 801241a:	9b00      	ldr	r3, [sp, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d049      	beq.n	80124b4 <GUI_Touch_Processing+0x1214>
					GUI_screen_state = DataSet3_Screen;
 8012420:	2309      	movs	r3, #9
 8012422:	f88b 3000 	strb.w	r3, [fp]
 8012426:	f7fe bfc9 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 801242a:	bf00      	nop
 801242c:	f3af 8000 	nop.w
 8012430:	cccccccd 	.word	0xcccccccd
 8012434:	408508cc 	.word	0x408508cc
 8012438:	66666666 	.word	0x66666666
 801243c:	408b1466 	.word	0x408b1466
 8012440:	33333333 	.word	0x33333333
 8012444:	408f8d33 	.word	0x408f8d33
 8012448:	33333333 	.word	0x33333333
 801244c:	40053333 	.word	0x40053333
 8012450:	00000000 	.word	0x00000000
 8012454:	40623800 	.word	0x40623800
 8012458:	00000000 	.word	0x00000000
 801245c:	4073e000 	.word	0x4073e000
 8012460:	66666666 	.word	0x66666666
 8012464:	4081f866 	.word	0x4081f866
 8012468:	33333333 	.word	0x33333333
 801246c:	40867133 	.word	0x40867133
 8012470:	99999999 	.word	0x99999999
 8012474:	40720d99 	.word	0x40720d99
 8012478:	99999999 	.word	0x99999999
 801247c:	4091a399 	.word	0x4091a399
 8012480:	33333333 	.word	0x33333333
 8012484:	407aff33 	.word	0x407aff33
 8012488:	40809000 	.word	0x40809000
 801248c:	2000527e 	.word	0x2000527e
 8012490:	200052a6 	.word	0x200052a6
 8012494:	2008c31d 	.word	0x2008c31d
 8012498:	406a8000 	.word	0x406a8000
 801249c:	2000527b 	.word	0x2000527b
 80124a0:	20000a4a 	.word	0x20000a4a
 80124a4:	2009101c 	.word	0x2009101c
 80124a8:	48001400 	.word	0x48001400
 80124ac:	2000022a 	.word	0x2000022a
 80124b0:	4093e000 	.word	0x4093e000
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //Irradiance
 80124b4:	2200      	movs	r2, #0
 80124b6:	4bb6      	ldr	r3, [pc, #728]	; (8012790 <GUI_Touch_Processing+0x14f0>)
 80124b8:	4620      	mov	r0, r4
 80124ba:	4629      	mov	r1, r5
 80124bc:	f04f 0801 	mov.w	r8, #1
 80124c0:	f7ee fb34 	bl	8000b2c <__aeabi_dcmpge>
 80124c4:	b900      	cbnz	r0, 80124c8 <GUI_Touch_Processing+0x1228>
 80124c6:	4680      	mov	r8, r0
 80124c8:	a397      	add	r3, pc, #604	; (adr r3, 8012728 <GUI_Touch_Processing+0x1488>)
 80124ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ce:	4620      	mov	r0, r4
 80124d0:	4629      	mov	r1, r5
 80124d2:	f04f 0901 	mov.w	r9, #1
 80124d6:	f7ee fb1f 	bl	8000b18 <__aeabi_dcmple>
 80124da:	b900      	cbnz	r0, 80124de <GUI_Touch_Processing+0x123e>
 80124dc:	4681      	mov	r9, r0
 80124de:	ea08 0809 	and.w	r8, r8, r9
 80124e2:	a393      	add	r3, pc, #588	; (adr r3, 8012730 <GUI_Touch_Processing+0x1490>)
 80124e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e8:	4630      	mov	r0, r6
 80124ea:	4639      	mov	r1, r7
 80124ec:	fa5f f888 	uxtb.w	r8, r8
 80124f0:	f04f 0901 	mov.w	r9, #1
 80124f4:	f7ee fb1a 	bl	8000b2c <__aeabi_dcmpge>
 80124f8:	b900      	cbnz	r0, 80124fc <GUI_Touch_Processing+0x125c>
 80124fa:	4681      	mov	r9, r0
 80124fc:	a38e      	add	r3, pc, #568	; (adr r3, 8012738 <GUI_Touch_Processing+0x1498>)
 80124fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012502:	4630      	mov	r0, r6
 8012504:	4639      	mov	r1, r7
 8012506:	f04f 0b01 	mov.w	fp, #1
 801250a:	f7ee fb05 	bl	8000b18 <__aeabi_dcmple>
 801250e:	b900      	cbnz	r0, 8012512 <GUI_Touch_Processing+0x1272>
 8012510:	4683      	mov	fp, r0
 8012512:	ea09 090b 	and.w	r9, r9, fp
 8012516:	f019 0f01 	tst.w	r9, #1
 801251a:	d00f      	beq.n	801253c <GUI_Touch_Processing+0x129c>
 801251c:	f1b8 0f00 	cmp.w	r8, #0
 8012520:	d00c      	beq.n	801253c <GUI_Touch_Processing+0x129c>
					Measure_Field ^= Irradiance;
 8012522:	4b9c      	ldr	r3, [pc, #624]	; (8012794 <GUI_Touch_Processing+0x14f4>)
 8012524:	881a      	ldrh	r2, [r3, #0]
 8012526:	f082 0202 	eor.w	r2, r2, #2
 801252a:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 801252c:	2146      	movs	r1, #70	; 0x46
 801252e:	f002 0202 	and.w	r2, r2, #2
 8012532:	20c8      	movs	r0, #200	; 0xc8
 8012534:	f003 fa18 	bl	8015968 <GUI_CheckBox>
 8012538:	f7fe bf40 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //PPFD
 801253c:	a380      	add	r3, pc, #512	; (adr r3, 8012740 <GUI_Touch_Processing+0x14a0>)
 801253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012542:	4630      	mov	r0, r6
 8012544:	4639      	mov	r1, r7
 8012546:	f04f 0901 	mov.w	r9, #1
 801254a:	f7ee faef 	bl	8000b2c <__aeabi_dcmpge>
 801254e:	b900      	cbnz	r0, 8012552 <GUI_Touch_Processing+0x12b2>
 8012550:	4681      	mov	r9, r0
 8012552:	a37d      	add	r3, pc, #500	; (adr r3, 8012748 <GUI_Touch_Processing+0x14a8>)
 8012554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012558:	4630      	mov	r0, r6
 801255a:	4639      	mov	r1, r7
 801255c:	f04f 0b01 	mov.w	fp, #1
 8012560:	f7ee fada 	bl	8000b18 <__aeabi_dcmple>
 8012564:	b900      	cbnz	r0, 8012568 <GUI_Touch_Processing+0x12c8>
 8012566:	4683      	mov	fp, r0
 8012568:	ea09 090b 	and.w	r9, r9, fp
 801256c:	f019 0f01 	tst.w	r9, #1
 8012570:	d00f      	beq.n	8012592 <GUI_Touch_Processing+0x12f2>
 8012572:	f1b8 0f00 	cmp.w	r8, #0
 8012576:	d00c      	beq.n	8012592 <GUI_Touch_Processing+0x12f2>
					Measure_Field ^= PPFD;
 8012578:	4b86      	ldr	r3, [pc, #536]	; (8012794 <GUI_Touch_Processing+0x14f4>)
 801257a:	881a      	ldrh	r2, [r3, #0]
 801257c:	f082 0204 	eor.w	r2, r2, #4
 8012580:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Measure_Field&PPFD);
 8012582:	2185      	movs	r1, #133	; 0x85
 8012584:	f002 0204 	and.w	r2, r2, #4
 8012588:	20c8      	movs	r0, #200	; 0xc8
 801258a:	f003 f9ed 	bl	8015968 <GUI_CheckBox>
 801258e:	f7fe bf15 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib) //PPFD_BGR
 8012592:	a36f      	add	r3, pc, #444	; (adr r3, 8012750 <GUI_Touch_Processing+0x14b0>)
 8012594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012598:	4630      	mov	r0, r6
 801259a:	4639      	mov	r1, r7
 801259c:	f04f 0901 	mov.w	r9, #1
 80125a0:	f7ee fac4 	bl	8000b2c <__aeabi_dcmpge>
 80125a4:	b900      	cbnz	r0, 80125a8 <GUI_Touch_Processing+0x1308>
 80125a6:	4681      	mov	r9, r0
 80125a8:	a36b      	add	r3, pc, #428	; (adr r3, 8012758 <GUI_Touch_Processing+0x14b8>)
 80125aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ae:	4630      	mov	r0, r6
 80125b0:	4639      	mov	r1, r7
 80125b2:	f04f 0b01 	mov.w	fp, #1
 80125b6:	f7ee faaf 	bl	8000b18 <__aeabi_dcmple>
 80125ba:	b900      	cbnz	r0, 80125be <GUI_Touch_Processing+0x131e>
 80125bc:	4683      	mov	fp, r0
 80125be:	ea09 090b 	and.w	r9, r9, fp
 80125c2:	f019 0f01 	tst.w	r9, #1
 80125c6:	d00f      	beq.n	80125e8 <GUI_Touch_Processing+0x1348>
 80125c8:	f1b8 0f00 	cmp.w	r8, #0
 80125cc:	d00c      	beq.n	80125e8 <GUI_Touch_Processing+0x1348>
					Measure_Field ^= PPFD_BGR;
 80125ce:	4b71      	ldr	r3, [pc, #452]	; (8012794 <GUI_Touch_Processing+0x14f4>)
 80125d0:	881a      	ldrh	r2, [r3, #0]
 80125d2:	f082 0208 	eor.w	r2, r2, #8
 80125d6:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 80125d8:	21c6      	movs	r1, #198	; 0xc6
 80125da:	f002 0208 	and.w	r2, r2, #8
 80125de:	20c8      	movs	r0, #200	; 0xc8
 80125e0:	f003 f9c2 	bl	8015968 <GUI_CheckBox>
 80125e4:	f7fe beea 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=263*TS_Callib & Touch_y <=(263+54)*TS_Callib) //CCT
 80125e8:	a35d      	add	r3, pc, #372	; (adr r3, 8012760 <GUI_Touch_Processing+0x14c0>)
 80125ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ee:	4630      	mov	r0, r6
 80125f0:	4639      	mov	r1, r7
 80125f2:	f04f 0901 	mov.w	r9, #1
 80125f6:	f7ee fa99 	bl	8000b2c <__aeabi_dcmpge>
 80125fa:	b900      	cbnz	r0, 80125fe <GUI_Touch_Processing+0x135e>
 80125fc:	4681      	mov	r9, r0
 80125fe:	a35a      	add	r3, pc, #360	; (adr r3, 8012768 <GUI_Touch_Processing+0x14c8>)
 8012600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012604:	4630      	mov	r0, r6
 8012606:	4639      	mov	r1, r7
 8012608:	f04f 0b01 	mov.w	fp, #1
 801260c:	f7ee fa84 	bl	8000b18 <__aeabi_dcmple>
 8012610:	b900      	cbnz	r0, 8012614 <GUI_Touch_Processing+0x1374>
 8012612:	4683      	mov	fp, r0
 8012614:	ea09 090b 	and.w	r9, r9, fp
 8012618:	f019 0f01 	tst.w	r9, #1
 801261c:	d010      	beq.n	8012640 <GUI_Touch_Processing+0x13a0>
 801261e:	f1b8 0f00 	cmp.w	r8, #0
 8012622:	d00d      	beq.n	8012640 <GUI_Touch_Processing+0x13a0>
					Measure_Field ^= CCT;
 8012624:	4b5b      	ldr	r3, [pc, #364]	; (8012794 <GUI_Touch_Processing+0x14f4>)
 8012626:	881a      	ldrh	r2, [r3, #0]
 8012628:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 801262c:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 263, Measure_Field&CCT);
 801262e:	f240 1107 	movw	r1, #263	; 0x107
 8012632:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012636:	20c8      	movs	r0, #200	; 0xc8
 8012638:	f003 f996 	bl	8015968 <GUI_CheckBox>
 801263c:	f7fe bebe 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //delta_E
 8012640:	a34b      	add	r3, pc, #300	; (adr r3, 8012770 <GUI_Touch_Processing+0x14d0>)
 8012642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012646:	4630      	mov	r0, r6
 8012648:	4639      	mov	r1, r7
 801264a:	f04f 0901 	mov.w	r9, #1
 801264e:	f7ee fa6d 	bl	8000b2c <__aeabi_dcmpge>
 8012652:	b900      	cbnz	r0, 8012656 <GUI_Touch_Processing+0x13b6>
 8012654:	4681      	mov	r9, r0
 8012656:	a348      	add	r3, pc, #288	; (adr r3, 8012778 <GUI_Touch_Processing+0x14d8>)
 8012658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265c:	4630      	mov	r0, r6
 801265e:	4639      	mov	r1, r7
 8012660:	f04f 0b01 	mov.w	fp, #1
 8012664:	f7ee fa58 	bl	8000b18 <__aeabi_dcmple>
 8012668:	b900      	cbnz	r0, 801266c <GUI_Touch_Processing+0x13cc>
 801266a:	4683      	mov	fp, r0
 801266c:	ea09 090b 	and.w	r9, r9, fp
 8012670:	fa5f f689 	uxtb.w	r6, r9
 8012674:	f1b8 0f00 	cmp.w	r8, #0
 8012678:	d017      	beq.n	80126aa <GUI_Touch_Processing+0x140a>
 801267a:	b1b6      	cbz	r6, 80126aa <GUI_Touch_Processing+0x140a>
					Measure_Field ^= delta_E;
 801267c:	4c45      	ldr	r4, [pc, #276]	; (8012794 <GUI_Touch_Processing+0x14f4>)
 801267e:	8822      	ldrh	r2, [r4, #0]
 8012680:	f482 6200 	eor.w	r2, r2, #2048	; 0x800
 8012684:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 327, Measure_Field&delta_E);
 8012686:	f240 1147 	movw	r1, #327	; 0x147
 801268a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801268e:	20c8      	movs	r0, #200	; 0xc8
 8012690:	f003 f96a 	bl	8015968 <GUI_CheckBox>
					GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 8012694:	8822      	ldrh	r2, [r4, #0]
 8012696:	2300      	movs	r3, #0
 8012698:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801269c:	f240 1147 	movw	r1, #327	; 0x147
 80126a0:	2082      	movs	r0, #130	; 0x82
 80126a2:	f003 f841 	bl	8015728 <GUI_Button_Measure_deltaE_Small>
 80126a6:	f7fe be89 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				else	if(Touch_x >= 130*TS_Callib & Touch_x <= (200+38)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //delta_E_measure_small
 80126aa:	a335      	add	r3, pc, #212	; (adr r3, 8012780 <GUI_Touch_Processing+0x14e0>)
 80126ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b0:	4620      	mov	r0, r4
 80126b2:	4629      	mov	r1, r5
 80126b4:	f04f 0701 	mov.w	r7, #1
 80126b8:	f7ee fa38 	bl	8000b2c <__aeabi_dcmpge>
 80126bc:	b900      	cbnz	r0, 80126c0 <GUI_Touch_Processing+0x1420>
 80126be:	4607      	mov	r7, r0
 80126c0:	a331      	add	r3, pc, #196	; (adr r3, 8012788 <GUI_Touch_Processing+0x14e8>)
 80126c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c6:	4620      	mov	r0, r4
 80126c8:	4629      	mov	r1, r5
 80126ca:	f04f 0801 	mov.w	r8, #1
 80126ce:	f7ee fa23 	bl	8000b18 <__aeabi_dcmple>
 80126d2:	b900      	cbnz	r0, 80126d6 <GUI_Touch_Processing+0x1436>
 80126d4:	4680      	mov	r8, r0
 80126d6:	ea07 0308 	and.w	r3, r7, r8
 80126da:	07df      	lsls	r7, r3, #31
 80126dc:	d568      	bpl.n	80127b0 <GUI_Touch_Processing+0x1510>
 80126de:	2e00      	cmp	r6, #0
 80126e0:	d066      	beq.n	80127b0 <GUI_Touch_Processing+0x1510>
					if(Measure_Field&delta_E)
 80126e2:	4c2c      	ldr	r4, [pc, #176]	; (8012794 <GUI_Touch_Processing+0x14f4>)
 80126e4:	8823      	ldrh	r3, [r4, #0]
 80126e6:	0518      	lsls	r0, r3, #20
 80126e8:	f57e ae68 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
						Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 80126ec:	4b2a      	ldr	r3, [pc, #168]	; (8012798 <GUI_Touch_Processing+0x14f8>)
 80126ee:	482b      	ldr	r0, [pc, #172]	; (801279c <GUI_Touch_Processing+0x14fc>)
 80126f0:	7819      	ldrb	r1, [r3, #0]
 80126f2:	4b2b      	ldr	r3, [pc, #172]	; (80127a0 <GUI_Touch_Processing+0x1500>)
 80126f4:	781a      	ldrb	r2, [r3, #0]
 80126f6:	4b2b      	ldr	r3, [pc, #172]	; (80127a4 <GUI_Touch_Processing+0x1504>)
 80126f8:	2900      	cmp	r1, #0
 80126fa:	bf08      	it	eq
 80126fc:	4618      	moveq	r0, r3
 80126fe:	f7fc fb13 	bl	800ed28 <Calculate_Lab>
						colorimetry_LAB_mem[0] = colorimetry_LAB[0];
 8012702:	4a29      	ldr	r2, [pc, #164]	; (80127a8 <GUI_Touch_Processing+0x1508>)
 8012704:	4b29      	ldr	r3, [pc, #164]	; (80127ac <GUI_Touch_Processing+0x150c>)
 8012706:	8811      	ldrh	r1, [r2, #0]
 8012708:	8019      	strh	r1, [r3, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 801270a:	8851      	ldrh	r1, [r2, #2]
						colorimetry_LAB_mem[2] = colorimetry_LAB[2];
 801270c:	8892      	ldrh	r2, [r2, #4]
 801270e:	809a      	strh	r2, [r3, #4]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8012710:	8822      	ldrh	r2, [r4, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8012712:	8059      	strh	r1, [r3, #2]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8012714:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8012718:	2301      	movs	r3, #1
 801271a:	f240 1147 	movw	r1, #327	; 0x147
 801271e:	2082      	movs	r0, #130	; 0x82
 8012720:	f003 f802 	bl	8015728 <GUI_Button_Measure_deltaE_Small>
 8012724:	f7fe be4a 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8012728:	cccccccd 	.word	0xcccccccd
 801272c:	408508cc 	.word	0x408508cc
 8012730:	00000000 	.word	0x00000000
 8012734:	40673000 	.word	0x40673000
 8012738:	99999999 	.word	0x99999999
 801273c:	40748999 	.word	0x40748999
 8012740:	33333333 	.word	0x33333333
 8012744:	40760733 	.word	0x40760733
 8012748:	cccccccd 	.word	0xcccccccd
 801274c:	407ef8cc 	.word	0x407ef8cc
 8012750:	99999999 	.word	0x99999999
 8012754:	40806599 	.word	0x40806599
 8012758:	66666666 	.word	0x66666666
 801275c:	4084de66 	.word	0x4084de66
 8012760:	99999999 	.word	0x99999999
 8012764:	4085c799 	.word	0x4085c799
 8012768:	66666666 	.word	0x66666666
 801276c:	408a4066 	.word	0x408a4066
 8012770:	66666666 	.word	0x66666666
 8012774:	408b1466 	.word	0x408b1466
 8012778:	33333333 	.word	0x33333333
 801277c:	408f8d33 	.word	0x408f8d33
 8012780:	00000000 	.word	0x00000000
 8012784:	40758800 	.word	0x40758800
 8012788:	99999999 	.word	0x99999999
 801278c:	4083b599 	.word	0x4083b599
 8012790:	40809000 	.word	0x40809000
 8012794:	2000527e 	.word	0x2000527e
 8012798:	2000527c 	.word	0x2000527c
 801279c:	2008adc6 	.word	0x2008adc6
 80127a0:	2008c321 	.word	0x2008c321
 80127a4:	2008adcc 	.word	0x2008adcc
 80127a8:	2008adc0 	.word	0x2008adc0
 80127ac:	2008c8b0 	.word	0x2008c8b0
 80127b0:	9b00      	ldr	r3, [sp, #0]
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 80127b2:	4620      	mov	r0, r4
 80127b4:	ea0a 0703 	and.w	r7, sl, r3
 80127b8:	4629      	mov	r1, r5
 80127ba:	a3bd      	add	r3, pc, #756	; (adr r3, 8012ab0 <GUI_Touch_Processing+0x1810>)
 80127bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c0:	f04f 0601 	mov.w	r6, #1
 80127c4:	f7ee f9b2 	bl	8000b2c <__aeabi_dcmpge>
 80127c8:	b900      	cbnz	r0, 80127cc <GUI_Touch_Processing+0x152c>
 80127ca:	4606      	mov	r6, r0
 80127cc:	a39e      	add	r3, pc, #632	; (adr r3, 8012a48 <GUI_Touch_Processing+0x17a8>)
 80127ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d2:	4620      	mov	r0, r4
 80127d4:	4629      	mov	r1, r5
 80127d6:	f04f 0801 	mov.w	r8, #1
 80127da:	f7ee f99d 	bl	8000b18 <__aeabi_dcmple>
 80127de:	b900      	cbnz	r0, 80127e2 <GUI_Touch_Processing+0x1542>
 80127e0:	4680      	mov	r8, r0
 80127e2:	ea06 0308 	and.w	r3, r6, r8
 80127e6:	07d9      	lsls	r1, r3, #31
 80127e8:	d523      	bpl.n	8012832 <GUI_Touch_Processing+0x1592>
 80127ea:	b317      	cbz	r7, 8012832 <GUI_Touch_Processing+0x1592>
					WriteSDFLASH_t(sdfile_cnt);
 80127ec:	4ba8      	ldr	r3, [pc, #672]	; (8012a90 <GUI_Touch_Processing+0x17f0>)
 80127ee:	2100      	movs	r1, #0
 80127f0:	8818      	ldrh	r0, [r3, #0]
 80127f2:	f009 fe73 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80127f6:	4ba7      	ldr	r3, [pc, #668]	; (8012a94 <GUI_Touch_Processing+0x17f4>)
 80127f8:	781a      	ldrb	r2, [r3, #0]
 80127fa:	4ba7      	ldr	r3, [pc, #668]	; (8012a98 <GUI_Touch_Processing+0x17f8>)
					switch (Prev_Inf_Screen){
 80127fc:	1e51      	subs	r1, r2, #1
 80127fe:	2905      	cmp	r1, #5
 8012800:	d804      	bhi.n	801280c <GUI_Touch_Processing+0x156c>
 8012802:	e8df f001 	tbb	[pc, r1]
 8012806:	0306      	.short	0x0306
 8012808:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 801280c:	701a      	strb	r2, [r3, #0]
 801280e:	f7fe bdd5 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012812:	2201      	movs	r2, #1
 8012814:	701a      	strb	r2, [r3, #0]
 8012816:	f7fe bdd1 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801281a:	2204      	movs	r2, #4
 801281c:	701a      	strb	r2, [r3, #0]
 801281e:	f7fe bdcd 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012822:	2206      	movs	r2, #6
 8012824:	701a      	strb	r2, [r3, #0]
 8012826:	f7fe bdc9 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801282a:	2205      	movs	r2, #5
 801282c:	701a      	strb	r2, [r3, #0]
 801282e:	f7fe bdc5 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8012832:	a381      	add	r3, pc, #516	; (adr r3, 8012a38 <GUI_Touch_Processing+0x1798>)
 8012834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012838:	4620      	mov	r0, r4
 801283a:	4629      	mov	r1, r5
 801283c:	f04f 0601 	mov.w	r6, #1
 8012840:	f7ee f974 	bl	8000b2c <__aeabi_dcmpge>
 8012844:	b900      	cbnz	r0, 8012848 <GUI_Touch_Processing+0x15a8>
 8012846:	4606      	mov	r6, r0
 8012848:	a37d      	add	r3, pc, #500	; (adr r3, 8012a40 <GUI_Touch_Processing+0x17a0>)
 801284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284e:	4620      	mov	r0, r4
 8012850:	4629      	mov	r1, r5
 8012852:	f04f 0801 	mov.w	r8, #1
 8012856:	f7ee f95f 	bl	8000b18 <__aeabi_dcmple>
 801285a:	b900      	cbnz	r0, 801285e <GUI_Touch_Processing+0x15be>
 801285c:	4680      	mov	r8, r0
 801285e:	ea06 0308 	and.w	r3, r6, r8
 8012862:	07da      	lsls	r2, r3, #31
 8012864:	d502      	bpl.n	801286c <GUI_Touch_Processing+0x15cc>
 8012866:	2f00      	cmp	r7, #0
 8012868:	f47f ad65 	bne.w	8012336 <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801286c:	a376      	add	r3, pc, #472	; (adr r3, 8012a48 <GUI_Touch_Processing+0x17a8>)
 801286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012872:	4620      	mov	r0, r4
 8012874:	4629      	mov	r1, r5
 8012876:	f04f 0601 	mov.w	r6, #1
 801287a:	f7ee f957 	bl	8000b2c <__aeabi_dcmpge>
 801287e:	b900      	cbnz	r0, 8012882 <GUI_Touch_Processing+0x15e2>
 8012880:	4606      	mov	r6, r0
 8012882:	a373      	add	r3, pc, #460	; (adr r3, 8012a50 <GUI_Touch_Processing+0x17b0>)
 8012884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012888:	4620      	mov	r0, r4
 801288a:	4629      	mov	r1, r5
 801288c:	f04f 0701 	mov.w	r7, #1
 8012890:	f7ee f942 	bl	8000b18 <__aeabi_dcmple>
 8012894:	b900      	cbnz	r0, 8012898 <GUI_Touch_Processing+0x15f8>
 8012896:	4607      	mov	r7, r0
 8012898:	403e      	ands	r6, r7
 801289a:	ea1a 0f06 	tst.w	sl, r6
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801289e:	f43e ad8d 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
 80128a2:	9b00      	ldr	r3, [sp, #0]
 80128a4:	e572      	b.n	801238c <GUI_Touch_Processing+0x10ec>
					preGUI_screen_state = GUI_screen_state;
 80128a6:	4b7d      	ldr	r3, [pc, #500]	; (8012a9c <GUI_Touch_Processing+0x17fc>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)// down
 80128a8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 80128ac:	2209      	movs	r2, #9
 80128ae:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)// down
 80128b0:	f7ed fe50 	bl	8000554 <__aeabi_i2d>
 80128b4:	e9cd 0100 	strd	r0, r1, [sp]
 80128b8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80128bc:	f7ed fe4a 	bl	8000554 <__aeabi_i2d>
 80128c0:	a365      	add	r3, pc, #404	; (adr r3, 8012a58 <GUI_Touch_Processing+0x17b8>)
 80128c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c6:	4604      	mov	r4, r0
 80128c8:	460d      	mov	r5, r1
 80128ca:	f04f 0801 	mov.w	r8, #1
 80128ce:	f7ee f92d 	bl	8000b2c <__aeabi_dcmpge>
 80128d2:	b900      	cbnz	r0, 80128d6 <GUI_Touch_Processing+0x1636>
 80128d4:	4680      	mov	r8, r0
 80128d6:	2200      	movs	r2, #0
 80128d8:	4b71      	ldr	r3, [pc, #452]	; (8012aa0 <GUI_Touch_Processing+0x1800>)
 80128da:	4620      	mov	r0, r4
 80128dc:	4629      	mov	r1, r5
 80128de:	fa5f f888 	uxtb.w	r8, r8
 80128e2:	f04f 0701 	mov.w	r7, #1
 80128e6:	f7ee f917 	bl	8000b18 <__aeabi_dcmple>
 80128ea:	b900      	cbnz	r0, 80128ee <GUI_Touch_Processing+0x164e>
 80128ec:	4607      	mov	r7, r0
 80128ee:	a35c      	add	r3, pc, #368	; (adr r3, 8012a60 <GUI_Touch_Processing+0x17c0>)
 80128f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128f8:	b2ff      	uxtb	r7, r7
 80128fa:	f04f 0601 	mov.w	r6, #1
 80128fe:	f7ee f915 	bl	8000b2c <__aeabi_dcmpge>
 8012902:	b900      	cbnz	r0, 8012906 <GUI_Touch_Processing+0x1666>
 8012904:	4606      	mov	r6, r0
 8012906:	a34c      	add	r3, pc, #304	; (adr r3, 8012a38 <GUI_Touch_Processing+0x1798>)
 8012908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012910:	f04f 0901 	mov.w	r9, #1
 8012914:	f7ee f900 	bl	8000b18 <__aeabi_dcmple>
 8012918:	b900      	cbnz	r0, 801291c <GUI_Touch_Processing+0x167c>
 801291a:	4681      	mov	r9, r0
 801291c:	ea06 0609 	and.w	r6, r6, r9
 8012920:	ea18 0f06 	tst.w	r8, r6
 8012924:	d005      	beq.n	8012932 <GUI_Touch_Processing+0x1692>
 8012926:	b127      	cbz	r7, 8012932 <GUI_Touch_Processing+0x1692>
					GUI_screen_state = DataSet4_Screen;
 8012928:	230a      	movs	r3, #10
 801292a:	f88b 3000 	strb.w	r3, [fp]
 801292e:	f7fe bd45 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //CIE_XYZ
 8012932:	2200      	movs	r2, #0
 8012934:	4b5b      	ldr	r3, [pc, #364]	; (8012aa4 <GUI_Touch_Processing+0x1804>)
 8012936:	e9dd 0100 	ldrd	r0, r1, [sp]
 801293a:	f04f 0601 	mov.w	r6, #1
 801293e:	f7ee f8f5 	bl	8000b2c <__aeabi_dcmpge>
 8012942:	b900      	cbnz	r0, 8012946 <GUI_Touch_Processing+0x16a6>
 8012944:	4606      	mov	r6, r0
 8012946:	a348      	add	r3, pc, #288	; (adr r3, 8012a68 <GUI_Touch_Processing+0x17c8>)
 8012948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012950:	f04f 0901 	mov.w	r9, #1
 8012954:	f7ee f8e0 	bl	8000b18 <__aeabi_dcmple>
 8012958:	b900      	cbnz	r0, 801295c <GUI_Touch_Processing+0x16bc>
 801295a:	4681      	mov	r9, r0
 801295c:	ea06 0609 	and.w	r6, r6, r9
 8012960:	a343      	add	r3, pc, #268	; (adr r3, 8012a70 <GUI_Touch_Processing+0x17d0>)
 8012962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012966:	4620      	mov	r0, r4
 8012968:	4629      	mov	r1, r5
 801296a:	b2f6      	uxtb	r6, r6
 801296c:	f04f 0901 	mov.w	r9, #1
 8012970:	f7ee f8dc 	bl	8000b2c <__aeabi_dcmpge>
 8012974:	b900      	cbnz	r0, 8012978 <GUI_Touch_Processing+0x16d8>
 8012976:	4681      	mov	r9, r0
 8012978:	a33f      	add	r3, pc, #252	; (adr r3, 8012a78 <GUI_Touch_Processing+0x17d8>)
 801297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297e:	4620      	mov	r0, r4
 8012980:	4629      	mov	r1, r5
 8012982:	f04f 0a01 	mov.w	sl, #1
 8012986:	f7ee f8c7 	bl	8000b18 <__aeabi_dcmple>
 801298a:	b900      	cbnz	r0, 801298e <GUI_Touch_Processing+0x16ee>
 801298c:	4682      	mov	sl, r0
 801298e:	ea09 090a 	and.w	r9, r9, sl
 8012992:	f019 0f01 	tst.w	r9, #1
 8012996:	d00d      	beq.n	80129b4 <GUI_Touch_Processing+0x1714>
 8012998:	b166      	cbz	r6, 80129b4 <GUI_Touch_Processing+0x1714>
					Measure_Field ^= CIE_XYZ;
 801299a:	4b43      	ldr	r3, [pc, #268]	; (8012aa8 <GUI_Touch_Processing+0x1808>)
 801299c:	881a      	ldrh	r2, [r3, #0]
 801299e:	f082 0210 	eor.w	r2, r2, #16
 80129a2:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 80129a4:	2146      	movs	r1, #70	; 0x46
 80129a6:	f002 0210 	and.w	r2, r2, #16
 80129aa:	20c8      	movs	r0, #200	; 0xc8
 80129ac:	f002 ffdc 	bl	8015968 <GUI_CheckBox>
 80129b0:	f7fe bd04 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //CIE_xy
 80129b4:	a332      	add	r3, pc, #200	; (adr r3, 8012a80 <GUI_Touch_Processing+0x17e0>)
 80129b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ba:	4620      	mov	r0, r4
 80129bc:	4629      	mov	r1, r5
 80129be:	f04f 0901 	mov.w	r9, #1
 80129c2:	f7ee f8b3 	bl	8000b2c <__aeabi_dcmpge>
 80129c6:	b900      	cbnz	r0, 80129ca <GUI_Touch_Processing+0x172a>
 80129c8:	4681      	mov	r9, r0
 80129ca:	a32f      	add	r3, pc, #188	; (adr r3, 8012a88 <GUI_Touch_Processing+0x17e8>)
 80129cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d0:	4620      	mov	r0, r4
 80129d2:	4629      	mov	r1, r5
 80129d4:	f04f 0a01 	mov.w	sl, #1
 80129d8:	f7ee f89e 	bl	8000b18 <__aeabi_dcmple>
 80129dc:	b900      	cbnz	r0, 80129e0 <GUI_Touch_Processing+0x1740>
 80129de:	4682      	mov	sl, r0
 80129e0:	ea09 090a 	and.w	r9, r9, sl
 80129e4:	f019 0f01 	tst.w	r9, #1
 80129e8:	d066      	beq.n	8012ab8 <GUI_Touch_Processing+0x1818>
 80129ea:	2e00      	cmp	r6, #0
 80129ec:	d064      	beq.n	8012ab8 <GUI_Touch_Processing+0x1818>
					Measure_Field ^= CIE_xy;
 80129ee:	4c2e      	ldr	r4, [pc, #184]	; (8012aa8 <GUI_Touch_Processing+0x1808>)
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 80129f0:	4d2e      	ldr	r5, [pc, #184]	; (8012aac <GUI_Touch_Processing+0x180c>)
					Measure_Field ^= CIE_xy;
 80129f2:	8822      	ldrh	r2, [r4, #0]
 80129f4:	f082 0220 	eor.w	r2, r2, #32
 80129f8:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 80129fa:	2185      	movs	r1, #133	; 0x85
 80129fc:	f002 0220 	and.w	r2, r2, #32
 8012a00:	20c8      	movs	r0, #200	; 0xc8
 8012a02:	f002 ffb1 	bl	8015968 <GUI_CheckBox>
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8012a06:	8823      	ldrh	r3, [r4, #0]
 8012a08:	782a      	ldrb	r2, [r5, #0]
 8012a0a:	f003 0320 	and.w	r3, r3, #32
 8012a0e:	f002 0201 	and.w	r2, r2, #1
 8012a12:	21c6      	movs	r1, #198	; 0xc6
 8012a14:	20c8      	movs	r0, #200	; 0xc8
 8012a16:	f002 ffe8 	bl	80159ea <GUI_RadioBox>
					GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 8012a1a:	782a      	ldrb	r2, [r5, #0]
 8012a1c:	8823      	ldrh	r3, [r4, #0]
 8012a1e:	43d2      	mvns	r2, r2
 8012a20:	f003 0320 	and.w	r3, r3, #32
 8012a24:	f002 0201 	and.w	r2, r2, #1
 8012a28:	f240 1107 	movw	r1, #263	; 0x107
 8012a2c:	20c8      	movs	r0, #200	; 0xc8
 8012a2e:	f002 ffdc 	bl	80159ea <GUI_RadioBox>
 8012a32:	f7fe bcc3 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8012a36:	bf00      	nop
 8012a38:	66666666 	.word	0x66666666
 8012a3c:	4081f866 	.word	0x4081f866
 8012a40:	33333333 	.word	0x33333333
 8012a44:	40867133 	.word	0x40867133
 8012a48:	00000000 	.word	0x00000000
 8012a4c:	40623800 	.word	0x40623800
 8012a50:	99999999 	.word	0x99999999
 8012a54:	40720d99 	.word	0x40720d99
 8012a58:	99999999 	.word	0x99999999
 8012a5c:	4091a399 	.word	0x4091a399
 8012a60:	33333333 	.word	0x33333333
 8012a64:	407aff33 	.word	0x407aff33
 8012a68:	cccccccd 	.word	0xcccccccd
 8012a6c:	408508cc 	.word	0x408508cc
 8012a70:	00000000 	.word	0x00000000
 8012a74:	40673000 	.word	0x40673000
 8012a78:	99999999 	.word	0x99999999
 8012a7c:	40748999 	.word	0x40748999
 8012a80:	33333333 	.word	0x33333333
 8012a84:	40760733 	.word	0x40760733
 8012a88:	cccccccd 	.word	0xcccccccd
 8012a8c:	407ef8cc 	.word	0x407ef8cc
 8012a90:	200052a6 	.word	0x200052a6
 8012a94:	2008c31d 	.word	0x2008c31d
 8012a98:	20005279 	.word	0x20005279
 8012a9c:	2000022a 	.word	0x2000022a
 8012aa0:	4093e000 	.word	0x4093e000
 8012aa4:	40809000 	.word	0x40809000
 8012aa8:	2000527e 	.word	0x2000527e
 8012aac:	2000527c 	.word	0x2000527c
 8012ab0:	33333333 	.word	0x33333333
 8012ab4:	40053333 	.word	0x40053333
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //CIE_Luv
 8012ab8:	a3cd      	add	r3, pc, #820	; (adr r3, 8012df0 <GUI_Touch_Processing+0x1b50>)
 8012aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012abe:	4620      	mov	r0, r4
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	f04f 0901 	mov.w	r9, #1
 8012ac6:	f7ee f831 	bl	8000b2c <__aeabi_dcmpge>
 8012aca:	b900      	cbnz	r0, 8012ace <GUI_Touch_Processing+0x182e>
 8012acc:	4681      	mov	r9, r0
 8012ace:	a3ca      	add	r3, pc, #808	; (adr r3, 8012df8 <GUI_Touch_Processing+0x1b58>)
 8012ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	f04f 0a01 	mov.w	sl, #1
 8012adc:	f7ee f81c 	bl	8000b18 <__aeabi_dcmple>
 8012ae0:	b900      	cbnz	r0, 8012ae4 <GUI_Touch_Processing+0x1844>
 8012ae2:	4682      	mov	sl, r0
 8012ae4:	ea09 090a 	and.w	r9, r9, sl
 8012ae8:	f019 0f01 	tst.w	r9, #1
 8012aec:	d00e      	beq.n	8012b0c <GUI_Touch_Processing+0x186c>
 8012aee:	b16e      	cbz	r6, 8012b0c <GUI_Touch_Processing+0x186c>
					Measure_Field ^= CIE_Luv;
 8012af0:	4bb9      	ldr	r3, [pc, #740]	; (8012dd8 <GUI_Touch_Processing+0x1b38>)
 8012af2:	881a      	ldrh	r2, [r3, #0]
 8012af4:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8012af8:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 8012afa:	f240 1147 	movw	r1, #327	; 0x147
 8012afe:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8012b02:	20c8      	movs	r0, #200	; 0xc8
 8012b04:	f002 ff30 	bl	8015968 <GUI_CheckBox>
 8012b08:	f7fe bc58 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib && (Measure_Field&CIE_xy)) //CIE_xy_1931
 8012b0c:	a39c      	add	r3, pc, #624	; (adr r3, 8012d80 <GUI_Touch_Processing+0x1ae0>)
 8012b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b12:	4620      	mov	r0, r4
 8012b14:	4629      	mov	r1, r5
 8012b16:	f04f 0901 	mov.w	r9, #1
 8012b1a:	f7ee f807 	bl	8000b2c <__aeabi_dcmpge>
 8012b1e:	b900      	cbnz	r0, 8012b22 <GUI_Touch_Processing+0x1882>
 8012b20:	4681      	mov	r9, r0
 8012b22:	ea16 0f09 	tst.w	r6, r9
 8012b26:	d02a      	beq.n	8012b7e <GUI_Touch_Processing+0x18de>
 8012b28:	a397      	add	r3, pc, #604	; (adr r3, 8012d88 <GUI_Touch_Processing+0x1ae8>)
 8012b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2e:	4620      	mov	r0, r4
 8012b30:	4629      	mov	r1, r5
 8012b32:	f04f 0901 	mov.w	r9, #1
 8012b36:	f7ed ffef 	bl	8000b18 <__aeabi_dcmple>
 8012b3a:	b900      	cbnz	r0, 8012b3e <GUI_Touch_Processing+0x189e>
 8012b3c:	4681      	mov	r9, r0
 8012b3e:	f019 0fff 	tst.w	r9, #255	; 0xff
 8012b42:	d01c      	beq.n	8012b7e <GUI_Touch_Processing+0x18de>
 8012b44:	4ba4      	ldr	r3, [pc, #656]	; (8012dd8 <GUI_Touch_Processing+0x1b38>)
 8012b46:	881b      	ldrh	r3, [r3, #0]
 8012b48:	069b      	lsls	r3, r3, #26
 8012b4a:	d518      	bpl.n	8012b7e <GUI_Touch_Processing+0x18de>
					if(!(Measure_Color_xy&CIE_xy_1931_1964)){
 8012b4c:	4ca3      	ldr	r4, [pc, #652]	; (8012ddc <GUI_Touch_Processing+0x1b3c>)
 8012b4e:	7822      	ldrb	r2, [r4, #0]
 8012b50:	07d5      	lsls	r5, r2, #31
 8012b52:	f53e ac33 	bmi.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8012b56:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 8012b58:	f082 0201 	eor.w	r2, r2, #1
 8012b5c:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8012b5e:	21c6      	movs	r1, #198	; 0xc6
 8012b60:	401a      	ands	r2, r3
 8012b62:	20c8      	movs	r0, #200	; 0xc8
 8012b64:	f002 ff41 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8012b68:	7822      	ldrb	r2, [r4, #0]
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	43d2      	mvns	r2, r2
 8012b6e:	401a      	ands	r2, r3
 8012b70:	f240 1107 	movw	r1, #263	; 0x107
 8012b74:	20c8      	movs	r0, #200	; 0xc8
 8012b76:	f002 ff38 	bl	80159ea <GUI_RadioBox>
 8012b7a:	f7fe bc1f 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=263*TS_Callib & Touch_y <=(263+54)*TS_Callib && (Measure_Field&CIE_xy)) //CIE_xy_1964
 8012b7e:	a384      	add	r3, pc, #528	; (adr r3, 8012d90 <GUI_Touch_Processing+0x1af0>)
 8012b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b84:	4620      	mov	r0, r4
 8012b86:	4629      	mov	r1, r5
 8012b88:	f04f 0901 	mov.w	r9, #1
 8012b8c:	f7ed ffce 	bl	8000b2c <__aeabi_dcmpge>
 8012b90:	b900      	cbnz	r0, 8012b94 <GUI_Touch_Processing+0x18f4>
 8012b92:	4681      	mov	r9, r0
 8012b94:	ea16 0f09 	tst.w	r6, r9
 8012b98:	d02a      	beq.n	8012bf0 <GUI_Touch_Processing+0x1950>
 8012b9a:	a37f      	add	r3, pc, #508	; (adr r3, 8012d98 <GUI_Touch_Processing+0x1af8>)
 8012b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	4629      	mov	r1, r5
 8012ba4:	f04f 0601 	mov.w	r6, #1
 8012ba8:	f7ed ffb6 	bl	8000b18 <__aeabi_dcmple>
 8012bac:	b900      	cbnz	r0, 8012bb0 <GUI_Touch_Processing+0x1910>
 8012bae:	4606      	mov	r6, r0
 8012bb0:	f016 0fff 	tst.w	r6, #255	; 0xff
 8012bb4:	d01c      	beq.n	8012bf0 <GUI_Touch_Processing+0x1950>
 8012bb6:	4b88      	ldr	r3, [pc, #544]	; (8012dd8 <GUI_Touch_Processing+0x1b38>)
 8012bb8:	881b      	ldrh	r3, [r3, #0]
 8012bba:	069c      	lsls	r4, r3, #26
 8012bbc:	d518      	bpl.n	8012bf0 <GUI_Touch_Processing+0x1950>
					if((Measure_Color_xy&CIE_xy_1931_1964)){
 8012bbe:	4c87      	ldr	r4, [pc, #540]	; (8012ddc <GUI_Touch_Processing+0x1b3c>)
 8012bc0:	7822      	ldrb	r2, [r4, #0]
 8012bc2:	07d0      	lsls	r0, r2, #31
 8012bc4:	f57e abfa 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8012bc8:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 8012bca:	f082 0201 	eor.w	r2, r2, #1
 8012bce:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8012bd0:	21c6      	movs	r1, #198	; 0xc6
 8012bd2:	401a      	ands	r2, r3
 8012bd4:	20c8      	movs	r0, #200	; 0xc8
 8012bd6:	f002 ff08 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8012bda:	7822      	ldrb	r2, [r4, #0]
 8012bdc:	2301      	movs	r3, #1
 8012bde:	43d2      	mvns	r2, r2
 8012be0:	401a      	ands	r2, r3
 8012be2:	f240 1107 	movw	r1, #263	; 0x107
 8012be6:	20c8      	movs	r0, #200	; 0xc8
 8012be8:	f002 feff 	bl	80159ea <GUI_RadioBox>
 8012bec:	f7fe bbe6 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8012bf0:	a36b      	add	r3, pc, #428	; (adr r3, 8012da0 <GUI_Touch_Processing+0x1b00>)
 8012bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bfa:	ea08 0407 	and.w	r4, r8, r7
 8012bfe:	f04f 0501 	mov.w	r5, #1
 8012c02:	f7ed ff93 	bl	8000b2c <__aeabi_dcmpge>
 8012c06:	b900      	cbnz	r0, 8012c0a <GUI_Touch_Processing+0x196a>
 8012c08:	4605      	mov	r5, r0
 8012c0a:	a367      	add	r3, pc, #412	; (adr r3, 8012da8 <GUI_Touch_Processing+0x1b08>)
 8012c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c14:	f04f 0601 	mov.w	r6, #1
 8012c18:	f7ed ff7e 	bl	8000b18 <__aeabi_dcmple>
 8012c1c:	b900      	cbnz	r0, 8012c20 <GUI_Touch_Processing+0x1980>
 8012c1e:	4606      	mov	r6, r0
 8012c20:	ea05 0306 	and.w	r3, r5, r6
 8012c24:	07d9      	lsls	r1, r3, #31
 8012c26:	d502      	bpl.n	8012c2e <GUI_Touch_Processing+0x198e>
 8012c28:	2c00      	cmp	r4, #0
 8012c2a:	f47f ab84 	bne.w	8012336 <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012c2e:	a360      	add	r3, pc, #384	; (adr r3, 8012db0 <GUI_Touch_Processing+0x1b10>)
 8012c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c38:	f04f 0501 	mov.w	r5, #1
 8012c3c:	f7ed ff76 	bl	8000b2c <__aeabi_dcmpge>
 8012c40:	b900      	cbnz	r0, 8012c44 <GUI_Touch_Processing+0x19a4>
 8012c42:	4605      	mov	r5, r0
 8012c44:	a35c      	add	r3, pc, #368	; (adr r3, 8012db8 <GUI_Touch_Processing+0x1b18>)
 8012c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c4e:	f04f 0601 	mov.w	r6, #1
 8012c52:	f7ed ff61 	bl	8000b18 <__aeabi_dcmple>
 8012c56:	b900      	cbnz	r0, 8012c5a <GUI_Touch_Processing+0x19ba>
 8012c58:	4606      	mov	r6, r0
 8012c5a:	ea05 0306 	and.w	r3, r5, r6
 8012c5e:	07da      	lsls	r2, r3, #31
 8012c60:	d527      	bpl.n	8012cb2 <GUI_Touch_Processing+0x1a12>
 8012c62:	b334      	cbz	r4, 8012cb2 <GUI_Touch_Processing+0x1a12>
					WriteSDFLASH_t(sdfile_cnt);
 8012c64:	4b5e      	ldr	r3, [pc, #376]	; (8012de0 <GUI_Touch_Processing+0x1b40>)
 8012c66:	2100      	movs	r1, #0
 8012c68:	8818      	ldrh	r0, [r3, #0]
 8012c6a:	f009 fc37 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012c6e:	4b5d      	ldr	r3, [pc, #372]	; (8012de4 <GUI_Touch_Processing+0x1b44>)
 8012c70:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012c72:	1e5a      	subs	r2, r3, #1
 8012c74:	2a05      	cmp	r2, #5
 8012c76:	d804      	bhi.n	8012c82 <GUI_Touch_Processing+0x19e2>
 8012c78:	e8df f002 	tbb	[pc, r2]
 8012c7c:	0c030307 	.word	0x0c030307
 8012c80:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 8012c82:	f88b 3000 	strb.w	r3, [fp]
 8012c86:	f7fe bb99 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	f88b 3000 	strb.w	r3, [fp]
 8012c90:	f7fe bb94 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8012c94:	2304      	movs	r3, #4
 8012c96:	f88b 3000 	strb.w	r3, [fp]
 8012c9a:	f7fe bb8f 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012c9e:	2306      	movs	r3, #6
 8012ca0:	f88b 3000 	strb.w	r3, [fp]
 8012ca4:	f7fe bb8a 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012ca8:	2305      	movs	r3, #5
 8012caa:	f88b 3000 	strb.w	r3, [fp]
 8012cae:	f7fe bb85 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012cb2:	a341      	add	r3, pc, #260	; (adr r3, 8012db8 <GUI_Touch_Processing+0x1b18>)
 8012cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cbc:	f04f 0401 	mov.w	r4, #1
 8012cc0:	f7ed ff34 	bl	8000b2c <__aeabi_dcmpge>
 8012cc4:	b900      	cbnz	r0, 8012cc8 <GUI_Touch_Processing+0x1a28>
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	a33d      	add	r3, pc, #244	; (adr r3, 8012dc0 <GUI_Touch_Processing+0x1b20>)
 8012cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cd2:	f04f 0501 	mov.w	r5, #1
 8012cd6:	f7ed ff1f 	bl	8000b18 <__aeabi_dcmple>
 8012cda:	b900      	cbnz	r0, 8012cde <GUI_Touch_Processing+0x1a3e>
 8012cdc:	4605      	mov	r5, r0
 8012cde:	402c      	ands	r4, r5
 8012ce0:	ea18 0f04 	tst.w	r8, r4
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012ce4:	f43e ab6a 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
 8012ce8:	2f00      	cmp	r7, #0
 8012cea:	f47e aba7 	bne.w	801143c <GUI_Touch_Processing+0x19c>
 8012cee:	f7fe bb65 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8012cf2:	4b3d      	ldr	r3, [pc, #244]	; (8012de8 <GUI_Touch_Processing+0x1b48>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 8012cf4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8012cf8:	220a      	movs	r2, #10
 8012cfa:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 8012cfc:	f7ed fc2a 	bl	8000554 <__aeabi_i2d>
 8012d00:	4680      	mov	r8, r0
 8012d02:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012d06:	4689      	mov	r9, r1
 8012d08:	f7ed fc24 	bl	8000554 <__aeabi_i2d>
 8012d0c:	a32e      	add	r3, pc, #184	; (adr r3, 8012dc8 <GUI_Touch_Processing+0x1b28>)
 8012d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d12:	4604      	mov	r4, r0
 8012d14:	460d      	mov	r5, r1
 8012d16:	f04f 0701 	mov.w	r7, #1
 8012d1a:	f7ed ff07 	bl	8000b2c <__aeabi_dcmpge>
 8012d1e:	b900      	cbnz	r0, 8012d22 <GUI_Touch_Processing+0x1a82>
 8012d20:	4607      	mov	r7, r0
 8012d22:	2200      	movs	r2, #0
 8012d24:	4b31      	ldr	r3, [pc, #196]	; (8012dec <GUI_Touch_Processing+0x1b4c>)
 8012d26:	4620      	mov	r0, r4
 8012d28:	4629      	mov	r1, r5
 8012d2a:	b2ff      	uxtb	r7, r7
 8012d2c:	f04f 0601 	mov.w	r6, #1
 8012d30:	f7ed fef2 	bl	8000b18 <__aeabi_dcmple>
 8012d34:	b900      	cbnz	r0, 8012d38 <GUI_Touch_Processing+0x1a98>
 8012d36:	4606      	mov	r6, r0
 8012d38:	b2f3      	uxtb	r3, r6
 8012d3a:	9300      	str	r3, [sp, #0]
 8012d3c:	4640      	mov	r0, r8
 8012d3e:	a324      	add	r3, pc, #144	; (adr r3, 8012dd0 <GUI_Touch_Processing+0x1b30>)
 8012d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d44:	4649      	mov	r1, r9
 8012d46:	f04f 0601 	mov.w	r6, #1
 8012d4a:	f7ed feef 	bl	8000b2c <__aeabi_dcmpge>
 8012d4e:	b900      	cbnz	r0, 8012d52 <GUI_Touch_Processing+0x1ab2>
 8012d50:	4606      	mov	r6, r0
 8012d52:	a313      	add	r3, pc, #76	; (adr r3, 8012da0 <GUI_Touch_Processing+0x1b00>)
 8012d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d58:	4640      	mov	r0, r8
 8012d5a:	4649      	mov	r1, r9
 8012d5c:	f04f 0a01 	mov.w	sl, #1
 8012d60:	f7ed feda 	bl	8000b18 <__aeabi_dcmple>
 8012d64:	b900      	cbnz	r0, 8012d68 <GUI_Touch_Processing+0x1ac8>
 8012d66:	4682      	mov	sl, r0
 8012d68:	ea06 060a 	and.w	r6, r6, sl
 8012d6c:	4237      	tst	r7, r6
 8012d6e:	d047      	beq.n	8012e00 <GUI_Touch_Processing+0x1b60>
 8012d70:	9b00      	ldr	r3, [sp, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d044      	beq.n	8012e00 <GUI_Touch_Processing+0x1b60>
					GUI_screen_state = DataSet5_Screen;
 8012d76:	230b      	movs	r3, #11
 8012d78:	f88b 3000 	strb.w	r3, [fp]
 8012d7c:	f7fe bb1e 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8012d80:	99999999 	.word	0x99999999
 8012d84:	40806599 	.word	0x40806599
 8012d88:	66666666 	.word	0x66666666
 8012d8c:	4084de66 	.word	0x4084de66
 8012d90:	99999999 	.word	0x99999999
 8012d94:	4085c799 	.word	0x4085c799
 8012d98:	66666666 	.word	0x66666666
 8012d9c:	408a4066 	.word	0x408a4066
 8012da0:	66666666 	.word	0x66666666
 8012da4:	4081f866 	.word	0x4081f866
 8012da8:	33333333 	.word	0x33333333
 8012dac:	40867133 	.word	0x40867133
 8012db0:	33333333 	.word	0x33333333
 8012db4:	40053333 	.word	0x40053333
 8012db8:	00000000 	.word	0x00000000
 8012dbc:	40623800 	.word	0x40623800
 8012dc0:	99999999 	.word	0x99999999
 8012dc4:	40720d99 	.word	0x40720d99
 8012dc8:	99999999 	.word	0x99999999
 8012dcc:	4091a399 	.word	0x4091a399
 8012dd0:	33333333 	.word	0x33333333
 8012dd4:	407aff33 	.word	0x407aff33
 8012dd8:	2000527e 	.word	0x2000527e
 8012ddc:	2000527c 	.word	0x2000527c
 8012de0:	200052a6 	.word	0x200052a6
 8012de4:	2008c31d 	.word	0x2008c31d
 8012de8:	2000022a 	.word	0x2000022a
 8012dec:	4093e000 	.word	0x4093e000
 8012df0:	66666666 	.word	0x66666666
 8012df4:	408b1466 	.word	0x408b1466
 8012df8:	33333333 	.word	0x33333333
 8012dfc:	408f8d33 	.word	0x408f8d33
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=65*TS_Callib & Touch_y <=(65+54)*TS_Callib) //CIE_Lab
 8012e00:	2200      	movs	r2, #0
 8012e02:	4bbf      	ldr	r3, [pc, #764]	; (8013100 <GUI_Touch_Processing+0x1e60>)
 8012e04:	4640      	mov	r0, r8
 8012e06:	4649      	mov	r1, r9
 8012e08:	f04f 0601 	mov.w	r6, #1
 8012e0c:	f7ed fe8e 	bl	8000b2c <__aeabi_dcmpge>
 8012e10:	b900      	cbnz	r0, 8012e14 <GUI_Touch_Processing+0x1b74>
 8012e12:	4606      	mov	r6, r0
 8012e14:	a3a8      	add	r3, pc, #672	; (adr r3, 80130b8 <GUI_Touch_Processing+0x1e18>)
 8012e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1a:	4640      	mov	r0, r8
 8012e1c:	4649      	mov	r1, r9
 8012e1e:	f04f 0a01 	mov.w	sl, #1
 8012e22:	f7ed fe79 	bl	8000b18 <__aeabi_dcmple>
 8012e26:	b900      	cbnz	r0, 8012e2a <GUI_Touch_Processing+0x1b8a>
 8012e28:	4682      	mov	sl, r0
 8012e2a:	ea06 060a 	and.w	r6, r6, sl
 8012e2e:	a3a4      	add	r3, pc, #656	; (adr r3, 80130c0 <GUI_Touch_Processing+0x1e20>)
 8012e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e34:	4620      	mov	r0, r4
 8012e36:	4629      	mov	r1, r5
 8012e38:	b2f6      	uxtb	r6, r6
 8012e3a:	f04f 0a01 	mov.w	sl, #1
 8012e3e:	f7ed fe75 	bl	8000b2c <__aeabi_dcmpge>
 8012e42:	b900      	cbnz	r0, 8012e46 <GUI_Touch_Processing+0x1ba6>
 8012e44:	4682      	mov	sl, r0
 8012e46:	a3a0      	add	r3, pc, #640	; (adr r3, 80130c8 <GUI_Touch_Processing+0x1e28>)
 8012e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	4629      	mov	r1, r5
 8012e50:	f04f 0b01 	mov.w	fp, #1
 8012e54:	f7ed fe60 	bl	8000b18 <__aeabi_dcmple>
 8012e58:	b900      	cbnz	r0, 8012e5c <GUI_Touch_Processing+0x1bbc>
 8012e5a:	4683      	mov	fp, r0
 8012e5c:	ea0a 0a0b 	and.w	sl, sl, fp
 8012e60:	f01a 0f01 	tst.w	sl, #1
 8012e64:	d04c      	beq.n	8012f00 <GUI_Touch_Processing+0x1c60>
 8012e66:	2e00      	cmp	r6, #0
 8012e68:	d04a      	beq.n	8012f00 <GUI_Touch_Processing+0x1c60>
					Measure_Field ^= CIE_Lab;
 8012e6a:	4ca6      	ldr	r4, [pc, #664]	; (8013104 <GUI_Touch_Processing+0x1e64>)
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8012e6c:	4da6      	ldr	r5, [pc, #664]	; (8013108 <GUI_Touch_Processing+0x1e68>)
					Measure_Field ^= CIE_Lab;
 8012e6e:	8822      	ldrh	r2, [r4, #0]
 8012e70:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8012e74:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 8012e76:	2141      	movs	r1, #65	; 0x41
 8012e78:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8012e7c:	20c8      	movs	r0, #200	; 0xc8
 8012e7e:	f002 fd73 	bl	8015968 <GUI_CheckBox>
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8012e82:	8823      	ldrh	r3, [r4, #0]
 8012e84:	782a      	ldrb	r2, [r5, #0]
 8012e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e8a:	f002 0201 	and.w	r2, r2, #1
 8012e8e:	216c      	movs	r1, #108	; 0x6c
 8012e90:	20c8      	movs	r0, #200	; 0xc8
 8012e92:	f002 fdaa 	bl	80159ea <GUI_RadioBox>
					GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 8012e96:	8823      	ldrh	r3, [r4, #0]
 8012e98:	782a      	ldrb	r2, [r5, #0]
 8012e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e9e:	f002 0202 	and.w	r2, r2, #2
 8012ea2:	218f      	movs	r1, #143	; 0x8f
 8012ea4:	20c8      	movs	r0, #200	; 0xc8
 8012ea6:	f002 fda0 	bl	80159ea <GUI_RadioBox>
					GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 8012eaa:	8823      	ldrh	r3, [r4, #0]
 8012eac:	782a      	ldrb	r2, [r5, #0]
 8012eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012eb2:	f002 0204 	and.w	r2, r2, #4
 8012eb6:	21b2      	movs	r1, #178	; 0xb2
 8012eb8:	20c8      	movs	r0, #200	; 0xc8
 8012eba:	f002 fd96 	bl	80159ea <GUI_RadioBox>
					GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 8012ebe:	8823      	ldrh	r3, [r4, #0]
 8012ec0:	782a      	ldrb	r2, [r5, #0]
 8012ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ec6:	f002 0208 	and.w	r2, r2, #8
 8012eca:	21d5      	movs	r1, #213	; 0xd5
 8012ecc:	20c8      	movs	r0, #200	; 0xc8
 8012ece:	f002 fd8c 	bl	80159ea <GUI_RadioBox>
					GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 8012ed2:	8823      	ldrh	r3, [r4, #0]
 8012ed4:	782a      	ldrb	r2, [r5, #0]
 8012ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012eda:	f002 0210 	and.w	r2, r2, #16
 8012ede:	21f8      	movs	r1, #248	; 0xf8
 8012ee0:	20c8      	movs	r0, #200	; 0xc8
 8012ee2:	f002 fd82 	bl	80159ea <GUI_RadioBox>
					GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 8012ee6:	8823      	ldrh	r3, [r4, #0]
 8012ee8:	782a      	ldrb	r2, [r5, #0]
 8012eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012eee:	f002 0220 	and.w	r2, r2, #32
 8012ef2:	f240 111b 	movw	r1, #283	; 0x11b
 8012ef6:	20c8      	movs	r0, #200	; 0xc8
 8012ef8:	f002 fd77 	bl	80159ea <GUI_RadioBox>
 8012efc:	f7fe ba5e 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=345*TS_Callib & Touch_y <=(345+54)*TS_Callib) //EbEr
 8012f00:	a373      	add	r3, pc, #460	; (adr r3, 80130d0 <GUI_Touch_Processing+0x1e30>)
 8012f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f06:	4620      	mov	r0, r4
 8012f08:	4629      	mov	r1, r5
 8012f0a:	f04f 0a01 	mov.w	sl, #1
 8012f0e:	f7ed fe0d 	bl	8000b2c <__aeabi_dcmpge>
 8012f12:	b900      	cbnz	r0, 8012f16 <GUI_Touch_Processing+0x1c76>
 8012f14:	4682      	mov	sl, r0
 8012f16:	a370      	add	r3, pc, #448	; (adr r3, 80130d8 <GUI_Touch_Processing+0x1e38>)
 8012f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	4629      	mov	r1, r5
 8012f20:	f04f 0b01 	mov.w	fp, #1
 8012f24:	f7ed fdf8 	bl	8000b18 <__aeabi_dcmple>
 8012f28:	b900      	cbnz	r0, 8012f2c <GUI_Touch_Processing+0x1c8c>
 8012f2a:	4683      	mov	fp, r0
 8012f2c:	ea0a 0a0b 	and.w	sl, sl, fp
 8012f30:	f01a 0f01 	tst.w	sl, #1
 8012f34:	d00e      	beq.n	8012f54 <GUI_Touch_Processing+0x1cb4>
 8012f36:	b16e      	cbz	r6, 8012f54 <GUI_Touch_Processing+0x1cb4>
					Measure_Field ^= EbEr;
 8012f38:	4b72      	ldr	r3, [pc, #456]	; (8013104 <GUI_Touch_Processing+0x1e64>)
 8012f3a:	881a      	ldrh	r2, [r3, #0]
 8012f3c:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8012f40:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 345, Measure_Field&EbEr);
 8012f42:	f240 1159 	movw	r1, #345	; 0x159
 8012f46:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8012f4a:	20c8      	movs	r0, #200	; 0xc8
 8012f4c:	f002 fd0c 	bl	8015968 <GUI_CheckBox>
 8012f50:	f7fe ba34 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=108*TS_Callib & Touch_y <=(108+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_A
 8012f54:	a362      	add	r3, pc, #392	; (adr r3, 80130e0 <GUI_Touch_Processing+0x1e40>)
 8012f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	4629      	mov	r1, r5
 8012f5e:	f04f 0a01 	mov.w	sl, #1
 8012f62:	f7ed fde3 	bl	8000b2c <__aeabi_dcmpge>
 8012f66:	b900      	cbnz	r0, 8012f6a <GUI_Touch_Processing+0x1cca>
 8012f68:	4682      	mov	sl, r0
 8012f6a:	ea16 0f0a 	tst.w	r6, sl
 8012f6e:	d049      	beq.n	8013004 <GUI_Touch_Processing+0x1d64>
 8012f70:	a35d      	add	r3, pc, #372	; (adr r3, 80130e8 <GUI_Touch_Processing+0x1e48>)
 8012f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f76:	4620      	mov	r0, r4
 8012f78:	4629      	mov	r1, r5
 8012f7a:	f04f 0a01 	mov.w	sl, #1
 8012f7e:	f7ed fdcb 	bl	8000b18 <__aeabi_dcmple>
 8012f82:	b900      	cbnz	r0, 8012f86 <GUI_Touch_Processing+0x1ce6>
 8012f84:	4682      	mov	sl, r0
 8012f86:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012f8a:	d03b      	beq.n	8013004 <GUI_Touch_Processing+0x1d64>
 8012f8c:	4b5d      	ldr	r3, [pc, #372]	; (8013104 <GUI_Touch_Processing+0x1e64>)
 8012f8e:	881b      	ldrh	r3, [r3, #0]
 8012f90:	061b      	lsls	r3, r3, #24
 8012f92:	d537      	bpl.n	8013004 <GUI_Touch_Processing+0x1d64>
					if(!(Source_Type&Source_A))
 8012f94:	4d5c      	ldr	r5, [pc, #368]	; (8013108 <GUI_Touch_Processing+0x1e68>)
 8012f96:	782b      	ldrb	r3, [r5, #0]
 8012f98:	07dc      	lsls	r4, r3, #31
 8012f9a:	f53e aa0f 	bmi.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type|=Source_A, 0x01);
 8012f9e:	2401      	movs	r4, #1
 8012fa0:	4623      	mov	r3, r4
 8012fa2:	4622      	mov	r2, r4
 8012fa4:	216c      	movs	r1, #108	; 0x6c
 8012fa6:	20c8      	movs	r0, #200	; 0xc8
 8012fa8:	702c      	strb	r4, [r5, #0]
 8012faa:	f002 fd1e 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012fae:	782a      	ldrb	r2, [r5, #0]
 8012fb0:	4623      	mov	r3, r4
 8012fb2:	f002 0202 	and.w	r2, r2, #2
 8012fb6:	218f      	movs	r1, #143	; 0x8f
 8012fb8:	20c8      	movs	r0, #200	; 0xc8
 8012fba:	f002 fd16 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8012fbe:	782a      	ldrb	r2, [r5, #0]
 8012fc0:	4623      	mov	r3, r4
 8012fc2:	f002 0204 	and.w	r2, r2, #4
 8012fc6:	21b2      	movs	r1, #178	; 0xb2
 8012fc8:	20c8      	movs	r0, #200	; 0xc8
 8012fca:	f002 fd0e 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8012fce:	782a      	ldrb	r2, [r5, #0]
 8012fd0:	4623      	mov	r3, r4
 8012fd2:	f002 0208 	and.w	r2, r2, #8
 8012fd6:	21d5      	movs	r1, #213	; 0xd5
 8012fd8:	20c8      	movs	r0, #200	; 0xc8
 8012fda:	f002 fd06 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8012fde:	782a      	ldrb	r2, [r5, #0]
 8012fe0:	4623      	mov	r3, r4
 8012fe2:	f002 0210 	and.w	r2, r2, #16
 8012fe6:	21f8      	movs	r1, #248	; 0xf8
 8012fe8:	20c8      	movs	r0, #200	; 0xc8
 8012fea:	f002 fcfe 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8012fee:	782a      	ldrb	r2, [r5, #0]
 8012ff0:	4623      	mov	r3, r4
 8012ff2:	f002 0220 	and.w	r2, r2, #32
 8012ff6:	f240 111b 	movw	r1, #283	; 0x11b
 8012ffa:	20c8      	movs	r0, #200	; 0xc8
 8012ffc:	f002 fcf5 	bl	80159ea <GUI_RadioBox>
 8013000:	f7fe b9dc 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=143*TS_Callib & Touch_y <=(143+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D65
 8013004:	a33a      	add	r3, pc, #232	; (adr r3, 80130f0 <GUI_Touch_Processing+0x1e50>)
 8013006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300a:	4620      	mov	r0, r4
 801300c:	4629      	mov	r1, r5
 801300e:	f04f 0a01 	mov.w	sl, #1
 8013012:	f7ed fd8b 	bl	8000b2c <__aeabi_dcmpge>
 8013016:	b900      	cbnz	r0, 801301a <GUI_Touch_Processing+0x1d7a>
 8013018:	4682      	mov	sl, r0
 801301a:	ea16 0f0a 	tst.w	r6, sl
 801301e:	d075      	beq.n	801310c <GUI_Touch_Processing+0x1e6c>
 8013020:	a335      	add	r3, pc, #212	; (adr r3, 80130f8 <GUI_Touch_Processing+0x1e58>)
 8013022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013026:	4620      	mov	r0, r4
 8013028:	4629      	mov	r1, r5
 801302a:	f04f 0a01 	mov.w	sl, #1
 801302e:	f7ed fd73 	bl	8000b18 <__aeabi_dcmple>
 8013032:	b900      	cbnz	r0, 8013036 <GUI_Touch_Processing+0x1d96>
 8013034:	4682      	mov	sl, r0
 8013036:	f01a 0fff 	tst.w	sl, #255	; 0xff
 801303a:	d067      	beq.n	801310c <GUI_Touch_Processing+0x1e6c>
 801303c:	4b31      	ldr	r3, [pc, #196]	; (8013104 <GUI_Touch_Processing+0x1e64>)
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	0618      	lsls	r0, r3, #24
 8013042:	d563      	bpl.n	801310c <GUI_Touch_Processing+0x1e6c>
					if(!(Source_Type&Source_D65))
 8013044:	4c30      	ldr	r4, [pc, #192]	; (8013108 <GUI_Touch_Processing+0x1e68>)
 8013046:	7822      	ldrb	r2, [r4, #0]
 8013048:	f012 0202 	ands.w	r2, r2, #2
 801304c:	f47e a9b6 	bne.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8013050:	2301      	movs	r3, #1
 8013052:	216c      	movs	r1, #108	; 0x6c
 8013054:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8013056:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8013058:	f002 fcc7 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type|=Source_D65, 0x01);
 801305c:	7822      	ldrb	r2, [r4, #0]
 801305e:	2301      	movs	r3, #1
 8013060:	f042 0202 	orr.w	r2, r2, #2
 8013064:	218f      	movs	r1, #143	; 0x8f
 8013066:	20c8      	movs	r0, #200	; 0xc8
 8013068:	7022      	strb	r2, [r4, #0]
 801306a:	f002 fcbe 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 801306e:	7822      	ldrb	r2, [r4, #0]
 8013070:	2301      	movs	r3, #1
 8013072:	f002 0204 	and.w	r2, r2, #4
 8013076:	21b2      	movs	r1, #178	; 0xb2
 8013078:	20c8      	movs	r0, #200	; 0xc8
 801307a:	f002 fcb6 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 801307e:	7822      	ldrb	r2, [r4, #0]
 8013080:	2301      	movs	r3, #1
 8013082:	f002 0208 	and.w	r2, r2, #8
 8013086:	21d5      	movs	r1, #213	; 0xd5
 8013088:	20c8      	movs	r0, #200	; 0xc8
 801308a:	f002 fcae 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 801308e:	7822      	ldrb	r2, [r4, #0]
 8013090:	2301      	movs	r3, #1
 8013092:	f002 0210 	and.w	r2, r2, #16
 8013096:	21f8      	movs	r1, #248	; 0xf8
 8013098:	20c8      	movs	r0, #200	; 0xc8
 801309a:	f002 fca6 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 801309e:	7822      	ldrb	r2, [r4, #0]
 80130a0:	2301      	movs	r3, #1
 80130a2:	f002 0220 	and.w	r2, r2, #32
 80130a6:	f240 111b 	movw	r1, #283	; 0x11b
 80130aa:	20c8      	movs	r0, #200	; 0xc8
 80130ac:	f002 fc9d 	bl	80159ea <GUI_RadioBox>
 80130b0:	f7fe b984 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 80130b4:	f3af 8000 	nop.w
 80130b8:	cccccccd 	.word	0xcccccccd
 80130bc:	408508cc 	.word	0x408508cc
 80130c0:	00000000 	.word	0x00000000
 80130c4:	40658800 	.word	0x40658800
 80130c8:	99999999 	.word	0x99999999
 80130cc:	4073b599 	.word	0x4073b599
 80130d0:	00000000 	.word	0x00000000
 80130d4:	408c9200 	.word	0x408c9200
 80130d8:	66666666 	.word	0x66666666
 80130dc:	40908566 	.word	0x40908566
 80130e0:	33333333 	.word	0x33333333
 80130e4:	4071e333 	.word	0x4071e333
 80130e8:	cccccccd 	.word	0xcccccccd
 80130ec:	407ad4cc 	.word	0x407ad4cc
 80130f0:	33333333 	.word	0x33333333
 80130f4:	4077af33 	.word	0x4077af33
 80130f8:	66666666 	.word	0x66666666
 80130fc:	40805066 	.word	0x40805066
 8013100:	40809000 	.word	0x40809000
 8013104:	2000527e 	.word	0x2000527e
 8013108:	2008c321 	.word	0x2008c321
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=178*TS_Callib & Touch_y <=(178+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_C
 801310c:	a3be      	add	r3, pc, #760	; (adr r3, 8013408 <GUI_Touch_Processing+0x2168>)
 801310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013112:	4620      	mov	r0, r4
 8013114:	4629      	mov	r1, r5
 8013116:	f04f 0a01 	mov.w	sl, #1
 801311a:	f7ed fd07 	bl	8000b2c <__aeabi_dcmpge>
 801311e:	b900      	cbnz	r0, 8013122 <GUI_Touch_Processing+0x1e82>
 8013120:	4682      	mov	sl, r0
 8013122:	ea16 0f0a 	tst.w	r6, sl
 8013126:	d049      	beq.n	80131bc <GUI_Touch_Processing+0x1f1c>
 8013128:	a3b9      	add	r3, pc, #740	; (adr r3, 8013410 <GUI_Touch_Processing+0x2170>)
 801312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801312e:	4620      	mov	r0, r4
 8013130:	4629      	mov	r1, r5
 8013132:	f04f 0a01 	mov.w	sl, #1
 8013136:	f7ed fcef 	bl	8000b18 <__aeabi_dcmple>
 801313a:	b900      	cbnz	r0, 801313e <GUI_Touch_Processing+0x1e9e>
 801313c:	4682      	mov	sl, r0
 801313e:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8013142:	d03b      	beq.n	80131bc <GUI_Touch_Processing+0x1f1c>
 8013144:	4bae      	ldr	r3, [pc, #696]	; (8013400 <GUI_Touch_Processing+0x2160>)
 8013146:	881b      	ldrh	r3, [r3, #0]
 8013148:	0619      	lsls	r1, r3, #24
 801314a:	d537      	bpl.n	80131bc <GUI_Touch_Processing+0x1f1c>
					if(!(Source_Type&Source_C))
 801314c:	4cad      	ldr	r4, [pc, #692]	; (8013404 <GUI_Touch_Processing+0x2164>)
 801314e:	7822      	ldrb	r2, [r4, #0]
 8013150:	f012 0204 	ands.w	r2, r2, #4
 8013154:	f47e a932 	bne.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8013158:	2301      	movs	r3, #1
 801315a:	216c      	movs	r1, #108	; 0x6c
 801315c:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801315e:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8013160:	f002 fc43 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8013164:	7822      	ldrb	r2, [r4, #0]
 8013166:	2301      	movs	r3, #1
 8013168:	f002 0202 	and.w	r2, r2, #2
 801316c:	218f      	movs	r1, #143	; 0x8f
 801316e:	20c8      	movs	r0, #200	; 0xc8
 8013170:	f002 fc3b 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8013174:	7822      	ldrb	r2, [r4, #0]
 8013176:	2301      	movs	r3, #1
 8013178:	f042 0204 	orr.w	r2, r2, #4
 801317c:	21b2      	movs	r1, #178	; 0xb2
 801317e:	20c8      	movs	r0, #200	; 0xc8
 8013180:	7022      	strb	r2, [r4, #0]
 8013182:	f002 fc32 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8013186:	7822      	ldrb	r2, [r4, #0]
 8013188:	2301      	movs	r3, #1
 801318a:	f002 0208 	and.w	r2, r2, #8
 801318e:	21d5      	movs	r1, #213	; 0xd5
 8013190:	20c8      	movs	r0, #200	; 0xc8
 8013192:	f002 fc2a 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8013196:	7822      	ldrb	r2, [r4, #0]
 8013198:	2301      	movs	r3, #1
 801319a:	f002 0210 	and.w	r2, r2, #16
 801319e:	21f8      	movs	r1, #248	; 0xf8
 80131a0:	20c8      	movs	r0, #200	; 0xc8
 80131a2:	f002 fc22 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80131a6:	7822      	ldrb	r2, [r4, #0]
 80131a8:	2301      	movs	r3, #1
 80131aa:	f002 0220 	and.w	r2, r2, #32
 80131ae:	f240 111b 	movw	r1, #283	; 0x11b
 80131b2:	20c8      	movs	r0, #200	; 0xc8
 80131b4:	f002 fc19 	bl	80159ea <GUI_RadioBox>
 80131b8:	f7fe b900 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=213*TS_Callib & Touch_y <=(213+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D50
 80131bc:	a384      	add	r3, pc, #528	; (adr r3, 80133d0 <GUI_Touch_Processing+0x2130>)
 80131be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c2:	4620      	mov	r0, r4
 80131c4:	4629      	mov	r1, r5
 80131c6:	f04f 0a01 	mov.w	sl, #1
 80131ca:	f7ed fcaf 	bl	8000b2c <__aeabi_dcmpge>
 80131ce:	b900      	cbnz	r0, 80131d2 <GUI_Touch_Processing+0x1f32>
 80131d0:	4682      	mov	sl, r0
 80131d2:	ea16 0f0a 	tst.w	r6, sl
 80131d6:	d049      	beq.n	801326c <GUI_Touch_Processing+0x1fcc>
 80131d8:	a37f      	add	r3, pc, #508	; (adr r3, 80133d8 <GUI_Touch_Processing+0x2138>)
 80131da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131de:	4620      	mov	r0, r4
 80131e0:	4629      	mov	r1, r5
 80131e2:	f04f 0a01 	mov.w	sl, #1
 80131e6:	f7ed fc97 	bl	8000b18 <__aeabi_dcmple>
 80131ea:	b900      	cbnz	r0, 80131ee <GUI_Touch_Processing+0x1f4e>
 80131ec:	4682      	mov	sl, r0
 80131ee:	f01a 0fff 	tst.w	sl, #255	; 0xff
 80131f2:	d03b      	beq.n	801326c <GUI_Touch_Processing+0x1fcc>
 80131f4:	4b82      	ldr	r3, [pc, #520]	; (8013400 <GUI_Touch_Processing+0x2160>)
 80131f6:	881b      	ldrh	r3, [r3, #0]
 80131f8:	061a      	lsls	r2, r3, #24
 80131fa:	d537      	bpl.n	801326c <GUI_Touch_Processing+0x1fcc>
					if(!(Source_Type&Source_D50))
 80131fc:	4c81      	ldr	r4, [pc, #516]	; (8013404 <GUI_Touch_Processing+0x2164>)
 80131fe:	7822      	ldrb	r2, [r4, #0]
 8013200:	f012 0208 	ands.w	r2, r2, #8
 8013204:	f47e a8da 	bne.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8013208:	2301      	movs	r3, #1
 801320a:	216c      	movs	r1, #108	; 0x6c
 801320c:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801320e:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8013210:	f002 fbeb 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8013214:	7822      	ldrb	r2, [r4, #0]
 8013216:	2301      	movs	r3, #1
 8013218:	f002 0202 	and.w	r2, r2, #2
 801321c:	218f      	movs	r1, #143	; 0x8f
 801321e:	20c8      	movs	r0, #200	; 0xc8
 8013220:	f002 fbe3 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8013224:	7822      	ldrb	r2, [r4, #0]
 8013226:	2301      	movs	r3, #1
 8013228:	f002 0204 	and.w	r2, r2, #4
 801322c:	21b2      	movs	r1, #178	; 0xb2
 801322e:	20c8      	movs	r0, #200	; 0xc8
 8013230:	f002 fbdb 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type|=Source_D50, 0x01);
 8013234:	7822      	ldrb	r2, [r4, #0]
 8013236:	2301      	movs	r3, #1
 8013238:	f042 0208 	orr.w	r2, r2, #8
 801323c:	21d5      	movs	r1, #213	; 0xd5
 801323e:	20c8      	movs	r0, #200	; 0xc8
 8013240:	7022      	strb	r2, [r4, #0]
 8013242:	f002 fbd2 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8013246:	7822      	ldrb	r2, [r4, #0]
 8013248:	2301      	movs	r3, #1
 801324a:	f002 0210 	and.w	r2, r2, #16
 801324e:	21f8      	movs	r1, #248	; 0xf8
 8013250:	20c8      	movs	r0, #200	; 0xc8
 8013252:	f002 fbca 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8013256:	7822      	ldrb	r2, [r4, #0]
 8013258:	2301      	movs	r3, #1
 801325a:	f002 0220 	and.w	r2, r2, #32
 801325e:	f240 111b 	movw	r1, #283	; 0x11b
 8013262:	20c8      	movs	r0, #200	; 0xc8
 8013264:	f002 fbc1 	bl	80159ea <GUI_RadioBox>
 8013268:	f7fe b8a8 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=248*TS_Callib & Touch_y <=(248+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D55
 801326c:	a35c      	add	r3, pc, #368	; (adr r3, 80133e0 <GUI_Touch_Processing+0x2140>)
 801326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013272:	4620      	mov	r0, r4
 8013274:	4629      	mov	r1, r5
 8013276:	f04f 0a01 	mov.w	sl, #1
 801327a:	f7ed fc57 	bl	8000b2c <__aeabi_dcmpge>
 801327e:	b900      	cbnz	r0, 8013282 <GUI_Touch_Processing+0x1fe2>
 8013280:	4682      	mov	sl, r0
 8013282:	ea16 0f0a 	tst.w	r6, sl
 8013286:	d049      	beq.n	801331c <GUI_Touch_Processing+0x207c>
 8013288:	a357      	add	r3, pc, #348	; (adr r3, 80133e8 <GUI_Touch_Processing+0x2148>)
 801328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328e:	4620      	mov	r0, r4
 8013290:	4629      	mov	r1, r5
 8013292:	f04f 0a01 	mov.w	sl, #1
 8013296:	f7ed fc3f 	bl	8000b18 <__aeabi_dcmple>
 801329a:	b900      	cbnz	r0, 801329e <GUI_Touch_Processing+0x1ffe>
 801329c:	4682      	mov	sl, r0
 801329e:	f01a 0fff 	tst.w	sl, #255	; 0xff
 80132a2:	d03b      	beq.n	801331c <GUI_Touch_Processing+0x207c>
 80132a4:	4b56      	ldr	r3, [pc, #344]	; (8013400 <GUI_Touch_Processing+0x2160>)
 80132a6:	881b      	ldrh	r3, [r3, #0]
 80132a8:	061b      	lsls	r3, r3, #24
 80132aa:	d537      	bpl.n	801331c <GUI_Touch_Processing+0x207c>
					if(!(Source_Type&Source_D55))
 80132ac:	4c55      	ldr	r4, [pc, #340]	; (8013404 <GUI_Touch_Processing+0x2164>)
 80132ae:	7822      	ldrb	r2, [r4, #0]
 80132b0:	f012 0210 	ands.w	r2, r2, #16
 80132b4:	f47e a882 	bne.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80132b8:	2301      	movs	r3, #1
 80132ba:	216c      	movs	r1, #108	; 0x6c
 80132bc:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 80132be:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80132c0:	f002 fb93 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80132c4:	7822      	ldrb	r2, [r4, #0]
 80132c6:	2301      	movs	r3, #1
 80132c8:	f002 0202 	and.w	r2, r2, #2
 80132cc:	218f      	movs	r1, #143	; 0x8f
 80132ce:	20c8      	movs	r0, #200	; 0xc8
 80132d0:	f002 fb8b 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80132d4:	7822      	ldrb	r2, [r4, #0]
 80132d6:	2301      	movs	r3, #1
 80132d8:	f002 0204 	and.w	r2, r2, #4
 80132dc:	21b2      	movs	r1, #178	; 0xb2
 80132de:	20c8      	movs	r0, #200	; 0xc8
 80132e0:	f002 fb83 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80132e4:	7822      	ldrb	r2, [r4, #0]
 80132e6:	2301      	movs	r3, #1
 80132e8:	f002 0208 	and.w	r2, r2, #8
 80132ec:	21d5      	movs	r1, #213	; 0xd5
 80132ee:	20c8      	movs	r0, #200	; 0xc8
 80132f0:	f002 fb7b 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 80132f4:	7822      	ldrb	r2, [r4, #0]
 80132f6:	2301      	movs	r3, #1
 80132f8:	f042 0210 	orr.w	r2, r2, #16
 80132fc:	21f8      	movs	r1, #248	; 0xf8
 80132fe:	20c8      	movs	r0, #200	; 0xc8
 8013300:	7022      	strb	r2, [r4, #0]
 8013302:	f002 fb72 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8013306:	7822      	ldrb	r2, [r4, #0]
 8013308:	2301      	movs	r3, #1
 801330a:	f002 0220 	and.w	r2, r2, #32
 801330e:	f240 111b 	movw	r1, #283	; 0x11b
 8013312:	20c8      	movs	r0, #200	; 0xc8
 8013314:	f002 fb69 	bl	80159ea <GUI_RadioBox>
 8013318:	f7fe b850 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=283*TS_Callib & Touch_y <=(283+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D75
 801331c:	a334      	add	r3, pc, #208	; (adr r3, 80133f0 <GUI_Touch_Processing+0x2150>)
 801331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013322:	4620      	mov	r0, r4
 8013324:	4629      	mov	r1, r5
 8013326:	f04f 0a01 	mov.w	sl, #1
 801332a:	f7ed fbff 	bl	8000b2c <__aeabi_dcmpge>
 801332e:	b900      	cbnz	r0, 8013332 <GUI_Touch_Processing+0x2092>
 8013330:	4682      	mov	sl, r0
 8013332:	ea16 0f0a 	tst.w	r6, sl
 8013336:	d06f      	beq.n	8013418 <GUI_Touch_Processing+0x2178>
 8013338:	a32f      	add	r3, pc, #188	; (adr r3, 80133f8 <GUI_Touch_Processing+0x2158>)
 801333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333e:	4620      	mov	r0, r4
 8013340:	4629      	mov	r1, r5
 8013342:	f04f 0601 	mov.w	r6, #1
 8013346:	f7ed fbe7 	bl	8000b18 <__aeabi_dcmple>
 801334a:	b900      	cbnz	r0, 801334e <GUI_Touch_Processing+0x20ae>
 801334c:	4606      	mov	r6, r0
 801334e:	f016 0fff 	tst.w	r6, #255	; 0xff
 8013352:	d061      	beq.n	8013418 <GUI_Touch_Processing+0x2178>
 8013354:	4b2a      	ldr	r3, [pc, #168]	; (8013400 <GUI_Touch_Processing+0x2160>)
 8013356:	881b      	ldrh	r3, [r3, #0]
 8013358:	0618      	lsls	r0, r3, #24
 801335a:	d55d      	bpl.n	8013418 <GUI_Touch_Processing+0x2178>
					if(!(Source_Type&Source_D75))
 801335c:	4c29      	ldr	r4, [pc, #164]	; (8013404 <GUI_Touch_Processing+0x2164>)
 801335e:	7822      	ldrb	r2, [r4, #0]
 8013360:	f012 0220 	ands.w	r2, r2, #32
 8013364:	f47e a82a 	bne.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8013368:	2301      	movs	r3, #1
 801336a:	216c      	movs	r1, #108	; 0x6c
 801336c:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801336e:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8013370:	f002 fb3b 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8013374:	7822      	ldrb	r2, [r4, #0]
 8013376:	2301      	movs	r3, #1
 8013378:	f002 0202 	and.w	r2, r2, #2
 801337c:	218f      	movs	r1, #143	; 0x8f
 801337e:	20c8      	movs	r0, #200	; 0xc8
 8013380:	f002 fb33 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8013384:	7822      	ldrb	r2, [r4, #0]
 8013386:	2301      	movs	r3, #1
 8013388:	f002 0204 	and.w	r2, r2, #4
 801338c:	21b2      	movs	r1, #178	; 0xb2
 801338e:	20c8      	movs	r0, #200	; 0xc8
 8013390:	f002 fb2b 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8013394:	7822      	ldrb	r2, [r4, #0]
 8013396:	2301      	movs	r3, #1
 8013398:	f002 0208 	and.w	r2, r2, #8
 801339c:	21d5      	movs	r1, #213	; 0xd5
 801339e:	20c8      	movs	r0, #200	; 0xc8
 80133a0:	f002 fb23 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80133a4:	7822      	ldrb	r2, [r4, #0]
 80133a6:	2301      	movs	r3, #1
 80133a8:	f002 0210 	and.w	r2, r2, #16
 80133ac:	21f8      	movs	r1, #248	; 0xf8
 80133ae:	20c8      	movs	r0, #200	; 0xc8
 80133b0:	f002 fb1b 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 80133b4:	7822      	ldrb	r2, [r4, #0]
 80133b6:	2301      	movs	r3, #1
 80133b8:	f042 0220 	orr.w	r2, r2, #32
 80133bc:	f240 111b 	movw	r1, #283	; 0x11b
 80133c0:	20c8      	movs	r0, #200	; 0xc8
 80133c2:	7022      	strb	r2, [r4, #0]
 80133c4:	f002 fb11 	bl	80159ea <GUI_RadioBox>
 80133c8:	f7fd bff8 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 80133cc:	f3af 8000 	nop.w
 80133d0:	99999999 	.word	0x99999999
 80133d4:	4081a399 	.word	0x4081a399
 80133d8:	66666666 	.word	0x66666666
 80133dc:	40861c66 	.word	0x40861c66
 80133e0:	99999999 	.word	0x99999999
 80133e4:	40848999 	.word	0x40848999
 80133e8:	66666666 	.word	0x66666666
 80133ec:	40890266 	.word	0x40890266
 80133f0:	99999999 	.word	0x99999999
 80133f4:	40876f99 	.word	0x40876f99
 80133f8:	66666666 	.word	0x66666666
 80133fc:	408be866 	.word	0x408be866
 8013400:	2000527e 	.word	0x2000527e
 8013404:	2008c321 	.word	0x2008c321
 8013408:	33333333 	.word	0x33333333
 801340c:	407d7b33 	.word	0x407d7b33
 8013410:	66666666 	.word	0x66666666
 8013414:	40833666 	.word	0x40833666
 8013418:	9b00      	ldr	r3, [sp, #0]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 801341a:	4640      	mov	r0, r8
 801341c:	ea07 0503 	and.w	r5, r7, r3
 8013420:	4649      	mov	r1, r9
 8013422:	a3c1      	add	r3, pc, #772	; (adr r3, 8013728 <GUI_Touch_Processing+0x2488>)
 8013424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013428:	f04f 0401 	mov.w	r4, #1
 801342c:	f7ed fb7e 	bl	8000b2c <__aeabi_dcmpge>
 8013430:	b900      	cbnz	r0, 8013434 <GUI_Touch_Processing+0x2194>
 8013432:	4604      	mov	r4, r0
 8013434:	a3c8      	add	r3, pc, #800	; (adr r3, 8013758 <GUI_Touch_Processing+0x24b8>)
 8013436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801343a:	4640      	mov	r0, r8
 801343c:	4649      	mov	r1, r9
 801343e:	f04f 0601 	mov.w	r6, #1
 8013442:	f7ed fb69 	bl	8000b18 <__aeabi_dcmple>
 8013446:	b900      	cbnz	r0, 801344a <GUI_Touch_Processing+0x21aa>
 8013448:	4606      	mov	r6, r0
 801344a:	ea04 0306 	and.w	r3, r4, r6
 801344e:	07d9      	lsls	r1, r3, #31
 8013450:	d502      	bpl.n	8013458 <GUI_Touch_Processing+0x21b8>
 8013452:	2d00      	cmp	r5, #0
 8013454:	f47e af6f 	bne.w	8012336 <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8013458:	a3c1      	add	r3, pc, #772	; (adr r3, 8013760 <GUI_Touch_Processing+0x24c0>)
 801345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801345e:	4640      	mov	r0, r8
 8013460:	4649      	mov	r1, r9
 8013462:	f04f 0401 	mov.w	r4, #1
 8013466:	f7ed fb61 	bl	8000b2c <__aeabi_dcmpge>
 801346a:	b900      	cbnz	r0, 801346e <GUI_Touch_Processing+0x21ce>
 801346c:	4604      	mov	r4, r0
 801346e:	a3a6      	add	r3, pc, #664	; (adr r3, 8013708 <GUI_Touch_Processing+0x2468>)
 8013470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013474:	4640      	mov	r0, r8
 8013476:	4649      	mov	r1, r9
 8013478:	f04f 0601 	mov.w	r6, #1
 801347c:	f7ed fb4c 	bl	8000b18 <__aeabi_dcmple>
 8013480:	b900      	cbnz	r0, 8013484 <GUI_Touch_Processing+0x21e4>
 8013482:	4606      	mov	r6, r0
 8013484:	ea04 0306 	and.w	r3, r4, r6
 8013488:	07da      	lsls	r2, r3, #31
 801348a:	d523      	bpl.n	80134d4 <GUI_Touch_Processing+0x2234>
 801348c:	b315      	cbz	r5, 80134d4 <GUI_Touch_Processing+0x2234>
					WriteSDFLASH_t(sdfile_cnt);
 801348e:	4bb6      	ldr	r3, [pc, #728]	; (8013768 <GUI_Touch_Processing+0x24c8>)
 8013490:	2100      	movs	r1, #0
 8013492:	8818      	ldrh	r0, [r3, #0]
 8013494:	f009 f822 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8013498:	4bb4      	ldr	r3, [pc, #720]	; (801376c <GUI_Touch_Processing+0x24cc>)
 801349a:	781a      	ldrb	r2, [r3, #0]
 801349c:	4bb4      	ldr	r3, [pc, #720]	; (8013770 <GUI_Touch_Processing+0x24d0>)
					switch (Prev_Inf_Screen){
 801349e:	1e51      	subs	r1, r2, #1
 80134a0:	2905      	cmp	r1, #5
 80134a2:	d804      	bhi.n	80134ae <GUI_Touch_Processing+0x220e>
 80134a4:	e8df f001 	tbb	[pc, r1]
 80134a8:	0a030306 	.word	0x0a030306
 80134ac:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 80134ae:	701a      	strb	r2, [r3, #0]
 80134b0:	f7fd bf84 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80134b4:	2201      	movs	r2, #1
 80134b6:	701a      	strb	r2, [r3, #0]
 80134b8:	f7fd bf80 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80134bc:	2204      	movs	r2, #4
 80134be:	701a      	strb	r2, [r3, #0]
 80134c0:	f7fd bf7c 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80134c4:	2206      	movs	r2, #6
 80134c6:	701a      	strb	r2, [r3, #0]
 80134c8:	f7fd bf78 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80134cc:	2205      	movs	r2, #5
 80134ce:	701a      	strb	r2, [r3, #0]
 80134d0:	f7fd bf74 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80134d4:	a38c      	add	r3, pc, #560	; (adr r3, 8013708 <GUI_Touch_Processing+0x2468>)
 80134d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134da:	4640      	mov	r0, r8
 80134dc:	4649      	mov	r1, r9
 80134de:	f04f 0401 	mov.w	r4, #1
 80134e2:	f7ed fb23 	bl	8000b2c <__aeabi_dcmpge>
 80134e6:	b900      	cbnz	r0, 80134ea <GUI_Touch_Processing+0x224a>
 80134e8:	4604      	mov	r4, r0
 80134ea:	a389      	add	r3, pc, #548	; (adr r3, 8013710 <GUI_Touch_Processing+0x2470>)
 80134ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f0:	4640      	mov	r0, r8
 80134f2:	4649      	mov	r1, r9
 80134f4:	f04f 0501 	mov.w	r5, #1
 80134f8:	f7ed fb0e 	bl	8000b18 <__aeabi_dcmple>
 80134fc:	b900      	cbnz	r0, 8013500 <GUI_Touch_Processing+0x2260>
 80134fe:	4605      	mov	r5, r0
 8013500:	402c      	ands	r4, r5
 8013502:	4227      	tst	r7, r4
 8013504:	f7ff b9cb 	b.w	801289e <GUI_Touch_Processing+0x15fe>
					preGUI_screen_state = GUI_screen_state;
 8013508:	4b9a      	ldr	r3, [pc, #616]	; (8013774 <GUI_Touch_Processing+0x24d4>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 801350a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 801350e:	220b      	movs	r2, #11
 8013510:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8013512:	f7ed f81f 	bl	8000554 <__aeabi_i2d>
 8013516:	4604      	mov	r4, r0
 8013518:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801351c:	460d      	mov	r5, r1
 801351e:	f7ed f819 	bl	8000554 <__aeabi_i2d>
 8013522:	a37d      	add	r3, pc, #500	; (adr r3, 8013718 <GUI_Touch_Processing+0x2478>)
 8013524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013528:	e9cd 0100 	strd	r0, r1, [sp]
 801352c:	f04f 0801 	mov.w	r8, #1
 8013530:	f7ed fafc 	bl	8000b2c <__aeabi_dcmpge>
 8013534:	b900      	cbnz	r0, 8013538 <GUI_Touch_Processing+0x2298>
 8013536:	4680      	mov	r8, r0
 8013538:	2200      	movs	r2, #0
 801353a:	4b8f      	ldr	r3, [pc, #572]	; (8013778 <GUI_Touch_Processing+0x24d8>)
 801353c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013540:	fa5f f888 	uxtb.w	r8, r8
 8013544:	f04f 0701 	mov.w	r7, #1
 8013548:	f7ed fae6 	bl	8000b18 <__aeabi_dcmple>
 801354c:	b900      	cbnz	r0, 8013550 <GUI_Touch_Processing+0x22b0>
 801354e:	4607      	mov	r7, r0
 8013550:	a373      	add	r3, pc, #460	; (adr r3, 8013720 <GUI_Touch_Processing+0x2480>)
 8013552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013556:	4620      	mov	r0, r4
 8013558:	4629      	mov	r1, r5
 801355a:	b2ff      	uxtb	r7, r7
 801355c:	f04f 0601 	mov.w	r6, #1
 8013560:	f7ed fae4 	bl	8000b2c <__aeabi_dcmpge>
 8013564:	b900      	cbnz	r0, 8013568 <GUI_Touch_Processing+0x22c8>
 8013566:	4606      	mov	r6, r0
 8013568:	a36f      	add	r3, pc, #444	; (adr r3, 8013728 <GUI_Touch_Processing+0x2488>)
 801356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356e:	4620      	mov	r0, r4
 8013570:	4629      	mov	r1, r5
 8013572:	f04f 0901 	mov.w	r9, #1
 8013576:	f7ed facf 	bl	8000b18 <__aeabi_dcmple>
 801357a:	b900      	cbnz	r0, 801357e <GUI_Touch_Processing+0x22de>
 801357c:	4681      	mov	r9, r0
 801357e:	ea06 0609 	and.w	r6, r6, r9
 8013582:	ea18 0f06 	tst.w	r8, r6
 8013586:	d005      	beq.n	8013594 <GUI_Touch_Processing+0x22f4>
 8013588:	b127      	cbz	r7, 8013594 <GUI_Touch_Processing+0x22f4>
					GUI_screen_state = DataSet1_Screen;
 801358a:	2307      	movs	r3, #7
 801358c:	f88b 3000 	strb.w	r3, [fp]
 8013590:	f7fd bf14 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //EbEr
 8013594:	2200      	movs	r2, #0
 8013596:	4b79      	ldr	r3, [pc, #484]	; (801377c <GUI_Touch_Processing+0x24dc>)
 8013598:	4620      	mov	r0, r4
 801359a:	4629      	mov	r1, r5
 801359c:	f04f 0601 	mov.w	r6, #1
 80135a0:	f7ed fac4 	bl	8000b2c <__aeabi_dcmpge>
 80135a4:	b900      	cbnz	r0, 80135a8 <GUI_Touch_Processing+0x2308>
 80135a6:	4606      	mov	r6, r0
 80135a8:	a361      	add	r3, pc, #388	; (adr r3, 8013730 <GUI_Touch_Processing+0x2490>)
 80135aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ae:	4620      	mov	r0, r4
 80135b0:	4629      	mov	r1, r5
 80135b2:	f04f 0901 	mov.w	r9, #1
 80135b6:	f7ed faaf 	bl	8000b18 <__aeabi_dcmple>
 80135ba:	b900      	cbnz	r0, 80135be <GUI_Touch_Processing+0x231e>
 80135bc:	4681      	mov	r9, r0
 80135be:	ea06 0609 	and.w	r6, r6, r9
 80135c2:	a35d      	add	r3, pc, #372	; (adr r3, 8013738 <GUI_Touch_Processing+0x2498>)
 80135c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135cc:	b2f6      	uxtb	r6, r6
 80135ce:	f04f 0901 	mov.w	r9, #1
 80135d2:	f7ed faab 	bl	8000b2c <__aeabi_dcmpge>
 80135d6:	b900      	cbnz	r0, 80135da <GUI_Touch_Processing+0x233a>
 80135d8:	4681      	mov	r9, r0
 80135da:	a359      	add	r3, pc, #356	; (adr r3, 8013740 <GUI_Touch_Processing+0x24a0>)
 80135dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135e4:	f04f 0a01 	mov.w	sl, #1
 80135e8:	f7ed fa96 	bl	8000b18 <__aeabi_dcmple>
 80135ec:	b900      	cbnz	r0, 80135f0 <GUI_Touch_Processing+0x2350>
 80135ee:	4682      	mov	sl, r0
 80135f0:	ea09 090a 	and.w	r9, r9, sl
 80135f4:	f019 0f01 	tst.w	r9, #1
 80135f8:	d00d      	beq.n	8013616 <GUI_Touch_Processing+0x2376>
 80135fa:	b166      	cbz	r6, 8013616 <GUI_Touch_Processing+0x2376>
					Measure_Field ^= lambda_d;
 80135fc:	4b60      	ldr	r3, [pc, #384]	; (8013780 <GUI_Touch_Processing+0x24e0>)
 80135fe:	881a      	ldrh	r2, [r3, #0]
 8013600:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8013604:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 8013606:	2146      	movs	r1, #70	; 0x46
 8013608:	f402 7200 	and.w	r2, r2, #512	; 0x200
 801360c:	20c8      	movs	r0, #200	; 0xc8
 801360e:	f002 f9ab 	bl	8015968 <GUI_CheckBox>
 8013612:	f7fd bed3 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib) //EbEr
 8013616:	a34c      	add	r3, pc, #304	; (adr r3, 8013748 <GUI_Touch_Processing+0x24a8>)
 8013618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801361c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013620:	f04f 0901 	mov.w	r9, #1
 8013624:	f7ed fa82 	bl	8000b2c <__aeabi_dcmpge>
 8013628:	b900      	cbnz	r0, 801362c <GUI_Touch_Processing+0x238c>
 801362a:	4681      	mov	r9, r0
 801362c:	a348      	add	r3, pc, #288	; (adr r3, 8013750 <GUI_Touch_Processing+0x24b0>)
 801362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013632:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013636:	f04f 0a01 	mov.w	sl, #1
 801363a:	f7ed fa6d 	bl	8000b18 <__aeabi_dcmple>
 801363e:	b900      	cbnz	r0, 8013642 <GUI_Touch_Processing+0x23a2>
 8013640:	4682      	mov	sl, r0
 8013642:	ea09 090a 	and.w	r9, r9, sl
 8013646:	f019 0f01 	tst.w	r9, #1
 801364a:	d00d      	beq.n	8013668 <GUI_Touch_Processing+0x23c8>
 801364c:	b166      	cbz	r6, 8013668 <GUI_Touch_Processing+0x23c8>
					Measure_Field ^= SP_measure;
 801364e:	4b4c      	ldr	r3, [pc, #304]	; (8013780 <GUI_Touch_Processing+0x24e0>)
 8013650:	881a      	ldrh	r2, [r3, #0]
 8013652:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8013656:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&SP_measure);
 8013658:	21c6      	movs	r1, #198	; 0xc6
 801365a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801365e:	20c8      	movs	r0, #200	; 0xc8
 8013660:	f002 f982 	bl	8015968 <GUI_CheckBox>
 8013664:	f7fd beaa 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013668:	a32f      	add	r3, pc, #188	; (adr r3, 8013728 <GUI_Touch_Processing+0x2488>)
 801366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366e:	4620      	mov	r0, r4
 8013670:	4629      	mov	r1, r5
 8013672:	ea08 0607 	and.w	r6, r8, r7
 8013676:	f04f 0901 	mov.w	r9, #1
 801367a:	f7ed fa57 	bl	8000b2c <__aeabi_dcmpge>
 801367e:	b900      	cbnz	r0, 8013682 <GUI_Touch_Processing+0x23e2>
 8013680:	4681      	mov	r9, r0
 8013682:	a335      	add	r3, pc, #212	; (adr r3, 8013758 <GUI_Touch_Processing+0x24b8>)
 8013684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013688:	4620      	mov	r0, r4
 801368a:	4629      	mov	r1, r5
 801368c:	f04f 0a01 	mov.w	sl, #1
 8013690:	f7ed fa42 	bl	8000b18 <__aeabi_dcmple>
 8013694:	b900      	cbnz	r0, 8013698 <GUI_Touch_Processing+0x23f8>
 8013696:	4682      	mov	sl, r0
 8013698:	ea09 030a 	and.w	r3, r9, sl
 801369c:	07db      	lsls	r3, r3, #31
 801369e:	d502      	bpl.n	80136a6 <GUI_Touch_Processing+0x2406>
 80136a0:	2e00      	cmp	r6, #0
 80136a2:	f47e ae48 	bne.w	8012336 <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 80136a6:	a32e      	add	r3, pc, #184	; (adr r3, 8013760 <GUI_Touch_Processing+0x24c0>)
 80136a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ac:	4620      	mov	r0, r4
 80136ae:	4629      	mov	r1, r5
 80136b0:	f04f 0901 	mov.w	r9, #1
 80136b4:	f7ed fa3a 	bl	8000b2c <__aeabi_dcmpge>
 80136b8:	b900      	cbnz	r0, 80136bc <GUI_Touch_Processing+0x241c>
 80136ba:	4681      	mov	r9, r0
 80136bc:	a312      	add	r3, pc, #72	; (adr r3, 8013708 <GUI_Touch_Processing+0x2468>)
 80136be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c2:	4620      	mov	r0, r4
 80136c4:	4629      	mov	r1, r5
 80136c6:	f04f 0a01 	mov.w	sl, #1
 80136ca:	f7ed fa25 	bl	8000b18 <__aeabi_dcmple>
 80136ce:	b900      	cbnz	r0, 80136d2 <GUI_Touch_Processing+0x2432>
 80136d0:	4682      	mov	sl, r0
 80136d2:	ea09 030a 	and.w	r3, r9, sl
 80136d6:	07d8      	lsls	r0, r3, #31
 80136d8:	f141 8018 	bpl.w	801470c <GUI_Touch_Processing+0x346c>
 80136dc:	2e00      	cmp	r6, #0
 80136de:	f001 8015 	beq.w	801470c <GUI_Touch_Processing+0x346c>
					WriteSDFLASH_t(sdfile_cnt);
 80136e2:	4b21      	ldr	r3, [pc, #132]	; (8013768 <GUI_Touch_Processing+0x24c8>)
 80136e4:	2100      	movs	r1, #0
 80136e6:	8818      	ldrh	r0, [r3, #0]
 80136e8:	f008 fef8 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80136ec:	4b1f      	ldr	r3, [pc, #124]	; (801376c <GUI_Touch_Processing+0x24cc>)
 80136ee:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80136f0:	1e5a      	subs	r2, r3, #1
 80136f2:	2a05      	cmp	r2, #5
 80136f4:	d804      	bhi.n	8013700 <GUI_Touch_Processing+0x2460>
 80136f6:	e8df f002 	tbb	[pc, r2]
 80136fa:	0345      	.short	0x0345
 80136fc:	4f544a03 	.word	0x4f544a03
					GUI_screen_state = Prev_Inf_Screen;
 8013700:	f88b 3000 	strb.w	r3, [fp]
 8013704:	f7fd be5a 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8013708:	00000000 	.word	0x00000000
 801370c:	40623800 	.word	0x40623800
 8013710:	99999999 	.word	0x99999999
 8013714:	40720d99 	.word	0x40720d99
 8013718:	99999999 	.word	0x99999999
 801371c:	4091a399 	.word	0x4091a399
 8013720:	33333333 	.word	0x33333333
 8013724:	407aff33 	.word	0x407aff33
 8013728:	66666666 	.word	0x66666666
 801372c:	4081f866 	.word	0x4081f866
 8013730:	cccccccd 	.word	0xcccccccd
 8013734:	408508cc 	.word	0x408508cc
 8013738:	00000000 	.word	0x00000000
 801373c:	40673000 	.word	0x40673000
 8013740:	99999999 	.word	0x99999999
 8013744:	40748999 	.word	0x40748999
 8013748:	99999999 	.word	0x99999999
 801374c:	40806599 	.word	0x40806599
 8013750:	66666666 	.word	0x66666666
 8013754:	4084de66 	.word	0x4084de66
 8013758:	33333333 	.word	0x33333333
 801375c:	40867133 	.word	0x40867133
 8013760:	33333333 	.word	0x33333333
 8013764:	40053333 	.word	0x40053333
 8013768:	200052a6 	.word	0x200052a6
 801376c:	2008c31d 	.word	0x2008c31d
 8013770:	20005279 	.word	0x20005279
 8013774:	2000022a 	.word	0x2000022a
 8013778:	4093e000 	.word	0x4093e000
 801377c:	40809000 	.word	0x40809000
 8013780:	2000527e 	.word	0x2000527e
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013784:	2301      	movs	r3, #1
 8013786:	f88b 3000 	strb.w	r3, [fp]
 801378a:	f7fd be17 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801378e:	2304      	movs	r3, #4
 8013790:	f88b 3000 	strb.w	r3, [fp]
 8013794:	f7fd be12 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013798:	2306      	movs	r3, #6
 801379a:	f88b 3000 	strb.w	r3, [fp]
 801379e:	f7fd be0d 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80137a2:	2305      	movs	r3, #5
 80137a4:	f88b 3000 	strb.w	r3, [fp]
 80137a8:	f7fd be08 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 80137ac:	4ba4      	ldr	r3, [pc, #656]	; (8013a40 <GUI_Touch_Processing+0x27a0>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80137ae:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 80137b2:	220c      	movs	r2, #12
 80137b4:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80137b6:	f7ec fecd 	bl	8000554 <__aeabi_i2d>
 80137ba:	4604      	mov	r4, r0
 80137bc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80137c0:	460d      	mov	r5, r1
 80137c2:	f7ec fec7 	bl	8000554 <__aeabi_i2d>
 80137c6:	a386      	add	r3, pc, #536	; (adr r3, 80139e0 <GUI_Touch_Processing+0x2740>)
 80137c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137cc:	4606      	mov	r6, r0
 80137ce:	460f      	mov	r7, r1
 80137d0:	f04f 0801 	mov.w	r8, #1
 80137d4:	f7ed f9aa 	bl	8000b2c <__aeabi_dcmpge>
 80137d8:	b900      	cbnz	r0, 80137dc <GUI_Touch_Processing+0x253c>
 80137da:	4680      	mov	r8, r0
 80137dc:	fa5f f388 	uxtb.w	r3, r8
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	2200      	movs	r2, #0
 80137e4:	4b97      	ldr	r3, [pc, #604]	; (8013a44 <GUI_Touch_Processing+0x27a4>)
 80137e6:	4630      	mov	r0, r6
 80137e8:	4639      	mov	r1, r7
 80137ea:	f04f 0801 	mov.w	r8, #1
 80137ee:	f7ed f993 	bl	8000b18 <__aeabi_dcmple>
 80137f2:	b900      	cbnz	r0, 80137f6 <GUI_Touch_Processing+0x2556>
 80137f4:	4680      	mov	r8, r0
 80137f6:	fa5f f388 	uxtb.w	r3, r8
 80137fa:	9303      	str	r3, [sp, #12]
 80137fc:	4620      	mov	r0, r4
 80137fe:	a37a      	add	r3, pc, #488	; (adr r3, 80139e8 <GUI_Touch_Processing+0x2748>)
 8013800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013804:	4629      	mov	r1, r5
 8013806:	f04f 0801 	mov.w	r8, #1
 801380a:	f7ed f98f 	bl	8000b2c <__aeabi_dcmpge>
 801380e:	b900      	cbnz	r0, 8013812 <GUI_Touch_Processing+0x2572>
 8013810:	4680      	mov	r8, r0
 8013812:	a377      	add	r3, pc, #476	; (adr r3, 80139f0 <GUI_Touch_Processing+0x2750>)
 8013814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013818:	4620      	mov	r0, r4
 801381a:	4629      	mov	r1, r5
 801381c:	f04f 0901 	mov.w	r9, #1
 8013820:	f7ed f97a 	bl	8000b18 <__aeabi_dcmple>
 8013824:	b900      	cbnz	r0, 8013828 <GUI_Touch_Processing+0x2588>
 8013826:	4681      	mov	r9, r0
 8013828:	9b00      	ldr	r3, [sp, #0]
 801382a:	ea08 0809 	and.w	r8, r8, r9
 801382e:	ea13 0f08 	tst.w	r3, r8
 8013832:	d006      	beq.n	8013842 <GUI_Touch_Processing+0x25a2>
 8013834:	9b03      	ldr	r3, [sp, #12]
 8013836:	b123      	cbz	r3, 8013842 <GUI_Touch_Processing+0x25a2>
					GUI_screen_state = GraphSet2_Screen;
 8013838:	230d      	movs	r3, #13
 801383a:	f88b 3000 	strb.w	r3, [fp]
 801383e:	f7fd bdbd 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8013842:	a36d      	add	r3, pc, #436	; (adr r3, 80139f8 <GUI_Touch_Processing+0x2758>)
 8013844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013848:	4620      	mov	r0, r4
 801384a:	4629      	mov	r1, r5
 801384c:	f04f 0801 	mov.w	r8, #1
 8013850:	f7ed f96c 	bl	8000b2c <__aeabi_dcmpge>
 8013854:	b900      	cbnz	r0, 8013858 <GUI_Touch_Processing+0x25b8>
 8013856:	4680      	mov	r8, r0
 8013858:	a369      	add	r3, pc, #420	; (adr r3, 8013a00 <GUI_Touch_Processing+0x2760>)
 801385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385e:	4620      	mov	r0, r4
 8013860:	4629      	mov	r1, r5
 8013862:	f04f 0901 	mov.w	r9, #1
 8013866:	f7ed f957 	bl	8000b18 <__aeabi_dcmple>
 801386a:	b900      	cbnz	r0, 801386e <GUI_Touch_Processing+0x25ce>
 801386c:	4681      	mov	r9, r0
 801386e:	ea08 0809 	and.w	r8, r8, r9
 8013872:	a365      	add	r3, pc, #404	; (adr r3, 8013a08 <GUI_Touch_Processing+0x2768>)
 8013874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013878:	4630      	mov	r0, r6
 801387a:	4639      	mov	r1, r7
 801387c:	fa5f f888 	uxtb.w	r8, r8
 8013880:	f04f 0901 	mov.w	r9, #1
 8013884:	f7ed f952 	bl	8000b2c <__aeabi_dcmpge>
 8013888:	b900      	cbnz	r0, 801388c <GUI_Touch_Processing+0x25ec>
 801388a:	4681      	mov	r9, r0
 801388c:	a360      	add	r3, pc, #384	; (adr r3, 8013a10 <GUI_Touch_Processing+0x2770>)
 801388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013892:	4630      	mov	r0, r6
 8013894:	4639      	mov	r1, r7
 8013896:	f04f 0a01 	mov.w	sl, #1
 801389a:	f7ed f93d 	bl	8000b18 <__aeabi_dcmple>
 801389e:	b900      	cbnz	r0, 80138a2 <GUI_Touch_Processing+0x2602>
 80138a0:	4682      	mov	sl, r0
 80138a2:	ea09 090a 	and.w	r9, r9, sl
 80138a6:	f019 0f01 	tst.w	r9, #1
 80138aa:	d028      	beq.n	80138fe <GUI_Touch_Processing+0x265e>
 80138ac:	f1b8 0f00 	cmp.w	r8, #0
 80138b0:	d025      	beq.n	80138fe <GUI_Touch_Processing+0x265e>
					Mode_EL = !Mode_EL;
 80138b2:	4c65      	ldr	r4, [pc, #404]	; (8013a48 <GUI_Touch_Processing+0x27a8>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80138b4:	4b65      	ldr	r3, [pc, #404]	; (8013a4c <GUI_Touch_Processing+0x27ac>)
					Mode_EL = !Mode_EL;
 80138b6:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80138b8:	4865      	ldr	r0, [pc, #404]	; (8013a50 <GUI_Touch_Processing+0x27b0>)
					Mode_EL = !Mode_EL;
 80138ba:	2a00      	cmp	r2, #0
 80138bc:	bf0c      	ite	eq
 80138be:	2201      	moveq	r2, #1
 80138c0:	2200      	movne	r2, #0
 80138c2:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80138c4:	bf18      	it	ne
 80138c6:	4618      	movne	r0, r3
 80138c8:	4a62      	ldr	r2, [pc, #392]	; (8013a54 <GUI_Touch_Processing+0x27b4>)
 80138ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80138ce:	f7fb fd43 	bl	800f358 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80138d2:	7822      	ldrb	r2, [r4, #0]
 80138d4:	4b60      	ldr	r3, [pc, #384]	; (8013a58 <GUI_Touch_Processing+0x27b8>)
 80138d6:	b982      	cbnz	r2, 80138fa <GUI_Touch_Processing+0x265a>
 80138d8:	4a60      	ldr	r2, [pc, #384]	; (8013a5c <GUI_Touch_Processing+0x27bc>)
 80138da:	edd2 0a00 	vldr	s1, [r2]
 80138de:	ed93 0a00 	vldr	s0, [r3]
 80138e2:	f008 fd69 	bl	801c3b8 <Rabs_calc_Factor2_Settings_change>
 80138e6:	4b5e      	ldr	r3, [pc, #376]	; (8013a60 <GUI_Touch_Processing+0x27c0>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80138e8:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80138ea:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80138ee:	21ca      	movs	r1, #202	; 0xca
 80138f0:	20b6      	movs	r0, #182	; 0xb6
 80138f2:	f002 f903 	bl	8015afc <GUI_Switch_ButtonActive>
 80138f6:	f7fd bd61 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80138fa:	4a5a      	ldr	r2, [pc, #360]	; (8013a64 <GUI_Touch_Processing+0x27c4>)
 80138fc:	e7ed      	b.n	80138da <GUI_Touch_Processing+0x263a>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 80138fe:	a346      	add	r3, pc, #280	; (adr r3, 8013a18 <GUI_Touch_Processing+0x2778>)
 8013900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013904:	4630      	mov	r0, r6
 8013906:	4639      	mov	r1, r7
 8013908:	f04f 0901 	mov.w	r9, #1
 801390c:	f7ed f90e 	bl	8000b2c <__aeabi_dcmpge>
 8013910:	b900      	cbnz	r0, 8013914 <GUI_Touch_Processing+0x2674>
 8013912:	4681      	mov	r9, r0
 8013914:	a342      	add	r3, pc, #264	; (adr r3, 8013a20 <GUI_Touch_Processing+0x2780>)
 8013916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391a:	4630      	mov	r0, r6
 801391c:	4639      	mov	r1, r7
 801391e:	f04f 0a01 	mov.w	sl, #1
 8013922:	f7ed f8f9 	bl	8000b18 <__aeabi_dcmple>
 8013926:	b900      	cbnz	r0, 801392a <GUI_Touch_Processing+0x268a>
 8013928:	4682      	mov	sl, r0
 801392a:	ea09 090a 	and.w	r9, r9, sl
 801392e:	f019 0f01 	tst.w	r9, #1
 8013932:	d011      	beq.n	8013958 <GUI_Touch_Processing+0x26b8>
 8013934:	f1b8 0f00 	cmp.w	r8, #0
 8013938:	d00e      	beq.n	8013958 <GUI_Touch_Processing+0x26b8>
					Bluetooth = !Bluetooth;
 801393a:	4b4b      	ldr	r3, [pc, #300]	; (8013a68 <GUI_Touch_Processing+0x27c8>)
 801393c:	781a      	ldrb	r2, [r3, #0]
 801393e:	fab2 f282 	clz	r2, r2
 8013942:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 8013944:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8013948:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 801394a:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 801394c:	f002 f87c 	bl	8015a48 <GUI_Switch_Button>
					GUI_Up_Panel();
 8013950:	f7fc f96e 	bl	800fc30 <GUI_Up_Panel>
 8013954:	f7fd bd32 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //PPF_Bands
 8013958:	2200      	movs	r2, #0
 801395a:	4b44      	ldr	r3, [pc, #272]	; (8013a6c <GUI_Touch_Processing+0x27cc>)
 801395c:	4620      	mov	r0, r4
 801395e:	4629      	mov	r1, r5
 8013960:	f04f 0901 	mov.w	r9, #1
 8013964:	f7ed f8e2 	bl	8000b2c <__aeabi_dcmpge>
 8013968:	b900      	cbnz	r0, 801396c <GUI_Touch_Processing+0x26cc>
 801396a:	4681      	mov	r9, r0
 801396c:	a32e      	add	r3, pc, #184	; (adr r3, 8013a28 <GUI_Touch_Processing+0x2788>)
 801396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013972:	4620      	mov	r0, r4
 8013974:	4629      	mov	r1, r5
 8013976:	f04f 0801 	mov.w	r8, #1
 801397a:	f7ed f8cd 	bl	8000b18 <__aeabi_dcmple>
 801397e:	b900      	cbnz	r0, 8013982 <GUI_Touch_Processing+0x26e2>
 8013980:	4680      	mov	r8, r0
 8013982:	a32b      	add	r3, pc, #172	; (adr r3, 8013a30 <GUI_Touch_Processing+0x2790>)
 8013984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013988:	4630      	mov	r0, r6
 801398a:	4639      	mov	r1, r7
 801398c:	ea09 0808 	and.w	r8, r9, r8
 8013990:	f04f 0901 	mov.w	r9, #1
 8013994:	f7ed f8ca 	bl	8000b2c <__aeabi_dcmpge>
 8013998:	b900      	cbnz	r0, 801399c <GUI_Touch_Processing+0x26fc>
 801399a:	4681      	mov	r9, r0
 801399c:	ea08 0809 	and.w	r8, r8, r9
 80139a0:	f018 0f01 	tst.w	r8, #1
 80139a4:	d066      	beq.n	8013a74 <GUI_Touch_Processing+0x27d4>
 80139a6:	a324      	add	r3, pc, #144	; (adr r3, 8013a38 <GUI_Touch_Processing+0x2798>)
 80139a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ac:	4630      	mov	r0, r6
 80139ae:	4639      	mov	r1, r7
 80139b0:	f04f 0801 	mov.w	r8, #1
 80139b4:	f7ed f8b0 	bl	8000b18 <__aeabi_dcmple>
 80139b8:	b900      	cbnz	r0, 80139bc <GUI_Touch_Processing+0x271c>
 80139ba:	4680      	mov	r8, r0
 80139bc:	f018 0fff 	tst.w	r8, #255	; 0xff
 80139c0:	d058      	beq.n	8013a74 <GUI_Touch_Processing+0x27d4>
					Graph_Field ^= PPF_Bands;
 80139c2:	4b2b      	ldr	r3, [pc, #172]	; (8013a70 <GUI_Touch_Processing+0x27d0>)
 80139c4:	781a      	ldrb	r2, [r3, #0]
 80139c6:	f082 0201 	eor.w	r2, r2, #1
 80139ca:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 80139cc:	f240 1147 	movw	r1, #327	; 0x147
 80139d0:	f002 0201 	and.w	r2, r2, #1
 80139d4:	20c8      	movs	r0, #200	; 0xc8
 80139d6:	f001 ffc7 	bl	8015968 <GUI_CheckBox>
 80139da:	f7fd bcef 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 80139de:	bf00      	nop
 80139e0:	99999999 	.word	0x99999999
 80139e4:	4091a399 	.word	0x4091a399
 80139e8:	33333333 	.word	0x33333333
 80139ec:	407aff33 	.word	0x407aff33
 80139f0:	66666666 	.word	0x66666666
 80139f4:	4081f866 	.word	0x4081f866
 80139f8:	cccccccd 	.word	0xcccccccd
 80139fc:	407e24cc 	.word	0x407e24cc
 8013a00:	33333333 	.word	0x33333333
 8013a04:	40838b33 	.word	0x40838b33
 8013a08:	66666666 	.word	0x66666666
 8013a0c:	4080ba66 	.word	0x4080ba66
 8013a10:	33333333 	.word	0x33333333
 8013a14:	40853333 	.word	0x40853333
 8013a18:	99999999 	.word	0x99999999
 8013a1c:	40863199 	.word	0x40863199
 8013a20:	66666666 	.word	0x66666666
 8013a24:	408aaa66 	.word	0x408aaa66
 8013a28:	cccccccd 	.word	0xcccccccd
 8013a2c:	408508cc 	.word	0x408508cc
 8013a30:	66666666 	.word	0x66666666
 8013a34:	408b1466 	.word	0x408b1466
 8013a38:	33333333 	.word	0x33333333
 8013a3c:	408f8d33 	.word	0x408f8d33
 8013a40:	2000022a 	.word	0x2000022a
 8013a44:	4093e000 	.word	0x4093e000
 8013a48:	20000a48 	.word	0x20000a48
 8013a4c:	08101838 	.word	0x08101838
 8013a50:	08100838 	.word	0x08100838
 8013a54:	2004d1e8 	.word	0x2004d1e8
 8013a58:	200055d4 	.word	0x200055d4
 8013a5c:	200055d0 	.word	0x200055d0
 8013a60:	200055dc 	.word	0x200055dc
 8013a64:	200055cc 	.word	0x200055cc
 8013a68:	2008c322 	.word	0x2008c322
 8013a6c:	40809000 	.word	0x40809000
 8013a70:	2000527a 	.word	0x2000527a
 8013a74:	9b00      	ldr	r3, [sp, #0]
 8013a76:	9a03      	ldr	r2, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013a78:	4620      	mov	r0, r4
 8013a7a:	ea03 0802 	and.w	r8, r3, r2
 8013a7e:	4629      	mov	r1, r5
 8013a80:	a3c7      	add	r3, pc, #796	; (adr r3, 8013da0 <GUI_Touch_Processing+0x2b00>)
 8013a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a86:	f04f 0901 	mov.w	r9, #1
 8013a8a:	f7ed f84f 	bl	8000b2c <__aeabi_dcmpge>
 8013a8e:	b900      	cbnz	r0, 8013a92 <GUI_Touch_Processing+0x27f2>
 8013a90:	4681      	mov	r9, r0
 8013a92:	a3d1      	add	r3, pc, #836	; (adr r3, 8013dd8 <GUI_Touch_Processing+0x2b38>)
 8013a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	4629      	mov	r1, r5
 8013a9c:	f04f 0a01 	mov.w	sl, #1
 8013aa0:	f7ed f83a 	bl	8000b18 <__aeabi_dcmple>
 8013aa4:	b900      	cbnz	r0, 8013aa8 <GUI_Touch_Processing+0x2808>
 8013aa6:	4682      	mov	sl, r0
 8013aa8:	ea09 030a 	and.w	r3, r9, sl
 8013aac:	07d9      	lsls	r1, r3, #31
 8013aae:	d503      	bpl.n	8013ab8 <GUI_Touch_Processing+0x2818>
 8013ab0:	f1b8 0f00 	cmp.w	r8, #0
 8013ab4:	f47e ac3f 	bne.w	8012336 <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8013ab8:	a3c9      	add	r3, pc, #804	; (adr r3, 8013de0 <GUI_Touch_Processing+0x2b40>)
 8013aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013abe:	4620      	mov	r0, r4
 8013ac0:	4629      	mov	r1, r5
 8013ac2:	f04f 0901 	mov.w	r9, #1
 8013ac6:	f7ed f831 	bl	8000b2c <__aeabi_dcmpge>
 8013aca:	b900      	cbnz	r0, 8013ace <GUI_Touch_Processing+0x282e>
 8013acc:	4681      	mov	r9, r0
 8013ace:	a3a2      	add	r3, pc, #648	; (adr r3, 8013d58 <GUI_Touch_Processing+0x2ab8>)
 8013ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	f04f 0a01 	mov.w	sl, #1
 8013adc:	f7ed f81c 	bl	8000b18 <__aeabi_dcmple>
 8013ae0:	b900      	cbnz	r0, 8013ae4 <GUI_Touch_Processing+0x2844>
 8013ae2:	4682      	mov	sl, r0
 8013ae4:	ea09 030a 	and.w	r3, r9, sl
 8013ae8:	07da      	lsls	r2, r3, #31
 8013aea:	d529      	bpl.n	8013b40 <GUI_Touch_Processing+0x28a0>
 8013aec:	f1b8 0f00 	cmp.w	r8, #0
 8013af0:	d026      	beq.n	8013b40 <GUI_Touch_Processing+0x28a0>
					WriteSDFLASH_t(sdfile_cnt);
 8013af2:	4bb1      	ldr	r3, [pc, #708]	; (8013db8 <GUI_Touch_Processing+0x2b18>)
 8013af4:	2100      	movs	r1, #0
 8013af6:	8818      	ldrh	r0, [r3, #0]
 8013af8:	f008 fcf0 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8013afc:	4baf      	ldr	r3, [pc, #700]	; (8013dbc <GUI_Touch_Processing+0x2b1c>)
 8013afe:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8013b00:	1e5a      	subs	r2, r3, #1
 8013b02:	2a05      	cmp	r2, #5
 8013b04:	d804      	bhi.n	8013b10 <GUI_Touch_Processing+0x2870>
 8013b06:	e8df f002 	tbb	[pc, r2]
 8013b0a:	0307      	.short	0x0307
 8013b0c:	11160c03 	.word	0x11160c03
					GUI_screen_state = Prev_Inf_Screen;
 8013b10:	f88b 3000 	strb.w	r3, [fp]
 8013b14:	f7fd bc52 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	f88b 3000 	strb.w	r3, [fp]
 8013b1e:	f7fd bc4d 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8013b22:	2304      	movs	r3, #4
 8013b24:	f88b 3000 	strb.w	r3, [fp]
 8013b28:	f7fd bc48 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013b2c:	2306      	movs	r3, #6
 8013b2e:	f88b 3000 	strb.w	r3, [fp]
 8013b32:	f7fd bc43 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8013b36:	2305      	movs	r3, #5
 8013b38:	f88b 3000 	strb.w	r3, [fp]
 8013b3c:	f7fd bc3e 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8013b40:	a385      	add	r3, pc, #532	; (adr r3, 8013d58 <GUI_Touch_Processing+0x2ab8>)
 8013b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b46:	4620      	mov	r0, r4
 8013b48:	4629      	mov	r1, r5
 8013b4a:	f04f 0901 	mov.w	r9, #1
 8013b4e:	f7ec ffed 	bl	8000b2c <__aeabi_dcmpge>
 8013b52:	b900      	cbnz	r0, 8013b56 <GUI_Touch_Processing+0x28b6>
 8013b54:	4681      	mov	r9, r0
 8013b56:	a382      	add	r3, pc, #520	; (adr r3, 8013d60 <GUI_Touch_Processing+0x2ac0>)
 8013b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	4629      	mov	r1, r5
 8013b60:	f04f 0a01 	mov.w	sl, #1
 8013b64:	f7ec ffd8 	bl	8000b18 <__aeabi_dcmple>
 8013b68:	b900      	cbnz	r0, 8013b6c <GUI_Touch_Processing+0x28cc>
 8013b6a:	4682      	mov	sl, r0
 8013b6c:	ea09 030a 	and.w	r3, r9, sl
 8013b70:	07db      	lsls	r3, r3, #31
 8013b72:	d503      	bpl.n	8013b7c <GUI_Touch_Processing+0x28dc>
 8013b74:	f1b8 0f00 	cmp.w	r8, #0
 8013b78:	f47d ac60 	bne.w	801143c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8013b7c:	a37a      	add	r3, pc, #488	; (adr r3, 8013d68 <GUI_Touch_Processing+0x2ac8>)
 8013b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b82:	4620      	mov	r0, r4
 8013b84:	4629      	mov	r1, r5
 8013b86:	f04f 0801 	mov.w	r8, #1
 8013b8a:	f7ec ffcf 	bl	8000b2c <__aeabi_dcmpge>
 8013b8e:	b900      	cbnz	r0, 8013b92 <GUI_Touch_Processing+0x28f2>
 8013b90:	4680      	mov	r8, r0
 8013b92:	a377      	add	r3, pc, #476	; (adr r3, 8013d70 <GUI_Touch_Processing+0x2ad0>)
 8013b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b98:	4620      	mov	r0, r4
 8013b9a:	4629      	mov	r1, r5
 8013b9c:	f04f 0901 	mov.w	r9, #1
 8013ba0:	f7ec ffba 	bl	8000b18 <__aeabi_dcmple>
 8013ba4:	b900      	cbnz	r0, 8013ba8 <GUI_Touch_Processing+0x2908>
 8013ba6:	4681      	mov	r9, r0
 8013ba8:	ea08 0409 	and.w	r4, r8, r9
 8013bac:	2200      	movs	r2, #0
 8013bae:	4b84      	ldr	r3, [pc, #528]	; (8013dc0 <GUI_Touch_Processing+0x2b20>)
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	4639      	mov	r1, r7
 8013bb4:	b2e4      	uxtb	r4, r4
 8013bb6:	f04f 0501 	mov.w	r5, #1
 8013bba:	f7ec ffb7 	bl	8000b2c <__aeabi_dcmpge>
 8013bbe:	b900      	cbnz	r0, 8013bc2 <GUI_Touch_Processing+0x2922>
 8013bc0:	4605      	mov	r5, r0
 8013bc2:	a36d      	add	r3, pc, #436	; (adr r3, 8013d78 <GUI_Touch_Processing+0x2ad8>)
 8013bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc8:	4630      	mov	r0, r6
 8013bca:	4639      	mov	r1, r7
 8013bcc:	f04f 0801 	mov.w	r8, #1
 8013bd0:	f7ec ffa2 	bl	8000b18 <__aeabi_dcmple>
 8013bd4:	b900      	cbnz	r0, 8013bd8 <GUI_Touch_Processing+0x2938>
 8013bd6:	4680      	mov	r8, r0
 8013bd8:	ea05 0508 	and.w	r5, r5, r8
 8013bdc:	07e8      	lsls	r0, r5, #31
 8013bde:	d510      	bpl.n	8013c02 <GUI_Touch_Processing+0x2962>
 8013be0:	b17c      	cbz	r4, 8013c02 <GUI_Touch_Processing+0x2962>
					if (Language_status == Ru) Language_status=En;
 8013be2:	4b78      	ldr	r3, [pc, #480]	; (8013dc4 <GUI_Touch_Processing+0x2b24>)
 8013be4:	781b      	ldrb	r3, [r3, #0]
 8013be6:	b923      	cbnz	r3, 8013bf2 <GUI_Touch_Processing+0x2952>
 8013be8:	4b76      	ldr	r3, [pc, #472]	; (8013dc4 <GUI_Touch_Processing+0x2b24>)
 8013bea:	2201      	movs	r2, #1
 8013bec:	701a      	strb	r2, [r3, #0]
 8013bee:	f7fd bbe5 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					else if (Language_status == En) Language_status=Ru;
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	f47d abe2 	bne.w	80113bc <GUI_Touch_Processing+0x11c>
 8013bf8:	4b72      	ldr	r3, [pc, #456]	; (8013dc4 <GUI_Touch_Processing+0x2b24>)
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	701a      	strb	r2, [r3, #0]
 8013bfe:	f7fd bbdd 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 8013c02:	a35f      	add	r3, pc, #380	; (adr r3, 8013d80 <GUI_Touch_Processing+0x2ae0>)
 8013c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c08:	4630      	mov	r0, r6
 8013c0a:	4639      	mov	r1, r7
 8013c0c:	f04f 0501 	mov.w	r5, #1
 8013c10:	f7ec ff8c 	bl	8000b2c <__aeabi_dcmpge>
 8013c14:	b900      	cbnz	r0, 8013c18 <GUI_Touch_Processing+0x2978>
 8013c16:	4605      	mov	r5, r0
 8013c18:	a35b      	add	r3, pc, #364	; (adr r3, 8013d88 <GUI_Touch_Processing+0x2ae8>)
 8013c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1e:	4630      	mov	r0, r6
 8013c20:	4639      	mov	r1, r7
 8013c22:	f04f 0801 	mov.w	r8, #1
 8013c26:	f7ec ff77 	bl	8000b18 <__aeabi_dcmple>
 8013c2a:	b900      	cbnz	r0, 8013c2e <GUI_Touch_Processing+0x298e>
 8013c2c:	4680      	mov	r8, r0
 8013c2e:	ea05 0508 	and.w	r5, r5, r8
 8013c32:	07e9      	lsls	r1, r5, #31
 8013c34:	f57d abc2 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
 8013c38:	2c00      	cmp	r4, #0
 8013c3a:	f43d abbf 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
					GUI_screen_state = Information_Screen;
 8013c3e:	2311      	movs	r3, #17
 8013c40:	f88b 3000 	strb.w	r3, [fp]
 8013c44:	f7fd bbba 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8013c48:	4b5f      	ldr	r3, [pc, #380]	; (8013dc8 <GUI_Touch_Processing+0x2b28>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013c4a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8013c4e:	220d      	movs	r2, #13
 8013c50:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013c52:	f7ec fc7f 	bl	8000554 <__aeabi_i2d>
 8013c56:	4604      	mov	r4, r0
 8013c58:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8013c5c:	460d      	mov	r5, r1
 8013c5e:	f7ec fc79 	bl	8000554 <__aeabi_i2d>
 8013c62:	a34b      	add	r3, pc, #300	; (adr r3, 8013d90 <GUI_Touch_Processing+0x2af0>)
 8013c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c68:	e9cd 0100 	strd	r0, r1, [sp]
 8013c6c:	f04f 0801 	mov.w	r8, #1
 8013c70:	f7ec ff5c 	bl	8000b2c <__aeabi_dcmpge>
 8013c74:	b900      	cbnz	r0, 8013c78 <GUI_Touch_Processing+0x29d8>
 8013c76:	4680      	mov	r8, r0
 8013c78:	2200      	movs	r2, #0
 8013c7a:	4b54      	ldr	r3, [pc, #336]	; (8013dcc <GUI_Touch_Processing+0x2b2c>)
 8013c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c80:	fa5f f888 	uxtb.w	r8, r8
 8013c84:	f04f 0701 	mov.w	r7, #1
 8013c88:	f7ec ff46 	bl	8000b18 <__aeabi_dcmple>
 8013c8c:	b900      	cbnz	r0, 8013c90 <GUI_Touch_Processing+0x29f0>
 8013c8e:	4607      	mov	r7, r0
 8013c90:	a341      	add	r3, pc, #260	; (adr r3, 8013d98 <GUI_Touch_Processing+0x2af8>)
 8013c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c96:	4620      	mov	r0, r4
 8013c98:	4629      	mov	r1, r5
 8013c9a:	b2ff      	uxtb	r7, r7
 8013c9c:	f04f 0601 	mov.w	r6, #1
 8013ca0:	f7ec ff44 	bl	8000b2c <__aeabi_dcmpge>
 8013ca4:	b900      	cbnz	r0, 8013ca8 <GUI_Touch_Processing+0x2a08>
 8013ca6:	4606      	mov	r6, r0
 8013ca8:	a33d      	add	r3, pc, #244	; (adr r3, 8013da0 <GUI_Touch_Processing+0x2b00>)
 8013caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cae:	4620      	mov	r0, r4
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	f04f 0901 	mov.w	r9, #1
 8013cb6:	f7ec ff2f 	bl	8000b18 <__aeabi_dcmple>
 8013cba:	b900      	cbnz	r0, 8013cbe <GUI_Touch_Processing+0x2a1e>
 8013cbc:	4681      	mov	r9, r0
 8013cbe:	ea06 0609 	and.w	r6, r6, r9
 8013cc2:	ea18 0f06 	tst.w	r8, r6
 8013cc6:	d005      	beq.n	8013cd4 <GUI_Touch_Processing+0x2a34>
 8013cc8:	b127      	cbz	r7, 8013cd4 <GUI_Touch_Processing+0x2a34>
					GUI_screen_state = GraphSet1_Screen;
 8013cca:	230c      	movs	r3, #12
 8013ccc:	f88b 3000 	strb.w	r3, [fp]
 8013cd0:	f7fd bb74 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //PPF_Bands
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	4b3e      	ldr	r3, [pc, #248]	; (8013dd0 <GUI_Touch_Processing+0x2b30>)
 8013cd8:	4620      	mov	r0, r4
 8013cda:	4629      	mov	r1, r5
 8013cdc:	f04f 0601 	mov.w	r6, #1
 8013ce0:	f7ec ff24 	bl	8000b2c <__aeabi_dcmpge>
 8013ce4:	b900      	cbnz	r0, 8013ce8 <GUI_Touch_Processing+0x2a48>
 8013ce6:	4606      	mov	r6, r0
 8013ce8:	a32f      	add	r3, pc, #188	; (adr r3, 8013da8 <GUI_Touch_Processing+0x2b08>)
 8013cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cee:	4620      	mov	r0, r4
 8013cf0:	4629      	mov	r1, r5
 8013cf2:	f04f 0901 	mov.w	r9, #1
 8013cf6:	f7ec ff0f 	bl	8000b18 <__aeabi_dcmple>
 8013cfa:	b900      	cbnz	r0, 8013cfe <GUI_Touch_Processing+0x2a5e>
 8013cfc:	4681      	mov	r9, r0
 8013cfe:	ea06 0609 	and.w	r6, r6, r9
 8013d02:	a32b      	add	r3, pc, #172	; (adr r3, 8013db0 <GUI_Touch_Processing+0x2b10>)
 8013d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d0c:	b2f6      	uxtb	r6, r6
 8013d0e:	f04f 0901 	mov.w	r9, #1
 8013d12:	f7ec ff0b 	bl	8000b2c <__aeabi_dcmpge>
 8013d16:	b900      	cbnz	r0, 8013d1a <GUI_Touch_Processing+0x2a7a>
 8013d18:	4681      	mov	r9, r0
 8013d1a:	a319      	add	r3, pc, #100	; (adr r3, 8013d80 <GUI_Touch_Processing+0x2ae0>)
 8013d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d24:	f04f 0a01 	mov.w	sl, #1
 8013d28:	f7ec fef6 	bl	8000b18 <__aeabi_dcmple>
 8013d2c:	b900      	cbnz	r0, 8013d30 <GUI_Touch_Processing+0x2a90>
 8013d2e:	4682      	mov	sl, r0
 8013d30:	ea09 090a 	and.w	r9, r9, sl
 8013d34:	f019 0f01 	tst.w	r9, #1
 8013d38:	d056      	beq.n	8013de8 <GUI_Touch_Processing+0x2b48>
 8013d3a:	2e00      	cmp	r6, #0
 8013d3c:	d054      	beq.n	8013de8 <GUI_Touch_Processing+0x2b48>
					Graph_Field ^= EbEr_graph;
 8013d3e:	4b25      	ldr	r3, [pc, #148]	; (8013dd4 <GUI_Touch_Processing+0x2b34>)
 8013d40:	781a      	ldrb	r2, [r3, #0]
 8013d42:	f082 0202 	eor.w	r2, r2, #2
 8013d46:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8013d48:	2146      	movs	r1, #70	; 0x46
 8013d4a:	f002 0202 	and.w	r2, r2, #2
 8013d4e:	20c8      	movs	r0, #200	; 0xc8
 8013d50:	f001 fe0a 	bl	8015968 <GUI_CheckBox>
 8013d54:	f7fd bb32 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8013d58:	00000000 	.word	0x00000000
 8013d5c:	40623800 	.word	0x40623800
 8013d60:	99999999 	.word	0x99999999
 8013d64:	40720d99 	.word	0x40720d99
 8013d68:	33333333 	.word	0x33333333
 8013d6c:	40353333 	.word	0x40353333
 8013d70:	00000000 	.word	0x00000000
 8013d74:	4084b400 	.word	0x4084b400
 8013d78:	00000000 	.word	0x00000000
 8013d7c:	4073e000 	.word	0x4073e000
 8013d80:	99999999 	.word	0x99999999
 8013d84:	40748999 	.word	0x40748999
 8013d88:	99999999 	.word	0x99999999
 8013d8c:	407cd199 	.word	0x407cd199
 8013d90:	99999999 	.word	0x99999999
 8013d94:	4091a399 	.word	0x4091a399
 8013d98:	33333333 	.word	0x33333333
 8013d9c:	407aff33 	.word	0x407aff33
 8013da0:	66666666 	.word	0x66666666
 8013da4:	4081f866 	.word	0x4081f866
 8013da8:	cccccccd 	.word	0xcccccccd
 8013dac:	408508cc 	.word	0x408508cc
 8013db0:	00000000 	.word	0x00000000
 8013db4:	40673000 	.word	0x40673000
 8013db8:	200052a6 	.word	0x200052a6
 8013dbc:	2008c31d 	.word	0x2008c31d
 8013dc0:	406a8000 	.word	0x406a8000
 8013dc4:	2000527b 	.word	0x2000527b
 8013dc8:	2000022a 	.word	0x2000022a
 8013dcc:	4093e000 	.word	0x4093e000
 8013dd0:	40809000 	.word	0x40809000
 8013dd4:	2000527a 	.word	0x2000527a
 8013dd8:	33333333 	.word	0x33333333
 8013ddc:	40867133 	.word	0x40867133
 8013de0:	33333333 	.word	0x33333333
 8013de4:	40053333 	.word	0x40053333
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //PPF_Bands
 8013de8:	a3d1      	add	r3, pc, #836	; (adr r3, 8014130 <GUI_Touch_Processing+0x2e90>)
 8013dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013df2:	f04f 0901 	mov.w	r9, #1
 8013df6:	f7ec fe99 	bl	8000b2c <__aeabi_dcmpge>
 8013dfa:	b900      	cbnz	r0, 8013dfe <GUI_Touch_Processing+0x2b5e>
 8013dfc:	4681      	mov	r9, r0
 8013dfe:	a3ce      	add	r3, pc, #824	; (adr r3, 8014138 <GUI_Touch_Processing+0x2e98>)
 8013e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e08:	f04f 0a01 	mov.w	sl, #1
 8013e0c:	f7ec fe84 	bl	8000b18 <__aeabi_dcmple>
 8013e10:	b900      	cbnz	r0, 8013e14 <GUI_Touch_Processing+0x2b74>
 8013e12:	4682      	mov	sl, r0
 8013e14:	ea09 090a 	and.w	r9, r9, sl
 8013e18:	f019 0f01 	tst.w	r9, #1
 8013e1c:	d00d      	beq.n	8013e3a <GUI_Touch_Processing+0x2b9a>
 8013e1e:	b166      	cbz	r6, 8013e3a <GUI_Touch_Processing+0x2b9a>
					Graph_Field ^= V_lambda;
 8013e20:	4bb5      	ldr	r3, [pc, #724]	; (80140f8 <GUI_Touch_Processing+0x2e58>)
 8013e22:	781a      	ldrb	r2, [r3, #0]
 8013e24:	f082 0204 	eor.w	r2, r2, #4
 8013e28:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8013e2a:	2185      	movs	r1, #133	; 0x85
 8013e2c:	f002 0204 	and.w	r2, r2, #4
 8013e30:	20c8      	movs	r0, #200	; 0xc8
 8013e32:	f001 fd99 	bl	8015968 <GUI_CheckBox>
 8013e36:	f7fd bac1 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013e3a:	a397      	add	r3, pc, #604	; (adr r3, 8014098 <GUI_Touch_Processing+0x2df8>)
 8013e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e40:	4620      	mov	r0, r4
 8013e42:	4629      	mov	r1, r5
 8013e44:	ea08 0607 	and.w	r6, r8, r7
 8013e48:	f04f 0901 	mov.w	r9, #1
 8013e4c:	f7ec fe6e 	bl	8000b2c <__aeabi_dcmpge>
 8013e50:	b900      	cbnz	r0, 8013e54 <GUI_Touch_Processing+0x2bb4>
 8013e52:	4681      	mov	r9, r0
 8013e54:	a392      	add	r3, pc, #584	; (adr r3, 80140a0 <GUI_Touch_Processing+0x2e00>)
 8013e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	4629      	mov	r1, r5
 8013e5e:	f04f 0a01 	mov.w	sl, #1
 8013e62:	f7ec fe59 	bl	8000b18 <__aeabi_dcmple>
 8013e66:	b900      	cbnz	r0, 8013e6a <GUI_Touch_Processing+0x2bca>
 8013e68:	4682      	mov	sl, r0
 8013e6a:	ea09 030a 	and.w	r3, r9, sl
 8013e6e:	07da      	lsls	r2, r3, #31
 8013e70:	d502      	bpl.n	8013e78 <GUI_Touch_Processing+0x2bd8>
 8013e72:	2e00      	cmp	r6, #0
 8013e74:	f47e aa5f 	bne.w	8012336 <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8013e78:	a38b      	add	r3, pc, #556	; (adr r3, 80140a8 <GUI_Touch_Processing+0x2e08>)
 8013e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7e:	4620      	mov	r0, r4
 8013e80:	4629      	mov	r1, r5
 8013e82:	f04f 0901 	mov.w	r9, #1
 8013e86:	f7ec fe51 	bl	8000b2c <__aeabi_dcmpge>
 8013e8a:	b900      	cbnz	r0, 8013e8e <GUI_Touch_Processing+0x2bee>
 8013e8c:	4681      	mov	r9, r0
 8013e8e:	a388      	add	r3, pc, #544	; (adr r3, 80140b0 <GUI_Touch_Processing+0x2e10>)
 8013e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e94:	4620      	mov	r0, r4
 8013e96:	4629      	mov	r1, r5
 8013e98:	f04f 0a01 	mov.w	sl, #1
 8013e9c:	f7ec fe3c 	bl	8000b18 <__aeabi_dcmple>
 8013ea0:	b900      	cbnz	r0, 8013ea4 <GUI_Touch_Processing+0x2c04>
 8013ea2:	4682      	mov	sl, r0
 8013ea4:	ea09 030a 	and.w	r3, r9, sl
 8013ea8:	07db      	lsls	r3, r3, #31
 8013eaa:	f140 842f 	bpl.w	801470c <GUI_Touch_Processing+0x346c>
 8013eae:	2e00      	cmp	r6, #0
 8013eb0:	f000 842c 	beq.w	801470c <GUI_Touch_Processing+0x346c>
					WriteSDFLASH_t(sdfile_cnt);
 8013eb4:	4b91      	ldr	r3, [pc, #580]	; (80140fc <GUI_Touch_Processing+0x2e5c>)
 8013eb6:	2100      	movs	r1, #0
 8013eb8:	8818      	ldrh	r0, [r3, #0]
 8013eba:	f008 fb0f 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8013ebe:	4b90      	ldr	r3, [pc, #576]	; (8014100 <GUI_Touch_Processing+0x2e60>)
 8013ec0:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8013ec2:	1e5a      	subs	r2, r3, #1
 8013ec4:	2a05      	cmp	r2, #5
 8013ec6:	d804      	bhi.n	8013ed2 <GUI_Touch_Processing+0x2c32>
 8013ec8:	e8df f002 	tbb	[pc, r2]
 8013ecc:	0c030307 	.word	0x0c030307
 8013ed0:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 8013ed2:	f88b 3000 	strb.w	r3, [fp]
 8013ed6:	f7fd ba71 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013eda:	2301      	movs	r3, #1
 8013edc:	f88b 3000 	strb.w	r3, [fp]
 8013ee0:	f7fd ba6c 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8013ee4:	2304      	movs	r3, #4
 8013ee6:	f88b 3000 	strb.w	r3, [fp]
 8013eea:	f7fd ba67 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013eee:	2306      	movs	r3, #6
 8013ef0:	f88b 3000 	strb.w	r3, [fp]
 8013ef4:	f7fd ba62 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8013ef8:	2305      	movs	r3, #5
 8013efa:	f88b 3000 	strb.w	r3, [fp]
 8013efe:	f7fd ba5d 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8013f02:	4b80      	ldr	r3, [pc, #512]	; (8014104 <GUI_Touch_Processing+0x2e64>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013f04:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8013f08:	220e      	movs	r2, #14
 8013f0a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013f0c:	f7ec fb22 	bl	8000554 <__aeabi_i2d>
 8013f10:	4604      	mov	r4, r0
 8013f12:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8013f16:	460d      	mov	r5, r1
 8013f18:	f7ec fb1c 	bl	8000554 <__aeabi_i2d>
 8013f1c:	a366      	add	r3, pc, #408	; (adr r3, 80140b8 <GUI_Touch_Processing+0x2e18>)
 8013f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f22:	e9cd 0100 	strd	r0, r1, [sp]
 8013f26:	f04f 0a01 	mov.w	sl, #1
 8013f2a:	f7ec fdff 	bl	8000b2c <__aeabi_dcmpge>
 8013f2e:	b900      	cbnz	r0, 8013f32 <GUI_Touch_Processing+0x2c92>
 8013f30:	4682      	mov	sl, r0
 8013f32:	2200      	movs	r2, #0
 8013f34:	4b74      	ldr	r3, [pc, #464]	; (8014108 <GUI_Touch_Processing+0x2e68>)
 8013f36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f3a:	fa5f fa8a 	uxtb.w	sl, sl
 8013f3e:	f04f 0601 	mov.w	r6, #1
 8013f42:	f7ec fde9 	bl	8000b18 <__aeabi_dcmple>
 8013f46:	b900      	cbnz	r0, 8013f4a <GUI_Touch_Processing+0x2caa>
 8013f48:	4606      	mov	r6, r0
 8013f4a:	b2f3      	uxtb	r3, r6
 8013f4c:	9303      	str	r3, [sp, #12]
 8013f4e:	4620      	mov	r0, r4
 8013f50:	a35b      	add	r3, pc, #364	; (adr r3, 80140c0 <GUI_Touch_Processing+0x2e20>)
 8013f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f56:	4629      	mov	r1, r5
 8013f58:	f04f 0601 	mov.w	r6, #1
 8013f5c:	f7ec fde6 	bl	8000b2c <__aeabi_dcmpge>
 8013f60:	b900      	cbnz	r0, 8013f64 <GUI_Touch_Processing+0x2cc4>
 8013f62:	4606      	mov	r6, r0
 8013f64:	a34c      	add	r3, pc, #304	; (adr r3, 8014098 <GUI_Touch_Processing+0x2df8>)
 8013f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6a:	4620      	mov	r0, r4
 8013f6c:	4629      	mov	r1, r5
 8013f6e:	f04f 0701 	mov.w	r7, #1
 8013f72:	f7ec fdd1 	bl	8000b18 <__aeabi_dcmple>
 8013f76:	b900      	cbnz	r0, 8013f7a <GUI_Touch_Processing+0x2cda>
 8013f78:	4607      	mov	r7, r0
 8013f7a:	403e      	ands	r6, r7
 8013f7c:	ea1a 0f06 	tst.w	sl, r6
 8013f80:	d006      	beq.n	8013f90 <GUI_Touch_Processing+0x2cf0>
 8013f82:	9b03      	ldr	r3, [sp, #12]
 8013f84:	b123      	cbz	r3, 8013f90 <GUI_Touch_Processing+0x2cf0>
					GUI_screen_state = ColorSet2_Screen;
 8013f86:	230f      	movs	r3, #15
 8013f88:	f88b 3000 	strb.w	r3, [fp]
 8013f8c:	f7fd ba16 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8013f90:	a34d      	add	r3, pc, #308	; (adr r3, 80140c8 <GUI_Touch_Processing+0x2e28>)
 8013f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f96:	4620      	mov	r0, r4
 8013f98:	4629      	mov	r1, r5
 8013f9a:	f04f 0601 	mov.w	r6, #1
 8013f9e:	f7ec fdc5 	bl	8000b2c <__aeabi_dcmpge>
 8013fa2:	b900      	cbnz	r0, 8013fa6 <GUI_Touch_Processing+0x2d06>
 8013fa4:	4606      	mov	r6, r0
 8013fa6:	a34a      	add	r3, pc, #296	; (adr r3, 80140d0 <GUI_Touch_Processing+0x2e30>)
 8013fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fac:	4620      	mov	r0, r4
 8013fae:	4629      	mov	r1, r5
 8013fb0:	f04f 0701 	mov.w	r7, #1
 8013fb4:	f7ec fdb0 	bl	8000b18 <__aeabi_dcmple>
 8013fb8:	b900      	cbnz	r0, 8013fbc <GUI_Touch_Processing+0x2d1c>
 8013fba:	4607      	mov	r7, r0
 8013fbc:	403e      	ands	r6, r7
 8013fbe:	a346      	add	r3, pc, #280	; (adr r3, 80140d8 <GUI_Touch_Processing+0x2e38>)
 8013fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fc8:	b2f6      	uxtb	r6, r6
 8013fca:	f04f 0701 	mov.w	r7, #1
 8013fce:	f7ec fdad 	bl	8000b2c <__aeabi_dcmpge>
 8013fd2:	b900      	cbnz	r0, 8013fd6 <GUI_Touch_Processing+0x2d36>
 8013fd4:	4607      	mov	r7, r0
 8013fd6:	a342      	add	r3, pc, #264	; (adr r3, 80140e0 <GUI_Touch_Processing+0x2e40>)
 8013fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fe0:	f04f 0801 	mov.w	r8, #1
 8013fe4:	f7ec fd98 	bl	8000b18 <__aeabi_dcmple>
 8013fe8:	b900      	cbnz	r0, 8013fec <GUI_Touch_Processing+0x2d4c>
 8013fea:	4680      	mov	r8, r0
 8013fec:	ea07 0708 	and.w	r7, r7, r8
 8013ff0:	07ff      	lsls	r7, r7, #31
 8013ff2:	d526      	bpl.n	8014042 <GUI_Touch_Processing+0x2da2>
 8013ff4:	b32e      	cbz	r6, 8014042 <GUI_Touch_Processing+0x2da2>
					Mode_EL = !Mode_EL;
 8013ff6:	4c45      	ldr	r4, [pc, #276]	; (801410c <GUI_Touch_Processing+0x2e6c>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8013ff8:	4b45      	ldr	r3, [pc, #276]	; (8014110 <GUI_Touch_Processing+0x2e70>)
					Mode_EL = !Mode_EL;
 8013ffa:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8013ffc:	4845      	ldr	r0, [pc, #276]	; (8014114 <GUI_Touch_Processing+0x2e74>)
					Mode_EL = !Mode_EL;
 8013ffe:	2a00      	cmp	r2, #0
 8014000:	bf0c      	ite	eq
 8014002:	2201      	moveq	r2, #1
 8014004:	2200      	movne	r2, #0
 8014006:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8014008:	bf18      	it	ne
 801400a:	4618      	movne	r0, r3
 801400c:	4a42      	ldr	r2, [pc, #264]	; (8014118 <GUI_Touch_Processing+0x2e78>)
 801400e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014012:	f7fb f9a1 	bl	800f358 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8014016:	7822      	ldrb	r2, [r4, #0]
 8014018:	4b40      	ldr	r3, [pc, #256]	; (801411c <GUI_Touch_Processing+0x2e7c>)
 801401a:	b982      	cbnz	r2, 801403e <GUI_Touch_Processing+0x2d9e>
 801401c:	4a40      	ldr	r2, [pc, #256]	; (8014120 <GUI_Touch_Processing+0x2e80>)
 801401e:	edd2 0a00 	vldr	s1, [r2]
 8014022:	ed93 0a00 	vldr	s0, [r3]
 8014026:	f008 f9c7 	bl	801c3b8 <Rabs_calc_Factor2_Settings_change>
 801402a:	4b3e      	ldr	r3, [pc, #248]	; (8014124 <GUI_Touch_Processing+0x2e84>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801402c:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 801402e:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8014032:	21ca      	movs	r1, #202	; 0xca
 8014034:	20b6      	movs	r0, #182	; 0xb6
 8014036:	f001 fd61 	bl	8015afc <GUI_Switch_ButtonActive>
 801403a:	f7fd b9bf 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 801403e:	4a3a      	ldr	r2, [pc, #232]	; (8014128 <GUI_Touch_Processing+0x2e88>)
 8014040:	e7ed      	b.n	801401e <GUI_Touch_Processing+0x2d7e>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 8014042:	a329      	add	r3, pc, #164	; (adr r3, 80140e8 <GUI_Touch_Processing+0x2e48>)
 8014044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014048:	e9dd 0100 	ldrd	r0, r1, [sp]
 801404c:	f04f 0701 	mov.w	r7, #1
 8014050:	f7ec fd6c 	bl	8000b2c <__aeabi_dcmpge>
 8014054:	b900      	cbnz	r0, 8014058 <GUI_Touch_Processing+0x2db8>
 8014056:	4607      	mov	r7, r0
 8014058:	a325      	add	r3, pc, #148	; (adr r3, 80140f0 <GUI_Touch_Processing+0x2e50>)
 801405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801405e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014062:	f04f 0801 	mov.w	r8, #1
 8014066:	f7ec fd57 	bl	8000b18 <__aeabi_dcmple>
 801406a:	b900      	cbnz	r0, 801406e <GUI_Touch_Processing+0x2dce>
 801406c:	4680      	mov	r8, r0
 801406e:	ea07 0708 	and.w	r7, r7, r8
 8014072:	07f8      	lsls	r0, r7, #31
 8014074:	d564      	bpl.n	8014140 <GUI_Touch_Processing+0x2ea0>
 8014076:	2e00      	cmp	r6, #0
 8014078:	d062      	beq.n	8014140 <GUI_Touch_Processing+0x2ea0>
					Bluetooth = !Bluetooth;
 801407a:	4b2c      	ldr	r3, [pc, #176]	; (801412c <GUI_Touch_Processing+0x2e8c>)
 801407c:	781a      	ldrb	r2, [r3, #0]
 801407e:	fab2 f282 	clz	r2, r2
 8014082:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 8014084:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8014088:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 801408a:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 801408c:	f001 fcdc 	bl	8015a48 <GUI_Switch_Button>
					GUI_Up_Panel();
 8014090:	f7fb fdce 	bl	800fc30 <GUI_Up_Panel>
 8014094:	f7fd b992 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8014098:	66666666 	.word	0x66666666
 801409c:	4081f866 	.word	0x4081f866
 80140a0:	33333333 	.word	0x33333333
 80140a4:	40867133 	.word	0x40867133
 80140a8:	33333333 	.word	0x33333333
 80140ac:	40053333 	.word	0x40053333
 80140b0:	00000000 	.word	0x00000000
 80140b4:	40623800 	.word	0x40623800
 80140b8:	99999999 	.word	0x99999999
 80140bc:	4091a399 	.word	0x4091a399
 80140c0:	33333333 	.word	0x33333333
 80140c4:	407aff33 	.word	0x407aff33
 80140c8:	cccccccd 	.word	0xcccccccd
 80140cc:	407e24cc 	.word	0x407e24cc
 80140d0:	33333333 	.word	0x33333333
 80140d4:	40838b33 	.word	0x40838b33
 80140d8:	66666666 	.word	0x66666666
 80140dc:	4080ba66 	.word	0x4080ba66
 80140e0:	33333333 	.word	0x33333333
 80140e4:	40853333 	.word	0x40853333
 80140e8:	99999999 	.word	0x99999999
 80140ec:	40863199 	.word	0x40863199
 80140f0:	66666666 	.word	0x66666666
 80140f4:	408aaa66 	.word	0x408aaa66
 80140f8:	2000527a 	.word	0x2000527a
 80140fc:	200052a6 	.word	0x200052a6
 8014100:	2008c31d 	.word	0x2008c31d
 8014104:	2000022a 	.word	0x2000022a
 8014108:	4093e000 	.word	0x4093e000
 801410c:	20000a48 	.word	0x20000a48
 8014110:	08101838 	.word	0x08101838
 8014114:	08100838 	.word	0x08100838
 8014118:	2004d1e8 	.word	0x2004d1e8
 801411c:	200055d4 	.word	0x200055d4
 8014120:	200055d0 	.word	0x200055d0
 8014124:	200055dc 	.word	0x200055dc
 8014128:	200055cc 	.word	0x200055cc
 801412c:	2008c322 	.word	0x2008c322
 8014130:	33333333 	.word	0x33333333
 8014134:	40760733 	.word	0x40760733
 8014138:	cccccccd 	.word	0xcccccccd
 801413c:	407ef8cc 	.word	0x407ef8cc
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 8014140:	a3db      	add	r3, pc, #876	; (adr r3, 80144b0 <GUI_Touch_Processing+0x3210>)
 8014142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014146:	4620      	mov	r0, r4
 8014148:	4629      	mov	r1, r5
 801414a:	f04f 0701 	mov.w	r7, #1
 801414e:	f7ec fced 	bl	8000b2c <__aeabi_dcmpge>
 8014152:	b900      	cbnz	r0, 8014156 <GUI_Touch_Processing+0x2eb6>
 8014154:	4607      	mov	r7, r0
 8014156:	a3d8      	add	r3, pc, #864	; (adr r3, 80144b8 <GUI_Touch_Processing+0x3218>)
 8014158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801415c:	4620      	mov	r0, r4
 801415e:	4629      	mov	r1, r5
 8014160:	f04f 0801 	mov.w	r8, #1
 8014164:	f7ec fcd8 	bl	8000b18 <__aeabi_dcmple>
 8014168:	b900      	cbnz	r0, 801416c <GUI_Touch_Processing+0x2ecc>
 801416a:	4680      	mov	r8, r0
 801416c:	ea07 0708 	and.w	r7, r7, r8
 8014170:	a3d3      	add	r3, pc, #844	; (adr r3, 80144c0 <GUI_Touch_Processing+0x3220>)
 8014172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014176:	e9dd 0100 	ldrd	r0, r1, [sp]
 801417a:	b2ff      	uxtb	r7, r7
 801417c:	f04f 0801 	mov.w	r8, #1
 8014180:	f7ec fcd4 	bl	8000b2c <__aeabi_dcmpge>
 8014184:	b900      	cbnz	r0, 8014188 <GUI_Touch_Processing+0x2ee8>
 8014186:	4680      	mov	r8, r0
 8014188:	a3cf      	add	r3, pc, #828	; (adr r3, 80144c8 <GUI_Touch_Processing+0x3228>)
 801418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014192:	f04f 0901 	mov.w	r9, #1
 8014196:	f7ec fcbf 	bl	8000b18 <__aeabi_dcmple>
 801419a:	b900      	cbnz	r0, 801419e <GUI_Touch_Processing+0x2efe>
 801419c:	4681      	mov	r9, r0
 801419e:	ea08 0809 	and.w	r8, r8, r9
 80141a2:	f018 0f01 	tst.w	r8, #1
 80141a6:	d002      	beq.n	80141ae <GUI_Touch_Processing+0x2f0e>
 80141a8:	2f00      	cmp	r7, #0
 80141aa:	f47f ad48 	bne.w	8013c3e <GUI_Touch_Processing+0x299e>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //Color_CIE_xy
 80141ae:	a3c8      	add	r3, pc, #800	; (adr r3, 80144d0 <GUI_Touch_Processing+0x3230>)
 80141b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141b8:	f04f 0801 	mov.w	r8, #1
 80141bc:	f7ec fcb6 	bl	8000b2c <__aeabi_dcmpge>
 80141c0:	b900      	cbnz	r0, 80141c4 <GUI_Touch_Processing+0x2f24>
 80141c2:	4680      	mov	r8, r0
 80141c4:	a3c4      	add	r3, pc, #784	; (adr r3, 80144d8 <GUI_Touch_Processing+0x3238>)
 80141c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141ce:	f04f 0901 	mov.w	r9, #1
 80141d2:	f7ec fca1 	bl	8000b18 <__aeabi_dcmple>
 80141d6:	b900      	cbnz	r0, 80141da <GUI_Touch_Processing+0x2f3a>
 80141d8:	4681      	mov	r9, r0
 80141da:	ea08 0809 	and.w	r8, r8, r9
 80141de:	f018 0f01 	tst.w	r8, #1
 80141e2:	d00f      	beq.n	8014204 <GUI_Touch_Processing+0x2f64>
 80141e4:	b176      	cbz	r6, 8014204 <GUI_Touch_Processing+0x2f64>
					if(!(Color_Field&Color_CIE_xy))
 80141e6:	4aa4      	ldr	r2, [pc, #656]	; (8014478 <GUI_Touch_Processing+0x31d8>)
 80141e8:	7813      	ldrb	r3, [r2, #0]
 80141ea:	07d9      	lsls	r1, r3, #31
 80141ec:	f53d a8e6 	bmi.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 327, Color_Field|=Color_CIE_xy, 0x01);
 80141f0:	2301      	movs	r3, #1
 80141f2:	7013      	strb	r3, [r2, #0]
 80141f4:	f240 1147 	movw	r1, #327	; 0x147
 80141f8:	461a      	mov	r2, r3
 80141fa:	20c8      	movs	r0, #200	; 0xc8
 80141fc:	f001 fbf5 	bl	80159ea <GUI_RadioBox>
 8014200:	f7fd b8dc 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8014204:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8014206:	4620      	mov	r0, r4
 8014208:	ea0a 0603 	and.w	r6, sl, r3
 801420c:	4629      	mov	r1, r5
 801420e:	a38a      	add	r3, pc, #552	; (adr r3, 8014438 <GUI_Touch_Processing+0x3198>)
 8014210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014214:	f04f 0801 	mov.w	r8, #1
 8014218:	f7ec fc88 	bl	8000b2c <__aeabi_dcmpge>
 801421c:	b900      	cbnz	r0, 8014220 <GUI_Touch_Processing+0x2f80>
 801421e:	4680      	mov	r8, r0
 8014220:	a387      	add	r3, pc, #540	; (adr r3, 8014440 <GUI_Touch_Processing+0x31a0>)
 8014222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014226:	4620      	mov	r0, r4
 8014228:	4629      	mov	r1, r5
 801422a:	f04f 0901 	mov.w	r9, #1
 801422e:	f7ec fc73 	bl	8000b18 <__aeabi_dcmple>
 8014232:	b900      	cbnz	r0, 8014236 <GUI_Touch_Processing+0x2f96>
 8014234:	4681      	mov	r9, r0
 8014236:	ea08 0309 	and.w	r3, r8, r9
 801423a:	07da      	lsls	r2, r3, #31
 801423c:	d502      	bpl.n	8014244 <GUI_Touch_Processing+0x2fa4>
 801423e:	2e00      	cmp	r6, #0
 8014240:	f47e a879 	bne.w	8012336 <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8014244:	a380      	add	r3, pc, #512	; (adr r3, 8014448 <GUI_Touch_Processing+0x31a8>)
 8014246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424a:	4620      	mov	r0, r4
 801424c:	4629      	mov	r1, r5
 801424e:	f04f 0801 	mov.w	r8, #1
 8014252:	f7ec fc6b 	bl	8000b2c <__aeabi_dcmpge>
 8014256:	b900      	cbnz	r0, 801425a <GUI_Touch_Processing+0x2fba>
 8014258:	4680      	mov	r8, r0
 801425a:	a37d      	add	r3, pc, #500	; (adr r3, 8014450 <GUI_Touch_Processing+0x31b0>)
 801425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014260:	4620      	mov	r0, r4
 8014262:	4629      	mov	r1, r5
 8014264:	f04f 0901 	mov.w	r9, #1
 8014268:	f7ec fc56 	bl	8000b18 <__aeabi_dcmple>
 801426c:	b900      	cbnz	r0, 8014270 <GUI_Touch_Processing+0x2fd0>
 801426e:	4681      	mov	r9, r0
 8014270:	ea08 0309 	and.w	r3, r8, r9
 8014274:	07db      	lsls	r3, r3, #31
 8014276:	d55a      	bpl.n	801432e <GUI_Touch_Processing+0x308e>
 8014278:	2e00      	cmp	r6, #0
 801427a:	d058      	beq.n	801432e <GUI_Touch_Processing+0x308e>
					if(preColor_Field != Color_Field)
 801427c:	4c7e      	ldr	r4, [pc, #504]	; (8014478 <GUI_Touch_Processing+0x31d8>)
 801427e:	497f      	ldr	r1, [pc, #508]	; (801447c <GUI_Touch_Processing+0x31dc>)
 8014280:	7823      	ldrb	r3, [r4, #0]
 8014282:	7809      	ldrb	r1, [r1, #0]
 8014284:	4299      	cmp	r1, r3
 8014286:	d01f      	beq.n	80142c8 <GUI_Touch_Processing+0x3028>
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8014288:	07dd      	lsls	r5, r3, #31
 801428a:	d52d      	bpl.n	80142e8 <GUI_Touch_Processing+0x3048>
 801428c:	4b7c      	ldr	r3, [pc, #496]	; (8014480 <GUI_Touch_Processing+0x31e0>)
 801428e:	487d      	ldr	r0, [pc, #500]	; (8014484 <GUI_Touch_Processing+0x31e4>)
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	f013 0f01 	tst.w	r3, #1
 8014296:	bf18      	it	ne
 8014298:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 801429c:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 80142a0:	f008 f858 	bl	801c354 <Image_load>
						Locus.pData = (uint16_t *)bmp;
 80142a4:	4b78      	ldr	r3, [pc, #480]	; (8014488 <GUI_Touch_Processing+0x31e8>)
 80142a6:	4a79      	ldr	r2, [pc, #484]	; (801448c <GUI_Touch_Processing+0x31ec>)
 80142a8:	605a      	str	r2, [r3, #4]
						Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 80142aa:	7822      	ldrb	r2, [r4, #0]
 80142ac:	f002 0101 	and.w	r1, r2, #1
 80142b0:	2900      	cmp	r1, #0
 80142b2:	bf0c      	ite	eq
 80142b4:	21fa      	moveq	r1, #250	; 0xfa
 80142b6:	21d8      	movne	r1, #216	; 0xd8
 80142b8:	8019      	strh	r1, [r3, #0]
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 80142ba:	d123      	bne.n	8014304 <GUI_Touch_Processing+0x3064>
 80142bc:	f012 0f04 	tst.w	r2, #4
 80142c0:	bf0c      	ite	eq
 80142c2:	22fa      	moveq	r2, #250	; 0xfa
 80142c4:	22ea      	movne	r2, #234	; 0xea
 80142c6:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 80142c8:	4b71      	ldr	r3, [pc, #452]	; (8014490 <GUI_Touch_Processing+0x31f0>)
 80142ca:	2100      	movs	r1, #0
 80142cc:	8818      	ldrh	r0, [r3, #0]
 80142ce:	f008 f905 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80142d2:	4b70      	ldr	r3, [pc, #448]	; (8014494 <GUI_Touch_Processing+0x31f4>)
 80142d4:	781a      	ldrb	r2, [r3, #0]
 80142d6:	4b70      	ldr	r3, [pc, #448]	; (8014498 <GUI_Touch_Processing+0x31f8>)
					switch (Prev_Inf_Screen){
 80142d8:	1e51      	subs	r1, r2, #1
 80142da:	2905      	cmp	r1, #5
 80142dc:	d814      	bhi.n	8014308 <GUI_Touch_Processing+0x3068>
 80142de:	e8df f001 	tbb	[pc, r1]
 80142e2:	1316      	.short	0x1316
 80142e4:	1e221a13 	.word	0x1e221a13
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 80142e8:	f003 0304 	and.w	r3, r3, #4
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	4b6b      	ldr	r3, [pc, #428]	; (801449c <GUI_Touch_Processing+0x31fc>)
 80142f0:	486b      	ldr	r0, [pc, #428]	; (80144a0 <GUI_Touch_Processing+0x3200>)
 80142f2:	bf18      	it	ne
 80142f4:	4618      	movne	r0, r3
 80142f6:	f24e 4384 	movw	r3, #58500	; 0xe484
 80142fa:	f24f 4124 	movw	r1, #62500	; 0xf424
 80142fe:	bf18      	it	ne
 8014300:	4619      	movne	r1, r3
 8014302:	e7cd      	b.n	80142a0 <GUI_Touch_Processing+0x3000>
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8014304:	22fa      	movs	r2, #250	; 0xfa
 8014306:	e7de      	b.n	80142c6 <GUI_Touch_Processing+0x3026>
					GUI_screen_state = Prev_Inf_Screen;
 8014308:	701a      	strb	r2, [r3, #0]
 801430a:	f7fd b857 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801430e:	2201      	movs	r2, #1
 8014310:	701a      	strb	r2, [r3, #0]
 8014312:	f7fd b853 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8014316:	2204      	movs	r2, #4
 8014318:	701a      	strb	r2, [r3, #0]
 801431a:	f7fd b84f 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 801431e:	2206      	movs	r2, #6
 8014320:	701a      	strb	r2, [r3, #0]
 8014322:	f7fd b84b 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8014326:	2205      	movs	r2, #5
 8014328:	701a      	strb	r2, [r3, #0]
 801432a:	f7fd b847 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801432e:	a348      	add	r3, pc, #288	; (adr r3, 8014450 <GUI_Touch_Processing+0x31b0>)
 8014330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014334:	4620      	mov	r0, r4
 8014336:	4629      	mov	r1, r5
 8014338:	f04f 0801 	mov.w	r8, #1
 801433c:	f7ec fbf6 	bl	8000b2c <__aeabi_dcmpge>
 8014340:	b900      	cbnz	r0, 8014344 <GUI_Touch_Processing+0x30a4>
 8014342:	4680      	mov	r8, r0
 8014344:	a344      	add	r3, pc, #272	; (adr r3, 8014458 <GUI_Touch_Processing+0x31b8>)
 8014346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434a:	4620      	mov	r0, r4
 801434c:	4629      	mov	r1, r5
 801434e:	f04f 0901 	mov.w	r9, #1
 8014352:	f7ec fbe1 	bl	8000b18 <__aeabi_dcmple>
 8014356:	b900      	cbnz	r0, 801435a <GUI_Touch_Processing+0x30ba>
 8014358:	4681      	mov	r9, r0
 801435a:	ea08 0309 	and.w	r3, r8, r9
 801435e:	07dc      	lsls	r4, r3, #31
 8014360:	d502      	bpl.n	8014368 <GUI_Touch_Processing+0x30c8>
 8014362:	2e00      	cmp	r6, #0
 8014364:	f47d a86a 	bne.w	801143c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8014368:	2200      	movs	r2, #0
 801436a:	4b4e      	ldr	r3, [pc, #312]	; (80144a4 <GUI_Touch_Processing+0x3204>)
 801436c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014370:	f04f 0401 	mov.w	r4, #1
 8014374:	f7ec fbda 	bl	8000b2c <__aeabi_dcmpge>
 8014378:	b900      	cbnz	r0, 801437c <GUI_Touch_Processing+0x30dc>
 801437a:	4604      	mov	r4, r0
 801437c:	a338      	add	r3, pc, #224	; (adr r3, 8014460 <GUI_Touch_Processing+0x31c0>)
 801437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014382:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014386:	f04f 0501 	mov.w	r5, #1
 801438a:	f7ec fbc5 	bl	8000b18 <__aeabi_dcmple>
 801438e:	b900      	cbnz	r0, 8014392 <GUI_Touch_Processing+0x30f2>
 8014390:	4605      	mov	r5, r0
 8014392:	402c      	ands	r4, r5
 8014394:	07e0      	lsls	r0, r4, #31
 8014396:	f57d a811 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
 801439a:	2f00      	cmp	r7, #0
 801439c:	f47f ac21 	bne.w	8013be2 <GUI_Touch_Processing+0x2942>
 80143a0:	f7fd b80c 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 80143a4:	4b40      	ldr	r3, [pc, #256]	; (80144a8 <GUI_Touch_Processing+0x3208>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80143a6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 80143aa:	220f      	movs	r2, #15
 80143ac:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80143ae:	f7ec f8d1 	bl	8000554 <__aeabi_i2d>
 80143b2:	4604      	mov	r4, r0
 80143b4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80143b8:	460d      	mov	r5, r1
 80143ba:	f7ec f8cb 	bl	8000554 <__aeabi_i2d>
 80143be:	a32a      	add	r3, pc, #168	; (adr r3, 8014468 <GUI_Touch_Processing+0x31c8>)
 80143c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c4:	e9cd 0100 	strd	r0, r1, [sp]
 80143c8:	f04f 0801 	mov.w	r8, #1
 80143cc:	f7ec fbae 	bl	8000b2c <__aeabi_dcmpge>
 80143d0:	b900      	cbnz	r0, 80143d4 <GUI_Touch_Processing+0x3134>
 80143d2:	4680      	mov	r8, r0
 80143d4:	2200      	movs	r2, #0
 80143d6:	4b35      	ldr	r3, [pc, #212]	; (80144ac <GUI_Touch_Processing+0x320c>)
 80143d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143dc:	fa5f f888 	uxtb.w	r8, r8
 80143e0:	f04f 0701 	mov.w	r7, #1
 80143e4:	f7ec fb98 	bl	8000b18 <__aeabi_dcmple>
 80143e8:	b900      	cbnz	r0, 80143ec <GUI_Touch_Processing+0x314c>
 80143ea:	4607      	mov	r7, r0
 80143ec:	a320      	add	r3, pc, #128	; (adr r3, 8014470 <GUI_Touch_Processing+0x31d0>)
 80143ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143f2:	4620      	mov	r0, r4
 80143f4:	4629      	mov	r1, r5
 80143f6:	b2ff      	uxtb	r7, r7
 80143f8:	f04f 0601 	mov.w	r6, #1
 80143fc:	f7ec fb96 	bl	8000b2c <__aeabi_dcmpge>
 8014400:	b900      	cbnz	r0, 8014404 <GUI_Touch_Processing+0x3164>
 8014402:	4606      	mov	r6, r0
 8014404:	a30c      	add	r3, pc, #48	; (adr r3, 8014438 <GUI_Touch_Processing+0x3198>)
 8014406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801440a:	4620      	mov	r0, r4
 801440c:	4629      	mov	r1, r5
 801440e:	f04f 0901 	mov.w	r9, #1
 8014412:	f7ec fb81 	bl	8000b18 <__aeabi_dcmple>
 8014416:	b900      	cbnz	r0, 801441a <GUI_Touch_Processing+0x317a>
 8014418:	4681      	mov	r9, r0
 801441a:	ea06 0609 	and.w	r6, r6, r9
 801441e:	ea18 0f06 	tst.w	r8, r6
 8014422:	d05d      	beq.n	80144e0 <GUI_Touch_Processing+0x3240>
 8014424:	2f00      	cmp	r7, #0
 8014426:	d05b      	beq.n	80144e0 <GUI_Touch_Processing+0x3240>
					GUI_screen_state = ColorSet1_Screen;
 8014428:	230e      	movs	r3, #14
 801442a:	f88b 3000 	strb.w	r3, [fp]
 801442e:	f7fc bfc5 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8014432:	bf00      	nop
 8014434:	f3af 8000 	nop.w
 8014438:	66666666 	.word	0x66666666
 801443c:	4081f866 	.word	0x4081f866
 8014440:	33333333 	.word	0x33333333
 8014444:	40867133 	.word	0x40867133
 8014448:	33333333 	.word	0x33333333
 801444c:	40053333 	.word	0x40053333
 8014450:	00000000 	.word	0x00000000
 8014454:	40623800 	.word	0x40623800
 8014458:	99999999 	.word	0x99999999
 801445c:	40720d99 	.word	0x40720d99
 8014460:	00000000 	.word	0x00000000
 8014464:	4073e000 	.word	0x4073e000
 8014468:	99999999 	.word	0x99999999
 801446c:	4091a399 	.word	0x4091a399
 8014470:	33333333 	.word	0x33333333
 8014474:	407aff33 	.word	0x407aff33
 8014478:	20005277 	.word	0x20005277
 801447c:	200052a1 	.word	0x200052a1
 8014480:	2000527c 	.word	0x2000527c
 8014484:	00051d00 	.word	0x00051d00
 8014488:	2008c8b8 	.word	0x2008c8b8
 801448c:	200511f6 	.word	0x200511f6
 8014490:	200052a6 	.word	0x200052a6
 8014494:	2008c31d 	.word	0x2008c31d
 8014498:	20005279 	.word	0x20005279
 801449c:	0006ca00 	.word	0x0006ca00
 80144a0:	00018100 	.word	0x00018100
 80144a4:	406a8000 	.word	0x406a8000
 80144a8:	2000022a 	.word	0x2000022a
 80144ac:	4093e000 	.word	0x4093e000
 80144b0:	33333333 	.word	0x33333333
 80144b4:	40353333 	.word	0x40353333
 80144b8:	00000000 	.word	0x00000000
 80144bc:	4084b400 	.word	0x4084b400
 80144c0:	99999999 	.word	0x99999999
 80144c4:	40748999 	.word	0x40748999
 80144c8:	99999999 	.word	0x99999999
 80144cc:	407cd199 	.word	0x407cd199
 80144d0:	66666666 	.word	0x66666666
 80144d4:	408b1466 	.word	0x408b1466
 80144d8:	33333333 	.word	0x33333333
 80144dc:	408f8d33 	.word	0x408f8d33
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //Color_CIE_Luv
 80144e0:	a3d3      	add	r3, pc, #844	; (adr r3, 8014830 <GUI_Touch_Processing+0x3590>)
 80144e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e6:	4620      	mov	r0, r4
 80144e8:	4629      	mov	r1, r5
 80144ea:	f04f 0601 	mov.w	r6, #1
 80144ee:	f7ec fb1d 	bl	8000b2c <__aeabi_dcmpge>
 80144f2:	b900      	cbnz	r0, 80144f6 <GUI_Touch_Processing+0x3256>
 80144f4:	4606      	mov	r6, r0
 80144f6:	a3dc      	add	r3, pc, #880	; (adr r3, 8014868 <GUI_Touch_Processing+0x35c8>)
 80144f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144fc:	4620      	mov	r0, r4
 80144fe:	4629      	mov	r1, r5
 8014500:	f04f 0901 	mov.w	r9, #1
 8014504:	f7ec fb08 	bl	8000b18 <__aeabi_dcmple>
 8014508:	b900      	cbnz	r0, 801450c <GUI_Touch_Processing+0x326c>
 801450a:	4681      	mov	r9, r0
 801450c:	ea06 0609 	and.w	r6, r6, r9
 8014510:	a3d7      	add	r3, pc, #860	; (adr r3, 8014870 <GUI_Touch_Processing+0x35d0>)
 8014512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014516:	e9dd 0100 	ldrd	r0, r1, [sp]
 801451a:	b2f6      	uxtb	r6, r6
 801451c:	f04f 0901 	mov.w	r9, #1
 8014520:	f7ec fb04 	bl	8000b2c <__aeabi_dcmpge>
 8014524:	b900      	cbnz	r0, 8014528 <GUI_Touch_Processing+0x3288>
 8014526:	4681      	mov	r9, r0
 8014528:	a3d3      	add	r3, pc, #844	; (adr r3, 8014878 <GUI_Touch_Processing+0x35d8>)
 801452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801452e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014532:	f04f 0a01 	mov.w	sl, #1
 8014536:	f7ec faef 	bl	8000b18 <__aeabi_dcmple>
 801453a:	b900      	cbnz	r0, 801453e <GUI_Touch_Processing+0x329e>
 801453c:	4682      	mov	sl, r0
 801453e:	ea09 090a 	and.w	r9, r9, sl
 8014542:	f019 0f01 	tst.w	r9, #1
 8014546:	d016      	beq.n	8014576 <GUI_Touch_Processing+0x32d6>
 8014548:	b1ae      	cbz	r6, 8014576 <GUI_Touch_Processing+0x32d6>
					if(!(Color_Field&Color_CIE_Luv))
 801454a:	4cbb      	ldr	r4, [pc, #748]	; (8014838 <GUI_Touch_Processing+0x3598>)
 801454c:	7823      	ldrb	r3, [r4, #0]
 801454e:	0759      	lsls	r1, r3, #29
 8014550:	f53c af34 	bmi.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 70, Color_Field|=Color_CIE_Luv, 0x01);
 8014554:	2204      	movs	r2, #4
 8014556:	2301      	movs	r3, #1
 8014558:	2146      	movs	r1, #70	; 0x46
 801455a:	20c8      	movs	r0, #200	; 0xc8
 801455c:	7022      	strb	r2, [r4, #0]
 801455e:	f001 fa44 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 8014562:	7822      	ldrb	r2, [r4, #0]
 8014564:	2301      	movs	r3, #1
 8014566:	f002 0202 	and.w	r2, r2, #2
 801456a:	2185      	movs	r1, #133	; 0x85
 801456c:	20c8      	movs	r0, #200	; 0xc8
 801456e:	f001 fa3c 	bl	80159ea <GUI_RadioBox>
 8014572:	f7fc bf23 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //Color_CIE_Lab
 8014576:	a39c      	add	r3, pc, #624	; (adr r3, 80147e8 <GUI_Touch_Processing+0x3548>)
 8014578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014580:	f04f 0901 	mov.w	r9, #1
 8014584:	f7ec fad2 	bl	8000b2c <__aeabi_dcmpge>
 8014588:	b900      	cbnz	r0, 801458c <GUI_Touch_Processing+0x32ec>
 801458a:	4681      	mov	r9, r0
 801458c:	a398      	add	r3, pc, #608	; (adr r3, 80147f0 <GUI_Touch_Processing+0x3550>)
 801458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014592:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014596:	f04f 0a01 	mov.w	sl, #1
 801459a:	f7ec fabd 	bl	8000b18 <__aeabi_dcmple>
 801459e:	b900      	cbnz	r0, 80145a2 <GUI_Touch_Processing+0x3302>
 80145a0:	4682      	mov	sl, r0
 80145a2:	ea09 090a 	and.w	r9, r9, sl
 80145a6:	f019 0f01 	tst.w	r9, #1
 80145aa:	d017      	beq.n	80145dc <GUI_Touch_Processing+0x333c>
 80145ac:	b1b6      	cbz	r6, 80145dc <GUI_Touch_Processing+0x333c>
					if(!(Color_Field&Color_CIE_Lab))
 80145ae:	4ca2      	ldr	r4, [pc, #648]	; (8014838 <GUI_Touch_Processing+0x3598>)
 80145b0:	7822      	ldrb	r2, [r4, #0]
 80145b2:	f012 0202 	ands.w	r2, r2, #2
 80145b6:	f47c af01 	bne.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 80145ba:	2301      	movs	r3, #1
 80145bc:	2146      	movs	r1, #70	; 0x46
 80145be:	20c8      	movs	r0, #200	; 0xc8
						Color_Field = 0;
 80145c0:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 80145c2:	f001 fa12 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 80145c6:	7822      	ldrb	r2, [r4, #0]
 80145c8:	2301      	movs	r3, #1
 80145ca:	f042 0202 	orr.w	r2, r2, #2
 80145ce:	2185      	movs	r1, #133	; 0x85
 80145d0:	20c8      	movs	r0, #200	; 0xc8
 80145d2:	7022      	strb	r2, [r4, #0]
 80145d4:	f001 fa09 	bl	80159ea <GUI_RadioBox>
 80145d8:	f7fc bef0 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 80145dc:	a386      	add	r3, pc, #536	; (adr r3, 80147f8 <GUI_Touch_Processing+0x3558>)
 80145de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e2:	4620      	mov	r0, r4
 80145e4:	4629      	mov	r1, r5
 80145e6:	ea08 0607 	and.w	r6, r8, r7
 80145ea:	f04f 0901 	mov.w	r9, #1
 80145ee:	f7ec fa9d 	bl	8000b2c <__aeabi_dcmpge>
 80145f2:	b900      	cbnz	r0, 80145f6 <GUI_Touch_Processing+0x3356>
 80145f4:	4681      	mov	r9, r0
 80145f6:	a382      	add	r3, pc, #520	; (adr r3, 8014800 <GUI_Touch_Processing+0x3560>)
 80145f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fc:	4620      	mov	r0, r4
 80145fe:	4629      	mov	r1, r5
 8014600:	f04f 0a01 	mov.w	sl, #1
 8014604:	f7ec fa88 	bl	8000b18 <__aeabi_dcmple>
 8014608:	b900      	cbnz	r0, 801460c <GUI_Touch_Processing+0x336c>
 801460a:	4682      	mov	sl, r0
 801460c:	ea09 030a 	and.w	r3, r9, sl
 8014610:	07da      	lsls	r2, r3, #31
 8014612:	d502      	bpl.n	801461a <GUI_Touch_Processing+0x337a>
 8014614:	2e00      	cmp	r6, #0
 8014616:	f47d ae8e 	bne.w	8012336 <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 801461a:	a37b      	add	r3, pc, #492	; (adr r3, 8014808 <GUI_Touch_Processing+0x3568>)
 801461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014620:	4620      	mov	r0, r4
 8014622:	4629      	mov	r1, r5
 8014624:	f04f 0901 	mov.w	r9, #1
 8014628:	f7ec fa80 	bl	8000b2c <__aeabi_dcmpge>
 801462c:	b900      	cbnz	r0, 8014630 <GUI_Touch_Processing+0x3390>
 801462e:	4681      	mov	r9, r0
 8014630:	a377      	add	r3, pc, #476	; (adr r3, 8014810 <GUI_Touch_Processing+0x3570>)
 8014632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014636:	4620      	mov	r0, r4
 8014638:	4629      	mov	r1, r5
 801463a:	f04f 0a01 	mov.w	sl, #1
 801463e:	f7ec fa6b 	bl	8000b18 <__aeabi_dcmple>
 8014642:	b900      	cbnz	r0, 8014646 <GUI_Touch_Processing+0x33a6>
 8014644:	4682      	mov	sl, r0
 8014646:	ea09 030a 	and.w	r3, r9, sl
 801464a:	07db      	lsls	r3, r3, #31
 801464c:	d55e      	bpl.n	801470c <GUI_Touch_Processing+0x346c>
 801464e:	2e00      	cmp	r6, #0
 8014650:	d05c      	beq.n	801470c <GUI_Touch_Processing+0x346c>
					if(preColor_Field != Color_Field)
 8014652:	4c79      	ldr	r4, [pc, #484]	; (8014838 <GUI_Touch_Processing+0x3598>)
 8014654:	4979      	ldr	r1, [pc, #484]	; (801483c <GUI_Touch_Processing+0x359c>)
 8014656:	7823      	ldrb	r3, [r4, #0]
 8014658:	7809      	ldrb	r1, [r1, #0]
 801465a:	4299      	cmp	r1, r3
 801465c:	d01f      	beq.n	801469e <GUI_Touch_Processing+0x33fe>
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801465e:	07dd      	lsls	r5, r3, #31
 8014660:	d52c      	bpl.n	80146bc <GUI_Touch_Processing+0x341c>
 8014662:	4b77      	ldr	r3, [pc, #476]	; (8014840 <GUI_Touch_Processing+0x35a0>)
 8014664:	4877      	ldr	r0, [pc, #476]	; (8014844 <GUI_Touch_Processing+0x35a4>)
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	f013 0f01 	tst.w	r3, #1
 801466c:	bf18      	it	ne
 801466e:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8014672:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8014676:	f007 fe6d 	bl	801c354 <Image_load>
								Locus.pData = (uint16_t *)bmp;
 801467a:	4b73      	ldr	r3, [pc, #460]	; (8014848 <GUI_Touch_Processing+0x35a8>)
 801467c:	4a73      	ldr	r2, [pc, #460]	; (801484c <GUI_Touch_Processing+0x35ac>)
 801467e:	605a      	str	r2, [r3, #4]
								Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8014680:	7822      	ldrb	r2, [r4, #0]
 8014682:	f002 0101 	and.w	r1, r2, #1
 8014686:	2900      	cmp	r1, #0
 8014688:	bf0c      	ite	eq
 801468a:	21fa      	moveq	r1, #250	; 0xfa
 801468c:	21d8      	movne	r1, #216	; 0xd8
 801468e:	8019      	strh	r1, [r3, #0]
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8014690:	d122      	bne.n	80146d8 <GUI_Touch_Processing+0x3438>
 8014692:	f012 0f04 	tst.w	r2, #4
 8014696:	bf0c      	ite	eq
 8014698:	22fa      	moveq	r2, #250	; 0xfa
 801469a:	22ea      	movne	r2, #234	; 0xea
 801469c:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 801469e:	4b6c      	ldr	r3, [pc, #432]	; (8014850 <GUI_Touch_Processing+0x35b0>)
 80146a0:	2100      	movs	r1, #0
 80146a2:	8818      	ldrh	r0, [r3, #0]
 80146a4:	f007 ff1a 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80146a8:	4b6a      	ldr	r3, [pc, #424]	; (8014854 <GUI_Touch_Processing+0x35b4>)
 80146aa:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80146ac:	1e5a      	subs	r2, r3, #1
 80146ae:	2a05      	cmp	r2, #5
 80146b0:	d814      	bhi.n	80146dc <GUI_Touch_Processing+0x343c>
 80146b2:	e8df f002 	tbb	[pc, r2]
 80146b6:	1317      	.short	0x1317
 80146b8:	21261c13 	.word	0x21261c13
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 80146bc:	f003 0304 	and.w	r3, r3, #4
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	4b65      	ldr	r3, [pc, #404]	; (8014858 <GUI_Touch_Processing+0x35b8>)
 80146c4:	4865      	ldr	r0, [pc, #404]	; (801485c <GUI_Touch_Processing+0x35bc>)
 80146c6:	bf18      	it	ne
 80146c8:	4618      	movne	r0, r3
 80146ca:	f24e 4384 	movw	r3, #58500	; 0xe484
 80146ce:	f24f 4124 	movw	r1, #62500	; 0xf424
 80146d2:	bf18      	it	ne
 80146d4:	4619      	movne	r1, r3
 80146d6:	e7ce      	b.n	8014676 <GUI_Touch_Processing+0x33d6>
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 80146d8:	22fa      	movs	r2, #250	; 0xfa
 80146da:	e7df      	b.n	801469c <GUI_Touch_Processing+0x33fc>
					GUI_screen_state = Prev_Inf_Screen;
 80146dc:	f88b 3000 	strb.w	r3, [fp]
 80146e0:	f7fc be6c 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80146e4:	2301      	movs	r3, #1
 80146e6:	f88b 3000 	strb.w	r3, [fp]
 80146ea:	f7fc be67 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80146ee:	2304      	movs	r3, #4
 80146f0:	f88b 3000 	strb.w	r3, [fp]
 80146f4:	f7fc be62 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80146f8:	2306      	movs	r3, #6
 80146fa:	f88b 3000 	strb.w	r3, [fp]
 80146fe:	f7fc be5d 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8014702:	2305      	movs	r3, #5
 8014704:	f88b 3000 	strb.w	r3, [fp]
 8014708:	f7fc be58 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801470c:	a340      	add	r3, pc, #256	; (adr r3, 8014810 <GUI_Touch_Processing+0x3570>)
 801470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014712:	4620      	mov	r0, r4
 8014714:	4629      	mov	r1, r5
 8014716:	f04f 0601 	mov.w	r6, #1
 801471a:	f7ec fa07 	bl	8000b2c <__aeabi_dcmpge>
 801471e:	b900      	cbnz	r0, 8014722 <GUI_Touch_Processing+0x3482>
 8014720:	4606      	mov	r6, r0
 8014722:	a33d      	add	r3, pc, #244	; (adr r3, 8014818 <GUI_Touch_Processing+0x3578>)
 8014724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014728:	4620      	mov	r0, r4
 801472a:	4629      	mov	r1, r5
 801472c:	f04f 0901 	mov.w	r9, #1
 8014730:	f7ec f9f2 	bl	8000b18 <__aeabi_dcmple>
 8014734:	b900      	cbnz	r0, 8014738 <GUI_Touch_Processing+0x3498>
 8014736:	4681      	mov	r9, r0
 8014738:	ea06 0609 	and.w	r6, r6, r9
 801473c:	ea18 0f06 	tst.w	r8, r6
 8014740:	f7fe bad0 	b.w	8012ce4 <GUI_Touch_Processing+0x1a44>
					preGUI_screen_state = GUI_screen_state;
 8014744:	4b46      	ldr	r3, [pc, #280]	; (8014860 <GUI_Touch_Processing+0x35c0>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)//next
 8014746:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 801474a:	2210      	movs	r2, #16
 801474c:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)//next
 801474e:	f7eb ff01 	bl	8000554 <__aeabi_i2d>
 8014752:	4604      	mov	r4, r0
 8014754:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8014758:	460d      	mov	r5, r1
 801475a:	f7eb fefb 	bl	8000554 <__aeabi_i2d>
 801475e:	a330      	add	r3, pc, #192	; (adr r3, 8014820 <GUI_Touch_Processing+0x3580>)
 8014760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014764:	4606      	mov	r6, r0
 8014766:	460f      	mov	r7, r1
 8014768:	f04f 0801 	mov.w	r8, #1
 801476c:	f7ec f9de 	bl	8000b2c <__aeabi_dcmpge>
 8014770:	b900      	cbnz	r0, 8014774 <GUI_Touch_Processing+0x34d4>
 8014772:	4680      	mov	r8, r0
 8014774:	fa5f f388 	uxtb.w	r3, r8
 8014778:	9300      	str	r3, [sp, #0]
 801477a:	2200      	movs	r2, #0
 801477c:	4b39      	ldr	r3, [pc, #228]	; (8014864 <GUI_Touch_Processing+0x35c4>)
 801477e:	4630      	mov	r0, r6
 8014780:	4639      	mov	r1, r7
 8014782:	f04f 0801 	mov.w	r8, #1
 8014786:	f7ec f9c7 	bl	8000b18 <__aeabi_dcmple>
 801478a:	b900      	cbnz	r0, 801478e <GUI_Touch_Processing+0x34ee>
 801478c:	4680      	mov	r8, r0
 801478e:	fa5f f388 	uxtb.w	r3, r8
 8014792:	9303      	str	r3, [sp, #12]
 8014794:	4620      	mov	r0, r4
 8014796:	a324      	add	r3, pc, #144	; (adr r3, 8014828 <GUI_Touch_Processing+0x3588>)
 8014798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801479c:	4629      	mov	r1, r5
 801479e:	f04f 0801 	mov.w	r8, #1
 80147a2:	f7ec f9c3 	bl	8000b2c <__aeabi_dcmpge>
 80147a6:	b900      	cbnz	r0, 80147aa <GUI_Touch_Processing+0x350a>
 80147a8:	4680      	mov	r8, r0
 80147aa:	a313      	add	r3, pc, #76	; (adr r3, 80147f8 <GUI_Touch_Processing+0x3558>)
 80147ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b0:	4620      	mov	r0, r4
 80147b2:	4629      	mov	r1, r5
 80147b4:	f04f 0901 	mov.w	r9, #1
 80147b8:	f7ec f9ae 	bl	8000b18 <__aeabi_dcmple>
 80147bc:	b900      	cbnz	r0, 80147c0 <GUI_Touch_Processing+0x3520>
 80147be:	4681      	mov	r9, r0
 80147c0:	9b00      	ldr	r3, [sp, #0]
 80147c2:	ea08 0809 	and.w	r8, r8, r9
 80147c6:	ea13 0f08 	tst.w	r3, r8
 80147ca:	d059      	beq.n	8014880 <GUI_Touch_Processing+0x35e0>
 80147cc:	9b03      	ldr	r3, [sp, #12]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d056      	beq.n	8014880 <GUI_Touch_Processing+0x35e0>
					WriteSDFLASH_t(sdfile_cnt);
 80147d2:	4b1f      	ldr	r3, [pc, #124]	; (8014850 <GUI_Touch_Processing+0x35b0>)
 80147d4:	2100      	movs	r1, #0
 80147d6:	8818      	ldrh	r0, [r3, #0]
 80147d8:	f007 fe80 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Color_Rendition_Screen;
 80147dc:	2306      	movs	r3, #6
 80147de:	f88b 3000 	strb.w	r3, [fp]
 80147e2:	f7fc bdeb 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 80147e6:	bf00      	nop
 80147e8:	33333333 	.word	0x33333333
 80147ec:	40760733 	.word	0x40760733
 80147f0:	cccccccd 	.word	0xcccccccd
 80147f4:	407ef8cc 	.word	0x407ef8cc
 80147f8:	66666666 	.word	0x66666666
 80147fc:	4081f866 	.word	0x4081f866
 8014800:	33333333 	.word	0x33333333
 8014804:	40867133 	.word	0x40867133
 8014808:	33333333 	.word	0x33333333
 801480c:	40053333 	.word	0x40053333
 8014810:	00000000 	.word	0x00000000
 8014814:	40623800 	.word	0x40623800
 8014818:	99999999 	.word	0x99999999
 801481c:	40720d99 	.word	0x40720d99
 8014820:	99999999 	.word	0x99999999
 8014824:	4091a399 	.word	0x4091a399
 8014828:	33333333 	.word	0x33333333
 801482c:	407aff33 	.word	0x407aff33
 8014830:	cccccccd 	.word	0xcccccccd
 8014834:	407e24cc 	.word	0x407e24cc
 8014838:	20005277 	.word	0x20005277
 801483c:	200052a1 	.word	0x200052a1
 8014840:	2000527c 	.word	0x2000527c
 8014844:	00051d00 	.word	0x00051d00
 8014848:	2008c8b8 	.word	0x2008c8b8
 801484c:	200511f6 	.word	0x200511f6
 8014850:	200052a6 	.word	0x200052a6
 8014854:	2008c31d 	.word	0x2008c31d
 8014858:	0006ca00 	.word	0x0006ca00
 801485c:	00018100 	.word	0x00018100
 8014860:	2000022a 	.word	0x2000022a
 8014864:	4093e000 	.word	0x4093e000
 8014868:	33333333 	.word	0x33333333
 801486c:	40838b33 	.word	0x40838b33
 8014870:	00000000 	.word	0x00000000
 8014874:	40673000 	.word	0x40673000
 8014878:	99999999 	.word	0x99999999
 801487c:	40748999 	.word	0x40748999
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8014880:	a3c9      	add	r3, pc, #804	; (adr r3, 8014ba8 <GUI_Touch_Processing+0x3908>)
 8014882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014886:	4620      	mov	r0, r4
 8014888:	4629      	mov	r1, r5
 801488a:	f04f 0801 	mov.w	r8, #1
 801488e:	f7ec f94d 	bl	8000b2c <__aeabi_dcmpge>
 8014892:	b900      	cbnz	r0, 8014896 <GUI_Touch_Processing+0x35f6>
 8014894:	4680      	mov	r8, r0
 8014896:	a3c6      	add	r3, pc, #792	; (adr r3, 8014bb0 <GUI_Touch_Processing+0x3910>)
 8014898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489c:	4620      	mov	r0, r4
 801489e:	4629      	mov	r1, r5
 80148a0:	f04f 0901 	mov.w	r9, #1
 80148a4:	f7ec f938 	bl	8000b18 <__aeabi_dcmple>
 80148a8:	b900      	cbnz	r0, 80148ac <GUI_Touch_Processing+0x360c>
 80148aa:	4681      	mov	r9, r0
 80148ac:	ea08 0809 	and.w	r8, r8, r9
 80148b0:	a3c1      	add	r3, pc, #772	; (adr r3, 8014bb8 <GUI_Touch_Processing+0x3918>)
 80148b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b6:	4630      	mov	r0, r6
 80148b8:	4639      	mov	r1, r7
 80148ba:	fa5f f888 	uxtb.w	r8, r8
 80148be:	f04f 0901 	mov.w	r9, #1
 80148c2:	f7ec f933 	bl	8000b2c <__aeabi_dcmpge>
 80148c6:	b900      	cbnz	r0, 80148ca <GUI_Touch_Processing+0x362a>
 80148c8:	4681      	mov	r9, r0
 80148ca:	a3bd      	add	r3, pc, #756	; (adr r3, 8014bc0 <GUI_Touch_Processing+0x3920>)
 80148cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d0:	4630      	mov	r0, r6
 80148d2:	4639      	mov	r1, r7
 80148d4:	f04f 0a01 	mov.w	sl, #1
 80148d8:	f7ec f91e 	bl	8000b18 <__aeabi_dcmple>
 80148dc:	b900      	cbnz	r0, 80148e0 <GUI_Touch_Processing+0x3640>
 80148de:	4682      	mov	sl, r0
 80148e0:	ea09 090a 	and.w	r9, r9, sl
 80148e4:	f019 0f01 	tst.w	r9, #1
 80148e8:	d028      	beq.n	801493c <GUI_Touch_Processing+0x369c>
 80148ea:	f1b8 0f00 	cmp.w	r8, #0
 80148ee:	d025      	beq.n	801493c <GUI_Touch_Processing+0x369c>
					Mode_EL = !Mode_EL;
 80148f0:	4ca3      	ldr	r4, [pc, #652]	; (8014b80 <GUI_Touch_Processing+0x38e0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80148f2:	4ba4      	ldr	r3, [pc, #656]	; (8014b84 <GUI_Touch_Processing+0x38e4>)
					Mode_EL = !Mode_EL;
 80148f4:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80148f6:	48a4      	ldr	r0, [pc, #656]	; (8014b88 <GUI_Touch_Processing+0x38e8>)
					Mode_EL = !Mode_EL;
 80148f8:	2a00      	cmp	r2, #0
 80148fa:	bf0c      	ite	eq
 80148fc:	2201      	moveq	r2, #1
 80148fe:	2200      	movne	r2, #0
 8014900:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8014902:	bf18      	it	ne
 8014904:	4618      	movne	r0, r3
 8014906:	4aa1      	ldr	r2, [pc, #644]	; (8014b8c <GUI_Touch_Processing+0x38ec>)
 8014908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801490c:	f7fa fd24 	bl	800f358 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8014910:	7822      	ldrb	r2, [r4, #0]
 8014912:	4b9f      	ldr	r3, [pc, #636]	; (8014b90 <GUI_Touch_Processing+0x38f0>)
 8014914:	b982      	cbnz	r2, 8014938 <GUI_Touch_Processing+0x3698>
 8014916:	4a9f      	ldr	r2, [pc, #636]	; (8014b94 <GUI_Touch_Processing+0x38f4>)
 8014918:	edd2 0a00 	vldr	s1, [r2]
 801491c:	ed93 0a00 	vldr	s0, [r3]
 8014920:	f007 fd4a 	bl	801c3b8 <Rabs_calc_Factor2_Settings_change>
 8014924:	4b9c      	ldr	r3, [pc, #624]	; (8014b98 <GUI_Touch_Processing+0x38f8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8014926:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8014928:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801492c:	21ca      	movs	r1, #202	; 0xca
 801492e:	20b6      	movs	r0, #182	; 0xb6
 8014930:	f001 f8e4 	bl	8015afc <GUI_Switch_ButtonActive>
 8014934:	f7fc bd42 	b.w	80113bc <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8014938:	4a98      	ldr	r2, [pc, #608]	; (8014b9c <GUI_Touch_Processing+0x38fc>)
 801493a:	e7ed      	b.n	8014918 <GUI_Touch_Processing+0x3678>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 801493c:	a378      	add	r3, pc, #480	; (adr r3, 8014b20 <GUI_Touch_Processing+0x3880>)
 801493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014942:	4630      	mov	r0, r6
 8014944:	4639      	mov	r1, r7
 8014946:	f04f 0901 	mov.w	r9, #1
 801494a:	f7ec f8ef 	bl	8000b2c <__aeabi_dcmpge>
 801494e:	b900      	cbnz	r0, 8014952 <GUI_Touch_Processing+0x36b2>
 8014950:	4681      	mov	r9, r0
 8014952:	a375      	add	r3, pc, #468	; (adr r3, 8014b28 <GUI_Touch_Processing+0x3888>)
 8014954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014958:	4630      	mov	r0, r6
 801495a:	4639      	mov	r1, r7
 801495c:	f04f 0a01 	mov.w	sl, #1
 8014960:	f7ec f8da 	bl	8000b18 <__aeabi_dcmple>
 8014964:	b900      	cbnz	r0, 8014968 <GUI_Touch_Processing+0x36c8>
 8014966:	4682      	mov	sl, r0
 8014968:	ea09 090a 	and.w	r9, r9, sl
 801496c:	f019 0f01 	tst.w	r9, #1
 8014970:	d011      	beq.n	8014996 <GUI_Touch_Processing+0x36f6>
 8014972:	f1b8 0f00 	cmp.w	r8, #0
 8014976:	d00e      	beq.n	8014996 <GUI_Touch_Processing+0x36f6>
					Bluetooth = !Bluetooth;
 8014978:	4b89      	ldr	r3, [pc, #548]	; (8014ba0 <GUI_Touch_Processing+0x3900>)
 801497a:	781a      	ldrb	r2, [r3, #0]
 801497c:	fab2 f282 	clz	r2, r2
 8014980:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 8014982:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8014986:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8014988:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 801498a:	f001 f85d 	bl	8015a48 <GUI_Switch_Button>
					GUI_Up_Panel();
 801498e:	f7fb f94f 	bl	800fc30 <GUI_Up_Panel>
 8014992:	f7fc bd13 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 8014996:	a366      	add	r3, pc, #408	; (adr r3, 8014b30 <GUI_Touch_Processing+0x3890>)
 8014998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801499c:	4620      	mov	r0, r4
 801499e:	4629      	mov	r1, r5
 80149a0:	f04f 0801 	mov.w	r8, #1
 80149a4:	f7ec f8c2 	bl	8000b2c <__aeabi_dcmpge>
 80149a8:	b900      	cbnz	r0, 80149ac <GUI_Touch_Processing+0x370c>
 80149aa:	4680      	mov	r8, r0
 80149ac:	a362      	add	r3, pc, #392	; (adr r3, 8014b38 <GUI_Touch_Processing+0x3898>)
 80149ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b2:	4620      	mov	r0, r4
 80149b4:	4629      	mov	r1, r5
 80149b6:	f04f 0901 	mov.w	r9, #1
 80149ba:	f7ec f8ad 	bl	8000b18 <__aeabi_dcmple>
 80149be:	b900      	cbnz	r0, 80149c2 <GUI_Touch_Processing+0x3722>
 80149c0:	4681      	mov	r9, r0
 80149c2:	ea08 0809 	and.w	r8, r8, r9
 80149c6:	a35e      	add	r3, pc, #376	; (adr r3, 8014b40 <GUI_Touch_Processing+0x38a0>)
 80149c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149cc:	4630      	mov	r0, r6
 80149ce:	4639      	mov	r1, r7
 80149d0:	fa5f f888 	uxtb.w	r8, r8
 80149d4:	f04f 0901 	mov.w	r9, #1
 80149d8:	f7ec f8a8 	bl	8000b2c <__aeabi_dcmpge>
 80149dc:	b900      	cbnz	r0, 80149e0 <GUI_Touch_Processing+0x3740>
 80149de:	4681      	mov	r9, r0
 80149e0:	a359      	add	r3, pc, #356	; (adr r3, 8014b48 <GUI_Touch_Processing+0x38a8>)
 80149e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e6:	4630      	mov	r0, r6
 80149e8:	4639      	mov	r1, r7
 80149ea:	f04f 0a01 	mov.w	sl, #1
 80149ee:	f7ec f893 	bl	8000b18 <__aeabi_dcmple>
 80149f2:	b900      	cbnz	r0, 80149f6 <GUI_Touch_Processing+0x3756>
 80149f4:	4682      	mov	sl, r0
 80149f6:	ea09 090a 	and.w	r9, r9, sl
 80149fa:	f019 0f01 	tst.w	r9, #1
 80149fe:	d003      	beq.n	8014a08 <GUI_Touch_Processing+0x3768>
 8014a00:	f1b8 0f00 	cmp.w	r8, #0
 8014a04:	f47f a91b 	bne.w	8013c3e <GUI_Touch_Processing+0x299e>
				if(Touch_x >= 185*TS_Callib & Touch_x <= (185+54)*TS_Callib & Touch_y >=318*TS_Callib & Touch_y <=(318+54)*TS_Callib) //CRI
 8014a08:	a351      	add	r3, pc, #324	; (adr r3, 8014b50 <GUI_Touch_Processing+0x38b0>)
 8014a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0e:	4620      	mov	r0, r4
 8014a10:	4629      	mov	r1, r5
 8014a12:	f04f 0901 	mov.w	r9, #1
 8014a16:	f7ec f889 	bl	8000b2c <__aeabi_dcmpge>
 8014a1a:	b900      	cbnz	r0, 8014a1e <GUI_Touch_Processing+0x377e>
 8014a1c:	4681      	mov	r9, r0
 8014a1e:	a34e      	add	r3, pc, #312	; (adr r3, 8014b58 <GUI_Touch_Processing+0x38b8>)
 8014a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a24:	4620      	mov	r0, r4
 8014a26:	4629      	mov	r1, r5
 8014a28:	f04f 0a01 	mov.w	sl, #1
 8014a2c:	f7ec f874 	bl	8000b18 <__aeabi_dcmple>
 8014a30:	b900      	cbnz	r0, 8014a34 <GUI_Touch_Processing+0x3794>
 8014a32:	4682      	mov	sl, r0
 8014a34:	ea09 090a 	and.w	r9, r9, sl
 8014a38:	a349      	add	r3, pc, #292	; (adr r3, 8014b60 <GUI_Touch_Processing+0x38c0>)
 8014a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3e:	4630      	mov	r0, r6
 8014a40:	4639      	mov	r1, r7
 8014a42:	fa5f f989 	uxtb.w	r9, r9
 8014a46:	f04f 0a01 	mov.w	sl, #1
 8014a4a:	f7ec f86f 	bl	8000b2c <__aeabi_dcmpge>
 8014a4e:	b900      	cbnz	r0, 8014a52 <GUI_Touch_Processing+0x37b2>
 8014a50:	4682      	mov	sl, r0
 8014a52:	a345      	add	r3, pc, #276	; (adr r3, 8014b68 <GUI_Touch_Processing+0x38c8>)
 8014a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a58:	4630      	mov	r0, r6
 8014a5a:	4639      	mov	r1, r7
 8014a5c:	f04f 0b01 	mov.w	fp, #1
 8014a60:	f7ec f85a 	bl	8000b18 <__aeabi_dcmple>
 8014a64:	b900      	cbnz	r0, 8014a68 <GUI_Touch_Processing+0x37c8>
 8014a66:	4683      	mov	fp, r0
 8014a68:	ea0a 0a0b 	and.w	sl, sl, fp
 8014a6c:	f01a 0f01 	tst.w	sl, #1
 8014a70:	d01c      	beq.n	8014aac <GUI_Touch_Processing+0x380c>
 8014a72:	f1b9 0f00 	cmp.w	r9, #0
 8014a76:	d019      	beq.n	8014aac <GUI_Touch_Processing+0x380c>
					if(!(Color_rend_Field & CRI_CQS)){
 8014a78:	4c4a      	ldr	r4, [pc, #296]	; (8014ba4 <GUI_Touch_Processing+0x3904>)
 8014a7a:	7822      	ldrb	r2, [r4, #0]
 8014a7c:	07d0      	lsls	r0, r2, #31
 8014a7e:	f53c ac9d 	bmi.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8014a82:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 8014a84:	f082 0201 	eor.w	r2, r2, #1
 8014a88:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8014a8a:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8014a8e:	401a      	ands	r2, r3
 8014a90:	20b9      	movs	r0, #185	; 0xb9
 8014a92:	f000 ffaa 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 8014a96:	7822      	ldrb	r2, [r4, #0]
 8014a98:	2301      	movs	r3, #1
 8014a9a:	43d2      	mvns	r2, r2
 8014a9c:	401a      	ands	r2, r3
 8014a9e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8014aa2:	20b9      	movs	r0, #185	; 0xb9
 8014aa4:	f000 ffa1 	bl	80159ea <GUI_RadioBox>
 8014aa8:	f7fc bc88 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 185*TS_Callib & Touch_x <= (185+54)*TS_Callib & Touch_y >=362*TS_Callib & Touch_y <=(362+54)*TS_Callib) //CQS
 8014aac:	a330      	add	r3, pc, #192	; (adr r3, 8014b70 <GUI_Touch_Processing+0x38d0>)
 8014aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab2:	4630      	mov	r0, r6
 8014ab4:	4639      	mov	r1, r7
 8014ab6:	f04f 0a01 	mov.w	sl, #1
 8014aba:	f7ec f837 	bl	8000b2c <__aeabi_dcmpge>
 8014abe:	b900      	cbnz	r0, 8014ac2 <GUI_Touch_Processing+0x3822>
 8014ac0:	4682      	mov	sl, r0
 8014ac2:	a32d      	add	r3, pc, #180	; (adr r3, 8014b78 <GUI_Touch_Processing+0x38d8>)
 8014ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac8:	4630      	mov	r0, r6
 8014aca:	4639      	mov	r1, r7
 8014acc:	f04f 0b01 	mov.w	fp, #1
 8014ad0:	f7ec f822 	bl	8000b18 <__aeabi_dcmple>
 8014ad4:	b900      	cbnz	r0, 8014ad8 <GUI_Touch_Processing+0x3838>
 8014ad6:	4683      	mov	fp, r0
 8014ad8:	ea0a 0a0b 	and.w	sl, sl, fp
 8014adc:	f01a 0f01 	tst.w	sl, #1
 8014ae0:	d072      	beq.n	8014bc8 <GUI_Touch_Processing+0x3928>
 8014ae2:	f1b9 0f00 	cmp.w	r9, #0
 8014ae6:	d06f      	beq.n	8014bc8 <GUI_Touch_Processing+0x3928>
					if((Color_rend_Field&CRI_CQS)){
 8014ae8:	4c2e      	ldr	r4, [pc, #184]	; (8014ba4 <GUI_Touch_Processing+0x3904>)
 8014aea:	7822      	ldrb	r2, [r4, #0]
 8014aec:	07d1      	lsls	r1, r2, #31
 8014aee:	f57c ac65 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8014af2:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 8014af4:	f082 0201 	eor.w	r2, r2, #1
 8014af8:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8014afa:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8014afe:	401a      	ands	r2, r3
 8014b00:	20b9      	movs	r0, #185	; 0xb9
 8014b02:	f000 ff72 	bl	80159ea <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 8014b06:	7822      	ldrb	r2, [r4, #0]
 8014b08:	2301      	movs	r3, #1
 8014b0a:	43d2      	mvns	r2, r2
 8014b0c:	401a      	ands	r2, r3
 8014b0e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8014b12:	20b9      	movs	r0, #185	; 0xb9
 8014b14:	f000 ff69 	bl	80159ea <GUI_RadioBox>
 8014b18:	f7fc bc50 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8014b1c:	f3af 8000 	nop.w
 8014b20:	99999999 	.word	0x99999999
 8014b24:	40863199 	.word	0x40863199
 8014b28:	66666666 	.word	0x66666666
 8014b2c:	408aaa66 	.word	0x408aaa66
 8014b30:	33333333 	.word	0x33333333
 8014b34:	40353333 	.word	0x40353333
 8014b38:	00000000 	.word	0x00000000
 8014b3c:	4084b400 	.word	0x4084b400
 8014b40:	99999999 	.word	0x99999999
 8014b44:	40748999 	.word	0x40748999
 8014b48:	99999999 	.word	0x99999999
 8014b4c:	407cd199 	.word	0x407cd199
 8014b50:	00000000 	.word	0x00000000
 8014b54:	407ea400 	.word	0x407ea400
 8014b58:	cccccccd 	.word	0xcccccccd
 8014b5c:	4083cacc 	.word	0x4083cacc
 8014b60:	99999999 	.word	0x99999999
 8014b64:	408a5599 	.word	0x408a5599
 8014b68:	66666666 	.word	0x66666666
 8014b6c:	408ece66 	.word	0x408ece66
 8014b70:	66666666 	.word	0x66666666
 8014b74:	408dfa66 	.word	0x408dfa66
 8014b78:	99999999 	.word	0x99999999
 8014b7c:	40913999 	.word	0x40913999
 8014b80:	20000a48 	.word	0x20000a48
 8014b84:	08101838 	.word	0x08101838
 8014b88:	08100838 	.word	0x08100838
 8014b8c:	2004d1e8 	.word	0x2004d1e8
 8014b90:	200055d4 	.word	0x200055d4
 8014b94:	200055d0 	.word	0x200055d0
 8014b98:	200055dc 	.word	0x200055dc
 8014b9c:	200055cc 	.word	0x200055cc
 8014ba0:	2008c322 	.word	0x2008c322
 8014ba4:	20005278 	.word	0x20005278
 8014ba8:	cccccccd 	.word	0xcccccccd
 8014bac:	407e24cc 	.word	0x407e24cc
 8014bb0:	33333333 	.word	0x33333333
 8014bb4:	40838b33 	.word	0x40838b33
 8014bb8:	66666666 	.word	0x66666666
 8014bbc:	4080ba66 	.word	0x4080ba66
 8014bc0:	33333333 	.word	0x33333333
 8014bc4:	40853333 	.word	0x40853333
 8014bc8:	9b00      	ldr	r3, [sp, #0]
 8014bca:	9a03      	ldr	r2, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8014bcc:	4620      	mov	r0, r4
 8014bce:	ea03 0902 	and.w	r9, r3, r2
 8014bd2:	4629      	mov	r1, r5
 8014bd4:	a3a4      	add	r3, pc, #656	; (adr r3, 8014e68 <GUI_Touch_Processing+0x3bc8>)
 8014bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bda:	f04f 0a01 	mov.w	sl, #1
 8014bde:	f7eb ffa5 	bl	8000b2c <__aeabi_dcmpge>
 8014be2:	b900      	cbnz	r0, 8014be6 <GUI_Touch_Processing+0x3946>
 8014be4:	4682      	mov	sl, r0
 8014be6:	a3a2      	add	r3, pc, #648	; (adr r3, 8014e70 <GUI_Touch_Processing+0x3bd0>)
 8014be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bec:	4620      	mov	r0, r4
 8014bee:	4629      	mov	r1, r5
 8014bf0:	f04f 0b01 	mov.w	fp, #1
 8014bf4:	f7eb ff90 	bl	8000b18 <__aeabi_dcmple>
 8014bf8:	b900      	cbnz	r0, 8014bfc <GUI_Touch_Processing+0x395c>
 8014bfa:	4683      	mov	fp, r0
 8014bfc:	ea0a 030b 	and.w	r3, sl, fp
 8014c00:	07db      	lsls	r3, r3, #31
 8014c02:	d503      	bpl.n	8014c0c <GUI_Touch_Processing+0x396c>
 8014c04:	f1b9 0f00 	cmp.w	r9, #0
 8014c08:	f47d ab95 	bne.w	8012336 <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8014c0c:	a39a      	add	r3, pc, #616	; (adr r3, 8014e78 <GUI_Touch_Processing+0x3bd8>)
 8014c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c12:	4620      	mov	r0, r4
 8014c14:	4629      	mov	r1, r5
 8014c16:	f04f 0a01 	mov.w	sl, #1
 8014c1a:	f7eb ff87 	bl	8000b2c <__aeabi_dcmpge>
 8014c1e:	b900      	cbnz	r0, 8014c22 <GUI_Touch_Processing+0x3982>
 8014c20:	4682      	mov	sl, r0
 8014c22:	a37f      	add	r3, pc, #508	; (adr r3, 8014e20 <GUI_Touch_Processing+0x3b80>)
 8014c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c28:	4620      	mov	r0, r4
 8014c2a:	4629      	mov	r1, r5
 8014c2c:	f04f 0b01 	mov.w	fp, #1
 8014c30:	f7eb ff72 	bl	8000b18 <__aeabi_dcmple>
 8014c34:	b900      	cbnz	r0, 8014c38 <GUI_Touch_Processing+0x3998>
 8014c36:	4683      	mov	fp, r0
 8014c38:	ea0a 030b 	and.w	r3, sl, fp
 8014c3c:	07d8      	lsls	r0, r3, #31
 8014c3e:	d525      	bpl.n	8014c8c <GUI_Touch_Processing+0x39ec>
 8014c40:	f1b9 0f00 	cmp.w	r9, #0
 8014c44:	d022      	beq.n	8014c8c <GUI_Touch_Processing+0x39ec>
					WriteSDFLASH_t(sdfile_cnt);
 8014c46:	4b82      	ldr	r3, [pc, #520]	; (8014e50 <GUI_Touch_Processing+0x3bb0>)
 8014c48:	2100      	movs	r1, #0
 8014c4a:	8818      	ldrh	r0, [r3, #0]
 8014c4c:	f007 fc46 	bl	801c4dc <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8014c50:	4b80      	ldr	r3, [pc, #512]	; (8014e54 <GUI_Touch_Processing+0x3bb4>)
 8014c52:	781a      	ldrb	r2, [r3, #0]
 8014c54:	4b80      	ldr	r3, [pc, #512]	; (8014e58 <GUI_Touch_Processing+0x3bb8>)
					switch (Prev_Inf_Screen){
 8014c56:	1e51      	subs	r1, r2, #1
 8014c58:	2905      	cmp	r1, #5
 8014c5a:	d804      	bhi.n	8014c66 <GUI_Touch_Processing+0x39c6>
 8014c5c:	e8df f001 	tbb	[pc, r1]
 8014c60:	0a030306 	.word	0x0a030306
 8014c64:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8014c66:	701a      	strb	r2, [r3, #0]
 8014c68:	f7fc bba8 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8014c6c:	2201      	movs	r2, #1
 8014c6e:	701a      	strb	r2, [r3, #0]
 8014c70:	f7fc bba4 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8014c74:	2204      	movs	r2, #4
 8014c76:	701a      	strb	r2, [r3, #0]
 8014c78:	f7fc bba0 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8014c7c:	2206      	movs	r2, #6
 8014c7e:	701a      	strb	r2, [r3, #0]
 8014c80:	f7fc bb9c 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8014c84:	2205      	movs	r2, #5
 8014c86:	701a      	strb	r2, [r3, #0]
 8014c88:	f7fc bb98 	b.w	80113bc <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8014c8c:	a364      	add	r3, pc, #400	; (adr r3, 8014e20 <GUI_Touch_Processing+0x3b80>)
 8014c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c92:	4620      	mov	r0, r4
 8014c94:	4629      	mov	r1, r5
 8014c96:	f04f 0a01 	mov.w	sl, #1
 8014c9a:	f7eb ff47 	bl	8000b2c <__aeabi_dcmpge>
 8014c9e:	b900      	cbnz	r0, 8014ca2 <GUI_Touch_Processing+0x3a02>
 8014ca0:	4682      	mov	sl, r0
 8014ca2:	a361      	add	r3, pc, #388	; (adr r3, 8014e28 <GUI_Touch_Processing+0x3b88>)
 8014ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca8:	4620      	mov	r0, r4
 8014caa:	4629      	mov	r1, r5
 8014cac:	f04f 0b01 	mov.w	fp, #1
 8014cb0:	f7eb ff32 	bl	8000b18 <__aeabi_dcmple>
 8014cb4:	b900      	cbnz	r0, 8014cb8 <GUI_Touch_Processing+0x3a18>
 8014cb6:	4683      	mov	fp, r0
 8014cb8:	ea0a 030b 	and.w	r3, sl, fp
 8014cbc:	07d9      	lsls	r1, r3, #31
 8014cbe:	d503      	bpl.n	8014cc8 <GUI_Touch_Processing+0x3a28>
 8014cc0:	f1b9 0f00 	cmp.w	r9, #0
 8014cc4:	f47c abba 	bne.w	801143c <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8014cc8:	2200      	movs	r2, #0
 8014cca:	4b64      	ldr	r3, [pc, #400]	; (8014e5c <GUI_Touch_Processing+0x3bbc>)
 8014ccc:	4630      	mov	r0, r6
 8014cce:	4639      	mov	r1, r7
 8014cd0:	f04f 0401 	mov.w	r4, #1
 8014cd4:	f7eb ff2a 	bl	8000b2c <__aeabi_dcmpge>
 8014cd8:	b900      	cbnz	r0, 8014cdc <GUI_Touch_Processing+0x3a3c>
 8014cda:	4604      	mov	r4, r0
 8014cdc:	a354      	add	r3, pc, #336	; (adr r3, 8014e30 <GUI_Touch_Processing+0x3b90>)
 8014cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	4639      	mov	r1, r7
 8014ce6:	f04f 0501 	mov.w	r5, #1
 8014cea:	f7eb ff15 	bl	8000b18 <__aeabi_dcmple>
 8014cee:	b900      	cbnz	r0, 8014cf2 <GUI_Touch_Processing+0x3a52>
 8014cf0:	4605      	mov	r5, r0
 8014cf2:	402c      	ands	r4, r5
 8014cf4:	07e2      	lsls	r2, r4, #31
 8014cf6:	f57c ab61 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
 8014cfa:	f1b8 0f00 	cmp.w	r8, #0
 8014cfe:	f47e af70 	bne.w	8013be2 <GUI_Touch_Processing+0x2942>
 8014d02:	f7fc bb5b 	b.w	80113bc <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 8*TS_Callib & Touch_x <= (270)*TS_Callib & Touch_y >=8*TS_Callib & Touch_y <=(470)*TS_Callib) // Information
 8014d06:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8014d0a:	f7eb fc23 	bl	8000554 <__aeabi_i2d>
 8014d0e:	4680      	mov	r8, r0
 8014d10:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8014d14:	4689      	mov	r9, r1
 8014d16:	f7eb fc1d 	bl	8000554 <__aeabi_i2d>
 8014d1a:	a347      	add	r3, pc, #284	; (adr r3, 8014e38 <GUI_Touch_Processing+0x3b98>)
 8014d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d20:	4606      	mov	r6, r0
 8014d22:	460f      	mov	r7, r1
 8014d24:	4640      	mov	r0, r8
 8014d26:	4649      	mov	r1, r9
 8014d28:	f04f 0401 	mov.w	r4, #1
 8014d2c:	f7eb fefe 	bl	8000b2c <__aeabi_dcmpge>
 8014d30:	b900      	cbnz	r0, 8014d34 <GUI_Touch_Processing+0x3a94>
 8014d32:	4604      	mov	r4, r0
 8014d34:	a342      	add	r3, pc, #264	; (adr r3, 8014e40 <GUI_Touch_Processing+0x3ba0>)
 8014d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d3a:	4640      	mov	r0, r8
 8014d3c:	4649      	mov	r1, r9
 8014d3e:	f04f 0501 	mov.w	r5, #1
 8014d42:	f7eb fee9 	bl	8000b18 <__aeabi_dcmple>
 8014d46:	b900      	cbnz	r0, 8014d4a <GUI_Touch_Processing+0x3aaa>
 8014d48:	4605      	mov	r5, r0
 8014d4a:	a33b      	add	r3, pc, #236	; (adr r3, 8014e38 <GUI_Touch_Processing+0x3b98>)
 8014d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d50:	4630      	mov	r0, r6
 8014d52:	4639      	mov	r1, r7
 8014d54:	402c      	ands	r4, r5
 8014d56:	f04f 0501 	mov.w	r5, #1
 8014d5a:	f7eb fee7 	bl	8000b2c <__aeabi_dcmpge>
 8014d5e:	b900      	cbnz	r0, 8014d62 <GUI_Touch_Processing+0x3ac2>
 8014d60:	4605      	mov	r5, r0
 8014d62:	402c      	ands	r4, r5
 8014d64:	07e3      	lsls	r3, r4, #31
 8014d66:	f57c ab29 	bpl.w	80113bc <GUI_Touch_Processing+0x11c>
 8014d6a:	a337      	add	r3, pc, #220	; (adr r3, 8014e48 <GUI_Touch_Processing+0x3ba8>)
 8014d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d70:	4630      	mov	r0, r6
 8014d72:	4639      	mov	r1, r7
 8014d74:	f04f 0401 	mov.w	r4, #1
 8014d78:	f7eb fece 	bl	8000b18 <__aeabi_dcmple>
 8014d7c:	b900      	cbnz	r0, 8014d80 <GUI_Touch_Processing+0x3ae0>
 8014d7e:	4604      	mov	r4, r0
 8014d80:	f014 0fff 	tst.w	r4, #255	; 0xff
 8014d84:	f43c ab1a 	beq.w	80113bc <GUI_Touch_Processing+0x11c>
					GUI_screen_state = preGUI_screen_state;
 8014d88:	4b35      	ldr	r3, [pc, #212]	; (8014e60 <GUI_Touch_Processing+0x3bc0>)
 8014d8a:	781a      	ldrb	r2, [r3, #0]
 8014d8c:	f88b 2000 	strb.w	r2, [fp]
					preGUI_screen_state = Information_Screen;
 8014d90:	2211      	movs	r2, #17
 8014d92:	701a      	strb	r2, [r3, #0]
						switch (Prev_Inf_Screen2){
 8014d94:	4b33      	ldr	r3, [pc, #204]	; (8014e64 <GUI_Touch_Processing+0x3bc4>)
 8014d96:	781b      	ldrb	r3, [r3, #0]
 8014d98:	3b07      	subs	r3, #7
 8014d9a:	2b09      	cmp	r3, #9
 8014d9c:	f63c ab0e 	bhi.w	80113bc <GUI_Touch_Processing+0x11c>
 8014da0:	a201      	add	r2, pc, #4	; (adr r2, 8014da8 <GUI_Touch_Processing+0x3b08>)
 8014da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014da6:	bf00      	nop
 8014da8:	08014dd1 	.word	0x08014dd1
 8014dac:	080113bd 	.word	0x080113bd
 8014db0:	080113bd 	.word	0x080113bd
 8014db4:	080113bd 	.word	0x080113bd
 8014db8:	080113bd 	.word	0x080113bd
 8014dbc:	08014de1 	.word	0x08014de1
 8014dc0:	080113bd 	.word	0x080113bd
 8014dc4:	08014df1 	.word	0x08014df1
 8014dc8:	080113bd 	.word	0x080113bd
 8014dcc:	08014e01 	.word	0x08014e01
						case DataSet1_Screen: GUI_screen_state = DataSet1_Screen; 	Prev_Inf_Screen = Measure_Screen;	break;
 8014dd0:	2307      	movs	r3, #7
 8014dd2:	f88b 3000 	strb.w	r3, [fp]
 8014dd6:	4b1f      	ldr	r3, [pc, #124]	; (8014e54 <GUI_Touch_Processing+0x3bb4>)
 8014dd8:	2201      	movs	r2, #1
 8014dda:	701a      	strb	r2, [r3, #0]
 8014ddc:	f7fc baee 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case GraphSet1_Screen: GUI_screen_state = GraphSet1_Screen; Prev_Inf_Screen = Graph_Screen; 		break;
 8014de0:	230c      	movs	r3, #12
 8014de2:	f88b 3000 	strb.w	r3, [fp]
 8014de6:	4b1b      	ldr	r3, [pc, #108]	; (8014e54 <GUI_Touch_Processing+0x3bb4>)
 8014de8:	2204      	movs	r2, #4
 8014dea:	701a      	strb	r2, [r3, #0]
 8014dec:	f7fc bae6 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case ColorSet1_Screen: GUI_screen_state = ColorSet1_Screen; Prev_Inf_Screen = Color_Screen; break;
 8014df0:	230e      	movs	r3, #14
 8014df2:	f88b 3000 	strb.w	r3, [fp]
 8014df6:	4b17      	ldr	r3, [pc, #92]	; (8014e54 <GUI_Touch_Processing+0x3bb4>)
 8014df8:	2205      	movs	r2, #5
 8014dfa:	701a      	strb	r2, [r3, #0]
 8014dfc:	f7fc bade 	b.w	80113bc <GUI_Touch_Processing+0x11c>
						case ColorRendSet_Screen: GUI_screen_state = ColorRendSet_Screen; Prev_Inf_Screen = Color_Rendition_Screen; break;
 8014e00:	2310      	movs	r3, #16
 8014e02:	f88b 3000 	strb.w	r3, [fp]
 8014e06:	4b13      	ldr	r3, [pc, #76]	; (8014e54 <GUI_Touch_Processing+0x3bb4>)
 8014e08:	2206      	movs	r2, #6
 8014e0a:	701a      	strb	r2, [r3, #0]
 8014e0c:	f7fc bad6 	b.w	80113bc <GUI_Touch_Processing+0x11c>
		default: preGUI_screen_state = Measure_Screen;
 8014e10:	4b13      	ldr	r3, [pc, #76]	; (8014e60 <GUI_Touch_Processing+0x3bc0>)
 8014e12:	2201      	movs	r2, #1
 8014e14:	701a      	strb	r2, [r3, #0]
 8014e16:	f7fc bad1 	b.w	80113bc <GUI_Touch_Processing+0x11c>
 8014e1a:	bf00      	nop
 8014e1c:	f3af 8000 	nop.w
 8014e20:	00000000 	.word	0x00000000
 8014e24:	40623800 	.word	0x40623800
 8014e28:	99999999 	.word	0x99999999
 8014e2c:	40720d99 	.word	0x40720d99
 8014e30:	00000000 	.word	0x00000000
 8014e34:	4073e000 	.word	0x4073e000
 8014e38:	33333333 	.word	0x33333333
 8014e3c:	40353333 	.word	0x40353333
 8014e40:	00000000 	.word	0x00000000
 8014e44:	40865c00 	.word	0x40865c00
 8014e48:	00000000 	.word	0x00000000
 8014e4c:	40937600 	.word	0x40937600
 8014e50:	200052a6 	.word	0x200052a6
 8014e54:	2008c31d 	.word	0x2008c31d
 8014e58:	20005279 	.word	0x20005279
 8014e5c:	406a8000 	.word	0x406a8000
 8014e60:	2000022a 	.word	0x2000022a
 8014e64:	2008c8c0 	.word	0x2008c8c0
 8014e68:	66666666 	.word	0x66666666
 8014e6c:	4081f866 	.word	0x4081f866
 8014e70:	33333333 	.word	0x33333333
 8014e74:	40867133 	.word	0x40867133
 8014e78:	33333333 	.word	0x33333333
 8014e7c:	40053333 	.word	0x40053333

08014e80 <GUI_Bluetooth_Logo>:

extern UART_HandleTypeDef hlpuart1;
extern uint8_t BluetoothStat;

void GUI_Bluetooth_Logo(uint16_t X, uint16_t Y)
{
 8014e80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8014e84:	f101 031e 	add.w	r3, r1, #30
{
 8014e88:	460c      	mov	r4, r1
 8014e8a:	4605      	mov	r5, r0
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8014e8c:	f100 0214 	add.w	r2, r0, #20
 8014e90:	2605      	movs	r6, #5
 8014e92:	f241 3776 	movw	r7, #4982	; 0x1376
 8014e96:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8014e9a:	b29b      	uxth	r3, r3
 8014e9c:	b292      	uxth	r2, r2
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8014e9e:	f105 060a 	add.w	r6, r5, #10
 8014ea2:	f104 0a1a 	add.w	sl, r4, #26
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8014ea6:	f009 ffa3 	bl	801edf0 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8014eaa:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8014eae:	b2b6      	uxth	r6, r6
 8014eb0:	fa1f fa8a 	uxth.w	sl, sl
 8014eb4:	1d21      	adds	r1, r4, #4
 8014eb6:	4653      	mov	r3, sl
 8014eb8:	4632      	mov	r2, r6
 8014eba:	4630      	mov	r0, r6
 8014ebc:	f8cd 8000 	str.w	r8, [sp]
 8014ec0:	b289      	uxth	r1, r1
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8014ec2:	f105 070f 	add.w	r7, r5, #15
 8014ec6:	f104 090b 	add.w	r9, r4, #11
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8014eca:	f009 fd79 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8014ece:	b2bf      	uxth	r7, r7
 8014ed0:	fa1f f989 	uxth.w	r9, r9
 8014ed4:	1d61      	adds	r1, r4, #5
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 8014ed6:	3506      	adds	r5, #6
 8014ed8:	3414      	adds	r4, #20
 8014eda:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8014edc:	464b      	mov	r3, r9
 8014ede:	463a      	mov	r2, r7
 8014ee0:	4630      	mov	r0, r6
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 8014ee2:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8014ee4:	f8cd 8000 	str.w	r8, [sp]
 8014ee8:	b289      	uxth	r1, r1
 8014eea:	f009 fd69 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 8014eee:	464b      	mov	r3, r9
 8014ef0:	463a      	mov	r2, r7
 8014ef2:	4621      	mov	r1, r4
 8014ef4:	4628      	mov	r0, r5
 8014ef6:	f8cd 8000 	str.w	r8, [sp]
 8014efa:	f009 fd61 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+15, Y+20, TFT_White);
 8014efe:	4623      	mov	r3, r4
 8014f00:	463a      	mov	r2, r7
 8014f02:	4649      	mov	r1, r9
 8014f04:	4628      	mov	r0, r5
 8014f06:	f8cd 8000 	str.w	r8, [sp]
 8014f0a:	f009 fd59 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+26, X+15, Y+20,TFT_White);
 8014f0e:	f8cd 8000 	str.w	r8, [sp]
 8014f12:	4623      	mov	r3, r4
 8014f14:	463a      	mov	r2, r7
 8014f16:	4651      	mov	r1, sl
 8014f18:	4630      	mov	r0, r6
 8014f1a:	f009 fd51 	bl	801e9c0 <TFT_DrawLine>
}
 8014f1e:	b002      	add	sp, #8
 8014f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014f24 <GUI_Button_Settings>:


void GUI_Button_Settings(uint16_t X, uint16_t Y)
{
 8014f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014f28:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8014f2c:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014f2e:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8014f32:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8014f36:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014f38:	9600      	str	r6, [sp, #0]
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	b292      	uxth	r2, r2
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 8014f3e:	f105 0608 	add.w	r6, r5, #8
 8014f42:	352f      	adds	r5, #47	; 0x2f
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014f44:	f009 fda4 	bl	801ea90 <TFT_FillRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 8014f48:	b2b6      	uxth	r6, r6
 8014f4a:	b2ad      	uxth	r5, r5
 8014f4c:	2702      	movs	r7, #2
 8014f4e:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8014f52:	f104 0313 	add.w	r3, r4, #19
 8014f56:	f104 010d 	add.w	r1, r4, #13
 8014f5a:	462a      	mov	r2, r5
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	e88d 0180 	stmia.w	sp, {r7, r8}
 8014f62:	b29b      	uxth	r3, r3
 8014f64:	b289      	uxth	r1, r1
 8014f66:	f009 ff43 	bl	801edf0 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+25, X+47, Y+31, 2, TFT_White);
 8014f6a:	f104 031f 	add.w	r3, r4, #31
 8014f6e:	f104 0119 	add.w	r1, r4, #25
 8014f72:	462a      	mov	r2, r5
 8014f74:	4630      	mov	r0, r6
 8014f76:	e88d 0180 	stmia.w	sp, {r7, r8}
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	b289      	uxth	r1, r1
 8014f7e:	f009 ff37 	bl	801edf0 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+37, X+47, Y+43, 2, TFT_White);
 8014f82:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 8014f86:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8014f8a:	e88d 0180 	stmia.w	sp, {r7, r8}
 8014f8e:	b29b      	uxth	r3, r3
 8014f90:	462a      	mov	r2, r5
 8014f92:	b289      	uxth	r1, r1
 8014f94:	4630      	mov	r0, r6
 8014f96:	f009 ff2b 	bl	801edf0 <TFT_DrawFilledRoundedRectangle>
}
 8014f9a:	b002      	add	sp, #8
 8014f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014fa0 <GUI_Button_Down>:

void GUI_Button_Down(uint16_t X, uint16_t Y)
{
 8014fa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014fa4:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8014fa8:	4604      	mov	r4, r0
 8014faa:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014fac:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8014fb0:	f241 3676 	movw	r6, #4982	; 0x1376
 8014fb4:	9600      	str	r6, [sp, #0]
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	b292      	uxth	r2, r2
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8014fba:	f105 0612 	add.w	r6, r5, #18
 8014fbe:	f104 081c 	add.w	r8, r4, #28
 8014fc2:	3528      	adds	r5, #40	; 0x28
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014fc4:	f009 fd64 	bl	801ea90 <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8014fc8:	b2b6      	uxth	r6, r6
 8014fca:	b2ad      	uxth	r5, r5
 8014fcc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014fd0:	fa1f f888 	uxth.w	r8, r8
 8014fd4:	f104 000c 	add.w	r0, r4, #12
 8014fd8:	462b      	mov	r3, r5
 8014fda:	4642      	mov	r2, r8
 8014fdc:	4631      	mov	r1, r6
 8014fde:	9700      	str	r7, [sp, #0]
 8014fe0:	b280      	uxth	r0, r0
 8014fe2:	f009 fced 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 8014fe6:	f104 021d 	add.w	r2, r4, #29
 8014fea:	f104 000d 	add.w	r0, r4, #13
 8014fee:	462b      	mov	r3, r5
 8014ff0:	4631      	mov	r1, r6
 8014ff2:	9700      	str	r7, [sp, #0]
 8014ff4:	b292      	uxth	r2, r2
 8014ff6:	b280      	uxth	r0, r0
 8014ff8:	f009 fce2 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 8014ffc:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8015000:	462b      	mov	r3, r5
 8015002:	4642      	mov	r2, r8
 8015004:	4631      	mov	r1, r6
 8015006:	9700      	str	r7, [sp, #0]
 8015008:	b280      	uxth	r0, r0
 801500a:	f009 fcd9 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 801500e:	f104 021b 	add.w	r2, r4, #27
 8015012:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8015016:	9700      	str	r7, [sp, #0]
 8015018:	462b      	mov	r3, r5
 801501a:	b292      	uxth	r2, r2
 801501c:	4631      	mov	r1, r6
 801501e:	b280      	uxth	r0, r0
 8015020:	f009 fcce 	bl	801e9c0 <TFT_DrawLine>
}
 8015024:	b002      	add	sp, #8
 8015026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801502a <GUI_Button_Down_Active>:

void GUI_Button_Down_Active(uint16_t X, uint16_t Y, uint8_t Active)
{
 801502a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801502e:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8015032:	4604      	mov	r4, r0
 8015034:	460d      	mov	r5, r1
 8015036:	f100 0636 	add.w	r6, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 801503a:	2a00      	cmp	r2, #0
 801503c:	d03c      	beq.n	80150b8 <GUI_Button_Down_Active+0x8e>
 801503e:	f241 3276 	movw	r2, #4982	; 0x1376
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8015042:	9200      	str	r2, [sp, #0]
 8015044:	b29b      	uxth	r3, r3
 8015046:	b2b2      	uxth	r2, r6
	
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8015048:	f104 081c 	add.w	r8, r4, #28
 801504c:	f105 0612 	add.w	r6, r5, #18
 8015050:	3528      	adds	r5, #40	; 0x28
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8015052:	f009 fd1d 	bl	801ea90 <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8015056:	b2b6      	uxth	r6, r6
 8015058:	b2ad      	uxth	r5, r5
 801505a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801505e:	fa1f f888 	uxth.w	r8, r8
 8015062:	f104 000c 	add.w	r0, r4, #12
 8015066:	462b      	mov	r3, r5
 8015068:	4642      	mov	r2, r8
 801506a:	4631      	mov	r1, r6
 801506c:	9700      	str	r7, [sp, #0]
 801506e:	b280      	uxth	r0, r0
 8015070:	f009 fca6 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 8015074:	f104 021d 	add.w	r2, r4, #29
 8015078:	f104 000d 	add.w	r0, r4, #13
 801507c:	462b      	mov	r3, r5
 801507e:	4631      	mov	r1, r6
 8015080:	9700      	str	r7, [sp, #0]
 8015082:	b292      	uxth	r2, r2
 8015084:	b280      	uxth	r0, r0
 8015086:	f009 fc9b 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 801508a:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 801508e:	462b      	mov	r3, r5
 8015090:	4642      	mov	r2, r8
 8015092:	4631      	mov	r1, r6
 8015094:	9700      	str	r7, [sp, #0]
 8015096:	b280      	uxth	r0, r0
 8015098:	f009 fc92 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 801509c:	f104 021b 	add.w	r2, r4, #27
 80150a0:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80150a4:	9700      	str	r7, [sp, #0]
 80150a6:	462b      	mov	r3, r5
 80150a8:	b292      	uxth	r2, r2
 80150aa:	4631      	mov	r1, r6
 80150ac:	b280      	uxth	r0, r0
 80150ae:	f009 fc87 	bl	801e9c0 <TFT_DrawLine>
}
 80150b2:	b002      	add	sp, #8
 80150b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80150b8:	f64d 721c 	movw	r2, #57116	; 0xdf1c
 80150bc:	e7c1      	b.n	8015042 <GUI_Button_Down_Active+0x18>

080150be <GUI_Button_Right>:

void GUI_Button_Right(uint16_t X, uint16_t Y)
{
 80150be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c2:	4604      	mov	r4, r0
 80150c4:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80150c6:	f241 3676 	movw	r6, #4982	; 0x1376
 80150ca:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80150ce:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80150d2:	9600      	str	r6, [sp, #0]
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80150d4:	f104 0a13 	add.w	sl, r4, #19
 80150d8:	f105 0b0c 	add.w	fp, r5, #12
 80150dc:	f104 0928 	add.w	r9, r4, #40	; 0x28
 80150e0:	f105 061b 	add.w	r6, r5, #27
 80150e4:	b2b6      	uxth	r6, r6
 80150e6:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80150ea:	fa1f fa8a 	uxth.w	sl, sl
 80150ee:	fa1f fb8b 	uxth.w	fp, fp
 80150f2:	fa1f f989 	uxth.w	r9, r9
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	b292      	uxth	r2, r2
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80150fa:	f104 0712 	add.w	r7, r4, #18
 80150fe:	3427      	adds	r4, #39	; 0x27
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8015100:	f009 fcc6 	bl	801ea90 <TFT_FillRectangle>
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8015104:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8015106:	4633      	mov	r3, r6
 8015108:	464a      	mov	r2, r9
 801510a:	4659      	mov	r1, fp
 801510c:	4650      	mov	r0, sl
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 801510e:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8015110:	f8cd 8000 	str.w	r8, [sp]
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8015114:	352a      	adds	r5, #42	; 0x2a
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8015116:	f009 fc53 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 801511a:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 801511c:	4633      	mov	r3, r6
 801511e:	4622      	mov	r2, r4
 8015120:	4659      	mov	r1, fp
 8015122:	4638      	mov	r0, r7
 8015124:	f8cd 8000 	str.w	r8, [sp]
 8015128:	f009 fc4a 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 801512c:	462b      	mov	r3, r5
 801512e:	4652      	mov	r2, sl
 8015130:	4631      	mov	r1, r6
 8015132:	4648      	mov	r0, r9
 8015134:	f8cd 8000 	str.w	r8, [sp]
 8015138:	f009 fc42 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+39, Y+27, X+18, Y+42, TFT_White);
 801513c:	f8cd 8000 	str.w	r8, [sp]
 8015140:	462b      	mov	r3, r5
 8015142:	463a      	mov	r2, r7
 8015144:	4631      	mov	r1, r6
 8015146:	4620      	mov	r0, r4
 8015148:	f009 fc3a 	bl	801e9c0 <TFT_DrawLine>
}
 801514c:	b003      	add	sp, #12
 801514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015152 <GUI_Button_TFT_On_Off>:

void GUI_Button_TFT_On_Off(uint16_t X, uint16_t Y)
{
 8015152:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8015154:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8015158:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801515c:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8015160:	4604      	mov	r4, r0
 8015162:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8015164:	9600      	str	r6, [sp, #0]
 8015166:	b29b      	uxth	r3, r3
 8015168:	b292      	uxth	r2, r2
 801516a:	f009 fc91 	bl	801ea90 <TFT_FillRectangle>
	TFT_DrawRectangle(X+8, Y+16, X+48, Y+39, TFT_White);
 801516e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8015172:	f105 0327 	add.w	r3, r5, #39	; 0x27
 8015176:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801517a:	f105 0110 	add.w	r1, r5, #16
 801517e:	f104 0008 	add.w	r0, r4, #8
 8015182:	9600      	str	r6, [sp, #0]
 8015184:	b29b      	uxth	r3, r3
 8015186:	b292      	uxth	r2, r2
 8015188:	b289      	uxth	r1, r1
 801518a:	b280      	uxth	r0, r0
 801518c:	f009 fc9a 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawLine(X+6, Y+5, X+51, Y+48, TFT_White);
 8015190:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8015194:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8015198:	1d69      	adds	r1, r5, #5
 801519a:	1da0      	adds	r0, r4, #6
 801519c:	9600      	str	r6, [sp, #0]
 801519e:	b29b      	uxth	r3, r3
 80151a0:	b292      	uxth	r2, r2
 80151a2:	b289      	uxth	r1, r1
 80151a4:	b280      	uxth	r0, r0
 80151a6:	f009 fc0b 	bl	801e9c0 <TFT_DrawLine>
}
 80151aa:	b002      	add	sp, #8
 80151ac:	bd70      	pop	{r4, r5, r6, pc}

080151ae <GUI_Button_TFT_Rotate>:

void GUI_Button_TFT_Rotate(uint16_t X, uint16_t Y)
{
 80151ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80151b2:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 80151b6:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80151b8:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80151bc:	f241 3676 	movw	r6, #4982	; 0x1376
{
 80151c0:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80151c2:	9600      	str	r6, [sp, #0]
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	b292      	uxth	r2, r2
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 80151c8:	f105 071c 	add.w	r7, r5, #28
 80151cc:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80151d0:	f009 fc5e 	bl	801ea90 <TFT_FillRectangle>
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 80151d4:	b2bf      	uxth	r7, r7
 80151d6:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 80151da:	f104 0109 	add.w	r1, r4, #9
 80151de:	f105 0009 	add.w	r0, r5, #9
 80151e2:	463a      	mov	r2, r7
 80151e4:	9600      	str	r6, [sp, #0]
 80151e6:	b29b      	uxth	r3, r3
 80151e8:	b289      	uxth	r1, r1
 80151ea:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 80151ec:	f104 081e 	add.w	r8, r4, #30
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 80151f0:	f009 fc68 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 80151f4:	fa1f f888 	uxth.w	r8, r8
 80151f8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80151fc:	f105 0231 	add.w	r2, r5, #49	; 0x31
 8015200:	f105 0012 	add.w	r0, r5, #18
 8015204:	4641      	mov	r1, r8
 8015206:	9600      	str	r6, [sp, #0]
 8015208:	b29b      	uxth	r3, r3
 801520a:	b292      	uxth	r2, r2
 801520c:	b280      	uxth	r0, r0
 801520e:	f009 fc59 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
	
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8015212:	f105 0921 	add.w	r9, r5, #33	; 0x21
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8015216:	fa0f f188 	sxth.w	r1, r8
 801521a:	b238      	sxth	r0, r7
 801521c:	9600      	str	r6, [sp, #0]
 801521e:	2302      	movs	r3, #2
 8015220:	2210      	movs	r2, #16
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8015222:	f105 071d 	add.w	r7, r5, #29
 8015226:	f104 080e 	add.w	r8, r4, #14
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 801522a:	f009 fa5d 	bl	801e6e8 <TFT_DrawCircleCorner>
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 801522e:	b2bf      	uxth	r7, r7
 8015230:	fa1f f888 	uxth.w	r8, r8
 8015234:	fa1f f989 	uxth.w	r9, r9
 8015238:	f104 0313 	add.w	r3, r4, #19
 801523c:	464a      	mov	r2, r9
 801523e:	4641      	mov	r1, r8
 8015240:	4638      	mov	r0, r7
 8015242:	9600      	str	r6, [sp, #0]
 8015244:	b29b      	uxth	r3, r3
 8015246:	f009 fbbb 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 801524a:	f104 030b 	add.w	r3, r4, #11
 801524e:	464a      	mov	r2, r9
 8015250:	4641      	mov	r1, r8
 8015252:	4638      	mov	r0, r7
 8015254:	9600      	str	r6, [sp, #0]
 8015256:	b29b      	uxth	r3, r3
	
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8015258:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 801525c:	f104 081d 	add.w	r8, r4, #29
 8015260:	3419      	adds	r4, #25
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8015262:	f009 fbad 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8015266:	b2bf      	uxth	r7, r7
 8015268:	fa1f f888 	uxth.w	r8, r8
 801526c:	b2a4      	uxth	r4, r4
 801526e:	f105 0227 	add.w	r2, r5, #39	; 0x27
 8015272:	4623      	mov	r3, r4
 8015274:	4641      	mov	r1, r8
 8015276:	4638      	mov	r0, r7
 8015278:	9600      	str	r6, [sp, #0]
 801527a:	b292      	uxth	r2, r2
 801527c:	f009 fba0 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+47, Y+25, TFT_White);
 8015280:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 8015284:	9600      	str	r6, [sp, #0]
 8015286:	4623      	mov	r3, r4
 8015288:	b292      	uxth	r2, r2
 801528a:	4641      	mov	r1, r8
 801528c:	4638      	mov	r0, r7
 801528e:	f009 fb97 	bl	801e9c0 <TFT_DrawLine>
}
 8015292:	b003      	add	sp, #12
 8015294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015298 <GUI_Button_SD_Card>:

void GUI_Button_SD_Card(uint16_t X, uint16_t Y, uint8_t Active)
{
 8015298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801529c:	b085      	sub	sp, #20
 801529e:	4604      	mov	r4, r0
	
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 80152a0:	9203      	str	r2, [sp, #12]
 80152a2:	9e03      	ldr	r6, [sp, #12]
{
 80152a4:	460d      	mov	r5, r1
 80152a6:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80152aa:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 80152ae:	2e00      	cmp	r6, #0
 80152b0:	f000 80b6 	beq.w	8015420 <GUI_Button_SD_Card+0x188>
 80152b4:	f241 3676 	movw	r6, #4982	; 0x1376
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
	
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80152b8:	f104 0715 	add.w	r7, r4, #21
 80152bc:	f105 0b05 	add.w	fp, r5, #5
 80152c0:	f104 092e 	add.w	r9, r4, #46	; 0x2e
 80152c4:	f105 0a07 	add.w	sl, r5, #7
 80152c8:	b2bf      	uxth	r7, r7
 80152ca:	fa1f f989 	uxth.w	r9, r9
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80152ce:	9600      	str	r6, [sp, #0]
 80152d0:	b29b      	uxth	r3, r3
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80152d2:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80152d6:	b292      	uxth	r2, r2
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80152d8:	fa1f fb8b 	uxth.w	fp, fp
 80152dc:	fa1f fa8a 	uxth.w	sl, sl
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80152e0:	f009 fbd6 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 80152e4:	f105 0832 	add.w	r8, r5, #50	; 0x32
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80152e8:	464a      	mov	r2, r9
 80152ea:	4638      	mov	r0, r7
 80152ec:	4653      	mov	r3, sl
 80152ee:	4659      	mov	r1, fp
 80152f0:	9600      	str	r6, [sp, #0]
 80152f2:	f009 fbcd 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 80152f6:	fa1f f888 	uxth.w	r8, r8
 80152fa:	f105 0108 	add.w	r1, r5, #8
 80152fe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8015302:	4643      	mov	r3, r8
 8015304:	464a      	mov	r2, r9
 8015306:	b289      	uxth	r1, r1
 8015308:	b280      	uxth	r0, r0
 801530a:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 801530c:	f104 090a 	add.w	r9, r4, #10
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8015310:	f009 fbbe 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8015314:	fa1f f989 	uxth.w	r9, r9
 8015318:	f105 0130 	add.w	r1, r5, #48	; 0x30
 801531c:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8015320:	4643      	mov	r3, r8
 8015322:	464a      	mov	r2, r9
 8015324:	b289      	uxth	r1, r1
 8015326:	b280      	uxth	r0, r0
 8015328:	9600      	str	r6, [sp, #0]
 801532a:	f009 fbb1 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+10, Y+16, X+12, Y+47, TFT_White);
 801532e:	f104 030c 	add.w	r3, r4, #12
 8015332:	b29b      	uxth	r3, r3
 8015334:	f105 0810 	add.w	r8, r5, #16
 8015338:	fa1f f888 	uxth.w	r8, r8
 801533c:	9302      	str	r3, [sp, #8]
 801533e:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 8015342:	4641      	mov	r1, r8
 8015344:	4648      	mov	r0, r9
 8015346:	b29b      	uxth	r3, r3
 8015348:	9a02      	ldr	r2, [sp, #8]
 801534a:	9600      	str	r6, [sp, #0]
 801534c:	f009 fba0 	bl	801ea90 <TFT_FillRectangle>
	
	TFT_DrawLine(X+10, Y+16, X+21, Y+5, TFT_White);
 8015350:	463a      	mov	r2, r7
 8015352:	4641      	mov	r1, r8
 8015354:	4648      	mov	r0, r9
 8015356:	465b      	mov	r3, fp
 8015358:	9600      	str	r6, [sp, #0]
 801535a:	f009 fb31 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+16, X+21, Y+6, TFT_White);
 801535e:	1dab      	adds	r3, r5, #6
 8015360:	f104 000b 	add.w	r0, r4, #11
 8015364:	463a      	mov	r2, r7
 8015366:	4641      	mov	r1, r8
 8015368:	b29b      	uxth	r3, r3
 801536a:	b280      	uxth	r0, r0
 801536c:	9600      	str	r6, [sp, #0]
 801536e:	f009 fb27 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
	
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8015372:	f105 0913 	add.w	r9, r5, #19
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8015376:	463a      	mov	r2, r7
 8015378:	4641      	mov	r1, r8
 801537a:	4653      	mov	r3, sl
 801537c:	9802      	ldr	r0, [sp, #8]
 801537e:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8015380:	f105 080d 	add.w	r8, r5, #13
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8015384:	f009 fb1c 	bl	801e9c0 <TFT_DrawLine>
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8015388:	fa1f f888 	uxth.w	r8, r8
 801538c:	fa1f f989 	uxth.w	r9, r9
 8015390:	f104 0013 	add.w	r0, r4, #19
 8015394:	463a      	mov	r2, r7
 8015396:	464b      	mov	r3, r9
 8015398:	4641      	mov	r1, r8
 801539a:	b280      	uxth	r0, r0
 801539c:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 801539e:	f104 071b 	add.w	r7, r4, #27
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 80153a2:	f009 fb75 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 80153a6:	b2bf      	uxth	r7, r7
 80153a8:	f104 0019 	add.w	r0, r4, #25
 80153ac:	464b      	mov	r3, r9
 80153ae:	463a      	mov	r2, r7
 80153b0:	4641      	mov	r1, r8
 80153b2:	b280      	uxth	r0, r0
 80153b4:	9600      	str	r6, [sp, #0]
 80153b6:	f009 fb6b 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+31, Y+13, X+33, Y+19, TFT_White);
 80153ba:	f104 0221 	add.w	r2, r4, #33	; 0x21
 80153be:	f104 001f 	add.w	r0, r4, #31
 80153c2:	464b      	mov	r3, r9
 80153c4:	b292      	uxth	r2, r2
 80153c6:	4641      	mov	r1, r8
 80153c8:	b280      	uxth	r0, r0
 80153ca:	9600      	str	r6, [sp, #0]
 80153cc:	f009 fb60 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+37, Y+13, X+39, Y+19, TFT_White);
 80153d0:	f104 0227 	add.w	r2, r4, #39	; 0x27
 80153d4:	f104 0025 	add.w	r0, r4, #37	; 0x25
 80153d8:	464b      	mov	r3, r9
 80153da:	b292      	uxth	r2, r2
 80153dc:	4641      	mov	r1, r8
 80153de:	b280      	uxth	r0, r0
 80153e0:	9600      	str	r6, [sp, #0]
 80153e2:	f009 fb55 	bl	801ea90 <TFT_FillRectangle>
	
	TFT_SetFont(&Font20);
 80153e6:	4811      	ldr	r0, [pc, #68]	; (801542c <GUI_Button_SD_Card+0x194>)
 80153e8:	f009 fdf6 	bl	801efd8 <TFT_SetFont>
	TFT_SetTextColor(TFT_White);
 80153ec:	4630      	mov	r0, r6
 80153ee:	f009 fdf9 	bl	801efe4 <TFT_SetTextColor>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 80153f2:	9b03      	ldr	r3, [sp, #12]
 80153f4:	b1bb      	cbz	r3, 8015426 <GUI_Button_SD_Card+0x18e>
 80153f6:	f241 3076 	movw	r0, #4982	; 0x1376
	TFT_DrawChar(X+16, Y+28, 'S');
 80153fa:	351c      	adds	r5, #28
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 80153fc:	f009 fdf8 	bl	801eff0 <TFT_SetBackColor>
	TFT_DrawChar(X+16, Y+28, 'S');
 8015400:	b2ad      	uxth	r5, r5
 8015402:	f104 0010 	add.w	r0, r4, #16
 8015406:	4629      	mov	r1, r5
 8015408:	2253      	movs	r2, #83	; 0x53
 801540a:	b280      	uxth	r0, r0
 801540c:	f009 feda 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+28, 'D');
 8015410:	2244      	movs	r2, #68	; 0x44
 8015412:	4629      	mov	r1, r5
 8015414:	4638      	mov	r0, r7
}
 8015416:	b005      	add	sp, #20
 8015418:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawChar(X+27, Y+28, 'D');
 801541c:	f009 bed2 	b.w	801f1c4 <TFT_DrawChar>
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8015420:	f64d 761c 	movw	r6, #57116	; 0xdf1c
 8015424:	e748      	b.n	80152b8 <GUI_Button_SD_Card+0x20>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8015426:	f64d 701c 	movw	r0, #57116	; 0xdf1c
 801542a:	e7e6      	b.n	80153fa <GUI_Button_SD_Card+0x162>
 801542c:	200001e0 	.word	0x200001e0

08015430 <GUI_Button_Measure_Start_Pause>:

void GUI_Button_Measure_Start_Pause(uint16_t X, uint16_t Y)
{
 8015430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015434:	b085      	sub	sp, #20
 8015436:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8015438:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801543c:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8015440:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8015444:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8015446:	9600      	str	r6, [sp, #0]
 8015448:	b29b      	uxth	r3, r3
 801544a:	b292      	uxth	r2, r2
	
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 801544c:	f104 090b 	add.w	r9, r4, #11
 8015450:	f104 072b 	add.w	r7, r4, #43	; 0x2b
 8015454:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8015458:	f009 fb1a 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 801545c:	fa1f f989 	uxth.w	r9, r9
 8015460:	b2bf      	uxth	r7, r7
 8015462:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8015466:	f105 0023 	add.w	r0, r5, #35	; 0x23
 801546a:	463b      	mov	r3, r7
 801546c:	4649      	mov	r1, r9
 801546e:	9600      	str	r6, [sp, #0]
 8015470:	b292      	uxth	r2, r2
 8015472:	b280      	uxth	r0, r0
 8015474:	f009 fb0c 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8015478:	f105 0232 	add.w	r2, r5, #50	; 0x32
 801547c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8015480:	463b      	mov	r3, r7
 8015482:	4649      	mov	r1, r9
 8015484:	9600      	str	r6, [sp, #0]
 8015486:	b292      	uxth	r2, r2
 8015488:	b280      	uxth	r0, r0
	
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 801548a:	f105 0806 	add.w	r8, r5, #6
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 801548e:	f009 faff 	bl	801ea90 <TFT_FillRectangle>
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8015492:	fa1f f888 	uxth.w	r8, r8
 8015496:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 801549a:	f105 0a1e 	add.w	sl, r5, #30
 801549e:	f104 0b1b 	add.w	fp, r4, #27
 80154a2:	fa1f fa8a 	uxth.w	sl, sl
 80154a6:	fa1f fb8b 	uxth.w	fp, fp
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	4642      	mov	r2, r8
 80154ae:	4649      	mov	r1, r9
 80154b0:	4640      	mov	r0, r8
 80154b2:	9600      	str	r6, [sp, #0]
 80154b4:	9303      	str	r3, [sp, #12]
 80154b6:	f009 fa83 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 80154ba:	465b      	mov	r3, fp
 80154bc:	4652      	mov	r2, sl
 80154be:	4649      	mov	r1, r9
 80154c0:	4640      	mov	r0, r8
 80154c2:	9600      	str	r6, [sp, #0]
 80154c4:	f009 fa7c 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+44, X+30, Y+27, TFT_White);
 80154c8:	465b      	mov	r3, fp
 80154ca:	4652      	mov	r2, sl
 80154cc:	9903      	ldr	r1, [sp, #12]
 80154ce:	9600      	str	r6, [sp, #0]
 80154d0:	4640      	mov	r0, r8
 80154d2:	f009 fa75 	bl	801e9c0 <TFT_DrawLine>
	
	//paint white
	TFT_DrawLine(X+7, Y+12, X+7, Y+43, TFT_White);
 80154d6:	f104 080c 	add.w	r8, r4, #12
 80154da:	1dea      	adds	r2, r5, #7
 80154dc:	b292      	uxth	r2, r2
 80154de:	fa1f f888 	uxth.w	r8, r8
 80154e2:	463b      	mov	r3, r7
 80154e4:	4641      	mov	r1, r8
 80154e6:	4610      	mov	r0, r2
 80154e8:	9600      	str	r6, [sp, #0]
 80154ea:	f009 fa69 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+8, Y+12, X+8, Y+43, TFT_White);
 80154ee:	f105 0208 	add.w	r2, r5, #8
 80154f2:	b292      	uxth	r2, r2
 80154f4:	463b      	mov	r3, r7
 80154f6:	4641      	mov	r1, r8
 80154f8:	4610      	mov	r0, r2
 80154fa:	9600      	str	r6, [sp, #0]
 80154fc:	f009 fa60 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+9, Y+13, X+9, Y+42, TFT_White);
 8015500:	f105 0209 	add.w	r2, r5, #9
 8015504:	b292      	uxth	r2, r2
 8015506:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 801550a:	f104 010d 	add.w	r1, r4, #13
 801550e:	4610      	mov	r0, r2
 8015510:	9600      	str	r6, [sp, #0]
 8015512:	b29b      	uxth	r3, r3
 8015514:	b289      	uxth	r1, r1
 8015516:	f009 fa53 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+14, X+10, Y+41, TFT_White);
 801551a:	f104 080e 	add.w	r8, r4, #14
 801551e:	f105 020a 	add.w	r2, r5, #10
 8015522:	b292      	uxth	r2, r2
 8015524:	fa1f f888 	uxth.w	r8, r8
 8015528:	f104 0329 	add.w	r3, r4, #41	; 0x29
 801552c:	4641      	mov	r1, r8
 801552e:	4610      	mov	r0, r2
 8015530:	9600      	str	r6, [sp, #0]
 8015532:	b29b      	uxth	r3, r3
 8015534:	f009 fa44 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+14, X+11, Y+40, TFT_White);
 8015538:	f104 0728 	add.w	r7, r4, #40	; 0x28
 801553c:	f105 020b 	add.w	r2, r5, #11
 8015540:	b292      	uxth	r2, r2
 8015542:	b2bf      	uxth	r7, r7
 8015544:	463b      	mov	r3, r7
 8015546:	4641      	mov	r1, r8
 8015548:	4610      	mov	r0, r2
 801554a:	9600      	str	r6, [sp, #0]
 801554c:	f009 fa38 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+15, X+12, Y+40, TFT_White);
 8015550:	f105 020c 	add.w	r2, r5, #12
 8015554:	b292      	uxth	r2, r2
 8015556:	f104 010f 	add.w	r1, r4, #15
 801555a:	463b      	mov	r3, r7
 801555c:	4610      	mov	r0, r2
 801555e:	9600      	str	r6, [sp, #0]
 8015560:	b289      	uxth	r1, r1
 8015562:	f009 fa2d 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+16, X+13, Y+39, TFT_White);
 8015566:	f104 0810 	add.w	r8, r4, #16
 801556a:	f105 020d 	add.w	r2, r5, #13
 801556e:	b292      	uxth	r2, r2
 8015570:	fa1f f888 	uxth.w	r8, r8
 8015574:	f104 0327 	add.w	r3, r4, #39	; 0x27
 8015578:	4641      	mov	r1, r8
 801557a:	4610      	mov	r0, r2
 801557c:	9600      	str	r6, [sp, #0]
 801557e:	b29b      	uxth	r3, r3
 8015580:	f009 fa1e 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+16, X+14, Y+38, TFT_White);
 8015584:	f104 0726 	add.w	r7, r4, #38	; 0x26
 8015588:	f105 020e 	add.w	r2, r5, #14
 801558c:	b292      	uxth	r2, r2
 801558e:	b2bf      	uxth	r7, r7
 8015590:	463b      	mov	r3, r7
 8015592:	4641      	mov	r1, r8
 8015594:	4610      	mov	r0, r2
 8015596:	9600      	str	r6, [sp, #0]
 8015598:	f009 fa12 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+17, X+15, Y+38, TFT_White);
 801559c:	f105 020f 	add.w	r2, r5, #15
 80155a0:	b292      	uxth	r2, r2
 80155a2:	f104 0111 	add.w	r1, r4, #17
 80155a6:	463b      	mov	r3, r7
 80155a8:	4610      	mov	r0, r2
 80155aa:	9600      	str	r6, [sp, #0]
 80155ac:	b289      	uxth	r1, r1
 80155ae:	f009 fa07 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+18, X+16, Y+37, TFT_White);
 80155b2:	f104 0812 	add.w	r8, r4, #18
 80155b6:	f105 0210 	add.w	r2, r5, #16
 80155ba:	b292      	uxth	r2, r2
 80155bc:	fa1f f888 	uxth.w	r8, r8
 80155c0:	f104 0325 	add.w	r3, r4, #37	; 0x25
 80155c4:	4641      	mov	r1, r8
 80155c6:	4610      	mov	r0, r2
 80155c8:	9600      	str	r6, [sp, #0]
 80155ca:	b29b      	uxth	r3, r3
 80155cc:	f009 f9f8 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+18, X+17, Y+36, TFT_White);
 80155d0:	f104 0724 	add.w	r7, r4, #36	; 0x24
 80155d4:	f105 0211 	add.w	r2, r5, #17
 80155d8:	b292      	uxth	r2, r2
 80155da:	b2bf      	uxth	r7, r7
 80155dc:	463b      	mov	r3, r7
 80155de:	4641      	mov	r1, r8
 80155e0:	4610      	mov	r0, r2
 80155e2:	9600      	str	r6, [sp, #0]
 80155e4:	f009 f9ec 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+19, X+18, Y+36, TFT_White);
 80155e8:	f105 0212 	add.w	r2, r5, #18
 80155ec:	b292      	uxth	r2, r2
 80155ee:	f104 0113 	add.w	r1, r4, #19
 80155f2:	463b      	mov	r3, r7
 80155f4:	4610      	mov	r0, r2
 80155f6:	9600      	str	r6, [sp, #0]
 80155f8:	b289      	uxth	r1, r1
 80155fa:	f009 f9e1 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+20, X+19, Y+35, TFT_White);
 80155fe:	f104 0714 	add.w	r7, r4, #20
 8015602:	f105 0213 	add.w	r2, r5, #19
 8015606:	b292      	uxth	r2, r2
 8015608:	b2bf      	uxth	r7, r7
 801560a:	f104 0323 	add.w	r3, r4, #35	; 0x23
 801560e:	4639      	mov	r1, r7
 8015610:	4610      	mov	r0, r2
 8015612:	9600      	str	r6, [sp, #0]
 8015614:	b29b      	uxth	r3, r3
 8015616:	f009 f9d3 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+20, X+20, Y+34, TFT_White);
 801561a:	f105 0214 	add.w	r2, r5, #20
 801561e:	b292      	uxth	r2, r2
 8015620:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8015624:	4639      	mov	r1, r7
 8015626:	4610      	mov	r0, r2
 8015628:	9600      	str	r6, [sp, #0]
 801562a:	b29b      	uxth	r3, r3
 801562c:	f009 f9c8 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+21, X+21, Y+33, TFT_White);
 8015630:	f104 0821 	add.w	r8, r4, #33	; 0x21
 8015634:	f105 0215 	add.w	r2, r5, #21
 8015638:	b292      	uxth	r2, r2
 801563a:	fa1f f888 	uxth.w	r8, r8
 801563e:	f104 0115 	add.w	r1, r4, #21
 8015642:	4643      	mov	r3, r8
 8015644:	4610      	mov	r0, r2
 8015646:	9600      	str	r6, [sp, #0]
 8015648:	b289      	uxth	r1, r1
 801564a:	f009 f9b9 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+22, X+22, Y+33, TFT_White);
 801564e:	f104 0716 	add.w	r7, r4, #22
 8015652:	f105 0216 	add.w	r2, r5, #22
 8015656:	b292      	uxth	r2, r2
 8015658:	b2bf      	uxth	r7, r7
 801565a:	4643      	mov	r3, r8
 801565c:	4639      	mov	r1, r7
 801565e:	4610      	mov	r0, r2
 8015660:	9600      	str	r6, [sp, #0]
 8015662:	f009 f9ad 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+22, X+23, Y+32, TFT_White);
 8015666:	f105 0217 	add.w	r2, r5, #23
 801566a:	b292      	uxth	r2, r2
 801566c:	f104 0320 	add.w	r3, r4, #32
 8015670:	4639      	mov	r1, r7
 8015672:	4610      	mov	r0, r2
 8015674:	9600      	str	r6, [sp, #0]
 8015676:	b29b      	uxth	r3, r3
 8015678:	f009 f9a2 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+23, X+24, Y+31, TFT_White);
 801567c:	f104 081f 	add.w	r8, r4, #31
 8015680:	f105 0218 	add.w	r2, r5, #24
 8015684:	b292      	uxth	r2, r2
 8015686:	fa1f f888 	uxth.w	r8, r8
 801568a:	f104 0117 	add.w	r1, r4, #23
 801568e:	4643      	mov	r3, r8
 8015690:	4610      	mov	r0, r2
 8015692:	9600      	str	r6, [sp, #0]
 8015694:	b289      	uxth	r1, r1
 8015696:	f009 f993 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+24, X+25, Y+31, TFT_White);
 801569a:	f104 0718 	add.w	r7, r4, #24
 801569e:	f105 0219 	add.w	r2, r5, #25
 80156a2:	b292      	uxth	r2, r2
 80156a4:	b2bf      	uxth	r7, r7
 80156a6:	4643      	mov	r3, r8
 80156a8:	4639      	mov	r1, r7
 80156aa:	4610      	mov	r0, r2
 80156ac:	9600      	str	r6, [sp, #0]
 80156ae:	f009 f987 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
 80156b2:	f105 021a 	add.w	r2, r5, #26
 80156b6:	b292      	uxth	r2, r2
 80156b8:	f104 031e 	add.w	r3, r4, #30
 80156bc:	4639      	mov	r1, r7
 80156be:	4610      	mov	r0, r2
 80156c0:	9600      	str	r6, [sp, #0]
 80156c2:	b29b      	uxth	r3, r3
 80156c4:	f009 f97c 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
 80156c8:	f104 0819 	add.w	r8, r4, #25
 80156cc:	f105 021b 	add.w	r2, r5, #27
 80156d0:	b292      	uxth	r2, r2
 80156d2:	fa1f f888 	uxth.w	r8, r8
 80156d6:	f104 031d 	add.w	r3, r4, #29
 80156da:	4641      	mov	r1, r8
 80156dc:	4610      	mov	r0, r2
 80156de:	9600      	str	r6, [sp, #0]
 80156e0:	b29b      	uxth	r3, r3
 80156e2:	f009 f96d 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
 80156e6:	f104 071c 	add.w	r7, r4, #28
 80156ea:	f105 021c 	add.w	r2, r5, #28
 80156ee:	b292      	uxth	r2, r2
 80156f0:	b2bf      	uxth	r7, r7
 80156f2:	463b      	mov	r3, r7
 80156f4:	4641      	mov	r1, r8
 80156f6:	4610      	mov	r0, r2
 80156f8:	9600      	str	r6, [sp, #0]
 80156fa:	f009 f961 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
 80156fe:	f105 021d 	add.w	r2, r5, #29
 8015702:	b292      	uxth	r2, r2
 8015704:	f104 011a 	add.w	r1, r4, #26
 8015708:	463b      	mov	r3, r7
 801570a:	4610      	mov	r0, r2
 801570c:	9600      	str	r6, [sp, #0]
 801570e:	b289      	uxth	r1, r1
 8015710:	f009 f956 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
 8015714:	9600      	str	r6, [sp, #0]
 8015716:	465b      	mov	r3, fp
 8015718:	4652      	mov	r2, sl
 801571a:	4659      	mov	r1, fp
 801571c:	4650      	mov	r0, sl
 801571e:	f009 f94f 	bl	801e9c0 <TFT_DrawLine>
}
 8015722:	b005      	add	sp, #20
 8015724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015728 <GUI_Button_Measure_deltaE_Small>:

void GUI_Button_Measure_deltaE_Small(uint16_t X, uint16_t Y, uint16_t Active, uint8_t color)
{
 8015728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801572c:	4605      	mov	r5, r0
 801572e:	460c      	mov	r4, r1
 8015730:	f100 0623 	add.w	r6, r0, #35	; 0x23
 8015734:	f101 0723 	add.w	r7, r1, #35	; 0x23
		if(Active){
 8015738:	2a00      	cmp	r2, #0
 801573a:	f000 8111 	beq.w	8015960 <GUI_Button_Measure_deltaE_Small+0x238>
			TFT_FillRectangle(X, Y, X+35, Y+35, color == 0 ? TFT_Blue_Off:TFT_Green);
 801573e:	2b00      	cmp	r3, #0
 8015740:	f241 3276 	movw	r2, #4982	; 0x1376
 8015744:	bf18      	it	ne
 8015746:	f44f 62fc 	movne.w	r2, #2016	; 0x7e0
 801574a:	9200      	str	r2, [sp, #0]
		}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
	
	
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 801574c:	f105 080a 	add.w	r8, r5, #10
 8015750:	f104 0b07 	add.w	fp, r4, #7
 8015754:	f104 091e 	add.w	r9, r4, #30
 8015758:	fa1f f888 	uxth.w	r8, r8
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 801575c:	b2bb      	uxth	r3, r7
 801575e:	b2b2      	uxth	r2, r6
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8015760:	fa1f fb8b 	uxth.w	fp, fp
 8015764:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8015768:	fa1f f989 	uxth.w	r9, r9
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 801576c:	f105 0a1c 	add.w	sl, r5, #28
 8015770:	f104 0712 	add.w	r7, r4, #18
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8015774:	f009 f98c 	bl	801ea90 <TFT_FillRectangle>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8015778:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 801577a:	464b      	mov	r3, r9
 801577c:	4642      	mov	r2, r8
 801577e:	4659      	mov	r1, fp
 8015780:	4640      	mov	r0, r8
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8015782:	fa1f fa8a 	uxth.w	sl, sl
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8015786:	9600      	str	r6, [sp, #0]
 8015788:	f009 f91a 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 801578c:	463b      	mov	r3, r7
 801578e:	4652      	mov	r2, sl
 8015790:	4659      	mov	r1, fp
 8015792:	4640      	mov	r0, r8
 8015794:	9600      	str	r6, [sp, #0]
 8015796:	f009 f913 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+30, X+28, Y+18, TFT_White);
 801579a:	463b      	mov	r3, r7
 801579c:	4652      	mov	r2, sl
 801579e:	4649      	mov	r1, r9
 80157a0:	4640      	mov	r0, r8
 80157a2:	9600      	str	r6, [sp, #0]
 80157a4:	f009 f90c 	bl	801e9c0 <TFT_DrawLine>
	
	//paint
	TFT_DrawLine(X+11, Y+8, X+11, Y+29, TFT_White);
 80157a8:	f105 020b 	add.w	r2, r5, #11
 80157ac:	b292      	uxth	r2, r2
 80157ae:	f104 031d 	add.w	r3, r4, #29
 80157b2:	f104 0108 	add.w	r1, r4, #8
 80157b6:	4610      	mov	r0, r2
 80157b8:	9600      	str	r6, [sp, #0]
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	b289      	uxth	r1, r1
 80157be:	f009 f8ff 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+9, X+12, Y+28, TFT_White);
 80157c2:	f104 091c 	add.w	r9, r4, #28
 80157c6:	f105 020c 	add.w	r2, r5, #12
 80157ca:	b292      	uxth	r2, r2
 80157cc:	fa1f f989 	uxth.w	r9, r9
 80157d0:	f104 0109 	add.w	r1, r4, #9
 80157d4:	464b      	mov	r3, r9
 80157d6:	4610      	mov	r0, r2
 80157d8:	9600      	str	r6, [sp, #0]
 80157da:	b289      	uxth	r1, r1
 80157dc:	f009 f8f0 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+10, X+13, Y+28, TFT_White);
 80157e0:	f104 080a 	add.w	r8, r4, #10
 80157e4:	f105 020d 	add.w	r2, r5, #13
 80157e8:	b292      	uxth	r2, r2
 80157ea:	fa1f f888 	uxth.w	r8, r8
 80157ee:	464b      	mov	r3, r9
 80157f0:	4641      	mov	r1, r8
 80157f2:	4610      	mov	r0, r2
 80157f4:	9600      	str	r6, [sp, #0]
 80157f6:	f009 f8e3 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+10, X+14, Y+27, TFT_White);
 80157fa:	f105 020e 	add.w	r2, r5, #14
 80157fe:	b292      	uxth	r2, r2
 8015800:	f104 031b 	add.w	r3, r4, #27
 8015804:	4641      	mov	r1, r8
 8015806:	4610      	mov	r0, r2
 8015808:	9600      	str	r6, [sp, #0]
 801580a:	b29b      	uxth	r3, r3
 801580c:	f009 f8d8 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+11, X+15, Y+26, TFT_White);
 8015810:	f104 091a 	add.w	r9, r4, #26
 8015814:	f105 020f 	add.w	r2, r5, #15
 8015818:	b292      	uxth	r2, r2
 801581a:	fa1f f989 	uxth.w	r9, r9
 801581e:	f104 010b 	add.w	r1, r4, #11
 8015822:	464b      	mov	r3, r9
 8015824:	4610      	mov	r0, r2
 8015826:	9600      	str	r6, [sp, #0]
 8015828:	b289      	uxth	r1, r1
 801582a:	f009 f8c9 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+12, X+16, Y+26, TFT_White);
 801582e:	f104 080c 	add.w	r8, r4, #12
 8015832:	f105 0210 	add.w	r2, r5, #16
 8015836:	b292      	uxth	r2, r2
 8015838:	fa1f f888 	uxth.w	r8, r8
 801583c:	464b      	mov	r3, r9
 801583e:	4641      	mov	r1, r8
 8015840:	4610      	mov	r0, r2
 8015842:	9600      	str	r6, [sp, #0]
 8015844:	f009 f8bc 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+12, X+17, Y+25, TFT_White);
 8015848:	f105 0211 	add.w	r2, r5, #17
 801584c:	b292      	uxth	r2, r2
 801584e:	f104 0319 	add.w	r3, r4, #25
 8015852:	4641      	mov	r1, r8
 8015854:	4610      	mov	r0, r2
 8015856:	9600      	str	r6, [sp, #0]
 8015858:	b29b      	uxth	r3, r3
 801585a:	f009 f8b1 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+13, X+18, Y+24, TFT_White);
 801585e:	f105 0212 	add.w	r2, r5, #18
 8015862:	b292      	uxth	r2, r2
 8015864:	f104 0318 	add.w	r3, r4, #24
 8015868:	f104 010d 	add.w	r1, r4, #13
 801586c:	4610      	mov	r0, r2
 801586e:	9600      	str	r6, [sp, #0]
 8015870:	b29b      	uxth	r3, r3
 8015872:	b289      	uxth	r1, r1
 8015874:	f009 f8a4 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+14, X+19, Y+23, TFT_White);
 8015878:	f104 080e 	add.w	r8, r4, #14
 801587c:	f105 0213 	add.w	r2, r5, #19
 8015880:	f104 0917 	add.w	r9, r4, #23
 8015884:	b292      	uxth	r2, r2
 8015886:	fa1f f888 	uxth.w	r8, r8
 801588a:	fa1f f989 	uxth.w	r9, r9
 801588e:	464b      	mov	r3, r9
 8015890:	4641      	mov	r1, r8
 8015892:	4610      	mov	r0, r2
 8015894:	9600      	str	r6, [sp, #0]
 8015896:	f009 f893 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+14, X+20, Y+23, TFT_White);
 801589a:	f105 0214 	add.w	r2, r5, #20
 801589e:	b292      	uxth	r2, r2
 80158a0:	464b      	mov	r3, r9
 80158a2:	4641      	mov	r1, r8
 80158a4:	4610      	mov	r0, r2
 80158a6:	9600      	str	r6, [sp, #0]
 80158a8:	f009 f88a 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+15, X+21, Y+22, TFT_White);
 80158ac:	f104 080f 	add.w	r8, r4, #15
 80158b0:	f105 0215 	add.w	r2, r5, #21
 80158b4:	f104 0916 	add.w	r9, r4, #22
 80158b8:	b292      	uxth	r2, r2
 80158ba:	fa1f f888 	uxth.w	r8, r8
 80158be:	fa1f f989 	uxth.w	r9, r9
 80158c2:	464b      	mov	r3, r9
 80158c4:	4641      	mov	r1, r8
 80158c6:	4610      	mov	r0, r2
 80158c8:	9600      	str	r6, [sp, #0]
 80158ca:	f009 f879 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+15, X+22, Y+22, TFT_White);
 80158ce:	f105 0216 	add.w	r2, r5, #22
 80158d2:	b292      	uxth	r2, r2
 80158d4:	464b      	mov	r3, r9
 80158d6:	4641      	mov	r1, r8
 80158d8:	4610      	mov	r0, r2
 80158da:	9600      	str	r6, [sp, #0]
 80158dc:	f009 f870 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+16, X+23, Y+21, TFT_White);
 80158e0:	f104 0810 	add.w	r8, r4, #16
 80158e4:	f105 0217 	add.w	r2, r5, #23
 80158e8:	b292      	uxth	r2, r2
 80158ea:	fa1f f888 	uxth.w	r8, r8
 80158ee:	f104 0315 	add.w	r3, r4, #21
 80158f2:	4641      	mov	r1, r8
 80158f4:	4610      	mov	r0, r2
 80158f6:	9600      	str	r6, [sp, #0]
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	f009 f861 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+16, X+24, Y+20, TFT_White);
 80158fe:	f104 0914 	add.w	r9, r4, #20
 8015902:	f105 0218 	add.w	r2, r5, #24
 8015906:	b292      	uxth	r2, r2
 8015908:	fa1f f989 	uxth.w	r9, r9
 801590c:	464b      	mov	r3, r9
 801590e:	4641      	mov	r1, r8
 8015910:	4610      	mov	r0, r2
 8015912:	9600      	str	r6, [sp, #0]
 8015914:	f009 f854 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+17, X+25, Y+20, TFT_White);
 8015918:	f104 0811 	add.w	r8, r4, #17
 801591c:	f105 0219 	add.w	r2, r5, #25
 8015920:	b292      	uxth	r2, r2
 8015922:	fa1f f888 	uxth.w	r8, r8
 8015926:	464b      	mov	r3, r9
 8015928:	4641      	mov	r1, r8
 801592a:	4610      	mov	r0, r2
 801592c:	9600      	str	r6, [sp, #0]
 801592e:	f009 f847 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+17, X+26, Y+19, TFT_White);
 8015932:	3413      	adds	r4, #19
 8015934:	f105 021a 	add.w	r2, r5, #26
 8015938:	b292      	uxth	r2, r2
 801593a:	b2a4      	uxth	r4, r4
 801593c:	4623      	mov	r3, r4
 801593e:	4641      	mov	r1, r8
 8015940:	4610      	mov	r0, r2
 8015942:	9600      	str	r6, [sp, #0]
 8015944:	f009 f83c 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+18, X+27, Y+19, TFT_White);
 8015948:	f105 021b 	add.w	r2, r5, #27
 801594c:	b292      	uxth	r2, r2
 801594e:	9600      	str	r6, [sp, #0]
 8015950:	4623      	mov	r3, r4
 8015952:	4639      	mov	r1, r7
 8015954:	4610      	mov	r0, r2
 8015956:	f009 f833 	bl	801e9c0 <TFT_DrawLine>
}
 801595a:	b003      	add	sp, #12
 801595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8015960:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8015964:	9300      	str	r3, [sp, #0]
 8015966:	e6f1      	b.n	801574c <GUI_Button_Measure_deltaE_Small+0x24>

08015968 <GUI_CheckBox>:

void GUI_CheckBox(uint16_t X, uint16_t Y, uint16_t Check)
{
 8015968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 801596c:	f101 0323 	add.w	r3, r1, #35	; 0x23
{
 8015970:	4616      	mov	r6, r2
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8015972:	f241 3876 	movw	r8, #4982	; 0x1376
 8015976:	f100 0223 	add.w	r2, r0, #35	; 0x23
 801597a:	f8cd 8000 	str.w	r8, [sp]
 801597e:	b29b      	uxth	r3, r3
 8015980:	b292      	uxth	r2, r2
{
 8015982:	4604      	mov	r4, r0
 8015984:	460d      	mov	r5, r1
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8015986:	f009 f89d 	bl	801eac4 <TFT_DrawRectangle>
	if(Check)
 801598a:	b1fe      	cbz	r6, 80159cc <GUI_CheckBox+0x64>
		{
			TFT_DrawLine(X+8, Y+17, X+16, Y+26, TFT_Blue_Off);
 801598c:	f104 0610 	add.w	r6, r4, #16
 8015990:	f105 071a 	add.w	r7, r5, #26
 8015994:	b2b6      	uxth	r6, r6
 8015996:	b2bf      	uxth	r7, r7
 8015998:	f105 0111 	add.w	r1, r5, #17
 801599c:	f104 0008 	add.w	r0, r4, #8
 80159a0:	463b      	mov	r3, r7
 80159a2:	4632      	mov	r2, r6
 80159a4:	b289      	uxth	r1, r1
 80159a6:	b280      	uxth	r0, r0
 80159a8:	f8cd 8000 	str.w	r8, [sp]
 80159ac:	f009 f808 	bl	801e9c0 <TFT_DrawLine>
			TFT_DrawLine(X+16, Y+26, X+29, Y+5, TFT_Blue_Off);
 80159b0:	1d6b      	adds	r3, r5, #5
 80159b2:	f104 021d 	add.w	r2, r4, #29
 80159b6:	f8cd 8000 	str.w	r8, [sp]
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	b292      	uxth	r2, r2
 80159be:	4639      	mov	r1, r7
 80159c0:	4630      	mov	r0, r6
 80159c2:	f008 fffd 	bl	801e9c0 <TFT_DrawLine>
		} else {
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
		}
}
 80159c6:	b002      	add	sp, #8
 80159c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
 80159cc:	f105 0320 	add.w	r3, r5, #32
 80159d0:	f104 0220 	add.w	r2, r4, #32
 80159d4:	1ca9      	adds	r1, r5, #2
 80159d6:	1ca0      	adds	r0, r4, #2
 80159d8:	2463      	movs	r4, #99	; 0x63
 80159da:	9400      	str	r4, [sp, #0]
 80159dc:	b29b      	uxth	r3, r3
 80159de:	b292      	uxth	r2, r2
 80159e0:	b289      	uxth	r1, r1
 80159e2:	b280      	uxth	r0, r0
 80159e4:	f009 f854 	bl	801ea90 <TFT_FillRectangle>
}
 80159e8:	e7ed      	b.n	80159c6 <GUI_CheckBox+0x5e>

080159ea <GUI_RadioBox>:



void GUI_RadioBox(uint16_t X, uint16_t Y, uint16_t Check, uint16_t Active)
{
 80159ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159ee:	f100 0411 	add.w	r4, r0, #17
 80159f2:	f101 0511 	add.w	r5, r1, #17
 80159f6:	4690      	mov	r8, r2
	if(Active){
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 80159f8:	b226      	sxth	r6, r4
 80159fa:	b22f      	sxth	r7, r5
	if(Active){
 80159fc:	b173      	cbz	r3, 8015a1c <GUI_RadioBox+0x32>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 80159fe:	f241 3376 	movw	r3, #4982	; 0x1376
 8015a02:	220f      	movs	r2, #15
 8015a04:	4639      	mov	r1, r7
 8015a06:	4630      	mov	r0, r6
 8015a08:	f008 ff30 	bl	801e86c <TFT_DrawCircle>
	} else
	{
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
	}
	if(Check)
 8015a0c:	f1b8 0f00 	cmp.w	r8, #0
 8015a10:	d111      	bne.n	8015a36 <GUI_RadioBox+0x4c>
			if(Active)
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
		} else
		{
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8015a12:	2363      	movs	r3, #99	; 0x63
 8015a14:	220a      	movs	r2, #10
 8015a16:	b229      	sxth	r1, r5
 8015a18:	b220      	sxth	r0, r4
 8015a1a:	e011      	b.n	8015a40 <GUI_RadioBox+0x56>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
 8015a1c:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8015a20:	220f      	movs	r2, #15
 8015a22:	4639      	mov	r1, r7
 8015a24:	4630      	mov	r0, r6
 8015a26:	f008 ff21 	bl	801e86c <TFT_DrawCircle>
	if(Check)
 8015a2a:	f1b8 0f00 	cmp.w	r8, #0
 8015a2e:	d0f0      	beq.n	8015a12 <GUI_RadioBox+0x28>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8015a30:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8015a34:	e001      	b.n	8015a3a <GUI_RadioBox+0x50>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
 8015a36:	f241 3376 	movw	r3, #4982	; 0x1376
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8015a3a:	220a      	movs	r2, #10
 8015a3c:	4639      	mov	r1, r7
 8015a3e:	4630      	mov	r0, r6
		}
}
 8015a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8015a44:	f009 b864 	b.w	801eb10 <TFT_DrawFilledCircle>

08015a48 <GUI_Switch_Button>:

void GUI_Switch_Button(uint16_t X, uint16_t Y, uint8_t Check)
{
 8015a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015a4c:	f101 031c 	add.w	r3, r1, #28
 8015a50:	2663      	movs	r6, #99	; 0x63
{
 8015a52:	4617      	mov	r7, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015a54:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
 8015a58:	460d      	mov	r5, r1
 8015a5a:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015a5c:	9600      	str	r6, [sp, #0]
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	b292      	uxth	r2, r2
 8015a62:	f009 f815 	bl	801ea90 <TFT_FillRectangle>
 8015a66:	f105 0611 	add.w	r6, r5, #17
 8015a6a:	f105 0318 	add.w	r3, r5, #24
 8015a6e:	f105 010a 	add.w	r1, r5, #10
 8015a72:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8015a76:	4d1f      	ldr	r5, [pc, #124]	; (8015af4 <GUI_Switch_Button+0xac>)
	if(Check)
 8015a78:	b1ef      	cbz	r7, 8015ab6 <GUI_Switch_Button+0x6e>
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015a7a:	f242 409b 	movw	r0, #9371	; 0x249b
 8015a7e:	270a      	movs	r7, #10
 8015a80:	9001      	str	r0, [sp, #4]
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	b292      	uxth	r2, r2
 8015a86:	b289      	uxth	r1, r1
 8015a88:	4620      	mov	r0, r4
 8015a8a:	9700      	str	r7, [sp, #0]
 8015a8c:	f009 f9b0 	bl	801edf0 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8015a90:	f104 0019 	add.w	r0, r4, #25
 8015a94:	f241 3376 	movw	r3, #4982	; 0x1376
 8015a98:	463a      	mov	r2, r7
 8015a9a:	b231      	sxth	r1, r6
 8015a9c:	b200      	sxth	r0, r0
 8015a9e:	f009 f837 	bl	801eb10 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x00){
 8015aa2:	782b      	ldrb	r3, [r5, #0]
 8015aa4:	b923      	cbnz	r3, 8015ab0 <GUI_Switch_Button+0x68>
				HAL_UART_MspInit(&hlpuart1); //Enable Bluetooth
 8015aa6:	4814      	ldr	r0, [pc, #80]	; (8015af8 <GUI_Switch_Button+0xb0>)
 8015aa8:	f00c f908 	bl	8021cbc <HAL_UART_MspInit>
				BluetoothStat = 0x01;
 8015aac:	2301      	movs	r3, #1
 8015aae:	702b      	strb	r3, [r5, #0]
			if(BluetoothStat == 0x01){
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
				BluetoothStat = 0x00;
			}
		}
}
 8015ab0:	b002      	add	sp, #8
 8015ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_LightGrey);
 8015ab6:	f04f 080a 	mov.w	r8, #10
 8015aba:	f24c 6018 	movw	r0, #50712	; 0xc618
 8015abe:	9001      	str	r0, [sp, #4]
 8015ac0:	b29b      	uxth	r3, r3
 8015ac2:	b292      	uxth	r2, r2
 8015ac4:	b289      	uxth	r1, r1
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	f8cd 8000 	str.w	r8, [sp]
 8015acc:	f009 f990 	bl	801edf0 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8015ad0:	eb04 0008 	add.w	r0, r4, r8
 8015ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ad8:	4642      	mov	r2, r8
 8015ada:	b231      	sxth	r1, r6
 8015adc:	b200      	sxth	r0, r0
 8015ade:	f009 f817 	bl	801eb10 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x01){
 8015ae2:	782b      	ldrb	r3, [r5, #0]
 8015ae4:	2b01      	cmp	r3, #1
 8015ae6:	d1e3      	bne.n	8015ab0 <GUI_Switch_Button+0x68>
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
 8015ae8:	4803      	ldr	r0, [pc, #12]	; (8015af8 <GUI_Switch_Button+0xb0>)
 8015aea:	f00c f933 	bl	8021d54 <HAL_UART_MspDeInit>
				BluetoothStat = 0x00;
 8015aee:	702f      	strb	r7, [r5, #0]
}
 8015af0:	e7de      	b.n	8015ab0 <GUI_Switch_Button+0x68>
 8015af2:	bf00      	nop
 8015af4:	200055c8 	.word	0x200055c8
 8015af8:	20091168 	.word	0x20091168

08015afc <GUI_Switch_ButtonActive>:

void GUI_Switch_ButtonActive(uint16_t X, uint16_t Y, uint8_t Check)
{
 8015afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015afe:	f101 031c 	add.w	r3, r1, #28
{
 8015b02:	4616      	mov	r6, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015b04:	2763      	movs	r7, #99	; 0x63
 8015b06:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8015b0a:	b29b      	uxth	r3, r3
 8015b0c:	b292      	uxth	r2, r2
 8015b0e:	9700      	str	r7, [sp, #0]
{
 8015b10:	460d      	mov	r5, r1
 8015b12:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015b14:	f008 ffbc 	bl	801ea90 <TFT_FillRectangle>
	if(Check)
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015b18:	f242 409b 	movw	r0, #9371	; 0x249b
 8015b1c:	f105 0318 	add.w	r3, r5, #24
 8015b20:	f105 010a 	add.w	r1, r5, #10
 8015b24:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8015b28:	3511      	adds	r5, #17
 8015b2a:	9001      	str	r0, [sp, #4]
	if(Check)
 8015b2c:	b19e      	cbz	r6, 8015b56 <GUI_Switch_ButtonActive+0x5a>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015b2e:	260a      	movs	r6, #10
 8015b30:	b29b      	uxth	r3, r3
 8015b32:	4620      	mov	r0, r4
 8015b34:	9600      	str	r6, [sp, #0]
 8015b36:	b292      	uxth	r2, r2
 8015b38:	b289      	uxth	r1, r1
 8015b3a:	f009 f959 	bl	801edf0 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8015b3e:	f104 0019 	add.w	r0, r4, #25
 8015b42:	f241 3376 	movw	r3, #4982	; 0x1376
		} else
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8015b46:	4632      	mov	r2, r6
 8015b48:	b229      	sxth	r1, r5
 8015b4a:	b200      	sxth	r0, r0
		}
}
 8015b4c:	b003      	add	sp, #12
 8015b4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8015b52:	f008 bfdd 	b.w	801eb10 <TFT_DrawFilledCircle>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015b56:	260a      	movs	r6, #10
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	9600      	str	r6, [sp, #0]
 8015b5e:	b292      	uxth	r2, r2
 8015b60:	b289      	uxth	r1, r1
 8015b62:	f009 f945 	bl	801edf0 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8015b66:	19a0      	adds	r0, r4, r6
 8015b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b6c:	e7eb      	b.n	8015b46 <GUI_Switch_ButtonActive+0x4a>

08015b6e <GUI_Flag_Ru>:


void GUI_Flag_Ru(uint16_t X, uint16_t Y)
{
 8015b6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8015b72:	f100 0423 	add.w	r4, r0, #35	; 0x23
 8015b76:	1dcf      	adds	r7, r1, #7
{
 8015b78:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8015b7a:	b2a4      	uxth	r4, r4
 8015b7c:	b2bf      	uxth	r7, r7
 8015b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b82:	9300      	str	r3, [sp, #0]
 8015b84:	4622      	mov	r2, r4
 8015b86:	463b      	mov	r3, r7
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8015b88:	f105 060e 	add.w	r6, r5, #14
{
 8015b8c:	4680      	mov	r8, r0
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8015b8e:	b2b6      	uxth	r6, r6
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8015b90:	f008 ff7e 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8015b94:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8015b98:	9300      	str	r3, [sp, #0]
 8015b9a:	4622      	mov	r2, r4
 8015b9c:	4633      	mov	r3, r6
 8015b9e:	4639      	mov	r1, r7
 8015ba0:	4640      	mov	r0, r8
 8015ba2:	f008 ff75 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+35, Y+21, TFT_RuRed);
 8015ba6:	f105 0315 	add.w	r3, r5, #21
 8015baa:	f64c 1243 	movw	r2, #51523	; 0xc943
 8015bae:	9200      	str	r2, [sp, #0]
 8015bb0:	b29b      	uxth	r3, r3
 8015bb2:	4622      	mov	r2, r4
 8015bb4:	4631      	mov	r1, r6
 8015bb6:	4640      	mov	r0, r8
 8015bb8:	f008 ff6a 	bl	801ea90 <TFT_FillRectangle>
}
 8015bbc:	b002      	add	sp, #8
 8015bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015bc2 <GUI_Flag_En>:

void GUI_Flag_En(uint16_t X, uint16_t Y)
{
 8015bc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8015bc6:	f100 030f 	add.w	r3, r0, #15
{
 8015bca:	b08d      	sub	sp, #52	; 0x34
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8015bcc:	b29b      	uxth	r3, r3
 8015bce:	270f      	movs	r7, #15
 8015bd0:	9302      	str	r3, [sp, #8]
 8015bd2:	f101 0309 	add.w	r3, r1, #9
{
 8015bd6:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8015bd8:	b29b      	uxth	r3, r3
 8015bda:	9700      	str	r7, [sp, #0]
 8015bdc:	9a02      	ldr	r2, [sp, #8]
 8015bde:	9303      	str	r3, [sp, #12]
{
 8015be0:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8015be2:	f008 ff55 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y, X+34, Y+9, TFT_Navy);
 8015be6:	f104 0314 	add.w	r3, r4, #20
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	f104 0822 	add.w	r8, r4, #34	; 0x22
 8015bf0:	fa1f f888 	uxth.w	r8, r8
 8015bf4:	9304      	str	r3, [sp, #16]
 8015bf6:	9700      	str	r7, [sp, #0]
 8015bf8:	9b03      	ldr	r3, [sp, #12]
 8015bfa:	9804      	ldr	r0, [sp, #16]
 8015bfc:	4642      	mov	r2, r8
 8015bfe:	4629      	mov	r1, r5
 8015c00:	f008 ff46 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+15, Y+21, TFT_Navy);
 8015c04:	f105 030e 	add.w	r3, r5, #14
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	f105 0615 	add.w	r6, r5, #21
 8015c0e:	b2b6      	uxth	r6, r6
 8015c10:	9305      	str	r3, [sp, #20]
 8015c12:	9700      	str	r7, [sp, #0]
 8015c14:	4633      	mov	r3, r6
 8015c16:	9a02      	ldr	r2, [sp, #8]
 8015c18:	9905      	ldr	r1, [sp, #20]
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	f008 ff38 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y+14, X+34, Y+21, TFT_Navy);
 8015c20:	9700      	str	r7, [sp, #0]
 8015c22:	4633      	mov	r3, r6
 8015c24:	4642      	mov	r2, r8
 8015c26:	9905      	ldr	r1, [sp, #20]
 8015c28:	9804      	ldr	r0, [sp, #16]
 8015c2a:	f008 ff31 	bl	801ea90 <TFT_FillRectangle>
	
	TFT_DrawLine(X, Y+2, X+29, Y+21, TFT_White);
 8015c2e:	1cab      	adds	r3, r5, #2
 8015c30:	b29b      	uxth	r3, r3
 8015c32:	f104 091d 	add.w	r9, r4, #29
 8015c36:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015c3a:	9307      	str	r3, [sp, #28]
 8015c3c:	fa1f f989 	uxth.w	r9, r9
 8015c40:	9700      	str	r7, [sp, #0]
 8015c42:	4633      	mov	r3, r6
 8015c44:	464a      	mov	r2, r9
 8015c46:	9907      	ldr	r1, [sp, #28]
 8015c48:	4620      	mov	r0, r4
 8015c4a:	f008 feb9 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X, Y+1, X+29, Y+21, TFT_White);
 8015c4e:	1c6b      	adds	r3, r5, #1
 8015c50:	b29b      	uxth	r3, r3
 8015c52:	9308      	str	r3, [sp, #32]
 8015c54:	9700      	str	r7, [sp, #0]
 8015c56:	4633      	mov	r3, r6
 8015c58:	464a      	mov	r2, r9
 8015c5a:	9908      	ldr	r1, [sp, #32]
 8015c5c:	4620      	mov	r0, r4
 8015c5e:	f008 feaf 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X, Y, X+30, Y+21, TFT_White);
 8015c62:	f104 021e 	add.w	r2, r4, #30
 8015c66:	9700      	str	r7, [sp, #0]
 8015c68:	4633      	mov	r3, r6
 8015c6a:	4629      	mov	r1, r5
 8015c6c:	4620      	mov	r0, r4
 8015c6e:	b292      	uxth	r2, r2
 8015c70:	f008 fea6 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y, X+31, Y+21, TFT_White);
 8015c74:	1c63      	adds	r3, r4, #1
 8015c76:	b29b      	uxth	r3, r3
 8015c78:	f104 0a1f 	add.w	sl, r4, #31
 8015c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8015c7e:	fa1f fa8a 	uxth.w	sl, sl
 8015c82:	9700      	str	r7, [sp, #0]
 8015c84:	4633      	mov	r3, r6
 8015c86:	4652      	mov	r2, sl
 8015c88:	4629      	mov	r1, r5
 8015c8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c8c:	f008 fe98 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y, X+31, Y+21, TFT_White);
 8015c90:	1ca3      	adds	r3, r4, #2
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	930a      	str	r3, [sp, #40]	; 0x28
 8015c96:	9700      	str	r7, [sp, #0]
 8015c98:	4633      	mov	r3, r6
 8015c9a:	4652      	mov	r2, sl
 8015c9c:	4629      	mov	r1, r5
 8015c9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ca0:	f008 fe8e 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y, X+32, Y+21, TFT_White);
 8015ca4:	1ce3      	adds	r3, r4, #3
 8015ca6:	b29b      	uxth	r3, r3
 8015ca8:	f104 0920 	add.w	r9, r4, #32
 8015cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8015cae:	fa1f f989 	uxth.w	r9, r9
 8015cb2:	9700      	str	r7, [sp, #0]
 8015cb4:	4633      	mov	r3, r6
 8015cb6:	464a      	mov	r2, r9
 8015cb8:	4629      	mov	r1, r5
 8015cba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015cbc:	f008 fe80 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+33, Y+21, TFT_White);
 8015cc0:	1d23      	adds	r3, r4, #4
 8015cc2:	b29b      	uxth	r3, r3
 8015cc4:	f104 0b21 	add.w	fp, r4, #33	; 0x21
 8015cc8:	9306      	str	r3, [sp, #24]
 8015cca:	fa1f fb8b 	uxth.w	fp, fp
 8015cce:	9700      	str	r7, [sp, #0]
 8015cd0:	4633      	mov	r3, r6
 8015cd2:	465a      	mov	r2, fp
 8015cd4:	4629      	mov	r1, r5
 8015cd6:	9806      	ldr	r0, [sp, #24]
 8015cd8:	f008 fe72 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+34, Y+21, TFT_White);
 8015cdc:	9700      	str	r7, [sp, #0]
 8015cde:	4633      	mov	r3, r6
 8015ce0:	4642      	mov	r2, r8
 8015ce2:	4629      	mov	r1, r5
 8015ce4:	9806      	ldr	r0, [sp, #24]
 8015ce6:	f008 fe6b 	bl	801e9c0 <TFT_DrawLine>
	
	TFT_DrawLine(X, Y+21, X+31, Y, TFT_White);
 8015cea:	9700      	str	r7, [sp, #0]
 8015cec:	462b      	mov	r3, r5
 8015cee:	4652      	mov	r2, sl
 8015cf0:	4631      	mov	r1, r6
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f008 fe64 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y+21, X+32, Y, TFT_White);
 8015cf8:	9700      	str	r7, [sp, #0]
 8015cfa:	462b      	mov	r3, r5
 8015cfc:	464a      	mov	r2, r9
 8015cfe:	4631      	mov	r1, r6
 8015d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d02:	f008 fe5d 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y+21, X+32, Y, TFT_White);
 8015d06:	9700      	str	r7, [sp, #0]
 8015d08:	462b      	mov	r3, r5
 8015d0a:	464a      	mov	r2, r9
 8015d0c:	4631      	mov	r1, r6
 8015d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d10:	f008 fe56 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y+21, X+33, Y, TFT_White);
 8015d14:	9700      	str	r7, [sp, #0]
 8015d16:	462b      	mov	r3, r5
 8015d18:	465a      	mov	r2, fp
 8015d1a:	4631      	mov	r1, r6
 8015d1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015d1e:	f008 fe4f 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y+21, X+34, Y, TFT_White);
 8015d22:	9700      	str	r7, [sp, #0]
 8015d24:	462b      	mov	r3, r5
 8015d26:	4642      	mov	r2, r8
 8015d28:	4631      	mov	r1, r6
 8015d2a:	9806      	ldr	r0, [sp, #24]
 8015d2c:	f008 fe48 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+5, Y+21, X+34, Y+1, TFT_White);
 8015d30:	1d60      	adds	r0, r4, #5
 8015d32:	9700      	str	r7, [sp, #0]
 8015d34:	9b08      	ldr	r3, [sp, #32]
 8015d36:	4642      	mov	r2, r8
 8015d38:	4631      	mov	r1, r6
 8015d3a:	b280      	uxth	r0, r0
 8015d3c:	f008 fe40 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+21, X+34, Y+2, TFT_White);
 8015d40:	1da0      	adds	r0, r4, #6
 8015d42:	9700      	str	r7, [sp, #0]
 8015d44:	9b07      	ldr	r3, [sp, #28]
 8015d46:	4642      	mov	r2, r8
 8015d48:	4631      	mov	r1, r6
 8015d4a:	b280      	uxth	r0, r0
 8015d4c:	f008 fe38 	bl	801e9c0 <TFT_DrawLine>
	
	TFT_FillRectangle(X, Y+9, X+34, Y+14, TFT_White);
 8015d50:	9700      	str	r7, [sp, #0]
 8015d52:	9b05      	ldr	r3, [sp, #20]
 8015d54:	9903      	ldr	r1, [sp, #12]
 8015d56:	4642      	mov	r2, r8
 8015d58:	4620      	mov	r0, r4
 8015d5a:	f008 fe99 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+15, Y, X+20, Y+21, TFT_White);
 8015d5e:	9700      	str	r7, [sp, #0]
 8015d60:	4633      	mov	r3, r6
 8015d62:	9a04      	ldr	r2, [sp, #16]
 8015d64:	9802      	ldr	r0, [sp, #8]
 8015d66:	4629      	mov	r1, r5
 8015d68:	f008 fe92 	bl	801ea90 <TFT_FillRectangle>
	
	TFT_FillRectangle(X+16, Y, X+19, Y+21, TFT_Red);
 8015d6c:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 8015d70:	f104 0213 	add.w	r2, r4, #19
 8015d74:	f104 0010 	add.w	r0, r4, #16
 8015d78:	4633      	mov	r3, r6
 8015d7a:	4629      	mov	r1, r5
 8015d7c:	9700      	str	r7, [sp, #0]
 8015d7e:	b292      	uxth	r2, r2
 8015d80:	b280      	uxth	r0, r0
 8015d82:	f008 fe85 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+10, X+34, Y+13, TFT_Red);
 8015d86:	f105 030d 	add.w	r3, r5, #13
 8015d8a:	f105 010a 	add.w	r1, r5, #10
 8015d8e:	9700      	str	r7, [sp, #0]
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	4642      	mov	r2, r8
 8015d94:	b289      	uxth	r1, r1
 8015d96:	4620      	mov	r0, r4
 8015d98:	f008 fe7a 	bl	801ea90 <TFT_FillRectangle>
	
}
 8015d9c:	b00d      	add	sp, #52	; 0x34
 8015d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015da4 <GUI_Bar_Measure>:
#include "GUI_Measure_Elements.h"
#include <math.h>
extern uint8_t Language_status, Mode_EL, preGUI_screen_state, GUI_screen_state;

void GUI_Bar_Measure(uint16_t X, uint16_t Y, float Value)
{
 8015da4:	b570      	push	{r4, r5, r6, lr}
 8015da6:	ed2d 8b02 	vpush	{d8}
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8015daa:	f101 040a 	add.w	r4, r1, #10
{
 8015dae:	b084      	sub	sp, #16
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8015db0:	b2a4      	uxth	r4, r4
 8015db2:	f100 026e 	add.w	r2, r0, #110	; 0x6e
 8015db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8015dba:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8015dbc:	9300      	str	r3, [sp, #0]
 8015dbe:	b292      	uxth	r2, r2
 8015dc0:	4623      	mov	r3, r4
{
 8015dc2:	eeb0 8a40 	vmov.f32	s16, s0
 8015dc6:	460e      	mov	r6, r1
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8015dc8:	f008 fe62 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X, Y, X+110*Value, Y+10, TFT_Blue_Off);
 8015dcc:	ee07 5a90 	vmov	s15, r5
 8015dd0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8015e00 <GUI_Bar_Measure+0x5c>
 8015dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015dd8:	f241 3376 	movw	r3, #4982	; 0x1376
 8015ddc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8015de0:	9300      	str	r3, [sp, #0]
 8015de2:	4631      	mov	r1, r6
 8015de4:	4623      	mov	r3, r4
 8015de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015dea:	4628      	mov	r0, r5
 8015dec:	edcd 7a03 	vstr	s15, [sp, #12]
 8015df0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015df4:	f008 fe4c 	bl	801ea90 <TFT_FillRectangle>
}
 8015df8:	b004      	add	sp, #16
 8015dfa:	ecbd 8b02 	vpop	{d8}
 8015dfe:	bd70      	pop	{r4, r5, r6, pc}
 8015e00:	42dc0000 	.word	0x42dc0000

08015e04 <GUI_Text_E_Measure>:


uint8_t  old_num_e = 10, old_num_n = 10, old_deg_e = 0xFF;
uint8_t old_meas_type_L = 2, old_numL_e = 10, old_numL_n = 10, old_rulx = 0, old_nan_Ee = 0, old_nan_El = 0; 
void GUI_Text_E_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 8015e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e08:	ed2d 8b02 	vpush	{d8}
 8015e0c:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8015e0e:	4bba      	ldr	r3, [pc, #744]	; (80160f8 <GUI_Text_E_Measure+0x2f4>)
 8015e10:	f8df a320 	ldr.w	sl, [pc, #800]	; 8016134 <GUI_Text_E_Measure+0x330>
 8015e14:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8016138 <GUI_Text_E_Measure+0x334>
{
 8015e18:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8015e1a:	781a      	ldrb	r2, [r3, #0]
 8015e1c:	4bb7      	ldr	r3, [pc, #732]	; (80160fc <GUI_Text_E_Measure+0x2f8>)
 8015e1e:	781b      	ldrb	r3, [r3, #0]
 8015e20:	429a      	cmp	r2, r3
{
 8015e22:	b086      	sub	sp, #24
 8015e24:	4604      	mov	r4, r0
 8015e26:	460d      	mov	r5, r1
 8015e28:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8015e2c:	d007      	beq.n	8015e3e <GUI_Text_E_Measure+0x3a>
 8015e2e:	2300      	movs	r3, #0
 8015e30:	f88a 3000 	strb.w	r3, [sl]
 8015e34:	f889 3000 	strb.w	r3, [r9]
 8015e38:	4bb1      	ldr	r3, [pc, #708]	; (8016100 <GUI_Text_E_Measure+0x2fc>)
 8015e3a:	22ff      	movs	r2, #255	; 0xff
 8015e3c:	701a      	strb	r2, [r3, #0]
	
	char buffer[9] = {0};
 8015e3e:	2300      	movs	r3, #0
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015e40:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 8015e44:	9303      	str	r3, [sp, #12]
 8015e46:	9304      	str	r3, [sp, #16]
 8015e48:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015e4c:	f009 f8ca 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015e50:	2063      	movs	r0, #99	; 0x63
 8015e52:	f009 f8cd 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8015e56:	48ab      	ldr	r0, [pc, #684]	; (8016104 <GUI_Text_E_Measure+0x300>)
 8015e58:	f009 f8be 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8015e5c:	1ca9      	adds	r1, r5, #2
 8015e5e:	2224      	movs	r2, #36	; 0x24
 8015e60:	b289      	uxth	r1, r1
 8015e62:	4620      	mov	r0, r4
 8015e64:	f009 f9ae 	bl	801f1c4 <TFT_DrawChar>
	

		if((Value/1000.0) >= 1.0)
 8015e68:	ee18 0a10 	vmov	r0, s16
 8015e6c:	f7ea fb84 	bl	8000578 <__aeabi_f2d>
 8015e70:	2200      	movs	r2, #0
 8015e72:	4ba5      	ldr	r3, [pc, #660]	; (8016108 <GUI_Text_E_Measure+0x304>)
 8015e74:	f7ea fcfe 	bl	8000874 <__aeabi_ddiv>
 8015e78:	2200      	movs	r2, #0
 8015e7a:	4ba4      	ldr	r3, [pc, #656]	; (801610c <GUI_Text_E_Measure+0x308>)
 8015e7c:	f7ea fe56 	bl	8000b2c <__aeabi_dcmpge>
 8015e80:	2800      	cmp	r0, #0
 8015e82:	f000 80b4 	beq.w	8015fee <GUI_Text_E_Measure+0x1ea>
	{
		Value = Value/(1000.0);
 8015e86:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8016110 <GUI_Text_E_Measure+0x30c>
 8015e8a:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8015e8e:	2701      	movs	r7, #1
		meas_type = 1;
	}else {meas_type = 0;}
	if(nope)
 8015e90:	2e00      	cmp	r6, #0
 8015e92:	f000 80ae 	beq.w	8015ff2 <GUI_Text_E_Measure+0x1ee>
		{	
			if(energy_light & !old_nan_Ee){
 8015e96:	f89a 3000 	ldrb.w	r3, [sl]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	bf14      	ite	ne
 8015e9e:	2300      	movne	r3, #0
 8015ea0:	f008 0301 	andeq.w	r3, r8, #1
 8015ea4:	b33b      	cbz	r3, 8015ef6 <GUI_Text_E_Measure+0xf2>
				TFT_SetTextColor(TFT_White);
 8015ea6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015eaa:	f009 f89b 	bl	801efe4 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015eae:	2063      	movs	r0, #99	; 0x63
 8015eb0:	f009 f89e 	bl	801eff0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015eb4:	4897      	ldr	r0, [pc, #604]	; (8016114 <GUI_Text_E_Measure+0x310>)
 8015eb6:	f009 f88f 	bl	801efd8 <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 8015eba:	2163      	movs	r1, #99	; 0x63
 8015ebc:	f105 031a 	add.w	r3, r5, #26
 8015ec0:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 8015ec4:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8015ec8:	9100      	str	r1, [sp, #0]
 8015eca:	b29b      	uxth	r3, r3
 8015ecc:	b292      	uxth	r2, r2
 8015ece:	4629      	mov	r1, r5
 8015ed0:	b280      	uxth	r0, r0
 8015ed2:	f008 fddd 	bl	801ea90 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015ed6:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ed8:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 8015edc:	f88d 300c 	strb.w	r3, [sp, #12]
 8015ee0:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ee4:	aa03      	add	r2, sp, #12
 8015ee6:	2303      	movs	r3, #3
 8015ee8:	4629      	mov	r1, r5
 8015eea:	b280      	uxth	r0, r0
 8015eec:	f009 f9e0 	bl	801f2b0 <TFT_DisplayString>
				old_nan_Ee = 1;
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	f88a 3000 	strb.w	r3, [sl]
			}
				if(!energy_light & !old_nan_El){
 8015ef6:	f899 3000 	ldrb.w	r3, [r9]
 8015efa:	bb53      	cbnz	r3, 8015f52 <GUI_Text_E_Measure+0x14e>
 8015efc:	f1b8 0f00 	cmp.w	r8, #0
 8015f00:	d127      	bne.n	8015f52 <GUI_Text_E_Measure+0x14e>
				TFT_SetTextColor(TFT_White);
 8015f02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015f06:	f009 f86d 	bl	801efe4 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015f0a:	2063      	movs	r0, #99	; 0x63
 8015f0c:	f009 f870 	bl	801eff0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015f10:	4880      	ldr	r0, [pc, #512]	; (8016114 <GUI_Text_E_Measure+0x310>)
 8015f12:	f009 f861 	bl	801efd8 <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 8015f16:	2163      	movs	r1, #99	; 0x63
 8015f18:	f105 031a 	add.w	r3, r5, #26
 8015f1c:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 8015f20:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8015f24:	9100      	str	r1, [sp, #0]
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	b292      	uxth	r2, r2
 8015f2a:	4629      	mov	r1, r5
 8015f2c:	b280      	uxth	r0, r0
 8015f2e:	f008 fdaf 	bl	801ea90 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015f32:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015f34:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 8015f38:	f88d 300c 	strb.w	r3, [sp, #12]
 8015f3c:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015f40:	aa03      	add	r2, sp, #12
 8015f42:	2303      	movs	r3, #3
 8015f44:	4629      	mov	r1, r5
 8015f46:	b280      	uxth	r0, r0
 8015f48:	f009 f9b2 	bl	801f2b0 <TFT_DisplayString>
				old_nan_El = 1;
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	f889 3000 	strb.w	r3, [r9]
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}

	if (Language_status == Ru && !energy_light)
 8015f52:	4b71      	ldr	r3, [pc, #452]	; (8016118 <GUI_Text_E_Measure+0x314>)
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	f040 80f0 	bne.w	801613c <GUI_Text_E_Measure+0x338>
 8015f5c:	f1b8 0f00 	cmp.w	r8, #0
 8015f60:	f040 813f 	bne.w	80161e2 <GUI_Text_E_Measure+0x3de>
	{
			if(deg != old_deg_e){
 8015f64:	4b66      	ldr	r3, [pc, #408]	; (8016100 <GUI_Text_E_Measure+0x2fc>)
 8015f66:	781a      	ldrb	r2, [r3, #0]
 8015f68:	42ba      	cmp	r2, r7
 8015f6a:	4698      	mov	r8, r3
 8015f6c:	d030      	beq.n	8015fd0 <GUI_Text_E_Measure+0x1cc>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8015f6e:	2663      	movs	r6, #99	; 0x63
 8015f70:	f105 031a 	add.w	r3, r5, #26
 8015f74:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015f78:	1ce9      	adds	r1, r5, #3
 8015f7a:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 8015f7e:	b29b      	uxth	r3, r3
 8015f80:	b292      	uxth	r2, r2
 8015f82:	b289      	uxth	r1, r1
 8015f84:	9600      	str	r6, [sp, #0]
 8015f86:	b280      	uxth	r0, r0
 8015f88:	f008 fd82 	bl	801ea90 <TFT_FillRectangle>
			TFT_SetTextColor(TFT_White);
 8015f8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015f90:	f009 f828 	bl	801efe4 <TFT_SetTextColor>
 8015f94:	1d2e      	adds	r6, r5, #4
			TFT_SetFont(&Font26RU_arch_small);
 8015f96:	4861      	ldr	r0, [pc, #388]	; (801611c <GUI_Text_E_Measure+0x318>)
 8015f98:	f009 f81e 	bl	801efd8 <TFT_SetFont>
 8015f9c:	f104 09d7 	add.w	r9, r4, #215	; 0xd7
 8015fa0:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
			if(deg){
			TFT_DrawCharRus(X+200, Y+4, 'к');
 8015fa4:	b2b6      	uxth	r6, r6
			if(deg){
 8015fa6:	2f00      	cmp	r7, #0
 8015fa8:	f000 809c 	beq.w	80160e4 <GUI_Text_E_Measure+0x2e0>
			TFT_DrawCharRus(X+200, Y+4, 'к');
 8015fac:	22ba      	movs	r2, #186	; 0xba
 8015fae:	4631      	mov	r1, r6
 8015fb0:	b280      	uxth	r0, r0
 8015fb2:	f009 f823 	bl	801effc <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'л');
 8015fb6:	22bb      	movs	r2, #187	; 0xbb
 8015fb8:	4631      	mov	r1, r6
 8015fba:	fa1f f089 	uxth.w	r0, r9
 8015fbe:	f009 f81d 	bl	801effc <TFT_DrawCharRus>
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
 8015fc2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8015fc6:	22ba      	movs	r2, #186	; 0xba
 8015fc8:	4631      	mov	r1, r6
 8015fca:	b280      	uxth	r0, r0
			TFT_DrawCharRus(X+200, Y+4, 'л');
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 8015fcc:	f009 f816 	bl	801effc <TFT_DrawCharRus>
			}
			
			
			old_deg_e = deg;
 8015fd0:	f888 7000 	strb.w	r7, [r8]
		if(energy_light) {
			TFT_SetTextColor(TFT_White);
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+20, Y+14, 'e');}
	else {
		TFT_SetTextColor(TFT_White);
 8015fd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015fd8:	f009 f804 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetFont(&Font16EN_arch_small);
 8015fdc:	4850      	ldr	r0, [pc, #320]	; (8016120 <GUI_Text_E_Measure+0x31c>)
 8015fde:	f008 fffb 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8015fe2:	f105 010d 	add.w	r1, r5, #13
 8015fe6:	f104 0017 	add.w	r0, r4, #23
 8015fea:	227b      	movs	r2, #123	; 0x7b
 8015fec:	e109      	b.n	8016202 <GUI_Text_E_Measure+0x3fe>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 8015fee:	4607      	mov	r7, r0
 8015ff0:	e74e      	b.n	8015e90 <GUI_Text_E_Measure+0x8c>
		Value = floor(Value*10)/10.0;
 8015ff2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015ff6:	ee68 7a27 	vmul.f32	s15, s16, s15
		old_nan_Ee = 0; old_nan_El = 0;
 8015ffa:	f889 6000 	strb.w	r6, [r9]
		Value = floor(Value*10)/10.0;
 8015ffe:	ee17 0a90 	vmov	r0, s15
		old_nan_Ee = 0; old_nan_El = 0;
 8016002:	f88a 6000 	strb.w	r6, [sl]
		Value = floor(Value*10)/10.0;
 8016006:	f7ea fab7 	bl	8000578 <__aeabi_f2d>
 801600a:	ec41 0b10 	vmov	d0, r0, r1
 801600e:	f00f fb2b 	bl	8025668 <floor>
 8016012:	2200      	movs	r2, #0
 8016014:	ec51 0b10 	vmov	r0, r1, d0
 8016018:	4b42      	ldr	r3, [pc, #264]	; (8016124 <GUI_Text_E_Measure+0x320>)
 801601a:	f7ea fc2b 	bl	8000874 <__aeabi_ddiv>
 801601e:	f7ea fdf7 	bl	8000c10 <__aeabi_d2f>
 8016022:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016026:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801602a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801602e:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8016032:	2800      	cmp	r0, #0
 8016034:	bf14      	ite	ne
 8016036:	4610      	movne	r0, r2
 8016038:	4618      	moveq	r0, r3
 801603a:	f008 ffd3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801603e:	2063      	movs	r0, #99	; 0x63
 8016040:	f008 ffd6 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8016044:	4833      	ldr	r0, [pc, #204]	; (8016114 <GUI_Text_E_Measure+0x310>)
 8016046:	f008 ffc7 	bl	801efd8 <TFT_SetFont>
		sprintf (buffer, "%.1f", Value);}
 801604a:	ee18 0a10 	vmov	r0, s16
		sprintf (buffer, "%.1f", Value);
 801604e:	f7ea fa93 	bl	8000578 <__aeabi_f2d>
 8016052:	4602      	mov	r2, r0
 8016054:	460b      	mov	r3, r1
 8016056:	a803      	add	r0, sp, #12
 8016058:	4933      	ldr	r1, [pc, #204]	; (8016128 <GUI_Text_E_Measure+0x324>)
 801605a:	f00c fb59 	bl	8022710 <sprintf>
	uint32_t dec = 10;
 801605e:	220a      	movs	r2, #10
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016060:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 8016062:	f04f 097a 	mov.w	r9, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 8016066:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 801606a:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 801606c:	ee07 2a10 	vmov	s14, r2
 8016070:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8016074:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8016078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801607c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016080:	db06      	blt.n	8016090 <GUI_Text_E_Measure+0x28c>
			delta_pos-=23;
 8016082:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 8016086:	3601      	adds	r6, #1
			dec *= 10;
 8016088:	434a      	muls	r2, r1
			delta_pos-=23;
 801608a:	fa5f f989 	uxtb.w	r9, r9
			number++;
 801608e:	b2f6      	uxtb	r6, r6
 8016090:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8016092:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016096:	d1e9      	bne.n	801606c <GUI_Text_E_Measure+0x268>
	if(energy_light && number < old_num_e )
 8016098:	f1b8 0f00 	cmp.w	r8, #0
 801609c:	d020      	beq.n	80160e0 <GUI_Text_E_Measure+0x2dc>
 801609e:	4b23      	ldr	r3, [pc, #140]	; (801612c <GUI_Text_E_Measure+0x328>)
	else if(!energy_light && number < old_num_n)
 80160a0:	781a      	ldrb	r2, [r3, #0]
 80160a2:	42b2      	cmp	r2, r6
 80160a4:	469a      	mov	sl, r3
 80160a6:	d90d      	bls.n	80160c4 <GUI_Text_E_Measure+0x2c0>
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
 80160a8:	2163      	movs	r1, #99	; 0x63
 80160aa:	f105 031a 	add.w	r3, r5, #26
 80160ae:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80160b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80160b6:	9100      	str	r1, [sp, #0]
 80160b8:	b29b      	uxth	r3, r3
 80160ba:	b292      	uxth	r2, r2
 80160bc:	4629      	mov	r1, r5
 80160be:	b280      	uxth	r0, r0
 80160c0:	f008 fce6 	bl	801ea90 <TFT_FillRectangle>
	buffer[8] = 0;
 80160c4:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160c6:	eb04 0009 	add.w	r0, r4, r9
		old_num_n = number;
 80160ca:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160ce:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 80160d0:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160d4:	4629      	mov	r1, r5
 80160d6:	2303      	movs	r3, #3
 80160d8:	b280      	uxth	r0, r0
 80160da:	f009 f8e9 	bl	801f2b0 <TFT_DisplayString>
 80160de:	e738      	b.n	8015f52 <GUI_Text_E_Measure+0x14e>
	else if(!energy_light && number < old_num_n)
 80160e0:	4b13      	ldr	r3, [pc, #76]	; (8016130 <GUI_Text_E_Measure+0x32c>)
 80160e2:	e7dd      	b.n	80160a0 <GUI_Text_E_Measure+0x29c>
			TFT_DrawCharRus(X+200, Y+4, 'л');
 80160e4:	22bb      	movs	r2, #187	; 0xbb
 80160e6:	4631      	mov	r1, r6
 80160e8:	b280      	uxth	r0, r0
 80160ea:	f008 ff87 	bl	801effc <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80160ee:	22ba      	movs	r2, #186	; 0xba
 80160f0:	4631      	mov	r1, r6
 80160f2:	fa1f f089 	uxth.w	r0, r9
 80160f6:	e769      	b.n	8015fcc <GUI_Text_E_Measure+0x1c8>
 80160f8:	2000022a 	.word	0x2000022a
 80160fc:	20005279 	.word	0x20005279
 8016100:	2000022d 	.word	0x2000022d
 8016104:	200001e8 	.word	0x200001e8
 8016108:	408f4000 	.word	0x408f4000
 801610c:	3ff00000 	.word	0x3ff00000
 8016110:	447a0000 	.word	0x447a0000
 8016114:	200001f0 	.word	0x200001f0
 8016118:	2000527b 	.word	0x2000527b
 801611c:	20000208 	.word	0x20000208
 8016120:	200001c0 	.word	0x200001c0
 8016124:	40240000 	.word	0x40240000
 8016128:	0803416b 	.word	0x0803416b
 801612c:	20000244 	.word	0x20000244
 8016130:	20000245 	.word	0x20000245
 8016134:	200052ad 	.word	0x200052ad
 8016138:	200052ae 	.word	0x200052ae
	} else if (Language_status == En && !energy_light)
 801613c:	2b01      	cmp	r3, #1
 801613e:	d16e      	bne.n	801621e <GUI_Text_E_Measure+0x41a>
 8016140:	f1b8 0f00 	cmp.w	r8, #0
 8016144:	d166      	bne.n	8016214 <GUI_Text_E_Measure+0x410>
		if(deg != old_deg_e){
 8016146:	4b38      	ldr	r3, [pc, #224]	; (8016228 <GUI_Text_E_Measure+0x424>)
 8016148:	781a      	ldrb	r2, [r3, #0]
 801614a:	42ba      	cmp	r2, r7
 801614c:	4699      	mov	r9, r3
 801614e:	d031      	beq.n	80161b4 <GUI_Text_E_Measure+0x3b0>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8016150:	2663      	movs	r6, #99	; 0x63
 8016152:	f105 031a 	add.w	r3, r5, #26
 8016156:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801615a:	1ce9      	adds	r1, r5, #3
 801615c:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 8016160:	9600      	str	r6, [sp, #0]
 8016162:	b280      	uxth	r0, r0
 8016164:	b29b      	uxth	r3, r3
 8016166:	b292      	uxth	r2, r2
 8016168:	b289      	uxth	r1, r1
 801616a:	f008 fc91 	bl	801ea90 <TFT_FillRectangle>
 801616e:	1d2e      	adds	r6, r5, #4
 8016170:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
			TFT_SetTextColor(TFT_White);
 8016174:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (deg){
 8016178:	b1ff      	cbz	r7, 80161ba <GUI_Text_E_Measure+0x3b6>
			TFT_SetTextColor(TFT_White);
 801617a:	f008 ff33 	bl	801efe4 <TFT_SetTextColor>
			TFT_SetFont(&Font26EN_arch_small);
 801617e:	482b      	ldr	r0, [pc, #172]	; (801622c <GUI_Text_E_Measure+0x428>)
 8016180:	f008 ff2a 	bl	801efd8 <TFT_SetFont>
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 8016184:	b2b6      	uxth	r6, r6
 8016186:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
 801618a:	222b      	movs	r2, #43	; 0x2b
 801618c:	4631      	mov	r1, r6
 801618e:	b280      	uxth	r0, r0
 8016190:	f009 f818 	bl	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X+200, Y+4, 'k'-65);
 8016194:	222a      	movs	r2, #42	; 0x2a
 8016196:	4631      	mov	r1, r6
 8016198:	fa1f f08a 	uxth.w	r0, sl
 801619c:	f009 f812 	bl	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X+226, Y+4, 'x'-65);
 80161a0:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
 80161a4:	2237      	movs	r2, #55	; 0x37
 80161a6:	4631      	mov	r1, r6
 80161a8:	b280      	uxth	r0, r0
 80161aa:	f009 f80b 	bl	801f1c4 <TFT_DrawChar>
			old_rulx = 0;
 80161ae:	4b20      	ldr	r3, [pc, #128]	; (8016230 <GUI_Text_E_Measure+0x42c>)
 80161b0:	f883 8000 	strb.w	r8, [r3]
		old_deg_e = deg;
 80161b4:	f889 7000 	strb.w	r7, [r9]
 80161b8:	e70c      	b.n	8015fd4 <GUI_Text_E_Measure+0x1d0>
			TFT_SetTextColor(TFT_White);
 80161ba:	f008 ff13 	bl	801efe4 <TFT_SetTextColor>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 80161be:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_small);
 80161c0:	481a      	ldr	r0, [pc, #104]	; (801622c <GUI_Text_E_Measure+0x428>)
 80161c2:	f008 ff09 	bl	801efd8 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 80161c6:	4631      	mov	r1, r6
 80161c8:	fa1f f08a 	uxth.w	r0, sl
 80161cc:	222b      	movs	r2, #43	; 0x2b
 80161ce:	f008 fff9 	bl	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 80161d2:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 80161d6:	2237      	movs	r2, #55	; 0x37
 80161d8:	4631      	mov	r1, r6
 80161da:	b280      	uxth	r0, r0
 80161dc:	f008 fff2 	bl	801f1c4 <TFT_DrawChar>
 80161e0:	e7e8      	b.n	80161b4 <GUI_Text_E_Measure+0x3b0>
		GUI_TextRu_W_m2(234, Y);
 80161e2:	4629      	mov	r1, r5
 80161e4:	20ea      	movs	r0, #234	; 0xea
 80161e6:	f005 fa51 	bl	801b68c <GUI_TextRu_W_m2>
			TFT_SetTextColor(TFT_White);
 80161ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80161ee:	f008 fef9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_small);
 80161f2:	4810      	ldr	r0, [pc, #64]	; (8016234 <GUI_Text_E_Measure+0x430>)
 80161f4:	f008 fef0 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 80161f8:	f105 010e 	add.w	r1, r5, #14
 80161fc:	f104 0014 	add.w	r0, r4, #20
 8016200:	2265      	movs	r2, #101	; 0x65
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8016202:	b289      	uxth	r1, r1
 8016204:	b280      	uxth	r0, r0
 8016206:	f008 ffdd 	bl	801f1c4 <TFT_DrawChar>
	}

}
 801620a:	b006      	add	sp, #24
 801620c:	ecbd 8b02 	vpop	{d8}
 8016210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		GUI_TextEn_W_m2(234, Y);
 8016214:	4629      	mov	r1, r5
 8016216:	20ea      	movs	r0, #234	; 0xea
 8016218:	f004 f8d0 	bl	801a3bc <GUI_TextEn_W_m2>
 801621c:	e7e5      	b.n	80161ea <GUI_Text_E_Measure+0x3e6>
		if(energy_light) {
 801621e:	f1b8 0f00 	cmp.w	r8, #0
 8016222:	d1e2      	bne.n	80161ea <GUI_Text_E_Measure+0x3e6>
 8016224:	e6d6      	b.n	8015fd4 <GUI_Text_E_Measure+0x1d0>
 8016226:	bf00      	nop
 8016228:	2000022d 	.word	0x2000022d
 801622c:	200001f8 	.word	0x200001f8
 8016230:	200052b9 	.word	0x200052b9
 8016234:	200001c0 	.word	0x200001c0

08016238 <GUI_Text_L_Measure>:

uint8_t old_nan_Le = 0, old_nan_Ll = 0, old_deg_L = 0xFF;
void GUI_Text_L_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 8016238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801623c:	ed2d 8b02 	vpush	{d8}
 8016240:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8016242:	4bb7      	ldr	r3, [pc, #732]	; (8016520 <GUI_Text_L_Measure+0x2e8>)
{
 8016244:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8016246:	781a      	ldrb	r2, [r3, #0]
 8016248:	4bb6      	ldr	r3, [pc, #728]	; (8016524 <GUI_Text_L_Measure+0x2ec>)
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	429a      	cmp	r2, r3
{
 801624e:	b086      	sub	sp, #24
 8016250:	4604      	mov	r4, r0
 8016252:	460d      	mov	r5, r1
 8016254:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8016258:	d007      	beq.n	801626a <GUI_Text_L_Measure+0x32>
 801625a:	4ab3      	ldr	r2, [pc, #716]	; (8016528 <GUI_Text_L_Measure+0x2f0>)
 801625c:	2300      	movs	r3, #0
 801625e:	7013      	strb	r3, [r2, #0]
 8016260:	4ab2      	ldr	r2, [pc, #712]	; (801652c <GUI_Text_L_Measure+0x2f4>)
 8016262:	7013      	strb	r3, [r2, #0]
 8016264:	4bb2      	ldr	r3, [pc, #712]	; (8016530 <GUI_Text_L_Measure+0x2f8>)
 8016266:	22ff      	movs	r2, #255	; 0xff
 8016268:	701a      	strb	r2, [r3, #0]
	char buffer[9] = {0};
 801626a:	2300      	movs	r3, #0
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 801626c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 8016270:	9303      	str	r3, [sp, #12]
 8016272:	9304      	str	r3, [sp, #16]
 8016274:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8016278:	f008 feb4 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801627c:	2063      	movs	r0, #99	; 0x63
 801627e:	f008 feb7 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8016282:	48ac      	ldr	r0, [pc, #688]	; (8016534 <GUI_Text_L_Measure+0x2fc>)
 8016284:	f008 fea8 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8016288:	1ca9      	adds	r1, r5, #2
 801628a:	4620      	mov	r0, r4
 801628c:	222b      	movs	r2, #43	; 0x2b
 801628e:	b289      	uxth	r1, r1
 8016290:	f008 ff98 	bl	801f1c4 <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 8016294:	48a8      	ldr	r0, [pc, #672]	; (8016538 <GUI_Text_L_Measure+0x300>)
	if(energy_light) {
 8016296:	f1b9 0f00 	cmp.w	r9, #0
 801629a:	f000 8097 	beq.w	80163cc <GUI_Text_L_Measure+0x194>
	TFT_SetFont(&Font16EN_arch_small);
 801629e:	f008 fe9b 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 80162a2:	f105 010e 	add.w	r1, r5, #14
 80162a6:	f104 0014 	add.w	r0, r4, #20
 80162aa:	2265      	movs	r2, #101	; 0x65
 80162ac:	b289      	uxth	r1, r1
 80162ae:	b280      	uxth	r0, r0
 80162b0:	f008 ff88 	bl	801f1c4 <TFT_DrawChar>
 80162b4:	4f9c      	ldr	r7, [pc, #624]	; (8016528 <GUI_Text_L_Measure+0x2f0>)
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
	}
	
	if(nope) 
 80162b6:	2e00      	cmp	r6, #0
 80162b8:	f040 8098 	bne.w	80163ec <GUI_Text_L_Measure+0x1b4>
			buffer[0] = '-';buffer[1] = '-';
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
			old_nan_Ll = 1;}
		}
	else{
	if(energy_light) {old_nan_Le = 0;}
 80162bc:	703e      	strb	r6, [r7, #0]
	if(!energy_light) {old_nan_Ll = 0;}
	Value = floor(Value*10)/10.0;
 80162be:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80162c2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80162c6:	ee17 0a90 	vmov	r0, s15
 80162ca:	f7ea f955 	bl	8000578 <__aeabi_f2d>
 80162ce:	ec41 0b10 	vmov	d0, r0, r1
 80162d2:	f00f f9c9 	bl	8025668 <floor>
 80162d6:	2200      	movs	r2, #0
 80162d8:	4b98      	ldr	r3, [pc, #608]	; (801653c <GUI_Text_L_Measure+0x304>)
 80162da:	ec51 0b10 	vmov	r0, r1, d0
 80162de:	f7ea fac9 	bl	8000874 <__aeabi_ddiv>
 80162e2:	f7ea fc95 	bl	8000c10 <__aeabi_d2f>
 80162e6:	ee08 0a10 	vmov	s16, r0
	
	if((Value/1000.0) >= 1.0)
 80162ea:	f7ea f945 	bl	8000578 <__aeabi_f2d>
 80162ee:	2200      	movs	r2, #0
 80162f0:	4b93      	ldr	r3, [pc, #588]	; (8016540 <GUI_Text_L_Measure+0x308>)
 80162f2:	f7ea fabf 	bl	8000874 <__aeabi_ddiv>
 80162f6:	2200      	movs	r2, #0
 80162f8:	4b92      	ldr	r3, [pc, #584]	; (8016544 <GUI_Text_L_Measure+0x30c>)
 80162fa:	f7ea fc17 	bl	8000b2c <__aeabi_dcmpge>
 80162fe:	2800      	cmp	r0, #0
 8016300:	f000 80fb 	beq.w	80164fa <GUI_Text_L_Measure+0x2c2>
	{
		Value = Value/(1000.0);
 8016304:	eddf 7a90 	vldr	s15, [pc, #576]	; 8016548 <GUI_Text_L_Measure+0x310>
 8016308:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 801630c:	2601      	movs	r6, #1
		meas_type = 1;
	}else {meas_type = 0;}
	
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801630e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8016312:	f249 43d2 	movw	r3, #38098	; 0x94d2
 8016316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801631a:	2800      	cmp	r0, #0
 801631c:	bf0c      	ite	eq
 801631e:	4610      	moveq	r0, r2
 8016320:	4618      	movne	r0, r3
 8016322:	f008 fe5f 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016326:	2063      	movs	r0, #99	; 0x63
 8016328:	f008 fe62 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801632c:	4887      	ldr	r0, [pc, #540]	; (801654c <GUI_Text_L_Measure+0x314>)
 801632e:	f008 fe53 	bl	801efd8 <TFT_SetFont>
	
	sprintf (buffer, "%.1f", Value);
 8016332:	ee18 0a10 	vmov	r0, s16
 8016336:	f7ea f91f 	bl	8000578 <__aeabi_f2d>
 801633a:	4602      	mov	r2, r0
 801633c:	460b      	mov	r3, r1
 801633e:	a803      	add	r0, sp, #12
 8016340:	4983      	ldr	r1, [pc, #524]	; (8016550 <GUI_Text_L_Measure+0x318>)
 8016342:	f00c f9e5 	bl	8022710 <sprintf>
	uint32_t dec = 10;
 8016346:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8016348:	2304      	movs	r3, #4
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 801634a:	2700      	movs	r7, #0
 801634c:	f04f 0875 	mov.w	r8, #117	; 0x75


for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 8016350:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 8016354:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8016356:	ee07 2a10 	vmov	s14, r2
 801635a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801635e:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8016362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801636a:	db06      	blt.n	801637a <GUI_Text_L_Measure+0x142>
			delta_pos-=23;
 801636c:	f1a8 0817 	sub.w	r8, r8, #23
			number++;
 8016370:	3701      	adds	r7, #1
			dec *= 10;
 8016372:	434a      	muls	r2, r1
			delta_pos-=23;
 8016374:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8016378:	b2ff      	uxtb	r7, r7
 801637a:	3b01      	subs	r3, #1
for (uint8_t i = 1; i <= 4; i++)
 801637c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016380:	d1e9      	bne.n	8016356 <GUI_Text_L_Measure+0x11e>
		}
	}
	
	if(energy_light && number < old_numL_e )
 8016382:	f1b9 0f00 	cmp.w	r9, #0
 8016386:	f000 80ba 	beq.w	80164fe <GUI_Text_L_Measure+0x2c6>
 801638a:	4b72      	ldr	r3, [pc, #456]	; (8016554 <GUI_Text_L_Measure+0x31c>)
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
	} 
	else if(!energy_light && number < old_numL_n)
 801638c:	781a      	ldrb	r2, [r3, #0]
 801638e:	42ba      	cmp	r2, r7
 8016390:	469a      	mov	sl, r3
 8016392:	d90d      	bls.n	80163b0 <GUI_Text_L_Measure+0x178>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8016394:	2163      	movs	r1, #99	; 0x63
 8016396:	f105 031a 	add.w	r3, r5, #26
 801639a:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801639e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80163a2:	9100      	str	r1, [sp, #0]
 80163a4:	b29b      	uxth	r3, r3
 80163a6:	b292      	uxth	r2, r2
 80163a8:	4629      	mov	r1, r5
 80163aa:	b280      	uxth	r0, r0
 80163ac:	f008 fb70 	bl	801ea90 <TFT_FillRectangle>
		old_numL_e = number;}
	else{
		old_numL_n = number;
	}
	
	buffer[8] = 0;
 80163b0:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80163b2:	eb04 0008 	add.w	r0, r4, r8
		old_numL_n = number;
 80163b6:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80163ba:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 80163bc:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80163c0:	4629      	mov	r1, r5
 80163c2:	2303      	movs	r3, #3
 80163c4:	b280      	uxth	r0, r0
 80163c6:	f008 ff73 	bl	801f2b0 <TFT_DisplayString>
 80163ca:	e06c      	b.n	80164a6 <GUI_Text_L_Measure+0x26e>
		TFT_SetFont(&Font16EN_arch_small);
 80163cc:	f008 fe04 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 80163d0:	f105 010d 	add.w	r1, r5, #13
 80163d4:	f104 0017 	add.w	r0, r4, #23
 80163d8:	227b      	movs	r2, #123	; 0x7b
 80163da:	b289      	uxth	r1, r1
 80163dc:	b280      	uxth	r0, r0
 80163de:	f008 fef1 	bl	801f1c4 <TFT_DrawChar>
	if(nope) 
 80163e2:	bb96      	cbnz	r6, 801644a <GUI_Text_L_Measure+0x212>
	if(!energy_light) {old_nan_Ll = 0;}
 80163e4:	4b51      	ldr	r3, [pc, #324]	; (801652c <GUI_Text_L_Measure+0x2f4>)
 80163e6:	f883 9000 	strb.w	r9, [r3]
 80163ea:	e768      	b.n	80162be <GUI_Text_L_Measure+0x86>
			if(energy_light & !old_nan_Le){
 80163ec:	783e      	ldrb	r6, [r7, #0]
 80163ee:	2e00      	cmp	r6, #0
 80163f0:	bf14      	ite	ne
 80163f2:	2600      	movne	r6, #0
 80163f4:	f009 0601 	andeq.w	r6, r9, #1
 80163f8:	2e00      	cmp	r6, #0
 80163fa:	d054      	beq.n	80164a6 <GUI_Text_L_Measure+0x26e>
			TFT_SetTextColor(TFT_White);
 80163fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016400:	f008 fdf0 	bl	801efe4 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8016404:	2063      	movs	r0, #99	; 0x63
 8016406:	f008 fdf3 	bl	801eff0 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 801640a:	4850      	ldr	r0, [pc, #320]	; (801654c <GUI_Text_L_Measure+0x314>)
 801640c:	f008 fde4 	bl	801efd8 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8016410:	2163      	movs	r1, #99	; 0x63
 8016412:	f105 031a 	add.w	r3, r5, #26
 8016416:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801641a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801641e:	9100      	str	r1, [sp, #0]
 8016420:	b29b      	uxth	r3, r3
 8016422:	b292      	uxth	r2, r2
 8016424:	4629      	mov	r1, r5
 8016426:	b280      	uxth	r0, r0
 8016428:	f008 fb32 	bl	801ea90 <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 801642c:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801642e:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8016432:	f88d 300c 	strb.w	r3, [sp, #12]
 8016436:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801643a:	aa03      	add	r2, sp, #12
 801643c:	2303      	movs	r3, #3
 801643e:	4629      	mov	r1, r5
 8016440:	b280      	uxth	r0, r0
 8016442:	f008 ff35 	bl	801f2b0 <TFT_DisplayString>
			old_nan_Le = 1;}
 8016446:	2301      	movs	r3, #1
 8016448:	703b      	strb	r3, [r7, #0]
			if(!energy_light & !old_nan_Ll){
 801644a:	4e38      	ldr	r6, [pc, #224]	; (801652c <GUI_Text_L_Measure+0x2f4>)
 801644c:	7833      	ldrb	r3, [r6, #0]
 801644e:	bb4b      	cbnz	r3, 80164a4 <GUI_Text_L_Measure+0x26c>
 8016450:	f1b9 0f00 	cmp.w	r9, #0
 8016454:	d126      	bne.n	80164a4 <GUI_Text_L_Measure+0x26c>
			TFT_SetTextColor(TFT_White);
 8016456:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801645a:	f008 fdc3 	bl	801efe4 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 801645e:	2063      	movs	r0, #99	; 0x63
 8016460:	f008 fdc6 	bl	801eff0 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8016464:	4839      	ldr	r0, [pc, #228]	; (801654c <GUI_Text_L_Measure+0x314>)
 8016466:	f008 fdb7 	bl	801efd8 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 801646a:	2163      	movs	r1, #99	; 0x63
 801646c:	f105 031a 	add.w	r3, r5, #26
 8016470:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8016474:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016478:	9100      	str	r1, [sp, #0]
 801647a:	b29b      	uxth	r3, r3
 801647c:	b292      	uxth	r2, r2
 801647e:	4629      	mov	r1, r5
 8016480:	b280      	uxth	r0, r0
 8016482:	f008 fb05 	bl	801ea90 <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8016486:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016488:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 801648c:	f88d 300c 	strb.w	r3, [sp, #12]
 8016490:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016494:	aa03      	add	r2, sp, #12
 8016496:	2303      	movs	r3, #3
 8016498:	4629      	mov	r1, r5
 801649a:	b280      	uxth	r0, r0
 801649c:	f008 ff08 	bl	801f2b0 <TFT_DisplayString>
			old_nan_Ll = 1;}
 80164a0:	2301      	movs	r3, #1
 80164a2:	7033      	strb	r3, [r6, #0]
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 80164a4:	2600      	movs	r6, #0
	
}
	if (Language_status == Ru && !energy_light)
 80164a6:	4b2c      	ldr	r3, [pc, #176]	; (8016558 <GUI_Text_L_Measure+0x320>)
 80164a8:	781f      	ldrb	r7, [r3, #0]
 80164aa:	2f00      	cmp	r7, #0
 80164ac:	d158      	bne.n	8016560 <GUI_Text_L_Measure+0x328>
 80164ae:	f1b9 0f00 	cmp.w	r9, #0
 80164b2:	f040 808f 	bne.w	80165d4 <GUI_Text_L_Measure+0x39c>
 80164b6:	4b1e      	ldr	r3, [pc, #120]	; (8016530 <GUI_Text_L_Measure+0x2f8>)
	{
		if (deg && old_deg_L != 1){
 80164b8:	781a      	ldrb	r2, [r3, #0]
 80164ba:	b316      	cbz	r6, 8016502 <GUI_Text_L_Measure+0x2ca>
 80164bc:	2a01      	cmp	r2, #1
 80164be:	d017      	beq.n	80164f0 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 80164c0:	2601      	movs	r6, #1
 80164c2:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 80164c4:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80164c8:	f105 031a 	add.w	r3, r5, #26
 80164cc:	1ce9      	adds	r1, r5, #3
 80164ce:	2763      	movs	r7, #99	; 0x63
 80164d0:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 80164d4:	9700      	str	r7, [sp, #0]
 80164d6:	b29b      	uxth	r3, r3
 80164d8:	b292      	uxth	r2, r2
 80164da:	b289      	uxth	r1, r1
			GUI_TextRu_Cd_m2(X+205, Y, 1);
		}else if(!deg && old_deg_L != 0){
			old_deg_L = 0;
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 80164dc:	b280      	uxth	r0, r0
 80164de:	f008 fad7 	bl	801ea90 <TFT_FillRectangle>
			GUI_TextRu_Cd_m2(X+205, Y, 0);
 80164e2:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 80164e6:	4632      	mov	r2, r6
 80164e8:	4629      	mov	r1, r5
 80164ea:	b280      	uxth	r0, r0
 80164ec:	f005 f972 	bl	801b7d4 <GUI_TextRu_Cd_m2>
		GUI_TextRu_W_m2_sr(X+210, Y);
	}else if (Language_status == En && energy_light)
	{
		GUI_TextEn_W_m2_sr(X+210, Y);
	}
}
 80164f0:	b006      	add	sp, #24
 80164f2:	ecbd 8b02 	vpop	{d8}
 80164f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 80164fa:	4606      	mov	r6, r0
 80164fc:	e707      	b.n	801630e <GUI_Text_L_Measure+0xd6>
	else if(!energy_light && number < old_numL_n)
 80164fe:	4b17      	ldr	r3, [pc, #92]	; (801655c <GUI_Text_L_Measure+0x324>)
 8016500:	e744      	b.n	801638c <GUI_Text_L_Measure+0x154>
		}else if(!deg && old_deg_L != 0){
 8016502:	2a00      	cmp	r2, #0
 8016504:	d0f4      	beq.n	80164f0 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 8016506:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8016508:	2163      	movs	r1, #99	; 0x63
 801650a:	f105 031a 	add.w	r3, r5, #26
 801650e:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8016512:	9100      	str	r1, [sp, #0]
 8016514:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
 8016518:	b29b      	uxth	r3, r3
 801651a:	b292      	uxth	r2, r2
 801651c:	4629      	mov	r1, r5
 801651e:	e7dd      	b.n	80164dc <GUI_Text_L_Measure+0x2a4>
 8016520:	2000022a 	.word	0x2000022a
 8016524:	20005279 	.word	0x20005279
 8016528:	200052b0 	.word	0x200052b0
 801652c:	200052b1 	.word	0x200052b1
 8016530:	2000022c 	.word	0x2000022c
 8016534:	200001e8 	.word	0x200001e8
 8016538:	200001c0 	.word	0x200001c0
 801653c:	40240000 	.word	0x40240000
 8016540:	408f4000 	.word	0x408f4000
 8016544:	3ff00000 	.word	0x3ff00000
 8016548:	447a0000 	.word	0x447a0000
 801654c:	200001f0 	.word	0x200001f0
 8016550:	0803416b 	.word	0x0803416b
 8016554:	20000232 	.word	0x20000232
 8016558:	2000527b 	.word	0x2000527b
 801655c:	20000233 	.word	0x20000233
	else if (Language_status == En && !energy_light)
 8016560:	2f01      	cmp	r7, #1
 8016562:	d1c5      	bne.n	80164f0 <GUI_Text_L_Measure+0x2b8>
 8016564:	f1b9 0f00 	cmp.w	r9, #0
 8016568:	d13b      	bne.n	80165e2 <GUI_Text_L_Measure+0x3aa>
 801656a:	4b21      	ldr	r3, [pc, #132]	; (80165f0 <GUI_Text_L_Measure+0x3b8>)
		if (deg && old_deg_L != 1){
 801656c:	781a      	ldrb	r2, [r3, #0]
 801656e:	b1d6      	cbz	r6, 80165a6 <GUI_Text_L_Measure+0x36e>
 8016570:	2a01      	cmp	r2, #1
 8016572:	d0bd      	beq.n	80164f0 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 8016574:	701f      	strb	r7, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8016576:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 801657a:	f105 031a 	add.w	r3, r5, #26
 801657e:	1f69      	subs	r1, r5, #5
 8016580:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8016584:	2663      	movs	r6, #99	; 0x63
 8016586:	b292      	uxth	r2, r2
 8016588:	b289      	uxth	r1, r1
 801658a:	b280      	uxth	r0, r0
 801658c:	9600      	str	r6, [sp, #0]
 801658e:	b29b      	uxth	r3, r3
 8016590:	f008 fa7e 	bl	801ea90 <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+210, Y-4, 1);
 8016594:	1f29      	subs	r1, r5, #4
 8016596:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 801659a:	463a      	mov	r2, r7
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 801659c:	b289      	uxth	r1, r1
 801659e:	b280      	uxth	r0, r0
 80165a0:	f003 ff9e 	bl	801a4e0 <GUI_TextEn_cd_m2>
 80165a4:	e7a4      	b.n	80164f0 <GUI_Text_L_Measure+0x2b8>
		}else if(!deg && old_deg_L != 0){
 80165a6:	2a00      	cmp	r2, #0
 80165a8:	d0a2      	beq.n	80164f0 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 80165aa:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 80165ac:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 80165b0:	f105 031a 	add.w	r3, r5, #26
 80165b4:	1f69      	subs	r1, r5, #5
 80165b6:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 80165ba:	2763      	movs	r7, #99	; 0x63
 80165bc:	b292      	uxth	r2, r2
 80165be:	b289      	uxth	r1, r1
 80165c0:	b280      	uxth	r0, r0
 80165c2:	9700      	str	r7, [sp, #0]
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	f008 fa63 	bl	801ea90 <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 80165ca:	1f29      	subs	r1, r5, #4
 80165cc:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
 80165d0:	4632      	mov	r2, r6
 80165d2:	e7e3      	b.n	801659c <GUI_Text_L_Measure+0x364>
		GUI_TextRu_W_m2_sr(X+210, Y);
 80165d4:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 80165d8:	4629      	mov	r1, r5
 80165da:	b280      	uxth	r0, r0
 80165dc:	f005 f898 	bl	801b710 <GUI_TextRu_W_m2_sr>
 80165e0:	e786      	b.n	80164f0 <GUI_Text_L_Measure+0x2b8>
		GUI_TextEn_W_m2_sr(X+210, Y);
 80165e2:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 80165e6:	4629      	mov	r1, r5
 80165e8:	b280      	uxth	r0, r0
 80165ea:	f003 ff21 	bl	801a430 <GUI_TextEn_W_m2_sr>
}
 80165ee:	e77f      	b.n	80164f0 <GUI_Text_L_Measure+0x2b8>
 80165f0:	2000022c 	.word	0x2000022c

080165f4 <GUI_Text_PPF_Measure>:
uint8_t old_numPPF = 10, old_nan_PPF = 0;
void GUI_Text_PPF_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 80165f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165f8:	ed2d 8b02 	vpush	{d8}
 80165fc:	4616      	mov	r6, r2
 80165fe:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8016600:	4ab0      	ldr	r2, [pc, #704]	; (80168c4 <GUI_Text_PPF_Measure+0x2d0>)
 8016602:	4bb1      	ldr	r3, [pc, #708]	; (80168c8 <GUI_Text_PPF_Measure+0x2d4>)
 8016604:	4fb1      	ldr	r7, [pc, #708]	; (80168cc <GUI_Text_PPF_Measure+0x2d8>)
{	
 8016606:	4604      	mov	r4, r0
 8016608:	460d      	mov	r5, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 801660a:	7810      	ldrb	r0, [r2, #0]
 801660c:	7819      	ldrb	r1, [r3, #0]
 801660e:	4288      	cmp	r0, r1
{	
 8016610:	b087      	sub	sp, #28
 8016612:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8016614:	bf1c      	itt	ne
 8016616:	2300      	movne	r3, #0
 8016618:	703b      	strbne	r3, [r7, #0]
	char buffer[9] = {0};
 801661a:	2300      	movs	r3, #0
{	
 801661c:	eeb0 8a40 	vmov.f32	s16, s0
 8016620:	4691      	mov	r9, r2
	char buffer[9] = {0};
 8016622:	9303      	str	r3, [sp, #12]
 8016624:	9304      	str	r3, [sp, #16]
 8016626:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 122, deg = 0, number;
	uint32_t dec = 10;
	
		if(nope) 
 801662a:	2e00      	cmp	r6, #0
 801662c:	d067      	beq.n	80166fe <GUI_Text_PPF_Measure+0x10a>
		{	
			if(!old_nan_PPF){
 801662e:	783e      	ldrb	r6, [r7, #0]
 8016630:	2e00      	cmp	r6, #0
 8016632:	f040 80ef 	bne.w	8016814 <GUI_Text_PPF_Measure+0x220>
				TFT_SetTextColor(TFT_White);
 8016636:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801663a:	f008 fcd3 	bl	801efe4 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801663e:	2063      	movs	r0, #99	; 0x63
 8016640:	f008 fcd6 	bl	801eff0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8016644:	48a2      	ldr	r0, [pc, #648]	; (80168d0 <GUI_Text_PPF_Measure+0x2dc>)
 8016646:	f008 fcc7 	bl	801efd8 <TFT_SetFont>
				TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 801664a:	2163      	movs	r1, #99	; 0x63
 801664c:	f105 031a 	add.w	r3, r5, #26
 8016650:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8016654:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8016658:	9100      	str	r1, [sp, #0]
 801665a:	b29b      	uxth	r3, r3
 801665c:	b292      	uxth	r2, r2
 801665e:	4629      	mov	r1, r5
 8016660:	b280      	uxth	r0, r0
 8016662:	f008 fa15 	bl	801ea90 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8016666:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8016668:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 801666c:	f88d 300c 	strb.w	r3, [sp, #12]
 8016670:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8016674:	aa03      	add	r2, sp, #12
 8016676:	2303      	movs	r3, #3
 8016678:	4629      	mov	r1, r5
 801667a:	b280      	uxth	r0, r0
 801667c:	f008 fe18 	bl	801f2b0 <TFT_DisplayString>
				old_nan_PPF = 1;
 8016680:	2301      	movs	r3, #1
 8016682:	703b      	strb	r3, [r7, #0]
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	
{
	TFT_SetTextColor(TFT_White);
 8016684:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016688:	f008 fcac 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801668c:	2063      	movs	r0, #99	; 0x63
 801668e:	f008 fcaf 	bl	801eff0 <TFT_SetBackColor>
	if(Language_status == Ru ){
 8016692:	4b90      	ldr	r3, [pc, #576]	; (80168d4 <GUI_Text_PPF_Measure+0x2e0>)
 8016694:	f8df b258 	ldr.w	fp, [pc, #600]	; 80168f0 <GUI_Text_PPF_Measure+0x2fc>
 8016698:	781b      	ldrb	r3, [r3, #0]
 801669a:	1caf      	adds	r7, r5, #2
 801669c:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	f040 80bf 	bne.w	8016824 <GUI_Text_PPF_Measure+0x230>
			TFT_SetFont(&Font26RU_arch_big);
 80166a6:	488c      	ldr	r0, [pc, #560]	; (80168d8 <GUI_Text_PPF_Measure+0x2e4>)
 80166a8:	f008 fc96 	bl	801efd8 <TFT_SetFont>
			if(preGUI_screen_state != GUI_screen_state){
 80166ac:	f899 2000 	ldrb.w	r2, [r9]
 80166b0:	f898 3000 	ldrb.w	r3, [r8]
 80166b4:	429a      	cmp	r2, r3
 80166b6:	d012      	beq.n	80166de <GUI_Text_PPF_Measure+0xea>
				TFT_DrawCharRus(X, Y, 'Ф'-17);
 80166b8:	2293      	movs	r2, #147	; 0x93
 80166ba:	4629      	mov	r1, r5
 80166bc:	4620      	mov	r0, r4
 80166be:	f008 fc9d 	bl	801effc <TFT_DrawCharRus>
				TFT_DrawCharRus(X+24, Y, 'А'-17);
 80166c2:	f104 0018 	add.w	r0, r4, #24
 80166c6:	227f      	movs	r2, #127	; 0x7f
 80166c8:	4629      	mov	r1, r5
 80166ca:	b280      	uxth	r0, r0
 80166cc:	f008 fc96 	bl	801effc <TFT_DrawCharRus>
				TFT_DrawCharRus(X+48, Y, 'Р'-17);}
 80166d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80166d4:	228f      	movs	r2, #143	; 0x8f
 80166d6:	4629      	mov	r1, r5
 80166d8:	b280      	uxth	r0, r0
 80166da:	f008 fc8f 	bl	801effc <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 80166de:	f89b 3000 	ldrb.w	r3, [fp]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	f000 8098 	beq.w	8016818 <GUI_Text_PPF_Measure+0x224>
 80166e8:	4632      	mov	r2, r6
 80166ea:	b2b9      	uxth	r1, r7
 80166ec:	fa1f f08a 	uxth.w	r0, sl
 80166f0:	f004 fed8 	bl	801b4a4 <GUI_TextRu_umol>
				TFT_DrawChar(X+5, Y+2, 'P');
				TFT_DrawChar(X+20, Y+2, 'L');}
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
			}
		}	}
}
 80166f4:	b007      	add	sp, #28
 80166f6:	ecbd 8b02 	vpop	{d8}
 80166fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_PPF){TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);}
 80166fe:	783b      	ldrb	r3, [r7, #0]
 8016700:	b16b      	cbz	r3, 801671e <GUI_Text_PPF_Measure+0x12a>
 8016702:	2163      	movs	r1, #99	; 0x63
 8016704:	f105 031a 	add.w	r3, r5, #26
 8016708:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801670c:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8016710:	9100      	str	r1, [sp, #0]
 8016712:	b29b      	uxth	r3, r3
 8016714:	b292      	uxth	r2, r2
 8016716:	4629      	mov	r1, r5
 8016718:	b280      	uxth	r0, r0
 801671a:	f008 f9b9 	bl	801ea90 <TFT_FillRectangle>
	Value = floor(Value*10)/10.0;
 801671e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016722:	ee68 7a27 	vmul.f32	s15, s16, s15
	old_nan_PPF = 0;
 8016726:	2300      	movs	r3, #0
	Value = floor(Value*10)/10.0;
 8016728:	ee17 0a90 	vmov	r0, s15
	old_nan_PPF = 0;
 801672c:	703b      	strb	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 801672e:	f7e9 ff23 	bl	8000578 <__aeabi_f2d>
 8016732:	ec41 0b10 	vmov	d0, r0, r1
 8016736:	f00e ff97 	bl	8025668 <floor>
 801673a:	2200      	movs	r2, #0
 801673c:	ec51 0b10 	vmov	r0, r1, d0
 8016740:	4b66      	ldr	r3, [pc, #408]	; (80168dc <GUI_Text_PPF_Measure+0x2e8>)
 8016742:	f7ea f897 	bl	8000874 <__aeabi_ddiv>
 8016746:	f7ea fa63 	bl	8000c10 <__aeabi_d2f>
	if((Value/1000) >= 1.0)
 801674a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80168e0 <GUI_Text_PPF_Measure+0x2ec>
	Value = floor(Value*10)/10.0;
 801674e:	ee08 0a10 	vmov	s16, r0
	if((Value/1000) >= 1.0)
 8016752:	eec8 7a07 	vdiv.f32	s15, s16, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801675a:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 122, deg = 0, number;
 801675e:	277a      	movs	r7, #122	; 0x7a
	if((Value/1000) >= 1.0)
 8016760:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		Value = Value/(1000);
 8016764:	eef4 7a68 	vcmp.f32	s15, s17
 8016768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676c:	bfa8      	it	ge
 801676e:	eeb0 8a67 	vmovge.f32	s16, s15
 8016772:	bfa8      	it	ge
 8016774:	2601      	movge	r6, #1
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016776:	f1bb 0f00 	cmp.w	fp, #0
 801677a:	bf08      	it	eq
 801677c:	4618      	moveq	r0, r3
 801677e:	f008 fc31 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016782:	2063      	movs	r0, #99	; 0x63
 8016784:	f008 fc34 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8016788:	4851      	ldr	r0, [pc, #324]	; (80168d0 <GUI_Text_PPF_Measure+0x2dc>)
 801678a:	f008 fc25 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 801678e:	ee18 0a10 	vmov	r0, s16
 8016792:	f7e9 fef1 	bl	8000578 <__aeabi_f2d>
 8016796:	4602      	mov	r2, r0
 8016798:	460b      	mov	r3, r1
 801679a:	a803      	add	r0, sp, #12
 801679c:	4951      	ldr	r1, [pc, #324]	; (80168e4 <GUI_Text_PPF_Measure+0x2f0>)
 801679e:	f00b ffb7 	bl	8022710 <sprintf>
	uint32_t dec = 10;
 80167a2:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 80167a4:	2304      	movs	r3, #4
			dec *= 10;
 80167a6:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80167a8:	ee07 2a90 	vmov	s15, r2
 80167ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80167b0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80167b4:	eef4 7ae8 	vcmpe.f32	s15, s17
 80167b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167bc:	db06      	blt.n	80167cc <GUI_Text_PPF_Measure+0x1d8>
			delta_pos-=23;
 80167be:	3f17      	subs	r7, #23
			number++;
 80167c0:	f10a 0a01 	add.w	sl, sl, #1
			dec *= 10;
 80167c4:	434a      	muls	r2, r1
			delta_pos-=23;
 80167c6:	b2ff      	uxtb	r7, r7
			number++;
 80167c8:	fa5f fa8a 	uxtb.w	sl, sl
 80167cc:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80167ce:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80167d2:	d1e9      	bne.n	80167a8 <GUI_Text_PPF_Measure+0x1b4>
	if(number < old_numPPF )
 80167d4:	4b44      	ldr	r3, [pc, #272]	; (80168e8 <GUI_Text_PPF_Measure+0x2f4>)
 80167d6:	781a      	ldrb	r2, [r3, #0]
 80167d8:	4552      	cmp	r2, sl
 80167da:	469b      	mov	fp, r3
 80167dc:	d90d      	bls.n	80167fa <GUI_Text_PPF_Measure+0x206>
		TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 80167de:	2163      	movs	r1, #99	; 0x63
 80167e0:	f105 031a 	add.w	r3, r5, #26
 80167e4:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80167e8:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80167ec:	9100      	str	r1, [sp, #0]
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	b292      	uxth	r2, r2
 80167f2:	4629      	mov	r1, r5
 80167f4:	b280      	uxth	r0, r0
 80167f6:	f008 f94b 	bl	801ea90 <TFT_FillRectangle>
	buffer[8] = 0;
 80167fa:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80167fc:	19e0      	adds	r0, r4, r7
	buffer[8] = 0;
 80167fe:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016802:	aa03      	add	r2, sp, #12
 8016804:	2303      	movs	r3, #3
 8016806:	4629      	mov	r1, r5
 8016808:	b280      	uxth	r0, r0
	old_numPPF = number;
 801680a:	f88b a000 	strb.w	sl, [fp]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801680e:	f008 fd4f 	bl	801f2b0 <TFT_DisplayString>
 8016812:	e737      	b.n	8016684 <GUI_Text_PPF_Measure+0x90>
	uint8_t	delta_pos = 122, deg = 0, number;
 8016814:	461e      	mov	r6, r3
 8016816:	e735      	b.n	8016684 <GUI_Text_PPF_Measure+0x90>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8016818:	b2b9      	uxth	r1, r7
 801681a:	fa1f f08a 	uxth.w	r0, sl
 801681e:	f004 feaf 	bl	801b580 <GUI_TextRu_umol_sr>
 8016822:	e767      	b.n	80166f4 <GUI_Text_PPF_Measure+0x100>
			TFT_SetFont(&Font16EN_arch_big);
 8016824:	4831      	ldr	r0, [pc, #196]	; (80168ec <GUI_Text_PPF_Measure+0x2f8>)
 8016826:	f008 fbd7 	bl	801efd8 <TFT_SetFont>
			if(Mode_EL){
 801682a:	f89b 3000 	ldrb.w	r3, [fp]
				if(preGUI_screen_state != GUI_screen_state){
 801682e:	f899 2000 	ldrb.w	r2, [r9]
			if(Mode_EL){
 8016832:	b333      	cbz	r3, 8016882 <GUI_Text_PPF_Measure+0x28e>
				if(preGUI_screen_state != GUI_screen_state){
 8016834:	f898 3000 	ldrb.w	r3, [r8]
 8016838:	429a      	cmp	r2, r3
 801683a:	d01b      	beq.n	8016874 <GUI_Text_PPF_Measure+0x280>
				TFT_DrawChar(X-10, Y+2, 'P');
 801683c:	b2bd      	uxth	r5, r7
 801683e:	f1a4 000a 	sub.w	r0, r4, #10
 8016842:	2250      	movs	r2, #80	; 0x50
 8016844:	4629      	mov	r1, r5
 8016846:	b280      	uxth	r0, r0
 8016848:	f008 fcbc 	bl	801f1c4 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 801684c:	1d60      	adds	r0, r4, #5
 801684e:	2250      	movs	r2, #80	; 0x50
 8016850:	4629      	mov	r1, r5
 8016852:	b280      	uxth	r0, r0
 8016854:	f008 fcb6 	bl	801f1c4 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'F');
 8016858:	f104 0014 	add.w	r0, r4, #20
 801685c:	2246      	movs	r2, #70	; 0x46
 801685e:	4629      	mov	r1, r5
 8016860:	b280      	uxth	r0, r0
 8016862:	f008 fcaf 	bl	801f1c4 <TFT_DrawChar>
				TFT_DrawChar(X+35, Y+2, 'D');}
 8016866:	f104 0023 	add.w	r0, r4, #35	; 0x23
 801686a:	2244      	movs	r2, #68	; 0x44
 801686c:	4629      	mov	r1, r5
 801686e:	b280      	uxth	r0, r0
 8016870:	f008 fca8 	bl	801f1c4 <TFT_DrawChar>
				GUI_TextEn_umol(X+200, Y+2, deg);
 8016874:	4632      	mov	r2, r6
 8016876:	b2b9      	uxth	r1, r7
 8016878:	fa1f f08a 	uxth.w	r0, sl
 801687c:	f002 feb2 	bl	80195e4 <GUI_TextEn_umol>
 8016880:	e738      	b.n	80166f4 <GUI_Text_PPF_Measure+0x100>
				if(preGUI_screen_state != GUI_screen_state){
 8016882:	f898 3000 	ldrb.w	r3, [r8]
 8016886:	429a      	cmp	r2, r3
 8016888:	d014      	beq.n	80168b4 <GUI_Text_PPF_Measure+0x2c0>
				TFT_DrawChar(X-10, Y+2, 'P');
 801688a:	b2bd      	uxth	r5, r7
 801688c:	f1a4 000a 	sub.w	r0, r4, #10
 8016890:	2250      	movs	r2, #80	; 0x50
 8016892:	4629      	mov	r1, r5
 8016894:	b280      	uxth	r0, r0
 8016896:	f008 fc95 	bl	801f1c4 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 801689a:	1d60      	adds	r0, r4, #5
 801689c:	2250      	movs	r2, #80	; 0x50
 801689e:	4629      	mov	r1, r5
 80168a0:	b280      	uxth	r0, r0
 80168a2:	f008 fc8f 	bl	801f1c4 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'L');}
 80168a6:	f104 0014 	add.w	r0, r4, #20
 80168aa:	224c      	movs	r2, #76	; 0x4c
 80168ac:	4629      	mov	r1, r5
 80168ae:	b280      	uxth	r0, r0
 80168b0:	f008 fc88 	bl	801f1c4 <TFT_DrawChar>
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
 80168b4:	4632      	mov	r2, r6
 80168b6:	b2b9      	uxth	r1, r7
 80168b8:	fa1f f08a 	uxth.w	r0, sl
 80168bc:	f002 fef8 	bl	80196b0 <GUI_TextEn_umol_sr>
}
 80168c0:	e718      	b.n	80166f4 <GUI_Text_PPF_Measure+0x100>
 80168c2:	bf00      	nop
 80168c4:	2000022a 	.word	0x2000022a
 80168c8:	20005279 	.word	0x20005279
 80168cc:	200052b2 	.word	0x200052b2
 80168d0:	200001f0 	.word	0x200001f0
 80168d4:	2000527b 	.word	0x2000527b
 80168d8:	20000200 	.word	0x20000200
 80168dc:	40240000 	.word	0x40240000
 80168e0:	447a0000 	.word	0x447a0000
 80168e4:	0803416b 	.word	0x0803416b
 80168e8:	20000234 	.word	0x20000234
 80168ec:	200001b0 	.word	0x200001b0
 80168f0:	20000a48 	.word	0x20000a48

080168f4 <GUI_Text_PPFRGB_Measure>:
uint8_t old_numPPFR = 10, old_numPPFG = 10, old_numPPFB = 10, old_numPPFFR = 10, test = 0, test2 = 0, delta_pos2 = 140, old_nan_PPFRGB = 0;
float ValueB2 = 10;
void GUI_Text_PPFRGB_Measure(uint16_t X, uint16_t Y, float ValueR, float ValueG, float ValueB, float ValueFR, uint8_t nope, uint8_t grey)
{
 80168f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f8:	ed2d 8b08 	vpush	{d8-d11}
 80168fc:	4616      	mov	r6, r2
 80168fe:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8016900:	4aad      	ldr	r2, [pc, #692]	; (8016bb8 <GUI_Text_PPFRGB_Measure+0x2c4>)
 8016902:	4bae      	ldr	r3, [pc, #696]	; (8016bbc <GUI_Text_PPFRGB_Measure+0x2c8>)
 8016904:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8016bd8 <GUI_Text_PPFRGB_Measure+0x2e4>
{
 8016908:	4605      	mov	r5, r0
 801690a:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 801690c:	7810      	ldrb	r0, [r2, #0]
 801690e:	7819      	ldrb	r1, [r3, #0]
{
 8016910:	b089      	sub	sp, #36	; 0x24
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8016912:	4288      	cmp	r0, r1
 8016914:	9303      	str	r3, [sp, #12]
 8016916:	bf1c      	itt	ne
 8016918:	2300      	movne	r3, #0
 801691a:	f889 3000 	strbne.w	r3, [r9]
	
	char buffer[9] = {0};
 801691e:	2300      	movs	r3, #0
{
 8016920:	eeb0 ba40 	vmov.f32	s22, s0
 8016924:	eef0 9a60 	vmov.f32	s19, s1
 8016928:	eeb0 8a41 	vmov.f32	s16, s2
 801692c:	eef0 aa61 	vmov.f32	s21, s3
 8016930:	9202      	str	r2, [sp, #8]
	char buffer[9] = {0};
 8016932:	9305      	str	r3, [sp, #20]
 8016934:	9306      	str	r3, [sp, #24]
 8016936:	f88d 301c 	strb.w	r3, [sp, #28]
	uint8_t	delta_pos = 140, deg = 0, number=0;
	uint32_t dec = 10;
		if(nope) 
 801693a:	2e00      	cmp	r6, #0
 801693c:	f000 814e 	beq.w	8016bdc <GUI_Text_PPFRGB_Measure+0x2e8>
		{	
			if(!old_nan_PPFRGB){
 8016940:	f899 7000 	ldrb.w	r7, [r9]
 8016944:	2f00      	cmp	r7, #0
 8016946:	f040 8379 	bne.w	801703c <GUI_Text_PPFRGB_Measure+0x748>
				TFT_SetTextColor(TFT_White);
 801694a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801694e:	f008 fb49 	bl	801efe4 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8016952:	2063      	movs	r0, #99	; 0x63
 8016954:	f008 fb4c 	bl	801eff0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8016958:	f105 0662 	add.w	r6, r5, #98	; 0x62
				TFT_SetFont(&Font26EN_arch_digit);
 801695c:	4898      	ldr	r0, [pc, #608]	; (8016bc0 <GUI_Text_PPFRGB_Measure+0x2cc>)
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 801695e:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
				TFT_SetFont(&Font26EN_arch_digit);
 8016962:	f008 fb39 	bl	801efd8 <TFT_SetFont>
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8016966:	b2b6      	uxth	r6, r6
 8016968:	fa1f f888 	uxth.w	r8, r8
 801696c:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8016970:	f104 0314 	add.w	r3, r4, #20
 8016974:	4630      	mov	r0, r6
 8016976:	b29b      	uxth	r3, r3
 8016978:	4642      	mov	r2, r8
 801697a:	4621      	mov	r1, r4
 801697c:	f8cd a000 	str.w	sl, [sp]
 8016980:	f008 f886 	bl	801ea90 <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8016984:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8016988:	f104 0115 	add.w	r1, r4, #21
 801698c:	4630      	mov	r0, r6
 801698e:	b29b      	uxth	r3, r3
 8016990:	4642      	mov	r2, r8
 8016992:	b289      	uxth	r1, r1
 8016994:	f8cd a000 	str.w	sl, [sp]
 8016998:	f008 f87a 	bl	801ea90 <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 801699c:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 80169a0:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80169a4:	4630      	mov	r0, r6
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	4642      	mov	r2, r8
 80169aa:	b289      	uxth	r1, r1
 80169ac:	f8cd a000 	str.w	sl, [sp]
 80169b0:	f008 f86e 	bl	801ea90 <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80169b4:	f104 0357 	add.w	r3, r4, #87	; 0x57
 80169b8:	f104 0141 	add.w	r1, r4, #65	; 0x41
 80169bc:	4630      	mov	r0, r6
 80169be:	b29b      	uxth	r3, r3
 80169c0:	4642      	mov	r2, r8
 80169c2:	b289      	uxth	r1, r1
 80169c4:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80169c8:	f105 0675 	add.w	r6, r5, #117	; 0x75
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80169cc:	f008 f860 	bl	801ea90 <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80169d0:	b2b6      	uxth	r6, r6
				buffer[0] = '-';buffer[1] = '-';
 80169d2:	232d      	movs	r3, #45	; 0x2d
 80169d4:	f88d 3014 	strb.w	r3, [sp, #20]
 80169d8:	f88d 3015 	strb.w	r3, [sp, #21]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80169dc:	aa05      	add	r2, sp, #20
 80169de:	2303      	movs	r3, #3
 80169e0:	4621      	mov	r1, r4
 80169e2:	4630      	mov	r0, r6
 80169e4:	f008 fc64 	bl	801f2b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+22, (uint8_t *)buffer, LEFT_MODE);
 80169e8:	f104 0116 	add.w	r1, r4, #22
 80169ec:	2303      	movs	r3, #3
 80169ee:	aa05      	add	r2, sp, #20
 80169f0:	b289      	uxth	r1, r1
 80169f2:	4630      	mov	r0, r6
 80169f4:	f008 fc5c 	bl	801f2b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+44, (uint8_t *)buffer, LEFT_MODE);
 80169f8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80169fc:	2303      	movs	r3, #3
 80169fe:	aa05      	add	r2, sp, #20
 8016a00:	b289      	uxth	r1, r1
 8016a02:	4630      	mov	r0, r6
 8016a04:	f008 fc54 	bl	801f2b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8016a08:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8016a0c:	2303      	movs	r3, #3
 8016a0e:	aa05      	add	r2, sp, #20
 8016a10:	b289      	uxth	r1, r1
 8016a12:	4630      	mov	r0, r6
 8016a14:	f008 fc4c 	bl	801f2b0 <TFT_DisplayString>
				old_nan_PPFRGB = 1;
 8016a18:	2301      	movs	r3, #1
 8016a1a:	f889 3000 	strb.w	r3, [r9]
	number = 0;
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8016a1e:	9b02      	ldr	r3, [sp, #8]
 8016a20:	781a      	ldrb	r2, [r3, #0]
 8016a22:	9b03      	ldr	r3, [sp, #12]
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	429a      	cmp	r2, r3
 8016a28:	f000 80c1 	beq.w	8016bae <GUI_Text_PPFRGB_Measure+0x2ba>
if (Language_status==Ru)
 8016a2c:	4e65      	ldr	r6, [pc, #404]	; (8016bc4 <GUI_Text_PPFRGB_Measure+0x2d0>)
 8016a2e:	7833      	ldrb	r3, [r6, #0]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	f040 830a 	bne.w	801704a <GUI_Text_PPFRGB_Measure+0x756>
	{	TFT_SetTextColor(TFT_White);
 8016a36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016a3a:	f008 fad3 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
 8016a3e:	4862      	ldr	r0, [pc, #392]	; (8016bc8 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8016a40:	f008 faca 	bl	801efd8 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y, 'С');
 8016a44:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016a48:	22a1      	movs	r2, #161	; 0xa1
 8016a4a:	4621      	mov	r1, r4
 8016a4c:	b280      	uxth	r0, r0
 8016a4e:	f008 fad5 	bl	801effc <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8016a52:	f104 0805 	add.w	r8, r4, #5
		TFT_SetFont(&Font16RU_arch_small);
 8016a56:	485d      	ldr	r0, [pc, #372]	; (8016bcc <GUI_Text_PPFRGB_Measure+0x2d8>)
 8016a58:	f008 fabe 	bl	801efd8 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8016a5c:	fa1f f888 	uxth.w	r8, r8
 8016a60:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8016a64:	22b8      	movs	r2, #184	; 0xb8
 8016a66:	4641      	mov	r1, r8
 8016a68:	b280      	uxth	r0, r0
 8016a6a:	f008 fac7 	bl	801effc <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+5, 'н');
 8016a6e:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8016a72:	b280      	uxth	r0, r0
 8016a74:	22bd      	movs	r2, #189	; 0xbd
 8016a76:	4641      	mov	r1, r8
 8016a78:	f008 fac0 	bl	801effc <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8016a7c:	4b54      	ldr	r3, [pc, #336]	; (8016bd0 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016a7e:	781b      	ldrb	r3, [r3, #0]
 8016a80:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	f000 82db 	beq.w	8017040 <GUI_Text_PPFRGB_Measure+0x74c>
 8016a8a:	463a      	mov	r2, r7
 8016a8c:	4621      	mov	r1, r4
 8016a8e:	b280      	uxth	r0, r0
 8016a90:	f004 fd08 	bl	801b4a4 <GUI_TextRu_umol>
	{TFT_SetTextColor(TFT_White);
		GUI_TextEn_Blue(X+34, Y);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
	}
	
	if (Language_status==Ru)
 8016a94:	7833      	ldrb	r3, [r6, #0]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	f040 82f7 	bne.w	801708a <GUI_Text_PPFRGB_Measure+0x796>
	{	TFT_SetTextColor(TFT_White);
 8016a9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016aa0:	f008 faa0 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8016aa4:	f104 0816 	add.w	r8, r4, #22
		TFT_SetFont(&Font16RU_arch_big);
 8016aa8:	4847      	ldr	r0, [pc, #284]	; (8016bc8 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8016aaa:	f008 fa95 	bl	801efd8 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8016aae:	fa1f f888 	uxth.w	r8, r8
 8016ab2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016ab6:	2297      	movs	r2, #151	; 0x97
 8016ab8:	4641      	mov	r1, r8
 8016aba:	b280      	uxth	r0, r0
 8016abc:	f008 fa9e 	bl	801effc <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+27, 'е');
 8016ac0:	f104 091b 	add.w	r9, r4, #27
		TFT_SetFont(&Font16RU_arch_small);
 8016ac4:	4841      	ldr	r0, [pc, #260]	; (8016bcc <GUI_Text_PPFRGB_Measure+0x2d8>)
 8016ac6:	f008 fa87 	bl	801efd8 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+27, 'е');
 8016aca:	fa1f f989 	uxth.w	r9, r9
 8016ace:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8016ad2:	22b5      	movs	r2, #181	; 0xb5
 8016ad4:	4649      	mov	r1, r9
 8016ad6:	b280      	uxth	r0, r0
 8016ad8:	f008 fa90 	bl	801effc <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+27, 'л');
 8016adc:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8016ae0:	b280      	uxth	r0, r0
 8016ae2:	22bb      	movs	r2, #187	; 0xbb
 8016ae4:	4649      	mov	r1, r9
 8016ae6:	f008 fa89 	bl	801effc <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 8016aea:	4b39      	ldr	r3, [pc, #228]	; (8016bd0 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	f000 82c4 	beq.w	8017080 <GUI_Text_PPFRGB_Measure+0x78c>
 8016af8:	463a      	mov	r2, r7
 8016afa:	4641      	mov	r1, r8
 8016afc:	b280      	uxth	r0, r0
 8016afe:	f004 fcd1 	bl	801b4a4 <GUI_TextRu_umol>
		GUI_TextEn_Green(X+17, Y+22);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
	}
	
	
	if (Language_status==Ru)
 8016b02:	7833      	ldrb	r3, [r6, #0]
 8016b04:	f105 0925 	add.w	r9, r5, #37	; 0x25
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	f040 82e2 	bne.w	80170d2 <GUI_Text_PPFRGB_Measure+0x7de>
	{	TFT_SetTextColor(TFT_White);
 8016b0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016b12:	f008 fa67 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8016b16:	f104 082c 	add.w	r8, r4, #44	; 0x2c
		TFT_SetFont(&Font16RU_arch_big);
 8016b1a:	482b      	ldr	r0, [pc, #172]	; (8016bc8 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8016b1c:	f008 fa5c 	bl	801efd8 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8016b20:	fa1f f888 	uxth.w	r8, r8
 8016b24:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016b28:	229a      	movs	r2, #154	; 0x9a
 8016b2a:	4641      	mov	r1, r8
 8016b2c:	b280      	uxth	r0, r0
 8016b2e:	f008 fa65 	bl	801effc <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
 8016b32:	4826      	ldr	r0, [pc, #152]	; (8016bcc <GUI_Text_PPFRGB_Measure+0x2d8>)
 8016b34:	f008 fa50 	bl	801efd8 <TFT_SetFont>
		TFT_DrawCharRus(X+55, Y+49, 'р');
 8016b38:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8016b3c:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8016b40:	b280      	uxth	r0, r0
 8016b42:	2280      	movs	r2, #128	; 0x80
 8016b44:	b289      	uxth	r1, r1
 8016b46:	f008 fa59 	bl	801effc <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 8016b4a:	4b21      	ldr	r3, [pc, #132]	; (8016bd0 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016b4c:	781b      	ldrb	r3, [r3, #0]
 8016b4e:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	f000 82b8 	beq.w	80170c8 <GUI_Text_PPFRGB_Measure+0x7d4>
 8016b58:	463a      	mov	r2, r7
 8016b5a:	4641      	mov	r1, r8
 8016b5c:	b280      	uxth	r0, r0
 8016b5e:	f004 fca1 	bl	801b4a4 <GUI_TextRu_umol>
	else if (Language_status==En)
	{	TFT_SetTextColor(TFT_White);
		GUI_TextEn_Red(X+37, Y+44);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
	}
	TFT_SetTextColor(TFT_White);
 8016b62:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+37, Y+66, 'F');
 8016b66:	3442      	adds	r4, #66	; 0x42
	TFT_SetTextColor(TFT_White);
 8016b68:	f008 fa3c 	bl	801efe4 <TFT_SetTextColor>
	TFT_DrawChar(X+37, Y+66, 'F');
 8016b6c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_big);
 8016b6e:	4819      	ldr	r0, [pc, #100]	; (8016bd4 <GUI_Text_PPFRGB_Measure+0x2e0>)
 8016b70:	f008 fa32 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+37, Y+66, 'F');
 8016b74:	2246      	movs	r2, #70	; 0x46
 8016b76:	4621      	mov	r1, r4
 8016b78:	fa1f f089 	uxth.w	r0, r9
 8016b7c:	f008 fb22 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+66, 'R');
 8016b80:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8016b84:	2252      	movs	r2, #82	; 0x52
 8016b86:	4621      	mov	r1, r4
 8016b88:	b280      	uxth	r0, r0
 8016b8a:	f008 fb1b 	bl	801f1c4 <TFT_DrawChar>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8016b8e:	7833      	ldrb	r3, [r6, #0]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	f040 82c1 	bne.w	8017118 <GUI_Text_PPFRGB_Measure+0x824>
 8016b96:	4b0e      	ldr	r3, [pc, #56]	; (8016bd0 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	f000 82b5 	beq.w	801710e <GUI_Text_PPFRGB_Measure+0x81a>
 8016ba4:	463a      	mov	r2, r7
 8016ba6:	4621      	mov	r1, r4
 8016ba8:	b280      	uxth	r0, r0
 8016baa:	f004 fc7b 	bl	801b4a4 <GUI_TextRu_umol>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
}
}
 8016bae:	b009      	add	sp, #36	; 0x24
 8016bb0:	ecbd 8b08 	vpop	{d8-d11}
 8016bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bb8:	2000022a 	.word	0x2000022a
 8016bbc:	20005279 	.word	0x20005279
 8016bc0:	200001f0 	.word	0x200001f0
 8016bc4:	2000527b 	.word	0x2000527b
 8016bc8:	200001d0 	.word	0x200001d0
 8016bcc:	200001d8 	.word	0x200001d8
 8016bd0:	20000a48 	.word	0x20000a48
 8016bd4:	200001b0 	.word	0x200001b0
 8016bd8:	200052b3 	.word	0x200052b3
		if(old_nan_PPFRGB) 
 8016bdc:	f899 3000 	ldrb.w	r3, [r9]
 8016be0:	b3b3      	cbz	r3, 8016c50 <GUI_Text_PPFRGB_Measure+0x35c>
			TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8016be2:	f105 0762 	add.w	r7, r5, #98	; 0x62
 8016be6:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
 8016bea:	b2bf      	uxth	r7, r7
 8016bec:	fa1f f888 	uxth.w	r8, r8
 8016bf0:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8016bf4:	f104 0314 	add.w	r3, r4, #20
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	4642      	mov	r2, r8
 8016bfc:	4621      	mov	r1, r4
 8016bfe:	4638      	mov	r0, r7
 8016c00:	f8cd a000 	str.w	sl, [sp]
 8016c04:	f007 ff44 	bl	801ea90 <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8016c08:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8016c0c:	f104 0115 	add.w	r1, r4, #21
 8016c10:	b29b      	uxth	r3, r3
 8016c12:	4642      	mov	r2, r8
 8016c14:	b289      	uxth	r1, r1
 8016c16:	4638      	mov	r0, r7
 8016c18:	f8cd a000 	str.w	sl, [sp]
 8016c1c:	f007 ff38 	bl	801ea90 <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8016c20:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8016c24:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8016c28:	b29b      	uxth	r3, r3
 8016c2a:	4642      	mov	r2, r8
 8016c2c:	b289      	uxth	r1, r1
 8016c2e:	4638      	mov	r0, r7
 8016c30:	f8cd a000 	str.w	sl, [sp]
 8016c34:	f007 ff2c 	bl	801ea90 <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8016c38:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8016c3c:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8016c40:	f8cd a000 	str.w	sl, [sp]
 8016c44:	b29b      	uxth	r3, r3
 8016c46:	4642      	mov	r2, r8
 8016c48:	b289      	uxth	r1, r1
 8016c4a:	4638      	mov	r0, r7
 8016c4c:	f007 ff20 	bl	801ea90 <TFT_FillRectangle>
	ValueB = floor(ValueB*10)/10.0;
 8016c50:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
 8016c54:	ee68 7a28 	vmul.f32	s15, s16, s17
	old_nan_PPFRGB = 0;
 8016c58:	2700      	movs	r7, #0
	ValueB = floor(ValueB*10)/10.0;
 8016c5a:	ee17 0a90 	vmov	r0, s15
	old_nan_PPFRGB = 0;
 8016c5e:	f889 7000 	strb.w	r7, [r9]
	ValueB = floor(ValueB*10)/10.0;
 8016c62:	f7e9 fc89 	bl	8000578 <__aeabi_f2d>
 8016c66:	ec41 0b10 	vmov	d0, r0, r1
 8016c6a:	f00e fcfd 	bl	8025668 <floor>
 8016c6e:	2200      	movs	r2, #0
 8016c70:	ec51 0b10 	vmov	r0, r1, d0
 8016c74:	4bd4      	ldr	r3, [pc, #848]	; (8016fc8 <GUI_Text_PPFRGB_Measure+0x6d4>)
 8016c76:	f7e9 fdfd 	bl	8000874 <__aeabi_ddiv>
 8016c7a:	f7e9 ffc9 	bl	8000c10 <__aeabi_d2f>
	if((ValueB/1000) > 1.0)
 8016c7e:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8016fcc <GUI_Text_PPFRGB_Measure+0x6d8>
	test = ValueB/(dec);
 8016c82:	4ad3      	ldr	r2, [pc, #844]	; (8016fd0 <GUI_Text_PPFRGB_Measure+0x6dc>)
	ValueB = floor(ValueB*10)/10.0;
 8016c84:	ee09 0a10 	vmov	s18, r0
	if((ValueB/1000) > 1.0)
 8016c88:	eec9 7a07 	vdiv.f32	s15, s18, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016c8c:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8016c90:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		ValueB = ValueB/(1000);
 8016c94:	eef4 7a48 	vcmp.f32	s15, s16
 8016c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c9c:	bfc8      	it	gt
 8016c9e:	eeb0 9a67 	vmovgt.f32	s18, s15
	test = ValueB/(dec);
 8016ca2:	eec9 7a28 	vdiv.f32	s15, s18, s17
 8016ca6:	eeb0 aa47 	vmov.f32	s20, s14
 8016caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	test2 = ValueB/(dec*dec);
 8016cae:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8016fd4 <GUI_Text_PPFRGB_Measure+0x6e0>
	test = ValueB/(dec);
 8016cb2:	ee17 3a90 	vmov	r3, s15
	test2 = ValueB/(dec*dec);
 8016cb6:	eec9 7a07 	vdiv.f32	s15, s18, s14
	test = ValueB/(dec);
 8016cba:	7013      	strb	r3, [r2, #0]
	test2 = ValueB/(dec*dec);
 8016cbc:	4ac6      	ldr	r2, [pc, #792]	; (8016fd8 <GUI_Text_PPFRGB_Measure+0x6e4>)
 8016cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016cc2:	ee17 3a90 	vmov	r3, s15
 8016cc6:	7013      	strb	r3, [r2, #0]
	delta_pos2 = 140;
 8016cc8:	4bc4      	ldr	r3, [pc, #784]	; (8016fdc <GUI_Text_PPFRGB_Measure+0x6e8>)
 8016cca:	228c      	movs	r2, #140	; 0x8c
 8016ccc:	701a      	strb	r2, [r3, #0]
 8016cce:	4698      	mov	r8, r3
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016cd4:	45bb      	cmp	fp, r7
 8016cd6:	bf08      	it	eq
 8016cd8:	4618      	moveq	r0, r3
 8016cda:	f008 f983 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016cde:	2063      	movs	r0, #99	; 0x63
 8016ce0:	f008 f986 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016ce4:	48be      	ldr	r0, [pc, #760]	; (8016fe0 <GUI_Text_PPFRGB_Measure+0x6ec>)
 8016ce6:	f008 f977 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueB);
 8016cea:	ee19 0a10 	vmov	r0, s18
 8016cee:	f7e9 fc43 	bl	8000578 <__aeabi_f2d>
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	460b      	mov	r3, r1
 8016cf6:	a805      	add	r0, sp, #20
 8016cf8:	49ba      	ldr	r1, [pc, #744]	; (8016fe4 <GUI_Text_PPFRGB_Measure+0x6f0>)
 8016cfa:	f00b fd09 	bl	8022710 <sprintf>
	uint32_t dec = 10;
 8016cfe:	210a      	movs	r1, #10
 8016d00:	f898 3000 	ldrb.w	r3, [r8]
	sprintf (buffer, "%.1f", ValueB);
 8016d04:	2204      	movs	r2, #4
 8016d06:	4638      	mov	r0, r7
			dec *= 10;
 8016d08:	468e      	mov	lr, r1
		if((ValueB/((float)dec)) >= 1.0)
 8016d0a:	ee07 1a90 	vmov	s15, r1
 8016d0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016d12:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8016d16:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d1e:	db06      	blt.n	8016d2e <GUI_Text_PPFRGB_Measure+0x43a>
			delta_pos2-=22;
 8016d20:	3b16      	subs	r3, #22
			number++;
 8016d22:	3701      	adds	r7, #1
			dec *= 10;
 8016d24:	fb0e f101 	mul.w	r1, lr, r1
			delta_pos2-=22;
 8016d28:	b2db      	uxtb	r3, r3
			number++;
 8016d2a:	b2ff      	uxtb	r7, r7
 8016d2c:	2001      	movs	r0, #1
 8016d2e:	3a01      	subs	r2, #1
	for (uint8_t i = 1; i <= 4; i++)
 8016d30:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8016d34:	d1e9      	bne.n	8016d0a <GUI_Text_PPFRGB_Measure+0x416>
 8016d36:	b108      	cbz	r0, 8016d3c <GUI_Text_PPFRGB_Measure+0x448>
 8016d38:	f888 3000 	strb.w	r3, [r8]
	if(number < old_numPPFB )
 8016d3c:	4baa      	ldr	r3, [pc, #680]	; (8016fe8 <GUI_Text_PPFRGB_Measure+0x6f4>)
 8016d3e:	781a      	ldrb	r2, [r3, #0]
 8016d40:	42ba      	cmp	r2, r7
 8016d42:	4699      	mov	r9, r3
 8016d44:	d90d      	bls.n	8016d62 <GUI_Text_PPFRGB_Measure+0x46e>
		TFT_FillRectangle(X+98, Y, X+195, Y+20, TFT_Black_Bkgr);
 8016d46:	2163      	movs	r1, #99	; 0x63
 8016d48:	f104 0314 	add.w	r3, r4, #20
 8016d4c:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8016d50:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8016d54:	9100      	str	r1, [sp, #0]
 8016d56:	b29b      	uxth	r3, r3
 8016d58:	b292      	uxth	r2, r2
 8016d5a:	4621      	mov	r1, r4
 8016d5c:	b280      	uxth	r0, r0
 8016d5e:	f007 fe97 	bl	801ea90 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 8016d62:	f898 0000 	ldrb.w	r0, [r8]
	old_numPPFB = number;
 8016d66:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 8016d6a:	4428      	add	r0, r5
 8016d6c:	2303      	movs	r3, #3
 8016d6e:	aa05      	add	r2, sp, #20
 8016d70:	4621      	mov	r1, r4
 8016d72:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8016d74:	2700      	movs	r7, #0
 8016d76:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 8016d7a:	f008 fa99 	bl	801f2b0 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 8016d7e:	ee6b 7a28 	vmul.f32	s15, s22, s17
	delta_pos = 140;
 8016d82:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 8016d86:	ee17 0a90 	vmov	r0, s15
 8016d8a:	f7e9 fbf5 	bl	8000578 <__aeabi_f2d>
 8016d8e:	ec41 0b10 	vmov	d0, r0, r1
 8016d92:	f00e fc69 	bl	8025668 <floor>
 8016d96:	2200      	movs	r2, #0
 8016d98:	4b8b      	ldr	r3, [pc, #556]	; (8016fc8 <GUI_Text_PPFRGB_Measure+0x6d4>)
 8016d9a:	ec51 0b10 	vmov	r0, r1, d0
 8016d9e:	f7e9 fd69 	bl	8000874 <__aeabi_ddiv>
 8016da2:	f7e9 ff35 	bl	8000c10 <__aeabi_d2f>
	if((ValueG/1000) > 1.0)
 8016da6:	eec9 7a8a 	vdiv.f32	s15, s19, s20
	ValueR = floor(ValueR*10)/10.0;
 8016daa:	ee09 0a10 	vmov	s18, r0
		ValueG = ValueG/(1000);
 8016dae:	eef4 7a48 	vcmp.f32	s15, s16
 8016db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db6:	bfc8      	it	gt
 8016db8:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 8016dbc:	4888      	ldr	r0, [pc, #544]	; (8016fe0 <GUI_Text_PPFRGB_Measure+0x6ec>)
 8016dbe:	f008 f90b 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueG);
 8016dc2:	ee19 0a90 	vmov	r0, s19
 8016dc6:	f7e9 fbd7 	bl	8000578 <__aeabi_f2d>
 8016dca:	4602      	mov	r2, r0
 8016dcc:	460b      	mov	r3, r1
 8016dce:	a805      	add	r0, sp, #20
 8016dd0:	4984      	ldr	r1, [pc, #528]	; (8016fe4 <GUI_Text_PPFRGB_Measure+0x6f0>)
 8016dd2:	f00b fc9d 	bl	8022710 <sprintf>
	dec = 10;
 8016dd6:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueG);
 8016dd8:	2304      	movs	r3, #4
			dec *= 10;
 8016dda:	4611      	mov	r1, r2
		if((ValueG/(dec)) >= 1.0)
 8016ddc:	ee07 2a90 	vmov	s15, r2
 8016de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016de4:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8016de8:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df0:	db06      	blt.n	8016e00 <GUI_Text_PPFRGB_Measure+0x50c>
			delta_pos-=22;
 8016df2:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 8016df6:	3701      	adds	r7, #1
			dec *= 10;
 8016df8:	434a      	muls	r2, r1
			delta_pos-=22;
 8016dfa:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8016dfe:	b2ff      	uxtb	r7, r7
 8016e00:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8016e02:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016e06:	d1e9      	bne.n	8016ddc <GUI_Text_PPFRGB_Measure+0x4e8>
		if(number < old_numPPFG )
 8016e08:	4b78      	ldr	r3, [pc, #480]	; (8016fec <GUI_Text_PPFRGB_Measure+0x6f8>)
 8016e0a:	781a      	ldrb	r2, [r3, #0]
 8016e0c:	42ba      	cmp	r2, r7
 8016e0e:	4699      	mov	r9, r3
 8016e10:	d911      	bls.n	8016e36 <GUI_Text_PPFRGB_Measure+0x542>
		TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8016e12:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8016e16:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8016e1a:	f104 0115 	add.w	r1, r4, #21
 8016e1e:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8016e22:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8016e26:	f8cd e000 	str.w	lr, [sp]
 8016e2a:	b29b      	uxth	r3, r3
 8016e2c:	b292      	uxth	r2, r2
 8016e2e:	b289      	uxth	r1, r1
 8016e30:	b280      	uxth	r0, r0
 8016e32:	f007 fe2d 	bl	801ea90 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8016e36:	eb05 0008 	add.w	r0, r5, r8
 8016e3a:	f104 0116 	add.w	r1, r4, #22
 8016e3e:	2303      	movs	r3, #3
 8016e40:	aa05      	add	r2, sp, #20
	old_numPPFG = number;
 8016e42:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8016e46:	b289      	uxth	r1, r1
 8016e48:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8016e4a:	2700      	movs	r7, #0
 8016e4c:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8016e50:	f008 fa2e 	bl	801f2b0 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 8016e54:	ee69 7a28 	vmul.f32	s15, s18, s17
	delta_pos = 140;
 8016e58:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 8016e5c:	ee17 0a90 	vmov	r0, s15
 8016e60:	f7e9 fb8a 	bl	8000578 <__aeabi_f2d>
 8016e64:	ec41 0b10 	vmov	d0, r0, r1
 8016e68:	f00e fbfe 	bl	8025668 <floor>
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	4b56      	ldr	r3, [pc, #344]	; (8016fc8 <GUI_Text_PPFRGB_Measure+0x6d4>)
 8016e70:	ec51 0b10 	vmov	r0, r1, d0
 8016e74:	f7e9 fcfe 	bl	8000874 <__aeabi_ddiv>
 8016e78:	f7e9 feca 	bl	8000c10 <__aeabi_d2f>
 8016e7c:	ee09 0a10 	vmov	s18, r0
	if((ValueR/1000) > 1.0)
 8016e80:	eec9 7a0a 	vdiv.f32	s15, s18, s20
	TFT_SetFont(&Font16EN_arch_big);
 8016e84:	4856      	ldr	r0, [pc, #344]	; (8016fe0 <GUI_Text_PPFRGB_Measure+0x6ec>)
		ValueR = ValueR/(1000);
 8016e86:	eef4 7a48 	vcmp.f32	s15, s16
 8016e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e8e:	bfc8      	it	gt
 8016e90:	eeb0 9a67 	vmovgt.f32	s18, s15
	TFT_SetFont(&Font16EN_arch_big);
 8016e94:	f008 f8a0 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueR);
 8016e98:	ee19 0a10 	vmov	r0, s18
 8016e9c:	f7e9 fb6c 	bl	8000578 <__aeabi_f2d>
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	460b      	mov	r3, r1
 8016ea4:	a805      	add	r0, sp, #20
 8016ea6:	494f      	ldr	r1, [pc, #316]	; (8016fe4 <GUI_Text_PPFRGB_Measure+0x6f0>)
 8016ea8:	f00b fc32 	bl	8022710 <sprintf>
	dec = 10;
 8016eac:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueR);
 8016eae:	2304      	movs	r3, #4
			dec *= 10;
 8016eb0:	4611      	mov	r1, r2
		if((ValueR/(dec)) >= 1.0)
 8016eb2:	ee07 2a90 	vmov	s15, r2
 8016eb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016eba:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8016ebe:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ec6:	db06      	blt.n	8016ed6 <GUI_Text_PPFRGB_Measure+0x5e2>
			delta_pos-=22;
 8016ec8:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 8016ecc:	3701      	adds	r7, #1
			dec *= 10;
 8016ece:	434a      	muls	r2, r1
			delta_pos-=22;
 8016ed0:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8016ed4:	b2ff      	uxtb	r7, r7
 8016ed6:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8016ed8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016edc:	d1e9      	bne.n	8016eb2 <GUI_Text_PPFRGB_Measure+0x5be>
	if(number < old_numPPFR )
 8016ede:	4b44      	ldr	r3, [pc, #272]	; (8016ff0 <GUI_Text_PPFRGB_Measure+0x6fc>)
 8016ee0:	781a      	ldrb	r2, [r3, #0]
 8016ee2:	42ba      	cmp	r2, r7
 8016ee4:	4699      	mov	r9, r3
 8016ee6:	d911      	bls.n	8016f0c <GUI_Text_PPFRGB_Measure+0x618>
		TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8016ee8:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8016eec:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8016ef0:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8016ef4:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8016ef8:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8016efc:	f8cd e000 	str.w	lr, [sp]
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	b292      	uxth	r2, r2
 8016f04:	b289      	uxth	r1, r1
 8016f06:	b280      	uxth	r0, r0
 8016f08:	f007 fdc2 	bl	801ea90 <TFT_FillRectangle>
	buffer[8] = 0;
 8016f0c:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8016f0e:	eb05 0008 	add.w	r0, r5, r8
 8016f12:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8016f16:	aa05      	add	r2, sp, #20
	buffer[8] = 0;
 8016f18:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8016f1c:	b289      	uxth	r1, r1
 8016f1e:	2303      	movs	r3, #3
 8016f20:	b280      	uxth	r0, r0
	old_numPPFR = number;
 8016f22:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8016f26:	f008 f9c3 	bl	801f2b0 <TFT_DisplayString>
	ValueFR = floor(ValueFR*10)/10.0;
 8016f2a:	ee6a 7aa8 	vmul.f32	s15, s21, s17
	delta_pos = 140;
 8016f2e:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueFR = floor(ValueFR*10)/10.0;
 8016f32:	ee17 0a90 	vmov	r0, s15
 8016f36:	f7e9 fb1f 	bl	8000578 <__aeabi_f2d>
 8016f3a:	ec41 0b10 	vmov	d0, r0, r1
 8016f3e:	f00e fb93 	bl	8025668 <floor>
 8016f42:	2200      	movs	r2, #0
 8016f44:	4b20      	ldr	r3, [pc, #128]	; (8016fc8 <GUI_Text_PPFRGB_Measure+0x6d4>)
 8016f46:	ec51 0b10 	vmov	r0, r1, d0
 8016f4a:	f7e9 fc93 	bl	8000874 <__aeabi_ddiv>
 8016f4e:	f7e9 fe5f 	bl	8000c10 <__aeabi_d2f>
 8016f52:	ee08 0a90 	vmov	s17, r0
	if((ValueFR/1000) > 1.0)
 8016f56:	eec8 7a8a 	vdiv.f32	s15, s17, s20
	TFT_SetFont(&Font16EN_arch_big);
 8016f5a:	4821      	ldr	r0, [pc, #132]	; (8016fe0 <GUI_Text_PPFRGB_Measure+0x6ec>)
	else deg=0;
 8016f5c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f64:	bfc8      	it	gt
 8016f66:	eef0 8a67 	vmovgt.f32	s17, s15
 8016f6a:	bfcc      	ite	gt
 8016f6c:	2701      	movgt	r7, #1
 8016f6e:	2700      	movle	r7, #0
	TFT_SetFont(&Font16EN_arch_big);
 8016f70:	f008 f832 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueFR);
 8016f74:	ee18 0a90 	vmov	r0, s17
 8016f78:	f7e9 fafe 	bl	8000578 <__aeabi_f2d>
 8016f7c:	4602      	mov	r2, r0
 8016f7e:	460b      	mov	r3, r1
 8016f80:	a805      	add	r0, sp, #20
 8016f82:	4918      	ldr	r1, [pc, #96]	; (8016fe4 <GUI_Text_PPFRGB_Measure+0x6f0>)
 8016f84:	f00b fbc4 	bl	8022710 <sprintf>
	dec = 10;
 8016f88:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueFR);
 8016f8a:	2304      	movs	r3, #4
			dec *= 10;
 8016f8c:	4611      	mov	r1, r2
		if((ValueFR/(dec)) >= 1.0)
 8016f8e:	ee07 2a90 	vmov	s15, r2
 8016f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016f96:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8016f9a:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa2:	db06      	blt.n	8016fb2 <GUI_Text_PPFRGB_Measure+0x6be>
			delta_pos-=22;
 8016fa4:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 8016fa8:	3601      	adds	r6, #1
			dec *= 10;
 8016faa:	434a      	muls	r2, r1
			delta_pos-=22;
 8016fac:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8016fb0:	b2f6      	uxtb	r6, r6
 8016fb2:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8016fb4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016fb8:	d1e9      	bne.n	8016f8e <GUI_Text_PPFRGB_Measure+0x69a>
	if(number < old_numPPFFR )
 8016fba:	4b0e      	ldr	r3, [pc, #56]	; (8016ff4 <GUI_Text_PPFRGB_Measure+0x700>)
 8016fbc:	781a      	ldrb	r2, [r3, #0]
 8016fbe:	42b2      	cmp	r2, r6
 8016fc0:	4699      	mov	r9, r3
 8016fc2:	d92b      	bls.n	801701c <GUI_Text_PPFRGB_Measure+0x728>
 8016fc4:	e018      	b.n	8016ff8 <GUI_Text_PPFRGB_Measure+0x704>
 8016fc6:	bf00      	nop
 8016fc8:	40240000 	.word	0x40240000
 8016fcc:	447a0000 	.word	0x447a0000
 8016fd0:	200052ba 	.word	0x200052ba
 8016fd4:	42c80000 	.word	0x42c80000
 8016fd8:	200052bb 	.word	0x200052bb
 8016fdc:	2000022b 	.word	0x2000022b
 8016fe0:	200001b0 	.word	0x200001b0
 8016fe4:	0803416b 	.word	0x0803416b
 8016fe8:	20000235 	.word	0x20000235
 8016fec:	20000237 	.word	0x20000237
 8016ff0:	20000238 	.word	0x20000238
 8016ff4:	20000236 	.word	0x20000236
		TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8016ff8:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8016ffc:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8017000:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8017004:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8017008:	f04f 0e63 	mov.w	lr, #99	; 0x63
 801700c:	f8cd e000 	str.w	lr, [sp]
 8017010:	b29b      	uxth	r3, r3
 8017012:	b292      	uxth	r2, r2
 8017014:	b289      	uxth	r1, r1
 8017016:	b280      	uxth	r0, r0
 8017018:	f007 fd3a 	bl	801ea90 <TFT_FillRectangle>
	buffer[8] = 0;
 801701c:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801701e:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8017022:	eb05 0008 	add.w	r0, r5, r8
	buffer[8] = 0;
 8017026:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801702a:	aa05      	add	r2, sp, #20
 801702c:	2303      	movs	r3, #3
 801702e:	b289      	uxth	r1, r1
 8017030:	b280      	uxth	r0, r0
	old_numPPFFR = number;
 8017032:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8017036:	f008 f93b 	bl	801f2b0 <TFT_DisplayString>
 801703a:	e4f0      	b.n	8016a1e <GUI_Text_PPFRGB_Measure+0x12a>
	uint8_t	delta_pos = 140, deg = 0, number=0;
 801703c:	461f      	mov	r7, r3
 801703e:	e4ee      	b.n	8016a1e <GUI_Text_PPFRGB_Measure+0x12a>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8017040:	4621      	mov	r1, r4
 8017042:	b280      	uxth	r0, r0
 8017044:	f004 fa9c 	bl	801b580 <GUI_TextRu_umol_sr>
 8017048:	e524      	b.n	8016a94 <GUI_Text_PPFRGB_Measure+0x1a0>
	else if (Language_status==En)
 801704a:	2b01      	cmp	r3, #1
 801704c:	f47f ad22 	bne.w	8016a94 <GUI_Text_PPFRGB_Measure+0x1a0>
	{TFT_SetTextColor(TFT_White);
 8017050:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017054:	f007 ffc6 	bl	801efe4 <TFT_SetTextColor>
		GUI_TextEn_Blue(X+34, Y);
 8017058:	f105 0022 	add.w	r0, r5, #34	; 0x22
 801705c:	4621      	mov	r1, r4
 801705e:	b280      	uxth	r0, r0
 8017060:	f003 fae0 	bl	801a624 <GUI_TextEn_Blue>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
 8017064:	4b35      	ldr	r3, [pc, #212]	; (801713c <GUI_Text_PPFRGB_Measure+0x848>)
 8017066:	781b      	ldrb	r3, [r3, #0]
 8017068:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 801706c:	463a      	mov	r2, r7
 801706e:	4621      	mov	r1, r4
 8017070:	b280      	uxth	r0, r0
 8017072:	b113      	cbz	r3, 801707a <GUI_Text_PPFRGB_Measure+0x786>
 8017074:	f002 fab6 	bl	80195e4 <GUI_TextEn_umol>
 8017078:	e50c      	b.n	8016a94 <GUI_Text_PPFRGB_Measure+0x1a0>
 801707a:	f002 fb19 	bl	80196b0 <GUI_TextEn_umol_sr>
 801707e:	e509      	b.n	8016a94 <GUI_Text_PPFRGB_Measure+0x1a0>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 8017080:	4641      	mov	r1, r8
 8017082:	b280      	uxth	r0, r0
 8017084:	f004 fa7c 	bl	801b580 <GUI_TextRu_umol_sr>
 8017088:	e53b      	b.n	8016b02 <GUI_Text_PPFRGB_Measure+0x20e>
	else if (Language_status==En)
 801708a:	2b01      	cmp	r3, #1
 801708c:	f47f ad39 	bne.w	8016b02 <GUI_Text_PPFRGB_Measure+0x20e>
	{	TFT_SetTextColor(TFT_White);
 8017090:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Green(X+17, Y+22);
 8017094:	f104 0816 	add.w	r8, r4, #22
	{	TFT_SetTextColor(TFT_White);
 8017098:	f007 ffa4 	bl	801efe4 <TFT_SetTextColor>
		GUI_TextEn_Green(X+17, Y+22);
 801709c:	fa1f f888 	uxth.w	r8, r8
 80170a0:	f105 0011 	add.w	r0, r5, #17
 80170a4:	4641      	mov	r1, r8
 80170a6:	b280      	uxth	r0, r0
 80170a8:	f003 fa8a 	bl	801a5c0 <GUI_TextEn_Green>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
 80170ac:	4b23      	ldr	r3, [pc, #140]	; (801713c <GUI_Text_PPFRGB_Measure+0x848>)
 80170ae:	781b      	ldrb	r3, [r3, #0]
 80170b0:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80170b4:	463a      	mov	r2, r7
 80170b6:	4641      	mov	r1, r8
 80170b8:	b280      	uxth	r0, r0
 80170ba:	b113      	cbz	r3, 80170c2 <GUI_Text_PPFRGB_Measure+0x7ce>
 80170bc:	f002 fa92 	bl	80195e4 <GUI_TextEn_umol>
 80170c0:	e51f      	b.n	8016b02 <GUI_Text_PPFRGB_Measure+0x20e>
 80170c2:	f002 faf5 	bl	80196b0 <GUI_TextEn_umol_sr>
 80170c6:	e51c      	b.n	8016b02 <GUI_Text_PPFRGB_Measure+0x20e>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 80170c8:	4641      	mov	r1, r8
 80170ca:	b280      	uxth	r0, r0
 80170cc:	f004 fa58 	bl	801b580 <GUI_TextRu_umol_sr>
 80170d0:	e547      	b.n	8016b62 <GUI_Text_PPFRGB_Measure+0x26e>
	else if (Language_status==En)
 80170d2:	2b01      	cmp	r3, #1
 80170d4:	f47f ad45 	bne.w	8016b62 <GUI_Text_PPFRGB_Measure+0x26e>
		GUI_TextEn_Red(X+37, Y+44);
 80170d8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
	{	TFT_SetTextColor(TFT_White);
 80170dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Red(X+37, Y+44);
 80170e0:	fa1f f888 	uxth.w	r8, r8
	{	TFT_SetTextColor(TFT_White);
 80170e4:	f007 ff7e 	bl	801efe4 <TFT_SetTextColor>
		GUI_TextEn_Red(X+37, Y+44);
 80170e8:	4641      	mov	r1, r8
 80170ea:	fa1f f089 	uxth.w	r0, r9
 80170ee:	f003 fac5 	bl	801a67c <GUI_TextEn_Red>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
 80170f2:	4b12      	ldr	r3, [pc, #72]	; (801713c <GUI_Text_PPFRGB_Measure+0x848>)
 80170f4:	781b      	ldrb	r3, [r3, #0]
 80170f6:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80170fa:	463a      	mov	r2, r7
 80170fc:	4641      	mov	r1, r8
 80170fe:	b280      	uxth	r0, r0
 8017100:	b113      	cbz	r3, 8017108 <GUI_Text_PPFRGB_Measure+0x814>
 8017102:	f002 fa6f 	bl	80195e4 <GUI_TextEn_umol>
 8017106:	e52c      	b.n	8016b62 <GUI_Text_PPFRGB_Measure+0x26e>
 8017108:	f002 fad2 	bl	80196b0 <GUI_TextEn_umol_sr>
 801710c:	e529      	b.n	8016b62 <GUI_Text_PPFRGB_Measure+0x26e>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 801710e:	4621      	mov	r1, r4
 8017110:	b280      	uxth	r0, r0
 8017112:	f004 fa35 	bl	801b580 <GUI_TextRu_umol_sr>
 8017116:	e54a      	b.n	8016bae <GUI_Text_PPFRGB_Measure+0x2ba>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
 8017118:	2b01      	cmp	r3, #1
 801711a:	f47f ad48 	bne.w	8016bae <GUI_Text_PPFRGB_Measure+0x2ba>
 801711e:	4b07      	ldr	r3, [pc, #28]	; (801713c <GUI_Text_PPFRGB_Measure+0x848>)
 8017120:	781b      	ldrb	r3, [r3, #0]
 8017122:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8017126:	463a      	mov	r2, r7
 8017128:	4621      	mov	r1, r4
 801712a:	b280      	uxth	r0, r0
 801712c:	b113      	cbz	r3, 8017134 <GUI_Text_PPFRGB_Measure+0x840>
 801712e:	f002 fa59 	bl	80195e4 <GUI_TextEn_umol>
 8017132:	e53c      	b.n	8016bae <GUI_Text_PPFRGB_Measure+0x2ba>
 8017134:	f002 fabc 	bl	80196b0 <GUI_TextEn_umol_sr>
}
 8017138:	e539      	b.n	8016bae <GUI_Text_PPFRGB_Measure+0x2ba>
 801713a:	bf00      	nop
 801713c:	20000a48 	.word	0x20000a48

08017140 <GUI_Text_XYZ_Measure>:
uint8_t old_numX = 10, old_numY = 10, old_numZ = 10, old_nanXYZ = 0;
void GUI_Text_XYZ_Measure(uint16_t X, uint16_t Y, uint16_t ValueX, uint16_t ValueY, uint16_t ValueZ, uint8_t nope, uint8_t grey)
{
 8017140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017144:	b087      	sub	sp, #28
 8017146:	4605      	mov	r5, r0
 8017148:	9302      	str	r3, [sp, #8]
 801714a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801714e:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
 8017150:	2300      	movs	r3, #0
{
 8017152:	460c      	mov	r4, r1
 8017154:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
	char buffer[5] = {0};
 8017158:	9304      	str	r3, [sp, #16]
 801715a:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 190, number = 0;
	uint32_t dec = 10;
	
	if((ValueX ==0 && ValueY ==100 && ValueZ ==0)||nope)
 801715e:	4693      	mov	fp, r2
 8017160:	b922      	cbnz	r2, 801716c <GUI_Text_XYZ_Measure+0x2c>
 8017162:	9b02      	ldr	r3, [sp, #8]
 8017164:	2b64      	cmp	r3, #100	; 0x64
 8017166:	d101      	bne.n	801716c <GUI_Text_XYZ_Measure+0x2c>
 8017168:	9b03      	ldr	r3, [sp, #12]
 801716a:	b10b      	cbz	r3, 8017170 <GUI_Text_XYZ_Measure+0x30>
 801716c:	2e00      	cmp	r6, #0
 801716e:	d07c      	beq.n	801726a <GUI_Text_XYZ_Measure+0x12a>
	{
		if(!old_nanXYZ){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8017170:	4bb2      	ldr	r3, [pc, #712]	; (801743c <GUI_Text_XYZ_Measure+0x2fc>)
 8017172:	781a      	ldrb	r2, [r3, #0]
 8017174:	469a      	mov	sl, r3
 8017176:	b96a      	cbnz	r2, 8017194 <GUI_Text_XYZ_Measure+0x54>
 8017178:	2163      	movs	r1, #99	; 0x63
 801717a:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 801717e:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8017182:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017186:	9100      	str	r1, [sp, #0]
 8017188:	b29b      	uxth	r3, r3
 801718a:	b292      	uxth	r2, r2
 801718c:	4621      	mov	r1, r4
 801718e:	b280      	uxth	r0, r0
 8017190:	f007 fc7e 	bl	801ea90 <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8017194:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017198:	f007 ff24 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801719c:	f105 0987 	add.w	r9, r5, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 80171a0:	2063      	movs	r0, #99	; 0x63
 80171a2:	f007 ff25 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80171a6:	fa1f f989 	uxth.w	r9, r9
 80171aa:	48a5      	ldr	r0, [pc, #660]	; (8017440 <GUI_Text_XYZ_Measure+0x300>)
 80171ac:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 80171b0:	f007 ff12 	bl	801efd8 <TFT_SetFont>
 80171b4:	fa1f f888 	uxth.w	r8, r8
 80171b8:	222d      	movs	r2, #45	; 0x2d
 80171ba:	4621      	mov	r1, r4
 80171bc:	4648      	mov	r0, r9
 80171be:	f105 06b9 	add.w	r6, r5, #185	; 0xb9
 80171c2:	f007 ffff 	bl	801f1c4 <TFT_DrawChar>
 80171c6:	b2b6      	uxth	r6, r6
 80171c8:	2220      	movs	r2, #32
 80171ca:	4621      	mov	r1, r4
 80171cc:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80171ce:	f104 0723 	add.w	r7, r4, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80171d2:	f007 fff7 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80171d6:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80171d8:	222d      	movs	r2, #45	; 0x2d
 80171da:	4621      	mov	r1, r4
 80171dc:	4630      	mov	r0, r6
 80171de:	f007 fff1 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80171e2:	4639      	mov	r1, r7
 80171e4:	222d      	movs	r2, #45	; 0x2d
 80171e6:	4648      	mov	r0, r9
 80171e8:	f007 ffec 	bl	801f1c4 <TFT_DrawChar>
 80171ec:	4639      	mov	r1, r7
 80171ee:	2220      	movs	r2, #32
 80171f0:	4640      	mov	r0, r8
 80171f2:	f007 ffe7 	bl	801f1c4 <TFT_DrawChar>
 80171f6:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 80171f8:	f104 0746 	add.w	r7, r4, #70	; 0x46
 80171fc:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80171fe:	222d      	movs	r2, #45	; 0x2d
 8017200:	4630      	mov	r0, r6
 8017202:	f007 ffdf 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8017206:	222d      	movs	r2, #45	; 0x2d
 8017208:	4639      	mov	r1, r7
 801720a:	4648      	mov	r0, r9
 801720c:	f007 ffda 	bl	801f1c4 <TFT_DrawChar>
 8017210:	2220      	movs	r2, #32
 8017212:	4639      	mov	r1, r7
 8017214:	4640      	mov	r0, r8
 8017216:	f007 ffd5 	bl	801f1c4 <TFT_DrawChar>
 801721a:	222d      	movs	r2, #45	; 0x2d
 801721c:	4639      	mov	r1, r7
 801721e:	4630      	mov	r0, r6
 8017220:	f007 ffd0 	bl	801f1c4 <TFT_DrawChar>
		old_nanXYZ = 1;
 8017224:	2301      	movs	r3, #1
 8017226:	f88a 3000 	strb.w	r3, [sl]
	old_numZ = number;
	number = 0;
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
	old_nanXYZ = 0;
}
			TFT_SetTextColor(TFT_White);
 801722a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801722e:	f007 fed9 	bl	801efe4 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8017232:	2063      	movs	r0, #99	; 0x63
 8017234:	f007 fedc 	bl	801eff0 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 8017238:	4881      	ldr	r0, [pc, #516]	; (8017440 <GUI_Text_XYZ_Measure+0x300>)
 801723a:	f007 fecd 	bl	801efd8 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'X'-34);
 801723e:	4621      	mov	r1, r4
 8017240:	4628      	mov	r0, r5
 8017242:	2236      	movs	r2, #54	; 0x36
 8017244:	f007 ffbe 	bl	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X, Y+35, 'Y'-34);
 8017248:	f104 0123 	add.w	r1, r4, #35	; 0x23
 801724c:	4628      	mov	r0, r5
 801724e:	2237      	movs	r2, #55	; 0x37
 8017250:	b289      	uxth	r1, r1
 8017252:	f007 ffb7 	bl	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'Z'-34);
 8017256:	f104 0146 	add.w	r1, r4, #70	; 0x46
 801725a:	2238      	movs	r2, #56	; 0x38
 801725c:	b289      	uxth	r1, r1
 801725e:	4628      	mov	r0, r5
 8017260:	f007 ffb0 	bl	801f1c4 <TFT_DrawChar>
}	
 8017264:	b007      	add	sp, #28
 8017266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801726a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801726e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017272:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8017276:	2800      	cmp	r0, #0
 8017278:	bf14      	ite	ne
 801727a:	4610      	movne	r0, r2
 801727c:	4618      	moveq	r0, r3
 801727e:	f007 feb1 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017282:	2063      	movs	r0, #99	; 0x63
 8017284:	f007 feb4 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017288:	486e      	ldr	r0, [pc, #440]	; (8017444 <GUI_Text_XYZ_Measure+0x304>)
 801728a:	f007 fea5 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%d", ValueX);
 801728e:	465a      	mov	r2, fp
 8017290:	496d      	ldr	r1, [pc, #436]	; (8017448 <GUI_Text_XYZ_Measure+0x308>)
 8017292:	a804      	add	r0, sp, #16
 8017294:	f00b fa3c 	bl	8022710 <sprintf>
	uint8_t	delta_pos = 190, number = 0;
 8017298:	46b0      	mov	r8, r6
	sprintf (buffer, "%d", ValueX);
 801729a:	f04f 0904 	mov.w	r9, #4
	uint32_t dec = 10;
 801729e:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 190, number = 0;
 80172a2:	27be      	movs	r7, #190	; 0xbe
		if((ValueX/(dec)) >= 1.0)
 80172a4:	fbbb f0fa 	udiv	r0, fp, sl
 80172a8:	f7e9 f944 	bl	8000534 <__aeabi_ui2d>
 80172ac:	2200      	movs	r2, #0
 80172ae:	4b67      	ldr	r3, [pc, #412]	; (801744c <GUI_Text_XYZ_Measure+0x30c>)
 80172b0:	f7e9 fc3c 	bl	8000b2c <__aeabi_dcmpge>
 80172b4:	b140      	cbz	r0, 80172c8 <GUI_Text_XYZ_Measure+0x188>
			dec *= 10;
 80172b6:	230a      	movs	r3, #10
			delta_pos-=23;
 80172b8:	3f17      	subs	r7, #23
			number++;
 80172ba:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80172be:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80172c2:	b2ff      	uxtb	r7, r7
			number++;
 80172c4:	fa5f f888 	uxtb.w	r8, r8
 80172c8:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 80172cc:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 80172d0:	d1e8      	bne.n	80172a4 <GUI_Text_XYZ_Measure+0x164>
	if(number < old_numX || old_nanXYZ )
 80172d2:	4b5f      	ldr	r3, [pc, #380]	; (8017450 <GUI_Text_XYZ_Measure+0x310>)
 80172d4:	781a      	ldrb	r2, [r3, #0]
 80172d6:	4542      	cmp	r2, r8
 80172d8:	4699      	mov	r9, r3
 80172da:	d802      	bhi.n	80172e2 <GUI_Text_XYZ_Measure+0x1a2>
 80172dc:	4b57      	ldr	r3, [pc, #348]	; (801743c <GUI_Text_XYZ_Measure+0x2fc>)
 80172de:	781b      	ldrb	r3, [r3, #0]
 80172e0:	b16b      	cbz	r3, 80172fe <GUI_Text_XYZ_Measure+0x1be>
		TFT_FillRectangle(X+40, Y, X+197, Y+24, TFT_Black_Bkgr);
 80172e2:	2163      	movs	r1, #99	; 0x63
 80172e4:	f104 0318 	add.w	r3, r4, #24
 80172e8:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80172ec:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80172f0:	9100      	str	r1, [sp, #0]
 80172f2:	b29b      	uxth	r3, r3
 80172f4:	b292      	uxth	r2, r2
 80172f6:	4621      	mov	r1, r4
 80172f8:	b280      	uxth	r0, r0
 80172fa:	f007 fbc9 	bl	801ea90 <TFT_FillRectangle>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80172fe:	19e8      	adds	r0, r5, r7
 8017300:	2303      	movs	r3, #3
 8017302:	aa04      	add	r2, sp, #16
 8017304:	4621      	mov	r1, r4
 8017306:	b280      	uxth	r0, r0
	old_numX = number;
 8017308:	f889 8000 	strb.w	r8, [r9]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801730c:	f007 ffd0 	bl	801f2b0 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8017310:	484c      	ldr	r0, [pc, #304]	; (8017444 <GUI_Text_XYZ_Measure+0x304>)
 8017312:	f007 fe61 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%d", ValueY);
 8017316:	9a02      	ldr	r2, [sp, #8]
 8017318:	494b      	ldr	r1, [pc, #300]	; (8017448 <GUI_Text_XYZ_Measure+0x308>)
 801731a:	a804      	add	r0, sp, #16
 801731c:	f00b f9f8 	bl	8022710 <sprintf>
	dec = 10;
 8017320:	f04f 0a0a 	mov.w	sl, #10
	number = 0;
 8017324:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueY);
 8017328:	f04f 0904 	mov.w	r9, #4
	delta_pos = 190;
 801732c:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 801732e:	46d3      	mov	fp, sl
		if((ValueY/(dec)) >= 1.0)
 8017330:	9b02      	ldr	r3, [sp, #8]
 8017332:	fbb3 f0fa 	udiv	r0, r3, sl
 8017336:	f7e9 f8fd 	bl	8000534 <__aeabi_ui2d>
 801733a:	2200      	movs	r2, #0
 801733c:	4b43      	ldr	r3, [pc, #268]	; (801744c <GUI_Text_XYZ_Measure+0x30c>)
 801733e:	f7e9 fbf5 	bl	8000b2c <__aeabi_dcmpge>
 8017342:	b138      	cbz	r0, 8017354 <GUI_Text_XYZ_Measure+0x214>
			delta_pos-=23;
 8017344:	3f17      	subs	r7, #23
			number++;
 8017346:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 801734a:	fb0b fa0a 	mul.w	sl, fp, sl
			delta_pos-=23;
 801734e:	b2ff      	uxtb	r7, r7
			number++;
 8017350:	fa5f f888 	uxtb.w	r8, r8
 8017354:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8017358:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 801735c:	d1e8      	bne.n	8017330 <GUI_Text_XYZ_Measure+0x1f0>
	if(number < old_numY || old_nanXYZ)
 801735e:	4b3d      	ldr	r3, [pc, #244]	; (8017454 <GUI_Text_XYZ_Measure+0x314>)
 8017360:	781a      	ldrb	r2, [r3, #0]
 8017362:	4542      	cmp	r2, r8
 8017364:	f104 0923 	add.w	r9, r4, #35	; 0x23
 8017368:	469a      	mov	sl, r3
 801736a:	d802      	bhi.n	8017372 <GUI_Text_XYZ_Measure+0x232>
 801736c:	4b33      	ldr	r3, [pc, #204]	; (801743c <GUI_Text_XYZ_Measure+0x2fc>)
 801736e:	781b      	ldrb	r3, [r3, #0]
 8017370:	b173      	cbz	r3, 8017390 <GUI_Text_XYZ_Measure+0x250>
		TFT_FillRectangle(X+40, Y+35, X+197, Y+59, TFT_Black_Bkgr);
 8017372:	2163      	movs	r1, #99	; 0x63
 8017374:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017378:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801737c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017380:	9100      	str	r1, [sp, #0]
 8017382:	b29b      	uxth	r3, r3
 8017384:	b292      	uxth	r2, r2
 8017386:	fa1f f189 	uxth.w	r1, r9
 801738a:	b280      	uxth	r0, r0
 801738c:	f007 fb80 	bl	801ea90 <TFT_FillRectangle>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017390:	19e8      	adds	r0, r5, r7
 8017392:	fa1f f189 	uxth.w	r1, r9
 8017396:	2303      	movs	r3, #3
 8017398:	aa04      	add	r2, sp, #16
 801739a:	b280      	uxth	r0, r0
	old_numY = number;
 801739c:	f88a 8000 	strb.w	r8, [sl]
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80173a0:	f007 ff86 	bl	801f2b0 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 80173a4:	4827      	ldr	r0, [pc, #156]	; (8017444 <GUI_Text_XYZ_Measure+0x304>)
 80173a6:	f007 fe17 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%d", ValueZ);
 80173aa:	9a03      	ldr	r2, [sp, #12]
 80173ac:	4926      	ldr	r1, [pc, #152]	; (8017448 <GUI_Text_XYZ_Measure+0x308>)
 80173ae:	a804      	add	r0, sp, #16
 80173b0:	f00b f9ae 	bl	8022710 <sprintf>
	 dec = 10;
 80173b4:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueZ);
 80173b8:	f04f 0804 	mov.w	r8, #4
		delta_pos = 190;
 80173bc:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 80173be:	46ca      	mov	sl, r9
		if((ValueZ/(dec)) >= 1.0)
 80173c0:	9b03      	ldr	r3, [sp, #12]
 80173c2:	fbb3 f0f9 	udiv	r0, r3, r9
 80173c6:	f7e9 f8b5 	bl	8000534 <__aeabi_ui2d>
 80173ca:	2200      	movs	r2, #0
 80173cc:	4b1f      	ldr	r3, [pc, #124]	; (801744c <GUI_Text_XYZ_Measure+0x30c>)
 80173ce:	f7e9 fbad 	bl	8000b2c <__aeabi_dcmpge>
 80173d2:	b128      	cbz	r0, 80173e0 <GUI_Text_XYZ_Measure+0x2a0>
			delta_pos-=23;
 80173d4:	3f17      	subs	r7, #23
			number++;
 80173d6:	3601      	adds	r6, #1
			dec *= 10;
 80173d8:	fb0a f909 	mul.w	r9, sl, r9
			delta_pos-=23;
 80173dc:	b2ff      	uxtb	r7, r7
			number++;
 80173de:	b2f6      	uxtb	r6, r6
 80173e0:	f108 38ff 	add.w	r8, r8, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 80173e4:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 80173e8:	d1ea      	bne.n	80173c0 <GUI_Text_XYZ_Measure+0x280>
	if(number < old_numZ || old_nanXYZ)
 80173ea:	4b1b      	ldr	r3, [pc, #108]	; (8017458 <GUI_Text_XYZ_Measure+0x318>)
 80173ec:	f8df 904c 	ldr.w	r9, [pc, #76]	; 801743c <GUI_Text_XYZ_Measure+0x2fc>
 80173f0:	781a      	ldrb	r2, [r3, #0]
 80173f2:	42b2      	cmp	r2, r6
 80173f4:	f104 0a46 	add.w	sl, r4, #70	; 0x46
 80173f8:	4698      	mov	r8, r3
 80173fa:	d802      	bhi.n	8017402 <GUI_Text_XYZ_Measure+0x2c2>
 80173fc:	f899 3000 	ldrb.w	r3, [r9]
 8017400:	b173      	cbz	r3, 8017420 <GUI_Text_XYZ_Measure+0x2e0>
		TFT_FillRectangle(X+40, Y+70, X+197, Y+94, TFT_Black_Bkgr);
 8017402:	2163      	movs	r1, #99	; 0x63
 8017404:	f104 035e 	add.w	r3, r4, #94	; 0x5e
 8017408:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801740c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017410:	9100      	str	r1, [sp, #0]
 8017412:	b29b      	uxth	r3, r3
 8017414:	b292      	uxth	r2, r2
 8017416:	fa1f f18a 	uxth.w	r1, sl
 801741a:	b280      	uxth	r0, r0
 801741c:	f007 fb38 	bl	801ea90 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8017420:	19e8      	adds	r0, r5, r7
 8017422:	2303      	movs	r3, #3
 8017424:	aa04      	add	r2, sp, #16
 8017426:	fa1f f18a 	uxth.w	r1, sl
 801742a:	b280      	uxth	r0, r0
	old_numZ = number;
 801742c:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8017430:	f007 ff3e 	bl	801f2b0 <TFT_DisplayString>
	old_nanXYZ = 0;
 8017434:	2300      	movs	r3, #0
 8017436:	f889 3000 	strb.w	r3, [r9]
 801743a:	e6f6      	b.n	801722a <GUI_Text_XYZ_Measure+0xea>
 801743c:	200052aa 	.word	0x200052aa
 8017440:	200001e8 	.word	0x200001e8
 8017444:	200001f0 	.word	0x200001f0
 8017448:	08034170 	.word	0x08034170
 801744c:	3ff00000 	.word	0x3ff00000
 8017450:	20000239 	.word	0x20000239
 8017454:	2000023a 	.word	0x2000023a
 8017458:	2000023b 	.word	0x2000023b

0801745c <GUI_Text_xy_Measure>:
uint8_t old_nanxy = 0;
void GUI_Text_xy_Measure(uint16_t X, uint16_t Y, float Valuex, float Valuey, uint8_t nope, uint8_t grey)
{
 801745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017460:	ed2d 8b02 	vpush	{d8}
 8017464:	b085      	sub	sp, #20
 8017466:	4604      	mov	r4, r0
 8017468:	4691      	mov	r9, r2
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 801746a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801746e:	2200      	movs	r2, #0
{
 8017470:	460d      	mov	r5, r1
 8017472:	eef0 8a40 	vmov.f32	s17, s0
 8017476:	eeb0 8a60 	vmov.f32	s16, s1
 801747a:	461e      	mov	r6, r3
	char buffer[5] = {0};
 801747c:	9202      	str	r2, [sp, #8]
 801747e:	f88d 200c 	strb.w	r2, [sp, #12]
	TFT_SetTextColor(TFT_White);
 8017482:	f007 fdaf 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017486:	2063      	movs	r0, #99	; 0x63
 8017488:	f007 fdb2 	bl	801eff0 <TFT_SetBackColor>

	if((Valuex == 0 && Valuey ==1) || nope){
 801748c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017494:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80175dc <GUI_Text_xy_Measure+0x180>
 8017498:	f105 0723 	add.w	r7, r5, #35	; 0x23
 801749c:	d106      	bne.n	80174ac <GUI_Text_xy_Measure+0x50>
 801749e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80174a2:	eeb4 8a67 	vcmp.f32	s16, s15
 80174a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174aa:	d002      	beq.n	80174b2 <GUI_Text_xy_Measure+0x56>
 80174ac:	f1b9 0f00 	cmp.w	r9, #0
 80174b0:	d05a      	beq.n	8017568 <GUI_Text_xy_Measure+0x10c>
		if(!old_nanxy){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 80174b2:	f898 3000 	ldrb.w	r3, [r8]
 80174b6:	b96b      	cbnz	r3, 80174d4 <GUI_Text_xy_Measure+0x78>
 80174b8:	2163      	movs	r1, #99	; 0x63
 80174ba:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 80174be:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80174c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80174c6:	9100      	str	r1, [sp, #0]
 80174c8:	b29b      	uxth	r3, r3
 80174ca:	b292      	uxth	r2, r2
 80174cc:	4629      	mov	r1, r5
 80174ce:	b280      	uxth	r0, r0
 80174d0:	f007 fade 	bl	801ea90 <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80174d4:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 80174d8:	483c      	ldr	r0, [pc, #240]	; (80175cc <GUI_Text_xy_Measure+0x170>)
 80174da:	fa1f fb8b 	uxth.w	fp, fp
 80174de:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 80174e2:	f007 fd79 	bl	801efd8 <TFT_SetFont>
 80174e6:	fa1f fa8a 	uxth.w	sl, sl
 80174ea:	222d      	movs	r2, #45	; 0x2d
 80174ec:	4629      	mov	r1, r5
 80174ee:	4658      	mov	r0, fp
 80174f0:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 80174f4:	f007 fe66 	bl	801f1c4 <TFT_DrawChar>
 80174f8:	fa1f f989 	uxth.w	r9, r9
 80174fc:	2220      	movs	r2, #32
 80174fe:	4629      	mov	r1, r5
 8017500:	4650      	mov	r0, sl
 8017502:	f007 fe5f 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017506:	b2be      	uxth	r6, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8017508:	222d      	movs	r2, #45	; 0x2d
 801750a:	4629      	mov	r1, r5
 801750c:	4648      	mov	r0, r9
 801750e:	f007 fe59 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017512:	222d      	movs	r2, #45	; 0x2d
 8017514:	4631      	mov	r1, r6
 8017516:	4658      	mov	r0, fp
 8017518:	f007 fe54 	bl	801f1c4 <TFT_DrawChar>
 801751c:	2220      	movs	r2, #32
 801751e:	4631      	mov	r1, r6
 8017520:	4650      	mov	r0, sl
 8017522:	f007 fe4f 	bl	801f1c4 <TFT_DrawChar>
 8017526:	222d      	movs	r2, #45	; 0x2d
 8017528:	4631      	mov	r1, r6
 801752a:	4648      	mov	r0, r9
 801752c:	f007 fe4a 	bl	801f1c4 <TFT_DrawChar>
		old_nanxy = 1;
 8017530:	2301      	movs	r3, #1
 8017532:	f888 3000 	strb.w	r3, [r8]
		
		sprintf (buffer, "%.4f", Valuey);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanxy = 0;
	}
	TFT_SetTextColor(TFT_White);
 8017536:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801753a:	f007 fd53 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801753e:	2063      	movs	r0, #99	; 0x63
 8017540:	f007 fd56 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 8017544:	4822      	ldr	r0, [pc, #136]	; (80175d0 <GUI_Text_xy_Measure+0x174>)
 8017546:	f007 fd47 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'x'-65);
 801754a:	4629      	mov	r1, r5
 801754c:	4620      	mov	r0, r4
 801754e:	2237      	movs	r2, #55	; 0x37
 8017550:	f007 fe38 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'y'-65);
 8017554:	2238      	movs	r2, #56	; 0x38
 8017556:	b2b9      	uxth	r1, r7
 8017558:	4620      	mov	r0, r4
 801755a:	f007 fe33 	bl	801f1c4 <TFT_DrawChar>
	
}	
 801755e:	b005      	add	sp, #20
 8017560:	ecbd 8b02 	vpop	{d8}
 8017564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801756c:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8017570:	2e00      	cmp	r6, #0
 8017572:	bf08      	it	eq
 8017574:	4610      	moveq	r0, r2
 8017576:	f007 fd35 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 801757a:	4816      	ldr	r0, [pc, #88]	; (80175d4 <GUI_Text_xy_Measure+0x178>)
 801757c:	f007 fd2c 	bl	801efd8 <TFT_SetFont>
		sprintf (buffer, "%.4f", Valuex);
 8017580:	ee18 0a90 	vmov	r0, s17
 8017584:	f7e8 fff8 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017588:	f104 0646 	add.w	r6, r4, #70	; 0x46
		sprintf (buffer, "%.4f", Valuex);
 801758c:	4602      	mov	r2, r0
 801758e:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017590:	b2b6      	uxth	r6, r6
		sprintf (buffer, "%.4f", Valuex);
 8017592:	4911      	ldr	r1, [pc, #68]	; (80175d8 <GUI_Text_xy_Measure+0x17c>)
 8017594:	a802      	add	r0, sp, #8
 8017596:	f00b f8bb 	bl	8022710 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801759a:	2303      	movs	r3, #3
 801759c:	aa02      	add	r2, sp, #8
 801759e:	4629      	mov	r1, r5
 80175a0:	4630      	mov	r0, r6
 80175a2:	f007 fe85 	bl	801f2b0 <TFT_DisplayString>
		sprintf (buffer, "%.4f", Valuey);
 80175a6:	ee18 0a10 	vmov	r0, s16
 80175aa:	f7e8 ffe5 	bl	8000578 <__aeabi_f2d>
 80175ae:	4602      	mov	r2, r0
 80175b0:	460b      	mov	r3, r1
 80175b2:	a802      	add	r0, sp, #8
 80175b4:	4908      	ldr	r1, [pc, #32]	; (80175d8 <GUI_Text_xy_Measure+0x17c>)
 80175b6:	f00b f8ab 	bl	8022710 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80175ba:	2303      	movs	r3, #3
 80175bc:	aa02      	add	r2, sp, #8
 80175be:	b2b9      	uxth	r1, r7
 80175c0:	4630      	mov	r0, r6
 80175c2:	f007 fe75 	bl	801f2b0 <TFT_DisplayString>
		old_nanxy = 0;
 80175c6:	f888 9000 	strb.w	r9, [r8]
 80175ca:	e7b4      	b.n	8017536 <GUI_Text_xy_Measure+0xda>
 80175cc:	200001e8 	.word	0x200001e8
 80175d0:	200001f8 	.word	0x200001f8
 80175d4:	200001f0 	.word	0x200001f0
 80175d8:	08034178 	.word	0x08034178
 80175dc:	200052b8 	.word	0x200052b8

080175e0 <GUI_Text_uv_Measure>:
uint8_t old_nanuv = 0;
void GUI_Text_uv_Measure(uint16_t X, uint16_t Y, float ValueU, float ValueV, uint8_t nope, uint8_t grey)
{
 80175e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175e4:	ed2d 8b02 	vpush	{d8}
 80175e8:	b087      	sub	sp, #28
 80175ea:	4604      	mov	r4, r0
 80175ec:	469a      	mov	sl, r3
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 80175ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 80175f2:	2300      	movs	r3, #0
{
 80175f4:	460d      	mov	r5, r1
 80175f6:	eeb0 8a40 	vmov.f32	s16, s0
 80175fa:	ee10 9a90 	vmov	r9, s1
 80175fe:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8017600:	9304      	str	r3, [sp, #16]
 8017602:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8017606:	f007 fced 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801760a:	2063      	movs	r0, #99	; 0x63
 801760c:	f007 fcf0 	bl	801eff0 <TFT_SetBackColor>
	
	if((ValueU == 0 && (ValueV >0.6 && ValueV <0.6001)) || nope){
 8017610:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017618:	4f5d      	ldr	r7, [pc, #372]	; (8017790 <GUI_Text_uv_Measure+0x1b0>)
 801761a:	f105 0623 	add.w	r6, r5, #35	; 0x23
 801761e:	d112      	bne.n	8017646 <GUI_Text_uv_Measure+0x66>
 8017620:	4648      	mov	r0, r9
 8017622:	f7e8 ffa9 	bl	8000578 <__aeabi_f2d>
 8017626:	a356      	add	r3, pc, #344	; (adr r3, 8017780 <GUI_Text_uv_Measure+0x1a0>)
 8017628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017630:	f7e9 fa86 	bl	8000b40 <__aeabi_dcmpgt>
 8017634:	b138      	cbz	r0, 8017646 <GUI_Text_uv_Measure+0x66>
 8017636:	a354      	add	r3, pc, #336	; (adr r3, 8017788 <GUI_Text_uv_Measure+0x1a8>)
 8017638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017640:	f7e9 fa60 	bl	8000b04 <__aeabi_dcmplt>
 8017644:	b910      	cbnz	r0, 801764c <GUI_Text_uv_Measure+0x6c>
 8017646:	f1b8 0f00 	cmp.w	r8, #0
 801764a:	d064      	beq.n	8017716 <GUI_Text_uv_Measure+0x136>
		if(!old_nanuv){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 801764c:	783b      	ldrb	r3, [r7, #0]
 801764e:	b96b      	cbnz	r3, 801766c <GUI_Text_uv_Measure+0x8c>
 8017650:	2163      	movs	r1, #99	; 0x63
 8017652:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8017656:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801765a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801765e:	9100      	str	r1, [sp, #0]
 8017660:	b29b      	uxth	r3, r3
 8017662:	b292      	uxth	r2, r2
 8017664:	4629      	mov	r1, r5
 8017666:	b280      	uxth	r0, r0
 8017668:	f007 fa12 	bl	801ea90 <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801766c:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8017670:	4848      	ldr	r0, [pc, #288]	; (8017794 <GUI_Text_uv_Measure+0x1b4>)
 8017672:	fa1f fb8b 	uxth.w	fp, fp
 8017676:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 801767a:	f007 fcad 	bl	801efd8 <TFT_SetFont>
 801767e:	fa1f fa8a 	uxth.w	sl, sl
 8017682:	222d      	movs	r2, #45	; 0x2d
 8017684:	4629      	mov	r1, r5
 8017686:	4658      	mov	r0, fp
 8017688:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 801768c:	f007 fd9a 	bl	801f1c4 <TFT_DrawChar>
 8017690:	fa1f f989 	uxth.w	r9, r9
 8017694:	2220      	movs	r2, #32
 8017696:	4629      	mov	r1, r5
 8017698:	4650      	mov	r0, sl
 801769a:	f007 fd93 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 801769e:	fa1f f886 	uxth.w	r8, r6
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80176a2:	222d      	movs	r2, #45	; 0x2d
 80176a4:	4629      	mov	r1, r5
 80176a6:	4648      	mov	r0, r9
 80176a8:	f007 fd8c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80176ac:	222d      	movs	r2, #45	; 0x2d
 80176ae:	4641      	mov	r1, r8
 80176b0:	4658      	mov	r0, fp
 80176b2:	f007 fd87 	bl	801f1c4 <TFT_DrawChar>
 80176b6:	2220      	movs	r2, #32
 80176b8:	4641      	mov	r1, r8
 80176ba:	4650      	mov	r0, sl
 80176bc:	f007 fd82 	bl	801f1c4 <TFT_DrawChar>
 80176c0:	222d      	movs	r2, #45	; 0x2d
 80176c2:	4641      	mov	r1, r8
 80176c4:	4648      	mov	r0, r9
 80176c6:	f007 fd7d 	bl	801f1c4 <TFT_DrawChar>
		old_nanuv = 1;
 80176ca:	2301      	movs	r3, #1
 80176cc:	703b      	strb	r3, [r7, #0]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
		sprintf (buffer, "%.4f", ValueV);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanuv = 0;
	}
	TFT_SetTextColor(TFT_White);
 80176ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font26EN_arch_small);
	TFT_DrawChar(X+15, Y, 'z'-64);
 80176d2:	f104 070f 	add.w	r7, r4, #15
	TFT_SetTextColor(TFT_White);
 80176d6:	f007 fc85 	bl	801efe4 <TFT_SetTextColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 80176da:	b2bf      	uxth	r7, r7
	TFT_SetFont(&Font26EN_arch_small);
 80176dc:	482e      	ldr	r0, [pc, #184]	; (8017798 <GUI_Text_uv_Measure+0x1b8>)
 80176de:	f007 fc7b 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, 'z'-64);
 80176e2:	4629      	mov	r1, r5
 80176e4:	4638      	mov	r0, r7
 80176e6:	223a      	movs	r2, #58	; 0x3a
 80176e8:	f007 fd6c 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'u'-65);
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 80176ec:	b2b6      	uxth	r6, r6
	TFT_DrawChar(X, Y, 'u'-65);
 80176ee:	4629      	mov	r1, r5
 80176f0:	4620      	mov	r0, r4
 80176f2:	2234      	movs	r2, #52	; 0x34
 80176f4:	f007 fd66 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 80176f8:	4631      	mov	r1, r6
 80176fa:	4638      	mov	r0, r7
 80176fc:	223a      	movs	r2, #58	; 0x3a
 80176fe:	f007 fd61 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'v'-65);
 8017702:	2235      	movs	r2, #53	; 0x35
 8017704:	4631      	mov	r1, r6
 8017706:	4620      	mov	r0, r4
 8017708:	f007 fd5c 	bl	801f1c4 <TFT_DrawChar>
}	
 801770c:	b007      	add	sp, #28
 801770e:	ecbd 8b02 	vpop	{d8}
 8017712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801771a:	f249 40d2 	movw	r0, #38098	; 0x94d2
 801771e:	f1ba 0f00 	cmp.w	sl, #0
 8017722:	bf08      	it	eq
 8017724:	4618      	moveq	r0, r3
 8017726:	f007 fc5d 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 801772a:	481c      	ldr	r0, [pc, #112]	; (801779c <GUI_Text_uv_Measure+0x1bc>)
 801772c:	f007 fc54 	bl	801efd8 <TFT_SetFont>
		sprintf (buffer, "%.4f", ValueU);
 8017730:	ee18 0a10 	vmov	r0, s16
 8017734:	f7e8 ff20 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017738:	f104 0a46 	add.w	sl, r4, #70	; 0x46
		sprintf (buffer, "%.4f", ValueU);
 801773c:	4602      	mov	r2, r0
 801773e:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017740:	fa1f fa8a 	uxth.w	sl, sl
		sprintf (buffer, "%.4f", ValueU);
 8017744:	4916      	ldr	r1, [pc, #88]	; (80177a0 <GUI_Text_uv_Measure+0x1c0>)
 8017746:	a804      	add	r0, sp, #16
 8017748:	f00a ffe2 	bl	8022710 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801774c:	2303      	movs	r3, #3
 801774e:	aa04      	add	r2, sp, #16
 8017750:	4629      	mov	r1, r5
 8017752:	4650      	mov	r0, sl
 8017754:	f007 fdac 	bl	801f2b0 <TFT_DisplayString>
		sprintf (buffer, "%.4f", ValueV);
 8017758:	4648      	mov	r0, r9
 801775a:	f7e8 ff0d 	bl	8000578 <__aeabi_f2d>
 801775e:	4602      	mov	r2, r0
 8017760:	460b      	mov	r3, r1
 8017762:	a804      	add	r0, sp, #16
 8017764:	490e      	ldr	r1, [pc, #56]	; (80177a0 <GUI_Text_uv_Measure+0x1c0>)
 8017766:	f00a ffd3 	bl	8022710 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 801776a:	2303      	movs	r3, #3
 801776c:	aa04      	add	r2, sp, #16
 801776e:	b2b1      	uxth	r1, r6
 8017770:	4650      	mov	r0, sl
 8017772:	f007 fd9d 	bl	801f2b0 <TFT_DisplayString>
		old_nanuv = 0;
 8017776:	f887 8000 	strb.w	r8, [r7]
 801777a:	e7a8      	b.n	80176ce <GUI_Text_uv_Measure+0xee>
 801777c:	f3af 8000 	nop.w
 8017780:	33333333 	.word	0x33333333
 8017784:	3fe33333 	.word	0x3fe33333
 8017788:	ea4a8c15 	.word	0xea4a8c15
 801778c:	3fe33404 	.word	0x3fe33404
 8017790:	200052b7 	.word	0x200052b7
 8017794:	200001e8 	.word	0x200001e8
 8017798:	200001f8 	.word	0x200001f8
 801779c:	200001f0 	.word	0x200001f0
 80177a0:	08034178 	.word	0x08034178

080177a4 <GUI_Text_CCT_Measure>:

uint8_t old_numCCT = 10, old_nan_CCT = 0;
void GUI_Text_CCT_Measure(uint16_t X, uint16_t Y, uint16_t Value, uint8_t nope, uint8_t grey)
{	
 80177a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a8:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80177aa:	4b71      	ldr	r3, [pc, #452]	; (8017970 <GUI_Text_CCT_Measure+0x1cc>)
{	
 80177ac:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80177ae:	781a      	ldrb	r2, [r3, #0]
 80177b0:	4b70      	ldr	r3, [pc, #448]	; (8017974 <GUI_Text_CCT_Measure+0x1d0>)
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	429a      	cmp	r2, r3
{	
 80177b6:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80177b8:	bf1c      	itt	ne
 80177ba:	4b6f      	ldrne	r3, [pc, #444]	; (8017978 <GUI_Text_CCT_Measure+0x1d4>)
 80177bc:	2200      	movne	r2, #0
	char buffer[9] = {0};
 80177be:	f04f 0600 	mov.w	r6, #0
{	
 80177c2:	4605      	mov	r5, r0
	uint8_t	delta_pos = 160, number = 0;
	uint32_t dec = 10;
	
	
	TFT_SetBackColor(TFT_Black_Bkgr);
 80177c4:	f04f 0063 	mov.w	r0, #99	; 0x63
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80177c8:	bf18      	it	ne
 80177ca:	701a      	strbne	r2, [r3, #0]
{	
 80177cc:	460c      	mov	r4, r1
	char buffer[9] = {0};
 80177ce:	9603      	str	r6, [sp, #12]
 80177d0:	9604      	str	r6, [sp, #16]
 80177d2:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetBackColor(TFT_Black_Bkgr);
 80177d6:	f007 fc0b 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80177da:	4868      	ldr	r0, [pc, #416]	; (801797c <GUI_Text_CCT_Measure+0x1d8>)
 80177dc:	f007 fbfc 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%d", Value);
 80177e0:	464a      	mov	r2, r9
 80177e2:	4967      	ldr	r1, [pc, #412]	; (8017980 <GUI_Text_CCT_Measure+0x1dc>)
 80177e4:	a803      	add	r0, sp, #12
 80177e6:	f00a ff93 	bl	8022710 <sprintf>
 80177ea:	f04f 0804 	mov.w	r8, #4
	uint32_t dec = 10;
 80177ee:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 160, number = 0;
 80177f2:	27a0      	movs	r7, #160	; 0xa0
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 80177f4:	fbb9 f0fa 	udiv	r0, r9, sl
 80177f8:	f7e8 fe9c 	bl	8000534 <__aeabi_ui2d>
 80177fc:	2200      	movs	r2, #0
 80177fe:	4b61      	ldr	r3, [pc, #388]	; (8017984 <GUI_Text_CCT_Measure+0x1e0>)
 8017800:	f7e9 f994 	bl	8000b2c <__aeabi_dcmpge>
 8017804:	b130      	cbz	r0, 8017814 <GUI_Text_CCT_Measure+0x70>
		{
			dec *= 10;
 8017806:	230a      	movs	r3, #10
			delta_pos-=23;
 8017808:	3f17      	subs	r7, #23
			number++;
 801780a:	3601      	adds	r6, #1
			dec *= 10;
 801780c:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8017810:	b2ff      	uxtb	r7, r7
			number++;
 8017812:	b2f6      	uxtb	r6, r6
 8017814:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8017818:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 801781c:	d1ea      	bne.n	80177f4 <GUI_Text_CCT_Measure+0x50>
		}
	}
	
	if((Value == 0 || nope) & !old_nan_CCT){old_nan_CCT = 1; TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);TFT_SetTextColor(TFT_White); TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+100, Y+4, 'N'-33);TFT_DrawChar(X+125, Y+4, 'A'-33);TFT_DrawChar(X+150, Y+4, 'N'-33);}
 801781e:	f1b9 0f00 	cmp.w	r9, #0
 8017822:	d063      	beq.n	80178ec <GUI_Text_CCT_Measure+0x148>
 8017824:	f11b 0200 	adds.w	r2, fp, #0
 8017828:	bf18      	it	ne
 801782a:	2201      	movne	r2, #1
 801782c:	4b52      	ldr	r3, [pc, #328]	; (8017978 <GUI_Text_CCT_Measure+0x1d4>)
 801782e:	7819      	ldrb	r1, [r3, #0]
 8017830:	4698      	mov	r8, r3
 8017832:	2900      	cmp	r1, #0
 8017834:	d15c      	bne.n	80178f0 <GUI_Text_CCT_Measure+0x14c>
 8017836:	2a00      	cmp	r2, #0
 8017838:	d05a      	beq.n	80178f0 <GUI_Text_CCT_Measure+0x14c>
 801783a:	2201      	movs	r2, #1
 801783c:	701a      	strb	r2, [r3, #0]
 801783e:	2163      	movs	r1, #99	; 0x63
 8017840:	f104 0319 	add.w	r3, r4, #25
 8017844:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017848:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801784c:	b29b      	uxth	r3, r3
 801784e:	b292      	uxth	r2, r2
 8017850:	9100      	str	r1, [sp, #0]
 8017852:	b280      	uxth	r0, r0
 8017854:	4621      	mov	r1, r4
 8017856:	f007 f91b 	bl	801ea90 <TFT_FillRectangle>
 801785a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801785e:	f007 fbc1 	bl	801efe4 <TFT_SetTextColor>
 8017862:	1d26      	adds	r6, r4, #4
 8017864:	4848      	ldr	r0, [pc, #288]	; (8017988 <GUI_Text_CCT_Measure+0x1e4>)
 8017866:	f007 fbb7 	bl	801efd8 <TFT_SetFont>
 801786a:	b2b6      	uxth	r6, r6
 801786c:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8017870:	222d      	movs	r2, #45	; 0x2d
 8017872:	4631      	mov	r1, r6
 8017874:	b280      	uxth	r0, r0
 8017876:	f007 fca5 	bl	801f1c4 <TFT_DrawChar>
 801787a:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 801787e:	2220      	movs	r2, #32
 8017880:	4631      	mov	r1, r6
 8017882:	b280      	uxth	r0, r0
 8017884:	f007 fc9e 	bl	801f1c4 <TFT_DrawChar>
 8017888:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801788c:	222d      	movs	r2, #45	; 0x2d
 801788e:	4631      	mov	r1, r6
 8017890:	b280      	uxth	r0, r0
 8017892:	f007 fc97 	bl	801f1c4 <TFT_DrawChar>
	old_numCCT = number;
		
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
	}
	
	TFT_SetTextColor(TFT_White);
 8017896:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801789a:	f007 fba3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801789e:	2063      	movs	r0, #99	; 0x63
 80178a0:	f007 fba6 	bl	801eff0 <TFT_SetBackColor>
	if(Language_status == Ru ){
 80178a4:	4b39      	ldr	r3, [pc, #228]	; (801798c <GUI_Text_CCT_Measure+0x1e8>)
 80178a6:	781b      	ldrb	r3, [r3, #0]
 80178a8:	f105 06c8 	add.w	r6, r5, #200	; 0xc8
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d152      	bne.n	8017956 <GUI_Text_CCT_Measure+0x1b2>
			TFT_SetFont(&Font26RU_arch_big);
 80178b0:	4837      	ldr	r0, [pc, #220]	; (8017990 <GUI_Text_CCT_Measure+0x1ec>)
 80178b2:	f007 fb91 	bl	801efd8 <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'К'-17);
 80178b6:	2289      	movs	r2, #137	; 0x89
 80178b8:	4621      	mov	r1, r4
 80178ba:	4628      	mov	r0, r5
 80178bc:	f007 fb9e 	bl	801effc <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'Ц'-17);
 80178c0:	f105 0018 	add.w	r0, r5, #24
 80178c4:	2295      	movs	r2, #149	; 0x95
 80178c6:	4621      	mov	r1, r4
 80178c8:	b280      	uxth	r0, r0
 80178ca:	f007 fb97 	bl	801effc <TFT_DrawCharRus>
			TFT_DrawCharRus(X+45, Y, 'Т'-17);
 80178ce:	f105 002d 	add.w	r0, r5, #45	; 0x2d
 80178d2:	2291      	movs	r2, #145	; 0x91
 80178d4:	4621      	mov	r1, r4
 80178d6:	b280      	uxth	r0, r0
 80178d8:	f007 fb90 	bl	801effc <TFT_DrawCharRus>
			TFT_DrawCharRus(X+200, Y, 'К'-17);
 80178dc:	2289      	movs	r2, #137	; 0x89
 80178de:	4621      	mov	r1, r4
 80178e0:	b2b0      	uxth	r0, r6
 80178e2:	f007 fb8b 	bl	801effc <TFT_DrawCharRus>
		{
			GUI_TextEn_CCT(X, Y+4);

			TFT_DrawChar(X+200, Y+4, 'K'-33);
		}	
}
 80178e6:	b007      	add	sp, #28
 80178e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178ec:	2201      	movs	r2, #1
 80178ee:	e79d      	b.n	801782c <GUI_Text_CCT_Measure+0x88>
	else if(!nope & Value != 0){
 80178f0:	f1bb 0f00 	cmp.w	fp, #0
 80178f4:	d1cf      	bne.n	8017896 <GUI_Text_CCT_Measure+0xf2>
 80178f6:	f1b9 0f00 	cmp.w	r9, #0
 80178fa:	d0cc      	beq.n	8017896 <GUI_Text_CCT_Measure+0xf2>
	if(number < old_numCCT )
 80178fc:	4b25      	ldr	r3, [pc, #148]	; (8017994 <GUI_Text_CCT_Measure+0x1f0>)
 80178fe:	781a      	ldrb	r2, [r3, #0]
 8017900:	42b2      	cmp	r2, r6
 8017902:	4699      	mov	r9, r3
 8017904:	d90d      	bls.n	8017922 <GUI_Text_CCT_Measure+0x17e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017906:	2163      	movs	r1, #99	; 0x63
 8017908:	f104 0319 	add.w	r3, r4, #25
 801790c:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017910:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017914:	9100      	str	r1, [sp, #0]
 8017916:	b29b      	uxth	r3, r3
 8017918:	b292      	uxth	r2, r2
 801791a:	4621      	mov	r1, r4
 801791c:	b280      	uxth	r0, r0
 801791e:	f007 f8b7 	bl	801ea90 <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017922:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8017926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801792a:	f249 42d2 	movw	r2, #38098	; 0x94d2
 801792e:	2800      	cmp	r0, #0
 8017930:	bf14      	ite	ne
 8017932:	4610      	movne	r0, r2
 8017934:	4618      	moveq	r0, r3
 8017936:	f007 fb55 	bl	801efe4 <TFT_SetTextColor>
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 801793a:	1ca1      	adds	r1, r4, #2
 801793c:	19e8      	adds	r0, r5, r7
 801793e:	2303      	movs	r3, #3
 8017940:	aa03      	add	r2, sp, #12
 8017942:	b289      	uxth	r1, r1
 8017944:	b280      	uxth	r0, r0
	old_numCCT = number;
 8017946:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 801794a:	f007 fcb1 	bl	801f2b0 <TFT_DisplayString>
 801794e:	2300      	movs	r3, #0
 8017950:	f888 3000 	strb.w	r3, [r8]
 8017954:	e79f      	b.n	8017896 <GUI_Text_CCT_Measure+0xf2>
			GUI_TextEn_CCT(X, Y+4);
 8017956:	3404      	adds	r4, #4
 8017958:	b2a4      	uxth	r4, r4
 801795a:	4621      	mov	r1, r4
 801795c:	4628      	mov	r0, r5
 801795e:	f002 fd09 	bl	801a374 <GUI_TextEn_CCT>
			TFT_DrawChar(X+200, Y+4, 'K'-33);
 8017962:	222a      	movs	r2, #42	; 0x2a
 8017964:	4621      	mov	r1, r4
 8017966:	b2b0      	uxth	r0, r6
 8017968:	f007 fc2c 	bl	801f1c4 <TFT_DrawChar>
}
 801796c:	e7bb      	b.n	80178e6 <GUI_Text_CCT_Measure+0x142>
 801796e:	bf00      	nop
 8017970:	2000022a 	.word	0x2000022a
 8017974:	20005279 	.word	0x20005279
 8017978:	200052ab 	.word	0x200052ab
 801797c:	200001f0 	.word	0x200001f0
 8017980:	08034170 	.word	0x08034170
 8017984:	3ff00000 	.word	0x3ff00000
 8017988:	200001e8 	.word	0x200001e8
 801798c:	2000527b 	.word	0x2000527b
 8017990:	20000200 	.word	0x20000200
 8017994:	20000231 	.word	0x20000231

08017998 <GUI_Text_lambdaD_Measure>:
uint8_t old_lambdaD = 10, old_nan_lambdaD = 0;
void GUI_Text_lambdaD_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8017998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801799c:	ed2d 8b02 	vpush	{d8}
 80179a0:	4616      	mov	r6, r2
 80179a2:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80179a4:	4a71      	ldr	r2, [pc, #452]	; (8017b6c <GUI_Text_lambdaD_Measure+0x1d4>)
 80179a6:	4b72      	ldr	r3, [pc, #456]	; (8017b70 <GUI_Text_lambdaD_Measure+0x1d8>)
 80179a8:	4f72      	ldr	r7, [pc, #456]	; (8017b74 <GUI_Text_lambdaD_Measure+0x1dc>)
{	
 80179aa:	4605      	mov	r5, r0
 80179ac:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80179ae:	7818      	ldrb	r0, [r3, #0]
 80179b0:	7811      	ldrb	r1, [r2, #0]
	Value = floor(Value*10)/10.0;
 80179b2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80179b6:	4288      	cmp	r0, r1
	Value = floor(Value*10)/10.0;
 80179b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80179bc:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80179be:	bf18      	it	ne
 80179c0:	2300      	movne	r3, #0
{	
 80179c2:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80179c4:	bf18      	it	ne
 80179c6:	703b      	strbne	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 80179c8:	ee17 0a90 	vmov	r0, s15
 80179cc:	4690      	mov	r8, r2
 80179ce:	f7e8 fdd3 	bl	8000578 <__aeabi_f2d>
 80179d2:	ec41 0b10 	vmov	d0, r0, r1
 80179d6:	f00d fe47 	bl	8025668 <floor>
	char buffer[9] = {0};
 80179da:	2200      	movs	r2, #0
	Value = floor(Value*10)/10.0;
 80179dc:	ec51 0b10 	vmov	r0, r1, d0
	char buffer[9] = {0};
 80179e0:	9203      	str	r2, [sp, #12]
 80179e2:	9204      	str	r2, [sp, #16]
 80179e4:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
 80179e8:	2e00      	cmp	r6, #0
 80179ea:	d054      	beq.n	8017a96 <GUI_Text_lambdaD_Measure+0xfe>
		{	
			if(!old_nan_lambdaD){
 80179ec:	783b      	ldrb	r3, [r7, #0]
 80179ee:	bb33      	cbnz	r3, 8017a3e <GUI_Text_lambdaD_Measure+0xa6>
				TFT_SetTextColor(TFT_White);
 80179f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80179f4:	f007 faf6 	bl	801efe4 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80179f8:	2063      	movs	r0, #99	; 0x63
 80179fa:	f007 faf9 	bl	801eff0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80179fe:	485e      	ldr	r0, [pc, #376]	; (8017b78 <GUI_Text_lambdaD_Measure+0x1e0>)
 8017a00:	f007 faea 	bl	801efd8 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8017a04:	2163      	movs	r1, #99	; 0x63
 8017a06:	f104 031a 	add.w	r3, r4, #26
 8017a0a:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017a0e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017a12:	9100      	str	r1, [sp, #0]
 8017a14:	b29b      	uxth	r3, r3
 8017a16:	b292      	uxth	r2, r2
 8017a18:	4621      	mov	r1, r4
 8017a1a:	b280      	uxth	r0, r0
 8017a1c:	f007 f838 	bl	801ea90 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8017a20:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017a22:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8017a26:	f88d 300c 	strb.w	r3, [sp, #12]
 8017a2a:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017a2e:	aa03      	add	r2, sp, #12
 8017a30:	2303      	movs	r3, #3
 8017a32:	4621      	mov	r1, r4
 8017a34:	b280      	uxth	r0, r0
 8017a36:	f007 fc3b 	bl	801f2b0 <TFT_DisplayString>
				old_nan_lambdaD = 1;
 8017a3a:	2301      	movs	r3, #1
 8017a3c:	703b      	strb	r3, [r7, #0]
	} 
	old_lambdaD = number;
	
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8017a3e:	f899 2000 	ldrb.w	r2, [r9]
 8017a42:	f898 3000 	ldrb.w	r3, [r8]
 8017a46:	429a      	cmp	r2, r3
 8017a48:	d020      	beq.n	8017a8c <GUI_Text_lambdaD_Measure+0xf4>
	TFT_SetTextColor(TFT_White);
 8017a4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_d(X, Y+5);
 8017a4e:	1d66      	adds	r6, r4, #5
	TFT_SetTextColor(TFT_White);
 8017a50:	f007 fac8 	bl	801efe4 <TFT_SetTextColor>
	GUI_Text_lambda_d(X, Y+5);
 8017a54:	b2b6      	uxth	r6, r6
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017a56:	2063      	movs	r0, #99	; 0x63
 8017a58:	f007 faca 	bl	801eff0 <TFT_SetBackColor>
	GUI_Text_lambda_d(X, Y+5);
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	4631      	mov	r1, r6
 8017a60:	f001 fd28 	bl	80194b4 <GUI_Text_lambda_d>
	if(Language_status == Ru ){
 8017a64:	4b45      	ldr	r3, [pc, #276]	; (8017b7c <GUI_Text_lambdaD_Measure+0x1e4>)
 8017a66:	781b      	ldrb	r3, [r3, #0]
 8017a68:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 8017a6c:	35d8      	adds	r5, #216	; 0xd8
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d16c      	bne.n	8017b4c <GUI_Text_lambdaD_Measure+0x1b4>
			TFT_SetFont(&Font26RU_arch_small);
 8017a72:	4843      	ldr	r0, [pc, #268]	; (8017b80 <GUI_Text_lambdaD_Measure+0x1e8>)
 8017a74:	f007 fab0 	bl	801efd8 <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 8017a78:	22bd      	movs	r2, #189	; 0xbd
 8017a7a:	4631      	mov	r1, r6
 8017a7c:	b2b8      	uxth	r0, r7
 8017a7e:	f007 fabd 	bl	801effc <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 8017a82:	22bc      	movs	r2, #188	; 0xbc
 8017a84:	4631      	mov	r1, r6
 8017a86:	b2a8      	uxth	r0, r5
 8017a88:	f007 fab8 	bl	801effc <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y+10, 'n');
			TFT_DrawChar(X+216, Y+10, 'm');
		}	
	}
}
 8017a8c:	b006      	add	sp, #24
 8017a8e:	ecbd 8b02 	vpop	{d8}
 8017a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	old_nan_lambdaD = 0;
 8017a96:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a9c:	f249 47d2 	movw	r7, #38098	; 0x94d2
	Value = floor(Value*10)/10.0;
 8017aa0:	2200      	movs	r2, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017aa2:	f1ba 0f00 	cmp.w	sl, #0
 8017aa6:	bf08      	it	eq
 8017aa8:	461f      	moveq	r7, r3
	Value = floor(Value*10)/10.0;
 8017aaa:	4b36      	ldr	r3, [pc, #216]	; (8017b84 <GUI_Text_lambdaD_Measure+0x1ec>)
 8017aac:	f7e8 fee2 	bl	8000874 <__aeabi_ddiv>
 8017ab0:	f7e9 f8ae 	bl	8000c10 <__aeabi_d2f>
 8017ab4:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017ab8:	4638      	mov	r0, r7
 8017aba:	f007 fa93 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017abe:	2063      	movs	r0, #99	; 0x63
 8017ac0:	f007 fa96 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017ac4:	482c      	ldr	r0, [pc, #176]	; (8017b78 <GUI_Text_lambdaD_Measure+0x1e0>)
 8017ac6:	f007 fa87 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8017aca:	ee18 0a10 	vmov	r0, s16
 8017ace:	f7e8 fd53 	bl	8000578 <__aeabi_f2d>
 8017ad2:	4602      	mov	r2, r0
 8017ad4:	460b      	mov	r3, r1
 8017ad6:	a803      	add	r0, sp, #12
 8017ad8:	492b      	ldr	r1, [pc, #172]	; (8017b88 <GUI_Text_lambdaD_Measure+0x1f0>)
 8017ada:	f00a fe19 	bl	8022710 <sprintf>
	uint32_t dec = 10;
 8017ade:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8017ae0:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 8017ae2:	277a      	movs	r7, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 8017ae4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8017ae8:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8017aea:	ee07 2a10 	vmov	s14, r2
 8017aee:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017af2:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8017af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017afe:	db04      	blt.n	8017b0a <GUI_Text_lambdaD_Measure+0x172>
			delta_pos-=23;
 8017b00:	3f17      	subs	r7, #23
			number++;
 8017b02:	3601      	adds	r6, #1
			dec *= 10;
 8017b04:	434a      	muls	r2, r1
			delta_pos-=23;
 8017b06:	b2ff      	uxtb	r7, r7
			number++;
 8017b08:	b2f6      	uxtb	r6, r6
 8017b0a:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 8017b0c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017b10:	d1eb      	bne.n	8017aea <GUI_Text_lambdaD_Measure+0x152>
	if(number < old_lambdaD )
 8017b12:	4b1e      	ldr	r3, [pc, #120]	; (8017b8c <GUI_Text_lambdaD_Measure+0x1f4>)
 8017b14:	781a      	ldrb	r2, [r3, #0]
 8017b16:	42b2      	cmp	r2, r6
 8017b18:	469a      	mov	sl, r3
 8017b1a:	d90d      	bls.n	8017b38 <GUI_Text_lambdaD_Measure+0x1a0>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017b1c:	2163      	movs	r1, #99	; 0x63
 8017b1e:	f104 0319 	add.w	r3, r4, #25
 8017b22:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017b26:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017b2a:	9100      	str	r1, [sp, #0]
 8017b2c:	b29b      	uxth	r3, r3
 8017b2e:	b292      	uxth	r2, r2
 8017b30:	4621      	mov	r1, r4
 8017b32:	b280      	uxth	r0, r0
 8017b34:	f006 ffac 	bl	801ea90 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017b38:	19e8      	adds	r0, r5, r7
 8017b3a:	2303      	movs	r3, #3
 8017b3c:	aa03      	add	r2, sp, #12
 8017b3e:	4621      	mov	r1, r4
 8017b40:	b280      	uxth	r0, r0
	old_lambdaD = number;
 8017b42:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017b46:	f007 fbb3 	bl	801f2b0 <TFT_DisplayString>
 8017b4a:	e778      	b.n	8017a3e <GUI_Text_lambdaD_Measure+0xa6>
			TFT_DrawChar(X+200, Y+10, 'n');
 8017b4c:	340a      	adds	r4, #10
 8017b4e:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font16EN_arch_small);
 8017b50:	480f      	ldr	r0, [pc, #60]	; (8017b90 <GUI_Text_lambdaD_Measure+0x1f8>)
 8017b52:	f007 fa41 	bl	801efd8 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+10, 'n');
 8017b56:	4621      	mov	r1, r4
 8017b58:	b2b8      	uxth	r0, r7
 8017b5a:	226e      	movs	r2, #110	; 0x6e
 8017b5c:	f007 fb32 	bl	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X+216, Y+10, 'm');
 8017b60:	226d      	movs	r2, #109	; 0x6d
 8017b62:	4621      	mov	r1, r4
 8017b64:	b2a8      	uxth	r0, r5
 8017b66:	f007 fb2d 	bl	801f1c4 <TFT_DrawChar>
}
 8017b6a:	e78f      	b.n	8017a8c <GUI_Text_lambdaD_Measure+0xf4>
 8017b6c:	20005279 	.word	0x20005279
 8017b70:	2000022a 	.word	0x2000022a
 8017b74:	200052b6 	.word	0x200052b6
 8017b78:	200001f0 	.word	0x200001f0
 8017b7c:	2000527b 	.word	0x2000527b
 8017b80:	20000208 	.word	0x20000208
 8017b84:	40240000 	.word	0x40240000
 8017b88:	0803416b 	.word	0x0803416b
 8017b8c:	2000022f 	.word	0x2000022f
 8017b90:	200001c0 	.word	0x200001c0

08017b94 <GUI_Text_deltaE_Measure>:
}


uint8_t old_deltaE = 10, old_nan_deltaE = 0;
void GUI_Text_deltaE_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8017b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b98:	ed2d 8b02 	vpush	{d8}
 8017b9c:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8017b9e:	4b76      	ldr	r3, [pc, #472]	; (8017d78 <GUI_Text_deltaE_Measure+0x1e4>)
 8017ba0:	4e76      	ldr	r6, [pc, #472]	; (8017d7c <GUI_Text_deltaE_Measure+0x1e8>)
{	
 8017ba2:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8017ba4:	781a      	ldrb	r2, [r3, #0]
 8017ba6:	4b76      	ldr	r3, [pc, #472]	; (8017d80 <GUI_Text_deltaE_Measure+0x1ec>)
 8017ba8:	781b      	ldrb	r3, [r3, #0]
 8017baa:	429a      	cmp	r2, r3
{	
 8017bac:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8017bae:	bf1c      	itt	ne
 8017bb0:	2300      	movne	r3, #0
 8017bb2:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	9303      	str	r3, [sp, #12]
 8017bb8:	9304      	str	r3, [sp, #16]
 8017bba:	f88d 3014 	strb.w	r3, [sp, #20]
{	
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	460d      	mov	r5, r1
 8017bc2:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t	delta_pos = 140, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_deltaE){
 8017bc6:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8017bc8:	2f00      	cmp	r7, #0
 8017bca:	d047      	beq.n	8017c5c <GUI_Text_deltaE_Measure+0xc8>
			if(!old_nan_deltaE){
 8017bcc:	bb33      	cbnz	r3, 8017c1c <GUI_Text_deltaE_Measure+0x88>
				TFT_SetTextColor(TFT_White);
 8017bce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017bd2:	f007 fa07 	bl	801efe4 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8017bd6:	2063      	movs	r0, #99	; 0x63
 8017bd8:	f007 fa0a 	bl	801eff0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8017bdc:	4869      	ldr	r0, [pc, #420]	; (8017d84 <GUI_Text_deltaE_Measure+0x1f0>)
 8017bde:	f007 f9fb 	bl	801efd8 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017be2:	2163      	movs	r1, #99	; 0x63
 8017be4:	f105 031a 	add.w	r3, r5, #26
 8017be8:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8017bec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8017bf0:	9100      	str	r1, [sp, #0]
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	b292      	uxth	r2, r2
 8017bf6:	4629      	mov	r1, r5
 8017bf8:	b280      	uxth	r0, r0
 8017bfa:	f006 ff49 	bl	801ea90 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8017bfe:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017c00:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8017c04:	f88d 300c 	strb.w	r3, [sp, #12]
 8017c08:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017c0c:	aa03      	add	r2, sp, #12
 8017c0e:	2303      	movs	r3, #3
 8017c10:	4629      	mov	r1, r5
 8017c12:	b280      	uxth	r0, r0
 8017c14:	f007 fb4c 	bl	801f2b0 <TFT_DisplayString>
				old_nan_deltaE = 1;
 8017c18:	2301      	movs	r3, #1
 8017c1a:	7033      	strb	r3, [r6, #0]
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8017c1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017c20:	f007 f9e0 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017c24:	2063      	movs	r0, #99	; 0x63
 8017c26:	f007 f9e3 	bl	801eff0 <TFT_SetBackColor>

	TFT_SetFont(&Font16EN_arch_big);
 8017c2a:	4857      	ldr	r0, [pc, #348]	; (8017d88 <GUI_Text_deltaE_Measure+0x1f4>)
 8017c2c:	f007 f9d4 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y+6, '~'+2);
 8017c30:	1da9      	adds	r1, r5, #6
 8017c32:	2280      	movs	r2, #128	; 0x80
 8017c34:	b289      	uxth	r1, r1
 8017c36:	4620      	mov	r0, r4
 8017c38:	f007 fac4 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017c3c:	4853      	ldr	r0, [pc, #332]	; (8017d8c <GUI_Text_deltaE_Measure+0x1f8>)
 8017c3e:	f007 f9cb 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'E'-33);
 8017c42:	1ca9      	adds	r1, r5, #2
 8017c44:	f104 0012 	add.w	r0, r4, #18
 8017c48:	2224      	movs	r2, #36	; 0x24
 8017c4a:	b289      	uxth	r1, r1
 8017c4c:	b280      	uxth	r0, r0
 8017c4e:	f007 fab9 	bl	801f1c4 <TFT_DrawChar>

}
 8017c52:	b007      	add	sp, #28
 8017c54:	ecbd 8b02 	vpop	{d8}
 8017c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(old_nan_deltaE){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);}
 8017c5c:	b163      	cbz	r3, 8017c78 <GUI_Text_deltaE_Measure+0xe4>
 8017c5e:	f101 031a 	add.w	r3, r1, #26
 8017c62:	f100 02fa 	add.w	r2, r0, #250	; 0xfa
 8017c66:	2163      	movs	r1, #99	; 0x63
 8017c68:	3028      	adds	r0, #40	; 0x28
 8017c6a:	9100      	str	r1, [sp, #0]
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	b292      	uxth	r2, r2
 8017c70:	4629      	mov	r1, r5
 8017c72:	b280      	uxth	r0, r0
 8017c74:	f006 ff0c 	bl	801ea90 <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
	old_nan_deltaE = 0;
 8017c7c:	f04f 0800 	mov.w	r8, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017c80:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8017c84:	45c1      	cmp	r9, r8
 8017c86:	bf08      	it	eq
 8017c88:	4618      	moveq	r0, r3
	old_nan_deltaE = 0;
 8017c8a:	f886 8000 	strb.w	r8, [r6]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017c8e:	f007 f9a9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017c92:	2063      	movs	r0, #99	; 0x63
 8017c94:	f007 f9ac 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017c98:	483a      	ldr	r0, [pc, #232]	; (8017d84 <GUI_Text_deltaE_Measure+0x1f0>)
 8017c9a:	f007 f99d 	bl	801efd8 <TFT_SetFont>
	Value = floor(Value*10)/10.0;
 8017c9e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017ca2:	ee68 7a27 	vmul.f32	s15, s16, s15
	uint8_t	delta_pos = 140, sign = 0, number = 0;
 8017ca6:	268c      	movs	r6, #140	; 0x8c
	Value = floor(Value*10)/10.0;
 8017ca8:	ee17 0a90 	vmov	r0, s15
 8017cac:	f7e8 fc64 	bl	8000578 <__aeabi_f2d>
 8017cb0:	ec41 0b10 	vmov	d0, r0, r1
 8017cb4:	f00d fcd8 	bl	8025668 <floor>
 8017cb8:	2200      	movs	r2, #0
 8017cba:	4b35      	ldr	r3, [pc, #212]	; (8017d90 <GUI_Text_deltaE_Measure+0x1fc>)
 8017cbc:	ec51 0b10 	vmov	r0, r1, d0
 8017cc0:	f7e8 fdd8 	bl	8000874 <__aeabi_ddiv>
 8017cc4:	f7e8 ffa4 	bl	8000c10 <__aeabi_d2f>
 8017cc8:	ee08 0a10 	vmov	s16, r0
	if(Value < 0){Value *= -1; sign = 1;}
 8017ccc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd4:	bf48      	it	mi
 8017cd6:	eeb1 8a48 	vnegmi.f32	s16, s16
	sprintf (buffer, "%.2f", Value);
 8017cda:	ee18 0a10 	vmov	r0, s16
	if(Value < 0){Value *= -1; sign = 1;}
 8017cde:	bf48      	it	mi
 8017ce0:	f04f 0801 	movmi.w	r8, #1
	sprintf (buffer, "%.2f", Value);
 8017ce4:	f7e8 fc48 	bl	8000578 <__aeabi_f2d>
 8017ce8:	4602      	mov	r2, r0
 8017cea:	460b      	mov	r3, r1
 8017cec:	a803      	add	r0, sp, #12
 8017cee:	4929      	ldr	r1, [pc, #164]	; (8017d94 <GUI_Text_deltaE_Measure+0x200>)
 8017cf0:	f00a fd0e 	bl	8022710 <sprintf>
	uint32_t dec = 10;
 8017cf4:	220a      	movs	r2, #10
	sprintf (buffer, "%.2f", Value);
 8017cf6:	2304      	movs	r3, #4
		if((Value/(dec)) >= 1.0)
 8017cf8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8017cfc:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8017cfe:	ee07 2a10 	vmov	s14, r2
 8017d02:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017d06:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8017d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d12:	db04      	blt.n	8017d1e <GUI_Text_deltaE_Measure+0x18a>
			delta_pos-=23;
 8017d14:	3e17      	subs	r6, #23
			number++;
 8017d16:	3701      	adds	r7, #1
			dec *= 10;
 8017d18:	434a      	muls	r2, r1
			delta_pos-=23;
 8017d1a:	b2f6      	uxtb	r6, r6
			number++;
 8017d1c:	b2ff      	uxtb	r7, r7
 8017d1e:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017d20:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017d24:	d1eb      	bne.n	8017cfe <GUI_Text_deltaE_Measure+0x16a>
	if(number < old_deltaE )
 8017d26:	4b1c      	ldr	r3, [pc, #112]	; (8017d98 <GUI_Text_deltaE_Measure+0x204>)
 8017d28:	781a      	ldrb	r2, [r3, #0]
 8017d2a:	42ba      	cmp	r2, r7
 8017d2c:	4699      	mov	r9, r3
 8017d2e:	d90d      	bls.n	8017d4c <GUI_Text_deltaE_Measure+0x1b8>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017d30:	2163      	movs	r1, #99	; 0x63
 8017d32:	f105 0319 	add.w	r3, r5, #25
 8017d36:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8017d3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8017d3e:	9100      	str	r1, [sp, #0]
 8017d40:	b29b      	uxth	r3, r3
 8017d42:	b292      	uxth	r2, r2
 8017d44:	4629      	mov	r1, r5
 8017d46:	b280      	uxth	r0, r0
 8017d48:	f006 fea2 	bl	801ea90 <TFT_FillRectangle>
	old_deltaE = number;
 8017d4c:	f889 7000 	strb.w	r7, [r9]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}
 8017d50:	f1b8 0f00 	cmp.w	r8, #0
 8017d54:	d007      	beq.n	8017d66 <GUI_Text_deltaE_Measure+0x1d2>
 8017d56:	f1a4 0012 	sub.w	r0, r4, #18
 8017d5a:	4430      	add	r0, r6
 8017d5c:	222d      	movs	r2, #45	; 0x2d
 8017d5e:	4629      	mov	r1, r5
 8017d60:	b280      	uxth	r0, r0
 8017d62:	f007 fa2f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017d66:	19a0      	adds	r0, r4, r6
 8017d68:	2303      	movs	r3, #3
 8017d6a:	aa03      	add	r2, sp, #12
 8017d6c:	4629      	mov	r1, r5
 8017d6e:	b280      	uxth	r0, r0
 8017d70:	f007 fa9e 	bl	801f2b0 <TFT_DisplayString>
 8017d74:	e752      	b.n	8017c1c <GUI_Text_deltaE_Measure+0x88>
 8017d76:	bf00      	nop
 8017d78:	2000022a 	.word	0x2000022a
 8017d7c:	200052b5 	.word	0x200052b5
 8017d80:	20005279 	.word	0x20005279
 8017d84:	200001f0 	.word	0x200001f0
 8017d88:	200001b0 	.word	0x200001b0
 8017d8c:	200001e8 	.word	0x200001e8
 8017d90:	40240000 	.word	0x40240000
 8017d94:	08034173 	.word	0x08034173
 8017d98:	2000022e 	.word	0x2000022e

08017d9c <GUI_Text_EbEr_Measure>:
uint8_t old_num_EB = 10, old_num_ER = 10, old_nan_EBER = 0;
void GUI_Text_EbEr_Measure(uint16_t X, uint16_t Y, float ValueEB, float ValueER, uint8_t nope, uint8_t grey)
{
 8017d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da0:	ed2d 8b04 	vpush	{d8-d9}
 8017da4:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8017da6:	4bb6      	ldr	r3, [pc, #728]	; (8018080 <GUI_Text_EbEr_Measure+0x2e4>)
 8017da8:	4eb6      	ldr	r6, [pc, #728]	; (8018084 <GUI_Text_EbEr_Measure+0x2e8>)
{
 8017daa:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8017dac:	781a      	ldrb	r2, [r3, #0]
 8017dae:	4bb6      	ldr	r3, [pc, #728]	; (8018088 <GUI_Text_EbEr_Measure+0x2ec>)
 8017db0:	781b      	ldrb	r3, [r3, #0]
 8017db2:	429a      	cmp	r2, r3
{
 8017db4:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8017db6:	bf1c      	itt	ne
 8017db8:	2300      	movne	r3, #0
 8017dba:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	9303      	str	r3, [sp, #12]
 8017dc0:	9304      	str	r3, [sp, #16]
 8017dc2:	f88d 3014 	strb.w	r3, [sp, #20]
{
 8017dc6:	4605      	mov	r5, r0
 8017dc8:	460c      	mov	r4, r1
 8017dca:	eef0 8a40 	vmov.f32	s17, s0
 8017dce:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_EBER){
 8017dd2:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8017dd4:	f1b8 0f00 	cmp.w	r8, #0
 8017dd8:	d06f      	beq.n	8017eba <GUI_Text_EbEr_Measure+0x11e>
			if(!old_nan_EBER){
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d140      	bne.n	8017e60 <GUI_Text_EbEr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 8017dde:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017de2:	f007 f8ff 	bl	801efe4 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8017de6:	2063      	movs	r0, #99	; 0x63
 8017de8:	f007 f902 	bl	801eff0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017dec:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8017df0:	48a6      	ldr	r0, [pc, #664]	; (801808c <GUI_Text_EbEr_Measure+0x2f0>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017df2:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 8017df6:	f007 f8ef 	bl	801efd8 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017dfa:	b2bf      	uxth	r7, r7
 8017dfc:	fa1f f989 	uxth.w	r9, r9
 8017e00:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8017e04:	f104 031a 	add.w	r3, r4, #26
 8017e08:	4638      	mov	r0, r7
 8017e0a:	b29b      	uxth	r3, r3
 8017e0c:	464a      	mov	r2, r9
 8017e0e:	4621      	mov	r1, r4
 8017e10:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017e14:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017e18:	f006 fe3a 	bl	801ea90 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017e1c:	fa1f f888 	uxth.w	r8, r8
 8017e20:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017e24:	4638      	mov	r0, r7
 8017e26:	b29b      	uxth	r3, r3
 8017e28:	464a      	mov	r2, r9
 8017e2a:	4641      	mov	r1, r8
 8017e2c:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017e30:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017e34:	f006 fe2c 	bl	801ea90 <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017e38:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8017e3a:	232d      	movs	r3, #45	; 0x2d
 8017e3c:	f88d 300c 	strb.w	r3, [sp, #12]
 8017e40:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017e44:	aa03      	add	r2, sp, #12
 8017e46:	2303      	movs	r3, #3
 8017e48:	4621      	mov	r1, r4
 8017e4a:	4638      	mov	r0, r7
 8017e4c:	f007 fa30 	bl	801f2b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017e50:	2303      	movs	r3, #3
 8017e52:	aa03      	add	r2, sp, #12
 8017e54:	4641      	mov	r1, r8
 8017e56:	4638      	mov	r0, r7
 8017e58:	f007 fa2a 	bl	801f2b0 <TFT_DisplayString>
				old_nan_EBER = 1;
 8017e5c:	2301      	movs	r3, #1
 8017e5e:	7033      	strb	r3, [r6, #0]
	old_num_ER = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8017e60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017e64:	f007 f8be 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8017e68:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8017e6c:	4888      	ldr	r0, [pc, #544]	; (8018090 <GUI_Text_EbEr_Measure+0x2f4>)
 8017e6e:	f007 f8b3 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8017e72:	b2b6      	uxth	r6, r6
 8017e74:	f104 010c 	add.w	r1, r4, #12
 8017e78:	4630      	mov	r0, r6
 8017e7a:	2242      	movs	r2, #66	; 0x42
 8017e7c:	b289      	uxth	r1, r1
 8017e7e:	f007 f9a1 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8017e82:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8017e86:	2252      	movs	r2, #82	; 0x52
 8017e88:	b289      	uxth	r1, r1
 8017e8a:	4630      	mov	r0, r6
 8017e8c:	f007 f99a 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017e90:	4880      	ldr	r0, [pc, #512]	; (8018094 <GUI_Text_EbEr_Measure+0x2f8>)
 8017e92:	f007 f8a1 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8017e96:	1ca1      	adds	r1, r4, #2
 8017e98:	4628      	mov	r0, r5
 8017e9a:	2224      	movs	r2, #36	; 0x24
 8017e9c:	b289      	uxth	r1, r1
 8017e9e:	f007 f991 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'E'-33);
 8017ea2:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8017ea6:	2224      	movs	r2, #36	; 0x24
 8017ea8:	b289      	uxth	r1, r1
 8017eaa:	4628      	mov	r0, r5
 8017eac:	f007 f98a 	bl	801f1c4 <TFT_DrawChar>
}
 8017eb0:	b007      	add	sp, #28
 8017eb2:	ecbd 8b04 	vpop	{d8-d9}
 8017eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_EBER){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017eba:	b1eb      	cbz	r3, 8017ef8 <GUI_Text_EbEr_Measure+0x15c>
 8017ebc:	f100 0728 	add.w	r7, r0, #40	; 0x28
 8017ec0:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 8017ec4:	f101 031a 	add.w	r3, r1, #26
 8017ec8:	b2bf      	uxth	r7, r7
 8017eca:	fa1f f989 	uxth.w	r9, r9
 8017ece:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8017ed2:	b29b      	uxth	r3, r3
 8017ed4:	464a      	mov	r2, r9
 8017ed6:	4638      	mov	r0, r7
 8017ed8:	f8cd b000 	str.w	fp, [sp]
 8017edc:	f006 fdd8 	bl	801ea90 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8017ee0:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017ee4:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8017ee8:	f8cd b000 	str.w	fp, [sp]
 8017eec:	b29b      	uxth	r3, r3
 8017eee:	464a      	mov	r2, r9
 8017ef0:	b289      	uxth	r1, r1
 8017ef2:	4638      	mov	r0, r7
 8017ef4:	f006 fdcc 	bl	801ea90 <TFT_FillRectangle>
	ValueEB = floor(ValueEB*100)/100.0;
 8017ef8:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8018098 <GUI_Text_EbEr_Measure+0x2fc>
 8017efc:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_EBER = 0;
 8017f00:	2700      	movs	r7, #0
	ValueEB = floor(ValueEB*100)/100.0;
 8017f02:	ee17 0a90 	vmov	r0, s15
	old_nan_EBER = 0;
 8017f06:	7037      	strb	r7, [r6, #0]
	ValueEB = floor(ValueEB*100)/100.0;
 8017f08:	f7e8 fb36 	bl	8000578 <__aeabi_f2d>
 8017f0c:	ec41 0b10 	vmov	d0, r0, r1
 8017f10:	f00d fbaa 	bl	8025668 <floor>
 8017f14:	2200      	movs	r2, #0
 8017f16:	4b61      	ldr	r3, [pc, #388]	; (801809c <GUI_Text_EbEr_Measure+0x300>)
 8017f18:	ec51 0b10 	vmov	r0, r1, d0
 8017f1c:	f7e8 fcaa 	bl	8000874 <__aeabi_ddiv>
 8017f20:	f7e8 fe76 	bl	8000c10 <__aeabi_d2f>
	ValueER = floor(ValueER*100)/100.0;
 8017f24:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueEB = floor(ValueEB*100)/100.0;
 8017f28:	ee08 0a90 	vmov	s17, r0
	ValueER = floor(ValueER*100)/100.0;
 8017f2c:	ee17 0a90 	vmov	r0, s15
 8017f30:	f7e8 fb22 	bl	8000578 <__aeabi_f2d>
 8017f34:	ec41 0b10 	vmov	d0, r0, r1
 8017f38:	f00d fb96 	bl	8025668 <floor>
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	ec51 0b10 	vmov	r0, r1, d0
 8017f42:	4b56      	ldr	r3, [pc, #344]	; (801809c <GUI_Text_EbEr_Measure+0x300>)
 8017f44:	f7e8 fc96 	bl	8000874 <__aeabi_ddiv>
 8017f48:	f7e8 fe62 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueER = floor(ValueER*100)/100.0;
 8017f50:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017f54:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8017f58:	45ba      	cmp	sl, r7
 8017f5a:	bf08      	it	eq
 8017f5c:	4618      	moveq	r0, r3
 8017f5e:	f007 f841 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017f62:	2063      	movs	r0, #99	; 0x63
 8017f64:	f007 f844 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017f68:	4848      	ldr	r0, [pc, #288]	; (801808c <GUI_Text_EbEr_Measure+0x2f0>)
 8017f6a:	f007 f835 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueEB);
 8017f6e:	ee18 0a90 	vmov	r0, s17
 8017f72:	f7e8 fb01 	bl	8000578 <__aeabi_f2d>
 8017f76:	4602      	mov	r2, r0
 8017f78:	460b      	mov	r3, r1
 8017f7a:	a803      	add	r0, sp, #12
 8017f7c:	4948      	ldr	r1, [pc, #288]	; (80180a0 <GUI_Text_EbEr_Measure+0x304>)
 8017f7e:	f00a fbc7 	bl	8022710 <sprintf>
	uint32_t dec = 10;
 8017f82:	f04f 090a 	mov.w	r9, #10
		if((ValueEB/(dec)) >= 1.0)
 8017f86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueEB);
 8017f8a:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8017f8c:	2696      	movs	r6, #150	; 0x96
 8017f8e:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 8017f92:	464a      	mov	r2, r9
		if((ValueEB/(dec)) >= 1.0)
 8017f94:	ee07 9a10 	vmov	s14, r9
 8017f98:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017f9c:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8017fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa8:	db05      	blt.n	8017fb6 <GUI_Text_EbEr_Measure+0x21a>
			delta_pos-=23;
 8017faa:	3e17      	subs	r6, #23
			number++;
 8017fac:	3701      	adds	r7, #1
			dec *= 10;
 8017fae:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8017fb2:	b2f6      	uxtb	r6, r6
			number++;
 8017fb4:	b2ff      	uxtb	r7, r7
 8017fb6:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017fb8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017fbc:	d1ea      	bne.n	8017f94 <GUI_Text_EbEr_Measure+0x1f8>
	if(number < old_num_EB )
 8017fbe:	4b39      	ldr	r3, [pc, #228]	; (80180a4 <GUI_Text_EbEr_Measure+0x308>)
 8017fc0:	781a      	ldrb	r2, [r3, #0]
 8017fc2:	42ba      	cmp	r2, r7
 8017fc4:	469a      	mov	sl, r3
 8017fc6:	d90d      	bls.n	8017fe4 <GUI_Text_EbEr_Measure+0x248>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017fc8:	2163      	movs	r1, #99	; 0x63
 8017fca:	f104 0319 	add.w	r3, r4, #25
 8017fce:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017fd2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017fd6:	9100      	str	r1, [sp, #0]
 8017fd8:	b29b      	uxth	r3, r3
 8017fda:	b292      	uxth	r2, r2
 8017fdc:	4621      	mov	r1, r4
 8017fde:	b280      	uxth	r0, r0
 8017fe0:	f006 fd56 	bl	801ea90 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017fe4:	19a8      	adds	r0, r5, r6
 8017fe6:	2303      	movs	r3, #3
 8017fe8:	aa03      	add	r2, sp, #12
 8017fea:	4621      	mov	r1, r4
 8017fec:	b280      	uxth	r0, r0
	old_num_EB = number;
 8017fee:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017ff2:	f007 f95d 	bl	801f2b0 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueER);
 8017ff6:	ee18 0a10 	vmov	r0, s16
 8017ffa:	f7e8 fabd 	bl	8000578 <__aeabi_f2d>
 8017ffe:	4602      	mov	r2, r0
 8018000:	460b      	mov	r3, r1
 8018002:	a803      	add	r0, sp, #12
 8018004:	4926      	ldr	r1, [pc, #152]	; (80180a0 <GUI_Text_EbEr_Measure+0x304>)
 8018006:	f00a fb83 	bl	8022710 <sprintf>
 801800a:	2304      	movs	r3, #4
			dec *= 10;
 801800c:	220a      	movs	r2, #10
		if((ValueER/(dec)) >= 1.0)
 801800e:	ee07 9a90 	vmov	s15, r9
 8018012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8018016:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801801a:	eef4 7ac9 	vcmpe.f32	s15, s18
 801801e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018022:	db07      	blt.n	8018034 <GUI_Text_EbEr_Measure+0x298>
			delta_pos-=23;
 8018024:	3e17      	subs	r6, #23
			number++;
 8018026:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 801802a:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 801802e:	b2f6      	uxtb	r6, r6
			number++;
 8018030:	fa5f f888 	uxtb.w	r8, r8
 8018034:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 8018036:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801803a:	d1e8      	bne.n	801800e <GUI_Text_EbEr_Measure+0x272>
	if(number < old_num_ER )
 801803c:	4f1a      	ldr	r7, [pc, #104]	; (80180a8 <GUI_Text_EbEr_Measure+0x30c>)
 801803e:	783b      	ldrb	r3, [r7, #0]
 8018040:	4543      	cmp	r3, r8
 8018042:	d911      	bls.n	8018068 <GUI_Text_EbEr_Measure+0x2cc>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8018044:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8018048:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801804c:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8018050:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018054:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8018058:	f8cd e000 	str.w	lr, [sp]
 801805c:	b29b      	uxth	r3, r3
 801805e:	b292      	uxth	r2, r2
 8018060:	b289      	uxth	r1, r1
 8018062:	b280      	uxth	r0, r0
 8018064:	f006 fd14 	bl	801ea90 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8018068:	f104 0123 	add.w	r1, r4, #35	; 0x23
 801806c:	19a8      	adds	r0, r5, r6
 801806e:	2303      	movs	r3, #3
 8018070:	aa03      	add	r2, sp, #12
 8018072:	b289      	uxth	r1, r1
 8018074:	b280      	uxth	r0, r0
	old_num_ER = number;
 8018076:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 801807a:	f007 f919 	bl	801f2b0 <TFT_DisplayString>
 801807e:	e6ef      	b.n	8017e60 <GUI_Text_EbEr_Measure+0xc4>
 8018080:	2000022a 	.word	0x2000022a
 8018084:	200052ac 	.word	0x200052ac
 8018088:	20005279 	.word	0x20005279
 801808c:	200001f0 	.word	0x200001f0
 8018090:	200001b0 	.word	0x200001b0
 8018094:	200001e8 	.word	0x200001e8
 8018098:	42c80000 	.word	0x42c80000
 801809c:	40590000 	.word	0x40590000
 80180a0:	08034173 	.word	0x08034173
 80180a4:	2000023e 	.word	0x2000023e
 80180a8:	2000023f 	.word	0x2000023f

080180ac <GUI_Text_LbLr_Measure>:
uint8_t old_num_LB = 10, old_num_LR = 10, old_nan_LBLR = 0;
void GUI_Text_LbLr_Measure(uint16_t X, uint16_t Y, float ValueLB, float ValueLR, uint8_t nope, uint8_t grey)
{
 80180ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b0:	ed2d 8b04 	vpush	{d8-d9}
 80180b4:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80180b6:	4bb8      	ldr	r3, [pc, #736]	; (8018398 <GUI_Text_LbLr_Measure+0x2ec>)
 80180b8:	4eb8      	ldr	r6, [pc, #736]	; (801839c <GUI_Text_LbLr_Measure+0x2f0>)
{
 80180ba:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80180bc:	781a      	ldrb	r2, [r3, #0]
 80180be:	4bb8      	ldr	r3, [pc, #736]	; (80183a0 <GUI_Text_LbLr_Measure+0x2f4>)
 80180c0:	781b      	ldrb	r3, [r3, #0]
 80180c2:	429a      	cmp	r2, r3
{
 80180c4:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80180c6:	bf1c      	itt	ne
 80180c8:	2300      	movne	r3, #0
 80180ca:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80180cc:	2300      	movs	r3, #0
 80180ce:	9303      	str	r3, [sp, #12]
 80180d0:	9304      	str	r3, [sp, #16]
 80180d2:	f88d 3014 	strb.w	r3, [sp, #20]
{
 80180d6:	4605      	mov	r5, r0
 80180d8:	460c      	mov	r4, r1
 80180da:	eef0 8a40 	vmov.f32	s17, s0
 80180de:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	if(nope) 
		{	
			if(!old_nan_LBLR){
 80180e2:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 80180e4:	f1b8 0f00 	cmp.w	r8, #0
 80180e8:	d072      	beq.n	80181d0 <GUI_Text_LbLr_Measure+0x124>
			if(!old_nan_LBLR){
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d140      	bne.n	8018170 <GUI_Text_LbLr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 80180ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80180f2:	f006 ff77 	bl	801efe4 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80180f6:	2063      	movs	r0, #99	; 0x63
 80180f8:	f006 ff7a 	bl	801eff0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80180fc:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8018100:	48a8      	ldr	r0, [pc, #672]	; (80183a4 <GUI_Text_LbLr_Measure+0x2f8>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8018102:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 8018106:	f006 ff67 	bl	801efd8 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801810a:	b2bf      	uxth	r7, r7
 801810c:	fa1f f989 	uxth.w	r9, r9
 8018110:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8018114:	f104 031a 	add.w	r3, r4, #26
 8018118:	4638      	mov	r0, r7
 801811a:	b29b      	uxth	r3, r3
 801811c:	464a      	mov	r2, r9
 801811e:	4621      	mov	r1, r4
 8018120:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8018124:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8018128:	f006 fcb2 	bl	801ea90 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801812c:	fa1f f888 	uxth.w	r8, r8
 8018130:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8018134:	4638      	mov	r0, r7
 8018136:	b29b      	uxth	r3, r3
 8018138:	464a      	mov	r2, r9
 801813a:	4641      	mov	r1, r8
 801813c:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8018140:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8018144:	f006 fca4 	bl	801ea90 <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8018148:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 801814a:	232d      	movs	r3, #45	; 0x2d
 801814c:	f88d 300c 	strb.w	r3, [sp, #12]
 8018150:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8018154:	aa03      	add	r2, sp, #12
 8018156:	2303      	movs	r3, #3
 8018158:	4621      	mov	r1, r4
 801815a:	4638      	mov	r0, r7
 801815c:	f007 f8a8 	bl	801f2b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8018160:	2303      	movs	r3, #3
 8018162:	aa03      	add	r2, sp, #12
 8018164:	4641      	mov	r1, r8
 8018166:	4638      	mov	r0, r7
 8018168:	f007 f8a2 	bl	801f2b0 <TFT_DisplayString>
				old_nan_LBLR = 1;
 801816c:	2301      	movs	r3, #1
 801816e:	7033      	strb	r3, [r6, #0]
	old_num_LR = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetFont(&Font26EN_arch_digit);
 8018170:	488c      	ldr	r0, [pc, #560]	; (80183a4 <GUI_Text_LbLr_Measure+0x2f8>)
 8018172:	f006 ff31 	bl	801efd8 <TFT_SetFont>

	TFT_SetTextColor(TFT_White);
 8018176:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801817a:	f006 ff33 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 801817e:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8018182:	4889      	ldr	r0, [pc, #548]	; (80183a8 <GUI_Text_LbLr_Measure+0x2fc>)
 8018184:	f006 ff28 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8018188:	b2b6      	uxth	r6, r6
 801818a:	f104 010c 	add.w	r1, r4, #12
 801818e:	4630      	mov	r0, r6
 8018190:	2242      	movs	r2, #66	; 0x42
 8018192:	b289      	uxth	r1, r1
 8018194:	f007 f816 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8018198:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 801819c:	2252      	movs	r2, #82	; 0x52
 801819e:	b289      	uxth	r1, r1
 80181a0:	4630      	mov	r0, r6
 80181a2:	f007 f80f 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 80181a6:	4881      	ldr	r0, [pc, #516]	; (80183ac <GUI_Text_LbLr_Measure+0x300>)
 80181a8:	f006 ff16 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 80181ac:	1ca1      	adds	r1, r4, #2
 80181ae:	4628      	mov	r0, r5
 80181b0:	222b      	movs	r2, #43	; 0x2b
 80181b2:	b289      	uxth	r1, r1
 80181b4:	f007 f806 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'L'-33);
 80181b8:	f104 0125 	add.w	r1, r4, #37	; 0x25
 80181bc:	222b      	movs	r2, #43	; 0x2b
 80181be:	b289      	uxth	r1, r1
 80181c0:	4628      	mov	r0, r5
 80181c2:	f006 ffff 	bl	801f1c4 <TFT_DrawChar>
}
 80181c6:	b007      	add	sp, #28
 80181c8:	ecbd 8b04 	vpop	{d8-d9}
 80181cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(old_nan_LBLR){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80181d0:	b1eb      	cbz	r3, 801820e <GUI_Text_LbLr_Measure+0x162>
 80181d2:	f100 0728 	add.w	r7, r0, #40	; 0x28
 80181d6:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 80181da:	f101 031a 	add.w	r3, r1, #26
 80181de:	b2bf      	uxth	r7, r7
 80181e0:	fa1f f989 	uxth.w	r9, r9
 80181e4:	f04f 0b63 	mov.w	fp, #99	; 0x63
 80181e8:	b29b      	uxth	r3, r3
 80181ea:	464a      	mov	r2, r9
 80181ec:	4638      	mov	r0, r7
 80181ee:	f8cd b000 	str.w	fp, [sp]
 80181f2:	f006 fc4d 	bl	801ea90 <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 80181f6:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 80181fa:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80181fe:	f8cd b000 	str.w	fp, [sp]
 8018202:	b29b      	uxth	r3, r3
 8018204:	464a      	mov	r2, r9
 8018206:	b289      	uxth	r1, r1
 8018208:	4638      	mov	r0, r7
 801820a:	f006 fc41 	bl	801ea90 <TFT_FillRectangle>
	ValueLB = floor(ValueLB*100)/100.0;
 801820e:	ed9f 8a68 	vldr	s16, [pc, #416]	; 80183b0 <GUI_Text_LbLr_Measure+0x304>
 8018212:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_LBLR = 0;
 8018216:	2700      	movs	r7, #0
	ValueLB = floor(ValueLB*100)/100.0;
 8018218:	ee17 0a90 	vmov	r0, s15
	old_nan_LBLR = 0;
 801821c:	7037      	strb	r7, [r6, #0]
	ValueLB = floor(ValueLB*100)/100.0;
 801821e:	f7e8 f9ab 	bl	8000578 <__aeabi_f2d>
 8018222:	ec41 0b10 	vmov	d0, r0, r1
 8018226:	f00d fa1f 	bl	8025668 <floor>
 801822a:	2200      	movs	r2, #0
 801822c:	4b61      	ldr	r3, [pc, #388]	; (80183b4 <GUI_Text_LbLr_Measure+0x308>)
 801822e:	ec51 0b10 	vmov	r0, r1, d0
 8018232:	f7e8 fb1f 	bl	8000874 <__aeabi_ddiv>
 8018236:	f7e8 fceb 	bl	8000c10 <__aeabi_d2f>
	ValueLR = floor(ValueLR*100)/100.0;
 801823a:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueLB = floor(ValueLB*100)/100.0;
 801823e:	ee08 0a90 	vmov	s17, r0
	ValueLR = floor(ValueLR*100)/100.0;
 8018242:	ee17 0a90 	vmov	r0, s15
 8018246:	f7e8 f997 	bl	8000578 <__aeabi_f2d>
 801824a:	ec41 0b10 	vmov	d0, r0, r1
 801824e:	f00d fa0b 	bl	8025668 <floor>
 8018252:	2200      	movs	r2, #0
 8018254:	ec51 0b10 	vmov	r0, r1, d0
 8018258:	4b56      	ldr	r3, [pc, #344]	; (80183b4 <GUI_Text_LbLr_Measure+0x308>)
 801825a:	f7e8 fb0b 	bl	8000874 <__aeabi_ddiv>
 801825e:	f7e8 fcd7 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8018262:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueLR = floor(ValueLR*100)/100.0;
 8018266:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801826a:	f249 40d2 	movw	r0, #38098	; 0x94d2
 801826e:	45ba      	cmp	sl, r7
 8018270:	bf08      	it	eq
 8018272:	4618      	moveq	r0, r3
 8018274:	f006 feb6 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018278:	2063      	movs	r0, #99	; 0x63
 801827a:	f006 feb9 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801827e:	4849      	ldr	r0, [pc, #292]	; (80183a4 <GUI_Text_LbLr_Measure+0x2f8>)
 8018280:	f006 feaa 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueLB);
 8018284:	ee18 0a90 	vmov	r0, s17
 8018288:	f7e8 f976 	bl	8000578 <__aeabi_f2d>
 801828c:	4602      	mov	r2, r0
 801828e:	460b      	mov	r3, r1
 8018290:	a803      	add	r0, sp, #12
 8018292:	4949      	ldr	r1, [pc, #292]	; (80183b8 <GUI_Text_LbLr_Measure+0x30c>)
 8018294:	f00a fa3c 	bl	8022710 <sprintf>
	uint32_t dec = 10;
 8018298:	f04f 090a 	mov.w	r9, #10
		if((ValueLB/(dec)) >= 1.0)
 801829c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueLB);
 80182a0:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 80182a2:	2696      	movs	r6, #150	; 0x96
 80182a4:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 80182a8:	464a      	mov	r2, r9
		if((ValueLB/(dec)) >= 1.0)
 80182aa:	ee07 9a10 	vmov	s14, r9
 80182ae:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80182b2:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 80182b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80182ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182be:	db05      	blt.n	80182cc <GUI_Text_LbLr_Measure+0x220>
			delta_pos-=23;
 80182c0:	3e17      	subs	r6, #23
			number++;
 80182c2:	3701      	adds	r7, #1
			dec *= 10;
 80182c4:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 80182c8:	b2f6      	uxtb	r6, r6
			number++;
 80182ca:	b2ff      	uxtb	r7, r7
 80182cc:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80182ce:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80182d2:	d1ea      	bne.n	80182aa <GUI_Text_LbLr_Measure+0x1fe>
	if(number < old_num_LB )
 80182d4:	4b39      	ldr	r3, [pc, #228]	; (80183bc <GUI_Text_LbLr_Measure+0x310>)
 80182d6:	781a      	ldrb	r2, [r3, #0]
 80182d8:	42ba      	cmp	r2, r7
 80182da:	469a      	mov	sl, r3
 80182dc:	d90d      	bls.n	80182fa <GUI_Text_LbLr_Measure+0x24e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80182de:	2163      	movs	r1, #99	; 0x63
 80182e0:	f104 0319 	add.w	r3, r4, #25
 80182e4:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80182e8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80182ec:	9100      	str	r1, [sp, #0]
 80182ee:	b29b      	uxth	r3, r3
 80182f0:	b292      	uxth	r2, r2
 80182f2:	4621      	mov	r1, r4
 80182f4:	b280      	uxth	r0, r0
 80182f6:	f006 fbcb 	bl	801ea90 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80182fa:	19a8      	adds	r0, r5, r6
 80182fc:	2303      	movs	r3, #3
 80182fe:	aa03      	add	r2, sp, #12
 8018300:	4621      	mov	r1, r4
 8018302:	b280      	uxth	r0, r0
	old_num_LB = number;
 8018304:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8018308:	f006 ffd2 	bl	801f2b0 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueLR);
 801830c:	ee18 0a10 	vmov	r0, s16
 8018310:	f7e8 f932 	bl	8000578 <__aeabi_f2d>
 8018314:	4602      	mov	r2, r0
 8018316:	460b      	mov	r3, r1
 8018318:	a803      	add	r0, sp, #12
 801831a:	4927      	ldr	r1, [pc, #156]	; (80183b8 <GUI_Text_LbLr_Measure+0x30c>)
 801831c:	f00a f9f8 	bl	8022710 <sprintf>
 8018320:	2304      	movs	r3, #4
			dec *= 10;
 8018322:	220a      	movs	r2, #10
		if((ValueLR/(dec)) >= 1.0)
 8018324:	ee07 9a90 	vmov	s15, r9
 8018328:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801832c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8018330:	eef4 7ac9 	vcmpe.f32	s15, s18
 8018334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018338:	db07      	blt.n	801834a <GUI_Text_LbLr_Measure+0x29e>
			delta_pos-=23;
 801833a:	3e17      	subs	r6, #23
			number++;
 801833c:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8018340:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8018344:	b2f6      	uxtb	r6, r6
			number++;
 8018346:	fa5f f888 	uxtb.w	r8, r8
 801834a:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 801834c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8018350:	d1e8      	bne.n	8018324 <GUI_Text_LbLr_Measure+0x278>
	if(number < old_num_LR )
 8018352:	4f1b      	ldr	r7, [pc, #108]	; (80183c0 <GUI_Text_LbLr_Measure+0x314>)
 8018354:	783b      	ldrb	r3, [r7, #0]
 8018356:	4543      	cmp	r3, r8
 8018358:	d911      	bls.n	801837e <GUI_Text_LbLr_Measure+0x2d2>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 801835a:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801835e:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8018362:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8018366:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801836a:	f04f 0e63 	mov.w	lr, #99	; 0x63
 801836e:	f8cd e000 	str.w	lr, [sp]
 8018372:	b29b      	uxth	r3, r3
 8018374:	b292      	uxth	r2, r2
 8018376:	b289      	uxth	r1, r1
 8018378:	b280      	uxth	r0, r0
 801837a:	f006 fb89 	bl	801ea90 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 801837e:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8018382:	19a8      	adds	r0, r5, r6
 8018384:	2303      	movs	r3, #3
 8018386:	aa03      	add	r2, sp, #12
 8018388:	b289      	uxth	r1, r1
 801838a:	b280      	uxth	r0, r0
	old_num_LR = number;
 801838c:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8018390:	f006 ff8e 	bl	801f2b0 <TFT_DisplayString>
 8018394:	e6ec      	b.n	8018170 <GUI_Text_LbLr_Measure+0xc4>
 8018396:	bf00      	nop
 8018398:	2000022a 	.word	0x2000022a
 801839c:	200052af 	.word	0x200052af
 80183a0:	20005279 	.word	0x20005279
 80183a4:	200001f0 	.word	0x200001f0
 80183a8:	200001b0 	.word	0x200001b0
 80183ac:	200001e8 	.word	0x200001e8
 80183b0:	42c80000 	.word	0x42c80000
 80183b4:	40590000 	.word	0x40590000
 80183b8:	08034173 	.word	0x08034173
 80183bc:	20000241 	.word	0x20000241
 80183c0:	20000242 	.word	0x20000242

080183c4 <GUI_Text_S_P_Measure>:

uint8_t old_num_SP = 10, old_nan_SP = 0;
void GUI_Text_S_P_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{
 80183c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183c8:	ed2d 8b02 	vpush	{d8}
 80183cc:	4616      	mov	r6, r2
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 80183ce:	4a59      	ldr	r2, [pc, #356]	; (8018534 <GUI_Text_S_P_Measure+0x170>)
 80183d0:	4f59      	ldr	r7, [pc, #356]	; (8018538 <GUI_Text_S_P_Measure+0x174>)
{
 80183d2:	460c      	mov	r4, r1
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 80183d4:	7811      	ldrb	r1, [r2, #0]
 80183d6:	4a59      	ldr	r2, [pc, #356]	; (801853c <GUI_Text_S_P_Measure+0x178>)
 80183d8:	7812      	ldrb	r2, [r2, #0]
 80183da:	4291      	cmp	r1, r2
{
 80183dc:	b086      	sub	sp, #24
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 80183de:	bf1c      	itt	ne
 80183e0:	2200      	movne	r2, #0
 80183e2:	703a      	strbne	r2, [r7, #0]
	char buffer[9] = {0};
 80183e4:	2200      	movs	r2, #0
{
 80183e6:	4605      	mov	r5, r0
 80183e8:	eeb0 8a40 	vmov.f32	s16, s0
	char buffer[9] = {0};
 80183ec:	9203      	str	r2, [sp, #12]
 80183ee:	9204      	str	r2, [sp, #16]
 80183f0:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 100, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 80183f4:	2e00      	cmp	r6, #0
 80183f6:	d04c      	beq.n	8018492 <GUI_Text_S_P_Measure+0xce>
		{	
			if(!old_nan_SP){
 80183f8:	783b      	ldrb	r3, [r7, #0]
 80183fa:	bb33      	cbnz	r3, 801844a <GUI_Text_S_P_Measure+0x86>
				TFT_SetTextColor(TFT_White);
 80183fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018400:	f006 fdf0 	bl	801efe4 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8018404:	2063      	movs	r0, #99	; 0x63
 8018406:	f006 fdf3 	bl	801eff0 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 801840a:	484d      	ldr	r0, [pc, #308]	; (8018540 <GUI_Text_S_P_Measure+0x17c>)
 801840c:	f006 fde4 	bl	801efd8 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8018410:	2163      	movs	r1, #99	; 0x63
 8018412:	f104 031a 	add.w	r3, r4, #26
 8018416:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 801841a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801841e:	9100      	str	r1, [sp, #0]
 8018420:	b29b      	uxth	r3, r3
 8018422:	b292      	uxth	r2, r2
 8018424:	4621      	mov	r1, r4
 8018426:	b280      	uxth	r0, r0
 8018428:	f006 fb32 	bl	801ea90 <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 801842c:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801842e:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8018432:	f88d 300c 	strb.w	r3, [sp, #12]
 8018436:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801843a:	aa03      	add	r2, sp, #12
 801843c:	2303      	movs	r3, #3
 801843e:	4621      	mov	r1, r4
 8018440:	b280      	uxth	r0, r0
 8018442:	f006 ff35 	bl	801f2b0 <TFT_DisplayString>
				old_nan_SP = 1;
 8018446:	2301      	movs	r3, #1
 8018448:	703b      	strb	r3, [r7, #0]
	} 
	old_num_SP = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}	
	TFT_SetTextColor(TFT_White);
 801844a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801844e:	f006 fdc9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetFont(&Font26EN_arch_digit);
	TFT_DrawChar(X+22, Y+2, '/');
 8018452:	3402      	adds	r4, #2
	TFT_SetFont(&Font26EN_arch_digit);
 8018454:	483a      	ldr	r0, [pc, #232]	; (8018540 <GUI_Text_S_P_Measure+0x17c>)
 8018456:	f006 fdbf 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+22, Y+2, '/');
 801845a:	b2a4      	uxth	r4, r4
 801845c:	f105 0016 	add.w	r0, r5, #22
 8018460:	4621      	mov	r1, r4
 8018462:	222f      	movs	r2, #47	; 0x2f
 8018464:	b280      	uxth	r0, r0
 8018466:	f006 fead 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 801846a:	4836      	ldr	r0, [pc, #216]	; (8018544 <GUI_Text_S_P_Measure+0x180>)
 801846c:	f006 fdb4 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'S'-33);
 8018470:	4621      	mov	r1, r4
 8018472:	4628      	mov	r0, r5
 8018474:	2232      	movs	r2, #50	; 0x32
 8018476:	f006 fea5 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'P'-33);
 801847a:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 801847e:	222f      	movs	r2, #47	; 0x2f
 8018480:	4621      	mov	r1, r4
 8018482:	b280      	uxth	r0, r0
 8018484:	f006 fe9e 	bl	801f1c4 <TFT_DrawChar>
}
 8018488:	b006      	add	sp, #24
 801848a:	ecbd 8b02 	vpop	{d8}
 801848e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8018492:	f249 41d2 	movw	r1, #38098	; 0x94d2
 8018496:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801849a:	2b00      	cmp	r3, #0
 801849c:	bf18      	it	ne
 801849e:	4608      	movne	r0, r1
	old_nan_SP = 0;
 80184a0:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80184a2:	f006 fd9f 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80184a6:	2063      	movs	r0, #99	; 0x63
 80184a8:	f006 fda2 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80184ac:	4824      	ldr	r0, [pc, #144]	; (8018540 <GUI_Text_S_P_Measure+0x17c>)
 80184ae:	f006 fd93 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%.4f", Value);
 80184b2:	ee18 0a10 	vmov	r0, s16
 80184b6:	f7e8 f85f 	bl	8000578 <__aeabi_f2d>
 80184ba:	4602      	mov	r2, r0
 80184bc:	460b      	mov	r3, r1
 80184be:	a803      	add	r0, sp, #12
 80184c0:	4921      	ldr	r1, [pc, #132]	; (8018548 <GUI_Text_S_P_Measure+0x184>)
 80184c2:	f00a f925 	bl	8022710 <sprintf>
	uint32_t dec = 10;
 80184c6:	220a      	movs	r2, #10
	sprintf (buffer, "%.4f", Value);
 80184c8:	2304      	movs	r3, #4
	uint8_t	delta_pos = 100, number = 0;
 80184ca:	2764      	movs	r7, #100	; 0x64
		if((Value/(dec)) >= 1.0)
 80184cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80184d0:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80184d2:	ee07 2a10 	vmov	s14, r2
 80184d6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80184da:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80184de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80184e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184e6:	db04      	blt.n	80184f2 <GUI_Text_S_P_Measure+0x12e>
			delta_pos-=23;
 80184e8:	3f17      	subs	r7, #23
			number++;
 80184ea:	3601      	adds	r6, #1
			dec *= 10;
 80184ec:	434a      	muls	r2, r1
			delta_pos-=23;
 80184ee:	b2ff      	uxtb	r7, r7
			number++;
 80184f0:	b2f6      	uxtb	r6, r6
 80184f2:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80184f4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80184f8:	d1eb      	bne.n	80184d2 <GUI_Text_S_P_Measure+0x10e>
	if(number < old_num_SP )
 80184fa:	4b14      	ldr	r3, [pc, #80]	; (801854c <GUI_Text_S_P_Measure+0x188>)
 80184fc:	781a      	ldrb	r2, [r3, #0]
 80184fe:	42b2      	cmp	r2, r6
 8018500:	4698      	mov	r8, r3
 8018502:	d90d      	bls.n	8018520 <GUI_Text_S_P_Measure+0x15c>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8018504:	2163      	movs	r1, #99	; 0x63
 8018506:	f104 0319 	add.w	r3, r4, #25
 801850a:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801850e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018512:	9100      	str	r1, [sp, #0]
 8018514:	b29b      	uxth	r3, r3
 8018516:	b292      	uxth	r2, r2
 8018518:	4621      	mov	r1, r4
 801851a:	b280      	uxth	r0, r0
 801851c:	f006 fab8 	bl	801ea90 <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8018520:	19e8      	adds	r0, r5, r7
 8018522:	2303      	movs	r3, #3
 8018524:	aa03      	add	r2, sp, #12
 8018526:	4621      	mov	r1, r4
 8018528:	b280      	uxth	r0, r0
	old_num_SP = number;
 801852a:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801852e:	f006 febf 	bl	801f2b0 <TFT_DisplayString>
 8018532:	e78a      	b.n	801844a <GUI_Text_S_P_Measure+0x86>
 8018534:	2000022a 	.word	0x2000022a
 8018538:	200052b4 	.word	0x200052b4
 801853c:	20005279 	.word	0x20005279
 8018540:	200001f0 	.word	0x200001f0
 8018544:	200001e8 	.word	0x200001e8
 8018548:	08034178 	.word	0x08034178
 801854c:	20000243 	.word	0x20000243

08018550 <GUI_Text_LAB_Measure>:

uint8_t old_num_L = 10, old_num_A = 10, old_num_B = 10, old_nan = 0;
void GUI_Text_LAB_Measure(uint16_t X, uint16_t Y, int16_t ValueL, int16_t ValueA, int16_t ValueB, uint8_t nope, uint8_t grey)
{
 8018550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018554:	b089      	sub	sp, #36	; 0x24
 8018556:	461f      	mov	r7, r3
 8018558:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 801855c:	9304      	str	r3, [sp, #16]
 801855e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018562:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
	uint8_t	delta_pos = 180, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(ValueA <= -431 || nope){
 8018564:	f517 7fd7 	cmn.w	r7, #430	; 0x1ae
	char buffer[5] = {0};
 8018568:	f04f 0300 	mov.w	r3, #0
{
 801856c:	4604      	mov	r4, r0
 801856e:	460d      	mov	r5, r1
 8018570:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8018572:	9306      	str	r3, [sp, #24]
 8018574:	f88d 301c 	strb.w	r3, [sp, #28]
	if(ValueA <= -431 || nope){
 8018578:	db03      	blt.n	8018582 <GUI_Text_LAB_Measure+0x32>
 801857a:	9b03      	ldr	r3, [sp, #12]
 801857c:	2b00      	cmp	r3, #0
 801857e:	f000 80a9 	beq.w	80186d4 <GUI_Text_LAB_Measure+0x184>
		if(!old_nan){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8018582:	4b4e      	ldr	r3, [pc, #312]	; (80186bc <GUI_Text_LAB_Measure+0x16c>)
 8018584:	781a      	ldrb	r2, [r3, #0]
 8018586:	469a      	mov	sl, r3
 8018588:	b96a      	cbnz	r2, 80185a6 <GUI_Text_LAB_Measure+0x56>
 801858a:	2163      	movs	r1, #99	; 0x63
 801858c:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8018590:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8018594:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018598:	9100      	str	r1, [sp, #0]
 801859a:	b29b      	uxth	r3, r3
 801859c:	b292      	uxth	r2, r2
 801859e:	4629      	mov	r1, r5
 80185a0:	b280      	uxth	r0, r0
 80185a2:	f006 fa75 	bl	801ea90 <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 80185a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80185aa:	f006 fd1b 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80185ae:	f104 0987 	add.w	r9, r4, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 80185b2:	2063      	movs	r0, #99	; 0x63
 80185b4:	f006 fd1c 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80185b8:	fa1f f989 	uxth.w	r9, r9
 80185bc:	4840      	ldr	r0, [pc, #256]	; (80186c0 <GUI_Text_LAB_Measure+0x170>)
 80185be:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 80185c2:	f006 fd09 	bl	801efd8 <TFT_SetFont>
 80185c6:	fa1f f888 	uxth.w	r8, r8
 80185ca:	222d      	movs	r2, #45	; 0x2d
 80185cc:	4629      	mov	r1, r5
 80185ce:	4648      	mov	r0, r9
 80185d0:	f104 06b9 	add.w	r6, r4, #185	; 0xb9
 80185d4:	f006 fdf6 	bl	801f1c4 <TFT_DrawChar>
 80185d8:	b2b6      	uxth	r6, r6
 80185da:	2220      	movs	r2, #32
 80185dc:	4629      	mov	r1, r5
 80185de:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80185e0:	f105 0723 	add.w	r7, r5, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80185e4:	f006 fdee 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80185e8:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80185ea:	222d      	movs	r2, #45	; 0x2d
 80185ec:	4629      	mov	r1, r5
 80185ee:	4630      	mov	r0, r6
 80185f0:	f006 fde8 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80185f4:	4639      	mov	r1, r7
 80185f6:	222d      	movs	r2, #45	; 0x2d
 80185f8:	4648      	mov	r0, r9
 80185fa:	f006 fde3 	bl	801f1c4 <TFT_DrawChar>
 80185fe:	4639      	mov	r1, r7
 8018600:	2220      	movs	r2, #32
 8018602:	4640      	mov	r0, r8
 8018604:	f006 fdde 	bl	801f1c4 <TFT_DrawChar>
 8018608:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 801860a:	f105 0746 	add.w	r7, r5, #70	; 0x46
 801860e:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8018610:	222d      	movs	r2, #45	; 0x2d
 8018612:	4630      	mov	r0, r6
 8018614:	f006 fdd6 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8018618:	222d      	movs	r2, #45	; 0x2d
 801861a:	4639      	mov	r1, r7
 801861c:	4648      	mov	r0, r9
 801861e:	f006 fdd1 	bl	801f1c4 <TFT_DrawChar>
 8018622:	2220      	movs	r2, #32
 8018624:	4639      	mov	r1, r7
 8018626:	4640      	mov	r0, r8
 8018628:	f006 fdcc 	bl	801f1c4 <TFT_DrawChar>
 801862c:	222d      	movs	r2, #45	; 0x2d
 801862e:	4639      	mov	r1, r7
 8018630:	4630      	mov	r0, r6
 8018632:	f006 fdc7 	bl	801f1c4 <TFT_DrawChar>
		old_nan = 1;
 8018636:	2301      	movs	r3, #1
 8018638:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
		old_nan = 0;
	} 
	
	if(preGUI_screen_state != GUI_screen_state || GUI_screen_state == Color_Screen){
 801863c:	4b21      	ldr	r3, [pc, #132]	; (80186c4 <GUI_Text_LAB_Measure+0x174>)
 801863e:	781a      	ldrb	r2, [r3, #0]
 8018640:	4b21      	ldr	r3, [pc, #132]	; (80186c8 <GUI_Text_LAB_Measure+0x178>)
 8018642:	781b      	ldrb	r3, [r3, #0]
 8018644:	4293      	cmp	r3, r2
 8018646:	d101      	bne.n	801864c <GUI_Text_LAB_Measure+0xfc>
 8018648:	2b05      	cmp	r3, #5
 801864a:	d134      	bne.n	80186b6 <GUI_Text_LAB_Measure+0x166>
			TFT_SetTextColor(TFT_White);
 801864c:	f64f 70ff 	movw	r0, #65535	; 0xffff
			TFT_SetFont(&Font26EN_arch_digit);
			TFT_DrawChar(X+17, Y, '*');
 8018650:	f104 0611 	add.w	r6, r4, #17
			TFT_SetTextColor(TFT_White);
 8018654:	f006 fcc6 	bl	801efe4 <TFT_SetTextColor>
			TFT_DrawChar(X+17, Y, '*');
 8018658:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_digit);
 801865a:	481c      	ldr	r0, [pc, #112]	; (80186cc <GUI_Text_LAB_Measure+0x17c>)
			TFT_DrawChar(X+17, Y+35, '*');
 801865c:	f105 0823 	add.w	r8, r5, #35	; 0x23
			TFT_SetFont(&Font26EN_arch_digit);
 8018660:	f006 fcba 	bl	801efd8 <TFT_SetFont>
			TFT_DrawChar(X+17, Y+35, '*');
 8018664:	fa1f f888 	uxth.w	r8, r8
			TFT_DrawChar(X+17, Y, '*');
 8018668:	222a      	movs	r2, #42	; 0x2a
 801866a:	4629      	mov	r1, r5
 801866c:	4630      	mov	r0, r6
			TFT_DrawChar(X+17, Y+70, '*');
 801866e:	f105 0746 	add.w	r7, r5, #70	; 0x46
			TFT_DrawChar(X+17, Y, '*');
 8018672:	f006 fda7 	bl	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8018676:	b2bf      	uxth	r7, r7
			TFT_DrawChar(X+17, Y+35, '*');
 8018678:	222a      	movs	r2, #42	; 0x2a
 801867a:	4641      	mov	r1, r8
 801867c:	4630      	mov	r0, r6
 801867e:	f006 fda1 	bl	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8018682:	222a      	movs	r2, #42	; 0x2a
 8018684:	4639      	mov	r1, r7
 8018686:	4630      	mov	r0, r6
 8018688:	f006 fd9c 	bl	801f1c4 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_big);
 801868c:	480c      	ldr	r0, [pc, #48]	; (80186c0 <GUI_Text_LAB_Measure+0x170>)
 801868e:	f006 fca3 	bl	801efd8 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'L'-33);
 8018692:	222b      	movs	r2, #43	; 0x2b
 8018694:	4629      	mov	r1, r5
 8018696:	4620      	mov	r0, r4
 8018698:	f006 fd94 	bl	801f1c4 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_small);
 801869c:	480c      	ldr	r0, [pc, #48]	; (80186d0 <GUI_Text_LAB_Measure+0x180>)
 801869e:	f006 fc9b 	bl	801efd8 <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'a'-65);
 80186a2:	2220      	movs	r2, #32
 80186a4:	4641      	mov	r1, r8
 80186a6:	4620      	mov	r0, r4
 80186a8:	f006 fd8c 	bl	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'b'-65);}
 80186ac:	2221      	movs	r2, #33	; 0x21
 80186ae:	4639      	mov	r1, r7
 80186b0:	4620      	mov	r0, r4
 80186b2:	f006 fd87 	bl	801f1c4 <TFT_DrawChar>
}	
 80186b6:	b009      	add	sp, #36	; 0x24
 80186b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186bc:	200052a9 	.word	0x200052a9
 80186c0:	200001e8 	.word	0x200001e8
 80186c4:	2000022a 	.word	0x2000022a
 80186c8:	20005279 	.word	0x20005279
 80186cc:	200001f0 	.word	0x200001f0
 80186d0:	200001f8 	.word	0x200001f8
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80186d4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80186d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186dc:	f249 42d2 	movw	r2, #38098	; 0x94d2
 80186e0:	2800      	cmp	r0, #0
 80186e2:	bf14      	ite	ne
 80186e4:	4610      	movne	r0, r2
 80186e6:	4618      	moveq	r0, r3
 80186e8:	f006 fc7c 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80186ec:	2063      	movs	r0, #99	; 0x63
 80186ee:	f006 fc7f 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80186f2:	488e      	ldr	r0, [pc, #568]	; (801892c <GUI_Text_LAB_Measure+0x3dc>)
 80186f4:	f006 fc70 	bl	801efd8 <TFT_SetFont>
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 80186f8:	f1b8 0f00 	cmp.w	r8, #0
 80186fc:	bfbd      	ittte	lt
 80186fe:	f1c8 0800 	rsblt	r8, r8, #0
 8018702:	fa0f f888 	sxthlt.w	r8, r8
 8018706:	2301      	movlt	r3, #1
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8018708:	9b03      	ldrge	r3, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 801870a:	4989      	ldr	r1, [pc, #548]	; (8018930 <GUI_Text_LAB_Measure+0x3e0>)
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 801870c:	9305      	str	r3, [sp, #20]
	sprintf (buffer, "%d", ValueL);
 801870e:	4642      	mov	r2, r8
 8018710:	a806      	add	r0, sp, #24
 8018712:	f009 fffd 	bl	8022710 <sprintf>
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8018716:	f04f 0900 	mov.w	r9, #0
	sprintf (buffer, "%d", ValueL);
 801871a:	f04f 0b04 	mov.w	fp, #4
	uint32_t dec = 10;
 801871e:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8018722:	26b4      	movs	r6, #180	; 0xb4
		if((ValueL/(dec)) >= 1.0)
 8018724:	fbb8 f0fa 	udiv	r0, r8, sl
 8018728:	f7e7 ff04 	bl	8000534 <__aeabi_ui2d>
 801872c:	2200      	movs	r2, #0
 801872e:	4b81      	ldr	r3, [pc, #516]	; (8018934 <GUI_Text_LAB_Measure+0x3e4>)
 8018730:	f7e8 f9fc 	bl	8000b2c <__aeabi_dcmpge>
 8018734:	b140      	cbz	r0, 8018748 <GUI_Text_LAB_Measure+0x1f8>
			dec *= 10;
 8018736:	230a      	movs	r3, #10
			delta_pos-=23;
 8018738:	3e17      	subs	r6, #23
			number++;
 801873a:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 801873e:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8018742:	b2f6      	uxtb	r6, r6
			number++;
 8018744:	fa5f f989 	uxtb.w	r9, r9
 8018748:	f10b 3bff 	add.w	fp, fp, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 801874c:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 8018750:	d1e8      	bne.n	8018724 <GUI_Text_LAB_Measure+0x1d4>
	if(number < old_num_L || old_nan == 1 )
 8018752:	4b79      	ldr	r3, [pc, #484]	; (8018938 <GUI_Text_LAB_Measure+0x3e8>)
 8018754:	781a      	ldrb	r2, [r3, #0]
 8018756:	454a      	cmp	r2, r9
 8018758:	4698      	mov	r8, r3
 801875a:	d803      	bhi.n	8018764 <GUI_Text_LAB_Measure+0x214>
 801875c:	4b77      	ldr	r3, [pc, #476]	; (801893c <GUI_Text_LAB_Measure+0x3ec>)
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	2b01      	cmp	r3, #1
 8018762:	d10d      	bne.n	8018780 <GUI_Text_LAB_Measure+0x230>
		TFT_FillRectangle(X+40, Y, X+250, Y+25, TFT_Black_Bkgr);
 8018764:	2163      	movs	r1, #99	; 0x63
 8018766:	f105 0319 	add.w	r3, r5, #25
 801876a:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801876e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018772:	9100      	str	r1, [sp, #0]
 8018774:	b29b      	uxth	r3, r3
 8018776:	b292      	uxth	r2, r2
 8018778:	4629      	mov	r1, r5
 801877a:	b280      	uxth	r0, r0
 801877c:	f006 f988 	bl	801ea90 <TFT_FillRectangle>
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8018780:	9b05      	ldr	r3, [sp, #20]
	old_num_L = number;
 8018782:	f888 9000 	strb.w	r9, [r8]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8018786:	b13b      	cbz	r3, 8018798 <GUI_Text_LAB_Measure+0x248>
 8018788:	f1a4 0012 	sub.w	r0, r4, #18
 801878c:	4430      	add	r0, r6
 801878e:	222d      	movs	r2, #45	; 0x2d
 8018790:	4629      	mov	r1, r5
 8018792:	b280      	uxth	r0, r0
 8018794:	f006 fd16 	bl	801f1c4 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8018798:	19a0      	adds	r0, r4, r6
 801879a:	2303      	movs	r3, #3
 801879c:	aa06      	add	r2, sp, #24
 801879e:	4629      	mov	r1, r5
 80187a0:	b280      	uxth	r0, r0
 80187a2:	f006 fd85 	bl	801f2b0 <TFT_DisplayString>
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 80187a6:	2f00      	cmp	r7, #0
 80187a8:	bfbc      	itt	lt
 80187aa:	427f      	neglt	r7, r7
 80187ac:	b23f      	sxthlt	r7, r7
	TFT_SetFont(&Font26EN_arch_digit);
 80187ae:	485f      	ldr	r0, [pc, #380]	; (801892c <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 80187b0:	bfb4      	ite	lt
 80187b2:	f04f 0b01 	movlt.w	fp, #1
 80187b6:	f04f 0b00 	movge.w	fp, #0
	TFT_SetFont(&Font26EN_arch_digit);
 80187ba:	f006 fc0d 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%d", ValueA);
 80187be:	463a      	mov	r2, r7
 80187c0:	495b      	ldr	r1, [pc, #364]	; (8018930 <GUI_Text_LAB_Measure+0x3e0>)
 80187c2:	a806      	add	r0, sp, #24
 80187c4:	f009 ffa4 	bl	8022710 <sprintf>
	number = 0;
 80187c8:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueA);
 80187cc:	f04f 0904 	mov.w	r9, #4
	dec = 10;
 80187d0:	f04f 0a0a 	mov.w	sl, #10
	delta_pos = 180;
 80187d4:	26b4      	movs	r6, #180	; 0xb4
		if((ValueA/(dec)) >= 1.0)
 80187d6:	fbb7 f0fa 	udiv	r0, r7, sl
 80187da:	f7e7 feab 	bl	8000534 <__aeabi_ui2d>
 80187de:	2200      	movs	r2, #0
 80187e0:	4b54      	ldr	r3, [pc, #336]	; (8018934 <GUI_Text_LAB_Measure+0x3e4>)
 80187e2:	f7e8 f9a3 	bl	8000b2c <__aeabi_dcmpge>
 80187e6:	b140      	cbz	r0, 80187fa <GUI_Text_LAB_Measure+0x2aa>
			dec *= 10;
 80187e8:	230a      	movs	r3, #10
			delta_pos-=23;
 80187ea:	3e17      	subs	r6, #23
			number++;
 80187ec:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80187f0:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80187f4:	b2f6      	uxtb	r6, r6
			number++;
 80187f6:	fa5f f888 	uxtb.w	r8, r8
 80187fa:	f109 39ff 	add.w	r9, r9, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 80187fe:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8018802:	d1e8      	bne.n	80187d6 <GUI_Text_LAB_Measure+0x286>
	if(number < old_num_A || old_nan == 1 )
 8018804:	4b4e      	ldr	r3, [pc, #312]	; (8018940 <GUI_Text_LAB_Measure+0x3f0>)
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	4543      	cmp	r3, r8
 801880a:	f105 0723 	add.w	r7, r5, #35	; 0x23
 801880e:	d803      	bhi.n	8018818 <GUI_Text_LAB_Measure+0x2c8>
 8018810:	4b4a      	ldr	r3, [pc, #296]	; (801893c <GUI_Text_LAB_Measure+0x3ec>)
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	2b01      	cmp	r3, #1
 8018816:	d10d      	bne.n	8018834 <GUI_Text_LAB_Measure+0x2e4>
		TFT_FillRectangle(X+40, Y+35, X+250, Y+62, TFT_Black_Bkgr);
 8018818:	2163      	movs	r1, #99	; 0x63
 801881a:	f105 033e 	add.w	r3, r5, #62	; 0x3e
 801881e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8018822:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018826:	9100      	str	r1, [sp, #0]
 8018828:	b29b      	uxth	r3, r3
 801882a:	b292      	uxth	r2, r2
 801882c:	b2b9      	uxth	r1, r7
 801882e:	b280      	uxth	r0, r0
 8018830:	f006 f92e 	bl	801ea90 <TFT_FillRectangle>
	old_num_A = number;
 8018834:	4b42      	ldr	r3, [pc, #264]	; (8018940 <GUI_Text_LAB_Measure+0x3f0>)
 8018836:	f883 8000 	strb.w	r8, [r3]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 801883a:	f1bb 0f00 	cmp.w	fp, #0
 801883e:	d007      	beq.n	8018850 <GUI_Text_LAB_Measure+0x300>
 8018840:	f1a4 0012 	sub.w	r0, r4, #18
 8018844:	4430      	add	r0, r6
 8018846:	222d      	movs	r2, #45	; 0x2d
 8018848:	b2b9      	uxth	r1, r7
 801884a:	b280      	uxth	r0, r0
 801884c:	f006 fcba 	bl	801f1c4 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8018850:	19a0      	adds	r0, r4, r6
 8018852:	b2b9      	uxth	r1, r7
 8018854:	aa06      	add	r2, sp, #24
 8018856:	2303      	movs	r3, #3
 8018858:	b280      	uxth	r0, r0
 801885a:	f006 fd29 	bl	801f2b0 <TFT_DisplayString>
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 801885e:	9b04      	ldr	r3, [sp, #16]
	TFT_SetFont(&Font26EN_arch_digit);
 8018860:	4832      	ldr	r0, [pc, #200]	; (801892c <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8018862:	2b00      	cmp	r3, #0
 8018864:	bfbf      	itttt	lt
 8018866:	425b      	neglt	r3, r3
 8018868:	b21b      	sxthlt	r3, r3
 801886a:	9304      	strlt	r3, [sp, #16]
 801886c:	f04f 0901 	movlt.w	r9, #1
 8018870:	bfa8      	it	ge
 8018872:	f04f 0900 	movge.w	r9, #0
	TFT_SetFont(&Font26EN_arch_digit);
 8018876:	f006 fbaf 	bl	801efd8 <TFT_SetFont>
	sprintf (buffer, "%d", ValueB);
 801887a:	9a04      	ldr	r2, [sp, #16]
 801887c:	492c      	ldr	r1, [pc, #176]	; (8018930 <GUI_Text_LAB_Measure+0x3e0>)
 801887e:	a806      	add	r0, sp, #24
 8018880:	f009 ff46 	bl	8022710 <sprintf>
	 dec = 10;
 8018884:	f04f 080a 	mov.w	r8, #10
	sprintf (buffer, "%d", ValueB);
 8018888:	2704      	movs	r7, #4
		delta_pos = 180;
 801888a:	26b4      	movs	r6, #180	; 0xb4
			dec *= 10;
 801888c:	46c2      	mov	sl, r8
		if(abs((ValueB/(dec))) >= 1.0)
 801888e:	9b04      	ldr	r3, [sp, #16]
 8018890:	fbb3 f0f8 	udiv	r0, r3, r8
 8018894:	2800      	cmp	r0, #0
 8018896:	bfb8      	it	lt
 8018898:	4240      	neglt	r0, r0
 801889a:	f7e7 fe5b 	bl	8000554 <__aeabi_i2d>
 801889e:	2200      	movs	r2, #0
 80188a0:	4b24      	ldr	r3, [pc, #144]	; (8018934 <GUI_Text_LAB_Measure+0x3e4>)
 80188a2:	f7e8 f943 	bl	8000b2c <__aeabi_dcmpge>
 80188a6:	b138      	cbz	r0, 80188b8 <GUI_Text_LAB_Measure+0x368>
			number++;
 80188a8:	9b03      	ldr	r3, [sp, #12]
 80188aa:	3301      	adds	r3, #1
			delta_pos-=23;
 80188ac:	3e17      	subs	r6, #23
			number++;
 80188ae:	b2db      	uxtb	r3, r3
			dec *= 10;
 80188b0:	fb0a f808 	mul.w	r8, sl, r8
			delta_pos-=23;
 80188b4:	b2f6      	uxtb	r6, r6
			number++;
 80188b6:	9303      	str	r3, [sp, #12]
 80188b8:	3f01      	subs	r7, #1
	for (uint8_t i = 1; i <= 4; i++)
 80188ba:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80188be:	d1e6      	bne.n	801888e <GUI_Text_LAB_Measure+0x33e>
	if(number < old_num_B || old_nan == 1)
 80188c0:	4b20      	ldr	r3, [pc, #128]	; (8018944 <GUI_Text_LAB_Measure+0x3f4>)
 80188c2:	9903      	ldr	r1, [sp, #12]
 80188c4:	781a      	ldrb	r2, [r3, #0]
 80188c6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801893c <GUI_Text_LAB_Measure+0x3ec>
 80188ca:	428a      	cmp	r2, r1
 80188cc:	f105 0746 	add.w	r7, r5, #70	; 0x46
 80188d0:	469a      	mov	sl, r3
 80188d2:	d803      	bhi.n	80188dc <GUI_Text_LAB_Measure+0x38c>
 80188d4:	f898 3000 	ldrb.w	r3, [r8]
 80188d8:	2b01      	cmp	r3, #1
 80188da:	d10d      	bne.n	80188f8 <GUI_Text_LAB_Measure+0x3a8>
		TFT_FillRectangle(X+40, Y+70, X+250, Y+95, TFT_Black_Bkgr);
 80188dc:	2163      	movs	r1, #99	; 0x63
 80188de:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 80188e2:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80188e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80188ea:	9100      	str	r1, [sp, #0]
 80188ec:	b29b      	uxth	r3, r3
 80188ee:	b292      	uxth	r2, r2
 80188f0:	b2b9      	uxth	r1, r7
 80188f2:	b280      	uxth	r0, r0
 80188f4:	f006 f8cc 	bl	801ea90 <TFT_FillRectangle>
	old_num_B = number;
 80188f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80188fc:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
 8018900:	f1b9 0f00 	cmp.w	r9, #0
 8018904:	d007      	beq.n	8018916 <GUI_Text_LAB_Measure+0x3c6>
 8018906:	f1a4 0012 	sub.w	r0, r4, #18
 801890a:	4430      	add	r0, r6
 801890c:	222d      	movs	r2, #45	; 0x2d
 801890e:	b2b9      	uxth	r1, r7
 8018910:	b280      	uxth	r0, r0
 8018912:	f006 fc57 	bl	801f1c4 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8018916:	19a0      	adds	r0, r4, r6
 8018918:	2303      	movs	r3, #3
 801891a:	aa06      	add	r2, sp, #24
 801891c:	b2b9      	uxth	r1, r7
 801891e:	b280      	uxth	r0, r0
 8018920:	f006 fcc6 	bl	801f2b0 <TFT_DisplayString>
		old_nan = 0;
 8018924:	2300      	movs	r3, #0
 8018926:	f888 3000 	strb.w	r3, [r8]
 801892a:	e687      	b.n	801863c <GUI_Text_LAB_Measure+0xec>
 801892c:	200001f0 	.word	0x200001f0
 8018930:	08034170 	.word	0x08034170
 8018934:	3ff00000 	.word	0x3ff00000
 8018938:	20000240 	.word	0x20000240
 801893c:	200052a9 	.word	0x200052a9
 8018940:	2000023c 	.word	0x2000023c
 8018944:	2000023d 	.word	0x2000023d

08018948 <GUI_Battery_Level>:
			

			

void GUI_Battery_Level(uint16_t X, uint16_t Y, double charge)
{
 8018948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801894c:	b085      	sub	sp, #20
	char buffer[5] = {0};
 801894e:	2300      	movs	r3, #0
	
	
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8018950:	f100 082d 	add.w	r8, r0, #45	; 0x2d
{
 8018954:	460c      	mov	r4, r1
 8018956:	4605      	mov	r5, r0
	char buffer[5] = {0};
 8018958:	9302      	str	r3, [sp, #8]
 801895a:	f88d 300c 	strb.w	r3, [sp, #12]
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 801895e:	fa1f f888 	uxth.w	r8, r8
 8018962:	f101 031a 	add.w	r3, r1, #26
 8018966:	f241 3976 	movw	r9, #4982	; 0x1376
 801896a:	310a      	adds	r1, #10
 801896c:	300a      	adds	r0, #10
 801896e:	b29b      	uxth	r3, r3
 8018970:	4642      	mov	r2, r8
 8018972:	b289      	uxth	r1, r1
 8018974:	b280      	uxth	r0, r0
 8018976:	f8cd 9000 	str.w	r9, [sp]
{
 801897a:	ec57 6b10 	vmov	r6, r7, d0
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 801897e:	f006 f887 	bl	801ea90 <TFT_FillRectangle>
	TFT_FillRectangle(X+45, Y+15, X+48, Y+20, TFT_Blue_Off); //small battery rect
 8018982:	f104 0314 	add.w	r3, r4, #20
 8018986:	f105 0230 	add.w	r2, r5, #48	; 0x30
 801898a:	f104 010f 	add.w	r1, r4, #15
 801898e:	b29b      	uxth	r3, r3
 8018990:	b292      	uxth	r2, r2
 8018992:	b289      	uxth	r1, r1
 8018994:	4640      	mov	r0, r8
 8018996:	f8cd 9000 	str.w	r9, [sp]
 801899a:	f006 f879 	bl	801ea90 <TFT_FillRectangle>

		if(charge < 12)
 801899e:	2200      	movs	r2, #0
 80189a0:	4b4c      	ldr	r3, [pc, #304]	; (8018ad4 <GUI_Battery_Level+0x18c>)
 80189a2:	4630      	mov	r0, r6
 80189a4:	4639      	mov	r1, r7
 80189a6:	f7e8 f8ad 	bl	8000b04 <__aeabi_dcmplt>
 80189aa:	b188      	cbz	r0, 80189d0 <GUI_Battery_Level+0x88>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_Red);
 80189ac:	f104 0318 	add.w	r3, r4, #24
 80189b0:	f105 0213 	add.w	r2, r5, #19
 80189b4:	f104 010c 	add.w	r1, r4, #12
 80189b8:	f105 000f 	add.w	r0, r5, #15
 80189bc:	f44f 4e78 	mov.w	lr, #63488	; 0xf800
 80189c0:	f8cd e000 	str.w	lr, [sp]
 80189c4:	b29b      	uxth	r3, r3
 80189c6:	b292      	uxth	r2, r2
 80189c8:	b289      	uxth	r1, r1
 80189ca:	b280      	uxth	r0, r0
 80189cc:	f006 f860 	bl	801ea90 <TFT_FillRectangle>
		}		
		if(charge >= 12)
 80189d0:	2200      	movs	r2, #0
 80189d2:	4b40      	ldr	r3, [pc, #256]	; (8018ad4 <GUI_Battery_Level+0x18c>)
 80189d4:	4630      	mov	r0, r6
 80189d6:	4639      	mov	r1, r7
 80189d8:	f7e8 f8a8 	bl	8000b2c <__aeabi_dcmpge>
 80189dc:	b188      	cbz	r0, 8018a02 <GUI_Battery_Level+0xba>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_White);
 80189de:	f104 0318 	add.w	r3, r4, #24
 80189e2:	f105 0213 	add.w	r2, r5, #19
 80189e6:	f104 010c 	add.w	r1, r4, #12
 80189ea:	f105 000f 	add.w	r0, r5, #15
 80189ee:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80189f2:	f8cd e000 	str.w	lr, [sp]
 80189f6:	b29b      	uxth	r3, r3
 80189f8:	b292      	uxth	r2, r2
 80189fa:	b289      	uxth	r1, r1
 80189fc:	b280      	uxth	r0, r0
 80189fe:	f006 f847 	bl	801ea90 <TFT_FillRectangle>
		}		
		if(charge >= 25)
 8018a02:	2200      	movs	r2, #0
 8018a04:	4b34      	ldr	r3, [pc, #208]	; (8018ad8 <GUI_Battery_Level+0x190>)
 8018a06:	4630      	mov	r0, r6
 8018a08:	4639      	mov	r1, r7
 8018a0a:	f7e8 f88f 	bl	8000b2c <__aeabi_dcmpge>
 8018a0e:	b188      	cbz	r0, 8018a34 <GUI_Battery_Level+0xec>
		{
			TFT_FillRectangle(X+22, Y+12, X+26, Y+24, TFT_White);
 8018a10:	f104 0318 	add.w	r3, r4, #24
 8018a14:	f105 021a 	add.w	r2, r5, #26
 8018a18:	f104 010c 	add.w	r1, r4, #12
 8018a1c:	f105 0016 	add.w	r0, r5, #22
 8018a20:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8018a24:	f8cd e000 	str.w	lr, [sp]
 8018a28:	b29b      	uxth	r3, r3
 8018a2a:	b292      	uxth	r2, r2
 8018a2c:	b289      	uxth	r1, r1
 8018a2e:	b280      	uxth	r0, r0
 8018a30:	f006 f82e 	bl	801ea90 <TFT_FillRectangle>
		}		
		if(charge >= 50)
 8018a34:	2200      	movs	r2, #0
 8018a36:	4b29      	ldr	r3, [pc, #164]	; (8018adc <GUI_Battery_Level+0x194>)
 8018a38:	4630      	mov	r0, r6
 8018a3a:	4639      	mov	r1, r7
 8018a3c:	f7e8 f876 	bl	8000b2c <__aeabi_dcmpge>
 8018a40:	b188      	cbz	r0, 8018a66 <GUI_Battery_Level+0x11e>
		{
			TFT_FillRectangle(X+29, Y+12, X+33, Y+24, TFT_White);
 8018a42:	f104 0318 	add.w	r3, r4, #24
 8018a46:	f105 0221 	add.w	r2, r5, #33	; 0x21
 8018a4a:	f104 010c 	add.w	r1, r4, #12
 8018a4e:	f105 001d 	add.w	r0, r5, #29
 8018a52:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8018a56:	f8cd e000 	str.w	lr, [sp]
 8018a5a:	b29b      	uxth	r3, r3
 8018a5c:	b292      	uxth	r2, r2
 8018a5e:	b289      	uxth	r1, r1
 8018a60:	b280      	uxth	r0, r0
 8018a62:	f006 f815 	bl	801ea90 <TFT_FillRectangle>
		}
		if(charge >= 85)
 8018a66:	2200      	movs	r2, #0
 8018a68:	4b1d      	ldr	r3, [pc, #116]	; (8018ae0 <GUI_Battery_Level+0x198>)
 8018a6a:	4630      	mov	r0, r6
 8018a6c:	4639      	mov	r1, r7
 8018a6e:	f7e8 f85d 	bl	8000b2c <__aeabi_dcmpge>
 8018a72:	b188      	cbz	r0, 8018a98 <GUI_Battery_Level+0x150>
		{
			TFT_FillRectangle(X+36, Y+12, X+40, Y+24, TFT_White);
 8018a74:	f104 0318 	add.w	r3, r4, #24
 8018a78:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8018a7c:	f104 010c 	add.w	r1, r4, #12
 8018a80:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8018a84:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8018a88:	f8cd e000 	str.w	lr, [sp]
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	b292      	uxth	r2, r2
 8018a90:	b289      	uxth	r1, r1
 8018a92:	b280      	uxth	r0, r0
 8018a94:	f005 fffc 	bl	801ea90 <TFT_FillRectangle>
		}
		
		sprintf (buffer, "%.1f%%", charge);
 8018a98:	4632      	mov	r2, r6
 8018a9a:	463b      	mov	r3, r7
 8018a9c:	4911      	ldr	r1, [pc, #68]	; (8018ae4 <GUI_Battery_Level+0x19c>)
 8018a9e:	a802      	add	r0, sp, #8
 8018aa0:	f009 fe36 	bl	8022710 <sprintf>
		TFT_SetFont(&Font8);
 8018aa4:	4810      	ldr	r0, [pc, #64]	; (8018ae8 <GUI_Battery_Level+0x1a0>)
 8018aa6:	f006 fa97 	bl	801efd8 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8018aaa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018aae:	f006 fa99 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8018ab2:	2063      	movs	r0, #99	; 0x63
 8018ab4:	f006 fa9c 	bl	801eff0 <TFT_SetBackColor>
		TFT_DisplayString(X+52, Y+14, (uint8_t *)buffer, LEFT_MODE);
 8018ab8:	f104 010e 	add.w	r1, r4, #14
 8018abc:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8018ac0:	2303      	movs	r3, #3
 8018ac2:	aa02      	add	r2, sp, #8
 8018ac4:	b289      	uxth	r1, r1
 8018ac6:	b280      	uxth	r0, r0
 8018ac8:	f006 fbf2 	bl	801f2b0 <TFT_DisplayString>

}
 8018acc:	b005      	add	sp, #20
 8018ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ad2:	bf00      	nop
 8018ad4:	40280000 	.word	0x40280000
 8018ad8:	40390000 	.word	0x40390000
 8018adc:	40490000 	.word	0x40490000
 8018ae0:	40554000 	.word	0x40554000
 8018ae4:	08034164 	.word	0x08034164
 8018ae8:	20000218 	.word	0x20000218

08018aec <GUI_Axes_Locus_XY>:

void GUI_Axes_Locus_XY(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8018aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8018aee:	1e86      	subs	r6, r0, #2
{
 8018af0:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8018af2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8018af6:	b2b6      	uxth	r6, r6
 8018af8:	39fa      	subs	r1, #250	; 0xfa
{
 8018afa:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8018afc:	4623      	mov	r3, r4
 8018afe:	4602      	mov	r2, r0
 8018b00:	9700      	str	r7, [sp, #0]
 8018b02:	4630      	mov	r0, r6
 8018b04:	b289      	uxth	r1, r1
 8018b06:	f005 ffc3 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+XY2_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8018b0a:	1ce3      	adds	r3, r4, #3
 8018b0c:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 8018b10:	1c61      	adds	r1, r4, #1
 8018b12:	4630      	mov	r0, r6
 8018b14:	9700      	str	r7, [sp, #0]
 8018b16:	b29b      	uxth	r3, r3
 8018b18:	b292      	uxth	r2, r2
 8018b1a:	b289      	uxth	r1, r1
 8018b1c:	f005 ffb8 	bl	801ea90 <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-300/2, X_center+3, Y_center-300/2, TFT_White);
 8018b20:	f1a4 0396 	sub.w	r3, r4, #150	; 0x96
 8018b24:	b29b      	uxth	r3, r3
 8018b26:	1cea      	adds	r2, r5, #3
 8018b28:	1f68      	subs	r0, r5, #5
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	9700      	str	r7, [sp, #0]
 8018b2e:	b292      	uxth	r2, r2
 8018b30:	b280      	uxth	r0, r0
 8018b32:	f005 ff45 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(X_center+295/2, Y_center-3, X_center+295/2, Y_center+6, TFT_White);
 8018b36:	1da6      	adds	r6, r4, #6
 8018b38:	f105 0293 	add.w	r2, r5, #147	; 0x93
 8018b3c:	b292      	uxth	r2, r2
 8018b3e:	b2b6      	uxth	r6, r6
 8018b40:	1ee1      	subs	r1, r4, #3
 8018b42:	4633      	mov	r3, r6
 8018b44:	4610      	mov	r0, r2
 8018b46:	b289      	uxth	r1, r1
 8018b48:	9700      	str	r7, [sp, #0]
 8018b4a:	f005 ff39 	bl	801e9c0 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8018b4e:	4819      	ldr	r0, [pc, #100]	; (8018bb4 <GUI_Axes_Locus_XY+0xc8>)
 8018b50:	f006 fa42 	bl	801efd8 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8018b54:	3c98      	subs	r4, #152	; 0x98
		TFT_SetTextColor(TFT_White);
 8018b56:	4638      	mov	r0, r7
 8018b58:	f006 fa44 	bl	801efe4 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8018b5c:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8018b5e:	2063      	movs	r0, #99	; 0x63
 8018b60:	f006 fa46 	bl	801eff0 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8018b64:	4621      	mov	r1, r4
 8018b66:	222e      	movs	r2, #46	; 0x2e
 8018b68:	2004      	movs	r0, #4
 8018b6a:	f006 fb2b 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-300/2-2, '0');
 8018b6e:	4621      	mov	r1, r4
 8018b70:	2230      	movs	r2, #48	; 0x30
 8018b72:	2000      	movs	r0, #0
 8018b74:	f006 fb26 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-300/2-2, '5');
 8018b78:	4621      	mov	r1, r4
 8018b7a:	2235      	movs	r2, #53	; 0x35
 8018b7c:	2008      	movs	r0, #8
 8018b7e:	f006 fb21 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+295/2-6+4,  Y_center+6, '.');
 8018b82:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8018b86:	4631      	mov	r1, r6
 8018b88:	222e      	movs	r2, #46	; 0x2e
 8018b8a:	b280      	uxth	r0, r0
 8018b8c:	f006 fb1a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+0,  Y_center+6, '0');
 8018b90:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8018b94:	4631      	mov	r1, r6
 8018b96:	2230      	movs	r2, #48	; 0x30
 8018b98:	b280      	uxth	r0, r0
 8018b9a:	f006 fb13 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8018b9e:	f105 0095 	add.w	r0, r5, #149	; 0x95
 8018ba2:	2235      	movs	r2, #53	; 0x35
 8018ba4:	4631      	mov	r1, r6
 8018ba6:	b280      	uxth	r0, r0
}
 8018ba8:	b003      	add	sp, #12
 8018baa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8018bae:	f006 bb09 	b.w	801f1c4 <TFT_DrawChar>
 8018bb2:	bf00      	nop
 8018bb4:	20000210 	.word	0x20000210

08018bb8 <GUI_Axes_Locus_LUV>:

void GUI_Axes_Locus_LUV(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8018bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8018bba:	1e86      	subs	r6, r0, #2
{
 8018bbc:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8018bbe:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8018bc2:	b2b6      	uxth	r6, r6
 8018bc4:	39ea      	subs	r1, #234	; 0xea
{
 8018bc6:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8018bc8:	4623      	mov	r3, r4
 8018bca:	4602      	mov	r2, r0
 8018bcc:	9700      	str	r7, [sp, #0]
 8018bce:	4630      	mov	r0, r6
 8018bd0:	b289      	uxth	r1, r1
 8018bd2:	f005 ff5d 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+LUV_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8018bd6:	1ce3      	adds	r3, r4, #3
 8018bd8:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8018bdc:	1c61      	adds	r1, r4, #1
 8018bde:	4630      	mov	r0, r6
 8018be0:	9700      	str	r7, [sp, #0]
 8018be2:	b29b      	uxth	r3, r3
 8018be4:	b292      	uxth	r2, r2
 8018be6:	b289      	uxth	r1, r1
 8018be8:	f005 ff52 	bl	801ea90 <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-396/2, X_center+3, Y_center-396/2, TFT_White);
 8018bec:	f1a4 03c6 	sub.w	r3, r4, #198	; 0xc6
 8018bf0:	b29b      	uxth	r3, r3
 8018bf2:	1cea      	adds	r2, r5, #3
 8018bf4:	1f68      	subs	r0, r5, #5
 8018bf6:	4619      	mov	r1, r3
 8018bf8:	9700      	str	r7, [sp, #0]
 8018bfa:	b292      	uxth	r2, r2
 8018bfc:	b280      	uxth	r0, r0
 8018bfe:	f005 fedf 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(X_center+403/2, Y_center-3, X_center+403/2, Y_center+6, TFT_White);
 8018c02:	1da6      	adds	r6, r4, #6
 8018c04:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
 8018c08:	b292      	uxth	r2, r2
 8018c0a:	b2b6      	uxth	r6, r6
 8018c0c:	1ee1      	subs	r1, r4, #3
 8018c0e:	4633      	mov	r3, r6
 8018c10:	4610      	mov	r0, r2
 8018c12:	b289      	uxth	r1, r1
 8018c14:	9700      	str	r7, [sp, #0]
 8018c16:	f005 fed3 	bl	801e9c0 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8018c1a:	4819      	ldr	r0, [pc, #100]	; (8018c80 <GUI_Axes_Locus_LUV+0xc8>)
 8018c1c:	f006 f9dc 	bl	801efd8 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8018c20:	3cc8      	subs	r4, #200	; 0xc8
		TFT_SetTextColor(TFT_White);
 8018c22:	4638      	mov	r0, r7
 8018c24:	f006 f9de 	bl	801efe4 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8018c28:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8018c2a:	2063      	movs	r0, #99	; 0x63
 8018c2c:	f006 f9e0 	bl	801eff0 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8018c30:	4621      	mov	r1, r4
 8018c32:	222e      	movs	r2, #46	; 0x2e
 8018c34:	2004      	movs	r0, #4
 8018c36:	f006 fac5 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-396/2-2, '0');
 8018c3a:	4621      	mov	r1, r4
 8018c3c:	2230      	movs	r2, #48	; 0x30
 8018c3e:	2000      	movs	r0, #0
 8018c40:	f006 fac0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-396/2-2, '5');
 8018c44:	4621      	mov	r1, r4
 8018c46:	2235      	movs	r2, #53	; 0x35
 8018c48:	2008      	movs	r0, #8
 8018c4a:	f006 fabb 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+403/2-6+4,  Y_center+6, '.');
 8018c4e:	f105 00c7 	add.w	r0, r5, #199	; 0xc7
 8018c52:	4631      	mov	r1, r6
 8018c54:	222e      	movs	r2, #46	; 0x2e
 8018c56:	b280      	uxth	r0, r0
 8018c58:	f006 fab4 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+0,  Y_center+6, '0');
 8018c5c:	f105 00c3 	add.w	r0, r5, #195	; 0xc3
 8018c60:	4631      	mov	r1, r6
 8018c62:	2230      	movs	r2, #48	; 0x30
 8018c64:	b280      	uxth	r0, r0
 8018c66:	f006 faad 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8018c6a:	f105 00cb 	add.w	r0, r5, #203	; 0xcb
 8018c6e:	2235      	movs	r2, #53	; 0x35
 8018c70:	4631      	mov	r1, r6
 8018c72:	b280      	uxth	r0, r0
}
 8018c74:	b003      	add	sp, #12
 8018c76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8018c7a:	f006 baa3 	b.w	801f1c4 <TFT_DrawChar>
 8018c7e:	bf00      	nop
 8018c80:	20000210 	.word	0x20000210

08018c84 <GUI_Axes_Locus_Lab>:

void GUI_Axes_Locus_Lab(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8018c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018c88:	f100 037d 	add.w	r3, r0, #125	; 0x7d
{
 8018c8c:	b087      	sub	sp, #28
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018c8e:	b29b      	uxth	r3, r3
{
 8018c90:	4604      	mov	r4, r0
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018c92:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
 8018c96:	460d      	mov	r5, r1
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018c98:	9303      	str	r3, [sp, #12]
 8018c9a:	387f      	subs	r0, #127	; 0x7f
 8018c9c:	1c4b      	adds	r3, r1, #1
 8018c9e:	3901      	subs	r1, #1
 8018ca0:	9a03      	ldr	r2, [sp, #12]
 8018ca2:	9700      	str	r7, [sp, #0]
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	b289      	uxth	r1, r1
 8018ca8:	b280      	uxth	r0, r0
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 8018caa:	f1a5 067d 	sub.w	r6, r5, #125	; 0x7d
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018cae:	f005 feef 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 8018cb2:	b2b6      	uxth	r6, r6
 8018cb4:	f105 037d 	add.w	r3, r5, #125	; 0x7d
 8018cb8:	1ea0      	subs	r0, r4, #2
 8018cba:	b29b      	uxth	r3, r3
 8018cbc:	4622      	mov	r2, r4
 8018cbe:	4631      	mov	r1, r6
 8018cc0:	9700      	str	r7, [sp, #0]
 8018cc2:	b280      	uxth	r0, r0
 8018cc4:	9304      	str	r3, [sp, #16]
 8018cc6:	f005 fee3 	bl	801ea90 <TFT_FillRectangle>
		

		TFT_SetFont(&Font6EN_arch_big);
 8018cca:	4850      	ldr	r0, [pc, #320]	; (8018e0c <GUI_Axes_Locus_Lab+0x188>)
 8018ccc:	f006 f984 	bl	801efd8 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8018cd0:	4638      	mov	r0, r7
 8018cd2:	f006 f987 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8018cd6:	2063      	movs	r0, #99	; 0x63
 8018cd8:	f006 f98a 	bl	801eff0 <TFT_SetBackColor>
	
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8018cdc:	f1a4 031e 	sub.w	r3, r4, #30
 8018ce0:	b29b      	uxth	r3, r3
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8018ce2:	f1a4 0b19 	sub.w	fp, r4, #25
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	4631      	mov	r1, r6
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8018cea:	fa1f fb8b 	uxth.w	fp, fp
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8018cee:	222b      	movs	r2, #43	; 0x2b
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8018cf0:	f1a4 0a14 	sub.w	sl, r4, #20
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8018cf4:	9305      	str	r3, [sp, #20]
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8018cf6:	fa1f fa8a 	uxth.w	sl, sl
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8018cfa:	f006 fa63 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8018cfe:	f1a4 090e 	sub.w	r9, r4, #14
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8018d02:	4631      	mov	r1, r6
 8018d04:	4658      	mov	r0, fp
 8018d06:	2231      	movs	r2, #49	; 0x31
 8018d08:	f006 fa5c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8018d0c:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8018d10:	4631      	mov	r1, r6
 8018d12:	4650      	mov	r0, sl
 8018d14:	2232      	movs	r2, #50	; 0x32
 8018d16:	f006 fa55 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8018d1a:	4631      	mov	r1, r6
 8018d1c:	4648      	mov	r0, r9
 8018d1e:	2238      	movs	r2, #56	; 0x38
 8018d20:	f006 fa50 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(X_center-35+5,  Y_center+LAB_LOCUS_SIZEY/2-8, '-');
 8018d24:	f105 0875 	add.w	r8, r5, #117	; 0x75
 8018d28:	9b05      	ldr	r3, [sp, #20]
 8018d2a:	fa1f f888 	uxth.w	r8, r8
 8018d2e:	4618      	mov	r0, r3
 8018d30:	4641      	mov	r1, r8
 8018d32:	222d      	movs	r2, #45	; 0x2d
 8018d34:	f006 fa46 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+10,  Y_center+LAB_LOCUS_SIZEY/2-8, '1');
 8018d38:	4641      	mov	r1, r8
 8018d3a:	4658      	mov	r0, fp
 8018d3c:	2231      	movs	r2, #49	; 0x31
 8018d3e:	f006 fa41 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+15,  Y_center+LAB_LOCUS_SIZEY/2-8, '2');
 8018d42:	4641      	mov	r1, r8
 8018d44:	4650      	mov	r0, sl
 8018d46:	2232      	movs	r2, #50	; 0x32
 8018d48:	f006 fa3c 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8018d4c:	4641      	mov	r1, r8
		
		TFT_DrawChar(0,  Y_center-11, '-');
 8018d4e:	f1a5 080b 	sub.w	r8, r5, #11
 8018d52:	fa1f f888 	uxth.w	r8, r8
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8018d56:	4648      	mov	r0, r9
 8018d58:	2238      	movs	r2, #56	; 0x38
 8018d5a:	f006 fa33 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-11, '-');
 8018d5e:	4641      	mov	r1, r8
 8018d60:	222d      	movs	r2, #45	; 0x2d
 8018d62:	2000      	movs	r0, #0
 8018d64:	f006 fa2e 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(5,  Y_center-11, '1');
 8018d68:	4641      	mov	r1, r8
 8018d6a:	2231      	movs	r2, #49	; 0x31
 8018d6c:	2005      	movs	r0, #5
 8018d6e:	f006 fa29 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(10,  Y_center-11, '2');
 8018d72:	4641      	mov	r1, r8
 8018d74:	2232      	movs	r2, #50	; 0x32
 8018d76:	200a      	movs	r0, #10
 8018d78:	f006 fa24 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(16,  Y_center-11, '8');
 8018d7c:	4641      	mov	r1, r8
 8018d7e:	2238      	movs	r2, #56	; 0x38
 8018d80:	2010      	movs	r0, #16
 8018d82:	f006 fa1f 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(260-15,  Y_center-11, '+');
 8018d86:	4641      	mov	r1, r8
 8018d88:	222b      	movs	r2, #43	; 0x2b
 8018d8a:	20f5      	movs	r0, #245	; 0xf5
 8018d8c:	f006 fa1a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(260-10,  Y_center-11, '1');
 8018d90:	4641      	mov	r1, r8
 8018d92:	2231      	movs	r2, #49	; 0x31
 8018d94:	20fa      	movs	r0, #250	; 0xfa
 8018d96:	f006 fa15 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(260-5,  Y_center-11, '2');
 8018d9a:	4641      	mov	r1, r8
 8018d9c:	2232      	movs	r2, #50	; 0x32
 8018d9e:	20ff      	movs	r0, #255	; 0xff
 8018da0:	f006 fa10 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(260,  Y_center-11, '8');
		
		//		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/4, X_center+3, Y_center-LAB_LOCUS_SIZEY/4, TFT_White);
//		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/4, X_center+3, Y_center+LAB_LOCUS_SIZEY/4, TFT_White);
		
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8018da4:	f104 0903 	add.w	r9, r4, #3
		TFT_DrawChar(260,  Y_center-11, '8');
 8018da8:	4641      	mov	r1, r8
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8018daa:	f1a4 0805 	sub.w	r8, r4, #5
 8018dae:	fa1f f888 	uxth.w	r8, r8
 8018db2:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(260,  Y_center-11, '8');
 8018db6:	2238      	movs	r2, #56	; 0x38
 8018db8:	f44f 7082 	mov.w	r0, #260	; 0x104
 8018dbc:	f006 fa02 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8018dc0:	4633      	mov	r3, r6
 8018dc2:	464a      	mov	r2, r9
 8018dc4:	4631      	mov	r1, r6
 8018dc6:	4640      	mov	r0, r8
 8018dc8:	9700      	str	r7, [sp, #0]
 8018dca:	f005 fdf9 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/2, X_center+3, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);
 8018dce:	9b04      	ldr	r3, [sp, #16]
 8018dd0:	9700      	str	r7, [sp, #0]
 8018dd2:	464a      	mov	r2, r9
 8018dd4:	4619      	mov	r1, r3
 8018dd6:	4640      	mov	r0, r8
 8018dd8:	f005 fdf2 	bl	801e9c0 <TFT_DrawLine>
	
//		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/4, Y_center-3, X_center-LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
//		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/4, Y_center-3, X_center+LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
		
		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/2+1, Y_center-3, X_center-LAB_LOCUS_SIZEX/2+1, Y_center+6, TFT_White);
 8018ddc:	f1a4 027c 	sub.w	r2, r4, #124	; 0x7c
 8018de0:	1eec      	subs	r4, r5, #3
 8018de2:	3506      	adds	r5, #6
 8018de4:	b292      	uxth	r2, r2
 8018de6:	b2a4      	uxth	r4, r4
 8018de8:	b2ad      	uxth	r5, r5
 8018dea:	462b      	mov	r3, r5
 8018dec:	4621      	mov	r1, r4
 8018dee:	4610      	mov	r0, r2
 8018df0:	9700      	str	r7, [sp, #0]
 8018df2:	f005 fde5 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/2, Y_center-3, X_center+LAB_LOCUS_SIZEX/2, Y_center+6, TFT_White);
 8018df6:	9a03      	ldr	r2, [sp, #12]
 8018df8:	9700      	str	r7, [sp, #0]
 8018dfa:	462b      	mov	r3, r5
 8018dfc:	4621      	mov	r1, r4
 8018dfe:	4610      	mov	r0, r2
 8018e00:	f005 fdde 	bl	801e9c0 <TFT_DrawLine>
}
 8018e04:	b007      	add	sp, #28
 8018e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e0a:	bf00      	nop
 8018e0c:	20000210 	.word	0x20000210

08018e10 <GUI_Text_CIE_XYZ>:
#include "stdio.h"
#include "GUI_Text_Elements_EN.h"


void GUI_Text_CIE_XYZ(uint16_t X, uint16_t Y)
{
 8018e10:	b538      	push	{r3, r4, r5, lr}
 8018e12:	4604      	mov	r4, r0
TFT_SetTextColor(TFT_White);
 8018e14:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018e18:	460d      	mov	r5, r1
TFT_SetTextColor(TFT_White);
 8018e1a:	f006 f8e3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018e1e:	2063      	movs	r0, #99	; 0x63
 8018e20:	f006 f8e6 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018e24:	4816      	ldr	r0, [pc, #88]	; (8018e80 <GUI_Text_CIE_XYZ+0x70>)
 8018e26:	f006 f8d7 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018e2a:	4629      	mov	r1, r5
 8018e2c:	4620      	mov	r0, r4
 8018e2e:	2243      	movs	r2, #67	; 0x43
 8018e30:	f006 f9c8 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018e34:	f104 000d 	add.w	r0, r4, #13
 8018e38:	4629      	mov	r1, r5
 8018e3a:	2249      	movs	r2, #73	; 0x49
 8018e3c:	b280      	uxth	r0, r0
 8018e3e:	f006 f9c1 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8018e42:	f104 001b 	add.w	r0, r4, #27
 8018e46:	4629      	mov	r1, r5
 8018e48:	2245      	movs	r2, #69	; 0x45
 8018e4a:	b280      	uxth	r0, r0
 8018e4c:	f006 f9ba 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'X');
 8018e50:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8018e54:	4629      	mov	r1, r5
 8018e56:	2258      	movs	r2, #88	; 0x58
 8018e58:	b280      	uxth	r0, r0
 8018e5a:	f006 f9b3 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y, 'Y');
 8018e5e:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8018e62:	4629      	mov	r1, r5
 8018e64:	2259      	movs	r2, #89	; 0x59
 8018e66:	b280      	uxth	r0, r0
 8018e68:	f006 f9ac 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y, 'Z');
 8018e6c:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8018e70:	4629      	mov	r1, r5
 8018e72:	225a      	movs	r2, #90	; 0x5a
 8018e74:	b280      	uxth	r0, r0
}
 8018e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+81, Y, 'Z');
 8018e7a:	f006 b9a3 	b.w	801f1c4 <TFT_DrawChar>
 8018e7e:	bf00      	nop
 8018e80:	200001b0 	.word	0x200001b0

08018e84 <GUI_Text_CIE_xy_1931>:
	TFT_DrawChar(X+49, Y+1, 'x');
	TFT_DrawChar(X+72, Y+1, 'y');
}

void GUI_Text_CIE_xy_1931(uint16_t X, uint16_t Y)
{
 8018e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e86:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8018e88:	4f2c      	ldr	r7, [pc, #176]	; (8018f3c <GUI_Text_CIE_xy_1931+0xb8>)
	TFT_SetTextColor(TFT_White);
 8018e8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018e8e:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018e90:	f006 f8a8 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018e94:	2063      	movs	r0, #99	; 0x63
 8018e96:	f006 f8ab 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018e9a:	4638      	mov	r0, r7
 8018e9c:	f006 f89c 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018ea0:	4629      	mov	r1, r5
 8018ea2:	4620      	mov	r0, r4
 8018ea4:	2243      	movs	r2, #67	; 0x43
 8018ea6:	f006 f98d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018eaa:	f104 000d 	add.w	r0, r4, #13
 8018eae:	4629      	mov	r1, r5
 8018eb0:	2249      	movs	r2, #73	; 0x49
 8018eb2:	b280      	uxth	r0, r0
 8018eb4:	f006 f986 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8018eb8:	f104 001b 	add.w	r0, r4, #27
 8018ebc:	4629      	mov	r1, r5
 8018ebe:	2245      	movs	r2, #69	; 0x45
 8018ec0:	b280      	uxth	r0, r0
 8018ec2:	f006 f97f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 8018ec6:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8018eca:	4629      	mov	r1, r5
 8018ecc:	222c      	movs	r2, #44	; 0x2c
 8018ece:	b280      	uxth	r0, r0
 8018ed0:	f006 f978 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8018ed4:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 8018ed6:	481a      	ldr	r0, [pc, #104]	; (8018f40 <GUI_Text_CIE_xy_1931+0xbc>)
 8018ed8:	f006 f87e 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8018edc:	b2b6      	uxth	r6, r6
 8018ede:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8018ee2:	4631      	mov	r1, r6
 8018ee4:	2278      	movs	r2, #120	; 0x78
 8018ee6:	b280      	uxth	r0, r0
 8018ee8:	f006 f96c 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8018eec:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8018ef0:	4631      	mov	r1, r6
 8018ef2:	2279      	movs	r2, #121	; 0x79
 8018ef4:	b280      	uxth	r0, r0
 8018ef6:	f006 f965 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8018efa:	4638      	mov	r0, r7
 8018efc:	f006 f86c 	bl	801efd8 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8018f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018f04:	4629      	mov	r1, r5
 8018f06:	2231      	movs	r2, #49	; 0x31
 8018f08:	b280      	uxth	r0, r0
 8018f0a:	f006 f95b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+133, Y, '1');
 8018f0e:	f104 0085 	add.w	r0, r4, #133	; 0x85
 8018f12:	4629      	mov	r1, r5
 8018f14:	2231      	movs	r2, #49	; 0x31
 8018f16:	b280      	uxth	r0, r0
 8018f18:	f006 f954 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8018f1c:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8018f20:	4629      	mov	r1, r5
 8018f22:	2239      	movs	r2, #57	; 0x39
 8018f24:	b280      	uxth	r0, r0
 8018f26:	f006 f94d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+121, Y, '3');
 8018f2a:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8018f2e:	4629      	mov	r1, r5
 8018f30:	2233      	movs	r2, #51	; 0x33
 8018f32:	b280      	uxth	r0, r0


}
 8018f34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+121, Y, '3');
 8018f38:	f006 b944 	b.w	801f1c4 <TFT_DrawChar>
 8018f3c:	200001b0 	.word	0x200001b0
 8018f40:	200001c0 	.word	0x200001c0

08018f44 <GUI_Text_CIE_xy_1964>:

void GUI_Text_CIE_xy_1964(uint16_t X, uint16_t Y)
{
 8018f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f46:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8018f48:	4f2c      	ldr	r7, [pc, #176]	; (8018ffc <GUI_Text_CIE_xy_1964+0xb8>)
	TFT_SetTextColor(TFT_White);
 8018f4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018f4e:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018f50:	f006 f848 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018f54:	2063      	movs	r0, #99	; 0x63
 8018f56:	f006 f84b 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018f5a:	4638      	mov	r0, r7
 8018f5c:	f006 f83c 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018f60:	4629      	mov	r1, r5
 8018f62:	4620      	mov	r0, r4
 8018f64:	2243      	movs	r2, #67	; 0x43
 8018f66:	f006 f92d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018f6a:	f104 000d 	add.w	r0, r4, #13
 8018f6e:	4629      	mov	r1, r5
 8018f70:	2249      	movs	r2, #73	; 0x49
 8018f72:	b280      	uxth	r0, r0
 8018f74:	f006 f926 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8018f78:	f104 001b 	add.w	r0, r4, #27
 8018f7c:	4629      	mov	r1, r5
 8018f7e:	2245      	movs	r2, #69	; 0x45
 8018f80:	b280      	uxth	r0, r0
 8018f82:	f006 f91f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 8018f86:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8018f8a:	4629      	mov	r1, r5
 8018f8c:	222c      	movs	r2, #44	; 0x2c
 8018f8e:	b280      	uxth	r0, r0
 8018f90:	f006 f918 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8018f94:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 8018f96:	481a      	ldr	r0, [pc, #104]	; (8019000 <GUI_Text_CIE_xy_1964+0xbc>)
 8018f98:	f006 f81e 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8018f9c:	b2b6      	uxth	r6, r6
 8018f9e:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8018fa2:	4631      	mov	r1, r6
 8018fa4:	2278      	movs	r2, #120	; 0x78
 8018fa6:	b280      	uxth	r0, r0
 8018fa8:	f006 f90c 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8018fac:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8018fb0:	4631      	mov	r1, r6
 8018fb2:	2279      	movs	r2, #121	; 0x79
 8018fb4:	b280      	uxth	r0, r0
 8018fb6:	f006 f905 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8018fba:	4638      	mov	r0, r7
 8018fbc:	f006 f80c 	bl	801efd8 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8018fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018fc4:	4629      	mov	r1, r5
 8018fc6:	2231      	movs	r2, #49	; 0x31
 8018fc8:	b280      	uxth	r0, r0
 8018fca:	f006 f8fb 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8018fce:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8018fd2:	4629      	mov	r1, r5
 8018fd4:	2239      	movs	r2, #57	; 0x39
 8018fd6:	b280      	uxth	r0, r0
 8018fd8:	f006 f8f4 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y, '6');
 8018fdc:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8018fe0:	4629      	mov	r1, r5
 8018fe2:	2236      	movs	r2, #54	; 0x36
 8018fe4:	b280      	uxth	r0, r0
 8018fe6:	f006 f8ed 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+135, Y, '4');
 8018fea:	f104 0087 	add.w	r0, r4, #135	; 0x87
 8018fee:	4629      	mov	r1, r5
 8018ff0:	2234      	movs	r2, #52	; 0x34
 8018ff2:	b280      	uxth	r0, r0
}
 8018ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+135, Y, '4');
 8018ff8:	f006 b8e4 	b.w	801f1c4 <TFT_DrawChar>
 8018ffc:	200001b0 	.word	0x200001b0
 8019000:	200001c0 	.word	0x200001c0

08019004 <GUI_Text_CIE_Luv>:



void GUI_Text_CIE_Luv(uint16_t X, uint16_t Y)
{
 8019004:	b538      	push	{r3, r4, r5, lr}
 8019006:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019008:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801900c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801900e:	f005 ffe9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019012:	2063      	movs	r0, #99	; 0x63
 8019014:	f005 ffec 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019018:	481f      	ldr	r0, [pc, #124]	; (8019098 <GUI_Text_CIE_Luv+0x94>)
 801901a:	f005 ffdd 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801901e:	4621      	mov	r1, r4
 8019020:	4628      	mov	r0, r5
 8019022:	2243      	movs	r2, #67	; 0x43
 8019024:	f006 f8ce 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8019028:	f105 000d 	add.w	r0, r5, #13
 801902c:	4621      	mov	r1, r4
 801902e:	2249      	movs	r2, #73	; 0x49
 8019030:	b280      	uxth	r0, r0
 8019032:	f006 f8c7 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8019036:	f105 001b 	add.w	r0, r5, #27
 801903a:	4621      	mov	r1, r4
 801903c:	2245      	movs	r2, #69	; 0x45
 801903e:	b280      	uxth	r0, r0
 8019040:	f006 f8c0 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 8019044:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8019048:	4621      	mov	r1, r4
 801904a:	224c      	movs	r2, #76	; 0x4c
 801904c:	b280      	uxth	r0, r0
 801904e:	f006 f8b9 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '('-1);
 8019052:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8019056:	4621      	mov	r1, r4
 8019058:	2227      	movs	r2, #39	; 0x27
 801905a:	b280      	uxth	r0, r0
 801905c:	f006 f8b2 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+106, Y, '('-1);
 8019060:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 8019064:	4621      	mov	r1, r4
 8019066:	2227      	movs	r2, #39	; 0x27
 8019068:	b280      	uxth	r0, r0
 801906a:	f006 f8ab 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'u');
 801906e:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8019070:	480a      	ldr	r0, [pc, #40]	; (801909c <GUI_Text_CIE_Luv+0x98>)
 8019072:	f005 ffb1 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'u');
 8019076:	b2a4      	uxth	r4, r4
 8019078:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801907c:	4621      	mov	r1, r4
 801907e:	2275      	movs	r2, #117	; 0x75
 8019080:	b280      	uxth	r0, r0
 8019082:	f006 f89f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'v');
 8019086:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 801908a:	4621      	mov	r1, r4
 801908c:	2276      	movs	r2, #118	; 0x76
 801908e:	b280      	uxth	r0, r0
}
 8019090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'v');
 8019094:	f006 b896 	b.w	801f1c4 <TFT_DrawChar>
 8019098:	200001b0 	.word	0x200001b0
 801909c:	200001c0 	.word	0x200001c0

080190a0 <GUI_Text_CIE_Lab>:

void GUI_Text_CIE_Lab(uint16_t X, uint16_t Y)
{
 80190a0:	b538      	push	{r3, r4, r5, lr}
 80190a2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80190a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80190a8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80190aa:	f005 ff9b 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80190ae:	2063      	movs	r0, #99	; 0x63
 80190b0:	f005 ff9e 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80190b4:	481f      	ldr	r0, [pc, #124]	; (8019134 <GUI_Text_CIE_Lab+0x94>)
 80190b6:	f005 ff8f 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80190ba:	4621      	mov	r1, r4
 80190bc:	4628      	mov	r0, r5
 80190be:	2243      	movs	r2, #67	; 0x43
 80190c0:	f006 f880 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80190c4:	f105 000d 	add.w	r0, r5, #13
 80190c8:	4621      	mov	r1, r4
 80190ca:	2249      	movs	r2, #73	; 0x49
 80190cc:	b280      	uxth	r0, r0
 80190ce:	f006 f879 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80190d2:	f105 001b 	add.w	r0, r5, #27
 80190d6:	4621      	mov	r1, r4
 80190d8:	2245      	movs	r2, #69	; 0x45
 80190da:	b280      	uxth	r0, r0
 80190dc:	f006 f872 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 80190e0:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80190e4:	4621      	mov	r1, r4
 80190e6:	224c      	movs	r2, #76	; 0x4c
 80190e8:	b280      	uxth	r0, r0
 80190ea:	f006 f86b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '*');
 80190ee:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80190f2:	4621      	mov	r1, r4
 80190f4:	222a      	movs	r2, #42	; 0x2a
 80190f6:	b280      	uxth	r0, r0
 80190f8:	f006 f864 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '*');
 80190fc:	f105 0069 	add.w	r0, r5, #105	; 0x69
 8019100:	4621      	mov	r1, r4
 8019102:	222a      	movs	r2, #42	; 0x2a
 8019104:	b280      	uxth	r0, r0
 8019106:	f006 f85d 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'a');
 801910a:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 801910c:	480a      	ldr	r0, [pc, #40]	; (8019138 <GUI_Text_CIE_Lab+0x98>)
 801910e:	f005 ff63 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'a');
 8019112:	b2a4      	uxth	r4, r4
 8019114:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8019118:	4621      	mov	r1, r4
 801911a:	2261      	movs	r2, #97	; 0x61
 801911c:	b280      	uxth	r0, r0
 801911e:	f006 f851 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'b');
 8019122:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8019126:	4621      	mov	r1, r4
 8019128:	2262      	movs	r2, #98	; 0x62
 801912a:	b280      	uxth	r0, r0
}
 801912c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'b');
 8019130:	f006 b848 	b.w	801f1c4 <TFT_DrawChar>
 8019134:	200001b0 	.word	0x200001b0
 8019138:	200001c0 	.word	0x200001c0

0801913c <GUI_Text_Bluetooth>:

void GUI_Text_Bluetooth(uint16_t X, uint16_t Y)
{
 801913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801913e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_small);
 8019140:	4e29      	ldr	r6, [pc, #164]	; (80191e8 <GUI_Text_Bluetooth+0xac>)
	TFT_SetTextColor(TFT_White);
 8019142:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019146:	460f      	mov	r7, r1
	TFT_SetTextColor(TFT_White);
 8019148:	f005 ff4c 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801914c:	2063      	movs	r0, #99	; 0x63
 801914e:	f005 ff4f 	bl	801eff0 <TFT_SetBackColor>
	TFT_DrawChar(X+13, Y+2, 'l');
 8019152:	1cbd      	adds	r5, r7, #2
	TFT_SetFont(&Font16EN_arch_small);
 8019154:	4630      	mov	r0, r6
	TFT_DrawChar(X+13, Y+2, 'l');
 8019156:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16EN_arch_small);
 8019158:	f005 ff3e 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'l');
 801915c:	f104 000d 	add.w	r0, r4, #13
 8019160:	4629      	mov	r1, r5
 8019162:	226c      	movs	r2, #108	; 0x6c
 8019164:	b280      	uxth	r0, r0
 8019166:	f006 f82d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 't');
 801916a:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 801916e:	4629      	mov	r1, r5
 8019170:	2274      	movs	r2, #116	; 0x74
 8019172:	b280      	uxth	r0, r0
 8019174:	f006 f826 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y+2, 't');
 8019178:	f104 0051 	add.w	r0, r4, #81	; 0x51
 801917c:	4629      	mov	r1, r5
 801917e:	2274      	movs	r2, #116	; 0x74
 8019180:	b280      	uxth	r0, r0
 8019182:	f006 f81f 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8019186:	4819      	ldr	r0, [pc, #100]	; (80191ec <GUI_Text_Bluetooth+0xb0>)
 8019188:	f005 ff26 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'B');
 801918c:	4639      	mov	r1, r7
 801918e:	2242      	movs	r2, #66	; 0x42
 8019190:	4620      	mov	r0, r4
 8019192:	f006 f817 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8019196:	4630      	mov	r0, r6
 8019198:	f005 ff1e 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+23, Y+2, 'u');
 801919c:	f104 0017 	add.w	r0, r4, #23
 80191a0:	4629      	mov	r1, r5
 80191a2:	2275      	movs	r2, #117	; 0x75
 80191a4:	b280      	uxth	r0, r0
 80191a6:	f006 f80d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+36, Y+2, 'e');
 80191aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80191ae:	4629      	mov	r1, r5
 80191b0:	2265      	movs	r2, #101	; 0x65
 80191b2:	b280      	uxth	r0, r0
 80191b4:	f006 f806 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'o');
 80191b8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80191bc:	4629      	mov	r1, r5
 80191be:	226f      	movs	r2, #111	; 0x6f
 80191c0:	b280      	uxth	r0, r0
 80191c2:	f005 ffff 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'o');
 80191c6:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80191ca:	4629      	mov	r1, r5
 80191cc:	226f      	movs	r2, #111	; 0x6f
 80191ce:	b280      	uxth	r0, r0
 80191d0:	f005 fff8 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y+2, 'h');
 80191d4:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 80191d8:	4629      	mov	r1, r5
 80191da:	2268      	movs	r2, #104	; 0x68
 80191dc:	b280      	uxth	r0, r0
}
 80191de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+91, Y+2, 'h');
 80191e2:	f005 bfef 	b.w	801f1c4 <TFT_DrawChar>
 80191e6:	bf00      	nop
 80191e8:	200001c0 	.word	0x200001c0
 80191ec:	200001b0 	.word	0x200001b0

080191f0 <GUI_Text_A>:

void GUI_Text_A(uint16_t X, uint16_t Y)
{
 80191f0:	b538      	push	{r3, r4, r5, lr}
 80191f2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80191f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80191f8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80191fa:	f005 fef3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80191fe:	2063      	movs	r0, #99	; 0x63
 8019200:	f005 fef6 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019204:	4804      	ldr	r0, [pc, #16]	; (8019218 <GUI_Text_A+0x28>)
 8019206:	f005 fee7 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'A');
 801920a:	4629      	mov	r1, r5
 801920c:	4620      	mov	r0, r4
 801920e:	2241      	movs	r2, #65	; 0x41
}
 8019210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'A');
 8019214:	f005 bfd6 	b.w	801f1c4 <TFT_DrawChar>
 8019218:	200001b0 	.word	0x200001b0

0801921c <GUI_Text_D65>:

void GUI_Text_D65(uint16_t X, uint16_t Y)
{
 801921c:	b538      	push	{r3, r4, r5, lr}
 801921e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019220:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019224:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019226:	f005 fedd 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801922a:	2063      	movs	r0, #99	; 0x63
 801922c:	f005 fee0 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019230:	480b      	ldr	r0, [pc, #44]	; (8019260 <GUI_Text_D65+0x44>)
 8019232:	f005 fed1 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8019236:	4629      	mov	r1, r5
 8019238:	4620      	mov	r0, r4
 801923a:	2244      	movs	r2, #68	; 0x44
 801923c:	f005 ffc2 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '6');
 8019240:	f104 000f 	add.w	r0, r4, #15
 8019244:	4629      	mov	r1, r5
 8019246:	2236      	movs	r2, #54	; 0x36
 8019248:	b280      	uxth	r0, r0
 801924a:	f005 ffbb 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, '5');
 801924e:	f104 0020 	add.w	r0, r4, #32
 8019252:	4629      	mov	r1, r5
 8019254:	2235      	movs	r2, #53	; 0x35
 8019256:	b280      	uxth	r0, r0
}
 8019258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+32, Y, '5');
 801925c:	f005 bfb2 	b.w	801f1c4 <TFT_DrawChar>
 8019260:	200001b0 	.word	0x200001b0

08019264 <GUI_Text_C>:

void GUI_Text_C(uint16_t X, uint16_t Y)
{
 8019264:	b538      	push	{r3, r4, r5, lr}
 8019266:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019268:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801926c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801926e:	f005 feb9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019272:	2063      	movs	r0, #99	; 0x63
 8019274:	f005 febc 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019278:	4804      	ldr	r0, [pc, #16]	; (801928c <GUI_Text_C+0x28>)
 801927a:	f005 fead 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801927e:	4629      	mov	r1, r5
 8019280:	4620      	mov	r0, r4
 8019282:	2243      	movs	r2, #67	; 0x43
}
 8019284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'C');
 8019288:	f005 bf9c 	b.w	801f1c4 <TFT_DrawChar>
 801928c:	200001b0 	.word	0x200001b0

08019290 <GUI_Text_D50>:

void GUI_Text_D50(uint16_t X, uint16_t Y)
{
 8019290:	b538      	push	{r3, r4, r5, lr}
 8019292:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019294:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019298:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801929a:	f005 fea3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801929e:	2063      	movs	r0, #99	; 0x63
 80192a0:	f005 fea6 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80192a4:	480b      	ldr	r0, [pc, #44]	; (80192d4 <GUI_Text_D50+0x44>)
 80192a6:	f005 fe97 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 80192aa:	4629      	mov	r1, r5
 80192ac:	4620      	mov	r0, r4
 80192ae:	2244      	movs	r2, #68	; 0x44
 80192b0:	f005 ff88 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 80192b4:	f104 000f 	add.w	r0, r4, #15
 80192b8:	4629      	mov	r1, r5
 80192ba:	2235      	movs	r2, #53	; 0x35
 80192bc:	b280      	uxth	r0, r0
 80192be:	f005 ff81 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '0');
 80192c2:	f104 001f 	add.w	r0, r4, #31
 80192c6:	4629      	mov	r1, r5
 80192c8:	2230      	movs	r2, #48	; 0x30
 80192ca:	b280      	uxth	r0, r0
}
 80192cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '0');
 80192d0:	f005 bf78 	b.w	801f1c4 <TFT_DrawChar>
 80192d4:	200001b0 	.word	0x200001b0

080192d8 <GUI_Text_D55>:

void GUI_Text_D55(uint16_t X, uint16_t Y)
{
 80192d8:	b538      	push	{r3, r4, r5, lr}
 80192da:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80192dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80192e0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80192e2:	f005 fe7f 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80192e6:	2063      	movs	r0, #99	; 0x63
 80192e8:	f005 fe82 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80192ec:	480b      	ldr	r0, [pc, #44]	; (801931c <GUI_Text_D55+0x44>)
 80192ee:	f005 fe73 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 80192f2:	4629      	mov	r1, r5
 80192f4:	4620      	mov	r0, r4
 80192f6:	2244      	movs	r2, #68	; 0x44
 80192f8:	f005 ff64 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 80192fc:	f104 000f 	add.w	r0, r4, #15
 8019300:	4629      	mov	r1, r5
 8019302:	2235      	movs	r2, #53	; 0x35
 8019304:	b280      	uxth	r0, r0
 8019306:	f005 ff5d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 801930a:	f104 001f 	add.w	r0, r4, #31
 801930e:	4629      	mov	r1, r5
 8019310:	2235      	movs	r2, #53	; 0x35
 8019312:	b280      	uxth	r0, r0
}
 8019314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8019318:	f005 bf54 	b.w	801f1c4 <TFT_DrawChar>
 801931c:	200001b0 	.word	0x200001b0

08019320 <GUI_Text_D75>:

void GUI_Text_D75(uint16_t X, uint16_t Y)
{
 8019320:	b538      	push	{r3, r4, r5, lr}
 8019322:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019324:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019328:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801932a:	f005 fe5b 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801932e:	2063      	movs	r0, #99	; 0x63
 8019330:	f005 fe5e 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019334:	480b      	ldr	r0, [pc, #44]	; (8019364 <GUI_Text_D75+0x44>)
 8019336:	f005 fe4f 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 801933a:	4629      	mov	r1, r5
 801933c:	4620      	mov	r0, r4
 801933e:	2244      	movs	r2, #68	; 0x44
 8019340:	f005 ff40 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '7');
 8019344:	f104 000f 	add.w	r0, r4, #15
 8019348:	4629      	mov	r1, r5
 801934a:	2237      	movs	r2, #55	; 0x37
 801934c:	b280      	uxth	r0, r0
 801934e:	f005 ff39 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8019352:	f104 001f 	add.w	r0, r4, #31
 8019356:	4629      	mov	r1, r5
 8019358:	2235      	movs	r2, #53	; 0x35
 801935a:	b280      	uxth	r0, r0
}
 801935c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8019360:	f005 bf30 	b.w	801f1c4 <TFT_DrawChar>
 8019364:	200001b0 	.word	0x200001b0

08019368 <GUI_Text_CIE_xy>:


void GUI_Text_CIE_xy(uint16_t X, uint16_t Y)
{
 8019368:	b538      	push	{r3, r4, r5, lr}
 801936a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801936c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019370:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019372:	f005 fe37 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019376:	2063      	movs	r0, #99	; 0x63
 8019378:	f005 fe3a 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801937c:	4815      	ldr	r0, [pc, #84]	; (80193d4 <GUI_Text_CIE_xy+0x6c>)
 801937e:	f005 fe2b 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8019382:	4621      	mov	r1, r4
 8019384:	4628      	mov	r0, r5
 8019386:	2243      	movs	r2, #67	; 0x43
 8019388:	f005 ff1c 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801938c:	f105 000d 	add.w	r0, r5, #13
 8019390:	4621      	mov	r1, r4
 8019392:	2249      	movs	r2, #73	; 0x49
 8019394:	b280      	uxth	r0, r0
 8019396:	f005 ff15 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801939a:	f105 001b 	add.w	r0, r5, #27
 801939e:	4621      	mov	r1, r4
 80193a0:	2245      	movs	r2, #69	; 0x45
 80193a2:	b280      	uxth	r0, r0
 80193a4:	f005 ff0e 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80193a8:	3401      	adds	r4, #1
	TFT_SetFont(&Font16EN_arch_small);
 80193aa:	480b      	ldr	r0, [pc, #44]	; (80193d8 <GUI_Text_CIE_xy+0x70>)
 80193ac:	f005 fe14 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80193b0:	b2a4      	uxth	r4, r4
 80193b2:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80193b6:	4621      	mov	r1, r4
 80193b8:	2278      	movs	r2, #120	; 0x78
 80193ba:	b280      	uxth	r0, r0
 80193bc:	f005 ff02 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+61, Y+1, 'y');
 80193c0:	f105 003d 	add.w	r0, r5, #61	; 0x3d
 80193c4:	4621      	mov	r1, r4
 80193c6:	2279      	movs	r2, #121	; 0x79
 80193c8:	b280      	uxth	r0, r0
}
 80193ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+61, Y+1, 'y');
 80193ce:	f005 bef9 	b.w	801f1c4 <TFT_DrawChar>
 80193d2:	bf00      	nop
 80193d4:	200001b0 	.word	0x200001b0
 80193d8:	200001c0 	.word	0x200001c0

080193dc <GUI_Text_CRI>:

void GUI_Text_CRI(uint16_t X, uint16_t Y)
{
 80193dc:	b538      	push	{r3, r4, r5, lr}
 80193de:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80193e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80193e4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80193e6:	f005 fdfd 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80193ea:	2063      	movs	r0, #99	; 0x63
 80193ec:	f005 fe00 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80193f0:	480b      	ldr	r0, [pc, #44]	; (8019420 <GUI_Text_CRI+0x44>)
 80193f2:	f005 fdf1 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+27, Y, 'I');
 80193f6:	f104 001b 	add.w	r0, r4, #27
 80193fa:	4629      	mov	r1, r5
 80193fc:	2249      	movs	r2, #73	; 0x49
 80193fe:	b280      	uxth	r0, r0
 8019400:	f005 fee0 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'C');
 8019404:	4629      	mov	r1, r5
 8019406:	4620      	mov	r0, r4
 8019408:	2243      	movs	r2, #67	; 0x43
 801940a:	f005 fedb 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'R');
 801940e:	f104 000d 	add.w	r0, r4, #13
 8019412:	4629      	mov	r1, r5
 8019414:	2252      	movs	r2, #82	; 0x52
 8019416:	b280      	uxth	r0, r0
}
 8019418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+13, Y, 'R');
 801941c:	f005 bed2 	b.w	801f1c4 <TFT_DrawChar>
 8019420:	200001b0 	.word	0x200001b0

08019424 <GUI_Text_CQS>:

void GUI_Text_CQS(uint16_t X, uint16_t Y)
{
 8019424:	b538      	push	{r3, r4, r5, lr}
 8019426:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019428:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801942c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801942e:	f005 fdd9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019432:	2063      	movs	r0, #99	; 0x63
 8019434:	f005 fddc 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019438:	480b      	ldr	r0, [pc, #44]	; (8019468 <GUI_Text_CQS+0x44>)
 801943a:	f005 fdcd 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801943e:	4629      	mov	r1, r5
 8019440:	4620      	mov	r0, r4
 8019442:	2243      	movs	r2, #67	; 0x43
 8019444:	f005 febe 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'Q');
 8019448:	f104 000d 	add.w	r0, r4, #13
 801944c:	4629      	mov	r1, r5
 801944e:	2251      	movs	r2, #81	; 0x51
 8019450:	b280      	uxth	r0, r0
 8019452:	f005 feb7 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'S');
 8019456:	f104 001c 	add.w	r0, r4, #28
 801945a:	4629      	mov	r1, r5
 801945c:	2253      	movs	r2, #83	; 0x53
 801945e:	b280      	uxth	r0, r0
}
 8019460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'S');
 8019464:	f005 beae 	b.w	801f1c4 <TFT_DrawChar>
 8019468:	200001b0 	.word	0x200001b0

0801946c <GUI_Text_SP>:



void GUI_Text_SP(uint16_t X, uint16_t Y)
{
 801946c:	b538      	push	{r3, r4, r5, lr}
 801946e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019470:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019474:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019476:	f005 fdb5 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801947a:	2063      	movs	r0, #99	; 0x63
 801947c:	f005 fdb8 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019480:	480b      	ldr	r0, [pc, #44]	; (80194b0 <GUI_Text_SP+0x44>)
 8019482:	f005 fda9 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+13, Y, '/');
 8019486:	f104 000d 	add.w	r0, r4, #13
 801948a:	4629      	mov	r1, r5
 801948c:	222f      	movs	r2, #47	; 0x2f
 801948e:	b280      	uxth	r0, r0
 8019490:	f005 fe98 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'S');
 8019494:	4629      	mov	r1, r5
 8019496:	4620      	mov	r0, r4
 8019498:	2253      	movs	r2, #83	; 0x53
 801949a:	f005 fe93 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'P');
 801949e:	f104 001c 	add.w	r0, r4, #28
 80194a2:	4629      	mov	r1, r5
 80194a4:	2250      	movs	r2, #80	; 0x50
 80194a6:	b280      	uxth	r0, r0
}
 80194a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'P');
 80194ac:	f005 be8a 	b.w	801f1c4 <TFT_DrawChar>
 80194b0:	200001b0 	.word	0x200001b0

080194b4 <GUI_Text_lambda_d>:



void GUI_Text_lambda_d(uint16_t X, uint16_t Y)
{
 80194b4:	b538      	push	{r3, r4, r5, lr}
 80194b6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80194b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80194bc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80194be:	f005 fd91 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80194c2:	2063      	movs	r0, #99	; 0x63
 80194c4:	f005 fd94 	bl	801eff0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 80194c8:	480a      	ldr	r0, [pc, #40]	; (80194f4 <GUI_Text_lambda_d+0x40>)
 80194ca:	f005 fd85 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 80194ce:	4629      	mov	r1, r5
 80194d0:	227f      	movs	r2, #127	; 0x7f
 80194d2:	4620      	mov	r0, r4
 80194d4:	f005 fe76 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80194d8:	4807      	ldr	r0, [pc, #28]	; (80194f8 <GUI_Text_lambda_d+0x44>)
 80194da:	f005 fd7d 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'd');
 80194de:	1de9      	adds	r1, r5, #7
 80194e0:	f104 000f 	add.w	r0, r4, #15
 80194e4:	2264      	movs	r2, #100	; 0x64
 80194e6:	b289      	uxth	r1, r1
 80194e8:	b280      	uxth	r0, r0
}
 80194ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'd');
 80194ee:	f005 be69 	b.w	801f1c4 <TFT_DrawChar>
 80194f2:	bf00      	nop
 80194f4:	200001b0 	.word	0x200001b0
 80194f8:	200001c0 	.word	0x200001c0

080194fc <GUI_Text_V_lambda>:
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+15, Y+7, 'c');
}

void GUI_Text_V_lambda(uint16_t X, uint16_t Y)
{
 80194fc:	b538      	push	{r3, r4, r5, lr}
 80194fe:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019500:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019504:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019506:	f005 fd6d 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801950a:	2063      	movs	r0, #99	; 0x63
 801950c:	f005 fd70 	bl	801eff0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8019510:	4824      	ldr	r0, [pc, #144]	; (80195a4 <GUI_Text_V_lambda+0xa8>)
 8019512:	f005 fd61 	bl	801efd8 <TFT_SetFont>

	TFT_DrawChar(X+13, Y, '(');
 8019516:	f104 000d 	add.w	r0, r4, #13
 801951a:	4629      	mov	r1, r5
 801951c:	2228      	movs	r2, #40	; 0x28
 801951e:	b280      	uxth	r0, r0
 8019520:	f005 fe50 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y, ')');
 8019524:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8019528:	4629      	mov	r1, r5
 801952a:	2229      	movs	r2, #41	; 0x29
 801952c:	b280      	uxth	r0, r0
 801952e:	f005 fe49 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'V');
 8019532:	4629      	mov	r1, r5
 8019534:	4620      	mov	r0, r4
 8019536:	2256      	movs	r2, #86	; 0x56
 8019538:	f005 fe44 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y, '~'+1);
 801953c:	f104 001a 	add.w	r0, r4, #26
 8019540:	4629      	mov	r1, r5
 8019542:	227f      	movs	r2, #127	; 0x7f
 8019544:	b280      	uxth	r0, r0
 8019546:	f005 fe3d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y, '/');
 801954a:	f104 0035 	add.w	r0, r4, #53	; 0x35
 801954e:	4629      	mov	r1, r5
 8019550:	222f      	movs	r2, #47	; 0x2f
 8019552:	b280      	uxth	r0, r0
 8019554:	f005 fe36 	bl	801f1c4 <TFT_DrawChar>
		
	TFT_DrawChar(X+80, Y, '('-1);
 8019558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801955c:	4629      	mov	r1, r5
 801955e:	2227      	movs	r2, #39	; 0x27
 8019560:	b280      	uxth	r0, r0
 8019562:	f005 fe2f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y, '(');
 8019566:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 801956a:	4629      	mov	r1, r5
 801956c:	2228      	movs	r2, #40	; 0x28
 801956e:	b280      	uxth	r0, r0
 8019570:	f005 fe28 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+117, Y, ')');
 8019574:	f104 0075 	add.w	r0, r4, #117	; 0x75
 8019578:	4629      	mov	r1, r5
 801957a:	2229      	movs	r2, #41	; 0x29
 801957c:	b280      	uxth	r0, r0
 801957e:	f005 fe21 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+68, Y, 'V');
 8019582:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8019586:	4629      	mov	r1, r5
 8019588:	2256      	movs	r2, #86	; 0x56
 801958a:	b280      	uxth	r0, r0
 801958c:	f005 fe1a 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, '~'+1);
 8019590:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8019594:	4629      	mov	r1, r5
 8019596:	227f      	movs	r2, #127	; 0x7f
 8019598:	b280      	uxth	r0, r0
		
}
 801959a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, '~'+1);
 801959e:	f005 be11 	b.w	801f1c4 <TFT_DrawChar>
 80195a2:	bf00      	nop
 80195a4:	200001b0 	.word	0x200001b0

080195a8 <GUI_Text_deltaE>:

void GUI_Text_deltaE(uint16_t X, uint16_t Y)
{
 80195a8:	b538      	push	{r3, r4, r5, lr}
 80195aa:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80195ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80195b0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80195b2:	f005 fd17 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80195b6:	2063      	movs	r0, #99	; 0x63
 80195b8:	f005 fd1a 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80195bc:	4808      	ldr	r0, [pc, #32]	; (80195e0 <GUI_Text_deltaE+0x38>)
 80195be:	f005 fd0b 	bl	801efd8 <TFT_SetFont>

	TFT_DrawChar(X, Y, '~'+2);
 80195c2:	4629      	mov	r1, r5
 80195c4:	4620      	mov	r0, r4
 80195c6:	2280      	movs	r2, #128	; 0x80
 80195c8:	f005 fdfc 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+14, Y, 'E');
 80195cc:	f104 000e 	add.w	r0, r4, #14
 80195d0:	4629      	mov	r1, r5
 80195d2:	2245      	movs	r2, #69	; 0x45
 80195d4:	b280      	uxth	r0, r0
}
 80195d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+14, Y, 'E');
 80195da:	f005 bdf3 	b.w	801f1c4 <TFT_DrawChar>
 80195de:	bf00      	nop
 80195e0:	200001b0 	.word	0x200001b0

080195e4 <GUI_TextEn_umol>:

void GUI_TextEn_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 80195e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80195e8:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80195ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80195ee:	4616      	mov	r6, r2
 80195f0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80195f2:	f005 fcf7 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80195f6:	2063      	movs	r0, #99	; 0x63
 80195f8:	f005 fcfa 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 80195fc:	482b      	ldr	r0, [pc, #172]	; (80196ac <GUI_TextEn_umol+0xc8>)
 80195fe:	f005 fceb 	bl	801efd8 <TFT_SetFont>
	
	if(deg){
 8019602:	2e00      	cmp	r6, #0
 8019604:	d050      	beq.n	80196a8 <GUI_TextEn_umol+0xc4>
			TFT_DrawChar(X, Y, 'm'-65);
 8019606:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X, Y, 'z'-64);
 8019608:	4629      	mov	r1, r5
 801960a:	4620      	mov	r0, r4
 801960c:	f005 fdda 	bl	801f1c4 <TFT_DrawChar>
	}
	TFT_DrawChar(X+8, Y, 'm'-65);
	TFT_DrawChar(X+16, Y, 'o'-65);
 8019610:	f104 0710 	add.w	r7, r4, #16
	TFT_DrawChar(X+8, Y, 'm'-65);
 8019614:	f104 0008 	add.w	r0, r4, #8
 8019618:	4629      	mov	r1, r5
	TFT_DrawChar(X+16, Y, 'o'-65);
 801961a:	b2bf      	uxth	r7, r7
	TFT_DrawChar(X+8, Y, 'm'-65);
 801961c:	222c      	movs	r2, #44	; 0x2c
 801961e:	b280      	uxth	r0, r0
 8019620:	f005 fdd0 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'o'-65);
 8019624:	4629      	mov	r1, r5
 8019626:	4638      	mov	r0, r7
 8019628:	222e      	movs	r2, #46	; 0x2e
 801962a:	f005 fdcb 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+22, Y, 'l'-65);
 801962e:	f104 0016 	add.w	r0, r4, #22
 8019632:	4629      	mov	r1, r5
 8019634:	222b      	movs	r2, #43	; 0x2b
 8019636:	b280      	uxth	r0, r0
 8019638:	f005 fdc4 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 801963c:	f105 030a 	add.w	r3, r5, #10
 8019640:	b29b      	uxth	r3, r3
 8019642:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8019646:	f104 0219 	add.w	r2, r4, #25
 801964a:	4619      	mov	r1, r3
 801964c:	4620      	mov	r0, r4
 801964e:	f8cd 8000 	str.w	r8, [sp]
 8019652:	b292      	uxth	r2, r2
	
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8019654:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8019658:	f005 f9b2 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 801965c:	b2b6      	uxth	r6, r6
 801965e:	f104 000a 	add.w	r0, r4, #10
 8019662:	4631      	mov	r1, r6
 8019664:	223b      	movs	r2, #59	; 0x3b
 8019666:	b280      	uxth	r0, r0
 8019668:	f005 fdac 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+2, Y+11, 'm'-65);
 801966c:	1ca0      	adds	r0, r4, #2
 801966e:	4631      	mov	r1, r6
 8019670:	222c      	movs	r2, #44	; 0x2c
 8019672:	b280      	uxth	r0, r0
 8019674:	f005 fda6 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawRectangle(X+16, Y+14, X+17, Y+15, TFT_White);
 8019678:	f105 030f 	add.w	r3, r5, #15
 801967c:	f104 0211 	add.w	r2, r4, #17
 8019680:	f105 010e 	add.w	r1, r5, #14
 8019684:	4638      	mov	r0, r7
 8019686:	f8cd 8000 	str.w	r8, [sp]
 801968a:	b29b      	uxth	r3, r3
 801968c:	b292      	uxth	r2, r2
 801968e:	b289      	uxth	r1, r1
 8019690:	f005 fa18 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8019694:	f104 0013 	add.w	r0, r4, #19
 8019698:	2232      	movs	r2, #50	; 0x32
 801969a:	4631      	mov	r1, r6
 801969c:	b280      	uxth	r0, r0
}
 801969e:	b002      	add	sp, #8
 80196a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+19, Y+11, 's'-65);
 80196a4:	f005 bd8e 	b.w	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X, Y, 'z'-64);
 80196a8:	223a      	movs	r2, #58	; 0x3a
 80196aa:	e7ad      	b.n	8019608 <GUI_TextEn_umol+0x24>
 80196ac:	20000190 	.word	0x20000190

080196b0 <GUI_TextEn_umol_sr>:

void GUI_TextEn_umol_sr(uint16_t X, uint16_t Y, uint8_t deg)
{
 80196b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80196b4:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80196b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80196ba:	460d      	mov	r5, r1
 80196bc:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 80196be:	f005 fc91 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80196c2:	2063      	movs	r0, #99	; 0x63
 80196c4:	f005 fc94 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 80196c8:	483b      	ldr	r0, [pc, #236]	; (80197b8 <GUI_TextEn_umol_sr+0x108>)
 80196ca:	f005 fc85 	bl	801efd8 <TFT_SetFont>
 80196ce:	f104 0009 	add.w	r0, r4, #9
	
	if(deg){
 80196d2:	2e00      	cmp	r6, #0
 80196d4:	d06d      	beq.n	80197b2 <GUI_TextEn_umol_sr+0x102>
			TFT_DrawChar(X+9, Y, 'm'-65);
 80196d6:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X+9, Y, 'z'-64);
 80196d8:	4629      	mov	r1, r5
 80196da:	b280      	uxth	r0, r0
 80196dc:	f005 fd72 	bl	801f1c4 <TFT_DrawChar>
	}
	TFT_DrawChar(X+17, Y, 'm'-65);
 80196e0:	f104 0011 	add.w	r0, r4, #17
 80196e4:	4629      	mov	r1, r5
 80196e6:	222c      	movs	r2, #44	; 0x2c
 80196e8:	b280      	uxth	r0, r0
 80196ea:	f005 fd6b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+25, Y, 'o'-65);
 80196ee:	f104 0019 	add.w	r0, r4, #25
 80196f2:	4629      	mov	r1, r5
 80196f4:	222e      	movs	r2, #46	; 0x2e
 80196f6:	b280      	uxth	r0, r0
 80196f8:	f005 fd64 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'l'-65);
 80196fc:	f104 001f 	add.w	r0, r4, #31
 8019700:	4629      	mov	r1, r5
 8019702:	222b      	movs	r2, #43	; 0x2b
 8019704:	b280      	uxth	r0, r0
 8019706:	f005 fd5d 	bl	801f1c4 <TFT_DrawChar>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 801970a:	f105 030a 	add.w	r3, r5, #10
 801970e:	b29b      	uxth	r3, r3
 8019710:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8019714:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 8019718:	1ce0      	adds	r0, r4, #3
 801971a:	4619      	mov	r1, r3
 801971c:	f8cd 8000 	str.w	r8, [sp]
 8019720:	b292      	uxth	r2, r2
 8019722:	b280      	uxth	r0, r0
	
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 8019724:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8019728:	f005 f94a 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 801972c:	b2b6      	uxth	r6, r6
 801972e:	f104 000d 	add.w	r0, r4, #13
 8019732:	4631      	mov	r1, r6
 8019734:	223b      	movs	r2, #59	; 0x3b
 8019736:	b280      	uxth	r0, r0
 8019738:	f005 fd44 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 801973c:	1d60      	adds	r0, r4, #5
 801973e:	4631      	mov	r1, r6
 8019740:	222c      	movs	r2, #44	; 0x2c
 8019742:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8019744:	f105 070e 	add.w	r7, r5, #14
 8019748:	350f      	adds	r5, #15
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 801974a:	f005 fd3b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801974e:	b2bf      	uxth	r7, r7
 8019750:	b2ad      	uxth	r5, r5
 8019752:	f104 0214 	add.w	r2, r4, #20
 8019756:	f104 0013 	add.w	r0, r4, #19
 801975a:	462b      	mov	r3, r5
 801975c:	4639      	mov	r1, r7
 801975e:	f8cd 8000 	str.w	r8, [sp]
 8019762:	b292      	uxth	r2, r2
 8019764:	b280      	uxth	r0, r0
 8019766:	f005 f9ad 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawChar(X+22, Y+11, 's'-65);
 801976a:	f104 0016 	add.w	r0, r4, #22
 801976e:	4631      	mov	r1, r6
 8019770:	2232      	movs	r2, #50	; 0x32
 8019772:	b280      	uxth	r0, r0
 8019774:	f005 fd26 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawRectangle(X+30, Y+14, X+36, Y+15, TFT_White);
 8019778:	f104 0224 	add.w	r2, r4, #36	; 0x24
 801977c:	f104 001e 	add.w	r0, r4, #30
 8019780:	462b      	mov	r3, r5
 8019782:	4639      	mov	r1, r7
 8019784:	f8cd 8000 	str.w	r8, [sp]
 8019788:	b292      	uxth	r2, r2
 801978a:	b280      	uxth	r0, r0
 801978c:	f005 f99a 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawChar(X+32, Y+11, 's'-65);
 8019790:	f104 0020 	add.w	r0, r4, #32
 8019794:	4631      	mov	r1, r6
 8019796:	2232      	movs	r2, #50	; 0x32
 8019798:	b280      	uxth	r0, r0
 801979a:	f005 fd13 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 801979e:	f104 0027 	add.w	r0, r4, #39	; 0x27
 80197a2:	2231      	movs	r2, #49	; 0x31
 80197a4:	4631      	mov	r1, r6
 80197a6:	b280      	uxth	r0, r0
}
 80197a8:	b002      	add	sp, #8
 80197aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 80197ae:	f005 bd09 	b.w	801f1c4 <TFT_DrawChar>
			TFT_DrawChar(X+9, Y, 'z'-64);
 80197b2:	223a      	movs	r2, #58	; 0x3a
 80197b4:	e790      	b.n	80196d8 <GUI_TextEn_umol_sr+0x28>
 80197b6:	bf00      	nop
 80197b8:	20000190 	.word	0x20000190

080197bc <GUI_Text_On>:


void GUI_Text_On(uint16_t X, uint16_t Y)
{
 80197bc:	b538      	push	{r3, r4, r5, lr}
 80197be:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80197c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80197c4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80197c6:	f005 fc0d 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80197ca:	2063      	movs	r0, #99	; 0x63
 80197cc:	f005 fc10 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80197d0:	480a      	ldr	r0, [pc, #40]	; (80197fc <GUI_Text_On+0x40>)
 80197d2:	f005 fc01 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 80197d6:	4629      	mov	r1, r5
 80197d8:	224f      	movs	r2, #79	; 0x4f
 80197da:	4620      	mov	r0, r4
 80197dc:	f005 fcf2 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80197e0:	4807      	ldr	r0, [pc, #28]	; (8019800 <GUI_Text_On+0x44>)
 80197e2:	f005 fbf9 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 80197e6:	1ca9      	adds	r1, r5, #2
 80197e8:	f104 0010 	add.w	r0, r4, #16
 80197ec:	226e      	movs	r2, #110	; 0x6e
 80197ee:	b289      	uxth	r1, r1
 80197f0:	b280      	uxth	r0, r0
	
}
 80197f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+16, Y+2, 'n');
 80197f6:	f005 bce5 	b.w	801f1c4 <TFT_DrawChar>
 80197fa:	bf00      	nop
 80197fc:	200001b0 	.word	0x200001b0
 8019800:	200001c0 	.word	0x200001c0

08019804 <GUI_Text_Off>:

void GUI_Text_Off(uint16_t X, uint16_t Y)
{
 8019804:	b570      	push	{r4, r5, r6, lr}
 8019806:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019808:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801980c:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 801980e:	f005 fbe9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019812:	2063      	movs	r0, #99	; 0x63
 8019814:	f005 fbec 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+13, Y+2, 'f');
 8019818:	1cb4      	adds	r4, r6, #2
	TFT_SetFont(&Font16EN_arch_small);
 801981a:	480e      	ldr	r0, [pc, #56]	; (8019854 <GUI_Text_Off+0x50>)
 801981c:	f005 fbdc 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'f');
 8019820:	b2a4      	uxth	r4, r4
 8019822:	f105 000d 	add.w	r0, r5, #13
 8019826:	4621      	mov	r1, r4
 8019828:	2266      	movs	r2, #102	; 0x66
 801982a:	b280      	uxth	r0, r0
 801982c:	f005 fcca 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y+2, 'f');
 8019830:	f105 0017 	add.w	r0, r5, #23
 8019834:	4621      	mov	r1, r4
 8019836:	2266      	movs	r2, #102	; 0x66
 8019838:	b280      	uxth	r0, r0
 801983a:	f005 fcc3 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 801983e:	4806      	ldr	r0, [pc, #24]	; (8019858 <GUI_Text_Off+0x54>)
 8019840:	f005 fbca 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 8019844:	4631      	mov	r1, r6
 8019846:	4628      	mov	r0, r5
 8019848:	224f      	movs	r2, #79	; 0x4f
}
 801984a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X, Y, 'O');
 801984e:	f005 bcb9 	b.w	801f1c4 <TFT_DrawChar>
 8019852:	bf00      	nop
 8019854:	200001c0 	.word	0x200001c0
 8019858:	200001b0 	.word	0x200001b0

0801985c <GUI_Text_EbEr>:

void GUI_Text_EbEr(uint16_t X, uint16_t Y)
{
 801985c:	b538      	push	{r3, r4, r5, lr}
 801985e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019860:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019864:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019866:	f005 fbbd 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801986a:	2063      	movs	r0, #99	; 0x63
 801986c:	f005 fbc0 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019870:	4815      	ldr	r0, [pc, #84]	; (80198c8 <GUI_Text_EbEr+0x6c>)
 8019872:	f005 fbb1 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8019876:	1ca1      	adds	r1, r4, #2
 8019878:	f105 0013 	add.w	r0, r5, #19
 801987c:	222c      	movs	r2, #44	; 0x2c
 801987e:	b289      	uxth	r1, r1
 8019880:	b280      	uxth	r0, r0
 8019882:	f005 fc9f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'E');
 8019886:	4621      	mov	r1, r4
 8019888:	4628      	mov	r0, r5
 801988a:	2245      	movs	r2, #69	; 0x45
 801988c:	f005 fc9a 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, 'E');
 8019890:	f105 0020 	add.w	r0, r5, #32
 8019894:	4621      	mov	r1, r4
 8019896:	2245      	movs	r2, #69	; 0x45
 8019898:	b280      	uxth	r0, r0
 801989a:	f005 fc93 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 801989e:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 80198a0:	480a      	ldr	r0, [pc, #40]	; (80198cc <GUI_Text_EbEr+0x70>)
 80198a2:	f005 fb99 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 80198a6:	b2a4      	uxth	r4, r4
 80198a8:	f105 0012 	add.w	r0, r5, #18
 80198ac:	4621      	mov	r1, r4
 80198ae:	2242      	movs	r2, #66	; 0x42
 80198b0:	b280      	uxth	r0, r0
 80198b2:	f005 fc87 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+12, 'R');
 80198b6:	f105 0032 	add.w	r0, r5, #50	; 0x32
 80198ba:	4621      	mov	r1, r4
 80198bc:	2252      	movs	r2, #82	; 0x52
 80198be:	b280      	uxth	r0, r0
}
 80198c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+50, Y+12, 'R');
 80198c4:	f005 bc7e 	b.w	801f1c4 <TFT_DrawChar>
 80198c8:	200001b0 	.word	0x200001b0
 80198cc:	20000218 	.word	0x20000218

080198d0 <GUI_Text_LbLr>:

void GUI_Text_LbLr(uint16_t X, uint16_t Y)
{
 80198d0:	b538      	push	{r3, r4, r5, lr}
 80198d2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80198d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80198d8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80198da:	f005 fb83 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80198de:	2063      	movs	r0, #99	; 0x63
 80198e0:	f005 fb86 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80198e4:	4815      	ldr	r0, [pc, #84]	; (801993c <GUI_Text_LbLr+0x6c>)
 80198e6:	f005 fb77 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 80198ea:	1ca1      	adds	r1, r4, #2
 80198ec:	f105 0013 	add.w	r0, r5, #19
 80198f0:	222c      	movs	r2, #44	; 0x2c
 80198f2:	b289      	uxth	r1, r1
 80198f4:	b280      	uxth	r0, r0
 80198f6:	f005 fc65 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'L');
 80198fa:	4621      	mov	r1, r4
 80198fc:	4628      	mov	r0, r5
 80198fe:	224c      	movs	r2, #76	; 0x4c
 8019900:	f005 fc60 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y, 'L');
 8019904:	f105 001e 	add.w	r0, r5, #30
 8019908:	4621      	mov	r1, r4
 801990a:	224c      	movs	r2, #76	; 0x4c
 801990c:	b280      	uxth	r0, r0
 801990e:	f005 fc59 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8019912:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8019914:	480a      	ldr	r0, [pc, #40]	; (8019940 <GUI_Text_LbLr+0x70>)
 8019916:	f005 fb5f 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 801991a:	b2a4      	uxth	r4, r4
 801991c:	f105 0012 	add.w	r0, r5, #18
 8019920:	4621      	mov	r1, r4
 8019922:	2242      	movs	r2, #66	; 0x42
 8019924:	b280      	uxth	r0, r0
 8019926:	f005 fc4d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+48, Y+12, 'R');
 801992a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 801992e:	4621      	mov	r1, r4
 8019930:	2252      	movs	r2, #82	; 0x52
 8019932:	b280      	uxth	r0, r0
}
 8019934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+48, Y+12, 'R');
 8019938:	f005 bc44 	b.w	801f1c4 <TFT_DrawChar>
 801993c:	200001b0 	.word	0x200001b0
 8019940:	20000218 	.word	0x20000218

08019944 <GUI_TextEn_Language>:
///////////////////////////////////////////////////////////////////////
void GUI_TextEn_Language(uint16_t X, uint16_t Y)
{	/* Print word 'Language' */
 8019944:	b538      	push	{r3, r4, r5, lr}
 8019946:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019948:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	/* Print word 'Language' */
 801994c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801994e:	f005 fb49 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019952:	2063      	movs	r0, #99	; 0x63
 8019954:	f005 fb4c 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019958:	481f      	ldr	r0, [pc, #124]	; (80199d8 <GUI_TextEn_Language+0x94>)
 801995a:	f005 fb3d 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 801995e:	4621      	mov	r1, r4
 8019960:	224c      	movs	r2, #76	; 0x4c
 8019962:	4628      	mov	r0, r5
 8019964:	f005 fc2e 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+14, Y+2, 'a');
 8019968:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801996a:	481c      	ldr	r0, [pc, #112]	; (80199dc <GUI_TextEn_Language+0x98>)
	TFT_DrawChar(X+14, Y+2, 'a');
 801996c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801996e:	f005 fb33 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+14, Y+2, 'a');
 8019972:	f105 000e 	add.w	r0, r5, #14
 8019976:	4621      	mov	r1, r4
 8019978:	2261      	movs	r2, #97	; 0x61
 801997a:	b280      	uxth	r0, r0
 801997c:	f005 fc22 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y+2, 'n');
 8019980:	f105 001a 	add.w	r0, r5, #26
 8019984:	4621      	mov	r1, r4
 8019986:	226e      	movs	r2, #110	; 0x6e
 8019988:	b280      	uxth	r0, r0
 801998a:	f005 fc1b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+2, 'g');
 801998e:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8019992:	4621      	mov	r1, r4
 8019994:	2267      	movs	r2, #103	; 0x67
 8019996:	b280      	uxth	r0, r0
 8019998:	f005 fc14 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'a');
 801999c:	f105 0041 	add.w	r0, r5, #65	; 0x41
 80199a0:	4621      	mov	r1, r4
 80199a2:	2261      	movs	r2, #97	; 0x61
 80199a4:	b280      	uxth	r0, r0
 80199a6:	f005 fc0d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+52, Y+2, 'u');
 80199aa:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80199ae:	4621      	mov	r1, r4
 80199b0:	2275      	movs	r2, #117	; 0x75
 80199b2:	b280      	uxth	r0, r0
 80199b4:	f005 fc06 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+77, Y+2, 'g');
 80199b8:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 80199bc:	4621      	mov	r1, r4
 80199be:	2267      	movs	r2, #103	; 0x67
 80199c0:	b280      	uxth	r0, r0
 80199c2:	f005 fbff 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y+2, 'e');
 80199c6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80199ca:	4621      	mov	r1, r4
 80199cc:	2265      	movs	r2, #101	; 0x65
 80199ce:	b280      	uxth	r0, r0
}
 80199d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+90, Y+2, 'e');
 80199d4:	f005 bbf6 	b.w	801f1c4 <TFT_DrawChar>
 80199d8:	200001b8 	.word	0x200001b8
 80199dc:	200001c8 	.word	0x200001c8

080199e0 <GUI_TextEn_English>:
void GUI_TextEn_English(uint16_t X, uint16_t Y)
{
 80199e0:	b538      	push	{r3, r4, r5, lr}
 80199e2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80199e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80199e8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80199ea:	f005 fafb 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80199ee:	2063      	movs	r0, #99	; 0x63
 80199f0:	f005 fafe 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80199f4:	481c      	ldr	r0, [pc, #112]	; (8019a68 <GUI_TextEn_English+0x88>)
 80199f6:	f005 faef 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'E');
 80199fa:	4621      	mov	r1, r4
 80199fc:	2245      	movs	r2, #69	; 0x45
 80199fe:	4628      	mov	r0, r5
 8019a00:	f005 fbe0 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'n');
 8019a04:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019a06:	4819      	ldr	r0, [pc, #100]	; (8019a6c <GUI_TextEn_English+0x8c>)
	TFT_DrawChar(X+16, Y+2, 'n');
 8019a08:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019a0a:	f005 fae5 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8019a0e:	f105 0010 	add.w	r0, r5, #16
 8019a12:	4621      	mov	r1, r4
 8019a14:	226e      	movs	r2, #110	; 0x6e
 8019a16:	b280      	uxth	r0, r0
 8019a18:	f005 fbd4 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'g');
 8019a1c:	f105 001d 	add.w	r0, r5, #29
 8019a20:	4621      	mov	r1, r4
 8019a22:	2267      	movs	r2, #103	; 0x67
 8019a24:	b280      	uxth	r0, r0
 8019a26:	f005 fbcd 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'l');
 8019a2a:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8019a2e:	4621      	mov	r1, r4
 8019a30:	226c      	movs	r2, #108	; 0x6c
 8019a32:	b280      	uxth	r0, r0
 8019a34:	f005 fbc6 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 'i');
 8019a38:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 8019a3c:	4621      	mov	r1, r4
 8019a3e:	2269      	movs	r2, #105	; 0x69
 8019a40:	b280      	uxth	r0, r0
 8019a42:	f005 fbbf 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 's');
 8019a46:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8019a4a:	4621      	mov	r1, r4
 8019a4c:	2273      	movs	r2, #115	; 0x73
 8019a4e:	b280      	uxth	r0, r0
 8019a50:	f005 fbb8 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'h');
 8019a54:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8019a58:	4621      	mov	r1, r4
 8019a5a:	2268      	movs	r2, #104	; 0x68
 8019a5c:	b280      	uxth	r0, r0
	

}
 8019a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+65, Y+2, 'h');
 8019a62:	f005 bbaf 	b.w	801f1c4 <TFT_DrawChar>
 8019a66:	bf00      	nop
 8019a68:	200001b8 	.word	0x200001b8
 8019a6c:	200001c8 	.word	0x200001c8

08019a70 <GUI_TextEn_Info>:
void GUI_TextEn_Info(uint16_t X, uint16_t Y)
{
 8019a70:	b538      	push	{r3, r4, r5, lr}
 8019a72:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019a74:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019a78:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019a7a:	f005 fab3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019a7e:	2063      	movs	r0, #99	; 0x63
 8019a80:	f005 fab6 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019a84:	4811      	ldr	r0, [pc, #68]	; (8019acc <GUI_TextEn_Info+0x5c>)
 8019a86:	f005 faa7 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8019a8a:	4621      	mov	r1, r4
 8019a8c:	2249      	movs	r2, #73	; 0x49
 8019a8e:	4628      	mov	r0, r5
 8019a90:	f005 fb98 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+18, Y+2, 'f');
 8019a94:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019a96:	480e      	ldr	r0, [pc, #56]	; (8019ad0 <GUI_TextEn_Info+0x60>)
 8019a98:	f005 fa9e 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'f');
 8019a9c:	b2a4      	uxth	r4, r4
 8019a9e:	f105 0012 	add.w	r0, r5, #18
 8019aa2:	4621      	mov	r1, r4
 8019aa4:	2266      	movs	r2, #102	; 0x66
 8019aa6:	b280      	uxth	r0, r0
 8019aa8:	f005 fb8c 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+8, Y+2, 'n');
 8019aac:	f105 0008 	add.w	r0, r5, #8
 8019ab0:	4621      	mov	r1, r4
 8019ab2:	226e      	movs	r2, #110	; 0x6e
 8019ab4:	b280      	uxth	r0, r0
 8019ab6:	f005 fb85 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'o');
 8019aba:	f105 001d 	add.w	r0, r5, #29
 8019abe:	4621      	mov	r1, r4
 8019ac0:	226f      	movs	r2, #111	; 0x6f
 8019ac2:	b280      	uxth	r0, r0
}
 8019ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+29, Y+2, 'o');
 8019ac8:	f005 bb7c 	b.w	801f1c4 <TFT_DrawChar>
 8019acc:	200001b8 	.word	0x200001b8
 8019ad0:	200001c8 	.word	0x200001c8

08019ad4 <GUI_TextEn_Radiance>:
void GUI_TextEn_Radiance(uint16_t X, uint16_t Y)
{
 8019ad4:	b538      	push	{r3, r4, r5, lr}
 8019ad6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019ad8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019adc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019ade:	f005 fa81 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019ae2:	2063      	movs	r0, #99	; 0x63
 8019ae4:	f005 fa84 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019ae8:	481f      	ldr	r0, [pc, #124]	; (8019b68 <GUI_TextEn_Radiance+0x94>)
 8019aea:	f005 fa75 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'R');
 8019aee:	4621      	mov	r1, r4
 8019af0:	2252      	movs	r2, #82	; 0x52
 8019af2:	4628      	mov	r0, r5
 8019af4:	f005 fb66 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'a');
 8019af8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019afa:	481c      	ldr	r0, [pc, #112]	; (8019b6c <GUI_TextEn_Radiance+0x98>)
	TFT_DrawChar(X+16, Y+2, 'a');
 8019afc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019afe:	f005 fa6b 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 8019b02:	f105 0010 	add.w	r0, r5, #16
 8019b06:	4621      	mov	r1, r4
 8019b08:	2261      	movs	r2, #97	; 0x61
 8019b0a:	b280      	uxth	r0, r0
 8019b0c:	f005 fb5a 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'd');
 8019b10:	f105 001c 	add.w	r0, r5, #28
 8019b14:	4621      	mov	r1, r4
 8019b16:	2264      	movs	r2, #100	; 0x64
 8019b18:	b280      	uxth	r0, r0
 8019b1a:	f005 fb53 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8019b1e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8019b22:	4621      	mov	r1, r4
 8019b24:	2269      	movs	r2, #105	; 0x69
 8019b26:	b280      	uxth	r0, r0
 8019b28:	f005 fb4c 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'a');
 8019b2c:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8019b30:	4621      	mov	r1, r4
 8019b32:	2261      	movs	r2, #97	; 0x61
 8019b34:	b280      	uxth	r0, r0
 8019b36:	f005 fb45 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y+2, 'n');
 8019b3a:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8019b3e:	4621      	mov	r1, r4
 8019b40:	226e      	movs	r2, #110	; 0x6e
 8019b42:	b280      	uxth	r0, r0
 8019b44:	f005 fb3e 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'c');
 8019b48:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8019b4c:	4621      	mov	r1, r4
 8019b4e:	2263      	movs	r2, #99	; 0x63
 8019b50:	b280      	uxth	r0, r0
 8019b52:	f005 fb37 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+83, Y+2, 'e');
 8019b56:	f105 0053 	add.w	r0, r5, #83	; 0x53
 8019b5a:	4621      	mov	r1, r4
 8019b5c:	2265      	movs	r2, #101	; 0x65
 8019b5e:	b280      	uxth	r0, r0
}
 8019b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+83, Y+2, 'e');
 8019b64:	f005 bb2e 	b.w	801f1c4 <TFT_DrawChar>
 8019b68:	200001b8 	.word	0x200001b8
 8019b6c:	200001c8 	.word	0x200001c8

08019b70 <GUI_TextEn_Irradiance>:
void GUI_TextEn_Irradiance(uint16_t X, uint16_t Y)
{
 8019b70:	b538      	push	{r3, r4, r5, lr}
 8019b72:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019b74:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019b78:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019b7a:	f005 fa33 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019b7e:	2063      	movs	r0, #99	; 0x63
 8019b80:	f005 fa36 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019b84:	4826      	ldr	r0, [pc, #152]	; (8019c20 <GUI_TextEn_Irradiance+0xb0>)
 8019b86:	f005 fa27 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8019b8a:	4621      	mov	r1, r4
 8019b8c:	2249      	movs	r2, #73	; 0x49
 8019b8e:	4628      	mov	r0, r5
 8019b90:	f005 fb18 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+9, Y+2, 'r');
 8019b94:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019b96:	4823      	ldr	r0, [pc, #140]	; (8019c24 <GUI_TextEn_Irradiance+0xb4>)
	TFT_DrawChar(X+9, Y+2, 'r');
 8019b98:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019b9a:	f005 fa1d 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+9, Y+2, 'r');
 8019b9e:	f105 0009 	add.w	r0, r5, #9
 8019ba2:	4621      	mov	r1, r4
 8019ba4:	2272      	movs	r2, #114	; 0x72
 8019ba6:	b280      	uxth	r0, r0
 8019ba8:	f005 fb0c 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+2, 'r');
 8019bac:	f105 0015 	add.w	r0, r5, #21
 8019bb0:	4621      	mov	r1, r4
 8019bb2:	2272      	movs	r2, #114	; 0x72
 8019bb4:	b280      	uxth	r0, r0
 8019bb6:	f005 fb05 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'a');
 8019bba:	f105 0020 	add.w	r0, r5, #32
 8019bbe:	4621      	mov	r1, r4
 8019bc0:	2261      	movs	r2, #97	; 0x61
 8019bc2:	b280      	uxth	r0, r0
 8019bc4:	f005 fafe 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y+2, 'd');
 8019bc8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8019bcc:	4621      	mov	r1, r4
 8019bce:	2264      	movs	r2, #100	; 0x64
 8019bd0:	b280      	uxth	r0, r0
 8019bd2:	f005 faf7 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'i');
 8019bd6:	f105 0039 	add.w	r0, r5, #57	; 0x39
 8019bda:	4621      	mov	r1, r4
 8019bdc:	2269      	movs	r2, #105	; 0x69
 8019bde:	b280      	uxth	r0, r0
 8019be0:	f005 faf0 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+62, Y+2, 'a');
 8019be4:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 8019be8:	4621      	mov	r1, r4
 8019bea:	2261      	movs	r2, #97	; 0x61
 8019bec:	b280      	uxth	r0, r0
 8019bee:	f005 fae9 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y+2, 'n');
 8019bf2:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8019bf6:	4621      	mov	r1, r4
 8019bf8:	226e      	movs	r2, #110	; 0x6e
 8019bfa:	b280      	uxth	r0, r0
 8019bfc:	f005 fae2 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'c');
 8019c00:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8019c04:	4621      	mov	r1, r4
 8019c06:	2263      	movs	r2, #99	; 0x63
 8019c08:	b280      	uxth	r0, r0
 8019c0a:	f005 fadb 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8019c0e:	f105 0063 	add.w	r0, r5, #99	; 0x63
 8019c12:	4621      	mov	r1, r4
 8019c14:	2265      	movs	r2, #101	; 0x65
 8019c16:	b280      	uxth	r0, r0
}
 8019c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+99, Y+2, 'e');
 8019c1c:	f005 bad2 	b.w	801f1c4 <TFT_DrawChar>
 8019c20:	200001b8 	.word	0x200001b8
 8019c24:	200001c8 	.word	0x200001c8

08019c28 <GUI_TextMsgEn_HighIrradiance>:

void GUI_TextMsgEn_HighIrradiance(uint16_t X, uint16_t Y)
{
 8019c28:	b538      	push	{r3, r4, r5, lr}
 8019c2a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019c2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019c30:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019c32:	f005 f9d7 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019c36:	2063      	movs	r0, #99	; 0x63
 8019c38:	f005 f9da 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019c3c:	4834      	ldr	r0, [pc, #208]	; (8019d10 <GUI_TextMsgEn_HighIrradiance+0xe8>)
 8019c3e:	f005 f9cb 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 8019c42:	4621      	mov	r1, r4
 8019c44:	2248      	movs	r2, #72	; 0x48
 8019c46:	4628      	mov	r0, r5
 8019c48:	f005 fabc 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8019c4c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019c4e:	4831      	ldr	r0, [pc, #196]	; (8019d14 <GUI_TextMsgEn_HighIrradiance+0xec>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8019c50:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019c52:	f005 f9c1 	bl	801efd8 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 8019c56:	f105 0010 	add.w	r0, r5, #16
 8019c5a:	4621      	mov	r1, r4
 8019c5c:	2269      	movs	r2, #105	; 0x69
 8019c5e:	b280      	uxth	r0, r0
 8019c60:	f005 fab0 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8019c64:	f105 0017 	add.w	r0, r5, #23
 8019c68:	4621      	mov	r1, r4
 8019c6a:	2267      	movs	r2, #103	; 0x67
 8019c6c:	b280      	uxth	r0, r0
 8019c6e:	f005 faa9 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 8019c72:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8019c76:	4621      	mov	r1, r4
 8019c78:	2268      	movs	r2, #104	; 0x68
 8019c7a:	b280      	uxth	r0, r0
 8019c7c:	f005 faa2 	bl	801f1c4 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'i');
 8019c80:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8019c84:	4621      	mov	r1, r4
 8019c86:	2269      	movs	r2, #105	; 0x69
 8019c88:	b280      	uxth	r0, r0
 8019c8a:	f005 fa9b 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+67, Y+2, 'r');
 8019c8e:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8019c92:	4621      	mov	r1, r4
 8019c94:	2272      	movs	r2, #114	; 0x72
 8019c96:	b280      	uxth	r0, r0
 8019c98:	f005 fa94 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+79, Y+2, 'r');
 8019c9c:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8019ca0:	4621      	mov	r1, r4
 8019ca2:	2272      	movs	r2, #114	; 0x72
 8019ca4:	b280      	uxth	r0, r0
 8019ca6:	f005 fa8d 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'a');
 8019caa:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019cae:	4621      	mov	r1, r4
 8019cb0:	2261      	movs	r2, #97	; 0x61
 8019cb2:	b280      	uxth	r0, r0
 8019cb4:	f005 fa86 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+102, Y+2, 'd');
 8019cb8:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8019cbc:	4621      	mov	r1, r4
 8019cbe:	2264      	movs	r2, #100	; 0x64
 8019cc0:	b280      	uxth	r0, r0
 8019cc2:	f005 fa7f 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+115, Y+2, 'i');
 8019cc6:	f105 0073 	add.w	r0, r5, #115	; 0x73
 8019cca:	4621      	mov	r1, r4
 8019ccc:	2269      	movs	r2, #105	; 0x69
 8019cce:	b280      	uxth	r0, r0
 8019cd0:	f005 fa78 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'a');
 8019cd4:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8019cd8:	4621      	mov	r1, r4
 8019cda:	2261      	movs	r2, #97	; 0x61
 8019cdc:	b280      	uxth	r0, r0
 8019cde:	f005 fa71 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'n');
 8019ce2:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8019ce6:	4621      	mov	r1, r4
 8019ce8:	226e      	movs	r2, #110	; 0x6e
 8019cea:	b280      	uxth	r0, r0
 8019cec:	f005 fa6a 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+145, Y+2, 'c');
 8019cf0:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8019cf4:	4621      	mov	r1, r4
 8019cf6:	2263      	movs	r2, #99	; 0x63
 8019cf8:	b280      	uxth	r0, r0
 8019cfa:	f005 fa63 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+157, Y+2, 'e');
 8019cfe:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 8019d02:	4621      	mov	r1, r4
 8019d04:	2265      	movs	r2, #101	; 0x65
 8019d06:	b280      	uxth	r0, r0
}
 8019d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+157, Y+2, 'e');
 8019d0c:	f005 ba5a 	b.w	801f1c4 <TFT_DrawChar>
 8019d10:	200001b8 	.word	0x200001b8
 8019d14:	200001c8 	.word	0x200001c8

08019d18 <GUI_TextMsgEn_HighRadiance>:

void GUI_TextMsgEn_HighRadiance(uint16_t X, uint16_t Y)
{
 8019d18:	b538      	push	{r3, r4, r5, lr}
 8019d1a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019d1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019d20:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019d22:	f005 f95f 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019d26:	2063      	movs	r0, #99	; 0x63
 8019d28:	f005 f962 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019d2c:	482d      	ldr	r0, [pc, #180]	; (8019de4 <GUI_TextMsgEn_HighRadiance+0xcc>)
 8019d2e:	f005 f953 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 8019d32:	4621      	mov	r1, r4
 8019d34:	2248      	movs	r2, #72	; 0x48
 8019d36:	4628      	mov	r0, r5
 8019d38:	f005 fa44 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8019d3c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019d3e:	482a      	ldr	r0, [pc, #168]	; (8019de8 <GUI_TextMsgEn_HighRadiance+0xd0>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8019d40:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019d42:	f005 f949 	bl	801efd8 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 8019d46:	f105 0010 	add.w	r0, r5, #16
 8019d4a:	4621      	mov	r1, r4
 8019d4c:	2269      	movs	r2, #105	; 0x69
 8019d4e:	b280      	uxth	r0, r0
 8019d50:	f005 fa38 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8019d54:	f105 0017 	add.w	r0, r5, #23
 8019d58:	4621      	mov	r1, r4
 8019d5a:	2267      	movs	r2, #103	; 0x67
 8019d5c:	b280      	uxth	r0, r0
 8019d5e:	f005 fa31 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 8019d62:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8019d66:	4621      	mov	r1, r4
 8019d68:	2268      	movs	r2, #104	; 0x68
 8019d6a:	b280      	uxth	r0, r0
 8019d6c:	f005 fa2a 	bl	801f1c4 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'r');
 8019d70:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8019d74:	4621      	mov	r1, r4
 8019d76:	2272      	movs	r2, #114	; 0x72
 8019d78:	b280      	uxth	r0, r0
 8019d7a:	f005 fa23 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+70, Y+2, 'a');
 8019d7e:	f105 0046 	add.w	r0, r5, #70	; 0x46
 8019d82:	4621      	mov	r1, r4
 8019d84:	2261      	movs	r2, #97	; 0x61
 8019d86:	b280      	uxth	r0, r0
 8019d88:	f005 fa1c 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+82, Y+2, 'd');
 8019d8c:	f105 0052 	add.w	r0, r5, #82	; 0x52
 8019d90:	4621      	mov	r1, r4
 8019d92:	2264      	movs	r2, #100	; 0x64
 8019d94:	b280      	uxth	r0, r0
 8019d96:	f005 fa15 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'i');
 8019d9a:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 8019d9e:	4621      	mov	r1, r4
 8019da0:	2269      	movs	r2, #105	; 0x69
 8019da2:	b280      	uxth	r0, r0
 8019da4:	f005 fa0e 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+100, Y+2, 'a');
 8019da8:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8019dac:	4621      	mov	r1, r4
 8019dae:	2261      	movs	r2, #97	; 0x61
 8019db0:	b280      	uxth	r0, r0
 8019db2:	f005 fa07 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+112, Y+2, 'n');
 8019db6:	f105 0070 	add.w	r0, r5, #112	; 0x70
 8019dba:	4621      	mov	r1, r4
 8019dbc:	226e      	movs	r2, #110	; 0x6e
 8019dbe:	b280      	uxth	r0, r0
 8019dc0:	f005 fa00 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+125, Y+2, 'c');
 8019dc4:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8019dc8:	4621      	mov	r1, r4
 8019dca:	2263      	movs	r2, #99	; 0x63
 8019dcc:	b280      	uxth	r0, r0
 8019dce:	f005 f9f9 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+137, Y+2, 'e');
 8019dd2:	f105 0089 	add.w	r0, r5, #137	; 0x89
 8019dd6:	4621      	mov	r1, r4
 8019dd8:	2265      	movs	r2, #101	; 0x65
 8019dda:	b280      	uxth	r0, r0
}
 8019ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+137, Y+2, 'e');
 8019de0:	f005 b9f0 	b.w	801f1c4 <TFT_DrawChar>
 8019de4:	200001b8 	.word	0x200001b8
 8019de8:	200001c8 	.word	0x200001c8

08019dec <GUI_TextMsgEn_LowRadiance>:

void GUI_TextMsgEn_LowRadiance(uint16_t X, uint16_t Y)
{
 8019dec:	b538      	push	{r3, r4, r5, lr}
 8019dee:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019df0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019df4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019df6:	f005 f8f5 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019dfa:	2063      	movs	r0, #99	; 0x63
 8019dfc:	f005 f8f8 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019e00:	482a      	ldr	r0, [pc, #168]	; (8019eac <GUI_TextMsgEn_LowRadiance+0xc0>)
 8019e02:	f005 f8e9 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8019e06:	4621      	mov	r1, r4
 8019e08:	224c      	movs	r2, #76	; 0x4c
 8019e0a:	4628      	mov	r0, r5
 8019e0c:	f005 f9da 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 8019e10:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019e12:	4827      	ldr	r0, [pc, #156]	; (8019eb0 <GUI_TextMsgEn_LowRadiance+0xc4>)
  TFT_DrawChar(X+16, Y+2, 'o');
 8019e14:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019e16:	f005 f8df 	bl	801efd8 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8019e1a:	f105 0010 	add.w	r0, r5, #16
 8019e1e:	4621      	mov	r1, r4
 8019e20:	226f      	movs	r2, #111	; 0x6f
 8019e22:	b280      	uxth	r0, r0
 8019e24:	f005 f9ce 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8019e28:	f105 001d 	add.w	r0, r5, #29
 8019e2c:	4621      	mov	r1, r4
 8019e2e:	2277      	movs	r2, #119	; 0x77
 8019e30:	b280      	uxth	r0, r0
 8019e32:	f005 f9c7 	bl	801f1c4 <TFT_DrawChar>
  
  TFT_DrawChar(X+54, Y+2, 'r');
 8019e36:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019e3a:	4621      	mov	r1, r4
 8019e3c:	2272      	movs	r2, #114	; 0x72
 8019e3e:	b280      	uxth	r0, r0
 8019e40:	f005 f9c0 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+65, Y+2, 'a');
 8019e44:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8019e48:	4621      	mov	r1, r4
 8019e4a:	2261      	movs	r2, #97	; 0x61
 8019e4c:	b280      	uxth	r0, r0
 8019e4e:	f005 f9b9 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+77, Y+2, 'd');
 8019e52:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8019e56:	4621      	mov	r1, r4
 8019e58:	2264      	movs	r2, #100	; 0x64
 8019e5a:	b280      	uxth	r0, r0
 8019e5c:	f005 f9b2 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'i');
 8019e60:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019e64:	4621      	mov	r1, r4
 8019e66:	2269      	movs	r2, #105	; 0x69
 8019e68:	b280      	uxth	r0, r0
 8019e6a:	f005 f9ab 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'a');
 8019e6e:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 8019e72:	4621      	mov	r1, r4
 8019e74:	2261      	movs	r2, #97	; 0x61
 8019e76:	b280      	uxth	r0, r0
 8019e78:	f005 f9a4 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+107, Y+2, 'n');
 8019e7c:	f105 006b 	add.w	r0, r5, #107	; 0x6b
 8019e80:	4621      	mov	r1, r4
 8019e82:	226e      	movs	r2, #110	; 0x6e
 8019e84:	b280      	uxth	r0, r0
 8019e86:	f005 f99d 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'c');
 8019e8a:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8019e8e:	4621      	mov	r1, r4
 8019e90:	2263      	movs	r2, #99	; 0x63
 8019e92:	b280      	uxth	r0, r0
 8019e94:	f005 f996 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'e');
 8019e98:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8019e9c:	4621      	mov	r1, r4
 8019e9e:	2265      	movs	r2, #101	; 0x65
 8019ea0:	b280      	uxth	r0, r0
}
 8019ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+132, Y+2, 'e');
 8019ea6:	f005 b98d 	b.w	801f1c4 <TFT_DrawChar>
 8019eaa:	bf00      	nop
 8019eac:	200001b8 	.word	0x200001b8
 8019eb0:	200001c8 	.word	0x200001c8

08019eb4 <GUI_TextMsgEn_LowIrradiance>:

void GUI_TextMsgEn_LowIrradiance(uint16_t X, uint16_t Y)
{
 8019eb4:	b538      	push	{r3, r4, r5, lr}
 8019eb6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019eb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019ebc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019ebe:	f005 f891 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019ec2:	2063      	movs	r0, #99	; 0x63
 8019ec4:	f005 f894 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019ec8:	4831      	ldr	r0, [pc, #196]	; (8019f90 <GUI_TextMsgEn_LowIrradiance+0xdc>)
 8019eca:	f005 f885 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8019ece:	4621      	mov	r1, r4
 8019ed0:	224c      	movs	r2, #76	; 0x4c
 8019ed2:	4628      	mov	r0, r5
 8019ed4:	f005 f976 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 8019ed8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019eda:	482e      	ldr	r0, [pc, #184]	; (8019f94 <GUI_TextMsgEn_LowIrradiance+0xe0>)
  TFT_DrawChar(X+16, Y+2, 'o');
 8019edc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019ede:	f005 f87b 	bl	801efd8 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8019ee2:	f105 0010 	add.w	r0, r5, #16
 8019ee6:	4621      	mov	r1, r4
 8019ee8:	226f      	movs	r2, #111	; 0x6f
 8019eea:	b280      	uxth	r0, r0
 8019eec:	f005 f96a 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8019ef0:	f105 001d 	add.w	r0, r5, #29
 8019ef4:	4621      	mov	r1, r4
 8019ef6:	2277      	movs	r2, #119	; 0x77
 8019ef8:	b280      	uxth	r0, r0
 8019efa:	f005 f963 	bl	801f1c4 <TFT_DrawChar>
	
  TFT_DrawChar(X+55, Y+2, 'i');
 8019efe:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8019f02:	4621      	mov	r1, r4
 8019f04:	2269      	movs	r2, #105	; 0x69
 8019f06:	b280      	uxth	r0, r0
 8019f08:	f005 f95c 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+63, Y+2, 'r');
 8019f0c:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8019f10:	4621      	mov	r1, r4
 8019f12:	2272      	movs	r2, #114	; 0x72
 8019f14:	b280      	uxth	r0, r0
 8019f16:	f005 f955 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+75, Y+2, 'r');
 8019f1a:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8019f1e:	4621      	mov	r1, r4
 8019f20:	2272      	movs	r2, #114	; 0x72
 8019f22:	b280      	uxth	r0, r0
 8019f24:	f005 f94e 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+86, Y+2, 'a');
 8019f28:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8019f2c:	4621      	mov	r1, r4
 8019f2e:	2261      	movs	r2, #97	; 0x61
 8019f30:	b280      	uxth	r0, r0
 8019f32:	f005 f947 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+98, Y+2, 'd');
 8019f36:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8019f3a:	4621      	mov	r1, r4
 8019f3c:	2264      	movs	r2, #100	; 0x64
 8019f3e:	b280      	uxth	r0, r0
 8019f40:	f005 f940 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+111, Y+2, 'i');
 8019f44:	f105 006f 	add.w	r0, r5, #111	; 0x6f
 8019f48:	4621      	mov	r1, r4
 8019f4a:	2269      	movs	r2, #105	; 0x69
 8019f4c:	b280      	uxth	r0, r0
 8019f4e:	f005 f939 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+116, Y+2, 'a');
 8019f52:	f105 0074 	add.w	r0, r5, #116	; 0x74
 8019f56:	4621      	mov	r1, r4
 8019f58:	2261      	movs	r2, #97	; 0x61
 8019f5a:	b280      	uxth	r0, r0
 8019f5c:	f005 f932 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+128, Y+2, 'n');
 8019f60:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8019f64:	4621      	mov	r1, r4
 8019f66:	226e      	movs	r2, #110	; 0x6e
 8019f68:	b280      	uxth	r0, r0
 8019f6a:	f005 f92b 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+141, Y+2, 'c');
 8019f6e:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8019f72:	4621      	mov	r1, r4
 8019f74:	2263      	movs	r2, #99	; 0x63
 8019f76:	b280      	uxth	r0, r0
 8019f78:	f005 f924 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawChar(X+153, Y+2, 'e');
 8019f7c:	f105 0099 	add.w	r0, r5, #153	; 0x99
 8019f80:	4621      	mov	r1, r4
 8019f82:	2265      	movs	r2, #101	; 0x65
 8019f84:	b280      	uxth	r0, r0
	
	
}
 8019f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+153, Y+2, 'e');
 8019f8a:	f005 b91b 	b.w	801f1c4 <TFT_DrawChar>
 8019f8e:	bf00      	nop
 8019f90:	200001b8 	.word	0x200001b8
 8019f94:	200001c8 	.word	0x200001c8

08019f98 <GUI_TextEn_Luminance>:
void GUI_TextEn_Luminance(uint16_t X, uint16_t Y)
{
 8019f98:	b538      	push	{r3, r4, r5, lr}
 8019f9a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019f9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019fa0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019fa2:	f005 f81f 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019fa6:	2063      	movs	r0, #99	; 0x63
 8019fa8:	f005 f822 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019fac:	4823      	ldr	r0, [pc, #140]	; (801a03c <GUI_TextEn_Luminance+0xa4>)
 8019fae:	f005 f813 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8019fb2:	4621      	mov	r1, r4
 8019fb4:	224c      	movs	r2, #76	; 0x4c
 8019fb6:	4628      	mov	r0, r5
 8019fb8:	f005 f904 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+13, Y+2, 'u');
 8019fbc:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019fbe:	4820      	ldr	r0, [pc, #128]	; (801a040 <GUI_TextEn_Luminance+0xa8>)
	TFT_DrawChar(X+13, Y+2, 'u');
 8019fc0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019fc2:	f005 f809 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'u');
 8019fc6:	f105 000d 	add.w	r0, r5, #13
 8019fca:	4621      	mov	r1, r4
 8019fcc:	2275      	movs	r2, #117	; 0x75
 8019fce:	b280      	uxth	r0, r0
 8019fd0:	f005 f8f8 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'm');
 8019fd4:	f105 001b 	add.w	r0, r5, #27
 8019fd8:	4621      	mov	r1, r4
 8019fda:	226d      	movs	r2, #109	; 0x6d
 8019fdc:	b280      	uxth	r0, r0
 8019fde:	f005 f8f1 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8019fe2:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8019fe6:	4621      	mov	r1, r4
 8019fe8:	2269      	movs	r2, #105	; 0x69
 8019fea:	b280      	uxth	r0, r0
 8019fec:	f005 f8ea 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y+2, 'a');
 8019ff0:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8019ff4:	4621      	mov	r1, r4
 8019ff6:	2261      	movs	r2, #97	; 0x61
 8019ff8:	b280      	uxth	r0, r0
 8019ffa:	f005 f8e3 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'n');
 8019ffe:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 801a002:	4621      	mov	r1, r4
 801a004:	226e      	movs	r2, #110	; 0x6e
 801a006:	b280      	uxth	r0, r0
 801a008:	f005 f8dc 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'n');
 801a00c:	f105 0047 	add.w	r0, r5, #71	; 0x47
 801a010:	4621      	mov	r1, r4
 801a012:	226e      	movs	r2, #110	; 0x6e
 801a014:	b280      	uxth	r0, r0
 801a016:	f005 f8d5 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+84, Y+2, 'c');
 801a01a:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801a01e:	4621      	mov	r1, r4
 801a020:	2263      	movs	r2, #99	; 0x63
 801a022:	b280      	uxth	r0, r0
 801a024:	f005 f8ce 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+96, Y+2, 'e');
 801a028:	f105 0060 	add.w	r0, r5, #96	; 0x60
 801a02c:	4621      	mov	r1, r4
 801a02e:	2265      	movs	r2, #101	; 0x65
 801a030:	b280      	uxth	r0, r0
}
 801a032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+96, Y+2, 'e');
 801a036:	f005 b8c5 	b.w	801f1c4 <TFT_DrawChar>
 801a03a:	bf00      	nop
 801a03c:	200001b8 	.word	0x200001b8
 801a040:	200001c8 	.word	0x200001c8

0801a044 <GUI_TextEn_Illuminance>:

void GUI_TextEn_Illuminance(uint16_t X, uint16_t Y)
{
 801a044:	b538      	push	{r3, r4, r5, lr}
 801a046:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a048:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a04c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a04e:	f004 ffc9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a052:	2063      	movs	r0, #99	; 0x63
 801a054:	f004 ffcc 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801a058:	482a      	ldr	r0, [pc, #168]	; (801a104 <GUI_TextEn_Illuminance+0xc0>)
 801a05a:	f004 ffbd 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 801a05e:	4621      	mov	r1, r4
 801a060:	2249      	movs	r2, #73	; 0x49
 801a062:	4628      	mov	r0, r5
 801a064:	f005 f8ae 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+8, Y+2, 'l');
 801a068:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801a06a:	4827      	ldr	r0, [pc, #156]	; (801a108 <GUI_TextEn_Illuminance+0xc4>)
	TFT_DrawChar(X+8, Y+2, 'l');
 801a06c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801a06e:	f004 ffb3 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+8, Y+2, 'l');
 801a072:	f105 0008 	add.w	r0, r5, #8
 801a076:	4621      	mov	r1, r4
 801a078:	226c      	movs	r2, #108	; 0x6c
 801a07a:	b280      	uxth	r0, r0
 801a07c:	f005 f8a2 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y+2, 'l');
 801a080:	f105 000d 	add.w	r0, r5, #13
 801a084:	4621      	mov	r1, r4
 801a086:	226c      	movs	r2, #108	; 0x6c
 801a088:	b280      	uxth	r0, r0
 801a08a:	f005 f89b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+18, Y+2, 'u');
 801a08e:	f105 0012 	add.w	r0, r5, #18
 801a092:	4621      	mov	r1, r4
 801a094:	2275      	movs	r2, #117	; 0x75
 801a096:	b280      	uxth	r0, r0
 801a098:	f005 f894 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'm');
 801a09c:	f105 0020 	add.w	r0, r5, #32
 801a0a0:	4621      	mov	r1, r4
 801a0a2:	226d      	movs	r2, #109	; 0x6d
 801a0a4:	b280      	uxth	r0, r0
 801a0a6:	f005 f88d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'i');
 801a0aa:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 801a0ae:	4621      	mov	r1, r4
 801a0b0:	2269      	movs	r2, #105	; 0x69
 801a0b2:	b280      	uxth	r0, r0
 801a0b4:	f005 f886 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+64, Y+2, 'a');
 801a0b8:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801a0bc:	4621      	mov	r1, r4
 801a0be:	2261      	movs	r2, #97	; 0x61
 801a0c0:	b280      	uxth	r0, r0
 801a0c2:	f005 f87f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+51, Y+2, 'n');
 801a0c6:	f105 0033 	add.w	r0, r5, #51	; 0x33
 801a0ca:	4621      	mov	r1, r4
 801a0cc:	226e      	movs	r2, #110	; 0x6e
 801a0ce:	b280      	uxth	r0, r0
 801a0d0:	f005 f878 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'n');
 801a0d4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 801a0d8:	4621      	mov	r1, r4
 801a0da:	226e      	movs	r2, #110	; 0x6e
 801a0dc:	b280      	uxth	r0, r0
 801a0de:	f005 f871 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'c');
 801a0e2:	f105 0059 	add.w	r0, r5, #89	; 0x59
 801a0e6:	4621      	mov	r1, r4
 801a0e8:	2263      	movs	r2, #99	; 0x63
 801a0ea:	b280      	uxth	r0, r0
 801a0ec:	f005 f86a 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 801a0f0:	f105 0065 	add.w	r0, r5, #101	; 0x65
 801a0f4:	4621      	mov	r1, r4
 801a0f6:	2265      	movs	r2, #101	; 0x65
 801a0f8:	b280      	uxth	r0, r0
}
 801a0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+101, Y+2, 'e');
 801a0fe:	f005 b861 	b.w	801f1c4 <TFT_DrawChar>
 801a102:	bf00      	nop
 801a104:	200001b8 	.word	0x200001b8
 801a108:	200001c8 	.word	0x200001c8

0801a10c <GUI_TextEn_Mode>:
void GUI_TextEn_Mode(uint16_t X, uint16_t Y)
{
 801a10c:	b538      	push	{r3, r4, r5, lr}
 801a10e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a110:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a114:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a116:	f004 ff65 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a11a:	2063      	movs	r0, #99	; 0x63
 801a11c:	f004 ff68 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801a120:	4811      	ldr	r0, [pc, #68]	; (801a168 <GUI_TextEn_Mode+0x5c>)
 801a122:	f004 ff59 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'M');
 801a126:	4621      	mov	r1, r4
 801a128:	224d      	movs	r2, #77	; 0x4d
 801a12a:	4628      	mov	r0, r5
 801a12c:	f005 f84a 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+19, Y+2, 'o');
 801a130:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801a132:	480e      	ldr	r0, [pc, #56]	; (801a16c <GUI_TextEn_Mode+0x60>)
 801a134:	f004 ff50 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, 'o');
 801a138:	b2a4      	uxth	r4, r4
 801a13a:	f105 0013 	add.w	r0, r5, #19
 801a13e:	4621      	mov	r1, r4
 801a140:	226f      	movs	r2, #111	; 0x6f
 801a142:	b280      	uxth	r0, r0
 801a144:	f005 f83e 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'd');
 801a148:	f105 001e 	add.w	r0, r5, #30
 801a14c:	4621      	mov	r1, r4
 801a14e:	2264      	movs	r2, #100	; 0x64
 801a150:	b280      	uxth	r0, r0
 801a152:	f005 f837 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+43, Y+2, 'e');
 801a156:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 801a15a:	4621      	mov	r1, r4
 801a15c:	2265      	movs	r2, #101	; 0x65
 801a15e:	b280      	uxth	r0, r0
}
 801a160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+43, Y+2, 'e');
 801a164:	f005 b82e 	b.w	801f1c4 <TFT_DrawChar>
 801a168:	200001b8 	.word	0x200001b8
 801a16c:	200001c8 	.word	0x200001c8

0801a170 <GUI_TextEn_PPFD>:

void GUI_TextEn_PPFD(uint16_t X, uint16_t Y)
{
 801a170:	b538      	push	{r3, r4, r5, lr}
 801a172:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801a174:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a178:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a17a:	f004 ff33 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a17e:	2063      	movs	r0, #99	; 0x63
 801a180:	f004 ff36 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801a184:	480f      	ldr	r0, [pc, #60]	; (801a1c4 <GUI_TextEn_PPFD+0x54>)
 801a186:	f004 ff27 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+48, Y, 'D');
 801a18a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801a18e:	4629      	mov	r1, r5
 801a190:	2244      	movs	r2, #68	; 0x44
 801a192:	b280      	uxth	r0, r0
 801a194:	f005 f816 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'F');
 801a198:	f104 001f 	add.w	r0, r4, #31
 801a19c:	4629      	mov	r1, r5
 801a19e:	2246      	movs	r2, #70	; 0x46
 801a1a0:	b280      	uxth	r0, r0
 801a1a2:	f005 f80f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 801a1a6:	f104 0010 	add.w	r0, r4, #16
 801a1aa:	4629      	mov	r1, r5
 801a1ac:	2250      	movs	r2, #80	; 0x50
 801a1ae:	b280      	uxth	r0, r0
 801a1b0:	f005 f808 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 801a1b4:	4629      	mov	r1, r5
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	2250      	movs	r2, #80	; 0x50
}
 801a1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 801a1be:	f005 b801 	b.w	801f1c4 <TFT_DrawChar>
 801a1c2:	bf00      	nop
 801a1c4:	200001b8 	.word	0x200001b8

0801a1c8 <GUI_TextEn_PPL>:
void GUI_TextEn_PPL(uint16_t X, uint16_t Y)
{
 801a1c8:	b538      	push	{r3, r4, r5, lr}
 801a1ca:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801a1cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a1d0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a1d2:	f004 ff07 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a1d6:	2063      	movs	r0, #99	; 0x63
 801a1d8:	f004 ff0a 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801a1dc:	480b      	ldr	r0, [pc, #44]	; (801a20c <GUI_TextEn_PPL+0x44>)
 801a1de:	f004 fefb 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+31, Y, 'L');
 801a1e2:	f104 001f 	add.w	r0, r4, #31
 801a1e6:	4629      	mov	r1, r5
 801a1e8:	224c      	movs	r2, #76	; 0x4c
 801a1ea:	b280      	uxth	r0, r0
 801a1ec:	f004 ffea 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 801a1f0:	f104 0010 	add.w	r0, r4, #16
 801a1f4:	4629      	mov	r1, r5
 801a1f6:	2250      	movs	r2, #80	; 0x50
 801a1f8:	b280      	uxth	r0, r0
 801a1fa:	f004 ffe3 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 801a1fe:	4629      	mov	r1, r5
 801a200:	4620      	mov	r0, r4
 801a202:	2250      	movs	r2, #80	; 0x50
}
 801a204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 801a208:	f004 bfdc 	b.w	801f1c4 <TFT_DrawChar>
 801a20c:	200001b8 	.word	0x200001b8

0801a210 <GUI_TextEn_PARwavebands>:
void GUI_TextEn_PARwavebands(uint16_t X, uint16_t Y)
{
 801a210:	b538      	push	{r3, r4, r5, lr}
 801a212:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a214:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a218:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a21a:	f004 fee3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a21e:	2063      	movs	r0, #99	; 0x63
 801a220:	f004 fee6 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801a224:	482d      	ldr	r0, [pc, #180]	; (801a2dc <GUI_TextEn_PARwavebands+0xcc>)
 801a226:	f004 fed7 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+32, Y, 'R');
 801a22a:	f105 0020 	add.w	r0, r5, #32
 801a22e:	4621      	mov	r1, r4
 801a230:	2252      	movs	r2, #82	; 0x52
 801a232:	b280      	uxth	r0, r0
 801a234:	f004 ffc6 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'A');
 801a238:	f105 0010 	add.w	r0, r5, #16
 801a23c:	4621      	mov	r1, r4
 801a23e:	2241      	movs	r2, #65	; 0x41
 801a240:	b280      	uxth	r0, r0
 801a242:	f004 ffbf 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 801a246:	4621      	mov	r1, r4
 801a248:	2250      	movs	r2, #80	; 0x50
 801a24a:	4628      	mov	r0, r5
 801a24c:	f004 ffba 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+75, Y+2, 'a');
 801a250:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801a252:	4823      	ldr	r0, [pc, #140]	; (801a2e0 <GUI_TextEn_PARwavebands+0xd0>)
	TFT_DrawChar(X+75, Y+2, 'a');
 801a254:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801a256:	f004 febf 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+75, Y+2, 'a');
 801a25a:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 801a25e:	4621      	mov	r1, r4
 801a260:	2261      	movs	r2, #97	; 0x61
 801a262:	b280      	uxth	r0, r0
 801a264:	f004 ffae 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+60, Y+2, 'w');
 801a268:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 801a26c:	4621      	mov	r1, r4
 801a26e:	2277      	movs	r2, #119	; 0x77
 801a270:	b280      	uxth	r0, r0
 801a272:	f004 ffa7 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 801a276:	f105 0065 	add.w	r0, r5, #101	; 0x65
 801a27a:	4621      	mov	r1, r4
 801a27c:	2265      	movs	r2, #101	; 0x65
 801a27e:	b280      	uxth	r0, r0
 801a280:	f004 ffa0 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'v');
 801a284:	f105 0057 	add.w	r0, r5, #87	; 0x57
 801a288:	4621      	mov	r1, r4
 801a28a:	2276      	movs	r2, #118	; 0x76
 801a28c:	b280      	uxth	r0, r0
 801a28e:	f004 ff99 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+126, Y+2, 'a');
 801a292:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 801a296:	4621      	mov	r1, r4
 801a298:	2261      	movs	r2, #97	; 0x61
 801a29a:	b280      	uxth	r0, r0
 801a29c:	f004 ff92 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+113, Y+2, 'b');
 801a2a0:	f105 0071 	add.w	r0, r5, #113	; 0x71
 801a2a4:	4621      	mov	r1, r4
 801a2a6:	2262      	movs	r2, #98	; 0x62
 801a2a8:	b280      	uxth	r0, r0
 801a2aa:	f004 ff8b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+138, Y+2, 'n');
 801a2ae:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 801a2b2:	4621      	mov	r1, r4
 801a2b4:	226e      	movs	r2, #110	; 0x6e
 801a2b6:	b280      	uxth	r0, r0
 801a2b8:	f004 ff84 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+151, Y+2, 'd');
 801a2bc:	f105 0097 	add.w	r0, r5, #151	; 0x97
 801a2c0:	4621      	mov	r1, r4
 801a2c2:	2264      	movs	r2, #100	; 0x64
 801a2c4:	b280      	uxth	r0, r0
 801a2c6:	f004 ff7d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+165, Y+2, 's');
 801a2ca:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
 801a2ce:	4621      	mov	r1, r4
 801a2d0:	2273      	movs	r2, #115	; 0x73
 801a2d2:	b280      	uxth	r0, r0
}
 801a2d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+165, Y+2, 's');
 801a2d8:	f004 bf74 	b.w	801f1c4 <TFT_DrawChar>
 801a2dc:	200001b8 	.word	0x200001b8
 801a2e0:	200001c8 	.word	0x200001c8

0801a2e4 <GUI_TextEn_B_G_R_FR>:
void GUI_TextEn_B_G_R_FR(uint16_t X, uint16_t Y)
{
 801a2e4:	b538      	push	{r3, r4, r5, lr}
 801a2e6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801a2e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a2ec:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a2ee:	f004 fe79 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a2f2:	2063      	movs	r0, #99	; 0x63
 801a2f4:	f004 fe7c 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801a2f8:	481d      	ldr	r0, [pc, #116]	; (801a370 <GUI_TextEn_B_G_R_FR+0x8c>)
 801a2fa:	f004 fe6d 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, '-');
 801a2fe:	f104 000f 	add.w	r0, r4, #15
 801a302:	4629      	mov	r1, r5
 801a304:	222d      	movs	r2, #45	; 0x2d
 801a306:	b280      	uxth	r0, r0
 801a308:	f004 ff5c 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'B');
 801a30c:	4629      	mov	r1, r5
 801a30e:	4620      	mov	r0, r4
 801a310:	2242      	movs	r2, #66	; 0x42
 801a312:	f004 ff57 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y, '-');
 801a316:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801a31a:	4629      	mov	r1, r5
 801a31c:	222d      	movs	r2, #45	; 0x2d
 801a31e:	b280      	uxth	r0, r0
 801a320:	f004 ff50 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y, 'G');
 801a324:	f104 001d 	add.w	r0, r4, #29
 801a328:	4629      	mov	r1, r5
 801a32a:	2247      	movs	r2, #71	; 0x47
 801a32c:	b280      	uxth	r0, r0
 801a32e:	f004 ff49 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y, '-');
 801a332:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 801a336:	4629      	mov	r1, r5
 801a338:	222d      	movs	r2, #45	; 0x2d
 801a33a:	b280      	uxth	r0, r0
 801a33c:	f004 ff42 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y, 'R');	
 801a340:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 801a344:	4629      	mov	r1, r5
 801a346:	2252      	movs	r2, #82	; 0x52
 801a348:	b280      	uxth	r0, r0
 801a34a:	f004 ff3b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y, 'F');
 801a34e:	f104 0057 	add.w	r0, r4, #87	; 0x57
 801a352:	4629      	mov	r1, r5
 801a354:	2246      	movs	r2, #70	; 0x46
 801a356:	b280      	uxth	r0, r0
 801a358:	f004 ff34 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, 'R');
 801a35c:	f104 0067 	add.w	r0, r4, #103	; 0x67
 801a360:	4629      	mov	r1, r5
 801a362:	2252      	movs	r2, #82	; 0x52
 801a364:	b280      	uxth	r0, r0
}
 801a366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, 'R');
 801a36a:	f004 bf2b 	b.w	801f1c4 <TFT_DrawChar>
 801a36e:	bf00      	nop
 801a370:	200001b8 	.word	0x200001b8

0801a374 <GUI_TextEn_CCT>:
	TFT_DrawChar(X, Y, 'L');
	TFT_SetFont(&Font11EN_arch_big);
	TFT_DrawChar(X+17, Y+7, 'R');
}
void GUI_TextEn_CCT(uint16_t X, uint16_t Y)
{
 801a374:	b538      	push	{r3, r4, r5, lr}
 801a376:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801a378:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a37c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a37e:	f004 fe31 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a382:	2063      	movs	r0, #99	; 0x63
 801a384:	f004 fe34 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 801a388:	480b      	ldr	r0, [pc, #44]	; (801a3b8 <GUI_TextEn_CCT+0x44>)
 801a38a:	f004 fe25 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C'-33);
 801a38e:	4629      	mov	r1, r5
 801a390:	4620      	mov	r0, r4
 801a392:	2222      	movs	r2, #34	; 0x22
 801a394:	f004 ff16 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y, 'C'-33);
 801a398:	f104 0017 	add.w	r0, r4, #23
 801a39c:	4629      	mov	r1, r5
 801a39e:	2222      	movs	r2, #34	; 0x22
 801a3a0:	b280      	uxth	r0, r0
 801a3a2:	f004 ff0f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y, 'T'-33);
 801a3a6:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 801a3aa:	4629      	mov	r1, r5
 801a3ac:	2233      	movs	r2, #51	; 0x33
 801a3ae:	b280      	uxth	r0, r0
}
 801a3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+46, Y, 'T'-33);
 801a3b4:	f004 bf06 	b.w	801f1c4 <TFT_DrawChar>
 801a3b8:	200001e8 	.word	0x200001e8

0801a3bc <GUI_TextEn_W_m2>:

/* Measure dimensions */
void GUI_TextEn_W_m2(uint16_t X, uint16_t Y)
{
 801a3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3be:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a3c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a3c4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a3c6:	f004 fe0d 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a3ca:	2063      	movs	r0, #99	; 0x63
 801a3cc:	f004 fe10 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 801a3d0:	4815      	ldr	r0, [pc, #84]	; (801a428 <GUI_TextEn_W_m2+0x6c>)
 801a3d2:	f004 fe01 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+3, Y, 'W');
 801a3d6:	1ce8      	adds	r0, r5, #3
 801a3d8:	4621      	mov	r1, r4
 801a3da:	2257      	movs	r2, #87	; 0x57
 801a3dc:	b280      	uxth	r0, r0
 801a3de:	f004 fef1 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 801a3e2:	f104 0111 	add.w	r1, r4, #17
 801a3e6:	1c68      	adds	r0, r5, #1
 801a3e8:	226d      	movs	r2, #109	; 0x6d
 801a3ea:	b289      	uxth	r1, r1
 801a3ec:	b280      	uxth	r0, r0
 801a3ee:	f004 fee9 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 801a3f2:	480e      	ldr	r0, [pc, #56]	; (801a42c <GUI_TextEn_W_m2+0x70>)
 801a3f4:	f004 fdf0 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');	
 801a3f8:	f104 0110 	add.w	r1, r4, #16
 801a3fc:	f105 000b 	add.w	r0, r5, #11
 801a400:	2232      	movs	r2, #50	; 0x32
 801a402:	b289      	uxth	r1, r1
 801a404:	b280      	uxth	r0, r0
 801a406:	f004 fedd 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 801a40a:	f104 030e 	add.w	r3, r4, #14
 801a40e:	b29b      	uxth	r3, r3
 801a410:	f105 0211 	add.w	r2, r5, #17
 801a414:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a418:	9100      	str	r1, [sp, #0]
 801a41a:	b292      	uxth	r2, r2
 801a41c:	4619      	mov	r1, r3
 801a41e:	4628      	mov	r0, r5
 801a420:	f004 face 	bl	801e9c0 <TFT_DrawLine>
}
 801a424:	b003      	add	sp, #12
 801a426:	bd30      	pop	{r4, r5, pc}
 801a428:	20000220 	.word	0x20000220
 801a42c:	20000210 	.word	0x20000210

0801a430 <GUI_TextEn_W_m2_sr>:
void GUI_TextEn_W_m2_sr(uint16_t X, uint16_t Y)
{
 801a430:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a432:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a434:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a438:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a43a:	f004 fdd3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a43e:	2063      	movs	r0, #99	; 0x63
 801a440:	f004 fdd6 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 801a444:	4824      	ldr	r0, [pc, #144]	; (801a4d8 <GUI_TextEn_W_m2_sr+0xa8>)
 801a446:	f004 fdc7 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+12, Y, 'W');
 801a44a:	f105 000c 	add.w	r0, r5, #12
 801a44e:	4621      	mov	r1, r4
 801a450:	2257      	movs	r2, #87	; 0x57
 801a452:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 801a454:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+12, Y, 'W');
 801a458:	f004 feb4 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 801a45c:	b2b6      	uxth	r6, r6
 801a45e:	f105 0014 	add.w	r0, r5, #20
 801a462:	4631      	mov	r1, r6
 801a464:	226d      	movs	r2, #109	; 0x6d
 801a466:	b280      	uxth	r0, r0
 801a468:	f004 feac 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 801a46c:	4631      	mov	r1, r6
 801a46e:	4628      	mov	r0, r5
 801a470:	2273      	movs	r2, #115	; 0x73
 801a472:	f004 fea7 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 801a476:	1de8      	adds	r0, r5, #7
 801a478:	4631      	mov	r1, r6
 801a47a:	2272      	movs	r2, #114	; 0x72
 801a47c:	b280      	uxth	r0, r0
 801a47e:	f004 fea1 	bl	801f1c4 <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 801a482:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a486:	f104 0318 	add.w	r3, r4, #24
 801a48a:	f105 0212 	add.w	r2, r5, #18
 801a48e:	f104 0117 	add.w	r1, r4, #23
 801a492:	f105 0011 	add.w	r0, r5, #17
 801a496:	b29b      	uxth	r3, r3
 801a498:	b292      	uxth	r2, r2
 801a49a:	b289      	uxth	r1, r1
 801a49c:	9600      	str	r6, [sp, #0]
 801a49e:	b280      	uxth	r0, r0
 801a4a0:	f004 faf6 	bl	801ea90 <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 801a4a4:	480d      	ldr	r0, [pc, #52]	; (801a4dc <GUI_TextEn_W_m2_sr+0xac>)
 801a4a6:	f004 fd97 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');	
 801a4aa:	f104 0110 	add.w	r1, r4, #16
 801a4ae:	f105 001e 	add.w	r0, r5, #30
 801a4b2:	2232      	movs	r2, #50	; 0x32
 801a4b4:	b289      	uxth	r1, r1
 801a4b6:	b280      	uxth	r0, r0
 801a4b8:	f004 fe84 	bl	801f1c4 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 801a4bc:	f104 030e 	add.w	r3, r4, #14
 801a4c0:	b29b      	uxth	r3, r3
 801a4c2:	f105 0224 	add.w	r2, r5, #36	; 0x24
 801a4c6:	9600      	str	r6, [sp, #0]
 801a4c8:	b292      	uxth	r2, r2
 801a4ca:	4619      	mov	r1, r3
 801a4cc:	4628      	mov	r0, r5
 801a4ce:	f004 fa77 	bl	801e9c0 <TFT_DrawLine>
}
 801a4d2:	b002      	add	sp, #8
 801a4d4:	bd70      	pop	{r4, r5, r6, pc}
 801a4d6:	bf00      	nop
 801a4d8:	20000220 	.word	0x20000220
 801a4dc:	20000210 	.word	0x20000210

0801a4e0 <GUI_TextEn_cd_m2>:
void GUI_TextEn_cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 801a4e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a4e4:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801a4e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a4ea:	460d      	mov	r5, r1
 801a4ec:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 801a4ee:	f004 fd79 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a4f2:	2063      	movs	r0, #99	; 0x63
 801a4f4:	f004 fd7c 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 801a4f8:	482f      	ldr	r0, [pc, #188]	; (801a5b8 <GUI_TextEn_cd_m2+0xd8>)
 801a4fa:	f004 fd6d 	bl	801efd8 <TFT_SetFont>
	
	if (deg==1)
 801a4fe:	2e01      	cmp	r6, #1
 801a500:	f105 0911 	add.w	r9, r5, #17
 801a504:	f105 0810 	add.w	r8, r5, #16
 801a508:	f105 060e 	add.w	r6, r5, #14
 801a50c:	d131      	bne.n	801a572 <GUI_TextEn_cd_m2+0x92>
	{
		TFT_DrawChar(X, Y, 'k');
 801a50e:	226b      	movs	r2, #107	; 0x6b
 801a510:	4629      	mov	r1, r5
 801a512:	4620      	mov	r0, r4
 801a514:	f004 fe56 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+7, Y, 'c');
 801a518:	1de0      	adds	r0, r4, #7
 801a51a:	2263      	movs	r2, #99	; 0x63
 801a51c:	4629      	mov	r1, r5
 801a51e:	b280      	uxth	r0, r0
 801a520:	f004 fe50 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+14, Y, 'd');
 801a524:	f104 000e 	add.w	r0, r4, #14
 801a528:	2264      	movs	r2, #100	; 0x64
 801a52a:	4629      	mov	r1, r5
 801a52c:	b280      	uxth	r0, r0
 801a52e:	f004 fe49 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(X+5, Y+17, 'm');
 801a532:	1d60      	adds	r0, r4, #5
 801a534:	226d      	movs	r2, #109	; 0x6d
 801a536:	fa1f f189 	uxth.w	r1, r9
 801a53a:	b280      	uxth	r0, r0
 801a53c:	f004 fe42 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 801a540:	481e      	ldr	r0, [pc, #120]	; (801a5bc <GUI_TextEn_cd_m2+0xdc>)
 801a542:	f004 fd49 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+16, '2');	
 801a546:	f104 000f 	add.w	r0, r4, #15
 801a54a:	2232      	movs	r2, #50	; 0x32
 801a54c:	fa1f f188 	uxth.w	r1, r8
 801a550:	b280      	uxth	r0, r0
 801a552:	f004 fe37 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+22, Y+14, TFT_White);
 801a556:	b2b3      	uxth	r3, r6
 801a558:	f104 0216 	add.w	r2, r4, #22
		TFT_DrawChar(X+9, Y, 'd');
		
		TFT_DrawChar(X+2, Y+17, 'm');
		TFT_SetFont(&Font6EN_arch_big);
		TFT_DrawChar(X+12, Y+16, '2');	
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 801a55c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a560:	9100      	str	r1, [sp, #0]
 801a562:	b292      	uxth	r2, r2
 801a564:	4619      	mov	r1, r3
 801a566:	4620      	mov	r0, r4
 801a568:	f004 fa2a 	bl	801e9c0 <TFT_DrawLine>
	}
}
 801a56c:	b003      	add	sp, #12
 801a56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		TFT_DrawChar(X+2, Y, 'c');
 801a572:	1ca7      	adds	r7, r4, #2
 801a574:	b2bf      	uxth	r7, r7
 801a576:	2263      	movs	r2, #99	; 0x63
 801a578:	4629      	mov	r1, r5
 801a57a:	4638      	mov	r0, r7
 801a57c:	f004 fe22 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+9, Y, 'd');
 801a580:	f104 0009 	add.w	r0, r4, #9
 801a584:	2264      	movs	r2, #100	; 0x64
 801a586:	4629      	mov	r1, r5
 801a588:	b280      	uxth	r0, r0
 801a58a:	f004 fe1b 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+2, Y+17, 'm');
 801a58e:	226d      	movs	r2, #109	; 0x6d
 801a590:	fa1f f189 	uxth.w	r1, r9
 801a594:	4638      	mov	r0, r7
 801a596:	f004 fe15 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 801a59a:	4808      	ldr	r0, [pc, #32]	; (801a5bc <GUI_TextEn_cd_m2+0xdc>)
 801a59c:	f004 fd1c 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X+12, Y+16, '2');	
 801a5a0:	f104 000c 	add.w	r0, r4, #12
 801a5a4:	2232      	movs	r2, #50	; 0x32
 801a5a6:	fa1f f188 	uxth.w	r1, r8
 801a5aa:	b280      	uxth	r0, r0
 801a5ac:	f004 fe0a 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 801a5b0:	b2b3      	uxth	r3, r6
 801a5b2:	f104 0213 	add.w	r2, r4, #19
 801a5b6:	e7d1      	b.n	801a55c <GUI_TextEn_cd_m2+0x7c>
 801a5b8:	20000220 	.word	0x20000220
 801a5bc:	20000210 	.word	0x20000210

0801a5c0 <GUI_TextEn_Green>:
	TFT_DrawChar(X+23, Y+16, '2');

  TFT_DrawLine(X, Y+14, X+30, Y+14, TFT_White);	
}
void GUI_TextEn_Green(uint16_t X, uint16_t Y)
{
 801a5c0:	b538      	push	{r3, r4, r5, lr}
 801a5c2:	4605      	mov	r5, r0
 801a5c4:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 801a5c6:	4815      	ldr	r0, [pc, #84]	; (801a61c <GUI_TextEn_Green+0x5c>)
 801a5c8:	f004 fd06 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'G');
 801a5cc:	4621      	mov	r1, r4
 801a5ce:	2247      	movs	r2, #71	; 0x47
 801a5d0:	4628      	mov	r0, r5
 801a5d2:	f004 fdf7 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+15, Y+2, 'r');
 801a5d6:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 801a5d8:	4811      	ldr	r0, [pc, #68]	; (801a620 <GUI_TextEn_Green+0x60>)
 801a5da:	f004 fcfd 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'r');
 801a5de:	b2a4      	uxth	r4, r4
 801a5e0:	f105 000f 	add.w	r0, r5, #15
 801a5e4:	4621      	mov	r1, r4
 801a5e6:	2272      	movs	r2, #114	; 0x72
 801a5e8:	b280      	uxth	r0, r0
 801a5ea:	f004 fdeb 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+26, Y+2, 'e');
 801a5ee:	f105 001a 	add.w	r0, r5, #26
 801a5f2:	4621      	mov	r1, r4
 801a5f4:	2265      	movs	r2, #101	; 0x65
 801a5f6:	b280      	uxth	r0, r0
 801a5f8:	f004 fde4 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+38, Y+2, 'e');
 801a5fc:	f105 0026 	add.w	r0, r5, #38	; 0x26
 801a600:	4621      	mov	r1, r4
 801a602:	2265      	movs	r2, #101	; 0x65
 801a604:	b280      	uxth	r0, r0
 801a606:	f004 fddd 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+50, Y+2, 'n');
 801a60a:	f105 0032 	add.w	r0, r5, #50	; 0x32
 801a60e:	4621      	mov	r1, r4
 801a610:	226e      	movs	r2, #110	; 0x6e
 801a612:	b280      	uxth	r0, r0
}
 801a614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+50, Y+2, 'n');
 801a618:	f004 bdd4 	b.w	801f1c4 <TFT_DrawChar>
 801a61c:	200001b0 	.word	0x200001b0
 801a620:	200001c0 	.word	0x200001c0

0801a624 <GUI_TextEn_Blue>:
void GUI_TextEn_Blue(uint16_t X, uint16_t Y)
{
 801a624:	b538      	push	{r3, r4, r5, lr}
 801a626:	4605      	mov	r5, r0
 801a628:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 801a62a:	4812      	ldr	r0, [pc, #72]	; (801a674 <GUI_TextEn_Blue+0x50>)
 801a62c:	f004 fcd4 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'B');
 801a630:	4621      	mov	r1, r4
 801a632:	2242      	movs	r2, #66	; 0x42
 801a634:	4628      	mov	r0, r5
 801a636:	f004 fdc5 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small_A);
		TFT_DrawChar(X+15, Y+2, 'l');
 801a63a:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small_A);
 801a63c:	480e      	ldr	r0, [pc, #56]	; (801a678 <GUI_TextEn_Blue+0x54>)
 801a63e:	f004 fccb 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'l');
 801a642:	b2a4      	uxth	r4, r4
 801a644:	f105 000f 	add.w	r0, r5, #15
 801a648:	4621      	mov	r1, r4
 801a64a:	226c      	movs	r2, #108	; 0x6c
 801a64c:	b280      	uxth	r0, r0
 801a64e:	f004 fdb9 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+20, Y+2, 'u');
 801a652:	f105 0014 	add.w	r0, r5, #20
 801a656:	4621      	mov	r1, r4
 801a658:	2275      	movs	r2, #117	; 0x75
 801a65a:	b280      	uxth	r0, r0
 801a65c:	f004 fdb2 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+33, Y+2, 'e');
 801a660:	f105 0021 	add.w	r0, r5, #33	; 0x21
 801a664:	4621      	mov	r1, r4
 801a666:	2265      	movs	r2, #101	; 0x65
 801a668:	b280      	uxth	r0, r0
}
 801a66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+33, Y+2, 'e');
 801a66e:	f004 bda9 	b.w	801f1c4 <TFT_DrawChar>
 801a672:	bf00      	nop
 801a674:	200001b0 	.word	0x200001b0
 801a678:	200001c8 	.word	0x200001c8

0801a67c <GUI_TextEn_Red>:
void GUI_TextEn_Red(uint16_t X, uint16_t Y)
{
 801a67c:	b538      	push	{r3, r4, r5, lr}
 801a67e:	4605      	mov	r5, r0
 801a680:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 801a682:	480e      	ldr	r0, [pc, #56]	; (801a6bc <GUI_TextEn_Red+0x40>)
 801a684:	f004 fca8 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'R');
 801a688:	4621      	mov	r1, r4
 801a68a:	2252      	movs	r2, #82	; 0x52
 801a68c:	4628      	mov	r0, r5
 801a68e:	f004 fd99 	bl	801f1c4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+16, Y+2, 'e');
 801a692:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 801a694:	480a      	ldr	r0, [pc, #40]	; (801a6c0 <GUI_TextEn_Red+0x44>)
 801a696:	f004 fc9f 	bl	801efd8 <TFT_SetFont>
		TFT_DrawChar(X+16, Y+2, 'e');
 801a69a:	b2a4      	uxth	r4, r4
 801a69c:	f105 0010 	add.w	r0, r5, #16
 801a6a0:	4621      	mov	r1, r4
 801a6a2:	2265      	movs	r2, #101	; 0x65
 801a6a4:	b280      	uxth	r0, r0
 801a6a6:	f004 fd8d 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(X+29, Y+2, 'd');
 801a6aa:	f105 001d 	add.w	r0, r5, #29
 801a6ae:	4621      	mov	r1, r4
 801a6b0:	2264      	movs	r2, #100	; 0x64
 801a6b2:	b280      	uxth	r0, r0
}
 801a6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+29, Y+2, 'd');
 801a6b8:	f004 bd84 	b.w	801f1c4 <TFT_DrawChar>
 801a6bc:	200001b0 	.word	0x200001b0
 801a6c0:	200001c0 	.word	0x200001c0

0801a6c4 <GUI_TextEn_WriteSD>:

void GUI_TextEn_WriteSD(uint16_t X, uint16_t Y)
{
 801a6c4:	b538      	push	{r3, r4, r5, lr}
 801a6c6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a6c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a6cc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a6ce:	f004 fc89 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a6d2:	2063      	movs	r0, #99	; 0x63
 801a6d4:	f004 fc8c 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a6d8:	4815      	ldr	r0, [pc, #84]	; (801a730 <GUI_TextEn_WriteSD+0x6c>)
 801a6da:	f004 fc7d 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'W');
 801a6de:	4621      	mov	r1, r4
 801a6e0:	2257      	movs	r2, #87	; 0x57
 801a6e2:	4628      	mov	r0, r5
 801a6e4:	f004 fd6e 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+17, Y+2, 'r');
 801a6e8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 801a6ea:	4812      	ldr	r0, [pc, #72]	; (801a734 <GUI_TextEn_WriteSD+0x70>)
 801a6ec:	f004 fc74 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'r');
 801a6f0:	b2a4      	uxth	r4, r4
 801a6f2:	f105 0011 	add.w	r0, r5, #17
 801a6f6:	4621      	mov	r1, r4
 801a6f8:	2272      	movs	r2, #114	; 0x72
 801a6fa:	b280      	uxth	r0, r0
 801a6fc:	f004 fd62 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'i');
 801a700:	f105 001c 	add.w	r0, r5, #28
 801a704:	4621      	mov	r1, r4
 801a706:	2269      	movs	r2, #105	; 0x69
 801a708:	b280      	uxth	r0, r0
 801a70a:	f004 fd5b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 't');
 801a70e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801a712:	4621      	mov	r1, r4
 801a714:	2274      	movs	r2, #116	; 0x74
 801a716:	b280      	uxth	r0, r0
 801a718:	f004 fd54 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 'e');
 801a71c:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801a720:	4621      	mov	r1, r4
 801a722:	2265      	movs	r2, #101	; 0x65
 801a724:	b280      	uxth	r0, r0
}
 801a726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+53, Y+2, 'e');
 801a72a:	f004 bd4b 	b.w	801f1c4 <TFT_DrawChar>
 801a72e:	bf00      	nop
 801a730:	200001b0 	.word	0x200001b0
 801a734:	200001c0 	.word	0x200001c0

0801a738 <GUI_TextEn_Info_Callibration>:


void GUI_TextEn_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 801a738:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a73a:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 801a73c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a740:	2300      	movs	r3, #0
 801a742:	9300      	str	r3, [sp, #0]
 801a744:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801a748:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801a74a:	f004 fc4b 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a74e:	2063      	movs	r0, #99	; 0x63
 801a750:	f004 fc4e 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a754:	4834      	ldr	r0, [pc, #208]	; (801a828 <GUI_TextEn_Info_Callibration+0xf0>)
	TFT_DrawChar(X+89, Y+2, 't');
	TFT_DrawChar(X+97, Y+2, 'i');
	TFT_DrawChar(X+108, Y+2, 'o');
	TFT_DrawChar(X+120, Y+2, 'n');
	
	sprintf (buffer, "%02u",  date);
 801a756:	4d35      	ldr	r5, [pc, #212]	; (801a82c <GUI_TextEn_Info_Callibration+0xf4>)
	TFT_SetFont(&Font16EN_arch_big);
 801a758:	f004 fc3e 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801a75c:	2243      	movs	r2, #67	; 0x43
 801a75e:	2164      	movs	r1, #100	; 0x64
 801a760:	2046      	movs	r0, #70	; 0x46
 801a762:	f004 fd2f 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a766:	4832      	ldr	r0, [pc, #200]	; (801a830 <GUI_TextEn_Info_Callibration+0xf8>)
 801a768:	f004 fc36 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 801a76c:	2261      	movs	r2, #97	; 0x61
 801a76e:	2166      	movs	r1, #102	; 0x66
 801a770:	2056      	movs	r0, #86	; 0x56
 801a772:	f004 fd27 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'l');
 801a776:	226c      	movs	r2, #108	; 0x6c
 801a778:	2166      	movs	r1, #102	; 0x66
 801a77a:	2063      	movs	r0, #99	; 0x63
 801a77c:	f004 fd22 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+38, Y+2, 'i');
 801a780:	2269      	movs	r2, #105	; 0x69
 801a782:	2166      	movs	r1, #102	; 0x66
 801a784:	206c      	movs	r0, #108	; 0x6c
 801a786:	f004 fd1d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+2, 'b');
 801a78a:	2262      	movs	r2, #98	; 0x62
 801a78c:	2166      	movs	r1, #102	; 0x66
 801a78e:	2078      	movs	r0, #120	; 0x78
 801a790:	f004 fd18 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y+2, 'r');
 801a794:	2272      	movs	r2, #114	; 0x72
 801a796:	2166      	movs	r1, #102	; 0x66
 801a798:	2085      	movs	r0, #133	; 0x85
 801a79a:	f004 fd13 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'a');
 801a79e:	2261      	movs	r2, #97	; 0x61
 801a7a0:	2166      	movs	r1, #102	; 0x66
 801a7a2:	2092      	movs	r0, #146	; 0x92
 801a7a4:	f004 fd0e 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 't');
 801a7a8:	2274      	movs	r2, #116	; 0x74
 801a7aa:	2166      	movs	r1, #102	; 0x66
 801a7ac:	209f      	movs	r0, #159	; 0x9f
 801a7ae:	f004 fd09 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+97, Y+2, 'i');
 801a7b2:	2269      	movs	r2, #105	; 0x69
 801a7b4:	2166      	movs	r1, #102	; 0x66
 801a7b6:	20a7      	movs	r0, #167	; 0xa7
 801a7b8:	f004 fd04 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+108, Y+2, 'o');
 801a7bc:	226f      	movs	r2, #111	; 0x6f
 801a7be:	2166      	movs	r1, #102	; 0x66
 801a7c0:	20b2      	movs	r0, #178	; 0xb2
 801a7c2:	f004 fcff 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y+2, 'n');
 801a7c6:	226e      	movs	r2, #110	; 0x6e
 801a7c8:	2166      	movs	r1, #102	; 0x66
 801a7ca:	20be      	movs	r0, #190	; 0xbe
 801a7cc:	f004 fcfa 	bl	801f1c4 <TFT_DrawChar>
	sprintf (buffer, "%02u",  date);
 801a7d0:	4622      	mov	r2, r4
 801a7d2:	4629      	mov	r1, r5
 801a7d4:	4668      	mov	r0, sp
 801a7d6:	f007 ff9b 	bl	8022710 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801a7da:	4816      	ldr	r0, [pc, #88]	; (801a834 <GUI_TextEn_Info_Callibration+0xfc>)
 801a7dc:	f004 fbfc 	bl	801efd8 <TFT_SetFont>
	buffer[2] = '.';
 801a7e0:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a7e2:	2303      	movs	r3, #3
 801a7e4:	466a      	mov	r2, sp
 801a7e6:	2182      	movs	r1, #130	; 0x82
 801a7e8:	201e      	movs	r0, #30
	buffer[2] = '.';
 801a7ea:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a7ee:	f004 fd5f 	bl	801f2b0 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 801a7f2:	4632      	mov	r2, r6
 801a7f4:	4629      	mov	r1, r5
 801a7f6:	4668      	mov	r0, sp
 801a7f8:	f007 ff8a 	bl	8022710 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a7fc:	2303      	movs	r3, #3
 801a7fe:	466a      	mov	r2, sp
 801a800:	2182      	movs	r1, #130	; 0x82
 801a802:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 801a804:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a808:	f004 fd52 	bl	801f2b0 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 801a80c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801a810:	4909      	ldr	r1, [pc, #36]	; (801a838 <GUI_TextEn_Info_Callibration+0x100>)
 801a812:	4668      	mov	r0, sp
 801a814:	f007 ff7c 	bl	8022710 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a818:	2303      	movs	r3, #3
 801a81a:	466a      	mov	r2, sp
 801a81c:	2182      	movs	r1, #130	; 0x82
 801a81e:	209b      	movs	r0, #155	; 0x9b
 801a820:	f004 fd46 	bl	801f2b0 <TFT_DisplayString>
}
 801a824:	b002      	add	sp, #8
 801a826:	bd70      	pop	{r4, r5, r6, pc}
 801a828:	200001b0 	.word	0x200001b0
 801a82c:	0803417d 	.word	0x0803417d
 801a830:	200001c0 	.word	0x200001c0
 801a834:	200001f0 	.word	0x200001f0
 801a838:	08034182 	.word	0x08034182

0801a83c <GUI_TextEn_Info_Serial>:

void GUI_TextEn_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 801a83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a83e:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 801a840:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a844:	2300      	movs	r3, #0
 801a846:	9300      	str	r3, [sp, #0]
 801a848:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801a84c:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 801a84e:	f004 fbc9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a852:	2063      	movs	r0, #99	; 0x63
 801a854:	f004 fbcc 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a858:	482e      	ldr	r0, [pc, #184]	; (801a914 <GUI_TextEn_Info_Serial+0xd8>)
 801a85a:	f004 fbbd 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'S');
 801a85e:	2253      	movs	r2, #83	; 0x53
 801a860:	21c8      	movs	r1, #200	; 0xc8
 801a862:	203c      	movs	r0, #60	; 0x3c
 801a864:	f004 fcae 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a868:	482b      	ldr	r0, [pc, #172]	; (801a918 <GUI_TextEn_Info_Serial+0xdc>)
 801a86a:	f004 fbb5 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'e');
 801a86e:	2265      	movs	r2, #101	; 0x65
 801a870:	21ca      	movs	r1, #202	; 0xca
 801a872:	204d      	movs	r0, #77	; 0x4d
 801a874:	f004 fca6 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'r');
 801a878:	2272      	movs	r2, #114	; 0x72
 801a87a:	21ca      	movs	r1, #202	; 0xca
 801a87c:	205a      	movs	r0, #90	; 0x5a
 801a87e:	f004 fca1 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'i');
 801a882:	2269      	movs	r2, #105	; 0x69
 801a884:	21ca      	movs	r1, #202	; 0xca
 801a886:	2066      	movs	r0, #102	; 0x66
 801a888:	f004 fc9c 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+54, Y+2, 'a');
 801a88c:	2261      	movs	r2, #97	; 0x61
 801a88e:	21ca      	movs	r1, #202	; 0xca
 801a890:	2072      	movs	r0, #114	; 0x72
 801a892:	f004 fc97 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+67, Y+2, 'l');
 801a896:	226c      	movs	r2, #108	; 0x6c
 801a898:	21ca      	movs	r1, #202	; 0xca
 801a89a:	207f      	movs	r0, #127	; 0x7f
 801a89c:	f004 fc92 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'n');
 801a8a0:	226e      	movs	r2, #110	; 0x6e
 801a8a2:	21ca      	movs	r1, #202	; 0xca
 801a8a4:	2095      	movs	r0, #149	; 0x95
 801a8a6:	f004 fc8d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+102, Y+2, 'u');
 801a8aa:	2275      	movs	r2, #117	; 0x75
 801a8ac:	21ca      	movs	r1, #202	; 0xca
 801a8ae:	20a2      	movs	r0, #162	; 0xa2
 801a8b0:	f004 fc88 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+115, Y+2, 'm');
 801a8b4:	226d      	movs	r2, #109	; 0x6d
 801a8b6:	21ca      	movs	r1, #202	; 0xca
 801a8b8:	20af      	movs	r0, #175	; 0xaf
 801a8ba:	f004 fc83 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+128, Y+2, 'b');
 801a8be:	2262      	movs	r2, #98	; 0x62
 801a8c0:	21ca      	movs	r1, #202	; 0xca
 801a8c2:	20bc      	movs	r0, #188	; 0xbc
 801a8c4:	f004 fc7e 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+141, Y+2, 'e');
 801a8c8:	2265      	movs	r2, #101	; 0x65
 801a8ca:	21ca      	movs	r1, #202	; 0xca
 801a8cc:	20c9      	movs	r0, #201	; 0xc9
 801a8ce:	f004 fc79 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+154, Y+2, 'r');
 801a8d2:	2272      	movs	r2, #114	; 0x72
 801a8d4:	21ca      	movs	r1, #202	; 0xca
 801a8d6:	20d6      	movs	r0, #214	; 0xd6
 801a8d8:	f004 fc74 	bl	801f1c4 <TFT_DrawChar>

	
	sprintf (buffer, "%u",  Part);
 801a8dc:	462a      	mov	r2, r5
 801a8de:	490f      	ldr	r1, [pc, #60]	; (801a91c <GUI_TextEn_Info_Serial+0xe0>)
 801a8e0:	4668      	mov	r0, sp
 801a8e2:	f007 ff15 	bl	8022710 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801a8e6:	480e      	ldr	r0, [pc, #56]	; (801a920 <GUI_TextEn_Info_Serial+0xe4>)
 801a8e8:	f004 fb76 	bl	801efd8 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a8ec:	2303      	movs	r3, #3
 801a8ee:	466a      	mov	r2, sp
 801a8f0:	21e6      	movs	r1, #230	; 0xe6
 801a8f2:	2028      	movs	r0, #40	; 0x28
 801a8f4:	f004 fcdc 	bl	801f2b0 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 801a8f8:	4622      	mov	r2, r4
 801a8fa:	490a      	ldr	r1, [pc, #40]	; (801a924 <GUI_TextEn_Info_Serial+0xe8>)
 801a8fc:	4668      	mov	r0, sp
 801a8fe:	f007 ff07 	bl	8022710 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a902:	2303      	movs	r3, #3
 801a904:	466a      	mov	r2, sp
 801a906:	21e6      	movs	r1, #230	; 0xe6
 801a908:	2087      	movs	r0, #135	; 0x87
 801a90a:	f004 fcd1 	bl	801f2b0 <TFT_DisplayString>
}
 801a90e:	b003      	add	sp, #12
 801a910:	bd30      	pop	{r4, r5, pc}
 801a912:	bf00      	nop
 801a914:	200001b0 	.word	0x200001b0
 801a918:	200001c0 	.word	0x200001c0
 801a91c:	08034186 	.word	0x08034186
 801a920:	200001f0 	.word	0x200001f0
 801a924:	08034189 	.word	0x08034189

0801a928 <GUI_TextEn_Info_Ver>:

void GUI_TextEn_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 801a928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801a92a:	2300      	movs	r3, #0
	
	X = 20;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 801a92c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a930:	9302      	str	r3, [sp, #8]
 801a932:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801a936:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801a93a:	f004 fb53 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a93e:	2063      	movs	r0, #99	; 0x63
 801a940:	f004 fb56 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a944:	482e      	ldr	r0, [pc, #184]	; (801aa00 <GUI_TextEn_Info_Ver+0xd8>)
	TFT_DrawChar(X+55, Y+2, 'w');
	TFT_DrawChar(X+70, Y+2, 'a');
	TFT_DrawChar(X+86, Y+2, 'r');
	TFT_DrawChar(X+99, Y+2, 'e');
	
	TFT_SetFont(&Font16);
 801a946:	4c2f      	ldr	r4, [pc, #188]	; (801aa04 <GUI_TextEn_Info_Ver+0xdc>)
	TFT_SetFont(&Font16EN_arch_big);
 801a948:	f004 fb46 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'F');
 801a94c:	2246      	movs	r2, #70	; 0x46
 801a94e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a952:	2014      	movs	r0, #20
 801a954:	f004 fc36 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a958:	482b      	ldr	r0, [pc, #172]	; (801aa08 <GUI_TextEn_Info_Ver+0xe0>)
 801a95a:	f004 fb3d 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'i');
 801a95e:	2269      	movs	r2, #105	; 0x69
 801a960:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a964:	2024      	movs	r0, #36	; 0x24
 801a966:	f004 fc2d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'r');
 801a96a:	2272      	movs	r2, #114	; 0x72
 801a96c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a970:	202f      	movs	r0, #47	; 0x2f
 801a972:	f004 fc27 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y+2, 'm');
 801a976:	226d      	movs	r2, #109	; 0x6d
 801a978:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a97c:	203c      	movs	r0, #60	; 0x3c
 801a97e:	f004 fc21 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+55, Y+2, 'w');
 801a982:	2277      	movs	r2, #119	; 0x77
 801a984:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a988:	204b      	movs	r0, #75	; 0x4b
 801a98a:	f004 fc1b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'a');
 801a98e:	2261      	movs	r2, #97	; 0x61
 801a990:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a994:	205a      	movs	r0, #90	; 0x5a
 801a996:	f004 fc15 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+86, Y+2, 'r');
 801a99a:	2272      	movs	r2, #114	; 0x72
 801a99c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a9a0:	206a      	movs	r0, #106	; 0x6a
 801a9a2:	f004 fc0f 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 801a9a6:	2265      	movs	r2, #101	; 0x65
 801a9a8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a9ac:	2077      	movs	r0, #119	; 0x77
 801a9ae:	f004 fc09 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16);
 801a9b2:	4620      	mov	r0, r4
 801a9b4:	f004 fb10 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+152, Y, '.');
 801a9b8:	222e      	movs	r2, #46	; 0x2e
 801a9ba:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a9be:	20ac      	movs	r0, #172	; 0xac
 801a9c0:	f004 fc00 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+142, Y, 'v');
 801a9c4:	2276      	movs	r2, #118	; 0x76
 801a9c6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a9ca:	20a2      	movs	r0, #162	; 0xa2
 801a9cc:	f004 fbfa 	bl	801f1c4 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 801a9d0:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a9d4:	ee10 0a10 	vmov	r0, s0
 801a9d8:	f7e5 fdce 	bl	8000578 <__aeabi_f2d>
 801a9dc:	4602      	mov	r2, r0
 801a9de:	460b      	mov	r3, r1
 801a9e0:	a802      	add	r0, sp, #8
 801a9e2:	490a      	ldr	r1, [pc, #40]	; (801aa0c <GUI_TextEn_Info_Ver+0xe4>)
 801a9e4:	f007 fe94 	bl	8022710 <sprintf>
	TFT_SetFont(&Font16);
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	f004 faf5 	bl	801efd8 <TFT_SetFont>
	TFT_DisplayString(X+172, Y, (uint8_t *)buffer, LEFT_MODE);
 801a9ee:	2303      	movs	r3, #3
 801a9f0:	aa02      	add	r2, sp, #8
 801a9f2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a9f6:	20c0      	movs	r0, #192	; 0xc0
 801a9f8:	f004 fc5a 	bl	801f2b0 <TFT_DisplayString>
 801a9fc:	b004      	add	sp, #16
 801a9fe:	bd10      	pop	{r4, pc}
 801aa00:	200001b0 	.word	0x200001b0
 801aa04:	200001a8 	.word	0x200001a8
 801aa08:	200001c0 	.word	0x200001c0
 801aa0c:	0803416b 	.word	0x0803416b

0801aa10 <GUI_TitleString_Name>:
#include "stdio.h"
#include "GUI_Text_Elements_RU.h"

void GUI_TitleString_Name(uint16_t X, uint16_t Y)
{
 801aa10:	b538      	push	{r3, r4, r5, lr}
 801aa12:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801aa14:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801aa18:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801aa1a:	f004 fae3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 801aa1e:	2084      	movs	r0, #132	; 0x84
 801aa20:	f004 fae6 	bl	801eff0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 801aa24:	4825      	ldr	r0, [pc, #148]	; (801aabc <GUI_TitleString_Name+0xac>)
 801aa26:	f004 fad7 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'T');
 801aa2a:	4629      	mov	r1, r5
 801aa2c:	4620      	mov	r0, r4
 801aa2e:	2254      	movs	r2, #84	; 0x54
 801aa30:	f004 fbc8 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+15, 	Y, 'K');
 801aa34:	f104 000f 	add.w	r0, r4, #15
 801aa38:	4629      	mov	r1, r5
 801aa3a:	224b      	movs	r2, #75	; 0x4b
 801aa3c:	b280      	uxth	r0, r0
 801aa3e:	f004 fbc1 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+30, 	Y, 'A');
 801aa42:	f104 001e 	add.w	r0, r4, #30
 801aa46:	4629      	mov	r1, r5
 801aa48:	2241      	movs	r2, #65	; 0x41
 801aa4a:	b280      	uxth	r0, r0
 801aa4c:	f004 fbba 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+45, 	Y, '-');
 801aa50:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 801aa54:	4629      	mov	r1, r5
 801aa56:	222d      	movs	r2, #45	; 0x2d
 801aa58:	b280      	uxth	r0, r0
 801aa5a:	f004 fbb3 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+60, 	Y, 'S');
 801aa5e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801aa62:	4629      	mov	r1, r5
 801aa64:	2253      	movs	r2, #83	; 0x53
 801aa66:	b280      	uxth	r0, r0
 801aa68:	f004 fbac 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801aa6c:	4814      	ldr	r0, [pc, #80]	; (801aac0 <GUI_TitleString_Name+0xb0>)
 801aa6e:	f004 fab3 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+75, 	Y, 'p');
 801aa72:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 801aa76:	4629      	mov	r1, r5
 801aa78:	2270      	movs	r2, #112	; 0x70
 801aa7a:	b280      	uxth	r0, r0
 801aa7c:	f004 fba2 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+88, 	Y, 'e');
 801aa80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aa84:	4629      	mov	r1, r5
 801aa86:	2265      	movs	r2, #101	; 0x65
 801aa88:	b280      	uxth	r0, r0
 801aa8a:	f004 fb9b 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+99, 	Y, 'c');
 801aa8e:	f104 0063 	add.w	r0, r4, #99	; 0x63
 801aa92:	4629      	mov	r1, r5
 801aa94:	2263      	movs	r2, #99	; 0x63
 801aa96:	b280      	uxth	r0, r0
 801aa98:	f004 fb94 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+109, 	Y, 't');
 801aa9c:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801aaa0:	4629      	mov	r1, r5
 801aaa2:	2274      	movs	r2, #116	; 0x74
 801aaa4:	b280      	uxth	r0, r0
 801aaa6:	f004 fb8d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+120, 	Y, 'r');
 801aaaa:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801aaae:	4629      	mov	r1, r5
 801aab0:	2272      	movs	r2, #114	; 0x72
 801aab2:	b280      	uxth	r0, r0
}
 801aab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+120, 	Y, 'r');
 801aab8:	f004 bb84 	b.w	801f1c4 <TFT_DrawChar>
 801aabc:	200001b0 	.word	0x200001b0
 801aac0:	200001c0 	.word	0x200001c0

0801aac4 <GUI_TitleString_Version>:

void GUI_TitleString_Version(uint16_t X, uint16_t Y, float Version)
{
 801aac4:	b530      	push	{r4, r5, lr}
 801aac6:	b085      	sub	sp, #20
	char buffer[5] = {0};
 801aac8:	2300      	movs	r3, #0
{
 801aaca:	4604      	mov	r4, r0
	
	TFT_SetTextColor(TFT_White);
 801aacc:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801aad0:	9302      	str	r3, [sp, #8]
 801aad2:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801aad6:	ed8d 0a01 	vstr	s0, [sp, #4]
 801aada:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801aadc:	f004 fa82 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 801aae0:	2084      	movs	r0, #132	; 0x84
 801aae2:	f004 fa85 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
 801aae6:	4815      	ldr	r0, [pc, #84]	; (801ab3c <GUI_TitleString_Version+0x78>)
 801aae8:	f004 fa76 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'v');
 801aaec:	4629      	mov	r1, r5
 801aaee:	2276      	movs	r2, #118	; 0x76
 801aaf0:	4620      	mov	r0, r4
 801aaf2:	f004 fb67 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 801aaf6:	4812      	ldr	r0, [pc, #72]	; (801ab40 <GUI_TitleString_Version+0x7c>)
 801aaf8:	f004 fa6e 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+13, 		Y, '.');
 801aafc:	f104 000d 	add.w	r0, r4, #13
 801ab00:	222e      	movs	r2, #46	; 0x2e
 801ab02:	4629      	mov	r1, r5
 801ab04:	b280      	uxth	r0, r0
 801ab06:	f004 fb5d 	bl	801f1c4 <TFT_DrawChar>
	sprintf (buffer, "%.1f",  Version);
 801ab0a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ab0e:	ee10 0a10 	vmov	r0, s0
 801ab12:	f7e5 fd31 	bl	8000578 <__aeabi_f2d>
 801ab16:	4602      	mov	r2, r0
 801ab18:	460b      	mov	r3, r1
 801ab1a:	a802      	add	r0, sp, #8
 801ab1c:	4909      	ldr	r1, [pc, #36]	; (801ab44 <GUI_TitleString_Version+0x80>)
 801ab1e:	f007 fdf7 	bl	8022710 <sprintf>
	TFT_SetFont(&Font16);
 801ab22:	4809      	ldr	r0, [pc, #36]	; (801ab48 <GUI_TitleString_Version+0x84>)
 801ab24:	f004 fa58 	bl	801efd8 <TFT_SetFont>
	TFT_DisplayString(X+24, Y, (uint8_t *)buffer, LEFT_MODE);
 801ab28:	f104 0018 	add.w	r0, r4, #24
 801ab2c:	2303      	movs	r3, #3
 801ab2e:	aa02      	add	r2, sp, #8
 801ab30:	4629      	mov	r1, r5
 801ab32:	b280      	uxth	r0, r0
 801ab34:	f004 fbbc 	bl	801f2b0 <TFT_DisplayString>
}
 801ab38:	b005      	add	sp, #20
 801ab3a:	bd30      	pop	{r4, r5, pc}
 801ab3c:	200001c0 	.word	0x200001c0
 801ab40:	200001b0 	.word	0x200001b0
 801ab44:	0803416b 	.word	0x0803416b
 801ab48:	200001a8 	.word	0x200001a8

0801ab4c <GUI_TextRu_Language>:

void GUI_TextRu_Language(uint16_t X, uint16_t Y)
{
 801ab4c:	b538      	push	{r3, r4, r5, lr}
 801ab4e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801ab50:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ab54:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801ab56:	f004 fa45 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ab5a:	2063      	movs	r0, #99	; 0x63
 801ab5c:	f004 fa48 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ab60:	4811      	ldr	r0, [pc, #68]	; (801aba8 <GUI_TextRu_Language+0x5c>)
 801ab62:	f004 fa39 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 801ab66:	4621      	mov	r1, r4
 801ab68:	22af      	movs	r2, #175	; 0xaf
 801ab6a:	4628      	mov	r0, r5
 801ab6c:	f004 fa46 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'з');
 801ab70:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801ab72:	480e      	ldr	r0, [pc, #56]	; (801abac <GUI_TextRu_Language+0x60>)
 801ab74:	f004 fa30 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'з');
 801ab78:	b2a4      	uxth	r4, r4
 801ab7a:	f105 000f 	add.w	r0, r5, #15
 801ab7e:	4621      	mov	r1, r4
 801ab80:	22b7      	movs	r2, #183	; 0xb7
 801ab82:	b280      	uxth	r0, r0
 801ab84:	f004 fa3a 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ы');
 801ab88:	f105 001c 	add.w	r0, r5, #28
 801ab8c:	4621      	mov	r1, r4
 801ab8e:	228b      	movs	r2, #139	; 0x8b
 801ab90:	b280      	uxth	r0, r0
 801ab92:	f004 fa33 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'к');
 801ab96:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801ab9a:	4621      	mov	r1, r4
 801ab9c:	22ba      	movs	r2, #186	; 0xba
 801ab9e:	b280      	uxth	r0, r0
}
 801aba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+41, Y+5, 'к');
 801aba4:	f004 ba2a 	b.w	801effc <TFT_DrawCharRus>
 801aba8:	200001d0 	.word	0x200001d0
 801abac:	200001d8 	.word	0x200001d8

0801abb0 <GUI_TextRu_Russian>:

void GUI_TextRu_Russian(uint16_t X, uint16_t Y)
{
 801abb0:	b538      	push	{r3, r4, r5, lr}
 801abb2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801abb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801abb8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801abba:	f004 fa13 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801abbe:	2063      	movs	r0, #99	; 0x63
 801abc0:	f004 fa16 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801abc4:	481c      	ldr	r0, [pc, #112]	; (801ac38 <GUI_TextRu_Russian+0x88>)
 801abc6:	f004 fa07 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 801abca:	4621      	mov	r1, r4
 801abcc:	22a0      	movs	r2, #160	; 0xa0
 801abce:	4628      	mov	r0, r5
 801abd0:	f004 fa14 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801abd4:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801abd6:	4819      	ldr	r0, [pc, #100]	; (801ac3c <GUI_TextRu_Russian+0x8c>)
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801abd8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801abda:	f004 f9fd 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801abde:	f105 000f 	add.w	r0, r5, #15
 801abe2:	4621      	mov	r1, r4
 801abe4:	2283      	movs	r2, #131	; 0x83
 801abe6:	b280      	uxth	r0, r0
 801abe8:	f004 fa08 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'с');
 801abec:	f105 001c 	add.w	r0, r5, #28
 801abf0:	4621      	mov	r1, r4
 801abf2:	2281      	movs	r2, #129	; 0x81
 801abf4:	b280      	uxth	r0, r0
 801abf6:	f004 fa01 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'с');
 801abfa:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801abfe:	4621      	mov	r1, r4
 801ac00:	2281      	movs	r2, #129	; 0x81
 801ac02:	b280      	uxth	r0, r0
 801ac04:	f004 f9fa 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'к');
 801ac08:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801ac0c:	4621      	mov	r1, r4
 801ac0e:	22ba      	movs	r2, #186	; 0xba
 801ac10:	b280      	uxth	r0, r0
 801ac12:	f004 f9f3 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+64, Y+5, 'и');
 801ac16:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801ac1a:	4621      	mov	r1, r4
 801ac1c:	22b8      	movs	r2, #184	; 0xb8
 801ac1e:	b280      	uxth	r0, r0
 801ac20:	f004 f9ec 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+77, Y+5, 'й');
 801ac24:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 801ac28:	4621      	mov	r1, r4
 801ac2a:	22b9      	movs	r2, #185	; 0xb9
 801ac2c:	b280      	uxth	r0, r0
}
 801ac2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+77, Y+5, 'й');
 801ac32:	f004 b9e3 	b.w	801effc <TFT_DrawCharRus>
 801ac36:	bf00      	nop
 801ac38:	200001d0 	.word	0x200001d0
 801ac3c:	200001d8 	.word	0x200001d8

0801ac40 <GUI_TextRu_Info>:



void GUI_TextRu_Info(uint16_t X, uint16_t Y)
{
 801ac40:	b538      	push	{r3, r4, r5, lr}
 801ac42:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801ac44:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ac48:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801ac4a:	f004 f9cb 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ac4e:	2063      	movs	r0, #99	; 0x63
 801ac50:	f004 f9ce 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ac54:	4849      	ldr	r0, [pc, #292]	; (801ad7c <GUI_TextRu_Info+0x13c>)
 801ac56:	f004 f9bf 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'И');
 801ac5a:	4621      	mov	r1, r4
 801ac5c:	2298      	movs	r2, #152	; 0x98
 801ac5e:	4628      	mov	r0, r5
 801ac60:	f004 f9cc 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801ac64:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801ac66:	4846      	ldr	r0, [pc, #280]	; (801ad80 <GUI_TextRu_Info+0x140>)
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801ac68:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801ac6a:	f004 f9b5 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801ac6e:	f105 000f 	add.w	r0, r5, #15
 801ac72:	4621      	mov	r1, r4
 801ac74:	22bd      	movs	r2, #189	; 0xbd
 801ac76:	b280      	uxth	r0, r0
 801ac78:	f004 f9c0 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ф');
 801ac7c:	f105 001c 	add.w	r0, r5, #28
 801ac80:	4621      	mov	r1, r4
 801ac82:	2284      	movs	r2, #132	; 0x84
 801ac84:	b280      	uxth	r0, r0
 801ac86:	f004 f9b9 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'о');
 801ac8a:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801ac8e:	4621      	mov	r1, r4
 801ac90:	22be      	movs	r2, #190	; 0xbe
 801ac92:	b280      	uxth	r0, r0
 801ac94:	f004 f9b2 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'р');
 801ac98:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801ac9c:	4621      	mov	r1, r4
 801ac9e:	2280      	movs	r2, #128	; 0x80
 801aca0:	b280      	uxth	r0, r0
 801aca2:	f004 f9ab 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'м');
 801aca6:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801acaa:	4621      	mov	r1, r4
 801acac:	22bc      	movs	r2, #188	; 0xbc
 801acae:	b280      	uxth	r0, r0
 801acb0:	f004 f9a4 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+78, Y+5, 'а');
 801acb4:	f105 004e 	add.w	r0, r5, #78	; 0x4e
 801acb8:	4621      	mov	r1, r4
 801acba:	22b0      	movs	r2, #176	; 0xb0
 801acbc:	b280      	uxth	r0, r0
 801acbe:	f004 f99d 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+90, Y+5, 'ц');
 801acc2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801acc6:	4621      	mov	r1, r4
 801acc8:	2286      	movs	r2, #134	; 0x86
 801acca:	b280      	uxth	r0, r0
 801accc:	f004 f996 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+102, Y+5, 'и');
 801acd0:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801acd4:	4621      	mov	r1, r4
 801acd6:	22b8      	movs	r2, #184	; 0xb8
 801acd8:	b280      	uxth	r0, r0
 801acda:	f004 f98f 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+114, Y+5, 'я');
 801acde:	f105 0072 	add.w	r0, r5, #114	; 0x72
 801ace2:	4621      	mov	r1, r4
 801ace4:	228f      	movs	r2, #143	; 0x8f
 801ace6:	b280      	uxth	r0, r0
 801ace8:	f004 f988 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+126, Y+5, 0x01);
 801acec:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 801acf0:	4621      	mov	r1, r4
 801acf2:	2201      	movs	r2, #1
 801acf4:	b280      	uxth	r0, r0
 801acf6:	f004 f981 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+138, Y+5, 'о');
 801acfa:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 801acfe:	4621      	mov	r1, r4
 801ad00:	22be      	movs	r2, #190	; 0xbe
 801ad02:	b280      	uxth	r0, r0
 801ad04:	f004 f97a 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+150, Y+5, 0x01);
 801ad08:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801ad0c:	4621      	mov	r1, r4
 801ad0e:	2201      	movs	r2, #1
 801ad10:	b280      	uxth	r0, r0
 801ad12:	f004 f973 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+5, 'п');
 801ad16:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801ad1a:	4621      	mov	r1, r4
 801ad1c:	22bf      	movs	r2, #191	; 0xbf
 801ad1e:	b280      	uxth	r0, r0
 801ad20:	f004 f96c 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+174, Y+5, 'р');
 801ad24:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 801ad28:	4621      	mov	r1, r4
 801ad2a:	2280      	movs	r2, #128	; 0x80
 801ad2c:	b280      	uxth	r0, r0
 801ad2e:	f004 f965 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+186, Y+5, 'и');
 801ad32:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 801ad36:	4621      	mov	r1, r4
 801ad38:	22b8      	movs	r2, #184	; 0xb8
 801ad3a:	b280      	uxth	r0, r0
 801ad3c:	f004 f95e 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+198, Y+5, 'б');
 801ad40:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801ad44:	4621      	mov	r1, r4
 801ad46:	22b1      	movs	r2, #177	; 0xb1
 801ad48:	b280      	uxth	r0, r0
 801ad4a:	f004 f957 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+210, Y+5, 'о');
 801ad4e:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 801ad52:	4621      	mov	r1, r4
 801ad54:	22be      	movs	r2, #190	; 0xbe
 801ad56:	b280      	uxth	r0, r0
 801ad58:	f004 f950 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+222, Y+5, 'р');
 801ad5c:	f105 00de 	add.w	r0, r5, #222	; 0xde
 801ad60:	4621      	mov	r1, r4
 801ad62:	2280      	movs	r2, #128	; 0x80
 801ad64:	b280      	uxth	r0, r0
 801ad66:	f004 f949 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+234, Y+5, 'е');
 801ad6a:	f105 00ea 	add.w	r0, r5, #234	; 0xea
 801ad6e:	4621      	mov	r1, r4
 801ad70:	22b5      	movs	r2, #181	; 0xb5
 801ad72:	b280      	uxth	r0, r0
}
 801ad74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+234, Y+5, 'е');
 801ad78:	f004 b940 	b.w	801effc <TFT_DrawCharRus>
 801ad7c:	200001d0 	.word	0x200001d0
 801ad80:	200001d8 	.word	0x200001d8

0801ad84 <GUI_TextRu_Mode>:

void GUI_TextRu_Mode(uint16_t X, uint16_t Y)
{
 801ad84:	b538      	push	{r3, r4, r5, lr}
 801ad86:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801ad88:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ad8c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801ad8e:	f004 f929 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ad92:	2063      	movs	r0, #99	; 0x63
 801ad94:	f004 f92c 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ad98:	4815      	ldr	r0, [pc, #84]	; (801adf0 <GUI_TextRu_Mode+0x6c>)
 801ad9a:	f004 f91d 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 801ad9e:	4621      	mov	r1, r4
 801ada0:	22a0      	movs	r2, #160	; 0xa0
 801ada2:	4628      	mov	r0, r5
 801ada4:	f004 f92a 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'е');
 801ada8:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801adaa:	4812      	ldr	r0, [pc, #72]	; (801adf4 <GUI_TextRu_Mode+0x70>)
 801adac:	f004 f914 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'е');
 801adb0:	b2a4      	uxth	r4, r4
 801adb2:	f105 000f 	add.w	r0, r5, #15
 801adb6:	4621      	mov	r1, r4
 801adb8:	22b5      	movs	r2, #181	; 0xb5
 801adba:	b280      	uxth	r0, r0
 801adbc:	f004 f91e 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ж');
 801adc0:	f105 001c 	add.w	r0, r5, #28
 801adc4:	4621      	mov	r1, r4
 801adc6:	22b6      	movs	r2, #182	; 0xb6
 801adc8:	b280      	uxth	r0, r0
 801adca:	f004 f917 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 801adce:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801add2:	4621      	mov	r1, r4
 801add4:	22b8      	movs	r2, #184	; 0xb8
 801add6:	b280      	uxth	r0, r0
 801add8:	f004 f910 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+54, Y+5, 'м');
 801addc:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801ade0:	4621      	mov	r1, r4
 801ade2:	22bc      	movs	r2, #188	; 0xbc
 801ade4:	b280      	uxth	r0, r0
}
 801ade6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+54, Y+5, 'м');
 801adea:	f004 b907 	b.w	801effc <TFT_DrawCharRus>
 801adee:	bf00      	nop
 801adf0:	200001d0 	.word	0x200001d0
 801adf4:	200001d8 	.word	0x200001d8

0801adf8 <GUI_TextRu_Illuminance>:

void GUI_TextRu_Illuminance(uint16_t X, uint16_t Y)
{
 801adf8:	b538      	push	{r3, r4, r5, lr}
 801adfa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801adfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ae00:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801ae02:	f004 f8ef 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ae06:	2063      	movs	r0, #99	; 0x63
 801ae08:	f004 f8f2 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ae0c:	482d      	ldr	r0, [pc, #180]	; (801aec4 <GUI_TextRu_Illuminance+0xcc>)
 801ae0e:	f004 f8e3 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 801ae12:	4621      	mov	r1, r4
 801ae14:	229e      	movs	r2, #158	; 0x9e
 801ae16:	4628      	mov	r0, r5
 801ae18:	f004 f8f0 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801ae1c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801ae1e:	482a      	ldr	r0, [pc, #168]	; (801aec8 <GUI_TextRu_Illuminance+0xd0>)
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801ae20:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801ae22:	f004 f8d9 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801ae26:	f105 000f 	add.w	r0, r5, #15
 801ae2a:	4621      	mov	r1, r4
 801ae2c:	2281      	movs	r2, #129	; 0x81
 801ae2e:	b280      	uxth	r0, r0
 801ae30:	f004 f8e4 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+26, Y+5, 'в');
 801ae34:	f105 001a 	add.w	r0, r5, #26
 801ae38:	4621      	mov	r1, r4
 801ae3a:	22b2      	movs	r2, #178	; 0xb2
 801ae3c:	b280      	uxth	r0, r0
 801ae3e:	f004 f8dd 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+38, Y+5, 'е');
 801ae42:	f105 0026 	add.w	r0, r5, #38	; 0x26
 801ae46:	4621      	mov	r1, r4
 801ae48:	22b5      	movs	r2, #181	; 0xb5
 801ae4a:	b280      	uxth	r0, r0
 801ae4c:	f004 f8d6 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+50, Y+5, 'щ');
 801ae50:	f105 0032 	add.w	r0, r5, #50	; 0x32
 801ae54:	4621      	mov	r1, r4
 801ae56:	2289      	movs	r2, #137	; 0x89
 801ae58:	b280      	uxth	r0, r0
 801ae5a:	f004 f8cf 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+62, Y+5, 'е');
 801ae5e:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 801ae62:	4621      	mov	r1, r4
 801ae64:	22b5      	movs	r2, #181	; 0xb5
 801ae66:	b280      	uxth	r0, r0
 801ae68:	f004 f8c8 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'н');
 801ae6c:	f105 0049 	add.w	r0, r5, #73	; 0x49
 801ae70:	4621      	mov	r1, r4
 801ae72:	22bd      	movs	r2, #189	; 0xbd
 801ae74:	b280      	uxth	r0, r0
 801ae76:	f004 f8c1 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'н');
 801ae7a:	f105 0055 	add.w	r0, r5, #85	; 0x55
 801ae7e:	4621      	mov	r1, r4
 801ae80:	22bd      	movs	r2, #189	; 0xbd
 801ae82:	b280      	uxth	r0, r0
 801ae84:	f004 f8ba 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 801ae88:	f105 0061 	add.w	r0, r5, #97	; 0x61
 801ae8c:	4621      	mov	r1, r4
 801ae8e:	22be      	movs	r2, #190	; 0xbe
 801ae90:	b280      	uxth	r0, r0
 801ae92:	f004 f8b3 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 801ae96:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801ae9a:	4621      	mov	r1, r4
 801ae9c:	2281      	movs	r2, #129	; 0x81
 801ae9e:	b280      	uxth	r0, r0
 801aea0:	f004 f8ac 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+5, 'т');
 801aea4:	f105 0076 	add.w	r0, r5, #118	; 0x76
 801aea8:	4621      	mov	r1, r4
 801aeaa:	2282      	movs	r2, #130	; 0x82
 801aeac:	b280      	uxth	r0, r0
 801aeae:	f004 f8a5 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 801aeb2:	f105 0082 	add.w	r0, r5, #130	; 0x82
 801aeb6:	4621      	mov	r1, r4
 801aeb8:	228c      	movs	r2, #140	; 0x8c
 801aeba:	b280      	uxth	r0, r0
}
 801aebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 801aec0:	f004 b89c 	b.w	801effc <TFT_DrawCharRus>
 801aec4:	200001d0 	.word	0x200001d0
 801aec8:	200001d8 	.word	0x200001d8

0801aecc <GUI_TextRu_PPF>:

void GUI_TextRu_PPF(uint16_t X, uint16_t Y)
{
 801aecc:	b538      	push	{r3, r4, r5, lr}
 801aece:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801aed0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801aed4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801aed6:	f004 f885 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801aeda:	2063      	movs	r0, #99	; 0x63
 801aedc:	f004 f888 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801aee0:	480b      	ldr	r0, [pc, #44]	; (801af10 <GUI_TextRu_PPF+0x44>)
 801aee2:	f004 f879 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 801aee6:	4629      	mov	r1, r5
 801aee8:	4620      	mov	r0, r4
 801aeea:	22a4      	movs	r2, #164	; 0xa4
 801aeec:	f004 f886 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 801aef0:	f104 0011 	add.w	r0, r4, #17
 801aef4:	4629      	mov	r1, r5
 801aef6:	2290      	movs	r2, #144	; 0x90
 801aef8:	b280      	uxth	r0, r0
 801aefa:	f004 f87f 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801aefe:	f104 0020 	add.w	r0, r4, #32
 801af02:	4629      	mov	r1, r5
 801af04:	22a0      	movs	r2, #160	; 0xa0
 801af06:	b280      	uxth	r0, r0
}
 801af08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+32, Y, 'Р');
 801af0c:	f004 b876 	b.w	801effc <TFT_DrawCharRus>
 801af10:	200001d0 	.word	0x200001d0

0801af14 <GUI_TextRu_PPF_RGB>:

void GUI_TextRu_PPF_RGB(uint16_t X, uint16_t Y)
{
 801af14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af18:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16RU_arch_big);
 801af1a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801b028 <GUI_TextRu_PPF_RGB+0x114>
	TFT_DrawCharRus(X, Y, 'С');
	TFT_SetFont(&Font16RU_arch_small);
 801af1e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801b02c <GUI_TextRu_PPF_RGB+0x118>
	TFT_DrawCharRus(X+15, Y+5, 'и');
	TFT_DrawCharRus(X+27, Y+5, 'н');
	TFT_SetFont(&Font16EN_arch_big);
 801af22:	4f40      	ldr	r7, [pc, #256]	; (801b024 <GUI_TextRu_PPF_RGB+0x110>)
	TFT_SetTextColor(TFT_White);
 801af24:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801af28:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801af2a:	f004 f85b 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801af2e:	2063      	movs	r0, #99	; 0x63
 801af30:	f004 f85e 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801af34:	4648      	mov	r0, r9
 801af36:	f004 f84f 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'С');
 801af3a:	4629      	mov	r1, r5
 801af3c:	22a1      	movs	r2, #161	; 0xa1
 801af3e:	4620      	mov	r0, r4
 801af40:	f004 f85c 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801af44:	1d6e      	adds	r6, r5, #5
	TFT_SetFont(&Font16RU_arch_small);
 801af46:	4640      	mov	r0, r8
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801af48:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font16RU_arch_small);
 801af4a:	f004 f845 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801af4e:	f104 000f 	add.w	r0, r4, #15
 801af52:	4631      	mov	r1, r6
 801af54:	22b8      	movs	r2, #184	; 0xb8
 801af56:	b280      	uxth	r0, r0
 801af58:	f004 f850 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'н');
 801af5c:	f104 001b 	add.w	r0, r4, #27
 801af60:	4631      	mov	r1, r6
 801af62:	22bd      	movs	r2, #189	; 0xbd
 801af64:	b280      	uxth	r0, r0
 801af66:	f004 f849 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801af6a:	4638      	mov	r0, r7
 801af6c:	f004 f834 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+40, Y, '-');
 801af70:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801af74:	4629      	mov	r1, r5
 801af76:	222d      	movs	r2, #45	; 0x2d
 801af78:	b280      	uxth	r0, r0
 801af7a:	f004 f923 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 801af7e:	4648      	mov	r0, r9
 801af80:	f004 f82a 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+55, Y, 'З');
 801af84:	f104 0037 	add.w	r0, r4, #55	; 0x37
 801af88:	4629      	mov	r1, r5
 801af8a:	2297      	movs	r2, #151	; 0x97
 801af8c:	b280      	uxth	r0, r0
 801af8e:	f004 f835 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801af92:	4640      	mov	r0, r8
 801af94:	f004 f820 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+70, Y+5, 'е');
 801af98:	f104 0046 	add.w	r0, r4, #70	; 0x46
 801af9c:	4631      	mov	r1, r6
 801af9e:	22b5      	movs	r2, #181	; 0xb5
 801afa0:	b280      	uxth	r0, r0
 801afa2:	f004 f82b 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+5, 'л');
 801afa6:	f104 0052 	add.w	r0, r4, #82	; 0x52
 801afaa:	4631      	mov	r1, r6
 801afac:	22bb      	movs	r2, #187	; 0xbb
 801afae:	b280      	uxth	r0, r0
 801afb0:	f004 f824 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801afb4:	4638      	mov	r0, r7
 801afb6:	f004 f80f 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+94, Y, '-');
 801afba:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 801afbe:	4629      	mov	r1, r5
 801afc0:	222d      	movs	r2, #45	; 0x2d
 801afc2:	b280      	uxth	r0, r0
 801afc4:	f004 f8fe 	bl	801f1c4 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 801afc8:	4648      	mov	r0, r9
 801afca:	f004 f805 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+109, Y, 'К');
 801afce:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801afd2:	4629      	mov	r1, r5
 801afd4:	229a      	movs	r2, #154	; 0x9a
 801afd6:	b280      	uxth	r0, r0
 801afd8:	f004 f810 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801afdc:	4640      	mov	r0, r8
 801afde:	f003 fffb 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+124, Y+5, 'р');
 801afe2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801afe6:	4631      	mov	r1, r6
 801afe8:	2280      	movs	r2, #128	; 0x80
 801afea:	b280      	uxth	r0, r0
 801afec:	f004 f806 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801aff0:	4638      	mov	r0, r7
 801aff2:	f003 fff1 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+136, Y, '-');
 801aff6:	f104 0088 	add.w	r0, r4, #136	; 0x88
 801affa:	4629      	mov	r1, r5
 801affc:	222d      	movs	r2, #45	; 0x2d
 801affe:	b280      	uxth	r0, r0
 801b000:	f004 f8e0 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+152, Y, 'F');
 801b004:	f104 0098 	add.w	r0, r4, #152	; 0x98
 801b008:	4629      	mov	r1, r5
 801b00a:	2246      	movs	r2, #70	; 0x46
 801b00c:	b280      	uxth	r0, r0
 801b00e:	f004 f8d9 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+167, Y, 'R');
 801b012:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 801b016:	4629      	mov	r1, r5
 801b018:	2252      	movs	r2, #82	; 0x52
 801b01a:	b280      	uxth	r0, r0
}
 801b01c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TFT_DrawChar(X+167, Y, 'R');
 801b020:	f004 b8d0 	b.w	801f1c4 <TFT_DrawChar>
 801b024:	200001b0 	.word	0x200001b0
 801b028:	200001d0 	.word	0x200001d0
 801b02c:	200001d8 	.word	0x200001d8

0801b030 <GUI_TextRu_PPF_bands>:
void GUI_TextRu_PPF_bands(uint16_t X, uint16_t Y)
{
 801b030:	b538      	push	{r3, r4, r5, lr}
 801b032:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b034:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b038:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b03a:	f003 ffd3 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b03e:	2063      	movs	r0, #99	; 0x63
 801b040:	f003 ffd6 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b044:	482d      	ldr	r0, [pc, #180]	; (801b0fc <GUI_TextRu_PPF_bands+0xcc>)
 801b046:	f003 ffc7 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 801b04a:	4621      	mov	r1, r4
 801b04c:	4628      	mov	r0, r5
 801b04e:	22a4      	movs	r2, #164	; 0xa4
 801b050:	f003 ffd4 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 801b054:	f105 0011 	add.w	r0, r5, #17
 801b058:	4621      	mov	r1, r4
 801b05a:	2290      	movs	r2, #144	; 0x90
 801b05c:	b280      	uxth	r0, r0
 801b05e:	f003 ffcd 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801b062:	f105 0020 	add.w	r0, r5, #32
 801b066:	4621      	mov	r1, r4
 801b068:	22a0      	movs	r2, #160	; 0xa0
 801b06a:	b280      	uxth	r0, r0
 801b06c:	f003 ffc6 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801b070:	3402      	adds	r4, #2
	TFT_SetFont(&Font16RU_arch_small);
 801b072:	4823      	ldr	r0, [pc, #140]	; (801b100 <GUI_TextRu_PPF_bands+0xd0>)
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801b074:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b076:	f003 ffaf 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801b07a:	f105 0039 	add.w	r0, r5, #57	; 0x39
 801b07e:	4621      	mov	r1, r4
 801b080:	22b4      	movs	r2, #180	; 0xb4
 801b082:	b280      	uxth	r0, r0
 801b084:	f003 ffba 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+70, Y+2, 'и');
 801b088:	f105 0046 	add.w	r0, r5, #70	; 0x46
 801b08c:	4621      	mov	r1, r4
 801b08e:	22b8      	movs	r2, #184	; 0xb8
 801b090:	b280      	uxth	r0, r0
 801b092:	f003 ffb3 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+83, Y+2, 'а');
 801b096:	f105 0053 	add.w	r0, r5, #83	; 0x53
 801b09a:	4621      	mov	r1, r4
 801b09c:	22b0      	movs	r2, #176	; 0xb0
 801b09e:	b280      	uxth	r0, r0
 801b0a0:	f003 ffac 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+96, Y+2, 'п');
 801b0a4:	f105 0060 	add.w	r0, r5, #96	; 0x60
 801b0a8:	4621      	mov	r1, r4
 801b0aa:	22bf      	movs	r2, #191	; 0xbf
 801b0ac:	b280      	uxth	r0, r0
 801b0ae:	f003 ffa5 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+2, 'а');
 801b0b2:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801b0b6:	4621      	mov	r1, r4
 801b0b8:	22b0      	movs	r2, #176	; 0xb0
 801b0ba:	b280      	uxth	r0, r0
 801b0bc:	f003 ff9e 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+122, Y+2, 'з');
 801b0c0:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 801b0c4:	4621      	mov	r1, r4
 801b0c6:	22b7      	movs	r2, #183	; 0xb7
 801b0c8:	b280      	uxth	r0, r0
 801b0ca:	f003 ff97 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+135, Y+2, 'о');
 801b0ce:	f105 0087 	add.w	r0, r5, #135	; 0x87
 801b0d2:	4621      	mov	r1, r4
 801b0d4:	22be      	movs	r2, #190	; 0xbe
 801b0d6:	b280      	uxth	r0, r0
 801b0d8:	f003 ff90 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+148, Y+2, 'н');
 801b0dc:	f105 0094 	add.w	r0, r5, #148	; 0x94
 801b0e0:	4621      	mov	r1, r4
 801b0e2:	22bd      	movs	r2, #189	; 0xbd
 801b0e4:	b280      	uxth	r0, r0
 801b0e6:	f003 ff89 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 801b0ea:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801b0ee:	4621      	mov	r1, r4
 801b0f0:	228b      	movs	r2, #139	; 0x8b
 801b0f2:	b280      	uxth	r0, r0
}
 801b0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 801b0f8:	f003 bf80 	b.w	801effc <TFT_DrawCharRus>
 801b0fc:	200001d0 	.word	0x200001d0
 801b100:	200001d8 	.word	0x200001d8

0801b104 <GUI_TextRu_Info_Callibration>:

void GUI_TextRu_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 801b104:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b106:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 801b108:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801b10c:	2300      	movs	r3, #0
 801b10e:	9300      	str	r3, [sp, #0]
 801b110:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801b114:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801b116:	f003 ff65 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b11a:	2063      	movs	r0, #99	; 0x63
 801b11c:	f003 ff68 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b120:	4832      	ldr	r0, [pc, #200]	; (801b1ec <GUI_TextRu_Info_Callibration+0xe8>)
	TFT_DrawCharRus(X+82, Y+2, 'о');
	TFT_DrawCharRus(X+95, Y+2, 'в');
	TFT_DrawCharRus(X+108, Y+2, 'к');
	TFT_DrawCharRus(X+118, Y+2, 'а');
	
	sprintf (buffer, "%02u",  date);
 801b122:	4d33      	ldr	r5, [pc, #204]	; (801b1f0 <GUI_TextRu_Info_Callibration+0xec>)
	TFT_SetFont(&Font16RU_arch_big);
 801b124:	f003 ff58 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'К');
 801b128:	229a      	movs	r2, #154	; 0x9a
 801b12a:	2160      	movs	r1, #96	; 0x60
 801b12c:	2046      	movs	r0, #70	; 0x46
 801b12e:	f003 ff65 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801b132:	4830      	ldr	r0, [pc, #192]	; (801b1f4 <GUI_TextRu_Info_Callibration+0xf0>)
 801b134:	f003 ff50 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'а');
 801b138:	22b0      	movs	r2, #176	; 0xb0
 801b13a:	2166      	movs	r1, #102	; 0x66
 801b13c:	2057      	movs	r0, #87	; 0x57
 801b13e:	f003 ff5d 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'л');
 801b142:	22bb      	movs	r2, #187	; 0xbb
 801b144:	2166      	movs	r1, #102	; 0x66
 801b146:	2064      	movs	r0, #100	; 0x64
 801b148:	f003 ff58 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 801b14c:	22b8      	movs	r2, #184	; 0xb8
 801b14e:	2166      	movs	r1, #102	; 0x66
 801b150:	2071      	movs	r0, #113	; 0x71
 801b152:	f003 ff53 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'б');
 801b156:	22b1      	movs	r2, #177	; 0xb1
 801b158:	2166      	movs	r1, #102	; 0x66
 801b15a:	207e      	movs	r0, #126	; 0x7e
 801b15c:	f003 ff4e 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'р');
 801b160:	2280      	movs	r2, #128	; 0x80
 801b162:	2166      	movs	r1, #102	; 0x66
 801b164:	208b      	movs	r0, #139	; 0x8b
 801b166:	f003 ff49 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'о');
 801b16a:	22be      	movs	r2, #190	; 0xbe
 801b16c:	2166      	movs	r1, #102	; 0x66
 801b16e:	2098      	movs	r0, #152	; 0x98
 801b170:	f003 ff44 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'в');
 801b174:	22b2      	movs	r2, #178	; 0xb2
 801b176:	2166      	movs	r1, #102	; 0x66
 801b178:	20a5      	movs	r0, #165	; 0xa5
 801b17a:	f003 ff3f 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+108, Y+2, 'к');
 801b17e:	22ba      	movs	r2, #186	; 0xba
 801b180:	2166      	movs	r1, #102	; 0x66
 801b182:	20b2      	movs	r0, #178	; 0xb2
 801b184:	f003 ff3a 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+2, 'а');
 801b188:	22b0      	movs	r2, #176	; 0xb0
 801b18a:	2166      	movs	r1, #102	; 0x66
 801b18c:	20bc      	movs	r0, #188	; 0xbc
 801b18e:	f003 ff35 	bl	801effc <TFT_DrawCharRus>
	sprintf (buffer, "%02u",  date);
 801b192:	4622      	mov	r2, r4
 801b194:	4629      	mov	r1, r5
 801b196:	4668      	mov	r0, sp
 801b198:	f007 faba 	bl	8022710 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801b19c:	4816      	ldr	r0, [pc, #88]	; (801b1f8 <GUI_TextRu_Info_Callibration+0xf4>)
 801b19e:	f003 ff1b 	bl	801efd8 <TFT_SetFont>
	buffer[2] = '.';
 801b1a2:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801b1a4:	2303      	movs	r3, #3
 801b1a6:	466a      	mov	r2, sp
 801b1a8:	2182      	movs	r1, #130	; 0x82
 801b1aa:	201e      	movs	r0, #30
	buffer[2] = '.';
 801b1ac:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801b1b0:	f004 f87e 	bl	801f2b0 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 801b1b4:	4632      	mov	r2, r6
 801b1b6:	4629      	mov	r1, r5
 801b1b8:	4668      	mov	r0, sp
 801b1ba:	f007 faa9 	bl	8022710 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801b1be:	2303      	movs	r3, #3
 801b1c0:	466a      	mov	r2, sp
 801b1c2:	2182      	movs	r1, #130	; 0x82
 801b1c4:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 801b1c6:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801b1ca:	f004 f871 	bl	801f2b0 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 801b1ce:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801b1d2:	490a      	ldr	r1, [pc, #40]	; (801b1fc <GUI_TextRu_Info_Callibration+0xf8>)
 801b1d4:	4668      	mov	r0, sp
 801b1d6:	f007 fa9b 	bl	8022710 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801b1da:	2303      	movs	r3, #3
 801b1dc:	466a      	mov	r2, sp
 801b1de:	2182      	movs	r1, #130	; 0x82
 801b1e0:	209b      	movs	r0, #155	; 0x9b
 801b1e2:	f004 f865 	bl	801f2b0 <TFT_DisplayString>
}
 801b1e6:	b002      	add	sp, #8
 801b1e8:	bd70      	pop	{r4, r5, r6, pc}
 801b1ea:	bf00      	nop
 801b1ec:	200001d0 	.word	0x200001d0
 801b1f0:	0803417d 	.word	0x0803417d
 801b1f4:	200001d8 	.word	0x200001d8
 801b1f8:	200001f0 	.word	0x200001f0
 801b1fc:	08034182 	.word	0x08034182

0801b200 <GUI_TextRu_WriteSD>:

void GUI_TextRu_WriteSD(uint16_t X, uint16_t Y)
{
 801b200:	b538      	push	{r3, r4, r5, lr}
 801b202:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b204:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b208:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b20a:	f003 feeb 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b20e:	2063      	movs	r0, #99	; 0x63
 801b210:	f003 feee 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b214:	4818      	ldr	r0, [pc, #96]	; (801b278 <GUI_TextRu_WriteSD+0x78>)
 801b216:	f003 fedf 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'З');
 801b21a:	4621      	mov	r1, r4
 801b21c:	2297      	movs	r2, #151	; 0x97
 801b21e:	4628      	mov	r0, r5
 801b220:	f003 feec 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801b224:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b226:	4815      	ldr	r0, [pc, #84]	; (801b27c <GUI_TextRu_WriteSD+0x7c>)
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801b228:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b22a:	f003 fed5 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801b22e:	f105 000f 	add.w	r0, r5, #15
 801b232:	4621      	mov	r1, r4
 801b234:	22b0      	movs	r2, #176	; 0xb0
 801b236:	b280      	uxth	r0, r0
 801b238:	f003 fee0 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'п');
 801b23c:	f105 001c 	add.w	r0, r5, #28
 801b240:	4621      	mov	r1, r4
 801b242:	22bf      	movs	r2, #191	; 0xbf
 801b244:	b280      	uxth	r0, r0
 801b246:	f003 fed9 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 801b24a:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801b24e:	4621      	mov	r1, r4
 801b250:	22b8      	movs	r2, #184	; 0xb8
 801b252:	b280      	uxth	r0, r0
 801b254:	f003 fed2 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'с');
 801b258:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801b25c:	4621      	mov	r1, r4
 801b25e:	2281      	movs	r2, #129	; 0x81
 801b260:	b280      	uxth	r0, r0
 801b262:	f003 fecb 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801b266:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801b26a:	4621      	mov	r1, r4
 801b26c:	228c      	movs	r2, #140	; 0x8c
 801b26e:	b280      	uxth	r0, r0
}
 801b270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801b274:	f003 bec2 	b.w	801effc <TFT_DrawCharRus>
 801b278:	200001d0 	.word	0x200001d0
 801b27c:	200001d8 	.word	0x200001d8

0801b280 <GUI_TextRu_Info_Serial>:

void GUI_TextRu_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 801b280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b282:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 801b284:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801b288:	2300      	movs	r3, #0
 801b28a:	9300      	str	r3, [sp, #0]
 801b28c:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801b290:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 801b292:	f003 fea7 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b296:	2063      	movs	r0, #99	; 0x63
 801b298:	f003 feaa 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b29c:	4830      	ldr	r0, [pc, #192]	; (801b360 <GUI_TextRu_Info_Serial+0xe0>)
 801b29e:	f003 fe9b 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'С');
 801b2a2:	22a1      	movs	r2, #161	; 0xa1
 801b2a4:	21c4      	movs	r1, #196	; 0xc4
 801b2a6:	203c      	movs	r0, #60	; 0x3c
 801b2a8:	f003 fea8 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801b2ac:	482d      	ldr	r0, [pc, #180]	; (801b364 <GUI_TextRu_Info_Serial+0xe4>)
 801b2ae:	f003 fe93 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'е');
 801b2b2:	22b5      	movs	r2, #181	; 0xb5
 801b2b4:	21ca      	movs	r1, #202	; 0xca
 801b2b6:	204d      	movs	r0, #77	; 0x4d
 801b2b8:	f003 fea0 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'р');
 801b2bc:	2280      	movs	r2, #128	; 0x80
 801b2be:	21ca      	movs	r1, #202	; 0xca
 801b2c0:	205a      	movs	r0, #90	; 0x5a
 801b2c2:	f003 fe9b 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 801b2c6:	22b8      	movs	r2, #184	; 0xb8
 801b2c8:	21ca      	movs	r1, #202	; 0xca
 801b2ca:	2067      	movs	r0, #103	; 0x67
 801b2cc:	f003 fe96 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'й');
 801b2d0:	22b9      	movs	r2, #185	; 0xb9
 801b2d2:	21ca      	movs	r1, #202	; 0xca
 801b2d4:	2074      	movs	r0, #116	; 0x74
 801b2d6:	f003 fe91 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'н');
 801b2da:	22bd      	movs	r2, #189	; 0xbd
 801b2dc:	21ca      	movs	r1, #202	; 0xca
 801b2de:	2081      	movs	r0, #129	; 0x81
 801b2e0:	f003 fe8c 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'ы');
 801b2e4:	228b      	movs	r2, #139	; 0x8b
 801b2e6:	21ca      	movs	r1, #202	; 0xca
 801b2e8:	208e      	movs	r0, #142	; 0x8e
 801b2ea:	f003 fe87 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'й');
 801b2ee:	22b9      	movs	r2, #185	; 0xb9
 801b2f0:	21ca      	movs	r1, #202	; 0xca
 801b2f2:	209b      	movs	r0, #155	; 0x9b
 801b2f4:	f003 fe82 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+115, Y+2, 'н');
 801b2f8:	22bd      	movs	r2, #189	; 0xbd
 801b2fa:	21ca      	movs	r1, #202	; 0xca
 801b2fc:	20af      	movs	r0, #175	; 0xaf
 801b2fe:	f003 fe7d 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+128, Y+2, 'о');
 801b302:	22be      	movs	r2, #190	; 0xbe
 801b304:	21ca      	movs	r1, #202	; 0xca
 801b306:	20bc      	movs	r0, #188	; 0xbc
 801b308:	f003 fe78 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+141, Y+2, 'м');
 801b30c:	22bc      	movs	r2, #188	; 0xbc
 801b30e:	21ca      	movs	r1, #202	; 0xca
 801b310:	20c9      	movs	r0, #201	; 0xc9
 801b312:	f003 fe73 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+154, Y+2, 'е');
 801b316:	22b5      	movs	r2, #181	; 0xb5
 801b318:	21ca      	movs	r1, #202	; 0xca
 801b31a:	20d6      	movs	r0, #214	; 0xd6
 801b31c:	f003 fe6e 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+165, Y+2, 'р');
 801b320:	2280      	movs	r2, #128	; 0x80
 801b322:	21ca      	movs	r1, #202	; 0xca
 801b324:	20e1      	movs	r0, #225	; 0xe1
 801b326:	f003 fe69 	bl	801effc <TFT_DrawCharRus>

	sprintf (buffer, "%u",  Part);
 801b32a:	462a      	mov	r2, r5
 801b32c:	490e      	ldr	r1, [pc, #56]	; (801b368 <GUI_TextRu_Info_Serial+0xe8>)
 801b32e:	4668      	mov	r0, sp
 801b330:	f007 f9ee 	bl	8022710 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801b334:	480d      	ldr	r0, [pc, #52]	; (801b36c <GUI_TextRu_Info_Serial+0xec>)
 801b336:	f003 fe4f 	bl	801efd8 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801b33a:	2303      	movs	r3, #3
 801b33c:	466a      	mov	r2, sp
 801b33e:	21e6      	movs	r1, #230	; 0xe6
 801b340:	2028      	movs	r0, #40	; 0x28
 801b342:	f003 ffb5 	bl	801f2b0 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 801b346:	4622      	mov	r2, r4
 801b348:	4909      	ldr	r1, [pc, #36]	; (801b370 <GUI_TextRu_Info_Serial+0xf0>)
 801b34a:	4668      	mov	r0, sp
 801b34c:	f007 f9e0 	bl	8022710 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801b350:	2303      	movs	r3, #3
 801b352:	466a      	mov	r2, sp
 801b354:	21e6      	movs	r1, #230	; 0xe6
 801b356:	2087      	movs	r0, #135	; 0x87
 801b358:	f003 ffaa 	bl	801f2b0 <TFT_DisplayString>
}
 801b35c:	b003      	add	sp, #12
 801b35e:	bd30      	pop	{r4, r5, pc}
 801b360:	200001d0 	.word	0x200001d0
 801b364:	200001d8 	.word	0x200001d8
 801b368:	08034186 	.word	0x08034186
 801b36c:	200001f0 	.word	0x200001f0
 801b370:	08034189 	.word	0x08034189

0801b374 <GUI_TextRu_Info_Ver>:

void GUI_TextRu_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 801b374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801b376:	2300      	movs	r3, #0
	
	X = 120;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 801b378:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801b37c:	9302      	str	r3, [sp, #8]
 801b37e:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801b382:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801b386:	f003 fe2d 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b38a:	2063      	movs	r0, #99	; 0x63
 801b38c:	f003 fe30 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b390:	481b      	ldr	r0, [pc, #108]	; (801b400 <GUI_TextRu_Info_Ver+0x8c>)
	TFT_DrawCharRus(X, Y-1, 'П');
	TFT_DrawCharRus(X+18, Y-1, 'О');
	
	TFT_SetFont(&Font16);
 801b392:	4c1c      	ldr	r4, [pc, #112]	; (801b404 <GUI_TextRu_Info_Ver+0x90>)
	TFT_SetFont(&Font16RU_arch_big);
 801b394:	f003 fe20 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-1, 'П');
 801b398:	229f      	movs	r2, #159	; 0x9f
 801b39a:	f240 115d 	movw	r1, #349	; 0x15d
 801b39e:	2078      	movs	r0, #120	; 0x78
 801b3a0:	f003 fe2c 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+18, Y-1, 'О');
 801b3a4:	229e      	movs	r2, #158	; 0x9e
 801b3a6:	f240 115d 	movw	r1, #349	; 0x15d
 801b3aa:	208a      	movs	r0, #138	; 0x8a
 801b3ac:	f003 fe26 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16);
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	f003 fe11 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+52, Y, '.');
 801b3b6:	222e      	movs	r2, #46	; 0x2e
 801b3b8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801b3bc:	20ac      	movs	r0, #172	; 0xac
 801b3be:	f003 ff01 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y, 'v');
 801b3c2:	2276      	movs	r2, #118	; 0x76
 801b3c4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801b3c8:	20a2      	movs	r0, #162	; 0xa2
 801b3ca:	f003 fefb 	bl	801f1c4 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 801b3ce:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b3d2:	ee10 0a10 	vmov	r0, s0
 801b3d6:	f7e5 f8cf 	bl	8000578 <__aeabi_f2d>
 801b3da:	4602      	mov	r2, r0
 801b3dc:	460b      	mov	r3, r1
 801b3de:	a802      	add	r0, sp, #8
 801b3e0:	4909      	ldr	r1, [pc, #36]	; (801b408 <GUI_TextRu_Info_Ver+0x94>)
 801b3e2:	f007 f995 	bl	8022710 <sprintf>
	TFT_SetFont(&Font16);
 801b3e6:	4620      	mov	r0, r4
 801b3e8:	f003 fdf6 	bl	801efd8 <TFT_SetFont>
	TFT_DisplayString(185, Y, (uint8_t *)buffer, LEFT_MODE);
 801b3ec:	2303      	movs	r3, #3
 801b3ee:	aa02      	add	r2, sp, #8
 801b3f0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801b3f4:	20b9      	movs	r0, #185	; 0xb9
 801b3f6:	f003 ff5b 	bl	801f2b0 <TFT_DisplayString>
}
 801b3fa:	b004      	add	sp, #16
 801b3fc:	bd10      	pop	{r4, pc}
 801b3fe:	bf00      	nop
 801b400:	200001d0 	.word	0x200001d0
 801b404:	200001a8 	.word	0x200001a8
 801b408:	0803416b 	.word	0x0803416b

0801b40c <GUI_TextRu_CCT>:

void GUI_TextRu_CCT(uint16_t X, uint16_t Y)
{
 801b40c:	b538      	push	{r3, r4, r5, lr}
 801b40e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b410:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b414:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801b416:	f003 fde5 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b41a:	2063      	movs	r0, #99	; 0x63
 801b41c:	f003 fde8 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b420:	481e      	ldr	r0, [pc, #120]	; (801b49c <GUI_TextRu_CCT+0x90>)
 801b422:	f003 fdd9 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'К');
 801b426:	4629      	mov	r1, r5
 801b428:	4620      	mov	r0, r4
 801b42a:	229a      	movs	r2, #154	; 0x9a
 801b42c:	f003 fde6 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'Ц');
 801b430:	f104 0011 	add.w	r0, r4, #17
 801b434:	4629      	mov	r1, r5
 801b436:	22a6      	movs	r2, #166	; 0xa6
 801b438:	b280      	uxth	r0, r0
 801b43a:	f003 fddf 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+33, Y, 'Т');
 801b43e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 801b442:	4629      	mov	r1, r5
 801b444:	22a2      	movs	r2, #162	; 0xa2
 801b446:	b280      	uxth	r0, r0
 801b448:	f003 fdd8 	bl	801effc <TFT_DrawCharRus>

	TFT_SetFont(&Font16EN_arch_big);
 801b44c:	4814      	ldr	r0, [pc, #80]	; (801b4a0 <GUI_TextRu_CCT+0x94>)
 801b44e:	f003 fdc3 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+49, Y, '(');
 801b452:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801b456:	4629      	mov	r1, r5
 801b458:	2228      	movs	r2, #40	; 0x28
 801b45a:	b280      	uxth	r0, r0
 801b45c:	f003 feb2 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+104, Y, ')');
 801b460:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b464:	4629      	mov	r1, r5
 801b466:	2229      	movs	r2, #41	; 0x29
 801b468:	b280      	uxth	r0, r0
 801b46a:	f003 feab 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y, 'C');
 801b46e:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 801b472:	4629      	mov	r1, r5
 801b474:	2243      	movs	r2, #67	; 0x43
 801b476:	b280      	uxth	r0, r0
 801b478:	f003 fea4 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y, 'C');
 801b47c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801b480:	4629      	mov	r1, r5
 801b482:	2243      	movs	r2, #67	; 0x43
 801b484:	b280      	uxth	r0, r0
 801b486:	f003 fe9d 	bl	801f1c4 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y, 'T');
 801b48a:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 801b48e:	4629      	mov	r1, r5
 801b490:	2254      	movs	r2, #84	; 0x54
 801b492:	b280      	uxth	r0, r0
}
 801b494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+91, Y, 'T');
 801b498:	f003 be94 	b.w	801f1c4 <TFT_DrawChar>
 801b49c:	200001d0 	.word	0x200001d0
 801b4a0:	200001b0 	.word	0x200001b0

0801b4a4 <GUI_TextRu_umol>:

void GUI_TextRu_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 801b4a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b4a8:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b4aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b4ae:	4616      	mov	r6, r2
 801b4b0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801b4b2:	f003 fd97 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b4b6:	2063      	movs	r0, #99	; 0x63
 801b4b8:	f003 fd9a 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801b4bc:	482f      	ldr	r0, [pc, #188]	; (801b57c <GUI_TextRu_umol+0xd8>)
 801b4be:	f003 fd8b 	bl	801efd8 <TFT_SetFont>
	
	if(deg){
 801b4c2:	2e00      	cmp	r6, #0
 801b4c4:	d057      	beq.n	801b576 <GUI_TextRu_umol+0xd2>
		TFT_DrawCharRus(X, Y, 'м');
 801b4c6:	22bc      	movs	r2, #188	; 0xbc
	} else{
		TFT_DrawCharRus(X, Y, 'я'+1);
 801b4c8:	4629      	mov	r1, r5
 801b4ca:	4620      	mov	r0, r4
 801b4cc:	f003 fd96 	bl	801effc <TFT_DrawCharRus>
	}

	TFT_DrawCharRus(X+8, Y, 'м');
 801b4d0:	f104 0008 	add.w	r0, r4, #8
 801b4d4:	4629      	mov	r1, r5
 801b4d6:	22bc      	movs	r2, #188	; 0xbc
 801b4d8:	b280      	uxth	r0, r0
 801b4da:	f003 fd8f 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y, 'о');
	TFT_DrawCharRus(X+22, Y, 'л');
 801b4de:	f104 0716 	add.w	r7, r4, #22
	TFT_DrawCharRus(X+16, Y, 'о');
 801b4e2:	f104 0010 	add.w	r0, r4, #16
 801b4e6:	4629      	mov	r1, r5
	TFT_DrawCharRus(X+22, Y, 'л');
 801b4e8:	b2bf      	uxth	r7, r7
	TFT_DrawCharRus(X+16, Y, 'о');
 801b4ea:	22be      	movs	r2, #190	; 0xbe
 801b4ec:	b280      	uxth	r0, r0
 801b4ee:	f003 fd85 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+22, Y, 'л');
 801b4f2:	4629      	mov	r1, r5
 801b4f4:	4638      	mov	r0, r7
 801b4f6:	22bb      	movs	r2, #187	; 0xbb
 801b4f8:	f003 fd80 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y, 'ь');
 801b4fc:	f104 001c 	add.w	r0, r4, #28
 801b500:	4629      	mov	r1, r5
 801b502:	228c      	movs	r2, #140	; 0x8c
 801b504:	b280      	uxth	r0, r0
 801b506:	f003 fd79 	bl	801effc <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801b50a:	f105 030a 	add.w	r3, r5, #10
 801b50e:	b29b      	uxth	r3, r3
 801b510:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801b514:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801b518:	4619      	mov	r1, r3
 801b51a:	4620      	mov	r0, r4
 801b51c:	f8cd 8000 	str.w	r8, [sp]
 801b520:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801b522:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801b526:	f003 fa4b 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801b52a:	b2b6      	uxth	r6, r6
 801b52c:	f104 000d 	add.w	r0, r4, #13
 801b530:	4631      	mov	r1, r6
 801b532:	2291      	movs	r2, #145	; 0x91
 801b534:	b280      	uxth	r0, r0
 801b536:	f003 fd61 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+11, 'м');
 801b53a:	1d60      	adds	r0, r4, #5
 801b53c:	4631      	mov	r1, r6
 801b53e:	22bc      	movs	r2, #188	; 0xbc
 801b540:	b280      	uxth	r0, r0
 801b542:	f003 fd5b 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801b546:	f105 030f 	add.w	r3, r5, #15
 801b54a:	f104 0214 	add.w	r2, r4, #20
 801b54e:	f105 010e 	add.w	r1, r5, #14
 801b552:	f104 0013 	add.w	r0, r4, #19
 801b556:	f8cd 8000 	str.w	r8, [sp]
 801b55a:	b29b      	uxth	r3, r3
 801b55c:	b292      	uxth	r2, r2
 801b55e:	b289      	uxth	r1, r1
 801b560:	b280      	uxth	r0, r0
 801b562:	f003 faaf 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801b566:	2281      	movs	r2, #129	; 0x81
 801b568:	4631      	mov	r1, r6
 801b56a:	4638      	mov	r0, r7
}
 801b56c:	b002      	add	sp, #8
 801b56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801b572:	f003 bd43 	b.w	801effc <TFT_DrawCharRus>
		TFT_DrawCharRus(X, Y, 'я'+1);
 801b576:	2290      	movs	r2, #144	; 0x90
 801b578:	e7a6      	b.n	801b4c8 <GUI_TextRu_umol+0x24>
 801b57a:	bf00      	nop
 801b57c:	200001a0 	.word	0x200001a0

0801b580 <GUI_TextRu_umol_sr>:

void GUI_TextRu_umol_sr(uint16_t X, uint16_t Y)
{
 801b580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b584:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b586:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b58a:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801b58c:	f003 fd2a 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b590:	2063      	movs	r0, #99	; 0x63
 801b592:	f003 fd2d 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801b596:	483c      	ldr	r0, [pc, #240]	; (801b688 <GUI_TextRu_umol_sr+0x108>)
 801b598:	f003 fd1e 	bl	801efd8 <TFT_SetFont>
	
	TFT_DrawCharRus(X+7, Y, 'я'+1);
 801b59c:	1de0      	adds	r0, r4, #7
 801b59e:	4629      	mov	r1, r5
 801b5a0:	2290      	movs	r2, #144	; 0x90
 801b5a2:	b280      	uxth	r0, r0
 801b5a4:	f003 fd2a 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y, 'м');
 801b5a8:	f104 000f 	add.w	r0, r4, #15
 801b5ac:	4629      	mov	r1, r5
 801b5ae:	22bc      	movs	r2, #188	; 0xbc
 801b5b0:	b280      	uxth	r0, r0
 801b5b2:	f003 fd23 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+23, Y, 'о');
 801b5b6:	f104 0017 	add.w	r0, r4, #23
 801b5ba:	4629      	mov	r1, r5
 801b5bc:	22be      	movs	r2, #190	; 0xbe
 801b5be:	b280      	uxth	r0, r0
 801b5c0:	f003 fd1c 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y, 'л');
 801b5c4:	f104 001d 	add.w	r0, r4, #29
 801b5c8:	4629      	mov	r1, r5
 801b5ca:	22bb      	movs	r2, #187	; 0xbb
 801b5cc:	b280      	uxth	r0, r0
 801b5ce:	f003 fd15 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+35, Y, 'ь');
 801b5d2:	f104 0023 	add.w	r0, r4, #35	; 0x23
 801b5d6:	4629      	mov	r1, r5
 801b5d8:	228c      	movs	r2, #140	; 0x8c
 801b5da:	b280      	uxth	r0, r0
 801b5dc:	f003 fd0e 	bl	801effc <TFT_DrawCharRus>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 801b5e0:	f105 030a 	add.w	r3, r5, #10
 801b5e4:	b29b      	uxth	r3, r3
 801b5e6:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801b5ea:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 801b5ee:	1ce0      	adds	r0, r4, #3
 801b5f0:	4619      	mov	r1, r3
 801b5f2:	f8cd 8000 	str.w	r8, [sp]
 801b5f6:	b292      	uxth	r2, r2
 801b5f8:	b280      	uxth	r0, r0
	
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 801b5fa:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 801b5fe:	f003 f9df 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 801b602:	b2b6      	uxth	r6, r6
 801b604:	f104 000d 	add.w	r0, r4, #13
 801b608:	4631      	mov	r1, r6
 801b60a:	2291      	movs	r2, #145	; 0x91
 801b60c:	b280      	uxth	r0, r0
 801b60e:	f003 fcf5 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+12, 'м');
 801b612:	1d60      	adds	r0, r4, #5
 801b614:	4631      	mov	r1, r6
 801b616:	22bc      	movs	r2, #188	; 0xbc
 801b618:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801b61a:	f105 0710 	add.w	r7, r5, #16
 801b61e:	350f      	adds	r5, #15
	TFT_DrawCharRus(X+5, Y+12, 'м');
 801b620:	f003 fcec 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801b624:	b2bf      	uxth	r7, r7
 801b626:	b2ad      	uxth	r5, r5
 801b628:	f104 0214 	add.w	r2, r4, #20
 801b62c:	f104 0013 	add.w	r0, r4, #19
 801b630:	462b      	mov	r3, r5
 801b632:	4639      	mov	r1, r7
 801b634:	f8cd 8000 	str.w	r8, [sp]
 801b638:	b292      	uxth	r2, r2
 801b63a:	b280      	uxth	r0, r0
 801b63c:	f003 fa42 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+12, 'с');
 801b640:	f104 0016 	add.w	r0, r4, #22
 801b644:	4631      	mov	r1, r6
 801b646:	2281      	movs	r2, #129	; 0x81
 801b648:	b280      	uxth	r0, r0
 801b64a:	f003 fcd7 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawRectangle(X+30, Y+16, X+31, Y+15, TFT_White);
 801b64e:	f104 021f 	add.w	r2, r4, #31
 801b652:	f104 001e 	add.w	r0, r4, #30
 801b656:	462b      	mov	r3, r5
 801b658:	4639      	mov	r1, r7
 801b65a:	f8cd 8000 	str.w	r8, [sp]
 801b65e:	b292      	uxth	r2, r2
 801b660:	b280      	uxth	r0, r0
 801b662:	f003 fa2f 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+32, Y+12, 'с');
 801b666:	f104 0020 	add.w	r0, r4, #32
 801b66a:	4631      	mov	r1, r6
 801b66c:	2281      	movs	r2, #129	; 0x81
 801b66e:	b280      	uxth	r0, r0
 801b670:	f003 fcc4 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801b674:	f104 0027 	add.w	r0, r4, #39	; 0x27
 801b678:	2280      	movs	r2, #128	; 0x80
 801b67a:	4631      	mov	r1, r6
 801b67c:	b280      	uxth	r0, r0
	
}
 801b67e:	b002      	add	sp, #8
 801b680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801b684:	f003 bcba 	b.w	801effc <TFT_DrawCharRus>
 801b688:	200001a0 	.word	0x200001a0

0801b68c <GUI_TextRu_W_m2>:

void GUI_TextRu_W_m2(uint16_t X, uint16_t Y)
{
 801b68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b68e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b690:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b694:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b696:	f003 fca5 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b69a:	2063      	movs	r0, #99	; 0x63
 801b69c:	f003 fca8 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 801b6a0:	4819      	ldr	r0, [pc, #100]	; (801b708 <GUI_TextRu_W_m2+0x7c>)
 801b6a2:	f003 fc99 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+3, Y, 'В'-17);
 801b6a6:	1ce8      	adds	r0, r5, #3
 801b6a8:	4621      	mov	r1, r4
 801b6aa:	2281      	movs	r2, #129	; 0x81
 801b6ac:	b280      	uxth	r0, r0
 801b6ae:	f003 fca5 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 801b6b2:	4816      	ldr	r0, [pc, #88]	; (801b70c <GUI_TextRu_W_m2+0x80>)
 801b6b4:	f003 fc90 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+13, Y+2, 'т');
 801b6b8:	1ca1      	adds	r1, r4, #2
 801b6ba:	f105 000d 	add.w	r0, r5, #13
 801b6be:	2282      	movs	r2, #130	; 0x82
 801b6c0:	b289      	uxth	r1, r1
 801b6c2:	b280      	uxth	r0, r0
 801b6c4:	f003 fc9a 	bl	801effc <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 801b6c8:	f104 030a 	add.w	r3, r4, #10
 801b6cc:	b29b      	uxth	r3, r3
 801b6ce:	f105 0214 	add.w	r2, r5, #20
 801b6d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b6d6:	9100      	str	r1, [sp, #0]
 801b6d8:	4628      	mov	r0, r5
 801b6da:	4619      	mov	r1, r3
 801b6dc:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 801b6de:	340c      	adds	r4, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 801b6e0:	f003 f96e 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 801b6e4:	b2a4      	uxth	r4, r4
 801b6e6:	f105 000c 	add.w	r0, r5, #12
 801b6ea:	4621      	mov	r1, r4
 801b6ec:	2291      	movs	r2, #145	; 0x91
 801b6ee:	b280      	uxth	r0, r0
 801b6f0:	f003 fc84 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 801b6f4:	1d28      	adds	r0, r5, #4
 801b6f6:	22bc      	movs	r2, #188	; 0xbc
 801b6f8:	4621      	mov	r1, r4
 801b6fa:	b280      	uxth	r0, r0
}
 801b6fc:	b003      	add	sp, #12
 801b6fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 801b702:	f003 bc7b 	b.w	801effc <TFT_DrawCharRus>
 801b706:	bf00      	nop
 801b708:	20000198 	.word	0x20000198
 801b70c:	200001a0 	.word	0x200001a0

0801b710 <GUI_TextRu_W_m2_sr>:

void GUI_TextRu_W_m2_sr(uint16_t X, uint16_t Y)
{
 801b710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b714:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b716:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b71a:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801b71c:	f003 fc62 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b720:	2063      	movs	r0, #99	; 0x63
 801b722:	f003 fc65 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 801b726:	4829      	ldr	r0, [pc, #164]	; (801b7cc <GUI_TextRu_W_m2_sr+0xbc>)
 801b728:	f003 fc56 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+8, Y, 'В'-17);
 801b72c:	f104 0008 	add.w	r0, r4, #8
 801b730:	4629      	mov	r1, r5
 801b732:	2281      	movs	r2, #129	; 0x81
 801b734:	b280      	uxth	r0, r0
 801b736:	f003 fc61 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
	TFT_DrawCharRus(X+18, Y+2, 'т');
 801b73a:	f104 0712 	add.w	r7, r4, #18
	TFT_SetFont(&Font12RU_arch_small);
 801b73e:	4824      	ldr	r0, [pc, #144]	; (801b7d0 <GUI_TextRu_W_m2_sr+0xc0>)
 801b740:	f003 fc4a 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+18, Y+2, 'т');
 801b744:	b2bf      	uxth	r7, r7
 801b746:	1ca9      	adds	r1, r5, #2
 801b748:	4638      	mov	r0, r7
 801b74a:	2282      	movs	r2, #130	; 0x82
 801b74c:	b289      	uxth	r1, r1
 801b74e:	f003 fc55 	bl	801effc <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801b752:	f105 030a 	add.w	r3, r5, #10
 801b756:	b29b      	uxth	r3, r3
 801b758:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801b75c:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801b760:	4619      	mov	r1, r3
 801b762:	4620      	mov	r0, r4
 801b764:	f8cd 8000 	str.w	r8, [sp]
 801b768:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 801b76a:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801b76e:	f003 f927 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 801b772:	b2b6      	uxth	r6, r6
 801b774:	f104 000a 	add.w	r0, r4, #10
 801b778:	4631      	mov	r1, r6
 801b77a:	2291      	movs	r2, #145	; 0x91
 801b77c:	b280      	uxth	r0, r0
 801b77e:	f003 fc3d 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 801b782:	1ca0      	adds	r0, r4, #2
 801b784:	4631      	mov	r1, r6
 801b786:	22bc      	movs	r2, #188	; 0xbc
 801b788:	b280      	uxth	r0, r0
 801b78a:	f003 fc37 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 801b78e:	f105 030f 	add.w	r3, r5, #15
 801b792:	f105 0110 	add.w	r1, r5, #16
 801b796:	f104 0011 	add.w	r0, r4, #17
 801b79a:	b29b      	uxth	r3, r3
 801b79c:	463a      	mov	r2, r7
 801b79e:	f8cd 8000 	str.w	r8, [sp]
 801b7a2:	b289      	uxth	r1, r1
 801b7a4:	b280      	uxth	r0, r0
 801b7a6:	f003 f98d 	bl	801eac4 <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 801b7aa:	f104 0015 	add.w	r0, r4, #21
 801b7ae:	4631      	mov	r1, r6
 801b7b0:	2281      	movs	r2, #129	; 0x81
 801b7b2:	b280      	uxth	r0, r0
 801b7b4:	f003 fc22 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 801b7b8:	f104 001c 	add.w	r0, r4, #28
 801b7bc:	2280      	movs	r2, #128	; 0x80
 801b7be:	4631      	mov	r1, r6
 801b7c0:	b280      	uxth	r0, r0
}
 801b7c2:	b002      	add	sp, #8
 801b7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 801b7c8:	f003 bc18 	b.w	801effc <TFT_DrawCharRus>
 801b7cc:	20000198 	.word	0x20000198
 801b7d0:	200001a0 	.word	0x200001a0

0801b7d4 <GUI_TextRu_Cd_m2>:

void GUI_TextRu_Cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 801b7d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7d8:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b7da:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b7de:	460e      	mov	r6, r1
 801b7e0:	4692      	mov	sl, r2
	TFT_SetTextColor(TFT_White);
 801b7e2:	f003 fbff 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b7e6:	2063      	movs	r0, #99	; 0x63
 801b7e8:	f003 fc02 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801b7ec:	482f      	ldr	r0, [pc, #188]	; (801b8ac <GUI_TextRu_Cd_m2+0xd8>)
 801b7ee:	f003 fbf3 	bl	801efd8 <TFT_SetFont>
 801b7f2:	f104 0008 	add.w	r0, r4, #8
 801b7f6:	f104 0810 	add.w	r8, r4, #16
 801b7fa:	f106 070a 	add.w	r7, r6, #10
 801b7fe:	f104 0906 	add.w	r9, r4, #6
 801b802:	f106 050c 	add.w	r5, r6, #12
	
	if(deg){
		TFT_DrawCharRus(X+8, Y, 'к');
 801b806:	22ba      	movs	r2, #186	; 0xba
 801b808:	4631      	mov	r1, r6
 801b80a:	b280      	uxth	r0, r0
	if(deg){
 801b80c:	f1ba 0f00 	cmp.w	sl, #0
 801b810:	d02c      	beq.n	801b86c <GUI_TextRu_Cd_m2+0x98>
		TFT_DrawCharRus(X+8, Y, 'к');
 801b812:	f003 fbf3 	bl	801effc <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'к');
 801b816:	22ba      	movs	r2, #186	; 0xba
 801b818:	4631      	mov	r1, r6
 801b81a:	fa1f f088 	uxth.w	r0, r8
 801b81e:	f003 fbed 	bl	801effc <TFT_DrawCharRus>
		TFT_DrawCharRus(X+24, Y, 'д');
 801b822:	f104 0018 	add.w	r0, r4, #24
 801b826:	22b4      	movs	r2, #180	; 0xb4
 801b828:	4631      	mov	r1, r6
 801b82a:	b280      	uxth	r0, r0
 801b82c:	f003 fbe6 	bl	801effc <TFT_DrawCharRus>
		
		TFT_DrawLine(X+6, Y+10, X+31, Y+10, TFT_White);
 801b830:	b2bb      	uxth	r3, r7
 801b832:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b836:	f104 021f 	add.w	r2, r4, #31
 801b83a:	9100      	str	r1, [sp, #0]
 801b83c:	b292      	uxth	r2, r2
 801b83e:	4619      	mov	r1, r3
 801b840:	fa1f f089 	uxth.w	r0, r9
 801b844:	f003 f8bc 	bl	801e9c0 <TFT_DrawLine>
		
		TFT_DrawCharRus(X+20, Y+12, 'я'+2);
 801b848:	b2ad      	uxth	r5, r5
 801b84a:	f104 0014 	add.w	r0, r4, #20
 801b84e:	b280      	uxth	r0, r0
 801b850:	2291      	movs	r2, #145	; 0x91
 801b852:	4629      	mov	r1, r5
 801b854:	f003 fbd2 	bl	801effc <TFT_DrawCharRus>
		TFT_DrawCharRus(X+12, Y+12, 'м');}
 801b858:	f104 000c 	add.w	r0, r4, #12
		TFT_DrawCharRus(X+16, Y, 'д');
		
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
		
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801b85c:	22bc      	movs	r2, #188	; 0xbc
 801b85e:	4629      	mov	r1, r5
 801b860:	b280      	uxth	r0, r0
		
}
 801b862:	b002      	add	sp, #8
 801b864:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801b868:	f003 bbc8 	b.w	801effc <TFT_DrawCharRus>
		TFT_DrawCharRus(X+8, Y, 'к');
 801b86c:	f003 fbc6 	bl	801effc <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'д');
 801b870:	22b4      	movs	r2, #180	; 0xb4
 801b872:	4631      	mov	r1, r6
 801b874:	fa1f f088 	uxth.w	r0, r8
 801b878:	f003 fbc0 	bl	801effc <TFT_DrawCharRus>
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
 801b87c:	b2bb      	uxth	r3, r7
 801b87e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b882:	f104 0217 	add.w	r2, r4, #23
 801b886:	9100      	str	r1, [sp, #0]
 801b888:	b292      	uxth	r2, r2
 801b88a:	4619      	mov	r1, r3
 801b88c:	fa1f f089 	uxth.w	r0, r9
 801b890:	f003 f896 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
 801b894:	b2ad      	uxth	r5, r5
 801b896:	f104 0011 	add.w	r0, r4, #17
 801b89a:	b280      	uxth	r0, r0
 801b89c:	2291      	movs	r2, #145	; 0x91
 801b89e:	4629      	mov	r1, r5
 801b8a0:	f003 fbac 	bl	801effc <TFT_DrawCharRus>
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801b8a4:	f104 0009 	add.w	r0, r4, #9
 801b8a8:	e7d8      	b.n	801b85c <GUI_TextRu_Cd_m2+0x88>
 801b8aa:	bf00      	nop
 801b8ac:	200001a0 	.word	0x200001a0

0801b8b0 <GUI_TextRu_Irradiance>:

void GUI_TextRu_Irradiance(uint16_t X, uint16_t Y)
{
 801b8b0:	b538      	push	{r3, r4, r5, lr}
 801b8b2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b8b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b8b8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b8ba:	f003 fb93 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b8be:	2063      	movs	r0, #99	; 0x63
 801b8c0:	f003 fb96 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b8c4:	482d      	ldr	r0, [pc, #180]	; (801b97c <GUI_TextRu_Irradiance+0xcc>)
 801b8c6:	f003 fb87 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 801b8ca:	4621      	mov	r1, r4
 801b8cc:	229e      	movs	r2, #158	; 0x9e
 801b8ce:	4628      	mov	r0, r5
 801b8d0:	f003 fb94 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801b8d4:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b8d6:	482a      	ldr	r0, [pc, #168]	; (801b980 <GUI_TextRu_Irradiance+0xd0>)
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801b8d8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b8da:	f003 fb7d 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801b8de:	f105 0010 	add.w	r0, r5, #16
 801b8e2:	4621      	mov	r1, r4
 801b8e4:	22b1      	movs	r2, #177	; 0xb1
 801b8e6:	b280      	uxth	r0, r0
 801b8e8:	f003 fb88 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'л');
 801b8ec:	f105 001b 	add.w	r0, r5, #27
 801b8f0:	4621      	mov	r1, r4
 801b8f2:	22bb      	movs	r2, #187	; 0xbb
 801b8f4:	b280      	uxth	r0, r0
 801b8f6:	f003 fb81 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+5, 'у');
 801b8fa:	f105 0027 	add.w	r0, r5, #39	; 0x27
 801b8fe:	4621      	mov	r1, r4
 801b900:	2283      	movs	r2, #131	; 0x83
 801b902:	b280      	uxth	r0, r0
 801b904:	f003 fb7a 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+51, Y+5, 'ч');
 801b908:	f105 0033 	add.w	r0, r5, #51	; 0x33
 801b90c:	4621      	mov	r1, r4
 801b90e:	2287      	movs	r2, #135	; 0x87
 801b910:	b280      	uxth	r0, r0
 801b912:	f003 fb73 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'е');
 801b916:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 801b91a:	4621      	mov	r1, r4
 801b91c:	22b5      	movs	r2, #181	; 0xb5
 801b91e:	b280      	uxth	r0, r0
 801b920:	f003 fb6c 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'н');
 801b924:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 801b928:	4621      	mov	r1, r4
 801b92a:	22bd      	movs	r2, #189	; 0xbd
 801b92c:	b280      	uxth	r0, r0
 801b92e:	f003 fb65 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+86, Y+5, 'н');
 801b932:	f105 0056 	add.w	r0, r5, #86	; 0x56
 801b936:	4621      	mov	r1, r4
 801b938:	22bd      	movs	r2, #189	; 0xbd
 801b93a:	b280      	uxth	r0, r0
 801b93c:	f003 fb5e 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+98, Y+5, 'о');
 801b940:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801b944:	4621      	mov	r1, r4
 801b946:	22be      	movs	r2, #190	; 0xbe
 801b948:	b280      	uxth	r0, r0
 801b94a:	f003 fb57 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+110, Y+5, 'с');
 801b94e:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 801b952:	4621      	mov	r1, r4
 801b954:	2281      	movs	r2, #129	; 0x81
 801b956:	b280      	uxth	r0, r0
 801b958:	f003 fb50 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+119, Y+5, 'т');
 801b95c:	f105 0077 	add.w	r0, r5, #119	; 0x77
 801b960:	4621      	mov	r1, r4
 801b962:	2282      	movs	r2, #130	; 0x82
 801b964:	b280      	uxth	r0, r0
 801b966:	f003 fb49 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b96a:	f105 0083 	add.w	r0, r5, #131	; 0x83
 801b96e:	4621      	mov	r1, r4
 801b970:	228c      	movs	r2, #140	; 0x8c
 801b972:	b280      	uxth	r0, r0
}
 801b974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b978:	f003 bb40 	b.w	801effc <TFT_DrawCharRus>
 801b97c:	200001d0 	.word	0x200001d0
 801b980:	200001d8 	.word	0x200001d8

0801b984 <GUI_TextRu_Luminance>:

void GUI_TextRu_Luminance(uint16_t X, uint16_t Y)
{
 801b984:	b538      	push	{r3, r4, r5, lr}
 801b986:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b988:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b98c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b98e:	f003 fb29 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b992:	2063      	movs	r0, #99	; 0x63
 801b994:	f003 fb2c 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b998:	481c      	ldr	r0, [pc, #112]	; (801ba0c <GUI_TextRu_Luminance+0x88>)
 801b99a:	f003 fb1d 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 801b99e:	4621      	mov	r1, r4
 801b9a0:	22af      	movs	r2, #175	; 0xaf
 801b9a2:	4628      	mov	r0, r5
 801b9a4:	f003 fb2a 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801b9a8:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b9aa:	4819      	ldr	r0, [pc, #100]	; (801ba10 <GUI_TextRu_Luminance+0x8c>)
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801b9ac:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b9ae:	f003 fb13 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801b9b2:	f105 0010 	add.w	r0, r5, #16
 801b9b6:	4621      	mov	r1, r4
 801b9b8:	2280      	movs	r2, #128	; 0x80
 801b9ba:	b280      	uxth	r0, r0
 801b9bc:	f003 fb1e 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'к');
 801b9c0:	f105 001c 	add.w	r0, r5, #28
 801b9c4:	4621      	mov	r1, r4
 801b9c6:	22ba      	movs	r2, #186	; 0xba
 801b9c8:	b280      	uxth	r0, r0
 801b9ca:	f003 fb17 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'о');
 801b9ce:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b9d2:	4621      	mov	r1, r4
 801b9d4:	22be      	movs	r2, #190	; 0xbe
 801b9d6:	b280      	uxth	r0, r0
 801b9d8:	f003 fb10 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'с');
 801b9dc:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801b9e0:	4621      	mov	r1, r4
 801b9e2:	2281      	movs	r2, #129	; 0x81
 801b9e4:	b280      	uxth	r0, r0
 801b9e6:	f003 fb09 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'т');
 801b9ea:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 801b9ee:	4621      	mov	r1, r4
 801b9f0:	2282      	movs	r2, #130	; 0x82
 801b9f2:	b280      	uxth	r0, r0
 801b9f4:	f003 fb02 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 801b9f8:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 801b9fc:	4621      	mov	r1, r4
 801b9fe:	228c      	movs	r2, #140	; 0x8c
 801ba00:	b280      	uxth	r0, r0
}
 801ba02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 801ba06:	f003 baf9 	b.w	801effc <TFT_DrawCharRus>
 801ba0a:	bf00      	nop
 801ba0c:	200001d0 	.word	0x200001d0
 801ba10:	200001d8 	.word	0x200001d8

0801ba14 <GUI_TextRu_Radiance>:

void GUI_TextRu_Radiance(uint16_t X, uint16_t Y)
{
 801ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba16:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801ba18:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ba1c:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 801ba1e:	f003 fae1 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ba22:	2063      	movs	r0, #99	; 0x63
 801ba24:	f003 fae4 	bl	801eff0 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
	TFT_DrawCharRus(X, Y, 'Э');
	TFT_SetFont(&Font16RU_arch_small);
 801ba28:	4f31      	ldr	r7, [pc, #196]	; (801baf0 <GUI_TextRu_Radiance+0xdc>)
	TFT_SetFont(&Font16RU_arch_big);
 801ba2a:	4832      	ldr	r0, [pc, #200]	; (801baf4 <GUI_TextRu_Radiance+0xe0>)
 801ba2c:	f003 fad4 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Э');
 801ba30:	4631      	mov	r1, r6
 801ba32:	22ad      	movs	r2, #173	; 0xad
 801ba34:	4620      	mov	r0, r4
 801ba36:	f003 fae1 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801ba3a:	1d75      	adds	r5, r6, #5
	TFT_SetFont(&Font16RU_arch_small);
 801ba3c:	4638      	mov	r0, r7
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801ba3e:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16RU_arch_small);
 801ba40:	f003 faca 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801ba44:	f104 0010 	add.w	r0, r4, #16
 801ba48:	4629      	mov	r1, r5
 801ba4a:	22bd      	movs	r2, #189	; 0xbd
 801ba4c:	b280      	uxth	r0, r0
 801ba4e:	f003 fad5 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y+5, 'е');
 801ba52:	f104 001d 	add.w	r0, r4, #29
 801ba56:	4629      	mov	r1, r5
 801ba58:	22b5      	movs	r2, #181	; 0xb5
 801ba5a:	b280      	uxth	r0, r0
 801ba5c:	f003 face 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801ba60:	4825      	ldr	r0, [pc, #148]	; (801baf8 <GUI_TextRu_Radiance+0xe4>)
 801ba62:	f003 fab9 	bl	801efd8 <TFT_SetFont>
	TFT_DrawChar(X+46, 		Y, '.');
 801ba66:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 801ba6a:	4631      	mov	r1, r6
 801ba6c:	222e      	movs	r2, #46	; 0x2e
 801ba6e:	b280      	uxth	r0, r0
 801ba70:	f003 fba8 	bl	801f1c4 <TFT_DrawChar>

	TFT_SetFont(&Font16RU_arch_small);
 801ba74:	4638      	mov	r0, r7
 801ba76:	f003 faaf 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X+41, Y+5, 'р');
 801ba7a:	f104 0029 	add.w	r0, r4, #41	; 0x29
 801ba7e:	4629      	mov	r1, r5
 801ba80:	2280      	movs	r2, #128	; 0x80
 801ba82:	b280      	uxth	r0, r0
 801ba84:	f003 faba 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+61, Y+5, 'я');
 801ba88:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 801ba8c:	4629      	mov	r1, r5
 801ba8e:	228f      	movs	r2, #143	; 0x8f
 801ba90:	b280      	uxth	r0, r0
 801ba92:	f003 fab3 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'р');
 801ba96:	f104 0049 	add.w	r0, r4, #73	; 0x49
 801ba9a:	4629      	mov	r1, r5
 801ba9c:	2280      	movs	r2, #128	; 0x80
 801ba9e:	b280      	uxth	r0, r0
 801baa0:	f003 faac 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'к');
 801baa4:	f104 0055 	add.w	r0, r4, #85	; 0x55
 801baa8:	4629      	mov	r1, r5
 801baaa:	22ba      	movs	r2, #186	; 0xba
 801baac:	b280      	uxth	r0, r0
 801baae:	f003 faa5 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 801bab2:	f104 0061 	add.w	r0, r4, #97	; 0x61
 801bab6:	4629      	mov	r1, r5
 801bab8:	22be      	movs	r2, #190	; 0xbe
 801baba:	b280      	uxth	r0, r0
 801babc:	f003 fa9e 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 801bac0:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801bac4:	4629      	mov	r1, r5
 801bac6:	2281      	movs	r2, #129	; 0x81
 801bac8:	b280      	uxth	r0, r0
 801baca:	f003 fa97 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+120, Y+5, 'т');
 801bace:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801bad2:	4629      	mov	r1, r5
 801bad4:	2282      	movs	r2, #130	; 0x82
 801bad6:	b280      	uxth	r0, r0
 801bad8:	f003 fa90 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801badc:	f104 0083 	add.w	r0, r4, #131	; 0x83
 801bae0:	4629      	mov	r1, r5
 801bae2:	228c      	movs	r2, #140	; 0x8c
 801bae4:	b280      	uxth	r0, r0

}
 801bae6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801baea:	f003 ba87 	b.w	801effc <TFT_DrawCharRus>
 801baee:	bf00      	nop
 801baf0:	200001d8 	.word	0x200001d8
 801baf4:	200001d0 	.word	0x200001d0
 801baf8:	200001b0 	.word	0x200001b0

0801bafc <GUI_TextMsgRu_LowIrradiance>:

void GUI_TextMsgRu_LowIrradiance(uint16_t X, uint16_t Y)
{
 801bafc:	b538      	push	{r3, r4, r5, lr}
 801bafe:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801bb00:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801bb04:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801bb06:	f003 fa6d 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801bb0a:	2063      	movs	r0, #99	; 0x63
 801bb0c:	f003 fa70 	bl	801eff0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801bb10:	483f      	ldr	r0, [pc, #252]	; (801bc10 <GUI_TextMsgRu_LowIrradiance+0x114>)
 801bb12:	f003 fa61 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 801bb16:	4621      	mov	r1, r4
 801bb18:	229c      	movs	r2, #156	; 0x9c
 801bb1a:	4628      	mov	r0, r5
 801bb1c:	f003 fa6e 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801bb20:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801bb22:	483c      	ldr	r0, [pc, #240]	; (801bc14 <GUI_TextMsgRu_LowIrradiance+0x118>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801bb24:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801bb26:	f003 fa57 	bl	801efd8 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801bb2a:	f105 0010 	add.w	r0, r5, #16
 801bb2e:	4621      	mov	r1, r4
 801bb30:	22b0      	movs	r2, #176	; 0xb0
 801bb32:	b280      	uxth	r0, r0
 801bb34:	f003 fa62 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801bb38:	f105 001c 	add.w	r0, r5, #28
 801bb3c:	4621      	mov	r1, r4
 801bb3e:	22bb      	movs	r2, #187	; 0xbb
 801bb40:	b280      	uxth	r0, r0
 801bb42:	f003 fa5b 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 801bb46:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801bb4a:	4621      	mov	r1, r4
 801bb4c:	22b0      	movs	r2, #176	; 0xb0
 801bb4e:	b280      	uxth	r0, r0
 801bb50:	f003 fa54 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 801bb54:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801bb58:	4621      	mov	r1, r4
 801bb5a:	228f      	movs	r2, #143	; 0x8f
 801bb5c:	b280      	uxth	r0, r0
 801bb5e:	f003 fa4d 	bl	801effc <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'о');
 801bb62:	f105 0049 	add.w	r0, r5, #73	; 0x49
 801bb66:	4621      	mov	r1, r4
 801bb68:	22be      	movs	r2, #190	; 0xbe
 801bb6a:	b280      	uxth	r0, r0
 801bb6c:	f003 fa46 	bl	801effc <TFT_DrawCharRus>
	TFT_DrawCharRus(X+87, Y+5, 'б');
 801bb70:	f105 0057 	add.w	r0, r5, #87	; 0x57
 801bb74:	4621      	mov	r1, r4
 801bb76:	22b1      	movs	r2, #177	; 0xb1
 801bb78:	b280      	uxth	r0, r0
 801bb7a:	f003 fa3f 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+98, Y+5, 'л');
 801bb7e:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801bb82:	4621      	mov	r1, r4
 801bb84:	22bb      	movs	r2, #187	; 0xbb
 801bb86:	b280      	uxth	r0, r0
 801bb88:	f003 fa38 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+110, Y+5, 'у');
 801bb8c:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 801bb90:	4621      	mov	r1, r4
 801bb92:	2283      	movs	r2, #131	; 0x83
 801bb94:	b280      	uxth	r0, r0
 801bb96:	f003 fa31 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+122, Y+5, 'ч');
 801bb9a:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 801bb9e:	4621      	mov	r1, r4
 801bba0:	2287      	movs	r2, #135	; 0x87
 801bba2:	b280      	uxth	r0, r0
 801bba4:	f003 fa2a 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+134, Y+5, 'е');
 801bba8:	f105 0086 	add.w	r0, r5, #134	; 0x86
 801bbac:	4621      	mov	r1, r4
 801bbae:	22b5      	movs	r2, #181	; 0xb5
 801bbb0:	b280      	uxth	r0, r0
 801bbb2:	f003 fa23 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+145, Y+5, 'н');
 801bbb6:	f105 0091 	add.w	r0, r5, #145	; 0x91
 801bbba:	4621      	mov	r1, r4
 801bbbc:	22bd      	movs	r2, #189	; 0xbd
 801bbbe:	b280      	uxth	r0, r0
 801bbc0:	f003 fa1c 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+157, Y+5, 'н');
 801bbc4:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 801bbc8:	4621      	mov	r1, r4
 801bbca:	22bd      	movs	r2, #189	; 0xbd
 801bbcc:	b280      	uxth	r0, r0
 801bbce:	f003 fa15 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+169, Y+5, 'о');
 801bbd2:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
 801bbd6:	4621      	mov	r1, r4
 801bbd8:	22be      	movs	r2, #190	; 0xbe
 801bbda:	b280      	uxth	r0, r0
 801bbdc:	f003 fa0e 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+181, Y+5, 'с');
 801bbe0:	f105 00b5 	add.w	r0, r5, #181	; 0xb5
 801bbe4:	4621      	mov	r1, r4
 801bbe6:	2281      	movs	r2, #129	; 0x81
 801bbe8:	b280      	uxth	r0, r0
 801bbea:	f003 fa07 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+190, Y+5, 'т');
 801bbee:	f105 00be 	add.w	r0, r5, #190	; 0xbe
 801bbf2:	4621      	mov	r1, r4
 801bbf4:	2282      	movs	r2, #130	; 0x82
 801bbf6:	b280      	uxth	r0, r0
 801bbf8:	f003 fa00 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 801bbfc:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 801bc00:	4621      	mov	r1, r4
 801bc02:	228c      	movs	r2, #140	; 0x8c
 801bc04:	b280      	uxth	r0, r0
}
 801bc06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 801bc0a:	f003 b9f7 	b.w	801effc <TFT_DrawCharRus>
 801bc0e:	bf00      	nop
 801bc10:	200001d0 	.word	0x200001d0
 801bc14:	200001d8 	.word	0x200001d8

0801bc18 <GUI_TextMsgRu_LowRadiance>:

void GUI_TextMsgRu_LowRadiance(uint16_t X, uint16_t Y)
{
 801bc18:	b538      	push	{r3, r4, r5, lr}
 801bc1a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801bc1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801bc20:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801bc22:	f003 f9df 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801bc26:	2063      	movs	r0, #99	; 0x63
 801bc28:	f003 f9e2 	bl	801eff0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801bc2c:	482d      	ldr	r0, [pc, #180]	; (801bce4 <GUI_TextMsgRu_LowRadiance+0xcc>)
 801bc2e:	f003 f9d3 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 801bc32:	4621      	mov	r1, r4
 801bc34:	229c      	movs	r2, #156	; 0x9c
 801bc36:	4628      	mov	r0, r5
 801bc38:	f003 f9e0 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801bc3c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801bc3e:	482a      	ldr	r0, [pc, #168]	; (801bce8 <GUI_TextMsgRu_LowRadiance+0xd0>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801bc40:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801bc42:	f003 f9c9 	bl	801efd8 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801bc46:	f105 0010 	add.w	r0, r5, #16
 801bc4a:	4621      	mov	r1, r4
 801bc4c:	22b0      	movs	r2, #176	; 0xb0
 801bc4e:	b280      	uxth	r0, r0
 801bc50:	f003 f9d4 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801bc54:	f105 001c 	add.w	r0, r5, #28
 801bc58:	4621      	mov	r1, r4
 801bc5a:	22bb      	movs	r2, #187	; 0xbb
 801bc5c:	b280      	uxth	r0, r0
 801bc5e:	f003 f9cd 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 801bc62:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801bc66:	4621      	mov	r1, r4
 801bc68:	22b0      	movs	r2, #176	; 0xb0
 801bc6a:	b280      	uxth	r0, r0
 801bc6c:	f003 f9c6 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 801bc70:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801bc74:	4621      	mov	r1, r4
 801bc76:	228f      	movs	r2, #143	; 0x8f
 801bc78:	b280      	uxth	r0, r0
 801bc7a:	f003 f9bf 	bl	801effc <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'я');
 801bc7e:	f105 0049 	add.w	r0, r5, #73	; 0x49
 801bc82:	4621      	mov	r1, r4
 801bc84:	228f      	movs	r2, #143	; 0x8f
 801bc86:	b280      	uxth	r0, r0
 801bc88:	f003 f9b8 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+85, Y+5, 'р');
 801bc8c:	f105 0055 	add.w	r0, r5, #85	; 0x55
 801bc90:	4621      	mov	r1, r4
 801bc92:	2280      	movs	r2, #128	; 0x80
 801bc94:	b280      	uxth	r0, r0
 801bc96:	f003 f9b1 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+97, Y+5, 'к');
 801bc9a:	f105 0061 	add.w	r0, r5, #97	; 0x61
 801bc9e:	4621      	mov	r1, r4
 801bca0:	22ba      	movs	r2, #186	; 0xba
 801bca2:	b280      	uxth	r0, r0
 801bca4:	f003 f9aa 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+109, Y+5, 'о');
 801bca8:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801bcac:	4621      	mov	r1, r4
 801bcae:	22be      	movs	r2, #190	; 0xbe
 801bcb0:	b280      	uxth	r0, r0
 801bcb2:	f003 f9a3 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+121, Y+5, 'с');
 801bcb6:	f105 0079 	add.w	r0, r5, #121	; 0x79
 801bcba:	4621      	mov	r1, r4
 801bcbc:	2281      	movs	r2, #129	; 0x81
 801bcbe:	b280      	uxth	r0, r0
 801bcc0:	f003 f99c 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+132, Y+5, 'т');
 801bcc4:	f105 0084 	add.w	r0, r5, #132	; 0x84
 801bcc8:	4621      	mov	r1, r4
 801bcca:	2282      	movs	r2, #130	; 0x82
 801bccc:	b280      	uxth	r0, r0
 801bcce:	f003 f995 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 801bcd2:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 801bcd6:	4621      	mov	r1, r4
 801bcd8:	228c      	movs	r2, #140	; 0x8c
 801bcda:	b280      	uxth	r0, r0
}
 801bcdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 801bce0:	f003 b98c 	b.w	801effc <TFT_DrawCharRus>
 801bce4:	200001d0 	.word	0x200001d0
 801bce8:	200001d8 	.word	0x200001d8

0801bcec <GUI_TextMsgRu_HighIrradiance>:

void GUI_TextMsgRu_HighIrradiance(uint16_t X, uint16_t Y)
{
 801bcec:	b538      	push	{r3, r4, r5, lr}
 801bcee:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801bcf0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801bcf4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801bcf6:	f003 f975 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801bcfa:	2063      	movs	r0, #99	; 0x63
 801bcfc:	f003 f978 	bl	801eff0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801bd00:	4846      	ldr	r0, [pc, #280]	; (801be1c <GUI_TextMsgRu_HighIrradiance+0x130>)
 801bd02:	f003 f969 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 801bd06:	4621      	mov	r1, r4
 801bd08:	2291      	movs	r2, #145	; 0x91
 801bd0a:	4628      	mov	r0, r5
 801bd0c:	f003 f976 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801bd10:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801bd12:	4843      	ldr	r0, [pc, #268]	; (801be20 <GUI_TextMsgRu_HighIrradiance+0x134>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801bd14:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801bd16:	f003 f95f 	bl	801efd8 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801bd1a:	f105 0010 	add.w	r0, r5, #16
 801bd1e:	4621      	mov	r1, r4
 801bd20:	22be      	movs	r2, #190	; 0xbe
 801bd22:	b280      	uxth	r0, r0
 801bd24:	f003 f96a 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801bd28:	f105 001c 	add.w	r0, r5, #28
 801bd2c:	4621      	mov	r1, r4
 801bd2e:	22bb      	movs	r2, #187	; 0xbb
 801bd30:	b280      	uxth	r0, r0
 801bd32:	f003 f963 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 801bd36:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801bd3a:	4621      	mov	r1, r4
 801bd3c:	228c      	movs	r2, #140	; 0x8c
 801bd3e:	b280      	uxth	r0, r0
 801bd40:	f003 f95c 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 801bd44:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801bd48:	4621      	mov	r1, r4
 801bd4a:	2288      	movs	r2, #136	; 0x88
 801bd4c:	b280      	uxth	r0, r0
 801bd4e:	f003 f955 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 801bd52:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801bd56:	4621      	mov	r1, r4
 801bd58:	22b0      	movs	r2, #176	; 0xb0
 801bd5a:	b280      	uxth	r0, r0
 801bd5c:	f003 f94e 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 801bd60:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 801bd64:	4621      	mov	r1, r4
 801bd66:	228f      	movs	r2, #143	; 0x8f
 801bd68:	b280      	uxth	r0, r0
 801bd6a:	f003 f947 	bl	801effc <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'о');
 801bd6e:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801bd72:	4621      	mov	r1, r4
 801bd74:	22be      	movs	r2, #190	; 0xbe
 801bd76:	b280      	uxth	r0, r0
 801bd78:	f003 f940 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+116, Y+5, 'б');
 801bd7c:	f105 0074 	add.w	r0, r5, #116	; 0x74
 801bd80:	4621      	mov	r1, r4
 801bd82:	22b1      	movs	r2, #177	; 0xb1
 801bd84:	b280      	uxth	r0, r0
 801bd86:	f003 f939 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+127, Y+5, 'л');
 801bd8a:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 801bd8e:	4621      	mov	r1, r4
 801bd90:	22bb      	movs	r2, #187	; 0xbb
 801bd92:	b280      	uxth	r0, r0
 801bd94:	f003 f932 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+139, Y+5, 'у');
 801bd98:	f105 008b 	add.w	r0, r5, #139	; 0x8b
 801bd9c:	4621      	mov	r1, r4
 801bd9e:	2283      	movs	r2, #131	; 0x83
 801bda0:	b280      	uxth	r0, r0
 801bda2:	f003 f92b 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+151, Y+5, 'ч');
 801bda6:	f105 0097 	add.w	r0, r5, #151	; 0x97
 801bdaa:	4621      	mov	r1, r4
 801bdac:	2287      	movs	r2, #135	; 0x87
 801bdae:	b280      	uxth	r0, r0
 801bdb0:	f003 f924 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+163, Y+5, 'е');
 801bdb4:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
 801bdb8:	4621      	mov	r1, r4
 801bdba:	22b5      	movs	r2, #181	; 0xb5
 801bdbc:	b280      	uxth	r0, r0
 801bdbe:	f003 f91d 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+174, Y+5, 'н');
 801bdc2:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 801bdc6:	4621      	mov	r1, r4
 801bdc8:	22bd      	movs	r2, #189	; 0xbd
 801bdca:	b280      	uxth	r0, r0
 801bdcc:	f003 f916 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+186, Y+5, 'н');
 801bdd0:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 801bdd4:	4621      	mov	r1, r4
 801bdd6:	22bd      	movs	r2, #189	; 0xbd
 801bdd8:	b280      	uxth	r0, r0
 801bdda:	f003 f90f 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+198, Y+5, 'о');
 801bdde:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801bde2:	4621      	mov	r1, r4
 801bde4:	22be      	movs	r2, #190	; 0xbe
 801bde6:	b280      	uxth	r0, r0
 801bde8:	f003 f908 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+210, Y+5, 'с');
 801bdec:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 801bdf0:	4621      	mov	r1, r4
 801bdf2:	2281      	movs	r2, #129	; 0x81
 801bdf4:	b280      	uxth	r0, r0
 801bdf6:	f003 f901 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+219, Y+5, 'т');
 801bdfa:	f105 00db 	add.w	r0, r5, #219	; 0xdb
 801bdfe:	4621      	mov	r1, r4
 801be00:	2282      	movs	r2, #130	; 0x82
 801be02:	b280      	uxth	r0, r0
 801be04:	f003 f8fa 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 801be08:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
 801be0c:	4621      	mov	r1, r4
 801be0e:	228c      	movs	r2, #140	; 0x8c
 801be10:	b280      	uxth	r0, r0
}
 801be12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 801be16:	f003 b8f1 	b.w	801effc <TFT_DrawCharRus>
 801be1a:	bf00      	nop
 801be1c:	200001d0 	.word	0x200001d0
 801be20:	200001d8 	.word	0x200001d8

0801be24 <GUI_TextMsgRu_HighRadiance>:

void GUI_TextMsgRu_HighRadiance(uint16_t X, uint16_t Y)
{
 801be24:	b538      	push	{r3, r4, r5, lr}
 801be26:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801be28:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801be2c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801be2e:	f003 f8d9 	bl	801efe4 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801be32:	2063      	movs	r0, #99	; 0x63
 801be34:	f003 f8dc 	bl	801eff0 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801be38:	4834      	ldr	r0, [pc, #208]	; (801bf0c <GUI_TextMsgRu_HighRadiance+0xe8>)
 801be3a:	f003 f8cd 	bl	801efd8 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 801be3e:	4621      	mov	r1, r4
 801be40:	2291      	movs	r2, #145	; 0x91
 801be42:	4628      	mov	r0, r5
 801be44:	f003 f8da 	bl	801effc <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801be48:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801be4a:	4831      	ldr	r0, [pc, #196]	; (801bf10 <GUI_TextMsgRu_HighRadiance+0xec>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801be4c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801be4e:	f003 f8c3 	bl	801efd8 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801be52:	f105 0010 	add.w	r0, r5, #16
 801be56:	4621      	mov	r1, r4
 801be58:	22be      	movs	r2, #190	; 0xbe
 801be5a:	b280      	uxth	r0, r0
 801be5c:	f003 f8ce 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801be60:	f105 001c 	add.w	r0, r5, #28
 801be64:	4621      	mov	r1, r4
 801be66:	22bb      	movs	r2, #187	; 0xbb
 801be68:	b280      	uxth	r0, r0
 801be6a:	f003 f8c7 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 801be6e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801be72:	4621      	mov	r1, r4
 801be74:	228c      	movs	r2, #140	; 0x8c
 801be76:	b280      	uxth	r0, r0
 801be78:	f003 f8c0 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 801be7c:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801be80:	4621      	mov	r1, r4
 801be82:	2288      	movs	r2, #136	; 0x88
 801be84:	b280      	uxth	r0, r0
 801be86:	f003 f8b9 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 801be8a:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801be8e:	4621      	mov	r1, r4
 801be90:	22b0      	movs	r2, #176	; 0xb0
 801be92:	b280      	uxth	r0, r0
 801be94:	f003 f8b2 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 801be98:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 801be9c:	4621      	mov	r1, r4
 801be9e:	228f      	movs	r2, #143	; 0x8f
 801bea0:	b280      	uxth	r0, r0
 801bea2:	f003 f8ab 	bl	801effc <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'я');
 801bea6:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801beaa:	4621      	mov	r1, r4
 801beac:	228f      	movs	r2, #143	; 0x8f
 801beae:	b280      	uxth	r0, r0
 801beb0:	f003 f8a4 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+114, Y+5, 'р');
 801beb4:	f105 0072 	add.w	r0, r5, #114	; 0x72
 801beb8:	4621      	mov	r1, r4
 801beba:	2280      	movs	r2, #128	; 0x80
 801bebc:	b280      	uxth	r0, r0
 801bebe:	f003 f89d 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+126, Y+5, 'к');
 801bec2:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 801bec6:	4621      	mov	r1, r4
 801bec8:	22ba      	movs	r2, #186	; 0xba
 801beca:	b280      	uxth	r0, r0
 801becc:	f003 f896 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+138, Y+5, 'о');
 801bed0:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 801bed4:	4621      	mov	r1, r4
 801bed6:	22be      	movs	r2, #190	; 0xbe
 801bed8:	b280      	uxth	r0, r0
 801beda:	f003 f88f 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+150, Y+5, 'с');
 801bede:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801bee2:	4621      	mov	r1, r4
 801bee4:	2281      	movs	r2, #129	; 0x81
 801bee6:	b280      	uxth	r0, r0
 801bee8:	f003 f888 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+161, Y+5, 'т');
 801beec:	f105 00a1 	add.w	r0, r5, #161	; 0xa1
 801bef0:	4621      	mov	r1, r4
 801bef2:	2282      	movs	r2, #130	; 0x82
 801bef4:	b280      	uxth	r0, r0
 801bef6:	f003 f881 	bl	801effc <TFT_DrawCharRus>
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 801befa:	f105 00ac 	add.w	r0, r5, #172	; 0xac
 801befe:	4621      	mov	r1, r4
 801bf00:	228c      	movs	r2, #140	; 0x8c
 801bf02:	b280      	uxth	r0, r0
 801bf04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 801bf08:	f003 b878 	b.w	801effc <TFT_DrawCharRus>
 801bf0c:	200001d0 	.word	0x200001d0
 801bf10:	200001d8 	.word	0x200001d8

0801bf14 <Set.part.0>:
void Set(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_SET);
 801bf14:	2201      	movs	r2, #1
 801bf16:	2102      	movs	r1, #2
 801bf18:	4801      	ldr	r0, [pc, #4]	; (801bf20 <Set.part.0+0xc>)
 801bf1a:	f7e6 bd0f 	b.w	800293c <HAL_GPIO_WritePin>
 801bf1e:	bf00      	nop
 801bf20:	48000400 	.word	0x48000400

0801bf24 <Reset.part.1>:
void Reset(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_RESET);
 801bf24:	2200      	movs	r2, #0
 801bf26:	2102      	movs	r1, #2
 801bf28:	4801      	ldr	r0, [pc, #4]	; (801bf30 <Reset.part.1+0xc>)
 801bf2a:	f7e6 bd07 	b.w	800293c <HAL_GPIO_WritePin>
 801bf2e:	bf00      	nop
 801bf30:	48000400 	.word	0x48000400

0801bf34 <GPIO_QSPI_Init>:
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801bf34:	4b3a      	ldr	r3, [pc, #232]	; (801c020 <GPIO_QSPI_Init+0xec>)
{
 801bf36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801bf3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801bf3c:	4c39      	ldr	r4, [pc, #228]	; (801c024 <GPIO_QSPI_Init+0xf0>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801bf3e:	4f3a      	ldr	r7, [pc, #232]	; (801c028 <GPIO_QSPI_Init+0xf4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801bf40:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 801c02c <GPIO_QSPI_Init+0xf8>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801bf44:	f042 0220 	orr.w	r2, r2, #32
 801bf48:	64da      	str	r2, [r3, #76]	; 0x4c
 801bf4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 801bf4c:	b084      	sub	sp, #16
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801bf4e:	f002 0220 	and.w	r2, r2, #32
 801bf52:	9201      	str	r2, [sp, #4]
 801bf54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bf56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801bf58:	f042 0201 	orr.w	r2, r2, #1
 801bf5c:	64da      	str	r2, [r3, #76]	; 0x4c
 801bf5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801bf60:	f002 0201 	and.w	r2, r2, #1
 801bf64:	9202      	str	r2, [sp, #8]
 801bf66:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801bf68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801bf6a:	f042 0202 	orr.w	r2, r2, #2
 801bf6e:	64da      	str	r2, [r3, #76]	; 0x4c
 801bf70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bf72:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bf76:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801bf78:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bf7a:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801bf7e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801bf80:	4621      	mov	r1, r4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801bf82:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801bf84:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801bf86:	e884 0048 	stmia.w	r4, {r3, r6}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801bf8a:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bf8c:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801bf8e:	f04f 0a04 	mov.w	sl, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bf92:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801bf96:	f7e6 fb5b 	bl	8002650 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bf9a:	4621      	mov	r1, r4
 801bf9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801bfa0:	f8c4 a000 	str.w	sl, [r4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801bfa4:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801bfa6:	60a6      	str	r6, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bfa8:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bfac:	f7e6 fb50 	bl	8002650 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 801bfb0:	4632      	mov	r2, r6
 801bfb2:	4651      	mov	r1, sl
 801bfb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801bfb8:	f7e6 fcc0 	bl	800293c <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801bfbc:	4621      	mov	r1, r4
 801bfbe:	4648      	mov	r0, r9
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 801bfc0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801bfc4:	f8c4 8000 	str.w	r8, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801bfc8:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bfca:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bfcc:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801bfd0:	f7e6 fb3e 	bl	8002650 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801bfd4:	4621      	mov	r1, r4
 801bfd6:	4638      	mov	r0, r7
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bfd8:	f8c4 800c 	str.w	r8, [r4, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801bfdc:	6066      	str	r6, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bfde:	60a5      	str	r5, [r4, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 801bfe0:	f8c4 a000 	str.w	sl, [r4]
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801bfe4:	f7e6 fb34 	bl	8002650 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 801bfe8:	462a      	mov	r2, r5
 801bfea:	4631      	mov	r1, r6
 801bfec:	4648      	mov	r0, r9
 801bfee:	f7e6 fca5 	bl	800293c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 801bff2:	462a      	mov	r2, r5
 801bff4:	4648      	mov	r0, r9
 801bff6:	2102      	movs	r1, #2
 801bff8:	f7e6 fca0 	bl	800293c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 801bffc:	462a      	mov	r2, r5
 801bffe:	4638      	mov	r0, r7
 801c000:	2140      	movs	r1, #64	; 0x40
 801c002:	f7e6 fc9b 	bl	800293c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 801c006:	462a      	mov	r2, r5
 801c008:	4638      	mov	r0, r7
 801c00a:	2180      	movs	r1, #128	; 0x80
 801c00c:	f7e6 fc96 	bl	800293c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 801c010:	462a      	mov	r2, r5
 801c012:	4651      	mov	r1, sl
 801c014:	4638      	mov	r0, r7
 801c016:	f7e6 fc91 	bl	800293c <HAL_GPIO_WritePin>
}
 801c01a:	b004      	add	sp, #16
 801c01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c020:	40021000 	.word	0x40021000
 801c024:	200052bc 	.word	0x200052bc
 801c028:	48001400 	.word	0x48001400
 801c02c:	48000400 	.word	0x48000400

0801c030 <QSPI_Recieve_Init>:
	}
}

/* */
void QSPI_Recieve_Init(void)
{
 801c030:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801c032:	4c09      	ldr	r4, [pc, #36]	; (801c058 <QSPI_Recieve_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c034:	4809      	ldr	r0, [pc, #36]	; (801c05c <QSPI_Recieve_Init+0x2c>)
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801c036:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c038:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c03a:	2500      	movs	r5, #0
 801c03c:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c040:	f7e6 fb06 	bl	8002650 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801c044:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801c046:	4621      	mov	r1, r4
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801c048:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801c04c:	4804      	ldr	r0, [pc, #16]	; (801c060 <QSPI_Recieve_Init+0x30>)
}
 801c04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801c052:	f7e6 bafd 	b.w	8002650 <HAL_GPIO_Init>
 801c056:	bf00      	nop
 801c058:	200052bc 	.word	0x200052bc
 801c05c:	48000400 	.word	0x48000400
 801c060:	48001400 	.word	0x48001400

0801c064 <QSPI_Transmit_Init>:
void QSPI_Transmit_Init(void)
{
 801c064:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801c066:	4c09      	ldr	r4, [pc, #36]	; (801c08c <QSPI_Transmit_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c068:	4809      	ldr	r0, [pc, #36]	; (801c090 <QSPI_Transmit_Init+0x2c>)
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801c06a:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c06c:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c06e:	2501      	movs	r5, #1
 801c070:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c074:	f7e6 faec 	bl	8002650 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801c078:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801c07a:	4621      	mov	r1, r4
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801c07c:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801c080:	4804      	ldr	r0, [pc, #16]	; (801c094 <QSPI_Transmit_Init+0x30>)
}
 801c082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801c086:	f7e6 bae3 	b.w	8002650 <HAL_GPIO_Init>
 801c08a:	bf00      	nop
 801c08c:	200052bc 	.word	0x200052bc
 801c090:	48000400 	.word	0x48000400
 801c094:	48001400 	.word	0x48001400

0801c098 <Single_Mode>:
void Single_Mode(void)
{
 801c098:	b570      	push	{r4, r5, r6, lr}
	/* PB1 (IO0) */
	GPIO_InitStruct.Pin = IO0_PIN;
 801c09a:	4c0d      	ldr	r4, [pc, #52]	; (801c0d0 <Single_Mode+0x38>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801c09c:	4e0d      	ldr	r6, [pc, #52]	; (801c0d4 <Single_Mode+0x3c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c09e:	2501      	movs	r5, #1
	GPIO_InitStruct.Pin = IO0_PIN;
 801c0a0:	2302      	movs	r3, #2
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801c0a2:	4621      	mov	r1, r4
 801c0a4:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c0a6:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801c0aa:	f7e6 fad1 	bl	8002650 <HAL_GPIO_Init>
	
	/* PB0 (IO1) */
	GPIO_InitStruct.Pin = IO1_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 801c0ae:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c0b0:	2300      	movs	r3, #0
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 801c0b2:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c0b4:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pin = IO1_PIN;
 801c0b6:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 801c0b8:	f7e6 faca 	bl	8002650 <HAL_GPIO_Init>
	
	/* PF7 (IO2) */
	GPIO_InitStruct.Pin = IO2_PIN;
 801c0bc:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 801c0be:	4621      	mov	r1, r4
	GPIO_InitStruct.Pin = IO2_PIN;
 801c0c0:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 801c0c4:	4804      	ldr	r0, [pc, #16]	; (801c0d8 <Single_Mode+0x40>)
}
 801c0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 801c0ca:	f7e6 bac1 	b.w	8002650 <HAL_GPIO_Init>
 801c0ce:	bf00      	nop
 801c0d0:	200052bc 	.word	0x200052bc
 801c0d4:	48000400 	.word	0x48000400
 801c0d8:	48001400 	.word	0x48001400

0801c0dc <SPI_Byte_T>:

/* Single mode SPI functions */

/* Byte transmit function */
void SPI_Byte_T(uint8_t byte)
{
 801c0dc:	b570      	push	{r4, r5, r6, lr}
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801c0de:	4e0f      	ldr	r6, [pc, #60]	; (801c11c <SPI_Byte_T+0x40>)
{
 801c0e0:	4605      	mov	r5, r0
 801c0e2:	2408      	movs	r4, #8
 801c0e4:	e013      	b.n	801c10e <SPI_Byte_T+0x32>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801c0e6:	2201      	movs	r2, #1
 801c0e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c0ec:	4630      	mov	r0, r6
 801c0ee:	f7e6 fc25 	bl	800293c <HAL_GPIO_WritePin>
 801c0f2:	f7ff ff17 	bl	801bf24 <Reset.part.1>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801c0f6:	2200      	movs	r2, #0
 801c0f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c0fc:	4630      	mov	r0, r6
 801c0fe:	f7e6 fc1d 	bl	800293c <HAL_GPIO_WritePin>
 801c102:	1e63      	subs	r3, r4, #1
		{
			Set(io0);
		}
		Set(clk);
		Reset(io0);	
		byte=(byte<<1);
 801c104:	006d      	lsls	r5, r5, #1
	for(uint8_t i=0; i<8; i++)
 801c106:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
		byte=(byte<<1);
 801c10a:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<8; i++)
 801c10c:	d004      	beq.n	801c118 <SPI_Byte_T+0x3c>
		if(0x80 & byte)
 801c10e:	062b      	lsls	r3, r5, #24
 801c110:	d5e9      	bpl.n	801c0e6 <SPI_Byte_T+0xa>
 801c112:	f7ff feff 	bl	801bf14 <Set.part.0>
 801c116:	e7e6      	b.n	801c0e6 <SPI_Byte_T+0xa>
		Reset(clk);	
	}	
}
 801c118:	bd70      	pop	{r4, r5, r6, pc}
 801c11a:	bf00      	nop
 801c11c:	48001400 	.word	0x48001400

0801c120 <SPI_Byte_R>:
	
	SPI_Check_Busy();
}
/* Byte receive function */
uint8_t SPI_Byte_R(void)
{
 801c120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t byte=0;
	for(uint8_t i=0; i<8; i++)
	{
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 801c122:	4f12      	ldr	r7, [pc, #72]	; (801c16c <SPI_Byte_R+0x4c>)
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801c124:	4e12      	ldr	r6, [pc, #72]	; (801c170 <SPI_Byte_R+0x50>)
{
 801c126:	2408      	movs	r4, #8
	uint8_t byte=0;
 801c128:	2500      	movs	r5, #0
 801c12a:	e004      	b.n	801c136 <SPI_Byte_R+0x16>
		Set(clk);
		if (i<7) byte=(byte<<1);
 801c12c:	b2dd      	uxtb	r5, r3
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801c12e:	f7e6 fc05 	bl	800293c <HAL_GPIO_WritePin>
 801c132:	3c01      	subs	r4, #1
 801c134:	b2e4      	uxtb	r4, r4
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 801c136:	2101      	movs	r1, #1
 801c138:	4638      	mov	r0, r7
 801c13a:	f7e6 fbf9 	bl	8002930 <HAL_GPIO_ReadPin>
 801c13e:	b108      	cbz	r0, 801c144 <SPI_Byte_R+0x24>
 801c140:	f045 0501 	orr.w	r5, r5, #1
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801c144:	2201      	movs	r2, #1
 801c146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c14a:	4630      	mov	r0, r6
 801c14c:	f7e6 fbf6 	bl	800293c <HAL_GPIO_WritePin>
		if (i<7) byte=(byte<<1);
 801c150:	2c01      	cmp	r4, #1
 801c152:	ea4f 0345 	mov.w	r3, r5, lsl #1
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801c156:	f04f 0200 	mov.w	r2, #0
 801c15a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c15e:	4630      	mov	r0, r6
		if (i<7) byte=(byte<<1);
 801c160:	d1e4      	bne.n	801c12c <SPI_Byte_R+0xc>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801c162:	4803      	ldr	r0, [pc, #12]	; (801c170 <SPI_Byte_R+0x50>)
 801c164:	f7e6 fbea 	bl	800293c <HAL_GPIO_WritePin>
		Reset(clk);
	}
	return byte;
}
 801c168:	4628      	mov	r0, r5
 801c16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c16c:	48000400 	.word	0x48000400
 801c170:	48001400 	.word	0x48001400

0801c174 <SPI_Read_SR.part.2>:
	SPI_Address(address);
	Set(cs);
	SPI_Check_Busy();
}
/* Read status register */
uint8_t SPI_Read_SR(uint8_t sr)
 801c174:	b510      	push	{r4, lr}
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 801c176:	2200      	movs	r2, #0
 801c178:	2104      	movs	r1, #4
 801c17a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801c17e:	f7e6 fbdd 	bl	800293c <HAL_GPIO_WritePin>
	SPI_Byte_T(cmd);
 801c182:	2005      	movs	r0, #5
 801c184:	f7ff ffaa 	bl	801c0dc <SPI_Byte_T>
	switch(sr)
	{
		case 1:
			Reset(cs);
			SPI_Instruction(0x05);
			reg=SPI_Byte_R();
 801c188:	f7ff ffca 	bl	801c120 <SPI_Byte_R>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 801c18c:	2201      	movs	r2, #1
			reg=SPI_Byte_R();
 801c18e:	4604      	mov	r4, r0
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 801c190:	2104      	movs	r1, #4
 801c192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801c196:	f7e6 fbd1 	bl	800293c <HAL_GPIO_WritePin>

	}
	return reg;

	SPI_Check_Busy();
}
 801c19a:	4620      	mov	r0, r4
 801c19c:	bd10      	pop	{r4, pc}
 801c19e:	bf00      	nop

0801c1a0 <SPI_Check_Busy>:
{
 801c1a0:	b508      	push	{r3, lr}
	while( SPI_Read_SR(1)&0x01 )
 801c1a2:	e001      	b.n	801c1a8 <SPI_Check_Busy+0x8>
		HAL_Delay(0);
 801c1a4:	f7e4 ff42 	bl	800102c <HAL_Delay>
 801c1a8:	f7ff ffe4 	bl	801c174 <SPI_Read_SR.part.2>
	while( SPI_Read_SR(1)&0x01 )
 801c1ac:	f010 0f01 	tst.w	r0, #1
		HAL_Delay(0);
 801c1b0:	f04f 0000 	mov.w	r0, #0
	while( SPI_Read_SR(1)&0x01 )
 801c1b4:	d1f6      	bne.n	801c1a4 <SPI_Check_Busy+0x4>
}
 801c1b6:	bd08      	pop	{r3, pc}

0801c1b8 <QSPI_16_R>:
	}
	return byte;
}
/* Recieve 16 bit in quad mode  */
uint16_t QSPI_16_R(void)
{
 801c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t byte=0;
	for(uint8_t i=0; i<4; i++)
	{
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801c1ba:	4f20      	ldr	r7, [pc, #128]	; (801c23c <QSPI_16_R+0x84>)
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801c1bc:	4e20      	ldr	r6, [pc, #128]	; (801c240 <QSPI_16_R+0x88>)
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801c1be:	2102      	movs	r1, #2
 801c1c0:	4638      	mov	r0, r7
 801c1c2:	f7e6 fbb5 	bl	8002930 <HAL_GPIO_ReadPin>
{
 801c1c6:	2504      	movs	r5, #4
	uint16_t byte=0;
 801c1c8:	2400      	movs	r4, #0
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 801c1ca:	2101      	movs	r1, #1
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801c1cc:	b100      	cbz	r0, 801c1d0 <QSPI_16_R+0x18>
 801c1ce:	430c      	orrs	r4, r1
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 801c1d0:	4638      	mov	r0, r7
 801c1d2:	f7e6 fbad 	bl	8002930 <HAL_GPIO_ReadPin>
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801c1d6:	2180      	movs	r1, #128	; 0x80
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 801c1d8:	b108      	cbz	r0, 801c1de <QSPI_16_R+0x26>
 801c1da:	f044 0402 	orr.w	r4, r4, #2
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801c1de:	4630      	mov	r0, r6
 801c1e0:	f7e6 fba6 	bl	8002930 <HAL_GPIO_ReadPin>
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 801c1e4:	2140      	movs	r1, #64	; 0x40
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801c1e6:	b108      	cbz	r0, 801c1ec <QSPI_16_R+0x34>
 801c1e8:	f044 0404 	orr.w	r4, r4, #4
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 801c1ec:	4630      	mov	r0, r6
 801c1ee:	f7e6 fb9f 	bl	8002930 <HAL_GPIO_ReadPin>
 801c1f2:	b108      	cbz	r0, 801c1f8 <QSPI_16_R+0x40>
 801c1f4:	f044 0408 	orr.w	r4, r4, #8
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801c1f8:	2201      	movs	r2, #1
 801c1fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c1fe:	4630      	mov	r0, r6
 801c200:	f7e6 fb9c 	bl	800293c <HAL_GPIO_WritePin>
		Set(clk);
		if (i<3) byte=(byte<<4);
 801c204:	2d01      	cmp	r5, #1
 801c206:	ea4f 1304 	mov.w	r3, r4, lsl #4
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801c20a:	f04f 0200 	mov.w	r2, #0
 801c20e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c212:	4630      	mov	r0, r6
		if (i<3) byte=(byte<<4);
 801c214:	d00c      	beq.n	801c230 <QSPI_16_R+0x78>
 801c216:	b29c      	uxth	r4, r3
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801c218:	f7e6 fb90 	bl	800293c <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801c21c:	2102      	movs	r1, #2
 801c21e:	4638      	mov	r0, r7
 801c220:	f7e6 fb86 	bl	8002930 <HAL_GPIO_ReadPin>
 801c224:	3d01      	subs	r5, #1
 801c226:	b2ed      	uxtb	r5, r5
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 801c228:	2101      	movs	r1, #1
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801c22a:	2800      	cmp	r0, #0
 801c22c:	d0d0      	beq.n	801c1d0 <QSPI_16_R+0x18>
 801c22e:	e7ce      	b.n	801c1ce <QSPI_16_R+0x16>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801c230:	4803      	ldr	r0, [pc, #12]	; (801c240 <QSPI_16_R+0x88>)
 801c232:	f7e6 fb83 	bl	800293c <HAL_GPIO_WritePin>
		Reset(clk);
	}
	return byte;
}
 801c236:	4620      	mov	r0, r4
 801c238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c23a:	bf00      	nop
 801c23c:	48000400 	.word	0x48000400
 801c240:	48001400 	.word	0x48001400

0801c244 <QSPI_Byte_T>:
	}
	return byte;
}
/* Send byte in quad mode */
void QSPI_Byte_T(uint8_t byte)
{
 801c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 801c246:	4e23      	ldr	r6, [pc, #140]	; (801c2d4 <QSPI_Byte_T+0x90>)
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 801c248:	4f23      	ldr	r7, [pc, #140]	; (801c2d8 <QSPI_Byte_T+0x94>)
{
 801c24a:	4604      	mov	r4, r0
 801c24c:	2502      	movs	r5, #2
	for(uint8_t i=0; i<2; i++)
	{
		if(0x80 & byte)	Set(io3);
 801c24e:	0620      	lsls	r0, r4, #24
 801c250:	d43a      	bmi.n	801c2c8 <QSPI_Byte_T+0x84>
		if(0x40 & byte)	Set(io2);
 801c252:	0661      	lsls	r1, r4, #25
 801c254:	d427      	bmi.n	801c2a6 <QSPI_Byte_T+0x62>
		if(0x20 & byte)	Set(io1);
 801c256:	06a2      	lsls	r2, r4, #26
 801c258:	d42c      	bmi.n	801c2b4 <QSPI_Byte_T+0x70>
		if(0x10 & byte)	Set(io0);
 801c25a:	06e3      	lsls	r3, r4, #27
 801c25c:	d431      	bmi.n	801c2c2 <QSPI_Byte_T+0x7e>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801c25e:	2201      	movs	r2, #1
 801c260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c264:	4630      	mov	r0, r6
 801c266:	f7e6 fb69 	bl	800293c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_RESET);
 801c26a:	2200      	movs	r2, #0
 801c26c:	2140      	movs	r1, #64	; 0x40
 801c26e:	4630      	mov	r0, r6
 801c270:	f7e6 fb64 	bl	800293c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_RESET);
 801c274:	2200      	movs	r2, #0
 801c276:	2180      	movs	r1, #128	; 0x80
 801c278:	4630      	mov	r0, r6
 801c27a:	f7e6 fb5f 	bl	800293c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_RESET);
 801c27e:	2200      	movs	r2, #0
 801c280:	2101      	movs	r1, #1
 801c282:	4638      	mov	r0, r7
 801c284:	f7e6 fb5a 	bl	800293c <HAL_GPIO_WritePin>
 801c288:	f7ff fe4c 	bl	801bf24 <Reset.part.1>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801c28c:	2200      	movs	r2, #0
 801c28e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c292:	4630      	mov	r0, r6
 801c294:	f7e6 fb52 	bl	800293c <HAL_GPIO_WritePin>
 801c298:	1e6b      	subs	r3, r5, #1

		Set(clk);
		Reset(io3);	Reset(io2);	Reset(io1);	Reset(io0);	
		byte=(byte<<4);
 801c29a:	0124      	lsls	r4, r4, #4
	for(uint8_t i=0; i<2; i++)
 801c29c:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
		byte=(byte<<4);
 801c2a0:	b2e4      	uxtb	r4, r4
	for(uint8_t i=0; i<2; i++)
 801c2a2:	d1d4      	bne.n	801c24e <QSPI_Byte_T+0xa>
		Reset(clk);	
	}	
}
 801c2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_SET);
 801c2a6:	2201      	movs	r2, #1
 801c2a8:	2180      	movs	r1, #128	; 0x80
 801c2aa:	4630      	mov	r0, r6
 801c2ac:	f7e6 fb46 	bl	800293c <HAL_GPIO_WritePin>
		if(0x20 & byte)	Set(io1);
 801c2b0:	06a2      	lsls	r2, r4, #26
 801c2b2:	d5d2      	bpl.n	801c25a <QSPI_Byte_T+0x16>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 801c2b4:	2201      	movs	r2, #1
 801c2b6:	4611      	mov	r1, r2
 801c2b8:	4638      	mov	r0, r7
 801c2ba:	f7e6 fb3f 	bl	800293c <HAL_GPIO_WritePin>
		if(0x10 & byte)	Set(io0);
 801c2be:	06e3      	lsls	r3, r4, #27
 801c2c0:	d5cd      	bpl.n	801c25e <QSPI_Byte_T+0x1a>
 801c2c2:	f7ff fe27 	bl	801bf14 <Set.part.0>
 801c2c6:	e7ca      	b.n	801c25e <QSPI_Byte_T+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 801c2c8:	2201      	movs	r2, #1
 801c2ca:	2140      	movs	r1, #64	; 0x40
 801c2cc:	4630      	mov	r0, r6
 801c2ce:	f7e6 fb35 	bl	800293c <HAL_GPIO_WritePin>
 801c2d2:	e7be      	b.n	801c252 <QSPI_Byte_T+0xe>
 801c2d4:	48001400 	.word	0x48001400
 801c2d8:	48000400 	.word	0x48000400

0801c2dc <QSPI_Recieve_IO_16>:
	SPI_Check_Busy();
}
/* Ψ祠𳭪򨨠嬿 16 蠳2 ⩲ */
/* Read 16 bit array from memory in quad mode */
void QSPI_Recieve_IO_16(uint16_t* arr, uint32_t address, uint32_t size)		// be aware that this function reconfigurates GPIO
{
 801c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2de:	460c      	mov	r4, r1
 801c2e0:	4605      	mov	r5, r0
 801c2e2:	4616      	mov	r6, r2
	QSPI_Transmit_Init();	
 801c2e4:	f7ff febe 	bl	801c064 <QSPI_Transmit_Init>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	2104      	movs	r1, #4
 801c2ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801c2f0:	f7e6 fb24 	bl	800293c <HAL_GPIO_WritePin>
	SPI_Byte_T(cmd);
 801c2f4:	20eb      	movs	r0, #235	; 0xeb
 801c2f6:	f7ff fef1 	bl	801c0dc <SPI_Byte_T>
		QSPI_Byte_T(byte);
 801c2fa:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801c2fe:	f7ff ffa1 	bl	801c244 <QSPI_Byte_T>
 801c302:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801c306:	f7ff ff9d 	bl	801c244 <QSPI_Byte_T>
 801c30a:	b2e0      	uxtb	r0, r4
 801c30c:	f7ff ff9a 	bl	801c244 <QSPI_Byte_T>
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 801c310:	4f0f      	ldr	r7, [pc, #60]	; (801c350 <QSPI_Recieve_IO_16+0x74>)
		QSPI_Byte_T(byte);
 801c312:	240c      	movs	r4, #12
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 801c314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c318:	4638      	mov	r0, r7
 801c31a:	f7e6 fb14 	bl	8002946 <HAL_GPIO_TogglePin>
	for(uint8_t i=0; i<(n*4); i++)
 801c31e:	3c01      	subs	r4, #1
 801c320:	d1f8      	bne.n	801c314 <QSPI_Recieve_IO_16+0x38>
	Reset(cs);
	SPI_Instruction(fastread_quad_io);
	QSPI_Address(address);
	QSPI_Dummy(3);	
	
	QSPI_Recieve_Init();
 801c322:	f7ff fe85 	bl	801c030 <QSPI_Recieve_Init>
 801c326:	3d02      	subs	r5, #2
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801c328:	b136      	cbz	r6, 801c338 <QSPI_Recieve_IO_16+0x5c>
 801c32a:	f7ff ff45 	bl	801c1b8 <QSPI_16_R>
 801c32e:	3401      	adds	r4, #1
 801c330:	42a6      	cmp	r6, r4
 801c332:	f825 0f02 	strh.w	r0, [r5, #2]!
 801c336:	d1f8      	bne.n	801c32a <QSPI_Recieve_IO_16+0x4e>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 801c338:	2201      	movs	r2, #1
 801c33a:	2104      	movs	r1, #4
 801c33c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801c340:	f7e6 fafc 	bl	800293c <HAL_GPIO_WritePin>
	Set(cs);

	Single_Mode();
 801c344:	f7ff fea8 	bl	801c098 <Single_Mode>
	SPI_Check_Busy();
}
 801c348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	SPI_Check_Busy();
 801c34c:	f7ff bf28 	b.w	801c1a0 <SPI_Check_Busy>
 801c350:	48001400 	.word	0x48001400

0801c354 <Image_load>:
void Image_load(uint32_t address, uint32_t size){
 801c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c358:	f6ad 2df4 	subw	sp, sp, #2804	; 0xaf4
 801c35c:	460f      	mov	r7, r1
 801c35e:	4680      	mov	r8, r0
	uint16_t buff[1400] = {0};
 801c360:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801c364:	4668      	mov	r0, sp
 801c366:	2100      	movs	r1, #0
 801c368:	f006 f9c9 	bl	80226fe <memset>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801c36c:	b1f7      	cbz	r7, 801c3ac <Image_load+0x58>
 801c36e:	2500      	movs	r5, #0
 801c370:	f8df b040 	ldr.w	fp, [pc, #64]	; 801c3b4 <Image_load+0x60>
 801c374:	462e      	mov	r6, r5
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 801c376:	f44f 6a30 	mov.w	sl, #2816	; 0xb00
 801c37a:	f44f 69af 	mov.w	r9, #1400	; 0x578
 801c37e:	b2ac      	uxth	r4, r5
 801c380:	fb0a 8104 	mla	r1, sl, r4, r8
 801c384:	f44f 62af 	mov.w	r2, #1400	; 0x578
 801c388:	4668      	mov	r0, sp
 801c38a:	f7ff ffa7 	bl	801c2dc <QSPI_Recieve_IO_16>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 801c38e:	fb09 f004 	mul.w	r0, r9, r4
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801c392:	f506 66af 	add.w	r6, r6, #1400	; 0x578
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 801c396:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 801c39a:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801c39e:	4669      	mov	r1, sp
 801c3a0:	f006 f9a2 	bl	80226e8 <memcpy>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801c3a4:	42b7      	cmp	r7, r6
 801c3a6:	f105 0501 	add.w	r5, r5, #1
 801c3aa:	d8e8      	bhi.n	801c37e <Image_load+0x2a>
}
 801c3ac:	f60d 2df4 	addw	sp, sp, #2804	; 0xaf4
 801c3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3b4:	200511f6 	.word	0x200511f6

0801c3b8 <Rabs_calc_Factor2_Settings_change>:
#include "Rabs_math.h"

float Rabs_calc_Factor2_Settings_change(float Kt, float P)
{
	return Kt * P;
}
 801c3b8:	ee20 0a20 	vmul.f32	s0, s0, s1
 801c3bc:	4770      	bx	lr
 801c3be:	bf00      	nop

0801c3c0 <Rabs_calc_Factor1>:

float Rabs_calc_Factor1(uint16_t Rdark, float Lt, uint16_t R_data[])
{
 801c3c0:	b538      	push	{r3, r4, r5, lr}
	uint32_t sum = 0;
	float Kl = 0;
	
	Kl = Lt/100.00;
 801c3c2:	eddf 7a17 	vldr	s15, [pc, #92]	; 801c420 <Rabs_calc_Factor1+0x60>
{
 801c3c6:	ed2d 8b02 	vpush	{d8}
	Kl = Lt/100.00;
 801c3ca:	ee80 8a27 	vdiv.f32	s16, s0, s15
 801c3ce:	1e8a      	subs	r2, r1, #2
 801c3d0:	f201 74fe 	addw	r4, r1, #2046	; 0x7fe
	uint32_t sum = 0;
 801c3d4:	2100      	movs	r1, #0
	for (uint16_t i = 0; i < 1024; i++)
	{
		sum = sum + (R_data[i] - Rdark);
 801c3d6:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c3da:	1a1b      	subs	r3, r3, r0
	for (uint16_t i = 0; i < 1024; i++)
 801c3dc:	4294      	cmp	r4, r2
		sum = sum + (R_data[i] - Rdark);
 801c3de:	4419      	add	r1, r3
	for (uint16_t i = 0; i < 1024; i++)
 801c3e0:	d1f9      	bne.n	801c3d6 <Rabs_calc_Factor1+0x16>
	}
	return Kl*(((float)sum)/1024.00);
 801c3e2:	ee07 1a90 	vmov	s15, r1
 801c3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c3ea:	ee17 0a90 	vmov	r0, s15
 801c3ee:	f7e4 f8c3 	bl	8000578 <__aeabi_f2d>
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	4b0b      	ldr	r3, [pc, #44]	; (801c424 <Rabs_calc_Factor1+0x64>)
 801c3f6:	f7e4 f913 	bl	8000620 <__aeabi_dmul>
 801c3fa:	4604      	mov	r4, r0
 801c3fc:	ee18 0a10 	vmov	r0, s16
 801c400:	460d      	mov	r5, r1
 801c402:	f7e4 f8b9 	bl	8000578 <__aeabi_f2d>
 801c406:	4602      	mov	r2, r0
 801c408:	460b      	mov	r3, r1
 801c40a:	4620      	mov	r0, r4
 801c40c:	4629      	mov	r1, r5
 801c40e:	f7e4 f907 	bl	8000620 <__aeabi_dmul>
 801c412:	f7e4 fbfd 	bl	8000c10 <__aeabi_d2f>
}
 801c416:	ecbd 8b02 	vpop	{d8}
 801c41a:	ee00 0a10 	vmov	s0, r0
 801c41e:	bd38      	pop	{r3, r4, r5, pc}
 801c420:	42c80000 	.word	0x42c80000
 801c424:	3f500000 	.word	0x3f500000

0801c428 <Rabs_calc_main>:
//		
//		r--;
//	}
//}
void Rabs_calc_main(uint16_t R_data[], uint16_t Rdark, float Factor1, float Factor2, float Sn[], float Rabs[])
{	
 801c428:	b470      	push	{r4, r5, r6}
 801c42a:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	
	for (uint16_t i = 0; i < 1024; i++)
	{
		if(R_data[i] - Rdark <= Factor1)
		{
			Rabs[1023-i] = 0;
 801c42e:	2600      	movs	r6, #0
 801c430:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 801c434:	1e84      	subs	r4, r0, #2
 801c436:	f200 75fe 	addw	r5, r0, #2046	; 0x7fe
 801c43a:	e006      	b.n	801c44a <Rabs_calc_main+0x22>
	for (uint16_t i = 0; i < 1024; i++)
 801c43c:	42ac      	cmp	r4, r5
			Rabs[1023-i] = 0;
 801c43e:	601e      	str	r6, [r3, #0]
 801c440:	f1a2 0204 	sub.w	r2, r2, #4
 801c444:	f1a3 0304 	sub.w	r3, r3, #4
	for (uint16_t i = 0; i < 1024; i++)
 801c448:	d019      	beq.n	801c47e <Rabs_calc_main+0x56>
		if(R_data[i] - Rdark <= Factor1)
 801c44a:	f834 0f02 	ldrh.w	r0, [r4, #2]!
 801c44e:	1a40      	subs	r0, r0, r1
 801c450:	ee07 0a90 	vmov	s15, r0
 801c454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c458:	eef4 7ac0 	vcmpe.f32	s15, s0
 801c45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c460:	d9ec      	bls.n	801c43c <Rabs_calc_main+0x14>
		} else
		{
			Rabs[1023-i] = (R_data[i] - Rdark)*Factor2*(Sn[r]);
 801c462:	ed92 7a00 	vldr	s14, [r2]
 801c466:	ee67 7aa0 	vmul.f32	s15, s15, s1
	for (uint16_t i = 0; i < 1024; i++)
 801c46a:	42ac      	cmp	r4, r5
			Rabs[1023-i] = (R_data[i] - Rdark)*Factor2*(Sn[r]);
 801c46c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c470:	f1a3 0304 	sub.w	r3, r3, #4
 801c474:	edc3 7a01 	vstr	s15, [r3, #4]
 801c478:	f1a2 0204 	sub.w	r2, r2, #4
	for (uint16_t i = 0; i < 1024; i++)
 801c47c:	d1e5      	bne.n	801c44a <Rabs_calc_main+0x22>
//			Rabs[1023-i] = 0;
//		} 
		
		r--;
	}
}
 801c47e:	bc70      	pop	{r4, r5, r6}
 801c480:	4770      	bx	lr
 801c482:	bf00      	nop

0801c484 <Rabs_find_MAX>:
	Factor3 = 50500 - Rdark - Factor1;
	return Factor3*Factor2;
}

float Rabs_find_MAX(float Rabs[], uint8_t direction)
{	
 801c484:	2900      	cmp	r1, #0
 801c486:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801c4b4 <Rabs_find_MAX+0x30>
 801c48a:	bf0c      	ite	eq
 801c48c:	2204      	moveq	r2, #4
 801c48e:	2203      	movne	r2, #3
 801c490:	f240 33ff 	movw	r3, #1023	; 0x3ff

	float max = 0;

	for (uint16_t i = 1023; i >= step; i-=step)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 801c494:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801c498:	edd1 7a00 	vldr	s15, [r1]
	for (uint16_t i = 1023; i >= step; i-=step)
 801c49c:	1a9b      	subs	r3, r3, r2
		max = Rabs[i] > max ? Rabs[i] : max;
 801c49e:	eef4 7a40 	vcmp.f32	s15, s0
 801c4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	for (uint16_t i = 1023; i >= step; i-=step)
 801c4a6:	b29b      	uxth	r3, r3
		max = Rabs[i] > max ? Rabs[i] : max;
 801c4a8:	bfc8      	it	gt
 801c4aa:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 1023; i >= step; i-=step)
 801c4ae:	429a      	cmp	r2, r3
 801c4b0:	d9f0      	bls.n	801c494 <Rabs_find_MAX+0x10>
	}
	return max;
}
 801c4b2:	4770      	bx	lr
 801c4b4:	00000000 	.word	0x00000000

0801c4b8 <Rabs_find_MAX_all>:

float Rabs_find_MAX_all(float Rabs[])
{	
	float max = 0;
 801c4b8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801c4d8 <Rabs_find_MAX_all+0x20>
 801c4bc:	f500 5380 	add.w	r3, r0, #4096	; 0x1000

	for (uint16_t i = 0; i < 1024; i++)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 801c4c0:	ecf0 7a01 	vldmia	r0!, {s15}
 801c4c4:	eef4 7a40 	vcmp.f32	s15, s0
 801c4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4cc:	bfc8      	it	gt
 801c4ce:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 0; i < 1024; i++)
 801c4d2:	4298      	cmp	r0, r3
 801c4d4:	d1f4      	bne.n	801c4c0 <Rabs_find_MAX_all+0x8>
	}
	return max;
 801c4d6:	4770      	bx	lr
 801c4d8:	00000000 	.word	0x00000000

0801c4dc <WriteSDFLASH_t>:
char buffer_sd[11];

FLASH_EraseInitTypeDef EraseInitStruct3;

void WriteSDFLASH_t(uint64_t filenum)
{
 801c4dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c4e0:	4c52      	ldr	r4, [pc, #328]	; (801c62c <WriteSDFLASH_t+0x150>)
uint32_t PAGEError = 0;
 801c4e2:	f10d 0808 	add.w	r8, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c4e6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801c4ea:	f04f 0900 	mov.w	r9, #0
 801c4ee:	f848 9d04 	str.w	r9, [r8, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c4f2:	6125      	str	r5, [r4, #16]
{
 801c4f4:	460f      	mov	r7, r1
 801c4f6:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801c4f8:	f7e5 ff1c 	bl	8002334 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801c4fc:	f7e5 ff1a 	bl	8002334 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c500:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801c502:	2064      	movs	r0, #100	; 0x64
 801c504:	f7e4 fd92 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801c508:	4849      	ldr	r0, [pc, #292]	; (801c630 <WriteSDFLASH_t+0x154>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801c50a:	2302      	movs	r3, #2
 801c50c:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)43;
 801c50e:	232b      	movs	r3, #43	; 0x2b
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801c510:	4641      	mov	r1, r8
		EraseInitStruct3.Page = (uint32_t)43;
 801c512:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801c514:	2301      	movs	r3, #1
 801c516:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801c518:	f8c0 9000 	str.w	r9, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801c51c:	f7e6 f824 	bl	8002568 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801c520:	2032      	movs	r0, #50	; 0x32
 801c522:	f7e4 fd83 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c526:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801c528:	f7e5 ff16 	bl	8002358 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801c52c:	f7e5 ff02 	bl	8002334 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c530:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)FILENUMBER, filenum);
 801c532:	4d40      	ldr	r5, [pc, #256]	; (801c634 <WriteSDFLASH_t+0x158>)
 801c534:	4632      	mov	r2, r6
 801c536:	463b      	mov	r3, r7
 801c538:	4629      	mov	r1, r5
 801c53a:	2000      	movs	r0, #0
 801c53c:	f7e5 ff54 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c540:	2800      	cmp	r0, #0
 801c542:	d1f7      	bne.n	801c534 <WriteSDFLASH_t+0x58>
					}

				flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c548:	6123      	str	r3, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MODEEL, Mode_EL);
 801c54a:	4d3b      	ldr	r5, [pc, #236]	; (801c638 <WriteSDFLASH_t+0x15c>)
 801c54c:	4c3b      	ldr	r4, [pc, #236]	; (801c63c <WriteSDFLASH_t+0x160>)
 801c54e:	782a      	ldrb	r2, [r5, #0]
 801c550:	2300      	movs	r3, #0
 801c552:	4621      	mov	r1, r4
 801c554:	2000      	movs	r0, #0
 801c556:	f7e5 ff47 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c55a:	2800      	cmp	r0, #0
 801c55c:	d1f7      	bne.n	801c54e <WriteSDFLASH_t+0x72>
					}
						
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c55e:	4b33      	ldr	r3, [pc, #204]	; (801c62c <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801c560:	4d37      	ldr	r5, [pc, #220]	; (801c640 <WriteSDFLASH_t+0x164>)
 801c562:	4c38      	ldr	r4, [pc, #224]	; (801c644 <WriteSDFLASH_t+0x168>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c564:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c568:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801c56a:	882a      	ldrh	r2, [r5, #0]
 801c56c:	2300      	movs	r3, #0
 801c56e:	4621      	mov	r1, r4
 801c570:	2000      	movs	r0, #0
 801c572:	f7e5 ff39 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c576:	2800      	cmp	r0, #0
 801c578:	d1f7      	bne.n	801c56a <WriteSDFLASH_t+0x8e>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c57a:	4b2c      	ldr	r3, [pc, #176]	; (801c62c <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801c57c:	4d32      	ldr	r5, [pc, #200]	; (801c648 <WriteSDFLASH_t+0x16c>)
 801c57e:	4c33      	ldr	r4, [pc, #204]	; (801c64c <WriteSDFLASH_t+0x170>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c580:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c584:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801c586:	782a      	ldrb	r2, [r5, #0]
 801c588:	2300      	movs	r3, #0
 801c58a:	4621      	mov	r1, r4
 801c58c:	2000      	movs	r0, #0
 801c58e:	f7e5 ff2b 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c592:	2800      	cmp	r0, #0
 801c594:	d1f7      	bne.n	801c586 <WriteSDFLASH_t+0xaa>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c596:	4b25      	ldr	r3, [pc, #148]	; (801c62c <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801c598:	4d2d      	ldr	r5, [pc, #180]	; (801c650 <WriteSDFLASH_t+0x174>)
 801c59a:	4c2e      	ldr	r4, [pc, #184]	; (801c654 <WriteSDFLASH_t+0x178>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c59c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c5a0:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801c5a2:	782a      	ldrb	r2, [r5, #0]
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	4621      	mov	r1, r4
 801c5a8:	2000      	movs	r0, #0
 801c5aa:	f7e5 ff1d 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c5ae:	2800      	cmp	r0, #0
 801c5b0:	d1f7      	bne.n	801c5a2 <WriteSDFLASH_t+0xc6>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c5b2:	4b1e      	ldr	r3, [pc, #120]	; (801c62c <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801c5b4:	4d28      	ldr	r5, [pc, #160]	; (801c658 <WriteSDFLASH_t+0x17c>)
 801c5b6:	4c29      	ldr	r4, [pc, #164]	; (801c65c <WriteSDFLASH_t+0x180>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c5b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c5bc:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801c5be:	782a      	ldrb	r2, [r5, #0]
 801c5c0:	2300      	movs	r3, #0
 801c5c2:	4621      	mov	r1, r4
 801c5c4:	2000      	movs	r0, #0
 801c5c6:	f7e5 ff0f 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c5ca:	2800      	cmp	r0, #0
 801c5cc:	d1f7      	bne.n	801c5be <WriteSDFLASH_t+0xe2>
						}
						flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c5ce:	4b17      	ldr	r3, [pc, #92]	; (801c62c <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801c5d0:	4d23      	ldr	r5, [pc, #140]	; (801c660 <WriteSDFLASH_t+0x184>)
 801c5d2:	4c24      	ldr	r4, [pc, #144]	; (801c664 <WriteSDFLASH_t+0x188>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c5d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c5d8:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801c5da:	782a      	ldrb	r2, [r5, #0]
 801c5dc:	2300      	movs	r3, #0
 801c5de:	4621      	mov	r1, r4
 801c5e0:	2000      	movs	r0, #0
 801c5e2:	f7e5 ff01 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c5e6:	2800      	cmp	r0, #0
 801c5e8:	d1f7      	bne.n	801c5da <WriteSDFLASH_t+0xfe>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c5ea:	4b10      	ldr	r3, [pc, #64]	; (801c62c <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801c5ec:	4d1e      	ldr	r5, [pc, #120]	; (801c668 <WriteSDFLASH_t+0x18c>)
 801c5ee:	4c1f      	ldr	r4, [pc, #124]	; (801c66c <WriteSDFLASH_t+0x190>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c5f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c5f4:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801c5f6:	782a      	ldrb	r2, [r5, #0]
 801c5f8:	2300      	movs	r3, #0
 801c5fa:	4621      	mov	r1, r4
 801c5fc:	2000      	movs	r0, #0
 801c5fe:	f7e5 fef3 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c602:	2800      	cmp	r0, #0
 801c604:	d1f7      	bne.n	801c5f6 <WriteSDFLASH_t+0x11a>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c606:	4b09      	ldr	r3, [pc, #36]	; (801c62c <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801c608:	4d19      	ldr	r5, [pc, #100]	; (801c670 <WriteSDFLASH_t+0x194>)
 801c60a:	4c1a      	ldr	r4, [pc, #104]	; (801c674 <WriteSDFLASH_t+0x198>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c60c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c610:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801c612:	782a      	ldrb	r2, [r5, #0]
 801c614:	2300      	movs	r3, #0
 801c616:	4621      	mov	r1, r4
 801c618:	2000      	movs	r0, #0
 801c61a:	f7e5 fee5 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c61e:	2800      	cmp	r0, #0
 801c620:	d1f7      	bne.n	801c612 <WriteSDFLASH_t+0x136>
					}
						HAL_FLASH_Lock();
 801c622:	f7e5 fe99 	bl	8002358 <HAL_FLASH_Lock>
}
 801c626:	b003      	add	sp, #12
 801c628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c62c:	40022000 	.word	0x40022000
 801c630:	2008dea8 	.word	0x2008dea8
 801c634:	0812b020 	.word	0x0812b020
 801c638:	20000a48 	.word	0x20000a48
 801c63c:	0812b030 	.word	0x0812b030
 801c640:	2000527e 	.word	0x2000527e
 801c644:	0812b038 	.word	0x0812b038
 801c648:	2000527a 	.word	0x2000527a
 801c64c:	0812b040 	.word	0x0812b040
 801c650:	20005277 	.word	0x20005277
 801c654:	0812b048 	.word	0x0812b048
 801c658:	20005278 	.word	0x20005278
 801c65c:	0812b050 	.word	0x0812b050
 801c660:	2000527b 	.word	0x2000527b
 801c664:	0812b058 	.word	0x0812b058
 801c668:	2008c321 	.word	0x2008c321
 801c66c:	0812b060 	.word	0x0812b060
 801c670:	2008c322 	.word	0x2008c322
 801c674:	0812b068 	.word	0x0812b068

0801c678 <WriteFLASH_Screen>:


void WriteFLASH_Screen(uint8_t Screen)
{
 801c678:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c67c:	4c1b      	ldr	r4, [pc, #108]	; (801c6ec <WriteFLASH_Screen+0x74>)
uint32_t PAGEError = 0;
 801c67e:	af02      	add	r7, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c680:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801c684:	f04f 0800 	mov.w	r8, #0
 801c688:	f847 8d04 	str.w	r8, [r7, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c68c:	6125      	str	r5, [r4, #16]
{
 801c68e:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801c690:	f7e5 fe50 	bl	8002334 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801c694:	f7e5 fe4e 	bl	8002334 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c698:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801c69a:	2064      	movs	r0, #100	; 0x64
 801c69c:	f7e4 fcc6 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801c6a0:	4813      	ldr	r0, [pc, #76]	; (801c6f0 <WriteFLASH_Screen+0x78>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801c6a2:	2302      	movs	r3, #2
 801c6a4:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)44;
 801c6a6:	232c      	movs	r3, #44	; 0x2c
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801c6a8:	4639      	mov	r1, r7
		EraseInitStruct3.Page = (uint32_t)44;
 801c6aa:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801c6ac:	2301      	movs	r3, #1
 801c6ae:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801c6b0:	f8c0 8000 	str.w	r8, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801c6b4:	f7e5 ff58 	bl	8002568 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801c6b8:	2032      	movs	r0, #50	; 0x32
 801c6ba:	f7e4 fcb7 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c6be:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801c6c0:	f7e5 fe4a 	bl	8002358 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801c6c4:	f7e5 fe36 	bl	8002334 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801c6c8:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SCREENADDR, Screen);
 801c6ca:	b2f4      	uxtb	r4, r6
 801c6cc:	4e09      	ldr	r6, [pc, #36]	; (801c6f4 <WriteFLASH_Screen+0x7c>)
 801c6ce:	2500      	movs	r5, #0
 801c6d0:	4622      	mov	r2, r4
 801c6d2:	462b      	mov	r3, r5
 801c6d4:	4631      	mov	r1, r6
 801c6d6:	2000      	movs	r0, #0
 801c6d8:	f7e5 fe86 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801c6dc:	2800      	cmp	r0, #0
 801c6de:	d1f7      	bne.n	801c6d0 <WriteFLASH_Screen+0x58>
					}
		HAL_FLASH_Lock();
 801c6e0:	f7e5 fe3a 	bl	8002358 <HAL_FLASH_Lock>
}
 801c6e4:	b002      	add	sp, #8
 801c6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6ea:	bf00      	nop
 801c6ec:	40022000 	.word	0x40022000
 801c6f0:	2008dea8 	.word	0x2008dea8
 801c6f4:	0812c020 	.word	0x0812c020

0801c6f8 <Calculate_SD_Data>:


void Calculate_SD_Data()
{
 801c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	SDWr_Status_bar = 0;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801c6fa:	4c5b      	ldr	r4, [pc, #364]	; (801c868 <Calculate_SD_Data+0x170>)
	SDWr_Status_bar = 0;
 801c6fc:	4e5b      	ldr	r6, [pc, #364]	; (801c86c <Calculate_SD_Data+0x174>)
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801c6fe:	4d5c      	ldr	r5, [pc, #368]	; (801c870 <Calculate_SD_Data+0x178>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c700:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 801c874 <Calculate_SD_Data+0x17c>
	Calculate_xy1931(colorimetry_XYZ1931);
 801c704:	4f5c      	ldr	r7, [pc, #368]	; (801c878 <Calculate_SD_Data+0x180>)
	SDWr_Status_bar = 0;
 801c706:	2200      	movs	r2, #0
 801c708:	2300      	movs	r3, #0
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c70a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c70e:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0;
 801c710:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c714:	f7f9 fb46 	bl	8015da4 <GUI_Bar_Measure>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801c718:	462a      	mov	r2, r5
 801c71a:	4b58      	ldr	r3, [pc, #352]	; (801c87c <Calculate_SD_Data+0x184>)
 801c71c:	4958      	ldr	r1, [pc, #352]	; (801c880 <Calculate_SD_Data+0x188>)
 801c71e:	4620      	mov	r0, r4
 801c720:	f7f2 f894 	bl	800e84c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801c724:	4638      	mov	r0, r7
 801c726:	f7f2 f8fd 	bl	800e924 <Calculate_xy1931>
	Calculate_uv1976(colorimetry_xy1931);
 801c72a:	4856      	ldr	r0, [pc, #344]	; (801c884 <Calculate_SD_Data+0x18c>)
 801c72c:	f7f2 f93c 	bl	800e9a8 <Calculate_uv1976>
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801c730:	4b55      	ldr	r3, [pc, #340]	; (801c888 <Calculate_SD_Data+0x190>)
 801c732:	781a      	ldrb	r2, [r3, #0]
 801c734:	4b55      	ldr	r3, [pc, #340]	; (801c88c <Calculate_SD_Data+0x194>)
 801c736:	4638      	mov	r0, r7
 801c738:	7819      	ldrb	r1, [r3, #0]
	
	SDWr_Status_bar = 0.1;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	delta_Eab_Measure = Calculate_deltaEab();
	
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c73a:	4f55      	ldr	r7, [pc, #340]	; (801c890 <Calculate_SD_Data+0x198>)
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801c73c:	f7f2 faf4 	bl	800ed28 <Calculate_Lab>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801c740:	4620      	mov	r0, r4
 801c742:	2101      	movs	r1, #1
 801c744:	f7f2 f954 	bl	800e9f0 <Calculate_Tc>
 801c748:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801c74c:	4b51      	ldr	r3, [pc, #324]	; (801c894 <Calculate_SD_Data+0x19c>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c74e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 801c898 <Calculate_SD_Data+0x1a0>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801c752:	ee17 2a90 	vmov	r2, s15
 801c756:	801a      	strh	r2, [r3, #0]
	SDWr_Status_bar = 0.1;
 801c758:	a33d      	add	r3, pc, #244	; (adr r3, 801c850 <Calculate_SD_Data+0x158>)
 801c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c75e:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c762:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.1;
 801c764:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c768:	f7f9 fb1c 	bl	8015da4 <GUI_Bar_Measure>
	delta_Eab_Measure = Calculate_deltaEab();
 801c76c:	f7f2 fd1c 	bl	800f1a8 <Calculate_deltaEab>
 801c770:	4b4a      	ldr	r3, [pc, #296]	; (801c89c <Calculate_SD_Data+0x1a4>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c772:	4629      	mov	r1, r5
	delta_Eab_Measure = Calculate_deltaEab();
 801c774:	8018      	strh	r0, [r3, #0]
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c776:	4620      	mov	r0, r4
 801c778:	f7f1 feea 	bl	800e550 <Calculate_EL_Day>
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801c77c:	4620      	mov	r0, r4
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c77e:	4d48      	ldr	r5, [pc, #288]	; (801c8a0 <Calculate_SD_Data+0x1a8>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c780:	ed87 0a00 	vstr	s0, [r7]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801c784:	f7f1 ff04 	bl	800e590 <Calculate_EL_Day_Wt>
 801c788:	4b46      	ldr	r3, [pc, #280]	; (801c8a4 <Calculate_SD_Data+0x1ac>)
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c78a:	4629      	mov	r1, r5
 801c78c:	4620      	mov	r0, r4
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801c78e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c792:	f7f1 ff45 	bl	800e620 <Calculate_PPFD_PPL>
 801c796:	4b44      	ldr	r3, [pc, #272]	; (801c8a8 <Calculate_SD_Data+0x1b0>)
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801c798:	4629      	mov	r1, r5
 801c79a:	4620      	mov	r0, r4
 801c79c:	2200      	movs	r2, #0
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c79e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801c7a2:	f7f1 ff79 	bl	800e698 <Calculate_PPFD_PPL_Range>
 801c7a6:	4b41      	ldr	r3, [pc, #260]	; (801c8ac <Calculate_SD_Data+0x1b4>)
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801c7a8:	4629      	mov	r1, r5
 801c7aa:	4620      	mov	r0, r4
 801c7ac:	2201      	movs	r2, #1
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801c7ae:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801c7b2:	f7f1 ff71 	bl	800e698 <Calculate_PPFD_PPL_Range>
 801c7b6:	4b3e      	ldr	r3, [pc, #248]	; (801c8b0 <Calculate_SD_Data+0x1b8>)
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801c7b8:	4629      	mov	r1, r5
 801c7ba:	4620      	mov	r0, r4
 801c7bc:	2202      	movs	r2, #2
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801c7be:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801c7c2:	f7f1 ff69 	bl	800e698 <Calculate_PPFD_PPL_Range>
 801c7c6:	4b3b      	ldr	r3, [pc, #236]	; (801c8b4 <Calculate_SD_Data+0x1bc>)
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801c7c8:	4629      	mov	r1, r5
 801c7ca:	4620      	mov	r0, r4
 801c7cc:	2203      	movs	r2, #3
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801c7ce:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801c7d2:	f7f1 ff61 	bl	800e698 <Calculate_PPFD_PPL_Range>
 801c7d6:	4b38      	ldr	r3, [pc, #224]	; (801c8b8 <Calculate_SD_Data+0x1c0>)
 801c7d8:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.3;
 801c7dc:	a31e      	add	r3, pc, #120	; (adr r3, 801c858 <Calculate_SD_Data+0x160>)
 801c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c7e2:	ed9f 0a36 	vldr	s0, [pc, #216]	; 801c8bc <Calculate_SD_Data+0x1c4>
 801c7e6:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c7ea:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.3;
 801c7ec:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c7f0:	f7f9 fad8 	bl	8015da4 <GUI_Bar_Measure>
	E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801c7f4:	4620      	mov	r0, r4
 801c7f6:	4932      	ldr	r1, [pc, #200]	; (801c8c0 <Calculate_SD_Data+0x1c8>)
 801c7f8:	f7f1 fee2 	bl	800e5c0 <Calculate_EL_Night>
 801c7fc:	4b31      	ldr	r3, [pc, #196]	; (801c8c4 <Calculate_SD_Data+0x1cc>)
 801c7fe:	eef0 0a40 	vmov.f32	s1, s0
 801c802:	ed83 0a00 	vstr	s0, [r3]
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801c806:	ed97 0a00 	vldr	s0, [r7]
 801c80a:	f7f1 fef9 	bl	800e600 <Calculate_SP>
 801c80e:	4b2e      	ldr	r3, [pc, #184]	; (801c8c8 <Calculate_SD_Data+0x1d0>)
	
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c810:	492e      	ldr	r1, [pc, #184]	; (801c8cc <Calculate_SD_Data+0x1d4>)
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801c812:	ed83 0a00 	vstr	s0, [r3]
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c816:	4620      	mov	r0, r4
 801c818:	f7f1 ffc8 	bl	800e7ac <Calculate_ELr>
 801c81c:	4b2c      	ldr	r3, [pc, #176]	; (801c8d0 <Calculate_SD_Data+0x1d8>)
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801c81e:	492d      	ldr	r1, [pc, #180]	; (801c8d4 <Calculate_SD_Data+0x1dc>)
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c820:	ed83 0a00 	vstr	s0, [r3]
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801c824:	4620      	mov	r0, r4
 801c826:	f7f1 ffa7 	bl	800e778 <Calculate_ELb>
 801c82a:	4b2b      	ldr	r3, [pc, #172]	; (801c8d8 <Calculate_SD_Data+0x1e0>)
 801c82c:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.4;
 801c830:	a30b      	add	r3, pc, #44	; (adr r3, 801c860 <Calculate_SD_Data+0x168>)
 801c832:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c836:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801c8dc <Calculate_SD_Data+0x1e4>
	SDWr_Status_bar = 0.4;
 801c83a:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c83e:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c842:	2055      	movs	r0, #85	; 0x55
}
 801c844:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c848:	f7f9 baac 	b.w	8015da4 <GUI_Bar_Measure>
 801c84c:	f3af 8000 	nop.w
 801c850:	9999999a 	.word	0x9999999a
 801c854:	3fb99999 	.word	0x3fb99999
 801c858:	33333333 	.word	0x33333333
 801c85c:	3fd33333 	.word	0x3fd33333
 801c860:	9999999a 	.word	0x9999999a
 801c864:	3fd99999 	.word	0x3fd99999
 801c868:	20007de4 	.word	0x20007de4
 801c86c:	200052d0 	.word	0x200052d0
 801c870:	2004e1e8 	.word	0x2004e1e8
 801c874:	00000000 	.word	0x00000000
 801c878:	2008adc6 	.word	0x2008adc6
 801c87c:	20088db8 	.word	0x20088db8
 801c880:	20085db8 	.word	0x20085db8
 801c884:	2008ade4 	.word	0x2008ade4
 801c888:	2008c321 	.word	0x2008c321
 801c88c:	2000527c 	.word	0x2000527c
 801c890:	20091514 	.word	0x20091514
 801c894:	200501e8 	.word	0x200501e8
 801c898:	3dcccccd 	.word	0x3dcccccd
 801c89c:	2008c31e 	.word	0x2008c31e
 801c8a0:	200501ec 	.word	0x200501ec
 801c8a4:	20090f80 	.word	0x20090f80
 801c8a8:	20090f88 	.word	0x20090f88
 801c8ac:	2009106c 	.word	0x2009106c
 801c8b0:	200913f0 	.word	0x200913f0
 801c8b4:	2009132c 	.word	0x2009132c
 801c8b8:	20090f84 	.word	0x20090f84
 801c8bc:	3e99999a 	.word	0x3e99999a
 801c8c0:	2004f1e8 	.word	0x2004f1e8
 801c8c4:	20090f74 	.word	0x20090f74
 801c8c8:	20091068 	.word	0x20091068
 801c8cc:	200065e0 	.word	0x200065e0
 801c8d0:	20091510 	.word	0x20091510
 801c8d4:	200055e0 	.word	0x200055e0
 801c8d8:	2009150c 	.word	0x2009150c
 801c8dc:	3ecccccd 	.word	0x3ecccccd

0801c8e0 <SD_Witer>:



uint8_t mount = 0;
void SD_Witer(uint16_t file_cnt, uint8_t Language_status, uint8_t Memory_Data_satus, uint8_t Mode_EL, uint8_t CRICQS_done)
{
 801c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8e4:	461f      	mov	r7, r3
	
	char digit_buff[3];
	char source_type[4];
	char measure_buff[12];

	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801c8e6:	4bb8      	ldr	r3, [pc, #736]	; (801cbc8 <SD_Witer+0x2e8>)
 801c8e8:	781b      	ldrb	r3, [r3, #0]
 801c8ea:	2b01      	cmp	r3, #1
{
 801c8ec:	b087      	sub	sp, #28
 801c8ee:	4605      	mov	r5, r0
 801c8f0:	460c      	mov	r4, r1
 801c8f2:	4690      	mov	r8, r2
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801c8f4:	f000 85fe 	beq.w	801d4f4 <SD_Witer+0xc14>
 801c8f8:	2b02      	cmp	r3, #2
 801c8fa:	f000 85fe 	beq.w	801d4fa <SD_Witer+0xc1a>
 801c8fe:	2b04      	cmp	r3, #4
 801c900:	f000 85fe 	beq.w	801d500 <SD_Witer+0xc20>
 801c904:	2b08      	cmp	r3, #8
 801c906:	f000 85fe 	beq.w	801d506 <SD_Witer+0xc26>
 801c90a:	2b10      	cmp	r3, #16
 801c90c:	f000 85fe 	beq.w	801d50c <SD_Witer+0xc2c>
 801c910:	4aae      	ldr	r2, [pc, #696]	; (801cbcc <SD_Witer+0x2ec>)
 801c912:	49af      	ldr	r1, [pc, #700]	; (801cbd0 <SD_Witer+0x2f0>)
 801c914:	2b20      	cmp	r3, #32
 801c916:	bf18      	it	ne
 801c918:	4611      	movne	r1, r2
 801c91a:	a802      	add	r0, sp, #8
 801c91c:	f005 ff2b 	bl	8022776 <strcpy>
	
	memset(measure_buff, 0, 12);
 801c920:	2300      	movs	r3, #0
	
		sprintf(digit_buff, "%.3d", file_cnt );
 801c922:	462a      	mov	r2, r5
 801c924:	49ab      	ldr	r1, [pc, #684]	; (801cbd4 <SD_Witer+0x2f4>)
	memset(measure_buff, 0, 12);
 801c926:	9303      	str	r3, [sp, #12]
		sprintf(digit_buff, "%.3d", file_cnt );
 801c928:	a801      	add	r0, sp, #4
	memset(measure_buff, 0, 12);
 801c92a:	9304      	str	r3, [sp, #16]
 801c92c:	9305      	str	r3, [sp, #20]
		sprintf(digit_buff, "%.3d", file_cnt );
 801c92e:	f005 feef 	bl	8022710 <sprintf>
		strcat(buffer_sd, digit_buff);
 801c932:	a901      	add	r1, sp, #4
 801c934:	48a8      	ldr	r0, [pc, #672]	; (801cbd8 <SD_Witer+0x2f8>)
		strcat(buffer_sd, ".txt");

		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801c936:	4da9      	ldr	r5, [pc, #676]	; (801cbdc <SD_Witer+0x2fc>)
 801c938:	4ea7      	ldr	r6, [pc, #668]	; (801cbd8 <SD_Witer+0x2f8>)
		strcat(buffer_sd, digit_buff);
 801c93a:	f005 ff0d 	bl	8022758 <strcat>
		strcat(buffer_sd, ".txt");
 801c93e:	49a8      	ldr	r1, [pc, #672]	; (801cbe0 <SD_Witer+0x300>)
 801c940:	48a5      	ldr	r0, [pc, #660]	; (801cbd8 <SD_Witer+0x2f8>)
 801c942:	f005 ff09 	bl	8022758 <strcat>
		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801c946:	2201      	movs	r2, #1
 801c948:	49a6      	ldr	r1, [pc, #664]	; (801cbe4 <SD_Witer+0x304>)
 801c94a:	48a7      	ldr	r0, [pc, #668]	; (801cbe8 <SD_Witer+0x308>)
 801c94c:	f7ed f8b8 	bl	8009ac0 <f_mount>
 801c950:	7028      	strb	r0, [r5, #0]
       if (res != FR_OK)
 801c952:	2800      	cmp	r0, #0
 801c954:	f040 85b1 	bne.w	801d4ba <SD_Witer+0xbda>
        {
                //printf("Ошибка монтирования диска %d\r\n", result);
        }
			else
				{
				res = f_open(&MyFile, buffer_sd, FA_CREATE_ALWAYS | FA_WRITE);
 801c958:	220a      	movs	r2, #10
 801c95a:	4631      	mov	r1, r6
 801c95c:	48a3      	ldr	r0, [pc, #652]	; (801cbec <SD_Witer+0x30c>)
 801c95e:	f7ed f8e9 	bl	8009b34 <f_open>
 801c962:	7028      	strb	r0, [r5, #0]
				if (res == FR_OK)
 801c964:	2800      	cmp	r0, #0
 801c966:	f040 85a8 	bne.w	801d4ba <SD_Witer+0xbda>
					{
							
							SDWr_Status_bar = 0.5;
 801c96a:	4ba1      	ldr	r3, [pc, #644]	; (801cbf0 <SD_Witer+0x310>)
 801c96c:	49a1      	ldr	r1, [pc, #644]	; (801cbf4 <SD_Witer+0x314>)
 801c96e:	2000      	movs	r0, #0
 801c970:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c974:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801c978:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c97c:	2055      	movs	r0, #85	; 0x55
 801c97e:	f7f9 fa11 	bl	8015da4 <GUI_Bar_Measure>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801c982:	4b9d      	ldr	r3, [pc, #628]	; (801cbf8 <SD_Witer+0x318>)
 801c984:	2c00      	cmp	r4, #0
 801c986:	f040 85c4 	bne.w	801d512 <SD_Witer+0xc32>
 801c98a:	499c      	ldr	r1, [pc, #624]	; (801cbfc <SD_Witer+0x31c>)
 801c98c:	2235      	movs	r2, #53	; 0x35
 801c98e:	4897      	ldr	r0, [pc, #604]	; (801cbec <SD_Witer+0x30c>)
 801c990:	f7ed fa12 	bl	8009db8 <f_write>
							sprintf(measure_buff, "%.4f", SP_Measure);
 801c994:	4b9a      	ldr	r3, [pc, #616]	; (801cc00 <SD_Witer+0x320>)
 801c996:	6818      	ldr	r0, [r3, #0]
 801c998:	f7e3 fdee 	bl	8000578 <__aeabi_f2d>
 801c99c:	4602      	mov	r2, r0
 801c99e:	460b      	mov	r3, r1
 801c9a0:	a803      	add	r0, sp, #12
 801c9a2:	4998      	ldr	r1, [pc, #608]	; (801cc04 <SD_Witer+0x324>)
 801c9a4:	f005 feb4 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c9a8:	220c      	movs	r2, #12
 801c9aa:	4b93      	ldr	r3, [pc, #588]	; (801cbf8 <SD_Witer+0x318>)
 801c9ac:	488f      	ldr	r0, [pc, #572]	; (801cbec <SD_Witer+0x30c>)
 801c9ae:	eb0d 0102 	add.w	r1, sp, r2
 801c9b2:	f7ed fa01 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	9303      	str	r3, [sp, #12]
 801c9ba:	9304      	str	r3, [sp, #16]
 801c9bc:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801c9be:	4b8e      	ldr	r3, [pc, #568]	; (801cbf8 <SD_Witer+0x318>)
 801c9c0:	2c00      	cmp	r4, #0
 801c9c2:	f040 85aa 	bne.w	801d51a <SD_Witer+0xc3a>
 801c9c6:	4990      	ldr	r1, [pc, #576]	; (801cc08 <SD_Witer+0x328>)
 801c9c8:	2226      	movs	r2, #38	; 0x26
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801c9ca:	f8df 9264 	ldr.w	r9, [pc, #612]	; 801cc30 <SD_Witer+0x350>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801c9ce:	4887      	ldr	r0, [pc, #540]	; (801cbec <SD_Witer+0x30c>)
 801c9d0:	f7ed f9f2 	bl	8009db8 <f_write>
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801c9d4:	f8b9 2000 	ldrh.w	r2, [r9]
 801c9d8:	498c      	ldr	r1, [pc, #560]	; (801cc0c <SD_Witer+0x32c>)
 801c9da:	a803      	add	r0, sp, #12
 801c9dc:	f005 fe98 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c9e0:	220c      	movs	r2, #12
 801c9e2:	4b85      	ldr	r3, [pc, #532]	; (801cbf8 <SD_Witer+0x318>)
 801c9e4:	4881      	ldr	r0, [pc, #516]	; (801cbec <SD_Witer+0x30c>)
 801c9e6:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801c9ea:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c9ec:	f7ed f9e4 	bl	8009db8 <f_write>
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801c9f0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801c9f4:	4985      	ldr	r1, [pc, #532]	; (801cc0c <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801c9f6:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801c9f8:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801c9fa:	9504      	str	r5, [sp, #16]
 801c9fc:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801c9fe:	f005 fe87 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca02:	220c      	movs	r2, #12
 801ca04:	4b7c      	ldr	r3, [pc, #496]	; (801cbf8 <SD_Witer+0x318>)
 801ca06:	4879      	ldr	r0, [pc, #484]	; (801cbec <SD_Witer+0x30c>)
 801ca08:	eb0d 0102 	add.w	r1, sp, r2
 801ca0c:	f7ed f9d4 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801ca10:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801ca14:	497d      	ldr	r1, [pc, #500]	; (801cc0c <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801ca16:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801ca18:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801ca1a:	9504      	str	r5, [sp, #16]
 801ca1c:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801ca1e:	f005 fe77 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca22:	220c      	movs	r2, #12
 801ca24:	4b74      	ldr	r3, [pc, #464]	; (801cbf8 <SD_Witer+0x318>)
 801ca26:	4871      	ldr	r0, [pc, #452]	; (801cbec <SD_Witer+0x30c>)
 801ca28:	eb0d 0102 	add.w	r1, sp, r2
 801ca2c:	f7ed f9c4 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
 801ca30:	9503      	str	r5, [sp, #12]
 801ca32:	9504      	str	r5, [sp, #16]
 801ca34:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801ca36:	4b70      	ldr	r3, [pc, #448]	; (801cbf8 <SD_Witer+0x318>)
 801ca38:	2c00      	cmp	r4, #0
 801ca3a:	f040 8572 	bne.w	801d522 <SD_Witer+0xc42>
 801ca3e:	4974      	ldr	r1, [pc, #464]	; (801cc10 <SD_Witer+0x330>)
 801ca40:	222e      	movs	r2, #46	; 0x2e
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801ca42:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 801cc34 <SD_Witer+0x354>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801ca46:	4869      	ldr	r0, [pc, #420]	; (801cbec <SD_Witer+0x30c>)
 801ca48:	f7ed f9b6 	bl	8009db8 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801ca4c:	f8d9 0000 	ldr.w	r0, [r9]
 801ca50:	f7e3 fd92 	bl	8000578 <__aeabi_f2d>
 801ca54:	4602      	mov	r2, r0
 801ca56:	460b      	mov	r3, r1
 801ca58:	a803      	add	r0, sp, #12
 801ca5a:	496e      	ldr	r1, [pc, #440]	; (801cc14 <SD_Witer+0x334>)
 801ca5c:	f005 fe58 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca60:	220c      	movs	r2, #12
 801ca62:	4b65      	ldr	r3, [pc, #404]	; (801cbf8 <SD_Witer+0x318>)
 801ca64:	4861      	ldr	r0, [pc, #388]	; (801cbec <SD_Witer+0x30c>)
 801ca66:	eb0d 0102 	add.w	r1, sp, r2
 801ca6a:	f7ed f9a5 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
 801ca6e:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801ca70:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801ca74:	9503      	str	r5, [sp, #12]
 801ca76:	9504      	str	r5, [sp, #16]
 801ca78:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801ca7a:	f7e3 fd7d 	bl	8000578 <__aeabi_f2d>
 801ca7e:	4602      	mov	r2, r0
 801ca80:	460b      	mov	r3, r1
 801ca82:	a803      	add	r0, sp, #12
 801ca84:	495f      	ldr	r1, [pc, #380]	; (801cc04 <SD_Witer+0x324>)
 801ca86:	f005 fe43 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca8a:	220c      	movs	r2, #12
 801ca8c:	4b5a      	ldr	r3, [pc, #360]	; (801cbf8 <SD_Witer+0x318>)
 801ca8e:	4857      	ldr	r0, [pc, #348]	; (801cbec <SD_Witer+0x30c>)
 801ca90:	eb0d 0102 	add.w	r1, sp, r2
 801ca94:	f7ed f990 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
 801ca98:	9503      	str	r5, [sp, #12]
 801ca9a:	9504      	str	r5, [sp, #16]
 801ca9c:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801ca9e:	4b56      	ldr	r3, [pc, #344]	; (801cbf8 <SD_Witer+0x318>)
 801caa0:	2c00      	cmp	r4, #0
 801caa2:	f040 8542 	bne.w	801d52a <SD_Witer+0xc4a>
 801caa6:	495c      	ldr	r1, [pc, #368]	; (801cc18 <SD_Witer+0x338>)
 801caa8:	2230      	movs	r2, #48	; 0x30
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801caaa:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801cc38 <SD_Witer+0x358>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801caae:	484f      	ldr	r0, [pc, #316]	; (801cbec <SD_Witer+0x30c>)
 801cab0:	f7ed f982 	bl	8009db8 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801cab4:	f8d9 0000 	ldr.w	r0, [r9]
 801cab8:	f7e3 fd5e 	bl	8000578 <__aeabi_f2d>
 801cabc:	4602      	mov	r2, r0
 801cabe:	460b      	mov	r3, r1
 801cac0:	a803      	add	r0, sp, #12
 801cac2:	4954      	ldr	r1, [pc, #336]	; (801cc14 <SD_Witer+0x334>)
 801cac4:	f005 fe24 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cac8:	220c      	movs	r2, #12
 801caca:	4b4b      	ldr	r3, [pc, #300]	; (801cbf8 <SD_Witer+0x318>)
 801cacc:	4847      	ldr	r0, [pc, #284]	; (801cbec <SD_Witer+0x30c>)
 801cace:	eb0d 0102 	add.w	r1, sp, r2
 801cad2:	f7ed f971 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
 801cad6:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801cad8:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801cadc:	9503      	str	r5, [sp, #12]
 801cade:	9504      	str	r5, [sp, #16]
 801cae0:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801cae2:	f7e3 fd49 	bl	8000578 <__aeabi_f2d>
 801cae6:	4602      	mov	r2, r0
 801cae8:	460b      	mov	r3, r1
 801caea:	a803      	add	r0, sp, #12
 801caec:	4945      	ldr	r1, [pc, #276]	; (801cc04 <SD_Witer+0x324>)
 801caee:	f005 fe0f 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801caf2:	220c      	movs	r2, #12
 801caf4:	4b40      	ldr	r3, [pc, #256]	; (801cbf8 <SD_Witer+0x318>)
 801caf6:	483d      	ldr	r0, [pc, #244]	; (801cbec <SD_Witer+0x30c>)
 801caf8:	eb0d 0102 	add.w	r1, sp, r2
 801cafc:	f7ed f95c 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
 801cb00:	9503      	str	r5, [sp, #12]
 801cb02:	9504      	str	r5, [sp, #16]
 801cb04:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801cb06:	4b3c      	ldr	r3, [pc, #240]	; (801cbf8 <SD_Witer+0x318>)
 801cb08:	2c00      	cmp	r4, #0
 801cb0a:	f040 8512 	bne.w	801d532 <SD_Witer+0xc52>
 801cb0e:	4943      	ldr	r1, [pc, #268]	; (801cc1c <SD_Witer+0x33c>)
 801cb10:	220e      	movs	r2, #14
 801cb12:	4836      	ldr	r0, [pc, #216]	; (801cbec <SD_Witer+0x30c>)
 801cb14:	f7ed f950 	bl	8009db8 <f_write>
							if(Tc_Measure == 0xFFFF){f_write(&MyFile, "NAN", 3, &byteswritten);}
 801cb18:	4b41      	ldr	r3, [pc, #260]	; (801cc20 <SD_Witer+0x340>)
 801cb1a:	881a      	ldrh	r2, [r3, #0]
 801cb1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cb20:	429a      	cmp	r2, r3
 801cb22:	f040 8537 	bne.w	801d594 <SD_Witer+0xcb4>
 801cb26:	4b34      	ldr	r3, [pc, #208]	; (801cbf8 <SD_Witer+0x318>)
 801cb28:	4928      	ldr	r1, [pc, #160]	; (801cbcc <SD_Witer+0x2ec>)
 801cb2a:	4830      	ldr	r0, [pc, #192]	; (801cbec <SD_Witer+0x30c>)
 801cb2c:	2203      	movs	r2, #3
 801cb2e:	f7ed f943 	bl	8009db8 <f_write>
										sprintf(measure_buff, "%.d", Tc_Measure);
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
										memset(measure_buff, 0, 12);
								}
						
								SDWr_Status_bar = 0.7;
 801cb32:	a123      	add	r1, pc, #140	; (adr r1, 801cbc0 <SD_Witer+0x2e0>)
 801cb34:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb38:	4b2d      	ldr	r3, [pc, #180]	; (801cbf0 <SD_Witer+0x310>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801cb3a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801cc24 <SD_Witer+0x344>
								SDWr_Status_bar = 0.7;
 801cb3e:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801cb42:	f44f 718c 	mov.w	r1, #280	; 0x118
 801cb46:	2055      	movs	r0, #85	; 0x55
 801cb48:	f7f9 f92c 	bl	8015da4 <GUI_Bar_Measure>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801cb4c:	4b2a      	ldr	r3, [pc, #168]	; (801cbf8 <SD_Witer+0x318>)
 801cb4e:	2c00      	cmp	r4, #0
 801cb50:	f040 8531 	bne.w	801d5b6 <SD_Witer+0xcd6>
 801cb54:	4934      	ldr	r1, [pc, #208]	; (801cc28 <SD_Witer+0x348>)
 801cb56:	224a      	movs	r2, #74	; 0x4a
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801cb58:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 801cc3c <SD_Witer+0x35c>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801cb5c:	4823      	ldr	r0, [pc, #140]	; (801cbec <SD_Witer+0x30c>)
 801cb5e:	f7ed f92b 	bl	8009db8 <f_write>
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801cb62:	f9b9 2000 	ldrsh.w	r2, [r9]
 801cb66:	4931      	ldr	r1, [pc, #196]	; (801cc2c <SD_Witer+0x34c>)
 801cb68:	a803      	add	r0, sp, #12
 801cb6a:	f005 fdd1 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cb6e:	220c      	movs	r2, #12
 801cb70:	4b21      	ldr	r3, [pc, #132]	; (801cbf8 <SD_Witer+0x318>)
 801cb72:	481e      	ldr	r0, [pc, #120]	; (801cbec <SD_Witer+0x30c>)
 801cb74:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801cb78:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cb7a:	f7ed f91d 	bl	8009db8 <f_write>
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801cb7e:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 801cb82:	492a      	ldr	r1, [pc, #168]	; (801cc2c <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801cb84:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801cb86:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801cb88:	9504      	str	r5, [sp, #16]
 801cb8a:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801cb8c:	f005 fdc0 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cb90:	220c      	movs	r2, #12
 801cb92:	4b19      	ldr	r3, [pc, #100]	; (801cbf8 <SD_Witer+0x318>)
 801cb94:	4815      	ldr	r0, [pc, #84]	; (801cbec <SD_Witer+0x30c>)
 801cb96:	eb0d 0102 	add.w	r1, sp, r2
 801cb9a:	f7ed f90d 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801cb9e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801cba2:	4922      	ldr	r1, [pc, #136]	; (801cc2c <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801cba4:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801cba6:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801cba8:	9504      	str	r5, [sp, #16]
 801cbaa:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801cbac:	f005 fdb0 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cbb0:	220c      	movs	r2, #12
 801cbb2:	4b11      	ldr	r3, [pc, #68]	; (801cbf8 <SD_Witer+0x318>)
 801cbb4:	480d      	ldr	r0, [pc, #52]	; (801cbec <SD_Witer+0x30c>)
 801cbb6:	eb0d 0102 	add.w	r1, sp, r2
 801cbba:	f7ed f8fd 	bl	8009db8 <f_write>
 801cbbe:	e03f      	b.n	801cc40 <SD_Witer+0x360>
 801cbc0:	66666666 	.word	0x66666666
 801cbc4:	3fe66666 	.word	0x3fe66666
 801cbc8:	2008c321 	.word	0x2008c321
 801cbcc:	0803419c 	.word	0x0803419c
 801cbd0:	080341a0 	.word	0x080341a0
 801cbd4:	080341a4 	.word	0x080341a4
 801cbd8:	2008de9c 	.word	0x2008de9c
 801cbdc:	2008eee8 	.word	0x2008eee8
 801cbe0:	080341a9 	.word	0x080341a9
 801cbe4:	2008eef0 	.word	0x2008eef0
 801cbe8:	2008ce68 	.word	0x2008ce68
 801cbec:	2008deb8 	.word	0x2008deb8
 801cbf0:	200052d0 	.word	0x200052d0
 801cbf4:	3fe00000 	.word	0x3fe00000
 801cbf8:	2008ce60 	.word	0x2008ce60
 801cbfc:	20000928 	.word	0x20000928
 801cc00:	20091068 	.word	0x20091068
 801cc04:	08034178 	.word	0x08034178
 801cc08:	20000441 	.word	0x20000441
 801cc0c:	080341cf 	.word	0x080341cf
 801cc10:	200004bd 	.word	0x200004bd
 801cc14:	080341ae 	.word	0x080341ae
 801cc18:	2000047b 	.word	0x2000047b
 801cc1c:	2000024f 	.word	0x2000024f
 801cc20:	200501e8 	.word	0x200501e8
 801cc24:	3f333333 	.word	0x3f333333
 801cc28:	20000613 	.word	0x20000613
 801cc2c:	080341b8 	.word	0x080341b8
 801cc30:	2008adc6 	.word	0x2008adc6
 801cc34:	2008ade4 	.word	0x2008ade4
 801cc38:	2008addc 	.word	0x2008addc
 801cc3c:	2008adc0 	.word	0x2008adc0
							memset(measure_buff, 0, 12);
 801cc40:	9503      	str	r5, [sp, #12]
 801cc42:	9504      	str	r5, [sp, #16]
 801cc44:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801cc46:	4bb4      	ldr	r3, [pc, #720]	; (801cf18 <SD_Witer+0x638>)
 801cc48:	2c00      	cmp	r4, #0
 801cc4a:	f040 84b8 	bne.w	801d5be <SD_Witer+0xcde>
 801cc4e:	49b3      	ldr	r1, [pc, #716]	; (801cf1c <SD_Witer+0x63c>)
 801cc50:	222a      	movs	r2, #42	; 0x2a
 801cc52:	48b3      	ldr	r0, [pc, #716]	; (801cf20 <SD_Witer+0x640>)
 801cc54:	f7ed f8b0 	bl	8009db8 <f_write>
							f_write(&MyFile, &source_type, sizeof(source_type), &byteswritten);//SourceType
 801cc58:	4baf      	ldr	r3, [pc, #700]	; (801cf18 <SD_Witer+0x638>)
 801cc5a:	48b1      	ldr	r0, [pc, #708]	; (801cf20 <SD_Witer+0x640>)
 801cc5c:	2204      	movs	r2, #4
 801cc5e:	a902      	add	r1, sp, #8
 801cc60:	f7ed f8aa 	bl	8009db8 <f_write>
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801cc64:	4bac      	ldr	r3, [pc, #688]	; (801cf18 <SD_Witer+0x638>)
 801cc66:	2c00      	cmp	r4, #0
 801cc68:	f040 84ad 	bne.w	801d5c6 <SD_Witer+0xce6>
 801cc6c:	49ad      	ldr	r1, [pc, #692]	; (801cf24 <SD_Witer+0x644>)
 801cc6e:	2235      	movs	r2, #53	; 0x35
 801cc70:	48ab      	ldr	r0, [pc, #684]	; (801cf20 <SD_Witer+0x640>)
 801cc72:	f7ed f8a1 	bl	8009db8 <f_write>
							sprintf(measure_buff, "%d\t", lambda_d_Measure); //Lambda D
 801cc76:	4bac      	ldr	r3, [pc, #688]	; (801cf28 <SD_Witer+0x648>)
 801cc78:	49ac      	ldr	r1, [pc, #688]	; (801cf2c <SD_Witer+0x64c>)
 801cc7a:	881a      	ldrh	r2, [r3, #0]
 801cc7c:	a803      	add	r0, sp, #12
 801cc7e:	f005 fd47 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc82:	220c      	movs	r2, #12
 801cc84:	4ba4      	ldr	r3, [pc, #656]	; (801cf18 <SD_Witer+0x638>)
 801cc86:	48a6      	ldr	r0, [pc, #664]	; (801cf20 <SD_Witer+0x640>)
 801cc88:	eb0d 0102 	add.w	r1, sp, r2
 801cc8c:	f7ed f894 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
 801cc90:	2300      	movs	r3, #0
 801cc92:	9303      	str	r3, [sp, #12]
 801cc94:	9304      	str	r3, [sp, #16]
 801cc96:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801cc98:	4b9f      	ldr	r3, [pc, #636]	; (801cf18 <SD_Witer+0x638>)
 801cc9a:	2c00      	cmp	r4, #0
 801cc9c:	f040 8497 	bne.w	801d5ce <SD_Witer+0xcee>
 801cca0:	49a3      	ldr	r1, [pc, #652]	; (801cf30 <SD_Witer+0x650>)
 801cca2:	223b      	movs	r2, #59	; 0x3b
 801cca4:	489e      	ldr	r0, [pc, #632]	; (801cf20 <SD_Witer+0x640>)
 801cca6:	f7ed f887 	bl	8009db8 <f_write>
							sprintf(measure_buff, "%d\t", lambda_c_Measure); //Lambda C
 801ccaa:	4ba2      	ldr	r3, [pc, #648]	; (801cf34 <SD_Witer+0x654>)
 801ccac:	499f      	ldr	r1, [pc, #636]	; (801cf2c <SD_Witer+0x64c>)
 801ccae:	881a      	ldrh	r2, [r3, #0]
 801ccb0:	a803      	add	r0, sp, #12
 801ccb2:	f005 fd2d 	bl	8022710 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ccb6:	220c      	movs	r2, #12
 801ccb8:	4b97      	ldr	r3, [pc, #604]	; (801cf18 <SD_Witer+0x638>)
 801ccba:	4899      	ldr	r0, [pc, #612]	; (801cf20 <SD_Witer+0x640>)
 801ccbc:	eb0d 0102 	add.w	r1, sp, r2
 801ccc0:	f7ed f87a 	bl	8009db8 <f_write>
							memset(measure_buff, 0, 12);
 801ccc4:	2300      	movs	r3, #0
						
							if(Memory_Data_satus == 0x01)
 801ccc6:	f1b8 0f01 	cmp.w	r8, #1
							memset(measure_buff, 0, 12);
 801ccca:	9303      	str	r3, [sp, #12]
 801cccc:	9304      	str	r3, [sp, #16]
 801ccce:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801ccd0:	4b91      	ldr	r3, [pc, #580]	; (801cf18 <SD_Witer+0x638>)
							if(Memory_Data_satus == 0x01)
 801ccd2:	f040 8484 	bne.w	801d5de <SD_Witer+0xcfe>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801ccd6:	2c00      	cmp	r4, #0
 801ccd8:	f040 847d 	bne.w	801d5d6 <SD_Witer+0xcf6>
 801ccdc:	4996      	ldr	r1, [pc, #600]	; (801cf38 <SD_Witer+0x658>)
 801ccde:	2224      	movs	r2, #36	; 0x24
 801cce0:	488f      	ldr	r0, [pc, #572]	; (801cf20 <SD_Witer+0x640>)
 801cce2:	f7ed f869 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%d\t", delta_Eab_Measure); //Delta E
 801cce6:	4b95      	ldr	r3, [pc, #596]	; (801cf3c <SD_Witer+0x65c>)
 801cce8:	4990      	ldr	r1, [pc, #576]	; (801cf2c <SD_Witer+0x64c>)
 801ccea:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ccee:	a803      	add	r0, sp, #12
 801ccf0:	f005 fd0e 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ccf4:	220c      	movs	r2, #12
 801ccf6:	4b88      	ldr	r3, [pc, #544]	; (801cf18 <SD_Witer+0x638>)
 801ccf8:	4889      	ldr	r0, [pc, #548]	; (801cf20 <SD_Witer+0x640>)
 801ccfa:	eb0d 0102 	add.w	r1, sp, r2
 801ccfe:	f7ed f85b 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801cd02:	2300      	movs	r3, #0
 801cd04:	9303      	str	r3, [sp, #12]
 801cd06:	9304      	str	r3, [sp, #16]
 801cd08:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
								f_write(&MyFile, "NAN", 3, &byteswritten);
							}
							
							SDWr_Status_bar = 0.8;
 801cd0a:	a181      	add	r1, pc, #516	; (adr r1, 801cf10 <SD_Witer+0x630>)
 801cd0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd10:	4b8b      	ldr	r3, [pc, #556]	; (801cf40 <SD_Witer+0x660>)
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801cd12:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801cf44 <SD_Witer+0x664>
 801cd16:	f8df 8278 	ldr.w	r8, [pc, #632]	; 801cf90 <SD_Witer+0x6b0>
							SDWr_Status_bar = 0.8;
 801cd1a:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801cd1e:	f44f 718c 	mov.w	r1, #280	; 0x118
 801cd22:	2055      	movs	r0, #85	; 0x55
 801cd24:	f7f9 f83e 	bl	8015da4 <GUI_Bar_Measure>
							if(Mode_EL == 0x01) //E mode
 801cd28:	2f01      	cmp	r7, #1
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801cd2a:	4b7b      	ldr	r3, [pc, #492]	; (801cf18 <SD_Witer+0x638>)
							if(Mode_EL == 0x01) //E mode
 801cd2c:	f040 847d 	bne.w	801d62a <SD_Witer+0xd4a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801cd30:	2c00      	cmp	r4, #0
 801cd32:	f040 8465 	bne.w	801d600 <SD_Witer+0xd20>
 801cd36:	4984      	ldr	r1, [pc, #528]	; (801cf48 <SD_Witer+0x668>)
 801cd38:	2263      	movs	r2, #99	; 0x63
 801cd3a:	4879      	ldr	r0, [pc, #484]	; (801cf20 <SD_Witer+0x640>)
 801cd3c:	4f83      	ldr	r7, [pc, #524]	; (801cf4c <SD_Witer+0x66c>)
 801cd3e:	f8df b254 	ldr.w	fp, [pc, #596]	; 801cf94 <SD_Witer+0x6b4>
								
								for(uint16_t i=0; i < 1024; i++)
								{
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd42:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801cf18 <SD_Witer+0x638>
 801cd46:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801cf20 <SD_Witer+0x640>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801cd4a:	f7ed f835 	bl	8009db8 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
 801cd4e:	f857 0b04 	ldr.w	r0, [r7], #4
 801cd52:	f7e3 fc11 	bl	8000578 <__aeabi_f2d>
 801cd56:	4602      	mov	r2, r0
 801cd58:	460b      	mov	r3, r1
 801cd5a:	a803      	add	r0, sp, #12
 801cd5c:	497c      	ldr	r1, [pc, #496]	; (801cf50 <SD_Witer+0x670>)
 801cd5e:	f005 fcd7 	bl	8022710 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd62:	220c      	movs	r2, #12
 801cd64:	4653      	mov	r3, sl
 801cd66:	eb0d 0102 	add.w	r1, sp, r2
 801cd6a:	4648      	mov	r0, r9
 801cd6c:	f7ed f824 	bl	8009db8 <f_write>
									memset(measure_buff, 0, 12);
 801cd70:	2500      	movs	r5, #0
									
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801cd72:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801cd76:	9503      	str	r5, [sp, #12]
 801cd78:	9504      	str	r5, [sp, #16]
 801cd7a:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801cd7c:	f7e3 fbfc 	bl	8000578 <__aeabi_f2d>
 801cd80:	4602      	mov	r2, r0
 801cd82:	460b      	mov	r3, r1
 801cd84:	a803      	add	r0, sp, #12
 801cd86:	4973      	ldr	r1, [pc, #460]	; (801cf54 <SD_Witer+0x674>)
 801cd88:	f005 fcc2 	bl	8022710 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd8c:	220c      	movs	r2, #12
 801cd8e:	4653      	mov	r3, sl
 801cd90:	eb0d 0102 	add.w	r1, sp, r2
 801cd94:	4648      	mov	r0, r9
 801cd96:	f7ed f80f 	bl	8009db8 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801cd9a:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801cd9c:	9503      	str	r5, [sp, #12]
 801cd9e:	9504      	str	r5, [sp, #16]
 801cda0:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801cda2:	d1d4      	bne.n	801cd4e <SD_Witer+0x46e>
								}
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801cda4:	4b5c      	ldr	r3, [pc, #368]	; (801cf18 <SD_Witer+0x638>)
 801cda6:	2c00      	cmp	r4, #0
 801cda8:	f040 842e 	bne.w	801d608 <SD_Witer+0xd28>
 801cdac:	496a      	ldr	r1, [pc, #424]	; (801cf58 <SD_Witer+0x678>)
 801cdae:	2224      	movs	r2, #36	; 0x24
 801cdb0:	485b      	ldr	r0, [pc, #364]	; (801cf20 <SD_Witer+0x640>)
 801cdb2:	f7ed f801 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f",  E_day); //Ee
 801cdb6:	4b69      	ldr	r3, [pc, #420]	; (801cf5c <SD_Witer+0x67c>)
 801cdb8:	6818      	ldr	r0, [r3, #0]
 801cdba:	f7e3 fbdd 	bl	8000578 <__aeabi_f2d>
 801cdbe:	4602      	mov	r2, r0
 801cdc0:	460b      	mov	r3, r1
 801cdc2:	a803      	add	r0, sp, #12
 801cdc4:	4966      	ldr	r1, [pc, #408]	; (801cf60 <SD_Witer+0x680>)
 801cdc6:	f005 fca3 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cdca:	220c      	movs	r2, #12
 801cdcc:	4b52      	ldr	r3, [pc, #328]	; (801cf18 <SD_Witer+0x638>)
 801cdce:	4854      	ldr	r0, [pc, #336]	; (801cf20 <SD_Witer+0x640>)
 801cdd0:	eb0d 0102 	add.w	r1, sp, r2
 801cdd4:	f7ec fff0 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801cdd8:	2300      	movs	r3, #0
 801cdda:	9303      	str	r3, [sp, #12]
 801cddc:	9304      	str	r3, [sp, #16]
 801cdde:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801cde0:	4b4d      	ldr	r3, [pc, #308]	; (801cf18 <SD_Witer+0x638>)
 801cde2:	2c00      	cmp	r4, #0
 801cde4:	f040 8414 	bne.w	801d610 <SD_Witer+0xd30>
 801cde8:	495e      	ldr	r1, [pc, #376]	; (801cf64 <SD_Witer+0x684>)
 801cdea:	2221      	movs	r2, #33	; 0x21
 801cdec:	484c      	ldr	r0, [pc, #304]	; (801cf20 <SD_Witer+0x640>)
 801cdee:	f7ec ffe3 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.1f",  E_day_Wt); //Eu
 801cdf2:	4b5d      	ldr	r3, [pc, #372]	; (801cf68 <SD_Witer+0x688>)
 801cdf4:	6818      	ldr	r0, [r3, #0]
 801cdf6:	f7e3 fbbf 	bl	8000578 <__aeabi_f2d>
 801cdfa:	4602      	mov	r2, r0
 801cdfc:	460b      	mov	r3, r1
 801cdfe:	a803      	add	r0, sp, #12
 801ce00:	495a      	ldr	r1, [pc, #360]	; (801cf6c <SD_Witer+0x68c>)
 801ce02:	f005 fc85 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ce06:	220c      	movs	r2, #12
 801ce08:	4b43      	ldr	r3, [pc, #268]	; (801cf18 <SD_Witer+0x638>)
 801ce0a:	4845      	ldr	r0, [pc, #276]	; (801cf20 <SD_Witer+0x640>)
 801ce0c:	eb0d 0102 	add.w	r1, sp, r2
 801ce10:	f7ec ffd2 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801ce14:	2300      	movs	r3, #0
 801ce16:	9303      	str	r3, [sp, #12]
 801ce18:	9304      	str	r3, [sp, #16]
 801ce1a:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801ce1c:	4b3e      	ldr	r3, [pc, #248]	; (801cf18 <SD_Witer+0x638>)
 801ce1e:	2c00      	cmp	r4, #0
 801ce20:	f040 83fa 	bne.w	801d618 <SD_Witer+0xd38>
 801ce24:	4952      	ldr	r1, [pc, #328]	; (801cf70 <SD_Witer+0x690>)
 801ce26:	2223      	movs	r2, #35	; 0x23
 801ce28:	483d      	ldr	r0, [pc, #244]	; (801cf20 <SD_Witer+0x640>)
 801ce2a:	f7ec ffc5 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPFD
 801ce2e:	4b51      	ldr	r3, [pc, #324]	; (801cf74 <SD_Witer+0x694>)
 801ce30:	6818      	ldr	r0, [r3, #0]
 801ce32:	f7e3 fba1 	bl	8000578 <__aeabi_f2d>
 801ce36:	4602      	mov	r2, r0
 801ce38:	460b      	mov	r3, r1
 801ce3a:	a803      	add	r0, sp, #12
 801ce3c:	4948      	ldr	r1, [pc, #288]	; (801cf60 <SD_Witer+0x680>)
 801ce3e:	f005 fc67 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ce42:	220c      	movs	r2, #12
 801ce44:	4b34      	ldr	r3, [pc, #208]	; (801cf18 <SD_Witer+0x638>)
 801ce46:	4836      	ldr	r0, [pc, #216]	; (801cf20 <SD_Witer+0x640>)
 801ce48:	eb0d 0102 	add.w	r1, sp, r2
 801ce4c:	f7ec ffb4 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801ce50:	2300      	movs	r3, #0
 801ce52:	9303      	str	r3, [sp, #12]
 801ce54:	9304      	str	r3, [sp, #16]
 801ce56:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801ce58:	4b2f      	ldr	r3, [pc, #188]	; (801cf18 <SD_Witer+0x638>)
 801ce5a:	2c00      	cmp	r4, #0
 801ce5c:	f040 83df 	bne.w	801d61e <SD_Witer+0xd3e>
 801ce60:	4945      	ldr	r1, [pc, #276]	; (801cf78 <SD_Witer+0x698>)
 801ce62:	2239      	movs	r2, #57	; 0x39
 801ce64:	482e      	ldr	r0, [pc, #184]	; (801cf20 <SD_Witer+0x640>)
 801ce66:	f7ec ffa7 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPFD B
 801ce6a:	4b44      	ldr	r3, [pc, #272]	; (801cf7c <SD_Witer+0x69c>)
 801ce6c:	6818      	ldr	r0, [r3, #0]
 801ce6e:	f7e3 fb83 	bl	8000578 <__aeabi_f2d>
 801ce72:	4602      	mov	r2, r0
 801ce74:	460b      	mov	r3, r1
 801ce76:	a803      	add	r0, sp, #12
 801ce78:	4941      	ldr	r1, [pc, #260]	; (801cf80 <SD_Witer+0x6a0>)
 801ce7a:	f005 fc49 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ce7e:	220c      	movs	r2, #12
 801ce80:	eb0d 0102 	add.w	r1, sp, r2
 801ce84:	4b24      	ldr	r3, [pc, #144]	; (801cf18 <SD_Witer+0x638>)
 801ce86:	4826      	ldr	r0, [pc, #152]	; (801cf20 <SD_Witer+0x640>)
 801ce88:	f7ec ff96 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801ce8c:	4b3d      	ldr	r3, [pc, #244]	; (801cf84 <SD_Witer+0x6a4>)
								memset(measure_buff, 0, 12);
 801ce8e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801ce90:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801ce92:	9503      	str	r5, [sp, #12]
 801ce94:	9504      	str	r5, [sp, #16]
 801ce96:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801ce98:	f7e3 fb6e 	bl	8000578 <__aeabi_f2d>
 801ce9c:	4602      	mov	r2, r0
 801ce9e:	460b      	mov	r3, r1
 801cea0:	a803      	add	r0, sp, #12
 801cea2:	4937      	ldr	r1, [pc, #220]	; (801cf80 <SD_Witer+0x6a0>)
 801cea4:	f005 fc34 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cea8:	220c      	movs	r2, #12
 801ceaa:	eb0d 0102 	add.w	r1, sp, r2
 801ceae:	4b1a      	ldr	r3, [pc, #104]	; (801cf18 <SD_Witer+0x638>)
 801ceb0:	481b      	ldr	r0, [pc, #108]	; (801cf20 <SD_Witer+0x640>)
 801ceb2:	f7ec ff81 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801ceb6:	4b34      	ldr	r3, [pc, #208]	; (801cf88 <SD_Witer+0x6a8>)
								memset(measure_buff, 0, 12);
 801ceb8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801ceba:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801cebc:	9504      	str	r5, [sp, #16]
 801cebe:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801cec0:	f7e3 fb5a 	bl	8000578 <__aeabi_f2d>
 801cec4:	4602      	mov	r2, r0
 801cec6:	460b      	mov	r3, r1
 801cec8:	a803      	add	r0, sp, #12
 801ceca:	492d      	ldr	r1, [pc, #180]	; (801cf80 <SD_Witer+0x6a0>)
 801cecc:	f005 fc20 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ced0:	220c      	movs	r2, #12
 801ced2:	eb0d 0102 	add.w	r1, sp, r2
 801ced6:	4b10      	ldr	r3, [pc, #64]	; (801cf18 <SD_Witer+0x638>)
 801ced8:	4811      	ldr	r0, [pc, #68]	; (801cf20 <SD_Witer+0x640>)
 801ceda:	f7ec ff6d 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801cede:	4b2b      	ldr	r3, [pc, #172]	; (801cf8c <SD_Witer+0x6ac>)
								memset(measure_buff, 0, 12);
 801cee0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801cee2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801cee4:	9504      	str	r5, [sp, #16]
 801cee6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801cee8:	f7e3 fb46 	bl	8000578 <__aeabi_f2d>
 801ceec:	4602      	mov	r2, r0
 801ceee:	460b      	mov	r3, r1
 801cef0:	a803      	add	r0, sp, #12
 801cef2:	4923      	ldr	r1, [pc, #140]	; (801cf80 <SD_Witer+0x6a0>)
 801cef4:	f005 fc0c 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cef8:	220c      	movs	r2, #12
 801cefa:	4b07      	ldr	r3, [pc, #28]	; (801cf18 <SD_Witer+0x638>)
 801cefc:	4808      	ldr	r0, [pc, #32]	; (801cf20 <SD_Witer+0x640>)
 801cefe:	eb0d 0102 	add.w	r1, sp, r2
 801cf02:	f7ec ff59 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801cf06:	9503      	str	r5, [sp, #12]
 801cf08:	9504      	str	r5, [sp, #16]
 801cf0a:	9505      	str	r5, [sp, #20]
 801cf0c:	e044      	b.n	801cf98 <SD_Witer+0x6b8>
 801cf0e:	bf00      	nop
 801cf10:	9999999a 	.word	0x9999999a
 801cf14:	3fe99999 	.word	0x3fe99999
 801cf18:	2008ce60 	.word	0x2008ce60
 801cf1c:	200008e0 	.word	0x200008e0
 801cf20:	2008deb8 	.word	0x2008deb8
 801cf24:	20000a08 	.word	0x20000a08
 801cf28:	200913ec 	.word	0x200913ec
 801cf2c:	080341cf 	.word	0x080341cf
 801cf30:	200009b3 	.word	0x200009b3
 801cf34:	200912ac 	.word	0x200912ac
 801cf38:	20000970 	.word	0x20000970
 801cf3c:	2008c31e 	.word	0x2008c31e
 801cf40:	200052d0 	.word	0x200052d0
 801cf44:	3f4ccccd 	.word	0x3f4ccccd
 801cf48:	20000568 	.word	0x20000568
 801cf4c:	20007de4 	.word	0x20007de4
 801cf50:	080341bc 	.word	0x080341bc
 801cf54:	080341c1 	.word	0x080341c1
 801cf58:	2000051f 	.word	0x2000051f
 801cf5c:	20091514 	.word	0x20091514
 801cf60:	08034173 	.word	0x08034173
 801cf64:	200005dd 	.word	0x200005dd
 801cf68:	20090f80 	.word	0x20090f80
 801cf6c:	0803416b 	.word	0x0803416b
 801cf70:	20000811 	.word	0x20000811
 801cf74:	20090f88 	.word	0x20090f88
 801cf78:	200007c5 	.word	0x200007c5
 801cf7c:	2009106c 	.word	0x2009106c
 801cf80:	080341c8 	.word	0x080341c8
 801cf84:	200913f0 	.word	0x200913f0
 801cf88:	2009132c 	.word	0x2009132c
 801cf8c:	20090f84 	.word	0x20090f84
 801cf90:	20008de4 	.word	0x20008de4
 801cf94:	200501ec 	.word	0x200501ec
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801cf98:	4baf      	ldr	r3, [pc, #700]	; (801d258 <SD_Witer+0x978>)
 801cf9a:	2c00      	cmp	r4, #0
 801cf9c:	f040 8342 	bne.w	801d624 <SD_Witer+0xd44>
 801cfa0:	49ae      	ldr	r1, [pc, #696]	; (801d25c <SD_Witer+0x97c>)
 801cfa2:	2213      	movs	r2, #19
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801cfa4:	48ae      	ldr	r0, [pc, #696]	; (801d260 <SD_Witer+0x980>)
 801cfa6:	f7ec ff07 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f\t", ELb_Measure); //Lb
 801cfaa:	4bae      	ldr	r3, [pc, #696]	; (801d264 <SD_Witer+0x984>)
 801cfac:	6818      	ldr	r0, [r3, #0]
 801cfae:	f7e3 fae3 	bl	8000578 <__aeabi_f2d>
 801cfb2:	4602      	mov	r2, r0
 801cfb4:	460b      	mov	r3, r1
 801cfb6:	a803      	add	r0, sp, #12
 801cfb8:	49ab      	ldr	r1, [pc, #684]	; (801d268 <SD_Witer+0x988>)
 801cfba:	f005 fba9 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cfbe:	220c      	movs	r2, #12
 801cfc0:	eb0d 0102 	add.w	r1, sp, r2
 801cfc4:	4ba4      	ldr	r3, [pc, #656]	; (801d258 <SD_Witer+0x978>)
 801cfc6:	48a6      	ldr	r0, [pc, #664]	; (801d260 <SD_Witer+0x980>)
 801cfc8:	f7ec fef6 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);

								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801cfcc:	4ba7      	ldr	r3, [pc, #668]	; (801d26c <SD_Witer+0x98c>)
								memset(measure_buff, 0, 12);
 801cfce:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801cfd0:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801cfd2:	9503      	str	r5, [sp, #12]
 801cfd4:	9504      	str	r5, [sp, #16]
 801cfd6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801cfd8:	f7e3 face 	bl	8000578 <__aeabi_f2d>
 801cfdc:	4602      	mov	r2, r0
 801cfde:	460b      	mov	r3, r1
 801cfe0:	a803      	add	r0, sp, #12
 801cfe2:	49a3      	ldr	r1, [pc, #652]	; (801d270 <SD_Witer+0x990>)
 801cfe4:	f005 fb94 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cfe8:	220c      	movs	r2, #12
 801cfea:	eb0d 0102 	add.w	r1, sp, r2
 801cfee:	4b9a      	ldr	r3, [pc, #616]	; (801d258 <SD_Witer+0x978>)
 801cff0:	489b      	ldr	r0, [pc, #620]	; (801d260 <SD_Witer+0x980>)
 801cff2:	f7ec fee1 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								
								SDWr_Status_bar = 0.9;
 801cff6:	a196      	add	r1, pc, #600	; (adr r1, 801d250 <SD_Witer+0x970>)
 801cff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cffc:	4b9d      	ldr	r3, [pc, #628]	; (801d274 <SD_Witer+0x994>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801cffe:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801d278 <SD_Witer+0x998>
								memset(measure_buff, 0, 12);
 801d002:	9503      	str	r5, [sp, #12]
								SDWr_Status_bar = 0.9;
 801d004:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801d008:	f44f 718c 	mov.w	r1, #280	; 0x118
 801d00c:	2055      	movs	r0, #85	; 0x55
								memset(measure_buff, 0, 12);
 801d00e:	9504      	str	r5, [sp, #16]
 801d010:	9505      	str	r5, [sp, #20]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801d012:	f7f8 fec7 	bl	8015da4 <GUI_Bar_Measure>
						
							}
							if(CRICQS_done == 0x01)
 801d016:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801d01a:	2b01      	cmp	r3, #1
 801d01c:	f040 824d 	bne.w	801d4ba <SD_Witer+0xbda>
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801d020:	4b8d      	ldr	r3, [pc, #564]	; (801d258 <SD_Witer+0x978>)
 801d022:	2c00      	cmp	r4, #0
 801d024:	f040 8407 	bne.w	801d836 <SD_Witer+0xf56>
 801d028:	4994      	ldr	r1, [pc, #592]	; (801d27c <SD_Witer+0x99c>)
 801d02a:	227d      	movs	r2, #125	; 0x7d
 801d02c:	488c      	ldr	r0, [pc, #560]	; (801d260 <SD_Witer+0x980>)
 801d02e:	f7ec fec3 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%d\t", 151); //Ra
 801d032:	2297      	movs	r2, #151	; 0x97
 801d034:	4992      	ldr	r1, [pc, #584]	; (801d280 <SD_Witer+0x9a0>)
 801d036:	a803      	add	r0, sp, #12
 801d038:	f005 fb6a 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d03c:	220c      	movs	r2, #12
 801d03e:	4b86      	ldr	r3, [pc, #536]	; (801d258 <SD_Witer+0x978>)
 801d040:	4887      	ldr	r0, [pc, #540]	; (801d260 <SD_Witer+0x980>)
 801d042:	eb0d 0102 	add.w	r1, sp, r2
								memset(measure_buff, 0, 12);
 801d046:	2500      	movs	r5, #0
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d048:	f7ec feb6 	bl	8009db8 <f_write>
								
								sprintf(measure_buff, "%d", 231); //Rall
 801d04c:	22e7      	movs	r2, #231	; 0xe7
 801d04e:	498d      	ldr	r1, [pc, #564]	; (801d284 <SD_Witer+0x9a4>)
								memset(measure_buff, 0, 12);
 801d050:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d", 231); //Rall
 801d052:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d054:	9504      	str	r5, [sp, #16]
 801d056:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d", 231); //Rall
 801d058:	f005 fb5a 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d05c:	220c      	movs	r2, #12
 801d05e:	4b7e      	ldr	r3, [pc, #504]	; (801d258 <SD_Witer+0x978>)
 801d060:	487f      	ldr	r0, [pc, #508]	; (801d260 <SD_Witer+0x980>)
 801d062:	eb0d 0102 	add.w	r1, sp, r2
 801d066:	f7ec fea7 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801d06a:	220d      	movs	r2, #13
 801d06c:	4986      	ldr	r1, [pc, #536]	; (801d288 <SD_Witer+0x9a8>)
								memset(measure_buff, 0, 12);
 801d06e:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801d070:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d072:	9504      	str	r5, [sp, #16]
 801d074:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801d076:	f005 fb4b 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d07a:	220c      	movs	r2, #12
 801d07c:	4b76      	ldr	r3, [pc, #472]	; (801d258 <SD_Witer+0x978>)
 801d07e:	4878      	ldr	r0, [pc, #480]	; (801d260 <SD_Witer+0x980>)
 801d080:	eb0d 0102 	add.w	r1, sp, r2
 801d084:	f7ec fe98 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 29); //R2
 801d088:	221d      	movs	r2, #29
 801d08a:	497d      	ldr	r1, [pc, #500]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d08c:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 29); //R2
 801d08e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d090:	9504      	str	r5, [sp, #16]
 801d092:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 29); //R2
 801d094:	f005 fb3c 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d098:	220c      	movs	r2, #12
 801d09a:	4b6f      	ldr	r3, [pc, #444]	; (801d258 <SD_Witer+0x978>)
 801d09c:	4870      	ldr	r0, [pc, #448]	; (801d260 <SD_Witer+0x980>)
 801d09e:	eb0d 0102 	add.w	r1, sp, r2
 801d0a2:	f7ec fe89 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 49); //R3
 801d0a6:	2231      	movs	r2, #49	; 0x31
 801d0a8:	4975      	ldr	r1, [pc, #468]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d0aa:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 49); //R3
 801d0ac:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d0ae:	9504      	str	r5, [sp, #16]
 801d0b0:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 49); //R3
 801d0b2:	f005 fb2d 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d0b6:	220c      	movs	r2, #12
 801d0b8:	4b67      	ldr	r3, [pc, #412]	; (801d258 <SD_Witer+0x978>)
 801d0ba:	4869      	ldr	r0, [pc, #420]	; (801d260 <SD_Witer+0x980>)
 801d0bc:	eb0d 0102 	add.w	r1, sp, r2
 801d0c0:	f7ec fe7a 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 44); //R4
 801d0c4:	222c      	movs	r2, #44	; 0x2c
 801d0c6:	496e      	ldr	r1, [pc, #440]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d0c8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 44); //R4
 801d0ca:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d0cc:	9504      	str	r5, [sp, #16]
 801d0ce:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 44); //R4
 801d0d0:	f005 fb1e 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d0d4:	220c      	movs	r2, #12
 801d0d6:	4b60      	ldr	r3, [pc, #384]	; (801d258 <SD_Witer+0x978>)
 801d0d8:	4861      	ldr	r0, [pc, #388]	; (801d260 <SD_Witer+0x980>)
 801d0da:	eb0d 0102 	add.w	r1, sp, r2
 801d0de:	f7ec fe6b 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 55); //R5
 801d0e2:	2237      	movs	r2, #55	; 0x37
 801d0e4:	4966      	ldr	r1, [pc, #408]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d0e6:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 55); //R5
 801d0e8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d0ea:	9504      	str	r5, [sp, #16]
 801d0ec:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 55); //R5
 801d0ee:	f005 fb0f 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d0f2:	220c      	movs	r2, #12
 801d0f4:	4b58      	ldr	r3, [pc, #352]	; (801d258 <SD_Witer+0x978>)
 801d0f6:	485a      	ldr	r0, [pc, #360]	; (801d260 <SD_Witer+0x980>)
 801d0f8:	eb0d 0102 	add.w	r1, sp, r2
 801d0fc:	f7ec fe5c 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 68); //R6
 801d100:	2244      	movs	r2, #68	; 0x44
 801d102:	495f      	ldr	r1, [pc, #380]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d104:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 68); //R6
 801d106:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d108:	9504      	str	r5, [sp, #16]
 801d10a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 68); //R6
 801d10c:	f005 fb00 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d110:	220c      	movs	r2, #12
 801d112:	4b51      	ldr	r3, [pc, #324]	; (801d258 <SD_Witer+0x978>)
 801d114:	4852      	ldr	r0, [pc, #328]	; (801d260 <SD_Witer+0x980>)
 801d116:	eb0d 0102 	add.w	r1, sp, r2
 801d11a:	f7ec fe4d 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",79); //R7
 801d11e:	224f      	movs	r2, #79	; 0x4f
 801d120:	4957      	ldr	r1, [pc, #348]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d122:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",79); //R7
 801d124:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d126:	9504      	str	r5, [sp, #16]
 801d128:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",79); //R7
 801d12a:	f005 faf1 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d12e:	220c      	movs	r2, #12
 801d130:	4b49      	ldr	r3, [pc, #292]	; (801d258 <SD_Witer+0x978>)
 801d132:	484b      	ldr	r0, [pc, #300]	; (801d260 <SD_Witer+0x980>)
 801d134:	eb0d 0102 	add.w	r1, sp, r2
 801d138:	f7ec fe3e 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",88); //R8
 801d13c:	2258      	movs	r2, #88	; 0x58
 801d13e:	4950      	ldr	r1, [pc, #320]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d140:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",88); //R8
 801d142:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d144:	9504      	str	r5, [sp, #16]
 801d146:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",88); //R8
 801d148:	f005 fae2 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d14c:	220c      	movs	r2, #12
 801d14e:	4b42      	ldr	r3, [pc, #264]	; (801d258 <SD_Witer+0x978>)
 801d150:	4843      	ldr	r0, [pc, #268]	; (801d260 <SD_Witer+0x980>)
 801d152:	eb0d 0102 	add.w	r1, sp, r2
 801d156:	f7ec fe2f 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",98); //R9
 801d15a:	2262      	movs	r2, #98	; 0x62
 801d15c:	4948      	ldr	r1, [pc, #288]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d15e:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",98); //R9
 801d160:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d162:	9504      	str	r5, [sp, #16]
 801d164:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",98); //R9
 801d166:	f005 fad3 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d16a:	220c      	movs	r2, #12
 801d16c:	4b3a      	ldr	r3, [pc, #232]	; (801d258 <SD_Witer+0x978>)
 801d16e:	483c      	ldr	r0, [pc, #240]	; (801d260 <SD_Witer+0x980>)
 801d170:	eb0d 0102 	add.w	r1, sp, r2
 801d174:	f7ec fe20 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 105); //R10
 801d178:	2269      	movs	r2, #105	; 0x69
 801d17a:	4941      	ldr	r1, [pc, #260]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d17c:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 105); //R10
 801d17e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d180:	9504      	str	r5, [sp, #16]
 801d182:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 105); //R10
 801d184:	f005 fac4 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d188:	220c      	movs	r2, #12
 801d18a:	4b33      	ldr	r3, [pc, #204]	; (801d258 <SD_Witer+0x978>)
 801d18c:	4834      	ldr	r0, [pc, #208]	; (801d260 <SD_Witer+0x980>)
 801d18e:	eb0d 0102 	add.w	r1, sp, r2
 801d192:	f7ec fe11 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 112); //R11
 801d196:	2270      	movs	r2, #112	; 0x70
 801d198:	4939      	ldr	r1, [pc, #228]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d19a:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 112); //R11
 801d19c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d19e:	9504      	str	r5, [sp, #16]
 801d1a0:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 112); //R11
 801d1a2:	f005 fab5 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d1a6:	220c      	movs	r2, #12
 801d1a8:	4b2b      	ldr	r3, [pc, #172]	; (801d258 <SD_Witer+0x978>)
 801d1aa:	482d      	ldr	r0, [pc, #180]	; (801d260 <SD_Witer+0x980>)
 801d1ac:	eb0d 0102 	add.w	r1, sp, r2
 801d1b0:	f7ec fe02 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 127); //R12
 801d1b4:	227f      	movs	r2, #127	; 0x7f
 801d1b6:	4932      	ldr	r1, [pc, #200]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d1b8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 127); //R12
 801d1ba:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d1bc:	9504      	str	r5, [sp, #16]
 801d1be:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 127); //R12
 801d1c0:	f005 faa6 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d1c4:	220c      	movs	r2, #12
 801d1c6:	4b24      	ldr	r3, [pc, #144]	; (801d258 <SD_Witer+0x978>)
 801d1c8:	4825      	ldr	r0, [pc, #148]	; (801d260 <SD_Witer+0x980>)
 801d1ca:	eb0d 0102 	add.w	r1, sp, r2
 801d1ce:	f7ec fdf3 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 133); //R13
 801d1d2:	2285      	movs	r2, #133	; 0x85
 801d1d4:	492a      	ldr	r1, [pc, #168]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d1d6:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 133); //R13
 801d1d8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d1da:	9504      	str	r5, [sp, #16]
 801d1dc:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 133); //R13
 801d1de:	f005 fa97 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d1e2:	220c      	movs	r2, #12
 801d1e4:	4b1c      	ldr	r3, [pc, #112]	; (801d258 <SD_Witer+0x978>)
 801d1e6:	481e      	ldr	r0, [pc, #120]	; (801d260 <SD_Witer+0x980>)
 801d1e8:	eb0d 0102 	add.w	r1, sp, r2
 801d1ec:	f7ec fde4 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 148); //R14
 801d1f0:	2294      	movs	r2, #148	; 0x94
 801d1f2:	4923      	ldr	r1, [pc, #140]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d1f4:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 148); //R14
 801d1f6:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d1f8:	9504      	str	r5, [sp, #16]
 801d1fa:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 148); //R14
 801d1fc:	f005 fa88 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d200:	220c      	movs	r2, #12
 801d202:	4b15      	ldr	r3, [pc, #84]	; (801d258 <SD_Witer+0x978>)
 801d204:	4816      	ldr	r0, [pc, #88]	; (801d260 <SD_Witer+0x980>)
 801d206:	eb0d 0102 	add.w	r1, sp, r2
 801d20a:	f7ec fdd5 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 152); //R15
 801d20e:	2298      	movs	r2, #152	; 0x98
 801d210:	491b      	ldr	r1, [pc, #108]	; (801d280 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801d212:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 152); //R15
 801d214:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d216:	9504      	str	r5, [sp, #16]
 801d218:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 152); //R15
 801d21a:	f005 fa79 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d21e:	220c      	movs	r2, #12
 801d220:	4b0d      	ldr	r3, [pc, #52]	; (801d258 <SD_Witer+0x978>)
 801d222:	480f      	ldr	r0, [pc, #60]	; (801d260 <SD_Witer+0x980>)
 801d224:	eb0d 0102 	add.w	r1, sp, r2
 801d228:	f7ec fdc6 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801d22c:	9503      	str	r5, [sp, #12]
 801d22e:	9504      	str	r5, [sp, #16]
 801d230:	9505      	str	r5, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801d232:	4b09      	ldr	r3, [pc, #36]	; (801d258 <SD_Witer+0x978>)
 801d234:	2c00      	cmp	r4, #0
 801d236:	f040 8302 	bne.w	801d83e <SD_Witer+0xf5e>
 801d23a:	4914      	ldr	r1, [pc, #80]	; (801d28c <SD_Witer+0x9ac>)
 801d23c:	227f      	movs	r2, #127	; 0x7f
 801d23e:	4808      	ldr	r0, [pc, #32]	; (801d260 <SD_Witer+0x980>)
								
								sprintf(measure_buff, "%d", Qf); //Qf
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801d240:	4d13      	ldr	r5, [pc, #76]	; (801d290 <SD_Witer+0x9b0>)
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801d242:	f7ec fdb9 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%d\t", Qa); //Qa
 801d246:	4b13      	ldr	r3, [pc, #76]	; (801d294 <SD_Witer+0x9b4>)
 801d248:	e026      	b.n	801d298 <SD_Witer+0x9b8>
 801d24a:	bf00      	nop
 801d24c:	f3af 8000 	nop.w
 801d250:	cccccccd 	.word	0xcccccccd
 801d254:	3feccccc 	.word	0x3feccccc
 801d258:	2008ce60 	.word	0x2008ce60
 801d25c:	200004fa 	.word	0x200004fa
 801d260:	2008deb8 	.word	0x2008deb8
 801d264:	2009150c 	.word	0x2009150c
 801d268:	080341c8 	.word	0x080341c8
 801d26c:	20091510 	.word	0x20091510
 801d270:	08034173 	.word	0x08034173
 801d274:	200052d0 	.word	0x200052d0
 801d278:	3f666666 	.word	0x3f666666
 801d27c:	200003b2 	.word	0x200003b2
 801d280:	080341cf 	.word	0x080341cf
 801d284:	08034170 	.word	0x08034170
 801d288:	080341ce 	.word	0x080341ce
 801d28c:	200002c8 	.word	0x200002c8
 801d290:	2000319c 	.word	0x2000319c
 801d294:	200031ab 	.word	0x200031ab
 801d298:	49a8      	ldr	r1, [pc, #672]	; (801d53c <SD_Witer+0xc5c>)
 801d29a:	781a      	ldrb	r2, [r3, #0]
 801d29c:	a803      	add	r0, sp, #12
 801d29e:	f005 fa37 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d2a2:	220c      	movs	r2, #12
 801d2a4:	eb0d 0102 	add.w	r1, sp, r2
 801d2a8:	4ba5      	ldr	r3, [pc, #660]	; (801d540 <SD_Witer+0xc60>)
 801d2aa:	48a6      	ldr	r0, [pc, #664]	; (801d544 <SD_Witer+0xc64>)
 801d2ac:	f7ec fd84 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801d2b0:	4ba5      	ldr	r3, [pc, #660]	; (801d548 <SD_Witer+0xc68>)
 801d2b2:	49a2      	ldr	r1, [pc, #648]	; (801d53c <SD_Witer+0xc5c>)
 801d2b4:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801d2b6:	2400      	movs	r4, #0
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801d2b8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d2ba:	9403      	str	r4, [sp, #12]
 801d2bc:	9404      	str	r4, [sp, #16]
 801d2be:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801d2c0:	f005 fa26 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d2c4:	220c      	movs	r2, #12
 801d2c6:	eb0d 0102 	add.w	r1, sp, r2
 801d2ca:	4b9d      	ldr	r3, [pc, #628]	; (801d540 <SD_Witer+0xc60>)
 801d2cc:	489d      	ldr	r0, [pc, #628]	; (801d544 <SD_Witer+0xc64>)
 801d2ce:	f7ec fd73 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%d", Qf); //Qf
 801d2d2:	4b9e      	ldr	r3, [pc, #632]	; (801d54c <SD_Witer+0xc6c>)
 801d2d4:	499e      	ldr	r1, [pc, #632]	; (801d550 <SD_Witer+0xc70>)
 801d2d6:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801d2d8:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d", Qf); //Qf
 801d2da:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d2dc:	9404      	str	r4, [sp, #16]
 801d2de:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d", Qf); //Qf
 801d2e0:	f005 fa16 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d2e4:	220c      	movs	r2, #12
 801d2e6:	4b96      	ldr	r3, [pc, #600]	; (801d540 <SD_Witer+0xc60>)
 801d2e8:	4896      	ldr	r0, [pc, #600]	; (801d544 <SD_Witer+0xc64>)
 801d2ea:	eb0d 0102 	add.w	r1, sp, r2
 801d2ee:	f7ec fd63 	bl	8009db8 <f_write>
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801d2f2:	782a      	ldrb	r2, [r5, #0]
 801d2f4:	4997      	ldr	r1, [pc, #604]	; (801d554 <SD_Witer+0xc74>)
								memset(measure_buff, 0, 12);
 801d2f6:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801d2f8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d2fa:	9404      	str	r4, [sp, #16]
 801d2fc:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801d2fe:	f005 fa07 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d302:	220c      	movs	r2, #12
 801d304:	4b8e      	ldr	r3, [pc, #568]	; (801d540 <SD_Witer+0xc60>)
 801d306:	488f      	ldr	r0, [pc, #572]	; (801d544 <SD_Witer+0xc64>)
 801d308:	eb0d 0102 	add.w	r1, sp, r2
 801d30c:	f7ec fd54 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801d310:	786a      	ldrb	r2, [r5, #1]
 801d312:	498a      	ldr	r1, [pc, #552]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d314:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801d316:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d318:	9404      	str	r4, [sp, #16]
 801d31a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801d31c:	f005 f9f8 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d320:	220c      	movs	r2, #12
 801d322:	4b87      	ldr	r3, [pc, #540]	; (801d540 <SD_Witer+0xc60>)
 801d324:	4887      	ldr	r0, [pc, #540]	; (801d544 <SD_Witer+0xc64>)
 801d326:	eb0d 0102 	add.w	r1, sp, r2
 801d32a:	f7ec fd45 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801d32e:	78aa      	ldrb	r2, [r5, #2]
 801d330:	4982      	ldr	r1, [pc, #520]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d332:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801d334:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d336:	9404      	str	r4, [sp, #16]
 801d338:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801d33a:	f005 f9e9 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d33e:	220c      	movs	r2, #12
 801d340:	4b7f      	ldr	r3, [pc, #508]	; (801d540 <SD_Witer+0xc60>)
 801d342:	4880      	ldr	r0, [pc, #512]	; (801d544 <SD_Witer+0xc64>)
 801d344:	eb0d 0102 	add.w	r1, sp, r2
 801d348:	f7ec fd36 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801d34c:	78ea      	ldrb	r2, [r5, #3]
 801d34e:	497b      	ldr	r1, [pc, #492]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d350:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801d352:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d354:	9404      	str	r4, [sp, #16]
 801d356:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801d358:	f005 f9da 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d35c:	220c      	movs	r2, #12
 801d35e:	4b78      	ldr	r3, [pc, #480]	; (801d540 <SD_Witer+0xc60>)
 801d360:	4878      	ldr	r0, [pc, #480]	; (801d544 <SD_Witer+0xc64>)
 801d362:	eb0d 0102 	add.w	r1, sp, r2
 801d366:	f7ec fd27 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801d36a:	792a      	ldrb	r2, [r5, #4]
 801d36c:	4973      	ldr	r1, [pc, #460]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d36e:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801d370:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d372:	9404      	str	r4, [sp, #16]
 801d374:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801d376:	f005 f9cb 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d37a:	220c      	movs	r2, #12
 801d37c:	4b70      	ldr	r3, [pc, #448]	; (801d540 <SD_Witer+0xc60>)
 801d37e:	4871      	ldr	r0, [pc, #452]	; (801d544 <SD_Witer+0xc64>)
 801d380:	eb0d 0102 	add.w	r1, sp, r2
 801d384:	f7ec fd18 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801d388:	796a      	ldrb	r2, [r5, #5]
 801d38a:	496c      	ldr	r1, [pc, #432]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d38c:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801d38e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d390:	9404      	str	r4, [sp, #16]
 801d392:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801d394:	f005 f9bc 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d398:	220c      	movs	r2, #12
 801d39a:	4b69      	ldr	r3, [pc, #420]	; (801d540 <SD_Witer+0xc60>)
 801d39c:	4869      	ldr	r0, [pc, #420]	; (801d544 <SD_Witer+0xc64>)
 801d39e:	eb0d 0102 	add.w	r1, sp, r2
 801d3a2:	f7ec fd09 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801d3a6:	79aa      	ldrb	r2, [r5, #6]
 801d3a8:	4964      	ldr	r1, [pc, #400]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d3aa:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801d3ac:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d3ae:	9404      	str	r4, [sp, #16]
 801d3b0:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801d3b2:	f005 f9ad 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d3b6:	220c      	movs	r2, #12
 801d3b8:	4b61      	ldr	r3, [pc, #388]	; (801d540 <SD_Witer+0xc60>)
 801d3ba:	4862      	ldr	r0, [pc, #392]	; (801d544 <SD_Witer+0xc64>)
 801d3bc:	eb0d 0102 	add.w	r1, sp, r2
 801d3c0:	f7ec fcfa 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801d3c4:	79ea      	ldrb	r2, [r5, #7]
 801d3c6:	495d      	ldr	r1, [pc, #372]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d3c8:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801d3ca:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d3cc:	9404      	str	r4, [sp, #16]
 801d3ce:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801d3d0:	f005 f99e 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d3d4:	220c      	movs	r2, #12
 801d3d6:	4b5a      	ldr	r3, [pc, #360]	; (801d540 <SD_Witer+0xc60>)
 801d3d8:	485a      	ldr	r0, [pc, #360]	; (801d544 <SD_Witer+0xc64>)
 801d3da:	eb0d 0102 	add.w	r1, sp, r2
 801d3de:	f7ec fceb 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801d3e2:	7a2a      	ldrb	r2, [r5, #8]
 801d3e4:	4955      	ldr	r1, [pc, #340]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d3e6:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801d3e8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d3ea:	9404      	str	r4, [sp, #16]
 801d3ec:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801d3ee:	f005 f98f 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d3f2:	220c      	movs	r2, #12
 801d3f4:	4b52      	ldr	r3, [pc, #328]	; (801d540 <SD_Witer+0xc60>)
 801d3f6:	4853      	ldr	r0, [pc, #332]	; (801d544 <SD_Witer+0xc64>)
 801d3f8:	eb0d 0102 	add.w	r1, sp, r2
 801d3fc:	f7ec fcdc 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801d400:	7a6a      	ldrb	r2, [r5, #9]
 801d402:	494e      	ldr	r1, [pc, #312]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d404:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801d406:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d408:	9404      	str	r4, [sp, #16]
 801d40a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801d40c:	f005 f980 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d410:	220c      	movs	r2, #12
 801d412:	4b4b      	ldr	r3, [pc, #300]	; (801d540 <SD_Witer+0xc60>)
 801d414:	484b      	ldr	r0, [pc, #300]	; (801d544 <SD_Witer+0xc64>)
 801d416:	eb0d 0102 	add.w	r1, sp, r2
 801d41a:	f7ec fccd 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801d41e:	7aaa      	ldrb	r2, [r5, #10]
 801d420:	4946      	ldr	r1, [pc, #280]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d422:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801d424:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d426:	9404      	str	r4, [sp, #16]
 801d428:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801d42a:	f005 f971 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d42e:	220c      	movs	r2, #12
 801d430:	4b43      	ldr	r3, [pc, #268]	; (801d540 <SD_Witer+0xc60>)
 801d432:	4844      	ldr	r0, [pc, #272]	; (801d544 <SD_Witer+0xc64>)
 801d434:	eb0d 0102 	add.w	r1, sp, r2
 801d438:	f7ec fcbe 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801d43c:	7aea      	ldrb	r2, [r5, #11]
 801d43e:	493f      	ldr	r1, [pc, #252]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d440:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801d442:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d444:	9404      	str	r4, [sp, #16]
 801d446:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801d448:	f005 f962 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d44c:	220c      	movs	r2, #12
 801d44e:	4b3c      	ldr	r3, [pc, #240]	; (801d540 <SD_Witer+0xc60>)
 801d450:	483c      	ldr	r0, [pc, #240]	; (801d544 <SD_Witer+0xc64>)
 801d452:	eb0d 0102 	add.w	r1, sp, r2
 801d456:	f7ec fcaf 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801d45a:	7b2a      	ldrb	r2, [r5, #12]
 801d45c:	4937      	ldr	r1, [pc, #220]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d45e:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801d460:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d462:	9404      	str	r4, [sp, #16]
 801d464:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801d466:	f005 f953 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d46a:	220c      	movs	r2, #12
 801d46c:	4b34      	ldr	r3, [pc, #208]	; (801d540 <SD_Witer+0xc60>)
 801d46e:	4835      	ldr	r0, [pc, #212]	; (801d544 <SD_Witer+0xc64>)
 801d470:	eb0d 0102 	add.w	r1, sp, r2
 801d474:	f7ec fca0 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801d478:	7b6a      	ldrb	r2, [r5, #13]
 801d47a:	4930      	ldr	r1, [pc, #192]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d47c:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801d47e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d480:	9404      	str	r4, [sp, #16]
 801d482:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801d484:	f005 f944 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d488:	220c      	movs	r2, #12
 801d48a:	4b2d      	ldr	r3, [pc, #180]	; (801d540 <SD_Witer+0xc60>)
 801d48c:	482d      	ldr	r0, [pc, #180]	; (801d544 <SD_Witer+0xc64>)
 801d48e:	eb0d 0102 	add.w	r1, sp, r2
 801d492:	f7ec fc91 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801d496:	7baa      	ldrb	r2, [r5, #14]
 801d498:	4928      	ldr	r1, [pc, #160]	; (801d53c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801d49a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801d49c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801d49e:	9404      	str	r4, [sp, #16]
 801d4a0:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801d4a2:	f005 f935 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d4a6:	220c      	movs	r2, #12
 801d4a8:	4b25      	ldr	r3, [pc, #148]	; (801d540 <SD_Witer+0xc60>)
 801d4aa:	4826      	ldr	r0, [pc, #152]	; (801d544 <SD_Witer+0xc64>)
 801d4ac:	eb0d 0102 	add.w	r1, sp, r2
 801d4b0:	f7ec fc82 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801d4b4:	9403      	str	r4, [sp, #12]
 801d4b6:	9404      	str	r4, [sp, #16]
 801d4b8:	9405      	str	r4, [sp, #20]
							}
					}
				}
				
			
				f_close(&MyFile);
 801d4ba:	4822      	ldr	r0, [pc, #136]	; (801d544 <SD_Witer+0xc64>)
 801d4bc:	f7ec fde0 	bl	800a080 <f_close>
				memset(buffer_sd, 0, 11);
 801d4c0:	2200      	movs	r2, #0
				
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801d4c2:	4925      	ldr	r1, [pc, #148]	; (801d558 <SD_Witer+0xc78>)
 801d4c4:	4825      	ldr	r0, [pc, #148]	; (801d55c <SD_Witer+0xc7c>)
				memset(buffer_sd, 0, 11);
 801d4c6:	6072      	str	r2, [r6, #4]
 801d4c8:	6032      	str	r2, [r6, #0]
 801d4ca:	f8c6 2007 	str.w	r2, [r6, #7]
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801d4ce:	f7ec faf7 	bl	8009ac0 <f_mount>
 801d4d2:	4b23      	ldr	r3, [pc, #140]	; (801d560 <SD_Witer+0xc80>)
				SDWr_Status_bar = 1.0;
 801d4d4:	4923      	ldr	r1, [pc, #140]	; (801d564 <SD_Witer+0xc84>)
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801d4d6:	7018      	strb	r0, [r3, #0]
				SDWr_Status_bar = 1.0;
 801d4d8:	4b23      	ldr	r3, [pc, #140]	; (801d568 <SD_Witer+0xc88>)
 801d4da:	2000      	movs	r0, #0
 801d4dc:	e9c3 0100 	strd	r0, r1, [r3]
				GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801d4e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d4e4:	f44f 718c 	mov.w	r1, #280	; 0x118
 801d4e8:	2055      	movs	r0, #85	; 0x55
 801d4ea:	f7f8 fc5b 	bl	8015da4 <GUI_Bar_Measure>
	}
 801d4ee:	b007      	add	sp, #28
 801d4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801d4f4:	491d      	ldr	r1, [pc, #116]	; (801d56c <SD_Witer+0xc8c>)
 801d4f6:	f7ff ba10 	b.w	801c91a <SD_Witer+0x3a>
 801d4fa:	491d      	ldr	r1, [pc, #116]	; (801d570 <SD_Witer+0xc90>)
 801d4fc:	f7ff ba0d 	b.w	801c91a <SD_Witer+0x3a>
 801d500:	491c      	ldr	r1, [pc, #112]	; (801d574 <SD_Witer+0xc94>)
 801d502:	f7ff ba0a 	b.w	801c91a <SD_Witer+0x3a>
 801d506:	491c      	ldr	r1, [pc, #112]	; (801d578 <SD_Witer+0xc98>)
 801d508:	f7ff ba07 	b.w	801c91a <SD_Witer+0x3a>
 801d50c:	491b      	ldr	r1, [pc, #108]	; (801d57c <SD_Witer+0xc9c>)
 801d50e:	f7ff ba04 	b.w	801c91a <SD_Witer+0x3a>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801d512:	221e      	movs	r2, #30
 801d514:	491a      	ldr	r1, [pc, #104]	; (801d580 <SD_Witer+0xca0>)
 801d516:	f7ff ba3a 	b.w	801c98e <SD_Witer+0xae>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801d51a:	2212      	movs	r2, #18
 801d51c:	4919      	ldr	r1, [pc, #100]	; (801d584 <SD_Witer+0xca4>)
 801d51e:	f7ff ba54 	b.w	801c9ca <SD_Witer+0xea>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801d522:	2212      	movs	r2, #18
 801d524:	4918      	ldr	r1, [pc, #96]	; (801d588 <SD_Witer+0xca8>)
 801d526:	f7ff ba8c 	b.w	801ca42 <SD_Witer+0x162>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801d52a:	2214      	movs	r2, #20
 801d52c:	4917      	ldr	r1, [pc, #92]	; (801d58c <SD_Witer+0xcac>)
 801d52e:	f7ff babc 	b.w	801caaa <SD_Witer+0x1ca>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801d532:	2209      	movs	r2, #9
 801d534:	4916      	ldr	r1, [pc, #88]	; (801d590 <SD_Witer+0xcb0>)
 801d536:	f7ff baec 	b.w	801cb12 <SD_Witer+0x232>
 801d53a:	bf00      	nop
 801d53c:	080341cf 	.word	0x080341cf
 801d540:	2008ce60 	.word	0x2008ce60
 801d544:	2008deb8 	.word	0x2008deb8
 801d548:	200031ad 	.word	0x200031ad
 801d54c:	200031ac 	.word	0x200031ac
 801d550:	08034170 	.word	0x08034170
 801d554:	080341ce 	.word	0x080341ce
 801d558:	2008eef0 	.word	0x2008eef0
 801d55c:	2008ce68 	.word	0x2008ce68
 801d560:	2008eee8 	.word	0x2008eee8
 801d564:	3ff00000 	.word	0x3ff00000
 801d568:	200052d0 	.word	0x200052d0
 801d56c:	080342d2 	.word	0x080342d2
 801d570:	0803418e 	.word	0x0803418e
 801d574:	08034192 	.word	0x08034192
 801d578:	08034194 	.word	0x08034194
 801d57c:	08034198 	.word	0x08034198
 801d580:	2000090a 	.word	0x2000090a
 801d584:	2000042f 	.word	0x2000042f
 801d588:	200004ab 	.word	0x200004ab
 801d58c:	20000467 	.word	0x20000467
 801d590:	20000246 	.word	0x20000246
										sprintf(measure_buff, "%.d", Tc_Measure);
 801d594:	49ab      	ldr	r1, [pc, #684]	; (801d844 <SD_Witer+0xf64>)
 801d596:	a803      	add	r0, sp, #12
 801d598:	f005 f8ba 	bl	8022710 <sprintf>
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d59c:	220c      	movs	r2, #12
 801d59e:	4baa      	ldr	r3, [pc, #680]	; (801d848 <SD_Witer+0xf68>)
 801d5a0:	48aa      	ldr	r0, [pc, #680]	; (801d84c <SD_Witer+0xf6c>)
 801d5a2:	eb0d 0102 	add.w	r1, sp, r2
 801d5a6:	f7ec fc07 	bl	8009db8 <f_write>
										memset(measure_buff, 0, 12);
 801d5aa:	2300      	movs	r3, #0
 801d5ac:	9303      	str	r3, [sp, #12]
 801d5ae:	9304      	str	r3, [sp, #16]
 801d5b0:	9305      	str	r3, [sp, #20]
 801d5b2:	f7ff babe 	b.w	801cb32 <SD_Witer+0x252>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801d5b6:	2215      	movs	r2, #21
 801d5b8:	49a5      	ldr	r1, [pc, #660]	; (801d850 <SD_Witer+0xf70>)
 801d5ba:	f7ff bacd 	b.w	801cb58 <SD_Witer+0x278>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801d5be:	2213      	movs	r2, #19
 801d5c0:	49a4      	ldr	r1, [pc, #656]	; (801d854 <SD_Witer+0xf74>)
 801d5c2:	f7ff bb46 	b.w	801cc52 <SD_Witer+0x372>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801d5c6:	221a      	movs	r2, #26
 801d5c8:	49a3      	ldr	r1, [pc, #652]	; (801d858 <SD_Witer+0xf78>)
 801d5ca:	f7ff bb51 	b.w	801cc70 <SD_Witer+0x390>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801d5ce:	221f      	movs	r2, #31
 801d5d0:	49a2      	ldr	r1, [pc, #648]	; (801d85c <SD_Witer+0xf7c>)
 801d5d2:	f7ff bb67 	b.w	801cca4 <SD_Witer+0x3c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801d5d6:	2213      	movs	r2, #19
 801d5d8:	49a1      	ldr	r1, [pc, #644]	; (801d860 <SD_Witer+0xf80>)
 801d5da:	f7ff bb81 	b.w	801cce0 <SD_Witer+0x400>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801d5de:	b964      	cbnz	r4, 801d5fa <SD_Witer+0xd1a>
 801d5e0:	49a0      	ldr	r1, [pc, #640]	; (801d864 <SD_Witer+0xf84>)
 801d5e2:	2224      	movs	r2, #36	; 0x24
 801d5e4:	4899      	ldr	r0, [pc, #612]	; (801d84c <SD_Witer+0xf6c>)
 801d5e6:	f7ec fbe7 	bl	8009db8 <f_write>
								f_write(&MyFile, "NAN", 3, &byteswritten);
 801d5ea:	4b97      	ldr	r3, [pc, #604]	; (801d848 <SD_Witer+0xf68>)
 801d5ec:	499e      	ldr	r1, [pc, #632]	; (801d868 <SD_Witer+0xf88>)
 801d5ee:	4897      	ldr	r0, [pc, #604]	; (801d84c <SD_Witer+0xf6c>)
 801d5f0:	2203      	movs	r2, #3
 801d5f2:	f7ec fbe1 	bl	8009db8 <f_write>
 801d5f6:	f7ff bb88 	b.w	801cd0a <SD_Witer+0x42a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801d5fa:	2213      	movs	r2, #19
 801d5fc:	4998      	ldr	r1, [pc, #608]	; (801d860 <SD_Witer+0xf80>)
 801d5fe:	e7f1      	b.n	801d5e4 <SD_Witer+0xd04>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801d600:	2225      	movs	r2, #37	; 0x25
 801d602:	499a      	ldr	r1, [pc, #616]	; (801d86c <SD_Witer+0xf8c>)
 801d604:	f7ff bb99 	b.w	801cd3a <SD_Witer+0x45a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801d608:	2212      	movs	r2, #18
 801d60a:	4999      	ldr	r1, [pc, #612]	; (801d870 <SD_Witer+0xf90>)
 801d60c:	f7ff bbd0 	b.w	801cdb0 <SD_Witer+0x4d0>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801d610:	2212      	movs	r2, #18
 801d612:	4998      	ldr	r1, [pc, #608]	; (801d874 <SD_Witer+0xf94>)
 801d614:	f7ff bbea 	b.w	801cdec <SD_Witer+0x50c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801d618:	2213      	movs	r2, #19
 801d61a:	4997      	ldr	r1, [pc, #604]	; (801d878 <SD_Witer+0xf98>)
 801d61c:	e404      	b.n	801ce28 <SD_Witer+0x548>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801d61e:	221e      	movs	r2, #30
 801d620:	4996      	ldr	r1, [pc, #600]	; (801d87c <SD_Witer+0xf9c>)
 801d622:	e41f      	b.n	801ce64 <SD_Witer+0x584>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801d624:	220f      	movs	r2, #15
 801d626:	4996      	ldr	r1, [pc, #600]	; (801d880 <SD_Witer+0xfa0>)
 801d628:	e4bc      	b.n	801cfa4 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801d62a:	2c00      	cmp	r4, #0
 801d62c:	f040 80f0 	bne.w	801d810 <SD_Witer+0xf30>
 801d630:	4994      	ldr	r1, [pc, #592]	; (801d884 <SD_Witer+0xfa4>)
 801d632:	2276      	movs	r2, #118	; 0x76
 801d634:	4885      	ldr	r0, [pc, #532]	; (801d84c <SD_Witer+0xf6c>)
 801d636:	4f94      	ldr	r7, [pc, #592]	; (801d888 <SD_Witer+0xfa8>)
 801d638:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801d8f0 <SD_Witer+0x1010>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d63c:	f8df a208 	ldr.w	sl, [pc, #520]	; 801d848 <SD_Witer+0xf68>
 801d640:	f8df 9208 	ldr.w	r9, [pc, #520]	; 801d84c <SD_Witer+0xf6c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801d644:	f7ec fbb8 	bl	8009db8 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //L(lambda)
 801d648:	f857 0b04 	ldr.w	r0, [r7], #4
 801d64c:	f7e2 ff94 	bl	8000578 <__aeabi_f2d>
 801d650:	4602      	mov	r2, r0
 801d652:	460b      	mov	r3, r1
 801d654:	a803      	add	r0, sp, #12
 801d656:	498d      	ldr	r1, [pc, #564]	; (801d88c <SD_Witer+0xfac>)
 801d658:	f005 f85a 	bl	8022710 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d65c:	220c      	movs	r2, #12
 801d65e:	4653      	mov	r3, sl
 801d660:	eb0d 0102 	add.w	r1, sp, r2
 801d664:	4648      	mov	r0, r9
 801d666:	f7ec fba7 	bl	8009db8 <f_write>
									memset(measure_buff, 0, 12);
 801d66a:	2500      	movs	r5, #0
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801d66c:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801d670:	9503      	str	r5, [sp, #12]
 801d672:	9504      	str	r5, [sp, #16]
 801d674:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801d676:	f7e2 ff7f 	bl	8000578 <__aeabi_f2d>
 801d67a:	4602      	mov	r2, r0
 801d67c:	460b      	mov	r3, r1
 801d67e:	a803      	add	r0, sp, #12
 801d680:	4983      	ldr	r1, [pc, #524]	; (801d890 <SD_Witer+0xfb0>)
 801d682:	f005 f845 	bl	8022710 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d686:	220c      	movs	r2, #12
 801d688:	4653      	mov	r3, sl
 801d68a:	eb0d 0102 	add.w	r1, sp, r2
 801d68e:	4648      	mov	r0, r9
 801d690:	f7ec fb92 	bl	8009db8 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801d694:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801d696:	9503      	str	r5, [sp, #12]
 801d698:	9504      	str	r5, [sp, #16]
 801d69a:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801d69c:	d1d4      	bne.n	801d648 <SD_Witer+0xd68>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801d69e:	4b6a      	ldr	r3, [pc, #424]	; (801d848 <SD_Witer+0xf68>)
 801d6a0:	2c00      	cmp	r4, #0
 801d6a2:	f040 80b8 	bne.w	801d816 <SD_Witer+0xf36>
 801d6a6:	497b      	ldr	r1, [pc, #492]	; (801d894 <SD_Witer+0xfb4>)
 801d6a8:	223f      	movs	r2, #63	; 0x3f
 801d6aa:	4868      	ldr	r0, [pc, #416]	; (801d84c <SD_Witer+0xf6c>)
 801d6ac:	f7ec fb84 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f", E_day); //Le
 801d6b0:	4b79      	ldr	r3, [pc, #484]	; (801d898 <SD_Witer+0xfb8>)
 801d6b2:	6818      	ldr	r0, [r3, #0]
 801d6b4:	f7e2 ff60 	bl	8000578 <__aeabi_f2d>
 801d6b8:	4602      	mov	r2, r0
 801d6ba:	460b      	mov	r3, r1
 801d6bc:	a803      	add	r0, sp, #12
 801d6be:	4977      	ldr	r1, [pc, #476]	; (801d89c <SD_Witer+0xfbc>)
 801d6c0:	f005 f826 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d6c4:	220c      	movs	r2, #12
 801d6c6:	4b60      	ldr	r3, [pc, #384]	; (801d848 <SD_Witer+0xf68>)
 801d6c8:	4860      	ldr	r0, [pc, #384]	; (801d84c <SD_Witer+0xf6c>)
 801d6ca:	eb0d 0102 	add.w	r1, sp, r2
 801d6ce:	f7ec fb73 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801d6d2:	2300      	movs	r3, #0
 801d6d4:	9303      	str	r3, [sp, #12]
 801d6d6:	9304      	str	r3, [sp, #16]
 801d6d8:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801d6da:	4b5b      	ldr	r3, [pc, #364]	; (801d848 <SD_Witer+0xf68>)
 801d6dc:	2c00      	cmp	r4, #0
 801d6de:	f040 809d 	bne.w	801d81c <SD_Witer+0xf3c>
 801d6e2:	496f      	ldr	r1, [pc, #444]	; (801d8a0 <SD_Witer+0xfc0>)
 801d6e4:	221b      	movs	r2, #27
 801d6e6:	4859      	ldr	r0, [pc, #356]	; (801d84c <SD_Witer+0xf6c>)
 801d6e8:	f7ec fb66 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.1f", E_day_Wt); //Lu
 801d6ec:	4b6d      	ldr	r3, [pc, #436]	; (801d8a4 <SD_Witer+0xfc4>)
 801d6ee:	6818      	ldr	r0, [r3, #0]
 801d6f0:	f7e2 ff42 	bl	8000578 <__aeabi_f2d>
 801d6f4:	4602      	mov	r2, r0
 801d6f6:	460b      	mov	r3, r1
 801d6f8:	a803      	add	r0, sp, #12
 801d6fa:	496b      	ldr	r1, [pc, #428]	; (801d8a8 <SD_Witer+0xfc8>)
 801d6fc:	f005 f808 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d700:	220c      	movs	r2, #12
 801d702:	4b51      	ldr	r3, [pc, #324]	; (801d848 <SD_Witer+0xf68>)
 801d704:	4851      	ldr	r0, [pc, #324]	; (801d84c <SD_Witer+0xf6c>)
 801d706:	eb0d 0102 	add.w	r1, sp, r2
 801d70a:	f7ec fb55 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801d70e:	2300      	movs	r3, #0
 801d710:	9303      	str	r3, [sp, #12]
 801d712:	9304      	str	r3, [sp, #16]
 801d714:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801d716:	4b4c      	ldr	r3, [pc, #304]	; (801d848 <SD_Witer+0xf68>)
 801d718:	2c00      	cmp	r4, #0
 801d71a:	f040 8082 	bne.w	801d822 <SD_Witer+0xf42>
 801d71e:	4963      	ldr	r1, [pc, #396]	; (801d8ac <SD_Witer+0xfcc>)
 801d720:	2227      	movs	r2, #39	; 0x27
 801d722:	484a      	ldr	r0, [pc, #296]	; (801d84c <SD_Witer+0xf6c>)
 801d724:	f7ec fb48 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPL
 801d728:	4b61      	ldr	r3, [pc, #388]	; (801d8b0 <SD_Witer+0xfd0>)
 801d72a:	6818      	ldr	r0, [r3, #0]
 801d72c:	f7e2 ff24 	bl	8000578 <__aeabi_f2d>
 801d730:	4602      	mov	r2, r0
 801d732:	460b      	mov	r3, r1
 801d734:	a803      	add	r0, sp, #12
 801d736:	4959      	ldr	r1, [pc, #356]	; (801d89c <SD_Witer+0xfbc>)
 801d738:	f004 ffea 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d73c:	220c      	movs	r2, #12
 801d73e:	4b42      	ldr	r3, [pc, #264]	; (801d848 <SD_Witer+0xf68>)
 801d740:	4842      	ldr	r0, [pc, #264]	; (801d84c <SD_Witer+0xf6c>)
 801d742:	eb0d 0102 	add.w	r1, sp, r2
 801d746:	f7ec fb37 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801d74a:	2300      	movs	r3, #0
 801d74c:	9303      	str	r3, [sp, #12]
 801d74e:	9304      	str	r3, [sp, #16]
 801d750:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801d752:	4b3d      	ldr	r3, [pc, #244]	; (801d848 <SD_Witer+0xf68>)
 801d754:	2c00      	cmp	r4, #0
 801d756:	d167      	bne.n	801d828 <SD_Witer+0xf48>
 801d758:	4956      	ldr	r1, [pc, #344]	; (801d8b4 <SD_Witer+0xfd4>)
 801d75a:	223d      	movs	r2, #61	; 0x3d
 801d75c:	483b      	ldr	r0, [pc, #236]	; (801d84c <SD_Witer+0xf6c>)
 801d75e:	f7ec fb2b 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPL B
 801d762:	4b55      	ldr	r3, [pc, #340]	; (801d8b8 <SD_Witer+0xfd8>)
 801d764:	6818      	ldr	r0, [r3, #0]
 801d766:	f7e2 ff07 	bl	8000578 <__aeabi_f2d>
 801d76a:	4602      	mov	r2, r0
 801d76c:	460b      	mov	r3, r1
 801d76e:	a803      	add	r0, sp, #12
 801d770:	4952      	ldr	r1, [pc, #328]	; (801d8bc <SD_Witer+0xfdc>)
 801d772:	f004 ffcd 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d776:	220c      	movs	r2, #12
 801d778:	eb0d 0102 	add.w	r1, sp, r2
 801d77c:	4b32      	ldr	r3, [pc, #200]	; (801d848 <SD_Witer+0xf68>)
 801d77e:	4833      	ldr	r0, [pc, #204]	; (801d84c <SD_Witer+0xf6c>)
 801d780:	f7ec fb1a 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801d784:	4b4e      	ldr	r3, [pc, #312]	; (801d8c0 <SD_Witer+0xfe0>)
								memset(measure_buff, 0, 12);
 801d786:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801d788:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801d78a:	9503      	str	r5, [sp, #12]
 801d78c:	9504      	str	r5, [sp, #16]
 801d78e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801d790:	f7e2 fef2 	bl	8000578 <__aeabi_f2d>
 801d794:	4602      	mov	r2, r0
 801d796:	460b      	mov	r3, r1
 801d798:	a803      	add	r0, sp, #12
 801d79a:	4948      	ldr	r1, [pc, #288]	; (801d8bc <SD_Witer+0xfdc>)
 801d79c:	f004 ffb8 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d7a0:	220c      	movs	r2, #12
 801d7a2:	eb0d 0102 	add.w	r1, sp, r2
 801d7a6:	4b28      	ldr	r3, [pc, #160]	; (801d848 <SD_Witer+0xf68>)
 801d7a8:	4828      	ldr	r0, [pc, #160]	; (801d84c <SD_Witer+0xf6c>)
 801d7aa:	f7ec fb05 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801d7ae:	4b45      	ldr	r3, [pc, #276]	; (801d8c4 <SD_Witer+0xfe4>)
								memset(measure_buff, 0, 12);
 801d7b0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801d7b2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801d7b4:	9504      	str	r5, [sp, #16]
 801d7b6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801d7b8:	f7e2 fede 	bl	8000578 <__aeabi_f2d>
 801d7bc:	4602      	mov	r2, r0
 801d7be:	460b      	mov	r3, r1
 801d7c0:	a803      	add	r0, sp, #12
 801d7c2:	493e      	ldr	r1, [pc, #248]	; (801d8bc <SD_Witer+0xfdc>)
 801d7c4:	f004 ffa4 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d7c8:	220c      	movs	r2, #12
 801d7ca:	eb0d 0102 	add.w	r1, sp, r2
 801d7ce:	4b1e      	ldr	r3, [pc, #120]	; (801d848 <SD_Witer+0xf68>)
 801d7d0:	481e      	ldr	r0, [pc, #120]	; (801d84c <SD_Witer+0xf6c>)
 801d7d2:	f7ec faf1 	bl	8009db8 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801d7d6:	4b3c      	ldr	r3, [pc, #240]	; (801d8c8 <SD_Witer+0xfe8>)
								memset(measure_buff, 0, 12);
 801d7d8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801d7da:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801d7dc:	9504      	str	r5, [sp, #16]
 801d7de:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801d7e0:	f7e2 feca 	bl	8000578 <__aeabi_f2d>
 801d7e4:	4602      	mov	r2, r0
 801d7e6:	460b      	mov	r3, r1
 801d7e8:	a803      	add	r0, sp, #12
 801d7ea:	4934      	ldr	r1, [pc, #208]	; (801d8bc <SD_Witer+0xfdc>)
 801d7ec:	f004 ff90 	bl	8022710 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d7f0:	220c      	movs	r2, #12
 801d7f2:	4b15      	ldr	r3, [pc, #84]	; (801d848 <SD_Witer+0xf68>)
 801d7f4:	4815      	ldr	r0, [pc, #84]	; (801d84c <SD_Witer+0xf6c>)
 801d7f6:	eb0d 0102 	add.w	r1, sp, r2
 801d7fa:	f7ec fadd 	bl	8009db8 <f_write>
								memset(measure_buff, 0, 12);
 801d7fe:	9503      	str	r5, [sp, #12]
 801d800:	9504      	str	r5, [sp, #16]
 801d802:	9505      	str	r5, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801d804:	4b10      	ldr	r3, [pc, #64]	; (801d848 <SD_Witer+0xf68>)
 801d806:	b994      	cbnz	r4, 801d82e <SD_Witer+0xf4e>
 801d808:	221a      	movs	r2, #26
 801d80a:	4930      	ldr	r1, [pc, #192]	; (801d8cc <SD_Witer+0xfec>)
 801d80c:	f7ff bbca 	b.w	801cfa4 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801d810:	2223      	movs	r2, #35	; 0x23
 801d812:	492f      	ldr	r1, [pc, #188]	; (801d8d0 <SD_Witer+0xff0>)
 801d814:	e70e      	b.n	801d634 <SD_Witer+0xd54>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801d816:	2216      	movs	r2, #22
 801d818:	492e      	ldr	r1, [pc, #184]	; (801d8d4 <SD_Witer+0xff4>)
 801d81a:	e746      	b.n	801d6aa <SD_Witer+0xdca>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801d81c:	2213      	movs	r2, #19
 801d81e:	492e      	ldr	r1, [pc, #184]	; (801d8d8 <SD_Witer+0xff8>)
 801d820:	e761      	b.n	801d6e6 <SD_Witer+0xe06>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801d822:	2215      	movs	r2, #21
 801d824:	492d      	ldr	r1, [pc, #180]	; (801d8dc <SD_Witer+0xffc>)
 801d826:	e77c      	b.n	801d722 <SD_Witer+0xe42>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801d828:	2220      	movs	r2, #32
 801d82a:	492d      	ldr	r1, [pc, #180]	; (801d8e0 <SD_Witer+0x1000>)
 801d82c:	e796      	b.n	801d75c <SD_Witer+0xe7c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801d82e:	2214      	movs	r2, #20
 801d830:	492c      	ldr	r1, [pc, #176]	; (801d8e4 <SD_Witer+0x1004>)
 801d832:	f7ff bbb7 	b.w	801cfa4 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801d836:	226b      	movs	r2, #107	; 0x6b
 801d838:	492b      	ldr	r1, [pc, #172]	; (801d8e8 <SD_Witer+0x1008>)
 801d83a:	f7ff bbf7 	b.w	801d02c <SD_Witer+0x74c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801d83e:	226b      	movs	r2, #107	; 0x6b
 801d840:	492a      	ldr	r1, [pc, #168]	; (801d8ec <SD_Witer+0x100c>)
 801d842:	e4fc      	b.n	801d23e <SD_Witer+0x95e>
 801d844:	080341b4 	.word	0x080341b4
 801d848:	2008ce60 	.word	0x2008ce60
 801d84c:	2008deb8 	.word	0x2008deb8
 801d850:	200005fe 	.word	0x200005fe
 801d854:	200008cd 	.word	0x200008cd
 801d858:	200009ee 	.word	0x200009ee
 801d85c:	20000994 	.word	0x20000994
 801d860:	2000095d 	.word	0x2000095d
 801d864:	20000970 	.word	0x20000970
 801d868:	0803419c 	.word	0x0803419c
 801d86c:	20000543 	.word	0x20000543
 801d870:	2000050d 	.word	0x2000050d
 801d874:	200005cb 	.word	0x200005cb
 801d878:	200007fe 	.word	0x200007fe
 801d87c:	200007a7 	.word	0x200007a7
 801d880:	200004eb 	.word	0x200004eb
 801d884:	20000703 	.word	0x20000703
 801d888:	20007de4 	.word	0x20007de4
 801d88c:	080341bc 	.word	0x080341bc
 801d890:	080341c1 	.word	0x080341c1
 801d894:	200006a1 	.word	0x200006a1
 801d898:	20091514 	.word	0x20091514
 801d89c:	08034173 	.word	0x08034173
 801d8a0:	2000078c 	.word	0x2000078c
 801d8a4:	20090f80 	.word	0x20090f80
 801d8a8:	0803416b 	.word	0x0803416b
 801d8ac:	200008a6 	.word	0x200008a6
 801d8b0:	20090f88 	.word	0x20090f88
 801d8b4:	20000854 	.word	0x20000854
 801d8b8:	2009106c 	.word	0x2009106c
 801d8bc:	080341c8 	.word	0x080341c8
 801d8c0:	200913f0 	.word	0x200913f0
 801d8c4:	2009132c 	.word	0x2009132c
 801d8c8:	20090f84 	.word	0x20090f84
 801d8cc:	20000671 	.word	0x20000671
 801d8d0:	200006e0 	.word	0x200006e0
 801d8d4:	2000068b 	.word	0x2000068b
 801d8d8:	20000779 	.word	0x20000779
 801d8dc:	20000891 	.word	0x20000891
 801d8e0:	20000834 	.word	0x20000834
 801d8e4:	2000065d 	.word	0x2000065d
 801d8e8:	20000347 	.word	0x20000347
 801d8ec:	2000025d 	.word	0x2000025d
 801d8f0:	200501ec 	.word	0x200501ec

0801d8f4 <Spectral_Axes>:
extern uint8_t TFT_direction;
extern uint16_t WaveLenght_Graph[4];
extern uint16_t PARGraph_B, PARGraph_G, PARGraph_R, PARGraph_IR;
extern uint8_t Graph_Field;

void Spectral_Axes(uint8_t direction){
 801d8f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (direction == 0x00)
 801d8f6:	2800      	cmp	r0, #0
 801d8f8:	d145      	bne.n	801d986 <Spectral_Axes+0x92>
	{
		TFT_FillRectangle(18, 95, 20, 412, TFT_Grey); //Yline
 801d8fa:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801d8fe:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801d902:	2214      	movs	r2, #20
 801d904:	215f      	movs	r1, #95	; 0x5f
 801d906:	2012      	movs	r0, #18
 801d908:	9400      	str	r4, [sp, #0]
 801d90a:	f001 f8c1 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(18, 412, 270, 414, TFT_Grey);//XLine
 801d90e:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 801d912:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801d916:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801d91a:	2012      	movs	r0, #18
 801d91c:	9400      	str	r4, [sp, #0]
 801d91e:	f001 f8b7 	bl	801ea90 <TFT_FillRectangle>
		
		TFT_DrawLine(18, 334, 268, 334, TFT_Grey); //25
 801d922:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 801d926:	4619      	mov	r1, r3
 801d928:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d92c:	2012      	movs	r0, #18
 801d92e:	9400      	str	r4, [sp, #0]
 801d930:	f001 f846 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(18, 257, 268, 257, TFT_Grey); //50
 801d934:	f240 1301 	movw	r3, #257	; 0x101
 801d938:	4619      	mov	r1, r3
 801d93a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d93e:	2012      	movs	r0, #18
 801d940:	9400      	str	r4, [sp, #0]
 801d942:	f001 f83d 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(18, 181, 268, 181, TFT_Grey); //75
 801d946:	23b5      	movs	r3, #181	; 0xb5
 801d948:	4619      	mov	r1, r3
 801d94a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d94e:	2012      	movs	r0, #18
 801d950:	9400      	str	r4, [sp, #0]
 801d952:	f001 f835 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(18, 105, 268, 105, TFT_Grey); //100
 801d956:	2369      	movs	r3, #105	; 0x69
 801d958:	9400      	str	r4, [sp, #0]
 801d95a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d95e:	4619      	mov	r1, r3
 801d960:	2012      	movs	r0, #18
 801d962:	f001 f82d 	bl	801e9c0 <TFT_DrawLine>
 801d966:	2538      	movs	r5, #56	; 0x38
		
		for(uint16_t i = 0; i < 210; i+=40){
			TFT_FillRectangle(56+i, 95, 56+i, 412, TFT_Grey); 
 801d968:	462a      	mov	r2, r5
 801d96a:	4628      	mov	r0, r5
 801d96c:	3528      	adds	r5, #40	; 0x28
 801d96e:	9400      	str	r4, [sp, #0]
 801d970:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801d974:	215f      	movs	r1, #95	; 0x5f
 801d976:	b2ad      	uxth	r5, r5
 801d978:	f001 f88a 	bl	801ea90 <TFT_FillRectangle>
		for(uint16_t i = 0; i < 210; i+=40){
 801d97c:	f5b5 7f94 	cmp.w	r5, #296	; 0x128
 801d980:	d1f2      	bne.n	801d968 <Spectral_Axes+0x74>
		
		for(uint16_t i = 0; i < 260; i+=50){
			TFT_FillRectangle(17, 374-i, 232, 374-i, TFT_Grey);
		}
	}
}
 801d982:	b003      	add	sp, #12
 801d984:	bd30      	pop	{r4, r5, pc}
	} else if (direction == 0x01)
 801d986:	2801      	cmp	r0, #1
 801d988:	d140      	bne.n	801da0c <Spectral_Axes+0x118>
		TFT_FillRectangle(253, 70, 255, 406, TFT_Grey); //XLine
 801d98a:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801d98e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d992:	22ff      	movs	r2, #255	; 0xff
 801d994:	2146      	movs	r1, #70	; 0x46
 801d996:	20fd      	movs	r0, #253	; 0xfd
 801d998:	9400      	str	r4, [sp, #0]
 801d99a:	f001 f879 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_Grey); //Yline
 801d99e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d9a2:	22ff      	movs	r2, #255	; 0xff
 801d9a4:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801d9a8:	2028      	movs	r0, #40	; 0x28
 801d9aa:	9400      	str	r4, [sp, #0]
 801d9ac:	f001 f870 	bl	801ea90 <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_Grey); //25
 801d9b0:	22cc      	movs	r2, #204	; 0xcc
 801d9b2:	4610      	mov	r0, r2
 801d9b4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d9b8:	2146      	movs	r1, #70	; 0x46
 801d9ba:	9400      	str	r4, [sp, #0]
 801d9bc:	f001 f800 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_Grey); //50
 801d9c0:	2297      	movs	r2, #151	; 0x97
 801d9c2:	4610      	mov	r0, r2
 801d9c4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d9c8:	2146      	movs	r1, #70	; 0x46
 801d9ca:	9400      	str	r4, [sp, #0]
 801d9cc:	f000 fff8 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_Grey); //75
 801d9d0:	2262      	movs	r2, #98	; 0x62
 801d9d2:	4610      	mov	r0, r2
 801d9d4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d9d8:	2146      	movs	r1, #70	; 0x46
 801d9da:	9400      	str	r4, [sp, #0]
 801d9dc:	f000 fff0 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_Grey); //100
 801d9e0:	222d      	movs	r2, #45	; 0x2d
 801d9e2:	9400      	str	r4, [sp, #0]
 801d9e4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d9e8:	2146      	movs	r1, #70	; 0x46
 801d9ea:	4610      	mov	r0, r2
 801d9ec:	f000 ffe8 	bl	801e9c0 <TFT_DrawLine>
 801d9f0:	f44f 75b1 	mov.w	r5, #354	; 0x162
			TFT_FillRectangle(40, 354-i, 255, 354-i, TFT_Grey);
 801d9f4:	462b      	mov	r3, r5
 801d9f6:	4629      	mov	r1, r5
 801d9f8:	3d32      	subs	r5, #50	; 0x32
 801d9fa:	9400      	str	r4, [sp, #0]
 801d9fc:	22ff      	movs	r2, #255	; 0xff
 801d9fe:	2028      	movs	r0, #40	; 0x28
 801da00:	b2ad      	uxth	r5, r5
 801da02:	f001 f845 	bl	801ea90 <TFT_FillRectangle>
		for(uint16_t i = 0; i < 260; i+=50){
 801da06:	2d36      	cmp	r5, #54	; 0x36
 801da08:	d1f4      	bne.n	801d9f4 <Spectral_Axes+0x100>
 801da0a:	e7ba      	b.n	801d982 <Spectral_Axes+0x8e>
	} else if (direction == 0x02)
 801da0c:	2802      	cmp	r0, #2
 801da0e:	d1b8      	bne.n	801d982 <Spectral_Axes+0x8e>
		TFT_FillRectangle(18, 74, 16, 406, TFT_Grey); //XLine
 801da10:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801da14:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801da18:	2210      	movs	r2, #16
 801da1a:	214a      	movs	r1, #74	; 0x4a
 801da1c:	2012      	movs	r0, #18
 801da1e:	9400      	str	r4, [sp, #0]
 801da20:	f001 f836 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_Grey); //Yline
 801da24:	234c      	movs	r3, #76	; 0x4c
 801da26:	22e8      	movs	r2, #232	; 0xe8
 801da28:	214a      	movs	r1, #74	; 0x4a
 801da2a:	2011      	movs	r0, #17
 801da2c:	9400      	str	r4, [sp, #0]
 801da2e:	f001 f82f 	bl	801ea90 <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_Grey); //25
 801da32:	2244      	movs	r2, #68	; 0x44
 801da34:	4610      	mov	r0, r2
 801da36:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801da3a:	2146      	movs	r1, #70	; 0x46
 801da3c:	9400      	str	r4, [sp, #0]
 801da3e:	f000 ffbf 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_Grey); //50
 801da42:	2279      	movs	r2, #121	; 0x79
 801da44:	4610      	mov	r0, r2
 801da46:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801da4a:	2146      	movs	r1, #70	; 0x46
 801da4c:	9400      	str	r4, [sp, #0]
 801da4e:	f000 ffb7 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_Grey); //75
 801da52:	22ae      	movs	r2, #174	; 0xae
 801da54:	4610      	mov	r0, r2
 801da56:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801da5a:	2146      	movs	r1, #70	; 0x46
 801da5c:	9400      	str	r4, [sp, #0]
 801da5e:	f000 ffaf 	bl	801e9c0 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_Grey); //100
 801da62:	22e3      	movs	r2, #227	; 0xe3
 801da64:	9400      	str	r4, [sp, #0]
 801da66:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801da6a:	2146      	movs	r1, #70	; 0x46
 801da6c:	4610      	mov	r0, r2
 801da6e:	f000 ffa7 	bl	801e9c0 <TFT_DrawLine>
 801da72:	f44f 75bb 	mov.w	r5, #374	; 0x176
			TFT_FillRectangle(17, 374-i, 232, 374-i, TFT_Grey);
 801da76:	462b      	mov	r3, r5
 801da78:	4629      	mov	r1, r5
 801da7a:	3d32      	subs	r5, #50	; 0x32
 801da7c:	9400      	str	r4, [sp, #0]
 801da7e:	22e8      	movs	r2, #232	; 0xe8
 801da80:	2011      	movs	r0, #17
 801da82:	b2ad      	uxth	r5, r5
 801da84:	f001 f804 	bl	801ea90 <TFT_FillRectangle>
		for(uint16_t i = 0; i < 260; i+=50){
 801da88:	2d4a      	cmp	r5, #74	; 0x4a
 801da8a:	d1f4      	bne.n	801da76 <Spectral_Axes+0x182>
 801da8c:	e779      	b.n	801d982 <Spectral_Axes+0x8e>
	...

0801da90 <Spectral_PAR_Range>:

void Spectral_PAR_Range(uint8_t direction){
 801da90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801da94:	4d6b      	ldr	r5, [pc, #428]	; (801dc44 <Spectral_PAR_Range+0x1b4>)
 801da96:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801dc50 <Spectral_PAR_Range+0x1c0>
 801da9a:	4f6b      	ldr	r7, [pc, #428]	; (801dc48 <Spectral_PAR_Range+0x1b8>)
 801da9c:	4e6b      	ldr	r6, [pc, #428]	; (801dc4c <Spectral_PAR_Range+0x1bc>)
	if (direction == 0x00)
 801da9e:	2800      	cmp	r0, #0
 801daa0:	d146      	bne.n	801db30 <Spectral_PAR_Range+0xa0>
	{
		TFT_FillRectangle(19, 105, 19+PARGraph_B/4, 411, TFT_Black_Bkgr);
 801daa2:	882a      	ldrh	r2, [r5, #0]
 801daa4:	2363      	movs	r3, #99	; 0x63
 801daa6:	0892      	lsrs	r2, r2, #2
 801daa8:	9300      	str	r3, [sp, #0]
 801daaa:	3213      	adds	r2, #19
 801daac:	f240 139b 	movw	r3, #411	; 0x19b
 801dab0:	2169      	movs	r1, #105	; 0x69
 801dab2:	2013      	movs	r0, #19
 801dab4:	f000 ffec 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_B/4, 105, 19+PARGraph_G/4, 411, TFT_PAR_Blue);
 801dab8:	8828      	ldrh	r0, [r5, #0]
 801daba:	f8b8 2000 	ldrh.w	r2, [r8]
 801dabe:	f242 23b2 	movw	r3, #8882	; 0x22b2
 801dac2:	0892      	lsrs	r2, r2, #2
 801dac4:	0880      	lsrs	r0, r0, #2
 801dac6:	9300      	str	r3, [sp, #0]
 801dac8:	3213      	adds	r2, #19
 801daca:	f240 139b 	movw	r3, #411	; 0x19b
 801dace:	2169      	movs	r1, #105	; 0x69
 801dad0:	3013      	adds	r0, #19
 801dad2:	f000 ffdd 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_G/4, 105, 19+PARGraph_R/4, 411, TFT_PAR_Green);
 801dad6:	883a      	ldrh	r2, [r7, #0]
 801dad8:	f8b8 0000 	ldrh.w	r0, [r8]
 801dadc:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801dae0:	0892      	lsrs	r2, r2, #2
 801dae2:	0880      	lsrs	r0, r0, #2
 801dae4:	9300      	str	r3, [sp, #0]
 801dae6:	3213      	adds	r2, #19
 801dae8:	f240 139b 	movw	r3, #411	; 0x19b
 801daec:	2169      	movs	r1, #105	; 0x69
 801daee:	3013      	adds	r0, #19
 801daf0:	f000 ffce 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_R/4, 105, 19+PARGraph_IR/4, 411, TFT_PAR_Red);
 801daf4:	8838      	ldrh	r0, [r7, #0]
 801daf6:	8832      	ldrh	r2, [r6, #0]
 801daf8:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801dafc:	0892      	lsrs	r2, r2, #2
 801dafe:	0880      	lsrs	r0, r0, #2
 801db00:	9300      	str	r3, [sp, #0]
 801db02:	3213      	adds	r2, #19
 801db04:	f240 139b 	movw	r3, #411	; 0x19b
 801db08:	2169      	movs	r1, #105	; 0x69
 801db0a:	3013      	adds	r0, #19
 801db0c:	f000 ffc0 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_IR/4, 105, 19+1000/4, 411, TFT_PAR_IRed);
 801db10:	8830      	ldrh	r0, [r6, #0]
 801db12:	f641 3346 	movw	r3, #6982	; 0x1b46
 801db16:	0880      	lsrs	r0, r0, #2
 801db18:	9300      	str	r3, [sp, #0]
 801db1a:	f240 120d 	movw	r2, #269	; 0x10d
 801db1e:	f240 139b 	movw	r3, #411	; 0x19b
 801db22:	2169      	movs	r1, #105	; 0x69
 801db24:	3013      	adds	r0, #19
	}else
	{
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801db26:	f000 ffb3 	bl	801ea90 <TFT_FillRectangle>
	}
}
 801db2a:	b002      	add	sp, #8
 801db2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(direction == 0x01)
 801db30:	2801      	cmp	r0, #1
 801db32:	f04f 0403 	mov.w	r4, #3
 801db36:	d142      	bne.n	801dbbe <Spectral_PAR_Range+0x12e>
		TFT_FillRectangle( 45, 403-PARGraph_G/3, 253, 403-PARGraph_B/3, TFT_PAR_Blue);
 801db38:	882b      	ldrh	r3, [r5, #0]
 801db3a:	f8b8 1000 	ldrh.w	r1, [r8]
 801db3e:	fbb3 f3f4 	udiv	r3, r3, r4
 801db42:	f240 1593 	movw	r5, #403	; 0x193
 801db46:	f242 22b2 	movw	r2, #8882	; 0x22b2
 801db4a:	1aeb      	subs	r3, r5, r3
 801db4c:	fbb1 f1f4 	udiv	r1, r1, r4
 801db50:	1a69      	subs	r1, r5, r1
 801db52:	9200      	str	r2, [sp, #0]
 801db54:	b29b      	uxth	r3, r3
 801db56:	22fd      	movs	r2, #253	; 0xfd
 801db58:	b289      	uxth	r1, r1
 801db5a:	202d      	movs	r0, #45	; 0x2d
 801db5c:	f000 ff98 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_R/3, 253, 403-PARGraph_G/3, TFT_PAR_Green);
 801db60:	8839      	ldrh	r1, [r7, #0]
 801db62:	f8b8 3000 	ldrh.w	r3, [r8]
 801db66:	fbb1 f1f4 	udiv	r1, r1, r4
 801db6a:	f64c 7238 	movw	r2, #53048	; 0xcf38
 801db6e:	fbb3 f3f4 	udiv	r3, r3, r4
 801db72:	1a69      	subs	r1, r5, r1
 801db74:	1aeb      	subs	r3, r5, r3
 801db76:	9200      	str	r2, [sp, #0]
 801db78:	b29b      	uxth	r3, r3
 801db7a:	22fd      	movs	r2, #253	; 0xfd
 801db7c:	b289      	uxth	r1, r1
 801db7e:	202d      	movs	r0, #45	; 0x2d
 801db80:	f000 ff86 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_IR/3, 253, 403-PARGraph_R/3, TFT_PAR_Red);
 801db84:	883b      	ldrh	r3, [r7, #0]
 801db86:	8831      	ldrh	r1, [r6, #0]
 801db88:	fbb3 f3f4 	udiv	r3, r3, r4
 801db8c:	f24f 52b9 	movw	r2, #62905	; 0xf5b9
 801db90:	1aeb      	subs	r3, r5, r3
 801db92:	fbb1 f1f4 	udiv	r1, r1, r4
 801db96:	1a69      	subs	r1, r5, r1
 801db98:	9200      	str	r2, [sp, #0]
 801db9a:	b29b      	uxth	r3, r3
 801db9c:	22fd      	movs	r2, #253	; 0xfd
 801db9e:	b289      	uxth	r1, r1
 801dba0:	202d      	movs	r0, #45	; 0x2d
 801dba2:	f000 ff75 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-1000/3, 253, 403-PARGraph_IR/3, TFT_PAR_IRed);
 801dba6:	f641 3246 	movw	r2, #6982	; 0x1b46
 801dbaa:	8833      	ldrh	r3, [r6, #0]
 801dbac:	fbb3 f3f4 	udiv	r3, r3, r4
 801dbb0:	1aeb      	subs	r3, r5, r3
 801dbb2:	9200      	str	r2, [sp, #0]
 801dbb4:	b29b      	uxth	r3, r3
 801dbb6:	22fd      	movs	r2, #253	; 0xfd
 801dbb8:	2146      	movs	r1, #70	; 0x46
 801dbba:	202d      	movs	r0, #45	; 0x2d
 801dbbc:	e7b3      	b.n	801db26 <Spectral_PAR_Range+0x96>
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
 801dbbe:	8829      	ldrh	r1, [r5, #0]
 801dbc0:	f8b8 3000 	ldrh.w	r3, [r8]
 801dbc4:	fbb1 f1f4 	udiv	r1, r1, r4
 801dbc8:	f242 22b2 	movw	r2, #8882	; 0x22b2
 801dbcc:	fbb3 f3f4 	udiv	r3, r3, r4
 801dbd0:	314a      	adds	r1, #74	; 0x4a
 801dbd2:	334a      	adds	r3, #74	; 0x4a
 801dbd4:	9200      	str	r2, [sp, #0]
 801dbd6:	b29b      	uxth	r3, r3
 801dbd8:	22e3      	movs	r2, #227	; 0xe3
 801dbda:	b289      	uxth	r1, r1
 801dbdc:	2013      	movs	r0, #19
 801dbde:	f000 ff57 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
 801dbe2:	883b      	ldrh	r3, [r7, #0]
 801dbe4:	f8b8 1000 	ldrh.w	r1, [r8]
 801dbe8:	fbb3 f3f4 	udiv	r3, r3, r4
 801dbec:	f64c 7238 	movw	r2, #53048	; 0xcf38
 801dbf0:	334a      	adds	r3, #74	; 0x4a
 801dbf2:	fbb1 f1f4 	udiv	r1, r1, r4
 801dbf6:	314a      	adds	r1, #74	; 0x4a
 801dbf8:	9200      	str	r2, [sp, #0]
 801dbfa:	b29b      	uxth	r3, r3
 801dbfc:	22e3      	movs	r2, #227	; 0xe3
 801dbfe:	b289      	uxth	r1, r1
 801dc00:	2013      	movs	r0, #19
 801dc02:	f000 ff45 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
 801dc06:	8839      	ldrh	r1, [r7, #0]
 801dc08:	8833      	ldrh	r3, [r6, #0]
 801dc0a:	fbb1 f1f4 	udiv	r1, r1, r4
 801dc0e:	f24f 52b9 	movw	r2, #62905	; 0xf5b9
 801dc12:	fbb3 f3f4 	udiv	r3, r3, r4
 801dc16:	314a      	adds	r1, #74	; 0x4a
 801dc18:	334a      	adds	r3, #74	; 0x4a
 801dc1a:	9200      	str	r2, [sp, #0]
 801dc1c:	b29b      	uxth	r3, r3
 801dc1e:	22e3      	movs	r2, #227	; 0xe3
 801dc20:	b289      	uxth	r1, r1
 801dc22:	2013      	movs	r0, #19
 801dc24:	f000 ff34 	bl	801ea90 <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801dc28:	f641 3346 	movw	r3, #6982	; 0x1b46
 801dc2c:	8831      	ldrh	r1, [r6, #0]
 801dc2e:	fbb1 f1f4 	udiv	r1, r1, r4
 801dc32:	314a      	adds	r1, #74	; 0x4a
 801dc34:	9300      	str	r3, [sp, #0]
 801dc36:	22e3      	movs	r2, #227	; 0xe3
 801dc38:	f240 1397 	movw	r3, #407	; 0x197
 801dc3c:	b289      	uxth	r1, r1
 801dc3e:	2013      	movs	r0, #19
 801dc40:	e771      	b.n	801db26 <Spectral_PAR_Range+0x96>
 801dc42:	bf00      	nop
 801dc44:	20091332 	.word	0x20091332
 801dc48:	20091558 	.word	0x20091558
 801dc4c:	20091330 	.word	0x20091330
 801dc50:	200913f4 	.word	0x200913f4

0801dc54 <Spectral_Axes_Text>:


void Spectral_Axes_Text(uint8_t direction){
 801dc54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char buffer[4] = {0};
 801dc56:	ac02      	add	r4, sp, #8
 801dc58:	2300      	movs	r3, #0
 801dc5a:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	if (direction == 0x00)
 801dc5e:	4606      	mov	r6, r0
 801dc60:	4d67      	ldr	r5, [pc, #412]	; (801de00 <Spectral_Axes_Text+0x1ac>)
 801dc62:	2800      	cmp	r0, #0
 801dc64:	d162      	bne.n	801dd2c <Spectral_Axes_Text+0xd8>
	{
		TFT_SetTextColor(TFT_White);
 801dc66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801dc6a:	f001 f9bb 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801dc6e:	2063      	movs	r0, #99	; 0x63
 801dc70:	f001 f9be 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801dc74:	4863      	ldr	r0, [pc, #396]	; (801de04 <Spectral_Axes_Text+0x1b0>)
 801dc76:	f001 f9af 	bl	801efd8 <TFT_SetFont>

		TFT_DrawChar(5, 410, '0');
 801dc7a:	2230      	movs	r2, #48	; 0x30
 801dc7c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801dc80:	2005      	movs	r0, #5
 801dc82:	f001 fa9f 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(7, 257, '.');
 801dc86:	222e      	movs	r2, #46	; 0x2e
 801dc88:	f240 1101 	movw	r1, #257	; 0x101
 801dc8c:	2007      	movs	r0, #7
 801dc8e:	f001 fa99 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(3, 257, '0');
 801dc92:	2230      	movs	r2, #48	; 0x30
 801dc94:	f240 1101 	movw	r1, #257	; 0x101
 801dc98:	2003      	movs	r0, #3
 801dc9a:	f001 fa93 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(11, 257, '5');
 801dc9e:	2235      	movs	r2, #53	; 0x35
 801dca0:	f240 1101 	movw	r1, #257	; 0x101
 801dca4:	200b      	movs	r0, #11
 801dca6:	f001 fa8d 	bl	801f1c4 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 801dcaa:	2231      	movs	r2, #49	; 0x31
 801dcac:	2169      	movs	r1, #105	; 0x69
 801dcae:	4630      	mov	r0, r6
 801dcb0:	f001 fa88 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '.');
 801dcb4:	222e      	movs	r2, #46	; 0x2e
 801dcb6:	2169      	movs	r1, #105	; 0x69
 801dcb8:	2004      	movs	r0, #4
 801dcba:	f001 fa83 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 801dcbe:	2230      	movs	r2, #48	; 0x30
 801dcc0:	2169      	movs	r1, #105	; 0x69
 801dcc2:	2009      	movs	r0, #9
 801dcc4:	f001 fa7e 	bl	801f1c4 <TFT_DrawChar>
		
		
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801dcc8:	882a      	ldrh	r2, [r5, #0]
 801dcca:	494f      	ldr	r1, [pc, #316]	; (801de08 <Spectral_Axes_Text+0x1b4>)
 801dccc:	4620      	mov	r0, r4
 801dcce:	f004 fd1f 	bl	8022710 <sprintf>
		TFT_DisplayString(11, 416, (uint8_t *)buffer, LEFT_MODE);
 801dcd2:	2303      	movs	r3, #3
 801dcd4:	4622      	mov	r2, r4
 801dcd6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801dcda:	200b      	movs	r0, #11
 801dcdc:	f001 fae8 	bl	801f2b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801dce0:	886a      	ldrh	r2, [r5, #2]
 801dce2:	4949      	ldr	r1, [pc, #292]	; (801de08 <Spectral_Axes_Text+0x1b4>)
 801dce4:	4620      	mov	r0, r4
 801dce6:	f004 fd13 	bl	8022710 <sprintf>
		TFT_DisplayString(85, 416, (uint8_t *)buffer, LEFT_MODE);
 801dcea:	2303      	movs	r3, #3
 801dcec:	4622      	mov	r2, r4
 801dcee:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801dcf2:	2055      	movs	r0, #85	; 0x55
 801dcf4:	f001 fadc 	bl	801f2b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801dcf8:	88aa      	ldrh	r2, [r5, #4]
 801dcfa:	4943      	ldr	r1, [pc, #268]	; (801de08 <Spectral_Axes_Text+0x1b4>)
 801dcfc:	4620      	mov	r0, r4
 801dcfe:	f004 fd07 	bl	8022710 <sprintf>
		TFT_DisplayString(165, 416, (uint8_t *)buffer, LEFT_MODE);
 801dd02:	2303      	movs	r3, #3
 801dd04:	4622      	mov	r2, r4
 801dd06:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801dd0a:	20a5      	movs	r0, #165	; 0xa5
 801dd0c:	f001 fad0 	bl	801f2b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801dd10:	88ea      	ldrh	r2, [r5, #6]
 801dd12:	493d      	ldr	r1, [pc, #244]	; (801de08 <Spectral_Axes_Text+0x1b4>)
 801dd14:	4620      	mov	r0, r4
 801dd16:	f004 fcfb 	bl	8022710 <sprintf>
		TFT_DisplayString(245, 416, (uint8_t *)buffer, LEFT_MODE);
 801dd1a:	2303      	movs	r3, #3
 801dd1c:	4622      	mov	r2, r4
 801dd1e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801dd22:	20f5      	movs	r0, #245	; 0xf5
 801dd24:	f001 fac4 	bl	801f2b0 <TFT_DisplayString>
		TFT_DrawChar(62, 43, '.');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 801dd28:	b003      	add	sp, #12
 801dd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd2c:	4f37      	ldr	r7, [pc, #220]	; (801de0c <Spectral_Axes_Text+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 801dd2e:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 801dd30:	bf14      	ite	ne
 801dd32:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 801dd34:	7038      	strbeq	r0, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801dd36:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 801dd3a:	bf18      	it	ne
 801dd3c:	703b      	strbne	r3, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801dd3e:	f001 f951 	bl	801efe4 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801dd42:	2063      	movs	r0, #99	; 0x63
 801dd44:	f001 f954 	bl	801eff0 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801dd48:	482e      	ldr	r0, [pc, #184]	; (801de04 <Spectral_Axes_Text+0x1b0>)
 801dd4a:	f001 f945 	bl	801efd8 <TFT_SetFont>
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801dd4e:	882a      	ldrh	r2, [r5, #0]
 801dd50:	492d      	ldr	r1, [pc, #180]	; (801de08 <Spectral_Axes_Text+0x1b4>)
 801dd52:	4620      	mov	r0, r4
 801dd54:	f004 fcdc 	bl	8022710 <sprintf>
		TFT_DisplayString(65, 258, (uint8_t *)buffer, LEFT_MODE);
 801dd58:	2303      	movs	r3, #3
 801dd5a:	4622      	mov	r2, r4
 801dd5c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801dd60:	2041      	movs	r0, #65	; 0x41
 801dd62:	f001 faa5 	bl	801f2b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801dd66:	886a      	ldrh	r2, [r5, #2]
 801dd68:	4927      	ldr	r1, [pc, #156]	; (801de08 <Spectral_Axes_Text+0x1b4>)
 801dd6a:	4620      	mov	r0, r4
 801dd6c:	f004 fcd0 	bl	8022710 <sprintf>
		TFT_DisplayString(165, 258, (uint8_t *)buffer, LEFT_MODE);
 801dd70:	2303      	movs	r3, #3
 801dd72:	4622      	mov	r2, r4
 801dd74:	f44f 7181 	mov.w	r1, #258	; 0x102
 801dd78:	20a5      	movs	r0, #165	; 0xa5
 801dd7a:	f001 fa99 	bl	801f2b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801dd7e:	88aa      	ldrh	r2, [r5, #4]
 801dd80:	4921      	ldr	r1, [pc, #132]	; (801de08 <Spectral_Axes_Text+0x1b4>)
 801dd82:	4620      	mov	r0, r4
 801dd84:	f004 fcc4 	bl	8022710 <sprintf>
		TFT_DisplayString(265, 258, (uint8_t *)buffer, LEFT_MODE);
 801dd88:	2303      	movs	r3, #3
 801dd8a:	4622      	mov	r2, r4
 801dd8c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801dd90:	f240 1009 	movw	r0, #265	; 0x109
 801dd94:	f001 fa8c 	bl	801f2b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801dd98:	88ea      	ldrh	r2, [r5, #6]
 801dd9a:	491b      	ldr	r1, [pc, #108]	; (801de08 <Spectral_Axes_Text+0x1b4>)
 801dd9c:	4620      	mov	r0, r4
 801dd9e:	f004 fcb7 	bl	8022710 <sprintf>
		TFT_DisplayString(365, 258, (uint8_t *)buffer, LEFT_MODE);
 801dda2:	2303      	movs	r3, #3
 801dda4:	4622      	mov	r2, r4
 801dda6:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ddaa:	f240 106d 	movw	r0, #365	; 0x16d
 801ddae:	f001 fa7f 	bl	801f2b0 <TFT_DisplayString>
		TFT_DrawChar(65, 250, '0');
 801ddb2:	2230      	movs	r2, #48	; 0x30
 801ddb4:	21fa      	movs	r1, #250	; 0xfa
 801ddb6:	2041      	movs	r0, #65	; 0x41
 801ddb8:	f001 fa04 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(57, 149, '0');
 801ddbc:	2230      	movs	r2, #48	; 0x30
 801ddbe:	2195      	movs	r1, #149	; 0x95
 801ddc0:	2039      	movs	r0, #57	; 0x39
 801ddc2:	f001 f9ff 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(62, 149, '.');
 801ddc6:	222e      	movs	r2, #46	; 0x2e
 801ddc8:	2195      	movs	r1, #149	; 0x95
 801ddca:	203e      	movs	r0, #62	; 0x3e
 801ddcc:	f001 f9fa 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(67, 149, '5');
 801ddd0:	2235      	movs	r2, #53	; 0x35
 801ddd2:	2195      	movs	r1, #149	; 0x95
 801ddd4:	2043      	movs	r0, #67	; 0x43
 801ddd6:	f001 f9f5 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 801ddda:	2231      	movs	r2, #49	; 0x31
 801dddc:	212b      	movs	r1, #43	; 0x2b
 801ddde:	2039      	movs	r0, #57	; 0x39
 801dde0:	f001 f9f0 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '.');
 801dde4:	222e      	movs	r2, #46	; 0x2e
 801dde6:	212b      	movs	r1, #43	; 0x2b
 801dde8:	203e      	movs	r0, #62	; 0x3e
 801ddea:	f001 f9eb 	bl	801f1c4 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 801ddee:	2230      	movs	r2, #48	; 0x30
 801ddf0:	212b      	movs	r1, #43	; 0x2b
 801ddf2:	2043      	movs	r0, #67	; 0x43
 801ddf4:	f001 f9e6 	bl	801f1c4 <TFT_DrawChar>
		TFT_direction = 0x00;
 801ddf8:	2300      	movs	r3, #0
 801ddfa:	703b      	strb	r3, [r7, #0]
}
 801ddfc:	e794      	b.n	801dd28 <Spectral_Axes_Text+0xd4>
 801ddfe:	bf00      	nop
 801de00:	200511ec 	.word	0x200511ec
 801de04:	20000210 	.word	0x20000210
 801de08:	080341d3 	.word	0x080341d3
 801de0c:	20005218 	.word	0x20005218

0801de10 <Spectral_DrawGraph_Const>:
		memset(graph_data_old, 0, sizeof(graph_data_old));	
}


void Spectral_DrawGraph_Const(uint16_t ZeroX, uint16_t ZeroY, uint16_t *GraphData, uint16_t color, uint8_t direction)
{
 801de10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de14:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		uint16_t i, j = 0;
		uint16_t graph_data[335];
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801de18:	f1b8 0f00 	cmp.w	r8, #0
 801de1c:	bf0c      	ite	eq
 801de1e:	f04f 09f0 	moveq.w	r9, #240	; 0xf0
 801de22:	f44f 79a5 	movne.w	r9, #330	; 0x14a
{
 801de26:	4682      	mov	sl, r0
 801de28:	461f      	mov	r7, r3
 801de2a:	4614      	mov	r4, r2
 801de2c:	eb02 0649 	add.w	r6, r2, r9, lsl #1
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801de30:	2500      	movs	r5, #0
		uint8_t	step = (direction == 0x00)? 4 :3;
	
		for(i = 0; i < graph_lenht; i++)
	{
		if(direction == 0x00){
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801de32:	f100 0b01 	add.w	fp, r0, #1
 801de36:	b2a8      	uxth	r0, r5
		if(direction == 0x00){
 801de38:	f1b8 0f00 	cmp.w	r8, #0
 801de3c:	d10e      	bne.n	801de5c <Spectral_DrawGraph_Const+0x4c>
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801de3e:	8863      	ldrh	r3, [r4, #2]
 801de40:	8821      	ldrh	r1, [r4, #0]
 801de42:	eb00 020b 	add.w	r2, r0, fp
 801de46:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801de4a:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801de4e:	4450      	add	r0, sl
		else if(direction == 0x01)
		{
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801de50:	9700      	str	r7, [sp, #0]
 801de52:	b29b      	uxth	r3, r3
 801de54:	b292      	uxth	r2, r2
 801de56:	b289      	uxth	r1, r1
 801de58:	b280      	uxth	r0, r0
 801de5a:	e013      	b.n	801de84 <Spectral_DrawGraph_Const+0x74>
		else if(direction == 0x01)
 801de5c:	f1b8 0f01 	cmp.w	r8, #1
 801de60:	d11d      	bne.n	801de9e <Spectral_DrawGraph_Const+0x8e>
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801de62:	8872      	ldrh	r2, [r6, #2]
 801de64:	f8b6 e000 	ldrh.w	lr, [r6]
 801de68:	9700      	str	r7, [sp, #0]
 801de6a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801de6e:	f100 0149 	add.w	r1, r0, #73	; 0x49
 801de72:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801de76:	f1ce 0efd 	rsb	lr, lr, #253	; 0xfd
 801de7a:	b29b      	uxth	r3, r3
 801de7c:	b292      	uxth	r2, r2
 801de7e:	b289      	uxth	r1, r1
 801de80:	fa1f f08e 	uxth.w	r0, lr
 801de84:	3501      	adds	r5, #1
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801de86:	f000 fd9b 	bl	801e9c0 <TFT_DrawLine>
		for(i = 0; i < graph_lenht; i++)
 801de8a:	b2ab      	uxth	r3, r5
 801de8c:	4599      	cmp	r9, r3
 801de8e:	f104 0402 	add.w	r4, r4, #2
 801de92:	f1a6 0602 	sub.w	r6, r6, #2
 801de96:	d8ce      	bhi.n	801de36 <Spectral_DrawGraph_Const+0x26>
	}
}
 801de98:	b003      	add	sp, #12
 801de9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801de9e:	f100 034d 	add.w	r3, r0, #77	; 0x4d
 801dea2:	8862      	ldrh	r2, [r4, #2]
 801dea4:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 801dea8:	8820      	ldrh	r0, [r4, #0]
 801deaa:	3212      	adds	r2, #18
 801deac:	3012      	adds	r0, #18
 801deae:	e7cf      	b.n	801de50 <Spectral_DrawGraph_Const+0x40>

0801deb0 <Spectral_DrawGraph_Line2>:
				flag_spectral = 0;}
					}
}

void Spectral_DrawGraph_Line2(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint16_t color, uint8_t direction)
{
 801deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deb4:	b085      	sub	sp, #20
 801deb6:	4699      	mov	r9, r3
 801deb8:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    float buf_pix;
    uint16_t i, j = 0;
    uint16_t graph_data[335];
    uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801debc:	2c00      	cmp	r4, #0
 801debe:	bf0c      	ite	eq
 801dec0:	23f0      	moveq	r3, #240	; 0xf0
 801dec2:	f44f 73a5 	movne.w	r3, #330	; 0x14a
 801dec6:	9302      	str	r3, [sp, #8]
    uint8_t    step = (direction == 0x00)? 4 :3;
    uint16_t  jj = 0, ii = 0;

//    screen_cnt++;
//	screen_cnt > 200 ||
    if( direction != Rotation_Screen_Spectral_Old2){
 801dec8:	4b41      	ldr	r3, [pc, #260]	; (801dfd0 <Spectral_DrawGraph_Line2+0x120>)
{
 801deca:	4616      	mov	r6, r2
    if( direction != Rotation_Screen_Spectral_Old2){
 801decc:	781a      	ldrb	r2, [r3, #0]
 801dece:	42a2      	cmp	r2, r4
{
 801ded0:	4682      	mov	sl, r0
    if( direction != Rotation_Screen_Spectral_Old2){
 801ded2:	d01a      	beq.n	801df0a <Spectral_DrawGraph_Line2+0x5a>
			Rotation_Screen_Spectral_Old2 = direction;
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801ded4:	2563      	movs	r5, #99	; 0x63
			Rotation_Screen_Spectral_Old2 = direction;
 801ded6:	701c      	strb	r4, [r3, #0]
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801ded8:	f240 120f 	movw	r2, #271	; 0x10f
 801dedc:	f240 13a5 	movw	r3, #421	; 0x1a5
 801dee0:	9500      	str	r5, [sp, #0]
 801dee2:	2137      	movs	r1, #55	; 0x37
 801dee4:	2001      	movs	r0, #1
 801dee6:	f000 fdd3 	bl	801ea90 <TFT_FillRectangle>
        if(Graph_Field&PPF_Bands)
 801deea:	4b3a      	ldr	r3, [pc, #232]	; (801dfd4 <Spectral_DrawGraph_Line2+0x124>)
 801deec:	781b      	ldrb	r3, [r3, #0]
 801deee:	07db      	lsls	r3, r3, #31
 801def0:	d53b      	bpl.n	801df6a <Spectral_DrawGraph_Line2+0xba>
        {
            Spectral_PAR_Range(direction);
 801def2:	4620      	mov	r0, r4
 801def4:	f7ff fdcc 	bl	801da90 <Spectral_PAR_Range>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
        }

    Spectral_Axes(direction);
 801def8:	4620      	mov	r0, r4
 801defa:	f7ff fcfb 	bl	801d8f4 <Spectral_Axes>
    Spectral_Axes_Text(direction);
 801defe:	4620      	mov	r0, r4
 801df00:	f7ff fea8 	bl	801dc54 <Spectral_Axes_Text>
						
    screen_cnt = 0;
 801df04:	4b34      	ldr	r3, [pc, #208]	; (801dfd8 <Spectral_DrawGraph_Line2+0x128>)
 801df06:	2200      	movs	r2, #0
 801df08:	801a      	strh	r2, [r3, #0]
    }
    flag_refresh = 1;
 801df0a:	4a34      	ldr	r2, [pc, #208]	; (801dfdc <Spectral_DrawGraph_Line2+0x12c>)
        {
            flag_spectral = 1;
           DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
            flag_spectral = 0;
        } else if(direction == 0x02)
				{flag_spectral = 1; 
 801df0c:	4f34      	ldr	r7, [pc, #208]	; (801dfe0 <Spectral_DrawGraph_Line2+0x130>)
    flag_refresh = 1;
 801df0e:	2301      	movs	r3, #1
 801df10:	7013      	strb	r3, [r2, #0]
    i_coord = 0;
 801df12:	4a34      	ldr	r2, [pc, #208]	; (801dfe4 <Spectral_DrawGraph_Line2+0x134>)
				{flag_spectral = 1; 
 801df14:	9303      	str	r3, [sp, #12]
    i_coord = 0;
 801df16:	2500      	movs	r5, #0
 801df18:	8015      	strh	r5, [r2, #0]
 801df1a:	9a02      	ldr	r2, [sp, #8]
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
				flag_spectral = 0;}
 801df1c:	46ab      	mov	fp, r5
 801df1e:	eb06 0842 	add.w	r8, r6, r2, lsl #1
        if(direction == 0x00){
 801df22:	bb64      	cbnz	r4, 801df7e <Spectral_DrawGraph_Line2+0xce>
            flag_spectral = 1;
 801df24:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801df28:	703b      	strb	r3, [r7, #0]
						DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);
 801df2a:	8873      	ldrh	r3, [r6, #2]
 801df2c:	8831      	ldrh	r1, [r6, #0]
 801df2e:	f8cd 9000 	str.w	r9, [sp]
 801df32:	b2a8      	uxth	r0, r5
 801df34:	f10a 0201 	add.w	r2, sl, #1
 801df38:	4402      	add	r2, r0
 801df3a:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801df3e:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801df42:	4450      	add	r0, sl
 801df44:	b29b      	uxth	r3, r3
 801df46:	b292      	uxth	r2, r2
 801df48:	b289      	uxth	r1, r1
 801df4a:	b280      	uxth	r0, r0
 801df4c:	f001 f9fe 	bl	801f34c <DrawLineX>
            flag_spectral = 0;
 801df50:	703c      	strb	r4, [r7, #0]
 801df52:	3501      	adds	r5, #1
    for(i = 0; i < graph_lenht; i++)
 801df54:	9a02      	ldr	r2, [sp, #8]
 801df56:	b2ab      	uxth	r3, r5
 801df58:	429a      	cmp	r2, r3
 801df5a:	f106 0602 	add.w	r6, r6, #2
 801df5e:	f1a8 0802 	sub.w	r8, r8, #2
 801df62:	d8de      	bhi.n	801df22 <Spectral_DrawGraph_Line2+0x72>
					}
}
 801df64:	b005      	add	sp, #20
 801df66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
 801df6a:	9500      	str	r5, [sp, #0]
 801df6c:	f240 13a5 	movw	r3, #421	; 0x1a5
 801df70:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801df74:	2137      	movs	r1, #55	; 0x37
 801df76:	2005      	movs	r0, #5
 801df78:	f000 fd8a 	bl	801ea90 <TFT_FillRectangle>
 801df7c:	e7bc      	b.n	801def8 <Spectral_DrawGraph_Line2+0x48>
        else if(direction == 0x01)
 801df7e:	2c01      	cmp	r4, #1
 801df80:	d117      	bne.n	801dfb2 <Spectral_DrawGraph_Line2+0x102>
            flag_spectral = 1;
 801df82:	703c      	strb	r4, [r7, #0]
           DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801df84:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801df88:	f8b8 0000 	ldrh.w	r0, [r8]
 801df8c:	b2a9      	uxth	r1, r5
 801df8e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 801df92:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801df96:	3149      	adds	r1, #73	; 0x49
 801df98:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
 801df9c:	f8cd 9000 	str.w	r9, [sp]
 801dfa0:	b29b      	uxth	r3, r3
 801dfa2:	b292      	uxth	r2, r2
 801dfa4:	b289      	uxth	r1, r1
 801dfa6:	b280      	uxth	r0, r0
 801dfa8:	f001 f9d0 	bl	801f34c <DrawLineX>
				flag_spectral = 0;}
 801dfac:	f887 b000 	strb.w	fp, [r7]
 801dfb0:	e7cf      	b.n	801df52 <Spectral_DrawGraph_Line2+0xa2>
        } else if(direction == 0x02)
 801dfb2:	2c02      	cmp	r4, #2
 801dfb4:	d1cd      	bne.n	801df52 <Spectral_DrawGraph_Line2+0xa2>
				{flag_spectral = 1; 
 801dfb6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801dfba:	703b      	strb	r3, [r7, #0]
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
 801dfbc:	8872      	ldrh	r2, [r6, #2]
 801dfbe:	8830      	ldrh	r0, [r6, #0]
 801dfc0:	b2a9      	uxth	r1, r5
 801dfc2:	f101 034d 	add.w	r3, r1, #77	; 0x4d
 801dfc6:	3212      	adds	r2, #18
 801dfc8:	314c      	adds	r1, #76	; 0x4c
 801dfca:	3012      	adds	r0, #18
 801dfcc:	e7e6      	b.n	801df9c <Spectral_DrawGraph_Line2+0xec>
 801dfce:	bf00      	nop
 801dfd0:	2008eee9 	.word	0x2008eee9
 801dfd4:	2000527a 	.word	0x2000527a
 801dfd8:	200055a2 	.word	0x200055a2
 801dfdc:	2000559e 	.word	0x2000559e
 801dfe0:	2000559f 	.word	0x2000559f
 801dfe4:	200055a0 	.word	0x200055a0

0801dfe8 <Rabs_graph_to_display>:



uint16_t Line_Rabs_buff_graph2[355] = {0};
void Rabs_graph_to_display(uint8_t direction, float Line_Rabs_buff[])
{    
 801dfe8:	b570      	push	{r4, r5, r6, lr}
 801dfea:	ed2d 8b02 	vpush	{d8}
	uint8_t    step = (direction == 0x00)? 4 :3;
 801dfee:	eddf 7a23 	vldr	s15, [pc, #140]	; 801e07c <Rabs_graph_to_display+0x94>
 801dff2:	ed9f 8a23 	vldr	s16, [pc, #140]	; 801e080 <Rabs_graph_to_display+0x98>
 801dff6:	2800      	cmp	r0, #0
{    
 801dff8:	b082      	sub	sp, #8
 801dffa:	460e      	mov	r6, r1
	uint16_t  q = 0, res;
	float scale = (direction == 0x00)? 307 : 209; 
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801dffc:	f240 22c6 	movw	r2, #710	; 0x2c6
 801e000:	f04f 0100 	mov.w	r1, #0
 801e004:	481f      	ldr	r0, [pc, #124]	; (801e084 <Rabs_graph_to_display+0x9c>)
	uint8_t    step = (direction == 0x00)? 4 :3;
 801e006:	bf14      	ite	ne
 801e008:	2403      	movne	r4, #3
 801e00a:	2404      	moveq	r4, #4
 801e00c:	bf08      	it	eq
 801e00e:	eeb0 8a67 	vmoveq.f32	s16, s15
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801e012:	f004 fb74 	bl	80226fe <memset>

	for(uint16_t ic = 0; ic <= 1023; ic+=step){
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801e016:	4b1c      	ldr	r3, [pc, #112]	; (801e088 <Rabs_graph_to_display+0xa0>)
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801e018:	481a      	ldr	r0, [pc, #104]	; (801e084 <Rabs_graph_to_display+0x9c>)
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801e01a:	ed93 7a00 	vldr	s14, [r3]
 801e01e:	2100      	movs	r1, #0
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801e020:	460b      	mov	r3, r1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801e022:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801e026:	edd2 6a00 	vldr	s13, [r2]
 801e02a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e02e:	4423      	add	r3, r4
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801e030:	b28d      	uxth	r5, r1
 801e032:	b29b      	uxth	r3, r3
 801e034:	3101      	adds	r1, #1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801e036:	ee67 7a88 	vmul.f32	s15, s15, s16
 801e03a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e03e:	edcd 7a01 	vstr	s15, [sp, #4]
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801e042:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801e046:	ee07 2a90 	vmov	s15, r2
 801e04a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e04e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e056:	bf4c      	ite	mi
 801e058:	eefc 7ac8 	vcvtmi.u32.f32	s15, s16
 801e05c:	eefc 7ae7 	vcvtpl.u32.f32	s15, s15
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801e060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801e064:	edcd 7a01 	vstr	s15, [sp, #4]
 801e068:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801e06c:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801e070:	d3d7      	bcc.n	801e022 <Rabs_graph_to_display+0x3a>
		q++;
	}
}
 801e072:	b002      	add	sp, #8
 801e074:	ecbd 8b02 	vpop	{d8}
 801e078:	bd70      	pop	{r4, r5, r6, pc}
 801e07a:	bf00      	nop
 801e07c:	43998000 	.word	0x43998000
 801e080:	43510000 	.word	0x43510000
 801e084:	200052d8 	.word	0x200052d8
 801e088:	20091348 	.word	0x20091348

0801e08c <Refresh_screen_Graph>:

void Refresh_screen_Graph(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint8_t direction)
{   
 801e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e090:	b085      	sub	sp, #20
	uint16_t i = 0;
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801e092:	461d      	mov	r5, r3
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);

        } else if(direction == 0x02)
				{
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801e094:	f8df 8350 	ldr.w	r8, [pc, #848]	; 801e3e8 <Refresh_screen_Graph+0x35c>
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801e098:	2b00      	cmp	r3, #0
 801e09a:	bf0c      	ite	eq
 801e09c:	23f0      	moveq	r3, #240	; 0xf0
 801e09e:	f44f 73a5 	movne.w	r3, #330	; 0x14a
{   
 801e0a2:	4682      	mov	sl, r0
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801e0a4:	9303      	str	r3, [sp, #12]
 801e0a6:	4616      	mov	r6, r2
 801e0a8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801e0ac:	2400      	movs	r4, #0
        if(direction == 0x00){
 801e0ae:	2d00      	cmp	r5, #0
 801e0b0:	f040 80a0 	bne.w	801e1f4 <Refresh_screen_Graph+0x168>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(68, 18+PARGraph_G/4, 375, 20+PARGraph_G/4, TFT_PAR_Green);
 801e0b4:	f898 3000 	ldrb.w	r3, [r8]
 801e0b8:	07db      	lsls	r3, r3, #31
 801e0ba:	d529      	bpl.n	801e110 <Refresh_screen_Graph+0x84>
 801e0bc:	4bc6      	ldr	r3, [pc, #792]	; (801e3d8 <Refresh_screen_Graph+0x34c>)
 801e0be:	8819      	ldrh	r1, [r3, #0]
 801e0c0:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801e0c4:	0889      	lsrs	r1, r1, #2
 801e0c6:	9300      	str	r3, [sp, #0]
 801e0c8:	f240 1277 	movw	r2, #375	; 0x177
 801e0cc:	f101 0314 	add.w	r3, r1, #20
 801e0d0:	2044      	movs	r0, #68	; 0x44
 801e0d2:	3112      	adds	r1, #18
 801e0d4:	f000 fa6a 	bl	801e5ac <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_R/4, 375, 20+PARGraph_R/4, TFT_PAR_Red);
 801e0d8:	4bc0      	ldr	r3, [pc, #768]	; (801e3dc <Refresh_screen_Graph+0x350>)
 801e0da:	8819      	ldrh	r1, [r3, #0]
 801e0dc:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801e0e0:	0889      	lsrs	r1, r1, #2
 801e0e2:	9300      	str	r3, [sp, #0]
 801e0e4:	f240 1277 	movw	r2, #375	; 0x177
 801e0e8:	f101 0314 	add.w	r3, r1, #20
 801e0ec:	2044      	movs	r0, #68	; 0x44
 801e0ee:	3112      	adds	r1, #18
 801e0f0:	f000 fa5c 	bl	801e5ac <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_IR/4, 375, 20+PARGraph_IR/4, TFT_PAR_IRed);}
 801e0f4:	4bba      	ldr	r3, [pc, #744]	; (801e3e0 <Refresh_screen_Graph+0x354>)
 801e0f6:	8819      	ldrh	r1, [r3, #0]
 801e0f8:	f641 3346 	movw	r3, #6982	; 0x1b46
 801e0fc:	0889      	lsrs	r1, r1, #2
 801e0fe:	9300      	str	r3, [sp, #0]
 801e100:	f240 1277 	movw	r2, #375	; 0x177
 801e104:	f101 0314 	add.w	r3, r1, #20
 801e108:	2044      	movs	r0, #68	; 0x44
 801e10a:	3112      	adds	r1, #18
 801e10c:	f000 fa4e 	bl	801e5ac <TFT_FillRectangle_DMA>
 801e110:	b2a2      	uxth	r2, r4
 801e112:	f10a 0301 	add.w	r3, sl, #1
 801e116:	eb02 000a 	add.w	r0, r2, sl
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801e11a:	8831      	ldrh	r1, [r6, #0]
 801e11c:	f898 7000 	ldrb.w	r7, [r8]
 801e120:	441a      	add	r2, r3
 801e122:	8873      	ldrh	r3, [r6, #2]
 801e124:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801e128:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801e12c:	07ff      	lsls	r7, r7, #31
 801e12e:	b280      	uxth	r0, r0
 801e130:	b289      	uxth	r1, r1
 801e132:	b292      	uxth	r2, r2
 801e134:	b29b      	uxth	r3, r3
 801e136:	f140 8161 	bpl.w	801e3fc <Refresh_screen_Graph+0x370>
 801e13a:	4faa      	ldr	r7, [pc, #680]	; (801e3e4 <Refresh_screen_Graph+0x358>)
 801e13c:	883f      	ldrh	r7, [r7, #0]
 801e13e:	08bf      	lsrs	r7, r7, #2
 801e140:	eb0a 0c04 	add.w	ip, sl, r4
 801e144:	3712      	adds	r7, #18
 801e146:	4567      	cmp	r7, ip
 801e148:	f280 8158 	bge.w	801e3fc <Refresh_screen_Graph+0x370>
 801e14c:	4fa2      	ldr	r7, [pc, #648]	; (801e3d8 <Refresh_screen_Graph+0x34c>)
 801e14e:	883f      	ldrh	r7, [r7, #0]
 801e150:	08bf      	lsrs	r7, r7, #2
 801e152:	3712      	adds	r7, #18
 801e154:	4567      	cmp	r7, ip
 801e156:	f280 8153 	bge.w	801e400 <Refresh_screen_Graph+0x374>
																																							(ZeroX+i < 19+PARGraph_R/4) ? TFT_PAR_Green :
 801e15a:	4fa0      	ldr	r7, [pc, #640]	; (801e3dc <Refresh_screen_Graph+0x350>)
 801e15c:	883f      	ldrh	r7, [r7, #0]
 801e15e:	08bf      	lsrs	r7, r7, #2
 801e160:	3712      	adds	r7, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801e162:	4567      	cmp	r7, ip
 801e164:	f280 814f 	bge.w	801e406 <Refresh_screen_Graph+0x37a>
																																							(ZeroX+i < 19+PARGraph_IR/4) ? TFT_PAR_Red : TFT_PAR_IRed) : TFT_Black_Bkgr);
 801e168:	4f9d      	ldr	r7, [pc, #628]	; (801e3e0 <Refresh_screen_Graph+0x354>)
 801e16a:	f8b7 e000 	ldrh.w	lr, [r7]
 801e16e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801e172:	f10e 0e12 	add.w	lr, lr, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801e176:	f641 3b46 	movw	fp, #6982	; 0x1b46
 801e17a:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801e17e:	45e6      	cmp	lr, ip
 801e180:	bfb8      	it	lt
 801e182:	465f      	movlt	r7, fp
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
					
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801e184:	9700      	str	r7, [sp, #0]
 801e186:	f001 f8e1 	bl	801f34c <DrawLineX>
 801e18a:	3401      	adds	r4, #1
	 for(i = 0; i < graph_lenht; i++)
 801e18c:	9a03      	ldr	r2, [sp, #12]
 801e18e:	b2a3      	uxth	r3, r4
 801e190:	429a      	cmp	r2, r3
 801e192:	f106 0602 	add.w	r6, r6, #2
 801e196:	f1a9 0902 	sub.w	r9, r9, #2
 801e19a:	d888      	bhi.n	801e0ae <Refresh_screen_Graph+0x22>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
           	:TFT_Black_Bkgr);
				}
			}
		Spectral_Axes(direction);
		 if(Graph_Field&V_lambda)
 801e19c:	4c92      	ldr	r4, [pc, #584]	; (801e3e8 <Refresh_screen_Graph+0x35c>)
		Spectral_Axes(direction);
 801e19e:	4628      	mov	r0, r5
 801e1a0:	f7ff fba8 	bl	801d8f4 <Spectral_Axes>
		 if(Graph_Field&V_lambda)
 801e1a4:	7822      	ldrb	r2, [r4, #0]
 801e1a6:	0752      	lsls	r2, r2, #29
 801e1a8:	d50e      	bpl.n	801e1c8 <Refresh_screen_Graph+0x13c>
			{
					Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, direction);
 801e1aa:	2114      	movs	r1, #20
 801e1ac:	4608      	mov	r0, r1
 801e1ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801e1b2:	4a8e      	ldr	r2, [pc, #568]	; (801e3ec <Refresh_screen_Graph+0x360>)
 801e1b4:	9500      	str	r5, [sp, #0]
 801e1b6:	f7ff fe2b 	bl	801de10 <Spectral_DrawGraph_Const>
					Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, direction);
 801e1ba:	2114      	movs	r1, #20
 801e1bc:	9500      	str	r5, [sp, #0]
 801e1be:	231f      	movs	r3, #31
 801e1c0:	4a8b      	ldr	r2, [pc, #556]	; (801e3f0 <Refresh_screen_Graph+0x364>)
 801e1c2:	4608      	mov	r0, r1
 801e1c4:	f7ff fe24 	bl	801de10 <Spectral_DrawGraph_Const>
					}
			
			if(Graph_Field&EbEr_graph)
 801e1c8:	7823      	ldrb	r3, [r4, #0]
 801e1ca:	079b      	lsls	r3, r3, #30
 801e1cc:	d50f      	bpl.n	801e1ee <Refresh_screen_Graph+0x162>
					{
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, direction);
 801e1ce:	2114      	movs	r1, #20
 801e1d0:	4608      	mov	r0, r1
 801e1d2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 801e1d6:	4a87      	ldr	r2, [pc, #540]	; (801e3f4 <Refresh_screen_Graph+0x368>)
 801e1d8:	9500      	str	r5, [sp, #0]
 801e1da:	f7ff fe19 	bl	801de10 <Spectral_DrawGraph_Const>
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, direction);
 801e1de:	2114      	movs	r1, #20
 801e1e0:	9500      	str	r5, [sp, #0]
 801e1e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801e1e6:	4a84      	ldr	r2, [pc, #528]	; (801e3f8 <Refresh_screen_Graph+0x36c>)
 801e1e8:	4608      	mov	r0, r1
 801e1ea:	f7ff fe11 	bl	801de10 <Spectral_DrawGraph_Const>
					}
 801e1ee:	b005      	add	sp, #20
 801e1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(direction == 0x01)
 801e1f4:	2d01      	cmp	r5, #1
 801e1f6:	d178      	bne.n	801e2ea <Refresh_screen_Graph+0x25e>
				if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(76+PARGraph_G/3, 45, 79+PARGraph_G/3,253, TFT_PAR_Green);
 801e1f8:	f898 3000 	ldrb.w	r3, [r8]
 801e1fc:	07db      	lsls	r3, r3, #31
 801e1fe:	d530      	bpl.n	801e262 <Refresh_screen_Graph+0x1d6>
 801e200:	4b75      	ldr	r3, [pc, #468]	; (801e3d8 <Refresh_screen_Graph+0x34c>)
 801e202:	2703      	movs	r7, #3
 801e204:	8818      	ldrh	r0, [r3, #0]
 801e206:	fbb0 f0f7 	udiv	r0, r0, r7
 801e20a:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801e20e:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801e212:	304c      	adds	r0, #76	; 0x4c
 801e214:	9300      	str	r3, [sp, #0]
 801e216:	b292      	uxth	r2, r2
 801e218:	23fd      	movs	r3, #253	; 0xfd
 801e21a:	212d      	movs	r1, #45	; 0x2d
 801e21c:	b280      	uxth	r0, r0
 801e21e:	f000 f9c5 	bl	801e5ac <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_R/3, 45, 79+PARGraph_R/3,253, TFT_PAR_Red);
 801e222:	4b6e      	ldr	r3, [pc, #440]	; (801e3dc <Refresh_screen_Graph+0x350>)
 801e224:	8818      	ldrh	r0, [r3, #0]
 801e226:	fbb0 f0f7 	udiv	r0, r0, r7
 801e22a:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801e22e:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801e232:	304c      	adds	r0, #76	; 0x4c
 801e234:	9300      	str	r3, [sp, #0]
 801e236:	b292      	uxth	r2, r2
 801e238:	23fd      	movs	r3, #253	; 0xfd
 801e23a:	212d      	movs	r1, #45	; 0x2d
 801e23c:	b280      	uxth	r0, r0
 801e23e:	f000 f9b5 	bl	801e5ac <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_IR/3,45, 79+PARGraph_IR/3,253, TFT_PAR_IRed);}
 801e242:	4b67      	ldr	r3, [pc, #412]	; (801e3e0 <Refresh_screen_Graph+0x354>)
 801e244:	8818      	ldrh	r0, [r3, #0]
 801e246:	fbb0 f7f7 	udiv	r7, r0, r7
 801e24a:	f641 3346 	movw	r3, #6982	; 0x1b46
 801e24e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 801e252:	374c      	adds	r7, #76	; 0x4c
 801e254:	9300      	str	r3, [sp, #0]
 801e256:	b292      	uxth	r2, r2
 801e258:	23fd      	movs	r3, #253	; 0xfd
 801e25a:	212d      	movs	r1, #45	; 0x2d
 801e25c:	b2b8      	uxth	r0, r7
 801e25e:	f000 f9a5 	bl	801e5ac <TFT_FillRectangle_DMA>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801e262:	f8b9 0000 	ldrh.w	r0, [r9]
 801e266:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801e26a:	f898 7000 	ldrb.w	r7, [r8]
 801e26e:	b2a3      	uxth	r3, r4
 801e270:	f103 0149 	add.w	r1, r3, #73	; 0x49
 801e274:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
 801e278:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801e27c:	3348      	adds	r3, #72	; 0x48
 801e27e:	07ff      	lsls	r7, r7, #31
 801e280:	b280      	uxth	r0, r0
 801e282:	b289      	uxth	r1, r1
 801e284:	b292      	uxth	r2, r2
 801e286:	b29b      	uxth	r3, r3
 801e288:	f140 80b8 	bpl.w	801e3fc <Refresh_screen_Graph+0x370>
											   72+i+1 < 403-PARGraph_IR/3 ? TFT_PAR_IRed:
 801e28c:	4f54      	ldr	r7, [pc, #336]	; (801e3e0 <Refresh_screen_Graph+0x354>)
 801e28e:	f8b7 c000 	ldrh.w	ip, [r7]
 801e292:	f240 1793 	movw	r7, #403	; 0x193
 801e296:	f104 0b49 	add.w	fp, r4, #73	; 0x49
 801e29a:	f04f 0e03 	mov.w	lr, #3
 801e29e:	fbbc fcfe 	udiv	ip, ip, lr
 801e2a2:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801e2a6:	45dc      	cmp	ip, fp
 801e2a8:	dc19      	bgt.n	801e2de <Refresh_screen_Graph+0x252>
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
 801e2aa:	f8df c130 	ldr.w	ip, [pc, #304]	; 801e3dc <Refresh_screen_Graph+0x350>
 801e2ae:	f8bc c000 	ldrh.w	ip, [ip]
 801e2b2:	fbbc fcfe 	udiv	ip, ip, lr
 801e2b6:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801e2ba:	45dc      	cmp	ip, fp
 801e2bc:	dc12      	bgt.n	801e2e4 <Refresh_screen_Graph+0x258>
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801e2be:	f8df c118 	ldr.w	ip, [pc, #280]	; 801e3d8 <Refresh_screen_Graph+0x34c>
 801e2c2:	f8bc c000 	ldrh.w	ip, [ip]
 801e2c6:	fbbc fefe 	udiv	lr, ip, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801e2ca:	f242 2cb2 	movw	ip, #8882	; 0x22b2
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801e2ce:	eba7 0e0e 	sub.w	lr, r7, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801e2d2:	f64c 7738 	movw	r7, #53048	; 0xcf38
 801e2d6:	45de      	cmp	lr, fp
 801e2d8:	bfd8      	it	le
 801e2da:	4667      	movle	r7, ip
 801e2dc:	e752      	b.n	801e184 <Refresh_screen_Graph+0xf8>
 801e2de:	f641 3746 	movw	r7, #6982	; 0x1b46
 801e2e2:	e74f      	b.n	801e184 <Refresh_screen_Graph+0xf8>
 801e2e4:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801e2e8:	e74c      	b.n	801e184 <Refresh_screen_Graph+0xf8>
        } else if(direction == 0x02)
 801e2ea:	2d02      	cmp	r5, #2
 801e2ec:	f47f af4d 	bne.w	801e18a <Refresh_screen_Graph+0xfe>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801e2f0:	f898 3000 	ldrb.w	r3, [r8]
 801e2f4:	07db      	lsls	r3, r3, #31
 801e2f6:	d535      	bpl.n	801e364 <Refresh_screen_Graph+0x2d8>
 801e2f8:	4b37      	ldr	r3, [pc, #220]	; (801e3d8 <Refresh_screen_Graph+0x34c>)
 801e2fa:	f240 1795 	movw	r7, #405	; 0x195
 801e2fe:	8818      	ldrh	r0, [r3, #0]
 801e300:	f04f 0b03 	mov.w	fp, #3
 801e304:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801e308:	fbb0 f0fb 	udiv	r0, r0, fp
 801e30c:	1a3a      	subs	r2, r7, r0
 801e30e:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801e312:	9300      	str	r3, [sp, #0]
 801e314:	b292      	uxth	r2, r2
 801e316:	23e3      	movs	r3, #227	; 0xe3
 801e318:	2113      	movs	r1, #19
 801e31a:	b280      	uxth	r0, r0
 801e31c:	f000 f946 	bl	801e5ac <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
 801e320:	4b2e      	ldr	r3, [pc, #184]	; (801e3dc <Refresh_screen_Graph+0x350>)
 801e322:	8818      	ldrh	r0, [r3, #0]
 801e324:	fbb0 f0fb 	udiv	r0, r0, fp
 801e328:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801e32c:	1a3a      	subs	r2, r7, r0
 801e32e:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801e332:	9300      	str	r3, [sp, #0]
 801e334:	b292      	uxth	r2, r2
 801e336:	23e3      	movs	r3, #227	; 0xe3
 801e338:	2113      	movs	r1, #19
 801e33a:	b280      	uxth	r0, r0
 801e33c:	f000 f936 	bl	801e5ac <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
 801e340:	4b27      	ldr	r3, [pc, #156]	; (801e3e0 <Refresh_screen_Graph+0x354>)
 801e342:	8818      	ldrh	r0, [r3, #0]
 801e344:	fbb0 fbfb 	udiv	fp, r0, fp
 801e348:	f641 3346 	movw	r3, #6982	; 0x1b46
 801e34c:	eba7 020b 	sub.w	r2, r7, fp
 801e350:	f5cb 7bcc 	rsb	fp, fp, #408	; 0x198
 801e354:	9300      	str	r3, [sp, #0]
 801e356:	b292      	uxth	r2, r2
 801e358:	23e3      	movs	r3, #227	; 0xe3
 801e35a:	2113      	movs	r1, #19
 801e35c:	fa1f f08b 	uxth.w	r0, fp
 801e360:	f000 f924 	bl	801e5ac <TFT_FillRectangle_DMA>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801e364:	8830      	ldrh	r0, [r6, #0]
 801e366:	8872      	ldrh	r2, [r6, #2]
 801e368:	f898 7000 	ldrb.w	r7, [r8]
 801e36c:	b2a3      	uxth	r3, r4
 801e36e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 801e372:	3012      	adds	r0, #18
 801e374:	3212      	adds	r2, #18
 801e376:	334d      	adds	r3, #77	; 0x4d
 801e378:	07ff      	lsls	r7, r7, #31
 801e37a:	b280      	uxth	r0, r0
 801e37c:	b289      	uxth	r1, r1
 801e37e:	b292      	uxth	r2, r2
 801e380:	b29b      	uxth	r3, r3
 801e382:	d53b      	bpl.n	801e3fc <Refresh_screen_Graph+0x370>
 801e384:	4f17      	ldr	r7, [pc, #92]	; (801e3e4 <Refresh_screen_Graph+0x358>)
 801e386:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801e38a:	f8b7 e000 	ldrh.w	lr, [r7]
 801e38e:	2703      	movs	r7, #3
 801e390:	fbbe fef7 	udiv	lr, lr, r7
 801e394:	45e6      	cmp	lr, ip
 801e396:	dc31      	bgt.n	801e3fc <Refresh_screen_Graph+0x370>
           	(76+i < 74+PARGraph_G/3) ? TFT_PAR_Blue : 
 801e398:	f8df c03c 	ldr.w	ip, [pc, #60]	; 801e3d8 <Refresh_screen_Graph+0x34c>
 801e39c:	f104 0e02 	add.w	lr, r4, #2
 801e3a0:	f8bc c000 	ldrh.w	ip, [ip]
 801e3a4:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801e3a8:	45f4      	cmp	ip, lr
 801e3aa:	dc29      	bgt.n	801e400 <Refresh_screen_Graph+0x374>
           	(76+i < 74+PARGraph_R/3) ? TFT_PAR_Green : 
 801e3ac:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801e3dc <Refresh_screen_Graph+0x350>
 801e3b0:	f8bc c000 	ldrh.w	ip, [ip]
 801e3b4:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801e3b8:	45f4      	cmp	ip, lr
 801e3ba:	dc24      	bgt.n	801e406 <Refresh_screen_Graph+0x37a>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801e3bc:	f8df c020 	ldr.w	ip, [pc, #32]	; 801e3e0 <Refresh_screen_Graph+0x354>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801e3c0:	f641 3b46 	movw	fp, #6982	; 0x1b46
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801e3c4:	f8bc c000 	ldrh.w	ip, [ip]
 801e3c8:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801e3cc:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801e3d0:	45f4      	cmp	ip, lr
 801e3d2:	bfd8      	it	le
 801e3d4:	465f      	movle	r7, fp
 801e3d6:	e6d5      	b.n	801e184 <Refresh_screen_Graph+0xf8>
 801e3d8:	200913f4 	.word	0x200913f4
 801e3dc:	20091558 	.word	0x20091558
 801e3e0:	20091330 	.word	0x20091330
 801e3e4:	20091332 	.word	0x20091332
 801e3e8:	2000527a 	.word	0x2000527a
 801e3ec:	2008c5ea 	.word	0x2008c5ea
 801e3f0:	2008cb88 	.word	0x2008cb88
 801e3f4:	2008c8c2 	.word	0x2008c8c2
 801e3f8:	2008c324 	.word	0x2008c324
 801e3fc:	2763      	movs	r7, #99	; 0x63
 801e3fe:	e6c1      	b.n	801e184 <Refresh_screen_Graph+0xf8>
 801e400:	f242 27b2 	movw	r7, #8882	; 0x22b2
 801e404:	e6be      	b.n	801e184 <Refresh_screen_Graph+0xf8>
 801e406:	f64c 7738 	movw	r7, #53048	; 0xcf38
 801e40a:	e6bb      	b.n	801e184 <Refresh_screen_Graph+0xf8>

0801e40c <TS_IO_Read>:
{

  }

uint8_t TS_IO_Read(uint8_t DeviceAddr, uint8_t Reg)
{
 801e40c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 801e40e:	aa06      	add	r2, sp, #24
 801e410:	2300      	movs	r3, #0
 801e412:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x100);
 801e416:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e41a:	9302      	str	r3, [sp, #8]
 801e41c:	2301      	movs	r3, #1
 801e41e:	e88d 000c 	stmia.w	sp, {r2, r3}
 801e422:	460a      	mov	r2, r1
 801e424:	4601      	mov	r1, r0
 801e426:	4804      	ldr	r0, [pc, #16]	; (801e438 <TS_IO_Read+0x2c>)
 801e428:	f7e4 fc2a 	bl	8002c80 <HAL_I2C_Mem_Read>

  return read_value;
}
 801e42c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801e430:	b007      	add	sp, #28
 801e432:	f85d fb04 	ldr.w	pc, [sp], #4
 801e436:	bf00      	nop
 801e438:	20090fd0 	.word	0x20090fd0

0801e43c <TS_ReadID>:
  HAL_I2C_Mem_Write(&hi2c1, DeviceAddr, (uint8_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x100);
  if(status != HAL_OK) Error();
}

uint8_t TS_ReadID(uint8_t DeviceAddr)
{
 801e43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 801e43e:	2300      	movs	r3, #0
{
 801e440:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 801e442:	f88d 3007 	strb.w	r3, [sp, #7]
 801e446:	2403      	movs	r4, #3
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;

  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
  {
    ucReadId = TS_IO_Read(DeviceAddr, ID_G_CIPHER);
 801e448:	21a3      	movs	r1, #163	; 0xa3
 801e44a:	4628      	mov	r0, r5
 801e44c:	f7ff ffde 	bl	801e40c <TS_IO_Read>
 801e450:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == CHIP_ID)
 801e454:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e458:	3c01      	subs	r4, #1
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801e45a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    if(ucReadId == CHIP_ID)
 801e45e:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801e460:	d001      	beq.n	801e466 <TS_ReadID+0x2a>
 801e462:	2b0a      	cmp	r3, #10
 801e464:	d1f0      	bne.n	801e448 <TS_ReadID+0xc>
    {
      bFoundDevice = 1;
    }
  }
  return (ucReadId);
 801e466:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 801e46a:	b003      	add	sp, #12
 801e46c:	bd30      	pop	{r4, r5, pc}

0801e46e <Touch_Ini>:

void Touch_Ini(void)
{
 801e46e:	b508      	push	{r3, lr}
	if(TS_ReadID(TS_I2C_ADDRESS) != CHIP_ID) Error();
 801e470:	2070      	movs	r0, #112	; 0x70
 801e472:	f7ff ffe3 	bl	801e43c <TS_ReadID>
  HAL_Delay(200);
 801e476:	20c8      	movs	r0, #200	; 0xc8
}
 801e478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
 801e47c:	f7e2 bdd6 	b.w	800102c <HAL_Delay>

0801e480 <TS_Get_XY1>:

void TS_Get_XY1(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801e480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t coord = 0x0000;
	uint16_t temp;
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801e482:	b2c5      	uxtb	r5, r0
{
 801e484:	460e      	mov	r6, r1
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801e486:	4628      	mov	r0, r5
 801e488:	2103      	movs	r1, #3
{
 801e48a:	4617      	mov	r7, r2
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801e48c:	f7ff ffbe 	bl	801e40c <TS_IO_Read>
 801e490:	4c11      	ldr	r4, [pc, #68]	; (801e4d8 <TS_Get_XY1+0x58>)
 801e492:	0200      	lsls	r0, r0, #8
 801e494:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 801e498:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801e49a:	2104      	movs	r1, #4
 801e49c:	4628      	mov	r0, r5
 801e49e:	f7ff ffb5 	bl	801e40c <TS_IO_Read>
 801e4a2:	8823      	ldrh	r3, [r4, #0]
 801e4a4:	4318      	orrs	r0, r3
	
	if (Orientation90)
	{
		temp = coord;
		*Y = X_SIZE_Touch - coord;
 801e4a6:	4b0d      	ldr	r3, [pc, #52]	; (801e4dc <TS_Get_XY1+0x5c>)
 801e4a8:	881b      	ldrh	r3, [r3, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801e4aa:	b280      	uxth	r0, r0
 801e4ac:	8020      	strh	r0, [r4, #0]
		*Y = X_SIZE_Touch - coord;
 801e4ae:	1a18      	subs	r0, r3, r0
 801e4b0:	8038      	strh	r0, [r7, #0]
	}
	else{
		*X = coord;
	}
	
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_YH) << 8) & 0x0F00;
 801e4b2:	2105      	movs	r1, #5
 801e4b4:	4628      	mov	r0, r5
 801e4b6:	f7ff ffa9 	bl	801e40c <TS_IO_Read>
 801e4ba:	0200      	lsls	r0, r0, #8
 801e4bc:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 801e4c0:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801e4c2:	2106      	movs	r1, #6
 801e4c4:	4628      	mov	r0, r5
 801e4c6:	f7ff ffa1 	bl	801e40c <TS_IO_Read>
 801e4ca:	8823      	ldrh	r3, [r4, #0]
 801e4cc:	4318      	orrs	r0, r3
 801e4ce:	b280      	uxth	r0, r0
 801e4d0:	8020      	strh	r0, [r4, #0]
	
		if (Orientation90)
	{
		*X = coord;
 801e4d2:	8030      	strh	r0, [r6, #0]
 801e4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4d6:	bf00      	nop
 801e4d8:	200055a4 	.word	0x200055a4
 801e4dc:	20000a3e 	.word	0x20000a3e

0801e4e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801e4e0:	b500      	push	{lr}
 801e4e2:	b083      	sub	sp, #12
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 801e4e4:	2301      	movs	r3, #1
 801e4e6:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 801e4ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801e4ee:	2b01      	cmp	r3, #1
    return MSD_ERROR_SD_NOT_PRESENT;
 801e4f0:	bf18      	it	ne
 801e4f2:	2002      	movne	r0, #2
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801e4f4:	d002      	beq.n	801e4fc <BSP_SD_Init+0x1c>
}
 801e4f6:	b003      	add	sp, #12
 801e4f8:	f85d fb04 	ldr.w	pc, [sp], #4
  sd_state = HAL_SD_Init(&hsd1);
 801e4fc:	4806      	ldr	r0, [pc, #24]	; (801e518 <BSP_SD_Init+0x38>)
 801e4fe:	f7e7 fa1f 	bl	8005940 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801e502:	2800      	cmp	r0, #0
 801e504:	d1f7      	bne.n	801e4f6 <BSP_SD_Init+0x16>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801e506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801e50a:	4803      	ldr	r0, [pc, #12]	; (801e518 <BSP_SD_Init+0x38>)
 801e50c:	f7e7 f988 	bl	8005820 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 801e510:	3000      	adds	r0, #0
 801e512:	bf18      	it	ne
 801e514:	2001      	movne	r0, #1
 801e516:	e7ee      	b.n	801e4f6 <BSP_SD_Init+0x16>
 801e518:	20091070 	.word	0x20091070

0801e51c <BSP_SD_ReadBlocks_DMA>:
{
 801e51c:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801e51e:	4613      	mov	r3, r2
 801e520:	460a      	mov	r2, r1
 801e522:	4601      	mov	r1, r0
 801e524:	4803      	ldr	r0, [pc, #12]	; (801e534 <BSP_SD_ReadBlocks_DMA+0x18>)
 801e526:	f7e6 fd91 	bl	800504c <HAL_SD_ReadBlocks_DMA>
}
 801e52a:	3000      	adds	r0, #0
 801e52c:	bf18      	it	ne
 801e52e:	2001      	movne	r0, #1
 801e530:	bd08      	pop	{r3, pc}
 801e532:	bf00      	nop
 801e534:	20091070 	.word	0x20091070

0801e538 <BSP_SD_WriteBlocks_DMA>:
{
 801e538:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801e53a:	4613      	mov	r3, r2
 801e53c:	460a      	mov	r2, r1
 801e53e:	4601      	mov	r1, r0
 801e540:	4803      	ldr	r0, [pc, #12]	; (801e550 <BSP_SD_WriteBlocks_DMA+0x18>)
 801e542:	f7e6 fdfb 	bl	800513c <HAL_SD_WriteBlocks_DMA>
}
 801e546:	3000      	adds	r0, #0
 801e548:	bf18      	it	ne
 801e54a:	2001      	movne	r0, #1
 801e54c:	bd08      	pop	{r3, pc}
 801e54e:	bf00      	nop
 801e550:	20091070 	.word	0x20091070

0801e554 <BSP_SD_GetCardState>:
{
 801e554:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801e556:	4803      	ldr	r0, [pc, #12]	; (801e564 <BSP_SD_GetCardState+0x10>)
 801e558:	f7e7 fa2c 	bl	80059b4 <HAL_SD_GetCardState>
}
 801e55c:	3804      	subs	r0, #4
 801e55e:	bf18      	it	ne
 801e560:	2001      	movne	r0, #1
 801e562:	bd08      	pop	{r3, pc}
 801e564:	20091070 	.word	0x20091070

0801e568 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801e568:	4601      	mov	r1, r0
 801e56a:	4801      	ldr	r0, [pc, #4]	; (801e570 <BSP_SD_GetCardInfo+0x8>)
 801e56c:	f7e7 b944 	b.w	80057f8 <HAL_SD_GetCardInfo>
 801e570:	20091070 	.word	0x20091070

0801e574 <BSP_SD_WriteCpltCallback>:
 801e574:	4770      	bx	lr
 801e576:	bf00      	nop

0801e578 <HAL_SD_TxCpltCallback>:
{
 801e578:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801e57a:	f7ff fffb 	bl	801e574 <BSP_SD_WriteCpltCallback>
 801e57e:	bd08      	pop	{r3, pc}

0801e580 <BSP_SD_ReadCpltCallback>:
{
 801e580:	4770      	bx	lr
 801e582:	bf00      	nop

0801e584 <HAL_SD_RxCpltCallback>:
{
 801e584:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801e586:	f7ff fffb 	bl	801e580 <BSP_SD_ReadCpltCallback>
 801e58a:	bd08      	pop	{r3, pc}

0801e58c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801e58c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801e58e:	4903      	ldr	r1, [pc, #12]	; (801e59c <MX_FATFS_Init+0x10>)
 801e590:	4803      	ldr	r0, [pc, #12]	; (801e5a0 <MX_FATFS_Init+0x14>)
 801e592:	f7eb fdb9 	bl	800a108 <FATFS_LinkDriver>
 801e596:	4b03      	ldr	r3, [pc, #12]	; (801e5a4 <MX_FATFS_Init+0x18>)
 801e598:	7018      	strb	r0, [r3, #0]
 801e59a:	bd08      	pop	{r3, pc}
 801e59c:	2008eef0 	.word	0x2008eef0
 801e5a0:	080341ec 	.word	0x080341ec
 801e5a4:	2008eeec 	.word	0x2008eeec

0801e5a8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 801e5a8:	2000      	movs	r0, #0
 801e5aa:	4770      	bx	lr

0801e5ac <TFT_FillRectangle_DMA>:
		}
    }
}

void TFT_FillRectangle_DMA(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 801e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b0:	b083      	sub	sp, #12
  if(x1>x2) swap(x1,x2);
 801e5b2:	4290      	cmp	r0, r2
{
 801e5b4:	4606      	mov	r6, r0
 801e5b6:	468a      	mov	sl, r1
 801e5b8:	461f      	mov	r7, r3
 801e5ba:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
  if(x1>x2) swap(x1,x2);
 801e5be:	d901      	bls.n	801e5c4 <TFT_FillRectangle_DMA+0x18>
 801e5c0:	4616      	mov	r6, r2
 801e5c2:	4602      	mov	r2, r0
  if(y1>y2) swap(y1,y2);
 801e5c4:	45ba      	cmp	sl, r7
 801e5c6:	d902      	bls.n	801e5ce <TFT_FillRectangle_DMA+0x22>
 801e5c8:	4653      	mov	r3, sl
 801e5ca:	46ba      	mov	sl, r7
 801e5cc:	461f      	mov	r7, r3

  uint32_t addr = 0;
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801e5ce:	4b14      	ldr	r3, [pc, #80]	; (801e620 <TFT_FillRectangle_DMA+0x74>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801e5d0:	4d14      	ldr	r5, [pc, #80]	; (801e624 <TFT_FillRectangle_DMA+0x78>)
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801e5d2:	f8d3 b060 	ldr.w	fp, [r3, #96]	; 0x60
 801e5d6:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c

  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801e5da:	1b94      	subs	r4, r2, r6
 801e5dc:	ebab 0204 	sub.w	r2, fp, r4
  hdma2d.Init.Mode = DMA2D_R2M;
 801e5e0:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801e5e4:	4628      	mov	r0, r5
  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801e5e6:	60ea      	str	r2, [r5, #12]
  hdma2d.Init.Mode = DMA2D_R2M;
 801e5e8:	606b      	str	r3, [r5, #4]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801e5ea:	f7e3 fccf 	bl	8001f8c <HAL_DMA2D_Init>
 801e5ee:	b110      	cbz	r0, 801e5f6 <TFT_FillRectangle_DMA+0x4a>
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
    }
  }
}
 801e5f0:	b003      	add	sp, #12
 801e5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801e5f6:	fb0b 620a 	mla	r2, fp, sl, r6
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
 801e5fa:	eba7 070a 	sub.w	r7, r7, sl
 801e5fe:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 801e602:	9700      	str	r7, [sp, #0]
 801e604:	4623      	mov	r3, r4
 801e606:	4641      	mov	r1, r8
 801e608:	4628      	mov	r0, r5
 801e60a:	f7e3 fd0d 	bl	8002028 <HAL_DMA2D_Start>
 801e60e:	2800      	cmp	r0, #0
 801e610:	d1ee      	bne.n	801e5f0 <TFT_FillRectangle_DMA+0x44>
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801e612:	4628      	mov	r0, r5
 801e614:	210a      	movs	r1, #10
}
 801e616:	b003      	add	sp, #12
 801e618:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801e61c:	f7e3 bd32 	b.w	8002084 <HAL_DMA2D_PollForTransfer>
 801e620:	200911f0 	.word	0x200911f0
 801e624:	20091404 	.word	0x20091404

0801e628 <TFT_FillScreen_DMA>:
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
	}
}

void TFT_FillScreen_DMA(uint16_t color)
{
 801e628:	b570      	push	{r4, r5, r6, lr}
  hdma2d.Init.Mode = DMA2D_R2M;
 801e62a:	4c11      	ldr	r4, [pc, #68]	; (801e670 <TFT_FillScreen_DMA+0x48>)
{
 801e62c:	b082      	sub	sp, #8
 801e62e:	4606      	mov	r6, r0
  hdma2d.Init.Mode = DMA2D_R2M;
 801e630:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hdma2d.Init.OutputOffset = 0;
 801e634:	2300      	movs	r3, #0
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801e636:	2502      	movs	r5, #2
	
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801e638:	4620      	mov	r0, r4
  hdma2d.Init.Mode = DMA2D_R2M;
 801e63a:	6062      	str	r2, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
 801e63c:	60e3      	str	r3, [r4, #12]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801e63e:	60a5      	str	r5, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801e640:	f7e3 fca4 	bl	8001f8c <HAL_DMA2D_Init>
 801e644:	b108      	cbz	r0, 801e64a <TFT_FillScreen_DMA+0x22>
    hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
    }
  }
}
 801e646:	b002      	add	sp, #8
 801e648:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 801e64a:	490a      	ldr	r1, [pc, #40]	; (801e674 <TFT_FillScreen_DMA+0x4c>)
 801e64c:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 801e64e:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 801e650:	6e49      	ldr	r1, [r1, #100]	; 0x64
 801e652:	9100      	str	r1, [sp, #0]
 801e654:	4620      	mov	r0, r4
 801e656:	4631      	mov	r1, r6
 801e658:	f7e3 fce6 	bl	8002028 <HAL_DMA2D_Start>
 801e65c:	2800      	cmp	r0, #0
 801e65e:	d1f2      	bne.n	801e646 <TFT_FillScreen_DMA+0x1e>
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801e660:	4629      	mov	r1, r5
 801e662:	4620      	mov	r0, r4
}
 801e664:	b002      	add	sp, #8
 801e666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801e66a:	f7e3 bd0b 	b.w	8002084 <HAL_DMA2D_PollForTransfer>
 801e66e:	bf00      	nop
 801e670:	20091404 	.word	0x20091404
 801e674:	200911f0 	.word	0x200911f0

0801e678 <TFT_DrawPixel>:


//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 801e678:	b470      	push	{r4, r5, r6}
	
//	tmp = Xpos;
//	Xpos = Ypos;
//	Ypos = X_SIZE - 1 - tmp;
////////////////////////////////////////////rotate -90
	if(TFT_direction == 0x00){
 801e67a:	4b17      	ldr	r3, [pc, #92]	; (801e6d8 <TFT_DrawPixel+0x60>)
 801e67c:	781c      	ldrb	r4, [r3, #0]
 801e67e:	b18c      	cbz	r4, 801e6a4 <TFT_DrawPixel+0x2c>

	tmp = Xpos;
	Xpos = Ypos;
	Ypos = Y_SIZE - 1 - tmp;
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
	else	if (TFT_direction == 0x01){
 801e680:	781c      	ldrb	r4, [r3, #0]
 801e682:	2c01      	cmp	r4, #1
 801e684:	d01f      	beq.n	801e6c6 <TFT_DrawPixel+0x4e>
//////////////////////////////////////////// 0 - no rotate
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
	}else	if (TFT_direction == 0x02){
 801e686:	781b      	ldrb	r3, [r3, #0]
 801e688:	2b02      	cmp	r3, #2
 801e68a:	d109      	bne.n	801e6a0 <TFT_DrawPixel+0x28>
////////////////////////////////////////////rotate -180
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801e68c:	4b13      	ldr	r3, [pc, #76]	; (801e6dc <TFT_DrawPixel+0x64>)
 801e68e:	4c14      	ldr	r4, [pc, #80]	; (801e6e0 <TFT_DrawPixel+0x68>)
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	6e25      	ldr	r5, [r4, #96]	; 0x60
 801e694:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 801e696:	1a18      	subs	r0, r3, r0
 801e698:	fb05 0111 	mls	r1, r5, r1, r0
 801e69c:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
//	|										|
//	|					0					|
//	|										|
//	|-------------------|
//		|Cable|		|Cable|
}			
 801e6a0:	bc70      	pop	{r4, r5, r6}
 801e6a2:	4770      	bx	lr
	Ypos = Y_SIZE - 1 - tmp;
 801e6a4:	4b0f      	ldr	r3, [pc, #60]	; (801e6e4 <TFT_DrawPixel+0x6c>)
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801e6a6:	4c0d      	ldr	r4, [pc, #52]	; (801e6dc <TFT_DrawPixel+0x64>)
	Ypos = Y_SIZE - 1 - tmp;
 801e6a8:	881b      	ldrh	r3, [r3, #0]
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801e6aa:	4d0d      	ldr	r5, [pc, #52]	; (801e6e0 <TFT_DrawPixel+0x68>)
 801e6ac:	6824      	ldr	r4, [r4, #0]
 801e6ae:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 801e6b0:	6ded      	ldr	r5, [r5, #92]	; 0x5c
	Ypos = Y_SIZE - 1 - tmp;
 801e6b2:	3b01      	subs	r3, #1
 801e6b4:	1a18      	subs	r0, r3, r0
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801e6b6:	1a61      	subs	r1, r4, r1
 801e6b8:	b280      	uxth	r0, r0
 801e6ba:	fb06 1110 	mls	r1, r6, r0, r1
 801e6be:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
}			
 801e6c2:	bc70      	pop	{r4, r5, r6}
 801e6c4:	4770      	bx	lr
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 801e6c6:	4c06      	ldr	r4, [pc, #24]	; (801e6e0 <TFT_DrawPixel+0x68>)
 801e6c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801e6ca:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 801e6cc:	fb03 0001 	mla	r0, r3, r1, r0
 801e6d0:	f824 2010 	strh.w	r2, [r4, r0, lsl #1]
}			
 801e6d4:	bc70      	pop	{r4, r5, r6}
 801e6d6:	4770      	bx	lr
 801e6d8:	20005218 	.word	0x20005218
 801e6dc:	20000a40 	.word	0x20000a40
 801e6e0:	200911f0 	.word	0x200911f0
 801e6e4:	20000a46 	.word	0x20000a46

0801e6e8 <TFT_DrawCircleCorner>:
{
 801e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801e6ec:	b294      	uxth	r4, r2
{
 801e6ee:	4616      	mov	r6, r2
	int16_t ddF_y = -2 * r;
 801e6f0:	ebc4 32c4 	rsb	r2, r4, r4, lsl #15
{
 801e6f4:	b089      	sub	sp, #36	; 0x24
	int16_t ddF_y = -2 * r;
 801e6f6:	0052      	lsls	r2, r2, #1
 801e6f8:	b212      	sxth	r2, r2
    while (x < y) {
 801e6fa:	2e00      	cmp	r6, #0
	int16_t ddF_y = -2 * r;
 801e6fc:	9201      	str	r2, [sp, #4]
    while (x < y) {
 801e6fe:	f340 80b1 	ble.w	801e864 <TFT_DrawCircleCorner+0x17c>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801e702:	fa1f fa81 	uxth.w	sl, r1
 801e706:	f10a 32ff 	add.w	r2, sl, #4294967295
 801e70a:	9206      	str	r2, [sp, #24]
 801e70c:	f003 0201 	and.w	r2, r3, #1
 801e710:	9202      	str	r2, [sp, #8]
 801e712:	f003 0202 	and.w	r2, r3, #2
 801e716:	f1c4 0401 	rsb	r4, r4, #1
 801e71a:	9203      	str	r2, [sp, #12]
 801e71c:	f003 0204 	and.w	r2, r3, #4
 801e720:	f003 0308 	and.w	r3, r3, #8
 801e724:	b224      	sxth	r4, r4
 801e726:	fa1f f980 	uxth.w	r9, r0
 801e72a:	9204      	str	r2, [sp, #16]
 801e72c:	9305      	str	r3, [sp, #20]
    while (x < y) {
 801e72e:	f04f 0800 	mov.w	r8, #0
 801e732:	e00d      	b.n	801e750 <TFT_DrawCircleCorner+0x68>
        if (corner & 0x02) {	
 801e734:	9b03      	ldr	r3, [sp, #12]
 801e736:	2b00      	cmp	r3, #0
 801e738:	d13c      	bne.n	801e7b4 <TFT_DrawCircleCorner+0xcc>
		if (corner & 0x04) {	
 801e73a:	9b04      	ldr	r3, [sp, #16]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d155      	bne.n	801e7ec <TFT_DrawCircleCorner+0x104>
        if (corner & 0x08) {	
 801e740:	9b05      	ldr	r3, [sp, #20]
 801e742:	2b00      	cmp	r3, #0
 801e744:	d16f      	bne.n	801e826 <TFT_DrawCircleCorner+0x13e>
    while (x < y) {
 801e746:	42be      	cmp	r6, r7
 801e748:	f108 0801 	add.w	r8, r8, #1
 801e74c:	f340 808a 	ble.w	801e864 <TFT_DrawCircleCorner+0x17c>
        if (f >= 0) {
 801e750:	2c00      	cmp	r4, #0
 801e752:	db08      	blt.n	801e766 <TFT_DrawCircleCorner+0x7e>
            ddF_y += 2;
 801e754:	9b01      	ldr	r3, [sp, #4]
 801e756:	3302      	adds	r3, #2
 801e758:	b29b      	uxth	r3, r3
            f += ddF_y;
 801e75a:	441c      	add	r4, r3
            y--;
 801e75c:	3e01      	subs	r6, #1
            ddF_y += 2;
 801e75e:	b21b      	sxth	r3, r3
            f += ddF_y;
 801e760:	b224      	sxth	r4, r4
            ddF_y += 2;
 801e762:	9301      	str	r3, [sp, #4]
            y--;
 801e764:	b236      	sxth	r6, r6
 801e766:	fa1f f588 	uxth.w	r5, r8
        f += ddF_x;
 801e76a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
        if (corner & 0x01) {	
 801e76e:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801e770:	3403      	adds	r4, #3
 801e772:	1c6f      	adds	r7, r5, #1
 801e774:	b224      	sxth	r4, r4
 801e776:	b23f      	sxth	r7, r7
        if (corner & 0x01) {	
 801e778:	2b00      	cmp	r3, #0
 801e77a:	d0db      	beq.n	801e734 <TFT_DrawCircleCorner+0x4c>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801e77c:	9a06      	ldr	r2, [sp, #24]
 801e77e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e782:	9307      	str	r3, [sp, #28]
 801e784:	fa1f fb86 	uxth.w	fp, r6
 801e788:	1b51      	subs	r1, r2, r5
 801e78a:	eba9 000b 	sub.w	r0, r9, fp
 801e78e:	461a      	mov	r2, r3
 801e790:	b280      	uxth	r0, r0
 801e792:	b289      	uxth	r1, r1
 801e794:	f7ff ff70 	bl	801e678 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - x, y0 - y, color);
 801e798:	9b07      	ldr	r3, [sp, #28]
 801e79a:	f109 30ff 	add.w	r0, r9, #4294967295
 801e79e:	ebaa 010b 	sub.w	r1, sl, fp
 801e7a2:	1b40      	subs	r0, r0, r5
 801e7a4:	461a      	mov	r2, r3
 801e7a6:	b289      	uxth	r1, r1
 801e7a8:	b280      	uxth	r0, r0
 801e7aa:	f7ff ff65 	bl	801e678 <TFT_DrawPixel>
        if (corner & 0x02) {	
 801e7ae:	9b03      	ldr	r3, [sp, #12]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d0c2      	beq.n	801e73a <TFT_DrawCircleCorner+0x52>
			TFT_DrawPixel(x0 + x, y0 - y, color);
 801e7b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e7b8:	9307      	str	r3, [sp, #28]
 801e7ba:	fa1f fb86 	uxth.w	fp, r6
 801e7be:	f109 0001 	add.w	r0, r9, #1
 801e7c2:	ebaa 010b 	sub.w	r1, sl, fp
 801e7c6:	4428      	add	r0, r5
 801e7c8:	461a      	mov	r2, r3
 801e7ca:	b289      	uxth	r1, r1
 801e7cc:	b280      	uxth	r0, r0
 801e7ce:	f7ff ff53 	bl	801e678 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 - x, color);
 801e7d2:	9b06      	ldr	r3, [sp, #24]
 801e7d4:	1b59      	subs	r1, r3, r5
 801e7d6:	9b07      	ldr	r3, [sp, #28]
 801e7d8:	eb09 000b 	add.w	r0, r9, fp
 801e7dc:	461a      	mov	r2, r3
 801e7de:	b280      	uxth	r0, r0
 801e7e0:	b289      	uxth	r1, r1
 801e7e2:	f7ff ff49 	bl	801e678 <TFT_DrawPixel>
		if (corner & 0x04) {	
 801e7e6:	9b04      	ldr	r3, [sp, #16]
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	d0a9      	beq.n	801e740 <TFT_DrawCircleCorner+0x58>
			TFT_DrawPixel(x0 + x, y0 + y, color);
 801e7ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e7f0:	9307      	str	r3, [sp, #28]
 801e7f2:	fa1f fb86 	uxth.w	fp, r6
 801e7f6:	f109 0001 	add.w	r0, r9, #1
 801e7fa:	eb0a 010b 	add.w	r1, sl, fp
 801e7fe:	4428      	add	r0, r5
 801e800:	461a      	mov	r2, r3
 801e802:	b289      	uxth	r1, r1
 801e804:	b280      	uxth	r0, r0
 801e806:	f7ff ff37 	bl	801e678 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 + x, color);
 801e80a:	9b07      	ldr	r3, [sp, #28]
 801e80c:	f10a 0101 	add.w	r1, sl, #1
 801e810:	eb09 000b 	add.w	r0, r9, fp
 801e814:	4429      	add	r1, r5
 801e816:	461a      	mov	r2, r3
 801e818:	b280      	uxth	r0, r0
 801e81a:	b289      	uxth	r1, r1
 801e81c:	f7ff ff2c 	bl	801e678 <TFT_DrawPixel>
        if (corner & 0x08) {	
 801e820:	9b05      	ldr	r3, [sp, #20]
 801e822:	2b00      	cmp	r3, #0
 801e824:	d08f      	beq.n	801e746 <TFT_DrawCircleCorner+0x5e>
			TFT_DrawPixel(x0 - x, y0 + y, color);
 801e826:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e82a:	9307      	str	r3, [sp, #28]
 801e82c:	fa1f fb86 	uxth.w	fp, r6
 801e830:	f109 30ff 	add.w	r0, r9, #4294967295
 801e834:	eb0a 010b 	add.w	r1, sl, fp
 801e838:	1b40      	subs	r0, r0, r5
 801e83a:	461a      	mov	r2, r3
 801e83c:	b289      	uxth	r1, r1
 801e83e:	b280      	uxth	r0, r0
 801e840:	f7ff ff1a 	bl	801e678 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - y, y0 + x, color);
 801e844:	9b07      	ldr	r3, [sp, #28]
 801e846:	f10a 0101 	add.w	r1, sl, #1
 801e84a:	eba9 000b 	sub.w	r0, r9, fp
 801e84e:	4429      	add	r1, r5
 801e850:	b280      	uxth	r0, r0
 801e852:	461a      	mov	r2, r3
 801e854:	b289      	uxth	r1, r1
 801e856:	f7ff ff0f 	bl	801e678 <TFT_DrawPixel>
    while (x < y) {
 801e85a:	42be      	cmp	r6, r7
 801e85c:	f108 0801 	add.w	r8, r8, #1
 801e860:	f73f af76 	bgt.w	801e750 <TFT_DrawCircleCorner+0x68>
}
 801e864:	b009      	add	sp, #36	; 0x24
 801e866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e86a:	bf00      	nop

0801e86c <TFT_DrawCircle>:
{
 801e86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e870:	4692      	mov	sl, r2
	int16_t f = 1 - r;
 801e872:	fa1f f88a 	uxth.w	r8, sl
{
 801e876:	b089      	sub	sp, #36	; 0x24
    TFT_DrawPixel(x0, y0 + r, color);
 801e878:	b29e      	uxth	r6, r3
 801e87a:	b28a      	uxth	r2, r1
	int16_t ddF_y = -2 * r;
 801e87c:	ebc8 33c8 	rsb	r3, r8, r8, lsl #15
    TFT_DrawPixel(x0, y0 + r, color);
 801e880:	b287      	uxth	r7, r0
 801e882:	eb08 0102 	add.w	r1, r8, r2
	int16_t ddF_y = -2 * r;
 801e886:	005b      	lsls	r3, r3, #1
 801e888:	b21b      	sxth	r3, r3
    TFT_DrawPixel(x0, y0 + r, color);
 801e88a:	4614      	mov	r4, r2
 801e88c:	9201      	str	r2, [sp, #4]
 801e88e:	b289      	uxth	r1, r1
 801e890:	4632      	mov	r2, r6
 801e892:	4638      	mov	r0, r7
	int16_t ddF_y = -2 * r;
 801e894:	9303      	str	r3, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801e896:	9700      	str	r7, [sp, #0]
 801e898:	f7ff feee 	bl	801e678 <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801e89c:	eba4 0108 	sub.w	r1, r4, r8
 801e8a0:	b289      	uxth	r1, r1
 801e8a2:	4632      	mov	r2, r6
 801e8a4:	4638      	mov	r0, r7
 801e8a6:	f7ff fee7 	bl	801e678 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801e8aa:	eb08 0007 	add.w	r0, r8, r7
 801e8ae:	b280      	uxth	r0, r0
 801e8b0:	4632      	mov	r2, r6
 801e8b2:	4621      	mov	r1, r4
 801e8b4:	f7ff fee0 	bl	801e678 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801e8b8:	eba7 0008 	sub.w	r0, r7, r8
 801e8bc:	b280      	uxth	r0, r0
 801e8be:	4632      	mov	r2, r6
 801e8c0:	4621      	mov	r1, r4
 801e8c2:	f7ff fed9 	bl	801e678 <TFT_DrawPixel>
    while (x < y) {
 801e8c6:	f1ba 0f00 	cmp.w	sl, #0
 801e8ca:	dd75      	ble.n	801e9b8 <TFT_DrawCircle+0x14c>
 801e8cc:	1c63      	adds	r3, r4, #1
 801e8ce:	f1c8 0501 	rsb	r5, r8, #1
 801e8d2:	1c79      	adds	r1, r7, #1
 801e8d4:	1e7a      	subs	r2, r7, #1
 801e8d6:	9307      	str	r3, [sp, #28]
 801e8d8:	1e63      	subs	r3, r4, #1
 801e8da:	b22d      	sxth	r5, r5
 801e8dc:	f04f 0b00 	mov.w	fp, #0
 801e8e0:	9106      	str	r1, [sp, #24]
 801e8e2:	9204      	str	r2, [sp, #16]
 801e8e4:	9305      	str	r3, [sp, #20]
 801e8e6:	9b06      	ldr	r3, [sp, #24]
            ddF_y += 2;
 801e8e8:	9903      	ldr	r1, [sp, #12]
 801e8ea:	fa1f f48b 	uxth.w	r4, fp
 801e8ee:	18e3      	adds	r3, r4, r3
 801e8f0:	b29b      	uxth	r3, r3
        if (f >= 0) {
 801e8f2:	2d00      	cmp	r5, #0
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801e8f4:	4632      	mov	r2, r6
 801e8f6:	4618      	mov	r0, r3
 801e8f8:	f10b 0b01 	add.w	fp, fp, #1
            ddF_y += 2;
 801e8fc:	f101 0102 	add.w	r1, r1, #2
        if (f >= 0) {
 801e900:	db0a      	blt.n	801e918 <TFT_DrawCircle+0xac>
            ddF_y += 2;
 801e902:	b289      	uxth	r1, r1
            y--;
 801e904:	f10a 3aff 	add.w	sl, sl, #4294967295
            f += ddF_y;
 801e908:	440d      	add	r5, r1
            y--;
 801e90a:	fa0f fa8a 	sxth.w	sl, sl
            ddF_y += 2;
 801e90e:	b209      	sxth	r1, r1
            f += ddF_y;
 801e910:	b22d      	sxth	r5, r5
            ddF_y += 2;
 801e912:	9103      	str	r1, [sp, #12]
 801e914:	fa1f f88a 	uxth.w	r8, sl
 801e918:	9302      	str	r3, [sp, #8]
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801e91a:	9b01      	ldr	r3, [sp, #4]
 801e91c:	eb03 0708 	add.w	r7, r3, r8
 801e920:	b2bf      	uxth	r7, r7
 801e922:	4639      	mov	r1, r7
 801e924:	f7ff fea8 	bl	801e678 <TFT_DrawPixel>
 801e928:	9a04      	ldr	r2, [sp, #16]
 801e92a:	eba2 0904 	sub.w	r9, r2, r4
 801e92e:	fa1f f989 	uxth.w	r9, r9
        TFT_DrawPixel(x0 - x, y0 + y, color);
 801e932:	4639      	mov	r1, r7
 801e934:	4648      	mov	r0, r9
 801e936:	4632      	mov	r2, r6
 801e938:	f7ff fe9e 	bl	801e678 <TFT_DrawPixel>
        TFT_DrawPixel(x0 + x, y0 - y, color);
 801e93c:	9b01      	ldr	r3, [sp, #4]
 801e93e:	eba3 0708 	sub.w	r7, r3, r8
 801e942:	9b02      	ldr	r3, [sp, #8]
 801e944:	b2bf      	uxth	r7, r7
 801e946:	4618      	mov	r0, r3
 801e948:	4639      	mov	r1, r7
 801e94a:	4632      	mov	r2, r6
 801e94c:	f7ff fe94 	bl	801e678 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - x, y0 - y, color);
 801e950:	4639      	mov	r1, r7
 801e952:	4648      	mov	r0, r9
 801e954:	4632      	mov	r2, r6
 801e956:	f7ff fe8f 	bl	801e678 <TFT_DrawPixel>
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801e95a:	9b00      	ldr	r3, [sp, #0]
 801e95c:	9a07      	ldr	r2, [sp, #28]
 801e95e:	eb03 0708 	add.w	r7, r3, r8
 801e962:	18a3      	adds	r3, r4, r2
 801e964:	b29b      	uxth	r3, r3
 801e966:	b2bf      	uxth	r7, r7
 801e968:	4619      	mov	r1, r3
 801e96a:	4638      	mov	r0, r7
 801e96c:	4632      	mov	r2, r6
 801e96e:	9302      	str	r3, [sp, #8]
 801e970:	f7ff fe82 	bl	801e678 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801e974:	9b00      	ldr	r3, [sp, #0]
 801e976:	eba3 0908 	sub.w	r9, r3, r8
 801e97a:	9b02      	ldr	r3, [sp, #8]
 801e97c:	fa1f f989 	uxth.w	r9, r9
 801e980:	4619      	mov	r1, r3
 801e982:	4648      	mov	r0, r9
 801e984:	4632      	mov	r2, r6
 801e986:	f7ff fe77 	bl	801e678 <TFT_DrawPixel>
 801e98a:	9b05      	ldr	r3, [sp, #20]
 801e98c:	1b1b      	subs	r3, r3, r4
 801e98e:	b29b      	uxth	r3, r3
        TFT_DrawPixel(x0 + y, y0 - x, color);
 801e990:	4619      	mov	r1, r3
 801e992:	4638      	mov	r0, r7
 801e994:	4632      	mov	r2, r6
 801e996:	9302      	str	r3, [sp, #8]
 801e998:	f7ff fe6e 	bl	801e678 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801e99c:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801e99e:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    while (x < y) {
 801e9a2:	3401      	adds	r4, #1
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801e9a4:	4632      	mov	r2, r6
 801e9a6:	4619      	mov	r1, r3
 801e9a8:	4648      	mov	r0, r9
    while (x < y) {
 801e9aa:	b224      	sxth	r4, r4
        f += ddF_x;
 801e9ac:	3503      	adds	r5, #3
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801e9ae:	f7ff fe63 	bl	801e678 <TFT_DrawPixel>
    while (x < y) {
 801e9b2:	45a2      	cmp	sl, r4
        f += ddF_x;
 801e9b4:	b22d      	sxth	r5, r5
    while (x < y) {
 801e9b6:	dc96      	bgt.n	801e8e6 <TFT_DrawCircle+0x7a>
}
 801e9b8:	b009      	add	sp, #36	; 0x24
 801e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9be:	bf00      	nop

0801e9c0 <TFT_DrawLine>:


int16_t prev_x=0, prev_y=0; 
//----------------------------------------
void TFT_DrawLine(uint16_t x0, uint16_t y0,	uint16_t x1, uint16_t y1, uint16_t color)
{
 801e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9c4:	b085      	sub	sp, #20
	int16_t dx, dy, sx, sy, err, e2;
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e9c6:	4290      	cmp	r0, r2
{
 801e9c8:	4605      	mov	r5, r0
 801e9ca:	4690      	mov	r8, r2
 801e9cc:	460e      	mov	r6, r1
 801e9ce:	9303      	str	r3, [sp, #12]
 801e9d0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e9d4:	d213      	bcs.n	801e9fe <TFT_DrawLine+0x3e>
 801e9d6:	1a17      	subs	r7, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e9d8:	4299      	cmp	r1, r3
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e9da:	b23f      	sxth	r7, r7
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e9dc:	d247      	bcs.n	801ea6e <TFT_DrawLine+0xae>
 801e9de:	9b03      	ldr	r3, [sp, #12]
 801e9e0:	1a5b      	subs	r3, r3, r1
 801e9e2:	fa0f fb83 	sxth.w	fp, r3
	sx = (x0 < x1) ? 1 : -1; 
 801e9e6:	f04f 0901 	mov.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
	err = ((dx > dy) ? dx : -dy) / 2; 
 801e9ea:	455f      	cmp	r7, fp
	sy = (y0 < y1) ? 1 : -1; 
 801e9ec:	f8cd 9008 	str.w	r9, [sp, #8]
	err = ((dx > dy) ? dx : -dy) / 2; 
 801e9f0:	dc14      	bgt.n	801ea1c <TFT_DrawLine+0x5c>
 801e9f2:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 801e9f6:	1064      	asrs	r4, r4, #1
 801e9f8:	4264      	negs	r4, r4
 801e9fa:	b224      	sxth	r4, r4
 801e9fc:	e011      	b.n	801ea22 <TFT_DrawLine+0x62>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e9fe:	1a87      	subs	r7, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801ea00:	9a03      	ldr	r2, [sp, #12]
 801ea02:	4291      	cmp	r1, r2
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801ea04:	b23f      	sxth	r7, r7
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801ea06:	d32a      	bcc.n	801ea5e <TFT_DrawLine+0x9e>
 801ea08:	9b03      	ldr	r3, [sp, #12]
	sx = (x0 < x1) ? 1 : -1; 
 801ea0a:	f04f 39ff 	mov.w	r9, #4294967295
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801ea0e:	1acb      	subs	r3, r1, r3
 801ea10:	fa0f fb83 	sxth.w	fp, r3
	sy = (y0 < y1) ? 1 : -1; 
 801ea14:	f8cd 9008 	str.w	r9, [sp, #8]
	err = ((dx > dy) ? dx : -dy) / 2; 
 801ea18:	455f      	cmp	r7, fp
 801ea1a:	ddea      	ble.n	801e9f2 <TFT_DrawLine+0x32>
 801ea1c:	eb07 74d7 	add.w	r4, r7, r7, lsr #31
 801ea20:	1064      	asrs	r4, r4, #1

		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 801ea22:	427b      	negs	r3, r7
 801ea24:	9301      	str	r3, [sp, #4]
		TFT_DrawPixel(x0, y0, color); 
 801ea26:	4652      	mov	r2, sl
 801ea28:	4631      	mov	r1, r6
 801ea2a:	4628      	mov	r0, r5
 801ea2c:	f7ff fe24 	bl	801e678 <TFT_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 801ea30:	4545      	cmp	r5, r8
			err -= dy;
 801ea32:	eba4 020b 	sub.w	r2, r4, fp
			x0 += sx;
 801ea36:	eb05 0109 	add.w	r1, r5, r9
		if (x0 == x1 && y0 == y1) {
 801ea3a:	d022      	beq.n	801ea82 <TFT_DrawLine+0xc2>
		if (e2 > -dx) {
 801ea3c:	9b01      	ldr	r3, [sp, #4]
 801ea3e:	429c      	cmp	r4, r3
		} 
		if (e2 < dy) {
			err += dx;
			y0 += sy;
 801ea40:	9b02      	ldr	r3, [sp, #8]
			x0 += sx;
 801ea42:	bfc6      	itte	gt
 801ea44:	b28d      	uxthgt	r5, r1
			err -= dy;
 801ea46:	b212      	sxthgt	r2, r2
 801ea48:	4622      	movle	r2, r4
		if (e2 < dy) {
 801ea4a:	455c      	cmp	r4, fp
			err += dx;
 801ea4c:	eb02 0007 	add.w	r0, r2, r7
			y0 += sy;
 801ea50:	eb06 0103 	add.w	r1, r6, r3
		if (e2 < dy) {
 801ea54:	da01      	bge.n	801ea5a <TFT_DrawLine+0x9a>
			err += dx;
 801ea56:	b202      	sxth	r2, r0
			y0 += sy;
 801ea58:	b28e      	uxth	r6, r1
	sy = (y0 < y1) ? 1 : -1; 
 801ea5a:	4614      	mov	r4, r2
 801ea5c:	e7e3      	b.n	801ea26 <TFT_DrawLine+0x66>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801ea5e:	1a53      	subs	r3, r2, r1
 801ea60:	fa0f fb83 	sxth.w	fp, r3
	sy = (y0 < y1) ? 1 : -1; 
 801ea64:	2301      	movs	r3, #1
	sx = (x0 < x1) ? 1 : -1; 
 801ea66:	f04f 39ff 	mov.w	r9, #4294967295
	sy = (y0 < y1) ? 1 : -1; 
 801ea6a:	9302      	str	r3, [sp, #8]
 801ea6c:	e7d4      	b.n	801ea18 <TFT_DrawLine+0x58>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801ea6e:	9b03      	ldr	r3, [sp, #12]
 801ea70:	1acb      	subs	r3, r1, r3
 801ea72:	fa0f fb83 	sxth.w	fp, r3
	sy = (y0 < y1) ? 1 : -1; 
 801ea76:	f04f 33ff 	mov.w	r3, #4294967295
	sx = (x0 < x1) ? 1 : -1; 
 801ea7a:	f04f 0901 	mov.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
 801ea7e:	9302      	str	r3, [sp, #8]
 801ea80:	e7ca      	b.n	801ea18 <TFT_DrawLine+0x58>
		if (x0 == x1 && y0 == y1) {
 801ea82:	9b03      	ldr	r3, [sp, #12]
 801ea84:	429e      	cmp	r6, r3
 801ea86:	d1d9      	bne.n	801ea3c <TFT_DrawLine+0x7c>
		} 
	}
}
 801ea88:	b005      	add	sp, #20
 801ea8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea8e:	bf00      	nop

0801ea90 <TFT_FillRectangle>:
	for (; y0 <= y1; y0++) {
 801ea90:	4299      	cmp	r1, r3
 801ea92:	d816      	bhi.n	801eac2 <TFT_FillRectangle+0x32>
{
 801ea94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea98:	b082      	sub	sp, #8
 801ea9a:	460c      	mov	r4, r1
 801ea9c:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 801eaa0:	461e      	mov	r6, r3
 801eaa2:	4607      	mov	r7, r0
 801eaa4:	4690      	mov	r8, r2
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eaa6:	4623      	mov	r3, r4
 801eaa8:	4621      	mov	r1, r4
	for (; y0 <= y1; y0++) {
 801eaaa:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eaac:	9500      	str	r5, [sp, #0]
 801eaae:	4642      	mov	r2, r8
 801eab0:	4638      	mov	r0, r7
	for (; y0 <= y1; y0++) {
 801eab2:	b2a4      	uxth	r4, r4
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eab4:	f7ff ff84 	bl	801e9c0 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801eab8:	42a6      	cmp	r6, r4
 801eaba:	d2f4      	bcs.n	801eaa6 <TFT_FillRectangle+0x16>
}
 801eabc:	b002      	add	sp, #8
 801eabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eac2:	4770      	bx	lr

0801eac4 <TFT_DrawRectangle>:
{
 801eac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eac8:	b082      	sub	sp, #8
 801eaca:	461d      	mov	r5, r3
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801eacc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801ead0:	9400      	str	r4, [sp, #0]
{
 801ead2:	4606      	mov	r6, r0
 801ead4:	4688      	mov	r8, r1
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801ead6:	460b      	mov	r3, r1
{
 801ead8:	4617      	mov	r7, r2
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801eada:	f7ff ff71 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(x0, y0, x0, y1, color);	/* Left */
 801eade:	462b      	mov	r3, r5
 801eae0:	4632      	mov	r2, r6
 801eae2:	4641      	mov	r1, r8
 801eae4:	4630      	mov	r0, r6
 801eae6:	9400      	str	r4, [sp, #0]
 801eae8:	f7ff ff6a 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(x1, y0, x1, y1, color);	/* Right */
 801eaec:	4641      	mov	r1, r8
 801eaee:	462b      	mov	r3, r5
 801eaf0:	463a      	mov	r2, r7
 801eaf2:	4638      	mov	r0, r7
 801eaf4:	9400      	str	r4, [sp, #0]
 801eaf6:	f7ff ff63 	bl	801e9c0 <TFT_DrawLine>
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801eafa:	463a      	mov	r2, r7
 801eafc:	4630      	mov	r0, r6
 801eafe:	462b      	mov	r3, r5
 801eb00:	4629      	mov	r1, r5
 801eb02:	9408      	str	r4, [sp, #32]
}
 801eb04:	b002      	add	sp, #8
 801eb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801eb0a:	f7ff bf59 	b.w	801e9c0 <TFT_DrawLine>
 801eb0e:	bf00      	nop

0801eb10 <TFT_DrawFilledCircle>:
{
 801eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb14:	4691      	mov	r9, r2
	int16_t f = 1 - r;
 801eb16:	fa1f f889 	uxth.w	r8, r9
{
 801eb1a:	b08b      	sub	sp, #44	; 0x2c
    TFT_DrawPixel(x0, y0 + r, color);
 801eb1c:	fa1f fa83 	uxth.w	sl, r3
 801eb20:	b28a      	uxth	r2, r1
	int16_t ddF_y = -2 * r;
 801eb22:	ebc8 33c8 	rsb	r3, r8, r8, lsl #15
 801eb26:	005b      	lsls	r3, r3, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801eb28:	b287      	uxth	r7, r0
 801eb2a:	eb08 0102 	add.w	r1, r8, r2
	int16_t ddF_y = -2 * r;
 801eb2e:	b21e      	sxth	r6, r3
    TFT_DrawPixel(x0, y0 + r, color);
 801eb30:	4614      	mov	r4, r2
 801eb32:	9203      	str	r2, [sp, #12]
 801eb34:	b289      	uxth	r1, r1
 801eb36:	4652      	mov	r2, sl
 801eb38:	4638      	mov	r0, r7
	int16_t ddF_y = -2 * r;
 801eb3a:	9604      	str	r6, [sp, #16]
    TFT_DrawPixel(x0, y0 + r, color);
 801eb3c:	9705      	str	r7, [sp, #20]
 801eb3e:	f7ff fd9b 	bl	801e678 <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801eb42:	eba4 0108 	sub.w	r1, r4, r8
 801eb46:	b289      	uxth	r1, r1
 801eb48:	4652      	mov	r2, sl
 801eb4a:	4638      	mov	r0, r7
    TFT_DrawPixel(x0 + r, y0, color);
 801eb4c:	eb08 0607 	add.w	r6, r8, r7
    TFT_DrawPixel(x0, y0 - r, color);
 801eb50:	f7ff fd92 	bl	801e678 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801eb54:	46a3      	mov	fp, r4
 801eb56:	4621      	mov	r1, r4
 801eb58:	b2b6      	uxth	r6, r6
    TFT_DrawPixel(x0 - r, y0, color);
 801eb5a:	eba7 0408 	sub.w	r4, r7, r8
    TFT_DrawPixel(x0 + r, y0, color);
 801eb5e:	4630      	mov	r0, r6
 801eb60:	4652      	mov	r2, sl
    TFT_DrawPixel(x0 - r, y0, color);
 801eb62:	b2a4      	uxth	r4, r4
    TFT_DrawPixel(x0 + r, y0, color);
 801eb64:	f7ff fd88 	bl	801e678 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801eb68:	4620      	mov	r0, r4
 801eb6a:	4652      	mov	r2, sl
 801eb6c:	4659      	mov	r1, fp
 801eb6e:	f7ff fd83 	bl	801e678 <TFT_DrawPixel>
    TFT_DrawLine(x0 - r, y0, x0 + r, y0, color);
 801eb72:	4632      	mov	r2, r6
 801eb74:	4620      	mov	r0, r4
 801eb76:	f8cd a000 	str.w	sl, [sp]
 801eb7a:	465b      	mov	r3, fp
 801eb7c:	4659      	mov	r1, fp
 801eb7e:	f7ff ff1f 	bl	801e9c0 <TFT_DrawLine>
    while (x < y) {
 801eb82:	f1b9 0f00 	cmp.w	r9, #0
 801eb86:	dd5f      	ble.n	801ec48 <TFT_DrawFilledCircle+0x138>
 801eb88:	465c      	mov	r4, fp
 801eb8a:	1c63      	adds	r3, r4, #1
 801eb8c:	f1c8 0501 	rsb	r5, r8, #1
 801eb90:	1e79      	subs	r1, r7, #1
 801eb92:	1c7a      	adds	r2, r7, #1
 801eb94:	9309      	str	r3, [sp, #36]	; 0x24
 801eb96:	1e63      	subs	r3, r4, #1
 801eb98:	b22d      	sxth	r5, r5
 801eb9a:	f04f 0b00 	mov.w	fp, #0
 801eb9e:	9106      	str	r1, [sp, #24]
 801eba0:	9208      	str	r2, [sp, #32]
 801eba2:	9307      	str	r3, [sp, #28]
 801eba4:	9b06      	ldr	r3, [sp, #24]
 801eba6:	fa1f f48b 	uxth.w	r4, fp
 801ebaa:	1b1f      	subs	r7, r3, r4
 801ebac:	9b08      	ldr	r3, [sp, #32]
 801ebae:	18e6      	adds	r6, r4, r3
            ddF_y += 2;
 801ebb0:	9b04      	ldr	r3, [sp, #16]
 801ebb2:	b2bf      	uxth	r7, r7
 801ebb4:	b2b6      	uxth	r6, r6
        if (f >= 0) {
 801ebb6:	2d00      	cmp	r5, #0
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801ebb8:	4632      	mov	r2, r6
 801ebba:	4638      	mov	r0, r7
 801ebbc:	f10b 0b01 	add.w	fp, fp, #1
            ddF_y += 2;
 801ebc0:	f103 0302 	add.w	r3, r3, #2
        if (f >= 0) {
 801ebc4:	db0a      	blt.n	801ebdc <TFT_DrawFilledCircle+0xcc>
            ddF_y += 2;
 801ebc6:	b29b      	uxth	r3, r3
            y--;
 801ebc8:	f109 39ff 	add.w	r9, r9, #4294967295
            f += ddF_y;
 801ebcc:	441d      	add	r5, r3
            y--;
 801ebce:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
 801ebd2:	b21b      	sxth	r3, r3
            f += ddF_y;
 801ebd4:	b22d      	sxth	r5, r5
            ddF_y += 2;
 801ebd6:	9304      	str	r3, [sp, #16]
 801ebd8:	fa1f f889 	uxth.w	r8, r9
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801ebdc:	9b03      	ldr	r3, [sp, #12]
 801ebde:	f8cd a000 	str.w	sl, [sp]
 801ebe2:	4443      	add	r3, r8
 801ebe4:	b29b      	uxth	r3, r3
 801ebe6:	4619      	mov	r1, r3
 801ebe8:	f7ff feea 	bl	801e9c0 <TFT_DrawLine>
        TFT_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 801ebec:	9b03      	ldr	r3, [sp, #12]
 801ebee:	f8cd a000 	str.w	sl, [sp]
 801ebf2:	eba3 0308 	sub.w	r3, r3, r8
 801ebf6:	b29b      	uxth	r3, r3
 801ebf8:	463a      	mov	r2, r7
 801ebfa:	4630      	mov	r0, r6
 801ebfc:	4619      	mov	r1, r3
 801ebfe:	f7ff fedf 	bl	801e9c0 <TFT_DrawLine>
        TFT_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 801ec02:	9a05      	ldr	r2, [sp, #20]
 801ec04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec06:	f8cd a000 	str.w	sl, [sp]
 801ec0a:	eb02 0608 	add.w	r6, r2, r8
 801ec0e:	18e3      	adds	r3, r4, r3
 801ec10:	eba2 0708 	sub.w	r7, r2, r8
 801ec14:	b29b      	uxth	r3, r3
 801ec16:	b2b6      	uxth	r6, r6
 801ec18:	b2bf      	uxth	r7, r7
 801ec1a:	4619      	mov	r1, r3
 801ec1c:	4630      	mov	r0, r6
 801ec1e:	463a      	mov	r2, r7
 801ec20:	f7ff fece 	bl	801e9c0 <TFT_DrawLine>
 801ec24:	9b07      	ldr	r3, [sp, #28]
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801ec26:	f8cd a000 	str.w	sl, [sp]
 801ec2a:	1b1b      	subs	r3, r3, r4
        f += ddF_x;
 801ec2c:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 801ec30:	b29b      	uxth	r3, r3
    while (x < y) {
 801ec32:	3401      	adds	r4, #1
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801ec34:	463a      	mov	r2, r7
 801ec36:	4630      	mov	r0, r6
 801ec38:	4619      	mov	r1, r3
    while (x < y) {
 801ec3a:	b224      	sxth	r4, r4
        f += ddF_x;
 801ec3c:	3503      	adds	r5, #3
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801ec3e:	f7ff febf 	bl	801e9c0 <TFT_DrawLine>
    while (x < y) {
 801ec42:	45a1      	cmp	r9, r4
        f += ddF_x;
 801ec44:	b22d      	sxth	r5, r5
    while (x < y) {
 801ec46:	dcad      	bgt.n	801eba4 <TFT_DrawFilledCircle+0x94>
}
 801ec48:	b00b      	add	sp, #44	; 0x2c
 801ec4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec4e:	bf00      	nop

0801ec50 <TFT_DrawFilledCircleCorner>:
{
 801ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801ec54:	b294      	uxth	r4, r2
{
 801ec56:	4616      	mov	r6, r2
	int16_t ddF_y = -2 * r;
 801ec58:	ebc4 32c4 	rsb	r2, r4, r4, lsl #15
{
 801ec5c:	b08b      	sub	sp, #44	; 0x2c
	int16_t ddF_y = -2 * r;
 801ec5e:	0052      	lsls	r2, r2, #1
 801ec60:	b212      	sxth	r2, r2
    while (x < y) {
 801ec62:	2e00      	cmp	r6, #0
	int16_t ddF_y = -2 * r;
 801ec64:	9204      	str	r2, [sp, #16]
    while (x < y) {
 801ec66:	f340 80c0 	ble.w	801edea <TFT_DrawFilledCircleCorner+0x19a>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801ec6a:	b287      	uxth	r7, r0
 801ec6c:	b28a      	uxth	r2, r1
 801ec6e:	1e79      	subs	r1, r7, #1
 801ec70:	9109      	str	r1, [sp, #36]	; 0x24
 801ec72:	f003 0101 	and.w	r1, r3, #1
 801ec76:	9105      	str	r1, [sp, #20]
 801ec78:	f003 0102 	and.w	r1, r3, #2
 801ec7c:	f1c4 0401 	rsb	r4, r4, #1
 801ec80:	9106      	str	r1, [sp, #24]
 801ec82:	f003 0104 	and.w	r1, r3, #4
 801ec86:	f003 0308 	and.w	r3, r3, #8
 801ec8a:	b224      	sxth	r4, r4
 801ec8c:	9107      	str	r1, [sp, #28]
 801ec8e:	9308      	str	r3, [sp, #32]
    while (x < y) {
 801ec90:	f04f 0900 	mov.w	r9, #0
 801ec94:	4690      	mov	r8, r2
 801ec96:	e00e      	b.n	801ecb6 <TFT_DrawFilledCircleCorner+0x66>
        if (corner & 0x02) {	
 801ec98:	9b06      	ldr	r3, [sp, #24]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d142      	bne.n	801ed24 <TFT_DrawFilledCircleCorner+0xd4>
		if (corner & 0x04) {
 801ec9e:	9b07      	ldr	r3, [sp, #28]
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	d15f      	bne.n	801ed64 <TFT_DrawFilledCircleCorner+0x114>
        if (corner & 0x08) {
 801eca4:	9b08      	ldr	r3, [sp, #32]
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	d17c      	bne.n	801eda4 <TFT_DrawFilledCircleCorner+0x154>
    while (x < y) {
 801ecaa:	9b03      	ldr	r3, [sp, #12]
 801ecac:	429e      	cmp	r6, r3
 801ecae:	f109 0901 	add.w	r9, r9, #1
 801ecb2:	f340 809a 	ble.w	801edea <TFT_DrawFilledCircleCorner+0x19a>
        if (f >= 0) {
 801ecb6:	2c00      	cmp	r4, #0
 801ecb8:	db08      	blt.n	801eccc <TFT_DrawFilledCircleCorner+0x7c>
            ddF_y += 2;
 801ecba:	9b04      	ldr	r3, [sp, #16]
 801ecbc:	3302      	adds	r3, #2
 801ecbe:	b29b      	uxth	r3, r3
            f += ddF_y;
 801ecc0:	441c      	add	r4, r3
            y--;
 801ecc2:	3e01      	subs	r6, #1
            ddF_y += 2;
 801ecc4:	b21b      	sxth	r3, r3
            f += ddF_y;
 801ecc6:	b224      	sxth	r4, r4
            ddF_y += 2;
 801ecc8:	9304      	str	r3, [sp, #16]
            y--;
 801ecca:	b236      	sxth	r6, r6
 801eccc:	fa1f f589 	uxth.w	r5, r9
 801ecd0:	1c6b      	adds	r3, r5, #1
 801ecd2:	b21b      	sxth	r3, r3
        f += ddF_x;
 801ecd4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801ecd8:	9303      	str	r3, [sp, #12]
        if (corner & 0x01) {
 801ecda:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 801ecdc:	3403      	adds	r4, #3
 801ecde:	b224      	sxth	r4, r4
        if (corner & 0x01) {
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d0d9      	beq.n	801ec98 <TFT_DrawFilledCircleCorner+0x48>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801ece4:	fa1f fa86 	uxth.w	sl, r6
 801ece8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ecea:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
 801ecee:	f8cd b000 	str.w	fp, [sp]
 801ecf2:	eba8 030a 	sub.w	r3, r8, sl
 801ecf6:	b29b      	uxth	r3, r3
 801ecf8:	1b52      	subs	r2, r2, r5
 801ecfa:	4619      	mov	r1, r3
 801ecfc:	b292      	uxth	r2, r2
 801ecfe:	4638      	mov	r0, r7
 801ed00:	f7ff fe5e 	bl	801e9c0 <TFT_DrawLine>
 801ed04:	f108 33ff 	add.w	r3, r8, #4294967295
 801ed08:	1b5b      	subs	r3, r3, r5
 801ed0a:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 801ed0c:	eba7 020a 	sub.w	r2, r7, sl
 801ed10:	4619      	mov	r1, r3
 801ed12:	b292      	uxth	r2, r2
 801ed14:	f8cd b000 	str.w	fp, [sp]
 801ed18:	4638      	mov	r0, r7
 801ed1a:	f7ff fe51 	bl	801e9c0 <TFT_DrawLine>
        if (corner & 0x02) {	
 801ed1e:	9b06      	ldr	r3, [sp, #24]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d0bc      	beq.n	801ec9e <TFT_DrawFilledCircleCorner+0x4e>
			TFT_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 801ed24:	fa1f fa86 	uxth.w	sl, r6
 801ed28:	eba8 030a 	sub.w	r3, r8, sl
 801ed2c:	1c78      	adds	r0, r7, #1
 801ed2e:	b29b      	uxth	r3, r3
 801ed30:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
 801ed34:	f8cd b000 	str.w	fp, [sp]
 801ed38:	4428      	add	r0, r5
 801ed3a:	4619      	mov	r1, r3
 801ed3c:	b280      	uxth	r0, r0
 801ed3e:	463a      	mov	r2, r7
 801ed40:	f7ff fe3e 	bl	801e9c0 <TFT_DrawLine>
 801ed44:	f108 33ff 	add.w	r3, r8, #4294967295
 801ed48:	1b5b      	subs	r3, r3, r5
 801ed4a:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 801ed4c:	eb07 000a 	add.w	r0, r7, sl
 801ed50:	4619      	mov	r1, r3
 801ed52:	b280      	uxth	r0, r0
 801ed54:	f8cd b000 	str.w	fp, [sp]
 801ed58:	463a      	mov	r2, r7
 801ed5a:	f7ff fe31 	bl	801e9c0 <TFT_DrawLine>
		if (corner & 0x04) {
 801ed5e:	9b07      	ldr	r3, [sp, #28]
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	d09f      	beq.n	801eca4 <TFT_DrawFilledCircleCorner+0x54>
			TFT_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 801ed64:	fa1f fa86 	uxth.w	sl, r6
 801ed68:	eb08 030a 	add.w	r3, r8, sl
 801ed6c:	1c7a      	adds	r2, r7, #1
 801ed6e:	b29b      	uxth	r3, r3
 801ed70:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
 801ed74:	f8cd b000 	str.w	fp, [sp]
 801ed78:	442a      	add	r2, r5
 801ed7a:	4619      	mov	r1, r3
 801ed7c:	b292      	uxth	r2, r2
 801ed7e:	4638      	mov	r0, r7
 801ed80:	f7ff fe1e 	bl	801e9c0 <TFT_DrawLine>
 801ed84:	f108 0301 	add.w	r3, r8, #1
 801ed88:	442b      	add	r3, r5
 801ed8a:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 801ed8c:	eb07 000a 	add.w	r0, r7, sl
 801ed90:	4619      	mov	r1, r3
 801ed92:	b280      	uxth	r0, r0
 801ed94:	f8cd b000 	str.w	fp, [sp]
 801ed98:	463a      	mov	r2, r7
 801ed9a:	f7ff fe11 	bl	801e9c0 <TFT_DrawLine>
        if (corner & 0x08) {
 801ed9e:	9b08      	ldr	r3, [sp, #32]
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	d082      	beq.n	801ecaa <TFT_DrawFilledCircleCorner+0x5a>
			TFT_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 801eda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eda6:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
 801edaa:	f8cd b000 	str.w	fp, [sp]
 801edae:	fa1f fa86 	uxth.w	sl, r6
 801edb2:	eb08 030a 	add.w	r3, r8, sl
 801edb6:	b29b      	uxth	r3, r3
 801edb8:	1b50      	subs	r0, r2, r5
 801edba:	4619      	mov	r1, r3
 801edbc:	b280      	uxth	r0, r0
 801edbe:	463a      	mov	r2, r7
 801edc0:	f7ff fdfe 	bl	801e9c0 <TFT_DrawLine>
 801edc4:	f108 0301 	add.w	r3, r8, #1
 801edc8:	442b      	add	r3, r5
 801edca:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 801edcc:	eba7 020a 	sub.w	r2, r7, sl
 801edd0:	4619      	mov	r1, r3
 801edd2:	b292      	uxth	r2, r2
 801edd4:	f8cd b000 	str.w	fp, [sp]
 801edd8:	4638      	mov	r0, r7
 801edda:	f7ff fdf1 	bl	801e9c0 <TFT_DrawLine>
    while (x < y) {
 801edde:	9b03      	ldr	r3, [sp, #12]
 801ede0:	429e      	cmp	r6, r3
 801ede2:	f109 0901 	add.w	r9, r9, #1
 801ede6:	f73f af66 	bgt.w	801ecb6 <TFT_DrawFilledCircleCorner+0x66>
}
 801edea:	b00b      	add	sp, #44	; 0x2c
 801edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801edf0 <TFT_DrawFilledRoundedRectangle>:
{
 801edf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edf4:	b085      	sub	sp, #20
 801edf6:	4690      	mov	r8, r2
 801edf8:	469a      	mov	sl, r3
 801edfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801edfc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ee00:	9302      	str	r3, [sp, #8]
	if (x1 == x0 || y1 == y0) {
 801ee02:	4580      	cmp	r8, r0
{
 801ee04:	9203      	str	r2, [sp, #12]
	if (x1 == x0 || y1 == y0) {
 801ee06:	f000 80ab 	beq.w	801ef60 <TFT_DrawFilledRoundedRectangle+0x170>
 801ee0a:	458a      	cmp	sl, r1
 801ee0c:	460d      	mov	r5, r1
 801ee0e:	f000 80a7 	beq.w	801ef60 <TFT_DrawFilledRoundedRectangle+0x170>
 801ee12:	4681      	mov	r9, r0
	if (r == 0) {
 801ee14:	b9cb      	cbnz	r3, 801ee4a <TFT_DrawFilledRoundedRectangle+0x5a>
	for (; y0 <= y1; y0++) {
 801ee16:	458a      	cmp	sl, r1
 801ee18:	f0c0 80ac 	bcc.w	801ef74 <TFT_DrawFilledRoundedRectangle+0x184>
 801ee1c:	b296      	uxth	r6, r2
 801ee1e:	460c      	mov	r4, r1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801ee20:	4623      	mov	r3, r4
 801ee22:	4621      	mov	r1, r4
	for (; y0 <= y1; y0++) {
 801ee24:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801ee26:	9600      	str	r6, [sp, #0]
 801ee28:	4642      	mov	r2, r8
 801ee2a:	4648      	mov	r0, r9
	for (; y0 <= y1; y0++) {
 801ee2c:	b2a4      	uxth	r4, r4
		TFT_DrawLine(x0, y0, x1, y0, color);
 801ee2e:	f7ff fdc7 	bl	801e9c0 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801ee32:	45a2      	cmp	sl, r4
 801ee34:	d2f4      	bcs.n	801ee20 <TFT_DrawFilledRoundedRectangle+0x30>
	if (x0 > x1) {
 801ee36:	45c8      	cmp	r8, r9
 801ee38:	f080 8098 	bcs.w	801ef6c <TFT_DrawFilledRoundedRectangle+0x17c>
 801ee3c:	464a      	mov	r2, r9
 801ee3e:	4653      	mov	r3, sl
 801ee40:	46c1      	mov	r9, r8
 801ee42:	46aa      	mov	sl, r5
 801ee44:	4690      	mov	r8, r2
 801ee46:	461d      	mov	r5, r3
 801ee48:	e005      	b.n	801ee56 <TFT_DrawFilledRoundedRectangle+0x66>
 801ee4a:	4580      	cmp	r8, r0
 801ee4c:	f0c0 808b 	bcc.w	801ef66 <TFT_DrawFilledRoundedRectangle+0x176>
	if (y0 > y1) {
 801ee50:	45aa      	cmp	sl, r5
 801ee52:	f080 808b 	bcs.w	801ef6c <TFT_DrawFilledRoundedRectangle+0x17c>
	if (r > ((x1 - x0) / 2)) {
 801ee56:	eba8 0309 	sub.w	r3, r8, r9
 801ee5a:	9902      	ldr	r1, [sp, #8]
 801ee5c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801ee60:	105b      	asrs	r3, r3, #1
 801ee62:	4299      	cmp	r1, r3
 801ee64:	460a      	mov	r2, r1
		r = (x1 - x0) / 2;
 801ee66:	bfc8      	it	gt
 801ee68:	b29a      	uxthgt	r2, r3
	if (r > ((y1 - y0) / 2)) {
 801ee6a:	eba5 030a 	sub.w	r3, r5, sl
 801ee6e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801ee72:	ea4f 0363 	mov.w	r3, r3, asr #1
		r = (x1 - x0) / 2;
 801ee76:	bfc8      	it	gt
 801ee78:	9202      	strgt	r2, [sp, #8]
	if (r > ((y1 - y0) / 2)) {
 801ee7a:	4293      	cmp	r3, r2
		r = (y1 - y0) / 2;
 801ee7c:	bfbc      	itt	lt
 801ee7e:	b29b      	uxthlt	r3, r3
 801ee80:	9302      	strlt	r3, [sp, #8]
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801ee82:	9a02      	ldr	r2, [sp, #8]
	for (; y0 <= y1; y0++) {
 801ee84:	45aa      	cmp	sl, r5
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801ee86:	eb02 0609 	add.w	r6, r2, r9
 801ee8a:	eba8 0702 	sub.w	r7, r8, r2
 801ee8e:	b2b6      	uxth	r6, r6
 801ee90:	b2bf      	uxth	r7, r7
	for (; y0 <= y1; y0++) {
 801ee92:	d811      	bhi.n	801eeb8 <TFT_DrawFilledRoundedRectangle+0xc8>
 801ee94:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801ee98:	462b      	mov	r3, r5
 801ee9a:	4654      	mov	r4, sl
 801ee9c:	465d      	mov	r5, fp
 801ee9e:	469b      	mov	fp, r3
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eea0:	4623      	mov	r3, r4
 801eea2:	4621      	mov	r1, r4
	for (; y0 <= y1; y0++) {
 801eea4:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eea6:	9500      	str	r5, [sp, #0]
 801eea8:	463a      	mov	r2, r7
 801eeaa:	4630      	mov	r0, r6
	for (; y0 <= y1; y0++) {
 801eeac:	b2a4      	uxth	r4, r4
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eeae:	f7ff fd87 	bl	801e9c0 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801eeb2:	45a3      	cmp	fp, r4
 801eeb4:	d2f4      	bcs.n	801eea0 <TFT_DrawFilledRoundedRectangle+0xb0>
 801eeb6:	465d      	mov	r5, fp
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801eeb8:	9a02      	ldr	r2, [sp, #8]
 801eeba:	4492      	add	sl, r2
 801eebc:	1aad      	subs	r5, r5, r2
 801eebe:	fa1f fb8a 	uxth.w	fp, sl
 801eec2:	b2ad      	uxth	r5, r5
	for (; y0 <= y1; y0++) {
 801eec4:	45ab      	cmp	fp, r5
 801eec6:	d821      	bhi.n	801ef0c <TFT_DrawFilledRoundedRectangle+0x11c>
 801eec8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801eecc:	4653      	mov	r3, sl
 801eece:	465c      	mov	r4, fp
 801eed0:	46ba      	mov	sl, r7
 801eed2:	461f      	mov	r7, r3
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eed4:	4623      	mov	r3, r4
 801eed6:	4621      	mov	r1, r4
	for (; y0 <= y1; y0++) {
 801eed8:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eeda:	9700      	str	r7, [sp, #0]
 801eedc:	4632      	mov	r2, r6
 801eede:	4648      	mov	r0, r9
	for (; y0 <= y1; y0++) {
 801eee0:	b2a4      	uxth	r4, r4
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eee2:	f7ff fd6d 	bl	801e9c0 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801eee6:	42a5      	cmp	r5, r4
 801eee8:	d2f4      	bcs.n	801eed4 <TFT_DrawFilledRoundedRectangle+0xe4>
 801eeea:	463b      	mov	r3, r7
 801eeec:	46b1      	mov	r9, r6
 801eeee:	4657      	mov	r7, sl
 801eef0:	465c      	mov	r4, fp
 801eef2:	461e      	mov	r6, r3
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eef4:	4623      	mov	r3, r4
 801eef6:	4621      	mov	r1, r4
	for (; y0 <= y1; y0++) {
 801eef8:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801eefa:	9600      	str	r6, [sp, #0]
 801eefc:	4642      	mov	r2, r8
 801eefe:	4638      	mov	r0, r7
	for (; y0 <= y1; y0++) {
 801ef00:	b2a4      	uxth	r4, r4
		TFT_DrawLine(x0, y0, x1, y0, color);
 801ef02:	f7ff fd5d 	bl	801e9c0 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801ef06:	42a5      	cmp	r5, r4
 801ef08:	d2f4      	bcs.n	801eef4 <TFT_DrawFilledRoundedRectangle+0x104>
 801ef0a:	464e      	mov	r6, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801ef0c:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801ef10:	9b03      	ldr	r3, [sp, #12]
 801ef12:	9300      	str	r3, [sp, #0]
 801ef14:	b236      	sxth	r6, r6
 801ef16:	fa0f fb8b 	sxth.w	fp, fp
 801ef1a:	4622      	mov	r2, r4
 801ef1c:	4659      	mov	r1, fp
 801ef1e:	4630      	mov	r0, r6
 801ef20:	2301      	movs	r3, #1
 801ef22:	f7ff fe95 	bl	801ec50 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801ef26:	b23f      	sxth	r7, r7
 801ef28:	9b03      	ldr	r3, [sp, #12]
 801ef2a:	9300      	str	r3, [sp, #0]
 801ef2c:	4659      	mov	r1, fp
 801ef2e:	4622      	mov	r2, r4
 801ef30:	4638      	mov	r0, r7
 801ef32:	2302      	movs	r3, #2
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801ef34:	3d01      	subs	r5, #1
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801ef36:	f7ff fe8b 	bl	801ec50 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801ef3a:	b22d      	sxth	r5, r5
 801ef3c:	4638      	mov	r0, r7
 801ef3e:	9f03      	ldr	r7, [sp, #12]
 801ef40:	9700      	str	r7, [sp, #0]
 801ef42:	4629      	mov	r1, r5
 801ef44:	4622      	mov	r2, r4
 801ef46:	2304      	movs	r3, #4
 801ef48:	f7ff fe82 	bl	801ec50 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801ef4c:	4629      	mov	r1, r5
 801ef4e:	4622      	mov	r2, r4
 801ef50:	4630      	mov	r0, r6
 801ef52:	2308      	movs	r3, #8
 801ef54:	970e      	str	r7, [sp, #56]	; 0x38
}
 801ef56:	b005      	add	sp, #20
 801ef58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801ef5c:	f7ff be78 	b.w	801ec50 <TFT_DrawFilledCircleCorner>
}
 801ef60:	b005      	add	sp, #20
 801ef62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (x0 > x1) {
 801ef66:	46c1      	mov	r9, r8
 801ef68:	4680      	mov	r8, r0
 801ef6a:	e771      	b.n	801ee50 <TFT_DrawFilledRoundedRectangle+0x60>
 801ef6c:	4653      	mov	r3, sl
 801ef6e:	46aa      	mov	sl, r5
 801ef70:	461d      	mov	r5, r3
 801ef72:	e770      	b.n	801ee56 <TFT_DrawFilledRoundedRectangle+0x66>
 801ef74:	4580      	cmp	r8, r0
 801ef76:	f4bf af6e 	bcs.w	801ee56 <TFT_DrawFilledRoundedRectangle+0x66>
 801ef7a:	46c1      	mov	r9, r8
 801ef7c:	4680      	mov	r8, r0
 801ef7e:	e76a      	b.n	801ee56 <TFT_DrawFilledRoundedRectangle+0x66>

0801ef80 <TFT_DrawBitmap>:
	}
}


void TFT_DrawBitmap(uint16_t X1, uint16_t Y1, sImage pbmp)
{
 801ef80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef84:	b082      	sub	sp, #8
 801ef86:	ac02      	add	r4, sp, #8
 801ef88:	e904 000c 	stmdb	r4, {r2, r3}
	uint16_t Xpos, Ypos;
	uint32_t i = 0;
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801ef8c:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 801ef90:	f8bd 7000 	ldrh.w	r7, [sp]
 801ef94:	4489      	add	r9, r1
 801ef96:	4549      	cmp	r1, r9
 801ef98:	da1a      	bge.n	801efd0 <TFT_DrawBitmap+0x50>
 801ef9a:	460e      	mov	r6, r1
 801ef9c:	4680      	mov	r8, r0
 801ef9e:	4407      	add	r7, r0
 801efa0:	f04f 0a00 	mov.w	sl, #0
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801efa4:	45b8      	cmp	r8, r7
 801efa6:	da0f      	bge.n	801efc8 <TFT_DrawBitmap+0x48>
 801efa8:	9d01      	ldr	r5, [sp, #4]
 801efaa:	4644      	mov	r4, r8
 801efac:	eb05 054a 	add.w	r5, r5, sl, lsl #1
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801efb0:	4620      	mov	r0, r4
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801efb2:	3401      	adds	r4, #1
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801efb4:	f835 2b02 	ldrh.w	r2, [r5], #2
 801efb8:	4631      	mov	r1, r6
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801efba:	b2a4      	uxth	r4, r4
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801efbc:	f7ff fb5c 	bl	801e678 <TFT_DrawPixel>
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801efc0:	42a7      	cmp	r7, r4
			i++;
 801efc2:	f10a 0a01 	add.w	sl, sl, #1
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801efc6:	dcf3      	bgt.n	801efb0 <TFT_DrawBitmap+0x30>
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801efc8:	3601      	adds	r6, #1
 801efca:	b2b6      	uxth	r6, r6
 801efcc:	454e      	cmp	r6, r9
 801efce:	dbe9      	blt.n	801efa4 <TFT_DrawBitmap+0x24>
		}
	}
}
 801efd0:	b002      	add	sp, #8
 801efd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801efd6:	bf00      	nop

0801efd8 <TFT_SetFont>:

//----------------------------------------

void TFT_SetFont(sFONT *fonts)
{
  lcdprop.pFont=fonts;
 801efd8:	4b01      	ldr	r3, [pc, #4]	; (801efe0 <TFT_SetFont+0x8>)
 801efda:	6098      	str	r0, [r3, #8]
 801efdc:	4770      	bx	lr
 801efde:	bf00      	nop
 801efe0:	20090f5c 	.word	0x20090f5c

0801efe4 <TFT_SetTextColor>:

//----------------------------------------

void TFT_SetTextColor(uint32_t color)
{
  lcdprop.TextColor=color;
 801efe4:	4b01      	ldr	r3, [pc, #4]	; (801efec <TFT_SetTextColor+0x8>)
 801efe6:	6018      	str	r0, [r3, #0]
 801efe8:	4770      	bx	lr
 801efea:	bf00      	nop
 801efec:	20090f5c 	.word	0x20090f5c

0801eff0 <TFT_SetBackColor>:

//----------------------------------------

void TFT_SetBackColor(uint32_t color)
{
  lcdprop.BackColor=color;
 801eff0:	4b01      	ldr	r3, [pc, #4]	; (801eff8 <TFT_SetBackColor+0x8>)
 801eff2:	6058      	str	r0, [r3, #4]
 801eff4:	4770      	bx	lr
 801eff6:	bf00      	nop
 801eff8:	20090f5c 	.word	0x20090f5c

0801effc <TFT_DrawCharRus>:

//----------------------------------------
	//--------------------------------------------------------------

void TFT_DrawCharRus(uint16_t x, uint16_t y, const uint8_t c)
{
 801effc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i = 0, j = 0;
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
	if(c == 0x01)
 801f000:	2a01      	cmp	r2, #1
{
 801f002:	b08b      	sub	sp, #44	; 0x2c
	{
		ch = &lcdprop.pFont->table[0];
 801f004:	f8df 8104 	ldr.w	r8, [pc, #260]	; 801f10c <TFT_DrawCharRus+0x110>
 801f008:	4b3f      	ldr	r3, [pc, #252]	; (801f108 <TFT_DrawCharRus+0x10c>)
	if(c == 0x01)
 801f00a:	d06e      	beq.n	801f0ea <TFT_DrawCharRus+0xee>
	}
	else
	{
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801f00c:	461d      	mov	r5, r3
 801f00e:	9305      	str	r3, [sp, #20]
 801f010:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f014:	889c      	ldrh	r4, [r3, #4]
 801f016:	9403      	str	r4, [sp, #12]
 801f018:	4626      	mov	r6, r4
 801f01a:	88dc      	ldrh	r4, [r3, #6]
 801f01c:	9404      	str	r4, [sp, #16]
 801f01e:	4627      	mov	r7, r4
 801f020:	681c      	ldr	r4, [r3, #0]
 801f022:	f1a2 037f 	sub.w	r3, r2, #127	; 0x7f
 801f026:	4632      	mov	r2, r6
 801f028:	3207      	adds	r2, #7
 801f02a:	10d2      	asrs	r2, r2, #3
 801f02c:	4616      	mov	r6, r2
 801f02e:	fb07 f303 	mul.w	r3, r7, r3
 801f032:	fb06 4303 	mla	r3, r6, r3, r4
 801f036:	9202      	str	r2, [sp, #8]
 801f038:	602b      	str	r3, [r5, #0]
	}
	
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 *((width + 7)/8) - width ;
 801f03a:	9a03      	ldr	r2, [sp, #12]
 801f03c:	9c02      	ldr	r4, [sp, #8]
 801f03e:	ebc2 03c4 	rsb	r3, r2, r4, lsl #3
 801f042:	b2db      	uxtb	r3, r3
 801f044:	9307      	str	r3, [sp, #28]
	for(i = 0; i < height; i++)
 801f046:	9b04      	ldr	r3, [sp, #16]
 801f048:	2b00      	cmp	r3, #0
 801f04a:	d040      	beq.n	801f0ce <TFT_DrawCharRus+0xd2>
 801f04c:	2300      	movs	r3, #0
 801f04e:	9301      	str	r3, [sp, #4]
 801f050:	469a      	mov	sl, r3
 801f052:	1e53      	subs	r3, r2, #1
 801f054:	9106      	str	r1, [sp, #24]
 801f056:	9009      	str	r0, [sp, #36]	; 0x24
 801f058:	9308      	str	r3, [sp, #32]
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
			break;
		}
		for (j = 0; j < width; j++)
		{
				if(line & (1 << (width- j + offset- 1)))
 801f05a:	f04f 0901 	mov.w	r9, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801f05e:	9b05      	ldr	r3, [sp, #20]
		switch((width + 7)/8)
 801f060:	9902      	ldr	r1, [sp, #8]
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801f062:	681a      	ldr	r2, [r3, #0]
 801f064:	9b06      	ldr	r3, [sp, #24]
 801f066:	eb03 050a 	add.w	r5, r3, sl
 801f06a:	9b01      	ldr	r3, [sp, #4]
		switch((width + 7)/8)
 801f06c:	2901      	cmp	r1, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801f06e:	4413      	add	r3, r2
 801f070:	b2ad      	uxth	r5, r5
		switch((width + 7)/8)
 801f072:	d02f      	beq.n	801f0d4 <TFT_DrawCharRus+0xd8>
 801f074:	2902      	cmp	r1, #2
 801f076:	d130      	bne.n	801f0da <TFT_DrawCharRus+0xde>
				line = (pchar[0]<< 8) | pchar[1];
 801f078:	781a      	ldrb	r2, [r3, #0]
 801f07a:	785e      	ldrb	r6, [r3, #1]
 801f07c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
		for (j = 0; j < width; j++)
 801f080:	9b03      	ldr	r3, [sp, #12]
 801f082:	b1db      	cbz	r3, 801f0bc <TFT_DrawCharRus+0xc0>
 801f084:	9b08      	ldr	r3, [sp, #32]
 801f086:	9a07      	ldr	r2, [sp, #28]
 801f088:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f08a:	eb03 0b02 	add.w	fp, r3, r2
 801f08e:	9b03      	ldr	r3, [sp, #12]
 801f090:	ebab 0703 	sub.w	r7, fp, r3
				if(line & (1 << (width- j + offset- 1)))
 801f094:	fa09 f30b 	lsl.w	r3, r9, fp
 801f098:	4233      	tst	r3, r6
			{
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801f09a:	4620      	mov	r0, r4
 801f09c:	4629      	mov	r1, r5
			}
			else
			{
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801f09e:	bf09      	itett	eq
 801f0a0:	4620      	moveq	r0, r4
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801f0a2:	f8b8 2000 	ldrhne.w	r2, [r8]
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801f0a6:	f8b8 2004 	ldrheq.w	r2, [r8, #4]
 801f0aa:	4629      	moveq	r1, r5
 801f0ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f0b0:	f7ff fae2 	bl	801e678 <TFT_DrawPixel>
 801f0b4:	3401      	adds	r4, #1
		for (j = 0; j < width; j++)
 801f0b6:	455f      	cmp	r7, fp
 801f0b8:	b2a4      	uxth	r4, r4
 801f0ba:	d1eb      	bne.n	801f094 <TFT_DrawCharRus+0x98>
 801f0bc:	9b01      	ldr	r3, [sp, #4]
 801f0be:	9a02      	ldr	r2, [sp, #8]
 801f0c0:	4413      	add	r3, r2
 801f0c2:	9301      	str	r3, [sp, #4]
	for(i = 0; i < height; i++)
 801f0c4:	9b04      	ldr	r3, [sp, #16]
 801f0c6:	f10a 0a01 	add.w	sl, sl, #1
 801f0ca:	459a      	cmp	sl, r3
 801f0cc:	d1c7      	bne.n	801f05e <TFT_DrawCharRus+0x62>
			}
		}
		y++;
	}
}
 801f0ce:	b00b      	add	sp, #44	; 0x2c
 801f0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				line = pchar[0];
 801f0d4:	9b01      	ldr	r3, [sp, #4]
 801f0d6:	5cd6      	ldrb	r6, [r2, r3]
			break;
 801f0d8:	e7d2      	b.n	801f080 <TFT_DrawCharRus+0x84>
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801f0da:	785e      	ldrb	r6, [r3, #1]
 801f0dc:	781a      	ldrb	r2, [r3, #0]
 801f0de:	789b      	ldrb	r3, [r3, #2]
 801f0e0:	0236      	lsls	r6, r6, #8
 801f0e2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 801f0e6:	431e      	orrs	r6, r3
			break;
 801f0e8:	e7ca      	b.n	801f080 <TFT_DrawCharRus+0x84>
		ch = &lcdprop.pFont->table[0];
 801f0ea:	461c      	mov	r4, r3
 801f0ec:	9305      	str	r3, [sp, #20]
 801f0ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f0f2:	889a      	ldrh	r2, [r3, #4]
 801f0f4:	9203      	str	r2, [sp, #12]
 801f0f6:	4615      	mov	r5, r2
 801f0f8:	681a      	ldr	r2, [r3, #0]
 801f0fa:	88db      	ldrh	r3, [r3, #6]
 801f0fc:	9304      	str	r3, [sp, #16]
 801f0fe:	1deb      	adds	r3, r5, #7
 801f100:	10db      	asrs	r3, r3, #3
 801f102:	6022      	str	r2, [r4, #0]
 801f104:	9302      	str	r3, [sp, #8]
 801f106:	e798      	b.n	801f03a <TFT_DrawCharRus+0x3e>
 801f108:	20090f6c 	.word	0x20090f6c
 801f10c:	20090f5c 	.word	0x20090f5c

0801f110 <TFT_DrawCutBMP>:


	uint16_t Xpos, Ypos;
	uint32_t ip = 0;
void TFT_DrawCutBMP(uint16_t x_pos, uint16_t y_pos, uint16_t xs, uint16_t ys, uint16_t size, sImage pbmp)
{
 801f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f114:	b085      	sub	sp, #20
	uint16_t q = 1;
	ip = pbmp.Width*ys+xs-1;
	
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801f116:	4f28      	ldr	r7, [pc, #160]	; (801f1b8 <TFT_DrawCutBMP+0xa8>)
{
 801f118:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801f11c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801f120:	9401      	str	r4, [sp, #4]
 801f122:	4625      	mov	r5, r4
	ip = pbmp.Width*ys+xs-1;
 801f124:	fb06 2303 	mla	r3, r6, r3, r2
 801f128:	4c24      	ldr	r4, [pc, #144]	; (801f1bc <TFT_DrawCutBMP+0xac>)
{
 801f12a:	9003      	str	r0, [sp, #12]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801f12c:	194a      	adds	r2, r1, r5
	ip = pbmp.Width*ys+xs-1;
 801f12e:	f103 3eff 	add.w	lr, r3, #4294967295
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801f132:	4291      	cmp	r1, r2
 801f134:	9202      	str	r2, [sp, #8]
	ip = pbmp.Width*ys+xs-1;
 801f136:	f8c4 e000 	str.w	lr, [r4]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801f13a:	8039      	strh	r1, [r7, #0]
 801f13c:	da38      	bge.n	801f1b0 <TFT_DrawCutBMP+0xa0>
 801f13e:	eb03 0a05 	add.w	sl, r3, r5
 801f142:	eb00 0805 	add.w	r8, r0, r5
 801f146:	f8df b078 	ldr.w	fp, [pc, #120]	; 801f1c0 <TFT_DrawCutBMP+0xb0>
 801f14a:	2501      	movs	r5, #1
 801f14c:	f1aa 0a02 	sub.w	sl, sl, #2
 801f150:	46a9      	mov	r9, r5
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801f152:	9803      	ldr	r0, [sp, #12]
 801f154:	f8ab 0000 	strh.w	r0, [fp]
 801f158:	4580      	cmp	r8, r0
 801f15a:	dd23      	ble.n	801f1a4 <TFT_DrawCutBMP+0x94>
 801f15c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f15e:	e009      	b.n	801f174 <TFT_DrawCutBMP+0x64>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
				{	ip++;} 
 801f160:	6021      	str	r1, [r4, #0]
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801f162:	f8bb 0000 	ldrh.w	r0, [fp]
 801f166:	8839      	ldrh	r1, [r7, #0]
 801f168:	3001      	adds	r0, #1
 801f16a:	b280      	uxth	r0, r0
 801f16c:	4540      	cmp	r0, r8
 801f16e:	f8ab 0000 	strh.w	r0, [fp]
 801f172:	da17      	bge.n	801f1a4 <TFT_DrawCutBMP+0x94>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
 801f174:	6822      	ldr	r2, [r4, #0]
 801f176:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 801f17a:	f7ff fa7d 	bl	801e678 <TFT_DrawPixel>
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801f17e:	6822      	ldr	r2, [r4, #0]
 801f180:	f109 31ff 	add.w	r1, r9, #4294967295
 801f184:	fb06 a101 	mla	r1, r6, r1, sl
 801f188:	4291      	cmp	r1, r2
				{	ip++;} 
 801f18a:	f102 0101 	add.w	r1, r2, #1
				else
				{ip = ip + pbmp.Width-size+1; 
 801f18e:	460a      	mov	r2, r1
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801f190:	d8e6      	bhi.n	801f160 <TFT_DrawCutBMP+0x50>
				{ip = ip + pbmp.Width-size+1; 
 801f192:	9b01      	ldr	r3, [sp, #4]
 801f194:	4432      	add	r2, r6
 801f196:	1ad2      	subs	r2, r2, r3
					q++;}
 801f198:	f109 0301 	add.w	r3, r9, #1
				{ip = ip + pbmp.Width-size+1; 
 801f19c:	6022      	str	r2, [r4, #0]
					q++;}
 801f19e:	fa1f f983 	uxth.w	r9, r3
 801f1a2:	e7de      	b.n	801f162 <TFT_DrawCutBMP+0x52>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801f1a4:	3101      	adds	r1, #1
 801f1a6:	9b02      	ldr	r3, [sp, #8]
 801f1a8:	b289      	uxth	r1, r1
 801f1aa:	4299      	cmp	r1, r3
 801f1ac:	8039      	strh	r1, [r7, #0]
 801f1ae:	dbd0      	blt.n	801f152 <TFT_DrawCutBMP+0x42>
		}
	}
	
}
 801f1b0:	b005      	add	sp, #20
 801f1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1b6:	bf00      	nop
 801f1b8:	20090f58 	.word	0x20090f58
 801f1bc:	200055c4 	.word	0x200055c4
 801f1c0:	20090f68 	.word	0x20090f68

0801f1c4 <TFT_DrawChar>:
		i++;
	}
}

void TFT_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 801f1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i=0, j=0;
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line;
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801f1c8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 801f2ac <TFT_DrawChar+0xe8>
 801f1cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
{
 801f1d0:	b089      	sub	sp, #36	; 0x24
		((lcdprop.pFont->Width +7) / 8)];
 801f1d2:	889c      	ldrh	r4, [r3, #4]
 801f1d4:	9402      	str	r4, [sp, #8]
 801f1d6:	4625      	mov	r5, r4
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801f1d8:	88dc      	ldrh	r4, [r3, #6]
 801f1da:	9403      	str	r4, [sp, #12]
 801f1dc:	4626      	mov	r6, r4
 801f1de:	681c      	ldr	r4, [r3, #0]
 801f1e0:	f1a2 0320 	sub.w	r3, r2, #32
		((lcdprop.pFont->Width +7) / 8)];
 801f1e4:	462a      	mov	r2, r5
 801f1e6:	3207      	adds	r2, #7
 801f1e8:	10d2      	asrs	r2, r2, #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801f1ea:	fb06 f303 	mul.w	r3, r6, r3
 801f1ee:	fb02 4303 	mla	r3, r2, r3, r4
		((lcdprop.pFont->Width +7) / 8)];
 801f1f2:	9201      	str	r2, [sp, #4]
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 * ((width + 7)/8) - width;
 801f1f4:	462c      	mov	r4, r5
 801f1f6:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801f1fa:	4d2b      	ldr	r5, [pc, #172]	; (801f2a8 <TFT_DrawChar+0xe4>)
	offset = 8 * ((width + 7)/8) - width;
 801f1fc:	b2d2      	uxtb	r2, r2
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801f1fe:	602b      	str	r3, [r5, #0]
	offset = 8 * ((width + 7)/8) - width;
 801f200:	9205      	str	r2, [sp, #20]
	for(i = 0;i < height; i++)
 801f202:	2e00      	cmp	r6, #0
 801f204:	d04c      	beq.n	801f2a0 <TFT_DrawChar+0xdc>
 801f206:	2200      	movs	r2, #0
 801f208:	9200      	str	r2, [sp, #0]
 801f20a:	4692      	mov	sl, r2
 801f20c:	1e62      	subs	r2, r4, #1
 801f20e:	9104      	str	r1, [sp, #16]
 801f210:	9007      	str	r0, [sp, #28]
 801f212:	9206      	str	r2, [sp, #24]
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
			break;
		}
		for(j = 0;j < width; j++)
		{
			if(line & (1 << (width - j + offset -1)))
 801f214:	f04f 0901 	mov.w	r9, #1
 801f218:	9a04      	ldr	r2, [sp, #16]
		switch((width + 7)/8)
 801f21a:	9901      	ldr	r1, [sp, #4]
 801f21c:	eb02 050a 	add.w	r5, r2, sl
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801f220:	9a00      	ldr	r2, [sp, #0]
		switch((width + 7)/8)
 801f222:	2901      	cmp	r1, #1
 801f224:	b2ad      	uxth	r5, r5
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801f226:	441a      	add	r2, r3
		switch((width + 7)/8)
 801f228:	d037      	beq.n	801f29a <TFT_DrawChar+0xd6>
 801f22a:	2902      	cmp	r1, #2
 801f22c:	d12d      	bne.n	801f28a <TFT_DrawChar+0xc6>
			line = (pchar[0]<<8) | pchar[1];
 801f22e:	7813      	ldrb	r3, [r2, #0]
 801f230:	7856      	ldrb	r6, [r2, #1]
 801f232:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
		for(j = 0;j < width; j++)
 801f236:	9b02      	ldr	r3, [sp, #8]
 801f238:	b1db      	cbz	r3, 801f272 <TFT_DrawChar+0xae>
 801f23a:	9b06      	ldr	r3, [sp, #24]
 801f23c:	9a05      	ldr	r2, [sp, #20]
 801f23e:	9c07      	ldr	r4, [sp, #28]
 801f240:	eb03 0b02 	add.w	fp, r3, r2
 801f244:	9b02      	ldr	r3, [sp, #8]
 801f246:	ebab 0703 	sub.w	r7, fp, r3
			if(line & (1 << (width - j + offset -1)))
 801f24a:	fa09 f30b 	lsl.w	r3, r9, fp
 801f24e:	4233      	tst	r3, r6
			{
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801f250:	4620      	mov	r0, r4
 801f252:	4629      	mov	r1, r5
			}
			else
			{
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801f254:	bf09      	itett	eq
 801f256:	4620      	moveq	r0, r4
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801f258:	f8b8 2000 	ldrhne.w	r2, [r8]
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801f25c:	f8b8 2004 	ldrheq.w	r2, [r8, #4]
 801f260:	4629      	moveq	r1, r5
 801f262:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f266:	f7ff fa07 	bl	801e678 <TFT_DrawPixel>
 801f26a:	3401      	adds	r4, #1
		for(j = 0;j < width; j++)
 801f26c:	455f      	cmp	r7, fp
 801f26e:	b2a4      	uxth	r4, r4
 801f270:	d1eb      	bne.n	801f24a <TFT_DrawChar+0x86>
 801f272:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801f276:	4413      	add	r3, r2
 801f278:	9300      	str	r3, [sp, #0]
	for(i = 0;i < height; i++)
 801f27a:	9b03      	ldr	r3, [sp, #12]
 801f27c:	f10a 0a01 	add.w	sl, sl, #1
 801f280:	459a      	cmp	sl, r3
 801f282:	d00d      	beq.n	801f2a0 <TFT_DrawChar+0xdc>
 801f284:	4b08      	ldr	r3, [pc, #32]	; (801f2a8 <TFT_DrawChar+0xe4>)
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	e7c6      	b.n	801f218 <TFT_DrawChar+0x54>
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801f28a:	7856      	ldrb	r6, [r2, #1]
 801f28c:	7811      	ldrb	r1, [r2, #0]
 801f28e:	7893      	ldrb	r3, [r2, #2]
 801f290:	0236      	lsls	r6, r6, #8
 801f292:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 801f296:	431e      	orrs	r6, r3
			break;
 801f298:	e7cd      	b.n	801f236 <TFT_DrawChar+0x72>
			line = pchar[0];
 801f29a:	9a00      	ldr	r2, [sp, #0]
 801f29c:	5c9e      	ldrb	r6, [r3, r2]
			break;
 801f29e:	e7ca      	b.n	801f236 <TFT_DrawChar+0x72>
			}
		}
		y++;
	}
}
 801f2a0:	b009      	add	sp, #36	; 0x24
 801f2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2a6:	bf00      	nop
 801f2a8:	20090f6c 	.word	0x20090f6c
 801f2ac:	20090f5c 	.word	0x20090f5c

0801f2b0 <TFT_DisplayString>:
//----------------------------------------
void TFT_DisplayString(uint16_t Xpos, uint16_t Ypos, const uint8_t *Text,	Text_AlignModeTypdef Mode)
{
 801f2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f2b4:	4616      	mov	r6, r2
	uint16_t ref_column = 1, i = 0;
	uint32_t size = 0, xsize = 0;
	const uint8_t *ptr = Text;
	
	while(*ptr++) size++ ;
 801f2b6:	7812      	ldrb	r2, [r2, #0]
{
 801f2b8:	4604      	mov	r4, r0
 801f2ba:	4688      	mov	r8, r1
	while(*ptr++) size++ ;
 801f2bc:	2a00      	cmp	r2, #0
 801f2be:	d03e      	beq.n	801f33e <TFT_DisplayString+0x8e>
 801f2c0:	1c71      	adds	r1, r6, #1
 801f2c2:	1b8d      	subs	r5, r1, r6
 801f2c4:	f811 0b01 	ldrb.w	r0, [r1], #1
 801f2c8:	2800      	cmp	r0, #0
 801f2ca:	d1fa      	bne.n	801f2c2 <TFT_DisplayString+0x12>
	xsize = (X_SIZE/lcdprop.pFont->Width);
 801f2cc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 801f348 <TFT_DisplayString+0x98>
 801f2d0:	4f1c      	ldr	r7, [pc, #112]	; (801f344 <TFT_DisplayString+0x94>)
 801f2d2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801f2d6:	8838      	ldrh	r0, [r7, #0]
 801f2d8:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801f2dc:	fbb0 f1fe 	udiv	r1, r0, lr
	switch (Mode)
 801f2e0:	2b01      	cmp	r3, #1
 801f2e2:	d025      	beq.n	801f330 <TFT_DisplayString+0x80>
 801f2e4:	2b02      	cmp	r3, #2
 801f2e6:	d01e      	beq.n	801f326 <TFT_DisplayString+0x76>
		{
			ref_column = Xpos;
			break;
		}
	}
	if((ref_column < 1) || (ref_column >= 0x8000))
 801f2e8:	b223      	sxth	r3, r4
	{
		ref_column = 1;
 801f2ea:	2b00      	cmp	r3, #0
 801f2ec:	bfd8      	it	le
 801f2ee:	2401      	movle	r4, #1
	}
	
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801f2f0:	b1ba      	cbz	r2, 801f322 <TFT_DisplayString+0x72>
 801f2f2:	4570      	cmp	r0, lr
 801f2f4:	db15      	blt.n	801f322 <TFT_DisplayString+0x72>
 801f2f6:	4635      	mov	r5, r6
 801f2f8:	e000      	b.n	801f2fc <TFT_DisplayString+0x4c>
 801f2fa:	b192      	cbz	r2, 801f322 <TFT_DisplayString+0x72>
			lcdprop.pFont->Width))
	{
		TFT_DrawChar(ref_column, Ypos, *Text);
 801f2fc:	4620      	mov	r0, r4
 801f2fe:	4641      	mov	r1, r8
 801f300:	f7ff ff60 	bl	801f1c4 <TFT_DrawChar>
		ref_column += lcdprop.pFont->Width;
 801f304:	f8d9 3008 	ldr.w	r3, [r9, #8]
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801f308:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		ref_column += lcdprop.pFont->Width;
 801f30c:	8899      	ldrh	r1, [r3, #4]
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801f30e:	8838      	ldrh	r0, [r7, #0]
 801f310:	1bab      	subs	r3, r5, r6
 801f312:	b29b      	uxth	r3, r3
 801f314:	fb01 0313 	mls	r3, r1, r3, r0
 801f318:	b29b      	uxth	r3, r3
		ref_column += lcdprop.pFont->Width;
 801f31a:	440c      	add	r4, r1
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801f31c:	4299      	cmp	r1, r3
		ref_column += lcdprop.pFont->Width;
 801f31e:	b2a4      	uxth	r4, r4
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801f320:	ddeb      	ble.n	801f2fa <TFT_DisplayString+0x4a>
 801f322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801f326:	1b4d      	subs	r5, r1, r5
 801f328:	fb15 440e 	smlabb	r4, r5, lr, r4
 801f32c:	b2a4      	uxth	r4, r4
			break;
 801f32e:	e7db      	b.n	801f2e8 <TFT_DisplayString+0x38>
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width) / 2;
 801f330:	1b49      	subs	r1, r1, r5
 801f332:	fb0e f101 	mul.w	r1, lr, r1
 801f336:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 801f33a:	b2a4      	uxth	r4, r4
			break;
 801f33c:	e7d4      	b.n	801f2e8 <TFT_DisplayString+0x38>
	uint32_t size = 0, xsize = 0;
 801f33e:	4615      	mov	r5, r2
 801f340:	e7c4      	b.n	801f2cc <TFT_DisplayString+0x1c>
 801f342:	bf00      	nop
 801f344:	20000a44 	.word	0x20000a44
 801f348:	20090f5c 	.word	0x20090f5c

0801f34c <DrawLineX>:
		Text++;
		i++;
	}
}

void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801f34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801f350:	eba3 0901 	sub.w	r9, r3, r1
 801f354:	eba2 0a00 	sub.w	sl, r2, r0
 801f358:	f1b9 0f00 	cmp.w	r9, #0
 801f35c:	bfb8      	it	lt
 801f35e:	f1c9 0900 	rsblt	r9, r9, #0
 801f362:	f1ba 0f00 	cmp.w	sl, #0
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801f366:	b083      	sub	sp, #12
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801f368:	bfb8      	it	lt
 801f36a:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep){
 801f36e:	45d1      	cmp	r9, sl
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801f370:	460f      	mov	r7, r1
 801f372:	4615      	mov	r5, r2
 801f374:	461c      	mov	r4, r3
 801f376:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    if (steep){
 801f37a:	dc45      	bgt.n	801f408 <DrawLineX+0xbc>
 801f37c:	460a      	mov	r2, r1
 801f37e:	462c      	mov	r4, r5
 801f380:	4629      	mov	r1, r5
 801f382:	4683      	mov	fp, r0
 801f384:	4607      	mov	r7, r0
 801f386:	461d      	mov	r5, r3
 801f388:	4610      	mov	r0, r2
        swap(x1, y1);
        swap(x2, y2);
    }
    if(x1>x2){
 801f38a:	42a7      	cmp	r7, r4
 801f38c:	d80b      	bhi.n	801f3a6 <DrawLineX+0x5a>
 801f38e:	9400      	str	r4, [sp, #0]
 801f390:	4694      	mov	ip, r2
 801f392:	46de      	mov	lr, fp
 801f394:	462e      	mov	r6, r5
 801f396:	463c      	mov	r4, r7
 801f398:	9f00      	ldr	r7, [sp, #0]
 801f39a:	461a      	mov	r2, r3
 801f39c:	468b      	mov	fp, r1
 801f39e:	4605      	mov	r5, r0
 801f3a0:	4663      	mov	r3, ip
 801f3a2:	4671      	mov	r1, lr
 801f3a4:	4630      	mov	r0, r6
        swap(x1, x2);
        swap(y1, y2);
    }
    int dx,dy;
    dx=x2-x1;
    dy=abs(y2-y1);
 801f3a6:	1ad6      	subs	r6, r2, r3
    dx=x2-x1;
 801f3a8:	ebab 0101 	sub.w	r1, fp, r1
    dy=abs(y2-y1);
 801f3ac:	2e00      	cmp	r6, #0
    int err=dx/2;
 801f3ae:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
    dy=abs(y2-y1);
 801f3b2:	bfb8      	it	lt
 801f3b4:	4276      	neglt	r6, r6
    int ystep;
    if(y1<y2) ystep = 1;
 801f3b6:	42a8      	cmp	r0, r5
    dx=x2-x1;
 801f3b8:	9100      	str	r1, [sp, #0]
    int err=dx/2;
 801f3ba:	ea4f 0b63 	mov.w	fp, r3, asr #1
    if(y1<y2) ystep = 1;
 801f3be:	d91d      	bls.n	801f3fc <DrawLineX+0xb0>
 801f3c0:	2301      	movs	r3, #1
 801f3c2:	9301      	str	r3, [sp, #4]
 801f3c4:	e001      	b.n	801f3ca <DrawLineX+0x7e>
    else  ystep = -1;
    for ( ; x1<=x2; x1++){
 801f3c6:	42bc      	cmp	r4, r7
 801f3c8:	d815      	bhi.n	801f3f6 <DrawLineX+0xaa>
			
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801f3ca:	45d1      	cmp	r9, sl
 801f3cc:	4642      	mov	r2, r8
 801f3ce:	4621      	mov	r1, r4
 801f3d0:	4628      	mov	r0, r5
 801f3d2:	dc02      	bgt.n	801f3da <DrawLineX+0x8e>
//									graph_data_old[i_coord] = TFT_GetPixelValue(y1, x1);
//									i_coord++;
//							}
//					}
				}
        else {TFT_DrawPixel(x1, y1, color);
 801f3d4:	4642      	mov	r2, r8
 801f3d6:	4629      	mov	r1, r5
 801f3d8:	4620      	mov	r0, r4
 801f3da:	f7ff f94d 	bl	801e678 <TFT_DrawPixel>
    for ( ; x1<=x2; x1++){
 801f3de:	3401      	adds	r4, #1
//									i_coord++;
//							}
//						}
					}
        err-=dy;
        if (err<0){
 801f3e0:	ebbb 0b06 	subs.w	fp, fp, r6
    for ( ; x1<=x2; x1++){
 801f3e4:	b2a4      	uxth	r4, r4
        if (err<0){
 801f3e6:	d5ee      	bpl.n	801f3c6 <DrawLineX+0x7a>
            y1 += ystep;
 801f3e8:	9b01      	ldr	r3, [sp, #4]
 801f3ea:	18eb      	adds	r3, r5, r3
 801f3ec:	b29d      	uxth	r5, r3
            err+=dx;
 801f3ee:	9b00      	ldr	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801f3f0:	42bc      	cmp	r4, r7
            err+=dx;
 801f3f2:	449b      	add	fp, r3
    for ( ; x1<=x2; x1++){
 801f3f4:	d9e9      	bls.n	801f3ca <DrawLineX+0x7e>
        }
    }
}
 801f3f6:	b003      	add	sp, #12
 801f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for ( ; x1<=x2; x1++){
 801f3fc:	42bc      	cmp	r4, r7
 801f3fe:	d8fa      	bhi.n	801f3f6 <DrawLineX+0xaa>
    else  ystep = -1;
 801f400:	f04f 33ff 	mov.w	r3, #4294967295
 801f404:	9301      	str	r3, [sp, #4]
 801f406:	e7e0      	b.n	801f3ca <DrawLineX+0x7e>
 801f408:	4619      	mov	r1, r3
 801f40a:	46bb      	mov	fp, r7
 801f40c:	4613      	mov	r3, r2
 801f40e:	4602      	mov	r2, r0
 801f410:	e7bb      	b.n	801f38a <DrawLineX+0x3e>
 801f412:	bf00      	nop

0801f414 <MX_SDMMC1_SD_Init>:

/* SDMMC1 init function */
static void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 801f414:	4b06      	ldr	r3, [pc, #24]	; (801f430 <MX_SDMMC1_SD_Init+0x1c>)
 801f416:	4a07      	ldr	r2, [pc, #28]	; (801f434 <MX_SDMMC1_SD_Init+0x20>)
 801f418:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801f41a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801f41e:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801f420:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 10;
 801f422:	210a      	movs	r1, #10
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801f424:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801f426:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801f428:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 801f42a:	6159      	str	r1, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801f42c:	619a      	str	r2, [r3, #24]
 801f42e:	4770      	bx	lr
 801f430:	20091070 	.word	0x20091070
 801f434:	50062400 	.word	0x50062400

0801f438 <MX_TIM2_Init>:
{
 801f438:	b510      	push	{r4, lr}
  htim2.Init.Period = exposure_timer_period[exp_num];
 801f43a:	4a16      	ldr	r2, [pc, #88]	; (801f494 <MX_TIM2_Init+0x5c>)
  htim2.Instance = TIM2;
 801f43c:	4c16      	ldr	r4, [pc, #88]	; (801f498 <MX_TIM2_Init+0x60>)
  htim2.Init.Period = exposure_timer_period[exp_num];
 801f43e:	7811      	ldrb	r1, [r2, #0]
 801f440:	4a16      	ldr	r2, [pc, #88]	; (801f49c <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 10000;
 801f442:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801f446:	f242 7310 	movw	r3, #10000	; 0x2710
 801f44a:	e884 0009 	stmia.w	r4, {r0, r3}
{
 801f44e:	b088      	sub	sp, #32
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f450:	2300      	movs	r3, #0
  htim2.Init.Period = exposure_timer_period[exp_num];
 801f452:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f456:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801f458:	4620      	mov	r0, r4
  htim2.Init.Period = exposure_timer_period[exp_num];
 801f45a:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801f45c:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801f45e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801f460:	f7e6 ff62 	bl	8006328 <HAL_TIM_Base_Init>
 801f464:	b100      	cbz	r0, 801f468 <MX_TIM2_Init+0x30>
 801f466:	e7fe      	b.n	801f466 <MX_TIM2_Init+0x2e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801f468:	a908      	add	r1, sp, #32
 801f46a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801f46e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801f472:	4620      	mov	r0, r4
 801f474:	f7e7 f8b4 	bl	80065e0 <HAL_TIM_ConfigClockSource>
 801f478:	b100      	cbz	r0, 801f47c <MX_TIM2_Init+0x44>
 801f47a:	e7fe      	b.n	801f47a <MX_TIM2_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801f47c:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801f47e:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801f480:	a901      	add	r1, sp, #4
 801f482:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801f484:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801f486:	f7e7 f9cf 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 801f48a:	b100      	cbz	r0, 801f48e <MX_TIM2_Init+0x56>
 801f48c:	e7fe      	b.n	801f48c <MX_TIM2_Init+0x54>
}
 801f48e:	b008      	add	sp, #32
 801f490:	bd10      	pop	{r4, pc}
 801f492:	bf00      	nop
 801f494:	2008be5a 	.word	0x2008be5a
 801f498:	200914cc 	.word	0x200914cc
 801f49c:	080341d8 	.word	0x080341d8

0801f4a0 <DWT_Init>:
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) 
 801f4a0:	4a07      	ldr	r2, [pc, #28]	; (801f4c0 <DWT_Init+0x20>)
 801f4a2:	68d3      	ldr	r3, [r2, #12]
 801f4a4:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 801f4a8:	d109      	bne.n	801f4be <DWT_Init+0x1e>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801f4aa:	68d1      	ldr	r1, [r2, #12]
 801f4ac:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 801f4b0:	60d1      	str	r1, [r2, #12]
    DWT->CYCCNT = 0;
 801f4b2:	4a04      	ldr	r2, [pc, #16]	; (801f4c4 <DWT_Init+0x24>)
 801f4b4:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801f4b6:	6813      	ldr	r3, [r2, #0]
 801f4b8:	f043 0301 	orr.w	r3, r3, #1
 801f4bc:	6013      	str	r3, [r2, #0]
 801f4be:	4770      	bx	lr
 801f4c0:	e000edf0 	.word	0xe000edf0
 801f4c4:	e0001000 	.word	0xe0001000

0801f4c8 <DWT_Delay>:
  return DWT->CYCCNT;
 801f4c8:	4a07      	ldr	r2, [pc, #28]	; (801f4e8 <DWT_Delay+0x20>)
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801f4ca:	4b08      	ldr	r3, [pc, #32]	; (801f4ec <DWT_Delay+0x24>)
  return DWT->CYCCNT;
 801f4cc:	6851      	ldr	r1, [r2, #4]
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801f4ce:	681b      	ldr	r3, [r3, #0]
{
 801f4d0:	b510      	push	{r4, lr}
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801f4d2:	4c07      	ldr	r4, [pc, #28]	; (801f4f0 <DWT_Delay+0x28>)
 801f4d4:	fbb3 f3f4 	udiv	r3, r3, r4
 801f4d8:	fb00 1003 	mla	r0, r0, r3, r1
  return DWT->CYCCNT;
 801f4dc:	6853      	ldr	r3, [r2, #4]
  return (((int32_t)DWT_Get() - tp) < 0);
 801f4de:	1a1b      	subs	r3, r3, r0
  while (DWT_Compare(tp));
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	dbfb      	blt.n	801f4dc <DWT_Delay+0x14>
}
 801f4e4:	bd10      	pop	{r4, pc}
 801f4e6:	bf00      	nop
 801f4e8:	e0001000 	.word	0xe0001000
 801f4ec:	20000a50 	.word	0x20000a50
 801f4f0:	000f4240 	.word	0x000f4240

0801f4f4 <Calculate_Data>:
{
 801f4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801f4f6:	4a78      	ldr	r2, [pc, #480]	; (801f6d8 <Calculate_Data+0x1e4>)
 801f4f8:	4b78      	ldr	r3, [pc, #480]	; (801f6dc <Calculate_Data+0x1e8>)
 801f4fa:	4979      	ldr	r1, [pc, #484]	; (801f6e0 <Calculate_Data+0x1ec>)
 801f4fc:	4879      	ldr	r0, [pc, #484]	; (801f6e4 <Calculate_Data+0x1f0>)
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801f4fe:	4d7a      	ldr	r5, [pc, #488]	; (801f6e8 <Calculate_Data+0x1f4>)
	if(GUI_screen_state == Color_Screen)
 801f500:	4f7a      	ldr	r7, [pc, #488]	; (801f6ec <Calculate_Data+0x1f8>)
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801f502:	f7ef f955 	bl	800e7b0 <Calculate_XYZ1964>
	Calculate_xy1964(colorimetry_XYZ1964);
 801f506:	487a      	ldr	r0, [pc, #488]	; (801f6f0 <Calculate_Data+0x1fc>)
 801f508:	f7ef f9ee 	bl	800e8e8 <Calculate_xy1964>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801f50c:	4b79      	ldr	r3, [pc, #484]	; (801f6f4 <Calculate_Data+0x200>)
 801f50e:	4a7a      	ldr	r2, [pc, #488]	; (801f6f8 <Calculate_Data+0x204>)
 801f510:	497a      	ldr	r1, [pc, #488]	; (801f6fc <Calculate_Data+0x208>)
 801f512:	4874      	ldr	r0, [pc, #464]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f514:	f7ef f99a 	bl	800e84c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801f518:	4879      	ldr	r0, [pc, #484]	; (801f700 <Calculate_Data+0x20c>)
 801f51a:	f7ef fa03 	bl	800e924 <Calculate_xy1931>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801f51e:	7829      	ldrb	r1, [r5, #0]
 801f520:	4870      	ldr	r0, [pc, #448]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f522:	f7ef fa65 	bl	800e9f0 <Calculate_Tc>
 801f526:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801f52a:	4b76      	ldr	r3, [pc, #472]	; (801f704 <Calculate_Data+0x210>)
 801f52c:	ee17 2a90 	vmov	r2, s15
 801f530:	801a      	strh	r2, [r3, #0]
	if(GUI_screen_state == Color_Screen)
 801f532:	783a      	ldrb	r2, [r7, #0]
 801f534:	2a05      	cmp	r2, #5
 801f536:	d114      	bne.n	801f562 <Calculate_Data+0x6e>
		if(Color_Field&Color_CIE_Luv) {Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);} else 
 801f538:	4b73      	ldr	r3, [pc, #460]	; (801f708 <Calculate_Data+0x214>)
 801f53a:	781b      	ldrb	r3, [r3, #0]
 801f53c:	075a      	lsls	r2, r3, #29
 801f53e:	f140 80ba 	bpl.w	801f6b6 <Calculate_Data+0x1c2>
 801f542:	7828      	ldrb	r0, [r5, #0]
 801f544:	4e71      	ldr	r6, [pc, #452]	; (801f70c <Calculate_Data+0x218>)
 801f546:	4c72      	ldr	r4, [pc, #456]	; (801f710 <Calculate_Data+0x21c>)
 801f548:	2800      	cmp	r0, #0
 801f54a:	bf0c      	ite	eq
 801f54c:	4630      	moveq	r0, r6
 801f54e:	4620      	movne	r0, r4
 801f550:	f7ef fa2a 	bl	800e9a8 <Calculate_uv1976>
 801f554:	7828      	ldrb	r0, [r5, #0]
 801f556:	2800      	cmp	r0, #0
 801f558:	bf0c      	ite	eq
 801f55a:	4630      	moveq	r0, r6
 801f55c:	4620      	movne	r0, r4
 801f55e:	f7ef f9ff 	bl	800e960 <Calculate_uv>
	if(GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen|| GUI_screen_state == Measure3_Screen)
 801f562:	783b      	ldrb	r3, [r7, #0]
 801f564:	3b01      	subs	r3, #1
 801f566:	2b02      	cmp	r3, #2
 801f568:	f200 80a4 	bhi.w	801f6b4 <Calculate_Data+0x1c0>
			if(Measure_Field&Illuminance) {E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);}
 801f56c:	4c69      	ldr	r4, [pc, #420]	; (801f714 <Calculate_Data+0x220>)
 801f56e:	8823      	ldrh	r3, [r4, #0]
 801f570:	07de      	lsls	r6, r3, #31
 801f572:	d506      	bpl.n	801f582 <Calculate_Data+0x8e>
 801f574:	4960      	ldr	r1, [pc, #384]	; (801f6f8 <Calculate_Data+0x204>)
 801f576:	485b      	ldr	r0, [pc, #364]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f578:	f7ee ffea 	bl	800e550 <Calculate_EL_Day>
 801f57c:	4b66      	ldr	r3, [pc, #408]	; (801f718 <Calculate_Data+0x224>)
 801f57e:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&Irradiance) {E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);}
 801f582:	8823      	ldrh	r3, [r4, #0]
 801f584:	0798      	lsls	r0, r3, #30
 801f586:	d505      	bpl.n	801f594 <Calculate_Data+0xa0>
 801f588:	4856      	ldr	r0, [pc, #344]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f58a:	f7ef f801 	bl	800e590 <Calculate_EL_Day_Wt>
 801f58e:	4b63      	ldr	r3, [pc, #396]	; (801f71c <Calculate_Data+0x228>)
 801f590:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801f594:	8823      	ldrh	r3, [r4, #0]
 801f596:	0499      	lsls	r1, r3, #18
 801f598:	d519      	bpl.n	801f5ce <Calculate_Data+0xda>
 801f59a:	4961      	ldr	r1, [pc, #388]	; (801f720 <Calculate_Data+0x22c>)
 801f59c:	4851      	ldr	r0, [pc, #324]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f59e:	4e61      	ldr	r6, [pc, #388]	; (801f724 <Calculate_Data+0x230>)
 801f5a0:	4f5d      	ldr	r7, [pc, #372]	; (801f718 <Calculate_Data+0x224>)
 801f5a2:	f7ef f80d 	bl	800e5c0 <Calculate_EL_Night>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801f5a6:	8822      	ldrh	r2, [r4, #0]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801f5a8:	ed86 0a00 	vstr	s0, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801f5ac:	f012 0f01 	tst.w	r2, #1
 801f5b0:	f040 808f 	bne.w	801f6d2 <Calculate_Data+0x1de>
 801f5b4:	4950      	ldr	r1, [pc, #320]	; (801f6f8 <Calculate_Data+0x204>)
 801f5b6:	484b      	ldr	r0, [pc, #300]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f5b8:	f7ee ffca 	bl	800e550 <Calculate_EL_Day>
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801f5bc:	edd6 0a00 	vldr	s1, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801f5c0:	ed87 0a00 	vstr	s0, [r7]
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801f5c4:	f7ef f81c 	bl	800e600 <Calculate_SP>
 801f5c8:	4b57      	ldr	r3, [pc, #348]	; (801f728 <Calculate_Data+0x234>)
 801f5ca:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD) {PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));//*100000
 801f5ce:	8823      	ldrh	r3, [r4, #0]
 801f5d0:	075a      	lsls	r2, r3, #29
 801f5d2:	d506      	bpl.n	801f5e2 <Calculate_Data+0xee>
 801f5d4:	4955      	ldr	r1, [pc, #340]	; (801f72c <Calculate_Data+0x238>)
 801f5d6:	4843      	ldr	r0, [pc, #268]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f5d8:	f7ef f822 	bl	800e620 <Calculate_PPFD_PPL>
 801f5dc:	4b54      	ldr	r3, [pc, #336]	; (801f730 <Calculate_Data+0x23c>)
 801f5de:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801f5e2:	8823      	ldrh	r3, [r4, #0]
 801f5e4:	071b      	lsls	r3, r3, #28
 801f5e6:	d51f      	bpl.n	801f628 <Calculate_Data+0x134>
 801f5e8:	2200      	movs	r2, #0
 801f5ea:	4950      	ldr	r1, [pc, #320]	; (801f72c <Calculate_Data+0x238>)
 801f5ec:	483d      	ldr	r0, [pc, #244]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f5ee:	f7ef f853 	bl	800e698 <Calculate_PPFD_PPL_Range>
 801f5f2:	4b50      	ldr	r3, [pc, #320]	; (801f734 <Calculate_Data+0x240>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801f5f4:	494d      	ldr	r1, [pc, #308]	; (801f72c <Calculate_Data+0x238>)
 801f5f6:	483b      	ldr	r0, [pc, #236]	; (801f6e4 <Calculate_Data+0x1f0>)
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801f5f8:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801f5fc:	2201      	movs	r2, #1
 801f5fe:	f7ef f84b 	bl	800e698 <Calculate_PPFD_PPL_Range>
 801f602:	4b4d      	ldr	r3, [pc, #308]	; (801f738 <Calculate_Data+0x244>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801f604:	4949      	ldr	r1, [pc, #292]	; (801f72c <Calculate_Data+0x238>)
 801f606:	4837      	ldr	r0, [pc, #220]	; (801f6e4 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801f608:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801f60c:	2202      	movs	r2, #2
 801f60e:	f7ef f843 	bl	800e698 <Calculate_PPFD_PPL_Range>
 801f612:	4b4a      	ldr	r3, [pc, #296]	; (801f73c <Calculate_Data+0x248>)
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801f614:	4945      	ldr	r1, [pc, #276]	; (801f72c <Calculate_Data+0x238>)
 801f616:	4833      	ldr	r0, [pc, #204]	; (801f6e4 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801f618:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801f61c:	2203      	movs	r2, #3
 801f61e:	f7ef f83b 	bl	800e698 <Calculate_PPFD_PPL_Range>
 801f622:	4b47      	ldr	r3, [pc, #284]	; (801f740 <Calculate_Data+0x24c>)
 801f624:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&delta_E){delta_Eab_Measure = Calculate_deltaEab();}
 801f628:	8823      	ldrh	r3, [r4, #0]
 801f62a:	051f      	lsls	r7, r3, #20
 801f62c:	d503      	bpl.n	801f636 <Calculate_Data+0x142>
 801f62e:	f7ef fdbb 	bl	800f1a8 <Calculate_deltaEab>
 801f632:	4b44      	ldr	r3, [pc, #272]	; (801f744 <Calculate_Data+0x250>)
 801f634:	8018      	strh	r0, [r3, #0]
			if(Measure_Field&CIE_Luv){Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);}
 801f636:	8823      	ldrh	r3, [r4, #0]
 801f638:	065e      	lsls	r6, r3, #25
 801f63a:	d50f      	bpl.n	801f65c <Calculate_Data+0x168>
 801f63c:	7828      	ldrb	r0, [r5, #0]
 801f63e:	4f33      	ldr	r7, [pc, #204]	; (801f70c <Calculate_Data+0x218>)
 801f640:	4e33      	ldr	r6, [pc, #204]	; (801f710 <Calculate_Data+0x21c>)
 801f642:	2800      	cmp	r0, #0
 801f644:	bf0c      	ite	eq
 801f646:	4638      	moveq	r0, r7
 801f648:	4630      	movne	r0, r6
 801f64a:	f7ef f9ad 	bl	800e9a8 <Calculate_uv1976>
 801f64e:	7828      	ldrb	r0, [r5, #0]
 801f650:	2800      	cmp	r0, #0
 801f652:	bf0c      	ite	eq
 801f654:	4638      	moveq	r0, r7
 801f656:	4630      	movne	r0, r6
 801f658:	f7ef f982 	bl	800e960 <Calculate_uv>
			if(Measure_Field&CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801f65c:	8823      	ldrh	r3, [r4, #0]
 801f65e:	0618      	lsls	r0, r3, #24
 801f660:	d509      	bpl.n	801f676 <Calculate_Data+0x182>
 801f662:	4b39      	ldr	r3, [pc, #228]	; (801f748 <Calculate_Data+0x254>)
 801f664:	7829      	ldrb	r1, [r5, #0]
 801f666:	781a      	ldrb	r2, [r3, #0]
 801f668:	4821      	ldr	r0, [pc, #132]	; (801f6f0 <Calculate_Data+0x1fc>)
 801f66a:	4b25      	ldr	r3, [pc, #148]	; (801f700 <Calculate_Data+0x20c>)
 801f66c:	2900      	cmp	r1, #0
 801f66e:	bf18      	it	ne
 801f670:	4618      	movne	r0, r3
 801f672:	f7ef fb59 	bl	800ed28 <Calculate_Lab>
			if(Measure_Field&lambda_d){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801f676:	8823      	ldrh	r3, [r4, #0]
 801f678:	0599      	lsls	r1, r3, #22
 801f67a:	d503      	bpl.n	801f684 <Calculate_Data+0x190>
 801f67c:	7829      	ldrb	r1, [r5, #0]
 801f67e:	4819      	ldr	r0, [pc, #100]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f680:	f7ef fc88 	bl	800ef94 <Calculate_Lambda_Dominant>
			if(Measure_Field&lambda_c){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801f684:	8823      	ldrh	r3, [r4, #0]
 801f686:	055a      	lsls	r2, r3, #21
 801f688:	d503      	bpl.n	801f692 <Calculate_Data+0x19e>
 801f68a:	7829      	ldrb	r1, [r5, #0]
 801f68c:	4815      	ldr	r0, [pc, #84]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f68e:	f7ef fc81 	bl	800ef94 <Calculate_Lambda_Dominant>
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801f692:	8823      	ldrh	r3, [r4, #0]
 801f694:	04db      	lsls	r3, r3, #19
 801f696:	d50d      	bpl.n	801f6b4 <Calculate_Data+0x1c0>
 801f698:	492c      	ldr	r1, [pc, #176]	; (801f74c <Calculate_Data+0x258>)
 801f69a:	4812      	ldr	r0, [pc, #72]	; (801f6e4 <Calculate_Data+0x1f0>)
 801f69c:	f7ef f886 	bl	800e7ac <Calculate_ELr>
 801f6a0:	4b2b      	ldr	r3, [pc, #172]	; (801f750 <Calculate_Data+0x25c>)
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801f6a2:	492c      	ldr	r1, [pc, #176]	; (801f754 <Calculate_Data+0x260>)
 801f6a4:	480f      	ldr	r0, [pc, #60]	; (801f6e4 <Calculate_Data+0x1f0>)
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801f6a6:	ed83 0a00 	vstr	s0, [r3]
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801f6aa:	f7ef f865 	bl	800e778 <Calculate_ELb>
 801f6ae:	4b2a      	ldr	r3, [pc, #168]	; (801f758 <Calculate_Data+0x264>)
 801f6b0:	ed83 0a00 	vstr	s0, [r3]
 801f6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Color_Field&Color_CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801f6b6:	079b      	lsls	r3, r3, #30
 801f6b8:	f57f af53 	bpl.w	801f562 <Calculate_Data+0x6e>
 801f6bc:	4b22      	ldr	r3, [pc, #136]	; (801f748 <Calculate_Data+0x254>)
 801f6be:	7829      	ldrb	r1, [r5, #0]
 801f6c0:	781a      	ldrb	r2, [r3, #0]
 801f6c2:	480b      	ldr	r0, [pc, #44]	; (801f6f0 <Calculate_Data+0x1fc>)
 801f6c4:	4b0e      	ldr	r3, [pc, #56]	; (801f700 <Calculate_Data+0x20c>)
 801f6c6:	2900      	cmp	r1, #0
 801f6c8:	bf18      	it	ne
 801f6ca:	4618      	movne	r0, r3
 801f6cc:	f7ef fb2c 	bl	800ed28 <Calculate_Lab>
 801f6d0:	e747      	b.n	801f562 <Calculate_Data+0x6e>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801f6d2:	ed97 0a00 	vldr	s0, [r7]
 801f6d6:	e771      	b.n	801f5bc <Calculate_Data+0xc8>
 801f6d8:	20087db8 	.word	0x20087db8
 801f6dc:	20089db8 	.word	0x20089db8
 801f6e0:	20086db8 	.word	0x20086db8
 801f6e4:	20007de4 	.word	0x20007de4
 801f6e8:	2000527c 	.word	0x2000527c
 801f6ec:	20005279 	.word	0x20005279
 801f6f0:	2008adcc 	.word	0x2008adcc
 801f6f4:	20088db8 	.word	0x20088db8
 801f6f8:	2004e1e8 	.word	0x2004e1e8
 801f6fc:	20085db8 	.word	0x20085db8
 801f700:	2008adc6 	.word	0x2008adc6
 801f704:	200501e8 	.word	0x200501e8
 801f708:	20005277 	.word	0x20005277
 801f70c:	2008adec 	.word	0x2008adec
 801f710:	2008ade4 	.word	0x2008ade4
 801f714:	2000527e 	.word	0x2000527e
 801f718:	20091514 	.word	0x20091514
 801f71c:	20090f80 	.word	0x20090f80
 801f720:	2004f1e8 	.word	0x2004f1e8
 801f724:	20090f74 	.word	0x20090f74
 801f728:	20091068 	.word	0x20091068
 801f72c:	200501ec 	.word	0x200501ec
 801f730:	20090f88 	.word	0x20090f88
 801f734:	2009106c 	.word	0x2009106c
 801f738:	200913f0 	.word	0x200913f0
 801f73c:	2009132c 	.word	0x2009132c
 801f740:	20090f84 	.word	0x20090f84
 801f744:	2008c31e 	.word	0x2008c31e
 801f748:	2008c321 	.word	0x2008c321
 801f74c:	200065e0 	.word	0x200065e0
 801f750:	20091510 	.word	0x20091510
 801f754:	200055e0 	.word	0x200055e0
 801f758:	2009150c 	.word	0x2009150c
 801f75c:	00000000 	.word	0x00000000

0801f760 <Get_Battery_Level>:
{
 801f760:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 801f762:	4c13      	ldr	r4, [pc, #76]	; (801f7b0 <Get_Battery_Level+0x50>)
	adcResult = HAL_ADC_GetValue(&hadc1);
 801f764:	4d13      	ldr	r5, [pc, #76]	; (801f7b4 <Get_Battery_Level+0x54>)
	HAL_ADC_Start(&hadc1);
 801f766:	4620      	mov	r0, r4
 801f768:	f7e2 f90c 	bl	8001984 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 2);
 801f76c:	2102      	movs	r1, #2
 801f76e:	4620      	mov	r0, r4
 801f770:	f7e1 fd42 	bl	80011f8 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 801f774:	4620      	mov	r0, r4
 801f776:	f7e1 fd91 	bl	800129c <HAL_ADC_GetValue>
 801f77a:	7028      	strb	r0, [r5, #0]
	HAL_ADC_Stop(&hadc1);
 801f77c:	4620      	mov	r0, r4
 801f77e:	f7e2 f983 	bl	8001a88 <HAL_ADC_Stop>
	return percentage_charge = 100.0*adcResult/190;
 801f782:	7828      	ldrb	r0, [r5, #0]
 801f784:	f7e0 fee6 	bl	8000554 <__aeabi_i2d>
 801f788:	2200      	movs	r2, #0
 801f78a:	4b0b      	ldr	r3, [pc, #44]	; (801f7b8 <Get_Battery_Level+0x58>)
 801f78c:	f7e0 ff48 	bl	8000620 <__aeabi_dmul>
 801f790:	a305      	add	r3, pc, #20	; (adr r3, 801f7a8 <Get_Battery_Level+0x48>)
 801f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f796:	f7e1 f86d 	bl	8000874 <__aeabi_ddiv>
 801f79a:	4b08      	ldr	r3, [pc, #32]	; (801f7bc <Get_Battery_Level+0x5c>)
}
 801f79c:	ec41 0b10 	vmov	d0, r0, r1
	return percentage_charge = 100.0*adcResult/190;
 801f7a0:	e9c3 0100 	strd	r0, r1, [r3]
}
 801f7a4:	bd38      	pop	{r3, r4, r5, pc}
 801f7a6:	bf00      	nop
 801f7a8:	00000000 	.word	0x00000000
 801f7ac:	4067c000 	.word	0x4067c000
 801f7b0:	200912c0 	.word	0x200912c0
 801f7b4:	200511f4 	.word	0x200511f4
 801f7b8:	40590000 	.word	0x40590000
 801f7bc:	200913f8 	.word	0x200913f8

0801f7c0 <packet_generator_data_send>:
{
 801f7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801f7c4:	4c25      	ldr	r4, [pc, #148]	; (801f85c <packet_generator_data_send+0x9c>)
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801f7c6:	4f26      	ldr	r7, [pc, #152]	; (801f860 <packet_generator_data_send+0xa0>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f7c8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 801f868 <packet_generator_data_send+0xa8>
			memset(dataToSend, 0, sizeof(dataToSend));
 801f7cc:	2100      	movs	r1, #0
 801f7ce:	2240      	movs	r2, #64	; 0x40
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	f002 ff94 	bl	80226fe <memset>
			dataToSend[0] = 0xAB;
 801f7d6:	23ab      	movs	r3, #171	; 0xab
 801f7d8:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801f7da:	2312      	movs	r3, #18
			dataToSend[2] = 0x01;
 801f7dc:	2500      	movs	r5, #0
			dataToSend[1] = 0x12;
 801f7de:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x01;
 801f7e0:	2301      	movs	r3, #1
 801f7e2:	70a3      	strb	r3, [r4, #2]
			packet_number = 0;
 801f7e4:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801f7e6:	4629      	mov	r1, r5
			q = 5;
 801f7e8:	2305      	movs	r3, #5
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f7ea:	46a0      	mov	r8, r4
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801f7ec:	f837 2015 	ldrh.w	r2, [r7, r5, lsl #1]
				dataToSend[q+1] = byte_low;
 801f7f0:	eb04 0e03 	add.w	lr, r4, r3
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801f7f4:	0a10      	lsrs	r0, r2, #8
 801f7f6:	54e0      	strb	r0, [r4, r3]
				q = q + 2;
 801f7f8:	3302      	adds	r3, #2
				byte_low = Line_buff[cnt] & 0x00FF;
 801f7fa:	f88e 2001 	strb.w	r2, [lr, #1]
				q = q + 2;
 801f7fe:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + byte_high + byte_low;
 801f800:	fa50 f282 	uxtab	r2, r0, r2
 801f804:	440a      	add	r2, r1
				if(q >= 62 || cnt == 1023){
 801f806:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + byte_high + byte_low;
 801f808:	b291      	uxth	r1, r2
				if(q >= 62 || cnt == 1023){
 801f80a:	d803      	bhi.n	801f814 <packet_generator_data_send+0x54>
 801f80c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801f810:	4295      	cmp	r5, r2
 801f812:	d118      	bne.n	801f846 <packet_generator_data_send+0x86>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f814:	7860      	ldrb	r0, [r4, #1]
 801f816:	7822      	ldrb	r2, [r4, #0]
 801f818:	4402      	add	r2, r0
 801f81a:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f81c:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f81e:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f820:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801f822:	b2f3      	uxtb	r3, r6
 801f824:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f826:	4413      	add	r3, r2
 801f828:	185a      	adds	r2, r3, r1
 801f82a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f82e:	4641      	mov	r1, r8
 801f830:	2240      	movs	r2, #64	; 0x40
 801f832:	4648      	mov	r0, r9
 801f834:	f7e8 fd76 	bl	8008324 <USBD_CUSTOM_HID_SendReport>
					packet_number = packet_number + 1;
 801f838:	3601      	adds	r6, #1
					HAL_Delay(2);
 801f83a:	2002      	movs	r0, #2
 801f83c:	f7e1 fbf6 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801f840:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801f842:	2100      	movs	r1, #0
					q = 5;
 801f844:	2305      	movs	r3, #5
 801f846:	3501      	adds	r5, #1
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801f848:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801f84c:	d1ce      	bne.n	801f7ec <packet_generator_data_send+0x2c>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801f84e:	4b05      	ldr	r3, [pc, #20]	; (801f864 <packet_generator_data_send+0xa4>)
 801f850:	2200      	movs	r2, #0
 801f852:	601a      	str	r2, [r3, #0]
 801f854:	605a      	str	r2, [r3, #4]
 801f856:	609a      	str	r2, [r3, #8]
 801f858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f85c:	2008ae00 	.word	0x2008ae00
 801f860:	20009de4 	.word	0x20009de4
 801f864:	2008adf4 	.word	0x2008adf4
 801f868:	20091560 	.word	0x20091560

0801f86c <packet_generator_Rabs_data_send>:
{
 801f86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801f870:	4c3b      	ldr	r4, [pc, #236]	; (801f960 <packet_generator_Rabs_data_send+0xf4>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f872:	4d3c      	ldr	r5, [pc, #240]	; (801f964 <packet_generator_Rabs_data_send+0xf8>)
 801f874:	4f3c      	ldr	r7, [pc, #240]	; (801f968 <packet_generator_Rabs_data_send+0xfc>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f876:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801f98c <packet_generator_Rabs_data_send+0x120>
			memset(dataToSend, 0, sizeof(dataToSend));
 801f87a:	2240      	movs	r2, #64	; 0x40
 801f87c:	2100      	movs	r1, #0
 801f87e:	4620      	mov	r0, r4
 801f880:	f002 ff3d 	bl	80226fe <memset>
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f884:	4b39      	ldr	r3, [pc, #228]	; (801f96c <packet_generator_Rabs_data_send+0x100>)
 801f886:	8828      	ldrh	r0, [r5, #0]
 801f888:	4939      	ldr	r1, [pc, #228]	; (801f970 <packet_generator_Rabs_data_send+0x104>)
 801f88a:	ed93 0a00 	vldr	s0, [r3]
 801f88e:	f7fc fd97 	bl	801c3c0 <Rabs_calc_Factor1>
 801f892:	4b38      	ldr	r3, [pc, #224]	; (801f974 <packet_generator_Rabs_data_send+0x108>)
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801f894:	4938      	ldr	r1, [pc, #224]	; (801f978 <packet_generator_Rabs_data_send+0x10c>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f896:	ed83 0a00 	vstr	s0, [r3]
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801f89a:	edd1 0a00 	vldr	s1, [r1]
 801f89e:	4b37      	ldr	r3, [pc, #220]	; (801f97c <packet_generator_Rabs_data_send+0x110>)
 801f8a0:	8829      	ldrh	r1, [r5, #0]
 801f8a2:	4a37      	ldr	r2, [pc, #220]	; (801f980 <packet_generator_Rabs_data_send+0x114>)
 801f8a4:	4832      	ldr	r0, [pc, #200]	; (801f970 <packet_generator_Rabs_data_send+0x104>)
 801f8a6:	f7fc fdbf 	bl	801c428 <Rabs_calc_main>
			dataToSend[0] = 0xAB;
 801f8aa:	23ab      	movs	r3, #171	; 0xab
 801f8ac:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801f8ae:	2312      	movs	r3, #18
 801f8b0:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x03;
 801f8b2:	2303      	movs	r3, #3
 801f8b4:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f8b6:	4b33      	ldr	r3, [pc, #204]	; (801f984 <packet_generator_Rabs_data_send+0x118>)
 801f8b8:	781b      	ldrb	r3, [r3, #0]
 801f8ba:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801f8bc:	f04f 0500 	mov.w	r5, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f8c0:	bf18      	it	ne
 801f8c2:	2301      	movne	r3, #1
 801f8c4:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801f8c6:	71a5      	strb	r5, [r4, #6]
			packet_number = 0;
 801f8c8:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801f8ca:	4629      	mov	r1, r5
			q = 7;
 801f8cc:	2307      	movs	r3, #7
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f8ce:	46a0      	mov	r8, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801f8d0:	f857 2d04 	ldr.w	r2, [r7, #-4]!
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f8d4:	f103 0c01 	add.w	ip, r3, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801f8d8:	0e10      	lsrs	r0, r2, #24
 801f8da:	54e0      	strb	r0, [r4, r3]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f8dc:	f103 0e02 	add.w	lr, r3, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f8e0:	0c10      	lsrs	r0, r2, #16
 801f8e2:	f804 000c 	strb.w	r0, [r4, ip]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f8e6:	0a10      	lsrs	r0, r2, #8
 801f8e8:	f804 000e 	strb.w	r0, [r4, lr]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801f8ec:	18e0      	adds	r0, r4, r3
 801f8ee:	b2d2      	uxtb	r2, r2
 801f8f0:	70c2      	strb	r2, [r0, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f8f2:	5ce0      	ldrb	r0, [r4, r3]
 801f8f4:	4402      	add	r2, r0
 801f8f6:	f814 000c 	ldrb.w	r0, [r4, ip]
 801f8fa:	4410      	add	r0, r2
 801f8fc:	f814 200e 	ldrb.w	r2, [r4, lr]
				q = q + 4;
 801f900:	3304      	adds	r3, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f902:	4402      	add	r2, r0
				q = q + 4;
 801f904:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f906:	4411      	add	r1, r2
				if(q >= 62 || cnt == 1023){
 801f908:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f90a:	b289      	uxth	r1, r1
				if(q >= 62 || cnt == 1023){
 801f90c:	d803      	bhi.n	801f916 <packet_generator_Rabs_data_send+0xaa>
 801f90e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801f912:	4295      	cmp	r5, r2
 801f914:	d118      	bne.n	801f948 <packet_generator_Rabs_data_send+0xdc>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f916:	7860      	ldrb	r0, [r4, #1]
 801f918:	7822      	ldrb	r2, [r4, #0]
 801f91a:	4402      	add	r2, r0
 801f91c:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f91e:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f920:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f922:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801f924:	b2f3      	uxtb	r3, r6
 801f926:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f928:	4413      	add	r3, r2
 801f92a:	440b      	add	r3, r1
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f92c:	2240      	movs	r2, #64	; 0x40
 801f92e:	4641      	mov	r1, r8
 801f930:	4648      	mov	r0, r9
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f932:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801f936:	3601      	adds	r6, #1
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f938:	f7e8 fcf4 	bl	8008324 <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801f93c:	2002      	movs	r0, #2
 801f93e:	f7e1 fb75 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801f942:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801f944:	2100      	movs	r1, #0
					q = 7;
 801f946:	2307      	movs	r3, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801f948:	3501      	adds	r5, #1
 801f94a:	b2ad      	uxth	r5, r5
 801f94c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801f950:	d1be      	bne.n	801f8d0 <packet_generator_Rabs_data_send+0x64>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801f952:	4b0d      	ldr	r3, [pc, #52]	; (801f988 <packet_generator_Rabs_data_send+0x11c>)
 801f954:	2200      	movs	r2, #0
 801f956:	601a      	str	r2, [r3, #0]
 801f958:	605a      	str	r2, [r3, #4]
 801f95a:	609a      	str	r2, [r3, #8]
 801f95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f960:	2008ae00 	.word	0x2008ae00
 801f964:	200055ca 	.word	0x200055ca
 801f968:	20008de4 	.word	0x20008de4
 801f96c:	2004d1e4 	.word	0x2004d1e4
 801f970:	20009de4 	.word	0x20009de4
 801f974:	200055d8 	.word	0x200055d8
 801f978:	200055dc 	.word	0x200055dc
 801f97c:	20007de4 	.word	0x20007de4
 801f980:	2004d1e8 	.word	0x2004d1e8
 801f984:	20000a48 	.word	0x20000a48
 801f988:	2008adf4 	.word	0x2008adf4
 801f98c:	20091560 	.word	0x20091560

0801f990 <packet_generator_Calculated_data_send>:
{
 801f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801f994:	4c88      	ldr	r4, [pc, #544]	; (801fbb8 <packet_generator_Calculated_data_send+0x228>)
 801f996:	f8df 9248 	ldr.w	r9, [pc, #584]	; 801fbe0 <packet_generator_Calculated_data_send+0x250>
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f99a:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801fbd8 <packet_generator_Calculated_data_send+0x248>
{
 801f99e:	b087      	sub	sp, #28
			memset(dataToSend, 0, sizeof(dataToSend));
 801f9a0:	2240      	movs	r2, #64	; 0x40
 801f9a2:	2100      	movs	r1, #0
 801f9a4:	4620      	mov	r0, r4
 801f9a6:	f002 feaa 	bl	80226fe <memset>
			delta_Eab_Measure = Calculate_deltaEab();
 801f9aa:	f7ef fbfd 	bl	800f1a8 <Calculate_deltaEab>
 801f9ae:	4b83      	ldr	r3, [pc, #524]	; (801fbbc <packet_generator_Calculated_data_send+0x22c>)
 801f9b0:	8018      	strh	r0, [r3, #0]
			dataToSend[0] = 0xAB;
 801f9b2:	23ab      	movs	r3, #171	; 0xab
 801f9b4:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801f9b6:	2312      	movs	r3, #18
 801f9b8:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801f9ba:	2304      	movs	r3, #4
 801f9bc:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f9be:	4b80      	ldr	r3, [pc, #512]	; (801fbc0 <packet_generator_Calculated_data_send+0x230>)
 801f9c0:	781b      	ldrb	r3, [r3, #0]
 801f9c2:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801f9c4:	f04f 0800 	mov.w	r8, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f9c8:	bf18      	it	ne
 801f9ca:	2301      	movne	r3, #1
 801f9cc:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801f9ce:	f884 8006 	strb.w	r8, [r4, #6]
			packet_number = 0;
 801f9d2:	4645      	mov	r5, r8
			uint16_t CRC_pack = 0, packet_number = 0;
 801f9d4:	4647      	mov	r7, r8
			q = 7;
 801f9d6:	2607      	movs	r6, #7
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f9d8:	46a2      	mov	sl, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801f9da:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801f9de:	9305      	str	r3, [sp, #20]
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801f9e0:	0e1a      	lsrs	r2, r3, #24
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f9e2:	1c70      	adds	r0, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801f9e4:	55a2      	strb	r2, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f9e6:	1cb1      	adds	r1, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f9e8:	0c1a      	lsrs	r2, r3, #16
 801f9ea:	5422      	strb	r2, [r4, r0]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f9ec:	0a1a      	lsrs	r2, r3, #8
 801f9ee:	5462      	strb	r2, [r4, r1]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801f9f0:	19a2      	adds	r2, r4, r6
 801f9f2:	b2db      	uxtb	r3, r3
 801f9f4:	70d3      	strb	r3, [r2, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f9f6:	5da2      	ldrb	r2, [r4, r6]
 801f9f8:	4413      	add	r3, r2
 801f9fa:	5c22      	ldrb	r2, [r4, r0]
 801f9fc:	441a      	add	r2, r3
 801f9fe:	5c63      	ldrb	r3, [r4, r1]
				q = q + 4;
 801fa00:	3604      	adds	r6, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801fa02:	4413      	add	r3, r2
				q = q + 4;
 801fa04:	b2f6      	uxtb	r6, r6
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801fa06:	441f      	add	r7, r3
				if(q >= 62 || cnt == 1023){
 801fa08:	2e3d      	cmp	r6, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801fa0a:	b2bf      	uxth	r7, r7
				if(q >= 62 || cnt == 1023){
 801fa0c:	d803      	bhi.n	801fa16 <packet_generator_Calculated_data_send+0x86>
 801fa0e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801fa12:	4598      	cmp	r8, r3
 801fa14:	d118      	bne.n	801fa48 <packet_generator_Calculated_data_send+0xb8>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801fa16:	7861      	ldrb	r1, [r4, #1]
 801fa18:	7822      	ldrb	r2, [r4, #0]
 801fa1a:	440a      	add	r2, r1
 801fa1c:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801fa1e:	0a2b      	lsrs	r3, r5, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801fa20:	440a      	add	r2, r1
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801fa22:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801fa24:	b2eb      	uxtb	r3, r5
 801fa26:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801fa28:	4413      	add	r3, r2
 801fa2a:	441f      	add	r7, r3
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801fa2c:	2240      	movs	r2, #64	; 0x40
 801fa2e:	4651      	mov	r1, sl
 801fa30:	4658      	mov	r0, fp
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801fa32:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801fa36:	f7e8 fc75 	bl	8008324 <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801fa3a:	2002      	movs	r0, #2
 801fa3c:	f7e1 faf6 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801fa40:	3501      	adds	r5, #1
 801fa42:	b2ad      	uxth	r5, r5
					CRC_pack = 0;
 801fa44:	2700      	movs	r7, #0
					q = 7;
 801fa46:	2607      	movs	r6, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801fa48:	f108 0801 	add.w	r8, r8, #1
 801fa4c:	fa1f f888 	uxth.w	r8, r8
 801fa50:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 801fa54:	d1c1      	bne.n	801f9da <packet_generator_Calculated_data_send+0x4a>
			memset(dataToSend, 0, sizeof(dataToSend)); 
 801fa56:	2240      	movs	r2, #64	; 0x40
 801fa58:	2100      	movs	r1, #0
 801fa5a:	4857      	ldr	r0, [pc, #348]	; (801fbb8 <packet_generator_Calculated_data_send+0x228>)
 801fa5c:	f002 fe4f 	bl	80226fe <memset>
			dataToSend[0] = 0xAB;
 801fa60:	23ab      	movs	r3, #171	; 0xab
 801fa62:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801fa64:	2312      	movs	r3, #18
 801fa66:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801fa68:	2304      	movs	r3, #4
 801fa6a:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801fa6c:	4b54      	ldr	r3, [pc, #336]	; (801fbc0 <packet_generator_Calculated_data_send+0x230>)
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801fa6e:	4a55      	ldr	r2, [pc, #340]	; (801fbc4 <packet_generator_Calculated_data_send+0x234>)
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801fa70:	781b      	ldrb	r3, [r3, #0]
 801fa72:	3300      	adds	r3, #0
 801fa74:	bf18      	it	ne
 801fa76:	2301      	movne	r3, #1
 801fa78:	7163      	strb	r3, [r4, #5]
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801fa7a:	6813      	ldr	r3, [r2, #0]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801fa7c:	f106 0a01 	add.w	sl, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801fa80:	0e19      	lsrs	r1, r3, #24
 801fa82:	55a1      	strb	r1, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801fa84:	f106 0902 	add.w	r9, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801fa88:	0c19      	lsrs	r1, r3, #16
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801fa8a:	f106 0803 	add.w	r8, r6, #3
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801fa8e:	f804 100a 	strb.w	r1, [r4, sl]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801fa92:	0a19      	lsrs	r1, r3, #8
 801fa94:	f804 1009 	strb.w	r1, [r4, r9]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801fa98:	f804 3008 	strb.w	r3, [r4, r8]
				memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801fa9c:	6853      	ldr	r3, [r2, #4]
 801fa9e:	9305      	str	r3, [sp, #20]
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801faa0:	f106 0c04 	add.w	ip, r6, #4
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801faa4:	f106 0e05 	add.w	lr, r6, #5
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801faa8:	0e1a      	lsrs	r2, r3, #24
 801faaa:	f804 200c 	strb.w	r2, [r4, ip]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801faae:	1db0      	adds	r0, r6, #6
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801fab0:	0c1a      	lsrs	r2, r3, #16
 801fab2:	f804 200e 	strb.w	r2, [r4, lr]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801fab6:	0a1a      	lsrs	r2, r3, #8
 801fab8:	5422      	strb	r2, [r4, r0]
				dataToSend[q+7] = (buff_float) & 0x000000FF;
 801faba:	1df2      	adds	r2, r6, #7
 801fabc:	9203      	str	r2, [sp, #12]
 801fabe:	54a3      	strb	r3, [r4, r2]
				memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801fac0:	4b41      	ldr	r3, [pc, #260]	; (801fbc8 <packet_generator_Calculated_data_send+0x238>)
 801fac2:	881b      	ldrh	r3, [r3, #0]
 801fac4:	f8ad 3014 	strh.w	r3, [sp, #20]
				dataToSend[q+8]= (buff_float >> 8) & 0x000000FF;
 801fac8:	f106 0308 	add.w	r3, r6, #8
 801facc:	9300      	str	r3, [sp, #0]
 801face:	9b05      	ldr	r3, [sp, #20]
 801fad0:	9900      	ldr	r1, [sp, #0]
 801fad2:	0a1a      	lsrs	r2, r3, #8
 801fad4:	5462      	strb	r2, [r4, r1]
				dataToSend[q+9] = (buff_float) & 0x000000FF;
 801fad6:	f106 0209 	add.w	r2, r6, #9
 801fada:	9201      	str	r2, [sp, #4]
 801fadc:	54a3      	strb	r3, [r4, r2]
				dataToSend[q+10]= Source_Type;
 801fade:	f106 030a 	add.w	r3, r6, #10
 801fae2:	9302      	str	r3, [sp, #8]
 801fae4:	4b39      	ldr	r3, [pc, #228]	; (801fbcc <packet_generator_Calculated_data_send+0x23c>)
 801fae6:	9a02      	ldr	r2, [sp, #8]
 801fae8:	781b      	ldrb	r3, [r3, #0]
 801faea:	54a3      	strb	r3, [r4, r2]
			if(Calculate_deltaEab_Done == 0x01)
 801faec:	4b38      	ldr	r3, [pc, #224]	; (801fbd0 <packet_generator_Calculated_data_send+0x240>)
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801faee:	4932      	ldr	r1, [pc, #200]	; (801fbb8 <packet_generator_Calculated_data_send+0x228>)
			if(Calculate_deltaEab_Done == 0x01)
 801faf0:	781b      	ldrb	r3, [r3, #0]
 801faf2:	2b01      	cmp	r3, #1
				memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801faf4:	bf01      	itttt	eq
 801faf6:	4b31      	ldreq	r3, [pc, #196]	; (801fbbc <packet_generator_Calculated_data_send+0x22c>)
 801faf8:	881b      	ldrheq	r3, [r3, #0]
 801fafa:	f8ad 3014 	strheq.w	r3, [sp, #20]
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801fafe:	9b05      	ldreq	r3, [sp, #20]
 801fb00:	4434      	add	r4, r6
 801fb02:	bf0b      	itete	eq
 801fb04:	0a1a      	lsreq	r2, r3, #8
			} else {dataToSend[q+11] = 0;
 801fb06:	2300      	movne	r3, #0
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801fb08:	72e2      	strbeq	r2, [r4, #11]
			} else {dataToSend[q+11] = 0;
 801fb0a:	72e3      	strbne	r3, [r4, #11]
				dataToSend[q+12] = 0;
 801fb0c:	7323      	strb	r3, [r4, #12]
				memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801fb0e:	4c31      	ldr	r4, [pc, #196]	; (801fbd4 <packet_generator_Calculated_data_send+0x244>)
 801fb10:	6822      	ldr	r2, [r4, #0]
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801fb12:	198b      	adds	r3, r1, r6
 801fb14:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fb18:	f883 b00d 	strb.w	fp, [r3, #13]
				dataToSend[q+14] = (buff_float >> 16) & 0x000000FF;
 801fb1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801fb20:	f883 b00e 	strb.w	fp, [r3, #14]
				dataToSend[q+16] = (buff_float) & 0x000000FF;
 801fb24:	741a      	strb	r2, [r3, #16]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801fb26:	ea4f 2b12 	mov.w	fp, r2, lsr #8
				memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801fb2a:	6862      	ldr	r2, [r4, #4]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801fb2c:	f883 b00f 	strb.w	fp, [r3, #15]
				dataToSend[q+17] = (buff_float >> 24) & 0x000000FF;
 801fb30:	0e14      	lsrs	r4, r2, #24
 801fb32:	745c      	strb	r4, [r3, #17]
				dataToSend[q+18] = (buff_float >> 16) & 0x000000FF;
 801fb34:	0c14      	lsrs	r4, r2, #16
 801fb36:	749c      	strb	r4, [r3, #18]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801fb38:	0a14      	lsrs	r4, r2, #8
				dataToSend[q+20] = (buff_float) & 0x000000FF;
 801fb3a:	751a      	strb	r2, [r3, #20]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801fb3c:	74dc      	strb	r4, [r3, #19]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801fb3e:	0a2a      	lsrs	r2, r5, #8
 801fb40:	70ca      	strb	r2, [r1, #3]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801fb42:	780c      	ldrb	r4, [r1, #0]
 801fb44:	784a      	ldrb	r2, [r1, #1]
 801fb46:	4422      	add	r2, r4
 801fb48:	788c      	ldrb	r4, [r1, #2]
					dataToSend[4] = packet_number & 0x00FF;
 801fb4a:	b2ed      	uxtb	r5, r5
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801fb4c:	4422      	add	r2, r4
					dataToSend[4] = packet_number & 0x00FF;
 801fb4e:	710d      	strb	r5, [r1, #4]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801fb50:	4415      	add	r5, r2
 801fb52:	19ea      	adds	r2, r5, r7
 801fb54:	5d8d      	ldrb	r5, [r1, r6]
 801fb56:	f811 4008 	ldrb.w	r4, [r1, r8]
 801fb5a:	5c08      	ldrb	r0, [r1, r0]
 801fb5c:	442a      	add	r2, r5
 801fb5e:	f811 500a 	ldrb.w	r5, [r1, sl]
 801fb62:	442a      	add	r2, r5
 801fb64:	f811 5009 	ldrb.w	r5, [r1, r9]
 801fb68:	442a      	add	r2, r5
 801fb6a:	4422      	add	r2, r4
 801fb6c:	f811 400c 	ldrb.w	r4, [r1, ip]
 801fb70:	4422      	add	r2, r4
 801fb72:	f811 400e 	ldrb.w	r4, [r1, lr]
 801fb76:	4422      	add	r2, r4
 801fb78:	4402      	add	r2, r0
 801fb7a:	9803      	ldr	r0, [sp, #12]
 801fb7c:	5c08      	ldrb	r0, [r1, r0]
 801fb7e:	4402      	add	r2, r0
 801fb80:	9800      	ldr	r0, [sp, #0]
 801fb82:	5c08      	ldrb	r0, [r1, r0]
 801fb84:	4402      	add	r2, r0
 801fb86:	9801      	ldr	r0, [sp, #4]
 801fb88:	5c08      	ldrb	r0, [r1, r0]
 801fb8a:	4402      	add	r2, r0
 801fb8c:	9802      	ldr	r0, [sp, #8]
 801fb8e:	7adb      	ldrb	r3, [r3, #11]
 801fb90:	5c08      	ldrb	r0, [r1, r0]
 801fb92:	4402      	add	r2, r0
 801fb94:	4413      	add	r3, r2
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801fb96:	4810      	ldr	r0, [pc, #64]	; (801fbd8 <packet_generator_Calculated_data_send+0x248>)
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + dataToSend[q]+dataToSend[q+1]+dataToSend[q+2] + dataToSend[q+3] + dataToSend[q+4]+
 801fb98:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801fb9c:	2240      	movs	r2, #64	; 0x40
 801fb9e:	f7e8 fbc1 	bl	8008324 <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801fba2:	2002      	movs	r0, #2
 801fba4:	f7e1 fa42 	bl	800102c <HAL_Delay>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801fba8:	4b0c      	ldr	r3, [pc, #48]	; (801fbdc <packet_generator_Calculated_data_send+0x24c>)
 801fbaa:	2200      	movs	r2, #0
 801fbac:	601a      	str	r2, [r3, #0]
 801fbae:	605a      	str	r2, [r3, #4]
 801fbb0:	609a      	str	r2, [r3, #8]
}
 801fbb2:	b007      	add	sp, #28
 801fbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbb8:	2008ae00 	.word	0x2008ae00
 801fbbc:	2008c31e 	.word	0x2008c31e
 801fbc0:	20000a48 	.word	0x20000a48
 801fbc4:	2008adec 	.word	0x2008adec
 801fbc8:	200501e8 	.word	0x200501e8
 801fbcc:	2008c321 	.word	0x2008c321
 801fbd0:	20005219 	.word	0x20005219
 801fbd4:	2008ade4 	.word	0x2008ade4
 801fbd8:	20091560 	.word	0x20091560
 801fbdc:	2008adf4 	.word	0x2008adf4
 801fbe0:	20008de4 	.word	0x20008de4

0801fbe4 <usb_receive_processing>:
{
 801fbe4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(dataToReceive[0] == 0xAB)
 801fbe8:	4ca6      	ldr	r4, [pc, #664]	; (801fe84 <usb_receive_processing+0x2a0>)
 801fbea:	f894 9000 	ldrb.w	r9, [r4]
	uint32_t PAGEError = 0;
 801fbee:	2500      	movs	r5, #0
		if(dataToReceive[0] == 0xAB)
 801fbf0:	f1b9 0fab 	cmp.w	r9, #171	; 0xab
	uint32_t PAGEError = 0;
 801fbf4:	9501      	str	r5, [sp, #4]
 801fbf6:	4626      	mov	r6, r4
		if(dataToReceive[0] == 0xAB)
 801fbf8:	d12a      	bne.n	801fc50 <usb_receive_processing+0x6c>
			if(dataToReceive[1] == 0x12)
 801fbfa:	f894 8001 	ldrb.w	r8, [r4, #1]
 801fbfe:	f1b8 0f12 	cmp.w	r8, #18
 801fc02:	d117      	bne.n	801fc34 <usb_receive_processing+0x50>
			switch(dataToReceive[2])
 801fc04:	78a7      	ldrb	r7, [r4, #2]
 801fc06:	2f0a      	cmp	r7, #10
 801fc08:	f000 80dd 	beq.w	801fdc6 <usb_receive_processing+0x1e2>
 801fc0c:	d815      	bhi.n	801fc3a <usb_receive_processing+0x56>
 801fc0e:	2f02      	cmp	r7, #2
 801fc10:	d023      	beq.n	801fc5a <usb_receive_processing+0x76>
 801fc12:	2f04      	cmp	r7, #4
 801fc14:	f000 81a2 	beq.w	801ff5c <usb_receive_processing+0x378>
 801fc18:	2f01      	cmp	r7, #1
 801fc1a:	d119      	bne.n	801fc50 <usb_receive_processing+0x6c>
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801fc1c:	78f2      	ldrb	r2, [r6, #3]
						send_usb_block = 1;
 801fc1e:	4c9a      	ldr	r4, [pc, #616]	; (801fe88 <usb_receive_processing+0x2a4>)
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801fc20:	2a01      	cmp	r2, #1
						send_usb_block = 1;
 801fc22:	7027      	strb	r7, [r4, #0]
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801fc24:	d116      	bne.n	801fc54 <usb_receive_processing+0x70>
						packet_generator_Rabs_data_send();
 801fc26:	f7ff fe21 	bl	801f86c <packet_generator_Rabs_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801fc2a:	2300      	movs	r3, #0
 801fc2c:	6033      	str	r3, [r6, #0]
 801fc2e:	6073      	str	r3, [r6, #4]
 801fc30:	60b3      	str	r3, [r6, #8]
						send_usb_block = 0;
 801fc32:	7023      	strb	r3, [r4, #0]
}
 801fc34:	b002      	add	sp, #8
 801fc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch(dataToReceive[2])
 801fc3a:	2f0c      	cmp	r7, #12
 801fc3c:	f000 8146 	beq.w	801fecc <usb_receive_processing+0x2e8>
 801fc40:	f0c0 80d8 	bcc.w	801fdf4 <usb_receive_processing+0x210>
 801fc44:	2f0d      	cmp	r7, #13
 801fc46:	f000 80a7 	beq.w	801fd98 <usb_receive_processing+0x1b4>
 801fc4a:	2f66      	cmp	r7, #102	; 0x66
 801fc4c:	f000 816f 	beq.w	801ff2e <usb_receive_processing+0x34a>
			__asm("nop");
 801fc50:	bf00      	nop
}
 801fc52:	e7ef      	b.n	801fc34 <usb_receive_processing+0x50>
						packet_generator_data_send();
 801fc54:	f7ff fdb4 	bl	801f7c0 <packet_generator_data_send>
 801fc58:	e7e7      	b.n	801fc2a <usb_receive_processing+0x46>
						send_usb_block = 0;
 801fc5a:	4b8b      	ldr	r3, [pc, #556]	; (801fe88 <usb_receive_processing+0x2a4>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801fc5c:	4c8b      	ldr	r4, [pc, #556]	; (801fe8c <usb_receive_processing+0x2a8>)
						send_usb_block = 0;
 801fc5e:	701d      	strb	r5, [r3, #0]
						memset(dataToSend, 0, sizeof(dataToSend));
 801fc60:	4629      	mov	r1, r5
						if (exp_num != dataToReceive[3]){
 801fc62:	4d8b      	ldr	r5, [pc, #556]	; (801fe90 <usb_receive_processing+0x2ac>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801fc64:	2240      	movs	r2, #64	; 0x40
 801fc66:	4620      	mov	r0, r4
 801fc68:	f002 fd49 	bl	80226fe <memset>
						if (exp_num != dataToReceive[3]){
 801fc6c:	78f3      	ldrb	r3, [r6, #3]
 801fc6e:	782a      	ldrb	r2, [r5, #0]
						dataToSend[0] = 0xAB;
 801fc70:	f884 9000 	strb.w	r9, [r4]
						if (exp_num != dataToReceive[3]){
 801fc74:	4293      	cmp	r3, r2
						dataToSend[1] = 0x12;
 801fc76:	f884 8001 	strb.w	r8, [r4, #1]
						dataToSend[2] = CMD_CNFG;
 801fc7a:	70a7      	strb	r7, [r4, #2]
						if (exp_num != dataToReceive[3]){
 801fc7c:	d07a      	beq.n	801fd74 <usb_receive_processing+0x190>
							exp_num = dataToReceive[3];
 801fc7e:	702b      	strb	r3, [r5, #0]
							htim2.Init.Period = exposure_timer_period[exp_num];
 801fc80:	782a      	ldrb	r2, [r5, #0]
 801fc82:	4b84      	ldr	r3, [pc, #528]	; (801fe94 <usb_receive_processing+0x2b0>)
 801fc84:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801fc88:	4b83      	ldr	r3, [pc, #524]	; (801fe98 <usb_receive_processing+0x2b4>)
 801fc8a:	60da      	str	r2, [r3, #12]
							MX_TIM2_Init();
 801fc8c:	f7ff fbd4 	bl	801f438 <MX_TIM2_Init>
							Calibration_Exposure_Change(exp_num);
 801fc90:	7828      	ldrb	r0, [r5, #0]
 801fc92:	f7ef fb97 	bl	800f3c4 <Calibration_Exposure_Change>
						if (LaserOnOff != dataToReceive[4]){
 801fc96:	4a81      	ldr	r2, [pc, #516]	; (801fe9c <usb_receive_processing+0x2b8>)
 801fc98:	7933      	ldrb	r3, [r6, #4]
 801fc9a:	7811      	ldrb	r1, [r2, #0]
 801fc9c:	428b      	cmp	r3, r1
 801fc9e:	4691      	mov	r9, r2
 801fca0:	d06c      	beq.n	801fd7c <usb_receive_processing+0x198>
							LaserOnOff = (dataToReceive[4] > 0) ? 1 : 0;
 801fca2:	3300      	adds	r3, #0
 801fca4:	bf18      	it	ne
 801fca6:	2301      	movne	r3, #1
 801fca8:	7013      	strb	r3, [r2, #0]
							if(LaserOnOff == 0){
 801fcaa:	7813      	ldrb	r3, [r2, #0]
 801fcac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	d161      	bne.n	801fd78 <usb_receive_processing+0x194>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801fcb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801fcb8:	4879      	ldr	r0, [pc, #484]	; (801fea0 <usb_receive_processing+0x2bc>)
 801fcba:	f7e2 fe3f 	bl	800293c <HAL_GPIO_WritePin>
						if (VGain != dataToReceive[5]){
 801fcbe:	4a79      	ldr	r2, [pc, #484]	; (801fea4 <usb_receive_processing+0x2c0>)
 801fcc0:	7973      	ldrb	r3, [r6, #5]
 801fcc2:	7811      	ldrb	r1, [r2, #0]
 801fcc4:	428b      	cmp	r3, r1
 801fcc6:	4690      	mov	r8, r2
 801fcc8:	d05c      	beq.n	801fd84 <usb_receive_processing+0x1a0>
							VGain = (dataToReceive[5] > 0) ? 1 : 0;
 801fcca:	3300      	adds	r3, #0
 801fccc:	bf18      	it	ne
 801fcce:	2301      	movne	r3, #1
 801fcd0:	7013      	strb	r3, [r2, #0]
							if(VGain == 0){
 801fcd2:	7813      	ldrb	r3, [r2, #0]
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d153      	bne.n	801fd80 <usb_receive_processing+0x19c>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 801fcd8:	2201      	movs	r2, #1
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801fcda:	2120      	movs	r1, #32
 801fcdc:	4872      	ldr	r0, [pc, #456]	; (801fea8 <usb_receive_processing+0x2c4>)
 801fcde:	f7e2 fe2d 	bl	800293c <HAL_GPIO_WritePin>
						if (TFT_ON_OFF != dataToReceive[6]){
 801fce2:	4f72      	ldr	r7, [pc, #456]	; (801feac <usb_receive_processing+0x2c8>)
 801fce4:	79b3      	ldrb	r3, [r6, #6]
 801fce6:	783a      	ldrb	r2, [r7, #0]
 801fce8:	4293      	cmp	r3, r2
 801fcea:	d051      	beq.n	801fd90 <usb_receive_processing+0x1ac>
							TFT_ON_OFF = (dataToReceive[6] > 0) ? 1 : 0;
 801fcec:	3300      	adds	r3, #0
 801fcee:	bf18      	it	ne
 801fcf0:	2301      	movne	r3, #1
 801fcf2:	703b      	strb	r3, [r7, #0]
							if(TFT_ON_OFF == 1){
 801fcf4:	f897 a000 	ldrb.w	sl, [r7]
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801fcf8:	486d      	ldr	r0, [pc, #436]	; (801feb0 <usb_receive_processing+0x2cc>)
							if(TFT_ON_OFF == 1){
 801fcfa:	fa5f fa8a 	uxtb.w	sl, sl
 801fcfe:	f1ba 0f01 	cmp.w	sl, #1
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801fd02:	f04f 0104 	mov.w	r1, #4
							if(TFT_ON_OFF == 1){
 801fd06:	d13f      	bne.n	801fd88 <usb_receive_processing+0x1a4>
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801fd08:	f7e6 fd1a 	bl	8006740 <HAL_TIM_PWM_Start>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801fd0c:	4652      	mov	r2, sl
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801fd0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801fd12:	4865      	ldr	r0, [pc, #404]	; (801fea8 <usb_receive_processing+0x2c4>)
 801fd14:	f7e2 fe12 	bl	800293c <HAL_GPIO_WritePin>
						if (Mode_EL != dataToReceive[7]){
 801fd18:	4866      	ldr	r0, [pc, #408]	; (801feb4 <usb_receive_processing+0x2d0>)
 801fd1a:	79f3      	ldrb	r3, [r6, #7]
 801fd1c:	7802      	ldrb	r2, [r0, #0]
 801fd1e:	429a      	cmp	r2, r3
 801fd20:	d038      	beq.n	801fd94 <usb_receive_processing+0x1b0>
							Mode_EL = (dataToReceive[7] > 0) ? 1 : 0; //Mode_EL=1 -Rabs_E, Mode_EL=0 -Rabs_L
 801fd22:	3300      	adds	r3, #0
 801fd24:	bf18      	it	ne
 801fd26:	2301      	movne	r3, #1
 801fd28:	7003      	strb	r3, [r0, #0]
						dataToSend[3] = exp_num;
 801fd2a:	7829      	ldrb	r1, [r5, #0]
						dataToSend[4] = LaserOnOff;
 801fd2c:	f899 5000 	ldrb.w	r5, [r9]
						dataToSend[5] = VGain;
 801fd30:	f898 3000 	ldrb.w	r3, [r8]
						dataToSend[7] = Mode_EL;
 801fd34:	7800      	ldrb	r0, [r0, #0]
 801fd36:	71e0      	strb	r0, [r4, #7]
						dataToSend[5] = VGain;
 801fd38:	b2da      	uxtb	r2, r3
						dataToSend[3] = exp_num;
 801fd3a:	b2c9      	uxtb	r1, r1
						dataToSend[4] = LaserOnOff;
 801fd3c:	b2ed      	uxtb	r5, r5
						dataToSend[6] = TFT_ON_OFF;
 801fd3e:	783b      	ldrb	r3, [r7, #0]
						dataToSend[3] = exp_num;
 801fd40:	70e1      	strb	r1, [r4, #3]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801fd42:	4429      	add	r1, r5
						dataToSend[5] = VGain;
 801fd44:	7162      	strb	r2, [r4, #5]
						dataToSend[6] = TFT_ON_OFF;
 801fd46:	b2db      	uxtb	r3, r3
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801fd48:	440a      	add	r2, r1
						dataToSend[6] = TFT_ON_OFF;
 801fd4a:	71a3      	strb	r3, [r4, #6]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801fd4c:	4413      	add	r3, r2
 801fd4e:	7822      	ldrb	r2, [r4, #0]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801fd50:	494e      	ldr	r1, [pc, #312]	; (801fe8c <usb_receive_processing+0x2a8>)
 801fd52:	4859      	ldr	r0, [pc, #356]	; (801feb8 <usb_receive_processing+0x2d4>)
						dataToSend[4] = LaserOnOff;
 801fd54:	7125      	strb	r5, [r4, #4]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801fd56:	4413      	add	r3, r2
 801fd58:	7862      	ldrb	r2, [r4, #1]
 801fd5a:	4413      	add	r3, r2
 801fd5c:	78a2      	ldrb	r2, [r4, #2]
 801fd5e:	4413      	add	r3, r2
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801fd60:	2240      	movs	r2, #64	; 0x40
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801fd62:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801fd66:	f7e8 fadd 	bl	8008324 <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801fd6a:	2300      	movs	r3, #0
 801fd6c:	6033      	str	r3, [r6, #0]
 801fd6e:	6073      	str	r3, [r6, #4]
 801fd70:	60b3      	str	r3, [r6, #8]
					break;
 801fd72:	e75f      	b.n	801fc34 <usb_receive_processing+0x50>
							__asm("nop");
 801fd74:	bf00      	nop
 801fd76:	e78e      	b.n	801fc96 <usb_receive_processing+0xb2>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801fd78:	2201      	movs	r2, #1
 801fd7a:	e79b      	b.n	801fcb4 <usb_receive_processing+0xd0>
							__asm("nop");
 801fd7c:	bf00      	nop
 801fd7e:	e79e      	b.n	801fcbe <usb_receive_processing+0xda>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801fd80:	2200      	movs	r2, #0
 801fd82:	e7aa      	b.n	801fcda <usb_receive_processing+0xf6>
							__asm("nop");
 801fd84:	bf00      	nop
 801fd86:	e7ac      	b.n	801fce2 <usb_receive_processing+0xfe>
								HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801fd88:	f7e6 fd10 	bl	80067ac <HAL_TIM_PWM_Stop>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801fd8c:	2200      	movs	r2, #0
 801fd8e:	e7be      	b.n	801fd0e <usb_receive_processing+0x12a>
							__asm("nop");
 801fd90:	bf00      	nop
 801fd92:	e7c1      	b.n	801fd18 <usb_receive_processing+0x134>
							__asm("nop");
 801fd94:	bf00      	nop
 801fd96:	e7c8      	b.n	801fd2a <usb_receive_processing+0x146>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801fd98:	4e48      	ldr	r6, [pc, #288]	; (801febc <usb_receive_processing+0x2d8>)
						EraseInitStruct.NbPages = 44; 
 801fd9a:	232c      	movs	r3, #44	; 0x2c
 801fd9c:	60f3      	str	r3, [r6, #12]
						EraseInitStruct.Banks = FLASH_BANK_2; 
 801fd9e:	2302      	movs	r3, #2
 801fda0:	6073      	str	r3, [r6, #4]
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801fda2:	6035      	str	r5, [r6, #0]
						EraseInitStruct.Page = 0;
 801fda4:	60b5      	str	r5, [r6, #8]
						HAL_FLASH_Unlock(); 
 801fda6:	f7e2 fac5 	bl	8002334 <HAL_FLASH_Unlock>
						if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 801fdaa:	a901      	add	r1, sp, #4
 801fdac:	4630      	mov	r0, r6
 801fdae:	f7e2 fbdb 	bl	8002568 <HAL_FLASHEx_Erase>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801fdb2:	4b43      	ldr	r3, [pc, #268]	; (801fec0 <usb_receive_processing+0x2dc>)
 801fdb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801fdb8:	611a      	str	r2, [r3, #16]
						HAL_FLASH_Lock();
 801fdba:	f7e2 facd 	bl	8002358 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801fdbe:	6025      	str	r5, [r4, #0]
 801fdc0:	6065      	str	r5, [r4, #4]
 801fdc2:	60a5      	str	r5, [r4, #8]
					break;
 801fdc4:	e736      	b.n	801fc34 <usb_receive_processing+0x50>
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801fdc6:	7923      	ldrb	r3, [r4, #4]
 801fdc8:	78e2      	ldrb	r2, [r4, #3]
 801fdca:	041b      	lsls	r3, r3, #16
 801fdcc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801fdd0:	79a2      	ldrb	r2, [r4, #6]
 801fdd2:	4313      	orrs	r3, r2
 801fdd4:	7962      	ldrb	r2, [r4, #5]
 801fdd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801fdda:	4a3a      	ldr	r2, [pc, #232]	; (801fec4 <usb_receive_processing+0x2e0>)
 801fddc:	6013      	str	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801fdde:	4b2b      	ldr	r3, [pc, #172]	; (801fe8c <usb_receive_processing+0x2a8>)
						dataToSend[2] = 0x1A;
 801fde0:	221a      	movs	r2, #26
						dataToSend[0] = 0xAB;
 801fde2:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801fde6:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x1A;
 801fdea:	709a      	strb	r2, [r3, #2]
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801fdec:	6025      	str	r5, [r4, #0]
 801fdee:	6065      	str	r5, [r4, #4]
 801fdf0:	60a5      	str	r5, [r4, #8]
 801fdf2:	e043      	b.n	801fe7c <usb_receive_processing+0x298>
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801fdf4:	79e0      	ldrb	r0, [r4, #7]
 801fdf6:	f894 8008 	ldrb.w	r8, [r4, #8]
 801fdfa:	4e33      	ldr	r6, [pc, #204]	; (801fec8 <usb_receive_processing+0x2e4>)
 801fdfc:	ea4f 4108 	mov.w	r1, r8, lsl #16
 801fe00:	0603      	lsls	r3, r0, #24
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801fe02:	f894 8009 	ldrb.w	r8, [r4, #9]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801fe06:	79a0      	ldrb	r0, [r4, #6]
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801fe08:	462a      	mov	r2, r5
 801fe0a:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801fe0c:	2100      	movs	r1, #0
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801fe0e:	432a      	orrs	r2, r5
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801fe10:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801fe12:	ea4f 2108 	mov.w	r1, r8, lsl #8
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801fe16:	f894 8003 	ldrb.w	r8, [r4, #3]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801fe1a:	4302      	orrs	r2, r0
 801fe1c:	432a      	orrs	r2, r5
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801fe1e:	ea4f 6008 	mov.w	r0, r8, lsl #24
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801fe22:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801fe24:	f894 8004 	ldrb.w	r8, [r4, #4]
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801fe28:	7aa1      	ldrb	r1, [r4, #10]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801fe2a:	432a      	orrs	r2, r5
 801fe2c:	430b      	orrs	r3, r1
 801fe2e:	4302      	orrs	r2, r0
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801fe30:	2100      	movs	r1, #0
 801fe32:	ea4f 4008 	mov.w	r0, r8, lsl #16
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801fe36:	f894 8005 	ldrb.w	r8, [r4, #5]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801fe3a:	4d22      	ldr	r5, [pc, #136]	; (801fec4 <usb_receive_processing+0x2e0>)
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801fe3c:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801fe3e:	2100      	movs	r1, #0
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801fe40:	4302      	orrs	r2, r0
 801fe42:	430b      	orrs	r3, r1
 801fe44:	ea4f 2008 	mov.w	r0, r8, lsl #8
 801fe48:	2100      	movs	r1, #0
 801fe4a:	4310      	orrs	r0, r2
 801fe4c:	4319      	orrs	r1, r3
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801fe4e:	e9c6 0100 	strd	r0, r1, [r6]
						HAL_FLASH_Unlock();
 801fe52:	f7e2 fa6f 	bl	8002334 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801fe56:	4b1a      	ldr	r3, [pc, #104]	; (801fec0 <usb_receive_processing+0x2dc>)
 801fe58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801fe5c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801fe5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 801fe62:	6829      	ldr	r1, [r5, #0]
 801fe64:	2000      	movs	r0, #0
 801fe66:	f7e2 fabf 	bl	80023e8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801fe6a:	4604      	mov	r4, r0
 801fe6c:	2800      	cmp	r0, #0
 801fe6e:	d1f6      	bne.n	801fe5e <usb_receive_processing+0x27a>
						HAL_FLASH_Lock();
 801fe70:	f7e2 fa72 	bl	8002358 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801fe74:	4b03      	ldr	r3, [pc, #12]	; (801fe84 <usb_receive_processing+0x2a0>)
 801fe76:	601c      	str	r4, [r3, #0]
 801fe78:	605c      	str	r4, [r3, #4]
 801fe7a:	609c      	str	r4, [r3, #8]
						HAL_Delay(2);
 801fe7c:	2002      	movs	r0, #2
 801fe7e:	f7e1 f8d5 	bl	800102c <HAL_Delay>
					break;
 801fe82:	e6d7      	b.n	801fc34 <usb_receive_processing+0x50>
 801fe84:	2008adf4 	.word	0x2008adf4
 801fe88:	2008be6d 	.word	0x2008be6d
 801fe8c:	2008ae00 	.word	0x2008ae00
 801fe90:	2008be5a 	.word	0x2008be5a
 801fe94:	080341d8 	.word	0x080341d8
 801fe98:	200914cc 	.word	0x200914cc
 801fe9c:	200075e0 	.word	0x200075e0
 801fea0:	48000800 	.word	0x48000800
 801fea4:	20000a4b 	.word	0x20000a4b
 801fea8:	48001400 	.word	0x48001400
 801feac:	20000a4a 	.word	0x20000a4a
 801feb0:	2009101c 	.word	0x2009101c
 801feb4:	20000a48 	.word	0x20000a48
 801feb8:	20091560 	.word	0x20091560
 801febc:	2009129c 	.word	0x2009129c
 801fec0:	40022000 	.word	0x40022000
 801fec4:	20091344 	.word	0x20091344
 801fec8:	20091338 	.word	0x20091338
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801fecc:	7920      	ldrb	r0, [r4, #4]
 801fece:	78e3      	ldrb	r3, [r4, #3]
 801fed0:	0400      	lsls	r0, r0, #16
 801fed2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801fed6:	79a3      	ldrb	r3, [r4, #6]
 801fed8:	4318      	orrs	r0, r3
 801feda:	7963      	ldrb	r3, [r4, #5]
 801fedc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801fee0:	4b23      	ldr	r3, [pc, #140]	; (801ff70 <usb_receive_processing+0x38c>)
 801fee2:	6018      	str	r0, [r3, #0]
						flash_data_read = flash_data_read_buff(flash_address);
 801fee4:	f7ec fab6 	bl	800c454 <flash_data_read_buff>
 801fee8:	4b22      	ldr	r3, [pc, #136]	; (801ff74 <usb_receive_processing+0x390>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801feea:	4a23      	ldr	r2, [pc, #140]	; (801ff78 <usb_receive_processing+0x394>)
						flash_data_read = flash_data_read_buff(flash_address);
 801feec:	e9c3 0100 	strd	r0, r1, [r3]
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801fef0:	cb03      	ldmia	r3!, {r0, r1}
 801fef2:	6051      	str	r1, [r2, #4]
						dataToSend[0] = 0xAB;
 801fef4:	4921      	ldr	r1, [pc, #132]	; (801ff7c <usb_receive_processing+0x398>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801fef6:	6010      	str	r0, [r2, #0]
						dataToSend[2] = 0x1C;
 801fef8:	231c      	movs	r3, #28
 801fefa:	708b      	strb	r3, [r1, #2]
						dataToSend[7] = flash_data_read_SND[7];
 801fefc:	79d3      	ldrb	r3, [r2, #7]
 801fefe:	71cb      	strb	r3, [r1, #7]
						dataToSend[8] = flash_data_read_SND[6];
 801ff00:	7993      	ldrb	r3, [r2, #6]
 801ff02:	720b      	strb	r3, [r1, #8]
						dataToSend[9] = flash_data_read_SND[5];
 801ff04:	7953      	ldrb	r3, [r2, #5]
 801ff06:	724b      	strb	r3, [r1, #9]
						dataToSend[10]= flash_data_read_SND[4];
 801ff08:	7913      	ldrb	r3, [r2, #4]
 801ff0a:	728b      	strb	r3, [r1, #10]
						dataToSend[3] = flash_data_read_SND[3];
 801ff0c:	78d3      	ldrb	r3, [r2, #3]
 801ff0e:	70cb      	strb	r3, [r1, #3]
						dataToSend[4] = flash_data_read_SND[2];
 801ff10:	7893      	ldrb	r3, [r2, #2]
 801ff12:	710b      	strb	r3, [r1, #4]
						dataToSend[5] = flash_data_read_SND[1];
 801ff14:	7853      	ldrb	r3, [r2, #1]
 801ff16:	714b      	strb	r3, [r1, #5]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ff18:	4819      	ldr	r0, [pc, #100]	; (801ff80 <usb_receive_processing+0x39c>)
						dataToSend[6]	= flash_data_read_SND[0];
 801ff1a:	7813      	ldrb	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801ff1c:	f881 9000 	strb.w	r9, [r1]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ff20:	2240      	movs	r2, #64	; 0x40
						dataToSend[1] = 0x12;
 801ff22:	f881 8001 	strb.w	r8, [r1, #1]
						dataToSend[6]	= flash_data_read_SND[0];
 801ff26:	718b      	strb	r3, [r1, #6]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ff28:	f7e8 f9fc 	bl	8008324 <USBD_CUSTOM_HID_SendReport>
 801ff2c:	e75e      	b.n	801fdec <usb_receive_processing+0x208>
						if(CRC_STATUS == CRC_OK){
 801ff2e:	4a15      	ldr	r2, [pc, #84]	; (801ff84 <usb_receive_processing+0x3a0>)
						dataToSend[0] = 0xAB;
 801ff30:	4b12      	ldr	r3, [pc, #72]	; (801ff7c <usb_receive_processing+0x398>)
						if(CRC_STATUS == CRC_OK){
 801ff32:	7812      	ldrb	r2, [r2, #0]
						dataToSend[0] = 0xAB;
 801ff34:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801ff38:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x66;
 801ff3c:	709f      	strb	r7, [r3, #2]
						if(CRC_STATUS == CRC_OK){
 801ff3e:	b95a      	cbnz	r2, 801ff58 <usb_receive_processing+0x374>
							dataToSend[3] = 0x01;
 801ff40:	2201      	movs	r2, #1
 801ff42:	70da      	strb	r2, [r3, #3]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ff44:	2240      	movs	r2, #64	; 0x40
 801ff46:	490d      	ldr	r1, [pc, #52]	; (801ff7c <usb_receive_processing+0x398>)
 801ff48:	480d      	ldr	r0, [pc, #52]	; (801ff80 <usb_receive_processing+0x39c>)
 801ff4a:	f7e8 f9eb 	bl	8008324 <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801ff4e:	2300      	movs	r3, #0
 801ff50:	6033      	str	r3, [r6, #0]
 801ff52:	6073      	str	r3, [r6, #4]
 801ff54:	60b3      	str	r3, [r6, #8]
 801ff56:	e791      	b.n	801fe7c <usb_receive_processing+0x298>
							dataToSend[3] = 0x00;
 801ff58:	70dd      	strb	r5, [r3, #3]
 801ff5a:	e7f3      	b.n	801ff44 <usb_receive_processing+0x360>
						send_usb_block = 1;
 801ff5c:	4e0a      	ldr	r6, [pc, #40]	; (801ff88 <usb_receive_processing+0x3a4>)
 801ff5e:	2301      	movs	r3, #1
 801ff60:	7033      	strb	r3, [r6, #0]
						packet_generator_Calculated_data_send();
 801ff62:	f7ff fd15 	bl	801f990 <packet_generator_Calculated_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801ff66:	6025      	str	r5, [r4, #0]
 801ff68:	6065      	str	r5, [r4, #4]
 801ff6a:	60a5      	str	r5, [r4, #8]
						send_usb_block = 0;
 801ff6c:	7035      	strb	r5, [r6, #0]
					break;
 801ff6e:	e661      	b.n	801fc34 <usb_receive_processing+0x50>
 801ff70:	20091344 	.word	0x20091344
 801ff74:	20091060 	.word	0x20091060
 801ff78:	2008be5b 	.word	0x2008be5b
 801ff7c:	2008ae00 	.word	0x2008ae00
 801ff80:	20091560 	.word	0x20091560
 801ff84:	20090f7a 	.word	0x20090f7a
 801ff88:	2008be6d 	.word	0x2008be6d

0801ff8c <auto_exposure>:
{ 
 801ff8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff8e:	4d45      	ldr	r5, [pc, #276]	; (80200a4 <auto_exposure+0x118>)
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801ff90:	4c45      	ldr	r4, [pc, #276]	; (80200a8 <auto_exposure+0x11c>)
 801ff92:	882b      	ldrh	r3, [r5, #0]
{ 
 801ff94:	2200      	movs	r2, #0
	for (uint16_t i = 5; i<1024; i++){
 801ff96:	f240 71f6 	movw	r1, #2038	; 0x7f6
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801ff9a:	18a0      	adds	r0, r4, r2
 801ff9c:	3202      	adds	r2, #2
 801ff9e:	8940      	ldrh	r0, [r0, #10]
 801ffa0:	4283      	cmp	r3, r0
 801ffa2:	bf38      	it	cc
 801ffa4:	4603      	movcc	r3, r0
	for (uint16_t i = 5; i<1024; i++){
 801ffa6:	428a      	cmp	r2, r1
 801ffa8:	d1f7      	bne.n	801ff9a <auto_exposure+0xe>
	if(max_el < 20000 && exp_num != 9)
 801ffaa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 801ffae:	4293      	cmp	r3, r2
 801ffb0:	802b      	strh	r3, [r5, #0]
 801ffb2:	4c3e      	ldr	r4, [pc, #248]	; (80200ac <auto_exposure+0x120>)
 801ffb4:	d840      	bhi.n	8020038 <auto_exposure+0xac>
 801ffb6:	7823      	ldrb	r3, [r4, #0]
 801ffb8:	2b09      	cmp	r3, #9
 801ffba:	d027      	beq.n	802000c <auto_exposure+0x80>
		highSignal = 0;
 801ffbc:	4a3c      	ldr	r2, [pc, #240]	; (80200b0 <auto_exposure+0x124>)
		send_usb_block =1;
 801ffbe:	4f3d      	ldr	r7, [pc, #244]	; (80200b4 <auto_exposure+0x128>)
		highSignal = 0;
 801ffc0:	2300      	movs	r3, #0
 801ffc2:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801ffc4:	4a3c      	ldr	r2, [pc, #240]	; (80200b8 <auto_exposure+0x12c>)
 801ffc6:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801ffc8:	2301      	movs	r3, #1
 801ffca:	703b      	strb	r3, [r7, #0]
		exp_num++;
 801ffcc:	7823      	ldrb	r3, [r4, #0]
 801ffce:	3301      	adds	r3, #1
		exp_num--;
 801ffd0:	b2db      	uxtb	r3, r3
 801ffd2:	7023      	strb	r3, [r4, #0]
		htim2.Init.Period = exposure_timer_period[exp_num];
 801ffd4:	7822      	ldrb	r2, [r4, #0]
 801ffd6:	4b39      	ldr	r3, [pc, #228]	; (80200bc <auto_exposure+0x130>)
 801ffd8:	4e39      	ldr	r6, [pc, #228]	; (80200c0 <auto_exposure+0x134>)
 801ffda:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801ffde:	4b39      	ldr	r3, [pc, #228]	; (80200c4 <auto_exposure+0x138>)
 801ffe0:	60da      	str	r2, [r3, #12]
		MX_TIM2_Init();
 801ffe2:	f7ff fa29 	bl	801f438 <MX_TIM2_Init>
		Calibration_Exposure_Change(exp_num);
 801ffe6:	7820      	ldrb	r0, [r4, #0]
 801ffe8:	f7ef f9ec 	bl	800f3c4 <Calibration_Exposure_Change>
		if(Mode_EL == 0){
 801ffec:	4b36      	ldr	r3, [pc, #216]	; (80200c8 <auto_exposure+0x13c>)
 801ffee:	781a      	ldrb	r2, [r3, #0]
 801fff0:	4b36      	ldr	r3, [pc, #216]	; (80200cc <auto_exposure+0x140>)
 801fff2:	2a00      	cmp	r2, #0
 801fff4:	d132      	bne.n	802005c <auto_exposure+0xd0>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801fff6:	4a36      	ldr	r2, [pc, #216]	; (80200d0 <auto_exposure+0x144>)
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801fff8:	ed93 0a00 	vldr	s0, [r3]
 801fffc:	edd2 0a00 	vldr	s1, [r2]
 8020000:	f7fc f9da 	bl	801c3b8 <Rabs_calc_Factor2_Settings_change>
		send_usb_block =0;
 8020004:	2300      	movs	r3, #0
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 8020006:	ed86 0a00 	vstr	s0, [r6]
		send_usb_block =0;
 802000a:	703b      	strb	r3, [r7, #0]
	if(old_exp_num!=exp_num ){exp_set = 1; }else{exp_set = 0;}
 802000c:	4b31      	ldr	r3, [pc, #196]	; (80200d4 <auto_exposure+0x148>)
 802000e:	7822      	ldrb	r2, [r4, #0]
 8020010:	7819      	ldrb	r1, [r3, #0]
 8020012:	4291      	cmp	r1, r2
 8020014:	4a30      	ldr	r2, [pc, #192]	; (80200d8 <auto_exposure+0x14c>)
 8020016:	bf14      	ite	ne
 8020018:	2101      	movne	r1, #1
 802001a:	2100      	moveq	r1, #0
 802001c:	7011      	strb	r1, [r2, #0]
	old_exp_num = exp_num;
 802001e:	7822      	ldrb	r2, [r4, #0]
 8020020:	701a      	strb	r2, [r3, #0]
	if(exp_num ==0 && max_el >=50000)
 8020022:	7823      	ldrb	r3, [r4, #0]
 8020024:	b9e3      	cbnz	r3, 8020060 <auto_exposure+0xd4>
 8020026:	882a      	ldrh	r2, [r5, #0]
 8020028:	f24c 334f 	movw	r3, #49999	; 0xc34f
 802002c:	429a      	cmp	r2, r3
 802002e:	d917      	bls.n	8020060 <auto_exposure+0xd4>
		highSignal = 1;
 8020030:	2201      	movs	r2, #1
			highSignal = 0;
 8020032:	4b1f      	ldr	r3, [pc, #124]	; (80200b0 <auto_exposure+0x124>)
			lowSignal = 0;
 8020034:	701a      	strb	r2, [r3, #0]
 8020036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if(max_el > 45000 && exp_num != 0)
 8020038:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 802003c:	4293      	cmp	r3, r2
 802003e:	d9e5      	bls.n	802000c <auto_exposure+0x80>
 8020040:	7823      	ldrb	r3, [r4, #0]
 8020042:	2b00      	cmp	r3, #0
 8020044:	d0e2      	beq.n	802000c <auto_exposure+0x80>
		highSignal = 0;
 8020046:	4a1a      	ldr	r2, [pc, #104]	; (80200b0 <auto_exposure+0x124>)
		send_usb_block =1;
 8020048:	4f1a      	ldr	r7, [pc, #104]	; (80200b4 <auto_exposure+0x128>)
		highSignal = 0;
 802004a:	2300      	movs	r3, #0
 802004c:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 802004e:	4a1a      	ldr	r2, [pc, #104]	; (80200b8 <auto_exposure+0x12c>)
 8020050:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 8020052:	2301      	movs	r3, #1
 8020054:	703b      	strb	r3, [r7, #0]
		exp_num--;
 8020056:	7823      	ldrb	r3, [r4, #0]
 8020058:	3b01      	subs	r3, #1
 802005a:	e7b9      	b.n	801ffd0 <auto_exposure+0x44>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 802005c:	4a1f      	ldr	r2, [pc, #124]	; (80200dc <auto_exposure+0x150>)
 802005e:	e7cb      	b.n	801fff8 <auto_exposure+0x6c>
	} else if((exp_num ==0 && max_el < 50000))
 8020060:	7823      	ldrb	r3, [r4, #0]
 8020062:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8020066:	b923      	cbnz	r3, 8020072 <auto_exposure+0xe6>
 8020068:	8829      	ldrh	r1, [r5, #0]
 802006a:	f24c 334f 	movw	r3, #49999	; 0xc34f
 802006e:	4299      	cmp	r1, r3
 8020070:	d9df      	bls.n	8020032 <auto_exposure+0xa6>
	} else if((exp_num ==9 && max_el < DarkSignal+2000)) //20000
 8020072:	7823      	ldrb	r3, [r4, #0]
 8020074:	2b09      	cmp	r3, #9
 8020076:	d109      	bne.n	802008c <auto_exposure+0x100>
 8020078:	4b19      	ldr	r3, [pc, #100]	; (80200e0 <auto_exposure+0x154>)
 802007a:	882a      	ldrh	r2, [r5, #0]
 802007c:	881b      	ldrh	r3, [r3, #0]
 802007e:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8020082:	4293      	cmp	r3, r2
 8020084:	db02      	blt.n	802008c <auto_exposure+0x100>
			lowSignal = 1;
 8020086:	2201      	movs	r2, #1
			lowSignal = 0;
 8020088:	4b0b      	ldr	r3, [pc, #44]	; (80200b8 <auto_exposure+0x12c>)
 802008a:	e7d3      	b.n	8020034 <auto_exposure+0xa8>
	}else if((exp_num ==9 && max_el > DarkSignal+2000))
 802008c:	7823      	ldrb	r3, [r4, #0]
 802008e:	2b09      	cmp	r3, #9
 8020090:	d1d1      	bne.n	8020036 <auto_exposure+0xaa>
 8020092:	4b13      	ldr	r3, [pc, #76]	; (80200e0 <auto_exposure+0x154>)
 8020094:	882a      	ldrh	r2, [r5, #0]
 8020096:	881b      	ldrh	r3, [r3, #0]
 8020098:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 802009c:	429a      	cmp	r2, r3
 802009e:	ddca      	ble.n	8020036 <auto_exposure+0xaa>
			lowSignal = 0;
 80200a0:	2200      	movs	r2, #0
 80200a2:	e7f1      	b.n	8020088 <auto_exposure+0xfc>
 80200a4:	2008be68 	.word	0x2008be68
 80200a8:	20009de4 	.word	0x20009de4
 80200ac:	2008be5a 	.word	0x2008be5a
 80200b0:	2008be63 	.word	0x2008be63
 80200b4:	2008be6d 	.word	0x2008be6d
 80200b8:	2008be66 	.word	0x2008be66
 80200bc:	080341d8 	.word	0x080341d8
 80200c0:	200055dc 	.word	0x200055dc
 80200c4:	200914cc 	.word	0x200914cc
 80200c8:	20000a48 	.word	0x20000a48
 80200cc:	200055d4 	.word	0x200055d4
 80200d0:	200055d0 	.word	0x200055d0
 80200d4:	2008be6a 	.word	0x2008be6a
 80200d8:	20000a4c 	.word	0x20000a4c
 80200dc:	200055cc 	.word	0x200055cc
 80200e0:	200055ca 	.word	0x200055ca

080200e4 <TIM2_IRQHandler>:
{
 80200e4:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80200e6:	4d0d      	ldr	r5, [pc, #52]	; (802011c <TIM2_IRQHandler+0x38>)
 80200e8:	2200      	movs	r2, #0
 80200ea:	2110      	movs	r1, #16
 80200ec:	4628      	mov	r0, r5
 80200ee:	f7e2 fc25 	bl	800293c <HAL_GPIO_WritePin>
	DWT_Delay(10);
 80200f2:	200a      	movs	r0, #10
 80200f4:	f7ff f9e8 	bl	801f4c8 <DWT_Delay>
	i = 0;
 80200f8:	4b09      	ldr	r3, [pc, #36]	; (8020120 <TIM2_IRQHandler+0x3c>)
 80200fa:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80200fc:	4628      	mov	r0, r5
 80200fe:	2201      	movs	r2, #1
 8020100:	2110      	movs	r1, #16
	i = 0;
 8020102:	801c      	strh	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8020104:	f7e2 fc1a 	bl	800293c <HAL_GPIO_WritePin>
  cnt_delay_bar = 0;
 8020108:	4b06      	ldr	r3, [pc, #24]	; (8020124 <TIM2_IRQHandler+0x40>)
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 802010a:	201c      	movs	r0, #28
  cnt_delay_bar = 0;
 802010c:	801c      	strh	r4, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 802010e:	f7e1 fd53 	bl	8001bb8 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim2);
 8020112:	4805      	ldr	r0, [pc, #20]	; (8020128 <TIM2_IRQHandler+0x44>)
}																					//	7.812ms	15.625ms	31.25ms	62.5ms	125ms	250ms	500ms	1s			2s			4s
 8020114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IRQHandler(&htim2);
 8020118:	f7e5 bfef 	b.w	80060fa <HAL_TIM_IRQHandler>
 802011c:	48000800 	.word	0x48000800
 8020120:	2008be64 	.word	0x2008be64
 8020124:	2008adb8 	.word	0x2008adb8
 8020128:	200914cc 	.word	0x200914cc

0802012c <TIM6_DAC_IRQHandler>:
{
 802012c:	b508      	push	{r3, lr}
	pause_button = 0;
 802012e:	4b06      	ldr	r3, [pc, #24]	; (8020148 <TIM6_DAC_IRQHandler+0x1c>)
 8020130:	2200      	movs	r2, #0
 8020132:	701a      	strb	r2, [r3, #0]
	Get_Battery_Level();
 8020134:	f7ff fb14 	bl	801f760 <Get_Battery_Level>
	HAL_NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 8020138:	2036      	movs	r0, #54	; 0x36
 802013a:	f7e1 fd3d 	bl	8001bb8 <HAL_NVIC_ClearPendingIRQ>
  HAL_TIM_IRQHandler(&htim6);
 802013e:	4803      	ldr	r0, [pc, #12]	; (802014c <TIM6_DAC_IRQHandler+0x20>)
}
 8020140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8020144:	f7e5 bfd9 	b.w	80060fa <HAL_TIM_IRQHandler>
 8020148:	2008be6b 	.word	0x2008be6b
 802014c:	2009134c 	.word	0x2009134c

08020150 <TIM7_IRQHandler>:
{
 8020150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 8020152:	4b48      	ldr	r3, [pc, #288]	; (8020274 <TIM7_IRQHandler+0x124>)
 8020154:	781b      	ldrb	r3, [r3, #0]
	if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen||
 8020156:	3b01      	subs	r3, #1
 8020158:	2b04      	cmp	r3, #4
 802015a:	d81e      	bhi.n	802019a <TIM7_IRQHandler+0x4a>
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 802015c:	4b46      	ldr	r3, [pc, #280]	; (8020278 <TIM7_IRQHandler+0x128>)
 802015e:	781b      	ldrb	r3, [r3, #0]
 8020160:	b9db      	cbnz	r3, 802019a <TIM7_IRQHandler+0x4a>
 8020162:	4b46      	ldr	r3, [pc, #280]	; (802027c <TIM7_IRQHandler+0x12c>)
 8020164:	781b      	ldrb	r3, [r3, #0]
 8020166:	b9c3      	cbnz	r3, 802019a <TIM7_IRQHandler+0x4a>
			cnt_delay_bar++;
 8020168:	4a45      	ldr	r2, [pc, #276]	; (8020280 <TIM7_IRQHandler+0x130>)
			if(exp_num > 4){
 802016a:	4946      	ldr	r1, [pc, #280]	; (8020284 <TIM7_IRQHandler+0x134>)
			cnt_delay_bar++;
 802016c:	8813      	ldrh	r3, [r2, #0]
 802016e:	3301      	adds	r3, #1
 8020170:	b29b      	uxth	r3, r3
 8020172:	8013      	strh	r3, [r2, #0]
			if(exp_num > 4){
 8020174:	780a      	ldrb	r2, [r1, #0]
 8020176:	2a04      	cmp	r2, #4
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 8020178:	780a      	ldrb	r2, [r1, #0]
			if(exp_num > 4){
 802017a:	d96b      	bls.n	8020254 <TIM7_IRQHandler+0x104>
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 802017c:	4842      	ldr	r0, [pc, #264]	; (8020288 <TIM7_IRQHandler+0x138>)
 802017e:	f241 7670 	movw	r6, #6000	; 0x1770
 8020182:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8020186:	fbb2 f2f6 	udiv	r2, r2, r6
 802018a:	4293      	cmp	r3, r2
 802018c:	d12b      	bne.n	80201e6 <TIM7_IRQHandler+0x96>
						GUI_Bar_Measure(85, 13, 0.2);
 802018e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 802028c <TIM7_IRQHandler+0x13c>
						GUI_Bar_Measure(85, 13, 0.6);
 8020192:	210d      	movs	r1, #13
 8020194:	2055      	movs	r0, #85	; 0x55
 8020196:	f7f5 fe05 	bl	8015da4 <GUI_Bar_Measure>
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 802019a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802019e:	483c      	ldr	r0, [pc, #240]	; (8020290 <TIM7_IRQHandler+0x140>)
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 80201a0:	4c3c      	ldr	r4, [pc, #240]	; (8020294 <TIM7_IRQHandler+0x144>)
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 80201a2:	4d3d      	ldr	r5, [pc, #244]	; (8020298 <TIM7_IRQHandler+0x148>)
 80201a4:	f7e2 fbc4 	bl	8002930 <HAL_GPIO_ReadPin>
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 80201a8:	7823      	ldrb	r3, [r4, #0]
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 80201aa:	7028      	strb	r0, [r5, #0]
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 80201ac:	4283      	cmp	r3, r0
 80201ae:	d012      	beq.n	80201d6 <TIM7_IRQHandler+0x86>
 80201b0:	4b3a      	ldr	r3, [pc, #232]	; (802029c <TIM7_IRQHandler+0x14c>)
 80201b2:	781b      	ldrb	r3, [r3, #0]
 80201b4:	b97b      	cbnz	r3, 80201d6 <TIM7_IRQHandler+0x86>
		GUI_Button_SD_Card(55, 426, !SD_Detect);
 80201b6:	fab0 f280 	clz	r2, r0
 80201ba:	0952      	lsrs	r2, r2, #5
 80201bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80201c0:	2037      	movs	r0, #55	; 0x37
 80201c2:	f7f5 f869 	bl	8015298 <GUI_Button_SD_Card>
		old_sd_detect = SD_Detect;
 80201c6:	782b      	ldrb	r3, [r5, #0]
 80201c8:	7023      	strb	r3, [r4, #0]
		if(SD_Detect == 0){
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	d14b      	bne.n	8020266 <TIM7_IRQHandler+0x116>
				MX_SDMMC1_SD_Init();
 80201ce:	f7ff f921 	bl	801f414 <MX_SDMMC1_SD_Init>
				MX_FATFS_Init();
 80201d2:	f7fe f9db 	bl	801e58c <MX_FATFS_Init>
	HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
 80201d6:	2037      	movs	r0, #55	; 0x37
 80201d8:	f7e1 fcee 	bl	8001bb8 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim7);
 80201dc:	4830      	ldr	r0, [pc, #192]	; (80202a0 <TIM7_IRQHandler+0x150>)
}
 80201de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_IRQHandler(&htim7);
 80201e2:	f7e5 bf8a 	b.w	80060fa <HAL_TIM_IRQHandler>
				else if (cnt_delay_bar == 2*(exposure_timer_period[exp_num]/12)/500)
 80201e6:	780a      	ldrb	r2, [r1, #0]
 80201e8:	270c      	movs	r7, #12
 80201ea:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 80201ee:	fbb5 f5f7 	udiv	r5, r5, r7
 80201f2:	22fa      	movs	r2, #250	; 0xfa
 80201f4:	fb95 f5f2 	sdiv	r5, r5, r2
 80201f8:	42ab      	cmp	r3, r5
 80201fa:	d102      	bne.n	8020202 <TIM7_IRQHandler+0xb2>
						GUI_Bar_Measure(85, 13, 0.4);
 80201fc:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80202a4 <TIM7_IRQHandler+0x154>
 8020200:	e7c7      	b.n	8020192 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 3*(exposure_timer_period[exp_num]/12)/500)
 8020202:	780a      	ldrb	r2, [r1, #0]
 8020204:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8020208:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 802020c:	fbb2 f2f7 	udiv	r2, r2, r7
 8020210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020214:	fb92 f2f4 	sdiv	r2, r2, r4
 8020218:	4293      	cmp	r3, r2
 802021a:	d102      	bne.n	8020222 <TIM7_IRQHandler+0xd2>
						GUI_Bar_Measure(85, 13, 0.6);
 802021c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80202a8 <TIM7_IRQHandler+0x158>
 8020220:	e7b7      	b.n	8020192 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 4*(exposure_timer_period[exp_num]/12)/500)
 8020222:	780a      	ldrb	r2, [r1, #0]
 8020224:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 8020228:	fbb4 f4f7 	udiv	r4, r4, r7
 802022c:	227d      	movs	r2, #125	; 0x7d
 802022e:	fb94 f4f2 	sdiv	r4, r4, r2
 8020232:	42a3      	cmp	r3, r4
 8020234:	d102      	bne.n	802023c <TIM7_IRQHandler+0xec>
						GUI_Bar_Measure(85, 13, 0.8);
 8020236:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80202ac <TIM7_IRQHandler+0x15c>
 802023a:	e7aa      	b.n	8020192 <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 5*((exposure_timer_period[exp_num]/12)/500))
 802023c:	780a      	ldrb	r2, [r1, #0]
 802023e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8020242:	fbb2 f2f6 	udiv	r2, r2, r6
 8020246:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802024a:	4293      	cmp	r3, r2
 802024c:	d1a5      	bne.n	802019a <TIM7_IRQHandler+0x4a>
						GUI_Bar_Measure(85, 13, 1);
 802024e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8020252:	e79e      	b.n	8020192 <TIM7_IRQHandler+0x42>
				} else if(exp_num > 2)
 8020254:	2a02      	cmp	r2, #2
 8020256:	d9fa      	bls.n	802024e <TIM7_IRQHandler+0xfe>
							if(cnt_delay_bar == 1){
 8020258:	2b01      	cmp	r3, #1
 802025a:	d102      	bne.n	8020262 <TIM7_IRQHandler+0x112>
								GUI_Bar_Measure(85, 13, 0.5);
 802025c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8020260:	e797      	b.n	8020192 <TIM7_IRQHandler+0x42>
							} else if(cnt_delay_bar == 2){
 8020262:	2b02      	cmp	r3, #2
 8020264:	e7f2      	b.n	802024c <TIM7_IRQHandler+0xfc>
			FATFS_UnLinkDriver(SDPath);
 8020266:	4812      	ldr	r0, [pc, #72]	; (80202b0 <TIM7_IRQHandler+0x160>)
 8020268:	f7e9 ff72 	bl	800a150 <FATFS_UnLinkDriver>
				HAL_SD_DeInit(&hsd1);
 802026c:	4811      	ldr	r0, [pc, #68]	; (80202b4 <TIM7_IRQHandler+0x164>)
 802026e:	f7e4 fed9 	bl	8005024 <HAL_SD_DeInit>
 8020272:	e7b0      	b.n	80201d6 <TIM7_IRQHandler+0x86>
 8020274:	20005279 	.word	0x20005279
 8020278:	200052a0 	.word	0x200052a0
 802027c:	2000559f 	.word	0x2000559f
 8020280:	2008adb8 	.word	0x2008adb8
 8020284:	2008be5a 	.word	0x2008be5a
 8020288:	080341d8 	.word	0x080341d8
 802028c:	3e4ccccd 	.word	0x3e4ccccd
 8020290:	48000800 	.word	0x48000800
 8020294:	20000a4e 	.word	0x20000a4e
 8020298:	200914c8 	.word	0x200914c8
 802029c:	20090f7a 	.word	0x20090f7a
 80202a0:	20091518 	.word	0x20091518
 80202a4:	3ecccccd 	.word	0x3ecccccd
 80202a8:	3f19999a 	.word	0x3f19999a
 80202ac:	3f4ccccd 	.word	0x3f4ccccd
 80202b0:	2008eef0 	.word	0x2008eef0
 80202b4:	20091070 	.word	0x20091070

080202b8 <EXTI9_5_IRQHandler>:
{
 80202b8:	b513      	push	{r0, r1, r4, lr}
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 80202ba:	4c22      	ldr	r4, [pc, #136]	; (8020344 <EXTI9_5_IRQHandler+0x8c>)
	DWT_Delay(1);
 80202bc:	2001      	movs	r0, #1
 80202be:	f7ff f903 	bl	801f4c8 <DWT_Delay>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 80202c2:	2300      	movs	r3, #0
 80202c4:	4622      	mov	r2, r4
 80202c6:	4621      	mov	r1, r4
 80202c8:	9300      	str	r3, [sp, #0]
 80202ca:	481f      	ldr	r0, [pc, #124]	; (8020348 <EXTI9_5_IRQHandler+0x90>)
 80202cc:	2302      	movs	r3, #2
 80202ce:	f7e5 fd27 	bl	8005d20 <HAL_SPI_TransmitReceive>
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 80202d2:	7823      	ldrb	r3, [r4, #0]
 80202d4:	7862      	ldrb	r2, [r4, #1]
 80202d6:	4c1d      	ldr	r4, [pc, #116]	; (802034c <EXTI9_5_IRQHandler+0x94>)
 80202d8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Line[i] = Line[i-1]; 
 80202dc:	8821      	ldrh	r1, [r4, #0]
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 80202de:	f64c 73fe 	movw	r3, #53246	; 0xcffe
 80202e2:	429a      	cmp	r2, r3
		Line[i] = Line[i-1]; 
 80202e4:	b289      	uxth	r1, r1
 80202e6:	4b1a      	ldr	r3, [pc, #104]	; (8020350 <EXTI9_5_IRQHandler+0x98>)
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 80202e8:	dd05      	ble.n	80202f6 <EXTI9_5_IRQHandler+0x3e>
		Line[i] = Line[i-1]; 
 80202ea:	8822      	ldrh	r2, [r4, #0]
 80202ec:	b292      	uxth	r2, r2
 80202ee:	3a01      	subs	r2, #1
 80202f0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80202f4:	e002      	b.n	80202fc <EXTI9_5_IRQHandler+0x44>
	} else if((RxBuf[0] << 8 | RxBuf[1])<=0x0EFF)
 80202f6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80202fa:	dbf6      	blt.n	80202ea <EXTI9_5_IRQHandler+0x32>
		Line[i] = RxBuf[0] << 8 | RxBuf[1];
 80202fc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(i >= 1023)
 8020300:	8823      	ldrh	r3, [r4, #0]
 8020302:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8020306:	b29b      	uxth	r3, r3
 8020308:	4293      	cmp	r3, r2
 802030a:	d916      	bls.n	802033a <EXTI9_5_IRQHandler+0x82>
		if(send_usb_block == 0 && (!pause))
 802030c:	4b11      	ldr	r3, [pc, #68]	; (8020354 <EXTI9_5_IRQHandler+0x9c>)
 802030e:	781b      	ldrb	r3, [r3, #0]
 8020310:	b943      	cbnz	r3, 8020324 <EXTI9_5_IRQHandler+0x6c>
 8020312:	4b11      	ldr	r3, [pc, #68]	; (8020358 <EXTI9_5_IRQHandler+0xa0>)
 8020314:	781b      	ldrb	r3, [r3, #0]
 8020316:	b92b      	cbnz	r3, 8020324 <EXTI9_5_IRQHandler+0x6c>
				memcpy(Line_buff, Line, sizeof(Line));
 8020318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802031c:	490c      	ldr	r1, [pc, #48]	; (8020350 <EXTI9_5_IRQHandler+0x98>)
 802031e:	480f      	ldr	r0, [pc, #60]	; (802035c <EXTI9_5_IRQHandler+0xa4>)
 8020320:	f002 f9e2 	bl	80226e8 <memcpy>
			i = 0;
 8020324:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8020326:	2017      	movs	r0, #23
			i++;
 8020328:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 802032a:	f7e1 fc45 	bl	8001bb8 <HAL_NVIC_ClearPendingIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 802032e:	2080      	movs	r0, #128	; 0x80
}
 8020330:	b002      	add	sp, #8
 8020332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8020336:	f7e2 bb0b 	b.w	8002950 <HAL_GPIO_EXTI_IRQHandler>
			i++;
 802033a:	8823      	ldrh	r3, [r4, #0]
 802033c:	3301      	adds	r3, #1
 802033e:	b29b      	uxth	r3, r3
 8020340:	e7f1      	b.n	8020326 <EXTI9_5_IRQHandler+0x6e>
 8020342:	bf00      	nop
 8020344:	20091400 	.word	0x20091400
 8020348:	20091464 	.word	0x20091464
 802034c:	2008be64 	.word	0x2008be64
 8020350:	200075e2 	.word	0x200075e2
 8020354:	2008be6d 	.word	0x2008be6d
 8020358:	200052a0 	.word	0x200052a0
 802035c:	20009de4 	.word	0x20009de4

08020360 <EXTI3_IRQHandler>:
{	
 8020360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	cnt_touch_delay = cnt_touch_delay + 1;
 8020364:	4c52      	ldr	r4, [pc, #328]	; (80204b0 <EXTI3_IRQHandler+0x150>)
 8020366:	6823      	ldr	r3, [r4, #0]
	uint16_t Touch_x = 0, Touch_y = 0;
 8020368:	aa02      	add	r2, sp, #8
	cnt_touch_delay = cnt_touch_delay + 1;
 802036a:	3301      	adds	r3, #1
 802036c:	6023      	str	r3, [r4, #0]
	uint16_t Touch_x = 0, Touch_y = 0;
 802036e:	2300      	movs	r3, #0
 8020370:	f822 3d02 	strh.w	r3, [r2, #-2]!
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 8020374:	a901      	add	r1, sp, #4
 8020376:	2070      	movs	r0, #112	; 0x70
	uint16_t Touch_x = 0, Touch_y = 0;
 8020378:	f8ad 3004 	strh.w	r3, [sp, #4]
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 802037c:	f7fe f880 	bl	801e480 <TS_Get_XY1>
	if((!TFT_ON_OFF) && (cnt_touch_delay >= 50))
 8020380:	4b4c      	ldr	r3, [pc, #304]	; (80204b4 <EXTI3_IRQHandler+0x154>)
 8020382:	7819      	ldrb	r1, [r3, #0]
 8020384:	4625      	mov	r5, r4
 8020386:	461a      	mov	r2, r3
 8020388:	b959      	cbnz	r1, 80203a2 <EXTI3_IRQHandler+0x42>
 802038a:	6821      	ldr	r1, [r4, #0]
 802038c:	2931      	cmp	r1, #49	; 0x31
 802038e:	d908      	bls.n	80203a2 <EXTI3_IRQHandler+0x42>
			TFT_ON_OFF = 0x01;
 8020390:	2201      	movs	r2, #1
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 8020392:	2104      	movs	r1, #4
 8020394:	4848      	ldr	r0, [pc, #288]	; (80204b8 <EXTI3_IRQHandler+0x158>)
			TFT_ON_OFF = 0x01;
 8020396:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 8020398:	f7e6 f9d2 	bl	8006740 <HAL_TIM_PWM_Start>
}
 802039c:	b003      	add	sp, #12
 802039e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(TFT_ON_OFF && (cnt_touch_delay >= 0x0B)){
 80203a2:	7813      	ldrb	r3, [r2, #0]
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	d06c      	beq.n	8020482 <EXTI3_IRQHandler+0x122>
 80203a8:	682b      	ldr	r3, [r5, #0]
 80203aa:	2b0a      	cmp	r3, #10
 80203ac:	d969      	bls.n	8020482 <EXTI3_IRQHandler+0x122>
			if((Mode_EL == 0x00) && ((Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)))
 80203ae:	4b43      	ldr	r3, [pc, #268]	; (80204bc <EXTI3_IRQHandler+0x15c>)
 80203b0:	f8df a120 	ldr.w	sl, [pc, #288]	; 80204d4 <EXTI3_IRQHandler+0x174>
 80203b4:	781b      	ldrb	r3, [r3, #0]
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	d157      	bne.n	802046a <EXTI3_IRQHandler+0x10a>
 80203ba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80203be:	f7e0 f8c9 	bl	8000554 <__aeabi_i2d>
 80203c2:	4680      	mov	r8, r0
 80203c4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80203c8:	4689      	mov	r9, r1
 80203ca:	f7e0 f8c3 	bl	8000554 <__aeabi_i2d>
 80203ce:	a332      	add	r3, pc, #200	; (adr r3, 8020498 <EXTI3_IRQHandler+0x138>)
 80203d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203d4:	4606      	mov	r6, r0
 80203d6:	460f      	mov	r7, r1
 80203d8:	4640      	mov	r0, r8
 80203da:	4649      	mov	r1, r9
 80203dc:	f04f 0401 	mov.w	r4, #1
 80203e0:	f7e0 fba4 	bl	8000b2c <__aeabi_dcmpge>
 80203e4:	b900      	cbnz	r0, 80203e8 <EXTI3_IRQHandler+0x88>
 80203e6:	4604      	mov	r4, r0
 80203e8:	a32d      	add	r3, pc, #180	; (adr r3, 80204a0 <EXTI3_IRQHandler+0x140>)
 80203ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203ee:	4640      	mov	r0, r8
 80203f0:	4649      	mov	r1, r9
 80203f2:	f04f 0b01 	mov.w	fp, #1
 80203f6:	f7e0 fb8f 	bl	8000b18 <__aeabi_dcmple>
 80203fa:	b900      	cbnz	r0, 80203fe <EXTI3_IRQHandler+0x9e>
 80203fc:	4683      	mov	fp, r0
 80203fe:	a32a      	add	r3, pc, #168	; (adr r3, 80204a8 <EXTI3_IRQHandler+0x148>)
 8020400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020404:	4630      	mov	r0, r6
 8020406:	4639      	mov	r1, r7
 8020408:	ea04 040b 	and.w	r4, r4, fp
 802040c:	f04f 0b01 	mov.w	fp, #1
 8020410:	f7e0 fb8c 	bl	8000b2c <__aeabi_dcmpge>
 8020414:	b900      	cbnz	r0, 8020418 <EXTI3_IRQHandler+0xb8>
 8020416:	4683      	mov	fp, r0
 8020418:	ea04 040b 	and.w	r4, r4, fp
 802041c:	07e3      	lsls	r3, r4, #31
 802041e:	d524      	bpl.n	802046a <EXTI3_IRQHandler+0x10a>
 8020420:	2200      	movs	r2, #0
 8020422:	4b27      	ldr	r3, [pc, #156]	; (80204c0 <EXTI3_IRQHandler+0x160>)
 8020424:	4630      	mov	r0, r6
 8020426:	4639      	mov	r1, r7
 8020428:	f04f 0401 	mov.w	r4, #1
 802042c:	f7e0 fb74 	bl	8000b18 <__aeabi_dcmple>
 8020430:	b900      	cbnz	r0, 8020434 <EXTI3_IRQHandler+0xd4>
 8020432:	4604      	mov	r4, r0
 8020434:	f014 0fff 	tst.w	r4, #255	; 0xff
 8020438:	d017      	beq.n	802046a <EXTI3_IRQHandler+0x10a>
				pause_button++;
 802043a:	4c22      	ldr	r4, [pc, #136]	; (80204c4 <EXTI3_IRQHandler+0x164>)
 802043c:	7823      	ldrb	r3, [r4, #0]
 802043e:	3301      	adds	r3, #1
 8020440:	b2db      	uxtb	r3, r3
				if(pause_button > 3)
 8020442:	2b03      	cmp	r3, #3
				pause_button++;
 8020444:	7023      	strb	r3, [r4, #0]
				if(pause_button > 3)
 8020446:	d910      	bls.n	802046a <EXTI3_IRQHandler+0x10a>
					LaserOnOff = !LaserOnOff;
 8020448:	4a1f      	ldr	r2, [pc, #124]	; (80204c8 <EXTI3_IRQHandler+0x168>)
 802044a:	7813      	ldrb	r3, [r2, #0]
 802044c:	fab3 f383 	clz	r3, r3
 8020450:	095b      	lsrs	r3, r3, #5
 8020452:	7013      	strb	r3, [r2, #0]
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8020454:	7813      	ldrb	r3, [r2, #0]
 8020456:	b1db      	cbz	r3, 8020490 <EXTI3_IRQHandler+0x130>
 8020458:	2200      	movs	r2, #0
 802045a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802045e:	481b      	ldr	r0, [pc, #108]	; (80204cc <EXTI3_IRQHandler+0x16c>)
 8020460:	f7e2 fa6c 	bl	800293c <HAL_GPIO_WritePin>
					cnt_touch_delay = 0;
 8020464:	2300      	movs	r3, #0
 8020466:	602b      	str	r3, [r5, #0]
					pause_button = 0;
 8020468:	7023      	strb	r3, [r4, #0]
				GUI_Touch_Processing();
 802046a:	f7f0 ff19 	bl	80112a0 <GUI_Touch_Processing>
				xt = Touch_x; yt = Touch_y;
 802046e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8020472:	4a17      	ldr	r2, [pc, #92]	; (80204d0 <EXTI3_IRQHandler+0x170>)
 8020474:	f8aa 3000 	strh.w	r3, [sl]
 8020478:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 802047c:	8013      	strh	r3, [r2, #0]
				cnt_touch_delay = 0;
 802047e:	2300      	movs	r3, #0
 8020480:	602b      	str	r3, [r5, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8020482:	2009      	movs	r0, #9
 8020484:	f7e1 fb98 	bl	8001bb8 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8020488:	2008      	movs	r0, #8
 802048a:	f7e2 fa61 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
}
 802048e:	e785      	b.n	802039c <EXTI3_IRQHandler+0x3c>
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8020490:	2201      	movs	r2, #1
 8020492:	e7e2      	b.n	802045a <EXTI3_IRQHandler+0xfa>
 8020494:	f3af 8000 	nop.w
 8020498:	99999999 	.word	0x99999999
 802049c:	40720d99 	.word	0x40720d99
 80204a0:	33333333 	.word	0x33333333
 80204a4:	407aff33 	.word	0x407aff33
 80204a8:	99999999 	.word	0x99999999
 80204ac:	4091a399 	.word	0x4091a399
 80204b0:	2008adbc 	.word	0x2008adbc
 80204b4:	20000a4a 	.word	0x20000a4a
 80204b8:	2009101c 	.word	0x2009101c
 80204bc:	20000a48 	.word	0x20000a48
 80204c0:	4093e000 	.word	0x4093e000
 80204c4:	2008be6b 	.word	0x2008be6b
 80204c8:	200075e0 	.word	0x200075e0
 80204cc:	48000800 	.word	0x48000800
 80204d0:	2008be70 	.word	0x2008be70
 80204d4:	2008be6e 	.word	0x2008be6e

080204d8 <SystemClock_Config>:
{
 80204d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80204da:	2000      	movs	r0, #0
{
 80204dc:	b0bf      	sub	sp, #252	; 0xfc
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80204de:	f7e3 fd51 	bl	8003f84 <HAL_PWREx_ControlVoltageScaling>
 80204e2:	b100      	cbz	r0, 80204e6 <SystemClock_Config+0xe>
 80204e4:	e7fe      	b.n	80204e4 <SystemClock_Config+0xc>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80204e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80204ea:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80204ec:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80204ee:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80204f0:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80204f2:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80204f6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80204f8:	2705      	movs	r7, #5
  RCC_OscInitStruct.PLL.PLLN = 30;
 80204fa:	231e      	movs	r3, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80204fc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80204fe:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020500:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020502:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020504:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 8020506:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 30;
 8020508:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 802050a:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 802050c:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 802050e:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020510:	f7e3 fe2e 	bl	8004170 <HAL_RCC_OscConfig>
 8020514:	b100      	cbz	r0, 8020518 <SystemClock_Config+0x40>
 8020516:	e7fe      	b.n	8020516 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020518:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802051a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802051c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802051e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020520:	4639      	mov	r1, r7
 8020522:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020524:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020526:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020528:	f7e4 f874 	bl	8004614 <HAL_RCC_ClockConfig>
 802052c:	b100      	cbz	r0, 8020530 <SystemClock_Config+0x58>
 802052e:	e7fe      	b.n	802052e <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
 8020530:	4b1e      	ldr	r3, [pc, #120]	; (80205ac <SystemClock_Config+0xd4>)
 8020532:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8020534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020538:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 802053a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 802053e:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8020540:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8020544:	9337      	str	r3, [sp, #220]	; 0xdc
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8020546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802054a:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PLLSAI2.PLLSAI2N = 9;
 802054c:	2309      	movs	r3, #9
 802054e:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8020550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8020554:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8020556:	230c      	movs	r3, #12
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8020558:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 802055a:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 802055c:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 802055e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 8020562:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8020564:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8020566:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8020568:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 802056a:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 802056c:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 802056e:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8020570:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 8020572:	963a      	str	r6, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8020574:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8020576:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8020578:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 802057a:	f7e4 fa7f 	bl	8004a7c <HAL_RCCEx_PeriphCLKConfig>
 802057e:	4604      	mov	r4, r0
 8020580:	b100      	cbz	r0, 8020584 <SystemClock_Config+0xac>
 8020582:	e7fe      	b.n	8020582 <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8020584:	f7e4 f940 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8020588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8020590:	f7e1 fafc 	bl	8001b8c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8020594:	2004      	movs	r0, #4
 8020596:	f7e1 fb1d 	bl	8001bd4 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 802059a:	4622      	mov	r2, r4
 802059c:	4621      	mov	r1, r4
 802059e:	f04f 30ff 	mov.w	r0, #4294967295
 80205a2:	f7e1 faa5 	bl	8001af0 <HAL_NVIC_SetPriority>
}
 80205a6:	b03f      	add	sp, #252	; 0xfc
 80205a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205aa:	bf00      	nop
 80205ac:	00486060 	.word	0x00486060

080205b0 <main>:
{
 80205b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205b4:	ed2d 8b02 	vpush	{d8}
 80205b8:	b0a7      	sub	sp, #156	; 0x9c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80205ba:	4db2      	ldr	r5, [pc, #712]	; (8020884 <main+0x2d4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80205bc:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80208a0 <main+0x2f0>
  HAL_Init();
 80205c0:	f7e0 fd16 	bl	8000ff0 <HAL_Init>
	HAL_Delay(1);
 80205c4:	2001      	movs	r0, #1
 80205c6:	f7e0 fd31 	bl	800102c <HAL_Delay>
  SystemClock_Config();
 80205ca:	f7ff ff85 	bl	80204d8 <SystemClock_Config>
	HAL_Delay(1);
 80205ce:	2001      	movs	r0, #1
 80205d0:	f7e0 fd2c 	bl	800102c <HAL_Delay>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80205d4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80205d6:	f043 0310 	orr.w	r3, r3, #16
 80205da:	64eb      	str	r3, [r5, #76]	; 0x4c
 80205dc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80205de:	f003 0310 	and.w	r3, r3, #16
 80205e2:	9307      	str	r3, [sp, #28]
 80205e4:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80205e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80205e8:	f043 0320 	orr.w	r3, r3, #32
 80205ec:	64eb      	str	r3, [r5, #76]	; 0x4c
 80205ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80205f0:	f003 0320 	and.w	r3, r3, #32
 80205f4:	9308      	str	r3, [sp, #32]
 80205f6:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80205f8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80205fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80205fe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020600:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020606:	9309      	str	r3, [sp, #36]	; 0x24
 8020608:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 802060a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 802060c:	f043 0301 	orr.w	r3, r3, #1
 8020610:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020612:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020614:	f003 0301 	and.w	r3, r3, #1
 8020618:	930a      	str	r3, [sp, #40]	; 0x28
 802061a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOC_CLK_ENABLE();
 802061c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 802061e:	f043 0304 	orr.w	r3, r3, #4
 8020622:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020624:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020626:	f003 0304 	and.w	r3, r3, #4
 802062a:	930b      	str	r3, [sp, #44]	; 0x2c
 802062c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 802062e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020630:	f043 0302 	orr.w	r3, r3, #2
 8020634:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020636:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020638:	f003 0302 	and.w	r3, r3, #2
 802063c:	930c      	str	r3, [sp, #48]	; 0x30
 802063e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8020640:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020642:	f043 0308 	orr.w	r3, r3, #8
 8020646:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020648:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 802064a:	f003 0308 	and.w	r3, r3, #8
 802064e:	930d      	str	r3, [sp, #52]	; 0x34
 8020650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8020652:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020658:	64eb      	str	r3, [r5, #76]	; 0x4c
 802065a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 802065c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020660:	930e      	str	r3, [sp, #56]	; 0x38
 8020662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	  HAL_PWREx_EnableVddIO2();
 8020664:	f7e3 fcf0 	bl	8004048 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 8020668:	2200      	movs	r2, #0
 802066a:	f242 0110 	movw	r1, #8208	; 0x2010
 802066e:	4886      	ldr	r0, [pc, #536]	; (8020888 <main+0x2d8>)
 8020670:	f7e2 f964 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 8020674:	2200      	movs	r2, #0
 8020676:	2120      	movs	r1, #32
 8020678:	4884      	ldr	r0, [pc, #528]	; (802088c <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802067a:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802067c:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 802067e:	f7e2 f95d 	bl	800293c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8020682:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8020684:	a919      	add	r1, sp, #100	; 0x64
 8020686:	4881      	ldr	r0, [pc, #516]	; (802088c <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8020688:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802068a:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802068c:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802068e:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8020690:	f7e1 ffde 	bl	8002650 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); //VIDEO_GAIN ON
 8020694:	4622      	mov	r2, r4
 8020696:	4639      	mov	r1, r7
 8020698:	487c      	ldr	r0, [pc, #496]	; (802088c <main+0x2dc>)
 802069a:	f7e2 f94f 	bl	800293c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 802069e:	f242 0310 	movw	r3, #8208	; 0x2010
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80206a2:	a919      	add	r1, sp, #100	; 0x64
 80206a4:	4878      	ldr	r0, [pc, #480]	; (8020888 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 80206a6:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80206a8:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80206aa:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80206ac:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80206ae:	f7e1 ffcf 	bl	8002650 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//ST init HIGH
 80206b2:	4632      	mov	r2, r6
 80206b4:	2110      	movs	r1, #16
 80206b6:	4874      	ldr	r0, [pc, #464]	; (8020888 <main+0x2d8>)
 80206b8:	f7e2 f940 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Laser init OFF
 80206bc:	4622      	mov	r2, r4
 80206be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80206c2:	4871      	ldr	r0, [pc, #452]	; (8020888 <main+0x2d8>)
 80206c4:	f7e2 f93a 	bl	800293c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80206c8:	2380      	movs	r3, #128	; 0x80
 80206ca:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80206cc:	a919      	add	r1, sp, #100	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80206ce:	4b70      	ldr	r3, [pc, #448]	; (8020890 <main+0x2e0>)
 80206d0:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80206d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80206d6:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80206d8:	f7e1 ffba 	bl	8002650 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80206dc:	4622      	mov	r2, r4
 80206de:	2104      	movs	r1, #4
 80206e0:	486a      	ldr	r0, [pc, #424]	; (802088c <main+0x2dc>)
 80206e2:	f7e2 f92b 	bl	800293c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80206e6:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80206ea:	a919      	add	r1, sp, #100	; 0x64
 80206ec:	4867      	ldr	r0, [pc, #412]	; (802088c <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80206ee:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80206f2:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80206f4:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80206f6:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80206f8:	f7e1 ffaa 	bl	8002650 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 80206fc:	4632      	mov	r2, r6
 80206fe:	4651      	mov	r1, sl
 8020700:	4862      	ldr	r0, [pc, #392]	; (802088c <main+0x2dc>)
 8020702:	f7e2 f91b 	bl	800293c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8020706:	4622      	mov	r2, r4
 8020708:	2102      	movs	r1, #2
 802070a:	4860      	ldr	r0, [pc, #384]	; (802088c <main+0x2dc>)
 802070c:	f7e2 f916 	bl	800293c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8020710:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8020712:	a919      	add	r1, sp, #100	; 0x64
 8020714:	485d      	ldr	r0, [pc, #372]	; (802088c <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8020716:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020718:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802071a:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802071c:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 802071e:	f7e1 ff97 	bl	8002650 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8020722:	4632      	mov	r2, r6
 8020724:	4639      	mov	r1, r7
 8020726:	4859      	ldr	r0, [pc, #356]	; (802088c <main+0x2dc>)
 8020728:	f7e2 f908 	bl	800293c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 802072c:	f44f 6800 	mov.w	r8, #2048	; 0x800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8020730:	a919      	add	r1, sp, #100	; 0x64
 8020732:	4856      	ldr	r0, [pc, #344]	; (802088c <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8020734:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020738:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802073a:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802073c:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 802073e:	f7e1 ff87 	bl	8002650 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8020742:	4632      	mov	r2, r6
 8020744:	4641      	mov	r1, r8
 8020746:	4851      	ldr	r0, [pc, #324]	; (802088c <main+0x2dc>)
 8020748:	f7e2 f8f8 	bl	800293c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 802074c:	f04f 0808 	mov.w	r8, #8
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8020750:	a919      	add	r1, sp, #100	; 0x64
 8020752:	484e      	ldr	r0, [pc, #312]	; (802088c <main+0x2dc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8020754:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8020758:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 802075c:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 802075e:	f7e1 ff77 	bl	8002650 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8020762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020766:	a919      	add	r1, sp, #100	; 0x64
 8020768:	4847      	ldr	r0, [pc, #284]	; (8020888 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 802076a:	9319      	str	r3, [sp, #100]	; 0x64
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 802076c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020770:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020772:	f7e1 ff6d 	bl	8002650 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 2); //SDO IRQ
 8020776:	463a      	mov	r2, r7
 8020778:	4621      	mov	r1, r4
 802077a:	2017      	movs	r0, #23
 802077c:	f7e1 f9b8 	bl	8001af0 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0); //Touchscreen IRQ
 8020780:	4622      	mov	r2, r4
 8020782:	4639      	mov	r1, r7
 8020784:	2009      	movs	r0, #9
 8020786:	f7e1 f9b3 	bl	8001af0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 802078a:	2017      	movs	r0, #23
 802078c:	f7e1 f9e4 	bl	8001b58 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8020790:	2009      	movs	r0, #9
 8020792:	f7e1 f9e1 	bl	8001b58 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 8020796:	4630      	mov	r0, r6
 8020798:	f7e0 fc48 	bl	800102c <HAL_Delay>
	DWT_Init();
 802079c:	f7fe fe80 	bl	801f4a0 <DWT_Init>
	HAL_Delay(1);
 80207a0:	4630      	mov	r0, r6
 80207a2:	f7e0 fc43 	bl	800102c <HAL_Delay>
	MX_TIM2_Init();
 80207a6:	f7fe fe47 	bl	801f438 <MX_TIM2_Init>

//PWM Timer for booster
static void MX_TIM15_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 80207aa:	221c      	movs	r2, #28
 80207ac:	4621      	mov	r1, r4
 80207ae:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80207b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80207b2:	9410      	str	r4, [sp, #64]	; 0x40
 80207b4:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80207b6:	f001 ffa2 	bl	80226fe <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80207ba:	222c      	movs	r2, #44	; 0x2c
 80207bc:	4621      	mov	r1, r4
 80207be:	a819      	add	r0, sp, #100	; 0x64
 80207c0:	f001 ff9d 	bl	80226fe <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80207c4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80208a4 <main+0x2f4>
  htim15.Init.Prescaler = 1200;
 80207c8:	4b32      	ldr	r3, [pc, #200]	; (8020894 <main+0x2e4>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80207ca:	f8c9 4008 	str.w	r4, [r9, #8]
  htim15.Init.Prescaler = 1200;
 80207ce:	f44f 6b96 	mov.w	fp, #1200	; 0x4b0
 80207d2:	e889 0808 	stmia.w	r9, {r3, fp}
  htim15.Init.Period = 100;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80207d6:	4648      	mov	r0, r9
  htim15.Init.Period = 100;
 80207d8:	2364      	movs	r3, #100	; 0x64
 80207da:	f8c9 300c 	str.w	r3, [r9, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80207de:	f8c9 4010 	str.w	r4, [r9, #16]
  htim15.Init.RepetitionCounter = 0;
 80207e2:	f8c9 4014 	str.w	r4, [r9, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80207e6:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80207ea:	f7e5 fdd1 	bl	8006390 <HAL_TIM_PWM_Init>
 80207ee:	b100      	cbz	r0, 80207f2 <main+0x242>
 80207f0:	e7fe      	b.n	80207f0 <main+0x240>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80207f2:	900f      	str	r0, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80207f4:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80207f6:	a90f      	add	r1, sp, #60	; 0x3c
 80207f8:	4648      	mov	r0, r9
 80207fa:	f7e6 f815 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 80207fe:	b100      	cbz	r0, 8020802 <main+0x252>
 8020800:	e7fe      	b.n	8020800 <main+0x250>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8020802:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8020804:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8020806:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8020808:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802080a:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 802080c:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 802080e:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8020810:	4652      	mov	r2, sl
 8020812:	a912      	add	r1, sp, #72	; 0x48
 8020814:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8020816:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8020818:	f7e5 fe52 	bl	80064c0 <HAL_TIM_PWM_ConfigChannel>
 802081c:	b100      	cbz	r0, 8020820 <main+0x270>
 802081e:	e7fe      	b.n	802081e <main+0x26e>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8020820:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8020822:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8020824:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = 0;
 8020826:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8020828:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 802082a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 802082e:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8020830:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8020832:	a919      	add	r1, sp, #100	; 0x64
 8020834:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8020836:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8020838:	f7e6 f822 	bl	8006880 <HAL_TIMEx_ConfigBreakDeadTime>
 802083c:	4682      	mov	sl, r0
 802083e:	b100      	cbz	r0, 8020842 <main+0x292>
 8020840:	e7fe      	b.n	8020840 <main+0x290>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8020842:	4648      	mov	r0, r9
 8020844:	f001 fb48 	bl	8021ed8 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 8020848:	4630      	mov	r0, r6
 802084a:	f7e0 fbef 	bl	800102c <HAL_Delay>
	HAL_Delay(1);
 802084e:	4630      	mov	r0, r6
 8020850:	f7e0 fbec 	bl	800102c <HAL_Delay>
  htim5.Instance = TIM5;
 8020854:	4c10      	ldr	r4, [pc, #64]	; (8020898 <main+0x2e8>)
 8020856:	4b11      	ldr	r3, [pc, #68]	; (802089c <main+0x2ec>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020858:	f8c4 a010 	str.w	sl, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 802085c:	e884 0488 	stmia.w	r4, {r3, r7, sl}
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8020860:	4620      	mov	r0, r4
  htim5.Init.Period = 30;
 8020862:	231e      	movs	r3, #30
 8020864:	60e3      	str	r3, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020866:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 802086a:	f7e5 fd77 	bl	800635c <HAL_TIM_OC_Init>
 802086e:	b100      	cbz	r0, 8020872 <main+0x2c2>
 8020870:	e7fe      	b.n	8020870 <main+0x2c0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020872:	9012      	str	r0, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020874:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8020876:	a912      	add	r1, sp, #72	; 0x48
 8020878:	4620      	mov	r0, r4
 802087a:	f7e5 ffd5 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 802087e:	4602      	mov	r2, r0
 8020880:	b190      	cbz	r0, 80208a8 <main+0x2f8>
 8020882:	e7fe      	b.n	8020882 <main+0x2d2>
 8020884:	40021000 	.word	0x40021000
 8020888:	48000800 	.word	0x48000800
 802088c:	48001400 	.word	0x48001400
 8020890:	10210000 	.word	0x10210000
 8020894:	40014000 	.word	0x40014000
 8020898:	20091104 	.word	0x20091104
 802089c:	40000c00 	.word	0x40000c00
 80208a0:	10110000 	.word	0x10110000
 80208a4:	2009101c 	.word	0x2009101c
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80208a8:	2330      	movs	r3, #48	; 0x30
 80208aa:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80208ac:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 5;
 80208ae:	2305      	movs	r3, #5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80208b0:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80208b2:	a919      	add	r1, sp, #100	; 0x64
 80208b4:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5;
 80208b6:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80208b8:	f7e5 fdca 	bl	8006450 <HAL_TIM_OC_ConfigChannel>
 80208bc:	4681      	mov	r9, r0
 80208be:	b100      	cbz	r0, 80208c2 <main+0x312>
 80208c0:	e7fe      	b.n	80208c0 <main+0x310>
  HAL_TIM_MspPostInit(&htim5);
 80208c2:	4620      	mov	r0, r4
 80208c4:	f001 fb08 	bl	8021ed8 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 80208c8:	4630      	mov	r0, r6
 80208ca:	f7e0 fbaf 	bl	800102c <HAL_Delay>
	MX_USB_DEVICE_Init();
 80208ce:	f001 fc85 	bl	80221dc <MX_USB_DEVICE_Init>
	HAL_Delay(1);
 80208d2:	4630      	mov	r0, r6
 80208d4:	f7e0 fbaa 	bl	800102c <HAL_Delay>
  hdma2d.Instance = DMA2D;
 80208d8:	4c8c      	ldr	r4, [pc, #560]	; (8020b0c <main+0x55c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 80208da:	4b8d      	ldr	r3, [pc, #564]	; (8020b10 <main+0x560>)
	hdma2d.LayerCfg[0].InputOffset = 0;
 80208dc:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hdma2d.Init.Mode = DMA2D_R2M;
 80208e0:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
 80208e4:	e884 0408 	stmia.w	r4, {r3, sl}
  hdma2d.LayerCfg[0].InputAlpha =125;
 80208e8:	237d      	movs	r3, #125	; 0x7d
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 80208ea:	62e7      	str	r7, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80208ec:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hdma2d.LayerCfg[0].InputAlpha =125;
 80208f0:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d.LayerCfg[1].InputOffset = 0;
 80208f2:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80208f6:	6467      	str	r7, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80208f8:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 125;
 80208fc:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80208fe:	4620      	mov	r0, r4
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8020900:	60a7      	str	r7, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8020902:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8020906:	f7e1 fb41 	bl	8001f8c <HAL_DMA2D_Init>
 802090a:	b100      	cbz	r0, 802090e <main+0x35e>
 802090c:	e7fe      	b.n	802090c <main+0x35c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 802090e:	4631      	mov	r1, r6
 8020910:	4620      	mov	r0, r4
 8020912:	f7e1 fc3d 	bl	8002190 <HAL_DMA2D_ConfigLayer>
 8020916:	4681      	mov	r9, r0
 8020918:	b100      	cbz	r0, 802091c <main+0x36c>
 802091a:	e7fe      	b.n	802091a <main+0x36a>
	HAL_Delay(1);
 802091c:	4630      	mov	r0, r6
 802091e:	f7e0 fb85 	bl	800102c <HAL_Delay>
  hspi1.Instance = SPI1;
 8020922:	4c7c      	ldr	r4, [pc, #496]	; (8020b14 <main+0x564>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8020924:	4b7c      	ldr	r3, [pc, #496]	; (8020b18 <main+0x568>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8020926:	f8c4 9008 	str.w	r9, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 802092a:	f44f 7c82 	mov.w	ip, #260	; 0x104
 802092e:	e884 1008 	stmia.w	r4, {r3, ip}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8020932:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8020936:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8020938:	f44f 7300 	mov.w	r3, #512	; 0x200
 802093c:	61a3      	str	r3, [r4, #24]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 802093e:	2310      	movs	r3, #16
 8020940:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8020942:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 7;
 8020944:	2307      	movs	r3, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8020946:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8020948:	6166      	str	r6, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 802094a:	f8c4 801c 	str.w	r8, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802094e:	f8c4 9020 	str.w	r9, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020952:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8020956:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8020958:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 802095c:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8020960:	f7e5 f970 	bl	8005c44 <HAL_SPI_Init>
 8020964:	b100      	cbz	r0, 8020968 <main+0x3b8>
 8020966:	e7fe      	b.n	8020966 <main+0x3b6>
	__HAL_SPI_ENABLE(&hspi1);
 8020968:	6822      	ldr	r2, [r4, #0]
  hi2c1.Instance = I2C1;
 802096a:	4c6c      	ldr	r4, [pc, #432]	; (8020b1c <main+0x56c>)
	__HAL_SPI_ENABLE(&hspi1);
 802096c:	6813      	ldr	r3, [r2, #0]
 802096e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020972:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 8020974:	2001      	movs	r0, #1
 8020976:	f7e0 fb59 	bl	800102c <HAL_Delay>
  hi2c1.Instance = I2C1;
 802097a:	4b69      	ldr	r3, [pc, #420]	; (8020b20 <main+0x570>)
 802097c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 802097e:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 8020982:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 8020986:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 802098a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 112;
 802098c:	2370      	movs	r3, #112	; 0x70
 802098e:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020990:	2701      	movs	r7, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020992:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8020994:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020996:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020998:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 802099a:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 802099c:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802099e:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80209a0:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80209a2:	f7e2 f91c 	bl	8002bde <HAL_I2C_Init>
 80209a6:	4601      	mov	r1, r0
 80209a8:	b100      	cbz	r0, 80209ac <main+0x3fc>
 80209aa:	e7fe      	b.n	80209aa <main+0x3fa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80209ac:	4620      	mov	r0, r4
 80209ae:	f7e2 fc7f 	bl	80032b0 <HAL_I2CEx_ConfigAnalogFilter>
 80209b2:	4601      	mov	r1, r0
 80209b4:	b100      	cbz	r0, 80209b8 <main+0x408>
 80209b6:	e7fe      	b.n	80209b6 <main+0x406>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80209b8:	4620      	mov	r0, r4
 80209ba:	f7e2 fc9f 	bl	80032fc <HAL_I2CEx_ConfigDigitalFilter>
 80209be:	4606      	mov	r6, r0
 80209c0:	b100      	cbz	r0, 80209c4 <main+0x414>
 80209c2:	e7fe      	b.n	80209c2 <main+0x412>
	HAL_Delay(1);
 80209c4:	4638      	mov	r0, r7
 80209c6:	f7e0 fb31 	bl	800102c <HAL_Delay>

/* LPUART1 init function */
static void MX_LPUART1_UART_Init(void)
{

	hlpuart1.Instance = LPUART1;
 80209ca:	4c56      	ldr	r4, [pc, #344]	; (8020b24 <main+0x574>)
  hlpuart1.Init.BaudRate = 9600;
 80209cc:	4b56      	ldr	r3, [pc, #344]	; (8020b28 <main+0x578>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80209ce:	60a6      	str	r6, [r4, #8]
  hlpuart1.Init.BaudRate = 9600;
 80209d0:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 80209d4:	e884 4008 	stmia.w	r4, {r3, lr}
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80209d8:	4620      	mov	r0, r4
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80209da:	230c      	movs	r3, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80209dc:	60e6      	str	r6, [r4, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80209de:	6126      	str	r6, [r4, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80209e0:	6163      	str	r3, [r4, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80209e2:	61a6      	str	r6, [r4, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80209e4:	6226      	str	r6, [r4, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80209e6:	6266      	str	r6, [r4, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80209e8:	62a6      	str	r6, [r4, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80209ea:	66a6      	str	r6, [r4, #104]	; 0x68
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80209ec:	f7e6 fbec 	bl	80071c8 <HAL_UART_Init>
 80209f0:	4601      	mov	r1, r0
 80209f2:	b100      	cbz	r0, 80209f6 <main+0x446>
 80209f4:	e7fe      	b.n	80209f4 <main+0x444>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80209f6:	4620      	mov	r0, r4
 80209f8:	f7e6 fc6c 	bl	80072d4 <HAL_UARTEx_SetTxFifoThreshold>
 80209fc:	4601      	mov	r1, r0
 80209fe:	b100      	cbz	r0, 8020a02 <main+0x452>
 8020a00:	e7fe      	b.n	8020a00 <main+0x450>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020a02:	4620      	mov	r0, r4
 8020a04:	f7e6 fc8c 	bl	8007320 <HAL_UARTEx_SetRxFifoThreshold>
 8020a08:	4606      	mov	r6, r0
 8020a0a:	b100      	cbz	r0, 8020a0e <main+0x45e>
 8020a0c:	e7fe      	b.n	8020a0c <main+0x45c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }
	
	HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 3); 
 8020a0e:	2203      	movs	r2, #3
 8020a10:	4639      	mov	r1, r7
 8020a12:	2046      	movs	r0, #70	; 0x46
 8020a14:	f7e1 f86c 	bl	8001af0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 8020a18:	4638      	mov	r0, r7
 8020a1a:	f7e0 fb07 	bl	800102c <HAL_Delay>
  hltdc.Instance = LTDC;
 8020a1e:	4c43      	ldr	r4, [pc, #268]	; (8020b2c <main+0x57c>)
 8020a20:	4b43      	ldr	r3, [pc, #268]	; (8020b30 <main+0x580>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8020a22:	60a6      	str	r6, [r4, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8020a24:	e884 0048 	stmia.w	r4, {r3, r6}
  hltdc.Init.HorizontalSync = 5;
 8020a28:	2305      	movs	r3, #5
 8020a2a:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 30;
 8020a2c:	231e      	movs	r3, #30
 8020a2e:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 40;
 8020a30:	2328      	movs	r3, #40	; 0x28
 8020a32:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 8;
 8020a34:	2308      	movs	r3, #8
 8020a36:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 520;
 8020a38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020a3c:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 280;
 8020a3e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8020a42:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 8020a44:	f240 230d 	movw	r3, #525	; 0x20d
 8020a48:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8020a4a:	4620      	mov	r0, r4
  hltdc.Init.TotalHeigh = 288;
 8020a4c:	f44f 7390 	mov.w	r3, #288	; 0x120
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8020a50:	60e6      	str	r6, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8020a52:	6126      	str	r6, [r4, #16]
  hltdc.Init.TotalHeigh = 288;
 8020a54:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8020a56:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8020a5a:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8020a5e:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8020a62:	f7e2 fd07 	bl	8003474 <HAL_LTDC_Init>
 8020a66:	4602      	mov	r2, r0
 8020a68:	b100      	cbz	r0, 8020a6c <main+0x4bc>
 8020a6a:	e7fe      	b.n	8020a6a <main+0x4ba>
  pLayerCfg.WindowY1 = 272;
 8020a6c:	f44f 7188 	mov.w	r1, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 8020a70:	9019      	str	r0, [sp, #100]	; 0x64
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8020a72:	2302      	movs	r3, #2
  pLayerCfg.WindowX1 = 480;
 8020a74:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8020a78:	f44f 6680 	mov.w	r6, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 8020a7c:	901a      	str	r0, [sp, #104]	; 0x68
  pLayerCfg.WindowY1 = 272;
 8020a7e:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8020a80:	931d      	str	r3, [sp, #116]	; 0x74
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8020a82:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.Alpha = 255;
 8020a84:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020a86:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = 480;
 8020a88:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.ImageHeight = 272;
 8020a8a:	9124      	str	r1, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8020a8c:	4620      	mov	r0, r4
 8020a8e:	a919      	add	r1, sp, #100	; 0x64
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020a90:	9621      	str	r6, [sp, #132]	; 0x84
  pLayerCfg.WindowY0 = 0;
 8020a92:	921b      	str	r2, [sp, #108]	; 0x6c
  pLayerCfg.Alpha = 255;
 8020a94:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.Alpha0 = 0;
 8020a96:	921f      	str	r2, [sp, #124]	; 0x7c
  pLayerCfg.FBStartAdress = 0;
 8020a98:	9222      	str	r2, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 255;
 8020a9a:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
  pLayerCfg.Backcolor.Green = 255;
 8020a9e:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
  pLayerCfg.Backcolor.Red = 255;
 8020aa2:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8020aa6:	f7e2 fd57 	bl	8003558 <HAL_LTDC_ConfigLayer>
 8020aaa:	4606      	mov	r6, r0
 8020aac:	b100      	cbz	r0, 8020ab0 <main+0x500>
 8020aae:	e7fe      	b.n	8020aae <main+0x4fe>
	HAL_Delay(1);
 8020ab0:	4638      	mov	r0, r7
 8020ab2:	f7e0 fabb 	bl	800102c <HAL_Delay>
  hadc1.Instance = ADC1;
 8020ab6:	4c1f      	ldr	r4, [pc, #124]	; (8020b34 <main+0x584>)
 8020ab8:	4b1f      	ldr	r3, [pc, #124]	; (8020b38 <main+0x588>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020aba:	60e6      	str	r6, [r4, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8020abc:	e884 0048 	stmia.w	r4, {r3, r6}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020ac0:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8020ac4:	2310      	movs	r3, #16
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8020ac6:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8020ac8:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8020aca:	6126      	str	r6, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020acc:	f8c4 8014 	str.w	r8, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8020ad0:	61a6      	str	r6, [r4, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8020ad2:	61e7      	str	r7, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 8020ad4:	6227      	str	r7, [r4, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8020ad6:	6266      	str	r6, [r4, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 8020ad8:	62a7      	str	r7, [r4, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8020ada:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020adc:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8020ade:	6366      	str	r6, [r4, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8020ae0:	63a6      	str	r6, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8020ae2:	63e6      	str	r6, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8020ae4:	f7e0 fab0 	bl	8001048 <HAL_ADC_Init>
 8020ae8:	b100      	cbz	r0, 8020aec <main+0x53c>
 8020aea:	e7fe      	b.n	8020aea <main+0x53a>
  sConfig.Channel = ADC_CHANNEL_3;
 8020aec:	4b13      	ldr	r3, [pc, #76]	; (8020b3c <main+0x58c>)
 8020aee:	9319      	str	r3, [sp, #100]	; 0x64
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8020af0:	2306      	movs	r3, #6
 8020af2:	931a      	str	r3, [sp, #104]	; 0x68
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8020af4:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8020af6:	237f      	movs	r3, #127	; 0x7f
  sConfig.Offset = 0;
 8020af8:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020afa:	a919      	add	r1, sp, #100	; 0x64
 8020afc:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8020afe:	931c      	str	r3, [sp, #112]	; 0x70
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8020b00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020b04:	f7e0 fbce 	bl	80012a4 <HAL_ADC_ConfigChannel>
 8020b08:	b1d0      	cbz	r0, 8020b40 <main+0x590>
 8020b0a:	e7fe      	b.n	8020b0a <main+0x55a>
 8020b0c:	20091404 	.word	0x20091404
 8020b10:	4002b000 	.word	0x4002b000
 8020b14:	20091464 	.word	0x20091464
 8020b18:	40013000 	.word	0x40013000
 8020b1c:	20090fd0 	.word	0x20090fd0
 8020b20:	40005400 	.word	0x40005400
 8020b24:	20091168 	.word	0x20091168
 8020b28:	40008000 	.word	0x40008000
 8020b2c:	200911f0 	.word	0x200911f0
 8020b30:	40016800 	.word	0x40016800
 8020b34:	200912c0 	.word	0x200912c0
 8020b38:	50040000 	.word	0x50040000
 8020b3c:	0c900008 	.word	0x0c900008
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8020b40:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim6.Instance = TIM6;
 8020b42:	4c35      	ldr	r4, [pc, #212]	; (8020c18 <main+0x668>)
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8020b44:	f043 0304 	orr.w	r3, r3, #4
 8020b48:	64ab      	str	r3, [r5, #72]	; 0x48
 8020b4a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8020b4c:	f003 0304 	and.w	r3, r3, #4
 8020b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020b54:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8020b56:	f043 0301 	orr.w	r3, r3, #1
 8020b5a:	64ab      	str	r3, [r5, #72]	; 0x48
 8020b5c:	6cab      	ldr	r3, [r5, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8020b5e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020b60:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8020b64:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020b66:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8020b68:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020b6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8020b6c:	f7e0 ffc0 	bl	8001af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8020b70:	200b      	movs	r0, #11
 8020b72:	f7e0 fff1 	bl	8001b58 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 8020b76:	2001      	movs	r0, #1
 8020b78:	f7e0 fa58 	bl	800102c <HAL_Delay>
	HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_1);
 8020b7c:	2100      	movs	r1, #0
 8020b7e:	4827      	ldr	r0, [pc, #156]	; (8020c1c <main+0x66c>)
 8020b80:	f7e5 fe12 	bl	80067a8 <HAL_TIM_OC_Start>
	HAL_Delay(1);
 8020b84:	2001      	movs	r0, #1
 8020b86:	f7e0 fa51 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);  //ST Signal
 8020b8a:	2201      	movs	r2, #1
 8020b8c:	2100      	movs	r1, #0
 8020b8e:	201c      	movs	r0, #28
 8020b90:	f7e0 ffae 	bl	8001af0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 8020b94:	2002      	movs	r0, #2
 8020b96:	f7e0 fa49 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8020b9a:	201c      	movs	r0, #28
 8020b9c:	f7e0 ffdc 	bl	8001b58 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 8020ba0:	2001      	movs	r0, #1
 8020ba2:	f7e0 fa43 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 8020ba6:	481e      	ldr	r0, [pc, #120]	; (8020c20 <main+0x670>)
 8020ba8:	f7e5 fa8a 	bl	80060c0 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 8020bac:	2001      	movs	r0, #1
 8020bae:	f7e0 fa3d 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(LTDC_IRQn, 1, 3);  //
 8020bb2:	2203      	movs	r2, #3
 8020bb4:	2101      	movs	r1, #1
 8020bb6:	205b      	movs	r0, #91	; 0x5b
 8020bb8:	f7e0 ff9a 	bl	8001af0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 8020bbc:	2002      	movs	r0, #2
 8020bbe:	f7e0 fa35 	bl	800102c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 8020bc2:	2104      	movs	r1, #4
 8020bc4:	4817      	ldr	r0, [pc, #92]	; (8020c24 <main+0x674>)
 8020bc6:	f7e5 fdbb 	bl	8006740 <HAL_TIM_PWM_Start>
	TIM15->CCR2 = 50;
 8020bca:	4b17      	ldr	r3, [pc, #92]	; (8020c28 <main+0x678>)
 8020bcc:	2232      	movs	r2, #50	; 0x32
 8020bce:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1);
 8020bd0:	2001      	movs	r0, #1
 8020bd2:	f7e0 fa2b 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8020bd6:	2201      	movs	r2, #1
 8020bd8:	4814      	ldr	r0, [pc, #80]	; (8020c2c <main+0x67c>)
 8020bda:	2104      	movs	r1, #4
 8020bdc:	f7e1 feae 	bl	800293c <HAL_GPIO_WritePin>
  htim6.Init.Prescaler = 48000;
 8020be0:	4a13      	ldr	r2, [pc, #76]	; (8020c30 <main+0x680>)
 8020be2:	f64b 3580 	movw	r5, #48000	; 0xbb80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020be6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 48000;
 8020be8:	e884 0024 	stmia.w	r4, {r2, r5}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8020bec:	4620      	mov	r0, r4
  htim6.Init.Period = 3800;
 8020bee:	f640 62d8 	movw	r2, #3800	; 0xed8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020bf2:	9319      	str	r3, [sp, #100]	; 0x64
 8020bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8020bf6:	931b      	str	r3, [sp, #108]	; 0x6c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020bf8:	60a3      	str	r3, [r4, #8]
  htim6.Init.Period = 3800;
 8020bfa:	60e2      	str	r2, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020bfc:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8020bfe:	f7e5 fb93 	bl	8006328 <HAL_TIM_Base_Init>
 8020c02:	b100      	cbz	r0, 8020c06 <main+0x656>
 8020c04:	e7fe      	b.n	8020c04 <main+0x654>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020c06:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020c08:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8020c0a:	a919      	add	r1, sp, #100	; 0x64
 8020c0c:	4620      	mov	r0, r4
 8020c0e:	f7e5 fe0b 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 8020c12:	4605      	mov	r5, r0
 8020c14:	b170      	cbz	r0, 8020c34 <main+0x684>
 8020c16:	e7fe      	b.n	8020c16 <main+0x666>
 8020c18:	2009134c 	.word	0x2009134c
 8020c1c:	20091104 	.word	0x20091104
 8020c20:	200914cc 	.word	0x200914cc
 8020c24:	2009101c 	.word	0x2009101c
 8020c28:	40014000 	.word	0x40014000
 8020c2c:	48001400 	.word	0x48001400
 8020c30:	40001000 	.word	0x40001000
	HAL_Delay(1);
 8020c34:	2001      	movs	r0, #1
 8020c36:	f7e0 f9f9 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8020c3a:	2036      	movs	r0, #54	; 0x36
 8020c3c:	f7e0 ff8c 	bl	8001b58 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 8020c40:	2001      	movs	r0, #1
 8020c42:	f7e0 f9f3 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 8020c46:	4620      	mov	r0, r4
 8020c48:	f7e5 fa3a 	bl	80060c0 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 4);
 8020c4c:	2204      	movs	r2, #4
 8020c4e:	2101      	movs	r1, #1
 8020c50:	201c      	movs	r0, #28
 8020c52:	f7e0 ff4d 	bl	8001af0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 8020c56:	2001      	movs	r0, #1
 8020c58:	f7e0 f9e8 	bl	800102c <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 8020c5c:	462a      	mov	r2, r5
 8020c5e:	49d0      	ldr	r1, [pc, #832]	; (8020fa0 <main+0x9f0>)
 8020c60:	48d0      	ldr	r0, [pc, #832]	; (8020fa4 <main+0x9f4>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 8020c62:	4cd1      	ldr	r4, [pc, #836]	; (8020fa8 <main+0x9f8>)
 8020c64:	4fd1      	ldr	r7, [pc, #836]	; (8020fac <main+0x9fc>)
 8020c66:	4ed2      	ldr	r6, [pc, #840]	; (8020fb0 <main+0xa00>)
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 8020c68:	f8df 9400 	ldr.w	r9, [pc, #1024]	; 802106c <main+0xabc>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 8020c6c:	f7e2 fca4 	bl	80035b8 <HAL_LTDC_SetAddress>
	HAL_Delay(1);
 8020c70:	2001      	movs	r0, #1
 8020c72:	f7e0 f9db 	bl	800102c <HAL_Delay>
	Touch_Ini();
 8020c76:	f7fd fbfa 	bl	801e46e <Touch_Ini>
	MX_SDMMC1_SD_Init();
 8020c7a:	f7fe fbcb 	bl	801f414 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8020c7e:	f7fd fc85 	bl	801e58c <MX_FATFS_Init>
	GPIO_QSPI_Init();
 8020c82:	f7fb f957 	bl	801bf34 <GPIO_QSPI_Init>
	Single_Mode();	
 8020c86:	f7fb fa07 	bl	801c098 <Single_Mode>
	HAL_Delay(20);
 8020c8a:	2014      	movs	r0, #20
 8020c8c:	f7e0 f9ce 	bl	800102c <HAL_Delay>
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 8020c90:	2103      	movs	r1, #3
 8020c92:	48c8      	ldr	r0, [pc, #800]	; (8020fb4 <main+0xa04>)
 8020c94:	f7ee fb1e 	bl	800f2d4 <Calibration_Load_1byte>
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 8020c98:	4bc7      	ldr	r3, [pc, #796]	; (8020fb8 <main+0xa08>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 8020c9a:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 8020c9c:	28ff      	cmp	r0, #255	; 0xff
 8020c9e:	bf18      	it	ne
 8020ca0:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 8020ca2:	f04f 0103 	mov.w	r1, #3
 8020ca6:	48c5      	ldr	r0, [pc, #788]	; (8020fbc <main+0xa0c>)
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 8020ca8:	bf08      	it	eq
 8020caa:	701d      	strbeq	r5, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 8020cac:	f7ee fb12 	bl	800f2d4 <Calibration_Load_1byte>
 8020cb0:	4bc3      	ldr	r3, [pc, #780]	; (8020fc0 <main+0xa10>)
 8020cb2:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 8020cb4:	28ff      	cmp	r0, #255	; 0xff
 8020cb6:	bf0c      	ite	eq
 8020cb8:	2200      	moveq	r2, #0
 8020cba:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 8020cbc:	f04f 0103 	mov.w	r1, #3
 8020cc0:	48c0      	ldr	r0, [pc, #768]	; (8020fc4 <main+0xa14>)
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 8020cc2:	bf08      	it	eq
 8020cc4:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 8020cc6:	f7ee fb05 	bl	800f2d4 <Calibration_Load_1byte>
 8020cca:	4bbf      	ldr	r3, [pc, #764]	; (8020fc8 <main+0xa18>)
 8020ccc:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 8020cce:	28ff      	cmp	r0, #255	; 0xff
 8020cd0:	bf0a      	itet	eq
 8020cd2:	781a      	ldrbeq	r2, [r3, #0]
 8020cd4:	7018      	strbne	r0, [r3, #0]
 8020cd6:	f042 0201 	orreq.w	r2, r2, #1
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 8020cda:	f04f 0103 	mov.w	r1, #3
 8020cde:	48bb      	ldr	r0, [pc, #748]	; (8020fcc <main+0xa1c>)
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 8020ce0:	bf08      	it	eq
 8020ce2:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 8020ce4:	f7ee faf6 	bl	800f2d4 <Calibration_Load_1byte>
 8020ce8:	4bb9      	ldr	r3, [pc, #740]	; (8020fd0 <main+0xa20>)
 8020cea:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 8020cec:	28ff      	cmp	r0, #255	; 0xff
 8020cee:	bf0c      	ite	eq
 8020cf0:	2200      	moveq	r2, #0
 8020cf2:	7018      	strbne	r0, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 8020cf4:	f04f 0103 	mov.w	r1, #3
 8020cf8:	48b6      	ldr	r0, [pc, #728]	; (8020fd4 <main+0xa24>)
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 8020cfa:	bf08      	it	eq
 8020cfc:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 8020cfe:	f7ee fae9 	bl	800f2d4 <Calibration_Load_1byte>
 8020d02:	4bb5      	ldr	r3, [pc, #724]	; (8020fd8 <main+0xa28>)
 8020d04:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 8020d06:	28ff      	cmp	r0, #255	; 0xff
 8020d08:	bf0c      	ite	eq
 8020d0a:	2200      	moveq	r2, #0
 8020d0c:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 8020d0e:	f04f 0103 	mov.w	r1, #3
 8020d12:	48b2      	ldr	r0, [pc, #712]	; (8020fdc <main+0xa2c>)
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 8020d14:	bf08      	it	eq
 8020d16:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 8020d18:	f7ee fadc 	bl	800f2d4 <Calibration_Load_1byte>
 8020d1c:	4bb0      	ldr	r3, [pc, #704]	; (8020fe0 <main+0xa30>)
 8020d1e:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 8020d20:	28ff      	cmp	r0, #255	; 0xff
 8020d22:	bf0a      	itet	eq
 8020d24:	781a      	ldrbeq	r2, [r3, #0]
 8020d26:	7018      	strbne	r0, [r3, #0]
 8020d28:	f042 0210 	orreq.w	r2, r2, #16
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 8020d2c:	f04f 0103 	mov.w	r1, #3
 8020d30:	48ac      	ldr	r0, [pc, #688]	; (8020fe4 <main+0xa34>)
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 8020d32:	bf08      	it	eq
 8020d34:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 8020d36:	f7ee facd 	bl	800f2d4 <Calibration_Load_1byte>
 8020d3a:	4bab      	ldr	r3, [pc, #684]	; (8020fe8 <main+0xa38>)
 8020d3c:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 8020d3e:	28ff      	cmp	r0, #255	; 0xff
 8020d40:	bf0c      	ite	eq
 8020d42:	2200      	moveq	r2, #0
 8020d44:	7018      	strbne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 8020d46:	f04f 0101 	mov.w	r1, #1
 8020d4a:	48a8      	ldr	r0, [pc, #672]	; (8020fec <main+0xa3c>)
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 8020d4c:	bf08      	it	eq
 8020d4e:	701a      	strbeq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 8020d50:	f7ee fa9a 	bl	800f288 <Calibration_Load_2byte>
 8020d54:	4ca6      	ldr	r4, [pc, #664]	; (8020ff0 <main+0xa40>)
 8020d56:	4ba7      	ldr	r3, [pc, #668]	; (8020ff4 <main+0xa44>)
 8020d58:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 8020d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020d5e:	4290      	cmp	r0, r2
 8020d60:	bf0c      	ite	eq
 8020d62:	2200      	moveq	r2, #0
 8020d64:	8018      	strhne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 8020d66:	f04f 0101 	mov.w	r1, #1
 8020d6a:	48a3      	ldr	r0, [pc, #652]	; (8020ff8 <main+0xa48>)
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 8020d6c:	bf08      	it	eq
 8020d6e:	801a      	strheq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 8020d70:	f7ee fa8a 	bl	800f288 <Calibration_Load_2byte>
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 8020d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020d78:	4298      	cmp	r0, r3
 8020d7a:	4ba0      	ldr	r3, [pc, #640]	; (8020ffc <main+0xa4c>)
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 8020d7c:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 8020d7e:	bf06      	itte	eq
 8020d80:	2200      	moveq	r2, #0
 8020d82:	801a      	strheq	r2, [r3, #0]
 8020d84:	8018      	strhne	r0, [r3, #0]
	Calibration_WaveLenght_Graph();
 8020d86:	f7ee fb5b 	bl	800f440 <Calibration_WaveLenght_Graph>
	Calibration_Exposure_Change(exp_num);
 8020d8a:	4b9d      	ldr	r3, [pc, #628]	; (8021000 <main+0xa50>)
 8020d8c:	4d9d      	ldr	r5, [pc, #628]	; (8021004 <main+0xa54>)
 8020d8e:	7818      	ldrb	r0, [r3, #0]
 8020d90:	f7ee fb18 	bl	800f3c4 <Calibration_Exposure_Change>
	Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8020d94:	4b88      	ldr	r3, [pc, #544]	; (8020fb8 <main+0xa08>)
 8020d96:	489c      	ldr	r0, [pc, #624]	; (8021008 <main+0xa58>)
 8020d98:	781c      	ldrb	r4, [r3, #0]
 8020d9a:	4b9c      	ldr	r3, [pc, #624]	; (802100c <main+0xa5c>)
 8020d9c:	4a9c      	ldr	r2, [pc, #624]	; (8021010 <main+0xa60>)
 8020d9e:	2c00      	cmp	r4, #0
 8020da0:	bf18      	it	ne
 8020da2:	4618      	movne	r0, r3
 8020da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020da8:	f7ee fad6 	bl	800f358 <Calibration_Load_Pack>
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 8020dac:	4899      	ldr	r0, [pc, #612]	; (8021014 <main+0xa64>)
 8020dae:	f7ee fac1 	bl	800f334 <Calibration_Load_float>
 8020db2:	4b99      	ldr	r3, [pc, #612]	; (8021018 <main+0xa68>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 8020db4:	4899      	ldr	r0, [pc, #612]	; (802101c <main+0xa6c>)
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 8020db6:	ed83 0a00 	vstr	s0, [r3]
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 8020dba:	f7ee fabb 	bl	800f334 <Calibration_Load_float>
 8020dbe:	4b98      	ldr	r3, [pc, #608]	; (8021020 <main+0xa70>)
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 8020dc0:	4a98      	ldr	r2, [pc, #608]	; (8021024 <main+0xa74>)
 8020dc2:	4899      	ldr	r0, [pc, #612]	; (8021028 <main+0xa78>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 8020dc4:	ed83 0a00 	vstr	s0, [r3]
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 8020dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020dcc:	f7ee fac4 	bl	800f358 <Calibration_Load_Pack>
	Calibration_Load_Pack(SPECTRAL_NIGHT, 0x400, Spectral_night);
 8020dd0:	4a96      	ldr	r2, [pc, #600]	; (802102c <main+0xa7c>)
 8020dd2:	4897      	ldr	r0, [pc, #604]	; (8021030 <main+0xa80>)
 8020dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020dd8:	f7ee fabe 	bl	800f358 <Calibration_Load_Pack>
	Calibration_Load_Pack(X10_CIE1964, 0x400, calibratre_x_1964);
 8020ddc:	4a95      	ldr	r2, [pc, #596]	; (8021034 <main+0xa84>)
 8020dde:	4896      	ldr	r0, [pc, #600]	; (8021038 <main+0xa88>)
 8020de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020de4:	f7ee fab8 	bl	800f358 <Calibration_Load_Pack>
	Calibration_Load_Pack(Y10_CIE1964, 0x400, calibratre_y_1964);
 8020de8:	4a94      	ldr	r2, [pc, #592]	; (802103c <main+0xa8c>)
 8020dea:	4895      	ldr	r0, [pc, #596]	; (8021040 <main+0xa90>)
 8020dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020df0:	f7ee fab2 	bl	800f358 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z10_CIE1964, 0x400, calibratre_z_1964);
 8020df4:	4a93      	ldr	r2, [pc, #588]	; (8021044 <main+0xa94>)
 8020df6:	4894      	ldr	r0, [pc, #592]	; (8021048 <main+0xa98>)
 8020df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020dfc:	f7ee faac 	bl	800f358 <Calibration_Load_Pack>
	Calibration_Load_Pack(X2_CIE1931, 0x400, calibratre_x_1931);
 8020e00:	4a92      	ldr	r2, [pc, #584]	; (802104c <main+0xa9c>)
 8020e02:	4893      	ldr	r0, [pc, #588]	; (8021050 <main+0xaa0>)
 8020e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020e08:	f7ee faa6 	bl	800f358 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z2_CIE1931, 0x400, calibratre_z_1931);
 8020e0c:	4a91      	ldr	r2, [pc, #580]	; (8021054 <main+0xaa4>)
 8020e0e:	4892      	ldr	r0, [pc, #584]	; (8021058 <main+0xaa8>)
 8020e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020e14:	f7ee faa0 	bl	800f358 <Calibration_Load_Pack>
 8020e18:	4b90      	ldr	r3, [pc, #576]	; (802105c <main+0xaac>)
 8020e1a:	9303      	str	r3, [sp, #12]
 8020e1c:	4b90      	ldr	r3, [pc, #576]	; (8021060 <main+0xab0>)
 8020e1e:	9305      	str	r3, [sp, #20]
 8020e20:	4b90      	ldr	r3, [pc, #576]	; (8021064 <main+0xab4>)
 8020e22:	9304      	str	r3, [sp, #16]
 8020e24:	46aa      	mov	sl, r5
 8020e26:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 8020e2a:	f04f 0800 	mov.w	r8, #0
 8020e2e:	2100      	movs	r1, #0
 8020e30:	4620      	mov	r0, r4
 8020e32:	f7ee fa29 	bl	800f288 <Calibration_Load_2byte>
 8020e36:	ee07 0a90 	vmov	s15, r0
 8020e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020e3e:	f504 4b90 	add.w	fp, r4, #18432	; 0x4800
 8020e42:	ee17 0a90 	vmov	r0, s15
 8020e46:	f7df fb97 	bl	8000578 <__aeabi_f2d>
 8020e4a:	4642      	mov	r2, r8
 8020e4c:	464b      	mov	r3, r9
 8020e4e:	f7df fd11 	bl	8000874 <__aeabi_ddiv>
 8020e52:	a351      	add	r3, pc, #324	; (adr r3, 8020f98 <main+0x9e8>)
 8020e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e58:	f7df fa30 	bl	80002bc <__adddf3>
 8020e5c:	f7df fed8 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 8020e60:	2101      	movs	r1, #1
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 8020e62:	f8ca 0000 	str.w	r0, [sl]
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 8020e66:	4620      	mov	r0, r4
 8020e68:	f7ee fa0e 	bl	800f288 <Calibration_Load_2byte>
 8020e6c:	ee07 0a90 	vmov	s15, r0
 8020e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020e74:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8020e78:	ee17 0a90 	vmov	r0, s15
 8020e7c:	f7df fb7c 	bl	8000578 <__aeabi_f2d>
 8020e80:	4642      	mov	r2, r8
 8020e82:	464b      	mov	r3, r9
 8020e84:	f7df fcf6 	bl	8000874 <__aeabi_ddiv>
 8020e88:	a343      	add	r3, pc, #268	; (adr r3, 8020f98 <main+0x9e8>)
 8020e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e8e:	f7df fa15 	bl	80002bc <__adddf3>
 8020e92:	f7df febd 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020e96:	2102      	movs	r1, #2
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 8020e98:	f8ca 0004 	str.w	r0, [sl, #4]
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020e9c:	4620      	mov	r0, r4
 8020e9e:	f7ee f9f3 	bl	800f288 <Calibration_Load_2byte>
 8020ea2:	ee07 0a90 	vmov	s15, r0
 8020ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 8020eaa:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 8021068 <main+0xab8>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020eae:	ee17 0a90 	vmov	r0, s15
 8020eb2:	f7df fb61 	bl	8000578 <__aeabi_f2d>
 8020eb6:	4642      	mov	r2, r8
 8020eb8:	464b      	mov	r3, r9
 8020eba:	f7df fcdb 	bl	8000874 <__aeabi_ddiv>
 8020ebe:	a336      	add	r3, pc, #216	; (adr r3, 8020f98 <main+0x9e8>)
 8020ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ec4:	f7df f9fa 	bl	80002bc <__adddf3>
 8020ec8:	f7df fea2 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 8020ecc:	2103      	movs	r1, #3
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020ece:	f8ca 0008 	str.w	r0, [sl, #8]
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 8020ed2:	4620      	mov	r0, r4
 8020ed4:	f7ee f9d8 	bl	800f288 <Calibration_Load_2byte>
 8020ed8:	ee07 0a90 	vmov	s15, r0
 8020edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020ee0:	f10a 0a10 	add.w	sl, sl, #16
 8020ee4:	ee17 0a90 	vmov	r0, s15
 8020ee8:	f7df fb46 	bl	8000578 <__aeabi_f2d>
 8020eec:	4642      	mov	r2, r8
 8020eee:	464b      	mov	r3, r9
 8020ef0:	f7df fcc0 	bl	8000874 <__aeabi_ddiv>
 8020ef4:	a328      	add	r3, pc, #160	; (adr r3, 8020f98 <main+0x9e8>)
 8020ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020efa:	f7df f9df 	bl	80002bc <__adddf3>
 8020efe:	f7df fe87 	bl	8000c10 <__aeabi_d2f>
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 8020f02:	2100      	movs	r1, #0
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 8020f04:	f84a 0c04 	str.w	r0, [sl, #-4]
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 8020f08:	4658      	mov	r0, fp
 8020f0a:	f7ee f9bd 	bl	800f288 <Calibration_Load_2byte>
 8020f0e:	ee07 0a90 	vmov	s15, r0
 8020f12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020f16:	9b03      	ldr	r3, [sp, #12]
 8020f18:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 8020f1c:	2101      	movs	r1, #1
 8020f1e:	4658      	mov	r0, fp
 8020f20:	3710      	adds	r7, #16
 8020f22:	3610      	adds	r6, #16
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 8020f24:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 8020f28:	f7ee f9ae 	bl	800f288 <Calibration_Load_2byte>
 8020f2c:	ee07 0a90 	vmov	s15, r0
 8020f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020f34:	9b03      	ldr	r3, [sp, #12]
 8020f36:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 8020f3a:	2102      	movs	r1, #2
 8020f3c:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 8020f3e:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 8020f42:	f7ee f9a1 	bl	800f288 <Calibration_Load_2byte>
 8020f46:	ee07 0a90 	vmov	s15, r0
 8020f4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020f4e:	9b03      	ldr	r3, [sp, #12]
 8020f50:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 8020f54:	2103      	movs	r1, #3
 8020f56:	4658      	mov	r0, fp
 8020f58:	f504 4ba0 	add.w	fp, r4, #20480	; 0x5000
 8020f5c:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 8020f60:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 8020f64:	f7ee f990 	bl	800f288 <Calibration_Load_2byte>
 8020f68:	ee07 0a90 	vmov	s15, r0
 8020f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020f70:	9b03      	ldr	r3, [sp, #12]
 8020f72:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 8020f76:	2100      	movs	r1, #0
 8020f78:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 8020f7a:	edc3 7a03 	vstr	s15, [r3, #12]
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 8020f7e:	f7ee f983 	bl	800f288 <Calibration_Load_2byte>
 8020f82:	ee07 0a90 	vmov	s15, r0
 8020f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020f8a:	9b05      	ldr	r3, [sp, #20]
 8020f8c:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 8020f90:	2101      	movs	r1, #1
 8020f92:	e06d      	b.n	8021070 <main+0xac0>
 8020f94:	f3af 8000 	nop.w
 8020f98:	00000000 	.word	0x00000000
 8020f9c:	4072c000 	.word	0x4072c000
 8020fa0:	2000a5e4 	.word	0x2000a5e4
 8020fa4:	200911f0 	.word	0x200911f0
 8020fa8:	2009105c 	.word	0x2009105c
 8020fac:	2004a1e4 	.word	0x2004a1e4
 8020fb0:	2004b1e4 	.word	0x2004b1e4
 8020fb4:	0812b030 	.word	0x0812b030
 8020fb8:	20000a48 	.word	0x20000a48
 8020fbc:	0812b040 	.word	0x0812b040
 8020fc0:	2000527a 	.word	0x2000527a
 8020fc4:	0812b048 	.word	0x0812b048
 8020fc8:	20005277 	.word	0x20005277
 8020fcc:	0812b050 	.word	0x0812b050
 8020fd0:	20005278 	.word	0x20005278
 8020fd4:	0812b058 	.word	0x0812b058
 8020fd8:	2000527b 	.word	0x2000527b
 8020fdc:	0812b060 	.word	0x0812b060
 8020fe0:	2008c321 	.word	0x2008c321
 8020fe4:	0812b068 	.word	0x0812b068
 8020fe8:	2008c322 	.word	0x2008c322
 8020fec:	0812b038 	.word	0x0812b038
 8020ff0:	200910f0 	.word	0x200910f0
 8020ff4:	2000527e 	.word	0x2000527e
 8020ff8:	0812b020 	.word	0x0812b020
 8020ffc:	200052a6 	.word	0x200052a6
 8021000:	2008be5a 	.word	0x2008be5a
 8021004:	200501ec 	.word	0x200501ec
 8021008:	08101838 	.word	0x08101838
 802100c:	08100838 	.word	0x08100838
 8021010:	2004d1e8 	.word	0x2004d1e8
 8021014:	08102838 	.word	0x08102838
 8021018:	200055cc 	.word	0x200055cc
 802101c:	0810283c 	.word	0x0810283c
 8021020:	200055d0 	.word	0x200055d0
 8021024:	2004e1e8 	.word	0x2004e1e8
 8021028:	08102840 	.word	0x08102840
 802102c:	2004f1e8 	.word	0x2004f1e8
 8021030:	08103844 	.word	0x08103844
 8021034:	20086db8 	.word	0x20086db8
 8021038:	08107840 	.word	0x08107840
 802103c:	20087db8 	.word	0x20087db8
 8021040:	08108840 	.word	0x08108840
 8021044:	20089db8 	.word	0x20089db8
 8021048:	08109840 	.word	0x08109840
 802104c:	20085db8 	.word	0x20085db8
 8021050:	08105840 	.word	0x08105840
 8021054:	20088db8 	.word	0x20088db8
 8021058:	08106840 	.word	0x08106840
 802105c:	200055e0 	.word	0x200055e0
 8021060:	200065e0 	.word	0x200065e0
 8021064:	2004c1e4 	.word	0x2004c1e4
 8021068:	447a0000 	.word	0x447a0000
 802106c:	40590000 	.word	0x40590000
 8021070:	4658      	mov	r0, fp
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 8021072:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 8021076:	f7ee f907 	bl	800f288 <Calibration_Load_2byte>
 802107a:	ee07 0a90 	vmov	s15, r0
 802107e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8021082:	9b05      	ldr	r3, [sp, #20]
 8021084:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 8021088:	2102      	movs	r1, #2
 802108a:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 802108c:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 8021090:	f7ee f8fa 	bl	800f288 <Calibration_Load_2byte>
 8021094:	ee07 0a90 	vmov	s15, r0
 8021098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802109c:	9b05      	ldr	r3, [sp, #20]
 802109e:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 80210a2:	2103      	movs	r1, #3
 80210a4:	4658      	mov	r0, fp
 80210a6:	f504 4b28 	add.w	fp, r4, #43008	; 0xa800
 80210aa:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 80210ae:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 80210b2:	f7ee f8e9 	bl	800f288 <Calibration_Load_2byte>
 80210b6:	ee07 0a90 	vmov	s15, r0
 80210ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80210be:	9b05      	ldr	r3, [sp, #20]
 80210c0:	eec7 7a08 	vdiv.f32	s15, s14, s16
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 80210c4:	2100      	movs	r1, #0
 80210c6:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 80210c8:	edc3 7a03 	vstr	s15, [r3, #12]
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 80210cc:	f7ee f8dc 	bl	800f288 <Calibration_Load_2byte>
 80210d0:	ee07 0a90 	vmov	s15, r0
 80210d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80210d8:	ee17 0a90 	vmov	r0, s15
 80210dc:	f7df fa4c 	bl	8000578 <__aeabi_f2d>
 80210e0:	4642      	mov	r2, r8
 80210e2:	464b      	mov	r3, r9
 80210e4:	f7df fbc6 	bl	8000874 <__aeabi_ddiv>
 80210e8:	2200      	movs	r2, #0
 80210ea:	4bda      	ldr	r3, [pc, #872]	; (8021454 <main+0xea4>)
 80210ec:	f7df f8e4 	bl	80002b8 <__aeabi_dsub>
 80210f0:	f7df fd8e 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 80210f4:	2101      	movs	r1, #1
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 80210f6:	f847 0c10 	str.w	r0, [r7, #-16]
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 80210fa:	4658      	mov	r0, fp
 80210fc:	f7ee f8c4 	bl	800f288 <Calibration_Load_2byte>
 8021100:	ee07 0a90 	vmov	s15, r0
 8021104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021108:	ee17 0a90 	vmov	r0, s15
 802110c:	f7df fa34 	bl	8000578 <__aeabi_f2d>
 8021110:	4642      	mov	r2, r8
 8021112:	464b      	mov	r3, r9
 8021114:	f7df fbae 	bl	8000874 <__aeabi_ddiv>
 8021118:	2200      	movs	r2, #0
 802111a:	4bce      	ldr	r3, [pc, #824]	; (8021454 <main+0xea4>)
 802111c:	f7df f8cc 	bl	80002b8 <__aeabi_dsub>
 8021120:	f7df fd76 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 8021124:	2102      	movs	r1, #2
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 8021126:	f847 0c0c 	str.w	r0, [r7, #-12]
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 802112a:	4658      	mov	r0, fp
 802112c:	f7ee f8ac 	bl	800f288 <Calibration_Load_2byte>
 8021130:	ee07 0a90 	vmov	s15, r0
 8021134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021138:	ee17 0a90 	vmov	r0, s15
 802113c:	f7df fa1c 	bl	8000578 <__aeabi_f2d>
 8021140:	4642      	mov	r2, r8
 8021142:	464b      	mov	r3, r9
 8021144:	f7df fb96 	bl	8000874 <__aeabi_ddiv>
 8021148:	2200      	movs	r2, #0
 802114a:	4bc2      	ldr	r3, [pc, #776]	; (8021454 <main+0xea4>)
 802114c:	f7df f8b4 	bl	80002b8 <__aeabi_dsub>
 8021150:	f7df fd5e 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 8021154:	2103      	movs	r1, #3
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 8021156:	f847 0c08 	str.w	r0, [r7, #-8]
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 802115a:	4658      	mov	r0, fp
 802115c:	f7ee f894 	bl	800f288 <Calibration_Load_2byte>
 8021160:	ee07 0a90 	vmov	s15, r0
 8021164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021168:	f504 4b30 	add.w	fp, r4, #45056	; 0xb000
 802116c:	ee17 0a90 	vmov	r0, s15
 8021170:	f7df fa02 	bl	8000578 <__aeabi_f2d>
 8021174:	4642      	mov	r2, r8
 8021176:	464b      	mov	r3, r9
 8021178:	f7df fb7c 	bl	8000874 <__aeabi_ddiv>
 802117c:	2200      	movs	r2, #0
 802117e:	4bb5      	ldr	r3, [pc, #724]	; (8021454 <main+0xea4>)
 8021180:	f7df f89a 	bl	80002b8 <__aeabi_dsub>
 8021184:	f7df fd44 	bl	8000c10 <__aeabi_d2f>
 8021188:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 802118c:	f847 0c04 	str.w	r0, [r7, #-4]
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 8021190:	2100      	movs	r1, #0
 8021192:	4658      	mov	r0, fp
 8021194:	f7ee f878 	bl	800f288 <Calibration_Load_2byte>
 8021198:	ee07 0a90 	vmov	s15, r0
 802119c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80211a0:	ee17 0a90 	vmov	r0, s15
 80211a4:	f7df f9e8 	bl	8000578 <__aeabi_f2d>
 80211a8:	4642      	mov	r2, r8
 80211aa:	464b      	mov	r3, r9
 80211ac:	f7df fb62 	bl	8000874 <__aeabi_ddiv>
 80211b0:	2200      	movs	r2, #0
 80211b2:	4ba8      	ldr	r3, [pc, #672]	; (8021454 <main+0xea4>)
 80211b4:	f7df f880 	bl	80002b8 <__aeabi_dsub>
 80211b8:	f7df fd2a 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 80211bc:	2101      	movs	r1, #1
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 80211be:	f846 0c10 	str.w	r0, [r6, #-16]
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 80211c2:	4658      	mov	r0, fp
 80211c4:	f7ee f860 	bl	800f288 <Calibration_Load_2byte>
 80211c8:	ee07 0a90 	vmov	s15, r0
 80211cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80211d0:	ee17 0a90 	vmov	r0, s15
 80211d4:	f7df f9d0 	bl	8000578 <__aeabi_f2d>
 80211d8:	4642      	mov	r2, r8
 80211da:	464b      	mov	r3, r9
 80211dc:	f7df fb4a 	bl	8000874 <__aeabi_ddiv>
 80211e0:	2200      	movs	r2, #0
 80211e2:	4b9c      	ldr	r3, [pc, #624]	; (8021454 <main+0xea4>)
 80211e4:	f7df f868 	bl	80002b8 <__aeabi_dsub>
 80211e8:	f7df fd12 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 80211ec:	2102      	movs	r1, #2
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 80211ee:	f846 0c0c 	str.w	r0, [r6, #-12]
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 80211f2:	4658      	mov	r0, fp
 80211f4:	f7ee f848 	bl	800f288 <Calibration_Load_2byte>
 80211f8:	ee07 0a90 	vmov	s15, r0
 80211fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021200:	ee17 0a90 	vmov	r0, s15
 8021204:	f7df f9b8 	bl	8000578 <__aeabi_f2d>
 8021208:	4642      	mov	r2, r8
 802120a:	464b      	mov	r3, r9
 802120c:	f7df fb32 	bl	8000874 <__aeabi_ddiv>
 8021210:	2200      	movs	r2, #0
 8021212:	4b90      	ldr	r3, [pc, #576]	; (8021454 <main+0xea4>)
 8021214:	f7df f850 	bl	80002b8 <__aeabi_dsub>
 8021218:	f7df fcfa 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 802121c:	2103      	movs	r1, #3
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 802121e:	f846 0c08 	str.w	r0, [r6, #-8]
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 8021222:	4658      	mov	r0, fp
 8021224:	f7ee f830 	bl	800f288 <Calibration_Load_2byte>
 8021228:	ee07 0a90 	vmov	s15, r0
 802122c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021230:	f504 4b38 	add.w	fp, r4, #47104	; 0xb800
 8021234:	ee17 0a90 	vmov	r0, s15
 8021238:	f7df f99e 	bl	8000578 <__aeabi_f2d>
 802123c:	4642      	mov	r2, r8
 802123e:	464b      	mov	r3, r9
 8021240:	f7df fb18 	bl	8000874 <__aeabi_ddiv>
 8021244:	2200      	movs	r2, #0
 8021246:	4b83      	ldr	r3, [pc, #524]	; (8021454 <main+0xea4>)
 8021248:	f7df f836 	bl	80002b8 <__aeabi_dsub>
 802124c:	f7df fce0 	bl	8000c10 <__aeabi_d2f>
 8021250:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8021254:	f846 0c04 	str.w	r0, [r6, #-4]
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 8021258:	2100      	movs	r1, #0
 802125a:	4658      	mov	r0, fp
 802125c:	f7ee f814 	bl	800f288 <Calibration_Load_2byte>
 8021260:	ee07 0a90 	vmov	s15, r0
 8021264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021268:	3408      	adds	r4, #8
 802126a:	ee17 0a90 	vmov	r0, s15
 802126e:	f7df f983 	bl	8000578 <__aeabi_f2d>
 8021272:	4642      	mov	r2, r8
 8021274:	464b      	mov	r3, r9
 8021276:	f7df fafd 	bl	8000874 <__aeabi_ddiv>
 802127a:	2200      	movs	r2, #0
 802127c:	4b75      	ldr	r3, [pc, #468]	; (8021454 <main+0xea4>)
 802127e:	f7df f81b 	bl	80002b8 <__aeabi_dsub>
 8021282:	f7df fcc5 	bl	8000c10 <__aeabi_d2f>
 8021286:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 8021288:	2101      	movs	r1, #1
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 802128a:	6018      	str	r0, [r3, #0]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 802128c:	4658      	mov	r0, fp
 802128e:	f7ed fffb 	bl	800f288 <Calibration_Load_2byte>
 8021292:	ee07 0a90 	vmov	s15, r0
 8021296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802129a:	ee17 0a90 	vmov	r0, s15
 802129e:	f7df f96b 	bl	8000578 <__aeabi_f2d>
 80212a2:	4642      	mov	r2, r8
 80212a4:	464b      	mov	r3, r9
 80212a6:	f7df fae5 	bl	8000874 <__aeabi_ddiv>
 80212aa:	2200      	movs	r2, #0
 80212ac:	4b69      	ldr	r3, [pc, #420]	; (8021454 <main+0xea4>)
 80212ae:	f7df f803 	bl	80002b8 <__aeabi_dsub>
 80212b2:	f7df fcad 	bl	8000c10 <__aeabi_d2f>
 80212b6:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 80212b8:	2102      	movs	r1, #2
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 80212ba:	6058      	str	r0, [r3, #4]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 80212bc:	4658      	mov	r0, fp
 80212be:	f7ed ffe3 	bl	800f288 <Calibration_Load_2byte>
 80212c2:	ee07 0a90 	vmov	s15, r0
 80212c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80212ca:	ee17 0a90 	vmov	r0, s15
 80212ce:	f7df f953 	bl	8000578 <__aeabi_f2d>
 80212d2:	4642      	mov	r2, r8
 80212d4:	464b      	mov	r3, r9
 80212d6:	f7df facd 	bl	8000874 <__aeabi_ddiv>
 80212da:	2200      	movs	r2, #0
 80212dc:	4b5d      	ldr	r3, [pc, #372]	; (8021454 <main+0xea4>)
 80212de:	f7de ffeb 	bl	80002b8 <__aeabi_dsub>
 80212e2:	f7df fc95 	bl	8000c10 <__aeabi_d2f>
 80212e6:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 80212e8:	2103      	movs	r1, #3
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 80212ea:	6098      	str	r0, [r3, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 80212ec:	4658      	mov	r0, fp
 80212ee:	f7ed ffcb 	bl	800f288 <Calibration_Load_2byte>
 80212f2:	ee07 0a90 	vmov	s15, r0
 80212f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80212fa:	ee17 0a90 	vmov	r0, s15
 80212fe:	f7df f93b 	bl	8000578 <__aeabi_f2d>
 8021302:	4642      	mov	r2, r8
 8021304:	464b      	mov	r3, r9
 8021306:	f7df fab5 	bl	8000874 <__aeabi_ddiv>
 802130a:	4b52      	ldr	r3, [pc, #328]	; (8021454 <main+0xea4>)
 802130c:	2200      	movs	r2, #0
 802130e:	f7de ffd3 	bl	80002b8 <__aeabi_dsub>
 8021312:	f7df fc7d 	bl	8000c10 <__aeabi_d2f>
 8021316:	9b04      	ldr	r3, [sp, #16]
 8021318:	60d8      	str	r0, [r3, #12]
 802131a:	9b03      	ldr	r3, [sp, #12]
 802131c:	3310      	adds	r3, #16
 802131e:	9303      	str	r3, [sp, #12]
 8021320:	9b05      	ldr	r3, [sp, #20]
 8021322:	3310      	adds	r3, #16
 8021324:	9305      	str	r3, [sp, #20]
 8021326:	9b04      	ldr	r3, [sp, #16]
 8021328:	3310      	adds	r3, #16
 802132a:	9304      	str	r3, [sp, #16]
	for(uint16_t i = 0; i < 2*1024; i=i+8){
 802132c:	4b4a      	ldr	r3, [pc, #296]	; (8021458 <main+0xea8>)
 802132e:	429c      	cmp	r4, r3
 8021330:	f47f ad7d 	bne.w	8020e2e <main+0x87e>
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 8021334:	2100      	movs	r1, #0
 8021336:	4849      	ldr	r0, [pc, #292]	; (802145c <main+0xeac>)
 8021338:	f7ed ffa6 	bl	800f288 <Calibration_Load_2byte>
 802133c:	4b48      	ldr	r3, [pc, #288]	; (8021460 <main+0xeb0>)
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 802133e:	2101      	movs	r1, #1
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 8021340:	8018      	strh	r0, [r3, #0]
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 8021342:	4846      	ldr	r0, [pc, #280]	; (802145c <main+0xeac>)
 8021344:	f7ed ffa0 	bl	800f288 <Calibration_Load_2byte>
 8021348:	4b46      	ldr	r3, [pc, #280]	; (8021464 <main+0xeb4>)
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 802134a:	2100      	movs	r1, #0
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 802134c:	8018      	strh	r0, [r3, #0]
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 802134e:	4846      	ldr	r0, [pc, #280]	; (8021468 <main+0xeb8>)
 8021350:	f7ed ff9a 	bl	800f288 <Calibration_Load_2byte>
 8021354:	4b45      	ldr	r3, [pc, #276]	; (802146c <main+0xebc>)
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 8021356:	2100      	movs	r1, #0
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 8021358:	8018      	strh	r0, [r3, #0]
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 802135a:	4845      	ldr	r0, [pc, #276]	; (8021470 <main+0xec0>)
 802135c:	f7ed ff94 	bl	800f288 <Calibration_Load_2byte>
 8021360:	4b44      	ldr	r3, [pc, #272]	; (8021474 <main+0xec4>)
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 8021362:	2101      	movs	r1, #1
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 8021364:	8018      	strh	r0, [r3, #0]
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 8021366:	4842      	ldr	r0, [pc, #264]	; (8021470 <main+0xec0>)
 8021368:	f7ed ff8e 	bl	800f288 <Calibration_Load_2byte>
 802136c:	4b42      	ldr	r3, [pc, #264]	; (8021478 <main+0xec8>)
 802136e:	4943      	ldr	r1, [pc, #268]	; (802147c <main+0xecc>)
 8021370:	8018      	strh	r0, [r3, #0]
 8021372:	4b43      	ldr	r3, [pc, #268]	; (8021480 <main+0xed0>)
 8021374:	4a43      	ldr	r2, [pc, #268]	; (8021484 <main+0xed4>)
 8021376:	f8b3 e000 	ldrh.w	lr, [r3]
 802137a:	4b43      	ldr	r3, [pc, #268]	; (8021488 <main+0xed8>)
 802137c:	8810      	ldrh	r0, [r2, #0]
 802137e:	f8b3 8000 	ldrh.w	r8, [r3]
 8021382:	880e      	ldrh	r6, [r1, #0]
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 8021384:	ed9f 7a41 	vldr	s14, [pc, #260]	; 802148c <main+0xedc>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 8021388:	eddf 6a41 	vldr	s13, [pc, #260]	; 8021490 <main+0xee0>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 802138c:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8021494 <main+0xee4>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 8021390:	eddf 5a41 	vldr	s11, [pc, #260]	; 8021498 <main+0xee8>
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 8021394:	2300      	movs	r3, #0
 8021396:	461c      	mov	r4, r3
 8021398:	461f      	mov	r7, r3
 802139a:	469c      	mov	ip, r3
 802139c:	4699      	mov	r9, r3
 802139e:	468a      	mov	sl, r1
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 80213a0:	ecf5 7a01 	vldmia	r5!, {s15}
 80213a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80213a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213ac:	b299      	uxth	r1, r3
 80213ae:	d807      	bhi.n	80213c0 <main+0xe10>
 80213b0:	ed95 5a00 	vldr	s10, [r5]
 80213b4:	eeb4 5ac7 	vcmpe.f32	s10, s14
 80213b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213bc:	f280 80f3 	bge.w	80215a6 <main+0xff6>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 80213c0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80213c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213c8:	d807      	bhi.n	80213da <main+0xe2a>
 80213ca:	ed95 5a00 	vldr	s10, [r5]
 80213ce:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80213d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213d6:	f280 80ea 	bge.w	80215ae <main+0xffe>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 80213da:	eef4 7ac6 	vcmpe.f32	s15, s12
 80213de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213e2:	d807      	bhi.n	80213f4 <main+0xe44>
 80213e4:	ed95 5a00 	vldr	s10, [r5]
 80213e8:	eeb4 5ac6 	vcmpe.f32	s10, s12
 80213ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213f0:	f280 80e1 	bge.w	80215b6 <main+0x1006>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 80213f4:	eef4 7ae5 	vcmpe.f32	s15, s11
 80213f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213fc:	d808      	bhi.n	8021410 <main+0xe60>
 80213fe:	edd5 7a00 	vldr	s15, [r5]
			PARGraph_IR = i;
 8021402:	eef4 7a65 	vcmp.f32	s15, s11
 8021406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802140a:	bfa4      	itt	ge
 802140c:	4608      	movge	r0, r1
 802140e:	2401      	movge	r4, #1
 8021410:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++){
 8021412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021416:	d1c3      	bne.n	80213a0 <main+0xdf0>
 8021418:	f1b9 0f00 	cmp.w	r9, #0
 802141c:	d002      	beq.n	8021424 <main+0xe74>
 802141e:	4b1a      	ldr	r3, [pc, #104]	; (8021488 <main+0xed8>)
 8021420:	f8a3 8000 	strh.w	r8, [r3]
 8021424:	f1bc 0f00 	cmp.w	ip, #0
 8021428:	d002      	beq.n	8021430 <main+0xe80>
 802142a:	4b15      	ldr	r3, [pc, #84]	; (8021480 <main+0xed0>)
 802142c:	f8a3 e000 	strh.w	lr, [r3]
 8021430:	b10f      	cbz	r7, 8021436 <main+0xe86>
 8021432:	f8aa 6000 	strh.w	r6, [sl]
 8021436:	b104      	cbz	r4, 802143a <main+0xe8a>
 8021438:	8010      	strh	r0, [r2, #0]
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 802143a:	4b18      	ldr	r3, [pc, #96]	; (802149c <main+0xeec>)
 802143c:	4a18      	ldr	r2, [pc, #96]	; (80214a0 <main+0xef0>)
 802143e:	edd3 7a00 	vldr	s15, [r3]
 8021442:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80214a4 <main+0xef4>
 8021446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802144a:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 802144e:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
 8021452:	e029      	b.n	80214a8 <main+0xef8>
 8021454:	40490000 	.word	0x40490000
 8021458:	08100800 	.word	0x08100800
 802145c:	0812a048 	.word	0x0812a048
 8021460:	20090f78 	.word	0x20090f78
 8021464:	20090f8c 	.word	0x20090f8c
 8021468:	0812a04c 	.word	0x0812a04c
 802146c:	20091298 	.word	0x20091298
 8021470:	0812a040 	.word	0x0812a040
 8021474:	20090f7c 	.word	0x20090f7c
 8021478:	20091340 	.word	0x20091340
 802147c:	20091558 	.word	0x20091558
 8021480:	200913f4 	.word	0x200913f4
 8021484:	20091330 	.word	0x20091330
 8021488:	20091332 	.word	0x20091332
 802148c:	43c80000 	.word	0x43c80000
 8021490:	43fa0000 	.word	0x43fa0000
 8021494:	44160000 	.word	0x44160000
 8021498:	442f0000 	.word	0x442f0000
 802149c:	200501ec 	.word	0x200501ec
 80214a0:	200511ec 	.word	0x200511ec
 80214a4:	200055dc 	.word	0x200055dc
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 80214a8:	8011      	strh	r1, [r2, #0]
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 80214aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80214ae:	ee17 1a90 	vmov	r1, s15
 80214b2:	8051      	strh	r1, [r2, #2]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 80214b4:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 80214b8:	edd1 7a00 	vldr	s15, [r1]
 80214bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 80214c0:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 80214c4:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 80214c8:	edd3 7a00 	vldr	s15, [r3]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 80214cc:	8091      	strh	r1, [r2, #4]
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 80214ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80214d2:	ee17 3a90 	vmov	r3, s15
 80214d6:	80d3      	strh	r3, [r2, #6]
	if(Mode_EL == 0){
 80214d8:	4b67      	ldr	r3, [pc, #412]	; (8021678 <main+0x10c8>)
 80214da:	781a      	ldrb	r2, [r3, #0]
 80214dc:	4b67      	ldr	r3, [pc, #412]	; (802167c <main+0x10cc>)
 80214de:	2a00      	cmp	r2, #0
 80214e0:	d16c      	bne.n	80215bc <main+0x100c>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 80214e2:	4a67      	ldr	r2, [pc, #412]	; (8021680 <main+0x10d0>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 80214e4:	ed93 0a00 	vldr	s0, [r3]
 80214e8:	edd2 0a00 	vldr	s1, [r2]
 80214ec:	f7fa ff64 	bl	801c3b8 <Rabs_calc_Factor2_Settings_change>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 80214f0:	4b64      	ldr	r3, [pc, #400]	; (8021684 <main+0x10d4>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 80214f2:	ed89 0a00 	vstr	s0, [r9]
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 80214f6:	781b      	ldrb	r3, [r3, #0]
 80214f8:	4863      	ldr	r0, [pc, #396]	; (8021688 <main+0x10d8>)
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	d160      	bne.n	80215c0 <main+0x1010>
 80214fe:	f000 fc29 	bl	8021d54 <HAL_UART_MspDeInit>
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 8021502:	2103      	movs	r1, #3
 8021504:	4861      	ldr	r0, [pc, #388]	; (802168c <main+0x10dc>)
 8021506:	4c62      	ldr	r4, [pc, #392]	; (8021690 <main+0x10e0>)
 8021508:	f7ed fee4 	bl	800f2d4 <Calibration_Load_1byte>
 802150c:	7020      	strb	r0, [r4, #0]
	Calculate_Data();
 802150e:	f7fd fff1 	bl	801f4f4 <Calculate_Data>
	Get_Battery_Level();
 8021512:	f7fe f925 	bl	801f760 <Get_Battery_Level>
	HAL_Delay(1);
 8021516:	2001      	movs	r0, #1
 8021518:	f7df fd88 	bl	800102c <HAL_Delay>
	Image_load(TKA_LOGO_BMP, TKA_LOGO_BMP_SIZEX*TKA_LOGO_BMP_SIZEY);
 802151c:	f64b 61e6 	movw	r1, #48870	; 0xbee6
 8021520:	2000      	movs	r0, #0
 8021522:	f7fa ff17 	bl	801c354 <Image_load>
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 8021526:	4a5b      	ldr	r2, [pc, #364]	; (8021694 <main+0x10e4>)
 8021528:	f245 410a 	movw	r1, #21514	; 0x540a
 802152c:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8021530:	f7ea ff94 	bl	800c45c <CRC_Check>
 8021534:	4b58      	ldr	r3, [pc, #352]	; (8021698 <main+0x10e8>)
 8021536:	46a0      	mov	r8, r4
 8021538:	7018      	strb	r0, [r3, #0]
	if(CRC_STATUS == CRC_OK)
 802153a:	2800      	cmp	r0, #0
 802153c:	d143      	bne.n	80215c6 <main+0x1016>
		GUI_Title_Screen();
 802153e:	f7ee f89b 	bl	800f678 <GUI_Title_Screen>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8021542:	4c56      	ldr	r4, [pc, #344]	; (802169c <main+0x10ec>)
		HAL_Delay(2000);	
 8021544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8021548:	f7df fd70 	bl	800102c <HAL_Delay>
		usb_receive_processing();
 802154c:	f7fe fb4a 	bl	801fbe4 <usb_receive_processing>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8021550:	7823      	ldrb	r3, [r4, #0]
 8021552:	07d8      	lsls	r0, r3, #31
 8021554:	d53c      	bpl.n	80215d0 <main+0x1020>
 8021556:	4b52      	ldr	r3, [pc, #328]	; (80216a0 <main+0x10f0>)
 8021558:	4852      	ldr	r0, [pc, #328]	; (80216a4 <main+0x10f4>)
 802155a:	781b      	ldrb	r3, [r3, #0]
 802155c:	f013 0f01 	tst.w	r3, #1
 8021560:	bf18      	it	ne
 8021562:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8021566:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 802156a:	f7fa fef3 	bl	801c354 <Image_load>
		Locus.pData = (uint16_t *)bmp;
 802156e:	4b4e      	ldr	r3, [pc, #312]	; (80216a8 <main+0x10f8>)
 8021570:	4a4e      	ldr	r2, [pc, #312]	; (80216ac <main+0x10fc>)
 8021572:	605a      	str	r2, [r3, #4]
		Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8021574:	7822      	ldrb	r2, [r4, #0]
 8021576:	f002 0101 	and.w	r1, r2, #1
 802157a:	2900      	cmp	r1, #0
 802157c:	bf14      	ite	ne
 802157e:	21d8      	movne	r1, #216	; 0xd8
 8021580:	21fa      	moveq	r1, #250	; 0xfa
 8021582:	8019      	strh	r1, [r3, #0]
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8021584:	d132      	bne.n	80215ec <main+0x103c>
 8021586:	f012 0f04 	tst.w	r2, #4
 802158a:	bf0c      	ite	eq
 802158c:	22fa      	moveq	r2, #250	; 0xfa
 802158e:	22ea      	movne	r2, #234	; 0xea
 8021590:	805a      	strh	r2, [r3, #2]
		switch(GUI_screen_state){
 8021592:	f898 3000 	ldrb.w	r3, [r8]
 8021596:	3b01      	subs	r3, #1
 8021598:	2b05      	cmp	r3, #5
 802159a:	d85d      	bhi.n	8021658 <main+0x10a8>
 802159c:	e8df f003 	tbb	[pc, r3]
 80215a0:	4a40285f 	.word	0x4a40285f
 80215a4:	5650      	.short	0x5650
			PARGraph_B = i;
 80215a6:	4688      	mov	r8, r1
 80215a8:	f04f 0901 	mov.w	r9, #1
 80215ac:	e730      	b.n	8021410 <main+0xe60>
			PARGraph_G = i;
 80215ae:	468e      	mov	lr, r1
 80215b0:	f04f 0c01 	mov.w	ip, #1
 80215b4:	e72c      	b.n	8021410 <main+0xe60>
			PARGraph_R = i;
 80215b6:	460e      	mov	r6, r1
 80215b8:	2701      	movs	r7, #1
 80215ba:	e729      	b.n	8021410 <main+0xe60>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 80215bc:	4a3c      	ldr	r2, [pc, #240]	; (80216b0 <main+0x1100>)
 80215be:	e791      	b.n	80214e4 <main+0xf34>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 80215c0:	f000 fb7c 	bl	8021cbc <HAL_UART_MspInit>
 80215c4:	e79d      	b.n	8021502 <main+0xf52>
	} else{TFT_FillScreen_DMA(TFT_Red);}
 80215c6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80215ca:	f7fd f82d 	bl	801e628 <TFT_FillScreen_DMA>
 80215ce:	e7b8      	b.n	8021542 <main+0xf92>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 80215d0:	f003 0304 	and.w	r3, r3, #4
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	4b37      	ldr	r3, [pc, #220]	; (80216b4 <main+0x1104>)
 80215d8:	4837      	ldr	r0, [pc, #220]	; (80216b8 <main+0x1108>)
 80215da:	bf08      	it	eq
 80215dc:	4618      	moveq	r0, r3
 80215de:	f24f 4324 	movw	r3, #62500	; 0xf424
 80215e2:	f24e 4184 	movw	r1, #58500	; 0xe484
 80215e6:	bf08      	it	eq
 80215e8:	4619      	moveq	r1, r3
 80215ea:	e7be      	b.n	802156a <main+0xfba>
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 80215ec:	22fa      	movs	r2, #250	; 0xfa
 80215ee:	e7cf      	b.n	8021590 <main+0xfe0>
		case Measure2_Screen: preGUI_screen_state = Measure_Screen; GUI_Measure2_Screen();  break;
 80215f0:	4b32      	ldr	r3, [pc, #200]	; (80216bc <main+0x110c>)
 80215f2:	2201      	movs	r2, #1
 80215f4:	701a      	strb	r2, [r3, #0]
 80215f6:	f7ef f979 	bl	80108ec <GUI_Measure2_Screen>
  htim7.Instance = TIM7;
 80215fa:	4c31      	ldr	r4, [pc, #196]	; (80216c0 <main+0x1110>)
  htim7.Init.Prescaler = 60000;
 80215fc:	4931      	ldr	r1, [pc, #196]	; (80216c4 <main+0x1114>)
 80215fe:	f64e 2260 	movw	r2, #60000	; 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021602:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 60000;
 8021604:	e884 0006 	stmia.w	r4, {r1, r2}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8021608:	4620      	mov	r0, r4
  htim7.Init.Period = 200;
 802160a:	22c8      	movs	r2, #200	; 0xc8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802160c:	9319      	str	r3, [sp, #100]	; 0x64
 802160e:	931a      	str	r3, [sp, #104]	; 0x68
 8021610:	931b      	str	r3, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021612:	60a3      	str	r3, [r4, #8]
  htim7.Init.Period = 200;
 8021614:	60e2      	str	r2, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021616:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8021618:	f7e4 fe86 	bl	8006328 <HAL_TIM_Base_Init>
 802161c:	b310      	cbz	r0, 8021664 <main+0x10b4>
 802161e:	e7fe      	b.n	802161e <main+0x106e>
		case Measure3_Screen: preGUI_screen_state = Measure2_Screen; GUI_Measure_Screen(); GUI_Measure2_Screen();GUI_Measure3_Screen();  break;
 8021620:	4b26      	ldr	r3, [pc, #152]	; (80216bc <main+0x110c>)
 8021622:	2202      	movs	r2, #2
 8021624:	701a      	strb	r2, [r3, #0]
 8021626:	f7ef f933 	bl	8010890 <GUI_Measure_Screen>
 802162a:	f7ef f95f 	bl	80108ec <GUI_Measure2_Screen>
 802162e:	f7ef f995 	bl	801095c <GUI_Measure3_Screen>
 8021632:	e7e2      	b.n	80215fa <main+0x104a>
		case Graph_Screen: preGUI_screen_state = Measure_Screen; GUI_Graph_Screen(); break;
 8021634:	4b21      	ldr	r3, [pc, #132]	; (80216bc <main+0x110c>)
 8021636:	2201      	movs	r2, #1
 8021638:	701a      	strb	r2, [r3, #0]
 802163a:	f7ee ff8d 	bl	8010558 <GUI_Graph_Screen>
 802163e:	e7dc      	b.n	80215fa <main+0x104a>
		case Color_Screen: preGUI_screen_state = ColorSet1_Screen; GUI_Color_Screen();  break; 
 8021640:	4b1e      	ldr	r3, [pc, #120]	; (80216bc <main+0x110c>)
 8021642:	220e      	movs	r2, #14
 8021644:	701a      	strb	r2, [r3, #0]
 8021646:	f7ef f9bf 	bl	80109c8 <GUI_Color_Screen>
 802164a:	e7d6      	b.n	80215fa <main+0x104a>
		case Color_Rendition_Screen: preGUI_screen_state = Measure_Screen; GUI_ColorRend_Screen();break;
 802164c:	4b1b      	ldr	r3, [pc, #108]	; (80216bc <main+0x110c>)
 802164e:	2201      	movs	r2, #1
 8021650:	701a      	strb	r2, [r3, #0]
 8021652:	f7ef fd27 	bl	80110a4 <GUI_ColorRend_Screen>
 8021656:	e7d0      	b.n	80215fa <main+0x104a>
		default: GUI_screen_state =  Measure_Screen; GUI_Measure_Screen();  break;
 8021658:	2301      	movs	r3, #1
 802165a:	f888 3000 	strb.w	r3, [r8]
 802165e:	f7ef f917 	bl	8010890 <GUI_Measure_Screen>
 8021662:	e7ca      	b.n	80215fa <main+0x104a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021664:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021666:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8021668:	a919      	add	r1, sp, #100	; 0x64
 802166a:	4620      	mov	r0, r4
 802166c:	f7e5 f8dc 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 8021670:	4607      	mov	r7, r0
 8021672:	b348      	cbz	r0, 80216c8 <main+0x1118>
 8021674:	e7fe      	b.n	8021674 <main+0x10c4>
 8021676:	bf00      	nop
 8021678:	20000a48 	.word	0x20000a48
 802167c:	200055d4 	.word	0x200055d4
 8021680:	200055d0 	.word	0x200055d0
 8021684:	2008c322 	.word	0x2008c322
 8021688:	20091168 	.word	0x20091168
 802168c:	0812c020 	.word	0x0812c020
 8021690:	20005279 	.word	0x20005279
 8021694:	0812a050 	.word	0x0812a050
 8021698:	20090f7a 	.word	0x20090f7a
 802169c:	20005277 	.word	0x20005277
 80216a0:	2000527c 	.word	0x2000527c
 80216a4:	00051d00 	.word	0x00051d00
 80216a8:	2008c8b8 	.word	0x2008c8b8
 80216ac:	200511f6 	.word	0x200511f6
 80216b0:	200055cc 	.word	0x200055cc
 80216b4:	00018100 	.word	0x00018100
 80216b8:	0006ca00 	.word	0x0006ca00
 80216bc:	2000022a 	.word	0x2000022a
 80216c0:	20091518 	.word	0x20091518
 80216c4:	40001400 	.word	0x40001400
	HAL_Delay(1);
 80216c8:	2001      	movs	r0, #1
 80216ca:	f7df fcaf 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80216ce:	2037      	movs	r0, #55	; 0x37
 80216d0:	f7e0 fa42 	bl	8001b58 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80216d4:	2046      	movs	r0, #70	; 0x46
 80216d6:	f7e0 fa3f 	bl	8001b58 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 80216da:	2001      	movs	r0, #1
 80216dc:	f7df fca6 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start(&htim7);
 80216e0:	4620      	mov	r0, r4
 80216e2:	f7e4 fcd3 	bl	800608c <HAL_TIM_Base_Start>
	HAL_Delay(1);
 80216e6:	2001      	movs	r0, #1
 80216e8:	f7df fca0 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 80216ec:	4620      	mov	r0, r4
 80216ee:	f7e4 fce7 	bl	80060c0 <HAL_TIM_Base_Start_IT>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 80216f2:	4c91      	ldr	r4, [pc, #580]	; (8021938 <main+0x1388>)
	uint8_t exp_stable = 0, start = 1;
 80216f4:	2301      	movs	r3, #1
	uint32_t cnt_delay = 0, scr_refresh = 0;
 80216f6:	463e      	mov	r6, r7
	uint8_t exp_stable = 0, start = 1;
 80216f8:	9303      	str	r3, [sp, #12]
 80216fa:	46bb      	mov	fp, r7
	 if(send_bluetooth) 
 80216fc:	4d8f      	ldr	r5, [pc, #572]	; (802193c <main+0x138c>)
   usb_receive_processing();
 80216fe:	f7fe fa71 	bl	801fbe4 <usb_receive_processing>
	 if(send_bluetooth) 
 8021702:	782b      	ldrb	r3, [r5, #0]
 8021704:	b13b      	cbz	r3, 8021716 <main+0x1166>
			HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*)&data_bluetooth_send, 4122);
 8021706:	f241 021a 	movw	r2, #4122	; 0x101a
 802170a:	498d      	ldr	r1, [pc, #564]	; (8021940 <main+0x1390>)
 802170c:	488d      	ldr	r0, [pc, #564]	; (8021944 <main+0x1394>)
 802170e:	f7e5 f8fd 	bl	800690c <HAL_UART_Transmit_DMA>
			send_bluetooth = 0;
 8021712:	2300      	movs	r3, #0
 8021714:	702b      	strb	r3, [r5, #0]
 8021716:	f8df a270 	ldr.w	sl, [pc, #624]	; 8021988 <main+0x13d8>
		while(start)
 802171a:	9b03      	ldr	r3, [sp, #12]
 802171c:	1c75      	adds	r5, r6, #1
 802171e:	2b00      	cmp	r3, #0
 8021720:	d174      	bne.n	802180c <main+0x125c>
		if(!exp_set){
 8021722:	4b89      	ldr	r3, [pc, #548]	; (8021948 <main+0x1398>)
 8021724:	781b      	ldrb	r3, [r3, #0]
 8021726:	b993      	cbnz	r3, 802174e <main+0x119e>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8021728:	4b88      	ldr	r3, [pc, #544]	; (802194c <main+0x139c>)
 802172a:	4e89      	ldr	r6, [pc, #548]	; (8021950 <main+0x13a0>)
 802172c:	4989      	ldr	r1, [pc, #548]	; (8021954 <main+0x13a4>)
 802172e:	ed93 0a00 	vldr	s0, [r3]
 8021732:	8830      	ldrh	r0, [r6, #0]
 8021734:	f7fa fe44 	bl	801c3c0 <Rabs_calc_Factor1>
 8021738:	4b87      	ldr	r3, [pc, #540]	; (8021958 <main+0x13a8>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 802173a:	4a88      	ldr	r2, [pc, #544]	; (802195c <main+0x13ac>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 802173c:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 8021740:	edd9 0a00 	vldr	s1, [r9]
 8021744:	4b86      	ldr	r3, [pc, #536]	; (8021960 <main+0x13b0>)
 8021746:	8831      	ldrh	r1, [r6, #0]
 8021748:	4882      	ldr	r0, [pc, #520]	; (8021954 <main+0x13a4>)
 802174a:	f7fa fe6d 	bl	801c428 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 802174e:	f89a 3000 	ldrb.w	r3, [sl]
 8021752:	b92b      	cbnz	r3, 8021760 <main+0x11b0>
 8021754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8021758:	4981      	ldr	r1, [pc, #516]	; (8021960 <main+0x13b0>)
 802175a:	4882      	ldr	r0, [pc, #520]	; (8021964 <main+0x13b4>)
 802175c:	f000 ffc4 	bl	80226e8 <memcpy>
			exp_start = 0;
 8021760:	4b81      	ldr	r3, [pc, #516]	; (8021968 <main+0x13b8>)
 8021762:	2200      	movs	r2, #0
 8021764:	701a      	strb	r2, [r3, #0]
		if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen) && !pause)
 8021766:	f898 3000 	ldrb.w	r3, [r8]
 802176a:	1e5a      	subs	r2, r3, #1
 802176c:	2a02      	cmp	r2, #2
 802176e:	f200 80a6 	bhi.w	80218be <main+0x130e>
 8021772:	4b7e      	ldr	r3, [pc, #504]	; (802196c <main+0x13bc>)
 8021774:	781b      	ldrb	r3, [r3, #0]
 8021776:	2b00      	cmp	r3, #0
 8021778:	f040 80c2 	bne.w	8021900 <main+0x1350>
			if(!pause & !exp_set){Calculate_Data();}
 802177c:	4b72      	ldr	r3, [pc, #456]	; (8021948 <main+0x1398>)
 802177e:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 8021780:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 8021782:	b90b      	cbnz	r3, 8021788 <main+0x11d8>
 8021784:	f7fd feb6 	bl	801f4f4 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 8021788:	2d28      	cmp	r5, #40	; 0x28
 802178a:	d908      	bls.n	802179e <main+0x11ee>
 802178c:	7823      	ldrb	r3, [r4, #0]
 802178e:	2b05      	cmp	r3, #5
 8021790:	f200 8086 	bhi.w	80218a0 <main+0x12f0>
								auto_exposure();
 8021794:	f7fe fbfa 	bl	801ff8c <auto_exposure>
								max_el = 0;
 8021798:	4b75      	ldr	r3, [pc, #468]	; (8021970 <main+0x13c0>)
 802179a:	2600      	movs	r6, #0
 802179c:	801e      	strh	r6, [r3, #0]
        if(GUI_screen_state == Graph_Screen)
 802179e:	f898 3000 	ldrb.w	r3, [r8]
 80217a2:	2b04      	cmp	r3, #4
 80217a4:	f040 80c6 	bne.w	8021934 <main+0x1384>
            scr_refresh++;
 80217a8:	3701      	adds	r7, #1
            if(scr_refresh > 40 ){
 80217aa:	2f28      	cmp	r7, #40	; 0x28
 80217ac:	d92b      	bls.n	8021806 <main+0x1256>
							block_graph = 1;
 80217ae:	2301      	movs	r3, #1
 80217b0:	f88a 3000 	strb.w	r3, [sl]
								if(preGUI_screen_state == Graph_Screen && Rotation_Screen_Spectral_Old3 == Rotation_Screen_Spectral){ Refresh_screen_Graph(20, 20, Line_Rabs_buff_graph2, Rotation_Screen_Spectral_Old3);}
 80217b4:	4b6f      	ldr	r3, [pc, #444]	; (8021974 <main+0x13c4>)
 80217b6:	4d70      	ldr	r5, [pc, #448]	; (8021978 <main+0x13c8>)
 80217b8:	781b      	ldrb	r3, [r3, #0]
 80217ba:	4f70      	ldr	r7, [pc, #448]	; (802197c <main+0x13cc>)
 80217bc:	2b04      	cmp	r3, #4
 80217be:	d108      	bne.n	80217d2 <main+0x1222>
 80217c0:	782a      	ldrb	r2, [r5, #0]
 80217c2:	783b      	ldrb	r3, [r7, #0]
 80217c4:	4293      	cmp	r3, r2
 80217c6:	d104      	bne.n	80217d2 <main+0x1222>
 80217c8:	2114      	movs	r1, #20
 80217ca:	4a6d      	ldr	r2, [pc, #436]	; (8021980 <main+0x13d0>)
 80217cc:	4608      	mov	r0, r1
 80217ce:	f7fc fc5d 	bl	801e08c <Refresh_screen_Graph>
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 80217d2:	7839      	ldrb	r1, [r7, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 80217d4:	4863      	ldr	r0, [pc, #396]	; (8021964 <main+0x13b4>)
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 80217d6:	7029      	strb	r1, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 80217d8:	f7fa fe54 	bl	801c484 <Rabs_find_MAX>
 80217dc:	4b69      	ldr	r3, [pc, #420]	; (8021984 <main+0x13d4>)
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 80217de:	4961      	ldr	r1, [pc, #388]	; (8021964 <main+0x13b4>)
 80217e0:	7828      	ldrb	r0, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 80217e2:	ed83 0a00 	vstr	s0, [r3]
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 80217e6:	f7fc fbff 	bl	801dfe8 <Rabs_graph_to_display>
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 80217ea:	782b      	ldrb	r3, [r5, #0]
 80217ec:	9300      	str	r3, [sp, #0]
 80217ee:	2114      	movs	r1, #20
 80217f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80217f4:	4a62      	ldr	r2, [pc, #392]	; (8021980 <main+0x13d0>)
 80217f6:	4608      	mov	r0, r1
								block_graph = 0;
 80217f8:	2700      	movs	r7, #0
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 80217fa:	f7fc fb59 	bl	801deb0 <Spectral_DrawGraph_Line2>
								block_graph = 0;
 80217fe:	f88a 7000 	strb.w	r7, [sl]
								GUI_SignalLevel();
 8021802:	f7ee ffe3 	bl	80107cc <GUI_SignalLevel>
        GUI_Display_Refresh();
 8021806:	f7ef fceb 	bl	80111e0 <GUI_Display_Refresh>
   usb_receive_processing();
 802180a:	e777      	b.n	80216fc <main+0x114c>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 802180c:	4b4f      	ldr	r3, [pc, #316]	; (802194c <main+0x139c>)
 802180e:	4e50      	ldr	r6, [pc, #320]	; (8021950 <main+0x13a0>)
 8021810:	4950      	ldr	r1, [pc, #320]	; (8021954 <main+0x13a4>)
 8021812:	ed93 0a00 	vldr	s0, [r3]
 8021816:	8830      	ldrh	r0, [r6, #0]
 8021818:	f7fa fdd2 	bl	801c3c0 <Rabs_calc_Factor1>
 802181c:	4b4e      	ldr	r3, [pc, #312]	; (8021958 <main+0x13a8>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 802181e:	4a4f      	ldr	r2, [pc, #316]	; (802195c <main+0x13ac>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8021820:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 8021824:	edd9 0a00 	vldr	s1, [r9]
 8021828:	4b4d      	ldr	r3, [pc, #308]	; (8021960 <main+0x13b0>)
 802182a:	8831      	ldrh	r1, [r6, #0]
 802182c:	4849      	ldr	r0, [pc, #292]	; (8021954 <main+0x13a4>)
 802182e:	f7fa fdfb 	bl	801c428 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 8021832:	f89a 3000 	ldrb.w	r3, [sl]
 8021836:	b92b      	cbnz	r3, 8021844 <main+0x1294>
 8021838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802183c:	4948      	ldr	r1, [pc, #288]	; (8021960 <main+0x13b0>)
 802183e:	4849      	ldr	r0, [pc, #292]	; (8021964 <main+0x13b4>)
 8021840:	f000 ff52 	bl	80226e8 <memcpy>
			Calculate_Data();
 8021844:	f7fd fe56 	bl	801f4f4 <Calculate_Data>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 8021848:	2d14      	cmp	r5, #20
			cnt_delay++;
 802184a:	462e      	mov	r6, r5
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 802184c:	f67f af65 	bls.w	802171a <main+0x116a>
 8021850:	7823      	ldrb	r3, [r4, #0]
 8021852:	2b05      	cmp	r3, #5
 8021854:	d910      	bls.n	8021878 <main+0x12c8>
 8021856:	2d32      	cmp	r5, #50	; 0x32
 8021858:	f67f af5f 	bls.w	802171a <main+0x116a>
 802185c:	7823      	ldrb	r3, [r4, #0]
 802185e:	2b05      	cmp	r3, #5
 8021860:	d902      	bls.n	8021868 <main+0x12b8>
 8021862:	7823      	ldrb	r3, [r4, #0]
 8021864:	2b07      	cmp	r3, #7
 8021866:	d907      	bls.n	8021878 <main+0x12c8>
 8021868:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 802186c:	f67f af55 	bls.w	802171a <main+0x116a>
 8021870:	7823      	ldrb	r3, [r4, #0]
 8021872:	2b07      	cmp	r3, #7
 8021874:	f67f af51 	bls.w	802171a <main+0x116a>
								auto_exposure();
 8021878:	f7fe fb88 	bl	801ff8c <auto_exposure>
								max_el = 0;
 802187c:	4b3c      	ldr	r3, [pc, #240]	; (8021970 <main+0x13c0>)
 802187e:	2600      	movs	r6, #0
 8021880:	801e      	strh	r6, [r3, #0]
								exp_stable = exp_stable+1;
 8021882:	f10b 0301 	add.w	r3, fp, #1
 8021886:	fa5f fb83 	uxtb.w	fp, r3
								exp_start = 1;
 802188a:	4b37      	ldr	r3, [pc, #220]	; (8021968 <main+0x13b8>)
 802188c:	f1bb 0f0a 	cmp.w	fp, #10
 8021890:	f04f 0201 	mov.w	r2, #1
 8021894:	701a      	strb	r2, [r3, #0]
 8021896:	bf8c      	ite	hi
 8021898:	2300      	movhi	r3, #0
 802189a:	2301      	movls	r3, #1
 802189c:	9303      	str	r3, [sp, #12]
 802189e:	e73c      	b.n	802171a <main+0x116a>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 80218a0:	2d46      	cmp	r5, #70	; 0x46
 80218a2:	f67f af7c 	bls.w	802179e <main+0x11ee>
 80218a6:	7823      	ldrb	r3, [r4, #0]
 80218a8:	2b05      	cmp	r3, #5
 80218aa:	d903      	bls.n	80218b4 <main+0x1304>
 80218ac:	7823      	ldrb	r3, [r4, #0]
 80218ae:	2b07      	cmp	r3, #7
 80218b0:	f67f af70 	bls.w	8021794 <main+0x11e4>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 80218b4:	7823      	ldrb	r3, [r4, #0]
 80218b6:	2b07      	cmp	r3, #7
 80218b8:	f63f af6c 	bhi.w	8021794 <main+0x11e4>
 80218bc:	e76f      	b.n	802179e <main+0x11ee>
		else	if((GUI_screen_state == Color_Screen) && !pause)
 80218be:	2b05      	cmp	r3, #5
 80218c0:	d11e      	bne.n	8021900 <main+0x1350>
 80218c2:	4b2a      	ldr	r3, [pc, #168]	; (802196c <main+0x13bc>)
 80218c4:	781b      	ldrb	r3, [r3, #0]
 80218c6:	b9db      	cbnz	r3, 8021900 <main+0x1350>
			if(!pause & !exp_set){Calculate_Data();}
 80218c8:	4b1f      	ldr	r3, [pc, #124]	; (8021948 <main+0x1398>)
 80218ca:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 80218cc:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 80218ce:	bb7b      	cbnz	r3, 8021930 <main+0x1380>
 80218d0:	f7fd fe10 	bl	801f4f4 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 80218d4:	2d28      	cmp	r5, #40	; 0x28
 80218d6:	f67f af62 	bls.w	802179e <main+0x11ee>
 80218da:	7823      	ldrb	r3, [r4, #0]
 80218dc:	2b05      	cmp	r3, #5
 80218de:	f67f af59 	bls.w	8021794 <main+0x11e4>
 80218e2:	2d46      	cmp	r5, #70	; 0x46
 80218e4:	f67f af5b 	bls.w	802179e <main+0x11ee>
 80218e8:	7823      	ldrb	r3, [r4, #0]
 80218ea:	2b05      	cmp	r3, #5
 80218ec:	d903      	bls.n	80218f6 <main+0x1346>
 80218ee:	7823      	ldrb	r3, [r4, #0]
 80218f0:	2b07      	cmp	r3, #7
 80218f2:	f67f af4f 	bls.w	8021794 <main+0x11e4>
 80218f6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 80218fa:	f67f af50 	bls.w	802179e <main+0x11ee>
 80218fe:	e7d9      	b.n	80218b4 <main+0x1304>
 8021900:	2dfa      	cmp	r5, #250	; 0xfa
				cnt_delay++;
 8021902:	462e      	mov	r6, r5
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 8021904:	f67f af4b 	bls.w	802179e <main+0x11ee>
 8021908:	7823      	ldrb	r3, [r4, #0]
 802190a:	2b05      	cmp	r3, #5
 802190c:	f67f af42 	bls.w	8021794 <main+0x11e4>
 8021910:	f240 33b6 	movw	r3, #950	; 0x3b6
 8021914:	429d      	cmp	r5, r3
 8021916:	f67f af42 	bls.w	802179e <main+0x11ee>
 802191a:	7823      	ldrb	r3, [r4, #0]
 802191c:	2b05      	cmp	r3, #5
 802191e:	d903      	bls.n	8021928 <main+0x1378>
 8021920:	7823      	ldrb	r3, [r4, #0]
 8021922:	2b07      	cmp	r3, #7
 8021924:	f67f af36 	bls.w	8021794 <main+0x11e4>
 8021928:	f240 53aa 	movw	r3, #1450	; 0x5aa
 802192c:	429d      	cmp	r5, r3
 802192e:	e7e4      	b.n	80218fa <main+0x134a>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 8021930:	2d28      	cmp	r5, #40	; 0x28
 8021932:	d8d2      	bhi.n	80218da <main+0x132a>
        } else{__asm("nop");}
 8021934:	bf00      	nop
 8021936:	e766      	b.n	8021806 <main+0x1256>
 8021938:	2008be5a 	.word	0x2008be5a
 802193c:	2008be6c 	.word	0x2008be6c
 8021940:	2008ae40 	.word	0x2008ae40
 8021944:	20091168 	.word	0x20091168
 8021948:	20000a4c 	.word	0x20000a4c
 802194c:	2004d1e4 	.word	0x2004d1e4
 8021950:	200055ca 	.word	0x200055ca
 8021954:	20009de4 	.word	0x20009de4
 8021958:	200055d8 	.word	0x200055d8
 802195c:	2004d1e8 	.word	0x2004d1e8
 8021960:	20007de4 	.word	0x20007de4
 8021964:	20008de4 	.word	0x20008de4
 8021968:	20000a4d 	.word	0x20000a4d
 802196c:	200052a0 	.word	0x200052a0
 8021970:	2008be68 	.word	0x2008be68
 8021974:	2000022a 	.word	0x2000022a
 8021978:	20000a49 	.word	0x20000a49
 802197c:	20005282 	.word	0x20005282
 8021980:	200052d8 	.word	0x200052d8
 8021984:	20091348 	.word	0x20091348
 8021988:	200511f5 	.word	0x200511f5

0802198c <_Error_Handler>:
}
void _Error_Handler(char *file, int line)
{
 802198c:	e7fe      	b.n	802198c <_Error_Handler>
	...

08021990 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8021990:	b538      	push	{r3, r4, r5, lr}
  Stat = STA_NOINIT;
 8021992:	4c0a      	ldr	r4, [pc, #40]	; (80219bc <SD_initialize+0x2c>)
 8021994:	2501      	movs	r5, #1
 8021996:	7025      	strb	r5, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8021998:	f7fc fda2 	bl	801e4e0 <BSP_SD_Init>
 802199c:	b108      	cbz	r0, 80219a2 <SD_initialize+0x12>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 802199e:	7820      	ldrb	r0, [r4, #0]
}
 80219a0:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80219a2:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80219a4:	f7fc fdd6 	bl	801e554 <BSP_SD_GetCardState>
 80219a8:	b918      	cbnz	r0, 80219b2 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 80219aa:	7823      	ldrb	r3, [r4, #0]
 80219ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80219b0:	7023      	strb	r3, [r4, #0]
  return Stat;
 80219b2:	7823      	ldrb	r3, [r4, #0]
 80219b4:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80219b6:	7023      	strb	r3, [r4, #0]
  return Stat;
 80219b8:	7820      	ldrb	r0, [r4, #0]
}
 80219ba:	bd38      	pop	{r3, r4, r5, pc}
 80219bc:	20000a4f 	.word	0x20000a4f

080219c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80219c0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80219c2:	4c06      	ldr	r4, [pc, #24]	; (80219dc <SD_status+0x1c>)
 80219c4:	2301      	movs	r3, #1
 80219c6:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80219c8:	f7fc fdc4 	bl	801e554 <BSP_SD_GetCardState>
 80219cc:	b918      	cbnz	r0, 80219d6 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 80219ce:	7823      	ldrb	r3, [r4, #0]
 80219d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80219d4:	7023      	strb	r3, [r4, #0]
  return Stat;
 80219d6:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 80219d8:	bd10      	pop	{r4, pc}
 80219da:	bf00      	nop
 80219dc:	20000a4f 	.word	0x20000a4f

080219e0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80219e0:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 80219e2:	4c16      	ldr	r4, [pc, #88]	; (8021a3c <SD_read+0x5c>)
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80219e4:	4608      	mov	r0, r1
 80219e6:	4611      	mov	r1, r2
 80219e8:	461a      	mov	r2, r3
  ReadStatus = 0;
 80219ea:	2300      	movs	r3, #0
 80219ec:	6023      	str	r3, [r4, #0]
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80219ee:	f7fc fd95 	bl	801e51c <BSP_SD_ReadBlocks_DMA>
 80219f2:	b108      	cbz	r0, 80219f8 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 80219f4:	2001      	movs	r0, #1
 80219f6:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 80219f8:	f7df fb12 	bl	8001020 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80219fc:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 8021a00:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021a02:	e004      	b.n	8021a0e <SD_read+0x2e>
 8021a04:	f7df fb0c 	bl	8001020 <HAL_GetTick>
 8021a08:	1b80      	subs	r0, r0, r6
 8021a0a:	42a8      	cmp	r0, r5
 8021a0c:	d802      	bhi.n	8021a14 <SD_read+0x34>
 8021a0e:	6823      	ldr	r3, [r4, #0]
 8021a10:	2b00      	cmp	r3, #0
 8021a12:	d0f7      	beq.n	8021a04 <SD_read+0x24>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 8021a14:	6823      	ldr	r3, [r4, #0]
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d0ec      	beq.n	80219f4 <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 8021a1a:	2300      	movs	r3, #0
 8021a1c:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 8021a1e:	f7df faff 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8021a22:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8021a26:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8021a28:	f7df fafa 	bl	8001020 <HAL_GetTick>
 8021a2c:	1b00      	subs	r0, r0, r4
 8021a2e:	42a8      	cmp	r0, r5
 8021a30:	d8e0      	bhi.n	80219f4 <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8021a32:	f7fc fd8f 	bl	801e554 <BSP_SD_GetCardState>
 8021a36:	2800      	cmp	r0, #0
 8021a38:	d1f6      	bne.n	8021a28 <SD_read+0x48>
      }
    }
  }

  return res;
}
 8021a3a:	bd70      	pop	{r4, r5, r6, pc}
 8021a3c:	2008be74 	.word	0x2008be74

08021a40 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8021a40:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 8021a42:	4c16      	ldr	r4, [pc, #88]	; (8021a9c <SD_write+0x5c>)
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8021a44:	4608      	mov	r0, r1
 8021a46:	4611      	mov	r1, r2
 8021a48:	461a      	mov	r2, r3
  WriteStatus = 0;
 8021a4a:	2300      	movs	r3, #0
 8021a4c:	6023      	str	r3, [r4, #0]
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8021a4e:	f7fc fd73 	bl	801e538 <BSP_SD_WriteBlocks_DMA>
 8021a52:	b108      	cbz	r0, 8021a58 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 8021a54:	2001      	movs	r0, #1
 8021a56:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 8021a58:	f7df fae2 	bl	8001020 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021a5c:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 8021a60:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021a62:	e004      	b.n	8021a6e <SD_write+0x2e>
 8021a64:	f7df fadc 	bl	8001020 <HAL_GetTick>
 8021a68:	1b80      	subs	r0, r0, r6
 8021a6a:	42a8      	cmp	r0, r5
 8021a6c:	d802      	bhi.n	8021a74 <SD_write+0x34>
 8021a6e:	6823      	ldr	r3, [r4, #0]
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d0f7      	beq.n	8021a64 <SD_write+0x24>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 8021a74:	6823      	ldr	r3, [r4, #0]
 8021a76:	2b00      	cmp	r3, #0
 8021a78:	d0ec      	beq.n	8021a54 <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 8021a7e:	f7df facf 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8021a82:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8021a86:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8021a88:	f7df faca 	bl	8001020 <HAL_GetTick>
 8021a8c:	1b00      	subs	r0, r0, r4
 8021a8e:	42a8      	cmp	r0, r5
 8021a90:	d8e0      	bhi.n	8021a54 <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8021a92:	f7fc fd5f 	bl	801e554 <BSP_SD_GetCardState>
 8021a96:	2800      	cmp	r0, #0
 8021a98:	d1f6      	bne.n	8021a88 <SD_write+0x48>
      }
    }
  }

  return res;
}
 8021a9a:	bd70      	pop	{r4, r5, r6, pc}
 8021a9c:	2008be78 	.word	0x2008be78

08021aa0 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8021aa0:	4b14      	ldr	r3, [pc, #80]	; (8021af4 <SD_ioctl+0x54>)
 8021aa2:	781b      	ldrb	r3, [r3, #0]
 8021aa4:	07db      	lsls	r3, r3, #31
 8021aa6:	d501      	bpl.n	8021aac <SD_ioctl+0xc>
 8021aa8:	2003      	movs	r0, #3
 8021aaa:	4770      	bx	lr
{
 8021aac:	b510      	push	{r4, lr}
 8021aae:	4614      	mov	r4, r2
 8021ab0:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 8021ab2:	2903      	cmp	r1, #3
 8021ab4:	d81c      	bhi.n	8021af0 <SD_ioctl+0x50>
 8021ab6:	e8df f001 	tbb	[pc, r1]
 8021aba:	1402      	.short	0x1402
 8021abc:	050d      	.short	0x050d
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8021abe:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8021ac0:	b00a      	add	sp, #40	; 0x28
 8021ac2:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8021ac4:	a801      	add	r0, sp, #4
 8021ac6:	f7fc fd4f 	bl	801e568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8021aca:	9b08      	ldr	r3, [sp, #32]
 8021acc:	0a5b      	lsrs	r3, r3, #9
 8021ace:	6023      	str	r3, [r4, #0]
 8021ad0:	2000      	movs	r0, #0
 8021ad2:	e7f5      	b.n	8021ac0 <SD_ioctl+0x20>
    BSP_SD_GetCardInfo(&CardInfo);
 8021ad4:	a801      	add	r0, sp, #4
 8021ad6:	f7fc fd47 	bl	801e568 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8021ada:	9b08      	ldr	r3, [sp, #32]
 8021adc:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8021ade:	2000      	movs	r0, #0
    break;
 8021ae0:	e7ee      	b.n	8021ac0 <SD_ioctl+0x20>
    BSP_SD_GetCardInfo(&CardInfo);
 8021ae2:	a801      	add	r0, sp, #4
 8021ae4:	f7fc fd40 	bl	801e568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8021ae8:	9b07      	ldr	r3, [sp, #28]
 8021aea:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8021aec:	2000      	movs	r0, #0
    break;
 8021aee:	e7e7      	b.n	8021ac0 <SD_ioctl+0x20>
    res = RES_PARERR;
 8021af0:	2004      	movs	r0, #4
 8021af2:	e7e5      	b.n	8021ac0 <SD_ioctl+0x20>
 8021af4:	20000a4f 	.word	0x20000a4f

08021af8 <HAL_MspInit>:
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021af8:	4b21      	ldr	r3, [pc, #132]	; (8021b80 <HAL_MspInit+0x88>)
{
 8021afa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021afc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021afe:	f042 0201 	orr.w	r2, r2, #1
 8021b02:	661a      	str	r2, [r3, #96]	; 0x60
 8021b04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021b06:	f002 0201 	and.w	r2, r2, #1
 8021b0a:	9200      	str	r2, [sp, #0]
 8021b0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8021b0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021b10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8021b14:	659a      	str	r2, [r3, #88]	; 0x58
 8021b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021b1c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021b1e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8021b20:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021b22:	f7df ffd3 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8021b26:	2200      	movs	r2, #0
 8021b28:	4611      	mov	r1, r2
 8021b2a:	f06f 000b 	mvn.w	r0, #11
 8021b2e:	f7df ffdf 	bl	8001af0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8021b32:	2200      	movs	r2, #0
 8021b34:	4611      	mov	r1, r2
 8021b36:	f06f 000a 	mvn.w	r0, #10
 8021b3a:	f7df ffd9 	bl	8001af0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8021b3e:	2200      	movs	r2, #0
 8021b40:	4611      	mov	r1, r2
 8021b42:	f06f 0009 	mvn.w	r0, #9
 8021b46:	f7df ffd3 	bl	8001af0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8021b4a:	2200      	movs	r2, #0
 8021b4c:	4611      	mov	r1, r2
 8021b4e:	f06f 0004 	mvn.w	r0, #4
 8021b52:	f7df ffcd 	bl	8001af0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8021b56:	2200      	movs	r2, #0
 8021b58:	4611      	mov	r1, r2
 8021b5a:	f06f 0003 	mvn.w	r0, #3
 8021b5e:	f7df ffc7 	bl	8001af0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8021b62:	2200      	movs	r2, #0
 8021b64:	4611      	mov	r1, r2
 8021b66:	f06f 0001 	mvn.w	r0, #1
 8021b6a:	f7df ffc1 	bl	8001af0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8021b6e:	2200      	movs	r2, #0
 8021b70:	4611      	mov	r1, r2
 8021b72:	f04f 30ff 	mov.w	r0, #4294967295
 8021b76:	f7df ffbb 	bl	8001af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021b7a:	b003      	add	sp, #12
 8021b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021b80:	40021000 	.word	0x40021000

08021b84 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8021b84:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8021b86:	6802      	ldr	r2, [r0, #0]
 8021b88:	4b31      	ldr	r3, [pc, #196]	; (8021c50 <HAL_LTDC_MspInit+0xcc>)
 8021b8a:	429a      	cmp	r2, r3
{
 8021b8c:	b08a      	sub	sp, #40	; 0x28
  if(hltdc->Instance==LTDC)
 8021b8e:	d15d      	bne.n	8021c4c <HAL_LTDC_MspInit+0xc8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021b90:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b94:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021b96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021b98:	482e      	ldr	r0, [pc, #184]	; (8021c54 <HAL_LTDC_MspInit+0xd0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021b9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8021b9e:	661a      	str	r2, [r3, #96]	; 0x60
 8021ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021ba2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8021ba6:	9200      	str	r2, [sp, #0]
 8021ba8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8021baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021bac:	f042 0210 	orr.w	r2, r2, #16
 8021bb0:	64da      	str	r2, [r3, #76]	; 0x4c
 8021bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021bb4:	f002 0210 	and.w	r2, r2, #16
 8021bb8:	9201      	str	r2, [sp, #4]
 8021bba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021bbe:	f042 0202 	orr.w	r2, r2, #2
 8021bc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8021bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021bc6:	f002 0202 	and.w	r2, r2, #2
 8021bca:	9202      	str	r2, [sp, #8]
 8021bcc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021bd0:	f042 0220 	orr.w	r2, r2, #32
 8021bd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8021bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021bd8:	f002 0220 	and.w	r2, r2, #32
 8021bdc:	9203      	str	r2, [sp, #12]
 8021bde:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021be2:	f042 0208 	orr.w	r2, r2, #8
 8021be6:	64da      	str	r2, [r3, #76]	; 0x4c
 8021be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021bea:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021bec:	f003 0308 	and.w	r3, r3, #8
 8021bf0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bf2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8021bf4:	260b      	movs	r6, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021bf6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bf8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8021bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021bfe:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8021c00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021c02:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8021c04:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021c06:	f7e0 fd23 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021c0a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021c0c:	a905      	add	r1, sp, #20
 8021c0e:	4812      	ldr	r0, [pc, #72]	; (8021c58 <HAL_LTDC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021c10:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021c12:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021c14:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021c16:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8021c18:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021c1a:	f7e0 fd19 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8021c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021c22:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021c24:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021c26:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021c28:	480c      	ldr	r0, [pc, #48]	; (8021c5c <HAL_LTDC_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021c2a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021c2c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021c2e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021c30:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021c32:	f7e0 fd0d 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8021c36:	f64d 730b 	movw	r3, #57099	; 0xdf0b
                          |GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021c3a:	a905      	add	r1, sp, #20
 8021c3c:	4808      	ldr	r0, [pc, #32]	; (8021c60 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8021c3e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021c40:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021c42:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021c44:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8021c46:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021c48:	f7e0 fd02 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8021c4c:	b00a      	add	sp, #40	; 0x28
 8021c4e:	bd70      	pop	{r4, r5, r6, pc}
 8021c50:	40016800 	.word	0x40016800
 8021c54:	48001000 	.word	0x48001000
 8021c58:	48000400 	.word	0x48000400
 8021c5c:	48001400 	.word	0x48001400
 8021c60:	48000c00 	.word	0x48000c00

08021c64 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021c64:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8021c66:	6802      	ldr	r2, [r0, #0]
 8021c68:	4b13      	ldr	r3, [pc, #76]	; (8021cb8 <HAL_SPI_MspInit+0x54>)
 8021c6a:	429a      	cmp	r2, r3
{
 8021c6c:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8021c6e:	d121      	bne.n	8021cb4 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021c70:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021c74:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021c76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8021c7c:	661a      	str	r2, [r3, #96]	; 0x60
 8021c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021c80:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021c86:	9300      	str	r3, [sp, #0]
 8021c88:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8021c8a:	2342      	movs	r3, #66	; 0x42
 8021c8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021c8e:	2302      	movs	r3, #2
 8021c90:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021c92:	2303      	movs	r3, #3
 8021c94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c96:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8021c98:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8021c9e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021ca0:	f7e0 fcd6 	bl	8002650 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8021ca4:	2023      	movs	r0, #35	; 0x23
 8021ca6:	4622      	mov	r2, r4
 8021ca8:	4621      	mov	r1, r4
 8021caa:	f7df ff21 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8021cae:	2023      	movs	r0, #35	; 0x23
 8021cb0:	f7df ff52 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8021cb4:	b006      	add	sp, #24
 8021cb6:	bd10      	pop	{r4, pc}
 8021cb8:	40013000 	.word	0x40013000

08021cbc <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021cbc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==LPUART1)
 8021cbe:	6802      	ldr	r2, [r0, #0]
 8021cc0:	4b1f      	ldr	r3, [pc, #124]	; (8021d40 <HAL_UART_MspInit+0x84>)
 8021cc2:	429a      	cmp	r2, r3
{
 8021cc4:	b086      	sub	sp, #24
 8021cc6:	4606      	mov	r6, r0
  if(huart->Instance==LPUART1)
 8021cc8:	d137      	bne.n	8021d3a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8021cca:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cce:	2500      	movs	r5, #0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8021cd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021cd2:	481c      	ldr	r0, [pc, #112]	; (8021d44 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8021cd4:	f042 0201 	orr.w	r2, r2, #1
 8021cd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8021cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cdc:	9503      	str	r5, [sp, #12]
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8021cde:	f003 0301 	and.w	r3, r3, #1
 8021ce2:	9300      	str	r3, [sp, #0]
 8021ce4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ce6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8021ce8:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021cea:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021cec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8021cee:	2308      	movs	r3, #8
 8021cf0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8021cf2:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021cf4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021cf6:	f7e0 fcab 	bl	8002650 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 3);
 8021cfa:	4622      	mov	r2, r4
 8021cfc:	2101      	movs	r1, #1
 8021cfe:	2046      	movs	r0, #70	; 0x46
 8021d00:	f7df fef6 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8021d04:	2046      	movs	r0, #70	; 0x46
 8021d06:	f7df ff27 	bl	8001b58 <HAL_NVIC_EnableIRQ>
		
		  /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8021d0a:	4c0f      	ldr	r4, [pc, #60]	; (8021d48 <HAL_UART_MspInit+0x8c>)
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8021d0c:	490f      	ldr	r1, [pc, #60]	; (8021d4c <HAL_UART_MspInit+0x90>)
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8021d0e:	60e5      	str	r5, [r4, #12]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8021d10:	2310      	movs	r3, #16
 8021d12:	2223      	movs	r2, #35	; 0x23
 8021d14:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8021d18:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8021d1a:	2380      	movs	r3, #128	; 0x80
 8021d1c:	6123      	str	r3, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8021d1e:	6165      	str	r5, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8021d20:	61a5      	str	r5, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8021d22:	61e5      	str	r5, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8021d24:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8021d26:	f7df ffa5 	bl	8001c74 <HAL_DMA_Init>
 8021d2a:	b120      	cbz	r0, 8021d36 <HAL_UART_MspInit+0x7a>
    {
      Error_Handler();
 8021d2c:	f240 1109 	movw	r1, #265	; 0x109
 8021d30:	4807      	ldr	r0, [pc, #28]	; (8021d50 <HAL_UART_MspInit+0x94>)
 8021d32:	f7ff fe2b 	bl	802198c <_Error_Handler>
    }

		
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8021d36:	67b4      	str	r4, [r6, #120]	; 0x78
 8021d38:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8021d3a:	b006      	add	sp, #24
 8021d3c:	bd70      	pop	{r4, r5, r6, pc}
 8021d3e:	bf00      	nop
 8021d40:	40008000 	.word	0x40008000
 8021d44:	48000800 	.word	0x48000800
 8021d48:	2009138c 	.word	0x2009138c
 8021d4c:	40020008 	.word	0x40020008
 8021d50:	08034200 	.word	0x08034200

08021d54 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{

  if(huart->Instance==LPUART1)
 8021d54:	6802      	ldr	r2, [r0, #0]
 8021d56:	4b0b      	ldr	r3, [pc, #44]	; (8021d84 <HAL_UART_MspDeInit+0x30>)
 8021d58:	429a      	cmp	r2, r3
{
 8021d5a:	b510      	push	{r4, lr}
 8021d5c:	4604      	mov	r4, r0
  if(huart->Instance==LPUART1)
 8021d5e:	d110      	bne.n	8021d82 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8021d60:	4a09      	ldr	r2, [pc, #36]	; (8021d88 <HAL_UART_MspDeInit+0x34>)
  
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 8021d62:	480a      	ldr	r0, [pc, #40]	; (8021d8c <HAL_UART_MspDeInit+0x38>)
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8021d64:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8021d66:	f023 0301 	bic.w	r3, r3, #1
 8021d6a:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 8021d6c:	2103      	movs	r1, #3
 8021d6e:	f7e0 fd47 	bl	8002800 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8021d72:	2046      	movs	r0, #70	; 0x46
 8021d74:	f7df fefc 	bl	8001b70 <HAL_NVIC_DisableIRQ>
		/* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8021d78:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 8021d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmatx);
 8021d7e:	f7df bfe9 	b.w	8001d54 <HAL_DMA_DeInit>
 8021d82:	bd10      	pop	{r4, pc}
 8021d84:	40008000 	.word	0x40008000
 8021d88:	40021000 	.word	0x40021000
 8021d8c:	48000800 	.word	0x48000800

08021d90 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8021d90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8021d92:	6802      	ldr	r2, [r0, #0]
 8021d94:	4b0e      	ldr	r3, [pc, #56]	; (8021dd0 <HAL_ADC_MspInit+0x40>)
 8021d96:	429a      	cmp	r2, r3
 8021d98:	d116      	bne.n	8021dc8 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8021d9a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8021d9e:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021da2:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 8021da4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021da6:	480b      	ldr	r0, [pc, #44]	; (8021dd4 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8021da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021dac:	64da      	str	r2, [r3, #76]	; 0x4c
 8021dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021db4:	9300      	str	r3, [sp, #0]
 8021db6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021db8:	2304      	movs	r3, #4
 8021dba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8021dbc:	230b      	movs	r3, #11
 8021dbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021dc0:	2300      	movs	r3, #0
 8021dc2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021dc4:	f7e0 fc44 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8021dc8:	b007      	add	sp, #28
 8021dca:	f85d fb04 	ldr.w	pc, [sp], #4
 8021dce:	bf00      	nop
 8021dd0:	50040000 	.word	0x50040000
 8021dd4:	48000800 	.word	0x48000800

08021dd8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 8021dda:	6803      	ldr	r3, [r0, #0]
 8021ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8021de0:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2)
 8021de2:	d112      	bne.n	8021e0a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021de4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021de8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021dea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021dec:	f042 0201 	orr.w	r2, r2, #1
 8021df0:	659a      	str	r2, [r3, #88]	; 0x58
 8021df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021df4:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021df6:	f003 0301 	and.w	r3, r3, #1
 8021dfa:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021dfc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021dfe:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021e00:	f7df fe76 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8021e04:	201c      	movs	r0, #28
 8021e06:	f7df fea7 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
	
	if(htim_base->Instance==TIM7)
 8021e0a:	6822      	ldr	r2, [r4, #0]
 8021e0c:	4b20      	ldr	r3, [pc, #128]	; (8021e90 <HAL_TIM_Base_MspInit+0xb8>)
 8021e0e:	429a      	cmp	r2, r3
 8021e10:	d10d      	bne.n	8021e2e <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8021e12:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8021e16:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8021e18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021e1a:	f042 0220 	orr.w	r2, r2, #32
 8021e1e:	659a      	str	r2, [r3, #88]	; 0x58
 8021e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021e22:	f003 0320 	and.w	r3, r3, #32
 8021e26:	9301      	str	r3, [sp, #4]
 8021e28:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8021e2a:	f7df fe95 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
	
	 if(htim_base->Instance==TIM4)
 8021e2e:	6822      	ldr	r2, [r4, #0]
 8021e30:	4b18      	ldr	r3, [pc, #96]	; (8021e94 <HAL_TIM_Base_MspInit+0xbc>)
 8021e32:	429a      	cmp	r2, r3
 8021e34:	d112      	bne.n	8021e5c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8021e36:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8021e3a:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8021e3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021e3e:	f042 0204 	orr.w	r2, r2, #4
 8021e42:	659a      	str	r2, [r3, #88]	; 0x58
 8021e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8021e46:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8021e48:	f003 0304 	and.w	r3, r3, #4
 8021e4c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8021e4e:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8021e50:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8021e52:	f7df fe4d 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8021e56:	201e      	movs	r0, #30
 8021e58:	f7df fe7e 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
	}
		if(htim_base->Instance==TIM6)
 8021e5c:	6822      	ldr	r2, [r4, #0]
 8021e5e:	4b0e      	ldr	r3, [pc, #56]	; (8021e98 <HAL_TIM_Base_MspInit+0xc0>)
 8021e60:	429a      	cmp	r2, r3
 8021e62:	d112      	bne.n	8021e8a <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8021e64:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8021e68:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8021e6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021e6c:	f042 0210 	orr.w	r2, r2, #16
 8021e70:	659a      	str	r2, [r3, #88]	; 0x58
 8021e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021e74:	f003 0310 	and.w	r3, r3, #16
 8021e78:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8021e7a:	2200      	movs	r2, #0
 8021e7c:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 8021e7e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8021e80:	f7df fe36 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021e84:	2036      	movs	r0, #54	; 0x36
 8021e86:	f7df fe67 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8021e8a:	b004      	add	sp, #16
 8021e8c:	bd10      	pop	{r4, pc}
 8021e8e:	bf00      	nop
 8021e90:	40001400 	.word	0x40001400
 8021e94:	40000800 	.word	0x40000800
 8021e98:	40001000 	.word	0x40001000

08021e9c <HAL_TIM_OC_MspInit>:


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8021e9c:	b507      	push	{r0, r1, r2, lr}

  if(htim_oc->Instance==TIM5)
 8021e9e:	4b0d      	ldr	r3, [pc, #52]	; (8021ed4 <HAL_TIM_OC_MspInit+0x38>)
 8021ea0:	6802      	ldr	r2, [r0, #0]
 8021ea2:	429a      	cmp	r2, r3
 8021ea4:	d112      	bne.n	8021ecc <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021ea6:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021eaa:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021eac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021eae:	f042 0208 	orr.w	r2, r2, #8
 8021eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8021eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021eb6:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021eb8:	f003 0308 	and.w	r3, r3, #8
 8021ebc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021ebe:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021ec0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021ec2:	f7df fe15 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8021ec6:	2032      	movs	r0, #50	; 0x32
 8021ec8:	f7df fe46 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8021ecc:	b003      	add	sp, #12
 8021ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8021ed2:	bf00      	nop
 8021ed4:	40000c00 	.word	0x40000c00

08021ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8021ed8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 8021eda:	6802      	ldr	r2, [r0, #0]
 8021edc:	4b19      	ldr	r3, [pc, #100]	; (8021f44 <HAL_TIM_MspPostInit+0x6c>)
 8021ede:	429a      	cmp	r2, r3
{
 8021ee0:	b086      	sub	sp, #24
 8021ee2:	4604      	mov	r4, r0
  if(htim->Instance==TIM5)
 8021ee4:	d10c      	bne.n	8021f00 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM5_MspPostInit 0 */
  
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8021ee6:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ee8:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8021eea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021eec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021eee:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ef4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ef6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021ef8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8021efa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021efc:	f7e0 fba8 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

  if(htim->Instance==TIM15)
 8021f00:	6822      	ldr	r2, [r4, #0]
 8021f02:	4b11      	ldr	r3, [pc, #68]	; (8021f48 <HAL_TIM_MspPostInit+0x70>)
 8021f04:	429a      	cmp	r2, r3
 8021f06:	d11a      	bne.n	8021f3e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8021f08:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8021f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021f12:	64da      	str	r2, [r3, #76]	; 0x4c
 8021f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021f1a:	9300      	str	r3, [sp, #0]
 8021f1c:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableVddIO2();
 8021f1e:	f7e2 f893 	bl	8004048 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration    
    PG11     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8021f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021f26:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021f28:	2302      	movs	r3, #2
 8021f2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021f2c:	2300      	movs	r3, #0
 8021f2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021f30:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021f32:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8021f34:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021f36:	4805      	ldr	r0, [pc, #20]	; (8021f4c <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8021f38:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021f3a:	f7e0 fb89 	bl	8002650 <HAL_GPIO_Init>
	}
}
 8021f3e:	b006      	add	sp, #24
 8021f40:	bd10      	pop	{r4, pc}
 8021f42:	bf00      	nop
 8021f44:	40000c00 	.word	0x40000c00
 8021f48:	40014000 	.word	0x40014000
 8021f4c:	48001800 	.word	0x48001800

08021f50 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8021f50:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 8021f52:	4b0d      	ldr	r3, [pc, #52]	; (8021f88 <HAL_DMA2D_MspInit+0x38>)
 8021f54:	6802      	ldr	r2, [r0, #0]
 8021f56:	429a      	cmp	r2, r3
 8021f58:	d112      	bne.n	8021f80 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8021f5a:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8021f5e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8021f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8021f62:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8021f66:	649a      	str	r2, [r3, #72]	; 0x48
 8021f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8021f6a:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8021f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021f70:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8021f72:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8021f74:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8021f76:	f7df fdbb 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8021f7a:	205a      	movs	r0, #90	; 0x5a
 8021f7c:	f7df fdec 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8021f80:	b003      	add	sp, #12
 8021f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8021f86:	bf00      	nop
 8021f88:	4002b000 	.word	0x4002b000

08021f8c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021f8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8021f8e:	6802      	ldr	r2, [r0, #0]
 8021f90:	4b17      	ldr	r3, [pc, #92]	; (8021ff0 <HAL_I2C_MspInit+0x64>)
 8021f92:	429a      	cmp	r2, r3
 8021f94:	d128      	bne.n	8021fe8 <HAL_I2C_MspInit+0x5c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021f96:	23c0      	movs	r3, #192	; 0xc0
 8021f98:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021f9a:	2312      	movs	r3, #18
 8021f9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021f9e:	2301      	movs	r3, #1
 8021fa0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021fa2:	2303      	movs	r3, #3
 8021fa4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8021fa6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021fa8:	eb0d 0103 	add.w	r1, sp, r3
 8021fac:	4811      	ldr	r0, [pc, #68]	; (8021ff4 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8021fae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021fb0:	f7e0 fb4e 	bl	8002650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021fb4:	4b10      	ldr	r3, [pc, #64]	; (8021ff8 <HAL_I2C_MspInit+0x6c>)
 8021fb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021fb8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8021fbc:	659a      	str	r2, [r3, #88]	; 0x58
 8021fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8021fc0:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8021fc6:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021fc8:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8021fca:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021fcc:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8021fce:	f7df fd8f 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8021fd2:	201f      	movs	r0, #31
 8021fd4:	f7df fdc0 	bl	8001b58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8021fd8:	2200      	movs	r2, #0
 8021fda:	2020      	movs	r0, #32
 8021fdc:	4611      	mov	r1, r2
 8021fde:	f7df fd87 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8021fe2:	2020      	movs	r0, #32
 8021fe4:	f7df fdb8 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8021fe8:	b007      	add	sp, #28
 8021fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8021fee:	bf00      	nop
 8021ff0:	40005400 	.word	0x40005400
 8021ff4:	48000400 	.word	0x48000400
 8021ff8:	40021000 	.word	0x40021000

08021ffc <HAL_SD_MspInit>:

}


void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8021ffc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 8021ffe:	6802      	ldr	r2, [r0, #0]
 8022000:	4b18      	ldr	r3, [pc, #96]	; (8022064 <HAL_SD_MspInit+0x68>)
 8022002:	429a      	cmp	r2, r3
{
 8022004:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8022006:	d12b      	bne.n	8022060 <HAL_SD_MspInit+0x64>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8022008:	4b17      	ldr	r3, [pc, #92]	; (8022068 <HAL_SD_MspInit+0x6c>)
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802200a:	4818      	ldr	r0, [pc, #96]	; (802206c <HAL_SD_MspInit+0x70>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 802200c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802200e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8022012:	64da      	str	r2, [r3, #76]	; 0x4c
 8022014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802201a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802201c:	2400      	movs	r4, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 802201e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022020:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8022022:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022026:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022028:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 802202a:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802202c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 802202e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022030:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022032:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8022034:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8022036:	f7e0 fb0b 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 802203a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802203c:	eb0d 0103 	add.w	r1, sp, r3
 8022040:	480b      	ldr	r0, [pc, #44]	; (8022070 <HAL_SD_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8022042:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022044:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022046:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022048:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 802204a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802204c:	f7e0 fb00 	bl	8002650 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8022050:	2031      	movs	r0, #49	; 0x31
 8022052:	4622      	mov	r2, r4
 8022054:	4621      	mov	r1, r4
 8022056:	f7df fd4b 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 802205a:	2031      	movs	r0, #49	; 0x31
 802205c:	f7df fd7c 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8022060:	b007      	add	sp, #28
 8022062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022064:	50062400 	.word	0x50062400
 8022068:	40021000 	.word	0x40021000
 802206c:	48000800 	.word	0x48000800
 8022070:	48000c00 	.word	0x48000c00

08022074 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 8022074:	6802      	ldr	r2, [r0, #0]
 8022076:	4b08      	ldr	r3, [pc, #32]	; (8022098 <HAL_TIM_PWM_MspInit+0x24>)
 8022078:	429a      	cmp	r2, r3
{
 802207a:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM15)
 802207c:	d10a      	bne.n	8022094 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 802207e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8022082:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8022084:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8022088:	661a      	str	r2, [r3, #96]	; 0x60
 802208a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022090:	9301      	str	r3, [sp, #4]
 8022092:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8022094:	b002      	add	sp, #8
 8022096:	4770      	bx	lr
 8022098:	40014000 	.word	0x40014000

0802209c <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 802209c:	b508      	push	{r3, lr}

  if(hsd->Instance==SDMMC1)
 802209e:	6802      	ldr	r2, [r0, #0]
 80220a0:	4b0b      	ldr	r3, [pc, #44]	; (80220d0 <HAL_SD_MspDeInit+0x34>)
 80220a2:	429a      	cmp	r2, r3
 80220a4:	d112      	bne.n	80220cc <HAL_SD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 80220a6:	4a0b      	ldr	r2, [pc, #44]	; (80220d4 <HAL_SD_MspDeInit+0x38>)
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80220a8:	480b      	ldr	r0, [pc, #44]	; (80220d8 <HAL_SD_MspDeInit+0x3c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 80220aa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80220ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80220b0:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80220b2:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80220b6:	f7e0 fba3 	bl	8002800 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80220ba:	4808      	ldr	r0, [pc, #32]	; (80220dc <HAL_SD_MspDeInit+0x40>)
 80220bc:	2104      	movs	r1, #4
 80220be:	f7e0 fb9f 	bl	8002800 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 80220c2:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 80220c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 80220c8:	f7df bd52 	b.w	8001b70 <HAL_NVIC_DisableIRQ>
 80220cc:	bd08      	pop	{r3, pc}
 80220ce:	bf00      	nop
 80220d0:	50062400 	.word	0x50062400
 80220d4:	40021000 	.word	0x40021000
 80220d8:	48000800 	.word	0x48000800
 80220dc:	48000c00 	.word	0x48000c00

080220e0 <DMA1_Channel1_IRQHandler>:
*/

void DMA1_Channel1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80220e0:	4801      	ldr	r0, [pc, #4]	; (80220e8 <DMA1_Channel1_IRQHandler+0x8>)
 80220e2:	f7df bf08 	b.w	8001ef6 <HAL_DMA_IRQHandler>
 80220e6:	bf00      	nop
 80220e8:	2009138c 	.word	0x2009138c

080220ec <NMI_Handler>:
 80220ec:	4770      	bx	lr

080220ee <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80220ee:	e7fe      	b.n	80220ee <HardFault_Handler>

080220f0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80220f0:	e7fe      	b.n	80220f0 <MemManage_Handler>

080220f2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80220f2:	e7fe      	b.n	80220f2 <BusFault_Handler>

080220f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80220f4:	e7fe      	b.n	80220f4 <UsageFault_Handler>

080220f6 <SVC_Handler>:
 80220f6:	4770      	bx	lr

080220f8 <DebugMon_Handler>:
 80220f8:	4770      	bx	lr

080220fa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80220fa:	4770      	bx	lr

080220fc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80220fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80220fe:	f7de ff87 	bl	8001010 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8022102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8022106:	f7df bd72 	b.w	8001bee <HAL_SYSTICK_IRQHandler>
	...

0802210c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802210c:	4801      	ldr	r0, [pc, #4]	; (8022114 <SPI1_IRQHandler+0x8>)
 802210e:	f7e3 be15 	b.w	8005d3c <HAL_SPI_IRQHandler>
 8022112:	bf00      	nop
 8022114:	20091464 	.word	0x20091464

08022118 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8022118:	4801      	ldr	r0, [pc, #4]	; (8022120 <TIM5_IRQHandler+0x8>)
 802211a:	f7e3 bfee 	b.w	80060fa <HAL_TIM_IRQHandler>
 802211e:	bf00      	nop
 8022120:	20091104 	.word	0x20091104

08022124 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8022124:	4801      	ldr	r0, [pc, #4]	; (802212c <LPUART1_IRQHandler+0x8>)
 8022126:	f7e4 bc87 	b.w	8006a38 <HAL_UART_IRQHandler>
 802212a:	bf00      	nop
 802212c:	20091168 	.word	0x20091168

08022130 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8022130:	4801      	ldr	r0, [pc, #4]	; (8022138 <OTG_FS_IRQHandler+0x8>)
 8022132:	f7e1 baf5 	b.w	8003720 <HAL_PCD_IRQHandler>
 8022136:	bf00      	nop
 8022138:	200917fc 	.word	0x200917fc

0802213c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 802213c:	4801      	ldr	r0, [pc, #4]	; (8022144 <I2C1_EV_IRQHandler+0x8>)
 802213e:	f7e0 be5d 	b.w	8002dfc <HAL_I2C_EV_IRQHandler>
 8022142:	bf00      	nop
 8022144:	20090fd0 	.word	0x20090fd0

08022148 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8022148:	4801      	ldr	r0, [pc, #4]	; (8022150 <I2C1_ER_IRQHandler+0x8>)
 802214a:	f7e1 b86d 	b.w	8003228 <HAL_I2C_ER_IRQHandler>
 802214e:	bf00      	nop
 8022150:	20090fd0 	.word	0x20090fd0

08022154 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8022154:	4801      	ldr	r0, [pc, #4]	; (802215c <SDMMC1_IRQHandler+0x8>)
 8022156:	f7e3 b869 	b.w	800522c <HAL_SD_IRQHandler>
 802215a:	bf00      	nop
 802215c:	20091070 	.word	0x20091070

08022160 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8022160:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8022162:	4b0a      	ldr	r3, [pc, #40]	; (802218c <_sbrk+0x2c>)
 8022164:	6819      	ldr	r1, [r3, #0]
{
 8022166:	4602      	mov	r2, r0
	if (heap_end == 0)
 8022168:	b909      	cbnz	r1, 802216e <_sbrk+0xe>
		heap_end = &end;
 802216a:	4909      	ldr	r1, [pc, #36]	; (8022190 <_sbrk+0x30>)
 802216c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 802216e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8022170:	4669      	mov	r1, sp
 8022172:	4402      	add	r2, r0
 8022174:	428a      	cmp	r2, r1
 8022176:	d906      	bls.n	8022186 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8022178:	f000 fa8c 	bl	8022694 <__errno>
 802217c:	230c      	movs	r3, #12
 802217e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8022180:	f04f 30ff 	mov.w	r0, #4294967295
 8022184:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8022186:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8022188:	bd08      	pop	{r3, pc}
 802218a:	bf00      	nop
 802218c:	2008be7c 	.word	0x2008be7c
 8022190:	20091e14 	.word	0x20091e14

08022194 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8022194:	490f      	ldr	r1, [pc, #60]	; (80221d4 <SystemInit+0x40>)
 8022196:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 802219a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80221a2:	4b0d      	ldr	r3, [pc, #52]	; (80221d8 <SystemInit+0x44>)
 80221a4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80221a6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80221a8:	f042 0201 	orr.w	r2, r2, #1
 80221ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80221ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80221b0:	681a      	ldr	r2, [r3, #0]
 80221b2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80221b6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80221ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80221bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80221c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80221c2:	681a      	ldr	r2, [r3, #0]
 80221c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80221c8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80221ca:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80221cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80221d0:	608b      	str	r3, [r1, #8]
 80221d2:	4770      	bx	lr
 80221d4:	e000ed00 	.word	0xe000ed00
 80221d8:	40021000 	.word	0x40021000

080221dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80221dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80221de:	2200      	movs	r2, #0
 80221e0:	490a      	ldr	r1, [pc, #40]	; (802220c <MX_USB_DEVICE_Init+0x30>)
 80221e2:	480b      	ldr	r0, [pc, #44]	; (8022210 <MX_USB_DEVICE_Init+0x34>)
 80221e4:	f7e6 f8b9 	bl	800835a <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 80221e8:	490a      	ldr	r1, [pc, #40]	; (8022214 <MX_USB_DEVICE_Init+0x38>)
 80221ea:	4809      	ldr	r0, [pc, #36]	; (8022210 <MX_USB_DEVICE_Init+0x34>)
 80221ec:	f7e6 f8ca 	bl	8008384 <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 80221f0:	4909      	ldr	r1, [pc, #36]	; (8022218 <MX_USB_DEVICE_Init+0x3c>)
 80221f2:	4807      	ldr	r0, [pc, #28]	; (8022210 <MX_USB_DEVICE_Init+0x34>)
 80221f4:	f7e6 f8aa 	bl	800834c <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 80221f8:	4805      	ldr	r0, [pc, #20]	; (8022210 <MX_USB_DEVICE_Init+0x34>)
 80221fa:	f000 f9ac 	bl	8022556 <USBD_LL_BatteryCharging>
 80221fe:	b120      	cbz	r0, 802220a <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8022200:	4803      	ldr	r0, [pc, #12]	; (8022210 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 8022206:	f7e6 b8c4 	b.w	8008392 <USBD_Start>
 802220a:	bd08      	pop	{r3, pc}
 802220c:	20000a88 	.word	0x20000a88
 8022210:	20091560 	.word	0x20091560
 8022214:	20000020 	.word	0x20000020
 8022218:	20000a78 	.word	0x20000a78

0802221c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802221c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 802221e:	6803      	ldr	r3, [r0, #0]
 8022220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8022224:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 8022226:	d133      	bne.n	8022290 <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8022228:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802222c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802222e:	2302      	movs	r3, #2
 8022230:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022232:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022234:	4c19      	ldr	r4, [pc, #100]	; (802229c <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022236:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022238:	2303      	movs	r3, #3
 802223a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802223c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802223e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022244:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022246:	f7e0 fa03 	bl	8002650 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802224a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 802224c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8022250:	64e3      	str	r3, [r4, #76]	; 0x4c
 8022252:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8022254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022258:	9301      	str	r3, [sp, #4]
 802225a:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802225c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802225e:	00db      	lsls	r3, r3, #3
 8022260:	d418      	bmi.n	8022294 <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8022262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022268:	65a3      	str	r3, [r4, #88]	; 0x58
 802226a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022270:	9302      	str	r3, [sp, #8]
 8022272:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8022274:	f7e1 fee0 	bl	8004038 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8022278:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802227e:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8022280:	2200      	movs	r2, #0
 8022282:	2043      	movs	r0, #67	; 0x43
 8022284:	4611      	mov	r1, r2
 8022286:	f7df fc33 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802228a:	2043      	movs	r0, #67	; 0x43
 802228c:	f7df fc64 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8022290:	b008      	add	sp, #32
 8022292:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8022294:	f7e1 fed0 	bl	8004038 <HAL_PWREx_EnableVddUSB>
 8022298:	e7f2      	b.n	8022280 <HAL_PCD_MspInit+0x64>
 802229a:	bf00      	nop
 802229c:	40021000 	.word	0x40021000

080222a0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80222a0:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80222a4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80222a8:	f7e6 b88a 	b.w	80083c0 <USBD_LL_SetupStage>

080222ac <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80222ac:	231c      	movs	r3, #28
 80222ae:	fb03 0301 	mla	r3, r3, r1, r0
 80222b2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80222b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80222ba:	f7e6 b8ae 	b.w	800841a <USBD_LL_DataOutStage>

080222be <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80222be:	231c      	movs	r3, #28
 80222c0:	fb03 0301 	mla	r3, r3, r1, r0
 80222c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80222c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80222ca:	f7e6 b8de 	b.w	800848a <USBD_LL_DataInStage>

080222ce <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80222ce:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80222d2:	f7e6 b96f 	b.w	80085b4 <USBD_LL_SOF>

080222d6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80222d6:	b510      	push	{r4, lr}
 80222d8:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80222da:	2101      	movs	r1, #1
 80222dc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80222e0:	f7e6 f956 	bl	8008590 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80222e4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80222e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80222ec:	f7e6 b929 	b.w	8008542 <USBD_LL_Reset>

080222f0 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80222f0:	6802      	ldr	r2, [r0, #0]
 80222f2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 80222f6:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80222f8:	f043 0301 	orr.w	r3, r3, #1
{
 80222fc:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80222fe:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022302:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8022306:	f7e6 f946 	bl	8008596 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802230a:	6a23      	ldr	r3, [r4, #32]
 802230c:	b123      	cbz	r3, 8022318 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802230e:	4a03      	ldr	r2, [pc, #12]	; (802231c <HAL_PCD_SuspendCallback+0x2c>)
 8022310:	6913      	ldr	r3, [r2, #16]
 8022312:	f043 0306 	orr.w	r3, r3, #6
 8022316:	6113      	str	r3, [r2, #16]
 8022318:	bd10      	pop	{r4, pc}
 802231a:	bf00      	nop
 802231c:	e000ed00 	.word	0xe000ed00

08022320 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022320:	6802      	ldr	r2, [r0, #0]
 8022322:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8022326:	f023 0301 	bic.w	r3, r3, #1
{
 802232a:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802232c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8022330:	6a03      	ldr	r3, [r0, #32]
{
 8022332:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8022334:	b133      	cbz	r3, 8022344 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022336:	4a06      	ldr	r2, [pc, #24]	; (8022350 <HAL_PCD_ResumeCallback+0x30>)
 8022338:	6913      	ldr	r3, [r2, #16]
 802233a:	f023 0306 	bic.w	r3, r3, #6
 802233e:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8022340:	f7fe f8ca 	bl	80204d8 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022344:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8022348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802234c:	f7e6 b92c 	b.w	80085a8 <USBD_LL_Resume>
 8022350:	e000ed00 	.word	0xe000ed00

08022354 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022354:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8022358:	f7e6 b93a 	b.w	80085d0 <USBD_LL_IsoOUTIncomplete>

0802235c <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802235c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8022360:	f7e6 b934 	b.w	80085cc <USBD_LL_IsoINIncomplete>

08022364 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022364:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8022368:	f7e6 b934 	b.w	80085d4 <USBD_LL_DevConnected>

0802236c <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 802236c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8022370:	f7e6 b932 	b.w	80085d8 <USBD_LL_DevDisconnected>

08022374 <USBD_LL_Init>:
{
 8022374:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 8022376:	7802      	ldrb	r2, [r0, #0]
 8022378:	bb4a      	cbnz	r2, 80223ce <USBD_LL_Init+0x5a>
  hpcd_USB_OTG_FS.pData = pdev;
 802237a:	4b16      	ldr	r3, [pc, #88]	; (80223d4 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 802237c:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 802237e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8022382:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8022386:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 802238a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802238e:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022390:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8022392:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022394:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8022396:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8022398:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 802239a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 802239c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 802239e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80223a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80223a2:	f7e1 f92b 	bl	80035fc <HAL_PCD_Init>
 80223a6:	b120      	cbz	r0, 80223b2 <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 80223a8:	f240 116b 	movw	r1, #363	; 0x16b
 80223ac:	480a      	ldr	r0, [pc, #40]	; (80223d8 <USBD_LL_Init+0x64>)
 80223ae:	f7ff faed 	bl	802198c <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80223b2:	2180      	movs	r1, #128	; 0x80
 80223b4:	4807      	ldr	r0, [pc, #28]	; (80223d4 <USBD_LL_Init+0x60>)
 80223b6:	f7e1 fdb1 	bl	8003f1c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80223ba:	2240      	movs	r2, #64	; 0x40
 80223bc:	2100      	movs	r1, #0
 80223be:	4805      	ldr	r0, [pc, #20]	; (80223d4 <USBD_LL_Init+0x60>)
 80223c0:	f7e1 fd8b 	bl	8003eda <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80223c4:	2280      	movs	r2, #128	; 0x80
 80223c6:	2101      	movs	r1, #1
 80223c8:	4802      	ldr	r0, [pc, #8]	; (80223d4 <USBD_LL_Init+0x60>)
 80223ca:	f7e1 fd86 	bl	8003eda <HAL_PCDEx_SetTxFiFo>
}
 80223ce:	2000      	movs	r0, #0
 80223d0:	bd08      	pop	{r3, pc}
 80223d2:	bf00      	nop
 80223d4:	200917fc 	.word	0x200917fc
 80223d8:	08034268 	.word	0x08034268

080223dc <USBD_LL_Start>:
{
 80223dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80223de:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80223e2:	f7e1 f988 	bl	80036f6 <HAL_PCD_Start>
 80223e6:	2803      	cmp	r0, #3
 80223e8:	bf9a      	itte	ls
 80223ea:	4b02      	ldrls	r3, [pc, #8]	; (80223f4 <USBD_LL_Start+0x18>)
 80223ec:	5c18      	ldrbls	r0, [r3, r0]
 80223ee:	2002      	movhi	r0, #2
}
 80223f0:	bd08      	pop	{r3, pc}
 80223f2:	bf00      	nop
 80223f4:	08034264 	.word	0x08034264

080223f8 <USBD_LL_OpenEP>:
{
 80223f8:	b510      	push	{r4, lr}
 80223fa:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80223fc:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8022400:	4613      	mov	r3, r2
 8022402:	4622      	mov	r2, r4
 8022404:	f7e1 fc66 	bl	8003cd4 <HAL_PCD_EP_Open>
 8022408:	2803      	cmp	r0, #3
 802240a:	bf9a      	itte	ls
 802240c:	4b01      	ldrls	r3, [pc, #4]	; (8022414 <USBD_LL_OpenEP+0x1c>)
 802240e:	5c18      	ldrbls	r0, [r3, r0]
 8022410:	2002      	movhi	r0, #2
}
 8022412:	bd10      	pop	{r4, pc}
 8022414:	08034264 	.word	0x08034264

08022418 <USBD_LL_CloseEP>:
{
 8022418:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802241a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802241e:	f7e1 fc8e 	bl	8003d3e <HAL_PCD_EP_Close>
 8022422:	2803      	cmp	r0, #3
 8022424:	bf9a      	itte	ls
 8022426:	4b02      	ldrls	r3, [pc, #8]	; (8022430 <USBD_LL_CloseEP+0x18>)
 8022428:	5c18      	ldrbls	r0, [r3, r0]
 802242a:	2002      	movhi	r0, #2
}
 802242c:	bd08      	pop	{r3, pc}
 802242e:	bf00      	nop
 8022430:	08034264 	.word	0x08034264

08022434 <USBD_LL_StallEP>:
{
 8022434:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022436:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802243a:	f7e1 fce3 	bl	8003e04 <HAL_PCD_EP_SetStall>
 802243e:	2803      	cmp	r0, #3
 8022440:	bf9a      	itte	ls
 8022442:	4b02      	ldrls	r3, [pc, #8]	; (802244c <USBD_LL_StallEP+0x18>)
 8022444:	5c18      	ldrbls	r0, [r3, r0]
 8022446:	2002      	movhi	r0, #2
}
 8022448:	bd08      	pop	{r3, pc}
 802244a:	bf00      	nop
 802244c:	08034264 	.word	0x08034264

08022450 <USBD_LL_ClearStallEP>:
{
 8022450:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8022452:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8022456:	f7e1 fd0e 	bl	8003e76 <HAL_PCD_EP_ClrStall>
 802245a:	2803      	cmp	r0, #3
 802245c:	bf9a      	itte	ls
 802245e:	4b02      	ldrls	r3, [pc, #8]	; (8022468 <USBD_LL_ClearStallEP+0x18>)
 8022460:	5c18      	ldrbls	r0, [r3, r0]
 8022462:	2002      	movhi	r0, #2
}
 8022464:	bd08      	pop	{r3, pc}
 8022466:	bf00      	nop
 8022468:	08034264 	.word	0x08034264

0802246c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 802246c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022470:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8022474:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8022478:	bf1b      	ittet	ne
 802247a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 802247e:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8022482:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8022486:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 802248a:	bf08      	it	eq
 802248c:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8022490:	4770      	bx	lr
	...

08022494 <USBD_LL_SetUSBAddress>:
{
 8022494:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022496:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802249a:	f7e1 fc07 	bl	8003cac <HAL_PCD_SetAddress>
 802249e:	2803      	cmp	r0, #3
 80224a0:	bf9a      	itte	ls
 80224a2:	4b02      	ldrls	r3, [pc, #8]	; (80224ac <USBD_LL_SetUSBAddress+0x18>)
 80224a4:	5c18      	ldrbls	r0, [r3, r0]
 80224a6:	2002      	movhi	r0, #2
}
 80224a8:	bd08      	pop	{r3, pc}
 80224aa:	bf00      	nop
 80224ac:	08034264 	.word	0x08034264

080224b0 <USBD_LL_Transmit>:
{
 80224b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80224b2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80224b6:	f7e1 fc8a 	bl	8003dce <HAL_PCD_EP_Transmit>
 80224ba:	2803      	cmp	r0, #3
 80224bc:	bf9a      	itte	ls
 80224be:	4b02      	ldrls	r3, [pc, #8]	; (80224c8 <USBD_LL_Transmit+0x18>)
 80224c0:	5c18      	ldrbls	r0, [r3, r0]
 80224c2:	2002      	movhi	r0, #2
}
 80224c4:	bd08      	pop	{r3, pc}
 80224c6:	bf00      	nop
 80224c8:	08034264 	.word	0x08034264

080224cc <USBD_LL_PrepareReceive>:
{
 80224cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80224ce:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80224d2:	f7e1 fc5e 	bl	8003d92 <HAL_PCD_EP_Receive>
 80224d6:	2803      	cmp	r0, #3
 80224d8:	bf9a      	itte	ls
 80224da:	4b02      	ldrls	r3, [pc, #8]	; (80224e4 <USBD_LL_PrepareReceive+0x18>)
 80224dc:	5c18      	ldrbls	r0, [r3, r0]
 80224de:	2002      	movhi	r0, #2
}
 80224e0:	bd08      	pop	{r3, pc}
 80224e2:	bf00      	nop
 80224e4:	08034264 	.word	0x08034264

080224e8 <HAL_PCDEx_LPM_Callback>:
{
 80224e8:	b510      	push	{r4, lr}
 80224ea:	4604      	mov	r4, r0
  switch (msg)
 80224ec:	b111      	cbz	r1, 80224f4 <HAL_PCDEx_LPM_Callback+0xc>
 80224ee:	2901      	cmp	r1, #1
 80224f0:	d016      	beq.n	8022520 <HAL_PCDEx_LPM_Callback+0x38>
 80224f2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80224f4:	6a03      	ldr	r3, [r0, #32]
 80224f6:	b133      	cbz	r3, 8022506 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 80224f8:	f7fd ffee 	bl	80204d8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80224fc:	4a12      	ldr	r2, [pc, #72]	; (8022548 <HAL_PCDEx_LPM_Callback+0x60>)
 80224fe:	6913      	ldr	r3, [r2, #16]
 8022500:	f023 0306 	bic.w	r3, r3, #6
 8022504:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022506:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8022508:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802250c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8022510:	f023 0301 	bic.w	r3, r3, #1
 8022514:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8022518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 802251c:	f7e6 b844 	b.w	80085a8 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022520:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022522:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022526:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 802252a:	f043 0301 	orr.w	r3, r3, #1
 802252e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8022532:	f7e6 f830 	bl	8008596 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022536:	6a23      	ldr	r3, [r4, #32]
 8022538:	b123      	cbz	r3, 8022544 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802253a:	4a03      	ldr	r2, [pc, #12]	; (8022548 <HAL_PCDEx_LPM_Callback+0x60>)
 802253c:	6913      	ldr	r3, [r2, #16]
 802253e:	f043 0306 	orr.w	r3, r3, #6
 8022542:	6113      	str	r3, [r2, #16]
 8022544:	bd10      	pop	{r4, pc}
 8022546:	bf00      	nop
 8022548:	e000ed00 	.word	0xe000ed00

0802254c <USBD_static_malloc>:
}
 802254c:	4800      	ldr	r0, [pc, #0]	; (8022550 <USBD_static_malloc+0x4>)
 802254e:	4770      	bx	lr
 8022550:	2008be80 	.word	0x2008be80

08022554 <USBD_static_free>:
{
 8022554:	4770      	bx	lr

08022556 <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 8022556:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 802255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802255c:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 802255e:	bf14      	ite	ne
 8022560:	2002      	movne	r0, #2
 8022562:	2000      	moveq	r0, #0
 8022564:	4770      	bx	lr

08022566 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8022566:	2000      	movs	r0, #0
 8022568:	4770      	bx	lr
	...

0802256c <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 802256c:	4b05      	ldr	r3, [pc, #20]	; (8022584 <CUSTOM_HID_OutEvent_FS+0x18>)
 
  for (uint8_t i = 0; i < 12; i++)
  {
    dataToReceive[i] = hhid->Report_buf[i];
 802256e:	4a06      	ldr	r2, [pc, #24]	; (8022588 <CUSTOM_HID_OutEvent_FS+0x1c>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 8022570:	f8d3 0290 	ldr.w	r0, [r3, #656]	; 0x290
 8022574:	2300      	movs	r3, #0
    dataToReceive[i] = hhid->Report_buf[i];
 8022576:	5cc1      	ldrb	r1, [r0, r3]
 8022578:	5499      	strb	r1, [r3, r2]
 802257a:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 12; i++)
 802257c:	2b0c      	cmp	r3, #12
 802257e:	d1fa      	bne.n	8022576 <CUSTOM_HID_OutEvent_FS+0xa>
  }
 
 
  return (USBD_OK);
}
 8022580:	2000      	movs	r0, #0
 8022582:	4770      	bx	lr
 8022584:	20091560 	.word	0x20091560
 8022588:	2008adf4 	.word	0x2008adf4

0802258c <CUSTOM_HID_Init_FS>:
 802258c:	2000      	movs	r0, #0
 802258e:	4770      	bx	lr

08022590 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8022590:	2312      	movs	r3, #18
 8022592:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8022594:	4800      	ldr	r0, [pc, #0]	; (8022598 <USBD_FS_DeviceDescriptor+0x8>)
 8022596:	4770      	bx	lr
 8022598:	20000ab4 	.word	0x20000ab4

0802259c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 802259c:	2304      	movs	r3, #4
 802259e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80225a0:	4800      	ldr	r0, [pc, #0]	; (80225a4 <USBD_FS_LangIDStrDescriptor+0x8>)
 80225a2:	4770      	bx	lr
 80225a4:	20000ac8 	.word	0x20000ac8

080225a8 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 80225a8:	230c      	movs	r3, #12
 80225aa:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80225ac:	4800      	ldr	r0, [pc, #0]	; (80225b0 <USBD_FS_USR_BOSDescriptor+0x8>)
 80225ae:	4770      	bx	lr
 80225b0:	20000aa8 	.word	0x20000aa8

080225b4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80225b4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80225b6:	4c04      	ldr	r4, [pc, #16]	; (80225c8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80225b8:	4804      	ldr	r0, [pc, #16]	; (80225cc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80225ba:	460a      	mov	r2, r1
 80225bc:	4621      	mov	r1, r4
 80225be:	f7e6 fa9f 	bl	8008b00 <USBD_GetString>
}
 80225c2:	4620      	mov	r0, r4
 80225c4:	bd10      	pop	{r4, pc}
 80225c6:	bf00      	nop
 80225c8:	20091c04 	.word	0x20091c04
 80225cc:	080342a2 	.word	0x080342a2

080225d0 <USBD_FS_ProductStrDescriptor>:
{
 80225d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80225d2:	4c04      	ldr	r4, [pc, #16]	; (80225e4 <USBD_FS_ProductStrDescriptor+0x14>)
 80225d4:	4804      	ldr	r0, [pc, #16]	; (80225e8 <USBD_FS_ProductStrDescriptor+0x18>)
 80225d6:	460a      	mov	r2, r1
 80225d8:	4621      	mov	r1, r4
 80225da:	f7e6 fa91 	bl	8008b00 <USBD_GetString>
}
 80225de:	4620      	mov	r0, r4
 80225e0:	bd10      	pop	{r4, pc}
 80225e2:	bf00      	nop
 80225e4:	20091c04 	.word	0x20091c04
 80225e8:	080342a9 	.word	0x080342a9

080225ec <USBD_FS_SerialStrDescriptor>:
{
 80225ec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80225ee:	4c04      	ldr	r4, [pc, #16]	; (8022600 <USBD_FS_SerialStrDescriptor+0x14>)
 80225f0:	4804      	ldr	r0, [pc, #16]	; (8022604 <USBD_FS_SerialStrDescriptor+0x18>)
 80225f2:	460a      	mov	r2, r1
 80225f4:	4621      	mov	r1, r4
 80225f6:	f7e6 fa83 	bl	8008b00 <USBD_GetString>
}
 80225fa:	4620      	mov	r0, r4
 80225fc:	bd10      	pop	{r4, pc}
 80225fe:	bf00      	nop
 8022600:	20091c04 	.word	0x20091c04
 8022604:	080342c7 	.word	0x080342c7

08022608 <USBD_FS_ConfigStrDescriptor>:
{
 8022608:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802260a:	4c04      	ldr	r4, [pc, #16]	; (802261c <USBD_FS_ConfigStrDescriptor+0x14>)
 802260c:	4804      	ldr	r0, [pc, #16]	; (8022620 <USBD_FS_ConfigStrDescriptor+0x18>)
 802260e:	460a      	mov	r2, r1
 8022610:	4621      	mov	r1, r4
 8022612:	f7e6 fa75 	bl	8008b00 <USBD_GetString>
}
 8022616:	4620      	mov	r0, r4
 8022618:	bd10      	pop	{r4, pc}
 802261a:	bf00      	nop
 802261c:	20091c04 	.word	0x20091c04
 8022620:	0803427b 	.word	0x0803427b

08022624 <USBD_FS_InterfaceStrDescriptor>:
{
 8022624:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022626:	4c04      	ldr	r4, [pc, #16]	; (8022638 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8022628:	4804      	ldr	r0, [pc, #16]	; (802263c <USBD_FS_InterfaceStrDescriptor+0x18>)
 802262a:	460a      	mov	r2, r1
 802262c:	4621      	mov	r1, r4
 802262e:	f7e6 fa67 	bl	8008b00 <USBD_GetString>
}
 8022632:	4620      	mov	r0, r4
 8022634:	bd10      	pop	{r4, pc}
 8022636:	bf00      	nop
 8022638:	20091c04 	.word	0x20091c04
 802263c:	0803428d 	.word	0x0803428d

08022640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8022640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8022678 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8022644:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8022646:	e003      	b.n	8022650 <LoopCopyDataInit>

08022648 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8022648:	4b0c      	ldr	r3, [pc, #48]	; (802267c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 802264a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 802264c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 802264e:	3104      	adds	r1, #4

08022650 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8022650:	480b      	ldr	r0, [pc, #44]	; (8022680 <LoopForever+0xa>)
	ldr	r3, =_edata
 8022652:	4b0c      	ldr	r3, [pc, #48]	; (8022684 <LoopForever+0xe>)
	adds	r2, r0, r1
 8022654:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8022656:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8022658:	d3f6      	bcc.n	8022648 <CopyDataInit>
	ldr	r2, =_sbss
 802265a:	4a0b      	ldr	r2, [pc, #44]	; (8022688 <LoopForever+0x12>)
	b	LoopFillZerobss
 802265c:	e002      	b.n	8022664 <LoopFillZerobss>

0802265e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 802265e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8022660:	f842 3b04 	str.w	r3, [r2], #4

08022664 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8022664:	4b09      	ldr	r3, [pc, #36]	; (802268c <LoopForever+0x16>)
	cmp	r2, r3
 8022666:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8022668:	d3f9      	bcc.n	802265e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 802266a:	f7ff fd93 	bl	8022194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802266e:	f000 f817 	bl	80226a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8022672:	f7fd ff9d 	bl	80205b0 <main>

08022676 <LoopForever>:

LoopForever:
    b LoopForever
 8022676:	e7fe      	b.n	8022676 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8022678:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 802267c:	080345d0 	.word	0x080345d0
	ldr	r0, =_sdata
 8022680:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8022684:	20001140 	.word	0x20001140
	ldr	r2, =_sbss
 8022688:	20001140 	.word	0x20001140
	ldr	r3, = _ebss
 802268c:	20091e14 	.word	0x20091e14

08022690 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8022690:	e7fe      	b.n	8022690 <ADC1_IRQHandler>
	...

08022694 <__errno>:
 8022694:	4b01      	ldr	r3, [pc, #4]	; (802269c <__errno+0x8>)
 8022696:	6818      	ldr	r0, [r3, #0]
 8022698:	4770      	bx	lr
 802269a:	bf00      	nop
 802269c:	20000acc 	.word	0x20000acc

080226a0 <__libc_init_array>:
 80226a0:	b570      	push	{r4, r5, r6, lr}
 80226a2:	4e0d      	ldr	r6, [pc, #52]	; (80226d8 <__libc_init_array+0x38>)
 80226a4:	4c0d      	ldr	r4, [pc, #52]	; (80226dc <__libc_init_array+0x3c>)
 80226a6:	1ba4      	subs	r4, r4, r6
 80226a8:	10a4      	asrs	r4, r4, #2
 80226aa:	2500      	movs	r5, #0
 80226ac:	42a5      	cmp	r5, r4
 80226ae:	d109      	bne.n	80226c4 <__libc_init_array+0x24>
 80226b0:	4e0b      	ldr	r6, [pc, #44]	; (80226e0 <__libc_init_array+0x40>)
 80226b2:	4c0c      	ldr	r4, [pc, #48]	; (80226e4 <__libc_init_array+0x44>)
 80226b4:	f004 fdfc 	bl	80272b0 <_init>
 80226b8:	1ba4      	subs	r4, r4, r6
 80226ba:	10a4      	asrs	r4, r4, #2
 80226bc:	2500      	movs	r5, #0
 80226be:	42a5      	cmp	r5, r4
 80226c0:	d105      	bne.n	80226ce <__libc_init_array+0x2e>
 80226c2:	bd70      	pop	{r4, r5, r6, pc}
 80226c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80226c8:	4798      	blx	r3
 80226ca:	3501      	adds	r5, #1
 80226cc:	e7ee      	b.n	80226ac <__libc_init_array+0xc>
 80226ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80226d2:	4798      	blx	r3
 80226d4:	3501      	adds	r5, #1
 80226d6:	e7f2      	b.n	80226be <__libc_init_array+0x1e>
 80226d8:	080345c8 	.word	0x080345c8
 80226dc:	080345c8 	.word	0x080345c8
 80226e0:	080345c8 	.word	0x080345c8
 80226e4:	080345cc 	.word	0x080345cc

080226e8 <memcpy>:
 80226e8:	b510      	push	{r4, lr}
 80226ea:	1e43      	subs	r3, r0, #1
 80226ec:	440a      	add	r2, r1
 80226ee:	4291      	cmp	r1, r2
 80226f0:	d100      	bne.n	80226f4 <memcpy+0xc>
 80226f2:	bd10      	pop	{r4, pc}
 80226f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80226f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80226fc:	e7f7      	b.n	80226ee <memcpy+0x6>

080226fe <memset>:
 80226fe:	4402      	add	r2, r0
 8022700:	4603      	mov	r3, r0
 8022702:	4293      	cmp	r3, r2
 8022704:	d100      	bne.n	8022708 <memset+0xa>
 8022706:	4770      	bx	lr
 8022708:	f803 1b01 	strb.w	r1, [r3], #1
 802270c:	e7f9      	b.n	8022702 <memset+0x4>
	...

08022710 <sprintf>:
 8022710:	b40e      	push	{r1, r2, r3}
 8022712:	b500      	push	{lr}
 8022714:	b09c      	sub	sp, #112	; 0x70
 8022716:	f44f 7102 	mov.w	r1, #520	; 0x208
 802271a:	ab1d      	add	r3, sp, #116	; 0x74
 802271c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8022720:	9002      	str	r0, [sp, #8]
 8022722:	9006      	str	r0, [sp, #24]
 8022724:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022728:	480a      	ldr	r0, [pc, #40]	; (8022754 <sprintf+0x44>)
 802272a:	9104      	str	r1, [sp, #16]
 802272c:	9107      	str	r1, [sp, #28]
 802272e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8022732:	f853 2b04 	ldr.w	r2, [r3], #4
 8022736:	f8ad 1016 	strh.w	r1, [sp, #22]
 802273a:	6800      	ldr	r0, [r0, #0]
 802273c:	9301      	str	r3, [sp, #4]
 802273e:	a902      	add	r1, sp, #8
 8022740:	f000 f822 	bl	8022788 <_svfprintf_r>
 8022744:	9b02      	ldr	r3, [sp, #8]
 8022746:	2200      	movs	r2, #0
 8022748:	701a      	strb	r2, [r3, #0]
 802274a:	b01c      	add	sp, #112	; 0x70
 802274c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022750:	b003      	add	sp, #12
 8022752:	4770      	bx	lr
 8022754:	20000acc 	.word	0x20000acc

08022758 <strcat>:
 8022758:	b510      	push	{r4, lr}
 802275a:	4602      	mov	r2, r0
 802275c:	4613      	mov	r3, r2
 802275e:	3201      	adds	r2, #1
 8022760:	781c      	ldrb	r4, [r3, #0]
 8022762:	2c00      	cmp	r4, #0
 8022764:	d1fa      	bne.n	802275c <strcat+0x4>
 8022766:	3b01      	subs	r3, #1
 8022768:	f811 2b01 	ldrb.w	r2, [r1], #1
 802276c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022770:	2a00      	cmp	r2, #0
 8022772:	d1f9      	bne.n	8022768 <strcat+0x10>
 8022774:	bd10      	pop	{r4, pc}

08022776 <strcpy>:
 8022776:	4603      	mov	r3, r0
 8022778:	f811 2b01 	ldrb.w	r2, [r1], #1
 802277c:	f803 2b01 	strb.w	r2, [r3], #1
 8022780:	2a00      	cmp	r2, #0
 8022782:	d1f9      	bne.n	8022778 <strcpy+0x2>
 8022784:	4770      	bx	lr
	...

08022788 <_svfprintf_r>:
 8022788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802278c:	b0bd      	sub	sp, #244	; 0xf4
 802278e:	468a      	mov	sl, r1
 8022790:	4615      	mov	r5, r2
 8022792:	461f      	mov	r7, r3
 8022794:	4683      	mov	fp, r0
 8022796:	f001 fe25 	bl	80243e4 <_localeconv_r>
 802279a:	6803      	ldr	r3, [r0, #0]
 802279c:	930d      	str	r3, [sp, #52]	; 0x34
 802279e:	4618      	mov	r0, r3
 80227a0:	f7dd fd7e 	bl	80002a0 <strlen>
 80227a4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80227a8:	9008      	str	r0, [sp, #32]
 80227aa:	061b      	lsls	r3, r3, #24
 80227ac:	d518      	bpl.n	80227e0 <_svfprintf_r+0x58>
 80227ae:	f8da 3010 	ldr.w	r3, [sl, #16]
 80227b2:	b9ab      	cbnz	r3, 80227e0 <_svfprintf_r+0x58>
 80227b4:	2140      	movs	r1, #64	; 0x40
 80227b6:	4658      	mov	r0, fp
 80227b8:	f001 fe2a 	bl	8024410 <_malloc_r>
 80227bc:	f8ca 0000 	str.w	r0, [sl]
 80227c0:	f8ca 0010 	str.w	r0, [sl, #16]
 80227c4:	b948      	cbnz	r0, 80227da <_svfprintf_r+0x52>
 80227c6:	230c      	movs	r3, #12
 80227c8:	f8cb 3000 	str.w	r3, [fp]
 80227cc:	f04f 33ff 	mov.w	r3, #4294967295
 80227d0:	9309      	str	r3, [sp, #36]	; 0x24
 80227d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80227d4:	b03d      	add	sp, #244	; 0xf4
 80227d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227da:	2340      	movs	r3, #64	; 0x40
 80227dc:	f8ca 3014 	str.w	r3, [sl, #20]
 80227e0:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8022a48 <_svfprintf_r+0x2c0>
 80227e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80227e8:	2300      	movs	r3, #0
 80227ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80227ec:	941f      	str	r4, [sp, #124]	; 0x7c
 80227ee:	9321      	str	r3, [sp, #132]	; 0x84
 80227f0:	9320      	str	r3, [sp, #128]	; 0x80
 80227f2:	9505      	str	r5, [sp, #20]
 80227f4:	9303      	str	r3, [sp, #12]
 80227f6:	9311      	str	r3, [sp, #68]	; 0x44
 80227f8:	9310      	str	r3, [sp, #64]	; 0x40
 80227fa:	9309      	str	r3, [sp, #36]	; 0x24
 80227fc:	9d05      	ldr	r5, [sp, #20]
 80227fe:	462b      	mov	r3, r5
 8022800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022804:	b112      	cbz	r2, 802280c <_svfprintf_r+0x84>
 8022806:	2a25      	cmp	r2, #37	; 0x25
 8022808:	f040 8083 	bne.w	8022912 <_svfprintf_r+0x18a>
 802280c:	9b05      	ldr	r3, [sp, #20]
 802280e:	1aee      	subs	r6, r5, r3
 8022810:	d00d      	beq.n	802282e <_svfprintf_r+0xa6>
 8022812:	e884 0048 	stmia.w	r4, {r3, r6}
 8022816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022818:	4433      	add	r3, r6
 802281a:	9321      	str	r3, [sp, #132]	; 0x84
 802281c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802281e:	3301      	adds	r3, #1
 8022820:	2b07      	cmp	r3, #7
 8022822:	9320      	str	r3, [sp, #128]	; 0x80
 8022824:	dc77      	bgt.n	8022916 <_svfprintf_r+0x18e>
 8022826:	3408      	adds	r4, #8
 8022828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802282a:	4433      	add	r3, r6
 802282c:	9309      	str	r3, [sp, #36]	; 0x24
 802282e:	782b      	ldrb	r3, [r5, #0]
 8022830:	2b00      	cmp	r3, #0
 8022832:	f000 8729 	beq.w	8023688 <_svfprintf_r+0xf00>
 8022836:	2300      	movs	r3, #0
 8022838:	1c69      	adds	r1, r5, #1
 802283a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 802283e:	461a      	mov	r2, r3
 8022840:	f04f 39ff 	mov.w	r9, #4294967295
 8022844:	930a      	str	r3, [sp, #40]	; 0x28
 8022846:	461d      	mov	r5, r3
 8022848:	200a      	movs	r0, #10
 802284a:	1c4e      	adds	r6, r1, #1
 802284c:	7809      	ldrb	r1, [r1, #0]
 802284e:	9605      	str	r6, [sp, #20]
 8022850:	9102      	str	r1, [sp, #8]
 8022852:	9902      	ldr	r1, [sp, #8]
 8022854:	3920      	subs	r1, #32
 8022856:	2958      	cmp	r1, #88	; 0x58
 8022858:	f200 8418 	bhi.w	802308c <_svfprintf_r+0x904>
 802285c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8022860:	041600a6 	.word	0x041600a6
 8022864:	00ab0416 	.word	0x00ab0416
 8022868:	04160416 	.word	0x04160416
 802286c:	04160416 	.word	0x04160416
 8022870:	04160416 	.word	0x04160416
 8022874:	006500ae 	.word	0x006500ae
 8022878:	00b70416 	.word	0x00b70416
 802287c:	041600ba 	.word	0x041600ba
 8022880:	00da00d7 	.word	0x00da00d7
 8022884:	00da00da 	.word	0x00da00da
 8022888:	00da00da 	.word	0x00da00da
 802288c:	00da00da 	.word	0x00da00da
 8022890:	00da00da 	.word	0x00da00da
 8022894:	04160416 	.word	0x04160416
 8022898:	04160416 	.word	0x04160416
 802289c:	04160416 	.word	0x04160416
 80228a0:	04160416 	.word	0x04160416
 80228a4:	04160416 	.word	0x04160416
 80228a8:	012b0115 	.word	0x012b0115
 80228ac:	012b0416 	.word	0x012b0416
 80228b0:	04160416 	.word	0x04160416
 80228b4:	04160416 	.word	0x04160416
 80228b8:	041600ed 	.word	0x041600ed
 80228bc:	03400416 	.word	0x03400416
 80228c0:	04160416 	.word	0x04160416
 80228c4:	04160416 	.word	0x04160416
 80228c8:	03a80416 	.word	0x03a80416
 80228cc:	04160416 	.word	0x04160416
 80228d0:	04160086 	.word	0x04160086
 80228d4:	04160416 	.word	0x04160416
 80228d8:	04160416 	.word	0x04160416
 80228dc:	04160416 	.word	0x04160416
 80228e0:	04160416 	.word	0x04160416
 80228e4:	01070416 	.word	0x01070416
 80228e8:	012b006b 	.word	0x012b006b
 80228ec:	012b012b 	.word	0x012b012b
 80228f0:	006b00f0 	.word	0x006b00f0
 80228f4:	04160416 	.word	0x04160416
 80228f8:	041600fa 	.word	0x041600fa
 80228fc:	03420322 	.word	0x03420322
 8022900:	01010376 	.word	0x01010376
 8022904:	03870416 	.word	0x03870416
 8022908:	03aa0416 	.word	0x03aa0416
 802290c:	04160416 	.word	0x04160416
 8022910:	03c2      	.short	0x03c2
 8022912:	461d      	mov	r5, r3
 8022914:	e773      	b.n	80227fe <_svfprintf_r+0x76>
 8022916:	aa1f      	add	r2, sp, #124	; 0x7c
 8022918:	4651      	mov	r1, sl
 802291a:	4658      	mov	r0, fp
 802291c:	f002 fa72 	bl	8024e04 <__ssprint_r>
 8022920:	2800      	cmp	r0, #0
 8022922:	f040 8692 	bne.w	802364a <_svfprintf_r+0xec2>
 8022926:	ac2c      	add	r4, sp, #176	; 0xb0
 8022928:	e77e      	b.n	8022828 <_svfprintf_r+0xa0>
 802292a:	2301      	movs	r3, #1
 802292c:	222b      	movs	r2, #43	; 0x2b
 802292e:	9905      	ldr	r1, [sp, #20]
 8022930:	e78b      	b.n	802284a <_svfprintf_r+0xc2>
 8022932:	460f      	mov	r7, r1
 8022934:	e7fb      	b.n	802292e <_svfprintf_r+0x1a6>
 8022936:	b10b      	cbz	r3, 802293c <_svfprintf_r+0x1b4>
 8022938:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 802293c:	06ae      	lsls	r6, r5, #26
 802293e:	f140 80aa 	bpl.w	8022a96 <_svfprintf_r+0x30e>
 8022942:	3707      	adds	r7, #7
 8022944:	f027 0707 	bic.w	r7, r7, #7
 8022948:	f107 0308 	add.w	r3, r7, #8
 802294c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8022950:	9304      	str	r3, [sp, #16]
 8022952:	2e00      	cmp	r6, #0
 8022954:	f177 0300 	sbcs.w	r3, r7, #0
 8022958:	da06      	bge.n	8022968 <_svfprintf_r+0x1e0>
 802295a:	4276      	negs	r6, r6
 802295c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8022960:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8022964:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8022968:	2301      	movs	r3, #1
 802296a:	e2ca      	b.n	8022f02 <_svfprintf_r+0x77a>
 802296c:	b10b      	cbz	r3, 8022972 <_svfprintf_r+0x1ea>
 802296e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022972:	4b37      	ldr	r3, [pc, #220]	; (8022a50 <_svfprintf_r+0x2c8>)
 8022974:	9311      	str	r3, [sp, #68]	; 0x44
 8022976:	06ab      	lsls	r3, r5, #26
 8022978:	f140 8339 	bpl.w	8022fee <_svfprintf_r+0x866>
 802297c:	3707      	adds	r7, #7
 802297e:	f027 0707 	bic.w	r7, r7, #7
 8022982:	f107 0308 	add.w	r3, r7, #8
 8022986:	e9d7 6700 	ldrd	r6, r7, [r7]
 802298a:	9304      	str	r3, [sp, #16]
 802298c:	07e8      	lsls	r0, r5, #31
 802298e:	d50b      	bpl.n	80229a8 <_svfprintf_r+0x220>
 8022990:	ea56 0307 	orrs.w	r3, r6, r7
 8022994:	d008      	beq.n	80229a8 <_svfprintf_r+0x220>
 8022996:	2330      	movs	r3, #48	; 0x30
 8022998:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 802299c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80229a0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80229a4:	f045 0502 	orr.w	r5, r5, #2
 80229a8:	2302      	movs	r3, #2
 80229aa:	e2a7      	b.n	8022efc <_svfprintf_r+0x774>
 80229ac:	2a00      	cmp	r2, #0
 80229ae:	d1be      	bne.n	802292e <_svfprintf_r+0x1a6>
 80229b0:	2301      	movs	r3, #1
 80229b2:	2220      	movs	r2, #32
 80229b4:	e7bb      	b.n	802292e <_svfprintf_r+0x1a6>
 80229b6:	f045 0501 	orr.w	r5, r5, #1
 80229ba:	e7b8      	b.n	802292e <_svfprintf_r+0x1a6>
 80229bc:	683e      	ldr	r6, [r7, #0]
 80229be:	960a      	str	r6, [sp, #40]	; 0x28
 80229c0:	2e00      	cmp	r6, #0
 80229c2:	f107 0104 	add.w	r1, r7, #4
 80229c6:	dab4      	bge.n	8022932 <_svfprintf_r+0x1aa>
 80229c8:	4276      	negs	r6, r6
 80229ca:	960a      	str	r6, [sp, #40]	; 0x28
 80229cc:	460f      	mov	r7, r1
 80229ce:	f045 0504 	orr.w	r5, r5, #4
 80229d2:	e7ac      	b.n	802292e <_svfprintf_r+0x1a6>
 80229d4:	9905      	ldr	r1, [sp, #20]
 80229d6:	1c4e      	adds	r6, r1, #1
 80229d8:	7809      	ldrb	r1, [r1, #0]
 80229da:	9102      	str	r1, [sp, #8]
 80229dc:	292a      	cmp	r1, #42	; 0x2a
 80229de:	d010      	beq.n	8022a02 <_svfprintf_r+0x27a>
 80229e0:	f04f 0900 	mov.w	r9, #0
 80229e4:	9605      	str	r6, [sp, #20]
 80229e6:	9902      	ldr	r1, [sp, #8]
 80229e8:	3930      	subs	r1, #48	; 0x30
 80229ea:	2909      	cmp	r1, #9
 80229ec:	f63f af31 	bhi.w	8022852 <_svfprintf_r+0xca>
 80229f0:	fb00 1909 	mla	r9, r0, r9, r1
 80229f4:	9905      	ldr	r1, [sp, #20]
 80229f6:	460e      	mov	r6, r1
 80229f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80229fc:	9102      	str	r1, [sp, #8]
 80229fe:	9605      	str	r6, [sp, #20]
 8022a00:	e7f1      	b.n	80229e6 <_svfprintf_r+0x25e>
 8022a02:	6839      	ldr	r1, [r7, #0]
 8022a04:	9605      	str	r6, [sp, #20]
 8022a06:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8022a0a:	3704      	adds	r7, #4
 8022a0c:	e78f      	b.n	802292e <_svfprintf_r+0x1a6>
 8022a0e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8022a12:	e78c      	b.n	802292e <_svfprintf_r+0x1a6>
 8022a14:	2100      	movs	r1, #0
 8022a16:	910a      	str	r1, [sp, #40]	; 0x28
 8022a18:	9902      	ldr	r1, [sp, #8]
 8022a1a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022a1c:	3930      	subs	r1, #48	; 0x30
 8022a1e:	fb00 1106 	mla	r1, r0, r6, r1
 8022a22:	910a      	str	r1, [sp, #40]	; 0x28
 8022a24:	9905      	ldr	r1, [sp, #20]
 8022a26:	460e      	mov	r6, r1
 8022a28:	f816 1b01 	ldrb.w	r1, [r6], #1
 8022a2c:	9102      	str	r1, [sp, #8]
 8022a2e:	9902      	ldr	r1, [sp, #8]
 8022a30:	9605      	str	r6, [sp, #20]
 8022a32:	3930      	subs	r1, #48	; 0x30
 8022a34:	2909      	cmp	r1, #9
 8022a36:	d9ef      	bls.n	8022a18 <_svfprintf_r+0x290>
 8022a38:	e70b      	b.n	8022852 <_svfprintf_r+0xca>
 8022a3a:	f045 0508 	orr.w	r5, r5, #8
 8022a3e:	e776      	b.n	802292e <_svfprintf_r+0x1a6>
 8022a40:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8022a44:	e773      	b.n	802292e <_svfprintf_r+0x1a6>
 8022a46:	bf00      	nop
	...
 8022a50:	080342e0 	.word	0x080342e0
 8022a54:	9905      	ldr	r1, [sp, #20]
 8022a56:	7809      	ldrb	r1, [r1, #0]
 8022a58:	296c      	cmp	r1, #108	; 0x6c
 8022a5a:	d105      	bne.n	8022a68 <_svfprintf_r+0x2e0>
 8022a5c:	9905      	ldr	r1, [sp, #20]
 8022a5e:	3101      	adds	r1, #1
 8022a60:	9105      	str	r1, [sp, #20]
 8022a62:	f045 0520 	orr.w	r5, r5, #32
 8022a66:	e762      	b.n	802292e <_svfprintf_r+0x1a6>
 8022a68:	f045 0510 	orr.w	r5, r5, #16
 8022a6c:	e75f      	b.n	802292e <_svfprintf_r+0x1a6>
 8022a6e:	1d3b      	adds	r3, r7, #4
 8022a70:	9304      	str	r3, [sp, #16]
 8022a72:	2600      	movs	r6, #0
 8022a74:	683b      	ldr	r3, [r7, #0]
 8022a76:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8022a7a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8022a7e:	f04f 0901 	mov.w	r9, #1
 8022a82:	4637      	mov	r7, r6
 8022a84:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8022a88:	e11b      	b.n	8022cc2 <_svfprintf_r+0x53a>
 8022a8a:	b10b      	cbz	r3, 8022a90 <_svfprintf_r+0x308>
 8022a8c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022a90:	f045 0510 	orr.w	r5, r5, #16
 8022a94:	e752      	b.n	802293c <_svfprintf_r+0x1b4>
 8022a96:	f015 0f10 	tst.w	r5, #16
 8022a9a:	f107 0304 	add.w	r3, r7, #4
 8022a9e:	d003      	beq.n	8022aa8 <_svfprintf_r+0x320>
 8022aa0:	683e      	ldr	r6, [r7, #0]
 8022aa2:	9304      	str	r3, [sp, #16]
 8022aa4:	17f7      	asrs	r7, r6, #31
 8022aa6:	e754      	b.n	8022952 <_svfprintf_r+0x1ca>
 8022aa8:	683e      	ldr	r6, [r7, #0]
 8022aaa:	9304      	str	r3, [sp, #16]
 8022aac:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022ab0:	bf18      	it	ne
 8022ab2:	b236      	sxthne	r6, r6
 8022ab4:	e7f6      	b.n	8022aa4 <_svfprintf_r+0x31c>
 8022ab6:	b10b      	cbz	r3, 8022abc <_svfprintf_r+0x334>
 8022ab8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022abc:	3707      	adds	r7, #7
 8022abe:	f027 0707 	bic.w	r7, r7, #7
 8022ac2:	f107 0308 	add.w	r3, r7, #8
 8022ac6:	9304      	str	r3, [sp, #16]
 8022ac8:	ed97 7b00 	vldr	d7, [r7]
 8022acc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8022ad0:	9b06      	ldr	r3, [sp, #24]
 8022ad2:	9312      	str	r3, [sp, #72]	; 0x48
 8022ad4:	9b07      	ldr	r3, [sp, #28]
 8022ad6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022ada:	9313      	str	r3, [sp, #76]	; 0x4c
 8022adc:	f04f 32ff 	mov.w	r2, #4294967295
 8022ae0:	4b4a      	ldr	r3, [pc, #296]	; (8022c0c <_svfprintf_r+0x484>)
 8022ae2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8022ae6:	f7de f835 	bl	8000b54 <__aeabi_dcmpun>
 8022aea:	2800      	cmp	r0, #0
 8022aec:	f040 85d5 	bne.w	802369a <_svfprintf_r+0xf12>
 8022af0:	f04f 32ff 	mov.w	r2, #4294967295
 8022af4:	4b45      	ldr	r3, [pc, #276]	; (8022c0c <_svfprintf_r+0x484>)
 8022af6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8022afa:	f7de f80d 	bl	8000b18 <__aeabi_dcmple>
 8022afe:	2800      	cmp	r0, #0
 8022b00:	f040 85cb 	bne.w	802369a <_svfprintf_r+0xf12>
 8022b04:	2200      	movs	r2, #0
 8022b06:	2300      	movs	r3, #0
 8022b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022b0c:	f7dd fffa 	bl	8000b04 <__aeabi_dcmplt>
 8022b10:	b110      	cbz	r0, 8022b18 <_svfprintf_r+0x390>
 8022b12:	232d      	movs	r3, #45	; 0x2d
 8022b14:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8022b18:	4b3d      	ldr	r3, [pc, #244]	; (8022c10 <_svfprintf_r+0x488>)
 8022b1a:	4a3e      	ldr	r2, [pc, #248]	; (8022c14 <_svfprintf_r+0x48c>)
 8022b1c:	9902      	ldr	r1, [sp, #8]
 8022b1e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8022b22:	2947      	cmp	r1, #71	; 0x47
 8022b24:	bfcc      	ite	gt
 8022b26:	4690      	movgt	r8, r2
 8022b28:	4698      	movle	r8, r3
 8022b2a:	f04f 0903 	mov.w	r9, #3
 8022b2e:	2600      	movs	r6, #0
 8022b30:	4637      	mov	r7, r6
 8022b32:	e0c6      	b.n	8022cc2 <_svfprintf_r+0x53a>
 8022b34:	f1b9 3fff 	cmp.w	r9, #4294967295
 8022b38:	d022      	beq.n	8022b80 <_svfprintf_r+0x3f8>
 8022b3a:	9b02      	ldr	r3, [sp, #8]
 8022b3c:	f023 0320 	bic.w	r3, r3, #32
 8022b40:	2b47      	cmp	r3, #71	; 0x47
 8022b42:	d104      	bne.n	8022b4e <_svfprintf_r+0x3c6>
 8022b44:	f1b9 0f00 	cmp.w	r9, #0
 8022b48:	bf08      	it	eq
 8022b4a:	f04f 0901 	moveq.w	r9, #1
 8022b4e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8022b52:	930c      	str	r3, [sp, #48]	; 0x30
 8022b54:	9b07      	ldr	r3, [sp, #28]
 8022b56:	2b00      	cmp	r3, #0
 8022b58:	da15      	bge.n	8022b86 <_svfprintf_r+0x3fe>
 8022b5a:	9b06      	ldr	r3, [sp, #24]
 8022b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8022b5e:	9b07      	ldr	r3, [sp, #28]
 8022b60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022b64:	930f      	str	r3, [sp, #60]	; 0x3c
 8022b66:	232d      	movs	r3, #45	; 0x2d
 8022b68:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b6a:	9b02      	ldr	r3, [sp, #8]
 8022b6c:	f023 0720 	bic.w	r7, r3, #32
 8022b70:	2f46      	cmp	r7, #70	; 0x46
 8022b72:	d00e      	beq.n	8022b92 <_svfprintf_r+0x40a>
 8022b74:	2f45      	cmp	r7, #69	; 0x45
 8022b76:	d146      	bne.n	8022c06 <_svfprintf_r+0x47e>
 8022b78:	f109 0601 	add.w	r6, r9, #1
 8022b7c:	2102      	movs	r1, #2
 8022b7e:	e00a      	b.n	8022b96 <_svfprintf_r+0x40e>
 8022b80:	f04f 0906 	mov.w	r9, #6
 8022b84:	e7e3      	b.n	8022b4e <_svfprintf_r+0x3c6>
 8022b86:	ed9d 7b06 	vldr	d7, [sp, #24]
 8022b8a:	2300      	movs	r3, #0
 8022b8c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8022b90:	e7ea      	b.n	8022b68 <_svfprintf_r+0x3e0>
 8022b92:	464e      	mov	r6, r9
 8022b94:	2103      	movs	r1, #3
 8022b96:	ab1d      	add	r3, sp, #116	; 0x74
 8022b98:	9301      	str	r3, [sp, #4]
 8022b9a:	ab1a      	add	r3, sp, #104	; 0x68
 8022b9c:	9300      	str	r3, [sp, #0]
 8022b9e:	4632      	mov	r2, r6
 8022ba0:	ab19      	add	r3, sp, #100	; 0x64
 8022ba2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8022ba6:	4658      	mov	r0, fp
 8022ba8:	f000 fe4e 	bl	8023848 <_dtoa_r>
 8022bac:	2f47      	cmp	r7, #71	; 0x47
 8022bae:	4680      	mov	r8, r0
 8022bb0:	d102      	bne.n	8022bb8 <_svfprintf_r+0x430>
 8022bb2:	07e8      	lsls	r0, r5, #31
 8022bb4:	f140 857e 	bpl.w	80236b4 <_svfprintf_r+0xf2c>
 8022bb8:	eb08 0306 	add.w	r3, r8, r6
 8022bbc:	2f46      	cmp	r7, #70	; 0x46
 8022bbe:	9303      	str	r3, [sp, #12]
 8022bc0:	d111      	bne.n	8022be6 <_svfprintf_r+0x45e>
 8022bc2:	f898 3000 	ldrb.w	r3, [r8]
 8022bc6:	2b30      	cmp	r3, #48	; 0x30
 8022bc8:	d109      	bne.n	8022bde <_svfprintf_r+0x456>
 8022bca:	2200      	movs	r2, #0
 8022bcc:	2300      	movs	r3, #0
 8022bce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8022bd2:	f7dd ff8d 	bl	8000af0 <__aeabi_dcmpeq>
 8022bd6:	b910      	cbnz	r0, 8022bde <_svfprintf_r+0x456>
 8022bd8:	f1c6 0601 	rsb	r6, r6, #1
 8022bdc:	9619      	str	r6, [sp, #100]	; 0x64
 8022bde:	9a03      	ldr	r2, [sp, #12]
 8022be0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022be2:	441a      	add	r2, r3
 8022be4:	9203      	str	r2, [sp, #12]
 8022be6:	2200      	movs	r2, #0
 8022be8:	2300      	movs	r3, #0
 8022bea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8022bee:	f7dd ff7f 	bl	8000af0 <__aeabi_dcmpeq>
 8022bf2:	b988      	cbnz	r0, 8022c18 <_svfprintf_r+0x490>
 8022bf4:	2230      	movs	r2, #48	; 0x30
 8022bf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022bf8:	9903      	ldr	r1, [sp, #12]
 8022bfa:	4299      	cmp	r1, r3
 8022bfc:	d90e      	bls.n	8022c1c <_svfprintf_r+0x494>
 8022bfe:	1c59      	adds	r1, r3, #1
 8022c00:	911d      	str	r1, [sp, #116]	; 0x74
 8022c02:	701a      	strb	r2, [r3, #0]
 8022c04:	e7f7      	b.n	8022bf6 <_svfprintf_r+0x46e>
 8022c06:	464e      	mov	r6, r9
 8022c08:	e7b8      	b.n	8022b7c <_svfprintf_r+0x3f4>
 8022c0a:	bf00      	nop
 8022c0c:	7fefffff 	.word	0x7fefffff
 8022c10:	080342d4 	.word	0x080342d4
 8022c14:	080342d8 	.word	0x080342d8
 8022c18:	9b03      	ldr	r3, [sp, #12]
 8022c1a:	931d      	str	r3, [sp, #116]	; 0x74
 8022c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022c1e:	2f47      	cmp	r7, #71	; 0x47
 8022c20:	eba3 0308 	sub.w	r3, r3, r8
 8022c24:	9303      	str	r3, [sp, #12]
 8022c26:	f040 80fa 	bne.w	8022e1e <_svfprintf_r+0x696>
 8022c2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022c2c:	1cd9      	adds	r1, r3, #3
 8022c2e:	db02      	blt.n	8022c36 <_svfprintf_r+0x4ae>
 8022c30:	4599      	cmp	r9, r3
 8022c32:	f280 8120 	bge.w	8022e76 <_svfprintf_r+0x6ee>
 8022c36:	9b02      	ldr	r3, [sp, #8]
 8022c38:	3b02      	subs	r3, #2
 8022c3a:	9302      	str	r3, [sp, #8]
 8022c3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8022c3e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8022c42:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8022c46:	1e53      	subs	r3, r2, #1
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	9319      	str	r3, [sp, #100]	; 0x64
 8022c4c:	bfb6      	itet	lt
 8022c4e:	f1c2 0301 	rsblt	r3, r2, #1
 8022c52:	222b      	movge	r2, #43	; 0x2b
 8022c54:	222d      	movlt	r2, #45	; 0x2d
 8022c56:	2b09      	cmp	r3, #9
 8022c58:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8022c5c:	f340 80fb 	ble.w	8022e56 <_svfprintf_r+0x6ce>
 8022c60:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8022c64:	260a      	movs	r6, #10
 8022c66:	fb93 f0f6 	sdiv	r0, r3, r6
 8022c6a:	fb06 3310 	mls	r3, r6, r0, r3
 8022c6e:	3330      	adds	r3, #48	; 0x30
 8022c70:	2809      	cmp	r0, #9
 8022c72:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022c76:	f102 31ff 	add.w	r1, r2, #4294967295
 8022c7a:	4603      	mov	r3, r0
 8022c7c:	f300 80e4 	bgt.w	8022e48 <_svfprintf_r+0x6c0>
 8022c80:	3330      	adds	r3, #48	; 0x30
 8022c82:	f801 3c01 	strb.w	r3, [r1, #-1]
 8022c86:	3a02      	subs	r2, #2
 8022c88:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8022c8c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8022c90:	4282      	cmp	r2, r0
 8022c92:	4619      	mov	r1, r3
 8022c94:	f0c0 80da 	bcc.w	8022e4c <_svfprintf_r+0x6c4>
 8022c98:	9a03      	ldr	r2, [sp, #12]
 8022c9a:	ab1b      	add	r3, sp, #108	; 0x6c
 8022c9c:	1acb      	subs	r3, r1, r3
 8022c9e:	2a01      	cmp	r2, #1
 8022ca0:	9310      	str	r3, [sp, #64]	; 0x40
 8022ca2:	eb03 0902 	add.w	r9, r3, r2
 8022ca6:	dc02      	bgt.n	8022cae <_svfprintf_r+0x526>
 8022ca8:	f015 0701 	ands.w	r7, r5, #1
 8022cac:	d002      	beq.n	8022cb4 <_svfprintf_r+0x52c>
 8022cae:	9b08      	ldr	r3, [sp, #32]
 8022cb0:	2700      	movs	r7, #0
 8022cb2:	4499      	add	r9, r3
 8022cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022cb6:	b113      	cbz	r3, 8022cbe <_svfprintf_r+0x536>
 8022cb8:	232d      	movs	r3, #45	; 0x2d
 8022cba:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8022cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022cc0:	2600      	movs	r6, #0
 8022cc2:	454e      	cmp	r6, r9
 8022cc4:	4633      	mov	r3, r6
 8022cc6:	bfb8      	it	lt
 8022cc8:	464b      	movlt	r3, r9
 8022cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ccc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8022cd0:	b113      	cbz	r3, 8022cd8 <_svfprintf_r+0x550>
 8022cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022cd4:	3301      	adds	r3, #1
 8022cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cd8:	f015 0302 	ands.w	r3, r5, #2
 8022cdc:	9314      	str	r3, [sp, #80]	; 0x50
 8022cde:	bf1e      	ittt	ne
 8022ce0:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8022ce2:	3302      	addne	r3, #2
 8022ce4:	930b      	strne	r3, [sp, #44]	; 0x2c
 8022ce6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8022cea:	9315      	str	r3, [sp, #84]	; 0x54
 8022cec:	d118      	bne.n	8022d20 <_svfprintf_r+0x598>
 8022cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022cf2:	1a9b      	subs	r3, r3, r2
 8022cf4:	2b00      	cmp	r3, #0
 8022cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8022cf8:	dd12      	ble.n	8022d20 <_svfprintf_r+0x598>
 8022cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022cfc:	2b10      	cmp	r3, #16
 8022cfe:	4ba9      	ldr	r3, [pc, #676]	; (8022fa4 <_svfprintf_r+0x81c>)
 8022d00:	6023      	str	r3, [r4, #0]
 8022d02:	f300 81d5 	bgt.w	80230b0 <_svfprintf_r+0x928>
 8022d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022d08:	6063      	str	r3, [r4, #4]
 8022d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022d0e:	4413      	add	r3, r2
 8022d10:	9321      	str	r3, [sp, #132]	; 0x84
 8022d12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d14:	3301      	adds	r3, #1
 8022d16:	2b07      	cmp	r3, #7
 8022d18:	9320      	str	r3, [sp, #128]	; 0x80
 8022d1a:	f300 81e2 	bgt.w	80230e2 <_svfprintf_r+0x95a>
 8022d1e:	3408      	adds	r4, #8
 8022d20:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8022d24:	b173      	cbz	r3, 8022d44 <_svfprintf_r+0x5bc>
 8022d26:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8022d2a:	6023      	str	r3, [r4, #0]
 8022d2c:	2301      	movs	r3, #1
 8022d2e:	6063      	str	r3, [r4, #4]
 8022d30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022d32:	3301      	adds	r3, #1
 8022d34:	9321      	str	r3, [sp, #132]	; 0x84
 8022d36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d38:	3301      	adds	r3, #1
 8022d3a:	2b07      	cmp	r3, #7
 8022d3c:	9320      	str	r3, [sp, #128]	; 0x80
 8022d3e:	f300 81da 	bgt.w	80230f6 <_svfprintf_r+0x96e>
 8022d42:	3408      	adds	r4, #8
 8022d44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022d46:	b16b      	cbz	r3, 8022d64 <_svfprintf_r+0x5dc>
 8022d48:	ab18      	add	r3, sp, #96	; 0x60
 8022d4a:	6023      	str	r3, [r4, #0]
 8022d4c:	2302      	movs	r3, #2
 8022d4e:	6063      	str	r3, [r4, #4]
 8022d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022d52:	3302      	adds	r3, #2
 8022d54:	9321      	str	r3, [sp, #132]	; 0x84
 8022d56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d58:	3301      	adds	r3, #1
 8022d5a:	2b07      	cmp	r3, #7
 8022d5c:	9320      	str	r3, [sp, #128]	; 0x80
 8022d5e:	f300 81d4 	bgt.w	802310a <_svfprintf_r+0x982>
 8022d62:	3408      	adds	r4, #8
 8022d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022d66:	2b80      	cmp	r3, #128	; 0x80
 8022d68:	d114      	bne.n	8022d94 <_svfprintf_r+0x60c>
 8022d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022d6e:	1a9b      	subs	r3, r3, r2
 8022d70:	2b00      	cmp	r3, #0
 8022d72:	dd0f      	ble.n	8022d94 <_svfprintf_r+0x60c>
 8022d74:	4a8c      	ldr	r2, [pc, #560]	; (8022fa8 <_svfprintf_r+0x820>)
 8022d76:	6022      	str	r2, [r4, #0]
 8022d78:	2b10      	cmp	r3, #16
 8022d7a:	f300 81d0 	bgt.w	802311e <_svfprintf_r+0x996>
 8022d7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022d80:	6063      	str	r3, [r4, #4]
 8022d82:	4413      	add	r3, r2
 8022d84:	9321      	str	r3, [sp, #132]	; 0x84
 8022d86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d88:	3301      	adds	r3, #1
 8022d8a:	2b07      	cmp	r3, #7
 8022d8c:	9320      	str	r3, [sp, #128]	; 0x80
 8022d8e:	f300 81df 	bgt.w	8023150 <_svfprintf_r+0x9c8>
 8022d92:	3408      	adds	r4, #8
 8022d94:	eba6 0609 	sub.w	r6, r6, r9
 8022d98:	2e00      	cmp	r6, #0
 8022d9a:	dd0f      	ble.n	8022dbc <_svfprintf_r+0x634>
 8022d9c:	4b82      	ldr	r3, [pc, #520]	; (8022fa8 <_svfprintf_r+0x820>)
 8022d9e:	6023      	str	r3, [r4, #0]
 8022da0:	2e10      	cmp	r6, #16
 8022da2:	f300 81df 	bgt.w	8023164 <_svfprintf_r+0x9dc>
 8022da6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022da8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8022daa:	6066      	str	r6, [r4, #4]
 8022dac:	3301      	adds	r3, #1
 8022dae:	4406      	add	r6, r0
 8022db0:	2b07      	cmp	r3, #7
 8022db2:	9621      	str	r6, [sp, #132]	; 0x84
 8022db4:	9320      	str	r3, [sp, #128]	; 0x80
 8022db6:	f300 81ec 	bgt.w	8023192 <_svfprintf_r+0xa0a>
 8022dba:	3408      	adds	r4, #8
 8022dbc:	05eb      	lsls	r3, r5, #23
 8022dbe:	f100 81f2 	bmi.w	80231a6 <_svfprintf_r+0xa1e>
 8022dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022dc4:	e884 0300 	stmia.w	r4, {r8, r9}
 8022dc8:	444b      	add	r3, r9
 8022dca:	9321      	str	r3, [sp, #132]	; 0x84
 8022dcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022dce:	3301      	adds	r3, #1
 8022dd0:	2b07      	cmp	r3, #7
 8022dd2:	9320      	str	r3, [sp, #128]	; 0x80
 8022dd4:	f340 8419 	ble.w	802360a <_svfprintf_r+0xe82>
 8022dd8:	aa1f      	add	r2, sp, #124	; 0x7c
 8022dda:	4651      	mov	r1, sl
 8022ddc:	4658      	mov	r0, fp
 8022dde:	f002 f811 	bl	8024e04 <__ssprint_r>
 8022de2:	2800      	cmp	r0, #0
 8022de4:	f040 8431 	bne.w	802364a <_svfprintf_r+0xec2>
 8022de8:	ac2c      	add	r4, sp, #176	; 0xb0
 8022dea:	076b      	lsls	r3, r5, #29
 8022dec:	f100 8410 	bmi.w	8023610 <_svfprintf_r+0xe88>
 8022df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022df6:	428a      	cmp	r2, r1
 8022df8:	bfac      	ite	ge
 8022dfa:	189b      	addge	r3, r3, r2
 8022dfc:	185b      	addlt	r3, r3, r1
 8022dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8022e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022e02:	b13b      	cbz	r3, 8022e14 <_svfprintf_r+0x68c>
 8022e04:	aa1f      	add	r2, sp, #124	; 0x7c
 8022e06:	4651      	mov	r1, sl
 8022e08:	4658      	mov	r0, fp
 8022e0a:	f001 fffb 	bl	8024e04 <__ssprint_r>
 8022e0e:	2800      	cmp	r0, #0
 8022e10:	f040 841b 	bne.w	802364a <_svfprintf_r+0xec2>
 8022e14:	2300      	movs	r3, #0
 8022e16:	9320      	str	r3, [sp, #128]	; 0x80
 8022e18:	9f04      	ldr	r7, [sp, #16]
 8022e1a:	ac2c      	add	r4, sp, #176	; 0xb0
 8022e1c:	e4ee      	b.n	80227fc <_svfprintf_r+0x74>
 8022e1e:	9b02      	ldr	r3, [sp, #8]
 8022e20:	2b65      	cmp	r3, #101	; 0x65
 8022e22:	f77f af0b 	ble.w	8022c3c <_svfprintf_r+0x4b4>
 8022e26:	9b02      	ldr	r3, [sp, #8]
 8022e28:	2b66      	cmp	r3, #102	; 0x66
 8022e2a:	d124      	bne.n	8022e76 <_svfprintf_r+0x6ee>
 8022e2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022e2e:	2b00      	cmp	r3, #0
 8022e30:	dd19      	ble.n	8022e66 <_svfprintf_r+0x6de>
 8022e32:	f1b9 0f00 	cmp.w	r9, #0
 8022e36:	d101      	bne.n	8022e3c <_svfprintf_r+0x6b4>
 8022e38:	07ea      	lsls	r2, r5, #31
 8022e3a:	d502      	bpl.n	8022e42 <_svfprintf_r+0x6ba>
 8022e3c:	9a08      	ldr	r2, [sp, #32]
 8022e3e:	4413      	add	r3, r2
 8022e40:	444b      	add	r3, r9
 8022e42:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8022e44:	4699      	mov	r9, r3
 8022e46:	e735      	b.n	8022cb4 <_svfprintf_r+0x52c>
 8022e48:	460a      	mov	r2, r1
 8022e4a:	e70c      	b.n	8022c66 <_svfprintf_r+0x4de>
 8022e4c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8022e50:	f803 1b01 	strb.w	r1, [r3], #1
 8022e54:	e71c      	b.n	8022c90 <_svfprintf_r+0x508>
 8022e56:	2230      	movs	r2, #48	; 0x30
 8022e58:	4413      	add	r3, r2
 8022e5a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8022e5e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8022e62:	a91c      	add	r1, sp, #112	; 0x70
 8022e64:	e718      	b.n	8022c98 <_svfprintf_r+0x510>
 8022e66:	f1b9 0f00 	cmp.w	r9, #0
 8022e6a:	d101      	bne.n	8022e70 <_svfprintf_r+0x6e8>
 8022e6c:	07eb      	lsls	r3, r5, #31
 8022e6e:	d515      	bpl.n	8022e9c <_svfprintf_r+0x714>
 8022e70:	9b08      	ldr	r3, [sp, #32]
 8022e72:	3301      	adds	r3, #1
 8022e74:	e7e4      	b.n	8022e40 <_svfprintf_r+0x6b8>
 8022e76:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8022e78:	9b03      	ldr	r3, [sp, #12]
 8022e7a:	429a      	cmp	r2, r3
 8022e7c:	db06      	blt.n	8022e8c <_svfprintf_r+0x704>
 8022e7e:	07ef      	lsls	r7, r5, #31
 8022e80:	d50e      	bpl.n	8022ea0 <_svfprintf_r+0x718>
 8022e82:	9b08      	ldr	r3, [sp, #32]
 8022e84:	4413      	add	r3, r2
 8022e86:	2267      	movs	r2, #103	; 0x67
 8022e88:	9202      	str	r2, [sp, #8]
 8022e8a:	e7da      	b.n	8022e42 <_svfprintf_r+0x6ba>
 8022e8c:	9b03      	ldr	r3, [sp, #12]
 8022e8e:	9908      	ldr	r1, [sp, #32]
 8022e90:	2a00      	cmp	r2, #0
 8022e92:	440b      	add	r3, r1
 8022e94:	dcf7      	bgt.n	8022e86 <_svfprintf_r+0x6fe>
 8022e96:	f1c2 0201 	rsb	r2, r2, #1
 8022e9a:	e7f3      	b.n	8022e84 <_svfprintf_r+0x6fc>
 8022e9c:	2301      	movs	r3, #1
 8022e9e:	e7d0      	b.n	8022e42 <_svfprintf_r+0x6ba>
 8022ea0:	4613      	mov	r3, r2
 8022ea2:	e7f0      	b.n	8022e86 <_svfprintf_r+0x6fe>
 8022ea4:	b10b      	cbz	r3, 8022eaa <_svfprintf_r+0x722>
 8022ea6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022eaa:	f015 0f20 	tst.w	r5, #32
 8022eae:	f107 0304 	add.w	r3, r7, #4
 8022eb2:	d008      	beq.n	8022ec6 <_svfprintf_r+0x73e>
 8022eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022eb6:	683a      	ldr	r2, [r7, #0]
 8022eb8:	17ce      	asrs	r6, r1, #31
 8022eba:	4608      	mov	r0, r1
 8022ebc:	4631      	mov	r1, r6
 8022ebe:	e9c2 0100 	strd	r0, r1, [r2]
 8022ec2:	461f      	mov	r7, r3
 8022ec4:	e49a      	b.n	80227fc <_svfprintf_r+0x74>
 8022ec6:	06ee      	lsls	r6, r5, #27
 8022ec8:	d503      	bpl.n	8022ed2 <_svfprintf_r+0x74a>
 8022eca:	683a      	ldr	r2, [r7, #0]
 8022ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022ece:	6011      	str	r1, [r2, #0]
 8022ed0:	e7f7      	b.n	8022ec2 <_svfprintf_r+0x73a>
 8022ed2:	0668      	lsls	r0, r5, #25
 8022ed4:	d5f9      	bpl.n	8022eca <_svfprintf_r+0x742>
 8022ed6:	683a      	ldr	r2, [r7, #0]
 8022ed8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022edc:	8011      	strh	r1, [r2, #0]
 8022ede:	e7f0      	b.n	8022ec2 <_svfprintf_r+0x73a>
 8022ee0:	f045 0510 	orr.w	r5, r5, #16
 8022ee4:	f015 0320 	ands.w	r3, r5, #32
 8022ee8:	d022      	beq.n	8022f30 <_svfprintf_r+0x7a8>
 8022eea:	3707      	adds	r7, #7
 8022eec:	f027 0707 	bic.w	r7, r7, #7
 8022ef0:	f107 0308 	add.w	r3, r7, #8
 8022ef4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8022ef8:	9304      	str	r3, [sp, #16]
 8022efa:	2300      	movs	r3, #0
 8022efc:	2200      	movs	r2, #0
 8022efe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022f02:	f1b9 3fff 	cmp.w	r9, #4294967295
 8022f06:	f000 83db 	beq.w	80236c0 <_svfprintf_r+0xf38>
 8022f0a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8022f0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8022f10:	ea56 0207 	orrs.w	r2, r6, r7
 8022f14:	f040 83d9 	bne.w	80236ca <_svfprintf_r+0xf42>
 8022f18:	f1b9 0f00 	cmp.w	r9, #0
 8022f1c:	f000 80aa 	beq.w	8023074 <_svfprintf_r+0x8ec>
 8022f20:	2b01      	cmp	r3, #1
 8022f22:	d076      	beq.n	8023012 <_svfprintf_r+0x88a>
 8022f24:	2b02      	cmp	r3, #2
 8022f26:	f000 8091 	beq.w	802304c <_svfprintf_r+0x8c4>
 8022f2a:	2600      	movs	r6, #0
 8022f2c:	2700      	movs	r7, #0
 8022f2e:	e3d2      	b.n	80236d6 <_svfprintf_r+0xf4e>
 8022f30:	1d3a      	adds	r2, r7, #4
 8022f32:	f015 0110 	ands.w	r1, r5, #16
 8022f36:	9204      	str	r2, [sp, #16]
 8022f38:	d002      	beq.n	8022f40 <_svfprintf_r+0x7b8>
 8022f3a:	683e      	ldr	r6, [r7, #0]
 8022f3c:	2700      	movs	r7, #0
 8022f3e:	e7dd      	b.n	8022efc <_svfprintf_r+0x774>
 8022f40:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8022f44:	d0f9      	beq.n	8022f3a <_svfprintf_r+0x7b2>
 8022f46:	883e      	ldrh	r6, [r7, #0]
 8022f48:	2700      	movs	r7, #0
 8022f4a:	e7d6      	b.n	8022efa <_svfprintf_r+0x772>
 8022f4c:	1d3b      	adds	r3, r7, #4
 8022f4e:	9304      	str	r3, [sp, #16]
 8022f50:	2330      	movs	r3, #48	; 0x30
 8022f52:	2278      	movs	r2, #120	; 0x78
 8022f54:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8022f58:	4b14      	ldr	r3, [pc, #80]	; (8022fac <_svfprintf_r+0x824>)
 8022f5a:	683e      	ldr	r6, [r7, #0]
 8022f5c:	9311      	str	r3, [sp, #68]	; 0x44
 8022f5e:	2700      	movs	r7, #0
 8022f60:	f045 0502 	orr.w	r5, r5, #2
 8022f64:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8022f68:	2302      	movs	r3, #2
 8022f6a:	9202      	str	r2, [sp, #8]
 8022f6c:	e7c6      	b.n	8022efc <_svfprintf_r+0x774>
 8022f6e:	1d3b      	adds	r3, r7, #4
 8022f70:	2600      	movs	r6, #0
 8022f72:	f1b9 3fff 	cmp.w	r9, #4294967295
 8022f76:	9304      	str	r3, [sp, #16]
 8022f78:	f8d7 8000 	ldr.w	r8, [r7]
 8022f7c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8022f80:	d00a      	beq.n	8022f98 <_svfprintf_r+0x810>
 8022f82:	464a      	mov	r2, r9
 8022f84:	4631      	mov	r1, r6
 8022f86:	4640      	mov	r0, r8
 8022f88:	f7dd f93a 	bl	8000200 <memchr>
 8022f8c:	2800      	cmp	r0, #0
 8022f8e:	f000 808d 	beq.w	80230ac <_svfprintf_r+0x924>
 8022f92:	eba0 0908 	sub.w	r9, r0, r8
 8022f96:	e5cb      	b.n	8022b30 <_svfprintf_r+0x3a8>
 8022f98:	4640      	mov	r0, r8
 8022f9a:	f7dd f981 	bl	80002a0 <strlen>
 8022f9e:	4681      	mov	r9, r0
 8022fa0:	e5c6      	b.n	8022b30 <_svfprintf_r+0x3a8>
 8022fa2:	bf00      	nop
 8022fa4:	08034302 	.word	0x08034302
 8022fa8:	08034312 	.word	0x08034312
 8022fac:	080342f1 	.word	0x080342f1
 8022fb0:	f045 0510 	orr.w	r5, r5, #16
 8022fb4:	06a9      	lsls	r1, r5, #26
 8022fb6:	d509      	bpl.n	8022fcc <_svfprintf_r+0x844>
 8022fb8:	3707      	adds	r7, #7
 8022fba:	f027 0707 	bic.w	r7, r7, #7
 8022fbe:	f107 0308 	add.w	r3, r7, #8
 8022fc2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8022fc6:	9304      	str	r3, [sp, #16]
 8022fc8:	2301      	movs	r3, #1
 8022fca:	e797      	b.n	8022efc <_svfprintf_r+0x774>
 8022fcc:	1d3b      	adds	r3, r7, #4
 8022fce:	f015 0f10 	tst.w	r5, #16
 8022fd2:	9304      	str	r3, [sp, #16]
 8022fd4:	d001      	beq.n	8022fda <_svfprintf_r+0x852>
 8022fd6:	683e      	ldr	r6, [r7, #0]
 8022fd8:	e002      	b.n	8022fe0 <_svfprintf_r+0x858>
 8022fda:	066a      	lsls	r2, r5, #25
 8022fdc:	d5fb      	bpl.n	8022fd6 <_svfprintf_r+0x84e>
 8022fde:	883e      	ldrh	r6, [r7, #0]
 8022fe0:	2700      	movs	r7, #0
 8022fe2:	e7f1      	b.n	8022fc8 <_svfprintf_r+0x840>
 8022fe4:	b10b      	cbz	r3, 8022fea <_svfprintf_r+0x862>
 8022fe6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022fea:	4ba3      	ldr	r3, [pc, #652]	; (8023278 <_svfprintf_r+0xaf0>)
 8022fec:	e4c2      	b.n	8022974 <_svfprintf_r+0x1ec>
 8022fee:	1d3b      	adds	r3, r7, #4
 8022ff0:	f015 0f10 	tst.w	r5, #16
 8022ff4:	9304      	str	r3, [sp, #16]
 8022ff6:	d001      	beq.n	8022ffc <_svfprintf_r+0x874>
 8022ff8:	683e      	ldr	r6, [r7, #0]
 8022ffa:	e002      	b.n	8023002 <_svfprintf_r+0x87a>
 8022ffc:	066e      	lsls	r6, r5, #25
 8022ffe:	d5fb      	bpl.n	8022ff8 <_svfprintf_r+0x870>
 8023000:	883e      	ldrh	r6, [r7, #0]
 8023002:	2700      	movs	r7, #0
 8023004:	e4c2      	b.n	802298c <_svfprintf_r+0x204>
 8023006:	4643      	mov	r3, r8
 8023008:	e366      	b.n	80236d8 <_svfprintf_r+0xf50>
 802300a:	2f00      	cmp	r7, #0
 802300c:	bf08      	it	eq
 802300e:	2e0a      	cmpeq	r6, #10
 8023010:	d205      	bcs.n	802301e <_svfprintf_r+0x896>
 8023012:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8023016:	3630      	adds	r6, #48	; 0x30
 8023018:	f808 6d41 	strb.w	r6, [r8, #-65]!
 802301c:	e377      	b.n	802370e <_svfprintf_r+0xf86>
 802301e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8023022:	4630      	mov	r0, r6
 8023024:	4639      	mov	r1, r7
 8023026:	220a      	movs	r2, #10
 8023028:	2300      	movs	r3, #0
 802302a:	f7dd fe41 	bl	8000cb0 <__aeabi_uldivmod>
 802302e:	3230      	adds	r2, #48	; 0x30
 8023030:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8023034:	2300      	movs	r3, #0
 8023036:	4630      	mov	r0, r6
 8023038:	4639      	mov	r1, r7
 802303a:	220a      	movs	r2, #10
 802303c:	f7dd fe38 	bl	8000cb0 <__aeabi_uldivmod>
 8023040:	4606      	mov	r6, r0
 8023042:	460f      	mov	r7, r1
 8023044:	ea56 0307 	orrs.w	r3, r6, r7
 8023048:	d1eb      	bne.n	8023022 <_svfprintf_r+0x89a>
 802304a:	e360      	b.n	802370e <_svfprintf_r+0xf86>
 802304c:	2600      	movs	r6, #0
 802304e:	2700      	movs	r7, #0
 8023050:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8023054:	f006 030f 	and.w	r3, r6, #15
 8023058:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802305a:	5cd3      	ldrb	r3, [r2, r3]
 802305c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8023060:	0933      	lsrs	r3, r6, #4
 8023062:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8023066:	093a      	lsrs	r2, r7, #4
 8023068:	461e      	mov	r6, r3
 802306a:	4617      	mov	r7, r2
 802306c:	ea56 0307 	orrs.w	r3, r6, r7
 8023070:	d1f0      	bne.n	8023054 <_svfprintf_r+0x8cc>
 8023072:	e34c      	b.n	802370e <_svfprintf_r+0xf86>
 8023074:	b93b      	cbnz	r3, 8023086 <_svfprintf_r+0x8fe>
 8023076:	07ea      	lsls	r2, r5, #31
 8023078:	d505      	bpl.n	8023086 <_svfprintf_r+0x8fe>
 802307a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 802307e:	2330      	movs	r3, #48	; 0x30
 8023080:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8023084:	e343      	b.n	802370e <_svfprintf_r+0xf86>
 8023086:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 802308a:	e340      	b.n	802370e <_svfprintf_r+0xf86>
 802308c:	b10b      	cbz	r3, 8023092 <_svfprintf_r+0x90a>
 802308e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8023092:	9b02      	ldr	r3, [sp, #8]
 8023094:	2b00      	cmp	r3, #0
 8023096:	f000 82f7 	beq.w	8023688 <_svfprintf_r+0xf00>
 802309a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 802309e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80230a2:	2600      	movs	r6, #0
 80230a4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80230a8:	9704      	str	r7, [sp, #16]
 80230aa:	e4e8      	b.n	8022a7e <_svfprintf_r+0x2f6>
 80230ac:	4606      	mov	r6, r0
 80230ae:	e53f      	b.n	8022b30 <_svfprintf_r+0x3a8>
 80230b0:	2310      	movs	r3, #16
 80230b2:	6063      	str	r3, [r4, #4]
 80230b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80230b6:	3310      	adds	r3, #16
 80230b8:	9321      	str	r3, [sp, #132]	; 0x84
 80230ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80230bc:	3301      	adds	r3, #1
 80230be:	2b07      	cmp	r3, #7
 80230c0:	9320      	str	r3, [sp, #128]	; 0x80
 80230c2:	dc04      	bgt.n	80230ce <_svfprintf_r+0x946>
 80230c4:	3408      	adds	r4, #8
 80230c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80230c8:	3b10      	subs	r3, #16
 80230ca:	930c      	str	r3, [sp, #48]	; 0x30
 80230cc:	e615      	b.n	8022cfa <_svfprintf_r+0x572>
 80230ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80230d0:	4651      	mov	r1, sl
 80230d2:	4658      	mov	r0, fp
 80230d4:	f001 fe96 	bl	8024e04 <__ssprint_r>
 80230d8:	2800      	cmp	r0, #0
 80230da:	f040 82b6 	bne.w	802364a <_svfprintf_r+0xec2>
 80230de:	ac2c      	add	r4, sp, #176	; 0xb0
 80230e0:	e7f1      	b.n	80230c6 <_svfprintf_r+0x93e>
 80230e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80230e4:	4651      	mov	r1, sl
 80230e6:	4658      	mov	r0, fp
 80230e8:	f001 fe8c 	bl	8024e04 <__ssprint_r>
 80230ec:	2800      	cmp	r0, #0
 80230ee:	f040 82ac 	bne.w	802364a <_svfprintf_r+0xec2>
 80230f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80230f4:	e614      	b.n	8022d20 <_svfprintf_r+0x598>
 80230f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80230f8:	4651      	mov	r1, sl
 80230fa:	4658      	mov	r0, fp
 80230fc:	f001 fe82 	bl	8024e04 <__ssprint_r>
 8023100:	2800      	cmp	r0, #0
 8023102:	f040 82a2 	bne.w	802364a <_svfprintf_r+0xec2>
 8023106:	ac2c      	add	r4, sp, #176	; 0xb0
 8023108:	e61c      	b.n	8022d44 <_svfprintf_r+0x5bc>
 802310a:	aa1f      	add	r2, sp, #124	; 0x7c
 802310c:	4651      	mov	r1, sl
 802310e:	4658      	mov	r0, fp
 8023110:	f001 fe78 	bl	8024e04 <__ssprint_r>
 8023114:	2800      	cmp	r0, #0
 8023116:	f040 8298 	bne.w	802364a <_svfprintf_r+0xec2>
 802311a:	ac2c      	add	r4, sp, #176	; 0xb0
 802311c:	e622      	b.n	8022d64 <_svfprintf_r+0x5dc>
 802311e:	2210      	movs	r2, #16
 8023120:	6062      	str	r2, [r4, #4]
 8023122:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023124:	3210      	adds	r2, #16
 8023126:	9221      	str	r2, [sp, #132]	; 0x84
 8023128:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802312a:	3201      	adds	r2, #1
 802312c:	2a07      	cmp	r2, #7
 802312e:	9220      	str	r2, [sp, #128]	; 0x80
 8023130:	dc02      	bgt.n	8023138 <_svfprintf_r+0x9b0>
 8023132:	3408      	adds	r4, #8
 8023134:	3b10      	subs	r3, #16
 8023136:	e61d      	b.n	8022d74 <_svfprintf_r+0x5ec>
 8023138:	aa1f      	add	r2, sp, #124	; 0x7c
 802313a:	4651      	mov	r1, sl
 802313c:	4658      	mov	r0, fp
 802313e:	930c      	str	r3, [sp, #48]	; 0x30
 8023140:	f001 fe60 	bl	8024e04 <__ssprint_r>
 8023144:	2800      	cmp	r0, #0
 8023146:	f040 8280 	bne.w	802364a <_svfprintf_r+0xec2>
 802314a:	ac2c      	add	r4, sp, #176	; 0xb0
 802314c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802314e:	e7f1      	b.n	8023134 <_svfprintf_r+0x9ac>
 8023150:	aa1f      	add	r2, sp, #124	; 0x7c
 8023152:	4651      	mov	r1, sl
 8023154:	4658      	mov	r0, fp
 8023156:	f001 fe55 	bl	8024e04 <__ssprint_r>
 802315a:	2800      	cmp	r0, #0
 802315c:	f040 8275 	bne.w	802364a <_svfprintf_r+0xec2>
 8023160:	ac2c      	add	r4, sp, #176	; 0xb0
 8023162:	e617      	b.n	8022d94 <_svfprintf_r+0x60c>
 8023164:	2310      	movs	r3, #16
 8023166:	6063      	str	r3, [r4, #4]
 8023168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802316a:	3310      	adds	r3, #16
 802316c:	9321      	str	r3, [sp, #132]	; 0x84
 802316e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023170:	3301      	adds	r3, #1
 8023172:	2b07      	cmp	r3, #7
 8023174:	9320      	str	r3, [sp, #128]	; 0x80
 8023176:	dc02      	bgt.n	802317e <_svfprintf_r+0x9f6>
 8023178:	3408      	adds	r4, #8
 802317a:	3e10      	subs	r6, #16
 802317c:	e60e      	b.n	8022d9c <_svfprintf_r+0x614>
 802317e:	aa1f      	add	r2, sp, #124	; 0x7c
 8023180:	4651      	mov	r1, sl
 8023182:	4658      	mov	r0, fp
 8023184:	f001 fe3e 	bl	8024e04 <__ssprint_r>
 8023188:	2800      	cmp	r0, #0
 802318a:	f040 825e 	bne.w	802364a <_svfprintf_r+0xec2>
 802318e:	ac2c      	add	r4, sp, #176	; 0xb0
 8023190:	e7f3      	b.n	802317a <_svfprintf_r+0x9f2>
 8023192:	aa1f      	add	r2, sp, #124	; 0x7c
 8023194:	4651      	mov	r1, sl
 8023196:	4658      	mov	r0, fp
 8023198:	f001 fe34 	bl	8024e04 <__ssprint_r>
 802319c:	2800      	cmp	r0, #0
 802319e:	f040 8254 	bne.w	802364a <_svfprintf_r+0xec2>
 80231a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80231a4:	e60a      	b.n	8022dbc <_svfprintf_r+0x634>
 80231a6:	9b02      	ldr	r3, [sp, #8]
 80231a8:	2b65      	cmp	r3, #101	; 0x65
 80231aa:	f340 81a9 	ble.w	8023500 <_svfprintf_r+0xd78>
 80231ae:	2200      	movs	r2, #0
 80231b0:	2300      	movs	r3, #0
 80231b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80231b6:	f7dd fc9b 	bl	8000af0 <__aeabi_dcmpeq>
 80231ba:	2800      	cmp	r0, #0
 80231bc:	d062      	beq.n	8023284 <_svfprintf_r+0xafc>
 80231be:	4b2f      	ldr	r3, [pc, #188]	; (802327c <_svfprintf_r+0xaf4>)
 80231c0:	6023      	str	r3, [r4, #0]
 80231c2:	2301      	movs	r3, #1
 80231c4:	6063      	str	r3, [r4, #4]
 80231c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80231c8:	3301      	adds	r3, #1
 80231ca:	9321      	str	r3, [sp, #132]	; 0x84
 80231cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80231ce:	3301      	adds	r3, #1
 80231d0:	2b07      	cmp	r3, #7
 80231d2:	9320      	str	r3, [sp, #128]	; 0x80
 80231d4:	dc25      	bgt.n	8023222 <_svfprintf_r+0xa9a>
 80231d6:	3408      	adds	r4, #8
 80231d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80231da:	9a03      	ldr	r2, [sp, #12]
 80231dc:	4293      	cmp	r3, r2
 80231de:	db02      	blt.n	80231e6 <_svfprintf_r+0xa5e>
 80231e0:	07ee      	lsls	r6, r5, #31
 80231e2:	f57f ae02 	bpl.w	8022dea <_svfprintf_r+0x662>
 80231e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80231e8:	6023      	str	r3, [r4, #0]
 80231ea:	9b08      	ldr	r3, [sp, #32]
 80231ec:	6063      	str	r3, [r4, #4]
 80231ee:	9a08      	ldr	r2, [sp, #32]
 80231f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80231f2:	4413      	add	r3, r2
 80231f4:	9321      	str	r3, [sp, #132]	; 0x84
 80231f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80231f8:	3301      	adds	r3, #1
 80231fa:	2b07      	cmp	r3, #7
 80231fc:	9320      	str	r3, [sp, #128]	; 0x80
 80231fe:	dc1a      	bgt.n	8023236 <_svfprintf_r+0xaae>
 8023200:	3408      	adds	r4, #8
 8023202:	9b03      	ldr	r3, [sp, #12]
 8023204:	1e5e      	subs	r6, r3, #1
 8023206:	2e00      	cmp	r6, #0
 8023208:	f77f adef 	ble.w	8022dea <_svfprintf_r+0x662>
 802320c:	4f1c      	ldr	r7, [pc, #112]	; (8023280 <_svfprintf_r+0xaf8>)
 802320e:	f04f 0810 	mov.w	r8, #16
 8023212:	2e10      	cmp	r6, #16
 8023214:	6027      	str	r7, [r4, #0]
 8023216:	dc18      	bgt.n	802324a <_svfprintf_r+0xac2>
 8023218:	6066      	str	r6, [r4, #4]
 802321a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802321c:	441e      	add	r6, r3
 802321e:	9621      	str	r6, [sp, #132]	; 0x84
 8023220:	e5d4      	b.n	8022dcc <_svfprintf_r+0x644>
 8023222:	aa1f      	add	r2, sp, #124	; 0x7c
 8023224:	4651      	mov	r1, sl
 8023226:	4658      	mov	r0, fp
 8023228:	f001 fdec 	bl	8024e04 <__ssprint_r>
 802322c:	2800      	cmp	r0, #0
 802322e:	f040 820c 	bne.w	802364a <_svfprintf_r+0xec2>
 8023232:	ac2c      	add	r4, sp, #176	; 0xb0
 8023234:	e7d0      	b.n	80231d8 <_svfprintf_r+0xa50>
 8023236:	aa1f      	add	r2, sp, #124	; 0x7c
 8023238:	4651      	mov	r1, sl
 802323a:	4658      	mov	r0, fp
 802323c:	f001 fde2 	bl	8024e04 <__ssprint_r>
 8023240:	2800      	cmp	r0, #0
 8023242:	f040 8202 	bne.w	802364a <_svfprintf_r+0xec2>
 8023246:	ac2c      	add	r4, sp, #176	; 0xb0
 8023248:	e7db      	b.n	8023202 <_svfprintf_r+0xa7a>
 802324a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802324c:	f8c4 8004 	str.w	r8, [r4, #4]
 8023250:	3310      	adds	r3, #16
 8023252:	9321      	str	r3, [sp, #132]	; 0x84
 8023254:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023256:	3301      	adds	r3, #1
 8023258:	2b07      	cmp	r3, #7
 802325a:	9320      	str	r3, [sp, #128]	; 0x80
 802325c:	dc02      	bgt.n	8023264 <_svfprintf_r+0xadc>
 802325e:	3408      	adds	r4, #8
 8023260:	3e10      	subs	r6, #16
 8023262:	e7d6      	b.n	8023212 <_svfprintf_r+0xa8a>
 8023264:	aa1f      	add	r2, sp, #124	; 0x7c
 8023266:	4651      	mov	r1, sl
 8023268:	4658      	mov	r0, fp
 802326a:	f001 fdcb 	bl	8024e04 <__ssprint_r>
 802326e:	2800      	cmp	r0, #0
 8023270:	f040 81eb 	bne.w	802364a <_svfprintf_r+0xec2>
 8023274:	ac2c      	add	r4, sp, #176	; 0xb0
 8023276:	e7f3      	b.n	8023260 <_svfprintf_r+0xad8>
 8023278:	080342f1 	.word	0x080342f1
 802327c:	08034196 	.word	0x08034196
 8023280:	08034312 	.word	0x08034312
 8023284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023286:	2b00      	cmp	r3, #0
 8023288:	dc7a      	bgt.n	8023380 <_svfprintf_r+0xbf8>
 802328a:	4b9b      	ldr	r3, [pc, #620]	; (80234f8 <_svfprintf_r+0xd70>)
 802328c:	6023      	str	r3, [r4, #0]
 802328e:	2301      	movs	r3, #1
 8023290:	6063      	str	r3, [r4, #4]
 8023292:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023294:	3301      	adds	r3, #1
 8023296:	9321      	str	r3, [sp, #132]	; 0x84
 8023298:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802329a:	3301      	adds	r3, #1
 802329c:	2b07      	cmp	r3, #7
 802329e:	9320      	str	r3, [sp, #128]	; 0x80
 80232a0:	dc44      	bgt.n	802332c <_svfprintf_r+0xba4>
 80232a2:	3408      	adds	r4, #8
 80232a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80232a6:	b923      	cbnz	r3, 80232b2 <_svfprintf_r+0xb2a>
 80232a8:	9b03      	ldr	r3, [sp, #12]
 80232aa:	b913      	cbnz	r3, 80232b2 <_svfprintf_r+0xb2a>
 80232ac:	07e8      	lsls	r0, r5, #31
 80232ae:	f57f ad9c 	bpl.w	8022dea <_svfprintf_r+0x662>
 80232b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80232b4:	6023      	str	r3, [r4, #0]
 80232b6:	9b08      	ldr	r3, [sp, #32]
 80232b8:	6063      	str	r3, [r4, #4]
 80232ba:	9a08      	ldr	r2, [sp, #32]
 80232bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80232be:	4413      	add	r3, r2
 80232c0:	9321      	str	r3, [sp, #132]	; 0x84
 80232c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80232c4:	3301      	adds	r3, #1
 80232c6:	2b07      	cmp	r3, #7
 80232c8:	9320      	str	r3, [sp, #128]	; 0x80
 80232ca:	dc39      	bgt.n	8023340 <_svfprintf_r+0xbb8>
 80232cc:	f104 0308 	add.w	r3, r4, #8
 80232d0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80232d2:	2e00      	cmp	r6, #0
 80232d4:	da19      	bge.n	802330a <_svfprintf_r+0xb82>
 80232d6:	4f89      	ldr	r7, [pc, #548]	; (80234fc <_svfprintf_r+0xd74>)
 80232d8:	4276      	negs	r6, r6
 80232da:	2410      	movs	r4, #16
 80232dc:	2e10      	cmp	r6, #16
 80232de:	601f      	str	r7, [r3, #0]
 80232e0:	dc38      	bgt.n	8023354 <_svfprintf_r+0xbcc>
 80232e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80232e4:	605e      	str	r6, [r3, #4]
 80232e6:	4416      	add	r6, r2
 80232e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80232ea:	9621      	str	r6, [sp, #132]	; 0x84
 80232ec:	3201      	adds	r2, #1
 80232ee:	2a07      	cmp	r2, #7
 80232f0:	f103 0308 	add.w	r3, r3, #8
 80232f4:	9220      	str	r2, [sp, #128]	; 0x80
 80232f6:	dd08      	ble.n	802330a <_svfprintf_r+0xb82>
 80232f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80232fa:	4651      	mov	r1, sl
 80232fc:	4658      	mov	r0, fp
 80232fe:	f001 fd81 	bl	8024e04 <__ssprint_r>
 8023302:	2800      	cmp	r0, #0
 8023304:	f040 81a1 	bne.w	802364a <_svfprintf_r+0xec2>
 8023308:	ab2c      	add	r3, sp, #176	; 0xb0
 802330a:	9a03      	ldr	r2, [sp, #12]
 802330c:	605a      	str	r2, [r3, #4]
 802330e:	9903      	ldr	r1, [sp, #12]
 8023310:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023312:	f8c3 8000 	str.w	r8, [r3]
 8023316:	440a      	add	r2, r1
 8023318:	9221      	str	r2, [sp, #132]	; 0x84
 802331a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802331c:	3201      	adds	r2, #1
 802331e:	2a07      	cmp	r2, #7
 8023320:	9220      	str	r2, [sp, #128]	; 0x80
 8023322:	f73f ad59 	bgt.w	8022dd8 <_svfprintf_r+0x650>
 8023326:	f103 0408 	add.w	r4, r3, #8
 802332a:	e55e      	b.n	8022dea <_svfprintf_r+0x662>
 802332c:	aa1f      	add	r2, sp, #124	; 0x7c
 802332e:	4651      	mov	r1, sl
 8023330:	4658      	mov	r0, fp
 8023332:	f001 fd67 	bl	8024e04 <__ssprint_r>
 8023336:	2800      	cmp	r0, #0
 8023338:	f040 8187 	bne.w	802364a <_svfprintf_r+0xec2>
 802333c:	ac2c      	add	r4, sp, #176	; 0xb0
 802333e:	e7b1      	b.n	80232a4 <_svfprintf_r+0xb1c>
 8023340:	aa1f      	add	r2, sp, #124	; 0x7c
 8023342:	4651      	mov	r1, sl
 8023344:	4658      	mov	r0, fp
 8023346:	f001 fd5d 	bl	8024e04 <__ssprint_r>
 802334a:	2800      	cmp	r0, #0
 802334c:	f040 817d 	bne.w	802364a <_svfprintf_r+0xec2>
 8023350:	ab2c      	add	r3, sp, #176	; 0xb0
 8023352:	e7bd      	b.n	80232d0 <_svfprintf_r+0xb48>
 8023354:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023356:	605c      	str	r4, [r3, #4]
 8023358:	3210      	adds	r2, #16
 802335a:	9221      	str	r2, [sp, #132]	; 0x84
 802335c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802335e:	3201      	adds	r2, #1
 8023360:	2a07      	cmp	r2, #7
 8023362:	9220      	str	r2, [sp, #128]	; 0x80
 8023364:	dc02      	bgt.n	802336c <_svfprintf_r+0xbe4>
 8023366:	3308      	adds	r3, #8
 8023368:	3e10      	subs	r6, #16
 802336a:	e7b7      	b.n	80232dc <_svfprintf_r+0xb54>
 802336c:	aa1f      	add	r2, sp, #124	; 0x7c
 802336e:	4651      	mov	r1, sl
 8023370:	4658      	mov	r0, fp
 8023372:	f001 fd47 	bl	8024e04 <__ssprint_r>
 8023376:	2800      	cmp	r0, #0
 8023378:	f040 8167 	bne.w	802364a <_svfprintf_r+0xec2>
 802337c:	ab2c      	add	r3, sp, #176	; 0xb0
 802337e:	e7f3      	b.n	8023368 <_svfprintf_r+0xbe0>
 8023380:	9b03      	ldr	r3, [sp, #12]
 8023382:	42bb      	cmp	r3, r7
 8023384:	bfa8      	it	ge
 8023386:	463b      	movge	r3, r7
 8023388:	2b00      	cmp	r3, #0
 802338a:	461e      	mov	r6, r3
 802338c:	dd0b      	ble.n	80233a6 <_svfprintf_r+0xc1e>
 802338e:	6063      	str	r3, [r4, #4]
 8023390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023392:	f8c4 8000 	str.w	r8, [r4]
 8023396:	4433      	add	r3, r6
 8023398:	9321      	str	r3, [sp, #132]	; 0x84
 802339a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802339c:	3301      	adds	r3, #1
 802339e:	2b07      	cmp	r3, #7
 80233a0:	9320      	str	r3, [sp, #128]	; 0x80
 80233a2:	dc5f      	bgt.n	8023464 <_svfprintf_r+0xcdc>
 80233a4:	3408      	adds	r4, #8
 80233a6:	2e00      	cmp	r6, #0
 80233a8:	bfac      	ite	ge
 80233aa:	1bbe      	subge	r6, r7, r6
 80233ac:	463e      	movlt	r6, r7
 80233ae:	2e00      	cmp	r6, #0
 80233b0:	dd0f      	ble.n	80233d2 <_svfprintf_r+0xc4a>
 80233b2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80234fc <_svfprintf_r+0xd74>
 80233b6:	f8c4 9000 	str.w	r9, [r4]
 80233ba:	2e10      	cmp	r6, #16
 80233bc:	dc5c      	bgt.n	8023478 <_svfprintf_r+0xcf0>
 80233be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80233c0:	6066      	str	r6, [r4, #4]
 80233c2:	441e      	add	r6, r3
 80233c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80233c6:	9621      	str	r6, [sp, #132]	; 0x84
 80233c8:	3301      	adds	r3, #1
 80233ca:	2b07      	cmp	r3, #7
 80233cc:	9320      	str	r3, [sp, #128]	; 0x80
 80233ce:	dc6a      	bgt.n	80234a6 <_svfprintf_r+0xd1e>
 80233d0:	3408      	adds	r4, #8
 80233d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80233d4:	9a03      	ldr	r2, [sp, #12]
 80233d6:	4293      	cmp	r3, r2
 80233d8:	db01      	blt.n	80233de <_svfprintf_r+0xc56>
 80233da:	07e9      	lsls	r1, r5, #31
 80233dc:	d50d      	bpl.n	80233fa <_svfprintf_r+0xc72>
 80233de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80233e0:	6023      	str	r3, [r4, #0]
 80233e2:	9b08      	ldr	r3, [sp, #32]
 80233e4:	6063      	str	r3, [r4, #4]
 80233e6:	9a08      	ldr	r2, [sp, #32]
 80233e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80233ea:	4413      	add	r3, r2
 80233ec:	9321      	str	r3, [sp, #132]	; 0x84
 80233ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80233f0:	3301      	adds	r3, #1
 80233f2:	2b07      	cmp	r3, #7
 80233f4:	9320      	str	r3, [sp, #128]	; 0x80
 80233f6:	dc60      	bgt.n	80234ba <_svfprintf_r+0xd32>
 80233f8:	3408      	adds	r4, #8
 80233fa:	9b03      	ldr	r3, [sp, #12]
 80233fc:	9a03      	ldr	r2, [sp, #12]
 80233fe:	1bde      	subs	r6, r3, r7
 8023400:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023402:	1ad3      	subs	r3, r2, r3
 8023404:	429e      	cmp	r6, r3
 8023406:	bfa8      	it	ge
 8023408:	461e      	movge	r6, r3
 802340a:	2e00      	cmp	r6, #0
 802340c:	dd0b      	ble.n	8023426 <_svfprintf_r+0xc9e>
 802340e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023410:	6066      	str	r6, [r4, #4]
 8023412:	4433      	add	r3, r6
 8023414:	9321      	str	r3, [sp, #132]	; 0x84
 8023416:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023418:	3301      	adds	r3, #1
 802341a:	4447      	add	r7, r8
 802341c:	2b07      	cmp	r3, #7
 802341e:	6027      	str	r7, [r4, #0]
 8023420:	9320      	str	r3, [sp, #128]	; 0x80
 8023422:	dc54      	bgt.n	80234ce <_svfprintf_r+0xd46>
 8023424:	3408      	adds	r4, #8
 8023426:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023428:	9a03      	ldr	r2, [sp, #12]
 802342a:	2e00      	cmp	r6, #0
 802342c:	eba2 0303 	sub.w	r3, r2, r3
 8023430:	bfac      	ite	ge
 8023432:	1b9e      	subge	r6, r3, r6
 8023434:	461e      	movlt	r6, r3
 8023436:	2e00      	cmp	r6, #0
 8023438:	f77f acd7 	ble.w	8022dea <_svfprintf_r+0x662>
 802343c:	4f2f      	ldr	r7, [pc, #188]	; (80234fc <_svfprintf_r+0xd74>)
 802343e:	f04f 0810 	mov.w	r8, #16
 8023442:	2e10      	cmp	r6, #16
 8023444:	6027      	str	r7, [r4, #0]
 8023446:	f77f aee7 	ble.w	8023218 <_svfprintf_r+0xa90>
 802344a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802344c:	f8c4 8004 	str.w	r8, [r4, #4]
 8023450:	3310      	adds	r3, #16
 8023452:	9321      	str	r3, [sp, #132]	; 0x84
 8023454:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023456:	3301      	adds	r3, #1
 8023458:	2b07      	cmp	r3, #7
 802345a:	9320      	str	r3, [sp, #128]	; 0x80
 802345c:	dc41      	bgt.n	80234e2 <_svfprintf_r+0xd5a>
 802345e:	3408      	adds	r4, #8
 8023460:	3e10      	subs	r6, #16
 8023462:	e7ee      	b.n	8023442 <_svfprintf_r+0xcba>
 8023464:	aa1f      	add	r2, sp, #124	; 0x7c
 8023466:	4651      	mov	r1, sl
 8023468:	4658      	mov	r0, fp
 802346a:	f001 fccb 	bl	8024e04 <__ssprint_r>
 802346e:	2800      	cmp	r0, #0
 8023470:	f040 80eb 	bne.w	802364a <_svfprintf_r+0xec2>
 8023474:	ac2c      	add	r4, sp, #176	; 0xb0
 8023476:	e796      	b.n	80233a6 <_svfprintf_r+0xc1e>
 8023478:	2310      	movs	r3, #16
 802347a:	6063      	str	r3, [r4, #4]
 802347c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802347e:	3310      	adds	r3, #16
 8023480:	9321      	str	r3, [sp, #132]	; 0x84
 8023482:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023484:	3301      	adds	r3, #1
 8023486:	2b07      	cmp	r3, #7
 8023488:	9320      	str	r3, [sp, #128]	; 0x80
 802348a:	dc02      	bgt.n	8023492 <_svfprintf_r+0xd0a>
 802348c:	3408      	adds	r4, #8
 802348e:	3e10      	subs	r6, #16
 8023490:	e791      	b.n	80233b6 <_svfprintf_r+0xc2e>
 8023492:	aa1f      	add	r2, sp, #124	; 0x7c
 8023494:	4651      	mov	r1, sl
 8023496:	4658      	mov	r0, fp
 8023498:	f001 fcb4 	bl	8024e04 <__ssprint_r>
 802349c:	2800      	cmp	r0, #0
 802349e:	f040 80d4 	bne.w	802364a <_svfprintf_r+0xec2>
 80234a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80234a4:	e7f3      	b.n	802348e <_svfprintf_r+0xd06>
 80234a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80234a8:	4651      	mov	r1, sl
 80234aa:	4658      	mov	r0, fp
 80234ac:	f001 fcaa 	bl	8024e04 <__ssprint_r>
 80234b0:	2800      	cmp	r0, #0
 80234b2:	f040 80ca 	bne.w	802364a <_svfprintf_r+0xec2>
 80234b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80234b8:	e78b      	b.n	80233d2 <_svfprintf_r+0xc4a>
 80234ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80234bc:	4651      	mov	r1, sl
 80234be:	4658      	mov	r0, fp
 80234c0:	f001 fca0 	bl	8024e04 <__ssprint_r>
 80234c4:	2800      	cmp	r0, #0
 80234c6:	f040 80c0 	bne.w	802364a <_svfprintf_r+0xec2>
 80234ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80234cc:	e795      	b.n	80233fa <_svfprintf_r+0xc72>
 80234ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80234d0:	4651      	mov	r1, sl
 80234d2:	4658      	mov	r0, fp
 80234d4:	f001 fc96 	bl	8024e04 <__ssprint_r>
 80234d8:	2800      	cmp	r0, #0
 80234da:	f040 80b6 	bne.w	802364a <_svfprintf_r+0xec2>
 80234de:	ac2c      	add	r4, sp, #176	; 0xb0
 80234e0:	e7a1      	b.n	8023426 <_svfprintf_r+0xc9e>
 80234e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80234e4:	4651      	mov	r1, sl
 80234e6:	4658      	mov	r0, fp
 80234e8:	f001 fc8c 	bl	8024e04 <__ssprint_r>
 80234ec:	2800      	cmp	r0, #0
 80234ee:	f040 80ac 	bne.w	802364a <_svfprintf_r+0xec2>
 80234f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80234f4:	e7b4      	b.n	8023460 <_svfprintf_r+0xcd8>
 80234f6:	bf00      	nop
 80234f8:	08034196 	.word	0x08034196
 80234fc:	08034312 	.word	0x08034312
 8023500:	9b03      	ldr	r3, [sp, #12]
 8023502:	2b01      	cmp	r3, #1
 8023504:	dc01      	bgt.n	802350a <_svfprintf_r+0xd82>
 8023506:	07ea      	lsls	r2, r5, #31
 8023508:	d576      	bpl.n	80235f8 <_svfprintf_r+0xe70>
 802350a:	2301      	movs	r3, #1
 802350c:	6063      	str	r3, [r4, #4]
 802350e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023510:	f8c4 8000 	str.w	r8, [r4]
 8023514:	3301      	adds	r3, #1
 8023516:	9321      	str	r3, [sp, #132]	; 0x84
 8023518:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802351a:	3301      	adds	r3, #1
 802351c:	2b07      	cmp	r3, #7
 802351e:	9320      	str	r3, [sp, #128]	; 0x80
 8023520:	dc36      	bgt.n	8023590 <_svfprintf_r+0xe08>
 8023522:	3408      	adds	r4, #8
 8023524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023526:	6023      	str	r3, [r4, #0]
 8023528:	9b08      	ldr	r3, [sp, #32]
 802352a:	6063      	str	r3, [r4, #4]
 802352c:	9a08      	ldr	r2, [sp, #32]
 802352e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023530:	4413      	add	r3, r2
 8023532:	9321      	str	r3, [sp, #132]	; 0x84
 8023534:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023536:	3301      	adds	r3, #1
 8023538:	2b07      	cmp	r3, #7
 802353a:	9320      	str	r3, [sp, #128]	; 0x80
 802353c:	dc31      	bgt.n	80235a2 <_svfprintf_r+0xe1a>
 802353e:	3408      	adds	r4, #8
 8023540:	2300      	movs	r3, #0
 8023542:	2200      	movs	r2, #0
 8023544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023548:	f7dd fad2 	bl	8000af0 <__aeabi_dcmpeq>
 802354c:	9b03      	ldr	r3, [sp, #12]
 802354e:	1e5e      	subs	r6, r3, #1
 8023550:	2800      	cmp	r0, #0
 8023552:	d12f      	bne.n	80235b4 <_svfprintf_r+0xe2c>
 8023554:	f108 0301 	add.w	r3, r8, #1
 8023558:	e884 0048 	stmia.w	r4, {r3, r6}
 802355c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802355e:	9a03      	ldr	r2, [sp, #12]
 8023560:	3b01      	subs	r3, #1
 8023562:	4413      	add	r3, r2
 8023564:	9321      	str	r3, [sp, #132]	; 0x84
 8023566:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023568:	3301      	adds	r3, #1
 802356a:	2b07      	cmp	r3, #7
 802356c:	9320      	str	r3, [sp, #128]	; 0x80
 802356e:	dd4a      	ble.n	8023606 <_svfprintf_r+0xe7e>
 8023570:	aa1f      	add	r2, sp, #124	; 0x7c
 8023572:	4651      	mov	r1, sl
 8023574:	4658      	mov	r0, fp
 8023576:	f001 fc45 	bl	8024e04 <__ssprint_r>
 802357a:	2800      	cmp	r0, #0
 802357c:	d165      	bne.n	802364a <_svfprintf_r+0xec2>
 802357e:	ac2c      	add	r4, sp, #176	; 0xb0
 8023580:	ab1b      	add	r3, sp, #108	; 0x6c
 8023582:	6023      	str	r3, [r4, #0]
 8023584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023586:	6063      	str	r3, [r4, #4]
 8023588:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802358a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802358c:	4413      	add	r3, r2
 802358e:	e41c      	b.n	8022dca <_svfprintf_r+0x642>
 8023590:	aa1f      	add	r2, sp, #124	; 0x7c
 8023592:	4651      	mov	r1, sl
 8023594:	4658      	mov	r0, fp
 8023596:	f001 fc35 	bl	8024e04 <__ssprint_r>
 802359a:	2800      	cmp	r0, #0
 802359c:	d155      	bne.n	802364a <_svfprintf_r+0xec2>
 802359e:	ac2c      	add	r4, sp, #176	; 0xb0
 80235a0:	e7c0      	b.n	8023524 <_svfprintf_r+0xd9c>
 80235a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80235a4:	4651      	mov	r1, sl
 80235a6:	4658      	mov	r0, fp
 80235a8:	f001 fc2c 	bl	8024e04 <__ssprint_r>
 80235ac:	2800      	cmp	r0, #0
 80235ae:	d14c      	bne.n	802364a <_svfprintf_r+0xec2>
 80235b0:	ac2c      	add	r4, sp, #176	; 0xb0
 80235b2:	e7c5      	b.n	8023540 <_svfprintf_r+0xdb8>
 80235b4:	2e00      	cmp	r6, #0
 80235b6:	dde3      	ble.n	8023580 <_svfprintf_r+0xdf8>
 80235b8:	4f59      	ldr	r7, [pc, #356]	; (8023720 <_svfprintf_r+0xf98>)
 80235ba:	f04f 0810 	mov.w	r8, #16
 80235be:	2e10      	cmp	r6, #16
 80235c0:	6027      	str	r7, [r4, #0]
 80235c2:	dc04      	bgt.n	80235ce <_svfprintf_r+0xe46>
 80235c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80235c6:	6066      	str	r6, [r4, #4]
 80235c8:	441e      	add	r6, r3
 80235ca:	9621      	str	r6, [sp, #132]	; 0x84
 80235cc:	e7cb      	b.n	8023566 <_svfprintf_r+0xdde>
 80235ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80235d0:	f8c4 8004 	str.w	r8, [r4, #4]
 80235d4:	3310      	adds	r3, #16
 80235d6:	9321      	str	r3, [sp, #132]	; 0x84
 80235d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235da:	3301      	adds	r3, #1
 80235dc:	2b07      	cmp	r3, #7
 80235de:	9320      	str	r3, [sp, #128]	; 0x80
 80235e0:	dc02      	bgt.n	80235e8 <_svfprintf_r+0xe60>
 80235e2:	3408      	adds	r4, #8
 80235e4:	3e10      	subs	r6, #16
 80235e6:	e7ea      	b.n	80235be <_svfprintf_r+0xe36>
 80235e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80235ea:	4651      	mov	r1, sl
 80235ec:	4658      	mov	r0, fp
 80235ee:	f001 fc09 	bl	8024e04 <__ssprint_r>
 80235f2:	bb50      	cbnz	r0, 802364a <_svfprintf_r+0xec2>
 80235f4:	ac2c      	add	r4, sp, #176	; 0xb0
 80235f6:	e7f5      	b.n	80235e4 <_svfprintf_r+0xe5c>
 80235f8:	2301      	movs	r3, #1
 80235fa:	6063      	str	r3, [r4, #4]
 80235fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80235fe:	f8c4 8000 	str.w	r8, [r4]
 8023602:	3301      	adds	r3, #1
 8023604:	e7ae      	b.n	8023564 <_svfprintf_r+0xddc>
 8023606:	3408      	adds	r4, #8
 8023608:	e7ba      	b.n	8023580 <_svfprintf_r+0xdf8>
 802360a:	3408      	adds	r4, #8
 802360c:	f7ff bbed 	b.w	8022dea <_svfprintf_r+0x662>
 8023610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023612:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023614:	1a9d      	subs	r5, r3, r2
 8023616:	2d00      	cmp	r5, #0
 8023618:	f77f abea 	ble.w	8022df0 <_svfprintf_r+0x668>
 802361c:	2610      	movs	r6, #16
 802361e:	4b41      	ldr	r3, [pc, #260]	; (8023724 <_svfprintf_r+0xf9c>)
 8023620:	6023      	str	r3, [r4, #0]
 8023622:	2d10      	cmp	r5, #16
 8023624:	dc1b      	bgt.n	802365e <_svfprintf_r+0xed6>
 8023626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023628:	6065      	str	r5, [r4, #4]
 802362a:	441d      	add	r5, r3
 802362c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802362e:	9521      	str	r5, [sp, #132]	; 0x84
 8023630:	3301      	adds	r3, #1
 8023632:	2b07      	cmp	r3, #7
 8023634:	9320      	str	r3, [sp, #128]	; 0x80
 8023636:	f77f abdb 	ble.w	8022df0 <_svfprintf_r+0x668>
 802363a:	aa1f      	add	r2, sp, #124	; 0x7c
 802363c:	4651      	mov	r1, sl
 802363e:	4658      	mov	r0, fp
 8023640:	f001 fbe0 	bl	8024e04 <__ssprint_r>
 8023644:	2800      	cmp	r0, #0
 8023646:	f43f abd3 	beq.w	8022df0 <_svfprintf_r+0x668>
 802364a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802364e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8023652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023654:	bf18      	it	ne
 8023656:	f04f 33ff 	movne.w	r3, #4294967295
 802365a:	f7ff b8b9 	b.w	80227d0 <_svfprintf_r+0x48>
 802365e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023660:	6066      	str	r6, [r4, #4]
 8023662:	3310      	adds	r3, #16
 8023664:	9321      	str	r3, [sp, #132]	; 0x84
 8023666:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023668:	3301      	adds	r3, #1
 802366a:	2b07      	cmp	r3, #7
 802366c:	9320      	str	r3, [sp, #128]	; 0x80
 802366e:	dc02      	bgt.n	8023676 <_svfprintf_r+0xeee>
 8023670:	3408      	adds	r4, #8
 8023672:	3d10      	subs	r5, #16
 8023674:	e7d3      	b.n	802361e <_svfprintf_r+0xe96>
 8023676:	aa1f      	add	r2, sp, #124	; 0x7c
 8023678:	4651      	mov	r1, sl
 802367a:	4658      	mov	r0, fp
 802367c:	f001 fbc2 	bl	8024e04 <__ssprint_r>
 8023680:	2800      	cmp	r0, #0
 8023682:	d1e2      	bne.n	802364a <_svfprintf_r+0xec2>
 8023684:	ac2c      	add	r4, sp, #176	; 0xb0
 8023686:	e7f4      	b.n	8023672 <_svfprintf_r+0xeea>
 8023688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802368a:	2b00      	cmp	r3, #0
 802368c:	d0dd      	beq.n	802364a <_svfprintf_r+0xec2>
 802368e:	aa1f      	add	r2, sp, #124	; 0x7c
 8023690:	4651      	mov	r1, sl
 8023692:	4658      	mov	r0, fp
 8023694:	f001 fbb6 	bl	8024e04 <__ssprint_r>
 8023698:	e7d7      	b.n	802364a <_svfprintf_r+0xec2>
 802369a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802369e:	4610      	mov	r0, r2
 80236a0:	4619      	mov	r1, r3
 80236a2:	f7dd fa57 	bl	8000b54 <__aeabi_dcmpun>
 80236a6:	2800      	cmp	r0, #0
 80236a8:	f43f aa44 	beq.w	8022b34 <_svfprintf_r+0x3ac>
 80236ac:	4b1e      	ldr	r3, [pc, #120]	; (8023728 <_svfprintf_r+0xfa0>)
 80236ae:	4a1f      	ldr	r2, [pc, #124]	; (802372c <_svfprintf_r+0xfa4>)
 80236b0:	f7ff ba34 	b.w	8022b1c <_svfprintf_r+0x394>
 80236b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80236b6:	eba3 0308 	sub.w	r3, r3, r8
 80236ba:	9303      	str	r3, [sp, #12]
 80236bc:	f7ff bab5 	b.w	8022c2a <_svfprintf_r+0x4a2>
 80236c0:	ea56 0207 	orrs.w	r2, r6, r7
 80236c4:	950b      	str	r5, [sp, #44]	; 0x2c
 80236c6:	f43f ac2b 	beq.w	8022f20 <_svfprintf_r+0x798>
 80236ca:	2b01      	cmp	r3, #1
 80236cc:	f43f ac9d 	beq.w	802300a <_svfprintf_r+0x882>
 80236d0:	2b02      	cmp	r3, #2
 80236d2:	f43f acbd 	beq.w	8023050 <_svfprintf_r+0x8c8>
 80236d6:	ab2c      	add	r3, sp, #176	; 0xb0
 80236d8:	08f1      	lsrs	r1, r6, #3
 80236da:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80236de:	08f8      	lsrs	r0, r7, #3
 80236e0:	f006 0207 	and.w	r2, r6, #7
 80236e4:	4607      	mov	r7, r0
 80236e6:	460e      	mov	r6, r1
 80236e8:	3230      	adds	r2, #48	; 0x30
 80236ea:	ea56 0107 	orrs.w	r1, r6, r7
 80236ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80236f2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80236f6:	f47f ac86 	bne.w	8023006 <_svfprintf_r+0x87e>
 80236fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80236fc:	07c9      	lsls	r1, r1, #31
 80236fe:	d506      	bpl.n	802370e <_svfprintf_r+0xf86>
 8023700:	2a30      	cmp	r2, #48	; 0x30
 8023702:	d004      	beq.n	802370e <_svfprintf_r+0xf86>
 8023704:	2230      	movs	r2, #48	; 0x30
 8023706:	f808 2c01 	strb.w	r2, [r8, #-1]
 802370a:	f1a3 0802 	sub.w	r8, r3, #2
 802370e:	464e      	mov	r6, r9
 8023710:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8023714:	eba9 0908 	sub.w	r9, r9, r8
 8023718:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802371a:	2700      	movs	r7, #0
 802371c:	f7ff bad1 	b.w	8022cc2 <_svfprintf_r+0x53a>
 8023720:	08034312 	.word	0x08034312
 8023724:	08034302 	.word	0x08034302
 8023728:	0803419c 	.word	0x0803419c
 802372c:	080342dc 	.word	0x080342dc

08023730 <quorem>:
 8023730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023734:	6903      	ldr	r3, [r0, #16]
 8023736:	690c      	ldr	r4, [r1, #16]
 8023738:	429c      	cmp	r4, r3
 802373a:	4680      	mov	r8, r0
 802373c:	f300 8082 	bgt.w	8023844 <quorem+0x114>
 8023740:	3c01      	subs	r4, #1
 8023742:	f101 0714 	add.w	r7, r1, #20
 8023746:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 802374a:	f100 0614 	add.w	r6, r0, #20
 802374e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8023752:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8023756:	eb06 030e 	add.w	r3, r6, lr
 802375a:	3501      	adds	r5, #1
 802375c:	eb07 090e 	add.w	r9, r7, lr
 8023760:	9301      	str	r3, [sp, #4]
 8023762:	fbb0 f5f5 	udiv	r5, r0, r5
 8023766:	b395      	cbz	r5, 80237ce <quorem+0x9e>
 8023768:	f04f 0a00 	mov.w	sl, #0
 802376c:	4638      	mov	r0, r7
 802376e:	46b4      	mov	ip, r6
 8023770:	46d3      	mov	fp, sl
 8023772:	f850 2b04 	ldr.w	r2, [r0], #4
 8023776:	b293      	uxth	r3, r2
 8023778:	fb05 a303 	mla	r3, r5, r3, sl
 802377c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023780:	b29b      	uxth	r3, r3
 8023782:	ebab 0303 	sub.w	r3, fp, r3
 8023786:	0c12      	lsrs	r2, r2, #16
 8023788:	f8bc b000 	ldrh.w	fp, [ip]
 802378c:	fb05 a202 	mla	r2, r5, r2, sl
 8023790:	fa13 f38b 	uxtah	r3, r3, fp
 8023794:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8023798:	fa1f fb82 	uxth.w	fp, r2
 802379c:	f8dc 2000 	ldr.w	r2, [ip]
 80237a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80237a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80237a8:	b29b      	uxth	r3, r3
 80237aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80237ae:	4581      	cmp	r9, r0
 80237b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80237b4:	f84c 3b04 	str.w	r3, [ip], #4
 80237b8:	d2db      	bcs.n	8023772 <quorem+0x42>
 80237ba:	f856 300e 	ldr.w	r3, [r6, lr]
 80237be:	b933      	cbnz	r3, 80237ce <quorem+0x9e>
 80237c0:	9b01      	ldr	r3, [sp, #4]
 80237c2:	3b04      	subs	r3, #4
 80237c4:	429e      	cmp	r6, r3
 80237c6:	461a      	mov	r2, r3
 80237c8:	d330      	bcc.n	802382c <quorem+0xfc>
 80237ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80237ce:	4640      	mov	r0, r8
 80237d0:	f001 fa41 	bl	8024c56 <__mcmp>
 80237d4:	2800      	cmp	r0, #0
 80237d6:	db25      	blt.n	8023824 <quorem+0xf4>
 80237d8:	3501      	adds	r5, #1
 80237da:	4630      	mov	r0, r6
 80237dc:	f04f 0e00 	mov.w	lr, #0
 80237e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80237e4:	f8d0 c000 	ldr.w	ip, [r0]
 80237e8:	b293      	uxth	r3, r2
 80237ea:	ebae 0303 	sub.w	r3, lr, r3
 80237ee:	0c12      	lsrs	r2, r2, #16
 80237f0:	fa13 f38c 	uxtah	r3, r3, ip
 80237f4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80237f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80237fc:	b29b      	uxth	r3, r3
 80237fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023802:	45b9      	cmp	r9, r7
 8023804:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8023808:	f840 3b04 	str.w	r3, [r0], #4
 802380c:	d2e8      	bcs.n	80237e0 <quorem+0xb0>
 802380e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8023812:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8023816:	b92a      	cbnz	r2, 8023824 <quorem+0xf4>
 8023818:	3b04      	subs	r3, #4
 802381a:	429e      	cmp	r6, r3
 802381c:	461a      	mov	r2, r3
 802381e:	d30b      	bcc.n	8023838 <quorem+0x108>
 8023820:	f8c8 4010 	str.w	r4, [r8, #16]
 8023824:	4628      	mov	r0, r5
 8023826:	b003      	add	sp, #12
 8023828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802382c:	6812      	ldr	r2, [r2, #0]
 802382e:	3b04      	subs	r3, #4
 8023830:	2a00      	cmp	r2, #0
 8023832:	d1ca      	bne.n	80237ca <quorem+0x9a>
 8023834:	3c01      	subs	r4, #1
 8023836:	e7c5      	b.n	80237c4 <quorem+0x94>
 8023838:	6812      	ldr	r2, [r2, #0]
 802383a:	3b04      	subs	r3, #4
 802383c:	2a00      	cmp	r2, #0
 802383e:	d1ef      	bne.n	8023820 <quorem+0xf0>
 8023840:	3c01      	subs	r4, #1
 8023842:	e7ea      	b.n	802381a <quorem+0xea>
 8023844:	2000      	movs	r0, #0
 8023846:	e7ee      	b.n	8023826 <quorem+0xf6>

08023848 <_dtoa_r>:
 8023848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802384c:	ec57 6b10 	vmov	r6, r7, d0
 8023850:	b097      	sub	sp, #92	; 0x5c
 8023852:	e9cd 6700 	strd	r6, r7, [sp]
 8023856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023858:	9107      	str	r1, [sp, #28]
 802385a:	4604      	mov	r4, r0
 802385c:	920a      	str	r2, [sp, #40]	; 0x28
 802385e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023860:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8023862:	b93e      	cbnz	r6, 8023874 <_dtoa_r+0x2c>
 8023864:	2010      	movs	r0, #16
 8023866:	f000 fdcb 	bl	8024400 <malloc>
 802386a:	6260      	str	r0, [r4, #36]	; 0x24
 802386c:	6046      	str	r6, [r0, #4]
 802386e:	6086      	str	r6, [r0, #8]
 8023870:	6006      	str	r6, [r0, #0]
 8023872:	60c6      	str	r6, [r0, #12]
 8023874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023876:	6819      	ldr	r1, [r3, #0]
 8023878:	b151      	cbz	r1, 8023890 <_dtoa_r+0x48>
 802387a:	685a      	ldr	r2, [r3, #4]
 802387c:	604a      	str	r2, [r1, #4]
 802387e:	2301      	movs	r3, #1
 8023880:	4093      	lsls	r3, r2
 8023882:	608b      	str	r3, [r1, #8]
 8023884:	4620      	mov	r0, r4
 8023886:	f001 f811 	bl	80248ac <_Bfree>
 802388a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802388c:	2200      	movs	r2, #0
 802388e:	601a      	str	r2, [r3, #0]
 8023890:	9b01      	ldr	r3, [sp, #4]
 8023892:	2b00      	cmp	r3, #0
 8023894:	bfbf      	itttt	lt
 8023896:	2301      	movlt	r3, #1
 8023898:	602b      	strlt	r3, [r5, #0]
 802389a:	9b01      	ldrlt	r3, [sp, #4]
 802389c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80238a0:	bfb2      	itee	lt
 80238a2:	9301      	strlt	r3, [sp, #4]
 80238a4:	2300      	movge	r3, #0
 80238a6:	602b      	strge	r3, [r5, #0]
 80238a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80238ac:	4ba8      	ldr	r3, [pc, #672]	; (8023b50 <_dtoa_r+0x308>)
 80238ae:	ea33 0308 	bics.w	r3, r3, r8
 80238b2:	d11b      	bne.n	80238ec <_dtoa_r+0xa4>
 80238b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80238b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80238ba:	6013      	str	r3, [r2, #0]
 80238bc:	9b00      	ldr	r3, [sp, #0]
 80238be:	b923      	cbnz	r3, 80238ca <_dtoa_r+0x82>
 80238c0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80238c4:	2800      	cmp	r0, #0
 80238c6:	f000 8578 	beq.w	80243ba <_dtoa_r+0xb72>
 80238ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80238cc:	b953      	cbnz	r3, 80238e4 <_dtoa_r+0x9c>
 80238ce:	4ba1      	ldr	r3, [pc, #644]	; (8023b54 <_dtoa_r+0x30c>)
 80238d0:	e021      	b.n	8023916 <_dtoa_r+0xce>
 80238d2:	4ba1      	ldr	r3, [pc, #644]	; (8023b58 <_dtoa_r+0x310>)
 80238d4:	9302      	str	r3, [sp, #8]
 80238d6:	3308      	adds	r3, #8
 80238d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80238da:	6013      	str	r3, [r2, #0]
 80238dc:	9802      	ldr	r0, [sp, #8]
 80238de:	b017      	add	sp, #92	; 0x5c
 80238e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238e4:	4b9b      	ldr	r3, [pc, #620]	; (8023b54 <_dtoa_r+0x30c>)
 80238e6:	9302      	str	r3, [sp, #8]
 80238e8:	3303      	adds	r3, #3
 80238ea:	e7f5      	b.n	80238d8 <_dtoa_r+0x90>
 80238ec:	e9dd 6700 	ldrd	r6, r7, [sp]
 80238f0:	2200      	movs	r2, #0
 80238f2:	2300      	movs	r3, #0
 80238f4:	4630      	mov	r0, r6
 80238f6:	4639      	mov	r1, r7
 80238f8:	f7dd f8fa 	bl	8000af0 <__aeabi_dcmpeq>
 80238fc:	4681      	mov	r9, r0
 80238fe:	b160      	cbz	r0, 802391a <_dtoa_r+0xd2>
 8023900:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023902:	2301      	movs	r3, #1
 8023904:	6013      	str	r3, [r2, #0]
 8023906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023908:	2b00      	cmp	r3, #0
 802390a:	f000 8553 	beq.w	80243b4 <_dtoa_r+0xb6c>
 802390e:	4b93      	ldr	r3, [pc, #588]	; (8023b5c <_dtoa_r+0x314>)
 8023910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023912:	6013      	str	r3, [r2, #0]
 8023914:	3b01      	subs	r3, #1
 8023916:	9302      	str	r3, [sp, #8]
 8023918:	e7e0      	b.n	80238dc <_dtoa_r+0x94>
 802391a:	aa14      	add	r2, sp, #80	; 0x50
 802391c:	a915      	add	r1, sp, #84	; 0x54
 802391e:	ec47 6b10 	vmov	d0, r6, r7
 8023922:	4620      	mov	r0, r4
 8023924:	f001 fa0f 	bl	8024d46 <__d2b>
 8023928:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802392c:	4682      	mov	sl, r0
 802392e:	2d00      	cmp	r5, #0
 8023930:	d07e      	beq.n	8023a30 <_dtoa_r+0x1e8>
 8023932:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023936:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 802393a:	4630      	mov	r0, r6
 802393c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8023940:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8023944:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8023948:	2200      	movs	r2, #0
 802394a:	4b85      	ldr	r3, [pc, #532]	; (8023b60 <_dtoa_r+0x318>)
 802394c:	f7dc fcb4 	bl	80002b8 <__aeabi_dsub>
 8023950:	a379      	add	r3, pc, #484	; (adr r3, 8023b38 <_dtoa_r+0x2f0>)
 8023952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023956:	f7dc fe63 	bl	8000620 <__aeabi_dmul>
 802395a:	a379      	add	r3, pc, #484	; (adr r3, 8023b40 <_dtoa_r+0x2f8>)
 802395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023960:	f7dc fcac 	bl	80002bc <__adddf3>
 8023964:	4606      	mov	r6, r0
 8023966:	4628      	mov	r0, r5
 8023968:	460f      	mov	r7, r1
 802396a:	f7dc fdf3 	bl	8000554 <__aeabi_i2d>
 802396e:	a376      	add	r3, pc, #472	; (adr r3, 8023b48 <_dtoa_r+0x300>)
 8023970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023974:	f7dc fe54 	bl	8000620 <__aeabi_dmul>
 8023978:	4602      	mov	r2, r0
 802397a:	460b      	mov	r3, r1
 802397c:	4630      	mov	r0, r6
 802397e:	4639      	mov	r1, r7
 8023980:	f7dc fc9c 	bl	80002bc <__adddf3>
 8023984:	4606      	mov	r6, r0
 8023986:	460f      	mov	r7, r1
 8023988:	f7dd f8fa 	bl	8000b80 <__aeabi_d2iz>
 802398c:	2200      	movs	r2, #0
 802398e:	4683      	mov	fp, r0
 8023990:	2300      	movs	r3, #0
 8023992:	4630      	mov	r0, r6
 8023994:	4639      	mov	r1, r7
 8023996:	f7dd f8b5 	bl	8000b04 <__aeabi_dcmplt>
 802399a:	b158      	cbz	r0, 80239b4 <_dtoa_r+0x16c>
 802399c:	4658      	mov	r0, fp
 802399e:	f7dc fdd9 	bl	8000554 <__aeabi_i2d>
 80239a2:	4602      	mov	r2, r0
 80239a4:	460b      	mov	r3, r1
 80239a6:	4630      	mov	r0, r6
 80239a8:	4639      	mov	r1, r7
 80239aa:	f7dd f8a1 	bl	8000af0 <__aeabi_dcmpeq>
 80239ae:	b908      	cbnz	r0, 80239b4 <_dtoa_r+0x16c>
 80239b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80239b4:	f1bb 0f16 	cmp.w	fp, #22
 80239b8:	d859      	bhi.n	8023a6e <_dtoa_r+0x226>
 80239ba:	496a      	ldr	r1, [pc, #424]	; (8023b64 <_dtoa_r+0x31c>)
 80239bc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80239c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80239c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239c8:	f7dd f8ba 	bl	8000b40 <__aeabi_dcmpgt>
 80239cc:	2800      	cmp	r0, #0
 80239ce:	d050      	beq.n	8023a72 <_dtoa_r+0x22a>
 80239d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80239d4:	2300      	movs	r3, #0
 80239d6:	930e      	str	r3, [sp, #56]	; 0x38
 80239d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80239da:	1b5d      	subs	r5, r3, r5
 80239dc:	1e6b      	subs	r3, r5, #1
 80239de:	9306      	str	r3, [sp, #24]
 80239e0:	bf45      	ittet	mi
 80239e2:	f1c5 0301 	rsbmi	r3, r5, #1
 80239e6:	9305      	strmi	r3, [sp, #20]
 80239e8:	2300      	movpl	r3, #0
 80239ea:	2300      	movmi	r3, #0
 80239ec:	bf4c      	ite	mi
 80239ee:	9306      	strmi	r3, [sp, #24]
 80239f0:	9305      	strpl	r3, [sp, #20]
 80239f2:	f1bb 0f00 	cmp.w	fp, #0
 80239f6:	db3e      	blt.n	8023a76 <_dtoa_r+0x22e>
 80239f8:	9b06      	ldr	r3, [sp, #24]
 80239fa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80239fe:	445b      	add	r3, fp
 8023a00:	9306      	str	r3, [sp, #24]
 8023a02:	2300      	movs	r3, #0
 8023a04:	9308      	str	r3, [sp, #32]
 8023a06:	9b07      	ldr	r3, [sp, #28]
 8023a08:	2b09      	cmp	r3, #9
 8023a0a:	f200 80af 	bhi.w	8023b6c <_dtoa_r+0x324>
 8023a0e:	2b05      	cmp	r3, #5
 8023a10:	bfc4      	itt	gt
 8023a12:	3b04      	subgt	r3, #4
 8023a14:	9307      	strgt	r3, [sp, #28]
 8023a16:	9b07      	ldr	r3, [sp, #28]
 8023a18:	f1a3 0302 	sub.w	r3, r3, #2
 8023a1c:	bfcc      	ite	gt
 8023a1e:	2600      	movgt	r6, #0
 8023a20:	2601      	movle	r6, #1
 8023a22:	2b03      	cmp	r3, #3
 8023a24:	f200 80ae 	bhi.w	8023b84 <_dtoa_r+0x33c>
 8023a28:	e8df f003 	tbb	[pc, r3]
 8023a2c:	772f8482 	.word	0x772f8482
 8023a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023a32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023a34:	441d      	add	r5, r3
 8023a36:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8023a3a:	2b20      	cmp	r3, #32
 8023a3c:	dd11      	ble.n	8023a62 <_dtoa_r+0x21a>
 8023a3e:	9a00      	ldr	r2, [sp, #0]
 8023a40:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8023a44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8023a48:	fa22 f000 	lsr.w	r0, r2, r0
 8023a4c:	fa08 f303 	lsl.w	r3, r8, r3
 8023a50:	4318      	orrs	r0, r3
 8023a52:	f7dc fd6f 	bl	8000534 <__aeabi_ui2d>
 8023a56:	2301      	movs	r3, #1
 8023a58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8023a5c:	3d01      	subs	r5, #1
 8023a5e:	9312      	str	r3, [sp, #72]	; 0x48
 8023a60:	e772      	b.n	8023948 <_dtoa_r+0x100>
 8023a62:	f1c3 0020 	rsb	r0, r3, #32
 8023a66:	9b00      	ldr	r3, [sp, #0]
 8023a68:	fa03 f000 	lsl.w	r0, r3, r0
 8023a6c:	e7f1      	b.n	8023a52 <_dtoa_r+0x20a>
 8023a6e:	2301      	movs	r3, #1
 8023a70:	e7b1      	b.n	80239d6 <_dtoa_r+0x18e>
 8023a72:	900e      	str	r0, [sp, #56]	; 0x38
 8023a74:	e7b0      	b.n	80239d8 <_dtoa_r+0x190>
 8023a76:	9b05      	ldr	r3, [sp, #20]
 8023a78:	eba3 030b 	sub.w	r3, r3, fp
 8023a7c:	9305      	str	r3, [sp, #20]
 8023a7e:	f1cb 0300 	rsb	r3, fp, #0
 8023a82:	9308      	str	r3, [sp, #32]
 8023a84:	2300      	movs	r3, #0
 8023a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a88:	e7bd      	b.n	8023a06 <_dtoa_r+0x1be>
 8023a8a:	2301      	movs	r3, #1
 8023a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8023a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a90:	2b00      	cmp	r3, #0
 8023a92:	dd7a      	ble.n	8023b8a <_dtoa_r+0x342>
 8023a94:	9304      	str	r3, [sp, #16]
 8023a96:	9303      	str	r3, [sp, #12]
 8023a98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8023a9a:	2200      	movs	r2, #0
 8023a9c:	606a      	str	r2, [r5, #4]
 8023a9e:	2104      	movs	r1, #4
 8023aa0:	f101 0214 	add.w	r2, r1, #20
 8023aa4:	429a      	cmp	r2, r3
 8023aa6:	d975      	bls.n	8023b94 <_dtoa_r+0x34c>
 8023aa8:	6869      	ldr	r1, [r5, #4]
 8023aaa:	4620      	mov	r0, r4
 8023aac:	f000 feca 	bl	8024844 <_Balloc>
 8023ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023ab2:	6028      	str	r0, [r5, #0]
 8023ab4:	681b      	ldr	r3, [r3, #0]
 8023ab6:	9302      	str	r3, [sp, #8]
 8023ab8:	9b03      	ldr	r3, [sp, #12]
 8023aba:	2b0e      	cmp	r3, #14
 8023abc:	f200 80e5 	bhi.w	8023c8a <_dtoa_r+0x442>
 8023ac0:	2e00      	cmp	r6, #0
 8023ac2:	f000 80e2 	beq.w	8023c8a <_dtoa_r+0x442>
 8023ac6:	ed9d 7b00 	vldr	d7, [sp]
 8023aca:	f1bb 0f00 	cmp.w	fp, #0
 8023ace:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8023ad2:	dd74      	ble.n	8023bbe <_dtoa_r+0x376>
 8023ad4:	4a23      	ldr	r2, [pc, #140]	; (8023b64 <_dtoa_r+0x31c>)
 8023ad6:	f00b 030f 	and.w	r3, fp, #15
 8023ada:	ea4f 162b 	mov.w	r6, fp, asr #4
 8023ade:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023ae2:	06f0      	lsls	r0, r6, #27
 8023ae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023ae8:	d559      	bpl.n	8023b9e <_dtoa_r+0x356>
 8023aea:	4b1f      	ldr	r3, [pc, #124]	; (8023b68 <_dtoa_r+0x320>)
 8023aec:	ec51 0b17 	vmov	r0, r1, d7
 8023af0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023af4:	f7dc febe 	bl	8000874 <__aeabi_ddiv>
 8023af8:	e9cd 0100 	strd	r0, r1, [sp]
 8023afc:	f006 060f 	and.w	r6, r6, #15
 8023b00:	2503      	movs	r5, #3
 8023b02:	4f19      	ldr	r7, [pc, #100]	; (8023b68 <_dtoa_r+0x320>)
 8023b04:	2e00      	cmp	r6, #0
 8023b06:	d14c      	bne.n	8023ba2 <_dtoa_r+0x35a>
 8023b08:	4642      	mov	r2, r8
 8023b0a:	464b      	mov	r3, r9
 8023b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023b10:	f7dc feb0 	bl	8000874 <__aeabi_ddiv>
 8023b14:	e9cd 0100 	strd	r0, r1, [sp]
 8023b18:	e06a      	b.n	8023bf0 <_dtoa_r+0x3a8>
 8023b1a:	2301      	movs	r3, #1
 8023b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8023b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b20:	445b      	add	r3, fp
 8023b22:	9304      	str	r3, [sp, #16]
 8023b24:	3301      	adds	r3, #1
 8023b26:	2b01      	cmp	r3, #1
 8023b28:	9303      	str	r3, [sp, #12]
 8023b2a:	bfb8      	it	lt
 8023b2c:	2301      	movlt	r3, #1
 8023b2e:	e7b3      	b.n	8023a98 <_dtoa_r+0x250>
 8023b30:	2300      	movs	r3, #0
 8023b32:	e7ab      	b.n	8023a8c <_dtoa_r+0x244>
 8023b34:	2300      	movs	r3, #0
 8023b36:	e7f1      	b.n	8023b1c <_dtoa_r+0x2d4>
 8023b38:	636f4361 	.word	0x636f4361
 8023b3c:	3fd287a7 	.word	0x3fd287a7
 8023b40:	8b60c8b3 	.word	0x8b60c8b3
 8023b44:	3fc68a28 	.word	0x3fc68a28
 8023b48:	509f79fb 	.word	0x509f79fb
 8023b4c:	3fd34413 	.word	0x3fd34413
 8023b50:	7ff00000 	.word	0x7ff00000
 8023b54:	0803432b 	.word	0x0803432b
 8023b58:	08034322 	.word	0x08034322
 8023b5c:	08034197 	.word	0x08034197
 8023b60:	3ff80000 	.word	0x3ff80000
 8023b64:	08034358 	.word	0x08034358
 8023b68:	08034330 	.word	0x08034330
 8023b6c:	2601      	movs	r6, #1
 8023b6e:	2300      	movs	r3, #0
 8023b70:	9307      	str	r3, [sp, #28]
 8023b72:	9609      	str	r6, [sp, #36]	; 0x24
 8023b74:	f04f 33ff 	mov.w	r3, #4294967295
 8023b78:	9304      	str	r3, [sp, #16]
 8023b7a:	9303      	str	r3, [sp, #12]
 8023b7c:	2200      	movs	r2, #0
 8023b7e:	2312      	movs	r3, #18
 8023b80:	920a      	str	r2, [sp, #40]	; 0x28
 8023b82:	e789      	b.n	8023a98 <_dtoa_r+0x250>
 8023b84:	2301      	movs	r3, #1
 8023b86:	9309      	str	r3, [sp, #36]	; 0x24
 8023b88:	e7f4      	b.n	8023b74 <_dtoa_r+0x32c>
 8023b8a:	2301      	movs	r3, #1
 8023b8c:	9304      	str	r3, [sp, #16]
 8023b8e:	9303      	str	r3, [sp, #12]
 8023b90:	461a      	mov	r2, r3
 8023b92:	e7f5      	b.n	8023b80 <_dtoa_r+0x338>
 8023b94:	686a      	ldr	r2, [r5, #4]
 8023b96:	3201      	adds	r2, #1
 8023b98:	606a      	str	r2, [r5, #4]
 8023b9a:	0049      	lsls	r1, r1, #1
 8023b9c:	e780      	b.n	8023aa0 <_dtoa_r+0x258>
 8023b9e:	2502      	movs	r5, #2
 8023ba0:	e7af      	b.n	8023b02 <_dtoa_r+0x2ba>
 8023ba2:	07f1      	lsls	r1, r6, #31
 8023ba4:	d508      	bpl.n	8023bb8 <_dtoa_r+0x370>
 8023ba6:	4640      	mov	r0, r8
 8023ba8:	4649      	mov	r1, r9
 8023baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023bae:	f7dc fd37 	bl	8000620 <__aeabi_dmul>
 8023bb2:	3501      	adds	r5, #1
 8023bb4:	4680      	mov	r8, r0
 8023bb6:	4689      	mov	r9, r1
 8023bb8:	1076      	asrs	r6, r6, #1
 8023bba:	3708      	adds	r7, #8
 8023bbc:	e7a2      	b.n	8023b04 <_dtoa_r+0x2bc>
 8023bbe:	f000 809d 	beq.w	8023cfc <_dtoa_r+0x4b4>
 8023bc2:	f1cb 0600 	rsb	r6, fp, #0
 8023bc6:	4b9f      	ldr	r3, [pc, #636]	; (8023e44 <_dtoa_r+0x5fc>)
 8023bc8:	4f9f      	ldr	r7, [pc, #636]	; (8023e48 <_dtoa_r+0x600>)
 8023bca:	f006 020f 	and.w	r2, r6, #15
 8023bce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8023bda:	f7dc fd21 	bl	8000620 <__aeabi_dmul>
 8023bde:	e9cd 0100 	strd	r0, r1, [sp]
 8023be2:	1136      	asrs	r6, r6, #4
 8023be4:	2300      	movs	r3, #0
 8023be6:	2502      	movs	r5, #2
 8023be8:	2e00      	cmp	r6, #0
 8023bea:	d17c      	bne.n	8023ce6 <_dtoa_r+0x49e>
 8023bec:	2b00      	cmp	r3, #0
 8023bee:	d191      	bne.n	8023b14 <_dtoa_r+0x2cc>
 8023bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023bf2:	2b00      	cmp	r3, #0
 8023bf4:	f000 8084 	beq.w	8023d00 <_dtoa_r+0x4b8>
 8023bf8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8023bfc:	2200      	movs	r2, #0
 8023bfe:	4b93      	ldr	r3, [pc, #588]	; (8023e4c <_dtoa_r+0x604>)
 8023c00:	4640      	mov	r0, r8
 8023c02:	4649      	mov	r1, r9
 8023c04:	f7dc ff7e 	bl	8000b04 <__aeabi_dcmplt>
 8023c08:	2800      	cmp	r0, #0
 8023c0a:	d079      	beq.n	8023d00 <_dtoa_r+0x4b8>
 8023c0c:	9b03      	ldr	r3, [sp, #12]
 8023c0e:	2b00      	cmp	r3, #0
 8023c10:	d076      	beq.n	8023d00 <_dtoa_r+0x4b8>
 8023c12:	9b04      	ldr	r3, [sp, #16]
 8023c14:	2b00      	cmp	r3, #0
 8023c16:	dd34      	ble.n	8023c82 <_dtoa_r+0x43a>
 8023c18:	2200      	movs	r2, #0
 8023c1a:	4b8d      	ldr	r3, [pc, #564]	; (8023e50 <_dtoa_r+0x608>)
 8023c1c:	4640      	mov	r0, r8
 8023c1e:	4649      	mov	r1, r9
 8023c20:	f7dc fcfe 	bl	8000620 <__aeabi_dmul>
 8023c24:	e9cd 0100 	strd	r0, r1, [sp]
 8023c28:	9e04      	ldr	r6, [sp, #16]
 8023c2a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8023c2e:	3501      	adds	r5, #1
 8023c30:	4628      	mov	r0, r5
 8023c32:	f7dc fc8f 	bl	8000554 <__aeabi_i2d>
 8023c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023c3a:	f7dc fcf1 	bl	8000620 <__aeabi_dmul>
 8023c3e:	2200      	movs	r2, #0
 8023c40:	4b84      	ldr	r3, [pc, #528]	; (8023e54 <_dtoa_r+0x60c>)
 8023c42:	f7dc fb3b 	bl	80002bc <__adddf3>
 8023c46:	4680      	mov	r8, r0
 8023c48:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8023c4c:	2e00      	cmp	r6, #0
 8023c4e:	d15a      	bne.n	8023d06 <_dtoa_r+0x4be>
 8023c50:	2200      	movs	r2, #0
 8023c52:	4b81      	ldr	r3, [pc, #516]	; (8023e58 <_dtoa_r+0x610>)
 8023c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023c58:	f7dc fb2e 	bl	80002b8 <__aeabi_dsub>
 8023c5c:	4642      	mov	r2, r8
 8023c5e:	464b      	mov	r3, r9
 8023c60:	e9cd 0100 	strd	r0, r1, [sp]
 8023c64:	f7dc ff6c 	bl	8000b40 <__aeabi_dcmpgt>
 8023c68:	2800      	cmp	r0, #0
 8023c6a:	f040 829b 	bne.w	80241a4 <_dtoa_r+0x95c>
 8023c6e:	4642      	mov	r2, r8
 8023c70:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023c78:	f7dc ff44 	bl	8000b04 <__aeabi_dcmplt>
 8023c7c:	2800      	cmp	r0, #0
 8023c7e:	f040 828f 	bne.w	80241a0 <_dtoa_r+0x958>
 8023c82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8023c86:	e9cd 2300 	strd	r2, r3, [sp]
 8023c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023c8c:	2b00      	cmp	r3, #0
 8023c8e:	f2c0 8150 	blt.w	8023f32 <_dtoa_r+0x6ea>
 8023c92:	f1bb 0f0e 	cmp.w	fp, #14
 8023c96:	f300 814c 	bgt.w	8023f32 <_dtoa_r+0x6ea>
 8023c9a:	4b6a      	ldr	r3, [pc, #424]	; (8023e44 <_dtoa_r+0x5fc>)
 8023c9c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8023ca0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ca6:	2b00      	cmp	r3, #0
 8023ca8:	f280 80da 	bge.w	8023e60 <_dtoa_r+0x618>
 8023cac:	9b03      	ldr	r3, [sp, #12]
 8023cae:	2b00      	cmp	r3, #0
 8023cb0:	f300 80d6 	bgt.w	8023e60 <_dtoa_r+0x618>
 8023cb4:	f040 8273 	bne.w	802419e <_dtoa_r+0x956>
 8023cb8:	2200      	movs	r2, #0
 8023cba:	4b67      	ldr	r3, [pc, #412]	; (8023e58 <_dtoa_r+0x610>)
 8023cbc:	4640      	mov	r0, r8
 8023cbe:	4649      	mov	r1, r9
 8023cc0:	f7dc fcae 	bl	8000620 <__aeabi_dmul>
 8023cc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023cc8:	f7dc ff30 	bl	8000b2c <__aeabi_dcmpge>
 8023ccc:	9e03      	ldr	r6, [sp, #12]
 8023cce:	4637      	mov	r7, r6
 8023cd0:	2800      	cmp	r0, #0
 8023cd2:	f040 824a 	bne.w	802416a <_dtoa_r+0x922>
 8023cd6:	9b02      	ldr	r3, [sp, #8]
 8023cd8:	9a02      	ldr	r2, [sp, #8]
 8023cda:	1c5d      	adds	r5, r3, #1
 8023cdc:	2331      	movs	r3, #49	; 0x31
 8023cde:	7013      	strb	r3, [r2, #0]
 8023ce0:	f10b 0b01 	add.w	fp, fp, #1
 8023ce4:	e245      	b.n	8024172 <_dtoa_r+0x92a>
 8023ce6:	07f2      	lsls	r2, r6, #31
 8023ce8:	d505      	bpl.n	8023cf6 <_dtoa_r+0x4ae>
 8023cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023cee:	f7dc fc97 	bl	8000620 <__aeabi_dmul>
 8023cf2:	3501      	adds	r5, #1
 8023cf4:	2301      	movs	r3, #1
 8023cf6:	1076      	asrs	r6, r6, #1
 8023cf8:	3708      	adds	r7, #8
 8023cfa:	e775      	b.n	8023be8 <_dtoa_r+0x3a0>
 8023cfc:	2502      	movs	r5, #2
 8023cfe:	e777      	b.n	8023bf0 <_dtoa_r+0x3a8>
 8023d00:	465f      	mov	r7, fp
 8023d02:	9e03      	ldr	r6, [sp, #12]
 8023d04:	e794      	b.n	8023c30 <_dtoa_r+0x3e8>
 8023d06:	9a02      	ldr	r2, [sp, #8]
 8023d08:	4b4e      	ldr	r3, [pc, #312]	; (8023e44 <_dtoa_r+0x5fc>)
 8023d0a:	4432      	add	r2, r6
 8023d0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8023d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023d10:	1e71      	subs	r1, r6, #1
 8023d12:	2a00      	cmp	r2, #0
 8023d14:	d048      	beq.n	8023da8 <_dtoa_r+0x560>
 8023d16:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8023d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d1e:	2000      	movs	r0, #0
 8023d20:	494e      	ldr	r1, [pc, #312]	; (8023e5c <_dtoa_r+0x614>)
 8023d22:	f7dc fda7 	bl	8000874 <__aeabi_ddiv>
 8023d26:	4642      	mov	r2, r8
 8023d28:	464b      	mov	r3, r9
 8023d2a:	f7dc fac5 	bl	80002b8 <__aeabi_dsub>
 8023d2e:	9d02      	ldr	r5, [sp, #8]
 8023d30:	4680      	mov	r8, r0
 8023d32:	4689      	mov	r9, r1
 8023d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023d38:	f7dc ff22 	bl	8000b80 <__aeabi_d2iz>
 8023d3c:	4606      	mov	r6, r0
 8023d3e:	f7dc fc09 	bl	8000554 <__aeabi_i2d>
 8023d42:	4602      	mov	r2, r0
 8023d44:	460b      	mov	r3, r1
 8023d46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023d4a:	f7dc fab5 	bl	80002b8 <__aeabi_dsub>
 8023d4e:	3630      	adds	r6, #48	; 0x30
 8023d50:	f805 6b01 	strb.w	r6, [r5], #1
 8023d54:	4642      	mov	r2, r8
 8023d56:	464b      	mov	r3, r9
 8023d58:	e9cd 0100 	strd	r0, r1, [sp]
 8023d5c:	f7dc fed2 	bl	8000b04 <__aeabi_dcmplt>
 8023d60:	2800      	cmp	r0, #0
 8023d62:	d165      	bne.n	8023e30 <_dtoa_r+0x5e8>
 8023d64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023d68:	2000      	movs	r0, #0
 8023d6a:	4938      	ldr	r1, [pc, #224]	; (8023e4c <_dtoa_r+0x604>)
 8023d6c:	f7dc faa4 	bl	80002b8 <__aeabi_dsub>
 8023d70:	4642      	mov	r2, r8
 8023d72:	464b      	mov	r3, r9
 8023d74:	f7dc fec6 	bl	8000b04 <__aeabi_dcmplt>
 8023d78:	2800      	cmp	r0, #0
 8023d7a:	f040 80ba 	bne.w	8023ef2 <_dtoa_r+0x6aa>
 8023d7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023d80:	429d      	cmp	r5, r3
 8023d82:	f43f af7e 	beq.w	8023c82 <_dtoa_r+0x43a>
 8023d86:	2200      	movs	r2, #0
 8023d88:	4b31      	ldr	r3, [pc, #196]	; (8023e50 <_dtoa_r+0x608>)
 8023d8a:	4640      	mov	r0, r8
 8023d8c:	4649      	mov	r1, r9
 8023d8e:	f7dc fc47 	bl	8000620 <__aeabi_dmul>
 8023d92:	2200      	movs	r2, #0
 8023d94:	4680      	mov	r8, r0
 8023d96:	4689      	mov	r9, r1
 8023d98:	4b2d      	ldr	r3, [pc, #180]	; (8023e50 <_dtoa_r+0x608>)
 8023d9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023d9e:	f7dc fc3f 	bl	8000620 <__aeabi_dmul>
 8023da2:	e9cd 0100 	strd	r0, r1, [sp]
 8023da6:	e7c5      	b.n	8023d34 <_dtoa_r+0x4ec>
 8023da8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8023dac:	4642      	mov	r2, r8
 8023dae:	464b      	mov	r3, r9
 8023db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023db4:	f7dc fc34 	bl	8000620 <__aeabi_dmul>
 8023db8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8023dbc:	9d02      	ldr	r5, [sp, #8]
 8023dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023dc2:	f7dc fedd 	bl	8000b80 <__aeabi_d2iz>
 8023dc6:	4606      	mov	r6, r0
 8023dc8:	f7dc fbc4 	bl	8000554 <__aeabi_i2d>
 8023dcc:	3630      	adds	r6, #48	; 0x30
 8023dce:	4602      	mov	r2, r0
 8023dd0:	460b      	mov	r3, r1
 8023dd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023dd6:	f7dc fa6f 	bl	80002b8 <__aeabi_dsub>
 8023dda:	f805 6b01 	strb.w	r6, [r5], #1
 8023dde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023de0:	42ab      	cmp	r3, r5
 8023de2:	4680      	mov	r8, r0
 8023de4:	4689      	mov	r9, r1
 8023de6:	f04f 0200 	mov.w	r2, #0
 8023dea:	d125      	bne.n	8023e38 <_dtoa_r+0x5f0>
 8023dec:	4b1b      	ldr	r3, [pc, #108]	; (8023e5c <_dtoa_r+0x614>)
 8023dee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8023df2:	f7dc fa63 	bl	80002bc <__adddf3>
 8023df6:	4602      	mov	r2, r0
 8023df8:	460b      	mov	r3, r1
 8023dfa:	4640      	mov	r0, r8
 8023dfc:	4649      	mov	r1, r9
 8023dfe:	f7dc fe9f 	bl	8000b40 <__aeabi_dcmpgt>
 8023e02:	2800      	cmp	r0, #0
 8023e04:	d175      	bne.n	8023ef2 <_dtoa_r+0x6aa>
 8023e06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8023e0a:	2000      	movs	r0, #0
 8023e0c:	4913      	ldr	r1, [pc, #76]	; (8023e5c <_dtoa_r+0x614>)
 8023e0e:	f7dc fa53 	bl	80002b8 <__aeabi_dsub>
 8023e12:	4602      	mov	r2, r0
 8023e14:	460b      	mov	r3, r1
 8023e16:	4640      	mov	r0, r8
 8023e18:	4649      	mov	r1, r9
 8023e1a:	f7dc fe73 	bl	8000b04 <__aeabi_dcmplt>
 8023e1e:	2800      	cmp	r0, #0
 8023e20:	f43f af2f 	beq.w	8023c82 <_dtoa_r+0x43a>
 8023e24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8023e28:	2b30      	cmp	r3, #48	; 0x30
 8023e2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8023e2e:	d001      	beq.n	8023e34 <_dtoa_r+0x5ec>
 8023e30:	46bb      	mov	fp, r7
 8023e32:	e04d      	b.n	8023ed0 <_dtoa_r+0x688>
 8023e34:	4615      	mov	r5, r2
 8023e36:	e7f5      	b.n	8023e24 <_dtoa_r+0x5dc>
 8023e38:	4b05      	ldr	r3, [pc, #20]	; (8023e50 <_dtoa_r+0x608>)
 8023e3a:	f7dc fbf1 	bl	8000620 <__aeabi_dmul>
 8023e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8023e42:	e7bc      	b.n	8023dbe <_dtoa_r+0x576>
 8023e44:	08034358 	.word	0x08034358
 8023e48:	08034330 	.word	0x08034330
 8023e4c:	3ff00000 	.word	0x3ff00000
 8023e50:	40240000 	.word	0x40240000
 8023e54:	401c0000 	.word	0x401c0000
 8023e58:	40140000 	.word	0x40140000
 8023e5c:	3fe00000 	.word	0x3fe00000
 8023e60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8023e64:	9d02      	ldr	r5, [sp, #8]
 8023e66:	4642      	mov	r2, r8
 8023e68:	464b      	mov	r3, r9
 8023e6a:	4630      	mov	r0, r6
 8023e6c:	4639      	mov	r1, r7
 8023e6e:	f7dc fd01 	bl	8000874 <__aeabi_ddiv>
 8023e72:	f7dc fe85 	bl	8000b80 <__aeabi_d2iz>
 8023e76:	9000      	str	r0, [sp, #0]
 8023e78:	f7dc fb6c 	bl	8000554 <__aeabi_i2d>
 8023e7c:	4642      	mov	r2, r8
 8023e7e:	464b      	mov	r3, r9
 8023e80:	f7dc fbce 	bl	8000620 <__aeabi_dmul>
 8023e84:	4602      	mov	r2, r0
 8023e86:	460b      	mov	r3, r1
 8023e88:	4630      	mov	r0, r6
 8023e8a:	4639      	mov	r1, r7
 8023e8c:	f7dc fa14 	bl	80002b8 <__aeabi_dsub>
 8023e90:	9e00      	ldr	r6, [sp, #0]
 8023e92:	9f03      	ldr	r7, [sp, #12]
 8023e94:	3630      	adds	r6, #48	; 0x30
 8023e96:	f805 6b01 	strb.w	r6, [r5], #1
 8023e9a:	9e02      	ldr	r6, [sp, #8]
 8023e9c:	1bae      	subs	r6, r5, r6
 8023e9e:	42b7      	cmp	r7, r6
 8023ea0:	4602      	mov	r2, r0
 8023ea2:	460b      	mov	r3, r1
 8023ea4:	d138      	bne.n	8023f18 <_dtoa_r+0x6d0>
 8023ea6:	f7dc fa09 	bl	80002bc <__adddf3>
 8023eaa:	4606      	mov	r6, r0
 8023eac:	460f      	mov	r7, r1
 8023eae:	4602      	mov	r2, r0
 8023eb0:	460b      	mov	r3, r1
 8023eb2:	4640      	mov	r0, r8
 8023eb4:	4649      	mov	r1, r9
 8023eb6:	f7dc fe25 	bl	8000b04 <__aeabi_dcmplt>
 8023eba:	b9c8      	cbnz	r0, 8023ef0 <_dtoa_r+0x6a8>
 8023ebc:	4632      	mov	r2, r6
 8023ebe:	463b      	mov	r3, r7
 8023ec0:	4640      	mov	r0, r8
 8023ec2:	4649      	mov	r1, r9
 8023ec4:	f7dc fe14 	bl	8000af0 <__aeabi_dcmpeq>
 8023ec8:	b110      	cbz	r0, 8023ed0 <_dtoa_r+0x688>
 8023eca:	9b00      	ldr	r3, [sp, #0]
 8023ecc:	07db      	lsls	r3, r3, #31
 8023ece:	d40f      	bmi.n	8023ef0 <_dtoa_r+0x6a8>
 8023ed0:	4651      	mov	r1, sl
 8023ed2:	4620      	mov	r0, r4
 8023ed4:	f000 fcea 	bl	80248ac <_Bfree>
 8023ed8:	2300      	movs	r3, #0
 8023eda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023edc:	702b      	strb	r3, [r5, #0]
 8023ede:	f10b 0301 	add.w	r3, fp, #1
 8023ee2:	6013      	str	r3, [r2, #0]
 8023ee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023ee6:	2b00      	cmp	r3, #0
 8023ee8:	f43f acf8 	beq.w	80238dc <_dtoa_r+0x94>
 8023eec:	601d      	str	r5, [r3, #0]
 8023eee:	e4f5      	b.n	80238dc <_dtoa_r+0x94>
 8023ef0:	465f      	mov	r7, fp
 8023ef2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8023ef6:	2a39      	cmp	r2, #57	; 0x39
 8023ef8:	f105 33ff 	add.w	r3, r5, #4294967295
 8023efc:	d106      	bne.n	8023f0c <_dtoa_r+0x6c4>
 8023efe:	9a02      	ldr	r2, [sp, #8]
 8023f00:	429a      	cmp	r2, r3
 8023f02:	d107      	bne.n	8023f14 <_dtoa_r+0x6cc>
 8023f04:	2330      	movs	r3, #48	; 0x30
 8023f06:	7013      	strb	r3, [r2, #0]
 8023f08:	3701      	adds	r7, #1
 8023f0a:	4613      	mov	r3, r2
 8023f0c:	781a      	ldrb	r2, [r3, #0]
 8023f0e:	3201      	adds	r2, #1
 8023f10:	701a      	strb	r2, [r3, #0]
 8023f12:	e78d      	b.n	8023e30 <_dtoa_r+0x5e8>
 8023f14:	461d      	mov	r5, r3
 8023f16:	e7ec      	b.n	8023ef2 <_dtoa_r+0x6aa>
 8023f18:	2200      	movs	r2, #0
 8023f1a:	4ba4      	ldr	r3, [pc, #656]	; (80241ac <_dtoa_r+0x964>)
 8023f1c:	f7dc fb80 	bl	8000620 <__aeabi_dmul>
 8023f20:	2200      	movs	r2, #0
 8023f22:	2300      	movs	r3, #0
 8023f24:	4606      	mov	r6, r0
 8023f26:	460f      	mov	r7, r1
 8023f28:	f7dc fde2 	bl	8000af0 <__aeabi_dcmpeq>
 8023f2c:	2800      	cmp	r0, #0
 8023f2e:	d09a      	beq.n	8023e66 <_dtoa_r+0x61e>
 8023f30:	e7ce      	b.n	8023ed0 <_dtoa_r+0x688>
 8023f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023f34:	2a00      	cmp	r2, #0
 8023f36:	f000 80cd 	beq.w	80240d4 <_dtoa_r+0x88c>
 8023f3a:	9a07      	ldr	r2, [sp, #28]
 8023f3c:	2a01      	cmp	r2, #1
 8023f3e:	f300 80af 	bgt.w	80240a0 <_dtoa_r+0x858>
 8023f42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023f44:	2a00      	cmp	r2, #0
 8023f46:	f000 80a7 	beq.w	8024098 <_dtoa_r+0x850>
 8023f4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8023f4e:	9e08      	ldr	r6, [sp, #32]
 8023f50:	9d05      	ldr	r5, [sp, #20]
 8023f52:	9a05      	ldr	r2, [sp, #20]
 8023f54:	441a      	add	r2, r3
 8023f56:	9205      	str	r2, [sp, #20]
 8023f58:	9a06      	ldr	r2, [sp, #24]
 8023f5a:	2101      	movs	r1, #1
 8023f5c:	441a      	add	r2, r3
 8023f5e:	4620      	mov	r0, r4
 8023f60:	9206      	str	r2, [sp, #24]
 8023f62:	f000 fd43 	bl	80249ec <__i2b>
 8023f66:	4607      	mov	r7, r0
 8023f68:	2d00      	cmp	r5, #0
 8023f6a:	dd0c      	ble.n	8023f86 <_dtoa_r+0x73e>
 8023f6c:	9b06      	ldr	r3, [sp, #24]
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	dd09      	ble.n	8023f86 <_dtoa_r+0x73e>
 8023f72:	42ab      	cmp	r3, r5
 8023f74:	9a05      	ldr	r2, [sp, #20]
 8023f76:	bfa8      	it	ge
 8023f78:	462b      	movge	r3, r5
 8023f7a:	1ad2      	subs	r2, r2, r3
 8023f7c:	9205      	str	r2, [sp, #20]
 8023f7e:	9a06      	ldr	r2, [sp, #24]
 8023f80:	1aed      	subs	r5, r5, r3
 8023f82:	1ad3      	subs	r3, r2, r3
 8023f84:	9306      	str	r3, [sp, #24]
 8023f86:	9b08      	ldr	r3, [sp, #32]
 8023f88:	b1f3      	cbz	r3, 8023fc8 <_dtoa_r+0x780>
 8023f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f8c:	2b00      	cmp	r3, #0
 8023f8e:	f000 80a5 	beq.w	80240dc <_dtoa_r+0x894>
 8023f92:	2e00      	cmp	r6, #0
 8023f94:	dd10      	ble.n	8023fb8 <_dtoa_r+0x770>
 8023f96:	4639      	mov	r1, r7
 8023f98:	4632      	mov	r2, r6
 8023f9a:	4620      	mov	r0, r4
 8023f9c:	f000 fdbc 	bl	8024b18 <__pow5mult>
 8023fa0:	4652      	mov	r2, sl
 8023fa2:	4601      	mov	r1, r0
 8023fa4:	4607      	mov	r7, r0
 8023fa6:	4620      	mov	r0, r4
 8023fa8:	f000 fd29 	bl	80249fe <__multiply>
 8023fac:	4651      	mov	r1, sl
 8023fae:	4680      	mov	r8, r0
 8023fb0:	4620      	mov	r0, r4
 8023fb2:	f000 fc7b 	bl	80248ac <_Bfree>
 8023fb6:	46c2      	mov	sl, r8
 8023fb8:	9b08      	ldr	r3, [sp, #32]
 8023fba:	1b9a      	subs	r2, r3, r6
 8023fbc:	d004      	beq.n	8023fc8 <_dtoa_r+0x780>
 8023fbe:	4651      	mov	r1, sl
 8023fc0:	4620      	mov	r0, r4
 8023fc2:	f000 fda9 	bl	8024b18 <__pow5mult>
 8023fc6:	4682      	mov	sl, r0
 8023fc8:	2101      	movs	r1, #1
 8023fca:	4620      	mov	r0, r4
 8023fcc:	f000 fd0e 	bl	80249ec <__i2b>
 8023fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023fd2:	2b00      	cmp	r3, #0
 8023fd4:	4606      	mov	r6, r0
 8023fd6:	f340 8083 	ble.w	80240e0 <_dtoa_r+0x898>
 8023fda:	461a      	mov	r2, r3
 8023fdc:	4601      	mov	r1, r0
 8023fde:	4620      	mov	r0, r4
 8023fe0:	f000 fd9a 	bl	8024b18 <__pow5mult>
 8023fe4:	9b07      	ldr	r3, [sp, #28]
 8023fe6:	2b01      	cmp	r3, #1
 8023fe8:	4606      	mov	r6, r0
 8023fea:	dd7c      	ble.n	80240e6 <_dtoa_r+0x89e>
 8023fec:	f04f 0800 	mov.w	r8, #0
 8023ff0:	6933      	ldr	r3, [r6, #16]
 8023ff2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8023ff6:	6918      	ldr	r0, [r3, #16]
 8023ff8:	f000 fcaa 	bl	8024950 <__hi0bits>
 8023ffc:	f1c0 0020 	rsb	r0, r0, #32
 8024000:	9b06      	ldr	r3, [sp, #24]
 8024002:	4418      	add	r0, r3
 8024004:	f010 001f 	ands.w	r0, r0, #31
 8024008:	f000 8096 	beq.w	8024138 <_dtoa_r+0x8f0>
 802400c:	f1c0 0320 	rsb	r3, r0, #32
 8024010:	2b04      	cmp	r3, #4
 8024012:	f340 8087 	ble.w	8024124 <_dtoa_r+0x8dc>
 8024016:	9b05      	ldr	r3, [sp, #20]
 8024018:	f1c0 001c 	rsb	r0, r0, #28
 802401c:	4403      	add	r3, r0
 802401e:	9305      	str	r3, [sp, #20]
 8024020:	9b06      	ldr	r3, [sp, #24]
 8024022:	4405      	add	r5, r0
 8024024:	4403      	add	r3, r0
 8024026:	9306      	str	r3, [sp, #24]
 8024028:	9b05      	ldr	r3, [sp, #20]
 802402a:	2b00      	cmp	r3, #0
 802402c:	dd05      	ble.n	802403a <_dtoa_r+0x7f2>
 802402e:	4651      	mov	r1, sl
 8024030:	461a      	mov	r2, r3
 8024032:	4620      	mov	r0, r4
 8024034:	f000 fdbe 	bl	8024bb4 <__lshift>
 8024038:	4682      	mov	sl, r0
 802403a:	9b06      	ldr	r3, [sp, #24]
 802403c:	2b00      	cmp	r3, #0
 802403e:	dd05      	ble.n	802404c <_dtoa_r+0x804>
 8024040:	4631      	mov	r1, r6
 8024042:	461a      	mov	r2, r3
 8024044:	4620      	mov	r0, r4
 8024046:	f000 fdb5 	bl	8024bb4 <__lshift>
 802404a:	4606      	mov	r6, r0
 802404c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802404e:	2b00      	cmp	r3, #0
 8024050:	d074      	beq.n	802413c <_dtoa_r+0x8f4>
 8024052:	4631      	mov	r1, r6
 8024054:	4650      	mov	r0, sl
 8024056:	f000 fdfe 	bl	8024c56 <__mcmp>
 802405a:	2800      	cmp	r0, #0
 802405c:	da6e      	bge.n	802413c <_dtoa_r+0x8f4>
 802405e:	2300      	movs	r3, #0
 8024060:	4651      	mov	r1, sl
 8024062:	220a      	movs	r2, #10
 8024064:	4620      	mov	r0, r4
 8024066:	f000 fc38 	bl	80248da <__multadd>
 802406a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802406c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024070:	4682      	mov	sl, r0
 8024072:	2b00      	cmp	r3, #0
 8024074:	f000 81a8 	beq.w	80243c8 <_dtoa_r+0xb80>
 8024078:	2300      	movs	r3, #0
 802407a:	4639      	mov	r1, r7
 802407c:	220a      	movs	r2, #10
 802407e:	4620      	mov	r0, r4
 8024080:	f000 fc2b 	bl	80248da <__multadd>
 8024084:	9b04      	ldr	r3, [sp, #16]
 8024086:	2b00      	cmp	r3, #0
 8024088:	4607      	mov	r7, r0
 802408a:	f300 80c8 	bgt.w	802421e <_dtoa_r+0x9d6>
 802408e:	9b07      	ldr	r3, [sp, #28]
 8024090:	2b02      	cmp	r3, #2
 8024092:	f340 80c4 	ble.w	802421e <_dtoa_r+0x9d6>
 8024096:	e059      	b.n	802414c <_dtoa_r+0x904>
 8024098:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802409a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802409e:	e756      	b.n	8023f4e <_dtoa_r+0x706>
 80240a0:	9b03      	ldr	r3, [sp, #12]
 80240a2:	1e5e      	subs	r6, r3, #1
 80240a4:	9b08      	ldr	r3, [sp, #32]
 80240a6:	42b3      	cmp	r3, r6
 80240a8:	bfbf      	itttt	lt
 80240aa:	9b08      	ldrlt	r3, [sp, #32]
 80240ac:	9608      	strlt	r6, [sp, #32]
 80240ae:	1af2      	sublt	r2, r6, r3
 80240b0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80240b2:	bfb6      	itet	lt
 80240b4:	189b      	addlt	r3, r3, r2
 80240b6:	1b9e      	subge	r6, r3, r6
 80240b8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80240ba:	9b03      	ldr	r3, [sp, #12]
 80240bc:	bfb8      	it	lt
 80240be:	2600      	movlt	r6, #0
 80240c0:	2b00      	cmp	r3, #0
 80240c2:	bfb9      	ittee	lt
 80240c4:	9b05      	ldrlt	r3, [sp, #20]
 80240c6:	9a03      	ldrlt	r2, [sp, #12]
 80240c8:	9d05      	ldrge	r5, [sp, #20]
 80240ca:	9b03      	ldrge	r3, [sp, #12]
 80240cc:	bfbc      	itt	lt
 80240ce:	1a9d      	sublt	r5, r3, r2
 80240d0:	2300      	movlt	r3, #0
 80240d2:	e73e      	b.n	8023f52 <_dtoa_r+0x70a>
 80240d4:	9e08      	ldr	r6, [sp, #32]
 80240d6:	9d05      	ldr	r5, [sp, #20]
 80240d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80240da:	e745      	b.n	8023f68 <_dtoa_r+0x720>
 80240dc:	9a08      	ldr	r2, [sp, #32]
 80240de:	e76e      	b.n	8023fbe <_dtoa_r+0x776>
 80240e0:	9b07      	ldr	r3, [sp, #28]
 80240e2:	2b01      	cmp	r3, #1
 80240e4:	dc19      	bgt.n	802411a <_dtoa_r+0x8d2>
 80240e6:	9b00      	ldr	r3, [sp, #0]
 80240e8:	b9bb      	cbnz	r3, 802411a <_dtoa_r+0x8d2>
 80240ea:	9b01      	ldr	r3, [sp, #4]
 80240ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80240f0:	b99b      	cbnz	r3, 802411a <_dtoa_r+0x8d2>
 80240f2:	9b01      	ldr	r3, [sp, #4]
 80240f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80240f8:	0d1b      	lsrs	r3, r3, #20
 80240fa:	051b      	lsls	r3, r3, #20
 80240fc:	b183      	cbz	r3, 8024120 <_dtoa_r+0x8d8>
 80240fe:	9b05      	ldr	r3, [sp, #20]
 8024100:	3301      	adds	r3, #1
 8024102:	9305      	str	r3, [sp, #20]
 8024104:	9b06      	ldr	r3, [sp, #24]
 8024106:	3301      	adds	r3, #1
 8024108:	9306      	str	r3, [sp, #24]
 802410a:	f04f 0801 	mov.w	r8, #1
 802410e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024110:	2b00      	cmp	r3, #0
 8024112:	f47f af6d 	bne.w	8023ff0 <_dtoa_r+0x7a8>
 8024116:	2001      	movs	r0, #1
 8024118:	e772      	b.n	8024000 <_dtoa_r+0x7b8>
 802411a:	f04f 0800 	mov.w	r8, #0
 802411e:	e7f6      	b.n	802410e <_dtoa_r+0x8c6>
 8024120:	4698      	mov	r8, r3
 8024122:	e7f4      	b.n	802410e <_dtoa_r+0x8c6>
 8024124:	d080      	beq.n	8024028 <_dtoa_r+0x7e0>
 8024126:	9a05      	ldr	r2, [sp, #20]
 8024128:	331c      	adds	r3, #28
 802412a:	441a      	add	r2, r3
 802412c:	9205      	str	r2, [sp, #20]
 802412e:	9a06      	ldr	r2, [sp, #24]
 8024130:	441a      	add	r2, r3
 8024132:	441d      	add	r5, r3
 8024134:	4613      	mov	r3, r2
 8024136:	e776      	b.n	8024026 <_dtoa_r+0x7de>
 8024138:	4603      	mov	r3, r0
 802413a:	e7f4      	b.n	8024126 <_dtoa_r+0x8de>
 802413c:	9b03      	ldr	r3, [sp, #12]
 802413e:	2b00      	cmp	r3, #0
 8024140:	dc36      	bgt.n	80241b0 <_dtoa_r+0x968>
 8024142:	9b07      	ldr	r3, [sp, #28]
 8024144:	2b02      	cmp	r3, #2
 8024146:	dd33      	ble.n	80241b0 <_dtoa_r+0x968>
 8024148:	9b03      	ldr	r3, [sp, #12]
 802414a:	9304      	str	r3, [sp, #16]
 802414c:	9b04      	ldr	r3, [sp, #16]
 802414e:	b963      	cbnz	r3, 802416a <_dtoa_r+0x922>
 8024150:	4631      	mov	r1, r6
 8024152:	2205      	movs	r2, #5
 8024154:	4620      	mov	r0, r4
 8024156:	f000 fbc0 	bl	80248da <__multadd>
 802415a:	4601      	mov	r1, r0
 802415c:	4606      	mov	r6, r0
 802415e:	4650      	mov	r0, sl
 8024160:	f000 fd79 	bl	8024c56 <__mcmp>
 8024164:	2800      	cmp	r0, #0
 8024166:	f73f adb6 	bgt.w	8023cd6 <_dtoa_r+0x48e>
 802416a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802416c:	9d02      	ldr	r5, [sp, #8]
 802416e:	ea6f 0b03 	mvn.w	fp, r3
 8024172:	2300      	movs	r3, #0
 8024174:	9303      	str	r3, [sp, #12]
 8024176:	4631      	mov	r1, r6
 8024178:	4620      	mov	r0, r4
 802417a:	f000 fb97 	bl	80248ac <_Bfree>
 802417e:	2f00      	cmp	r7, #0
 8024180:	f43f aea6 	beq.w	8023ed0 <_dtoa_r+0x688>
 8024184:	9b03      	ldr	r3, [sp, #12]
 8024186:	b12b      	cbz	r3, 8024194 <_dtoa_r+0x94c>
 8024188:	42bb      	cmp	r3, r7
 802418a:	d003      	beq.n	8024194 <_dtoa_r+0x94c>
 802418c:	4619      	mov	r1, r3
 802418e:	4620      	mov	r0, r4
 8024190:	f000 fb8c 	bl	80248ac <_Bfree>
 8024194:	4639      	mov	r1, r7
 8024196:	4620      	mov	r0, r4
 8024198:	f000 fb88 	bl	80248ac <_Bfree>
 802419c:	e698      	b.n	8023ed0 <_dtoa_r+0x688>
 802419e:	2600      	movs	r6, #0
 80241a0:	4637      	mov	r7, r6
 80241a2:	e7e2      	b.n	802416a <_dtoa_r+0x922>
 80241a4:	46bb      	mov	fp, r7
 80241a6:	4637      	mov	r7, r6
 80241a8:	e595      	b.n	8023cd6 <_dtoa_r+0x48e>
 80241aa:	bf00      	nop
 80241ac:	40240000 	.word	0x40240000
 80241b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241b2:	bb93      	cbnz	r3, 802421a <_dtoa_r+0x9d2>
 80241b4:	9b03      	ldr	r3, [sp, #12]
 80241b6:	9304      	str	r3, [sp, #16]
 80241b8:	9d02      	ldr	r5, [sp, #8]
 80241ba:	4631      	mov	r1, r6
 80241bc:	4650      	mov	r0, sl
 80241be:	f7ff fab7 	bl	8023730 <quorem>
 80241c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80241c6:	f805 9b01 	strb.w	r9, [r5], #1
 80241ca:	9b02      	ldr	r3, [sp, #8]
 80241cc:	9a04      	ldr	r2, [sp, #16]
 80241ce:	1aeb      	subs	r3, r5, r3
 80241d0:	429a      	cmp	r2, r3
 80241d2:	f300 80dc 	bgt.w	802438e <_dtoa_r+0xb46>
 80241d6:	9b02      	ldr	r3, [sp, #8]
 80241d8:	2a01      	cmp	r2, #1
 80241da:	bfac      	ite	ge
 80241dc:	189b      	addge	r3, r3, r2
 80241de:	3301      	addlt	r3, #1
 80241e0:	4698      	mov	r8, r3
 80241e2:	2300      	movs	r3, #0
 80241e4:	9303      	str	r3, [sp, #12]
 80241e6:	4651      	mov	r1, sl
 80241e8:	2201      	movs	r2, #1
 80241ea:	4620      	mov	r0, r4
 80241ec:	f000 fce2 	bl	8024bb4 <__lshift>
 80241f0:	4631      	mov	r1, r6
 80241f2:	4682      	mov	sl, r0
 80241f4:	f000 fd2f 	bl	8024c56 <__mcmp>
 80241f8:	2800      	cmp	r0, #0
 80241fa:	f300 808d 	bgt.w	8024318 <_dtoa_r+0xad0>
 80241fe:	d103      	bne.n	8024208 <_dtoa_r+0x9c0>
 8024200:	f019 0f01 	tst.w	r9, #1
 8024204:	f040 8088 	bne.w	8024318 <_dtoa_r+0xad0>
 8024208:	4645      	mov	r5, r8
 802420a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802420e:	2b30      	cmp	r3, #48	; 0x30
 8024210:	f105 32ff 	add.w	r2, r5, #4294967295
 8024214:	d1af      	bne.n	8024176 <_dtoa_r+0x92e>
 8024216:	4615      	mov	r5, r2
 8024218:	e7f7      	b.n	802420a <_dtoa_r+0x9c2>
 802421a:	9b03      	ldr	r3, [sp, #12]
 802421c:	9304      	str	r3, [sp, #16]
 802421e:	2d00      	cmp	r5, #0
 8024220:	dd05      	ble.n	802422e <_dtoa_r+0x9e6>
 8024222:	4639      	mov	r1, r7
 8024224:	462a      	mov	r2, r5
 8024226:	4620      	mov	r0, r4
 8024228:	f000 fcc4 	bl	8024bb4 <__lshift>
 802422c:	4607      	mov	r7, r0
 802422e:	f1b8 0f00 	cmp.w	r8, #0
 8024232:	d04c      	beq.n	80242ce <_dtoa_r+0xa86>
 8024234:	6879      	ldr	r1, [r7, #4]
 8024236:	4620      	mov	r0, r4
 8024238:	f000 fb04 	bl	8024844 <_Balloc>
 802423c:	693a      	ldr	r2, [r7, #16]
 802423e:	3202      	adds	r2, #2
 8024240:	4605      	mov	r5, r0
 8024242:	0092      	lsls	r2, r2, #2
 8024244:	f107 010c 	add.w	r1, r7, #12
 8024248:	300c      	adds	r0, #12
 802424a:	f7fe fa4d 	bl	80226e8 <memcpy>
 802424e:	2201      	movs	r2, #1
 8024250:	4629      	mov	r1, r5
 8024252:	4620      	mov	r0, r4
 8024254:	f000 fcae 	bl	8024bb4 <__lshift>
 8024258:	9b00      	ldr	r3, [sp, #0]
 802425a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802425e:	9703      	str	r7, [sp, #12]
 8024260:	f003 0301 	and.w	r3, r3, #1
 8024264:	4607      	mov	r7, r0
 8024266:	9305      	str	r3, [sp, #20]
 8024268:	4631      	mov	r1, r6
 802426a:	4650      	mov	r0, sl
 802426c:	f7ff fa60 	bl	8023730 <quorem>
 8024270:	9903      	ldr	r1, [sp, #12]
 8024272:	4605      	mov	r5, r0
 8024274:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8024278:	4650      	mov	r0, sl
 802427a:	f000 fcec 	bl	8024c56 <__mcmp>
 802427e:	463a      	mov	r2, r7
 8024280:	9000      	str	r0, [sp, #0]
 8024282:	4631      	mov	r1, r6
 8024284:	4620      	mov	r0, r4
 8024286:	f000 fd00 	bl	8024c8a <__mdiff>
 802428a:	68c3      	ldr	r3, [r0, #12]
 802428c:	4602      	mov	r2, r0
 802428e:	bb03      	cbnz	r3, 80242d2 <_dtoa_r+0xa8a>
 8024290:	4601      	mov	r1, r0
 8024292:	9006      	str	r0, [sp, #24]
 8024294:	4650      	mov	r0, sl
 8024296:	f000 fcde 	bl	8024c56 <__mcmp>
 802429a:	9a06      	ldr	r2, [sp, #24]
 802429c:	4603      	mov	r3, r0
 802429e:	4611      	mov	r1, r2
 80242a0:	4620      	mov	r0, r4
 80242a2:	9306      	str	r3, [sp, #24]
 80242a4:	f000 fb02 	bl	80248ac <_Bfree>
 80242a8:	9b06      	ldr	r3, [sp, #24]
 80242aa:	b9a3      	cbnz	r3, 80242d6 <_dtoa_r+0xa8e>
 80242ac:	9a07      	ldr	r2, [sp, #28]
 80242ae:	b992      	cbnz	r2, 80242d6 <_dtoa_r+0xa8e>
 80242b0:	9a05      	ldr	r2, [sp, #20]
 80242b2:	b982      	cbnz	r2, 80242d6 <_dtoa_r+0xa8e>
 80242b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80242b8:	d029      	beq.n	802430e <_dtoa_r+0xac6>
 80242ba:	9b00      	ldr	r3, [sp, #0]
 80242bc:	2b00      	cmp	r3, #0
 80242be:	dd01      	ble.n	80242c4 <_dtoa_r+0xa7c>
 80242c0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80242c4:	f108 0501 	add.w	r5, r8, #1
 80242c8:	f888 9000 	strb.w	r9, [r8]
 80242cc:	e753      	b.n	8024176 <_dtoa_r+0x92e>
 80242ce:	4638      	mov	r0, r7
 80242d0:	e7c2      	b.n	8024258 <_dtoa_r+0xa10>
 80242d2:	2301      	movs	r3, #1
 80242d4:	e7e3      	b.n	802429e <_dtoa_r+0xa56>
 80242d6:	9a00      	ldr	r2, [sp, #0]
 80242d8:	2a00      	cmp	r2, #0
 80242da:	db04      	blt.n	80242e6 <_dtoa_r+0xa9e>
 80242dc:	d125      	bne.n	802432a <_dtoa_r+0xae2>
 80242de:	9a07      	ldr	r2, [sp, #28]
 80242e0:	bb1a      	cbnz	r2, 802432a <_dtoa_r+0xae2>
 80242e2:	9a05      	ldr	r2, [sp, #20]
 80242e4:	bb0a      	cbnz	r2, 802432a <_dtoa_r+0xae2>
 80242e6:	2b00      	cmp	r3, #0
 80242e8:	ddec      	ble.n	80242c4 <_dtoa_r+0xa7c>
 80242ea:	4651      	mov	r1, sl
 80242ec:	2201      	movs	r2, #1
 80242ee:	4620      	mov	r0, r4
 80242f0:	f000 fc60 	bl	8024bb4 <__lshift>
 80242f4:	4631      	mov	r1, r6
 80242f6:	4682      	mov	sl, r0
 80242f8:	f000 fcad 	bl	8024c56 <__mcmp>
 80242fc:	2800      	cmp	r0, #0
 80242fe:	dc03      	bgt.n	8024308 <_dtoa_r+0xac0>
 8024300:	d1e0      	bne.n	80242c4 <_dtoa_r+0xa7c>
 8024302:	f019 0f01 	tst.w	r9, #1
 8024306:	d0dd      	beq.n	80242c4 <_dtoa_r+0xa7c>
 8024308:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802430c:	d1d8      	bne.n	80242c0 <_dtoa_r+0xa78>
 802430e:	2339      	movs	r3, #57	; 0x39
 8024310:	f888 3000 	strb.w	r3, [r8]
 8024314:	f108 0801 	add.w	r8, r8, #1
 8024318:	4645      	mov	r5, r8
 802431a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802431e:	2b39      	cmp	r3, #57	; 0x39
 8024320:	f105 32ff 	add.w	r2, r5, #4294967295
 8024324:	d03b      	beq.n	802439e <_dtoa_r+0xb56>
 8024326:	3301      	adds	r3, #1
 8024328:	e040      	b.n	80243ac <_dtoa_r+0xb64>
 802432a:	2b00      	cmp	r3, #0
 802432c:	f108 0501 	add.w	r5, r8, #1
 8024330:	dd05      	ble.n	802433e <_dtoa_r+0xaf6>
 8024332:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8024336:	d0ea      	beq.n	802430e <_dtoa_r+0xac6>
 8024338:	f109 0901 	add.w	r9, r9, #1
 802433c:	e7c4      	b.n	80242c8 <_dtoa_r+0xa80>
 802433e:	9b02      	ldr	r3, [sp, #8]
 8024340:	9a04      	ldr	r2, [sp, #16]
 8024342:	f805 9c01 	strb.w	r9, [r5, #-1]
 8024346:	1aeb      	subs	r3, r5, r3
 8024348:	4293      	cmp	r3, r2
 802434a:	46a8      	mov	r8, r5
 802434c:	f43f af4b 	beq.w	80241e6 <_dtoa_r+0x99e>
 8024350:	4651      	mov	r1, sl
 8024352:	2300      	movs	r3, #0
 8024354:	220a      	movs	r2, #10
 8024356:	4620      	mov	r0, r4
 8024358:	f000 fabf 	bl	80248da <__multadd>
 802435c:	9b03      	ldr	r3, [sp, #12]
 802435e:	9903      	ldr	r1, [sp, #12]
 8024360:	42bb      	cmp	r3, r7
 8024362:	4682      	mov	sl, r0
 8024364:	f04f 0300 	mov.w	r3, #0
 8024368:	f04f 020a 	mov.w	r2, #10
 802436c:	4620      	mov	r0, r4
 802436e:	d104      	bne.n	802437a <_dtoa_r+0xb32>
 8024370:	f000 fab3 	bl	80248da <__multadd>
 8024374:	9003      	str	r0, [sp, #12]
 8024376:	4607      	mov	r7, r0
 8024378:	e776      	b.n	8024268 <_dtoa_r+0xa20>
 802437a:	f000 faae 	bl	80248da <__multadd>
 802437e:	2300      	movs	r3, #0
 8024380:	9003      	str	r0, [sp, #12]
 8024382:	220a      	movs	r2, #10
 8024384:	4639      	mov	r1, r7
 8024386:	4620      	mov	r0, r4
 8024388:	f000 faa7 	bl	80248da <__multadd>
 802438c:	e7f3      	b.n	8024376 <_dtoa_r+0xb2e>
 802438e:	4651      	mov	r1, sl
 8024390:	2300      	movs	r3, #0
 8024392:	220a      	movs	r2, #10
 8024394:	4620      	mov	r0, r4
 8024396:	f000 faa0 	bl	80248da <__multadd>
 802439a:	4682      	mov	sl, r0
 802439c:	e70d      	b.n	80241ba <_dtoa_r+0x972>
 802439e:	9b02      	ldr	r3, [sp, #8]
 80243a0:	4293      	cmp	r3, r2
 80243a2:	d105      	bne.n	80243b0 <_dtoa_r+0xb68>
 80243a4:	9a02      	ldr	r2, [sp, #8]
 80243a6:	f10b 0b01 	add.w	fp, fp, #1
 80243aa:	2331      	movs	r3, #49	; 0x31
 80243ac:	7013      	strb	r3, [r2, #0]
 80243ae:	e6e2      	b.n	8024176 <_dtoa_r+0x92e>
 80243b0:	4615      	mov	r5, r2
 80243b2:	e7b2      	b.n	802431a <_dtoa_r+0xad2>
 80243b4:	4b09      	ldr	r3, [pc, #36]	; (80243dc <_dtoa_r+0xb94>)
 80243b6:	f7ff baae 	b.w	8023916 <_dtoa_r+0xce>
 80243ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80243bc:	2b00      	cmp	r3, #0
 80243be:	f47f aa88 	bne.w	80238d2 <_dtoa_r+0x8a>
 80243c2:	4b07      	ldr	r3, [pc, #28]	; (80243e0 <_dtoa_r+0xb98>)
 80243c4:	f7ff baa7 	b.w	8023916 <_dtoa_r+0xce>
 80243c8:	9b04      	ldr	r3, [sp, #16]
 80243ca:	2b00      	cmp	r3, #0
 80243cc:	f73f aef4 	bgt.w	80241b8 <_dtoa_r+0x970>
 80243d0:	9b07      	ldr	r3, [sp, #28]
 80243d2:	2b02      	cmp	r3, #2
 80243d4:	f77f aef0 	ble.w	80241b8 <_dtoa_r+0x970>
 80243d8:	e6b8      	b.n	802414c <_dtoa_r+0x904>
 80243da:	bf00      	nop
 80243dc:	08034196 	.word	0x08034196
 80243e0:	08034322 	.word	0x08034322

080243e4 <_localeconv_r>:
 80243e4:	4b04      	ldr	r3, [pc, #16]	; (80243f8 <_localeconv_r+0x14>)
 80243e6:	681b      	ldr	r3, [r3, #0]
 80243e8:	6a18      	ldr	r0, [r3, #32]
 80243ea:	4b04      	ldr	r3, [pc, #16]	; (80243fc <_localeconv_r+0x18>)
 80243ec:	2800      	cmp	r0, #0
 80243ee:	bf08      	it	eq
 80243f0:	4618      	moveq	r0, r3
 80243f2:	30f0      	adds	r0, #240	; 0xf0
 80243f4:	4770      	bx	lr
 80243f6:	bf00      	nop
 80243f8:	20000acc 	.word	0x20000acc
 80243fc:	20000fd0 	.word	0x20000fd0

08024400 <malloc>:
 8024400:	4b02      	ldr	r3, [pc, #8]	; (802440c <malloc+0xc>)
 8024402:	4601      	mov	r1, r0
 8024404:	6818      	ldr	r0, [r3, #0]
 8024406:	f000 b803 	b.w	8024410 <_malloc_r>
 802440a:	bf00      	nop
 802440c:	20000acc 	.word	0x20000acc

08024410 <_malloc_r>:
 8024410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024414:	f101 040b 	add.w	r4, r1, #11
 8024418:	2c16      	cmp	r4, #22
 802441a:	4681      	mov	r9, r0
 802441c:	d907      	bls.n	802442e <_malloc_r+0x1e>
 802441e:	f034 0407 	bics.w	r4, r4, #7
 8024422:	d505      	bpl.n	8024430 <_malloc_r+0x20>
 8024424:	230c      	movs	r3, #12
 8024426:	f8c9 3000 	str.w	r3, [r9]
 802442a:	2600      	movs	r6, #0
 802442c:	e131      	b.n	8024692 <_malloc_r+0x282>
 802442e:	2410      	movs	r4, #16
 8024430:	428c      	cmp	r4, r1
 8024432:	d3f7      	bcc.n	8024424 <_malloc_r+0x14>
 8024434:	4648      	mov	r0, r9
 8024436:	f000 f9f9 	bl	802482c <__malloc_lock>
 802443a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 802443e:	4d9c      	ldr	r5, [pc, #624]	; (80246b0 <_malloc_r+0x2a0>)
 8024440:	d236      	bcs.n	80244b0 <_malloc_r+0xa0>
 8024442:	f104 0208 	add.w	r2, r4, #8
 8024446:	442a      	add	r2, r5
 8024448:	f1a2 0108 	sub.w	r1, r2, #8
 802444c:	6856      	ldr	r6, [r2, #4]
 802444e:	428e      	cmp	r6, r1
 8024450:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8024454:	d102      	bne.n	802445c <_malloc_r+0x4c>
 8024456:	68d6      	ldr	r6, [r2, #12]
 8024458:	42b2      	cmp	r2, r6
 802445a:	d010      	beq.n	802447e <_malloc_r+0x6e>
 802445c:	6873      	ldr	r3, [r6, #4]
 802445e:	68f2      	ldr	r2, [r6, #12]
 8024460:	68b1      	ldr	r1, [r6, #8]
 8024462:	f023 0303 	bic.w	r3, r3, #3
 8024466:	60ca      	str	r2, [r1, #12]
 8024468:	4433      	add	r3, r6
 802446a:	6091      	str	r1, [r2, #8]
 802446c:	685a      	ldr	r2, [r3, #4]
 802446e:	f042 0201 	orr.w	r2, r2, #1
 8024472:	605a      	str	r2, [r3, #4]
 8024474:	4648      	mov	r0, r9
 8024476:	f000 f9df 	bl	8024838 <__malloc_unlock>
 802447a:	3608      	adds	r6, #8
 802447c:	e109      	b.n	8024692 <_malloc_r+0x282>
 802447e:	3302      	adds	r3, #2
 8024480:	4a8c      	ldr	r2, [pc, #560]	; (80246b4 <_malloc_r+0x2a4>)
 8024482:	692e      	ldr	r6, [r5, #16]
 8024484:	4296      	cmp	r6, r2
 8024486:	4611      	mov	r1, r2
 8024488:	d06d      	beq.n	8024566 <_malloc_r+0x156>
 802448a:	6870      	ldr	r0, [r6, #4]
 802448c:	f020 0003 	bic.w	r0, r0, #3
 8024490:	1b07      	subs	r7, r0, r4
 8024492:	2f0f      	cmp	r7, #15
 8024494:	dd47      	ble.n	8024526 <_malloc_r+0x116>
 8024496:	1933      	adds	r3, r6, r4
 8024498:	f044 0401 	orr.w	r4, r4, #1
 802449c:	6074      	str	r4, [r6, #4]
 802449e:	616b      	str	r3, [r5, #20]
 80244a0:	612b      	str	r3, [r5, #16]
 80244a2:	60da      	str	r2, [r3, #12]
 80244a4:	609a      	str	r2, [r3, #8]
 80244a6:	f047 0201 	orr.w	r2, r7, #1
 80244aa:	605a      	str	r2, [r3, #4]
 80244ac:	5037      	str	r7, [r6, r0]
 80244ae:	e7e1      	b.n	8024474 <_malloc_r+0x64>
 80244b0:	0a63      	lsrs	r3, r4, #9
 80244b2:	d02a      	beq.n	802450a <_malloc_r+0xfa>
 80244b4:	2b04      	cmp	r3, #4
 80244b6:	d812      	bhi.n	80244de <_malloc_r+0xce>
 80244b8:	09a3      	lsrs	r3, r4, #6
 80244ba:	3338      	adds	r3, #56	; 0x38
 80244bc:	1c5a      	adds	r2, r3, #1
 80244be:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80244c2:	f1a2 0008 	sub.w	r0, r2, #8
 80244c6:	6856      	ldr	r6, [r2, #4]
 80244c8:	4286      	cmp	r6, r0
 80244ca:	d006      	beq.n	80244da <_malloc_r+0xca>
 80244cc:	6872      	ldr	r2, [r6, #4]
 80244ce:	f022 0203 	bic.w	r2, r2, #3
 80244d2:	1b11      	subs	r1, r2, r4
 80244d4:	290f      	cmp	r1, #15
 80244d6:	dd1c      	ble.n	8024512 <_malloc_r+0x102>
 80244d8:	3b01      	subs	r3, #1
 80244da:	3301      	adds	r3, #1
 80244dc:	e7d0      	b.n	8024480 <_malloc_r+0x70>
 80244de:	2b14      	cmp	r3, #20
 80244e0:	d801      	bhi.n	80244e6 <_malloc_r+0xd6>
 80244e2:	335b      	adds	r3, #91	; 0x5b
 80244e4:	e7ea      	b.n	80244bc <_malloc_r+0xac>
 80244e6:	2b54      	cmp	r3, #84	; 0x54
 80244e8:	d802      	bhi.n	80244f0 <_malloc_r+0xe0>
 80244ea:	0b23      	lsrs	r3, r4, #12
 80244ec:	336e      	adds	r3, #110	; 0x6e
 80244ee:	e7e5      	b.n	80244bc <_malloc_r+0xac>
 80244f0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80244f4:	d802      	bhi.n	80244fc <_malloc_r+0xec>
 80244f6:	0be3      	lsrs	r3, r4, #15
 80244f8:	3377      	adds	r3, #119	; 0x77
 80244fa:	e7df      	b.n	80244bc <_malloc_r+0xac>
 80244fc:	f240 5254 	movw	r2, #1364	; 0x554
 8024500:	4293      	cmp	r3, r2
 8024502:	d804      	bhi.n	802450e <_malloc_r+0xfe>
 8024504:	0ca3      	lsrs	r3, r4, #18
 8024506:	337c      	adds	r3, #124	; 0x7c
 8024508:	e7d8      	b.n	80244bc <_malloc_r+0xac>
 802450a:	233f      	movs	r3, #63	; 0x3f
 802450c:	e7d6      	b.n	80244bc <_malloc_r+0xac>
 802450e:	237e      	movs	r3, #126	; 0x7e
 8024510:	e7d4      	b.n	80244bc <_malloc_r+0xac>
 8024512:	2900      	cmp	r1, #0
 8024514:	68f1      	ldr	r1, [r6, #12]
 8024516:	db04      	blt.n	8024522 <_malloc_r+0x112>
 8024518:	68b3      	ldr	r3, [r6, #8]
 802451a:	60d9      	str	r1, [r3, #12]
 802451c:	608b      	str	r3, [r1, #8]
 802451e:	18b3      	adds	r3, r6, r2
 8024520:	e7a4      	b.n	802446c <_malloc_r+0x5c>
 8024522:	460e      	mov	r6, r1
 8024524:	e7d0      	b.n	80244c8 <_malloc_r+0xb8>
 8024526:	2f00      	cmp	r7, #0
 8024528:	616a      	str	r2, [r5, #20]
 802452a:	612a      	str	r2, [r5, #16]
 802452c:	db05      	blt.n	802453a <_malloc_r+0x12a>
 802452e:	4430      	add	r0, r6
 8024530:	6843      	ldr	r3, [r0, #4]
 8024532:	f043 0301 	orr.w	r3, r3, #1
 8024536:	6043      	str	r3, [r0, #4]
 8024538:	e79c      	b.n	8024474 <_malloc_r+0x64>
 802453a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 802453e:	d244      	bcs.n	80245ca <_malloc_r+0x1ba>
 8024540:	08c0      	lsrs	r0, r0, #3
 8024542:	1087      	asrs	r7, r0, #2
 8024544:	2201      	movs	r2, #1
 8024546:	fa02 f707 	lsl.w	r7, r2, r7
 802454a:	686a      	ldr	r2, [r5, #4]
 802454c:	3001      	adds	r0, #1
 802454e:	433a      	orrs	r2, r7
 8024550:	606a      	str	r2, [r5, #4]
 8024552:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8024556:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 802455a:	60b7      	str	r7, [r6, #8]
 802455c:	3a08      	subs	r2, #8
 802455e:	60f2      	str	r2, [r6, #12]
 8024560:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8024564:	60fe      	str	r6, [r7, #12]
 8024566:	2001      	movs	r0, #1
 8024568:	109a      	asrs	r2, r3, #2
 802456a:	fa00 f202 	lsl.w	r2, r0, r2
 802456e:	6868      	ldr	r0, [r5, #4]
 8024570:	4282      	cmp	r2, r0
 8024572:	f200 80a1 	bhi.w	80246b8 <_malloc_r+0x2a8>
 8024576:	4202      	tst	r2, r0
 8024578:	d106      	bne.n	8024588 <_malloc_r+0x178>
 802457a:	f023 0303 	bic.w	r3, r3, #3
 802457e:	0052      	lsls	r2, r2, #1
 8024580:	4202      	tst	r2, r0
 8024582:	f103 0304 	add.w	r3, r3, #4
 8024586:	d0fa      	beq.n	802457e <_malloc_r+0x16e>
 8024588:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 802458c:	46e0      	mov	r8, ip
 802458e:	469e      	mov	lr, r3
 8024590:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8024594:	4546      	cmp	r6, r8
 8024596:	d153      	bne.n	8024640 <_malloc_r+0x230>
 8024598:	f10e 0e01 	add.w	lr, lr, #1
 802459c:	f01e 0f03 	tst.w	lr, #3
 80245a0:	f108 0808 	add.w	r8, r8, #8
 80245a4:	d1f4      	bne.n	8024590 <_malloc_r+0x180>
 80245a6:	0798      	lsls	r0, r3, #30
 80245a8:	d179      	bne.n	802469e <_malloc_r+0x28e>
 80245aa:	686b      	ldr	r3, [r5, #4]
 80245ac:	ea23 0302 	bic.w	r3, r3, r2
 80245b0:	606b      	str	r3, [r5, #4]
 80245b2:	6868      	ldr	r0, [r5, #4]
 80245b4:	0052      	lsls	r2, r2, #1
 80245b6:	4282      	cmp	r2, r0
 80245b8:	d87e      	bhi.n	80246b8 <_malloc_r+0x2a8>
 80245ba:	2a00      	cmp	r2, #0
 80245bc:	d07c      	beq.n	80246b8 <_malloc_r+0x2a8>
 80245be:	4673      	mov	r3, lr
 80245c0:	4202      	tst	r2, r0
 80245c2:	d1e1      	bne.n	8024588 <_malloc_r+0x178>
 80245c4:	3304      	adds	r3, #4
 80245c6:	0052      	lsls	r2, r2, #1
 80245c8:	e7fa      	b.n	80245c0 <_malloc_r+0x1b0>
 80245ca:	0a42      	lsrs	r2, r0, #9
 80245cc:	2a04      	cmp	r2, #4
 80245ce:	d815      	bhi.n	80245fc <_malloc_r+0x1ec>
 80245d0:	0982      	lsrs	r2, r0, #6
 80245d2:	3238      	adds	r2, #56	; 0x38
 80245d4:	1c57      	adds	r7, r2, #1
 80245d6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80245da:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80245de:	45be      	cmp	lr, r7
 80245e0:	d126      	bne.n	8024630 <_malloc_r+0x220>
 80245e2:	2001      	movs	r0, #1
 80245e4:	1092      	asrs	r2, r2, #2
 80245e6:	fa00 f202 	lsl.w	r2, r0, r2
 80245ea:	6868      	ldr	r0, [r5, #4]
 80245ec:	4310      	orrs	r0, r2
 80245ee:	6068      	str	r0, [r5, #4]
 80245f0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80245f4:	60b7      	str	r7, [r6, #8]
 80245f6:	f8ce 6008 	str.w	r6, [lr, #8]
 80245fa:	e7b3      	b.n	8024564 <_malloc_r+0x154>
 80245fc:	2a14      	cmp	r2, #20
 80245fe:	d801      	bhi.n	8024604 <_malloc_r+0x1f4>
 8024600:	325b      	adds	r2, #91	; 0x5b
 8024602:	e7e7      	b.n	80245d4 <_malloc_r+0x1c4>
 8024604:	2a54      	cmp	r2, #84	; 0x54
 8024606:	d802      	bhi.n	802460e <_malloc_r+0x1fe>
 8024608:	0b02      	lsrs	r2, r0, #12
 802460a:	326e      	adds	r2, #110	; 0x6e
 802460c:	e7e2      	b.n	80245d4 <_malloc_r+0x1c4>
 802460e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8024612:	d802      	bhi.n	802461a <_malloc_r+0x20a>
 8024614:	0bc2      	lsrs	r2, r0, #15
 8024616:	3277      	adds	r2, #119	; 0x77
 8024618:	e7dc      	b.n	80245d4 <_malloc_r+0x1c4>
 802461a:	f240 5754 	movw	r7, #1364	; 0x554
 802461e:	42ba      	cmp	r2, r7
 8024620:	bf9a      	itte	ls
 8024622:	0c82      	lsrls	r2, r0, #18
 8024624:	327c      	addls	r2, #124	; 0x7c
 8024626:	227e      	movhi	r2, #126	; 0x7e
 8024628:	e7d4      	b.n	80245d4 <_malloc_r+0x1c4>
 802462a:	68bf      	ldr	r7, [r7, #8]
 802462c:	45be      	cmp	lr, r7
 802462e:	d004      	beq.n	802463a <_malloc_r+0x22a>
 8024630:	687a      	ldr	r2, [r7, #4]
 8024632:	f022 0203 	bic.w	r2, r2, #3
 8024636:	4290      	cmp	r0, r2
 8024638:	d3f7      	bcc.n	802462a <_malloc_r+0x21a>
 802463a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 802463e:	e7d7      	b.n	80245f0 <_malloc_r+0x1e0>
 8024640:	6870      	ldr	r0, [r6, #4]
 8024642:	68f7      	ldr	r7, [r6, #12]
 8024644:	f020 0003 	bic.w	r0, r0, #3
 8024648:	eba0 0a04 	sub.w	sl, r0, r4
 802464c:	f1ba 0f0f 	cmp.w	sl, #15
 8024650:	dd10      	ble.n	8024674 <_malloc_r+0x264>
 8024652:	68b2      	ldr	r2, [r6, #8]
 8024654:	1933      	adds	r3, r6, r4
 8024656:	f044 0401 	orr.w	r4, r4, #1
 802465a:	6074      	str	r4, [r6, #4]
 802465c:	60d7      	str	r7, [r2, #12]
 802465e:	60ba      	str	r2, [r7, #8]
 8024660:	f04a 0201 	orr.w	r2, sl, #1
 8024664:	616b      	str	r3, [r5, #20]
 8024666:	612b      	str	r3, [r5, #16]
 8024668:	60d9      	str	r1, [r3, #12]
 802466a:	6099      	str	r1, [r3, #8]
 802466c:	605a      	str	r2, [r3, #4]
 802466e:	f846 a000 	str.w	sl, [r6, r0]
 8024672:	e6ff      	b.n	8024474 <_malloc_r+0x64>
 8024674:	f1ba 0f00 	cmp.w	sl, #0
 8024678:	db0f      	blt.n	802469a <_malloc_r+0x28a>
 802467a:	4430      	add	r0, r6
 802467c:	6843      	ldr	r3, [r0, #4]
 802467e:	f043 0301 	orr.w	r3, r3, #1
 8024682:	6043      	str	r3, [r0, #4]
 8024684:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8024688:	4648      	mov	r0, r9
 802468a:	60df      	str	r7, [r3, #12]
 802468c:	60bb      	str	r3, [r7, #8]
 802468e:	f000 f8d3 	bl	8024838 <__malloc_unlock>
 8024692:	4630      	mov	r0, r6
 8024694:	b003      	add	sp, #12
 8024696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802469a:	463e      	mov	r6, r7
 802469c:	e77a      	b.n	8024594 <_malloc_r+0x184>
 802469e:	f85c 0908 	ldr.w	r0, [ip], #-8
 80246a2:	4584      	cmp	ip, r0
 80246a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80246a8:	f43f af7d 	beq.w	80245a6 <_malloc_r+0x196>
 80246ac:	e781      	b.n	80245b2 <_malloc_r+0x1a2>
 80246ae:	bf00      	nop
 80246b0:	20000bc0 	.word	0x20000bc0
 80246b4:	20000bc8 	.word	0x20000bc8
 80246b8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80246bc:	f8db 6004 	ldr.w	r6, [fp, #4]
 80246c0:	f026 0603 	bic.w	r6, r6, #3
 80246c4:	42b4      	cmp	r4, r6
 80246c6:	d803      	bhi.n	80246d0 <_malloc_r+0x2c0>
 80246c8:	1b33      	subs	r3, r6, r4
 80246ca:	2b0f      	cmp	r3, #15
 80246cc:	f300 8096 	bgt.w	80247fc <_malloc_r+0x3ec>
 80246d0:	4a4f      	ldr	r2, [pc, #316]	; (8024810 <_malloc_r+0x400>)
 80246d2:	6817      	ldr	r7, [r2, #0]
 80246d4:	4a4f      	ldr	r2, [pc, #316]	; (8024814 <_malloc_r+0x404>)
 80246d6:	6811      	ldr	r1, [r2, #0]
 80246d8:	3710      	adds	r7, #16
 80246da:	3101      	adds	r1, #1
 80246dc:	eb0b 0306 	add.w	r3, fp, r6
 80246e0:	4427      	add	r7, r4
 80246e2:	d005      	beq.n	80246f0 <_malloc_r+0x2e0>
 80246e4:	494c      	ldr	r1, [pc, #304]	; (8024818 <_malloc_r+0x408>)
 80246e6:	3901      	subs	r1, #1
 80246e8:	440f      	add	r7, r1
 80246ea:	3101      	adds	r1, #1
 80246ec:	4249      	negs	r1, r1
 80246ee:	400f      	ands	r7, r1
 80246f0:	4639      	mov	r1, r7
 80246f2:	4648      	mov	r0, r9
 80246f4:	9201      	str	r2, [sp, #4]
 80246f6:	9300      	str	r3, [sp, #0]
 80246f8:	f000 fb74 	bl	8024de4 <_sbrk_r>
 80246fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8024700:	4680      	mov	r8, r0
 8024702:	d056      	beq.n	80247b2 <_malloc_r+0x3a2>
 8024704:	9b00      	ldr	r3, [sp, #0]
 8024706:	9a01      	ldr	r2, [sp, #4]
 8024708:	4283      	cmp	r3, r0
 802470a:	d901      	bls.n	8024710 <_malloc_r+0x300>
 802470c:	45ab      	cmp	fp, r5
 802470e:	d150      	bne.n	80247b2 <_malloc_r+0x3a2>
 8024710:	4842      	ldr	r0, [pc, #264]	; (802481c <_malloc_r+0x40c>)
 8024712:	6801      	ldr	r1, [r0, #0]
 8024714:	4543      	cmp	r3, r8
 8024716:	eb07 0e01 	add.w	lr, r7, r1
 802471a:	f8c0 e000 	str.w	lr, [r0]
 802471e:	4940      	ldr	r1, [pc, #256]	; (8024820 <_malloc_r+0x410>)
 8024720:	4682      	mov	sl, r0
 8024722:	d113      	bne.n	802474c <_malloc_r+0x33c>
 8024724:	420b      	tst	r3, r1
 8024726:	d111      	bne.n	802474c <_malloc_r+0x33c>
 8024728:	68ab      	ldr	r3, [r5, #8]
 802472a:	443e      	add	r6, r7
 802472c:	f046 0601 	orr.w	r6, r6, #1
 8024730:	605e      	str	r6, [r3, #4]
 8024732:	4a3c      	ldr	r2, [pc, #240]	; (8024824 <_malloc_r+0x414>)
 8024734:	f8da 3000 	ldr.w	r3, [sl]
 8024738:	6811      	ldr	r1, [r2, #0]
 802473a:	428b      	cmp	r3, r1
 802473c:	bf88      	it	hi
 802473e:	6013      	strhi	r3, [r2, #0]
 8024740:	4a39      	ldr	r2, [pc, #228]	; (8024828 <_malloc_r+0x418>)
 8024742:	6811      	ldr	r1, [r2, #0]
 8024744:	428b      	cmp	r3, r1
 8024746:	bf88      	it	hi
 8024748:	6013      	strhi	r3, [r2, #0]
 802474a:	e032      	b.n	80247b2 <_malloc_r+0x3a2>
 802474c:	6810      	ldr	r0, [r2, #0]
 802474e:	3001      	adds	r0, #1
 8024750:	bf1b      	ittet	ne
 8024752:	eba8 0303 	subne.w	r3, r8, r3
 8024756:	4473      	addne	r3, lr
 8024758:	f8c2 8000 	streq.w	r8, [r2]
 802475c:	f8ca 3000 	strne.w	r3, [sl]
 8024760:	f018 0007 	ands.w	r0, r8, #7
 8024764:	bf1c      	itt	ne
 8024766:	f1c0 0008 	rsbne	r0, r0, #8
 802476a:	4480      	addne	r8, r0
 802476c:	4b2a      	ldr	r3, [pc, #168]	; (8024818 <_malloc_r+0x408>)
 802476e:	4447      	add	r7, r8
 8024770:	4418      	add	r0, r3
 8024772:	400f      	ands	r7, r1
 8024774:	1bc7      	subs	r7, r0, r7
 8024776:	4639      	mov	r1, r7
 8024778:	4648      	mov	r0, r9
 802477a:	f000 fb33 	bl	8024de4 <_sbrk_r>
 802477e:	1c43      	adds	r3, r0, #1
 8024780:	bf08      	it	eq
 8024782:	4640      	moveq	r0, r8
 8024784:	f8da 3000 	ldr.w	r3, [sl]
 8024788:	f8c5 8008 	str.w	r8, [r5, #8]
 802478c:	bf08      	it	eq
 802478e:	2700      	moveq	r7, #0
 8024790:	eba0 0008 	sub.w	r0, r0, r8
 8024794:	443b      	add	r3, r7
 8024796:	4407      	add	r7, r0
 8024798:	f047 0701 	orr.w	r7, r7, #1
 802479c:	45ab      	cmp	fp, r5
 802479e:	f8ca 3000 	str.w	r3, [sl]
 80247a2:	f8c8 7004 	str.w	r7, [r8, #4]
 80247a6:	d0c4      	beq.n	8024732 <_malloc_r+0x322>
 80247a8:	2e0f      	cmp	r6, #15
 80247aa:	d810      	bhi.n	80247ce <_malloc_r+0x3be>
 80247ac:	2301      	movs	r3, #1
 80247ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80247b2:	68ab      	ldr	r3, [r5, #8]
 80247b4:	685a      	ldr	r2, [r3, #4]
 80247b6:	f022 0203 	bic.w	r2, r2, #3
 80247ba:	4294      	cmp	r4, r2
 80247bc:	eba2 0304 	sub.w	r3, r2, r4
 80247c0:	d801      	bhi.n	80247c6 <_malloc_r+0x3b6>
 80247c2:	2b0f      	cmp	r3, #15
 80247c4:	dc1a      	bgt.n	80247fc <_malloc_r+0x3ec>
 80247c6:	4648      	mov	r0, r9
 80247c8:	f000 f836 	bl	8024838 <__malloc_unlock>
 80247cc:	e62d      	b.n	802442a <_malloc_r+0x1a>
 80247ce:	f8db 3004 	ldr.w	r3, [fp, #4]
 80247d2:	3e0c      	subs	r6, #12
 80247d4:	f026 0607 	bic.w	r6, r6, #7
 80247d8:	f003 0301 	and.w	r3, r3, #1
 80247dc:	4333      	orrs	r3, r6
 80247de:	f8cb 3004 	str.w	r3, [fp, #4]
 80247e2:	eb0b 0306 	add.w	r3, fp, r6
 80247e6:	2205      	movs	r2, #5
 80247e8:	2e0f      	cmp	r6, #15
 80247ea:	605a      	str	r2, [r3, #4]
 80247ec:	609a      	str	r2, [r3, #8]
 80247ee:	d9a0      	bls.n	8024732 <_malloc_r+0x322>
 80247f0:	f10b 0108 	add.w	r1, fp, #8
 80247f4:	4648      	mov	r0, r9
 80247f6:	f000 fc03 	bl	8025000 <_free_r>
 80247fa:	e79a      	b.n	8024732 <_malloc_r+0x322>
 80247fc:	68ae      	ldr	r6, [r5, #8]
 80247fe:	f044 0201 	orr.w	r2, r4, #1
 8024802:	4434      	add	r4, r6
 8024804:	f043 0301 	orr.w	r3, r3, #1
 8024808:	6072      	str	r2, [r6, #4]
 802480a:	60ac      	str	r4, [r5, #8]
 802480c:	6063      	str	r3, [r4, #4]
 802480e:	e631      	b.n	8024474 <_malloc_r+0x64>
 8024810:	2008bed4 	.word	0x2008bed4
 8024814:	20000fc8 	.word	0x20000fc8
 8024818:	00000080 	.word	0x00000080
 802481c:	2008bea4 	.word	0x2008bea4
 8024820:	0000007f 	.word	0x0000007f
 8024824:	2008becc 	.word	0x2008becc
 8024828:	2008bed0 	.word	0x2008bed0

0802482c <__malloc_lock>:
 802482c:	4801      	ldr	r0, [pc, #4]	; (8024834 <__malloc_lock+0x8>)
 802482e:	f000 bca3 	b.w	8025178 <__retarget_lock_acquire_recursive>
 8024832:	bf00      	nop
 8024834:	20091e08 	.word	0x20091e08

08024838 <__malloc_unlock>:
 8024838:	4801      	ldr	r0, [pc, #4]	; (8024840 <__malloc_unlock+0x8>)
 802483a:	f000 bc9e 	b.w	802517a <__retarget_lock_release_recursive>
 802483e:	bf00      	nop
 8024840:	20091e08 	.word	0x20091e08

08024844 <_Balloc>:
 8024844:	b570      	push	{r4, r5, r6, lr}
 8024846:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8024848:	4604      	mov	r4, r0
 802484a:	460e      	mov	r6, r1
 802484c:	b93d      	cbnz	r5, 802485e <_Balloc+0x1a>
 802484e:	2010      	movs	r0, #16
 8024850:	f7ff fdd6 	bl	8024400 <malloc>
 8024854:	6260      	str	r0, [r4, #36]	; 0x24
 8024856:	6045      	str	r5, [r0, #4]
 8024858:	6085      	str	r5, [r0, #8]
 802485a:	6005      	str	r5, [r0, #0]
 802485c:	60c5      	str	r5, [r0, #12]
 802485e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8024860:	68eb      	ldr	r3, [r5, #12]
 8024862:	b183      	cbz	r3, 8024886 <_Balloc+0x42>
 8024864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024866:	68db      	ldr	r3, [r3, #12]
 8024868:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802486c:	b9b8      	cbnz	r0, 802489e <_Balloc+0x5a>
 802486e:	2101      	movs	r1, #1
 8024870:	fa01 f506 	lsl.w	r5, r1, r6
 8024874:	1d6a      	adds	r2, r5, #5
 8024876:	0092      	lsls	r2, r2, #2
 8024878:	4620      	mov	r0, r4
 802487a:	f000 fb3d 	bl	8024ef8 <_calloc_r>
 802487e:	b160      	cbz	r0, 802489a <_Balloc+0x56>
 8024880:	6046      	str	r6, [r0, #4]
 8024882:	6085      	str	r5, [r0, #8]
 8024884:	e00e      	b.n	80248a4 <_Balloc+0x60>
 8024886:	2221      	movs	r2, #33	; 0x21
 8024888:	2104      	movs	r1, #4
 802488a:	4620      	mov	r0, r4
 802488c:	f000 fb34 	bl	8024ef8 <_calloc_r>
 8024890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024892:	60e8      	str	r0, [r5, #12]
 8024894:	68db      	ldr	r3, [r3, #12]
 8024896:	2b00      	cmp	r3, #0
 8024898:	d1e4      	bne.n	8024864 <_Balloc+0x20>
 802489a:	2000      	movs	r0, #0
 802489c:	bd70      	pop	{r4, r5, r6, pc}
 802489e:	6802      	ldr	r2, [r0, #0]
 80248a0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80248a4:	2300      	movs	r3, #0
 80248a6:	6103      	str	r3, [r0, #16]
 80248a8:	60c3      	str	r3, [r0, #12]
 80248aa:	bd70      	pop	{r4, r5, r6, pc}

080248ac <_Bfree>:
 80248ac:	b570      	push	{r4, r5, r6, lr}
 80248ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80248b0:	4606      	mov	r6, r0
 80248b2:	460d      	mov	r5, r1
 80248b4:	b93c      	cbnz	r4, 80248c6 <_Bfree+0x1a>
 80248b6:	2010      	movs	r0, #16
 80248b8:	f7ff fda2 	bl	8024400 <malloc>
 80248bc:	6270      	str	r0, [r6, #36]	; 0x24
 80248be:	6044      	str	r4, [r0, #4]
 80248c0:	6084      	str	r4, [r0, #8]
 80248c2:	6004      	str	r4, [r0, #0]
 80248c4:	60c4      	str	r4, [r0, #12]
 80248c6:	b13d      	cbz	r5, 80248d8 <_Bfree+0x2c>
 80248c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80248ca:	686a      	ldr	r2, [r5, #4]
 80248cc:	68db      	ldr	r3, [r3, #12]
 80248ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80248d2:	6029      	str	r1, [r5, #0]
 80248d4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80248d8:	bd70      	pop	{r4, r5, r6, pc}

080248da <__multadd>:
 80248da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80248de:	690d      	ldr	r5, [r1, #16]
 80248e0:	461f      	mov	r7, r3
 80248e2:	4606      	mov	r6, r0
 80248e4:	460c      	mov	r4, r1
 80248e6:	f101 0e14 	add.w	lr, r1, #20
 80248ea:	2300      	movs	r3, #0
 80248ec:	f8de 0000 	ldr.w	r0, [lr]
 80248f0:	b281      	uxth	r1, r0
 80248f2:	fb02 7101 	mla	r1, r2, r1, r7
 80248f6:	0c0f      	lsrs	r7, r1, #16
 80248f8:	0c00      	lsrs	r0, r0, #16
 80248fa:	fb02 7000 	mla	r0, r2, r0, r7
 80248fe:	b289      	uxth	r1, r1
 8024900:	3301      	adds	r3, #1
 8024902:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8024906:	429d      	cmp	r5, r3
 8024908:	ea4f 4710 	mov.w	r7, r0, lsr #16
 802490c:	f84e 1b04 	str.w	r1, [lr], #4
 8024910:	dcec      	bgt.n	80248ec <__multadd+0x12>
 8024912:	b1d7      	cbz	r7, 802494a <__multadd+0x70>
 8024914:	68a3      	ldr	r3, [r4, #8]
 8024916:	429d      	cmp	r5, r3
 8024918:	db12      	blt.n	8024940 <__multadd+0x66>
 802491a:	6861      	ldr	r1, [r4, #4]
 802491c:	4630      	mov	r0, r6
 802491e:	3101      	adds	r1, #1
 8024920:	f7ff ff90 	bl	8024844 <_Balloc>
 8024924:	6922      	ldr	r2, [r4, #16]
 8024926:	3202      	adds	r2, #2
 8024928:	f104 010c 	add.w	r1, r4, #12
 802492c:	4680      	mov	r8, r0
 802492e:	0092      	lsls	r2, r2, #2
 8024930:	300c      	adds	r0, #12
 8024932:	f7fd fed9 	bl	80226e8 <memcpy>
 8024936:	4621      	mov	r1, r4
 8024938:	4630      	mov	r0, r6
 802493a:	f7ff ffb7 	bl	80248ac <_Bfree>
 802493e:	4644      	mov	r4, r8
 8024940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8024944:	3501      	adds	r5, #1
 8024946:	615f      	str	r7, [r3, #20]
 8024948:	6125      	str	r5, [r4, #16]
 802494a:	4620      	mov	r0, r4
 802494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024950 <__hi0bits>:
 8024950:	0c02      	lsrs	r2, r0, #16
 8024952:	0412      	lsls	r2, r2, #16
 8024954:	4603      	mov	r3, r0
 8024956:	b9b2      	cbnz	r2, 8024986 <__hi0bits+0x36>
 8024958:	0403      	lsls	r3, r0, #16
 802495a:	2010      	movs	r0, #16
 802495c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8024960:	bf04      	itt	eq
 8024962:	021b      	lsleq	r3, r3, #8
 8024964:	3008      	addeq	r0, #8
 8024966:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802496a:	bf04      	itt	eq
 802496c:	011b      	lsleq	r3, r3, #4
 802496e:	3004      	addeq	r0, #4
 8024970:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8024974:	bf04      	itt	eq
 8024976:	009b      	lsleq	r3, r3, #2
 8024978:	3002      	addeq	r0, #2
 802497a:	2b00      	cmp	r3, #0
 802497c:	db06      	blt.n	802498c <__hi0bits+0x3c>
 802497e:	005b      	lsls	r3, r3, #1
 8024980:	d503      	bpl.n	802498a <__hi0bits+0x3a>
 8024982:	3001      	adds	r0, #1
 8024984:	4770      	bx	lr
 8024986:	2000      	movs	r0, #0
 8024988:	e7e8      	b.n	802495c <__hi0bits+0xc>
 802498a:	2020      	movs	r0, #32
 802498c:	4770      	bx	lr

0802498e <__lo0bits>:
 802498e:	6803      	ldr	r3, [r0, #0]
 8024990:	f013 0207 	ands.w	r2, r3, #7
 8024994:	4601      	mov	r1, r0
 8024996:	d00b      	beq.n	80249b0 <__lo0bits+0x22>
 8024998:	07da      	lsls	r2, r3, #31
 802499a:	d423      	bmi.n	80249e4 <__lo0bits+0x56>
 802499c:	0798      	lsls	r0, r3, #30
 802499e:	bf49      	itett	mi
 80249a0:	085b      	lsrmi	r3, r3, #1
 80249a2:	089b      	lsrpl	r3, r3, #2
 80249a4:	2001      	movmi	r0, #1
 80249a6:	600b      	strmi	r3, [r1, #0]
 80249a8:	bf5c      	itt	pl
 80249aa:	600b      	strpl	r3, [r1, #0]
 80249ac:	2002      	movpl	r0, #2
 80249ae:	4770      	bx	lr
 80249b0:	b298      	uxth	r0, r3
 80249b2:	b9a8      	cbnz	r0, 80249e0 <__lo0bits+0x52>
 80249b4:	0c1b      	lsrs	r3, r3, #16
 80249b6:	2010      	movs	r0, #16
 80249b8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80249bc:	bf04      	itt	eq
 80249be:	0a1b      	lsreq	r3, r3, #8
 80249c0:	3008      	addeq	r0, #8
 80249c2:	071a      	lsls	r2, r3, #28
 80249c4:	bf04      	itt	eq
 80249c6:	091b      	lsreq	r3, r3, #4
 80249c8:	3004      	addeq	r0, #4
 80249ca:	079a      	lsls	r2, r3, #30
 80249cc:	bf04      	itt	eq
 80249ce:	089b      	lsreq	r3, r3, #2
 80249d0:	3002      	addeq	r0, #2
 80249d2:	07da      	lsls	r2, r3, #31
 80249d4:	d402      	bmi.n	80249dc <__lo0bits+0x4e>
 80249d6:	085b      	lsrs	r3, r3, #1
 80249d8:	d006      	beq.n	80249e8 <__lo0bits+0x5a>
 80249da:	3001      	adds	r0, #1
 80249dc:	600b      	str	r3, [r1, #0]
 80249de:	4770      	bx	lr
 80249e0:	4610      	mov	r0, r2
 80249e2:	e7e9      	b.n	80249b8 <__lo0bits+0x2a>
 80249e4:	2000      	movs	r0, #0
 80249e6:	4770      	bx	lr
 80249e8:	2020      	movs	r0, #32
 80249ea:	4770      	bx	lr

080249ec <__i2b>:
 80249ec:	b510      	push	{r4, lr}
 80249ee:	460c      	mov	r4, r1
 80249f0:	2101      	movs	r1, #1
 80249f2:	f7ff ff27 	bl	8024844 <_Balloc>
 80249f6:	2201      	movs	r2, #1
 80249f8:	6144      	str	r4, [r0, #20]
 80249fa:	6102      	str	r2, [r0, #16]
 80249fc:	bd10      	pop	{r4, pc}

080249fe <__multiply>:
 80249fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a02:	4614      	mov	r4, r2
 8024a04:	690a      	ldr	r2, [r1, #16]
 8024a06:	6923      	ldr	r3, [r4, #16]
 8024a08:	429a      	cmp	r2, r3
 8024a0a:	bfb8      	it	lt
 8024a0c:	460b      	movlt	r3, r1
 8024a0e:	4689      	mov	r9, r1
 8024a10:	bfbc      	itt	lt
 8024a12:	46a1      	movlt	r9, r4
 8024a14:	461c      	movlt	r4, r3
 8024a16:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8024a1a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024a1e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8024a22:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8024a26:	eb07 060a 	add.w	r6, r7, sl
 8024a2a:	429e      	cmp	r6, r3
 8024a2c:	bfc8      	it	gt
 8024a2e:	3101      	addgt	r1, #1
 8024a30:	f7ff ff08 	bl	8024844 <_Balloc>
 8024a34:	f100 0514 	add.w	r5, r0, #20
 8024a38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8024a3c:	462b      	mov	r3, r5
 8024a3e:	2200      	movs	r2, #0
 8024a40:	4543      	cmp	r3, r8
 8024a42:	d316      	bcc.n	8024a72 <__multiply+0x74>
 8024a44:	f104 0214 	add.w	r2, r4, #20
 8024a48:	f109 0114 	add.w	r1, r9, #20
 8024a4c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8024a50:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8024a54:	9301      	str	r3, [sp, #4]
 8024a56:	9c01      	ldr	r4, [sp, #4]
 8024a58:	4294      	cmp	r4, r2
 8024a5a:	4613      	mov	r3, r2
 8024a5c:	d80c      	bhi.n	8024a78 <__multiply+0x7a>
 8024a5e:	2e00      	cmp	r6, #0
 8024a60:	dd03      	ble.n	8024a6a <__multiply+0x6c>
 8024a62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8024a66:	2b00      	cmp	r3, #0
 8024a68:	d054      	beq.n	8024b14 <__multiply+0x116>
 8024a6a:	6106      	str	r6, [r0, #16]
 8024a6c:	b003      	add	sp, #12
 8024a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a72:	f843 2b04 	str.w	r2, [r3], #4
 8024a76:	e7e3      	b.n	8024a40 <__multiply+0x42>
 8024a78:	f8b3 a000 	ldrh.w	sl, [r3]
 8024a7c:	3204      	adds	r2, #4
 8024a7e:	f1ba 0f00 	cmp.w	sl, #0
 8024a82:	d020      	beq.n	8024ac6 <__multiply+0xc8>
 8024a84:	46ae      	mov	lr, r5
 8024a86:	4689      	mov	r9, r1
 8024a88:	f04f 0c00 	mov.w	ip, #0
 8024a8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8024a90:	f8be b000 	ldrh.w	fp, [lr]
 8024a94:	b2a3      	uxth	r3, r4
 8024a96:	fb0a b303 	mla	r3, sl, r3, fp
 8024a9a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8024a9e:	f8de 4000 	ldr.w	r4, [lr]
 8024aa2:	4463      	add	r3, ip
 8024aa4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8024aa8:	fb0a c40b 	mla	r4, sl, fp, ip
 8024aac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8024ab0:	b29b      	uxth	r3, r3
 8024ab2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8024ab6:	454f      	cmp	r7, r9
 8024ab8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8024abc:	f84e 3b04 	str.w	r3, [lr], #4
 8024ac0:	d8e4      	bhi.n	8024a8c <__multiply+0x8e>
 8024ac2:	f8ce c000 	str.w	ip, [lr]
 8024ac6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8024aca:	f1b9 0f00 	cmp.w	r9, #0
 8024ace:	d01f      	beq.n	8024b10 <__multiply+0x112>
 8024ad0:	682b      	ldr	r3, [r5, #0]
 8024ad2:	46ae      	mov	lr, r5
 8024ad4:	468c      	mov	ip, r1
 8024ad6:	f04f 0a00 	mov.w	sl, #0
 8024ada:	f8bc 4000 	ldrh.w	r4, [ip]
 8024ade:	f8be b002 	ldrh.w	fp, [lr, #2]
 8024ae2:	fb09 b404 	mla	r4, r9, r4, fp
 8024ae6:	44a2      	add	sl, r4
 8024ae8:	b29b      	uxth	r3, r3
 8024aea:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8024aee:	f84e 3b04 	str.w	r3, [lr], #4
 8024af2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8024af6:	f8be 4000 	ldrh.w	r4, [lr]
 8024afa:	0c1b      	lsrs	r3, r3, #16
 8024afc:	fb09 4303 	mla	r3, r9, r3, r4
 8024b00:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8024b04:	4567      	cmp	r7, ip
 8024b06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8024b0a:	d8e6      	bhi.n	8024ada <__multiply+0xdc>
 8024b0c:	f8ce 3000 	str.w	r3, [lr]
 8024b10:	3504      	adds	r5, #4
 8024b12:	e7a0      	b.n	8024a56 <__multiply+0x58>
 8024b14:	3e01      	subs	r6, #1
 8024b16:	e7a2      	b.n	8024a5e <__multiply+0x60>

08024b18 <__pow5mult>:
 8024b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024b1c:	4615      	mov	r5, r2
 8024b1e:	f012 0203 	ands.w	r2, r2, #3
 8024b22:	4606      	mov	r6, r0
 8024b24:	460f      	mov	r7, r1
 8024b26:	d007      	beq.n	8024b38 <__pow5mult+0x20>
 8024b28:	3a01      	subs	r2, #1
 8024b2a:	4c21      	ldr	r4, [pc, #132]	; (8024bb0 <__pow5mult+0x98>)
 8024b2c:	2300      	movs	r3, #0
 8024b2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024b32:	f7ff fed2 	bl	80248da <__multadd>
 8024b36:	4607      	mov	r7, r0
 8024b38:	10ad      	asrs	r5, r5, #2
 8024b3a:	d035      	beq.n	8024ba8 <__pow5mult+0x90>
 8024b3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8024b3e:	b93c      	cbnz	r4, 8024b50 <__pow5mult+0x38>
 8024b40:	2010      	movs	r0, #16
 8024b42:	f7ff fc5d 	bl	8024400 <malloc>
 8024b46:	6270      	str	r0, [r6, #36]	; 0x24
 8024b48:	6044      	str	r4, [r0, #4]
 8024b4a:	6084      	str	r4, [r0, #8]
 8024b4c:	6004      	str	r4, [r0, #0]
 8024b4e:	60c4      	str	r4, [r0, #12]
 8024b50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8024b54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024b58:	b94c      	cbnz	r4, 8024b6e <__pow5mult+0x56>
 8024b5a:	f240 2171 	movw	r1, #625	; 0x271
 8024b5e:	4630      	mov	r0, r6
 8024b60:	f7ff ff44 	bl	80249ec <__i2b>
 8024b64:	2300      	movs	r3, #0
 8024b66:	f8c8 0008 	str.w	r0, [r8, #8]
 8024b6a:	4604      	mov	r4, r0
 8024b6c:	6003      	str	r3, [r0, #0]
 8024b6e:	f04f 0800 	mov.w	r8, #0
 8024b72:	07eb      	lsls	r3, r5, #31
 8024b74:	d50a      	bpl.n	8024b8c <__pow5mult+0x74>
 8024b76:	4639      	mov	r1, r7
 8024b78:	4622      	mov	r2, r4
 8024b7a:	4630      	mov	r0, r6
 8024b7c:	f7ff ff3f 	bl	80249fe <__multiply>
 8024b80:	4639      	mov	r1, r7
 8024b82:	4681      	mov	r9, r0
 8024b84:	4630      	mov	r0, r6
 8024b86:	f7ff fe91 	bl	80248ac <_Bfree>
 8024b8a:	464f      	mov	r7, r9
 8024b8c:	106d      	asrs	r5, r5, #1
 8024b8e:	d00b      	beq.n	8024ba8 <__pow5mult+0x90>
 8024b90:	6820      	ldr	r0, [r4, #0]
 8024b92:	b938      	cbnz	r0, 8024ba4 <__pow5mult+0x8c>
 8024b94:	4622      	mov	r2, r4
 8024b96:	4621      	mov	r1, r4
 8024b98:	4630      	mov	r0, r6
 8024b9a:	f7ff ff30 	bl	80249fe <__multiply>
 8024b9e:	6020      	str	r0, [r4, #0]
 8024ba0:	f8c0 8000 	str.w	r8, [r0]
 8024ba4:	4604      	mov	r4, r0
 8024ba6:	e7e4      	b.n	8024b72 <__pow5mult+0x5a>
 8024ba8:	4638      	mov	r0, r7
 8024baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024bae:	bf00      	nop
 8024bb0:	08034420 	.word	0x08034420

08024bb4 <__lshift>:
 8024bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024bb8:	460c      	mov	r4, r1
 8024bba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8024bbe:	6923      	ldr	r3, [r4, #16]
 8024bc0:	6849      	ldr	r1, [r1, #4]
 8024bc2:	eb0a 0903 	add.w	r9, sl, r3
 8024bc6:	68a3      	ldr	r3, [r4, #8]
 8024bc8:	4607      	mov	r7, r0
 8024bca:	4616      	mov	r6, r2
 8024bcc:	f109 0501 	add.w	r5, r9, #1
 8024bd0:	42ab      	cmp	r3, r5
 8024bd2:	db31      	blt.n	8024c38 <__lshift+0x84>
 8024bd4:	4638      	mov	r0, r7
 8024bd6:	f7ff fe35 	bl	8024844 <_Balloc>
 8024bda:	2200      	movs	r2, #0
 8024bdc:	4680      	mov	r8, r0
 8024bde:	f100 0314 	add.w	r3, r0, #20
 8024be2:	4611      	mov	r1, r2
 8024be4:	4552      	cmp	r2, sl
 8024be6:	db2a      	blt.n	8024c3e <__lshift+0x8a>
 8024be8:	6920      	ldr	r0, [r4, #16]
 8024bea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8024bee:	f104 0114 	add.w	r1, r4, #20
 8024bf2:	f016 021f 	ands.w	r2, r6, #31
 8024bf6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8024bfa:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8024bfe:	d022      	beq.n	8024c46 <__lshift+0x92>
 8024c00:	f1c2 0c20 	rsb	ip, r2, #32
 8024c04:	2000      	movs	r0, #0
 8024c06:	680e      	ldr	r6, [r1, #0]
 8024c08:	4096      	lsls	r6, r2
 8024c0a:	4330      	orrs	r0, r6
 8024c0c:	f843 0b04 	str.w	r0, [r3], #4
 8024c10:	f851 0b04 	ldr.w	r0, [r1], #4
 8024c14:	458e      	cmp	lr, r1
 8024c16:	fa20 f00c 	lsr.w	r0, r0, ip
 8024c1a:	d8f4      	bhi.n	8024c06 <__lshift+0x52>
 8024c1c:	6018      	str	r0, [r3, #0]
 8024c1e:	b108      	cbz	r0, 8024c24 <__lshift+0x70>
 8024c20:	f109 0502 	add.w	r5, r9, #2
 8024c24:	3d01      	subs	r5, #1
 8024c26:	4638      	mov	r0, r7
 8024c28:	f8c8 5010 	str.w	r5, [r8, #16]
 8024c2c:	4621      	mov	r1, r4
 8024c2e:	f7ff fe3d 	bl	80248ac <_Bfree>
 8024c32:	4640      	mov	r0, r8
 8024c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024c38:	3101      	adds	r1, #1
 8024c3a:	005b      	lsls	r3, r3, #1
 8024c3c:	e7c8      	b.n	8024bd0 <__lshift+0x1c>
 8024c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8024c42:	3201      	adds	r2, #1
 8024c44:	e7ce      	b.n	8024be4 <__lshift+0x30>
 8024c46:	3b04      	subs	r3, #4
 8024c48:	f851 2b04 	ldr.w	r2, [r1], #4
 8024c4c:	f843 2f04 	str.w	r2, [r3, #4]!
 8024c50:	458e      	cmp	lr, r1
 8024c52:	d8f9      	bhi.n	8024c48 <__lshift+0x94>
 8024c54:	e7e6      	b.n	8024c24 <__lshift+0x70>

08024c56 <__mcmp>:
 8024c56:	6903      	ldr	r3, [r0, #16]
 8024c58:	690a      	ldr	r2, [r1, #16]
 8024c5a:	1a9b      	subs	r3, r3, r2
 8024c5c:	b530      	push	{r4, r5, lr}
 8024c5e:	d10c      	bne.n	8024c7a <__mcmp+0x24>
 8024c60:	0092      	lsls	r2, r2, #2
 8024c62:	3014      	adds	r0, #20
 8024c64:	3114      	adds	r1, #20
 8024c66:	1884      	adds	r4, r0, r2
 8024c68:	4411      	add	r1, r2
 8024c6a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8024c6e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8024c72:	4295      	cmp	r5, r2
 8024c74:	d003      	beq.n	8024c7e <__mcmp+0x28>
 8024c76:	d305      	bcc.n	8024c84 <__mcmp+0x2e>
 8024c78:	2301      	movs	r3, #1
 8024c7a:	4618      	mov	r0, r3
 8024c7c:	bd30      	pop	{r4, r5, pc}
 8024c7e:	42a0      	cmp	r0, r4
 8024c80:	d3f3      	bcc.n	8024c6a <__mcmp+0x14>
 8024c82:	e7fa      	b.n	8024c7a <__mcmp+0x24>
 8024c84:	f04f 33ff 	mov.w	r3, #4294967295
 8024c88:	e7f7      	b.n	8024c7a <__mcmp+0x24>

08024c8a <__mdiff>:
 8024c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024c8e:	460d      	mov	r5, r1
 8024c90:	4607      	mov	r7, r0
 8024c92:	4611      	mov	r1, r2
 8024c94:	4628      	mov	r0, r5
 8024c96:	4614      	mov	r4, r2
 8024c98:	f7ff ffdd 	bl	8024c56 <__mcmp>
 8024c9c:	1e06      	subs	r6, r0, #0
 8024c9e:	d108      	bne.n	8024cb2 <__mdiff+0x28>
 8024ca0:	4631      	mov	r1, r6
 8024ca2:	4638      	mov	r0, r7
 8024ca4:	f7ff fdce 	bl	8024844 <_Balloc>
 8024ca8:	2301      	movs	r3, #1
 8024caa:	6103      	str	r3, [r0, #16]
 8024cac:	6146      	str	r6, [r0, #20]
 8024cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024cb2:	bfa4      	itt	ge
 8024cb4:	4623      	movge	r3, r4
 8024cb6:	462c      	movge	r4, r5
 8024cb8:	4638      	mov	r0, r7
 8024cba:	6861      	ldr	r1, [r4, #4]
 8024cbc:	bfa6      	itte	ge
 8024cbe:	461d      	movge	r5, r3
 8024cc0:	2600      	movge	r6, #0
 8024cc2:	2601      	movlt	r6, #1
 8024cc4:	f7ff fdbe 	bl	8024844 <_Balloc>
 8024cc8:	692b      	ldr	r3, [r5, #16]
 8024cca:	60c6      	str	r6, [r0, #12]
 8024ccc:	6926      	ldr	r6, [r4, #16]
 8024cce:	f105 0914 	add.w	r9, r5, #20
 8024cd2:	f104 0214 	add.w	r2, r4, #20
 8024cd6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8024cda:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8024cde:	f100 0514 	add.w	r5, r0, #20
 8024ce2:	f04f 0c00 	mov.w	ip, #0
 8024ce6:	f852 ab04 	ldr.w	sl, [r2], #4
 8024cea:	f859 4b04 	ldr.w	r4, [r9], #4
 8024cee:	fa1c f18a 	uxtah	r1, ip, sl
 8024cf2:	b2a3      	uxth	r3, r4
 8024cf4:	1ac9      	subs	r1, r1, r3
 8024cf6:	0c23      	lsrs	r3, r4, #16
 8024cf8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8024cfc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8024d00:	b289      	uxth	r1, r1
 8024d02:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8024d06:	45c8      	cmp	r8, r9
 8024d08:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8024d0c:	4696      	mov	lr, r2
 8024d0e:	f845 3b04 	str.w	r3, [r5], #4
 8024d12:	d8e8      	bhi.n	8024ce6 <__mdiff+0x5c>
 8024d14:	45be      	cmp	lr, r7
 8024d16:	d305      	bcc.n	8024d24 <__mdiff+0x9a>
 8024d18:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8024d1c:	b18b      	cbz	r3, 8024d42 <__mdiff+0xb8>
 8024d1e:	6106      	str	r6, [r0, #16]
 8024d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024d24:	f85e 1b04 	ldr.w	r1, [lr], #4
 8024d28:	fa1c f381 	uxtah	r3, ip, r1
 8024d2c:	141a      	asrs	r2, r3, #16
 8024d2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8024d32:	b29b      	uxth	r3, r3
 8024d34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024d38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8024d3c:	f845 3b04 	str.w	r3, [r5], #4
 8024d40:	e7e8      	b.n	8024d14 <__mdiff+0x8a>
 8024d42:	3e01      	subs	r6, #1
 8024d44:	e7e8      	b.n	8024d18 <__mdiff+0x8e>

08024d46 <__d2b>:
 8024d46:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024d4a:	460e      	mov	r6, r1
 8024d4c:	2101      	movs	r1, #1
 8024d4e:	ec59 8b10 	vmov	r8, r9, d0
 8024d52:	4615      	mov	r5, r2
 8024d54:	f7ff fd76 	bl	8024844 <_Balloc>
 8024d58:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8024d5c:	4607      	mov	r7, r0
 8024d5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8024d62:	bb34      	cbnz	r4, 8024db2 <__d2b+0x6c>
 8024d64:	9301      	str	r3, [sp, #4]
 8024d66:	f1b8 0f00 	cmp.w	r8, #0
 8024d6a:	d027      	beq.n	8024dbc <__d2b+0x76>
 8024d6c:	a802      	add	r0, sp, #8
 8024d6e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8024d72:	f7ff fe0c 	bl	802498e <__lo0bits>
 8024d76:	9900      	ldr	r1, [sp, #0]
 8024d78:	b1f0      	cbz	r0, 8024db8 <__d2b+0x72>
 8024d7a:	9a01      	ldr	r2, [sp, #4]
 8024d7c:	f1c0 0320 	rsb	r3, r0, #32
 8024d80:	fa02 f303 	lsl.w	r3, r2, r3
 8024d84:	430b      	orrs	r3, r1
 8024d86:	40c2      	lsrs	r2, r0
 8024d88:	617b      	str	r3, [r7, #20]
 8024d8a:	9201      	str	r2, [sp, #4]
 8024d8c:	9b01      	ldr	r3, [sp, #4]
 8024d8e:	61bb      	str	r3, [r7, #24]
 8024d90:	2b00      	cmp	r3, #0
 8024d92:	bf14      	ite	ne
 8024d94:	2102      	movne	r1, #2
 8024d96:	2101      	moveq	r1, #1
 8024d98:	6139      	str	r1, [r7, #16]
 8024d9a:	b1c4      	cbz	r4, 8024dce <__d2b+0x88>
 8024d9c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8024da0:	4404      	add	r4, r0
 8024da2:	6034      	str	r4, [r6, #0]
 8024da4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8024da8:	6028      	str	r0, [r5, #0]
 8024daa:	4638      	mov	r0, r7
 8024dac:	b003      	add	sp, #12
 8024dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024db6:	e7d5      	b.n	8024d64 <__d2b+0x1e>
 8024db8:	6179      	str	r1, [r7, #20]
 8024dba:	e7e7      	b.n	8024d8c <__d2b+0x46>
 8024dbc:	a801      	add	r0, sp, #4
 8024dbe:	f7ff fde6 	bl	802498e <__lo0bits>
 8024dc2:	9b01      	ldr	r3, [sp, #4]
 8024dc4:	617b      	str	r3, [r7, #20]
 8024dc6:	2101      	movs	r1, #1
 8024dc8:	6139      	str	r1, [r7, #16]
 8024dca:	3020      	adds	r0, #32
 8024dcc:	e7e5      	b.n	8024d9a <__d2b+0x54>
 8024dce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8024dd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8024dd6:	6030      	str	r0, [r6, #0]
 8024dd8:	6918      	ldr	r0, [r3, #16]
 8024dda:	f7ff fdb9 	bl	8024950 <__hi0bits>
 8024dde:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8024de2:	e7e1      	b.n	8024da8 <__d2b+0x62>

08024de4 <_sbrk_r>:
 8024de4:	b538      	push	{r3, r4, r5, lr}
 8024de6:	4c06      	ldr	r4, [pc, #24]	; (8024e00 <_sbrk_r+0x1c>)
 8024de8:	2300      	movs	r3, #0
 8024dea:	4605      	mov	r5, r0
 8024dec:	4608      	mov	r0, r1
 8024dee:	6023      	str	r3, [r4, #0]
 8024df0:	f7fd f9b6 	bl	8022160 <_sbrk>
 8024df4:	1c43      	adds	r3, r0, #1
 8024df6:	d102      	bne.n	8024dfe <_sbrk_r+0x1a>
 8024df8:	6823      	ldr	r3, [r4, #0]
 8024dfa:	b103      	cbz	r3, 8024dfe <_sbrk_r+0x1a>
 8024dfc:	602b      	str	r3, [r5, #0]
 8024dfe:	bd38      	pop	{r3, r4, r5, pc}
 8024e00:	20091e10 	.word	0x20091e10

08024e04 <__ssprint_r>:
 8024e04:	6893      	ldr	r3, [r2, #8]
 8024e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e0a:	4681      	mov	r9, r0
 8024e0c:	460c      	mov	r4, r1
 8024e0e:	4617      	mov	r7, r2
 8024e10:	2b00      	cmp	r3, #0
 8024e12:	d060      	beq.n	8024ed6 <__ssprint_r+0xd2>
 8024e14:	f04f 0b00 	mov.w	fp, #0
 8024e18:	f8d2 a000 	ldr.w	sl, [r2]
 8024e1c:	465e      	mov	r6, fp
 8024e1e:	b356      	cbz	r6, 8024e76 <__ssprint_r+0x72>
 8024e20:	68a3      	ldr	r3, [r4, #8]
 8024e22:	429e      	cmp	r6, r3
 8024e24:	d344      	bcc.n	8024eb0 <__ssprint_r+0xac>
 8024e26:	89a2      	ldrh	r2, [r4, #12]
 8024e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024e2c:	d03e      	beq.n	8024eac <__ssprint_r+0xa8>
 8024e2e:	6825      	ldr	r5, [r4, #0]
 8024e30:	6921      	ldr	r1, [r4, #16]
 8024e32:	eba5 0801 	sub.w	r8, r5, r1
 8024e36:	6965      	ldr	r5, [r4, #20]
 8024e38:	2302      	movs	r3, #2
 8024e3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024e3e:	fb95 f5f3 	sdiv	r5, r5, r3
 8024e42:	f108 0301 	add.w	r3, r8, #1
 8024e46:	4433      	add	r3, r6
 8024e48:	429d      	cmp	r5, r3
 8024e4a:	bf38      	it	cc
 8024e4c:	461d      	movcc	r5, r3
 8024e4e:	0553      	lsls	r3, r2, #21
 8024e50:	d546      	bpl.n	8024ee0 <__ssprint_r+0xdc>
 8024e52:	4629      	mov	r1, r5
 8024e54:	4648      	mov	r0, r9
 8024e56:	f7ff fadb 	bl	8024410 <_malloc_r>
 8024e5a:	b998      	cbnz	r0, 8024e84 <__ssprint_r+0x80>
 8024e5c:	230c      	movs	r3, #12
 8024e5e:	f8c9 3000 	str.w	r3, [r9]
 8024e62:	89a3      	ldrh	r3, [r4, #12]
 8024e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024e68:	81a3      	strh	r3, [r4, #12]
 8024e6a:	2300      	movs	r3, #0
 8024e6c:	60bb      	str	r3, [r7, #8]
 8024e6e:	607b      	str	r3, [r7, #4]
 8024e70:	f04f 30ff 	mov.w	r0, #4294967295
 8024e74:	e031      	b.n	8024eda <__ssprint_r+0xd6>
 8024e76:	f8da b000 	ldr.w	fp, [sl]
 8024e7a:	f8da 6004 	ldr.w	r6, [sl, #4]
 8024e7e:	f10a 0a08 	add.w	sl, sl, #8
 8024e82:	e7cc      	b.n	8024e1e <__ssprint_r+0x1a>
 8024e84:	4642      	mov	r2, r8
 8024e86:	6921      	ldr	r1, [r4, #16]
 8024e88:	9001      	str	r0, [sp, #4]
 8024e8a:	f7fd fc2d 	bl	80226e8 <memcpy>
 8024e8e:	89a2      	ldrh	r2, [r4, #12]
 8024e90:	9b01      	ldr	r3, [sp, #4]
 8024e92:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8024e96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8024e9a:	81a2      	strh	r2, [r4, #12]
 8024e9c:	6123      	str	r3, [r4, #16]
 8024e9e:	6165      	str	r5, [r4, #20]
 8024ea0:	4443      	add	r3, r8
 8024ea2:	eba5 0508 	sub.w	r5, r5, r8
 8024ea6:	6023      	str	r3, [r4, #0]
 8024ea8:	60a5      	str	r5, [r4, #8]
 8024eaa:	4633      	mov	r3, r6
 8024eac:	429e      	cmp	r6, r3
 8024eae:	d200      	bcs.n	8024eb2 <__ssprint_r+0xae>
 8024eb0:	4633      	mov	r3, r6
 8024eb2:	461a      	mov	r2, r3
 8024eb4:	4659      	mov	r1, fp
 8024eb6:	6820      	ldr	r0, [r4, #0]
 8024eb8:	9301      	str	r3, [sp, #4]
 8024eba:	f000 f971 	bl	80251a0 <memmove>
 8024ebe:	68a2      	ldr	r2, [r4, #8]
 8024ec0:	9b01      	ldr	r3, [sp, #4]
 8024ec2:	1ad2      	subs	r2, r2, r3
 8024ec4:	60a2      	str	r2, [r4, #8]
 8024ec6:	6822      	ldr	r2, [r4, #0]
 8024ec8:	4413      	add	r3, r2
 8024eca:	6023      	str	r3, [r4, #0]
 8024ecc:	68bb      	ldr	r3, [r7, #8]
 8024ece:	1b9e      	subs	r6, r3, r6
 8024ed0:	60be      	str	r6, [r7, #8]
 8024ed2:	2e00      	cmp	r6, #0
 8024ed4:	d1cf      	bne.n	8024e76 <__ssprint_r+0x72>
 8024ed6:	2000      	movs	r0, #0
 8024ed8:	6078      	str	r0, [r7, #4]
 8024eda:	b003      	add	sp, #12
 8024edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ee0:	462a      	mov	r2, r5
 8024ee2:	4648      	mov	r0, r9
 8024ee4:	f000 f976 	bl	80251d4 <_realloc_r>
 8024ee8:	4603      	mov	r3, r0
 8024eea:	2800      	cmp	r0, #0
 8024eec:	d1d6      	bne.n	8024e9c <__ssprint_r+0x98>
 8024eee:	6921      	ldr	r1, [r4, #16]
 8024ef0:	4648      	mov	r0, r9
 8024ef2:	f000 f885 	bl	8025000 <_free_r>
 8024ef6:	e7b1      	b.n	8024e5c <__ssprint_r+0x58>

08024ef8 <_calloc_r>:
 8024ef8:	b510      	push	{r4, lr}
 8024efa:	4351      	muls	r1, r2
 8024efc:	f7ff fa88 	bl	8024410 <_malloc_r>
 8024f00:	4604      	mov	r4, r0
 8024f02:	b198      	cbz	r0, 8024f2c <_calloc_r+0x34>
 8024f04:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8024f08:	f022 0203 	bic.w	r2, r2, #3
 8024f0c:	3a04      	subs	r2, #4
 8024f0e:	2a24      	cmp	r2, #36	; 0x24
 8024f10:	d81b      	bhi.n	8024f4a <_calloc_r+0x52>
 8024f12:	2a13      	cmp	r2, #19
 8024f14:	d917      	bls.n	8024f46 <_calloc_r+0x4e>
 8024f16:	2100      	movs	r1, #0
 8024f18:	2a1b      	cmp	r2, #27
 8024f1a:	6001      	str	r1, [r0, #0]
 8024f1c:	6041      	str	r1, [r0, #4]
 8024f1e:	d807      	bhi.n	8024f30 <_calloc_r+0x38>
 8024f20:	f100 0308 	add.w	r3, r0, #8
 8024f24:	2200      	movs	r2, #0
 8024f26:	601a      	str	r2, [r3, #0]
 8024f28:	605a      	str	r2, [r3, #4]
 8024f2a:	609a      	str	r2, [r3, #8]
 8024f2c:	4620      	mov	r0, r4
 8024f2e:	bd10      	pop	{r4, pc}
 8024f30:	2a24      	cmp	r2, #36	; 0x24
 8024f32:	6081      	str	r1, [r0, #8]
 8024f34:	60c1      	str	r1, [r0, #12]
 8024f36:	bf11      	iteee	ne
 8024f38:	f100 0310 	addne.w	r3, r0, #16
 8024f3c:	6101      	streq	r1, [r0, #16]
 8024f3e:	f100 0318 	addeq.w	r3, r0, #24
 8024f42:	6141      	streq	r1, [r0, #20]
 8024f44:	e7ee      	b.n	8024f24 <_calloc_r+0x2c>
 8024f46:	4603      	mov	r3, r0
 8024f48:	e7ec      	b.n	8024f24 <_calloc_r+0x2c>
 8024f4a:	2100      	movs	r1, #0
 8024f4c:	f7fd fbd7 	bl	80226fe <memset>
 8024f50:	e7ec      	b.n	8024f2c <_calloc_r+0x34>
	...

08024f54 <_malloc_trim_r>:
 8024f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024f58:	4f25      	ldr	r7, [pc, #148]	; (8024ff0 <_malloc_trim_r+0x9c>)
 8024f5a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8024ffc <_malloc_trim_r+0xa8>
 8024f5e:	4689      	mov	r9, r1
 8024f60:	4606      	mov	r6, r0
 8024f62:	f7ff fc63 	bl	802482c <__malloc_lock>
 8024f66:	68bb      	ldr	r3, [r7, #8]
 8024f68:	685d      	ldr	r5, [r3, #4]
 8024f6a:	f1a8 0411 	sub.w	r4, r8, #17
 8024f6e:	f025 0503 	bic.w	r5, r5, #3
 8024f72:	eba4 0409 	sub.w	r4, r4, r9
 8024f76:	442c      	add	r4, r5
 8024f78:	fbb4 f4f8 	udiv	r4, r4, r8
 8024f7c:	3c01      	subs	r4, #1
 8024f7e:	fb08 f404 	mul.w	r4, r8, r4
 8024f82:	4544      	cmp	r4, r8
 8024f84:	da05      	bge.n	8024f92 <_malloc_trim_r+0x3e>
 8024f86:	4630      	mov	r0, r6
 8024f88:	f7ff fc56 	bl	8024838 <__malloc_unlock>
 8024f8c:	2000      	movs	r0, #0
 8024f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024f92:	2100      	movs	r1, #0
 8024f94:	4630      	mov	r0, r6
 8024f96:	f7ff ff25 	bl	8024de4 <_sbrk_r>
 8024f9a:	68bb      	ldr	r3, [r7, #8]
 8024f9c:	442b      	add	r3, r5
 8024f9e:	4298      	cmp	r0, r3
 8024fa0:	d1f1      	bne.n	8024f86 <_malloc_trim_r+0x32>
 8024fa2:	4261      	negs	r1, r4
 8024fa4:	4630      	mov	r0, r6
 8024fa6:	f7ff ff1d 	bl	8024de4 <_sbrk_r>
 8024faa:	3001      	adds	r0, #1
 8024fac:	d110      	bne.n	8024fd0 <_malloc_trim_r+0x7c>
 8024fae:	2100      	movs	r1, #0
 8024fb0:	4630      	mov	r0, r6
 8024fb2:	f7ff ff17 	bl	8024de4 <_sbrk_r>
 8024fb6:	68ba      	ldr	r2, [r7, #8]
 8024fb8:	1a83      	subs	r3, r0, r2
 8024fba:	2b0f      	cmp	r3, #15
 8024fbc:	dde3      	ble.n	8024f86 <_malloc_trim_r+0x32>
 8024fbe:	490d      	ldr	r1, [pc, #52]	; (8024ff4 <_malloc_trim_r+0xa0>)
 8024fc0:	6809      	ldr	r1, [r1, #0]
 8024fc2:	1a40      	subs	r0, r0, r1
 8024fc4:	490c      	ldr	r1, [pc, #48]	; (8024ff8 <_malloc_trim_r+0xa4>)
 8024fc6:	f043 0301 	orr.w	r3, r3, #1
 8024fca:	6008      	str	r0, [r1, #0]
 8024fcc:	6053      	str	r3, [r2, #4]
 8024fce:	e7da      	b.n	8024f86 <_malloc_trim_r+0x32>
 8024fd0:	68bb      	ldr	r3, [r7, #8]
 8024fd2:	4a09      	ldr	r2, [pc, #36]	; (8024ff8 <_malloc_trim_r+0xa4>)
 8024fd4:	1b2d      	subs	r5, r5, r4
 8024fd6:	f045 0501 	orr.w	r5, r5, #1
 8024fda:	605d      	str	r5, [r3, #4]
 8024fdc:	6813      	ldr	r3, [r2, #0]
 8024fde:	4630      	mov	r0, r6
 8024fe0:	1b1c      	subs	r4, r3, r4
 8024fe2:	6014      	str	r4, [r2, #0]
 8024fe4:	f7ff fc28 	bl	8024838 <__malloc_unlock>
 8024fe8:	2001      	movs	r0, #1
 8024fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024fee:	bf00      	nop
 8024ff0:	20000bc0 	.word	0x20000bc0
 8024ff4:	20000fc8 	.word	0x20000fc8
 8024ff8:	2008bea4 	.word	0x2008bea4
 8024ffc:	00000080 	.word	0x00000080

08025000 <_free_r>:
 8025000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025004:	4604      	mov	r4, r0
 8025006:	4688      	mov	r8, r1
 8025008:	2900      	cmp	r1, #0
 802500a:	f000 80ab 	beq.w	8025164 <_free_r+0x164>
 802500e:	f7ff fc0d 	bl	802482c <__malloc_lock>
 8025012:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8025016:	4d54      	ldr	r5, [pc, #336]	; (8025168 <_free_r+0x168>)
 8025018:	f022 0001 	bic.w	r0, r2, #1
 802501c:	f1a8 0308 	sub.w	r3, r8, #8
 8025020:	181f      	adds	r7, r3, r0
 8025022:	68a9      	ldr	r1, [r5, #8]
 8025024:	687e      	ldr	r6, [r7, #4]
 8025026:	428f      	cmp	r7, r1
 8025028:	f026 0603 	bic.w	r6, r6, #3
 802502c:	f002 0201 	and.w	r2, r2, #1
 8025030:	d11b      	bne.n	802506a <_free_r+0x6a>
 8025032:	4430      	add	r0, r6
 8025034:	b93a      	cbnz	r2, 8025046 <_free_r+0x46>
 8025036:	f858 2c08 	ldr.w	r2, [r8, #-8]
 802503a:	1a9b      	subs	r3, r3, r2
 802503c:	4410      	add	r0, r2
 802503e:	6899      	ldr	r1, [r3, #8]
 8025040:	68da      	ldr	r2, [r3, #12]
 8025042:	60ca      	str	r2, [r1, #12]
 8025044:	6091      	str	r1, [r2, #8]
 8025046:	f040 0201 	orr.w	r2, r0, #1
 802504a:	605a      	str	r2, [r3, #4]
 802504c:	60ab      	str	r3, [r5, #8]
 802504e:	4b47      	ldr	r3, [pc, #284]	; (802516c <_free_r+0x16c>)
 8025050:	681b      	ldr	r3, [r3, #0]
 8025052:	4298      	cmp	r0, r3
 8025054:	d304      	bcc.n	8025060 <_free_r+0x60>
 8025056:	4b46      	ldr	r3, [pc, #280]	; (8025170 <_free_r+0x170>)
 8025058:	4620      	mov	r0, r4
 802505a:	6819      	ldr	r1, [r3, #0]
 802505c:	f7ff ff7a 	bl	8024f54 <_malloc_trim_r>
 8025060:	4620      	mov	r0, r4
 8025062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025066:	f7ff bbe7 	b.w	8024838 <__malloc_unlock>
 802506a:	607e      	str	r6, [r7, #4]
 802506c:	2a00      	cmp	r2, #0
 802506e:	d139      	bne.n	80250e4 <_free_r+0xe4>
 8025070:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8025074:	1a5b      	subs	r3, r3, r1
 8025076:	4408      	add	r0, r1
 8025078:	6899      	ldr	r1, [r3, #8]
 802507a:	f105 0e08 	add.w	lr, r5, #8
 802507e:	4571      	cmp	r1, lr
 8025080:	d032      	beq.n	80250e8 <_free_r+0xe8>
 8025082:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8025086:	f8c1 e00c 	str.w	lr, [r1, #12]
 802508a:	f8ce 1008 	str.w	r1, [lr, #8]
 802508e:	19b9      	adds	r1, r7, r6
 8025090:	6849      	ldr	r1, [r1, #4]
 8025092:	07c9      	lsls	r1, r1, #31
 8025094:	d40a      	bmi.n	80250ac <_free_r+0xac>
 8025096:	4430      	add	r0, r6
 8025098:	68b9      	ldr	r1, [r7, #8]
 802509a:	bb3a      	cbnz	r2, 80250ec <_free_r+0xec>
 802509c:	4e35      	ldr	r6, [pc, #212]	; (8025174 <_free_r+0x174>)
 802509e:	42b1      	cmp	r1, r6
 80250a0:	d124      	bne.n	80250ec <_free_r+0xec>
 80250a2:	616b      	str	r3, [r5, #20]
 80250a4:	612b      	str	r3, [r5, #16]
 80250a6:	2201      	movs	r2, #1
 80250a8:	60d9      	str	r1, [r3, #12]
 80250aa:	6099      	str	r1, [r3, #8]
 80250ac:	f040 0101 	orr.w	r1, r0, #1
 80250b0:	6059      	str	r1, [r3, #4]
 80250b2:	5018      	str	r0, [r3, r0]
 80250b4:	2a00      	cmp	r2, #0
 80250b6:	d1d3      	bne.n	8025060 <_free_r+0x60>
 80250b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80250bc:	d21a      	bcs.n	80250f4 <_free_r+0xf4>
 80250be:	08c0      	lsrs	r0, r0, #3
 80250c0:	1081      	asrs	r1, r0, #2
 80250c2:	2201      	movs	r2, #1
 80250c4:	408a      	lsls	r2, r1
 80250c6:	6869      	ldr	r1, [r5, #4]
 80250c8:	3001      	adds	r0, #1
 80250ca:	430a      	orrs	r2, r1
 80250cc:	606a      	str	r2, [r5, #4]
 80250ce:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80250d2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80250d6:	6099      	str	r1, [r3, #8]
 80250d8:	3a08      	subs	r2, #8
 80250da:	60da      	str	r2, [r3, #12]
 80250dc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80250e0:	60cb      	str	r3, [r1, #12]
 80250e2:	e7bd      	b.n	8025060 <_free_r+0x60>
 80250e4:	2200      	movs	r2, #0
 80250e6:	e7d2      	b.n	802508e <_free_r+0x8e>
 80250e8:	2201      	movs	r2, #1
 80250ea:	e7d0      	b.n	802508e <_free_r+0x8e>
 80250ec:	68fe      	ldr	r6, [r7, #12]
 80250ee:	60ce      	str	r6, [r1, #12]
 80250f0:	60b1      	str	r1, [r6, #8]
 80250f2:	e7db      	b.n	80250ac <_free_r+0xac>
 80250f4:	0a42      	lsrs	r2, r0, #9
 80250f6:	2a04      	cmp	r2, #4
 80250f8:	d813      	bhi.n	8025122 <_free_r+0x122>
 80250fa:	0982      	lsrs	r2, r0, #6
 80250fc:	3238      	adds	r2, #56	; 0x38
 80250fe:	1c51      	adds	r1, r2, #1
 8025100:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8025104:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8025108:	428e      	cmp	r6, r1
 802510a:	d124      	bne.n	8025156 <_free_r+0x156>
 802510c:	2001      	movs	r0, #1
 802510e:	1092      	asrs	r2, r2, #2
 8025110:	fa00 f202 	lsl.w	r2, r0, r2
 8025114:	6868      	ldr	r0, [r5, #4]
 8025116:	4302      	orrs	r2, r0
 8025118:	606a      	str	r2, [r5, #4]
 802511a:	60de      	str	r6, [r3, #12]
 802511c:	6099      	str	r1, [r3, #8]
 802511e:	60b3      	str	r3, [r6, #8]
 8025120:	e7de      	b.n	80250e0 <_free_r+0xe0>
 8025122:	2a14      	cmp	r2, #20
 8025124:	d801      	bhi.n	802512a <_free_r+0x12a>
 8025126:	325b      	adds	r2, #91	; 0x5b
 8025128:	e7e9      	b.n	80250fe <_free_r+0xfe>
 802512a:	2a54      	cmp	r2, #84	; 0x54
 802512c:	d802      	bhi.n	8025134 <_free_r+0x134>
 802512e:	0b02      	lsrs	r2, r0, #12
 8025130:	326e      	adds	r2, #110	; 0x6e
 8025132:	e7e4      	b.n	80250fe <_free_r+0xfe>
 8025134:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8025138:	d802      	bhi.n	8025140 <_free_r+0x140>
 802513a:	0bc2      	lsrs	r2, r0, #15
 802513c:	3277      	adds	r2, #119	; 0x77
 802513e:	e7de      	b.n	80250fe <_free_r+0xfe>
 8025140:	f240 5154 	movw	r1, #1364	; 0x554
 8025144:	428a      	cmp	r2, r1
 8025146:	bf9a      	itte	ls
 8025148:	0c82      	lsrls	r2, r0, #18
 802514a:	327c      	addls	r2, #124	; 0x7c
 802514c:	227e      	movhi	r2, #126	; 0x7e
 802514e:	e7d6      	b.n	80250fe <_free_r+0xfe>
 8025150:	6889      	ldr	r1, [r1, #8]
 8025152:	428e      	cmp	r6, r1
 8025154:	d004      	beq.n	8025160 <_free_r+0x160>
 8025156:	684a      	ldr	r2, [r1, #4]
 8025158:	f022 0203 	bic.w	r2, r2, #3
 802515c:	4290      	cmp	r0, r2
 802515e:	d3f7      	bcc.n	8025150 <_free_r+0x150>
 8025160:	68ce      	ldr	r6, [r1, #12]
 8025162:	e7da      	b.n	802511a <_free_r+0x11a>
 8025164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025168:	20000bc0 	.word	0x20000bc0
 802516c:	20000fcc 	.word	0x20000fcc
 8025170:	2008bed4 	.word	0x2008bed4
 8025174:	20000bc8 	.word	0x20000bc8

08025178 <__retarget_lock_acquire_recursive>:
 8025178:	4770      	bx	lr

0802517a <__retarget_lock_release_recursive>:
 802517a:	4770      	bx	lr

0802517c <__ascii_mbtowc>:
 802517c:	b082      	sub	sp, #8
 802517e:	b901      	cbnz	r1, 8025182 <__ascii_mbtowc+0x6>
 8025180:	a901      	add	r1, sp, #4
 8025182:	b142      	cbz	r2, 8025196 <__ascii_mbtowc+0x1a>
 8025184:	b14b      	cbz	r3, 802519a <__ascii_mbtowc+0x1e>
 8025186:	7813      	ldrb	r3, [r2, #0]
 8025188:	600b      	str	r3, [r1, #0]
 802518a:	7812      	ldrb	r2, [r2, #0]
 802518c:	1c10      	adds	r0, r2, #0
 802518e:	bf18      	it	ne
 8025190:	2001      	movne	r0, #1
 8025192:	b002      	add	sp, #8
 8025194:	4770      	bx	lr
 8025196:	4610      	mov	r0, r2
 8025198:	e7fb      	b.n	8025192 <__ascii_mbtowc+0x16>
 802519a:	f06f 0001 	mvn.w	r0, #1
 802519e:	e7f8      	b.n	8025192 <__ascii_mbtowc+0x16>

080251a0 <memmove>:
 80251a0:	4288      	cmp	r0, r1
 80251a2:	b510      	push	{r4, lr}
 80251a4:	eb01 0302 	add.w	r3, r1, r2
 80251a8:	d803      	bhi.n	80251b2 <memmove+0x12>
 80251aa:	1e42      	subs	r2, r0, #1
 80251ac:	4299      	cmp	r1, r3
 80251ae:	d10c      	bne.n	80251ca <memmove+0x2a>
 80251b0:	bd10      	pop	{r4, pc}
 80251b2:	4298      	cmp	r0, r3
 80251b4:	d2f9      	bcs.n	80251aa <memmove+0xa>
 80251b6:	1881      	adds	r1, r0, r2
 80251b8:	1ad2      	subs	r2, r2, r3
 80251ba:	42d3      	cmn	r3, r2
 80251bc:	d100      	bne.n	80251c0 <memmove+0x20>
 80251be:	bd10      	pop	{r4, pc}
 80251c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80251c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80251c8:	e7f7      	b.n	80251ba <memmove+0x1a>
 80251ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80251ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80251d2:	e7eb      	b.n	80251ac <memmove+0xc>

080251d4 <_realloc_r>:
 80251d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251d8:	4682      	mov	sl, r0
 80251da:	460c      	mov	r4, r1
 80251dc:	b929      	cbnz	r1, 80251ea <_realloc_r+0x16>
 80251de:	4611      	mov	r1, r2
 80251e0:	b003      	add	sp, #12
 80251e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251e6:	f7ff b913 	b.w	8024410 <_malloc_r>
 80251ea:	9201      	str	r2, [sp, #4]
 80251ec:	f7ff fb1e 	bl	802482c <__malloc_lock>
 80251f0:	9a01      	ldr	r2, [sp, #4]
 80251f2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80251f6:	f102 080b 	add.w	r8, r2, #11
 80251fa:	f1b8 0f16 	cmp.w	r8, #22
 80251fe:	f1a4 0908 	sub.w	r9, r4, #8
 8025202:	f025 0603 	bic.w	r6, r5, #3
 8025206:	d90a      	bls.n	802521e <_realloc_r+0x4a>
 8025208:	f038 0807 	bics.w	r8, r8, #7
 802520c:	d509      	bpl.n	8025222 <_realloc_r+0x4e>
 802520e:	230c      	movs	r3, #12
 8025210:	f8ca 3000 	str.w	r3, [sl]
 8025214:	2700      	movs	r7, #0
 8025216:	4638      	mov	r0, r7
 8025218:	b003      	add	sp, #12
 802521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802521e:	f04f 0810 	mov.w	r8, #16
 8025222:	4590      	cmp	r8, r2
 8025224:	d3f3      	bcc.n	802520e <_realloc_r+0x3a>
 8025226:	45b0      	cmp	r8, r6
 8025228:	f340 8145 	ble.w	80254b6 <_realloc_r+0x2e2>
 802522c:	4ba8      	ldr	r3, [pc, #672]	; (80254d0 <_realloc_r+0x2fc>)
 802522e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8025232:	eb09 0106 	add.w	r1, r9, r6
 8025236:	4571      	cmp	r1, lr
 8025238:	469b      	mov	fp, r3
 802523a:	684b      	ldr	r3, [r1, #4]
 802523c:	d005      	beq.n	802524a <_realloc_r+0x76>
 802523e:	f023 0001 	bic.w	r0, r3, #1
 8025242:	4408      	add	r0, r1
 8025244:	6840      	ldr	r0, [r0, #4]
 8025246:	07c7      	lsls	r7, r0, #31
 8025248:	d447      	bmi.n	80252da <_realloc_r+0x106>
 802524a:	f023 0303 	bic.w	r3, r3, #3
 802524e:	4571      	cmp	r1, lr
 8025250:	eb06 0703 	add.w	r7, r6, r3
 8025254:	d119      	bne.n	802528a <_realloc_r+0xb6>
 8025256:	f108 0010 	add.w	r0, r8, #16
 802525a:	4287      	cmp	r7, r0
 802525c:	db3f      	blt.n	80252de <_realloc_r+0x10a>
 802525e:	eb09 0308 	add.w	r3, r9, r8
 8025262:	eba7 0708 	sub.w	r7, r7, r8
 8025266:	f047 0701 	orr.w	r7, r7, #1
 802526a:	f8cb 3008 	str.w	r3, [fp, #8]
 802526e:	605f      	str	r7, [r3, #4]
 8025270:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8025274:	f003 0301 	and.w	r3, r3, #1
 8025278:	ea43 0308 	orr.w	r3, r3, r8
 802527c:	f844 3c04 	str.w	r3, [r4, #-4]
 8025280:	4650      	mov	r0, sl
 8025282:	f7ff fad9 	bl	8024838 <__malloc_unlock>
 8025286:	4627      	mov	r7, r4
 8025288:	e7c5      	b.n	8025216 <_realloc_r+0x42>
 802528a:	45b8      	cmp	r8, r7
 802528c:	dc27      	bgt.n	80252de <_realloc_r+0x10a>
 802528e:	68cb      	ldr	r3, [r1, #12]
 8025290:	688a      	ldr	r2, [r1, #8]
 8025292:	60d3      	str	r3, [r2, #12]
 8025294:	609a      	str	r2, [r3, #8]
 8025296:	eba7 0008 	sub.w	r0, r7, r8
 802529a:	280f      	cmp	r0, #15
 802529c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80252a0:	eb09 0207 	add.w	r2, r9, r7
 80252a4:	f240 8109 	bls.w	80254ba <_realloc_r+0x2e6>
 80252a8:	eb09 0108 	add.w	r1, r9, r8
 80252ac:	f003 0301 	and.w	r3, r3, #1
 80252b0:	ea43 0308 	orr.w	r3, r3, r8
 80252b4:	f040 0001 	orr.w	r0, r0, #1
 80252b8:	f8c9 3004 	str.w	r3, [r9, #4]
 80252bc:	6048      	str	r0, [r1, #4]
 80252be:	6853      	ldr	r3, [r2, #4]
 80252c0:	f043 0301 	orr.w	r3, r3, #1
 80252c4:	6053      	str	r3, [r2, #4]
 80252c6:	3108      	adds	r1, #8
 80252c8:	4650      	mov	r0, sl
 80252ca:	f7ff fe99 	bl	8025000 <_free_r>
 80252ce:	4650      	mov	r0, sl
 80252d0:	f7ff fab2 	bl	8024838 <__malloc_unlock>
 80252d4:	f109 0708 	add.w	r7, r9, #8
 80252d8:	e79d      	b.n	8025216 <_realloc_r+0x42>
 80252da:	2300      	movs	r3, #0
 80252dc:	4619      	mov	r1, r3
 80252de:	07e8      	lsls	r0, r5, #31
 80252e0:	f100 8084 	bmi.w	80253ec <_realloc_r+0x218>
 80252e4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80252e8:	eba9 0505 	sub.w	r5, r9, r5
 80252ec:	6868      	ldr	r0, [r5, #4]
 80252ee:	f020 0003 	bic.w	r0, r0, #3
 80252f2:	4430      	add	r0, r6
 80252f4:	2900      	cmp	r1, #0
 80252f6:	d076      	beq.n	80253e6 <_realloc_r+0x212>
 80252f8:	4571      	cmp	r1, lr
 80252fa:	d150      	bne.n	802539e <_realloc_r+0x1ca>
 80252fc:	4403      	add	r3, r0
 80252fe:	f108 0110 	add.w	r1, r8, #16
 8025302:	428b      	cmp	r3, r1
 8025304:	db6f      	blt.n	80253e6 <_realloc_r+0x212>
 8025306:	462f      	mov	r7, r5
 8025308:	68ea      	ldr	r2, [r5, #12]
 802530a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 802530e:	60ca      	str	r2, [r1, #12]
 8025310:	6091      	str	r1, [r2, #8]
 8025312:	1f32      	subs	r2, r6, #4
 8025314:	2a24      	cmp	r2, #36	; 0x24
 8025316:	d83b      	bhi.n	8025390 <_realloc_r+0x1bc>
 8025318:	2a13      	cmp	r2, #19
 802531a:	d936      	bls.n	802538a <_realloc_r+0x1b6>
 802531c:	6821      	ldr	r1, [r4, #0]
 802531e:	60a9      	str	r1, [r5, #8]
 8025320:	6861      	ldr	r1, [r4, #4]
 8025322:	60e9      	str	r1, [r5, #12]
 8025324:	2a1b      	cmp	r2, #27
 8025326:	d81c      	bhi.n	8025362 <_realloc_r+0x18e>
 8025328:	f105 0210 	add.w	r2, r5, #16
 802532c:	f104 0108 	add.w	r1, r4, #8
 8025330:	6808      	ldr	r0, [r1, #0]
 8025332:	6010      	str	r0, [r2, #0]
 8025334:	6848      	ldr	r0, [r1, #4]
 8025336:	6050      	str	r0, [r2, #4]
 8025338:	6889      	ldr	r1, [r1, #8]
 802533a:	6091      	str	r1, [r2, #8]
 802533c:	eb05 0208 	add.w	r2, r5, r8
 8025340:	eba3 0308 	sub.w	r3, r3, r8
 8025344:	f043 0301 	orr.w	r3, r3, #1
 8025348:	f8cb 2008 	str.w	r2, [fp, #8]
 802534c:	6053      	str	r3, [r2, #4]
 802534e:	686b      	ldr	r3, [r5, #4]
 8025350:	f003 0301 	and.w	r3, r3, #1
 8025354:	ea43 0308 	orr.w	r3, r3, r8
 8025358:	606b      	str	r3, [r5, #4]
 802535a:	4650      	mov	r0, sl
 802535c:	f7ff fa6c 	bl	8024838 <__malloc_unlock>
 8025360:	e759      	b.n	8025216 <_realloc_r+0x42>
 8025362:	68a1      	ldr	r1, [r4, #8]
 8025364:	6129      	str	r1, [r5, #16]
 8025366:	68e1      	ldr	r1, [r4, #12]
 8025368:	6169      	str	r1, [r5, #20]
 802536a:	2a24      	cmp	r2, #36	; 0x24
 802536c:	bf01      	itttt	eq
 802536e:	6922      	ldreq	r2, [r4, #16]
 8025370:	61aa      	streq	r2, [r5, #24]
 8025372:	6960      	ldreq	r0, [r4, #20]
 8025374:	61e8      	streq	r0, [r5, #28]
 8025376:	bf19      	ittee	ne
 8025378:	f105 0218 	addne.w	r2, r5, #24
 802537c:	f104 0110 	addne.w	r1, r4, #16
 8025380:	f105 0220 	addeq.w	r2, r5, #32
 8025384:	f104 0118 	addeq.w	r1, r4, #24
 8025388:	e7d2      	b.n	8025330 <_realloc_r+0x15c>
 802538a:	463a      	mov	r2, r7
 802538c:	4621      	mov	r1, r4
 802538e:	e7cf      	b.n	8025330 <_realloc_r+0x15c>
 8025390:	4621      	mov	r1, r4
 8025392:	4638      	mov	r0, r7
 8025394:	9301      	str	r3, [sp, #4]
 8025396:	f7ff ff03 	bl	80251a0 <memmove>
 802539a:	9b01      	ldr	r3, [sp, #4]
 802539c:	e7ce      	b.n	802533c <_realloc_r+0x168>
 802539e:	18c7      	adds	r7, r0, r3
 80253a0:	45b8      	cmp	r8, r7
 80253a2:	dc20      	bgt.n	80253e6 <_realloc_r+0x212>
 80253a4:	68cb      	ldr	r3, [r1, #12]
 80253a6:	688a      	ldr	r2, [r1, #8]
 80253a8:	60d3      	str	r3, [r2, #12]
 80253aa:	609a      	str	r2, [r3, #8]
 80253ac:	4628      	mov	r0, r5
 80253ae:	68eb      	ldr	r3, [r5, #12]
 80253b0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80253b4:	60d3      	str	r3, [r2, #12]
 80253b6:	609a      	str	r2, [r3, #8]
 80253b8:	1f32      	subs	r2, r6, #4
 80253ba:	2a24      	cmp	r2, #36	; 0x24
 80253bc:	d842      	bhi.n	8025444 <_realloc_r+0x270>
 80253be:	2a13      	cmp	r2, #19
 80253c0:	d93e      	bls.n	8025440 <_realloc_r+0x26c>
 80253c2:	6823      	ldr	r3, [r4, #0]
 80253c4:	60ab      	str	r3, [r5, #8]
 80253c6:	6863      	ldr	r3, [r4, #4]
 80253c8:	60eb      	str	r3, [r5, #12]
 80253ca:	2a1b      	cmp	r2, #27
 80253cc:	d824      	bhi.n	8025418 <_realloc_r+0x244>
 80253ce:	f105 0010 	add.w	r0, r5, #16
 80253d2:	f104 0308 	add.w	r3, r4, #8
 80253d6:	681a      	ldr	r2, [r3, #0]
 80253d8:	6002      	str	r2, [r0, #0]
 80253da:	685a      	ldr	r2, [r3, #4]
 80253dc:	6042      	str	r2, [r0, #4]
 80253de:	689b      	ldr	r3, [r3, #8]
 80253e0:	6083      	str	r3, [r0, #8]
 80253e2:	46a9      	mov	r9, r5
 80253e4:	e757      	b.n	8025296 <_realloc_r+0xc2>
 80253e6:	4580      	cmp	r8, r0
 80253e8:	4607      	mov	r7, r0
 80253ea:	dddf      	ble.n	80253ac <_realloc_r+0x1d8>
 80253ec:	4611      	mov	r1, r2
 80253ee:	4650      	mov	r0, sl
 80253f0:	f7ff f80e 	bl	8024410 <_malloc_r>
 80253f4:	4607      	mov	r7, r0
 80253f6:	2800      	cmp	r0, #0
 80253f8:	d0af      	beq.n	802535a <_realloc_r+0x186>
 80253fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80253fe:	f023 0301 	bic.w	r3, r3, #1
 8025402:	f1a0 0208 	sub.w	r2, r0, #8
 8025406:	444b      	add	r3, r9
 8025408:	429a      	cmp	r2, r3
 802540a:	d11f      	bne.n	802544c <_realloc_r+0x278>
 802540c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8025410:	f027 0703 	bic.w	r7, r7, #3
 8025414:	4437      	add	r7, r6
 8025416:	e73e      	b.n	8025296 <_realloc_r+0xc2>
 8025418:	68a3      	ldr	r3, [r4, #8]
 802541a:	612b      	str	r3, [r5, #16]
 802541c:	68e3      	ldr	r3, [r4, #12]
 802541e:	616b      	str	r3, [r5, #20]
 8025420:	2a24      	cmp	r2, #36	; 0x24
 8025422:	bf01      	itttt	eq
 8025424:	6923      	ldreq	r3, [r4, #16]
 8025426:	61ab      	streq	r3, [r5, #24]
 8025428:	6962      	ldreq	r2, [r4, #20]
 802542a:	61ea      	streq	r2, [r5, #28]
 802542c:	bf19      	ittee	ne
 802542e:	f105 0018 	addne.w	r0, r5, #24
 8025432:	f104 0310 	addne.w	r3, r4, #16
 8025436:	f105 0020 	addeq.w	r0, r5, #32
 802543a:	f104 0318 	addeq.w	r3, r4, #24
 802543e:	e7ca      	b.n	80253d6 <_realloc_r+0x202>
 8025440:	4623      	mov	r3, r4
 8025442:	e7c8      	b.n	80253d6 <_realloc_r+0x202>
 8025444:	4621      	mov	r1, r4
 8025446:	f7ff feab 	bl	80251a0 <memmove>
 802544a:	e7ca      	b.n	80253e2 <_realloc_r+0x20e>
 802544c:	1f32      	subs	r2, r6, #4
 802544e:	2a24      	cmp	r2, #36	; 0x24
 8025450:	d82d      	bhi.n	80254ae <_realloc_r+0x2da>
 8025452:	2a13      	cmp	r2, #19
 8025454:	d928      	bls.n	80254a8 <_realloc_r+0x2d4>
 8025456:	6823      	ldr	r3, [r4, #0]
 8025458:	6003      	str	r3, [r0, #0]
 802545a:	6863      	ldr	r3, [r4, #4]
 802545c:	6043      	str	r3, [r0, #4]
 802545e:	2a1b      	cmp	r2, #27
 8025460:	d80e      	bhi.n	8025480 <_realloc_r+0x2ac>
 8025462:	f100 0308 	add.w	r3, r0, #8
 8025466:	f104 0208 	add.w	r2, r4, #8
 802546a:	6811      	ldr	r1, [r2, #0]
 802546c:	6019      	str	r1, [r3, #0]
 802546e:	6851      	ldr	r1, [r2, #4]
 8025470:	6059      	str	r1, [r3, #4]
 8025472:	6892      	ldr	r2, [r2, #8]
 8025474:	609a      	str	r2, [r3, #8]
 8025476:	4621      	mov	r1, r4
 8025478:	4650      	mov	r0, sl
 802547a:	f7ff fdc1 	bl	8025000 <_free_r>
 802547e:	e76c      	b.n	802535a <_realloc_r+0x186>
 8025480:	68a3      	ldr	r3, [r4, #8]
 8025482:	6083      	str	r3, [r0, #8]
 8025484:	68e3      	ldr	r3, [r4, #12]
 8025486:	60c3      	str	r3, [r0, #12]
 8025488:	2a24      	cmp	r2, #36	; 0x24
 802548a:	bf01      	itttt	eq
 802548c:	6923      	ldreq	r3, [r4, #16]
 802548e:	6103      	streq	r3, [r0, #16]
 8025490:	6961      	ldreq	r1, [r4, #20]
 8025492:	6141      	streq	r1, [r0, #20]
 8025494:	bf19      	ittee	ne
 8025496:	f100 0310 	addne.w	r3, r0, #16
 802549a:	f104 0210 	addne.w	r2, r4, #16
 802549e:	f100 0318 	addeq.w	r3, r0, #24
 80254a2:	f104 0218 	addeq.w	r2, r4, #24
 80254a6:	e7e0      	b.n	802546a <_realloc_r+0x296>
 80254a8:	4603      	mov	r3, r0
 80254aa:	4622      	mov	r2, r4
 80254ac:	e7dd      	b.n	802546a <_realloc_r+0x296>
 80254ae:	4621      	mov	r1, r4
 80254b0:	f7ff fe76 	bl	80251a0 <memmove>
 80254b4:	e7df      	b.n	8025476 <_realloc_r+0x2a2>
 80254b6:	4637      	mov	r7, r6
 80254b8:	e6ed      	b.n	8025296 <_realloc_r+0xc2>
 80254ba:	f003 0301 	and.w	r3, r3, #1
 80254be:	431f      	orrs	r7, r3
 80254c0:	f8c9 7004 	str.w	r7, [r9, #4]
 80254c4:	6853      	ldr	r3, [r2, #4]
 80254c6:	f043 0301 	orr.w	r3, r3, #1
 80254ca:	6053      	str	r3, [r2, #4]
 80254cc:	e6ff      	b.n	80252ce <_realloc_r+0xfa>
 80254ce:	bf00      	nop
 80254d0:	20000bc0 	.word	0x20000bc0

080254d4 <__ascii_wctomb>:
 80254d4:	b149      	cbz	r1, 80254ea <__ascii_wctomb+0x16>
 80254d6:	2aff      	cmp	r2, #255	; 0xff
 80254d8:	bf85      	ittet	hi
 80254da:	238a      	movhi	r3, #138	; 0x8a
 80254dc:	6003      	strhi	r3, [r0, #0]
 80254de:	700a      	strbls	r2, [r1, #0]
 80254e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80254e4:	bf98      	it	ls
 80254e6:	2001      	movls	r0, #1
 80254e8:	4770      	bx	lr
 80254ea:	4608      	mov	r0, r1
 80254ec:	4770      	bx	lr
	...

080254f0 <cbrt>:
 80254f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80254f4:	ec51 0b10 	vmov	r0, r1, d0
 80254f8:	4a59      	ldr	r2, [pc, #356]	; (8025660 <cbrt+0x170>)
 80254fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80254fe:	4293      	cmp	r3, r2
 8025500:	468a      	mov	sl, r1
 8025502:	ee10 2a10 	vmov	r2, s0
 8025506:	d907      	bls.n	8025518 <cbrt+0x28>
 8025508:	460b      	mov	r3, r1
 802550a:	f7da fed7 	bl	80002bc <__adddf3>
 802550e:	ec41 0b10 	vmov	d0, r0, r1
 8025512:	b002      	add	sp, #8
 8025514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025518:	431a      	orrs	r2, r3
 802551a:	d0f8      	beq.n	802550e <cbrt+0x1e>
 802551c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8025520:	4619      	mov	r1, r3
 8025522:	4606      	mov	r6, r0
 8025524:	461f      	mov	r7, r3
 8025526:	d27c      	bcs.n	8025622 <cbrt+0x132>
 8025528:	2200      	movs	r2, #0
 802552a:	4b4e      	ldr	r3, [pc, #312]	; (8025664 <cbrt+0x174>)
 802552c:	f7db f878 	bl	8000620 <__aeabi_dmul>
 8025530:	2203      	movs	r2, #3
 8025532:	fbb1 f3f2 	udiv	r3, r1, r2
 8025536:	f103 5525 	add.w	r5, r3, #692060160	; 0x29400000
 802553a:	f505 157d 	add.w	r5, r5, #4145152	; 0x3f4000
 802553e:	f505 5562 	add.w	r5, r5, #14464	; 0x3880
 8025542:	4604      	mov	r4, r0
 8025544:	3513      	adds	r5, #19
 8025546:	4622      	mov	r2, r4
 8025548:	462b      	mov	r3, r5
 802554a:	4620      	mov	r0, r4
 802554c:	4629      	mov	r1, r5
 802554e:	f7db f867 	bl	8000620 <__aeabi_dmul>
 8025552:	4632      	mov	r2, r6
 8025554:	463b      	mov	r3, r7
 8025556:	f7db f98d 	bl	8000874 <__aeabi_ddiv>
 802555a:	4622      	mov	r2, r4
 802555c:	462b      	mov	r3, r5
 802555e:	f7db f85f 	bl	8000620 <__aeabi_dmul>
 8025562:	a335      	add	r3, pc, #212	; (adr r3, 8025638 <cbrt+0x148>)
 8025564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025568:	f7da fea8 	bl	80002bc <__adddf3>
 802556c:	a334      	add	r3, pc, #208	; (adr r3, 8025640 <cbrt+0x150>)
 802556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025572:	e9cd 0100 	strd	r0, r1, [sp]
 8025576:	f7da fea1 	bl	80002bc <__adddf3>
 802557a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802557e:	4680      	mov	r8, r0
 8025580:	4689      	mov	r9, r1
 8025582:	a131      	add	r1, pc, #196	; (adr r1, 8025648 <cbrt+0x158>)
 8025584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025588:	f7db f974 	bl	8000874 <__aeabi_ddiv>
 802558c:	4602      	mov	r2, r0
 802558e:	460b      	mov	r3, r1
 8025590:	4640      	mov	r0, r8
 8025592:	4649      	mov	r1, r9
 8025594:	f7da fe92 	bl	80002bc <__adddf3>
 8025598:	4602      	mov	r2, r0
 802559a:	460b      	mov	r3, r1
 802559c:	a12c      	add	r1, pc, #176	; (adr r1, 8025650 <cbrt+0x160>)
 802559e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80255a2:	f7db f967 	bl	8000874 <__aeabi_ddiv>
 80255a6:	a32c      	add	r3, pc, #176	; (adr r3, 8025658 <cbrt+0x168>)
 80255a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255ac:	f7da fe86 	bl	80002bc <__adddf3>
 80255b0:	4622      	mov	r2, r4
 80255b2:	462b      	mov	r3, r5
 80255b4:	f7db f834 	bl	8000620 <__aeabi_dmul>
 80255b8:	2400      	movs	r4, #0
 80255ba:	1c4d      	adds	r5, r1, #1
 80255bc:	4622      	mov	r2, r4
 80255be:	462b      	mov	r3, r5
 80255c0:	4620      	mov	r0, r4
 80255c2:	4629      	mov	r1, r5
 80255c4:	f7db f82c 	bl	8000620 <__aeabi_dmul>
 80255c8:	4602      	mov	r2, r0
 80255ca:	460b      	mov	r3, r1
 80255cc:	4630      	mov	r0, r6
 80255ce:	4639      	mov	r1, r7
 80255d0:	f7db f950 	bl	8000874 <__aeabi_ddiv>
 80255d4:	4622      	mov	r2, r4
 80255d6:	462b      	mov	r3, r5
 80255d8:	4680      	mov	r8, r0
 80255da:	4689      	mov	r9, r1
 80255dc:	f7da fe6c 	bl	80002b8 <__aeabi_dsub>
 80255e0:	4622      	mov	r2, r4
 80255e2:	4606      	mov	r6, r0
 80255e4:	460f      	mov	r7, r1
 80255e6:	462b      	mov	r3, r5
 80255e8:	4620      	mov	r0, r4
 80255ea:	4629      	mov	r1, r5
 80255ec:	f7da fe66 	bl	80002bc <__adddf3>
 80255f0:	4642      	mov	r2, r8
 80255f2:	464b      	mov	r3, r9
 80255f4:	f7da fe62 	bl	80002bc <__adddf3>
 80255f8:	4602      	mov	r2, r0
 80255fa:	460b      	mov	r3, r1
 80255fc:	4630      	mov	r0, r6
 80255fe:	4639      	mov	r1, r7
 8025600:	f7db f938 	bl	8000874 <__aeabi_ddiv>
 8025604:	4622      	mov	r2, r4
 8025606:	462b      	mov	r3, r5
 8025608:	f7db f80a 	bl	8000620 <__aeabi_dmul>
 802560c:	4602      	mov	r2, r0
 802560e:	460b      	mov	r3, r1
 8025610:	4620      	mov	r0, r4
 8025612:	4629      	mov	r1, r5
 8025614:	f7da fe52 	bl	80002bc <__adddf3>
 8025618:	f00a 4a00 	and.w	sl, sl, #2147483648	; 0x80000000
 802561c:	ea4a 0101 	orr.w	r1, sl, r1
 8025620:	e775      	b.n	802550e <cbrt+0x1e>
 8025622:	2203      	movs	r2, #3
 8025624:	fb93 f3f2 	sdiv	r3, r3, r2
 8025628:	f103 552c 	add.w	r5, r3, #721420288	; 0x2b000000
 802562c:	f5a5 05c1 	sub.w	r5, r5, #6324224	; 0x608000
 8025630:	2400      	movs	r4, #0
 8025632:	f2a5 756d 	subw	r5, r5, #1901	; 0x76d
 8025636:	e786      	b.n	8025546 <cbrt+0x56>
 8025638:	f15f15f1 	.word	0xf15f15f1
 802563c:	3fe15f15 	.word	0x3fe15f15
 8025640:	0ea0ea0f 	.word	0x0ea0ea0f
 8025644:	3ff6a0ea 	.word	0x3ff6a0ea
 8025648:	2532c834 	.word	0x2532c834
 802564c:	bfe691de 	.word	0xbfe691de
 8025650:	6db6db6e 	.word	0x6db6db6e
 8025654:	3ff9b6db 	.word	0x3ff9b6db
 8025658:	b6db6db7 	.word	0xb6db6db7
 802565c:	3fd6db6d 	.word	0x3fd6db6d
 8025660:	7fefffff 	.word	0x7fefffff
 8025664:	43500000 	.word	0x43500000

08025668 <floor>:
 8025668:	ec51 0b10 	vmov	r0, r1, d0
 802566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025670:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8025674:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025678:	2e13      	cmp	r6, #19
 802567a:	ee10 8a10 	vmov	r8, s0
 802567e:	460c      	mov	r4, r1
 8025680:	ee10 5a10 	vmov	r5, s0
 8025684:	dc35      	bgt.n	80256f2 <floor+0x8a>
 8025686:	2e00      	cmp	r6, #0
 8025688:	da17      	bge.n	80256ba <floor+0x52>
 802568a:	a335      	add	r3, pc, #212	; (adr r3, 8025760 <floor+0xf8>)
 802568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025690:	f7da fe14 	bl	80002bc <__adddf3>
 8025694:	2200      	movs	r2, #0
 8025696:	2300      	movs	r3, #0
 8025698:	f7db fa52 	bl	8000b40 <__aeabi_dcmpgt>
 802569c:	b150      	cbz	r0, 80256b4 <floor+0x4c>
 802569e:	2c00      	cmp	r4, #0
 80256a0:	da5a      	bge.n	8025758 <floor+0xf0>
 80256a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80256a6:	ea53 0308 	orrs.w	r3, r3, r8
 80256aa:	4b2f      	ldr	r3, [pc, #188]	; (8025768 <floor+0x100>)
 80256ac:	f04f 0500 	mov.w	r5, #0
 80256b0:	bf18      	it	ne
 80256b2:	461c      	movne	r4, r3
 80256b4:	4621      	mov	r1, r4
 80256b6:	4628      	mov	r0, r5
 80256b8:	e025      	b.n	8025706 <floor+0x9e>
 80256ba:	4f2c      	ldr	r7, [pc, #176]	; (802576c <floor+0x104>)
 80256bc:	4137      	asrs	r7, r6
 80256be:	ea01 0307 	and.w	r3, r1, r7
 80256c2:	4303      	orrs	r3, r0
 80256c4:	d01f      	beq.n	8025706 <floor+0x9e>
 80256c6:	a326      	add	r3, pc, #152	; (adr r3, 8025760 <floor+0xf8>)
 80256c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256cc:	f7da fdf6 	bl	80002bc <__adddf3>
 80256d0:	2200      	movs	r2, #0
 80256d2:	2300      	movs	r3, #0
 80256d4:	f7db fa34 	bl	8000b40 <__aeabi_dcmpgt>
 80256d8:	2800      	cmp	r0, #0
 80256da:	d0eb      	beq.n	80256b4 <floor+0x4c>
 80256dc:	2c00      	cmp	r4, #0
 80256de:	bfbe      	ittt	lt
 80256e0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80256e4:	fa43 f606 	asrlt.w	r6, r3, r6
 80256e8:	19a4      	addlt	r4, r4, r6
 80256ea:	ea24 0407 	bic.w	r4, r4, r7
 80256ee:	2500      	movs	r5, #0
 80256f0:	e7e0      	b.n	80256b4 <floor+0x4c>
 80256f2:	2e33      	cmp	r6, #51	; 0x33
 80256f4:	dd0b      	ble.n	802570e <floor+0xa6>
 80256f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80256fa:	d104      	bne.n	8025706 <floor+0x9e>
 80256fc:	ee10 2a10 	vmov	r2, s0
 8025700:	460b      	mov	r3, r1
 8025702:	f7da fddb 	bl	80002bc <__adddf3>
 8025706:	ec41 0b10 	vmov	d0, r0, r1
 802570a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802570e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8025712:	f04f 33ff 	mov.w	r3, #4294967295
 8025716:	fa23 f707 	lsr.w	r7, r3, r7
 802571a:	4238      	tst	r0, r7
 802571c:	d0f3      	beq.n	8025706 <floor+0x9e>
 802571e:	a310      	add	r3, pc, #64	; (adr r3, 8025760 <floor+0xf8>)
 8025720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025724:	f7da fdca 	bl	80002bc <__adddf3>
 8025728:	2200      	movs	r2, #0
 802572a:	2300      	movs	r3, #0
 802572c:	f7db fa08 	bl	8000b40 <__aeabi_dcmpgt>
 8025730:	2800      	cmp	r0, #0
 8025732:	d0bf      	beq.n	80256b4 <floor+0x4c>
 8025734:	2c00      	cmp	r4, #0
 8025736:	da02      	bge.n	802573e <floor+0xd6>
 8025738:	2e14      	cmp	r6, #20
 802573a:	d103      	bne.n	8025744 <floor+0xdc>
 802573c:	3401      	adds	r4, #1
 802573e:	ea25 0507 	bic.w	r5, r5, r7
 8025742:	e7b7      	b.n	80256b4 <floor+0x4c>
 8025744:	2301      	movs	r3, #1
 8025746:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802574a:	fa03 f606 	lsl.w	r6, r3, r6
 802574e:	4435      	add	r5, r6
 8025750:	45a8      	cmp	r8, r5
 8025752:	bf88      	it	hi
 8025754:	18e4      	addhi	r4, r4, r3
 8025756:	e7f2      	b.n	802573e <floor+0xd6>
 8025758:	2500      	movs	r5, #0
 802575a:	462c      	mov	r4, r5
 802575c:	e7aa      	b.n	80256b4 <floor+0x4c>
 802575e:	bf00      	nop
 8025760:	8800759c 	.word	0x8800759c
 8025764:	7e37e43c 	.word	0x7e37e43c
 8025768:	bff00000 	.word	0xbff00000
 802576c:	000fffff 	.word	0x000fffff

08025770 <exp>:
 8025770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025772:	ed2d 8b02 	vpush	{d8}
 8025776:	4e38      	ldr	r6, [pc, #224]	; (8025858 <exp+0xe8>)
 8025778:	b08b      	sub	sp, #44	; 0x2c
 802577a:	ec55 4b10 	vmov	r4, r5, d0
 802577e:	f000 fb17 	bl	8025db0 <__ieee754_exp>
 8025782:	f996 3000 	ldrsb.w	r3, [r6]
 8025786:	eeb0 8a40 	vmov.f32	s16, s0
 802578a:	eef0 8a60 	vmov.f32	s17, s1
 802578e:	3301      	adds	r3, #1
 8025790:	d02c      	beq.n	80257ec <exp+0x7c>
 8025792:	ec45 4b10 	vmov	d0, r4, r5
 8025796:	f001 fc67 	bl	8027068 <finite>
 802579a:	b338      	cbz	r0, 80257ec <exp+0x7c>
 802579c:	a32a      	add	r3, pc, #168	; (adr r3, 8025848 <exp+0xd8>)
 802579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257a2:	4620      	mov	r0, r4
 80257a4:	4629      	mov	r1, r5
 80257a6:	f7db f9cb 	bl	8000b40 <__aeabi_dcmpgt>
 80257aa:	4607      	mov	r7, r0
 80257ac:	2800      	cmp	r0, #0
 80257ae:	d030      	beq.n	8025812 <exp+0xa2>
 80257b0:	2303      	movs	r3, #3
 80257b2:	9300      	str	r3, [sp, #0]
 80257b4:	4b29      	ldr	r3, [pc, #164]	; (802585c <exp+0xec>)
 80257b6:	9301      	str	r3, [sp, #4]
 80257b8:	2300      	movs	r3, #0
 80257ba:	9308      	str	r3, [sp, #32]
 80257bc:	f996 3000 	ldrsb.w	r3, [r6]
 80257c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80257c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80257c8:	b9c3      	cbnz	r3, 80257fc <exp+0x8c>
 80257ca:	4b25      	ldr	r3, [pc, #148]	; (8025860 <exp+0xf0>)
 80257cc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80257d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80257d4:	4668      	mov	r0, sp
 80257d6:	f001 fc4f 	bl	8027078 <matherr>
 80257da:	b1a8      	cbz	r0, 8025808 <exp+0x98>
 80257dc:	9b08      	ldr	r3, [sp, #32]
 80257de:	b11b      	cbz	r3, 80257e8 <exp+0x78>
 80257e0:	f7fc ff58 	bl	8022694 <__errno>
 80257e4:	9b08      	ldr	r3, [sp, #32]
 80257e6:	6003      	str	r3, [r0, #0]
 80257e8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80257ec:	eeb0 0a48 	vmov.f32	s0, s16
 80257f0:	eef0 0a68 	vmov.f32	s1, s17
 80257f4:	b00b      	add	sp, #44	; 0x2c
 80257f6:	ecbd 8b02 	vpop	{d8}
 80257fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80257fc:	4919      	ldr	r1, [pc, #100]	; (8025864 <exp+0xf4>)
 80257fe:	2000      	movs	r0, #0
 8025800:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025804:	2b02      	cmp	r3, #2
 8025806:	d1e5      	bne.n	80257d4 <exp+0x64>
 8025808:	f7fc ff44 	bl	8022694 <__errno>
 802580c:	2322      	movs	r3, #34	; 0x22
 802580e:	6003      	str	r3, [r0, #0]
 8025810:	e7e4      	b.n	80257dc <exp+0x6c>
 8025812:	a30f      	add	r3, pc, #60	; (adr r3, 8025850 <exp+0xe0>)
 8025814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025818:	4620      	mov	r0, r4
 802581a:	4629      	mov	r1, r5
 802581c:	f7db f972 	bl	8000b04 <__aeabi_dcmplt>
 8025820:	2800      	cmp	r0, #0
 8025822:	d0e3      	beq.n	80257ec <exp+0x7c>
 8025824:	2304      	movs	r3, #4
 8025826:	9300      	str	r3, [sp, #0]
 8025828:	4b0c      	ldr	r3, [pc, #48]	; (802585c <exp+0xec>)
 802582a:	9301      	str	r3, [sp, #4]
 802582c:	2200      	movs	r2, #0
 802582e:	2300      	movs	r3, #0
 8025830:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025834:	9708      	str	r7, [sp, #32]
 8025836:	e9cd 4504 	strd	r4, r5, [sp, #16]
 802583a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 802583e:	f996 3000 	ldrsb.w	r3, [r6]
 8025842:	e7df      	b.n	8025804 <exp+0x94>
 8025844:	f3af 8000 	nop.w
 8025848:	fefa39ef 	.word	0xfefa39ef
 802584c:	40862e42 	.word	0x40862e42
 8025850:	d52d3051 	.word	0xd52d3051
 8025854:	c0874910 	.word	0xc0874910
 8025858:	2000113c 	.word	0x2000113c
 802585c:	08034535 	.word	0x08034535
 8025860:	47efffff 	.word	0x47efffff
 8025864:	7ff00000 	.word	0x7ff00000

08025868 <log>:
 8025868:	b570      	push	{r4, r5, r6, lr}
 802586a:	ed2d 8b02 	vpush	{d8}
 802586e:	b08a      	sub	sp, #40	; 0x28
 8025870:	ec55 4b10 	vmov	r4, r5, d0
 8025874:	f000 fc10 	bl	8026098 <__ieee754_log>
 8025878:	4b36      	ldr	r3, [pc, #216]	; (8025954 <log+0xec>)
 802587a:	eeb0 8a40 	vmov.f32	s16, s0
 802587e:	eef0 8a60 	vmov.f32	s17, s1
 8025882:	f993 6000 	ldrsb.w	r6, [r3]
 8025886:	1c73      	adds	r3, r6, #1
 8025888:	d05b      	beq.n	8025942 <log+0xda>
 802588a:	4622      	mov	r2, r4
 802588c:	462b      	mov	r3, r5
 802588e:	4620      	mov	r0, r4
 8025890:	4629      	mov	r1, r5
 8025892:	f7db f95f 	bl	8000b54 <__aeabi_dcmpun>
 8025896:	2800      	cmp	r0, #0
 8025898:	d153      	bne.n	8025942 <log+0xda>
 802589a:	2200      	movs	r2, #0
 802589c:	2300      	movs	r3, #0
 802589e:	4620      	mov	r0, r4
 80258a0:	4629      	mov	r1, r5
 80258a2:	f7db f94d 	bl	8000b40 <__aeabi_dcmpgt>
 80258a6:	2800      	cmp	r0, #0
 80258a8:	d14b      	bne.n	8025942 <log+0xda>
 80258aa:	4b2b      	ldr	r3, [pc, #172]	; (8025958 <log+0xf0>)
 80258ac:	9301      	str	r3, [sp, #4]
 80258ae:	9008      	str	r0, [sp, #32]
 80258b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80258b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80258b8:	b9a6      	cbnz	r6, 80258e4 <log+0x7c>
 80258ba:	4b28      	ldr	r3, [pc, #160]	; (802595c <log+0xf4>)
 80258bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80258c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80258c4:	4620      	mov	r0, r4
 80258c6:	2200      	movs	r2, #0
 80258c8:	2300      	movs	r3, #0
 80258ca:	4629      	mov	r1, r5
 80258cc:	f7db f910 	bl	8000af0 <__aeabi_dcmpeq>
 80258d0:	bb40      	cbnz	r0, 8025924 <log+0xbc>
 80258d2:	2301      	movs	r3, #1
 80258d4:	2e02      	cmp	r6, #2
 80258d6:	9300      	str	r3, [sp, #0]
 80258d8:	d119      	bne.n	802590e <log+0xa6>
 80258da:	f7fc fedb 	bl	8022694 <__errno>
 80258de:	2321      	movs	r3, #33	; 0x21
 80258e0:	6003      	str	r3, [r0, #0]
 80258e2:	e019      	b.n	8025918 <log+0xb0>
 80258e4:	4b1e      	ldr	r3, [pc, #120]	; (8025960 <log+0xf8>)
 80258e6:	2200      	movs	r2, #0
 80258e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80258ec:	4620      	mov	r0, r4
 80258ee:	2200      	movs	r2, #0
 80258f0:	2300      	movs	r3, #0
 80258f2:	4629      	mov	r1, r5
 80258f4:	f7db f8fc 	bl	8000af0 <__aeabi_dcmpeq>
 80258f8:	2800      	cmp	r0, #0
 80258fa:	d0ea      	beq.n	80258d2 <log+0x6a>
 80258fc:	2302      	movs	r3, #2
 80258fe:	429e      	cmp	r6, r3
 8025900:	9300      	str	r3, [sp, #0]
 8025902:	d111      	bne.n	8025928 <log+0xc0>
 8025904:	f7fc fec6 	bl	8022694 <__errno>
 8025908:	2322      	movs	r3, #34	; 0x22
 802590a:	6003      	str	r3, [r0, #0]
 802590c:	e011      	b.n	8025932 <log+0xca>
 802590e:	4668      	mov	r0, sp
 8025910:	f001 fbb2 	bl	8027078 <matherr>
 8025914:	2800      	cmp	r0, #0
 8025916:	d0e0      	beq.n	80258da <log+0x72>
 8025918:	4812      	ldr	r0, [pc, #72]	; (8025964 <log+0xfc>)
 802591a:	f001 fbb1 	bl	8027080 <nan>
 802591e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8025922:	e006      	b.n	8025932 <log+0xca>
 8025924:	2302      	movs	r3, #2
 8025926:	9300      	str	r3, [sp, #0]
 8025928:	4668      	mov	r0, sp
 802592a:	f001 fba5 	bl	8027078 <matherr>
 802592e:	2800      	cmp	r0, #0
 8025930:	d0e8      	beq.n	8025904 <log+0x9c>
 8025932:	9b08      	ldr	r3, [sp, #32]
 8025934:	b11b      	cbz	r3, 802593e <log+0xd6>
 8025936:	f7fc fead 	bl	8022694 <__errno>
 802593a:	9b08      	ldr	r3, [sp, #32]
 802593c:	6003      	str	r3, [r0, #0]
 802593e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025942:	eeb0 0a48 	vmov.f32	s0, s16
 8025946:	eef0 0a68 	vmov.f32	s1, s17
 802594a:	b00a      	add	sp, #40	; 0x28
 802594c:	ecbd 8b02 	vpop	{d8}
 8025950:	bd70      	pop	{r4, r5, r6, pc}
 8025952:	bf00      	nop
 8025954:	2000113c 	.word	0x2000113c
 8025958:	08034539 	.word	0x08034539
 802595c:	c7efffff 	.word	0xc7efffff
 8025960:	fff00000 	.word	0xfff00000
 8025964:	080341d2 	.word	0x080341d2

08025968 <pow>:
 8025968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802596c:	ed2d 8b04 	vpush	{d8-d9}
 8025970:	b08d      	sub	sp, #52	; 0x34
 8025972:	ec57 6b10 	vmov	r6, r7, d0
 8025976:	ec55 4b11 	vmov	r4, r5, d1
 802597a:	f000 fd65 	bl	8026448 <__ieee754_pow>
 802597e:	4bae      	ldr	r3, [pc, #696]	; (8025c38 <pow+0x2d0>)
 8025980:	eeb0 8a40 	vmov.f32	s16, s0
 8025984:	eef0 8a60 	vmov.f32	s17, s1
 8025988:	f993 9000 	ldrsb.w	r9, [r3]
 802598c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8025990:	4698      	mov	r8, r3
 8025992:	d05f      	beq.n	8025a54 <pow+0xec>
 8025994:	4622      	mov	r2, r4
 8025996:	462b      	mov	r3, r5
 8025998:	4620      	mov	r0, r4
 802599a:	4629      	mov	r1, r5
 802599c:	f7db f8da 	bl	8000b54 <__aeabi_dcmpun>
 80259a0:	4683      	mov	fp, r0
 80259a2:	2800      	cmp	r0, #0
 80259a4:	d156      	bne.n	8025a54 <pow+0xec>
 80259a6:	4632      	mov	r2, r6
 80259a8:	463b      	mov	r3, r7
 80259aa:	4630      	mov	r0, r6
 80259ac:	4639      	mov	r1, r7
 80259ae:	f7db f8d1 	bl	8000b54 <__aeabi_dcmpun>
 80259b2:	9001      	str	r0, [sp, #4]
 80259b4:	b1e8      	cbz	r0, 80259f2 <pow+0x8a>
 80259b6:	2200      	movs	r2, #0
 80259b8:	2300      	movs	r3, #0
 80259ba:	4620      	mov	r0, r4
 80259bc:	4629      	mov	r1, r5
 80259be:	f7db f897 	bl	8000af0 <__aeabi_dcmpeq>
 80259c2:	2800      	cmp	r0, #0
 80259c4:	d046      	beq.n	8025a54 <pow+0xec>
 80259c6:	2301      	movs	r3, #1
 80259c8:	9302      	str	r3, [sp, #8]
 80259ca:	4b9c      	ldr	r3, [pc, #624]	; (8025c3c <pow+0x2d4>)
 80259cc:	9303      	str	r3, [sp, #12]
 80259ce:	4b9c      	ldr	r3, [pc, #624]	; (8025c40 <pow+0x2d8>)
 80259d0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80259d4:	2200      	movs	r2, #0
 80259d6:	f1b9 0f02 	cmp.w	r9, #2
 80259da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80259de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80259e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80259e6:	d033      	beq.n	8025a50 <pow+0xe8>
 80259e8:	a802      	add	r0, sp, #8
 80259ea:	f001 fb45 	bl	8027078 <matherr>
 80259ee:	bb48      	cbnz	r0, 8025a44 <pow+0xdc>
 80259f0:	e05e      	b.n	8025ab0 <pow+0x148>
 80259f2:	f04f 0a00 	mov.w	sl, #0
 80259f6:	f04f 0b00 	mov.w	fp, #0
 80259fa:	4652      	mov	r2, sl
 80259fc:	465b      	mov	r3, fp
 80259fe:	4630      	mov	r0, r6
 8025a00:	4639      	mov	r1, r7
 8025a02:	f7db f875 	bl	8000af0 <__aeabi_dcmpeq>
 8025a06:	ec4b ab19 	vmov	d9, sl, fp
 8025a0a:	2800      	cmp	r0, #0
 8025a0c:	d055      	beq.n	8025aba <pow+0x152>
 8025a0e:	4652      	mov	r2, sl
 8025a10:	465b      	mov	r3, fp
 8025a12:	4620      	mov	r0, r4
 8025a14:	4629      	mov	r1, r5
 8025a16:	f7db f86b 	bl	8000af0 <__aeabi_dcmpeq>
 8025a1a:	4680      	mov	r8, r0
 8025a1c:	b318      	cbz	r0, 8025a66 <pow+0xfe>
 8025a1e:	2301      	movs	r3, #1
 8025a20:	9302      	str	r3, [sp, #8]
 8025a22:	4b86      	ldr	r3, [pc, #536]	; (8025c3c <pow+0x2d4>)
 8025a24:	9303      	str	r3, [sp, #12]
 8025a26:	9b01      	ldr	r3, [sp, #4]
 8025a28:	930a      	str	r3, [sp, #40]	; 0x28
 8025a2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025a2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025a32:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8025a36:	f1b9 0f00 	cmp.w	r9, #0
 8025a3a:	d0d5      	beq.n	80259e8 <pow+0x80>
 8025a3c:	4b80      	ldr	r3, [pc, #512]	; (8025c40 <pow+0x2d8>)
 8025a3e:	2200      	movs	r2, #0
 8025a40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a46:	b11b      	cbz	r3, 8025a50 <pow+0xe8>
 8025a48:	f7fc fe24 	bl	8022694 <__errno>
 8025a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a4e:	6003      	str	r3, [r0, #0]
 8025a50:	ed9d 8b08 	vldr	d8, [sp, #32]
 8025a54:	eeb0 0a48 	vmov.f32	s0, s16
 8025a58:	eef0 0a68 	vmov.f32	s1, s17
 8025a5c:	b00d      	add	sp, #52	; 0x34
 8025a5e:	ecbd 8b04 	vpop	{d8-d9}
 8025a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a66:	ec45 4b10 	vmov	d0, r4, r5
 8025a6a:	f001 fafd 	bl	8027068 <finite>
 8025a6e:	2800      	cmp	r0, #0
 8025a70:	d0f0      	beq.n	8025a54 <pow+0xec>
 8025a72:	4652      	mov	r2, sl
 8025a74:	465b      	mov	r3, fp
 8025a76:	4620      	mov	r0, r4
 8025a78:	4629      	mov	r1, r5
 8025a7a:	f7db f843 	bl	8000b04 <__aeabi_dcmplt>
 8025a7e:	2800      	cmp	r0, #0
 8025a80:	d0e8      	beq.n	8025a54 <pow+0xec>
 8025a82:	2301      	movs	r3, #1
 8025a84:	9302      	str	r3, [sp, #8]
 8025a86:	4b6d      	ldr	r3, [pc, #436]	; (8025c3c <pow+0x2d4>)
 8025a88:	9303      	str	r3, [sp, #12]
 8025a8a:	4b6b      	ldr	r3, [pc, #428]	; (8025c38 <pow+0x2d0>)
 8025a8c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8025a90:	f993 3000 	ldrsb.w	r3, [r3]
 8025a94:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025a98:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025a9c:	b913      	cbnz	r3, 8025aa4 <pow+0x13c>
 8025a9e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8025aa2:	e7a1      	b.n	80259e8 <pow+0x80>
 8025aa4:	4967      	ldr	r1, [pc, #412]	; (8025c44 <pow+0x2dc>)
 8025aa6:	2000      	movs	r0, #0
 8025aa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025aac:	2b02      	cmp	r3, #2
 8025aae:	d19b      	bne.n	80259e8 <pow+0x80>
 8025ab0:	f7fc fdf0 	bl	8022694 <__errno>
 8025ab4:	2321      	movs	r3, #33	; 0x21
 8025ab6:	6003      	str	r3, [r0, #0]
 8025ab8:	e7c4      	b.n	8025a44 <pow+0xdc>
 8025aba:	eeb0 0a48 	vmov.f32	s0, s16
 8025abe:	eef0 0a68 	vmov.f32	s1, s17
 8025ac2:	f001 fad1 	bl	8027068 <finite>
 8025ac6:	9001      	str	r0, [sp, #4]
 8025ac8:	2800      	cmp	r0, #0
 8025aca:	f040 808a 	bne.w	8025be2 <pow+0x27a>
 8025ace:	ec47 6b10 	vmov	d0, r6, r7
 8025ad2:	f001 fac9 	bl	8027068 <finite>
 8025ad6:	2800      	cmp	r0, #0
 8025ad8:	f000 8083 	beq.w	8025be2 <pow+0x27a>
 8025adc:	ec45 4b10 	vmov	d0, r4, r5
 8025ae0:	f001 fac2 	bl	8027068 <finite>
 8025ae4:	2800      	cmp	r0, #0
 8025ae6:	d07c      	beq.n	8025be2 <pow+0x27a>
 8025ae8:	ec53 2b18 	vmov	r2, r3, d8
 8025aec:	ee18 0a10 	vmov	r0, s16
 8025af0:	4619      	mov	r1, r3
 8025af2:	f7db f82f 	bl	8000b54 <__aeabi_dcmpun>
 8025af6:	f998 9000 	ldrsb.w	r9, [r8]
 8025afa:	4b50      	ldr	r3, [pc, #320]	; (8025c3c <pow+0x2d4>)
 8025afc:	b1b0      	cbz	r0, 8025b2c <pow+0x1c4>
 8025afe:	2201      	movs	r2, #1
 8025b00:	9303      	str	r3, [sp, #12]
 8025b02:	9b01      	ldr	r3, [sp, #4]
 8025b04:	9202      	str	r2, [sp, #8]
 8025b06:	930a      	str	r3, [sp, #40]	; 0x28
 8025b08:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025b0c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025b10:	f1b9 0f00 	cmp.w	r9, #0
 8025b14:	d0c3      	beq.n	8025a9e <pow+0x136>
 8025b16:	4652      	mov	r2, sl
 8025b18:	465b      	mov	r3, fp
 8025b1a:	4650      	mov	r0, sl
 8025b1c:	4659      	mov	r1, fp
 8025b1e:	f7da fea9 	bl	8000874 <__aeabi_ddiv>
 8025b22:	f1b9 0f02 	cmp.w	r9, #2
 8025b26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025b2a:	e7c0      	b.n	8025aae <pow+0x146>
 8025b2c:	2203      	movs	r2, #3
 8025b2e:	9202      	str	r2, [sp, #8]
 8025b30:	9303      	str	r3, [sp, #12]
 8025b32:	900a      	str	r0, [sp, #40]	; 0x28
 8025b34:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025b38:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025b3c:	f1b9 0f00 	cmp.w	r9, #0
 8025b40:	d12c      	bne.n	8025b9c <pow+0x234>
 8025b42:	4b41      	ldr	r3, [pc, #260]	; (8025c48 <pow+0x2e0>)
 8025b44:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8025b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025b4c:	4630      	mov	r0, r6
 8025b4e:	4652      	mov	r2, sl
 8025b50:	465b      	mov	r3, fp
 8025b52:	4639      	mov	r1, r7
 8025b54:	f7da ffd6 	bl	8000b04 <__aeabi_dcmplt>
 8025b58:	2800      	cmp	r0, #0
 8025b5a:	d066      	beq.n	8025c2a <pow+0x2c2>
 8025b5c:	2200      	movs	r2, #0
 8025b5e:	4b3b      	ldr	r3, [pc, #236]	; (8025c4c <pow+0x2e4>)
 8025b60:	4620      	mov	r0, r4
 8025b62:	4629      	mov	r1, r5
 8025b64:	f7da fd5c 	bl	8000620 <__aeabi_dmul>
 8025b68:	4604      	mov	r4, r0
 8025b6a:	460d      	mov	r5, r1
 8025b6c:	ec45 4b10 	vmov	d0, r4, r5
 8025b70:	f001 fa8e 	bl	8027090 <rint>
 8025b74:	4620      	mov	r0, r4
 8025b76:	ec53 2b10 	vmov	r2, r3, d0
 8025b7a:	4629      	mov	r1, r5
 8025b7c:	f7da ffb8 	bl	8000af0 <__aeabi_dcmpeq>
 8025b80:	b920      	cbnz	r0, 8025b8c <pow+0x224>
 8025b82:	4b33      	ldr	r3, [pc, #204]	; (8025c50 <pow+0x2e8>)
 8025b84:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8025b88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025b8c:	f998 3000 	ldrsb.w	r3, [r8]
 8025b90:	2b02      	cmp	r3, #2
 8025b92:	d14a      	bne.n	8025c2a <pow+0x2c2>
 8025b94:	f7fc fd7e 	bl	8022694 <__errno>
 8025b98:	2322      	movs	r3, #34	; 0x22
 8025b9a:	e78c      	b.n	8025ab6 <pow+0x14e>
 8025b9c:	4b2d      	ldr	r3, [pc, #180]	; (8025c54 <pow+0x2ec>)
 8025b9e:	2200      	movs	r2, #0
 8025ba0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025ba4:	4630      	mov	r0, r6
 8025ba6:	4652      	mov	r2, sl
 8025ba8:	465b      	mov	r3, fp
 8025baa:	4639      	mov	r1, r7
 8025bac:	f7da ffaa 	bl	8000b04 <__aeabi_dcmplt>
 8025bb0:	2800      	cmp	r0, #0
 8025bb2:	d0eb      	beq.n	8025b8c <pow+0x224>
 8025bb4:	2200      	movs	r2, #0
 8025bb6:	4b25      	ldr	r3, [pc, #148]	; (8025c4c <pow+0x2e4>)
 8025bb8:	4620      	mov	r0, r4
 8025bba:	4629      	mov	r1, r5
 8025bbc:	f7da fd30 	bl	8000620 <__aeabi_dmul>
 8025bc0:	4604      	mov	r4, r0
 8025bc2:	460d      	mov	r5, r1
 8025bc4:	ec45 4b10 	vmov	d0, r4, r5
 8025bc8:	f001 fa62 	bl	8027090 <rint>
 8025bcc:	4620      	mov	r0, r4
 8025bce:	ec53 2b10 	vmov	r2, r3, d0
 8025bd2:	4629      	mov	r1, r5
 8025bd4:	f7da ff8c 	bl	8000af0 <__aeabi_dcmpeq>
 8025bd8:	2800      	cmp	r0, #0
 8025bda:	d1d7      	bne.n	8025b8c <pow+0x224>
 8025bdc:	2200      	movs	r2, #0
 8025bde:	4b19      	ldr	r3, [pc, #100]	; (8025c44 <pow+0x2dc>)
 8025be0:	e7d2      	b.n	8025b88 <pow+0x220>
 8025be2:	2200      	movs	r2, #0
 8025be4:	2300      	movs	r3, #0
 8025be6:	ec51 0b18 	vmov	r0, r1, d8
 8025bea:	f7da ff81 	bl	8000af0 <__aeabi_dcmpeq>
 8025bee:	2800      	cmp	r0, #0
 8025bf0:	f43f af30 	beq.w	8025a54 <pow+0xec>
 8025bf4:	ec47 6b10 	vmov	d0, r6, r7
 8025bf8:	f001 fa36 	bl	8027068 <finite>
 8025bfc:	2800      	cmp	r0, #0
 8025bfe:	f43f af29 	beq.w	8025a54 <pow+0xec>
 8025c02:	ec45 4b10 	vmov	d0, r4, r5
 8025c06:	f001 fa2f 	bl	8027068 <finite>
 8025c0a:	2800      	cmp	r0, #0
 8025c0c:	f43f af22 	beq.w	8025a54 <pow+0xec>
 8025c10:	2304      	movs	r3, #4
 8025c12:	9302      	str	r3, [sp, #8]
 8025c14:	4b09      	ldr	r3, [pc, #36]	; (8025c3c <pow+0x2d4>)
 8025c16:	9303      	str	r3, [sp, #12]
 8025c18:	2300      	movs	r3, #0
 8025c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8025c1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025c20:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025c24:	ed8d 9b08 	vstr	d9, [sp, #32]
 8025c28:	e7b0      	b.n	8025b8c <pow+0x224>
 8025c2a:	a802      	add	r0, sp, #8
 8025c2c:	f001 fa24 	bl	8027078 <matherr>
 8025c30:	2800      	cmp	r0, #0
 8025c32:	f47f af07 	bne.w	8025a44 <pow+0xdc>
 8025c36:	e7ad      	b.n	8025b94 <pow+0x22c>
 8025c38:	2000113c 	.word	0x2000113c
 8025c3c:	0803453d 	.word	0x0803453d
 8025c40:	3ff00000 	.word	0x3ff00000
 8025c44:	fff00000 	.word	0xfff00000
 8025c48:	47efffff 	.word	0x47efffff
 8025c4c:	3fe00000 	.word	0x3fe00000
 8025c50:	c7efffff 	.word	0xc7efffff
 8025c54:	7ff00000 	.word	0x7ff00000

08025c58 <sqrt>:
 8025c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025c5c:	ed2d 8b02 	vpush	{d8}
 8025c60:	b08b      	sub	sp, #44	; 0x2c
 8025c62:	ec55 4b10 	vmov	r4, r5, d0
 8025c66:	f001 f901 	bl	8026e6c <__ieee754_sqrt>
 8025c6a:	4b26      	ldr	r3, [pc, #152]	; (8025d04 <sqrt+0xac>)
 8025c6c:	eeb0 8a40 	vmov.f32	s16, s0
 8025c70:	eef0 8a60 	vmov.f32	s17, s1
 8025c74:	f993 6000 	ldrsb.w	r6, [r3]
 8025c78:	1c73      	adds	r3, r6, #1
 8025c7a:	d02a      	beq.n	8025cd2 <sqrt+0x7a>
 8025c7c:	4622      	mov	r2, r4
 8025c7e:	462b      	mov	r3, r5
 8025c80:	4620      	mov	r0, r4
 8025c82:	4629      	mov	r1, r5
 8025c84:	f7da ff66 	bl	8000b54 <__aeabi_dcmpun>
 8025c88:	4607      	mov	r7, r0
 8025c8a:	bb10      	cbnz	r0, 8025cd2 <sqrt+0x7a>
 8025c8c:	f04f 0800 	mov.w	r8, #0
 8025c90:	f04f 0900 	mov.w	r9, #0
 8025c94:	4642      	mov	r2, r8
 8025c96:	464b      	mov	r3, r9
 8025c98:	4620      	mov	r0, r4
 8025c9a:	4629      	mov	r1, r5
 8025c9c:	f7da ff32 	bl	8000b04 <__aeabi_dcmplt>
 8025ca0:	b1b8      	cbz	r0, 8025cd2 <sqrt+0x7a>
 8025ca2:	2301      	movs	r3, #1
 8025ca4:	9300      	str	r3, [sp, #0]
 8025ca6:	4b18      	ldr	r3, [pc, #96]	; (8025d08 <sqrt+0xb0>)
 8025ca8:	9301      	str	r3, [sp, #4]
 8025caa:	9708      	str	r7, [sp, #32]
 8025cac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8025cb0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8025cb4:	b9b6      	cbnz	r6, 8025ce4 <sqrt+0x8c>
 8025cb6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8025cba:	4668      	mov	r0, sp
 8025cbc:	f001 f9dc 	bl	8027078 <matherr>
 8025cc0:	b1d0      	cbz	r0, 8025cf8 <sqrt+0xa0>
 8025cc2:	9b08      	ldr	r3, [sp, #32]
 8025cc4:	b11b      	cbz	r3, 8025cce <sqrt+0x76>
 8025cc6:	f7fc fce5 	bl	8022694 <__errno>
 8025cca:	9b08      	ldr	r3, [sp, #32]
 8025ccc:	6003      	str	r3, [r0, #0]
 8025cce:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025cd2:	eeb0 0a48 	vmov.f32	s0, s16
 8025cd6:	eef0 0a68 	vmov.f32	s1, s17
 8025cda:	b00b      	add	sp, #44	; 0x2c
 8025cdc:	ecbd 8b02 	vpop	{d8}
 8025ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025ce4:	4642      	mov	r2, r8
 8025ce6:	464b      	mov	r3, r9
 8025ce8:	4640      	mov	r0, r8
 8025cea:	4649      	mov	r1, r9
 8025cec:	f7da fdc2 	bl	8000874 <__aeabi_ddiv>
 8025cf0:	2e02      	cmp	r6, #2
 8025cf2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025cf6:	d1e0      	bne.n	8025cba <sqrt+0x62>
 8025cf8:	f7fc fccc 	bl	8022694 <__errno>
 8025cfc:	2321      	movs	r3, #33	; 0x21
 8025cfe:	6003      	str	r3, [r0, #0]
 8025d00:	e7df      	b.n	8025cc2 <sqrt+0x6a>
 8025d02:	bf00      	nop
 8025d04:	2000113c 	.word	0x2000113c
 8025d08:	08034541 	.word	0x08034541

08025d0c <sqrtf>:
 8025d0c:	b510      	push	{r4, lr}
 8025d0e:	ed2d 8b02 	vpush	{d8}
 8025d12:	b08a      	sub	sp, #40	; 0x28
 8025d14:	eeb0 8a40 	vmov.f32	s16, s0
 8025d18:	f001 f958 	bl	8026fcc <__ieee754_sqrtf>
 8025d1c:	4b21      	ldr	r3, [pc, #132]	; (8025da4 <sqrtf+0x98>)
 8025d1e:	f993 4000 	ldrsb.w	r4, [r3]
 8025d22:	1c63      	adds	r3, r4, #1
 8025d24:	d02c      	beq.n	8025d80 <sqrtf+0x74>
 8025d26:	eeb4 8a48 	vcmp.f32	s16, s16
 8025d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d2e:	d627      	bvs.n	8025d80 <sqrtf+0x74>
 8025d30:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8025d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d38:	d522      	bpl.n	8025d80 <sqrtf+0x74>
 8025d3a:	2301      	movs	r3, #1
 8025d3c:	9300      	str	r3, [sp, #0]
 8025d3e:	4b1a      	ldr	r3, [pc, #104]	; (8025da8 <sqrtf+0x9c>)
 8025d40:	9301      	str	r3, [sp, #4]
 8025d42:	ee18 0a10 	vmov	r0, s16
 8025d46:	2300      	movs	r3, #0
 8025d48:	9308      	str	r3, [sp, #32]
 8025d4a:	f7da fc15 	bl	8000578 <__aeabi_f2d>
 8025d4e:	2200      	movs	r2, #0
 8025d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025d58:	2300      	movs	r3, #0
 8025d5a:	b9ac      	cbnz	r4, 8025d88 <sqrtf+0x7c>
 8025d5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025d60:	4668      	mov	r0, sp
 8025d62:	f001 f989 	bl	8027078 <matherr>
 8025d66:	b1b8      	cbz	r0, 8025d98 <sqrtf+0x8c>
 8025d68:	9b08      	ldr	r3, [sp, #32]
 8025d6a:	b11b      	cbz	r3, 8025d74 <sqrtf+0x68>
 8025d6c:	f7fc fc92 	bl	8022694 <__errno>
 8025d70:	9b08      	ldr	r3, [sp, #32]
 8025d72:	6003      	str	r3, [r0, #0]
 8025d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025d78:	f7da ff4a 	bl	8000c10 <__aeabi_d2f>
 8025d7c:	ee00 0a10 	vmov	s0, r0
 8025d80:	b00a      	add	sp, #40	; 0x28
 8025d82:	ecbd 8b02 	vpop	{d8}
 8025d86:	bd10      	pop	{r4, pc}
 8025d88:	4610      	mov	r0, r2
 8025d8a:	4619      	mov	r1, r3
 8025d8c:	f7da fd72 	bl	8000874 <__aeabi_ddiv>
 8025d90:	2c02      	cmp	r4, #2
 8025d92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025d96:	d1e3      	bne.n	8025d60 <sqrtf+0x54>
 8025d98:	f7fc fc7c 	bl	8022694 <__errno>
 8025d9c:	2321      	movs	r3, #33	; 0x21
 8025d9e:	6003      	str	r3, [r0, #0]
 8025da0:	e7e2      	b.n	8025d68 <sqrtf+0x5c>
 8025da2:	bf00      	nop
 8025da4:	2000113c 	.word	0x2000113c
 8025da8:	08034546 	.word	0x08034546
 8025dac:	00000000 	.word	0x00000000

08025db0 <__ieee754_exp>:
 8025db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025db4:	ec55 4b10 	vmov	r4, r5, d0
 8025db8:	4aad      	ldr	r2, [pc, #692]	; (8026070 <__ieee754_exp+0x2c0>)
 8025dba:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8025dbe:	4297      	cmp	r7, r2
 8025dc0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8025dc4:	f240 80af 	bls.w	8025f26 <__ieee754_exp+0x176>
 8025dc8:	4aaa      	ldr	r2, [pc, #680]	; (8026074 <__ieee754_exp+0x2c4>)
 8025dca:	4297      	cmp	r7, r2
 8025dcc:	d915      	bls.n	8025dfa <__ieee754_exp+0x4a>
 8025dce:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8025dd2:	4323      	orrs	r3, r4
 8025dd4:	d009      	beq.n	8025dea <__ieee754_exp+0x3a>
 8025dd6:	ee10 2a10 	vmov	r2, s0
 8025dda:	462b      	mov	r3, r5
 8025ddc:	4620      	mov	r0, r4
 8025dde:	4629      	mov	r1, r5
 8025de0:	f7da fa6c 	bl	80002bc <__adddf3>
 8025de4:	4604      	mov	r4, r0
 8025de6:	460d      	mov	r5, r1
 8025de8:	e002      	b.n	8025df0 <__ieee754_exp+0x40>
 8025dea:	b10e      	cbz	r6, 8025df0 <__ieee754_exp+0x40>
 8025dec:	2400      	movs	r4, #0
 8025dee:	2500      	movs	r5, #0
 8025df0:	ec45 4b10 	vmov	d0, r4, r5
 8025df4:	b003      	add	sp, #12
 8025df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025dfa:	a387      	add	r3, pc, #540	; (adr r3, 8026018 <__ieee754_exp+0x268>)
 8025dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e00:	ee10 0a10 	vmov	r0, s0
 8025e04:	4629      	mov	r1, r5
 8025e06:	f7da fe9b 	bl	8000b40 <__aeabi_dcmpgt>
 8025e0a:	b138      	cbz	r0, 8025e1c <__ieee754_exp+0x6c>
 8025e0c:	a384      	add	r3, pc, #528	; (adr r3, 8026020 <__ieee754_exp+0x270>)
 8025e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e12:	4610      	mov	r0, r2
 8025e14:	4619      	mov	r1, r3
 8025e16:	f7da fc03 	bl	8000620 <__aeabi_dmul>
 8025e1a:	e7e3      	b.n	8025de4 <__ieee754_exp+0x34>
 8025e1c:	a382      	add	r3, pc, #520	; (adr r3, 8026028 <__ieee754_exp+0x278>)
 8025e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e22:	4620      	mov	r0, r4
 8025e24:	4629      	mov	r1, r5
 8025e26:	f7da fe6d 	bl	8000b04 <__aeabi_dcmplt>
 8025e2a:	2800      	cmp	r0, #0
 8025e2c:	d1de      	bne.n	8025dec <__ieee754_exp+0x3c>
 8025e2e:	4b92      	ldr	r3, [pc, #584]	; (8026078 <__ieee754_exp+0x2c8>)
 8025e30:	429f      	cmp	r7, r3
 8025e32:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 8025e36:	f200 808e 	bhi.w	8025f56 <__ieee754_exp+0x1a6>
 8025e3a:	4b90      	ldr	r3, [pc, #576]	; (802607c <__ieee754_exp+0x2cc>)
 8025e3c:	443b      	add	r3, r7
 8025e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e42:	4620      	mov	r0, r4
 8025e44:	4629      	mov	r1, r5
 8025e46:	f7da fa37 	bl	80002b8 <__aeabi_dsub>
 8025e4a:	4b8d      	ldr	r3, [pc, #564]	; (8026080 <__ieee754_exp+0x2d0>)
 8025e4c:	441f      	add	r7, r3
 8025e4e:	ed97 7b00 	vldr	d7, [r7]
 8025e52:	ed8d 7b00 	vstr	d7, [sp]
 8025e56:	4682      	mov	sl, r0
 8025e58:	f1c6 0001 	rsb	r0, r6, #1
 8025e5c:	468b      	mov	fp, r1
 8025e5e:	1b86      	subs	r6, r0, r6
 8025e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025e64:	4650      	mov	r0, sl
 8025e66:	4659      	mov	r1, fp
 8025e68:	f7da fa26 	bl	80002b8 <__aeabi_dsub>
 8025e6c:	4604      	mov	r4, r0
 8025e6e:	460d      	mov	r5, r1
 8025e70:	4622      	mov	r2, r4
 8025e72:	462b      	mov	r3, r5
 8025e74:	4620      	mov	r0, r4
 8025e76:	4629      	mov	r1, r5
 8025e78:	f7da fbd2 	bl	8000620 <__aeabi_dmul>
 8025e7c:	a36c      	add	r3, pc, #432	; (adr r3, 8026030 <__ieee754_exp+0x280>)
 8025e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e82:	4680      	mov	r8, r0
 8025e84:	4689      	mov	r9, r1
 8025e86:	f7da fbcb 	bl	8000620 <__aeabi_dmul>
 8025e8a:	a36b      	add	r3, pc, #428	; (adr r3, 8026038 <__ieee754_exp+0x288>)
 8025e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e90:	f7da fa12 	bl	80002b8 <__aeabi_dsub>
 8025e94:	4642      	mov	r2, r8
 8025e96:	464b      	mov	r3, r9
 8025e98:	f7da fbc2 	bl	8000620 <__aeabi_dmul>
 8025e9c:	a368      	add	r3, pc, #416	; (adr r3, 8026040 <__ieee754_exp+0x290>)
 8025e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ea2:	f7da fa0b 	bl	80002bc <__adddf3>
 8025ea6:	4642      	mov	r2, r8
 8025ea8:	464b      	mov	r3, r9
 8025eaa:	f7da fbb9 	bl	8000620 <__aeabi_dmul>
 8025eae:	a366      	add	r3, pc, #408	; (adr r3, 8026048 <__ieee754_exp+0x298>)
 8025eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025eb4:	f7da fa00 	bl	80002b8 <__aeabi_dsub>
 8025eb8:	4642      	mov	r2, r8
 8025eba:	464b      	mov	r3, r9
 8025ebc:	f7da fbb0 	bl	8000620 <__aeabi_dmul>
 8025ec0:	a363      	add	r3, pc, #396	; (adr r3, 8026050 <__ieee754_exp+0x2a0>)
 8025ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ec6:	f7da f9f9 	bl	80002bc <__adddf3>
 8025eca:	4642      	mov	r2, r8
 8025ecc:	464b      	mov	r3, r9
 8025ece:	f7da fba7 	bl	8000620 <__aeabi_dmul>
 8025ed2:	4602      	mov	r2, r0
 8025ed4:	460b      	mov	r3, r1
 8025ed6:	4620      	mov	r0, r4
 8025ed8:	4629      	mov	r1, r5
 8025eda:	f7da f9ed 	bl	80002b8 <__aeabi_dsub>
 8025ede:	4680      	mov	r8, r0
 8025ee0:	4689      	mov	r9, r1
 8025ee2:	4602      	mov	r2, r0
 8025ee4:	460b      	mov	r3, r1
 8025ee6:	4620      	mov	r0, r4
 8025ee8:	4629      	mov	r1, r5
 8025eea:	2e00      	cmp	r6, #0
 8025eec:	d162      	bne.n	8025fb4 <__ieee754_exp+0x204>
 8025eee:	f7da fb97 	bl	8000620 <__aeabi_dmul>
 8025ef2:	2200      	movs	r2, #0
 8025ef4:	4606      	mov	r6, r0
 8025ef6:	460f      	mov	r7, r1
 8025ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8025efc:	4640      	mov	r0, r8
 8025efe:	4649      	mov	r1, r9
 8025f00:	f7da f9da 	bl	80002b8 <__aeabi_dsub>
 8025f04:	4602      	mov	r2, r0
 8025f06:	460b      	mov	r3, r1
 8025f08:	4630      	mov	r0, r6
 8025f0a:	4639      	mov	r1, r7
 8025f0c:	f7da fcb2 	bl	8000874 <__aeabi_ddiv>
 8025f10:	4622      	mov	r2, r4
 8025f12:	462b      	mov	r3, r5
 8025f14:	f7da f9d0 	bl	80002b8 <__aeabi_dsub>
 8025f18:	4602      	mov	r2, r0
 8025f1a:	460b      	mov	r3, r1
 8025f1c:	2000      	movs	r0, #0
 8025f1e:	4959      	ldr	r1, [pc, #356]	; (8026084 <__ieee754_exp+0x2d4>)
 8025f20:	f7da f9ca 	bl	80002b8 <__aeabi_dsub>
 8025f24:	e75e      	b.n	8025de4 <__ieee754_exp+0x34>
 8025f26:	4b58      	ldr	r3, [pc, #352]	; (8026088 <__ieee754_exp+0x2d8>)
 8025f28:	429f      	cmp	r7, r3
 8025f2a:	d880      	bhi.n	8025e2e <__ieee754_exp+0x7e>
 8025f2c:	4b57      	ldr	r3, [pc, #348]	; (802608c <__ieee754_exp+0x2dc>)
 8025f2e:	429f      	cmp	r7, r3
 8025f30:	d83c      	bhi.n	8025fac <__ieee754_exp+0x1fc>
 8025f32:	a33b      	add	r3, pc, #236	; (adr r3, 8026020 <__ieee754_exp+0x270>)
 8025f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f38:	ee10 0a10 	vmov	r0, s0
 8025f3c:	4629      	mov	r1, r5
 8025f3e:	f7da f9bd 	bl	80002bc <__adddf3>
 8025f42:	2200      	movs	r2, #0
 8025f44:	4b4f      	ldr	r3, [pc, #316]	; (8026084 <__ieee754_exp+0x2d4>)
 8025f46:	f7da fdfb 	bl	8000b40 <__aeabi_dcmpgt>
 8025f4a:	b388      	cbz	r0, 8025fb0 <__ieee754_exp+0x200>
 8025f4c:	2200      	movs	r2, #0
 8025f4e:	4b4d      	ldr	r3, [pc, #308]	; (8026084 <__ieee754_exp+0x2d4>)
 8025f50:	4620      	mov	r0, r4
 8025f52:	4629      	mov	r1, r5
 8025f54:	e744      	b.n	8025de0 <__ieee754_exp+0x30>
 8025f56:	4e4e      	ldr	r6, [pc, #312]	; (8026090 <__ieee754_exp+0x2e0>)
 8025f58:	a33f      	add	r3, pc, #252	; (adr r3, 8026058 <__ieee754_exp+0x2a8>)
 8025f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f5e:	443e      	add	r6, r7
 8025f60:	4620      	mov	r0, r4
 8025f62:	4629      	mov	r1, r5
 8025f64:	f7da fb5c 	bl	8000620 <__aeabi_dmul>
 8025f68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8025f6c:	f7da f9a6 	bl	80002bc <__adddf3>
 8025f70:	f7da fe06 	bl	8000b80 <__aeabi_d2iz>
 8025f74:	4606      	mov	r6, r0
 8025f76:	f7da faed 	bl	8000554 <__aeabi_i2d>
 8025f7a:	a339      	add	r3, pc, #228	; (adr r3, 8026060 <__ieee754_exp+0x2b0>)
 8025f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f80:	4680      	mov	r8, r0
 8025f82:	4689      	mov	r9, r1
 8025f84:	f7da fb4c 	bl	8000620 <__aeabi_dmul>
 8025f88:	4602      	mov	r2, r0
 8025f8a:	460b      	mov	r3, r1
 8025f8c:	4620      	mov	r0, r4
 8025f8e:	4629      	mov	r1, r5
 8025f90:	f7da f992 	bl	80002b8 <__aeabi_dsub>
 8025f94:	a334      	add	r3, pc, #208	; (adr r3, 8026068 <__ieee754_exp+0x2b8>)
 8025f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f9a:	4682      	mov	sl, r0
 8025f9c:	468b      	mov	fp, r1
 8025f9e:	4640      	mov	r0, r8
 8025fa0:	4649      	mov	r1, r9
 8025fa2:	f7da fb3d 	bl	8000620 <__aeabi_dmul>
 8025fa6:	e9cd 0100 	strd	r0, r1, [sp]
 8025faa:	e759      	b.n	8025e60 <__ieee754_exp+0xb0>
 8025fac:	2600      	movs	r6, #0
 8025fae:	e75f      	b.n	8025e70 <__ieee754_exp+0xc0>
 8025fb0:	4606      	mov	r6, r0
 8025fb2:	e75d      	b.n	8025e70 <__ieee754_exp+0xc0>
 8025fb4:	f7da fb34 	bl	8000620 <__aeabi_dmul>
 8025fb8:	4642      	mov	r2, r8
 8025fba:	4604      	mov	r4, r0
 8025fbc:	460d      	mov	r5, r1
 8025fbe:	464b      	mov	r3, r9
 8025fc0:	2000      	movs	r0, #0
 8025fc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8025fc6:	f7da f977 	bl	80002b8 <__aeabi_dsub>
 8025fca:	4602      	mov	r2, r0
 8025fcc:	460b      	mov	r3, r1
 8025fce:	4620      	mov	r0, r4
 8025fd0:	4629      	mov	r1, r5
 8025fd2:	f7da fc4f 	bl	8000874 <__aeabi_ddiv>
 8025fd6:	4602      	mov	r2, r0
 8025fd8:	460b      	mov	r3, r1
 8025fda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025fde:	f7da f96b 	bl	80002b8 <__aeabi_dsub>
 8025fe2:	4652      	mov	r2, sl
 8025fe4:	465b      	mov	r3, fp
 8025fe6:	f7da f967 	bl	80002b8 <__aeabi_dsub>
 8025fea:	460b      	mov	r3, r1
 8025fec:	4602      	mov	r2, r0
 8025fee:	4925      	ldr	r1, [pc, #148]	; (8026084 <__ieee754_exp+0x2d4>)
 8025ff0:	2000      	movs	r0, #0
 8025ff2:	f7da f961 	bl	80002b8 <__aeabi_dsub>
 8025ff6:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8025ffa:	429e      	cmp	r6, r3
 8025ffc:	db02      	blt.n	8026004 <__ieee754_exp+0x254>
 8025ffe:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8026002:	e6ef      	b.n	8025de4 <__ieee754_exp+0x34>
 8026004:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8026008:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 802600c:	2200      	movs	r2, #0
 802600e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8026012:	e700      	b.n	8025e16 <__ieee754_exp+0x66>
 8026014:	f3af 8000 	nop.w
 8026018:	fefa39ef 	.word	0xfefa39ef
 802601c:	40862e42 	.word	0x40862e42
 8026020:	8800759c 	.word	0x8800759c
 8026024:	7e37e43c 	.word	0x7e37e43c
 8026028:	d52d3051 	.word	0xd52d3051
 802602c:	c0874910 	.word	0xc0874910
 8026030:	72bea4d0 	.word	0x72bea4d0
 8026034:	3e663769 	.word	0x3e663769
 8026038:	c5d26bf1 	.word	0xc5d26bf1
 802603c:	3ebbbd41 	.word	0x3ebbbd41
 8026040:	af25de2c 	.word	0xaf25de2c
 8026044:	3f11566a 	.word	0x3f11566a
 8026048:	16bebd93 	.word	0x16bebd93
 802604c:	3f66c16c 	.word	0x3f66c16c
 8026050:	5555553e 	.word	0x5555553e
 8026054:	3fc55555 	.word	0x3fc55555
 8026058:	652b82fe 	.word	0x652b82fe
 802605c:	3ff71547 	.word	0x3ff71547
 8026060:	fee00000 	.word	0xfee00000
 8026064:	3fe62e42 	.word	0x3fe62e42
 8026068:	35793c76 	.word	0x35793c76
 802606c:	3dea39ef 	.word	0x3dea39ef
 8026070:	40862e41 	.word	0x40862e41
 8026074:	7fefffff 	.word	0x7fefffff
 8026078:	3ff0a2b1 	.word	0x3ff0a2b1
 802607c:	08034560 	.word	0x08034560
 8026080:	08034570 	.word	0x08034570
 8026084:	3ff00000 	.word	0x3ff00000
 8026088:	3fd62e42 	.word	0x3fd62e42
 802608c:	3e2fffff 	.word	0x3e2fffff
 8026090:	08034550 	.word	0x08034550
 8026094:	00000000 	.word	0x00000000

08026098 <__ieee754_log>:
 8026098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802609c:	ec51 0b10 	vmov	r0, r1, d0
 80260a0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80260a4:	b087      	sub	sp, #28
 80260a6:	ee10 3a10 	vmov	r3, s0
 80260aa:	460d      	mov	r5, r1
 80260ac:	da27      	bge.n	80260fe <__ieee754_log+0x66>
 80260ae:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80260b2:	4313      	orrs	r3, r2
 80260b4:	d10a      	bne.n	80260cc <__ieee754_log+0x34>
 80260b6:	49cc      	ldr	r1, [pc, #816]	; (80263e8 <__ieee754_log+0x350>)
 80260b8:	2200      	movs	r2, #0
 80260ba:	2300      	movs	r3, #0
 80260bc:	2000      	movs	r0, #0
 80260be:	f7da fbd9 	bl	8000874 <__aeabi_ddiv>
 80260c2:	ec41 0b10 	vmov	d0, r0, r1
 80260c6:	b007      	add	sp, #28
 80260c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260cc:	2900      	cmp	r1, #0
 80260ce:	da07      	bge.n	80260e0 <__ieee754_log+0x48>
 80260d0:	ee10 2a10 	vmov	r2, s0
 80260d4:	460b      	mov	r3, r1
 80260d6:	f7da f8ef 	bl	80002b8 <__aeabi_dsub>
 80260da:	2200      	movs	r2, #0
 80260dc:	2300      	movs	r3, #0
 80260de:	e7ee      	b.n	80260be <__ieee754_log+0x26>
 80260e0:	4bc2      	ldr	r3, [pc, #776]	; (80263ec <__ieee754_log+0x354>)
 80260e2:	2200      	movs	r2, #0
 80260e4:	f7da fa9c 	bl	8000620 <__aeabi_dmul>
 80260e8:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80260ec:	460d      	mov	r5, r1
 80260ee:	4ac0      	ldr	r2, [pc, #768]	; (80263f0 <__ieee754_log+0x358>)
 80260f0:	4295      	cmp	r5, r2
 80260f2:	dd06      	ble.n	8026102 <__ieee754_log+0x6a>
 80260f4:	4602      	mov	r2, r0
 80260f6:	460b      	mov	r3, r1
 80260f8:	f7da f8e0 	bl	80002bc <__adddf3>
 80260fc:	e7e1      	b.n	80260c2 <__ieee754_log+0x2a>
 80260fe:	2300      	movs	r3, #0
 8026100:	e7f5      	b.n	80260ee <__ieee754_log+0x56>
 8026102:	152c      	asrs	r4, r5, #20
 8026104:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8026108:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802610c:	441c      	add	r4, r3
 802610e:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8026112:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8026116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802611a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 802611e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8026122:	ea42 0105 	orr.w	r1, r2, r5
 8026126:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802612a:	2200      	movs	r2, #0
 802612c:	4bb1      	ldr	r3, [pc, #708]	; (80263f4 <__ieee754_log+0x35c>)
 802612e:	f7da f8c3 	bl	80002b8 <__aeabi_dsub>
 8026132:	1cab      	adds	r3, r5, #2
 8026134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026138:	2b02      	cmp	r3, #2
 802613a:	4682      	mov	sl, r0
 802613c:	468b      	mov	fp, r1
 802613e:	f04f 0200 	mov.w	r2, #0
 8026142:	dc5b      	bgt.n	80261fc <__ieee754_log+0x164>
 8026144:	2300      	movs	r3, #0
 8026146:	f7da fcd3 	bl	8000af0 <__aeabi_dcmpeq>
 802614a:	b1d0      	cbz	r0, 8026182 <__ieee754_log+0xea>
 802614c:	2c00      	cmp	r4, #0
 802614e:	f000 8170 	beq.w	8026432 <__ieee754_log+0x39a>
 8026152:	4620      	mov	r0, r4
 8026154:	f7da f9fe 	bl	8000554 <__aeabi_i2d>
 8026158:	a38f      	add	r3, pc, #572	; (adr r3, 8026398 <__ieee754_log+0x300>)
 802615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802615e:	4606      	mov	r6, r0
 8026160:	460f      	mov	r7, r1
 8026162:	f7da fa5d 	bl	8000620 <__aeabi_dmul>
 8026166:	a38e      	add	r3, pc, #568	; (adr r3, 80263a0 <__ieee754_log+0x308>)
 8026168:	e9d3 2300 	ldrd	r2, r3, [r3]
 802616c:	4604      	mov	r4, r0
 802616e:	460d      	mov	r5, r1
 8026170:	4630      	mov	r0, r6
 8026172:	4639      	mov	r1, r7
 8026174:	f7da fa54 	bl	8000620 <__aeabi_dmul>
 8026178:	4602      	mov	r2, r0
 802617a:	460b      	mov	r3, r1
 802617c:	4620      	mov	r0, r4
 802617e:	4629      	mov	r1, r5
 8026180:	e7ba      	b.n	80260f8 <__ieee754_log+0x60>
 8026182:	a389      	add	r3, pc, #548	; (adr r3, 80263a8 <__ieee754_log+0x310>)
 8026184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026188:	4650      	mov	r0, sl
 802618a:	4659      	mov	r1, fp
 802618c:	f7da fa48 	bl	8000620 <__aeabi_dmul>
 8026190:	4602      	mov	r2, r0
 8026192:	460b      	mov	r3, r1
 8026194:	2000      	movs	r0, #0
 8026196:	4998      	ldr	r1, [pc, #608]	; (80263f8 <__ieee754_log+0x360>)
 8026198:	f7da f88e 	bl	80002b8 <__aeabi_dsub>
 802619c:	4652      	mov	r2, sl
 802619e:	4606      	mov	r6, r0
 80261a0:	460f      	mov	r7, r1
 80261a2:	465b      	mov	r3, fp
 80261a4:	4650      	mov	r0, sl
 80261a6:	4659      	mov	r1, fp
 80261a8:	f7da fa3a 	bl	8000620 <__aeabi_dmul>
 80261ac:	4602      	mov	r2, r0
 80261ae:	460b      	mov	r3, r1
 80261b0:	4630      	mov	r0, r6
 80261b2:	4639      	mov	r1, r7
 80261b4:	f7da fa34 	bl	8000620 <__aeabi_dmul>
 80261b8:	4606      	mov	r6, r0
 80261ba:	460f      	mov	r7, r1
 80261bc:	b934      	cbnz	r4, 80261cc <__ieee754_log+0x134>
 80261be:	4602      	mov	r2, r0
 80261c0:	460b      	mov	r3, r1
 80261c2:	4650      	mov	r0, sl
 80261c4:	4659      	mov	r1, fp
 80261c6:	f7da f877 	bl	80002b8 <__aeabi_dsub>
 80261ca:	e77a      	b.n	80260c2 <__ieee754_log+0x2a>
 80261cc:	4620      	mov	r0, r4
 80261ce:	f7da f9c1 	bl	8000554 <__aeabi_i2d>
 80261d2:	a371      	add	r3, pc, #452	; (adr r3, 8026398 <__ieee754_log+0x300>)
 80261d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261d8:	4680      	mov	r8, r0
 80261da:	4689      	mov	r9, r1
 80261dc:	f7da fa20 	bl	8000620 <__aeabi_dmul>
 80261e0:	a36f      	add	r3, pc, #444	; (adr r3, 80263a0 <__ieee754_log+0x308>)
 80261e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261e6:	4604      	mov	r4, r0
 80261e8:	460d      	mov	r5, r1
 80261ea:	4640      	mov	r0, r8
 80261ec:	4649      	mov	r1, r9
 80261ee:	f7da fa17 	bl	8000620 <__aeabi_dmul>
 80261f2:	4602      	mov	r2, r0
 80261f4:	460b      	mov	r3, r1
 80261f6:	4630      	mov	r0, r6
 80261f8:	4639      	mov	r1, r7
 80261fa:	e0b2      	b.n	8026362 <__ieee754_log+0x2ca>
 80261fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8026200:	f7da f85c 	bl	80002bc <__adddf3>
 8026204:	4602      	mov	r2, r0
 8026206:	460b      	mov	r3, r1
 8026208:	4650      	mov	r0, sl
 802620a:	4659      	mov	r1, fp
 802620c:	f7da fb32 	bl	8000874 <__aeabi_ddiv>
 8026210:	e9cd 0100 	strd	r0, r1, [sp]
 8026214:	4620      	mov	r0, r4
 8026216:	f7da f99d 	bl	8000554 <__aeabi_i2d>
 802621a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802621e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026222:	4610      	mov	r0, r2
 8026224:	4619      	mov	r1, r3
 8026226:	f7da f9fb 	bl	8000620 <__aeabi_dmul>
 802622a:	4602      	mov	r2, r0
 802622c:	460b      	mov	r3, r1
 802622e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026232:	f7da f9f5 	bl	8000620 <__aeabi_dmul>
 8026236:	a35e      	add	r3, pc, #376	; (adr r3, 80263b0 <__ieee754_log+0x318>)
 8026238:	e9d3 2300 	ldrd	r2, r3, [r3]
 802623c:	4606      	mov	r6, r0
 802623e:	460f      	mov	r7, r1
 8026240:	f7da f9ee 	bl	8000620 <__aeabi_dmul>
 8026244:	a35c      	add	r3, pc, #368	; (adr r3, 80263b8 <__ieee754_log+0x320>)
 8026246:	e9d3 2300 	ldrd	r2, r3, [r3]
 802624a:	f7da f837 	bl	80002bc <__adddf3>
 802624e:	4632      	mov	r2, r6
 8026250:	463b      	mov	r3, r7
 8026252:	f7da f9e5 	bl	8000620 <__aeabi_dmul>
 8026256:	a35a      	add	r3, pc, #360	; (adr r3, 80263c0 <__ieee754_log+0x328>)
 8026258:	e9d3 2300 	ldrd	r2, r3, [r3]
 802625c:	f7da f82e 	bl	80002bc <__adddf3>
 8026260:	4632      	mov	r2, r6
 8026262:	463b      	mov	r3, r7
 8026264:	f7da f9dc 	bl	8000620 <__aeabi_dmul>
 8026268:	a357      	add	r3, pc, #348	; (adr r3, 80263c8 <__ieee754_log+0x330>)
 802626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802626e:	f7da f825 	bl	80002bc <__adddf3>
 8026272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026276:	f7da f9d3 	bl	8000620 <__aeabi_dmul>
 802627a:	a355      	add	r3, pc, #340	; (adr r3, 80263d0 <__ieee754_log+0x338>)
 802627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026284:	4630      	mov	r0, r6
 8026286:	4639      	mov	r1, r7
 8026288:	f7da f9ca 	bl	8000620 <__aeabi_dmul>
 802628c:	a352      	add	r3, pc, #328	; (adr r3, 80263d8 <__ieee754_log+0x340>)
 802628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026292:	f7da f813 	bl	80002bc <__adddf3>
 8026296:	4632      	mov	r2, r6
 8026298:	463b      	mov	r3, r7
 802629a:	f7da f9c1 	bl	8000620 <__aeabi_dmul>
 802629e:	a350      	add	r3, pc, #320	; (adr r3, 80263e0 <__ieee754_log+0x348>)
 80262a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80262a4:	f7da f80a 	bl	80002bc <__adddf3>
 80262a8:	4632      	mov	r2, r6
 80262aa:	463b      	mov	r3, r7
 80262ac:	f7da f9b8 	bl	8000620 <__aeabi_dmul>
 80262b0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80262b4:	4602      	mov	r2, r0
 80262b6:	460b      	mov	r3, r1
 80262b8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80262bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80262c0:	f7d9 fffc 	bl	80002bc <__adddf3>
 80262c4:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80262c8:	3551      	adds	r5, #81	; 0x51
 80262ca:	ea45 0508 	orr.w	r5, r5, r8
 80262ce:	2d00      	cmp	r5, #0
 80262d0:	4606      	mov	r6, r0
 80262d2:	460f      	mov	r7, r1
 80262d4:	dd50      	ble.n	8026378 <__ieee754_log+0x2e0>
 80262d6:	2200      	movs	r2, #0
 80262d8:	4b47      	ldr	r3, [pc, #284]	; (80263f8 <__ieee754_log+0x360>)
 80262da:	4650      	mov	r0, sl
 80262dc:	4659      	mov	r1, fp
 80262de:	f7da f99f 	bl	8000620 <__aeabi_dmul>
 80262e2:	4652      	mov	r2, sl
 80262e4:	465b      	mov	r3, fp
 80262e6:	f7da f99b 	bl	8000620 <__aeabi_dmul>
 80262ea:	4680      	mov	r8, r0
 80262ec:	4689      	mov	r9, r1
 80262ee:	b994      	cbnz	r4, 8026316 <__ieee754_log+0x27e>
 80262f0:	4602      	mov	r2, r0
 80262f2:	460b      	mov	r3, r1
 80262f4:	4630      	mov	r0, r6
 80262f6:	4639      	mov	r1, r7
 80262f8:	f7d9 ffe0 	bl	80002bc <__adddf3>
 80262fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026300:	f7da f98e 	bl	8000620 <__aeabi_dmul>
 8026304:	4602      	mov	r2, r0
 8026306:	460b      	mov	r3, r1
 8026308:	4640      	mov	r0, r8
 802630a:	4649      	mov	r1, r9
 802630c:	f7d9 ffd4 	bl	80002b8 <__aeabi_dsub>
 8026310:	4602      	mov	r2, r0
 8026312:	460b      	mov	r3, r1
 8026314:	e755      	b.n	80261c2 <__ieee754_log+0x12a>
 8026316:	a320      	add	r3, pc, #128	; (adr r3, 8026398 <__ieee754_log+0x300>)
 8026318:	e9d3 2300 	ldrd	r2, r3, [r3]
 802631c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026320:	f7da f97e 	bl	8000620 <__aeabi_dmul>
 8026324:	4642      	mov	r2, r8
 8026326:	464b      	mov	r3, r9
 8026328:	4604      	mov	r4, r0
 802632a:	460d      	mov	r5, r1
 802632c:	4630      	mov	r0, r6
 802632e:	4639      	mov	r1, r7
 8026330:	f7d9 ffc4 	bl	80002bc <__adddf3>
 8026334:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026338:	f7da f972 	bl	8000620 <__aeabi_dmul>
 802633c:	a318      	add	r3, pc, #96	; (adr r3, 80263a0 <__ieee754_log+0x308>)
 802633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026342:	4606      	mov	r6, r0
 8026344:	460f      	mov	r7, r1
 8026346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802634a:	f7da f969 	bl	8000620 <__aeabi_dmul>
 802634e:	4602      	mov	r2, r0
 8026350:	460b      	mov	r3, r1
 8026352:	4630      	mov	r0, r6
 8026354:	4639      	mov	r1, r7
 8026356:	f7d9 ffb1 	bl	80002bc <__adddf3>
 802635a:	4602      	mov	r2, r0
 802635c:	460b      	mov	r3, r1
 802635e:	4640      	mov	r0, r8
 8026360:	4649      	mov	r1, r9
 8026362:	f7d9 ffa9 	bl	80002b8 <__aeabi_dsub>
 8026366:	4652      	mov	r2, sl
 8026368:	465b      	mov	r3, fp
 802636a:	f7d9 ffa5 	bl	80002b8 <__aeabi_dsub>
 802636e:	4602      	mov	r2, r0
 8026370:	460b      	mov	r3, r1
 8026372:	4620      	mov	r0, r4
 8026374:	4629      	mov	r1, r5
 8026376:	e726      	b.n	80261c6 <__ieee754_log+0x12e>
 8026378:	2c00      	cmp	r4, #0
 802637a:	d13f      	bne.n	80263fc <__ieee754_log+0x364>
 802637c:	4602      	mov	r2, r0
 802637e:	460b      	mov	r3, r1
 8026380:	4650      	mov	r0, sl
 8026382:	4659      	mov	r1, fp
 8026384:	f7d9 ff98 	bl	80002b8 <__aeabi_dsub>
 8026388:	e9dd 2300 	ldrd	r2, r3, [sp]
 802638c:	f7da f948 	bl	8000620 <__aeabi_dmul>
 8026390:	e7be      	b.n	8026310 <__ieee754_log+0x278>
 8026392:	bf00      	nop
 8026394:	f3af 8000 	nop.w
 8026398:	fee00000 	.word	0xfee00000
 802639c:	3fe62e42 	.word	0x3fe62e42
 80263a0:	35793c76 	.word	0x35793c76
 80263a4:	3dea39ef 	.word	0x3dea39ef
 80263a8:	55555555 	.word	0x55555555
 80263ac:	3fd55555 	.word	0x3fd55555
 80263b0:	df3e5244 	.word	0xdf3e5244
 80263b4:	3fc2f112 	.word	0x3fc2f112
 80263b8:	96cb03de 	.word	0x96cb03de
 80263bc:	3fc74664 	.word	0x3fc74664
 80263c0:	94229359 	.word	0x94229359
 80263c4:	3fd24924 	.word	0x3fd24924
 80263c8:	55555593 	.word	0x55555593
 80263cc:	3fe55555 	.word	0x3fe55555
 80263d0:	d078c69f 	.word	0xd078c69f
 80263d4:	3fc39a09 	.word	0x3fc39a09
 80263d8:	1d8e78af 	.word	0x1d8e78af
 80263dc:	3fcc71c5 	.word	0x3fcc71c5
 80263e0:	9997fa04 	.word	0x9997fa04
 80263e4:	3fd99999 	.word	0x3fd99999
 80263e8:	c3500000 	.word	0xc3500000
 80263ec:	43500000 	.word	0x43500000
 80263f0:	7fefffff 	.word	0x7fefffff
 80263f4:	3ff00000 	.word	0x3ff00000
 80263f8:	3fe00000 	.word	0x3fe00000
 80263fc:	a30e      	add	r3, pc, #56	; (adr r3, 8026438 <__ieee754_log+0x3a0>)
 80263fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026406:	f7da f90b 	bl	8000620 <__aeabi_dmul>
 802640a:	4632      	mov	r2, r6
 802640c:	463b      	mov	r3, r7
 802640e:	4604      	mov	r4, r0
 8026410:	460d      	mov	r5, r1
 8026412:	4650      	mov	r0, sl
 8026414:	4659      	mov	r1, fp
 8026416:	f7d9 ff4f 	bl	80002b8 <__aeabi_dsub>
 802641a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802641e:	f7da f8ff 	bl	8000620 <__aeabi_dmul>
 8026422:	a307      	add	r3, pc, #28	; (adr r3, 8026440 <__ieee754_log+0x3a8>)
 8026424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026428:	4606      	mov	r6, r0
 802642a:	460f      	mov	r7, r1
 802642c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026430:	e6dd      	b.n	80261ee <__ieee754_log+0x156>
 8026432:	2000      	movs	r0, #0
 8026434:	2100      	movs	r1, #0
 8026436:	e644      	b.n	80260c2 <__ieee754_log+0x2a>
 8026438:	fee00000 	.word	0xfee00000
 802643c:	3fe62e42 	.word	0x3fe62e42
 8026440:	35793c76 	.word	0x35793c76
 8026444:	3dea39ef 	.word	0x3dea39ef

08026448 <__ieee754_pow>:
 8026448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802644c:	b091      	sub	sp, #68	; 0x44
 802644e:	ed8d 1b00 	vstr	d1, [sp]
 8026452:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8026456:	ec57 6b10 	vmov	r6, r7, d0
 802645a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802645e:	ea58 0302 	orrs.w	r3, r8, r2
 8026462:	ee10 aa10 	vmov	sl, s0
 8026466:	463d      	mov	r5, r7
 8026468:	f000 84bd 	beq.w	8026de6 <__ieee754_pow+0x99e>
 802646c:	4b78      	ldr	r3, [pc, #480]	; (8026650 <__ieee754_pow+0x208>)
 802646e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8026472:	429c      	cmp	r4, r3
 8026474:	dc09      	bgt.n	802648a <__ieee754_pow+0x42>
 8026476:	d103      	bne.n	8026480 <__ieee754_pow+0x38>
 8026478:	b93e      	cbnz	r6, 802648a <__ieee754_pow+0x42>
 802647a:	45a0      	cmp	r8, r4
 802647c:	dc0d      	bgt.n	802649a <__ieee754_pow+0x52>
 802647e:	e001      	b.n	8026484 <__ieee754_pow+0x3c>
 8026480:	4598      	cmp	r8, r3
 8026482:	dc02      	bgt.n	802648a <__ieee754_pow+0x42>
 8026484:	4598      	cmp	r8, r3
 8026486:	d10e      	bne.n	80264a6 <__ieee754_pow+0x5e>
 8026488:	b16a      	cbz	r2, 80264a6 <__ieee754_pow+0x5e>
 802648a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802648e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8026492:	ea54 030a 	orrs.w	r3, r4, sl
 8026496:	f000 84a6 	beq.w	8026de6 <__ieee754_pow+0x99e>
 802649a:	486e      	ldr	r0, [pc, #440]	; (8026654 <__ieee754_pow+0x20c>)
 802649c:	b011      	add	sp, #68	; 0x44
 802649e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264a2:	f000 bded 	b.w	8027080 <nan>
 80264a6:	2d00      	cmp	r5, #0
 80264a8:	da53      	bge.n	8026552 <__ieee754_pow+0x10a>
 80264aa:	4b6b      	ldr	r3, [pc, #428]	; (8026658 <__ieee754_pow+0x210>)
 80264ac:	4598      	cmp	r8, r3
 80264ae:	dc4d      	bgt.n	802654c <__ieee754_pow+0x104>
 80264b0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80264b4:	4598      	cmp	r8, r3
 80264b6:	dd4c      	ble.n	8026552 <__ieee754_pow+0x10a>
 80264b8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80264bc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80264c0:	2b14      	cmp	r3, #20
 80264c2:	dd26      	ble.n	8026512 <__ieee754_pow+0xca>
 80264c4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80264c8:	fa22 f103 	lsr.w	r1, r2, r3
 80264cc:	fa01 f303 	lsl.w	r3, r1, r3
 80264d0:	429a      	cmp	r2, r3
 80264d2:	d13e      	bne.n	8026552 <__ieee754_pow+0x10a>
 80264d4:	f001 0101 	and.w	r1, r1, #1
 80264d8:	f1c1 0b02 	rsb	fp, r1, #2
 80264dc:	2a00      	cmp	r2, #0
 80264de:	d15b      	bne.n	8026598 <__ieee754_pow+0x150>
 80264e0:	4b5b      	ldr	r3, [pc, #364]	; (8026650 <__ieee754_pow+0x208>)
 80264e2:	4598      	cmp	r8, r3
 80264e4:	d124      	bne.n	8026530 <__ieee754_pow+0xe8>
 80264e6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80264ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80264ee:	ea53 030a 	orrs.w	r3, r3, sl
 80264f2:	f000 8478 	beq.w	8026de6 <__ieee754_pow+0x99e>
 80264f6:	4b59      	ldr	r3, [pc, #356]	; (802665c <__ieee754_pow+0x214>)
 80264f8:	429c      	cmp	r4, r3
 80264fa:	dd2d      	ble.n	8026558 <__ieee754_pow+0x110>
 80264fc:	f1b9 0f00 	cmp.w	r9, #0
 8026500:	f280 8475 	bge.w	8026dee <__ieee754_pow+0x9a6>
 8026504:	2000      	movs	r0, #0
 8026506:	2100      	movs	r1, #0
 8026508:	ec41 0b10 	vmov	d0, r0, r1
 802650c:	b011      	add	sp, #68	; 0x44
 802650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026512:	2a00      	cmp	r2, #0
 8026514:	d13e      	bne.n	8026594 <__ieee754_pow+0x14c>
 8026516:	f1c3 0314 	rsb	r3, r3, #20
 802651a:	fa48 f103 	asr.w	r1, r8, r3
 802651e:	fa01 f303 	lsl.w	r3, r1, r3
 8026522:	4598      	cmp	r8, r3
 8026524:	f040 846b 	bne.w	8026dfe <__ieee754_pow+0x9b6>
 8026528:	f001 0101 	and.w	r1, r1, #1
 802652c:	f1c1 0b02 	rsb	fp, r1, #2
 8026530:	4b4b      	ldr	r3, [pc, #300]	; (8026660 <__ieee754_pow+0x218>)
 8026532:	4598      	cmp	r8, r3
 8026534:	d118      	bne.n	8026568 <__ieee754_pow+0x120>
 8026536:	f1b9 0f00 	cmp.w	r9, #0
 802653a:	f280 845c 	bge.w	8026df6 <__ieee754_pow+0x9ae>
 802653e:	4948      	ldr	r1, [pc, #288]	; (8026660 <__ieee754_pow+0x218>)
 8026540:	4632      	mov	r2, r6
 8026542:	463b      	mov	r3, r7
 8026544:	2000      	movs	r0, #0
 8026546:	f7da f995 	bl	8000874 <__aeabi_ddiv>
 802654a:	e7dd      	b.n	8026508 <__ieee754_pow+0xc0>
 802654c:	f04f 0b02 	mov.w	fp, #2
 8026550:	e7c4      	b.n	80264dc <__ieee754_pow+0x94>
 8026552:	f04f 0b00 	mov.w	fp, #0
 8026556:	e7c1      	b.n	80264dc <__ieee754_pow+0x94>
 8026558:	f1b9 0f00 	cmp.w	r9, #0
 802655c:	dad2      	bge.n	8026504 <__ieee754_pow+0xbc>
 802655e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8026562:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8026566:	e7cf      	b.n	8026508 <__ieee754_pow+0xc0>
 8026568:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802656c:	d106      	bne.n	802657c <__ieee754_pow+0x134>
 802656e:	4632      	mov	r2, r6
 8026570:	463b      	mov	r3, r7
 8026572:	4610      	mov	r0, r2
 8026574:	4619      	mov	r1, r3
 8026576:	f7da f853 	bl	8000620 <__aeabi_dmul>
 802657a:	e7c5      	b.n	8026508 <__ieee754_pow+0xc0>
 802657c:	4b39      	ldr	r3, [pc, #228]	; (8026664 <__ieee754_pow+0x21c>)
 802657e:	4599      	cmp	r9, r3
 8026580:	d10a      	bne.n	8026598 <__ieee754_pow+0x150>
 8026582:	2d00      	cmp	r5, #0
 8026584:	db08      	blt.n	8026598 <__ieee754_pow+0x150>
 8026586:	ec47 6b10 	vmov	d0, r6, r7
 802658a:	b011      	add	sp, #68	; 0x44
 802658c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026590:	f000 bc6c 	b.w	8026e6c <__ieee754_sqrt>
 8026594:	f04f 0b00 	mov.w	fp, #0
 8026598:	ec47 6b10 	vmov	d0, r6, r7
 802659c:	f000 fd5d 	bl	802705a <fabs>
 80265a0:	ec51 0b10 	vmov	r0, r1, d0
 80265a4:	f1ba 0f00 	cmp.w	sl, #0
 80265a8:	d127      	bne.n	80265fa <__ieee754_pow+0x1b2>
 80265aa:	b124      	cbz	r4, 80265b6 <__ieee754_pow+0x16e>
 80265ac:	4b2c      	ldr	r3, [pc, #176]	; (8026660 <__ieee754_pow+0x218>)
 80265ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80265b2:	429a      	cmp	r2, r3
 80265b4:	d121      	bne.n	80265fa <__ieee754_pow+0x1b2>
 80265b6:	f1b9 0f00 	cmp.w	r9, #0
 80265ba:	da05      	bge.n	80265c8 <__ieee754_pow+0x180>
 80265bc:	4602      	mov	r2, r0
 80265be:	460b      	mov	r3, r1
 80265c0:	2000      	movs	r0, #0
 80265c2:	4927      	ldr	r1, [pc, #156]	; (8026660 <__ieee754_pow+0x218>)
 80265c4:	f7da f956 	bl	8000874 <__aeabi_ddiv>
 80265c8:	2d00      	cmp	r5, #0
 80265ca:	da9d      	bge.n	8026508 <__ieee754_pow+0xc0>
 80265cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80265d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80265d4:	ea54 030b 	orrs.w	r3, r4, fp
 80265d8:	d108      	bne.n	80265ec <__ieee754_pow+0x1a4>
 80265da:	4602      	mov	r2, r0
 80265dc:	460b      	mov	r3, r1
 80265de:	4610      	mov	r0, r2
 80265e0:	4619      	mov	r1, r3
 80265e2:	f7d9 fe69 	bl	80002b8 <__aeabi_dsub>
 80265e6:	4602      	mov	r2, r0
 80265e8:	460b      	mov	r3, r1
 80265ea:	e7ac      	b.n	8026546 <__ieee754_pow+0xfe>
 80265ec:	f1bb 0f01 	cmp.w	fp, #1
 80265f0:	d18a      	bne.n	8026508 <__ieee754_pow+0xc0>
 80265f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80265f6:	4619      	mov	r1, r3
 80265f8:	e786      	b.n	8026508 <__ieee754_pow+0xc0>
 80265fa:	0fed      	lsrs	r5, r5, #31
 80265fc:	1e6b      	subs	r3, r5, #1
 80265fe:	930d      	str	r3, [sp, #52]	; 0x34
 8026600:	ea5b 0303 	orrs.w	r3, fp, r3
 8026604:	d102      	bne.n	802660c <__ieee754_pow+0x1c4>
 8026606:	4632      	mov	r2, r6
 8026608:	463b      	mov	r3, r7
 802660a:	e7e8      	b.n	80265de <__ieee754_pow+0x196>
 802660c:	4b16      	ldr	r3, [pc, #88]	; (8026668 <__ieee754_pow+0x220>)
 802660e:	4598      	cmp	r8, r3
 8026610:	f340 80fe 	ble.w	8026810 <__ieee754_pow+0x3c8>
 8026614:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8026618:	4598      	cmp	r8, r3
 802661a:	dd0a      	ble.n	8026632 <__ieee754_pow+0x1ea>
 802661c:	4b0f      	ldr	r3, [pc, #60]	; (802665c <__ieee754_pow+0x214>)
 802661e:	429c      	cmp	r4, r3
 8026620:	dc0d      	bgt.n	802663e <__ieee754_pow+0x1f6>
 8026622:	f1b9 0f00 	cmp.w	r9, #0
 8026626:	f6bf af6d 	bge.w	8026504 <__ieee754_pow+0xbc>
 802662a:	a307      	add	r3, pc, #28	; (adr r3, 8026648 <__ieee754_pow+0x200>)
 802662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026630:	e79f      	b.n	8026572 <__ieee754_pow+0x12a>
 8026632:	4b0e      	ldr	r3, [pc, #56]	; (802666c <__ieee754_pow+0x224>)
 8026634:	429c      	cmp	r4, r3
 8026636:	ddf4      	ble.n	8026622 <__ieee754_pow+0x1da>
 8026638:	4b09      	ldr	r3, [pc, #36]	; (8026660 <__ieee754_pow+0x218>)
 802663a:	429c      	cmp	r4, r3
 802663c:	dd18      	ble.n	8026670 <__ieee754_pow+0x228>
 802663e:	f1b9 0f00 	cmp.w	r9, #0
 8026642:	dcf2      	bgt.n	802662a <__ieee754_pow+0x1e2>
 8026644:	e75e      	b.n	8026504 <__ieee754_pow+0xbc>
 8026646:	bf00      	nop
 8026648:	8800759c 	.word	0x8800759c
 802664c:	7e37e43c 	.word	0x7e37e43c
 8026650:	7ff00000 	.word	0x7ff00000
 8026654:	080341d2 	.word	0x080341d2
 8026658:	433fffff 	.word	0x433fffff
 802665c:	3fefffff 	.word	0x3fefffff
 8026660:	3ff00000 	.word	0x3ff00000
 8026664:	3fe00000 	.word	0x3fe00000
 8026668:	41e00000 	.word	0x41e00000
 802666c:	3feffffe 	.word	0x3feffffe
 8026670:	2200      	movs	r2, #0
 8026672:	4b63      	ldr	r3, [pc, #396]	; (8026800 <__ieee754_pow+0x3b8>)
 8026674:	f7d9 fe20 	bl	80002b8 <__aeabi_dsub>
 8026678:	a355      	add	r3, pc, #340	; (adr r3, 80267d0 <__ieee754_pow+0x388>)
 802667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802667e:	4604      	mov	r4, r0
 8026680:	460d      	mov	r5, r1
 8026682:	f7d9 ffcd 	bl	8000620 <__aeabi_dmul>
 8026686:	a354      	add	r3, pc, #336	; (adr r3, 80267d8 <__ieee754_pow+0x390>)
 8026688:	e9d3 2300 	ldrd	r2, r3, [r3]
 802668c:	4606      	mov	r6, r0
 802668e:	460f      	mov	r7, r1
 8026690:	4620      	mov	r0, r4
 8026692:	4629      	mov	r1, r5
 8026694:	f7d9 ffc4 	bl	8000620 <__aeabi_dmul>
 8026698:	2200      	movs	r2, #0
 802669a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802669e:	4b59      	ldr	r3, [pc, #356]	; (8026804 <__ieee754_pow+0x3bc>)
 80266a0:	4620      	mov	r0, r4
 80266a2:	4629      	mov	r1, r5
 80266a4:	f7d9 ffbc 	bl	8000620 <__aeabi_dmul>
 80266a8:	4602      	mov	r2, r0
 80266aa:	460b      	mov	r3, r1
 80266ac:	a14c      	add	r1, pc, #304	; (adr r1, 80267e0 <__ieee754_pow+0x398>)
 80266ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80266b2:	f7d9 fe01 	bl	80002b8 <__aeabi_dsub>
 80266b6:	4622      	mov	r2, r4
 80266b8:	462b      	mov	r3, r5
 80266ba:	f7d9 ffb1 	bl	8000620 <__aeabi_dmul>
 80266be:	4602      	mov	r2, r0
 80266c0:	460b      	mov	r3, r1
 80266c2:	2000      	movs	r0, #0
 80266c4:	4950      	ldr	r1, [pc, #320]	; (8026808 <__ieee754_pow+0x3c0>)
 80266c6:	f7d9 fdf7 	bl	80002b8 <__aeabi_dsub>
 80266ca:	4622      	mov	r2, r4
 80266cc:	462b      	mov	r3, r5
 80266ce:	4680      	mov	r8, r0
 80266d0:	4689      	mov	r9, r1
 80266d2:	4620      	mov	r0, r4
 80266d4:	4629      	mov	r1, r5
 80266d6:	f7d9 ffa3 	bl	8000620 <__aeabi_dmul>
 80266da:	4602      	mov	r2, r0
 80266dc:	460b      	mov	r3, r1
 80266de:	4640      	mov	r0, r8
 80266e0:	4649      	mov	r1, r9
 80266e2:	f7d9 ff9d 	bl	8000620 <__aeabi_dmul>
 80266e6:	a340      	add	r3, pc, #256	; (adr r3, 80267e8 <__ieee754_pow+0x3a0>)
 80266e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80266ec:	f7d9 ff98 	bl	8000620 <__aeabi_dmul>
 80266f0:	4602      	mov	r2, r0
 80266f2:	460b      	mov	r3, r1
 80266f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80266f8:	f7d9 fdde 	bl	80002b8 <__aeabi_dsub>
 80266fc:	4602      	mov	r2, r0
 80266fe:	460b      	mov	r3, r1
 8026700:	4604      	mov	r4, r0
 8026702:	460d      	mov	r5, r1
 8026704:	4630      	mov	r0, r6
 8026706:	4639      	mov	r1, r7
 8026708:	f7d9 fdd8 	bl	80002bc <__adddf3>
 802670c:	2000      	movs	r0, #0
 802670e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026712:	4632      	mov	r2, r6
 8026714:	463b      	mov	r3, r7
 8026716:	f7d9 fdcf 	bl	80002b8 <__aeabi_dsub>
 802671a:	4602      	mov	r2, r0
 802671c:	460b      	mov	r3, r1
 802671e:	4620      	mov	r0, r4
 8026720:	4629      	mov	r1, r5
 8026722:	f7d9 fdc9 	bl	80002b8 <__aeabi_dsub>
 8026726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026728:	f10b 33ff 	add.w	r3, fp, #4294967295
 802672c:	4313      	orrs	r3, r2
 802672e:	4606      	mov	r6, r0
 8026730:	460f      	mov	r7, r1
 8026732:	f040 81eb 	bne.w	8026b0c <__ieee754_pow+0x6c4>
 8026736:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80267f0 <__ieee754_pow+0x3a8>
 802673a:	e9dd 4500 	ldrd	r4, r5, [sp]
 802673e:	2400      	movs	r4, #0
 8026740:	4622      	mov	r2, r4
 8026742:	462b      	mov	r3, r5
 8026744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026748:	ed8d 7b02 	vstr	d7, [sp, #8]
 802674c:	f7d9 fdb4 	bl	80002b8 <__aeabi_dsub>
 8026750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026754:	f7d9 ff64 	bl	8000620 <__aeabi_dmul>
 8026758:	e9dd 2300 	ldrd	r2, r3, [sp]
 802675c:	4680      	mov	r8, r0
 802675e:	4689      	mov	r9, r1
 8026760:	4630      	mov	r0, r6
 8026762:	4639      	mov	r1, r7
 8026764:	f7d9 ff5c 	bl	8000620 <__aeabi_dmul>
 8026768:	4602      	mov	r2, r0
 802676a:	460b      	mov	r3, r1
 802676c:	4640      	mov	r0, r8
 802676e:	4649      	mov	r1, r9
 8026770:	f7d9 fda4 	bl	80002bc <__adddf3>
 8026774:	4622      	mov	r2, r4
 8026776:	462b      	mov	r3, r5
 8026778:	4680      	mov	r8, r0
 802677a:	4689      	mov	r9, r1
 802677c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8026780:	f7d9 ff4e 	bl	8000620 <__aeabi_dmul>
 8026784:	460b      	mov	r3, r1
 8026786:	4604      	mov	r4, r0
 8026788:	460d      	mov	r5, r1
 802678a:	4602      	mov	r2, r0
 802678c:	4649      	mov	r1, r9
 802678e:	4640      	mov	r0, r8
 8026790:	e9cd 4500 	strd	r4, r5, [sp]
 8026794:	f7d9 fd92 	bl	80002bc <__adddf3>
 8026798:	4b1c      	ldr	r3, [pc, #112]	; (802680c <__ieee754_pow+0x3c4>)
 802679a:	4299      	cmp	r1, r3
 802679c:	4606      	mov	r6, r0
 802679e:	460f      	mov	r7, r1
 80267a0:	468b      	mov	fp, r1
 80267a2:	f340 82f7 	ble.w	8026d94 <__ieee754_pow+0x94c>
 80267a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80267aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80267ae:	4303      	orrs	r3, r0
 80267b0:	f000 81ea 	beq.w	8026b88 <__ieee754_pow+0x740>
 80267b4:	a310      	add	r3, pc, #64	; (adr r3, 80267f8 <__ieee754_pow+0x3b0>)
 80267b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80267ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80267be:	f7d9 ff2f 	bl	8000620 <__aeabi_dmul>
 80267c2:	a30d      	add	r3, pc, #52	; (adr r3, 80267f8 <__ieee754_pow+0x3b0>)
 80267c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80267c8:	e6d5      	b.n	8026576 <__ieee754_pow+0x12e>
 80267ca:	bf00      	nop
 80267cc:	f3af 8000 	nop.w
 80267d0:	60000000 	.word	0x60000000
 80267d4:	3ff71547 	.word	0x3ff71547
 80267d8:	f85ddf44 	.word	0xf85ddf44
 80267dc:	3e54ae0b 	.word	0x3e54ae0b
 80267e0:	55555555 	.word	0x55555555
 80267e4:	3fd55555 	.word	0x3fd55555
 80267e8:	652b82fe 	.word	0x652b82fe
 80267ec:	3ff71547 	.word	0x3ff71547
 80267f0:	00000000 	.word	0x00000000
 80267f4:	bff00000 	.word	0xbff00000
 80267f8:	8800759c 	.word	0x8800759c
 80267fc:	7e37e43c 	.word	0x7e37e43c
 8026800:	3ff00000 	.word	0x3ff00000
 8026804:	3fd00000 	.word	0x3fd00000
 8026808:	3fe00000 	.word	0x3fe00000
 802680c:	408fffff 	.word	0x408fffff
 8026810:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8026814:	f04f 0200 	mov.w	r2, #0
 8026818:	da05      	bge.n	8026826 <__ieee754_pow+0x3de>
 802681a:	4bd3      	ldr	r3, [pc, #844]	; (8026b68 <__ieee754_pow+0x720>)
 802681c:	f7d9 ff00 	bl	8000620 <__aeabi_dmul>
 8026820:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8026824:	460c      	mov	r4, r1
 8026826:	1523      	asrs	r3, r4, #20
 8026828:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802682c:	4413      	add	r3, r2
 802682e:	9307      	str	r3, [sp, #28]
 8026830:	4bce      	ldr	r3, [pc, #824]	; (8026b6c <__ieee754_pow+0x724>)
 8026832:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8026836:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802683a:	429c      	cmp	r4, r3
 802683c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8026840:	dd08      	ble.n	8026854 <__ieee754_pow+0x40c>
 8026842:	4bcb      	ldr	r3, [pc, #812]	; (8026b70 <__ieee754_pow+0x728>)
 8026844:	429c      	cmp	r4, r3
 8026846:	f340 815e 	ble.w	8026b06 <__ieee754_pow+0x6be>
 802684a:	9b07      	ldr	r3, [sp, #28]
 802684c:	3301      	adds	r3, #1
 802684e:	9307      	str	r3, [sp, #28]
 8026850:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8026854:	f04f 0a00 	mov.w	sl, #0
 8026858:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802685c:	930c      	str	r3, [sp, #48]	; 0x30
 802685e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026860:	4bc4      	ldr	r3, [pc, #784]	; (8026b74 <__ieee754_pow+0x72c>)
 8026862:	4413      	add	r3, r2
 8026864:	ed93 7b00 	vldr	d7, [r3]
 8026868:	4629      	mov	r1, r5
 802686a:	ec53 2b17 	vmov	r2, r3, d7
 802686e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8026872:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026876:	f7d9 fd1f 	bl	80002b8 <__aeabi_dsub>
 802687a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802687e:	4606      	mov	r6, r0
 8026880:	460f      	mov	r7, r1
 8026882:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8026886:	f7d9 fd19 	bl	80002bc <__adddf3>
 802688a:	4602      	mov	r2, r0
 802688c:	460b      	mov	r3, r1
 802688e:	2000      	movs	r0, #0
 8026890:	49b9      	ldr	r1, [pc, #740]	; (8026b78 <__ieee754_pow+0x730>)
 8026892:	f7d9 ffef 	bl	8000874 <__aeabi_ddiv>
 8026896:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802689a:	4602      	mov	r2, r0
 802689c:	460b      	mov	r3, r1
 802689e:	4630      	mov	r0, r6
 80268a0:	4639      	mov	r1, r7
 80268a2:	f7d9 febd 	bl	8000620 <__aeabi_dmul>
 80268a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80268aa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80268ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80268b2:	2300      	movs	r3, #0
 80268b4:	9302      	str	r3, [sp, #8]
 80268b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80268ba:	106d      	asrs	r5, r5, #1
 80268bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80268c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80268c4:	2200      	movs	r2, #0
 80268c6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80268ca:	4640      	mov	r0, r8
 80268cc:	4649      	mov	r1, r9
 80268ce:	4614      	mov	r4, r2
 80268d0:	461d      	mov	r5, r3
 80268d2:	f7d9 fea5 	bl	8000620 <__aeabi_dmul>
 80268d6:	4602      	mov	r2, r0
 80268d8:	460b      	mov	r3, r1
 80268da:	4630      	mov	r0, r6
 80268dc:	4639      	mov	r1, r7
 80268de:	f7d9 fceb 	bl	80002b8 <__aeabi_dsub>
 80268e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80268e6:	4606      	mov	r6, r0
 80268e8:	460f      	mov	r7, r1
 80268ea:	4620      	mov	r0, r4
 80268ec:	4629      	mov	r1, r5
 80268ee:	f7d9 fce3 	bl	80002b8 <__aeabi_dsub>
 80268f2:	4602      	mov	r2, r0
 80268f4:	460b      	mov	r3, r1
 80268f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80268fa:	f7d9 fcdd 	bl	80002b8 <__aeabi_dsub>
 80268fe:	4642      	mov	r2, r8
 8026900:	464b      	mov	r3, r9
 8026902:	f7d9 fe8d 	bl	8000620 <__aeabi_dmul>
 8026906:	4602      	mov	r2, r0
 8026908:	460b      	mov	r3, r1
 802690a:	4630      	mov	r0, r6
 802690c:	4639      	mov	r1, r7
 802690e:	f7d9 fcd3 	bl	80002b8 <__aeabi_dsub>
 8026912:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8026916:	f7d9 fe83 	bl	8000620 <__aeabi_dmul>
 802691a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802691e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026922:	4610      	mov	r0, r2
 8026924:	4619      	mov	r1, r3
 8026926:	f7d9 fe7b 	bl	8000620 <__aeabi_dmul>
 802692a:	a37b      	add	r3, pc, #492	; (adr r3, 8026b18 <__ieee754_pow+0x6d0>)
 802692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026930:	4604      	mov	r4, r0
 8026932:	460d      	mov	r5, r1
 8026934:	f7d9 fe74 	bl	8000620 <__aeabi_dmul>
 8026938:	a379      	add	r3, pc, #484	; (adr r3, 8026b20 <__ieee754_pow+0x6d8>)
 802693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802693e:	f7d9 fcbd 	bl	80002bc <__adddf3>
 8026942:	4622      	mov	r2, r4
 8026944:	462b      	mov	r3, r5
 8026946:	f7d9 fe6b 	bl	8000620 <__aeabi_dmul>
 802694a:	a377      	add	r3, pc, #476	; (adr r3, 8026b28 <__ieee754_pow+0x6e0>)
 802694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026950:	f7d9 fcb4 	bl	80002bc <__adddf3>
 8026954:	4622      	mov	r2, r4
 8026956:	462b      	mov	r3, r5
 8026958:	f7d9 fe62 	bl	8000620 <__aeabi_dmul>
 802695c:	a374      	add	r3, pc, #464	; (adr r3, 8026b30 <__ieee754_pow+0x6e8>)
 802695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026962:	f7d9 fcab 	bl	80002bc <__adddf3>
 8026966:	4622      	mov	r2, r4
 8026968:	462b      	mov	r3, r5
 802696a:	f7d9 fe59 	bl	8000620 <__aeabi_dmul>
 802696e:	a372      	add	r3, pc, #456	; (adr r3, 8026b38 <__ieee754_pow+0x6f0>)
 8026970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026974:	f7d9 fca2 	bl	80002bc <__adddf3>
 8026978:	4622      	mov	r2, r4
 802697a:	462b      	mov	r3, r5
 802697c:	f7d9 fe50 	bl	8000620 <__aeabi_dmul>
 8026980:	a36f      	add	r3, pc, #444	; (adr r3, 8026b40 <__ieee754_pow+0x6f8>)
 8026982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026986:	f7d9 fc99 	bl	80002bc <__adddf3>
 802698a:	4622      	mov	r2, r4
 802698c:	4606      	mov	r6, r0
 802698e:	460f      	mov	r7, r1
 8026990:	462b      	mov	r3, r5
 8026992:	4620      	mov	r0, r4
 8026994:	4629      	mov	r1, r5
 8026996:	f7d9 fe43 	bl	8000620 <__aeabi_dmul>
 802699a:	4602      	mov	r2, r0
 802699c:	460b      	mov	r3, r1
 802699e:	4630      	mov	r0, r6
 80269a0:	4639      	mov	r1, r7
 80269a2:	f7d9 fe3d 	bl	8000620 <__aeabi_dmul>
 80269a6:	4642      	mov	r2, r8
 80269a8:	4604      	mov	r4, r0
 80269aa:	460d      	mov	r5, r1
 80269ac:	464b      	mov	r3, r9
 80269ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80269b2:	f7d9 fc83 	bl	80002bc <__adddf3>
 80269b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80269ba:	f7d9 fe31 	bl	8000620 <__aeabi_dmul>
 80269be:	4622      	mov	r2, r4
 80269c0:	462b      	mov	r3, r5
 80269c2:	f7d9 fc7b 	bl	80002bc <__adddf3>
 80269c6:	4642      	mov	r2, r8
 80269c8:	4606      	mov	r6, r0
 80269ca:	460f      	mov	r7, r1
 80269cc:	464b      	mov	r3, r9
 80269ce:	4640      	mov	r0, r8
 80269d0:	4649      	mov	r1, r9
 80269d2:	f7d9 fe25 	bl	8000620 <__aeabi_dmul>
 80269d6:	2200      	movs	r2, #0
 80269d8:	4b68      	ldr	r3, [pc, #416]	; (8026b7c <__ieee754_pow+0x734>)
 80269da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80269de:	f7d9 fc6d 	bl	80002bc <__adddf3>
 80269e2:	4632      	mov	r2, r6
 80269e4:	463b      	mov	r3, r7
 80269e6:	f7d9 fc69 	bl	80002bc <__adddf3>
 80269ea:	9802      	ldr	r0, [sp, #8]
 80269ec:	460d      	mov	r5, r1
 80269ee:	4604      	mov	r4, r0
 80269f0:	4602      	mov	r2, r0
 80269f2:	460b      	mov	r3, r1
 80269f4:	4640      	mov	r0, r8
 80269f6:	4649      	mov	r1, r9
 80269f8:	f7d9 fe12 	bl	8000620 <__aeabi_dmul>
 80269fc:	2200      	movs	r2, #0
 80269fe:	4680      	mov	r8, r0
 8026a00:	4689      	mov	r9, r1
 8026a02:	4b5e      	ldr	r3, [pc, #376]	; (8026b7c <__ieee754_pow+0x734>)
 8026a04:	4620      	mov	r0, r4
 8026a06:	4629      	mov	r1, r5
 8026a08:	f7d9 fc56 	bl	80002b8 <__aeabi_dsub>
 8026a0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8026a10:	f7d9 fc52 	bl	80002b8 <__aeabi_dsub>
 8026a14:	4602      	mov	r2, r0
 8026a16:	460b      	mov	r3, r1
 8026a18:	4630      	mov	r0, r6
 8026a1a:	4639      	mov	r1, r7
 8026a1c:	f7d9 fc4c 	bl	80002b8 <__aeabi_dsub>
 8026a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026a24:	f7d9 fdfc 	bl	8000620 <__aeabi_dmul>
 8026a28:	4622      	mov	r2, r4
 8026a2a:	4606      	mov	r6, r0
 8026a2c:	460f      	mov	r7, r1
 8026a2e:	462b      	mov	r3, r5
 8026a30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8026a34:	f7d9 fdf4 	bl	8000620 <__aeabi_dmul>
 8026a38:	4602      	mov	r2, r0
 8026a3a:	460b      	mov	r3, r1
 8026a3c:	4630      	mov	r0, r6
 8026a3e:	4639      	mov	r1, r7
 8026a40:	f7d9 fc3c 	bl	80002bc <__adddf3>
 8026a44:	4606      	mov	r6, r0
 8026a46:	460f      	mov	r7, r1
 8026a48:	4602      	mov	r2, r0
 8026a4a:	460b      	mov	r3, r1
 8026a4c:	4640      	mov	r0, r8
 8026a4e:	4649      	mov	r1, r9
 8026a50:	f7d9 fc34 	bl	80002bc <__adddf3>
 8026a54:	9802      	ldr	r0, [sp, #8]
 8026a56:	a33c      	add	r3, pc, #240	; (adr r3, 8026b48 <__ieee754_pow+0x700>)
 8026a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a5c:	4604      	mov	r4, r0
 8026a5e:	460d      	mov	r5, r1
 8026a60:	f7d9 fdde 	bl	8000620 <__aeabi_dmul>
 8026a64:	4642      	mov	r2, r8
 8026a66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026a6a:	464b      	mov	r3, r9
 8026a6c:	4620      	mov	r0, r4
 8026a6e:	4629      	mov	r1, r5
 8026a70:	f7d9 fc22 	bl	80002b8 <__aeabi_dsub>
 8026a74:	4602      	mov	r2, r0
 8026a76:	460b      	mov	r3, r1
 8026a78:	4630      	mov	r0, r6
 8026a7a:	4639      	mov	r1, r7
 8026a7c:	f7d9 fc1c 	bl	80002b8 <__aeabi_dsub>
 8026a80:	a333      	add	r3, pc, #204	; (adr r3, 8026b50 <__ieee754_pow+0x708>)
 8026a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a86:	f7d9 fdcb 	bl	8000620 <__aeabi_dmul>
 8026a8a:	a333      	add	r3, pc, #204	; (adr r3, 8026b58 <__ieee754_pow+0x710>)
 8026a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a90:	4606      	mov	r6, r0
 8026a92:	460f      	mov	r7, r1
 8026a94:	4620      	mov	r0, r4
 8026a96:	4629      	mov	r1, r5
 8026a98:	f7d9 fdc2 	bl	8000620 <__aeabi_dmul>
 8026a9c:	4602      	mov	r2, r0
 8026a9e:	460b      	mov	r3, r1
 8026aa0:	4630      	mov	r0, r6
 8026aa2:	4639      	mov	r1, r7
 8026aa4:	f7d9 fc0a 	bl	80002bc <__adddf3>
 8026aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026aaa:	4b35      	ldr	r3, [pc, #212]	; (8026b80 <__ieee754_pow+0x738>)
 8026aac:	4413      	add	r3, r2
 8026aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ab2:	f7d9 fc03 	bl	80002bc <__adddf3>
 8026ab6:	4604      	mov	r4, r0
 8026ab8:	9807      	ldr	r0, [sp, #28]
 8026aba:	460d      	mov	r5, r1
 8026abc:	f7d9 fd4a 	bl	8000554 <__aeabi_i2d>
 8026ac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026ac2:	4b30      	ldr	r3, [pc, #192]	; (8026b84 <__ieee754_pow+0x73c>)
 8026ac4:	4413      	add	r3, r2
 8026ac6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026aca:	4606      	mov	r6, r0
 8026acc:	460f      	mov	r7, r1
 8026ace:	4622      	mov	r2, r4
 8026ad0:	462b      	mov	r3, r5
 8026ad2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8026ad6:	f7d9 fbf1 	bl	80002bc <__adddf3>
 8026ada:	4642      	mov	r2, r8
 8026adc:	464b      	mov	r3, r9
 8026ade:	f7d9 fbed 	bl	80002bc <__adddf3>
 8026ae2:	4632      	mov	r2, r6
 8026ae4:	463b      	mov	r3, r7
 8026ae6:	f7d9 fbe9 	bl	80002bc <__adddf3>
 8026aea:	9802      	ldr	r0, [sp, #8]
 8026aec:	4632      	mov	r2, r6
 8026aee:	463b      	mov	r3, r7
 8026af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026af4:	f7d9 fbe0 	bl	80002b8 <__aeabi_dsub>
 8026af8:	4642      	mov	r2, r8
 8026afa:	464b      	mov	r3, r9
 8026afc:	f7d9 fbdc 	bl	80002b8 <__aeabi_dsub>
 8026b00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8026b04:	e607      	b.n	8026716 <__ieee754_pow+0x2ce>
 8026b06:	f04f 0a01 	mov.w	sl, #1
 8026b0a:	e6a5      	b.n	8026858 <__ieee754_pow+0x410>
 8026b0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8026b60 <__ieee754_pow+0x718>
 8026b10:	e613      	b.n	802673a <__ieee754_pow+0x2f2>
 8026b12:	bf00      	nop
 8026b14:	f3af 8000 	nop.w
 8026b18:	4a454eef 	.word	0x4a454eef
 8026b1c:	3fca7e28 	.word	0x3fca7e28
 8026b20:	93c9db65 	.word	0x93c9db65
 8026b24:	3fcd864a 	.word	0x3fcd864a
 8026b28:	a91d4101 	.word	0xa91d4101
 8026b2c:	3fd17460 	.word	0x3fd17460
 8026b30:	518f264d 	.word	0x518f264d
 8026b34:	3fd55555 	.word	0x3fd55555
 8026b38:	db6fabff 	.word	0xdb6fabff
 8026b3c:	3fdb6db6 	.word	0x3fdb6db6
 8026b40:	33333303 	.word	0x33333303
 8026b44:	3fe33333 	.word	0x3fe33333
 8026b48:	e0000000 	.word	0xe0000000
 8026b4c:	3feec709 	.word	0x3feec709
 8026b50:	dc3a03fd 	.word	0xdc3a03fd
 8026b54:	3feec709 	.word	0x3feec709
 8026b58:	145b01f5 	.word	0x145b01f5
 8026b5c:	be3e2fe0 	.word	0xbe3e2fe0
 8026b60:	00000000 	.word	0x00000000
 8026b64:	3ff00000 	.word	0x3ff00000
 8026b68:	43400000 	.word	0x43400000
 8026b6c:	0003988e 	.word	0x0003988e
 8026b70:	000bb679 	.word	0x000bb679
 8026b74:	08034580 	.word	0x08034580
 8026b78:	3ff00000 	.word	0x3ff00000
 8026b7c:	40080000 	.word	0x40080000
 8026b80:	080345a0 	.word	0x080345a0
 8026b84:	08034590 	.word	0x08034590
 8026b88:	a3b6      	add	r3, pc, #728	; (adr r3, 8026e64 <__ieee754_pow+0xa1c>)
 8026b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026b8e:	4640      	mov	r0, r8
 8026b90:	4649      	mov	r1, r9
 8026b92:	f7d9 fb93 	bl	80002bc <__adddf3>
 8026b96:	4622      	mov	r2, r4
 8026b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026b9c:	462b      	mov	r3, r5
 8026b9e:	4630      	mov	r0, r6
 8026ba0:	4639      	mov	r1, r7
 8026ba2:	f7d9 fb89 	bl	80002b8 <__aeabi_dsub>
 8026ba6:	4602      	mov	r2, r0
 8026ba8:	460b      	mov	r3, r1
 8026baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8026bae:	f7d9 ffc7 	bl	8000b40 <__aeabi_dcmpgt>
 8026bb2:	2800      	cmp	r0, #0
 8026bb4:	f47f adfe 	bne.w	80267b4 <__ieee754_pow+0x36c>
 8026bb8:	4aa5      	ldr	r2, [pc, #660]	; (8026e50 <__ieee754_pow+0xa08>)
 8026bba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8026bbe:	4293      	cmp	r3, r2
 8026bc0:	f340 810c 	ble.w	8026ddc <__ieee754_pow+0x994>
 8026bc4:	151b      	asrs	r3, r3, #20
 8026bc6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8026bca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8026bce:	fa4a f303 	asr.w	r3, sl, r3
 8026bd2:	445b      	add	r3, fp
 8026bd4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8026bd8:	4e9e      	ldr	r6, [pc, #632]	; (8026e54 <__ieee754_pow+0xa0c>)
 8026bda:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8026bde:	4116      	asrs	r6, r2
 8026be0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8026be4:	2000      	movs	r0, #0
 8026be6:	ea23 0106 	bic.w	r1, r3, r6
 8026bea:	f1c2 0214 	rsb	r2, r2, #20
 8026bee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8026bf2:	fa4a fa02 	asr.w	sl, sl, r2
 8026bf6:	f1bb 0f00 	cmp.w	fp, #0
 8026bfa:	4602      	mov	r2, r0
 8026bfc:	460b      	mov	r3, r1
 8026bfe:	4620      	mov	r0, r4
 8026c00:	4629      	mov	r1, r5
 8026c02:	bfb8      	it	lt
 8026c04:	f1ca 0a00 	rsblt	sl, sl, #0
 8026c08:	f7d9 fb56 	bl	80002b8 <__aeabi_dsub>
 8026c0c:	e9cd 0100 	strd	r0, r1, [sp]
 8026c10:	4642      	mov	r2, r8
 8026c12:	464b      	mov	r3, r9
 8026c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026c18:	f7d9 fb50 	bl	80002bc <__adddf3>
 8026c1c:	2000      	movs	r0, #0
 8026c1e:	a37a      	add	r3, pc, #488	; (adr r3, 8026e08 <__ieee754_pow+0x9c0>)
 8026c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c24:	4604      	mov	r4, r0
 8026c26:	460d      	mov	r5, r1
 8026c28:	f7d9 fcfa 	bl	8000620 <__aeabi_dmul>
 8026c2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026c30:	4606      	mov	r6, r0
 8026c32:	460f      	mov	r7, r1
 8026c34:	4620      	mov	r0, r4
 8026c36:	4629      	mov	r1, r5
 8026c38:	f7d9 fb3e 	bl	80002b8 <__aeabi_dsub>
 8026c3c:	4602      	mov	r2, r0
 8026c3e:	460b      	mov	r3, r1
 8026c40:	4640      	mov	r0, r8
 8026c42:	4649      	mov	r1, r9
 8026c44:	f7d9 fb38 	bl	80002b8 <__aeabi_dsub>
 8026c48:	a371      	add	r3, pc, #452	; (adr r3, 8026e10 <__ieee754_pow+0x9c8>)
 8026c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c4e:	f7d9 fce7 	bl	8000620 <__aeabi_dmul>
 8026c52:	a371      	add	r3, pc, #452	; (adr r3, 8026e18 <__ieee754_pow+0x9d0>)
 8026c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c58:	4680      	mov	r8, r0
 8026c5a:	4689      	mov	r9, r1
 8026c5c:	4620      	mov	r0, r4
 8026c5e:	4629      	mov	r1, r5
 8026c60:	f7d9 fcde 	bl	8000620 <__aeabi_dmul>
 8026c64:	4602      	mov	r2, r0
 8026c66:	460b      	mov	r3, r1
 8026c68:	4640      	mov	r0, r8
 8026c6a:	4649      	mov	r1, r9
 8026c6c:	f7d9 fb26 	bl	80002bc <__adddf3>
 8026c70:	4604      	mov	r4, r0
 8026c72:	460d      	mov	r5, r1
 8026c74:	4602      	mov	r2, r0
 8026c76:	460b      	mov	r3, r1
 8026c78:	4630      	mov	r0, r6
 8026c7a:	4639      	mov	r1, r7
 8026c7c:	f7d9 fb1e 	bl	80002bc <__adddf3>
 8026c80:	4632      	mov	r2, r6
 8026c82:	463b      	mov	r3, r7
 8026c84:	4680      	mov	r8, r0
 8026c86:	4689      	mov	r9, r1
 8026c88:	f7d9 fb16 	bl	80002b8 <__aeabi_dsub>
 8026c8c:	4602      	mov	r2, r0
 8026c8e:	460b      	mov	r3, r1
 8026c90:	4620      	mov	r0, r4
 8026c92:	4629      	mov	r1, r5
 8026c94:	f7d9 fb10 	bl	80002b8 <__aeabi_dsub>
 8026c98:	4642      	mov	r2, r8
 8026c9a:	4606      	mov	r6, r0
 8026c9c:	460f      	mov	r7, r1
 8026c9e:	464b      	mov	r3, r9
 8026ca0:	4640      	mov	r0, r8
 8026ca2:	4649      	mov	r1, r9
 8026ca4:	f7d9 fcbc 	bl	8000620 <__aeabi_dmul>
 8026ca8:	a35d      	add	r3, pc, #372	; (adr r3, 8026e20 <__ieee754_pow+0x9d8>)
 8026caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026cae:	4604      	mov	r4, r0
 8026cb0:	460d      	mov	r5, r1
 8026cb2:	f7d9 fcb5 	bl	8000620 <__aeabi_dmul>
 8026cb6:	a35c      	add	r3, pc, #368	; (adr r3, 8026e28 <__ieee754_pow+0x9e0>)
 8026cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026cbc:	f7d9 fafc 	bl	80002b8 <__aeabi_dsub>
 8026cc0:	4622      	mov	r2, r4
 8026cc2:	462b      	mov	r3, r5
 8026cc4:	f7d9 fcac 	bl	8000620 <__aeabi_dmul>
 8026cc8:	a359      	add	r3, pc, #356	; (adr r3, 8026e30 <__ieee754_pow+0x9e8>)
 8026cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026cce:	f7d9 faf5 	bl	80002bc <__adddf3>
 8026cd2:	4622      	mov	r2, r4
 8026cd4:	462b      	mov	r3, r5
 8026cd6:	f7d9 fca3 	bl	8000620 <__aeabi_dmul>
 8026cda:	a357      	add	r3, pc, #348	; (adr r3, 8026e38 <__ieee754_pow+0x9f0>)
 8026cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ce0:	f7d9 faea 	bl	80002b8 <__aeabi_dsub>
 8026ce4:	4622      	mov	r2, r4
 8026ce6:	462b      	mov	r3, r5
 8026ce8:	f7d9 fc9a 	bl	8000620 <__aeabi_dmul>
 8026cec:	a354      	add	r3, pc, #336	; (adr r3, 8026e40 <__ieee754_pow+0x9f8>)
 8026cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026cf2:	f7d9 fae3 	bl	80002bc <__adddf3>
 8026cf6:	4622      	mov	r2, r4
 8026cf8:	462b      	mov	r3, r5
 8026cfa:	f7d9 fc91 	bl	8000620 <__aeabi_dmul>
 8026cfe:	4602      	mov	r2, r0
 8026d00:	460b      	mov	r3, r1
 8026d02:	4640      	mov	r0, r8
 8026d04:	4649      	mov	r1, r9
 8026d06:	f7d9 fad7 	bl	80002b8 <__aeabi_dsub>
 8026d0a:	4604      	mov	r4, r0
 8026d0c:	460d      	mov	r5, r1
 8026d0e:	4602      	mov	r2, r0
 8026d10:	460b      	mov	r3, r1
 8026d12:	4640      	mov	r0, r8
 8026d14:	4649      	mov	r1, r9
 8026d16:	f7d9 fc83 	bl	8000620 <__aeabi_dmul>
 8026d1a:	2200      	movs	r2, #0
 8026d1c:	e9cd 0100 	strd	r0, r1, [sp]
 8026d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8026d24:	4620      	mov	r0, r4
 8026d26:	4629      	mov	r1, r5
 8026d28:	f7d9 fac6 	bl	80002b8 <__aeabi_dsub>
 8026d2c:	4602      	mov	r2, r0
 8026d2e:	460b      	mov	r3, r1
 8026d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026d34:	f7d9 fd9e 	bl	8000874 <__aeabi_ddiv>
 8026d38:	4632      	mov	r2, r6
 8026d3a:	4604      	mov	r4, r0
 8026d3c:	460d      	mov	r5, r1
 8026d3e:	463b      	mov	r3, r7
 8026d40:	4640      	mov	r0, r8
 8026d42:	4649      	mov	r1, r9
 8026d44:	f7d9 fc6c 	bl	8000620 <__aeabi_dmul>
 8026d48:	4632      	mov	r2, r6
 8026d4a:	463b      	mov	r3, r7
 8026d4c:	f7d9 fab6 	bl	80002bc <__adddf3>
 8026d50:	4602      	mov	r2, r0
 8026d52:	460b      	mov	r3, r1
 8026d54:	4620      	mov	r0, r4
 8026d56:	4629      	mov	r1, r5
 8026d58:	f7d9 faae 	bl	80002b8 <__aeabi_dsub>
 8026d5c:	4642      	mov	r2, r8
 8026d5e:	464b      	mov	r3, r9
 8026d60:	f7d9 faaa 	bl	80002b8 <__aeabi_dsub>
 8026d64:	4602      	mov	r2, r0
 8026d66:	460b      	mov	r3, r1
 8026d68:	2000      	movs	r0, #0
 8026d6a:	493b      	ldr	r1, [pc, #236]	; (8026e58 <__ieee754_pow+0xa10>)
 8026d6c:	f7d9 faa4 	bl	80002b8 <__aeabi_dsub>
 8026d70:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8026d74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8026d78:	4602      	mov	r2, r0
 8026d7a:	460b      	mov	r3, r1
 8026d7c:	da31      	bge.n	8026de2 <__ieee754_pow+0x99a>
 8026d7e:	4650      	mov	r0, sl
 8026d80:	ec43 2b10 	vmov	d0, r2, r3
 8026d84:	f000 fa0c 	bl	80271a0 <scalbn>
 8026d88:	ec51 0b10 	vmov	r0, r1, d0
 8026d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026d90:	f7ff bbf1 	b.w	8026576 <__ieee754_pow+0x12e>
 8026d94:	4b31      	ldr	r3, [pc, #196]	; (8026e5c <__ieee754_pow+0xa14>)
 8026d96:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8026d9a:	429e      	cmp	r6, r3
 8026d9c:	f77f af0c 	ble.w	8026bb8 <__ieee754_pow+0x770>
 8026da0:	4b2f      	ldr	r3, [pc, #188]	; (8026e60 <__ieee754_pow+0xa18>)
 8026da2:	440b      	add	r3, r1
 8026da4:	4303      	orrs	r3, r0
 8026da6:	d00b      	beq.n	8026dc0 <__ieee754_pow+0x978>
 8026da8:	a327      	add	r3, pc, #156	; (adr r3, 8026e48 <__ieee754_pow+0xa00>)
 8026daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026db2:	f7d9 fc35 	bl	8000620 <__aeabi_dmul>
 8026db6:	a324      	add	r3, pc, #144	; (adr r3, 8026e48 <__ieee754_pow+0xa00>)
 8026db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026dbc:	f7ff bbdb 	b.w	8026576 <__ieee754_pow+0x12e>
 8026dc0:	4622      	mov	r2, r4
 8026dc2:	462b      	mov	r3, r5
 8026dc4:	f7d9 fa78 	bl	80002b8 <__aeabi_dsub>
 8026dc8:	4602      	mov	r2, r0
 8026dca:	460b      	mov	r3, r1
 8026dcc:	4640      	mov	r0, r8
 8026dce:	4649      	mov	r1, r9
 8026dd0:	f7d9 fea2 	bl	8000b18 <__aeabi_dcmple>
 8026dd4:	2800      	cmp	r0, #0
 8026dd6:	f43f aeef 	beq.w	8026bb8 <__ieee754_pow+0x770>
 8026dda:	e7e5      	b.n	8026da8 <__ieee754_pow+0x960>
 8026ddc:	f04f 0a00 	mov.w	sl, #0
 8026de0:	e716      	b.n	8026c10 <__ieee754_pow+0x7c8>
 8026de2:	4621      	mov	r1, r4
 8026de4:	e7d2      	b.n	8026d8c <__ieee754_pow+0x944>
 8026de6:	2000      	movs	r0, #0
 8026de8:	491b      	ldr	r1, [pc, #108]	; (8026e58 <__ieee754_pow+0xa10>)
 8026dea:	f7ff bb8d 	b.w	8026508 <__ieee754_pow+0xc0>
 8026dee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026df2:	f7ff bb89 	b.w	8026508 <__ieee754_pow+0xc0>
 8026df6:	4630      	mov	r0, r6
 8026df8:	4639      	mov	r1, r7
 8026dfa:	f7ff bb85 	b.w	8026508 <__ieee754_pow+0xc0>
 8026dfe:	4693      	mov	fp, r2
 8026e00:	f7ff bb96 	b.w	8026530 <__ieee754_pow+0xe8>
 8026e04:	f3af 8000 	nop.w
 8026e08:	00000000 	.word	0x00000000
 8026e0c:	3fe62e43 	.word	0x3fe62e43
 8026e10:	fefa39ef 	.word	0xfefa39ef
 8026e14:	3fe62e42 	.word	0x3fe62e42
 8026e18:	0ca86c39 	.word	0x0ca86c39
 8026e1c:	be205c61 	.word	0xbe205c61
 8026e20:	72bea4d0 	.word	0x72bea4d0
 8026e24:	3e663769 	.word	0x3e663769
 8026e28:	c5d26bf1 	.word	0xc5d26bf1
 8026e2c:	3ebbbd41 	.word	0x3ebbbd41
 8026e30:	af25de2c 	.word	0xaf25de2c
 8026e34:	3f11566a 	.word	0x3f11566a
 8026e38:	16bebd93 	.word	0x16bebd93
 8026e3c:	3f66c16c 	.word	0x3f66c16c
 8026e40:	5555553e 	.word	0x5555553e
 8026e44:	3fc55555 	.word	0x3fc55555
 8026e48:	c2f8f359 	.word	0xc2f8f359
 8026e4c:	01a56e1f 	.word	0x01a56e1f
 8026e50:	3fe00000 	.word	0x3fe00000
 8026e54:	000fffff 	.word	0x000fffff
 8026e58:	3ff00000 	.word	0x3ff00000
 8026e5c:	4090cbff 	.word	0x4090cbff
 8026e60:	3f6f3400 	.word	0x3f6f3400
 8026e64:	652b82fe 	.word	0x652b82fe
 8026e68:	3c971547 	.word	0x3c971547

08026e6c <__ieee754_sqrt>:
 8026e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026e70:	ec55 4b10 	vmov	r4, r5, d0
 8026e74:	4e54      	ldr	r6, [pc, #336]	; (8026fc8 <__ieee754_sqrt+0x15c>)
 8026e76:	43ae      	bics	r6, r5
 8026e78:	ee10 0a10 	vmov	r0, s0
 8026e7c:	462b      	mov	r3, r5
 8026e7e:	462a      	mov	r2, r5
 8026e80:	4621      	mov	r1, r4
 8026e82:	d113      	bne.n	8026eac <__ieee754_sqrt+0x40>
 8026e84:	ee10 2a10 	vmov	r2, s0
 8026e88:	462b      	mov	r3, r5
 8026e8a:	ee10 0a10 	vmov	r0, s0
 8026e8e:	4629      	mov	r1, r5
 8026e90:	f7d9 fbc6 	bl	8000620 <__aeabi_dmul>
 8026e94:	4602      	mov	r2, r0
 8026e96:	460b      	mov	r3, r1
 8026e98:	4620      	mov	r0, r4
 8026e9a:	4629      	mov	r1, r5
 8026e9c:	f7d9 fa0e 	bl	80002bc <__adddf3>
 8026ea0:	4604      	mov	r4, r0
 8026ea2:	460d      	mov	r5, r1
 8026ea4:	ec45 4b10 	vmov	d0, r4, r5
 8026ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026eac:	2d00      	cmp	r5, #0
 8026eae:	dc10      	bgt.n	8026ed2 <__ieee754_sqrt+0x66>
 8026eb0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8026eb4:	4330      	orrs	r0, r6
 8026eb6:	d0f5      	beq.n	8026ea4 <__ieee754_sqrt+0x38>
 8026eb8:	b15d      	cbz	r5, 8026ed2 <__ieee754_sqrt+0x66>
 8026eba:	ee10 2a10 	vmov	r2, s0
 8026ebe:	462b      	mov	r3, r5
 8026ec0:	4620      	mov	r0, r4
 8026ec2:	4629      	mov	r1, r5
 8026ec4:	f7d9 f9f8 	bl	80002b8 <__aeabi_dsub>
 8026ec8:	4602      	mov	r2, r0
 8026eca:	460b      	mov	r3, r1
 8026ecc:	f7d9 fcd2 	bl	8000874 <__aeabi_ddiv>
 8026ed0:	e7e6      	b.n	8026ea0 <__ieee754_sqrt+0x34>
 8026ed2:	151b      	asrs	r3, r3, #20
 8026ed4:	d10c      	bne.n	8026ef0 <__ieee754_sqrt+0x84>
 8026ed6:	2a00      	cmp	r2, #0
 8026ed8:	d06d      	beq.n	8026fb6 <__ieee754_sqrt+0x14a>
 8026eda:	2000      	movs	r0, #0
 8026edc:	02d6      	lsls	r6, r2, #11
 8026ede:	d56e      	bpl.n	8026fbe <__ieee754_sqrt+0x152>
 8026ee0:	1e44      	subs	r4, r0, #1
 8026ee2:	1b1b      	subs	r3, r3, r4
 8026ee4:	f1c0 0420 	rsb	r4, r0, #32
 8026ee8:	fa21 f404 	lsr.w	r4, r1, r4
 8026eec:	4322      	orrs	r2, r4
 8026eee:	4081      	lsls	r1, r0
 8026ef0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8026ef4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8026ef8:	07dd      	lsls	r5, r3, #31
 8026efa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8026efe:	bf42      	ittt	mi
 8026f00:	0052      	lslmi	r2, r2, #1
 8026f02:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8026f06:	0049      	lslmi	r1, r1, #1
 8026f08:	1058      	asrs	r0, r3, #1
 8026f0a:	2500      	movs	r5, #0
 8026f0c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8026f10:	441a      	add	r2, r3
 8026f12:	0049      	lsls	r1, r1, #1
 8026f14:	2316      	movs	r3, #22
 8026f16:	462c      	mov	r4, r5
 8026f18:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8026f1c:	19a7      	adds	r7, r4, r6
 8026f1e:	4297      	cmp	r7, r2
 8026f20:	bfde      	ittt	le
 8026f22:	1bd2      	suble	r2, r2, r7
 8026f24:	19bc      	addle	r4, r7, r6
 8026f26:	19ad      	addle	r5, r5, r6
 8026f28:	0052      	lsls	r2, r2, #1
 8026f2a:	3b01      	subs	r3, #1
 8026f2c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8026f30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8026f34:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8026f38:	d1f0      	bne.n	8026f1c <__ieee754_sqrt+0xb0>
 8026f3a:	f04f 0e20 	mov.w	lr, #32
 8026f3e:	469c      	mov	ip, r3
 8026f40:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8026f44:	42a2      	cmp	r2, r4
 8026f46:	eb06 070c 	add.w	r7, r6, ip
 8026f4a:	dc02      	bgt.n	8026f52 <__ieee754_sqrt+0xe6>
 8026f4c:	d112      	bne.n	8026f74 <__ieee754_sqrt+0x108>
 8026f4e:	428f      	cmp	r7, r1
 8026f50:	d810      	bhi.n	8026f74 <__ieee754_sqrt+0x108>
 8026f52:	2f00      	cmp	r7, #0
 8026f54:	eb07 0c06 	add.w	ip, r7, r6
 8026f58:	da34      	bge.n	8026fc4 <__ieee754_sqrt+0x158>
 8026f5a:	f1bc 0f00 	cmp.w	ip, #0
 8026f5e:	db31      	blt.n	8026fc4 <__ieee754_sqrt+0x158>
 8026f60:	f104 0801 	add.w	r8, r4, #1
 8026f64:	1b12      	subs	r2, r2, r4
 8026f66:	428f      	cmp	r7, r1
 8026f68:	bf88      	it	hi
 8026f6a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8026f6e:	1bc9      	subs	r1, r1, r7
 8026f70:	4433      	add	r3, r6
 8026f72:	4644      	mov	r4, r8
 8026f74:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8026f78:	f1be 0e01 	subs.w	lr, lr, #1
 8026f7c:	443a      	add	r2, r7
 8026f7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8026f82:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8026f86:	d1dd      	bne.n	8026f44 <__ieee754_sqrt+0xd8>
 8026f88:	430a      	orrs	r2, r1
 8026f8a:	d006      	beq.n	8026f9a <__ieee754_sqrt+0x12e>
 8026f8c:	1c5c      	adds	r4, r3, #1
 8026f8e:	bf13      	iteet	ne
 8026f90:	3301      	addne	r3, #1
 8026f92:	3501      	addeq	r5, #1
 8026f94:	4673      	moveq	r3, lr
 8026f96:	f023 0301 	bicne.w	r3, r3, #1
 8026f9a:	106a      	asrs	r2, r5, #1
 8026f9c:	085b      	lsrs	r3, r3, #1
 8026f9e:	07e9      	lsls	r1, r5, #31
 8026fa0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8026fa4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8026fa8:	bf48      	it	mi
 8026faa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8026fae:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8026fb2:	461c      	mov	r4, r3
 8026fb4:	e776      	b.n	8026ea4 <__ieee754_sqrt+0x38>
 8026fb6:	0aca      	lsrs	r2, r1, #11
 8026fb8:	3b15      	subs	r3, #21
 8026fba:	0549      	lsls	r1, r1, #21
 8026fbc:	e78b      	b.n	8026ed6 <__ieee754_sqrt+0x6a>
 8026fbe:	0052      	lsls	r2, r2, #1
 8026fc0:	3001      	adds	r0, #1
 8026fc2:	e78b      	b.n	8026edc <__ieee754_sqrt+0x70>
 8026fc4:	46a0      	mov	r8, r4
 8026fc6:	e7cd      	b.n	8026f64 <__ieee754_sqrt+0xf8>
 8026fc8:	7ff00000 	.word	0x7ff00000

08026fcc <__ieee754_sqrtf>:
 8026fcc:	ee10 2a10 	vmov	r2, s0
 8026fd0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8026fd4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026fd8:	b570      	push	{r4, r5, r6, lr}
 8026fda:	d302      	bcc.n	8026fe2 <__ieee754_sqrtf+0x16>
 8026fdc:	eea0 0a00 	vfma.f32	s0, s0, s0
 8026fe0:	bd70      	pop	{r4, r5, r6, pc}
 8026fe2:	b3b1      	cbz	r1, 8027052 <__ieee754_sqrtf+0x86>
 8026fe4:	2a00      	cmp	r2, #0
 8026fe6:	da04      	bge.n	8026ff2 <__ieee754_sqrtf+0x26>
 8026fe8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8026fec:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8026ff0:	bd70      	pop	{r4, r5, r6, pc}
 8026ff2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8026ff6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8026ffa:	d204      	bcs.n	8027006 <__ieee754_sqrtf+0x3a>
 8026ffc:	2100      	movs	r1, #0
 8026ffe:	0210      	lsls	r0, r2, #8
 8027000:	d528      	bpl.n	8027054 <__ieee754_sqrtf+0x88>
 8027002:	3901      	subs	r1, #1
 8027004:	1a5b      	subs	r3, r3, r1
 8027006:	3b7f      	subs	r3, #127	; 0x7f
 8027008:	f3c2 0216 	ubfx	r2, r2, #0, #23
 802700c:	07d9      	lsls	r1, r3, #31
 802700e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8027012:	bf48      	it	mi
 8027014:	0052      	lslmi	r2, r2, #1
 8027016:	1059      	asrs	r1, r3, #1
 8027018:	2300      	movs	r3, #0
 802701a:	0052      	lsls	r2, r2, #1
 802701c:	2419      	movs	r4, #25
 802701e:	461e      	mov	r6, r3
 8027020:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8027024:	1835      	adds	r5, r6, r0
 8027026:	4295      	cmp	r5, r2
 8027028:	bfde      	ittt	le
 802702a:	182e      	addle	r6, r5, r0
 802702c:	1b52      	suble	r2, r2, r5
 802702e:	181b      	addle	r3, r3, r0
 8027030:	3c01      	subs	r4, #1
 8027032:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027036:	ea4f 0050 	mov.w	r0, r0, lsr #1
 802703a:	d1f3      	bne.n	8027024 <__ieee754_sqrtf+0x58>
 802703c:	b112      	cbz	r2, 8027044 <__ieee754_sqrtf+0x78>
 802703e:	3301      	adds	r3, #1
 8027040:	f023 0301 	bic.w	r3, r3, #1
 8027044:	105b      	asrs	r3, r3, #1
 8027046:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 802704a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 802704e:	ee00 3a10 	vmov	s0, r3
 8027052:	bd70      	pop	{r4, r5, r6, pc}
 8027054:	0052      	lsls	r2, r2, #1
 8027056:	3101      	adds	r1, #1
 8027058:	e7d1      	b.n	8026ffe <__ieee754_sqrtf+0x32>

0802705a <fabs>:
 802705a:	ec53 2b10 	vmov	r2, r3, d0
 802705e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027062:	ec43 2b10 	vmov	d0, r2, r3
 8027066:	4770      	bx	lr

08027068 <finite>:
 8027068:	ee10 3a90 	vmov	r3, s1
 802706c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8027070:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8027074:	0fc0      	lsrs	r0, r0, #31
 8027076:	4770      	bx	lr

08027078 <matherr>:
 8027078:	2000      	movs	r0, #0
 802707a:	4770      	bx	lr
 802707c:	0000      	movs	r0, r0
	...

08027080 <nan>:
 8027080:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8027088 <nan+0x8>
 8027084:	4770      	bx	lr
 8027086:	bf00      	nop
 8027088:	00000000 	.word	0x00000000
 802708c:	7ff80000 	.word	0x7ff80000

08027090 <rint>:
 8027090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027092:	ec51 0b10 	vmov	r0, r1, d0
 8027096:	f3c1 540a 	ubfx	r4, r1, #20, #11
 802709a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 802709e:	2e13      	cmp	r6, #19
 80270a0:	ee10 7a10 	vmov	r7, s0
 80270a4:	460b      	mov	r3, r1
 80270a6:	4602      	mov	r2, r0
 80270a8:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80270ac:	dc58      	bgt.n	8027160 <rint+0xd0>
 80270ae:	2e00      	cmp	r6, #0
 80270b0:	da2b      	bge.n	802710a <rint+0x7a>
 80270b2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80270b6:	4302      	orrs	r2, r0
 80270b8:	d023      	beq.n	8027102 <rint+0x72>
 80270ba:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80270be:	4302      	orrs	r2, r0
 80270c0:	4251      	negs	r1, r2
 80270c2:	4311      	orrs	r1, r2
 80270c4:	0b09      	lsrs	r1, r1, #12
 80270c6:	0c5b      	lsrs	r3, r3, #17
 80270c8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80270cc:	045b      	lsls	r3, r3, #17
 80270ce:	ea41 0703 	orr.w	r7, r1, r3
 80270d2:	4b31      	ldr	r3, [pc, #196]	; (8027198 <rint+0x108>)
 80270d4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80270d8:	4639      	mov	r1, r7
 80270da:	e9d3 6700 	ldrd	r6, r7, [r3]
 80270de:	ee10 0a10 	vmov	r0, s0
 80270e2:	4632      	mov	r2, r6
 80270e4:	463b      	mov	r3, r7
 80270e6:	f7d9 f8e9 	bl	80002bc <__adddf3>
 80270ea:	e9cd 0100 	strd	r0, r1, [sp]
 80270ee:	463b      	mov	r3, r7
 80270f0:	4632      	mov	r2, r6
 80270f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80270f6:	f7d9 f8df 	bl	80002b8 <__aeabi_dsub>
 80270fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80270fe:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8027102:	ec41 0b10 	vmov	d0, r0, r1
 8027106:	b003      	add	sp, #12
 8027108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802710a:	4c24      	ldr	r4, [pc, #144]	; (802719c <rint+0x10c>)
 802710c:	4134      	asrs	r4, r6
 802710e:	ea01 0704 	and.w	r7, r1, r4
 8027112:	4307      	orrs	r7, r0
 8027114:	d0f5      	beq.n	8027102 <rint+0x72>
 8027116:	0861      	lsrs	r1, r4, #1
 8027118:	ea03 0001 	and.w	r0, r3, r1
 802711c:	4302      	orrs	r2, r0
 802711e:	d00b      	beq.n	8027138 <rint+0xa8>
 8027120:	ea23 0101 	bic.w	r1, r3, r1
 8027124:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8027128:	2e13      	cmp	r6, #19
 802712a:	fa43 f306 	asr.w	r3, r3, r6
 802712e:	bf0c      	ite	eq
 8027130:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8027134:	2200      	movne	r2, #0
 8027136:	430b      	orrs	r3, r1
 8027138:	4619      	mov	r1, r3
 802713a:	4b17      	ldr	r3, [pc, #92]	; (8027198 <rint+0x108>)
 802713c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8027140:	e9d5 4500 	ldrd	r4, r5, [r5]
 8027144:	4610      	mov	r0, r2
 8027146:	462b      	mov	r3, r5
 8027148:	4622      	mov	r2, r4
 802714a:	f7d9 f8b7 	bl	80002bc <__adddf3>
 802714e:	e9cd 0100 	strd	r0, r1, [sp]
 8027152:	4622      	mov	r2, r4
 8027154:	462b      	mov	r3, r5
 8027156:	e9dd 0100 	ldrd	r0, r1, [sp]
 802715a:	f7d9 f8ad 	bl	80002b8 <__aeabi_dsub>
 802715e:	e7d0      	b.n	8027102 <rint+0x72>
 8027160:	2e33      	cmp	r6, #51	; 0x33
 8027162:	dd08      	ble.n	8027176 <rint+0xe6>
 8027164:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8027168:	d1cb      	bne.n	8027102 <rint+0x72>
 802716a:	ee10 2a10 	vmov	r2, s0
 802716e:	460b      	mov	r3, r1
 8027170:	f7d9 f8a4 	bl	80002bc <__adddf3>
 8027174:	e7c5      	b.n	8027102 <rint+0x72>
 8027176:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 802717a:	f04f 34ff 	mov.w	r4, #4294967295
 802717e:	40f4      	lsrs	r4, r6
 8027180:	4220      	tst	r0, r4
 8027182:	d0be      	beq.n	8027102 <rint+0x72>
 8027184:	0861      	lsrs	r1, r4, #1
 8027186:	420f      	tst	r7, r1
 8027188:	bf1f      	itttt	ne
 802718a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 802718e:	ea27 0101 	bicne.w	r1, r7, r1
 8027192:	4132      	asrne	r2, r6
 8027194:	430a      	orrne	r2, r1
 8027196:	e7cf      	b.n	8027138 <rint+0xa8>
 8027198:	080345b0 	.word	0x080345b0
 802719c:	000fffff 	.word	0x000fffff

080271a0 <scalbn>:
 80271a0:	b570      	push	{r4, r5, r6, lr}
 80271a2:	ec55 4b10 	vmov	r4, r5, d0
 80271a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80271aa:	4606      	mov	r6, r0
 80271ac:	462b      	mov	r3, r5
 80271ae:	b9b2      	cbnz	r2, 80271de <scalbn+0x3e>
 80271b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80271b4:	4323      	orrs	r3, r4
 80271b6:	d03c      	beq.n	8027232 <scalbn+0x92>
 80271b8:	2200      	movs	r2, #0
 80271ba:	4b33      	ldr	r3, [pc, #204]	; (8027288 <scalbn+0xe8>)
 80271bc:	4629      	mov	r1, r5
 80271be:	ee10 0a10 	vmov	r0, s0
 80271c2:	f7d9 fa2d 	bl	8000620 <__aeabi_dmul>
 80271c6:	4a31      	ldr	r2, [pc, #196]	; (802728c <scalbn+0xec>)
 80271c8:	4296      	cmp	r6, r2
 80271ca:	4604      	mov	r4, r0
 80271cc:	460d      	mov	r5, r1
 80271ce:	460b      	mov	r3, r1
 80271d0:	da13      	bge.n	80271fa <scalbn+0x5a>
 80271d2:	a329      	add	r3, pc, #164	; (adr r3, 8027278 <scalbn+0xd8>)
 80271d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271d8:	f7d9 fa22 	bl	8000620 <__aeabi_dmul>
 80271dc:	e00a      	b.n	80271f4 <scalbn+0x54>
 80271de:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80271e2:	428a      	cmp	r2, r1
 80271e4:	d10c      	bne.n	8027200 <scalbn+0x60>
 80271e6:	ee10 2a10 	vmov	r2, s0
 80271ea:	462b      	mov	r3, r5
 80271ec:	4620      	mov	r0, r4
 80271ee:	4629      	mov	r1, r5
 80271f0:	f7d9 f864 	bl	80002bc <__adddf3>
 80271f4:	4604      	mov	r4, r0
 80271f6:	460d      	mov	r5, r1
 80271f8:	e01b      	b.n	8027232 <scalbn+0x92>
 80271fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80271fe:	3a36      	subs	r2, #54	; 0x36
 8027200:	4432      	add	r2, r6
 8027202:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8027206:	428a      	cmp	r2, r1
 8027208:	dd0b      	ble.n	8027222 <scalbn+0x82>
 802720a:	ec45 4b11 	vmov	d1, r4, r5
 802720e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8027280 <scalbn+0xe0>
 8027212:	f000 f83f 	bl	8027294 <copysign>
 8027216:	a31a      	add	r3, pc, #104	; (adr r3, 8027280 <scalbn+0xe0>)
 8027218:	e9d3 2300 	ldrd	r2, r3, [r3]
 802721c:	ec51 0b10 	vmov	r0, r1, d0
 8027220:	e7da      	b.n	80271d8 <scalbn+0x38>
 8027222:	2a00      	cmp	r2, #0
 8027224:	dd08      	ble.n	8027238 <scalbn+0x98>
 8027226:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802722a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802722e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8027232:	ec45 4b10 	vmov	d0, r4, r5
 8027236:	bd70      	pop	{r4, r5, r6, pc}
 8027238:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802723c:	da0d      	bge.n	802725a <scalbn+0xba>
 802723e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8027242:	429e      	cmp	r6, r3
 8027244:	ec45 4b11 	vmov	d1, r4, r5
 8027248:	dce1      	bgt.n	802720e <scalbn+0x6e>
 802724a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8027278 <scalbn+0xd8>
 802724e:	f000 f821 	bl	8027294 <copysign>
 8027252:	a309      	add	r3, pc, #36	; (adr r3, 8027278 <scalbn+0xd8>)
 8027254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027258:	e7e0      	b.n	802721c <scalbn+0x7c>
 802725a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802725e:	3236      	adds	r2, #54	; 0x36
 8027260:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8027264:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8027268:	4620      	mov	r0, r4
 802726a:	4629      	mov	r1, r5
 802726c:	2200      	movs	r2, #0
 802726e:	4b08      	ldr	r3, [pc, #32]	; (8027290 <scalbn+0xf0>)
 8027270:	e7b2      	b.n	80271d8 <scalbn+0x38>
 8027272:	bf00      	nop
 8027274:	f3af 8000 	nop.w
 8027278:	c2f8f359 	.word	0xc2f8f359
 802727c:	01a56e1f 	.word	0x01a56e1f
 8027280:	8800759c 	.word	0x8800759c
 8027284:	7e37e43c 	.word	0x7e37e43c
 8027288:	43500000 	.word	0x43500000
 802728c:	ffff3cb0 	.word	0xffff3cb0
 8027290:	3c900000 	.word	0x3c900000

08027294 <copysign>:
 8027294:	ec53 2b10 	vmov	r2, r3, d0
 8027298:	ee11 0a90 	vmov	r0, s3
 802729c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80272a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80272a4:	ea41 0300 	orr.w	r3, r1, r0
 80272a8:	ec43 2b10 	vmov	d0, r2, r3
 80272ac:	4770      	bx	lr
	...

080272b0 <_init>:
 80272b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272b2:	bf00      	nop
 80272b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80272b6:	bc08      	pop	{r3}
 80272b8:	469e      	mov	lr, r3
 80272ba:	4770      	bx	lr

080272bc <_fini>:
 80272bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272be:	bf00      	nop
 80272c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80272c2:	bc08      	pop	{r3}
 80272c4:	469e      	mov	lr, r3
 80272c6:	4770      	bx	lr
