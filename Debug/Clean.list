
Clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025028  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d338  080251e8  080251e8  000351e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08032520  08032520  00042520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08032528  08032528  00042528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803252c  0803252c  0004252c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000015c4  20000000  08032530  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00094fd8  200015c8  08033af4  000515c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200965a0  08033af4  000565a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000515c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007a037  00000000  00000000  000515f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c3ec  00000000  00000000  000cb62b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002c202  00000000  00000000  000d7a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002f88  00000000  00000000  00103c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004000  00000000  00000000  00106ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001f5ea  00000000  00000000  0010aba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000f389  00000000  00000000  0012a192  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0013951b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a5dc  00000000  00000000  00139598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200015c8 	.word	0x200015c8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080251d0 	.word	0x080251d0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200015cc 	.word	0x200015cc
 80001fc:	080251d0 	.word	0x080251d0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f092 0f00 	teq	r2, #0
 800059a:	bf14      	ite	ne
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e720      	b.n	80003f4 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aedc 	beq.w	80003a2 <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6c1      	b.n	80003a2 <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97a 	b.w	8000fbc <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	9e08      	ldr	r6, [sp, #32]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d151      	bne.n	8000d94 <__udivmoddi4+0xb4>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4617      	mov	r7, r2
 8000cf4:	d96d      	bls.n	8000dd2 <__udivmoddi4+0xf2>
 8000cf6:	fab2 fe82 	clz	lr, r2
 8000cfa:	f1be 0f00 	cmp.w	lr, #0
 8000cfe:	d00b      	beq.n	8000d18 <__udivmoddi4+0x38>
 8000d00:	f1ce 0c20 	rsb	ip, lr, #32
 8000d04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d1c:	0c25      	lsrs	r5, r4, #16
 8000d1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d22:	fa1f f987 	uxth.w	r9, r7
 8000d26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d2e:	fb08 f309 	mul.w	r3, r8, r9
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x6c>
 8000d36:	19ed      	adds	r5, r5, r7
 8000d38:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d3c:	f080 8123 	bcs.w	8000f86 <__udivmoddi4+0x2a6>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	f240 8120 	bls.w	8000f86 <__udivmoddi4+0x2a6>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	1aed      	subs	r5, r5, r3
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb00 f909 	mul.w	r9, r0, r9
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x98>
 8000d64:	19e4      	adds	r4, r4, r7
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 810a 	bcs.w	8000f82 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8107 	bls.w	8000f82 <__udivmoddi4+0x2a2>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 0409 	sub.w	r4, r4, r9
 8000d7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d80:	2100      	movs	r1, #0
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d061      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000d86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	6034      	str	r4, [r6, #0]
 8000d8e:	6073      	str	r3, [r6, #4]
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0xc8>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d054      	beq.n	8000e46 <__udivmoddi4+0x166>
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000da2:	4608      	mov	r0, r1
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	fab3 f183 	clz	r1, r3
 8000dac:	2900      	cmp	r1, #0
 8000dae:	f040 808e 	bne.w	8000ece <__udivmoddi4+0x1ee>
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xdc>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80fa 	bhi.w	8000fb0 <__udivmoddi4+0x2d0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	46ac      	mov	ip, r5
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d03f      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000dca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	b912      	cbnz	r2, 8000dda <__udivmoddi4+0xfa>
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dda:	fab7 fe87 	clz	lr, r7
 8000dde:	f1be 0f00 	cmp.w	lr, #0
 8000de2:	d134      	bne.n	8000e4e <__udivmoddi4+0x16e>
 8000de4:	1beb      	subs	r3, r5, r7
 8000de6:	0c3a      	lsrs	r2, r7, #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000df2:	0c25      	lsrs	r5, r4, #16
 8000df4:	fb02 3318 	mls	r3, r2, r8, r3
 8000df8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfc:	fb0c f308 	mul.w	r3, ip, r8
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x134>
 8000e04:	19ed      	adds	r5, r5, r7
 8000e06:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x132>
 8000e0c:	42ab      	cmp	r3, r5
 8000e0e:	f200 80d1 	bhi.w	8000fb4 <__udivmoddi4+0x2d4>
 8000e12:	4680      	mov	r8, r0
 8000e14:	1aed      	subs	r5, r5, r3
 8000e16:	b2a3      	uxth	r3, r4
 8000e18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e24:	fb0c fc00 	mul.w	ip, ip, r0
 8000e28:	45a4      	cmp	ip, r4
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x15c>
 8000e2c:	19e4      	adds	r4, r4, r7
 8000e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x15a>
 8000e34:	45a4      	cmp	ip, r4
 8000e36:	f200 80b8 	bhi.w	8000faa <__udivmoddi4+0x2ca>
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	eba4 040c 	sub.w	r4, r4, ip
 8000e40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e44:	e79d      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1ce 0420 	rsb	r4, lr, #32
 8000e52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e5e:	0c3a      	lsrs	r2, r7, #16
 8000e60:	fa25 f404 	lsr.w	r4, r5, r4
 8000e64:	ea48 0803 	orr.w	r8, r8, r3
 8000e68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e70:	fb02 4411 	mls	r4, r2, r1, r4
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e86:	d909      	bls.n	8000e9c <__udivmoddi4+0x1bc>
 8000e88:	19ed      	adds	r5, r5, r7
 8000e8a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e8e:	f080 808a 	bcs.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	f240 8087 	bls.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e98:	3902      	subs	r1, #2
 8000e9a:	443d      	add	r5, r7
 8000e9c:	1aeb      	subs	r3, r5, r3
 8000e9e:	fa1f f588 	uxth.w	r5, r8
 8000ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ea6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eaa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000eae:	fb00 f30c 	mul.w	r3, r0, ip
 8000eb2:	42ab      	cmp	r3, r5
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x1e6>
 8000eb6:	19ed      	adds	r5, r5, r7
 8000eb8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebc:	d26f      	bcs.n	8000f9e <__udivmoddi4+0x2be>
 8000ebe:	42ab      	cmp	r3, r5
 8000ec0:	d96d      	bls.n	8000f9e <__udivmoddi4+0x2be>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	1aeb      	subs	r3, r5, r3
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	e78f      	b.n	8000dee <__udivmoddi4+0x10e>
 8000ece:	f1c1 0720 	rsb	r7, r1, #32
 8000ed2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ed6:	408b      	lsls	r3, r1
 8000ed8:	fa05 f401 	lsl.w	r4, r5, r1
 8000edc:	ea48 0303 	orr.w	r3, r8, r3
 8000ee0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ee4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ef2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ef6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000efa:	fa1f f883 	uxth.w	r8, r3
 8000efe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f02:	fb09 f408 	mul.w	r4, r9, r8
 8000f06:	42ac      	cmp	r4, r5
 8000f08:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x244>
 8000f12:	18ed      	adds	r5, r5, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d243      	bcs.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	d941      	bls.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	441d      	add	r5, r3
 8000f24:	1b2d      	subs	r5, r5, r4
 8000f26:	fa1f fe8e 	uxth.w	lr, lr
 8000f2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45a0      	cmp	r8, r4
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x26e>
 8000f3e:	18e4      	adds	r4, r4, r3
 8000f40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f44:	d229      	bcs.n	8000f9a <__udivmoddi4+0x2ba>
 8000f46:	45a0      	cmp	r8, r4
 8000f48:	d927      	bls.n	8000f9a <__udivmoddi4+0x2ba>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	441c      	add	r4, r3
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba4 0408 	sub.w	r4, r4, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454c      	cmp	r4, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	464d      	mov	r5, r9
 8000f60:	d315      	bcc.n	8000f8e <__udivmoddi4+0x2ae>
 8000f62:	d012      	beq.n	8000f8a <__udivmoddi4+0x2aa>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x29c>
 8000f66:	ebba 030e 	subs.w	r3, sl, lr
 8000f6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40cb      	lsrs	r3, r1
 8000f74:	431f      	orrs	r7, r3
 8000f76:	40cc      	lsrs	r4, r1
 8000f78:	6037      	str	r7, [r6, #0]
 8000f7a:	6074      	str	r4, [r6, #4]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	4618      	mov	r0, r3
 8000f84:	e6f8      	b.n	8000d78 <__udivmoddi4+0x98>
 8000f86:	4690      	mov	r8, r2
 8000f88:	e6e0      	b.n	8000d4c <__udivmoddi4+0x6c>
 8000f8a:	45c2      	cmp	sl, r8
 8000f8c:	d2ea      	bcs.n	8000f64 <__udivmoddi4+0x284>
 8000f8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f92:	eb69 0503 	sbc.w	r5, r9, r3
 8000f96:	3801      	subs	r0, #1
 8000f98:	e7e4      	b.n	8000f64 <__udivmoddi4+0x284>
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	e7d7      	b.n	8000f4e <__udivmoddi4+0x26e>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	e791      	b.n	8000ec6 <__udivmoddi4+0x1e6>
 8000fa2:	4681      	mov	r9, r0
 8000fa4:	e7be      	b.n	8000f24 <__udivmoddi4+0x244>
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	e778      	b.n	8000e9c <__udivmoddi4+0x1bc>
 8000faa:	3802      	subs	r0, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	e745      	b.n	8000e3c <__udivmoddi4+0x15c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xe6>
 8000fb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb8:	443d      	add	r5, r7
 8000fba:	e72b      	b.n	8000e14 <__udivmoddi4+0x134>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_InitTick+0x2c>)
{
 8000fc4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd0:	f000 fd34 	bl	8001a3c <HAL_SYSTICK_Config>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b938      	cbnz	r0, 8000fe8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fcde 	bl	80019a0 <HAL_NVIC_SetPriority>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000ed4 	.word	0x20000ed4

08000ff0 <HAL_Init>:
{
 8000ff0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 fcc2 	bl	800197c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ffe1 	bl	8000fc0 <HAL_InitTick>
 8000ffe:	4604      	mov	r4, r0
 8001000:	b918      	cbnz	r0, 800100a <HAL_Init+0x1a>
    HAL_MspInit();
 8001002:	f01e fce1 	bl	801f9c8 <HAL_MspInit>
}
 8001006:	4620      	mov	r0, r4
 8001008:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800100a:	2401      	movs	r4, #1
 800100c:	e7fb      	b.n	8001006 <HAL_Init+0x16>
	...

08001010 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001010:	4a02      	ldr	r2, [pc, #8]	; (800101c <HAL_IncTick+0xc>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20090674 	.word	0x20090674

08001020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <HAL_GetTick+0x8>)
 8001022:	6818      	ldr	r0, [r3, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20090674 	.word	0x20090674

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff6 	bl	8001020 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001034:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001036:	4605      	mov	r5, r0
  {
    wait++;
 8001038:	bf18      	it	ne
 800103a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	4284      	cmp	r4, r0
 8001044:	d8fa      	bhi.n	800103c <HAL_Delay+0x10>
  {
  }
}
 8001046:	bd38      	pop	{r3, r4, r5, pc}

08001048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001048:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800104e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001052:	fab6 f386 	clz	r3, r6
 8001056:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800105a:	40de      	lsrs	r6, r3
 800105c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800105e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001062:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001066:	fa93 f5a3 	rbit	r5, r3
 800106a:	fab5 f585 	clz	r5, r5
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	2407      	movs	r4, #7
 8001074:	fa21 f505 	lsr.w	r5, r1, r5
 8001078:	fa04 f505 	lsl.w	r5, r4, r5
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001084:	40d9      	lsrs	r1, r3
 8001086:	ea24 0405 	bic.w	r4, r4, r5
 800108a:	fa02 f101 	lsl.w	r1, r2, r1
 800108e:	4321      	orrs	r1, r4
 8001090:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001094:	bd70      	pop	{r4, r5, r6, pc}
	...

08001098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109e:	4604      	mov	r4, r0
 80010a0:	2800      	cmp	r0, #0
 80010a2:	f000 80b4 	beq.w	800120e <HAL_ADC_Init+0x176>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80010a8:	b925      	cbnz	r5, 80010b4 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	f01e fdf1 	bl	801fc90 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	6625      	str	r5, [r4, #96]	; 0x60
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010b0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 80010b4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010ba:	bf41      	itttt	mi
 80010bc:	689a      	ldrmi	r2, [r3, #8]
 80010be:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 80010c2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 80010c6:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 80010c8:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010ca:	00d1      	lsls	r1, r2, #3
 80010cc:	d576      	bpl.n	80011bc <HAL_ADC_Init+0x124>
 80010ce:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	f140 808a 	bpl.w	80011ea <HAL_ADC_Init+0x152>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d6:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010da:	06d5      	lsls	r5, r2, #27
 80010dc:	f100 8093 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80010e0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e2:	0751      	lsls	r1, r2, #29
 80010e4:	f100 808f 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010ea:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010ee:	f042 0202 	orr.w	r2, r2, #2
 80010f2:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	2a01      	cmp	r2, #1
 80010fc:	f040 8089 	bne.w	8001212 <HAL_ADC_Init+0x17a>
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	07d2      	lsls	r2, r2, #31
 8001104:	f140 8085 	bpl.w	8001212 <HAL_ADC_Init+0x17a>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8001108:	68e5      	ldr	r5, [r4, #12]
 800110a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 800110c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 800110e:	432a      	orrs	r2, r5
 8001110:	68a5      	ldr	r5, [r4, #8]
 8001112:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001114:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001116:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001118:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800111c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001120:	bf02      	ittt	eq
 8001122:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8001124:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001128:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800112e:	b121      	cbz	r1, 800113a <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001130:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001132:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001136:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001138:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800113a:	68dd      	ldr	r5, [r3, #12]
 800113c:	4939      	ldr	r1, [pc, #228]	; (8001224 <HAL_ADC_Init+0x18c>)
 800113e:	4029      	ands	r1, r5
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	f012 0f0c 	tst.w	r2, #12
 800114a:	d120      	bne.n	800118e <HAL_ADC_Init+0xf6>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800114c:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800114e:	69a5      	ldr	r5, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001150:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001152:	0052      	lsls	r2, r2, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001154:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8001158:	6d25      	ldr	r5, [r4, #80]	; 0x50
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800115a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 800115e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001160:	f021 0106 	bic.w	r1, r1, #6
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8001168:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800116a:	2a01      	cmp	r2, #1
 800116c:	d147      	bne.n	80011fe <HAL_ADC_Init+0x166>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800116e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001170:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001172:	6919      	ldr	r1, [r3, #16]
 8001174:	432a      	orrs	r2, r5
 8001176:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	432a      	orrs	r2, r5
 800117e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001180:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001184:	432a      	orrs	r2, r5
 8001186:	f021 0104 	bic.w	r1, r1, #4
 800118a:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800118c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800118e:	6922      	ldr	r2, [r4, #16]
 8001190:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001192:	bf05      	ittet	eq
 8001194:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001196:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001198:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800119a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800119e:	bf06      	itte	eq
 80011a0:	f021 010f 	biceq.w	r1, r1, #15
 80011a4:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a6:	f022 020f 	bicne.w	r2, r2, #15
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011b8:	b003      	add	sp, #12
 80011ba:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80011bc:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80011be:	491a      	ldr	r1, [pc, #104]	; (8001228 <HAL_ADC_Init+0x190>)
 80011c0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80011c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_ADC_Init+0x194>)
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011d6:	220a      	movs	r2, #10
 80011d8:	434a      	muls	r2, r1
      wait_loop_index--;
 80011da:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80011dc:	9a01      	ldr	r2, [sp, #4]
 80011de:	2a00      	cmp	r2, #0
 80011e0:	f43f af75 	beq.w	80010ce <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80011e4:	9a01      	ldr	r2, [sp, #4]
 80011e6:	3a01      	subs	r2, #1
 80011e8:	e7f7      	b.n	80011da <HAL_ADC_Init+0x142>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011ec:	f042 0210 	orr.w	r2, r2, #16
 80011f0:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	6622      	str	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e76c      	b.n	80010d8 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	e7c2      	b.n	800118c <HAL_ADC_Init+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	e7d2      	b.n	80011b8 <HAL_ADC_Init+0x120>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001212:	4907      	ldr	r1, [pc, #28]	; (8001230 <HAL_ADC_Init+0x198>)
 8001214:	6865      	ldr	r5, [r4, #4]
 8001216:	688a      	ldr	r2, [r1, #8]
 8001218:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800121c:	432a      	orrs	r2, r5
 800121e:	608a      	str	r2, [r1, #8]
 8001220:	e772      	b.n	8001108 <HAL_ADC_Init+0x70>
 8001222:	bf00      	nop
 8001224:	fff0c007 	.word	0xfff0c007
 8001228:	001e8480 	.word	0x001e8480
 800122c:	20000ed4 	.word	0x20000ed4
 8001230:	50040300 	.word	0x50040300

08001234 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001236:	6945      	ldr	r5, [r0, #20]
 8001238:	2d08      	cmp	r5, #8
{
 800123a:	4604      	mov	r4, r0
 800123c:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800123e:	d00a      	beq.n	8001256 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	07dd      	lsls	r5, r3, #31
 8001246:	d505      	bpl.n	8001254 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800124a:	f043 0320 	orr.w	r3, r3, #32
 800124e:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001254:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001256:	f7ff fee3 	bl	8001020 <HAL_GetTick>
 800125a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4215      	tst	r5, r2
 8001262:	d01d      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001264:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800126a:	65e2      	str	r2, [r4, #92]	; 0x5c
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001272:	d10f      	bne.n	8001294 <HAL_ADC_PollForConversion+0x60>
 8001274:	69e2      	ldr	r2, [r4, #28]
 8001276:	b96a      	cbnz	r2, 8001294 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	0711      	lsls	r1, r2, #28
 800127c:	d50a      	bpl.n	8001294 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800127e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001284:	65e2      	str	r2, [r4, #92]	; 0x5c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001286:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001288:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128a:	bf5e      	ittt	pl
 800128c:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 800128e:	f042 0201 	orrpl.w	r2, r2, #1
 8001292:	65e2      	strpl	r2, [r4, #92]	; 0x5c
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001294:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001296:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001298:	d114      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800129a:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800129c:	2000      	movs	r0, #0
}
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012a0:	1c70      	adds	r0, r6, #1
 80012a2:	d0dc      	beq.n	800125e <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012a4:	b946      	cbnz	r6, 80012b8 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 80012ae:	2300      	movs	r3, #0
 80012b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_TIMEOUT;
 80012b4:	2003      	movs	r0, #3
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012b8:	f7ff feb2 	bl	8001020 <HAL_GetTick>
 80012bc:	1bc0      	subs	r0, r0, r7
 80012be:	4286      	cmp	r6, r0
 80012c0:	d2cc      	bcs.n	800125c <HAL_ADC_PollForConversion+0x28>
 80012c2:	e7f0      	b.n	80012a6 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012c4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80012c8:	d1e8      	bne.n	800129c <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012d0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012d0:	6803      	ldr	r3, [r0, #0]
 80012d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80012e2:	2b01      	cmp	r3, #1
{
 80012e4:	4605      	mov	r5, r0
 80012e6:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80012e8:	f000 8168 	beq.w	80015bc <HAL_ADC_ConfigChannel+0x2e4>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f2:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012f4:	6882      	ldr	r2, [r0, #8]
 80012f6:	0757      	lsls	r7, r2, #29
 80012f8:	f100 815a 	bmi.w	80015b0 <HAL_ADC_ConfigChannel+0x2d8>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012fc:	684b      	ldr	r3, [r1, #4]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d808      	bhi.n	8001314 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 8001302:	3b02      	subs	r3, #2
 8001304:	2b03      	cmp	r3, #3
 8001306:	d864      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0xfa>
 8001308:	e8df f003 	tbb	[pc, r3]
 800130c:	605e5c02 	.word	0x605e5c02
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001310:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001312:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001314:	6861      	ldr	r1, [r4, #4]
 8001316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	f401 7640 	and.w	r6, r1, #768	; 0x300
 8001326:	40de      	lsrs	r6, r3
 8001328:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800132c:	f001 011f 	and.w	r1, r1, #31
 8001330:	231f      	movs	r3, #31
 8001332:	fa03 f201 	lsl.w	r2, r3, r1
 8001336:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800133a:	ea23 0302 	bic.w	r3, r3, r2
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001344:	408a      	lsls	r2, r1
 8001346:	4313      	orrs	r3, r2
 8001348:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800134c:	6882      	ldr	r2, [r0, #8]
 800134e:	f012 020c 	ands.w	r2, r2, #12
 8001352:	d126      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001354:	68a3      	ldr	r3, [r4, #8]
 8001356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800135a:	d13c      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800135c:	6821      	ldr	r1, [r4, #0]
 800135e:	f7ff fe73 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001362:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001364:	6953      	ldr	r3, [r2, #20]
 8001366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800136a:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800136c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800136e:	f8d5 e000 	ldr.w	lr, [r5]
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001378:	2e04      	cmp	r6, #4
 800137a:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800137e:	d033      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x110>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001380:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001384:	0048      	lsls	r0, r1, #1
 8001386:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001388:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800138c:	4081      	lsls	r1, r0
 800138e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001392:	4319      	orrs	r1, r3
 8001394:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001398:	4bc5      	ldr	r3, [pc, #788]	; (80016b0 <HAL_ADC_ConfigChannel+0x3d8>)
 800139a:	4003      	ands	r3, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80013a2:	6828      	ldr	r0, [r5, #0]
 80013a4:	6883      	ldr	r3, [r0, #8]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	f040 8108 	bne.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
 80013b0:	6803      	ldr	r3, [r0, #0]
 80013b2:	07de      	lsls	r6, r3, #31
 80013b4:	f140 8104 	bpl.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ba:	2300      	movs	r3, #0
 80013bc:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80013c0:	b003      	add	sp, #12
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80013c4:	2312      	movs	r3, #18
 80013c6:	e7a4      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80013c8:	2318      	movs	r3, #24
 80013ca:	e7a2      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80013cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d0:	e79f      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	e79d      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013d6:	461a      	mov	r2, r3
 80013d8:	6821      	ldr	r1, [r4, #0]
 80013da:	f7ff fe35 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013de:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013e0:	6953      	ldr	r3, [r2, #20]
 80013e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013e6:	e7c0      	b.n	800136a <HAL_ADC_ConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e8:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ec:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80013f0:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80013f4:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d13a      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x19a>
 80013fc:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8001400:	4287      	cmp	r7, r0
 8001402:	f040 8149 	bne.w	8001698 <HAL_ADC_ConfigChannel+0x3c0>
  MODIFY_REG(*preg,
 8001406:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800140a:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800140e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001410:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8001414:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001418:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800141c:	bb9f      	cbnz	r7, 8001486 <HAL_ADC_ConfigChannel+0x1ae>
 800141e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001422:	4283      	cmp	r3, r0
 8001424:	f040 813d 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x3ca>
  MODIFY_REG(*preg,
 8001428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800142c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800142e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001430:	6891      	ldr	r1, [r2, #8]
 8001432:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001436:	f102 0608 	add.w	r6, r2, #8
 800143a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800143e:	bb77      	cbnz	r7, 800149e <HAL_ADC_ConfigChannel+0x1c6>
 8001440:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001444:	4283      	cmp	r3, r0
 8001446:	f040 8147 	bne.w	80016d8 <HAL_ADC_ConfigChannel+0x400>
  MODIFY_REG(*preg,
 800144a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800144e:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001450:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800145c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001460:	bb4e      	cbnz	r6, 80014b6 <HAL_ADC_ConfigChannel+0x1de>
 8001462:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001466:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001468:	bf04      	itt	eq
 800146a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800146e:	6002      	streq	r2, [r0, #0]
 8001470:	e797      	b.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
 8001472:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001476:	fab0 f080 	clz	r0, r0
 800147a:	4287      	cmp	r7, r0
 800147c:	d0c3      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x12e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800147e:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001482:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	4283      	cmp	r3, r0
 8001490:	d0ca      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x150>
 8001492:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001494:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	f102 0608 	add.w	r6, r2, #8
 800149a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	4283      	cmp	r3, r0
 80014a8:	d0cf      	beq.n	800144a <HAL_ADC_ConfigChannel+0x172>
 80014aa:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014ae:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	e7d2      	b.n	8001466 <HAL_ADC_ConfigChannel+0x18e>
 80014c0:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014c4:	fab2 f282 	clz	r2, r2
 80014c8:	3201      	adds	r2, #1
 80014ca:	2a09      	cmp	r2, #9
 80014cc:	d90d      	bls.n	80014ea <HAL_ADC_ConfigChannel+0x212>
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	fab2 f282 	clz	r2, r2
 80014d6:	3201      	adds	r2, #1
 80014d8:	0696      	lsls	r6, r2, #26
 80014da:	fa93 f1a3 	rbit	r1, r3
 80014de:	fab1 f181 	clz	r1, r1
 80014e2:	1c4a      	adds	r2, r1, #1
 80014e4:	2101      	movs	r1, #1
 80014e6:	4091      	lsls	r1, r2
 80014e8:	e016      	b.n	8001518 <HAL_ADC_ConfigChannel+0x240>
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	3201      	adds	r2, #1
 80014f4:	0692      	lsls	r2, r2, #26
 80014f6:	fa93 f1a3 	rbit	r1, r3
 80014fa:	fab1 f181 	clz	r1, r1
 80014fe:	1c4e      	adds	r6, r1, #1
 8001500:	2101      	movs	r1, #1
 8001502:	40b1      	lsls	r1, r6
 8001504:	e07f      	b.n	8001606 <HAL_ADC_ConfigChannel+0x32e>
 8001506:	fa93 f1a3 	rbit	r1, r3
 800150a:	fab1 f181 	clz	r1, r1
 800150e:	3101      	adds	r1, #1
 8001510:	e080      	b.n	8001614 <HAL_ADC_ConfigChannel+0x33c>
 8001512:	4616      	mov	r6, r2
 8001514:	fa01 f10e 	lsl.w	r1, r1, lr
 8001518:	ea41 0206 	orr.w	r2, r1, r6
 800151c:	b94f      	cbnz	r7, 8001532 <HAL_ADC_ConfigChannel+0x25a>
 800151e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001526:	f1a3 011b 	sub.w	r1, r3, #27
 800152a:	0509      	lsls	r1, r1, #20
 800152c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001530:	e073      	b.n	800161a <HAL_ADC_ConfigChannel+0x342>
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	e7f2      	b.n	8001522 <HAL_ADC_ConfigChannel+0x24a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 800153e:	429a      	cmp	r2, r3
 8001540:	d104      	bne.n	800154c <HAL_ADC_ConfigChannel+0x274>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001544:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001546:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800154a:	e072      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 800154c:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800154e:	429a      	cmp	r2, r3
 8001550:	f47f af32 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001554:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001556:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001558:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800155c:	e069      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800155e:	4955      	ldr	r1, [pc, #340]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 8001560:	428a      	cmp	r2, r1
 8001562:	d111      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2b0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001564:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	f47f af26 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 800156c:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001570:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001574:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001578:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800157c:	430b      	orrs	r3, r1
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8001586:	e717      	b.n	80013b8 <HAL_ADC_ConfigChannel+0xe0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001588:	494c      	ldr	r1, [pc, #304]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800158a:	428a      	cmp	r2, r1
 800158c:	f47f af14 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	f47f af10 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001598:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800159c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a0:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80015a8:	430b      	orrs	r3, r1
 80015aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ae:	e7e8      	b.n	8001582 <HAL_ADC_ConfigChannel+0x2aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80015b8:	4618      	mov	r0, r3
 80015ba:	e6fe      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  __HAL_LOCK(hadc);
 80015bc:	2002      	movs	r0, #2
 80015be:	e6ff      	b.n	80013c0 <HAL_ADC_ConfigChannel+0xe8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015c0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80015c2:	4a40      	ldr	r2, [pc, #256]	; (80016c4 <HAL_ADC_ConfigChannel+0x3ec>)
 80015c4:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	f001 0e20 	and.w	lr, r1, #32
 80015ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80015d2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80015d6:	4072      	eors	r2, r6
 80015d8:	403a      	ands	r2, r7
 80015da:	4072      	eors	r2, r6
 80015dc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015e0:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <HAL_ADC_ConfigChannel+0x3f0>)
 80015e2:	4291      	cmp	r1, r2
 80015e4:	d11d      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x34a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015e6:	2f00      	cmp	r7, #0
 80015e8:	f47f af6a 	bne.w	80014c0 <HAL_ADC_ConfigChannel+0x1e8>
 80015ec:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015f0:	f101 0e01 	add.w	lr, r1, #1
 80015f4:	f1be 0f09 	cmp.w	lr, #9
 80015f8:	f04f 0101 	mov.w	r1, #1
 80015fc:	ea4f 628e 	mov.w	r2, lr, lsl #26
 8001600:	d887      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x23a>
 8001602:	fa01 f10e 	lsl.w	r1, r1, lr
 8001606:	430a      	orrs	r2, r1
 8001608:	2f00      	cmp	r7, #0
 800160a:	f47f af7c 	bne.w	8001506 <HAL_ADC_ConfigChannel+0x22e>
 800160e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001618:	0509      	lsls	r1, r1, #20
 800161a:	4311      	orrs	r1, r2
 800161c:	68a2      	ldr	r2, [r4, #8]
 800161e:	f7ff fd13 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 8001626:	429a      	cmp	r2, r3
 8001628:	d188      	bne.n	800153c <HAL_ADC_ConfigChannel+0x264>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001632:	f47f aec1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	6898      	ldr	r0, [r3, #8]
 800163a:	f000 0003 	and.w	r0, r0, #3
 800163e:	2801      	cmp	r0, #1
 8001640:	d102      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x370>
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	07c9      	lsls	r1, r1, #31
 8001646:	d422      	bmi.n	800168e <HAL_ADC_ConfigChannel+0x3b6>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001648:	4920      	ldr	r1, [pc, #128]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 800164a:	428a      	cmp	r2, r1
 800164c:	d187      	bne.n	800155e <HAL_ADC_ConfigChannel+0x286>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	f47f aeb1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001656:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800165a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800165e:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001662:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001666:	430b      	orrs	r3, r1
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_ADC_ConfigChannel+0x3f8>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_ADC_ConfigChannel+0x3fc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fbb3 f2f2 	udiv	r2, r3, r2
 800167a:	2378      	movs	r3, #120	; 0x78
 800167c:	4353      	muls	r3, r2
                wait_loop_index--;
 800167e:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8001680:	9b01      	ldr	r3, [sp, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f43f ae98 	beq.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
                wait_loop_index--;
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	e7f7      	b.n	800167e <HAL_ADC_ConfigChannel+0x3a6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001696:	e690      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001698:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800169c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016a0:	e6bd      	b.n	800141e <HAL_ADC_ConfigChannel+0x146>
 80016a2:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016a4:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	f102 0608 	add.w	r6, r2, #8
 80016aa:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016ae:	e6c7      	b.n	8001440 <HAL_ADC_ConfigChannel+0x168>
 80016b0:	03fff000 	.word	0x03fff000
 80016b4:	cb840000 	.word	0xcb840000
 80016b8:	50040300 	.word	0x50040300
 80016bc:	80000001 	.word	0x80000001
 80016c0:	50040000 	.word	0x50040000
 80016c4:	0007ffff 	.word	0x0007ffff
 80016c8:	407f0000 	.word	0x407f0000
 80016cc:	c7520000 	.word	0xc7520000
 80016d0:	20000ed4 	.word	0x20000ed4
 80016d4:	001e8480 	.word	0x001e8480
 80016d8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016dc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80016e4:	e6bd      	b.n	8001462 <HAL_ADC_ConfigChannel+0x18a>
 80016e6:	bf00      	nop

080016e8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016e8:	6803      	ldr	r3, [r0, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	f012 0f0c 	tst.w	r2, #12
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016f4:	d101      	bne.n	80016fa <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	0190      	lsls	r0, r2, #6
 80016fe:	d52a      	bpl.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 8001700:	69e2      	ldr	r2, [r4, #28]
 8001702:	2a01      	cmp	r2, #1
 8001704:	d127      	bne.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 8001706:	69a2      	ldr	r2, [r4, #24]
 8001708:	2a01      	cmp	r2, #1
 800170a:	d124      	bne.n	8001756 <ADC_ConversionStop+0x6e>
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	0649      	lsls	r1, r1, #25
 8001712:	d514      	bpl.n	800173e <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8001718:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	0756      	lsls	r6, r2, #29
 800171e:	d50a      	bpl.n	8001736 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001720:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001722:	0795      	lsls	r5, r2, #30
 8001724:	d407      	bmi.n	8001736 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800172c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001730:	f042 0210 	orr.w	r2, r2, #16
 8001734:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001736:	2901      	cmp	r1, #1
 8001738:	d10f      	bne.n	800175a <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800173a:	2504      	movs	r5, #4
        break;
 800173c:	e01e      	b.n	800177c <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800173e:	3a01      	subs	r2, #1
 8001740:	d1e5      	bne.n	800170e <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001756:	2902      	cmp	r1, #2
 8001758:	d1df      	bne.n	800171a <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	0710      	lsls	r0, r2, #28
 800175e:	d506      	bpl.n	800176e <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001760:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001762:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001764:	bf5e      	ittt	pl
 8001766:	689a      	ldrpl	r2, [r3, #8]
 8001768:	f042 0220 	orrpl.w	r2, r2, #32
 800176c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 800176e:	2902      	cmp	r1, #2
 8001770:	d003      	beq.n	800177a <ADC_ConversionStop+0x92>
 8001772:	2903      	cmp	r1, #3
 8001774:	d1e1      	bne.n	800173a <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001776:	250c      	movs	r5, #12
 8001778:	e000      	b.n	800177c <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800177a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 800177c:	f7ff fc50 	bl	8001020 <HAL_GetTick>
 8001780:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	421d      	tst	r5, r3
 8001788:	d0b5      	beq.n	80016f6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800178a:	f7ff fc49 	bl	8001020 <HAL_GetTick>
 800178e:	1b80      	subs	r0, r0, r6
 8001790:	2805      	cmp	r0, #5
 8001792:	d9f6      	bls.n	8001782 <ADC_ConversionStop+0x9a>
 8001794:	e7d5      	b.n	8001742 <ADC_ConversionStop+0x5a>
 8001796:	bf00      	nop
 8001798:	0a340001 	.word	0x0a340001

0800179c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800179c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800179e:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a0:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 80017a2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a4:	6893      	ldr	r3, [r2, #8]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
{
 80017ac:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017ae:	d108      	bne.n	80017c2 <ADC_Enable+0x26>
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	07d8      	lsls	r0, r3, #31
 80017b4:	d505      	bpl.n	80017c2 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	b002      	add	sp, #8
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	e012      	b.n	80017e8 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017c2:	6891      	ldr	r1, [r2, #8]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <ADC_Enable+0x94>)
 80017c6:	4219      	tst	r1, r3
 80017c8:	d127      	bne.n	800181a <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 80017ca:	6893      	ldr	r3, [r2, #8]
 80017cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <ADC_Enable+0x98>)
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <ADC_Enable+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80017e4:	230a      	movs	r3, #10
 80017e6:	4353      	muls	r3, r2
      wait_loop_index--;
 80017e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e5      	bne.n	80017bc <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 80017f0:	f7ff fc16 	bl	8001020 <HAL_GetTick>
 80017f4:	4e11      	ldr	r6, [pc, #68]	; (800183c <ADC_Enable+0xa0>)
 80017f6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	07db      	lsls	r3, r3, #31
 80017fe:	d4da      	bmi.n	80017b6 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001800:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 8001802:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8001804:	bf5f      	itttt	pl
 8001806:	6893      	ldrpl	r3, [r2, #8]
 8001808:	4033      	andpl	r3, r6
 800180a:	f043 0301 	orrpl.w	r3, r3, #1
 800180e:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001810:	f7ff fc06 	bl	8001020 <HAL_GetTick>
 8001814:	1b40      	subs	r0, r0, r5
 8001816:	2802      	cmp	r0, #2
 8001818:	d9ee      	bls.n	80017f8 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
 800182c:	e7c4      	b.n	80017b8 <ADC_Enable+0x1c>
 800182e:	bf00      	nop
 8001830:	8000003f 	.word	0x8000003f
 8001834:	20000ed4 	.word	0x20000ed4
 8001838:	001e8480 	.word	0x001e8480
 800183c:	7fffffc0 	.word	0x7fffffc0

08001840 <HAL_ADC_Start>:
{
 8001840:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001842:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001844:	689d      	ldr	r5, [r3, #8]
 8001846:	f015 0504 	ands.w	r5, r5, #4
{
 800184a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800184c:	d13a      	bne.n	80018c4 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 800184e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001852:	2b01      	cmp	r3, #1
 8001854:	d036      	beq.n	80018c4 <HAL_ADC_Start+0x84>
 8001856:	2301      	movs	r3, #1
 8001858:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800185c:	f7ff ff9e 	bl	800179c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001860:	2800      	cmp	r0, #0
 8001862:	d12c      	bne.n	80018be <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001864:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	65e3      	str	r3, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001874:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001876:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800187a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800187e:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	bf48      	it	mi
 8001882:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001884:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8001886:	bf52      	itee	pl
 8001888:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800188a:	f023 0306 	bicmi.w	r3, r3, #6
 800188e:	6623      	strmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001890:	231c      	movs	r3, #28
 8001892:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001894:	2300      	movs	r3, #0
 8001896:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800189a:	68d3      	ldr	r3, [r2, #12]
 800189c:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800189e:	bf41      	itttt	mi
 80018a0:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
 80018a2:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 80018a6:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 80018aa:	65e3      	strmi	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6093      	str	r3, [r2, #8]
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80018be:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80018c4:	2002      	movs	r0, #2
}
 80018c6:	bd38      	pop	{r3, r4, r5, pc}

080018c8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c8:	6802      	ldr	r2, [r0, #0]
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
 80018cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018ce:	6890      	ldr	r0, [r2, #8]
 80018d0:	f000 0003 	and.w	r0, r0, #3
 80018d4:	2801      	cmp	r0, #1
 80018d6:	d001      	beq.n	80018dc <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	07d9      	lsls	r1, r3, #31
 80018e0:	d5fa      	bpl.n	80018d8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018e2:	6893      	ldr	r3, [r2, #8]
 80018e4:	f003 030d 	and.w	r3, r3, #13
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d11f      	bne.n	800192c <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018fc:	2303      	movs	r3, #3
 80018fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001900:	f7ff fb8e 	bl	8001020 <HAL_GetTick>
 8001904:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	07db      	lsls	r3, r3, #31
 800190c:	d5e4      	bpl.n	80018d8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800190e:	f7ff fb87 	bl	8001020 <HAL_GetTick>
 8001912:	1b40      	subs	r0, r0, r5
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f6      	bls.n	8001906 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001920:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800192e:	f043 0310 	orr.w	r3, r3, #16
 8001932:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 800193c:	bd38      	pop	{r3, r4, r5, pc}

0800193e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800193e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001942:	2b01      	cmp	r3, #1
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001948:	d016      	beq.n	8001978 <HAL_ADC_Stop+0x3a>
 800194a:	2301      	movs	r3, #1
 800194c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001950:	2103      	movs	r1, #3
 8001952:	f7ff fec9 	bl	80016e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001956:	b958      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ffb5 	bl	80018c8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800195e:	b938      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001960:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8001970:	2300      	movs	r3, #0
 8001972:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8001976:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001978:	2002      	movs	r0, #2
}
 800197a:	bd10      	pop	{r4, pc}

0800197c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800197e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800198c:	0200      	lsls	r0, r0, #8
 800198e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001992:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001996:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001998:	60d3      	str	r3, [r2, #12]
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b530      	push	{r4, r5, lr}
 80019a4:	68dc      	ldr	r4, [r3, #12]
 80019a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	bf28      	it	cs
 80019b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 0501 	mov.w	r5, #1
 80019bc:	fa05 f303 	lsl.w	r3, r5, r3
 80019c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c4:	bf8c      	ite	hi
 80019c6:	3c03      	subhi	r4, #3
 80019c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ca:	4019      	ands	r1, r3
 80019cc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ce:	fa05 f404 	lsl.w	r4, r5, r4
 80019d2:	3c01      	subs	r4, #1
 80019d4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	ea42 0201 	orr.w	r2, r2, r1
 80019dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	bfaf      	iteee	ge
 80019e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	f000 000f 	andlt.w	r0, r0, #15
 80019ea:	4b06      	ldrlt	r3, [pc, #24]	; (8001a04 <HAL_NVIC_SetPriority+0x64>)
 80019ec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	bfa5      	ittet	ge
 80019f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80019f4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80019fc:	bd30      	pop	{r4, r5, pc}
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000ed14 	.word	0xe000ed14

08001a08 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a08:	0942      	lsrs	r2, r0, #5
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f000 001f 	and.w	r0, r0, #31
 8001a10:	fa03 f000 	lsl.w	r0, r3, r0
 8001a14:	4b01      	ldr	r3, [pc, #4]	; (8001a1c <HAL_NVIC_EnableIRQ+0x14>)
 8001a16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a20:	0943      	lsrs	r3, r0, #5
 8001a22:	2201      	movs	r2, #1
 8001a24:	f000 001f 	and.w	r0, r0, #31
 8001a28:	fa02 f000 	lsl.w	r0, r2, r0
 8001a2c:	3320      	adds	r3, #32
 8001a2e:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <HAL_NVIC_DisableIRQ+0x18>)
 8001a30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	3801      	subs	r0, #1
 8001a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a42:	d20a      	bcs.n	8001a5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a48:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	21f0      	movs	r1, #240	; 0xf0
 8001a4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a68:	0943      	lsrs	r3, r0, #5
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f000 001f 	and.w	r0, r0, #31
 8001a70:	fa02 f000 	lsl.w	r0, r2, r0
 8001a74:	3360      	adds	r3, #96	; 0x60
 8001a76:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001a78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a86:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a88:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a8a:	bf0c      	ite	eq
 8001a8c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a90:	f022 0204 	bicne.w	r2, r2, #4
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	4770      	bx	lr
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a9c:	4770      	bx	lr

08001a9e <HAL_SYSTICK_IRQHandler>:
{
 8001a9e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001aa0:	f7ff fffc 	bl	8001a9c <HAL_SYSTICK_Callback>
 8001aa4:	bd08      	pop	{r3, pc}

08001aa6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa6:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001aaa:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001aac:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001aae:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001ab0:	b114      	cbz	r4, 8001ab8 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab2:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001ab4:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001ab6:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ab8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001aba:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001abc:	f004 051c 	and.w	r5, r4, #28
 8001ac0:	2401      	movs	r4, #1
 8001ac2:	40ac      	lsls	r4, r5
 8001ac4:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ac6:	6804      	ldr	r4, [r0, #0]
 8001ac8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aca:	6883      	ldr	r3, [r0, #8]
 8001acc:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ace:	bf0b      	itete	eq
 8001ad0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ad2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ad4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001ad6:	60e2      	strne	r2, [r4, #12]
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}

08001ada <HAL_DMA_Start_IT>:
{
 8001ada:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001adc:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8001ae0:	2d01      	cmp	r5, #1
{
 8001ae2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001ae4:	d039      	beq.n	8001b5a <HAL_DMA_Start_IT+0x80>
 8001ae6:	2501      	movs	r5, #1
 8001ae8:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aec:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8001af0:	2d01      	cmp	r5, #1
 8001af2:	f04f 0600 	mov.w	r6, #0
 8001af6:	f04f 0502 	mov.w	r5, #2
 8001afa:	d12c      	bne.n	8001b56 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b00:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001b02:	6806      	ldr	r6, [r0, #0]
 8001b04:	6835      	ldr	r5, [r6, #0]
 8001b06:	f025 0501 	bic.w	r5, r5, #1
 8001b0a:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b0c:	f7ff ffcb 	bl	8001aa6 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001b10:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001b12:	6803      	ldr	r3, [r0, #0]
 8001b14:	b1ba      	cbz	r2, 8001b46 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b1c:	601a      	str	r2, [r3, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b20:	6811      	ldr	r1, [r2, #0]
 8001b22:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b24:	bf42      	ittt	mi
 8001b26:	6811      	ldrmi	r1, [r2, #0]
 8001b28:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8001b2c:	6011      	strmi	r1, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001b2e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001b30:	b11a      	cbz	r2, 8001b3a <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b32:	6811      	ldr	r1, [r2, #0]
 8001b34:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001b38:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b42:	2000      	movs	r0, #0
 8001b44:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	f022 0204 	bic.w	r2, r2, #4
 8001b4c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	f042 020a 	orr.w	r2, r2, #10
 8001b54:	e7e2      	b.n	8001b1c <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001b56:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001b5a:	2002      	movs	r0, #2
}
 8001b5c:	bd70      	pop	{r4, r5, r6, pc}

08001b5e <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b5e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001b62:	2b02      	cmp	r3, #2
{
 8001b64:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b70:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b72:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f022 020e 	bic.w	r2, r2, #14
 8001b7a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b84:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001b86:	6813      	ldr	r3, [r2, #0]
 8001b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b90:	f003 021c 	and.w	r2, r3, #28
 8001b94:	2301      	movs	r3, #1
 8001b96:	4093      	lsls	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001b9c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001b9e:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001ba0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001ba2:	b133      	cbz	r3, 8001bb2 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001baa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bac:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001bae:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001bb0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferAbortCallback != NULL)
 8001bb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001bba:	2400      	movs	r4, #0
 8001bbc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001bc0:	b113      	cbz	r3, 8001bc8 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001bc2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	bd10      	pop	{r4, pc}
 8001bc8:	4618      	mov	r0, r3
}
 8001bca:	bd10      	pop	{r4, pc}

08001bcc <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bcc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bce:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001bd0:	6803      	ldr	r3, [r0, #0]
{
 8001bd2:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bd4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bd8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001bda:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bdc:	2404      	movs	r4, #4
 8001bde:	4094      	lsls	r4, r2
 8001be0:	4226      	tst	r6, r4
 8001be2:	d00e      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x36>
 8001be4:	f015 0f04 	tst.w	r5, #4
 8001be8:	d00b      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bee:	bf5e      	ittt	pl
 8001bf0:	681a      	ldrpl	r2, [r3, #0]
 8001bf2:	f022 0204 	bicpl.w	r2, r2, #4
 8001bf6:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001bf8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001bfa:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001bfc:	b373      	cbz	r3, 8001c5c <HAL_DMA_IRQHandler+0x90>
}
 8001bfe:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001c00:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001c02:	2402      	movs	r4, #2
 8001c04:	4094      	lsls	r4, r2
 8001c06:	4226      	tst	r6, r4
 8001c08:	d012      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x64>
 8001c0a:	f015 0f02 	tst.w	r5, #2
 8001c0e:	d00f      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	0695      	lsls	r5, r2, #26
 8001c14:	d406      	bmi.n	8001c24 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f022 020a 	bic.w	r2, r2, #10
 8001c1c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001c24:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c26:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001c28:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001c2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c2e:	e7e5      	b.n	8001bfc <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001c30:	2408      	movs	r4, #8
 8001c32:	4094      	lsls	r4, r2
 8001c34:	4234      	tst	r4, r6
 8001c36:	d011      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x90>
 8001c38:	072c      	lsls	r4, r5, #28
 8001c3a:	d50f      	bpl.n	8001c5c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3c:	681c      	ldr	r4, [r3, #0]
 8001c3e:	f024 040e 	bic.w	r4, r4, #14
 8001c42:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c44:	2301      	movs	r3, #1
 8001c46:	fa03 f202 	lsl.w	r2, r3, r2
 8001c4a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c4c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001c52:	2300      	movs	r3, #0
 8001c54:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001c58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c5a:	e7cf      	b.n	8001bfc <HAL_DMA_IRQHandler+0x30>
}
 8001c5c:	bc70      	pop	{r4, r5, r6}
 8001c5e:	4770      	bx	lr

08001c60 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8001c62:	6805      	ldr	r5, [r0, #0]
 8001c64:	4e0a      	ldr	r6, [pc, #40]	; (8001c90 <DMA2D_SetConfig+0x30>)
 8001c66:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001c68:	fa96 f6a6 	rbit	r6, r6
 8001c6c:	9f05      	ldr	r7, [sp, #20]
 8001c6e:	fab6 f686 	clz	r6, r6
 8001c72:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001c76:	433c      	orrs	r4, r7
 8001c78:	40b3      	lsls	r3, r6
 8001c7a:	4323      	orrs	r3, r4
 8001c7c:	646b      	str	r3, [r5, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001c7e:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001c80:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001c82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, pdata);    
 8001c86:	bf0c      	ite	eq
 8001c88:	63a9      	streq	r1, [r5, #56]	; 0x38
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
  WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001c8a:	60e9      	strne	r1, [r5, #12]
 8001c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	3fff0000 	.word	0x3fff0000

08001c94 <HAL_DMA2D_Init>:
{ 
 8001c94:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d == NULL)
 8001c96:	4604      	mov	r4, r0
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d043      	beq.n	8001d24 <HAL_DMA2D_Init+0x90>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001c9c:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001ca0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ca4:	b91b      	cbnz	r3, 8001cae <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8001ca6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_DMA2D_MspInit(hdma2d);
 8001caa:	f01e f8d1 	bl	801fe50 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	69e0      	ldr	r0, [r4, #28]
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	6862      	ldr	r2, [r4, #4]
 8001cbc:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8001cc0:	4302      	orrs	r2, r0
 8001cc2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001cca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ccc:	68a2      	ldr	r2, [r4, #8]
 8001cce:	69a0      	ldr	r0, [r4, #24]
 8001cd0:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8001cd4:	4302      	orrs	r2, r0
 8001cd6:	f021 0101 	bic.w	r1, r1, #1
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce0:	68e1      	ldr	r1, [r4, #12]
 8001ce2:	0c12      	lsrs	r2, r2, #16
 8001ce4:	0412      	lsls	r2, r2, #16
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 8001cea:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001cec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001cf8:	fab2 f082 	clz	r0, r2
 8001cfc:	fa91 f1a1 	rbit	r1, r1
 8001d00:	6922      	ldr	r2, [r4, #16]
 8001d02:	4082      	lsls	r2, r0
 8001d04:	6960      	ldr	r0, [r4, #20]
 8001d06:	fab1 f181 	clz	r1, r1
 8001d0a:	fa00 f101 	lsl.w	r1, r0, r1
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	f425 1140 	bic.w	r1, r5, #3145728	; 0x300000
 8001d14:	430a      	orrs	r2, r1
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d18:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d1a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d1c:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d1e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  return HAL_OK;
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001d24:	2001      	movs	r0, #1
}
 8001d26:	bd38      	pop	{r3, r4, r5, pc}

08001d28 <HAL_DMA2D_Start>:
{
 8001d28:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001d2a:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 8001d2e:	2c01      	cmp	r4, #1
 8001d30:	f04f 0402 	mov.w	r4, #2
 8001d34:	d00f      	beq.n	8001d56 <HAL_DMA2D_Start+0x2e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d36:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  __HAL_LOCK(hdma2d);
 8001d3a:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001d3c:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001d3e:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001d42:	9400      	str	r4, [sp, #0]
 8001d44:	f7ff ff8c 	bl	8001c60 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001d48:	6802      	ldr	r2, [r0, #0]
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	4333      	orrs	r3, r6
 8001d4e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001d50:	2000      	movs	r0, #0
}
 8001d52:	b002      	add	sp, #8
 8001d54:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001d56:	4620      	mov	r0, r4
 8001d58:	e7fb      	b.n	8001d52 <HAL_DMA2D_Start+0x2a>

08001d5a <HAL_DMA2D_PollForTransfer>:
{
 8001d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001d60:	6803      	ldr	r3, [r0, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	07db      	lsls	r3, r3, #31
{
 8001d66:	4604      	mov	r4, r0
 8001d68:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001d6a:	d427      	bmi.n	8001dbc <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	0696      	lsls	r6, r2, #26
 8001d72:	d55c      	bpl.n	8001e2e <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8001d74:	f7ff f954 	bl	8001020 <HAL_GetTick>
 8001d78:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	06d2      	lsls	r2, r2, #27
 8001d80:	d458      	bmi.n	8001e34 <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001d86:	9a01      	ldr	r2, [sp, #4]
 8001d88:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001d8c:	d05d      	beq.n	8001e4a <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001d8e:	9a01      	ldr	r2, [sp, #4]
 8001d90:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001d92:	bf42      	ittt	mi
 8001d94:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001d96:	f042 0204 	orrmi.w	r2, r2, #4
 8001d9a:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001d9c:	9a01      	ldr	r2, [sp, #4]
 8001d9e:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001da0:	bf42      	ittt	mi
 8001da2:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001da4:	f042 0202 	orrmi.w	r2, r2, #2
 8001da8:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001daa:	9a01      	ldr	r2, [sp, #4]
 8001dac:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001dae:	bf42      	ittt	mi
 8001db0:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001db2:	f042 0201 	orrmi.w	r2, r2, #1
 8001db6:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001db8:	2229      	movs	r2, #41	; 0x29
 8001dba:	e01b      	b.n	8001df4 <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8001dbc:	f7ff f930 	bl	8001020 <HAL_GetTick>
 8001dc0:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	0792      	lsls	r2, r2, #30
 8001dc8:	d4d0      	bmi.n	8001d6c <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001dce:	9a01      	ldr	r2, [sp, #4]
 8001dd0:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001dd4:	d017      	beq.n	8001e06 <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001dd6:	9a01      	ldr	r2, [sp, #4]
 8001dd8:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001dda:	bf42      	ittt	mi
 8001ddc:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001dde:	f042 0202 	orrmi.w	r2, r2, #2
 8001de2:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001de4:	9a01      	ldr	r2, [sp, #4]
 8001de6:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001de8:	bf42      	ittt	mi
 8001dea:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001dec:	f042 0201 	orrmi.w	r2, r2, #1
 8001df0:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001df2:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001df4:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001df6:	2304      	movs	r3, #4
 8001df8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(hdma2d);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;      
 8001e02:	2001      	movs	r0, #1
 8001e04:	e01f      	b.n	8001e46 <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 8001e06:	1c69      	adds	r1, r5, #1
 8001e08:	d0dc      	beq.n	8001dc4 <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e0a:	b955      	cbnz	r5, 8001e22 <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001e0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e0e:	f043 0320 	orr.w	r3, r3, #32
 8001e12:	65e3      	str	r3, [r4, #92]	; 0x5c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001e14:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001e16:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001e18:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          __HAL_UNLOCK(hdma2d);
 8001e1c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          return HAL_TIMEOUT;
 8001e20:	e011      	b.n	8001e46 <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e22:	f7ff f8fd 	bl	8001020 <HAL_GetTick>
 8001e26:	1b80      	subs	r0, r0, r6
 8001e28:	4285      	cmp	r5, r0
 8001e2a:	d2ca      	bcs.n	8001dc2 <HAL_DMA2D_PollForTransfer+0x68>
 8001e2c:	e7ee      	b.n	8001e0c <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001e30:	069b      	lsls	r3, r3, #26
 8001e32:	d49f      	bmi.n	8001d74 <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	2212      	movs	r2, #18
 8001e38:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8001e3a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);
 8001e42:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8001e46:	b002      	add	sp, #8
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001e4a:	1c69      	adds	r1, r5, #1
 8001e4c:	d096      	beq.n	8001d7c <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d0dc      	beq.n	8001e0c <HAL_DMA2D_PollForTransfer+0xb2>
 8001e52:	f7ff f8e5 	bl	8001020 <HAL_GetTick>
 8001e56:	1b80      	subs	r0, r0, r6
 8001e58:	4285      	cmp	r5, r0
 8001e5a:	d28e      	bcs.n	8001d7a <HAL_DMA2D_PollForTransfer+0x20>
 8001e5c:	e7d6      	b.n	8001e0c <HAL_DMA2D_PollForTransfer+0xb2>
	...

08001e60 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001e60:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001e64:	2b01      	cmp	r3, #1
{   
 8001e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e68:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8001e6c:	d041      	beq.n	8001ef2 <HAL_DMA2D_ConfigLayer+0x92>
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 8001e74:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 8001e78:	6802      	ldr	r2, [r0, #0]
  if(LayerIdx == 0)
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	d14d      	bne.n	8001f1a <HAL_DMA2D_ConfigLayer+0xba>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e7e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8001e80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001e82:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8001e84:	f1a6 0509 	sub.w	r5, r6, #9
 8001e88:	2d01      	cmp	r5, #1
 8001e8a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001e8e:	d832      	bhi.n	8001ef6 <HAL_DMA2D_ConfigLayer+0x96>
 8001e90:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA));
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	f004 417f 	and.w	r1, r4, #4278190080	; 0xff000000
 8001e9c:	4331      	orrs	r1, r6
 8001e9e:	fa07 f303 	lsl.w	r3, r7, r3
 8001ea2:	4319      	orrs	r1, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 8001ea4:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8001ea8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001eb4:	fab3 f783 	clz	r7, r3
 8001eb8:	fa96 f6a6 	rbit	r6, r6
 8001ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ebe:	40bb      	lsls	r3, r7
 8001ec0:	4f3c      	ldr	r7, [pc, #240]	; (8001fb4 <HAL_DMA2D_ConfigLayer+0x154>)
 8001ec2:	ea0e 0707 	and.w	r7, lr, r7
 8001ec6:	4339      	orrs	r1, r7
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ecc:	fab6 f686 	clz	r6, r6
 8001ed0:	fa01 f606 	lsl.w	r6, r1, r6
 8001ed4:	4333      	orrs	r3, r6
 8001ed6:	6253      	str	r3, [r2, #36]	; 0x24
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ed8:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 8001eda:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001edc:	6193      	str	r3, [r2, #24]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ede:	d802      	bhi.n	8001ee6 <HAL_DMA2D_ConfigLayer+0x86>
      WRITE_REG(hdma2d->Instance->BGCOLR, LayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001ee0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001ee4:	6294      	str	r4, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);  
 8001eec:	2300      	movs	r3, #0
 8001eee:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  __HAL_LOCK(hdma2d);
 8001ef2:	4618      	mov	r0, r3
}
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA));
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	fa91 f1a1 	rbit	r1, r1
 8001f06:	fab1 f181 	clz	r1, r1
 8001f0a:	fa04 f101 	lsl.w	r1, r4, r1
 8001f0e:	fa07 f303 	lsl.w	r3, r7, r3
 8001f12:	430b      	orrs	r3, r1
 8001f14:	ea43 0106 	orr.w	r1, r3, r6
 8001f18:	e7c4      	b.n	8001ea4 <HAL_DMA2D_ConfigLayer+0x44>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f1a:	2418      	movs	r4, #24
 8001f1c:	fb04 0401 	mla	r4, r4, r1, r0
 8001f20:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f24:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001f26:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001f28:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8001f2a:	f1a7 0509 	sub.w	r5, r7, #9
 8001f2e:	2d01      	cmp	r5, #1
 8001f30:	d82f      	bhi.n	8001f92 <HAL_DMA2D_ConfigLayer+0x132>
 8001f32:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_FGPFCCR_ALPHA));
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 8001f3e:	4337      	orrs	r7, r6
 8001f40:	fa04 f303 	lsl.w	r3, r4, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8001f44:	433b      	orrs	r3, r7
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 8001f46:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8001f4a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8001f4e:	fa94 f4a4 	rbit	r4, r4
 8001f52:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001f56:	fab4 f784 	clz	r7, r4
 8001f5a:	fa96 f6a6 	rbit	r6, r6
 8001f5e:	2418      	movs	r4, #24
 8001f60:	fb04 0101 	mla	r1, r4, r1, r0
 8001f64:	fab6 f686 	clz	r6, r6
 8001f68:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8001f6a:	40bc      	lsls	r4, r7
 8001f6c:	4f11      	ldr	r7, [pc, #68]	; (8001fb4 <HAL_DMA2D_ConfigLayer+0x154>)
 8001f6e:	ea0e 0707 	and.w	r7, lr, r7
 8001f72:	433b      	orrs	r3, r7
 8001f74:	4323      	orrs	r3, r4
 8001f76:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8001f78:	fa04 f606 	lsl.w	r6, r4, r6
 8001f7c:	4333      	orrs	r3, r6
 8001f7e:	61d3      	str	r3, [r2, #28]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f80:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 8001f82:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001f84:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, LayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001f86:	bf9e      	ittt	ls
 8001f88:	6b4b      	ldrls	r3, [r1, #52]	; 0x34
 8001f8a:	f023 437f 	bicls.w	r3, r3, #4278190080	; 0xff000000
 8001f8e:	6213      	strls	r3, [r2, #32]
 8001f90:	e7a9      	b.n	8001ee6 <HAL_DMA2D_ConfigLayer+0x86>
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	fa9e feae 	rbit	lr, lr
 8001fa2:	fabe fe8e 	clz	lr, lr
 8001fa6:	fa04 f303 	lsl.w	r3, r4, r3
 8001faa:	fa06 f60e 	lsl.w	r6, r6, lr
 8001fae:	4333      	orrs	r3, r6
 8001fb0:	e7c8      	b.n	8001f44 <HAL_DMA2D_ConfigLayer+0xe4>
 8001fb2:	bf00      	nop
 8001fb4:	00ccfff0 	.word	0x00ccfff0

08001fb8 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <FLASH_Program_Fast+0x20>)
 8001fba:	6953      	ldr	r3, [r2, #20]
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc2:	b672      	cpsid	i
 8001fc4:	f501 7300 	add.w	r3, r1, #512	; 0x200
 8001fc8:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001fca:	680a      	ldr	r2, [r1, #0]
 8001fcc:	500a      	str	r2, [r1, r0]
    dest_addr++;
    src_addr++;
 8001fce:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 8001fd0:	4299      	cmp	r1, r3
 8001fd2:	d1fa      	bne.n	8001fca <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8001fd4:	b662      	cpsie	i
 8001fd6:	4770      	bx	lr
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_FLASH_Unlock+0x1c>)
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fe2:	bfbf      	itttt	lt
 8001fe4:	4a05      	ldrlt	r2, [pc, #20]	; (8001ffc <HAL_FLASH_Unlock+0x20>)
 8001fe6:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fe8:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8001fec:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fee:	bfba      	itte	lt
 8001ff0:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	0fc0      	lsrlt	r0, r0, #31
 8001ff4:	2000      	movge	r0, #0
}
 8001ff6:	4770      	bx	lr
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	45670123 	.word	0x45670123

08002000 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_FLASH_Lock+0x10>)
 8002002:	6953      	ldr	r3, [r2, #20]
 8002004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002008:	6153      	str	r3, [r2, #20]
}
 800200a:	2000      	movs	r0, #0
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000

08002014 <FLASH_WaitForLastOperation>:
{
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff f802 	bl	8001020 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800201c:	4c1a      	ldr	r4, [pc, #104]	; (8002088 <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 800201e:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002020:	6923      	ldr	r3, [r4, #16]
 8002022:	03db      	lsls	r3, r3, #15
 8002024:	d41e      	bmi.n	8002064 <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002026:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8002028:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800202a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800202e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002032:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002036:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 800203a:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 800203e:	4318      	orrs	r0, r3
 8002040:	d019      	beq.n	8002076 <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <FLASH_WaitForLastOperation+0x78>)
 8002044:	6853      	ldr	r3, [r2, #4]
 8002046:	4303      	orrs	r3, r0
 8002048:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 800204a:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 800204e:	bf1e      	ittt	ne
 8002050:	69a2      	ldrne	r2, [r4, #24]
 8002052:	4313      	orrne	r3, r2
 8002054:	61a3      	strne	r3, [r4, #24]
 8002056:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 800205a:	d001      	beq.n	8002060 <FLASH_WaitForLastOperation+0x4c>
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <FLASH_WaitForLastOperation+0x74>)
 800205e:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
 8002062:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002064:	1c6a      	adds	r2, r5, #1
 8002066:	d0db      	beq.n	8002020 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002068:	f7fe ffda 	bl	8001020 <HAL_GetTick>
 800206c:	1b80      	subs	r0, r0, r6
 800206e:	4285      	cmp	r5, r0
 8002070:	d8d6      	bhi.n	8002020 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8002072:	2003      	movs	r0, #3
 8002074:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002076:	6923      	ldr	r3, [r4, #16]
 8002078:	f013 0301 	ands.w	r3, r3, #1
 800207c:	d002      	beq.n	8002084 <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800207e:	2301      	movs	r3, #1
 8002080:	6123      	str	r3, [r4, #16]
 8002082:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002084:	4618      	mov	r0, r3
}
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	40022000 	.word	0x40022000
 800208c:	20000000 	.word	0x20000000

08002090 <HAL_FLASH_Program>:
{
 8002090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002094:	4c24      	ldr	r4, [pc, #144]	; (8002128 <HAL_FLASH_Program+0x98>)
{
 8002096:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8002098:	7823      	ldrb	r3, [r4, #0]
 800209a:	2b01      	cmp	r3, #1
{
 800209c:	4607      	mov	r7, r0
 800209e:	4688      	mov	r8, r1
 80020a0:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80020a2:	d03f      	beq.n	8002124 <HAL_FLASH_Program+0x94>
 80020a4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020a6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80020aa:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020ac:	f7ff ffb2 	bl	8002014 <FLASH_WaitForLastOperation>
 80020b0:	4606      	mov	r6, r0
  if(status == HAL_OK)
 80020b2:	bb20      	cbnz	r0, 80020fe <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020b4:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80020b6:	481d      	ldr	r0, [pc, #116]	; (800212c <HAL_FLASH_Program+0x9c>)
 80020b8:	6805      	ldr	r5, [r0, #0]
 80020ba:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80020be:	bf17      	itett	ne
 80020c0:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80020c2:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80020c4:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80020c8:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80020ca:	bf1c      	itt	ne
 80020cc:	2302      	movne	r3, #2
 80020ce:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80020d0:	b9d7      	cbnz	r7, 8002108 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020d2:	6945      	ldr	r5, [r0, #20]
 80020d4:	f045 0501 	orr.w	r5, r5, #1
 80020d8:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80020da:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 80020de:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80020e0:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020e8:	f7ff ff94 	bl	8002014 <FLASH_WaitForLastOperation>
 80020ec:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 80020ee:	b125      	cbz	r5, 80020fa <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_FLASH_Program+0x9c>)
 80020f2:	6953      	ldr	r3, [r2, #20]
 80020f4:	ea23 0505 	bic.w	r5, r3, r5
 80020f8:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 80020fa:	f000 f85d 	bl	80021b8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80020fe:	2300      	movs	r3, #0
 8002100:	7023      	strb	r3, [r4, #0]
}
 8002102:	4630      	mov	r0, r6
 8002104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002108:	1e7b      	subs	r3, r7, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d901      	bls.n	8002112 <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 800210e:	2500      	movs	r5, #0
 8002110:	e7e8      	b.n	80020e4 <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002112:	4649      	mov	r1, r9
 8002114:	4640      	mov	r0, r8
 8002116:	f7ff ff4f 	bl	8001fb8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800211a:	2f02      	cmp	r7, #2
 800211c:	d1f7      	bne.n	800210e <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 800211e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8002122:	e7df      	b.n	80020e4 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8002124:	2602      	movs	r6, #2
 8002126:	e7ec      	b.n	8002102 <HAL_FLASH_Program+0x72>
 8002128:	20000000 	.word	0x20000000
 800212c:	40022000 	.word	0x40022000

08002130 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002130:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <FLASH_MassErase+0x40>)
 8002132:	6a13      	ldr	r3, [r2, #32]
 8002134:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002138:	4613      	mov	r3, r2
 800213a:	d011      	beq.n	8002160 <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800213c:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800213e:	bf42      	ittt	mi
 8002140:	6952      	ldrmi	r2, [r2, #20]
 8002142:	f042 0204 	orrmi.w	r2, r2, #4
 8002146:	615a      	strmi	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002148:	0782      	lsls	r2, r0, #30
 800214a:	d503      	bpl.n	8002154 <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002152:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <FLASH_MassErase+0x40>)
 8002156:	6953      	ldr	r3, [r2, #20]
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6153      	str	r3, [r2, #20]
 800215e:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002160:	6953      	ldr	r3, [r2, #20]
 8002162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	6153      	str	r3, [r2, #20]
 800216c:	e7f2      	b.n	8002154 <FLASH_MassErase+0x24>
 800216e:	bf00      	nop
 8002170:	40022000 	.word	0x40022000

08002174 <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <FLASH_PageErase+0x40>)
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800217c:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800217e:	d113      	bne.n	80021a8 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002184:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	00c0      	lsls	r0, r0, #3
 800218a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800218e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8002192:	4310      	orrs	r0, r2
 8002194:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	f042 0202 	orr.w	r2, r2, #2
 800219c:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021a4:	615a      	str	r2, [r3, #20]
 80021a6:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 80021a8:	07c9      	lsls	r1, r1, #31
 80021aa:	d4e9      	bmi.n	8002180 <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80021ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b0:	e7e8      	b.n	8002184 <FLASH_PageErase+0x10>
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000

080021b8 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80021b8:	4913      	ldr	r1, [pc, #76]	; (8002208 <FLASH_FlushCaches+0x50>)
 80021ba:	7f0b      	ldrb	r3, [r1, #28]
 80021bc:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 80021be:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80021c2:	2a01      	cmp	r2, #1
 80021c4:	d10c      	bne.n	80021e0 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <FLASH_FlushCaches+0x54>)
 80021c8:	6810      	ldr	r0, [r2, #0]
 80021ca:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80021ce:	6010      	str	r0, [r2, #0]
 80021d0:	6810      	ldr	r0, [r2, #0]
 80021d2:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80021d6:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d8:	6810      	ldr	r0, [r2, #0]
 80021da:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80021de:	6010      	str	r0, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80021e0:	3b02      	subs	r3, #2
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d80c      	bhi.n	8002200 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <FLASH_FlushCaches+0x54>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021f6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002200:	2300      	movs	r3, #0
 8002202:	770b      	strb	r3, [r1, #28]
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000000 	.word	0x20000000
 800220c:	40022000 	.word	0x40022000

08002210 <HAL_FLASHEx_Erase>:
{
 8002210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002214:	4c35      	ldr	r4, [pc, #212]	; (80022ec <HAL_FLASHEx_Erase+0xdc>)
 8002216:	7823      	ldrb	r3, [r4, #0]
 8002218:	2b01      	cmp	r3, #1
{
 800221a:	4606      	mov	r6, r0
 800221c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800221e:	d062      	beq.n	80022e6 <HAL_FLASHEx_Erase+0xd6>
 8002220:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002222:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002226:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002228:	f7ff fef4 	bl	8002014 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800222c:	4605      	mov	r5, r0
 800222e:	bb40      	cbnz	r0, 8002282 <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002230:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002232:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800223a:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800223c:	d026      	beq.n	800228c <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800223e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002242:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	0551      	lsls	r1, r2, #21
 8002248:	d506      	bpl.n	8002258 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002250:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002252:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002254:	7723      	strb	r3, [r4, #28]
 8002256:	e000      	b.n	800225a <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002258:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800225a:	6833      	ldr	r3, [r6, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d11f      	bne.n	80022a0 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 8002260:	6870      	ldr	r0, [r6, #4]
 8002262:	f7ff ff65 	bl	8002130 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002266:	f24c 3050 	movw	r0, #50000	; 0xc350
 800226a:	f7ff fed3 	bl	8002014 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800226e:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_FLASHEx_Erase+0xe0>)
 8002270:	6953      	ldr	r3, [r2, #20]
 8002272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002276:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800227a:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800227c:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800227e:	f7ff ff9b 	bl	80021b8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002282:	2300      	movs	r3, #0
 8002284:	7023      	strb	r3, [r4, #0]
}
 8002286:	4628      	mov	r0, r5
 8002288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800228c:	0552      	lsls	r2, r2, #21
 800228e:	d505      	bpl.n	800229c <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002296:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002298:	2302      	movs	r3, #2
 800229a:	e7db      	b.n	8002254 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800229c:	7720      	strb	r0, [r4, #28]
 800229e:	e7dc      	b.n	800225a <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022a8:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80022aa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80022f0 <HAL_FLASHEx_Erase+0xe0>
 80022ae:	f8df a044 	ldr.w	sl, [pc, #68]	; 80022f4 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022b2:	68b3      	ldr	r3, [r6, #8]
 80022b4:	68f2      	ldr	r2, [r6, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	429f      	cmp	r7, r3
 80022ba:	d2e0      	bcs.n	800227e <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80022bc:	6871      	ldr	r1, [r6, #4]
 80022be:	4638      	mov	r0, r7
 80022c0:	f7ff ff58 	bl	8002174 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022c8:	f7ff fea4 	bl	8002014 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80022cc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80022d0:	ea03 030a 	and.w	r3, r3, sl
 80022d4:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80022d8:	b118      	cbz	r0, 80022e2 <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 80022da:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022de:	4605      	mov	r5, r0
          break;
 80022e0:	e7cd      	b.n	800227e <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022e2:	3701      	adds	r7, #1
 80022e4:	e7e5      	b.n	80022b2 <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 80022e6:	2502      	movs	r5, #2
 80022e8:	e7cd      	b.n	8002286 <HAL_FLASHEx_Erase+0x76>
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000
 80022f0:	40022000 	.word	0x40022000
 80022f4:	fffff805 	.word	0xfffff805

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fc:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002300:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80024a4 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002308:	fa38 f403 	lsrs.w	r4, r8, r3
 800230c:	d102      	bne.n	8002314 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800230e:	b003      	add	sp, #12
 8002310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002314:	f04f 0e01 	mov.w	lr, #1
 8002318:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800231c:	ea18 060e 	ands.w	r6, r8, lr
 8002320:	f000 80ab 	beq.w	800247a <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002324:	684c      	ldr	r4, [r1, #4]
 8002326:	f024 0710 	bic.w	r7, r4, #16
 800232a:	2f02      	cmp	r7, #2
 800232c:	d116      	bne.n	800235c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800232e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002332:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002336:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800233a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800233e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002342:	f04f 0c0f 	mov.w	ip, #15
 8002346:	fa0c fc0b 	lsl.w	ip, ip, fp
 800234a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800234e:	690d      	ldr	r5, [r1, #16]
 8002350:	fa05 f50b 	lsl.w	r5, r5, fp
 8002354:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002358:	f8ca 5020 	str.w	r5, [sl, #32]
 800235c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002360:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002362:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002366:	fa05 f50a 	lsl.w	r5, r5, sl
 800236a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800236c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002370:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002374:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002378:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8002380:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002384:	d811      	bhi.n	80023aa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002386:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002388:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800238c:	68cf      	ldr	r7, [r1, #12]
 800238e:	fa07 fc0a 	lsl.w	ip, r7, sl
 8002392:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002396:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002398:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800239e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80023a2:	409f      	lsls	r7, r3
 80023a4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80023a8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80023aa:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023ac:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ae:	688f      	ldr	r7, [r1, #8]
 80023b0:	fa07 f70a 	lsl.w	r7, r7, sl
 80023b4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80023b6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b8:	00e5      	lsls	r5, r4, #3
 80023ba:	d55e      	bpl.n	800247a <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023bc:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80023c0:	f045 0501 	orr.w	r5, r5, #1
 80023c4:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80023c8:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80023cc:	f023 0703 	bic.w	r7, r3, #3
 80023d0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80023d4:	f005 0501 	and.w	r5, r5, #1
 80023d8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80023dc:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023de:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80023e4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e8:	f04f 0c0f 	mov.w	ip, #15
 80023ec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80023f0:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023f4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023f8:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023fc:	d03f      	beq.n	800247e <HAL_GPIO_Init+0x186>
 80023fe:	4d28      	ldr	r5, [pc, #160]	; (80024a0 <HAL_GPIO_Init+0x1a8>)
 8002400:	42a8      	cmp	r0, r5
 8002402:	d03e      	beq.n	8002482 <HAL_GPIO_Init+0x18a>
 8002404:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002408:	42a8      	cmp	r0, r5
 800240a:	d03c      	beq.n	8002486 <HAL_GPIO_Init+0x18e>
 800240c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002410:	42a8      	cmp	r0, r5
 8002412:	d03a      	beq.n	800248a <HAL_GPIO_Init+0x192>
 8002414:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002418:	42a8      	cmp	r0, r5
 800241a:	d038      	beq.n	800248e <HAL_GPIO_Init+0x196>
 800241c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002420:	42a8      	cmp	r0, r5
 8002422:	d036      	beq.n	8002492 <HAL_GPIO_Init+0x19a>
 8002424:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002428:	42a8      	cmp	r0, r5
 800242a:	d034      	beq.n	8002496 <HAL_GPIO_Init+0x19e>
 800242c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002430:	42a8      	cmp	r0, r5
 8002432:	bf14      	ite	ne
 8002434:	2508      	movne	r5, #8
 8002436:	2507      	moveq	r5, #7
 8002438:	fa05 f50e 	lsl.w	r5, r5, lr
 800243c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002440:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 8002442:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8002444:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002446:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800244a:	bf0c      	ite	eq
 800244c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800244e:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 8002450:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 8002452:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002454:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002458:	bf0c      	ite	eq
 800245a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800245c:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 800245e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 8002460:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002462:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002466:	bf0c      	ite	eq
 8002468:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800246a:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 800246c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 800246e:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002470:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002472:	bf54      	ite	pl
 8002474:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8002476:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 8002478:	60d5      	str	r5, [r2, #12]
    position++;
 800247a:	3301      	adds	r3, #1
 800247c:	e744      	b.n	8002308 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800247e:	2500      	movs	r5, #0
 8002480:	e7da      	b.n	8002438 <HAL_GPIO_Init+0x140>
 8002482:	2501      	movs	r5, #1
 8002484:	e7d8      	b.n	8002438 <HAL_GPIO_Init+0x140>
 8002486:	2502      	movs	r5, #2
 8002488:	e7d6      	b.n	8002438 <HAL_GPIO_Init+0x140>
 800248a:	2503      	movs	r5, #3
 800248c:	e7d4      	b.n	8002438 <HAL_GPIO_Init+0x140>
 800248e:	2504      	movs	r5, #4
 8002490:	e7d2      	b.n	8002438 <HAL_GPIO_Init+0x140>
 8002492:	2505      	movs	r5, #5
 8002494:	e7d0      	b.n	8002438 <HAL_GPIO_Init+0x140>
 8002496:	2506      	movs	r5, #6
 8002498:	e7ce      	b.n	8002438 <HAL_GPIO_Init+0x140>
 800249a:	bf00      	nop
 800249c:	40010400 	.word	0x40010400
 80024a0:	48000400 	.word	0x48000400
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80024ac:	4d46      	ldr	r5, [pc, #280]	; (80025c8 <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80024ae:	f8df a120 	ldr.w	sl, [pc, #288]	; 80025d0 <HAL_GPIO_DeInit+0x128>
 80024b2:	f8df b120 	ldr.w	fp, [pc, #288]	; 80025d4 <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 80024b6:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024b8:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80024bc:	fa31 f302 	lsrs.w	r3, r1, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 80024c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024c6:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 80024ca:	ea11 0608 	ands.w	r6, r1, r8
 80024ce:	d06b      	beq.n	80025a8 <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80024d0:	6807      	ldr	r7, [r0, #0]
 80024d2:	2303      	movs	r3, #3
 80024d4:	0054      	lsls	r4, r2, #1
 80024d6:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80024da:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80024de:	4327      	orrs	r7, r4
 80024e0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80024e4:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80024e6:	f8dc 7020 	ldr.w	r7, [ip, #32]
 80024ea:	f002 0e07 	and.w	lr, r2, #7
 80024ee:	463b      	mov	r3, r7
 80024f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80024f4:	270f      	movs	r7, #15
 80024f6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80024fa:	ea23 0e0e 	bic.w	lr, r3, lr
 80024fe:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002502:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002506:	43e4      	mvns	r4, r4
 8002508:	ea0e 0e04 	and.w	lr, lr, r4
 800250c:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002510:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002514:	ea2e 0808 	bic.w	r8, lr, r8
 8002518:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800251c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8002520:	ea04 040e 	and.w	r4, r4, lr
 8002524:	60c4      	str	r4, [r0, #12]
 8002526:	f022 0403 	bic.w	r4, r2, #3
 800252a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800252e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002532:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002536:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800253a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800253e:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002542:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002546:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800254a:	d02f      	beq.n	80025ac <HAL_GPIO_DeInit+0x104>
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_GPIO_DeInit+0x124>)
 800254e:	4298      	cmp	r0, r3
 8002550:	d02e      	beq.n	80025b0 <HAL_GPIO_DeInit+0x108>
 8002552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002556:	4298      	cmp	r0, r3
 8002558:	d02c      	beq.n	80025b4 <HAL_GPIO_DeInit+0x10c>
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	4298      	cmp	r0, r3
 8002560:	d02a      	beq.n	80025b8 <HAL_GPIO_DeInit+0x110>
 8002562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002566:	4298      	cmp	r0, r3
 8002568:	d028      	beq.n	80025bc <HAL_GPIO_DeInit+0x114>
 800256a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800256e:	4298      	cmp	r0, r3
 8002570:	d026      	beq.n	80025c0 <HAL_GPIO_DeInit+0x118>
 8002572:	4550      	cmp	r0, sl
 8002574:	d026      	beq.n	80025c4 <HAL_GPIO_DeInit+0x11c>
 8002576:	4558      	cmp	r0, fp
 8002578:	bf0c      	ite	eq
 800257a:	2307      	moveq	r3, #7
 800257c:	2308      	movne	r3, #8
 800257e:	fa03 f30e 	lsl.w	r3, r3, lr
 8002582:	459c      	cmp	ip, r3
 8002584:	d110      	bne.n	80025a8 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002586:	68a3      	ldr	r3, [r4, #8]
 8002588:	ea23 0707 	bic.w	r7, r3, r7
 800258c:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	43f6      	mvns	r6, r6
 8002592:	4033      	ands	r3, r6
 8002594:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002596:	686b      	ldr	r3, [r5, #4]
 8002598:	4033      	ands	r3, r6
 800259a:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800259c:	68ab      	ldr	r3, [r5, #8]
 800259e:	4033      	ands	r3, r6
 80025a0:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80025a2:	68eb      	ldr	r3, [r5, #12]
 80025a4:	401e      	ands	r6, r3
 80025a6:	60ee      	str	r6, [r5, #12]
    position++;
 80025a8:	3201      	adds	r2, #1
 80025aa:	e787      	b.n	80024bc <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025ac:	2300      	movs	r3, #0
 80025ae:	e7e6      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e7e4      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e7e2      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025b8:	2303      	movs	r3, #3
 80025ba:	e7e0      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025bc:	2304      	movs	r3, #4
 80025be:	e7de      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025c0:	2305      	movs	r3, #5
 80025c2:	e7dc      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025c4:	2306      	movs	r3, #6
 80025c6:	e7da      	b.n	800257e <HAL_GPIO_DeInit+0xd6>
 80025c8:	40010400 	.word	0x40010400
 80025cc:	48000400 	.word	0x48000400
 80025d0:	48001800 	.word	0x48001800
 80025d4:	48001c00 	.word	0x48001c00

080025d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025d8:	6903      	ldr	r3, [r0, #16]
 80025da:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80025dc:	bf14      	ite	ne
 80025de:	2001      	movne	r0, #1
 80025e0:	2000      	moveq	r0, #0
 80025e2:	4770      	bx	lr

080025e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e4:	b10a      	cbz	r2, 80025ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e6:	6181      	str	r1, [r0, #24]
 80025e8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ea:	6281      	str	r1, [r0, #40]	; 0x28
 80025ec:	4770      	bx	lr

080025ee <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80025ee:	6943      	ldr	r3, [r0, #20]
 80025f0:	4059      	eors	r1, r3
 80025f2:	6141      	str	r1, [r0, #20]
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80025f8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80025fc:	6959      	ldr	r1, [r3, #20]
 80025fe:	4201      	tst	r1, r0
 8002600:	d002      	beq.n	8002608 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002602:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002604:	f7ff fff7 	bl	80025f6 <HAL_GPIO_EXTI_Callback>
 8002608:	bd08      	pop	{r3, pc}
 800260a:	bf00      	nop
 800260c:	40010400 	.word	0x40010400

08002610 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002610:	6803      	ldr	r3, [r0, #0]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8002616:	bf44      	itt	mi
 8002618:	2200      	movmi	r2, #0
 800261a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002620:	bf5e      	ittt	pl
 8002622:	699a      	ldrpl	r2, [r3, #24]
 8002624:	f042 0201 	orrpl.w	r2, r2, #1
 8002628:	619a      	strpl	r2, [r3, #24]
 800262a:	4770      	bx	lr

0800262c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800262c:	b530      	push	{r4, r5, lr}
 800262e:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002630:	6805      	ldr	r5, [r0, #0]
 8002632:	4323      	orrs	r3, r4
 8002634:	0d64      	lsrs	r4, r4, #21
 8002636:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800263a:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800263e:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002642:	6868      	ldr	r0, [r5, #4]
 8002644:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002648:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800264c:	4319      	orrs	r1, r3
 800264e:	f044 0403 	orr.w	r4, r4, #3
 8002652:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002656:	ea20 0404 	bic.w	r4, r0, r4
 800265a:	4321      	orrs	r1, r4
 800265c:	6069      	str	r1, [r5, #4]
 800265e:	bd30      	pop	{r4, r5, pc}

08002660 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002660:	f011 0301 	ands.w	r3, r1, #1
 8002664:	d007      	beq.n	8002676 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002666:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800266a:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800266e:	2b28      	cmp	r3, #40	; 0x28
 8002670:	bf0c      	ite	eq
 8002672:	2342      	moveq	r3, #66	; 0x42
 8002674:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002676:	078a      	lsls	r2, r1, #30
 8002678:	d509      	bpl.n	800268e <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800267a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800267e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002682:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002684:	bf0c      	ite	eq
 8002686:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800268a:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800268e:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002690:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002694:	bf48      	it	mi
 8002696:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800269a:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800269e:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80026a0:	bf08      	it	eq
 80026a2:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80026a6:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026a8:	6801      	ldr	r1, [r0, #0]
 80026aa:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 80026ac:	bf08      	it	eq
 80026ae:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026b2:	ea22 0303 	bic.w	r3, r2, r3
 80026b6:	600b      	str	r3, [r1, #0]
 80026b8:	4770      	bx	lr

080026ba <I2C_WaitOnFlagUntilTimeout>:
{
 80026ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026be:	9f06      	ldr	r7, [sp, #24]
 80026c0:	4604      	mov	r4, r0
 80026c2:	4688      	mov	r8, r1
 80026c4:	4616      	mov	r6, r2
 80026c6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c8:	6822      	ldr	r2, [r4, #0]
 80026ca:	6993      	ldr	r3, [r2, #24]
 80026cc:	ea38 0303 	bics.w	r3, r8, r3
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	42b3      	cmp	r3, r6
 80026d8:	d002      	beq.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80026da:	2000      	movs	r0, #0
}
 80026dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80026e0:	1c6b      	adds	r3, r5, #1
 80026e2:	d0f2      	beq.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e4:	f7fe fc9c 	bl	8001020 <HAL_GetTick>
 80026e8:	1bc0      	subs	r0, r0, r7
 80026ea:	4285      	cmp	r5, r0
 80026ec:	d301      	bcc.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x38>
 80026ee:	2d00      	cmp	r5, #0
 80026f0:	d1ea      	bne.n	80026c8 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026f4:	f043 0320 	orr.w	r3, r3, #32
 80026f8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	2320      	movs	r3, #32
 80026fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	2300      	movs	r3, #0
 8002702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002706:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800270a:	2001      	movs	r0, #1
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002710 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002710:	6803      	ldr	r3, [r0, #0]
{
 8002712:	b570      	push	{r4, r5, r6, lr}
 8002714:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002716:	6998      	ldr	r0, [r3, #24]
 8002718:	f010 0010 	ands.w	r0, r0, #16
{
 800271c:	460d      	mov	r5, r1
 800271e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002720:	d116      	bne.n	8002750 <I2C_IsAcknowledgeFailed+0x40>
 8002722:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002724:	1c69      	adds	r1, r5, #1
 8002726:	d014      	beq.n	8002752 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002728:	f7fe fc7a 	bl	8001020 <HAL_GetTick>
 800272c:	1b80      	subs	r0, r0, r6
 800272e:	4285      	cmp	r5, r0
 8002730:	d300      	bcc.n	8002734 <I2C_IsAcknowledgeFailed+0x24>
 8002732:	b96d      	cbnz	r5, 8002750 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002736:	f043 0320 	orr.w	r3, r3, #32
 800273a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800273c:	2320      	movs	r3, #32
 800273e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	2300      	movs	r3, #0
 8002744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002748:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
}
 800274e:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	6999      	ldr	r1, [r3, #24]
 8002754:	068a      	lsls	r2, r1, #26
 8002756:	d5e5      	bpl.n	8002724 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002758:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800275a:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800275e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002760:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002762:	f7ff ff55 	bl	8002610 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	6853      	ldr	r3, [r2, #4]
 800276a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800276e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002772:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800277c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002784:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8002788:	e7db      	b.n	8002742 <I2C_IsAcknowledgeFailed+0x32>

0800278a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800278a:	b570      	push	{r4, r5, r6, lr}
 800278c:	4604      	mov	r4, r0
 800278e:	460d      	mov	r5, r1
 8002790:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	079b      	lsls	r3, r3, #30
 8002798:	d501      	bpl.n	800279e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800279a:	2000      	movs	r0, #0
 800279c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800279e:	4632      	mov	r2, r6
 80027a0:	4629      	mov	r1, r5
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff ffb4 	bl	8002710 <I2C_IsAcknowledgeFailed>
 80027a8:	b9a0      	cbnz	r0, 80027d4 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80027aa:	1c6a      	adds	r2, r5, #1
 80027ac:	d0f1      	beq.n	8002792 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7fe fc37 	bl	8001020 <HAL_GetTick>
 80027b2:	1b80      	subs	r0, r0, r6
 80027b4:	4285      	cmp	r5, r0
 80027b6:	d301      	bcc.n	80027bc <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80027b8:	2d00      	cmp	r5, #0
 80027ba:	d1ea      	bne.n	8002792 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027be:	f043 0320 	orr.w	r3, r3, #32
 80027c2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	2320      	movs	r3, #32
 80027c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80027d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80027d4:	2001      	movs	r0, #1
}
 80027d6:	bd70      	pop	{r4, r5, r6, pc}

080027d8 <I2C_RequestMemoryRead>:
{
 80027d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80027dc:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <I2C_RequestMemoryRead+0x60>)
 80027e0:	9300      	str	r3, [sp, #0]
{
 80027e2:	4605      	mov	r5, r0
 80027e4:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027e6:	2300      	movs	r3, #0
 80027e8:	b2fa      	uxtb	r2, r7
 80027ea:	f7ff ff1f 	bl	800262c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ee:	4632      	mov	r2, r6
 80027f0:	9908      	ldr	r1, [sp, #32]
 80027f2:	4628      	mov	r0, r5
 80027f4:	f7ff ffc9 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 80027f8:	b110      	cbz	r0, 8002800 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
}
 80027fc:	b003      	add	sp, #12
 80027fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002800:	2f01      	cmp	r7, #1
 8002802:	682b      	ldr	r3, [r5, #0]
 8002804:	d10c      	bne.n	8002820 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002806:	b2e4      	uxtb	r4, r4
 8002808:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800280a:	9b08      	ldr	r3, [sp, #32]
 800280c:	9600      	str	r6, [sp, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	4628      	mov	r0, r5
 8002814:	f7ff ff51 	bl	80026ba <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002818:	3000      	adds	r0, #0
 800281a:	bf18      	it	ne
 800281c:	2001      	movne	r0, #1
 800281e:	e7ed      	b.n	80027fc <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002820:	0a22      	lsrs	r2, r4, #8
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002824:	9908      	ldr	r1, [sp, #32]
 8002826:	4632      	mov	r2, r6
 8002828:	4628      	mov	r0, r5
 800282a:	f7ff ffae 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 800282e:	2800      	cmp	r0, #0
 8002830:	d1e3      	bne.n	80027fa <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002832:	682b      	ldr	r3, [r5, #0]
 8002834:	e7e7      	b.n	8002806 <I2C_RequestMemoryRead+0x2e>
 8002836:	bf00      	nop
 8002838:	80002000 	.word	0x80002000

0800283c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	4604      	mov	r4, r0
 8002840:	460d      	mov	r5, r1
 8002842:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	069b      	lsls	r3, r3, #26
 800284a:	d501      	bpl.n	8002850 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800284c:	2000      	movs	r0, #0
 800284e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002850:	4632      	mov	r2, r6
 8002852:	4629      	mov	r1, r5
 8002854:	4620      	mov	r0, r4
 8002856:	f7ff ff5b 	bl	8002710 <I2C_IsAcknowledgeFailed>
 800285a:	b990      	cbnz	r0, 8002882 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7fe fbe0 	bl	8001020 <HAL_GetTick>
 8002860:	1b80      	subs	r0, r0, r6
 8002862:	4285      	cmp	r5, r0
 8002864:	d301      	bcc.n	800286a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002866:	2d00      	cmp	r5, #0
 8002868:	d1ec      	bne.n	8002844 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800286a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800286c:	f043 0320 	orr.w	r3, r3, #32
 8002870:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002872:	2320      	movs	r3, #32
 8002874:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	2300      	movs	r3, #0
 800287a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800287e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002882:	2001      	movs	r0, #1
}
 8002884:	bd70      	pop	{r4, r5, r6, pc}

08002886 <HAL_I2C_Init>:
{
 8002886:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002888:	4604      	mov	r4, r0
 800288a:	2800      	cmp	r0, #0
 800288c:	d04a      	beq.n	8002924 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002892:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002896:	b91b      	cbnz	r3, 80028a0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002898:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800289c:	f01d faf6 	bl	801fe8c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a0:	2324      	movs	r3, #36	; 0x24
 80028a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80028a6:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a8:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028b2:	6862      	ldr	r2, [r4, #4]
 80028b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028b8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ba:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028bc:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c6:	d124      	bne.n	8002912 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028cc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ce:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028d0:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028d2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80028d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028da:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028e4:	6922      	ldr	r2, [r4, #16]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	69a1      	ldr	r1, [r4, #24]
 80028ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028ee:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f0:	6a21      	ldr	r1, [r4, #32]
 80028f2:	69e2      	ldr	r2, [r4, #28]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002902:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002906:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002910:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002916:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002918:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800291a:	bf04      	itt	eq
 800291c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002920:	605a      	streq	r2, [r3, #4]
 8002922:	e7d4      	b.n	80028ce <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002924:	2001      	movs	r0, #1
}
 8002926:	bd10      	pop	{r4, pc}

08002928 <HAL_I2C_Mem_Read>:
{
 8002928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800292c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800292e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002932:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002934:	2b20      	cmp	r3, #32
{
 8002936:	4604      	mov	r4, r0
 8002938:	460f      	mov	r7, r1
 800293a:	9203      	str	r2, [sp, #12]
 800293c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002940:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002944:	f040 80a9 	bne.w	8002a9a <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800294a:	b113      	cbz	r3, 8002952 <HAL_I2C_Mem_Read+0x2a>
 800294c:	f1ba 0f00 	cmp.w	sl, #0
 8002950:	d106      	bne.n	8002960 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002956:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002958:	2001      	movs	r0, #1
}
 800295a:	b005      	add	sp, #20
 800295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002960:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002964:	2b01      	cmp	r3, #1
 8002966:	f000 8098 	beq.w	8002a9a <HAL_I2C_Mem_Read+0x172>
 800296a:	2501      	movs	r5, #1
 800296c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002970:	f7fe fb56 	bl	8001020 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002974:	2319      	movs	r3, #25
 8002976:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002978:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800297a:	462a      	mov	r2, r5
 800297c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff fe9a 	bl	80026ba <I2C_WaitOnFlagUntilTimeout>
 8002986:	4681      	mov	r9, r0
 8002988:	2800      	cmp	r0, #0
 800298a:	d1e5      	bne.n	8002958 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800298c:	2322      	movs	r3, #34	; 0x22
 800298e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002992:	2340      	movs	r3, #64	; 0x40
 8002994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800299a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800299c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800299e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80029a0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029a4:	9601      	str	r6, [sp, #4]
 80029a6:	f8cd 8000 	str.w	r8, [sp]
 80029aa:	465b      	mov	r3, fp
 80029ac:	9a03      	ldr	r2, [sp, #12]
 80029ae:	4639      	mov	r1, r7
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff ff11 	bl	80027d8 <I2C_RequestMemoryRead>
 80029b6:	b110      	cbz	r0, 80029be <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 80029b8:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80029bc:	e7cc      	b.n	8002958 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2bff      	cmp	r3, #255	; 0xff
 80029c4:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_I2C_Mem_Read+0x178>)
 80029c6:	d958      	bls.n	8002a7a <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029c8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80029ca:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80029ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80029d2:	4639      	mov	r1, r7
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fe29 	bl	800262c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029da:	9600      	str	r6, [sp, #0]
 80029dc:	4643      	mov	r3, r8
 80029de:	2200      	movs	r2, #0
 80029e0:	2104      	movs	r1, #4
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7ff fe69 	bl	80026ba <I2C_WaitOnFlagUntilTimeout>
 80029e8:	2800      	cmp	r0, #0
 80029ea:	d1b5      	bne.n	8002958 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80029f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80029f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80029f8:	3301      	adds	r3, #1
 80029fa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80029fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a06:	3a01      	subs	r2, #1
 8002a08:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a0a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002a0c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a0e:	b1ab      	cbz	r3, 8002a3c <HAL_I2C_Mem_Read+0x114>
 8002a10:	b9a2      	cbnz	r2, 8002a3c <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a12:	9600      	str	r6, [sp, #0]
 8002a14:	4643      	mov	r3, r8
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff fe4e 	bl	80026ba <I2C_WaitOnFlagUntilTimeout>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d19a      	bne.n	8002958 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2bff      	cmp	r3, #255	; 0xff
 8002a28:	d92f      	bls.n	8002a8a <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a2a:	22ff      	movs	r2, #255	; 0xff
 8002a2c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a2e:	9000      	str	r0, [sp, #0]
 8002a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a34:	4639      	mov	r1, r7
 8002a36:	4620      	mov	r0, r4
 8002a38:	f7ff fdf8 	bl	800262c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002a3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ca      	bne.n	80029da <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	4632      	mov	r2, r6
 8002a46:	4641      	mov	r1, r8
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7ff fef7 	bl	800283c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d182      	bne.n	8002958 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	2120      	movs	r1, #32
 8002a56:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002a5e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002a62:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002a70:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a74:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002a78:	e76f      	b.n	800295a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002a7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a7c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	e7a3      	b.n	80029d2 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002a8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a8c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	e7cc      	b.n	8002a34 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	e75d      	b.n	800295a <HAL_I2C_Mem_Read+0x32>
 8002a9e:	bf00      	nop
 8002aa0:	80002400 	.word	0x80002400

08002aa4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002aa4:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8002aa6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002aa8:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002aaa:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8002aac:	b103      	cbz	r3, 8002ab0 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002aae:	4718      	bx	r3
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_I2C_SlaveTxCpltCallback>:
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_I2C_SlaveRxCpltCallback>:
 8002ab4:	4770      	bx	lr

08002ab6 <I2C_ITSlaveSequentialCplt>:
{
 8002ab6:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	2500      	movs	r5, #0
 8002aba:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002abe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ac2:	2b29      	cmp	r3, #41	; 0x29
 8002ac4:	d10c      	bne.n	8002ae0 <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ac6:	2328      	movs	r3, #40	; 0x28
 8002ac8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002acc:	2321      	movs	r3, #33	; 0x21
 8002ace:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	f7ff fdc5 	bl	8002660 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ad6:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ada:	f7ff ffea 	bl	8002ab2 <HAL_I2C_SlaveTxCpltCallback>
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ae0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae6:	d10b      	bne.n	8002b00 <I2C_ITSlaveSequentialCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ae8:	2328      	movs	r3, #40	; 0x28
 8002aea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002aee:	2322      	movs	r3, #34	; 0x22
 8002af0:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002af2:	2102      	movs	r1, #2
 8002af4:	f7ff fdb4 	bl	8002660 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002af8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002afc:	f7ff ffda 	bl	8002ab4 <HAL_I2C_SlaveRxCpltCallback>
 8002b00:	bd38      	pop	{r3, r4, r5, pc}

08002b02 <HAL_I2C_AddrCallback>:
{
 8002b02:	4770      	bx	lr

08002b04 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b0e:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002b10:	4604      	mov	r4, r0
 8002b12:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b14:	d134      	bne.n	8002b80 <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8002b16:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b18:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b1a:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b1c:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b1e:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b20:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b22:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002b24:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b28:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b2c:	d120      	bne.n	8002b70 <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002b32:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002b36:	f015 0506 	ands.w	r5, r5, #6
 8002b3a:	d10e      	bne.n	8002b5a <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8002b3c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b3e:	3101      	adds	r1, #1
 8002b40:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b42:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b44:	2902      	cmp	r1, #2
 8002b46:	d120      	bne.n	8002b8a <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b48:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8002b4a:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b4c:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002b4e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b52:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b54:	f7ff ffd5 	bl	8002b02 <HAL_I2C_AddrCallback>
 8002b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	f7ff fd80 	bl	8002660 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002b60:	2300      	movs	r3, #0
 8002b62:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b66:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b6a:	4631      	mov	r1, r6
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	e7f1      	b.n	8002b54 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b70:	2104      	movs	r1, #4
 8002b72:	f7ff fd75 	bl	8002660 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b7c:	462a      	mov	r2, r5
 8002b7e:	e7f4      	b.n	8002b6a <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b80:	2208      	movs	r2, #8
 8002b82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002b84:	2300      	movs	r3, #0
 8002b86:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b8c <HAL_I2C_ListenCpltCallback>:
 8002b8c:	4770      	bx	lr
	...

08002b90 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <I2C_ITListenCplt+0x60>)
{
 8002b92:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b96:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002b9c:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ba6:	074b      	lsls	r3, r1, #29
{
 8002ba8:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002baa:	d512      	bpl.n	8002bd2 <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002bba:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002bbc:	b14b      	cbz	r3, 8002bd2 <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002bc2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	2107      	movs	r1, #7
 8002bd6:	f7ff fd43 	bl	8002660 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002be0:	2300      	movs	r3, #0
 8002be2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7ff ffd0 	bl	8002b8c <HAL_I2C_ListenCpltCallback>
 8002bec:	bd10      	pop	{r4, pc}
 8002bee:	bf00      	nop
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <HAL_I2C_ErrorCallback>:
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_I2C_AbortCpltCallback>:
{
 8002bf6:	4770      	bx	lr

08002bf8 <I2C_ITError>:
{
 8002bf8:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002bfc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c00:	2500      	movs	r5, #0
 8002c02:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c06:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002c08:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002c0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c0c:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002c0e:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c10:	2b02      	cmp	r3, #2
{
 8002c12:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8002c14:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c16:	d822      	bhi.n	8002c5e <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c18:	2103      	movs	r1, #3
 8002c1a:	f7ff fd21 	bl	8002660 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c1e:	2328      	movs	r3, #40	; 0x28
 8002c20:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002c24:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c26:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002c28:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c2e:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c30:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8002c34:	d020      	beq.n	8002c78 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8002c36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c3c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d03e      	beq.n	8002cc0 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <I2C_ITError+0xd4>)
 8002c44:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002c46:	2300      	movs	r3, #0
 8002c48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c4c:	f7fe ff87 	bl	8001b5e <HAL_DMA_Abort_IT>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d035      	beq.n	8002cc0 <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c56:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c5c:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c5e:	2107      	movs	r1, #7
 8002c60:	f7ff fcfe 	bl	8002660 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002c64:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c68:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c6a:	bf1c      	itt	ne
 8002c6c:	2320      	movne	r3, #32
 8002c6e:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	6303      	str	r3, [r0, #48]	; 0x30
 8002c76:	e7d7      	b.n	8002c28 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002c78:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8002c7c:	d00e      	beq.n	8002c9c <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c7e:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002c80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c86:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002c88:	b1d0      	cbz	r0, 8002cc0 <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <I2C_ITError+0xd4>)
 8002c8c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002c8e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c92:	f7fe ff64 	bl	8001b5e <HAL_DMA_Abort_IT>
 8002c96:	b198      	cbz	r0, 8002cc0 <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c98:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c9a:	e7dc      	b.n	8002c56 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c9c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002ca0:	2b60      	cmp	r3, #96	; 0x60
 8002ca2:	d108      	bne.n	8002cb6 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002caa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7ff ffa1 	bl	8002bf6 <HAL_I2C_AbortCpltCallback>
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8002cb6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff ff9a 	bl	8002bf4 <HAL_I2C_ErrorCallback>
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
 8002cc2:	bf00      	nop
 8002cc4:	ffff0000 	.word	0xffff0000
 8002cc8:	08002dc1 	.word	0x08002dc1
 8002ccc:	08002f31 	.word	0x08002f31

08002cd0 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002cd0:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd2:	2220      	movs	r2, #32
{
 8002cd4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002cd6:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd8:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cda:	2208      	movs	r2, #8
 8002cdc:	61da      	str	r2, [r3, #28]
{
 8002cde:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ce0:	2107      	movs	r1, #7
{
 8002ce2:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ce4:	f7ff fcbc 	bl	8002660 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ce8:	6803      	ldr	r3, [r0, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf0:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002cf8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002cfc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002d06:	f7ff fc83 	bl	8002610 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d0a:	0471      	lsls	r1, r6, #17
 8002d0c:	d532      	bpl.n	8002d74 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8002d0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002d10:	b11b      	cbz	r3, 8002d1a <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d1a:	076b      	lsls	r3, r5, #29
 8002d1c:	d50e      	bpl.n	8002d3c <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d28:	3301      	adds	r3, #1
 8002d2a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002d2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002d2e:	b12b      	cbz	r3, 8002d3c <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8002d30:	3b01      	subs	r3, #1
 8002d32:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002d34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002d3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b11b      	cbz	r3, 8002d4a <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002d52:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d56:	b18b      	cbz	r3, 8002d7c <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d58:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff ff4c 	bl	8002bf8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d60:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002d64:	2b28      	cmp	r3, #40	; 0x28
 8002d66:	d128      	bne.n	8002dba <I2C_ITSlaveCplt+0xea>
      I2C_ITListenCplt(hi2c, ITFlags);
 8002d68:	4629      	mov	r1, r5
 8002d6a:	4620      	mov	r0, r4
}
 8002d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8002d70:	f7ff bf0e 	b.w	8002b90 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d74:	0432      	lsls	r2, r6, #16
 8002d76:	d5d0      	bpl.n	8002d1a <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 8002d78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002d7a:	e7c9      	b.n	8002d10 <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d7e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002d82:	d00a      	beq.n	8002d9a <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <I2C_ITSlaveCplt+0xec>)
 8002d86:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002d8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d92:	4620      	mov	r0, r4
 8002d94:	f7ff fefa 	bl	8002b8c <HAL_I2C_ListenCpltCallback>
 8002d98:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d9a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002d9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002da2:	2a22      	cmp	r2, #34	; 0x22
 8002da4:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002dac:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dae:	d102      	bne.n	8002db6 <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002db0:	f7ff fe80 	bl	8002ab4 <HAL_I2C_SlaveRxCpltCallback>
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002db6:	f7ff fe7c 	bl	8002ab2 <HAL_I2C_SlaveTxCpltCallback>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	ffff0000 	.word	0xffff0000

08002dc0 <I2C_Slave_ISR_IT>:
{
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8002dc4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dc8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002dca:	2a01      	cmp	r2, #1
{
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8002dd0:	d07c      	beq.n	8002ecc <I2C_Slave_ISR_IT+0x10c>
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002dd8:	06ca      	lsls	r2, r1, #27
 8002dda:	d539      	bpl.n	8002e50 <I2C_Slave_ISR_IT+0x90>
 8002ddc:	06f2      	lsls	r2, r6, #27
 8002dde:	d537      	bpl.n	8002e50 <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8002de0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002de2:	b292      	uxth	r2, r2
 8002de4:	bb32      	cbnz	r2, 8002e34 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002de6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002dea:	2a28      	cmp	r2, #40	; 0x28
 8002dec:	d110      	bne.n	8002e10 <I2C_Slave_ISR_IT+0x50>
 8002dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002df2:	d10d      	bne.n	8002e10 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 8002df4:	f7ff fecc 	bl	8002b90 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002df8:	06aa      	lsls	r2, r5, #26
 8002dfa:	d505      	bpl.n	8002e08 <I2C_Slave_ISR_IT+0x48>
 8002dfc:	06b3      	lsls	r3, r6, #26
 8002dfe:	d503      	bpl.n	8002e08 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002e00:	4629      	mov	r1, r5
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff ff64 	bl	8002cd0 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e10:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002e14:	2a29      	cmp	r2, #41	; 0x29
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1c:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e1e:	d1eb      	bne.n	8002df8 <I2C_Slave_ISR_IT+0x38>
 8002e20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e24:	d0e8      	beq.n	8002df8 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7ff fbf2 	bl	8002610 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f7ff fe42 	bl	8002ab6 <I2C_ITSlaveSequentialCplt>
 8002e32:	e7e1      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e34:	6802      	ldr	r2, [r0, #0]
 8002e36:	2110      	movs	r1, #16
 8002e38:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e3c:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e40:	f042 0204 	orr.w	r2, r2, #4
 8002e44:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e46:	d1d7      	bne.n	8002df8 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e48:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002e4a:	f7ff fed5 	bl	8002bf8 <I2C_ITError>
 8002e4e:	e7d3      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e50:	076a      	lsls	r2, r5, #29
 8002e52:	d51a      	bpl.n	8002e8a <I2C_Slave_ISR_IT+0xca>
 8002e54:	0770      	lsls	r0, r6, #29
 8002e56:	d518      	bpl.n	8002e8a <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 8002e58:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	b16a      	cbz	r2, 8002e7a <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e5e:	6821      	ldr	r1, [r4, #0]
 8002e60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e62:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002e64:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8002e66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e68:	3201      	adds	r2, #1
 8002e6a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002e6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002e6e:	3a01      	subs	r2, #1
 8002e70:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002e72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e74:	3a01      	subs	r2, #1
 8002e76:	b292      	uxth	r2, r2
 8002e78:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002e7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	2a00      	cmp	r2, #0
 8002e80:	d1ba      	bne.n	8002df8 <I2C_Slave_ISR_IT+0x38>
 8002e82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e86:	d1d1      	bne.n	8002e2c <I2C_Slave_ISR_IT+0x6c>
 8002e88:	e7b6      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e8a:	0729      	lsls	r1, r5, #28
 8002e8c:	d505      	bpl.n	8002e9a <I2C_Slave_ISR_IT+0xda>
 8002e8e:	0732      	lsls	r2, r6, #28
 8002e90:	d503      	bpl.n	8002e9a <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7ff fe36 	bl	8002b04 <I2C_ITAddrCplt.isra.8>
 8002e98:	e7ae      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e9a:	07a8      	lsls	r0, r5, #30
 8002e9c:	d5ac      	bpl.n	8002df8 <I2C_Slave_ISR_IT+0x38>
 8002e9e:	07b1      	lsls	r1, r6, #30
 8002ea0:	d5aa      	bpl.n	8002df8 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 8002ea2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	b16a      	cbz	r2, 8002ec4 <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002eb0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002eb2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002eb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ebc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	8523      	strh	r3, [r4, #40]	; 0x28
 8002ec2:	e799      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ec4:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	d0b0      	beq.n	8002e2c <I2C_Slave_ISR_IT+0x6c>
 8002eca:	e795      	b.n	8002df8 <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 8002ecc:	2002      	movs	r0, #2
}
 8002ece:	bd70      	pop	{r4, r5, r6, pc}

08002ed0 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ed4:	681a      	ldr	r2, [r3, #0]
{
 8002ed6:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ed8:	05cc      	lsls	r4, r1, #23
 8002eda:	d508      	bpl.n	8002eee <HAL_I2C_ER_IRQHandler+0x1e>
 8002edc:	0614      	lsls	r4, r2, #24
 8002ede:	d506      	bpl.n	8002eee <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ee0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ee2:	f044 0401 	orr.w	r4, r4, #1
 8002ee6:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ee8:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002eec:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002eee:	054c      	lsls	r4, r1, #21
 8002ef0:	d508      	bpl.n	8002f04 <HAL_I2C_ER_IRQHandler+0x34>
 8002ef2:	0614      	lsls	r4, r2, #24
 8002ef4:	d506      	bpl.n	8002f04 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002ef6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ef8:	f044 0408 	orr.w	r4, r4, #8
 8002efc:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002efe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002f02:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f04:	0589      	lsls	r1, r1, #22
 8002f06:	d508      	bpl.n	8002f1a <HAL_I2C_ER_IRQHandler+0x4a>
 8002f08:	0612      	lsls	r2, r2, #24
 8002f0a:	d506      	bpl.n	8002f1a <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002f0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f0e:	f042 0202 	orr.w	r2, r2, #2
 8002f12:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f18:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8002f1a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002f1c:	f011 0f0b 	tst.w	r1, #11
 8002f20:	d003      	beq.n	8002f2a <HAL_I2C_ER_IRQHandler+0x5a>
}
 8002f22:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8002f26:	f7ff be67 	b.w	8002bf8 <I2C_ITError>
}
 8002f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f30:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002f32:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 8002f34:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002f3a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002f3c:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f42:	2b60      	cmp	r3, #96	; 0x60
 8002f44:	d105      	bne.n	8002f52 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	2320      	movs	r3, #32
 8002f48:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f4c:	f7ff fe53 	bl	8002bf6 <HAL_I2C_AbortCpltCallback>
 8002f50:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8002f52:	f7ff fe4f 	bl	8002bf4 <HAL_I2C_ErrorCallback>
 8002f56:	bd08      	pop	{r3, pc}

08002f58 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f58:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	2a20      	cmp	r2, #32
{
 8002f60:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f62:	d11d      	bne.n	8002fa0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d019      	beq.n	8002fa0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6c:	2324      	movs	r3, #36	; 0x24
 8002f6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f72:	6803      	ldr	r3, [r0, #0]
 8002f74:	681c      	ldr	r4, [r3, #0]
 8002f76:	f024 0401 	bic.w	r4, r4, #1
 8002f7a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f7c:	681c      	ldr	r4, [r3, #0]
 8002f7e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002f82:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f84:	681c      	ldr	r4, [r3, #0]
 8002f86:	4321      	orrs	r1, r4
 8002f88:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	f041 0101 	orr.w	r1, r1, #1
 8002f90:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f92:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2002      	movs	r0, #2
  }
}
 8002fa2:	bd10      	pop	{r4, pc}

08002fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fa4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002faa:	b2e4      	uxtb	r4, r4
 8002fac:	2c20      	cmp	r4, #32
 8002fae:	d11c      	bne.n	8002fea <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d018      	beq.n	8002fea <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	2324      	movs	r3, #36	; 0x24
 8002fba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fbe:	6803      	ldr	r3, [r0, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fc8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fce:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fd2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fdc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002fe2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002fea:	2002      	movs	r0, #2
  }
}
 8002fec:	bd10      	pop	{r4, pc}

08002fee <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002fee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002ff2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002ff4:	6804      	ldr	r4, [r0, #0]
 8002ff6:	684f      	ldr	r7, [r1, #4]
 8002ff8:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002ffa:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002ffe:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003002:	3284      	adds	r2, #132	; 0x84
 8003004:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003006:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800300a:	6858      	ldr	r0, [r3, #4]
 800300c:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8003010:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003012:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003014:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003018:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800301c:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800301e:	4430      	add	r0, r6
 8003020:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003024:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003026:	68e0      	ldr	r0, [r4, #12]
 8003028:	68cd      	ldr	r5, [r1, #12]
 800302a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800302e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003030:	6898      	ldr	r0, [r3, #8]
 8003032:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8003036:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003038:	68e6      	ldr	r6, [r4, #12]
 800303a:	6888      	ldr	r0, [r1, #8]
 800303c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003040:	3001      	adds	r0, #1
 8003042:	4430      	add	r0, r6
 8003044:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003048:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800304a:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800304c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800304e:	f020 0007 	bic.w	r0, r0, #7
 8003052:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003054:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003058:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800305a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800305c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003060:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003064:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003068:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800306c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003070:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003074:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003078:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800307a:	6958      	ldr	r0, [r3, #20]
 800307c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003080:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003082:	6948      	ldr	r0, [r1, #20]
 8003084:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003086:	69d8      	ldr	r0, [r3, #28]
 8003088:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800308c:	f020 0007 	bic.w	r0, r0, #7
 8003090:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003092:	6a08      	ldr	r0, [r1, #32]
 8003094:	69cd      	ldr	r5, [r1, #28]
 8003096:	4305      	orrs	r5, r0
 8003098:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800309a:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800309c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800309e:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80030a2:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80030a4:	b31e      	cbz	r6, 80030ee <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80030a6:	2e01      	cmp	r6, #1
 80030a8:	d023      	beq.n	80030f2 <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030aa:	1eb0      	subs	r0, r6, #2
 80030ac:	2802      	cmp	r0, #2
 80030ae:	d922      	bls.n	80030f6 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030b0:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 80030b2:	bf0c      	ite	eq
 80030b4:	2002      	moveq	r0, #2
 80030b6:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80030b8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80030ba:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80030be:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80030c0:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80030c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80030c4:	eba7 070e 	sub.w	r7, r7, lr
 80030c8:	4345      	muls	r5, r0
 80030ca:	4378      	muls	r0, r7
 80030cc:	3003      	adds	r0, #3
 80030ce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80030d2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80030d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030d6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80030da:	f020 0007 	bic.w	r0, r0, #7
 80030de:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80030e0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80030e2:	58a3      	ldr	r3, [r4, r2]
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	50a3      	str	r3, [r4, r2]
 80030ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 80030ee:	2004      	movs	r0, #4
 80030f0:	e7e2      	b.n	80030b8 <LTDC_SetConfig+0xca>
    tmp = 3;
 80030f2:	2003      	movs	r0, #3
 80030f4:	e7e0      	b.n	80030b8 <LTDC_SetConfig+0xca>
    tmp = 2;
 80030f6:	2002      	movs	r0, #2
 80030f8:	e7de      	b.n	80030b8 <LTDC_SetConfig+0xca>
	...

080030fc <HAL_LTDC_Init>:
{
 80030fc:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 80030fe:	4604      	mov	r4, r0
 8003100:	2800      	cmp	r0, #0
 8003102:	d063      	beq.n	80031cc <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003104:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003108:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800310c:	b91b      	cbnz	r3, 8003116 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800310e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003112:	f01c fc9f 	bl	801fa54 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003116:	2302      	movs	r3, #2
 8003118:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800311c:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800311e:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003126:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003128:	6862      	ldr	r2, [r4, #4]
 800312a:	6999      	ldr	r1, [r3, #24]
 800312c:	4302      	orrs	r2, r0
 800312e:	68e0      	ldr	r0, [r4, #12]
 8003130:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003132:	6920      	ldr	r0, [r4, #16]
 8003134:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003136:	430a      	orrs	r2, r1
 8003138:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4924      	ldr	r1, [pc, #144]	; (80031d0 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16);
 800313e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003140:	400a      	ands	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800314a:	69a0      	ldr	r0, [r4, #24]
 800314c:	4302      	orrs	r2, r0
 800314e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003150:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8003152:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003154:	400a      	ands	r2, r1
 8003156:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800315e:	6a20      	ldr	r0, [r4, #32]
 8003160:	4302      	orrs	r2, r0
 8003162:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003164:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8003166:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003168:	400a      	ands	r2, r1
 800316a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003172:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003174:	4302      	orrs	r2, r0
 8003176:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	4011      	ands	r1, r2
 800317c:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800317e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003180:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003182:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003186:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003188:	430a      	orrs	r2, r1
 800318a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800318c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800318e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8003192:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003196:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800319a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800319c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800319e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80031a2:	430a      	orrs	r2, r1
 80031a4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80031a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80031ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b0:	f042 0206 	orr.w	r2, r2, #6
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80031be:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80031c0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80031c2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80031c6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031cc:	2001      	movs	r0, #1
}
 80031ce:	bd38      	pop	{r3, r4, r5, pc}
 80031d0:	f000f800 	.word	0xf000f800

080031d4 <HAL_LTDC_ConfigLayer>:
{   
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80031d6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80031da:	2b01      	cmp	r3, #1
{   
 80031dc:	4606      	mov	r6, r0
 80031de:	468e      	mov	lr, r1
 80031e0:	4694      	mov	ip, r2
 80031e2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80031e6:	d01d      	beq.n	8003224 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031e8:	2434      	movs	r4, #52	; 0x34
 80031ea:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031ec:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031f0:	fb04 6402 	mla	r4, r4, r2, r6
 80031f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 80031f6:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031f8:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 80031fa:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800320c:	4630      	mov	r0, r6
 800320e:	4662      	mov	r2, ip
 8003210:	4671      	mov	r1, lr
 8003212:	f7ff feec 	bl	8002fee <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003216:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003218:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800321a:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800321c:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003220:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003226 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8003226:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800322a:	2b01      	cmp	r3, #1
{
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	f04f 0302 	mov.w	r3, #2
 8003232:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8003234:	d015      	beq.n	8003262 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003236:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 800323a:	2334      	movs	r3, #52	; 0x34
 800323c:	4353      	muls	r3, r2
 800323e:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 8003240:	2501      	movs	r5, #1
 8003242:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8003246:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003248:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800324c:	4401      	add	r1, r0
 800324e:	f7ff fece 	bl	8002fee <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003252:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8003254:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003256:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003258:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800325c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 8003260:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8003262:	4618      	mov	r0, r3
}
 8003264:	bd70      	pop	{r4, r5, r6, pc}

08003266 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800326a:	4604      	mov	r4, r0
{
 800326c:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 800326e:	2800      	cmp	r0, #0
 8003270:	d074      	beq.n	800335c <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003272:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8003276:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800327a:	b91b      	cbnz	r3, 8003284 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800327c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003280:	f01c ff4c 	bl	802011c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003284:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003286:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8003288:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 800328c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8003290:	f004 fb9d 	bl	80079ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003296:	466e      	mov	r6, sp
 8003298:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800329a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800329c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800329e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032a2:	e886 0003 	stmia.w	r6, {r0, r1}
 80032a6:	f104 0804 	add.w	r8, r4, #4
 80032aa:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	f004 fb58 	bl	8007964 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032b4:	2100      	movs	r1, #0
 80032b6:	6820      	ldr	r0, [r4, #0]
 80032b8:	f004 fb8f 	bl	80079da <USB_SetCurrentMode>
 80032bc:	2100      	movs	r1, #0
 80032be:	4622      	mov	r2, r4
 80032c0:	4623      	mov	r3, r4
 80032c2:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032c6:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c8:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 80032ca:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ce:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 80032d2:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 80032d4:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 80032d6:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032da:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80032de:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032e0:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80032e2:	6518      	str	r0, [r3, #80]	; 0x50
 80032e4:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 80032e8:	d1ef      	bne.n	80032ca <HAL_PCD_Init+0x64>
 80032ea:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032ec:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80032ee:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80032f2:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 80032f4:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 80032f6:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032fa:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032fe:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003302:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003306:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 800330a:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 800330e:	d1ee      	bne.n	80032ee <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003312:	466e      	mov	r6, sp
 8003314:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003318:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800331a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800331e:	e886 0003 	stmia.w	r6, {r0, r1}
 8003322:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	f004 fb98 	bl	8007a5c <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 800332c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800332e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003332:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003338:	2b01      	cmp	r3, #1
 800333a:	d102      	bne.n	8003342 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800333c:	4620      	mov	r0, r4
 800333e:	f000 fc27 	bl	8003b90 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8003342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003344:	2b01      	cmp	r3, #1
 8003346:	d102      	bne.n	800334e <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8003348:	4620      	mov	r0, r4
 800334a:	f000 fc34 	bl	8003bb6 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	f004 fe5e 	bl	8008010 <USB_DevDisconnect>

  return HAL_OK;
 8003354:	2000      	movs	r0, #0
}
 8003356:	b00a      	add	sp, #40	; 0x28
 8003358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800335c:	2001      	movs	r0, #1
 800335e:	e7fa      	b.n	8003356 <HAL_PCD_Init+0xf0>

08003360 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8003360:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003364:	2b01      	cmp	r3, #1
{
 8003366:	b510      	push	{r4, lr}
 8003368:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800336a:	d00c      	beq.n	8003386 <HAL_PCD_Start+0x26>
 800336c:	2301      	movs	r3, #1
 800336e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8003372:	6800      	ldr	r0, [r0, #0]
 8003374:	f004 fe40 	bl	8007ff8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003378:	6820      	ldr	r0, [r4, #0]
 800337a:	f004 fb22 	bl	80079c2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800337e:	2000      	movs	r0, #0
 8003380:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003384:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003386:	2002      	movs	r0, #2
}
 8003388:	bd10      	pop	{r4, pc}
	...

0800338c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003390:	f8d0 9000 	ldr.w	r9, [r0]
{
 8003394:	b085      	sub	sp, #20
 8003396:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003398:	4648      	mov	r0, r9
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 800339a:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800339e:	f004 fe72 	bl	8008086 <USB_GetMode>
 80033a2:	9000      	str	r0, [sp, #0]
 80033a4:	2800      	cmp	r0, #0
 80033a6:	f040 8154 	bne.w	8003652 <HAL_PCD_IRQHandler+0x2c6>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	f004 fe3c 	bl	8008028 <USB_ReadInterrupts>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	f000 814e 	beq.w	8003652 <HAL_PCD_IRQHandler+0x2c6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033b6:	6820      	ldr	r0, [r4, #0]
 80033b8:	f004 fe36 	bl	8008028 <USB_ReadInterrupts>
 80033bc:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033be:	bf48      	it	mi
 80033c0:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033c2:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033c4:	bf42      	ittt	mi
 80033c6:	6953      	ldrmi	r3, [r2, #20]
 80033c8:	f003 0302 	andmi.w	r3, r3, #2
 80033cc:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033ce:	f004 fe2b 	bl	8008028 <USB_ReadInterrupts>
 80033d2:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
 80033d6:	d00b      	beq.n	80033f0 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	f004 fe29 	bl	8008030 <USB_ReadDevAllOutEpInterrupt>
 80033de:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80033e2:	4605      	mov	r5, r0

      while (ep_intr != 0U)
 80033e4:	46b2      	mov	sl, r6
      epnum = 0U;
 80033e6:	f04f 0b00 	mov.w	fp, #0
      while (ep_intr != 0U)
 80033ea:	2d00      	cmp	r5, #0
 80033ec:	f040 8134 	bne.w	8003658 <HAL_PCD_IRQHandler+0x2cc>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	f004 fe19 	bl	8008028 <USB_ReadInterrupts>
 80033f6:	0347      	lsls	r7, r0, #13
 80033f8:	d50c      	bpl.n	8003414 <HAL_PCD_IRQHandler+0x88>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	f004 fe20 	bl	8008040 <USB_ReadDevAllInEpInterrupt>
 8003400:	4625      	mov	r5, r4
 8003402:	9001      	str	r0, [sp, #4]
 8003404:	f509 6810 	add.w	r8, r9, #2304	; 0x900

      epnum = 0U;
 8003408:	f04f 0b00 	mov.w	fp, #0

      while (ep_intr != 0U)
 800340c:	9b01      	ldr	r3, [sp, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 8164 	bne.w	80036dc <HAL_PCD_IRQHandler+0x350>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	f004 fe07 	bl	8008028 <USB_ReadInterrupts>
 800341a:	2800      	cmp	r0, #0
 800341c:	da15      	bge.n	800344a <HAL_PCD_IRQHandler+0xbe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800341e:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 800342a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800342e:	2b01      	cmp	r3, #1
 8003430:	f040 81cf 	bne.w	80037d2 <HAL_PCD_IRQHandler+0x446>
      {
        hpcd->LPM_State = LPM_L0;
 8003434:	2100      	movs	r1, #0
 8003436:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800343a:	4620      	mov	r0, r4
 800343c:	f01c ffd4 	bl	80203e8 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	6953      	ldr	r3, [r2, #20]
 8003444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003448:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800344a:	6820      	ldr	r0, [r4, #0]
 800344c:	f004 fdec 	bl	8008028 <USB_ReadInterrupts>
 8003450:	0505      	lsls	r5, r0, #20
 8003452:	d50b      	bpl.n	800346c <HAL_PCD_IRQHandler+0xe0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003454:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8003458:	07d8      	lsls	r0, r3, #31
 800345a:	d502      	bpl.n	8003462 <HAL_PCD_IRQHandler+0xd6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800345c:	4620      	mov	r0, r4
 800345e:	f01c fec7 	bl	80201f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	6953      	ldr	r3, [r2, #20]
 8003466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346a:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	f004 fddb 	bl	8008028 <USB_ReadInterrupts>
 8003472:	0101      	lsls	r1, r0, #4
 8003474:	d514      	bpl.n	80034a0 <HAL_PCD_IRQHandler+0x114>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800347e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003480:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8003484:	2a00      	cmp	r2, #0
 8003486:	f040 81a8 	bne.w	80037da <HAL_PCD_IRQHandler+0x44e>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 800348c:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800348e:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8003492:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003496:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800349a:	4620      	mov	r0, r4
 800349c:	f01c ffa4 	bl	80203e8 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034a0:	6820      	ldr	r0, [r4, #0]
 80034a2:	f004 fdc1 	bl	8008028 <USB_ReadInterrupts>
 80034a6:	04c2      	lsls	r2, r0, #19
 80034a8:	d534      	bpl.n	8003514 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034aa:	f509 6500 	add.w	r5, r9, #2048	; 0x800
 80034ae:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034b0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034b8:	2110      	movs	r1, #16
 80034ba:	f004 faa5 	bl	8007a08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	6860      	ldr	r0, [r4, #4]
 80034c0:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034c4:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c8:	9a00      	ldr	r2, [sp, #0]
 80034ca:	4282      	cmp	r2, r0
 80034cc:	f040 8189 	bne.w	80037e2 <HAL_PCD_IRQHandler+0x456>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034d0:	69eb      	ldr	r3, [r5, #28]
 80034d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034d6:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 819a 	beq.w	8003814 <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80034e0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80034e4:	f043 030b 	orr.w	r3, r3, #11
 80034e8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80034ec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80034ee:	f043 030b 	orr.w	r3, r3, #11
 80034f2:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034f4:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034f8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034fe:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003502:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003506:	f004 fddd 	bl	80080c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	6953      	ldr	r3, [r2, #20]
 800350e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003512:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003514:	6820      	ldr	r0, [r4, #0]
 8003516:	f004 fd87 	bl	8008028 <USB_ReadInterrupts>
 800351a:	0483      	lsls	r3, r0, #18
 800351c:	d520      	bpl.n	8003560 <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	f004 fdb5 	bl	800808e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	68d3      	ldr	r3, [r2, #12]
 8003528:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800352c:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800352e:	2303      	movs	r3, #3
 8003530:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8003536:	f000 ff9d 	bl	8004474 <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 800353a:	4bb3      	ldr	r3, [pc, #716]	; (8003808 <HAL_PCD_IRQHandler+0x47c>)
 800353c:	4ab3      	ldr	r2, [pc, #716]	; (800380c <HAL_PCD_IRQHandler+0x480>)
 800353e:	4403      	add	r3, r0
 8003540:	4293      	cmp	r3, r2
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	f200 816f 	bhi.w	8003826 <HAL_PCD_IRQHandler+0x49a>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 800354e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003550:	4620      	mov	r0, r4
 8003552:	f01c fe40 	bl	80201d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	6953      	ldr	r3, [r2, #20]
 800355a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800355e:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	f004 fd61 	bl	8008028 <USB_ReadInterrupts>
 8003566:	06c7      	lsls	r7, r0, #27
 8003568:	d52b      	bpl.n	80035c2 <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	6993      	ldr	r3, [r2, #24]
 800356e:	f023 0310 	bic.w	r3, r3, #16
 8003572:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8003574:	f8d9 5020 	ldr.w	r5, [r9, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003578:	f3c5 4343 	ubfx	r3, r5, #17, #4
 800357c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800357e:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003582:	f040 81a0 	bne.w	80038c6 <HAL_PCD_IRQHandler+0x53a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003586:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800358a:	421d      	tst	r5, r3
 800358c:	d014      	beq.n	80035b8 <HAL_PCD_IRQHandler+0x22c>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800358e:	261c      	movs	r6, #28
 8003590:	fb06 4607 	mla	r6, r6, r7, r4
 8003594:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003598:	462a      	mov	r2, r5
 800359a:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800359e:	4648      	mov	r0, r9
 80035a0:	f004 fcb4 	bl	8007f0c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035a4:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 80035a8:	442b      	add	r3, r5
 80035aa:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035ae:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80035b2:	441d      	add	r5, r3
 80035b4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	6993      	ldr	r3, [r2, #24]
 80035bc:	f043 0310 	orr.w	r3, r3, #16
 80035c0:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	f004 fd30 	bl	8008028 <USB_ReadInterrupts>
 80035c8:	0706      	lsls	r6, r0, #28
 80035ca:	d507      	bpl.n	80035dc <HAL_PCD_IRQHandler+0x250>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035cc:	4620      	mov	r0, r4
 80035ce:	f01c fdfe 	bl	80201ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	6953      	ldr	r3, [r2, #20]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	f004 fd23 	bl	8008028 <USB_ReadInterrupts>
 80035e2:	02c5      	lsls	r5, r0, #11
 80035e4:	d509      	bpl.n	80035fa <HAL_PCD_IRQHandler+0x26e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035e6:	fa5f f18b 	uxtb.w	r1, fp
 80035ea:	4620      	mov	r0, r4
 80035ec:	f01c fe36 	bl	802025c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035f0:	6822      	ldr	r2, [r4, #0]
 80035f2:	6953      	ldr	r3, [r2, #20]
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	f004 fd14 	bl	8008028 <USB_ReadInterrupts>
 8003600:	0280      	lsls	r0, r0, #10
 8003602:	d509      	bpl.n	8003618 <HAL_PCD_IRQHandler+0x28c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003604:	fa5f f18b 	uxtb.w	r1, fp
 8003608:	4620      	mov	r0, r4
 800360a:	f01c fe23 	bl	8020254 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	6953      	ldr	r3, [r2, #20]
 8003612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003616:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	f004 fd05 	bl	8008028 <USB_ReadInterrupts>
 800361e:	0041      	lsls	r1, r0, #1
 8003620:	d507      	bpl.n	8003632 <HAL_PCD_IRQHandler+0x2a6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003622:	4620      	mov	r0, r4
 8003624:	f01c fe1e 	bl	8020264 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	6953      	ldr	r3, [r2, #20]
 800362c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003630:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	f004 fcf8 	bl	8008028 <USB_ReadInterrupts>
 8003638:	0742      	lsls	r2, r0, #29
 800363a:	d50a      	bpl.n	8003652 <HAL_PCD_IRQHandler+0x2c6>
    {
      temp = hpcd->Instance->GOTGINT;
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003640:	076b      	lsls	r3, r5, #29
 8003642:	d502      	bpl.n	800364a <HAL_PCD_IRQHandler+0x2be>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003644:	4620      	mov	r0, r4
 8003646:	f01c fe11 	bl	802026c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4315      	orrs	r5, r2
 8003650:	605d      	str	r5, [r3, #4]
    }
  }
}
 8003652:	b005      	add	sp, #20
 8003654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8003658:	07e9      	lsls	r1, r5, #31
 800365a:	d52e      	bpl.n	80036ba <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800365c:	fa5f f28b 	uxtb.w	r2, fp
 8003660:	4611      	mov	r1, r2
 8003662:	6820      	ldr	r0, [r4, #0]
 8003664:	9201      	str	r2, [sp, #4]
 8003666:	f004 fcf3 	bl	8008050 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800366a:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800366c:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800366e:	d50d      	bpl.n	800368c <HAL_PCD_IRQHandler+0x300>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003670:	4b67      	ldr	r3, [pc, #412]	; (8003810 <HAL_PCD_IRQHandler+0x484>)
 8003672:	9a01      	ldr	r2, [sp, #4]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003674:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003676:	4598      	cmp	r8, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003678:	f8ca 1008 	str.w	r1, [sl, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800367c:	d129      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x346>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 800367e:	68b1      	ldr	r1, [r6, #8]
 8003680:	040b      	lsls	r3, r1, #16
 8003682:	d520      	bpl.n	80036c6 <HAL_PCD_IRQHandler+0x33a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003684:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003688:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800368c:	0739      	lsls	r1, r7, #28
 800368e:	d50f      	bpl.n	80036b0 <HAL_PCD_IRQHandler+0x324>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003690:	4b5f      	ldr	r3, [pc, #380]	; (8003810 <HAL_PCD_IRQHandler+0x484>)
 8003692:	4598      	cmp	r8, r3
 8003694:	d106      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x318>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003696:	68b2      	ldr	r2, [r6, #8]
 8003698:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 800369a:	bf44      	itt	mi
 800369c:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 80036a0:	f8ca 2008 	strmi.w	r2, [sl, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 80036a4:	4620      	mov	r0, r4
 80036a6:	f01c fd7b 	bl	80201a0 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036aa:	2308      	movs	r3, #8
 80036ac:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036b0:	06fb      	lsls	r3, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036b2:	bf44      	itt	mi
 80036b4:	2310      	movmi	r3, #16
 80036b6:	f8ca 3008 	strmi.w	r3, [sl, #8]
        epnum++;
 80036ba:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 80036be:	086d      	lsrs	r5, r5, #1
 80036c0:	f10a 0a20 	add.w	sl, sl, #32
 80036c4:	e691      	b.n	80033ea <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 80036c6:	68b1      	ldr	r1, [r6, #8]
 80036c8:	0688      	lsls	r0, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 80036ca:	bf44      	itt	mi
 80036cc:	2120      	movmi	r1, #32
 80036ce:	f8ca 1008 	strmi.w	r1, [sl, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036d2:	4611      	mov	r1, r2
 80036d4:	4620      	mov	r0, r4
 80036d6:	f01c fd69 	bl	80201ac <HAL_PCD_DataOutStageCallback>
 80036da:	e7d7      	b.n	800368c <HAL_PCD_IRQHandler+0x300>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036dc:	9b01      	ldr	r3, [sp, #4]
 80036de:	07de      	lsls	r6, r3, #31
 80036e0:	d56e      	bpl.n	80037c0 <HAL_PCD_IRQHandler+0x434>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036e2:	fa5f fa8b 	uxtb.w	sl, fp
 80036e6:	4651      	mov	r1, sl
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	f004 fcba 	bl	8008062 <USB_ReadDevInEPInterrupt>
 80036ee:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036f0:	07f0      	lsls	r0, r6, #31
 80036f2:	d510      	bpl.n	8003716 <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036f4:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 80036f8:	2001      	movs	r0, #1
 80036fa:	f00b 020f 	and.w	r2, fp, #15
 80036fe:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003702:	ea23 0302 	bic.w	r3, r3, r2
 8003706:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800370a:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800370c:	f8c8 0008 	str.w	r0, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003710:	4620      	mov	r0, r4
 8003712:	f01c fd54 	bl	80201be <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003716:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003718:	bf44      	itt	mi
 800371a:	2308      	movmi	r3, #8
 800371c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003720:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003722:	bf44      	itt	mi
 8003724:	2310      	movmi	r3, #16
 8003726:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800372a:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800372c:	bf44      	itt	mi
 800372e:	2340      	movmi	r3, #64	; 0x40
 8003730:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003734:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003736:	bf44      	itt	mi
 8003738:	2302      	movmi	r3, #2
 800373a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800373e:	0636      	lsls	r6, r6, #24
 8003740:	d53e      	bpl.n	80037c0 <HAL_PCD_IRQHandler+0x434>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8003742:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003744:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 8003746:	42b3      	cmp	r3, r6
 8003748:	d83a      	bhi.n	80037c0 <HAL_PCD_IRQHandler+0x434>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800374a:	1af6      	subs	r6, r6, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800374c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 8003752:	429e      	cmp	r6, r3
 8003754:	bf28      	it	cs
 8003756:	461e      	movcs	r6, r3

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003758:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800375c:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800375e:	eb03 134b 	add.w	r3, r3, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8003762:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003764:	9303      	str	r3, [sp, #12]
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	b29b      	uxth	r3, r3
 800376e:	42b3      	cmp	r3, r6
 8003770:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003772:	d923      	bls.n	80037bc <HAL_PCD_IRQHandler+0x430>
 8003774:	429f      	cmp	r7, r3
 8003776:	d921      	bls.n	80037bc <HAL_PCD_IRQHandler+0x430>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003778:	b967      	cbnz	r7, 8003794 <HAL_PCD_IRQHandler+0x408>
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800377a:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 800377c:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800377e:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8003782:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003786:	fa02 f20b 	lsl.w	r2, r2, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800378a:	ea23 0302 	bic.w	r3, r3, r2
 800378e:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 8003792:	e015      	b.n	80037c0 <HAL_PCD_IRQHandler+0x434>
    len = ep->xfer_len - ep->xfer_count;
 8003794:	1aff      	subs	r7, r7, r3
 8003796:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003798:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800379a:	9802      	ldr	r0, [sp, #8]
 800379c:	429f      	cmp	r7, r3
 800379e:	bf28      	it	cs
 80037a0:	461f      	movcs	r7, r3
 80037a2:	b2bb      	uxth	r3, r7
 80037a4:	4652      	mov	r2, sl
 80037a6:	f004 fadb 	bl	8007d60 <USB_WritePacket>
    ep->xfer_buff  += len;
 80037aa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80037ac:	443b      	add	r3, r7
 80037ae:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80037b0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 80037b2:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 80037b4:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 80037b6:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 80037b8:	656f      	str	r7, [r5, #84]	; 0x54
 80037ba:	e7d4      	b.n	8003766 <HAL_PCD_IRQHandler+0x3da>
  if (ep->xfer_len <= ep->xfer_count)
 80037bc:	429f      	cmp	r7, r3
 80037be:	d9dc      	bls.n	800377a <HAL_PCD_IRQHandler+0x3ee>
        ep_intr >>= 1U;
 80037c0:	9b01      	ldr	r3, [sp, #4]
 80037c2:	085b      	lsrs	r3, r3, #1
        epnum++;
 80037c4:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	351c      	adds	r5, #28
 80037cc:	f108 0820 	add.w	r8, r8, #32
 80037d0:	e61c      	b.n	800340c <HAL_PCD_IRQHandler+0x80>
        HAL_PCD_ResumeCallback(hpcd);
 80037d2:	4620      	mov	r0, r4
 80037d4:	f01c fd24 	bl	8020220 <HAL_PCD_ResumeCallback>
 80037d8:	e632      	b.n	8003440 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 80037da:	4620      	mov	r0, r4
 80037dc:	f01c fd08 	bl	80201f0 <HAL_PCD_SuspendCallback>
 80037e0:	e65e      	b.n	80034a0 <HAL_PCD_IRQHandler+0x114>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037e2:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80037ea:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037ec:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80037f4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80037f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fc:	9a00      	ldr	r2, [sp, #0]
 80037fe:	3201      	adds	r2, #1
 8003800:	9200      	str	r2, [sp, #0]
 8003802:	3320      	adds	r3, #32
 8003804:	e660      	b.n	80034c8 <HAL_PCD_IRQHandler+0x13c>
 8003806:	bf00      	nop
 8003808:	ff275340 	.word	0xff275340
 800380c:	000c34ff 	.word	0x000c34ff
 8003810:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8003814:	696b      	ldr	r3, [r5, #20]
 8003816:	f043 030b 	orr.w	r3, r3, #11
 800381a:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800381c:	692b      	ldr	r3, [r5, #16]
 800381e:	f043 030b 	orr.w	r3, r3, #11
 8003822:	612b      	str	r3, [r5, #16]
 8003824:	e666      	b.n	80034f4 <HAL_PCD_IRQHandler+0x168>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003826:	4a2f      	ldr	r2, [pc, #188]	; (80038e4 <HAL_PCD_IRQHandler+0x558>)
 8003828:	492f      	ldr	r1, [pc, #188]	; (80038e8 <HAL_PCD_IRQHandler+0x55c>)
 800382a:	4402      	add	r2, r0
 800382c:	428a      	cmp	r2, r1
 800382e:	d803      	bhi.n	8003838 <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003836:	e68a      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003838:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800383c:	492b      	ldr	r1, [pc, #172]	; (80038ec <HAL_PCD_IRQHandler+0x560>)
 800383e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003842:	428a      	cmp	r2, r1
 8003844:	d803      	bhi.n	800384e <HAL_PCD_IRQHandler+0x4c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800384c:	e67f      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800384e:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8003852:	4927      	ldr	r1, [pc, #156]	; (80038f0 <HAL_PCD_IRQHandler+0x564>)
 8003854:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8003858:	428a      	cmp	r2, r1
 800385a:	d803      	bhi.n	8003864 <HAL_PCD_IRQHandler+0x4d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003862:	e674      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003864:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_PCD_IRQHandler+0x568>)
 8003866:	4924      	ldr	r1, [pc, #144]	; (80038f8 <HAL_PCD_IRQHandler+0x56c>)
 8003868:	4402      	add	r2, r0
 800386a:	428a      	cmp	r2, r1
 800386c:	d803      	bhi.n	8003876 <HAL_PCD_IRQHandler+0x4ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8003874:	e66b      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003876:	4a21      	ldr	r2, [pc, #132]	; (80038fc <HAL_PCD_IRQHandler+0x570>)
 8003878:	4921      	ldr	r1, [pc, #132]	; (8003900 <HAL_PCD_IRQHandler+0x574>)
 800387a:	4402      	add	r2, r0
 800387c:	428a      	cmp	r2, r1
 800387e:	d803      	bhi.n	8003888 <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8003886:	e662      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_PCD_IRQHandler+0x578>)
 800388a:	491f      	ldr	r1, [pc, #124]	; (8003908 <HAL_PCD_IRQHandler+0x57c>)
 800388c:	4402      	add	r2, r0
 800388e:	428a      	cmp	r2, r1
 8003890:	d803      	bhi.n	800389a <HAL_PCD_IRQHandler+0x50e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8003898:	e659      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800389a:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 800389e:	491b      	ldr	r1, [pc, #108]	; (800390c <HAL_PCD_IRQHandler+0x580>)
 80038a0:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80038a4:	428a      	cmp	r2, r1
 80038a6:	d803      	bhi.n	80038b0 <HAL_PCD_IRQHandler+0x524>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ae:	e64e      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038b0:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_PCD_IRQHandler+0x584>)
 80038b2:	4918      	ldr	r1, [pc, #96]	; (8003914 <HAL_PCD_IRQHandler+0x588>)
 80038b4:	4402      	add	r2, r0
 80038b6:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	bf94      	ite	ls
 80038bc:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80038c0:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80038c4:	e643      	b.n	800354e <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	f47f ae76 	bne.w	80035b8 <HAL_PCD_IRQHandler+0x22c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038cc:	2208      	movs	r2, #8
 80038ce:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80038d2:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038d4:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038d6:	f004 fb19 	bl	8007f0c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038da:	fb06 4607 	mla	r6, r6, r7, r4
 80038de:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80038e2:	e664      	b.n	80035ae <HAL_PCD_IRQHandler+0x222>
 80038e4:	ff1b1e40 	.word	0xff1b1e40
 80038e8:	000f423f 	.word	0x000f423f
 80038ec:	00124f7f 	.word	0x00124f7f
 80038f0:	0013d61f 	.word	0x0013d61f
 80038f4:	fee5b660 	.word	0xfee5b660
 80038f8:	0016e35f 	.word	0x0016e35f
 80038fc:	feced300 	.word	0xfeced300
 8003900:	001b773f 	.word	0x001b773f
 8003904:	feb35bc0 	.word	0xfeb35bc0
 8003908:	002191bf 	.word	0x002191bf
 800390c:	0038751f 	.word	0x0038751f
 8003910:	fe5954e0 	.word	0xfe5954e0
 8003914:	00419cdf 	.word	0x00419cdf

08003918 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003918:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800391c:	2a01      	cmp	r2, #1
{
 800391e:	b510      	push	{r4, lr}
 8003920:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003922:	d00b      	beq.n	800393c <HAL_PCD_SetAddress+0x24>
 8003924:	2201      	movs	r2, #1
 8003926:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800392a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800392e:	6800      	ldr	r0, [r0, #0]
 8003930:	f004 fb52 	bl	8007fd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003934:	2000      	movs	r0, #0
 8003936:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800393a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800393c:	2002      	movs	r0, #2
}
 800393e:	bd10      	pop	{r4, pc}

08003940 <HAL_PCD_EP_Open>:
{
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4604      	mov	r4, r0
 8003944:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003948:	f011 0f80 	tst.w	r1, #128	; 0x80
 800394c:	f04f 061c 	mov.w	r6, #28
 8003950:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003952:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003956:	bf15      	itete	ne
 8003958:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 800395c:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003960:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003962:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003966:	bf15      	itete	ne
 8003968:	2601      	movne	r6, #1
    ep->is_in = 0U;
 800396a:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 800396c:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8003970:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8003974:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003976:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8003978:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 800397a:	b2c0      	uxtb	r0, r0
 800397c:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 800397e:	b102      	cbz	r2, 8003982 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003980:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003982:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003984:	bf04      	itt	eq
 8003986:	2300      	moveq	r3, #0
 8003988:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800398a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800398e:	2b01      	cmp	r3, #1
 8003990:	d009      	beq.n	80039a6 <HAL_PCD_EP_Open+0x66>
 8003992:	2301      	movs	r3, #1
 8003994:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003998:	6820      	ldr	r0, [r4, #0]
 800399a:	f004 f8fb 	bl	8007b94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800399e:	2000      	movs	r0, #0
 80039a0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80039a4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80039a6:	2002      	movs	r0, #2
}
 80039a8:	bd70      	pop	{r4, r5, r6, pc}

080039aa <HAL_PCD_EP_Close>:
{
 80039aa:	f001 030f 	and.w	r3, r1, #15
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80039b6:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80039ba:	fb00 4102 	mla	r1, r0, r2, r4
 80039be:	bf19      	ittee	ne
 80039c0:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 80039c2:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 80039c6:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80039ca:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 80039ce:	bf15      	itete	ne
 80039d0:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80039d2:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 80039d4:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 80039d8:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 80039dc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80039de:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d009      	beq.n	80039fa <HAL_PCD_EP_Close+0x50>
 80039e6:	2301      	movs	r3, #1
 80039e8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	f004 f913 	bl	8007c18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039f2:	2000      	movs	r0, #0
 80039f4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80039f8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80039fa:	2002      	movs	r0, #2
}
 80039fc:	bd10      	pop	{r4, pc}

080039fe <HAL_PCD_EP_Receive>:
{
 80039fe:	b538      	push	{r3, r4, r5, lr}
 8003a00:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003a04:	241c      	movs	r4, #28
 8003a06:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003a0a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003a0e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003a12:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003a16:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003a18:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003a1c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003a20:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 8003a24:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a28:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003a2a:	b91d      	cbnz	r5, 8003a34 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a2c:	f004 f926 	bl	8007c7c <USB_EP0StartXfer>
}
 8003a30:	2000      	movs	r0, #0
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a34:	f004 f9a4 	bl	8007d80 <USB_EPStartXfer>
 8003a38:	e7fa      	b.n	8003a30 <HAL_PCD_EP_Receive+0x32>

08003a3a <HAL_PCD_EP_Transmit>:
{
 8003a3a:	b538      	push	{r3, r4, r5, lr}
 8003a3c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a40:	241c      	movs	r4, #28
 8003a42:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003a46:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a4a:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003a4c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003a52:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003a54:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003a56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 8003a5a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a5e:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003a60:	b91d      	cbnz	r5, 8003a6a <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a62:	f004 f90b 	bl	8007c7c <USB_EP0StartXfer>
}
 8003a66:	2000      	movs	r0, #0
 8003a68:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a6a:	f004 f989 	bl	8007d80 <USB_EPStartXfer>
 8003a6e:	e7fa      	b.n	8003a66 <HAL_PCD_EP_Transmit+0x2c>

08003a70 <HAL_PCD_EP_SetStall>:
{
 8003a70:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003a72:	6843      	ldr	r3, [r0, #4]
 8003a74:	f001 050f 	and.w	r5, r1, #15
 8003a78:	429d      	cmp	r5, r3
{
 8003a7a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003a7c:	d82d      	bhi.n	8003ada <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003a7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a82:	f04f 021c 	mov.w	r2, #28
 8003a86:	d01e      	beq.n	8003ac6 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8003a88:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a8c:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8003a90:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a92:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8003a94:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8003a9c:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003a9e:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8003aa2:	4291      	cmp	r1, r2
 8003aa4:	d01b      	beq.n	8003ade <HAL_PCD_EP_SetStall+0x6e>
 8003aa6:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	f004 fa3b 	bl	8007f28 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8003ab2:	b925      	cbnz	r5, 8003abe <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003ab4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	f004 fb03 	bl	80080c4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003ac6:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003aca:	fb02 0101 	mla	r1, r2, r1, r0
 8003ace:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003ad0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003ad4:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003ad8:	e7de      	b.n	8003a98 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003ada:	2001      	movs	r0, #1
 8003adc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003ade:	2002      	movs	r0, #2
}
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}

08003ae2 <HAL_PCD_EP_ClrStall>:
{
 8003ae2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ae4:	6843      	ldr	r3, [r0, #4]
 8003ae6:	f001 020f 	and.w	r2, r1, #15
 8003aea:	429a      	cmp	r2, r3
{
 8003aec:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aee:	d826      	bhi.n	8003b3e <HAL_PCD_EP_ClrStall+0x5c>
 8003af0:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003af2:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003af6:	fb03 0102 	mla	r1, r3, r2, r0
 8003afa:	bf19      	ittee	ne
 8003afc:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003afe:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003b02:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003b06:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003b0a:	bf14      	ite	ne
 8003b0c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003b0e:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003b10:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003b14:	bf14      	ite	ne
 8003b16:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003b1a:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003b1e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8003b20:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003b22:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d00b      	beq.n	8003b42 <HAL_PCD_EP_ClrStall+0x60>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	f004 fa26 	bl	8007f82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b36:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b3e:	2001      	movs	r0, #1
 8003b40:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003b42:	2002      	movs	r0, #2
}
 8003b44:	bd38      	pop	{r3, r4, r5, pc}

08003b46 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b46:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b48:	6804      	ldr	r4, [r0, #0]
 8003b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003b4c:	b921      	cbnz	r1, 8003b58 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b52:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003b54:	2000      	movs	r0, #0
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003b5a:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003b60:	2000      	movs	r0, #0
 8003b62:	1c46      	adds	r6, r0, #1
 8003b64:	b2c0      	uxtb	r0, r0
 8003b66:	4285      	cmp	r5, r0
 8003b68:	d806      	bhi.n	8003b78 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b6a:	313f      	adds	r1, #63	; 0x3f
 8003b6c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	e7ed      	b.n	8003b54 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b78:	3040      	adds	r0, #64	; 0x40
 8003b7a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003b7e:	6840      	ldr	r0, [r0, #4]
 8003b80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003b84:	4630      	mov	r0, r6
 8003b86:	e7ec      	b.n	8003b62 <HAL_PCDEx_SetTxFiFo+0x1c>

08003b88 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003b88:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003b8a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003b8c:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b90:	6802      	ldr	r2, [r0, #0]
{
 8003b92:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003b94:	2101      	movs	r1, #1
 8003b96:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ba0:	6993      	ldr	r3, [r2, #24]
 8003ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ba6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ba8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bae:	f043 0303 	orr.w	r3, r3, #3
 8003bb2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb6:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003bbe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc4:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_PWREx_GetVoltageRange+0x20>)
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003bd4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003bd8:	d007      	beq.n	8003bea <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bde:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003be2:	bf14      	ite	ne
 8003be4:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003be8:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003bea:	4770      	bx	lr
 8003bec:	40007000 	.word	0x40007000

08003bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bf0:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bf2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bf4:	bb28      	cbnz	r0, 8003c42 <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bf6:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003bfa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bfe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c0a:	d119      	bne.n	8003c40 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c16:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c18:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003c1a:	6811      	ldr	r1, [r2, #0]
 8003c1c:	2232      	movs	r2, #50	; 0x32
 8003c1e:	434a      	muls	r2, r1
 8003c20:	491f      	ldr	r1, [pc, #124]	; (8003ca0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003c22:	fbb2 f2f1 	udiv	r2, r2, r1
 8003c26:	4619      	mov	r1, r3
 8003c28:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2a:	6958      	ldr	r0, [r3, #20]
 8003c2c:	0540      	lsls	r0, r0, #21
 8003c2e:	d500      	bpl.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x42>
 8003c30:	b922      	cbnz	r2, 8003c3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c32:	694b      	ldr	r3, [r1, #20]
 8003c34:	055b      	lsls	r3, r3, #21
 8003c36:	d52d      	bpl.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8003c38:	2003      	movs	r0, #3
 8003c3a:	4770      	bx	lr
        wait_loop_index--;
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	e7f4      	b.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003c40:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c42:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003c46:	d120      	bne.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c48:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003c4c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c50:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c5c:	d11a      	bne.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c68:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003c6c:	6811      	ldr	r1, [r2, #0]
 8003c6e:	2232      	movs	r2, #50	; 0x32
 8003c70:	434a      	muls	r2, r1
 8003c72:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003c74:	fbb2 f2f1 	udiv	r2, r2, r1
 8003c78:	4619      	mov	r1, r3
 8003c7a:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c7c:	6958      	ldr	r0, [r3, #20]
 8003c7e:	0540      	lsls	r0, r0, #21
 8003c80:	d5d7      	bpl.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x42>
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	d0d5      	beq.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8003c86:	3a01      	subs	r2, #1
 8003c88:	e7f8      	b.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c8a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c92:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c94:	2000      	movs	r0, #0
}
 8003c96:	4770      	bx	lr
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	20000ed4 	.word	0x20000ed4
 8003ca0:	000f4240 	.word	0x000f4240

08003ca4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ca4:	4a02      	ldr	r2, [pc, #8]	; (8003cb0 <HAL_PWREx_EnableVddUSB+0xc>)
 8003ca6:	6853      	ldr	r3, [r2, #4]
 8003ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cac:	6053      	str	r3, [r2, #4]
 8003cae:	4770      	bx	lr
 8003cb0:	40007000 	.word	0x40007000

08003cb4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003cb4:	4a02      	ldr	r2, [pc, #8]	; (8003cc0 <HAL_PWREx_EnableVddIO2+0xc>)
 8003cb6:	6853      	ldr	r3, [r2, #4]
 8003cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cbc:	6053      	str	r3, [r2, #4]
 8003cbe:	4770      	bx	lr
 8003cc0:	40007000 	.word	0x40007000

08003cc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cc6:	4d1c      	ldr	r5, [pc, #112]	; (8003d38 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8003cc8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003cca:	00da      	lsls	r2, r3, #3
{
 8003ccc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cce:	d518      	bpl.n	8003d02 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cd0:	f7ff ff7c 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cd4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003cd8:	d123      	bne.n	8003d22 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cda:	2c80      	cmp	r4, #128	; 0x80
 8003cdc:	d928      	bls.n	8003d30 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cde:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ce0:	bf8c      	ite	hi
 8003ce2:	2002      	movhi	r0, #2
 8003ce4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8003ce8:	6813      	ldr	r3, [r2, #0]
 8003cea:	f023 030f 	bic.w	r3, r3, #15
 8003cee:	4303      	orrs	r3, r0
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cf2:	6813      	ldr	r3, [r2, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003cf8:	1a18      	subs	r0, r3, r0
 8003cfa:	bf18      	it	ne
 8003cfc:	2001      	movne	r0, #1
 8003cfe:	b003      	add	sp, #12
 8003d00:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d08:	65ab      	str	r3, [r5, #88]	; 0x58
 8003d0a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003d14:	f7ff ff5a 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003d20:	e7d8      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8003d22:	2c7f      	cmp	r4, #127	; 0x7f
 8003d24:	d806      	bhi.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8003d26:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003d2a:	4258      	negs	r0, r3
 8003d2c:	4158      	adcs	r0, r3
 8003d2e:	e7da      	b.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d30:	2000      	movs	r0, #0
 8003d32:	e7d8      	b.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d34:	2002      	movs	r0, #2
 8003d36:	e7d6      	b.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40022000 	.word	0x40022000

08003d40 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d40:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x90>)
 8003d42:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d44:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d46:	f012 020c 	ands.w	r2, r2, #12
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x18>
 8003d4c:	2a0c      	cmp	r2, #12
 8003d4e:	d115      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d50:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d54:	2901      	cmp	r1, #1
 8003d56:	d118      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d58:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003d5a:	481e      	ldr	r0, [pc, #120]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x94>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d5c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d5e:	bf55      	itete	pl
 8003d60:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d64:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d66:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d6a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003d6e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d72:	b112      	cbz	r2, 8003d7a <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d74:	2a0c      	cmp	r2, #12
 8003d76:	d009      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x4c>
 8003d78:	2000      	movs	r0, #0
}
 8003d7a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d7c:	2a04      	cmp	r2, #4
 8003d7e:	d024      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x8a>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d80:	2a08      	cmp	r2, #8
 8003d82:	4815      	ldr	r0, [pc, #84]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d84:	bf18      	it	ne
 8003d86:	2000      	movne	r0, #0
 8003d88:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d8a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d8c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d8e:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d90:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d94:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 8003d98:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d9a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x6c>
 8003da0:	2903      	cmp	r1, #3
 8003da2:	d003      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x6c>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da4:	68d9      	ldr	r1, [r3, #12]
 8003da6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8003daa:	e003      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dac:	68d9      	ldr	r1, [r3, #12]
 8003dae:	480a      	ldr	r0, [pc, #40]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003db0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db4:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db6:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dba:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003dbe:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dc0:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003dc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dc8:	4770      	bx	lr
 8003dca:	4803      	ldr	r0, [pc, #12]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08032190 	.word	0x08032190
 8003dd8:	00f42400 	.word	0x00f42400

08003ddc <HAL_RCC_OscConfig>:
{
 8003ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003de0:	4605      	mov	r5, r0
 8003de2:	b908      	cbnz	r0, 8003de8 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8003de4:	2001      	movs	r0, #1
 8003de6:	e046      	b.n	8003e76 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de8:	4ca8      	ldr	r4, [pc, #672]	; (800408c <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dea:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dec:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dee:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003df0:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df2:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dfa:	d572      	bpl.n	8003ee2 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dfc:	b11e      	cbz	r6, 8003e06 <HAL_RCC_OscConfig+0x2a>
 8003dfe:	2e0c      	cmp	r6, #12
 8003e00:	d151      	bne.n	8003ea6 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e02:	2f01      	cmp	r7, #1
 8003e04:	d14f      	bne.n	8003ea6 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	0799      	lsls	r1, r3, #30
 8003e0a:	d502      	bpl.n	8003e12 <HAL_RCC_OscConfig+0x36>
 8003e0c:	69ab      	ldr	r3, [r5, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0e8      	beq.n	8003de4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	6a28      	ldr	r0, [r5, #32]
 8003e16:	071a      	lsls	r2, r3, #28
 8003e18:	bf56      	itet	pl
 8003e1a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003e1e:	6823      	ldrmi	r3, [r4, #0]
 8003e20:	091b      	lsrpl	r3, r3, #4
 8003e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e26:	4283      	cmp	r3, r0
 8003e28:	d228      	bcs.n	8003e7c <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e2a:	f7ff ff4b 	bl	8003cc4 <RCC_SetFlashLatencyFromMSIRange>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d1d8      	bne.n	8003de4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	f043 0308 	orr.w	r3, r3, #8
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	6a2a      	ldr	r2, [r5, #32]
 8003e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e42:	4313      	orrs	r3, r2
 8003e44:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	69ea      	ldr	r2, [r5, #28]
 8003e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e52:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e54:	f7ff ff74 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	4a8d      	ldr	r2, [pc, #564]	; (8004090 <HAL_RCC_OscConfig+0x2b4>)
 8003e5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e60:	5cd3      	ldrb	r3, [r2, r3]
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	40d8      	lsrs	r0, r3
 8003e68:	4b8a      	ldr	r3, [pc, #552]	; (8004094 <HAL_RCC_OscConfig+0x2b8>)
 8003e6a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7fd f8a7 	bl	8000fc0 <HAL_InitTick>
        if(status != HAL_OK)
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d035      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x106>
}
 8003e76:	b003      	add	sp, #12
 8003e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	f043 0308 	orr.w	r3, r3, #8
 8003e82:	6023      	str	r3, [r4, #0]
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e8a:	4303      	orrs	r3, r0
 8003e8c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8e:	6863      	ldr	r3, [r4, #4]
 8003e90:	69ea      	ldr	r2, [r5, #28]
 8003e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e9a:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e9c:	f7ff ff12 	bl	8003cc4 <RCC_SetFlashLatencyFromMSIRange>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d0d7      	beq.n	8003e54 <HAL_RCC_OscConfig+0x78>
 8003ea4:	e79e      	b.n	8003de4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ea6:	69ab      	ldr	r3, [r5, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d03a      	beq.n	8003f22 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003eb4:	f7fd f8b4 	bl	8001020 <HAL_GetTick>
 8003eb8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	079b      	lsls	r3, r3, #30
 8003ebe:	d528      	bpl.n	8003f12 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	f043 0308 	orr.w	r3, r3, #8
 8003ec6:	6023      	str	r3, [r4, #0]
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	6a2a      	ldr	r2, [r5, #32]
 8003ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	69ea      	ldr	r2, [r5, #28]
 8003ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003edc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ee0:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	682b      	ldr	r3, [r5, #0]
 8003ee4:	07d9      	lsls	r1, r3, #31
 8003ee6:	d42d      	bmi.n	8003f44 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	079a      	lsls	r2, r3, #30
 8003eec:	d46b      	bmi.n	8003fc6 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	682b      	ldr	r3, [r5, #0]
 8003ef0:	0719      	lsls	r1, r3, #28
 8003ef2:	f100 80a0 	bmi.w	8004036 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	075a      	lsls	r2, r3, #29
 8003efa:	f100 80cd 	bmi.w	8004098 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	069a      	lsls	r2, r3, #26
 8003f02:	f100 8136 	bmi.w	8004172 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f06:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 815c 	bne.w	80041c6 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e7b1      	b.n	8003e76 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f12:	f7fd f885 	bl	8001020 <HAL_GetTick>
 8003f16:	eba0 0008 	sub.w	r0, r0, r8
 8003f1a:	2802      	cmp	r0, #2
 8003f1c:	d9cd      	bls.n	8003eba <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8003f1e:	2003      	movs	r0, #3
 8003f20:	e7a9      	b.n	8003e76 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f2a:	f7fd f879 	bl	8001020 <HAL_GetTick>
 8003f2e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	0798      	lsls	r0, r3, #30
 8003f34:	d5d5      	bpl.n	8003ee2 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f36:	f7fd f873 	bl	8001020 <HAL_GetTick>
 8003f3a:	eba0 0008 	sub.w	r0, r0, r8
 8003f3e:	2802      	cmp	r0, #2
 8003f40:	d9f6      	bls.n	8003f30 <HAL_RCC_OscConfig+0x154>
 8003f42:	e7ec      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f44:	2e08      	cmp	r6, #8
 8003f46:	d003      	beq.n	8003f50 <HAL_RCC_OscConfig+0x174>
 8003f48:	2e0c      	cmp	r6, #12
 8003f4a:	d108      	bne.n	8003f5e <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8003f4c:	2f03      	cmp	r7, #3
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	039b      	lsls	r3, r3, #14
 8003f54:	d5c8      	bpl.n	8003ee8 <HAL_RCC_OscConfig+0x10c>
 8003f56:	686b      	ldr	r3, [r5, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1c5      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x10c>
 8003f5c:	e742      	b.n	8003de4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5e:	686b      	ldr	r3, [r5, #4]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d110      	bne.n	8003f88 <HAL_RCC_OscConfig+0x1ac>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f6e:	f7fd f857 	bl	8001020 <HAL_GetTick>
 8003f72:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	0398      	lsls	r0, r3, #14
 8003f78:	d4b6      	bmi.n	8003ee8 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f7a:	f7fd f851 	bl	8001020 <HAL_GetTick>
 8003f7e:	eba0 0008 	sub.w	r0, r0, r8
 8003f82:	2864      	cmp	r0, #100	; 0x64
 8003f84:	d9f6      	bls.n	8003f74 <HAL_RCC_OscConfig+0x198>
 8003f86:	e7ca      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f8c:	d104      	bne.n	8003f98 <HAL_RCC_OscConfig+0x1bc>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	e7e6      	b.n	8003f66 <HAL_RCC_OscConfig+0x18a>
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f9e:	6022      	str	r2, [r4, #0]
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fa6:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8003fac:	f7fd f838 	bl	8001020 <HAL_GetTick>
 8003fb0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	0399      	lsls	r1, r3, #14
 8003fb6:	d597      	bpl.n	8003ee8 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fd f832 	bl	8001020 <HAL_GetTick>
 8003fbc:	eba0 0008 	sub.w	r0, r0, r8
 8003fc0:	2864      	cmp	r0, #100	; 0x64
 8003fc2:	d9f6      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1d6>
 8003fc4:	e7ab      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fc6:	2e04      	cmp	r6, #4
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1f6>
 8003fca:	2e0c      	cmp	r6, #12
 8003fcc:	d110      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003fce:	2f02      	cmp	r7, #2
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	055a      	lsls	r2, r3, #21
 8003fd6:	d503      	bpl.n	8003fe0 <HAL_RCC_OscConfig+0x204>
 8003fd8:	68eb      	ldr	r3, [r5, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f43f af02 	beq.w	8003de4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe0:	6863      	ldr	r3, [r4, #4]
 8003fe2:	692a      	ldr	r2, [r5, #16]
 8003fe4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003fe8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003fec:	6063      	str	r3, [r4, #4]
 8003fee:	e77e      	b.n	8003eee <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff0:	68eb      	ldr	r3, [r5, #12]
 8003ff2:	b17b      	cbz	r3, 8004014 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ffc:	f7fd f810 	bl	8001020 <HAL_GetTick>
 8004000:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	055b      	lsls	r3, r3, #21
 8004006:	d4eb      	bmi.n	8003fe0 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004008:	f7fd f80a 	bl	8001020 <HAL_GetTick>
 800400c:	1bc0      	subs	r0, r0, r7
 800400e:	2802      	cmp	r0, #2
 8004010:	d9f7      	bls.n	8004002 <HAL_RCC_OscConfig+0x226>
 8004012:	e784      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800401a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800401c:	f7fd f800 	bl	8001020 <HAL_GetTick>
 8004020:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	0558      	lsls	r0, r3, #21
 8004026:	f57f af62 	bpl.w	8003eee <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402a:	f7fc fff9 	bl	8001020 <HAL_GetTick>
 800402e:	1bc0      	subs	r0, r0, r7
 8004030:	2802      	cmp	r0, #2
 8004032:	d9f6      	bls.n	8004022 <HAL_RCC_OscConfig+0x246>
 8004034:	e773      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004036:	696b      	ldr	r3, [r5, #20]
 8004038:	b19b      	cbz	r3, 8004062 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800403a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004046:	f7fc ffeb 	bl	8001020 <HAL_GetTick>
 800404a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800404c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004050:	079b      	lsls	r3, r3, #30
 8004052:	f53f af50 	bmi.w	8003ef6 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004056:	f7fc ffe3 	bl	8001020 <HAL_GetTick>
 800405a:	1bc0      	subs	r0, r0, r7
 800405c:	2802      	cmp	r0, #2
 800405e:	d9f5      	bls.n	800404c <HAL_RCC_OscConfig+0x270>
 8004060:	e75d      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8004062:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800406e:	f7fc ffd7 	bl	8001020 <HAL_GetTick>
 8004072:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004074:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004078:	0798      	lsls	r0, r3, #30
 800407a:	f57f af3c 	bpl.w	8003ef6 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fc ffcf 	bl	8001020 <HAL_GetTick>
 8004082:	1bc0      	subs	r0, r0, r7
 8004084:	2802      	cmp	r0, #2
 8004086:	d9f5      	bls.n	8004074 <HAL_RCC_OscConfig+0x298>
 8004088:	e749      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	08032178 	.word	0x08032178
 8004094:	20000ed4 	.word	0x20000ed4
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800409a:	00d9      	lsls	r1, r3, #3
 800409c:	d429      	bmi.n	80040f2 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 800409e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80040a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80040b0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b4:	4f71      	ldr	r7, [pc, #452]	; (800427c <HAL_RCC_OscConfig+0x4a0>)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	05da      	lsls	r2, r3, #23
 80040ba:	d51d      	bpl.n	80040f8 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	68ab      	ldr	r3, [r5, #8]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d12b      	bne.n	800411a <HAL_RCC_OscConfig+0x33e>
 80040c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80040ce:	f7fc ffa7 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80040d6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040dc:	0798      	lsls	r0, r3, #30
 80040de:	d542      	bpl.n	8004166 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80040e0:	f1b8 0f00 	cmp.w	r8, #0
 80040e4:	f43f af0b 	beq.w	8003efe <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80040f0:	e705      	b.n	8003efe <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	f04f 0800 	mov.w	r8, #0
 80040f6:	e7dd      	b.n	80040b4 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fe:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004100:	f7fc ff8e 	bl	8001020 <HAL_GetTick>
 8004104:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	05db      	lsls	r3, r3, #23
 800410a:	d4d7      	bmi.n	80040bc <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410c:	f7fc ff88 	bl	8001020 <HAL_GetTick>
 8004110:	eba0 0009 	sub.w	r0, r0, r9
 8004114:	2802      	cmp	r0, #2
 8004116:	d9f6      	bls.n	8004106 <HAL_RCC_OscConfig+0x32a>
 8004118:	e701      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800411a:	2b05      	cmp	r3, #5
 800411c:	d106      	bne.n	800412c <HAL_RCC_OscConfig+0x350>
 800411e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004122:	f043 0304 	orr.w	r3, r3, #4
 8004126:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800412a:	e7ca      	b.n	80040c2 <HAL_RCC_OscConfig+0x2e6>
 800412c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004138:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800413c:	f022 0204 	bic.w	r2, r2, #4
 8004140:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1c2      	bne.n	80040ce <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8004148:	f7fc ff6a 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004150:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004152:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004156:	0799      	lsls	r1, r3, #30
 8004158:	d5c2      	bpl.n	80040e0 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fc ff61 	bl	8001020 <HAL_GetTick>
 800415e:	1bc0      	subs	r0, r0, r7
 8004160:	4548      	cmp	r0, r9
 8004162:	d9f6      	bls.n	8004152 <HAL_RCC_OscConfig+0x376>
 8004164:	e6db      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004166:	f7fc ff5b 	bl	8001020 <HAL_GetTick>
 800416a:	1bc0      	subs	r0, r0, r7
 800416c:	4548      	cmp	r0, r9
 800416e:	d9b3      	bls.n	80040d8 <HAL_RCC_OscConfig+0x2fc>
 8004170:	e6d5      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004172:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004174:	b19b      	cbz	r3, 800419e <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8004176:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004182:	f7fc ff4d 	bl	8001020 <HAL_GetTick>
 8004186:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004188:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800418c:	079b      	lsls	r3, r3, #30
 800418e:	f53f aeba 	bmi.w	8003f06 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004192:	f7fc ff45 	bl	8001020 <HAL_GetTick>
 8004196:	1bc0      	subs	r0, r0, r7
 8004198:	2802      	cmp	r0, #2
 800419a:	d9f5      	bls.n	8004188 <HAL_RCC_OscConfig+0x3ac>
 800419c:	e6bf      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 800419e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80041aa:	f7fc ff39 	bl	8001020 <HAL_GetTick>
 80041ae:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041b0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80041b4:	0798      	lsls	r0, r3, #30
 80041b6:	f57f aea6 	bpl.w	8003f06 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ba:	f7fc ff31 	bl	8001020 <HAL_GetTick>
 80041be:	1bc0      	subs	r0, r0, r7
 80041c0:	2802      	cmp	r0, #2
 80041c2:	d9f5      	bls.n	80041b0 <HAL_RCC_OscConfig+0x3d4>
 80041c4:	e6ab      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041c6:	2e0c      	cmp	r6, #12
 80041c8:	f43f ae0c 	beq.w	8003de4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041cc:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041d4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041d6:	d136      	bne.n	8004246 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 80041d8:	f7fc ff22 	bl	8001020 <HAL_GetTick>
 80041dc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	0199      	lsls	r1, r3, #6
 80041e2:	d42a      	bmi.n	800423a <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80041e6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80041e8:	06db      	lsls	r3, r3, #27
 80041ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80041ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80041f0:	4313      	orrs	r3, r2
 80041f2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80041f4:	3a01      	subs	r2, #1
 80041f6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80041fa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80041fc:	0852      	lsrs	r2, r2, #1
 80041fe:	3a01      	subs	r2, #1
 8004200:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004204:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004206:	0852      	lsrs	r2, r2, #1
 8004208:	3a01      	subs	r2, #1
 800420a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800420e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004218:	68e3      	ldr	r3, [r4, #12]
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004220:	f7fc fefe 	bl	8001020 <HAL_GetTick>
 8004224:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	019a      	lsls	r2, r3, #6
 800422a:	f53f ae70 	bmi.w	8003f0e <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422e:	f7fc fef7 	bl	8001020 <HAL_GetTick>
 8004232:	1b40      	subs	r0, r0, r5
 8004234:	2802      	cmp	r0, #2
 8004236:	d9f6      	bls.n	8004226 <HAL_RCC_OscConfig+0x44a>
 8004238:	e671      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423a:	f7fc fef1 	bl	8001020 <HAL_GetTick>
 800423e:	1b80      	subs	r0, r0, r6
 8004240:	2802      	cmp	r0, #2
 8004242:	d9cc      	bls.n	80041de <HAL_RCC_OscConfig+0x402>
 8004244:	e66b      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800424c:	bf02      	ittt	eq
 800424e:	68e3      	ldreq	r3, [r4, #12]
 8004250:	f023 0303 	biceq.w	r3, r3, #3
 8004254:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004256:	68e3      	ldr	r3, [r4, #12]
 8004258:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800425c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004260:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004262:	f7fc fedd 	bl	8001020 <HAL_GetTick>
 8004266:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	019b      	lsls	r3, r3, #6
 800426c:	f57f ae4f 	bpl.w	8003f0e <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fc fed6 	bl	8001020 <HAL_GetTick>
 8004274:	1b40      	subs	r0, r0, r5
 8004276:	2802      	cmp	r0, #2
 8004278:	d9f6      	bls.n	8004268 <HAL_RCC_OscConfig+0x48c>
 800427a:	e650      	b.n	8003f1e <HAL_RCC_OscConfig+0x142>
 800427c:	40007000 	.word	0x40007000

08004280 <HAL_RCC_ClockConfig>:
{
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004284:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8004286:	4605      	mov	r5, r0
 8004288:	b910      	cbnz	r0, 8004290 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800428a:	2001      	movs	r0, #1
 800428c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4a71      	ldr	r2, [pc, #452]	; (8004458 <HAL_RCC_ClockConfig+0x1d8>)
 8004292:	6813      	ldr	r3, [r2, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	428b      	cmp	r3, r1
 800429a:	d334      	bcc.n	8004306 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429c:	6829      	ldr	r1, [r5, #0]
 800429e:	f011 0701 	ands.w	r7, r1, #1
 80042a2:	d13b      	bne.n	800431c <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a4:	682a      	ldr	r2, [r5, #0]
 80042a6:	0791      	lsls	r1, r2, #30
 80042a8:	f140 80bb 	bpl.w	8004422 <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	496b      	ldr	r1, [pc, #428]	; (800445c <HAL_RCC_ClockConfig+0x1dc>)
 80042ae:	68a8      	ldr	r0, [r5, #8]
 80042b0:	688b      	ldr	r3, [r1, #8]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b6:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042b8:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ba:	4967      	ldr	r1, [pc, #412]	; (8004458 <HAL_RCC_ClockConfig+0x1d8>)
 80042bc:	680b      	ldr	r3, [r1, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	429e      	cmp	r6, r3
 80042c4:	f0c0 80b5 	bcc.w	8004432 <HAL_RCC_ClockConfig+0x1b2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	f012 0f04 	tst.w	r2, #4
 80042cc:	4c63      	ldr	r4, [pc, #396]	; (800445c <HAL_RCC_ClockConfig+0x1dc>)
 80042ce:	f040 80bc 	bne.w	800444a <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	0713      	lsls	r3, r2, #28
 80042d4:	d506      	bpl.n	80042e4 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d6:	68a3      	ldr	r3, [r4, #8]
 80042d8:	692a      	ldr	r2, [r5, #16]
 80042da:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80042de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80042e2:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e4:	f7ff fd2c 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 80042e8:	68a3      	ldr	r3, [r4, #8]
 80042ea:	4a5d      	ldr	r2, [pc, #372]	; (8004460 <HAL_RCC_ClockConfig+0x1e0>)
 80042ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	40d8      	lsrs	r0, r3
 80042f8:	4b5a      	ldr	r3, [pc, #360]	; (8004464 <HAL_RCC_ClockConfig+0x1e4>)
 80042fa:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80042fc:	2000      	movs	r0, #0
}
 80042fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004302:	f7fc be5d 	b.w	8000fc0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	6813      	ldr	r3, [r2, #0]
 8004308:	f023 030f 	bic.w	r3, r3, #15
 800430c:	430b      	orrs	r3, r1
 800430e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004310:	6813      	ldr	r3, [r2, #0]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	4299      	cmp	r1, r3
 8004318:	d1b7      	bne.n	800428a <HAL_RCC_ClockConfig+0xa>
 800431a:	e7bf      	b.n	800429c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431c:	686b      	ldr	r3, [r5, #4]
 800431e:	4c4f      	ldr	r4, [pc, #316]	; (800445c <HAL_RCC_ClockConfig+0x1dc>)
 8004320:	2b03      	cmp	r3, #3
 8004322:	d168      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x176>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	019b      	lsls	r3, r3, #6
 8004328:	d5af      	bpl.n	800428a <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800432a:	68e3      	ldr	r3, [r4, #12]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d11e      	bne.n	8004372 <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004334:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004336:	4a4c      	ldr	r2, [pc, #304]	; (8004468 <HAL_RCC_ClockConfig+0x1e8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004338:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800433a:	bf55      	itete	pl
 800433c:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004340:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004342:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004346:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 800434a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800434e:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004350:	68e3      	ldr	r3, [r4, #12]
 8004352:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004356:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004358:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 800435c:	2b02      	cmp	r3, #2
 800435e:	d00a      	beq.n	8004376 <HAL_RCC_ClockConfig+0xf6>
 8004360:	2b03      	cmp	r3, #3
 8004362:	d008      	beq.n	8004376 <HAL_RCC_ClockConfig+0xf6>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004364:	fbb2 f3f0 	udiv	r3, r2, r0
 8004368:	68e7      	ldr	r7, [r4, #12]
 800436a:	f3c7 2706 	ubfx	r7, r7, #8, #7
 800436e:	437b      	muls	r3, r7
 8004370:	e008      	b.n	8004384 <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 8004372:	2200      	movs	r2, #0
 8004374:	e7eb      	b.n	800434e <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004376:	68e2      	ldr	r2, [r4, #12]
 8004378:	4b3c      	ldr	r3, [pc, #240]	; (800446c <HAL_RCC_ClockConfig+0x1ec>)
 800437a:	fbb3 f3f0 	udiv	r3, r3, r0
 800437e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004382:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004384:	68e2      	ldr	r2, [r4, #12]
 8004386:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800438a:	3201      	adds	r2, #1
 800438c:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 800438e:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004392:	4a37      	ldr	r2, [pc, #220]	; (8004470 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d81c      	bhi.n	80043d2 <HAL_RCC_ClockConfig+0x152>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004398:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	686a      	ldr	r2, [r5, #4]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80043a6:	f7fc fe3b 	bl	8001020 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043aa:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80043ae:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b0:	68a3      	ldr	r3, [r4, #8]
 80043b2:	686a      	ldr	r2, [r5, #4]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043bc:	f43f af72 	beq.w	80042a4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c0:	f7fc fe2e 	bl	8001020 <HAL_GetTick>
 80043c4:	eba0 0008 	sub.w	r0, r0, r8
 80043c8:	4548      	cmp	r0, r9
 80043ca:	d9f1      	bls.n	80043b0 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80043cc:	2003      	movs	r0, #3
}
 80043ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80043d2:	68a3      	ldr	r3, [r4, #8]
 80043d4:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0x16a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043e6:	2780      	movs	r7, #128	; 0x80
 80043e8:	e7d7      	b.n	800439a <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80043ea:	0788      	lsls	r0, r1, #30
 80043ec:	d5d4      	bpl.n	8004398 <HAL_RCC_ClockConfig+0x118>
 80043ee:	68ab      	ldr	r3, [r5, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1d1      	bne.n	8004398 <HAL_RCC_ClockConfig+0x118>
 80043f4:	e7f1      	b.n	80043da <HAL_RCC_ClockConfig+0x15a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d10a      	bne.n	8004410 <HAL_RCC_ClockConfig+0x190>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004400:	f43f af43 	beq.w	800428a <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004404:	f7ff fc9c 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCC_ClockConfig+0x1f0>)
 800440a:	4298      	cmp	r0, r3
 800440c:	d9c4      	bls.n	8004398 <HAL_RCC_ClockConfig+0x118>
 800440e:	e7e4      	b.n	80043da <HAL_RCC_ClockConfig+0x15a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004410:	b91b      	cbnz	r3, 800441a <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f013 0f02 	tst.w	r3, #2
 8004418:	e7f2      	b.n	8004400 <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004420:	e7ee      	b.n	8004400 <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 8004422:	2f80      	cmp	r7, #128	; 0x80
 8004424:	f47f af49 	bne.w	80042ba <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004428:	490c      	ldr	r1, [pc, #48]	; (800445c <HAL_RCC_ClockConfig+0x1dc>)
 800442a:	688b      	ldr	r3, [r1, #8]
 800442c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004430:	e742      	b.n	80042b8 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	680b      	ldr	r3, [r1, #0]
 8004434:	f023 030f 	bic.w	r3, r3, #15
 8004438:	4333      	orrs	r3, r6
 800443a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443c:	680b      	ldr	r3, [r1, #0]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	429e      	cmp	r6, r3
 8004444:	f47f af21 	bne.w	800428a <HAL_RCC_ClockConfig+0xa>
 8004448:	e73e      	b.n	80042c8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444a:	68a3      	ldr	r3, [r4, #8]
 800444c:	68e9      	ldr	r1, [r5, #12]
 800444e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004452:	430b      	orrs	r3, r1
 8004454:	60a3      	str	r3, [r4, #8]
 8004456:	e73c      	b.n	80042d2 <HAL_RCC_ClockConfig+0x52>
 8004458:	40022000 	.word	0x40022000
 800445c:	40021000 	.word	0x40021000
 8004460:	08032178 	.word	0x08032178
 8004464:	20000ed4 	.word	0x20000ed4
 8004468:	08032190 	.word	0x08032190
 800446c:	00f42400 	.word	0x00f42400
 8004470:	04c4b400 	.word	0x04c4b400

08004474 <HAL_RCC_GetHCLKFreq>:
}
 8004474:	4b01      	ldr	r3, [pc, #4]	; (800447c <HAL_RCC_GetHCLKFreq+0x8>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000ed4 	.word	0x20000ed4

08004480 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004482:	4a06      	ldr	r2, [pc, #24]	; (800449c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800448e:	6810      	ldr	r0, [r2, #0]
 8004490:	f003 031f 	and.w	r3, r3, #31
}
 8004494:	40d8      	lsrs	r0, r3
 8004496:	4770      	bx	lr
 8004498:	40021000 	.word	0x40021000
 800449c:	08032188 	.word	0x08032188
 80044a0:	20000ed4 	.word	0x20000ed4

080044a4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80044a6:	4a06      	ldr	r2, [pc, #24]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80044ae:	5cd3      	ldrb	r3, [r2, r3]
 80044b0:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b2:	6810      	ldr	r0, [r2, #0]
 80044b4:	f003 031f 	and.w	r3, r3, #31
}
 80044b8:	40d8      	lsrs	r0, r3
 80044ba:	4770      	bx	lr
 80044bc:	40021000 	.word	0x40021000
 80044c0:	08032188 	.word	0x08032188
 80044c4:	20000ed4 	.word	0x20000ed4

080044c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ca:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <RCCEx_PLLSAI1_Config+0x100>)
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	f012 0f03 	tst.w	r2, #3
{
 80044d2:	4605      	mov	r5, r0
 80044d4:	460e      	mov	r6, r1
 80044d6:	461c      	mov	r4, r3
 80044d8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044da:	d022      	beq.n	8004522 <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	4283      	cmp	r3, r0
 80044e4:	d130      	bne.n	8004548 <RCCEx_PLLSAI1_Config+0x80>
       ||
 80044e6:	b37b      	cbz	r3, 8004548 <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fc fd96 	bl	8001020 <HAL_GetTick>
 80044f4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	011a      	lsls	r2, r3, #4
 80044fa:	d42e      	bmi.n	800455a <RCCEx_PLLSAI1_Config+0x92>
 80044fc:	68af      	ldr	r7, [r5, #8]
 80044fe:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004500:	b396      	cbz	r6, 8004568 <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004502:	2e01      	cmp	r6, #1
 8004504:	d14c      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004506:	6922      	ldr	r2, [r4, #16]
 8004508:	4930      	ldr	r1, [pc, #192]	; (80045cc <RCCEx_PLLSAI1_Config+0x104>)
 800450a:	4011      	ands	r1, r2
 800450c:	692a      	ldr	r2, [r5, #16]
 800450e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004512:	3b01      	subs	r3, #1
 8004514:	0852      	lsrs	r2, r2, #1
 8004516:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 800451a:	3a01      	subs	r2, #1
 800451c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004520:	e02d      	b.n	800457e <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 8004522:	2802      	cmp	r0, #2
 8004524:	d00c      	beq.n	8004540 <RCCEx_PLLSAI1_Config+0x78>
 8004526:	2803      	cmp	r0, #3
 8004528:	d010      	beq.n	800454c <RCCEx_PLLSAI1_Config+0x84>
 800452a:	2801      	cmp	r0, #1
 800452c:	d10c      	bne.n	8004548 <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	079f      	lsls	r7, r3, #30
 8004532:	d534      	bpl.n	800459e <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004534:	68e3      	ldr	r3, [r4, #12]
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	4318      	orrs	r0, r3
 800453c:	60e0      	str	r0, [r4, #12]
 800453e:	e7d3      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004546:	d1f5      	bne.n	8004534 <RCCEx_PLLSAI1_Config+0x6c>
 8004548:	2001      	movs	r0, #1
 800454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	0391      	lsls	r1, r2, #14
 8004550:	d4f0      	bmi.n	8004534 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004558:	e7f5      	b.n	8004546 <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800455a:	f7fc fd61 	bl	8001020 <HAL_GetTick>
 800455e:	1bc0      	subs	r0, r0, r7
 8004560:	2802      	cmp	r0, #2
 8004562:	d9c8      	bls.n	80044f6 <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 8004564:	2003      	movs	r0, #3
 8004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004568:	68e8      	ldr	r0, [r5, #12]
 800456a:	6926      	ldr	r6, [r4, #16]
 800456c:	4918      	ldr	r1, [pc, #96]	; (80045d0 <RCCEx_PLLSAI1_Config+0x108>)
 800456e:	06c2      	lsls	r2, r0, #27
 8004570:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004574:	4031      	ands	r1, r6
 8004576:	430a      	orrs	r2, r1
 8004578:	3b01      	subs	r3, #1
 800457a:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800457e:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004586:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fc fd4a 	bl	8001020 <HAL_GetTick>
 800458c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	d513      	bpl.n	80045bc <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004594:	6923      	ldr	r3, [r4, #16]
 8004596:	69aa      	ldr	r2, [r5, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800459e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a0:	6921      	ldr	r1, [r4, #16]
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <RCCEx_PLLSAI1_Config+0x10c>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80045aa:	3b01      	subs	r3, #1
 80045ac:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80045b0:	696a      	ldr	r2, [r5, #20]
 80045b2:	0852      	lsrs	r2, r2, #1
 80045b4:	3a01      	subs	r2, #1
 80045b6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80045ba:	e7e0      	b.n	800457e <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045bc:	f7fc fd30 	bl	8001020 <HAL_GetTick>
 80045c0:	1b80      	subs	r0, r0, r6
 80045c2:	2802      	cmp	r0, #2
 80045c4:	d9e3      	bls.n	800458e <RCCEx_PLLSAI1_Config+0xc6>
 80045c6:	e7cd      	b.n	8004564 <RCCEx_PLLSAI1_Config+0x9c>
 80045c8:	40021000 	.word	0x40021000
 80045cc:	ff9f800f 	.word	0xff9f800f
 80045d0:	07ff800f 	.word	0x07ff800f
 80045d4:	f9ff800f 	.word	0xf9ff800f

080045d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045da:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <RCCEx_PLLSAI2_Config+0x100>)
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	f012 0f03 	tst.w	r2, #3
{
 80045e2:	4605      	mov	r5, r0
 80045e4:	460e      	mov	r6, r1
 80045e6:	461c      	mov	r4, r3
 80045e8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ea:	d022      	beq.n	8004632 <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	4283      	cmp	r3, r0
 80045f4:	d130      	bne.n	8004658 <RCCEx_PLLSAI2_Config+0x80>
       ||
 80045f6:	b37b      	cbz	r3, 8004658 <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004600:	f7fc fd0e 	bl	8001020 <HAL_GetTick>
 8004604:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	009a      	lsls	r2, r3, #2
 800460a:	d42e      	bmi.n	800466a <RCCEx_PLLSAI2_Config+0x92>
 800460c:	68af      	ldr	r7, [r5, #8]
 800460e:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004610:	b396      	cbz	r6, 8004678 <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004612:	2e01      	cmp	r6, #1
 8004614:	d14c      	bne.n	80046b0 <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004616:	6962      	ldr	r2, [r4, #20]
 8004618:	4930      	ldr	r1, [pc, #192]	; (80046dc <RCCEx_PLLSAI2_Config+0x104>)
 800461a:	4011      	ands	r1, r2
 800461c:	692a      	ldr	r2, [r5, #16]
 800461e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004622:	3b01      	subs	r3, #1
 8004624:	0852      	lsrs	r2, r2, #1
 8004626:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 800462a:	3a01      	subs	r2, #1
 800462c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004630:	e02d      	b.n	800468e <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 8004632:	2802      	cmp	r0, #2
 8004634:	d00c      	beq.n	8004650 <RCCEx_PLLSAI2_Config+0x78>
 8004636:	2803      	cmp	r0, #3
 8004638:	d010      	beq.n	800465c <RCCEx_PLLSAI2_Config+0x84>
 800463a:	2801      	cmp	r0, #1
 800463c:	d10c      	bne.n	8004658 <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	079f      	lsls	r7, r3, #30
 8004642:	d534      	bpl.n	80046ae <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004644:	68e3      	ldr	r3, [r4, #12]
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	4318      	orrs	r0, r3
 800464c:	60e0      	str	r0, [r4, #12]
 800464e:	e7d3      	b.n	80045f8 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004656:	d1f5      	bne.n	8004644 <RCCEx_PLLSAI2_Config+0x6c>
 8004658:	2001      	movs	r0, #1
 800465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	0391      	lsls	r1, r2, #14
 8004660:	d4f0      	bmi.n	8004644 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004668:	e7f5      	b.n	8004656 <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800466a:	f7fc fcd9 	bl	8001020 <HAL_GetTick>
 800466e:	1bc0      	subs	r0, r0, r7
 8004670:	2802      	cmp	r0, #2
 8004672:	d9c8      	bls.n	8004606 <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 8004674:	2003      	movs	r0, #3
 8004676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004678:	68e8      	ldr	r0, [r5, #12]
 800467a:	6966      	ldr	r6, [r4, #20]
 800467c:	4918      	ldr	r1, [pc, #96]	; (80046e0 <RCCEx_PLLSAI2_Config+0x108>)
 800467e:	06c2      	lsls	r2, r0, #27
 8004680:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004684:	4031      	ands	r1, r6
 8004686:	430a      	orrs	r2, r1
 8004688:	3b01      	subs	r3, #1
 800468a:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800468e:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004696:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fc fcc2 	bl	8001020 <HAL_GetTick>
 800469c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	d513      	bpl.n	80046cc <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046a4:	6963      	ldr	r3, [r4, #20]
 80046a6:	69aa      	ldr	r2, [r5, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	6163      	str	r3, [r4, #20]
 80046ac:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80046ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b0:	6961      	ldr	r1, [r4, #20]
 80046b2:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <RCCEx_PLLSAI2_Config+0x10c>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80046ba:	3b01      	subs	r3, #1
 80046bc:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80046c0:	696a      	ldr	r2, [r5, #20]
 80046c2:	0852      	lsrs	r2, r2, #1
 80046c4:	3a01      	subs	r2, #1
 80046c6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80046ca:	e7e0      	b.n	800468e <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046cc:	f7fc fca8 	bl	8001020 <HAL_GetTick>
 80046d0:	1b80      	subs	r0, r0, r6
 80046d2:	2802      	cmp	r0, #2
 80046d4:	d9e3      	bls.n	800469e <RCCEx_PLLSAI2_Config+0xc6>
 80046d6:	e7cd      	b.n	8004674 <RCCEx_PLLSAI2_Config+0x9c>
 80046d8:	40021000 	.word	0x40021000
 80046dc:	ff9f800f 	.word	0xff9f800f
 80046e0:	07ff800f 	.word	0x07ff800f
 80046e4:	f9ff800f 	.word	0xf9ff800f

080046e8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80046e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046ec:	6805      	ldr	r5, [r0, #0]
 80046ee:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80046f2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046f4:	d023      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80046f6:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80046f8:	2940      	cmp	r1, #64	; 0x40
 80046fa:	d014      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80046fc:	d804      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80046fe:	b1c1      	cbz	r1, 8004732 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004700:	2920      	cmp	r1, #32
 8004702:	d02b      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 8004704:	2501      	movs	r5, #1
 8004706:	e01a      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004708:	2960      	cmp	r1, #96	; 0x60
 800470a:	d001      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800470c:	2980      	cmp	r1, #128	; 0x80
 800470e:	d1f9      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004710:	4a4e      	ldr	r2, [pc, #312]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004712:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004714:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004718:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800471c:	430b      	orrs	r3, r1
 800471e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004722:	2500      	movs	r5, #0
 8004724:	e00b      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004726:	4a49      	ldr	r2, [pc, #292]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004728:	68d3      	ldr	r3, [r2, #12]
 800472a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472e:	60d3      	str	r3, [r2, #12]
      break;
 8004730:	e7ee      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004732:	3004      	adds	r0, #4
 8004734:	f7ff fec8 	bl	80044c8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004738:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800473a:	2800      	cmp	r0, #0
 800473c:	d0e8      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	04db      	lsls	r3, r3, #19
 8004742:	d509      	bpl.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004744:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004746:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800474a:	d014      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800474c:	d80b      	bhi.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800474e:	b1c1      	cbz	r1, 8004782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004750:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004754:	d071      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 8004756:	2501      	movs	r5, #1
 8004758:	462e      	mov	r6, r5
 800475a:	e021      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800475c:	2100      	movs	r1, #0
 800475e:	3020      	adds	r0, #32
 8004760:	f7ff ff3a 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8004764:	e7e8      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004766:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800476a:	d002      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800476c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004770:	d1f1      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004772:	462e      	mov	r6, r5
 8004774:	e009      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004776:	4a35      	ldr	r2, [pc, #212]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004778:	68d3      	ldr	r3, [r2, #12]
 800477a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477e:	60d3      	str	r3, [r2, #12]
 8004780:	e7f7      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004782:	1d20      	adds	r0, r4, #4
 8004784:	f7ff fea0 	bl	80044c8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004788:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800478a:	2e00      	cmp	r6, #0
 800478c:	d15b      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800478e:	4a2f      	ldr	r2, [pc, #188]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004790:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004792:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004796:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800479a:	430b      	orrs	r3, r1
 800479c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	039f      	lsls	r7, r3, #14
 80047a4:	d565      	bpl.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047a6:	4f29      	ldr	r7, [pc, #164]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047aa:	00d8      	lsls	r0, r3, #3
 80047ac:	f140 81f3 	bpl.w	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 80047b0:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004850 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80047b8:	f8d9 3000 	ldr.w	r3, [r9]
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80047c4:	f7fc fc2c 	bl	8001020 <HAL_GetTick>
 80047c8:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ca:	f8d9 3000 	ldr.w	r3, [r9]
 80047ce:	05d9      	lsls	r1, r3, #23
 80047d0:	d540      	bpl.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	f040 8197 	bne.w	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047dc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80047e0:	d015      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x126>
 80047e2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d011      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80047ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80047f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004802:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004806:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800480a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800480e:	07da      	lsls	r2, r3, #31
 8004810:	d509      	bpl.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 8004812:	f7fc fc05 	bl	8001020 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800481a:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004820:	079b      	lsls	r3, r3, #30
 8004822:	f140 8168 	bpl.w	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004826:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800482a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004838:	e014      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800483a:	2100      	movs	r1, #0
 800483c:	f104 0020 	add.w	r0, r4, #32
 8004840:	f7ff feca 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8004844:	e7a0      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004846:	4635      	mov	r5, r6
 8004848:	e7aa      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
 8004850:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004854:	f7fc fbe4 	bl	8001020 <HAL_GetTick>
 8004858:	eba0 000a 	sub.w	r0, r0, sl
 800485c:	2802      	cmp	r0, #2
 800485e:	d9b4      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8004860:	2503      	movs	r5, #3
 8004862:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 8004864:	f1b8 0f00 	cmp.w	r8, #0
 8004868:	d003      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800486a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004870:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	07df      	lsls	r7, r3, #31
 8004876:	d508      	bpl.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004878:	49c0      	ldr	r1, [pc, #768]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800487a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800487c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004880:	f022 0203 	bic.w	r2, r2, #3
 8004884:	4302      	orrs	r2, r0
 8004886:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800488a:	0798      	lsls	r0, r3, #30
 800488c:	d508      	bpl.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800488e:	49bb      	ldr	r1, [pc, #748]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004890:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004892:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004896:	f022 020c 	bic.w	r2, r2, #12
 800489a:	4302      	orrs	r2, r0
 800489c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048a0:	0759      	lsls	r1, r3, #29
 80048a2:	d508      	bpl.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048a4:	49b5      	ldr	r1, [pc, #724]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048a6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80048a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048ac:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80048b0:	4302      	orrs	r2, r0
 80048b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048b6:	071a      	lsls	r2, r3, #28
 80048b8:	d508      	bpl.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048ba:	49b0      	ldr	r1, [pc, #704]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80048be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048c6:	4302      	orrs	r2, r0
 80048c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048cc:	06df      	lsls	r7, r3, #27
 80048ce:	d508      	bpl.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048d0:	49aa      	ldr	r1, [pc, #680]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048d2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80048d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048dc:	4302      	orrs	r2, r0
 80048de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048e2:	0698      	lsls	r0, r3, #26
 80048e4:	d508      	bpl.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e6:	49a5      	ldr	r1, [pc, #660]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80048ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048f2:	4302      	orrs	r2, r0
 80048f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048f8:	0599      	lsls	r1, r3, #22
 80048fa:	d508      	bpl.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048fc:	499f      	ldr	r1, [pc, #636]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048fe:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004900:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004904:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004908:	4302      	orrs	r2, r0
 800490a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800490e:	055a      	lsls	r2, r3, #21
 8004910:	d508      	bpl.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004912:	499a      	ldr	r1, [pc, #616]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004914:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004916:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800491a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800491e:	4302      	orrs	r2, r0
 8004920:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004924:	065f      	lsls	r7, r3, #25
 8004926:	d508      	bpl.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004928:	4994      	ldr	r1, [pc, #592]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800492a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800492c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004930:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004934:	4302      	orrs	r2, r0
 8004936:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800493a:	0618      	lsls	r0, r3, #24
 800493c:	d508      	bpl.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800493e:	498f      	ldr	r1, [pc, #572]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004942:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004946:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800494a:	4302      	orrs	r2, r0
 800494c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004950:	05d9      	lsls	r1, r3, #23
 8004952:	d508      	bpl.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004954:	4989      	ldr	r1, [pc, #548]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004956:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004958:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800495c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004960:	4302      	orrs	r2, r0
 8004962:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004966:	02da      	lsls	r2, r3, #11
 8004968:	d508      	bpl.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800496a:	4984      	ldr	r1, [pc, #528]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800496c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800496e:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004972:	f022 0203 	bic.w	r2, r2, #3
 8004976:	4302      	orrs	r2, r0
 8004978:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800497c:	049f      	lsls	r7, r3, #18
 800497e:	d510      	bpl.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004980:	4a7e      	ldr	r2, [pc, #504]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004982:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004984:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004988:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800498c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800498e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004992:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004996:	f040 80b8 	bne.w	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499a:	68d3      	ldr	r3, [r2, #12]
 800499c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	0318      	lsls	r0, r3, #12
 80049a6:	d50f      	bpl.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049a8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80049aa:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049ac:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80049b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80049b4:	f040 80b6 	bne.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80049b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c6:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	0359      	lsls	r1, r3, #13
 80049cc:	d510      	bpl.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ce:	4a6b      	ldr	r2, [pc, #428]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049d0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80049d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049d6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80049da:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049e4:	f040 80bd 	bne.w	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e8:	68d3      	ldr	r3, [r2, #12]
 80049ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ee:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	045a      	lsls	r2, r3, #17
 80049f4:	d514      	bpl.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f6:	4961      	ldr	r1, [pc, #388]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049f8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80049fc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a00:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004a04:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a06:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a10:	2102      	movs	r1, #2
 8004a12:	1d20      	adds	r0, r4, #4
 8004a14:	f7ff fd58 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004a18:	4606      	mov	r6, r0
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	bf18      	it	ne
 8004a1e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a20:	6822      	ldr	r2, [r4, #0]
 8004a22:	03d3      	lsls	r3, r2, #15
 8004a24:	d509      	bpl.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a26:	4955      	ldr	r1, [pc, #340]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a28:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004a2c:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	4303      	orrs	r3, r0
 8004a36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004a3a:	0297      	lsls	r7, r2, #10
 8004a3c:	d509      	bpl.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a3e:	494f      	ldr	r1, [pc, #316]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004a44:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004a48:	f023 0318 	bic.w	r3, r3, #24
 8004a4c:	4303      	orrs	r3, r0
 8004a4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a52:	0250      	lsls	r0, r2, #9
 8004a54:	d51f      	bpl.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a56:	4f49      	ldr	r7, [pc, #292]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004a60:	f7fc fade 	bl	8001020 <HAL_GetTick>
 8004a64:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	0099      	lsls	r1, r3, #2
 8004a6a:	f100 8089 	bmi.w	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 8004a6e:	2e00      	cmp	r6, #0
 8004a70:	f040 808f 	bne.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a78:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004a7c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a86:	2102      	movs	r1, #2
 8004a88:	f104 0020 	add.w	r0, r4, #32
 8004a8c:	f7ff fda4 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	bf18      	it	ne
 8004a94:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	021a      	lsls	r2, r3, #8
 8004a9a:	d514      	bpl.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004a9c:	4937      	ldr	r1, [pc, #220]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a9e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004aa2:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aaa:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004aac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004ab0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	f104 0020 	add.w	r0, r4, #32
 8004abc:	f7ff fd8c 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	bf18      	it	ne
 8004ac4:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	01db      	lsls	r3, r3, #7
 8004aca:	d510      	bpl.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004acc:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ace:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004ad2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004ad6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ada:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004adc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ae0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ae4:	d103      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae6:	68d3      	ldr	r3, [r2, #12]
 8004ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aec:	60d3      	str	r3, [r2, #12]
}
 8004aee:	4628      	mov	r0, r5
 8004af0:	b002      	add	sp, #8
 8004af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fc fa93 	bl	8001020 <HAL_GetTick>
 8004afa:	eba0 0009 	sub.w	r0, r0, r9
 8004afe:	4550      	cmp	r0, sl
 8004b00:	f67f ae8c 	bls.w	800481c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004b04:	e6ac      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004b06:	4635      	mov	r5, r6
 8004b08:	e6ac      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b0a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004b0e:	f47f af48 	bne.w	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b12:	2101      	movs	r1, #1
 8004b14:	1d20      	adds	r0, r4, #4
 8004b16:	f7ff fcd7 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	bf18      	it	ne
 8004b20:	4605      	movne	r5, r0
 8004b22:	e73e      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004b2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b30:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004b34:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b36:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b3e:	d103      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b46:	e73e      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b48:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004b4c:	f47f af3c 	bne.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b50:	2101      	movs	r1, #1
 8004b52:	1d20      	adds	r0, r4, #4
 8004b54:	f7ff fcb8 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004b58:	4606      	mov	r6, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	bf18      	it	ne
 8004b5e:	4605      	movne	r5, r0
 8004b60:	e732      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b62:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004b66:	f47f af43 	bne.w	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	1d20      	adds	r0, r4, #4
 8004b6e:	f7ff fcab 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004b72:	4606      	mov	r6, r0
 8004b74:	2800      	cmp	r0, #0
 8004b76:	bf18      	it	ne
 8004b78:	4605      	movne	r5, r0
 8004b7a:	e739      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004b7c:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b80:	f7fc fa4e 	bl	8001020 <HAL_GetTick>
 8004b84:	eba0 0008 	sub.w	r0, r0, r8
 8004b88:	2802      	cmp	r0, #2
 8004b8a:	f67f af6c 	bls.w	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 8004b8e:	2503      	movs	r5, #3
 8004b90:	e781      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004b92:	4635      	mov	r5, r6
 8004b94:	e77f      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ba8:	f04f 0801 	mov.w	r8, #1
 8004bac:	e602      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004bae:	bf00      	nop

08004bb0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	b087      	sub	sp, #28
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004bba:	f7fc fa31 	bl	8001020 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004bbe:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004bc0:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004bc2:	6830      	ldr	r0, [r6, #0]
 8004bc4:	f002 fc84 	bl	80074d0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004bc8:	4604      	mov	r4, r0
 8004bca:	bb40      	cbnz	r0, 8004c1e <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004bcc:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004bce:	6830      	ldr	r0, [r6, #0]
 8004bd0:	0409      	lsls	r1, r1, #16
 8004bd2:	f002 fd97 	bl	8007704 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	bb08      	cbnz	r0, 8004c1e <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004bda:	2230      	movs	r2, #48	; 0x30
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	2108      	movs	r1, #8
 8004be2:	2302      	movs	r3, #2
 8004be4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004be8:	2301      	movs	r3, #1
  SDMMC_ConfigData(hsd->Instance, &config);
 8004bea:	4669      	mov	r1, sp
 8004bec:	6830      	ldr	r0, [r6, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004bee:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004bf0:	9305      	str	r3, [sp, #20]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004bf2:	f002 fc5b 	bl	80074ac <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004bf6:	6830      	ldr	r0, [r6, #0]
 8004bf8:	f002 fdb3 	bl	8007762 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	b970      	cbnz	r0, 8004c1e <SD_FindSCR+0x6e>
 8004c00:	4605      	mov	r5, r0
 8004c02:	4607      	mov	r7, r0
 8004c04:	4683      	mov	fp, r0
  {
    return errorstate;
  }
  
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004c06:	f240 592a 	movw	r9, #1322	; 0x52a
 8004c0a:	6830      	ldr	r0, [r6, #0]
 8004c0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c0e:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004c12:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004c14:	d007      	beq.n	8004c26 <SD_FindSCR+0x76>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004c16:	0719      	lsls	r1, r3, #28
 8004c18:	d51c      	bpl.n	8004c54 <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004c1a:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004c1c:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004c1e:	4620      	mov	r0, r4
 8004c20:	b007      	add	sp, #28
 8004c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004c26:	031b      	lsls	r3, r3, #12
 8004c28:	d40b      	bmi.n	8004c42 <SD_FindSCR+0x92>
 8004c2a:	f1bb 0f00 	cmp.w	fp, #0
 8004c2e:	d108      	bne.n	8004c42 <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004c30:	f002 fb78 	bl	8007324 <SDMMC_ReadFIFO>
 8004c34:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004c36:	6830      	ldr	r0, [r6, #0]
 8004c38:	f002 fb74 	bl	8007324 <SDMMC_ReadFIFO>
      index++;
 8004c3c:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004c40:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004c42:	f7fc f9ed 	bl	8001020 <HAL_GetTick>
 8004c46:	eba0 000a 	sub.w	r0, r0, sl
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d1dd      	bne.n	8004c0a <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 8004c4e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004c52:	e7e4      	b.n	8004c1e <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004c54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c56:	079a      	lsls	r2, r3, #30
 8004c58:	d501      	bpl.n	8004c5e <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004c5a:	2402      	movs	r4, #2
 8004c5c:	e7de      	b.n	8004c1c <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004c5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c60:	069b      	lsls	r3, r3, #26
 8004c62:	d501      	bpl.n	8004c68 <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004c64:	2420      	movs	r4, #32
 8004c66:	e7d9      	b.n	8004c1c <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c68:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <SD_FindSCR+0xcc>)
 8004c6a:	6383      	str	r3, [r0, #56]	; 0x38
 8004c6c:	ba3f      	rev	r7, r7
 8004c6e:	ba2d      	rev	r5, r5
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c70:	f8c8 7004 	str.w	r7, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c74:	f8c8 5000 	str.w	r5, [r8]
  return HAL_SD_ERROR_NONE;
 8004c78:	e7d1      	b.n	8004c1e <SD_FindSCR+0x6e>
 8004c7a:	bf00      	nop
 8004c7c:	18000f3a 	.word	0x18000f3a

08004c80 <HAL_SD_DeInit>:
{
 8004c80:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004c82:	4604      	mov	r4, r0
 8004c84:	b168      	cbz	r0, 8004ca2 <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 8004c86:	2303      	movs	r3, #3
 8004c88:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  SDMMC_PowerState_OFF(hsd->Instance);
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f002 fb57 	bl	8007340 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8004c92:	4620      	mov	r0, r4
 8004c94:	f01b f982 	bl	801ff9c <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c98:	2000      	movs	r0, #0
 8004c9a:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8004c9c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004ca0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ca2:	2001      	movs	r0, #1
}
 8004ca4:	bd10      	pop	{r4, pc}
	...

08004ca8 <HAL_SD_ReadBlocks_DMA>:
{
 8004ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cac:	4604      	mov	r4, r0
 8004cae:	b086      	sub	sp, #24
 8004cb0:	4615      	mov	r5, r2
 8004cb2:	461e      	mov	r6, r3
  if(NULL == pData)
 8004cb4:	460f      	mov	r7, r1
 8004cb6:	b939      	cbnz	r1, 8004cc8 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004cb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004cba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cbe:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004cc0:	2001      	movs	r0, #1
}
 8004cc2:	b006      	add	sp, #24
 8004cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004cc8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004ccc:	b2c0      	uxtb	r0, r0
 8004cce:	2801      	cmp	r0, #1
 8004cd0:	d158      	bne.n	8004d84 <HAL_SD_ReadBlocks_DMA+0xdc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cd2:	18d3      	adds	r3, r2, r3
 8004cd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cd6:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cd8:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cda:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cdc:	d904      	bls.n	8004ce8 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004ce6:	e7ec      	b.n	8004cc2 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004cee:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004cf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004cf2:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004cf4:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004cf8:	2b01      	cmp	r3, #1
    hsd->pRxBuffPtr = (uint32_t*)pData;
 8004cfa:	62a7      	str	r7, [r4, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004cfc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d00:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004d04:	bf18      	it	ne
 8004d06:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d08:	f002 fbe2 	bl	80074d0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d0c:	b148      	cbz	r0, 8004d22 <HAL_SD_ReadBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d16:	4318      	orrs	r0, r3
 8004d18:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004d20:	e7cf      	b.n	8004cc2 <HAL_SD_ReadBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d26:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004d2a:	2390      	movs	r3, #144	; 0x90
 8004d2c:	9302      	str	r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d2e:	9004      	str	r0, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d30:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004d32:	9005      	str	r0, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004d34:	4669      	mov	r1, sp
 8004d36:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d38:	9303      	str	r3, [sp, #12]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004d3a:	f002 fbb7 	bl	80074ac <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d42:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8004d46:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004d48:	68c3      	ldr	r3, [r0, #12]
 8004d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d4e:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004d50:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004d52:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004d54:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004d56:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004d58:	d90e      	bls.n	8004d78 <HAL_SD_ReadBlocks_DMA+0xd0>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d5a:	2382      	movs	r3, #130	; 0x82
 8004d5c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f002 fbe8 	bl	8007534 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d0ac      	beq.n	8004cc2 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d70:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004d74:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d76:	e7cd      	b.n	8004d14 <HAL_SD_ReadBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004d78:	2381      	movs	r3, #129	; 0x81
 8004d7a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f002 fbc0 	bl	8007502 <SDMMC_CmdReadSingleBlock>
 8004d82:	e7ef      	b.n	8004d64 <HAL_SD_ReadBlocks_DMA+0xbc>
    return HAL_BUSY;
 8004d84:	2002      	movs	r0, #2
 8004d86:	e79c      	b.n	8004cc2 <HAL_SD_ReadBlocks_DMA+0x1a>
 8004d88:	1fe00fff 	.word	0x1fe00fff

08004d8c <HAL_SD_WriteBlocks_DMA>:
{
 8004d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d90:	4604      	mov	r4, r0
 8004d92:	b086      	sub	sp, #24
 8004d94:	4615      	mov	r5, r2
 8004d96:	461e      	mov	r6, r3
  if(NULL == pData)
 8004d98:	460f      	mov	r7, r1
 8004d9a:	b939      	cbnz	r1, 8004dac <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004da4:	2001      	movs	r0, #1
}
 8004da6:	b006      	add	sp, #24
 8004da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004dac:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004db0:	b2c0      	uxtb	r0, r0
 8004db2:	2801      	cmp	r0, #1
 8004db4:	d159      	bne.n	8004e6a <HAL_SD_WriteBlocks_DMA+0xde>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004db6:	18d3      	adds	r3, r2, r3
 8004db8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dba:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dbc:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dbe:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dc0:	d904      	bls.n	8004dcc <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dc8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004dca:	e7ec      	b.n	8004da6 <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004dd2:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004dd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004dd6:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004dd8:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ddc:	2b01      	cmp	r3, #1
    hsd->pTxBuffPtr = (uint32_t*)pData;
 8004dde:	6227      	str	r7, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004de0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004de4:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004de8:	bf18      	it	ne
 8004dea:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004dec:	f002 fb70 	bl	80074d0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df0:	b148      	cbz	r0, 8004e06 <HAL_SD_WriteBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dfa:	4318      	orrs	r0, r3
 8004dfc:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dfe:	2001      	movs	r0, #1
 8004e00:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004e04:	e7cf      	b.n	8004da6 <HAL_SD_WriteBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e06:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e0a:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004e0e:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e10:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004e12:	9005      	str	r0, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004e14:	f04f 0890 	mov.w	r8, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 8004e18:	4669      	mov	r1, sp
 8004e1a:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004e1c:	f8cd 8008 	str.w	r8, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004e20:	f002 fb44 	bl	80074ac <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004e28:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
 8004e2c:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004e2e:	68c3      	ldr	r3, [r0, #12]
 8004e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e34:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004e36:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004e38:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004e3a:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004e3c:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004e3e:	d90e      	bls.n	8004e5e <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004e40:	23a0      	movs	r3, #160	; 0xa0
 8004e42:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004e44:	4629      	mov	r1, r5
 8004e46:	f002 fba7 	bl	8007598 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0ab      	beq.n	8004da6 <HAL_SD_WriteBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	4a07      	ldr	r2, [pc, #28]	; (8004e70 <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8004e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e56:	f422 728d 	bic.w	r2, r2, #282	; 0x11a
 8004e5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e5c:	e7cc      	b.n	8004df8 <HAL_SD_WriteBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e5e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004e62:	4629      	mov	r1, r5
 8004e64:	f002 fb7f 	bl	8007566 <SDMMC_CmdWriteSingleBlock>
 8004e68:	e7ef      	b.n	8004e4a <HAL_SD_WriteBlocks_DMA+0xbe>
    return HAL_BUSY;
 8004e6a:	2002      	movs	r0, #2
 8004e6c:	e79b      	b.n	8004da6 <HAL_SD_WriteBlocks_DMA+0x1a>
 8004e6e:	bf00      	nop
 8004e70:	1fe00fff 	.word	0x1fe00fff

08004e74 <HAL_SD_ErrorCallback>:
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_SD_IRQHandler>:
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004e78:	6803      	ldr	r3, [r0, #0]
 8004e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{  
 8004e7c:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004e7e:	05d5      	lsls	r5, r2, #23
{  
 8004e80:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004e82:	d55f      	bpl.n	8004f44 <HAL_SD_IRQHandler+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8004e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT   |\
 8004e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8c:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 8004e90:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8004e94:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e98:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	60da      	str	r2, [r3, #12]
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004ea6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004ea8:	f012 0208 	ands.w	r2, r2, #8
 8004eac:	d023      	beq.n	8004ef6 <HAL_SD_IRQHandler+0x7e>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004eae:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004eb0:	0790      	lsls	r0, r2, #30
 8004eb2:	d402      	bmi.n	8004eba <HAL_SD_IRQHandler+0x42>
 8004eb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004eb6:	0691      	lsls	r1, r2, #26
 8004eb8:	d509      	bpl.n	8004ece <HAL_SD_IRQHandler+0x56>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f002 fb86 	bl	80075cc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ec0:	b128      	cbz	r0, 8004ece <HAL_SD_IRQHandler+0x56>
          hsd->ErrorCode |= errorstate;
 8004ec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ec4:	4318      	orrs	r0, r3
 8004ec6:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ffd3 	bl	8004e74 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	4a59      	ldr	r2, [pc, #356]	; (8005038 <HAL_SD_IRQHandler+0x1c0>)
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004eda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004edc:	07da      	lsls	r2, r3, #31
 8004ede:	d503      	bpl.n	8004ee8 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f017 fad9 	bl	801c498 <HAL_SD_RxCpltCallback>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004ee8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004eea:	079b      	lsls	r3, r3, #30
 8004eec:	d4f8      	bmi.n	8004ee0 <HAL_SD_IRQHandler+0x68>
        HAL_SD_TxCpltCallback(hsd);
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f017 facd 	bl	801c48e <HAL_SD_TxCpltCallback>
 8004ef4:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004ef6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004ef8:	060e      	lsls	r6, r1, #24
 8004efa:	f140 8090 	bpl.w	800501e <HAL_SD_IRQHandler+0x1a6>
      hsd->Instance->DLEN = 0;
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8004f00:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004f02:	651a      	str	r2, [r3, #80]	; 0x50
      if((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET)
 8004f04:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004f06:	07d5      	lsls	r5, r2, #31
 8004f08:	d409      	bmi.n	8004f1e <HAL_SD_IRQHandler+0xa6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f002 fb5e 	bl	80075cc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f10:	b128      	cbz	r0, 8004f1e <HAL_SD_IRQHandler+0xa6>
          hsd->ErrorCode |= errorstate;
 8004f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f14:	4318      	orrs	r0, r3
 8004f16:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7ff ffab 	bl	8004e74 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004f24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f26:	06d8      	lsls	r0, r3, #27
 8004f28:	d402      	bmi.n	8004f30 <HAL_SD_IRQHandler+0xb8>
 8004f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f2c:	0699      	lsls	r1, r3, #26
 8004f2e:	d502      	bpl.n	8004f36 <HAL_SD_IRQHandler+0xbe>
        HAL_SD_TxCpltCallback(hsd);
 8004f30:	4620      	mov	r0, r4
 8004f32:	f017 faac 	bl	801c48e <HAL_SD_TxCpltCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004f36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f38:	07da      	lsls	r2, r3, #31
 8004f3a:	d4d1      	bmi.n	8004ee0 <HAL_SD_IRQHandler+0x68>
 8004f3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f3e:	079b      	lsls	r3, r3, #30
 8004f40:	d4ce      	bmi.n	8004ee0 <HAL_SD_IRQHandler+0x68>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8004f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f46:	0456      	lsls	r6, r2, #17
 8004f48:	d50d      	bpl.n	8004f66 <HAL_SD_IRQHandler+0xee>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8004f4a:	6a05      	ldr	r5, [r0, #32]
 8004f4c:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 8004f50:	4629      	mov	r1, r5
 8004f52:	6820      	ldr	r0, [r4, #0]
 8004f54:	3504      	adds	r5, #4
 8004f56:	f002 f9e8 	bl	800732a <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8004f5a:	42ae      	cmp	r6, r5
 8004f5c:	d1f8      	bne.n	8004f50 <HAL_SD_IRQHandler+0xd8>
  }
  
  hsd->pTxBuffPtr += 8;
 8004f5e:	6a23      	ldr	r3, [r4, #32]
 8004f60:	3320      	adds	r3, #32
 8004f62:	6223      	str	r3, [r4, #32]
 8004f64:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8004f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f68:	0415      	lsls	r5, r2, #16
 8004f6a:	d50d      	bpl.n	8004f88 <HAL_SD_IRQHandler+0x110>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8004f6c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8004f6e:	1f2e      	subs	r6, r5, #4
 8004f70:	351c      	adds	r5, #28
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	f002 f9d6 	bl	8007324 <SDMMC_ReadFIFO>
 8004f78:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0; count < 8; count++)
 8004f7c:	42b5      	cmp	r5, r6
 8004f7e:	d1f8      	bne.n	8004f72 <HAL_SD_IRQHandler+0xfa>
  hsd->pRxBuffPtr += 8;
 8004f80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f82:	3320      	adds	r3, #32
 8004f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8004f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f8a:	f012 0f3a 	tst.w	r2, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8004f90:	d036      	beq.n	8005000 <HAL_SD_IRQHandler+0x188>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004f92:	0791      	lsls	r1, r2, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8004f94:	bf42      	ittt	mi
 8004f96:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004f98:	f042 0202 	orrmi.w	r2, r2, #2
 8004f9c:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8004f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa0:	0712      	lsls	r2, r2, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004fa2:	bf42      	ittt	mi
 8004fa4:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004fa6:	f042 0208 	orrmi.w	r2, r2, #8
 8004faa:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fae:	0696      	lsls	r6, r2, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004fb0:	bf42      	ittt	mi
 8004fb2:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004fb4:	f042 0220 	orrmi.w	r2, r2, #32
 8004fb8:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbc:	06d5      	lsls	r5, r2, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8004fbe:	bf42      	ittt	mi
 8004fc0:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004fc2:	f042 0210 	orrmi.w	r2, r2, #16
 8004fc6:	6382      	strmi	r2, [r0, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_SD_IRQHandler+0x1c0>)
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fce:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004fd4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004fd6:	f012 0208 	ands.w	r2, r2, #8
 8004fda:	d006      	beq.n	8004fea <HAL_SD_IRQHandler+0x172>
        hsd->State = HAL_SD_STATE_READY;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7ff ff46 	bl	8004e74 <HAL_SD_ErrorCallback>
 8004fe8:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004fea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004fec:	0608      	lsls	r0, r1, #24
 8004fee:	d516      	bpl.n	800501e <HAL_SD_IRQHandler+0x1a6>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004ff0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ff2:	b1a1      	cbz	r1, 800501e <HAL_SD_IRQHandler+0x1a6>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004ff4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004ff6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8004ffa:	63d9      	str	r1, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004ffc:	651a      	str	r2, [r3, #80]	; 0x50
 8004ffe:	e7ed      	b.n	8004fdc <HAL_SD_IRQHandler+0x164>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_IDMABTC) != RESET)
 8005000:	00d1      	lsls	r1, r2, #3
 8005002:	d50c      	bpl.n	800501e <HAL_SD_IRQHandler+0x1a6>
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 8005004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005006:	f013 0f04 	tst.w	r3, #4
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800500a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 800500c:	d10b      	bne.n	8005026 <HAL_SD_IRQHandler+0x1ae>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800500e:	069a      	lsls	r2, r3, #26
 8005010:	d506      	bpl.n	8005020 <HAL_SD_IRQHandler+0x1a8>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8005012:	f000 fb72 	bl	80056fa <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
 800501e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8005020:	f000 fb69 	bl	80056f6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 8005024:	e7f7      	b.n	8005016 <HAL_SD_IRQHandler+0x19e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005026:	069b      	lsls	r3, r3, #26
 8005028:	d502      	bpl.n	8005030 <HAL_SD_IRQHandler+0x1b8>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800502a:	f000 fb65 	bl	80056f8 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
 800502e:	e7f2      	b.n	8005016 <HAL_SD_IRQHandler+0x19e>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8005030:	f000 fb60 	bl	80056f4 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
 8005034:	e7ef      	b.n	8005016 <HAL_SD_IRQHandler+0x19e>
 8005036:	bf00      	nop
 8005038:	18000f3a 	.word	0x18000f3a

0800503c <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800503c:	6e03      	ldr	r3, [r0, #96]	; 0x60
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800503e:	0f9a      	lsrs	r2, r3, #30
 8005040:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8005042:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8005046:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8005048:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800504c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 800504e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005052:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8005054:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005058:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 800505a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800505c:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800505e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005060:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8005062:	0112      	lsls	r2, r2, #4
 8005064:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005066:	88ca      	ldrh	r2, [r1, #6]
{
 8005068:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800506a:	b292      	uxth	r2, r2
 800506c:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8005070:	4322      	orrs	r2, r4
 8005072:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005074:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8005078:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800507a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800507e:	09d4      	lsrs	r4, r2, #7
 8005080:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8005082:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8005086:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005088:	f3c2 1440 	ubfx	r4, r2, #5, #1
 800508c:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800508e:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8005092:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8005094:	2400      	movs	r4, #0
 8005096:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005098:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800509a:	2c00      	cmp	r4, #0
 800509c:	f040 8083 	bne.w	80051a6 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80050a0:	0292      	lsls	r2, r2, #10
 80050a2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80050a6:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 80050a8:	690a      	ldr	r2, [r1, #16]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80050b4:	6e82      	ldr	r2, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80050b6:	690b      	ldr	r3, [r1, #16]
 80050b8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80050bc:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80050be:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80050c2:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80050c4:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80050c8:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80050ca:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80050ce:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80050d0:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80050d4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80050d6:	0bd3      	lsrs	r3, r2, #15
 80050d8:	f003 0306 	and.w	r3, r3, #6
 80050dc:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80050de:	7e0c      	ldrb	r4, [r1, #24]
 80050e0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80050e4:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80050e8:	4322      	orrs	r2, r4
 80050ea:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80050ec:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80050ee:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80050f0:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80050f2:	3402      	adds	r4, #2
 80050f4:	40a2      	lsls	r2, r4
 80050f6:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80050f8:	7a0d      	ldrb	r5, [r1, #8]
 80050fa:	2401      	movs	r4, #1
 80050fc:	40ac      	lsls	r4, r5
 80050fe:	6504      	str	r4, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8005100:	0a64      	lsrs	r4, r4, #9
 8005102:	4362      	muls	r2, r4
 8005104:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512;
 8005106:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800510a:	6582      	str	r2, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800510c:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8005116:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8005118:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800511a:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800511c:	7e8a      	ldrb	r2, [r1, #26]
 800511e:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8005122:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005128:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800512a:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800512c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800512e:	0fda      	lsrs	r2, r3, #31
 8005130:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8005132:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8005136:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005138:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800513c:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800513e:	0d9a      	lsrs	r2, r3, #22
 8005140:	f002 020c 	and.w	r2, r2, #12
 8005144:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005146:	7fca      	ldrb	r2, [r1, #31]
 8005148:	f3c3 5081 	ubfx	r0, r3, #22, #2
 800514c:	4302      	orrs	r2, r0
 800514e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005150:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8005154:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 8005158:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800515a:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 800515e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005162:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8005166:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800516a:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800516e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8005172:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8005176:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800517a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800517e:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8005182:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8005186:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800518a:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800518e:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8005192:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 8005196:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800519a:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80051a4:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051a6:	2c01      	cmp	r4, #1
 80051a8:	d11a      	bne.n	80051e0 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80051b0:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80051b2:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp << 8);
 80051b4:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80051b6:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 80051b8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80051bc:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80051be:	690c      	ldr	r4, [r1, #16]
 80051c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80051c4:	4322      	orrs	r2, r4
 80051c6:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80051c8:	690a      	ldr	r2, [r1, #16]
 80051ca:	0292      	lsls	r2, r2, #10
 80051cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051d0:	64c2      	str	r2, [r0, #76]	; 0x4c
 80051d2:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80051d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80051dc:	6502      	str	r2, [r0, #80]	; 0x50
 80051de:	e794      	b.n	800510a <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80051e0:	6803      	ldr	r3, [r0, #0]
 80051e2:	4a05      	ldr	r2, [pc, #20]	; (80051f8 <HAL_SD_GetCardCSD+0x1bc>)
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd30      	pop	{r4, r5, pc}
 80051f8:	1fe00fff 	.word	0x1fe00fff

080051fc <HAL_SD_InitCard>:
{
 80051fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fe:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005200:	2300      	movs	r3, #0
 8005202:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005204:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005206:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005208:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800520a:	233c      	movs	r3, #60	; 0x3c
 800520c:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800520e:	6983      	ldr	r3, [r0, #24]
 8005210:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005212:	bf01      	itttt	eq
 8005214:	6802      	ldreq	r2, [r0, #0]
 8005216:	6813      	ldreq	r3, [r2, #0]
 8005218:	f043 0304 	orreq.w	r3, r3, #4
 800521c:	6013      	streq	r3, [r2, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 800521e:	ab0a      	add	r3, sp, #40	; 0x28
{
 8005220:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 8005222:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005226:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800522a:	ab07      	add	r3, sp, #28
 800522c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800522e:	6820      	ldr	r0, [r4, #0]
 8005230:	f002 f85e 	bl	80072f0 <SDMMC_Init>
  if(status != HAL_OK)
 8005234:	2800      	cmp	r0, #0
 8005236:	f040 80e9 	bne.w	800540c <HAL_SD_InitCard+0x210>
  status = SDMMC_PowerState_ON(hsd->Instance);
 800523a:	6820      	ldr	r0, [r4, #0]
 800523c:	f002 f87a 	bl	8007334 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8005240:	4605      	mov	r5, r0
 8005242:	2800      	cmp	r0, #0
 8005244:	f040 80e2 	bne.w	800540c <HAL_SD_InitCard+0x210>
  HAL_Delay(2U);
 8005248:	2002      	movs	r0, #2
 800524a:	f7fb feef 	bl	800102c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800524e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8005250:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005252:	f002 f9ef 	bl	8007634 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005256:	b958      	cbnz	r0, 8005270 <HAL_SD_InitCard+0x74>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005258:	6820      	ldr	r0, [r4, #0]
 800525a:	f002 fa15 	bl	8007688 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800525e:	b170      	cbz	r0, 800527e <HAL_SD_InitCard+0x82>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005260:	6425      	str	r5, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005262:	2100      	movs	r1, #0
 8005264:	6820      	ldr	r0, [r4, #0]
 8005266:	f002 fa4d 	bl	8007704 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800526a:	b158      	cbz	r0, 8005284 <HAL_SD_InitCard+0x88>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800526c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8005270:	2501      	movs	r5, #1
 8005272:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005276:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005278:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 800527a:	63a0      	str	r0, [r4, #56]	; 0x38
 800527c:	e098      	b.n	80053b0 <HAL_SD_InitCard+0x1b4>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800527e:	2301      	movs	r3, #1
 8005280:	6423      	str	r3, [r4, #64]	; 0x40
 8005282:	e7ee      	b.n	8005262 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005284:	4f62      	ldr	r7, [pc, #392]	; (8005410 <HAL_SD_InitCard+0x214>)
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005286:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800528a:	9b06      	ldr	r3, [sp, #24]
 800528c:	42b3      	cmp	r3, r6
 800528e:	d815      	bhi.n	80052bc <HAL_SD_InitCard+0xc0>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005290:	2100      	movs	r1, #0
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	f002 fa36 	bl	8007704 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005298:	2800      	cmp	r0, #0
 800529a:	d1e9      	bne.n	8005270 <HAL_SD_InitCard+0x74>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800529c:	4639      	mov	r1, r7
 800529e:	6820      	ldr	r0, [r4, #0]
 80052a0:	f002 fa49 	bl	8007736 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80052a4:	4601      	mov	r1, r0
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d1e0      	bne.n	800526c <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052aa:	6820      	ldr	r0, [r4, #0]
 80052ac:	f002 f864 	bl	8007378 <SDMMC_GetResponse>
      count++;
 80052b0:	9b06      	ldr	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80052b2:	2800      	cmp	r0, #0
      count++;
 80052b4:	f103 0301 	add.w	r3, r3, #1
 80052b8:	9306      	str	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80052ba:	dae6      	bge.n	800528a <HAL_SD_InitCard+0x8e>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 80052bc:	9a06      	ldr	r2, [sp, #24]
 80052be:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d902      	bls.n	80052cc <HAL_SD_InitCard+0xd0>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80052c6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80052ca:	e7d1      	b.n	8005270 <HAL_SD_InitCard+0x74>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80052cc:	0043      	lsls	r3, r0, #1
 80052ce:	d532      	bpl.n	8005336 <HAL_SD_InitCard+0x13a>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80052d0:	2301      	movs	r3, #1
 80052d2:	63e3      	str	r3, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80052d4:	69a3      	ldr	r3, [r4, #24]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d12d      	bne.n	8005336 <HAL_SD_InitCard+0x13a>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80052da:	01c7      	lsls	r7, r0, #7
 80052dc:	d52b      	bpl.n	8005336 <HAL_SD_InitCard+0x13a>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80052de:	6820      	ldr	r0, [r4, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80052e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80052e6:	6803      	ldr	r3, [r0, #0]
 80052e8:	f043 0303 	orr.w	r3, r3, #3
 80052ec:	6003      	str	r3, [r0, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80052ee:	f002 fb07 	bl	8007900 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d1bc      	bne.n	8005270 <HAL_SD_InitCard+0x74>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP);
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fa:	0156      	lsls	r6, r2, #5
 80052fc:	d5fc      	bpl.n	80052f8 <HAL_SD_InitCard+0xfc>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80052fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005306:	02d8      	lsls	r0, r3, #11
 8005308:	d5b0      	bpl.n	800526c <HAL_SD_InitCard+0x70>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800530a:	2001      	movs	r0, #1
 800530c:	f000 f965 	bl	80055da <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	f042 0202 	orr.w	r2, r2, #2
 8005318:	601a      	str	r2, [r3, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND);
 800531a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531c:	0191      	lsls	r1, r2, #6
 800531e:	d5fc      	bpl.n	800531a <HAL_SD_InitCard+0x11e>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005328:	02d2      	lsls	r2, r2, #11
 800532a:	d4cc      	bmi.n	80052c6 <HAL_SD_InitCard+0xca>
            hsd->Instance->POWER = 0x13; 
 800532c:	2213      	movs	r2, #19
 800532e:	601a      	str	r2, [r3, #0]
            hsd->Instance->ICR = 0xFFFFFFFF;
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1;
 8005336:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8005338:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 800533a:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800533e:	f002 f805 	bl	800734c <SDMMC_GetPowerState>
 8005342:	b910      	cbnz	r0, 800534a <HAL_SD_InitCard+0x14e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005344:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005348:	e03c      	b.n	80053c4 <HAL_SD_InitCard+0x1c8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800534a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800534c:	2b03      	cmp	r3, #3
 800534e:	d018      	beq.n	8005382 <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005350:	6820      	ldr	r0, [r4, #0]
 8005352:	f002 fa1f 	bl	8007794 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005356:	2800      	cmp	r0, #0
 8005358:	d134      	bne.n	80053c4 <HAL_SD_InitCard+0x1c8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800535a:	4601      	mov	r1, r0
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	f002 f80b 	bl	8007378 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005362:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005364:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005366:	6820      	ldr	r0, [r4, #0]
 8005368:	f002 f806 	bl	8007378 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800536c:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800536e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	f002 f801 	bl	8007378 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005376:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005378:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800537a:	6820      	ldr	r0, [r4, #0]
 800537c:	f001 fffc 	bl	8007378 <SDMMC_GetResponse>
 8005380:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005382:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005384:	2b03      	cmp	r3, #3
 8005386:	d116      	bne.n	80053b6 <HAL_SD_InitCard+0x1ba>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005388:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800538a:	2b03      	cmp	r3, #3
 800538c:	d120      	bne.n	80053d0 <HAL_SD_InitCard+0x1d4>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800538e:	2104      	movs	r1, #4
 8005390:	6820      	ldr	r0, [r4, #0]
 8005392:	f001 fff1 	bl	8007378 <SDMMC_GetResponse>
 8005396:	0d00      	lsrs	r0, r0, #20
 8005398:	6460      	str	r0, [r4, #68]	; 0x44
  HAL_SD_GetCardCSD(hsd, &CSD);
 800539a:	a90d      	add	r1, sp, #52	; 0x34
 800539c:	4620      	mov	r0, r4
 800539e:	f7ff fe4d 	bl	800503c <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80053a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80053a4:	6820      	ldr	r0, [r4, #0]
 80053a6:	0412      	lsls	r2, r2, #16
 80053a8:	2300      	movs	r3, #0
 80053aa:	f002 f929 	bl	8007600 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80053ae:	b948      	cbnz	r0, 80053c4 <HAL_SD_InitCard+0x1c8>
}
 80053b0:	4628      	mov	r0, r5
 80053b2:	b019      	add	sp, #100	; 0x64
 80053b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80053b6:	f10d 0116 	add.w	r1, sp, #22
 80053ba:	6820      	ldr	r0, [r4, #0]
 80053bc:	f002 fa16 	bl	80077ec <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d0e1      	beq.n	8005388 <HAL_SD_InitCard+0x18c>
    hsd->State = HAL_SD_STATE_READY;
 80053c4:	2501      	movs	r5, #1
 80053c6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80053ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053cc:	4308      	orrs	r0, r1
 80053ce:	e754      	b.n	800527a <HAL_SD_InitCard+0x7e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80053d0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80053d4:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053d6:	6820      	ldr	r0, [r4, #0]
 80053d8:	0409      	lsls	r1, r1, #16
 80053da:	f002 f9f1 	bl	80077c0 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80053de:	2800      	cmp	r0, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_SD_InitCard+0x1c8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053e2:	4601      	mov	r1, r0
 80053e4:	6820      	ldr	r0, [r4, #0]
 80053e6:	f001 ffc7 	bl	8007378 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80053ea:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053ec:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	f001 ffc2 	bl	8007378 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80053f4:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80053f6:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	f001 ffbd 	bl	8007378 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80053fe:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005400:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005402:	6820      	ldr	r0, [r4, #0]
 8005404:	f001 ffb8 	bl	8007378 <SDMMC_GetResponse>
 8005408:	66e0      	str	r0, [r4, #108]	; 0x6c
 800540a:	e7c0      	b.n	800538e <HAL_SD_InitCard+0x192>
    return HAL_ERROR;
 800540c:	2501      	movs	r5, #1
 800540e:	e7cf      	b.n	80053b0 <HAL_SD_InitCard+0x1b4>
 8005410:	c1100000 	.word	0xc1100000

08005414 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005414:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005416:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005418:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800541a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800541c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800541e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005420:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005422:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005424:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005426:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005428:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800542a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800542c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800542e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005430:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005432:	61cb      	str	r3, [r1, #28]
}
 8005434:	2000      	movs	r0, #0
 8005436:	4770      	bx	lr

08005438 <HAL_SD_ConfigWideBusOperation>:
{
 8005438:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800543a:	2303      	movs	r3, #3
 800543c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005440:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005442:	2b03      	cmp	r3, #3
{
 8005444:	b08a      	sub	sp, #40	; 0x28
 8005446:	4604      	mov	r4, r0
 8005448:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800544a:	d002      	beq.n	8005452 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800544c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005450:	d103      	bne.n	800545a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005458:	e056      	b.n	8005508 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800545a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800545e:	d12d      	bne.n	80054bc <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 8005460:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005462:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005464:	9104      	str	r1, [sp, #16]
 8005466:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005468:	f001 ff86 	bl	8007378 <SDMMC_GetResponse>
 800546c:	0180      	lsls	r0, r0, #6
 800546e:	d41f      	bmi.n	80054b0 <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 8005470:	a904      	add	r1, sp, #16
 8005472:	4620      	mov	r0, r4
 8005474:	f7ff fb9c 	bl	8004bb0 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005478:	b960      	cbnz	r0, 8005494 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800547a:	9b05      	ldr	r3, [sp, #20]
 800547c:	0359      	lsls	r1, r3, #13
 800547e:	d51a      	bpl.n	80054b6 <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005480:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005482:	6820      	ldr	r0, [r4, #0]
 8005484:	0409      	lsls	r1, r1, #16
 8005486:	f002 f93d 	bl	8007704 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800548a:	b918      	cbnz	r0, 8005494 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800548c:	2102      	movs	r1, #2
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	f002 fa34 	bl	80078fc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005496:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8005498:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800549a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800549c:	2d00      	cmp	r5, #0
 800549e:	d035      	beq.n	800550c <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	4a26      	ldr	r2, [pc, #152]	; (800553c <HAL_SD_ConfigWideBusOperation+0x104>)
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054a6:	2001      	movs	r0, #1
 80054a8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80054ac:	b00a      	add	sp, #40	; 0x28
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80054b4:	e7ee      	b.n	8005494 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054b6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80054ba:	e7eb      	b.n	8005494 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80054bc:	bb09      	cbnz	r1, 8005502 <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80054be:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80054c0:	9104      	str	r1, [sp, #16]
 80054c2:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80054c4:	f001 ff58 	bl	8007378 <SDMMC_GetResponse>
 80054c8:	0182      	lsls	r2, r0, #6
 80054ca:	d414      	bmi.n	80054f6 <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80054cc:	a904      	add	r1, sp, #16
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7ff fb6e 	bl	8004bb0 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80054d4:	b960      	cbnz	r0, 80054f0 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80054d6:	9b05      	ldr	r3, [sp, #20]
 80054d8:	03db      	lsls	r3, r3, #15
 80054da:	d50f      	bpl.n	80054fc <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80054dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	0409      	lsls	r1, r1, #16
 80054e2:	f002 f90f 	bl	8007704 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80054e6:	b918      	cbnz	r0, 80054f0 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80054e8:	4601      	mov	r1, r0
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	f002 fa06 	bl	80078fc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80054f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054f2:	4308      	orrs	r0, r1
 80054f4:	e7d0      	b.n	8005498 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80054fa:	e7f9      	b.n	80054f0 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005500:	e7f6      	b.n	80054f0 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005502:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005504:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005508:	63a3      	str	r3, [r4, #56]	; 0x38
 800550a:	e7c6      	b.n	800549a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005510:	68a3      	ldr	r3, [r4, #8]
 8005512:	9305      	str	r3, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	9307      	str	r3, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005518:	6963      	ldr	r3, [r4, #20]
 800551a:	9308      	str	r3, [sp, #32]
    SDMMC_Init(hsd->Instance, Init);
 800551c:	ab0a      	add	r3, sp, #40	; 0x28
 800551e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005522:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.BusWide             = WideMode;
 8005526:	9606      	str	r6, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 8005528:	ab04      	add	r3, sp, #16
 800552a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	f001 fedf 	bl	80072f0 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8005532:	2301      	movs	r3, #1
 8005534:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005538:	4628      	mov	r0, r5
 800553a:	e7b7      	b.n	80054ac <HAL_SD_ConfigWideBusOperation+0x74>
 800553c:	1fe00fff 	.word	0x1fe00fff

08005540 <HAL_SD_Init>:
{ 
 8005540:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 8005542:	4604      	mov	r4, r0
 8005544:	b910      	cbnz	r0, 800554c <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8005546:	2501      	movs	r5, #1
}
 8005548:	4628      	mov	r0, r5
 800554a:	bd38      	pop	{r3, r4, r5, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800554c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005550:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005554:	b913      	cbnz	r3, 800555c <HAL_SD_Init+0x1c>
    hsd->Lock = HAL_UNLOCKED;
 8005556:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005558:	f01a fcd0 	bl	801fefc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800555c:	2303      	movs	r3, #3
 800555e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff fe4a 	bl	80051fc <HAL_SD_InitCard>
 8005568:	2800      	cmp	r0, #0
 800556a:	d1ec      	bne.n	8005546 <HAL_SD_Init+0x6>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800556c:	68e1      	ldr	r1, [r4, #12]
 800556e:	4620      	mov	r0, r4
 8005570:	f7ff ff62 	bl	8005438 <HAL_SD_ConfigWideBusOperation>
 8005574:	4605      	mov	r5, r0
 8005576:	2800      	cmp	r0, #0
 8005578:	d1e5      	bne.n	8005546 <HAL_SD_Init+0x6>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800557a:	69a3      	ldr	r3, [r4, #24]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d006      	beq.n	800558e <HAL_SD_Init+0x4e>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005580:	2300      	movs	r3, #0
 8005582:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005584:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005586:	2301      	movs	r3, #1
 8005588:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800558c:	e7dc      	b.n	8005548 <HAL_SD_Init+0x8>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 800558e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005594:	d002      	beq.n	800559c <HAL_SD_Init+0x5c>
 8005596:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d1f1      	bne.n	8005580 <HAL_SD_Init+0x40>
      hsd->Instance->CLKCR |= 0x00100000;
 800559c:	6822      	ldr	r2, [r4, #0]
 800559e:	6853      	ldr	r3, [r2, #4]
 80055a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a4:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_OK)
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f818 	bl	80055dc <HAL_SDEx_HighSpeed>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d0e7      	beq.n	8005580 <HAL_SD_Init+0x40>
 80055b0:	e7c9      	b.n	8005546 <HAL_SD_Init+0x6>

080055b2 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80055b2:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 80055b4:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80055b6:	0409      	lsls	r1, r1, #16
{
 80055b8:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	f002 f96c 	bl	8007898 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80055c0:	4601      	mov	r1, r0
 80055c2:	b928      	cbnz	r0, 80055d0 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	f001 fed7 	bl	8007378 <SDMMC_GetResponse>
  return cardstate;
 80055ca:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80055ce:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80055d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055d2:	4319      	orrs	r1, r3
 80055d4:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80055d6:	2000      	movs	r0, #0
 80055d8:	e7f7      	b.n	80055ca <HAL_SD_GetCardState+0x18>

080055da <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transciver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80055da:	4770      	bx	lr

080055dc <HAL_SDEx_HighSpeed>:
{
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t SD_hs[64]  = {0};
 80055e0:	2640      	movs	r6, #64	; 0x40
{
 80055e2:	b096      	sub	sp, #88	; 0x58
 80055e4:	4605      	mov	r5, r0
  uint8_t SD_hs[64]  = {0};
 80055e6:	4632      	mov	r2, r6
 80055e8:	2100      	movs	r1, #0
 80055ea:	a806      	add	r0, sp, #24
 80055ec:	f01b f807 	bl	80205fe <memset>
  uint32_t Timeout = HAL_GetTick();
 80055f0:	f7fb fd16 	bl	8001020 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80055f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 80055f6:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d074      	beq.n	80056e6 <HAL_SDEx_HighSpeed+0x10a>
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005600:	d004      	beq.n	800560c <HAL_SDEx_HighSpeed+0x30>
  uint32_t errorstate = HAL_OK;
 8005602:	2400      	movs	r4, #0
}
 8005604:	4620      	mov	r0, r4
 8005606:	b016      	add	sp, #88	; 0x58
 8005608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 800560c:	69af      	ldr	r7, [r5, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 800560e:	2f01      	cmp	r7, #1
 8005610:	d1f7      	bne.n	8005602 <HAL_SDEx_HighSpeed+0x26>
    hsd->Instance->DCTRL = 0;
 8005612:	6828      	ldr	r0, [r5, #0]
 8005614:	2300      	movs	r3, #0
 8005616:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 8005618:	4631      	mov	r1, r6
 800561a:	f001 ff59 	bl	80074d0 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_OK)
 800561e:	4604      	mov	r4, r0
 8005620:	2800      	cmp	r0, #0
 8005622:	d1ef      	bne.n	8005604 <HAL_SDEx_HighSpeed+0x28>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005624:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64;
 8005628:	e88d 0048 	stmia.w	sp, {r3, r6}
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800562c:	2360      	movs	r3, #96	; 0x60
 800562e:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005630:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005632:	2302      	movs	r3, #2
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005634:	4669      	mov	r1, sp
 8005636:	6828      	ldr	r0, [r5, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005638:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800563a:	9705      	str	r7, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 800563c:	f001 ff36 	bl	80074ac <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 8005640:	492a      	ldr	r1, [pc, #168]	; (80056ec <HAL_SDEx_HighSpeed+0x110>)
 8005642:	6828      	ldr	r0, [r5, #0]
 8005644:	f002 f941 	bl	80078ca <SDMMC_CmdSwitch>
    if(errorstate != HAL_OK)
 8005648:	4604      	mov	r4, r0
 800564a:	2800      	cmp	r0, #0
 800564c:	d1da      	bne.n	8005604 <HAL_SDEx_HighSpeed+0x28>
 800564e:	ae06      	add	r6, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8005650:	f240 592a 	movw	r9, #1322	; 0x52a
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005658:	ea12 0f09 	tst.w	r2, r9
 800565c:	d005      	beq.n	800566a <HAL_SDEx_HighSpeed+0x8e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800565e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005660:	0710      	lsls	r0, r2, #28
 8005662:	d51e      	bpl.n	80056a2 <HAL_SDEx_HighSpeed+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005664:	2208      	movs	r2, #8
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8005668:	e7cc      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566c:	041f      	lsls	r7, r3, #16
 800566e:	d50a      	bpl.n	8005686 <HAL_SDEx_HighSpeed+0xaa>
 8005670:	1f37      	subs	r7, r6, #4
 8005672:	f106 0a1c 	add.w	sl, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005676:	6828      	ldr	r0, [r5, #0]
 8005678:	f001 fe54 	bl	8007324 <SDMMC_ReadFIFO>
 800567c:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 8005680:	4557      	cmp	r7, sl
 8005682:	d1f8      	bne.n	8005676 <HAL_SDEx_HighSpeed+0x9a>
        tempbuff += 8;
 8005684:	3620      	adds	r6, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8005686:	f7fb fccb 	bl	8001020 <HAL_GetTick>
 800568a:	eba0 0008 	sub.w	r0, r0, r8
 800568e:	3001      	adds	r0, #1
 8005690:	d1e0      	bne.n	8005654 <HAL_SDEx_HighSpeed+0x78>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005692:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005696:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005698:	2301      	movs	r3, #1
 800569a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        return HAL_TIMEOUT;
 800569e:	2403      	movs	r4, #3
 80056a0:	e7b0      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80056a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a4:	0791      	lsls	r1, r2, #30
 80056a6:	d502      	bpl.n	80056ae <HAL_SDEx_HighSpeed+0xd2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80056a8:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80056aa:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 80056ac:	e7aa      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80056ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b0:	0692      	lsls	r2, r2, #26
 80056b2:	d501      	bpl.n	80056b8 <HAL_SDEx_HighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80056b4:	2420      	movs	r4, #32
 80056b6:	e7f8      	b.n	80056aa <HAL_SDEx_HighSpeed+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056b8:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <HAL_SDEx_HighSpeed+0x114>)
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((SD_hs[13]& 2) != 2)
 80056bc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80056c0:	079b      	lsls	r3, r3, #30
 80056c2:	d502      	bpl.n	80056ca <HAL_SDEx_HighSpeed+0xee>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80056c4:	2001      	movs	r0, #1
 80056c6:	f7ff ff88 	bl	80055da <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056ce:	6828      	ldr	r0, [r5, #0]
 80056d0:	f001 fefe 	bl	80074d0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d094      	beq.n	8005602 <HAL_SDEx_HighSpeed+0x26>
      hsd->State = HAL_SD_STATE_READY;
 80056d8:	2401      	movs	r4, #1
 80056da:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 80056de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80056e0:	4318      	orrs	r0, r3
 80056e2:	63a8      	str	r0, [r5, #56]	; 0x38
      return HAL_ERROR;
 80056e4:	e78e      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 80056e6:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80056ea:	e78b      	b.n	8005604 <HAL_SDEx_HighSpeed+0x28>
 80056ec:	80ffff01 	.word	0x80ffff01
 80056f0:	18000f3a 	.word	0x18000f3a

080056f4 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
 80056f4:	4770      	bx	lr

080056f6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
 80056f6:	4770      	bx	lr

080056f8 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
 80056f8:	4770      	bx	lr

080056fa <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80056fa:	4770      	bx	lr

080056fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056fe:	4604      	mov	r4, r0
 8005700:	2800      	cmp	r0, #0
 8005702:	d04a      	beq.n	800579a <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005704:	2300      	movs	r3, #0
 8005706:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005708:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800570c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005710:	b91b      	cbnz	r3, 800571a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005712:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005716:	f01a fa0d 	bl	801fb34 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800571a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800571c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800571e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005722:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005724:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8005726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800572a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800572e:	600b      	str	r3, [r1, #0]
 8005730:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005734:	d92e      	bls.n	8005794 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005736:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005738:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800573c:	bf18      	it	ne
 800573e:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005740:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005742:	b92b      	cbnz	r3, 8005750 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005744:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005748:	bf8c      	ite	hi
 800574a:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800574c:	2301      	movls	r3, #1
 800574e:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005750:	68a6      	ldr	r6, [r4, #8]
 8005752:	6863      	ldr	r3, [r4, #4]
 8005754:	69a5      	ldr	r5, [r4, #24]
 8005756:	4333      	orrs	r3, r6
 8005758:	6926      	ldr	r6, [r4, #16]
 800575a:	4333      	orrs	r3, r6
 800575c:	6966      	ldr	r6, [r4, #20]
 800575e:	4333      	orrs	r3, r6
 8005760:	69e6      	ldr	r6, [r4, #28]
 8005762:	4333      	orrs	r3, r6
 8005764:	6a26      	ldr	r6, [r4, #32]
 8005766:	4333      	orrs	r3, r6
 8005768:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800576a:	4333      	orrs	r3, r6
 800576c:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8005770:	4333      	orrs	r3, r6
 8005772:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005776:	431a      	orrs	r2, r3
 8005778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800577a:	0c2d      	lsrs	r5, r5, #16
 800577c:	431a      	orrs	r2, r3
 800577e:	f005 0504 	and.w	r5, r5, #4
 8005782:	432a      	orrs	r2, r5
 8005784:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8005786:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005788:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800578a:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800578c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800578e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	
  return HAL_OK;
 8005792:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005794:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005798:	e7d0      	b.n	800573c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800579a:	2001      	movs	r0, #1
}
 800579c:	bd70      	pop	{r4, r5, r6, pc}

0800579e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800579e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a2:	461d      	mov	r5, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80057a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 80057ac:	2b01      	cmp	r3, #1
{
 80057ae:	4604      	mov	r4, r0
 80057b0:	460e      	mov	r6, r1
 80057b2:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 80057b4:	d07d      	beq.n	80058b2 <HAL_SPI_TransmitReceive+0x114>
 80057b6:	2301      	movs	r3, #1
 80057b8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057bc:	f7fb fc30 	bl	8001020 <HAL_GetTick>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057c0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	hspi->TxISR       = NULL;


  /* Set the Rx Fifo threshold */
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057c4:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 80057c6:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ca:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057cc:	bf1c      	itt	ne
 80057ce:	2305      	movne	r3, #5
 80057d0:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057d4:	2300      	movs	r3, #0
 80057d6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80057d8:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80057dc:	87e5      	strh	r5, [r4, #62]	; 0x3e
	hspi->TxISR       = NULL;
 80057de:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e0:	6853      	ldr	r3, [r2, #4]
	hspi->TxXferSize  = Size;
 80057e2:	87a5      	strh	r5, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057e8:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057ea:	63a6      	str	r6, [r4, #56]	; 0x38
  tickstart = HAL_GetTick();
 80057ec:	4681      	mov	r9, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ee:	6053      	str	r3, [r2, #4]
  uint32_t txallowed = 1U;
 80057f0:	2501      	movs	r5, #1


    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	b95b      	cbnz	r3, 8005810 <HAL_SPI_TransmitReceive+0x72>
 80057f8:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80057fc:	b280      	uxth	r0, r0
 80057fe:	b938      	cbnz	r0, 8005810 <HAL_SPI_TransmitReceive+0x72>
    }
 // }


error :
  hspi->State = HAL_SPI_STATE_READY;
 8005800:	2301      	movs	r3, #1
 8005802:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005806:	2300      	movs	r3, #0
 8005808:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800580c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005810:	b195      	cbz	r5, 8005838 <HAL_SPI_TransmitReceive+0x9a>
 8005812:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	b17b      	cbz	r3, 8005838 <HAL_SPI_TransmitReceive+0x9a>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	0791      	lsls	r1, r2, #30
 800581e:	d50b      	bpl.n	8005838 <HAL_SPI_TransmitReceive+0x9a>
        if (hspi->TxXferCount > 1U)
 8005820:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005822:	b292      	uxth	r2, r2
 8005824:	2a01      	cmp	r2, #1
 8005826:	d932      	bls.n	800588e <HAL_SPI_TransmitReceive+0xf0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005828:	f836 2b02 	ldrh.w	r2, [r6], #2
 800582c:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800582e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005830:	3b02      	subs	r3, #2
 8005832:	b29b      	uxth	r3, r3
 8005834:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005836:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005838:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800583c:	b29b      	uxth	r3, r3
 800583e:	b1db      	cbz	r3, 8005878 <HAL_SPI_TransmitReceive+0xda>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	07d2      	lsls	r2, r2, #31
 8005846:	d517      	bpl.n	8005878 <HAL_SPI_TransmitReceive+0xda>
        if (hspi->RxXferCount > 1U)
 8005848:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800584c:	b292      	uxth	r2, r2
 800584e:	2a01      	cmp	r2, #1
 8005850:	d925      	bls.n	800589e <HAL_SPI_TransmitReceive+0x100>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	f827 2b02 	strh.w	r2, [r7], #2
          hspi->RxXferCount -= 2U;
 8005858:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800585c:	3a02      	subs	r2, #2
 800585e:	b292      	uxth	r2, r2
 8005860:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005864:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005868:	b292      	uxth	r2, r2
 800586a:	2a01      	cmp	r2, #1
 800586c:	d803      	bhi.n	8005876 <HAL_SPI_TransmitReceive+0xd8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005874:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8005876:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005878:	f1b8 3fff 	cmp.w	r8, #4294967295
 800587c:	d0b9      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0x54>
 800587e:	f7fb fbcf 	bl	8001020 <HAL_GetTick>
 8005882:	eba0 0009 	sub.w	r0, r0, r9
 8005886:	4580      	cmp	r8, r0
 8005888:	d8b3      	bhi.n	80057f2 <HAL_SPI_TransmitReceive+0x54>
        errorcode = HAL_TIMEOUT;
 800588a:	2003      	movs	r0, #3
 800588c:	e7b8      	b.n	8005800 <HAL_SPI_TransmitReceive+0x62>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800588e:	7832      	ldrb	r2, [r6, #0]
 8005890:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8005892:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005894:	3b01      	subs	r3, #1
 8005896:	b29b      	uxth	r3, r3
 8005898:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800589a:	3601      	adds	r6, #1
 800589c:	e7cb      	b.n	8005836 <HAL_SPI_TransmitReceive+0x98>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800589e:	7b1b      	ldrb	r3, [r3, #12]
 80058a0:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 80058a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058ae:	3701      	adds	r7, #1
 80058b0:	e7e1      	b.n	8005876 <HAL_SPI_TransmitReceive+0xd8>
  __HAL_LOCK(hspi);
 80058b2:	2002      	movs	r0, #2
  return errorcode;
}
 80058b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080058b8 <HAL_SPI_ErrorCallback>:
 80058b8:	4770      	bx	lr
	...

080058bc <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 80058bc:	6803      	ldr	r3, [r0, #0]
{
 80058be:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80058c0:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80058c2:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 80058c4:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80058c8:	2d01      	cmp	r5, #1
{
 80058ca:	b085      	sub	sp, #20
 80058cc:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 80058ce:	d105      	bne.n	80058dc <HAL_SPI_IRQHandler+0x20>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80058d0:	064d      	lsls	r5, r1, #25
 80058d2:	d503      	bpl.n	80058dc <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 80058d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 80058d6:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 80058d8:	b005      	add	sp, #20
 80058da:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80058dc:	0795      	lsls	r5, r2, #30
 80058de:	d504      	bpl.n	80058ea <HAL_SPI_IRQHandler+0x2e>
 80058e0:	0608      	lsls	r0, r1, #24
 80058e2:	d502      	bpl.n	80058ea <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 80058e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058e6:	4620      	mov	r0, r4
 80058e8:	e7f5      	b.n	80058d6 <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80058ea:	f412 7fb0 	tst.w	r2, #352	; 0x160
 80058ee:	d0f3      	beq.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
 80058f0:	068d      	lsls	r5, r1, #26
 80058f2:	d5f1      	bpl.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 80058f4:	0650      	lsls	r0, r2, #25
 80058f6:	d50f      	bpl.n	8005918 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058f8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80058fc:	2803      	cmp	r0, #3
 80058fe:	f04f 0500 	mov.w	r5, #0
 8005902:	d041      	beq.n	8005988 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005904:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005906:	f040 0004 	orr.w	r0, r0, #4
 800590a:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800590c:	9500      	str	r5, [sp, #0]
 800590e:	68d8      	ldr	r0, [r3, #12]
 8005910:	9000      	str	r0, [sp, #0]
 8005912:	6898      	ldr	r0, [r3, #8]
 8005914:	9000      	str	r0, [sp, #0]
 8005916:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8005918:	0695      	lsls	r5, r2, #26
 800591a:	d50c      	bpl.n	8005936 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800591c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800591e:	f040 0001 	orr.w	r0, r0, #1
 8005922:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005924:	2000      	movs	r0, #0
 8005926:	9002      	str	r0, [sp, #8]
 8005928:	6898      	ldr	r0, [r3, #8]
 800592a:	9002      	str	r0, [sp, #8]
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005932:	6018      	str	r0, [r3, #0]
 8005934:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8005936:	05d0      	lsls	r0, r2, #23
 8005938:	d508      	bpl.n	800594c <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800593a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800593c:	f042 0208 	orr.w	r2, r2, #8
 8005940:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005942:	2200      	movs	r2, #0
 8005944:	9203      	str	r2, [sp, #12]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	9203      	str	r2, [sp, #12]
 800594a:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800594c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800594e:	2a00      	cmp	r2, #0
 8005950:	d0c2      	beq.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005958:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800595a:	2201      	movs	r2, #1
 800595c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005960:	078a      	lsls	r2, r1, #30
 8005962:	d018      	beq.n	8005996 <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005964:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005966:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005968:	f022 0203 	bic.w	r2, r2, #3
 800596c:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800596e:	b118      	cbz	r0, 8005978 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <HAL_SPI_IRQHandler+0xe4>)
 8005972:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005974:	f7fc f8f3 	bl	8001b5e <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8005978:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800597a:	2800      	cmp	r0, #0
 800597c:	d0ac      	beq.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800597e:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <HAL_SPI_IRQHandler+0xe4>)
 8005980:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005982:	f7fc f8ec 	bl	8001b5e <HAL_DMA_Abort_IT>
 8005986:	e7a7      	b.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005988:	9501      	str	r5, [sp, #4]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	9201      	str	r2, [sp, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	9b01      	ldr	r3, [sp, #4]
        return;
 8005994:	e7a0      	b.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8005996:	4620      	mov	r0, r4
 8005998:	f7ff ff8e 	bl	80058b8 <HAL_SPI_ErrorCallback>
 800599c:	e79c      	b.n	80058d8 <HAL_SPI_IRQHandler+0x1c>
 800599e:	bf00      	nop
 80059a0:	080059a5 	.word	0x080059a5

080059a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80059ae:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 80059b0:	f7ff ff82 	bl	80058b8 <HAL_SPI_ErrorCallback>
 80059b4:	bd08      	pop	{r3, pc}
	...

080059b8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b8:	6a03      	ldr	r3, [r0, #32]
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c0:	6a03      	ldr	r3, [r0, #32]
{
 80059c2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80059d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80059d6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80059da:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059dc:	4d1b      	ldr	r5, [pc, #108]	; (8005a4c <TIM_OC1_SetConfig+0x94>)
 80059de:	42a8      	cmp	r0, r5
 80059e0:	d00f      	beq.n	8005a02 <TIM_OC1_SetConfig+0x4a>
 80059e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059e6:	42a8      	cmp	r0, r5
 80059e8:	d00b      	beq.n	8005a02 <TIM_OC1_SetConfig+0x4a>
 80059ea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80059ee:	42a8      	cmp	r0, r5
 80059f0:	d007      	beq.n	8005a02 <TIM_OC1_SetConfig+0x4a>
 80059f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059f6:	42a8      	cmp	r0, r5
 80059f8:	d003      	beq.n	8005a02 <TIM_OC1_SetConfig+0x4a>
 80059fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059fe:	42a8      	cmp	r0, r5
 8005a00:	d11e      	bne.n	8005a40 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a02:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a04:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005a08:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0a:	4d10      	ldr	r5, [pc, #64]	; (8005a4c <TIM_OC1_SetConfig+0x94>)
 8005a0c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a0e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a12:	d00f      	beq.n	8005a34 <TIM_OC1_SetConfig+0x7c>
 8005a14:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a18:	42a8      	cmp	r0, r5
 8005a1a:	d00b      	beq.n	8005a34 <TIM_OC1_SetConfig+0x7c>
 8005a1c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005a20:	42a8      	cmp	r0, r5
 8005a22:	d007      	beq.n	8005a34 <TIM_OC1_SetConfig+0x7c>
 8005a24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a28:	42a8      	cmp	r0, r5
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC1_SetConfig+0x7c>
 8005a2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a30:	42a8      	cmp	r0, r5
 8005a32:	d105      	bne.n	8005a40 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a34:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a38:	698e      	ldr	r6, [r1, #24]
 8005a3a:	694c      	ldr	r4, [r1, #20]
 8005a3c:	4334      	orrs	r4, r6
 8005a3e:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a40:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a42:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a44:	684a      	ldr	r2, [r1, #4]
 8005a46:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a48:	6203      	str	r3, [r0, #32]
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	40012c00 	.word	0x40012c00

08005a50 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a50:	6a03      	ldr	r3, [r0, #32]
 8005a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a56:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a58:	6a03      	ldr	r3, [r0, #32]
{
 8005a5a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a66:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005a6a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a6c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a72:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a76:	4d16      	ldr	r5, [pc, #88]	; (8005ad0 <TIM_OC3_SetConfig+0x80>)
 8005a78:	42a8      	cmp	r0, r5
 8005a7a:	d003      	beq.n	8005a84 <TIM_OC3_SetConfig+0x34>
 8005a7c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a80:	42a8      	cmp	r0, r5
 8005a82:	d10d      	bne.n	8005aa0 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a84:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	4d10      	ldr	r5, [pc, #64]	; (8005ad0 <TIM_OC3_SetConfig+0x80>)
 8005a90:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a96:	d00e      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x66>
 8005a98:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a9c:	42a8      	cmp	r0, r5
 8005a9e:	d00a      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x66>
 8005aa0:	4d0c      	ldr	r5, [pc, #48]	; (8005ad4 <TIM_OC3_SetConfig+0x84>)
 8005aa2:	42a8      	cmp	r0, r5
 8005aa4:	d007      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x66>
 8005aa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005aaa:	42a8      	cmp	r0, r5
 8005aac:	d003      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x66>
 8005aae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ab2:	42a8      	cmp	r0, r5
 8005ab4:	d106      	bne.n	8005ac4 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ab6:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aba:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005abc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005abe:	4334      	orrs	r4, r6
 8005ac0:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ac8:	684a      	ldr	r2, [r1, #4]
 8005aca:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005acc:	6203      	str	r3, [r0, #32]
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40014000 	.word	0x40014000

08005ad8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad8:	6a03      	ldr	r3, [r0, #32]
 8005ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ade:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae0:	6a03      	ldr	r3, [r0, #32]
{
 8005ae2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005aee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005afc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b00:	4d0e      	ldr	r5, [pc, #56]	; (8005b3c <TIM_OC4_SetConfig+0x64>)
 8005b02:	42a8      	cmp	r0, r5
 8005b04:	d00f      	beq.n	8005b26 <TIM_OC4_SetConfig+0x4e>
 8005b06:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b0a:	42a8      	cmp	r0, r5
 8005b0c:	d00b      	beq.n	8005b26 <TIM_OC4_SetConfig+0x4e>
 8005b0e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b12:	42a8      	cmp	r0, r5
 8005b14:	d007      	beq.n	8005b26 <TIM_OC4_SetConfig+0x4e>
 8005b16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b1a:	42a8      	cmp	r0, r5
 8005b1c:	d003      	beq.n	8005b26 <TIM_OC4_SetConfig+0x4e>
 8005b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b22:	42a8      	cmp	r0, r5
 8005b24:	d104      	bne.n	8005b30 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b26:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b28:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b2c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b30:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b32:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b34:	684a      	ldr	r2, [r1, #4]
 8005b36:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b38:	6203      	str	r3, [r0, #32]
 8005b3a:	bd30      	pop	{r4, r5, pc}
 8005b3c:	40012c00 	.word	0x40012c00

08005b40 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b40:	6a03      	ldr	r3, [r0, #32]
 8005b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b46:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b48:	6a03      	ldr	r3, [r0, #32]
{
 8005b4a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005b5a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b5c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005b5e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b62:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b66:	4d0f      	ldr	r5, [pc, #60]	; (8005ba4 <TIM_OC5_SetConfig+0x64>)
 8005b68:	42a8      	cmp	r0, r5
 8005b6a:	d00f      	beq.n	8005b8c <TIM_OC5_SetConfig+0x4c>
 8005b6c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b70:	42a8      	cmp	r0, r5
 8005b72:	d00b      	beq.n	8005b8c <TIM_OC5_SetConfig+0x4c>
 8005b74:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b78:	42a8      	cmp	r0, r5
 8005b7a:	d007      	beq.n	8005b8c <TIM_OC5_SetConfig+0x4c>
 8005b7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b80:	42a8      	cmp	r0, r5
 8005b82:	d003      	beq.n	8005b8c <TIM_OC5_SetConfig+0x4c>
 8005b84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b88:	42a8      	cmp	r0, r5
 8005b8a:	d104      	bne.n	8005b96 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b8c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b8e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b92:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b98:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b9a:	684a      	ldr	r2, [r1, #4]
 8005b9c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9e:	6203      	str	r3, [r0, #32]
 8005ba0:	bd30      	pop	{r4, r5, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40012c00 	.word	0x40012c00

08005ba8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ba8:	6a03      	ldr	r3, [r0, #32]
 8005baa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb0:	6a03      	ldr	r3, [r0, #32]
{
 8005bb2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bb6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005bbe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bc6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bcc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	4d0e      	ldr	r5, [pc, #56]	; (8005c0c <TIM_OC6_SetConfig+0x64>)
 8005bd2:	42a8      	cmp	r0, r5
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_OC6_SetConfig+0x4e>
 8005bd6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bda:	42a8      	cmp	r0, r5
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_OC6_SetConfig+0x4e>
 8005bde:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005be2:	42a8      	cmp	r0, r5
 8005be4:	d007      	beq.n	8005bf6 <TIM_OC6_SetConfig+0x4e>
 8005be6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bea:	42a8      	cmp	r0, r5
 8005bec:	d003      	beq.n	8005bf6 <TIM_OC6_SetConfig+0x4e>
 8005bee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bf2:	42a8      	cmp	r0, r5
 8005bf4:	d104      	bne.n	8005c00 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bf6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bf8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bfc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c00:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c02:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c04:	684a      	ldr	r2, [r1, #4]
 8005c06:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c08:	6203      	str	r3, [r0, #32]
 8005c0a:	bd30      	pop	{r4, r5, pc}
 8005c0c:	40012c00 	.word	0x40012c00

08005c10 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	2302      	movs	r3, #2
{
 8005c12:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005c18:	6803      	ldr	r3, [r0, #0]
 8005c1a:	4c09      	ldr	r4, [pc, #36]	; (8005c40 <HAL_TIM_Base_Start+0x30>)
 8005c1c:	6899      	ldr	r1, [r3, #8]
 8005c1e:	4021      	ands	r1, r4
 8005c20:	2906      	cmp	r1, #6
 8005c22:	d008      	beq.n	8005c36 <HAL_TIM_Base_Start+0x26>
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	4022      	ands	r2, r4
 8005c28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005c2c:	bf1e      	ittt	ne
 8005c2e:	681a      	ldrne	r2, [r3, #0]
 8005c30:	f042 0201 	orrne.w	r2, r2, #1
 8005c34:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	bd10      	pop	{r4, pc}
 8005c40:	00010007 	.word	0x00010007

08005c44 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c44:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005c46:	480a      	ldr	r0, [pc, #40]	; (8005c70 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005c50:	6899      	ldr	r1, [r3, #8]
 8005c52:	4001      	ands	r1, r0
 8005c54:	2906      	cmp	r1, #6
 8005c56:	d008      	beq.n	8005c6a <HAL_TIM_Base_Start_IT+0x26>
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	4002      	ands	r2, r0
 8005c5c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005c60:	bf1e      	ittt	ne
 8005c62:	681a      	ldrne	r2, [r3, #0]
 8005c64:	f042 0201 	orrne.w	r2, r2, #1
 8005c68:	601a      	strne	r2, [r3, #0]
}
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	00010007 	.word	0x00010007

08005c74 <HAL_TIM_PeriodElapsedCallback>:
 8005c74:	4770      	bx	lr

08005c76 <HAL_TIM_OC_DelayElapsedCallback>:
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_IC_CaptureCallback>:
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIM_PWM_PulseFinishedCallback>:
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIM_TriggerCallback>:
 8005c7c:	4770      	bx	lr

08005c7e <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c7e:	6803      	ldr	r3, [r0, #0]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	0791      	lsls	r1, r2, #30
{
 8005c84:	b510      	push	{r4, lr}
 8005c86:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c88:	d50f      	bpl.n	8005caa <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	0792      	lsls	r2, r2, #30
 8005c8e:	d50c      	bpl.n	8005caa <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c90:	f06f 0202 	mvn.w	r2, #2
 8005c94:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c96:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c98:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c9a:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c9c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c9e:	f000 8085 	beq.w	8005dac <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005ca2:	f7ff ffe9 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	0752      	lsls	r2, r2, #29
 8005cb0:	d510      	bpl.n	8005cd4 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	0750      	lsls	r0, r2, #29
 8005cb6:	d50d      	bpl.n	8005cd4 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb8:	f06f 0204 	mvn.w	r2, #4
 8005cbc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cbe:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc0:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cca:	d075      	beq.n	8005db8 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ccc:	f7ff ffd4 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	0711      	lsls	r1, r2, #28
 8005cda:	d50f      	bpl.n	8005cfc <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	0712      	lsls	r2, r2, #28
 8005ce0:	d50c      	bpl.n	8005cfc <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ce2:	f06f 0208 	mvn.w	r2, #8
 8005ce6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ce8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cea:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cec:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cee:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf2:	d067      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf4:	f7ff ffc0 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	06d0      	lsls	r0, r2, #27
 8005d02:	d510      	bpl.n	8005d26 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	06d1      	lsls	r1, r2, #27
 8005d08:	d50d      	bpl.n	8005d26 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d0a:	f06f 0210 	mvn.w	r2, #16
 8005d0e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d10:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d12:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d14:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d18:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1c:	d058      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1e:	f7ff ffab 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	2300      	movs	r3, #0
 8005d24:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	07d2      	lsls	r2, r2, #31
 8005d2c:	d508      	bpl.n	8005d40 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	07d0      	lsls	r0, r2, #31
 8005d32:	d505      	bpl.n	8005d40 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d34:	f06f 0201 	mvn.w	r2, #1
 8005d38:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7ff ff9a 	bl	8005c74 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	0611      	lsls	r1, r2, #24
 8005d46:	d508      	bpl.n	8005d5a <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	0612      	lsls	r2, r2, #24
 8005d4c:	d505      	bpl.n	8005d5a <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d52:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 fb98 	bl	800648a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	05d0      	lsls	r0, r2, #23
 8005d60:	d508      	bpl.n	8005d74 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	0611      	lsls	r1, r2, #24
 8005d66:	d505      	bpl.n	8005d74 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d6c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fb8c 	bl	800648c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	0652      	lsls	r2, r2, #25
 8005d7a:	d508      	bpl.n	8005d8e <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	0650      	lsls	r0, r2, #25
 8005d80:	d505      	bpl.n	8005d8e <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d86:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7ff ff77 	bl	8005c7c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	0691      	lsls	r1, r2, #26
 8005d94:	d522      	bpl.n	8005ddc <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	0692      	lsls	r2, r2, #26
 8005d9a:	d51f      	bpl.n	8005ddc <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d9c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005da0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da2:	611a      	str	r2, [r3, #16]
}
 8005da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005da8:	f000 bb6e 	b.w	8006488 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dac:	f7ff ff63 	bl	8005c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff ff62 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
 8005db6:	e776      	b.n	8005ca6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db8:	f7ff ff5d 	bl	8005c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f7ff ff5c 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
 8005dc2:	e785      	b.n	8005cd0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc4:	f7ff ff57 	bl	8005c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f7ff ff56 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
 8005dce:	e793      	b.n	8005cf8 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd0:	f7ff ff51 	bl	8005c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f7ff ff50 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
 8005dda:	e7a2      	b.n	8005d22 <HAL_TIM_IRQHandler+0xa4>
 8005ddc:	bd10      	pop	{r4, pc}
	...

08005de0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de0:	4a30      	ldr	r2, [pc, #192]	; (8005ea4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005de2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de4:	4290      	cmp	r0, r2
 8005de6:	d012      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005de8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005dec:	d00f      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005dee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005df2:	4290      	cmp	r0, r2
 8005df4:	d00b      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dfa:	4290      	cmp	r0, r2
 8005dfc:	d007      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e02:	4290      	cmp	r0, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_Base_SetConfig+0x2e>
 8005e06:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005e0a:	4290      	cmp	r0, r2
 8005e0c:	d119      	bne.n	8005e42 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005e0e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e14:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	4a23      	ldr	r2, [pc, #140]	; (8005ea4 <TIM_Base_SetConfig+0xc4>)
 8005e18:	4290      	cmp	r0, r2
 8005e1a:	d01d      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005e20:	d01a      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005e26:	4290      	cmp	r0, r2
 8005e28:	d016      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e2e:	4290      	cmp	r0, r2
 8005e30:	d012      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e36:	4290      	cmp	r0, r2
 8005e38:	d00e      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e3a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005e3e:	4290      	cmp	r0, r2
 8005e40:	d00a      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e42:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <TIM_Base_SetConfig+0xc8>)
 8005e44:	4290      	cmp	r0, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e4c:	4290      	cmp	r0, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_Base_SetConfig+0x78>
 8005e50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e54:	4290      	cmp	r0, r2
 8005e56:	d103      	bne.n	8005e60 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e58:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e5e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e60:	694a      	ldr	r2, [r1, #20]
 8005e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e66:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005e68:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e6a:	688b      	ldr	r3, [r1, #8]
 8005e6c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e6e:	680b      	ldr	r3, [r1, #0]
 8005e70:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <TIM_Base_SetConfig+0xc4>)
 8005e74:	4298      	cmp	r0, r3
 8005e76:	d00f      	beq.n	8005e98 <TIM_Base_SetConfig+0xb8>
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	4298      	cmp	r0, r3
 8005e7e:	d00b      	beq.n	8005e98 <TIM_Base_SetConfig+0xb8>
 8005e80:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005e84:	4298      	cmp	r0, r3
 8005e86:	d007      	beq.n	8005e98 <TIM_Base_SetConfig+0xb8>
 8005e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8c:	4298      	cmp	r0, r3
 8005e8e:	d003      	beq.n	8005e98 <TIM_Base_SetConfig+0xb8>
 8005e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e94:	4298      	cmp	r0, r3
 8005e96:	d101      	bne.n	8005e9c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005e98:	690b      	ldr	r3, [r1, #16]
 8005e9a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	6143      	str	r3, [r0, #20]
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40014000 	.word	0x40014000

08005eac <HAL_TIM_Base_Init>:
{
 8005eac:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005eae:	4604      	mov	r4, r0
 8005eb0:	b1a0      	cbz	r0, 8005edc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005eb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005eba:	b91b      	cbnz	r3, 8005ec4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005ebc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005ec0:	f019 ff0a 	bl	801fcd8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eca:	6820      	ldr	r0, [r4, #0]
 8005ecc:	1d21      	adds	r1, r4, #4
 8005ece:	f7ff ff87 	bl	8005de0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ed8:	2000      	movs	r0, #0
 8005eda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005edc:	2001      	movs	r0, #1
}
 8005ede:	bd10      	pop	{r4, pc}

08005ee0 <HAL_TIM_OC_Init>:
{
 8005ee0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	b1a0      	cbz	r0, 8005f10 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005eea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005eee:	b91b      	cbnz	r3, 8005ef8 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005ef0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005ef4:	f019 ff52 	bl	801fd9c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005efe:	6820      	ldr	r0, [r4, #0]
 8005f00:	1d21      	adds	r1, r4, #4
 8005f02:	f7ff ff6d 	bl	8005de0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f10:	2001      	movs	r0, #1
}
 8005f12:	bd10      	pop	{r4, pc}

08005f14 <HAL_TIM_PWM_Init>:
{
 8005f14:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005f16:	4604      	mov	r4, r0
 8005f18:	b1a0      	cbz	r0, 8005f44 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f22:	b91b      	cbnz	r3, 8005f2c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005f24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005f28:	f01a f824 	bl	801ff74 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	1d21      	adds	r1, r4, #4
 8005f36:	f7ff ff53 	bl	8005de0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005f40:	2000      	movs	r0, #0
 8005f42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f44:	2001      	movs	r0, #1
}
 8005f46:	bd10      	pop	{r4, pc}

08005f48 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f48:	6a03      	ldr	r3, [r0, #32]
 8005f4a:	f023 0310 	bic.w	r3, r3, #16
 8005f4e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005f50:	6a03      	ldr	r3, [r0, #32]
{
 8005f52:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005f54:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005f56:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f58:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f5a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005f5e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f66:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005f68:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f70:	4d16      	ldr	r5, [pc, #88]	; (8005fcc <TIM_OC2_SetConfig+0x84>)
 8005f72:	42a8      	cmp	r0, r5
 8005f74:	d003      	beq.n	8005f7e <TIM_OC2_SetConfig+0x36>
 8005f76:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f7a:	42a8      	cmp	r0, r5
 8005f7c:	d10d      	bne.n	8005f9a <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f7e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f84:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f88:	4d10      	ldr	r5, [pc, #64]	; (8005fcc <TIM_OC2_SetConfig+0x84>)
 8005f8a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f90:	d00e      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x68>
 8005f92:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f96:	42a8      	cmp	r0, r5
 8005f98:	d00a      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x68>
 8005f9a:	4d0d      	ldr	r5, [pc, #52]	; (8005fd0 <TIM_OC2_SetConfig+0x88>)
 8005f9c:	42a8      	cmp	r0, r5
 8005f9e:	d007      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x68>
 8005fa0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fa4:	42a8      	cmp	r0, r5
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x68>
 8005fa8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fac:	42a8      	cmp	r0, r5
 8005fae:	d106      	bne.n	8005fbe <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fb0:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fb6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb8:	4334      	orrs	r4, r6
 8005fba:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8005fbe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005fc0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005fc2:	684a      	ldr	r2, [r1, #4]
 8005fc4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005fc6:	6203      	str	r3, [r0, #32]
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	bf00      	nop
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40014000 	.word	0x40014000

08005fd4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005fd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005fd8:	2b01      	cmp	r3, #1
{
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	4604      	mov	r4, r0
 8005fde:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005fe2:	d010      	beq.n	8006006 <HAL_TIM_OC_ConfigChannel+0x32>
 8005fe4:	2301      	movs	r3, #1
  switch (Channel)
 8005fe6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005fe8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005ff0:	d01c      	beq.n	800602c <HAL_TIM_OC_ConfigChannel+0x58>
 8005ff2:	d809      	bhi.n	8006008 <HAL_TIM_OC_ConfigChannel+0x34>
 8005ff4:	b192      	cbz	r2, 800601c <HAL_TIM_OC_ConfigChannel+0x48>
 8005ff6:	2a04      	cmp	r2, #4
 8005ff8:	d014      	beq.n	8006024 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8005ffa:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005ffc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005ffe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006002:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006006:	bd10      	pop	{r4, pc}
  switch (Channel)
 8006008:	2a10      	cmp	r2, #16
 800600a:	d013      	beq.n	8006034 <HAL_TIM_OC_ConfigChannel+0x60>
 800600c:	2a14      	cmp	r2, #20
 800600e:	d015      	beq.n	800603c <HAL_TIM_OC_ConfigChannel+0x68>
 8006010:	2a0c      	cmp	r2, #12
 8006012:	d1f2      	bne.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	f7ff fd5f 	bl	8005ad8 <TIM_OC4_SetConfig>
      break;
 800601a:	e7ee      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	f7ff fccb 	bl	80059b8 <TIM_OC1_SetConfig>
      break;
 8006022:	e7ea      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	f7ff ff8f 	bl	8005f48 <TIM_OC2_SetConfig>
      break;
 800602a:	e7e6      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	f7ff fd0f 	bl	8005a50 <TIM_OC3_SetConfig>
      break;
 8006032:	e7e2      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	f7ff fd83 	bl	8005b40 <TIM_OC5_SetConfig>
      break;
 800603a:	e7de      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	f7ff fdb3 	bl	8005ba8 <TIM_OC6_SetConfig>
      break;
 8006042:	e7da      	b.n	8005ffa <HAL_TIM_OC_ConfigChannel+0x26>

08006044 <HAL_TIM_PWM_ConfigChannel>:
{
 8006044:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006046:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800604a:	2b01      	cmp	r3, #1
{
 800604c:	4604      	mov	r4, r0
 800604e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006052:	d010      	beq.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006054:	2301      	movs	r3, #1
  switch (Channel)
 8006056:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006058:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8006060:	d043      	beq.n	80060ea <HAL_TIM_PWM_ConfigChannel+0xa6>
 8006062:	d809      	bhi.n	8006078 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006064:	b1fa      	cbz	r2, 80060a6 <HAL_TIM_PWM_ConfigChannel+0x62>
 8006066:	2a04      	cmp	r2, #4
 8006068:	d02e      	beq.n	80060c8 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800606a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800606c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800606e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006072:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006076:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8006078:	2a10      	cmp	r2, #16
 800607a:	d047      	beq.n	800610c <HAL_TIM_PWM_ConfigChannel+0xc8>
 800607c:	2a14      	cmp	r2, #20
 800607e:	d056      	beq.n	800612e <HAL_TIM_PWM_ConfigChannel+0xea>
 8006080:	2a0c      	cmp	r2, #12
 8006082:	d1f2      	bne.n	800606a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	f7ff fd27 	bl	8005ad8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800608a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800608c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800609c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800609e:	69da      	ldr	r2, [r3, #28]
 80060a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80060a4:	e030      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060a6:	6820      	ldr	r0, [r4, #0]
 80060a8:	f7ff fc86 	bl	80059b8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	f042 0208 	orr.w	r2, r2, #8
 80060b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	f022 0204 	bic.w	r2, r2, #4
 80060be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060c4:	619a      	str	r2, [r3, #24]
      break;
 80060c6:	e7d0      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	f7ff ff3d 	bl	8005f48 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80060e8:	e7ec      	b.n	80060c4 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ea:	6820      	ldr	r0, [r4, #0]
 80060ec:	f7ff fcb0 	bl	8005a50 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060f4:	69da      	ldr	r2, [r3, #28]
 80060f6:	f042 0208 	orr.w	r2, r2, #8
 80060fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060fc:	69da      	ldr	r2, [r3, #28]
 80060fe:	f022 0204 	bic.w	r2, r2, #4
 8006102:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006108:	61da      	str	r2, [r3, #28]
      break;
 800610a:	e7ae      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800610c:	6820      	ldr	r0, [r4, #0]
 800610e:	f7ff fd17 	bl	8005b40 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006112:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006114:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006116:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006118:	f042 0208 	orr.w	r2, r2, #8
 800611c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800611e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006120:	f022 0204 	bic.w	r2, r2, #4
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006126:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006128:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800612a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800612c:	e79d      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800612e:	6820      	ldr	r0, [r4, #0]
 8006130:	f7ff fd3a 	bl	8005ba8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006134:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006136:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800613a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006146:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800614a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800614e:	e7ec      	b.n	800612a <HAL_TIM_PWM_ConfigChannel+0xe6>

08006150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006150:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006152:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006154:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006156:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800615a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800615e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006160:	6083      	str	r3, [r0, #8]
 8006162:	bd10      	pop	{r4, pc}

08006164 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006164:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
{
 800616a:	b570      	push	{r4, r5, r6, lr}
 800616c:	4604      	mov	r4, r0
 800616e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006172:	d017      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006178:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800617a:	2301      	movs	r3, #1
 800617c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006180:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006182:	4b48      	ldr	r3, [pc, #288]	; (80062a4 <HAL_TIM_ConfigClockSource+0x140>)
 8006184:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8006186:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006188:	680b      	ldr	r3, [r1, #0]
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d072      	beq.n	8006274 <HAL_TIM_ConfigClockSource+0x110>
 800618e:	d815      	bhi.n	80061bc <HAL_TIM_ConfigClockSource+0x58>
 8006190:	2b10      	cmp	r3, #16
 8006192:	d00c      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x4a>
 8006194:	d807      	bhi.n	80061a6 <HAL_TIM_ConfigClockSource+0x42>
 8006196:	b153      	cbz	r3, 80061ae <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8006198:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800619a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800619c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80061a0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80061a4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d001      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x4a>
 80061aa:	2b30      	cmp	r3, #48	; 0x30
 80061ac:	d1f4      	bne.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80061ae:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b8:	4313      	orrs	r3, r2
 80061ba:	e033      	b.n	8006224 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80061bc:	2b70      	cmp	r3, #112	; 0x70
 80061be:	d033      	beq.n	8006228 <HAL_TIM_ConfigClockSource+0xc4>
 80061c0:	d81b      	bhi.n	80061fa <HAL_TIM_ConfigClockSource+0x96>
 80061c2:	2b50      	cmp	r3, #80	; 0x50
 80061c4:	d03f      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0xe2>
 80061c6:	2b60      	cmp	r3, #96	; 0x60
 80061c8:	d1e6      	bne.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ca:	684d      	ldr	r5, [r1, #4]
 80061cc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ce:	6a01      	ldr	r1, [r0, #32]
 80061d0:	f021 0110 	bic.w	r1, r1, #16
 80061d4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80061d8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061da:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80061ea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80061ec:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80061ee:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061f4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80061f8:	e014      	b.n	8006224 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80061fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fe:	d00c      	beq.n	800621a <HAL_TIM_ConfigClockSource+0xb6>
 8006200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006204:	d1c8      	bne.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8006206:	68cb      	ldr	r3, [r1, #12]
 8006208:	684a      	ldr	r2, [r1, #4]
 800620a:	6889      	ldr	r1, [r1, #8]
 800620c:	f7ff ffa0 	bl	8006150 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	6893      	ldr	r3, [r2, #8]
 8006214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006218:	e013      	b.n	8006242 <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800621a:	6883      	ldr	r3, [r0, #8]
 800621c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006220:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006224:	6083      	str	r3, [r0, #8]
 8006226:	e7b7      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8006228:	68cb      	ldr	r3, [r1, #12]
 800622a:	684a      	ldr	r2, [r1, #4]
 800622c:	6889      	ldr	r1, [r1, #8]
 800622e:	f7ff ff8f 	bl	8006150 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800623e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006242:	6093      	str	r3, [r2, #8]
      break;
 8006244:	e7a8      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006246:	684a      	ldr	r2, [r1, #4]
 8006248:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800624a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624c:	6a05      	ldr	r5, [r0, #32]
 800624e:	f025 0501 	bic.w	r5, r5, #1
 8006252:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006254:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006256:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800625a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800625e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006262:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006264:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006266:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006268:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800626e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8006272:	e7d7      	b.n	8006224 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006274:	684a      	ldr	r2, [r1, #4]
 8006276:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006278:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627a:	6a05      	ldr	r5, [r0, #32]
 800627c:	f025 0501 	bic.w	r5, r5, #1
 8006280:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006282:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006284:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800628c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006290:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006292:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006294:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006296:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800629c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80062a0:	e7c0      	b.n	8006224 <HAL_TIM_ConfigClockSource+0xc0>
 80062a2:	bf00      	nop
 80062a4:	fffe0088 	.word	0xfffe0088

080062a8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062a8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062aa:	f001 011f 	and.w	r1, r1, #31
{
 80062ae:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062b0:	2401      	movs	r4, #1
 80062b2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80062b4:	ea23 0304 	bic.w	r3, r3, r4
 80062b8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062ba:	6a03      	ldr	r3, [r0, #32]
 80062bc:	408a      	lsls	r2, r1
 80062be:	431a      	orrs	r2, r3
 80062c0:	6202      	str	r2, [r0, #32]
 80062c2:	bd10      	pop	{r4, pc}

080062c4 <HAL_TIM_PWM_Start>:
{
 80062c4:	b510      	push	{r4, lr}
 80062c6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062c8:	2201      	movs	r2, #1
 80062ca:	6800      	ldr	r0, [r0, #0]
 80062cc:	f7ff ffec 	bl	80062a8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	4a14      	ldr	r2, [pc, #80]	; (8006324 <HAL_TIM_PWM_Start+0x60>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d01f      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
 80062d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062dc:	4293      	cmp	r3, r2
 80062de:	d01b      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
 80062e0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d017      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
 80062e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
 80062f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00f      	beq.n	8006318 <HAL_TIM_PWM_Start+0x54>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80062f8:	6899      	ldr	r1, [r3, #8]
 80062fa:	480b      	ldr	r0, [pc, #44]	; (8006328 <HAL_TIM_PWM_Start+0x64>)
 80062fc:	4001      	ands	r1, r0
 80062fe:	2906      	cmp	r1, #6
 8006300:	d008      	beq.n	8006314 <HAL_TIM_PWM_Start+0x50>
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	4002      	ands	r2, r0
 8006306:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800630a:	d003      	beq.n	8006314 <HAL_TIM_PWM_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
}
 8006314:	2000      	movs	r0, #0
 8006316:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8006318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800631a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800631e:	645a      	str	r2, [r3, #68]	; 0x44
 8006320:	e7ea      	b.n	80062f8 <HAL_TIM_PWM_Start+0x34>
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	00010007 	.word	0x00010007

0800632c <HAL_TIM_OC_Start>:
 800632c:	f7ff bfca 	b.w	80062c4 <HAL_TIM_PWM_Start>

08006330 <HAL_TIM_PWM_Stop>:
{
 8006330:	b510      	push	{r4, lr}
 8006332:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006334:	2200      	movs	r2, #0
 8006336:	6800      	ldr	r0, [r0, #0]
 8006338:	f7ff ffb6 	bl	80062a8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_TIM_PWM_Stop+0x78>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00f      	beq.n	8006364 <HAL_TIM_PWM_Stop+0x34>
 8006344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006348:	4293      	cmp	r3, r2
 800634a:	d00b      	beq.n	8006364 <HAL_TIM_PWM_Stop+0x34>
 800634c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006350:	4293      	cmp	r3, r2
 8006352:	d007      	beq.n	8006364 <HAL_TIM_PWM_Stop+0x34>
 8006354:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <HAL_TIM_PWM_Stop+0x34>
 800635c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006360:	4293      	cmp	r3, r2
 8006362:	d10d      	bne.n	8006380 <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 8006364:	6a19      	ldr	r1, [r3, #32]
 8006366:	f241 1211 	movw	r2, #4369	; 0x1111
 800636a:	4211      	tst	r1, r2
 800636c:	d108      	bne.n	8006380 <HAL_TIM_PWM_Stop+0x50>
 800636e:	6a19      	ldr	r1, [r3, #32]
 8006370:	f240 4244 	movw	r2, #1092	; 0x444
 8006374:	4211      	tst	r1, r2
 8006376:	bf02      	ittt	eq
 8006378:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800637a:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800637e:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8006380:	6a19      	ldr	r1, [r3, #32]
 8006382:	f241 1211 	movw	r2, #4369	; 0x1111
 8006386:	4211      	tst	r1, r2
 8006388:	d108      	bne.n	800639c <HAL_TIM_PWM_Stop+0x6c>
 800638a:	6a19      	ldr	r1, [r3, #32]
 800638c:	f240 4244 	movw	r2, #1092	; 0x444
 8006390:	4211      	tst	r1, r2
 8006392:	d103      	bne.n	800639c <HAL_TIM_PWM_Stop+0x6c>
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	f022 0201 	bic.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800639c:	2301      	movs	r3, #1
 800639e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80063a2:	2000      	movs	r0, #0
 80063a4:	bd10      	pop	{r4, pc}
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00

080063ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80063b0:	2b01      	cmp	r3, #1
{
 80063b2:	b530      	push	{r4, r5, lr}
 80063b4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80063b8:	d01f      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ba:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063bc:	4d10      	ldr	r5, [pc, #64]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80063be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063c2:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80063c4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80063c6:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063c8:	d003      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80063ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80063ce:	42aa      	cmp	r2, r5
 80063d0:	d103      	bne.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d8:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063da:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063dc:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063e2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80063e4:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063e8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ea:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 80063ee:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f4:	2300      	movs	r3, #0
 80063f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80063fa:	4618      	mov	r0, r3

  return HAL_OK;
}
 80063fc:	bd30      	pop	{r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00

08006404 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006404:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
{
 800640a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800640c:	d038      	beq.n	8006480 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800640e:	68cb      	ldr	r3, [r1, #12]
 8006410:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006412:	4c1c      	ldr	r4, [pc, #112]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006418:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800641a:	684a      	ldr	r2, [r1, #4]
 800641c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006420:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006422:	680a      	ldr	r2, [r1, #0]
 8006424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006428:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800642a:	690a      	ldr	r2, [r1, #16]
 800642c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006430:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006432:	694a      	ldr	r2, [r1, #20]
 8006434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006438:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800643a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800643c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006440:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006442:	698a      	ldr	r2, [r1, #24]
 8006444:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800644c:	6802      	ldr	r2, [r0, #0]
 800644e:	42a2      	cmp	r2, r4
 8006450:	d003      	beq.n	800645a <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8006452:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006456:	42a2      	cmp	r2, r4
 8006458:	d10c      	bne.n	8006474 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800645a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800645c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006460:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006464:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006466:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800646c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800646e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006472:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006474:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006476:	2300      	movs	r3, #0
 8006478:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800647c:	4618      	mov	r0, r3
 800647e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8006480:	2002      	movs	r0, #2
}
 8006482:	bd10      	pop	{r4, pc}
 8006484:	40012c00 	.word	0x40012c00

08006488 <HAL_TIMEx_CommutationCallback>:
 8006488:	4770      	bx	lr

0800648a <HAL_TIMEx_BreakCallback>:
 800648a:	4770      	bx	lr

0800648c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800648c:	4770      	bx	lr

0800648e <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800648e:	6803      	ldr	r3, [r0, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006496:	601a      	str	r2, [r3, #0]
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	f022 0201 	bic.w	r2, r2, #1
 800649e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a0:	2320      	movs	r3, #32
 80064a2:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	6703      	str	r3, [r0, #112]	; 0x70
 80064aa:	4770      	bx	lr

080064ac <UART_RxISR_16BIT>:
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064ac:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 80064b0:	2a22      	cmp	r2, #34	; 0x22
{
 80064b2:	b410      	push	{r4}
 80064b4:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064b6:	d11e      	bne.n	80064f6 <UART_RxISR_16BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064b8:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t*) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80064ba:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 80064be:	400c      	ands	r4, r1
 80064c0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80064c2:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr +=2;
 80064c6:	6581      	str	r1, [r0, #88]	; 0x58
    
    if(--huart->RxXferCount == 0)
 80064c8:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 80064cc:	3901      	subs	r1, #1
 80064ce:	b289      	uxth	r1, r1
 80064d0:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
 80064d4:	b9a1      	cbnz	r1, 8006500 <UART_RxISR_16BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064d6:	6814      	ldr	r4, [r2, #0]
 80064d8:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80064dc:	6014      	str	r4, [r2, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
      
      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064de:	6894      	ldr	r4, [r2, #8]
 80064e0:	f024 0401 	bic.w	r4, r4, #1
 80064e4:	6094      	str	r4, [r2, #8]
      
      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e6:	2220      	movs	r2, #32
 80064e8:	f880 2082 	strb.w	r2, [r0, #130]	; 0x82
      
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064ec:	6701      	str	r1, [r0, #112]	; 0x70
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064ee:	f85d 4b04 	ldr.w	r4, [sp], #4
      HAL_UART_RxCpltCallback(huart);
 80064f2:	f017 bca7 	b.w	801de44 <HAL_UART_RxCpltCallback>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064f6:	8b13      	ldrh	r3, [r2, #24]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f043 0308 	orr.w	r3, r3, #8
 80064fe:	8313      	strh	r3, [r2, #24]
}
 8006500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint8_t   nb_rx_data;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006508:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 800650c:	2b22      	cmp	r3, #34	; 0x22
{
 800650e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006512:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006514:	d142      	bne.n	800659c <UART_RxISR_8BIT_FIFOEN+0x94>
  uint16_t  uhMask = huart->Mask;
 8006516:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 800651a:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
        
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800651e:	4f23      	ldr	r7, [pc, #140]	; (80065ac <UART_RxISR_8BIT_FIFOEN+0xa4>)
        
        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006520:	f04f 0820 	mov.w	r8, #32
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006524:	b9c5      	cbnz	r5, 8006558 <UART_RxISR_8BIT_FIFOEN+0x50>
    
    /* When remaining number of bytes to receive is less than the RX FIFO 
    threshold, next incoming frames are processed as if FIFO mode was 
    disabled (i.e. one interrupt per received frame).
    */
    if (((huart->RxXferCount != 0U)) && (huart->RxXferCount < huart->NbRxDataToProcess))
 8006526:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d03b      	beq.n	80065a8 <UART_RxISR_8BIT_FIFOEN+0xa0>
 8006530:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006534:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006538:	b29b      	uxth	r3, r3
 800653a:	429a      	cmp	r2, r3
 800653c:	d934      	bls.n	80065a8 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006546:	609a      	str	r2, [r3, #8]
      
      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006548:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 800654a:	6722      	str	r2, [r4, #112]	; 0x70
      
      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	f042 0220 	orr.w	r2, r2, #32
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006558:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800655a:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800655c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800655e:	1c51      	adds	r1, r2, #1
 8006560:	4033      	ands	r3, r6
 8006562:	65a1      	str	r1, [r4, #88]	; 0x58
 8006564:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8006566:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800656a:	3b01      	subs	r3, #1
 800656c:	b29b      	uxth	r3, r3
 800656e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if(huart->RxXferCount == 0U)
 8006572:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006576:	b29b      	uxth	r3, r3
 8006578:	b96b      	cbnz	r3, 8006596 <UART_RxISR_8BIT_FIFOEN+0x8e>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	6811      	ldr	r1, [r2, #0]
 800657e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006582:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006584:	6891      	ldr	r1, [r2, #8]
 8006586:	4039      	ands	r1, r7
 8006588:	6091      	str	r1, [r2, #8]
        HAL_UART_RxCpltCallback(huart);
 800658a:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800658c:	f884 8082 	strb.w	r8, [r4, #130]	; 0x82
        huart->RxISR = NULL;
 8006590:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UART_RxCpltCallback(huart);
 8006592:	f017 fc57 	bl	801de44 <HAL_UART_RxCpltCallback>
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006596:	3d01      	subs	r5, #1
 8006598:	b2ed      	uxtb	r5, r5
 800659a:	e7c3      	b.n	8006524 <UART_RxISR_8BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800659c:	6802      	ldr	r2, [r0, #0]
 800659e:	8b13      	ldrh	r3, [r2, #24]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f043 0308 	orr.w	r3, r3, #8
 80065a6:	8313      	strh	r3, [r2, #24]
 80065a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ac:	effffffe 	.word	0xeffffffe
 80065b0:	080065b5 	.word	0x080065b5

080065b4 <UART_RxISR_8BIT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065b4:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 80065b8:	2a22      	cmp	r2, #34	; 0x22
{
 80065ba:	b430      	push	{r4, r5}
 80065bc:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065be:	d11e      	bne.n	80065fe <UART_RxISR_8BIT+0x4a>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065c0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065c2:	6d84      	ldr	r4, [r0, #88]	; 0x58
  uint16_t uhMask = huart->Mask;
 80065c4:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065c8:	1c65      	adds	r5, r4, #1
 80065ca:	400a      	ands	r2, r1
 80065cc:	6585      	str	r5, [r0, #88]	; 0x58
 80065ce:	7022      	strb	r2, [r4, #0]
    if(--huart->RxXferCount == 0)
 80065d0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80065d4:	3a01      	subs	r2, #1
 80065d6:	b292      	uxth	r2, r2
 80065d8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
 80065dc:	b9a2      	cbnz	r2, 8006608 <UART_RxISR_8BIT+0x54>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065de:	6801      	ldr	r1, [r0, #0]
 80065e0:	680c      	ldr	r4, [r1, #0]
 80065e2:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80065e6:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e8:	688c      	ldr	r4, [r1, #8]
 80065ea:	f024 0401 	bic.w	r4, r4, #1
 80065ee:	608c      	str	r4, [r1, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80065f0:	2120      	movs	r1, #32
 80065f2:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
      huart->RxISR = NULL;
 80065f6:	6702      	str	r2, [r0, #112]	; 0x70
}
 80065f8:	bc30      	pop	{r4, r5}
      HAL_UART_RxCpltCallback(huart);
 80065fa:	f017 bc23 	b.w	801de44 <HAL_UART_RxCpltCallback>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065fe:	8b13      	ldrh	r3, [r2, #24]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f043 0308 	orr.w	r3, r3, #8
 8006606:	8313      	strh	r3, [r2, #24]
}
 8006608:	bc30      	pop	{r4, r5}
 800660a:	4770      	bx	lr

0800660c <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint8_t   nb_rx_data;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800660c:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 8006610:	2b22      	cmp	r3, #34	; 0x22
{
 8006612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006616:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006618:	d141      	bne.n	800669e <UART_RxISR_16BIT_FIFOEN+0x92>
  uint16_t  uhMask = huart->Mask;
 800661a:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 800661e:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
        
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006622:	4f23      	ldr	r7, [pc, #140]	; (80066b0 <UART_RxISR_16BIT_FIFOEN+0xa4>)
        
        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006624:	f04f 0820 	mov.w	r8, #32
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006628:	b9c5      	cbnz	r5, 800665c <UART_RxISR_16BIT_FIFOEN+0x50>
    
    /* When remaining number of bytes to receive is less than the RX FIFO 
    threshold, next incoming frames are processed as if FIFO mode was 
    disabled (i.e. one interrupt per received frame).
    */
    if (((huart->RxXferCount != 0U)) && (huart->RxXferCount < huart->NbRxDataToProcess))
 800662a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d03a      	beq.n	80066aa <UART_RxISR_16BIT_FIFOEN+0x9e>
 8006634:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006638:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800663c:	b29b      	uxth	r3, r3
 800663e:	429a      	cmp	r2, r3
 8006640:	d933      	bls.n	80066aa <UART_RxISR_16BIT_FIFOEN+0x9e>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800664a:	609a      	str	r2, [r3, #8]
      
      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800664c:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <UART_RxISR_16BIT_FIFOEN+0xa8>)
 800664e:	6722      	str	r2, [r4, #112]	; 0x70
      
      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	f042 0220 	orr.w	r2, r2, #32
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800665c:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800665e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006660:	8c99      	ldrh	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8006662:	4031      	ands	r1, r6
 8006664:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr +=2;
 8006668:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800666a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800666e:	3a01      	subs	r2, #1
 8006670:	b292      	uxth	r2, r2
 8006672:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if(huart->RxXferCount == 0U)
 8006676:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800667a:	b292      	uxth	r2, r2
 800667c:	b962      	cbnz	r2, 8006698 <UART_RxISR_16BIT_FIFOEN+0x8c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006684:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006686:	6899      	ldr	r1, [r3, #8]
 8006688:	4039      	ands	r1, r7
 800668a:	6099      	str	r1, [r3, #8]
        HAL_UART_RxCpltCallback(huart);
 800668c:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800668e:	f884 8082 	strb.w	r8, [r4, #130]	; 0x82
        huart->RxISR = NULL;
 8006692:	6722      	str	r2, [r4, #112]	; 0x70
        HAL_UART_RxCpltCallback(huart);
 8006694:	f017 fbd6 	bl	801de44 <HAL_UART_RxCpltCallback>
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006698:	3d01      	subs	r5, #1
 800669a:	b2ed      	uxtb	r5, r5
 800669c:	e7c4      	b.n	8006628 <UART_RxISR_16BIT_FIFOEN+0x1c>
    }   
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800669e:	6802      	ldr	r2, [r0, #0]
 80066a0:	8b13      	ldrh	r3, [r2, #24]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f043 0308 	orr.w	r3, r3, #8
 80066a8:	8313      	strh	r3, [r2, #24]
 80066aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ae:	bf00      	nop
 80066b0:	effffffe 	.word	0xeffffffe
 80066b4:	080064ad 	.word	0x080064ad

080066b8 <HAL_UART_DeInit>:
{
 80066b8:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 80066ba:	4605      	mov	r5, r0
 80066bc:	b1b8      	cbz	r0, 80066ee <HAL_UART_DeInit+0x36>
  huart->gState = HAL_UART_STATE_BUSY;
 80066be:	2324      	movs	r3, #36	; 0x24
 80066c0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 80066c4:	6803      	ldr	r3, [r0, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 80066c8:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 80066ca:	f022 0201 	bic.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 80066d0:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80066d2:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80066d4:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80066d6:	f019 fab7 	bl	801fc48 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066da:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80066de:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80066e2:	f885 4081 	strb.w	r4, [r5, #129]	; 0x81
  return HAL_OK;
 80066e6:	4620      	mov	r0, r4
  huart->RxState = HAL_UART_STATE_RESET;
 80066e8:	f885 4082 	strb.w	r4, [r5, #130]	; 0x82
  return HAL_OK;
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80066ee:	2001      	movs	r0, #1
}
 80066f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080066f4 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80066f4:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 80066f8:	2b20      	cmp	r3, #32
{
 80066fa:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 80066fc:	d167      	bne.n	80067ce <HAL_UART_Receive_IT+0xda>
    if((pData == NULL ) || (Size == 0U))
 80066fe:	2900      	cmp	r1, #0
 8006700:	d063      	beq.n	80067ca <HAL_UART_Receive_IT+0xd6>
 8006702:	2a00      	cmp	r2, #0
 8006704:	d061      	beq.n	80067ca <HAL_UART_Receive_IT+0xd6>
    __HAL_LOCK(huart);
 8006706:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800670a:	2b01      	cmp	r3, #1
 800670c:	d05f      	beq.n	80067ce <HAL_UART_Receive_IT+0xda>
 800670e:	2301      	movs	r3, #1
 8006710:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->RxISR       = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	6703      	str	r3, [r0, #112]	; 0x70
    UART_MASK_COMPUTATION(huart);
 8006718:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 800671a:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800671c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8006720:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006724:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8006728:	d12e      	bne.n	8006788 <HAL_UART_Receive_IT+0x94>
 800672a:	6901      	ldr	r1, [r0, #16]
 800672c:	bb51      	cbnz	r1, 8006784 <HAL_UART_Receive_IT+0x90>
 800672e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006732:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006736:	2100      	movs	r1, #0
 8006738:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800673c:	2122      	movs	r1, #34	; 0x22
 800673e:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006742:	6801      	ldr	r1, [r0, #0]
 8006744:	688c      	ldr	r4, [r1, #8]
 8006746:	f044 0401 	orr.w	r4, r4, #1
 800674a:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800674c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800674e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8006752:	d129      	bne.n	80067a8 <HAL_UART_Receive_IT+0xb4>
 8006754:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 8006758:	4294      	cmp	r4, r2
 800675a:	d825      	bhi.n	80067a8 <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d120      	bne.n	80067a4 <HAL_UART_Receive_IT+0xb0>
 8006762:	6903      	ldr	r3, [r0, #16]
 8006764:	b9f3      	cbnz	r3, 80067a4 <HAL_UART_Receive_IT+0xb0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006766:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006768:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800676a:	6703      	str	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800676c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8006770:	2300      	movs	r3, #0
 8006772:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006776:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006778:	688a      	ldr	r2, [r1, #8]
 800677a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800677e:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 8006780:	4618      	mov	r0, r3
 8006782:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8006784:	21ff      	movs	r1, #255	; 0xff
 8006786:	e7d4      	b.n	8006732 <HAL_UART_Receive_IT+0x3e>
 8006788:	b923      	cbnz	r3, 8006794 <HAL_UART_Receive_IT+0xa0>
 800678a:	6901      	ldr	r1, [r0, #16]
 800678c:	2900      	cmp	r1, #0
 800678e:	d0f9      	beq.n	8006784 <HAL_UART_Receive_IT+0x90>
 8006790:	217f      	movs	r1, #127	; 0x7f
 8006792:	e7ce      	b.n	8006732 <HAL_UART_Receive_IT+0x3e>
 8006794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006798:	d1cd      	bne.n	8006736 <HAL_UART_Receive_IT+0x42>
 800679a:	6901      	ldr	r1, [r0, #16]
 800679c:	2900      	cmp	r1, #0
 800679e:	d0f7      	beq.n	8006790 <HAL_UART_Receive_IT+0x9c>
 80067a0:	213f      	movs	r1, #63	; 0x3f
 80067a2:	e7c6      	b.n	8006732 <HAL_UART_Receive_IT+0x3e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80067a4:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <HAL_UART_Receive_IT+0xe4>)
 80067a6:	e7df      	b.n	8006768 <HAL_UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ac:	d10b      	bne.n	80067c6 <HAL_UART_Receive_IT+0xd2>
 80067ae:	6903      	ldr	r3, [r0, #16]
 80067b0:	b94b      	cbnz	r3, 80067c6 <HAL_UART_Receive_IT+0xd2>
        huart->RxISR = UART_RxISR_16BIT;
 80067b2:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80067b4:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 80067b6:	6703      	str	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80067b8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 80067bc:	2300      	movs	r3, #0
 80067be:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80067c2:	600a      	str	r2, [r1, #0]
 80067c4:	e7dc      	b.n	8006780 <HAL_UART_Receive_IT+0x8c>
        huart->RxISR = UART_RxISR_8BIT;
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_UART_Receive_IT+0xec>)
 80067c8:	e7f4      	b.n	80067b4 <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 80067ca:	2001      	movs	r0, #1
 80067cc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80067ce:	2002      	movs	r0, #2
}
 80067d0:	bd10      	pop	{r4, pc}
 80067d2:	bf00      	nop
 80067d4:	0800660d 	.word	0x0800660d
 80067d8:	08006509 	.word	0x08006509
 80067dc:	080064ad 	.word	0x080064ad
 80067e0:	080065b5 	.word	0x080065b5

080067e4 <HAL_UART_Transmit_DMA>:
{
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4604      	mov	r4, r0
 80067e8:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80067ea:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 80067ee:	2a20      	cmp	r2, #32
 80067f0:	d12c      	bne.n	800684c <HAL_UART_Transmit_DMA+0x68>
    if((pData == NULL ) || (Size == 0U))
 80067f2:	b349      	cbz	r1, 8006848 <HAL_UART_Transmit_DMA+0x64>
 80067f4:	b343      	cbz	r3, 8006848 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 80067f6:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 80067fa:	2a01      	cmp	r2, #1
 80067fc:	d026      	beq.n	800684c <HAL_UART_Transmit_DMA+0x68>
 80067fe:	2201      	movs	r2, #1
 8006800:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006804:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 8006806:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800680c:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006812:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006816:	4a0e      	ldr	r2, [pc, #56]	; (8006850 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 8006818:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->pTxBuffPtr  = pData;
 800681c:	6521      	str	r1, [r4, #80]	; 0x50
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800681e:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006820:	4a0c      	ldr	r2, [pc, #48]	; (8006854 <HAL_UART_Transmit_DMA+0x70>)
 8006822:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006824:	4a0c      	ldr	r2, [pc, #48]	; (8006858 <HAL_UART_Transmit_DMA+0x74>)
 8006826:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8006828:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 800682a:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800682c:	3228      	adds	r2, #40	; 0x28
 800682e:	f7fb f954 	bl	8001ada <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	2240      	movs	r2, #64	; 0x40
 8006836:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006838:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800683a:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800683e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006842:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8006844:	4628      	mov	r0, r5
 8006846:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006848:	2001      	movs	r0, #1
 800684a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800684c:	2002      	movs	r0, #2
}
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	0800685f 	.word	0x0800685f
 8006854:	0800688f 	.word	0x0800688f
 8006858:	0800689b 	.word	0x0800689b

0800685c <HAL_UART_TxCpltCallback>:
 800685c:	4770      	bx	lr

0800685e <UART_DMATransmitCplt>:
{
 800685e:	b508      	push	{r3, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006860:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006862:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f013 0320 	ands.w	r3, r3, #32
 800686a:	d10b      	bne.n	8006884 <UART_DMATransmitCplt+0x26>
    huart->TxXferCount = 0U;
 800686c:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006870:	6813      	ldr	r3, [r2, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006878:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006884:	4610      	mov	r0, r2
 8006886:	f7ff ffe9 	bl	800685c <HAL_UART_TxCpltCallback>
 800688a:	bd08      	pop	{r3, pc}

0800688c <HAL_UART_TxHalfCpltCallback>:
 800688c:	4770      	bx	lr

0800688e <UART_DMATxHalfCplt>:
{
 800688e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006890:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006892:	f7ff fffb 	bl	800688c <HAL_UART_TxHalfCpltCallback>
 8006896:	bd08      	pop	{r3, pc}

08006898 <HAL_UART_ErrorCallback>:
 8006898:	4770      	bx	lr

0800689a <UART_DMAError>:
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800689a:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 800689c:	b508      	push	{r3, lr}
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800689e:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
 80068a2:	2b21      	cmp	r3, #33	; 0x21
 80068a4:	d10d      	bne.n	80068c2 <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80068a6:	680b      	ldr	r3, [r1, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	0612      	lsls	r2, r2, #24
 80068ac:	d509      	bpl.n	80068c2 <UART_DMAError+0x28>
    huart->TxXferCount = 0U;
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80068ba:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80068bc:	2320      	movs	r3, #32
 80068be:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068c2:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 80068c6:	2b22      	cmp	r3, #34	; 0x22
 80068c8:	d109      	bne.n	80068de <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80068ca:	680b      	ldr	r3, [r1, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	065b      	lsls	r3, r3, #25
 80068d0:	d505      	bpl.n	80068de <UART_DMAError+0x44>
    huart->RxXferCount = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80068d8:	4608      	mov	r0, r1
 80068da:	f7ff fdd8 	bl	800648e <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068de:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80068e2:	f043 0310 	orr.w	r3, r3, #16
 80068e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  HAL_UART_ErrorCallback(huart);
 80068ea:	4608      	mov	r0, r1
 80068ec:	f7ff ffd4 	bl	8006898 <HAL_UART_ErrorCallback>
 80068f0:	bd08      	pop	{r3, pc}
	...

080068f4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068f4:	6802      	ldr	r2, [r0, #0]
 80068f6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068f8:	6811      	ldr	r1, [r2, #0]
{
 80068fa:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80068fc:	071d      	lsls	r5, r3, #28
{
 80068fe:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006900:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 8006902:	d10b      	bne.n	800691c <HAL_UART_IRQHandler+0x28>
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006904:	069e      	lsls	r6, r3, #26
 8006906:	d577      	bpl.n	80069f8 <HAL_UART_IRQHandler+0x104>
       && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006908:	068d      	lsls	r5, r1, #26
 800690a:	d401      	bmi.n	8006910 <HAL_UART_IRQHandler+0x1c>
           || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800690c:	00c6      	lsls	r6, r0, #3
 800690e:	d573      	bpl.n	80069f8 <HAL_UART_IRQHandler+0x104>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8006910:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 80ac 	beq.w	8006a70 <HAL_UART_IRQHandler+0x17c>
 8006918:	4620      	mov	r0, r4
 800691a:	e061      	b.n	80069e0 <HAL_UART_IRQHandler+0xec>
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 800691c:	4e55      	ldr	r6, [pc, #340]	; (8006a74 <HAL_UART_IRQHandler+0x180>)
 800691e:	4006      	ands	r6, r0
 8006920:	d102      	bne.n	8006928 <HAL_UART_IRQHandler+0x34>
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
 8006922:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006926:	d067      	beq.n	80069f8 <HAL_UART_IRQHandler+0x104>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006928:	07dd      	lsls	r5, r3, #31
 800692a:	d509      	bpl.n	8006940 <HAL_UART_IRQHandler+0x4c>
 800692c:	05cd      	lsls	r5, r1, #23
 800692e:	d507      	bpl.n	8006940 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006930:	2501      	movs	r5, #1
 8006932:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006934:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006938:	f045 0501 	orr.w	r5, r5, #1
 800693c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006940:	079d      	lsls	r5, r3, #30
 8006942:	d509      	bpl.n	8006958 <HAL_UART_IRQHandler+0x64>
 8006944:	07c5      	lsls	r5, r0, #31
 8006946:	d507      	bpl.n	8006958 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006948:	2502      	movs	r5, #2
 800694a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800694c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006950:	f045 0504 	orr.w	r5, r5, #4
 8006954:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006958:	075d      	lsls	r5, r3, #29
 800695a:	d509      	bpl.n	8006970 <HAL_UART_IRQHandler+0x7c>
 800695c:	07c5      	lsls	r5, r0, #31
 800695e:	d507      	bpl.n	8006970 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006960:	2504      	movs	r5, #4
 8006962:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006964:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006968:	f045 0502 	orr.w	r5, r5, #2
 800696c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8006970:	071d      	lsls	r5, r3, #28
 8006972:	d509      	bpl.n	8006988 <HAL_UART_IRQHandler+0x94>
       &&(  ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 8006974:	068d      	lsls	r5, r1, #26
 8006976:	d400      	bmi.n	800697a <HAL_UART_IRQHandler+0x86>
 8006978:	b136      	cbz	r6, 8006988 <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800697a:	2508      	movs	r5, #8
 800697c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800697e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006982:	432a      	orrs	r2, r5
 8006984:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006988:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800698c:	2a00      	cmp	r2, #0
 800698e:	d06f      	beq.n	8006a70 <HAL_UART_IRQHandler+0x17c>
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006990:	069e      	lsls	r6, r3, #26
 8006992:	d507      	bpl.n	80069a4 <HAL_UART_IRQHandler+0xb0>
         && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006994:	068d      	lsls	r5, r1, #26
 8006996:	d401      	bmi.n	800699c <HAL_UART_IRQHandler+0xa8>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8006998:	00c0      	lsls	r0, r0, #3
 800699a:	d503      	bpl.n	80069a4 <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 800699c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800699e:	b10b      	cbz	r3, 80069a4 <HAL_UART_IRQHandler+0xb0>
 80069a0:	4620      	mov	r0, r4
 80069a2:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80069a4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80069a8:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 80069aa:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80069ac:	d404      	bmi.n	80069b8 <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80069b2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80069b6:	d01a      	beq.n	80069ee <HAL_UART_IRQHandler+0xfa>
        UART_EndRxTransfer(huart);
 80069b8:	f7ff fd69 	bl	800648e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	0652      	lsls	r2, r2, #25
 80069c2:	d510      	bpl.n	80069e6 <HAL_UART_IRQHandler+0xf2>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c4:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80069c6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069cc:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80069ce:	b150      	cbz	r0, 80069e6 <HAL_UART_IRQHandler+0xf2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069d0:	4b29      	ldr	r3, [pc, #164]	; (8006a78 <HAL_UART_IRQHandler+0x184>)
 80069d2:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069d4:	f7fb f8c3 	bl	8001b5e <HAL_DMA_Abort_IT>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d049      	beq.n	8006a70 <HAL_UART_IRQHandler+0x17c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069dc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80069de:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 80069e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069e4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7ff ff56 	bl	8006898 <HAL_UART_ErrorCallback>
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80069ee:	f7ff ff53 	bl	8006898 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80069f8:	02de      	lsls	r6, r3, #11
 80069fa:	d50e      	bpl.n	8006a1a <HAL_UART_IRQHandler+0x126>
 80069fc:	0245      	lsls	r5, r0, #9
 80069fe:	d50c      	bpl.n	8006a1a <HAL_UART_IRQHandler+0x126>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a04:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8006a06:	2320      	movs	r3, #32
 8006a08:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_UARTEx_WakeupCallback(huart);
 8006a0c:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8006a0e:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
}
 8006a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006a16:	f000 bbbb 	b.w	8007190 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET) 
 8006a1a:	061e      	lsls	r6, r3, #24
 8006a1c:	d505      	bpl.n	8006a2a <HAL_UART_IRQHandler+0x136>
     && (   ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 8006a1e:	060d      	lsls	r5, r1, #24
 8006a20:	d401      	bmi.n	8006a26 <HAL_UART_IRQHandler+0x132>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8006a22:	0200      	lsls	r0, r0, #8
 8006a24:	d501      	bpl.n	8006a2a <HAL_UART_IRQHandler+0x136>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8006a26:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006a28:	e773      	b.n	8006912 <HAL_UART_IRQHandler+0x1e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a2a:	065e      	lsls	r6, r3, #25
 8006a2c:	d50e      	bpl.n	8006a4c <HAL_UART_IRQHandler+0x158>
 8006a2e:	064d      	lsls	r5, r1, #25
 8006a30:	d50c      	bpl.n	8006a4c <HAL_UART_IRQHandler+0x158>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a38:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006a3a:	2320      	movs	r3, #32
 8006a3c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  huart->TxISR = NULL;
 8006a40:	2300      	movs	r3, #0
 8006a42:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8006a44:	4620      	mov	r0, r4
 8006a46:	f7ff ff09 	bl	800685c <HAL_UART_TxCpltCallback>
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8006a4c:	0218      	lsls	r0, r3, #8
 8006a4e:	d506      	bpl.n	8006a5e <HAL_UART_IRQHandler+0x16a>
 8006a50:	004a      	lsls	r2, r1, #1
 8006a52:	d504      	bpl.n	8006a5e <HAL_UART_IRQHandler+0x16a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a54:	4620      	mov	r0, r4
}
 8006a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a5a:	f000 bb9b 	b.w	8007194 <HAL_UARTEx_TxFifoEmptyCallback>
  if(((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 8006a5e:	01db      	lsls	r3, r3, #7
 8006a60:	d506      	bpl.n	8006a70 <HAL_UART_IRQHandler+0x17c>
 8006a62:	2900      	cmp	r1, #0
 8006a64:	da04      	bge.n	8006a70 <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a66:	4620      	mov	r0, r4
}
 8006a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a6c:	f000 bb91 	b.w	8007192 <HAL_UARTEx_RxFifoFullCallback>
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	bf00      	nop
 8006a74:	10000001 	.word	0x10000001
 8006a78:	08006a7d 	.word	0x08006a7d

08006a7c <UART_DMAAbortOnError>:
{
 8006a7c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006a7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006a86:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006a8a:	f7ff ff05 	bl	8006898 <HAL_UART_ErrorCallback>
 8006a8e:	bd08      	pop	{r3, pc}

08006a90 <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a90:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a92:	69c1      	ldr	r1, [r0, #28]
 8006a94:	6882      	ldr	r2, [r0, #8]
{
 8006a96:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006a9a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a9c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a9e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aa0:	4302      	orrs	r2, r0
 8006aa2:	6960      	ldr	r0, [r4, #20]
 8006aa4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aa6:	48bd      	ldr	r0, [pc, #756]	; (8006d9c <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aa8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aaa:	4028      	ands	r0, r5
 8006aac:	4302      	orrs	r2, r0
 8006aae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	68e0      	ldr	r0, [r4, #12]
 8006ab4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006ab8:	4302      	orrs	r2, r0
 8006aba:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006abc:	4ab8      	ldr	r2, [pc, #736]	; (8006da0 <UART_SetConfig+0x310>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006abe:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ac0:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8006ac2:	bf1c      	itt	ne
 8006ac4:	6a22      	ldrne	r2, [r4, #32]
 8006ac6:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006ace:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006ad2:	4302      	orrs	r2, r0
 8006ad4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ad6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ad8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ada:	f020 000f 	bic.w	r0, r0, #15
 8006ade:	4310      	orrs	r0, r2
 8006ae0:	62d8      	str	r0, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ae2:	48b0      	ldr	r0, [pc, #704]	; (8006da4 <UART_SetConfig+0x314>)
 8006ae4:	4283      	cmp	r3, r0
 8006ae6:	d117      	bne.n	8006b18 <UART_SetConfig+0x88>
 8006ae8:	4baf      	ldr	r3, [pc, #700]	; (8006da8 <UART_SetConfig+0x318>)
 8006aea:	48b0      	ldr	r0, [pc, #704]	; (8006dac <UART_SetConfig+0x31c>)
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	5cc3      	ldrb	r3, [r0, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006af6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006afa:	f040 81a7 	bne.w	8006e4c <UART_SetConfig+0x3bc>
    switch (clocksource)
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d849      	bhi.n	8006b96 <UART_SetConfig+0x106>
 8006b02:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006b06:	017f      	.short	0x017f
 8006b08:	016800d0 	.word	0x016800d0
 8006b0c:	01780048 	.word	0x01780048
 8006b10:	00480048 	.word	0x00480048
 8006b14:	002d0048 	.word	0x002d0048
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b18:	48a5      	ldr	r0, [pc, #660]	; (8006db0 <UART_SetConfig+0x320>)
 8006b1a:	4283      	cmp	r3, r0
 8006b1c:	d106      	bne.n	8006b2c <UART_SetConfig+0x9c>
 8006b1e:	4ba2      	ldr	r3, [pc, #648]	; (8006da8 <UART_SetConfig+0x318>)
 8006b20:	48a4      	ldr	r0, [pc, #656]	; (8006db4 <UART_SetConfig+0x324>)
 8006b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b26:	f003 030c 	and.w	r3, r3, #12
 8006b2a:	e7e3      	b.n	8006af4 <UART_SetConfig+0x64>
 8006b2c:	48a2      	ldr	r0, [pc, #648]	; (8006db8 <UART_SetConfig+0x328>)
 8006b2e:	4283      	cmp	r3, r0
 8006b30:	d11d      	bne.n	8006b6e <UART_SetConfig+0xde>
 8006b32:	4b9d      	ldr	r3, [pc, #628]	; (8006da8 <UART_SetConfig+0x318>)
 8006b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	f000 8157 	beq.w	8006df0 <UART_SetConfig+0x360>
 8006b42:	d804      	bhi.n	8006b4e <UART_SetConfig+0xbe>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8159 	beq.w	8006dfc <UART_SetConfig+0x36c>
 8006b4a:	2310      	movs	r3, #16
 8006b4c:	e7d3      	b.n	8006af6 <UART_SetConfig+0x66>
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	f000 813e 	beq.w	8006dd0 <UART_SetConfig+0x340>
 8006b54:	2b30      	cmp	r3, #48	; 0x30
 8006b56:	d1f8      	bne.n	8006b4a <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b58:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006b5c:	f040 80d0 	bne.w	8006d00 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b60:	4b96      	ldr	r3, [pc, #600]	; (8006dbc <UART_SetConfig+0x32c>)
 8006b62:	6861      	ldr	r1, [r4, #4]
 8006b64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006b6c:	e138      	b.n	8006de0 <UART_SetConfig+0x350>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b6e:	4894      	ldr	r0, [pc, #592]	; (8006dc0 <UART_SetConfig+0x330>)
 8006b70:	4283      	cmp	r3, r0
 8006b72:	d12d      	bne.n	8006bd0 <UART_SetConfig+0x140>
 8006b74:	f500 30e2 	add.w	r0, r0, #115712	; 0x1c400
 8006b78:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006b7c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8006b80:	2840      	cmp	r0, #64	; 0x40
 8006b82:	f000 80fd 	beq.w	8006d80 <UART_SetConfig+0x2f0>
 8006b86:	d812      	bhi.n	8006bae <UART_SetConfig+0x11e>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f000 80c0 	beq.w	8006d0e <UART_SetConfig+0x27e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006b8e:	4884      	ldr	r0, [pc, #528]	; (8006da0 <UART_SetConfig+0x310>)
 8006b90:	4283      	cmp	r3, r0
 8006b92:	f040 8156 	bne.w	8006e42 <UART_SetConfig+0x3b2>
      ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
  huart->NbTxDataToProcess = 1;
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  huart->NbRxDataToProcess = 1;
 8006b9e:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  huart->RxISR = NULL;
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	6722      	str	r2, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006ba6:	6762      	str	r2, [r4, #116]	; 0x74
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bae:	2880      	cmp	r0, #128	; 0x80
 8006bb0:	f000 80bb 	beq.w	8006d2a <UART_SetConfig+0x29a>
 8006bb4:	28c0      	cmp	r0, #192	; 0xc0
 8006bb6:	d1ea      	bne.n	8006b8e <UART_SetConfig+0xfe>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006bb8:	4879      	ldr	r0, [pc, #484]	; (8006da0 <UART_SetConfig+0x310>)
 8006bba:	4283      	cmp	r3, r0
 8006bbc:	d1cc      	bne.n	8006b58 <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bbe:	4b7f      	ldr	r3, [pc, #508]	; (8006dbc <UART_SetConfig+0x32c>)
 8006bc0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      break;
 8006bc8:	2208      	movs	r2, #8
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bca:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8006bce:	e0aa      	b.n	8006d26 <UART_SetConfig+0x296>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bd0:	487c      	ldr	r0, [pc, #496]	; (8006dc4 <UART_SetConfig+0x334>)
 8006bd2:	4283      	cmp	r3, r0
 8006bd4:	d111      	bne.n	8006bfa <UART_SetConfig+0x16a>
 8006bd6:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
 8006bda:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006bde:	f400 7040 	and.w	r0, r0, #768	; 0x300
 8006be2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006be6:	f000 80cb 	beq.w	8006d80 <UART_SetConfig+0x2f0>
 8006bea:	d9cd      	bls.n	8006b88 <UART_SetConfig+0xf8>
 8006bec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006bf0:	f000 809b 	beq.w	8006d2a <UART_SetConfig+0x29a>
 8006bf4:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8006bf8:	e7dd      	b.n	8006bb6 <UART_SetConfig+0x126>
 8006bfa:	4869      	ldr	r0, [pc, #420]	; (8006da0 <UART_SetConfig+0x310>)
 8006bfc:	4283      	cmp	r3, r0
 8006bfe:	d1a4      	bne.n	8006b4a <UART_SetConfig+0xba>
 8006c00:	f500 30c8 	add.w	r0, r0, #102400	; 0x19000
 8006c04:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006c08:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 8006c0c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006c10:	f000 80b6 	beq.w	8006d80 <UART_SetConfig+0x2f0>
 8006c14:	d9b8      	bls.n	8006b88 <UART_SetConfig+0xf8>
 8006c16:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006c1a:	f000 8086 	beq.w	8006d2a <UART_SetConfig+0x29a>
 8006c1e:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8006c22:	e7c8      	b.n	8006bb6 <UART_SetConfig+0x126>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c24:	f7fd fc2c 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c28:	4b64      	ldr	r3, [pc, #400]	; (8006dbc <UART_SetConfig+0x32c>)
 8006c2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c2c:	6865      	ldr	r5, [r4, #4]
 8006c2e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006c32:	2300      	movs	r3, #0
 8006c34:	e005      	b.n	8006c42 <UART_SetConfig+0x1b2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c36:	4b61      	ldr	r3, [pc, #388]	; (8006dbc <UART_SetConfig+0x32c>)
 8006c38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c3a:	4863      	ldr	r0, [pc, #396]	; (8006dc8 <UART_SetConfig+0x338>)
 8006c3c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006c40:	2300      	movs	r3, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c42:	2100      	movs	r1, #0
 8006c44:	f7fa f834 	bl	8000cb0 <__aeabi_uldivmod>
 8006c48:	020f      	lsls	r7, r1, #8
 8006c4a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006c4e:	0206      	lsls	r6, r0, #8
 8006c50:	0868      	lsrs	r0, r5, #1
 8006c52:	eb16 0b00 	adds.w	fp, r6, r0
 8006c56:	f147 0c00 	adc.w	ip, r7, #0
 8006c5a:	462a      	mov	r2, r5
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4658      	mov	r0, fp
 8006c60:	4661      	mov	r1, ip
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c62:	f7fa f825 	bl	8000cb0 <__aeabi_uldivmod>
          break;
 8006c66:	2300      	movs	r3, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c68:	4a58      	ldr	r2, [pc, #352]	; (8006dcc <UART_SetConfig+0x33c>)
 8006c6a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006c6e:	4291      	cmp	r1, r2
 8006c70:	d891      	bhi.n	8006b96 <UART_SetConfig+0x106>
          huart->Instance->BRR = usartdiv;
 8006c72:	6822      	ldr	r2, [r4, #0]
 8006c74:	60d0      	str	r0, [r2, #12]
 8006c76:	e78f      	b.n	8006b98 <UART_SetConfig+0x108>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c78:	f7fd f862 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8006c7c:	e7d4      	b.n	8006c28 <UART_SetConfig+0x198>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c80:	4b4e      	ldr	r3, [pc, #312]	; (8006dbc <UART_SetConfig+0x32c>)
 8006c82:	0868      	lsrs	r0, r5, #1
 8006c84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c88:	2100      	movs	r1, #0
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006c90:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8006c94:	fbb6 f6f3 	udiv	r6, r6, r3
 8006c98:	2300      	movs	r3, #0
 8006c9a:	fbe6 0105 	umlal	r0, r1, r6, r5
 8006c9e:	e7e0      	b.n	8006c62 <UART_SetConfig+0x1d2>
          ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e7e0      	b.n	8006c68 <UART_SetConfig+0x1d8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca6:	f7fd fbfd 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8006caa:	e0ad      	b.n	8006e08 <UART_SetConfig+0x378>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cac:	f7fd fbe8 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cb0:	6862      	ldr	r2, [r4, #4]
 8006cb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cb4:	4b41      	ldr	r3, [pc, #260]	; (8006dbc <UART_SetConfig+0x32c>)
 8006cb6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006cba:	fbb0 f0f3 	udiv	r0, r0, r3
 8006cbe:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8006cc2:	fbb0 f0f2 	udiv	r0, r0, r2
 8006cc6:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc8:	f1a0 0210 	sub.w	r2, r0, #16
 8006ccc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	f63f af60 	bhi.w	8006b96 <UART_SetConfig+0x106>
      huart->Instance->BRR = usartdiv;
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	60d8      	str	r0, [r3, #12]
 8006cda:	e0b0      	b.n	8006e3e <UART_SetConfig+0x3ae>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cdc:	f7fd fbe2 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8006ce0:	e7e6      	b.n	8006cb0 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ce2:	4936      	ldr	r1, [pc, #216]	; (8006dbc <UART_SetConfig+0x32c>)
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006cea:	4837      	ldr	r0, [pc, #220]	; (8006dc8 <UART_SetConfig+0x338>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cec:	fbb0 f0f2 	udiv	r0, r0, r2
 8006cf0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006cf4:	fbb0 f0f3 	udiv	r0, r0, r3
 8006cf8:	e7e5      	b.n	8006cc6 <UART_SetConfig+0x236>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cfa:	f7fd f821 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8006cfe:	e7d7      	b.n	8006cb0 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d00:	492e      	ldr	r1, [pc, #184]	; (8006dbc <UART_SetConfig+0x32c>)
 8006d02:	6863      	ldr	r3, [r4, #4]
 8006d04:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006d08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006d0c:	e7ee      	b.n	8006cec <UART_SetConfig+0x25c>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006d0e:	4a24      	ldr	r2, [pc, #144]	; (8006da0 <UART_SetConfig+0x310>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d173      	bne.n	8006dfc <UART_SetConfig+0x36c>
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d14:	f7fd fbb4 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8006d18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d1a:	4b28      	ldr	r3, [pc, #160]	; (8006dbc <UART_SetConfig+0x32c>)
 8006d1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006d20:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006d24:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8006d26:	b953      	cbnz	r3, 8006d3e <UART_SetConfig+0x2ae>
 8006d28:	e736      	b.n	8006b98 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006d2a:	481d      	ldr	r0, [pc, #116]	; (8006da0 <UART_SetConfig+0x310>)
 8006d2c:	4283      	cmp	r3, r0
 8006d2e:	d14f      	bne.n	8006dd0 <UART_SetConfig+0x340>
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d30:	4b22      	ldr	r3, [pc, #136]	; (8006dbc <UART_SetConfig+0x32c>)
 8006d32:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006d36:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <UART_SetConfig+0x338>)
 8006d38:	fbb3 f3f0 	udiv	r3, r3, r0
 8006d3c:	2202      	movs	r2, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8006d3e:	6865      	ldr	r5, [r4, #4]
 8006d40:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006d44:	4299      	cmp	r1, r3
 8006d46:	f63f af26 	bhi.w	8006b96 <UART_SetConfig+0x106>
 8006d4a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006d4e:	f63f af22 	bhi.w	8006b96 <UART_SetConfig+0x106>
        switch (clocksource)
 8006d52:	2a08      	cmp	r2, #8
 8006d54:	d8a4      	bhi.n	8006ca0 <UART_SetConfig+0x210>
 8006d56:	a301      	add	r3, pc, #4	; (adr r3, 8006d5c <UART_SetConfig+0x2cc>)
 8006d58:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006d5c:	08006c25 	.word	0x08006c25
 8006d60:	08006ca1 	.word	0x08006ca1
 8006d64:	08006c37 	.word	0x08006c37
 8006d68:	08006ca1 	.word	0x08006ca1
 8006d6c:	08006c79 	.word	0x08006c79
 8006d70:	08006ca1 	.word	0x08006ca1
 8006d74:	08006ca1 	.word	0x08006ca1
 8006d78:	08006ca1 	.word	0x08006ca1
 8006d7c:	08006c7f 	.word	0x08006c7f
  if(UART_INSTANCE_LOWPOWER(huart))
 8006d80:	4a07      	ldr	r2, [pc, #28]	; (8006da0 <UART_SetConfig+0x310>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d134      	bne.n	8006df0 <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d86:	f7fc ffdb 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8006d8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <UART_SetConfig+0x32c>)
 8006d8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006d92:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006d96:	2204      	movs	r2, #4
 8006d98:	e7c5      	b.n	8006d26 <UART_SetConfig+0x296>
 8006d9a:	bf00      	nop
 8006d9c:	cfff69f3 	.word	0xcfff69f3
 8006da0:	40008000 	.word	0x40008000
 8006da4:	40013800 	.word	0x40013800
 8006da8:	40021000 	.word	0x40021000
 8006dac:	080251e8 	.word	0x080251e8
 8006db0:	40004400 	.word	0x40004400
 8006db4:	080251ec 	.word	0x080251ec
 8006db8:	40004800 	.word	0x40004800
 8006dbc:	080251fa 	.word	0x080251fa
 8006dc0:	40004c00 	.word	0x40004c00
 8006dc4:	40005000 	.word	0x40005000
 8006dc8:	00f42400 	.word	0x00f42400
 8006dcc:	000ffcff 	.word	0x000ffcff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006dd4:	d185      	bne.n	8006ce2 <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd6:	4b29      	ldr	r3, [pc, #164]	; (8006e7c <UART_SetConfig+0x3ec>)
 8006dd8:	6861      	ldr	r1, [r4, #4]
 8006dda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006dde:	4828      	ldr	r0, [pc, #160]	; (8006e80 <UART_SetConfig+0x3f0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006de4:	0848      	lsrs	r0, r1, #1
 8006de6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006dea:	fbb0 f0f1 	udiv	r0, r0, r1
 8006dee:	e017      	b.n	8006e20 <UART_SetConfig+0x390>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006df0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006df4:	d181      	bne.n	8006cfa <UART_SetConfig+0x26a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df6:	f7fc ffa3 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8006dfa:	e005      	b.n	8006e08 <UART_SetConfig+0x378>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006e00:	f47f af54 	bne.w	8006cac <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e04:	f7fd fb3c 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e08:	6862      	ldr	r2, [r4, #4]
 8006e0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e0c:	4b1b      	ldr	r3, [pc, #108]	; (8006e7c <UART_SetConfig+0x3ec>)
 8006e0e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e16:	0850      	lsrs	r0, r2, #1
 8006e18:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006e1c:	fbb0 f0f2 	udiv	r0, r0, r2
 8006e20:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e22:	f1a0 0210 	sub.w	r2, r0, #16
 8006e26:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	f63f aeb3 	bhi.w	8006b96 <UART_SetConfig+0x106>
      brrtemp = usartdiv & 0xFFF0U;
 8006e30:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8006e34:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e36:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8006e3a:	4318      	orrs	r0, r3
 8006e3c:	60d0      	str	r0, [r2, #12]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e6aa      	b.n	8006b98 <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e42:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006e46:	f43f aea6 	beq.w	8006b96 <UART_SetConfig+0x106>
 8006e4a:	2310      	movs	r3, #16
    switch (clocksource)
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	f63f aea2 	bhi.w	8006b96 <UART_SetConfig+0x106>
 8006e52:	a101      	add	r1, pc, #4	; (adr r1, 8006e58 <UART_SetConfig+0x3c8>)
 8006e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e58:	08006cad 	.word	0x08006cad
 8006e5c:	08006cdd 	.word	0x08006cdd
 8006e60:	08006ce3 	.word	0x08006ce3
 8006e64:	08006b97 	.word	0x08006b97
 8006e68:	08006cfb 	.word	0x08006cfb
 8006e6c:	08006b97 	.word	0x08006b97
 8006e70:	08006b97 	.word	0x08006b97
 8006e74:	08006b97 	.word	0x08006b97
 8006e78:	08006d01 	.word	0x08006d01
 8006e7c:	080251fa 	.word	0x080251fa
 8006e80:	00f42400 	.word	0x00f42400

08006e84 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006e86:	07da      	lsls	r2, r3, #31
{
 8006e88:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e8a:	d506      	bpl.n	8006e9a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e8c:	6801      	ldr	r1, [r0, #0]
 8006e8e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006e90:	684a      	ldr	r2, [r1, #4]
 8006e92:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006e96:	4322      	orrs	r2, r4
 8006e98:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e9a:	079c      	lsls	r4, r3, #30
 8006e9c:	d506      	bpl.n	8006eac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e9e:	6801      	ldr	r1, [r0, #0]
 8006ea0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006ea2:	684a      	ldr	r2, [r1, #4]
 8006ea4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ea8:	4322      	orrs	r2, r4
 8006eaa:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eac:	0759      	lsls	r1, r3, #29
 8006eae:	d506      	bpl.n	8006ebe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb0:	6801      	ldr	r1, [r0, #0]
 8006eb2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006eb4:	684a      	ldr	r2, [r1, #4]
 8006eb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006eba:	4322      	orrs	r2, r4
 8006ebc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ebe:	071a      	lsls	r2, r3, #28
 8006ec0:	d506      	bpl.n	8006ed0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ec2:	6801      	ldr	r1, [r0, #0]
 8006ec4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006ec6:	684a      	ldr	r2, [r1, #4]
 8006ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ecc:	4322      	orrs	r2, r4
 8006ece:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ed0:	06dc      	lsls	r4, r3, #27
 8006ed2:	d506      	bpl.n	8006ee2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed4:	6801      	ldr	r1, [r0, #0]
 8006ed6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006ed8:	688a      	ldr	r2, [r1, #8]
 8006eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ede:	4322      	orrs	r2, r4
 8006ee0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ee2:	0699      	lsls	r1, r3, #26
 8006ee4:	d506      	bpl.n	8006ef4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ee6:	6801      	ldr	r1, [r0, #0]
 8006ee8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006eea:	688a      	ldr	r2, [r1, #8]
 8006eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ef0:	4322      	orrs	r2, r4
 8006ef2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ef4:	065a      	lsls	r2, r3, #25
 8006ef6:	d50f      	bpl.n	8006f18 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ef8:	6801      	ldr	r1, [r0, #0]
 8006efa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006efc:	684a      	ldr	r2, [r1, #4]
 8006efe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006f02:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f08:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f0a:	d105      	bne.n	8006f18 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f0c:	684a      	ldr	r2, [r1, #4]
 8006f0e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006f10:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006f14:	4322      	orrs	r2, r4
 8006f16:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f18:	061b      	lsls	r3, r3, #24
 8006f1a:	d506      	bpl.n	8006f2a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f1c:	6802      	ldr	r2, [r0, #0]
 8006f1e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006f20:	6853      	ldr	r3, [r2, #4]
 8006f22:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006f26:	430b      	orrs	r3, r1
 8006f28:	6053      	str	r3, [r2, #4]
 8006f2a:	bd10      	pop	{r4, pc}

08006f2c <UART_WaitOnFlagUntilTimeout>:
{
 8006f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f30:	9d06      	ldr	r5, [sp, #24]
 8006f32:	4604      	mov	r4, r0
 8006f34:	460f      	mov	r7, r1
 8006f36:	4616      	mov	r6, r2
 8006f38:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3a:	6821      	ldr	r1, [r4, #0]
 8006f3c:	69ca      	ldr	r2, [r1, #28]
 8006f3e:	ea37 0302 	bics.w	r3, r7, r2
 8006f42:	bf0c      	ite	eq
 8006f44:	2201      	moveq	r2, #1
 8006f46:	2200      	movne	r2, #0
 8006f48:	42b2      	cmp	r2, r6
 8006f4a:	d002      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006f4c:	2000      	movs	r0, #0
}
 8006f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8006f52:	1c6b      	adds	r3, r5, #1
 8006f54:	d0f2      	beq.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006f56:	b99d      	cbnz	r5, 8006f80 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	f022 0201 	bic.w	r2, r2, #1
 8006f68:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006f6a:	2320      	movs	r3, #32
 8006f6c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        huart->RxState = HAL_UART_STATE_READY;
 8006f70:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
        __HAL_UNLOCK(huart);
 8006f74:	2300      	movs	r3, #0
 8006f76:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8006f7a:	2003      	movs	r0, #3
 8006f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006f80:	f7fa f84e 	bl	8001020 <HAL_GetTick>
 8006f84:	eba0 0008 	sub.w	r0, r0, r8
 8006f88:	4285      	cmp	r5, r0
 8006f8a:	d2d6      	bcs.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xe>
 8006f8c:	e7e4      	b.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x2c>

08006f8e <HAL_UART_Transmit>:
{
 8006f8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006f92:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8006f94:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006f98:	2b20      	cmp	r3, #32
{
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8006fa0:	d14b      	bne.n	800703a <HAL_UART_Transmit+0xac>
    if((pData == NULL ) || (Size == 0U))
 8006fa2:	2900      	cmp	r1, #0
 8006fa4:	d047      	beq.n	8007036 <HAL_UART_Transmit+0xa8>
 8006fa6:	2a00      	cmp	r2, #0
 8006fa8:	d045      	beq.n	8007036 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8006faa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d043      	beq.n	800703a <HAL_UART_Transmit+0xac>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fbe:	2321      	movs	r3, #33	; 0x21
 8006fc0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    tickstart = HAL_GetTick();
 8006fc4:	f7fa f82c 	bl	8001020 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8006fc8:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    tickstart = HAL_GetTick();
 8006fcc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8006fce:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    while(huart->TxXferCount > 0U)
 8006fd2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd6:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 8006fd8:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fda:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 8006fdc:	b952      	cbnz	r2, 8006ff4 <HAL_UART_Transmit+0x66>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fde:	2140      	movs	r1, #64	; 0x40
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f7ff ffa3 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 8006fe6:	b958      	cbnz	r0, 8007000 <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006fe8:	2320      	movs	r3, #32
 8006fea:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    __HAL_UNLOCK(huart);
 8006fee:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    return HAL_OK;
 8006ff2:	e006      	b.n	8007002 <HAL_UART_Transmit+0x74>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2180      	movs	r1, #128	; 0x80
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f7ff ff97 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 8006ffe:	b118      	cbz	r0, 8007008 <HAL_UART_Transmit+0x7a>
        return HAL_TIMEOUT;
 8007000:	2003      	movs	r0, #3
}
 8007002:	b002      	add	sp, #8
 8007004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007008:	68a3      	ldr	r3, [r4, #8]
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007010:	d10d      	bne.n	800702e <HAL_UART_Transmit+0xa0>
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	b95b      	cbnz	r3, 800702e <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8007016:	f835 3b02 	ldrh.w	r3, [r5], #2
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8007020:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8007024:	3b01      	subs	r3, #1
 8007026:	b29b      	uxth	r3, r3
 8007028:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800702c:	e7d1      	b.n	8006fd2 <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800702e:	782b      	ldrb	r3, [r5, #0]
 8007030:	8513      	strh	r3, [r2, #40]	; 0x28
 8007032:	3501      	adds	r5, #1
 8007034:	e7f4      	b.n	8007020 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8007036:	2001      	movs	r0, #1
 8007038:	e7e3      	b.n	8007002 <HAL_UART_Transmit+0x74>
    return HAL_BUSY;
 800703a:	2002      	movs	r0, #2
 800703c:	e7e1      	b.n	8007002 <HAL_UART_Transmit+0x74>

0800703e <UART_CheckIdleState>:
{
 800703e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007040:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007042:	2600      	movs	r6, #0
 8007044:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8007048:	f7f9 ffea 	bl	8001020 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8007052:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007054:	d417      	bmi.n	8007086 <UART_CheckIdleState+0x48>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	075b      	lsls	r3, r3, #29
 800705c:	d50a      	bpl.n	8007074 <UART_CheckIdleState+0x36>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800705e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	2200      	movs	r2, #0
 8007066:	462b      	mov	r3, r5
 8007068:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800706c:	4620      	mov	r0, r4
 800706e:	f7ff ff5d 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 8007072:	b9a0      	cbnz	r0, 800709e <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 8007074:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8007076:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8007078:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 800707c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState= HAL_UART_STATE_READY;
 8007080:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
  return HAL_OK;
 8007084:	e00c      	b.n	80070a0 <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007086:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	4632      	mov	r2, r6
 800708e:	4603      	mov	r3, r0
 8007090:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007094:	4620      	mov	r0, r4
 8007096:	f7ff ff49 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 800709a:	2800      	cmp	r0, #0
 800709c:	d0db      	beq.n	8007056 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800709e:	2003      	movs	r0, #3
}
 80070a0:	b002      	add	sp, #8
 80070a2:	bd70      	pop	{r4, r5, r6, pc}

080070a4 <HAL_UART_Init>:
{
 80070a4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80070a6:	4604      	mov	r4, r0
 80070a8:	b360      	cbz	r0, 8007104 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80070aa:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80070ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80070b2:	b91b      	cbnz	r3, 80070bc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80070b4:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80070b8:	f018 fd68 	bl	801fb8c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80070bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80070be:	2324      	movs	r3, #36	; 0x24
 80070c0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 80070c4:	6813      	ldr	r3, [r2, #0]
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070cc:	4620      	mov	r0, r4
 80070ce:	f7ff fcdf 	bl	8006a90 <UART_SetConfig>
 80070d2:	2801      	cmp	r0, #1
 80070d4:	d016      	beq.n	8007104 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070d8:	b113      	cbz	r3, 80070e0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80070da:	4620      	mov	r0, r4
 80070dc:	f7ff fed2 	bl	8006e84 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070f0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80070f8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80070fa:	601a      	str	r2, [r3, #0]
}
 80070fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007100:	f7ff bf9d 	b.w	800703e <UART_CheckIdleState>
}
 8007104:	2001      	movs	r0, #1
 8007106:	bd10      	pop	{r4, pc}

08007108 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 800710a:	2203      	movs	r2, #3
 800710c:	f88d 2003 	strb.w	r2, [sp, #3]
 8007110:	2207      	movs	r2, #7
 8007112:	f88d 2004 	strb.w	r2, [sp, #4]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8007116:	2208      	movs	r2, #8
 8007118:	f88d 2008 	strb.w	r2, [sp, #8]
 800711c:	f88d 200c 	strb.w	r2, [sp, #12]
  
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007120:	6e82      	ldr	r2, [r0, #104]	; 0x68
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8007122:	2301      	movs	r3, #1
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8007124:	2104      	movs	r1, #4
 8007126:	2402      	movs	r4, #2
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8007128:	f88d 3000 	strb.w	r3, [sp]
 800712c:	f88d 3001 	strb.w	r3, [sp, #1]
 8007130:	f88d 3002 	strb.w	r3, [sp, #2]
 8007134:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8007138:	f88d 1009 	strb.w	r1, [sp, #9]
 800713c:	f88d 400a 	strb.w	r4, [sp, #10]
 8007140:	f88d 100b 	strb.w	r1, [sp, #11]
 8007144:	f88d 300d 	strb.w	r3, [sp, #13]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007148:	b92a      	cbnz	r2, 8007156 <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1;
 800714a:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    rx_fifo_depth = 8; /* RX Fifo size */
    tx_fifo_depth = 8; /* TX Fifo size */
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 800714e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  }
}
 8007152:	b004      	add	sp, #16
 8007154:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007156:	6803      	ldr	r3, [r0, #0]
 8007158:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800715a:	6899      	ldr	r1, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 800715c:	ab04      	add	r3, sp, #16
 800715e:	eb03 7151 	add.w	r1, r3, r1, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8007162:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8007166:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 800716a:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	b2db      	uxtb	r3, r3
 8007172:	fbb3 f3f1 	udiv	r3, r3, r1
 8007176:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 800717a:	ab04      	add	r3, sp, #16
 800717c:	441a      	add	r2, r3
 800717e:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8007182:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	b2db      	uxtb	r3, r3
 800718a:	fbb3 f3f2 	udiv	r3, r3, r2
 800718e:	e7de      	b.n	800714e <UARTEx_SetNbDataToProcess+0x46>

08007190 <HAL_UARTEx_WakeupCallback>:
 8007190:	4770      	bx	lr

08007192 <HAL_UARTEx_RxFifoFullCallback>:
 8007192:	4770      	bx	lr

08007194 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8007194:	4770      	bx	lr

08007196 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007196:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800719a:	2b01      	cmp	r3, #1
 800719c:	d014      	beq.n	80071c8 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800719e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80071a0:	2324      	movs	r3, #36	; 0x24
 80071a2:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a6:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80071a8:	6813      	ldr	r3, [r2, #0]
 80071aa:	f023 0301 	bic.w	r3, r3, #1
 80071ae:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071b0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	6683      	str	r3, [r0, #104]	; 0x68
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b8:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80071ba:	2220      	movs	r2, #32
 80071bc:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 80071c0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80071c4:	4618      	mov	r0, r3
 80071c6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80071c8:	2002      	movs	r0, #2
}
 80071ca:	4770      	bx	lr

080071cc <HAL_UARTEx_SetTxFifoThreshold>:
{
 80071cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80071ce:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80071d2:	2b01      	cmp	r3, #1
{
 80071d4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80071d6:	d01b      	beq.n	8007210 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80071d8:	2301      	movs	r3, #1
 80071da:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80071de:	2324      	movs	r3, #36	; 0x24
 80071e0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e4:	6803      	ldr	r3, [r0, #0]
 80071e6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	f022 0201 	bic.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80071f6:	4311      	orrs	r1, r2
 80071f8:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80071fa:	f7ff ff85 	bl	8007108 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071fe:	6803      	ldr	r3, [r0, #0]
 8007200:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007202:	2320      	movs	r3, #32
 8007204:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8007208:	2000      	movs	r0, #0
 800720a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 800720e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007210:	2002      	movs	r0, #2
}
 8007212:	bd38      	pop	{r3, r4, r5, pc}

08007214 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007214:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007216:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800721a:	2b01      	cmp	r3, #1
{
 800721c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800721e:	d01b      	beq.n	8007258 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8007220:	2301      	movs	r3, #1
 8007222:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007226:	2324      	movs	r3, #36	; 0x24
 8007228:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800722c:	6803      	ldr	r3, [r0, #0]
 800722e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	f022 0201 	bic.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800723e:	4311      	orrs	r1, r2
 8007240:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007242:	f7ff ff61 	bl	8007108 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007246:	6803      	ldr	r3, [r0, #0]
 8007248:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800724a:	2320      	movs	r3, #32
 800724c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8007250:	2000      	movs	r0, #0
 8007252:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8007256:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007258:	2002      	movs	r0, #2
}
 800725a:	bd38      	pop	{r3, r4, r5, pc}

0800725c <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800725c:	4b11      	ldr	r3, [pc, #68]	; (80072a4 <SDMMC_GetCmdResp2+0x48>)
 800725e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	fbb3 f2f2 	udiv	r2, r3, r2
 8007268:	f241 3388 	movw	r3, #5000	; 0x1388
 800726c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800726e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007272:	d313      	bcc.n	800729c <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007274:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007276:	f012 0f45 	tst.w	r2, #69	; 0x45
 800727a:	d0f8      	beq.n	800726e <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800727c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800727e:	075b      	lsls	r3, r3, #29
 8007280:	d503      	bpl.n	800728a <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007282:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007284:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8007286:	4618      	mov	r0, r3
 8007288:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800728a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800728c:	f013 0301 	ands.w	r3, r3, #1
 8007290:	d001      	beq.n	8007296 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007292:	2301      	movs	r3, #1
 8007294:	e7f6      	b.n	8007284 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007296:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <SDMMC_GetCmdResp2+0x4c>)
 8007298:	6382      	str	r2, [r0, #56]	; 0x38
 800729a:	e7f4      	b.n	8007286 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800729c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072a0:	e7f1      	b.n	8007286 <SDMMC_GetCmdResp2+0x2a>
 80072a2:	bf00      	nop
 80072a4:	20000ed4 	.word	0x20000ed4
 80072a8:	002000c5 	.word	0x002000c5

080072ac <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80072ac:	4b0e      	ldr	r3, [pc, #56]	; (80072e8 <SDMMC_GetCmdResp3+0x3c>)
 80072ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80072b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80072bc:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80072be:	f113 33ff 	adds.w	r3, r3, #4294967295
 80072c2:	d30d      	bcc.n	80072e0 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80072c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80072c6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80072ca:	d0f8      	beq.n	80072be <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80072cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072ce:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072d2:	bf15      	itete	ne
 80072d4:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072d6:	4a05      	ldreq	r2, [pc, #20]	; (80072ec <SDMMC_GetCmdResp3+0x40>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072d8:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072da:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80072dc:	4618      	mov	r0, r3
 80072de:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80072e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20000ed4 	.word	0x20000ed4
 80072ec:	002000c5 	.word	0x002000c5

080072f0 <SDMMC_Init>:
{
 80072f0:	b084      	sub	sp, #16
 80072f2:	b510      	push	{r4, lr}
 80072f4:	ac03      	add	r4, sp, #12
 80072f6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80072fa:	9a04      	ldr	r2, [sp, #16]
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	6841      	ldr	r1, [r0, #4]
 8007300:	4313      	orrs	r3, r2
 8007302:	9a05      	ldr	r2, [sp, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	9a06      	ldr	r2, [sp, #24]
 8007308:	4313      	orrs	r3, r2
 800730a:	9a07      	ldr	r2, [sp, #28]
}
 800730c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007310:	4313      	orrs	r3, r2
 8007312:	4a03      	ldr	r2, [pc, #12]	; (8007320 <SDMMC_Init+0x30>)
 8007314:	400a      	ands	r2, r1
 8007316:	4313      	orrs	r3, r2
 8007318:	6043      	str	r3, [r0, #4]
}
 800731a:	b004      	add	sp, #16
 800731c:	2000      	movs	r0, #0
 800731e:	4770      	bx	lr
 8007320:	fffc2c00 	.word	0xfffc2c00

08007324 <SDMMC_ReadFIFO>:
 8007324:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8007328:	4770      	bx	lr

0800732a <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800732a:	680b      	ldr	r3, [r1, #0]
 800732c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8007330:	2000      	movs	r0, #0
 8007332:	4770      	bx	lr

08007334 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007334:	6803      	ldr	r3, [r0, #0]
 8007336:	f043 0303 	orr.w	r3, r3, #3
 800733a:	6003      	str	r3, [r0, #0]
}
 800733c:	2000      	movs	r0, #0
 800733e:	4770      	bx	lr

08007340 <SDMMC_PowerState_OFF>:
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8007340:	6803      	ldr	r3, [r0, #0]
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	6003      	str	r3, [r0, #0]
}
 8007348:	2000      	movs	r0, #0
 800734a:	4770      	bx	lr

0800734c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800734c:	6800      	ldr	r0, [r0, #0]
}
 800734e:	f000 0003 	and.w	r0, r0, #3
 8007352:	4770      	bx	lr

08007354 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8007354:	680b      	ldr	r3, [r1, #0]
 8007356:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007358:	68c2      	ldr	r2, [r0, #12]
 800735a:	4b06      	ldr	r3, [pc, #24]	; (8007374 <SDMMC_SendCommand+0x20>)
 800735c:	4013      	ands	r3, r2
 800735e:	684a      	ldr	r2, [r1, #4]
 8007360:	4313      	orrs	r3, r2
 8007362:	688a      	ldr	r2, [r1, #8]
 8007364:	4313      	orrs	r3, r2
 8007366:	68ca      	ldr	r2, [r1, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	690a      	ldr	r2, [r1, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	60c3      	str	r3, [r0, #12]
}
 8007370:	2000      	movs	r0, #0
 8007372:	4770      	bx	lr
 8007374:	fffee0c0 	.word	0xfffee0c0

08007378 <SDMMC_GetResponse>:
{
 8007378:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800737a:	3014      	adds	r0, #20
 800737c:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007382:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8007384:	9b01      	ldr	r3, [sp, #4]
 8007386:	6818      	ldr	r0, [r3, #0]
}  
 8007388:	b002      	add	sp, #8
 800738a:	4770      	bx	lr

0800738c <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800738c:	4b44      	ldr	r3, [pc, #272]	; (80074a0 <SDMMC_GetCmdResp1+0x114>)
{
 800738e:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8007396:	fbb3 f3f4 	udiv	r3, r3, r4
 800739a:	435a      	muls	r2, r3
    if (count-- == 0)
 800739c:	2a00      	cmp	r2, #0
 800739e:	d049      	beq.n	8007434 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 80073a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073a2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80073a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80073aa:	d0f7      	beq.n	800739c <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80073ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073ae:	075c      	lsls	r4, r3, #29
 80073b0:	d503      	bpl.n	80073ba <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073b2:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80073b4:	6383      	str	r3, [r0, #56]	; 0x38
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80073ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073bc:	f013 0301 	ands.w	r3, r3, #1
 80073c0:	d001      	beq.n	80073c6 <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80073c2:	2301      	movs	r3, #1
 80073c4:	e7f6      	b.n	80073b4 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDMMCx->RESPCMD);
 80073c6:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	4291      	cmp	r1, r2
 80073cc:	d135      	bne.n	800743a <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073ce:	4a35      	ldr	r2, [pc, #212]	; (80074a4 <SDMMC_GetCmdResp1+0x118>)
 80073d0:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80073d2:	4619      	mov	r1, r3
 80073d4:	f7ff ffd0 	bl	8007378 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80073d8:	4b33      	ldr	r3, [pc, #204]	; (80074a8 <SDMMC_GetCmdResp1+0x11c>)
 80073da:	4003      	ands	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0ea      	beq.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80073e0:	2800      	cmp	r0, #0
 80073e2:	db2c      	blt.n	800743e <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80073e4:	0042      	lsls	r2, r0, #1
 80073e6:	d42d      	bmi.n	8007444 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80073e8:	0084      	lsls	r4, r0, #2
 80073ea:	d42d      	bmi.n	8007448 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80073ec:	00c1      	lsls	r1, r0, #3
 80073ee:	d42d      	bmi.n	800744c <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80073f0:	0102      	lsls	r2, r0, #4
 80073f2:	d42e      	bmi.n	8007452 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80073f4:	0144      	lsls	r4, r0, #5
 80073f6:	d42f      	bmi.n	8007458 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80073f8:	01c1      	lsls	r1, r0, #7
 80073fa:	d430      	bmi.n	800745e <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80073fc:	0202      	lsls	r2, r0, #8
 80073fe:	d431      	bmi.n	8007464 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007400:	0244      	lsls	r4, r0, #9
 8007402:	d432      	bmi.n	800746a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007404:	0281      	lsls	r1, r0, #10
 8007406:	d433      	bmi.n	8007470 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007408:	02c2      	lsls	r2, r0, #11
 800740a:	d434      	bmi.n	8007476 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800740c:	0344      	lsls	r4, r0, #13
 800740e:	d435      	bmi.n	800747c <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007410:	0381      	lsls	r1, r0, #14
 8007412:	d436      	bmi.n	8007482 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007414:	03c2      	lsls	r2, r0, #15
 8007416:	d437      	bmi.n	8007488 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007418:	0404      	lsls	r4, r0, #16
 800741a:	d438      	bmi.n	800748e <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800741c:	0441      	lsls	r1, r0, #17
 800741e:	d439      	bmi.n	8007494 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007420:	0482      	lsls	r2, r0, #18
 8007422:	d43a      	bmi.n	800749a <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007424:	f010 0f08 	tst.w	r0, #8
 8007428:	bf14      	ite	ne
 800742a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800742e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007432:	e7c0      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007438:	e7bd      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800743a:	2301      	movs	r3, #1
 800743c:	e7bb      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800743e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007442:	e7b8      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007444:	2340      	movs	r3, #64	; 0x40
 8007446:	e7b6      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007448:	2380      	movs	r3, #128	; 0x80
 800744a:	e7b4      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800744c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007450:	e7b1      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007456:	e7ae      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800745c:	e7ab      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800745e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007462:	e7a8      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007468:	e7a5      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800746a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800746e:	e7a2      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007470:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007474:	e79f      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8007476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747a:	e79c      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800747c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007480:	e799      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007482:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007486:	e796      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007488:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800748c:	e793      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800748e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007492:	e790      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007494:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007498:	e78d      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 800749a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800749e:	e78a      	b.n	80073b6 <SDMMC_GetCmdResp1+0x2a>
 80074a0:	20000ed4 	.word	0x20000ed4
 80074a4:	002000c5 	.word	0x002000c5
 80074a8:	fdffe008 	.word	0xfdffe008

080074ac <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 80074ac:	680b      	ldr	r3, [r1, #0]
 80074ae:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80074b0:	684b      	ldr	r3, [r1, #4]
 80074b2:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 80074b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80074b6:	688a      	ldr	r2, [r1, #8]
 80074b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074bc:	4313      	orrs	r3, r2
 80074be:	68ca      	ldr	r2, [r1, #12]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	690a      	ldr	r2, [r1, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	694a      	ldr	r2, [r1, #20]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80074cc:	2000      	movs	r0, #0
 80074ce:	4770      	bx	lr

080074d0 <SDMMC_CmdBlockLength>:
{
 80074d0:	b530      	push	{r4, r5, lr}
 80074d2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074d8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074da:	2300      	movs	r3, #0
{
 80074dc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80074de:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80074e0:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074e2:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074e4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ea:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80074ec:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074ee:	f7ff ff31 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80074f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f7ff ff47 	bl	800738c <SDMMC_GetCmdResp1>
}
 80074fe:	b007      	add	sp, #28
 8007500:	bd30      	pop	{r4, r5, pc}

08007502 <SDMMC_CmdReadSingleBlock>:
{
 8007502:	b530      	push	{r4, r5, lr}
 8007504:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800750a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800750c:	2300      	movs	r3, #0
{
 800750e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007510:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007512:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007514:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007516:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800751c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800751e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007520:	f7ff ff18 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007524:	f241 3288 	movw	r2, #5000	; 0x1388
 8007528:	4621      	mov	r1, r4
 800752a:	4628      	mov	r0, r5
 800752c:	f7ff ff2e 	bl	800738c <SDMMC_GetCmdResp1>
}
 8007530:	b007      	add	sp, #28
 8007532:	bd30      	pop	{r4, r5, pc}

08007534 <SDMMC_CmdReadMultiBlock>:
{
 8007534:	b530      	push	{r4, r5, lr}
 8007536:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800753c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800753e:	2300      	movs	r3, #0
{
 8007540:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007542:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007544:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007546:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007548:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800754a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800754e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007550:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007552:	f7ff feff 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007556:	f241 3288 	movw	r2, #5000	; 0x1388
 800755a:	4621      	mov	r1, r4
 800755c:	4628      	mov	r0, r5
 800755e:	f7ff ff15 	bl	800738c <SDMMC_GetCmdResp1>
}
 8007562:	b007      	add	sp, #28
 8007564:	bd30      	pop	{r4, r5, pc}

08007566 <SDMMC_CmdWriteSingleBlock>:
{
 8007566:	b530      	push	{r4, r5, lr}
 8007568:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800756a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800756e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007570:	2300      	movs	r3, #0
{
 8007572:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007574:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007576:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007578:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800757a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800757c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007580:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007582:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007584:	f7ff fee6 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007588:	f241 3288 	movw	r2, #5000	; 0x1388
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f7ff fefc 	bl	800738c <SDMMC_GetCmdResp1>
}
 8007594:	b007      	add	sp, #28
 8007596:	bd30      	pop	{r4, r5, pc}

08007598 <SDMMC_CmdWriteMultiBlock>:
{
 8007598:	b530      	push	{r4, r5, lr}
 800759a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800759c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075a0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075a2:	2300      	movs	r3, #0
{
 80075a4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80075a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80075a8:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075aa:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ac:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075b2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80075b4:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075b6:	f7ff fecd 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80075ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80075be:	4621      	mov	r1, r4
 80075c0:	4628      	mov	r0, r5
 80075c2:	f7ff fee3 	bl	800738c <SDMMC_GetCmdResp1>
}
 80075c6:	b007      	add	sp, #28
 80075c8:	bd30      	pop	{r4, r5, pc}
	...

080075cc <SDMMC_CmdStopTransfer>:
{
 80075cc:	b530      	push	{r4, r5, lr}
 80075ce:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80075d0:	2300      	movs	r3, #0
{
 80075d2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 80075d4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80075d6:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075d8:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075dc:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075de:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075e4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075e6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80075e8:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ea:	f7ff feb3 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80075ee:	4a03      	ldr	r2, [pc, #12]	; (80075fc <SDMMC_CmdStopTransfer+0x30>)
 80075f0:	4621      	mov	r1, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7ff feca 	bl	800738c <SDMMC_GetCmdResp1>
}
 80075f8:	b007      	add	sp, #28
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	05f5e100 	.word	0x05f5e100

08007600 <SDMMC_CmdSelDesel>:
{
 8007600:	b530      	push	{r4, r5, lr}
 8007602:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007608:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800760a:	2300      	movs	r3, #0
{
 800760c:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800760e:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007610:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007612:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007618:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800761a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800761c:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800761e:	f7ff fe99 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007622:	f241 3288 	movw	r2, #5000	; 0x1388
 8007626:	4621      	mov	r1, r4
 8007628:	4628      	mov	r0, r5
 800762a:	f7ff feaf 	bl	800738c <SDMMC_GetCmdResp1>
}
 800762e:	b007      	add	sp, #28
 8007630:	bd30      	pop	{r4, r5, pc}
	...

08007634 <SDMMC_CmdGoIdleState>:
{
 8007634:	b510      	push	{r4, lr}
 8007636:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800763c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800763e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007640:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007642:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007648:	9305      	str	r3, [sp, #20]
{
 800764a:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800764c:	f7ff fe82 	bl	8007354 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <SDMMC_CmdGoIdleState+0x4c>)
 8007652:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	fbb3 f2f2 	udiv	r2, r3, r2
 800765c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007660:	4353      	muls	r3, r2
    if (count-- == 0)
 8007662:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007666:	d307      	bcc.n	8007678 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007668:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800766a:	0612      	lsls	r2, r2, #24
 800766c:	d5f9      	bpl.n	8007662 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <SDMMC_CmdGoIdleState+0x50>)
 8007670:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007672:	2000      	movs	r0, #0
}
 8007674:	b006      	add	sp, #24
 8007676:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8007678:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800767c:	e7fa      	b.n	8007674 <SDMMC_CmdGoIdleState+0x40>
 800767e:	bf00      	nop
 8007680:	20000ed4 	.word	0x20000ed4
 8007684:	002000c5 	.word	0x002000c5

08007688 <SDMMC_CmdOperCond>:
{
 8007688:	b510      	push	{r4, lr}
 800768a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800768c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007690:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007692:	2308      	movs	r3, #8
 8007694:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800769a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800769c:	2300      	movs	r3, #0
 800769e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076a0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a6:	9305      	str	r3, [sp, #20]
{
 80076a8:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076aa:	f7ff fe53 	bl	8007354 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <SDMMC_CmdOperCond+0x78>)
 80076b0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80076ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80076be:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80076c0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80076c4:	d318      	bcc.n	80076f8 <SDMMC_CmdOperCond+0x70>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80076c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80076c8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80076cc:	d0f8      	beq.n	80076c0 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076d0:	075b      	lsls	r3, r3, #29
 80076d2:	d503      	bpl.n	80076dc <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076d4:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076d6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80076d8:	b006      	add	sp, #24
 80076da:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80076dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80076de:	f012 0201 	ands.w	r2, r2, #1
 80076e2:	d001      	beq.n	80076e8 <SDMMC_CmdOperCond+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076e4:	2001      	movs	r0, #1
 80076e6:	e7f6      	b.n	80076d6 <SDMMC_CmdOperCond+0x4e>
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80076e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80076ea:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80076ee:	d0f3      	beq.n	80076d8 <SDMMC_CmdOperCond+0x50>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80076f0:	2340      	movs	r3, #64	; 0x40
 80076f2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80076f4:	4610      	mov	r0, r2
 80076f6:	e7ef      	b.n	80076d8 <SDMMC_CmdOperCond+0x50>
      return SDMMC_ERROR_TIMEOUT;
 80076f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80076fc:	e7ec      	b.n	80076d8 <SDMMC_CmdOperCond+0x50>
 80076fe:	bf00      	nop
 8007700:	20000ed4 	.word	0x20000ed4

08007704 <SDMMC_CmdAppCommand>:
{
 8007704:	b530      	push	{r4, r5, lr}
 8007706:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800770c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800770e:	2300      	movs	r3, #0
{
 8007710:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007712:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007714:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007716:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007718:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800771a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800771e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007720:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007722:	f7ff fe17 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007726:	f241 3288 	movw	r2, #5000	; 0x1388
 800772a:	4621      	mov	r1, r4
 800772c:	4628      	mov	r0, r5
 800772e:	f7ff fe2d 	bl	800738c <SDMMC_GetCmdResp1>
}
 8007732:	b007      	add	sp, #28
 8007734:	bd30      	pop	{r4, r5, pc}

08007736 <SDMMC_CmdAppOperCommand>:
{
 8007736:	b510      	push	{r4, lr}
 8007738:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800773a:	2329      	movs	r3, #41	; 0x29
 800773c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800773e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007742:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007744:	2300      	movs	r3, #0
{
 8007746:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007748:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800774a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800774c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800774e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007752:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007754:	f7ff fdfe 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007758:	4620      	mov	r0, r4
 800775a:	f7ff fda7 	bl	80072ac <SDMMC_GetCmdResp3>
}
 800775e:	b006      	add	sp, #24
 8007760:	bd10      	pop	{r4, pc}

08007762 <SDMMC_CmdSendSCR>:
{
 8007762:	b530      	push	{r4, r5, lr}
 8007764:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007766:	2300      	movs	r3, #0
{
 8007768:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 800776a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800776c:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800776e:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007772:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007774:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800777a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800777c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800777e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007780:	f7ff fde8 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007784:	f241 3288 	movw	r2, #5000	; 0x1388
 8007788:	4621      	mov	r1, r4
 800778a:	4628      	mov	r0, r5
 800778c:	f7ff fdfe 	bl	800738c <SDMMC_GetCmdResp1>
}
 8007790:	b007      	add	sp, #28
 8007792:	bd30      	pop	{r4, r5, pc}

08007794 <SDMMC_CmdSendCID>:
{
 8007794:	b510      	push	{r4, lr}
 8007796:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8007798:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800779a:	2202      	movs	r2, #2
{
 800779c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800779e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80077a0:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80077a4:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077ac:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80077ae:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077b0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077b2:	f7ff fdcf 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7ff fd50 	bl	800725c <SDMMC_GetCmdResp2>
}
 80077bc:	b006      	add	sp, #24
 80077be:	bd10      	pop	{r4, pc}

080077c0 <SDMMC_CmdSendCSD>:
{
 80077c0:	b510      	push	{r4, lr}
 80077c2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80077c4:	2309      	movs	r3, #9
 80077c6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80077c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80077cc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077ce:	2300      	movs	r3, #0
{
 80077d0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80077d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077d4:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077d6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077dc:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077de:	f7ff fdb9 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7ff fd3a 	bl	800725c <SDMMC_GetCmdResp2>
}
 80077e8:	b006      	add	sp, #24
 80077ea:	bd10      	pop	{r4, pc}

080077ec <SDMMC_CmdSetRelAdd>:
{
 80077ec:	b530      	push	{r4, r5, lr}
 80077ee:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80077f0:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80077f2:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0;
 80077f4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80077f6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077f8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077fa:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 8007802:	460d      	mov	r5, r1
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007804:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007806:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007808:	9305      	str	r3, [sp, #20]
{
 800780a:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800780c:	f7ff fda2 	bl	8007354 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007810:	4b1f      	ldr	r3, [pc, #124]	; (8007890 <SDMMC_CmdSetRelAdd+0xa4>)
 8007812:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	fbb3 f2f2 	udiv	r2, r3, r2
 800781c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007820:	4353      	muls	r3, r2
    if (count-- == 0)
 8007822:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007826:	d32a      	bcc.n	800787e <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007828:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800782a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800782e:	d0f8      	beq.n	8007822 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007830:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007832:	075a      	lsls	r2, r3, #29
 8007834:	d503      	bpl.n	800783e <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007836:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007838:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800783a:	b007      	add	sp, #28
 800783c:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800783e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007840:	f011 0101 	ands.w	r1, r1, #1
 8007844:	d001      	beq.n	800784a <SDMMC_CmdSetRelAdd+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007846:	2001      	movs	r0, #1
 8007848:	e7f6      	b.n	8007838 <SDMMC_CmdSetRelAdd+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800784a:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b03      	cmp	r3, #3
 8007850:	d118      	bne.n	8007884 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007852:	4b10      	ldr	r3, [pc, #64]	; (8007894 <SDMMC_CmdSetRelAdd+0xa8>)
 8007854:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007856:	4620      	mov	r0, r4
 8007858:	f7ff fd8e 	bl	8007378 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800785c:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8007860:	d103      	bne.n	800786a <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007862:	0c00      	lsrs	r0, r0, #16
 8007864:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8007866:	4618      	mov	r0, r3
 8007868:	e7e7      	b.n	800783a <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800786a:	0443      	lsls	r3, r0, #17
 800786c:	d40c      	bmi.n	8007888 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800786e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007872:	bf14      	ite	ne
 8007874:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007878:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800787c:	e7dd      	b.n	800783a <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 800787e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007882:	e7da      	b.n	800783a <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007884:	2001      	movs	r0, #1
 8007886:	e7d8      	b.n	800783a <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007888:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800788c:	e7d5      	b.n	800783a <SDMMC_CmdSetRelAdd+0x4e>
 800788e:	bf00      	nop
 8007890:	20000ed4 	.word	0x20000ed4
 8007894:	002000c5 	.word	0x002000c5

08007898 <SDMMC_CmdSendStatus>:
{
 8007898:	b530      	push	{r4, r5, lr}
 800789a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800789c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078a0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078a2:	2300      	movs	r3, #0
{
 80078a4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80078a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80078a8:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078aa:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078ac:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078b2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80078b4:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078b6:	f7ff fd4d 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80078ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f7ff fd63 	bl	800738c <SDMMC_GetCmdResp1>
}
 80078c6:	b007      	add	sp, #28
 80078c8:	bd30      	pop	{r4, r5, pc}

080078ca <SDMMC_CmdSwitch>:
{
 80078ca:	b530      	push	{r4, r5, lr}
 80078cc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078d4:	2300      	movs	r3, #0
{
 80078d6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80078d8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80078da:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078dc:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078de:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078e4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80078e6:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078e8:	f7ff fd34 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80078ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f0:	4621      	mov	r1, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	f7ff fd4a 	bl	800738c <SDMMC_GetCmdResp1>
}
 80078f8:	b007      	add	sp, #28
 80078fa:	bd30      	pop	{r4, r5, pc}

080078fc <SDMMC_CmdBusWidth>:
 80078fc:	f7ff bfe5 	b.w	80078ca <SDMMC_CmdSwitch>

08007900 <SDMMC_CmdVoltageSwitch>:
{
 8007900:	b530      	push	{r4, r5, lr}
 8007902:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007904:	2300      	movs	r3, #0
{
 8007906:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007908:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800790a:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800790c:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007910:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007912:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007918:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800791a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800791c:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800791e:	f7ff fd19 	bl	8007354 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007922:	f241 3288 	movw	r2, #5000	; 0x1388
 8007926:	4621      	mov	r1, r4
 8007928:	4628      	mov	r0, r5
 800792a:	f7ff fd2f 	bl	800738c <SDMMC_GetCmdResp1>
}
 800792e:	b007      	add	sp, #28
 8007930:	bd30      	pop	{r4, r5, pc}
	...

08007934 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007934:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007936:	3b01      	subs	r3, #1
 8007938:	d101      	bne.n	800793e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800793a:	2003      	movs	r0, #3
 800793c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800793e:	6902      	ldr	r2, [r0, #16]
 8007940:	2a00      	cmp	r2, #0
 8007942:	daf8      	bge.n	8007936 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007944:	6903      	ldr	r3, [r0, #16]
 8007946:	4a06      	ldr	r2, [pc, #24]	; (8007960 <USB_CoreReset+0x2c>)
 8007948:	f043 0301 	orr.w	r3, r3, #1
 800794c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800794e:	3a01      	subs	r2, #1
 8007950:	d0f3      	beq.n	800793a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007952:	6903      	ldr	r3, [r0, #16]
 8007954:	f013 0301 	ands.w	r3, r3, #1
 8007958:	d1f9      	bne.n	800794e <USB_CoreReset+0x1a>

  return HAL_OK;
 800795a:	4618      	mov	r0, r3
}
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	00030d41 	.word	0x00030d41

08007964 <USB_CoreInit>:
{
 8007964:	b084      	sub	sp, #16
 8007966:	b538      	push	{r3, r4, r5, lr}
 8007968:	ad05      	add	r5, sp, #20
 800796a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007970:	2b01      	cmp	r3, #1
{
 8007972:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007974:	d11b      	bne.n	80079ae <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007976:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800797e:	68c3      	ldr	r3, [r0, #12]
 8007980:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007988:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800798a:	68c3      	ldr	r3, [r0, #12]
 800798c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007990:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8007992:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007994:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007996:	bf02      	ittt	eq
 8007998:	68c3      	ldreq	r3, [r0, #12]
 800799a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800799e:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80079a0:	f7ff ffc8 	bl	8007934 <USB_CoreReset>
}
 80079a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079a8:	2000      	movs	r0, #0
 80079aa:	b004      	add	sp, #16
 80079ac:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079ae:	68c3      	ldr	r3, [r0, #12]
 80079b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b4:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80079b6:	f7ff ffbd 	bl	8007934 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80079ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079be:	63a3      	str	r3, [r4, #56]	; 0x38
 80079c0:	e7f0      	b.n	80079a4 <USB_CoreInit+0x40>

080079c2 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079c2:	6883      	ldr	r3, [r0, #8]
 80079c4:	f043 0301 	orr.w	r3, r3, #1
 80079c8:	6083      	str	r3, [r0, #8]
}
 80079ca:	2000      	movs	r0, #0
 80079cc:	4770      	bx	lr

080079ce <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079ce:	6883      	ldr	r3, [r0, #8]
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	6083      	str	r3, [r0, #8]
}
 80079d6:	2000      	movs	r0, #0
 80079d8:	4770      	bx	lr

080079da <USB_SetCurrentMode>:
{
 80079da:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079dc:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80079de:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80079e4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80079e6:	d108      	bne.n	80079fa <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079e8:	68c3      	ldr	r3, [r0, #12]
 80079ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079ee:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80079f0:	2032      	movs	r0, #50	; 0x32
 80079f2:	f7f9 fb1b 	bl	800102c <HAL_Delay>
  return HAL_OK;
 80079f6:	2000      	movs	r0, #0
 80079f8:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80079fa:	b919      	cbnz	r1, 8007a04 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079fc:	68c3      	ldr	r3, [r0, #12]
 80079fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a02:	e7f4      	b.n	80079ee <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8007a04:	2001      	movs	r0, #1
}
 8007a06:	bd08      	pop	{r3, pc}

08007a08 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a08:	0189      	lsls	r1, r1, #6
 8007a0a:	f041 0120 	orr.w	r1, r1, #32
 8007a0e:	4a06      	ldr	r2, [pc, #24]	; (8007a28 <USB_FlushTxFifo+0x20>)
 8007a10:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8007a12:	3a01      	subs	r2, #1
 8007a14:	d005      	beq.n	8007a22 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a16:	6903      	ldr	r3, [r0, #16]
 8007a18:	f013 0320 	ands.w	r3, r3, #32
 8007a1c:	d1f9      	bne.n	8007a12 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8007a1e:	4618      	mov	r0, r3
 8007a20:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007a22:	2003      	movs	r0, #3
}
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	00030d41 	.word	0x00030d41

08007a2c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	4a06      	ldr	r2, [pc, #24]	; (8007a48 <USB_FlushRxFifo+0x1c>)
 8007a30:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8007a32:	3a01      	subs	r2, #1
 8007a34:	d005      	beq.n	8007a42 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a36:	6903      	ldr	r3, [r0, #16]
 8007a38:	f013 0310 	ands.w	r3, r3, #16
 8007a3c:	d1f9      	bne.n	8007a32 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8007a3e:	4618      	mov	r0, r3
 8007a40:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007a42:	2003      	movs	r0, #3
}
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	00030d41 	.word	0x00030d41

08007a4c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8007a4c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007a50:	4319      	orrs	r1, r3
 8007a52:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007a56:	2000      	movs	r0, #0
 8007a58:	4770      	bx	lr
	...

08007a5c <USB_DevInit>:
{
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	4604      	mov	r4, r0
 8007a64:	a807      	add	r0, sp, #28
 8007a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007a6e:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8007a70:	4619      	mov	r1, r3
 8007a72:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007a76:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8007a7e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8007a80:	d1f7      	bne.n	8007a72 <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a88:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8007a8a:	b95f      	cbnz	r7, 8007aa4 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a92:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a9a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa2:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007aaa:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8007aae:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ab2:	2103      	movs	r1, #3
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f7ff ffc9 	bl	8007a4c <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007aba:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007abe:	2110      	movs	r1, #16
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f7ff ffa1 	bl	8007a08 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f7ff ffb0 	bl	8007a2c <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8007acc:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ace:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8007ad0:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ad2:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8007ad4:	61f5      	str	r5, [r6, #28]
 8007ad6:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ade:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ae2:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ae6:	4543      	cmp	r3, r8
 8007ae8:	d12f      	bne.n	8007b4a <USB_DevInit+0xee>
 8007aea:	2100      	movs	r1, #0
 8007aec:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007af0:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007af2:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007af6:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007afa:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007afe:	428b      	cmp	r3, r1
 8007b00:	d134      	bne.n	8007b6c <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b02:	6933      	ldr	r3, [r6, #16]
 8007b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b08:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b0e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8007b12:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b14:	69a3      	ldr	r3, [r4, #24]
 8007b16:	f043 0310 	orr.w	r3, r3, #16
 8007b1a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b1c:	69a2      	ldr	r2, [r4, #24]
 8007b1e:	4b1c      	ldr	r3, [pc, #112]	; (8007b90 <USB_DevInit+0x134>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8007b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b26:	b11b      	cbz	r3, 8007b30 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b28:	69a3      	ldr	r3, [r4, #24]
 8007b2a:	f043 0308 	orr.w	r3, r3, #8
 8007b2e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8007b30:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b32:	bf01      	itttt	eq
 8007b34:	69a3      	ldreq	r3, [r4, #24]
 8007b36:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007b3a:	f043 0304 	orreq.w	r3, r3, #4
 8007b3e:	61a3      	streq	r3, [r4, #24]
}
 8007b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b44:	2000      	movs	r0, #0
 8007b46:	b004      	add	sp, #16
 8007b48:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b4a:	f8d2 c000 	ldr.w	ip, [r2]
 8007b4e:	f1bc 0f00 	cmp.w	ip, #0
 8007b52:	da09      	bge.n	8007b68 <USB_DevInit+0x10c>
      if (i == 0U)
 8007b54:	b933      	cbnz	r3, 8007b64 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b56:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b58:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b5a:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b5c:	f8c2 e008 	str.w	lr, [r2, #8]
 8007b60:	3220      	adds	r2, #32
 8007b62:	e7c0      	b.n	8007ae6 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b64:	6010      	str	r0, [r2, #0]
 8007b66:	e7f7      	b.n	8007b58 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b68:	6011      	str	r1, [r2, #0]
 8007b6a:	e7f5      	b.n	8007b58 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b6c:	f8d2 8000 	ldr.w	r8, [r2]
 8007b70:	f1b8 0f00 	cmp.w	r8, #0
 8007b74:	da0a      	bge.n	8007b8c <USB_DevInit+0x130>
      if (i == 0U)
 8007b76:	b939      	cbnz	r1, 8007b88 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b78:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b7c:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b7e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b80:	f8c2 c008 	str.w	ip, [r2, #8]
 8007b84:	3220      	adds	r2, #32
 8007b86:	e7ba      	b.n	8007afe <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b88:	6015      	str	r5, [r2, #0]
 8007b8a:	e7f7      	b.n	8007b7c <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b8c:	6010      	str	r0, [r2, #0]
 8007b8e:	e7f5      	b.n	8007b7c <USB_DevInit+0x120>
 8007b90:	803c3800 	.word	0x803c3800

08007b94 <USB_ActivateEndpoint>:
{
 8007b94:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007b96:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007b98:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007b9a:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8007b9e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8007ba2:	2a01      	cmp	r2, #1
 8007ba4:	f004 050f 	and.w	r5, r4, #15
 8007ba8:	d11b      	bne.n	8007be2 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007baa:	40aa      	lsls	r2, r5
 8007bac:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bae:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007bb2:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bb4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007bb8:	041a      	lsls	r2, r3, #16
 8007bba:	d410      	bmi.n	8007bde <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bbc:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bbe:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bc0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007bd4:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007bde:	2000      	movs	r0, #0
 8007be0:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8007be2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007be6:	40aa      	lsls	r2, r5
 8007be8:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007bea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8007bee:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007bf0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007bf4:	041b      	lsls	r3, r3, #16
 8007bf6:	d4f2      	bmi.n	8007bde <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bf8:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8007bfa:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bfc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007c00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007c16:	e7e2      	b.n	8007bde <USB_ActivateEndpoint+0x4a>

08007c18 <USB_DeactivateEndpoint>:
{
 8007c18:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8007c1a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007c1c:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007c1e:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8007c22:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	f004 050f 	and.w	r5, r4, #15
 8007c2c:	d110      	bne.n	8007c50 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007c2e:	40ab      	lsls	r3, r5
 8007c30:	43db      	mvns	r3, r3
 8007c32:	4019      	ands	r1, r3
 8007c34:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007c36:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c38:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007c3c:	400b      	ands	r3, r1
 8007c3e:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c40:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007c44:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <USB_DeactivateEndpoint+0x5c>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c54:	40ab      	lsls	r3, r5
 8007c56:	43db      	mvns	r3, r3
 8007c58:	4019      	ands	r1, r3
 8007c5a:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007c5c:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c5e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007c62:	400b      	ands	r3, r1
 8007c64:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c66:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007c6a:	4b03      	ldr	r3, [pc, #12]	; (8007c78 <USB_DeactivateEndpoint+0x60>)
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007c72:	e7eb      	b.n	8007c4c <USB_DeactivateEndpoint+0x34>
 8007c74:	ec337800 	.word	0xec337800
 8007c78:	eff37800 	.word	0xeff37800

08007c7c <USB_EP0StartXfer>:
{
 8007c7c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007c7e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007c80:	780a      	ldrb	r2, [r1, #0]
 8007c82:	694d      	ldr	r5, [r1, #20]
 8007c84:	4e35      	ldr	r6, [pc, #212]	; (8007d5c <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	f04f 0320 	mov.w	r3, #32
 8007c8c:	d145      	bne.n	8007d1a <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c8e:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 8007c92:	bb45      	cbnz	r5, 8007ce6 <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c94:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007c98:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007c9c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007ca0:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ca4:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007ca8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007cac:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cb0:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007cb4:	4026      	ands	r6, r4
 8007cb6:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    if (ep->xfer_len > 0U)
 8007cba:	694b      	ldr	r3, [r1, #20]
 8007cbc:	b14b      	cbz	r3, 8007cd2 <USB_EP0StartXfer+0x56>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007cbe:	780b      	ldrb	r3, [r1, #0]
 8007cc0:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 8007cc4:	f003 010f 	and.w	r1, r3, #15
 8007cc8:	2301      	movs	r3, #1
 8007cca:	408b      	lsls	r3, r1
 8007ccc:	432b      	orrs	r3, r5
 8007cce:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007cd2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8007cd6:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8007cda:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8007cde:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cea:	691c      	ldr	r4, [r3, #16]
 8007cec:	4026      	ands	r6, r4
 8007cee:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cf0:	691c      	ldr	r4, [r3, #16]
 8007cf2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007cf6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007cfa:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007cfc:	688c      	ldr	r4, [r1, #8]
 8007cfe:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8007d00:	bf88      	it	hi
 8007d02:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d04:	691c      	ldr	r4, [r3, #16]
 8007d06:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007d0a:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d0c:	694c      	ldr	r4, [r1, #20]
 8007d0e:	691d      	ldr	r5, [r3, #16]
 8007d10:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007d14:	432c      	orrs	r4, r5
 8007d16:	611c      	str	r4, [r3, #16]
 8007d18:	e7cf      	b.n	8007cba <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d1a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007d1e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	4032      	ands	r2, r6
 8007d26:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d28:	691a      	ldr	r2, [r3, #16]
 8007d2a:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007d2e:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007d32:	611a      	str	r2, [r3, #16]
 8007d34:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8007d36:	b105      	cbz	r5, 8007d3a <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8007d38:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d3a:	6919      	ldr	r1, [r3, #16]
 8007d3c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8007d40:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007d42:	6919      	ldr	r1, [r3, #16]
 8007d44:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d4c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d54:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007d58:	e7c3      	b.n	8007ce2 <USB_EP0StartXfer+0x66>
 8007d5a:	bf00      	nop
 8007d5c:	fff80000 	.word	0xfff80000

08007d60 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8007d60:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007d62:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8007d66:	f023 0303 	bic.w	r3, r3, #3
 8007d6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d6e:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8007d70:	4299      	cmp	r1, r3
 8007d72:	d101      	bne.n	8007d78 <USB_WritePacket+0x18>
}
 8007d74:	2000      	movs	r0, #0
 8007d76:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007d78:	f851 0b04 	ldr.w	r0, [r1], #4
 8007d7c:	6010      	str	r0, [r2, #0]
 8007d7e:	e7f7      	b.n	8007d70 <USB_WritePacket+0x10>

08007d80 <USB_EPStartXfer>:
{
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8007d82:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007d84:	780d      	ldrb	r5, [r1, #0]
 8007d86:	4e5f      	ldr	r6, [pc, #380]	; (8007f04 <USB_EPStartXfer+0x184>)
  if (ep->is_in == 1U)
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	f04f 0220 	mov.w	r2, #32
 8007d8e:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d90:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8007d94:	d169      	bne.n	8007e6a <USB_EPStartXfer+0xea>
    if (ep->xfer_len == 0U)
 8007d96:	bb83      	cbnz	r3, 8007dfa <USB_EPStartXfer+0x7a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d98:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8007d9c:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8007da0:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007da4:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007da8:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007daa:	6922      	ldr	r2, [r4, #16]
 8007dac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007db0:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007db2:	6922      	ldr	r2, [r4, #16]
 8007db4:	4016      	ands	r6, r2
 8007db6:	6126      	str	r6, [r4, #16]
    if (ep->type != EP_TYPE_ISOC)
 8007db8:	78ce      	ldrb	r6, [r1, #3]
 8007dba:	2e01      	cmp	r6, #1
 8007dbc:	f000 8094 	beq.w	8007ee8 <USB_EPStartXfer+0x168>
      if (ep->xfer_len > 0U)
 8007dc0:	b153      	cbz	r3, 8007dd8 <USB_EPStartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007dc2:	780a      	ldrb	r2, [r1, #0]
 8007dc4:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8007dc8:	f002 040f 	and.w	r4, r2, #15
 8007dcc:	2201      	movs	r2, #1
 8007dce:	40a2      	lsls	r2, r4
 8007dd0:	ea42 020e 	orr.w	r2, r2, lr
 8007dd4:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dd8:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 8007ddc:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dde:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007de2:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007de6:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8007dea:	d104      	bne.n	8007df6 <USB_EPStartXfer+0x76>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007dec:	780a      	ldrb	r2, [r1, #0]
 8007dee:	68c9      	ldr	r1, [r1, #12]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	f7ff ffb5 	bl	8007d60 <USB_WritePacket>
}
 8007df6:	2000      	movs	r0, #0
 8007df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dfa:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007dfe:	4034      	ands	r4, r6
 8007e00:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e04:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e08:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e0a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007e0e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007e12:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e16:	199c      	adds	r4, r3, r6
 8007e18:	3c01      	subs	r4, #1
 8007e1a:	fbb4 f6f6 	udiv	r6, r4, r6
 8007e1e:	4c3a      	ldr	r4, [pc, #232]	; (8007f08 <USB_EPStartXfer+0x188>)
 8007e20:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8007e24:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 8007e28:	433c      	orrs	r4, r7
 8007e2a:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e2e:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8007e32:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8007e36:	4334      	orrs	r4, r6
 8007e38:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8007e3c:	78cc      	ldrb	r4, [r1, #3]
 8007e3e:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8007e44:	d1b8      	bne.n	8007db8 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007e46:	6914      	ldr	r4, [r2, #16]
 8007e48:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8007e4c:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007e4e:	6914      	ldr	r4, [r2, #16]
 8007e50:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8007e54:	6114      	str	r4, [r2, #16]
 8007e56:	e7af      	b.n	8007db8 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e58:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007e5c:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007e60:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e64:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
 8007e68:	e7b6      	b.n	8007dd8 <USB_EPStartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e6a:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8007e6e:	692c      	ldr	r4, [r5, #16]
 8007e70:	4034      	ands	r4, r6
 8007e72:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e74:	692c      	ldr	r4, [r5, #16]
 8007e76:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007e7a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007e7e:	612c      	str	r4, [r5, #16]
 8007e80:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8007e82:	b9fb      	cbnz	r3, 8007ec4 <USB_EPStartXfer+0x144>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007e84:	692b      	ldr	r3, [r5, #16]
 8007e86:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007e8a:	431c      	orrs	r4, r3
 8007e8c:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e8e:	692b      	ldr	r3, [r5, #16]
 8007e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e94:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8007e96:	78cb      	ldrb	r3, [r1, #3]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d10c      	bne.n	8007eb6 <USB_EPStartXfer+0x136>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e9c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007ea0:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ea4:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007ea8:	bf0c      	ite	eq
 8007eaa:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007eae:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8007eb2:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007eb6:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ebe:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  return HAL_OK;
 8007ec2:	e798      	b.n	8007df6 <USB_EPStartXfer+0x76>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ec4:	4e10      	ldr	r6, [pc, #64]	; (8007f08 <USB_EPStartXfer+0x188>)
 8007ec6:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ec8:	4423      	add	r3, r4
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ed0:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8007ed4:	433e      	orrs	r6, r7
 8007ed6:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	692e      	ldr	r6, [r5, #16]
 8007edc:	435c      	muls	r4, r3
 8007ede:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007ee2:	4334      	orrs	r4, r6
 8007ee4:	612c      	str	r4, [r5, #16]
 8007ee6:	e7d6      	b.n	8007e96 <USB_EPStartXfer+0x116>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ee8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007eec:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007ef0:	f04f 0220 	mov.w	r2, #32
 8007ef4:	d0b0      	beq.n	8007e58 <USB_EPStartXfer+0xd8>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ef6:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007efa:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007efe:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007f02:	e7af      	b.n	8007e64 <USB_EPStartXfer+0xe4>
 8007f04:	fff80000 	.word	0xfff80000
 8007f08:	1ff80000 	.word	0x1ff80000

08007f0c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007f0c:	3203      	adds	r2, #3
 8007f0e:	f022 0203 	bic.w	r2, r2, #3
 8007f12:	440a      	add	r2, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007f14:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8007f18:	4291      	cmp	r1, r2
 8007f1a:	d101      	bne.n	8007f20 <USB_ReadPacket+0x14>
}
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007f20:	6803      	ldr	r3, [r0, #0]
 8007f22:	f841 3b04 	str.w	r3, [r1], #4
 8007f26:	e7f7      	b.n	8007f18 <USB_ReadPacket+0xc>

08007f28 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8007f28:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007f2a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f32:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007f36:	d112      	bne.n	8007f5e <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f38:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	db06      	blt.n	8007f4e <USB_EPSetStall+0x26>
 8007f40:	b12a      	cbz	r2, 8007f4e <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f42:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007f46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f4a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f4e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f56:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f5e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	db06      	blt.n	8007f74 <USB_EPSetStall+0x4c>
 8007f66:	b12a      	cbz	r2, 8007f74 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007f68:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007f6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f70:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007f74:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f7c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007f80:	e7eb      	b.n	8007f5a <USB_EPSetStall+0x32>

08007f82 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8007f82:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007f84:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f8c:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007f90:	d111      	bne.n	8007fb6 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f92:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007f96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f9a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f9e:	78cb      	ldrb	r3, [r1, #3]
 8007fa0:	3b02      	subs	r3, #2
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d805      	bhi.n	8007fb2 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007fa6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fae:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007fb6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007fba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fbe:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007fc2:	78cb      	ldrb	r3, [r1, #3]
 8007fc4:	3b02      	subs	r3, #2
 8007fc6:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007fc8:	bf9e      	ittt	ls
 8007fca:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8007fce:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8007fd2:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8007fd6:	e7ec      	b.n	8007fb2 <USB_EPClearStall+0x30>

08007fd8 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007fd8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007fdc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fe0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007fe4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007fe8:	0109      	lsls	r1, r1, #4
 8007fea:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007fee:	4319      	orrs	r1, r3
 8007ff0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	4770      	bx	lr

08007ff8 <USB_DevConnect>:
{
 8007ff8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ffa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007ffe:	f023 0302 	bic.w	r3, r3, #2
 8008002:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8008006:	2003      	movs	r0, #3
 8008008:	f7f9 f810 	bl	800102c <HAL_Delay>
}
 800800c:	2000      	movs	r0, #0
 800800e:	bd08      	pop	{r3, pc}

08008010 <USB_DevDisconnect>:
{
 8008010:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008012:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8008016:	f043 0302 	orr.w	r3, r3, #2
 800801a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800801e:	2003      	movs	r0, #3
 8008020:	f7f9 f804 	bl	800102c <HAL_Delay>
}
 8008024:	2000      	movs	r0, #0
 8008026:	bd08      	pop	{r3, pc}

08008028 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8008028:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800802a:	6980      	ldr	r0, [r0, #24]
}
 800802c:	4010      	ands	r0, r2
 800802e:	4770      	bx	lr

08008030 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008030:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008034:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008038:	69c0      	ldr	r0, [r0, #28]
 800803a:	4018      	ands	r0, r3
}
 800803c:	0c00      	lsrs	r0, r0, #16
 800803e:	4770      	bx	lr

08008040 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008040:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008044:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008048:	69c0      	ldr	r0, [r0, #28]
 800804a:	4018      	ands	r0, r3
}
 800804c:	b280      	uxth	r0, r0
 800804e:	4770      	bx	lr

08008050 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008050:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008054:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008058:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800805c:	6940      	ldr	r0, [r0, #20]
}
 800805e:	4010      	ands	r0, r2
 8008060:	4770      	bx	lr

08008062 <USB_ReadDevInEPInterrupt>:
{
 8008062:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8008064:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008068:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800806c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8008070:	f001 010f 	and.w	r1, r1, #15
 8008074:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008076:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 800807a:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800807c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 800807e:	b2db      	uxtb	r3, r3
 8008080:	4323      	orrs	r3, r4
}
 8008082:	4018      	ands	r0, r3
 8008084:	bd10      	pop	{r4, pc}

08008086 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8008086:	6940      	ldr	r0, [r0, #20]
}
 8008088:	f000 0001 	and.w	r0, r0, #1
 800808c:	4770      	bx	lr

0800808e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800808e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008092:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008096:	f023 0307 	bic.w	r3, r3, #7
 800809a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800809e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	f002 0206 	and.w	r2, r2, #6
 80080a8:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80080aa:	bf02      	ittt	eq
 80080ac:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80080b0:	f042 0203 	orreq.w	r2, r2, #3
 80080b4:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080be:	605a      	str	r2, [r3, #4]
}
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr

080080c4 <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80080c4:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80080c8:	2000      	movs	r0, #0
 80080ca:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80080d2:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	f042 0218 	orr.w	r2, r2, #24
 80080da:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80080e2:	611a      	str	r2, [r3, #16]
}
 80080e4:	4770      	bx	lr
	...

080080e8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 80080e8:	2329      	movs	r3, #41	; 0x29
 80080ea:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 80080ec:	4800      	ldr	r0, [pc, #0]	; (80080f0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 80080ee:	4770      	bx	lr
 80080f0:	2000005c 	.word	0x2000005c

080080f4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 80080f4:	2329      	movs	r3, #41	; 0x29
 80080f6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 80080f8:	4800      	ldr	r0, [pc, #0]	; (80080fc <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 80080fa:	4770      	bx	lr
 80080fc:	20000088 	.word	0x20000088

08008100 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008100:	2329      	movs	r3, #41	; 0x29
 8008102:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8008104:	4800      	ldr	r0, [pc, #0]	; (8008108 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8008106:	4770      	bx	lr
 8008108:	200000cc 	.word	0x200000cc

0800810c <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800810c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8008110:	2000      	movs	r0, #0
 8008112:	7718      	strb	r0, [r3, #28]

  return USBD_OK;
}
 8008114:	4770      	bx	lr

08008116 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008116:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008118:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if (hhid->IsReportAvailable == 1U)
 800811c:	69a3      	ldr	r3, [r4, #24]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d107      	bne.n	8008132 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008122:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8008126:	7861      	ldrb	r1, [r4, #1]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	7820      	ldrb	r0, [r4, #0]
 800812c:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	61a3      	str	r3, [r4, #24]
  }

  return USBD_OK;
}
 8008132:	2000      	movs	r0, #0
 8008134:	bd10      	pop	{r4, pc}
	...

08008138 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008138:	230a      	movs	r3, #10
 800813a:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 800813c:	4800      	ldr	r0, [pc, #0]	; (8008140 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 800813e:	4770      	bx	lr
 8008140:	200000c0 	.word	0x200000c0

08008144 <USBD_CUSTOM_HID_DataOut>:
{
 8008144:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008146:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800814a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800814e:	7869      	ldrb	r1, [r5, #1]
 8008150:	68db      	ldr	r3, [r3, #12]
{
 8008152:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008154:	7828      	ldrb	r0, [r5, #0]
 8008156:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8008158:	230c      	movs	r3, #12
 800815a:	462a      	mov	r2, r5
 800815c:	2101      	movs	r1, #1
 800815e:	4620      	mov	r0, r4
 8008160:	f018 f934 	bl	80203cc <USBD_LL_PrepareReceive>
}
 8008164:	2000      	movs	r0, #0
 8008166:	bd38      	pop	{r3, r4, r5, pc}

08008168 <USBD_CUSTOM_HID_Setup>:
{
 8008168:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 800816a:	2500      	movs	r5, #0
 800816c:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008170:	780d      	ldrb	r5, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008172:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008176:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 800817a:	4603      	mov	r3, r0
 800817c:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800817e:	d028      	beq.n	80081d2 <USBD_CUSTOM_HID_Setup+0x6a>
 8008180:	2d20      	cmp	r5, #32
 8008182:	d161      	bne.n	8008248 <USBD_CUSTOM_HID_Setup+0xe0>
    switch (req->bRequest)
 8008184:	7849      	ldrb	r1, [r1, #1]
 8008186:	3902      	subs	r1, #2
 8008188:	2909      	cmp	r1, #9
 800818a:	d85b      	bhi.n	8008244 <USBD_CUSTOM_HID_Setup+0xdc>
 800818c:	e8df f001 	tbb	[pc, r1]
 8008190:	5a5a0a15 	.word	0x5a5a0a15
 8008194:	195a5a5a 	.word	0x195a5a5a
 8008198:	0511      	.short	0x0511
      hhid->Protocol = (uint8_t)(req->wValue);
 800819a:	7893      	ldrb	r3, [r2, #2]
 800819c:	60e3      	str	r3, [r4, #12]
  uint8_t ret = USBD_OK;
 800819e:	2000      	movs	r0, #0
}
 80081a0:	b003      	add	sp, #12
 80081a2:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80081a4:	2201      	movs	r2, #1
 80081a6:	f104 010c 	add.w	r1, r4, #12
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fc18 	bl	80089e0 <USBD_CtlSendData>
 80081b0:	e7f5      	b.n	800819e <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80081b2:	8853      	ldrh	r3, [r2, #2]
 80081b4:	0a1b      	lsrs	r3, r3, #8
 80081b6:	6123      	str	r3, [r4, #16]
 80081b8:	e7f1      	b.n	800819e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80081ba:	2201      	movs	r2, #1
 80081bc:	f104 0110 	add.w	r1, r4, #16
 80081c0:	e7f3      	b.n	80081aa <USBD_CUSTOM_HID_Setup+0x42>
      hhid->IsReportAvailable = 1U;
 80081c2:	2101      	movs	r1, #1
 80081c4:	61a1      	str	r1, [r4, #24]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 80081c6:	88d2      	ldrh	r2, [r2, #6]
 80081c8:	4621      	mov	r1, r4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fc1d 	bl	8008a0a <USBD_CtlPrepareRx>
 80081d0:	e7e5      	b.n	800819e <USBD_CUSTOM_HID_Setup+0x36>
    switch (req->bRequest)
 80081d2:	7849      	ldrb	r1, [r1, #1]
 80081d4:	290b      	cmp	r1, #11
 80081d6:	d835      	bhi.n	8008244 <USBD_CUSTOM_HID_Setup+0xdc>
 80081d8:	e8df f001 	tbb	[pc, r1]
 80081dc:	34343406 	.word	0x34343406
 80081e0:	340e3434 	.word	0x340e3434
 80081e4:	2d253434 	.word	0x2d253434
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e8:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 80081ec:	2903      	cmp	r1, #3
 80081ee:	d129      	bne.n	8008244 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80081f0:	2202      	movs	r2, #2
 80081f2:	f10d 0106 	add.w	r1, sp, #6
 80081f6:	e7d8      	b.n	80081aa <USBD_CUSTOM_HID_Setup+0x42>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80081f8:	8851      	ldrh	r1, [r2, #2]
 80081fa:	0a09      	lsrs	r1, r1, #8
 80081fc:	2922      	cmp	r1, #34	; 0x22
 80081fe:	d107      	bne.n	8008210 <USBD_CUSTOM_HID_Setup+0xa8>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008200:	88d2      	ldrh	r2, [r2, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008202:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008206:	2a21      	cmp	r2, #33	; 0x21
 8008208:	bf28      	it	cs
 800820a:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800820c:	6809      	ldr	r1, [r1, #0]
 800820e:	e7cc      	b.n	80081aa <USBD_CUSTOM_HID_Setup+0x42>
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008210:	2921      	cmp	r1, #33	; 0x21
 8008212:	d105      	bne.n	8008220 <USBD_CUSTOM_HID_Setup+0xb8>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8008214:	88d2      	ldrh	r2, [r2, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 8008216:	490e      	ldr	r1, [pc, #56]	; (8008250 <USBD_CUSTOM_HID_Setup+0xe8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8008218:	2a09      	cmp	r2, #9
 800821a:	bf28      	it	cs
 800821c:	2209      	movcs	r2, #9
 800821e:	e7c4      	b.n	80081aa <USBD_CUSTOM_HID_Setup+0x42>
  uint8_t  *pbuf = NULL;
 8008220:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8008222:	460a      	mov	r2, r1
 8008224:	e7c1      	b.n	80081aa <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008226:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 800822a:	2903      	cmp	r1, #3
 800822c:	d10a      	bne.n	8008244 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800822e:	2201      	movs	r2, #1
 8008230:	f104 0114 	add.w	r1, r4, #20
 8008234:	e7b9      	b.n	80081aa <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008236:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 800823a:	2903      	cmp	r1, #3
 800823c:	d102      	bne.n	8008244 <USBD_CUSTOM_HID_Setup+0xdc>
        hhid->AltSetting = (uint8_t)(req->wValue);
 800823e:	7893      	ldrb	r3, [r2, #2]
 8008240:	6163      	str	r3, [r4, #20]
 8008242:	e7ac      	b.n	800819e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8008244:	4611      	mov	r1, r2
 8008246:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8008248:	f000 fba3 	bl	8008992 <USBD_CtlError>
    ret = USBD_FAIL;
 800824c:	2002      	movs	r0, #2
    break;
 800824e:	e7a7      	b.n	80081a0 <USBD_CUSTOM_HID_Setup+0x38>
 8008250:	200000b4 	.word	0x200000b4

08008254 <USBD_CUSTOM_HID_DeInit>:
{
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008258:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800825a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800825c:	f018 f85c 	bl	8020318 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008260:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008262:	2101      	movs	r1, #1
 8008264:	4620      	mov	r0, r4
 8008266:	f018 f857 	bl	8020318 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800826a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800826e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if(pdev->pClassData != NULL)
 8008272:	b14b      	cbz	r3, 8008288 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008274:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800827c:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8008280:	f018 f8e8 	bl	8020454 <USBD_static_free>
    pdev->pClassData = NULL;
 8008284:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8008288:	2000      	movs	r0, #0
 800828a:	bd38      	pop	{r3, r4, r5, pc}

0800828c <USBD_CUSTOM_HID_Init>:
{
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	4605      	mov	r5, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008290:	2401      	movs	r4, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008292:	2340      	movs	r3, #64	; 0x40
 8008294:	2203      	movs	r2, #3
 8008296:	2181      	movs	r1, #129	; 0x81
 8008298:	f018 f82e 	bl	80202f8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800829c:	230c      	movs	r3, #12
 800829e:	2203      	movs	r2, #3
 80082a0:	4621      	mov	r1, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80082a2:	62ec      	str	r4, [r5, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80082a4:	4628      	mov	r0, r5
 80082a6:	f018 f827 	bl	80202f8 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80082aa:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80082ae:	2020      	movs	r0, #32
 80082b0:	f018 f8cc 	bl	802044c <USBD_static_malloc>
 80082b4:	4606      	mov	r6, r0
 80082b6:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80082ba:	b168      	cbz	r0, 80082d8 <USBD_CUSTOM_HID_Init+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80082bc:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    hhid->state = CUSTOM_HID_IDLE;
 80082c0:	2700      	movs	r7, #0
 80082c2:	7707      	strb	r7, [r0, #28]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80082c8:	230c      	movs	r3, #12
 80082ca:	4632      	mov	r2, r6
 80082cc:	4621      	mov	r1, r4
 80082ce:	4628      	mov	r0, r5
 80082d0:	f018 f87c 	bl	80203cc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80082d4:	4638      	mov	r0, r7
 80082d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 80082d8:	4620      	mov	r0, r4
}
 80082da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082dc <USBD_CUSTOM_HID_SendReport>:
{
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80082e0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80082e4:	2a03      	cmp	r2, #3
 80082e6:	d109      	bne.n	80082fc <USBD_CUSTOM_HID_SendReport+0x20>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80082e8:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    if(hhid->state == CUSTOM_HID_IDLE)
 80082ec:	7f35      	ldrb	r5, [r6, #28]
 80082ee:	2401      	movs	r4, #1
 80082f0:	b935      	cbnz	r5, 8008300 <USBD_CUSTOM_HID_SendReport+0x24>
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80082f2:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 80082f4:	7734      	strb	r4, [r6, #28]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80082f6:	2181      	movs	r1, #129	; 0x81
 80082f8:	f018 f85a 	bl	80203b0 <USBD_LL_Transmit>
  return USBD_OK;
 80082fc:	2000      	movs	r0, #0
 80082fe:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 8008300:	4620      	mov	r0, r4
}
 8008302:	bd70      	pop	{r4, r5, r6, pc}

08008304 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8008304:	b119      	cbz	r1, 800830e <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8008306:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 800830a:	2000      	movs	r0, #0
 800830c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800830e:	2002      	movs	r0, #2
  }

  return ret;
}
 8008310:	4770      	bx	lr

08008312 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008312:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008314:	b180      	cbz	r0, 8008338 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008316:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800831a:	b113      	cbz	r3, 8008322 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008322:	b109      	cbz	r1, 8008328 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008324:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008328:	2301      	movs	r3, #1
 800832a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 800832e:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008330:	f017 ffa0 	bl	8020274 <USBD_LL_Init>

  return USBD_OK;
 8008334:	2000      	movs	r0, #0
 8008336:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008338:	2002      	movs	r0, #2
}
 800833a:	bd08      	pop	{r3, pc}

0800833c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800833c:	b119      	cbz	r1, 8008346 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800833e:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8008342:	2000      	movs	r0, #0
 8008344:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008346:	2002      	movs	r0, #2
  }

  return status;
}
 8008348:	4770      	bx	lr

0800834a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800834a:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800834c:	f017 ffc6 	bl	80202dc <USBD_LL_Start>

  return USBD_OK;
}
 8008350:	2000      	movs	r0, #0
 8008352:	bd08      	pop	{r3, pc}

08008354 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008354:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8008356:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800835a:	b90b      	cbnz	r3, 8008360 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800835c:	2002      	movs	r0, #2
 800835e:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4798      	blx	r3
 8008364:	2800      	cmp	r0, #0
 8008366:	d1f9      	bne.n	800835c <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008368:	bd08      	pop	{r3, pc}

0800836a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800836a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800836c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	4798      	blx	r3
  return USBD_OK;
}
 8008374:	2000      	movs	r0, #0
 8008376:	bd08      	pop	{r3, pc}

08008378 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800837c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8008380:	4628      	mov	r0, r5
 8008382:	f000 faf2 	bl	800896a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008386:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008388:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 800838c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8008390:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8008394:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8008398:	f001 031f 	and.w	r3, r1, #31
 800839c:	2b01      	cmp	r3, #1
 800839e:	d00e      	beq.n	80083be <USBD_LL_SetupStage+0x46>
 80083a0:	d307      	bcc.n	80083b2 <USBD_LL_SetupStage+0x3a>
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d010      	beq.n	80083c8 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083a6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80083aa:	4620      	mov	r0, r4
 80083ac:	f017 ffc2 	bl	8020334 <USBD_LL_StallEP>
    break;
 80083b0:	e003      	b.n	80083ba <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80083b2:	4629      	mov	r1, r5
 80083b4:	4620      	mov	r0, r4
 80083b6:	f000 f901 	bl	80085bc <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80083ba:	2000      	movs	r0, #0
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80083be:	4629      	mov	r1, r5
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fa25 	bl	8008810 <USBD_StdItfReq>
    break;
 80083c6:	e7f8      	b.n	80083ba <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 80083c8:	4629      	mov	r1, r5
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fa45 	bl	800885a <USBD_StdEPReq>
    break;
 80083d0:	e7f3      	b.n	80083ba <USBD_LL_SetupStage+0x42>

080083d2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083d2:	b570      	push	{r4, r5, r6, lr}
 80083d4:	4605      	mov	r5, r0
 80083d6:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80083d8:	bb39      	cbnz	r1, 800842a <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083da:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d11e      	bne.n	8008420 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 80083e2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80083e6:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d90b      	bls.n	8008406 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80083ee:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80083f0:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80083f2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80083f6:	bf8c      	ite	hi
 80083f8:	b29a      	uxthhi	r2, r3
 80083fa:	b292      	uxthls	r2, r2
 80083fc:	4631      	mov	r1, r6
 80083fe:	f000 fb13 	bl	8008a28 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008402:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8008404:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008406:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	b123      	cbz	r3, 8008418 <USBD_LL_DataOutStage+0x46>
 800840e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008412:	2a03      	cmp	r2, #3
 8008414:	d100      	bne.n	8008418 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8008416:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008418:	4628      	mov	r0, r5
 800841a:	f000 fb0d 	bl	8008a38 <USBD_CtlSendStatus>
 800841e:	e7f0      	b.n	8008402 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008420:	2b05      	cmp	r3, #5
 8008422:	d1ee      	bne.n	8008402 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 8008424:	f017 ff86 	bl	8020334 <USBD_LL_StallEP>
 8008428:	e7eb      	b.n	8008402 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 800842a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	b12b      	cbz	r3, 800843e <USBD_LL_DataOutStage+0x6c>
 8008432:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008436:	2a03      	cmp	r2, #3
 8008438:	d101      	bne.n	800843e <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 800843a:	4798      	blx	r3
 800843c:	e7e1      	b.n	8008402 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800843e:	2002      	movs	r0, #2
}
 8008440:	bd70      	pop	{r4, r5, r6, pc}

08008442 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008442:	b570      	push	{r4, r5, r6, lr}
 8008444:	4613      	mov	r3, r2
 8008446:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008448:	460e      	mov	r6, r1
 800844a:	2900      	cmp	r1, #0
 800844c:	d148      	bne.n	80084e0 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800844e:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8008452:	2a02      	cmp	r2, #2
 8008454:	d13d      	bne.n	80084d2 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008456:	6a05      	ldr	r5, [r0, #32]
 8008458:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800845a:	4295      	cmp	r5, r2
 800845c:	d914      	bls.n	8008488 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800845e:	1aaa      	subs	r2, r5, r2
 8008460:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008462:	4619      	mov	r1, r3
 8008464:	b292      	uxth	r2, r2
 8008466:	f000 fac8 	bl	80089fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800846a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800846c:	461a      	mov	r2, r3
 800846e:	4619      	mov	r1, r3
 8008470:	4620      	mov	r0, r4
 8008472:	f017 ffab 	bl	80203cc <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008476:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800847a:	2b01      	cmp	r3, #1
 800847c:	f04f 0000 	mov.w	r0, #0
 8008480:	d13a      	bne.n	80084f8 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008482:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8008486:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008488:	69c3      	ldr	r3, [r0, #28]
 800848a:	fbb3 f5f2 	udiv	r5, r3, r2
 800848e:	fb02 3515 	mls	r5, r2, r5, r3
 8008492:	b965      	cbnz	r5, 80084ae <USBD_LL_DataInStage+0x6c>
 8008494:	429a      	cmp	r2, r3
 8008496:	d80a      	bhi.n	80084ae <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8008498:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800849c:	4293      	cmp	r3, r2
 800849e:	d206      	bcs.n	80084ae <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084a0:	462a      	mov	r2, r5
 80084a2:	f000 faaa 	bl	80089fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084a6:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80084aa:	462b      	mov	r3, r5
 80084ac:	e7de      	b.n	800846c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80084ae:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	b12b      	cbz	r3, 80084c2 <USBD_LL_DataInStage+0x80>
 80084b6:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80084ba:	2a03      	cmp	r2, #3
 80084bc:	d101      	bne.n	80084c2 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 80084be:	4620      	mov	r0, r4
 80084c0:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80084c2:	2180      	movs	r1, #128	; 0x80
 80084c4:	4620      	mov	r0, r4
 80084c6:	f017 ff35 	bl	8020334 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 fabf 	bl	8008a4e <USBD_CtlReceiveStatus>
 80084d0:	e7d1      	b.n	8008476 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80084d2:	f032 0304 	bics.w	r3, r2, #4
 80084d6:	d1ce      	bne.n	8008476 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80084d8:	2180      	movs	r1, #128	; 0x80
 80084da:	f017 ff2b 	bl	8020334 <USBD_LL_StallEP>
 80084de:	e7ca      	b.n	8008476 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80084e0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	b133      	cbz	r3, 80084f6 <USBD_LL_DataInStage+0xb4>
 80084e8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80084ec:	2a03      	cmp	r2, #3
 80084ee:	d102      	bne.n	80084f6 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80084f0:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80084f2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80084f4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80084f6:	2002      	movs	r0, #2
}
 80084f8:	bd70      	pop	{r4, r5, r6, pc}

080084fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80084fa:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084fc:	2200      	movs	r2, #0
{
 80084fe:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008500:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008502:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008504:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008506:	2340      	movs	r3, #64	; 0x40
 8008508:	f017 fef6 	bl	80202f8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800850c:	4633      	mov	r3, r6
 800850e:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008510:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008514:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008518:	2200      	movs	r2, #0
 800851a:	4620      	mov	r0, r4
 800851c:	f017 feec 	bl	80202f8 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008520:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008524:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008526:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008528:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800852a:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800852e:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008532:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008534:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8008538:	b123      	cbz	r3, 8008544 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800853a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800853e:	4620      	mov	r0, r4
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008544:	2000      	movs	r0, #0
 8008546:	bd70      	pop	{r4, r5, r6, pc}

08008548 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008548:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800854a:	2000      	movs	r0, #0
 800854c:	4770      	bx	lr

0800854e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800854e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008552:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008556:	2304      	movs	r3, #4
 8008558:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800855c:	2000      	movs	r0, #0
 800855e:	4770      	bx	lr

08008560 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8008560:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8008564:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8008568:	2000      	movs	r0, #0
 800856a:	4770      	bx	lr

0800856c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800856c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800856e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008572:	2a03      	cmp	r2, #3
 8008574:	d104      	bne.n	8008580 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8008576:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	b103      	cbz	r3, 8008580 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800857e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8008580:	2000      	movs	r0, #0
 8008582:	bd08      	pop	{r3, pc}

08008584 <USBD_LL_IsoINIncomplete>:
 8008584:	2000      	movs	r0, #0
 8008586:	4770      	bx	lr

08008588 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8008588:	2000      	movs	r0, #0
 800858a:	4770      	bx	lr

0800858c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800858c:	2000      	movs	r0, #0
 800858e:	4770      	bx	lr

08008590 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008590:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008592:	2201      	movs	r2, #1
 8008594:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008598:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 800859c:	7901      	ldrb	r1, [r0, #4]
 800859e:	6852      	ldr	r2, [r2, #4]
 80085a0:	4790      	blx	r2

  return USBD_OK;
}
 80085a2:	2000      	movs	r0, #0
 80085a4:	bd08      	pop	{r3, pc}

080085a6 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80085a6:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80085a8:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80085aa:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80085ac:	f017 fec2 	bl	8020334 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80085b0:	4620      	mov	r0, r4
 80085b2:	2100      	movs	r1, #0
}
 80085b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80085b8:	f017 bebc 	b.w	8020334 <USBD_LL_StallEP>

080085bc <USBD_StdDevReq>:
{
 80085bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085be:	780b      	ldrb	r3, [r1, #0]
 80085c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085c4:	2b20      	cmp	r3, #32
{
 80085c6:	4604      	mov	r4, r0
 80085c8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ca:	d014      	beq.n	80085f6 <USBD_StdDevReq+0x3a>
 80085cc:	2b40      	cmp	r3, #64	; 0x40
 80085ce:	d012      	beq.n	80085f6 <USBD_StdDevReq+0x3a>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f040 809c 	bne.w	800870e <USBD_StdDevReq+0x152>
    switch (req->bRequest)
 80085d6:	784b      	ldrb	r3, [r1, #1]
 80085d8:	2b09      	cmp	r3, #9
 80085da:	f200 8097 	bhi.w	800870c <USBD_StdDevReq+0x150>
 80085de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80085e2:	00ef      	.short	0x00ef
 80085e4:	00950109 	.word	0x00950109
 80085e8:	00950102 	.word	0x00950102
 80085ec:	00130089 	.word	0x00130089
 80085f0:	00da0095 	.word	0x00da0095
 80085f4:	00a7      	.short	0x00a7
    pdev->pClass->Setup(pdev, req);
 80085f6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80085fa:	4629      	mov	r1, r5
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4620      	mov	r0, r4
 8008600:	4798      	blx	r3
}
 8008602:	2000      	movs	r0, #0
 8008604:	b003      	add	sp, #12
 8008606:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8008608:	8849      	ldrh	r1, [r1, #2]
 800860a:	0a0b      	lsrs	r3, r1, #8
 800860c:	3b01      	subs	r3, #1
 800860e:	2b0e      	cmp	r3, #14
 8008610:	d87c      	bhi.n	800870c <USBD_StdDevReq+0x150>
 8008612:	e8df f003 	tbb	[pc, r3]
 8008616:	2824      	.short	0x2824
 8008618:	5c7b7b35 	.word	0x5c7b7b35
 800861c:	7b7b7b65 	.word	0x7b7b7b65
 8008620:	7b7b7b7b 	.word	0x7b7b7b7b
 8008624:	08          	.byte	0x08
 8008625:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008626:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800862a:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800862c:	7c20      	ldrb	r0, [r4, #16]
 800862e:	f10d 0106 	add.w	r1, sp, #6
 8008632:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8008634:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008638:	b152      	cbz	r2, 8008650 <USBD_StdDevReq+0x94>
 800863a:	88eb      	ldrh	r3, [r5, #6]
 800863c:	b143      	cbz	r3, 8008650 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 800863e:	429a      	cmp	r2, r3
 8008640:	bf28      	it	cs
 8008642:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8008644:	4601      	mov	r1, r0
 8008646:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8008648:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800864c:	f000 f9c8 	bl	80089e0 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8008650:	88eb      	ldrh	r3, [r5, #6]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1d5      	bne.n	8008602 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8008656:	4620      	mov	r0, r4
 8008658:	f000 f9ee 	bl	8008a38 <USBD_CtlSendStatus>
 800865c:	e7d1      	b.n	8008602 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800865e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	e7e2      	b.n	800862c <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008666:	7c02      	ldrb	r2, [r0, #16]
 8008668:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800866c:	b932      	cbnz	r2, 800867c <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008670:	f10d 0006 	add.w	r0, sp, #6
 8008674:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008676:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008678:	7043      	strb	r3, [r0, #1]
 800867a:	e7db      	b.n	8008634 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	e7f7      	b.n	8008670 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8008680:	b2c9      	uxtb	r1, r1
 8008682:	2905      	cmp	r1, #5
 8008684:	d81c      	bhi.n	80086c0 <USBD_StdDevReq+0x104>
 8008686:	e8df f001 	tbb	[pc, r1]
 800868a:	0703      	.short	0x0703
 800868c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008690:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	e7c9      	b.n	800862c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008698:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	e7c5      	b.n	800862c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086a0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	e7c1      	b.n	800862c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086a8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	e7bd      	b.n	800862c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086b0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	e7b9      	b.n	800862c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086b8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	e7b5      	b.n	800862c <USBD_StdDevReq+0x70>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 80086c0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80086c4:	f10d 0206 	add.w	r2, sp, #6
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	4798      	blx	r3
 80086cc:	e7b2      	b.n	8008634 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80086ce:	7c03      	ldrb	r3, [r0, #16]
 80086d0:	b9e3      	cbnz	r3, 800870c <USBD_StdDevReq+0x150>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086d2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80086d6:	f10d 0006 	add.w	r0, sp, #6
 80086da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086dc:	4798      	blx	r3
 80086de:	e7a9      	b.n	8008634 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80086e0:	7c03      	ldrb	r3, [r0, #16]
 80086e2:	b99b      	cbnz	r3, 800870c <USBD_StdDevReq+0x150>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80086e4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80086e8:	f10d 0006 	add.w	r0, sp, #6
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086f0:	2307      	movs	r3, #7
 80086f2:	e7c1      	b.n	8008678 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086f4:	888b      	ldrh	r3, [r1, #4]
 80086f6:	b94b      	cbnz	r3, 800870c <USBD_StdDevReq+0x150>
 80086f8:	88cb      	ldrh	r3, [r1, #6]
 80086fa:	b93b      	cbnz	r3, 800870c <USBD_StdDevReq+0x150>
 80086fc:	884d      	ldrh	r5, [r1, #2]
 80086fe:	2d7f      	cmp	r5, #127	; 0x7f
 8008700:	d804      	bhi.n	800870c <USBD_StdDevReq+0x150>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008702:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008706:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008708:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	d103      	bne.n	8008714 <USBD_StdDevReq+0x158>
      USBD_CtlError(pdev, req);
 800870c:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 800870e:	f7ff ff4a 	bl	80085a6 <USBD_CtlError.constprop.1>
    break;
 8008712:	e776      	b.n	8008602 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8008714:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008718:	f017 fe3c 	bl	8020394 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800871c:	4620      	mov	r0, r4
 800871e:	f000 f98b 	bl	8008a38 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008722:	b11d      	cbz	r5, 800872c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008724:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008726:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800872a:	e76a      	b.n	8008602 <USBD_StdDevReq+0x46>
 800872c:	2301      	movs	r3, #1
 800872e:	e7fa      	b.n	8008726 <USBD_StdDevReq+0x16a>
  cfgidx = (uint8_t)(req->wValue);
 8008730:	7889      	ldrb	r1, [r1, #2]
 8008732:	4d36      	ldr	r5, [pc, #216]	; (800880c <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008734:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008736:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008738:	d8e8      	bhi.n	800870c <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 800873a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800873e:	2b02      	cmp	r3, #2
 8008740:	d008      	beq.n	8008754 <USBD_StdDevReq+0x198>
 8008742:	2b03      	cmp	r3, #3
 8008744:	d015      	beq.n	8008772 <USBD_StdDevReq+0x1b6>
      USBD_CtlError(pdev, req);
 8008746:	f7ff ff2e 	bl	80085a6 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 800874a:	7829      	ldrb	r1, [r5, #0]
 800874c:	4620      	mov	r0, r4
 800874e:	f7ff fe0c 	bl	800836a <USBD_ClrClassConfig>
 8008752:	e756      	b.n	8008602 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8008754:	2900      	cmp	r1, #0
 8008756:	f43f af7e 	beq.w	8008656 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 800875a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800875c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800875e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008760:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008764:	4620      	mov	r0, r4
 8008766:	f7ff fdf5 	bl	8008354 <USBD_SetClassConfig>
 800876a:	2802      	cmp	r0, #2
 800876c:	f47f af73 	bne.w	8008656 <USBD_StdDevReq+0x9a>
 8008770:	e7cc      	b.n	800870c <USBD_StdDevReq+0x150>
      if (cfgidx == 0U)
 8008772:	b931      	cbnz	r1, 8008782 <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008774:	2302      	movs	r3, #2
 8008776:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800877a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800877c:	f7ff fdf5 	bl	800836a <USBD_ClrClassConfig>
 8008780:	e769      	b.n	8008656 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8008782:	6841      	ldr	r1, [r0, #4]
 8008784:	2901      	cmp	r1, #1
 8008786:	f43f af66 	beq.w	8008656 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800878a:	b2c9      	uxtb	r1, r1
 800878c:	f7ff fded 	bl	800836a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008790:	7829      	ldrb	r1, [r5, #0]
 8008792:	6061      	str	r1, [r4, #4]
 8008794:	e7e6      	b.n	8008764 <USBD_StdDevReq+0x1a8>
  if (req->wLength != 1U)
 8008796:	88ca      	ldrh	r2, [r1, #6]
 8008798:	2a01      	cmp	r2, #1
 800879a:	d1b7      	bne.n	800870c <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 800879c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0b3      	beq.n	800870c <USBD_StdDevReq+0x150>
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d903      	bls.n	80087b0 <USBD_StdDevReq+0x1f4>
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d1af      	bne.n	800870c <USBD_StdDevReq+0x150>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80087ac:	1d01      	adds	r1, r0, #4
 80087ae:	e003      	b.n	80087b8 <USBD_StdDevReq+0x1fc>
      pdev->dev_default_config = 0U;
 80087b0:	4601      	mov	r1, r0
 80087b2:	2300      	movs	r3, #0
 80087b4:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 f911 	bl	80089e0 <USBD_CtlSendData>
 80087be:	e720      	b.n	8008602 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 80087c0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80087c4:	3b01      	subs	r3, #1
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d8a0      	bhi.n	800870c <USBD_StdDevReq+0x150>
    if(req->wLength != 0x2U)
 80087ca:	88cb      	ldrh	r3, [r1, #6]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d19d      	bne.n	800870c <USBD_StdDevReq+0x150>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087d0:	2301      	movs	r3, #1
 80087d2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80087d4:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 80087d8:	b10b      	cbz	r3, 80087de <USBD_StdDevReq+0x222>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087da:	2303      	movs	r3, #3
 80087dc:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087de:	2202      	movs	r2, #2
 80087e0:	f104 010c 	add.w	r1, r4, #12
 80087e4:	e7e8      	b.n	80087b8 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087e6:	884b      	ldrh	r3, [r1, #2]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	f47f af0a 	bne.w	8008602 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 80087ee:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80087f2:	e730      	b.n	8008656 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 80087f4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80087f8:	3b01      	subs	r3, #1
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d886      	bhi.n	800870c <USBD_StdDevReq+0x150>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087fe:	884b      	ldrh	r3, [r1, #2]
 8008800:	2b01      	cmp	r3, #1
 8008802:	f47f aefe 	bne.w	8008602 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	e7f1      	b.n	80087ee <USBD_StdDevReq+0x232>
 800880a:	bf00      	nop
 800880c:	200015e4 	.word	0x200015e4

08008810 <USBD_StdItfReq>:
{
 8008810:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008812:	780b      	ldrb	r3, [r1, #0]
 8008814:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008818:	2b20      	cmp	r3, #32
{
 800881a:	4604      	mov	r4, r0
 800881c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800881e:	d002      	beq.n	8008826 <USBD_StdItfReq+0x16>
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	d000      	beq.n	8008826 <USBD_StdItfReq+0x16>
 8008824:	b9b3      	cbnz	r3, 8008854 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8008826:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800882a:	3b01      	subs	r3, #1
 800882c:	2b02      	cmp	r3, #2
 800882e:	d810      	bhi.n	8008852 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008830:	792b      	ldrb	r3, [r5, #4]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d80d      	bhi.n	8008852 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008836:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800883a:	4629      	mov	r1, r5
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	4620      	mov	r0, r4
 8008840:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008842:	88eb      	ldrh	r3, [r5, #6]
 8008844:	b91b      	cbnz	r3, 800884e <USBD_StdItfReq+0x3e>
 8008846:	b910      	cbnz	r0, 800884e <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8008848:	4620      	mov	r0, r4
 800884a:	f000 f8f5 	bl	8008a38 <USBD_CtlSendStatus>
}
 800884e:	2000      	movs	r0, #0
 8008850:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8008852:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8008854:	f7ff fea7 	bl	80085a6 <USBD_CtlError.constprop.1>
    break;
 8008858:	e7f9      	b.n	800884e <USBD_StdItfReq+0x3e>

0800885a <USBD_StdEPReq>:
{
 800885a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800885c:	780a      	ldrb	r2, [r1, #0]
 800885e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008862:	2a20      	cmp	r2, #32
{
 8008864:	4604      	mov	r4, r0
 8008866:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008868:	d013      	beq.n	8008892 <USBD_StdEPReq+0x38>
 800886a:	2a40      	cmp	r2, #64	; 0x40
 800886c:	d011      	beq.n	8008892 <USBD_StdEPReq+0x38>
 800886e:	b96a      	cbnz	r2, 800888c <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8008870:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008872:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8008874:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8008876:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8008878:	d01f      	beq.n	80088ba <USBD_StdEPReq+0x60>
 800887a:	d335      	bcc.n	80088e8 <USBD_StdEPReq+0x8e>
 800887c:	2d03      	cmp	r5, #3
 800887e:	d105      	bne.n	800888c <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8008880:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008884:	2a02      	cmp	r2, #2
 8008886:	d026      	beq.n	80088d6 <USBD_StdEPReq+0x7c>
 8008888:	2a03      	cmp	r2, #3
 800888a:	d00a      	beq.n	80088a2 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 800888c:	f7ff fe8b 	bl	80085a6 <USBD_CtlError.constprop.1>
    break;
 8008890:	e005      	b.n	800889e <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8008892:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8008896:	4619      	mov	r1, r3
 8008898:	6892      	ldr	r2, [r2, #8]
 800889a:	4620      	mov	r0, r4
 800889c:	4790      	blx	r2
}
 800889e:	2000      	movs	r0, #0
 80088a0:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 80088a2:	885a      	ldrh	r2, [r3, #2]
 80088a4:	b92a      	cbnz	r2, 80088b2 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088a6:	064a      	lsls	r2, r1, #25
 80088a8:	d003      	beq.n	80088b2 <USBD_StdEPReq+0x58>
 80088aa:	88db      	ldrh	r3, [r3, #6]
 80088ac:	b90b      	cbnz	r3, 80088b2 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 80088ae:	f017 fd41 	bl	8020334 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 f8c0 	bl	8008a38 <USBD_CtlSendStatus>
        break;
 80088b8:	e7f1      	b.n	800889e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80088ba:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80088be:	2a02      	cmp	r2, #2
 80088c0:	d009      	beq.n	80088d6 <USBD_StdEPReq+0x7c>
 80088c2:	2a03      	cmp	r2, #3
 80088c4:	d1e2      	bne.n	800888c <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80088c6:	885b      	ldrh	r3, [r3, #2]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e8      	bne.n	800889e <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 80088cc:	064d      	lsls	r5, r1, #25
 80088ce:	d0f0      	beq.n	80088b2 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80088d0:	f017 fd3e 	bl	8020350 <USBD_LL_ClearStallEP>
 80088d4:	e7ed      	b.n	80088b2 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088d6:	064b      	lsls	r3, r1, #25
 80088d8:	d017      	beq.n	800890a <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 80088da:	f017 fd2b 	bl	8020334 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80088de:	2180      	movs	r1, #128	; 0x80
 80088e0:	4620      	mov	r0, r4
 80088e2:	f017 fd27 	bl	8020334 <USBD_LL_StallEP>
 80088e6:	e7da      	b.n	800889e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80088e8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d00e      	beq.n	800890e <USBD_StdEPReq+0xb4>
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d1cb      	bne.n	800888c <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 80088f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80088f8:	f04f 0314 	mov.w	r3, #20
 80088fc:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008900:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8008904:	d012      	beq.n	800892c <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008906:	6992      	ldr	r2, [r2, #24]
 8008908:	b9da      	cbnz	r2, 8008942 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800890a:	4620      	mov	r0, r4
 800890c:	e7be      	b.n	800888c <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800890e:	0649      	lsls	r1, r1, #25
 8008910:	d1fb      	bne.n	800890a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008912:	0613      	lsls	r3, r2, #24
 8008914:	bf4c      	ite	mi
 8008916:	f100 0114 	addmi.w	r1, r0, #20
 800891a:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 800891e:	2300      	movs	r3, #0
 8008920:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008922:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008924:	4620      	mov	r0, r4
 8008926:	f000 f85b 	bl	80089e0 <USBD_CtlSendData>
          break;
 800892a:	e7b8      	b.n	800889e <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800892c:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8008930:	2a00      	cmp	r2, #0
 8008932:	d0ea      	beq.n	800890a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008934:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8008938:	fb03 0505 	mla	r5, r3, r5, r0
 800893c:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8008940:	e004      	b.n	800894c <USBD_StdEPReq+0xf2>
 8008942:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8008946:	fb05 3503 	mla	r5, r5, r3, r3
 800894a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800894c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8008950:	d103      	bne.n	800895a <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8008952:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008954:	2202      	movs	r2, #2
 8008956:	4629      	mov	r1, r5
 8008958:	e7e4      	b.n	8008924 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800895a:	4620      	mov	r0, r4
 800895c:	f017 fd06 	bl	802036c <USBD_LL_IsStallEP>
 8008960:	b108      	cbz	r0, 8008966 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8008962:	2301      	movs	r3, #1
 8008964:	e7f5      	b.n	8008952 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8008966:	6028      	str	r0, [r5, #0]
 8008968:	e7f4      	b.n	8008954 <USBD_StdEPReq+0xfa>

0800896a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800896a:	780b      	ldrb	r3, [r1, #0]
 800896c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800896e:	784b      	ldrb	r3, [r1, #1]
 8008970:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008972:	78ca      	ldrb	r2, [r1, #3]
 8008974:	788b      	ldrb	r3, [r1, #2]
 8008976:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800897a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800897c:	794a      	ldrb	r2, [r1, #5]
 800897e:	790b      	ldrb	r3, [r1, #4]
 8008980:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008984:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008986:	79ca      	ldrb	r2, [r1, #7]
 8008988:	798b      	ldrb	r3, [r1, #6]
 800898a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800898e:	80c3      	strh	r3, [r0, #6]
 8008990:	4770      	bx	lr

08008992 <USBD_CtlError>:
{
 8008992:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8008994:	2180      	movs	r1, #128	; 0x80
{
 8008996:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8008998:	f017 fccc 	bl	8020334 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800899c:	4620      	mov	r0, r4
 800899e:	2100      	movs	r1, #0
}
 80089a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80089a4:	f017 bcc6 	b.w	8020334 <USBD_LL_StallEP>

080089a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089a8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80089aa:	b188      	cbz	r0, 80089d0 <USBD_GetString+0x28>
 80089ac:	4605      	mov	r5, r0
 80089ae:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80089b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2c00      	cmp	r4, #0
 80089b8:	d1f9      	bne.n	80089ae <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089ba:	3301      	adds	r3, #1
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80089c0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089c2:	2303      	movs	r3, #3
 80089c4:	704b      	strb	r3, [r1, #1]
 80089c6:	3801      	subs	r0, #1
 80089c8:	2302      	movs	r3, #2
    while (*desc != '\0')
 80089ca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80089ce:	b905      	cbnz	r5, 80089d2 <USBD_GetString+0x2a>
 80089d0:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	b2d2      	uxtb	r2, r2
 80089d6:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 80089d8:	3302      	adds	r3, #2
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	548c      	strb	r4, [r1, r2]
 80089de:	e7f4      	b.n	80089ca <USBD_GetString+0x22>

080089e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80089e0:	b510      	push	{r4, lr}
 80089e2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089e4:	2202      	movs	r2, #2
 80089e6:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80089ea:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80089ec:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80089ee:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80089f0:	2100      	movs	r1, #0
 80089f2:	f017 fcdd 	bl	80203b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80089f6:	2000      	movs	r0, #0
 80089f8:	bd10      	pop	{r4, pc}

080089fa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80089fa:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80089fc:	4613      	mov	r3, r2
 80089fe:	460a      	mov	r2, r1
 8008a00:	2100      	movs	r1, #0
 8008a02:	f017 fcd5 	bl	80203b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008a06:	2000      	movs	r0, #0
 8008a08:	bd08      	pop	{r3, pc}

08008a0a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a0e:	2203      	movs	r2, #3
 8008a10:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008a14:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008a18:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8008a1a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008a1e:	2100      	movs	r1, #0
 8008a20:	f017 fcd4 	bl	80203cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a24:	2000      	movs	r0, #0
 8008a26:	bd10      	pop	{r4, pc}

08008a28 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008a28:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	460a      	mov	r2, r1
 8008a2e:	2100      	movs	r1, #0
 8008a30:	f017 fccc 	bl	80203cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a34:	2000      	movs	r0, #0
 8008a36:	bd08      	pop	{r3, pc}

08008a38 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008a38:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a3a:	2304      	movs	r3, #4
 8008a3c:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a40:	2300      	movs	r3, #0
 8008a42:	461a      	mov	r2, r3
 8008a44:	4619      	mov	r1, r3
 8008a46:	f017 fcb3 	bl	80203b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	bd08      	pop	{r3, pc}

08008a4e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008a4e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a50:	2305      	movs	r3, #5
 8008a52:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008a56:	2300      	movs	r3, #0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	f017 fcb6 	bl	80203cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a60:	2000      	movs	r0, #0
 8008a62:	bd08      	pop	{r3, pc}

08008a64 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008a64:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <disk_status+0x10>)
 8008a66:	181a      	adds	r2, r3, r0
 8008a68:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008a6c:	7a10      	ldrb	r0, [r2, #8]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	4718      	bx	r3
 8008a74:	20001610 	.word	0x20001610

08008a78 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <disk_initialize+0x1c>)
 8008a7a:	5c1a      	ldrb	r2, [r3, r0]
 8008a7c:	b942      	cbnz	r2, 8008a90 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8008a7e:	2201      	movs	r2, #1
 8008a80:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a82:	181a      	adds	r2, r3, r0
 8008a84:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008a88:	7a10      	ldrb	r0, [r2, #8]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4718      	bx	r3
  }
  return stat;
}
 8008a90:	2000      	movs	r0, #0
 8008a92:	4770      	bx	lr
 8008a94:	20001610 	.word	0x20001610

08008a98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a98:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a9a:	4c05      	ldr	r4, [pc, #20]	; (8008ab0 <disk_read+0x18>)
 8008a9c:	1825      	adds	r5, r4, r0
 8008a9e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008aa2:	6860      	ldr	r0, [r4, #4]
 8008aa4:	6884      	ldr	r4, [r0, #8]
 8008aa6:	7a28      	ldrb	r0, [r5, #8]
 8008aa8:	46a4      	mov	ip, r4
  return res;
}
 8008aaa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008aac:	4760      	bx	ip
 8008aae:	bf00      	nop
 8008ab0:	20001610 	.word	0x20001610

08008ab4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008ab4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ab6:	4c05      	ldr	r4, [pc, #20]	; (8008acc <disk_write+0x18>)
 8008ab8:	1825      	adds	r5, r4, r0
 8008aba:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008abe:	6860      	ldr	r0, [r4, #4]
 8008ac0:	68c4      	ldr	r4, [r0, #12]
 8008ac2:	7a28      	ldrb	r0, [r5, #8]
 8008ac4:	46a4      	mov	ip, r4
  return res;
}
 8008ac6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ac8:	4760      	bx	ip
 8008aca:	bf00      	nop
 8008acc:	20001610 	.word	0x20001610

08008ad0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <disk_ioctl+0x18>)
{
 8008ad2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ad4:	181c      	adds	r4, r3, r0
 8008ad6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008ada:	7a20      	ldrb	r0, [r4, #8]
 8008adc:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8008ade:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	4718      	bx	r3
 8008ae6:	bf00      	nop
 8008ae8:	20001610 	.word	0x20001610

08008aec <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8008aec:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8008aee:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8008af0:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8008af2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8008af6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008afa:	4770      	bx	lr

08008afc <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008afc:	0a0b      	lsrs	r3, r1, #8
 8008afe:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b00:	7043      	strb	r3, [r0, #1]
 8008b02:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008b04:	0e09      	lsrs	r1, r1, #24
 8008b06:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8008b08:	70c1      	strb	r1, [r0, #3]
 8008b0a:	4770      	bx	lr

08008b0c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008b0c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8008b0e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8008b12:	4290      	cmp	r0, r2
 8008b14:	d1fb      	bne.n	8008b0e <mem_set+0x2>
}
 8008b16:	4770      	bx	lr

08008b18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b18:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <chk_lock+0x58>)
 8008b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b1c:	2500      	movs	r5, #0
 8008b1e:	462a      	mov	r2, r5
 8008b20:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8008b22:	681e      	ldr	r6, [r3, #0]
 8008b24:	b1a6      	cbz	r6, 8008b50 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b26:	6807      	ldr	r7, [r0, #0]
 8008b28:	42be      	cmp	r6, r7
 8008b2a:	d112      	bne.n	8008b52 <chk_lock+0x3a>
 8008b2c:	685f      	ldr	r7, [r3, #4]
 8008b2e:	6886      	ldr	r6, [r0, #8]
 8008b30:	42b7      	cmp	r7, r6
 8008b32:	d10e      	bne.n	8008b52 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8008b34:	689f      	ldr	r7, [r3, #8]
 8008b36:	6946      	ldr	r6, [r0, #20]
 8008b38:	42b7      	cmp	r7, r6
 8008b3a:	d10a      	bne.n	8008b52 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b3c:	b9b1      	cbnz	r1, 8008b6c <chk_lock+0x54>
 8008b3e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8008b42:	8993      	ldrh	r3, [r2, #12]
 8008b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b48:	bf14      	ite	ne
 8008b4a:	2000      	movne	r0, #0
 8008b4c:	2010      	moveq	r0, #16
 8008b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8008b50:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b52:	3201      	adds	r2, #1
 8008b54:	2a02      	cmp	r2, #2
 8008b56:	f103 0310 	add.w	r3, r3, #16
 8008b5a:	d1e2      	bne.n	8008b22 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008b5c:	b10d      	cbz	r5, 8008b62 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b5e:	2000      	movs	r0, #0
 8008b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008b62:	2902      	cmp	r1, #2
 8008b64:	bf0c      	ite	eq
 8008b66:	2000      	moveq	r0, #0
 8008b68:	2012      	movne	r0, #18
 8008b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b6c:	2010      	movs	r0, #16
 8008b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b70:	200015ec 	.word	0x200015ec

08008b74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b74:	4a1c      	ldr	r2, [pc, #112]	; (8008be8 <inc_lock+0x74>)
 8008b76:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8008b78:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8008b7e:	6814      	ldr	r4, [r2, #0]
 8008b80:	42ac      	cmp	r4, r5
 8008b82:	d107      	bne.n	8008b94 <inc_lock+0x20>
 8008b84:	6857      	ldr	r7, [r2, #4]
 8008b86:	6884      	ldr	r4, [r0, #8]
 8008b88:	42a7      	cmp	r7, r4
 8008b8a:	d103      	bne.n	8008b94 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8008b8c:	6897      	ldr	r7, [r2, #8]
 8008b8e:	6944      	ldr	r4, [r0, #20]
 8008b90:	42a7      	cmp	r7, r4
 8008b92:	d01d      	beq.n	8008bd0 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b94:	3301      	adds	r3, #1
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	f102 0210 	add.w	r2, r2, #16
 8008b9c:	d1ef      	bne.n	8008b7e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b9e:	6833      	ldr	r3, [r6, #0]
 8008ba0:	b113      	cbz	r3, 8008ba8 <inc_lock+0x34>
 8008ba2:	6933      	ldr	r3, [r6, #16]
 8008ba4:	b9eb      	cbnz	r3, 8008be2 <inc_lock+0x6e>
 8008ba6:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8008ba8:	011c      	lsls	r4, r3, #4
 8008baa:	1932      	adds	r2, r6, r4
 8008bac:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8008bae:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8008bb0:	6940      	ldr	r0, [r0, #20]
 8008bb2:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8008bb4:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8008bb6:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8008bb8:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008bba:	b979      	cbnz	r1, 8008bdc <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008bbc:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008bc0:	8992      	ldrh	r2, [r2, #12]
 8008bc2:	3201      	adds	r2, #1
 8008bc4:	b292      	uxth	r2, r2
 8008bc6:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8008bca:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008bcc:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8008bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	d0f3      	beq.n	8008bbc <inc_lock+0x48>
 8008bd4:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008bd8:	8992      	ldrh	r2, [r2, #12]
 8008bda:	b912      	cbnz	r2, 8008be2 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008be0:	e7f1      	b.n	8008bc6 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008be2:	2000      	movs	r0, #0
 8008be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be6:	bf00      	nop
 8008be8:	200015ec 	.word	0x200015ec

08008bec <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008bec:	3801      	subs	r0, #1
 8008bee:	2801      	cmp	r0, #1
 8008bf0:	d80e      	bhi.n	8008c10 <dec_lock+0x24>
		n = Files[i].ctr;
 8008bf2:	4a09      	ldr	r2, [pc, #36]	; (8008c18 <dec_lock+0x2c>)
 8008bf4:	0103      	lsls	r3, r0, #4
 8008bf6:	18d1      	adds	r1, r2, r3
 8008bf8:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8008bfa:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8008bfe:	b280      	uxth	r0, r0
 8008c00:	b108      	cbz	r0, 8008c06 <dec_lock+0x1a>
 8008c02:	1e48      	subs	r0, r1, #1
 8008c04:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8008c06:	18d1      	adds	r1, r2, r3
 8008c08:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c0a:	b918      	cbnz	r0, 8008c14 <dec_lock+0x28>
 8008c0c:	50d0      	str	r0, [r2, r3]
 8008c0e:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c10:	2002      	movs	r0, #2
 8008c12:	4770      	bx	lr
		res = FR_OK;
 8008c14:	2000      	movs	r0, #0
	}
	return res;
}
 8008c16:	4770      	bx	lr
 8008c18:	200015ec 	.word	0x200015ec

08008c1c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c1c:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8008c1e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c20:	3b02      	subs	r3, #2
 8008c22:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8008c24:	bf3d      	ittte	cc
 8008c26:	8943      	ldrhcc	r3, [r0, #10]
 8008c28:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 8008c2a:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c2e:	2000      	movcs	r0, #0
}
 8008c30:	4770      	bx	lr

08008c32 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008c32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 8008c34:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 8008c36:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008c38:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	fbb1 f1f3 	udiv	r1, r1, r3
 8008c40:	8963      	ldrh	r3, [r4, #10]
 8008c42:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c46:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008c48:	b130      	cbz	r0, 8008c58 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008c4a:	4281      	cmp	r1, r0
 8008c4c:	d302      	bcc.n	8008c54 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008c4e:	1a09      	subs	r1, r1, r0
 8008c50:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c52:	e7f8      	b.n	8008c46 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008c54:	6850      	ldr	r0, [r2, #4]
 8008c56:	4408      	add	r0, r1
}
 8008c58:	bd10      	pop	{r4, pc}

08008c5a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008c5a:	6802      	ldr	r2, [r0, #0]
{
 8008c5c:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008c5e:	b152      	cbz	r2, 8008c76 <get_ldnumber+0x1c>
 8008c60:	4611      	mov	r1, r2
 8008c62:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c68:	2c20      	cmp	r4, #32
 8008c6a:	d90c      	bls.n	8008c86 <get_ldnumber+0x2c>
 8008c6c:	2c3a      	cmp	r4, #58	; 0x3a
 8008c6e:	d1f8      	bne.n	8008c62 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8008c70:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008c72:	428b      	cmp	r3, r1
 8008c74:	d002      	beq.n	8008c7c <get_ldnumber+0x22>
	int vol = -1;
 8008c76:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008c7a:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008c7c:	7812      	ldrb	r2, [r2, #0]
 8008c7e:	2a30      	cmp	r2, #48	; 0x30
 8008c80:	d1f9      	bne.n	8008c76 <get_ldnumber+0x1c>
					*path = ++tt;
 8008c82:	3301      	adds	r3, #1
 8008c84:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8008c86:	2000      	movs	r0, #0
 8008c88:	bd10      	pop	{r4, pc}

08008c8a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008c8a:	b538      	push	{r3, r4, r5, lr}
 8008c8c:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008c8e:	4604      	mov	r4, r0
 8008c90:	b918      	cbnz	r0, 8008c9a <validate+0x10>
		*fs = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8008c96:	2009      	movs	r0, #9
 8008c98:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008c9a:	6803      	ldr	r3, [r0, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d0f8      	beq.n	8008c92 <validate+0x8>
 8008ca0:	781a      	ldrb	r2, [r3, #0]
 8008ca2:	2a00      	cmp	r2, #0
 8008ca4:	d0f5      	beq.n	8008c92 <validate+0x8>
 8008ca6:	88d9      	ldrh	r1, [r3, #6]
 8008ca8:	8882      	ldrh	r2, [r0, #4]
 8008caa:	4291      	cmp	r1, r2
 8008cac:	d1f1      	bne.n	8008c92 <validate+0x8>
 8008cae:	7858      	ldrb	r0, [r3, #1]
 8008cb0:	f7ff fed8 	bl	8008a64 <disk_status>
 8008cb4:	f010 0001 	ands.w	r0, r0, #1
 8008cb8:	d1eb      	bne.n	8008c92 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}

08008cc0 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008cc0:	3801      	subs	r0, #1
 8008cc2:	440a      	add	r2, r1
			*d++ = *s++;
 8008cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc8:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8008ccc:	4291      	cmp	r1, r2
 8008cce:	d1f9      	bne.n	8008cc4 <mem_cpy.part.0+0x4>
}
 8008cd0:	4770      	bx	lr

08008cd2 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8008cd2:	7eca      	ldrb	r2, [r1, #27]
 8008cd4:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8008cd6:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008cd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8008cdc:	bf01      	itttt	eq
 8008cde:	7d48      	ldrbeq	r0, [r1, #21]
 8008ce0:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008ce2:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008ce6:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	4770      	bx	lr

08008cee <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8008cee:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008cf2:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8008cf4:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8008cf6:	7803      	ldrb	r3, [r0, #0]
 8008cf8:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008cfa:	bf01      	itttt	eq
 8008cfc:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008cfe:	750a      	strbeq	r2, [r1, #20]
 8008d00:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8008d02:	754a      	strbeq	r2, [r1, #21]
 8008d04:	4770      	bx	lr

08008d06 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008d08:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008d0a:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008d0e:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008d10:	2301      	movs	r3, #1
 8008d12:	462a      	mov	r2, r5
 8008d14:	4639      	mov	r1, r7
 8008d16:	7840      	ldrb	r0, [r0, #1]
 8008d18:	f7ff fecc 	bl	8008ab4 <disk_write>
 8008d1c:	b9a0      	cbnz	r0, 8008d48 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d20:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 8008d22:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d24:	1aeb      	subs	r3, r5, r3
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d301      	bcc.n	8008d2e <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d2e:	78a6      	ldrb	r6, [r4, #2]
 8008d30:	2e01      	cmp	r6, #1
 8008d32:	d9fa      	bls.n	8008d2a <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8008d34:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008d36:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8008d38:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4639      	mov	r1, r7
 8008d40:	f7ff feb8 	bl	8008ab4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d44:	3e01      	subs	r6, #1
 8008d46:	e7f3      	b.n	8008d30 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8008d48:	2001      	movs	r0, #1
}
 8008d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d4c <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008d4c:	78c3      	ldrb	r3, [r0, #3]
 8008d4e:	b10b      	cbz	r3, 8008d54 <sync_window+0x8>
 8008d50:	f7ff bfd9 	b.w	8008d06 <sync_window.part.4>
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	4770      	bx	lr

08008d58 <sync_fs>:
{
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008d5c:	f7ff fff6 	bl	8008d4c <sync_window>
 8008d60:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d141      	bne.n	8008dea <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008d66:	7823      	ldrb	r3, [r4, #0]
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d136      	bne.n	8008dda <sync_fs+0x82>
 8008d6c:	7927      	ldrb	r7, [r4, #4]
 8008d6e:	2f01      	cmp	r7, #1
 8008d70:	d133      	bne.n	8008dda <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8008d72:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8008d76:	4601      	mov	r1, r0
 8008d78:	89a2      	ldrh	r2, [r4, #12]
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7ff fec6 	bl	8008b0c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8008d80:	2355      	movs	r3, #85	; 0x55
 8008d82:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8008d86:	23aa      	movs	r3, #170	; 0xaa
 8008d88:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8008d8c:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8008d8e:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8008d90:	2172      	movs	r1, #114	; 0x72
 8008d92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8008d96:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8008d9a:	2361      	movs	r3, #97	; 0x61
 8008d9c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8008da0:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8008da4:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 8008da8:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8008dac:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8008db0:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008db4:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008db8:	6961      	ldr	r1, [r4, #20]
 8008dba:	f7ff fe9f 	bl	8008afc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008dbe:	6921      	ldr	r1, [r4, #16]
 8008dc0:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008dc4:	f7ff fe9a 	bl	8008afc <st_dword>
			fs->winsect = fs->volbase + 1;
 8008dc8:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008dca:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8008dcc:	3201      	adds	r2, #1
 8008dce:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	f7ff fe6e 	bl	8008ab4 <disk_write>
			fs->fsi_flag = 0;
 8008dd8:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4611      	mov	r1, r2
 8008dde:	7860      	ldrb	r0, [r4, #1]
 8008de0:	f7ff fe76 	bl	8008ad0 <disk_ioctl>
 8008de4:	3000      	adds	r0, #0
 8008de6:	bf18      	it	ne
 8008de8:	2001      	movne	r0, #1
}
 8008dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008dec <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008dec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008dee:	428b      	cmp	r3, r1
{
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	4606      	mov	r6, r0
 8008df4:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008df6:	d012      	beq.n	8008e1e <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8008df8:	f7ff ffa8 	bl	8008d4c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	b960      	cbnz	r0, 8008e1a <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008e00:	462a      	mov	r2, r5
 8008e02:	2301      	movs	r3, #1
 8008e04:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8008e08:	7870      	ldrb	r0, [r6, #1]
 8008e0a:	f7ff fe45 	bl	8008a98 <disk_read>
 8008e0e:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8008e10:	bf1c      	itt	ne
 8008e12:	f04f 35ff 	movne.w	r5, #4294967295
 8008e16:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008e18:	6335      	str	r5, [r6, #48]	; 0x30
}
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008e1e:	2400      	movs	r4, #0
 8008e20:	e7fb      	b.n	8008e1a <move_window+0x2e>
	...

08008e24 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008e24:	2300      	movs	r3, #0
{
 8008e26:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008e28:	70c3      	strb	r3, [r0, #3]
 8008e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2e:	6303      	str	r3, [r0, #48]	; 0x30
{
 8008e30:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008e32:	f7ff ffdb 	bl	8008dec <move_window>
 8008e36:	bb30      	cbnz	r0, 8008e86 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8008e38:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008e3c:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8008e40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008e44:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d11e      	bne.n	8008e8a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008e4c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008e50:	2be9      	cmp	r3, #233	; 0xe9
 8008e52:	d005      	beq.n	8008e60 <check_fs+0x3c>
 8008e54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e56:	4a10      	ldr	r2, [pc, #64]	; (8008e98 <check_fs+0x74>)
 8008e58:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d116      	bne.n	8008e8e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008e60:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8008e64:	f7ff fe42 	bl	8008aec <ld_dword>
 8008e68:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <check_fs+0x78>)
 8008e6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008e6e:	4298      	cmp	r0, r3
 8008e70:	d00f      	beq.n	8008e92 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008e72:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8008e76:	f7ff fe39 	bl	8008aec <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008e7a:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <check_fs+0x7c>)
 8008e7c:	4298      	cmp	r0, r3
 8008e7e:	bf14      	ite	ne
 8008e80:	2002      	movne	r0, #2
 8008e82:	2000      	moveq	r0, #0
 8008e84:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008e86:	2004      	movs	r0, #4
 8008e88:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008e8a:	2003      	movs	r0, #3
 8008e8c:	bd10      	pop	{r4, pc}
	return 2;
 8008e8e:	2002      	movs	r0, #2
 8008e90:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008e92:	2000      	movs	r0, #0
}
 8008e94:	bd10      	pop	{r4, pc}
 8008e96:	bf00      	nop
 8008e98:	009000eb 	.word	0x009000eb
 8008e9c:	00544146 	.word	0x00544146
 8008ea0:	33544146 	.word	0x33544146

08008ea4 <find_volume>:
{
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8008ea8:	2300      	movs	r3, #0
{
 8008eaa:	b085      	sub	sp, #20
	*rfs = 0;
 8008eac:	600b      	str	r3, [r1, #0]
{
 8008eae:	460f      	mov	r7, r1
 8008eb0:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8008eb2:	f7ff fed2 	bl	8008c5a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008eb6:	1e06      	subs	r6, r0, #0
 8008eb8:	f2c0 815e 	blt.w	8009178 <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008ebc:	4bb2      	ldr	r3, [pc, #712]	; (8009188 <find_volume+0x2e4>)
 8008ebe:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	f000 815a 	beq.w	800917c <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 8008ec8:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008eca:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ecc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008ed0:	b173      	cbz	r3, 8008ef0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8008ed2:	7860      	ldrb	r0, [r4, #1]
 8008ed4:	f7ff fdc6 	bl	8008a64 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008ed8:	07c1      	lsls	r1, r0, #31
 8008eda:	d409      	bmi.n	8008ef0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008edc:	2d00      	cmp	r5, #0
 8008ede:	f000 814f 	beq.w	8009180 <find_volume+0x2dc>
 8008ee2:	f010 0004 	ands.w	r0, r0, #4
 8008ee6:	d000      	beq.n	8008eea <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8008ee8:	200a      	movs	r0, #10
}
 8008eea:	b005      	add	sp, #20
 8008eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8008ef0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ef2:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8008ef4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ef6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ef8:	f7ff fdbe 	bl	8008a78 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008efc:	07c2      	lsls	r2, r0, #31
 8008efe:	f100 8141 	bmi.w	8009184 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008f02:	b10d      	cbz	r5, 8008f08 <find_volume+0x64>
 8008f04:	0743      	lsls	r3, r0, #29
 8008f06:	d4ef      	bmi.n	8008ee8 <find_volume+0x44>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008f08:	f104 020c 	add.w	r2, r4, #12
 8008f0c:	2102      	movs	r1, #2
 8008f0e:	7860      	ldrb	r0, [r4, #1]
 8008f10:	f7ff fdde 	bl	8008ad0 <disk_ioctl>
 8008f14:	b108      	cbz	r0, 8008f1a <find_volume+0x76>
 8008f16:	2001      	movs	r0, #1
 8008f18:	e7e7      	b.n	8008eea <find_volume+0x46>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8008f20:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8008f24:	d8f7      	bhi.n	8008f16 <find_volume+0x72>
 8008f26:	1e5e      	subs	r6, r3, #1
 8008f28:	401e      	ands	r6, r3
 8008f2a:	d1f4      	bne.n	8008f16 <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f7ff ff78 	bl	8008e24 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008f34:	2802      	cmp	r0, #2
 8008f36:	f040 8101 	bne.w	800913c <find_volume+0x298>
 8008f3a:	f504 71fd 	add.w	r1, r4, #506	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008f3e:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8008f42:	b110      	cbz	r0, 8008f4a <find_volume+0xa6>
 8008f44:	4608      	mov	r0, r1
 8008f46:	f7ff fdd1 	bl	8008aec <ld_dword>
 8008f4a:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f4e:	3601      	adds	r6, #1
 8008f50:	2e04      	cmp	r6, #4
 8008f52:	f101 0110 	add.w	r1, r1, #16
 8008f56:	d1f2      	bne.n	8008f3e <find_volume+0x9a>
 8008f58:	2500      	movs	r5, #0
			bsect = br[i];
 8008f5a:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008f5e:	2e00      	cmp	r6, #0
 8008f60:	f000 80e4 	beq.w	800912c <find_volume+0x288>
 8008f64:	4631      	mov	r1, r6
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff ff5c 	bl	8008e24 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008f6c:	2801      	cmp	r0, #1
 8008f6e:	f200 80de 	bhi.w	800912e <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8008f72:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008f76:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008f7a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8008f7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f82:	4598      	cmp	r8, r3
 8008f84:	f040 80e0 	bne.w	8009148 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008f88:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8008f8c:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008f90:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8008f94:	d104      	bne.n	8008fa0 <find_volume+0xfc>
 8008f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f9a:	f7ff fda7 	bl	8008aec <ld_dword>
 8008f9e:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008fa0:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8008fa4:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008fa6:	1e7b      	subs	r3, r7, #1
 8008fa8:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008faa:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008fac:	f200 80cc 	bhi.w	8009148 <find_volume+0x2a4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008fb0:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 8008fb4:	fa1f f389 	uxth.w	r3, r9
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008fb8:	434f      	muls	r7, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008fba:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 80c3 	beq.w	8009148 <find_volume+0x2a4>
 8008fc2:	f109 33ff 	add.w	r3, r9, #4294967295
 8008fc6:	ea13 0f09 	tst.w	r3, r9
 8008fca:	f040 80bd 	bne.w	8009148 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008fce:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008fd2:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8008fd6:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008fda:	ea4f 1358 	mov.w	r3, r8, lsr #5
 8008fde:	fbba fbf3 	udiv	fp, sl, r3
 8008fe2:	fb03 a31b 	mls	r3, r3, fp, sl
 8008fe6:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008fe8:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 80ab 	bne.w	8009148 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008ff2:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8008ff6:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008ffa:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 8008ffe:	d103      	bne.n	8009008 <find_volume+0x164>
 8009000:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8009004:	f7ff fd72 	bl	8008aec <ld_dword>
	rv = rv << 8 | ptr[0];
 8009008:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800900c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009010:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8009014:	f000 8098 	beq.w	8009148 <find_volume+0x2a4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009018:	fa12 f38b 	uxtah	r3, r2, fp
 800901c:	443b      	add	r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800901e:	4298      	cmp	r0, r3
 8009020:	f0c0 8092 	bcc.w	8009148 <find_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009024:	1ac5      	subs	r5, r0, r3
 8009026:	fbb5 f5f9 	udiv	r5, r5, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800902a:	2d00      	cmp	r5, #0
 800902c:	f000 808c 	beq.w	8009148 <find_volume+0x2a4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009030:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8009034:	4285      	cmp	r5, r0
 8009036:	f200 8089 	bhi.w	800914c <find_volume+0x2a8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800903a:	f640 79f5 	movw	r9, #4085	; 0xff5
 800903e:	454d      	cmp	r5, r9
 8009040:	bf8c      	ite	hi
 8009042:	f04f 0902 	movhi.w	r9, #2
 8009046:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800904a:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800904c:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 800904e:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 8009050:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009054:	61a5      	str	r5, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009056:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009058:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800905a:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800905c:	d179      	bne.n	8009152 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 800905e:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8009062:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009066:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800906a:	d16d      	bne.n	8009148 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800906c:	f1ba 0f00 	cmp.w	sl, #0
 8009070:	d16a      	bne.n	8009148 <find_volume+0x2a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009072:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8009076:	f7ff fd39 	bl	8008aec <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800907a:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800907c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800907e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009082:	441d      	add	r5, r3
 8009084:	fbb5 f8f8 	udiv	r8, r5, r8
 8009088:	4541      	cmp	r1, r8
 800908a:	d35d      	bcc.n	8009148 <find_volume+0x2a4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800908c:	f04f 33ff 	mov.w	r3, #4294967295
 8009090:	6163      	str	r3, [r4, #20]
 8009092:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009094:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8009098:	f04f 0380 	mov.w	r3, #128	; 0x80
 800909c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800909e:	d12f      	bne.n	8009100 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 80090a0:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 80090a4:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80090a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d127      	bne.n	8009100 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
 80090b0:	1c71      	adds	r1, r6, #1
 80090b2:	4620      	mov	r0, r4
 80090b4:	f7ff fe9a 	bl	8008dec <move_window>
 80090b8:	bb10      	cbnz	r0, 8009100 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 80090ba:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 80090be:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 80090c2:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80090c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80090c8:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d117      	bne.n	8009100 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80090d0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80090d4:	f7ff fd0a 	bl	8008aec <ld_dword>
 80090d8:	4b2c      	ldr	r3, [pc, #176]	; (800918c <find_volume+0x2e8>)
 80090da:	4298      	cmp	r0, r3
 80090dc:	d110      	bne.n	8009100 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80090de:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80090e2:	f7ff fd03 	bl	8008aec <ld_dword>
 80090e6:	4b2a      	ldr	r3, [pc, #168]	; (8009190 <find_volume+0x2ec>)
 80090e8:	4298      	cmp	r0, r3
 80090ea:	d109      	bne.n	8009100 <find_volume+0x25c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80090ec:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80090f0:	f7ff fcfc 	bl	8008aec <ld_dword>
 80090f4:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80090f6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80090fa:	f7ff fcf7 	bl	8008aec <ld_dword>
 80090fe:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8009100:	4a24      	ldr	r2, [pc, #144]	; (8009194 <find_volume+0x2f0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8009102:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8009106:	8813      	ldrh	r3, [r2, #0]
 8009108:	3301      	adds	r3, #1
 800910a:	b29b      	uxth	r3, r3
 800910c:	8013      	strh	r3, [r2, #0]
 800910e:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009110:	4b21      	ldr	r3, [pc, #132]	; (8009198 <find_volume+0x2f4>)
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	4294      	cmp	r4, r2
 8009116:	bf04      	itt	eq
 8009118:	2200      	moveq	r2, #0
 800911a:	601a      	streq	r2, [r3, #0]
 800911c:	691a      	ldr	r2, [r3, #16]
 800911e:	4294      	cmp	r4, r2
 8009120:	f04f 0000 	mov.w	r0, #0
 8009124:	f47f aee1 	bne.w	8008eea <find_volume+0x46>
 8009128:	6118      	str	r0, [r3, #16]
 800912a:	e6de      	b.n	8008eea <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800912c:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800912e:	3501      	adds	r5, #1
 8009130:	2d04      	cmp	r5, #4
 8009132:	f47f af12 	bne.w	8008f5a <find_volume+0xb6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009136:	2804      	cmp	r0, #4
 8009138:	d106      	bne.n	8009148 <find_volume+0x2a4>
 800913a:	e6ec      	b.n	8008f16 <find_volume+0x72>
 800913c:	2804      	cmp	r0, #4
 800913e:	f43f aeea 	beq.w	8008f16 <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009142:	2801      	cmp	r0, #1
 8009144:	f67f af15 	bls.w	8008f72 <find_volume+0xce>
 8009148:	200d      	movs	r0, #13
 800914a:	e6ce      	b.n	8008eea <find_volume+0x46>
		fmt = FS_FAT32;
 800914c:	f04f 0903 	mov.w	r9, #3
 8009150:	e77b      	b.n	800904a <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009152:	f1ba 0f00 	cmp.w	sl, #0
 8009156:	d0f7      	beq.n	8009148 <find_volume+0x2a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009158:	f1b9 0f02 	cmp.w	r9, #2
 800915c:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8009160:	bf18      	it	ne
 8009162:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009164:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009166:	bf18      	it	ne
 8009168:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800916c:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800916e:	bf0c      	ite	eq
 8009170:	4605      	moveq	r5, r0
 8009172:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8009176:	e782      	b.n	800907e <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009178:	200b      	movs	r0, #11
 800917a:	e6b6      	b.n	8008eea <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800917c:	200c      	movs	r0, #12
 800917e:	e6b4      	b.n	8008eea <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8009180:	4628      	mov	r0, r5
 8009182:	e6b2      	b.n	8008eea <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009184:	2003      	movs	r0, #3
 8009186:	e6b0      	b.n	8008eea <find_volume+0x46>
 8009188:	200015e8 	.word	0x200015e8
 800918c:	41615252 	.word	0x41615252
 8009190:	61417272 	.word	0x61417272
 8009194:	2000160c 	.word	0x2000160c
 8009198:	200015ec 	.word	0x200015ec

0800919c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800919c:	2901      	cmp	r1, #1
{
 800919e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a2:	4604      	mov	r4, r0
 80091a4:	460d      	mov	r5, r1
 80091a6:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80091a8:	f240 808a 	bls.w	80092c0 <put_fat+0x124>
 80091ac:	6983      	ldr	r3, [r0, #24]
 80091ae:	4299      	cmp	r1, r3
 80091b0:	f080 8086 	bcs.w	80092c0 <put_fat+0x124>
		switch (fs->fs_type) {
 80091b4:	7803      	ldrb	r3, [r0, #0]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d049      	beq.n	800924e <put_fat+0xb2>
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d060      	beq.n	8009280 <put_fat+0xe4>
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d17e      	bne.n	80092c0 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 80091c2:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80091c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80091c8:	8983      	ldrh	r3, [r0, #12]
 80091ca:	fbba f3f3 	udiv	r3, sl, r3
 80091ce:	4419      	add	r1, r3
 80091d0:	f7ff fe0c 	bl	8008dec <move_window>
 80091d4:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 80091d6:	bb78      	cbnz	r0, 8009238 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	fbba f2f3 	udiv	r2, sl, r3
 80091de:	f104 0834 	add.w	r8, r4, #52	; 0x34
 80091e2:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80091e6:	f015 0501 	ands.w	r5, r5, #1
 80091ea:	bf1f      	itttt	ne
 80091ec:	f818 3002 	ldrbne.w	r3, [r8, r2]
 80091f0:	f003 010f 	andne.w	r1, r3, #15
 80091f4:	013b      	lslne	r3, r7, #4
 80091f6:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80091fa:	bf14      	ite	ne
 80091fc:	430b      	orrne	r3, r1
 80091fe:	b2fb      	uxtbeq	r3, r7
 8009200:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009204:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8009206:	2301      	movs	r3, #1
 8009208:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 800920a:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	fbb9 f3f3 	udiv	r3, r9, r3
 8009214:	4620      	mov	r0, r4
 8009216:	4419      	add	r1, r3
 8009218:	f7ff fde8 	bl	8008dec <move_window>
			if (res != FR_OK) break;
 800921c:	4606      	mov	r6, r0
 800921e:	b958      	cbnz	r0, 8009238 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	fbb9 f2f3 	udiv	r2, r9, r3
 8009226:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800922a:	b145      	cbz	r5, 800923e <put_fat+0xa2>
 800922c:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8009230:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8009234:	2301      	movs	r3, #1
 8009236:	70e3      	strb	r3, [r4, #3]
}
 8009238:	4630      	mov	r0, r6
 800923a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800923e:	f818 3002 	ldrb.w	r3, [r8, r2]
 8009242:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8009246:	f023 030f 	bic.w	r3, r3, #15
 800924a:	431f      	orrs	r7, r3
 800924c:	e7f0      	b.n	8009230 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800924e:	8983      	ldrh	r3, [r0, #12]
 8009250:	085b      	lsrs	r3, r3, #1
 8009252:	fbb1 f3f3 	udiv	r3, r1, r3
 8009256:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009258:	4419      	add	r1, r3
 800925a:	f7ff fdc7 	bl	8008dec <move_window>
			if (res != FR_OK) break;
 800925e:	4606      	mov	r6, r0
 8009260:	2800      	cmp	r0, #0
 8009262:	d1e9      	bne.n	8009238 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009264:	89a1      	ldrh	r1, [r4, #12]
 8009266:	006d      	lsls	r5, r5, #1
 8009268:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800926c:	fbb5 f3f1 	udiv	r3, r5, r1
 8009270:	fb01 5513 	mls	r5, r1, r3, r5
 8009274:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8009276:	5557      	strb	r7, [r2, r5]
 8009278:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800927c:	705f      	strb	r7, [r3, #1]
 800927e:	e7d9      	b.n	8009234 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009280:	8983      	ldrh	r3, [r0, #12]
 8009282:	089b      	lsrs	r3, r3, #2
 8009284:	fbb1 f3f3 	udiv	r3, r1, r3
 8009288:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800928a:	4419      	add	r1, r3
 800928c:	f7ff fdae 	bl	8008dec <move_window>
			if (res != FR_OK) break;
 8009290:	4606      	mov	r6, r0
 8009292:	2800      	cmp	r0, #0
 8009294:	d1d0      	bne.n	8009238 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009296:	89a1      	ldrh	r1, [r4, #12]
 8009298:	00ad      	lsls	r5, r5, #2
 800929a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800929e:	fbb5 f2f1 	udiv	r2, r5, r1
 80092a2:	fb01 5512 	mls	r5, r1, r2, r5
 80092a6:	441d      	add	r5, r3
 80092a8:	4628      	mov	r0, r5
 80092aa:	f7ff fc1f 	bl	8008aec <ld_dword>
 80092ae:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80092b2:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80092b6:	4339      	orrs	r1, r7
 80092b8:	4628      	mov	r0, r5
 80092ba:	f7ff fc1f 	bl	8008afc <st_dword>
 80092be:	e7b9      	b.n	8009234 <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 80092c0:	2602      	movs	r6, #2
 80092c2:	e7b9      	b.n	8009238 <put_fat+0x9c>

080092c4 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80092c4:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80092c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c8:	4604      	mov	r4, r0
 80092ca:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80092cc:	d968      	bls.n	80093a0 <get_fat.isra.8+0xdc>
 80092ce:	6983      	ldr	r3, [r0, #24]
 80092d0:	4299      	cmp	r1, r3
 80092d2:	d265      	bcs.n	80093a0 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 80092d4:	7803      	ldrb	r3, [r0, #0]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d032      	beq.n	8009340 <get_fat.isra.8+0x7c>
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d048      	beq.n	8009370 <get_fat.isra.8+0xac>
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d15e      	bne.n	80093a0 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 80092e2:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092e6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80092e8:	8983      	ldrh	r3, [r0, #12]
 80092ea:	fbb5 f3f3 	udiv	r3, r5, r3
 80092ee:	4419      	add	r1, r3
 80092f0:	f7ff fd7c 	bl	8008dec <move_window>
 80092f4:	b110      	cbz	r0, 80092fc <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80092f6:	f04f 30ff 	mov.w	r0, #4294967295
 80092fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80092fc:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8009300:	fbb5 f2f1 	udiv	r2, r5, r1
 8009304:	fb01 5212 	mls	r2, r1, r2, r5
 8009308:	4422      	add	r2, r4
 800930a:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800930c:	4620      	mov	r0, r4
 800930e:	fbb7 f1f1 	udiv	r1, r7, r1
 8009312:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 8009314:	f892 5034 	ldrb.w	r5, [r2, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009318:	f7ff fd68 	bl	8008dec <move_window>
 800931c:	2800      	cmp	r0, #0
 800931e:	d1ea      	bne.n	80092f6 <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009320:	89a2      	ldrh	r2, [r4, #12]
 8009322:	fbb7 f3f2 	udiv	r3, r7, r2
 8009326:	fb02 7313 	mls	r3, r2, r3, r7
 800932a:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800932c:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800932e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8009332:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009336:	bf4c      	ite	mi
 8009338:	0900      	lsrmi	r0, r0, #4
 800933a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800933e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009340:	8983      	ldrh	r3, [r0, #12]
 8009342:	085b      	lsrs	r3, r3, #1
 8009344:	fbb1 f3f3 	udiv	r3, r1, r3
 8009348:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800934a:	4419      	add	r1, r3
 800934c:	f7ff fd4e 	bl	8008dec <move_window>
 8009350:	2800      	cmp	r0, #0
 8009352:	d1d0      	bne.n	80092f6 <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009354:	89a1      	ldrh	r1, [r4, #12]
 8009356:	0076      	lsls	r6, r6, #1
 8009358:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800935c:	fbb6 f3f1 	udiv	r3, r6, r1
 8009360:	fb01 6613 	mls	r6, r1, r3, r6
 8009364:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 8009366:	5d90      	ldrb	r0, [r2, r6]
 8009368:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800936a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800936e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009370:	8983      	ldrh	r3, [r0, #12]
 8009372:	089b      	lsrs	r3, r3, #2
 8009374:	fbb1 f3f3 	udiv	r3, r1, r3
 8009378:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800937a:	4419      	add	r1, r3
 800937c:	f7ff fd36 	bl	8008dec <move_window>
 8009380:	2800      	cmp	r0, #0
 8009382:	d1b8      	bne.n	80092f6 <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009384:	89a2      	ldrh	r2, [r4, #12]
 8009386:	00b6      	lsls	r6, r6, #2
 8009388:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800938c:	fbb6 f3f2 	udiv	r3, r6, r2
 8009390:	fb02 6613 	mls	r6, r2, r3, r6
 8009394:	4430      	add	r0, r6
 8009396:	f7ff fba9 	bl	8008aec <ld_dword>
 800939a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800939e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 80093a0:	2001      	movs	r0, #1
}
 80093a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093a4 <create_chain>:
{
 80093a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a8:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 80093aa:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80093ac:	460f      	mov	r7, r1
 80093ae:	b971      	cbnz	r1, 80093ce <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80093b0:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80093b2:	b1f6      	cbz	r6, 80093f2 <create_chain+0x4e>
 80093b4:	69ab      	ldr	r3, [r5, #24]
 80093b6:	429e      	cmp	r6, r3
 80093b8:	bf28      	it	cs
 80093ba:	2601      	movcs	r6, #1
 80093bc:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80093be:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 80093c0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80093c2:	429c      	cmp	r4, r3
 80093c4:	d318      	bcc.n	80093f8 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80093c6:	2e01      	cmp	r6, #1
 80093c8:	d815      	bhi.n	80093f6 <create_chain+0x52>
 80093ca:	2400      	movs	r4, #0
 80093cc:	e009      	b.n	80093e2 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80093ce:	4628      	mov	r0, r5
 80093d0:	f7ff ff78 	bl	80092c4 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80093d4:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80093d6:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80093d8:	d937      	bls.n	800944a <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	d104      	bne.n	80093e8 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80093de:	f04f 34ff 	mov.w	r4, #4294967295
}
 80093e2:	4620      	mov	r0, r4
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80093e8:	69ab      	ldr	r3, [r5, #24]
 80093ea:	4298      	cmp	r0, r3
 80093ec:	d3f9      	bcc.n	80093e2 <create_chain+0x3e>
 80093ee:	463e      	mov	r6, r7
 80093f0:	e7e4      	b.n	80093bc <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80093f2:	2601      	movs	r6, #1
 80093f4:	e7e2      	b.n	80093bc <create_chain+0x18>
				ncl = 2;
 80093f6:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80093f8:	4621      	mov	r1, r4
 80093fa:	f8d8 0000 	ldr.w	r0, [r8]
 80093fe:	f7ff ff61 	bl	80092c4 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8009402:	b130      	cbz	r0, 8009412 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009404:	2801      	cmp	r0, #1
 8009406:	d020      	beq.n	800944a <create_chain+0xa6>
 8009408:	3001      	adds	r0, #1
 800940a:	d0e8      	beq.n	80093de <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 800940c:	42b4      	cmp	r4, r6
 800940e:	d1d6      	bne.n	80093be <create_chain+0x1a>
 8009410:	e7db      	b.n	80093ca <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009412:	f04f 32ff 	mov.w	r2, #4294967295
 8009416:	4621      	mov	r1, r4
 8009418:	4628      	mov	r0, r5
 800941a:	f7ff febf 	bl	800919c <put_fat>
		if (res == FR_OK && clst != 0) {
 800941e:	b990      	cbnz	r0, 8009446 <create_chain+0xa2>
 8009420:	b957      	cbnz	r7, 8009438 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009422:	69aa      	ldr	r2, [r5, #24]
 8009424:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 8009426:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009428:	3a02      	subs	r2, #2
 800942a:	4293      	cmp	r3, r2
 800942c:	d90f      	bls.n	800944e <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800942e:	792b      	ldrb	r3, [r5, #4]
 8009430:	f043 0301 	orr.w	r3, r3, #1
 8009434:	712b      	strb	r3, [r5, #4]
 8009436:	e7d4      	b.n	80093e2 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009438:	4622      	mov	r2, r4
 800943a:	4639      	mov	r1, r7
 800943c:	4628      	mov	r0, r5
 800943e:	f7ff fead 	bl	800919c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009442:	2800      	cmp	r0, #0
 8009444:	d0ed      	beq.n	8009422 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009446:	2801      	cmp	r0, #1
 8009448:	d0c9      	beq.n	80093de <create_chain+0x3a>
 800944a:	2401      	movs	r4, #1
 800944c:	e7c9      	b.n	80093e2 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800944e:	3b01      	subs	r3, #1
 8009450:	616b      	str	r3, [r5, #20]
 8009452:	e7ec      	b.n	800942e <create_chain+0x8a>

08009454 <remove_chain>:
{
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009458:	2d01      	cmp	r5, #1
{
 800945a:	4607      	mov	r7, r0
 800945c:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800945e:	d801      	bhi.n	8009464 <remove_chain+0x10>
 8009460:	2002      	movs	r0, #2
 8009462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8009464:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009466:	69a3      	ldr	r3, [r4, #24]
 8009468:	429d      	cmp	r5, r3
 800946a:	d2f9      	bcs.n	8009460 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800946c:	b12a      	cbz	r2, 800947a <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800946e:	f04f 32ff 	mov.w	r2, #4294967295
 8009472:	4620      	mov	r0, r4
 8009474:	f7ff fe92 	bl	800919c <put_fat>
		if (res != FR_OK) return res;
 8009478:	bb08      	cbnz	r0, 80094be <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800947a:	4629      	mov	r1, r5
 800947c:	6838      	ldr	r0, [r7, #0]
 800947e:	f7ff ff21 	bl	80092c4 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8009482:	4606      	mov	r6, r0
 8009484:	b908      	cbnz	r0, 800948a <remove_chain+0x36>
	return FR_OK;
 8009486:	2000      	movs	r0, #0
 8009488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800948a:	2801      	cmp	r0, #1
 800948c:	d0e8      	beq.n	8009460 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d014      	beq.n	80094bc <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009492:	2200      	movs	r2, #0
 8009494:	4629      	mov	r1, r5
 8009496:	4620      	mov	r0, r4
 8009498:	f7ff fe80 	bl	800919c <put_fat>
			if (res != FR_OK) return res;
 800949c:	b978      	cbnz	r0, 80094be <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800949e:	69a2      	ldr	r2, [r4, #24]
 80094a0:	6963      	ldr	r3, [r4, #20]
 80094a2:	1e91      	subs	r1, r2, #2
 80094a4:	428b      	cmp	r3, r1
 80094a6:	d205      	bcs.n	80094b4 <remove_chain+0x60>
			fs->free_clst++;
 80094a8:	3301      	adds	r3, #1
 80094aa:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 80094ac:	7923      	ldrb	r3, [r4, #4]
 80094ae:	f043 0301 	orr.w	r3, r3, #1
 80094b2:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80094b4:	4296      	cmp	r6, r2
 80094b6:	4635      	mov	r5, r6
 80094b8:	d3df      	bcc.n	800947a <remove_chain+0x26>
 80094ba:	e7e4      	b.n	8009486 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80094bc:	2001      	movs	r0, #1
}
 80094be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094c0 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80094c0:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80094c2:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 80094c4:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80094c6:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80094c8:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80094ca:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80094cc:	b992      	cbnz	r2, 80094f4 <dir_sdi.constprop.11+0x34>
 80094ce:	7823      	ldrb	r3, [r4, #0]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d901      	bls.n	80094d8 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 80094d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80094d6:	b973      	cbnz	r3, 80094f6 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80094d8:	8923      	ldrh	r3, [r4, #8]
 80094da:	b90b      	cbnz	r3, 80094e0 <dir_sdi.constprop.11+0x20>
 80094dc:	2002      	movs	r0, #2
 80094de:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 80094e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094e2:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 80094e4:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 80094e6:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d0f7      	beq.n	80094dc <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80094ec:	3434      	adds	r4, #52	; 0x34
 80094ee:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80094f0:	2000      	movs	r0, #0
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80094f4:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80094f6:	8961      	ldrh	r1, [r4, #10]
 80094f8:	89a0      	ldrh	r0, [r4, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80094fa:	4348      	muls	r0, r1
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80094fc:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80094fe:	d10c      	bne.n	800951a <dir_sdi.constprop.11+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009500:	4611      	mov	r1, r2
 8009502:	6828      	ldr	r0, [r5, #0]
 8009504:	f7ff fede 	bl	80092c4 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009508:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800950a:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800950c:	d00b      	beq.n	8009526 <dir_sdi.constprop.11+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800950e:	2801      	cmp	r0, #1
 8009510:	d9e4      	bls.n	80094dc <dir_sdi.constprop.11+0x1c>
 8009512:	69a3      	ldr	r3, [r4, #24]
 8009514:	4298      	cmp	r0, r3
 8009516:	d3f3      	bcc.n	8009500 <dir_sdi.constprop.11+0x40>
 8009518:	e7e0      	b.n	80094dc <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 800951a:	4619      	mov	r1, r3
 800951c:	4620      	mov	r0, r4
 800951e:	f7ff fb7d 	bl	8008c1c <clust2sect>
 8009522:	61e8      	str	r0, [r5, #28]
 8009524:	e7de      	b.n	80094e4 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009526:	2001      	movs	r0, #1
}
 8009528:	bd38      	pop	{r3, r4, r5, pc}

0800952a <dir_next>:
{
 800952a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800952e:	69c3      	ldr	r3, [r0, #28]
{
 8009530:	4605      	mov	r5, r0
 8009532:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009534:	b1b3      	cbz	r3, 8009564 <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009536:	6947      	ldr	r7, [r0, #20]
 8009538:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800953a:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 800953e:	d211      	bcs.n	8009564 <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 8009540:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009542:	89a2      	ldrh	r2, [r4, #12]
 8009544:	fbb7 f0f2 	udiv	r0, r7, r2
 8009548:	fb02 7210 	mls	r2, r2, r0, r7
 800954c:	2a00      	cmp	r2, #0
 800954e:	d14f      	bne.n	80095f0 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 8009550:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8009552:	3301      	adds	r3, #1
 8009554:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 8009556:	b941      	cbnz	r1, 800956a <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009558:	8923      	ldrh	r3, [r4, #8]
 800955a:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800955e:	d847      	bhi.n	80095f0 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 8009560:	2300      	movs	r3, #0
 8009562:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009564:	2004      	movs	r0, #4
 8009566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800956a:	8963      	ldrh	r3, [r4, #10]
 800956c:	3b01      	subs	r3, #1
 800956e:	4203      	tst	r3, r0
 8009570:	d13e      	bne.n	80095f0 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009572:	4620      	mov	r0, r4
 8009574:	f7ff fea6 	bl	80092c4 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009578:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800957a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800957c:	d802      	bhi.n	8009584 <dir_next+0x5a>
 800957e:	2002      	movs	r0, #2
 8009580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009584:	1c42      	adds	r2, r0, #1
 8009586:	d102      	bne.n	800958e <dir_next+0x64>
 8009588:	2001      	movs	r0, #1
 800958a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800958e:	69a3      	ldr	r3, [r4, #24]
 8009590:	4298      	cmp	r0, r3
 8009592:	d327      	bcc.n	80095e4 <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 8009594:	f1b8 0f00 	cmp.w	r8, #0
 8009598:	d0e2      	beq.n	8009560 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800959a:	69a9      	ldr	r1, [r5, #24]
 800959c:	4628      	mov	r0, r5
 800959e:	f7ff ff01 	bl	80093a4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095a2:	4606      	mov	r6, r0
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d03d      	beq.n	8009624 <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095a8:	2801      	cmp	r0, #1
 80095aa:	d0e8      	beq.n	800957e <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	d0eb      	beq.n	8009588 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80095b0:	4620      	mov	r0, r4
 80095b2:	f7ff fbcb 	bl	8008d4c <sync_window>
 80095b6:	4680      	mov	r8, r0
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d1e5      	bne.n	8009588 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80095bc:	4601      	mov	r1, r0
 80095be:	89a2      	ldrh	r2, [r4, #12]
 80095c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80095c4:	f7ff faa2 	bl	8008b0c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80095c8:	4631      	mov	r1, r6
 80095ca:	4620      	mov	r0, r4
 80095cc:	f7ff fb26 	bl	8008c1c <clust2sect>
						fs->wflag = 1;
 80095d0:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80095d4:	6320      	str	r0, [r4, #48]	; 0x30
 80095d6:	8963      	ldrh	r3, [r4, #10]
 80095d8:	4598      	cmp	r8, r3
 80095da:	d316      	bcc.n	800960a <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 80095dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80095de:	eba3 0308 	sub.w	r3, r3, r8
 80095e2:	6323      	str	r3, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 80095e4:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80095e6:	4631      	mov	r1, r6
 80095e8:	4620      	mov	r0, r4
 80095ea:	f7ff fb17 	bl	8008c1c <clust2sect>
 80095ee:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80095f0:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 80095f2:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80095f4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80095f8:	fbb7 f2f1 	udiv	r2, r7, r1
 80095fc:	fb01 7712 	mls	r7, r1, r2, r7
 8009600:	441f      	add	r7, r3
 8009602:	622f      	str	r7, [r5, #32]
	return FR_OK;
 8009604:	2000      	movs	r0, #0
 8009606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 800960a:	f884 9003 	strb.w	r9, [r4, #3]
 800960e:	4620      	mov	r0, r4
 8009610:	f7ff fb79 	bl	8008d06 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009614:	2800      	cmp	r0, #0
 8009616:	d1b7      	bne.n	8009588 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009618:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800961a:	3301      	adds	r3, #1
 800961c:	f108 0801 	add.w	r8, r8, #1
 8009620:	6323      	str	r3, [r4, #48]	; 0x30
 8009622:	e7d8      	b.n	80095d6 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009624:	2007      	movs	r0, #7
}
 8009626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800962c <follow_path>:
{
 800962c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8009630:	6806      	ldr	r6, [r0, #0]
{
 8009632:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009634:	780b      	ldrb	r3, [r1, #0]
 8009636:	2b2f      	cmp	r3, #47	; 0x2f
 8009638:	460d      	mov	r5, r1
 800963a:	f101 0101 	add.w	r1, r1, #1
 800963e:	d0f9      	beq.n	8009634 <follow_path+0x8>
 8009640:	2b5c      	cmp	r3, #92	; 0x5c
 8009642:	d0f7      	beq.n	8009634 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8009644:	2300      	movs	r3, #0
 8009646:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009648:	782b      	ldrb	r3, [r5, #0]
 800964a:	2b1f      	cmp	r3, #31
 800964c:	d959      	bls.n	8009702 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800964e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80097b0 <follow_path+0x184>
	p = *path; sfn = dp->fn;
 8009652:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8009656:	220b      	movs	r2, #11
 8009658:	2120      	movs	r1, #32
 800965a:	4638      	mov	r0, r7
 800965c:	f7ff fa56 	bl	8008b0c <mem_set>
	si = i = 0; ni = 8;
 8009660:	2200      	movs	r2, #0
 8009662:	f105 3eff 	add.w	lr, r5, #4294967295
 8009666:	4611      	mov	r1, r2
 8009668:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 800966a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800966e:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8009670:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009674:	d90b      	bls.n	800968e <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009676:	2b2f      	cmp	r3, #47	; 0x2f
 8009678:	d14b      	bne.n	8009712 <follow_path+0xe6>
 800967a:	1868      	adds	r0, r5, r1
 800967c:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800967e:	f810 eb01 	ldrb.w	lr, [r0], #1
 8009682:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8009686:	d0f9      	beq.n	800967c <follow_path+0x50>
 8009688:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 800968c:	d0f6      	beq.n	800967c <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800968e:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009690:	2a00      	cmp	r2, #0
 8009692:	d054      	beq.n	800973e <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009694:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8009698:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800969c:	2ae5      	cmp	r2, #229	; 0xe5
 800969e:	bf04      	itt	eq
 80096a0:	2205      	moveq	r2, #5
 80096a2:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80096a6:	2b21      	cmp	r3, #33	; 0x21
 80096a8:	bf34      	ite	cc
 80096aa:	2304      	movcc	r3, #4
 80096ac:	2300      	movcs	r3, #0
 80096ae:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80096b2:	4620      	mov	r0, r4
 80096b4:	f7ff ff04 	bl	80094c0 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d145      	bne.n	8009748 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 80096bc:	69e1      	ldr	r1, [r4, #28]
 80096be:	4648      	mov	r0, r9
 80096c0:	f7ff fb94 	bl	8008dec <move_window>
		if (res != FR_OK) break;
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d13f      	bne.n	8009748 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 80096c8:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	d046      	beq.n	800975e <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80096d0:	7ada      	ldrb	r2, [r3, #11]
 80096d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80096d6:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80096d8:	7ada      	ldrb	r2, [r3, #11]
 80096da:	0711      	lsls	r1, r2, #28
 80096dc:	d40c      	bmi.n	80096f8 <follow_path+0xcc>
 80096de:	f103 0e0b 	add.w	lr, r3, #11
 80096e2:	4639      	mov	r1, r7
		r = *d++ - *s++;
 80096e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096e8:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 80096ec:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 80096ee:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 80096f2:	d027      	beq.n	8009744 <follow_path+0x118>
 80096f4:	2a00      	cmp	r2, #0
 80096f6:	d0f5      	beq.n	80096e4 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 80096f8:	2100      	movs	r1, #0
 80096fa:	4620      	mov	r0, r4
 80096fc:	f7ff ff15 	bl	800952a <dir_next>
 8009700:	e7da      	b.n	80096b8 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8009702:	2380      	movs	r3, #128	; 0x80
 8009704:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009708:	4620      	mov	r0, r4
}
 800970a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800970e:	f7ff bed7 	b.w	80094c0 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009712:	2b5c      	cmp	r3, #92	; 0x5c
 8009714:	d0b1      	beq.n	800967a <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009716:	2b2e      	cmp	r3, #46	; 0x2e
 8009718:	d039      	beq.n	800978e <follow_path+0x162>
 800971a:	4290      	cmp	r0, r2
 800971c:	d90f      	bls.n	800973e <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 800971e:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009722:	bf18      	it	ne
 8009724:	3b80      	subne	r3, #128	; 0x80
 8009726:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80097b4 <follow_path+0x188>
 800972a:	bf18      	it	ne
 800972c:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8009730:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8009734:	f1bc 0f00 	cmp.w	ip, #0
 8009738:	d02e      	beq.n	8009798 <follow_path+0x16c>
 800973a:	4563      	cmp	r3, ip
 800973c:	d1f8      	bne.n	8009730 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800973e:	2006      	movs	r0, #6
	return res;
 8009740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009744:	2a00      	cmp	r2, #0
 8009746:	d1d7      	bne.n	80096f8 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8009748:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800974c:	b148      	cbz	r0, 8009762 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800974e:	2804      	cmp	r0, #4
 8009750:	d12c      	bne.n	80097ac <follow_path+0x180>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009752:	f013 0f04 	tst.w	r3, #4
 8009756:	bf08      	it	eq
 8009758:	2005      	moveq	r0, #5
 800975a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800975e:	2004      	movs	r0, #4
 8009760:	e7f2      	b.n	8009748 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009762:	075a      	lsls	r2, r3, #29
 8009764:	d422      	bmi.n	80097ac <follow_path+0x180>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009766:	79a3      	ldrb	r3, [r4, #6]
 8009768:	06db      	lsls	r3, r3, #27
 800976a:	d50d      	bpl.n	8009788 <follow_path+0x15c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800976c:	89b2      	ldrh	r2, [r6, #12]
 800976e:	6960      	ldr	r0, [r4, #20]
 8009770:	fbb0 f3f2 	udiv	r3, r0, r2
 8009774:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8009778:	fb02 0313 	mls	r3, r2, r3, r0
 800977c:	4419      	add	r1, r3
 800977e:	7830      	ldrb	r0, [r6, #0]
 8009780:	f7ff faa7 	bl	8008cd2 <ld_clust.isra.1>
 8009784:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009786:	e764      	b.n	8009652 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009788:	2005      	movs	r0, #5
 800978a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800978e:	280b      	cmp	r0, #11
 8009790:	d0d5      	beq.n	800973e <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8009792:	2208      	movs	r2, #8
 8009794:	200b      	movs	r0, #11
 8009796:	e768      	b.n	800966a <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009798:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 800979c:	f1bc 0f19 	cmp.w	ip, #25
 80097a0:	d801      	bhi.n	80097a6 <follow_path+0x17a>
 80097a2:	3b20      	subs	r3, #32
 80097a4:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 80097a6:	54bb      	strb	r3, [r7, r2]
 80097a8:	3201      	adds	r2, #1
 80097aa:	e75e      	b.n	800966a <follow_path+0x3e>
}
 80097ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b0:	08025212 	.word	0x08025212
 80097b4:	08025291 	.word	0x08025291

080097b8 <dir_register>:
{
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80097bc:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80097be:	f7ff fe7f 	bl	80094c0 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 80097c2:	4604      	mov	r4, r0
 80097c4:	bb28      	cbnz	r0, 8009812 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 80097c6:	69e9      	ldr	r1, [r5, #28]
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7ff fb0f 	bl	8008dec <move_window>
			if (res != FR_OK) break;
 80097ce:	4604      	mov	r4, r0
 80097d0:	b9f8      	cbnz	r0, 8009812 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80097d2:	6a2b      	ldr	r3, [r5, #32]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2be5      	cmp	r3, #229	; 0xe5
 80097d8:	d114      	bne.n	8009804 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 80097da:	69e9      	ldr	r1, [r5, #28]
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff fb05 	bl	8008dec <move_window>
		if (res == FR_OK) {
 80097e2:	4604      	mov	r4, r0
 80097e4:	b960      	cbnz	r0, 8009800 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80097e6:	4601      	mov	r1, r0
 80097e8:	2220      	movs	r2, #32
 80097ea:	6a28      	ldr	r0, [r5, #32]
 80097ec:	f7ff f98e 	bl	8008b0c <mem_set>
 80097f0:	220b      	movs	r2, #11
 80097f2:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80097f6:	6a28      	ldr	r0, [r5, #32]
 80097f8:	f7ff fa62 	bl	8008cc0 <mem_cpy.part.0>
			fs->wflag = 1;
 80097fc:	2301      	movs	r3, #1
 80097fe:	70f3      	strb	r3, [r6, #3]
}
 8009800:	4620      	mov	r0, r4
 8009802:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0e8      	beq.n	80097da <dir_register+0x22>
			res = dir_next(dp, 1);
 8009808:	2101      	movs	r1, #1
 800980a:	4628      	mov	r0, r5
 800980c:	f7ff fe8d 	bl	800952a <dir_next>
 8009810:	e7d7      	b.n	80097c2 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009812:	2c04      	cmp	r4, #4
 8009814:	bf08      	it	eq
 8009816:	2407      	moveq	r4, #7
 8009818:	e7f2      	b.n	8009800 <dir_register+0x48>
	...

0800981c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800981c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800981e:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009820:	a804      	add	r0, sp, #16
{
 8009822:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8009824:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8009828:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800982a:	f7ff fa16 	bl	8008c5a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800982e:	1e05      	subs	r5, r0, #0
 8009830:	db1f      	blt.n	8009872 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009832:	4912      	ldr	r1, [pc, #72]	; (800987c <f_mount+0x60>)
 8009834:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8009838:	b15c      	cbz	r4, 8009852 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800983a:	4b11      	ldr	r3, [pc, #68]	; (8009880 <f_mount+0x64>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4294      	cmp	r4, r2
 8009840:	bf04      	itt	eq
 8009842:	2200      	moveq	r2, #0
 8009844:	601a      	streq	r2, [r3, #0]
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	2000      	movs	r0, #0
 800984a:	4294      	cmp	r4, r2
 800984c:	bf08      	it	eq
 800984e:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009850:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8009852:	9801      	ldr	r0, [sp, #4]
 8009854:	b108      	cbz	r0, 800985a <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009856:	2300      	movs	r3, #0
 8009858:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800985a:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800985e:	b130      	cbz	r0, 800986e <f_mount+0x52>
 8009860:	2e01      	cmp	r6, #1
 8009862:	d108      	bne.n	8009876 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009864:	2200      	movs	r2, #0
 8009866:	a901      	add	r1, sp, #4
 8009868:	4668      	mov	r0, sp
 800986a:	f7ff fb1b 	bl	8008ea4 <find_volume>
	LEAVE_FF(fs, res);
}
 800986e:	b004      	add	sp, #16
 8009870:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009872:	200b      	movs	r0, #11
 8009874:	e7fb      	b.n	800986e <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009876:	2000      	movs	r0, #0
 8009878:	e7f9      	b.n	800986e <f_mount+0x52>
 800987a:	bf00      	nop
 800987c:	200015e8 	.word	0x200015e8
 8009880:	200015ec 	.word	0x200015ec

08009884 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009888:	b090      	sub	sp, #64	; 0x40
 800988a:	4690      	mov	r8, r2
 800988c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800988e:	4604      	mov	r4, r0
 8009890:	2800      	cmp	r0, #0
 8009892:	f000 80d1 	beq.w	8009a38 <f_open+0x1b4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009896:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800989a:	462a      	mov	r2, r5
 800989c:	a903      	add	r1, sp, #12
 800989e:	a801      	add	r0, sp, #4
 80098a0:	f7ff fb00 	bl	8008ea4 <find_volume>
	if (res == FR_OK) {
 80098a4:	4607      	mov	r7, r0
 80098a6:	bb38      	cbnz	r0, 80098f8 <f_open+0x74>
		dj.obj.fs = fs;
 80098a8:	ae10      	add	r6, sp, #64	; 0x40
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80098b0:	9901      	ldr	r1, [sp, #4]
 80098b2:	4630      	mov	r0, r6
 80098b4:	f7ff feba 	bl	800962c <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80098b8:	b958      	cbnz	r0, 80098d2 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80098ba:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80098be:	2b00      	cmp	r3, #0
 80098c0:	db1e      	blt.n	8009900 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80098c2:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 80098c6:	bf14      	ite	ne
 80098c8:	2101      	movne	r1, #1
 80098ca:	2100      	moveq	r1, #0
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7ff f923 	bl	8008b18 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80098d2:	f018 0f1c 	tst.w	r8, #28
 80098d6:	d073      	beq.n	80099c0 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 80098d8:	b1a0      	cbz	r0, 8009904 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80098da:	2804      	cmp	r0, #4
 80098dc:	d109      	bne.n	80098f2 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098de:	4b73      	ldr	r3, [pc, #460]	; (8009aac <f_open+0x228>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	f000 80de 	beq.w	8009aa4 <f_open+0x220>
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 80da 	beq.w	8009aa4 <f_open+0x220>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80098f0:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80098f2:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80098f6:	b170      	cbz	r0, 8009916 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80098f8:	2300      	movs	r3, #0
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	4607      	mov	r7, r0
 80098fe:	e095      	b.n	8009a2c <f_open+0x1a8>
				res = FR_INVALID_NAME;
 8009900:	2006      	movs	r0, #6
 8009902:	e7e6      	b.n	80098d2 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009904:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009908:	f013 0f11 	tst.w	r3, #17
 800990c:	d163      	bne.n	80099d6 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800990e:	f018 0f04 	tst.w	r8, #4
 8009912:	f040 80c1 	bne.w	8009a98 <f_open+0x214>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009916:	0728      	lsls	r0, r5, #28
 8009918:	d53c      	bpl.n	8009994 <f_open+0x110>
				dw = GET_FATTIME();
 800991a:	f012 fdcf 	bl	801c4bc <get_fattime>
 800991e:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009920:	4601      	mov	r1, r0
 8009922:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009924:	300e      	adds	r0, #14
 8009926:	f7ff f8e9 	bl	8008afc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800992a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800992c:	4611      	mov	r1, r2
 800992e:	3016      	adds	r0, #22
 8009930:	f7ff f8e4 	bl	8008afc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009936:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800993a:	2220      	movs	r2, #32
 800993c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800993e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009942:	f899 0000 	ldrb.w	r0, [r9]
 8009946:	4651      	mov	r1, sl
 8009948:	f7ff f9c3 	bl	8008cd2 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800994c:	2200      	movs	r2, #0
 800994e:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009950:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009952:	4648      	mov	r0, r9
 8009954:	f7ff f9cb 	bl	8008cee <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800995a:	2200      	movs	r2, #0
 800995c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800995e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8009960:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8009962:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	2101      	movs	r1, #1
 8009968:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800996a:	f1b8 0f00 	cmp.w	r8, #0
 800996e:	d011      	beq.n	8009994 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8009970:	4641      	mov	r1, r8
 8009972:	4630      	mov	r0, r6
						dw = fs->winsect;
 8009974:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8009978:	f7ff fd6c 	bl	8009454 <remove_chain>
						if (res == FR_OK) {
 800997c:	2800      	cmp	r0, #0
 800997e:	d1bb      	bne.n	80098f8 <f_open+0x74>
							res = move_window(fs, dw);
 8009980:	4649      	mov	r1, r9
 8009982:	9803      	ldr	r0, [sp, #12]
 8009984:	f7ff fa32 	bl	8008dec <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009988:	9a03      	ldr	r2, [sp, #12]
 800998a:	f108 33ff 	add.w	r3, r8, #4294967295
 800998e:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8009990:	2800      	cmp	r0, #0
 8009992:	d1b1      	bne.n	80098f8 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009994:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009996:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999a:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 800999c:	bf48      	it	mi
 800999e:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099a2:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 80099a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a8:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099aa:	bf14      	ite	ne
 80099ac:	2101      	movne	r1, #1
 80099ae:	2100      	moveq	r1, #0
 80099b0:	4630      	mov	r0, r6
 80099b2:	f7ff f8df 	bl	8008b74 <inc_lock>
 80099b6:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d13f      	bne.n	8009a3c <f_open+0x1b8>
 80099bc:	2002      	movs	r0, #2
 80099be:	e79b      	b.n	80098f8 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d199      	bne.n	80098f8 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80099c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80099c8:	06da      	lsls	r2, r3, #27
 80099ca:	d467      	bmi.n	8009a9c <f_open+0x218>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80099cc:	f018 0f02 	tst.w	r8, #2
 80099d0:	d0e0      	beq.n	8009994 <f_open+0x110>
 80099d2:	07db      	lsls	r3, r3, #31
 80099d4:	d5de      	bpl.n	8009994 <f_open+0x110>
					res = FR_DENIED;
 80099d6:	2007      	movs	r0, #7
 80099d8:	e78e      	b.n	80098f8 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 80099da:	6820      	ldr	r0, [r4, #0]
 80099dc:	f7ff fc72 	bl	80092c4 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 80099e0:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80099e2:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80099e4:	d926      	bls.n	8009a34 <f_open+0x1b0>
 80099e6:	1c42      	adds	r2, r0, #1
 80099e8:	4250      	negs	r0, r2
 80099ea:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099ec:	eba5 0508 	sub.w	r5, r5, r8
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d04d      	beq.n	8009a90 <f_open+0x20c>
				fp->clust = clst;
 80099f4:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f47f af7e 	bne.w	80098f8 <f_open+0x74>
 80099fc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a00:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009a04:	fbb5 f2f3 	udiv	r2, r5, r3
 8009a08:	fb03 5512 	mls	r5, r3, r2, r5
 8009a0c:	b175      	cbz	r5, 8009a2c <f_open+0x1a8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009a0e:	4640      	mov	r0, r8
 8009a10:	f7ff f904 	bl	8008c1c <clust2sect>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d0d1      	beq.n	80099bc <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a18:	4402      	add	r2, r0
 8009a1a:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	4631      	mov	r1, r6
 8009a20:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009a24:	f7ff f838 	bl	8008a98 <disk_read>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d139      	bne.n	8009aa0 <f_open+0x21c>

	LEAVE_FF(fs, res);
}
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	b010      	add	sp, #64	; 0x40
 8009a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8009a34:	2002      	movs	r0, #2
 8009a36:	e7d9      	b.n	80099ec <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8009a38:	2709      	movs	r7, #9
 8009a3a:	e7f7      	b.n	8009a2c <f_open+0x1a8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009a3c:	9e03      	ldr	r6, [sp, #12]
 8009a3e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009a42:	7830      	ldrb	r0, [r6, #0]
 8009a44:	4641      	mov	r1, r8
 8009a46:	f7ff f944 	bl	8008cd2 <ld_clust.isra.1>
 8009a4a:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009a4c:	f108 001c 	add.w	r0, r8, #28
 8009a50:	f7ff f84c 	bl	8008aec <ld_dword>
			fp->obj.id = fs->id;
 8009a54:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009a56:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009a58:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009a5a:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009a5e:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8009a60:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009a62:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8009a64:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8009a66:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009a68:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009a6a:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a70:	4630      	mov	r0, r6
 8009a72:	f7ff f84b 	bl	8008b0c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009a76:	06ab      	lsls	r3, r5, #26
 8009a78:	d5d8      	bpl.n	8009a2c <f_open+0x1a8>
 8009a7a:	68e5      	ldr	r5, [r4, #12]
 8009a7c:	2d00      	cmp	r5, #0
 8009a7e:	d0d5      	beq.n	8009a2c <f_open+0x1a8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009a80:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009a82:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009a84:	895a      	ldrh	r2, [r3, #10]
 8009a86:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009a8a:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009a8c:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a90:	45a8      	cmp	r8, r5
 8009a92:	d3a2      	bcc.n	80099da <f_open+0x156>
 8009a94:	2000      	movs	r0, #0
 8009a96:	e7ad      	b.n	80099f4 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009a98:	2008      	movs	r0, #8
 8009a9a:	e72d      	b.n	80098f8 <f_open+0x74>
					res = FR_NO_FILE;
 8009a9c:	2004      	movs	r0, #4
 8009a9e:	e72b      	b.n	80098f8 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	e729      	b.n	80098f8 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f7ff fe87 	bl	80097b8 <dir_register>
 8009aaa:	e722      	b.n	80098f2 <f_open+0x6e>
 8009aac:	200015ec 	.word	0x200015ec

08009ab0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	469b      	mov	fp, r3
 8009ab6:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009ab8:	2300      	movs	r3, #0
{
 8009aba:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8009abc:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ac0:	a903      	add	r1, sp, #12
{
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ac6:	f7ff f8e0 	bl	8008c8a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009aca:	4605      	mov	r5, r0
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d132      	bne.n	8009b36 <f_write+0x86>
 8009ad0:	7d65      	ldrb	r5, [r4, #21]
 8009ad2:	bb85      	cbnz	r5, 8009b36 <f_write+0x86>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009ad4:	7d23      	ldrb	r3, [r4, #20]
 8009ad6:	079a      	lsls	r2, r3, #30
 8009ad8:	f140 80be 	bpl.w	8009c58 <f_write+0x1a8>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009adc:	69a3      	ldr	r3, [r4, #24]
 8009ade:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009ae2:	bf28      	it	cs
 8009ae4:	ea6f 0803 	mvncs.w	r8, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009ae8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8009aec:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8009aee:	f1b8 0f00 	cmp.w	r8, #0
 8009af2:	d01c      	beq.n	8009b2e <f_write+0x7e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009af4:	9803      	ldr	r0, [sp, #12]
 8009af6:	69a1      	ldr	r1, [r4, #24]
 8009af8:	8983      	ldrh	r3, [r0, #12]
 8009afa:	fbb1 f2f3 	udiv	r2, r1, r3
 8009afe:	fb03 1312 	mls	r3, r3, r2, r1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 8091 	bne.w	8009c2a <f_write+0x17a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009b08:	8943      	ldrh	r3, [r0, #10]
 8009b0a:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	9301      	str	r3, [sp, #4]
 8009b10:	d124      	bne.n	8009b5c <f_write+0xac>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009b12:	b931      	cbnz	r1, 8009b22 <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009b14:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8009b16:	b9a0      	cbnz	r0, 8009b42 <f_write+0x92>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009b18:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f7ff fc42 	bl	80093a4 <create_chain>
 8009b20:	e004      	b.n	8009b2c <f_write+0x7c>
					if (fp->cltbl) {
 8009b22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b24:	b15b      	cbz	r3, 8009b3e <f_write+0x8e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009b26:	4620      	mov	r0, r4
 8009b28:	f7ff f883 	bl	8008c32 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009b2c:	b948      	cbnz	r0, 8009b42 <f_write+0x92>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009b2e:	7d23      	ldrb	r3, [r4, #20]
 8009b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b34:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8009b36:	4628      	mov	r0, r5
 8009b38:	b005      	add	sp, #20
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009b3e:	69e1      	ldr	r1, [r4, #28]
 8009b40:	e7eb      	b.n	8009b1a <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009b42:	2801      	cmp	r0, #1
 8009b44:	d102      	bne.n	8009b4c <f_write+0x9c>
 8009b46:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b48:	7565      	strb	r5, [r4, #21]
 8009b4a:	e7f4      	b.n	8009b36 <f_write+0x86>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d101      	bne.n	8009b54 <f_write+0xa4>
 8009b50:	2501      	movs	r5, #1
 8009b52:	e7f9      	b.n	8009b48 <f_write+0x98>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009b54:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8009b56:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009b58:	b903      	cbnz	r3, 8009b5c <f_write+0xac>
 8009b5a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009b5c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	da0c      	bge.n	8009b7e <f_write+0xce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b64:	9803      	ldr	r0, [sp, #12]
 8009b66:	6a22      	ldr	r2, [r4, #32]
 8009b68:	9900      	ldr	r1, [sp, #0]
 8009b6a:	7840      	ldrb	r0, [r0, #1]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f7fe ffa1 	bl	8008ab4 <disk_write>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d1ec      	bne.n	8009b50 <f_write+0xa0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b76:	7d23      	ldrb	r3, [r4, #20]
 8009b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b7c:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009b7e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009b82:	69e1      	ldr	r1, [r4, #28]
 8009b84:	4650      	mov	r0, sl
 8009b86:	f7ff f849 	bl	8008c1c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d0db      	beq.n	8009b46 <f_write+0x96>
			sect += csect;
 8009b8e:	9b01      	ldr	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009b90:	f8ba 700c 	ldrh.w	r7, [sl, #12]
 8009b94:	fbb8 f7f7 	udiv	r7, r8, r7
			sect += csect;
 8009b98:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b9a:	2f00      	cmp	r7, #0
 8009b9c:	d034      	beq.n	8009c08 <f_write+0x158>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b9e:	9a01      	ldr	r2, [sp, #4]
 8009ba0:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ba4:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009ba8:	443a      	add	r2, r7
 8009baa:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8009bac:	bf84      	itt	hi
 8009bae:	9a01      	ldrhi	r2, [sp, #4]
 8009bb0:	1a9f      	subhi	r7, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bb2:	463b      	mov	r3, r7
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	f7fe ff7c 	bl	8008ab4 <disk_write>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d1c7      	bne.n	8009b50 <f_write+0xa0>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009bc0:	6a21      	ldr	r1, [r4, #32]
 8009bc2:	1b89      	subs	r1, r1, r6
 8009bc4:	428f      	cmp	r7, r1
 8009bc6:	d90b      	bls.n	8009be0 <f_write+0x130>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 8009bcc:	b122      	cbz	r2, 8009bd8 <f_write+0x128>
 8009bce:	fb02 9101 	mla	r1, r2, r1, r9
 8009bd2:	9800      	ldr	r0, [sp, #0]
 8009bd4:	f7ff f874 	bl	8008cc0 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009bd8:	7d23      	ldrb	r3, [r4, #20]
 8009bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bde:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	899b      	ldrh	r3, [r3, #12]
 8009be4:	435f      	muls	r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009be6:	69a3      	ldr	r3, [r4, #24]
 8009be8:	68e2      	ldr	r2, [r4, #12]
 8009bea:	443b      	add	r3, r7
 8009bec:	61a3      	str	r3, [r4, #24]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	bf2c      	ite	cs
 8009bf2:	60e2      	strcs	r2, [r4, #12]
 8009bf4:	60e3      	strcc	r3, [r4, #12]
 8009bf6:	f8db 3000 	ldr.w	r3, [fp]
 8009bfa:	443b      	add	r3, r7
 8009bfc:	44b9      	add	r9, r7
 8009bfe:	f8cb 3000 	str.w	r3, [fp]
 8009c02:	eba8 0807 	sub.w	r8, r8, r7
 8009c06:	e772      	b.n	8009aee <f_write+0x3e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009c08:	6a23      	ldr	r3, [r4, #32]
 8009c0a:	429e      	cmp	r6, r3
 8009c0c:	d00c      	beq.n	8009c28 <f_write+0x178>
 8009c0e:	69a2      	ldr	r2, [r4, #24]
 8009c10:	68e3      	ldr	r3, [r4, #12]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d208      	bcs.n	8009c28 <f_write+0x178>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009c16:	2301      	movs	r3, #1
 8009c18:	4632      	mov	r2, r6
 8009c1a:	9900      	ldr	r1, [sp, #0]
 8009c1c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8009c20:	f7fe ff3a 	bl	8008a98 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d193      	bne.n	8009b50 <f_write+0xa0>
			fp->sect = sect;
 8009c28:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c2a:	9b03      	ldr	r3, [sp, #12]
 8009c2c:	899f      	ldrh	r7, [r3, #12]
 8009c2e:	69a3      	ldr	r3, [r4, #24]
 8009c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8009c34:	fb07 3010 	mls	r0, r7, r0, r3
 8009c38:	1a3f      	subs	r7, r7, r0
 8009c3a:	4547      	cmp	r7, r8
 8009c3c:	bf28      	it	cs
 8009c3e:	4647      	movcs	r7, r8
	if (cnt) {
 8009c40:	b12f      	cbz	r7, 8009c4e <f_write+0x19e>
 8009c42:	9b00      	ldr	r3, [sp, #0]
 8009c44:	463a      	mov	r2, r7
 8009c46:	4649      	mov	r1, r9
 8009c48:	4418      	add	r0, r3
 8009c4a:	f7ff f839 	bl	8008cc0 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8009c4e:	7d23      	ldrb	r3, [r4, #20]
 8009c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c54:	7523      	strb	r3, [r4, #20]
 8009c56:	e7c6      	b.n	8009be6 <f_write+0x136>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009c58:	2507      	movs	r5, #7
 8009c5a:	e76c      	b.n	8009b36 <f_write+0x86>

08009c5c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c5e:	a901      	add	r1, sp, #4
{
 8009c60:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c62:	f7ff f812 	bl	8008c8a <validate>
	if (res == FR_OK) {
 8009c66:	4605      	mov	r5, r0
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d13a      	bne.n	8009ce2 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c6c:	7d23      	ldrb	r3, [r4, #20]
 8009c6e:	065a      	lsls	r2, r3, #25
 8009c70:	d537      	bpl.n	8009ce2 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009c72:	061b      	lsls	r3, r3, #24
 8009c74:	d50c      	bpl.n	8009c90 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009c76:	9801      	ldr	r0, [sp, #4]
 8009c78:	6a22      	ldr	r2, [r4, #32]
 8009c7a:	7840      	ldrb	r0, [r0, #1]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009c82:	f7fe ff17 	bl	8008ab4 <disk_write>
 8009c86:	bb78      	cbnz	r0, 8009ce8 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c88:	7d23      	ldrb	r3, [r4, #20]
 8009c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8e:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009c90:	f012 fc14 	bl	801c4bc <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009c94:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8009c96:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8009c98:	9801      	ldr	r0, [sp, #4]
 8009c9a:	f7ff f8a7 	bl	8008dec <move_window>
				if (res == FR_OK) {
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	b9f8      	cbnz	r0, 8009ce2 <f_sync+0x86>
					dir = fp->dir_ptr;
 8009ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009ca4:	7af3      	ldrb	r3, [r6, #11]
 8009ca6:	f043 0320 	orr.w	r3, r3, #32
 8009caa:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009cac:	68a2      	ldr	r2, [r4, #8]
 8009cae:	6820      	ldr	r0, [r4, #0]
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	f7ff f81c 	bl	8008cee <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009cb6:	68e1      	ldr	r1, [r4, #12]
 8009cb8:	f106 001c 	add.w	r0, r6, #28
 8009cbc:	f7fe ff1e 	bl	8008afc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009cc0:	4639      	mov	r1, r7
 8009cc2:	f106 0016 	add.w	r0, r6, #22
 8009cc6:	f7fe ff19 	bl	8008afc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8009cca:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ccc:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8009cce:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8009cd0:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8009cd2:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009cd4:	f7ff f840 	bl	8008d58 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009cd8:	7d23      	ldrb	r3, [r4, #20]
 8009cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8009cde:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009ce0:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	b003      	add	sp, #12
 8009ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009ce8:	2501      	movs	r5, #1
 8009cea:	e7fa      	b.n	8009ce2 <f_sync+0x86>

08009cec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009cec:	b513      	push	{r0, r1, r4, lr}
 8009cee:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009cf0:	f7ff ffb4 	bl	8009c5c <f_sync>
	if (res == FR_OK)
 8009cf4:	b948      	cbnz	r0, 8009d0a <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009cf6:	a901      	add	r1, sp, #4
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f7fe ffc6 	bl	8008c8a <validate>
		if (res == FR_OK) {
 8009cfe:	b920      	cbnz	r0, 8009d0a <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009d00:	6920      	ldr	r0, [r4, #16]
 8009d02:	f7fe ff73 	bl	8008bec <dec_lock>
			if (res == FR_OK)
 8009d06:	b900      	cbnz	r0, 8009d0a <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009d08:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009d0a:	b002      	add	sp, #8
 8009d0c:	bd10      	pop	{r4, pc}
	...

08009d10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009d10:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009d12:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <FATFS_LinkDriverEx+0x40>)
 8009d14:	7a5d      	ldrb	r5, [r3, #9]
 8009d16:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8009d1a:	b9b5      	cbnz	r5, 8009d4a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d1c:	7a5d      	ldrb	r5, [r3, #9]
 8009d1e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009d20:	7a5d      	ldrb	r5, [r3, #9]
 8009d22:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009d26:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009d28:	7a58      	ldrb	r0, [r3, #9]
 8009d2a:	4418      	add	r0, r3
 8009d2c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009d2e:	7a5a      	ldrb	r2, [r3, #9]
 8009d30:	b2d2      	uxtb	r2, r2
 8009d32:	1c50      	adds	r0, r2, #1
 8009d34:	b2c0      	uxtb	r0, r0
 8009d36:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8009d38:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8009d3a:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8009d3c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009d3e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8009d40:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8009d42:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009d44:	70cc      	strb	r4, [r1, #3]
 8009d46:	4620      	mov	r0, r4
 8009d48:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8009d4a:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8009d4c:	bd30      	pop	{r4, r5, pc}
 8009d4e:	bf00      	nop
 8009d50:	20001610 	.word	0x20001610

08009d54 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d54:	2200      	movs	r2, #0
 8009d56:	f7ff bfdb 	b.w	8009d10 <FATFS_LinkDriverEx>
	...

08009d5c <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8009d5c:	4a0a      	ldr	r2, [pc, #40]	; (8009d88 <FATFS_UnLinkDriverEx+0x2c>)
 8009d5e:	7a53      	ldrb	r3, [r2, #9]
 8009d60:	b17b      	cbz	r3, 8009d82 <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8009d62:	7803      	ldrb	r3, [r0, #0]
 8009d64:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009d6c:	6848      	ldr	r0, [r1, #4]
 8009d6e:	b140      	cbz	r0, 8009d82 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8009d70:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8009d72:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8009d74:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8009d76:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8009d78:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	7253      	strb	r3, [r2, #9]
 8009d80:	4770      	bx	lr
  uint8_t ret = 1;
 8009d82:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	20001610 	.word	0x20001610

08009d8c <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	f7ff bfe5 	b.w	8009d5c <FATFS_UnLinkDriverEx>
	...

08009d94 <BlueTooth_GPIO_Init>:

void BlueTooth_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009d94:	4b13      	ldr	r3, [pc, #76]	; (8009de4 <BlueTooth_GPIO_Init+0x50>)
{
 8009d96:	b530      	push	{r4, r5, lr}
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	/* PB8 - Res 3 (BT Vcc enable pin), PB9 - Res 4 (BT programming pin) */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d9a:	4d13      	ldr	r5, [pc, #76]	; (8009de8 <BlueTooth_GPIO_Init+0x54>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009d9c:	f042 0202 	orr.w	r2, r2, #2
 8009da0:	64da      	str	r2, [r3, #76]	; 0x4c
 8009da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8009da4:	b087      	sub	sp, #28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8009dae:	f44f 7340 	mov.w	r3, #768	; 0x300
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009db2:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8009db4:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009db6:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009db8:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dba:	4628      	mov	r0, r5
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009dbc:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dbe:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dc0:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dc2:	f7f8 fa99 	bl	80022f8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	4628      	mov	r0, r5
 8009dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009dce:	f7f8 fc09 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_RESET);
 8009dd2:	4622      	mov	r2, r4
 8009dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f7f8 fc03 	bl	80025e4 <HAL_GPIO_WritePin>
}
 8009dde:	b007      	add	sp, #28
 8009de0:	bd30      	pop	{r4, r5, pc}
 8009de2:	bf00      	nop
 8009de4:	40021000 	.word	0x40021000
 8009de8:	48000400 	.word	0x48000400

08009dec <BlueTooth_On>:

void BlueTooth_On(void)
{
 8009dec:	b510      	push	{r4, lr}

	////////////////////////////////////
	HAL_UART_MspDeInit(&huart1);
 8009dee:	4c10      	ldr	r4, [pc, #64]	; (8009e30 <BlueTooth_On+0x44>)
 8009df0:	4620      	mov	r0, r4
 8009df2:	f015 ff29 	bl	801fc48 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart1);
 8009df6:	4620      	mov	r0, r4
 8009df8:	f7fc fc5e 	bl	80066b8 <HAL_UART_DeInit>

	huart1.Init.BaudRate = BT_BAUD_RATE;
 8009dfc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009e00:	4620      	mov	r0, r4
	huart1.Init.BaudRate = BT_BAUD_RATE;
 8009e02:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009e04:	f7fd f94e 	bl	80070a4 <HAL_UART_Init>
 8009e08:	b118      	cbz	r0, 8009e12 <BlueTooth_On+0x26>
	{
		Error_Handler();
 8009e0a:	2121      	movs	r1, #33	; 0x21
 8009e0c:	4809      	ldr	r0, [pc, #36]	; (8009e34 <BlueTooth_On+0x48>)
 8009e0e:	f015 fd31 	bl	801f874 <_Error_Handler>
	}

	HAL_UART_MspInit(&huart1);
 8009e12:	4807      	ldr	r0, [pc, #28]	; (8009e30 <BlueTooth_On+0x44>)
 8009e14:	f015 feba 	bl	801fb8c <HAL_UART_MspInit>

	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_SET);
 8009e18:	4807      	ldr	r0, [pc, #28]	; (8009e38 <BlueTooth_On+0x4c>)
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e20:	f7f8 fbe0 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8009e24:	2003      	movs	r0, #3

}
 8009e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(3);
 8009e2a:	f7f7 b8ff 	b.w	800102c <HAL_Delay>
 8009e2e:	bf00      	nop
 8009e30:	20095a54 	.word	0x20095a54
 8009e34:	080252c1 	.word	0x080252c1
 8009e38:	48000400 	.word	0x48000400

08009e3c <BlueTooth_Off>:

void BlueTooth_Off(void)
{
 8009e3c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f44f 7180 	mov.w	r1, #256	; 0x100
	HAL_Delay(3);
	HAL_UART_MspDeInit(&huart1);
 8009e44:	4c07      	ldr	r4, [pc, #28]	; (8009e64 <BlueTooth_Off+0x28>)
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009e46:	4808      	ldr	r0, [pc, #32]	; (8009e68 <BlueTooth_Off+0x2c>)
 8009e48:	f7f8 fbcc 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8009e4c:	2003      	movs	r0, #3
 8009e4e:	f7f7 f8ed 	bl	800102c <HAL_Delay>
	HAL_UART_MspDeInit(&huart1);
 8009e52:	4620      	mov	r0, r4
 8009e54:	f015 fef8 	bl	801fc48 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart1);
 8009e58:	4620      	mov	r0, r4

}
 8009e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_DeInit(&huart1);
 8009e5e:	f7fc bc2b 	b.w	80066b8 <HAL_UART_DeInit>
 8009e62:	bf00      	nop
 8009e64:	20095a54 	.word	0x20095a54
 8009e68:	48000400 	.word	0x48000400

08009e6c <BlueTooth_AT_Mode>:

void BlueTooth_AT_Mode(void)
{
 8009e6c:	b510      	push	{r4, lr}

	HAL_UART_MspDeInit(&huart1);
 8009e6e:	4c19      	ldr	r4, [pc, #100]	; (8009ed4 <BlueTooth_AT_Mode+0x68>)
 8009e70:	4620      	mov	r0, r4
 8009e72:	f015 fee9 	bl	801fc48 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart1);
 8009e76:	4620      	mov	r0, r4
 8009e78:	f7fc fc1e 	bl	80066b8 <HAL_UART_DeInit>

	huart1.Init.BaudRate = 38400;
 8009e7c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009e80:	4620      	mov	r0, r4
	huart1.Init.BaudRate = 38400;
 8009e82:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009e84:	f7fd f90e 	bl	80070a4 <HAL_UART_Init>
 8009e88:	b118      	cbz	r0, 8009e92 <BlueTooth_AT_Mode+0x26>
	{
	_Error_Handler(__FILE__, __LINE__);
 8009e8a:	213d      	movs	r1, #61	; 0x3d
 8009e8c:	4812      	ldr	r0, [pc, #72]	; (8009ed8 <BlueTooth_AT_Mode+0x6c>)
 8009e8e:	f015 fcf1 	bl	801f874 <_Error_Handler>
	}

	HAL_UART_MspInit(&huart1);
 8009e92:	4810      	ldr	r0, [pc, #64]	; (8009ed4 <BlueTooth_AT_Mode+0x68>)
 8009e94:	f015 fe7a 	bl	801fb8c <HAL_UART_MspInit>

	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e9e:	480f      	ldr	r0, [pc, #60]	; (8009edc <BlueTooth_AT_Mode+0x70>)
 8009ea0:	f7f8 fba0 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009ea4:	200a      	movs	r0, #10
 8009ea6:	f7f7 f8c1 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_SET);
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009eb0:	480a      	ldr	r0, [pc, #40]	; (8009edc <BlueTooth_AT_Mode+0x70>)
 8009eb2:	f7f8 fb97 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009eb6:	200a      	movs	r0, #10
 8009eb8:	f7f7 f8b8 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_SET);
 8009ebc:	4807      	ldr	r0, [pc, #28]	; (8009edc <BlueTooth_AT_Mode+0x70>)
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ec4:	f7f8 fb8e 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009ec8:	200a      	movs	r0, #10

}
 8009eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(10);
 8009ece:	f7f7 b8ad 	b.w	800102c <HAL_Delay>
 8009ed2:	bf00      	nop
 8009ed4:	20095a54 	.word	0x20095a54
 8009ed8:	080252c1 	.word	0x080252c1
 8009edc:	48000400 	.word	0x48000400

08009ee0 <BlueTooth_Param_Init>:

void BlueTooth_Param_Init(uint32_t baud_rate, uint8_t stop_bit, uint8_t parity)
{
 8009ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ee2:	b08d      	sub	sp, #52	; 0x34
	uint8_t buf[32]={0}, *p;
 8009ee4:	ac04      	add	r4, sp, #16
{
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	460e      	mov	r6, r1
 8009eea:	4617      	mov	r7, r2
	uint8_t buf[32]={0}, *p;
 8009eec:	2100      	movs	r1, #0
 8009eee:	2220      	movs	r2, #32
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f016 fb84 	bl	80205fe <memset>
	char str[] = "AT+UART";
 8009ef6:	490f      	ldr	r1, [pc, #60]	; (8009f34 <BlueTooth_Param_Init+0x54>)
 8009ef8:	6808      	ldr	r0, [r1, #0]
 8009efa:	6849      	ldr	r1, [r1, #4]
 8009efc:	aa02      	add	r2, sp, #8
 8009efe:	c203      	stmia	r2!, {r0, r1}

	sprintf(buf, "%s=%d,%d,%d\r\n", str, baud_rate, stop_bit, parity);
 8009f00:	462b      	mov	r3, r5
 8009f02:	aa02      	add	r2, sp, #8
 8009f04:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8009f08:	490b      	ldr	r1, [pc, #44]	; (8009f38 <BlueTooth_Param_Init+0x58>)
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f016 fb80 	bl	8020610 <sprintf>

	p = strchr(buf, '\n');
 8009f10:	210a      	movs	r1, #10
 8009f12:	4620      	mov	r0, r4
 8009f14:	f016 fbaf 	bl	8020676 <strchr>

	HAL_UART_Transmit(&huart1, (uint8_t *)&buf, (p - &buf[0])+1, 10);
 8009f18:	1b02      	subs	r2, r0, r4
 8009f1a:	3201      	adds	r2, #1
 8009f1c:	230a      	movs	r3, #10
 8009f1e:	b292      	uxth	r2, r2
 8009f20:	4621      	mov	r1, r4
 8009f22:	4806      	ldr	r0, [pc, #24]	; (8009f3c <BlueTooth_Param_Init+0x5c>)
 8009f24:	f7fd f833 	bl	8006f8e <HAL_UART_Transmit>
	HAL_Delay(10);
 8009f28:	200a      	movs	r0, #10
 8009f2a:	f7f7 f87f 	bl	800102c <HAL_Delay>
//	sprintf(buf, "%s%s", str, "?");

}
 8009f2e:	b00d      	add	sp, #52	; 0x34
 8009f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f32:	bf00      	nop
 8009f34:	080252e2 	.word	0x080252e2
 8009f38:	080252d4 	.word	0x080252d4
 8009f3c:	20095a54 	.word	0x20095a54

08009f40 <BlueTooth_Module_Name>:

void BlueTooth_Module_Name(char* name)
{
 8009f40:	b530      	push	{r4, r5, lr}
 8009f42:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buf[32]={0}, *p;
 8009f44:	ac02      	add	r4, sp, #8
{
 8009f46:	4605      	mov	r5, r0
	uint8_t buf[32]={0}, *p;
 8009f48:	2220      	movs	r2, #32
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f016 fb56 	bl	80205fe <memset>
	char str[] = "AT+NAME";
 8009f52:	490e      	ldr	r1, [pc, #56]	; (8009f8c <BlueTooth_Module_Name+0x4c>)
 8009f54:	6808      	ldr	r0, [r1, #0]
 8009f56:	6849      	ldr	r1, [r1, #4]
 8009f58:	466a      	mov	r2, sp
 8009f5a:	c203      	stmia	r2!, {r0, r1}

	sprintf(buf, "%s=%s\r\n", str, name);
 8009f5c:	462b      	mov	r3, r5
 8009f5e:	466a      	mov	r2, sp
 8009f60:	490b      	ldr	r1, [pc, #44]	; (8009f90 <BlueTooth_Module_Name+0x50>)
 8009f62:	4620      	mov	r0, r4
 8009f64:	f016 fb54 	bl	8020610 <sprintf>

	p = strchr(buf, '\n');
 8009f68:	210a      	movs	r1, #10
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f016 fb83 	bl	8020676 <strchr>

	HAL_UART_Transmit(&huart1, (uint8_t *)&buf, (p - &buf[0])+1, 10);
 8009f70:	1b02      	subs	r2, r0, r4
 8009f72:	3201      	adds	r2, #1
 8009f74:	230a      	movs	r3, #10
 8009f76:	b292      	uxth	r2, r2
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4806      	ldr	r0, [pc, #24]	; (8009f94 <BlueTooth_Module_Name+0x54>)
 8009f7c:	f7fd f807 	bl	8006f8e <HAL_UART_Transmit>
	HAL_Delay(10);
 8009f80:	200a      	movs	r0, #10
 8009f82:	f7f7 f853 	bl	800102c <HAL_Delay>
}
 8009f86:	b00b      	add	sp, #44	; 0x2c
 8009f88:	bd30      	pop	{r4, r5, pc}
 8009f8a:	bf00      	nop
 8009f8c:	080252b9 	.word	0x080252b9
 8009f90:	080252b1 	.word	0x080252b1
 8009f94:	20095a54 	.word	0x20095a54

08009f98 <BlueTooth_Set_PIN>:

void BlueTooth_Set_PIN(char* pass)
{
 8009f98:	b530      	push	{r4, r5, lr}
 8009f9a:	b08d      	sub	sp, #52	; 0x34
	uint8_t buf[32]={0}, *p;
 8009f9c:	ac04      	add	r4, sp, #16
{
 8009f9e:	4605      	mov	r5, r0
	uint8_t buf[32]={0}, *p;
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f016 fb2a 	bl	80205fe <memset>
	char str[] = "AT+PSWD";
 8009faa:	4a0f      	ldr	r2, [pc, #60]	; (8009fe8 <BlueTooth_Set_PIN+0x50>)
 8009fac:	6810      	ldr	r0, [r2, #0]
 8009fae:	6851      	ldr	r1, [r2, #4]
 8009fb0:	ab02      	add	r3, sp, #8
 8009fb2:	c303      	stmia	r3!, {r0, r1}

	sprintf(buf, "%s=%c%s%c\r\n", str,'"', pass,'"');
 8009fb4:	2322      	movs	r3, #34	; 0x22
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	aa02      	add	r2, sp, #8
 8009fba:	9500      	str	r5, [sp, #0]
 8009fbc:	490b      	ldr	r1, [pc, #44]	; (8009fec <BlueTooth_Set_PIN+0x54>)
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f016 fb26 	bl	8020610 <sprintf>

	p = strchr(buf, '\n');
 8009fc4:	210a      	movs	r1, #10
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f016 fb55 	bl	8020676 <strchr>

	HAL_UART_Transmit(&huart1, (uint8_t *)&buf, (p - &buf[0])+1, 10);
 8009fcc:	1b02      	subs	r2, r0, r4
 8009fce:	3201      	adds	r2, #1
 8009fd0:	230a      	movs	r3, #10
 8009fd2:	b292      	uxth	r2, r2
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4806      	ldr	r0, [pc, #24]	; (8009ff0 <BlueTooth_Set_PIN+0x58>)
 8009fd8:	f7fc ffd9 	bl	8006f8e <HAL_UART_Transmit>
	HAL_Delay(10);
 8009fdc:	200a      	movs	r0, #10
 8009fde:	f7f7 f825 	bl	800102c <HAL_Delay>

}
 8009fe2:	b00d      	add	sp, #52	; 0x34
 8009fe4:	bd30      	pop	{r4, r5, pc}
 8009fe6:	bf00      	nop
 8009fe8:	080252f6 	.word	0x080252f6
 8009fec:	080252ea 	.word	0x080252ea
 8009ff0:	20095a54 	.word	0x20095a54

08009ff4 <Bluetooth_Reset>:

void Bluetooth_Reset(void)
{
 8009ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char str[] = "AT+RESET\r\n";
 8009ff6:	4a0a      	ldr	r2, [pc, #40]	; (800a020 <Bluetooth_Reset+0x2c>)
 8009ff8:	6810      	ldr	r0, [r2, #0]
 8009ffa:	6851      	ldr	r1, [r2, #4]
 8009ffc:	ab01      	add	r3, sp, #4
 8009ffe:	c303      	stmia	r3!, {r0, r1}
 800a000:	8911      	ldrh	r1, [r2, #8]
 800a002:	7a92      	ldrb	r2, [r2, #10]
 800a004:	8019      	strh	r1, [r3, #0]
 800a006:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(&huart1, (uint8_t *)&str, sizeof(str), 10);
 800a008:	a901      	add	r1, sp, #4
 800a00a:	230a      	movs	r3, #10
 800a00c:	220b      	movs	r2, #11
 800a00e:	4805      	ldr	r0, [pc, #20]	; (800a024 <Bluetooth_Reset+0x30>)
 800a010:	f7fc ffbd 	bl	8006f8e <HAL_UART_Transmit>
	HAL_Delay(10);
 800a014:	200a      	movs	r0, #10
 800a016:	f7f7 f809 	bl	800102c <HAL_Delay>
}
 800a01a:	b005      	add	sp, #20
 800a01c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a020:	080252fe 	.word	0x080252fe
 800a024:	20095a54 	.word	0x20095a54

0800a028 <BlueTooth_Module_Init>:

void BlueTooth_Module_Init(void)
{
 800a028:	b510      	push	{r4, lr}


	BlueTooth_GPIO_Init();
 800a02a:	f7ff feb3 	bl	8009d94 <BlueTooth_GPIO_Init>
	BlueTooth_AT_Mode();
 800a02e:	f7ff ff1d 	bl	8009e6c <BlueTooth_AT_Mode>
	HAL_Delay(1000);
 800a032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a036:	f7f6 fff9 	bl	800102c <HAL_Delay>
	BlueTooth_Param_Init(BT_BAUD_RATE, 1, 0);
 800a03a:	2200      	movs	r2, #0
 800a03c:	2101      	movs	r1, #1
 800a03e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800a042:	f7ff ff4d 	bl	8009ee0 <BlueTooth_Param_Init>
	BlueTooth_Module_Name("TKA_SPECTR");
	BlueTooth_Set_PIN("1488");
	Bluetooth_Reset();

	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_RESET);
 800a046:	4c0e      	ldr	r4, [pc, #56]	; (800a080 <BlueTooth_Module_Init+0x58>)
	BlueTooth_Module_Name("TKA_SPECTR");
 800a048:	480e      	ldr	r0, [pc, #56]	; (800a084 <BlueTooth_Module_Init+0x5c>)
 800a04a:	f7ff ff79 	bl	8009f40 <BlueTooth_Module_Name>
	BlueTooth_Set_PIN("1488");
 800a04e:	480e      	ldr	r0, [pc, #56]	; (800a088 <BlueTooth_Module_Init+0x60>)
 800a050:	f7ff ffa2 	bl	8009f98 <BlueTooth_Set_PIN>
	Bluetooth_Reset();
 800a054:	f7ff ffce 	bl	8009ff4 <Bluetooth_Reset>
	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_RESET);
 800a058:	2200      	movs	r2, #0
 800a05a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a05e:	4620      	mov	r0, r4
 800a060:	f7f8 fac0 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a064:	2064      	movs	r0, #100	; 0x64
 800a066:	f7f6 ffe1 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 800a06a:	4620      	mov	r0, r4
 800a06c:	2200      	movs	r2, #0
 800a06e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a072:	f7f8 fab7 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a076:	2064      	movs	r0, #100	; 0x64


}
 800a078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 800a07c:	f7f6 bfd6 	b.w	800102c <HAL_Delay>
 800a080:	48000400 	.word	0x48000400
 800a084:	080252a1 	.word	0x080252a1
 800a088:	080252ac 	.word	0x080252ac
 800a08c:	00000000 	.word	0x00000000

0800a090 <calcNorm560>:
double M_inv[9] = { 1.07645, -0.237662, 0.161212,
					0.410964, 0.554342, 0.034694,
					-0.010954, -0.013389, 1.024343 };
					
void calcNorm560(uint16_t CCT_measure)
{
 800a090:	b508      	push	{r3, lr}
	norm_560 = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800a092:	f7f6 fa5f 	bl	8000554 <__aeabi_i2d>
 800a096:	a316      	add	r3, pc, #88	; (adr r3, 800a0f0 <calcNorm560+0x60>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7f6 fac0 	bl	8000620 <__aeabi_dmul>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	a114      	add	r1, pc, #80	; (adr r1, 800a0f8 <calcNorm560+0x68>)
 800a0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0aa:	f7f6 fbe3 	bl	8000874 <__aeabi_ddiv>
 800a0ae:	ec41 0b10 	vmov	d0, r0, r1
 800a0b2:	f019 faed 	bl	8023690 <exp>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	ec51 0b10 	vmov	r0, r1, d0
 800a0bc:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <calcNorm560+0x58>)
 800a0be:	f7f6 f8fb 	bl	80002b8 <__aeabi_dsub>
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	a106      	add	r1, pc, #24	; (adr r1, 800a0e0 <calcNorm560+0x50>)
 800a0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0cc:	f7f6 fbd2 	bl	8000874 <__aeabi_ddiv>
 800a0d0:	f7f6 fd9e 	bl	8000c10 <__aeabi_d2f>
 800a0d4:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <calcNorm560+0x5c>)
 800a0d6:	6018      	str	r0, [r3, #0]
 800a0d8:	bd08      	pop	{r3, pc}
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	f9f35846 	.word	0xf9f35846
 800a0e4:	466ca5d1 	.word	0x466ca5d1
 800a0e8:	3ff00000 	.word	0x3ff00000
 800a0ec:	20090868 	.word	0x20090868
 800a0f0:	05ea7ab3 	.word	0x05ea7ab3
 800a0f4:	3ea2ca5d 	.word	0x3ea2ca5d
 800a0f8:	aba38759 	.word	0xaba38759
 800a0fc:	3f8d7774 	.word	0x3f8d7774

0800a100 <calcSref>:
}

double ans = 0;
double calcSref(int idx, uint16_t CCT_measure)
{
 800a100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (CCT_measure < 5000)
 800a104:	f241 3387 	movw	r3, #4999	; 0x1387
 800a108:	4299      	cmp	r1, r3
{
 800a10a:	460e      	mov	r6, r1
 800a10c:	ea4f 0080 	mov.w	r0, r0, lsl #2
 800a110:	4c3b      	ldr	r4, [pc, #236]	; (800a200 <calcSref+0x100>)
	if (CCT_measure < 5000)
 800a112:	d84d      	bhi.n	800a1b0 <calcSref+0xb0>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800a114:	4d3b      	ldr	r5, [pc, #236]	; (800a204 <calcSref+0x104>)
 800a116:	4405      	add	r5, r0
 800a118:	6828      	ldr	r0, [r5, #0]
 800a11a:	f7f6 fa2d 	bl	8000578 <__aeabi_f2d>
 800a11e:	a332      	add	r3, pc, #200	; (adr r3, 800a1e8 <calcSref+0xe8>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f7f6 fa7c 	bl	8000620 <__aeabi_dmul>
 800a128:	4680      	mov	r8, r0
 800a12a:	4630      	mov	r0, r6
 800a12c:	4689      	mov	r9, r1
 800a12e:	f7f6 fa11 	bl	8000554 <__aeabi_i2d>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 fa71 	bl	8000620 <__aeabi_dmul>
 800a13e:	4602      	mov	r2, r0
 800a140:	460b      	mov	r3, r1
 800a142:	a12b      	add	r1, pc, #172	; (adr r1, 800a1f0 <calcSref+0xf0>)
 800a144:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a148:	f7f6 fb94 	bl	8000874 <__aeabi_ddiv>
 800a14c:	ec41 0b10 	vmov	d0, r0, r1
 800a150:	f019 fa9e 	bl	8023690 <exp>
 800a154:	2200      	movs	r2, #0
 800a156:	ec51 0b10 	vmov	r0, r1, d0
 800a15a:	4b2b      	ldr	r3, [pc, #172]	; (800a208 <calcSref+0x108>)
 800a15c:	f7f6 f8ac 	bl	80002b8 <__aeabi_dsub>
 800a160:	e9c4 0100 	strd	r0, r1, [r4]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800a164:	6828      	ldr	r0, [r5, #0]
 800a166:	f7f6 fa07 	bl	8000578 <__aeabi_f2d>
 800a16a:	a31f      	add	r3, pc, #124	; (adr r3, 800a1e8 <calcSref+0xe8>)
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f7f6 fa56 	bl	8000620 <__aeabi_dmul>
 800a174:	ed9f 1b20 	vldr	d1, [pc, #128]	; 800a1f8 <calcSref+0xf8>
 800a178:	ec41 0b10 	vmov	d0, r0, r1
 800a17c:	f019 fb84 	bl	8023888 <pow>
 800a180:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a184:	ec51 0b10 	vmov	r0, r1, d0
 800a188:	f7f6 fb74 	bl	8000874 <__aeabi_ddiv>
		ans /= norm_560;
 800a18c:	4b1f      	ldr	r3, [pc, #124]	; (800a20c <calcSref+0x10c>)
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800a18e:	4606      	mov	r6, r0
		ans /= norm_560;
 800a190:	6818      	ldr	r0, [r3, #0]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800a192:	460f      	mov	r7, r1
		ans /= norm_560;
 800a194:	f7f6 f9f0 	bl	8000578 <__aeabi_f2d>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 fb68 	bl	8000874 <__aeabi_ddiv>
	}
	else
	{
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 800a1a4:	e9c4 0100 	strd	r0, r1, [r4]
	}
	return ans;
}
 800a1a8:	ed94 0b00 	vldr	d0, [r4]
 800a1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 800a1b0:	4a17      	ldr	r2, [pc, #92]	; (800a210 <calcSref+0x110>)
 800a1b2:	4b18      	ldr	r3, [pc, #96]	; (800a214 <calcSref+0x114>)
 800a1b4:	4918      	ldr	r1, [pc, #96]	; (800a218 <calcSref+0x118>)
 800a1b6:	4403      	add	r3, r0
 800a1b8:	4401      	add	r1, r0
 800a1ba:	4410      	add	r0, r2
 800a1bc:	4a17      	ldr	r2, [pc, #92]	; (800a21c <calcSref+0x11c>)
 800a1be:	edd1 6a00 	vldr	s13, [r1]
 800a1c2:	ed92 7a00 	vldr	s14, [r2]
 800a1c6:	edd0 7a00 	vldr	s15, [r0]
 800a1ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a1ce:	edd3 6a00 	vldr	s13, [r3]
 800a1d2:	4b13      	ldr	r3, [pc, #76]	; (800a220 <calcSref+0x120>)
 800a1d4:	ed93 7a00 	vldr	s14, [r3]
 800a1d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a1dc:	ee17 0a90 	vmov	r0, s15
 800a1e0:	f7f6 f9ca 	bl	8000578 <__aeabi_f2d>
 800a1e4:	e7de      	b.n	800a1a4 <calcSref+0xa4>
 800a1e6:	bf00      	nop
 800a1e8:	e826d695 	.word	0xe826d695
 800a1ec:	3e112e0b 	.word	0x3e112e0b
 800a1f0:	aba38759 	.word	0xaba38759
 800a1f4:	3f8d7774 	.word	0x3f8d7774
 800a1f8:	00000000 	.word	0x00000000
 800a1fc:	c0140000 	.word	0xc0140000
 800a200:	20003638 	.word	0x20003638
 800a204:	20054948 	.word	0x20054948
 800a208:	3ff00000 	.word	0x3ff00000
 800a20c:	20090868 	.word	0x20090868
 800a210:	2004e93c 	.word	0x2004e93c
 800a214:	2005093c 	.word	0x2005093c
 800a218:	2004f93c 	.word	0x2004f93c
 800a21c:	2000361c 	.word	0x2000361c
 800a220:	20003620 	.word	0x20003620
 800a224:	00000000 	.word	0x00000000

0800a228 <cqs_func>:

void cqs_func(uint16_t CCT_measure, float *Rabs)
{
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	ed2d 8b0a 	vpush	{d8-d12}
 800a230:	b0af      	sub	sp, #188	; 0xbc
 800a232:	460c      	mov	r4, r1
 800a234:	9004      	str	r0, [sp, #16]
	double x_test = 0;	
	double y_test = 0;		
	double z_test = 0;	
	
	
	memset(CQS_S_test, 0, sizeof(CQS_S_test));
 800a236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a23a:	2100      	movs	r1, #0
 800a23c:	48c4      	ldr	r0, [pc, #784]	; (800a550 <cqs_func+0x328>)
 800a23e:	f016 f9de 	bl	80205fe <memset>
	memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a246:	2100      	movs	r1, #0
 800a248:	48c2      	ldr	r0, [pc, #776]	; (800a554 <cqs_func+0x32c>)
 800a24a:	f016 f9d8 	bl	80205fe <memset>
	
	for (uint16_t i = 0; i < 1024; i++){
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 800a24e:	4bc2      	ldr	r3, [pc, #776]	; (800a558 <cqs_func+0x330>)
 800a250:	ed93 7a00 	vldr	s14, [r3]
 800a254:	4bbe      	ldr	r3, [pc, #760]	; (800a550 <cqs_func+0x328>)
 800a256:	4621      	mov	r1, r4
 800a258:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800a25c:	ecf1 6a01 	vldmia	r1!, {s13}
 800a260:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t i = 0; i < 1024; i++){
 800a264:	428a      	cmp	r2, r1
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 800a266:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t i = 0; i < 1024; i++){
 800a26a:	d1f7      	bne.n	800a25c <cqs_func+0x34>
	}

	if (CCT_measure < 3500){
 800a26c:	9a04      	ldr	r2, [sp, #16]
 800a26e:	f640 53ab 	movw	r3, #3499	; 0xdab
 800a272:	429a      	cmp	r2, r3
 800a274:	f200 870d 	bhi.w	800b092 <cqs_func+0xe6a>
		Mcct = (float)CCT_measure*(float)CCT_measure*(float)CCT_measure*0.000000000092672 - (float)CCT_measure*(float)CCT_measure*0.00000083959 + (float)CCT_measure*0.00255 - 1.612;
 800a278:	ee07 2a90 	vmov	s15, r2
 800a27c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800a280:	ee68 8a08 	vmul.f32	s17, s16, s16
 800a284:	ee68 7a28 	vmul.f32	s15, s16, s17
 800a288:	ee17 0a90 	vmov	r0, s15
 800a28c:	f7f6 f974 	bl	8000578 <__aeabi_f2d>
 800a290:	a3a3      	add	r3, pc, #652	; (adr r3, 800a520 <cqs_func+0x2f8>)
 800a292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a296:	f7f6 f9c3 	bl	8000620 <__aeabi_dmul>
 800a29a:	4604      	mov	r4, r0
 800a29c:	ee18 0a90 	vmov	r0, s17
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	f7f6 f969 	bl	8000578 <__aeabi_f2d>
 800a2a6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a528 <cqs_func+0x300>)
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	f7f6 f9b8 	bl	8000620 <__aeabi_dmul>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7f5 fffe 	bl	80002b8 <__aeabi_dsub>
 800a2bc:	4604      	mov	r4, r0
 800a2be:	ee18 0a10 	vmov	r0, s16
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	f7f6 f958 	bl	8000578 <__aeabi_f2d>
 800a2c8:	a399      	add	r3, pc, #612	; (adr r3, 800a530 <cqs_func+0x308>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f6 f9a7 	bl	8000620 <__aeabi_dmul>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f7f5 ffef 	bl	80002bc <__adddf3>
 800a2de:	a396      	add	r3, pc, #600	; (adr r3, 800a538 <cqs_func+0x310>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f5 ffe8 	bl	80002b8 <__aeabi_dsub>
 800a2e8:	4b9c      	ldr	r3, [pc, #624]	; (800a55c <cqs_func+0x334>)
 800a2ea:	e9c3 0100 	strd	r0, r1, [r3]
	}
	
	if (CCT_measure < 5000)
	{
		calcNorm560(CCT_measure);
 800a2ee:	9804      	ldr	r0, [sp, #16]
 800a2f0:	f7ff fece 	bl	800a090 <calcNorm560>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
	}
	
	bar_CQS = 0.2;
 800a2f4:	a192      	add	r1, pc, #584	; (adr r1, 800a540 <cqs_func+0x318>)
 800a2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2fa:	4b99      	ldr	r3, [pc, #612]	; (800a560 <cqs_func+0x338>)
	GUI_Bar_Measure(85, 13, bar_CQS);
 800a2fc:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800a564 <cqs_func+0x33c>
	bar_CQS = 0.2;
 800a300:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CQS);
 800a304:	210d      	movs	r1, #13
 800a306:	2055      	movs	r0, #85	; 0x55
 800a308:	f009 f984 	bl	8013614 <GUI_Bar_Measure>

	memset(x_ref, 0, sizeof(x_ref));
 800a30c:	2278      	movs	r2, #120	; 0x78
 800a30e:	2100      	movs	r1, #0
 800a310:	4895      	ldr	r0, [pc, #596]	; (800a568 <cqs_func+0x340>)
 800a312:	f016 f974 	bl	80205fe <memset>
	memset(y_ref, 0, sizeof(y_ref));
 800a316:	2278      	movs	r2, #120	; 0x78
 800a318:	2100      	movs	r1, #0
 800a31a:	4894      	ldr	r0, [pc, #592]	; (800a56c <cqs_func+0x344>)
 800a31c:	f016 f96f 	bl	80205fe <memset>
	memset(z_ref, 0, sizeof(z_ref));
 800a320:	2278      	movs	r2, #120	; 0x78
 800a322:	2100      	movs	r1, #0
 800a324:	4892      	ldr	r0, [pc, #584]	; (800a570 <cqs_func+0x348>)
 800a326:	f016 f96a 	bl	80205fe <memset>
	double zw_test = 0;
 800a32a:	f04f 0a00 	mov.w	sl, #0
 800a32e:	f04f 0b00 	mov.w	fp, #0
 800a332:	4b8d      	ldr	r3, [pc, #564]	; (800a568 <cqs_func+0x340>)
 800a334:	930a      	str	r3, [sp, #40]	; 0x28
	double yw_test = 0;
 800a336:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 800a33a:	4b8c      	ldr	r3, [pc, #560]	; (800a56c <cqs_func+0x344>)
 800a33c:	9308      	str	r3, [sp, #32]
	double xw_test = 0;
 800a33e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
	double zw_ref = 0;
 800a342:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	double yw_ref = 0;
 800a346:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	double xw_ref = 0;
 800a34a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	double k_test = 0;
 800a34e:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double k_ref = 0;
 800a352:	e9cd ab00 	strd	sl, fp, [sp]
 800a356:	4b86      	ldr	r3, [pc, #536]	; (800a570 <cqs_func+0x348>)
 800a358:	9306      	str	r3, [sp, #24]
		bar_CQS += 0.04;
		GUI_Bar_Measure(85, 13, bar_CQS);
		
		 x_test = 0;	
		 y_test = 0;		
		 z_test = 0;	
 800a35a:	ec4b ab1b 	vmov	d11, sl, fp
		 y_test = 0;		
 800a35e:	ec4b ab1a 	vmov	d10, sl, fp
	memset(z_ref, 0, sizeof(z_ref));
 800a362:	2400      	movs	r4, #0
		bar_CQS += 0.04;
 800a364:	4d7e      	ldr	r5, [pc, #504]	; (800a560 <cqs_func+0x338>)
 800a366:	4f83      	ldr	r7, [pc, #524]	; (800a574 <cqs_func+0x34c>)
	
	
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 800a368:	4e79      	ldr	r6, [pc, #484]	; (800a550 <cqs_func+0x328>)
		bar_CQS += 0.04;
 800a36a:	a377      	add	r3, pc, #476	; (adr r3, 800a548 <cqs_func+0x320>)
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a374:	f7f5 ffa2 	bl	80002bc <__adddf3>
 800a378:	e9c5 0100 	strd	r0, r1, [r5]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a37c:	f7f6 fc48 	bl	8000c10 <__aeabi_d2f>
 800a380:	210d      	movs	r1, #13
 800a382:	ee00 0a10 	vmov	s0, r0
 800a386:	2055      	movs	r0, #85	; 0x55
 800a388:	f009 f944 	bl	8013614 <GUI_Bar_Measure>
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 800a38c:	487a      	ldr	r0, [pc, #488]	; (800a578 <cqs_func+0x350>)
 800a38e:	4a71      	ldr	r2, [pc, #452]	; (800a554 <cqs_func+0x32c>)
 800a390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a394:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800a398:	f004 ff1a 	bl	800f1d0 <Calibration_Load_Pack>
 800a39c:	4b77      	ldr	r3, [pc, #476]	; (800a57c <cqs_func+0x354>)
 800a39e:	9320      	str	r3, [sp, #128]	; 0x80
 800a3a0:	4b77      	ldr	r3, [pc, #476]	; (800a580 <cqs_func+0x358>)
 800a3a2:	931e      	str	r3, [sp, #120]	; 0x78
		 z_test = 0;	
 800a3a4:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
 800a3a8:	4b76      	ldr	r3, [pc, #472]	; (800a584 <cqs_func+0x35c>)
 800a3aa:	931c      	str	r3, [sp, #112]	; 0x70
		 y_test = 0;		
 800a3ac:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
		 x_test = 0;	
 800a3b0:	ed8d ab16 	vstr	d10, [sp, #88]	; 0x58
 800a3b4:	b2e3      	uxtb	r3, r4

		for (int j = 0; j < 1024; j++)
 800a3b6:	2500      	movs	r5, #0
 800a3b8:	9326      	str	r3, [sp, #152]	; 0x98
		{
			if (i == 0)
 800a3ba:	2c00      	cmp	r4, #0
 800a3bc:	d17d      	bne.n	800a4ba <cqs_func+0x292>
			{
				s_ref[j] = calcSref(j, CCT_measure);
 800a3be:	9904      	ldr	r1, [sp, #16]
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f7ff fe9d 	bl	800a100 <calcSref>
 800a3c6:	ec51 0b10 	vmov	r0, r1, d0
 800a3ca:	f7f6 fc21 	bl	8000c10 <__aeabi_d2f>
 800a3ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3d0:	6018      	str	r0, [r3, #0]
				k_ref += s_ref[j] * Spectral_day[j];
 800a3d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
				s_ref[j] = calcSref(j, CCT_measure);
 800a3d4:	ee08 0a10 	vmov	s16, r0
				k_ref += s_ref[j] * Spectral_day[j];
 800a3d8:	edd3 9a00 	vldr	s19, [r3]
 800a3dc:	ee68 7a29 	vmul.f32	s15, s16, s19
 800a3e0:	ee17 0a90 	vmov	r0, s15
 800a3e4:	f7f6 f8c8 	bl	8000578 <__aeabi_f2d>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	4680      	mov	r8, r0
 800a3ec:	4689      	mov	r9, r1
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3f4:	f7f5 ff62 	bl	80002bc <__adddf3>
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a3f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a3fa:	ed93 9a00 	vldr	s18, [r3]
 800a3fe:	ee68 7a09 	vmul.f32	s15, s16, s18
				k_ref += s_ref[j] * Spectral_day[j];
 800a402:	e9cd 0100 	strd	r0, r1, [sp]
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a406:	ee17 0a90 	vmov	r0, s15
 800a40a:	f7f6 f8b5 	bl	8000578 <__aeabi_f2d>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a416:	f7f5 ff51 	bl	80002bc <__adddf3>
				yw_ref += s_ref[j] * Spectral_day[j];
 800a41a:	4642      	mov	r2, r8
 800a41c:	464b      	mov	r3, r9
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a41e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				yw_ref += s_ref[j] * Spectral_day[j];
 800a422:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a426:	f7f5 ff49 	bl	80002bc <__adddf3>
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a42a:	edd7 8a00 	vldr	s17, [r7]
 800a42e:	ee68 7a28 	vmul.f32	s15, s16, s17
				yw_ref += s_ref[j] * Spectral_day[j];
 800a432:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a436:	ee17 0a90 	vmov	r0, s15
 800a43a:	f7f6 f89d 	bl	8000578 <__aeabi_f2d>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a446:	f7f5 ff39 	bl	80002bc <__adddf3>
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a44a:	ed96 8a00 	vldr	s16, [r6]
 800a44e:	ee69 7a88 	vmul.f32	s15, s19, s16
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a452:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a456:	ee17 0a90 	vmov	r0, s15
 800a45a:	f7f6 f88d 	bl	8000578 <__aeabi_f2d>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4680      	mov	r8, r0
 800a464:	4689      	mov	r9, r1
 800a466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a46a:	f7f5 ff27 	bl	80002bc <__adddf3>
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a46e:	ee69 7a08 	vmul.f32	s15, s18, s16
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a472:	e9cd 0102 	strd	r0, r1, [sp, #8]
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a476:	ee17 0a90 	vmov	r0, s15
 800a47a:	f7f6 f87d 	bl	8000578 <__aeabi_f2d>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a486:	f7f5 ff19 	bl	80002bc <__adddf3>
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a48a:	4642      	mov	r2, r8
 800a48c:	464b      	mov	r3, r9
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a48e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a492:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800a496:	f7f5 ff11 	bl	80002bc <__adddf3>
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 800a49a:	ee68 7a88 	vmul.f32	s15, s17, s16
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a49e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 800a4a2:	ee17 0a90 	vmov	r0, s15
 800a4a6:	f7f6 f867 	bl	8000578 <__aeabi_f2d>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	4659      	mov	r1, fp
 800a4b2:	f7f5 ff03 	bl	80002bc <__adddf3>
 800a4b6:	4682      	mov	sl, r0
 800a4b8:	468b      	mov	fp, r1
			}

			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a4ba:	4b26      	ldr	r3, [pc, #152]	; (800a554 <cqs_func+0x32c>)
 800a4bc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a4c0:	ed93 8a00 	vldr	s16, [r3]
 800a4c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a4c6:	ecb3 9a01 	vldmia	r3!, {s18}
 800a4ca:	9320      	str	r3, [sp, #128]	; 0x80
 800a4cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4ce:	ee28 9a09 	vmul.f32	s18, s16, s18
 800a4d2:	ecf3 9a01 	vldmia	r3!, {s19}
 800a4d6:	ee69 7a29 	vmul.f32	s15, s18, s19
 800a4da:	931e      	str	r3, [sp, #120]	; 0x78
 800a4dc:	ee17 0a90 	vmov	r0, s15
 800a4e0:	f7f6 f84a 	bl	8000578 <__aeabi_f2d>
 800a4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f7f5 fee7 	bl	80002bc <__adddf3>
 800a4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f0:	e9c3 0100 	strd	r0, r1, [r3]
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a4f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a4f6:	ecf3 8a01 	vldmia	r3!, {s17}
 800a4fa:	ee68 8a28 	vmul.f32	s17, s16, s17
			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a4fe:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a502:	ee69 7aa8 	vmul.f32	s15, s19, s17
 800a506:	931c      	str	r3, [sp, #112]	; 0x70
 800a508:	ee17 0a90 	vmov	r0, s15
 800a50c:	f7f6 f834 	bl	8000578 <__aeabi_f2d>
 800a510:	9b08      	ldr	r3, [sp, #32]
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f7f5 fed1 	bl	80002bc <__adddf3>
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a51a:	ecf7 7a01 	vldmia	r7!, {s15}
 800a51e:	e033      	b.n	800a588 <cqs_func+0x360>
 800a520:	56b31fbb 	.word	0x56b31fbb
 800a524:	3dd97936 	.word	0x3dd97936
 800a528:	ef649b9b 	.word	0xef649b9b
 800a52c:	3eac2c05 	.word	0x3eac2c05
 800a530:	d35a8588 	.word	0xd35a8588
 800a534:	3f64e3bc 	.word	0x3f64e3bc
 800a538:	83126e98 	.word	0x83126e98
 800a53c:	3ff9cac0 	.word	0x3ff9cac0
 800a540:	9999999a 	.word	0x9999999a
 800a544:	3fc99999 	.word	0x3fc99999
 800a548:	47ae147b 	.word	0x47ae147b
 800a54c:	3fa47ae1 	.word	0x3fa47ae1
 800a550:	2000261c 	.word	0x2000261c
 800a554:	2000161c 	.word	0x2000161c
 800a558:	200958fc 	.word	0x200958fc
 800a55c:	20000188 	.word	0x20000188
 800a560:	200906f0 	.word	0x200906f0
 800a564:	3e4ccccd 	.word	0x3e4ccccd
 800a568:	200906f8 	.word	0x200906f8
 800a56c:	20090888 	.word	0x20090888
 800a570:	200907f0 	.word	0x200907f0
 800a574:	2008d514 	.word	0x2008d514
 800a578:	0810c040 	.word	0x0810c040
 800a57c:	2008a514 	.word	0x2008a514
 800a580:	20003640 	.word	0x20003640
 800a584:	20052940 	.word	0x20052940
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a588:	9b08      	ldr	r3, [sp, #32]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a58a:	ee28 8a27 	vmul.f32	s16, s16, s15
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a58e:	e9c3 0100 	strd	r0, r1, [r3]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a592:	ee69 7a88 	vmul.f32	s15, s19, s16
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a596:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a59a:	ee17 0a90 	vmov	r0, s15
 800a59e:	f7f5 ffeb 	bl	8000578 <__aeabi_f2d>
 800a5a2:	9b06      	ldr	r3, [sp, #24]
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f7f5 fe88 	bl	80002bc <__adddf3>
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5ac:	ecf6 9a01 	vldmia	r6!, {s19}
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a5b0:	9b06      	ldr	r3, [sp, #24]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5b2:	ee69 7a29 	vmul.f32	s15, s18, s19
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	4689      	mov	r9, r1
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5ba:	ee17 0a90 	vmov	r0, s15
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a5be:	e9c3 8900 	strd	r8, r9, [r3]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5c2:	f7f5 ffd9 	bl	8000578 <__aeabi_f2d>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a5ce:	f7f5 fe75 	bl	80002bc <__adddf3>
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5d2:	ee68 7aa9 	vmul.f32	s15, s17, s19
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5d6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5da:	ee17 0a90 	vmov	r0, s15
 800a5de:	f7f5 ffcb 	bl	8000578 <__aeabi_f2d>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a5ea:	f7f5 fe67 	bl	80002bc <__adddf3>
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5ee:	ee68 7a29 	vmul.f32	s15, s16, s19
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5f2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a5f6:	ee17 0a90 	vmov	r0, s15
 800a5fa:	f7f5 ffbd 	bl	8000578 <__aeabi_f2d>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a606:	f7f5 fe59 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800a60a:	3501      	adds	r5, #1
 800a60c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a610:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		for (int j = 0; j < 1024; j++)
 800a614:	f47f aed1 	bne.w	800a3ba <cqs_func+0x192>
		}
		
		memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a61c:	2100      	movs	r1, #0
 800a61e:	4874      	ldr	r0, [pc, #464]	; (800a7f0 <cqs_func+0x5c8>)
 800a620:	f015 ffed 	bl	80205fe <memset>
		
		if (i == 0) {
 800a624:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a626:	b97b      	cbnz	r3, 800a648 <cqs_func+0x420>
			k_ref = 100 / k_ref;
 800a628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a62c:	2000      	movs	r0, #0
 800a62e:	4971      	ldr	r1, [pc, #452]	; (800a7f4 <cqs_func+0x5cc>)
 800a630:	f7f6 f920 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800a634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_ref = 100 / k_ref;
 800a638:	e9cd 0100 	strd	r0, r1, [sp]
			k_test = 100 / k_test;
 800a63c:	2000      	movs	r0, #0
 800a63e:	496d      	ldr	r1, [pc, #436]	; (800a7f4 <cqs_func+0x5cc>)
 800a640:	f7f6 f918 	bl	8000874 <__aeabi_ddiv>
 800a644:	e9cd 0102 	strd	r0, r1, [sp, #8]
		}
			
		x_ref[i] *= k_ref;
 800a648:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a64c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a650:	f7f5 ffe6 	bl	8000620 <__aeabi_dmul>
 800a654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
		z_ref[i] *= k_ref;
		x_test *= k_test;
		y_test *= k_test;
		z_test *= k_test;
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a656:	4d68      	ldr	r5, [pc, #416]	; (800a7f8 <cqs_func+0x5d0>)
 800a658:	4f68      	ldr	r7, [pc, #416]	; (800a7fc <cqs_func+0x5d4>)
		x_ref[i] *= k_ref;
 800a65a:	e8e3 0102 	strd	r0, r1, [r3], #8
		y_ref[i] *= k_ref;
 800a65e:	e9dd 0100 	ldrd	r0, r1, [sp]
		x_ref[i] *= k_ref;
 800a662:	930a      	str	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
 800a664:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a668:	f7f5 ffda 	bl	8000620 <__aeabi_dmul>
 800a66c:	9b08      	ldr	r3, [sp, #32]
 800a66e:	e8e3 0102 	strd	r0, r1, [r3], #8
		z_ref[i] *= k_ref;
 800a672:	4642      	mov	r2, r8
		y_ref[i] *= k_ref;
 800a674:	9308      	str	r3, [sp, #32]
		z_ref[i] *= k_ref;
 800a676:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a67a:	464b      	mov	r3, r9
 800a67c:	f7f5 ffd0 	bl	8000620 <__aeabi_dmul>
 800a680:	9b06      	ldr	r3, [sp, #24]
 800a682:	e8e3 0102 	strd	r0, r1, [r3], #8
		x_test *= k_test;
 800a686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		z_ref[i] *= k_ref;
 800a68a:	9306      	str	r3, [sp, #24]
		x_test *= k_test;
 800a68c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a690:	f7f5 ffc6 	bl	8000620 <__aeabi_dmul>
		y_test *= k_test;
 800a694:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
		x_test *= k_test;
 800a698:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
		y_test *= k_test;
 800a69c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6a0:	f7f5 ffbe 	bl	8000620 <__aeabi_dmul>
		z_test *= k_test;
 800a6a4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
		y_test *= k_test;
 800a6a8:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		z_test *= k_test;
 800a6ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6b0:	f7f5 ffb6 	bl	8000620 <__aeabi_dmul>
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a6b4:	ed95 7b00 	vldr	d7, [r5]
 800a6b8:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800a6bc:	ed95 7b02 	vldr	d7, [r5, #8]
 800a6c0:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800a6c4:	ed95 7b04 	vldr	d7, [r5, #16]
 800a6c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		z_test *= k_test;
 800a6cc:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a6d0:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a6d4:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800a6d8:	f7f5 ffa2 	bl	8000620 <__aeabi_dmul>
 800a6dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a6e0:	4680      	mov	r8, r0
 800a6e2:	4689      	mov	r9, r1
 800a6e4:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a6e8:	f7f5 ff9a 	bl	8000620 <__aeabi_dmul>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	4649      	mov	r1, r9
 800a6f4:	f7f5 fde2 	bl	80002bc <__adddf3>
 800a6f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	4689      	mov	r9, r1
 800a700:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a704:	f7f5 ff8c 	bl	8000620 <__aeabi_dmul>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4640      	mov	r0, r8
 800a70e:	4649      	mov	r1, r9
 800a710:	f7f5 fdd4 	bl	80002bc <__adddf3>
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a714:	ed95 7b06 	vldr	d7, [r5, #24]
 800a718:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800a71c:	ed95 7b08 	vldr	d7, [r5, #32]
 800a720:	00e6      	lsls	r6, r4, #3
 800a722:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800a726:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a72a:	4437      	add	r7, r6
 800a72c:	e9c7 0100 	strd	r0, r1, [r7]
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a730:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800a734:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a738:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 800a73c:	f7f5 ff70 	bl	8000620 <__aeabi_dmul>
 800a740:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a744:	4680      	mov	r8, r0
 800a746:	4689      	mov	r9, r1
 800a748:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a74c:	f7f5 ff68 	bl	8000620 <__aeabi_dmul>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4640      	mov	r0, r8
 800a756:	4649      	mov	r1, r9
 800a758:	f7f5 fdb0 	bl	80002bc <__adddf3>
 800a75c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a760:	4680      	mov	r8, r0
 800a762:	4689      	mov	r9, r1
 800a764:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a768:	f7f5 ff5a 	bl	8000620 <__aeabi_dmul>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	4640      	mov	r0, r8
 800a772:	4649      	mov	r1, r9
 800a774:	f7f5 fda2 	bl	80002bc <__adddf3>
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a778:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
 800a77c:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800a780:	ed95 7b0e 	vldr	d7, [r5, #56]	; 0x38
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a784:	4f1e      	ldr	r7, [pc, #120]	; (800a800 <cqs_func+0x5d8>)
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a786:	4b1f      	ldr	r3, [pc, #124]	; (800a804 <cqs_func+0x5dc>)
 800a788:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 800a78c:	ed95 7b10 	vldr	d7, [r5, #64]	; 0x40
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a790:	4437      	add	r7, r6
 800a792:	e9c7 0100 	strd	r0, r1, [r7]
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a796:	441e      	add	r6, r3
 800a798:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a79c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a7a0:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800a7a4:	f7f5 ff3c 	bl	8000620 <__aeabi_dmul>
 800a7a8:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4689      	mov	r9, r1
 800a7b0:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a7b4:	f7f5 ff34 	bl	8000620 <__aeabi_dmul>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4640      	mov	r0, r8
 800a7be:	4649      	mov	r1, r9
 800a7c0:	f7f5 fd7c 	bl	80002bc <__adddf3>
 800a7c4:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	4689      	mov	r9, r1
 800a7cc:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a7d0:	f7f5 ff26 	bl	8000620 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f7f5 fd6e 	bl	80002bc <__adddf3>
 800a7e0:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 15; i++)
 800a7e2:	2c0f      	cmp	r4, #15
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a7e4:	e9c6 0100 	strd	r0, r1, [r6]
	for (uint8_t i = 0; i < 15; i++)
 800a7e8:	f47f adbc 	bne.w	800a364 <cqs_func+0x13c>
 800a7ec:	e00e      	b.n	800a80c <cqs_func+0x5e4>
 800a7ee:	bf00      	nop
 800a7f0:	2000161c 	.word	0x2000161c
 800a7f4:	40590000 	.word	0x40590000
 800a7f8:	200000f8 	.word	0x200000f8
 800a7fc:	20090778 	.word	0x20090778
 800a800:	20090900 	.word	0x20090900
 800a804:	20090678 	.word	0x20090678
 800a808:	00000000 	.word	0x00000000
	}

	xw_ref *= k_ref;
 800a80c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a810:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a814:	f7f5 ff04 	bl	8000620 <__aeabi_dmul>
	yw_ref *= k_ref;
 800a818:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	xw_ref *= k_ref;
 800a81c:	e9cd 0106 	strd	r0, r1, [sp, #24]
	yw_ref *= k_ref;
 800a820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a824:	f7f5 fefc 	bl	8000620 <__aeabi_dmul>
	zw_ref *= k_ref;
 800a828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	yw_ref *= k_ref;
 800a82c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	zw_ref *= k_ref;
 800a830:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a834:	f7f5 fef4 	bl	8000620 <__aeabi_dmul>
	xw_test *= k_test;
 800a838:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
	zw_ref *= k_ref;
 800a83c:	e9cd 0108 	strd	r0, r1, [sp, #32]
	xw_test *= k_test;
 800a840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a844:	f7f5 feec 	bl	8000620 <__aeabi_dmul>
	yw_test *= k_test;
 800a848:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	xw_test *= k_test;
 800a84c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	yw_test *= k_test;
 800a850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a854:	f7f5 fee4 	bl	8000620 <__aeabi_dmul>
	zw_test *= k_test;
 800a858:	4652      	mov	r2, sl
 800a85a:	465b      	mov	r3, fp
	yw_test *= k_test;
 800a85c:	e9cd 0100 	strd	r0, r1, [sp]
	zw_test *= k_test;
 800a860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a864:	f7f5 fedc 	bl	8000620 <__aeabi_dmul>

	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a868:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	zw_test *= k_test;
 800a86c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a870:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a874:	f7f5 fed4 	bl	8000620 <__aeabi_dmul>
 800a878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a87c:	4604      	mov	r4, r0
 800a87e:	460d      	mov	r5, r1
 800a880:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a884:	f7f5 fecc 	bl	8000620 <__aeabi_dmul>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4620      	mov	r0, r4
 800a88e:	4629      	mov	r1, r5
 800a890:	f7f5 fd14 	bl	80002bc <__adddf3>
 800a894:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a898:	4604      	mov	r4, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a8a0:	f7f5 febe 	bl	8000620 <__aeabi_dmul>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7f5 fd06 	bl	80002bc <__adddf3>
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a8b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a8b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a8b8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a8bc:	f7f5 feb0 	bl	8000620 <__aeabi_dmul>
 800a8c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a8cc:	f7f5 fea8 	bl	8000620 <__aeabi_dmul>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	f7f5 fcf0 	bl	80002bc <__adddf3>
 800a8dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	460d      	mov	r5, r1
 800a8e4:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a8e8:	f7f5 fe9a 	bl	8000620 <__aeabi_dmul>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	f7f5 fce2 	bl	80002bc <__adddf3>
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a8f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a8fc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a900:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a904:	f7f5 fe8c 	bl	8000620 <__aeabi_dmul>
 800a908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a90c:	4604      	mov	r4, r0
 800a90e:	460d      	mov	r5, r1
 800a910:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a914:	f7f5 fe84 	bl	8000620 <__aeabi_dmul>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4620      	mov	r0, r4
 800a91e:	4629      	mov	r1, r5
 800a920:	f7f5 fccc 	bl	80002bc <__adddf3>
 800a924:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a928:	4604      	mov	r4, r0
 800a92a:	460d      	mov	r5, r1
 800a92c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a930:	f7f5 fe76 	bl	8000620 <__aeabi_dmul>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f5 fcbe 	bl	80002bc <__adddf3>
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a940:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a944:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a948:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a94c:	f7f5 fe68 	bl	8000620 <__aeabi_dmul>
 800a950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a954:	4604      	mov	r4, r0
 800a956:	460d      	mov	r5, r1
 800a958:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a95c:	f7f5 fe60 	bl	8000620 <__aeabi_dmul>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4620      	mov	r0, r4
 800a966:	4629      	mov	r1, r5
 800a968:	f7f5 fca8 	bl	80002bc <__adddf3>
 800a96c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a970:	4604      	mov	r4, r0
 800a972:	460d      	mov	r5, r1
 800a974:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a978:	f7f5 fe52 	bl	8000620 <__aeabi_dmul>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4620      	mov	r0, r4
 800a982:	4629      	mov	r1, r5
 800a984:	f7f5 fc9a 	bl	80002bc <__adddf3>
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a988:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a98c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a990:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a994:	f7f5 fe44 	bl	8000620 <__aeabi_dmul>
 800a998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a9a4:	f7f5 fe3c 	bl	8000620 <__aeabi_dmul>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f7f5 fc84 	bl	80002bc <__adddf3>
 800a9b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a9c0:	f7f5 fe2e 	bl	8000620 <__aeabi_dmul>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7f5 fc76 	bl	80002bc <__adddf3>
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a9d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a9d4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a9d8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a9dc:	f7f5 fe20 	bl	8000620 <__aeabi_dmul>
 800a9e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	460d      	mov	r5, r1
 800a9e8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a9ec:	f7f5 fe18 	bl	8000620 <__aeabi_dmul>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	f7f5 fc60 	bl	80002bc <__adddf3>
 800a9fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa00:	4604      	mov	r4, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800aa08:	f7f5 fe0a 	bl	8000620 <__aeabi_dmul>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4620      	mov	r0, r4
 800aa12:	4629      	mov	r1, r5
 800aa14:	f7f5 fc52 	bl	80002bc <__adddf3>

	float alpha = yw_test / yw_ref;
 800aa18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800aa1c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	float alpha = yw_test / yw_ref;
 800aa20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa24:	f7f5 ff26 	bl	8000874 <__aeabi_ddiv>
 800aa28:	f7f6 f8f2 	bl	8000c10 <__aeabi_d2f>
	float delta_e_rms = 0;
	float sum_delta_e = 0;
	float sum_delta_c = 0;
 800aa2c:	ed5f 8a8a 	vldr	s17, [pc, #-552]	; 800a808 <cqs_func+0x5e0>
 800aa30:	f8df b390 	ldr.w	fp, [pc, #912]	; 800adc4 <cqs_func+0xb9c>
	float alpha = yw_test / yw_ref;
 800aa34:	901c      	str	r0, [sp, #112]	; 0x70
 800aa36:	f04f 0a00 	mov.w	sl, #0
	float sum_delta_e = 0;
 800aa3a:	eef0 9a68 	vmov.f32	s19, s17
	float delta_e_rms = 0;
 800aa3e:	eeb0 aa68 	vmov.f32	s20, s17

	for (int i = 0; i < 15; i++)
	{
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800aa42:	981c      	ldr	r0, [sp, #112]	; 0x70
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;

		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800aa44:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800adc8 <cqs_func+0xba0>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];

		float y_tmp = cbrt(y_ref[i] / yw_ref);
		float L_ref = 116* y_tmp - 16;
 800aa48:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 800ad98 <cqs_func+0xb70>
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800aa4c:	f7f5 fd94 	bl	8000578 <__aeabi_f2d>
 800aa50:	4bd2      	ldr	r3, [pc, #840]	; (800ad9c <cqs_func+0xb74>)
 800aa52:	4453      	add	r3, sl
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	4604      	mov	r4, r0
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	f7f5 fde0 	bl	8000620 <__aeabi_dmul>
 800aa60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa64:	f7f5 fddc 	bl	8000620 <__aeabi_dmul>
 800aa68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800aa6c:	f7f5 ff02 	bl	8000874 <__aeabi_ddiv>
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800aa70:	4bcb      	ldr	r3, [pc, #812]	; (800ada0 <cqs_func+0xb78>)
 800aa72:	4453      	add	r3, sl
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800aa74:	4606      	mov	r6, r0
 800aa76:	460f      	mov	r7, r1
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f5 fdce 	bl	8000620 <__aeabi_dmul>
 800aa84:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800aa88:	f7f5 fdca 	bl	8000620 <__aeabi_dmul>
 800aa8c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800aa90:	f7f5 fef0 	bl	8000874 <__aeabi_ddiv>
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800aa94:	4bc3      	ldr	r3, [pc, #780]	; (800ada4 <cqs_func+0xb7c>)
 800aa96:	4453      	add	r3, sl
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800aa98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f7f5 fdbc 	bl	8000620 <__aeabi_dmul>
 800aaa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aaac:	f7f5 fdb8 	bl	8000620 <__aeabi_dmul>
 800aab0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800aab4:	f7f5 fede 	bl	8000874 <__aeabi_ddiv>
 800aab8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800aabc:	49ba      	ldr	r1, [pc, #744]	; (800ada8 <cqs_func+0xb80>)
 800aabe:	4451      	add	r1, sl
 800aac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aac8:	f7f5 fed4 	bl	8000874 <__aeabi_ddiv>
 800aacc:	ec41 0b10 	vmov	d0, r0, r1
 800aad0:	f018 fc9e 	bl	8023410 <cbrt>
 800aad4:	ec51 0b10 	vmov	r0, r1, d0
 800aad8:	f7f6 f89a 	bl	8000c10 <__aeabi_d2f>
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800aadc:	49b3      	ldr	r1, [pc, #716]	; (800adac <cqs_func+0xb84>)
 800aade:	4451      	add	r1, sl
 800aae0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800aae4:	ee0a 0a90 	vmov	s21, r0
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800aae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaec:	f7f5 fec2 	bl	8000874 <__aeabi_ddiv>
 800aaf0:	ec41 0b10 	vmov	d0, r0, r1
 800aaf4:	f018 fc8c 	bl	8023410 <cbrt>
 800aaf8:	ee1a 0a90 	vmov	r0, s21
 800aafc:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800ab00:	f7f5 fd3a 	bl	8000578 <__aeabi_f2d>
 800ab04:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	ec51 0b10 	vmov	r0, r1, d0
 800ab14:	f7f5 fbd0 	bl	80002b8 <__aeabi_dsub>
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4ba5      	ldr	r3, [pc, #660]	; (800adb0 <cqs_func+0xb88>)
 800ab1c:	f7f5 fd80 	bl	8000620 <__aeabi_dmul>
 800ab20:	f7f6 f876 	bl	8000c10 <__aeabi_d2f>
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800ab24:	49a3      	ldr	r1, [pc, #652]	; (800adb4 <cqs_func+0xb8c>)
 800ab26:	4451      	add	r1, sl
 800ab28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800ab2c:	ee0b 0a90 	vmov	s23, r0
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800ab30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab34:	f7f5 fe9e 	bl	8000874 <__aeabi_ddiv>
 800ab38:	ec41 0b10 	vmov	d0, r0, r1
 800ab3c:	f018 fc68 	bl	8023410 <cbrt>
 800ab40:	4620      	mov	r0, r4
 800ab42:	ec53 2b10 	vmov	r2, r3, d0
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fbb6 	bl	80002b8 <__aeabi_dsub>
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	4b9a      	ldr	r3, [pc, #616]	; (800adb8 <cqs_func+0xb90>)
 800ab50:	f7f5 fd66 	bl	8000620 <__aeabi_dmul>
 800ab54:	f7f6 f85c 	bl	8000c10 <__aeabi_d2f>
		float L_ref = 116* y_tmp - 16;
 800ab58:	eebb 8a00 	vmov.f32	s16, #176	; 0xc1800000 -16.0
 800ab5c:	eef0 ca48 	vmov.f32	s25, s16
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ab60:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
		float L_ref = 116* y_tmp - 16;
 800ab64:	eeea ca89 	vfma.f32	s25, s21, s18
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ab68:	4639      	mov	r1, r7
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800ab6a:	ee0a 0a90 	vmov	s21, r0
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f7f5 fd56 	bl	8000620 <__aeabi_dmul>
 800ab74:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800ab78:	4604      	mov	r4, r0
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab80:	f7f5 fd4e 	bl	8000620 <__aeabi_dmul>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4620      	mov	r0, r4
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	f7f5 fb96 	bl	80002bc <__adddf3>
 800ab90:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 800ab94:	4604      	mov	r4, r0
 800ab96:	460d      	mov	r5, r1
 800ab98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ab9c:	f7f5 fd40 	bl	8000620 <__aeabi_dmul>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4620      	mov	r0, r4
 800aba6:	4629      	mov	r1, r5
 800aba8:	f7f5 fb88 	bl	80002bc <__adddf3>

		y_tmp = cbrt(Y_ic_test / yw_test);
 800abac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abb0:	f7f5 fe60 	bl	8000874 <__aeabi_ddiv>
 800abb4:	ec41 0b10 	vmov	d0, r0, r1
 800abb8:	f018 fc2a 	bl	8023410 <cbrt>
 800abbc:	ec51 0b10 	vmov	r0, r1, d0
 800abc0:	f7f6 f826 	bl	8000c10 <__aeabi_d2f>
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800abc4:	e9d8 2300 	ldrd	r2, r3, [r8]
		y_tmp = cbrt(Y_ic_test / yw_test);
 800abc8:	ee0b 0a10 	vmov	s22, r0
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800abcc:	4639      	mov	r1, r7
 800abce:	4630      	mov	r0, r6
 800abd0:	f7f5 fd26 	bl	8000620 <__aeabi_dmul>
 800abd4:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 800abd8:	4604      	mov	r4, r0
 800abda:	460d      	mov	r5, r1
 800abdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abe0:	f7f5 fd1e 	bl	8000620 <__aeabi_dmul>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	4620      	mov	r0, r4
 800abea:	4629      	mov	r1, r5
 800abec:	f7f5 fb66 	bl	80002bc <__adddf3>
 800abf0:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800abf4:	4604      	mov	r4, r0
 800abf6:	460d      	mov	r5, r1
 800abf8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800abfc:	f7f5 fd10 	bl	8000620 <__aeabi_dmul>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4620      	mov	r0, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 fb58 	bl	80002bc <__adddf3>
		float L_test = 116 * y_tmp - 16;
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800ac0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac10:	f7f5 fe30 	bl	8000874 <__aeabi_ddiv>
 800ac14:	ec41 0b10 	vmov	d0, r0, r1
 800ac18:	f018 fbfa 	bl	8023410 <cbrt>
 800ac1c:	ee1b 0a10 	vmov	r0, s22
 800ac20:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800ac24:	f7f5 fca8 	bl	8000578 <__aeabi_f2d>
 800ac28:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	460d      	mov	r5, r1
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	ec51 0b10 	vmov	r0, r1, d0
 800ac38:	f7f5 fb3e 	bl	80002b8 <__aeabi_dsub>
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	4b5c      	ldr	r3, [pc, #368]	; (800adb0 <cqs_func+0xb88>)
 800ac40:	f7f5 fcee 	bl	8000620 <__aeabi_dmul>
 800ac44:	f7f5 ffe4 	bl	8000c10 <__aeabi_d2f>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800ac48:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800ac4c:	ee0c 0a10 	vmov	s24, r0
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800ac50:	4639      	mov	r1, r7
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7f5 fce4 	bl	8000620 <__aeabi_dmul>
 800ac58:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	460f      	mov	r7, r1
 800ac60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac64:	f7f5 fcdc 	bl	8000620 <__aeabi_dmul>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f7f5 fb24 	bl	80002bc <__adddf3>
 800ac74:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
 800ac78:	4606      	mov	r6, r0
 800ac7a:	460f      	mov	r7, r1
 800ac7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ac80:	f7f5 fcce 	bl	8000620 <__aeabi_dmul>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f5 fb16 	bl	80002bc <__adddf3>
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800ac90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac94:	f7f5 fdee 	bl	8000874 <__aeabi_ddiv>
 800ac98:	ec41 0b10 	vmov	d0, r0, r1
 800ac9c:	f018 fbb8 	bl	8023410 <cbrt>
 800aca0:	4620      	mov	r0, r4
 800aca2:	ec53 2b10 	vmov	r2, r3, d0
 800aca6:	4629      	mov	r1, r5
 800aca8:	f7f5 fb06 	bl	80002b8 <__aeabi_dsub>
 800acac:	2200      	movs	r2, #0
 800acae:	4b42      	ldr	r3, [pc, #264]	; (800adb8 <cqs_func+0xb90>)
 800acb0:	f7f5 fcb6 	bl	8000620 <__aeabi_dmul>
 800acb4:	f7f5 ffac 	bl	8000c10 <__aeabi_d2f>
		float L_test = 116 * y_tmp - 16;
 800acb8:	eeab 8a09 	vfma.f32	s16, s22, s18
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800acbc:	ee0b 0a10 	vmov	s22, r0

		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800acc0:	ee6b 7a0b 	vmul.f32	s15, s22, s22
		float L_test = 116 * y_tmp - 16;
 800acc4:	eeb0 9a48 	vmov.f32	s18, s16
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800acc8:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800accc:	ee17 0a90 	vmov	r0, s15
 800acd0:	f7f5 fc52 	bl	8000578 <__aeabi_f2d>
 800acd4:	ec41 0b10 	vmov	d0, r0, r1
 800acd8:	f018 ff4e 	bl	8023b78 <sqrt>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800acdc:	ee6a 7aaa 	vmul.f32	s15, s21, s21
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800ace0:	ec55 4b10 	vmov	r4, r5, d0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800ace4:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800ace8:	ee17 0a90 	vmov	r0, s15
 800acec:	f7f5 fc44 	bl	8000578 <__aeabi_f2d>
 800acf0:	ec41 0b10 	vmov	d0, r0, r1
 800acf4:	f018 ff40 	bl	8023b78 <sqrt>
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800acf8:	4629      	mov	r1, r5
 800acfa:	4620      	mov	r0, r4
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800acfc:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800ad00:	f7f5 ff86 	bl	8000c10 <__aeabi_d2f>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800ad04:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800ad08:	ee08 0a10 	vmov	s16, r0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800ad0c:	ec51 0b10 	vmov	r0, r1, d0
 800ad10:	f7f5 ff7e 	bl	8000c10 <__aeabi_d2f>
		float delta_c = delta_c_test - delta_c_ref;
 800ad14:	ee07 0a90 	vmov	s15, r0

		bar_CQS = 0.9;
 800ad18:	a11d      	add	r1, pc, #116	; (adr r1, 800ad90 <cqs_func+0xb68>)
 800ad1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad1e:	4b27      	ldr	r3, [pc, #156]	; (800adbc <cqs_func+0xb94>)
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ad20:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800adc0 <cqs_func+0xb98>
		bar_CQS = 0.9;
 800ad24:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ad28:	210d      	movs	r1, #13
 800ad2a:	2055      	movs	r0, #85	; 0x55
		float delta_c = delta_c_test - delta_c_ref;
 800ad2c:	ee38 8a67 	vsub.f32	s16, s16, s15
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ad30:	f008 fc70 	bl	8013614 <GUI_Bar_Measure>
	
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800ad34:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800ad38:	ee17 0a90 	vmov	r0, s15
 800ad3c:	f7f5 fc1c 	bl	8000578 <__aeabi_f2d>
 800ad40:	ee7c 7a6b 	vsub.f32	s15, s24, s23
 800ad44:	4606      	mov	r6, r0
 800ad46:	ee17 0a90 	vmov	r0, s15
 800ad4a:	460f      	mov	r7, r1
 800ad4c:	f7f5 fc14 	bl	8000578 <__aeabi_f2d>
 800ad50:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 800ad54:	4680      	mov	r8, r0
 800ad56:	ee17 0a90 	vmov	r0, s15
 800ad5a:	4689      	mov	r9, r1
 800ad5c:	f7f5 fc0c 	bl	8000578 <__aeabi_f2d>
 800ad60:	4632      	mov	r2, r6
 800ad62:	4604      	mov	r4, r0
 800ad64:	460d      	mov	r5, r1
 800ad66:	463b      	mov	r3, r7
 800ad68:	4630      	mov	r0, r6
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	f7f5 fc58 	bl	8000620 <__aeabi_dmul>
 800ad70:	4642      	mov	r2, r8
 800ad72:	4606      	mov	r6, r0
 800ad74:	460f      	mov	r7, r1
 800ad76:	464b      	mov	r3, r9
 800ad78:	4640      	mov	r0, r8
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	f7f5 fc50 	bl	8000620 <__aeabi_dmul>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4630      	mov	r0, r6
 800ad86:	4639      	mov	r1, r7
 800ad88:	f7f5 fa98 	bl	80002bc <__adddf3>
 800ad8c:	e01e      	b.n	800adcc <cqs_func+0xba4>
 800ad8e:	bf00      	nop
 800ad90:	cccccccd 	.word	0xcccccccd
 800ad94:	3feccccc 	.word	0x3feccccc
 800ad98:	42e80000 	.word	0x42e80000
 800ad9c:	20090778 	.word	0x20090778
 800ada0:	20090900 	.word	0x20090900
 800ada4:	20090678 	.word	0x20090678
 800ada8:	20090888 	.word	0x20090888
 800adac:	200906f8 	.word	0x200906f8
 800adb0:	407f4000 	.word	0x407f4000
 800adb4:	200907f0 	.word	0x200907f0
 800adb8:	40690000 	.word	0x40690000
 800adbc:	200906f0 	.word	0x200906f0
 800adc0:	3f666666 	.word	0x3f666666
 800adc4:	20003623 	.word	0x20003623
 800adc8:	20000140 	.word	0x20000140
 800adcc:	4622      	mov	r2, r4
 800adce:	4606      	mov	r6, r0
 800add0:	460f      	mov	r7, r1
 800add2:	462b      	mov	r3, r5
 800add4:	4620      	mov	r0, r4
 800add6:	4629      	mov	r1, r5
 800add8:	f7f5 fc22 	bl	8000620 <__aeabi_dmul>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4630      	mov	r0, r6
 800ade2:	4639      	mov	r1, r7
 800ade4:	f7f5 fa6a 	bl	80002bc <__adddf3>
 800ade8:	ec41 0b10 	vmov	d0, r0, r1
 800adec:	f018 fec4 	bl	8023b78 <sqrt>
 800adf0:	ec51 0b10 	vmov	r0, r1, d0
 800adf4:	f7f5 ff0c 	bl	8000c10 <__aeabi_d2f>
		float E_sat = delta_E_CQS;
		if (delta_c > 0)
 800adf8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800adfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800ae00:	ee09 0a10 	vmov	s18, r0
		if (delta_c > 0)
 800ae04:	f340 82a4 	ble.w	800b350 <cqs_func+0x1128>
		{
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800ae08:	ee68 7a48 	vnmul.f32	s15, s16, s16
 800ae0c:	eee9 7a09 	vfma.f32	s15, s18, s18
 800ae10:	ee17 0a90 	vmov	r0, s15
 800ae14:	f7f5 fbb0 	bl	8000578 <__aeabi_f2d>
 800ae18:	ec41 0b10 	vmov	d0, r0, r1
 800ae1c:	f018 feac 	bl	8023b78 <sqrt>
 800ae20:	ec51 0b10 	vmov	r0, r1, d0
 800ae24:	f7f5 fef4 	bl	8000c10 <__aeabi_d2f>
			sum_delta_c += delta_c;
 800ae28:	ee78 8a88 	vadd.f32	s17, s17, s16
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800ae2c:	ee07 0a90 	vmov	s15, r0
		}			

		delta_e_rms += (E_sat*E_sat);
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800ae30:	ee17 0a90 	vmov	r0, s15
		delta_e_rms += (E_sat*E_sat);
 800ae34:	eea7 aaa7 	vfma.f32	s20, s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800ae38:	f7f5 fb9e 	bl	8000578 <__aeabi_f2d>
 800ae3c:	a3bc      	add	r3, pc, #752	; (adr r3, 800b130 <cqs_func+0xf08>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f7f5 fbed 	bl	8000620 <__aeabi_dmul>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	49c8      	ldr	r1, [pc, #800]	; (800b170 <cqs_func+0xf48>)
 800ae4e:	4cc9      	ldr	r4, [pc, #804]	; (800b174 <cqs_func+0xf4c>)
 800ae50:	f7f5 fa32 	bl	80002b8 <__aeabi_dsub>
 800ae54:	2200      	movs	r2, #0
 800ae56:	4bc8      	ldr	r3, [pc, #800]	; (800b178 <cqs_func+0xf50>)
 800ae58:	f7f5 fd0c 	bl	8000874 <__aeabi_ddiv>
 800ae5c:	ec41 0b10 	vmov	d0, r0, r1
 800ae60:	f018 fc16 	bl	8023690 <exp>
 800ae64:	2200      	movs	r2, #0
 800ae66:	4bc5      	ldr	r3, [pc, #788]	; (800b17c <cqs_func+0xf54>)
 800ae68:	ec51 0b10 	vmov	r0, r1, d0
 800ae6c:	f7f5 fa26 	bl	80002bc <__adddf3>
 800ae70:	ec41 0b10 	vmov	d0, r0, r1
 800ae74:	f018 fc88 	bl	8023788 <log>
 800ae78:	2200      	movs	r2, #0
 800ae7a:	ec51 0b10 	vmov	r0, r1, d0
 800ae7e:	4bbe      	ldr	r3, [pc, #760]	; (800b178 <cqs_func+0xf50>)
 800ae80:	f7f5 fbce 	bl	8000620 <__aeabi_dmul>
 800ae84:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae88:	f7f5 fbca 	bl	8000620 <__aeabi_dmul>
 800ae8c:	f7f5 fec0 	bl	8000c10 <__aeabi_d2f>
 800ae90:	ee07 0a90 	vmov	s15, r0
 800ae94:	4bba      	ldr	r3, [pc, #744]	; (800b180 <cqs_func+0xf58>)
		Q_i[i] = (uint8_t)Q_i_temp;		
 800ae96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800ae9a:	6018      	str	r0, [r3, #0]
 800ae9c:	f10a 0a08 	add.w	sl, sl, #8
		Q_i[i] = (uint8_t)Q_i_temp;		
 800aea0:	ee17 3a90 	vmov	r3, s15
	for (int i = 0; i < 15; i++)
 800aea4:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
 800aea8:	eee9 9a09 	vfma.f32	s19, s18, s18
		Q_i[i] = (uint8_t)Q_i_temp;		
 800aeac:	f80b 3f01 	strb.w	r3, [fp, #1]!
	for (int i = 0; i < 15; i++)
 800aeb0:	f47f adc7 	bne.w	800aa42 <cqs_func+0x81a>
	}
	delta_e_rms /= 15;
 800aeb4:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
	delta_e_rms = sqrt(delta_e_rms);
 800aeb8:	eeca 7a08 	vdiv.f32	s15, s20, s16
 800aebc:	ee17 0a90 	vmov	r0, s15
 800aec0:	f7f5 fb5a 	bl	8000578 <__aeabi_f2d>
 800aec4:	ec41 0b10 	vmov	d0, r0, r1
 800aec8:	f018 fe56 	bl	8023b78 <sqrt>
 800aecc:	ec51 0b10 	vmov	r0, r1, d0
 800aed0:	f7f5 fe9e 	bl	8000c10 <__aeabi_d2f>
	sum_delta_e /= 15;
	sum_delta_e = sqrt(sum_delta_e);
 800aed4:	eec9 7a88 	vdiv.f32	s15, s19, s16
	delta_e_rms = sqrt(delta_e_rms);
 800aed8:	ee09 0a10 	vmov	s18, r0
	sum_delta_e = sqrt(sum_delta_e);
 800aedc:	ee17 0a90 	vmov	r0, s15
 800aee0:	f7f5 fb4a 	bl	8000578 <__aeabi_f2d>
 800aee4:	ec41 0b10 	vmov	d0, r0, r1
 800aee8:	f018 fe46 	bl	8023b78 <sqrt>
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800aeec:	ee19 0a10 	vmov	r0, s18
	sum_delta_e = sqrt(sum_delta_e);
 800aef0:	ec59 8b10 	vmov	r8, r9, d0
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800aef4:	f7f5 fb40 	bl	8000578 <__aeabi_f2d>
 800aef8:	a38d      	add	r3, pc, #564	; (adr r3, 800b130 <cqs_func+0xf08>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f7f5 fb8f 	bl	8000620 <__aeabi_dmul>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	2000      	movs	r0, #0
 800af08:	4999      	ldr	r1, [pc, #612]	; (800b170 <cqs_func+0xf48>)
 800af0a:	f7f5 f9d5 	bl	80002b8 <__aeabi_dsub>
 800af0e:	f7f5 fe7f 	bl	8000c10 <__aeabi_d2f>
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800af12:	ee06 0a90 	vmov	s13, r0
 800af16:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800af1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1e:	ee17 0a10 	vmov	r0, s14
 800af22:	f7f5 fb29 	bl	8000578 <__aeabi_f2d>
 800af26:	ec41 0b10 	vmov	d0, r0, r1
 800af2a:	f018 fbb1 	bl	8023690 <exp>
 800af2e:	2200      	movs	r2, #0
 800af30:	4b92      	ldr	r3, [pc, #584]	; (800b17c <cqs_func+0xf54>)
 800af32:	ec51 0b10 	vmov	r0, r1, d0
 800af36:	f7f5 f9c1 	bl	80002bc <__adddf3>
 800af3a:	ec41 0b10 	vmov	d0, r0, r1
 800af3e:	f018 fc23 	bl	8023788 <log>

	 Qa_temp = Mcct * Qa0_100;
 800af42:	e9d4 6700 	ldrd	r6, r7, [r4]
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800af46:	ec51 0b10 	vmov	r0, r1, d0
 800af4a:	2200      	movs	r2, #0
 800af4c:	4b8a      	ldr	r3, [pc, #552]	; (800b178 <cqs_func+0xf50>)
 800af4e:	f7f5 fb67 	bl	8000620 <__aeabi_dmul>
 800af52:	f7f5 fe5d 	bl	8000c10 <__aeabi_d2f>
	 Qa_temp = Mcct * Qa0_100;
 800af56:	f7f5 fb0f 	bl	8000578 <__aeabi_f2d>
 800af5a:	4632      	mov	r2, r6
 800af5c:	463b      	mov	r3, r7
 800af5e:	f7f5 fb5f 	bl	8000620 <__aeabi_dmul>
 800af62:	f7f5 fe55 	bl	8000c10 <__aeabi_d2f>
 800af66:	ee07 0a90 	vmov	s15, r0
 800af6a:	4b86      	ldr	r3, [pc, #536]	; (800b184 <cqs_func+0xf5c>)
	 Qa = (uint8_t)Qa_temp;
 800af6c:	4a86      	ldr	r2, [pc, #536]	; (800b188 <cqs_func+0xf60>)
	 Qa_temp = Mcct * Qa0_100;
 800af6e:	6018      	str	r0, [r3, #0]
	 Qa = (uint8_t)Qa_temp;
 800af70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sum_delta_e = sqrt(sum_delta_e);
 800af74:	4649      	mov	r1, r9
	 Qa = (uint8_t)Qa_temp;
 800af76:	ee17 3a90 	vmov	r3, s15
	sum_delta_e = sqrt(sum_delta_e);
 800af7a:	4640      	mov	r0, r8
	 Qa = (uint8_t)Qa_temp;
 800af7c:	7013      	strb	r3, [r2, #0]
	sum_delta_e = sqrt(sum_delta_e);
 800af7e:	f7f5 fe47 	bl	8000c10 <__aeabi_d2f>
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800af82:	f7f5 faf9 	bl	8000578 <__aeabi_f2d>
 800af86:	a36c      	add	r3, pc, #432	; (adr r3, 800b138 <cqs_func+0xf10>)
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f7f5 fb48 	bl	8000620 <__aeabi_dmul>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	2000      	movs	r0, #0
 800af96:	4976      	ldr	r1, [pc, #472]	; (800b170 <cqs_func+0xf48>)
 800af98:	f7f5 f98e 	bl	80002b8 <__aeabi_dsub>
 800af9c:	2200      	movs	r2, #0
 800af9e:	4b76      	ldr	r3, [pc, #472]	; (800b178 <cqs_func+0xf50>)
 800afa0:	f7f5 fc68 	bl	8000874 <__aeabi_ddiv>
 800afa4:	ec41 0b10 	vmov	d0, r0, r1
 800afa8:	f018 fb72 	bl	8023690 <exp>
 800afac:	2200      	movs	r2, #0
 800afae:	4b73      	ldr	r3, [pc, #460]	; (800b17c <cqs_func+0xf54>)
 800afb0:	ec51 0b10 	vmov	r0, r1, d0
 800afb4:	f7f5 f980 	bl	80002b8 <__aeabi_dsub>
 800afb8:	ec41 0b10 	vmov	d0, r0, r1
 800afbc:	f018 fbe4 	bl	8023788 <log>
 800afc0:	2200      	movs	r2, #0
 800afc2:	4b6d      	ldr	r3, [pc, #436]	; (800b178 <cqs_func+0xf50>)
 800afc4:	4630      	mov	r0, r6
 800afc6:	4639      	mov	r1, r7
 800afc8:	ed8d 0b00 	vstr	d0, [sp]
 800afcc:	f7f5 fb28 	bl	8000620 <__aeabi_dmul>
 800afd0:	ed9d 0b00 	vldr	d0, [sp]
 800afd4:	ec53 2b10 	vmov	r2, r3, d0
 800afd8:	f7f5 fb22 	bl	8000620 <__aeabi_dmul>
 800afdc:	f7f5 fe18 	bl	8000c10 <__aeabi_d2f>
 800afe0:	ee07 0a90 	vmov	s15, r0
 800afe4:	4b69      	ldr	r3, [pc, #420]	; (800b18c <cqs_func+0xf64>)
		Qf = (uint8_t)Qf_temp;
 800afe6:	4a6a      	ldr	r2, [pc, #424]	; (800b190 <cqs_func+0xf68>)
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800afe8:	6018      	str	r0, [r3, #0]
		Qf = (uint8_t)Qf_temp;
 800afea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800afee:	e9d4 0100 	ldrd	r0, r1, [r4]
		Qf = (uint8_t)Qf_temp;
 800aff2:	ee17 3a90 	vmov	r3, s15
 800aff6:	7013      	strb	r3, [r2, #0]
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800aff8:	2200      	movs	r2, #0
 800affa:	4b5f      	ldr	r3, [pc, #380]	; (800b178 <cqs_func+0xf50>)
 800affc:	f7f5 fb10 	bl	8000620 <__aeabi_dmul>
 800b000:	eec8 7a88 	vdiv.f32	s15, s17, s16
 800b004:	4604      	mov	r4, r0
 800b006:	460d      	mov	r5, r1
 800b008:	ee79 7a67 	vsub.f32	s15, s18, s15
 800b00c:	ee17 0a90 	vmov	r0, s15
 800b010:	f7f5 fab2 	bl	8000578 <__aeabi_f2d>
 800b014:	a34a      	add	r3, pc, #296	; (adr r3, 800b140 <cqs_func+0xf18>)
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f7f5 fb01 	bl	8000620 <__aeabi_dmul>
 800b01e:	4602      	mov	r2, r0
 800b020:	460b      	mov	r3, r1
 800b022:	2000      	movs	r0, #0
 800b024:	4952      	ldr	r1, [pc, #328]	; (800b170 <cqs_func+0xf48>)
 800b026:	f7f5 f947 	bl	80002b8 <__aeabi_dsub>
 800b02a:	2200      	movs	r2, #0
 800b02c:	4b52      	ldr	r3, [pc, #328]	; (800b178 <cqs_func+0xf50>)
 800b02e:	f7f5 fc21 	bl	8000874 <__aeabi_ddiv>
 800b032:	ec41 0b10 	vmov	d0, r0, r1
 800b036:	f018 fb2b 	bl	8023690 <exp>
 800b03a:	2200      	movs	r2, #0
 800b03c:	4b4f      	ldr	r3, [pc, #316]	; (800b17c <cqs_func+0xf54>)
 800b03e:	ec51 0b10 	vmov	r0, r1, d0
 800b042:	f7f5 f939 	bl	80002b8 <__aeabi_dsub>
 800b046:	ec41 0b10 	vmov	d0, r0, r1
 800b04a:	f018 fb9d 	bl	8023788 <log>
 800b04e:	4620      	mov	r0, r4
 800b050:	ec53 2b10 	vmov	r2, r3, d0
 800b054:	4629      	mov	r1, r5
 800b056:	f7f5 fae3 	bl	8000620 <__aeabi_dmul>
 800b05a:	f7f5 fdd9 	bl	8000c10 <__aeabi_d2f>
 800b05e:	ee07 0a90 	vmov	s15, r0
 800b062:	4b4c      	ldr	r3, [pc, #304]	; (800b194 <cqs_func+0xf6c>)
		Qp = (uint8_t)Qp_temp;
 800b064:	4a4c      	ldr	r2, [pc, #304]	; (800b198 <cqs_func+0xf70>)
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800b066:	6018      	str	r0, [r3, #0]
		Qp = (uint8_t)Qp_temp;
 800b068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	
		bar_CQS = 1.0;
 800b06c:	4943      	ldr	r1, [pc, #268]	; (800b17c <cqs_func+0xf54>)
		Qp = (uint8_t)Qp_temp;
 800b06e:	ee17 3a90 	vmov	r3, s15
 800b072:	7013      	strb	r3, [r2, #0]
		bar_CQS = 1.0;
 800b074:	4b49      	ldr	r3, [pc, #292]	; (800b19c <cqs_func+0xf74>)
 800b076:	2000      	movs	r0, #0
 800b078:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800b07c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b080:	210d      	movs	r1, #13
 800b082:	2055      	movs	r0, #85	; 0x55
 800b084:	b02f      	add	sp, #188	; 0xbc
 800b086:	ecbd 8b0a 	vpop	{d8-d12}
 800b08a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Bar_Measure(85, 13, bar_CQS);
 800b08e:	f008 bac1 	b.w	8013614 <GUI_Bar_Measure>
	if (CCT_measure < 5000)
 800b092:	9a04      	ldr	r2, [sp, #16]
 800b094:	f241 3387 	movw	r3, #4999	; 0x1387
 800b098:	429a      	cmp	r2, r3
 800b09a:	f67f a928 	bls.w	800a2ee <cqs_func+0xc6>
		if (CCT_measure < 7000)
 800b09e:	9a04      	ldr	r2, [sp, #16]
 800b0a0:	f641 3357 	movw	r3, #6999	; 0x1b57
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d97b      	bls.n	800b1a0 <cqs_func+0xf78>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b0a8:	9804      	ldr	r0, [sp, #16]
 800b0aa:	f7f5 fa43 	bl	8000534 <__aeabi_ui2d>
 800b0ae:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800b148 <cqs_func+0xf20>
 800b0b2:	ec41 0b10 	vmov	d0, r0, r1
 800b0b6:	f018 fbe7 	bl	8023888 <pow>
 800b0ba:	eddd 7a04 	vldr	s15, [sp, #16]
 800b0be:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b0c2:	ed8d 0b00 	vstr	d0, [sp]
 800b0c6:	ee68 7a08 	vmul.f32	s15, s16, s16
 800b0ca:	ee17 0a90 	vmov	r0, s15
 800b0ce:	f7f5 fa53 	bl	8000578 <__aeabi_f2d>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	a11e      	add	r1, pc, #120	; (adr r1, 800b150 <cqs_func+0xf28>)
 800b0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0dc:	f7f5 fbca 	bl	8000874 <__aeabi_ddiv>
 800b0e0:	ed9d 0b00 	vldr	d0, [sp]
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	ec53 2b10 	vmov	r2, r3, d0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	a11a      	add	r1, pc, #104	; (adr r1, 800b158 <cqs_func+0xf30>)
 800b0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0f2:	f7f5 fbbf 	bl	8000874 <__aeabi_ddiv>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	f7f5 f8dd 	bl	80002bc <__adddf3>
 800b102:	4604      	mov	r4, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b104:	ee18 0a10 	vmov	r0, s16
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b108:	460d      	mov	r5, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b10a:	f7f5 fa35 	bl	8000578 <__aeabi_f2d>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	a113      	add	r1, pc, #76	; (adr r1, 800b160 <cqs_func+0xf38>)
 800b114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b118:	f7f5 fbac 	bl	8000874 <__aeabi_ddiv>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	4620      	mov	r0, r4
 800b122:	4629      	mov	r1, r5
 800b124:	f7f5 f8ca 	bl	80002bc <__adddf3>
 800b128:	a30f      	add	r3, pc, #60	; (adr r3, 800b168 <cqs_func+0xf40>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	e073      	b.n	800b218 <cqs_func+0xff0>
 800b130:	cccccccd 	.word	0xcccccccd
 800b134:	4008cccc 	.word	0x4008cccc
 800b138:	d70a3d71 	.word	0xd70a3d71
 800b13c:	400770a3 	.word	0x400770a3
 800b140:	a3d70a3d 	.word	0xa3d70a3d
 800b144:	400e3d70 	.word	0x400e3d70
 800b148:	00000000 	.word	0x00000000
 800b14c:	40080000 	.word	0x40080000
 800b150:	00000000 	.word	0x00000000
 800b154:	413d04e8 	.word	0x413d04e8
 800b158:	00000001 	.word	0x00000001
 800b15c:	c1dde5cf 	.word	0xc1dde5cf
 800b160:	28f5c290 	.word	0x28f5c290
 800b164:	406eef5c 	.word	0x406eef5c
 800b168:	a3ec02f3 	.word	0xa3ec02f3
 800b16c:	3fce5753 	.word	0x3fce5753
 800b170:	40590000 	.word	0x40590000
 800b174:	20000188 	.word	0x20000188
 800b178:	40240000 	.word	0x40240000
 800b17c:	3ff00000 	.word	0x3ff00000
 800b180:	20090880 	.word	0x20090880
 800b184:	20090978 	.word	0x20090978
 800b188:	20003633 	.word	0x20003633
 800b18c:	2009097c 	.word	0x2009097c
 800b190:	20003634 	.word	0x20003634
 800b194:	20090770 	.word	0x20090770
 800b198:	20003635 	.word	0x20003635
 800b19c:	200906f0 	.word	0x200906f0
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b1a0:	eddd 7a04 	vldr	s15, [sp, #16]
 800b1a4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b1a8:	ee68 8a08 	vmul.f32	s17, s16, s16
 800b1ac:	ee68 7a28 	vmul.f32	s15, s16, s17
 800b1b0:	ee17 0a90 	vmov	r0, s15
 800b1b4:	f7f5 f9e0 	bl	8000578 <__aeabi_f2d>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	a181      	add	r1, pc, #516	; (adr r1, 800b3c4 <cqs_func+0x119c>)
 800b1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1c2:	f7f5 fb57 	bl	8000874 <__aeabi_ddiv>
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	ee18 0a90 	vmov	r0, s17
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	f7f5 f9d3 	bl	8000578 <__aeabi_f2d>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	a17d      	add	r1, pc, #500	; (adr r1, 800b3cc <cqs_func+0x11a4>)
 800b1d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1dc:	f7f5 fb4a 	bl	8000874 <__aeabi_ddiv>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f7f5 f868 	bl	80002bc <__adddf3>
 800b1ec:	4604      	mov	r4, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800b1ee:	ee18 0a10 	vmov	r0, s16
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b1f2:	460d      	mov	r5, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800b1f4:	f7f5 f9c0 	bl	8000578 <__aeabi_f2d>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	a175      	add	r1, pc, #468	; (adr r1, 800b3d4 <cqs_func+0x11ac>)
 800b1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b202:	f7f5 fb37 	bl	8000874 <__aeabi_ddiv>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	4620      	mov	r0, r4
 800b20c:	4629      	mov	r1, r5
 800b20e:	f7f5 f855 	bl	80002bc <__adddf3>
 800b212:	a372      	add	r3, pc, #456	; (adr r3, 800b3dc <cqs_func+0x11b4>)
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800b218:	f7f5 f850 	bl	80002bc <__adddf3>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800b21c:	4b64      	ldr	r3, [pc, #400]	; (800b3b0 <cqs_func+0x1188>)
 800b21e:	e9c3 0100 	strd	r0, r1, [r3]
		yD = -3 * xD*xD + 2.87*xD - 0.275;
 800b222:	4b63      	ldr	r3, [pc, #396]	; (800b3b0 <cqs_func+0x1188>)
 800b224:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b228:	2200      	movs	r2, #0
 800b22a:	4b62      	ldr	r3, [pc, #392]	; (800b3b4 <cqs_func+0x118c>)
 800b22c:	4620      	mov	r0, r4
 800b22e:	4629      	mov	r1, r5
 800b230:	f7f5 f9f6 	bl	8000620 <__aeabi_dmul>
 800b234:	4622      	mov	r2, r4
 800b236:	462b      	mov	r3, r5
 800b238:	f7f5 f9f2 	bl	8000620 <__aeabi_dmul>
 800b23c:	a346      	add	r3, pc, #280	; (adr r3, 800b358 <cqs_func+0x1130>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	4606      	mov	r6, r0
 800b244:	460f      	mov	r7, r1
 800b246:	4620      	mov	r0, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	f7f5 f9e9 	bl	8000620 <__aeabi_dmul>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	4630      	mov	r0, r6
 800b254:	4639      	mov	r1, r7
 800b256:	f7f5 f831 	bl	80002bc <__adddf3>
 800b25a:	a341      	add	r3, pc, #260	; (adr r3, 800b360 <cqs_func+0x1138>)
 800b25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b260:	f7f5 f82a 	bl	80002b8 <__aeabi_dsub>
 800b264:	4b54      	ldr	r3, [pc, #336]	; (800b3b8 <cqs_func+0x1190>)
 800b266:	4606      	mov	r6, r0
 800b268:	460f      	mov	r7, r1
 800b26a:	e9c3 6700 	strd	r6, r7, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b26e:	4620      	mov	r0, r4
 800b270:	a33d      	add	r3, pc, #244	; (adr r3, 800b368 <cqs_func+0x1140>)
 800b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b276:	4629      	mov	r1, r5
 800b278:	f7f5 f9d2 	bl	8000620 <__aeabi_dmul>
 800b27c:	a33c      	add	r3, pc, #240	; (adr r3, 800b370 <cqs_func+0x1148>)
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	f7f5 f81b 	bl	80002bc <__adddf3>
 800b286:	a33c      	add	r3, pc, #240	; (adr r3, 800b378 <cqs_func+0x1150>)
 800b288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28c:	4680      	mov	r8, r0
 800b28e:	4689      	mov	r9, r1
 800b290:	4630      	mov	r0, r6
 800b292:	4639      	mov	r1, r7
 800b294:	f7f5 f9c4 	bl	8000620 <__aeabi_dmul>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4640      	mov	r0, r8
 800b29e:	4649      	mov	r1, r9
 800b2a0:	f7f5 f80a 	bl	80002b8 <__aeabi_dsub>
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800b2a4:	a336      	add	r3, pc, #216	; (adr r3, 800b380 <cqs_func+0x1158>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	4689      	mov	r9, r1
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	f7f5 f9b5 	bl	8000620 <__aeabi_dmul>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	a133      	add	r1, pc, #204	; (adr r1, 800b388 <cqs_func+0x1160>)
 800b2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2c0:	f7f4 fffa 	bl	80002b8 <__aeabi_dsub>
 800b2c4:	a332      	add	r3, pc, #200	; (adr r3, 800b390 <cqs_func+0x1168>)
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	4682      	mov	sl, r0
 800b2cc:	468b      	mov	fp, r1
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	f7f5 f9a5 	bl	8000620 <__aeabi_dmul>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4650      	mov	r0, sl
 800b2dc:	4659      	mov	r1, fp
 800b2de:	f7f4 ffed 	bl	80002bc <__adddf3>
 800b2e2:	f7f5 fc95 	bl	8000c10 <__aeabi_d2f>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b2e6:	f7f5 f947 	bl	8000578 <__aeabi_f2d>
 800b2ea:	4642      	mov	r2, r8
 800b2ec:	464b      	mov	r3, r9
 800b2ee:	f7f5 fac1 	bl	8000874 <__aeabi_ddiv>
 800b2f2:	f7f5 fc8d 	bl	8000c10 <__aeabi_d2f>
 800b2f6:	4b31      	ldr	r3, [pc, #196]	; (800b3bc <cqs_func+0x1194>)
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800b2f8:	4629      	mov	r1, r5
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b2fa:	6018      	str	r0, [r3, #0]
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800b2fc:	a326      	add	r3, pc, #152	; (adr r3, 800b398 <cqs_func+0x1170>)
 800b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b302:	4620      	mov	r0, r4
 800b304:	f7f5 f98c 	bl	8000620 <__aeabi_dmul>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	a124      	add	r1, pc, #144	; (adr r1, 800b3a0 <cqs_func+0x1178>)
 800b30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b312:	f7f4 ffd1 	bl	80002b8 <__aeabi_dsub>
 800b316:	a324      	add	r3, pc, #144	; (adr r3, 800b3a8 <cqs_func+0x1180>)
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	4604      	mov	r4, r0
 800b31e:	460d      	mov	r5, r1
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f5 f97c 	bl	8000620 <__aeabi_dmul>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4620      	mov	r0, r4
 800b32e:	4629      	mov	r1, r5
 800b330:	f7f4 ffc4 	bl	80002bc <__adddf3>
 800b334:	f7f5 fc6c 	bl	8000c10 <__aeabi_d2f>
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800b338:	f7f5 f91e 	bl	8000578 <__aeabi_f2d>
 800b33c:	464b      	mov	r3, r9
 800b33e:	4642      	mov	r2, r8
 800b340:	f7f5 fa98 	bl	8000874 <__aeabi_ddiv>
 800b344:	f7f5 fc64 	bl	8000c10 <__aeabi_d2f>
 800b348:	4b1d      	ldr	r3, [pc, #116]	; (800b3c0 <cqs_func+0x1198>)
 800b34a:	6018      	str	r0, [r3, #0]
 800b34c:	f7fe bfd2 	b.w	800a2f4 <cqs_func+0xcc>
		float E_sat = delta_E_CQS;
 800b350:	ee07 0a90 	vmov	s15, r0
 800b354:	e56c      	b.n	800ae30 <cqs_func+0xc08>
 800b356:	bf00      	nop
 800b358:	8f5c28f6 	.word	0x8f5c28f6
 800b35c:	4006f5c2 	.word	0x4006f5c2
 800b360:	9999999a 	.word	0x9999999a
 800b364:	3fd19999 	.word	0x3fd19999
 800b368:	af4f0d84 	.word	0xaf4f0d84
 800b36c:	3fd06594 	.word	0x3fd06594
 800b370:	9f559b3d 	.word	0x9f559b3d
 800b374:	3f98adab 	.word	0x3f98adab
 800b378:	487fcb92 	.word	0x487fcb92
 800b37c:	3fe77dbf 	.word	0x3fe77dbf
 800b380:	17c1bda5 	.word	0x17c1bda5
 800b384:	3ffc5326 	.word	0x3ffc5326
 800b388:	76c8b439 	.word	0x76c8b439
 800b38c:	bff59fbe 	.word	0xbff59fbe
 800b390:	0aa64c30 	.word	0x0aa64c30
 800b394:	4017a546 	.word	0x4017a546
 800b398:	205bc01a 	.word	0x205bc01a
 800b39c:	403f7141 	.word	0x403f7141
 800b3a0:	eb851eb8 	.word	0xeb851eb8
 800b3a4:	3f9eb851 	.word	0x3f9eb851
 800b3a8:	ee631f8a 	.word	0xee631f8a
 800b3ac:	403e125a 	.word	0x403e125a
 800b3b0:	20090878 	.word	0x20090878
 800b3b4:	c0080000 	.word	0xc0080000
 800b3b8:	20090870 	.word	0x20090870
 800b3bc:	2000361c 	.word	0x2000361c
 800b3c0:	20003620 	.word	0x20003620
 800b3c4:	dc000000 	.word	0xdc000000
 800b3c8:	c1f12993 	.word	0xc1f12993
 800b3cc:	00000000 	.word	0x00000000
 800b3d0:	4146a47c 	.word	0x4146a47c
 800b3d4:	3d70a3d7 	.word	0x3d70a3d7
 800b3d8:	4058c70a 	.word	0x4058c70a
 800b3dc:	d594f26b 	.word	0xd594f26b
 800b3e0:	3fcf3d74 	.word	0x3fcf3d74

0800b3e4 <CQS_Axes>:
#include "CQS_graph.h"
extern uint8_t TFT_direction;


void CQS_Axes(uint8_t direction){
 800b3e4:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800b3e6:	bbb8      	cbnz	r0, 800b458 <CQS_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800b3e8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b3ec:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800b3f0:	2212      	movs	r2, #18
 800b3f2:	215f      	movs	r1, #95	; 0x5f
 800b3f4:	2010      	movs	r0, #16
 800b3f6:	9400      	str	r4, [sp, #0]
 800b3f8:	f011 faa1 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800b3fc:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800b400:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b404:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800b408:	2010      	movs	r0, #16
 800b40a:	9400      	str	r4, [sp, #0]
 800b40c:	f011 fa97 	bl	801c93e <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800b410:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800b414:	4619      	mov	r1, r3
 800b416:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b41a:	2010      	movs	r0, #16
 800b41c:	9400      	str	r4, [sp, #0]
 800b41e:	f011 fa31 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800b422:	f240 1301 	movw	r3, #257	; 0x101
 800b426:	4619      	mov	r1, r3
 800b428:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b42c:	2010      	movs	r0, #16
 800b42e:	9400      	str	r4, [sp, #0]
 800b430:	f011 fa28 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800b434:	23b5      	movs	r3, #181	; 0xb5
 800b436:	4619      	mov	r1, r3
 800b438:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b43c:	2010      	movs	r0, #16
 800b43e:	9400      	str	r4, [sp, #0]
 800b440:	f011 fa20 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800b444:	2369      	movs	r3, #105	; 0x69
 800b446:	9400      	str	r4, [sp, #0]
 800b448:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b44c:	4619      	mov	r1, r3
 800b44e:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b450:	f011 fa18 	bl	801c884 <TFT_DrawLine>
		}
}
 800b454:	b002      	add	sp, #8
 800b456:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800b458:	2801      	cmp	r0, #1
 800b45a:	d131      	bne.n	800b4c0 <CQS_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800b45c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b460:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b464:	22ff      	movs	r2, #255	; 0xff
 800b466:	2146      	movs	r1, #70	; 0x46
 800b468:	20fd      	movs	r0, #253	; 0xfd
 800b46a:	9400      	str	r4, [sp, #0]
 800b46c:	f011 fa67 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800b470:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b474:	22ff      	movs	r2, #255	; 0xff
 800b476:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800b47a:	2028      	movs	r0, #40	; 0x28
 800b47c:	9400      	str	r4, [sp, #0]
 800b47e:	f011 fa5e 	bl	801c93e <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800b482:	22cc      	movs	r2, #204	; 0xcc
 800b484:	4610      	mov	r0, r2
 800b486:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b48a:	2146      	movs	r1, #70	; 0x46
 800b48c:	9400      	str	r4, [sp, #0]
 800b48e:	f011 f9f9 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800b492:	2297      	movs	r2, #151	; 0x97
 800b494:	4610      	mov	r0, r2
 800b496:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b49a:	2146      	movs	r1, #70	; 0x46
 800b49c:	9400      	str	r4, [sp, #0]
 800b49e:	f011 f9f1 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800b4a2:	2262      	movs	r2, #98	; 0x62
 800b4a4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	9400      	str	r4, [sp, #0]
 800b4ac:	2146      	movs	r1, #70	; 0x46
 800b4ae:	f011 f9e9 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800b4b2:	9400      	str	r4, [sp, #0]
 800b4b4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b4b8:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b4ba:	2146      	movs	r1, #70	; 0x46
 800b4bc:	4610      	mov	r0, r2
 800b4be:	e7c7      	b.n	800b450 <CQS_Axes+0x6c>
	}else if (direction == 0x02)
 800b4c0:	2802      	cmp	r0, #2
 800b4c2:	d1c7      	bne.n	800b454 <CQS_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800b4c4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b4c8:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b4cc:	2210      	movs	r2, #16
 800b4ce:	214a      	movs	r1, #74	; 0x4a
 800b4d0:	2012      	movs	r0, #18
 800b4d2:	9400      	str	r4, [sp, #0]
 800b4d4:	f011 fa33 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800b4d8:	234c      	movs	r3, #76	; 0x4c
 800b4da:	22e8      	movs	r2, #232	; 0xe8
 800b4dc:	214a      	movs	r1, #74	; 0x4a
 800b4de:	2011      	movs	r0, #17
 800b4e0:	9400      	str	r4, [sp, #0]
 800b4e2:	f011 fa2c 	bl	801c93e <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800b4e6:	2244      	movs	r2, #68	; 0x44
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b4ee:	2146      	movs	r1, #70	; 0x46
 800b4f0:	9400      	str	r4, [sp, #0]
 800b4f2:	f011 f9c7 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800b4f6:	2279      	movs	r2, #121	; 0x79
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b4fe:	2146      	movs	r1, #70	; 0x46
 800b500:	9400      	str	r4, [sp, #0]
 800b502:	f011 f9bf 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800b506:	22ae      	movs	r2, #174	; 0xae
 800b508:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b50c:	4610      	mov	r0, r2
 800b50e:	9400      	str	r4, [sp, #0]
 800b510:	2146      	movs	r1, #70	; 0x46
 800b512:	f011 f9b7 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b516:	9400      	str	r4, [sp, #0]
 800b518:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b51c:	22e3      	movs	r2, #227	; 0xe3
 800b51e:	e7cc      	b.n	800b4ba <CQS_Axes+0xd6>

0800b520 <CQS_Axes_Measure>:

void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800b524:	ac02      	add	r4, sp, #8
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b526:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800b528:	2300      	movs	r3, #0
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b52a:	4688      	mov	r8, r1
 800b52c:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800b52e:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800b532:	2800      	cmp	r0, #0
 800b534:	d15a      	bne.n	800b5ec <CQS_Axes_Measure+0xcc>
	{
		
		TFT_SetTextColor(TFT_White);
 800b536:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b53a:	f011 fc2f 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b53e:	2063      	movs	r0, #99	; 0x63
 800b540:	f011 fc32 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b544:	485c      	ldr	r0, [pc, #368]	; (800b6b8 <CQS_Axes_Measure+0x198>)
 800b546:	f011 fc23 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(20, 70, 'a');
 800b54a:	2261      	movs	r2, #97	; 0x61
 800b54c:	2146      	movs	r1, #70	; 0x46
 800b54e:	2014      	movs	r0, #20
 800b550:	f011 fce8 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b554:	4859      	ldr	r0, [pc, #356]	; (800b6bc <CQS_Axes_Measure+0x19c>)
 800b556:	f011 fc1b 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(5, 70-2, 'Q');
 800b55a:	2251      	movs	r2, #81	; 0x51
 800b55c:	2144      	movs	r1, #68	; 0x44
 800b55e:	2005      	movs	r0, #5
 800b560:	f011 fce0 	bl	801cf24 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qa);
 800b564:	4642      	mov	r2, r8
 800b566:	4956      	ldr	r1, [pc, #344]	; (800b6c0 <CQS_Axes_Measure+0x1a0>)
 800b568:	4620      	mov	r0, r4
 800b56a:	f015 f851 	bl	8020610 <sprintf>
		TFT_DisplayString(39, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b56e:	2303      	movs	r3, #3
 800b570:	4622      	mov	r2, r4
 800b572:	2144      	movs	r1, #68	; 0x44
 800b574:	2027      	movs	r0, #39	; 0x27
 800b576:	f011 fd2d 	bl	801cfd4 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b57a:	484f      	ldr	r0, [pc, #316]	; (800b6b8 <CQS_Axes_Measure+0x198>)
 800b57c:	f011 fc08 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(112, 70, 'p');
 800b580:	2270      	movs	r2, #112	; 0x70
 800b582:	4610      	mov	r0, r2
 800b584:	2146      	movs	r1, #70	; 0x46
 800b586:	f011 fccd 	bl	801cf24 <TFT_DrawChar>

		TFT_SetFont(&Font16EN_arch_big);
 800b58a:	484c      	ldr	r0, [pc, #304]	; (800b6bc <CQS_Axes_Measure+0x19c>)
 800b58c:	f011 fc00 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(93, 70-2, 'Q');
 800b590:	2251      	movs	r2, #81	; 0x51
 800b592:	2144      	movs	r1, #68	; 0x44
 800b594:	205d      	movs	r0, #93	; 0x5d
 800b596:	f011 fcc5 	bl	801cf24 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qp);
 800b59a:	463a      	mov	r2, r7
 800b59c:	4948      	ldr	r1, [pc, #288]	; (800b6c0 <CQS_Axes_Measure+0x1a0>)
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f015 f836 	bl	8020610 <sprintf>
		TFT_DisplayString(130, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	2144      	movs	r1, #68	; 0x44
 800b5aa:	2082      	movs	r0, #130	; 0x82
 800b5ac:	f011 fd12 	bl	801cfd4 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b5b0:	4841      	ldr	r0, [pc, #260]	; (800b6b8 <CQS_Axes_Measure+0x198>)
 800b5b2:	f011 fbed 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(206, 70, 'f');
 800b5b6:	2266      	movs	r2, #102	; 0x66
 800b5b8:	2146      	movs	r1, #70	; 0x46
 800b5ba:	20ce      	movs	r0, #206	; 0xce
 800b5bc:	f011 fcb2 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b5c0:	483e      	ldr	r0, [pc, #248]	; (800b6bc <CQS_Axes_Measure+0x19c>)
 800b5c2:	f011 fbe5 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(191, 70-2, 'Q');
 800b5c6:	2251      	movs	r2, #81	; 0x51
 800b5c8:	2144      	movs	r1, #68	; 0x44
 800b5ca:	20bf      	movs	r0, #191	; 0xbf
 800b5cc:	f011 fcaa 	bl	801cf24 <TFT_DrawChar>

		sprintf (buffer, "%d", Qf);
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	493b      	ldr	r1, [pc, #236]	; (800b6c0 <CQS_Axes_Measure+0x1a0>)
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f015 f81b 	bl	8020610 <sprintf>
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b5da:	2303      	movs	r3, #3
 800b5dc:	4622      	mov	r2, r4
 800b5de:	2144      	movs	r1, #68	; 0x44
 800b5e0:	20e6      	movs	r0, #230	; 0xe6
 800b5e2:	f011 fcf7 	bl	801cfd4 <TFT_DisplayString>
		
		sprintf (buffer, "%d", Qf);
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800b5e6:	b002      	add	sp, #8
 800b5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ec:	4d35      	ldr	r5, [pc, #212]	; (800b6c4 <CQS_Axes_Measure+0x1a4>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b5ee:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800b5f0:	bf14      	ite	ne
 800b5f2:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b5f4:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b5f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b5fa:	bf18      	it	ne
 800b5fc:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b5fe:	f011 fbcd 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b602:	2063      	movs	r0, #99	; 0x63
 800b604:	f011 fbd0 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b608:	482b      	ldr	r0, [pc, #172]	; (800b6b8 <CQS_Axes_Measure+0x198>)
 800b60a:	f011 fbc1 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800b60e:	2261      	movs	r2, #97	; 0x61
 800b610:	2110      	movs	r1, #16
 800b612:	2064      	movs	r0, #100	; 0x64
 800b614:	f011 fc86 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b618:	4828      	ldr	r0, [pc, #160]	; (800b6bc <CQS_Axes_Measure+0x19c>)
 800b61a:	f011 fbb9 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'Q');
 800b61e:	2251      	movs	r2, #81	; 0x51
 800b620:	210e      	movs	r1, #14
 800b622:	2055      	movs	r0, #85	; 0x55
 800b624:	f011 fc7e 	bl	801cf24 <TFT_DrawChar>
		sprintf (buffer, "%d", Qa);
 800b628:	4642      	mov	r2, r8
 800b62a:	4925      	ldr	r1, [pc, #148]	; (800b6c0 <CQS_Axes_Measure+0x1a0>)
 800b62c:	4620      	mov	r0, r4
 800b62e:	f014 ffef 	bl	8020610 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b632:	2303      	movs	r3, #3
 800b634:	4622      	mov	r2, r4
 800b636:	210e      	movs	r1, #14
 800b638:	207d      	movs	r0, #125	; 0x7d
 800b63a:	f011 fccb 	bl	801cfd4 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b63e:	481e      	ldr	r0, [pc, #120]	; (800b6b8 <CQS_Axes_Measure+0x198>)
 800b640:	f011 fba6 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(216, 16, 'p');
 800b644:	2270      	movs	r2, #112	; 0x70
 800b646:	2110      	movs	r1, #16
 800b648:	20d8      	movs	r0, #216	; 0xd8
 800b64a:	f011 fc6b 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b64e:	481b      	ldr	r0, [pc, #108]	; (800b6bc <CQS_Axes_Measure+0x19c>)
 800b650:	f011 fb9e 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(199, 16-2, 'Q');
 800b654:	2251      	movs	r2, #81	; 0x51
 800b656:	210e      	movs	r1, #14
 800b658:	20c7      	movs	r0, #199	; 0xc7
 800b65a:	f011 fc63 	bl	801cf24 <TFT_DrawChar>
		sprintf (buffer, "%d", Qp);
 800b65e:	463a      	mov	r2, r7
 800b660:	4917      	ldr	r1, [pc, #92]	; (800b6c0 <CQS_Axes_Measure+0x1a0>)
 800b662:	4620      	mov	r0, r4
 800b664:	f014 ffd4 	bl	8020610 <sprintf>
		TFT_DisplayString(252, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b668:	2303      	movs	r3, #3
 800b66a:	4622      	mov	r2, r4
 800b66c:	210e      	movs	r1, #14
 800b66e:	20fc      	movs	r0, #252	; 0xfc
 800b670:	f011 fcb0 	bl	801cfd4 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b674:	4810      	ldr	r0, [pc, #64]	; (800b6b8 <CQS_Axes_Measure+0x198>)
 800b676:	f011 fb8b 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(340, 16-2, 'f');
 800b67a:	2266      	movs	r2, #102	; 0x66
 800b67c:	210e      	movs	r1, #14
 800b67e:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800b682:	f011 fc4f 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b686:	480d      	ldr	r0, [pc, #52]	; (800b6bc <CQS_Axes_Measure+0x19c>)
 800b688:	f011 fb82 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(325, 16-2, 'Q');
 800b68c:	2251      	movs	r2, #81	; 0x51
 800b68e:	210e      	movs	r1, #14
 800b690:	f240 1045 	movw	r0, #325	; 0x145
 800b694:	f011 fc46 	bl	801cf24 <TFT_DrawChar>
		sprintf (buffer, "%d", Qf);
 800b698:	4632      	mov	r2, r6
 800b69a:	4909      	ldr	r1, [pc, #36]	; (800b6c0 <CQS_Axes_Measure+0x1a0>)
 800b69c:	4620      	mov	r0, r4
 800b69e:	f014 ffb7 	bl	8020610 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	210e      	movs	r1, #14
 800b6a8:	f240 106d 	movw	r0, #365	; 0x16d
 800b6ac:	f011 fc92 	bl	801cfd4 <TFT_DisplayString>
		TFT_direction = 0x00;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	702b      	strb	r3, [r5, #0]
}
 800b6b4:	e797      	b.n	800b5e6 <CQS_Axes_Measure+0xc6>
 800b6b6:	bf00      	nop
 800b6b8:	200001c0 	.word	0x200001c0
 800b6bc:	200001b0 	.word	0x200001b0
 800b6c0:	08025309 	.word	0x08025309
 800b6c4:	200056a0 	.word	0x200056a0

0800b6c8 <CQS_Axes_Text>:

void CQS_Axes_Text(uint8_t direction){
 800b6c8:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	f040 811f 	bne.w	800b910 <CQS_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800b6d2:	488e      	ldr	r0, [pc, #568]	; (800b90c <CQS_Axes_Text+0x244>)
 800b6d4:	f011 fb5c 	bl	801cd90 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b6d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b6dc:	f011 fb5e 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b6e0:	2063      	movs	r0, #99	; 0x63
 800b6e2:	f011 fb61 	bl	801cda8 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'Q');
 800b6e6:	2251      	movs	r2, #81	; 0x51
 800b6e8:	f240 119f 	movw	r1, #415	; 0x19f
 800b6ec:	2018      	movs	r0, #24
 800b6ee:	f011 fc19 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800b6f2:	2231      	movs	r2, #49	; 0x31
 800b6f4:	f240 119f 	movw	r1, #415	; 0x19f
 800b6f8:	201e      	movs	r0, #30
 800b6fa:	f011 fc13 	bl	801cf24 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'Q');
 800b6fe:	2251      	movs	r2, #81	; 0x51
 800b700:	f240 119f 	movw	r1, #415	; 0x19f
 800b704:	2028      	movs	r0, #40	; 0x28
 800b706:	f011 fc0d 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800b70a:	2232      	movs	r2, #50	; 0x32
 800b70c:	f240 119f 	movw	r1, #415	; 0x19f
 800b710:	202e      	movs	r0, #46	; 0x2e
 800b712:	f011 fc07 	bl	801cf24 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'Q');
 800b716:	2251      	movs	r2, #81	; 0x51
 800b718:	f240 119f 	movw	r1, #415	; 0x19f
 800b71c:	2038      	movs	r0, #56	; 0x38
 800b71e:	f011 fc01 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800b722:	2233      	movs	r2, #51	; 0x33
 800b724:	f240 119f 	movw	r1, #415	; 0x19f
 800b728:	203e      	movs	r0, #62	; 0x3e
 800b72a:	f011 fbfb 	bl	801cf24 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'Q');
 800b72e:	2251      	movs	r2, #81	; 0x51
 800b730:	f240 119f 	movw	r1, #415	; 0x19f
 800b734:	2048      	movs	r0, #72	; 0x48
 800b736:	f011 fbf5 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800b73a:	2234      	movs	r2, #52	; 0x34
 800b73c:	f240 119f 	movw	r1, #415	; 0x19f
 800b740:	204e      	movs	r0, #78	; 0x4e
 800b742:	f011 fbef 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'Q');
 800b746:	2251      	movs	r2, #81	; 0x51
 800b748:	f240 119f 	movw	r1, #415	; 0x19f
 800b74c:	2058      	movs	r0, #88	; 0x58
 800b74e:	f011 fbe9 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800b752:	2235      	movs	r2, #53	; 0x35
 800b754:	f240 119f 	movw	r1, #415	; 0x19f
 800b758:	205e      	movs	r0, #94	; 0x5e
 800b75a:	f011 fbe3 	bl	801cf24 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'Q');
 800b75e:	2251      	movs	r2, #81	; 0x51
 800b760:	f240 119f 	movw	r1, #415	; 0x19f
 800b764:	2068      	movs	r0, #104	; 0x68
 800b766:	f011 fbdd 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800b76a:	2236      	movs	r2, #54	; 0x36
 800b76c:	f240 119f 	movw	r1, #415	; 0x19f
 800b770:	206e      	movs	r0, #110	; 0x6e
 800b772:	f011 fbd7 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'Q');
 800b776:	2251      	movs	r2, #81	; 0x51
 800b778:	f240 119f 	movw	r1, #415	; 0x19f
 800b77c:	2078      	movs	r0, #120	; 0x78
 800b77e:	f011 fbd1 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800b782:	2237      	movs	r2, #55	; 0x37
 800b784:	f240 119f 	movw	r1, #415	; 0x19f
 800b788:	207e      	movs	r0, #126	; 0x7e
 800b78a:	f011 fbcb 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'Q');
 800b78e:	2251      	movs	r2, #81	; 0x51
 800b790:	f240 119f 	movw	r1, #415	; 0x19f
 800b794:	2088      	movs	r0, #136	; 0x88
 800b796:	f011 fbc5 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800b79a:	2238      	movs	r2, #56	; 0x38
 800b79c:	f240 119f 	movw	r1, #415	; 0x19f
 800b7a0:	208e      	movs	r0, #142	; 0x8e
 800b7a2:	f011 fbbf 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'Q');
 800b7a6:	2251      	movs	r2, #81	; 0x51
 800b7a8:	f240 119f 	movw	r1, #415	; 0x19f
 800b7ac:	2098      	movs	r0, #152	; 0x98
 800b7ae:	f011 fbb9 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800b7b2:	2239      	movs	r2, #57	; 0x39
 800b7b4:	f240 119f 	movw	r1, #415	; 0x19f
 800b7b8:	209e      	movs	r0, #158	; 0x9e
 800b7ba:	f011 fbb3 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800b7be:	2231      	movs	r2, #49	; 0x31
 800b7c0:	f240 119f 	movw	r1, #415	; 0x19f
 800b7c4:	20ad      	movs	r0, #173	; 0xad
 800b7c6:	f011 fbad 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'Q');
 800b7ca:	2251      	movs	r2, #81	; 0x51
 800b7cc:	f240 119f 	movw	r1, #415	; 0x19f
 800b7d0:	20a8      	movs	r0, #168	; 0xa8
 800b7d2:	f011 fba7 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800b7d6:	2230      	movs	r2, #48	; 0x30
 800b7d8:	f240 119f 	movw	r1, #415	; 0x19f
 800b7dc:	20b1      	movs	r0, #177	; 0xb1
 800b7de:	f011 fba1 	bl	801cf24 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800b7e2:	2231      	movs	r2, #49	; 0x31
 800b7e4:	f240 119f 	movw	r1, #415	; 0x19f
 800b7e8:	20bd      	movs	r0, #189	; 0xbd
 800b7ea:	f011 fb9b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'Q');
 800b7ee:	2251      	movs	r2, #81	; 0x51
 800b7f0:	f240 119f 	movw	r1, #415	; 0x19f
 800b7f4:	20b8      	movs	r0, #184	; 0xb8
 800b7f6:	f011 fb95 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800b7fa:	2231      	movs	r2, #49	; 0x31
 800b7fc:	f240 119f 	movw	r1, #415	; 0x19f
 800b800:	20c2      	movs	r0, #194	; 0xc2
 800b802:	f011 fb8f 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800b806:	2231      	movs	r2, #49	; 0x31
 800b808:	f240 119f 	movw	r1, #415	; 0x19f
 800b80c:	20cd      	movs	r0, #205	; 0xcd
 800b80e:	f011 fb89 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'Q');
 800b812:	2251      	movs	r2, #81	; 0x51
 800b814:	f240 119f 	movw	r1, #415	; 0x19f
 800b818:	20c8      	movs	r0, #200	; 0xc8
 800b81a:	f011 fb83 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800b81e:	2232      	movs	r2, #50	; 0x32
 800b820:	f240 119f 	movw	r1, #415	; 0x19f
 800b824:	20d1      	movs	r0, #209	; 0xd1
 800b826:	f011 fb7d 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800b82a:	2231      	movs	r2, #49	; 0x31
 800b82c:	f240 119f 	movw	r1, #415	; 0x19f
 800b830:	20dd      	movs	r0, #221	; 0xdd
 800b832:	f011 fb77 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'Q');
 800b836:	2251      	movs	r2, #81	; 0x51
 800b838:	f240 119f 	movw	r1, #415	; 0x19f
 800b83c:	20d8      	movs	r0, #216	; 0xd8
 800b83e:	f011 fb71 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800b842:	2233      	movs	r2, #51	; 0x33
 800b844:	f240 119f 	movw	r1, #415	; 0x19f
 800b848:	20e1      	movs	r0, #225	; 0xe1
 800b84a:	f011 fb6b 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800b84e:	2231      	movs	r2, #49	; 0x31
 800b850:	f240 119f 	movw	r1, #415	; 0x19f
 800b854:	20ed      	movs	r0, #237	; 0xed
 800b856:	f011 fb65 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'Q');
 800b85a:	2251      	movs	r2, #81	; 0x51
 800b85c:	f240 119f 	movw	r1, #415	; 0x19f
 800b860:	20e8      	movs	r0, #232	; 0xe8
 800b862:	f011 fb5f 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800b866:	2234      	movs	r2, #52	; 0x34
 800b868:	f240 119f 	movw	r1, #415	; 0x19f
 800b86c:	20f1      	movs	r0, #241	; 0xf1
 800b86e:	f011 fb59 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800b872:	2231      	movs	r2, #49	; 0x31
 800b874:	f240 119f 	movw	r1, #415	; 0x19f
 800b878:	20fd      	movs	r0, #253	; 0xfd
 800b87a:	f011 fb53 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'Q');
 800b87e:	2251      	movs	r2, #81	; 0x51
 800b880:	f240 119f 	movw	r1, #415	; 0x19f
 800b884:	20f8      	movs	r0, #248	; 0xf8
 800b886:	f011 fb4d 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800b88a:	2235      	movs	r2, #53	; 0x35
 800b88c:	f240 119f 	movw	r1, #415	; 0x19f
 800b890:	f240 1001 	movw	r0, #257	; 0x101
 800b894:	f011 fb46 	bl	801cf24 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800b898:	2230      	movs	r2, #48	; 0x30
 800b89a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800b89e:	2005      	movs	r0, #5
 800b8a0:	f011 fb40 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800b8a4:	2232      	movs	r2, #50	; 0x32
 800b8a6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	f011 fb3a 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800b8b0:	2235      	movs	r2, #53	; 0x35
 800b8b2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b8b6:	2007      	movs	r0, #7
 800b8b8:	f011 fb34 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800b8bc:	2235      	movs	r2, #53	; 0x35
 800b8be:	f240 1101 	movw	r1, #257	; 0x101
 800b8c2:	2001      	movs	r0, #1
 800b8c4:	f011 fb2e 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800b8c8:	2230      	movs	r2, #48	; 0x30
 800b8ca:	f240 1101 	movw	r1, #257	; 0x101
 800b8ce:	2007      	movs	r0, #7
 800b8d0:	f011 fb28 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800b8d4:	2237      	movs	r2, #55	; 0x37
 800b8d6:	21b5      	movs	r1, #181	; 0xb5
 800b8d8:	2001      	movs	r0, #1
 800b8da:	f011 fb23 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800b8de:	2235      	movs	r2, #53	; 0x35
 800b8e0:	21b5      	movs	r1, #181	; 0xb5
 800b8e2:	2007      	movs	r0, #7
 800b8e4:	f011 fb1e 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	2231      	movs	r2, #49	; 0x31
 800b8ec:	2169      	movs	r1, #105	; 0x69
 800b8ee:	f011 fb19 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800b8f2:	2230      	movs	r2, #48	; 0x30
 800b8f4:	2169      	movs	r1, #105	; 0x69
 800b8f6:	2004      	movs	r0, #4
 800b8f8:	f011 fb14 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800b8fc:	2230      	movs	r2, #48	; 0x30
 800b8fe:	2169      	movs	r1, #105	; 0x69
 800b900:	2009      	movs	r0, #9
		TFT_DrawChar(67, 43, '0');
		

		TFT_direction = 0x00;
	}
}
 800b902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800b906:	f011 bb0d 	b.w	801cf24 <TFT_DrawChar>
 800b90a:	bf00      	nop
 800b90c:	20000210 	.word	0x20000210
 800b910:	4d98      	ldr	r5, [pc, #608]	; (800bb74 <CQS_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b912:	2801      	cmp	r0, #1
 800b914:	bf0c      	ite	eq
 800b916:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800b918:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800b91a:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b91e:	bf18      	it	ne
 800b920:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b922:	f011 fa3b 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b926:	2063      	movs	r0, #99	; 0x63
 800b928:	f011 fa3e 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800b92c:	4892      	ldr	r0, [pc, #584]	; (800bb78 <CQS_Axes_Text+0x4b0>)
 800b92e:	f011 fa2f 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'Q');
 800b932:	2251      	movs	r2, #81	; 0x51
 800b934:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b938:	2057      	movs	r0, #87	; 0x57
 800b93a:	f011 faf3 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800b93e:	2231      	movs	r2, #49	; 0x31
 800b940:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b944:	205d      	movs	r0, #93	; 0x5d
 800b946:	f011 faed 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'Q');
 800b94a:	2251      	movs	r2, #81	; 0x51
 800b94c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b950:	206d      	movs	r0, #109	; 0x6d
 800b952:	f011 fae7 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800b956:	2232      	movs	r2, #50	; 0x32
 800b958:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b95c:	2073      	movs	r0, #115	; 0x73
 800b95e:	f011 fae1 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'Q');
 800b962:	2251      	movs	r2, #81	; 0x51
 800b964:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b968:	2083      	movs	r0, #131	; 0x83
 800b96a:	f011 fadb 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800b96e:	2233      	movs	r2, #51	; 0x33
 800b970:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b974:	2089      	movs	r0, #137	; 0x89
 800b976:	f011 fad5 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'Q');
 800b97a:	2251      	movs	r2, #81	; 0x51
 800b97c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b980:	2099      	movs	r0, #153	; 0x99
 800b982:	f011 facf 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800b986:	2234      	movs	r2, #52	; 0x34
 800b988:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b98c:	209f      	movs	r0, #159	; 0x9f
 800b98e:	f011 fac9 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'Q');
 800b992:	2251      	movs	r2, #81	; 0x51
 800b994:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b998:	20af      	movs	r0, #175	; 0xaf
 800b99a:	f011 fac3 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800b99e:	2235      	movs	r2, #53	; 0x35
 800b9a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b9a4:	20b5      	movs	r0, #181	; 0xb5
 800b9a6:	f011 fabd 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'Q');
 800b9aa:	2251      	movs	r2, #81	; 0x51
 800b9ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b9b0:	20c5      	movs	r0, #197	; 0xc5
 800b9b2:	f011 fab7 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800b9b6:	2236      	movs	r2, #54	; 0x36
 800b9b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b9bc:	20cb      	movs	r0, #203	; 0xcb
 800b9be:	f011 fab1 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'Q');
 800b9c2:	2251      	movs	r2, #81	; 0x51
 800b9c4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b9c8:	20db      	movs	r0, #219	; 0xdb
 800b9ca:	f011 faab 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800b9ce:	2237      	movs	r2, #55	; 0x37
 800b9d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b9d4:	20e1      	movs	r0, #225	; 0xe1
 800b9d6:	f011 faa5 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'Q');
 800b9da:	2251      	movs	r2, #81	; 0x51
 800b9dc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b9e0:	20f1      	movs	r0, #241	; 0xf1
 800b9e2:	f011 fa9f 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800b9e6:	2238      	movs	r2, #56	; 0x38
 800b9e8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b9ec:	20f7      	movs	r0, #247	; 0xf7
 800b9ee:	f011 fa99 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'Q');
 800b9f2:	2251      	movs	r2, #81	; 0x51
 800b9f4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b9f8:	f240 1007 	movw	r0, #263	; 0x107
 800b9fc:	f011 fa92 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800ba00:	2239      	movs	r2, #57	; 0x39
 800ba02:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba06:	f240 100d 	movw	r0, #269	; 0x10d
 800ba0a:	f011 fa8b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800ba0e:	2231      	movs	r2, #49	; 0x31
 800ba10:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba14:	f44f 7091 	mov.w	r0, #290	; 0x122
 800ba18:	f011 fa84 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'Q');
 800ba1c:	2251      	movs	r2, #81	; 0x51
 800ba1e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba22:	f240 101d 	movw	r0, #285	; 0x11d
 800ba26:	f011 fa7d 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800ba2a:	2230      	movs	r2, #48	; 0x30
 800ba2c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba30:	f44f 7093 	mov.w	r0, #294	; 0x126
 800ba34:	f011 fa76 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800ba38:	2231      	movs	r2, #49	; 0x31
 800ba3a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba3e:	f44f 709c 	mov.w	r0, #312	; 0x138
 800ba42:	f011 fa6f 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'Q');
 800ba46:	2251      	movs	r2, #81	; 0x51
 800ba48:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba4c:	f240 1033 	movw	r0, #307	; 0x133
 800ba50:	f011 fa68 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800ba54:	2231      	movs	r2, #49	; 0x31
 800ba56:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba5a:	f240 103d 	movw	r0, #317	; 0x13d
 800ba5e:	f011 fa61 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800ba62:	2231      	movs	r2, #49	; 0x31
 800ba64:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba68:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800ba6c:	f011 fa5a 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'Q');
 800ba70:	2251      	movs	r2, #81	; 0x51
 800ba72:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba76:	f240 1049 	movw	r0, #329	; 0x149
 800ba7a:	f011 fa53 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800ba7e:	2232      	movs	r2, #50	; 0x32
 800ba80:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba84:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800ba88:	f011 fa4c 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800ba8c:	2231      	movs	r2, #49	; 0x31
 800ba8e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ba92:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800ba96:	f011 fa45 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'Q');
 800ba9a:	2251      	movs	r2, #81	; 0x51
 800ba9c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800baa0:	f240 105f 	movw	r0, #351	; 0x15f
 800baa4:	f011 fa3e 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800baa8:	2233      	movs	r2, #51	; 0x33
 800baaa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800baae:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800bab2:	f011 fa37 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800bab6:	2231      	movs	r2, #49	; 0x31
 800bab8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800babc:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800bac0:	f011 fa30 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'Q');
 800bac4:	2251      	movs	r2, #81	; 0x51
 800bac6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800baca:	f240 1075 	movw	r0, #373	; 0x175
 800bace:	f011 fa29 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800bad2:	2234      	movs	r2, #52	; 0x34
 800bad4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bad8:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800badc:	f011 fa22 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800bae0:	2231      	movs	r2, #49	; 0x31
 800bae2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bae6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800baea:	f011 fa1b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'Q');
 800baee:	2251      	movs	r2, #81	; 0x51
 800baf0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800baf4:	f240 108b 	movw	r0, #395	; 0x18b
 800baf8:	f011 fa14 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800bafc:	2235      	movs	r2, #53	; 0x35
 800bafe:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bb02:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800bb06:	f011 fa0d 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800bb0a:	2230      	movs	r2, #48	; 0x30
 800bb0c:	21fa      	movs	r1, #250	; 0xfa
 800bb0e:	2041      	movs	r0, #65	; 0x41
 800bb10:	f011 fa08 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800bb14:	2232      	movs	r2, #50	; 0x32
 800bb16:	21ca      	movs	r1, #202	; 0xca
 800bb18:	203a      	movs	r0, #58	; 0x3a
 800bb1a:	f011 fa03 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800bb1e:	2235      	movs	r2, #53	; 0x35
 800bb20:	21ca      	movs	r1, #202	; 0xca
 800bb22:	2041      	movs	r0, #65	; 0x41
 800bb24:	f011 f9fe 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800bb28:	2235      	movs	r2, #53	; 0x35
 800bb2a:	2195      	movs	r1, #149	; 0x95
 800bb2c:	203a      	movs	r0, #58	; 0x3a
 800bb2e:	f011 f9f9 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800bb32:	2230      	movs	r2, #48	; 0x30
 800bb34:	2195      	movs	r1, #149	; 0x95
 800bb36:	2041      	movs	r0, #65	; 0x41
 800bb38:	f011 f9f4 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800bb3c:	2237      	movs	r2, #55	; 0x37
 800bb3e:	2160      	movs	r1, #96	; 0x60
 800bb40:	203a      	movs	r0, #58	; 0x3a
 800bb42:	f011 f9ef 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800bb46:	2235      	movs	r2, #53	; 0x35
 800bb48:	2160      	movs	r1, #96	; 0x60
 800bb4a:	2041      	movs	r0, #65	; 0x41
 800bb4c:	f011 f9ea 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800bb50:	2231      	movs	r2, #49	; 0x31
 800bb52:	212b      	movs	r1, #43	; 0x2b
 800bb54:	2039      	movs	r0, #57	; 0x39
 800bb56:	f011 f9e5 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800bb5a:	2230      	movs	r2, #48	; 0x30
 800bb5c:	212b      	movs	r1, #43	; 0x2b
 800bb5e:	203e      	movs	r0, #62	; 0x3e
 800bb60:	f011 f9e0 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800bb64:	2230      	movs	r2, #48	; 0x30
 800bb66:	212b      	movs	r1, #43	; 0x2b
 800bb68:	2043      	movs	r0, #67	; 0x43
 800bb6a:	f011 f9db 	bl	801cf24 <TFT_DrawChar>
		TFT_direction = 0x00;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	702b      	strb	r3, [r5, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	200056a0 	.word	0x200056a0
 800bb78:	20000210 	.word	0x20000210

0800bb7c <CQS_chart>:

void CQS_chart(uint8_t direction, uint8_t *GraphData)
{
 800bb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb80:	ed2d 8b04 	vpush	{d8-d9}
 800bb84:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800bb86:	ad06      	add	r5, sp, #24
 800bb88:	2300      	movs	r3, #0
{
 800bb8a:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800bb8c:	f825 3d04 	strh.w	r3, [r5, #-4]!
 800bb90:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 800bf18 <CQS_chart+0x39c>
 800bb94:	1e4e      	subs	r6, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800bb96:	2800      	cmp	r0, #0
 800bb98:	f040 81ca 	bne.w	800bf30 <CQS_chart+0x3b4>
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800bb9c:	780b      	ldrb	r3, [r1, #0]
 800bb9e:	ed9f 9adf 	vldr	s18, [pc, #892]	; 800bf1c <CQS_chart+0x3a0>
 800bba2:	eddf 8adf 	vldr	s17, [pc, #892]	; 800bf20 <CQS_chart+0x3a4>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800bba6:	4fdf      	ldr	r7, [pc, #892]	; (800bf24 <CQS_chart+0x3a8>)
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800bba8:	ee07 3a90 	vmov	s15, r3
 800bbac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb0:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800bbb4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	2222      	movs	r2, #34	; 0x22
 800bbbc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bbc0:	2018      	movs	r0, #24
 800bbc2:	eef0 7a49 	vmov.f32	s15, s18
 800bbc6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bbca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbce:	edcd 7a03 	vstr	s15, [sp, #12]
 800bbd2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bbd6:	f010 feb2 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(float)GraphData[1]/100*305, 50, 410, CQS_COLOR_Q2);
 800bbda:	7863      	ldrb	r3, [r4, #1]
 800bbdc:	ee07 3a90 	vmov	s15, r3
 800bbe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe4:	f645 2392 	movw	r3, #23186	; 0x5a92
 800bbe8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	2232      	movs	r2, #50	; 0x32
 800bbf0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bbf4:	2028      	movs	r0, #40	; 0x28
 800bbf6:	eef0 7a49 	vmov.f32	s15, s18
 800bbfa:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bbfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc02:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc06:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc0a:	f010 fe98 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(float)GraphData[2]/100*305, 66, 410, CQS_COLOR_Q3);
 800bc0e:	78a3      	ldrb	r3, [r4, #2]
 800bc10:	ee07 3a90 	vmov	s15, r3
 800bc14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc18:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800bc1c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	2242      	movs	r2, #66	; 0x42
 800bc24:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bc28:	2038      	movs	r0, #56	; 0x38
 800bc2a:	eef0 7a49 	vmov.f32	s15, s18
 800bc2e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bc32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc36:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc3a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc3e:	f010 fe7e 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(float)GraphData[3]/100*305, 82, 410, CQS_COLOR_Q4);
 800bc42:	78e3      	ldrb	r3, [r4, #3]
 800bc44:	ee07 3a90 	vmov	s15, r3
 800bc48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4c:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800bc50:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	2252      	movs	r2, #82	; 0x52
 800bc58:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bc5c:	2048      	movs	r0, #72	; 0x48
 800bc5e:	eef0 7a49 	vmov.f32	s15, s18
 800bc62:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bc66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc6a:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc6e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc72:	f010 fe64 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(float)GraphData[4]/100*305, 98, 410, CQS_COLOR_Q5);
 800bc76:	7923      	ldrb	r3, [r4, #4]
 800bc78:	ee07 3a90 	vmov	s15, r3
 800bc7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc80:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800bc84:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	2262      	movs	r2, #98	; 0x62
 800bc8c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bc90:	2058      	movs	r0, #88	; 0x58
 800bc92:	eef0 7a49 	vmov.f32	s15, s18
 800bc96:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bc9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc9e:	edcd 7a03 	vstr	s15, [sp, #12]
 800bca2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bca6:	f010 fe4a 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(float)GraphData[5]/100*305, 114, 410, CQS_COLOR_Q6);
 800bcaa:	7963      	ldrb	r3, [r4, #5]
 800bcac:	ee07 3a90 	vmov	s15, r3
 800bcb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb4:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800bcb8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	2272      	movs	r2, #114	; 0x72
 800bcc0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bcc4:	2068      	movs	r0, #104	; 0x68
 800bcc6:	eef0 7a49 	vmov.f32	s15, s18
 800bcca:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bcce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd2:	edcd 7a03 	vstr	s15, [sp, #12]
 800bcd6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bcda:	f010 fe30 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(float)GraphData[6]/100*305, 130, 410, CQS_COLOR_Q7);
 800bcde:	79a3      	ldrb	r3, [r4, #6]
 800bce0:	ee07 3a90 	vmov	s15, r3
 800bce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce8:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800bcec:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	2282      	movs	r2, #130	; 0x82
 800bcf4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bcf8:	2078      	movs	r0, #120	; 0x78
 800bcfa:	eef0 7a49 	vmov.f32	s15, s18
 800bcfe:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bd02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd06:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd0a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd0e:	f010 fe16 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(float)GraphData[7]/100*305, 146, 410, CQS_COLOR_Q8);
 800bd12:	79e3      	ldrb	r3, [r4, #7]
 800bd14:	ee07 3a90 	vmov	s15, r3
 800bd18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1c:	f247 5369 	movw	r3, #30057	; 0x7569
 800bd20:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	2292      	movs	r2, #146	; 0x92
 800bd28:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bd2c:	2088      	movs	r0, #136	; 0x88
 800bd2e:	eef0 7a49 	vmov.f32	s15, s18
 800bd32:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bd36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd3a:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd3e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd42:	f010 fdfc 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(float)GraphData[8]/100*305, 162, 410, CQS_COLOR_Q9);
 800bd46:	7a23      	ldrb	r3, [r4, #8]
 800bd48:	ee07 3a90 	vmov	s15, r3
 800bd4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd50:	f24b 6307 	movw	r3, #46599	; 0xb607
 800bd54:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	22a2      	movs	r2, #162	; 0xa2
 800bd5c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bd60:	2098      	movs	r0, #152	; 0x98
 800bd62:	eef0 7a49 	vmov.f32	s15, s18
 800bd66:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bd6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd6e:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd72:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd76:	f010 fde2 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(float)GraphData[9]/100*305, 178, 410, CQS_COLOR_Q10);
 800bd7a:	7a63      	ldrb	r3, [r4, #9]
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd84:	f64e 6325 	movw	r3, #60965	; 0xee25
 800bd88:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	22b2      	movs	r2, #178	; 0xb2
 800bd90:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bd94:	20a8      	movs	r0, #168	; 0xa8
 800bd96:	eef0 7a49 	vmov.f32	s15, s18
 800bd9a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bd9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bda2:	edcd 7a03 	vstr	s15, [sp, #12]
 800bda6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bdaa:	f010 fdc8 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(float)GraphData[10]/100*305, 194, 410, CQS_COLOR_Q11);
 800bdae:	7aa3      	ldrb	r3, [r4, #10]
 800bdb0:	ee07 3a90 	vmov	s15, r3
 800bdb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb8:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800bdbc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	22c2      	movs	r2, #194	; 0xc2
 800bdc4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bdc8:	20b8      	movs	r0, #184	; 0xb8
 800bdca:	eef0 7a49 	vmov.f32	s15, s18
 800bdce:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bdd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd6:	edcd 7a03 	vstr	s15, [sp, #12]
 800bdda:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bdde:	f010 fdae 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(float)GraphData[11]/100*305, 210, 410, CQS_COLOR_Q12);
 800bde2:	7ae3      	ldrb	r3, [r4, #11]
 800bde4:	ee07 3a90 	vmov	s15, r3
 800bde8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdec:	f64e 4347 	movw	r3, #60487	; 0xec47
 800bdf0:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	22d2      	movs	r2, #210	; 0xd2
 800bdf8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800bdfc:	20c8      	movs	r0, #200	; 0xc8
 800bdfe:	eef0 7a49 	vmov.f32	s15, s18
 800be02:	eee7 7a68 	vfms.f32	s15, s14, s17
 800be06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be0a:	edcd 7a03 	vstr	s15, [sp, #12]
 800be0e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be12:	f010 fd94 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(float)GraphData[12]/100*305, 226, 410, CQS_COLOR_Q13);
 800be16:	7b23      	ldrb	r3, [r4, #12]
 800be18:	ee07 3a90 	vmov	s15, r3
 800be1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be20:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800be24:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	22e2      	movs	r2, #226	; 0xe2
 800be2c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800be30:	20d8      	movs	r0, #216	; 0xd8
 800be32:	eef0 7a49 	vmov.f32	s15, s18
 800be36:	eee7 7a68 	vfms.f32	s15, s14, s17
 800be3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be3e:	edcd 7a03 	vstr	s15, [sp, #12]
 800be42:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be46:	f010 fd7a 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(float)GraphData[13]/100*305, 242, 410, CQS_COLOR_Q14);
 800be4a:	7b63      	ldrb	r3, [r4, #13]
 800be4c:	ee07 3a90 	vmov	s15, r3
 800be50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be54:	f64a 1347 	movw	r3, #43335	; 0xa947
 800be58:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	22f2      	movs	r2, #242	; 0xf2
 800be60:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800be64:	20e8      	movs	r0, #232	; 0xe8
 800be66:	eef0 7a49 	vmov.f32	s15, s18
 800be6a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800be6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be72:	edcd 7a03 	vstr	s15, [sp, #12]
 800be76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be7a:	f010 fd60 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800be7e:	7ba3      	ldrb	r3, [r4, #14]
 800be80:	ee07 3a90 	vmov	s15, r3
 800be84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be88:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800be8c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800be90:	f44f 7281 	mov.w	r2, #258	; 0x102
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	20f8      	movs	r0, #248	; 0xf8
 800be98:	f44f 73cd 	mov.w	r3, #410	; 0x19a
		TFT_SetBackColor(TFT_Black_Bkgr);
 800be9c:	2418      	movs	r4, #24
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800be9e:	eea7 9a68 	vfms.f32	s18, s14, s17
 800bea2:	eefc 7ac9 	vcvt.u32.f32	s15, s18
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800bea6:	ed9f 9a20 	vldr	s18, [pc, #128]	; 800bf28 <CQS_chart+0x3ac>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800beaa:	edcd 7a03 	vstr	s15, [sp, #12]
 800beae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800beb2:	f010 fd44 	bl	801c93e <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800beb6:	481d      	ldr	r0, [pc, #116]	; (800bf2c <CQS_chart+0x3b0>)
 800beb8:	f010 ff6a 	bl	801cd90 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800bebc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bec0:	f010 ff6c 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800bec4:	2063      	movs	r0, #99	; 0x63
 800bec6:	f010 ff6f 	bl	801cda8 <TFT_SetBackColor>
			sprintf (buffer, "%d", GraphData[i]);
 800beca:	7872      	ldrb	r2, [r6, #1]
 800becc:	4639      	mov	r1, r7
 800bece:	4628      	mov	r0, r5
 800bed0:	f014 fb9e 	bl	8020610 <sprintf>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800bed4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800bed8:	ee07 3a90 	vmov	s15, r3
 800bedc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee0:	4620      	mov	r0, r4
 800bee2:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bee6:	3410      	adds	r4, #16
 800bee8:	2303      	movs	r3, #3
 800beea:	462a      	mov	r2, r5
 800beec:	b2a4      	uxth	r4, r4
 800beee:	eef0 7a49 	vmov.f32	s15, s18
 800bef2:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800befa:	edcd 7a03 	vstr	s15, [sp, #12]
 800befe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bf02:	f011 f867 	bl	801cfd4 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800bf06:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800bf0a:	d1de      	bne.n	800beca <CQS_chart+0x34e>
			X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800bf0c:	b006      	add	sp, #24
 800bf0e:	ecbd 8b04 	vpop	{d8-d9}
 800bf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf16:	bf00      	nop
 800bf18:	42c80000 	.word	0x42c80000
 800bf1c:	43cd0000 	.word	0x43cd0000
 800bf20:	43988000 	.word	0x43988000
 800bf24:	08025309 	.word	0x08025309
 800bf28:	43c80000 	.word	0x43c80000
 800bf2c:	20000210 	.word	0x20000210
		if(direction == 0x01){TFT_direction = 0x01;} 
 800bf30:	2801      	cmp	r0, #1
 800bf32:	4fdf      	ldr	r7, [pc, #892]	; (800c2b0 <CQS_chart+0x734>)
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bf34:	eddf 8adf 	vldr	s17, [pc, #892]	; 800c2b4 <CQS_chart+0x738>
		if(direction == 0x01){TFT_direction = 0x01;} 
 800bf38:	bf0e      	itee	eq
 800bf3a:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800bf3c:	2302      	movne	r3, #2
 800bf3e:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bf40:	780b      	ldrb	r3, [r1, #0]
 800bf42:	ed9f 9add 	vldr	s18, [pc, #884]	; 800c2b8 <CQS_chart+0x73c>
			sprintf (buffer, "%d", GraphData[i]);
 800bf46:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800c2c8 <CQS_chart+0x74c>
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bf4a:	ee07 3a90 	vmov	s15, r3
 800bf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf52:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800bf56:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	2262      	movs	r2, #98	; 0x62
 800bf5e:	23fc      	movs	r3, #252	; 0xfc
 800bf60:	2057      	movs	r0, #87	; 0x57
 800bf62:	eef0 7a68 	vmov.f32	s15, s17
 800bf66:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bf6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf6e:	edcd 7a03 	vstr	s15, [sp, #12]
 800bf72:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bf76:	f010 fce2 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(109, 252-(float)GraphData[1]/100*210, 120, 252, CQS_COLOR_Q2);
 800bf7a:	7863      	ldrb	r3, [r4, #1]
 800bf7c:	ee07 3a90 	vmov	s15, r3
 800bf80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf84:	f645 2392 	movw	r3, #23186	; 0x5a92
 800bf88:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	2278      	movs	r2, #120	; 0x78
 800bf90:	23fc      	movs	r3, #252	; 0xfc
 800bf92:	206d      	movs	r0, #109	; 0x6d
 800bf94:	eef0 7a68 	vmov.f32	s15, s17
 800bf98:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bf9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfa0:	edcd 7a03 	vstr	s15, [sp, #12]
 800bfa4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bfa8:	f010 fcc9 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(131, 252-(float)GraphData[2]/100*210, 142, 252, CQS_COLOR_Q3);
 800bfac:	78a3      	ldrb	r3, [r4, #2]
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb6:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800bfba:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	228e      	movs	r2, #142	; 0x8e
 800bfc2:	23fc      	movs	r3, #252	; 0xfc
 800bfc4:	2083      	movs	r0, #131	; 0x83
 800bfc6:	eef0 7a68 	vmov.f32	s15, s17
 800bfca:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bfce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfd2:	edcd 7a03 	vstr	s15, [sp, #12]
 800bfd6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bfda:	f010 fcb0 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(153, 252-(float)GraphData[3]/100*210, 164, 252, CQS_COLOR_Q4);
 800bfde:	78e3      	ldrb	r3, [r4, #3]
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe8:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800bfec:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	22a4      	movs	r2, #164	; 0xa4
 800bff4:	23fc      	movs	r3, #252	; 0xfc
 800bff6:	2099      	movs	r0, #153	; 0x99
 800bff8:	eef0 7a68 	vmov.f32	s15, s17
 800bffc:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c004:	edcd 7a03 	vstr	s15, [sp, #12]
 800c008:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c00c:	f010 fc97 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(175, 252-(float)GraphData[4]/100*210, 186, 252, CQS_COLOR_Q5);
 800c010:	7923      	ldrb	r3, [r4, #4]
 800c012:	ee07 3a90 	vmov	s15, r3
 800c016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c01a:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800c01e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	22ba      	movs	r2, #186	; 0xba
 800c026:	23fc      	movs	r3, #252	; 0xfc
 800c028:	20af      	movs	r0, #175	; 0xaf
 800c02a:	eef0 7a68 	vmov.f32	s15, s17
 800c02e:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c036:	edcd 7a03 	vstr	s15, [sp, #12]
 800c03a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c03e:	f010 fc7e 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(197, 252-(float)GraphData[5]/100*210, 208, 252, CQS_COLOR_Q6);
 800c042:	7963      	ldrb	r3, [r4, #5]
 800c044:	ee07 3a90 	vmov	s15, r3
 800c048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c04c:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800c050:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	22d0      	movs	r2, #208	; 0xd0
 800c058:	23fc      	movs	r3, #252	; 0xfc
 800c05a:	20c5      	movs	r0, #197	; 0xc5
 800c05c:	eef0 7a68 	vmov.f32	s15, s17
 800c060:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c068:	edcd 7a03 	vstr	s15, [sp, #12]
 800c06c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c070:	f010 fc65 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(219, 252-(float)GraphData[6]/100*210, 230, 252, CQS_COLOR_Q7);
 800c074:	79a3      	ldrb	r3, [r4, #6]
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c07e:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800c082:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	22e6      	movs	r2, #230	; 0xe6
 800c08a:	23fc      	movs	r3, #252	; 0xfc
 800c08c:	20db      	movs	r0, #219	; 0xdb
 800c08e:	eef0 7a68 	vmov.f32	s15, s17
 800c092:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c09a:	edcd 7a03 	vstr	s15, [sp, #12]
 800c09e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c0a2:	f010 fc4c 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(241, 252-(float)GraphData[7]/100*210, 252, 252, CQS_COLOR_Q8);
 800c0a6:	79e3      	ldrb	r3, [r4, #7]
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b0:	f247 5369 	movw	r3, #30057	; 0x7569
 800c0b4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	23fc      	movs	r3, #252	; 0xfc
 800c0bc:	461a      	mov	r2, r3
 800c0be:	20f1      	movs	r0, #241	; 0xf1
 800c0c0:	eef0 7a68 	vmov.f32	s15, s17
 800c0c4:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c0c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0cc:	edcd 7a03 	vstr	s15, [sp, #12]
 800c0d0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c0d4:	f010 fc33 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(263, 252-(float)GraphData[8]/100*210, 274, 252, CQS_COLOR_Q9);
 800c0d8:	7a23      	ldrb	r3, [r4, #8]
 800c0da:	ee07 3a90 	vmov	s15, r3
 800c0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e2:	f24b 6307 	movw	r3, #46599	; 0xb607
 800c0e6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c0f0:	23fc      	movs	r3, #252	; 0xfc
 800c0f2:	f240 1007 	movw	r0, #263	; 0x107
 800c0f6:	eef0 7a68 	vmov.f32	s15, s17
 800c0fa:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c0fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c102:	edcd 7a03 	vstr	s15, [sp, #12]
 800c106:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c10a:	f010 fc18 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(285, 252-(float)GraphData[9]/100*210, 296, 252, CQS_COLOR_Q10);
 800c10e:	7a63      	ldrb	r3, [r4, #9]
 800c110:	ee07 3a90 	vmov	s15, r3
 800c114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c118:	f64e 6325 	movw	r3, #60965	; 0xee25
 800c11c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c126:	23fc      	movs	r3, #252	; 0xfc
 800c128:	f240 101d 	movw	r0, #285	; 0x11d
 800c12c:	eef0 7a68 	vmov.f32	s15, s17
 800c130:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c138:	edcd 7a03 	vstr	s15, [sp, #12]
 800c13c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c140:	f010 fbfd 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(307, 252-(float)GraphData[10]/100*210,318, 252, CQS_COLOR_Q11);
 800c144:	7aa3      	ldrb	r3, [r4, #10]
 800c146:	ee07 3a90 	vmov	s15, r3
 800c14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14e:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800c152:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800c15c:	23fc      	movs	r3, #252	; 0xfc
 800c15e:	f240 1033 	movw	r0, #307	; 0x133
 800c162:	eef0 7a68 	vmov.f32	s15, s17
 800c166:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c16a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c16e:	edcd 7a03 	vstr	s15, [sp, #12]
 800c172:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c176:	f010 fbe2 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(329, 252-(float)GraphData[11]/100*210,340, 252, CQS_COLOR_Q12);
 800c17a:	7ae3      	ldrb	r3, [r4, #11]
 800c17c:	ee07 3a90 	vmov	s15, r3
 800c180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c184:	f64e 4347 	movw	r3, #60487	; 0xec47
 800c188:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800c192:	23fc      	movs	r3, #252	; 0xfc
 800c194:	f240 1049 	movw	r0, #329	; 0x149
 800c198:	eef0 7a68 	vmov.f32	s15, s17
 800c19c:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c1a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1a4:	edcd 7a03 	vstr	s15, [sp, #12]
 800c1a8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c1ac:	f010 fbc7 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(351, 252-(float)GraphData[12]/100*210,362, 252, CQS_COLOR_Q13);
 800c1b0:	7b23      	ldrb	r3, [r4, #12]
 800c1b2:	ee07 3a90 	vmov	s15, r3
 800c1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ba:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800c1be:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c1c8:	23fc      	movs	r3, #252	; 0xfc
 800c1ca:	f240 105f 	movw	r0, #351	; 0x15f
 800c1ce:	eef0 7a68 	vmov.f32	s15, s17
 800c1d2:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1da:	edcd 7a03 	vstr	s15, [sp, #12]
 800c1de:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c1e2:	f010 fbac 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
 800c1e6:	7b63      	ldrb	r3, [r4, #13]
 800c1e8:	ee07 3a90 	vmov	s15, r3
 800c1ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f0:	f64a 1347 	movw	r3, #43335	; 0xa947
 800c1f4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c1fe:	23fc      	movs	r3, #252	; 0xfc
 800c200:	f240 1075 	movw	r0, #373	; 0x175
 800c204:	eef0 7a68 	vmov.f32	s15, s17
 800c208:	eee7 7a49 	vfms.f32	s15, s14, s18
 800c20c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c210:	edcd 7a03 	vstr	s15, [sp, #12]
 800c214:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c218:	f010 fb91 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800c21c:	7ba3      	ldrb	r3, [r4, #14]
 800c21e:	ee07 3a90 	vmov	s15, r3
 800c222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c226:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800c22a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800c234:	23fc      	movs	r3, #252	; 0xfc
 800c236:	f240 108b 	movw	r0, #395	; 0x18b
 800c23a:	2457      	movs	r4, #87	; 0x57
 800c23c:	eee7 8a49 	vfms.f32	s17, s14, s18
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800c240:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 800c2bc <CQS_chart+0x740>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800c244:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800c248:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800c2c0 <CQS_chart+0x744>
 800c24c:	edcd 7a03 	vstr	s15, [sp, #12]
 800c250:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c254:	f010 fb73 	bl	801c93e <TFT_FillRectangle>
			sprintf (buffer, "%d", GraphData[i]);
 800c258:	7872      	ldrb	r2, [r6, #1]
 800c25a:	4641      	mov	r1, r8
 800c25c:	4628      	mov	r0, r5
 800c25e:	f014 f9d7 	bl	8020610 <sprintf>
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800c262:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26e:	2b09      	cmp	r3, #9
 800c270:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800c274:	f04f 0303 	mov.w	r3, #3
 800c278:	4620      	mov	r0, r4
 800c27a:	462a      	mov	r2, r5
 800c27c:	f104 0416 	add.w	r4, r4, #22
 800c280:	b2a4      	uxth	r4, r4
 800c282:	bf94      	ite	ls
 800c284:	eddf 7a0f 	vldrls	s15, [pc, #60]	; 800c2c4 <CQS_chart+0x748>
 800c288:	eef0 7a49 	vmovhi.f32	s15, s18
 800c28c:	eee7 7a68 	vfms.f32	s15, s14, s17
 800c290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c294:	edcd 7a03 	vstr	s15, [sp, #12]
 800c298:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c29c:	f010 fe9a 	bl	801cfd4 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800c2a0:	f240 13a1 	movw	r3, #417	; 0x1a1
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d1d7      	bne.n	800c258 <CQS_chart+0x6dc>
		TFT_direction = 0x00;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	703b      	strb	r3, [r7, #0]
}
 800c2ac:	e62e      	b.n	800bf0c <CQS_chart+0x390>
 800c2ae:	bf00      	nop
 800c2b0:	200056a0 	.word	0x200056a0
 800c2b4:	437c0000 	.word	0x437c0000
 800c2b8:	43520000 	.word	0x43520000
 800c2bc:	437a0000 	.word	0x437a0000
 800c2c0:	43570000 	.word	0x43570000
 800c2c4:	43730000 	.word	0x43730000
 800c2c8:	08025309 	.word	0x08025309

0800c2cc <CQS_Draw>:

void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c2cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c2d0:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c2d2:	2363      	movs	r3, #99	; 0x63
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	4688      	mov	r8, r1
 800c2d8:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c2da:	213a      	movs	r1, #58	; 0x3a
 800c2dc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	2005      	movs	r0, #5
 800c2e4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800c2e8:	f89d 7020 	ldrb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800c2ec:	f010 fb27 	bl	801c93e <TFT_FillRectangle>
	CQS_Axes(direction);
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f7ff f877 	bl	800b3e4 <CQS_Axes>
	CQS_Axes_Text(direction);
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f7ff f9e6 	bl	800b6c8 <CQS_Axes_Text>
	CQS_chart(direction, GraphData);
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	4620      	mov	r0, r4
 800c300:	f7ff fc3c 	bl	800bb7c <CQS_chart>
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800c304:	463b      	mov	r3, r7
 800c306:	4632      	mov	r2, r6
 800c308:	4629      	mov	r1, r5
 800c30a:	4620      	mov	r0, r4
 800c30c:	b002      	add	sp, #8
 800c30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800c312:	f7ff b905 	b.w	800b520 <CQS_Axes_Measure>

0800c316 <flash_data_read_buff>:
#include "CRC_check.h"

uint64_t flash_data_read_buff(uint32_t flash_addr_buff) 
{ 
	return ( *(__IO uint64_t*) flash_addr_buff);
}
 800c316:	e9d0 0100 	ldrd	r0, r1, [r0]
 800c31a:	4770      	bx	lr

0800c31c <CRC_Check>:
uint32_t addr_i;

CRC_Check_StatusTypeDef CRC_Check(uint32_t start_flash_addr, uint32_t flash_size, uint32_t CRC_addr)
{

	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800c31c:	4b13      	ldr	r3, [pc, #76]	; (800c36c <CRC_Check+0x50>)
{
 800c31e:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c322:	4e13      	ldr	r6, [pc, #76]	; (800c370 <CRC_Check+0x54>)
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800c324:	6018      	str	r0, [r3, #0]
 800c326:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c32a:	2400      	movs	r4, #0
 800c32c:	4281      	cmp	r1, r0
 800c32e:	d811      	bhi.n	800c354 <CRC_Check+0x38>
 800c330:	b104      	cbz	r4, 800c334 <CRC_Check+0x18>
 800c332:	6018      	str	r0, [r3, #0]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800c334:	e9d2 0100 	ldrd	r0, r1, [r2]
	{
		CRC_buff += flash_data_read_buff(addr_i);
	}
	crcr_flash = flash_data_read_buff(CRC_addr);
 800c338:	4b0e      	ldr	r3, [pc, #56]	; (800c374 <CRC_Check+0x58>)
 800c33a:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800c33e:	e9d6 0100 	ldrd	r0, r1, [r6]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800c342:	e9d2 2300 	ldrd	r2, r3, [r2]
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800c346:	4299      	cmp	r1, r3
 800c348:	bf0a      	itet	eq
 800c34a:	4290      	cmpeq	r0, r2
		return	CRC_OK;
	} else
	{
		return	CRC_ERROR;
	}
};
 800c34c:	2001      	movne	r0, #1
 800c34e:	2000      	moveq	r0, #0
 800c350:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	return ( *(__IO uint64_t*) flash_addr_buff);
 800c354:	e8f0 8902 	ldrd	r8, r9, [r0], #8
		CRC_buff += flash_data_read_buff(addr_i);
 800c358:	e9d6 4500 	ldrd	r4, r5, [r6]
 800c35c:	eb14 0408 	adds.w	r4, r4, r8
 800c360:	eb45 0509 	adc.w	r5, r5, r9
 800c364:	e9c6 4500 	strd	r4, r5, [r6]
 800c368:	2401      	movs	r4, #1
 800c36a:	e7df      	b.n	800c32c <CRC_Check+0x10>
 800c36c:	20090980 	.word	0x20090980
 800c370:	20004640 	.word	0x20004640
 800c374:	20004648 	.word	0x20004648

0800c378 <calcNorm560_CRI>:
double L_i_ref ;
double u_i_ref ;
double v_i_ref ;

void calcNorm560_CRI(uint16_t CCT_measure)
{
 800c378:	b508      	push	{r3, lr}
	norm_560_CRI = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800c37a:	f7f4 f8eb 	bl	8000554 <__aeabi_i2d>
 800c37e:	a316      	add	r3, pc, #88	; (adr r3, 800c3d8 <calcNorm560_CRI+0x60>)
 800c380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c384:	f7f4 f94c 	bl	8000620 <__aeabi_dmul>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	a114      	add	r1, pc, #80	; (adr r1, 800c3e0 <calcNorm560_CRI+0x68>)
 800c38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c392:	f7f4 fa6f 	bl	8000874 <__aeabi_ddiv>
 800c396:	ec41 0b10 	vmov	d0, r0, r1
 800c39a:	f017 f979 	bl	8023690 <exp>
 800c39e:	2200      	movs	r2, #0
 800c3a0:	ec51 0b10 	vmov	r0, r1, d0
 800c3a4:	4b0a      	ldr	r3, [pc, #40]	; (800c3d0 <calcNorm560_CRI+0x58>)
 800c3a6:	f7f3 ff87 	bl	80002b8 <__aeabi_dsub>
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	a106      	add	r1, pc, #24	; (adr r1, 800c3c8 <calcNorm560_CRI+0x50>)
 800c3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3b4:	f7f4 fa5e 	bl	8000874 <__aeabi_ddiv>
 800c3b8:	f7f4 fc2a 	bl	8000c10 <__aeabi_d2f>
 800c3bc:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <calcNorm560_CRI+0x5c>)
 800c3be:	6018      	str	r0, [r3, #0]
 800c3c0:	bd08      	pop	{r3, pc}
 800c3c2:	bf00      	nop
 800c3c4:	f3af 8000 	nop.w
 800c3c8:	f9f35846 	.word	0xf9f35846
 800c3cc:	466ca5d1 	.word	0x466ca5d1
 800c3d0:	3ff00000 	.word	0x3ff00000
 800c3d4:	200909b0 	.word	0x200909b0
 800c3d8:	05ea7ab3 	.word	0x05ea7ab3
 800c3dc:	3ea2ca5d 	.word	0x3ea2ca5d
 800c3e0:	aba38759 	.word	0xaba38759
 800c3e4:	3f8d7774 	.word	0x3f8d7774

0800c3e8 <calcSref_CRI>:


float calcSref_CRI(int idx, uint16_t CCT_measure)
{
	float ans;
	if (CCT_measure < 5000)
 800c3e8:	f241 3387 	movw	r3, #4999	; 0x1387
 800c3ec:	4299      	cmp	r1, r3
{
 800c3ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	ea4f 0080 	mov.w	r0, r0, lsl #2
	if (CCT_measure < 5000)
 800c3f6:	d84e      	bhi.n	800c496 <calcSref_CRI+0xae>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c3f8:	4c39      	ldr	r4, [pc, #228]	; (800c4e0 <calcSref_CRI+0xf8>)
 800c3fa:	4404      	add	r4, r0
 800c3fc:	6820      	ldr	r0, [r4, #0]
 800c3fe:	f7f4 f8bb 	bl	8000578 <__aeabi_f2d>
 800c402:	a331      	add	r3, pc, #196	; (adr r3, 800c4c8 <calcSref_CRI+0xe0>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f7f4 f90a 	bl	8000620 <__aeabi_dmul>
 800c40c:	4606      	mov	r6, r0
 800c40e:	4628      	mov	r0, r5
 800c410:	460f      	mov	r7, r1
 800c412:	f7f4 f89f 	bl	8000554 <__aeabi_i2d>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4630      	mov	r0, r6
 800c41c:	4639      	mov	r1, r7
 800c41e:	f7f4 f8ff 	bl	8000620 <__aeabi_dmul>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	a12a      	add	r1, pc, #168	; (adr r1, 800c4d0 <calcSref_CRI+0xe8>)
 800c428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c42c:	f7f4 fa22 	bl	8000874 <__aeabi_ddiv>
 800c430:	ec41 0b10 	vmov	d0, r0, r1
 800c434:	f017 f92c 	bl	8023690 <exp>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c438:	6820      	ldr	r0, [r4, #0]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c43a:	ec57 6b10 	vmov	r6, r7, d0
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c43e:	f7f4 f89b 	bl	8000578 <__aeabi_f2d>
 800c442:	a321      	add	r3, pc, #132	; (adr r3, 800c4c8 <calcSref_CRI+0xe0>)
 800c444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c448:	f7f4 f8ea 	bl	8000620 <__aeabi_dmul>
 800c44c:	ed9f 1b22 	vldr	d1, [pc, #136]	; 800c4d8 <calcSref_CRI+0xf0>
 800c450:	ec41 0b10 	vmov	d0, r0, r1
 800c454:	f017 fa18 	bl	8023888 <pow>
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c458:	2200      	movs	r2, #0
 800c45a:	4b22      	ldr	r3, [pc, #136]	; (800c4e4 <calcSref_CRI+0xfc>)
 800c45c:	4630      	mov	r0, r6
 800c45e:	4639      	mov	r1, r7
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c460:	ed8d 0b00 	vstr	d0, [sp]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c464:	f7f3 ff28 	bl	80002b8 <__aeabi_dsub>
 800c468:	f7f4 fbd2 	bl	8000c10 <__aeabi_d2f>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c46c:	f7f4 f884 	bl	8000578 <__aeabi_f2d>
 800c470:	ed9d 0b00 	vldr	d0, [sp]
 800c474:	460b      	mov	r3, r1
 800c476:	4602      	mov	r2, r0
 800c478:	ec51 0b10 	vmov	r0, r1, d0
 800c47c:	f7f4 f9fa 	bl	8000874 <__aeabi_ddiv>
 800c480:	f7f4 fbc6 	bl	8000c10 <__aeabi_d2f>
		ans /= norm_560_CRI;
 800c484:	4b18      	ldr	r3, [pc, #96]	; (800c4e8 <calcSref_CRI+0x100>)
 800c486:	ee07 0a10 	vmov	s14, r0
 800c48a:	edd3 7a00 	vldr	s15, [r3]
 800c48e:	ee87 0a27 	vdiv.f32	s0, s14, s15
	else
	{
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
	}
	return ans;
}
 800c492:	b003      	add	sp, #12
 800c494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
 800c496:	4a15      	ldr	r2, [pc, #84]	; (800c4ec <calcSref_CRI+0x104>)
 800c498:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <calcSref_CRI+0x108>)
 800c49a:	4916      	ldr	r1, [pc, #88]	; (800c4f4 <calcSref_CRI+0x10c>)
 800c49c:	4403      	add	r3, r0
 800c49e:	4401      	add	r1, r0
 800c4a0:	4410      	add	r0, r2
 800c4a2:	4a15      	ldr	r2, [pc, #84]	; (800c4f8 <calcSref_CRI+0x110>)
 800c4a4:	ed91 7a00 	vldr	s14, [r1]
 800c4a8:	edd2 7a00 	vldr	s15, [r2]
 800c4ac:	ed90 0a00 	vldr	s0, [r0]
 800c4b0:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c4b4:	ed93 7a00 	vldr	s14, [r3]
 800c4b8:	4b10      	ldr	r3, [pc, #64]	; (800c4fc <calcSref_CRI+0x114>)
 800c4ba:	edd3 7a00 	vldr	s15, [r3]
 800c4be:	eea7 0a27 	vfma.f32	s0, s14, s15
	return ans;
 800c4c2:	e7e6      	b.n	800c492 <calcSref_CRI+0xaa>
 800c4c4:	f3af 8000 	nop.w
 800c4c8:	e826d695 	.word	0xe826d695
 800c4cc:	3e112e0b 	.word	0x3e112e0b
 800c4d0:	aba38759 	.word	0xaba38759
 800c4d4:	3f8d7774 	.word	0x3f8d7774
 800c4d8:	00000000 	.word	0x00000000
 800c4dc:	c0140000 	.word	0xc0140000
 800c4e0:	20054948 	.word	0x20054948
 800c4e4:	3ff00000 	.word	0x3ff00000
 800c4e8:	200909b0 	.word	0x200909b0
 800c4ec:	2004e93c 	.word	0x2004e93c
 800c4f0:	2005093c 	.word	0x2005093c
 800c4f4:	2004f93c 	.word	0x2004f93c
 800c4f8:	20004650 	.word	0x20004650
 800c4fc:	20004654 	.word	0x20004654

0800c500 <CRI_func>:
		double x_i_ref = 0;
		double y_i_ref = 0;
		double z_i_ref = 0;

void CRI_func(uint16_t CCT_measure, float *Rabs)
{
 800c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	ed2d 8b08 	vpush	{d8-d11}
 800c508:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800c50c:	b083      	sub	sp, #12
	int16_t Ra_temp = 0, Rall_temp = 0, R9_temp = 0;
	float s_ref_CRI[1024] = {0};
 800c50e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
{
 800c512:	900c      	str	r0, [sp, #48]	; 0x30
 800c514:	468a      	mov	sl, r1
	float s_ref_CRI[1024] = {0};
 800c516:	a822      	add	r0, sp, #136	; 0x88
 800c518:	2100      	movs	r1, #0
 800c51a:	f014 f870 	bl	80205fe <memset>
	float CRI_R_temp[1024] = {0};
 800c51e:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800c522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c526:	2100      	movs	r1, #0
 800c528:	3008      	adds	r0, #8
 800c52a:	f014 f868 	bl	80205fe <memset>

	memset(Ri_temp, 0, sizeof(Ri_temp));
 800c52e:	2278      	movs	r2, #120	; 0x78
 800c530:	2100      	movs	r1, #0
 800c532:	48c1      	ldr	r0, [pc, #772]	; (800c838 <CRI_func+0x338>)
 800c534:	f014 f863 	bl	80205fe <memset>
	double y_ref = 0;
	double z_ref = 0;
	double u_ref = 0;
	double v_ref = 0;

	if (CCT_measure < 5000)
 800c538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c53a:	f241 3387 	movw	r3, #4999	; 0x1387
 800c53e:	429a      	cmp	r2, r3
 800c540:	f200 8514 	bhi.w	800cf6c <CRI_func+0xa6c>
	{
		calcNorm560_CRI(CCT_measure);
 800c544:	4610      	mov	r0, r2
 800c546:	f7ff ff17 	bl	800c378 <calcNorm560_CRI>
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
	}
	
	
	float u_test = colorimetry_uv[0];	
 800c54a:	4bbc      	ldr	r3, [pc, #752]	; (800c83c <CRI_func+0x33c>)
	float v_test = colorimetry_uv[1];
	
	bar_CRI = 0.1;
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c54c:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800c840 <CRI_func+0x340>
	float u_test = colorimetry_uv[0];	
 800c550:	edd3 7a00 	vldr	s15, [r3]
	bar_CRI = 0.1;
 800c554:	a1b2      	add	r1, pc, #712	; (adr r1, 800c820 <CRI_func+0x320>)
 800c556:	e9d1 0100 	ldrd	r0, r1, [r1]
	float u_test = colorimetry_uv[0];	
 800c55a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
	float v_test = colorimetry_uv[1];
 800c55e:	edd3 7a01 	vldr	s15, [r3, #4]
	bar_CRI = 0.1;
 800c562:	4bb8      	ldr	r3, [pc, #736]	; (800c844 <CRI_func+0x344>)
	float v_test = colorimetry_uv[1];
 800c564:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
	bar_CRI = 0.1;
 800c568:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c56c:	210d      	movs	r1, #13
 800c56e:	2055      	movs	r0, #85	; 0x55
 800c570:	f007 f850 	bl	8013614 <GUI_Bar_Measure>
	
	for (uint16_t y = 0; y < 1024; y++){
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c574:	4bb4      	ldr	r3, [pc, #720]	; (800c848 <CRI_func+0x348>)
 800c576:	ed93 7a00 	vldr	s14, [r3]
 800c57a:	4bb4      	ldr	r3, [pc, #720]	; (800c84c <CRI_func+0x34c>)
 800c57c:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 800c580:	ecfa 6a01 	vldmia	sl!, {s13}
 800c584:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t y = 0; y < 1024; y++){
 800c588:	4552      	cmp	r2, sl
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c58a:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t y = 0; y < 1024; y++){
 800c58e:	d1f7      	bne.n	800c580 <CRI_func+0x80>
 800c590:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 800c828 <CRI_func+0x328>
 800c594:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800c598:	eeb0 8a47 	vmov.f32	s16, s14
 800c59c:	eef0 8a67 	vmov.f32	s17, s15
 800c5a0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800c5a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c5a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c5ac:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c5b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c5b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	9310      	str	r3, [sp, #64]	; 0x40
 800c5be:	9311      	str	r3, [sp, #68]	; 0x44
	}
	
	for (uint8_t i = 0; i < 15; i++)
	{
		bar_CRI += 0.05;
 800c5c0:	4ca0      	ldr	r4, [pc, #640]	; (800c844 <CRI_func+0x344>)
		for (int j = 0; j < 1024; j++)
		{
			if (i == 0)
			{
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c5c2:	4fa3      	ldr	r7, [pc, #652]	; (800c850 <CRI_func+0x350>)
 800c5c4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800c84c <CRI_func+0x34c>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c5c8:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800c878 <CRI_func+0x378>
		bar_CRI += 0.05;
 800c5cc:	a398      	add	r3, pc, #608	; (adr r3, 800c830 <CRI_func+0x330>)
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c5d6:	f7f3 fe71 	bl	80002bc <__adddf3>
 800c5da:	e9c4 0100 	strd	r0, r1, [r4]
		GUI_Bar_Measure(85, 13, bar_CRI);
 800c5de:	f7f4 fb17 	bl	8000c10 <__aeabi_d2f>
 800c5e2:	210d      	movs	r1, #13
 800c5e4:	ee00 0a10 	vmov	s0, r0
 800c5e8:	2055      	movs	r0, #85	; 0x55
 800c5ea:	f007 f813 	bl	8013614 <GUI_Bar_Measure>
		 x_i_test = 0;
 800c5ee:	4b99      	ldr	r3, [pc, #612]	; (800c854 <CRI_func+0x354>)
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c5f0:	4899      	ldr	r0, [pc, #612]	; (800c858 <CRI_func+0x358>)
		 x_i_test = 0;
 800c5f2:	ed83 8b00 	vstr	d8, [r3]
		 y_i_test = 0;
 800c5f6:	4b99      	ldr	r3, [pc, #612]	; (800c85c <CRI_func+0x35c>)
 800c5f8:	ed83 8b00 	vstr	d8, [r3]
		 z_i_test = 0;
 800c5fc:	4b98      	ldr	r3, [pc, #608]	; (800c860 <CRI_func+0x360>)
 800c5fe:	ed83 8b00 	vstr	d8, [r3]
		 x_i_ref = 0;
 800c602:	4b98      	ldr	r3, [pc, #608]	; (800c864 <CRI_func+0x364>)
 800c604:	ed83 8b00 	vstr	d8, [r3]
		 y_i_ref = 0;
 800c608:	4b97      	ldr	r3, [pc, #604]	; (800c868 <CRI_func+0x368>)
 800c60a:	ed83 8b00 	vstr	d8, [r3]
		 z_i_ref = 0;
 800c60e:	4b97      	ldr	r3, [pc, #604]	; (800c86c <CRI_func+0x36c>)
 800c610:	ed83 8b00 	vstr	d8, [r3]
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c614:	9b00      	ldr	r3, [sp, #0]
 800c616:	f50d 5284 	add.w	r2, sp, #4224	; 0x1080
 800c61a:	3208      	adds	r2, #8
 800c61c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c620:	eb00 3003 	add.w	r0, r0, r3, lsl #12
 800c624:	f002 fdd4 	bl	800f1d0 <Calibration_Load_Pack>
 800c628:	2400      	movs	r4, #0
		for (int j = 0; j < 1024; j++)
 800c62a:	4625      	mov	r5, r4
 800c62c:	f89d 3000 	ldrb.w	r3, [sp]
 800c630:	930d      	str	r3, [sp, #52]	; 0x34
			if (i == 0)
 800c632:	9b00      	ldr	r3, [sp, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d150      	bne.n	800c6da <CRI_func+0x1da>
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c638:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c63a:	4628      	mov	r0, r5
 800c63c:	f7ff fed4 	bl	800c3e8 <calcSref_CRI>
 800c640:	ab22      	add	r3, sp, #136	; 0x88
 800c642:	4423      	add	r3, r4
 800c644:	ed83 0a00 	vstr	s0, [r3]
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c648:	19e3      	adds	r3, r4, r7
 800c64a:	edd3 9a00 	vldr	s19, [r3]
 800c64e:	eb09 0304 	add.w	r3, r9, r4
 800c652:	edd3 7a00 	vldr	s15, [r3]
 800c656:	ee69 7aa7 	vmul.f32	s15, s19, s15
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c65a:	eeb0 9a40 	vmov.f32	s18, s0
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c65e:	ee17 0a90 	vmov	r0, s15
 800c662:	f7f3 ff89 	bl	8000578 <__aeabi_f2d>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c66e:	f7f3 fe25 	bl	80002bc <__adddf3>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c672:	eb04 0308 	add.w	r3, r4, r8
 800c676:	edd3 7a00 	vldr	s15, [r3]
 800c67a:	ee69 7a27 	vmul.f32	s15, s18, s15
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c67e:	e9cd 0104 	strd	r0, r1, [sp, #16]
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c682:	ee17 0a90 	vmov	r0, s15
 800c686:	f7f3 ff77 	bl	8000578 <__aeabi_f2d>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c692:	f7f3 fe13 	bl	80002bc <__adddf3>
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c696:	ee69 7a29 	vmul.f32	s15, s18, s19
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c69a:	e9cd 0108 	strd	r0, r1, [sp, #32]
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c69e:	ee17 0a90 	vmov	r0, s15
 800c6a2:	f7f3 ff69 	bl	8000578 <__aeabi_f2d>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6ae:	f7f3 fe05 	bl	80002bc <__adddf3>
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c6b2:	4b6f      	ldr	r3, [pc, #444]	; (800c870 <CRI_func+0x370>)
 800c6b4:	4423      	add	r3, r4
 800c6b6:	edd3 7a00 	vldr	s15, [r3]
 800c6ba:	ee69 7a27 	vmul.f32	s15, s18, s15
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c6be:	e9cd 0106 	strd	r0, r1, [sp, #24]
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c6c2:	ee17 0a90 	vmov	r0, s15
 800c6c6:	f7f3 ff57 	bl	8000578 <__aeabi_f2d>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c6d2:	f7f3 fdf3 	bl	80002bc <__adddf3>
 800c6d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			}

			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c6da:	f50d 5384 	add.w	r3, sp, #4224	; 0x1080
 800c6de:	3308      	adds	r3, #8
 800c6e0:	4423      	add	r3, r4
 800c6e2:	ed93 9a00 	vldr	s18, [r3]
 800c6e6:	4e5b      	ldr	r6, [pc, #364]	; (800c854 <CRI_func+0x354>)
 800c6e8:	eb09 0304 	add.w	r3, r9, r4
 800c6ec:	edd3 9a00 	vldr	s19, [r3]
 800c6f0:	eb04 0308 	add.w	r3, r4, r8
 800c6f4:	ee69 9a29 	vmul.f32	s19, s18, s19
 800c6f8:	ed93 ba00 	vldr	s22, [r3]
 800c6fc:	ee69 7a8b 	vmul.f32	s15, s19, s22
		for (int j = 0; j < 1024; j++)
 800c700:	3501      	adds	r5, #1
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c702:	ee17 0a90 	vmov	r0, s15
 800c706:	f7f3 ff37 	bl	8000578 <__aeabi_f2d>
 800c70a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c70e:	f7f3 fdd5 	bl	80002bc <__adddf3>
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c712:	19e3      	adds	r3, r4, r7
 800c714:	edd3 aa00 	vldr	s21, [r3]
 800c718:	ee69 7aaa 	vmul.f32	s15, s19, s21
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c71c:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c720:	4e4e      	ldr	r6, [pc, #312]	; (800c85c <CRI_func+0x35c>)
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c722:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c726:	ee17 0a90 	vmov	r0, s15
 800c72a:	f7f3 ff25 	bl	8000578 <__aeabi_f2d>
 800c72e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c732:	f7f3 fdc3 	bl	80002bc <__adddf3>
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c736:	4b4e      	ldr	r3, [pc, #312]	; (800c870 <CRI_func+0x370>)
 800c738:	4423      	add	r3, r4
 800c73a:	ed93 aa00 	vldr	s20, [r3]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c73e:	4682      	mov	sl, r0
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c740:	ee69 7a8a 	vmul.f32	s15, s19, s20
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c744:	468b      	mov	fp, r1
 800c746:	e9c6 ab00 	strd	sl, fp, [r6]
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c74a:	4e45      	ldr	r6, [pc, #276]	; (800c860 <CRI_func+0x360>)
 800c74c:	ee17 0a90 	vmov	r0, s15
 800c750:	f7f3 ff12 	bl	8000578 <__aeabi_f2d>
 800c754:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c758:	f7f3 fdb0 	bl	80002bc <__adddf3>

			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c75c:	ab22      	add	r3, sp, #136	; 0x88
 800c75e:	4423      	add	r3, r4
 800c760:	edd3 7a00 	vldr	s15, [r3]
 800c764:	ee29 9a27 	vmul.f32	s18, s18, s15
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c768:	e9c6 0100 	strd	r0, r1, [r6]
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c76c:	ee6b 7a09 	vmul.f32	s15, s22, s18
 800c770:	4e3c      	ldr	r6, [pc, #240]	; (800c864 <CRI_func+0x364>)
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c772:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c776:	ee17 0a90 	vmov	r0, s15
 800c77a:	f7f3 fefd 	bl	8000578 <__aeabi_f2d>
 800c77e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c782:	f7f3 fd9b 	bl	80002bc <__adddf3>
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c786:	ee6a 7a89 	vmul.f32	s15, s21, s18
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c78a:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c78e:	4e36      	ldr	r6, [pc, #216]	; (800c868 <CRI_func+0x368>)
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c790:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c794:	ee17 0a90 	vmov	r0, s15
 800c798:	f7f3 feee 	bl	8000578 <__aeabi_f2d>
 800c79c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7a0:	f7f3 fd8c 	bl	80002bc <__adddf3>
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c7a4:	ee6a 7a09 	vmul.f32	s15, s20, s18
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c7a8:	e9c6 0100 	strd	r0, r1, [r6]
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c7ac:	4e2f      	ldr	r6, [pc, #188]	; (800c86c <CRI_func+0x36c>)
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c7ae:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c7b2:	ee17 0a90 	vmov	r0, s15
 800c7b6:	f7f3 fedf 	bl	8000578 <__aeabi_f2d>
 800c7ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7be:	f7f3 fd7d 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800c7c2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c7c6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c7ca:	e9c6 0100 	strd	r0, r1, [r6]
 800c7ce:	f104 0404 	add.w	r4, r4, #4
		for (int j = 0; j < 1024; j++)
 800c7d2:	f47f af2b 	bne.w	800c62c <CRI_func+0x12c>
		}
		if (i == 0) 
 800c7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f040 8089 	bne.w	800c8f0 <CRI_func+0x3f0>
		{
			k_ref = 100 / y_ref;
 800c7de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	4923      	ldr	r1, [pc, #140]	; (800c874 <CRI_func+0x374>)
 800c7e6:	f7f4 f845 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800c7ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			k_ref = 100 / y_ref;
 800c7ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
			k_test = 100 / k_test;
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	491f      	ldr	r1, [pc, #124]	; (800c874 <CRI_func+0x374>)
 800c7f6:	f7f4 f83d 	bl	8000874 <__aeabi_ddiv>
			x_ref *= k_ref;
 800c7fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_test = 100 / k_test;
 800c7fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
			x_ref *= k_ref;
 800c802:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c806:	f7f3 ff0b 	bl	8000620 <__aeabi_dmul>
			y_ref *= k_ref;
 800c80a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			x_ref *= k_ref;
 800c80e:	e9cd 0108 	strd	r0, r1, [sp, #32]
			y_ref *= k_ref;
 800c812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c816:	f7f3 ff03 	bl	8000620 <__aeabi_dmul>
			z_ref *= k_ref;
 800c81a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c81e:	e02d      	b.n	800c87c <CRI_func+0x37c>
 800c820:	9999999a 	.word	0x9999999a
 800c824:	3fb99999 	.word	0x3fb99999
	...
 800c830:	9999999a 	.word	0x9999999a
 800c834:	3fa99999 	.word	0x3fa99999
 800c838:	20090a10 	.word	0x20090a10
 800c83c:	2008f530 	.word	0x2008f530
 800c840:	3dcccccd 	.word	0x3dcccccd
 800c844:	200909c0 	.word	0x200909c0
 800c848:	200958fc 	.word	0x200958fc
 800c84c:	2000466c 	.word	0x2000466c
 800c850:	20052940 	.word	0x20052940
 800c854:	20005678 	.word	0x20005678
 800c858:	0811b040 	.word	0x0811b040
 800c85c:	20005688 	.word	0x20005688
 800c860:	20005698 	.word	0x20005698
 800c864:	20005670 	.word	0x20005670
 800c868:	20005680 	.word	0x20005680
 800c86c:	20005690 	.word	0x20005690
 800c870:	2008d514 	.word	0x2008d514
 800c874:	40590000 	.word	0x40590000
 800c878:	2008a514 	.word	0x2008a514
			y_ref *= k_ref;
 800c87c:	e9cd 0106 	strd	r0, r1, [sp, #24]
			z_ref *= k_ref;
 800c880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c884:	f7f3 fecc 	bl	8000620 <__aeabi_dmul>
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c888:	2200      	movs	r2, #0
			z_ref *= k_ref;
 800c88a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c88e:	4bb7      	ldr	r3, [pc, #732]	; (800cb6c <CRI_func+0x66c>)
 800c890:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c894:	f7f3 fec4 	bl	8000620 <__aeabi_dmul>
 800c898:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c89c:	f7f3 fd0e 	bl	80002bc <__adddf3>
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	460d      	mov	r5, r1
 800c8a6:	4bb2      	ldr	r3, [pc, #712]	; (800cb70 <CRI_func+0x670>)
 800c8a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c8ac:	f7f3 feb8 	bl	8000620 <__aeabi_dmul>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	f7f3 fd00 	bl	80002bc <__adddf3>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	4bac      	ldr	r3, [pc, #688]	; (800cb74 <CRI_func+0x674>)
 800c8c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8c8:	f7f3 feaa 	bl	8000620 <__aeabi_dmul>
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	462b      	mov	r3, r5
 800c8d0:	f7f3 ffd0 	bl	8000874 <__aeabi_ddiv>
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c8d4:	2200      	movs	r2, #0
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c8d6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c8da:	4ba7      	ldr	r3, [pc, #668]	; (800cb78 <CRI_func+0x678>)
 800c8dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8e0:	f7f3 fe9e 	bl	8000620 <__aeabi_dmul>
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	462b      	mov	r3, r5
 800c8e8:	f7f3 ffc4 	bl	8000874 <__aeabi_ddiv>
 800c8ec:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

		}	
		x_i_test *= k_test;	
 800c8f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c8f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8f8:	f7f3 fe92 	bl	8000620 <__aeabi_dmul>
 800c8fc:	4b9f      	ldr	r3, [pc, #636]	; (800cb7c <CRI_func+0x67c>)
 800c8fe:	4680      	mov	r8, r0
 800c900:	4689      	mov	r9, r1
 800c902:	e9c3 8900 	strd	r8, r9, [r3]
		y_i_test *= k_test;
 800c906:	4652      	mov	r2, sl
 800c908:	465b      	mov	r3, fp
 800c90a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c90e:	f7f3 fe87 	bl	8000620 <__aeabi_dmul>
 800c912:	4b9b      	ldr	r3, [pc, #620]	; (800cb80 <CRI_func+0x680>)
 800c914:	4682      	mov	sl, r0
 800c916:	468b      	mov	fp, r1
 800c918:	e9c3 ab00 	strd	sl, fp, [r3]
		z_i_test *= k_test;
 800c91c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c920:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c924:	f7f3 fe7c 	bl	8000620 <__aeabi_dmul>
 800c928:	4b96      	ldr	r3, [pc, #600]	; (800cb84 <CRI_func+0x684>)
 800c92a:	4604      	mov	r4, r0
 800c92c:	460d      	mov	r5, r1
 800c92e:	e9c3 4500 	strd	r4, r5, [r3]
		
		x_i_ref *= k_ref;
 800c932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c936:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c93a:	f7f3 fe71 	bl	8000620 <__aeabi_dmul>
 800c93e:	4b92      	ldr	r3, [pc, #584]	; (800cb88 <CRI_func+0x688>)
 800c940:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800c944:	e9c3 0100 	strd	r0, r1, [r3]
		y_i_ref *= k_ref;
 800c948:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c950:	f7f3 fe66 	bl	8000620 <__aeabi_dmul>
 800c954:	4b8d      	ldr	r3, [pc, #564]	; (800cb8c <CRI_func+0x68c>)
 800c956:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c95a:	e9c3 0100 	strd	r0, r1, [r3]
		z_i_ref *= k_ref;	
 800c95e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c966:	f7f3 fe5b 	bl	8000620 <__aeabi_dmul>
 800c96a:	4b89      	ldr	r3, [pc, #548]	; (800cb90 <CRI_func+0x690>)
 800c96c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800c970:	e9c3 0100 	strd	r0, r1, [r3]
	
		 u_test_s = 4 * x_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c974:	2200      	movs	r2, #0
 800c976:	4b7d      	ldr	r3, [pc, #500]	; (800cb6c <CRI_func+0x66c>)
 800c978:	4650      	mov	r0, sl
 800c97a:	4659      	mov	r1, fp
 800c97c:	f7f3 fe50 	bl	8000620 <__aeabi_dmul>
 800c980:	4642      	mov	r2, r8
 800c982:	464b      	mov	r3, r9
 800c984:	f7f3 fc9a 	bl	80002bc <__adddf3>
 800c988:	2200      	movs	r2, #0
 800c98a:	4606      	mov	r6, r0
 800c98c:	460f      	mov	r7, r1
 800c98e:	4b78      	ldr	r3, [pc, #480]	; (800cb70 <CRI_func+0x670>)
 800c990:	4620      	mov	r0, r4
 800c992:	4629      	mov	r1, r5
 800c994:	f7f3 fe44 	bl	8000620 <__aeabi_dmul>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	4630      	mov	r0, r6
 800c99e:	4639      	mov	r1, r7
 800c9a0:	f7f3 fc8c 	bl	80002bc <__adddf3>
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	460d      	mov	r5, r1
 800c9aa:	4b72      	ldr	r3, [pc, #456]	; (800cb74 <CRI_func+0x674>)
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	4649      	mov	r1, r9
 800c9b0:	f7f3 fe36 	bl	8000620 <__aeabi_dmul>
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	f7f3 ff5c 	bl	8000874 <__aeabi_ddiv>
 800c9bc:	4b75      	ldr	r3, [pc, #468]	; (800cb94 <CRI_func+0x694>)
 800c9be:	4680      	mov	r8, r0
 800c9c0:	4689      	mov	r9, r1
 800c9c2:	e9c3 8900 	strd	r8, r9, [r3]
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	4b6b      	ldr	r3, [pc, #428]	; (800cb78 <CRI_func+0x678>)
 800c9ca:	4650      	mov	r0, sl
 800c9cc:	4659      	mov	r1, fp
 800c9ce:	f7f3 fe27 	bl	8000620 <__aeabi_dmul>
 800c9d2:	4622      	mov	r2, r4
 800c9d4:	462b      	mov	r3, r5
 800c9d6:	f7f3 ff4d 	bl	8000874 <__aeabi_ddiv>
 800c9da:	4b6f      	ldr	r3, [pc, #444]	; (800cb98 <CRI_func+0x698>)
 800c9dc:	4606      	mov	r6, r0
 800c9de:	460f      	mov	r7, r1
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c9e0:	ec4b ab10 	vmov	d0, sl, fp
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c9e4:	e9c3 6700 	strd	r6, r7, [r3]
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c9e8:	f016 fd12 	bl	8023410 <cbrt>
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	ec51 0b10 	vmov	r0, r1, d0
 800c9f2:	4b6a      	ldr	r3, [pc, #424]	; (800cb9c <CRI_func+0x69c>)
 800c9f4:	f7f3 fe14 	bl	8000620 <__aeabi_dmul>
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	4b69      	ldr	r3, [pc, #420]	; (800cba0 <CRI_func+0x6a0>)
 800c9fc:	f7f3 fc5c 	bl	80002b8 <__aeabi_dsub>
 800ca00:	4b68      	ldr	r3, [pc, #416]	; (800cba4 <CRI_func+0x6a4>)
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800ca02:	2200      	movs	r2, #0
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800ca04:	e9c3 0100 	strd	r0, r1, [r3]
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800ca08:	4b67      	ldr	r3, [pc, #412]	; (800cba8 <CRI_func+0x6a8>)
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800ca0a:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800ca0e:	f7f3 fe07 	bl	8000620 <__aeabi_dmul>
 800ca12:	4604      	mov	r4, r0
 800ca14:	9820      	ldr	r0, [sp, #128]	; 0x80
 800ca16:	460d      	mov	r5, r1
 800ca18:	f7f3 fdae 	bl	8000578 <__aeabi_f2d>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	460b      	mov	r3, r1
 800ca20:	4640      	mov	r0, r8
 800ca22:	4649      	mov	r1, r9
 800ca24:	f7f3 fc48 	bl	80002b8 <__aeabi_dsub>
 800ca28:	4622      	mov	r2, r4
 800ca2a:	462b      	mov	r3, r5
 800ca2c:	f7f3 fdf8 	bl	8000620 <__aeabi_dmul>
 800ca30:	4b5e      	ldr	r3, [pc, #376]	; (800cbac <CRI_func+0x6ac>)
 800ca32:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800ca36:	e9c3 0100 	strd	r0, r1, [r3]
		 v_i_test = 13 * L_i_test * (v_test_s - v_test);
 800ca3a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800ca3c:	f7f3 fd9c 	bl	8000578 <__aeabi_f2d>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4630      	mov	r0, r6
 800ca46:	4639      	mov	r1, r7
 800ca48:	f7f3 fc36 	bl	80002b8 <__aeabi_dsub>
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	462b      	mov	r3, r5
 800ca50:	f7f3 fde6 	bl	8000620 <__aeabi_dmul>
 800ca54:	4b56      	ldr	r3, [pc, #344]	; (800cbb0 <CRI_func+0x6b0>)
 800ca56:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800ca5a:	e9c3 0100 	strd	r0, r1, [r3]

		 u_ref_s = 4 * x_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800ca5e:	2200      	movs	r2, #0
 800ca60:	4b42      	ldr	r3, [pc, #264]	; (800cb6c <CRI_func+0x66c>)
 800ca62:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ca66:	f7f3 fddb 	bl	8000620 <__aeabi_dmul>
 800ca6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ca6e:	f7f3 fc25 	bl	80002bc <__adddf3>
 800ca72:	2200      	movs	r2, #0
 800ca74:	4604      	mov	r4, r0
 800ca76:	460d      	mov	r5, r1
 800ca78:	4b3d      	ldr	r3, [pc, #244]	; (800cb70 <CRI_func+0x670>)
 800ca7a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800ca7e:	f7f3 fdcf 	bl	8000620 <__aeabi_dmul>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4620      	mov	r0, r4
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7f3 fc17 	bl	80002bc <__adddf3>
 800ca8e:	2200      	movs	r2, #0
 800ca90:	4606      	mov	r6, r0
 800ca92:	460f      	mov	r7, r1
 800ca94:	4b37      	ldr	r3, [pc, #220]	; (800cb74 <CRI_func+0x674>)
 800ca96:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800ca9a:	f7f3 fdc1 	bl	8000620 <__aeabi_dmul>
 800ca9e:	4632      	mov	r2, r6
 800caa0:	463b      	mov	r3, r7
 800caa2:	f7f3 fee7 	bl	8000874 <__aeabi_ddiv>
 800caa6:	4b43      	ldr	r3, [pc, #268]	; (800cbb4 <CRI_func+0x6b4>)
 800caa8:	4604      	mov	r4, r0
 800caaa:	460d      	mov	r5, r1
 800caac:	e9c3 4500 	strd	r4, r5, [r3]
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800cab0:	2200      	movs	r2, #0
 800cab2:	4b31      	ldr	r3, [pc, #196]	; (800cb78 <CRI_func+0x678>)
 800cab4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cab8:	f7f3 fdb2 	bl	8000620 <__aeabi_dmul>
 800cabc:	4632      	mov	r2, r6
 800cabe:	463b      	mov	r3, r7
 800cac0:	f7f3 fed8 	bl	8000874 <__aeabi_ddiv>
 800cac4:	4b3c      	ldr	r3, [pc, #240]	; (800cbb8 <CRI_func+0x6b8>)
 800cac6:	4682      	mov	sl, r0
 800cac8:	468b      	mov	fp, r1
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800caca:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800cace:	e9c3 ab00 	strd	sl, fp, [r3]
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800cad2:	f016 fc9d 	bl	8023410 <cbrt>
 800cad6:	2200      	movs	r2, #0
 800cad8:	ec51 0b10 	vmov	r0, r1, d0
 800cadc:	4b2f      	ldr	r3, [pc, #188]	; (800cb9c <CRI_func+0x69c>)
 800cade:	f7f3 fd9f 	bl	8000620 <__aeabi_dmul>
 800cae2:	2200      	movs	r2, #0
 800cae4:	4b2e      	ldr	r3, [pc, #184]	; (800cba0 <CRI_func+0x6a0>)
 800cae6:	f7f3 fbe7 	bl	80002b8 <__aeabi_dsub>
 800caea:	4b34      	ldr	r3, [pc, #208]	; (800cbbc <CRI_func+0x6bc>)
 800caec:	4606      	mov	r6, r0
 800caee:	460f      	mov	r7, r1
 800caf0:	e9c3 6700 	strd	r6, r7, [r3]
		 u_i_ref = 13 * L_i_ref * (u_ref_s - u_ref);
 800caf4:	2200      	movs	r2, #0
 800caf6:	4b2c      	ldr	r3, [pc, #176]	; (800cba8 <CRI_func+0x6a8>)
 800caf8:	f7f3 fd92 	bl	8000620 <__aeabi_dmul>
 800cafc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cb00:	4680      	mov	r8, r0
 800cb02:	4689      	mov	r9, r1
 800cb04:	4620      	mov	r0, r4
 800cb06:	4629      	mov	r1, r5
 800cb08:	f7f3 fbd6 	bl	80002b8 <__aeabi_dsub>
 800cb0c:	4642      	mov	r2, r8
 800cb0e:	464b      	mov	r3, r9
 800cb10:	f7f3 fd86 	bl	8000620 <__aeabi_dmul>
 800cb14:	4b2a      	ldr	r3, [pc, #168]	; (800cbc0 <CRI_func+0x6c0>)
 800cb16:	4604      	mov	r4, r0
 800cb18:	460d      	mov	r5, r1
 800cb1a:	e9c3 4500 	strd	r4, r5, [r3]
		 v_i_ref = 13 * L_i_ref * (v_ref_s - v_ref);
 800cb1e:	4650      	mov	r0, sl
 800cb20:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cb24:	4659      	mov	r1, fp
 800cb26:	f7f3 fbc7 	bl	80002b8 <__aeabi_dsub>
 800cb2a:	4642      	mov	r2, r8
 800cb2c:	464b      	mov	r3, r9
 800cb2e:	f7f3 fd77 	bl	8000620 <__aeabi_dmul>
 800cb32:	4b24      	ldr	r3, [pc, #144]	; (800cbc4 <CRI_func+0x6c4>)
 800cb34:	4680      	mov	r8, r0
 800cb36:	4689      	mov	r9, r1
 800cb38:	e9c3 8900 	strd	r8, r9, [r3]

		 delta_L = L_i_ref - L_i_test;
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800cb42:	4639      	mov	r1, r7
 800cb44:	f7f3 fbb8 	bl	80002b8 <__aeabi_dsub>
 800cb48:	4b1f      	ldr	r3, [pc, #124]	; (800cbc8 <CRI_func+0x6c8>)
 800cb4a:	4606      	mov	r6, r0
 800cb4c:	460f      	mov	r7, r1
 800cb4e:	e9c3 6700 	strd	r6, r7, [r3]
		 delta_u = u_i_ref - u_i_test;
 800cb52:	4620      	mov	r0, r4
 800cb54:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800cb58:	4629      	mov	r1, r5
 800cb5a:	f7f3 fbad 	bl	80002b8 <__aeabi_dsub>
 800cb5e:	4b1b      	ldr	r3, [pc, #108]	; (800cbcc <CRI_func+0x6cc>)
 800cb60:	4604      	mov	r4, r0
 800cb62:	460d      	mov	r5, r1
 800cb64:	e9c3 4500 	strd	r4, r5, [r3]
		 delta_v = v_i_ref - v_i_test;	
 800cb68:	4640      	mov	r0, r8
 800cb6a:	e031      	b.n	800cbd0 <CRI_func+0x6d0>
 800cb6c:	402e0000 	.word	0x402e0000
 800cb70:	40080000 	.word	0x40080000
 800cb74:	40100000 	.word	0x40100000
 800cb78:	40180000 	.word	0x40180000
 800cb7c:	20005678 	.word	0x20005678
 800cb80:	20005688 	.word	0x20005688
 800cb84:	20005698 	.word	0x20005698
 800cb88:	20005670 	.word	0x20005670
 800cb8c:	20005680 	.word	0x20005680
 800cb90:	20005690 	.word	0x20005690
 800cb94:	200909e0 	.word	0x200909e0
 800cb98:	20090990 	.word	0x20090990
 800cb9c:	40390000 	.word	0x40390000
 800cba0:	40310000 	.word	0x40310000
 800cba4:	20090a08 	.word	0x20090a08
 800cba8:	402a0000 	.word	0x402a0000
 800cbac:	20090998 	.word	0x20090998
 800cbb0:	200909d8 	.word	0x200909d8
 800cbb4:	20090a00 	.word	0x20090a00
 800cbb8:	200909a0 	.word	0x200909a0
 800cbbc:	200909e8 	.word	0x200909e8
 800cbc0:	200909b8 	.word	0x200909b8
 800cbc4:	20090988 	.word	0x20090988
 800cbc8:	200909d0 	.word	0x200909d0
 800cbcc:	200909c8 	.word	0x200909c8
 800cbd0:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800cbd4:	4649      	mov	r1, r9
 800cbd6:	f7f3 fb6f 	bl	80002b8 <__aeabi_dsub>
 800cbda:	4bd5      	ldr	r3, [pc, #852]	; (800cf30 <CRI_func+0xa30>)
 800cbdc:	4680      	mov	r8, r0
 800cbde:	4689      	mov	r9, r1
		
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800cbe0:	4632      	mov	r2, r6
		 delta_v = v_i_ref - v_i_test;	
 800cbe2:	e9c3 8900 	strd	r8, r9, [r3]
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	463b      	mov	r3, r7
 800cbea:	4639      	mov	r1, r7
 800cbec:	f7f3 fd18 	bl	8000620 <__aeabi_dmul>
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	460f      	mov	r7, r1
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7f3 fd10 	bl	8000620 <__aeabi_dmul>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	4630      	mov	r0, r6
 800cc06:	4639      	mov	r1, r7
 800cc08:	f7f3 fb58 	bl	80002bc <__adddf3>
 800cc0c:	4642      	mov	r2, r8
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	464b      	mov	r3, r9
 800cc14:	4640      	mov	r0, r8
 800cc16:	4649      	mov	r1, r9
 800cc18:	f7f3 fd02 	bl	8000620 <__aeabi_dmul>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	460b      	mov	r3, r1
 800cc20:	4620      	mov	r0, r4
 800cc22:	4629      	mov	r1, r5
 800cc24:	f7f3 fb4a 	bl	80002bc <__adddf3>
 800cc28:	ec41 0b10 	vmov	d0, r0, r1
 800cc2c:	f016 ffa4 	bl	8023b78 <sqrt>
 800cc30:	4bc0      	ldr	r3, [pc, #768]	; (800cf34 <CRI_func+0xa34>)
 800cc32:	ec51 0b10 	vmov	r0, r1, d0
 800cc36:	ed83 0b00 	vstr	d0, [r3]
		Ri_temp[i] = 100 - 4.6*delta_E_CRI;
 800cc3a:	a39b      	add	r3, pc, #620	; (adr r3, 800cea8 <CRI_func+0x9a8>)
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f7f3 fcee 	bl	8000620 <__aeabi_dmul>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	2000      	movs	r0, #0
 800cc4a:	49bb      	ldr	r1, [pc, #748]	; (800cf38 <CRI_func+0xa38>)
 800cc4c:	f7f3 fb34 	bl	80002b8 <__aeabi_dsub>
 800cc50:	9a00      	ldr	r2, [sp, #0]
 800cc52:	4bba      	ldr	r3, [pc, #744]	; (800cf3c <CRI_func+0xa3c>)
 800cc54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc58:	e9c3 0100 	strd	r0, r1, [r3]
		Ri[i] = (int8_t)Ri_temp[i];
 800cc5c:	f7f3 ff90 	bl	8000b80 <__aeabi_d2iz>
 800cc60:	4bb7      	ldr	r3, [pc, #732]	; (800cf40 <CRI_func+0xa40>)
 800cc62:	9a00      	ldr	r2, [sp, #0]
 800cc64:	b240      	sxtb	r0, r0
 800cc66:	54d0      	strb	r0, [r2, r3]
		
		if (i < 8)
 800cc68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc6a:	2b07      	cmp	r3, #7
 800cc6c:	f200 8111 	bhi.w	800ce92 <CRI_func+0x992>
			Ra_temp += Ri[i];
 800cc70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc72:	4403      	add	r3, r0
 800cc74:	b21b      	sxth	r3, r3
 800cc76:	9311      	str	r3, [sp, #68]	; 0x44
		if (i == 8)
			R9 = Ri[i];
		if(i < 14)
 800cc78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc7a:	2b0e      	cmp	r3, #14
 800cc7c:	f040 810f 	bne.w	800ce9e <CRI_func+0x99e>
			Rall_temp += Ri[i];
		
		memset(CRI_R_temp, 0, sizeof(CRI_R_temp));		
 800cc80:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800cc84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc88:	2100      	movs	r1, #0
 800cc8a:	3008      	adds	r0, #8
 800cc8c:	f013 fcb7 	bl	80205fe <memset>
 800cc90:	9b00      	ldr	r3, [sp, #0]
 800cc92:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 15; i++)
 800cc94:	2b0f      	cmp	r3, #15
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	f47f ac92 	bne.w	800c5c0 <CRI_func+0xc0>
	}
	
	bar_CRI = 0.9;
 800cc9c:	a384      	add	r3, pc, #528	; (adr r3, 800ceb0 <CRI_func+0x9b0>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	4ca8      	ldr	r4, [pc, #672]	; (800cf44 <CRI_func+0xa44>)
	GUI_Bar_Measure(85, 13, bar_CRI);
 800cca4:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800cf48 <CRI_func+0xa48>
 800cca8:	210d      	movs	r1, #13
 800ccaa:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 0.9;
 800ccac:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800ccb0:	f006 fcb0 	bl	8013614 <GUI_Bar_Measure>
	
	Rall_temp /= 14;
 800ccb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	Rall = (int8_t)Rall_temp;
	
	Ra_temp /= 8;
 800ccb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
	Rall_temp /= 14;
 800ccb8:	200e      	movs	r0, #14
 800ccba:	fb93 f0f0 	sdiv	r0, r3, r0
	Rall = (int8_t)Rall_temp;
 800ccbe:	4ba3      	ldr	r3, [pc, #652]	; (800cf4c <CRI_func+0xa4c>)
 800ccc0:	7018      	strb	r0, [r3, #0]
	Ra_temp /= 8;
 800ccc2:	2308      	movs	r3, #8
 800ccc4:	fb92 f3f3 	sdiv	r3, r2, r3
	Ra = (int8_t)Ra_temp;
 800ccc8:	4aa1      	ldr	r2, [pc, #644]	; (800cf50 <CRI_func+0xa50>)
 800ccca:	7013      	strb	r3, [r2, #0]
	
	bar_CRI = 1.0;
 800cccc:	4ba1      	ldr	r3, [pc, #644]	; (800cf54 <CRI_func+0xa54>)
 800ccce:	2200      	movs	r2, #0
	GUI_Bar_Measure(85, 13, bar_CRI);
 800ccd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ccd4:	210d      	movs	r1, #13
 800ccd6:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 1.0;
 800ccd8:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800ccdc:	f006 fc9a 	bl	8013614 <GUI_Bar_Measure>
 800cce0:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 800cce4:	b003      	add	sp, #12
 800cce6:	ecbd 8b08 	vpop	{d8-d11}
 800ccea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ccee:	ee68 8a08 	vmul.f32	s17, s16, s16
 800ccf2:	ee68 7a28 	vmul.f32	s15, s16, s17
 800ccf6:	ee17 0a90 	vmov	r0, s15
 800ccfa:	f7f3 fc3d 	bl	8000578 <__aeabi_f2d>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	a16d      	add	r1, pc, #436	; (adr r1, 800ceb8 <CRI_func+0x9b8>)
 800cd04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd08:	f7f3 fdb4 	bl	8000874 <__aeabi_ddiv>
 800cd0c:	4606      	mov	r6, r0
 800cd0e:	ee18 0a90 	vmov	r0, s17
 800cd12:	460f      	mov	r7, r1
 800cd14:	f7f3 fc30 	bl	8000578 <__aeabi_f2d>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	a168      	add	r1, pc, #416	; (adr r1, 800cec0 <CRI_func+0x9c0>)
 800cd1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd22:	f7f3 fda7 	bl	8000874 <__aeabi_ddiv>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	4639      	mov	r1, r7
 800cd2e:	f7f3 fac5 	bl	80002bc <__adddf3>
 800cd32:	4606      	mov	r6, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800cd34:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800cd38:	460f      	mov	r7, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800cd3a:	f7f3 fc1d 	bl	8000578 <__aeabi_f2d>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	a161      	add	r1, pc, #388	; (adr r1, 800cec8 <CRI_func+0x9c8>)
 800cd44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd48:	f7f3 fd94 	bl	8000874 <__aeabi_ddiv>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	460b      	mov	r3, r1
 800cd50:	4630      	mov	r0, r6
 800cd52:	4639      	mov	r1, r7
 800cd54:	f7f3 fab2 	bl	80002bc <__adddf3>
 800cd58:	a35d      	add	r3, pc, #372	; (adr r3, 800ced0 <CRI_func+0x9d0>)
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800cd5e:	f7f3 faad 	bl	80002bc <__adddf3>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800cd62:	e9c4 0100 	strd	r0, r1, [r4]
		yD_CRI = -3 * xD_CRI*xD_CRI + 2.87*xD_CRI - 0.275;
 800cd66:	e9d4 4500 	ldrd	r4, r5, [r4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4b7a      	ldr	r3, [pc, #488]	; (800cf58 <CRI_func+0xa58>)
 800cd6e:	4620      	mov	r0, r4
 800cd70:	4629      	mov	r1, r5
 800cd72:	f7f3 fc55 	bl	8000620 <__aeabi_dmul>
 800cd76:	4622      	mov	r2, r4
 800cd78:	462b      	mov	r3, r5
 800cd7a:	f7f3 fc51 	bl	8000620 <__aeabi_dmul>
 800cd7e:	a356      	add	r3, pc, #344	; (adr r3, 800ced8 <CRI_func+0x9d8>)
 800cd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd84:	4606      	mov	r6, r0
 800cd86:	460f      	mov	r7, r1
 800cd88:	4620      	mov	r0, r4
 800cd8a:	4629      	mov	r1, r5
 800cd8c:	f7f3 fc48 	bl	8000620 <__aeabi_dmul>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4630      	mov	r0, r6
 800cd96:	4639      	mov	r1, r7
 800cd98:	f7f3 fa90 	bl	80002bc <__adddf3>
 800cd9c:	a350      	add	r3, pc, #320	; (adr r3, 800cee0 <CRI_func+0x9e0>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	f7f3 fa89 	bl	80002b8 <__aeabi_dsub>
 800cda6:	4b6d      	ldr	r3, [pc, #436]	; (800cf5c <CRI_func+0xa5c>)
 800cda8:	4606      	mov	r6, r0
 800cdaa:	460f      	mov	r7, r1
 800cdac:	e9c3 6700 	strd	r6, r7, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	a34d      	add	r3, pc, #308	; (adr r3, 800cee8 <CRI_func+0x9e8>)
 800cdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb8:	4629      	mov	r1, r5
 800cdba:	f7f3 fc31 	bl	8000620 <__aeabi_dmul>
 800cdbe:	a34c      	add	r3, pc, #304	; (adr r3, 800cef0 <CRI_func+0x9f0>)
 800cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc4:	f7f3 fa7a 	bl	80002bc <__adddf3>
 800cdc8:	a34b      	add	r3, pc, #300	; (adr r3, 800cef8 <CRI_func+0x9f8>)
 800cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdce:	4680      	mov	r8, r0
 800cdd0:	4689      	mov	r9, r1
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	f7f3 fc23 	bl	8000620 <__aeabi_dmul>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	4640      	mov	r0, r8
 800cde0:	4649      	mov	r1, r9
 800cde2:	f7f3 fa69 	bl	80002b8 <__aeabi_dsub>
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800cde6:	a346      	add	r3, pc, #280	; (adr r3, 800cf00 <CRI_func+0xa00>)
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cdec:	4680      	mov	r8, r0
 800cdee:	4689      	mov	r9, r1
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	f7f3 fc14 	bl	8000620 <__aeabi_dmul>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	a142      	add	r1, pc, #264	; (adr r1, 800cf08 <CRI_func+0xa08>)
 800cdfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce02:	f7f3 fa59 	bl	80002b8 <__aeabi_dsub>
 800ce06:	a342      	add	r3, pc, #264	; (adr r3, 800cf10 <CRI_func+0xa10>)
 800ce08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0c:	e9cd 0100 	strd	r0, r1, [sp]
 800ce10:	4630      	mov	r0, r6
 800ce12:	4639      	mov	r1, r7
 800ce14:	f7f3 fc04 	bl	8000620 <__aeabi_dmul>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce20:	f7f3 fa4c 	bl	80002bc <__adddf3>
 800ce24:	f7f3 fef4 	bl	8000c10 <__aeabi_d2f>
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800ce28:	f7f3 fba6 	bl	8000578 <__aeabi_f2d>
 800ce2c:	4642      	mov	r2, r8
 800ce2e:	464b      	mov	r3, r9
 800ce30:	f7f3 fd20 	bl	8000874 <__aeabi_ddiv>
 800ce34:	f7f3 feec 	bl	8000c10 <__aeabi_d2f>
 800ce38:	4b49      	ldr	r3, [pc, #292]	; (800cf60 <CRI_func+0xa60>)
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800ce3a:	4629      	mov	r1, r5
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800ce3c:	6018      	str	r0, [r3, #0]
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800ce3e:	a336      	add	r3, pc, #216	; (adr r3, 800cf18 <CRI_func+0xa18>)
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	4620      	mov	r0, r4
 800ce46:	f7f3 fbeb 	bl	8000620 <__aeabi_dmul>
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	a134      	add	r1, pc, #208	; (adr r1, 800cf20 <CRI_func+0xa20>)
 800ce50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce54:	f7f3 fa30 	bl	80002b8 <__aeabi_dsub>
 800ce58:	a333      	add	r3, pc, #204	; (adr r3, 800cf28 <CRI_func+0xa28>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	4604      	mov	r4, r0
 800ce60:	460d      	mov	r5, r1
 800ce62:	4630      	mov	r0, r6
 800ce64:	4639      	mov	r1, r7
 800ce66:	f7f3 fbdb 	bl	8000620 <__aeabi_dmul>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	4620      	mov	r0, r4
 800ce70:	4629      	mov	r1, r5
 800ce72:	f7f3 fa23 	bl	80002bc <__adddf3>
 800ce76:	f7f3 fecb 	bl	8000c10 <__aeabi_d2f>
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800ce7a:	f7f3 fb7d 	bl	8000578 <__aeabi_f2d>
 800ce7e:	464b      	mov	r3, r9
 800ce80:	4642      	mov	r2, r8
 800ce82:	f7f3 fcf7 	bl	8000874 <__aeabi_ddiv>
 800ce86:	f7f3 fec3 	bl	8000c10 <__aeabi_d2f>
 800ce8a:	4b36      	ldr	r3, [pc, #216]	; (800cf64 <CRI_func+0xa64>)
 800ce8c:	6018      	str	r0, [r3, #0]
 800ce8e:	f7ff bb5c 	b.w	800c54a <CRI_func+0x4a>
		if (i == 8)
 800ce92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce94:	2b08      	cmp	r3, #8
 800ce96:	f47f aeef 	bne.w	800cc78 <CRI_func+0x778>
			R9 = Ri[i];
 800ce9a:	4b33      	ldr	r3, [pc, #204]	; (800cf68 <CRI_func+0xa68>)
 800ce9c:	7018      	strb	r0, [r3, #0]
			Rall_temp += Ri[i];
 800ce9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cea0:	4418      	add	r0, r3
 800cea2:	b203      	sxth	r3, r0
 800cea4:	9310      	str	r3, [sp, #64]	; 0x40
 800cea6:	e6eb      	b.n	800cc80 <CRI_func+0x780>
 800cea8:	66666666 	.word	0x66666666
 800ceac:	40126666 	.word	0x40126666
 800ceb0:	cccccccd 	.word	0xcccccccd
 800ceb4:	3feccccc 	.word	0x3feccccc
 800ceb8:	dc000000 	.word	0xdc000000
 800cebc:	c1f12993 	.word	0xc1f12993
 800cec0:	00000000 	.word	0x00000000
 800cec4:	4146a47c 	.word	0x4146a47c
 800cec8:	3d70a3d7 	.word	0x3d70a3d7
 800cecc:	4058c70a 	.word	0x4058c70a
 800ced0:	d594f26b 	.word	0xd594f26b
 800ced4:	3fcf3d74 	.word	0x3fcf3d74
 800ced8:	8f5c28f6 	.word	0x8f5c28f6
 800cedc:	4006f5c2 	.word	0x4006f5c2
 800cee0:	9999999a 	.word	0x9999999a
 800cee4:	3fd19999 	.word	0x3fd19999
 800cee8:	af4f0d84 	.word	0xaf4f0d84
 800ceec:	3fd06594 	.word	0x3fd06594
 800cef0:	9f559b3d 	.word	0x9f559b3d
 800cef4:	3f98adab 	.word	0x3f98adab
 800cef8:	487fcb92 	.word	0x487fcb92
 800cefc:	3fe77dbf 	.word	0x3fe77dbf
 800cf00:	17c1bda5 	.word	0x17c1bda5
 800cf04:	3ffc5326 	.word	0x3ffc5326
 800cf08:	76c8b439 	.word	0x76c8b439
 800cf0c:	bff59fbe 	.word	0xbff59fbe
 800cf10:	0aa64c30 	.word	0x0aa64c30
 800cf14:	4017a546 	.word	0x4017a546
 800cf18:	205bc01a 	.word	0x205bc01a
 800cf1c:	403f7141 	.word	0x403f7141
 800cf20:	eb851eb8 	.word	0xeb851eb8
 800cf24:	3f9eb851 	.word	0x3f9eb851
 800cf28:	ee631f8a 	.word	0xee631f8a
 800cf2c:	403e125a 	.word	0x403e125a
 800cf30:	20090a88 	.word	0x20090a88
 800cf34:	200909f8 	.word	0x200909f8
 800cf38:	40590000 	.word	0x40590000
 800cf3c:	20090a10 	.word	0x20090a10
 800cf40:	2000465b 	.word	0x2000465b
 800cf44:	200909c0 	.word	0x200909c0
 800cf48:	3f666666 	.word	0x3f666666
 800cf4c:	2000465a 	.word	0x2000465a
 800cf50:	20004659 	.word	0x20004659
 800cf54:	3ff00000 	.word	0x3ff00000
 800cf58:	c0080000 	.word	0xc0080000
 800cf5c:	200909f0 	.word	0x200909f0
 800cf60:	20004650 	.word	0x20004650
 800cf64:	20004654 	.word	0x20004654
 800cf68:	20004658 	.word	0x20004658
		if (CCT_measure < 7000)
 800cf6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf6e:	4c30      	ldr	r4, [pc, #192]	; (800d030 <CRI_func+0xb30>)
 800cf70:	f641 3357 	movw	r3, #6999	; 0x1b57
 800cf74:	ee07 2a90 	vmov	s15, r2
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800cf7e:	f67f aeb6 	bls.w	800ccee <CRI_func+0x7ee>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800cf82:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cf84:	f7f3 fad6 	bl	8000534 <__aeabi_ui2d>
 800cf88:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d008 <CRI_func+0xb08>
 800cf8c:	ec41 0b10 	vmov	d0, r0, r1
 800cf90:	f016 fc7a 	bl	8023888 <pow>
 800cf94:	ee68 7a08 	vmul.f32	s15, s16, s16
 800cf98:	ed8d 0b00 	vstr	d0, [sp]
 800cf9c:	ee17 0a90 	vmov	r0, s15
 800cfa0:	f7f3 faea 	bl	8000578 <__aeabi_f2d>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	a119      	add	r1, pc, #100	; (adr r1, 800d010 <CRI_func+0xb10>)
 800cfaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfae:	f7f3 fc61 	bl	8000874 <__aeabi_ddiv>
 800cfb2:	ed9d 0b00 	vldr	d0, [sp]
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	ec53 2b10 	vmov	r2, r3, d0
 800cfbc:	460f      	mov	r7, r1
 800cfbe:	a116      	add	r1, pc, #88	; (adr r1, 800d018 <CRI_func+0xb18>)
 800cfc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc4:	f7f3 fc56 	bl	8000874 <__aeabi_ddiv>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4639      	mov	r1, r7
 800cfd0:	f7f3 f974 	bl	80002bc <__adddf3>
 800cfd4:	4606      	mov	r6, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800cfd6:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800cfda:	460f      	mov	r7, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800cfdc:	f7f3 facc 	bl	8000578 <__aeabi_f2d>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	a10e      	add	r1, pc, #56	; (adr r1, 800d020 <CRI_func+0xb20>)
 800cfe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfea:	f7f3 fc43 	bl	8000874 <__aeabi_ddiv>
 800cfee:	4602      	mov	r2, r0
 800cff0:	460b      	mov	r3, r1
 800cff2:	4630      	mov	r0, r6
 800cff4:	4639      	mov	r1, r7
 800cff6:	f7f3 f961 	bl	80002bc <__adddf3>
 800cffa:	a30b      	add	r3, pc, #44	; (adr r3, 800d028 <CRI_func+0xb28>)
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	e6ad      	b.n	800cd5e <CRI_func+0x85e>
 800d002:	bf00      	nop
 800d004:	f3af 8000 	nop.w
 800d008:	00000000 	.word	0x00000000
 800d00c:	40080000 	.word	0x40080000
 800d010:	00000000 	.word	0x00000000
 800d014:	413d04e8 	.word	0x413d04e8
 800d018:	00000001 	.word	0x00000001
 800d01c:	c1dde5cf 	.word	0xc1dde5cf
 800d020:	28f5c290 	.word	0x28f5c290
 800d024:	406eef5c 	.word	0x406eef5c
 800d028:	a3ec02f3 	.word	0xa3ec02f3
 800d02c:	3fce5753 	.word	0x3fce5753
 800d030:	200909a8 	.word	0x200909a8

0800d034 <CRI_Axes>:
#include "CRI_graph.h"
uint8_t TFT_direction = 0x00;



void CRI_Axes(uint8_t direction){
 800d034:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800d036:	bbb8      	cbnz	r0, 800d0a8 <CRI_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800d038:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d03c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800d040:	2212      	movs	r2, #18
 800d042:	215f      	movs	r1, #95	; 0x5f
 800d044:	2010      	movs	r0, #16
 800d046:	9400      	str	r4, [sp, #0]
 800d048:	f00f fc79 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800d04c:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800d050:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800d054:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d058:	2010      	movs	r0, #16
 800d05a:	9400      	str	r4, [sp, #0]
 800d05c:	f00f fc6f 	bl	801c93e <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800d060:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800d064:	4619      	mov	r1, r3
 800d066:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d06a:	2010      	movs	r0, #16
 800d06c:	9400      	str	r4, [sp, #0]
 800d06e:	f00f fc09 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800d072:	f240 1301 	movw	r3, #257	; 0x101
 800d076:	4619      	mov	r1, r3
 800d078:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d07c:	2010      	movs	r0, #16
 800d07e:	9400      	str	r4, [sp, #0]
 800d080:	f00f fc00 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800d084:	23b5      	movs	r3, #181	; 0xb5
 800d086:	4619      	mov	r1, r3
 800d088:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d08c:	2010      	movs	r0, #16
 800d08e:	9400      	str	r4, [sp, #0]
 800d090:	f00f fbf8 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800d094:	2369      	movs	r3, #105	; 0x69
 800d096:	9400      	str	r4, [sp, #0]
 800d098:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800d09c:	4619      	mov	r1, r3
 800d09e:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800d0a0:	f00f fbf0 	bl	801c884 <TFT_DrawLine>
		
	}
}
 800d0a4:	b002      	add	sp, #8
 800d0a6:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800d0a8:	2801      	cmp	r0, #1
 800d0aa:	d131      	bne.n	800d110 <CRI_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800d0ac:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d0b0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d0b4:	22ff      	movs	r2, #255	; 0xff
 800d0b6:	2146      	movs	r1, #70	; 0x46
 800d0b8:	20fd      	movs	r0, #253	; 0xfd
 800d0ba:	9400      	str	r4, [sp, #0]
 800d0bc:	f00f fc3f 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800d0c0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d0c4:	22ff      	movs	r2, #255	; 0xff
 800d0c6:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800d0ca:	2028      	movs	r0, #40	; 0x28
 800d0cc:	9400      	str	r4, [sp, #0]
 800d0ce:	f00f fc36 	bl	801c93e <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800d0d2:	22cc      	movs	r2, #204	; 0xcc
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d0da:	2146      	movs	r1, #70	; 0x46
 800d0dc:	9400      	str	r4, [sp, #0]
 800d0de:	f00f fbd1 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800d0e2:	2297      	movs	r2, #151	; 0x97
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d0ea:	2146      	movs	r1, #70	; 0x46
 800d0ec:	9400      	str	r4, [sp, #0]
 800d0ee:	f00f fbc9 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800d0f2:	2262      	movs	r2, #98	; 0x62
 800d0f4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	9400      	str	r4, [sp, #0]
 800d0fc:	2146      	movs	r1, #70	; 0x46
 800d0fe:	f00f fbc1 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800d102:	9400      	str	r4, [sp, #0]
 800d104:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d108:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800d10a:	2146      	movs	r1, #70	; 0x46
 800d10c:	4610      	mov	r0, r2
 800d10e:	e7c7      	b.n	800d0a0 <CRI_Axes+0x6c>
	} else if (direction == 0x02)
 800d110:	2802      	cmp	r0, #2
 800d112:	d1c7      	bne.n	800d0a4 <CRI_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800d114:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d118:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d11c:	2210      	movs	r2, #16
 800d11e:	214a      	movs	r1, #74	; 0x4a
 800d120:	2012      	movs	r0, #18
 800d122:	9400      	str	r4, [sp, #0]
 800d124:	f00f fc0b 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800d128:	234c      	movs	r3, #76	; 0x4c
 800d12a:	22e8      	movs	r2, #232	; 0xe8
 800d12c:	214a      	movs	r1, #74	; 0x4a
 800d12e:	2011      	movs	r0, #17
 800d130:	9400      	str	r4, [sp, #0]
 800d132:	f00f fc04 	bl	801c93e <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800d136:	2244      	movs	r2, #68	; 0x44
 800d138:	4610      	mov	r0, r2
 800d13a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d13e:	2146      	movs	r1, #70	; 0x46
 800d140:	9400      	str	r4, [sp, #0]
 800d142:	f00f fb9f 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800d146:	2279      	movs	r2, #121	; 0x79
 800d148:	4610      	mov	r0, r2
 800d14a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d14e:	2146      	movs	r1, #70	; 0x46
 800d150:	9400      	str	r4, [sp, #0]
 800d152:	f00f fb97 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800d156:	22ae      	movs	r2, #174	; 0xae
 800d158:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d15c:	4610      	mov	r0, r2
 800d15e:	9400      	str	r4, [sp, #0]
 800d160:	2146      	movs	r1, #70	; 0x46
 800d162:	f00f fb8f 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800d166:	9400      	str	r4, [sp, #0]
 800d168:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d16c:	22e3      	movs	r2, #227	; 0xe3
 800d16e:	e7cc      	b.n	800d10a <CRI_Axes+0xd6>

0800d170 <CRI_Axes_Measure>:

void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800d170:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800d174:	ac02      	add	r4, sp, #8
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800d176:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800d178:	2300      	movs	r3, #0
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800d17a:	4688      	mov	r8, r1
 800d17c:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800d17e:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800d182:	2800      	cmp	r0, #0
 800d184:	d161      	bne.n	800d24a <CRI_Axes_Measure+0xda>
	{
		TFT_SetTextColor(TFT_White);
 800d186:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d18a:	f00f fe07 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d18e:	2063      	movs	r0, #99	; 0x63
 800d190:	f00f fe0a 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800d194:	4861      	ldr	r0, [pc, #388]	; (800d31c <CRI_Axes_Measure+0x1ac>)
 800d196:	f00f fdfb 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(17, 70, 'a');
 800d19a:	2261      	movs	r2, #97	; 0x61
 800d19c:	2146      	movs	r1, #70	; 0x46
 800d19e:	2011      	movs	r0, #17
 800d1a0:	f00f fec0 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800d1a4:	485e      	ldr	r0, [pc, #376]	; (800d320 <CRI_Axes_Measure+0x1b0>)
 800d1a6:	f00f fdf3 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(3, 70-2, 'R');
 800d1aa:	2252      	movs	r2, #82	; 0x52
 800d1ac:	2144      	movs	r1, #68	; 0x44
 800d1ae:	2003      	movs	r0, #3
 800d1b0:	f00f feb8 	bl	801cf24 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Ra);
 800d1b4:	4642      	mov	r2, r8
 800d1b6:	495b      	ldr	r1, [pc, #364]	; (800d324 <CRI_Axes_Measure+0x1b4>)
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f013 fa29 	bl	8020610 <sprintf>
		TFT_DisplayString(35, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800d1be:	2303      	movs	r3, #3
 800d1c0:	4622      	mov	r2, r4
 800d1c2:	2144      	movs	r1, #68	; 0x44
 800d1c4:	2023      	movs	r0, #35	; 0x23
 800d1c6:	f00f ff05 	bl	801cfd4 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800d1ca:	4854      	ldr	r0, [pc, #336]	; (800d31c <CRI_Axes_Measure+0x1ac>)
 800d1cc:	f00f fde0 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(113, 70, 'l');
 800d1d0:	226c      	movs	r2, #108	; 0x6c
 800d1d2:	2146      	movs	r1, #70	; 0x46
 800d1d4:	2071      	movs	r0, #113	; 0x71
 800d1d6:	f00f fea5 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(122, 70, 'l');
 800d1da:	226c      	movs	r2, #108	; 0x6c
 800d1dc:	2146      	movs	r1, #70	; 0x46
 800d1de:	207a      	movs	r0, #122	; 0x7a
 800d1e0:	f00f fea0 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(102, 70, 'a');
 800d1e4:	2261      	movs	r2, #97	; 0x61
 800d1e6:	2146      	movs	r1, #70	; 0x46
 800d1e8:	2066      	movs	r0, #102	; 0x66
 800d1ea:	f00f fe9b 	bl	801cf24 <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800d1ee:	484c      	ldr	r0, [pc, #304]	; (800d320 <CRI_Axes_Measure+0x1b0>)
 800d1f0:	f00f fdce 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(86, 70-2, 'R');
 800d1f4:	2252      	movs	r2, #82	; 0x52
 800d1f6:	2144      	movs	r1, #68	; 0x44
 800d1f8:	2056      	movs	r0, #86	; 0x56
 800d1fa:	f00f fe93 	bl	801cf24 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Rall);
 800d1fe:	463a      	mov	r2, r7
 800d200:	4948      	ldr	r1, [pc, #288]	; (800d324 <CRI_Axes_Measure+0x1b4>)
 800d202:	4620      	mov	r0, r4
 800d204:	f013 fa04 	bl	8020610 <sprintf>
		TFT_DisplayString(138, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800d208:	2303      	movs	r3, #3
 800d20a:	4622      	mov	r2, r4
 800d20c:	2144      	movs	r1, #68	; 0x44
 800d20e:	208a      	movs	r0, #138	; 0x8a
 800d210:	f00f fee0 	bl	801cfd4 <TFT_DisplayString>
		

		
		sprintf (buffer, "%d", R9);
 800d214:	4632      	mov	r2, r6
 800d216:	4943      	ldr	r1, [pc, #268]	; (800d324 <CRI_Axes_Measure+0x1b4>)
 800d218:	4620      	mov	r0, r4
 800d21a:	f013 f9f9 	bl	8020610 <sprintf>
		TFT_DisplayString(R9 < 0 ? 215 : 220, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800d21e:	2e00      	cmp	r6, #0
 800d220:	bfb4      	ite	lt
 800d222:	20d7      	movlt	r0, #215	; 0xd7
 800d224:	20dc      	movge	r0, #220	; 0xdc
 800d226:	2303      	movs	r3, #3
 800d228:	4622      	mov	r2, r4
 800d22a:	2144      	movs	r1, #68	; 0x44
 800d22c:	f00f fed2 	bl	801cfd4 <TFT_DisplayString>
		TFT_DrawChar(183, 70-2, 'R');
 800d230:	2252      	movs	r2, #82	; 0x52
 800d232:	2144      	movs	r1, #68	; 0x44
 800d234:	20b7      	movs	r0, #183	; 0xb7
 800d236:	f00f fe75 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(198, 70-2, '9');
 800d23a:	2239      	movs	r2, #57	; 0x39
 800d23c:	2144      	movs	r1, #68	; 0x44
 800d23e:	20c6      	movs	r0, #198	; 0xc6
 800d240:	f00f fe70 	bl	801cf24 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
	
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800d244:	b002      	add	sp, #8
 800d246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24a:	4d37      	ldr	r5, [pc, #220]	; (800d328 <CRI_Axes_Measure+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d24c:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800d24e:	bf14      	ite	ne
 800d250:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d252:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d254:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d258:	bf18      	it	ne
 800d25a:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d25c:	f00f fd9e 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d260:	2063      	movs	r0, #99	; 0x63
 800d262:	f00f fda1 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800d266:	482d      	ldr	r0, [pc, #180]	; (800d31c <CRI_Axes_Measure+0x1ac>)
 800d268:	f00f fd92 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800d26c:	2261      	movs	r2, #97	; 0x61
 800d26e:	2110      	movs	r1, #16
 800d270:	2064      	movs	r0, #100	; 0x64
 800d272:	f00f fe57 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800d276:	482a      	ldr	r0, [pc, #168]	; (800d320 <CRI_Axes_Measure+0x1b0>)
 800d278:	f00f fd8a 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'R');
 800d27c:	2252      	movs	r2, #82	; 0x52
 800d27e:	210e      	movs	r1, #14
 800d280:	2055      	movs	r0, #85	; 0x55
 800d282:	f00f fe4f 	bl	801cf24 <TFT_DrawChar>
		sprintf (buffer, "%d", Ra);
 800d286:	4642      	mov	r2, r8
 800d288:	4926      	ldr	r1, [pc, #152]	; (800d324 <CRI_Axes_Measure+0x1b4>)
 800d28a:	4620      	mov	r0, r4
 800d28c:	f013 f9c0 	bl	8020610 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800d290:	2303      	movs	r3, #3
 800d292:	4622      	mov	r2, r4
 800d294:	210e      	movs	r1, #14
 800d296:	207d      	movs	r0, #125	; 0x7d
 800d298:	f00f fe9c 	bl	801cfd4 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800d29c:	481f      	ldr	r0, [pc, #124]	; (800d31c <CRI_Axes_Measure+0x1ac>)
 800d29e:	f00f fd77 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(221, 16, 'l');
 800d2a2:	226c      	movs	r2, #108	; 0x6c
 800d2a4:	2110      	movs	r1, #16
 800d2a6:	20dd      	movs	r0, #221	; 0xdd
 800d2a8:	f00f fe3c 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(230, 16, 'l');
 800d2ac:	226c      	movs	r2, #108	; 0x6c
 800d2ae:	2110      	movs	r1, #16
 800d2b0:	20e6      	movs	r0, #230	; 0xe6
 800d2b2:	f00f fe37 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(210, 16, 'a');
 800d2b6:	2261      	movs	r2, #97	; 0x61
 800d2b8:	2110      	movs	r1, #16
 800d2ba:	20d2      	movs	r0, #210	; 0xd2
 800d2bc:	f00f fe32 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800d2c0:	4817      	ldr	r0, [pc, #92]	; (800d320 <CRI_Axes_Measure+0x1b0>)
 800d2c2:	f00f fd65 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(195, 16-2, 'R');
 800d2c6:	2252      	movs	r2, #82	; 0x52
 800d2c8:	210e      	movs	r1, #14
 800d2ca:	20c3      	movs	r0, #195	; 0xc3
 800d2cc:	f00f fe2a 	bl	801cf24 <TFT_DrawChar>
		sprintf (buffer, "%d", Rall);
 800d2d0:	463a      	mov	r2, r7
 800d2d2:	4914      	ldr	r1, [pc, #80]	; (800d324 <CRI_Axes_Measure+0x1b4>)
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f013 f99b 	bl	8020610 <sprintf>
		TFT_DisplayString(255, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800d2da:	2303      	movs	r3, #3
 800d2dc:	4622      	mov	r2, r4
 800d2de:	210e      	movs	r1, #14
 800d2e0:	20ff      	movs	r0, #255	; 0xff
 800d2e2:	f00f fe77 	bl	801cfd4 <TFT_DisplayString>
		TFT_DrawChar(325, 16-2, 'R');
 800d2e6:	2252      	movs	r2, #82	; 0x52
 800d2e8:	210e      	movs	r1, #14
 800d2ea:	f240 1045 	movw	r0, #325	; 0x145
 800d2ee:	f00f fe19 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(340, 16-2, '9');
 800d2f2:	2239      	movs	r2, #57	; 0x39
 800d2f4:	210e      	movs	r1, #14
 800d2f6:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800d2fa:	f00f fe13 	bl	801cf24 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
 800d2fe:	4632      	mov	r2, r6
 800d300:	4908      	ldr	r1, [pc, #32]	; (800d324 <CRI_Axes_Measure+0x1b4>)
 800d302:	4620      	mov	r0, r4
 800d304:	f013 f984 	bl	8020610 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800d308:	2303      	movs	r3, #3
 800d30a:	4622      	mov	r2, r4
 800d30c:	210e      	movs	r1, #14
 800d30e:	f240 106d 	movw	r0, #365	; 0x16d
 800d312:	f00f fe5f 	bl	801cfd4 <TFT_DisplayString>
		TFT_direction = 0x00;
 800d316:	2300      	movs	r3, #0
 800d318:	702b      	strb	r3, [r5, #0]
}
 800d31a:	e793      	b.n	800d244 <CRI_Axes_Measure+0xd4>
 800d31c:	200001c0 	.word	0x200001c0
 800d320:	200001b0 	.word	0x200001b0
 800d324:	08025309 	.word	0x08025309
 800d328:	200056a0 	.word	0x200056a0

0800d32c <CRI_Axes_Text>:

void CRI_Axes_Text(uint8_t direction){
 800d32c:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800d32e:	4604      	mov	r4, r0
 800d330:	2800      	cmp	r0, #0
 800d332:	f040 811f 	bne.w	800d574 <CRI_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800d336:	488e      	ldr	r0, [pc, #568]	; (800d570 <CRI_Axes_Text+0x244>)
 800d338:	f00f fd2a 	bl	801cd90 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800d33c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d340:	f00f fd2c 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d344:	2063      	movs	r0, #99	; 0x63
 800d346:	f00f fd2f 	bl	801cda8 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'R');
 800d34a:	2252      	movs	r2, #82	; 0x52
 800d34c:	f240 119f 	movw	r1, #415	; 0x19f
 800d350:	2018      	movs	r0, #24
 800d352:	f00f fde7 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800d356:	2231      	movs	r2, #49	; 0x31
 800d358:	f240 119f 	movw	r1, #415	; 0x19f
 800d35c:	201e      	movs	r0, #30
 800d35e:	f00f fde1 	bl	801cf24 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'R');
 800d362:	2252      	movs	r2, #82	; 0x52
 800d364:	f240 119f 	movw	r1, #415	; 0x19f
 800d368:	2028      	movs	r0, #40	; 0x28
 800d36a:	f00f fddb 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800d36e:	2232      	movs	r2, #50	; 0x32
 800d370:	f240 119f 	movw	r1, #415	; 0x19f
 800d374:	202e      	movs	r0, #46	; 0x2e
 800d376:	f00f fdd5 	bl	801cf24 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'R');
 800d37a:	2252      	movs	r2, #82	; 0x52
 800d37c:	f240 119f 	movw	r1, #415	; 0x19f
 800d380:	2038      	movs	r0, #56	; 0x38
 800d382:	f00f fdcf 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800d386:	2233      	movs	r2, #51	; 0x33
 800d388:	f240 119f 	movw	r1, #415	; 0x19f
 800d38c:	203e      	movs	r0, #62	; 0x3e
 800d38e:	f00f fdc9 	bl	801cf24 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'R');
 800d392:	2252      	movs	r2, #82	; 0x52
 800d394:	f240 119f 	movw	r1, #415	; 0x19f
 800d398:	2048      	movs	r0, #72	; 0x48
 800d39a:	f00f fdc3 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800d39e:	2234      	movs	r2, #52	; 0x34
 800d3a0:	f240 119f 	movw	r1, #415	; 0x19f
 800d3a4:	204e      	movs	r0, #78	; 0x4e
 800d3a6:	f00f fdbd 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'R');
 800d3aa:	2252      	movs	r2, #82	; 0x52
 800d3ac:	f240 119f 	movw	r1, #415	; 0x19f
 800d3b0:	2058      	movs	r0, #88	; 0x58
 800d3b2:	f00f fdb7 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800d3b6:	2235      	movs	r2, #53	; 0x35
 800d3b8:	f240 119f 	movw	r1, #415	; 0x19f
 800d3bc:	205e      	movs	r0, #94	; 0x5e
 800d3be:	f00f fdb1 	bl	801cf24 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'R');
 800d3c2:	2252      	movs	r2, #82	; 0x52
 800d3c4:	f240 119f 	movw	r1, #415	; 0x19f
 800d3c8:	2068      	movs	r0, #104	; 0x68
 800d3ca:	f00f fdab 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800d3ce:	2236      	movs	r2, #54	; 0x36
 800d3d0:	f240 119f 	movw	r1, #415	; 0x19f
 800d3d4:	206e      	movs	r0, #110	; 0x6e
 800d3d6:	f00f fda5 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'R');
 800d3da:	2252      	movs	r2, #82	; 0x52
 800d3dc:	f240 119f 	movw	r1, #415	; 0x19f
 800d3e0:	2078      	movs	r0, #120	; 0x78
 800d3e2:	f00f fd9f 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800d3e6:	2237      	movs	r2, #55	; 0x37
 800d3e8:	f240 119f 	movw	r1, #415	; 0x19f
 800d3ec:	207e      	movs	r0, #126	; 0x7e
 800d3ee:	f00f fd99 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'R');
 800d3f2:	2252      	movs	r2, #82	; 0x52
 800d3f4:	f240 119f 	movw	r1, #415	; 0x19f
 800d3f8:	2088      	movs	r0, #136	; 0x88
 800d3fa:	f00f fd93 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800d3fe:	2238      	movs	r2, #56	; 0x38
 800d400:	f240 119f 	movw	r1, #415	; 0x19f
 800d404:	208e      	movs	r0, #142	; 0x8e
 800d406:	f00f fd8d 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'R');
 800d40a:	2252      	movs	r2, #82	; 0x52
 800d40c:	f240 119f 	movw	r1, #415	; 0x19f
 800d410:	2098      	movs	r0, #152	; 0x98
 800d412:	f00f fd87 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800d416:	2239      	movs	r2, #57	; 0x39
 800d418:	f240 119f 	movw	r1, #415	; 0x19f
 800d41c:	209e      	movs	r0, #158	; 0x9e
 800d41e:	f00f fd81 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800d422:	2231      	movs	r2, #49	; 0x31
 800d424:	f240 119f 	movw	r1, #415	; 0x19f
 800d428:	20ad      	movs	r0, #173	; 0xad
 800d42a:	f00f fd7b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'R');
 800d42e:	2252      	movs	r2, #82	; 0x52
 800d430:	f240 119f 	movw	r1, #415	; 0x19f
 800d434:	20a8      	movs	r0, #168	; 0xa8
 800d436:	f00f fd75 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800d43a:	2230      	movs	r2, #48	; 0x30
 800d43c:	f240 119f 	movw	r1, #415	; 0x19f
 800d440:	20b1      	movs	r0, #177	; 0xb1
 800d442:	f00f fd6f 	bl	801cf24 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800d446:	2231      	movs	r2, #49	; 0x31
 800d448:	f240 119f 	movw	r1, #415	; 0x19f
 800d44c:	20bd      	movs	r0, #189	; 0xbd
 800d44e:	f00f fd69 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'R');
 800d452:	2252      	movs	r2, #82	; 0x52
 800d454:	f240 119f 	movw	r1, #415	; 0x19f
 800d458:	20b8      	movs	r0, #184	; 0xb8
 800d45a:	f00f fd63 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800d45e:	2231      	movs	r2, #49	; 0x31
 800d460:	f240 119f 	movw	r1, #415	; 0x19f
 800d464:	20c2      	movs	r0, #194	; 0xc2
 800d466:	f00f fd5d 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800d46a:	2231      	movs	r2, #49	; 0x31
 800d46c:	f240 119f 	movw	r1, #415	; 0x19f
 800d470:	20cd      	movs	r0, #205	; 0xcd
 800d472:	f00f fd57 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'R');
 800d476:	2252      	movs	r2, #82	; 0x52
 800d478:	f240 119f 	movw	r1, #415	; 0x19f
 800d47c:	20c8      	movs	r0, #200	; 0xc8
 800d47e:	f00f fd51 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800d482:	2232      	movs	r2, #50	; 0x32
 800d484:	f240 119f 	movw	r1, #415	; 0x19f
 800d488:	20d1      	movs	r0, #209	; 0xd1
 800d48a:	f00f fd4b 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800d48e:	2231      	movs	r2, #49	; 0x31
 800d490:	f240 119f 	movw	r1, #415	; 0x19f
 800d494:	20dd      	movs	r0, #221	; 0xdd
 800d496:	f00f fd45 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'R');
 800d49a:	2252      	movs	r2, #82	; 0x52
 800d49c:	f240 119f 	movw	r1, #415	; 0x19f
 800d4a0:	20d8      	movs	r0, #216	; 0xd8
 800d4a2:	f00f fd3f 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800d4a6:	2233      	movs	r2, #51	; 0x33
 800d4a8:	f240 119f 	movw	r1, #415	; 0x19f
 800d4ac:	20e1      	movs	r0, #225	; 0xe1
 800d4ae:	f00f fd39 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800d4b2:	2231      	movs	r2, #49	; 0x31
 800d4b4:	f240 119f 	movw	r1, #415	; 0x19f
 800d4b8:	20ed      	movs	r0, #237	; 0xed
 800d4ba:	f00f fd33 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'R');
 800d4be:	2252      	movs	r2, #82	; 0x52
 800d4c0:	f240 119f 	movw	r1, #415	; 0x19f
 800d4c4:	20e8      	movs	r0, #232	; 0xe8
 800d4c6:	f00f fd2d 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800d4ca:	2234      	movs	r2, #52	; 0x34
 800d4cc:	f240 119f 	movw	r1, #415	; 0x19f
 800d4d0:	20f1      	movs	r0, #241	; 0xf1
 800d4d2:	f00f fd27 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800d4d6:	2231      	movs	r2, #49	; 0x31
 800d4d8:	f240 119f 	movw	r1, #415	; 0x19f
 800d4dc:	20fd      	movs	r0, #253	; 0xfd
 800d4de:	f00f fd21 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'R');
 800d4e2:	2252      	movs	r2, #82	; 0x52
 800d4e4:	f240 119f 	movw	r1, #415	; 0x19f
 800d4e8:	20f8      	movs	r0, #248	; 0xf8
 800d4ea:	f00f fd1b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800d4ee:	2235      	movs	r2, #53	; 0x35
 800d4f0:	f240 119f 	movw	r1, #415	; 0x19f
 800d4f4:	f240 1001 	movw	r0, #257	; 0x101
 800d4f8:	f00f fd14 	bl	801cf24 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800d4fc:	2230      	movs	r2, #48	; 0x30
 800d4fe:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d502:	2005      	movs	r0, #5
 800d504:	f00f fd0e 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800d508:	2232      	movs	r2, #50	; 0x32
 800d50a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d50e:	2001      	movs	r0, #1
 800d510:	f00f fd08 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800d514:	2235      	movs	r2, #53	; 0x35
 800d516:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d51a:	2007      	movs	r0, #7
 800d51c:	f00f fd02 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800d520:	2235      	movs	r2, #53	; 0x35
 800d522:	f240 1101 	movw	r1, #257	; 0x101
 800d526:	2001      	movs	r0, #1
 800d528:	f00f fcfc 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800d52c:	2230      	movs	r2, #48	; 0x30
 800d52e:	f240 1101 	movw	r1, #257	; 0x101
 800d532:	2007      	movs	r0, #7
 800d534:	f00f fcf6 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800d538:	2237      	movs	r2, #55	; 0x37
 800d53a:	21b5      	movs	r1, #181	; 0xb5
 800d53c:	2001      	movs	r0, #1
 800d53e:	f00f fcf1 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800d542:	2235      	movs	r2, #53	; 0x35
 800d544:	21b5      	movs	r1, #181	; 0xb5
 800d546:	2007      	movs	r0, #7
 800d548:	f00f fcec 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800d54c:	4620      	mov	r0, r4
 800d54e:	2231      	movs	r2, #49	; 0x31
 800d550:	2169      	movs	r1, #105	; 0x69
 800d552:	f00f fce7 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800d556:	2230      	movs	r2, #48	; 0x30
 800d558:	2169      	movs	r1, #105	; 0x69
 800d55a:	2004      	movs	r0, #4
 800d55c:	f00f fce2 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800d560:	2230      	movs	r2, #48	; 0x30
 800d562:	2169      	movs	r1, #105	; 0x69
 800d564:	2009      	movs	r0, #9
		TFT_DrawChar(62, 43, '0');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 800d566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800d56a:	f00f bcdb 	b.w	801cf24 <TFT_DrawChar>
 800d56e:	bf00      	nop
 800d570:	20000210 	.word	0x20000210
 800d574:	4d98      	ldr	r5, [pc, #608]	; (800d7d8 <CRI_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d576:	2801      	cmp	r0, #1
 800d578:	bf0c      	ite	eq
 800d57a:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800d57c:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800d57e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d582:	bf18      	it	ne
 800d584:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d586:	f00f fc09 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d58a:	2063      	movs	r0, #99	; 0x63
 800d58c:	f00f fc0c 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800d590:	4892      	ldr	r0, [pc, #584]	; (800d7dc <CRI_Axes_Text+0x4b0>)
 800d592:	f00f fbfd 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'R');
 800d596:	2252      	movs	r2, #82	; 0x52
 800d598:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d59c:	2057      	movs	r0, #87	; 0x57
 800d59e:	f00f fcc1 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800d5a2:	2231      	movs	r2, #49	; 0x31
 800d5a4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5a8:	205d      	movs	r0, #93	; 0x5d
 800d5aa:	f00f fcbb 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'R');
 800d5ae:	2252      	movs	r2, #82	; 0x52
 800d5b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5b4:	206d      	movs	r0, #109	; 0x6d
 800d5b6:	f00f fcb5 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800d5ba:	2232      	movs	r2, #50	; 0x32
 800d5bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5c0:	2073      	movs	r0, #115	; 0x73
 800d5c2:	f00f fcaf 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'R');
 800d5c6:	2252      	movs	r2, #82	; 0x52
 800d5c8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5cc:	2083      	movs	r0, #131	; 0x83
 800d5ce:	f00f fca9 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800d5d2:	2233      	movs	r2, #51	; 0x33
 800d5d4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5d8:	2089      	movs	r0, #137	; 0x89
 800d5da:	f00f fca3 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'R');
 800d5de:	2252      	movs	r2, #82	; 0x52
 800d5e0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5e4:	2099      	movs	r0, #153	; 0x99
 800d5e6:	f00f fc9d 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800d5ea:	2234      	movs	r2, #52	; 0x34
 800d5ec:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5f0:	209f      	movs	r0, #159	; 0x9f
 800d5f2:	f00f fc97 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'R');
 800d5f6:	2252      	movs	r2, #82	; 0x52
 800d5f8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5fc:	20af      	movs	r0, #175	; 0xaf
 800d5fe:	f00f fc91 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800d602:	2235      	movs	r2, #53	; 0x35
 800d604:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d608:	20b5      	movs	r0, #181	; 0xb5
 800d60a:	f00f fc8b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'R');
 800d60e:	2252      	movs	r2, #82	; 0x52
 800d610:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d614:	20c5      	movs	r0, #197	; 0xc5
 800d616:	f00f fc85 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800d61a:	2236      	movs	r2, #54	; 0x36
 800d61c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d620:	20cb      	movs	r0, #203	; 0xcb
 800d622:	f00f fc7f 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'R');
 800d626:	2252      	movs	r2, #82	; 0x52
 800d628:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d62c:	20db      	movs	r0, #219	; 0xdb
 800d62e:	f00f fc79 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800d632:	2237      	movs	r2, #55	; 0x37
 800d634:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d638:	20e1      	movs	r0, #225	; 0xe1
 800d63a:	f00f fc73 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'R');
 800d63e:	2252      	movs	r2, #82	; 0x52
 800d640:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d644:	20f1      	movs	r0, #241	; 0xf1
 800d646:	f00f fc6d 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800d64a:	2238      	movs	r2, #56	; 0x38
 800d64c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d650:	20f7      	movs	r0, #247	; 0xf7
 800d652:	f00f fc67 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'R');
 800d656:	2252      	movs	r2, #82	; 0x52
 800d658:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d65c:	f240 1007 	movw	r0, #263	; 0x107
 800d660:	f00f fc60 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800d664:	2239      	movs	r2, #57	; 0x39
 800d666:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d66a:	f240 100d 	movw	r0, #269	; 0x10d
 800d66e:	f00f fc59 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800d672:	2231      	movs	r2, #49	; 0x31
 800d674:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d678:	f44f 7091 	mov.w	r0, #290	; 0x122
 800d67c:	f00f fc52 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'R');
 800d680:	2252      	movs	r2, #82	; 0x52
 800d682:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d686:	f240 101d 	movw	r0, #285	; 0x11d
 800d68a:	f00f fc4b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800d68e:	2230      	movs	r2, #48	; 0x30
 800d690:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d694:	f44f 7093 	mov.w	r0, #294	; 0x126
 800d698:	f00f fc44 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800d69c:	2231      	movs	r2, #49	; 0x31
 800d69e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d6a2:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d6a6:	f00f fc3d 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'R');
 800d6aa:	2252      	movs	r2, #82	; 0x52
 800d6ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d6b0:	f240 1033 	movw	r0, #307	; 0x133
 800d6b4:	f00f fc36 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800d6b8:	2231      	movs	r2, #49	; 0x31
 800d6ba:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d6be:	f240 103d 	movw	r0, #317	; 0x13d
 800d6c2:	f00f fc2f 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800d6c6:	2231      	movs	r2, #49	; 0x31
 800d6c8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d6cc:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800d6d0:	f00f fc28 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'R');
 800d6d4:	2252      	movs	r2, #82	; 0x52
 800d6d6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d6da:	f240 1049 	movw	r0, #329	; 0x149
 800d6de:	f00f fc21 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800d6e2:	2232      	movs	r2, #50	; 0x32
 800d6e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d6e8:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800d6ec:	f00f fc1a 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800d6f0:	2231      	movs	r2, #49	; 0x31
 800d6f2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d6f6:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800d6fa:	f00f fc13 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'R');
 800d6fe:	2252      	movs	r2, #82	; 0x52
 800d700:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d704:	f240 105f 	movw	r0, #351	; 0x15f
 800d708:	f00f fc0c 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800d70c:	2233      	movs	r2, #51	; 0x33
 800d70e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d712:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800d716:	f00f fc05 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800d71a:	2231      	movs	r2, #49	; 0x31
 800d71c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d720:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800d724:	f00f fbfe 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'R');
 800d728:	2252      	movs	r2, #82	; 0x52
 800d72a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d72e:	f240 1075 	movw	r0, #373	; 0x175
 800d732:	f00f fbf7 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800d736:	2234      	movs	r2, #52	; 0x34
 800d738:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d73c:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800d740:	f00f fbf0 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800d744:	2231      	movs	r2, #49	; 0x31
 800d746:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d74a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d74e:	f00f fbe9 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'R');
 800d752:	2252      	movs	r2, #82	; 0x52
 800d754:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d758:	f240 108b 	movw	r0, #395	; 0x18b
 800d75c:	f00f fbe2 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800d760:	2235      	movs	r2, #53	; 0x35
 800d762:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d766:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d76a:	f00f fbdb 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800d76e:	2230      	movs	r2, #48	; 0x30
 800d770:	21fa      	movs	r1, #250	; 0xfa
 800d772:	2041      	movs	r0, #65	; 0x41
 800d774:	f00f fbd6 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800d778:	2232      	movs	r2, #50	; 0x32
 800d77a:	21ca      	movs	r1, #202	; 0xca
 800d77c:	203a      	movs	r0, #58	; 0x3a
 800d77e:	f00f fbd1 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800d782:	2235      	movs	r2, #53	; 0x35
 800d784:	21ca      	movs	r1, #202	; 0xca
 800d786:	2041      	movs	r0, #65	; 0x41
 800d788:	f00f fbcc 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800d78c:	2235      	movs	r2, #53	; 0x35
 800d78e:	2195      	movs	r1, #149	; 0x95
 800d790:	203a      	movs	r0, #58	; 0x3a
 800d792:	f00f fbc7 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800d796:	2230      	movs	r2, #48	; 0x30
 800d798:	2195      	movs	r1, #149	; 0x95
 800d79a:	2041      	movs	r0, #65	; 0x41
 800d79c:	f00f fbc2 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800d7a0:	2237      	movs	r2, #55	; 0x37
 800d7a2:	2160      	movs	r1, #96	; 0x60
 800d7a4:	203a      	movs	r0, #58	; 0x3a
 800d7a6:	f00f fbbd 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800d7aa:	2235      	movs	r2, #53	; 0x35
 800d7ac:	2160      	movs	r1, #96	; 0x60
 800d7ae:	2041      	movs	r0, #65	; 0x41
 800d7b0:	f00f fbb8 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800d7b4:	2231      	movs	r2, #49	; 0x31
 800d7b6:	212b      	movs	r1, #43	; 0x2b
 800d7b8:	2039      	movs	r0, #57	; 0x39
 800d7ba:	f00f fbb3 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800d7be:	2230      	movs	r2, #48	; 0x30
 800d7c0:	212b      	movs	r1, #43	; 0x2b
 800d7c2:	203e      	movs	r0, #62	; 0x3e
 800d7c4:	f00f fbae 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800d7c8:	2230      	movs	r2, #48	; 0x30
 800d7ca:	212b      	movs	r1, #43	; 0x2b
 800d7cc:	2043      	movs	r0, #67	; 0x43
 800d7ce:	f00f fba9 	bl	801cf24 <TFT_DrawChar>
		TFT_direction = 0x00;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	702b      	strb	r3, [r5, #0]
 800d7d6:	bd38      	pop	{r3, r4, r5, pc}
 800d7d8:	200056a0 	.word	0x200056a0
 800d7dc:	20000210 	.word	0x20000210

0800d7e0 <CRI_chart>:

void CRI_chart(uint8_t direction, int8_t *GraphData)
{
 800d7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e4:	ed2d 8b02 	vpush	{d8}
 800d7e8:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800d7ea:	ae06      	add	r6, sp, #24
 800d7ec:	2300      	movs	r3, #0
{
 800d7ee:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800d7f0:	f826 3d04 	strh.w	r3, [r6, #-4]!
 800d7f4:	1e4d      	subs	r5, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f040 82de 	bne.w	800ddb8 <CRI_chart+0x5d8>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d7fc:	f991 3000 	ldrsb.w	r3, [r1]
 800d800:	2b00      	cmp	r3, #0
 800d802:	f2c0 826f 	blt.w	800dce4 <CRI_chart+0x504>
 800d806:	2b64      	cmp	r3, #100	; 0x64
 800d808:	f300 826f 	bgt.w	800dcea <CRI_chart+0x50a>
 800d80c:	ee07 3a90 	vmov	s15, r3
 800d810:	ed9f 7af7 	vldr	s14, [pc, #988]	; 800dbf0 <CRI_chart+0x410>
 800d814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d818:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d81c:	eddf 7af5 	vldr	s15, [pc, #980]	; 800dbf4 <CRI_chart+0x414>
 800d820:	ed9f 7af5 	vldr	s14, [pc, #980]	; 800dbf8 <CRI_chart+0x418>
 800d824:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d82c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d830:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d834:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	2222      	movs	r2, #34	; 0x22
 800d83c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d840:	2018      	movs	r0, #24
 800d842:	f00f f87c 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d846:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f2c0 8250 	blt.w	800dcf0 <CRI_chart+0x510>
 800d850:	2b64      	cmp	r3, #100	; 0x64
 800d852:	f300 8250 	bgt.w	800dcf6 <CRI_chart+0x516>
 800d856:	ee07 3a90 	vmov	s15, r3
 800d85a:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800dbf0 <CRI_chart+0x410>
 800d85e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d862:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d866:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800dbf4 <CRI_chart+0x414>
 800d86a:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 800dbf8 <CRI_chart+0x418>
 800d86e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d876:	edcd 7a03 	vstr	s15, [sp, #12]
 800d87a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d87e:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	2232      	movs	r2, #50	; 0x32
 800d886:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d88a:	2028      	movs	r0, #40	; 0x28
 800d88c:	f00f f857 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d890:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d894:	2b00      	cmp	r3, #0
 800d896:	f2c0 8231 	blt.w	800dcfc <CRI_chart+0x51c>
 800d89a:	2b64      	cmp	r3, #100	; 0x64
 800d89c:	f300 8231 	bgt.w	800dd02 <CRI_chart+0x522>
 800d8a0:	ee07 3a90 	vmov	s15, r3
 800d8a4:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800dbf0 <CRI_chart+0x410>
 800d8a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8b0:	eddf 7ad0 	vldr	s15, [pc, #832]	; 800dbf4 <CRI_chart+0x414>
 800d8b4:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800dbf8 <CRI_chart+0x418>
 800d8b8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8c0:	edcd 7a03 	vstr	s15, [sp, #12]
 800d8c4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d8c8:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	2242      	movs	r2, #66	; 0x42
 800d8d0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d8d4:	2038      	movs	r0, #56	; 0x38
 800d8d6:	f00f f832 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d8da:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f2c0 8212 	blt.w	800dd08 <CRI_chart+0x528>
 800d8e4:	2b64      	cmp	r3, #100	; 0x64
 800d8e6:	f300 8212 	bgt.w	800dd0e <CRI_chart+0x52e>
 800d8ea:	ee07 3a90 	vmov	s15, r3
 800d8ee:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800dbf0 <CRI_chart+0x410>
 800d8f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8fa:	eddf 7abe 	vldr	s15, [pc, #760]	; 800dbf4 <CRI_chart+0x414>
 800d8fe:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800dbf8 <CRI_chart+0x418>
 800d902:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d90a:	edcd 7a03 	vstr	s15, [sp, #12]
 800d90e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d912:	f241 430f 	movw	r3, #5135	; 0x140f
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	2252      	movs	r2, #82	; 0x52
 800d91a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d91e:	2048      	movs	r0, #72	; 0x48
 800d920:	f00f f80d 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d924:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f2c0 81f3 	blt.w	800dd14 <CRI_chart+0x534>
 800d92e:	2b64      	cmp	r3, #100	; 0x64
 800d930:	f300 81f3 	bgt.w	800dd1a <CRI_chart+0x53a>
 800d934:	ee07 3a90 	vmov	s15, r3
 800d938:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800dbf0 <CRI_chart+0x410>
 800d93c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d940:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d944:	eddf 7aab 	vldr	s15, [pc, #684]	; 800dbf4 <CRI_chart+0x414>
 800d948:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800dbf8 <CRI_chart+0x418>
 800d94c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d954:	edcd 7a03 	vstr	s15, [sp, #12]
 800d958:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d95c:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	2262      	movs	r2, #98	; 0x62
 800d964:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d968:	2058      	movs	r0, #88	; 0x58
 800d96a:	f00e ffe8 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d96e:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d972:	2b00      	cmp	r3, #0
 800d974:	f2c0 81d4 	blt.w	800dd20 <CRI_chart+0x540>
 800d978:	2b64      	cmp	r3, #100	; 0x64
 800d97a:	f300 81d4 	bgt.w	800dd26 <CRI_chart+0x546>
 800d97e:	ee07 3a90 	vmov	s15, r3
 800d982:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800dbf0 <CRI_chart+0x410>
 800d986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d98a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d98e:	eddf 7a99 	vldr	s15, [pc, #612]	; 800dbf4 <CRI_chart+0x414>
 800d992:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800dbf8 <CRI_chart+0x418>
 800d996:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d99a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d99e:	edcd 7a03 	vstr	s15, [sp, #12]
 800d9a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d9a6:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	2272      	movs	r2, #114	; 0x72
 800d9ae:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d9b2:	2068      	movs	r0, #104	; 0x68
 800d9b4:	f00e ffc3 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d9b8:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f2c0 81b5 	blt.w	800dd2c <CRI_chart+0x54c>
 800d9c2:	2b64      	cmp	r3, #100	; 0x64
 800d9c4:	f300 81b5 	bgt.w	800dd32 <CRI_chart+0x552>
 800d9c8:	ee07 3a90 	vmov	s15, r3
 800d9cc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800dbf0 <CRI_chart+0x410>
 800d9d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d9d8:	eddf 7a86 	vldr	s15, [pc, #536]	; 800dbf4 <CRI_chart+0x414>
 800d9dc:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800dbf8 <CRI_chart+0x418>
 800d9e0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d9e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9e8:	edcd 7a03 	vstr	s15, [sp, #12]
 800d9ec:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d9f0:	f248 4357 	movw	r3, #33879	; 0x8457
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	2282      	movs	r2, #130	; 0x82
 800d9f8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d9fc:	2078      	movs	r0, #120	; 0x78
 800d9fe:	f00e ff9e 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800da02:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f2c0 8196 	blt.w	800dd38 <CRI_chart+0x558>
 800da0c:	2b64      	cmp	r3, #100	; 0x64
 800da0e:	f300 8196 	bgt.w	800dd3e <CRI_chart+0x55e>
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800dbf0 <CRI_chart+0x410>
 800da1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da22:	eddf 7a74 	vldr	s15, [pc, #464]	; 800dbf4 <CRI_chart+0x414>
 800da26:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800dbf8 <CRI_chart+0x418>
 800da2a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da32:	edcd 7a03 	vstr	s15, [sp, #12]
 800da36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da3a:	f24a 4377 	movw	r3, #42103	; 0xa477
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	2292      	movs	r2, #146	; 0x92
 800da42:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800da46:	2088      	movs	r0, #136	; 0x88
 800da48:	f00e ff79 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800da4c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800da50:	2b00      	cmp	r3, #0
 800da52:	f2c0 8177 	blt.w	800dd44 <CRI_chart+0x564>
 800da56:	2b64      	cmp	r3, #100	; 0x64
 800da58:	f300 8177 	bgt.w	800dd4a <CRI_chart+0x56a>
 800da5c:	ee07 3a90 	vmov	s15, r3
 800da60:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800dbf0 <CRI_chart+0x410>
 800da64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da6c:	eddf 7a61 	vldr	s15, [pc, #388]	; 800dbf4 <CRI_chart+0x414>
 800da70:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800dbf8 <CRI_chart+0x418>
 800da74:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da7c:	edcd 7a03 	vstr	s15, [sp, #12]
 800da80:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da84:	f24e 1365 	movw	r3, #57701	; 0xe165
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	22a2      	movs	r2, #162	; 0xa2
 800da8c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800da90:	2098      	movs	r0, #152	; 0x98
 800da92:	f00e ff54 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800da96:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f2c0 8158 	blt.w	800dd50 <CRI_chart+0x570>
 800daa0:	2b64      	cmp	r3, #100	; 0x64
 800daa2:	f300 8158 	bgt.w	800dd56 <CRI_chart+0x576>
 800daa6:	ee07 3a90 	vmov	s15, r3
 800daaa:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800dbf0 <CRI_chart+0x410>
 800daae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dab2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dab6:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800dbf4 <CRI_chart+0x414>
 800daba:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800dbf8 <CRI_chart+0x418>
 800dabe:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dac6:	edcd 7a03 	vstr	s15, [sp, #12]
 800daca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dace:	f24e 7323 	movw	r3, #59171	; 0xe723
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	22b2      	movs	r2, #178	; 0xb2
 800dad6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dada:	20a8      	movs	r0, #168	; 0xa8
 800dadc:	f00e ff2f 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800dae0:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f2c0 8139 	blt.w	800dd5c <CRI_chart+0x57c>
 800daea:	2b64      	cmp	r3, #100	; 0x64
 800daec:	f300 8139 	bgt.w	800dd62 <CRI_chart+0x582>
 800daf0:	ee07 3a90 	vmov	s15, r3
 800daf4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800dbf0 <CRI_chart+0x410>
 800daf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dafc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db00:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800dbf4 <CRI_chart+0x414>
 800db04:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800dbf8 <CRI_chart+0x418>
 800db08:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db10:	edcd 7a03 	vstr	s15, [sp, #12]
 800db14:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db18:	f241 4327 	movw	r3, #5159	; 0x1427
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	22c2      	movs	r2, #194	; 0xc2
 800db20:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800db24:	20b8      	movs	r0, #184	; 0xb8
 800db26:	f00e ff0a 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800db2a:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	f2c0 811a 	blt.w	800dd68 <CRI_chart+0x588>
 800db34:	2b64      	cmp	r3, #100	; 0x64
 800db36:	f300 811a 	bgt.w	800dd6e <CRI_chart+0x58e>
 800db3a:	ee07 3a90 	vmov	s15, r3
 800db3e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800dbf0 <CRI_chart+0x410>
 800db42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db4a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800dbf4 <CRI_chart+0x414>
 800db4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800dbf8 <CRI_chart+0x418>
 800db52:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db5a:	edcd 7a03 	vstr	s15, [sp, #12]
 800db5e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db62:	f242 138d 	movw	r3, #8589	; 0x218d
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	22d2      	movs	r2, #210	; 0xd2
 800db6a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800db6e:	20c8      	movs	r0, #200	; 0xc8
 800db70:	f00e fee5 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800db74:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f2c0 80fb 	blt.w	800dd74 <CRI_chart+0x594>
 800db7e:	2b64      	cmp	r3, #100	; 0x64
 800db80:	f300 80fb 	bgt.w	800dd7a <CRI_chart+0x59a>
 800db84:	ee07 3a90 	vmov	s15, r3
 800db88:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800dbf0 <CRI_chart+0x410>
 800db8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db94:	eddf 7a17 	vldr	s15, [pc, #92]	; 800dbf4 <CRI_chart+0x414>
 800db98:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800dbf8 <CRI_chart+0x418>
 800db9c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dba4:	edcd 7a03 	vstr	s15, [sp, #12]
 800dba8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dbac:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	22e2      	movs	r2, #226	; 0xe2
 800dbb4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dbb8:	20d8      	movs	r0, #216	; 0xd8
 800dbba:	f00e fec0 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800dbbe:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f2c0 80dc 	blt.w	800dd80 <CRI_chart+0x5a0>
 800dbc8:	2b64      	cmp	r3, #100	; 0x64
 800dbca:	f300 80dc 	bgt.w	800dd86 <CRI_chart+0x5a6>
 800dbce:	ee07 3a90 	vmov	s15, r3
 800dbd2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800dbf0 <CRI_chart+0x410>
 800dbd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dbde:	eddf 7a05 	vldr	s15, [pc, #20]	; 800dbf4 <CRI_chart+0x414>
 800dbe2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800dbf8 <CRI_chart+0x418>
 800dbe6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dbea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbee:	e00b      	b.n	800dc08 <CRI_chart+0x428>
 800dbf0:	42c80000 	.word	0x42c80000
 800dbf4:	43cd0000 	.word	0x43cd0000
 800dbf8:	43988000 	.word	0x43988000
 800dbfc:	42c80000 	.word	0x42c80000
 800dc00:	43cd0000 	.word	0x43cd0000
 800dc04:	43988000 	.word	0x43988000
 800dc08:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc0c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc10:	f641 3346 	movw	r3, #6982	; 0x1b46
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	22f2      	movs	r2, #242	; 0xf2
 800dc18:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dc1c:	20e8      	movs	r0, #232	; 0xe8
 800dc1e:	f00e fe8e 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800dc22:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f2c0 80b0 	blt.w	800dd8c <CRI_chart+0x5ac>
 800dc2c:	2b64      	cmp	r3, #100	; 0x64
 800dc2e:	f300 80b0 	bgt.w	800dd92 <CRI_chart+0x5b2>
 800dc32:	ee07 3a90 	vmov	s15, r3
 800dc36:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800dbfc <CRI_chart+0x41c>
 800dc3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc42:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800dc00 <CRI_chart+0x420>
 800dc46:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800dc04 <CRI_chart+0x424>
 800dc4a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc52:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc56:	f8bd 100c 	ldrh.w	r1, [sp, #12]
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800dc5a:	4f52      	ldr	r7, [pc, #328]	; (800dda4 <CRI_chart+0x5c4>)
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800dc5c:	ed9f 8a52 	vldr	s16, [pc, #328]	; 800dda8 <CRI_chart+0x5c8>
 800dc60:	eddf 8a52 	vldr	s17, [pc, #328]	; 800ddac <CRI_chart+0x5cc>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800dc64:	f24f 6311 	movw	r3, #62993	; 0xf611
 800dc68:	f44f 7281 	mov.w	r2, #258	; 0x102
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	20f8      	movs	r0, #248	; 0xf8
 800dc70:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dc74:	f00e fe63 	bl	801c93e <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800dc78:	484d      	ldr	r0, [pc, #308]	; (800ddb0 <CRI_chart+0x5d0>)
 800dc7a:	f00f f889 	bl	801cd90 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800dc7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dc82:	f00f f88b 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800dc86:	2063      	movs	r0, #99	; 0x63
 800dc88:	f00f f88e 	bl	801cda8 <TFT_SetBackColor>
 800dc8c:	2418      	movs	r4, #24
			sprintf (buffer, "%d", GraphData[i]);
 800dc8e:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800dc92:	4639      	mov	r1, r7
 800dc94:	4630      	mov	r0, r6
 800dc96:	f012 fcbb 	bl	8020610 <sprintf>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800dc9a:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	db7a      	blt.n	800dd98 <CRI_chart+0x5b8>
 800dca2:	2b64      	cmp	r3, #100	; 0x64
 800dca4:	dc7b      	bgt.n	800dd9e <CRI_chart+0x5be>
 800dca6:	ee07 3a90 	vmov	s15, r3
 800dcaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcae:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800dcb2:	eddf 7a40 	vldr	s15, [pc, #256]	; 800ddb4 <CRI_chart+0x5d4>
 800dcb6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800dcba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcbe:	edcd 7a03 	vstr	s15, [sp, #12]
 800dcc2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	3410      	adds	r4, #16
 800dcca:	2303      	movs	r3, #3
 800dccc:	4632      	mov	r2, r6
 800dcce:	b2a4      	uxth	r4, r4
 800dcd0:	f00f f980 	bl	801cfd4 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800dcd4:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800dcd8:	d1d9      	bne.n	800dc8e <CRI_chart+0x4ae>
					X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800dcda:	b006      	add	sp, #24
 800dcdc:	ecbd 8b02 	vpop	{d8}
 800dce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800dce4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dce8:	e5a4      	b.n	800d834 <CRI_chart+0x54>
 800dcea:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dcee:	e5a1      	b.n	800d834 <CRI_chart+0x54>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800dcf0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dcf4:	e5c3      	b.n	800d87e <CRI_chart+0x9e>
 800dcf6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dcfa:	e5c0      	b.n	800d87e <CRI_chart+0x9e>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800dcfc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd00:	e5e2      	b.n	800d8c8 <CRI_chart+0xe8>
 800dd02:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd06:	e5df      	b.n	800d8c8 <CRI_chart+0xe8>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800dd08:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd0c:	e601      	b.n	800d912 <CRI_chart+0x132>
 800dd0e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd12:	e5fe      	b.n	800d912 <CRI_chart+0x132>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800dd14:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd18:	e620      	b.n	800d95c <CRI_chart+0x17c>
 800dd1a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd1e:	e61d      	b.n	800d95c <CRI_chart+0x17c>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800dd20:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd24:	e63f      	b.n	800d9a6 <CRI_chart+0x1c6>
 800dd26:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd2a:	e63c      	b.n	800d9a6 <CRI_chart+0x1c6>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800dd2c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd30:	e65e      	b.n	800d9f0 <CRI_chart+0x210>
 800dd32:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd36:	e65b      	b.n	800d9f0 <CRI_chart+0x210>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800dd38:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd3c:	e67d      	b.n	800da3a <CRI_chart+0x25a>
 800dd3e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd42:	e67a      	b.n	800da3a <CRI_chart+0x25a>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800dd44:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd48:	e69c      	b.n	800da84 <CRI_chart+0x2a4>
 800dd4a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd4e:	e699      	b.n	800da84 <CRI_chart+0x2a4>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800dd50:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd54:	e6bb      	b.n	800dace <CRI_chart+0x2ee>
 800dd56:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd5a:	e6b8      	b.n	800dace <CRI_chart+0x2ee>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800dd5c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd60:	e6da      	b.n	800db18 <CRI_chart+0x338>
 800dd62:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd66:	e6d7      	b.n	800db18 <CRI_chart+0x338>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800dd68:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd6c:	e6f9      	b.n	800db62 <CRI_chart+0x382>
 800dd6e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd72:	e6f6      	b.n	800db62 <CRI_chart+0x382>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800dd74:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd78:	e718      	b.n	800dbac <CRI_chart+0x3cc>
 800dd7a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd7e:	e715      	b.n	800dbac <CRI_chart+0x3cc>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800dd80:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd84:	e744      	b.n	800dc10 <CRI_chart+0x430>
 800dd86:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd8a:	e741      	b.n	800dc10 <CRI_chart+0x430>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800dd8c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800dd90:	e763      	b.n	800dc5a <CRI_chart+0x47a>
 800dd92:	f44f 719b 	mov.w	r1, #310	; 0x136
 800dd96:	e760      	b.n	800dc5a <CRI_chart+0x47a>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800dd98:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800dd9c:	e793      	b.n	800dcc6 <CRI_chart+0x4e6>
 800dd9e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800dda2:	e790      	b.n	800dcc6 <CRI_chart+0x4e6>
 800dda4:	08025309 	.word	0x08025309
 800dda8:	42c80000 	.word	0x42c80000
 800ddac:	43988000 	.word	0x43988000
 800ddb0:	20000210 	.word	0x20000210
 800ddb4:	43c80000 	.word	0x43c80000
		if(direction == 0x01){TFT_direction = 0x01;} 
 800ddb8:	2801      	cmp	r0, #1
 800ddba:	4fed      	ldr	r7, [pc, #948]	; (800e170 <CRI_chart+0x990>)
		else {TFT_direction = 0x02;}
 800ddbc:	bf16      	itet	ne
 800ddbe:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800ddc0:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800ddc2:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800ddc4:	f991 3000 	ldrsb.w	r3, [r1]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f2c0 8260 	blt.w	800e28e <CRI_chart+0xaae>
 800ddce:	2b64      	cmp	r3, #100	; 0x64
 800ddd0:	f300 825f 	bgt.w	800e292 <CRI_chart+0xab2>
 800ddd4:	ee07 3a90 	vmov	s15, r3
 800ddd8:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800e174 <CRI_chart+0x994>
 800dddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dde0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dde4:	eddf 7ae4 	vldr	s15, [pc, #912]	; 800e178 <CRI_chart+0x998>
 800dde8:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800e17c <CRI_chart+0x99c>
 800ddec:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ddf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddf4:	edcd 7a03 	vstr	s15, [sp, #12]
 800ddf8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ddfc:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	2262      	movs	r2, #98	; 0x62
 800de04:	23fc      	movs	r3, #252	; 0xfc
 800de06:	2057      	movs	r0, #87	; 0x57
 800de08:	f00e fd99 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800de0c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800de10:	2b00      	cmp	r3, #0
 800de12:	f2c0 8240 	blt.w	800e296 <CRI_chart+0xab6>
 800de16:	2b64      	cmp	r3, #100	; 0x64
 800de18:	f300 823f 	bgt.w	800e29a <CRI_chart+0xaba>
 800de1c:	ee07 3a90 	vmov	s15, r3
 800de20:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800e174 <CRI_chart+0x994>
 800de24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800de2c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800e178 <CRI_chart+0x998>
 800de30:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800e17c <CRI_chart+0x99c>
 800de34:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800de38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de3c:	edcd 7a03 	vstr	s15, [sp, #12]
 800de40:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800de44:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	2278      	movs	r2, #120	; 0x78
 800de4c:	23fc      	movs	r3, #252	; 0xfc
 800de4e:	206d      	movs	r0, #109	; 0x6d
 800de50:	f00e fd75 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800de54:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f2c0 8220 	blt.w	800e29e <CRI_chart+0xabe>
 800de5e:	2b64      	cmp	r3, #100	; 0x64
 800de60:	f300 821f 	bgt.w	800e2a2 <CRI_chart+0xac2>
 800de64:	ee07 3a90 	vmov	s15, r3
 800de68:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800e174 <CRI_chart+0x994>
 800de6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800de74:	eddf 7ac0 	vldr	s15, [pc, #768]	; 800e178 <CRI_chart+0x998>
 800de78:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800e17c <CRI_chart+0x99c>
 800de7c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800de80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de84:	edcd 7a03 	vstr	s15, [sp, #12]
 800de88:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800de8c:	f64a 5388 	movw	r3, #44424	; 0xad88
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	228e      	movs	r2, #142	; 0x8e
 800de94:	23fc      	movs	r3, #252	; 0xfc
 800de96:	2083      	movs	r0, #131	; 0x83
 800de98:	f00e fd51 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800de9c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f2c0 8200 	blt.w	800e2a6 <CRI_chart+0xac6>
 800dea6:	2b64      	cmp	r3, #100	; 0x64
 800dea8:	f300 81ff 	bgt.w	800e2aa <CRI_chart+0xaca>
 800deac:	ee07 3a90 	vmov	s15, r3
 800deb0:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800e174 <CRI_chart+0x994>
 800deb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800deb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800debc:	eddf 7aae 	vldr	s15, [pc, #696]	; 800e178 <CRI_chart+0x998>
 800dec0:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800e17c <CRI_chart+0x99c>
 800dec4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800decc:	edcd 7a03 	vstr	s15, [sp, #12]
 800ded0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ded4:	f241 430f 	movw	r3, #5135	; 0x140f
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	22a4      	movs	r2, #164	; 0xa4
 800dedc:	23fc      	movs	r3, #252	; 0xfc
 800dede:	2099      	movs	r0, #153	; 0x99
 800dee0:	f00e fd2d 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800dee4:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f2c0 81e0 	blt.w	800e2ae <CRI_chart+0xace>
 800deee:	2b64      	cmp	r3, #100	; 0x64
 800def0:	f300 81df 	bgt.w	800e2b2 <CRI_chart+0xad2>
 800def4:	ee07 3a90 	vmov	s15, r3
 800def8:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800e174 <CRI_chart+0x994>
 800defc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800df04:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800e178 <CRI_chart+0x998>
 800df08:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800e17c <CRI_chart+0x99c>
 800df0c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800df10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df14:	edcd 7a03 	vstr	s15, [sp, #12]
 800df18:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800df1c:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	22ba      	movs	r2, #186	; 0xba
 800df24:	23fc      	movs	r3, #252	; 0xfc
 800df26:	20af      	movs	r0, #175	; 0xaf
 800df28:	f00e fd09 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800df2c:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800df30:	2b00      	cmp	r3, #0
 800df32:	f2c0 81c0 	blt.w	800e2b6 <CRI_chart+0xad6>
 800df36:	2b64      	cmp	r3, #100	; 0x64
 800df38:	f300 81bf 	bgt.w	800e2ba <CRI_chart+0xada>
 800df3c:	ee07 3a90 	vmov	s15, r3
 800df40:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800e174 <CRI_chart+0x994>
 800df44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800df4c:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800e178 <CRI_chart+0x998>
 800df50:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e17c <CRI_chart+0x99c>
 800df54:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800df58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df5c:	edcd 7a03 	vstr	s15, [sp, #12]
 800df60:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800df64:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	22d0      	movs	r2, #208	; 0xd0
 800df6c:	23fc      	movs	r3, #252	; 0xfc
 800df6e:	20c5      	movs	r0, #197	; 0xc5
 800df70:	f00e fce5 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800df74:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f2c0 81a0 	blt.w	800e2be <CRI_chart+0xade>
 800df7e:	2b64      	cmp	r3, #100	; 0x64
 800df80:	f300 819f 	bgt.w	800e2c2 <CRI_chart+0xae2>
 800df84:	ee07 3a90 	vmov	s15, r3
 800df88:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800e174 <CRI_chart+0x994>
 800df8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800df94:	eddf 7a78 	vldr	s15, [pc, #480]	; 800e178 <CRI_chart+0x998>
 800df98:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800e17c <CRI_chart+0x99c>
 800df9c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dfa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfa4:	edcd 7a03 	vstr	s15, [sp, #12]
 800dfa8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dfac:	f248 4357 	movw	r3, #33879	; 0x8457
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	22e6      	movs	r2, #230	; 0xe6
 800dfb4:	23fc      	movs	r3, #252	; 0xfc
 800dfb6:	20db      	movs	r0, #219	; 0xdb
 800dfb8:	f00e fcc1 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800dfbc:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f2c0 8180 	blt.w	800e2c6 <CRI_chart+0xae6>
 800dfc6:	2b64      	cmp	r3, #100	; 0x64
 800dfc8:	f300 817f 	bgt.w	800e2ca <CRI_chart+0xaea>
 800dfcc:	ee07 3a90 	vmov	s15, r3
 800dfd0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800e174 <CRI_chart+0x994>
 800dfd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dfdc:	eddf 7a66 	vldr	s15, [pc, #408]	; 800e178 <CRI_chart+0x998>
 800dfe0:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800e17c <CRI_chart+0x99c>
 800dfe4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dfe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfec:	edcd 7a03 	vstr	s15, [sp, #12]
 800dff0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dff4:	f24a 4377 	movw	r3, #42103	; 0xa477
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	23fc      	movs	r3, #252	; 0xfc
 800dffc:	461a      	mov	r2, r3
 800dffe:	20f1      	movs	r0, #241	; 0xf1
 800e000:	f00e fc9d 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800e004:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f2c0 8160 	blt.w	800e2ce <CRI_chart+0xaee>
 800e00e:	2b64      	cmp	r3, #100	; 0x64
 800e010:	f300 815f 	bgt.w	800e2d2 <CRI_chart+0xaf2>
 800e014:	ee07 3a90 	vmov	s15, r3
 800e018:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800e174 <CRI_chart+0x994>
 800e01c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e020:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e024:	eddf 7a54 	vldr	s15, [pc, #336]	; 800e178 <CRI_chart+0x998>
 800e028:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800e17c <CRI_chart+0x99c>
 800e02c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e034:	edcd 7a03 	vstr	s15, [sp, #12]
 800e038:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e03c:	f24e 1365 	movw	r3, #57701	; 0xe165
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e046:	23fc      	movs	r3, #252	; 0xfc
 800e048:	f240 1007 	movw	r0, #263	; 0x107
 800e04c:	f00e fc77 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800e050:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800e054:	2b00      	cmp	r3, #0
 800e056:	f2c0 813e 	blt.w	800e2d6 <CRI_chart+0xaf6>
 800e05a:	2b64      	cmp	r3, #100	; 0x64
 800e05c:	f300 813d 	bgt.w	800e2da <CRI_chart+0xafa>
 800e060:	ee07 3a90 	vmov	s15, r3
 800e064:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800e174 <CRI_chart+0x994>
 800e068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e06c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e070:	eddf 7a41 	vldr	s15, [pc, #260]	; 800e178 <CRI_chart+0x998>
 800e074:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e17c <CRI_chart+0x99c>
 800e078:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e07c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e080:	edcd 7a03 	vstr	s15, [sp, #12]
 800e084:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e088:	f24e 7323 	movw	r3, #59171	; 0xe723
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e092:	23fc      	movs	r3, #252	; 0xfc
 800e094:	f240 101d 	movw	r0, #285	; 0x11d
 800e098:	f00e fc51 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800e09c:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f2c0 811c 	blt.w	800e2de <CRI_chart+0xafe>
 800e0a6:	2b64      	cmp	r3, #100	; 0x64
 800e0a8:	f300 811b 	bgt.w	800e2e2 <CRI_chart+0xb02>
 800e0ac:	ee07 3a90 	vmov	s15, r3
 800e0b0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800e174 <CRI_chart+0x994>
 800e0b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e0bc:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e178 <CRI_chart+0x998>
 800e0c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800e17c <CRI_chart+0x99c>
 800e0c4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e0c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0cc:	edcd 7a03 	vstr	s15, [sp, #12]
 800e0d0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e0d4:	f241 4327 	movw	r3, #5159	; 0x1427
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800e0de:	23fc      	movs	r3, #252	; 0xfc
 800e0e0:	f240 1033 	movw	r0, #307	; 0x133
 800e0e4:	f00e fc2b 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800e0e8:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	f2c0 80fa 	blt.w	800e2e6 <CRI_chart+0xb06>
 800e0f2:	2b64      	cmp	r3, #100	; 0x64
 800e0f4:	f300 80f9 	bgt.w	800e2ea <CRI_chart+0xb0a>
 800e0f8:	ee07 3a90 	vmov	s15, r3
 800e0fc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e174 <CRI_chart+0x994>
 800e100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e104:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e108:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800e178 <CRI_chart+0x998>
 800e10c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800e17c <CRI_chart+0x99c>
 800e110:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e118:	edcd 7a03 	vstr	s15, [sp, #12]
 800e11c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e120:	f242 138d 	movw	r3, #8589	; 0x218d
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800e12a:	23fc      	movs	r3, #252	; 0xfc
 800e12c:	f240 1049 	movw	r0, #329	; 0x149
 800e130:	f00e fc05 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800e134:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f2c0 80d8 	blt.w	800e2ee <CRI_chart+0xb0e>
 800e13e:	2b64      	cmp	r3, #100	; 0x64
 800e140:	f300 80d7 	bgt.w	800e2f2 <CRI_chart+0xb12>
 800e144:	ee07 3a90 	vmov	s15, r3
 800e148:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800e174 <CRI_chart+0x994>
 800e14c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e150:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e154:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e178 <CRI_chart+0x998>
 800e158:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800e17c <CRI_chart+0x99c>
 800e15c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e164:	edcd 7a03 	vstr	s15, [sp, #12]
 800e168:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e16c:	e008      	b.n	800e180 <CRI_chart+0x9a0>
 800e16e:	bf00      	nop
 800e170:	200056a0 	.word	0x200056a0
 800e174:	42c80000 	.word	0x42c80000
 800e178:	437e0000 	.word	0x437e0000
 800e17c:	43520000 	.word	0x43520000
 800e180:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e18a:	23fc      	movs	r3, #252	; 0xfc
 800e18c:	f240 105f 	movw	r0, #351	; 0x15f
 800e190:	f00e fbd5 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800e194:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f2c0 80ac 	blt.w	800e2f6 <CRI_chart+0xb16>
 800e19e:	2b64      	cmp	r3, #100	; 0x64
 800e1a0:	f300 80ab 	bgt.w	800e2fa <CRI_chart+0xb1a>
 800e1a4:	ee07 3a90 	vmov	s15, r3
 800e1a8:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800e174 <CRI_chart+0x994>
 800e1ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e1b4:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800e178 <CRI_chart+0x998>
 800e1b8:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 800e17c <CRI_chart+0x99c>
 800e1bc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e1c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1c4:	edcd 7a03 	vstr	s15, [sp, #12]
 800e1c8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e1cc:	f641 3346 	movw	r3, #6982	; 0x1b46
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800e1d6:	23fc      	movs	r3, #252	; 0xfc
 800e1d8:	f240 1075 	movw	r0, #373	; 0x175
 800e1dc:	f00e fbaf 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e1e0:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f2c0 808a 	blt.w	800e2fe <CRI_chart+0xb1e>
 800e1ea:	2b64      	cmp	r3, #100	; 0x64
 800e1ec:	f300 8089 	bgt.w	800e302 <CRI_chart+0xb22>
 800e1f0:	ee07 3a90 	vmov	s15, r3
 800e1f4:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 800e174 <CRI_chart+0x994>
 800e1f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e200:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 800e178 <CRI_chart+0x998>
 800e204:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800e17c <CRI_chart+0x99c>
 800e208:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e20c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e210:	edcd 7a03 	vstr	s15, [sp, #12]
 800e214:	f8bd 100c 	ldrh.w	r1, [sp, #12]
					sprintf (buffer, "%d", GraphData[i]);
 800e218:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800e31c <CRI_chart+0xb3c>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e21c:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800e310 <CRI_chart+0xb30>
 800e220:	eddf 8a3c 	vldr	s17, [pc, #240]	; 800e314 <CRI_chart+0xb34>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e224:	f24f 6311 	movw	r3, #62993	; 0xf611
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800e22e:	23fc      	movs	r3, #252	; 0xfc
 800e230:	f240 108b 	movw	r0, #395	; 0x18b
 800e234:	f00e fb83 	bl	801c93e <TFT_FillRectangle>
 800e238:	2457      	movs	r4, #87	; 0x57
					sprintf (buffer, "%d", GraphData[i]);
 800e23a:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800e23e:	4641      	mov	r1, r8
 800e240:	4630      	mov	r0, r6
 800e242:	f012 f9e5 	bl	8020610 <sprintf>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e246:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	db5b      	blt.n	800e306 <CRI_chart+0xb26>
 800e24e:	2b64      	cmp	r3, #100	; 0x64
 800e250:	dc5b      	bgt.n	800e30a <CRI_chart+0xb2a>
 800e252:	ee07 3a90 	vmov	s15, r3
 800e256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e25a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800e25e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e318 <CRI_chart+0xb38>
 800e262:	eee7 7a68 	vfms.f32	s15, s14, s17
 800e266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e26a:	edcd 7a03 	vstr	s15, [sp, #12]
 800e26e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e272:	2303      	movs	r3, #3
 800e274:	4620      	mov	r0, r4
 800e276:	4632      	mov	r2, r6
 800e278:	3416      	adds	r4, #22
 800e27a:	f00e feab 	bl	801cfd4 <TFT_DisplayString>
 800e27e:	b2a4      	uxth	r4, r4
		for(uint8_t i = 0; i<=14; i++)
 800e280:	f240 13a1 	movw	r3, #417	; 0x1a1
 800e284:	429c      	cmp	r4, r3
 800e286:	d1d8      	bne.n	800e23a <CRI_chart+0xa5a>
		TFT_direction = 0x00;
 800e288:	2300      	movs	r3, #0
 800e28a:	703b      	strb	r3, [r7, #0]
}
 800e28c:	e525      	b.n	800dcda <CRI_chart+0x4fa>
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800e28e:	21fe      	movs	r1, #254	; 0xfe
 800e290:	e5b4      	b.n	800ddfc <CRI_chart+0x61c>
 800e292:	219a      	movs	r1, #154	; 0x9a
 800e294:	e5b2      	b.n	800ddfc <CRI_chart+0x61c>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800e296:	21fe      	movs	r1, #254	; 0xfe
 800e298:	e5d4      	b.n	800de44 <CRI_chart+0x664>
 800e29a:	219a      	movs	r1, #154	; 0x9a
 800e29c:	e5d2      	b.n	800de44 <CRI_chart+0x664>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800e29e:	21fe      	movs	r1, #254	; 0xfe
 800e2a0:	e5f4      	b.n	800de8c <CRI_chart+0x6ac>
 800e2a2:	219a      	movs	r1, #154	; 0x9a
 800e2a4:	e5f2      	b.n	800de8c <CRI_chart+0x6ac>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800e2a6:	21fe      	movs	r1, #254	; 0xfe
 800e2a8:	e614      	b.n	800ded4 <CRI_chart+0x6f4>
 800e2aa:	219a      	movs	r1, #154	; 0x9a
 800e2ac:	e612      	b.n	800ded4 <CRI_chart+0x6f4>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800e2ae:	21fe      	movs	r1, #254	; 0xfe
 800e2b0:	e634      	b.n	800df1c <CRI_chart+0x73c>
 800e2b2:	219a      	movs	r1, #154	; 0x9a
 800e2b4:	e632      	b.n	800df1c <CRI_chart+0x73c>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800e2b6:	21fe      	movs	r1, #254	; 0xfe
 800e2b8:	e654      	b.n	800df64 <CRI_chart+0x784>
 800e2ba:	219a      	movs	r1, #154	; 0x9a
 800e2bc:	e652      	b.n	800df64 <CRI_chart+0x784>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800e2be:	21fe      	movs	r1, #254	; 0xfe
 800e2c0:	e674      	b.n	800dfac <CRI_chart+0x7cc>
 800e2c2:	219a      	movs	r1, #154	; 0x9a
 800e2c4:	e672      	b.n	800dfac <CRI_chart+0x7cc>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800e2c6:	21fe      	movs	r1, #254	; 0xfe
 800e2c8:	e694      	b.n	800dff4 <CRI_chart+0x814>
 800e2ca:	219a      	movs	r1, #154	; 0x9a
 800e2cc:	e692      	b.n	800dff4 <CRI_chart+0x814>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800e2ce:	21fe      	movs	r1, #254	; 0xfe
 800e2d0:	e6b4      	b.n	800e03c <CRI_chart+0x85c>
 800e2d2:	219a      	movs	r1, #154	; 0x9a
 800e2d4:	e6b2      	b.n	800e03c <CRI_chart+0x85c>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800e2d6:	21fe      	movs	r1, #254	; 0xfe
 800e2d8:	e6d6      	b.n	800e088 <CRI_chart+0x8a8>
 800e2da:	219a      	movs	r1, #154	; 0x9a
 800e2dc:	e6d4      	b.n	800e088 <CRI_chart+0x8a8>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800e2de:	21fe      	movs	r1, #254	; 0xfe
 800e2e0:	e6f8      	b.n	800e0d4 <CRI_chart+0x8f4>
 800e2e2:	219a      	movs	r1, #154	; 0x9a
 800e2e4:	e6f6      	b.n	800e0d4 <CRI_chart+0x8f4>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800e2e6:	21fe      	movs	r1, #254	; 0xfe
 800e2e8:	e71a      	b.n	800e120 <CRI_chart+0x940>
 800e2ea:	219a      	movs	r1, #154	; 0x9a
 800e2ec:	e718      	b.n	800e120 <CRI_chart+0x940>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800e2ee:	21fe      	movs	r1, #254	; 0xfe
 800e2f0:	e746      	b.n	800e180 <CRI_chart+0x9a0>
 800e2f2:	219a      	movs	r1, #154	; 0x9a
 800e2f4:	e744      	b.n	800e180 <CRI_chart+0x9a0>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800e2f6:	21fe      	movs	r1, #254	; 0xfe
 800e2f8:	e768      	b.n	800e1cc <CRI_chart+0x9ec>
 800e2fa:	219a      	movs	r1, #154	; 0x9a
 800e2fc:	e766      	b.n	800e1cc <CRI_chart+0x9ec>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800e2fe:	21fe      	movs	r1, #254	; 0xfe
 800e300:	e78a      	b.n	800e218 <CRI_chart+0xa38>
 800e302:	219a      	movs	r1, #154	; 0x9a
 800e304:	e788      	b.n	800e218 <CRI_chart+0xa38>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800e306:	21f4      	movs	r1, #244	; 0xf4
 800e308:	e7b3      	b.n	800e272 <CRI_chart+0xa92>
 800e30a:	2190      	movs	r1, #144	; 0x90
 800e30c:	e7b1      	b.n	800e272 <CRI_chart+0xa92>
 800e30e:	bf00      	nop
 800e310:	42c80000 	.word	0x42c80000
 800e314:	43570000 	.word	0x43570000
 800e318:	43740000 	.word	0x43740000
 800e31c:	08025309 	.word	0x08025309

0800e320 <CRI_Draw>:

void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e324:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e326:	2363      	movs	r3, #99	; 0x63
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e328:	4604      	mov	r4, r0
 800e32a:	4688      	mov	r8, r1
 800e32c:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e32e:	213a      	movs	r1, #58	; 0x3a
 800e330:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	2005      	movs	r0, #5
 800e338:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800e33c:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800e340:	f00e fafd 	bl	801c93e <TFT_FillRectangle>
	CRI_Axes(direction);
 800e344:	4620      	mov	r0, r4
 800e346:	f7fe fe75 	bl	800d034 <CRI_Axes>
	CRI_Axes_Text(direction);
 800e34a:	4620      	mov	r0, r4
 800e34c:	f7fe ffee 	bl	800d32c <CRI_Axes_Text>
	CRI_chart(direction, GraphData);
 800e350:	4641      	mov	r1, r8
 800e352:	4620      	mov	r0, r4
 800e354:	f7ff fa44 	bl	800d7e0 <CRI_chart>
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800e358:	463b      	mov	r3, r7
 800e35a:	4632      	mov	r2, r6
 800e35c:	4629      	mov	r1, r5
 800e35e:	4620      	mov	r0, r4
 800e360:	b002      	add	sp, #8
 800e362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800e366:	f7fe bf03 	b.w	800d170 <CRI_Axes_Measure>
	...

0800e36c <Calculate_EL_Day>:
extern float colorimetry_xy1964[2], colorimetry_uv[2], colorimetry_uv1976[2], colorimetry_xy1931[2];
extern float calibratre_x_1931[1024], Spectral_day[1024], calibratre_z_1931[1024];
	
float Calculate_EL_Day(float R_data[], float Spectral_Day_const[])
{
	sum = 0;
 800e36c:	4a0c      	ldr	r2, [pc, #48]	; (800e3a0 <Calculate_EL_Day+0x34>)
 800e36e:	2300      	movs	r3, #0
 800e370:	6013      	str	r3, [r2, #0]
 800e372:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800e374:	ecb0 7a01 	vldmia	r0!, {s14}
 800e378:	ecf1 7a01 	vldmia	r1!, {s15}
 800e37c:	ed92 0a00 	vldr	s0, [r2]
 800e380:	eea7 0a27 	vfma.f32	s0, s14, s15
	for ( iq = 0; iq < 1024; iq++)
 800e384:	3301      	adds	r3, #1
 800e386:	b29b      	uxth	r3, r3
 800e388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800e38c:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e390:	d1f0      	bne.n	800e374 <Calculate_EL_Day+0x8>
 800e392:	4a04      	ldr	r2, [pc, #16]	; (800e3a4 <Calculate_EL_Day+0x38>)
	}
	return 683*sum;
}
 800e394:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e3a8 <Calculate_EL_Day+0x3c>
 800e398:	8013      	strh	r3, [r2, #0]
 800e39a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e39e:	4770      	bx	lr
 800e3a0:	20090a9c 	.word	0x20090a9c
 800e3a4:	20090a94 	.word	0x20090a94
 800e3a8:	442ac000 	.word	0x442ac000

0800e3ac <Calculate_EL_Day_Wt>:


float Calculate_EL_Day_Wt(float R_data[])
{
	sum = 0;
 800e3ac:	4a09      	ldr	r2, [pc, #36]	; (800e3d4 <Calculate_EL_Day_Wt+0x28>)
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	6013      	str	r3, [r2, #0]
 800e3b2:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]);
 800e3b4:	ecf0 7a01 	vldmia	r0!, {s15}
 800e3b8:	ed92 0a00 	vldr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e3bc:	3301      	adds	r3, #1
		sum = sum + (R_data[iq]);
 800e3be:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( iq = 0; iq < 1024; iq++)
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]);
 800e3c8:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e3cc:	d1f2      	bne.n	800e3b4 <Calculate_EL_Day_Wt+0x8>
 800e3ce:	4a02      	ldr	r2, [pc, #8]	; (800e3d8 <Calculate_EL_Day_Wt+0x2c>)
 800e3d0:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e3d2:	4770      	bx	lr
 800e3d4:	20090a9c 	.word	0x20090a9c
 800e3d8:	20090a94 	.word	0x20090a94

0800e3dc <Calculate_EL_Night>:

float Calculate_EL_Night(float R_data[], float Spectral_Night_const[])
{
	sum = 0;
 800e3dc:	4a0c      	ldr	r2, [pc, #48]	; (800e410 <Calculate_EL_Night+0x34>)
 800e3de:	2300      	movs	r3, #0
 800e3e0:	6013      	str	r3, [r2, #0]
 800e3e2:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800e3e4:	ecb0 7a01 	vldmia	r0!, {s14}
 800e3e8:	ecf1 7a01 	vldmia	r1!, {s15}
 800e3ec:	ed92 0a00 	vldr	s0, [r2]
 800e3f0:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800e3fc:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e400:	d1f0      	bne.n	800e3e4 <Calculate_EL_Night+0x8>
 800e402:	4a04      	ldr	r2, [pc, #16]	; (800e414 <Calculate_EL_Night+0x38>)
	}
	return 1700*sum;
}
 800e404:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e418 <Calculate_EL_Night+0x3c>
 800e408:	8013      	strh	r3, [r2, #0]
 800e40a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e40e:	4770      	bx	lr
 800e410:	20090a9c 	.word	0x20090a9c
 800e414:	20090a94 	.word	0x20090a94
 800e418:	44d48000 	.word	0x44d48000

0800e41c <Calculate_SP>:

float Calculate_SP(float EL_day_data, float EL_Night_data)
{
	return (EL_day_data !=0) ? EL_Night_data/EL_day_data: 0;
 800e41c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e424:	bf14      	ite	ne
 800e426:	eec0 7a80 	vdivne.f32	s15, s1, s0
 800e42a:	eddf 7a02 	vldreq	s15, [pc, #8]	; 800e434 <Calculate_SP+0x18>
}
 800e42e:	eeb0 0a67 	vmov.f32	s0, s15
 800e432:	4770      	bx	lr
 800e434:	00000000 	.word	0x00000000

0800e438 <Calculate_PPFD_PPL>:

float Calculate_PPFD_PPL(float R_data[], float Wavelenght[])
{
 800e438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t it = 0, beg = 0, end = 1024;

	while(Wavelenght[it]<400)
 800e43c:	eddf 7a30 	vldr	s15, [pc, #192]	; 800e500 <Calculate_PPFD_PPL+0xc8>
 800e440:	2300      	movs	r3, #0
 800e442:	b29c      	uxth	r4, r3
 800e444:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 800e448:	ed92 7a00 	vldr	s14, [r2]
 800e44c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e454:	f103 0301 	add.w	r3, r3, #1
 800e458:	d4f3      	bmi.n	800e442 <Calculate_PPFD_PPL+0xa>
	{
		it++;
	}
	beg = it+1;
 800e45a:	3401      	adds	r4, #1

	it = 1024;
	while(Wavelenght[it]>700)
 800e45c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e504 <Calculate_PPFD_PPL+0xcc>
	beg = it+1;
 800e460:	b2a4      	uxth	r4, r4
	it = 1024;
 800e462:	f44f 6380 	mov.w	r3, #1024	; 0x400
	while(Wavelenght[it]>700)
 800e466:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800e46a:	ed92 7a00 	vldr	s14, [r2]
 800e46e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e472:	3b01      	subs	r3, #1
 800e474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
		it--;
 800e478:	b29b      	uxth	r3, r3
	while(Wavelenght[it]>700)
 800e47a:	dcf4      	bgt.n	800e466 <Calculate_PPFD_PPL+0x2e>
	}
	end = it-1;


	sum = 0;
	for (iq = beg; iq < end; iq++)
 800e47c:	4a22      	ldr	r2, [pc, #136]	; (800e508 <Calculate_PPFD_PPL+0xd0>)
	sum = 0;
 800e47e:	4d23      	ldr	r5, [pc, #140]	; (800e50c <Calculate_PPFD_PPL+0xd4>)
	end = it-1;
 800e480:	9300      	str	r3, [sp, #0]
	{
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e482:	a71d      	add	r7, pc, #116	; (adr r7, 800e4f8 <Calculate_PPFD_PPL+0xc0>)
 800e484:	e9d7 6700 	ldrd	r6, r7, [r7]
	sum = 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800e48e:	602b      	str	r3, [r5, #0]
 800e490:	eb00 0b0a 	add.w	fp, r0, sl
	for (iq = beg; iq < end; iq++)
 800e494:	8014      	strh	r4, [r2, #0]
 800e496:	448a      	add	sl, r1
 800e498:	2300      	movs	r3, #0
 800e49a:	9201      	str	r2, [sp, #4]
 800e49c:	9a00      	ldr	r2, [sp, #0]
 800e49e:	42a2      	cmp	r2, r4
 800e4a0:	d807      	bhi.n	800e4b2 <Calculate_PPFD_PPL+0x7a>
 800e4a2:	b10b      	cbz	r3, 800e4a8 <Calculate_PPFD_PPL+0x70>
 800e4a4:	9b01      	ldr	r3, [sp, #4]
 800e4a6:	801c      	strh	r4, [r3, #0]
	}
	return sum;
}
 800e4a8:	ed95 0a00 	vldr	s0, [r5]
 800e4ac:	b003      	add	sp, #12
 800e4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e4b2:	ecbb 7a01 	vldmia	fp!, {s14}
 800e4b6:	ecfa 7a01 	vldmia	sl!, {s15}
 800e4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (iq = beg; iq < end; iq++)
 800e4be:	3401      	adds	r4, #1
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e4c0:	ee17 0a90 	vmov	r0, s15
 800e4c4:	f7f2 f858 	bl	8000578 <__aeabi_f2d>
 800e4c8:	4632      	mov	r2, r6
 800e4ca:	463b      	mov	r3, r7
 800e4cc:	f7f2 f8a8 	bl	8000620 <__aeabi_dmul>
 800e4d0:	4680      	mov	r8, r0
 800e4d2:	6828      	ldr	r0, [r5, #0]
 800e4d4:	4689      	mov	r9, r1
 800e4d6:	f7f2 f84f 	bl	8000578 <__aeabi_f2d>
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4602      	mov	r2, r0
 800e4de:	4649      	mov	r1, r9
 800e4e0:	4640      	mov	r0, r8
 800e4e2:	f7f1 feeb 	bl	80002bc <__adddf3>
 800e4e6:	f7f2 fb93 	bl	8000c10 <__aeabi_d2f>
	for (iq = beg; iq < end; iq++)
 800e4ea:	b2a4      	uxth	r4, r4
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e4ec:	6028      	str	r0, [r5, #0]
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e7d4      	b.n	800e49c <Calculate_PPFD_PPL+0x64>
 800e4f2:	bf00      	nop
 800e4f4:	f3af 8000 	nop.w
 800e4f8:	73f2981b 	.word	0x73f2981b
 800e4fc:	3f811eb6 	.word	0x3f811eb6
 800e500:	43c80000 	.word	0x43c80000
 800e504:	442f0000 	.word	0x442f0000
 800e508:	20090a94 	.word	0x20090a94
 800e50c:	20090a9c 	.word	0x20090a9c

0800e510 <Calculate_PPFD_PPL_Range>:

float Calculate_PPFD_PPL_Range(float R_data[], float Wavelenght[], uint8_t Range)
{
 800e510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t Range_min, Range_max;
	sum = 0;
 800e514:	4d34      	ldr	r5, [pc, #208]	; (800e5e8 <Calculate_PPFD_PPL_Range+0xd8>)
 800e516:	2300      	movs	r3, #0
 800e518:	602b      	str	r3, [r5, #0]
	
	if (Range == BLUE_RANGE)
 800e51a:	b1f2      	cbz	r2, 800e55a <Calculate_PPFD_PPL_Range+0x4a>
	{
		Range_min = 400;
		Range_max = 500;
	} else if (Range == GREEN_RANGE)
 800e51c:	2a01      	cmp	r2, #1
 800e51e:	d021      	beq.n	800e564 <Calculate_PPFD_PPL_Range+0x54>
	{
		Range_min = 500;
		Range_max = 600;
	} else if (Range == RED_RANGE)
 800e520:	2a02      	cmp	r2, #2
 800e522:	d024      	beq.n	800e56e <Calculate_PPFD_PPL_Range+0x5e>
		Range_min = 600;
		Range_max = 700;
	}else if (Range == FAR_RED_RANGE)
	{
		Range_min = 700;
		Range_max = 1000;
 800e524:	2a03      	cmp	r2, #3
 800e526:	bf0b      	itete	eq
 800e528:	f44f 7a7a 	moveq.w	sl, #1000	; 0x3e8
 800e52c:	f04f 0a00 	movne.w	sl, #0
 800e530:	f44f 772f 	moveq.w	r7, #700	; 0x2bc
 800e534:	2700      	movne	r7, #0
	}
	
	for(iq = 0; iq < 1024; iq++)
 800e536:	4a2d      	ldr	r2, [pc, #180]	; (800e5ec <Calculate_PPFD_PPL_Range+0xdc>)
 800e538:	9201      	str	r2, [sp, #4]
 800e53a:	2400      	movs	r4, #0
 800e53c:	8014      	strh	r4, [r2, #0]
 800e53e:	4606      	mov	r6, r0
 800e540:	468b      	mov	fp, r1
 800e542:	4623      	mov	r3, r4
 800e544:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e548:	d116      	bne.n	800e578 <Calculate_PPFD_PPL_Range+0x68>
 800e54a:	b10b      	cbz	r3, 800e550 <Calculate_PPFD_PPL_Range+0x40>
 800e54c:	9b01      	ldr	r3, [sp, #4]
 800e54e:	801c      	strh	r4, [r3, #0]
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
			}
		}
	}
	return sum;
}
 800e550:	ed95 0a00 	vldr	s0, [r5]
 800e554:	b003      	add	sp, #12
 800e556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Range_max = 500;
 800e55a:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
		Range_min = 400;
 800e55e:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800e562:	e7e8      	b.n	800e536 <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 600;
 800e564:	f44f 7a16 	mov.w	sl, #600	; 0x258
		Range_min = 500;
 800e568:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800e56c:	e7e3      	b.n	800e536 <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 700;
 800e56e:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
		Range_min = 600;
 800e572:	f44f 7716 	mov.w	r7, #600	; 0x258
 800e576:	e7de      	b.n	800e536 <Calculate_PPFD_PPL_Range+0x26>
		if(Wavelenght[iq] > Range_min && Wavelenght[iq] < Range_max)
 800e578:	ee07 7a10 	vmov	s14, r7
 800e57c:	ecfb 7a01 	vldmia	fp!, {s15}
 800e580:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e584:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58c:	dd23      	ble.n	800e5d6 <Calculate_PPFD_PPL_Range+0xc6>
 800e58e:	ee07 aa10 	vmov	s14, sl
 800e592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e59e:	d51a      	bpl.n	800e5d6 <Calculate_PPFD_PPL_Range+0xc6>
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e5a0:	ed96 7a00 	vldr	s14, [r6]
 800e5a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e5a8:	ee17 0a90 	vmov	r0, s15
 800e5ac:	f7f1 ffe4 	bl	8000578 <__aeabi_f2d>
 800e5b0:	a30b      	add	r3, pc, #44	; (adr r3, 800e5e0 <Calculate_PPFD_PPL_Range+0xd0>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	f7f2 f833 	bl	8000620 <__aeabi_dmul>
 800e5ba:	4680      	mov	r8, r0
 800e5bc:	6828      	ldr	r0, [r5, #0]
 800e5be:	4689      	mov	r9, r1
 800e5c0:	f7f1 ffda 	bl	8000578 <__aeabi_f2d>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	4640      	mov	r0, r8
 800e5ca:	4649      	mov	r1, r9
 800e5cc:	f7f1 fe76 	bl	80002bc <__adddf3>
 800e5d0:	f7f2 fb1e 	bl	8000c10 <__aeabi_d2f>
 800e5d4:	6028      	str	r0, [r5, #0]
 800e5d6:	3401      	adds	r4, #1
 800e5d8:	b2a4      	uxth	r4, r4
 800e5da:	3604      	adds	r6, #4
 800e5dc:	2301      	movs	r3, #1
 800e5de:	e7b1      	b.n	800e544 <Calculate_PPFD_PPL_Range+0x34>
 800e5e0:	73f2981b 	.word	0x73f2981b
 800e5e4:	3f811eb6 	.word	0x3f811eb6
 800e5e8:	20090a9c 	.word	0x20090a9c
 800e5ec:	20090a94 	.word	0x20090a94

0800e5f0 <Calculate_ELb>:
	return sum;
}

float Calculate_ELb(float R_data[], float Hazard_Blue[])
{
		sum = 0;
 800e5f0:	4a0a      	ldr	r2, [pc, #40]	; (800e61c <Calculate_ELb+0x2c>)
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e5f8:	ecb0 7a01 	vldmia	r0!, {s14}
 800e5fc:	ecf1 7a01 	vldmia	r1!, {s15}
 800e600:	ed92 0a00 	vldr	s0, [r2]
 800e604:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e608:	3301      	adds	r3, #1
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e610:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e614:	d1f0      	bne.n	800e5f8 <Calculate_ELb+0x8>
 800e616:	4a02      	ldr	r2, [pc, #8]	; (800e620 <Calculate_ELb+0x30>)
 800e618:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e61a:	4770      	bx	lr
 800e61c:	20090a9c 	.word	0x20090a9c
 800e620:	20090a94 	.word	0x20090a94

0800e624 <Calculate_ELr>:
 800e624:	f7ff bfe4 	b.w	800e5f0 <Calculate_ELb>

0800e628 <Calculate_XYZ1964>:




void Calculate_XYZ1964(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e628:	b5d0      	push	{r4, r6, r7, lr}
 800e62a:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e62e:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e6b4 <Calculate_XYZ1964+0x8c>
{
 800e632:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e634:	eef0 7a48 	vmov.f32	s15, s16
 800e638:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1964[0] = 0;
	colorimetry_XYZ1964[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e63c:	ecb0 7a01 	vldmia	r0!, {s14}
 800e640:	ecf1 6a01 	vldmia	r1!, {s13}
 800e644:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e648:	3401      	adds	r4, #1
 800e64a:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e64c:	ecf2 6a01 	vldmia	r2!, {s13}
 800e650:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e654:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e658:	ecf3 6a01 	vldmia	r3!, {s13}
 800e65c:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e660:	d1ec      	bne.n	800e63c <Calculate_XYZ1964+0x14>
	}
	
	k = 100/Y_sum;
 800e662:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e6b8 <Calculate_XYZ1964+0x90>
 800e666:	4b15      	ldr	r3, [pc, #84]	; (800e6bc <Calculate_XYZ1964+0x94>)
 800e668:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e66c:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1964[0] = k*X_sum;
 800e66e:	4c14      	ldr	r4, [pc, #80]	; (800e6c0 <Calculate_XYZ1964+0x98>)
	k = 100/Y_sum;
 800e670:	ee16 0a90 	vmov	r0, s13
 800e674:	f7f1 ff80 	bl	8000578 <__aeabi_f2d>
 800e678:	4606      	mov	r6, r0
 800e67a:	460f      	mov	r7, r1
	colorimetry_XYZ1964[0] = k*X_sum;
 800e67c:	ee18 0a90 	vmov	r0, s17
 800e680:	f7f1 ff7a 	bl	8000578 <__aeabi_f2d>
 800e684:	4632      	mov	r2, r6
 800e686:	463b      	mov	r3, r7
 800e688:	f7f1 ffca 	bl	8000620 <__aeabi_dmul>
 800e68c:	f7f2 faa0 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1964[1] = 100;
 800e690:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1964[0] = k*X_sum;
 800e692:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1964[1] = 100;
 800e694:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e696:	ee18 0a10 	vmov	r0, s16
 800e69a:	f7f1 ff6d 	bl	8000578 <__aeabi_f2d>
 800e69e:	4632      	mov	r2, r6
 800e6a0:	463b      	mov	r3, r7
 800e6a2:	f7f1 ffbd 	bl	8000620 <__aeabi_dmul>
 800e6a6:	f7f2 fa93 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e6aa:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e6ae:	80a0      	strh	r0, [r4, #4]
}
 800e6b0:	bdd0      	pop	{r4, r6, r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	00000000 	.word	0x00000000
 800e6b8:	42c80000 	.word	0x42c80000
 800e6bc:	20090a94 	.word	0x20090a94
 800e6c0:	2008f528 	.word	0x2008f528

0800e6c4 <Calculate_XYZ1931>:
void Calculate_XYZ1931(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e6c4:	b5d0      	push	{r4, r6, r7, lr}
 800e6c6:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e6ca:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e750 <Calculate_XYZ1931+0x8c>
{
 800e6ce:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e6d0:	eef0 7a48 	vmov.f32	s15, s16
 800e6d4:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1931[0] = 0;
	colorimetry_XYZ1931[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e6d8:	ecb0 7a01 	vldmia	r0!, {s14}
 800e6dc:	ecf1 6a01 	vldmia	r1!, {s13}
 800e6e0:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e6e4:	3401      	adds	r4, #1
 800e6e6:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e6e8:	ecf2 6a01 	vldmia	r2!, {s13}
 800e6ec:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e6f0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e6f4:	ecf3 6a01 	vldmia	r3!, {s13}
 800e6f8:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e6fc:	d1ec      	bne.n	800e6d8 <Calculate_XYZ1931+0x14>
	}
	
	k = 100/Y_sum;
 800e6fe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e754 <Calculate_XYZ1931+0x90>
 800e702:	4b15      	ldr	r3, [pc, #84]	; (800e758 <Calculate_XYZ1931+0x94>)
 800e704:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e708:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1931[0] = k*X_sum;
 800e70a:	4c14      	ldr	r4, [pc, #80]	; (800e75c <Calculate_XYZ1931+0x98>)
	k = 100/Y_sum;
 800e70c:	ee16 0a90 	vmov	r0, s13
 800e710:	f7f1 ff32 	bl	8000578 <__aeabi_f2d>
 800e714:	4606      	mov	r6, r0
 800e716:	460f      	mov	r7, r1
	colorimetry_XYZ1931[0] = k*X_sum;
 800e718:	ee18 0a90 	vmov	r0, s17
 800e71c:	f7f1 ff2c 	bl	8000578 <__aeabi_f2d>
 800e720:	4632      	mov	r2, r6
 800e722:	463b      	mov	r3, r7
 800e724:	f7f1 ff7c 	bl	8000620 <__aeabi_dmul>
 800e728:	f7f2 fa52 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1931[1] = 100;
 800e72c:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1931[0] = k*X_sum;
 800e72e:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1931[1] = 100;
 800e730:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e732:	ee18 0a10 	vmov	r0, s16
 800e736:	f7f1 ff1f 	bl	8000578 <__aeabi_f2d>
 800e73a:	4632      	mov	r2, r6
 800e73c:	463b      	mov	r3, r7
 800e73e:	f7f1 ff6f 	bl	8000620 <__aeabi_dmul>
 800e742:	f7f2 fa45 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e746:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e74a:	80a0      	strh	r0, [r4, #4]
}
 800e74c:	bdd0      	pop	{r4, r6, r7, pc}
 800e74e:	bf00      	nop
 800e750:	00000000 	.word	0x00000000
 800e754:	42c80000 	.word	0x42c80000
 800e758:	20090a94 	.word	0x20090a94
 800e75c:	2008f522 	.word	0x2008f522

0800e760 <Calculate_xy1964>:
void Calculate_xy1964(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e760:	8801      	ldrh	r1, [r0, #0]
 800e762:	8842      	ldrh	r2, [r0, #2]
 800e764:	8880      	ldrh	r0, [r0, #4]
 800e766:	188b      	adds	r3, r1, r2
 800e768:	4403      	add	r3, r0
	
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	ee07 3a90 	vmov	s15, r3
 800e770:	ee07 1a10 	vmov	s14, r1
 800e774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e778:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e77c:	4b06      	ldr	r3, [pc, #24]	; (800e798 <Calculate_xy1964+0x38>)
 800e77e:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e782:	ee07 2a10 	vmov	s14, r2
 800e786:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e78a:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e78e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e792:	edc3 6a01 	vstr	s13, [r3, #4]
 800e796:	4770      	bx	lr
 800e798:	2008f548 	.word	0x2008f548

0800e79c <Calculate_xy1931>:
}

void Calculate_xy1931(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e79c:	8801      	ldrh	r1, [r0, #0]
 800e79e:	8842      	ldrh	r2, [r0, #2]
 800e7a0:	8880      	ldrh	r0, [r0, #4]
 800e7a2:	188b      	adds	r3, r1, r2
 800e7a4:	4403      	add	r3, r0
	
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	ee07 3a90 	vmov	s15, r3
 800e7ac:	ee07 1a10 	vmov	s14, r1
 800e7b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e7b8:	4b06      	ldr	r3, [pc, #24]	; (800e7d4 <Calculate_xy1931+0x38>)
 800e7ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e7be:	ee07 2a10 	vmov	s14, r2
 800e7c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e7c6:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e7ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e7ce:	edc3 6a01 	vstr	s13, [r3, #4]
 800e7d2:	4770      	bx	lr
 800e7d4:	2008f540 	.word	0x2008f540

0800e7d8 <Calculate_uv>:
}

void Calculate_uv(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e7d8:	ed90 7a01 	vldr	s14, [r0, #4]
 800e7dc:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e7e0:	4b0e      	ldr	r3, [pc, #56]	; (800e81c <Calculate_uv+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e7e2:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ea:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e7ee:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e7f2:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e7f6:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e7fa:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e7fe:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e802:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e806:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e80a:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e80e:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e812:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e816:	edc3 6a01 	vstr	s13, [r3, #4]
 800e81a:	4770      	bx	lr
 800e81c:	2008f530 	.word	0x2008f530

0800e820 <Calculate_uv1976>:
}

void Calculate_uv1976(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e820:	ed90 7a01 	vldr	s14, [r0, #4]
 800e824:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e828:	4b0e      	ldr	r3, [pc, #56]	; (800e864 <Calculate_uv1976+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e82a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e832:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e836:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e83a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e83e:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e842:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e846:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e84a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e84e:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800e852:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e856:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e85a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e85e:	edc3 6a01 	vstr	s13, [r3, #4]
 800e862:	4770      	bx	lr
 800e864:	2008f538 	.word	0x2008f538

0800e868 <Calculate_Tc>:
}

double up = 0, vp = 0, factor_uvp = 0, result_tc, u_dop = 0, v_dop = 0, deltaC = 0;
float Calculate_Tc(float R_data[], uint8_t CIE_Type)
{
 800e868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	ed2d 8b02 	vpush	{d8}
 800e870:	b08b      	sub	sp, #44	; 0x2c
	
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
	uint8_t	 i_min1 = 0, i_min2 = 0;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800e872:	b921      	cbnz	r1, 800e87e <Calculate_Tc+0x16>
	{
		Calculate_XYZ1931(R_data, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 800e874:	4bb4      	ldr	r3, [pc, #720]	; (800eb48 <Calculate_Tc+0x2e0>)
 800e876:	4ab5      	ldr	r2, [pc, #724]	; (800eb4c <Calculate_Tc+0x2e4>)
 800e878:	49b5      	ldr	r1, [pc, #724]	; (800eb50 <Calculate_Tc+0x2e8>)
 800e87a:	f7ff ff23 	bl	800e6c4 <Calculate_XYZ1931>
	}
	
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e87e:	4bb5      	ldr	r3, [pc, #724]	; (800eb54 <Calculate_Tc+0x2ec>)
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e880:	eddf 8ab5 	vldr	s17, [pc, #724]	; 800eb58 <Calculate_Tc+0x2f0>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e884:	885e      	ldrh	r6, [r3, #2]
 800e886:	881f      	ldrh	r7, [r3, #0]
 800e888:	889b      	ldrh	r3, [r3, #4]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
	
	
	for(uint8_t i = 0; i < 31; i++)
	{
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e88a:	f8df a30c 	ldr.w	sl, [pc, #780]	; 800eb98 <Calculate_Tc+0x330>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e88e:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800e892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e896:	4438      	add	r0, r7
 800e898:	4418      	add	r0, r3
 800e89a:	f7f1 fe5b 	bl	8000554 <__aeabi_i2d>
 800e89e:	4baf      	ldr	r3, [pc, #700]	; (800eb5c <Calculate_Tc+0x2f4>)
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	460d      	mov	r5, r1
 800e8a4:	e9c3 4500 	strd	r4, r5, [r3]
	up = (4.*colorimetry_XYZ1931[0])/factor_uvp;
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	f7f1 fe53 	bl	8000554 <__aeabi_i2d>
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	4bab      	ldr	r3, [pc, #684]	; (800eb60 <Calculate_Tc+0x2f8>)
 800e8b2:	4fac      	ldr	r7, [pc, #688]	; (800eb64 <Calculate_Tc+0x2fc>)
 800e8b4:	f7f1 feb4 	bl	8000620 <__aeabi_dmul>
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	462b      	mov	r3, r5
 800e8bc:	f7f1 ffda 	bl	8000874 <__aeabi_ddiv>
 800e8c0:	4ba9      	ldr	r3, [pc, #676]	; (800eb68 <Calculate_Tc+0x300>)
 800e8c2:	e9cd 0100 	strd	r0, r1, [sp]
 800e8c6:	e9c3 0100 	strd	r0, r1, [r3]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f7f1 fe42 	bl	8000554 <__aeabi_i2d>
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	4ba6      	ldr	r3, [pc, #664]	; (800eb6c <Calculate_Tc+0x304>)
 800e8d4:	f7f1 fea4 	bl	8000620 <__aeabi_dmul>
 800e8d8:	462b      	mov	r3, r5
 800e8da:	4622      	mov	r2, r4
 800e8dc:	f7f1 ffca 	bl	8000874 <__aeabi_ddiv>
 800e8e0:	4ba3      	ldr	r3, [pc, #652]	; (800eb70 <Calculate_Tc+0x308>)
 800e8e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8e6:	2600      	movs	r6, #0
 800e8e8:	e9c3 0100 	strd	r0, r1, [r3]
 800e8ec:	4ba1      	ldr	r3, [pc, #644]	; (800eb74 <Calculate_Tc+0x30c>)
 800e8ee:	9304      	str	r3, [sp, #16]
	uint8_t	 i_min1 = 0, i_min2 = 0;
 800e8f0:	4635      	mov	r5, r6
 800e8f2:	4634      	mov	r4, r6
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e8f4:	eeb0 8a68 	vmov.f32	s16, s17
 800e8f8:	46d3      	mov	fp, sl
 800e8fa:	b2f3      	uxtb	r3, r6
 800e8fc:	9307      	str	r3, [sp, #28]
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e8fe:	9b04      	ldr	r3, [sp, #16]
 800e900:	ecf3 7a01 	vldmia	r3!, {s15}
 800e904:	9304      	str	r3, [sp, #16]
 800e906:	4b9c      	ldr	r3, [pc, #624]	; (800eb78 <Calculate_Tc+0x310>)
 800e908:	edcd 7a05 	vstr	s15, [sp, #20]
 800e90c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800e910:	ecf7 7a01 	vldmia	r7!, {s15}
 800e914:	edcd 7a06 	vstr	s15, [sp, #24]
 800e918:	ee07 0a90 	vmov	s15, r0
 800e91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e920:	ee17 0a90 	vmov	r0, s15
 800e924:	f7f1 fe28 	bl	8000578 <__aeabi_f2d>
 800e928:	a381      	add	r3, pc, #516	; (adr r3, 800eb30 <Calculate_Tc+0x2c8>)
 800e92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92e:	f7f1 ffa1 	bl	8000874 <__aeabi_ddiv>
 800e932:	4602      	mov	r2, r0
 800e934:	460b      	mov	r3, r1
 800e936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e93a:	f7f1 fcbd 	bl	80002b8 <__aeabi_dsub>
 800e93e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e942:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 800e946:	ee07 0a90 	vmov	s15, r0
 800e94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e94e:	3601      	adds	r6, #1
 800e950:	ee17 0a90 	vmov	r0, s15
 800e954:	f7f1 fe10 	bl	8000578 <__aeabi_f2d>
 800e958:	a375      	add	r3, pc, #468	; (adr r3, 800eb30 <Calculate_Tc+0x2c8>)
 800e95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95e:	f7f1 ff89 	bl	8000874 <__aeabi_ddiv>
 800e962:	4602      	mov	r2, r0
 800e964:	460b      	mov	r3, r1
 800e966:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e96a:	f7f1 fca5 	bl	80002b8 <__aeabi_dsub>
 800e96e:	4680      	mov	r8, r0
 800e970:	9805      	ldr	r0, [sp, #20]
 800e972:	4689      	mov	r9, r1
 800e974:	f7f1 fe00 	bl	8000578 <__aeabi_f2d>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	4640      	mov	r0, r8
 800e97e:	4649      	mov	r1, r9
 800e980:	f7f1 fe4e 	bl	8000620 <__aeabi_dmul>
 800e984:	4602      	mov	r2, r0
 800e986:	460b      	mov	r3, r1
 800e988:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e98c:	f7f1 fc94 	bl	80002b8 <__aeabi_dsub>
 800e990:	4680      	mov	r8, r0
 800e992:	9806      	ldr	r0, [sp, #24]
 800e994:	4689      	mov	r9, r1
 800e996:	f7f1 fdef 	bl	8000578 <__aeabi_f2d>
 800e99a:	4602      	mov	r2, r0
 800e99c:	460b      	mov	r3, r1
 800e99e:	4640      	mov	r0, r8
 800e9a0:	4649      	mov	r1, r9
 800e9a2:	f7f1 ff67 	bl	8000874 <__aeabi_ddiv>
 800e9a6:	f7f2 f933 	bl	8000c10 <__aeabi_d2f>
 800e9aa:	ee07 0a10 	vmov	s14, r0
		if (fabs(dmin1) > fabs(dline)) {
 800e9ae:	eef0 7ac8 	vabs.f32	s15, s16
 800e9b2:	eef0 6ac7 	vabs.f32	s13, s14
 800e9b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9be:	bfc1      	itttt	gt
 800e9c0:	4625      	movgt	r5, r4
 800e9c2:	eef0 8a48 	vmovgt.f32	s17, s16
 800e9c6:	9c07      	ldrgt	r4, [sp, #28]
				dmin2 = dmin1; 
				dmin1 = dline;
 800e9c8:	eeb0 8a47 	vmovgt.f32	s16, s14
	for(uint8_t i = 0; i < 31; i++)
 800e9cc:	2e1f      	cmp	r6, #31
 800e9ce:	d194      	bne.n	800e8fa <Calculate_Tc+0x92>
				i_min2 = i_min1;
				i_min1 = i;
			}
	}
	
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e9d0:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e9d4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800eb78 <Calculate_Tc+0x310>
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e9d8:	f7f1 fdbc 	bl	8000554 <__aeabi_i2d>
 800e9dc:	a354      	add	r3, pc, #336	; (adr r3, 800eb30 <Calculate_Tc+0x2c8>)
 800e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e2:	f7f1 ff47 	bl	8000874 <__aeabi_ddiv>
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800e9ec:	460f      	mov	r7, r1
 800e9ee:	f7f1 fdb1 	bl	8000554 <__aeabi_i2d>
 800e9f2:	a34f      	add	r3, pc, #316	; (adr r3, 800eb30 <Calculate_Tc+0x2c8>)
 800e9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f8:	f7f1 ff3c 	bl	8000874 <__aeabi_ddiv>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	460b      	mov	r3, r1
 800ea00:	4630      	mov	r0, r6
 800ea02:	4639      	mov	r1, r7
 800ea04:	f7f1 fc5a 	bl	80002bc <__adddf3>
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4b5c      	ldr	r3, [pc, #368]	; (800eb7c <Calculate_Tc+0x314>)
 800ea0c:	f7f1 fe08 	bl	8000620 <__aeabi_dmul>
 800ea10:	4b5b      	ldr	r3, [pc, #364]	; (800eb80 <Calculate_Tc+0x318>)
 800ea12:	4680      	mov	r8, r0
 800ea14:	4689      	mov	r9, r1
 800ea16:	e9c3 8900 	strd	r8, r9, [r3]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800ea1a:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800ea1e:	f7f1 fd99 	bl	8000554 <__aeabi_i2d>
 800ea22:	a343      	add	r3, pc, #268	; (adr r3, 800eb30 <Calculate_Tc+0x2c8>)
 800ea24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea28:	f7f1 ff24 	bl	8000874 <__aeabi_ddiv>
 800ea2c:	4606      	mov	r6, r0
 800ea2e:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 800ea32:	460f      	mov	r7, r1
 800ea34:	f7f1 fd8e 	bl	8000554 <__aeabi_i2d>
 800ea38:	a33d      	add	r3, pc, #244	; (adr r3, 800eb30 <Calculate_Tc+0x2c8>)
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	f7f1 ff19 	bl	8000874 <__aeabi_ddiv>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4630      	mov	r0, r6
 800ea48:	4639      	mov	r1, r7
 800ea4a:	f7f1 fc37 	bl	80002bc <__adddf3>
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4b4a      	ldr	r3, [pc, #296]	; (800eb7c <Calculate_Tc+0x314>)
 800ea52:	f7f1 fde5 	bl	8000620 <__aeabi_dmul>
 800ea56:	4b4b      	ldr	r3, [pc, #300]	; (800eb84 <Calculate_Tc+0x31c>)
 800ea58:	4606      	mov	r6, r0
 800ea5a:	460f      	mov	r7, r1
 800ea5c:	e9c3 6700 	strd	r6, r7, [r3]
	
	deltaC = sqrt((pow((u_dop - up), 2)+ pow((v_dop - vp), 2)));
 800ea60:	4640      	mov	r0, r8
 800ea62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea66:	4649      	mov	r1, r9
 800ea68:	f7f1 fc26 	bl	80002b8 <__aeabi_dsub>
 800ea6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea70:	4680      	mov	r8, r0
 800ea72:	4689      	mov	r9, r1
 800ea74:	4630      	mov	r0, r6
 800ea76:	4639      	mov	r1, r7
 800ea78:	f7f1 fc1e 	bl	80002b8 <__aeabi_dsub>
 800ea7c:	4642      	mov	r2, r8
 800ea7e:	4606      	mov	r6, r0
 800ea80:	460f      	mov	r7, r1
 800ea82:	464b      	mov	r3, r9
 800ea84:	4640      	mov	r0, r8
 800ea86:	4649      	mov	r1, r9
 800ea88:	f7f1 fdca 	bl	8000620 <__aeabi_dmul>
 800ea8c:	4632      	mov	r2, r6
 800ea8e:	4680      	mov	r8, r0
 800ea90:	4689      	mov	r9, r1
 800ea92:	463b      	mov	r3, r7
 800ea94:	4630      	mov	r0, r6
 800ea96:	4639      	mov	r1, r7
 800ea98:	f7f1 fdc2 	bl	8000620 <__aeabi_dmul>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4640      	mov	r0, r8
 800eaa2:	4649      	mov	r1, r9
 800eaa4:	f7f1 fc0a 	bl	80002bc <__adddf3>
 800eaa8:	ec41 0b10 	vmov	d0, r0, r1
 800eaac:	f015 f864 	bl	8023b78 <sqrt>
 800eab0:	4b35      	ldr	r3, [pc, #212]	; (800eb88 <Calculate_Tc+0x320>)
 800eab2:	ec51 0b10 	vmov	r0, r1, d0
 800eab6:	ed83 0b00 	vstr	d0, [r3]
	
	if(deltaC > 0.05)
 800eaba:	a31f      	add	r3, pc, #124	; (adr r3, 800eb38 <Calculate_Tc+0x2d0>)
 800eabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac0:	f7f2 f83e 	bl	8000b40 <__aeabi_dcmpgt>
 800eac4:	bb78      	cbnz	r0, 800eb26 <Calculate_Tc+0x2be>
	{
		return 0xFFFF;
	}else
	{
		return result_tc = fabs(1000000./(Tc_tabl[i_min1]+dmin1*((Tc_tabl[i_min2]-Tc_tabl[i_min1])/(dmin1-dmin2))));
 800eac6:	4b31      	ldr	r3, [pc, #196]	; (800eb8c <Calculate_Tc+0x324>)
 800eac8:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800eacc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800ead0:	ee07 2a90 	vmov	s15, r2
 800ead4:	1a9b      	subs	r3, r3, r2
 800ead6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eada:	ee07 3a90 	vmov	s15, r3
 800eade:	ee78 8a68 	vsub.f32	s17, s16, s17
 800eae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eae6:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800eaea:	eea8 7a26 	vfma.f32	s14, s16, s13
 800eaee:	ee17 0a10 	vmov	r0, s14
 800eaf2:	f7f1 fd41 	bl	8000578 <__aeabi_f2d>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	a111      	add	r1, pc, #68	; (adr r1, 800eb40 <Calculate_Tc+0x2d8>)
 800eafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb00:	f7f1 feb8 	bl	8000874 <__aeabi_ddiv>
 800eb04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb08:	4921      	ldr	r1, [pc, #132]	; (800eb90 <Calculate_Tc+0x328>)
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	e9c1 2300 	strd	r2, r3, [r1]
 800eb10:	4610      	mov	r0, r2
 800eb12:	4619      	mov	r1, r3
 800eb14:	f7f2 f87c 	bl	8000c10 <__aeabi_d2f>
	}
}
 800eb18:	ee00 0a10 	vmov	s0, r0
 800eb1c:	b00b      	add	sp, #44	; 0x2c
 800eb1e:	ecbd 8b02 	vpop	{d8}
 800eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0xFFFF;
 800eb26:	481b      	ldr	r0, [pc, #108]	; (800eb94 <Calculate_Tc+0x32c>)
 800eb28:	e7f6      	b.n	800eb18 <Calculate_Tc+0x2b0>
 800eb2a:	bf00      	nop
 800eb2c:	f3af 8000 	nop.w
 800eb30:	00000000 	.word	0x00000000
 800eb34:	40f86a00 	.word	0x40f86a00
 800eb38:	9999999a 	.word	0x9999999a
 800eb3c:	3fa99999 	.word	0x3fa99999
 800eb40:	00000000 	.word	0x00000000
 800eb44:	412e8480 	.word	0x412e8480
 800eb48:	2008d514 	.word	0x2008d514
 800eb4c:	20052940 	.word	0x20052940
 800eb50:	2008a514 	.word	0x2008a514
 800eb54:	2008f522 	.word	0x2008f522
 800eb58:	447a0000 	.word	0x447a0000
 800eb5c:	200056b0 	.word	0x200056b0
 800eb60:	40100000 	.word	0x40100000
 800eb64:	0802547c 	.word	0x0802547c
 800eb68:	200056c0 	.word	0x200056c0
 800eb6c:	40180000 	.word	0x40180000
 800eb70:	200056d0 	.word	0x200056d0
 800eb74:	08025400 	.word	0x08025400
 800eb78:	08025536 	.word	0x08025536
 800eb7c:	3fe00000 	.word	0x3fe00000
 800eb80:	200056b8 	.word	0x200056b8
 800eb84:	200056c8 	.word	0x200056c8
 800eb88:	200056a8 	.word	0x200056a8
 800eb8c:	0802530c 	.word	0x0802530c
 800eb90:	20090aa0 	.word	0x20090aa0
 800eb94:	477fff00 	.word	0x477fff00
 800eb98:	080254f8 	.word	0x080254f8
 800eb9c:	00000000 	.word	0x00000000

0800eba0 <Calculate_Lab>:

void Calculate_Lab(uint16_t colorimetry_XYZ_calculate[], uint8_t CIE_Type, uint8_t Source_Type)
{
 800eba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float Xref, Yref = 100, Zref;
	uint8_t i;
	double factor_x = 0, factor_y = 0, factor_z = 0, fx = 0, fy = 0, fz = 0;
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800eba4:	2a01      	cmp	r2, #1
{
 800eba6:	ed2d 8b02 	vpush	{d8}
 800ebaa:	4606      	mov	r6, r0
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800ebac:	f000 80b9 	beq.w	800ed22 <Calculate_Lab+0x182>
 800ebb0:	2a02      	cmp	r2, #2
 800ebb2:	f000 80b8 	beq.w	800ed26 <Calculate_Lab+0x186>
 800ebb6:	2a04      	cmp	r2, #4
 800ebb8:	f000 80b7 	beq.w	800ed2a <Calculate_Lab+0x18a>
 800ebbc:	2a08      	cmp	r2, #8
 800ebbe:	f000 80b6 	beq.w	800ed2e <Calculate_Lab+0x18e>
 800ebc2:	2a10      	cmp	r2, #16
 800ebc4:	f000 80b5 	beq.w	800ed32 <Calculate_Lab+0x192>
 800ebc8:	2a20      	cmp	r2, #32
 800ebca:	bf14      	ite	ne
 800ebcc:	2400      	movne	r4, #0
 800ebce:	2405      	moveq	r4, #5
	
	if (CIE_Type == 0x01) //check CIE 1931
 800ebd0:	2901      	cmp	r1, #1
 800ebd2:	f040 80b0 	bne.w	800ed36 <Calculate_Lab+0x196>
	{
		Xref = Xref_CIE1931[i]/100.0;
 800ebd6:	4b82      	ldr	r3, [pc, #520]	; (800ede0 <Calculate_Lab+0x240>)
 800ebd8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800ebdc:	f7f1 fcba 	bl	8000554 <__aeabi_i2d>
 800ebe0:	4b80      	ldr	r3, [pc, #512]	; (800ede4 <Calculate_Lab+0x244>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f7f1 fe46 	bl	8000874 <__aeabi_ddiv>
 800ebe8:	f7f2 f812 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1931[i]/100.0;
 800ebec:	4b7e      	ldr	r3, [pc, #504]	; (800ede8 <Calculate_Lab+0x248>)
		Xref = Xref_CIE1931[i]/100.0;
 800ebee:	ee08 0a90 	vmov	s17, r0
	
	} else if(CIE_Type == 0x00) ////check CIE 1964
	{
		Xref = Xref_CIE1964[i]/100.0;
		Zref = Zref_CIE1964[i]/100.0;
 800ebf2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800ebf6:	f7f1 fcad 	bl	8000554 <__aeabi_i2d>
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	4b79      	ldr	r3, [pc, #484]	; (800ede4 <Calculate_Lab+0x244>)
 800ebfe:	f7f1 fe39 	bl	8000874 <__aeabi_ddiv>
 800ec02:	f7f2 f805 	bl	8000c10 <__aeabi_d2f>
 800ec06:	ee08 0a10 	vmov	s16, r0
	}
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800ec0a:	8833      	ldrh	r3, [r6, #0]
 800ec0c:	ee07 3a90 	vmov	s15, r3
 800ec10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec14:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800ec18:	ee17 0a10 	vmov	r0, s14
 800ec1c:	f7f1 fcac 	bl	8000578 <__aeabi_f2d>
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ec20:	8873      	ldrh	r3, [r6, #2]
 800ec22:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800edec <Calculate_Lab+0x24c>
 800ec26:	ee07 3a90 	vmov	s15, r3
 800ec2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800ec2e:	4680      	mov	r8, r0
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ec30:	eec7 6a87 	vdiv.f32	s13, s15, s14
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800ec34:	4689      	mov	r9, r1
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ec36:	ee16 0a90 	vmov	r0, s13
 800ec3a:	f7f1 fc9d 	bl	8000578 <__aeabi_f2d>
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800ec3e:	88b3      	ldrh	r3, [r6, #4]
 800ec40:	ee07 3a90 	vmov	s15, r3
 800ec44:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ec48:	4604      	mov	r4, r0
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800ec4a:	ee87 7a88 	vdiv.f32	s14, s15, s16
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800ec4e:	460d      	mov	r5, r1
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800ec50:	ee17 0a10 	vmov	r0, s14
 800ec54:	f7f1 fc90 	bl	8000578 <__aeabi_f2d>
	
		if(factor_x > 0.00885645)
 800ec58:	a35b      	add	r3, pc, #364	; (adr r3, 800edc8 <Calculate_Lab+0x228>)
 800ec5a:	e9d3 2300 	ldrd	r2, r3, [r3]
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800ec5e:	4606      	mov	r6, r0
 800ec60:	460f      	mov	r7, r1
		if(factor_x > 0.00885645)
 800ec62:	4640      	mov	r0, r8
 800ec64:	4649      	mov	r1, r9
 800ec66:	f7f1 ff6b 	bl	8000b40 <__aeabi_dcmpgt>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d075      	beq.n	800ed5a <Calculate_Lab+0x1ba>
	{
		fx = pow(factor_x, 1./3.);
 800ec6e:	ec49 8b10 	vmov	d0, r8, r9
 800ec72:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800edd0 <Calculate_Lab+0x230>
 800ec76:	f014 fe07 	bl	8023888 <pow>
 800ec7a:	ec59 8b10 	vmov	r8, r9, d0
	} else 
	{
		fx = (903.3*factor_x + 16.) / 116.;
	}
	
		if(factor_y > 0.00885645)
 800ec7e:	a352      	add	r3, pc, #328	; (adr r3, 800edc8 <Calculate_Lab+0x228>)
 800ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec84:	4620      	mov	r0, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 ff5a 	bl	8000b40 <__aeabi_dcmpgt>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d076      	beq.n	800ed7e <Calculate_Lab+0x1de>
	{
		fy = pow(factor_y, 1./3.);
 800ec90:	ec45 4b10 	vmov	d0, r4, r5
 800ec94:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 800edd0 <Calculate_Lab+0x230>
 800ec98:	f014 fdf6 	bl	8023888 <pow>
 800ec9c:	ec55 4b10 	vmov	r4, r5, d0
	} else 
	{
		fy = (903.3*factor_y + 16.) / 116.;
	}
	
		if(factor_z > 0.00885645)
 800eca0:	a349      	add	r3, pc, #292	; (adr r3, 800edc8 <Calculate_Lab+0x228>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	4630      	mov	r0, r6
 800eca8:	4639      	mov	r1, r7
 800ecaa:	f7f1 ff49 	bl	8000b40 <__aeabi_dcmpgt>
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d077      	beq.n	800eda2 <Calculate_Lab+0x202>
	{
		fz = pow(factor_z, 1./3.);
 800ecb2:	ec47 6b10 	vmov	d0, r6, r7
 800ecb6:	ed9f 1b46 	vldr	d1, [pc, #280]	; 800edd0 <Calculate_Lab+0x230>
 800ecba:	f014 fde5 	bl	8023888 <pow>
 800ecbe:	ec57 6b10 	vmov	r6, r7, d0
	} else 
	{
		fz = (903.3*factor_z + 16.) / 116.;
	}
	
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	4b4a      	ldr	r3, [pc, #296]	; (800edf0 <Calculate_Lab+0x250>)
 800ecc6:	f8df a140 	ldr.w	sl, [pc, #320]	; 800ee08 <Calculate_Lab+0x268>
 800ecca:	4620      	mov	r0, r4
 800eccc:	4629      	mov	r1, r5
 800ecce:	f7f1 fca7 	bl	8000620 <__aeabi_dmul>
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	4b47      	ldr	r3, [pc, #284]	; (800edf4 <Calculate_Lab+0x254>)
 800ecd6:	f7f1 faef 	bl	80002b8 <__aeabi_dsub>
 800ecda:	f7f1 ff51 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800ecde:	4622      	mov	r2, r4
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800ece0:	f8aa 0000 	strh.w	r0, [sl]
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800ece4:	462b      	mov	r3, r5
 800ece6:	4640      	mov	r0, r8
 800ece8:	4649      	mov	r1, r9
 800ecea:	f7f1 fae5 	bl	80002b8 <__aeabi_dsub>
 800ecee:	2200      	movs	r2, #0
 800ecf0:	4b41      	ldr	r3, [pc, #260]	; (800edf8 <Calculate_Lab+0x258>)
 800ecf2:	f7f1 fc95 	bl	8000620 <__aeabi_dmul>
 800ecf6:	f7f1 ff43 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800ecfa:	4632      	mov	r2, r6
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800ecfc:	f8aa 0002 	strh.w	r0, [sl, #2]
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800ed00:	463b      	mov	r3, r7
 800ed02:	4620      	mov	r0, r4
 800ed04:	4629      	mov	r1, r5
 800ed06:	f7f1 fad7 	bl	80002b8 <__aeabi_dsub>
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	4b3b      	ldr	r3, [pc, #236]	; (800edfc <Calculate_Lab+0x25c>)
 800ed0e:	f7f1 fc87 	bl	8000620 <__aeabi_dmul>
 800ed12:	f7f1 ff35 	bl	8000b80 <__aeabi_d2iz>
	
}
 800ed16:	ecbd 8b02 	vpop	{d8}
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800ed1a:	f8aa 0004 	strh.w	r0, [sl, #4]
}
 800ed1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800ed22:	2400      	movs	r4, #0
 800ed24:	e754      	b.n	800ebd0 <Calculate_Lab+0x30>
 800ed26:	2401      	movs	r4, #1
 800ed28:	e752      	b.n	800ebd0 <Calculate_Lab+0x30>
 800ed2a:	2402      	movs	r4, #2
 800ed2c:	e750      	b.n	800ebd0 <Calculate_Lab+0x30>
 800ed2e:	2403      	movs	r4, #3
 800ed30:	e74e      	b.n	800ebd0 <Calculate_Lab+0x30>
 800ed32:	2404      	movs	r4, #4
 800ed34:	e74c      	b.n	800ebd0 <Calculate_Lab+0x30>
	} else if(CIE_Type == 0x00) ////check CIE 1964
 800ed36:	2900      	cmp	r1, #0
 800ed38:	f47f af67 	bne.w	800ec0a <Calculate_Lab+0x6a>
		Xref = Xref_CIE1964[i]/100.0;
 800ed3c:	4b30      	ldr	r3, [pc, #192]	; (800ee00 <Calculate_Lab+0x260>)
 800ed3e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800ed42:	f7f1 fc07 	bl	8000554 <__aeabi_i2d>
 800ed46:	4b27      	ldr	r3, [pc, #156]	; (800ede4 <Calculate_Lab+0x244>)
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f7f1 fd93 	bl	8000874 <__aeabi_ddiv>
 800ed4e:	f7f1 ff5f 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1964[i]/100.0;
 800ed52:	4b2c      	ldr	r3, [pc, #176]	; (800ee04 <Calculate_Lab+0x264>)
		Xref = Xref_CIE1964[i]/100.0;
 800ed54:	ee08 0a90 	vmov	s17, r0
 800ed58:	e74b      	b.n	800ebf2 <Calculate_Lab+0x52>
		fx = (903.3*factor_x + 16.) / 116.;
 800ed5a:	a31f      	add	r3, pc, #124	; (adr r3, 800edd8 <Calculate_Lab+0x238>)
 800ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed60:	4640      	mov	r0, r8
 800ed62:	4649      	mov	r1, r9
 800ed64:	f7f1 fc5c 	bl	8000620 <__aeabi_dmul>
 800ed68:	2200      	movs	r2, #0
 800ed6a:	4b22      	ldr	r3, [pc, #136]	; (800edf4 <Calculate_Lab+0x254>)
 800ed6c:	f7f1 faa6 	bl	80002bc <__adddf3>
 800ed70:	2200      	movs	r2, #0
 800ed72:	4b1f      	ldr	r3, [pc, #124]	; (800edf0 <Calculate_Lab+0x250>)
 800ed74:	f7f1 fd7e 	bl	8000874 <__aeabi_ddiv>
 800ed78:	4680      	mov	r8, r0
 800ed7a:	4689      	mov	r9, r1
 800ed7c:	e77f      	b.n	800ec7e <Calculate_Lab+0xde>
		fy = (903.3*factor_y + 16.) / 116.;
 800ed7e:	a316      	add	r3, pc, #88	; (adr r3, 800edd8 <Calculate_Lab+0x238>)
 800ed80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed84:	4620      	mov	r0, r4
 800ed86:	4629      	mov	r1, r5
 800ed88:	f7f1 fc4a 	bl	8000620 <__aeabi_dmul>
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	4b19      	ldr	r3, [pc, #100]	; (800edf4 <Calculate_Lab+0x254>)
 800ed90:	f7f1 fa94 	bl	80002bc <__adddf3>
 800ed94:	2200      	movs	r2, #0
 800ed96:	4b16      	ldr	r3, [pc, #88]	; (800edf0 <Calculate_Lab+0x250>)
 800ed98:	f7f1 fd6c 	bl	8000874 <__aeabi_ddiv>
 800ed9c:	4604      	mov	r4, r0
 800ed9e:	460d      	mov	r5, r1
 800eda0:	e77e      	b.n	800eca0 <Calculate_Lab+0x100>
		fz = (903.3*factor_z + 16.) / 116.;
 800eda2:	a30d      	add	r3, pc, #52	; (adr r3, 800edd8 <Calculate_Lab+0x238>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	4630      	mov	r0, r6
 800edaa:	4639      	mov	r1, r7
 800edac:	f7f1 fc38 	bl	8000620 <__aeabi_dmul>
 800edb0:	2200      	movs	r2, #0
 800edb2:	4b10      	ldr	r3, [pc, #64]	; (800edf4 <Calculate_Lab+0x254>)
 800edb4:	f7f1 fa82 	bl	80002bc <__adddf3>
 800edb8:	2200      	movs	r2, #0
 800edba:	4b0d      	ldr	r3, [pc, #52]	; (800edf0 <Calculate_Lab+0x250>)
 800edbc:	f7f1 fd5a 	bl	8000874 <__aeabi_ddiv>
 800edc0:	4606      	mov	r6, r0
 800edc2:	460f      	mov	r7, r1
 800edc4:	e77d      	b.n	800ecc2 <Calculate_Lab+0x122>
 800edc6:	bf00      	nop
 800edc8:	98de88b7 	.word	0x98de88b7
 800edcc:	3f822354 	.word	0x3f822354
 800edd0:	55555555 	.word	0x55555555
 800edd4:	3fd55555 	.word	0x3fd55555
 800edd8:	66666666 	.word	0x66666666
 800eddc:	408c3a66 	.word	0x408c3a66
 800ede0:	0802534a 	.word	0x0802534a
 800ede4:	40590000 	.word	0x40590000
 800ede8:	08025362 	.word	0x08025362
 800edec:	42c80000 	.word	0x42c80000
 800edf0:	405d0000 	.word	0x405d0000
 800edf4:	40300000 	.word	0x40300000
 800edf8:	407f4000 	.word	0x407f4000
 800edfc:	40690000 	.word	0x40690000
 800ee00:	08025356 	.word	0x08025356
 800ee04:	0802536e 	.word	0x0802536e
 800ee08:	2008f51c 	.word	0x2008f51c

0800ee0c <Calculate_Lambda_Dominant>:
void Calculate_Lambda_Dominant(float R_data[], uint8_t CIE_Type)
{	
	float Px, Py, x1 = 0.3333, y1 = 0.3333, x2, y2, divider;
	int8_t triangle_p1, triangle_p2, triangle_p3, triangle_out, ld;
	
	x2 = colorimetry_xy1931[0];
 800ee0c:	4b75      	ldr	r3, [pc, #468]	; (800efe4 <Calculate_Lambda_Dominant+0x1d8>)
	y2 = colorimetry_xy1931[1];
	
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ee0e:	eddf 7a76 	vldr	s15, [pc, #472]	; 800efe8 <Calculate_Lambda_Dominant+0x1dc>
	y2 = colorimetry_xy1931[1];
 800ee12:	ed93 6a01 	vldr	s12, [r3, #4]
	x2 = colorimetry_xy1931[0];
 800ee16:	edd3 5a00 	vldr	s11, [r3]
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ee1a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800efec <Calculate_Lambda_Dominant+0x1e0>
 800ee1e:	eddf 6a74 	vldr	s13, [pc, #464]	; 800eff0 <Calculate_Lambda_Dominant+0x1e4>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800ee22:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800eff4 <Calculate_Lambda_Dominant+0x1e8>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ee26:	ee77 1ac6 	vsub.f32	s3, s15, s12
 800ee2a:	ee37 2ae5 	vsub.f32	s4, s15, s11
 800ee2e:	ee27 7a61 	vnmul.f32	s14, s14, s3
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800ee32:	ee35 5a65 	vsub.f32	s10, s10, s11
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ee36:	eea2 7a26 	vfma.f32	s14, s4, s13
{	
 800ee3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800ee3c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800eff8 <Calculate_Lambda_Dominant+0x1ec>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ee40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800ee44:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800ee48:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800effc <Calculate_Lambda_Dominant+0x1f0>
 800ee4c:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 800ee50:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800f000 <Calculate_Lambda_Dominant+0x1f4>
 800ee54:	eee5 6a07 	vfma.f32	s13, s10, s14
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ee58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800ee5c:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800f004 <Calculate_Lambda_Dominant+0x1f8>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800ee60:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800ee64:	ee77 6a46 	vsub.f32	s13, s14, s12
 800ee68:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f008 <Calculate_Lambda_Dominant+0x1fc>
 800ee6c:	ee35 5a65 	vsub.f32	s10, s10, s11
 800ee70:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800ee74:	eddf 6a65 	vldr	s13, [pc, #404]	; 800f00c <Calculate_Lambda_Dominant+0x200>
 800ee78:	eea5 7a26 	vfma.f32	s14, s10, s13
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ee7c:	bfcc      	ite	gt
 800ee7e:	2101      	movgt	r1, #1
 800ee80:	f04f 31ff 	movle.w	r1, #4294967295
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800ee84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800ee88:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800ee8c:	bfcc      	ite	gt
 800ee8e:	2201      	movgt	r2, #1
 800ee90:	f04f 32ff 	movle.w	r2, #4294967295
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800ee94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee98:	bfcc      	ite	gt
 800ee9a:	2301      	movgt	r3, #1
 800ee9c:	f04f 33ff 	movle.w	r3, #4294967295
		
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800eea0:	4291      	cmp	r1, r2
 800eea2:	f040 8093 	bne.w	800efcc <Calculate_Lambda_Dominant+0x1c0>
 800eea6:	4299      	cmp	r1, r3
 800eea8:	bf14      	ite	ne
 800eeaa:	2101      	movne	r1, #1
 800eeac:	f04f 31ff 	moveq.w	r1, #4294967295
	
	for(uint8_t i = 0; i < 65; i++)
	{
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eeb0:	ee67 3ae5 	vnmul.f32	s7, s15, s11
 800eeb4:	4856      	ldr	r0, [pc, #344]	; (800f010 <Calculate_Lambda_Dominant+0x204>)
 800eeb6:	4a57      	ldr	r2, [pc, #348]	; (800f014 <Calculate_Lambda_Dominant+0x208>)
 800eeb8:	8804      	ldrh	r4, [r0, #0]
 800eeba:	4e57      	ldr	r6, [pc, #348]	; (800f018 <Calculate_Lambda_Dominant+0x20c>)
 800eebc:	4d57      	ldr	r5, [pc, #348]	; (800f01c <Calculate_Lambda_Dominant+0x210>)
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
		
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
		{
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800eebe:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800efe8 <Calculate_Lambda_Dominant+0x1dc>
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eec2:	eee6 3a27 	vfma.f32	s7, s12, s15
 800eec6:	f102 0782 	add.w	r7, r2, #130	; 0x82
 800eeca:	2300      	movs	r3, #0
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eecc:	eeb1 0a61 	vneg.f32	s0, s3
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800eed0:	ed95 6a00 	vldr	s12, [r5]
 800eed4:	edd6 6a00 	vldr	s13, [r6]
 800eed8:	ed95 4a01 	vldr	s8, [r5, #4]
 800eedc:	ed96 5a01 	vldr	s10, [r6, #4]
 800eee0:	3504      	adds	r5, #4
 800eee2:	3604      	adds	r6, #4
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eee4:	ee64 2a66 	vnmul.f32	s5, s8, s13
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800eee8:	ee36 7a44 	vsub.f32	s14, s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eeec:	eee5 2a06 	vfma.f32	s5, s10, s12
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800eef0:	ee27 3a61 	vnmul.f32	s6, s14, s3
 800eef4:	ee76 4ac5 	vsub.f32	s9, s13, s10
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eef8:	ee22 1ac2 	vnmul.f32	s2, s5, s4
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800eefc:	eea2 3a24 	vfma.f32	s6, s4, s9
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ef00:	eea7 1a23 	vfma.f32	s2, s14, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ef04:	eeb4 6ac4 	vcmpe.f32	s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ef08:	ee81 7a03 	vdiv.f32	s14, s2, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ef0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef10:	bf54      	ite	pl
 800ef12:	eeb0 1a44 	vmovpl.f32	s2, s8
 800ef16:	eeb0 1a46 	vmovmi.f32	s2, s12
 800ef1a:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800ef1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef22:	d54d      	bpl.n	800efc0 <Calculate_Lambda_Dominant+0x1b4>
 800ef24:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800ef28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef2c:	bfd8      	it	le
 800ef2e:	eeb0 6a44 	vmovle.f32	s12, s8
 800ef32:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800ef36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef3a:	dd41      	ble.n	800efc0 <Calculate_Lambda_Dominant+0x1b4>
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ef3c:	ee64 4aa3 	vmul.f32	s9, s9, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ef40:	eef4 6ac5 	vcmpe.f32	s13, s10
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ef44:	eee0 4a22 	vfma.f32	s9, s0, s5
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ef48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ef4c:	ee84 6a83 	vdiv.f32	s12, s9, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ef50:	bf54      	ite	pl
 800ef52:	eeb0 4a45 	vmovpl.f32	s8, s10
 800ef56:	eeb0 4a66 	vmovmi.f32	s8, s13
 800ef5a:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800ef5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef62:	d52d      	bpl.n	800efc0 <Calculate_Lambda_Dominant+0x1b4>
 800ef64:	eef4 6ac5 	vcmpe.f32	s13, s10
 800ef68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6c:	bfd8      	it	le
 800ef6e:	eef0 6a45 	vmovle.f32	s13, s10
 800ef72:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ef76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef7a:	dd21      	ble.n	800efc0 <Calculate_Lambda_Dominant+0x1b4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800ef7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef84:	bf54      	ite	pl
 800ef86:	eef0 6a60 	vmovpl.f32	s13, s1
 800ef8a:	eef0 6a47 	vmovmi.f32	s13, s14
 800ef8e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800ef92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef96:	d51b      	bpl.n	800efd0 <Calculate_Lambda_Dominant+0x1c4>
 800ef98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa0:	bfd8      	it	le
 800efa2:	eeb0 7a60 	vmovle.f32	s14, s1
 800efa6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800efaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efae:	bfcc      	ite	gt
 800efb0:	2301      	movgt	r3, #1
 800efb2:	f04f 33ff 	movle.w	r3, #4294967295
			
			if((ld*triangle_out) > 0)
 800efb6:	fb13 f301 	smulbb	r3, r3, r1
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d10b      	bne.n	800efd6 <Calculate_Lambda_Dominant+0x1ca>
			{
				lambda_d_Measure = lamda_dominant[i+1];
 800efbe:	8814      	ldrh	r4, [r2, #0]
 800efc0:	3202      	adds	r2, #2
	for(uint8_t i = 0; i < 65; i++)
 800efc2:	4297      	cmp	r7, r2
 800efc4:	d184      	bne.n	800eed0 <Calculate_Lambda_Dominant+0xc4>
 800efc6:	b103      	cbz	r3, 800efca <Calculate_Lambda_Dominant+0x1be>
 800efc8:	8004      	strh	r4, [r0, #0]
 800efca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800efcc:	2101      	movs	r1, #1
 800efce:	e76f      	b.n	800eeb0 <Calculate_Lambda_Dominant+0xa4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800efd0:	f04f 33ff 	mov.w	r3, #4294967295
 800efd4:	e7ef      	b.n	800efb6 <Calculate_Lambda_Dominant+0x1aa>
			} else {
				lambda_d_Measure = triangle_out < 0 ? 0 : lamda_dominant[i+1];
 800efd6:	1c4b      	adds	r3, r1, #1
 800efd8:	bf14      	ite	ne
 800efda:	8814      	ldrhne	r4, [r2, #0]
 800efdc:	2400      	moveq	r4, #0
 800efde:	2301      	movs	r3, #1
 800efe0:	e7ee      	b.n	800efc0 <Calculate_Lambda_Dominant+0x1b4>
 800efe2:	bf00      	nop
 800efe4:	2008f540 	.word	0x2008f540
 800efe8:	3eaaa64c 	.word	0x3eaaa64c
 800efec:	be1fd4b2 	.word	0xbe1fd4b2
 800eff0:	beaaa64c 	.word	0xbeaaa64c
 800eff4:	3e3577e6 	.word	0x3e3577e6
 800eff8:	00000000 	.word	0x00000000
 800effc:	3f0eeab2 	.word	0x3f0eeab2
 800f000:	3e876ea8 	.word	0x3e876ea8
 800f004:	3f3c48ac 	.word	0x3f3c48ac
 800f008:	becdeb0c 	.word	0xbecdeb0c
 800f00c:	3d8cde90 	.word	0x3d8cde90
 800f010:	20095b84 	.word	0x20095b84
 800f014:	0802537c 	.word	0x0802537c
 800f018:	0802567c 	.word	0x0802567c
 800f01c:	08025574 	.word	0x08025574

0800f020 <Calculate_deltaEab>:

extern int16_t colorimetry_LAB_mem[3];
float result, res1, res2, res3;

int16_t Calculate_deltaEab() {
	if((Measure_Field&CIE_Lab) == 0){
 800f020:	4b2c      	ldr	r3, [pc, #176]	; (800f0d4 <Calculate_deltaEab+0xb4>)
 800f022:	881b      	ldrh	r3, [r3, #0]
 800f024:	061b      	lsls	r3, r3, #24
int16_t Calculate_deltaEab() {
 800f026:	b507      	push	{r0, r1, r2, lr}
	if((Measure_Field&CIE_Lab) == 0){
 800f028:	d40a      	bmi.n	800f040 <Calculate_deltaEab+0x20>
		Calculate_Lab(Measure_Color_xy == 0x00 ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 800f02a:	4b2b      	ldr	r3, [pc, #172]	; (800f0d8 <Calculate_deltaEab+0xb8>)
 800f02c:	482b      	ldr	r0, [pc, #172]	; (800f0dc <Calculate_deltaEab+0xbc>)
 800f02e:	7819      	ldrb	r1, [r3, #0]
 800f030:	4b2b      	ldr	r3, [pc, #172]	; (800f0e0 <Calculate_deltaEab+0xc0>)
 800f032:	781a      	ldrb	r2, [r3, #0]
 800f034:	4b2b      	ldr	r3, [pc, #172]	; (800f0e4 <Calculate_deltaEab+0xc4>)
 800f036:	2900      	cmp	r1, #0
 800f038:	bf18      	it	ne
 800f03a:	4618      	movne	r0, r3
 800f03c:	f7ff fdb0 	bl	800eba0 <Calculate_Lab>
	}
	res1 = ((float)(colorimetry_LAB[0]) - (float)(colorimetry_LAB_mem[0]));
 800f040:	4a29      	ldr	r2, [pc, #164]	; (800f0e8 <Calculate_deltaEab+0xc8>)
 800f042:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f046:	ee06 3a90 	vmov	s13, r3
 800f04a:	4b28      	ldr	r3, [pc, #160]	; (800f0ec <Calculate_deltaEab+0xcc>)
 800f04c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f050:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800f054:	ee06 1a90 	vmov	s13, r1
 800f058:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f05c:	4924      	ldr	r1, [pc, #144]	; (800f0f0 <Calculate_deltaEab+0xd0>)
 800f05e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f062:	edc1 6a00 	vstr	s13, [r1]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f066:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f06a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f06e:	ee00 1a10 	vmov	s0, r1
 800f072:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f076:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f07a:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800f07e:	ee00 1a10 	vmov	s0, r1
 800f082:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f086:	491b      	ldr	r1, [pc, #108]	; (800f0f4 <Calculate_deltaEab+0xd4>)
 800f088:	ee37 0ac0 	vsub.f32	s0, s15, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f08c:	ee07 2a90 	vmov	s15, r2
 800f090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f094:	ee07 3a90 	vmov	s15, r3
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800f098:	ed81 0a00 	vstr	s0, [r1]
	Calculate_deltaEab_Done = 0x01;
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f09c:	ee20 0a00 	vmul.f32	s0, s0, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f0a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f0a4:	eea6 0aa6 	vfma.f32	s0, s13, s13
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f0a8:	4b13      	ldr	r3, [pc, #76]	; (800f0f8 <Calculate_deltaEab+0xd8>)
 800f0aa:	ee77 7a67 	vsub.f32	s15, s14, s15
	Calculate_deltaEab_Done = 0x01;
 800f0ae:	2201      	movs	r2, #1
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800f0b0:	edc3 7a00 	vstr	s15, [r3]
	Calculate_deltaEab_Done = 0x01;
 800f0b4:	4b11      	ldr	r3, [pc, #68]	; (800f0fc <Calculate_deltaEab+0xdc>)
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f0b6:	eea7 0aa7 	vfma.f32	s0, s15, s15
	Calculate_deltaEab_Done = 0x01;
 800f0ba:	701a      	strb	r2, [r3, #0]
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800f0bc:	f014 fdb6 	bl	8023c2c <sqrtf>
 800f0c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f0c4:	edcd 7a01 	vstr	s15, [sp, #4]
}
 800f0c8:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800f0cc:	b003      	add	sp, #12
 800f0ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0d2:	bf00      	nop
 800f0d4:	20005706 	.word	0x20005706
 800f0d8:	20005704 	.word	0x20005704
 800f0dc:	2008f528 	.word	0x2008f528
 800f0e0:	20090ab9 	.word	0x20090ab9
 800f0e4:	2008f522 	.word	0x2008f522
 800f0e8:	2008f51c 	.word	0x2008f51c
 800f0ec:	20091048 	.word	0x20091048
 800f0f0:	20090a98 	.word	0x20090a98
 800f0f4:	20090a90 	.word	0x20090a90
 800f0f8:	20090aa8 	.word	0x20090aa8
 800f0fc:	200056a1 	.word	0x200056a1

0800f100 <Calibration_Load_2byte>:
extern float Unit_nm[7], Spectral_Corection_Buff[1024], Scattering_Light, Exposure_Factor;
extern float Spectral_day[1024], Spectral_night[1024], Spectral_B[1024], Spectral_R[1024];
	
uint16_t buff2_array[4] = {0};
uint16_t Calibration_Load_2byte(uint32_t Address, uint8_t num)
{
 800f100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint64_t buff = 0;

	uint16_t byte_array[4] = {0};
	uint8_t i = 0;
	
	i = num > 3 ? (num - 4*(num/4)) : num;
 800f102:	2903      	cmp	r1, #3
{
 800f104:	460c      	mov	r4, r1
 800f106:	bf88      	it	hi
 800f108:	f001 0403 	andhi.w	r4, r1, #3
	buff = flash_data_read_buff(Address);
 800f10c:	f7fd f903 	bl	800c316 <flash_data_read_buff>
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800f110:	aa04      	add	r2, sp, #16
 800f112:	e962 0104 	strd	r0, r1, [r2, #-16]!
 800f116:	ca03      	ldmia	r2!, {r0, r1}
 800f118:	4b0a      	ldr	r3, [pc, #40]	; (800f144 <Calibration_Load_2byte+0x44>)
 800f11a:	6018      	str	r0, [r3, #0]
	
	byte_array[0] = buff2_array[1];
 800f11c:	885a      	ldrh	r2, [r3, #2]
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800f11e:	6059      	str	r1, [r3, #4]
	byte_array[0] = buff2_array[1];
 800f120:	f8ad 2008 	strh.w	r2, [sp, #8]
	byte_array[1] = buff2_array[0];
 800f124:	881a      	ldrh	r2, [r3, #0]
 800f126:	f8ad 200a 	strh.w	r2, [sp, #10]
	byte_array[2] = buff2_array[3];
 800f12a:	88da      	ldrh	r2, [r3, #6]
	byte_array[3] = buff2_array[2];
 800f12c:	889b      	ldrh	r3, [r3, #4]
 800f12e:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	return byte_array[i];
 800f132:	ab04      	add	r3, sp, #16
 800f134:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	byte_array[2] = buff2_array[3];
 800f138:	f8ad 200c 	strh.w	r2, [sp, #12]
}
 800f13c:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800f140:	b004      	add	sp, #16
 800f142:	bd10      	pop	{r4, pc}
 800f144:	200056e0 	.word	0x200056e0

0800f148 <Calibration_Load_1byte>:
	

	uint8_t byte1[8] = {0};
uint8_t Calibration_Load_1byte(uint32_t Address, uint8_t num)
{
 800f148:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t buff = 0;
	uint8_t buff_array[8] = {0};

	uint8_t i = 0;
	
	i = num > 7 ? (num - 8) : num;
 800f14a:	2907      	cmp	r1, #7
{
 800f14c:	b085      	sub	sp, #20
 800f14e:	460c      	mov	r4, r1
	i = num > 7 ? (num - 8) : num;
 800f150:	bf84      	itt	hi
 800f152:	f1a1 0408 	subhi.w	r4, r1, #8
 800f156:	b2e4      	uxtbhi	r4, r4
	buff = flash_data_read_buff(Address);
 800f158:	f7fd f8dd 	bl	800c316 <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f15c:	e9cd 0100 	strd	r0, r1, [sp]
 800f160:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800f164:	ab04      	add	r3, sp, #16
 800f166:	e903 0003 	stmdb	r3, {r0, r1}
	
	byte1[0] =  buff_array[3];
 800f16a:	4b0f      	ldr	r3, [pc, #60]	; (800f1a8 <Calibration_Load_1byte+0x60>)
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f16c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800f170:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800f174:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800f178:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800f17c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f180:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800f184:	f89d 500f 	ldrb.w	r5, [sp, #15]
	byte1[0] =  buff_array[3];
 800f188:	f89d c00b 	ldrb.w	ip, [sp, #11]
 800f18c:	f883 c000 	strb.w	ip, [r3]
	byte1[1] =  buff_array[2];
 800f190:	f883 e001 	strb.w	lr, [r3, #1]
	byte1[2] =  buff_array[1];
 800f194:	709f      	strb	r7, [r3, #2]
	byte1[3] =  buff_array[0];
 800f196:	70de      	strb	r6, [r3, #3]
	byte1[4] =  buff_array[7];
 800f198:	711d      	strb	r5, [r3, #4]
	byte1[5] =  buff_array[6];
 800f19a:	7158      	strb	r0, [r3, #5]
	byte1[6] =  buff_array[5];
 800f19c:	7199      	strb	r1, [r3, #6]
	byte1[7] =  buff_array[4];
 800f19e:	71da      	strb	r2, [r3, #7]
	
	return byte1[i];
}
 800f1a0:	5d18      	ldrb	r0, [r3, r4]
 800f1a2:	b005      	add	sp, #20
 800f1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	200056f4 	.word	0x200056f4

0800f1ac <Calibration_Load_float>:


	
float Calibration_Load_float(uint32_t Address)
{
 800f1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buff_array[8] = {0};
	uint32_t buff_float = 0;
	float res = 0;
	uint64_t buff = 0;
	buff = flash_data_read_buff(Address);
 800f1ae:	f7fd f8b2 	bl	800c316 <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800f1b2:	e9cd 0100 	strd	r0, r1, [sp]
 800f1b6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800f1ba:	ab04      	add	r3, sp, #16
 800f1bc:	e903 0003 	stmdb	r3, {r0, r1}
	buff_float = (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
	memcpy(&res, &buff_float, sizeof(uint32_t));
	return res;
 800f1c0:	9b02      	ldr	r3, [sp, #8]
 800f1c2:	ba1b      	rev	r3, r3
}
 800f1c4:	ee00 3a10 	vmov	s0, r3
 800f1c8:	b005      	add	sp, #20
 800f1ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f1d0 <Calibration_Load_Pack>:
	uint8_t buff_array[8] = {0};
	uint64_t buff = 0;
	uint32_t buff_float = 0;
	
void Calibration_Load_Pack(uint32_t Address, uint16_t size, float data[])
{
 800f1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t idx = 0;
	
	for (uint16_t i = 0; i < (4*size); i+=8){
		addr = Address + i;
 800f1d4:	f8df a078 	ldr.w	sl, [pc, #120]	; 800f250 <Calibration_Load_Pack+0x80>
		buff = flash_data_read_buff(Address+i);
 800f1d8:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800f248 <Calibration_Load_Pack+0x78>
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800f1dc:	4c19      	ldr	r4, [pc, #100]	; (800f244 <Calibration_Load_Pack+0x74>)
{
 800f1de:	4681      	mov	r9, r0
 800f1e0:	4617      	mov	r7, r2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f1e2:	ea4f 0881 	mov.w	r8, r1, lsl #2
	uint16_t idx = 0;
 800f1e6:	2500      	movs	r5, #0
 800f1e8:	00ae      	lsls	r6, r5, #2
 800f1ea:	b2b0      	uxth	r0, r6
	for (uint16_t i = 0; i < (4*size); i+=8){
 800f1ec:	4540      	cmp	r0, r8
 800f1ee:	db01      	blt.n	800f1f4 <Calibration_Load_Pack+0x24>
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
		idx+=2;
	}
}
 800f1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		addr = Address + i;
 800f1f4:	4448      	add	r0, r9
 800f1f6:	f8ca 0000 	str.w	r0, [sl]
		buff = flash_data_read_buff(Address+i);
 800f1fa:	f7fd f88c 	bl	800c316 <flash_data_read_buff>
 800f1fe:	e9cb 0100 	strd	r0, r1, [fp]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800f202:	4b11      	ldr	r3, [pc, #68]	; (800f248 <Calibration_Load_Pack+0x78>)
 800f204:	cb03      	ldmia	r3!, {r0, r1}
 800f206:	6020      	str	r0, [r4, #0]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800f208:	7863      	ldrb	r3, [r4, #1]
 800f20a:	7822      	ldrb	r2, [r4, #0]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800f20c:	6061      	str	r1, [r4, #4]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800f20e:	041b      	lsls	r3, r3, #16
 800f210:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f214:	78e2      	ldrb	r2, [r4, #3]
 800f216:	4313      	orrs	r3, r2
 800f218:	78a2      	ldrb	r2, [r4, #2]
 800f21a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
 800f21e:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800f222:	7963      	ldrb	r3, [r4, #5]
 800f224:	7922      	ldrb	r2, [r4, #4]
 800f226:	041b      	lsls	r3, r3, #16
 800f228:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f22c:	79e2      	ldrb	r2, [r4, #7]
 800f22e:	4313      	orrs	r3, r2
 800f230:	79a2      	ldrb	r2, [r4, #6]
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800f232:	443e      	add	r6, r7
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800f234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f238:	4a04      	ldr	r2, [pc, #16]	; (800f24c <Calibration_Load_Pack+0x7c>)
		idx+=2;
 800f23a:	3502      	adds	r5, #2
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800f23c:	6013      	str	r3, [r2, #0]
		idx+=2;
 800f23e:	b2ad      	uxth	r5, r5
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800f240:	6073      	str	r3, [r6, #4]
 800f242:	e7d1      	b.n	800f1e8 <Calibration_Load_Pack+0x18>
 800f244:	200056e8 	.word	0x200056e8
 800f248:	200056d8 	.word	0x200056d8
 800f24c:	200056f0 	.word	0x200056f0
 800f250:	20090ab0 	.word	0x20090ab0

0800f254 <Calibration_Exposure_Change>:


void Calibration_Exposure_Change(uint8_t Exp)
{
 800f254:	b538      	push	{r3, r4, r5, lr}
 800f256:	4605      	mov	r5, r0
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800f258:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800f25c:	f100 6001 	add.w	r0, r0, #135266304	; 0x8100000
 800f260:	4629      	mov	r1, r5
 800f262:	f600 0028 	addw	r0, r0, #2088	; 0x828
 800f266:	f7ff ff6f 	bl	800f148 <Calibration_Load_1byte>
 800f26a:	ee07 0a90 	vmov	s15, r0
 800f26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f272:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f276:	eec6 7a87 	vdiv.f32	s15, s13, s14
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f27a:	08a8      	lsrs	r0, r5, #2
 800f27c:	f100 2001 	add.w	r0, r0, #16777472	; 0x1000100
 800f280:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800f284:	4b0d      	ldr	r3, [pc, #52]	; (800f2bc <Calibration_Exposure_Change+0x68>)
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f286:	00c4      	lsls	r4, r0, #3
 800f288:	4629      	mov	r1, r5
 800f28a:	4620      	mov	r0, r4
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800f28c:	edc3 7a00 	vstr	s15, [r3]
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f290:	f7ff ff36 	bl	800f100 <Calibration_Load_2byte>
 800f294:	4b0a      	ldr	r3, [pc, #40]	; (800f2c0 <Calibration_Exposure_Change+0x6c>)
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800f296:	4629      	mov	r1, r5
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800f298:	8018      	strh	r0, [r3, #0]
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800f29a:	f104 0014 	add.w	r0, r4, #20
 800f29e:	f7ff ff2f 	bl	800f100 <Calibration_Load_2byte>
 800f2a2:	ee07 0a90 	vmov	s15, r0
 800f2a6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800f2c4 <Calibration_Exposure_Change+0x70>
 800f2aa:	4b07      	ldr	r3, [pc, #28]	; (800f2c8 <Calibration_Exposure_Change+0x74>)
 800f2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2b4:	edc3 7a00 	vstr	s15, [r3]
 800f2b8:	bd38      	pop	{r3, r4, r5, pc}
 800f2ba:	bf00      	nop
 800f2bc:	2005193c 	.word	0x2005193c
 800f2c0:	20009d22 	.word	0x20009d22
 800f2c4:	42c80000 	.word	0x42c80000
 800f2c8:	20009d2c 	.word	0x20009d2c
 800f2cc:	00000000 	.word	0x00000000

0800f2d0 <Calibration_WaveLenght_Graph>:
}

void Calibration_WaveLenght_Graph()
{
 800f2d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i <= 7; i++){
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f2d4:	a717      	add	r7, pc, #92	; (adr r7, 800f334 <Calibration_WaveLenght_Graph+0x64>)
 800f2d6:	e9d7 6700 	ldrd	r6, r7, [r7]
 800f2da:	f8df a060 	ldr.w	sl, [pc, #96]	; 800f33c <Calibration_WaveLenght_Graph+0x6c>
 800f2de:	4d14      	ldr	r5, [pc, #80]	; (800f330 <Calibration_WaveLenght_Graph+0x60>)
 800f2e0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800f340 <Calibration_WaveLenght_Graph+0x70>
	for (uint8_t i = 0; i <= 7; i++){
 800f2e4:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800f344 <Calibration_WaveLenght_Graph+0x74>
{
 800f2e8:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f2ec:	f04f 0800 	mov.w	r8, #0
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f7ff ff04 	bl	800f100 <Calibration_Load_2byte>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f2f8:	ee07 0a90 	vmov	s15, r0
 800f2fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800f300:	f82a 0f02 	strh.w	r0, [sl, #2]!
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f304:	ee17 0a90 	vmov	r0, s15
 800f308:	f7f1 f936 	bl	8000578 <__aeabi_f2d>
 800f30c:	4642      	mov	r2, r8
 800f30e:	464b      	mov	r3, r9
 800f310:	f7f1 fab0 	bl	8000874 <__aeabi_ddiv>
 800f314:	4632      	mov	r2, r6
 800f316:	463b      	mov	r3, r7
 800f318:	f7f0 ffd0 	bl	80002bc <__adddf3>
 800f31c:	f7f1 fc78 	bl	8000c10 <__aeabi_d2f>
 800f320:	f504 7492 	add.w	r4, r4, #292	; 0x124
	for (uint8_t i = 0; i <= 7; i++){
 800f324:	455c      	cmp	r4, fp
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800f326:	f845 0b04 	str.w	r0, [r5], #4
	for (uint8_t i = 0; i <= 7; i++){
 800f32a:	d1e1      	bne.n	800f2f0 <Calibration_WaveLenght_Graph+0x20>
	}
}
 800f32c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f330:	20009d00 	.word	0x20009d00
 800f334:	00000000 	.word	0x00000000
 800f338:	4072c000 	.word	0x4072c000
 800f33c:	20055946 	.word	0x20055946
 800f340:	40590000 	.word	0x40590000
 800f344:	08100920 	.word	0x08100920

0800f348 <GUI_OptionMenuRu>:

extern uint16_t Touch_x, Touch_y;
uint16_t temp_x = 0, temp_y = 0;

void GUI_OptionMenuRu()
{	
 800f348:	b513      	push	{r0, r1, r4, lr}
	GUI_TextRu_Language(10, 86);
 800f34a:	2156      	movs	r1, #86	; 0x56
 800f34c:	200a      	movs	r0, #10
 800f34e:	f009 f975 	bl	801863c <GUI_TextRu_Language>
	GUI_TextRu_Russian(118, 86);
 800f352:	2156      	movs	r1, #86	; 0x56
 800f354:	2076      	movs	r0, #118	; 0x76
 800f356:	f009 f9a3 	bl	80186a0 <GUI_TextRu_Russian>
	GUI_Flag_Ru(218, 86);
 800f35a:	2156      	movs	r1, #86	; 0x56
 800f35c:	20da      	movs	r0, #218	; 0xda
 800f35e:	f004 f83e 	bl	80133de <GUI_Flag_Ru>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f362:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f366:	2378      	movs	r3, #120	; 0x78
 800f368:	4619      	mov	r1, r3
 800f36a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f36e:	9400      	str	r4, [sp, #0]
 800f370:	200a      	movs	r0, #10
 800f372:	f00d fa87 	bl	801c884 <TFT_DrawLine>
	GUI_TextRu_Info(10, 145);
 800f376:	2191      	movs	r1, #145	; 0x91
 800f378:	200a      	movs	r0, #10
 800f37a:	f009 f9d9 	bl	8018730 <GUI_TextRu_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800f37e:	23b7      	movs	r3, #183	; 0xb7
 800f380:	4619      	mov	r1, r3
 800f382:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f386:	9400      	str	r4, [sp, #0]
 800f388:	200a      	movs	r0, #10
 800f38a:	f00d fa7b 	bl	801c884 <TFT_DrawLine>
	
	GUI_TextRu_Mode(10, 209);
 800f38e:	21d1      	movs	r1, #209	; 0xd1
 800f390:	200a      	movs	r0, #10
 800f392:	f009 fa6f 	bl	8018874 <GUI_TextRu_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800f396:	4b21      	ldr	r3, [pc, #132]	; (800f41c <GUI_OptionMenuRu+0xd4>)
 800f398:	21ca      	movs	r1, #202	; 0xca
 800f39a:	781a      	ldrb	r2, [r3, #0]
 800f39c:	20b6      	movs	r0, #182	; 0xb6
 800f39e:	f003 ffe5 	bl	801336c <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	f00d fcfa 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800f3a8:	2063      	movs	r0, #99	; 0x63
 800f3aa:	f00d fcfd 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800f3ae:	481c      	ldr	r0, [pc, #112]	; (800f420 <GUI_OptionMenuRu+0xd8>)
 800f3b0:	f00d fcee 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800f3b4:	2245      	movs	r2, #69	; 0x45
 800f3b6:	21d2      	movs	r1, #210	; 0xd2
 800f3b8:	20e1      	movs	r0, #225	; 0xe1
 800f3ba:	f00d fdb3 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800f3be:	224c      	movs	r2, #76	; 0x4c
 800f3c0:	21d2      	movs	r1, #210	; 0xd2
 800f3c2:	209b      	movs	r0, #155	; 0x9b
 800f3c4:	f00d fdae 	bl	801cf24 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f3c8:	23f8      	movs	r3, #248	; 0xf8
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f3d0:	9400      	str	r4, [sp, #0]
 800f3d2:	200a      	movs	r0, #10
 800f3d4:	f00d fa56 	bl	801c884 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800f3d8:	f240 1113 	movw	r1, #275	; 0x113
 800f3dc:	200a      	movs	r0, #10
 800f3de:	f007 fb87 	bl	8016af0 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800f3e2:	4b10      	ldr	r3, [pc, #64]	; (800f424 <GUI_OptionMenuRu+0xdc>)
 800f3e4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800f3e8:	781a      	ldrb	r2, [r3, #0]
 800f3ea:	20b6      	movs	r0, #182	; 0xb6
 800f3ec:	f003 ff6c 	bl	80132c8 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800f3f0:	f240 1113 	movw	r1, #275	; 0x113
 800f3f4:	20de      	movs	r0, #222	; 0xde
 800f3f6:	f007 febb 	bl	8017170 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800f3fa:	f240 1113 	movw	r1, #275	; 0x113
 800f3fe:	208c      	movs	r0, #140	; 0x8c
 800f400:	f007 feda 	bl	80171b8 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f404:	f240 1339 	movw	r3, #313	; 0x139
 800f408:	9400      	str	r4, [sp, #0]
 800f40a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f40e:	4619      	mov	r1, r3
 800f410:	200a      	movs	r0, #10
 800f412:	f00d fa37 	bl	801c884 <TFT_DrawLine>
}
 800f416:	b002      	add	sp, #8
 800f418:	bd10      	pop	{r4, pc}
 800f41a:	bf00      	nop
 800f41c:	20000ebc 	.word	0x20000ebc
 800f420:	200001b0 	.word	0x200001b0
 800f424:	20090aba 	.word	0x20090aba

0800f428 <GUI_OptionMenuEn>:
void GUI_OptionMenuEn()
{
 800f428:	b513      	push	{r0, r1, r4, lr}
	GUI_TextEn_Language(10, 88);
 800f42a:	2158      	movs	r1, #88	; 0x58
 800f42c:	200a      	movs	r0, #10
 800f42e:	f007 ff63 	bl	80172f8 <GUI_TextEn_Language>
	GUI_TextEn_English(127, 88);
 800f432:	2158      	movs	r1, #88	; 0x58
 800f434:	207f      	movs	r0, #127	; 0x7f
 800f436:	f007 ffad 	bl	8017394 <GUI_TextEn_English>
	GUI_Flag_En(218, 86);
 800f43a:	2156      	movs	r1, #86	; 0x56
 800f43c:	20da      	movs	r0, #218	; 0xda
 800f43e:	f003 fff8 	bl	8013432 <GUI_Flag_En>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f442:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f446:	2378      	movs	r3, #120	; 0x78
 800f448:	4619      	mov	r1, r3
 800f44a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f44e:	9400      	str	r4, [sp, #0]
 800f450:	200a      	movs	r0, #10
 800f452:	f00d fa17 	bl	801c884 <TFT_DrawLine>
	GUI_TextEn_Info(10, 147);
 800f456:	2193      	movs	r1, #147	; 0x93
 800f458:	200a      	movs	r0, #10
 800f45a:	f007 ffe3 	bl	8017424 <GUI_TextEn_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800f45e:	23b7      	movs	r3, #183	; 0xb7
 800f460:	4619      	mov	r1, r3
 800f462:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f466:	9400      	str	r4, [sp, #0]
 800f468:	200a      	movs	r0, #10
 800f46a:	f00d fa0b 	bl	801c884 <TFT_DrawLine>
	
	GUI_TextEn_Mode(10, 211);
 800f46e:	21d3      	movs	r1, #211	; 0xd3
 800f470:	200a      	movs	r0, #10
 800f472:	f008 fb25 	bl	8017ac0 <GUI_TextEn_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800f476:	4b21      	ldr	r3, [pc, #132]	; (800f4fc <GUI_OptionMenuEn+0xd4>)
 800f478:	21ca      	movs	r1, #202	; 0xca
 800f47a:	781a      	ldrb	r2, [r3, #0]
 800f47c:	20b6      	movs	r0, #182	; 0xb6
 800f47e:	f003 ff75 	bl	801336c <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800f482:	4620      	mov	r0, r4
 800f484:	f00d fc8a 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800f488:	2063      	movs	r0, #99	; 0x63
 800f48a:	f00d fc8d 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800f48e:	481c      	ldr	r0, [pc, #112]	; (800f500 <GUI_OptionMenuEn+0xd8>)
 800f490:	f00d fc7e 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800f494:	2245      	movs	r2, #69	; 0x45
 800f496:	21d2      	movs	r1, #210	; 0xd2
 800f498:	20e1      	movs	r0, #225	; 0xe1
 800f49a:	f00d fd43 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800f49e:	224c      	movs	r2, #76	; 0x4c
 800f4a0:	21d2      	movs	r1, #210	; 0xd2
 800f4a2:	209b      	movs	r0, #155	; 0x9b
 800f4a4:	f00d fd3e 	bl	801cf24 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f4a8:	23f8      	movs	r3, #248	; 0xf8
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f4b0:	9400      	str	r4, [sp, #0]
 800f4b2:	200a      	movs	r0, #10
 800f4b4:	f00d f9e6 	bl	801c884 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800f4b8:	f240 1113 	movw	r1, #275	; 0x113
 800f4bc:	200a      	movs	r0, #10
 800f4be:	f007 fb17 	bl	8016af0 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800f4c2:	4b10      	ldr	r3, [pc, #64]	; (800f504 <GUI_OptionMenuEn+0xdc>)
 800f4c4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800f4c8:	781a      	ldrb	r2, [r3, #0]
 800f4ca:	20b6      	movs	r0, #182	; 0xb6
 800f4cc:	f003 fefc 	bl	80132c8 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800f4d0:	f240 1113 	movw	r1, #275	; 0x113
 800f4d4:	20de      	movs	r0, #222	; 0xde
 800f4d6:	f007 fe4b 	bl	8017170 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800f4da:	f240 1113 	movw	r1, #275	; 0x113
 800f4de:	208c      	movs	r0, #140	; 0x8c
 800f4e0:	f007 fe6a 	bl	80171b8 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f4e4:	f240 1339 	movw	r3, #313	; 0x139
 800f4e8:	9400      	str	r4, [sp, #0]
 800f4ea:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	200a      	movs	r0, #10
 800f4f2:	f00d f9c7 	bl	801c884 <TFT_DrawLine>
}
 800f4f6:	b002      	add	sp, #8
 800f4f8:	bd10      	pop	{r4, pc}
 800f4fa:	bf00      	nop
 800f4fc:	20000ebc 	.word	0x20000ebc
 800f500:	200001b0 	.word	0x200001b0
 800f504:	20090aba 	.word	0x20090aba

0800f508 <GUI_Title_Screen>:
void GUI_Title_Screen()
{
 800f508:	b507      	push	{r0, r1, r2, lr}
	TFT_FillScreen_DMA(0x0084);
 800f50a:	2084      	movs	r0, #132	; 0x84
 800f50c:	f00d f818 	bl	801c540 <TFT_FillScreen_DMA>
	GUI_TitleString_Name(80, 330);
 800f510:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800f514:	2050      	movs	r0, #80	; 0x50
 800f516:	f008 fff3 	bl	8018500 <GUI_TitleString_Name>
	GUI_TitleString_Version(180, 420, VERSION);
 800f51a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f51e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800f522:	20b4      	movs	r0, #180	; 0xb4
 800f524:	f009 f846 	bl	80185b4 <GUI_TitleString_Version>
	sImage bmTKA_logo_Flash = {
 800f528:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800f52c:	f8ad 3000 	strh.w	r3, [sp]
 800f530:	23b5      	movs	r3, #181	; 0xb5
 800f532:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f536:	4b08      	ldr	r3, [pc, #32]	; (800f558 <GUI_Title_Screen+0x50>)
 800f538:	9301      	str	r3, [sp, #4]
			TKA_LOGO_BMP_SIZEX, // xSize
			TKA_LOGO_BMP_SIZEY, // ySize
			(uint16_t *)bmp,  // Pointer to picture data
		};
	TFT_DrawBitmap(0, 100, bmTKA_logo_Flash);
 800f53a:	ab02      	add	r3, sp, #8
 800f53c:	e913 000c 	ldmdb	r3, {r2, r3}
 800f540:	2164      	movs	r1, #100	; 0x64
 800f542:	2000      	movs	r0, #0
 800f544:	f00d fbfd 	bl	801cd42 <TFT_DrawBitmap>
	Measure_Color_xy |= CIE_xy_1931_1964;
 800f548:	4a04      	ldr	r2, [pc, #16]	; (800f55c <GUI_Title_Screen+0x54>)
 800f54a:	7813      	ldrb	r3, [r2, #0]
 800f54c:	f043 0301 	orr.w	r3, r3, #1
 800f550:	7013      	strb	r3, [r2, #0]
}
 800f552:	b003      	add	sp, #12
 800f554:	f85d fb04 	ldr.w	pc, [sp], #4
 800f558:	20055954 	.word	0x20055954
 800f55c:	20005704 	.word	0x20005704

0800f560 <Measure_Elements_Draw>:
		Prev_Inf_Screen = Measure_Screen;
		preGUI_screen_state = Measure_Screen;
}

void Measure_Elements_Draw(uint8_t Measure_Number)
{	
 800f560:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t Y = 70, limit = 410;
	
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
	{
		screen_count_old = screen_count;
 800f564:	4da4      	ldr	r5, [pc, #656]	; (800f7f8 <Measure_Elements_Draw+0x298>)
 800f566:	4fa5      	ldr	r7, [pc, #660]	; (800f7fc <Measure_Elements_Draw+0x29c>)
{	
 800f568:	4606      	mov	r6, r0
	uint16_t Y = 70, limit = 410;
 800f56a:	2446      	movs	r4, #70	; 0x46
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f56c:	2e0e      	cmp	r6, #14
 800f56e:	f200 8099 	bhi.w	800f6a4 <Measure_Elements_Draw+0x144>
		screen_count_old = screen_count;
 800f572:	782b      	ldrb	r3, [r5, #0]
 800f574:	703b      	strb	r3, [r7, #0]
		
		switch(state_i){
 800f576:	2e0c      	cmp	r6, #12
 800f578:	f200 808c 	bhi.w	800f694 <Measure_Elements_Draw+0x134>
 800f57c:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f580:	0035000d 	.word	0x0035000d
 800f584:	0060004c 	.word	0x0060004c
 800f588:	00ba0095 	.word	0x00ba0095
 800f58c:	00fc00d2 	.word	0x00fc00d2
 800f590:	01680124 	.word	0x01680124
 800f594:	019a0183 	.word	0x019a0183
 800f598:	01ba      	.short	0x01ba
					case 0: if(Measure_Field&Illuminance){
 800f59a:	4a99      	ldr	r2, [pc, #612]	; (800f800 <Measure_Elements_Draw+0x2a0>)
 800f59c:	8812      	ldrh	r2, [r2, #0]
 800f59e:	07d2      	lsls	r2, r2, #31
 800f5a0:	d578      	bpl.n	800f694 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f5a2:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f5a6:	f280 81b9 	bge.w	800f91c <Measure_Elements_Draw+0x3bc>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f5aa:	4b96      	ldr	r3, [pc, #600]	; (800f804 <Measure_Elements_Draw+0x2a4>)
 800f5ac:	4996      	ldr	r1, [pc, #600]	; (800f808 <Measure_Elements_Draw+0x2a8>)
 800f5ae:	781a      	ldrb	r2, [r3, #0]
 800f5b0:	4b96      	ldr	r3, [pc, #600]	; (800f80c <Measure_Elements_Draw+0x2ac>)
 800f5b2:	4897      	ldr	r0, [pc, #604]	; (800f810 <Measure_Elements_Draw+0x2b0>)
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	b17a      	cbz	r2, 800f5d8 <Measure_Elements_Draw+0x78>
 800f5b8:	7802      	ldrb	r2, [r0, #0]
 800f5ba:	9200      	str	r2, [sp, #0]
 800f5bc:	ed91 0a00 	vldr	s0, [r1]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	4621      	mov	r1, r4
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
									Y+=10;
							} else {screen_count++;}} break;
				case 1: if(Measure_Field&Irradiance){
					if(Y+35 <= limit){
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f5c4:	2014      	movs	r0, #20
 800f5c6:	f004 f855 	bl	8013674 <GUI_Text_E_Measure>
									Y+=10;
							}else {screen_count++;}} break;
				case 12: if(Measure_Field&SP_measure){
					if(Y+35 <= limit){
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
									Y+=35;
 800f5ca:	f104 0323 	add.w	r3, r4, #35	; 0x23
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f5ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
									Y+=35;
 800f5d2:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f5d4:	9200      	str	r2, [sp, #0]
 800f5d6:	e085      	b.n	800f6e4 <Measure_Elements_Draw+0x184>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f5d8:	7800      	ldrb	r0, [r0, #0]
 800f5da:	9000      	str	r0, [sp, #0]
 800f5dc:	ed91 0a00 	vldr	s0, [r1]
 800f5e0:	4621      	mov	r1, r4
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f5e2:	2014      	movs	r0, #20
 800f5e4:	f004 fac4 	bl	8013b70 <GUI_Text_L_Measure>
 800f5e8:	e7ef      	b.n	800f5ca <Measure_Elements_Draw+0x6a>
				case 1: if(Measure_Field&Irradiance){
 800f5ea:	4a85      	ldr	r2, [pc, #532]	; (800f800 <Measure_Elements_Draw+0x2a0>)
 800f5ec:	8812      	ldrh	r2, [r2, #0]
 800f5ee:	0790      	lsls	r0, r2, #30
 800f5f0:	d550      	bpl.n	800f694 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f5f2:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f5f6:	f280 8191 	bge.w	800f91c <Measure_Elements_Draw+0x3bc>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f5fa:	4b82      	ldr	r3, [pc, #520]	; (800f804 <Measure_Elements_Draw+0x2a4>)
 800f5fc:	4a84      	ldr	r2, [pc, #528]	; (800f810 <Measure_Elements_Draw+0x2b0>)
 800f5fe:	7818      	ldrb	r0, [r3, #0]
 800f600:	4b82      	ldr	r3, [pc, #520]	; (800f80c <Measure_Elements_Draw+0x2ac>)
 800f602:	4984      	ldr	r1, [pc, #528]	; (800f814 <Measure_Elements_Draw+0x2b4>)
 800f604:	7812      	ldrb	r2, [r2, #0]
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	9200      	str	r2, [sp, #0]
 800f60a:	ed91 0a00 	vldr	s0, [r1]
 800f60e:	2201      	movs	r2, #1
 800f610:	4621      	mov	r1, r4
 800f612:	2800      	cmp	r0, #0
 800f614:	d0e5      	beq.n	800f5e2 <Measure_Elements_Draw+0x82>
 800f616:	e7d5      	b.n	800f5c4 <Measure_Elements_Draw+0x64>
				case 2: if(Measure_Field&PPFD){
 800f618:	4a79      	ldr	r2, [pc, #484]	; (800f800 <Measure_Elements_Draw+0x2a0>)
 800f61a:	8812      	ldrh	r2, [r2, #0]
 800f61c:	0751      	lsls	r1, r2, #29
 800f61e:	d539      	bpl.n	800f694 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f620:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f624:	f280 817a 	bge.w	800f91c <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPF_Measure(20, Y, PPFD_PPL_Measure, exp_start, exp_set);
 800f628:	497b      	ldr	r1, [pc, #492]	; (800f818 <Measure_Elements_Draw+0x2b8>)
 800f62a:	4b79      	ldr	r3, [pc, #484]	; (800f810 <Measure_Elements_Draw+0x2b0>)
 800f62c:	4a77      	ldr	r2, [pc, #476]	; (800f80c <Measure_Elements_Draw+0x2ac>)
 800f62e:	ed91 0a00 	vldr	s0, [r1]
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	7812      	ldrb	r2, [r2, #0]
 800f636:	4621      	mov	r1, r4
 800f638:	2014      	movs	r0, #20
 800f63a:	f004 fcdb 	bl	8013ff4 <GUI_Text_PPF_Measure>
 800f63e:	e7c4      	b.n	800f5ca <Measure_Elements_Draw+0x6a>
				case 3: if(Measure_Field&PPFD_BGR){
 800f640:	4a6f      	ldr	r2, [pc, #444]	; (800f800 <Measure_Elements_Draw+0x2a0>)
 800f642:	8812      	ldrh	r2, [r2, #0]
 800f644:	0712      	lsls	r2, r2, #28
 800f646:	d525      	bpl.n	800f694 <Measure_Elements_Draw+0x134>
						if(Y+95 <= limit){
 800f648:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 800f64c:	f280 8166 	bge.w	800f91c <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPFRGB_Measure(20, Y, PPFD_PPL_Red_Measure, PPFD_PPL_Green_Measure, PPFD_PPL_Blue_Measure, PPFD_PPL_Far_Red_Measure, exp_start, exp_set);
 800f650:	4972      	ldr	r1, [pc, #456]	; (800f81c <Measure_Elements_Draw+0x2bc>)
 800f652:	4b6f      	ldr	r3, [pc, #444]	; (800f810 <Measure_Elements_Draw+0x2b0>)
 800f654:	edd1 1a00 	vldr	s3, [r1]
 800f658:	4971      	ldr	r1, [pc, #452]	; (800f820 <Measure_Elements_Draw+0x2c0>)
 800f65a:	4a6c      	ldr	r2, [pc, #432]	; (800f80c <Measure_Elements_Draw+0x2ac>)
 800f65c:	ed91 1a00 	vldr	s2, [r1]
 800f660:	4970      	ldr	r1, [pc, #448]	; (800f824 <Measure_Elements_Draw+0x2c4>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	edd1 0a00 	vldr	s1, [r1]
 800f668:	496f      	ldr	r1, [pc, #444]	; (800f828 <Measure_Elements_Draw+0x2c8>)
 800f66a:	7812      	ldrb	r2, [r2, #0]
 800f66c:	ed91 0a00 	vldr	s0, [r1]
 800f670:	2014      	movs	r0, #20
 800f672:	4621      	mov	r1, r4
 800f674:	f004 fe40 	bl	80142f8 <GUI_Text_PPFRGB_Measure>
									Y+=95;
 800f678:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 800f67c:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f67e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f682:	9200      	str	r2, [sp, #0]
 800f684:	4619      	mov	r1, r3
 800f686:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f68a:	200a      	movs	r0, #10
 800f68c:	f00d f8fa 	bl	801c884 <TFT_DrawLine>
									Y+=10;
 800f690:	3469      	adds	r4, #105	; 0x69
									Y+=10;
 800f692:	b2a4      	uxth	r4, r4
							}else {screen_count++;}} break;
			default: break;
		}

		if (screen_count != screen_count_old)
 800f694:	782b      	ldrb	r3, [r5, #0]
 800f696:	783a      	ldrb	r2, [r7, #0]
 800f698:	429a      	cmp	r2, r3
 800f69a:	f000 8142 	beq.w	800f922 <Measure_Elements_Draw+0x3c2>
			{
				state_Measure_Elements = state_i;
 800f69e:	4a63      	ldr	r2, [pc, #396]	; (800f82c <Measure_Elements_Draw+0x2cc>)
				screen_count_old = screen_count;
 800f6a0:	703b      	strb	r3, [r7, #0]
				state_Measure_Elements = state_i;
 800f6a2:	7016      	strb	r6, [r2, #0]
				break;
			}	
			
	}
	
}
 800f6a4:	b004      	add	sp, #16
 800f6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				case 4: if(Measure_Field&CCT){
 800f6aa:	4a55      	ldr	r2, [pc, #340]	; (800f800 <Measure_Elements_Draw+0x2a0>)
 800f6ac:	8812      	ldrh	r2, [r2, #0]
 800f6ae:	05d0      	lsls	r0, r2, #23
 800f6b0:	d5f0      	bpl.n	800f694 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f6b2:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f6b6:	f280 8131 	bge.w	800f91c <Measure_Elements_Draw+0x3bc>
							GUI_Text_CCT_Measure(20, Y,  Tc_Measure == 0xFFFF ? 0 : Tc_Measure, exp_start, exp_set); //
 800f6ba:	4b5d      	ldr	r3, [pc, #372]	; (800f830 <Measure_Elements_Draw+0x2d0>)
 800f6bc:	4954      	ldr	r1, [pc, #336]	; (800f810 <Measure_Elements_Draw+0x2b0>)
 800f6be:	881a      	ldrh	r2, [r3, #0]
 800f6c0:	4b52      	ldr	r3, [pc, #328]	; (800f80c <Measure_Elements_Draw+0x2ac>)
 800f6c2:	7809      	ldrb	r1, [r1, #0]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	9100      	str	r1, [sp, #0]
 800f6c8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800f6cc:	4542      	cmp	r2, r8
 800f6ce:	bf08      	it	eq
 800f6d0:	2200      	moveq	r2, #0
 800f6d2:	4621      	mov	r1, r4
 800f6d4:	2014      	movs	r0, #20
 800f6d6:	f005 fd41 	bl	801515c <GUI_Text_CCT_Measure>
									Y+=35;
 800f6da:	f104 0323 	add.w	r3, r4, #35	; 0x23
 800f6de:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f6e0:	f8cd 8000 	str.w	r8, [sp]
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f6e4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	200a      	movs	r0, #10
 800f6ec:	f00d f8ca 	bl	801c884 <TFT_DrawLine>
									Y+=10;
 800f6f0:	342d      	adds	r4, #45	; 0x2d
 800f6f2:	e7ce      	b.n	800f692 <Measure_Elements_Draw+0x132>
				case 5: if(Measure_Field&delta_E){
 800f6f4:	4a42      	ldr	r2, [pc, #264]	; (800f800 <Measure_Elements_Draw+0x2a0>)
 800f6f6:	8812      	ldrh	r2, [r2, #0]
 800f6f8:	0511      	lsls	r1, r2, #20
 800f6fa:	d5cb      	bpl.n	800f694 <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f6fc:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f700:	f280 810c 	bge.w	800f91c <Measure_Elements_Draw+0x3bc>
									GUI_Text_deltaE_Measure(20, Y, delta_Eab_Measure, exp_start, exp_set);
 800f704:	4b4b      	ldr	r3, [pc, #300]	; (800f834 <Measure_Elements_Draw+0x2d4>)
 800f706:	4a41      	ldr	r2, [pc, #260]	; (800f80c <Measure_Elements_Draw+0x2ac>)
 800f708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f70c:	7812      	ldrb	r2, [r2, #0]
 800f70e:	ee00 3a10 	vmov	s0, r3
 800f712:	4b3f      	ldr	r3, [pc, #252]	; (800f810 <Measure_Elements_Draw+0x2b0>)
 800f714:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	4621      	mov	r1, r4
 800f71c:	2014      	movs	r0, #20
 800f71e:	f005 ff15 	bl	801554c <GUI_Text_deltaE_Measure>
 800f722:	e752      	b.n	800f5ca <Measure_Elements_Draw+0x6a>
				case 6: if(Measure_Field&CIE_XYZ){
 800f724:	4a36      	ldr	r2, [pc, #216]	; (800f800 <Measure_Elements_Draw+0x2a0>)
 800f726:	8812      	ldrh	r2, [r2, #0]
 800f728:	06d2      	lsls	r2, r2, #27
 800f72a:	d5b3      	bpl.n	800f694 <Measure_Elements_Draw+0x134>
						if(Y+105 <= limit){
 800f72c:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f730:	f280 80f4 	bge.w	800f91c <Measure_Elements_Draw+0x3bc>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f734:	4b40      	ldr	r3, [pc, #256]	; (800f838 <Measure_Elements_Draw+0x2d8>)
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	b9e3      	cbnz	r3, 800f774 <Measure_Elements_Draw+0x214>
 800f73a:	4940      	ldr	r1, [pc, #256]	; (800f83c <Measure_Elements_Draw+0x2dc>)
 800f73c:	4834      	ldr	r0, [pc, #208]	; (800f810 <Measure_Elements_Draw+0x2b0>)
 800f73e:	880a      	ldrh	r2, [r1, #0]
 800f740:	7800      	ldrb	r0, [r0, #0]
 800f742:	884b      	ldrh	r3, [r1, #2]
 800f744:	8889      	ldrh	r1, [r1, #4]
 800f746:	9002      	str	r0, [sp, #8]
 800f748:	4830      	ldr	r0, [pc, #192]	; (800f80c <Measure_Elements_Draw+0x2ac>)
 800f74a:	7800      	ldrb	r0, [r0, #0]
 800f74c:	9001      	str	r0, [sp, #4]
 800f74e:	9100      	str	r1, [sp, #0]
 800f750:	2014      	movs	r0, #20
 800f752:	4621      	mov	r1, r4
 800f754:	f005 f9d0 	bl	8014af8 <GUI_Text_XYZ_Measure>
									Y+=105;
 800f758:	f104 0369 	add.w	r3, r4, #105	; 0x69
 800f75c:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f75e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f762:	9200      	str	r2, [sp, #0]
 800f764:	4619      	mov	r1, r3
 800f766:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f76a:	200a      	movs	r0, #10
 800f76c:	f00d f88a 	bl	801c884 <TFT_DrawLine>
									Y+=10;
 800f770:	3473      	adds	r4, #115	; 0x73
 800f772:	e78e      	b.n	800f692 <Measure_Elements_Draw+0x132>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f774:	4932      	ldr	r1, [pc, #200]	; (800f840 <Measure_Elements_Draw+0x2e0>)
 800f776:	e7e1      	b.n	800f73c <Measure_Elements_Draw+0x1dc>
				case 7: if(Measure_Field&CIE_xy){
 800f778:	4a21      	ldr	r2, [pc, #132]	; (800f800 <Measure_Elements_Draw+0x2a0>)
 800f77a:	8812      	ldrh	r2, [r2, #0]
 800f77c:	0690      	lsls	r0, r2, #26
 800f77e:	d589      	bpl.n	800f694 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f780:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f784:	f300 80ca 	bgt.w	800f91c <Measure_Elements_Draw+0x3bc>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f788:	4b2b      	ldr	r3, [pc, #172]	; (800f838 <Measure_Elements_Draw+0x2d8>)
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	b9d3      	cbnz	r3, 800f7c4 <Measure_Elements_Draw+0x264>
 800f78e:	4b2d      	ldr	r3, [pc, #180]	; (800f844 <Measure_Elements_Draw+0x2e4>)
 800f790:	ed93 0a00 	vldr	s0, [r3]
 800f794:	edd3 0a01 	vldr	s1, [r3, #4]
 800f798:	4a1c      	ldr	r2, [pc, #112]	; (800f80c <Measure_Elements_Draw+0x2ac>)
 800f79a:	4b1d      	ldr	r3, [pc, #116]	; (800f810 <Measure_Elements_Draw+0x2b0>)
 800f79c:	7812      	ldrb	r2, [r2, #0]
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	4621      	mov	r1, r4
 800f7a2:	2014      	movs	r0, #20
 800f7a4:	f005 fb36 	bl	8014e14 <GUI_Text_xy_Measure>
									Y+=70;
 800f7a8:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800f7ac:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f7ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7b2:	9200      	str	r2, [sp, #0]
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f7ba:	200a      	movs	r0, #10
 800f7bc:	f00d f862 	bl	801c884 <TFT_DrawLine>
									Y+=10;
 800f7c0:	3450      	adds	r4, #80	; 0x50
 800f7c2:	e766      	b.n	800f692 <Measure_Elements_Draw+0x132>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f7c4:	4b20      	ldr	r3, [pc, #128]	; (800f848 <Measure_Elements_Draw+0x2e8>)
 800f7c6:	e7e3      	b.n	800f790 <Measure_Elements_Draw+0x230>
				case 8: if(Measure_Field&CIE_Luv){
 800f7c8:	4a0d      	ldr	r2, [pc, #52]	; (800f800 <Measure_Elements_Draw+0x2a0>)
 800f7ca:	8812      	ldrh	r2, [r2, #0]
 800f7cc:	0651      	lsls	r1, r2, #25
 800f7ce:	f57f af61 	bpl.w	800f694 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f7d2:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f7d6:	f300 80a1 	bgt.w	800f91c <Measure_Elements_Draw+0x3bc>
									GUI_Text_uv_Measure(20, Y, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 800f7da:	491c      	ldr	r1, [pc, #112]	; (800f84c <Measure_Elements_Draw+0x2ec>)
 800f7dc:	4b0c      	ldr	r3, [pc, #48]	; (800f810 <Measure_Elements_Draw+0x2b0>)
 800f7de:	4a0b      	ldr	r2, [pc, #44]	; (800f80c <Measure_Elements_Draw+0x2ac>)
 800f7e0:	edd1 0a01 	vldr	s1, [r1, #4]
 800f7e4:	ed91 0a00 	vldr	s0, [r1]
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	7812      	ldrb	r2, [r2, #0]
 800f7ec:	4621      	mov	r1, r4
 800f7ee:	2014      	movs	r0, #20
 800f7f0:	f005 fbd2 	bl	8014f98 <GUI_Text_uv_Measure>
 800f7f4:	e7d8      	b.n	800f7a8 <Measure_Elements_Draw+0x248>
 800f7f6:	bf00      	nop
 800f7f8:	2000572b 	.word	0x2000572b
 800f7fc:	2000572c 	.word	0x2000572c
 800f800:	20005706 	.word	0x20005706
 800f804:	20000ebc 	.word	0x20000ebc
 800f808:	20095ca0 	.word	0x20095ca0
 800f80c:	20000ec1 	.word	0x20000ec1
 800f810:	20000ec0 	.word	0x20000ec0
 800f814:	20095718 	.word	0x20095718
 800f818:	20095720 	.word	0x20095720
 800f81c:	2009571c 	.word	0x2009571c
 800f820:	20095804 	.word	0x20095804
 800f824:	20095b88 	.word	0x20095b88
 800f828:	20095a3c 	.word	0x20095a3c
 800f82c:	20005730 	.word	0x20005730
 800f830:	20054940 	.word	0x20054940
 800f834:	20090ab6 	.word	0x20090ab6
 800f838:	20005704 	.word	0x20005704
 800f83c:	2008f528 	.word	0x2008f528
 800f840:	2008f522 	.word	0x2008f522
 800f844:	2008f548 	.word	0x2008f548
 800f848:	2008f540 	.word	0x2008f540
 800f84c:	2008f538 	.word	0x2008f538
				case 9: if(Measure_Field&CIE_Lab){
 800f850:	4a35      	ldr	r2, [pc, #212]	; (800f928 <Measure_Elements_Draw+0x3c8>)
 800f852:	8812      	ldrh	r2, [r2, #0]
 800f854:	0612      	lsls	r2, r2, #24
 800f856:	f57f af1d 	bpl.w	800f694 <Measure_Elements_Draw+0x134>
					if(Y+105 <= limit){
 800f85a:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f85e:	da5d      	bge.n	800f91c <Measure_Elements_Draw+0x3bc>
									GUI_Text_LAB_Measure(20, Y, colorimetry_LAB[0],colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 800f860:	4832      	ldr	r0, [pc, #200]	; (800f92c <Measure_Elements_Draw+0x3cc>)
 800f862:	4933      	ldr	r1, [pc, #204]	; (800f930 <Measure_Elements_Draw+0x3d0>)
 800f864:	7800      	ldrb	r0, [r0, #0]
 800f866:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f86a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800f86e:	9002      	str	r0, [sp, #8]
 800f870:	4830      	ldr	r0, [pc, #192]	; (800f934 <Measure_Elements_Draw+0x3d4>)
 800f872:	7800      	ldrb	r0, [r0, #0]
 800f874:	9001      	str	r0, [sp, #4]
 800f876:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800f87a:	9100      	str	r1, [sp, #0]
 800f87c:	2014      	movs	r0, #20
 800f87e:	4621      	mov	r1, r4
 800f880:	f006 fb42 	bl	8015f08 <GUI_Text_LAB_Measure>
 800f884:	e768      	b.n	800f758 <Measure_Elements_Draw+0x1f8>
				case 10: if(Measure_Field&lambda_d){
 800f886:	4a28      	ldr	r2, [pc, #160]	; (800f928 <Measure_Elements_Draw+0x3c8>)
 800f888:	8812      	ldrh	r2, [r2, #0]
 800f88a:	0590      	lsls	r0, r2, #22
 800f88c:	f57f af02 	bpl.w	800f694 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f890:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f894:	da42      	bge.n	800f91c <Measure_Elements_Draw+0x3bc>
									GUI_Text_lambdaD_Measure(20, Y, lambda_d_Measure, exp_start, exp_set);
 800f896:	4b28      	ldr	r3, [pc, #160]	; (800f938 <Measure_Elements_Draw+0x3d8>)
 800f898:	4a26      	ldr	r2, [pc, #152]	; (800f934 <Measure_Elements_Draw+0x3d4>)
 800f89a:	881b      	ldrh	r3, [r3, #0]
 800f89c:	7812      	ldrb	r2, [r2, #0]
 800f89e:	ee00 3a10 	vmov	s0, r3
 800f8a2:	4b22      	ldr	r3, [pc, #136]	; (800f92c <Measure_Elements_Draw+0x3cc>)
 800f8a4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	4621      	mov	r1, r4
 800f8ac:	2014      	movs	r0, #20
 800f8ae:	f005 fd4f 	bl	8015350 <GUI_Text_lambdaD_Measure>
 800f8b2:	e68a      	b.n	800f5ca <Measure_Elements_Draw+0x6a>
				case 11: if(Measure_Field&EbEr){
 800f8b4:	4a1c      	ldr	r2, [pc, #112]	; (800f928 <Measure_Elements_Draw+0x3c8>)
 800f8b6:	8812      	ldrh	r2, [r2, #0]
 800f8b8:	04d1      	lsls	r1, r2, #19
 800f8ba:	f57f aeeb 	bpl.w	800f694 <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f8be:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f8c2:	dc2b      	bgt.n	800f91c <Measure_Elements_Draw+0x3bc>
						Mode_EL ?	 GUI_Text_EbEr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set); 
 800f8c4:	4b1d      	ldr	r3, [pc, #116]	; (800f93c <Measure_Elements_Draw+0x3dc>)
 800f8c6:	481e      	ldr	r0, [pc, #120]	; (800f940 <Measure_Elements_Draw+0x3e0>)
 800f8c8:	491e      	ldr	r1, [pc, #120]	; (800f944 <Measure_Elements_Draw+0x3e4>)
 800f8ca:	f893 e000 	ldrb.w	lr, [r3]
 800f8ce:	4a19      	ldr	r2, [pc, #100]	; (800f934 <Measure_Elements_Draw+0x3d4>)
 800f8d0:	4b16      	ldr	r3, [pc, #88]	; (800f92c <Measure_Elements_Draw+0x3cc>)
 800f8d2:	edd0 0a00 	vldr	s1, [r0]
 800f8d6:	ed91 0a00 	vldr	s0, [r1]
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	7812      	ldrb	r2, [r2, #0]
 800f8de:	4621      	mov	r1, r4
 800f8e0:	2014      	movs	r0, #20
 800f8e2:	f1be 0f00 	cmp.w	lr, #0
 800f8e6:	d002      	beq.n	800f8ee <Measure_Elements_Draw+0x38e>
 800f8e8:	f005 ff34 	bl	8015754 <GUI_Text_EbEr_Measure>
 800f8ec:	e75c      	b.n	800f7a8 <Measure_Elements_Draw+0x248>
 800f8ee:	f006 f8b9 	bl	8015a64 <GUI_Text_LbLr_Measure>
 800f8f2:	e759      	b.n	800f7a8 <Measure_Elements_Draw+0x248>
				case 12: if(Measure_Field&SP_measure){
 800f8f4:	4a0c      	ldr	r2, [pc, #48]	; (800f928 <Measure_Elements_Draw+0x3c8>)
 800f8f6:	8812      	ldrh	r2, [r2, #0]
 800f8f8:	0492      	lsls	r2, r2, #18
 800f8fa:	f57f aecb 	bpl.w	800f694 <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f8fe:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f902:	da0b      	bge.n	800f91c <Measure_Elements_Draw+0x3bc>
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
 800f904:	4910      	ldr	r1, [pc, #64]	; (800f948 <Measure_Elements_Draw+0x3e8>)
 800f906:	4b09      	ldr	r3, [pc, #36]	; (800f92c <Measure_Elements_Draw+0x3cc>)
 800f908:	4a0a      	ldr	r2, [pc, #40]	; (800f934 <Measure_Elements_Draw+0x3d4>)
 800f90a:	ed91 0a00 	vldr	s0, [r1]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	7812      	ldrb	r2, [r2, #0]
 800f912:	4621      	mov	r1, r4
 800f914:	2014      	movs	r0, #20
 800f916:	f006 fa31 	bl	8015d7c <GUI_Text_S_P_Measure>
 800f91a:	e656      	b.n	800f5ca <Measure_Elements_Draw+0x6a>
							}else {screen_count++;}} break;
 800f91c:	3301      	adds	r3, #1
 800f91e:	702b      	strb	r3, [r5, #0]
 800f920:	e6b8      	b.n	800f694 <Measure_Elements_Draw+0x134>
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f922:	3601      	adds	r6, #1
 800f924:	b2f6      	uxtb	r6, r6
 800f926:	e621      	b.n	800f56c <Measure_Elements_Draw+0xc>
 800f928:	20005706 	.word	0x20005706
 800f92c:	20000ec0 	.word	0x20000ec0
 800f930:	2008f51c 	.word	0x2008f51c
 800f934:	20000ec1 	.word	0x20000ec1
 800f938:	20095b84 	.word	0x20095b84
 800f93c:	20000ebc 	.word	0x20000ebc
 800f940:	20095c9c 	.word	0x20095c9c
 800f944:	20095c98 	.word	0x20095c98
 800f948:	20095800 	.word	0x20095800

0800f94c <GUI_Information_Screen>:
	TFT_FillScreen_DMA(TFT_Red);

}

void GUI_Information_Screen()
{
 800f94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f94e:	4b1e      	ldr	r3, [pc, #120]	; (800f9c8 <GUI_Information_Screen+0x7c>)
 800f950:	4a1e      	ldr	r2, [pc, #120]	; (800f9cc <GUI_Information_Screen+0x80>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	7812      	ldrb	r2, [r2, #0]
 800f956:	429a      	cmp	r2, r3
 800f958:	d034      	beq.n	800f9c4 <GUI_Information_Screen+0x78>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f95a:	2063      	movs	r0, #99	; 0x63
 800f95c:	f00c fdf0 	bl	801c540 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f960:	4b1b      	ldr	r3, [pc, #108]	; (800f9d0 <GUI_Information_Screen+0x84>)
 800f962:	491c      	ldr	r1, [pc, #112]	; (800f9d4 <GUI_Information_Screen+0x88>)
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	4a1c      	ldr	r2, [pc, #112]	; (800f9d8 <GUI_Information_Screen+0x8c>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f968:	8809      	ldrh	r1, [r1, #0]
 800f96a:	7812      	ldrb	r2, [r2, #0]
 800f96c:	4d1b      	ldr	r5, [pc, #108]	; (800f9dc <GUI_Information_Screen+0x90>)
 800f96e:	4c1c      	ldr	r4, [pc, #112]	; (800f9e0 <GUI_Information_Screen+0x94>)
		if(Language_status == En){
 800f970:	2b01      	cmp	r3, #1
 800f972:	4b1c      	ldr	r3, [pc, #112]	; (800f9e4 <GUI_Information_Screen+0x98>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	9100      	str	r1, [sp, #0]
 800f978:	f04f 0100 	mov.w	r1, #0
 800f97c:	4608      	mov	r0, r1
		if(Language_status == En){
 800f97e:	d110      	bne.n	800f9a2 <GUI_Information_Screen+0x56>
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f980:	f008 fc52 	bl	8018228 <GUI_TextEn_Info_Callibration>
			GUI_TextEn_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f984:	2100      	movs	r1, #0
 800f986:	4608      	mov	r0, r1
 800f988:	882b      	ldrh	r3, [r5, #0]
 800f98a:	8822      	ldrh	r2, [r4, #0]
 800f98c:	f008 fcce 	bl	801832c <GUI_TextEn_Info_Serial>
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f990:	2100      	movs	r1, #0
 800f992:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f996:	4608      	mov	r0, r1
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
			GUI_TextRu_Info_Ver(0, 0, VERSION);
		}
	}
}
 800f998:	b003      	add	sp, #12
 800f99a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f99e:	f008 bd3b 	b.w	8018418 <GUI_TextEn_Info_Ver>
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f9a2:	f009 f927 	bl	8018bf4 <GUI_TextRu_Info_Callibration>
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	4608      	mov	r0, r1
 800f9aa:	882b      	ldrh	r3, [r5, #0]
 800f9ac:	8822      	ldrh	r2, [r4, #0]
 800f9ae:	f009 f9df 	bl	8018d70 <GUI_TextRu_Info_Serial>
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f9b8:	4608      	mov	r0, r1
}
 800f9ba:	b003      	add	sp, #12
 800f9bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f9c0:	f009 ba50 	b.w	8018e64 <GUI_TextRu_Info_Ver>
}
 800f9c4:	b003      	add	sp, #12
 800f9c6:	bd30      	pop	{r4, r5, pc}
 800f9c8:	2000022a 	.word	0x2000022a
 800f9cc:	20005701 	.word	0x20005701
 800f9d0:	20005703 	.word	0x20005703
 800f9d4:	200959a8 	.word	0x200959a8
 800f9d8:	20095710 	.word	0x20095710
 800f9dc:	20095a50 	.word	0x20095a50
 800f9e0:	20095714 	.word	0x20095714
 800f9e4:	20095724 	.word	0x20095724

0800f9e8 <GUI_SD_Write_Screen>:

void GUI_SD_Write_Screen()
{
 800f9e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	if(preGUI_screen_state != GUI_screen_state){
 800f9ea:	4b29      	ldr	r3, [pc, #164]	; (800fa90 <GUI_SD_Write_Screen+0xa8>)
 800f9ec:	4d29      	ldr	r5, [pc, #164]	; (800fa94 <GUI_SD_Write_Screen+0xac>)
 800f9ee:	781a      	ldrb	r2, [r3, #0]
 800f9f0:	7829      	ldrb	r1, [r5, #0]
 800f9f2:	4291      	cmp	r1, r2
 800f9f4:	d020      	beq.n	800fa38 <GUI_SD_Write_Screen+0x50>
		pause = 1;
 800f9f6:	4b28      	ldr	r3, [pc, #160]	; (800fa98 <GUI_SD_Write_Screen+0xb0>)
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
		if(Language_status == En){
 800f9f8:	4c28      	ldr	r4, [pc, #160]	; (800fa9c <GUI_SD_Write_Screen+0xb4>)
		pause = 1;
 800f9fa:	2201      	movs	r2, #1
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f9fc:	2063      	movs	r0, #99	; 0x63
		pause = 1;
 800f9fe:	701a      	strb	r2, [r3, #0]
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fa00:	f00c fd9e 	bl	801c540 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800fa04:	7822      	ldrb	r2, [r4, #0]
 800fa06:	2a01      	cmp	r2, #1
			GUI_TextEn_WriteSD(80, 120);
 800fa08:	f04f 0178 	mov.w	r1, #120	; 0x78
 800fa0c:	f04f 0050 	mov.w	r0, #80	; 0x50
		if(Language_status == En){
 800fa10:	d13a      	bne.n	800fa88 <GUI_SD_Write_Screen+0xa0>
			GUI_TextEn_WriteSD(80, 120);
 800fa12:	f008 fbcf 	bl	80181b4 <GUI_TextEn_WriteSD>
		}
		else
		{	
				 GUI_TextRu_WriteSD(80, 120);
		}
		if (SD_Detect == 0) {
 800fa16:	4b22      	ldr	r3, [pc, #136]	; (800faa0 <GUI_SD_Write_Screen+0xb8>)
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	b96b      	cbnz	r3, 800fa38 <GUI_SD_Write_Screen+0x50>
			Calculate_SD_Data(); 
 800fa1c:	f00a fcdc 	bl	801a3d8 <Calculate_SD_Data>
			SD_Witer(sdfile_cnt, Language_status, Memory_Data_satus, Mode_EL, CRICQS_done);
 800fa20:	7821      	ldrb	r1, [r4, #0]
 800fa22:	4c20      	ldr	r4, [pc, #128]	; (800faa4 <GUI_SD_Write_Screen+0xbc>)
 800fa24:	4b20      	ldr	r3, [pc, #128]	; (800faa8 <GUI_SD_Write_Screen+0xc0>)
 800fa26:	4a21      	ldr	r2, [pc, #132]	; (800faac <GUI_SD_Write_Screen+0xc4>)
 800fa28:	4821      	ldr	r0, [pc, #132]	; (800fab0 <GUI_SD_Write_Screen+0xc8>)
 800fa2a:	7824      	ldrb	r4, [r4, #0]
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	7812      	ldrb	r2, [r2, #0]
 800fa30:	8800      	ldrh	r0, [r0, #0]
 800fa32:	9400      	str	r4, [sp, #0]
 800fa34:	f00a fdc4 	bl	801a5c0 <SD_Witer>

		}
	}
	
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 800fa38:	4c1e      	ldr	r4, [pc, #120]	; (800fab4 <GUI_SD_Write_Screen+0xcc>)
 800fa3a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fa3e:	f7f1 f8e7 	bl	8000c10 <__aeabi_d2f>
 800fa42:	f44f 718c 	mov.w	r1, #280	; 0x118
 800fa46:	ee00 0a10 	vmov	s0, r0
 800fa4a:	2055      	movs	r0, #85	; 0x55
 800fa4c:	f003 fde2 	bl	8013614 <GUI_Bar_Measure>
	
	if(SDWr_Status_bar == 1){
 800fa50:	2200      	movs	r2, #0
 800fa52:	4b19      	ldr	r3, [pc, #100]	; (800fab8 <GUI_SD_Write_Screen+0xd0>)
 800fa54:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fa58:	f7f1 f84a 	bl	8000af0 <__aeabi_dcmpeq>
 800fa5c:	b190      	cbz	r0, 800fa84 <GUI_SD_Write_Screen+0x9c>
			if(sdfile_cnt < 999){
 800fa5e:	4b14      	ldr	r3, [pc, #80]	; (800fab0 <GUI_SD_Write_Screen+0xc8>)
 800fa60:	881a      	ldrh	r2, [r3, #0]
 800fa62:	f240 31e6 	movw	r1, #998	; 0x3e6
 800fa66:	428a      	cmp	r2, r1
					sdfile_cnt++;
 800fa68:	bf94      	ite	ls
 800fa6a:	3201      	addls	r2, #1
				}else{
					sdfile_cnt = 0;
 800fa6c:	2200      	movhi	r2, #0
 800fa6e:	801a      	strh	r2, [r3, #0]
				} 
			WriteSDFLASH_t(sdfile_cnt);  
 800fa70:	8818      	ldrh	r0, [r3, #0]
 800fa72:	2100      	movs	r1, #0
 800fa74:	f00a fba0 	bl	801a1b8 <WriteSDFLASH_t>
			pause = 0; 
 800fa78:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <GUI_SD_Write_Screen+0xb0>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	701a      	strb	r2, [r3, #0]
			GUI_screen_state = Prev_Inf_Screen;
 800fa7e:	4b0f      	ldr	r3, [pc, #60]	; (800fabc <GUI_SD_Write_Screen+0xd4>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	702b      	strb	r3, [r5, #0]
	}

}
 800fa84:	b003      	add	sp, #12
 800fa86:	bd30      	pop	{r4, r5, pc}
				 GUI_TextRu_WriteSD(80, 120);
 800fa88:	f009 f932 	bl	8018cf0 <GUI_TextRu_WriteSD>
 800fa8c:	e7c3      	b.n	800fa16 <GUI_SD_Write_Screen+0x2e>
 800fa8e:	bf00      	nop
 800fa90:	2000022a 	.word	0x2000022a
 800fa94:	20005701 	.word	0x20005701
 800fa98:	20005728 	.word	0x20005728
 800fa9c:	20005703 	.word	0x20005703
 800faa0:	20095c54 	.word	0x20095c54
 800faa4:	200056fc 	.word	0x200056fc
 800faa8:	20000ebc 	.word	0x20000ebc
 800faac:	20000228 	.word	0x20000228
 800fab0:	2000572e 	.word	0x2000572e
 800fab4:	20009760 	.word	0x20009760
 800fab8:	3ff00000 	.word	0x3ff00000
 800fabc:	20090ab5 	.word	0x20090ab5

0800fac0 <GUI_Up_Panel>:


void GUI_Up_Panel()
{
	GUI_Battery_Level(0, 0, percentage_charge);
 800fac0:	4b0f      	ldr	r3, [pc, #60]	; (800fb00 <GUI_Up_Panel+0x40>)
{
 800fac2:	b507      	push	{r0, r1, r2, lr}
	GUI_Battery_Level(0, 0, percentage_charge);
 800fac4:	2100      	movs	r1, #0
 800fac6:	ed93 0b00 	vldr	d0, [r3]
 800faca:	4608      	mov	r0, r1
 800facc:	f006 fc18 	bl	8016300 <GUI_Battery_Level>
	if (Bluetooth == ON){
 800fad0:	4b0c      	ldr	r3, [pc, #48]	; (800fb04 <GUI_Up_Panel+0x44>)
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d106      	bne.n	800fae6 <GUI_Up_Panel+0x26>
		GUI_Bluetooth_Logo(240, 2);
 800fad8:	2102      	movs	r1, #2
 800fada:	20f0      	movs	r0, #240	; 0xf0
	} else
	{
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
	}
}
 800fadc:	b003      	add	sp, #12
 800fade:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Bluetooth_Logo(240, 2);
 800fae2:	f002 be03 	b.w	80126ec <GUI_Bluetooth_Logo>
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
 800fae6:	2363      	movs	r3, #99	; 0x63
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	f44f 7282 	mov.w	r2, #260	; 0x104
 800faee:	2323      	movs	r3, #35	; 0x23
 800faf0:	2101      	movs	r1, #1
 800faf2:	20ef      	movs	r0, #239	; 0xef
 800faf4:	f00c ff23 	bl	801c93e <TFT_FillRectangle>
}
 800faf8:	b003      	add	sp, #12
 800fafa:	f85d fb04 	ldr.w	pc, [sp], #4
 800fafe:	bf00      	nop
 800fb00:	200905c8 	.word	0x200905c8
 800fb04:	20090aba 	.word	0x20090aba

0800fb08 <GUI_Down_Panel>:

void GUI_Down_Panel()
{		
 800fb08:	b508      	push	{r3, lr}
	GUI_Button_Settings(1, 426);
 800fb0a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb0e:	2001      	movs	r0, #1
 800fb10:	f002 fe3e 	bl	8012790 <GUI_Button_Settings>
	GUI_Button_SD_Card(55, 426, !SD_Detect);
 800fb14:	4b1b      	ldr	r3, [pc, #108]	; (800fb84 <GUI_Down_Panel+0x7c>)
 800fb16:	781a      	ldrb	r2, [r3, #0]
 800fb18:	fab2 f282 	clz	r2, r2
 800fb1c:	0952      	lsrs	r2, r2, #5
 800fb1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb22:	2037      	movs	r0, #55	; 0x37
 800fb24:	f002 ffee 	bl	8012b04 <GUI_Button_SD_Card>
	GUI_Button_Measure_Start_Pause(109, 426);
 800fb28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb2c:	206d      	movs	r0, #109	; 0x6d
 800fb2e:	f003 f8b5 	bl	8012c9c <GUI_Button_Measure_Start_Pause>
	
	if(GUI_screen_state >= DataSet1_Screen)
 800fb32:	4b15      	ldr	r3, [pc, #84]	; (800fb88 <GUI_Down_Panel+0x80>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b06      	cmp	r3, #6
 800fb38:	d90b      	bls.n	800fb52 <GUI_Down_Panel+0x4a>
	{
		GUI_Button_Down(163, 426);
 800fb3a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb3e:	20a3      	movs	r0, #163	; 0xa3
 800fb40:	f002 fe64 	bl	801280c <GUI_Button_Down>
		GUI_Button_TFT_On_Off(217, 426);
 800fb44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb48:	20d9      	movs	r0, #217	; 0xd9
	else
	{
		GUI_Button_TFT_Rotate(163, 426);
		GUI_Button_Right(217, 426);
	}
}
 800fb4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_TFT_On_Off(217, 426);
 800fb4e:	f002 bf36 	b.w	80129be <GUI_Button_TFT_On_Off>
	}else if(GUI_screen_state <= Measure3_Screen)
 800fb52:	2b03      	cmp	r3, #3
 800fb54:	d810      	bhi.n	800fb78 <GUI_Down_Panel+0x70>
		GUI_Button_Down_Active(163, 426, (screen_count > 0));
 800fb56:	4b0d      	ldr	r3, [pc, #52]	; (800fb8c <GUI_Down_Panel+0x84>)
 800fb58:	781a      	ldrb	r2, [r3, #0]
 800fb5a:	3200      	adds	r2, #0
 800fb5c:	bf18      	it	ne
 800fb5e:	2201      	movne	r2, #1
 800fb60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb64:	20a3      	movs	r0, #163	; 0xa3
 800fb66:	f002 fe96 	bl	8012896 <GUI_Button_Down_Active>
		GUI_Button_Right(217, 426);
 800fb6a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb6e:	20d9      	movs	r0, #217	; 0xd9
}
 800fb70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_Right(217, 426);
 800fb74:	f002 bed9 	b.w	801292a <GUI_Button_Right>
		GUI_Button_TFT_Rotate(163, 426);
 800fb78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb7c:	20a3      	movs	r0, #163	; 0xa3
 800fb7e:	f002 ff4c 	bl	8012a1a <GUI_Button_TFT_Rotate>
 800fb82:	e7f2      	b.n	800fb6a <GUI_Down_Panel+0x62>
 800fb84:	20095c54 	.word	0x20095c54
 800fb88:	20005701 	.word	0x20005701
 800fb8c:	2000572b 	.word	0x2000572b

0800fb90 <GUI_Panels>:

void GUI_Panels()
{
 800fb90:	b507      	push	{r0, r1, r2, lr}
	if((GUI_screen_state == Measure_Screen && (preGUI_screen_state !=Measure2_Screen 
 800fb92:	4b1c      	ldr	r3, [pc, #112]	; (800fc04 <GUI_Panels+0x74>)
 800fb94:	781a      	ldrb	r2, [r3, #0]
 800fb96:	2a01      	cmp	r2, #1
 800fb98:	d121      	bne.n	800fbde <GUI_Panels+0x4e>
 800fb9a:	4b1b      	ldr	r3, [pc, #108]	; (800fc08 <GUI_Panels+0x78>)
 800fb9c:	7819      	ldrb	r1, [r3, #0]
 800fb9e:	2902      	cmp	r1, #2
 800fba0:	d125      	bne.n	800fbee <GUI_Panels+0x5e>
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	2b03      	cmp	r3, #3
 800fba6:	d122      	bne.n	800fbee <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
			|| (preGUI_screen_state >= DataSet1_Screen && GUI_screen_state < DataSet1_Screen)
 800fba8:	4b17      	ldr	r3, [pc, #92]	; (800fc08 <GUI_Panels+0x78>)
 800fbaa:	7819      	ldrb	r1, [r3, #0]
 800fbac:	2906      	cmp	r1, #6
 800fbae:	d901      	bls.n	800fbb4 <GUI_Panels+0x24>
 800fbb0:	2a06      	cmp	r2, #6
 800fbb2:	d91c      	bls.n	800fbee <GUI_Panels+0x5e>
			|| (preGUI_screen_state == Information_Screen) || ((GUI_screen_state == Color_Rendition_Screen) && preGUI_screen_state < Color_Rendition_Screen))
 800fbb4:	7819      	ldrb	r1, [r3, #0]
 800fbb6:	2911      	cmp	r1, #17
 800fbb8:	d019      	beq.n	800fbee <GUI_Panels+0x5e>
 800fbba:	2a06      	cmp	r2, #6
 800fbbc:	d102      	bne.n	800fbc4 <GUI_Panels+0x34>
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	2b05      	cmp	r3, #5
 800fbc2:	d914      	bls.n	800fbee <GUI_Panels+0x5e>
		GUI_Up_Panel();
		GUI_Down_Panel();
	} 
	else 
	{
		TFT_FillRectangle(0, 40, 271, 425, TFT_Black_Bkgr);
 800fbc4:	2363      	movs	r3, #99	; 0x63
 800fbc6:	9300      	str	r3, [sp, #0]
 800fbc8:	f240 120f 	movw	r2, #271	; 0x10f
 800fbcc:	f240 13a9 	movw	r3, #425	; 0x1a9
 800fbd0:	2128      	movs	r1, #40	; 0x28
 800fbd2:	2000      	movs	r0, #0
 800fbd4:	f00c feb3 	bl	801c93e <TFT_FillRectangle>
	}
}
 800fbd8:	b003      	add	sp, #12
 800fbda:	f85d fb04 	ldr.w	pc, [sp], #4
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800fbde:	2a04      	cmp	r2, #4
 800fbe0:	d005      	beq.n	800fbee <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
 800fbe2:	2a06      	cmp	r2, #6
 800fbe4:	d9e0      	bls.n	800fba8 <GUI_Panels+0x18>
 800fbe6:	4b08      	ldr	r3, [pc, #32]	; (800fc08 <GUI_Panels+0x78>)
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	2b06      	cmp	r3, #6
 800fbec:	d8dc      	bhi.n	800fba8 <GUI_Panels+0x18>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fbee:	2063      	movs	r0, #99	; 0x63
 800fbf0:	f00c fca6 	bl	801c540 <TFT_FillScreen_DMA>
		GUI_Up_Panel();
 800fbf4:	f7ff ff64 	bl	800fac0 <GUI_Up_Panel>
}
 800fbf8:	b003      	add	sp, #12
 800fbfa:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Down_Panel();
 800fbfe:	f7ff bf83 	b.w	800fb08 <GUI_Down_Panel>
 800fc02:	bf00      	nop
 800fc04:	20005701 	.word	0x20005701
 800fc08:	2000022a 	.word	0x2000022a

0800fc0c <GUI_DataSet1_Screen>:
{
 800fc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800fc0e:	4b28      	ldr	r3, [pc, #160]	; (800fcb0 <GUI_DataSet1_Screen+0xa4>)
 800fc10:	4c28      	ldr	r4, [pc, #160]	; (800fcb4 <GUI_DataSet1_Screen+0xa8>)
 800fc12:	4d29      	ldr	r5, [pc, #164]	; (800fcb8 <GUI_DataSet1_Screen+0xac>)
 800fc14:	2202      	movs	r2, #2
 800fc16:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Mode_EL_Old != Mode_EL || Language_status_prev != Language_status){
 800fc18:	4b28      	ldr	r3, [pc, #160]	; (800fcbc <GUI_DataSet1_Screen+0xb0>)
 800fc1a:	4a29      	ldr	r2, [pc, #164]	; (800fcc0 <GUI_DataSet1_Screen+0xb4>)
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	7812      	ldrb	r2, [r2, #0]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	4a28      	ldr	r2, [pc, #160]	; (800fcc4 <GUI_DataSet1_Screen+0xb8>)
 800fc24:	4b28      	ldr	r3, [pc, #160]	; (800fcc8 <GUI_DataSet1_Screen+0xbc>)
 800fc26:	d107      	bne.n	800fc38 <GUI_DataSet1_Screen+0x2c>
 800fc28:	7810      	ldrb	r0, [r2, #0]
 800fc2a:	7821      	ldrb	r1, [r4, #0]
 800fc2c:	4288      	cmp	r0, r1
 800fc2e:	d103      	bne.n	800fc38 <GUI_DataSet1_Screen+0x2c>
 800fc30:	7818      	ldrb	r0, [r3, #0]
 800fc32:	7829      	ldrb	r1, [r5, #0]
 800fc34:	4288      	cmp	r0, r1
 800fc36:	d027      	beq.n	800fc88 <GUI_DataSet1_Screen+0x7c>
		Mode_EL_Old = Mode_EL;
 800fc38:	7821      	ldrb	r1, [r4, #0]
 800fc3a:	7011      	strb	r1, [r2, #0]
		Language_status_prev = Language_status;
 800fc3c:	782a      	ldrb	r2, [r5, #0]
 800fc3e:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800fc40:	f7ff ffa6 	bl	800fb90 <GUI_Panels>
		Prev_Inf_Screen2 = DataSet1_Screen;
 800fc44:	4b21      	ldr	r3, [pc, #132]	; (800fccc <GUI_DataSet1_Screen+0xc0>)
 800fc46:	2207      	movs	r2, #7
 800fc48:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800fc4a:	782b      	ldrb	r3, [r5, #0]
 800fc4c:	bb0b      	cbnz	r3, 800fc92 <GUI_DataSet1_Screen+0x86>
			GUI_OptionMenuRu();
 800fc4e:	f7ff fb7b 	bl	800f348 <GUI_OptionMenuRu>
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800fc52:	7823      	ldrb	r3, [r4, #0]
 800fc54:	f240 1151 	movw	r1, #337	; 0x151
 800fc58:	200a      	movs	r0, #10
 800fc5a:	b1bb      	cbz	r3, 800fc8c <GUI_DataSet1_Screen+0x80>
 800fc5c:	f008 fe44 	bl	80188e8 <GUI_TextRu_Illuminance>
		GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 800fc60:	4b1b      	ldr	r3, [pc, #108]	; (800fcd0 <GUI_DataSet1_Screen+0xc4>)
 800fc62:	881a      	ldrh	r2, [r3, #0]
 800fc64:	f240 1147 	movw	r1, #327	; 0x147
 800fc68:	f002 0201 	and.w	r2, r2, #1
 800fc6c:	20c8      	movs	r0, #200	; 0xc8
 800fc6e:	f003 fabb 	bl	80131e8 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fc72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	f240 1379 	movw	r3, #377	; 0x179
 800fc7c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fc80:	4619      	mov	r1, r3
 800fc82:	200a      	movs	r0, #10
 800fc84:	f00c fdfe 	bl	801c884 <TFT_DrawLine>
}
 800fc88:	b003      	add	sp, #12
 800fc8a:	bd30      	pop	{r4, r5, pc}
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800fc8c:	f009 fcaa 	bl	80195e4 <GUI_TextRu_Luminance>
 800fc90:	e7e6      	b.n	800fc60 <GUI_DataSet1_Screen+0x54>
		else if (Language_status == En) {
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	d1e4      	bne.n	800fc60 <GUI_DataSet1_Screen+0x54>
			GUI_OptionMenuEn();
 800fc96:	f7ff fbc7 	bl	800f428 <GUI_OptionMenuEn>
			Mode_EL ? GUI_TextEn_Illuminance(10, 339):GUI_TextEn_Luminance(10, 339);
 800fc9a:	7823      	ldrb	r3, [r4, #0]
 800fc9c:	f240 1153 	movw	r1, #339	; 0x153
 800fca0:	200a      	movs	r0, #10
 800fca2:	b113      	cbz	r3, 800fcaa <GUI_DataSet1_Screen+0x9e>
 800fca4:	f007 fea8 	bl	80179f8 <GUI_TextEn_Illuminance>
 800fca8:	e7da      	b.n	800fc60 <GUI_DataSet1_Screen+0x54>
 800fcaa:	f007 fe4f 	bl	801794c <GUI_TextEn_Luminance>
 800fcae:	e7d7      	b.n	800fc60 <GUI_DataSet1_Screen+0x54>
 800fcb0:	20000231 	.word	0x20000231
 800fcb4:	20000ebc 	.word	0x20000ebc
 800fcb8:	20005703 	.word	0x20005703
 800fcbc:	2000022a 	.word	0x2000022a
 800fcc0:	20005701 	.word	0x20005701
 800fcc4:	20090abb 	.word	0x20090abb
 800fcc8:	20090ab4 	.word	0x20090ab4
 800fccc:	20091058 	.word	0x20091058
 800fcd0:	20005706 	.word	0x20005706

0800fcd4 <GUI_DataSet2_Screen>:
{
 800fcd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fcd6:	4b66      	ldr	r3, [pc, #408]	; (800fe70 <GUI_DataSet2_Screen+0x19c>)
 800fcd8:	4a66      	ldr	r2, [pc, #408]	; (800fe74 <GUI_DataSet2_Screen+0x1a0>)
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	7812      	ldrb	r2, [r2, #0]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	f000 80c3 	beq.w	800fe6a <GUI_DataSet2_Screen+0x196>
			GUI_Panels();
 800fce4:	f7ff ff54 	bl	800fb90 <GUI_Panels>
			if(Language_status == Ru){
 800fce8:	4b63      	ldr	r3, [pc, #396]	; (800fe78 <GUI_DataSet2_Screen+0x1a4>)
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d172      	bne.n	800fdd6 <GUI_DataSet2_Screen+0x102>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800fcf0:	4b62      	ldr	r3, [pc, #392]	; (800fe7c <GUI_DataSet2_Screen+0x1a8>)
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	2152      	movs	r1, #82	; 0x52
 800fcf6:	2012      	movs	r0, #18
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d069      	beq.n	800fdd0 <GUI_DataSet2_Screen+0xfc>
 800fcfc:	f009 fc08 	bl	8019510 <GUI_TextRu_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800fd00:	4c5f      	ldr	r4, [pc, #380]	; (800fe80 <GUI_DataSet2_Screen+0x1ac>)
 800fd02:	8822      	ldrh	r2, [r4, #0]
 800fd04:	2146      	movs	r1, #70	; 0x46
 800fd06:	f002 0202 	and.w	r2, r2, #2
 800fd0a:	20c8      	movs	r0, #200	; 0xc8
 800fd0c:	f003 fa6c 	bl	80131e8 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800fd10:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800fd14:	2378      	movs	r3, #120	; 0x78
 800fd16:	4619      	mov	r1, r3
 800fd18:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd1c:	200a      	movs	r0, #10
 800fd1e:	9500      	str	r5, [sp, #0]
 800fd20:	f00c fdb0 	bl	801c884 <TFT_DrawLine>
				GUI_TextRu_PPF(10, 145);
 800fd24:	2191      	movs	r1, #145	; 0x91
 800fd26:	200a      	movs	r0, #10
 800fd28:	f008 fe48 	bl	80189bc <GUI_TextRu_PPF>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800fd2c:	8822      	ldrh	r2, [r4, #0]
 800fd2e:	2185      	movs	r1, #133	; 0x85
 800fd30:	f002 0204 	and.w	r2, r2, #4
 800fd34:	20c8      	movs	r0, #200	; 0xc8
 800fd36:	f003 fa57 	bl	80131e8 <GUI_CheckBox>
				GUI_TextRu_PPF_RGB(10, 209);
 800fd3a:	21d1      	movs	r1, #209	; 0xd1
 800fd3c:	200a      	movs	r0, #10
 800fd3e:	f008 fe61 	bl	8018a04 <GUI_TextRu_PPF_RGB>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800fd42:	8822      	ldrh	r2, [r4, #0]
 800fd44:	21c6      	movs	r1, #198	; 0xc6
 800fd46:	f002 0208 	and.w	r2, r2, #8
 800fd4a:	20c8      	movs	r0, #200	; 0xc8
 800fd4c:	f003 fa4c 	bl	80131e8 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800fd50:	23f8      	movs	r3, #248	; 0xf8
 800fd52:	4619      	mov	r1, r3
 800fd54:	200a      	movs	r0, #10
 800fd56:	9500      	str	r5, [sp, #0]
 800fd58:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd5c:	f00c fd92 	bl	801c884 <TFT_DrawLine>
				GUI_TextRu_CCT(20, 275);
 800fd60:	f240 1113 	movw	r1, #275	; 0x113
 800fd64:	2014      	movs	r0, #20
 800fd66:	f009 f8c9 	bl	8018efc <GUI_TextRu_CCT>
				GUI_CheckBox(200, 263, Measure_Field&CCT);
 800fd6a:	8822      	ldrh	r2, [r4, #0]
 800fd6c:	f240 1107 	movw	r1, #263	; 0x107
 800fd70:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fd74:	20c8      	movs	r0, #200	; 0xc8
 800fd76:	f003 fa37 	bl	80131e8 <GUI_CheckBox>
				TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800fd7a:	f240 1339 	movw	r3, #313	; 0x139
 800fd7e:	4619      	mov	r1, r3
 800fd80:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd84:	9500      	str	r5, [sp, #0]
 800fd86:	200a      	movs	r0, #10
 800fd88:	f00c fd7c 	bl	801c884 <TFT_DrawLine>
				GUI_Text_deltaE(20, 337);
 800fd8c:	f240 1151 	movw	r1, #337	; 0x151
 800fd90:	2014      	movs	r0, #20
 800fd92:	f007 f8e3 	bl	8016f5c <GUI_Text_deltaE>
				GUI_CheckBox(200, 327, Measure_Field&delta_E);
 800fd96:	8822      	ldrh	r2, [r4, #0]
 800fd98:	f240 1147 	movw	r1, #327	; 0x147
 800fd9c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800fda0:	20c8      	movs	r0, #200	; 0xc8
 800fda2:	f003 fa21 	bl	80131e8 <GUI_CheckBox>
				TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fda6:	f240 1379 	movw	r3, #377	; 0x179
 800fdaa:	4619      	mov	r1, r3
 800fdac:	9500      	str	r5, [sp, #0]
 800fdae:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fdb2:	200a      	movs	r0, #10
 800fdb4:	f00c fd66 	bl	801c884 <TFT_DrawLine>
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800fdb8:	8822      	ldrh	r2, [r4, #0]
 800fdba:	2300      	movs	r3, #0
 800fdbc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800fdc0:	f240 1147 	movw	r1, #327	; 0x147
 800fdc4:	2082      	movs	r0, #130	; 0x82
}
 800fdc6:	b003      	add	sp, #12
 800fdc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800fdcc:	f003 b8ec 	b.w	8012fa8 <GUI_Button_Measure_deltaE_Small>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800fdd0:	f009 fc50 	bl	8019674 <GUI_TextRu_Radiance>
 800fdd4:	e794      	b.n	800fd00 <GUI_DataSet2_Screen+0x2c>
			else if(Language_status == En){
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d147      	bne.n	800fe6a <GUI_DataSet2_Screen+0x196>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800fdda:	4d28      	ldr	r5, [pc, #160]	; (800fe7c <GUI_DataSet2_Screen+0x1a8>)
 800fddc:	782a      	ldrb	r2, [r5, #0]
 800fdde:	2154      	movs	r1, #84	; 0x54
 800fde0:	2012      	movs	r0, #18
 800fde2:	2a00      	cmp	r2, #0
 800fde4:	d03b      	beq.n	800fe5e <GUI_DataSet2_Screen+0x18a>
 800fde6:	f007 fb9d 	bl	8017524 <GUI_TextEn_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800fdea:	4c25      	ldr	r4, [pc, #148]	; (800fe80 <GUI_DataSet2_Screen+0x1ac>)
 800fdec:	8822      	ldrh	r2, [r4, #0]
 800fdee:	2146      	movs	r1, #70	; 0x46
 800fdf0:	f002 0202 	and.w	r2, r2, #2
 800fdf4:	20c8      	movs	r0, #200	; 0xc8
 800fdf6:	f003 f9f7 	bl	80131e8 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800fdfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	2378      	movs	r3, #120	; 0x78
 800fe02:	4619      	mov	r1, r3
 800fe04:	200a      	movs	r0, #10
 800fe06:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe0a:	f00c fd3b 	bl	801c884 <TFT_DrawLine>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800fe0e:	782b      	ldrb	r3, [r5, #0]
 800fe10:	2193      	movs	r1, #147	; 0x93
 800fe12:	200a      	movs	r0, #10
 800fe14:	b333      	cbz	r3, 800fe64 <GUI_DataSet2_Screen+0x190>
 800fe16:	f007 fe85 	bl	8017b24 <GUI_TextEn_PPFD>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800fe1a:	8822      	ldrh	r2, [r4, #0]
 800fe1c:	2185      	movs	r1, #133	; 0x85
 800fe1e:	f002 0204 	and.w	r2, r2, #4
 800fe22:	20c8      	movs	r0, #200	; 0xc8
 800fe24:	f003 f9e0 	bl	80131e8 <GUI_CheckBox>
				GUI_TextEn_B_G_R_FR(10, 211);
 800fe28:	21d3      	movs	r1, #211	; 0xd3
 800fe2a:	200a      	movs	r0, #10
 800fe2c:	f007 ff34 	bl	8017c98 <GUI_TextEn_B_G_R_FR>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800fe30:	8822      	ldrh	r2, [r4, #0]
 800fe32:	21c6      	movs	r1, #198	; 0xc6
 800fe34:	f002 0208 	and.w	r2, r2, #8
 800fe38:	20c8      	movs	r0, #200	; 0xc8
 800fe3a:	f003 f9d5 	bl	80131e8 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800fe3e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800fe42:	23f8      	movs	r3, #248	; 0xf8
 800fe44:	4619      	mov	r1, r3
 800fe46:	9500      	str	r5, [sp, #0]
 800fe48:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe4c:	200a      	movs	r0, #10
 800fe4e:	f00c fd19 	bl	801c884 <TFT_DrawLine>
				GUI_TextEn_CCT(20, 277);
 800fe52:	f240 1115 	movw	r1, #277	; 0x115
 800fe56:	2014      	movs	r0, #20
 800fe58:	f007 ff66 	bl	8017d28 <GUI_TextEn_CCT>
 800fe5c:	e785      	b.n	800fd6a <GUI_DataSet2_Screen+0x96>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800fe5e:	f007 fb13 	bl	8017488 <GUI_TextEn_Radiance>
 800fe62:	e7c2      	b.n	800fdea <GUI_DataSet2_Screen+0x116>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800fe64:	f007 fe8a 	bl	8017b7c <GUI_TextEn_PPL>
 800fe68:	e7d7      	b.n	800fe1a <GUI_DataSet2_Screen+0x146>
}
 800fe6a:	b003      	add	sp, #12
 800fe6c:	bd30      	pop	{r4, r5, pc}
 800fe6e:	bf00      	nop
 800fe70:	2000022a 	.word	0x2000022a
 800fe74:	20005701 	.word	0x20005701
 800fe78:	20005703 	.word	0x20005703
 800fe7c:	20000ebc 	.word	0x20000ebc
 800fe80:	20005706 	.word	0x20005706

0800fe84 <GUI_DataSet3_Screen>:
{
 800fe84:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fe86:	4b35      	ldr	r3, [pc, #212]	; (800ff5c <GUI_DataSet3_Screen+0xd8>)
 800fe88:	4a35      	ldr	r2, [pc, #212]	; (800ff60 <GUI_DataSet3_Screen+0xdc>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	7812      	ldrb	r2, [r2, #0]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d061      	beq.n	800ff56 <GUI_DataSet3_Screen+0xd2>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800fe92:	4c34      	ldr	r4, [pc, #208]	; (800ff64 <GUI_DataSet3_Screen+0xe0>)
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800fe94:	4e34      	ldr	r6, [pc, #208]	; (800ff68 <GUI_DataSet3_Screen+0xe4>)
		GUI_Panels();
 800fe96:	f7ff fe7b 	bl	800fb90 <GUI_Panels>
		GUI_Text_CIE_XYZ(20, 82);
 800fe9a:	2152      	movs	r1, #82	; 0x52
 800fe9c:	2014      	movs	r0, #20
 800fe9e:	f006 fc91 	bl	80167c4 <GUI_Text_CIE_XYZ>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800fea2:	8822      	ldrh	r2, [r4, #0]
 800fea4:	2146      	movs	r1, #70	; 0x46
 800fea6:	f002 0210 	and.w	r2, r2, #16
 800feaa:	20c8      	movs	r0, #200	; 0xc8
 800feac:	f003 f99c 	bl	80131e8 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800feb0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800feb4:	2378      	movs	r3, #120	; 0x78
 800feb6:	4619      	mov	r1, r3
 800feb8:	f44f 7283 	mov.w	r2, #262	; 0x106
 800febc:	200a      	movs	r0, #10
 800febe:	9500      	str	r5, [sp, #0]
 800fec0:	f00c fce0 	bl	801c884 <TFT_DrawLine>
		GUI_Text_CIE_xy(20, 145);
 800fec4:	2191      	movs	r1, #145	; 0x91
 800fec6:	2014      	movs	r0, #20
 800fec8:	f006 ff28 	bl	8016d1c <GUI_Text_CIE_xy>
		GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 800fecc:	8822      	ldrh	r2, [r4, #0]
 800fece:	2185      	movs	r1, #133	; 0x85
 800fed0:	f002 0220 	and.w	r2, r2, #32
 800fed4:	20c8      	movs	r0, #200	; 0xc8
 800fed6:	f003 f987 	bl	80131e8 <GUI_CheckBox>
		GUI_Text_CIE_xy_1931(35, 209);
 800feda:	21d1      	movs	r1, #209	; 0xd1
 800fedc:	2023      	movs	r0, #35	; 0x23
 800fede:	f006 fcab 	bl	8016838 <GUI_Text_CIE_xy_1931>
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800fee2:	8823      	ldrh	r3, [r4, #0]
 800fee4:	7832      	ldrb	r2, [r6, #0]
 800fee6:	f003 0320 	and.w	r3, r3, #32
 800feea:	f002 0201 	and.w	r2, r2, #1
 800feee:	21c6      	movs	r1, #198	; 0xc6
 800fef0:	20c8      	movs	r0, #200	; 0xc8
 800fef2:	f003 f9ba 	bl	801326a <GUI_RadioBox>
		GUI_Text_CIE_xy_1964(35, 275);
 800fef6:	f240 1113 	movw	r1, #275	; 0x113
 800fefa:	2023      	movs	r0, #35	; 0x23
 800fefc:	f006 fcfc 	bl	80168f8 <GUI_Text_CIE_xy_1964>
		GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 800ff00:	7832      	ldrb	r2, [r6, #0]
 800ff02:	8823      	ldrh	r3, [r4, #0]
 800ff04:	43d2      	mvns	r2, r2
 800ff06:	f003 0320 	and.w	r3, r3, #32
 800ff0a:	f002 0201 	and.w	r2, r2, #1
 800ff0e:	f240 1107 	movw	r1, #263	; 0x107
 800ff12:	20c8      	movs	r0, #200	; 0xc8
 800ff14:	f003 f9a9 	bl	801326a <GUI_RadioBox>
		TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800ff18:	f240 1339 	movw	r3, #313	; 0x139
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ff22:	200a      	movs	r0, #10
 800ff24:	9500      	str	r5, [sp, #0]
 800ff26:	f00c fcad 	bl	801c884 <TFT_DrawLine>
		GUI_Text_CIE_Luv(20, 337);
 800ff2a:	f240 1151 	movw	r1, #337	; 0x151
 800ff2e:	2014      	movs	r0, #20
 800ff30:	f006 fd42 	bl	80169b8 <GUI_Text_CIE_Luv>
		GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 800ff34:	8822      	ldrh	r2, [r4, #0]
 800ff36:	f240 1147 	movw	r1, #327	; 0x147
 800ff3a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800ff3e:	20c8      	movs	r0, #200	; 0xc8
 800ff40:	f003 f952 	bl	80131e8 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800ff44:	f240 1379 	movw	r3, #377	; 0x179
 800ff48:	9500      	str	r5, [sp, #0]
 800ff4a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ff4e:	4619      	mov	r1, r3
 800ff50:	200a      	movs	r0, #10
 800ff52:	f00c fc97 	bl	801c884 <TFT_DrawLine>
}
 800ff56:	b002      	add	sp, #8
 800ff58:	bd70      	pop	{r4, r5, r6, pc}
 800ff5a:	bf00      	nop
 800ff5c:	2000022a 	.word	0x2000022a
 800ff60:	20005701 	.word	0x20005701
 800ff64:	20005706 	.word	0x20005706
 800ff68:	20005704 	.word	0x20005704

0800ff6c <GUI_DataSet4_Screen>:
{
 800ff6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800ff6e:	4b4b      	ldr	r3, [pc, #300]	; (801009c <GUI_DataSet4_Screen+0x130>)
 800ff70:	4a4b      	ldr	r2, [pc, #300]	; (80100a0 <GUI_DataSet4_Screen+0x134>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	7812      	ldrb	r2, [r2, #0]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	f000 808b 	beq.w	8010092 <GUI_DataSet4_Screen+0x126>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800ff7c:	4c49      	ldr	r4, [pc, #292]	; (80100a4 <GUI_DataSet4_Screen+0x138>)
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800ff7e:	4d4a      	ldr	r5, [pc, #296]	; (80100a8 <GUI_DataSet4_Screen+0x13c>)
		GUI_Panels();
 800ff80:	f7ff fe06 	bl	800fb90 <GUI_Panels>
		GUI_Text_CIE_Lab(20, 80);
 800ff84:	2150      	movs	r1, #80	; 0x50
 800ff86:	2014      	movs	r0, #20
 800ff88:	f006 fd64 	bl	8016a54 <GUI_Text_CIE_Lab>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800ff8c:	8822      	ldrh	r2, [r4, #0]
 800ff8e:	2141      	movs	r1, #65	; 0x41
 800ff90:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800ff94:	20c8      	movs	r0, #200	; 0xc8
 800ff96:	f003 f927 	bl	80131e8 <GUI_CheckBox>
		GUI_Text_A(40, 115);
 800ff9a:	2173      	movs	r1, #115	; 0x73
 800ff9c:	2028      	movs	r0, #40	; 0x28
 800ff9e:	f006 fe01 	bl	8016ba4 <GUI_Text_A>
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800ffa2:	8823      	ldrh	r3, [r4, #0]
 800ffa4:	782a      	ldrb	r2, [r5, #0]
 800ffa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffaa:	f002 0201 	and.w	r2, r2, #1
 800ffae:	216c      	movs	r1, #108	; 0x6c
 800ffb0:	20c8      	movs	r0, #200	; 0xc8
 800ffb2:	f003 f95a 	bl	801326a <GUI_RadioBox>
		GUI_Text_D65(40, 150);
 800ffb6:	2196      	movs	r1, #150	; 0x96
 800ffb8:	2028      	movs	r0, #40	; 0x28
 800ffba:	f006 fe09 	bl	8016bd0 <GUI_Text_D65>
		GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 800ffbe:	8823      	ldrh	r3, [r4, #0]
 800ffc0:	782a      	ldrb	r2, [r5, #0]
 800ffc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffc6:	f002 0202 	and.w	r2, r2, #2
 800ffca:	218f      	movs	r1, #143	; 0x8f
 800ffcc:	20c8      	movs	r0, #200	; 0xc8
 800ffce:	f003 f94c 	bl	801326a <GUI_RadioBox>
		GUI_Text_C(40, 185);
 800ffd2:	21b9      	movs	r1, #185	; 0xb9
 800ffd4:	2028      	movs	r0, #40	; 0x28
 800ffd6:	f006 fe1f 	bl	8016c18 <GUI_Text_C>
		GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 800ffda:	8823      	ldrh	r3, [r4, #0]
 800ffdc:	782a      	ldrb	r2, [r5, #0]
 800ffde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffe2:	f002 0204 	and.w	r2, r2, #4
 800ffe6:	21b2      	movs	r1, #178	; 0xb2
 800ffe8:	20c8      	movs	r0, #200	; 0xc8
 800ffea:	f003 f93e 	bl	801326a <GUI_RadioBox>
		GUI_Text_D50(40, 220);
 800ffee:	21dc      	movs	r1, #220	; 0xdc
 800fff0:	2028      	movs	r0, #40	; 0x28
 800fff2:	f006 fe27 	bl	8016c44 <GUI_Text_D50>
		GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 800fff6:	8823      	ldrh	r3, [r4, #0]
 800fff8:	782a      	ldrb	r2, [r5, #0]
 800fffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fffe:	f002 0208 	and.w	r2, r2, #8
 8010002:	21d5      	movs	r1, #213	; 0xd5
 8010004:	20c8      	movs	r0, #200	; 0xc8
 8010006:	f003 f930 	bl	801326a <GUI_RadioBox>
		GUI_Text_D55(40, 255);
 801000a:	21ff      	movs	r1, #255	; 0xff
 801000c:	2028      	movs	r0, #40	; 0x28
 801000e:	f006 fe3d 	bl	8016c8c <GUI_Text_D55>
		GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 8010012:	8823      	ldrh	r3, [r4, #0]
 8010014:	782a      	ldrb	r2, [r5, #0]
 8010016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801001a:	f002 0210 	and.w	r2, r2, #16
 801001e:	21f8      	movs	r1, #248	; 0xf8
 8010020:	20c8      	movs	r0, #200	; 0xc8
 8010022:	f003 f922 	bl	801326a <GUI_RadioBox>
		GUI_Text_D75(40, 290);
 8010026:	f44f 7191 	mov.w	r1, #290	; 0x122
 801002a:	2028      	movs	r0, #40	; 0x28
 801002c:	f006 fe52 	bl	8016cd4 <GUI_Text_D75>
		GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 8010030:	8823      	ldrh	r3, [r4, #0]
 8010032:	782a      	ldrb	r2, [r5, #0]
 8010034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010038:	f002 0220 	and.w	r2, r2, #32
 801003c:	f240 111b 	movw	r1, #283	; 0x11b
 8010040:	20c8      	movs	r0, #200	; 0xc8
 8010042:	f003 f912 	bl	801326a <GUI_RadioBox>
		TFT_DrawLine(10, 330, 262, 330, TFT_White);
 8010046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801004a:	9300      	str	r3, [sp, #0]
 801004c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8010050:	4619      	mov	r1, r3
 8010052:	200a      	movs	r0, #10
 8010054:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010058:	f00c fc14 	bl	801c884 <TFT_DrawLine>
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 801005c:	4b13      	ldr	r3, [pc, #76]	; (80100ac <GUI_DataSet4_Screen+0x140>)
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8010064:	2014      	movs	r0, #20
 8010066:	b1b3      	cbz	r3, 8010096 <GUI_DataSet4_Screen+0x12a>
 8010068:	f007 f8d2 	bl	8017210 <GUI_Text_EbEr>
		GUI_CheckBox(200, 345, Measure_Field&EbEr);
 801006c:	8822      	ldrh	r2, [r4, #0]
 801006e:	f240 1159 	movw	r1, #345	; 0x159
 8010072:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8010076:	20c8      	movs	r0, #200	; 0xc8
 8010078:	f003 f8b6 	bl	80131e8 <GUI_CheckBox>
		TFT_DrawLine(10, 390, 262, 390, TFT_White);
 801007c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8010086:	f44f 7283 	mov.w	r2, #262	; 0x106
 801008a:	4619      	mov	r1, r3
 801008c:	200a      	movs	r0, #10
 801008e:	f00c fbf9 	bl	801c884 <TFT_DrawLine>
}
 8010092:	b003      	add	sp, #12
 8010094:	bd30      	pop	{r4, r5, pc}
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 8010096:	f007 f8f5 	bl	8017284 <GUI_Text_LbLr>
 801009a:	e7e7      	b.n	801006c <GUI_DataSet4_Screen+0x100>
 801009c:	2000022a 	.word	0x2000022a
 80100a0:	20005701 	.word	0x20005701
 80100a4:	20005706 	.word	0x20005706
 80100a8:	20090ab9 	.word	0x20090ab9
 80100ac:	20000ebc 	.word	0x20000ebc

080100b0 <GUI_DataSet5_Screen>:
{
 80100b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 80100b2:	4b19      	ldr	r3, [pc, #100]	; (8010118 <GUI_DataSet5_Screen+0x68>)
 80100b4:	4a19      	ldr	r2, [pc, #100]	; (801011c <GUI_DataSet5_Screen+0x6c>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	7812      	ldrb	r2, [r2, #0]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d02a      	beq.n	8010114 <GUI_DataSet5_Screen+0x64>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 80100be:	4d18      	ldr	r5, [pc, #96]	; (8010120 <GUI_DataSet5_Screen+0x70>)
		GUI_Panels();
 80100c0:	f7ff fd66 	bl	800fb90 <GUI_Panels>
		GUI_Text_lambda_d(35, 86);
 80100c4:	2156      	movs	r1, #86	; 0x56
 80100c6:	2023      	movs	r0, #35	; 0x23
 80100c8:	f006 fece 	bl	8016e68 <GUI_Text_lambda_d>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 80100cc:	882a      	ldrh	r2, [r5, #0]
 80100ce:	2146      	movs	r1, #70	; 0x46
 80100d0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80100d4:	20c8      	movs	r0, #200	; 0xc8
 80100d6:	f003 f887 	bl	80131e8 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 80100da:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80100de:	2378      	movs	r3, #120	; 0x78
 80100e0:	4619      	mov	r1, r3
 80100e2:	f44f 7283 	mov.w	r2, #262	; 0x106
 80100e6:	200a      	movs	r0, #10
 80100e8:	9400      	str	r4, [sp, #0]
 80100ea:	f00c fbcb 	bl	801c884 <TFT_DrawLine>
		GUI_Text_SP(35, 145);
 80100ee:	2191      	movs	r1, #145	; 0x91
 80100f0:	2023      	movs	r0, #35	; 0x23
 80100f2:	f006 fe95 	bl	8016e20 <GUI_Text_SP>
		GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 80100f6:	882a      	ldrh	r2, [r5, #0]
 80100f8:	2185      	movs	r1, #133	; 0x85
 80100fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80100fe:	20c8      	movs	r0, #200	; 0xc8
 8010100:	f003 f872 	bl	80131e8 <GUI_CheckBox>
		TFT_DrawLine(10, 183, 262, 183, TFT_White);
 8010104:	23b7      	movs	r3, #183	; 0xb7
 8010106:	9400      	str	r4, [sp, #0]
 8010108:	f44f 7283 	mov.w	r2, #262	; 0x106
 801010c:	4619      	mov	r1, r3
 801010e:	200a      	movs	r0, #10
 8010110:	f00c fbb8 	bl	801c884 <TFT_DrawLine>
}
 8010114:	b003      	add	sp, #12
 8010116:	bd30      	pop	{r4, r5, pc}
 8010118:	2000022a 	.word	0x2000022a
 801011c:	20005701 	.word	0x20005701
 8010120:	20005706 	.word	0x20005706

08010124 <GUI_GraphSet1_Screen>:
{
 8010124:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 8010126:	4b1d      	ldr	r3, [pc, #116]	; (801019c <GUI_GraphSet1_Screen+0x78>)
 8010128:	4a1d      	ldr	r2, [pc, #116]	; (80101a0 <GUI_GraphSet1_Screen+0x7c>)
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	7812      	ldrb	r2, [r2, #0]
 801012e:	4c1d      	ldr	r4, [pc, #116]	; (80101a4 <GUI_GraphSet1_Screen+0x80>)
 8010130:	4d1d      	ldr	r5, [pc, #116]	; (80101a8 <GUI_GraphSet1_Screen+0x84>)
 8010132:	429a      	cmp	r2, r3
 8010134:	d103      	bne.n	801013e <GUI_GraphSet1_Screen+0x1a>
 8010136:	7822      	ldrb	r2, [r4, #0]
 8010138:	782b      	ldrb	r3, [r5, #0]
 801013a:	429a      	cmp	r2, r3
 801013c:	d022      	beq.n	8010184 <GUI_GraphSet1_Screen+0x60>
		GUI_Panels();
 801013e:	f7ff fd27 	bl	800fb90 <GUI_Panels>
		Language_status_prev = Language_status;
 8010142:	782b      	ldrb	r3, [r5, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 8010144:	4a19      	ldr	r2, [pc, #100]	; (80101ac <GUI_GraphSet1_Screen+0x88>)
		Language_status_prev = Language_status;
 8010146:	7023      	strb	r3, [r4, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 8010148:	210c      	movs	r1, #12
 801014a:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 801014c:	b9e3      	cbnz	r3, 8010188 <GUI_GraphSet1_Screen+0x64>
			GUI_OptionMenuRu();
 801014e:	f7ff f8fb 	bl	800f348 <GUI_OptionMenuRu>
			GUI_TextRu_PPF_bands(10, 337);
 8010152:	f240 1151 	movw	r1, #337	; 0x151
 8010156:	200a      	movs	r0, #10
 8010158:	f008 fce2 	bl	8018b20 <GUI_TextRu_PPF_bands>
			GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 801015c:	4b14      	ldr	r3, [pc, #80]	; (80101b0 <GUI_GraphSet1_Screen+0x8c>)
 801015e:	781a      	ldrb	r2, [r3, #0]
 8010160:	f240 1147 	movw	r1, #327	; 0x147
 8010164:	f002 0201 	and.w	r2, r2, #1
 8010168:	20c8      	movs	r0, #200	; 0xc8
 801016a:	f003 f83d 	bl	80131e8 <GUI_CheckBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 801016e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	f240 1379 	movw	r3, #377	; 0x179
 8010178:	f44f 7283 	mov.w	r2, #262	; 0x106
 801017c:	4619      	mov	r1, r3
 801017e:	200a      	movs	r0, #10
 8010180:	f00c fb80 	bl	801c884 <TFT_DrawLine>
}
 8010184:	b003      	add	sp, #12
 8010186:	bd30      	pop	{r4, r5, pc}
		else if(Language_status == En){
 8010188:	2b01      	cmp	r3, #1
 801018a:	d1e7      	bne.n	801015c <GUI_GraphSet1_Screen+0x38>
			GUI_OptionMenuEn();
 801018c:	f7ff f94c 	bl	800f428 <GUI_OptionMenuEn>
			GUI_TextEn_PARwavebands(10, 339);
 8010190:	f240 1153 	movw	r1, #339	; 0x153
 8010194:	200a      	movs	r0, #10
 8010196:	f007 fd15 	bl	8017bc4 <GUI_TextEn_PARwavebands>
 801019a:	e7df      	b.n	801015c <GUI_GraphSet1_Screen+0x38>
 801019c:	2000022a 	.word	0x2000022a
 80101a0:	20005701 	.word	0x20005701
 80101a4:	20090ab4 	.word	0x20090ab4
 80101a8:	20005703 	.word	0x20005703
 80101ac:	20091058 	.word	0x20091058
 80101b0:	20005702 	.word	0x20005702

080101b4 <GUI_GraphSet2_Screen>:
{
 80101b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 80101b6:	4b19      	ldr	r3, [pc, #100]	; (801021c <GUI_GraphSet2_Screen+0x68>)
 80101b8:	4a19      	ldr	r2, [pc, #100]	; (8010220 <GUI_GraphSet2_Screen+0x6c>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	7812      	ldrb	r2, [r2, #0]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d02a      	beq.n	8010218 <GUI_GraphSet2_Screen+0x64>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 80101c2:	4d18      	ldr	r5, [pc, #96]	; (8010224 <GUI_GraphSet2_Screen+0x70>)
		GUI_Panels();
 80101c4:	f7ff fce4 	bl	800fb90 <GUI_Panels>
		GUI_Text_EbEr(18, 82);
 80101c8:	2152      	movs	r1, #82	; 0x52
 80101ca:	2012      	movs	r0, #18
 80101cc:	f007 f820 	bl	8017210 <GUI_Text_EbEr>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 80101d0:	782a      	ldrb	r2, [r5, #0]
 80101d2:	2146      	movs	r1, #70	; 0x46
 80101d4:	f002 0202 	and.w	r2, r2, #2
 80101d8:	20c8      	movs	r0, #200	; 0xc8
 80101da:	f003 f805 	bl	80131e8 <GUI_CheckBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 80101de:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80101e2:	237a      	movs	r3, #122	; 0x7a
 80101e4:	4619      	mov	r1, r3
 80101e6:	f44f 7283 	mov.w	r2, #262	; 0x106
 80101ea:	200a      	movs	r0, #10
 80101ec:	9400      	str	r4, [sp, #0]
 80101ee:	f00c fb49 	bl	801c884 <TFT_DrawLine>
		GUI_Text_V_lambda(10, 145);
 80101f2:	2191      	movs	r1, #145	; 0x91
 80101f4:	200a      	movs	r0, #10
 80101f6:	f006 fe5b 	bl	8016eb0 <GUI_Text_V_lambda>
		GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 80101fa:	782a      	ldrb	r2, [r5, #0]
 80101fc:	2185      	movs	r1, #133	; 0x85
 80101fe:	f002 0204 	and.w	r2, r2, #4
 8010202:	20c8      	movs	r0, #200	; 0xc8
 8010204:	f002 fff0 	bl	80131e8 <GUI_CheckBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 8010208:	23b9      	movs	r3, #185	; 0xb9
 801020a:	9400      	str	r4, [sp, #0]
 801020c:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010210:	4619      	mov	r1, r3
 8010212:	200a      	movs	r0, #10
 8010214:	f00c fb36 	bl	801c884 <TFT_DrawLine>
}
 8010218:	b003      	add	sp, #12
 801021a:	bd30      	pop	{r4, r5, pc}
 801021c:	2000022a 	.word	0x2000022a
 8010220:	20005701 	.word	0x20005701
 8010224:	20005702 	.word	0x20005702

08010228 <GUI_ColorSet1_Screen>:
{
 8010228:	b513      	push	{r0, r1, r4, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 801022a:	4b1b      	ldr	r3, [pc, #108]	; (8010298 <GUI_ColorSet1_Screen+0x70>)
 801022c:	4a1b      	ldr	r2, [pc, #108]	; (801029c <GUI_ColorSet1_Screen+0x74>)
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	7812      	ldrb	r2, [r2, #0]
 8010232:	4c1b      	ldr	r4, [pc, #108]	; (80102a0 <GUI_ColorSet1_Screen+0x78>)
 8010234:	429a      	cmp	r2, r3
 8010236:	4b1b      	ldr	r3, [pc, #108]	; (80102a4 <GUI_ColorSet1_Screen+0x7c>)
 8010238:	d103      	bne.n	8010242 <GUI_ColorSet1_Screen+0x1a>
 801023a:	7819      	ldrb	r1, [r3, #0]
 801023c:	7822      	ldrb	r2, [r4, #0]
 801023e:	4291      	cmp	r1, r2
 8010240:	d023      	beq.n	801028a <GUI_ColorSet1_Screen+0x62>
		Language_status_prev = Language_status;
 8010242:	7822      	ldrb	r2, [r4, #0]
 8010244:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 8010246:	f7ff fca3 	bl	800fb90 <GUI_Panels>
		Prev_Inf_Screen2 = ColorSet1_Screen;
 801024a:	4b17      	ldr	r3, [pc, #92]	; (80102a8 <GUI_ColorSet1_Screen+0x80>)
 801024c:	220e      	movs	r2, #14
 801024e:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 8010250:	7823      	ldrb	r3, [r4, #0]
 8010252:	b9e3      	cbnz	r3, 801028e <GUI_ColorSet1_Screen+0x66>
			GUI_OptionMenuRu();
 8010254:	f7ff f878 	bl	800f348 <GUI_OptionMenuRu>
			GUI_Text_CIE_xy(10, 337);
 8010258:	f240 1151 	movw	r1, #337	; 0x151
 801025c:	200a      	movs	r0, #10
 801025e:	f006 fd5d 	bl	8016d1c <GUI_Text_CIE_xy>
			GUI_RadioBox(200, 327, Color_Field&Color_CIE_xy, 0x01);
 8010262:	4b12      	ldr	r3, [pc, #72]	; (80102ac <GUI_ColorSet1_Screen+0x84>)
 8010264:	781a      	ldrb	r2, [r3, #0]
 8010266:	2301      	movs	r3, #1
 8010268:	401a      	ands	r2, r3
 801026a:	f240 1147 	movw	r1, #327	; 0x147
 801026e:	20c8      	movs	r0, #200	; 0xc8
 8010270:	f002 fffb 	bl	801326a <GUI_RadioBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 8010274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010278:	9300      	str	r3, [sp, #0]
 801027a:	f240 1379 	movw	r3, #377	; 0x179
 801027e:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010282:	4619      	mov	r1, r3
 8010284:	200a      	movs	r0, #10
 8010286:	f00c fafd 	bl	801c884 <TFT_DrawLine>
}
 801028a:	b002      	add	sp, #8
 801028c:	bd10      	pop	{r4, pc}
		else if(Language_status == En){
 801028e:	2b01      	cmp	r3, #1
 8010290:	d1e2      	bne.n	8010258 <GUI_ColorSet1_Screen+0x30>
			GUI_OptionMenuEn();
 8010292:	f7ff f8c9 	bl	800f428 <GUI_OptionMenuEn>
 8010296:	e7df      	b.n	8010258 <GUI_ColorSet1_Screen+0x30>
 8010298:	2000022a 	.word	0x2000022a
 801029c:	20005701 	.word	0x20005701
 80102a0:	20005703 	.word	0x20005703
 80102a4:	20090ab4 	.word	0x20090ab4
 80102a8:	20091058 	.word	0x20091058
 80102ac:	200056ff 	.word	0x200056ff

080102b0 <GUI_ColorSet2_Screen>:
{
 80102b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 80102b2:	4b1a      	ldr	r3, [pc, #104]	; (801031c <GUI_ColorSet2_Screen+0x6c>)
 80102b4:	4a1a      	ldr	r2, [pc, #104]	; (8010320 <GUI_ColorSet2_Screen+0x70>)
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	7812      	ldrb	r2, [r2, #0]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d02c      	beq.n	8010318 <GUI_ColorSet2_Screen+0x68>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 80102be:	4d19      	ldr	r5, [pc, #100]	; (8010324 <GUI_ColorSet2_Screen+0x74>)
		GUI_Panels();
 80102c0:	f7ff fc66 	bl	800fb90 <GUI_Panels>
		GUI_Text_CIE_Luv(20, 82);
 80102c4:	2152      	movs	r1, #82	; 0x52
 80102c6:	2014      	movs	r0, #20
 80102c8:	f006 fb76 	bl	80169b8 <GUI_Text_CIE_Luv>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 80102cc:	782a      	ldrb	r2, [r5, #0]
 80102ce:	2301      	movs	r3, #1
 80102d0:	f002 0204 	and.w	r2, r2, #4
 80102d4:	2146      	movs	r1, #70	; 0x46
 80102d6:	20c8      	movs	r0, #200	; 0xc8
 80102d8:	f002 ffc7 	bl	801326a <GUI_RadioBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 80102dc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80102e0:	237a      	movs	r3, #122	; 0x7a
 80102e2:	4619      	mov	r1, r3
 80102e4:	f44f 7283 	mov.w	r2, #262	; 0x106
 80102e8:	200a      	movs	r0, #10
 80102ea:	9400      	str	r4, [sp, #0]
 80102ec:	f00c faca 	bl	801c884 <TFT_DrawLine>
		GUI_Text_CIE_Lab(20, 145);
 80102f0:	2191      	movs	r1, #145	; 0x91
 80102f2:	2014      	movs	r0, #20
 80102f4:	f006 fbae 	bl	8016a54 <GUI_Text_CIE_Lab>
		GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 80102f8:	782a      	ldrb	r2, [r5, #0]
 80102fa:	2301      	movs	r3, #1
 80102fc:	f002 0202 	and.w	r2, r2, #2
 8010300:	2185      	movs	r1, #133	; 0x85
 8010302:	20c8      	movs	r0, #200	; 0xc8
 8010304:	f002 ffb1 	bl	801326a <GUI_RadioBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 8010308:	23b9      	movs	r3, #185	; 0xb9
 801030a:	9400      	str	r4, [sp, #0]
 801030c:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010310:	4619      	mov	r1, r3
 8010312:	200a      	movs	r0, #10
 8010314:	f00c fab6 	bl	801c884 <TFT_DrawLine>
}
 8010318:	b003      	add	sp, #12
 801031a:	bd30      	pop	{r4, r5, pc}
 801031c:	2000022a 	.word	0x2000022a
 8010320:	20005701 	.word	0x20005701
 8010324:	200056ff 	.word	0x200056ff

08010328 <GUI_ColorRendSet_Screen>:
{
 8010328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 801032a:	4b28      	ldr	r3, [pc, #160]	; (80103cc <GUI_ColorRendSet_Screen+0xa4>)
 801032c:	4d28      	ldr	r5, [pc, #160]	; (80103d0 <GUI_ColorRendSet_Screen+0xa8>)
 801032e:	4c29      	ldr	r4, [pc, #164]	; (80103d4 <GUI_ColorRendSet_Screen+0xac>)
 8010330:	2202      	movs	r2, #2
 8010332:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 8010334:	4b28      	ldr	r3, [pc, #160]	; (80103d8 <GUI_ColorRendSet_Screen+0xb0>)
 8010336:	4a29      	ldr	r2, [pc, #164]	; (80103dc <GUI_ColorRendSet_Screen+0xb4>)
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	7812      	ldrb	r2, [r2, #0]
 801033c:	429a      	cmp	r2, r3
 801033e:	d103      	bne.n	8010348 <GUI_ColorRendSet_Screen+0x20>
 8010340:	782a      	ldrb	r2, [r5, #0]
 8010342:	7823      	ldrb	r3, [r4, #0]
 8010344:	429a      	cmp	r2, r3
 8010346:	d03e      	beq.n	80103c6 <GUI_ColorRendSet_Screen+0x9e>
		GUI_Panels();
 8010348:	f7ff fc22 	bl	800fb90 <GUI_Panels>
		Language_status_prev = Language_status;
 801034c:	7823      	ldrb	r3, [r4, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 801034e:	4a24      	ldr	r2, [pc, #144]	; (80103e0 <GUI_ColorRendSet_Screen+0xb8>)
		Language_status_prev = Language_status;
 8010350:	702b      	strb	r3, [r5, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 8010352:	2110      	movs	r1, #16
 8010354:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 8010356:	b90b      	cbnz	r3, 801035c <GUI_ColorRendSet_Screen+0x34>
			GUI_OptionMenuRu();
 8010358:	f7fe fff6 	bl	800f348 <GUI_OptionMenuRu>
		if(Language_status == En){
 801035c:	7823      	ldrb	r3, [r4, #0]
 801035e:	2b01      	cmp	r3, #1
 8010360:	d101      	bne.n	8010366 <GUI_ColorRendSet_Screen+0x3e>
			GUI_OptionMenuEn();
 8010362:	f7ff f861 	bl	800f428 <GUI_OptionMenuEn>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8010366:	4d1f      	ldr	r5, [pc, #124]	; (80103e4 <GUI_ColorRendSet_Screen+0xbc>)
			GUI_Text_CRI(30, 325);
 8010368:	f240 1145 	movw	r1, #325	; 0x145
 801036c:	201e      	movs	r0, #30
 801036e:	f006 fd0f 	bl	8016d90 <GUI_Text_CRI>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8010372:	782a      	ldrb	r2, [r5, #0]
 8010374:	2301      	movs	r3, #1
 8010376:	401a      	ands	r2, r3
 8010378:	f44f 719f 	mov.w	r1, #318	; 0x13e
 801037c:	20b9      	movs	r0, #185	; 0xb9
 801037e:	f002 ff74 	bl	801326a <GUI_RadioBox>
			TFT_DrawLine(10, 355, 262, 355, TFT_White);
 8010382:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8010386:	f240 1363 	movw	r3, #355	; 0x163
 801038a:	4619      	mov	r1, r3
 801038c:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010390:	200a      	movs	r0, #10
 8010392:	9400      	str	r4, [sp, #0]
 8010394:	f00c fa76 	bl	801c884 <TFT_DrawLine>
			GUI_Text_CQS(30, 369);
 8010398:	f240 1171 	movw	r1, #369	; 0x171
 801039c:	201e      	movs	r0, #30
 801039e:	f006 fd1b 	bl	8016dd8 <GUI_Text_CQS>
			GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 80103a2:	782a      	ldrb	r2, [r5, #0]
 80103a4:	2301      	movs	r3, #1
 80103a6:	43d2      	mvns	r2, r2
 80103a8:	401a      	ands	r2, r3
 80103aa:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80103ae:	20b9      	movs	r0, #185	; 0xb9
 80103b0:	f002 ff5b 	bl	801326a <GUI_RadioBox>
			TFT_DrawLine(10, 401, 262, 401, TFT_White);
 80103b4:	f240 1391 	movw	r3, #401	; 0x191
 80103b8:	9400      	str	r4, [sp, #0]
 80103ba:	f44f 7283 	mov.w	r2, #262	; 0x106
 80103be:	4619      	mov	r1, r3
 80103c0:	200a      	movs	r0, #10
 80103c2:	f00c fa5f 	bl	801c884 <TFT_DrawLine>
}
 80103c6:	b003      	add	sp, #12
 80103c8:	bd30      	pop	{r4, r5, pc}
 80103ca:	bf00      	nop
 80103cc:	20000231 	.word	0x20000231
 80103d0:	20090ab4 	.word	0x20090ab4
 80103d4:	20005703 	.word	0x20005703
 80103d8:	2000022a 	.word	0x2000022a
 80103dc:	20005701 	.word	0x20005701
 80103e0:	20091058 	.word	0x20091058
 80103e4:	20005700 	.word	0x20005700

080103e8 <GUI_Graph_Screen>:
void GUI_Graph_Screen(){
 80103e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ec:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 80103f0:	4b87      	ldr	r3, [pc, #540]	; (8010610 <GUI_Graph_Screen+0x228>)
 80103f2:	4a88      	ldr	r2, [pc, #544]	; (8010614 <GUI_Graph_Screen+0x22c>)
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	7812      	ldrb	r2, [r2, #0]
 80103f8:	4d87      	ldr	r5, [pc, #540]	; (8010618 <GUI_Graph_Screen+0x230>)
 80103fa:	4c88      	ldr	r4, [pc, #544]	; (801061c <GUI_Graph_Screen+0x234>)
 80103fc:	429a      	cmp	r2, r3
void GUI_Graph_Screen(){
 80103fe:	b083      	sub	sp, #12
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 8010400:	d104      	bne.n	801040c <GUI_Graph_Screen+0x24>
 8010402:	782a      	ldrb	r2, [r5, #0]
 8010404:	7823      	ldrb	r3, [r4, #0]
 8010406:	429a      	cmp	r2, r3
 8010408:	f000 809d 	beq.w	8010546 <GUI_Graph_Screen+0x15e>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801040c:	2063      	movs	r0, #99	; 0x63
 801040e:	f00c f897 	bl	801c540 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 8010412:	4a83      	ldr	r2, [pc, #524]	; (8010620 <GUI_Graph_Screen+0x238>)
 8010414:	2300      	movs	r3, #0
 8010416:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010418:	4a82      	ldr	r2, [pc, #520]	; (8010624 <GUI_Graph_Screen+0x23c>)
 801041a:	7013      	strb	r3, [r2, #0]
		GUI_Panels();		
 801041c:	f7ff fbb8 	bl	800fb90 <GUI_Panels>
		Rotation_Screen_Spectral_Old = Rotation_Screen_Spectral;
 8010420:	7820      	ldrb	r0, [r4, #0]
 8010422:	7028      	strb	r0, [r5, #0]
		if(Graph_Field&PPF_Bands)
 8010424:	4d80      	ldr	r5, [pc, #512]	; (8010628 <GUI_Graph_Screen+0x240>)
 8010426:	782b      	ldrb	r3, [r5, #0]
 8010428:	07d9      	lsls	r1, r3, #31
 801042a:	d501      	bpl.n	8010430 <GUI_Graph_Screen+0x48>
			Spectral_PAR_Range(Rotation_Screen_Spectral);
 801042c:	f00b f9a0 	bl	801b770 <Spectral_PAR_Range>
		if(Graph_Field&V_lambda)
 8010430:	782b      	ldrb	r3, [r5, #0]
 8010432:	075a      	lsls	r2, r3, #29
 8010434:	d538      	bpl.n	80104a8 <GUI_Graph_Screen+0xc0>
			if(Rotation_Screen_Spectral == 0)
 8010436:	7820      	ldrb	r0, [r4, #0]
 8010438:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8010638 <GUI_Graph_Screen+0x250>
 801043c:	f8df c210 	ldr.w	ip, [pc, #528]	; 8010650 <GUI_Graph_Screen+0x268>
 8010440:	4e7a      	ldr	r6, [pc, #488]	; (801062c <GUI_Graph_Screen+0x244>)
 8010442:	4f7b      	ldr	r7, [pc, #492]	; (8010630 <GUI_Graph_Screen+0x248>)
 8010444:	2800      	cmp	r0, #0
 8010446:	f040 8086 	bne.w	8010556 <GUI_Graph_Screen+0x16e>
						buf_pix = (Spectral_day[i])*307;
 801044a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8010634 <GUI_Graph_Screen+0x24c>
 801044e:	4603      	mov	r3, r0
 8010450:	0119      	lsls	r1, r3, #4
 8010452:	eb0c 0201 	add.w	r2, ip, r1
 8010456:	edd2 7a00 	vldr	s15, [r2]
 801045a:	ee67 7a87 	vmul.f32	s15, s15, s14
						buf_pix = (Spectral_night[i])*307;
 801045e:	4439      	add	r1, r7
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 8010460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010464:	ee17 2a90 	vmov	r2, s15
						buf_pix = (Spectral_night[i])*307;
 8010468:	edd1 7a00 	vldr	s15, [r1]
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 801046c:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
						buf_pix = (Spectral_night[i])*307;
 8010470:	ee67 7a87 	vmul.f32	s15, s15, s14
						graph_spectral_night[jj] = (uint16_t)buf_pix;
 8010474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010478:	ee17 2a90 	vmov	r2, s15
 801047c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8010480:	3301      	adds	r3, #1
				for(uint16_t i = 0; i < 1024; i+=4)
 8010482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010486:	d1e3      	bne.n	8010450 <GUI_Graph_Screen+0x68>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, Rotation_Screen_Spectral);
 8010488:	2114      	movs	r1, #20
 801048a:	9000      	str	r0, [sp, #0]
 801048c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8010490:	4608      	mov	r0, r1
 8010492:	4a69      	ldr	r2, [pc, #420]	; (8010638 <GUI_Graph_Screen+0x250>)
 8010494:	f00b fb2c 	bl	801baf0 <Spectral_DrawGraph_Const>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, Rotation_Screen_Spectral);
 8010498:	7823      	ldrb	r3, [r4, #0]
 801049a:	9300      	str	r3, [sp, #0]
 801049c:	2114      	movs	r1, #20
 801049e:	231f      	movs	r3, #31
 80104a0:	4a62      	ldr	r2, [pc, #392]	; (801062c <GUI_Graph_Screen+0x244>)
 80104a2:	4608      	mov	r0, r1
 80104a4:	f00b fb24 	bl	801baf0 <Spectral_DrawGraph_Const>
			if(Graph_Field&EbEr_graph)
 80104a8:	782b      	ldrb	r3, [r5, #0]
 80104aa:	079b      	lsls	r3, r3, #30
 80104ac:	d545      	bpl.n	801053a <GUI_Graph_Screen+0x152>
				if(Rotation_Screen_Spectral == 0)
 80104ae:	7826      	ldrb	r6, [r4, #0]
 80104b0:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8010644 <GUI_Graph_Screen+0x25c>
 80104b4:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8010654 <GUI_Graph_Screen+0x26c>
 80104b8:	4f60      	ldr	r7, [pc, #384]	; (801063c <GUI_Graph_Screen+0x254>)
 80104ba:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8010658 <GUI_Graph_Screen+0x270>
 80104be:	2e00      	cmp	r6, #0
 80104c0:	d16c      	bne.n	801059c <GUI_Graph_Screen+0x1b4>
							buf_pix = (Hazard_Blue[i])*307;
 80104c2:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8010634 <GUI_Graph_Screen+0x24c>
 80104c6:	4635      	mov	r5, r6
 80104c8:	012a      	lsls	r2, r5, #4
 80104ca:	eb0a 0302 	add.w	r3, sl, r2
 80104ce:	edd3 7a00 	vldr	s15, [r3]
 80104d2:	ee67 7a88 	vmul.f32	s15, s15, s16
							buf_pix = (Hazard_Retina[i])/10.*307;
 80104d6:	4442      	add	r2, r8
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 80104d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							buf_pix = (Hazard_Retina[i])/10.*307;
 80104dc:	6810      	ldr	r0, [r2, #0]
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 80104de:	ee17 3a90 	vmov	r3, s15
 80104e2:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
							buf_pix = (Hazard_Retina[i])/10.*307;
 80104e6:	f7f0 f847 	bl	8000578 <__aeabi_f2d>
 80104ea:	2200      	movs	r2, #0
 80104ec:	4b54      	ldr	r3, [pc, #336]	; (8010640 <GUI_Graph_Screen+0x258>)
 80104ee:	f7f0 f9c1 	bl	8000874 <__aeabi_ddiv>
 80104f2:	a343      	add	r3, pc, #268	; (adr r3, 8010600 <GUI_Graph_Screen+0x218>)
 80104f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f8:	f7f0 f892 	bl	8000620 <__aeabi_dmul>
 80104fc:	f7f0 fb88 	bl	8000c10 <__aeabi_d2f>
							graph_spectral_Retina[jj] = (uint16_t)buf_pix;
 8010500:	ee07 0a90 	vmov	s15, r0
 8010504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010508:	ee17 0a90 	vmov	r0, s15
 801050c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 8010510:	3501      	adds	r5, #1
					for(uint16_t i = 0; i < 1024; i+=4)
 8010512:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010516:	d1d7      	bne.n	80104c8 <GUI_Graph_Screen+0xe0>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, Rotation_Screen_Spectral);
 8010518:	2114      	movs	r1, #20
 801051a:	4608      	mov	r0, r1
 801051c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8010520:	4a48      	ldr	r2, [pc, #288]	; (8010644 <GUI_Graph_Screen+0x25c>)
 8010522:	9600      	str	r6, [sp, #0]
 8010524:	f00b fae4 	bl	801baf0 <Spectral_DrawGraph_Const>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, Rotation_Screen_Spectral);
 8010528:	7823      	ldrb	r3, [r4, #0]
 801052a:	9300      	str	r3, [sp, #0]
 801052c:	2114      	movs	r1, #20
 801052e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8010532:	4a42      	ldr	r2, [pc, #264]	; (801063c <GUI_Graph_Screen+0x254>)
 8010534:	4608      	mov	r0, r1
 8010536:	f00b fadb 	bl	801baf0 <Spectral_DrawGraph_Const>
		Spectral_Axes(Rotation_Screen_Spectral);
 801053a:	7820      	ldrb	r0, [r4, #0]
 801053c:	f00b f84a 	bl	801b5d4 <Spectral_Axes>
		Spectral_Axes_Text(Rotation_Screen_Spectral);
 8010540:	7820      	ldrb	r0, [r4, #0]
 8010542:	f00b f9f7 	bl	801b934 <Spectral_Axes_Text>
	Prev_Inf_Screen = Graph_Screen;	
 8010546:	4b40      	ldr	r3, [pc, #256]	; (8010648 <GUI_Graph_Screen+0x260>)
 8010548:	2204      	movs	r2, #4
 801054a:	701a      	strb	r2, [r3, #0]
}
 801054c:	b003      	add	sp, #12
 801054e:	ecbd 8b02 	vpop	{d8}
 8010552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								buf_pix = (Spectral_day[i])*209;
 8010556:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 801064c <GUI_Graph_Screen+0x264>
 801055a:	2300      	movs	r3, #0
 801055c:	f04f 080c 	mov.w	r8, #12
 8010560:	fb08 f103 	mul.w	r1, r8, r3
 8010564:	eb0c 0201 	add.w	r2, ip, r1
 8010568:	edd2 7a00 	vldr	s15, [r2]
 801056c:	ee67 7a87 	vmul.f32	s15, s15, s14
								buf_pix = (Spectral_night[i])*209;
 8010570:	4439      	add	r1, r7
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 8010572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010576:	ee17 2a90 	vmov	r2, s15
								buf_pix = (Spectral_night[i])*209;
 801057a:	edd1 7a00 	vldr	s15, [r1]
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 801057e:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
								buf_pix = (Spectral_night[i])*209;
 8010582:	ee67 7a87 	vmul.f32	s15, s15, s14
								graph_spectral_night[ii] = (uint16_t)buf_pix;
 8010586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801058a:	ee17 2a90 	vmov	r2, s15
 801058e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8010592:	3301      	adds	r3, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 8010594:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8010598:	d1e2      	bne.n	8010560 <GUI_Graph_Screen+0x178>
 801059a:	e775      	b.n	8010488 <GUI_Graph_Screen+0xa0>
								buf_pix = (Hazard_Blue[i])*209;
 801059c:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 801064c <GUI_Graph_Screen+0x264>
 80105a0:	2500      	movs	r5, #0
 80105a2:	f04f 0b0c 	mov.w	fp, #12
 80105a6:	fb0b f205 	mul.w	r2, fp, r5
 80105aa:	eb0a 0302 	add.w	r3, sl, r2
 80105ae:	edd3 7a00 	vldr	s15, [r3]
 80105b2:	ee67 7a88 	vmul.f32	s15, s15, s16
								buf_pix = (Hazard_Retina[i])/10.*209;
 80105b6:	4442      	add	r2, r8
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 80105b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
								buf_pix = (Hazard_Retina[i])/10.*209;
 80105bc:	6810      	ldr	r0, [r2, #0]
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 80105be:	ee17 3a90 	vmov	r3, s15
 80105c2:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
								buf_pix = (Hazard_Retina[i])/10.*209;
 80105c6:	f7ef ffd7 	bl	8000578 <__aeabi_f2d>
 80105ca:	2200      	movs	r2, #0
 80105cc:	4b1c      	ldr	r3, [pc, #112]	; (8010640 <GUI_Graph_Screen+0x258>)
 80105ce:	f7f0 f951 	bl	8000874 <__aeabi_ddiv>
 80105d2:	a30d      	add	r3, pc, #52	; (adr r3, 8010608 <GUI_Graph_Screen+0x220>)
 80105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d8:	f7f0 f822 	bl	8000620 <__aeabi_dmul>
 80105dc:	f7f0 fb18 	bl	8000c10 <__aeabi_d2f>
								graph_spectral_Retina[ii] = (uint16_t)buf_pix;
 80105e0:	ee07 0a90 	vmov	s15, r0
 80105e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105e8:	ee17 0a90 	vmov	r0, s15
 80105ec:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 80105f0:	3501      	adds	r5, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 80105f2:	f5b5 7fab 	cmp.w	r5, #342	; 0x156
 80105f6:	d1d6      	bne.n	80105a6 <GUI_Graph_Screen+0x1be>
 80105f8:	e78e      	b.n	8010518 <GUI_Graph_Screen+0x130>
 80105fa:	bf00      	nop
 80105fc:	f3af 8000 	nop.w
 8010600:	00000000 	.word	0x00000000
 8010604:	40733000 	.word	0x40733000
 8010608:	00000000 	.word	0x00000000
 801060c:	406a2000 	.word	0x406a2000
 8010610:	2000022a 	.word	0x2000022a
 8010614:	20005701 	.word	0x20005701
 8010618:	20091059 	.word	0x20091059
 801061c:	2000570a 	.word	0x2000570a
 8010620:	20005727 	.word	0x20005727
 8010624:	20005726 	.word	0x20005726
 8010628:	20005702 	.word	0x20005702
 801062c:	20091320 	.word	0x20091320
 8010630:	20053940 	.word	0x20053940
 8010634:	43998000 	.word	0x43998000
 8010638:	20090d82 	.word	0x20090d82
 801063c:	20090abc 	.word	0x20090abc
 8010640:	40240000 	.word	0x40240000
 8010644:	2009105a 	.word	0x2009105a
 8010648:	20090ab5 	.word	0x20090ab5
 801064c:	43510000 	.word	0x43510000
 8010650:	20052940 	.word	0x20052940
 8010654:	20009d38 	.word	0x20009d38
 8010658:	2000ad38 	.word	0x2000ad38

0801065c <GUI_SignalLevel>:
}



void GUI_SignalLevel()
{
 801065c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(oldHighSignal != highSignal)
 801065e:	4f2a      	ldr	r7, [pc, #168]	; (8010708 <GUI_SignalLevel+0xac>)
 8010660:	4e2a      	ldr	r6, [pc, #168]	; (801070c <GUI_SignalLevel+0xb0>)
 8010662:	783b      	ldrb	r3, [r7, #0]
 8010664:	7832      	ldrb	r2, [r6, #0]
 8010666:	429a      	cmp	r2, r3
 8010668:	d00a      	beq.n	8010680 <GUI_SignalLevel+0x24>
  {
    if(highSignal)
 801066a:	b363      	cbz	r3, 80106c6 <GUI_SignalLevel+0x6a>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 801066c:	4b28      	ldr	r3, [pc, #160]	; (8010710 <GUI_SignalLevel+0xb4>)
 801066e:	781a      	ldrb	r2, [r3, #0]
 8010670:	4b28      	ldr	r3, [pc, #160]	; (8010714 <GUI_SignalLevel+0xb8>)
 8010672:	211e      	movs	r1, #30
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	b9f2      	cbnz	r2, 80106b6 <GUI_SignalLevel+0x5a>
 8010678:	b1cb      	cbz	r3, 80106ae <GUI_SignalLevel+0x52>
 801067a:	200f      	movs	r0, #15
 801067c:	f009 f966 	bl	801994c <GUI_TextMsgRu_HighIrradiance>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
  
  if(oldLowSignal != lowSignal)
 8010680:	4d25      	ldr	r5, [pc, #148]	; (8010718 <GUI_SignalLevel+0xbc>)
 8010682:	4c26      	ldr	r4, [pc, #152]	; (801071c <GUI_SignalLevel+0xc0>)
 8010684:	782b      	ldrb	r3, [r5, #0]
 8010686:	7820      	ldrb	r0, [r4, #0]
 8010688:	4298      	cmp	r0, r3
 801068a:	d00a      	beq.n	80106a2 <GUI_SignalLevel+0x46>
  {
    if(lowSignal)
 801068c:	b38b      	cbz	r3, 80106f2 <GUI_SignalLevel+0x96>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 801068e:	4b20      	ldr	r3, [pc, #128]	; (8010710 <GUI_SignalLevel+0xb4>)
 8010690:	781a      	ldrb	r2, [r3, #0]
 8010692:	4b20      	ldr	r3, [pc, #128]	; (8010714 <GUI_SignalLevel+0xb8>)
 8010694:	211e      	movs	r1, #30
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	bb1a      	cbnz	r2, 80106e2 <GUI_SignalLevel+0x86>
 801069a:	b1f3      	cbz	r3, 80106da <GUI_SignalLevel+0x7e>
 801069c:	2014      	movs	r0, #20
 801069e:	f009 f85d 	bl	801975c <GUI_TextMsgRu_LowIrradiance>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
	oldHighSignal = highSignal;
 80106a2:	783b      	ldrb	r3, [r7, #0]
 80106a4:	7033      	strb	r3, [r6, #0]
	oldLowSignal = lowSignal;
 80106a6:	782b      	ldrb	r3, [r5, #0]
 80106a8:	7023      	strb	r3, [r4, #0]
}
 80106aa:	b003      	add	sp, #12
 80106ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 80106ae:	2032      	movs	r0, #50	; 0x32
 80106b0:	f009 f9e8 	bl	8019a84 <GUI_TextMsgRu_HighRadiance>
 80106b4:	e7e4      	b.n	8010680 <GUI_SignalLevel+0x24>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
 80106b6:	2037      	movs	r0, #55	; 0x37
 80106b8:	b113      	cbz	r3, 80106c0 <GUI_SignalLevel+0x64>
 80106ba:	f006 ff8f 	bl	80175dc <GUI_TextMsgEn_HighIrradiance>
 80106be:	e7df      	b.n	8010680 <GUI_SignalLevel+0x24>
 80106c0:	f007 f804 	bl	80176cc <GUI_TextMsgEn_HighRadiance>
 80106c4:	e7dc      	b.n	8010680 <GUI_SignalLevel+0x24>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 80106c6:	2363      	movs	r3, #99	; 0x63
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80106ce:	2338      	movs	r3, #56	; 0x38
 80106d0:	2120      	movs	r1, #32
 80106d2:	200a      	movs	r0, #10
 80106d4:	f00c f933 	bl	801c93e <TFT_FillRectangle>
 80106d8:	e7d2      	b.n	8010680 <GUI_SignalLevel+0x24>
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 80106da:	2037      	movs	r0, #55	; 0x37
 80106dc:	f009 f8cc 	bl	8019878 <GUI_TextMsgRu_LowRadiance>
 80106e0:	e7df      	b.n	80106a2 <GUI_SignalLevel+0x46>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
 80106e2:	2046      	movs	r0, #70	; 0x46
 80106e4:	b113      	cbz	r3, 80106ec <GUI_SignalLevel+0x90>
 80106e6:	f007 f8bf 	bl	8017868 <GUI_TextMsgEn_LowIrradiance>
 80106ea:	e7da      	b.n	80106a2 <GUI_SignalLevel+0x46>
 80106ec:	f007 f858 	bl	80177a0 <GUI_TextMsgEn_LowRadiance>
 80106f0:	e7d7      	b.n	80106a2 <GUI_SignalLevel+0x46>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 80106f2:	2363      	movs	r3, #99	; 0x63
 80106f4:	9300      	str	r3, [sp, #0]
 80106f6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80106fa:	2338      	movs	r3, #56	; 0x38
 80106fc:	2120      	movs	r1, #32
 80106fe:	200a      	movs	r0, #10
 8010700:	f00c f91d 	bl	801c93e <TFT_FillRectangle>
 8010704:	e7cd      	b.n	80106a2 <GUI_SignalLevel+0x46>
 8010706:	bf00      	nop
 8010708:	200905bf 	.word	0x200905bf
 801070c:	20005726 	.word	0x20005726
 8010710:	20005703 	.word	0x20005703
 8010714:	20000ebc 	.word	0x20000ebc
 8010718:	200905c2 	.word	0x200905c2
 801071c:	20005727 	.word	0x20005727

08010720 <GUI_Measure_Screen>:
void GUI_Measure_Screen(){
 8010720:	b510      	push	{r4, lr}
	if(preGUI_screen_state != GUI_screen_state){
 8010722:	4910      	ldr	r1, [pc, #64]	; (8010764 <GUI_Measure_Screen+0x44>)
 8010724:	4c10      	ldr	r4, [pc, #64]	; (8010768 <GUI_Measure_Screen+0x48>)
 8010726:	7809      	ldrb	r1, [r1, #0]
 8010728:	7822      	ldrb	r2, [r4, #0]
 801072a:	4291      	cmp	r1, r2
 801072c:	d014      	beq.n	8010758 <GUI_Measure_Screen+0x38>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801072e:	2063      	movs	r0, #99	; 0x63
 8010730:	f00b ff06 	bl	801c540 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 8010734:	4b0d      	ldr	r3, [pc, #52]	; (801076c <GUI_Measure_Screen+0x4c>)
 8010736:	2000      	movs	r0, #0
 8010738:	7018      	strb	r0, [r3, #0]
		oldHighSignal = 0;
 801073a:	4b0d      	ldr	r3, [pc, #52]	; (8010770 <GUI_Measure_Screen+0x50>)
 801073c:	7018      	strb	r0, [r3, #0]
		screen_count = 0;
 801073e:	4b0d      	ldr	r3, [pc, #52]	; (8010774 <GUI_Measure_Screen+0x54>)
 8010740:	7018      	strb	r0, [r3, #0]
		Measure_Elements_Draw(0);
 8010742:	f7fe ff0d 	bl	800f560 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010746:	f7ff f9bb 	bl	800fac0 <GUI_Up_Panel>
		GUI_Down_Panel();
 801074a:	f7ff f9dd 	bl	800fb08 <GUI_Down_Panel>
		Prev_Inf_Screen = Measure_Screen;
 801074e:	4a0a      	ldr	r2, [pc, #40]	; (8010778 <GUI_Measure_Screen+0x58>)
 8010750:	2301      	movs	r3, #1
 8010752:	7013      	strb	r3, [r2, #0]
		preGUI_screen_state = Measure_Screen;
 8010754:	7023      	strb	r3, [r4, #0]
 8010756:	bd10      	pop	{r4, pc}
		GUI_SignalLevel();
 8010758:	f7ff ff80 	bl	801065c <GUI_SignalLevel>
		Measure_Elements_Draw(0);
 801075c:	2000      	movs	r0, #0
 801075e:	f7fe feff 	bl	800f560 <Measure_Elements_Draw>
 8010762:	e7f4      	b.n	801074e <GUI_Measure_Screen+0x2e>
 8010764:	20005701 	.word	0x20005701
 8010768:	2000022a 	.word	0x2000022a
 801076c:	20005727 	.word	0x20005727
 8010770:	20005726 	.word	0x20005726
 8010774:	2000572b 	.word	0x2000572b
 8010778:	20090ab5 	.word	0x20090ab5

0801077c <GUI_Measure2_Screen>:
{
 801077c:	b510      	push	{r4, lr}
 old_meas_type_L = 2;
 801077e:	4b13      	ldr	r3, [pc, #76]	; (80107cc <GUI_Measure2_Screen+0x50>)
 8010780:	4c13      	ldr	r4, [pc, #76]	; (80107d0 <GUI_Measure2_Screen+0x54>)
 8010782:	2202      	movs	r2, #2
 8010784:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != Measure2_Screen){
 8010786:	4b13      	ldr	r3, [pc, #76]	; (80107d4 <GUI_Measure2_Screen+0x58>)
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	4293      	cmp	r3, r2
 801078c:	d017      	beq.n	80107be <GUI_Measure2_Screen+0x42>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 801078e:	2063      	movs	r0, #99	; 0x63
 8010790:	f00b fed6 	bl	801c540 <TFT_FillScreen_DMA>
		current_state_Measure_Draw = state_Measure_Elements;
 8010794:	4b10      	ldr	r3, [pc, #64]	; (80107d8 <GUI_Measure2_Screen+0x5c>)
 8010796:	7818      	ldrb	r0, [r3, #0]
		screen_count = 1;
 8010798:	4b10      	ldr	r3, [pc, #64]	; (80107dc <GUI_Measure2_Screen+0x60>)
		current_state_Measure_Draw = state_Measure_Elements;
 801079a:	7020      	strb	r0, [r4, #0]
		screen_count = 1;
 801079c:	2201      	movs	r2, #1
 801079e:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 80107a0:	4a0f      	ldr	r2, [pc, #60]	; (80107e0 <GUI_Measure2_Screen+0x64>)
 80107a2:	2300      	movs	r3, #0
 80107a4:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 80107a6:	4a0f      	ldr	r2, [pc, #60]	; (80107e4 <GUI_Measure2_Screen+0x68>)
 80107a8:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 80107aa:	f7fe fed9 	bl	800f560 <Measure_Elements_Draw>
		GUI_Up_Panel();
 80107ae:	f7ff f987 	bl	800fac0 <GUI_Up_Panel>
		GUI_Down_Panel();
 80107b2:	f7ff f9a9 	bl	800fb08 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 80107b6:	4b0c      	ldr	r3, [pc, #48]	; (80107e8 <GUI_Measure2_Screen+0x6c>)
 80107b8:	2201      	movs	r2, #1
 80107ba:	701a      	strb	r2, [r3, #0]
 80107bc:	bd10      	pop	{r4, pc}
			GUI_SignalLevel();
 80107be:	f7ff ff4d 	bl	801065c <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 80107c2:	7820      	ldrb	r0, [r4, #0]
 80107c4:	f7fe fecc 	bl	800f560 <Measure_Elements_Draw>
 80107c8:	e7f5      	b.n	80107b6 <GUI_Measure2_Screen+0x3a>
 80107ca:	bf00      	nop
 80107cc:	20000231 	.word	0x20000231
 80107d0:	20005724 	.word	0x20005724
 80107d4:	2000022a 	.word	0x2000022a
 80107d8:	20005730 	.word	0x20005730
 80107dc:	2000572b 	.word	0x2000572b
 80107e0:	20005727 	.word	0x20005727
 80107e4:	20005726 	.word	0x20005726
 80107e8:	20090ab5 	.word	0x20090ab5

080107ec <GUI_Measure3_Screen>:
{
 80107ec:	b538      	push	{r3, r4, r5, lr}
 old_meas_type_L = 2;
 80107ee:	4b12      	ldr	r3, [pc, #72]	; (8010838 <GUI_Measure3_Screen+0x4c>)
 80107f0:	4c12      	ldr	r4, [pc, #72]	; (801083c <GUI_Measure3_Screen+0x50>)
 80107f2:	2502      	movs	r5, #2
 80107f4:	701d      	strb	r5, [r3, #0]
	if(preGUI_screen_state != Measure3_Screen){
 80107f6:	4b12      	ldr	r3, [pc, #72]	; (8010840 <GUI_Measure3_Screen+0x54>)
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	2b03      	cmp	r3, #3
 80107fc:	d016      	beq.n	801082c <GUI_Measure3_Screen+0x40>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80107fe:	2063      	movs	r0, #99	; 0x63
 8010800:	f00b fe9e 	bl	801c540 <TFT_FillScreen_DMA>
		current_state_Measure_Draw= state_Measure_Elements;
 8010804:	4b0f      	ldr	r3, [pc, #60]	; (8010844 <GUI_Measure3_Screen+0x58>)
		oldLowSignal = 0;
 8010806:	4a10      	ldr	r2, [pc, #64]	; (8010848 <GUI_Measure3_Screen+0x5c>)
		current_state_Measure_Draw= state_Measure_Elements;
 8010808:	7818      	ldrb	r0, [r3, #0]
		screen_count = 2;
 801080a:	4b10      	ldr	r3, [pc, #64]	; (801084c <GUI_Measure3_Screen+0x60>)
		current_state_Measure_Draw= state_Measure_Elements;
 801080c:	7020      	strb	r0, [r4, #0]
		screen_count = 2;
 801080e:	701d      	strb	r5, [r3, #0]
		oldLowSignal = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010814:	4a0e      	ldr	r2, [pc, #56]	; (8010850 <GUI_Measure3_Screen+0x64>)
 8010816:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010818:	f7fe fea2 	bl	800f560 <Measure_Elements_Draw>
		GUI_Up_Panel();
 801081c:	f7ff f950 	bl	800fac0 <GUI_Up_Panel>
		GUI_Down_Panel();
 8010820:	f7ff f972 	bl	800fb08 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 8010824:	4b0b      	ldr	r3, [pc, #44]	; (8010854 <GUI_Measure3_Screen+0x68>)
 8010826:	2201      	movs	r2, #1
 8010828:	701a      	strb	r2, [r3, #0]
 801082a:	bd38      	pop	{r3, r4, r5, pc}
			GUI_SignalLevel();
 801082c:	f7ff ff16 	bl	801065c <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 8010830:	7820      	ldrb	r0, [r4, #0]
 8010832:	f7fe fe95 	bl	800f560 <Measure_Elements_Draw>
 8010836:	e7f5      	b.n	8010824 <GUI_Measure3_Screen+0x38>
 8010838:	20000231 	.word	0x20000231
 801083c:	20005724 	.word	0x20005724
 8010840:	2000022a 	.word	0x2000022a
 8010844:	20005730 	.word	0x20005730
 8010848:	20005727 	.word	0x20005727
 801084c:	2000572b 	.word	0x2000572b
 8010850:	20005726 	.word	0x20005726
 8010854:	20090ab5 	.word	0x20090ab5

08010858 <GUI_Color_Screen>:
void GUI_Color_Screen(){
 8010858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801085c:	ed2d 8b04 	vpush	{d8-d9}
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 8010860:	4c8f      	ldr	r4, [pc, #572]	; (8010aa0 <GUI_Color_Screen+0x248>)
 8010862:	4f90      	ldr	r7, [pc, #576]	; (8010aa4 <GUI_Color_Screen+0x24c>)
 8010864:	7823      	ldrb	r3, [r4, #0]
 8010866:	4d90      	ldr	r5, [pc, #576]	; (8010aa8 <GUI_Color_Screen+0x250>)
 8010868:	2b04      	cmp	r3, #4
void GUI_Color_Screen(){
 801086a:	b089      	sub	sp, #36	; 0x24
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 801086c:	d008      	beq.n	8010880 <GUI_Color_Screen+0x28>
 801086e:	7823      	ldrb	r3, [r4, #0]
 8010870:	2b0e      	cmp	r3, #14
 8010872:	d005      	beq.n	8010880 <GUI_Color_Screen+0x28>
 8010874:	7823      	ldrb	r3, [r4, #0]
 8010876:	2b0f      	cmp	r3, #15
 8010878:	d002      	beq.n	8010880 <GUI_Color_Screen+0x28>
 801087a:	7823      	ldrb	r3, [r4, #0]
 801087c:	2b12      	cmp	r3, #18
 801087e:	d125      	bne.n	80108cc <GUI_Color_Screen+0x74>
		GUI_Panels();	
 8010880:	f7ff f986 	bl	800fb90 <GUI_Panels>
		TFT_direction = Rotation_Screen_Color;
 8010884:	4b89      	ldr	r3, [pc, #548]	; (8010aac <GUI_Color_Screen+0x254>)
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	703b      	strb	r3, [r7, #0]
		TFT_DrawBitmap(Color_Field&Color_CIE_xy? 18:
 801088a:	782b      	ldrb	r3, [r5, #0]
 801088c:	f013 0f05 	tst.w	r3, #5
 8010890:	bf0c      	ite	eq
 8010892:	200b      	moveq	r0, #11
 8010894:	2012      	movne	r0, #18
 8010896:	f013 0f04 	tst.w	r3, #4
 801089a:	4b85      	ldr	r3, [pc, #532]	; (8010ab0 <GUI_Color_Screen+0x258>)
 801089c:	bf18      	it	ne
 801089e:	21ac      	movne	r1, #172	; 0xac
 80108a0:	cb0c      	ldmia	r3, {r2, r3}
 80108a2:	bf08      	it	eq
 80108a4:	2196      	moveq	r1, #150	; 0x96
 80108a6:	f00c fa4c 	bl	801cd42 <TFT_DrawBitmap>
		flag = 0;	
 80108aa:	4b82      	ldr	r3, [pc, #520]	; (8010ab4 <GUI_Color_Screen+0x25c>)
 80108ac:	2200      	movs	r2, #0
 80108ae:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 80108b0:	4b81      	ldr	r3, [pc, #516]	; (8010ab8 <GUI_Color_Screen+0x260>)
 80108b2:	701a      	strb	r2, [r3, #0]
		oldHighSignal = 0;
 80108b4:	4b81      	ldr	r3, [pc, #516]	; (8010abc <GUI_Color_Screen+0x264>)
 80108b6:	701a      	strb	r2, [r3, #0]
		if(Color_Field&Color_CIE_xy){GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);}
 80108b8:	782b      	ldrb	r3, [r5, #0]
 80108ba:	f013 0101 	ands.w	r1, r3, #1
 80108be:	f000 80cf 	beq.w	8010a60 <GUI_Color_Screen+0x208>
 80108c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80108c6:	2012      	movs	r0, #18
 80108c8:	f005 fdea 	bl	80164a0 <GUI_Axes_Locus_XY>
	Prev_Inf_Screen = Color_Screen;
 80108cc:	4a7c      	ldr	r2, [pc, #496]	; (8010ac0 <GUI_Color_Screen+0x268>)
	preGUI_screen_state = Color_Screen;
 80108ce:	2305      	movs	r3, #5
 80108d0:	7023      	strb	r3, [r4, #0]
	Prev_Inf_Screen = Color_Screen;
 80108d2:	7013      	strb	r3, [r2, #0]
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 80108d4:	4b7b      	ldr	r3, [pc, #492]	; (8010ac4 <GUI_Color_Screen+0x26c>)
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f040 80d4 	bne.w	8010a86 <GUI_Color_Screen+0x22e>
 80108de:	4b7a      	ldr	r3, [pc, #488]	; (8010ac8 <GUI_Color_Screen+0x270>)
 80108e0:	edd3 8a00 	vldr	s17, [r3]
colorimetry_xy_buff[1] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[1] : colorimetry_xy1931[1];
 80108e4:	ed93 8a01 	vldr	s16, [r3, #4]
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 80108e8:	782b      	ldrb	r3, [r5, #0]
 80108ea:	07d9      	lsls	r1, r3, #31
 80108ec:	f140 8102 	bpl.w	8010af4 <GUI_Color_Screen+0x29c>
 80108f0:	4b76      	ldr	r3, [pc, #472]	; (8010acc <GUI_Color_Screen+0x274>)
 80108f2:	4a77      	ldr	r2, [pc, #476]	; (8010ad0 <GUI_Color_Screen+0x278>)
		 scr_refresh++;
 80108f4:	4e77      	ldr	r6, [pc, #476]	; (8010ad4 <GUI_Color_Screen+0x27c>)
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	7812      	ldrb	r2, [r2, #0]
 80108fa:	eef0 0a48 	vmov.f32	s1, s16
 80108fe:	eeb0 0a68 	vmov.f32	s0, s17
 8010902:	2146      	movs	r1, #70	; 0x46
 8010904:	2014      	movs	r0, #20
 8010906:	f004 fa85 	bl	8014e14 <GUI_Text_xy_Measure>
		 scr_refresh++;
 801090a:	7833      	ldrb	r3, [r6, #0]
 801090c:	3301      	adds	r3, #1
 801090e:	b2db      	uxtb	r3, r3
   if(scr_refresh > 15 ){
 8010910:	2b0f      	cmp	r3, #15
		 scr_refresh++;
 8010912:	7033      	strb	r3, [r6, #0]
   if(scr_refresh > 15 ){
 8010914:	f240 809b 	bls.w	8010a4e <GUI_Color_Screen+0x1f6>
		 if(colorimetry_xy_buff[0] < 0.74 & colorimetry_xy_buff[1] < 0.84 ){
 8010918:	ee18 0a90 	vmov	r0, s17
 801091c:	f7ef fe2c 	bl	8000578 <__aeabi_f2d>
 8010920:	a35b      	add	r3, pc, #364	; (adr r3, 8010a90 <GUI_Color_Screen+0x238>)
 8010922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010926:	f04f 0401 	mov.w	r4, #1
 801092a:	f7f0 f8eb 	bl	8000b04 <__aeabi_dcmplt>
 801092e:	b900      	cbnz	r0, 8010932 <GUI_Color_Screen+0xda>
 8010930:	4604      	mov	r4, r0
 8010932:	f014 0fff 	tst.w	r4, #255	; 0xff
 8010936:	f000 808a 	beq.w	8010a4e <GUI_Color_Screen+0x1f6>
 801093a:	ee18 0a10 	vmov	r0, s16
 801093e:	f7ef fe1b 	bl	8000578 <__aeabi_f2d>
 8010942:	a355      	add	r3, pc, #340	; (adr r3, 8010a98 <GUI_Color_Screen+0x240>)
 8010944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010948:	f04f 0401 	mov.w	r4, #1
 801094c:	f7f0 f8da 	bl	8000b04 <__aeabi_dcmplt>
 8010950:	b900      	cbnz	r0, 8010954 <GUI_Color_Screen+0xfc>
 8010952:	4604      	mov	r4, r0
 8010954:	f014 0fff 	tst.w	r4, #255	; 0xff
 8010958:	d079      	beq.n	8010a4e <GUI_Color_Screen+0x1f6>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 801095a:	4b56      	ldr	r3, [pc, #344]	; (8010ab4 <GUI_Color_Screen+0x25c>)
 801095c:	4c5e      	ldr	r4, [pc, #376]	; (8010ad8 <GUI_Color_Screen+0x280>)
 801095e:	781a      	ldrb	r2, [r3, #0]
 8010960:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 8010adc <GUI_Color_Screen+0x284>
 8010964:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8010ae0 <GUI_Color_Screen+0x288>
 8010968:	4698      	mov	r8, r3
 801096a:	2a00      	cmp	r2, #0
 801096c:	d03f      	beq.n	80109ee <GUI_Color_Screen+0x196>
 801096e:	edd4 6a01 	vldr	s13, [r4, #4]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010972:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8010ae4 <GUI_Color_Screen+0x28c>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010976:	edd4 5a00 	vldr	s11, [r4]
 801097a:	4a4d      	ldr	r2, [pc, #308]	; (8010ab0 <GUI_Color_Screen+0x258>)
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 801097c:	eef1 6a66 	vneg.f32	s13, s13
 8010980:	eea6 7a89 	vfma.f32	s14, s13, s18
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010984:	e892 0003 	ldmia.w	r2, {r0, r1}
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010988:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 801098c:	ee37 7a46 	vsub.f32	s14, s14, s12
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010990:	ab01      	add	r3, sp, #4
 8010992:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010996:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8010ae8 <GUI_Color_Screen+0x290>
 801099a:	edcd 7a04 	vstr	s15, [sp, #16]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 801099e:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 80109a2:	eee5 7aa9 	vfma.f32	s15, s11, s19
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80109a6:	eea6 7a89 	vfma.f32	s14, s13, s18
 80109aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109ae:	ee37 7a46 	vsub.f32	s14, s14, s12
 80109b2:	edcd 7a05 	vstr	s15, [sp, #20]
 80109b6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80109ba:	edcd 7a06 	vstr	s15, [sp, #24]
 80109be:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 80109c2:	eee5 7aa9 	vfma.f32	s15, s11, s19
 80109c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80109ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109ce:	edcd 7a07 	vstr	s15, [sp, #28]
 80109d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80109d6:	230f      	movs	r3, #15
 80109d8:	9300      	str	r3, [sp, #0]
 80109da:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80109de:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80109e2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80109e6:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80109ea:	f00c fa47 	bl	801ce7c <TFT_DrawCutBMP>
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 80109ee:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 80109f2:	eee8 7aa9 	vfma.f32	s15, s17, s19
 80109f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80109fa:	2204      	movs	r2, #4
		colorimetry_xy_old[0] = colorimetry_xy_buff[0];
 80109fc:	edc4 8a00 	vstr	s17, [r4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		colorimetry_xy_old[1] = colorimetry_xy_buff[1];
 8010a04:	ed84 8a01 	vstr	s16, [r4, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010a08:	edcd 7a04 	vstr	s15, [sp, #16]
 8010a0c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8010aec <GUI_Color_Screen+0x294>
 8010a10:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8010a14:	eee8 7a49 	vfms.f32	s15, s16, s18
 8010a18:	4620      	mov	r0, r4
 8010a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a1e:	edcd 7a04 	vstr	s15, [sp, #16]
 8010a22:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8010a26:	4629      	mov	r1, r5
 8010a28:	f00b ffc5 	bl	801c9b6 <TFT_DrawFilledCircle>
		TFT_DrawFilledCircle(18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 2, TFT_Black);
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	2202      	movs	r2, #2
 8010a30:	4629      	mov	r1, r5
 8010a32:	4620      	mov	r0, r4
 8010a34:	f00b ffbf 	bl	801c9b6 <TFT_DrawFilledCircle>
		GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);
 8010a38:	2200      	movs	r2, #0
 8010a3a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010a3e:	2012      	movs	r0, #18
 8010a40:	f005 fd2e 	bl	80164a0 <GUI_Axes_Locus_XY>
		flag = 1;
 8010a44:	2301      	movs	r3, #1
 8010a46:	f888 3000 	strb.w	r3, [r8]
			scr_refresh = 0;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	7033      	strb	r3, [r6, #0]
	TFT_direction = 0x00;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	703b      	strb	r3, [r7, #0]
}         
 8010a52:	b009      	add	sp, #36	; 0x24
 8010a54:	ecbd 8b04 	vpop	{d8-d9}
 8010a58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_SignalLevel();
 8010a5c:	f7ff bdfe 	b.w	801065c <GUI_SignalLevel>
		else if(Color_Field&Color_CIE_Luv){GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);}
 8010a60:	f013 0204 	ands.w	r2, r3, #4
 8010a64:	d006      	beq.n	8010a74 <GUI_Color_Screen+0x21c>
 8010a66:	460a      	mov	r2, r1
 8010a68:	2012      	movs	r0, #18
 8010a6a:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010a6e:	f005 fd7d 	bl	801656c <GUI_Axes_Locus_LUV>
 8010a72:	e72b      	b.n	80108cc <GUI_Color_Screen+0x74>
		else if(Color_Field&Color_CIE_Lab) {GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);}
 8010a74:	0798      	lsls	r0, r3, #30
 8010a76:	f57f af29 	bpl.w	80108cc <GUI_Color_Screen+0x74>
 8010a7a:	f240 1113 	movw	r1, #275	; 0x113
 8010a7e:	2088      	movs	r0, #136	; 0x88
 8010a80:	f005 fdda 	bl	8016638 <GUI_Axes_Locus_Lab>
 8010a84:	e722      	b.n	80108cc <GUI_Color_Screen+0x74>
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 8010a86:	4b1a      	ldr	r3, [pc, #104]	; (8010af0 <GUI_Color_Screen+0x298>)
 8010a88:	e72a      	b.n	80108e0 <GUI_Color_Screen+0x88>
 8010a8a:	bf00      	nop
 8010a8c:	f3af 8000 	nop.w
 8010a90:	7ae147ae 	.word	0x7ae147ae
 8010a94:	3fe7ae14 	.word	0x3fe7ae14
 8010a98:	ae147ae1 	.word	0xae147ae1
 8010a9c:	3feae147 	.word	0x3feae147
 8010aa0:	2000022a 	.word	0x2000022a
 8010aa4:	200056a0 	.word	0x200056a0
 8010aa8:	200056ff 	.word	0x200056ff
 8010aac:	20005708 	.word	0x20005708
 8010ab0:	20091050 	.word	0x20091050
 8010ab4:	20005725 	.word	0x20005725
 8010ab8:	20005727 	.word	0x20005727
 8010abc:	20005726 	.word	0x20005726
 8010ac0:	20090ab5 	.word	0x20090ab5
 8010ac4:	20005704 	.word	0x20005704
 8010ac8:	2008f548 	.word	0x2008f548
 8010acc:	20000ec0 	.word	0x20000ec0
 8010ad0:	20000ec1 	.word	0x20000ec1
 8010ad4:	2000572a 	.word	0x2000572a
 8010ad8:	2000571c 	.word	0x2000571c
 8010adc:	43960000 	.word	0x43960000
 8010ae0:	43938000 	.word	0x43938000
 8010ae4:	43790000 	.word	0x43790000
 8010ae8:	43c78000 	.word	0x43c78000
 8010aec:	43c80000 	.word	0x43c80000
 8010af0:	2008f540 	.word	0x2008f540
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 8010af4:	075a      	lsls	r2, r3, #29
 8010af6:	f140 80fb 	bpl.w	8010cf0 <GUI_Color_Screen+0x498>
 8010afa:	4c71      	ldr	r4, [pc, #452]	; (8010cc0 <GUI_Color_Screen+0x468>)
 8010afc:	4b71      	ldr	r3, [pc, #452]	; (8010cc4 <GUI_Color_Screen+0x46c>)
 8010afe:	4a72      	ldr	r2, [pc, #456]	; (8010cc8 <GUI_Color_Screen+0x470>)
		scr_refresh++;
 8010b00:	4e72      	ldr	r6, [pc, #456]	; (8010ccc <GUI_Color_Screen+0x474>)
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	7812      	ldrb	r2, [r2, #0]
 8010b06:	edd4 0a01 	vldr	s1, [r4, #4]
 8010b0a:	ed94 0a00 	vldr	s0, [r4]
 8010b0e:	2146      	movs	r1, #70	; 0x46
 8010b10:	2014      	movs	r0, #20
 8010b12:	f004 fa41 	bl	8014f98 <GUI_Text_uv_Measure>
		scr_refresh++;
 8010b16:	7833      	ldrb	r3, [r6, #0]
 8010b18:	3301      	adds	r3, #1
 8010b1a:	b2db      	uxtb	r3, r3
		if(scr_refresh > 15 ){
 8010b1c:	2b0f      	cmp	r3, #15
		scr_refresh++;
 8010b1e:	7033      	strb	r3, [r6, #0]
		if(scr_refresh > 15 ){
 8010b20:	d995      	bls.n	8010a4e <GUI_Color_Screen+0x1f6>
		if(colorimetry_uv1976[0] < 0.63 & colorimetry_uv1976[1] < 0.59 & colorimetry_uv1976[0] > 0.0 & colorimetry_uv1976[1] > 0.0){
 8010b22:	edd4 7a00 	vldr	s15, [r4]
 8010b26:	ed94 8a01 	vldr	s16, [r4, #4]
 8010b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b32:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010b36:	bfcc      	ite	gt
 8010b38:	2501      	movgt	r5, #1
 8010b3a:	2500      	movle	r5, #0
 8010b3c:	ee17 0a90 	vmov	r0, s15
 8010b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b44:	f005 0501 	and.w	r5, r5, #1
 8010b48:	bfd8      	it	le
 8010b4a:	2500      	movle	r5, #0
 8010b4c:	f7ef fd14 	bl	8000578 <__aeabi_f2d>
 8010b50:	a357      	add	r3, pc, #348	; (adr r3, 8010cb0 <GUI_Color_Screen+0x458>)
 8010b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b56:	f04f 0801 	mov.w	r8, #1
 8010b5a:	f7ef ffd3 	bl	8000b04 <__aeabi_dcmplt>
 8010b5e:	b900      	cbnz	r0, 8010b62 <GUI_Color_Screen+0x30a>
 8010b60:	4680      	mov	r8, r0
 8010b62:	ea15 0f08 	tst.w	r5, r8
 8010b66:	f43f af72 	beq.w	8010a4e <GUI_Color_Screen+0x1f6>
 8010b6a:	ee18 0a10 	vmov	r0, s16
 8010b6e:	f7ef fd03 	bl	8000578 <__aeabi_f2d>
 8010b72:	a351      	add	r3, pc, #324	; (adr r3, 8010cb8 <GUI_Color_Screen+0x460>)
 8010b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b78:	f04f 0501 	mov.w	r5, #1
 8010b7c:	f7ef ffc2 	bl	8000b04 <__aeabi_dcmplt>
 8010b80:	b900      	cbnz	r0, 8010b84 <GUI_Color_Screen+0x32c>
 8010b82:	4605      	mov	r5, r0
 8010b84:	f015 0fff 	tst.w	r5, #255	; 0xff
 8010b88:	f43f af61 	beq.w	8010a4e <GUI_Color_Screen+0x1f6>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010b8c:	4d50      	ldr	r5, [pc, #320]	; (8010cd0 <GUI_Color_Screen+0x478>)
 8010b8e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8010cec <GUI_Color_Screen+0x494>
 8010b92:	782a      	ldrb	r2, [r5, #0]
 8010b94:	eddf 9a4f 	vldr	s19, [pc, #316]	; 8010cd4 <GUI_Color_Screen+0x47c>
 8010b98:	eddf 8a4f 	vldr	s17, [pc, #316]	; 8010cd8 <GUI_Color_Screen+0x480>
 8010b9c:	2a00      	cmp	r2, #0
 8010b9e:	d03f      	beq.n	8010c20 <GUI_Color_Screen+0x3c8>
 8010ba0:	edd8 6a01 	vldr	s13, [r8, #4]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010ba4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8010cdc <GUI_Color_Screen+0x484>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010ba8:	edd8 5a00 	vldr	s11, [r8]
 8010bac:	4a4c      	ldr	r2, [pc, #304]	; (8010ce0 <GUI_Color_Screen+0x488>)
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010bae:	eef1 6a66 	vneg.f32	s13, s13
 8010bb2:	eea6 7aa9 	vfma.f32	s14, s13, s19
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010bba:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010bbe:	ee37 7a46 	vsub.f32	s14, s14, s12
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010bc2:	ab01      	add	r3, sp, #4
 8010bc4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010bc8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8010ce4 <GUI_Color_Screen+0x48c>
 8010bcc:	edcd 7a04 	vstr	s15, [sp, #16]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010bd0:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 8010bd4:	eee5 7aa8 	vfma.f32	s15, s11, s17
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010bd8:	eea6 7aa9 	vfma.f32	s14, s13, s19
 8010bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010be0:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010be4:	edcd 7a05 	vstr	s15, [sp, #20]
 8010be8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010bec:	edcd 7a06 	vstr	s15, [sp, #24]
 8010bf0:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 8010bf4:	eee5 7aa8 	vfma.f32	s15, s11, s17
 8010bf8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c00:	edcd 7a07 	vstr	s15, [sp, #28]
 8010c04:	e883 0003 	stmia.w	r3, {r0, r1}
 8010c08:	230c      	movs	r3, #12
 8010c0a:	9300      	str	r3, [sp, #0]
 8010c0c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010c10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010c14:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010c18:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010c1c:	f00c f92e 	bl	801ce7c <TFT_DrawCutBMP>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010c20:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8010ce8 <GUI_Color_Screen+0x490>
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 8010c24:	ed94 7a01 	vldr	s14, [r4, #4]
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010c28:	edd4 7a00 	vldr	s15, [r4]
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 8010c2c:	ed88 7a01 	vstr	s14, [r8, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010c30:	eef0 6a49 	vmov.f32	s13, s18
 8010c34:	eee7 6a69 	vfms.f32	s13, s14, s19
 8010c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c3c:	2204      	movs	r2, #4
 8010c3e:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 8010c42:	eebd 7ae6 	vcvt.s32.f32	s14, s13
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010c46:	edc8 7a00 	vstr	s15, [r8]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010c4a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010c4e:	eeb0 7a48 	vmov.f32	s14, s16
 8010c52:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8010c56:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8010c5a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8010c5e:	edcd 7a05 	vstr	s15, [sp, #20]
 8010c62:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8010c66:	f00b fea6 	bl	801c9b6 <TFT_DrawFilledCircle>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 8010c6a:	edd4 7a01 	vldr	s15, [r4, #4]
 8010c6e:	eea7 9ae9 	vfms.f32	s18, s15, s19
 8010c72:	2300      	movs	r3, #0
 8010c74:	2202      	movs	r2, #2
 8010c76:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8010c7a:	edcd 7a04 	vstr	s15, [sp, #16]
 8010c7e:	edd4 7a00 	vldr	s15, [r4]
 8010c82:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8010c86:	eea7 8aa8 	vfma.f32	s16, s15, s17
 8010c8a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010c8e:	edcd 7a05 	vstr	s15, [sp, #20]
 8010c92:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8010c96:	f00b fe8e 	bl	801c9b6 <TFT_DrawFilledCircle>
			GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010ca0:	2012      	movs	r0, #18
 8010ca2:	f005 fc63 	bl	801656c <GUI_Axes_Locus_LUV>
			flag = 1;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	702b      	strb	r3, [r5, #0]
 8010caa:	e6ce      	b.n	8010a4a <GUI_Color_Screen+0x1f2>
 8010cac:	f3af 8000 	nop.w
 8010cb0:	c28f5c29 	.word	0xc28f5c29
 8010cb4:	3fe428f5 	.word	0x3fe428f5
 8010cb8:	ae147ae1 	.word	0xae147ae1
 8010cbc:	3fe2e147 	.word	0x3fe2e147
 8010cc0:	2008f538 	.word	0x2008f538
 8010cc4:	20000ec0 	.word	0x20000ec0
 8010cc8:	20000ec1 	.word	0x20000ec1
 8010ccc:	2000572a 	.word	0x2000572a
 8010cd0:	20005725 	.word	0x20005725
 8010cd4:	43c60000 	.word	0x43c60000
 8010cd8:	43c98000 	.word	0x43c98000
 8010cdc:	43690000 	.word	0x43690000
 8010ce0:	20091050 	.word	0x20091050
 8010ce4:	43ca8000 	.word	0x43ca8000
 8010ce8:	43cb0000 	.word	0x43cb0000
 8010cec:	20005714 	.word	0x20005714
	if(Color_Field&Color_CIE_Lab) {GUI_Text_LAB_Measure(20, 54, colorimetry_LAB[0], colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 8010cf0:	079b      	lsls	r3, r3, #30
 8010cf2:	f57f aeac 	bpl.w	8010a4e <GUI_Color_Screen+0x1f6>
 8010cf6:	4984      	ldr	r1, [pc, #528]	; (8010f08 <GUI_Color_Screen+0x6b0>)
 8010cf8:	4c84      	ldr	r4, [pc, #528]	; (8010f0c <GUI_Color_Screen+0x6b4>)
 8010cfa:	7809      	ldrb	r1, [r1, #0]
 8010cfc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010d00:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010d04:	9102      	str	r1, [sp, #8]
 8010d06:	4982      	ldr	r1, [pc, #520]	; (8010f10 <GUI_Color_Screen+0x6b8>)
 8010d08:	7809      	ldrb	r1, [r1, #0]
 8010d0a:	9101      	str	r1, [sp, #4]
 8010d0c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010d10:	9100      	str	r1, [sp, #0]
 8010d12:	2014      	movs	r0, #20
 8010d14:	2136      	movs	r1, #54	; 0x36
 8010d16:	f005 f8f7 	bl	8015f08 <GUI_Text_LAB_Measure>
		if(colorimetry_LAB[1] < 128 & colorimetry_LAB[1] > -128 & colorimetry_LAB[2]<128 & colorimetry_LAB[2] > -128){
 8010d1a:	8863      	ldrh	r3, [r4, #2]
 8010d1c:	337f      	adds	r3, #127	; 0x7f
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	2bfe      	cmp	r3, #254	; 0xfe
 8010d22:	f63f ae94 	bhi.w	8010a4e <GUI_Color_Screen+0x1f6>
 8010d26:	88a3      	ldrh	r3, [r4, #4]
 8010d28:	337f      	adds	r3, #127	; 0x7f
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	2bfe      	cmp	r3, #254	; 0xfe
 8010d2e:	f63f ae8e 	bhi.w	8010a4e <GUI_Color_Screen+0x1f6>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010d32:	4d78      	ldr	r5, [pc, #480]	; (8010f14 <GUI_Color_Screen+0x6bc>)
 8010d34:	4e78      	ldr	r6, [pc, #480]	; (8010f18 <GUI_Color_Screen+0x6c0>)
 8010d36:	782b      	ldrb	r3, [r5, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d05d      	beq.n	8010df8 <GUI_Color_Screen+0x5a0>
 8010d3c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8010d40:	f7ef fc08 	bl	8000554 <__aeabi_i2d>
 8010d44:	a368      	add	r3, pc, #416	; (adr r3, 8010ee8 <GUI_Color_Screen+0x690>)
 8010d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4a:	f7ef fc69 	bl	8000620 <__aeabi_dmul>
 8010d4e:	4682      	mov	sl, r0
 8010d50:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8010d54:	468b      	mov	fp, r1
 8010d56:	f7ef fbfd 	bl	8000554 <__aeabi_i2d>
 8010d5a:	a363      	add	r3, pc, #396	; (adr r3, 8010ee8 <GUI_Color_Screen+0x690>)
 8010d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d60:	f7ef fc5e 	bl	8000620 <__aeabi_dmul>
 8010d64:	4680      	mov	r8, r0
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010d66:	4602      	mov	r2, r0
 8010d68:	460b      	mov	r3, r1
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010d6a:	4689      	mov	r9, r1
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	496b      	ldr	r1, [pc, #428]	; (8010f1c <GUI_Color_Screen+0x6c4>)
 8010d70:	f7ef faa2 	bl	80002b8 <__aeabi_dsub>
 8010d74:	2200      	movs	r2, #0
 8010d76:	4b6a      	ldr	r3, [pc, #424]	; (8010f20 <GUI_Color_Screen+0x6c8>)
 8010d78:	f7ef fa9e 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010d7c:	f7ef ff28 	bl	8000bd0 <__aeabi_d2uiz>
 8010d80:	b283      	uxth	r3, r0
 8010d82:	9304      	str	r3, [sp, #16]
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010d84:	2200      	movs	r2, #0
 8010d86:	4b67      	ldr	r3, [pc, #412]	; (8010f24 <GUI_Color_Screen+0x6cc>)
 8010d88:	4650      	mov	r0, sl
 8010d8a:	4659      	mov	r1, fp
 8010d8c:	f7ef fa96 	bl	80002bc <__adddf3>
 8010d90:	2200      	movs	r2, #0
 8010d92:	4b63      	ldr	r3, [pc, #396]	; (8010f20 <GUI_Color_Screen+0x6c8>)
 8010d94:	f7ef fa90 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010d98:	f7ef ff1a 	bl	8000bd0 <__aeabi_d2uiz>
 8010d9c:	b283      	uxth	r3, r0
 8010d9e:	4642      	mov	r2, r8
 8010da0:	9305      	str	r3, [sp, #20]
 8010da2:	a153      	add	r1, pc, #332	; (adr r1, 8010ef0 <GUI_Color_Screen+0x698>)
 8010da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010da8:	464b      	mov	r3, r9
 8010daa:	f7ef fa85 	bl	80002b8 <__aeabi_dsub>
 8010dae:	2200      	movs	r2, #0
 8010db0:	4b5b      	ldr	r3, [pc, #364]	; (8010f20 <GUI_Color_Screen+0x6c8>)
 8010db2:	f7ef fa81 	bl	80002b8 <__aeabi_dsub>
 8010db6:	f7ef ff0b 	bl	8000bd0 <__aeabi_d2uiz>
 8010dba:	a34f      	add	r3, pc, #316	; (adr r3, 8010ef8 <GUI_Color_Screen+0x6a0>)
 8010dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc0:	fa1f f880 	uxth.w	r8, r0
 8010dc4:	4659      	mov	r1, fp
 8010dc6:	4650      	mov	r0, sl
 8010dc8:	f7ef fa78 	bl	80002bc <__adddf3>
 8010dcc:	2200      	movs	r2, #0
 8010dce:	4b54      	ldr	r3, [pc, #336]	; (8010f20 <GUI_Color_Screen+0x6c8>)
 8010dd0:	f7ef fa72 	bl	80002b8 <__aeabi_dsub>
 8010dd4:	f7ef fefc 	bl	8000bd0 <__aeabi_d2uiz>
 8010dd8:	4a53      	ldr	r2, [pc, #332]	; (8010f28 <GUI_Color_Screen+0x6d0>)
 8010dda:	fa1f fe80 	uxth.w	lr, r0
 8010dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010de2:	ab01      	add	r3, sp, #4
 8010de4:	e883 0003 	stmia.w	r3, {r0, r1}
 8010de8:	230c      	movs	r3, #12
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	9a05      	ldr	r2, [sp, #20]
 8010dee:	9b04      	ldr	r3, [sp, #16]
 8010df0:	4641      	mov	r1, r8
 8010df2:	4670      	mov	r0, lr
 8010df4:	f00c f842 	bl	801ce7c <TFT_DrawCutBMP>
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010df8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010dfc:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010e00:	80b0      	strh	r0, [r6, #4]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010e02:	ee07 0a90 	vmov	s15, r0
 8010e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010e0a:	f8a6 8002 	strh.w	r8, [r6, #2]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010e0e:	ee17 0a90 	vmov	r0, s15
 8010e12:	f7ef fbb1 	bl	8000578 <__aeabi_f2d>
 8010e16:	a334      	add	r3, pc, #208	; (adr r3, 8010ee8 <GUI_Color_Screen+0x690>)
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	f7ef fc00 	bl	8000620 <__aeabi_dmul>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	a136      	add	r1, pc, #216	; (adr r1, 8010f00 <GUI_Color_Screen+0x6a8>)
 8010e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e2a:	f7ef fa45 	bl	80002b8 <__aeabi_dsub>
 8010e2e:	f7ef fea7 	bl	8000b80 <__aeabi_d2iz>
 8010e32:	ee07 8a90 	vmov	s15, r8
 8010e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e3a:	b206      	sxth	r6, r0
 8010e3c:	ee17 0a90 	vmov	r0, s15
 8010e40:	f7ef fb9a 	bl	8000578 <__aeabi_f2d>
 8010e44:	a328      	add	r3, pc, #160	; (adr r3, 8010ee8 <GUI_Color_Screen+0x690>)
 8010e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4a:	f7ef fbe9 	bl	8000620 <__aeabi_dmul>
 8010e4e:	2200      	movs	r2, #0
 8010e50:	4b36      	ldr	r3, [pc, #216]	; (8010f2c <GUI_Color_Screen+0x6d4>)
 8010e52:	f7ef fa33 	bl	80002bc <__adddf3>
 8010e56:	f7ef fe93 	bl	8000b80 <__aeabi_d2iz>
 8010e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e5e:	2204      	movs	r2, #4
 8010e60:	4631      	mov	r1, r6
 8010e62:	b200      	sxth	r0, r0
 8010e64:	f00b fda7 	bl	801c9b6 <TFT_DrawFilledCircle>
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 8010e68:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010e6c:	ee07 0a90 	vmov	s15, r0
 8010e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e74:	ee17 0a90 	vmov	r0, s15
 8010e78:	f7ef fb7e 	bl	8000578 <__aeabi_f2d>
 8010e7c:	a31a      	add	r3, pc, #104	; (adr r3, 8010ee8 <GUI_Color_Screen+0x690>)
 8010e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e82:	f7ef fbcd 	bl	8000620 <__aeabi_dmul>
 8010e86:	4602      	mov	r2, r0
 8010e88:	460b      	mov	r3, r1
 8010e8a:	a11d      	add	r1, pc, #116	; (adr r1, 8010f00 <GUI_Color_Screen+0x6a8>)
 8010e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e90:	f7ef fa12 	bl	80002b8 <__aeabi_dsub>
 8010e94:	f7ef fe74 	bl	8000b80 <__aeabi_d2iz>
 8010e98:	b206      	sxth	r6, r0
 8010e9a:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8010e9e:	ee07 0a90 	vmov	s15, r0
 8010ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ea6:	ee17 0a90 	vmov	r0, s15
 8010eaa:	f7ef fb65 	bl	8000578 <__aeabi_f2d>
 8010eae:	a30e      	add	r3, pc, #56	; (adr r3, 8010ee8 <GUI_Color_Screen+0x690>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	f7ef fbb4 	bl	8000620 <__aeabi_dmul>
 8010eb8:	2200      	movs	r2, #0
 8010eba:	4b1c      	ldr	r3, [pc, #112]	; (8010f2c <GUI_Color_Screen+0x6d4>)
 8010ebc:	f7ef f9fe 	bl	80002bc <__adddf3>
 8010ec0:	f7ef fe5e 	bl	8000b80 <__aeabi_d2iz>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	2202      	movs	r2, #2
 8010ec8:	4631      	mov	r1, r6
 8010eca:	b200      	sxth	r0, r0
 8010ecc:	f00b fd73 	bl	801c9b6 <TFT_DrawFilledCircle>
				GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	f240 1113 	movw	r1, #275	; 0x113
 8010ed6:	2088      	movs	r0, #136	; 0x88
 8010ed8:	f005 fbae 	bl	8016638 <GUI_Axes_Locus_Lab>
				flag = 1;
 8010edc:	2301      	movs	r3, #1
 8010ede:	702b      	strb	r3, [r5, #0]
				scr_refresh = 0;
 8010ee0:	4b13      	ldr	r3, [pc, #76]	; (8010f30 <GUI_Color_Screen+0x6d8>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	701a      	strb	r2, [r3, #0]
 8010ee6:	e5b2      	b.n	8010a4e <GUI_Color_Screen+0x1f6>
 8010ee8:	5a1cac08 	.word	0x5a1cac08
 8010eec:	3fef3b64 	.word	0x3fef3b64
 8010ef0:	00000000 	.word	0x00000000
 8010ef4:	40712000 	.word	0x40712000
 8010ef8:	00000000 	.word	0x00000000
 8010efc:	4060e000 	.word	0x4060e000
 8010f00:	00000000 	.word	0x00000000
 8010f04:	40713000 	.word	0x40713000
 8010f08:	20000ec0 	.word	0x20000ec0
 8010f0c:	2008f51c 	.word	0x2008f51c
 8010f10:	20000ec1 	.word	0x20000ec1
 8010f14:	20005725 	.word	0x20005725
 8010f18:	2000570c 	.word	0x2000570c
 8010f1c:	405f0000 	.word	0x405f0000
 8010f20:	40140000 	.word	0x40140000
 8010f24:	405f4000 	.word	0x405f4000
 8010f28:	20091050 	.word	0x20091050
 8010f2c:	40610000 	.word	0x40610000
 8010f30:	2000572a 	.word	0x2000572a

08010f34 <GUI_ColorRend_Screen>:
void GUI_ColorRend_Screen(){
 8010f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 8010f36:	4b39      	ldr	r3, [pc, #228]	; (801101c <GUI_ColorRend_Screen+0xe8>)
 8010f38:	4d39      	ldr	r5, [pc, #228]	; (8011020 <GUI_ColorRend_Screen+0xec>)
 8010f3a:	4c3a      	ldr	r4, [pc, #232]	; (8011024 <GUI_ColorRend_Screen+0xf0>)
 8010f3c:	2202      	movs	r2, #2
 8010f3e:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Rotation_Screen_Rend_Old != Rotation_Screen_Rend){
 8010f40:	4b39      	ldr	r3, [pc, #228]	; (8011028 <GUI_ColorRend_Screen+0xf4>)
 8010f42:	4a3a      	ldr	r2, [pc, #232]	; (801102c <GUI_ColorRend_Screen+0xf8>)
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	7812      	ldrb	r2, [r2, #0]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d103      	bne.n	8010f54 <GUI_ColorRend_Screen+0x20>
 8010f4c:	782a      	ldrb	r2, [r5, #0]
 8010f4e:	7823      	ldrb	r3, [r4, #0]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d02b      	beq.n	8010fac <GUI_ColorRend_Screen+0x78>
	GUI_Panels();		
 8010f54:	f7fe fe1c 	bl	800fb90 <GUI_Panels>
	oldLowSignal = 0;
 8010f58:	4a35      	ldr	r2, [pc, #212]	; (8011030 <GUI_ColorRend_Screen+0xfc>)
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	7013      	strb	r3, [r2, #0]
	oldHighSignal = 0;
 8010f5e:	4a35      	ldr	r2, [pc, #212]	; (8011034 <GUI_ColorRend_Screen+0x100>)
 8010f60:	7013      	strb	r3, [r2, #0]
	Rotation_Screen_Rend_Old = Rotation_Screen_Rend;
 8010f62:	7823      	ldrb	r3, [r4, #0]
 8010f64:	702b      	strb	r3, [r5, #0]
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010f66:	4d34      	ldr	r5, [pc, #208]	; (8011038 <GUI_ColorRend_Screen+0x104>)
 8010f68:	782a      	ldrb	r2, [r5, #0]
 8010f6a:	2a00      	cmp	r2, #0
 8010f6c:	d03c      	beq.n	8010fe8 <GUI_ColorRend_Screen+0xb4>
 8010f6e:	4b33      	ldr	r3, [pc, #204]	; (801103c <GUI_ColorRend_Screen+0x108>)
 8010f70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f74:	f7ef fe4c 	bl	8000c10 <__aeabi_d2f>
 8010f78:	210d      	movs	r1, #13
 8010f7a:	ee00 0a10 	vmov	s0, r0
 8010f7e:	2055      	movs	r0, #85	; 0x55
 8010f80:	f002 fb48 	bl	8013614 <GUI_Bar_Measure>
	Prev_Inf_Screen = Color_Rendition_Screen;
 8010f84:	4b2e      	ldr	r3, [pc, #184]	; (8011040 <GUI_ColorRend_Screen+0x10c>)
 8010f86:	2206      	movs	r2, #6
 8010f88:	701a      	strb	r2, [r3, #0]
	if (Color_rend_Field&CRI_CQS){
 8010f8a:	782b      	ldrb	r3, [r5, #0]
 8010f8c:	07da      	lsls	r2, r3, #31
 8010f8e:	d52d      	bpl.n	8010fec <GUI_ColorRend_Screen+0xb8>
		CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8010f90:	492c      	ldr	r1, [pc, #176]	; (8011044 <GUI_ColorRend_Screen+0x110>)
 8010f92:	4b2d      	ldr	r3, [pc, #180]	; (8011048 <GUI_ColorRend_Screen+0x114>)
 8010f94:	4a2d      	ldr	r2, [pc, #180]	; (801104c <GUI_ColorRend_Screen+0x118>)
 8010f96:	f991 1000 	ldrsb.w	r1, [r1]
 8010f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8010f9e:	f992 2000 	ldrsb.w	r2, [r2]
 8010fa2:	7820      	ldrb	r0, [r4, #0]
 8010fa4:	9100      	str	r1, [sp, #0]
 8010fa6:	492a      	ldr	r1, [pc, #168]	; (8011050 <GUI_ColorRend_Screen+0x11c>)
 8010fa8:	f7fd f9ba 	bl	800e320 <CRI_Draw>
	if(Calc_ColorRend != Calc_ColorRend_old){
 8010fac:	4b29      	ldr	r3, [pc, #164]	; (8011054 <GUI_ColorRend_Screen+0x120>)
 8010fae:	781a      	ldrb	r2, [r3, #0]
 8010fb0:	4b29      	ldr	r3, [pc, #164]	; (8011058 <GUI_ColorRend_Screen+0x124>)
 8010fb2:	7819      	ldrb	r1, [r3, #0]
 8010fb4:	4291      	cmp	r1, r2
 8010fb6:	d012      	beq.n	8010fde <GUI_ColorRend_Screen+0xaa>
		Calc_ColorRend_old = Calc_ColorRend;
 8010fb8:	701a      	strb	r2, [r3, #0]
		if (Color_rend_Field&CRI_CQS){
 8010fba:	4b1f      	ldr	r3, [pc, #124]	; (8011038 <GUI_ColorRend_Screen+0x104>)
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	07db      	lsls	r3, r3, #31
 8010fc0:	d520      	bpl.n	8011004 <GUI_ColorRend_Screen+0xd0>
			CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8010fc2:	4920      	ldr	r1, [pc, #128]	; (8011044 <GUI_ColorRend_Screen+0x110>)
 8010fc4:	4b20      	ldr	r3, [pc, #128]	; (8011048 <GUI_ColorRend_Screen+0x114>)
 8010fc6:	4a21      	ldr	r2, [pc, #132]	; (801104c <GUI_ColorRend_Screen+0x118>)
 8010fc8:	f991 1000 	ldrsb.w	r1, [r1]
 8010fcc:	f993 3000 	ldrsb.w	r3, [r3]
 8010fd0:	f992 2000 	ldrsb.w	r2, [r2]
 8010fd4:	7820      	ldrb	r0, [r4, #0]
 8010fd6:	9100      	str	r1, [sp, #0]
 8010fd8:	491d      	ldr	r1, [pc, #116]	; (8011050 <GUI_ColorRend_Screen+0x11c>)
 8010fda:	f7fd f9a1 	bl	800e320 <CRI_Draw>
}
 8010fde:	b003      	add	sp, #12
 8010fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GUI_SignalLevel();
 8010fe4:	f7ff bb3a 	b.w	801065c <GUI_SignalLevel>
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010fe8:	4b1c      	ldr	r3, [pc, #112]	; (801105c <GUI_ColorRend_Screen+0x128>)
 8010fea:	e7c1      	b.n	8010f70 <GUI_ColorRend_Screen+0x3c>
		CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010fec:	491c      	ldr	r1, [pc, #112]	; (8011060 <GUI_ColorRend_Screen+0x12c>)
 8010fee:	4b1d      	ldr	r3, [pc, #116]	; (8011064 <GUI_ColorRend_Screen+0x130>)
 8010ff0:	4a1d      	ldr	r2, [pc, #116]	; (8011068 <GUI_ColorRend_Screen+0x134>)
 8010ff2:	7809      	ldrb	r1, [r1, #0]
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	7812      	ldrb	r2, [r2, #0]
 8010ff8:	7820      	ldrb	r0, [r4, #0]
 8010ffa:	9100      	str	r1, [sp, #0]
 8010ffc:	491b      	ldr	r1, [pc, #108]	; (801106c <GUI_ColorRend_Screen+0x138>)
 8010ffe:	f7fb f965 	bl	800c2cc <CQS_Draw>
 8011002:	e7d3      	b.n	8010fac <GUI_ColorRend_Screen+0x78>
			CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8011004:	4916      	ldr	r1, [pc, #88]	; (8011060 <GUI_ColorRend_Screen+0x12c>)
 8011006:	4b17      	ldr	r3, [pc, #92]	; (8011064 <GUI_ColorRend_Screen+0x130>)
 8011008:	4a17      	ldr	r2, [pc, #92]	; (8011068 <GUI_ColorRend_Screen+0x134>)
 801100a:	7809      	ldrb	r1, [r1, #0]
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	7812      	ldrb	r2, [r2, #0]
 8011010:	7820      	ldrb	r0, [r4, #0]
 8011012:	9100      	str	r1, [sp, #0]
 8011014:	4915      	ldr	r1, [pc, #84]	; (801106c <GUI_ColorRend_Screen+0x138>)
 8011016:	f7fb f959 	bl	800c2cc <CQS_Draw>
 801101a:	e7e0      	b.n	8010fde <GUI_ColorRend_Screen+0xaa>
 801101c:	20000231 	.word	0x20000231
 8011020:	20090ab8 	.word	0x20090ab8
 8011024:	20005709 	.word	0x20005709
 8011028:	2000022a 	.word	0x2000022a
 801102c:	20005701 	.word	0x20005701
 8011030:	20005727 	.word	0x20005727
 8011034:	20005726 	.word	0x20005726
 8011038:	20005700 	.word	0x20005700
 801103c:	200909c0 	.word	0x200909c0
 8011040:	20090ab5 	.word	0x20090ab5
 8011044:	20004658 	.word	0x20004658
 8011048:	2000465a 	.word	0x2000465a
 801104c:	20004659 	.word	0x20004659
 8011050:	2000465b 	.word	0x2000465b
 8011054:	200056fd 	.word	0x200056fd
 8011058:	200056fe 	.word	0x200056fe
 801105c:	200906f0 	.word	0x200906f0
 8011060:	20003634 	.word	0x20003634
 8011064:	20003635 	.word	0x20003635
 8011068:	20003633 	.word	0x20003633
 801106c:	20003624 	.word	0x20003624

08011070 <GUI_Display_Refresh>:

void GUI_Display_Refresh()
{
 8011070:	b508      	push	{r3, lr}
	
	switch(GUI_screen_state){
 8011072:	4b2d      	ldr	r3, [pc, #180]	; (8011128 <GUI_Display_Refresh+0xb8>)
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	3b01      	subs	r3, #1
 8011078:	2b11      	cmp	r3, #17
 801107a:	d80f      	bhi.n	801109c <GUI_Display_Refresh+0x2c>
 801107c:	e8df f003 	tbb	[pc, r3]
 8011080:	17130f09 	.word	0x17130f09
 8011084:	27231f1b 	.word	0x27231f1b
 8011088:	37332f2b 	.word	0x37332f2b
 801108c:	47433f3b 	.word	0x47433f3b
 8011090:	4f4b      	.short	0x4f4b
		case Measure_Screen: GUI_Measure_Screen(); preGUI_screen_state = Measure_Screen; break;
 8011092:	f7ff fb45 	bl	8010720 <GUI_Measure_Screen>
 8011096:	2201      	movs	r2, #1
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
					
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8011098:	4b24      	ldr	r3, [pc, #144]	; (801112c <GUI_Display_Refresh+0xbc>)
 801109a:	701a      	strb	r2, [r3, #0]
 801109c:	bd08      	pop	{r3, pc}
		case Measure2_Screen: GUI_Measure2_Screen(); preGUI_screen_state = Measure2_Screen; break;
 801109e:	f7ff fb6d 	bl	801077c <GUI_Measure2_Screen>
 80110a2:	2202      	movs	r2, #2
 80110a4:	e7f8      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case Measure3_Screen: GUI_Measure3_Screen(); preGUI_screen_state = Measure3_Screen; break;
 80110a6:	f7ff fba1 	bl	80107ec <GUI_Measure3_Screen>
 80110aa:	2203      	movs	r2, #3
 80110ac:	e7f4      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case Graph_Screen: GUI_Graph_Screen(); preGUI_screen_state = Graph_Screen; break;
 80110ae:	f7ff f99b 	bl	80103e8 <GUI_Graph_Screen>
 80110b2:	2204      	movs	r2, #4
 80110b4:	e7f0      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case Color_Screen: GUI_Color_Screen(); preGUI_screen_state = Color_Screen; break; 
 80110b6:	f7ff fbcf 	bl	8010858 <GUI_Color_Screen>
 80110ba:	2205      	movs	r2, #5
 80110bc:	e7ec      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case Color_Rendition_Screen: GUI_ColorRend_Screen(); preGUI_screen_state = Color_Rendition_Screen; break;		
 80110be:	f7ff ff39 	bl	8010f34 <GUI_ColorRend_Screen>
 80110c2:	2206      	movs	r2, #6
 80110c4:	e7e8      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case DataSet1_Screen: GUI_DataSet1_Screen();  preGUI_screen_state = DataSet1_Screen; break;
 80110c6:	f7fe fda1 	bl	800fc0c <GUI_DataSet1_Screen>
 80110ca:	2207      	movs	r2, #7
 80110cc:	e7e4      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case DataSet2_Screen: GUI_DataSet2_Screen();  preGUI_screen_state = DataSet2_Screen; break;
 80110ce:	f7fe fe01 	bl	800fcd4 <GUI_DataSet2_Screen>
 80110d2:	2208      	movs	r2, #8
 80110d4:	e7e0      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case DataSet3_Screen: GUI_DataSet3_Screen();  preGUI_screen_state = DataSet3_Screen; break;
 80110d6:	f7fe fed5 	bl	800fe84 <GUI_DataSet3_Screen>
 80110da:	2209      	movs	r2, #9
 80110dc:	e7dc      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case DataSet4_Screen: GUI_DataSet4_Screen();  preGUI_screen_state = DataSet4_Screen; break;
 80110de:	f7fe ff45 	bl	800ff6c <GUI_DataSet4_Screen>
 80110e2:	220a      	movs	r2, #10
 80110e4:	e7d8      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case DataSet5_Screen: GUI_DataSet5_Screen();  preGUI_screen_state = DataSet5_Screen; break;
 80110e6:	f7fe ffe3 	bl	80100b0 <GUI_DataSet5_Screen>
 80110ea:	220b      	movs	r2, #11
 80110ec:	e7d4      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case GraphSet1_Screen: GUI_GraphSet1_Screen(); preGUI_screen_state = GraphSet1_Screen; break;
 80110ee:	f7ff f819 	bl	8010124 <GUI_GraphSet1_Screen>
 80110f2:	220c      	movs	r2, #12
 80110f4:	e7d0      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case GraphSet2_Screen: GUI_GraphSet2_Screen(); preGUI_screen_state = GraphSet2_Screen; break;
 80110f6:	f7ff f85d 	bl	80101b4 <GUI_GraphSet2_Screen>
 80110fa:	220d      	movs	r2, #13
 80110fc:	e7cc      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
 80110fe:	f7ff f893 	bl	8010228 <GUI_ColorSet1_Screen>
 8011102:	220e      	movs	r2, #14
 8011104:	e7c8      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
 8011106:	f7ff f8d3 	bl	80102b0 <GUI_ColorSet2_Screen>
 801110a:	220f      	movs	r2, #15
 801110c:	e7c4      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
 801110e:	f7ff f90b 	bl	8010328 <GUI_ColorRendSet_Screen>
 8011112:	2210      	movs	r2, #16
 8011114:	e7c0      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
 8011116:	f7fe fc19 	bl	800f94c <GUI_Information_Screen>
 801111a:	2211      	movs	r2, #17
 801111c:	e7bc      	b.n	8011098 <GUI_Display_Refresh+0x28>
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 801111e:	f7fe fc63 	bl	800f9e8 <GUI_SD_Write_Screen>
 8011122:	2212      	movs	r2, #18
 8011124:	e7b8      	b.n	8011098 <GUI_Display_Refresh+0x28>
 8011126:	bf00      	nop
 8011128:	20005701 	.word	0x20005701
 801112c:	2000022a 	.word	0x2000022a

08011130 <GUI_Touch_Processing>:
		default: break;
	}
}

void GUI_Touch_Processing()
{
 8011130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
//	uint16_t Touch_x = 0, Touch_y = 0;
//	TS_Get_XY1(TS_I2C_ADDRESS, &temp_x, &temp_y);
	switch(GUI_screen_state){
 8011134:	4c9d      	ldr	r4, [pc, #628]	; (80113ac <GUI_Touch_Processing+0x27c>)
 8011136:	7823      	ldrb	r3, [r4, #0]
 8011138:	3b01      	subs	r3, #1
 801113a:	2b11      	cmp	r3, #17
 801113c:	f201 82c4 	bhi.w	80126c8 <GUI_Touch_Processing+0x1598>
 8011140:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011144:	00390012 	.word	0x00390012
 8011148:	00c9007b 	.word	0x00c9007b
 801114c:	0158010f 	.word	0x0158010f
 8011150:	03210212 	.word	0x03210212
 8011154:	04cb03ea 	.word	0x04cb03ea
 8011158:	071906b3 	.word	0x071906b3
 801115c:	081f07bc 	.word	0x081f07bc
 8011160:	09ad08f6 	.word	0x09ad08f6
 8011164:	00a10a74 	.word	0x00a10a74
		
		case Measure_Screen:
			preGUI_screen_state = GUI_screen_state;
 8011168:	4b91      	ldr	r3, [pc, #580]	; (80113b0 <GUI_Touch_Processing+0x280>)
 801116a:	2201      	movs	r2, #1
 801116c:	701a      	strb	r2, [r3, #0]
		
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 801116e:	4b91      	ldr	r3, [pc, #580]	; (80113b4 <GUI_Touch_Processing+0x284>)
 8011170:	881a      	ldrh	r2, [r3, #0]
 8011172:	4b91      	ldr	r3, [pc, #580]	; (80113b8 <GUI_Touch_Processing+0x288>)
 8011174:	881b      	ldrh	r3, [r3, #0]
 8011176:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801117a:	b29b      	uxth	r3, r3
 801117c:	2b36      	cmp	r3, #54	; 0x36
 801117e:	f102 31ff 	add.w	r1, r2, #4294967295
 8011182:	bf8c      	ite	hi
 8011184:	2300      	movhi	r3, #0
 8011186:	2301      	movls	r3, #1
 8011188:	2936      	cmp	r1, #54	; 0x36
 801118a:	d802      	bhi.n	8011192 <GUI_Touch_Processing+0x62>
 801118c:	b10b      	cbz	r3, 8011192 <GUI_Touch_Processing+0x62>
				{	
					GUI_screen_state = DataSet1_Screen;
 801118e:	2107      	movs	r1, #7
 8011190:	7021      	strb	r1, [r4, #0]
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //down
 8011192:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011196:	2936      	cmp	r1, #54	; 0x36
 8011198:	d86b      	bhi.n	8011272 <GUI_Touch_Processing+0x142>
 801119a:	2b00      	cmp	r3, #0
 801119c:	d069      	beq.n	8011272 <GUI_Touch_Processing+0x142>
				{	
					GUI_screen_state = (screen_count > 0) ? Measure2_Screen : Measure_Screen; 
 801119e:	4b87      	ldr	r3, [pc, #540]	; (80113bc <GUI_Touch_Processing+0x28c>)
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	bf0c      	ite	eq
 80111a6:	2001      	moveq	r0, #1
 80111a8:	2002      	movne	r0, #2
				{	
					GUI_screen_state = DataSet1_Screen;
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
				{	
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 80111aa:	7020      	strb	r0, [r4, #0]

		break;
				
		default: preGUI_screen_state = Measure_Screen;
			}
}
 80111ac:	b002      	add	sp, #8
 80111ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					WriteFLASH_Screen(GUI_screen_state);
 80111b2:	f009 b8cf 	b.w	801a354 <WriteFLASH_Screen>
			preGUI_screen_state = GUI_screen_state;
 80111b6:	4b7e      	ldr	r3, [pc, #504]	; (80113b0 <GUI_Touch_Processing+0x280>)
 80111b8:	2202      	movs	r2, #2
 80111ba:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 80111bc:	4b7d      	ldr	r3, [pc, #500]	; (80113b4 <GUI_Touch_Processing+0x284>)
 80111be:	881a      	ldrh	r2, [r3, #0]
 80111c0:	4b7d      	ldr	r3, [pc, #500]	; (80113b8 <GUI_Touch_Processing+0x288>)
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 80111c8:	b29b      	uxth	r3, r3
 80111ca:	2b36      	cmp	r3, #54	; 0x36
 80111cc:	f102 31ff 	add.w	r1, r2, #4294967295
 80111d0:	bf8c      	ite	hi
 80111d2:	2300      	movhi	r3, #0
 80111d4:	2301      	movls	r3, #1
 80111d6:	2936      	cmp	r1, #54	; 0x36
 80111d8:	d802      	bhi.n	80111e0 <GUI_Touch_Processing+0xb0>
 80111da:	b10b      	cbz	r3, 80111e0 <GUI_Touch_Processing+0xb0>
					GUI_screen_state = DataSet1_Screen;
 80111dc:	2107      	movs	r1, #7
 80111de:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 80111e0:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 80111e4:	2936      	cmp	r1, #54	; 0x36
 80111e6:	d807      	bhi.n	80111f8 <GUI_Touch_Processing+0xc8>
 80111e8:	b133      	cbz	r3, 80111f8 <GUI_Touch_Processing+0xc8>
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 80111ea:	4b74      	ldr	r3, [pc, #464]	; (80113bc <GUI_Touch_Processing+0x28c>)
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	bf34      	ite	cc
 80111f2:	2001      	movcc	r0, #1
 80111f4:	2003      	movcs	r0, #3
 80111f6:	e7d8      	b.n	80111aa <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 80111f8:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 80111fc:	2936      	cmp	r1, #54	; 0x36
 80111fe:	d801      	bhi.n	8011204 <GUI_Touch_Processing+0xd4>
 8011200:	2b00      	cmp	r3, #0
 8011202:	d13b      	bne.n	801127c <GUI_Touch_Processing+0x14c>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8011204:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8011208:	2936      	cmp	r1, #54	; 0x36
 801120a:	d801      	bhi.n	8011210 <GUI_Touch_Processing+0xe0>
 801120c:	2b00      	cmp	r3, #0
 801120e:	d142      	bne.n	8011296 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 8011210:	3a6d      	subs	r2, #109	; 0x6d
 8011212:	2a36      	cmp	r2, #54	; 0x36
 8011214:	d837      	bhi.n	8011286 <GUI_Touch_Processing+0x156>
 8011216:	2b00      	cmp	r3, #0
 8011218:	d035      	beq.n	8011286 <GUI_Touch_Processing+0x156>
						pause = !pause;
 801121a:	4a69      	ldr	r2, [pc, #420]	; (80113c0 <GUI_Touch_Processing+0x290>)
 801121c:	7813      	ldrb	r3, [r2, #0]
 801121e:	fab3 f383 	clz	r3, r3
 8011222:	095b      	lsrs	r3, r3, #5
						GUI_Button_Measure_Start_Pause(109, 426);
 8011224:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011228:	206d      	movs	r0, #109	; 0x6d
						pause = !pause;
 801122a:	7013      	strb	r3, [r2, #0]
						GUI_Button_Measure_Start_Pause(109, 426);
 801122c:	f001 fd36 	bl	8012c9c <GUI_Button_Measure_Start_Pause>
}
 8011230:	b002      	add	sp, #8
 8011232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Down_Panel();
 8011236:	f7fe bc67 	b.w	800fb08 <GUI_Down_Panel>
			preGUI_screen_state = GUI_screen_state;
 801123a:	4b5d      	ldr	r3, [pc, #372]	; (80113b0 <GUI_Touch_Processing+0x280>)
 801123c:	2203      	movs	r2, #3
 801123e:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8011240:	4b5c      	ldr	r3, [pc, #368]	; (80113b4 <GUI_Touch_Processing+0x284>)
 8011242:	881a      	ldrh	r2, [r3, #0]
 8011244:	4b5c      	ldr	r3, [pc, #368]	; (80113b8 <GUI_Touch_Processing+0x288>)
 8011246:	881b      	ldrh	r3, [r3, #0]
 8011248:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801124c:	b29b      	uxth	r3, r3
 801124e:	2b36      	cmp	r3, #54	; 0x36
 8011250:	f102 31ff 	add.w	r1, r2, #4294967295
 8011254:	bf8c      	ite	hi
 8011256:	2300      	movhi	r3, #0
 8011258:	2301      	movls	r3, #1
 801125a:	2936      	cmp	r1, #54	; 0x36
 801125c:	d802      	bhi.n	8011264 <GUI_Touch_Processing+0x134>
 801125e:	b10b      	cbz	r3, 8011264 <GUI_Touch_Processing+0x134>
					GUI_screen_state = DataSet1_Screen;
 8011260:	2107      	movs	r1, #7
 8011262:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Down
 8011264:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011268:	2936      	cmp	r1, #54	; 0x36
 801126a:	d802      	bhi.n	8011272 <GUI_Touch_Processing+0x142>
 801126c:	b10b      	cbz	r3, 8011272 <GUI_Touch_Processing+0x142>
					GUI_screen_state = Measure_Screen;
 801126e:	2001      	movs	r0, #1
 8011270:	e79b      	b.n	80111aa <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8011272:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8011276:	2936      	cmp	r1, #54	; 0x36
 8011278:	d808      	bhi.n	801128c <GUI_Touch_Processing+0x15c>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 801127a:	b13b      	cbz	r3, 801128c <GUI_Touch_Processing+0x15c>
					WriteFLASH_Screen(Graph_Screen);
 801127c:	2004      	movs	r0, #4
 801127e:	f009 f869 	bl	801a354 <WriteFLASH_Screen>
					GUI_screen_state =  Graph_Screen;
 8011282:	2304      	movs	r3, #4
 8011284:	7023      	strb	r3, [r4, #0]
}
 8011286:	b002      	add	sp, #8
 8011288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 801128c:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8011290:	2936      	cmp	r1, #54	; 0x36
 8011292:	d807      	bhi.n	80112a4 <GUI_Touch_Processing+0x174>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8011294:	b133      	cbz	r3, 80112a4 <GUI_Touch_Processing+0x174>
					if(!SD_Detect){if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}}
 8011296:	4b4b      	ldr	r3, [pc, #300]	; (80113c4 <GUI_Touch_Processing+0x294>)
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d1f3      	bne.n	8011286 <GUI_Touch_Processing+0x156>
 801129e:	2312      	movs	r3, #18
 80112a0:	7023      	strb	r3, [r4, #0]
 80112a2:	e7f0      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 80112a4:	3a6d      	subs	r2, #109	; 0x6d
 80112a6:	2a36      	cmp	r2, #54	; 0x36
 80112a8:	d8ed      	bhi.n	8011286 <GUI_Touch_Processing+0x156>
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d0eb      	beq.n	8011286 <GUI_Touch_Processing+0x156>
						pause = !pause;
 80112ae:	4a44      	ldr	r2, [pc, #272]	; (80113c0 <GUI_Touch_Processing+0x290>)
 80112b0:	7813      	ldrb	r3, [r2, #0]
 80112b2:	fab3 f383 	clz	r3, r3
 80112b6:	095b      	lsrs	r3, r3, #5
						GUI_Button_Measure_Start_Pause(109, 426);
 80112b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80112bc:	206d      	movs	r0, #109	; 0x6d
						pause = !pause;
 80112be:	7013      	strb	r3, [r2, #0]
						GUI_Button_Measure_Start_Pause(109, 426);
 80112c0:	f001 fcec 	bl	8012c9c <GUI_Button_Measure_Start_Pause>
						GUI_Bar_Measure(85, 13, 0.0);
 80112c4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80113c8 <GUI_Touch_Processing+0x298>
 80112c8:	210d      	movs	r1, #13
 80112ca:	2055      	movs	r0, #85	; 0x55
}
 80112cc:	b002      	add	sp, #8
 80112ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Bar_Measure(85, 13, 0.0);
 80112d2:	f002 b99f 	b.w	8013614 <GUI_Bar_Measure>
			preGUI_screen_state = GUI_screen_state;
 80112d6:	4b36      	ldr	r3, [pc, #216]	; (80113b0 <GUI_Touch_Processing+0x280>)
 80112d8:	2204      	movs	r2, #4
 80112da:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 80112dc:	4b35      	ldr	r3, [pc, #212]	; (80113b4 <GUI_Touch_Processing+0x284>)
 80112de:	881a      	ldrh	r2, [r3, #0]
 80112e0:	4b35      	ldr	r3, [pc, #212]	; (80113b8 <GUI_Touch_Processing+0x288>)
 80112e2:	881b      	ldrh	r3, [r3, #0]
 80112e4:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	2b36      	cmp	r3, #54	; 0x36
 80112ec:	f102 31ff 	add.w	r1, r2, #4294967295
 80112f0:	bf8c      	ite	hi
 80112f2:	2300      	movhi	r3, #0
 80112f4:	2301      	movls	r3, #1
 80112f6:	2936      	cmp	r1, #54	; 0x36
 80112f8:	d802      	bhi.n	8011300 <GUI_Touch_Processing+0x1d0>
 80112fa:	b10b      	cbz	r3, 8011300 <GUI_Touch_Processing+0x1d0>
					GUI_screen_state = GraphSet1_Screen;
 80112fc:	210c      	movs	r1, #12
 80112fe:	7021      	strb	r1, [r4, #0]
			if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 8011300:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011304:	2936      	cmp	r1, #54	; 0x36
 8011306:	d808      	bhi.n	801131a <GUI_Touch_Processing+0x1ea>
 8011308:	b13b      	cbz	r3, 801131a <GUI_Touch_Processing+0x1ea>
					if(Rotation_Screen_Spectral < 0x02) {Rotation_Screen_Spectral++;} else{Rotation_Screen_Spectral= 0x00;}
 801130a:	4a30      	ldr	r2, [pc, #192]	; (80113cc <GUI_Touch_Processing+0x29c>)
 801130c:	7813      	ldrb	r3, [r2, #0]
 801130e:	2b01      	cmp	r3, #1
 8011310:	bf94      	ite	ls
 8011312:	3301      	addls	r3, #1
 8011314:	2300      	movhi	r3, #0
 8011316:	7013      	strb	r3, [r2, #0]
 8011318:	e7b5      	b.n	8011286 <GUI_Touch_Processing+0x156>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 801131a:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 801131e:	2936      	cmp	r1, #54	; 0x36
 8011320:	d806      	bhi.n	8011330 <GUI_Touch_Processing+0x200>
 8011322:	b12b      	cbz	r3, 8011330 <GUI_Touch_Processing+0x200>
					WriteFLASH_Screen(Color_Screen);
 8011324:	2005      	movs	r0, #5
 8011326:	f009 f815 	bl	801a354 <WriteFLASH_Screen>
					GUI_screen_state = Color_Screen;
 801132a:	2305      	movs	r3, #5
 801132c:	7023      	strb	r3, [r4, #0]
 801132e:	e7aa      	b.n	8011286 <GUI_Touch_Processing+0x156>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011330:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8011334:	2936      	cmp	r1, #54	; 0x36
 8011336:	d801      	bhi.n	801133c <GUI_Touch_Processing+0x20c>
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1ac      	bne.n	8011296 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 801133c:	3a6d      	subs	r2, #109	; 0x6d
 801133e:	2a36      	cmp	r2, #54	; 0x36
 8011340:	d8a1      	bhi.n	8011286 <GUI_Touch_Processing+0x156>
 8011342:	2b00      	cmp	r3, #0
 8011344:	d09f      	beq.n	8011286 <GUI_Touch_Processing+0x156>
					pause = !pause;
 8011346:	4a1e      	ldr	r2, [pc, #120]	; (80113c0 <GUI_Touch_Processing+0x290>)
 8011348:	7813      	ldrb	r3, [r2, #0]
 801134a:	fab3 f383 	clz	r3, r3
 801134e:	095b      	lsrs	r3, r3, #5
					GUI_Button_Measure_Start_Pause(109, 426);
 8011350:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011354:	206d      	movs	r0, #109	; 0x6d
					pause = !pause;
 8011356:	7013      	strb	r3, [r2, #0]
}
 8011358:	b002      	add	sp, #8
 801135a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Button_Measure_Start_Pause(109, 426);
 801135e:	f001 bc9d 	b.w	8012c9c <GUI_Button_Measure_Start_Pause>
			preGUI_screen_state = GUI_screen_state;
 8011362:	4b13      	ldr	r3, [pc, #76]	; (80113b0 <GUI_Touch_Processing+0x280>)
 8011364:	2205      	movs	r2, #5
 8011366:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8011368:	4b12      	ldr	r3, [pc, #72]	; (80113b4 <GUI_Touch_Processing+0x284>)
 801136a:	881a      	ldrh	r2, [r3, #0]
 801136c:	4b12      	ldr	r3, [pc, #72]	; (80113b8 <GUI_Touch_Processing+0x288>)
 801136e:	881b      	ldrh	r3, [r3, #0]
 8011370:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8011374:	b29b      	uxth	r3, r3
 8011376:	2b36      	cmp	r3, #54	; 0x36
 8011378:	f102 31ff 	add.w	r1, r2, #4294967295
 801137c:	bf8c      	ite	hi
 801137e:	2300      	movhi	r3, #0
 8011380:	2301      	movls	r3, #1
 8011382:	2936      	cmp	r1, #54	; 0x36
 8011384:	d807      	bhi.n	8011396 <GUI_Touch_Processing+0x266>
 8011386:	b133      	cbz	r3, 8011396 <GUI_Touch_Processing+0x266>
					preColor_Field = Color_Field;
 8011388:	4b11      	ldr	r3, [pc, #68]	; (80113d0 <GUI_Touch_Processing+0x2a0>)
 801138a:	781a      	ldrb	r2, [r3, #0]
 801138c:	4b11      	ldr	r3, [pc, #68]	; (80113d4 <GUI_Touch_Processing+0x2a4>)
 801138e:	701a      	strb	r2, [r3, #0]
					GUI_screen_state = ColorSet1_Screen;
 8011390:	230e      	movs	r3, #14
 8011392:	7023      	strb	r3, [r4, #0]
 8011394:	e777      	b.n	8011286 <GUI_Touch_Processing+0x156>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8011396:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 801139a:	2936      	cmp	r1, #54	; 0x36
 801139c:	d81c      	bhi.n	80113d8 <GUI_Touch_Processing+0x2a8>
 801139e:	b1db      	cbz	r3, 80113d8 <GUI_Touch_Processing+0x2a8>
					WriteFLASH_Screen(Color_Rendition_Screen);
 80113a0:	2006      	movs	r0, #6
 80113a2:	f008 ffd7 	bl	801a354 <WriteFLASH_Screen>
					GUI_screen_state = Color_Rendition_Screen;
 80113a6:	2306      	movs	r3, #6
 80113a8:	7023      	strb	r3, [r4, #0]
 80113aa:	e76c      	b.n	8011286 <GUI_Touch_Processing+0x156>
 80113ac:	20005701 	.word	0x20005701
 80113b0:	2000022a 	.word	0x2000022a
 80113b4:	20054942 	.word	0x20054942
 80113b8:	20054944 	.word	0x20054944
 80113bc:	2000572b 	.word	0x2000572b
 80113c0:	20005728 	.word	0x20005728
 80113c4:	20095c54 	.word	0x20095c54
 80113c8:	00000000 	.word	0x00000000
 80113cc:	2000570a 	.word	0x2000570a
 80113d0:	200056ff 	.word	0x200056ff
 80113d4:	20005729 	.word	0x20005729
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 80113d8:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 80113dc:	2936      	cmp	r1, #54	; 0x36
 80113de:	d801      	bhi.n	80113e4 <GUI_Touch_Processing+0x2b4>
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d1b0      	bne.n	8011346 <GUI_Touch_Processing+0x216>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 80113e4:	3a37      	subs	r2, #55	; 0x37
 80113e6:	2a36      	cmp	r2, #54	; 0x36
 80113e8:	f63f af4d 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	f47f af52 	bne.w	8011296 <GUI_Touch_Processing+0x166>
 80113f2:	e748      	b.n	8011286 <GUI_Touch_Processing+0x156>
			preGUI_screen_state = GUI_screen_state;
 80113f4:	4ba9      	ldr	r3, [pc, #676]	; (801169c <GUI_Touch_Processing+0x56c>)
 80113f6:	2206      	movs	r2, #6
 80113f8:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 80113fa:	4ba9      	ldr	r3, [pc, #676]	; (80116a0 <GUI_Touch_Processing+0x570>)
 80113fc:	881a      	ldrh	r2, [r3, #0]
 80113fe:	4ba9      	ldr	r3, [pc, #676]	; (80116a4 <GUI_Touch_Processing+0x574>)
 8011400:	881b      	ldrh	r3, [r3, #0]
 8011402:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8011406:	b29b      	uxth	r3, r3
 8011408:	2b36      	cmp	r3, #54	; 0x36
 801140a:	f102 31ff 	add.w	r1, r2, #4294967295
 801140e:	bf8c      	ite	hi
 8011410:	2300      	movhi	r3, #0
 8011412:	2301      	movls	r3, #1
 8011414:	2936      	cmp	r1, #54	; 0x36
 8011416:	d803      	bhi.n	8011420 <GUI_Touch_Processing+0x2f0>
 8011418:	b113      	cbz	r3, 8011420 <GUI_Touch_Processing+0x2f0>
					GUI_screen_state = ColorRendSet_Screen;
 801141a:	2310      	movs	r3, #16
 801141c:	7023      	strb	r3, [r4, #0]
 801141e:	e732      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8011420:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8011424:	2936      	cmp	r1, #54	; 0x36
 8011426:	d806      	bhi.n	8011436 <GUI_Touch_Processing+0x306>
 8011428:	b12b      	cbz	r3, 8011436 <GUI_Touch_Processing+0x306>
					WriteFLASH_Screen(Measure_Screen);
 801142a:	2001      	movs	r0, #1
 801142c:	f008 ff92 	bl	801a354 <WriteFLASH_Screen>
					GUI_screen_state = Measure_Screen;
 8011430:	2301      	movs	r3, #1
 8011432:	7023      	strb	r3, [r4, #0]
 8011434:	e727      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 8011436:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 801143a:	2936      	cmp	r1, #54	; 0x36
 801143c:	d808      	bhi.n	8011450 <GUI_Touch_Processing+0x320>
 801143e:	b13b      	cbz	r3, 8011450 <GUI_Touch_Processing+0x320>
					if(Rotation_Screen_Rend < 0x02) {Rotation_Screen_Rend++;} else{Rotation_Screen_Rend = 0x00;}
 8011440:	4a99      	ldr	r2, [pc, #612]	; (80116a8 <GUI_Touch_Processing+0x578>)
 8011442:	7813      	ldrb	r3, [r2, #0]
 8011444:	2b01      	cmp	r3, #1
 8011446:	bf94      	ite	ls
 8011448:	3301      	addls	r3, #1
 801144a:	2300      	movhi	r3, #0
 801144c:	7013      	strb	r3, [r2, #0]
 801144e:	e71a      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8011450:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 8011454:	2936      	cmp	r1, #54	; 0x36
 8011456:	d877      	bhi.n	8011548 <GUI_Touch_Processing+0x418>
 8011458:	2b00      	cmp	r3, #0
 801145a:	d075      	beq.n	8011548 <GUI_Touch_Processing+0x418>
					if (Color_rend_Field & CRI_CQS){
 801145c:	4b93      	ldr	r3, [pc, #588]	; (80116ac <GUI_Touch_Processing+0x57c>)
 801145e:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801172c <GUI_Touch_Processing+0x5fc>
 8011462:	781c      	ldrb	r4, [r3, #0]
 8011464:	4e92      	ldr	r6, [pc, #584]	; (80116b0 <GUI_Touch_Processing+0x580>)
 8011466:	4f93      	ldr	r7, [pc, #588]	; (80116b4 <GUI_Touch_Processing+0x584>)
 8011468:	4d93      	ldr	r5, [pc, #588]	; (80116b8 <GUI_Touch_Processing+0x588>)
 801146a:	f014 0401 	ands.w	r4, r4, #1
 801146e:	d03f      	beq.n	80114f0 <GUI_Touch_Processing+0x3c0>
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011470:	4892      	ldr	r0, [pc, #584]	; (80116bc <GUI_Touch_Processing+0x58c>)
						CRICQS_done = 0x00;
 8011472:	2400      	movs	r4, #0
 8011474:	f888 4000 	strb.w	r4, [r8]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011478:	f008 fe8c 	bl	801a194 <Rabs_find_MAX_all>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801147c:	4b90      	ldr	r3, [pc, #576]	; (80116c0 <GUI_Touch_Processing+0x590>)
 801147e:	4a91      	ldr	r2, [pc, #580]	; (80116c4 <GUI_Touch_Processing+0x594>)
 8011480:	4991      	ldr	r1, [pc, #580]	; (80116c8 <GUI_Touch_Processing+0x598>)
 8011482:	488e      	ldr	r0, [pc, #568]	; (80116bc <GUI_Touch_Processing+0x58c>)
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011484:	ed86 0a00 	vstr	s0, [r6]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011488:	f7fd f91c 	bl	800e6c4 <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 801148c:	488f      	ldr	r0, [pc, #572]	; (80116cc <GUI_Touch_Processing+0x59c>)
 801148e:	f7fd f985 	bl	800e79c <Calculate_xy1931>
						Calculate_uv(colorimetry_xy1931);
 8011492:	488f      	ldr	r0, [pc, #572]	; (80116d0 <GUI_Touch_Processing+0x5a0>)
 8011494:	f7fd f9a0 	bl	800e7d8 <Calculate_uv>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011498:	4888      	ldr	r0, [pc, #544]	; (80116bc <GUI_Touch_Processing+0x58c>)
 801149a:	7839      	ldrb	r1, [r7, #0]
 801149c:	f7fd f9e4 	bl	800e868 <Calculate_Tc>
 80114a0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 80114a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 80114a8:	edcd 7a01 	vstr	s15, [sp, #4]
 80114ac:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80114b0:	8028      	strh	r0, [r5, #0]
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 80114b2:	4298      	cmp	r0, r3
 80114b4:	d10b      	bne.n	80114ce <GUI_Touch_Processing+0x39e>
 80114b6:	4b87      	ldr	r3, [pc, #540]	; (80116d4 <GUI_Touch_Processing+0x5a4>)
 80114b8:	4887      	ldr	r0, [pc, #540]	; (80116d8 <GUI_Touch_Processing+0x5a8>)
 80114ba:	701c      	strb	r4, [r3, #0]
 80114bc:	4b87      	ldr	r3, [pc, #540]	; (80116dc <GUI_Touch_Processing+0x5ac>)
 80114be:	701c      	strb	r4, [r3, #0]
 80114c0:	4b87      	ldr	r3, [pc, #540]	; (80116e0 <GUI_Touch_Processing+0x5b0>)
 80114c2:	220e      	movs	r2, #14
 80114c4:	701c      	strb	r4, [r3, #0]
 80114c6:	4621      	mov	r1, r4
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 80114c8:	f00f f899 	bl	80205fe <memset>
 80114cc:	e002      	b.n	80114d4 <GUI_Touch_Processing+0x3a4>
						else	{CRI_func(Tc_Measure, Line_Rabs_buff);}
 80114ce:	497b      	ldr	r1, [pc, #492]	; (80116bc <GUI_Touch_Processing+0x58c>)
 80114d0:	f7fb f816 	bl	800c500 <CRI_func>
					Calc_ColorRend = !Calc_ColorRend;
 80114d4:	4a83      	ldr	r2, [pc, #524]	; (80116e4 <GUI_Touch_Processing+0x5b4>)
						CRICQS_done = 0x01;
 80114d6:	2301      	movs	r3, #1
 80114d8:	f888 3000 	strb.w	r3, [r8]
					Calc_ColorRend = !Calc_ColorRend;
 80114dc:	7813      	ldrb	r3, [r2, #0]
 80114de:	fab3 f383 	clz	r3, r3
 80114e2:	095b      	lsrs	r3, r3, #5
 80114e4:	7013      	strb	r3, [r2, #0]
}
 80114e6:	b002      	add	sp, #8
 80114e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Display_Refresh();
 80114ec:	f7ff bdc0 	b.w	8011070 <GUI_Display_Refresh>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 80114f0:	4b73      	ldr	r3, [pc, #460]	; (80116c0 <GUI_Touch_Processing+0x590>)
 80114f2:	4a74      	ldr	r2, [pc, #464]	; (80116c4 <GUI_Touch_Processing+0x594>)
 80114f4:	4974      	ldr	r1, [pc, #464]	; (80116c8 <GUI_Touch_Processing+0x598>)
 80114f6:	4871      	ldr	r0, [pc, #452]	; (80116bc <GUI_Touch_Processing+0x58c>)
						CRICQS_done = 0x00;
 80114f8:	f888 4000 	strb.w	r4, [r8]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 80114fc:	f7fd f8e2 	bl	800e6c4 <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8011500:	4872      	ldr	r0, [pc, #456]	; (80116cc <GUI_Touch_Processing+0x59c>)
 8011502:	f7fd f94b 	bl	800e79c <Calculate_xy1931>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011506:	7839      	ldrb	r1, [r7, #0]
 8011508:	486c      	ldr	r0, [pc, #432]	; (80116bc <GUI_Touch_Processing+0x58c>)
 801150a:	f7fd f9ad 	bl	800e868 <Calculate_Tc>
 801150e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011512:	486a      	ldr	r0, [pc, #424]	; (80116bc <GUI_Touch_Processing+0x58c>)
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011514:	ee17 3a90 	vmov	r3, s15
 8011518:	802b      	strh	r3, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 801151a:	f008 fe3b 	bl	801a194 <Rabs_find_MAX_all>
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 801151e:	8828      	ldrh	r0, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011520:	ed86 0a00 	vstr	s0, [r6]
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8011524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011528:	4298      	cmp	r0, r3
 801152a:	d109      	bne.n	8011540 <GUI_Touch_Processing+0x410>
 801152c:	4b6e      	ldr	r3, [pc, #440]	; (80116e8 <GUI_Touch_Processing+0x5b8>)
 801152e:	486f      	ldr	r0, [pc, #444]	; (80116ec <GUI_Touch_Processing+0x5bc>)
 8011530:	701c      	strb	r4, [r3, #0]
 8011532:	4b6f      	ldr	r3, [pc, #444]	; (80116f0 <GUI_Touch_Processing+0x5c0>)
 8011534:	701c      	strb	r4, [r3, #0]
 8011536:	4b6f      	ldr	r3, [pc, #444]	; (80116f4 <GUI_Touch_Processing+0x5c4>)
 8011538:	220f      	movs	r2, #15
 801153a:	701c      	strb	r4, [r3, #0]
 801153c:	4621      	mov	r1, r4
 801153e:	e7c3      	b.n	80114c8 <GUI_Touch_Processing+0x398>
						else	{cqs_func(Tc_Measure, Line_Rabs_buff);}
 8011540:	495e      	ldr	r1, [pc, #376]	; (80116bc <GUI_Touch_Processing+0x58c>)
 8011542:	f7f8 fe71 	bl	800a228 <cqs_func>
 8011546:	e7c5      	b.n	80114d4 <GUI_Touch_Processing+0x3a4>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011548:	3a37      	subs	r2, #55	; 0x37
 801154a:	2a36      	cmp	r2, #54	; 0x36
 801154c:	f63f ae9b 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
 8011550:	2b00      	cmp	r3, #0
 8011552:	f43f ae98 	beq.w	8011286 <GUI_Touch_Processing+0x156>
						if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}
 8011556:	4b68      	ldr	r3, [pc, #416]	; (80116f8 <GUI_Touch_Processing+0x5c8>)
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	b90b      	cbnz	r3, 8011560 <GUI_Touch_Processing+0x430>
 801155c:	2312      	movs	r3, #18
 801155e:	7023      	strb	r3, [r4, #0]
						pause = 0;
 8011560:	4b66      	ldr	r3, [pc, #408]	; (80116fc <GUI_Touch_Processing+0x5cc>)
 8011562:	2200      	movs	r2, #0
 8011564:	701a      	strb	r2, [r3, #0]
 8011566:	e68e      	b.n	8011286 <GUI_Touch_Processing+0x156>
			preGUI_screen_state = GUI_screen_state;
 8011568:	4b4c      	ldr	r3, [pc, #304]	; (801169c <GUI_Touch_Processing+0x56c>)
 801156a:	2207      	movs	r2, #7
 801156c:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Down
 801156e:	4a4d      	ldr	r2, [pc, #308]	; (80116a4 <GUI_Touch_Processing+0x574>)
 8011570:	4b4b      	ldr	r3, [pc, #300]	; (80116a0 <GUI_Touch_Processing+0x570>)
 8011572:	8812      	ldrh	r2, [r2, #0]
 8011574:	881b      	ldrh	r3, [r3, #0]
 8011576:	f5a2 70d5 	sub.w	r0, r2, #426	; 0x1aa
 801157a:	2836      	cmp	r0, #54	; 0x36
 801157c:	f1a3 01a3 	sub.w	r1, r3, #163	; 0xa3
 8011580:	bf8c      	ite	hi
 8011582:	2000      	movhi	r0, #0
 8011584:	2001      	movls	r0, #1
 8011586:	2936      	cmp	r1, #54	; 0x36
 8011588:	d803      	bhi.n	8011592 <GUI_Touch_Processing+0x462>
 801158a:	b110      	cbz	r0, 8011592 <GUI_Touch_Processing+0x462>
					GUI_screen_state = DataSet2_Screen;
 801158c:	2308      	movs	r3, #8
 801158e:	7023      	strb	r3, [r4, #0]
 8011590:	e679      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=202 & Touch_y <=(202+54) ) //Mode_EL
 8011592:	f1a3 01b6 	sub.w	r1, r3, #182	; 0xb6
 8011596:	2936      	cmp	r1, #54	; 0x36
 8011598:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 801159c:	bf8c      	ite	hi
 801159e:	2100      	movhi	r1, #0
 80115a0:	2101      	movls	r1, #1
 80115a2:	2d36      	cmp	r5, #54	; 0x36
 80115a4:	d827      	bhi.n	80115f6 <GUI_Touch_Processing+0x4c6>
 80115a6:	b331      	cbz	r1, 80115f6 <GUI_Touch_Processing+0x4c6>
					Mode_EL = !Mode_EL;
 80115a8:	4c55      	ldr	r4, [pc, #340]	; (8011700 <GUI_Touch_Processing+0x5d0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80115aa:	4b56      	ldr	r3, [pc, #344]	; (8011704 <GUI_Touch_Processing+0x5d4>)
					Mode_EL = !Mode_EL;
 80115ac:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80115ae:	4856      	ldr	r0, [pc, #344]	; (8011708 <GUI_Touch_Processing+0x5d8>)
					Mode_EL = !Mode_EL;
 80115b0:	2a00      	cmp	r2, #0
 80115b2:	bf0c      	ite	eq
 80115b4:	2201      	moveq	r2, #1
 80115b6:	2200      	movne	r2, #0
 80115b8:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80115ba:	bf18      	it	ne
 80115bc:	4618      	movne	r0, r3
 80115be:	4a53      	ldr	r2, [pc, #332]	; (801170c <GUI_Touch_Processing+0x5dc>)
 80115c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80115c4:	f7fd fe04 	bl	800f1d0 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80115c8:	7822      	ldrb	r2, [r4, #0]
 80115ca:	4b51      	ldr	r3, [pc, #324]	; (8011710 <GUI_Touch_Processing+0x5e0>)
 80115cc:	2a00      	cmp	r2, #0
 80115ce:	f040 87c5 	bne.w	801255c <GUI_Touch_Processing+0x142c>
 80115d2:	4a50      	ldr	r2, [pc, #320]	; (8011714 <GUI_Touch_Processing+0x5e4>)
 80115d4:	edd2 0a00 	vldr	s1, [r2]
 80115d8:	ed93 0a00 	vldr	s0, [r3]
 80115dc:	f008 fd24 	bl	801a028 <Rabs_calc_Factor2_Settings_change>
 80115e0:	4b4d      	ldr	r3, [pc, #308]	; (8011718 <GUI_Touch_Processing+0x5e8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80115e2:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80115e4:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80115e8:	21ca      	movs	r1, #202	; 0xca
 80115ea:	20b6      	movs	r0, #182	; 0xb6
}
 80115ec:	b002      	add	sp, #8
 80115ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80115f2:	f001 bebb 	b.w	801336c <GUI_Switch_ButtonActive>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=268 & Touch_y <=(268+54) ) //Bluetooth
 80115f6:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 80115fa:	2d36      	cmp	r5, #54	; 0x36
 80115fc:	d810      	bhi.n	8011620 <GUI_Touch_Processing+0x4f0>
 80115fe:	b179      	cbz	r1, 8011620 <GUI_Touch_Processing+0x4f0>
					Bluetooth = !Bluetooth;
 8011600:	4b46      	ldr	r3, [pc, #280]	; (801171c <GUI_Touch_Processing+0x5ec>)
 8011602:	781a      	ldrb	r2, [r3, #0]
 8011604:	fab2 f282 	clz	r2, r2
 8011608:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801160a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 801160e:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8011610:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8011612:	f001 fe59 	bl	80132c8 <GUI_Switch_Button>
}
 8011616:	b002      	add	sp, #8
 8011618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Up_Panel();
 801161c:	f7fe ba50 	b.w	800fac0 <GUI_Up_Panel>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=124 & Touch_y <=(174) ) // Information
 8011620:	f1a3 0108 	sub.w	r1, r3, #8
 8011624:	29f2      	cmp	r1, #242	; 0xf2
 8011626:	f1a2 057c 	sub.w	r5, r2, #124	; 0x7c
 801162a:	bf8c      	ite	hi
 801162c:	2100      	movhi	r1, #0
 801162e:	2101      	movls	r1, #1
 8011630:	2d32      	cmp	r5, #50	; 0x32
 8011632:	d803      	bhi.n	801163c <GUI_Touch_Processing+0x50c>
 8011634:	b111      	cbz	r1, 801163c <GUI_Touch_Processing+0x50c>
					GUI_screen_state = Information_Screen;
 8011636:	2311      	movs	r3, #17
 8011638:	7023      	strb	r3, [r4, #0]
 801163a:	e624      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //Illuminance
 801163c:	f1a3 05c8 	sub.w	r5, r3, #200	; 0xc8
 8011640:	2d36      	cmp	r5, #54	; 0x36
 8011642:	d80c      	bhi.n	801165e <GUI_Touch_Processing+0x52e>
 8011644:	f46f 77a3 	mvn.w	r7, #326	; 0x146
 8011648:	19d5      	adds	r5, r2, r7
 801164a:	2d36      	cmp	r5, #54	; 0x36
 801164c:	d807      	bhi.n	801165e <GUI_Touch_Processing+0x52e>
					Measure_Field ^= Illuminance;
 801164e:	4b34      	ldr	r3, [pc, #208]	; (8011720 <GUI_Touch_Processing+0x5f0>)
 8011650:	881a      	ldrh	r2, [r3, #0]
 8011652:	f082 0201 	eor.w	r2, r2, #1
 8011656:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 8011658:	f002 0201 	and.w	r2, r2, #1
 801165c:	e1de      	b.n	8011a1c <GUI_Touch_Processing+0x8ec>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 801165e:	1e5d      	subs	r5, r3, #1
 8011660:	2d36      	cmp	r5, #54	; 0x36
 8011662:	d868      	bhi.n	8011736 <GUI_Touch_Processing+0x606>
 8011664:	2800      	cmp	r0, #0
 8011666:	d066      	beq.n	8011736 <GUI_Touch_Processing+0x606>
					WriteSDFLASH_t(sdfile_cnt);
 8011668:	4b2e      	ldr	r3, [pc, #184]	; (8011724 <GUI_Touch_Processing+0x5f4>)
 801166a:	2100      	movs	r1, #0
 801166c:	8818      	ldrh	r0, [r3, #0]
 801166e:	f008 fda3 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011672:	4b2d      	ldr	r3, [pc, #180]	; (8011728 <GUI_Touch_Processing+0x5f8>)
 8011674:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011676:	1e5a      	subs	r2, r3, #1
 8011678:	2a05      	cmp	r2, #5
 801167a:	d804      	bhi.n	8011686 <GUI_Touch_Processing+0x556>
 801167c:	e8df f002 	tbb	[pc, r2]
 8011680:	08030305 	.word	0x08030305
 8011684:	0b58      	.short	0x0b58
					GUI_screen_state = Prev_Inf_Screen;
 8011686:	7023      	strb	r3, [r4, #0]
 8011688:	e5fd      	b.n	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801168a:	2301      	movs	r3, #1
 801168c:	7023      	strb	r3, [r4, #0]
 801168e:	e5fa      	b.n	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011690:	2304      	movs	r3, #4
 8011692:	7023      	strb	r3, [r4, #0]
 8011694:	e5f7      	b.n	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011696:	2306      	movs	r3, #6
 8011698:	7023      	strb	r3, [r4, #0]
 801169a:	e5f4      	b.n	8011286 <GUI_Touch_Processing+0x156>
 801169c:	2000022a 	.word	0x2000022a
 80116a0:	20054942 	.word	0x20054942
 80116a4:	20054944 	.word	0x20054944
 80116a8:	20005709 	.word	0x20005709
 80116ac:	20005700 	.word	0x20005700
 80116b0:	200958fc 	.word	0x200958fc
 80116b4:	20005704 	.word	0x20005704
 80116b8:	20054940 	.word	0x20054940
 80116bc:	2000c53c 	.word	0x2000c53c
 80116c0:	2008d514 	.word	0x2008d514
 80116c4:	20052940 	.word	0x20052940
 80116c8:	2008a514 	.word	0x2008a514
 80116cc:	2008f522 	.word	0x2008f522
 80116d0:	2008f540 	.word	0x2008f540
 80116d4:	20004659 	.word	0x20004659
 80116d8:	2000465b 	.word	0x2000465b
 80116dc:	2000465a 	.word	0x2000465a
 80116e0:	20004658 	.word	0x20004658
 80116e4:	200056fd 	.word	0x200056fd
 80116e8:	20003633 	.word	0x20003633
 80116ec:	20003624 	.word	0x20003624
 80116f0:	20003635 	.word	0x20003635
 80116f4:	20003634 	.word	0x20003634
 80116f8:	20095c54 	.word	0x20095c54
 80116fc:	20005728 	.word	0x20005728
 8011700:	20000ebc 	.word	0x20000ebc
 8011704:	08101838 	.word	0x08101838
 8011708:	08100838 	.word	0x08100838
 801170c:	20051940 	.word	0x20051940
 8011710:	20009d2c 	.word	0x20009d2c
 8011714:	20009d28 	.word	0x20009d28
 8011718:	20009d34 	.word	0x20009d34
 801171c:	20090aba 	.word	0x20090aba
 8011720:	20005706 	.word	0x20005706
 8011724:	2000572e 	.word	0x2000572e
 8011728:	20090ab5 	.word	0x20090ab5
 801172c:	200056fc 	.word	0x200056fc
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011730:	2305      	movs	r3, #5
 8011732:	7023      	strb	r3, [r4, #0]
 8011734:	e5a7      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=80 & Touch_y <=(120) ) // Language change
 8011736:	3a50      	subs	r2, #80	; 0x50
 8011738:	2a28      	cmp	r2, #40	; 0x28
 801173a:	d80c      	bhi.n	8011756 <GUI_Touch_Processing+0x626>
 801173c:	b159      	cbz	r1, 8011756 <GUI_Touch_Processing+0x626>
					if (Language_status == Ru) Language_status=En;
 801173e:	4ba0      	ldr	r3, [pc, #640]	; (80119c0 <GUI_Touch_Processing+0x890>)
 8011740:	781a      	ldrb	r2, [r3, #0]
 8011742:	b912      	cbnz	r2, 801174a <GUI_Touch_Processing+0x61a>
 8011744:	2201      	movs	r2, #1
 8011746:	701a      	strb	r2, [r3, #0]
 8011748:	e59d      	b.n	8011286 <GUI_Touch_Processing+0x156>
					else if (Language_status == En) Language_status=Ru;
 801174a:	2a01      	cmp	r2, #1
 801174c:	f47f ad9b 	bne.w	8011286 <GUI_Touch_Processing+0x156>
 8011750:	2200      	movs	r2, #0
 8011752:	701a      	strb	r2, [r3, #0]
 8011754:	e597      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 8011756:	f1a3 02d9 	sub.w	r2, r3, #217	; 0xd9
 801175a:	2a36      	cmp	r2, #54	; 0x36
 801175c:	d810      	bhi.n	8011780 <GUI_Touch_Processing+0x650>
 801175e:	b178      	cbz	r0, 8011780 <GUI_Touch_Processing+0x650>
					TFT_ON_OFF = 0x00;
 8011760:	4b98      	ldr	r3, [pc, #608]	; (80119c4 <GUI_Touch_Processing+0x894>)
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011762:	4899      	ldr	r0, [pc, #612]	; (80119c8 <GUI_Touch_Processing+0x898>)
					TFT_ON_OFF = 0x00;
 8011764:	2400      	movs	r4, #0
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011766:	2104      	movs	r1, #4
					TFT_ON_OFF = 0x00;
 8011768:	701c      	strb	r4, [r3, #0]
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801176a:	f7f4 fde1 	bl	8006330 <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801176e:	4897      	ldr	r0, [pc, #604]	; (80119cc <GUI_Touch_Processing+0x89c>)
 8011770:	4622      	mov	r2, r4
 8011772:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 8011776:	b002      	add	sp, #8
 8011778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801177c:	f7f0 bf32 	b.w	80025e4 <HAL_GPIO_WritePin>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011780:	3b37      	subs	r3, #55	; 0x37
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011782:	2b36      	cmp	r3, #54	; 0x36
 8011784:	e0c2      	b.n	801190c <GUI_Touch_Processing+0x7dc>
				preGUI_screen_state = GUI_screen_state;
 8011786:	4b92      	ldr	r3, [pc, #584]	; (80119d0 <GUI_Touch_Processing+0x8a0>)
 8011788:	2208      	movs	r2, #8
 801178a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )////down
 801178c:	4b91      	ldr	r3, [pc, #580]	; (80119d4 <GUI_Touch_Processing+0x8a4>)
 801178e:	881a      	ldrh	r2, [r3, #0]
 8011790:	4b91      	ldr	r3, [pc, #580]	; (80119d8 <GUI_Touch_Processing+0x8a8>)
 8011792:	881b      	ldrh	r3, [r3, #0]
 8011794:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011798:	2836      	cmp	r0, #54	; 0x36
 801179a:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 801179e:	bf8c      	ite	hi
 80117a0:	2000      	movhi	r0, #0
 80117a2:	2001      	movls	r0, #1
 80117a4:	2936      	cmp	r1, #54	; 0x36
 80117a6:	d803      	bhi.n	80117b0 <GUI_Touch_Processing+0x680>
 80117a8:	b110      	cbz	r0, 80117b0 <GUI_Touch_Processing+0x680>
					GUI_screen_state = DataSet3_Screen;
 80117aa:	2309      	movs	r3, #9
 80117ac:	7023      	strb	r3, [r4, #0]
 80117ae:	e56a      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //Irradiance
 80117b0:	f1a2 01c8 	sub.w	r1, r2, #200	; 0xc8
 80117b4:	2936      	cmp	r1, #54	; 0x36
 80117b6:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 80117ba:	bf8c      	ite	hi
 80117bc:	2100      	movhi	r1, #0
 80117be:	2101      	movls	r1, #1
 80117c0:	2d36      	cmp	r5, #54	; 0x36
 80117c2:	d808      	bhi.n	80117d6 <GUI_Touch_Processing+0x6a6>
 80117c4:	b139      	cbz	r1, 80117d6 <GUI_Touch_Processing+0x6a6>
					Measure_Field ^= Irradiance;
 80117c6:	4b85      	ldr	r3, [pc, #532]	; (80119dc <GUI_Touch_Processing+0x8ac>)
 80117c8:	881a      	ldrh	r2, [r3, #0]
 80117ca:	f082 0202 	eor.w	r2, r2, #2
 80117ce:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 80117d0:	f002 0202 	and.w	r2, r2, #2
 80117d4:	e0c7      	b.n	8011966 <GUI_Touch_Processing+0x836>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //PPFD
 80117d6:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 80117da:	2d36      	cmp	r5, #54	; 0x36
 80117dc:	d808      	bhi.n	80117f0 <GUI_Touch_Processing+0x6c0>
 80117de:	b139      	cbz	r1, 80117f0 <GUI_Touch_Processing+0x6c0>
					Measure_Field ^= PPFD;
 80117e0:	4b7e      	ldr	r3, [pc, #504]	; (80119dc <GUI_Touch_Processing+0x8ac>)
 80117e2:	881a      	ldrh	r2, [r3, #0]
 80117e4:	f082 0204 	eor.w	r2, r2, #4
 80117e8:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 80117ea:	f002 0204 	and.w	r2, r2, #4
 80117ee:	e390      	b.n	8011f12 <GUI_Touch_Processing+0xde2>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) ) //PPFD_BGR
 80117f0:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 80117f4:	2d36      	cmp	r5, #54	; 0x36
 80117f6:	d80e      	bhi.n	8011816 <GUI_Touch_Processing+0x6e6>
 80117f8:	b169      	cbz	r1, 8011816 <GUI_Touch_Processing+0x6e6>
					Measure_Field ^= PPFD_BGR;
 80117fa:	4b78      	ldr	r3, [pc, #480]	; (80119dc <GUI_Touch_Processing+0x8ac>)
 80117fc:	881a      	ldrh	r2, [r3, #0]
 80117fe:	f082 0208 	eor.w	r2, r2, #8
 8011802:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 8011804:	21c6      	movs	r1, #198	; 0xc6
 8011806:	f002 0208 	and.w	r2, r2, #8
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 801180a:	20c8      	movs	r0, #200	; 0xc8
}
 801180c:	b002      	add	sp, #8
 801180e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8011812:	f001 bce9 	b.w	80131e8 <GUI_CheckBox>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) ) //CCT
 8011816:	f46f 7683 	mvn.w	r6, #262	; 0x106
 801181a:	199d      	adds	r5, r3, r6
 801181c:	2d36      	cmp	r5, #54	; 0x36
 801181e:	d80a      	bhi.n	8011836 <GUI_Touch_Processing+0x706>
 8011820:	b149      	cbz	r1, 8011836 <GUI_Touch_Processing+0x706>
					Measure_Field ^= CCT;
 8011822:	4b6e      	ldr	r3, [pc, #440]	; (80119dc <GUI_Touch_Processing+0x8ac>)
 8011824:	881a      	ldrh	r2, [r3, #0]
 8011826:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 801182a:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 263, Measure_Field&CCT);
 801182c:	f240 1107 	movw	r1, #263	; 0x107
 8011830:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011834:	e7e9      	b.n	801180a <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E
 8011836:	f46f 75a3 	mvn.w	r5, #326	; 0x146
 801183a:	442b      	add	r3, r5
 801183c:	2b36      	cmp	r3, #54	; 0x36
 801183e:	bf8c      	ite	hi
 8011840:	2300      	movhi	r3, #0
 8011842:	2301      	movls	r3, #1
 8011844:	b1c1      	cbz	r1, 8011878 <GUI_Touch_Processing+0x748>
 8011846:	b1bb      	cbz	r3, 8011878 <GUI_Touch_Processing+0x748>
					Measure_Field ^= delta_E;
 8011848:	4c64      	ldr	r4, [pc, #400]	; (80119dc <GUI_Touch_Processing+0x8ac>)
 801184a:	8822      	ldrh	r2, [r4, #0]
 801184c:	f482 6200 	eor.w	r2, r2, #2048	; 0x800
 8011850:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 327, Measure_Field&delta_E);
 8011852:	f240 1147 	movw	r1, #327	; 0x147
 8011856:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801185a:	20c8      	movs	r0, #200	; 0xc8
 801185c:	f001 fcc4 	bl	80131e8 <GUI_CheckBox>
					GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 8011860:	8822      	ldrh	r2, [r4, #0]
 8011862:	2300      	movs	r3, #0
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8011864:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011868:	f240 1147 	movw	r1, #327	; 0x147
 801186c:	2082      	movs	r0, #130	; 0x82
}
 801186e:	b002      	add	sp, #8
 8011870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8011874:	f001 bb98 	b.w	8012fa8 <GUI_Button_Measure_deltaE_Small>
				else	if(Touch_x >= 130 & Touch_x <= (200+38) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E_measure_small
 8011878:	f1a2 0182 	sub.w	r1, r2, #130	; 0x82
 801187c:	296c      	cmp	r1, #108	; 0x6c
 801187e:	d81b      	bhi.n	80118b8 <GUI_Touch_Processing+0x788>
 8011880:	b1d3      	cbz	r3, 80118b8 <GUI_Touch_Processing+0x788>
					if(Measure_Field&delta_E)
 8011882:	4c56      	ldr	r4, [pc, #344]	; (80119dc <GUI_Touch_Processing+0x8ac>)
 8011884:	8823      	ldrh	r3, [r4, #0]
 8011886:	051b      	lsls	r3, r3, #20
 8011888:	f57f acfd 	bpl.w	8011286 <GUI_Touch_Processing+0x156>
						Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801188c:	4b54      	ldr	r3, [pc, #336]	; (80119e0 <GUI_Touch_Processing+0x8b0>)
 801188e:	4855      	ldr	r0, [pc, #340]	; (80119e4 <GUI_Touch_Processing+0x8b4>)
 8011890:	7819      	ldrb	r1, [r3, #0]
 8011892:	4b55      	ldr	r3, [pc, #340]	; (80119e8 <GUI_Touch_Processing+0x8b8>)
 8011894:	781a      	ldrb	r2, [r3, #0]
 8011896:	4b55      	ldr	r3, [pc, #340]	; (80119ec <GUI_Touch_Processing+0x8bc>)
 8011898:	2900      	cmp	r1, #0
 801189a:	bf08      	it	eq
 801189c:	4618      	moveq	r0, r3
 801189e:	f7fd f97f 	bl	800eba0 <Calculate_Lab>
						colorimetry_LAB_mem[0] = colorimetry_LAB[0];
 80118a2:	4a53      	ldr	r2, [pc, #332]	; (80119f0 <GUI_Touch_Processing+0x8c0>)
 80118a4:	4b53      	ldr	r3, [pc, #332]	; (80119f4 <GUI_Touch_Processing+0x8c4>)
 80118a6:	8811      	ldrh	r1, [r2, #0]
 80118a8:	8019      	strh	r1, [r3, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 80118aa:	8851      	ldrh	r1, [r2, #2]
						colorimetry_LAB_mem[2] = colorimetry_LAB[2];
 80118ac:	8892      	ldrh	r2, [r2, #4]
 80118ae:	809a      	strh	r2, [r3, #4]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 80118b0:	8059      	strh	r1, [r3, #2]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 80118b2:	8822      	ldrh	r2, [r4, #0]
 80118b4:	2301      	movs	r3, #1
 80118b6:	e7d5      	b.n	8011864 <GUI_Touch_Processing+0x734>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 80118b8:	1e53      	subs	r3, r2, #1
 80118ba:	2b36      	cmp	r3, #54	; 0x36
 80118bc:	d81d      	bhi.n	80118fa <GUI_Touch_Processing+0x7ca>
 80118be:	b1e0      	cbz	r0, 80118fa <GUI_Touch_Processing+0x7ca>
					WriteSDFLASH_t(sdfile_cnt);
 80118c0:	4b4d      	ldr	r3, [pc, #308]	; (80119f8 <GUI_Touch_Processing+0x8c8>)
 80118c2:	2100      	movs	r1, #0
 80118c4:	8818      	ldrh	r0, [r3, #0]
 80118c6:	f008 fc77 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80118ca:	4b4c      	ldr	r3, [pc, #304]	; (80119fc <GUI_Touch_Processing+0x8cc>)
 80118cc:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80118ce:	1e5a      	subs	r2, r3, #1
 80118d0:	2a05      	cmp	r2, #5
 80118d2:	d804      	bhi.n	80118de <GUI_Touch_Processing+0x7ae>
 80118d4:	e8df f002 	tbb	[pc, r2]
 80118d8:	08030305 	.word	0x08030305
 80118dc:	0b0e      	.short	0x0b0e
					GUI_screen_state = Prev_Inf_Screen;
 80118de:	7023      	strb	r3, [r4, #0]
 80118e0:	e4d1      	b.n	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80118e2:	2301      	movs	r3, #1
 80118e4:	7023      	strb	r3, [r4, #0]
 80118e6:	e4ce      	b.n	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80118e8:	2304      	movs	r3, #4
 80118ea:	7023      	strb	r3, [r4, #0]
 80118ec:	e4cb      	b.n	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80118ee:	2306      	movs	r3, #6
 80118f0:	7023      	strb	r3, [r4, #0]
 80118f2:	e4c8      	b.n	8011286 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80118f4:	2305      	movs	r3, #5
 80118f6:	7023      	strb	r3, [r4, #0]
 80118f8:	e4c5      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 80118fa:	f1a2 03d9 	sub.w	r3, r2, #217	; 0xd9
 80118fe:	2b36      	cmp	r3, #54	; 0x36
 8011900:	d802      	bhi.n	8011908 <GUI_Touch_Processing+0x7d8>
 8011902:	2800      	cmp	r0, #0
 8011904:	f47f af2c 	bne.w	8011760 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011908:	3a37      	subs	r2, #55	; 0x37
 801190a:	2a36      	cmp	r2, #54	; 0x36
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 801190c:	f63f acbb 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
 8011910:	2800      	cmp	r0, #0
 8011912:	f47f acc0 	bne.w	8011296 <GUI_Touch_Processing+0x166>
 8011916:	e4b6      	b.n	8011286 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011918:	4b2d      	ldr	r3, [pc, #180]	; (80119d0 <GUI_Touch_Processing+0x8a0>)
 801191a:	2209      	movs	r2, #9
 801191c:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )// down
 801191e:	4b2d      	ldr	r3, [pc, #180]	; (80119d4 <GUI_Touch_Processing+0x8a4>)
 8011920:	8819      	ldrh	r1, [r3, #0]
 8011922:	4b2d      	ldr	r3, [pc, #180]	; (80119d8 <GUI_Touch_Processing+0x8a8>)
 8011924:	881b      	ldrh	r3, [r3, #0]
 8011926:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 801192a:	2836      	cmp	r0, #54	; 0x36
 801192c:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 8011930:	bf8c      	ite	hi
 8011932:	2000      	movhi	r0, #0
 8011934:	2001      	movls	r0, #1
 8011936:	2a36      	cmp	r2, #54	; 0x36
 8011938:	d803      	bhi.n	8011942 <GUI_Touch_Processing+0x812>
 801193a:	b110      	cbz	r0, 8011942 <GUI_Touch_Processing+0x812>
					GUI_screen_state = DataSet4_Screen;
 801193c:	230a      	movs	r3, #10
 801193e:	7023      	strb	r3, [r4, #0]
 8011940:	e4a1      	b.n	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //CIE_XYZ
 8011942:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 8011946:	2a36      	cmp	r2, #54	; 0x36
 8011948:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 801194c:	bf8c      	ite	hi
 801194e:	2200      	movhi	r2, #0
 8011950:	2201      	movls	r2, #1
 8011952:	2d36      	cmp	r5, #54	; 0x36
 8011954:	d809      	bhi.n	801196a <GUI_Touch_Processing+0x83a>
 8011956:	b142      	cbz	r2, 801196a <GUI_Touch_Processing+0x83a>
					Measure_Field ^= CIE_XYZ;
 8011958:	4b20      	ldr	r3, [pc, #128]	; (80119dc <GUI_Touch_Processing+0x8ac>)
 801195a:	881a      	ldrh	r2, [r3, #0]
 801195c:	f082 0210 	eor.w	r2, r2, #16
 8011960:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 8011962:	f002 0210 	and.w	r2, r2, #16
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8011966:	2146      	movs	r1, #70	; 0x46
 8011968:	e74f      	b.n	801180a <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //CIE_xy
 801196a:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 801196e:	2d36      	cmp	r5, #54	; 0x36
 8011970:	d846      	bhi.n	8011a00 <GUI_Touch_Processing+0x8d0>
 8011972:	2a00      	cmp	r2, #0
 8011974:	d044      	beq.n	8011a00 <GUI_Touch_Processing+0x8d0>
					Measure_Field ^= CIE_xy;
 8011976:	4c19      	ldr	r4, [pc, #100]	; (80119dc <GUI_Touch_Processing+0x8ac>)
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8011978:	4d19      	ldr	r5, [pc, #100]	; (80119e0 <GUI_Touch_Processing+0x8b0>)
					Measure_Field ^= CIE_xy;
 801197a:	8822      	ldrh	r2, [r4, #0]
 801197c:	f082 0220 	eor.w	r2, r2, #32
 8011980:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 8011982:	2185      	movs	r1, #133	; 0x85
 8011984:	f002 0220 	and.w	r2, r2, #32
 8011988:	20c8      	movs	r0, #200	; 0xc8
 801198a:	f001 fc2d 	bl	80131e8 <GUI_CheckBox>
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 801198e:	8823      	ldrh	r3, [r4, #0]
 8011990:	782a      	ldrb	r2, [r5, #0]
 8011992:	f003 0320 	and.w	r3, r3, #32
 8011996:	f002 0201 	and.w	r2, r2, #1
 801199a:	21c6      	movs	r1, #198	; 0xc6
 801199c:	20c8      	movs	r0, #200	; 0xc8
 801199e:	f001 fc64 	bl	801326a <GUI_RadioBox>
					GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 80119a2:	782a      	ldrb	r2, [r5, #0]
 80119a4:	8823      	ldrh	r3, [r4, #0]
 80119a6:	43d2      	mvns	r2, r2
 80119a8:	f003 0320 	and.w	r3, r3, #32
 80119ac:	f002 0201 	and.w	r2, r2, #1
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 80119b0:	f240 1107 	movw	r1, #263	; 0x107
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 80119b4:	20c8      	movs	r0, #200	; 0xc8
}
 80119b6:	b002      	add	sp, #8
 80119b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 80119bc:	f001 bc55 	b.w	801326a <GUI_RadioBox>
 80119c0:	20005703 	.word	0x20005703
 80119c4:	20000ebe 	.word	0x20000ebe
 80119c8:	200957b4 	.word	0x200957b4
 80119cc:	48001400 	.word	0x48001400
 80119d0:	2000022a 	.word	0x2000022a
 80119d4:	20054942 	.word	0x20054942
 80119d8:	20054944 	.word	0x20054944
 80119dc:	20005706 	.word	0x20005706
 80119e0:	20005704 	.word	0x20005704
 80119e4:	2008f522 	.word	0x2008f522
 80119e8:	20090ab9 	.word	0x20090ab9
 80119ec:	2008f528 	.word	0x2008f528
 80119f0:	2008f51c 	.word	0x2008f51c
 80119f4:	20091048 	.word	0x20091048
 80119f8:	2000572e 	.word	0x2000572e
 80119fc:	20090ab5 	.word	0x20090ab5
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //CIE_Luv
 8011a00:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 8011a04:	eb03 050c 	add.w	r5, r3, ip
 8011a08:	2d36      	cmp	r5, #54	; 0x36
 8011a0a:	d80a      	bhi.n	8011a22 <GUI_Touch_Processing+0x8f2>
 8011a0c:	b14a      	cbz	r2, 8011a22 <GUI_Touch_Processing+0x8f2>
					Measure_Field ^= CIE_Luv;
 8011a0e:	4ba8      	ldr	r3, [pc, #672]	; (8011cb0 <GUI_Touch_Processing+0xb80>)
 8011a10:	881a      	ldrh	r2, [r3, #0]
 8011a12:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8011a16:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 8011a18:	f002 0240 	and.w	r2, r2, #64	; 0x40
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 8011a1c:	f240 1147 	movw	r1, #327	; 0x147
 8011a20:	e6f3      	b.n	801180a <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) && (Measure_Field&CIE_xy)) //CIE_xy_1931
 8011a22:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 8011a26:	2d36      	cmp	r5, #54	; 0x36
 8011a28:	d817      	bhi.n	8011a5a <GUI_Touch_Processing+0x92a>
 8011a2a:	b1b2      	cbz	r2, 8011a5a <GUI_Touch_Processing+0x92a>
 8011a2c:	4da0      	ldr	r5, [pc, #640]	; (8011cb0 <GUI_Touch_Processing+0xb80>)
 8011a2e:	882d      	ldrh	r5, [r5, #0]
 8011a30:	06af      	lsls	r7, r5, #26
 8011a32:	d512      	bpl.n	8011a5a <GUI_Touch_Processing+0x92a>
					if(!(Measure_Color_xy&CIE_xy_1931_1964)){
 8011a34:	4c9f      	ldr	r4, [pc, #636]	; (8011cb4 <GUI_Touch_Processing+0xb84>)
 8011a36:	7822      	ldrb	r2, [r4, #0]
 8011a38:	07d6      	lsls	r6, r2, #31
 8011a3a:	f53f ac24 	bmi.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8011a3e:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 8011a40:	f082 0201 	eor.w	r2, r2, #1
 8011a44:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8011a46:	21c6      	movs	r1, #198	; 0xc6
 8011a48:	401a      	ands	r2, r3
 8011a4a:	20c8      	movs	r0, #200	; 0xc8
 8011a4c:	f001 fc0d 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8011a50:	7822      	ldrb	r2, [r4, #0]
 8011a52:	2301      	movs	r3, #1
 8011a54:	43d2      	mvns	r2, r2
 8011a56:	401a      	ands	r2, r3
 8011a58:	e7aa      	b.n	80119b0 <GUI_Touch_Processing+0x880>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) && (Measure_Field&CIE_xy)) //CIE_xy_1964
 8011a5a:	f46f 7583 	mvn.w	r5, #262	; 0x106
 8011a5e:	442b      	add	r3, r5
 8011a60:	2b36      	cmp	r3, #54	; 0x36
 8011a62:	d80a      	bhi.n	8011a7a <GUI_Touch_Processing+0x94a>
 8011a64:	b14a      	cbz	r2, 8011a7a <GUI_Touch_Processing+0x94a>
 8011a66:	4b92      	ldr	r3, [pc, #584]	; (8011cb0 <GUI_Touch_Processing+0xb80>)
 8011a68:	881b      	ldrh	r3, [r3, #0]
 8011a6a:	069b      	lsls	r3, r3, #26
 8011a6c:	d505      	bpl.n	8011a7a <GUI_Touch_Processing+0x94a>
					if((Measure_Color_xy&CIE_xy_1931_1964)){
 8011a6e:	4c91      	ldr	r4, [pc, #580]	; (8011cb4 <GUI_Touch_Processing+0xb84>)
 8011a70:	7822      	ldrb	r2, [r4, #0]
 8011a72:	07d7      	lsls	r7, r2, #31
 8011a74:	f57f ac07 	bpl.w	8011286 <GUI_Touch_Processing+0x156>
 8011a78:	e7e1      	b.n	8011a3e <GUI_Touch_Processing+0x90e>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 8011a7a:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 8011a7e:	2b36      	cmp	r3, #54	; 0x36
 8011a80:	d802      	bhi.n	8011a88 <GUI_Touch_Processing+0x958>
 8011a82:	2800      	cmp	r0, #0
 8011a84:	f47f ae6c 	bne.w	8011760 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 8011a88:	1e4b      	subs	r3, r1, #1
 8011a8a:	2b36      	cmp	r3, #54	; 0x36
 8011a8c:	f200 820a 	bhi.w	8011ea4 <GUI_Touch_Processing+0xd74>
 8011a90:	2800      	cmp	r0, #0
 8011a92:	f000 8207 	beq.w	8011ea4 <GUI_Touch_Processing+0xd74>
					WriteSDFLASH_t(sdfile_cnt);
 8011a96:	4b88      	ldr	r3, [pc, #544]	; (8011cb8 <GUI_Touch_Processing+0xb88>)
 8011a98:	2100      	movs	r1, #0
 8011a9a:	8818      	ldrh	r0, [r3, #0]
 8011a9c:	f008 fb8c 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011aa0:	4b86      	ldr	r3, [pc, #536]	; (8011cbc <GUI_Touch_Processing+0xb8c>)
 8011aa2:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011aa4:	1e5a      	subs	r2, r3, #1
 8011aa6:	2a05      	cmp	r2, #5
 8011aa8:	d804      	bhi.n	8011ab4 <GUI_Touch_Processing+0x984>
 8011aaa:	e8df f002 	tbb	[pc, r2]
 8011aae:	0306      	.short	0x0306
 8011ab0:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8011ab4:	7023      	strb	r3, [r4, #0]
 8011ab6:	f7ff bbe6 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011aba:	2301      	movs	r3, #1
 8011abc:	7023      	strb	r3, [r4, #0]
 8011abe:	f7ff bbe2 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011ac2:	2304      	movs	r3, #4
 8011ac4:	7023      	strb	r3, [r4, #0]
 8011ac6:	f7ff bbde 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011aca:	2306      	movs	r3, #6
 8011acc:	7023      	strb	r3, [r4, #0]
 8011ace:	f7ff bbda 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011ad2:	2305      	movs	r3, #5
 8011ad4:	7023      	strb	r3, [r4, #0]
 8011ad6:	f7ff bbd6 	b.w	8011286 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011ada:	4b79      	ldr	r3, [pc, #484]	; (8011cc0 <GUI_Touch_Processing+0xb90>)
 8011adc:	220a      	movs	r2, #10
 8011ade:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //down
 8011ae0:	4b78      	ldr	r3, [pc, #480]	; (8011cc4 <GUI_Touch_Processing+0xb94>)
 8011ae2:	8819      	ldrh	r1, [r3, #0]
 8011ae4:	4b78      	ldr	r3, [pc, #480]	; (8011cc8 <GUI_Touch_Processing+0xb98>)
 8011ae6:	881b      	ldrh	r3, [r3, #0]
 8011ae8:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011aec:	2836      	cmp	r0, #54	; 0x36
 8011aee:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 8011af2:	bf8c      	ite	hi
 8011af4:	2000      	movhi	r0, #0
 8011af6:	2001      	movls	r0, #1
 8011af8:	2a36      	cmp	r2, #54	; 0x36
 8011afa:	d804      	bhi.n	8011b06 <GUI_Touch_Processing+0x9d6>
 8011afc:	b118      	cbz	r0, 8011b06 <GUI_Touch_Processing+0x9d6>
					GUI_screen_state = DataSet5_Screen;
 8011afe:	230b      	movs	r3, #11
 8011b00:	7023      	strb	r3, [r4, #0]
 8011b02:	f7ff bbc0 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=65 & Touch_y <=(65+54) ) //CIE_Lab
 8011b06:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 8011b0a:	2a36      	cmp	r2, #54	; 0x36
 8011b0c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 8011b10:	bf8c      	ite	hi
 8011b12:	2200      	movhi	r2, #0
 8011b14:	2201      	movls	r2, #1
 8011b16:	2d36      	cmp	r5, #54	; 0x36
 8011b18:	d848      	bhi.n	8011bac <GUI_Touch_Processing+0xa7c>
 8011b1a:	2a00      	cmp	r2, #0
 8011b1c:	d046      	beq.n	8011bac <GUI_Touch_Processing+0xa7c>
					Measure_Field ^= CIE_Lab;
 8011b1e:	4c64      	ldr	r4, [pc, #400]	; (8011cb0 <GUI_Touch_Processing+0xb80>)
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8011b20:	4d6a      	ldr	r5, [pc, #424]	; (8011ccc <GUI_Touch_Processing+0xb9c>)
					Measure_Field ^= CIE_Lab;
 8011b22:	8822      	ldrh	r2, [r4, #0]
 8011b24:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8011b28:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 8011b2a:	2141      	movs	r1, #65	; 0x41
 8011b2c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011b30:	20c8      	movs	r0, #200	; 0xc8
 8011b32:	f001 fb59 	bl	80131e8 <GUI_CheckBox>
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8011b36:	8823      	ldrh	r3, [r4, #0]
 8011b38:	782a      	ldrb	r2, [r5, #0]
 8011b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b3e:	f002 0201 	and.w	r2, r2, #1
 8011b42:	216c      	movs	r1, #108	; 0x6c
 8011b44:	20c8      	movs	r0, #200	; 0xc8
 8011b46:	f001 fb90 	bl	801326a <GUI_RadioBox>
					GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 8011b4a:	8823      	ldrh	r3, [r4, #0]
 8011b4c:	782a      	ldrb	r2, [r5, #0]
 8011b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b52:	f002 0202 	and.w	r2, r2, #2
 8011b56:	218f      	movs	r1, #143	; 0x8f
 8011b58:	20c8      	movs	r0, #200	; 0xc8
 8011b5a:	f001 fb86 	bl	801326a <GUI_RadioBox>
					GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 8011b5e:	8823      	ldrh	r3, [r4, #0]
 8011b60:	782a      	ldrb	r2, [r5, #0]
 8011b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b66:	f002 0204 	and.w	r2, r2, #4
 8011b6a:	21b2      	movs	r1, #178	; 0xb2
 8011b6c:	20c8      	movs	r0, #200	; 0xc8
 8011b6e:	f001 fb7c 	bl	801326a <GUI_RadioBox>
					GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 8011b72:	8823      	ldrh	r3, [r4, #0]
 8011b74:	782a      	ldrb	r2, [r5, #0]
 8011b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b7a:	f002 0208 	and.w	r2, r2, #8
 8011b7e:	21d5      	movs	r1, #213	; 0xd5
 8011b80:	20c8      	movs	r0, #200	; 0xc8
 8011b82:	f001 fb72 	bl	801326a <GUI_RadioBox>
					GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 8011b86:	8823      	ldrh	r3, [r4, #0]
 8011b88:	782a      	ldrb	r2, [r5, #0]
 8011b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b8e:	f002 0210 	and.w	r2, r2, #16
 8011b92:	21f8      	movs	r1, #248	; 0xf8
 8011b94:	20c8      	movs	r0, #200	; 0xc8
 8011b96:	f001 fb68 	bl	801326a <GUI_RadioBox>
					GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 8011b9a:	8823      	ldrh	r3, [r4, #0]
 8011b9c:	782a      	ldrb	r2, [r5, #0]
 8011b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011ba2:	f002 0220 	and.w	r2, r2, #32
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 8011ba6:	f240 111b 	movw	r1, #283	; 0x11b
 8011baa:	e703      	b.n	80119b4 <GUI_Touch_Processing+0x884>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=345 & Touch_y <=(345+54) ) //EbEr
 8011bac:	f46f 76ac 	mvn.w	r6, #344	; 0x158
 8011bb0:	199d      	adds	r5, r3, r6
 8011bb2:	2d36      	cmp	r5, #54	; 0x36
 8011bb4:	d80a      	bhi.n	8011bcc <GUI_Touch_Processing+0xa9c>
 8011bb6:	b14a      	cbz	r2, 8011bcc <GUI_Touch_Processing+0xa9c>
					Measure_Field ^= EbEr;
 8011bb8:	4b3d      	ldr	r3, [pc, #244]	; (8011cb0 <GUI_Touch_Processing+0xb80>)
 8011bba:	881a      	ldrh	r2, [r3, #0]
 8011bbc:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8011bc0:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 345, Measure_Field&EbEr);
 8011bc2:	f240 1159 	movw	r1, #345	; 0x159
 8011bc6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8011bca:	e61e      	b.n	801180a <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=108 & Touch_y <=(108+54) && (Measure_Field&CIE_Lab)) //Source_A
 8011bcc:	f1a3 056c 	sub.w	r5, r3, #108	; 0x6c
 8011bd0:	2d36      	cmp	r5, #54	; 0x36
 8011bd2:	d834      	bhi.n	8011c3e <GUI_Touch_Processing+0xb0e>
 8011bd4:	b39a      	cbz	r2, 8011c3e <GUI_Touch_Processing+0xb0e>
 8011bd6:	4d36      	ldr	r5, [pc, #216]	; (8011cb0 <GUI_Touch_Processing+0xb80>)
 8011bd8:	882d      	ldrh	r5, [r5, #0]
 8011bda:	062d      	lsls	r5, r5, #24
 8011bdc:	d52f      	bpl.n	8011c3e <GUI_Touch_Processing+0xb0e>
					if(!(Source_Type&Source_A))
 8011bde:	4d3b      	ldr	r5, [pc, #236]	; (8011ccc <GUI_Touch_Processing+0xb9c>)
 8011be0:	782b      	ldrb	r3, [r5, #0]
 8011be2:	07df      	lsls	r7, r3, #31
 8011be4:	f53f ab4f 	bmi.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type|=Source_A, 0x01);
 8011be8:	2401      	movs	r4, #1
 8011bea:	4623      	mov	r3, r4
 8011bec:	4622      	mov	r2, r4
 8011bee:	216c      	movs	r1, #108	; 0x6c
 8011bf0:	20c8      	movs	r0, #200	; 0xc8
 8011bf2:	702c      	strb	r4, [r5, #0]
 8011bf4:	f001 fb39 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011bf8:	782a      	ldrb	r2, [r5, #0]
 8011bfa:	4623      	mov	r3, r4
 8011bfc:	f002 0202 	and.w	r2, r2, #2
 8011c00:	218f      	movs	r1, #143	; 0x8f
 8011c02:	20c8      	movs	r0, #200	; 0xc8
 8011c04:	f001 fb31 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011c08:	782a      	ldrb	r2, [r5, #0]
 8011c0a:	4623      	mov	r3, r4
 8011c0c:	f002 0204 	and.w	r2, r2, #4
 8011c10:	21b2      	movs	r1, #178	; 0xb2
 8011c12:	20c8      	movs	r0, #200	; 0xc8
 8011c14:	f001 fb29 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011c18:	782a      	ldrb	r2, [r5, #0]
 8011c1a:	4623      	mov	r3, r4
 8011c1c:	f002 0208 	and.w	r2, r2, #8
 8011c20:	21d5      	movs	r1, #213	; 0xd5
 8011c22:	20c8      	movs	r0, #200	; 0xc8
 8011c24:	f001 fb21 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011c28:	782a      	ldrb	r2, [r5, #0]
 8011c2a:	4623      	mov	r3, r4
 8011c2c:	f002 0210 	and.w	r2, r2, #16
 8011c30:	21f8      	movs	r1, #248	; 0xf8
 8011c32:	20c8      	movs	r0, #200	; 0xc8
 8011c34:	f001 fb19 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011c38:	782a      	ldrb	r2, [r5, #0]
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	e7b1      	b.n	8011ba2 <GUI_Touch_Processing+0xa72>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=143  & Touch_y <=(143+54)  && (Measure_Field&CIE_Lab)) //Source_D65
 8011c3e:	f1a3 058f 	sub.w	r5, r3, #143	; 0x8f
 8011c42:	2d36      	cmp	r5, #54	; 0x36
 8011c44:	d844      	bhi.n	8011cd0 <GUI_Touch_Processing+0xba0>
 8011c46:	2a00      	cmp	r2, #0
 8011c48:	d042      	beq.n	8011cd0 <GUI_Touch_Processing+0xba0>
 8011c4a:	4d19      	ldr	r5, [pc, #100]	; (8011cb0 <GUI_Touch_Processing+0xb80>)
 8011c4c:	882d      	ldrh	r5, [r5, #0]
 8011c4e:	062e      	lsls	r6, r5, #24
 8011c50:	d53e      	bpl.n	8011cd0 <GUI_Touch_Processing+0xba0>
					if(!(Source_Type&Source_D65))
 8011c52:	4c1e      	ldr	r4, [pc, #120]	; (8011ccc <GUI_Touch_Processing+0xb9c>)
 8011c54:	7822      	ldrb	r2, [r4, #0]
 8011c56:	f012 0202 	ands.w	r2, r2, #2
 8011c5a:	f47f ab14 	bne.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011c5e:	2301      	movs	r3, #1
 8011c60:	216c      	movs	r1, #108	; 0x6c
 8011c62:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011c64:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011c66:	f001 fb00 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type|=Source_D65, 0x01);
 8011c6a:	7822      	ldrb	r2, [r4, #0]
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	f042 0202 	orr.w	r2, r2, #2
 8011c72:	218f      	movs	r1, #143	; 0x8f
 8011c74:	20c8      	movs	r0, #200	; 0xc8
 8011c76:	7022      	strb	r2, [r4, #0]
 8011c78:	f001 faf7 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011c7c:	7822      	ldrb	r2, [r4, #0]
 8011c7e:	2301      	movs	r3, #1
 8011c80:	f002 0204 	and.w	r2, r2, #4
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8011c84:	21b2      	movs	r1, #178	; 0xb2
 8011c86:	20c8      	movs	r0, #200	; 0xc8
 8011c88:	f001 faef 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011c8c:	7822      	ldrb	r2, [r4, #0]
 8011c8e:	2301      	movs	r3, #1
 8011c90:	f002 0208 	and.w	r2, r2, #8
 8011c94:	21d5      	movs	r1, #213	; 0xd5
 8011c96:	20c8      	movs	r0, #200	; 0xc8
 8011c98:	f001 fae7 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011c9c:	7822      	ldrb	r2, [r4, #0]
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	f002 0210 	and.w	r2, r2, #16
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8011ca4:	21f8      	movs	r1, #248	; 0xf8
 8011ca6:	20c8      	movs	r0, #200	; 0xc8
 8011ca8:	f001 fadf 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011cac:	7822      	ldrb	r2, [r4, #0]
 8011cae:	e7c4      	b.n	8011c3a <GUI_Touch_Processing+0xb0a>
 8011cb0:	20005706 	.word	0x20005706
 8011cb4:	20005704 	.word	0x20005704
 8011cb8:	2000572e 	.word	0x2000572e
 8011cbc:	20090ab5 	.word	0x20090ab5
 8011cc0:	2000022a 	.word	0x2000022a
 8011cc4:	20054942 	.word	0x20054942
 8011cc8:	20054944 	.word	0x20054944
 8011ccc:	20090ab9 	.word	0x20090ab9
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=178  & Touch_y <=(178+54)  && (Measure_Field&CIE_Lab)) //Source_C
 8011cd0:	f1a3 05b2 	sub.w	r5, r3, #178	; 0xb2
 8011cd4:	2d36      	cmp	r5, #54	; 0x36
 8011cd6:	d81e      	bhi.n	8011d16 <GUI_Touch_Processing+0xbe6>
 8011cd8:	b1ea      	cbz	r2, 8011d16 <GUI_Touch_Processing+0xbe6>
 8011cda:	4db2      	ldr	r5, [pc, #712]	; (8011fa4 <GUI_Touch_Processing+0xe74>)
 8011cdc:	882d      	ldrh	r5, [r5, #0]
 8011cde:	062d      	lsls	r5, r5, #24
 8011ce0:	d519      	bpl.n	8011d16 <GUI_Touch_Processing+0xbe6>
					if(!(Source_Type&Source_C))
 8011ce2:	4cb1      	ldr	r4, [pc, #708]	; (8011fa8 <GUI_Touch_Processing+0xe78>)
 8011ce4:	7822      	ldrb	r2, [r4, #0]
 8011ce6:	f012 0204 	ands.w	r2, r2, #4
 8011cea:	f47f aacc 	bne.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011cee:	2301      	movs	r3, #1
 8011cf0:	216c      	movs	r1, #108	; 0x6c
 8011cf2:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011cf4:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011cf6:	f001 fab8 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011cfa:	7822      	ldrb	r2, [r4, #0]
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	f002 0202 	and.w	r2, r2, #2
 8011d02:	218f      	movs	r1, #143	; 0x8f
 8011d04:	20c8      	movs	r0, #200	; 0xc8
 8011d06:	f001 fab0 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8011d0a:	7822      	ldrb	r2, [r4, #0]
 8011d0c:	f042 0204 	orr.w	r2, r2, #4
 8011d10:	7022      	strb	r2, [r4, #0]
 8011d12:	2301      	movs	r3, #1
 8011d14:	e7b6      	b.n	8011c84 <GUI_Touch_Processing+0xb54>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=213  & Touch_y <=(213+54)  && (Measure_Field&CIE_Lab)) //Source_D50
 8011d16:	f1a3 05d5 	sub.w	r5, r3, #213	; 0xd5
 8011d1a:	2d36      	cmp	r5, #54	; 0x36
 8011d1c:	d826      	bhi.n	8011d6c <GUI_Touch_Processing+0xc3c>
 8011d1e:	b32a      	cbz	r2, 8011d6c <GUI_Touch_Processing+0xc3c>
 8011d20:	4da0      	ldr	r5, [pc, #640]	; (8011fa4 <GUI_Touch_Processing+0xe74>)
 8011d22:	882d      	ldrh	r5, [r5, #0]
 8011d24:	062f      	lsls	r7, r5, #24
 8011d26:	d521      	bpl.n	8011d6c <GUI_Touch_Processing+0xc3c>
					if(!(Source_Type&Source_D50))
 8011d28:	4c9f      	ldr	r4, [pc, #636]	; (8011fa8 <GUI_Touch_Processing+0xe78>)
 8011d2a:	7822      	ldrb	r2, [r4, #0]
 8011d2c:	f012 0208 	ands.w	r2, r2, #8
 8011d30:	f47f aaa9 	bne.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011d34:	2301      	movs	r3, #1
 8011d36:	216c      	movs	r1, #108	; 0x6c
 8011d38:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011d3a:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011d3c:	f001 fa95 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011d40:	7822      	ldrb	r2, [r4, #0]
 8011d42:	2301      	movs	r3, #1
 8011d44:	f002 0202 	and.w	r2, r2, #2
 8011d48:	218f      	movs	r1, #143	; 0x8f
 8011d4a:	20c8      	movs	r0, #200	; 0xc8
 8011d4c:	f001 fa8d 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011d50:	7822      	ldrb	r2, [r4, #0]
 8011d52:	2301      	movs	r3, #1
 8011d54:	f002 0204 	and.w	r2, r2, #4
 8011d58:	21b2      	movs	r1, #178	; 0xb2
 8011d5a:	20c8      	movs	r0, #200	; 0xc8
 8011d5c:	f001 fa85 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type|=Source_D50, 0x01);
 8011d60:	7822      	ldrb	r2, [r4, #0]
 8011d62:	f042 0208 	orr.w	r2, r2, #8
 8011d66:	7022      	strb	r2, [r4, #0]
 8011d68:	2301      	movs	r3, #1
 8011d6a:	e793      	b.n	8011c94 <GUI_Touch_Processing+0xb64>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=248  & Touch_y <=(248+54)  && (Measure_Field&CIE_Lab)) //Source_D55
 8011d6c:	f1a3 05f8 	sub.w	r5, r3, #248	; 0xf8
 8011d70:	2d36      	cmp	r5, #54	; 0x36
 8011d72:	d82e      	bhi.n	8011dd2 <GUI_Touch_Processing+0xca2>
 8011d74:	b36a      	cbz	r2, 8011dd2 <GUI_Touch_Processing+0xca2>
 8011d76:	4d8b      	ldr	r5, [pc, #556]	; (8011fa4 <GUI_Touch_Processing+0xe74>)
 8011d78:	882d      	ldrh	r5, [r5, #0]
 8011d7a:	062e      	lsls	r6, r5, #24
 8011d7c:	d529      	bpl.n	8011dd2 <GUI_Touch_Processing+0xca2>
					if(!(Source_Type&Source_D55))
 8011d7e:	4c8a      	ldr	r4, [pc, #552]	; (8011fa8 <GUI_Touch_Processing+0xe78>)
 8011d80:	7822      	ldrb	r2, [r4, #0]
 8011d82:	f012 0210 	ands.w	r2, r2, #16
 8011d86:	f47f aa7e 	bne.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	216c      	movs	r1, #108	; 0x6c
 8011d8e:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011d90:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011d92:	f001 fa6a 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011d96:	7822      	ldrb	r2, [r4, #0]
 8011d98:	2301      	movs	r3, #1
 8011d9a:	f002 0202 	and.w	r2, r2, #2
 8011d9e:	218f      	movs	r1, #143	; 0x8f
 8011da0:	20c8      	movs	r0, #200	; 0xc8
 8011da2:	f001 fa62 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011da6:	7822      	ldrb	r2, [r4, #0]
 8011da8:	2301      	movs	r3, #1
 8011daa:	f002 0204 	and.w	r2, r2, #4
 8011dae:	21b2      	movs	r1, #178	; 0xb2
 8011db0:	20c8      	movs	r0, #200	; 0xc8
 8011db2:	f001 fa5a 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011db6:	7822      	ldrb	r2, [r4, #0]
 8011db8:	2301      	movs	r3, #1
 8011dba:	f002 0208 	and.w	r2, r2, #8
 8011dbe:	21d5      	movs	r1, #213	; 0xd5
 8011dc0:	20c8      	movs	r0, #200	; 0xc8
 8011dc2:	f001 fa52 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8011dc6:	7822      	ldrb	r2, [r4, #0]
 8011dc8:	f042 0210 	orr.w	r2, r2, #16
 8011dcc:	7022      	strb	r2, [r4, #0]
 8011dce:	2301      	movs	r3, #1
 8011dd0:	e768      	b.n	8011ca4 <GUI_Touch_Processing+0xb74>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=283  & Touch_y <=(283+54)  && (Measure_Field&CIE_Lab)) //Source_D75
 8011dd2:	f46f 758d 	mvn.w	r5, #282	; 0x11a
 8011dd6:	442b      	add	r3, r5
 8011dd8:	2b36      	cmp	r3, #54	; 0x36
 8011dda:	d836      	bhi.n	8011e4a <GUI_Touch_Processing+0xd1a>
 8011ddc:	b3aa      	cbz	r2, 8011e4a <GUI_Touch_Processing+0xd1a>
 8011dde:	4b71      	ldr	r3, [pc, #452]	; (8011fa4 <GUI_Touch_Processing+0xe74>)
 8011de0:	881b      	ldrh	r3, [r3, #0]
 8011de2:	061b      	lsls	r3, r3, #24
 8011de4:	d531      	bpl.n	8011e4a <GUI_Touch_Processing+0xd1a>
					if(!(Source_Type&Source_D75))
 8011de6:	4c70      	ldr	r4, [pc, #448]	; (8011fa8 <GUI_Touch_Processing+0xe78>)
 8011de8:	7822      	ldrb	r2, [r4, #0]
 8011dea:	f012 0220 	ands.w	r2, r2, #32
 8011dee:	f47f aa4a 	bne.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011df2:	2301      	movs	r3, #1
 8011df4:	216c      	movs	r1, #108	; 0x6c
 8011df6:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011df8:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011dfa:	f001 fa36 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011dfe:	7822      	ldrb	r2, [r4, #0]
 8011e00:	2301      	movs	r3, #1
 8011e02:	f002 0202 	and.w	r2, r2, #2
 8011e06:	218f      	movs	r1, #143	; 0x8f
 8011e08:	20c8      	movs	r0, #200	; 0xc8
 8011e0a:	f001 fa2e 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011e0e:	7822      	ldrb	r2, [r4, #0]
 8011e10:	2301      	movs	r3, #1
 8011e12:	f002 0204 	and.w	r2, r2, #4
 8011e16:	21b2      	movs	r1, #178	; 0xb2
 8011e18:	20c8      	movs	r0, #200	; 0xc8
 8011e1a:	f001 fa26 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011e1e:	7822      	ldrb	r2, [r4, #0]
 8011e20:	2301      	movs	r3, #1
 8011e22:	f002 0208 	and.w	r2, r2, #8
 8011e26:	21d5      	movs	r1, #213	; 0xd5
 8011e28:	20c8      	movs	r0, #200	; 0xc8
 8011e2a:	f001 fa1e 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011e2e:	7822      	ldrb	r2, [r4, #0]
 8011e30:	2301      	movs	r3, #1
 8011e32:	f002 0210 	and.w	r2, r2, #16
 8011e36:	21f8      	movs	r1, #248	; 0xf8
 8011e38:	20c8      	movs	r0, #200	; 0xc8
 8011e3a:	f001 fa16 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 8011e3e:	7822      	ldrb	r2, [r4, #0]
 8011e40:	f042 0220 	orr.w	r2, r2, #32
 8011e44:	7022      	strb	r2, [r4, #0]
 8011e46:	2301      	movs	r3, #1
 8011e48:	e6ad      	b.n	8011ba6 <GUI_Touch_Processing+0xa76>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011e4a:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 8011e4e:	2b36      	cmp	r3, #54	; 0x36
 8011e50:	d802      	bhi.n	8011e58 <GUI_Touch_Processing+0xd28>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	f47f ac84 	bne.w	8011760 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011e58:	1e4b      	subs	r3, r1, #1
 8011e5a:	2b36      	cmp	r3, #54	; 0x36
 8011e5c:	d822      	bhi.n	8011ea4 <GUI_Touch_Processing+0xd74>
 8011e5e:	b308      	cbz	r0, 8011ea4 <GUI_Touch_Processing+0xd74>
					WriteSDFLASH_t(sdfile_cnt);
 8011e60:	4b52      	ldr	r3, [pc, #328]	; (8011fac <GUI_Touch_Processing+0xe7c>)
 8011e62:	2100      	movs	r1, #0
 8011e64:	8818      	ldrh	r0, [r3, #0]
 8011e66:	f008 f9a7 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011e6a:	4b51      	ldr	r3, [pc, #324]	; (8011fb0 <GUI_Touch_Processing+0xe80>)
 8011e6c:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011e6e:	1e5a      	subs	r2, r3, #1
 8011e70:	2a05      	cmp	r2, #5
 8011e72:	d804      	bhi.n	8011e7e <GUI_Touch_Processing+0xd4e>
 8011e74:	e8df f002 	tbb	[pc, r2]
 8011e78:	0a030306 	.word	0x0a030306
 8011e7c:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8011e7e:	7023      	strb	r3, [r4, #0]
 8011e80:	f7ff ba01 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011e84:	2301      	movs	r3, #1
 8011e86:	7023      	strb	r3, [r4, #0]
 8011e88:	f7ff b9fd 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011e8c:	2304      	movs	r3, #4
 8011e8e:	7023      	strb	r3, [r4, #0]
 8011e90:	f7ff b9f9 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011e94:	2306      	movs	r3, #6
 8011e96:	7023      	strb	r3, [r4, #0]
 8011e98:	f7ff b9f5 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011e9c:	2305      	movs	r3, #5
 8011e9e:	7023      	strb	r3, [r4, #0]
 8011ea0:	f7ff b9f1 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011ea4:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8011ea8:	e46b      	b.n	8011782 <GUI_Touch_Processing+0x652>
					preGUI_screen_state = GUI_screen_state;
 8011eaa:	4b42      	ldr	r3, [pc, #264]	; (8011fb4 <GUI_Touch_Processing+0xe84>)
 8011eac:	220b      	movs	r2, #11
 8011eae:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Next
 8011eb0:	4a41      	ldr	r2, [pc, #260]	; (8011fb8 <GUI_Touch_Processing+0xe88>)
 8011eb2:	4b42      	ldr	r3, [pc, #264]	; (8011fbc <GUI_Touch_Processing+0xe8c>)
 8011eb4:	8811      	ldrh	r1, [r2, #0]
 8011eb6:	881b      	ldrh	r3, [r3, #0]
 8011eb8:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8011ebc:	2a36      	cmp	r2, #54	; 0x36
 8011ebe:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011ec2:	bf8c      	ite	hi
 8011ec4:	2200      	movhi	r2, #0
 8011ec6:	2201      	movls	r2, #1
 8011ec8:	2836      	cmp	r0, #54	; 0x36
 8011eca:	d804      	bhi.n	8011ed6 <GUI_Touch_Processing+0xda6>
 8011ecc:	b11a      	cbz	r2, 8011ed6 <GUI_Touch_Processing+0xda6>
					GUI_screen_state = DataSet1_Screen;
 8011ece:	2307      	movs	r3, #7
 8011ed0:	7023      	strb	r3, [r4, #0]
 8011ed2:	f7ff b9d8 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //EbEr
 8011ed6:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 8011eda:	2836      	cmp	r0, #54	; 0x36
 8011edc:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 8011ee0:	bf8c      	ite	hi
 8011ee2:	2000      	movhi	r0, #0
 8011ee4:	2001      	movls	r0, #1
 8011ee6:	2d36      	cmp	r5, #54	; 0x36
 8011ee8:	d808      	bhi.n	8011efc <GUI_Touch_Processing+0xdcc>
 8011eea:	b138      	cbz	r0, 8011efc <GUI_Touch_Processing+0xdcc>
					Measure_Field ^= lambda_d;
 8011eec:	4b2d      	ldr	r3, [pc, #180]	; (8011fa4 <GUI_Touch_Processing+0xe74>)
 8011eee:	881a      	ldrh	r2, [r3, #0]
 8011ef0:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8011ef4:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 8011ef6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8011efa:	e534      	b.n	8011966 <GUI_Touch_Processing+0x836>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=133  & Touch_y <=(198+54) ) //EbEr
 8011efc:	3985      	subs	r1, #133	; 0x85
 8011efe:	2977      	cmp	r1, #119	; 0x77
 8011f00:	d809      	bhi.n	8011f16 <GUI_Touch_Processing+0xde6>
 8011f02:	b140      	cbz	r0, 8011f16 <GUI_Touch_Processing+0xde6>
					Measure_Field ^= SP_measure;
 8011f04:	4b27      	ldr	r3, [pc, #156]	; (8011fa4 <GUI_Touch_Processing+0xe74>)
 8011f06:	881a      	ldrh	r2, [r3, #0]
 8011f08:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8011f0c:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 8011f0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8011f12:	2185      	movs	r1, #133	; 0x85
 8011f14:	e479      	b.n	801180a <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011f16:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8011f1a:	2936      	cmp	r1, #54	; 0x36
 8011f1c:	d802      	bhi.n	8011f24 <GUI_Touch_Processing+0xdf4>
 8011f1e:	2a00      	cmp	r2, #0
 8011f20:	f47f ac1e 	bne.w	8011760 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011f24:	1e59      	subs	r1, r3, #1
 8011f26:	2936      	cmp	r1, #54	; 0x36
 8011f28:	f200 82b0 	bhi.w	801248c <GUI_Touch_Processing+0x135c>
 8011f2c:	2a00      	cmp	r2, #0
 8011f2e:	f000 82ad 	beq.w	801248c <GUI_Touch_Processing+0x135c>
					WriteSDFLASH_t(sdfile_cnt);
 8011f32:	4b1e      	ldr	r3, [pc, #120]	; (8011fac <GUI_Touch_Processing+0xe7c>)
 8011f34:	2100      	movs	r1, #0
 8011f36:	8818      	ldrh	r0, [r3, #0]
 8011f38:	f008 f93e 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011f3c:	4b1c      	ldr	r3, [pc, #112]	; (8011fb0 <GUI_Touch_Processing+0xe80>)
 8011f3e:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011f40:	1e5a      	subs	r2, r3, #1
 8011f42:	2a05      	cmp	r2, #5
 8011f44:	d804      	bhi.n	8011f50 <GUI_Touch_Processing+0xe20>
 8011f46:	e8df f002 	tbb	[pc, r2]
 8011f4a:	0306      	.short	0x0306
 8011f4c:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8011f50:	7023      	strb	r3, [r4, #0]
 8011f52:	f7ff b998 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011f56:	2301      	movs	r3, #1
 8011f58:	7023      	strb	r3, [r4, #0]
 8011f5a:	f7ff b994 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011f5e:	2304      	movs	r3, #4
 8011f60:	7023      	strb	r3, [r4, #0]
 8011f62:	f7ff b990 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011f66:	2306      	movs	r3, #6
 8011f68:	7023      	strb	r3, [r4, #0]
 8011f6a:	f7ff b98c 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011f6e:	2305      	movs	r3, #5
 8011f70:	7023      	strb	r3, [r4, #0]
 8011f72:	f7ff b988 	b.w	8011286 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011f76:	4b0f      	ldr	r3, [pc, #60]	; (8011fb4 <GUI_Touch_Processing+0xe84>)
 8011f78:	220c      	movs	r2, #12
 8011f7a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011f7c:	4a0e      	ldr	r2, [pc, #56]	; (8011fb8 <GUI_Touch_Processing+0xe88>)
 8011f7e:	4b0f      	ldr	r3, [pc, #60]	; (8011fbc <GUI_Touch_Processing+0xe8c>)
 8011f80:	8812      	ldrh	r2, [r2, #0]
 8011f82:	881b      	ldrh	r3, [r3, #0]
 8011f84:	f5a2 71d5 	sub.w	r1, r2, #426	; 0x1aa
 8011f88:	2936      	cmp	r1, #54	; 0x36
 8011f8a:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011f8e:	bf8c      	ite	hi
 8011f90:	2100      	movhi	r1, #0
 8011f92:	2101      	movls	r1, #1
 8011f94:	2836      	cmp	r0, #54	; 0x36
 8011f96:	d813      	bhi.n	8011fc0 <GUI_Touch_Processing+0xe90>
 8011f98:	b191      	cbz	r1, 8011fc0 <GUI_Touch_Processing+0xe90>
					GUI_screen_state = GraphSet2_Screen;
 8011f9a:	230d      	movs	r3, #13
 8011f9c:	7023      	strb	r3, [r4, #0]
 8011f9e:	f7ff b972 	b.w	8011286 <GUI_Touch_Processing+0x156>
 8011fa2:	bf00      	nop
 8011fa4:	20005706 	.word	0x20005706
 8011fa8:	20090ab9 	.word	0x20090ab9
 8011fac:	2000572e 	.word	0x2000572e
 8011fb0:	20090ab5 	.word	0x20090ab5
 8011fb4:	2000022a 	.word	0x2000022a
 8011fb8:	20054944 	.word	0x20054944
 8011fbc:	20054942 	.word	0x20054942
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 8011fc0:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 8011fc4:	2836      	cmp	r0, #54	; 0x36
 8011fc6:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 8011fca:	bf8c      	ite	hi
 8011fcc:	2000      	movhi	r0, #0
 8011fce:	2001      	movls	r0, #1
 8011fd0:	2d36      	cmp	r5, #54	; 0x36
 8011fd2:	d802      	bhi.n	8011fda <GUI_Touch_Processing+0xeaa>
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	f47f aae7 	bne.w	80115a8 <GUI_Touch_Processing+0x478>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 8011fda:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 8011fde:	2d36      	cmp	r5, #54	; 0x36
 8011fe0:	d802      	bhi.n	8011fe8 <GUI_Touch_Processing+0xeb8>
 8011fe2:	2800      	cmp	r0, #0
 8011fe4:	f47f ab0c 	bne.w	8011600 <GUI_Touch_Processing+0x4d0>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //PPF_Bands
 8011fe8:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 8011fec:	2836      	cmp	r0, #54	; 0x36
 8011fee:	d80c      	bhi.n	801200a <GUI_Touch_Processing+0xeda>
 8011ff0:	f46f 78a3 	mvn.w	r8, #326	; 0x146
 8011ff4:	eb02 0008 	add.w	r0, r2, r8
 8011ff8:	2836      	cmp	r0, #54	; 0x36
 8011ffa:	d806      	bhi.n	801200a <GUI_Touch_Processing+0xeda>
					Graph_Field ^= PPF_Bands;
 8011ffc:	4ba6      	ldr	r3, [pc, #664]	; (8012298 <GUI_Touch_Processing+0x1168>)
 8011ffe:	781a      	ldrb	r2, [r3, #0]
 8012000:	f082 0201 	eor.w	r2, r2, #1
 8012004:	701a      	strb	r2, [r3, #0]
 8012006:	f7ff bb27 	b.w	8011658 <GUI_Touch_Processing+0x528>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 801200a:	f1a3 00d9 	sub.w	r0, r3, #217	; 0xd9
 801200e:	2836      	cmp	r0, #54	; 0x36
 8012010:	d802      	bhi.n	8012018 <GUI_Touch_Processing+0xee8>
 8012012:	2900      	cmp	r1, #0
 8012014:	f47f aba4 	bne.w	8011760 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8012018:	1e58      	subs	r0, r3, #1
 801201a:	2836      	cmp	r0, #54	; 0x36
 801201c:	d822      	bhi.n	8012064 <GUI_Touch_Processing+0xf34>
 801201e:	b309      	cbz	r1, 8012064 <GUI_Touch_Processing+0xf34>
					WriteSDFLASH_t(sdfile_cnt);
 8012020:	4b9e      	ldr	r3, [pc, #632]	; (801229c <GUI_Touch_Processing+0x116c>)
 8012022:	2100      	movs	r1, #0
 8012024:	8818      	ldrh	r0, [r3, #0]
 8012026:	f008 f8c7 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801202a:	4b9d      	ldr	r3, [pc, #628]	; (80122a0 <GUI_Touch_Processing+0x1170>)
 801202c:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801202e:	1e5a      	subs	r2, r3, #1
 8012030:	2a05      	cmp	r2, #5
 8012032:	d804      	bhi.n	801203e <GUI_Touch_Processing+0xf0e>
 8012034:	e8df f002 	tbb	[pc, r2]
 8012038:	0a030306 	.word	0x0a030306
 801203c:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 801203e:	7023      	strb	r3, [r4, #0]
 8012040:	f7ff b921 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012044:	2301      	movs	r3, #1
 8012046:	7023      	strb	r3, [r4, #0]
 8012048:	f7ff b91d 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801204c:	2304      	movs	r3, #4
 801204e:	7023      	strb	r3, [r4, #0]
 8012050:	f7ff b919 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012054:	2306      	movs	r3, #6
 8012056:	7023      	strb	r3, [r4, #0]
 8012058:	f7ff b915 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801205c:	2305      	movs	r3, #5
 801205e:	7023      	strb	r3, [r4, #0]
 8012060:	f7ff b911 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8012064:	f1a3 0037 	sub.w	r0, r3, #55	; 0x37
 8012068:	2836      	cmp	r0, #54	; 0x36
 801206a:	d802      	bhi.n	8012072 <GUI_Touch_Processing+0xf42>
 801206c:	2900      	cmp	r1, #0
 801206e:	f47f a912 	bne.w	8011296 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8012072:	3b08      	subs	r3, #8
 8012074:	2bf2      	cmp	r3, #242	; 0xf2
 8012076:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
 801207a:	bf8c      	ite	hi
 801207c:	2300      	movhi	r3, #0
 801207e:	2301      	movls	r3, #1
 8012080:	2928      	cmp	r1, #40	; 0x28
 8012082:	d810      	bhi.n	80120a6 <GUI_Touch_Processing+0xf76>
 8012084:	b17b      	cbz	r3, 80120a6 <GUI_Touch_Processing+0xf76>
					if (Language_status == Ru) Language_status=En;
 8012086:	4b87      	ldr	r3, [pc, #540]	; (80122a4 <GUI_Touch_Processing+0x1174>)
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	b923      	cbnz	r3, 8012096 <GUI_Touch_Processing+0xf66>
 801208c:	4b85      	ldr	r3, [pc, #532]	; (80122a4 <GUI_Touch_Processing+0x1174>)
 801208e:	2201      	movs	r2, #1
 8012090:	701a      	strb	r2, [r3, #0]
 8012092:	f7ff b8f8 	b.w	8011286 <GUI_Touch_Processing+0x156>
					else if (Language_status == En) Language_status=Ru;
 8012096:	2b01      	cmp	r3, #1
 8012098:	f47f a8f5 	bne.w	8011286 <GUI_Touch_Processing+0x156>
 801209c:	4b81      	ldr	r3, [pc, #516]	; (80122a4 <GUI_Touch_Processing+0x1174>)
 801209e:	2200      	movs	r2, #0
 80120a0:	701a      	strb	r2, [r3, #0]
 80120a2:	f7ff b8f0 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 80120a6:	3a7c      	subs	r2, #124	; 0x7c
 80120a8:	2a32      	cmp	r2, #50	; 0x32
 80120aa:	f63f a8ec 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f43f a8e9 	beq.w	8011286 <GUI_Touch_Processing+0x156>
					GUI_screen_state = Information_Screen;
 80120b4:	2311      	movs	r3, #17
 80120b6:	7023      	strb	r3, [r4, #0]
 80120b8:	f7ff b8e5 	b.w	8011286 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 80120bc:	4b7a      	ldr	r3, [pc, #488]	; (80122a8 <GUI_Touch_Processing+0x1178>)
 80120be:	220d      	movs	r2, #13
 80120c0:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 80120c2:	4a7a      	ldr	r2, [pc, #488]	; (80122ac <GUI_Touch_Processing+0x117c>)
 80120c4:	4b7a      	ldr	r3, [pc, #488]	; (80122b0 <GUI_Touch_Processing+0x1180>)
 80120c6:	8811      	ldrh	r1, [r2, #0]
 80120c8:	881b      	ldrh	r3, [r3, #0]
 80120ca:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 80120ce:	2a36      	cmp	r2, #54	; 0x36
 80120d0:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 80120d4:	bf8c      	ite	hi
 80120d6:	2200      	movhi	r2, #0
 80120d8:	2201      	movls	r2, #1
 80120da:	2836      	cmp	r0, #54	; 0x36
 80120dc:	d804      	bhi.n	80120e8 <GUI_Touch_Processing+0xfb8>
 80120de:	b11a      	cbz	r2, 80120e8 <GUI_Touch_Processing+0xfb8>
					GUI_screen_state = GraphSet1_Screen;
 80120e0:	230c      	movs	r3, #12
 80120e2:	7023      	strb	r3, [r4, #0]
 80120e4:	f7ff b8cf 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //PPF_Bands
 80120e8:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 80120ec:	2836      	cmp	r0, #54	; 0x36
 80120ee:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 80120f2:	bf8c      	ite	hi
 80120f4:	2000      	movhi	r0, #0
 80120f6:	2001      	movls	r0, #1
 80120f8:	2d36      	cmp	r5, #54	; 0x36
 80120fa:	d807      	bhi.n	801210c <GUI_Touch_Processing+0xfdc>
 80120fc:	b130      	cbz	r0, 801210c <GUI_Touch_Processing+0xfdc>
					Graph_Field ^= EbEr_graph;
 80120fe:	4b66      	ldr	r3, [pc, #408]	; (8012298 <GUI_Touch_Processing+0x1168>)
 8012100:	781a      	ldrb	r2, [r3, #0]
 8012102:	f082 0202 	eor.w	r2, r2, #2
 8012106:	701a      	strb	r2, [r3, #0]
 8012108:	f7ff bb62 	b.w	80117d0 <GUI_Touch_Processing+0x6a0>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //PPF_Bands
 801210c:	3985      	subs	r1, #133	; 0x85
 801210e:	2936      	cmp	r1, #54	; 0x36
 8012110:	d807      	bhi.n	8012122 <GUI_Touch_Processing+0xff2>
 8012112:	b130      	cbz	r0, 8012122 <GUI_Touch_Processing+0xff2>
					Graph_Field ^= V_lambda;
 8012114:	4b60      	ldr	r3, [pc, #384]	; (8012298 <GUI_Touch_Processing+0x1168>)
 8012116:	781a      	ldrb	r2, [r3, #0]
 8012118:	f082 0204 	eor.w	r2, r2, #4
 801211c:	701a      	strb	r2, [r3, #0]
 801211e:	f7ff bb64 	b.w	80117ea <GUI_Touch_Processing+0x6ba>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8012122:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8012126:	2936      	cmp	r1, #54	; 0x36
 8012128:	d802      	bhi.n	8012130 <GUI_Touch_Processing+0x1000>
 801212a:	2a00      	cmp	r2, #0
 801212c:	f47f ab18 	bne.w	8011760 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8012130:	1e59      	subs	r1, r3, #1
 8012132:	2936      	cmp	r1, #54	; 0x36
 8012134:	f200 81aa 	bhi.w	801248c <GUI_Touch_Processing+0x135c>
 8012138:	2a00      	cmp	r2, #0
 801213a:	f000 81a7 	beq.w	801248c <GUI_Touch_Processing+0x135c>
					WriteSDFLASH_t(sdfile_cnt);
 801213e:	4b57      	ldr	r3, [pc, #348]	; (801229c <GUI_Touch_Processing+0x116c>)
 8012140:	2100      	movs	r1, #0
 8012142:	8818      	ldrh	r0, [r3, #0]
 8012144:	f008 f838 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012148:	4b55      	ldr	r3, [pc, #340]	; (80122a0 <GUI_Touch_Processing+0x1170>)
 801214a:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801214c:	1e5a      	subs	r2, r3, #1
 801214e:	2a05      	cmp	r2, #5
 8012150:	d804      	bhi.n	801215c <GUI_Touch_Processing+0x102c>
 8012152:	e8df f002 	tbb	[pc, r2]
 8012156:	0306      	.short	0x0306
 8012158:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 801215c:	7023      	strb	r3, [r4, #0]
 801215e:	f7ff b892 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012162:	2301      	movs	r3, #1
 8012164:	7023      	strb	r3, [r4, #0]
 8012166:	f7ff b88e 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801216a:	2304      	movs	r3, #4
 801216c:	7023      	strb	r3, [r4, #0]
 801216e:	f7ff b88a 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012172:	2306      	movs	r3, #6
 8012174:	7023      	strb	r3, [r4, #0]
 8012176:	f7ff b886 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801217a:	2305      	movs	r3, #5
 801217c:	7023      	strb	r3, [r4, #0]
 801217e:	f7ff b882 	b.w	8011286 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8012182:	4b49      	ldr	r3, [pc, #292]	; (80122a8 <GUI_Touch_Processing+0x1178>)
 8012184:	220e      	movs	r2, #14
 8012186:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8012188:	4b49      	ldr	r3, [pc, #292]	; (80122b0 <GUI_Touch_Processing+0x1180>)
 801218a:	881a      	ldrh	r2, [r3, #0]
 801218c:	4b47      	ldr	r3, [pc, #284]	; (80122ac <GUI_Touch_Processing+0x117c>)
 801218e:	881b      	ldrh	r3, [r3, #0]
 8012190:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 8012194:	2d36      	cmp	r5, #54	; 0x36
 8012196:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 801219a:	bf8c      	ite	hi
 801219c:	2500      	movhi	r5, #0
 801219e:	2501      	movls	r5, #1
 80121a0:	2936      	cmp	r1, #54	; 0x36
 80121a2:	d804      	bhi.n	80121ae <GUI_Touch_Processing+0x107e>
 80121a4:	b11d      	cbz	r5, 80121ae <GUI_Touch_Processing+0x107e>
					GUI_screen_state = ColorSet2_Screen;
 80121a6:	230f      	movs	r3, #15
 80121a8:	7023      	strb	r3, [r4, #0]
 80121aa:	f7ff b86c 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 80121ae:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 80121b2:	2936      	cmp	r1, #54	; 0x36
 80121b4:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 80121b8:	bf8c      	ite	hi
 80121ba:	2100      	movhi	r1, #0
 80121bc:	2101      	movls	r1, #1
 80121be:	2836      	cmp	r0, #54	; 0x36
 80121c0:	d802      	bhi.n	80121c8 <GUI_Touch_Processing+0x1098>
 80121c2:	2900      	cmp	r1, #0
 80121c4:	f47f a9f0 	bne.w	80115a8 <GUI_Touch_Processing+0x478>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 80121c8:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80121cc:	2836      	cmp	r0, #54	; 0x36
 80121ce:	d802      	bhi.n	80121d6 <GUI_Touch_Processing+0x10a6>
 80121d0:	2900      	cmp	r1, #0
 80121d2:	f47f aa15 	bne.w	8011600 <GUI_Touch_Processing+0x4d0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 80121d6:	f1a2 0008 	sub.w	r0, r2, #8
 80121da:	28f2      	cmp	r0, #242	; 0xf2
 80121dc:	f1a3 067c 	sub.w	r6, r3, #124	; 0x7c
 80121e0:	bf8c      	ite	hi
 80121e2:	2000      	movhi	r0, #0
 80121e4:	2001      	movls	r0, #1
 80121e6:	2e32      	cmp	r6, #50	; 0x32
 80121e8:	d802      	bhi.n	80121f0 <GUI_Touch_Processing+0x10c0>
 80121ea:	2800      	cmp	r0, #0
 80121ec:	f47f af62 	bne.w	80120b4 <GUI_Touch_Processing+0xf84>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //Color_CIE_xy
 80121f0:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 80121f4:	eb03 060c 	add.w	r6, r3, ip
 80121f8:	2e36      	cmp	r6, #54	; 0x36
 80121fa:	d80c      	bhi.n	8012216 <GUI_Touch_Processing+0x10e6>
 80121fc:	b159      	cbz	r1, 8012216 <GUI_Touch_Processing+0x10e6>
					if(!(Color_Field&Color_CIE_xy))
 80121fe:	4a2d      	ldr	r2, [pc, #180]	; (80122b4 <GUI_Touch_Processing+0x1184>)
 8012200:	7813      	ldrb	r3, [r2, #0]
 8012202:	07df      	lsls	r7, r3, #31
 8012204:	f53f a83f 	bmi.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 327, Color_Field|=Color_CIE_xy, 0x01);
 8012208:	2301      	movs	r3, #1
 801220a:	7013      	strb	r3, [r2, #0]
 801220c:	f240 1147 	movw	r1, #327	; 0x147
 8012210:	461a      	mov	r2, r3
 8012212:	f7ff bbcf 	b.w	80119b4 <GUI_Touch_Processing+0x884>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8012216:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 801221a:	2936      	cmp	r1, #54	; 0x36
 801221c:	d802      	bhi.n	8012224 <GUI_Touch_Processing+0x10f4>
 801221e:	2d00      	cmp	r5, #0
 8012220:	f47f aa9e 	bne.w	8011760 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8012224:	1e51      	subs	r1, r2, #1
 8012226:	2936      	cmp	r1, #54	; 0x36
 8012228:	d873      	bhi.n	8012312 <GUI_Touch_Processing+0x11e2>
 801222a:	2d00      	cmp	r5, #0
 801222c:	d071      	beq.n	8012312 <GUI_Touch_Processing+0x11e2>
					if(preColor_Field != Color_Field)
 801222e:	4d21      	ldr	r5, [pc, #132]	; (80122b4 <GUI_Touch_Processing+0x1184>)
 8012230:	4921      	ldr	r1, [pc, #132]	; (80122b8 <GUI_Touch_Processing+0x1188>)
 8012232:	782b      	ldrb	r3, [r5, #0]
 8012234:	7809      	ldrb	r1, [r1, #0]
 8012236:	4299      	cmp	r1, r3
 8012238:	d01f      	beq.n	801227a <GUI_Touch_Processing+0x114a>
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801223a:	07de      	lsls	r6, r3, #31
 801223c:	d546      	bpl.n	80122cc <GUI_Touch_Processing+0x119c>
 801223e:	4b1f      	ldr	r3, [pc, #124]	; (80122bc <GUI_Touch_Processing+0x118c>)
 8012240:	481f      	ldr	r0, [pc, #124]	; (80122c0 <GUI_Touch_Processing+0x1190>)
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	f013 0f01 	tst.w	r3, #1
 8012248:	bf18      	it	ne
 801224a:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 801224e:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8012252:	f007 feb9 	bl	8019fc8 <Image_load>
						Locus.pData = (uint16_t *)bmp;
 8012256:	4b1b      	ldr	r3, [pc, #108]	; (80122c4 <GUI_Touch_Processing+0x1194>)
 8012258:	4a1b      	ldr	r2, [pc, #108]	; (80122c8 <GUI_Touch_Processing+0x1198>)
 801225a:	605a      	str	r2, [r3, #4]
						Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 801225c:	782a      	ldrb	r2, [r5, #0]
 801225e:	f002 0101 	and.w	r1, r2, #1
 8012262:	2900      	cmp	r1, #0
 8012264:	bf0c      	ite	eq
 8012266:	21fa      	moveq	r1, #250	; 0xfa
 8012268:	21d8      	movne	r1, #216	; 0xd8
 801226a:	8019      	strh	r1, [r3, #0]
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801226c:	d13c      	bne.n	80122e8 <GUI_Touch_Processing+0x11b8>
 801226e:	f012 0f04 	tst.w	r2, #4
 8012272:	bf0c      	ite	eq
 8012274:	22fa      	moveq	r2, #250	; 0xfa
 8012276:	22ea      	movne	r2, #234	; 0xea
 8012278:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 801227a:	4b08      	ldr	r3, [pc, #32]	; (801229c <GUI_Touch_Processing+0x116c>)
 801227c:	2100      	movs	r1, #0
 801227e:	8818      	ldrh	r0, [r3, #0]
 8012280:	f007 ff9a 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012284:	4b06      	ldr	r3, [pc, #24]	; (80122a0 <GUI_Touch_Processing+0x1170>)
 8012286:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012288:	1e5a      	subs	r2, r3, #1
 801228a:	2a05      	cmp	r2, #5
 801228c:	d82e      	bhi.n	80122ec <GUI_Touch_Processing+0x11bc>
 801228e:	e8df f002 	tbb	[pc, r2]
 8012292:	2d30      	.short	0x2d30
 8012294:	383c342d 	.word	0x383c342d
 8012298:	20005702 	.word	0x20005702
 801229c:	2000572e 	.word	0x2000572e
 80122a0:	20090ab5 	.word	0x20090ab5
 80122a4:	20005703 	.word	0x20005703
 80122a8:	2000022a 	.word	0x2000022a
 80122ac:	20054944 	.word	0x20054944
 80122b0:	20054942 	.word	0x20054942
 80122b4:	200056ff 	.word	0x200056ff
 80122b8:	20005729 	.word	0x20005729
 80122bc:	20005704 	.word	0x20005704
 80122c0:	00051d00 	.word	0x00051d00
 80122c4:	20091050 	.word	0x20091050
 80122c8:	20055954 	.word	0x20055954
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 80122cc:	f003 0304 	and.w	r3, r3, #4
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	4ba9      	ldr	r3, [pc, #676]	; (8012578 <GUI_Touch_Processing+0x1448>)
 80122d4:	48a9      	ldr	r0, [pc, #676]	; (801257c <GUI_Touch_Processing+0x144c>)
 80122d6:	bf18      	it	ne
 80122d8:	4618      	movne	r0, r3
 80122da:	f24e 4384 	movw	r3, #58500	; 0xe484
 80122de:	f24f 4124 	movw	r1, #62500	; 0xf424
 80122e2:	bf18      	it	ne
 80122e4:	4619      	movne	r1, r3
 80122e6:	e7b4      	b.n	8012252 <GUI_Touch_Processing+0x1122>
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 80122e8:	22fa      	movs	r2, #250	; 0xfa
 80122ea:	e7c5      	b.n	8012278 <GUI_Touch_Processing+0x1148>
					GUI_screen_state = Prev_Inf_Screen;
 80122ec:	7023      	strb	r3, [r4, #0]
 80122ee:	f7fe bfca 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80122f2:	2301      	movs	r3, #1
 80122f4:	7023      	strb	r3, [r4, #0]
 80122f6:	f7fe bfc6 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80122fa:	2304      	movs	r3, #4
 80122fc:	7023      	strb	r3, [r4, #0]
 80122fe:	f7fe bfc2 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012302:	2306      	movs	r3, #6
 8012304:	7023      	strb	r3, [r4, #0]
 8012306:	f7fe bfbe 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801230a:	2305      	movs	r3, #5
 801230c:	7023      	strb	r3, [r4, #0]
 801230e:	f7fe bfba 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8012312:	3a37      	subs	r2, #55	; 0x37
 8012314:	2a36      	cmp	r2, #54	; 0x36
 8012316:	d802      	bhi.n	801231e <GUI_Touch_Processing+0x11ee>
 8012318:	2d00      	cmp	r5, #0
 801231a:	f47e afbc 	bne.w	8011296 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 801231e:	3b50      	subs	r3, #80	; 0x50
 8012320:	2b28      	cmp	r3, #40	; 0x28
 8012322:	f63e afb0 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
 8012326:	2800      	cmp	r0, #0
 8012328:	f47f aead 	bne.w	8012086 <GUI_Touch_Processing+0xf56>
 801232c:	f7fe bfab 	b.w	8011286 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8012330:	4b93      	ldr	r3, [pc, #588]	; (8012580 <GUI_Touch_Processing+0x1450>)
 8012332:	220f      	movs	r2, #15
 8012334:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8012336:	4a93      	ldr	r2, [pc, #588]	; (8012584 <GUI_Touch_Processing+0x1454>)
 8012338:	4b93      	ldr	r3, [pc, #588]	; (8012588 <GUI_Touch_Processing+0x1458>)
 801233a:	8811      	ldrh	r1, [r2, #0]
 801233c:	881b      	ldrh	r3, [r3, #0]
 801233e:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8012342:	2a36      	cmp	r2, #54	; 0x36
 8012344:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8012348:	bf8c      	ite	hi
 801234a:	2200      	movhi	r2, #0
 801234c:	2201      	movls	r2, #1
 801234e:	2836      	cmp	r0, #54	; 0x36
 8012350:	d804      	bhi.n	801235c <GUI_Touch_Processing+0x122c>
 8012352:	b11a      	cbz	r2, 801235c <GUI_Touch_Processing+0x122c>
					GUI_screen_state = ColorSet1_Screen;
 8012354:	230e      	movs	r3, #14
 8012356:	7023      	strb	r3, [r4, #0]
 8012358:	f7fe bf95 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //Color_CIE_Luv
 801235c:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 8012360:	2836      	cmp	r0, #54	; 0x36
 8012362:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 8012366:	bf8c      	ite	hi
 8012368:	2000      	movhi	r0, #0
 801236a:	2001      	movls	r0, #1
 801236c:	2d36      	cmp	r5, #54	; 0x36
 801236e:	d813      	bhi.n	8012398 <GUI_Touch_Processing+0x1268>
 8012370:	b190      	cbz	r0, 8012398 <GUI_Touch_Processing+0x1268>
					if(!(Color_Field&Color_CIE_Luv))
 8012372:	4c86      	ldr	r4, [pc, #536]	; (801258c <GUI_Touch_Processing+0x145c>)
 8012374:	7823      	ldrb	r3, [r4, #0]
 8012376:	075d      	lsls	r5, r3, #29
 8012378:	f53e af85 	bmi.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 70, Color_Field|=Color_CIE_Luv, 0x01);
 801237c:	2204      	movs	r2, #4
 801237e:	2301      	movs	r3, #1
 8012380:	2146      	movs	r1, #70	; 0x46
 8012382:	20c8      	movs	r0, #200	; 0xc8
 8012384:	7022      	strb	r2, [r4, #0]
 8012386:	f000 ff70 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 801238a:	7822      	ldrb	r2, [r4, #0]
 801238c:	2301      	movs	r3, #1
 801238e:	f002 0202 	and.w	r2, r2, #2
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8012392:	2185      	movs	r1, #133	; 0x85
 8012394:	f7ff bb0e 	b.w	80119b4 <GUI_Touch_Processing+0x884>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //Color_CIE_Lab
 8012398:	3985      	subs	r1, #133	; 0x85
 801239a:	2936      	cmp	r1, #54	; 0x36
 801239c:	d812      	bhi.n	80123c4 <GUI_Touch_Processing+0x1294>
 801239e:	b188      	cbz	r0, 80123c4 <GUI_Touch_Processing+0x1294>
					if(!(Color_Field&Color_CIE_Lab))
 80123a0:	4c7a      	ldr	r4, [pc, #488]	; (801258c <GUI_Touch_Processing+0x145c>)
 80123a2:	7822      	ldrb	r2, [r4, #0]
 80123a4:	f012 0202 	ands.w	r2, r2, #2
 80123a8:	f47e af6d 	bne.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 80123ac:	2301      	movs	r3, #1
 80123ae:	2146      	movs	r1, #70	; 0x46
 80123b0:	20c8      	movs	r0, #200	; 0xc8
						Color_Field = 0;
 80123b2:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 80123b4:	f000 ff59 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 80123b8:	7822      	ldrb	r2, [r4, #0]
 80123ba:	f042 0202 	orr.w	r2, r2, #2
 80123be:	7022      	strb	r2, [r4, #0]
 80123c0:	2301      	movs	r3, #1
 80123c2:	e7e6      	b.n	8012392 <GUI_Touch_Processing+0x1262>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 80123c4:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 80123c8:	2936      	cmp	r1, #54	; 0x36
 80123ca:	d802      	bhi.n	80123d2 <GUI_Touch_Processing+0x12a2>
 80123cc:	2a00      	cmp	r2, #0
 80123ce:	f47f a9c7 	bne.w	8011760 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 80123d2:	1e59      	subs	r1, r3, #1
 80123d4:	2936      	cmp	r1, #54	; 0x36
 80123d6:	d859      	bhi.n	801248c <GUI_Touch_Processing+0x135c>
 80123d8:	2a00      	cmp	r2, #0
 80123da:	d057      	beq.n	801248c <GUI_Touch_Processing+0x135c>
					if(preColor_Field != Color_Field)
 80123dc:	4d6b      	ldr	r5, [pc, #428]	; (801258c <GUI_Touch_Processing+0x145c>)
 80123de:	496c      	ldr	r1, [pc, #432]	; (8012590 <GUI_Touch_Processing+0x1460>)
 80123e0:	782b      	ldrb	r3, [r5, #0]
 80123e2:	7809      	ldrb	r1, [r1, #0]
 80123e4:	4299      	cmp	r1, r3
 80123e6:	d01f      	beq.n	8012428 <GUI_Touch_Processing+0x12f8>
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 80123e8:	07d8      	lsls	r0, r3, #31
 80123ea:	d52c      	bpl.n	8012446 <GUI_Touch_Processing+0x1316>
 80123ec:	4b69      	ldr	r3, [pc, #420]	; (8012594 <GUI_Touch_Processing+0x1464>)
 80123ee:	486a      	ldr	r0, [pc, #424]	; (8012598 <GUI_Touch_Processing+0x1468>)
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	f013 0f01 	tst.w	r3, #1
 80123f6:	bf18      	it	ne
 80123f8:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 80123fc:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8012400:	f007 fde2 	bl	8019fc8 <Image_load>
								Locus.pData = (uint16_t *)bmp;
 8012404:	4b65      	ldr	r3, [pc, #404]	; (801259c <GUI_Touch_Processing+0x146c>)
 8012406:	4a66      	ldr	r2, [pc, #408]	; (80125a0 <GUI_Touch_Processing+0x1470>)
 8012408:	605a      	str	r2, [r3, #4]
								Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 801240a:	782a      	ldrb	r2, [r5, #0]
 801240c:	f002 0101 	and.w	r1, r2, #1
 8012410:	2900      	cmp	r1, #0
 8012412:	bf0c      	ite	eq
 8012414:	21fa      	moveq	r1, #250	; 0xfa
 8012416:	21d8      	movne	r1, #216	; 0xd8
 8012418:	8019      	strh	r1, [r3, #0]
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801241a:	d122      	bne.n	8012462 <GUI_Touch_Processing+0x1332>
 801241c:	f012 0f04 	tst.w	r2, #4
 8012420:	bf0c      	ite	eq
 8012422:	22fa      	moveq	r2, #250	; 0xfa
 8012424:	22ea      	movne	r2, #234	; 0xea
 8012426:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8012428:	4b5e      	ldr	r3, [pc, #376]	; (80125a4 <GUI_Touch_Processing+0x1474>)
 801242a:	2100      	movs	r1, #0
 801242c:	8818      	ldrh	r0, [r3, #0]
 801242e:	f007 fec3 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012432:	4b5d      	ldr	r3, [pc, #372]	; (80125a8 <GUI_Touch_Processing+0x1478>)
 8012434:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012436:	1e5a      	subs	r2, r3, #1
 8012438:	2a05      	cmp	r2, #5
 801243a:	d814      	bhi.n	8012466 <GUI_Touch_Processing+0x1336>
 801243c:	e8df f002 	tbb	[pc, r2]
 8012440:	1a131316 	.word	0x1a131316
 8012444:	1e22      	.short	0x1e22
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8012446:	f003 0304 	and.w	r3, r3, #4
 801244a:	2b00      	cmp	r3, #0
 801244c:	4b4a      	ldr	r3, [pc, #296]	; (8012578 <GUI_Touch_Processing+0x1448>)
 801244e:	484b      	ldr	r0, [pc, #300]	; (801257c <GUI_Touch_Processing+0x144c>)
 8012450:	bf18      	it	ne
 8012452:	4618      	movne	r0, r3
 8012454:	f24e 4384 	movw	r3, #58500	; 0xe484
 8012458:	f24f 4124 	movw	r1, #62500	; 0xf424
 801245c:	bf18      	it	ne
 801245e:	4619      	movne	r1, r3
 8012460:	e7ce      	b.n	8012400 <GUI_Touch_Processing+0x12d0>
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8012462:	22fa      	movs	r2, #250	; 0xfa
 8012464:	e7df      	b.n	8012426 <GUI_Touch_Processing+0x12f6>
					GUI_screen_state = Prev_Inf_Screen;
 8012466:	7023      	strb	r3, [r4, #0]
 8012468:	f7fe bf0d 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801246c:	2301      	movs	r3, #1
 801246e:	7023      	strb	r3, [r4, #0]
 8012470:	f7fe bf09 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8012474:	2304      	movs	r3, #4
 8012476:	7023      	strb	r3, [r4, #0]
 8012478:	f7fe bf05 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 801247c:	2306      	movs	r3, #6
 801247e:	7023      	strb	r3, [r4, #0]
 8012480:	f7fe bf01 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012484:	2305      	movs	r3, #5
 8012486:	7023      	strb	r3, [r4, #0]
 8012488:	f7fe befd 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 801248c:	3b37      	subs	r3, #55	; 0x37
 801248e:	2b36      	cmp	r3, #54	; 0x36
 8012490:	f63e aef9 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
 8012494:	2a00      	cmp	r2, #0
 8012496:	f47e aefe 	bne.w	8011296 <GUI_Touch_Processing+0x166>
 801249a:	f7fe bef4 	b.w	8011286 <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 801249e:	4b38      	ldr	r3, [pc, #224]	; (8012580 <GUI_Touch_Processing+0x1450>)
 80124a0:	2210      	movs	r2, #16
 80124a2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) )//next
 80124a4:	4b38      	ldr	r3, [pc, #224]	; (8012588 <GUI_Touch_Processing+0x1458>)
 80124a6:	881a      	ldrh	r2, [r3, #0]
 80124a8:	4b36      	ldr	r3, [pc, #216]	; (8012584 <GUI_Touch_Processing+0x1454>)
 80124aa:	881b      	ldrh	r3, [r3, #0]
 80124ac:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 80124b0:	2d36      	cmp	r5, #54	; 0x36
 80124b2:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 80124b6:	bf8c      	ite	hi
 80124b8:	2500      	movhi	r5, #0
 80124ba:	2501      	movls	r5, #1
 80124bc:	2936      	cmp	r1, #54	; 0x36
 80124be:	d809      	bhi.n	80124d4 <GUI_Touch_Processing+0x13a4>
 80124c0:	b145      	cbz	r5, 80124d4 <GUI_Touch_Processing+0x13a4>
					WriteSDFLASH_t(sdfile_cnt);
 80124c2:	4b38      	ldr	r3, [pc, #224]	; (80125a4 <GUI_Touch_Processing+0x1474>)
 80124c4:	2100      	movs	r1, #0
 80124c6:	8818      	ldrh	r0, [r3, #0]
 80124c8:	f007 fe76 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Color_Rendition_Screen;
 80124cc:	2306      	movs	r3, #6
 80124ce:	7023      	strb	r3, [r4, #0]
 80124d0:	f7fe bed9 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 80124d4:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 80124d8:	2936      	cmp	r1, #54	; 0x36
 80124da:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 80124de:	bf8c      	ite	hi
 80124e0:	2100      	movhi	r1, #0
 80124e2:	2101      	movls	r1, #1
 80124e4:	2836      	cmp	r0, #54	; 0x36
 80124e6:	d802      	bhi.n	80124ee <GUI_Touch_Processing+0x13be>
 80124e8:	2900      	cmp	r1, #0
 80124ea:	f47f a85d 	bne.w	80115a8 <GUI_Touch_Processing+0x478>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 80124ee:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80124f2:	2836      	cmp	r0, #54	; 0x36
 80124f4:	d802      	bhi.n	80124fc <GUI_Touch_Processing+0x13cc>
 80124f6:	2900      	cmp	r1, #0
 80124f8:	f47f a882 	bne.w	8011600 <GUI_Touch_Processing+0x4d0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 80124fc:	f1a2 0108 	sub.w	r1, r2, #8
 8012500:	29f2      	cmp	r1, #242	; 0xf2
 8012502:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 8012506:	bf8c      	ite	hi
 8012508:	2100      	movhi	r1, #0
 801250a:	2101      	movls	r1, #1
 801250c:	2832      	cmp	r0, #50	; 0x32
 801250e:	d802      	bhi.n	8012516 <GUI_Touch_Processing+0x13e6>
 8012510:	2900      	cmp	r1, #0
 8012512:	f47f adcf 	bne.w	80120b4 <GUI_Touch_Processing+0xf84>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=318  & Touch_y <=(318+54) ) //CRI
 8012516:	f1a2 00b9 	sub.w	r0, r2, #185	; 0xb9
 801251a:	2836      	cmp	r0, #54	; 0x36
 801251c:	f5a3 769f 	sub.w	r6, r3, #318	; 0x13e
 8012520:	bf8c      	ite	hi
 8012522:	2000      	movhi	r0, #0
 8012524:	2001      	movls	r0, #1
 8012526:	2e36      	cmp	r6, #54	; 0x36
 8012528:	d81b      	bhi.n	8012562 <GUI_Touch_Processing+0x1432>
 801252a:	b1d0      	cbz	r0, 8012562 <GUI_Touch_Processing+0x1432>
					if(!(Color_rend_Field & CRI_CQS)){
 801252c:	4c1f      	ldr	r4, [pc, #124]	; (80125ac <GUI_Touch_Processing+0x147c>)
 801252e:	7822      	ldrb	r2, [r4, #0]
 8012530:	07d1      	lsls	r1, r2, #31
 8012532:	f53e aea8 	bmi.w	8011286 <GUI_Touch_Processing+0x156>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8012536:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 8012538:	f082 0201 	eor.w	r2, r2, #1
 801253c:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 801253e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8012542:	401a      	ands	r2, r3
 8012544:	20b9      	movs	r0, #185	; 0xb9
 8012546:	f000 fe90 	bl	801326a <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 801254a:	7822      	ldrb	r2, [r4, #0]
 801254c:	2301      	movs	r3, #1
 801254e:	43d2      	mvns	r2, r2
 8012550:	401a      	ands	r2, r3
 8012552:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8012556:	20b9      	movs	r0, #185	; 0xb9
 8012558:	f7ff ba2d 	b.w	80119b6 <GUI_Touch_Processing+0x886>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 801255c:	4a14      	ldr	r2, [pc, #80]	; (80125b0 <GUI_Touch_Processing+0x1480>)
 801255e:	f7ff b839 	b.w	80115d4 <GUI_Touch_Processing+0x4a4>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=362  & Touch_y <=(362+54) ) //CQS
 8012562:	f5a3 76b5 	sub.w	r6, r3, #362	; 0x16a
 8012566:	2e36      	cmp	r6, #54	; 0x36
 8012568:	d824      	bhi.n	80125b4 <GUI_Touch_Processing+0x1484>
 801256a:	b318      	cbz	r0, 80125b4 <GUI_Touch_Processing+0x1484>
					if((Color_rend_Field&CRI_CQS)){
 801256c:	4c0f      	ldr	r4, [pc, #60]	; (80125ac <GUI_Touch_Processing+0x147c>)
 801256e:	7822      	ldrb	r2, [r4, #0]
 8012570:	07d3      	lsls	r3, r2, #31
 8012572:	f57e ae88 	bpl.w	8011286 <GUI_Touch_Processing+0x156>
 8012576:	e7de      	b.n	8012536 <GUI_Touch_Processing+0x1406>
 8012578:	0006ca00 	.word	0x0006ca00
 801257c:	00018100 	.word	0x00018100
 8012580:	2000022a 	.word	0x2000022a
 8012584:	20054944 	.word	0x20054944
 8012588:	20054942 	.word	0x20054942
 801258c:	200056ff 	.word	0x200056ff
 8012590:	20005729 	.word	0x20005729
 8012594:	20005704 	.word	0x20005704
 8012598:	00051d00 	.word	0x00051d00
 801259c:	20091050 	.word	0x20091050
 80125a0:	20055954 	.word	0x20055954
 80125a4:	2000572e 	.word	0x2000572e
 80125a8:	20090ab5 	.word	0x20090ab5
 80125ac:	20005700 	.word	0x20005700
 80125b0:	20009d24 	.word	0x20009d24
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 80125b4:	f1a2 00d9 	sub.w	r0, r2, #217	; 0xd9
 80125b8:	2836      	cmp	r0, #54	; 0x36
 80125ba:	d802      	bhi.n	80125c2 <GUI_Touch_Processing+0x1492>
 80125bc:	2d00      	cmp	r5, #0
 80125be:	f47f a8cf 	bne.w	8011760 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 80125c2:	1e50      	subs	r0, r2, #1
 80125c4:	2836      	cmp	r0, #54	; 0x36
 80125c6:	d822      	bhi.n	801260e <GUI_Touch_Processing+0x14de>
 80125c8:	b30d      	cbz	r5, 801260e <GUI_Touch_Processing+0x14de>
					WriteSDFLASH_t(sdfile_cnt);
 80125ca:	4b42      	ldr	r3, [pc, #264]	; (80126d4 <GUI_Touch_Processing+0x15a4>)
 80125cc:	2100      	movs	r1, #0
 80125ce:	8818      	ldrh	r0, [r3, #0]
 80125d0:	f007 fdf2 	bl	801a1b8 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80125d4:	4b40      	ldr	r3, [pc, #256]	; (80126d8 <GUI_Touch_Processing+0x15a8>)
 80125d6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80125d8:	1e5a      	subs	r2, r3, #1
 80125da:	2a05      	cmp	r2, #5
 80125dc:	d804      	bhi.n	80125e8 <GUI_Touch_Processing+0x14b8>
 80125de:	e8df f002 	tbb	[pc, r2]
 80125e2:	0306      	.short	0x0306
 80125e4:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 80125e8:	7023      	strb	r3, [r4, #0]
 80125ea:	f7fe be4c 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80125ee:	2301      	movs	r3, #1
 80125f0:	7023      	strb	r3, [r4, #0]
 80125f2:	f7fe be48 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80125f6:	2304      	movs	r3, #4
 80125f8:	7023      	strb	r3, [r4, #0]
 80125fa:	f7fe be44 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80125fe:	2306      	movs	r3, #6
 8012600:	7023      	strb	r3, [r4, #0]
 8012602:	f7fe be40 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012606:	2305      	movs	r3, #5
 8012608:	7023      	strb	r3, [r4, #0]
 801260a:	f7fe be3c 	b.w	8011286 <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 801260e:	3a37      	subs	r2, #55	; 0x37
 8012610:	2a36      	cmp	r2, #54	; 0x36
 8012612:	d802      	bhi.n	801261a <GUI_Touch_Processing+0x14ea>
 8012614:	2d00      	cmp	r5, #0
 8012616:	f47e ae3e 	bne.w	8011296 <GUI_Touch_Processing+0x166>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 801261a:	3b50      	subs	r3, #80	; 0x50
 801261c:	2b28      	cmp	r3, #40	; 0x28
 801261e:	f63e ae32 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
 8012622:	2900      	cmp	r1, #0
 8012624:	f47f ad2f 	bne.w	8012086 <GUI_Touch_Processing+0xf56>
 8012628:	f7fe be2d 	b.w	8011286 <GUI_Touch_Processing+0x156>
			if(Touch_x >= 8  & Touch_x <= (270)  & Touch_y >=8  & Touch_y <=(470) ) // Information
 801262c:	4b2b      	ldr	r3, [pc, #172]	; (80126dc <GUI_Touch_Processing+0x15ac>)
 801262e:	881b      	ldrh	r3, [r3, #0]
 8012630:	3b08      	subs	r3, #8
 8012632:	b29b      	uxth	r3, r3
 8012634:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8012638:	f63e ae25 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
 801263c:	4b28      	ldr	r3, [pc, #160]	; (80126e0 <GUI_Touch_Processing+0x15b0>)
 801263e:	881b      	ldrh	r3, [r3, #0]
 8012640:	3b08      	subs	r3, #8
 8012642:	b29b      	uxth	r3, r3
 8012644:	f5b3 7fe7 	cmp.w	r3, #462	; 0x1ce
 8012648:	f63e ae1d 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
					GUI_screen_state = preGUI_screen_state;
 801264c:	4b25      	ldr	r3, [pc, #148]	; (80126e4 <GUI_Touch_Processing+0x15b4>)
 801264e:	781a      	ldrb	r2, [r3, #0]
 8012650:	7022      	strb	r2, [r4, #0]
					preGUI_screen_state = Information_Screen;
 8012652:	2211      	movs	r2, #17
 8012654:	701a      	strb	r2, [r3, #0]
						switch (Prev_Inf_Screen2){
 8012656:	4b24      	ldr	r3, [pc, #144]	; (80126e8 <GUI_Touch_Processing+0x15b8>)
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	3b07      	subs	r3, #7
 801265c:	2b09      	cmp	r3, #9
 801265e:	f63e ae12 	bhi.w	8011286 <GUI_Touch_Processing+0x156>
 8012662:	a201      	add	r2, pc, #4	; (adr r2, 8012668 <GUI_Touch_Processing+0x1538>)
 8012664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012668:	08012691 	.word	0x08012691
 801266c:	08011287 	.word	0x08011287
 8012670:	08011287 	.word	0x08011287
 8012674:	08011287 	.word	0x08011287
 8012678:	08011287 	.word	0x08011287
 801267c:	0801269f 	.word	0x0801269f
 8012680:	08011287 	.word	0x08011287
 8012684:	080126ad 	.word	0x080126ad
 8012688:	08011287 	.word	0x08011287
 801268c:	080126bb 	.word	0x080126bb
						case DataSet1_Screen: GUI_screen_state = DataSet1_Screen; 	Prev_Inf_Screen = Measure_Screen;	break;
 8012690:	2307      	movs	r3, #7
 8012692:	7023      	strb	r3, [r4, #0]
 8012694:	4b10      	ldr	r3, [pc, #64]	; (80126d8 <GUI_Touch_Processing+0x15a8>)
 8012696:	2201      	movs	r2, #1
 8012698:	701a      	strb	r2, [r3, #0]
 801269a:	f7fe bdf4 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case GraphSet1_Screen: GUI_screen_state = GraphSet1_Screen; Prev_Inf_Screen = Graph_Screen; 		break;
 801269e:	230c      	movs	r3, #12
 80126a0:	7023      	strb	r3, [r4, #0]
 80126a2:	4b0d      	ldr	r3, [pc, #52]	; (80126d8 <GUI_Touch_Processing+0x15a8>)
 80126a4:	2204      	movs	r2, #4
 80126a6:	701a      	strb	r2, [r3, #0]
 80126a8:	f7fe bded 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case ColorSet1_Screen: GUI_screen_state = ColorSet1_Screen; Prev_Inf_Screen = Color_Screen; break;
 80126ac:	230e      	movs	r3, #14
 80126ae:	7023      	strb	r3, [r4, #0]
 80126b0:	4b09      	ldr	r3, [pc, #36]	; (80126d8 <GUI_Touch_Processing+0x15a8>)
 80126b2:	2205      	movs	r2, #5
 80126b4:	701a      	strb	r2, [r3, #0]
 80126b6:	f7fe bde6 	b.w	8011286 <GUI_Touch_Processing+0x156>
						case ColorRendSet_Screen: GUI_screen_state = ColorRendSet_Screen; Prev_Inf_Screen = Color_Rendition_Screen; break;
 80126ba:	2310      	movs	r3, #16
 80126bc:	7023      	strb	r3, [r4, #0]
 80126be:	4b06      	ldr	r3, [pc, #24]	; (80126d8 <GUI_Touch_Processing+0x15a8>)
 80126c0:	2206      	movs	r2, #6
 80126c2:	701a      	strb	r2, [r3, #0]
 80126c4:	f7fe bddf 	b.w	8011286 <GUI_Touch_Processing+0x156>
		default: preGUI_screen_state = Measure_Screen;
 80126c8:	4b06      	ldr	r3, [pc, #24]	; (80126e4 <GUI_Touch_Processing+0x15b4>)
 80126ca:	2201      	movs	r2, #1
 80126cc:	701a      	strb	r2, [r3, #0]
}
 80126ce:	f7fe bdda 	b.w	8011286 <GUI_Touch_Processing+0x156>
 80126d2:	bf00      	nop
 80126d4:	2000572e 	.word	0x2000572e
 80126d8:	20090ab5 	.word	0x20090ab5
 80126dc:	20054942 	.word	0x20054942
 80126e0:	20054944 	.word	0x20054944
 80126e4:	2000022a 	.word	0x2000022a
 80126e8:	20091058 	.word	0x20091058

080126ec <GUI_Bluetooth_Logo>:
extern UART_HandleTypeDef huart1;
extern uint8_t BluetoothStat;
extern uint8_t pause;

void GUI_Bluetooth_Logo(uint16_t X, uint16_t Y)
{
 80126ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 80126f0:	f101 031e 	add.w	r3, r1, #30
{
 80126f4:	460c      	mov	r4, r1
 80126f6:	4605      	mov	r5, r0
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 80126f8:	f100 0214 	add.w	r2, r0, #20
 80126fc:	2605      	movs	r6, #5
 80126fe:	f241 3776 	movw	r7, #4982	; 0x1376
 8012702:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8012706:	b29b      	uxth	r3, r3
 8012708:	b292      	uxth	r2, r2
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 801270a:	f105 060a 	add.w	r6, r5, #10
 801270e:	f104 0a1a 	add.w	sl, r4, #26
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8012712:	f00a fa99 	bl	801cc48 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8012716:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801271a:	b2b6      	uxth	r6, r6
 801271c:	fa1f fa8a 	uxth.w	sl, sl
 8012720:	1d21      	adds	r1, r4, #4
 8012722:	4653      	mov	r3, sl
 8012724:	4632      	mov	r2, r6
 8012726:	4630      	mov	r0, r6
 8012728:	f8cd 8000 	str.w	r8, [sp]
 801272c:	b289      	uxth	r1, r1
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 801272e:	f105 070f 	add.w	r7, r5, #15
 8012732:	f104 090b 	add.w	r9, r4, #11
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8012736:	f00a f8a5 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 801273a:	b2bf      	uxth	r7, r7
 801273c:	fa1f f989 	uxth.w	r9, r9
 8012740:	1d61      	adds	r1, r4, #5
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 8012742:	3506      	adds	r5, #6
 8012744:	3414      	adds	r4, #20
 8012746:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8012748:	464b      	mov	r3, r9
 801274a:	463a      	mov	r2, r7
 801274c:	4630      	mov	r0, r6
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 801274e:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 8012750:	f8cd 8000 	str.w	r8, [sp]
 8012754:	b289      	uxth	r1, r1
 8012756:	f00a f895 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 801275a:	464b      	mov	r3, r9
 801275c:	463a      	mov	r2, r7
 801275e:	4621      	mov	r1, r4
 8012760:	4628      	mov	r0, r5
 8012762:	f8cd 8000 	str.w	r8, [sp]
 8012766:	f00a f88d 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+15, Y+20, TFT_White);
 801276a:	4623      	mov	r3, r4
 801276c:	463a      	mov	r2, r7
 801276e:	4649      	mov	r1, r9
 8012770:	4628      	mov	r0, r5
 8012772:	f8cd 8000 	str.w	r8, [sp]
 8012776:	f00a f885 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+26, X+15, Y+20,TFT_White);
 801277a:	f8cd 8000 	str.w	r8, [sp]
 801277e:	4623      	mov	r3, r4
 8012780:	463a      	mov	r2, r7
 8012782:	4651      	mov	r1, sl
 8012784:	4630      	mov	r0, r6
 8012786:	f00a f87d 	bl	801c884 <TFT_DrawLine>
}
 801278a:	b002      	add	sp, #8
 801278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012790 <GUI_Button_Settings>:


void GUI_Button_Settings(uint16_t X, uint16_t Y)
{
 8012790:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012794:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012798:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801279a:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801279e:	f241 3676 	movw	r6, #4982	; 0x1376
{
 80127a2:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80127a4:	9600      	str	r6, [sp, #0]
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	b292      	uxth	r2, r2
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 80127aa:	f105 0608 	add.w	r6, r5, #8
 80127ae:	352f      	adds	r5, #47	; 0x2f
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80127b0:	f00a f8c5 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 80127b4:	b2b6      	uxth	r6, r6
 80127b6:	b2ad      	uxth	r5, r5
 80127b8:	2702      	movs	r7, #2
 80127ba:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80127be:	f104 0313 	add.w	r3, r4, #19
 80127c2:	f104 010d 	add.w	r1, r4, #13
 80127c6:	462a      	mov	r2, r5
 80127c8:	4630      	mov	r0, r6
 80127ca:	e88d 0180 	stmia.w	sp, {r7, r8}
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	b289      	uxth	r1, r1
 80127d2:	f00a fa39 	bl	801cc48 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+25, X+47, Y+31, 2, TFT_White);
 80127d6:	f104 031f 	add.w	r3, r4, #31
 80127da:	f104 0119 	add.w	r1, r4, #25
 80127de:	462a      	mov	r2, r5
 80127e0:	4630      	mov	r0, r6
 80127e2:	e88d 0180 	stmia.w	sp, {r7, r8}
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	b289      	uxth	r1, r1
 80127ea:	f00a fa2d 	bl	801cc48 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+37, X+47, Y+43, 2, TFT_White);
 80127ee:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 80127f2:	f104 0125 	add.w	r1, r4, #37	; 0x25
 80127f6:	e88d 0180 	stmia.w	sp, {r7, r8}
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	462a      	mov	r2, r5
 80127fe:	b289      	uxth	r1, r1
 8012800:	4630      	mov	r0, r6
 8012802:	f00a fa21 	bl	801cc48 <TFT_DrawFilledRoundedRectangle>
}
 8012806:	b002      	add	sp, #8
 8012808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801280c <GUI_Button_Down>:

void GUI_Button_Down(uint16_t X, uint16_t Y)
{
 801280c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012810:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012814:	4604      	mov	r4, r0
 8012816:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012818:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801281c:	f241 3676 	movw	r6, #4982	; 0x1376
 8012820:	9600      	str	r6, [sp, #0]
 8012822:	b29b      	uxth	r3, r3
 8012824:	b292      	uxth	r2, r2
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8012826:	f105 0612 	add.w	r6, r5, #18
 801282a:	f104 081c 	add.w	r8, r4, #28
 801282e:	3528      	adds	r5, #40	; 0x28
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012830:	f00a f885 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8012834:	b2b6      	uxth	r6, r6
 8012836:	b2ad      	uxth	r5, r5
 8012838:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801283c:	fa1f f888 	uxth.w	r8, r8
 8012840:	f104 000c 	add.w	r0, r4, #12
 8012844:	462b      	mov	r3, r5
 8012846:	4642      	mov	r2, r8
 8012848:	4631      	mov	r1, r6
 801284a:	9700      	str	r7, [sp, #0]
 801284c:	b280      	uxth	r0, r0
 801284e:	f00a f819 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 8012852:	f104 021d 	add.w	r2, r4, #29
 8012856:	f104 000d 	add.w	r0, r4, #13
 801285a:	462b      	mov	r3, r5
 801285c:	4631      	mov	r1, r6
 801285e:	9700      	str	r7, [sp, #0]
 8012860:	b292      	uxth	r2, r2
 8012862:	b280      	uxth	r0, r0
 8012864:	f00a f80e 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 8012868:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 801286c:	462b      	mov	r3, r5
 801286e:	4642      	mov	r2, r8
 8012870:	4631      	mov	r1, r6
 8012872:	9700      	str	r7, [sp, #0]
 8012874:	b280      	uxth	r0, r0
 8012876:	f00a f805 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 801287a:	f104 021b 	add.w	r2, r4, #27
 801287e:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012882:	9700      	str	r7, [sp, #0]
 8012884:	462b      	mov	r3, r5
 8012886:	b292      	uxth	r2, r2
 8012888:	4631      	mov	r1, r6
 801288a:	b280      	uxth	r0, r0
 801288c:	f009 fffa 	bl	801c884 <TFT_DrawLine>
}
 8012890:	b002      	add	sp, #8
 8012892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012896 <GUI_Button_Down_Active>:

void GUI_Button_Down_Active(uint16_t X, uint16_t Y, uint8_t Active)
{
 8012896:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801289a:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801289e:	4604      	mov	r4, r0
 80128a0:	460d      	mov	r5, r1
 80128a2:	f100 0636 	add.w	r6, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 80128a6:	2a00      	cmp	r2, #0
 80128a8:	d03c      	beq.n	8012924 <GUI_Button_Down_Active+0x8e>
 80128aa:	f241 3276 	movw	r2, #4982	; 0x1376
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80128ae:	9200      	str	r2, [sp, #0]
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	b2b2      	uxth	r2, r6
	
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80128b4:	f104 081c 	add.w	r8, r4, #28
 80128b8:	f105 0612 	add.w	r6, r5, #18
 80128bc:	3528      	adds	r5, #40	; 0x28
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80128be:	f00a f83e 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80128c2:	b2b6      	uxth	r6, r6
 80128c4:	b2ad      	uxth	r5, r5
 80128c6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80128ca:	fa1f f888 	uxth.w	r8, r8
 80128ce:	f104 000c 	add.w	r0, r4, #12
 80128d2:	462b      	mov	r3, r5
 80128d4:	4642      	mov	r2, r8
 80128d6:	4631      	mov	r1, r6
 80128d8:	9700      	str	r7, [sp, #0]
 80128da:	b280      	uxth	r0, r0
 80128dc:	f009 ffd2 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 80128e0:	f104 021d 	add.w	r2, r4, #29
 80128e4:	f104 000d 	add.w	r0, r4, #13
 80128e8:	462b      	mov	r3, r5
 80128ea:	4631      	mov	r1, r6
 80128ec:	9700      	str	r7, [sp, #0]
 80128ee:	b292      	uxth	r2, r2
 80128f0:	b280      	uxth	r0, r0
 80128f2:	f009 ffc7 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 80128f6:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80128fa:	462b      	mov	r3, r5
 80128fc:	4642      	mov	r2, r8
 80128fe:	4631      	mov	r1, r6
 8012900:	9700      	str	r7, [sp, #0]
 8012902:	b280      	uxth	r0, r0
 8012904:	f009 ffbe 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8012908:	f104 021b 	add.w	r2, r4, #27
 801290c:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012910:	9700      	str	r7, [sp, #0]
 8012912:	462b      	mov	r3, r5
 8012914:	b292      	uxth	r2, r2
 8012916:	4631      	mov	r1, r6
 8012918:	b280      	uxth	r0, r0
 801291a:	f009 ffb3 	bl	801c884 <TFT_DrawLine>
}
 801291e:	b002      	add	sp, #8
 8012920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012924:	f64d 721c 	movw	r2, #57116	; 0xdf1c
 8012928:	e7c1      	b.n	80128ae <GUI_Button_Down_Active+0x18>

0801292a <GUI_Button_Right>:

void GUI_Button_Right(uint16_t X, uint16_t Y)
{
 801292a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292e:	4604      	mov	r4, r0
 8012930:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012932:	f241 3676 	movw	r6, #4982	; 0x1376
 8012936:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801293a:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801293e:	9600      	str	r6, [sp, #0]
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012940:	f104 0a13 	add.w	sl, r4, #19
 8012944:	f105 0b0c 	add.w	fp, r5, #12
 8012948:	f104 0928 	add.w	r9, r4, #40	; 0x28
 801294c:	f105 061b 	add.w	r6, r5, #27
 8012950:	b2b6      	uxth	r6, r6
 8012952:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8012956:	fa1f fa8a 	uxth.w	sl, sl
 801295a:	fa1f fb8b 	uxth.w	fp, fp
 801295e:	fa1f f989 	uxth.w	r9, r9
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012962:	b29b      	uxth	r3, r3
 8012964:	b292      	uxth	r2, r2
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012966:	f104 0712 	add.w	r7, r4, #18
 801296a:	3427      	adds	r4, #39	; 0x27
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801296c:	f009 ffe7 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012970:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012972:	4633      	mov	r3, r6
 8012974:	464a      	mov	r2, r9
 8012976:	4659      	mov	r1, fp
 8012978:	4650      	mov	r0, sl
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 801297a:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 801297c:	f8cd 8000 	str.w	r8, [sp]
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012980:	352a      	adds	r5, #42	; 0x2a
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012982:	f009 ff7f 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012986:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012988:	4633      	mov	r3, r6
 801298a:	4622      	mov	r2, r4
 801298c:	4659      	mov	r1, fp
 801298e:	4638      	mov	r0, r7
 8012990:	f8cd 8000 	str.w	r8, [sp]
 8012994:	f009 ff76 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012998:	462b      	mov	r3, r5
 801299a:	4652      	mov	r2, sl
 801299c:	4631      	mov	r1, r6
 801299e:	4648      	mov	r0, r9
 80129a0:	f8cd 8000 	str.w	r8, [sp]
 80129a4:	f009 ff6e 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+39, Y+27, X+18, Y+42, TFT_White);
 80129a8:	f8cd 8000 	str.w	r8, [sp]
 80129ac:	462b      	mov	r3, r5
 80129ae:	463a      	mov	r2, r7
 80129b0:	4631      	mov	r1, r6
 80129b2:	4620      	mov	r0, r4
 80129b4:	f009 ff66 	bl	801c884 <TFT_DrawLine>
}
 80129b8:	b003      	add	sp, #12
 80129ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129be <GUI_Button_TFT_On_Off>:

void GUI_Button_TFT_On_Off(uint16_t X, uint16_t Y)
{
 80129be:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80129c0:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80129c4:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80129c8:	f241 3676 	movw	r6, #4982	; 0x1376
{
 80129cc:	4604      	mov	r4, r0
 80129ce:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80129d0:	9600      	str	r6, [sp, #0]
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	b292      	uxth	r2, r2
 80129d6:	f009 ffb2 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawRectangle(X+8, Y+16, X+48, Y+39, TFT_White);
 80129da:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80129de:	f105 0327 	add.w	r3, r5, #39	; 0x27
 80129e2:	f104 0230 	add.w	r2, r4, #48	; 0x30
 80129e6:	f105 0110 	add.w	r1, r5, #16
 80129ea:	f104 0008 	add.w	r0, r4, #8
 80129ee:	9600      	str	r6, [sp, #0]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	b292      	uxth	r2, r2
 80129f4:	b289      	uxth	r1, r1
 80129f6:	b280      	uxth	r0, r0
 80129f8:	f009 ffb9 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawLine(X+6, Y+5, X+51, Y+48, TFT_White);
 80129fc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8012a00:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8012a04:	1d69      	adds	r1, r5, #5
 8012a06:	1da0      	adds	r0, r4, #6
 8012a08:	9600      	str	r6, [sp, #0]
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	b292      	uxth	r2, r2
 8012a0e:	b289      	uxth	r1, r1
 8012a10:	b280      	uxth	r0, r0
 8012a12:	f009 ff37 	bl	801c884 <TFT_DrawLine>
}
 8012a16:	b002      	add	sp, #8
 8012a18:	bd70      	pop	{r4, r5, r6, pc}

08012a1a <GUI_Button_TFT_Rotate>:

void GUI_Button_TFT_Rotate(uint16_t X, uint16_t Y)
{
 8012a1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012a1e:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012a22:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012a24:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012a28:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8012a2c:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012a2e:	9600      	str	r6, [sp, #0]
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	b292      	uxth	r2, r2
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8012a34:	f105 071c 	add.w	r7, r5, #28
 8012a38:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012a3c:	f009 ff7f 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8012a40:	b2bf      	uxth	r7, r7
 8012a42:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 8012a46:	f104 0109 	add.w	r1, r4, #9
 8012a4a:	f105 0009 	add.w	r0, r5, #9
 8012a4e:	463a      	mov	r2, r7
 8012a50:	9600      	str	r6, [sp, #0]
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	b289      	uxth	r1, r1
 8012a56:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8012a58:	f104 081e 	add.w	r8, r4, #30
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8012a5c:	f009 ff87 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8012a60:	fa1f f888 	uxth.w	r8, r8
 8012a64:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8012a68:	f105 0231 	add.w	r2, r5, #49	; 0x31
 8012a6c:	f105 0012 	add.w	r0, r5, #18
 8012a70:	4641      	mov	r1, r8
 8012a72:	9600      	str	r6, [sp, #0]
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	b292      	uxth	r2, r2
 8012a78:	b280      	uxth	r0, r0
 8012a7a:	f009 ff78 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
	
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012a7e:	f105 0921 	add.w	r9, r5, #33	; 0x21
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8012a82:	fa0f f188 	sxth.w	r1, r8
 8012a86:	b238      	sxth	r0, r7
 8012a88:	9600      	str	r6, [sp, #0]
 8012a8a:	2302      	movs	r3, #2
 8012a8c:	2210      	movs	r2, #16
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012a8e:	f105 071d 	add.w	r7, r5, #29
 8012a92:	f104 080e 	add.w	r8, r4, #14
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8012a96:	f009 fdab 	bl	801c5f0 <TFT_DrawCircleCorner>
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012a9a:	b2bf      	uxth	r7, r7
 8012a9c:	fa1f f888 	uxth.w	r8, r8
 8012aa0:	fa1f f989 	uxth.w	r9, r9
 8012aa4:	f104 0313 	add.w	r3, r4, #19
 8012aa8:	464a      	mov	r2, r9
 8012aaa:	4641      	mov	r1, r8
 8012aac:	4638      	mov	r0, r7
 8012aae:	9600      	str	r6, [sp, #0]
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	f009 fee7 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8012ab6:	f104 030b 	add.w	r3, r4, #11
 8012aba:	464a      	mov	r2, r9
 8012abc:	4641      	mov	r1, r8
 8012abe:	4638      	mov	r0, r7
 8012ac0:	9600      	str	r6, [sp, #0]
 8012ac2:	b29b      	uxth	r3, r3
	
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8012ac4:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8012ac8:	f104 081d 	add.w	r8, r4, #29
 8012acc:	3419      	adds	r4, #25
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8012ace:	f009 fed9 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8012ad2:	b2bf      	uxth	r7, r7
 8012ad4:	fa1f f888 	uxth.w	r8, r8
 8012ad8:	b2a4      	uxth	r4, r4
 8012ada:	f105 0227 	add.w	r2, r5, #39	; 0x27
 8012ade:	4623      	mov	r3, r4
 8012ae0:	4641      	mov	r1, r8
 8012ae2:	4638      	mov	r0, r7
 8012ae4:	9600      	str	r6, [sp, #0]
 8012ae6:	b292      	uxth	r2, r2
 8012ae8:	f009 fecc 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+47, Y+25, TFT_White);
 8012aec:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 8012af0:	9600      	str	r6, [sp, #0]
 8012af2:	4623      	mov	r3, r4
 8012af4:	b292      	uxth	r2, r2
 8012af6:	4641      	mov	r1, r8
 8012af8:	4638      	mov	r0, r7
 8012afa:	f009 fec3 	bl	801c884 <TFT_DrawLine>
}
 8012afe:	b003      	add	sp, #12
 8012b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012b04 <GUI_Button_SD_Card>:

void GUI_Button_SD_Card(uint16_t X, uint16_t Y, uint8_t Active)
{
 8012b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b08:	b085      	sub	sp, #20
 8012b0a:	4604      	mov	r4, r0
	
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8012b0c:	9203      	str	r2, [sp, #12]
 8012b0e:	9e03      	ldr	r6, [sp, #12]
{
 8012b10:	460d      	mov	r5, r1
 8012b12:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012b16:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8012b1a:	2e00      	cmp	r6, #0
 8012b1c:	f000 80b6 	beq.w	8012c8c <GUI_Button_SD_Card+0x188>
 8012b20:	f241 3676 	movw	r6, #4982	; 0x1376
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
	
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012b24:	f104 0715 	add.w	r7, r4, #21
 8012b28:	f105 0b05 	add.w	fp, r5, #5
 8012b2c:	f104 092e 	add.w	r9, r4, #46	; 0x2e
 8012b30:	f105 0a07 	add.w	sl, r5, #7
 8012b34:	b2bf      	uxth	r7, r7
 8012b36:	fa1f f989 	uxth.w	r9, r9
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012b3a:	9600      	str	r6, [sp, #0]
 8012b3c:	b29b      	uxth	r3, r3
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012b3e:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012b42:	b292      	uxth	r2, r2
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012b44:	fa1f fb8b 	uxth.w	fp, fp
 8012b48:	fa1f fa8a 	uxth.w	sl, sl
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012b4c:	f009 fef7 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8012b50:	f105 0832 	add.w	r8, r5, #50	; 0x32
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8012b54:	464a      	mov	r2, r9
 8012b56:	4638      	mov	r0, r7
 8012b58:	4653      	mov	r3, sl
 8012b5a:	4659      	mov	r1, fp
 8012b5c:	9600      	str	r6, [sp, #0]
 8012b5e:	f009 feee 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8012b62:	fa1f f888 	uxth.w	r8, r8
 8012b66:	f105 0108 	add.w	r1, r5, #8
 8012b6a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8012b6e:	4643      	mov	r3, r8
 8012b70:	464a      	mov	r2, r9
 8012b72:	b289      	uxth	r1, r1
 8012b74:	b280      	uxth	r0, r0
 8012b76:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8012b78:	f104 090a 	add.w	r9, r4, #10
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8012b7c:	f009 fedf 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8012b80:	fa1f f989 	uxth.w	r9, r9
 8012b84:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8012b88:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8012b8c:	4643      	mov	r3, r8
 8012b8e:	464a      	mov	r2, r9
 8012b90:	b289      	uxth	r1, r1
 8012b92:	b280      	uxth	r0, r0
 8012b94:	9600      	str	r6, [sp, #0]
 8012b96:	f009 fed2 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+10, Y+16, X+12, Y+47, TFT_White);
 8012b9a:	f104 030c 	add.w	r3, r4, #12
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	f105 0810 	add.w	r8, r5, #16
 8012ba4:	fa1f f888 	uxth.w	r8, r8
 8012ba8:	9302      	str	r3, [sp, #8]
 8012baa:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 8012bae:	4641      	mov	r1, r8
 8012bb0:	4648      	mov	r0, r9
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	9a02      	ldr	r2, [sp, #8]
 8012bb6:	9600      	str	r6, [sp, #0]
 8012bb8:	f009 fec1 	bl	801c93e <TFT_FillRectangle>
	
	TFT_DrawLine(X+10, Y+16, X+21, Y+5, TFT_White);
 8012bbc:	463a      	mov	r2, r7
 8012bbe:	4641      	mov	r1, r8
 8012bc0:	4648      	mov	r0, r9
 8012bc2:	465b      	mov	r3, fp
 8012bc4:	9600      	str	r6, [sp, #0]
 8012bc6:	f009 fe5d 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+16, X+21, Y+6, TFT_White);
 8012bca:	1dab      	adds	r3, r5, #6
 8012bcc:	f104 000b 	add.w	r0, r4, #11
 8012bd0:	463a      	mov	r2, r7
 8012bd2:	4641      	mov	r1, r8
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	b280      	uxth	r0, r0
 8012bd8:	9600      	str	r6, [sp, #0]
 8012bda:	f009 fe53 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
	
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012bde:	f105 0913 	add.w	r9, r5, #19
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8012be2:	463a      	mov	r2, r7
 8012be4:	4641      	mov	r1, r8
 8012be6:	4653      	mov	r3, sl
 8012be8:	9802      	ldr	r0, [sp, #8]
 8012bea:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012bec:	f105 080d 	add.w	r8, r5, #13
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8012bf0:	f009 fe48 	bl	801c884 <TFT_DrawLine>
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012bf4:	fa1f f888 	uxth.w	r8, r8
 8012bf8:	fa1f f989 	uxth.w	r9, r9
 8012bfc:	f104 0013 	add.w	r0, r4, #19
 8012c00:	463a      	mov	r2, r7
 8012c02:	464b      	mov	r3, r9
 8012c04:	4641      	mov	r1, r8
 8012c06:	b280      	uxth	r0, r0
 8012c08:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8012c0a:	f104 071b 	add.w	r7, r4, #27
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012c0e:	f009 fe96 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8012c12:	b2bf      	uxth	r7, r7
 8012c14:	f104 0019 	add.w	r0, r4, #25
 8012c18:	464b      	mov	r3, r9
 8012c1a:	463a      	mov	r2, r7
 8012c1c:	4641      	mov	r1, r8
 8012c1e:	b280      	uxth	r0, r0
 8012c20:	9600      	str	r6, [sp, #0]
 8012c22:	f009 fe8c 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+31, Y+13, X+33, Y+19, TFT_White);
 8012c26:	f104 0221 	add.w	r2, r4, #33	; 0x21
 8012c2a:	f104 001f 	add.w	r0, r4, #31
 8012c2e:	464b      	mov	r3, r9
 8012c30:	b292      	uxth	r2, r2
 8012c32:	4641      	mov	r1, r8
 8012c34:	b280      	uxth	r0, r0
 8012c36:	9600      	str	r6, [sp, #0]
 8012c38:	f009 fe81 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+37, Y+13, X+39, Y+19, TFT_White);
 8012c3c:	f104 0227 	add.w	r2, r4, #39	; 0x27
 8012c40:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8012c44:	464b      	mov	r3, r9
 8012c46:	b292      	uxth	r2, r2
 8012c48:	4641      	mov	r1, r8
 8012c4a:	b280      	uxth	r0, r0
 8012c4c:	9600      	str	r6, [sp, #0]
 8012c4e:	f009 fe76 	bl	801c93e <TFT_FillRectangle>
	
	TFT_SetFont(&Font20);
 8012c52:	4811      	ldr	r0, [pc, #68]	; (8012c98 <GUI_Button_SD_Card+0x194>)
 8012c54:	f00a f89c 	bl	801cd90 <TFT_SetFont>
	TFT_SetTextColor(TFT_White);
 8012c58:	4630      	mov	r0, r6
 8012c5a:	f00a f89f 	bl	801cd9c <TFT_SetTextColor>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012c5e:	9b03      	ldr	r3, [sp, #12]
 8012c60:	b1bb      	cbz	r3, 8012c92 <GUI_Button_SD_Card+0x18e>
 8012c62:	f241 3076 	movw	r0, #4982	; 0x1376
	TFT_DrawChar(X+16, Y+28, 'S');
 8012c66:	351c      	adds	r5, #28
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012c68:	f00a f89e 	bl	801cda8 <TFT_SetBackColor>
	TFT_DrawChar(X+16, Y+28, 'S');
 8012c6c:	b2ad      	uxth	r5, r5
 8012c6e:	f104 0010 	add.w	r0, r4, #16
 8012c72:	4629      	mov	r1, r5
 8012c74:	2253      	movs	r2, #83	; 0x53
 8012c76:	b280      	uxth	r0, r0
 8012c78:	f00a f954 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+28, 'D');
 8012c7c:	2244      	movs	r2, #68	; 0x44
 8012c7e:	4629      	mov	r1, r5
 8012c80:	4638      	mov	r0, r7
}
 8012c82:	b005      	add	sp, #20
 8012c84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawChar(X+27, Y+28, 'D');
 8012c88:	f00a b94c 	b.w	801cf24 <TFT_DrawChar>
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012c8c:	f64d 761c 	movw	r6, #57116	; 0xdf1c
 8012c90:	e748      	b.n	8012b24 <GUI_Button_SD_Card+0x20>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012c92:	f64d 701c 	movw	r0, #57116	; 0xdf1c
 8012c96:	e7e6      	b.n	8012c66 <GUI_Button_SD_Card+0x162>
 8012c98:	200001e0 	.word	0x200001e0

08012c9c <GUI_Button_Measure_Start_Pause>:

void GUI_Button_Measure_Start_Pause(uint16_t X, uint16_t Y)
{
 8012c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(!pause)	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012ca0:	4bc0      	ldr	r3, [pc, #768]	; (8012fa4 <GUI_Button_Measure_Start_Pause+0x308>)
 8012ca2:	781e      	ldrb	r6, [r3, #0]
{
 8012ca4:	b085      	sub	sp, #20
 8012ca6:	4605      	mov	r5, r0
 8012ca8:	460c      	mov	r4, r1
 8012caa:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012cae:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(!pause)	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012cb2:	2e00      	cmp	r6, #0
 8012cb4:	f040 8173 	bne.w	8012f9e <GUI_Button_Measure_Start_Pause+0x302>
 8012cb8:	f241 3676 	movw	r6, #4982	; 0x1376
	else  TFT_FillRectangle(X, Y, X+54, Y+54, TFT_PAR_IRed);
 8012cbc:	9600      	str	r6, [sp, #0]
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	b292      	uxth	r2, r2

	
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8012cc2:	f104 090b 	add.w	r9, r4, #11
 8012cc6:	f104 072b 	add.w	r7, r4, #43	; 0x2b
 8012cca:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else  TFT_FillRectangle(X, Y, X+54, Y+54, TFT_PAR_IRed);
 8012cce:	f009 fe36 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8012cd2:	fa1f f989 	uxth.w	r9, r9
 8012cd6:	b2bf      	uxth	r7, r7
 8012cd8:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8012cdc:	f105 0023 	add.w	r0, r5, #35	; 0x23
 8012ce0:	463b      	mov	r3, r7
 8012ce2:	4649      	mov	r1, r9
 8012ce4:	9600      	str	r6, [sp, #0]
 8012ce6:	b292      	uxth	r2, r2
 8012ce8:	b280      	uxth	r0, r0
 8012cea:	f009 fe28 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8012cee:	f105 0232 	add.w	r2, r5, #50	; 0x32
 8012cf2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8012cf6:	463b      	mov	r3, r7
 8012cf8:	4649      	mov	r1, r9
 8012cfa:	9600      	str	r6, [sp, #0]
 8012cfc:	b292      	uxth	r2, r2
 8012cfe:	b280      	uxth	r0, r0
	
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012d00:	f105 0806 	add.w	r8, r5, #6
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8012d04:	f009 fe1b 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012d08:	fa1f f888 	uxth.w	r8, r8
 8012d0c:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8012d10:	f105 0a1e 	add.w	sl, r5, #30
 8012d14:	f104 0b1b 	add.w	fp, r4, #27
 8012d18:	fa1f fa8a 	uxth.w	sl, sl
 8012d1c:	fa1f fb8b 	uxth.w	fp, fp
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012d20:	b29b      	uxth	r3, r3
 8012d22:	4642      	mov	r2, r8
 8012d24:	4649      	mov	r1, r9
 8012d26:	4640      	mov	r0, r8
 8012d28:	9600      	str	r6, [sp, #0]
 8012d2a:	9303      	str	r3, [sp, #12]
 8012d2c:	f009 fdaa 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8012d30:	465b      	mov	r3, fp
 8012d32:	4652      	mov	r2, sl
 8012d34:	4649      	mov	r1, r9
 8012d36:	4640      	mov	r0, r8
 8012d38:	9600      	str	r6, [sp, #0]
 8012d3a:	f009 fda3 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+44, X+30, Y+27, TFT_White);
 8012d3e:	465b      	mov	r3, fp
 8012d40:	4652      	mov	r2, sl
 8012d42:	9903      	ldr	r1, [sp, #12]
 8012d44:	9600      	str	r6, [sp, #0]
 8012d46:	4640      	mov	r0, r8
 8012d48:	f009 fd9c 	bl	801c884 <TFT_DrawLine>
	
	//paint white
	TFT_DrawLine(X+7, Y+12, X+7, Y+43, TFT_White);
 8012d4c:	f104 080c 	add.w	r8, r4, #12
 8012d50:	1dea      	adds	r2, r5, #7
 8012d52:	b292      	uxth	r2, r2
 8012d54:	fa1f f888 	uxth.w	r8, r8
 8012d58:	463b      	mov	r3, r7
 8012d5a:	4641      	mov	r1, r8
 8012d5c:	4610      	mov	r0, r2
 8012d5e:	9600      	str	r6, [sp, #0]
 8012d60:	f009 fd90 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+8, Y+12, X+8, Y+43, TFT_White);
 8012d64:	f105 0208 	add.w	r2, r5, #8
 8012d68:	b292      	uxth	r2, r2
 8012d6a:	463b      	mov	r3, r7
 8012d6c:	4641      	mov	r1, r8
 8012d6e:	4610      	mov	r0, r2
 8012d70:	9600      	str	r6, [sp, #0]
 8012d72:	f009 fd87 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+9, Y+13, X+9, Y+42, TFT_White);
 8012d76:	f105 0209 	add.w	r2, r5, #9
 8012d7a:	b292      	uxth	r2, r2
 8012d7c:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8012d80:	f104 010d 	add.w	r1, r4, #13
 8012d84:	4610      	mov	r0, r2
 8012d86:	9600      	str	r6, [sp, #0]
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	b289      	uxth	r1, r1
 8012d8c:	f009 fd7a 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+14, X+10, Y+41, TFT_White);
 8012d90:	f104 080e 	add.w	r8, r4, #14
 8012d94:	f105 020a 	add.w	r2, r5, #10
 8012d98:	b292      	uxth	r2, r2
 8012d9a:	fa1f f888 	uxth.w	r8, r8
 8012d9e:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8012da2:	4641      	mov	r1, r8
 8012da4:	4610      	mov	r0, r2
 8012da6:	9600      	str	r6, [sp, #0]
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	f009 fd6b 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+14, X+11, Y+40, TFT_White);
 8012dae:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8012db2:	f105 020b 	add.w	r2, r5, #11
 8012db6:	b292      	uxth	r2, r2
 8012db8:	b2bf      	uxth	r7, r7
 8012dba:	463b      	mov	r3, r7
 8012dbc:	4641      	mov	r1, r8
 8012dbe:	4610      	mov	r0, r2
 8012dc0:	9600      	str	r6, [sp, #0]
 8012dc2:	f009 fd5f 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+15, X+12, Y+40, TFT_White);
 8012dc6:	f105 020c 	add.w	r2, r5, #12
 8012dca:	b292      	uxth	r2, r2
 8012dcc:	f104 010f 	add.w	r1, r4, #15
 8012dd0:	463b      	mov	r3, r7
 8012dd2:	4610      	mov	r0, r2
 8012dd4:	9600      	str	r6, [sp, #0]
 8012dd6:	b289      	uxth	r1, r1
 8012dd8:	f009 fd54 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+16, X+13, Y+39, TFT_White);
 8012ddc:	f104 0810 	add.w	r8, r4, #16
 8012de0:	f105 020d 	add.w	r2, r5, #13
 8012de4:	b292      	uxth	r2, r2
 8012de6:	fa1f f888 	uxth.w	r8, r8
 8012dea:	f104 0327 	add.w	r3, r4, #39	; 0x27
 8012dee:	4641      	mov	r1, r8
 8012df0:	4610      	mov	r0, r2
 8012df2:	9600      	str	r6, [sp, #0]
 8012df4:	b29b      	uxth	r3, r3
 8012df6:	f009 fd45 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+16, X+14, Y+38, TFT_White);
 8012dfa:	f104 0726 	add.w	r7, r4, #38	; 0x26
 8012dfe:	f105 020e 	add.w	r2, r5, #14
 8012e02:	b292      	uxth	r2, r2
 8012e04:	b2bf      	uxth	r7, r7
 8012e06:	463b      	mov	r3, r7
 8012e08:	4641      	mov	r1, r8
 8012e0a:	4610      	mov	r0, r2
 8012e0c:	9600      	str	r6, [sp, #0]
 8012e0e:	f009 fd39 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+17, X+15, Y+38, TFT_White);
 8012e12:	f105 020f 	add.w	r2, r5, #15
 8012e16:	b292      	uxth	r2, r2
 8012e18:	f104 0111 	add.w	r1, r4, #17
 8012e1c:	463b      	mov	r3, r7
 8012e1e:	4610      	mov	r0, r2
 8012e20:	9600      	str	r6, [sp, #0]
 8012e22:	b289      	uxth	r1, r1
 8012e24:	f009 fd2e 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+18, X+16, Y+37, TFT_White);
 8012e28:	f104 0812 	add.w	r8, r4, #18
 8012e2c:	f105 0210 	add.w	r2, r5, #16
 8012e30:	b292      	uxth	r2, r2
 8012e32:	fa1f f888 	uxth.w	r8, r8
 8012e36:	f104 0325 	add.w	r3, r4, #37	; 0x25
 8012e3a:	4641      	mov	r1, r8
 8012e3c:	4610      	mov	r0, r2
 8012e3e:	9600      	str	r6, [sp, #0]
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	f009 fd1f 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+18, X+17, Y+36, TFT_White);
 8012e46:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8012e4a:	f105 0211 	add.w	r2, r5, #17
 8012e4e:	b292      	uxth	r2, r2
 8012e50:	b2bf      	uxth	r7, r7
 8012e52:	463b      	mov	r3, r7
 8012e54:	4641      	mov	r1, r8
 8012e56:	4610      	mov	r0, r2
 8012e58:	9600      	str	r6, [sp, #0]
 8012e5a:	f009 fd13 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+19, X+18, Y+36, TFT_White);
 8012e5e:	f105 0212 	add.w	r2, r5, #18
 8012e62:	b292      	uxth	r2, r2
 8012e64:	f104 0113 	add.w	r1, r4, #19
 8012e68:	463b      	mov	r3, r7
 8012e6a:	4610      	mov	r0, r2
 8012e6c:	9600      	str	r6, [sp, #0]
 8012e6e:	b289      	uxth	r1, r1
 8012e70:	f009 fd08 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+20, X+19, Y+35, TFT_White);
 8012e74:	f104 0714 	add.w	r7, r4, #20
 8012e78:	f105 0213 	add.w	r2, r5, #19
 8012e7c:	b292      	uxth	r2, r2
 8012e7e:	b2bf      	uxth	r7, r7
 8012e80:	f104 0323 	add.w	r3, r4, #35	; 0x23
 8012e84:	4639      	mov	r1, r7
 8012e86:	4610      	mov	r0, r2
 8012e88:	9600      	str	r6, [sp, #0]
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	f009 fcfa 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+20, X+20, Y+34, TFT_White);
 8012e90:	f105 0214 	add.w	r2, r5, #20
 8012e94:	b292      	uxth	r2, r2
 8012e96:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8012e9a:	4639      	mov	r1, r7
 8012e9c:	4610      	mov	r0, r2
 8012e9e:	9600      	str	r6, [sp, #0]
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	f009 fcef 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+21, X+21, Y+33, TFT_White);
 8012ea6:	f104 0821 	add.w	r8, r4, #33	; 0x21
 8012eaa:	f105 0215 	add.w	r2, r5, #21
 8012eae:	b292      	uxth	r2, r2
 8012eb0:	fa1f f888 	uxth.w	r8, r8
 8012eb4:	f104 0115 	add.w	r1, r4, #21
 8012eb8:	4643      	mov	r3, r8
 8012eba:	4610      	mov	r0, r2
 8012ebc:	9600      	str	r6, [sp, #0]
 8012ebe:	b289      	uxth	r1, r1
 8012ec0:	f009 fce0 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+22, X+22, Y+33, TFT_White);
 8012ec4:	f104 0716 	add.w	r7, r4, #22
 8012ec8:	f105 0216 	add.w	r2, r5, #22
 8012ecc:	b292      	uxth	r2, r2
 8012ece:	b2bf      	uxth	r7, r7
 8012ed0:	4643      	mov	r3, r8
 8012ed2:	4639      	mov	r1, r7
 8012ed4:	4610      	mov	r0, r2
 8012ed6:	9600      	str	r6, [sp, #0]
 8012ed8:	f009 fcd4 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+22, X+23, Y+32, TFT_White);
 8012edc:	f105 0217 	add.w	r2, r5, #23
 8012ee0:	b292      	uxth	r2, r2
 8012ee2:	f104 0320 	add.w	r3, r4, #32
 8012ee6:	4639      	mov	r1, r7
 8012ee8:	4610      	mov	r0, r2
 8012eea:	9600      	str	r6, [sp, #0]
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	f009 fcc9 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+23, X+24, Y+31, TFT_White);
 8012ef2:	f104 081f 	add.w	r8, r4, #31
 8012ef6:	f105 0218 	add.w	r2, r5, #24
 8012efa:	b292      	uxth	r2, r2
 8012efc:	fa1f f888 	uxth.w	r8, r8
 8012f00:	f104 0117 	add.w	r1, r4, #23
 8012f04:	4643      	mov	r3, r8
 8012f06:	4610      	mov	r0, r2
 8012f08:	9600      	str	r6, [sp, #0]
 8012f0a:	b289      	uxth	r1, r1
 8012f0c:	f009 fcba 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+24, X+25, Y+31, TFT_White);
 8012f10:	f104 0718 	add.w	r7, r4, #24
 8012f14:	f105 0219 	add.w	r2, r5, #25
 8012f18:	b292      	uxth	r2, r2
 8012f1a:	b2bf      	uxth	r7, r7
 8012f1c:	4643      	mov	r3, r8
 8012f1e:	4639      	mov	r1, r7
 8012f20:	4610      	mov	r0, r2
 8012f22:	9600      	str	r6, [sp, #0]
 8012f24:	f009 fcae 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
 8012f28:	f105 021a 	add.w	r2, r5, #26
 8012f2c:	b292      	uxth	r2, r2
 8012f2e:	f104 031e 	add.w	r3, r4, #30
 8012f32:	4639      	mov	r1, r7
 8012f34:	4610      	mov	r0, r2
 8012f36:	9600      	str	r6, [sp, #0]
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	f009 fca3 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
 8012f3e:	f104 0819 	add.w	r8, r4, #25
 8012f42:	f105 021b 	add.w	r2, r5, #27
 8012f46:	b292      	uxth	r2, r2
 8012f48:	fa1f f888 	uxth.w	r8, r8
 8012f4c:	f104 031d 	add.w	r3, r4, #29
 8012f50:	4641      	mov	r1, r8
 8012f52:	4610      	mov	r0, r2
 8012f54:	9600      	str	r6, [sp, #0]
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	f009 fc94 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
 8012f5c:	f104 071c 	add.w	r7, r4, #28
 8012f60:	f105 021c 	add.w	r2, r5, #28
 8012f64:	b292      	uxth	r2, r2
 8012f66:	b2bf      	uxth	r7, r7
 8012f68:	463b      	mov	r3, r7
 8012f6a:	4641      	mov	r1, r8
 8012f6c:	4610      	mov	r0, r2
 8012f6e:	9600      	str	r6, [sp, #0]
 8012f70:	f009 fc88 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
 8012f74:	f105 021d 	add.w	r2, r5, #29
 8012f78:	b292      	uxth	r2, r2
 8012f7a:	f104 011a 	add.w	r1, r4, #26
 8012f7e:	463b      	mov	r3, r7
 8012f80:	4610      	mov	r0, r2
 8012f82:	9600      	str	r6, [sp, #0]
 8012f84:	b289      	uxth	r1, r1
 8012f86:	f009 fc7d 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
 8012f8a:	9600      	str	r6, [sp, #0]
 8012f8c:	465b      	mov	r3, fp
 8012f8e:	4652      	mov	r2, sl
 8012f90:	4659      	mov	r1, fp
 8012f92:	4650      	mov	r0, sl
 8012f94:	f009 fc76 	bl	801c884 <TFT_DrawLine>
}
 8012f98:	b005      	add	sp, #20
 8012f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else  TFT_FillRectangle(X, Y, X+54, Y+54, TFT_PAR_IRed);
 8012f9e:	f646 0682 	movw	r6, #26754	; 0x6882
 8012fa2:	e68b      	b.n	8012cbc <GUI_Button_Measure_Start_Pause+0x20>
 8012fa4:	20005728 	.word	0x20005728

08012fa8 <GUI_Button_Measure_deltaE_Small>:

void GUI_Button_Measure_deltaE_Small(uint16_t X, uint16_t Y, uint16_t Active, uint8_t color)
{
 8012fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fac:	4605      	mov	r5, r0
 8012fae:	460c      	mov	r4, r1
 8012fb0:	f100 0623 	add.w	r6, r0, #35	; 0x23
 8012fb4:	f101 0723 	add.w	r7, r1, #35	; 0x23
		if(Active){
 8012fb8:	2a00      	cmp	r2, #0
 8012fba:	f000 8111 	beq.w	80131e0 <GUI_Button_Measure_deltaE_Small+0x238>
			TFT_FillRectangle(X, Y, X+35, Y+35, color == 0 ? TFT_Blue_Off:TFT_Green);
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	f241 3276 	movw	r2, #4982	; 0x1376
 8012fc4:	bf18      	it	ne
 8012fc6:	f44f 62fc 	movne.w	r2, #2016	; 0x7e0
 8012fca:	9200      	str	r2, [sp, #0]
		}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
	
	
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012fcc:	f105 080a 	add.w	r8, r5, #10
 8012fd0:	f104 0b07 	add.w	fp, r4, #7
 8012fd4:	f104 091e 	add.w	r9, r4, #30
 8012fd8:	fa1f f888 	uxth.w	r8, r8
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8012fdc:	b2bb      	uxth	r3, r7
 8012fde:	b2b2      	uxth	r2, r6
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012fe0:	fa1f fb8b 	uxth.w	fp, fp
 8012fe4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8012fe8:	fa1f f989 	uxth.w	r9, r9
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012fec:	f105 0a1c 	add.w	sl, r5, #28
 8012ff0:	f104 0712 	add.w	r7, r4, #18
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8012ff4:	f009 fca3 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012ff8:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012ffa:	464b      	mov	r3, r9
 8012ffc:	4642      	mov	r2, r8
 8012ffe:	4659      	mov	r1, fp
 8013000:	4640      	mov	r0, r8
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8013002:	fa1f fa8a 	uxth.w	sl, sl
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8013006:	9600      	str	r6, [sp, #0]
 8013008:	f009 fc3c 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 801300c:	463b      	mov	r3, r7
 801300e:	4652      	mov	r2, sl
 8013010:	4659      	mov	r1, fp
 8013012:	4640      	mov	r0, r8
 8013014:	9600      	str	r6, [sp, #0]
 8013016:	f009 fc35 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+30, X+28, Y+18, TFT_White);
 801301a:	463b      	mov	r3, r7
 801301c:	4652      	mov	r2, sl
 801301e:	4649      	mov	r1, r9
 8013020:	4640      	mov	r0, r8
 8013022:	9600      	str	r6, [sp, #0]
 8013024:	f009 fc2e 	bl	801c884 <TFT_DrawLine>
	
	//paint
	TFT_DrawLine(X+11, Y+8, X+11, Y+29, TFT_White);
 8013028:	f105 020b 	add.w	r2, r5, #11
 801302c:	b292      	uxth	r2, r2
 801302e:	f104 031d 	add.w	r3, r4, #29
 8013032:	f104 0108 	add.w	r1, r4, #8
 8013036:	4610      	mov	r0, r2
 8013038:	9600      	str	r6, [sp, #0]
 801303a:	b29b      	uxth	r3, r3
 801303c:	b289      	uxth	r1, r1
 801303e:	f009 fc21 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+9, X+12, Y+28, TFT_White);
 8013042:	f104 091c 	add.w	r9, r4, #28
 8013046:	f105 020c 	add.w	r2, r5, #12
 801304a:	b292      	uxth	r2, r2
 801304c:	fa1f f989 	uxth.w	r9, r9
 8013050:	f104 0109 	add.w	r1, r4, #9
 8013054:	464b      	mov	r3, r9
 8013056:	4610      	mov	r0, r2
 8013058:	9600      	str	r6, [sp, #0]
 801305a:	b289      	uxth	r1, r1
 801305c:	f009 fc12 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+10, X+13, Y+28, TFT_White);
 8013060:	f104 080a 	add.w	r8, r4, #10
 8013064:	f105 020d 	add.w	r2, r5, #13
 8013068:	b292      	uxth	r2, r2
 801306a:	fa1f f888 	uxth.w	r8, r8
 801306e:	464b      	mov	r3, r9
 8013070:	4641      	mov	r1, r8
 8013072:	4610      	mov	r0, r2
 8013074:	9600      	str	r6, [sp, #0]
 8013076:	f009 fc05 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+10, X+14, Y+27, TFT_White);
 801307a:	f105 020e 	add.w	r2, r5, #14
 801307e:	b292      	uxth	r2, r2
 8013080:	f104 031b 	add.w	r3, r4, #27
 8013084:	4641      	mov	r1, r8
 8013086:	4610      	mov	r0, r2
 8013088:	9600      	str	r6, [sp, #0]
 801308a:	b29b      	uxth	r3, r3
 801308c:	f009 fbfa 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+11, X+15, Y+26, TFT_White);
 8013090:	f104 091a 	add.w	r9, r4, #26
 8013094:	f105 020f 	add.w	r2, r5, #15
 8013098:	b292      	uxth	r2, r2
 801309a:	fa1f f989 	uxth.w	r9, r9
 801309e:	f104 010b 	add.w	r1, r4, #11
 80130a2:	464b      	mov	r3, r9
 80130a4:	4610      	mov	r0, r2
 80130a6:	9600      	str	r6, [sp, #0]
 80130a8:	b289      	uxth	r1, r1
 80130aa:	f009 fbeb 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+12, X+16, Y+26, TFT_White);
 80130ae:	f104 080c 	add.w	r8, r4, #12
 80130b2:	f105 0210 	add.w	r2, r5, #16
 80130b6:	b292      	uxth	r2, r2
 80130b8:	fa1f f888 	uxth.w	r8, r8
 80130bc:	464b      	mov	r3, r9
 80130be:	4641      	mov	r1, r8
 80130c0:	4610      	mov	r0, r2
 80130c2:	9600      	str	r6, [sp, #0]
 80130c4:	f009 fbde 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+12, X+17, Y+25, TFT_White);
 80130c8:	f105 0211 	add.w	r2, r5, #17
 80130cc:	b292      	uxth	r2, r2
 80130ce:	f104 0319 	add.w	r3, r4, #25
 80130d2:	4641      	mov	r1, r8
 80130d4:	4610      	mov	r0, r2
 80130d6:	9600      	str	r6, [sp, #0]
 80130d8:	b29b      	uxth	r3, r3
 80130da:	f009 fbd3 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+13, X+18, Y+24, TFT_White);
 80130de:	f105 0212 	add.w	r2, r5, #18
 80130e2:	b292      	uxth	r2, r2
 80130e4:	f104 0318 	add.w	r3, r4, #24
 80130e8:	f104 010d 	add.w	r1, r4, #13
 80130ec:	4610      	mov	r0, r2
 80130ee:	9600      	str	r6, [sp, #0]
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	b289      	uxth	r1, r1
 80130f4:	f009 fbc6 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+14, X+19, Y+23, TFT_White);
 80130f8:	f104 080e 	add.w	r8, r4, #14
 80130fc:	f105 0213 	add.w	r2, r5, #19
 8013100:	f104 0917 	add.w	r9, r4, #23
 8013104:	b292      	uxth	r2, r2
 8013106:	fa1f f888 	uxth.w	r8, r8
 801310a:	fa1f f989 	uxth.w	r9, r9
 801310e:	464b      	mov	r3, r9
 8013110:	4641      	mov	r1, r8
 8013112:	4610      	mov	r0, r2
 8013114:	9600      	str	r6, [sp, #0]
 8013116:	f009 fbb5 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+14, X+20, Y+23, TFT_White);
 801311a:	f105 0214 	add.w	r2, r5, #20
 801311e:	b292      	uxth	r2, r2
 8013120:	464b      	mov	r3, r9
 8013122:	4641      	mov	r1, r8
 8013124:	4610      	mov	r0, r2
 8013126:	9600      	str	r6, [sp, #0]
 8013128:	f009 fbac 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+15, X+21, Y+22, TFT_White);
 801312c:	f104 080f 	add.w	r8, r4, #15
 8013130:	f105 0215 	add.w	r2, r5, #21
 8013134:	f104 0916 	add.w	r9, r4, #22
 8013138:	b292      	uxth	r2, r2
 801313a:	fa1f f888 	uxth.w	r8, r8
 801313e:	fa1f f989 	uxth.w	r9, r9
 8013142:	464b      	mov	r3, r9
 8013144:	4641      	mov	r1, r8
 8013146:	4610      	mov	r0, r2
 8013148:	9600      	str	r6, [sp, #0]
 801314a:	f009 fb9b 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+15, X+22, Y+22, TFT_White);
 801314e:	f105 0216 	add.w	r2, r5, #22
 8013152:	b292      	uxth	r2, r2
 8013154:	464b      	mov	r3, r9
 8013156:	4641      	mov	r1, r8
 8013158:	4610      	mov	r0, r2
 801315a:	9600      	str	r6, [sp, #0]
 801315c:	f009 fb92 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+16, X+23, Y+21, TFT_White);
 8013160:	f104 0810 	add.w	r8, r4, #16
 8013164:	f105 0217 	add.w	r2, r5, #23
 8013168:	b292      	uxth	r2, r2
 801316a:	fa1f f888 	uxth.w	r8, r8
 801316e:	f104 0315 	add.w	r3, r4, #21
 8013172:	4641      	mov	r1, r8
 8013174:	4610      	mov	r0, r2
 8013176:	9600      	str	r6, [sp, #0]
 8013178:	b29b      	uxth	r3, r3
 801317a:	f009 fb83 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+16, X+24, Y+20, TFT_White);
 801317e:	f104 0914 	add.w	r9, r4, #20
 8013182:	f105 0218 	add.w	r2, r5, #24
 8013186:	b292      	uxth	r2, r2
 8013188:	fa1f f989 	uxth.w	r9, r9
 801318c:	464b      	mov	r3, r9
 801318e:	4641      	mov	r1, r8
 8013190:	4610      	mov	r0, r2
 8013192:	9600      	str	r6, [sp, #0]
 8013194:	f009 fb76 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+17, X+25, Y+20, TFT_White);
 8013198:	f104 0811 	add.w	r8, r4, #17
 801319c:	f105 0219 	add.w	r2, r5, #25
 80131a0:	b292      	uxth	r2, r2
 80131a2:	fa1f f888 	uxth.w	r8, r8
 80131a6:	464b      	mov	r3, r9
 80131a8:	4641      	mov	r1, r8
 80131aa:	4610      	mov	r0, r2
 80131ac:	9600      	str	r6, [sp, #0]
 80131ae:	f009 fb69 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+17, X+26, Y+19, TFT_White);
 80131b2:	3413      	adds	r4, #19
 80131b4:	f105 021a 	add.w	r2, r5, #26
 80131b8:	b292      	uxth	r2, r2
 80131ba:	b2a4      	uxth	r4, r4
 80131bc:	4623      	mov	r3, r4
 80131be:	4641      	mov	r1, r8
 80131c0:	4610      	mov	r0, r2
 80131c2:	9600      	str	r6, [sp, #0]
 80131c4:	f009 fb5e 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+18, X+27, Y+19, TFT_White);
 80131c8:	f105 021b 	add.w	r2, r5, #27
 80131cc:	b292      	uxth	r2, r2
 80131ce:	9600      	str	r6, [sp, #0]
 80131d0:	4623      	mov	r3, r4
 80131d2:	4639      	mov	r1, r7
 80131d4:	4610      	mov	r0, r2
 80131d6:	f009 fb55 	bl	801c884 <TFT_DrawLine>
}
 80131da:	b003      	add	sp, #12
 80131dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 80131e0:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 80131e4:	9300      	str	r3, [sp, #0]
 80131e6:	e6f1      	b.n	8012fcc <GUI_Button_Measure_deltaE_Small+0x24>

080131e8 <GUI_CheckBox>:

void GUI_CheckBox(uint16_t X, uint16_t Y, uint16_t Check)
{
 80131e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 80131ec:	f101 0323 	add.w	r3, r1, #35	; 0x23
{
 80131f0:	4616      	mov	r6, r2
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 80131f2:	f241 3876 	movw	r8, #4982	; 0x1376
 80131f6:	f100 0223 	add.w	r2, r0, #35	; 0x23
 80131fa:	f8cd 8000 	str.w	r8, [sp]
 80131fe:	b29b      	uxth	r3, r3
 8013200:	b292      	uxth	r2, r2
{
 8013202:	4604      	mov	r4, r0
 8013204:	460d      	mov	r5, r1
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8013206:	f009 fbb2 	bl	801c96e <TFT_DrawRectangle>
	if(Check)
 801320a:	b1fe      	cbz	r6, 801324c <GUI_CheckBox+0x64>
		{
			TFT_DrawLine(X+8, Y+17, X+16, Y+26, TFT_Blue_Off);
 801320c:	f104 0610 	add.w	r6, r4, #16
 8013210:	f105 071a 	add.w	r7, r5, #26
 8013214:	b2b6      	uxth	r6, r6
 8013216:	b2bf      	uxth	r7, r7
 8013218:	f105 0111 	add.w	r1, r5, #17
 801321c:	f104 0008 	add.w	r0, r4, #8
 8013220:	463b      	mov	r3, r7
 8013222:	4632      	mov	r2, r6
 8013224:	b289      	uxth	r1, r1
 8013226:	b280      	uxth	r0, r0
 8013228:	f8cd 8000 	str.w	r8, [sp]
 801322c:	f009 fb2a 	bl	801c884 <TFT_DrawLine>
			TFT_DrawLine(X+16, Y+26, X+29, Y+5, TFT_Blue_Off);
 8013230:	1d6b      	adds	r3, r5, #5
 8013232:	f104 021d 	add.w	r2, r4, #29
 8013236:	f8cd 8000 	str.w	r8, [sp]
 801323a:	b29b      	uxth	r3, r3
 801323c:	b292      	uxth	r2, r2
 801323e:	4639      	mov	r1, r7
 8013240:	4630      	mov	r0, r6
 8013242:	f009 fb1f 	bl	801c884 <TFT_DrawLine>
		} else {
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
		}
}
 8013246:	b002      	add	sp, #8
 8013248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
 801324c:	f105 0320 	add.w	r3, r5, #32
 8013250:	f104 0220 	add.w	r2, r4, #32
 8013254:	1ca9      	adds	r1, r5, #2
 8013256:	1ca0      	adds	r0, r4, #2
 8013258:	2463      	movs	r4, #99	; 0x63
 801325a:	9400      	str	r4, [sp, #0]
 801325c:	b29b      	uxth	r3, r3
 801325e:	b292      	uxth	r2, r2
 8013260:	b289      	uxth	r1, r1
 8013262:	b280      	uxth	r0, r0
 8013264:	f009 fb6b 	bl	801c93e <TFT_FillRectangle>
}
 8013268:	e7ed      	b.n	8013246 <GUI_CheckBox+0x5e>

0801326a <GUI_RadioBox>:



void GUI_RadioBox(uint16_t X, uint16_t Y, uint16_t Check, uint16_t Active)
{
 801326a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326e:	f100 0411 	add.w	r4, r0, #17
 8013272:	f101 0511 	add.w	r5, r1, #17
 8013276:	4690      	mov	r8, r2
	if(Active){
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 8013278:	b226      	sxth	r6, r4
 801327a:	b22f      	sxth	r7, r5
	if(Active){
 801327c:	b173      	cbz	r3, 801329c <GUI_RadioBox+0x32>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 801327e:	f241 3376 	movw	r3, #4982	; 0x1376
 8013282:	220f      	movs	r2, #15
 8013284:	4639      	mov	r1, r7
 8013286:	4630      	mov	r0, r6
 8013288:	f009 fa5c 	bl	801c744 <TFT_DrawCircle>
	} else
	{
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
	}
	if(Check)
 801328c:	f1b8 0f00 	cmp.w	r8, #0
 8013290:	d111      	bne.n	80132b6 <GUI_RadioBox+0x4c>
			if(Active)
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
		} else
		{
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8013292:	2363      	movs	r3, #99	; 0x63
 8013294:	220a      	movs	r2, #10
 8013296:	b229      	sxth	r1, r5
 8013298:	b220      	sxth	r0, r4
 801329a:	e011      	b.n	80132c0 <GUI_RadioBox+0x56>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
 801329c:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 80132a0:	220f      	movs	r2, #15
 80132a2:	4639      	mov	r1, r7
 80132a4:	4630      	mov	r0, r6
 80132a6:	f009 fa4d 	bl	801c744 <TFT_DrawCircle>
	if(Check)
 80132aa:	f1b8 0f00 	cmp.w	r8, #0
 80132ae:	d0f0      	beq.n	8013292 <GUI_RadioBox+0x28>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 80132b0:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 80132b4:	e001      	b.n	80132ba <GUI_RadioBox+0x50>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
 80132b6:	f241 3376 	movw	r3, #4982	; 0x1376
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 80132ba:	220a      	movs	r2, #10
 80132bc:	4639      	mov	r1, r7
 80132be:	4630      	mov	r0, r6
		}
}
 80132c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 80132c4:	f009 bb77 	b.w	801c9b6 <TFT_DrawFilledCircle>

080132c8 <GUI_Switch_Button>:

void GUI_Switch_Button(uint16_t X, uint16_t Y, uint8_t Check)
{
 80132c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80132cc:	f101 031c 	add.w	r3, r1, #28
 80132d0:	2663      	movs	r6, #99	; 0x63
{
 80132d2:	4617      	mov	r7, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80132d4:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
 80132d8:	460d      	mov	r5, r1
 80132da:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80132dc:	9600      	str	r6, [sp, #0]
 80132de:	b29b      	uxth	r3, r3
 80132e0:	b292      	uxth	r2, r2
 80132e2:	f009 fb2c 	bl	801c93e <TFT_FillRectangle>
 80132e6:	f105 0611 	add.w	r6, r5, #17
 80132ea:	f105 0318 	add.w	r3, r5, #24
 80132ee:	f105 010a 	add.w	r1, r5, #10
 80132f2:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80132f6:	4d1c      	ldr	r5, [pc, #112]	; (8013368 <GUI_Switch_Button+0xa0>)
	if(Check)
 80132f8:	b1d7      	cbz	r7, 8013330 <GUI_Switch_Button+0x68>
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 80132fa:	f242 409b 	movw	r0, #9371	; 0x249b
 80132fe:	270a      	movs	r7, #10
 8013300:	9001      	str	r0, [sp, #4]
 8013302:	b29b      	uxth	r3, r3
 8013304:	b292      	uxth	r2, r2
 8013306:	b289      	uxth	r1, r1
 8013308:	4620      	mov	r0, r4
 801330a:	9700      	str	r7, [sp, #0]
 801330c:	f009 fc9c 	bl	801cc48 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8013310:	f104 0019 	add.w	r0, r4, #25
 8013314:	f241 3376 	movw	r3, #4982	; 0x1376
 8013318:	463a      	mov	r2, r7
 801331a:	b231      	sxth	r1, r6
 801331c:	b200      	sxth	r0, r0
 801331e:	f009 fb4a 	bl	801c9b6 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x00){
 8013322:	782b      	ldrb	r3, [r5, #0]
 8013324:	b90b      	cbnz	r3, 801332a <GUI_Switch_Button+0x62>
				BlueTooth_On; //Enable Bluetooth
				BluetoothStat = 0x01;
 8013326:	2301      	movs	r3, #1
 8013328:	702b      	strb	r3, [r5, #0]
			if(BluetoothStat == 0x01){
				BlueTooth_Off; //Disable Bluetooth
				BluetoothStat = 0x00;
			}
		}
}
 801332a:	b002      	add	sp, #8
 801332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_LightGrey);
 8013330:	f04f 080a 	mov.w	r8, #10
 8013334:	f24c 6018 	movw	r0, #50712	; 0xc618
 8013338:	9001      	str	r0, [sp, #4]
 801333a:	b29b      	uxth	r3, r3
 801333c:	b292      	uxth	r2, r2
 801333e:	b289      	uxth	r1, r1
 8013340:	4620      	mov	r0, r4
 8013342:	f8cd 8000 	str.w	r8, [sp]
 8013346:	f009 fc7f 	bl	801cc48 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801334a:	eb04 0008 	add.w	r0, r4, r8
 801334e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013352:	4642      	mov	r2, r8
 8013354:	b231      	sxth	r1, r6
 8013356:	b200      	sxth	r0, r0
 8013358:	f009 fb2d 	bl	801c9b6 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x01){
 801335c:	782b      	ldrb	r3, [r5, #0]
 801335e:	2b01      	cmp	r3, #1
				BluetoothStat = 0x00;
 8013360:	bf08      	it	eq
 8013362:	702f      	strbeq	r7, [r5, #0]
}
 8013364:	e7e1      	b.n	801332a <GUI_Switch_Button+0x62>
 8013366:	bf00      	nop
 8013368:	20009d20 	.word	0x20009d20

0801336c <GUI_Switch_ButtonActive>:

void GUI_Switch_ButtonActive(uint16_t X, uint16_t Y, uint8_t Check)
{
 801336c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 801336e:	f101 031c 	add.w	r3, r1, #28
{
 8013372:	4616      	mov	r6, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8013374:	2763      	movs	r7, #99	; 0x63
 8013376:	f100 0224 	add.w	r2, r0, #36	; 0x24
 801337a:	b29b      	uxth	r3, r3
 801337c:	b292      	uxth	r2, r2
 801337e:	9700      	str	r7, [sp, #0]
{
 8013380:	460d      	mov	r5, r1
 8013382:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8013384:	f009 fadb 	bl	801c93e <TFT_FillRectangle>
	if(Check)
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8013388:	f242 409b 	movw	r0, #9371	; 0x249b
 801338c:	f105 0318 	add.w	r3, r5, #24
 8013390:	f105 010a 	add.w	r1, r5, #10
 8013394:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8013398:	3511      	adds	r5, #17
 801339a:	9001      	str	r0, [sp, #4]
	if(Check)
 801339c:	b19e      	cbz	r6, 80133c6 <GUI_Switch_ButtonActive+0x5a>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 801339e:	260a      	movs	r6, #10
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	4620      	mov	r0, r4
 80133a4:	9600      	str	r6, [sp, #0]
 80133a6:	b292      	uxth	r2, r2
 80133a8:	b289      	uxth	r1, r1
 80133aa:	f009 fc4d 	bl	801cc48 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 80133ae:	f104 0019 	add.w	r0, r4, #25
 80133b2:	f241 3376 	movw	r3, #4982	; 0x1376
		} else
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 80133b6:	4632      	mov	r2, r6
 80133b8:	b229      	sxth	r1, r5
 80133ba:	b200      	sxth	r0, r0
		}
}
 80133bc:	b003      	add	sp, #12
 80133be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 80133c2:	f009 baf8 	b.w	801c9b6 <TFT_DrawFilledCircle>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 80133c6:	260a      	movs	r6, #10
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	4620      	mov	r0, r4
 80133cc:	9600      	str	r6, [sp, #0]
 80133ce:	b292      	uxth	r2, r2
 80133d0:	b289      	uxth	r1, r1
 80133d2:	f009 fc39 	bl	801cc48 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 80133d6:	19a0      	adds	r0, r4, r6
 80133d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133dc:	e7eb      	b.n	80133b6 <GUI_Switch_ButtonActive+0x4a>

080133de <GUI_Flag_Ru>:


void GUI_Flag_Ru(uint16_t X, uint16_t Y)
{
 80133de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 80133e2:	f100 0423 	add.w	r4, r0, #35	; 0x23
 80133e6:	1dcf      	adds	r7, r1, #7
{
 80133e8:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 80133ea:	b2a4      	uxth	r4, r4
 80133ec:	b2bf      	uxth	r7, r7
 80133ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133f2:	9300      	str	r3, [sp, #0]
 80133f4:	4622      	mov	r2, r4
 80133f6:	463b      	mov	r3, r7
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 80133f8:	f105 060e 	add.w	r6, r5, #14
{
 80133fc:	4680      	mov	r8, r0
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 80133fe:	b2b6      	uxth	r6, r6
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8013400:	f009 fa9d 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8013404:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	4622      	mov	r2, r4
 801340c:	4633      	mov	r3, r6
 801340e:	4639      	mov	r1, r7
 8013410:	4640      	mov	r0, r8
 8013412:	f009 fa94 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+35, Y+21, TFT_RuRed);
 8013416:	f105 0315 	add.w	r3, r5, #21
 801341a:	f64c 1243 	movw	r2, #51523	; 0xc943
 801341e:	9200      	str	r2, [sp, #0]
 8013420:	b29b      	uxth	r3, r3
 8013422:	4622      	mov	r2, r4
 8013424:	4631      	mov	r1, r6
 8013426:	4640      	mov	r0, r8
 8013428:	f009 fa89 	bl	801c93e <TFT_FillRectangle>
}
 801342c:	b002      	add	sp, #8
 801342e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013432 <GUI_Flag_En>:

void GUI_Flag_En(uint16_t X, uint16_t Y)
{
 8013432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8013436:	f100 030f 	add.w	r3, r0, #15
{
 801343a:	b08d      	sub	sp, #52	; 0x34
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 801343c:	b29b      	uxth	r3, r3
 801343e:	270f      	movs	r7, #15
 8013440:	9302      	str	r3, [sp, #8]
 8013442:	f101 0309 	add.w	r3, r1, #9
{
 8013446:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8013448:	b29b      	uxth	r3, r3
 801344a:	9700      	str	r7, [sp, #0]
 801344c:	9a02      	ldr	r2, [sp, #8]
 801344e:	9303      	str	r3, [sp, #12]
{
 8013450:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8013452:	f009 fa74 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y, X+34, Y+9, TFT_Navy);
 8013456:	f104 0314 	add.w	r3, r4, #20
 801345a:	b29b      	uxth	r3, r3
 801345c:	f104 0822 	add.w	r8, r4, #34	; 0x22
 8013460:	fa1f f888 	uxth.w	r8, r8
 8013464:	9304      	str	r3, [sp, #16]
 8013466:	9700      	str	r7, [sp, #0]
 8013468:	9b03      	ldr	r3, [sp, #12]
 801346a:	9804      	ldr	r0, [sp, #16]
 801346c:	4642      	mov	r2, r8
 801346e:	4629      	mov	r1, r5
 8013470:	f009 fa65 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+15, Y+21, TFT_Navy);
 8013474:	f105 030e 	add.w	r3, r5, #14
 8013478:	b29b      	uxth	r3, r3
 801347a:	f105 0615 	add.w	r6, r5, #21
 801347e:	b2b6      	uxth	r6, r6
 8013480:	9305      	str	r3, [sp, #20]
 8013482:	9700      	str	r7, [sp, #0]
 8013484:	4633      	mov	r3, r6
 8013486:	9a02      	ldr	r2, [sp, #8]
 8013488:	9905      	ldr	r1, [sp, #20]
 801348a:	4620      	mov	r0, r4
 801348c:	f009 fa57 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y+14, X+34, Y+21, TFT_Navy);
 8013490:	9700      	str	r7, [sp, #0]
 8013492:	4633      	mov	r3, r6
 8013494:	4642      	mov	r2, r8
 8013496:	9905      	ldr	r1, [sp, #20]
 8013498:	9804      	ldr	r0, [sp, #16]
 801349a:	f009 fa50 	bl	801c93e <TFT_FillRectangle>
	
	TFT_DrawLine(X, Y+2, X+29, Y+21, TFT_White);
 801349e:	1cab      	adds	r3, r5, #2
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	f104 091d 	add.w	r9, r4, #29
 80134a6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80134aa:	9307      	str	r3, [sp, #28]
 80134ac:	fa1f f989 	uxth.w	r9, r9
 80134b0:	9700      	str	r7, [sp, #0]
 80134b2:	4633      	mov	r3, r6
 80134b4:	464a      	mov	r2, r9
 80134b6:	9907      	ldr	r1, [sp, #28]
 80134b8:	4620      	mov	r0, r4
 80134ba:	f009 f9e3 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X, Y+1, X+29, Y+21, TFT_White);
 80134be:	1c6b      	adds	r3, r5, #1
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	9308      	str	r3, [sp, #32]
 80134c4:	9700      	str	r7, [sp, #0]
 80134c6:	4633      	mov	r3, r6
 80134c8:	464a      	mov	r2, r9
 80134ca:	9908      	ldr	r1, [sp, #32]
 80134cc:	4620      	mov	r0, r4
 80134ce:	f009 f9d9 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X, Y, X+30, Y+21, TFT_White);
 80134d2:	f104 021e 	add.w	r2, r4, #30
 80134d6:	9700      	str	r7, [sp, #0]
 80134d8:	4633      	mov	r3, r6
 80134da:	4629      	mov	r1, r5
 80134dc:	4620      	mov	r0, r4
 80134de:	b292      	uxth	r2, r2
 80134e0:	f009 f9d0 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y, X+31, Y+21, TFT_White);
 80134e4:	1c63      	adds	r3, r4, #1
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	f104 0a1f 	add.w	sl, r4, #31
 80134ec:	9309      	str	r3, [sp, #36]	; 0x24
 80134ee:	fa1f fa8a 	uxth.w	sl, sl
 80134f2:	9700      	str	r7, [sp, #0]
 80134f4:	4633      	mov	r3, r6
 80134f6:	4652      	mov	r2, sl
 80134f8:	4629      	mov	r1, r5
 80134fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134fc:	f009 f9c2 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y, X+31, Y+21, TFT_White);
 8013500:	1ca3      	adds	r3, r4, #2
 8013502:	b29b      	uxth	r3, r3
 8013504:	930a      	str	r3, [sp, #40]	; 0x28
 8013506:	9700      	str	r7, [sp, #0]
 8013508:	4633      	mov	r3, r6
 801350a:	4652      	mov	r2, sl
 801350c:	4629      	mov	r1, r5
 801350e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013510:	f009 f9b8 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y, X+32, Y+21, TFT_White);
 8013514:	1ce3      	adds	r3, r4, #3
 8013516:	b29b      	uxth	r3, r3
 8013518:	f104 0920 	add.w	r9, r4, #32
 801351c:	930b      	str	r3, [sp, #44]	; 0x2c
 801351e:	fa1f f989 	uxth.w	r9, r9
 8013522:	9700      	str	r7, [sp, #0]
 8013524:	4633      	mov	r3, r6
 8013526:	464a      	mov	r2, r9
 8013528:	4629      	mov	r1, r5
 801352a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801352c:	f009 f9aa 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+33, Y+21, TFT_White);
 8013530:	1d23      	adds	r3, r4, #4
 8013532:	b29b      	uxth	r3, r3
 8013534:	f104 0b21 	add.w	fp, r4, #33	; 0x21
 8013538:	9306      	str	r3, [sp, #24]
 801353a:	fa1f fb8b 	uxth.w	fp, fp
 801353e:	9700      	str	r7, [sp, #0]
 8013540:	4633      	mov	r3, r6
 8013542:	465a      	mov	r2, fp
 8013544:	4629      	mov	r1, r5
 8013546:	9806      	ldr	r0, [sp, #24]
 8013548:	f009 f99c 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+34, Y+21, TFT_White);
 801354c:	9700      	str	r7, [sp, #0]
 801354e:	4633      	mov	r3, r6
 8013550:	4642      	mov	r2, r8
 8013552:	4629      	mov	r1, r5
 8013554:	9806      	ldr	r0, [sp, #24]
 8013556:	f009 f995 	bl	801c884 <TFT_DrawLine>
	
	TFT_DrawLine(X, Y+21, X+31, Y, TFT_White);
 801355a:	9700      	str	r7, [sp, #0]
 801355c:	462b      	mov	r3, r5
 801355e:	4652      	mov	r2, sl
 8013560:	4631      	mov	r1, r6
 8013562:	4620      	mov	r0, r4
 8013564:	f009 f98e 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y+21, X+32, Y, TFT_White);
 8013568:	9700      	str	r7, [sp, #0]
 801356a:	462b      	mov	r3, r5
 801356c:	464a      	mov	r2, r9
 801356e:	4631      	mov	r1, r6
 8013570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013572:	f009 f987 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y+21, X+32, Y, TFT_White);
 8013576:	9700      	str	r7, [sp, #0]
 8013578:	462b      	mov	r3, r5
 801357a:	464a      	mov	r2, r9
 801357c:	4631      	mov	r1, r6
 801357e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013580:	f009 f980 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y+21, X+33, Y, TFT_White);
 8013584:	9700      	str	r7, [sp, #0]
 8013586:	462b      	mov	r3, r5
 8013588:	465a      	mov	r2, fp
 801358a:	4631      	mov	r1, r6
 801358c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801358e:	f009 f979 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y+21, X+34, Y, TFT_White);
 8013592:	9700      	str	r7, [sp, #0]
 8013594:	462b      	mov	r3, r5
 8013596:	4642      	mov	r2, r8
 8013598:	4631      	mov	r1, r6
 801359a:	9806      	ldr	r0, [sp, #24]
 801359c:	f009 f972 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+5, Y+21, X+34, Y+1, TFT_White);
 80135a0:	1d60      	adds	r0, r4, #5
 80135a2:	9700      	str	r7, [sp, #0]
 80135a4:	9b08      	ldr	r3, [sp, #32]
 80135a6:	4642      	mov	r2, r8
 80135a8:	4631      	mov	r1, r6
 80135aa:	b280      	uxth	r0, r0
 80135ac:	f009 f96a 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+21, X+34, Y+2, TFT_White);
 80135b0:	1da0      	adds	r0, r4, #6
 80135b2:	9700      	str	r7, [sp, #0]
 80135b4:	9b07      	ldr	r3, [sp, #28]
 80135b6:	4642      	mov	r2, r8
 80135b8:	4631      	mov	r1, r6
 80135ba:	b280      	uxth	r0, r0
 80135bc:	f009 f962 	bl	801c884 <TFT_DrawLine>
	
	TFT_FillRectangle(X, Y+9, X+34, Y+14, TFT_White);
 80135c0:	9700      	str	r7, [sp, #0]
 80135c2:	9b05      	ldr	r3, [sp, #20]
 80135c4:	9903      	ldr	r1, [sp, #12]
 80135c6:	4642      	mov	r2, r8
 80135c8:	4620      	mov	r0, r4
 80135ca:	f009 f9b8 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+15, Y, X+20, Y+21, TFT_White);
 80135ce:	9700      	str	r7, [sp, #0]
 80135d0:	4633      	mov	r3, r6
 80135d2:	9a04      	ldr	r2, [sp, #16]
 80135d4:	9802      	ldr	r0, [sp, #8]
 80135d6:	4629      	mov	r1, r5
 80135d8:	f009 f9b1 	bl	801c93e <TFT_FillRectangle>
	
	TFT_FillRectangle(X+16, Y, X+19, Y+21, TFT_Red);
 80135dc:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 80135e0:	f104 0213 	add.w	r2, r4, #19
 80135e4:	f104 0010 	add.w	r0, r4, #16
 80135e8:	4633      	mov	r3, r6
 80135ea:	4629      	mov	r1, r5
 80135ec:	9700      	str	r7, [sp, #0]
 80135ee:	b292      	uxth	r2, r2
 80135f0:	b280      	uxth	r0, r0
 80135f2:	f009 f9a4 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+10, X+34, Y+13, TFT_Red);
 80135f6:	f105 030d 	add.w	r3, r5, #13
 80135fa:	f105 010a 	add.w	r1, r5, #10
 80135fe:	9700      	str	r7, [sp, #0]
 8013600:	b29b      	uxth	r3, r3
 8013602:	4642      	mov	r2, r8
 8013604:	b289      	uxth	r1, r1
 8013606:	4620      	mov	r0, r4
 8013608:	f009 f999 	bl	801c93e <TFT_FillRectangle>
	
}
 801360c:	b00d      	add	sp, #52	; 0x34
 801360e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013614 <GUI_Bar_Measure>:
#include "GUI_Measure_Elements.h"
#include <math.h>
extern uint8_t Language_status, Mode_EL, preGUI_screen_state, GUI_screen_state;

void GUI_Bar_Measure(uint16_t X, uint16_t Y, float Value)
{
 8013614:	b570      	push	{r4, r5, r6, lr}
 8013616:	ed2d 8b02 	vpush	{d8}
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 801361a:	f101 040a 	add.w	r4, r1, #10
{
 801361e:	b084      	sub	sp, #16
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8013620:	b2a4      	uxth	r4, r4
 8013622:	f100 026e 	add.w	r2, r0, #110	; 0x6e
 8013626:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 801362a:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 801362c:	9300      	str	r3, [sp, #0]
 801362e:	b292      	uxth	r2, r2
 8013630:	4623      	mov	r3, r4
{
 8013632:	eeb0 8a40 	vmov.f32	s16, s0
 8013636:	460e      	mov	r6, r1
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8013638:	f009 f981 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X, Y, X+110*Value, Y+10, TFT_Blue_Off);
 801363c:	ee07 5a90 	vmov	s15, r5
 8013640:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8013670 <GUI_Bar_Measure+0x5c>
 8013644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013648:	f241 3376 	movw	r3, #4982	; 0x1376
 801364c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013650:	9300      	str	r3, [sp, #0]
 8013652:	4631      	mov	r1, r6
 8013654:	4623      	mov	r3, r4
 8013656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801365a:	4628      	mov	r0, r5
 801365c:	edcd 7a03 	vstr	s15, [sp, #12]
 8013660:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013664:	f009 f96b 	bl	801c93e <TFT_FillRectangle>
}
 8013668:	b004      	add	sp, #16
 801366a:	ecbd 8b02 	vpop	{d8}
 801366e:	bd70      	pop	{r4, r5, r6, pc}
 8013670:	42dc0000 	.word	0x42dc0000

08013674 <GUI_Text_E_Measure>:


uint8_t  old_num_e = 10, old_num_n = 10, old_deg_e = 0xFF, old_deg_e_wt = 0xFF;
uint8_t old_meas_type_L = 2, old_numL_e = 10, old_numL_n = 10, old_rulx = 0, old_nan_Ee = 0, old_nan_El = 0; 
void GUI_Text_E_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 8013674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013678:	ed2d 8b02 	vpush	{d8}
 801367c:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 801367e:	4bc5      	ldr	r3, [pc, #788]	; (8013994 <GUI_Text_E_Measure+0x320>)
{
 8013680:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8013682:	781a      	ldrb	r2, [r3, #0]
 8013684:	4bc4      	ldr	r3, [pc, #784]	; (8013998 <GUI_Text_E_Measure+0x324>)
 8013686:	781b      	ldrb	r3, [r3, #0]
{
 8013688:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 801368a:	429a      	cmp	r2, r3
{
 801368c:	4605      	mov	r5, r0
 801368e:	460c      	mov	r4, r1
 8013690:	eeb0 8a40 	vmov.f32	s16, s0
 8013694:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8013698:	d007      	beq.n	80136aa <GUI_Text_E_Measure+0x36>
 801369a:	4ac0      	ldr	r2, [pc, #768]	; (801399c <GUI_Text_E_Measure+0x328>)
 801369c:	2300      	movs	r3, #0
 801369e:	7013      	strb	r3, [r2, #0]
 80136a0:	4abf      	ldr	r2, [pc, #764]	; (80139a0 <GUI_Text_E_Measure+0x32c>)
 80136a2:	7013      	strb	r3, [r2, #0]
 80136a4:	4bbf      	ldr	r3, [pc, #764]	; (80139a4 <GUI_Text_E_Measure+0x330>)
 80136a6:	22ff      	movs	r2, #255	; 0xff
 80136a8:	701a      	strb	r2, [r3, #0]
	
	char buffer[9] = {0};
 80136aa:	2300      	movs	r3, #0
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 80136ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 80136b0:	9303      	str	r3, [sp, #12]
 80136b2:	9304      	str	r3, [sp, #16]
 80136b4:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 80136b8:	f009 fb70 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80136bc:	2063      	movs	r0, #99	; 0x63
 80136be:	f009 fb73 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 80136c2:	48b9      	ldr	r0, [pc, #740]	; (80139a8 <GUI_Text_E_Measure+0x334>)
 80136c4:	f009 fb64 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 80136c8:	1ca1      	adds	r1, r4, #2
 80136ca:	2224      	movs	r2, #36	; 0x24
 80136cc:	b289      	uxth	r1, r1
 80136ce:	4628      	mov	r0, r5
 80136d0:	f009 fc28 	bl	801cf24 <TFT_DrawChar>
	

	if((Value/1000.0) >= 1.0)
 80136d4:	ee18 0a10 	vmov	r0, s16
 80136d8:	f7ec ff4e 	bl	8000578 <__aeabi_f2d>
 80136dc:	2200      	movs	r2, #0
 80136de:	4bb3      	ldr	r3, [pc, #716]	; (80139ac <GUI_Text_E_Measure+0x338>)
 80136e0:	f7ed f8c8 	bl	8000874 <__aeabi_ddiv>
 80136e4:	2200      	movs	r2, #0
 80136e6:	4bb2      	ldr	r3, [pc, #712]	; (80139b0 <GUI_Text_E_Measure+0x33c>)
 80136e8:	f7ed fa20 	bl	8000b2c <__aeabi_dcmpge>
 80136ec:	b358      	cbz	r0, 8013746 <GUI_Text_E_Measure+0xd2>
	{
		Value = Value/(1000.0);
 80136ee:	eddf 7ab1 	vldr	s15, [pc, #708]	; 80139b4 <GUI_Text_E_Measure+0x340>
 80136f2:	ee88 8a27 	vdiv.f32	s16, s16, s15
		Value = Value * 1000.0;
		deg = 2;
		meas_type = 0;
	}

	if(nope)
 80136f6:	2e00      	cmp	r6, #0
 80136f8:	d16e      	bne.n	80137d8 <GUI_Text_E_Measure+0x164>
		deg = 1;
 80136fa:	2601      	movs	r6, #1
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
				old_nan_El = 1;
			}
		}
	else{
		old_nan_Ee = 0; old_nan_El = 0;
 80136fc:	4aa7      	ldr	r2, [pc, #668]	; (801399c <GUI_Text_E_Measure+0x328>)
 80136fe:	2300      	movs	r3, #0
 8013700:	7013      	strb	r3, [r2, #0]
 8013702:	4aa7      	ldr	r2, [pc, #668]	; (80139a0 <GUI_Text_E_Measure+0x32c>)
 8013704:	7013      	strb	r3, [r2, #0]
		if(energy_light && deg == 2)
 8013706:	2f00      	cmp	r7, #0
 8013708:	f000 811a 	beq.w	8013940 <GUI_Text_E_Measure+0x2cc>
			Value = floor(Value*10)/10.0;
		}
		else if (energy_light && deg != 2)
		{
			old_nan_Ee = 0;
			Value = floor(Value*100)/100.0;
 801370c:	eddf 7aaa 	vldr	s15, [pc, #680]	; 80139b8 <GUI_Text_E_Measure+0x344>
 8013710:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013714:	ee17 0a90 	vmov	r0, s15
 8013718:	f7ec ff2e 	bl	8000578 <__aeabi_f2d>
 801371c:	ec41 0b10 	vmov	d0, r0, r1
 8013720:	f00f ff32 	bl	8023588 <floor>
 8013724:	4ba5      	ldr	r3, [pc, #660]	; (80139bc <GUI_Text_E_Measure+0x348>)
 8013726:	2200      	movs	r2, #0
		}
		if(!energy_light)
		{
			old_nan_El = 0;
			Value = floor(Value*10)/10.0;
 8013728:	ec51 0b10 	vmov	r0, r1, d0
 801372c:	f7ed f8a2 	bl	8000874 <__aeabi_ddiv>
 8013730:	f7ed fa6e 	bl	8000c10 <__aeabi_d2f>
 8013734:	ee08 0a10 	vmov	s16, r0
		}



	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013738:	f1b8 0f00 	cmp.w	r8, #0
 801373c:	f040 81a7 	bne.w	8013a8e <GUI_Text_E_Measure+0x41a>
 8013740:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013744:	e1a5      	b.n	8013a92 <GUI_Text_E_Measure+0x41e>
	else if (energy_light && Value < 1.0)
 8013746:	2f00      	cmp	r7, #0
 8013748:	f000 8148 	beq.w	80139dc <GUI_Text_E_Measure+0x368>
 801374c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013750:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013758:	4b90      	ldr	r3, [pc, #576]	; (801399c <GUI_Text_E_Measure+0x328>)
 801375a:	f140 81f1 	bpl.w	8013b40 <GUI_Text_E_Measure+0x4cc>
		Value = Value * 1000.0;
 801375e:	ed9f 0a95 	vldr	s0, [pc, #596]	; 80139b4 <GUI_Text_E_Measure+0x340>
 8013762:	ee28 8a00 	vmul.f32	s16, s16, s0
	if(nope)
 8013766:	2e00      	cmp	r6, #0
 8013768:	f000 80f9 	beq.w	801395e <GUI_Text_E_Measure+0x2ea>
		deg = 2;
 801376c:	2602      	movs	r6, #2
			if(energy_light & !old_nan_Ee){
 801376e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 801399c <GUI_Text_E_Measure+0x328>
 8013772:	f898 3000 	ldrb.w	r3, [r8]
 8013776:	2b00      	cmp	r3, #0
 8013778:	bf14      	ite	ne
 801377a:	2300      	movne	r3, #0
 801377c:	f007 0301 	andeq.w	r3, r7, #1
 8013780:	2b00      	cmp	r3, #0
 8013782:	f000 812f 	beq.w	80139e4 <GUI_Text_E_Measure+0x370>
				TFT_SetTextColor(TFT_White);
 8013786:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801378a:	f009 fb07 	bl	801cd9c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801378e:	2063      	movs	r0, #99	; 0x63
 8013790:	f009 fb0a 	bl	801cda8 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8013794:	488a      	ldr	r0, [pc, #552]	; (80139c0 <GUI_Text_E_Measure+0x34c>)
 8013796:	f009 fafb 	bl	801cd90 <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 801379a:	2163      	movs	r1, #99	; 0x63
 801379c:	f104 031a 	add.w	r3, r4, #26
 80137a0:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 80137a4:	f105 0023 	add.w	r0, r5, #35	; 0x23
 80137a8:	9100      	str	r1, [sp, #0]
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	b292      	uxth	r2, r2
 80137ae:	4621      	mov	r1, r4
 80137b0:	b280      	uxth	r0, r0
 80137b2:	f009 f8c4 	bl	801c93e <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80137b6:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80137b8:	f105 007a 	add.w	r0, r5, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 80137bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80137c0:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80137c4:	aa03      	add	r2, sp, #12
 80137c6:	2303      	movs	r3, #3
 80137c8:	4621      	mov	r1, r4
 80137ca:	b280      	uxth	r0, r0
 80137cc:	f009 fc02 	bl	801cfd4 <TFT_DisplayString>
				old_nan_El = 1;
 80137d0:	2301      	movs	r3, #1
 80137d2:	f888 3000 	strb.w	r3, [r8]
 80137d6:	e10d      	b.n	80139f4 <GUI_Text_E_Measure+0x380>
		deg = 1;
 80137d8:	2601      	movs	r6, #1
 80137da:	e7c8      	b.n	801376e <GUI_Text_E_Measure+0xfa>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 80137dc:	4606      	mov	r6, r0
 80137de:	e7c6      	b.n	801376e <GUI_Text_E_Measure+0xfa>
	
	if(energy_light && number < old_num_e )
	{
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
	} 
	else if(!energy_light && number < old_num_n)
 80137e0:	4b78      	ldr	r3, [pc, #480]	; (80139c4 <GUI_Text_E_Measure+0x350>)
 80137e2:	e18d      	b.n	8013b00 <GUI_Text_E_Measure+0x48c>
			TFT_SetFont(&Font26RU_arch_small);
			if(deg){
			TFT_DrawCharRus(X+200, Y+4, 'к');
			TFT_DrawCharRus(X+215, Y+4, 'л');
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
			TFT_DrawCharRus(X+200, Y+4, 'л');
 80137e4:	22bb      	movs	r2, #187	; 0xbb
 80137e6:	4639      	mov	r1, r7
 80137e8:	b280      	uxth	r0, r0
 80137ea:	f009 fae3 	bl	801cdb4 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80137ee:	22ba      	movs	r2, #186	; 0xba
 80137f0:	4639      	mov	r1, r7
 80137f2:	fa1f f089 	uxth.w	r0, r9
 80137f6:	e139      	b.n	8013a6c <GUI_Text_E_Measure+0x3f8>
			}
			
			
			old_deg_e = deg;
	} else if (Language_status == En && !energy_light)
 80137f8:	2b01      	cmp	r3, #1
 80137fa:	f040 809e 	bne.w	801393a <GUI_Text_E_Measure+0x2c6>
 80137fe:	2f00      	cmp	r7, #0
 8013800:	f040 8081 	bne.w	8013906 <GUI_Text_E_Measure+0x292>
	{
		if(deg != old_deg_e){
 8013804:	4b67      	ldr	r3, [pc, #412]	; (80139a4 <GUI_Text_E_Measure+0x330>)
 8013806:	781a      	ldrb	r2, [r3, #0]
 8013808:	42b2      	cmp	r2, r6
 801380a:	4699      	mov	r9, r3
 801380c:	d034      	beq.n	8013878 <GUI_Text_E_Measure+0x204>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 801380e:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8013812:	f104 031a 	add.w	r3, r4, #26
 8013816:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 801381a:	1ce1      	adds	r1, r4, #3
 801381c:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8013820:	b280      	uxth	r0, r0
 8013822:	f8cd e000 	str.w	lr, [sp]
 8013826:	b29b      	uxth	r3, r3
 8013828:	b292      	uxth	r2, r2
 801382a:	b289      	uxth	r1, r1
 801382c:	f009 f887 	bl	801c93e <TFT_FillRectangle>
 8013830:	f104 0804 	add.w	r8, r4, #4
 8013834:	f105 0ac8 	add.w	sl, r5, #200	; 0xc8
			if (deg){
			TFT_SetTextColor(TFT_White);
 8013838:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (deg){
 801383c:	b1fe      	cbz	r6, 801387e <GUI_Text_E_Measure+0x20a>
			TFT_SetTextColor(TFT_White);
 801383e:	f009 faad 	bl	801cd9c <TFT_SetTextColor>
			TFT_SetFont(&Font26EN_arch_small);
 8013842:	4861      	ldr	r0, [pc, #388]	; (80139c8 <GUI_Text_E_Measure+0x354>)
 8013844:	f009 faa4 	bl	801cd90 <TFT_SetFont>
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 8013848:	fa1f f888 	uxth.w	r8, r8
 801384c:	f105 00d6 	add.w	r0, r5, #214	; 0xd6
 8013850:	222b      	movs	r2, #43	; 0x2b
 8013852:	4641      	mov	r1, r8
 8013854:	b280      	uxth	r0, r0
 8013856:	f009 fb65 	bl	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X+200, Y+4, 'k'-65);
 801385a:	222a      	movs	r2, #42	; 0x2a
 801385c:	4641      	mov	r1, r8
 801385e:	fa1f f08a 	uxth.w	r0, sl
 8013862:	f009 fb5f 	bl	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X+226, Y+4, 'x'-65);
 8013866:	f105 00e2 	add.w	r0, r5, #226	; 0xe2
 801386a:	2237      	movs	r2, #55	; 0x37
 801386c:	4641      	mov	r1, r8
 801386e:	b280      	uxth	r0, r0
 8013870:	f009 fb58 	bl	801cf24 <TFT_DrawChar>
			old_rulx = 0;
 8013874:	4b55      	ldr	r3, [pc, #340]	; (80139cc <GUI_Text_E_Measure+0x358>)
 8013876:	701f      	strb	r7, [r3, #0]
			TFT_DrawChar(X+212, Y+4, 'x'-65);
			
		}
			}
		
		old_deg_e = deg;
 8013878:	f889 6000 	strb.w	r6, [r9]
 801387c:	e0fa      	b.n	8013a74 <GUI_Text_E_Measure+0x400>
			TFT_SetTextColor(TFT_White);
 801387e:	f009 fa8d 	bl	801cd9c <TFT_SetTextColor>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8013882:	fa1f f888 	uxth.w	r8, r8
			TFT_SetFont(&Font26EN_arch_small);
 8013886:	4850      	ldr	r0, [pc, #320]	; (80139c8 <GUI_Text_E_Measure+0x354>)
 8013888:	f009 fa82 	bl	801cd90 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 801388c:	4641      	mov	r1, r8
 801388e:	fa1f f08a 	uxth.w	r0, sl
 8013892:	222b      	movs	r2, #43	; 0x2b
 8013894:	f009 fb46 	bl	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 8013898:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
 801389c:	2237      	movs	r2, #55	; 0x37
 801389e:	4641      	mov	r1, r8
 80138a0:	b280      	uxth	r0, r0
 80138a2:	f009 fb3f 	bl	801cf24 <TFT_DrawChar>
 80138a6:	e7e7      	b.n	8013878 <GUI_Text_E_Measure+0x204>
	}else if (Language_status == Ru && energy_light)
	{	
		if (deg != old_deg_e_wt)
 80138a8:	4f49      	ldr	r7, [pc, #292]	; (80139d0 <GUI_Text_E_Measure+0x35c>)
 80138aa:	783a      	ldrb	r2, [r7, #0]
 80138ac:	42b2      	cmp	r2, r6
 80138ae:	d00a      	beq.n	80138c6 <GUI_Text_E_Measure+0x252>
		{
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 80138b0:	2263      	movs	r2, #99	; 0x63
 80138b2:	f104 031a 	add.w	r3, r4, #26
 80138b6:	9200      	str	r2, [sp, #0]
 80138b8:	b29b      	uxth	r3, r3
 80138ba:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80138be:	4621      	mov	r1, r4
 80138c0:	20e6      	movs	r0, #230	; 0xe6
 80138c2:	f009 f83c 	bl	801c93e <TFT_FillRectangle>
		}
		if (deg == 2)
 80138c6:	2e02      	cmp	r6, #2
		{
			GUI_TextRu_mW_m2(234, Y);
 80138c8:	4621      	mov	r1, r4
 80138ca:	f04f 00ea 	mov.w	r0, #234	; 0xea
		if (deg == 2)
 80138ce:	d117      	bne.n	8013900 <GUI_Text_E_Measure+0x28c>
			GUI_TextRu_mW_m2(234, Y);
 80138d0:	f005 fc54 	bl	801917c <GUI_TextRu_mW_m2>
		}
		else
		{
			GUI_TextEn_W_m2(234, Y);
		}
		old_deg_e_wt = deg;
 80138d4:	703e      	strb	r6, [r7, #0]
	}
	
		if(energy_light) {
			TFT_SetTextColor(TFT_White);
 80138d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80138da:	f009 fa5f 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_small);
 80138de:	483d      	ldr	r0, [pc, #244]	; (80139d4 <GUI_Text_E_Measure+0x360>)
 80138e0:	f009 fa56 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 80138e4:	f104 010e 	add.w	r1, r4, #14
 80138e8:	f105 0014 	add.w	r0, r5, #20
 80138ec:	2265      	movs	r2, #101	; 0x65
	else {
		TFT_SetTextColor(TFT_White);
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 80138ee:	b289      	uxth	r1, r1
 80138f0:	b280      	uxth	r0, r0
 80138f2:	f009 fb17 	bl	801cf24 <TFT_DrawChar>
	}

}
 80138f6:	b006      	add	sp, #24
 80138f8:	ecbd 8b02 	vpop	{d8}
 80138fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			GUI_TextRu_W_m2(234, Y);
 8013900:	f005 fc88 	bl	8019214 <GUI_TextRu_W_m2>
 8013904:	e7e6      	b.n	80138d4 <GUI_Text_E_Measure+0x260>
		if (deg != old_deg_e_wt)
 8013906:	4f32      	ldr	r7, [pc, #200]	; (80139d0 <GUI_Text_E_Measure+0x35c>)
 8013908:	783a      	ldrb	r2, [r7, #0]
 801390a:	42b2      	cmp	r2, r6
 801390c:	d00a      	beq.n	8013924 <GUI_Text_E_Measure+0x2b0>
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 801390e:	2263      	movs	r2, #99	; 0x63
 8013910:	f104 031a 	add.w	r3, r4, #26
 8013914:	9200      	str	r2, [sp, #0]
 8013916:	b29b      	uxth	r3, r3
 8013918:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801391c:	4621      	mov	r1, r4
 801391e:	20e6      	movs	r0, #230	; 0xe6
 8013920:	f009 f80d 	bl	801c93e <TFT_FillRectangle>
		if (deg == 2)
 8013924:	2e02      	cmp	r6, #2
			GUI_TextEn_mW_m2(234, Y);
 8013926:	4621      	mov	r1, r4
 8013928:	f04f 00ea 	mov.w	r0, #234	; 0xea
		if (deg == 2)
 801392c:	d102      	bne.n	8013934 <GUI_Text_E_Measure+0x2c0>
			GUI_TextEn_mW_m2(234, Y);
 801392e:	f004 fa59 	bl	8017de4 <GUI_TextEn_mW_m2>
 8013932:	e7cf      	b.n	80138d4 <GUI_Text_E_Measure+0x260>
			GUI_TextEn_W_m2(234, Y);
 8013934:	f004 fa1c 	bl	8017d70 <GUI_TextEn_W_m2>
 8013938:	e7cc      	b.n	80138d4 <GUI_Text_E_Measure+0x260>
		if(energy_light) {
 801393a:	2f00      	cmp	r7, #0
 801393c:	d1cb      	bne.n	80138d6 <GUI_Text_E_Measure+0x262>
 801393e:	e099      	b.n	8013a74 <GUI_Text_E_Measure+0x400>
			Value = floor(Value*10)/10.0;
 8013940:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013944:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013948:	ee17 0a90 	vmov	r0, s15
 801394c:	f7ec fe14 	bl	8000578 <__aeabi_f2d>
 8013950:	ec41 0b10 	vmov	d0, r0, r1
 8013954:	f00f fe18 	bl	8023588 <floor>
 8013958:	2200      	movs	r2, #0
 801395a:	4b1f      	ldr	r3, [pc, #124]	; (80139d8 <GUI_Text_E_Measure+0x364>)
 801395c:	e6e4      	b.n	8013728 <GUI_Text_E_Measure+0xb4>
			Value = floor(Value*10)/10.0;
 801395e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013962:	ee68 7a27 	vmul.f32	s15, s16, s15
		old_nan_Ee = 0; old_nan_El = 0;
 8013966:	701e      	strb	r6, [r3, #0]
 8013968:	4b0d      	ldr	r3, [pc, #52]	; (80139a0 <GUI_Text_E_Measure+0x32c>)
			Value = floor(Value*10)/10.0;
 801396a:	ee17 0a90 	vmov	r0, s15
		old_nan_Ee = 0; old_nan_El = 0;
 801396e:	701e      	strb	r6, [r3, #0]
			Value = floor(Value*10)/10.0;
 8013970:	f7ec fe02 	bl	8000578 <__aeabi_f2d>
 8013974:	ec41 0b10 	vmov	d0, r0, r1
 8013978:	f00f fe06 	bl	8023588 <floor>
 801397c:	2200      	movs	r2, #0
 801397e:	4b16      	ldr	r3, [pc, #88]	; (80139d8 <GUI_Text_E_Measure+0x364>)
 8013980:	ec51 0b10 	vmov	r0, r1, d0
 8013984:	f7ec ff76 	bl	8000874 <__aeabi_ddiv>
 8013988:	f7ed f942 	bl	8000c10 <__aeabi_d2f>
 801398c:	2602      	movs	r6, #2
 801398e:	ee08 0a10 	vmov	s16, r0
 8013992:	e6d1      	b.n	8013738 <GUI_Text_E_Measure+0xc4>
 8013994:	2000022a 	.word	0x2000022a
 8013998:	20005701 	.word	0x20005701
 801399c:	20005735 	.word	0x20005735
 80139a0:	20005736 	.word	0x20005736
 80139a4:	2000022d 	.word	0x2000022d
 80139a8:	200001e8 	.word	0x200001e8
 80139ac:	408f4000 	.word	0x408f4000
 80139b0:	3ff00000 	.word	0x3ff00000
 80139b4:	447a0000 	.word	0x447a0000
 80139b8:	42c80000 	.word	0x42c80000
 80139bc:	40590000 	.word	0x40590000
 80139c0:	200001f0 	.word	0x200001f0
 80139c4:	20000246 	.word	0x20000246
 80139c8:	200001f8 	.word	0x200001f8
 80139cc:	20005741 	.word	0x20005741
 80139d0:	2000022e 	.word	0x2000022e
 80139d4:	200001c0 	.word	0x200001c0
 80139d8:	40240000 	.word	0x40240000
	if(nope)
 80139dc:	2e00      	cmp	r6, #0
 80139de:	f43f ae8d 	beq.w	80136fc <GUI_Text_E_Measure+0x88>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 80139e2:	463e      	mov	r6, r7
			else if(!energy_light & !old_nan_El){
 80139e4:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8013b6c <GUI_Text_E_Measure+0x4f8>
 80139e8:	f898 3000 	ldrb.w	r3, [r8]
 80139ec:	b913      	cbnz	r3, 80139f4 <GUI_Text_E_Measure+0x380>
 80139ee:	2f00      	cmp	r7, #0
 80139f0:	f43f aec9 	beq.w	8013786 <GUI_Text_E_Measure+0x112>
	if (Language_status == Ru && !energy_light)
 80139f4:	4b56      	ldr	r3, [pc, #344]	; (8013b50 <GUI_Text_E_Measure+0x4dc>)
 80139f6:	781b      	ldrb	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f47f aefd 	bne.w	80137f8 <GUI_Text_E_Measure+0x184>
 80139fe:	2f00      	cmp	r7, #0
 8013a00:	f47f af52 	bne.w	80138a8 <GUI_Text_E_Measure+0x234>
			if(deg != old_deg_e){
 8013a04:	4b53      	ldr	r3, [pc, #332]	; (8013b54 <GUI_Text_E_Measure+0x4e0>)
 8013a06:	781a      	ldrb	r2, [r3, #0]
 8013a08:	42b2      	cmp	r2, r6
 8013a0a:	4698      	mov	r8, r3
 8013a0c:	d030      	beq.n	8013a70 <GUI_Text_E_Measure+0x3fc>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8013a0e:	2763      	movs	r7, #99	; 0x63
 8013a10:	f104 031a 	add.w	r3, r4, #26
 8013a14:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8013a18:	1ce1      	adds	r1, r4, #3
 8013a1a:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	b292      	uxth	r2, r2
 8013a22:	b289      	uxth	r1, r1
 8013a24:	9700      	str	r7, [sp, #0]
 8013a26:	b280      	uxth	r0, r0
 8013a28:	f008 ff89 	bl	801c93e <TFT_FillRectangle>
			TFT_SetTextColor(TFT_White);
 8013a2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013a30:	f009 f9b4 	bl	801cd9c <TFT_SetTextColor>
 8013a34:	1d27      	adds	r7, r4, #4
			TFT_SetFont(&Font26RU_arch_small);
 8013a36:	4848      	ldr	r0, [pc, #288]	; (8013b58 <GUI_Text_E_Measure+0x4e4>)
 8013a38:	f009 f9aa 	bl	801cd90 <TFT_SetFont>
 8013a3c:	f105 09d7 	add.w	r9, r5, #215	; 0xd7
 8013a40:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
			TFT_DrawCharRus(X+200, Y+4, 'к');
 8013a44:	b2bf      	uxth	r7, r7
			if(deg){
 8013a46:	2e00      	cmp	r6, #0
 8013a48:	f43f aecc 	beq.w	80137e4 <GUI_Text_E_Measure+0x170>
			TFT_DrawCharRus(X+200, Y+4, 'к');
 8013a4c:	22ba      	movs	r2, #186	; 0xba
 8013a4e:	4639      	mov	r1, r7
 8013a50:	b280      	uxth	r0, r0
 8013a52:	f009 f9af 	bl	801cdb4 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'л');
 8013a56:	22bb      	movs	r2, #187	; 0xbb
 8013a58:	4639      	mov	r1, r7
 8013a5a:	fa1f f089 	uxth.w	r0, r9
 8013a5e:	f009 f9a9 	bl	801cdb4 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
 8013a62:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
 8013a66:	22ba      	movs	r2, #186	; 0xba
 8013a68:	4639      	mov	r1, r7
 8013a6a:	b280      	uxth	r0, r0
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 8013a6c:	f009 f9a2 	bl	801cdb4 <TFT_DrawCharRus>
			old_deg_e = deg;
 8013a70:	f888 6000 	strb.w	r6, [r8]
		TFT_SetTextColor(TFT_White);
 8013a74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013a78:	f009 f990 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetFont(&Font16EN_arch_small);
 8013a7c:	4837      	ldr	r0, [pc, #220]	; (8013b5c <GUI_Text_E_Measure+0x4e8>)
 8013a7e:	f009 f987 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8013a82:	f104 010d 	add.w	r1, r4, #13
 8013a86:	f105 0017 	add.w	r0, r5, #23
 8013a8a:	227b      	movs	r2, #123	; 0x7b
 8013a8c:	e72f      	b.n	80138ee <GUI_Text_E_Measure+0x27a>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013a8e:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8013a92:	f009 f983 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013a96:	2063      	movs	r0, #99	; 0x63
 8013a98:	f009 f986 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013a9c:	4830      	ldr	r0, [pc, #192]	; (8013b60 <GUI_Text_E_Measure+0x4ec>)
 8013a9e:	f009 f977 	bl	801cd90 <TFT_SetFont>
		sprintf (buffer, "%.1f", Value);
 8013aa2:	ee18 0a10 	vmov	r0, s16
 8013aa6:	f7ec fd67 	bl	8000578 <__aeabi_f2d>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	460b      	mov	r3, r1
 8013aae:	a803      	add	r0, sp, #12
 8013ab0:	492c      	ldr	r1, [pc, #176]	; (8013b64 <GUI_Text_E_Measure+0x4f0>)
 8013ab2:	f00c fdad 	bl	8020610 <sprintf>
	uint32_t dec = 10;
 8013ab6:	220a      	movs	r2, #10
		deg = 1;
 8013ab8:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 8013aba:	f04f 0800 	mov.w	r8, #0
 8013abe:	f04f 097a 	mov.w	r9, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 8013ac2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8013ac6:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8013ac8:	ee07 2a10 	vmov	s14, r2
 8013acc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8013ad0:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8013ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013adc:	db08      	blt.n	8013af0 <GUI_Text_E_Measure+0x47c>
			delta_pos-=23;
 8013ade:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 8013ae2:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8013ae6:	434a      	muls	r2, r1
			delta_pos-=23;
 8013ae8:	fa5f f989 	uxtb.w	r9, r9
			number++;
 8013aec:	fa5f f888 	uxtb.w	r8, r8
 8013af0:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8013af2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8013af6:	d1e7      	bne.n	8013ac8 <GUI_Text_E_Measure+0x454>
	if(energy_light && number < old_num_e )
 8013af8:	2f00      	cmp	r7, #0
 8013afa:	f43f ae71 	beq.w	80137e0 <GUI_Text_E_Measure+0x16c>
 8013afe:	4b1a      	ldr	r3, [pc, #104]	; (8013b68 <GUI_Text_E_Measure+0x4f4>)
	else if(!energy_light && number < old_num_n)
 8013b00:	781a      	ldrb	r2, [r3, #0]
 8013b02:	4542      	cmp	r2, r8
 8013b04:	469a      	mov	sl, r3
 8013b06:	d90d      	bls.n	8013b24 <GUI_Text_E_Measure+0x4b0>
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
 8013b08:	2163      	movs	r1, #99	; 0x63
 8013b0a:	f104 031a 	add.w	r3, r4, #26
 8013b0e:	f105 027f 	add.w	r2, r5, #127	; 0x7f
 8013b12:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8013b16:	9100      	str	r1, [sp, #0]
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	b292      	uxth	r2, r2
 8013b1c:	4621      	mov	r1, r4
 8013b1e:	b280      	uxth	r0, r0
 8013b20:	f008 ff0d 	bl	801c93e <TFT_FillRectangle>
	buffer[8] = 0;
 8013b24:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013b26:	eb05 0009 	add.w	r0, r5, r9
		old_num_n = number;
 8013b2a:	f88a 8000 	strb.w	r8, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013b2e:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 8013b30:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013b34:	4621      	mov	r1, r4
 8013b36:	2303      	movs	r3, #3
 8013b38:	b280      	uxth	r0, r0
 8013b3a:	f009 fa4b 	bl	801cfd4 <TFT_DisplayString>
 8013b3e:	e759      	b.n	80139f4 <GUI_Text_E_Measure+0x380>
	if(nope)
 8013b40:	2e00      	cmp	r6, #0
 8013b42:	f47f ae4b 	bne.w	80137dc <GUI_Text_E_Measure+0x168>
		old_nan_Ee = 0; old_nan_El = 0;
 8013b46:	701e      	strb	r6, [r3, #0]
 8013b48:	4b08      	ldr	r3, [pc, #32]	; (8013b6c <GUI_Text_E_Measure+0x4f8>)
 8013b4a:	701e      	strb	r6, [r3, #0]
 8013b4c:	e5de      	b.n	801370c <GUI_Text_E_Measure+0x98>
 8013b4e:	bf00      	nop
 8013b50:	20005703 	.word	0x20005703
 8013b54:	2000022d 	.word	0x2000022d
 8013b58:	20000208 	.word	0x20000208
 8013b5c:	200001c0 	.word	0x200001c0
 8013b60:	200001f0 	.word	0x200001f0
 8013b64:	080320e5 	.word	0x080320e5
 8013b68:	20000245 	.word	0x20000245
 8013b6c:	20005736 	.word	0x20005736

08013b70 <GUI_Text_L_Measure>:

uint8_t old_nan_Le = 0, old_nan_Ll = 0, old_deg_L = 0xFF, old_deg_L_wt = 0xFF;
void GUI_Text_L_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 8013b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b74:	ed2d 8b02 	vpush	{d8}
 8013b78:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8013b7a:	4bc5      	ldr	r3, [pc, #788]	; (8013e90 <GUI_Text_L_Measure+0x320>)
{
 8013b7c:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8013b7e:	781a      	ldrb	r2, [r3, #0]
 8013b80:	4bc4      	ldr	r3, [pc, #784]	; (8013e94 <GUI_Text_L_Measure+0x324>)
 8013b82:	781b      	ldrb	r3, [r3, #0]
 8013b84:	429a      	cmp	r2, r3
{
 8013b86:	b086      	sub	sp, #24
 8013b88:	4604      	mov	r4, r0
 8013b8a:	460d      	mov	r5, r1
 8013b8c:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8013b90:	d007      	beq.n	8013ba2 <GUI_Text_L_Measure+0x32>
 8013b92:	4ac1      	ldr	r2, [pc, #772]	; (8013e98 <GUI_Text_L_Measure+0x328>)
 8013b94:	2300      	movs	r3, #0
 8013b96:	7013      	strb	r3, [r2, #0]
 8013b98:	4ac0      	ldr	r2, [pc, #768]	; (8013e9c <GUI_Text_L_Measure+0x32c>)
 8013b9a:	7013      	strb	r3, [r2, #0]
 8013b9c:	4bc0      	ldr	r3, [pc, #768]	; (8013ea0 <GUI_Text_L_Measure+0x330>)
 8013b9e:	22ff      	movs	r2, #255	; 0xff
 8013ba0:	701a      	strb	r2, [r3, #0]
	char buffer[9] = {0};
 8013ba2:	2300      	movs	r3, #0
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
	uint32_t dec = 10;
	
	if((Value/1000.0) >= 1.0)
 8013ba4:	ee18 0a10 	vmov	r0, s16
	char buffer[9] = {0};
 8013ba8:	9303      	str	r3, [sp, #12]
 8013baa:	9304      	str	r3, [sp, #16]
 8013bac:	f88d 3014 	strb.w	r3, [sp, #20]
	if((Value/1000.0) >= 1.0)
 8013bb0:	f7ec fce2 	bl	8000578 <__aeabi_f2d>
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	4bbb      	ldr	r3, [pc, #748]	; (8013ea4 <GUI_Text_L_Measure+0x334>)
 8013bb8:	f7ec fe5c 	bl	8000874 <__aeabi_ddiv>
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	4bba      	ldr	r3, [pc, #744]	; (8013ea8 <GUI_Text_L_Measure+0x338>)
 8013bc0:	f7ec ffb4 	bl	8000b2c <__aeabi_dcmpge>
 8013bc4:	2800      	cmp	r0, #0
 8013bc6:	d039      	beq.n	8013c3c <GUI_Text_L_Measure+0xcc>
	{
		Value = Value/(1000.0);
 8013bc8:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8013eac <GUI_Text_L_Measure+0x33c>
 8013bcc:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8013bd0:	2601      	movs	r6, #1
		Value = Value * 1000.0;
		deg = 2;
		meas_type = 0;
	}

	TFT_SetTextColor(TFT_White);
 8013bd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013bd6:	f009 f8e1 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013bda:	2063      	movs	r0, #99	; 0x63
 8013bdc:	f009 f8e4 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8013be0:	48b3      	ldr	r0, [pc, #716]	; (8013eb0 <GUI_Text_L_Measure+0x340>)
 8013be2:	f009 f8d5 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8013be6:	1ca9      	adds	r1, r5, #2
 8013be8:	4620      	mov	r0, r4
 8013bea:	222b      	movs	r2, #43	; 0x2b
 8013bec:	b289      	uxth	r1, r1
 8013bee:	f009 f999 	bl	801cf24 <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 8013bf2:	48b0      	ldr	r0, [pc, #704]	; (8013eb4 <GUI_Text_L_Measure+0x344>)
	if(energy_light) {
 8013bf4:	b3a7      	cbz	r7, 8013c60 <GUI_Text_L_Measure+0xf0>
	TFT_SetFont(&Font16EN_arch_small);
 8013bf6:	f009 f8cb 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8013bfa:	f105 010e 	add.w	r1, r5, #14
 8013bfe:	f104 0014 	add.w	r0, r4, #20
 8013c02:	2265      	movs	r2, #101	; 0x65
 8013c04:	b289      	uxth	r1, r1
 8013c06:	b280      	uxth	r0, r0
 8013c08:	f009 f98c 	bl	801cf24 <TFT_DrawChar>
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
	}
	
	if(nope) 
 8013c0c:	f1b8 0f00 	cmp.w	r8, #0
 8013c10:	d137      	bne.n	8013c82 <GUI_Text_L_Measure+0x112>
 8013c12:	4ba9      	ldr	r3, [pc, #676]	; (8013eb8 <GUI_Text_L_Measure+0x348>)
			buffer[0] = '-';buffer[1] = '-';
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
			old_nan_Ll = 1;}
		}
	else{
	if(energy_light && deg == 2)
 8013c14:	2e02      	cmp	r6, #2
	{
		old_nan_Ee = 0;
 8013c16:	f883 8000 	strb.w	r8, [r3]
	if(energy_light && deg == 2)
 8013c1a:	f040 80c1 	bne.w	8013da0 <GUI_Text_L_Measure+0x230>
		Value = floor(Value*100)/100.0;
	}
	if(!energy_light)
	{
		old_nan_El = 0;
		Value = floor(Value*10)/10.0;
 8013c1e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013c22:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013c26:	ee17 0a90 	vmov	r0, s15
 8013c2a:	f7ec fca5 	bl	8000578 <__aeabi_f2d>
 8013c2e:	ec41 0b10 	vmov	d0, r0, r1
 8013c32:	f00f fca9 	bl	8023588 <floor>
 8013c36:	2200      	movs	r2, #0
 8013c38:	4ba0      	ldr	r3, [pc, #640]	; (8013ebc <GUI_Text_L_Measure+0x34c>)
 8013c3a:	e0bf      	b.n	8013dbc <GUI_Text_L_Measure+0x24c>
	else if (energy_light && Value < 1.0)
 8013c3c:	b167      	cbz	r7, 8013c58 <GUI_Text_L_Measure+0xe8>
 8013c3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c4a:	d507      	bpl.n	8013c5c <GUI_Text_L_Measure+0xec>
		Value = Value * 1000.0;
 8013c4c:	eddf 7a97 	vldr	s15, [pc, #604]	; 8013eac <GUI_Text_L_Measure+0x33c>
		deg = 2;
 8013c50:	2602      	movs	r6, #2
		Value = Value * 1000.0;
 8013c52:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013c56:	e7bc      	b.n	8013bd2 <GUI_Text_L_Measure+0x62>
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8013c58:	463e      	mov	r6, r7
 8013c5a:	e7ba      	b.n	8013bd2 <GUI_Text_L_Measure+0x62>
 8013c5c:	4606      	mov	r6, r0
 8013c5e:	e7b8      	b.n	8013bd2 <GUI_Text_L_Measure+0x62>
		TFT_SetFont(&Font16EN_arch_small);
 8013c60:	f009 f896 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8013c64:	f105 010d 	add.w	r1, r5, #13
 8013c68:	f104 0017 	add.w	r0, r4, #23
 8013c6c:	227b      	movs	r2, #123	; 0x7b
 8013c6e:	b289      	uxth	r1, r1
 8013c70:	b280      	uxth	r0, r0
 8013c72:	f009 f957 	bl	801cf24 <TFT_DrawChar>
	if(nope) 
 8013c76:	f1b8 0f00 	cmp.w	r8, #0
 8013c7a:	d135      	bne.n	8013ce8 <GUI_Text_L_Measure+0x178>
		old_nan_El = 0;
 8013c7c:	4b90      	ldr	r3, [pc, #576]	; (8013ec0 <GUI_Text_L_Measure+0x350>)
 8013c7e:	701f      	strb	r7, [r3, #0]
 8013c80:	e7cd      	b.n	8013c1e <GUI_Text_L_Measure+0xae>
			if(energy_light & !old_nan_Le){
 8013c82:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8013e98 <GUI_Text_L_Measure+0x328>
 8013c86:	f898 3000 	ldrb.w	r3, [r8]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	bf14      	ite	ne
 8013c8e:	2300      	movne	r3, #0
 8013c90:	f007 0301 	andeq.w	r3, r7, #1
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d055      	beq.n	8013d44 <GUI_Text_L_Measure+0x1d4>
			TFT_SetTextColor(TFT_White);
 8013c98:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013c9c:	f009 f87e 	bl	801cd9c <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8013ca0:	2063      	movs	r0, #99	; 0x63
 8013ca2:	f009 f881 	bl	801cda8 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8013ca6:	4887      	ldr	r0, [pc, #540]	; (8013ec4 <GUI_Text_L_Measure+0x354>)
 8013ca8:	f009 f872 	bl	801cd90 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013cac:	2163      	movs	r1, #99	; 0x63
 8013cae:	f105 031a 	add.w	r3, r5, #26
 8013cb2:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013cb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013cba:	9100      	str	r1, [sp, #0]
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	b292      	uxth	r2, r2
 8013cc0:	4629      	mov	r1, r5
 8013cc2:	b280      	uxth	r0, r0
 8013cc4:	f008 fe3b 	bl	801c93e <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8013cc8:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013cca:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8013cce:	f88d 300c 	strb.w	r3, [sp, #12]
 8013cd2:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013cd6:	aa03      	add	r2, sp, #12
 8013cd8:	2303      	movs	r3, #3
 8013cda:	4629      	mov	r1, r5
 8013cdc:	b280      	uxth	r0, r0
 8013cde:	f009 f979 	bl	801cfd4 <TFT_DisplayString>
			old_nan_Le = 1;}
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	f888 3000 	strb.w	r3, [r8]
			if(!energy_light & !old_nan_Ll){
 8013ce8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013e9c <GUI_Text_L_Measure+0x32c>
 8013cec:	f898 3000 	ldrb.w	r3, [r8]
 8013cf0:	bb43      	cbnz	r3, 8013d44 <GUI_Text_L_Measure+0x1d4>
 8013cf2:	bb3f      	cbnz	r7, 8013d44 <GUI_Text_L_Measure+0x1d4>
			TFT_SetTextColor(TFT_White);
 8013cf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013cf8:	f009 f850 	bl	801cd9c <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8013cfc:	2063      	movs	r0, #99	; 0x63
 8013cfe:	f009 f853 	bl	801cda8 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8013d02:	4870      	ldr	r0, [pc, #448]	; (8013ec4 <GUI_Text_L_Measure+0x354>)
 8013d04:	f009 f844 	bl	801cd90 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013d08:	2163      	movs	r1, #99	; 0x63
 8013d0a:	f105 031a 	add.w	r3, r5, #26
 8013d0e:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013d12:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013d16:	9100      	str	r1, [sp, #0]
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	b292      	uxth	r2, r2
 8013d1c:	4629      	mov	r1, r5
 8013d1e:	b280      	uxth	r0, r0
 8013d20:	f008 fe0d 	bl	801c93e <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8013d24:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013d26:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8013d2a:	f88d 300c 	strb.w	r3, [sp, #12]
 8013d2e:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013d32:	aa03      	add	r2, sp, #12
 8013d34:	2303      	movs	r3, #3
 8013d36:	4629      	mov	r1, r5
 8013d38:	b280      	uxth	r0, r0
 8013d3a:	f009 f94b 	bl	801cfd4 <TFT_DisplayString>
			old_nan_Ll = 1;}
 8013d3e:	2301      	movs	r3, #1
 8013d40:	f888 3000 	strb.w	r3, [r8]
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
	
}
	if (Language_status == Ru && !energy_light)
 8013d44:	4b60      	ldr	r3, [pc, #384]	; (8013ec8 <GUI_Text_L_Measure+0x358>)
 8013d46:	f893 8000 	ldrb.w	r8, [r3]
 8013d4a:	f1b8 0f00 	cmp.w	r8, #0
 8013d4e:	f040 80d7 	bne.w	8013f00 <GUI_Text_L_Measure+0x390>
 8013d52:	2f00      	cmp	r7, #0
 8013d54:	f040 8112 	bne.w	8013f7c <GUI_Text_L_Measure+0x40c>
 8013d58:	4b51      	ldr	r3, [pc, #324]	; (8013ea0 <GUI_Text_L_Measure+0x330>)
	{
		if (deg && old_deg_L != 1){
 8013d5a:	781a      	ldrb	r2, [r3, #0]
 8013d5c:	2e00      	cmp	r6, #0
 8013d5e:	f000 80bf 	beq.w	8013ee0 <GUI_Text_L_Measure+0x370>
 8013d62:	2a01      	cmp	r2, #1
 8013d64:	d017      	beq.n	8013d96 <GUI_Text_L_Measure+0x226>
			old_deg_L = 1;
 8013d66:	2601      	movs	r6, #1
 8013d68:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8013d6a:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8013d6e:	f105 031a 	add.w	r3, r5, #26
 8013d72:	1ce9      	adds	r1, r5, #3
 8013d74:	2763      	movs	r7, #99	; 0x63
 8013d76:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8013d7a:	9700      	str	r7, [sp, #0]
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	b292      	uxth	r2, r2
 8013d80:	b289      	uxth	r1, r1
			GUI_TextRu_Cd_m2(X+205, Y, 1);
		}else if(!deg && old_deg_L != 0){
			old_deg_L = 0;
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8013d82:	b280      	uxth	r0, r0
 8013d84:	f008 fddb 	bl	801c93e <TFT_FillRectangle>
			GUI_TextRu_Cd_m2(X+205, Y, 0);
 8013d88:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 8013d8c:	4632      	mov	r2, r6
 8013d8e:	4629      	mov	r1, r5
 8013d90:	b280      	uxth	r0, r0
 8013d92:	f005 fb4f 	bl	8019434 <GUI_TextRu_Cd_m2>
		{
			GUI_TextEn_W_m2_sr(X+210, Y);
		}
		old_deg_L_wt = deg;
	}
}
 8013d96:	b006      	add	sp, #24
 8013d98:	ecbd 8b02 	vpop	{d8}
 8013d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Value = floor(Value*100)/100.0;
 8013da0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013ecc <GUI_Text_L_Measure+0x35c>
 8013da4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013da8:	ee17 0a90 	vmov	r0, s15
 8013dac:	f7ec fbe4 	bl	8000578 <__aeabi_f2d>
 8013db0:	ec41 0b10 	vmov	d0, r0, r1
 8013db4:	f00f fbe8 	bl	8023588 <floor>
 8013db8:	4b45      	ldr	r3, [pc, #276]	; (8013ed0 <GUI_Text_L_Measure+0x360>)
 8013dba:	2200      	movs	r2, #0
 8013dbc:	ec51 0b10 	vmov	r0, r1, d0
 8013dc0:	f7ec fd58 	bl	8000874 <__aeabi_ddiv>
 8013dc4:	f7ec ff24 	bl	8000c10 <__aeabi_d2f>
 8013dc8:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013dcc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8013dd0:	f249 43d2 	movw	r3, #38098	; 0x94d2
 8013dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013dd8:	2800      	cmp	r0, #0
 8013dda:	bf0c      	ite	eq
 8013ddc:	4610      	moveq	r0, r2
 8013dde:	4618      	movne	r0, r3
 8013de0:	f008 ffdc 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013de4:	2063      	movs	r0, #99	; 0x63
 8013de6:	f008 ffdf 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013dea:	4836      	ldr	r0, [pc, #216]	; (8013ec4 <GUI_Text_L_Measure+0x354>)
 8013dec:	f008 ffd0 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8013df0:	ee18 0a10 	vmov	r0, s16
 8013df4:	f7ec fbc0 	bl	8000578 <__aeabi_f2d>
 8013df8:	4602      	mov	r2, r0
 8013dfa:	460b      	mov	r3, r1
 8013dfc:	a803      	add	r0, sp, #12
 8013dfe:	4935      	ldr	r1, [pc, #212]	; (8013ed4 <GUI_Text_L_Measure+0x364>)
 8013e00:	f00c fc06 	bl	8020610 <sprintf>
	uint32_t dec = 10;
 8013e04:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8013e06:	2304      	movs	r3, #4
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8013e08:	f04f 0800 	mov.w	r8, #0
 8013e0c:	f04f 0975 	mov.w	r9, #117	; 0x75
		if((Value/(dec)) >= 1.0)
 8013e10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8013e14:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8013e16:	ee07 2a10 	vmov	s14, r2
 8013e1a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8013e1e:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8013e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e2a:	db08      	blt.n	8013e3e <GUI_Text_L_Measure+0x2ce>
			delta_pos-=23;
 8013e2c:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 8013e30:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8013e34:	434a      	muls	r2, r1
			delta_pos-=23;
 8013e36:	fa5f f989 	uxtb.w	r9, r9
			number++;
 8013e3a:	fa5f f888 	uxtb.w	r8, r8
 8013e3e:	3b01      	subs	r3, #1
for (uint8_t i = 1; i <= 4; i++)
 8013e40:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8013e44:	d1e7      	bne.n	8013e16 <GUI_Text_L_Measure+0x2a6>
	if(energy_light && number < old_numL_e )
 8013e46:	b307      	cbz	r7, 8013e8a <GUI_Text_L_Measure+0x31a>
 8013e48:	4b23      	ldr	r3, [pc, #140]	; (8013ed8 <GUI_Text_L_Measure+0x368>)
	else if(!energy_light && number < old_numL_n)
 8013e4a:	781a      	ldrb	r2, [r3, #0]
 8013e4c:	4542      	cmp	r2, r8
 8013e4e:	469a      	mov	sl, r3
 8013e50:	d90d      	bls.n	8013e6e <GUI_Text_L_Measure+0x2fe>
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013e52:	2163      	movs	r1, #99	; 0x63
 8013e54:	f105 031a 	add.w	r3, r5, #26
 8013e58:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013e5c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013e60:	9100      	str	r1, [sp, #0]
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	b292      	uxth	r2, r2
 8013e66:	4629      	mov	r1, r5
 8013e68:	b280      	uxth	r0, r0
 8013e6a:	f008 fd68 	bl	801c93e <TFT_FillRectangle>
	buffer[8] = 0;
 8013e6e:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013e70:	eb04 0009 	add.w	r0, r4, r9
		old_numL_n = number;
 8013e74:	f88a 8000 	strb.w	r8, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013e78:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 8013e7a:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013e7e:	4629      	mov	r1, r5
 8013e80:	2303      	movs	r3, #3
 8013e82:	b280      	uxth	r0, r0
 8013e84:	f009 f8a6 	bl	801cfd4 <TFT_DisplayString>
 8013e88:	e75c      	b.n	8013d44 <GUI_Text_L_Measure+0x1d4>
	else if(!energy_light && number < old_numL_n)
 8013e8a:	4b14      	ldr	r3, [pc, #80]	; (8013edc <GUI_Text_L_Measure+0x36c>)
 8013e8c:	e7dd      	b.n	8013e4a <GUI_Text_L_Measure+0x2da>
 8013e8e:	bf00      	nop
 8013e90:	2000022a 	.word	0x2000022a
 8013e94:	20005701 	.word	0x20005701
 8013e98:	20005738 	.word	0x20005738
 8013e9c:	20005739 	.word	0x20005739
 8013ea0:	2000022b 	.word	0x2000022b
 8013ea4:	408f4000 	.word	0x408f4000
 8013ea8:	3ff00000 	.word	0x3ff00000
 8013eac:	447a0000 	.word	0x447a0000
 8013eb0:	200001e8 	.word	0x200001e8
 8013eb4:	200001c0 	.word	0x200001c0
 8013eb8:	20005735 	.word	0x20005735
 8013ebc:	40240000 	.word	0x40240000
 8013ec0:	20005736 	.word	0x20005736
 8013ec4:	200001f0 	.word	0x200001f0
 8013ec8:	20005703 	.word	0x20005703
 8013ecc:	42c80000 	.word	0x42c80000
 8013ed0:	40590000 	.word	0x40590000
 8013ed4:	080320e5 	.word	0x080320e5
 8013ed8:	20000233 	.word	0x20000233
 8013edc:	20000234 	.word	0x20000234
		}else if(!deg && old_deg_L != 0){
 8013ee0:	2a00      	cmp	r2, #0
 8013ee2:	f43f af58 	beq.w	8013d96 <GUI_Text_L_Measure+0x226>
			old_deg_L = 0;
 8013ee6:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8013ee8:	2163      	movs	r1, #99	; 0x63
 8013eea:	f105 031a 	add.w	r3, r5, #26
 8013eee:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8013ef2:	9100      	str	r1, [sp, #0]
 8013ef4:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
 8013ef8:	b29b      	uxth	r3, r3
 8013efa:	b292      	uxth	r2, r2
 8013efc:	4629      	mov	r1, r5
 8013efe:	e740      	b.n	8013d82 <GUI_Text_L_Measure+0x212>
	else if (Language_status == En && !energy_light)
 8013f00:	f1b8 0f01 	cmp.w	r8, #1
 8013f04:	f47f af47 	bne.w	8013d96 <GUI_Text_L_Measure+0x226>
 8013f08:	2f00      	cmp	r7, #0
 8013f0a:	d153      	bne.n	8013fb4 <GUI_Text_L_Measure+0x444>
 8013f0c:	4b37      	ldr	r3, [pc, #220]	; (8013fec <GUI_Text_L_Measure+0x47c>)
		if (deg && old_deg_L != 1){
 8013f0e:	781a      	ldrb	r2, [r3, #0]
 8013f10:	b1e6      	cbz	r6, 8013f4c <GUI_Text_L_Measure+0x3dc>
 8013f12:	2a01      	cmp	r2, #1
 8013f14:	f43f af3f 	beq.w	8013d96 <GUI_Text_L_Measure+0x226>
			old_deg_L = 1;
 8013f18:	f883 8000 	strb.w	r8, [r3]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8013f1c:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8013f20:	f105 031a 	add.w	r3, r5, #26
 8013f24:	1f69      	subs	r1, r5, #5
 8013f26:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8013f2a:	2663      	movs	r6, #99	; 0x63
 8013f2c:	b292      	uxth	r2, r2
 8013f2e:	b289      	uxth	r1, r1
 8013f30:	b280      	uxth	r0, r0
 8013f32:	9600      	str	r6, [sp, #0]
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	f008 fd02 	bl	801c93e <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+210, Y-4, 1);
 8013f3a:	1f29      	subs	r1, r5, #4
 8013f3c:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8013f40:	4642      	mov	r2, r8
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8013f42:	b289      	uxth	r1, r1
 8013f44:	b280      	uxth	r0, r0
 8013f46:	f004 f843 	bl	8017fd0 <GUI_TextEn_cd_m2>
 8013f4a:	e724      	b.n	8013d96 <GUI_Text_L_Measure+0x226>
		}else if(!deg && old_deg_L != 0){
 8013f4c:	2a00      	cmp	r2, #0
 8013f4e:	f43f af22 	beq.w	8013d96 <GUI_Text_L_Measure+0x226>
			old_deg_L = 0;
 8013f52:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8013f54:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8013f58:	f105 031a 	add.w	r3, r5, #26
 8013f5c:	1f69      	subs	r1, r5, #5
 8013f5e:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8013f62:	2763      	movs	r7, #99	; 0x63
 8013f64:	b292      	uxth	r2, r2
 8013f66:	b289      	uxth	r1, r1
 8013f68:	b280      	uxth	r0, r0
 8013f6a:	9700      	str	r7, [sp, #0]
 8013f6c:	b29b      	uxth	r3, r3
 8013f6e:	f008 fce6 	bl	801c93e <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8013f72:	1f29      	subs	r1, r5, #4
 8013f74:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
 8013f78:	4632      	mov	r2, r6
 8013f7a:	e7e2      	b.n	8013f42 <GUI_Text_L_Measure+0x3d2>
		if (deg != old_deg_L_wt)
 8013f7c:	4f1c      	ldr	r7, [pc, #112]	; (8013ff0 <GUI_Text_L_Measure+0x480>)
 8013f7e:	783a      	ldrb	r2, [r7, #0]
 8013f80:	42b2      	cmp	r2, r6
 8013f82:	d00a      	beq.n	8013f9a <GUI_Text_L_Measure+0x42a>
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 8013f84:	2263      	movs	r2, #99	; 0x63
 8013f86:	f105 031a 	add.w	r3, r5, #26
 8013f8a:	9200      	str	r2, [sp, #0]
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8013f92:	4629      	mov	r1, r5
 8013f94:	20e6      	movs	r0, #230	; 0xe6
 8013f96:	f008 fcd2 	bl	801c93e <TFT_FillRectangle>
 8013f9a:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
		if (deg == 2)
 8013f9e:	2e02      	cmp	r6, #2
			GUI_TextRu_mW_m2_sr(X+210, Y);
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	b280      	uxth	r0, r0
		if (deg == 2)
 8013fa4:	d103      	bne.n	8013fae <GUI_Text_L_Measure+0x43e>
			GUI_TextRu_mW_m2_sr(X+210, Y);
 8013fa6:	f005 f9d9 	bl	801935c <GUI_TextRu_mW_m2_sr>
		old_deg_L_wt = deg;
 8013faa:	703e      	strb	r6, [r7, #0]
}
 8013fac:	e6f3      	b.n	8013d96 <GUI_Text_L_Measure+0x226>
			GUI_TextRu_W_m2_sr(X+210, Y);
 8013fae:	f005 f973 	bl	8019298 <GUI_TextRu_W_m2_sr>
 8013fb2:	e7fa      	b.n	8013faa <GUI_Text_L_Measure+0x43a>
		if (deg != old_deg_L_wt)
 8013fb4:	4f0e      	ldr	r7, [pc, #56]	; (8013ff0 <GUI_Text_L_Measure+0x480>)
 8013fb6:	783a      	ldrb	r2, [r7, #0]
 8013fb8:	42b2      	cmp	r2, r6
 8013fba:	d00a      	beq.n	8013fd2 <GUI_Text_L_Measure+0x462>
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 8013fbc:	2263      	movs	r2, #99	; 0x63
 8013fbe:	f105 031a 	add.w	r3, r5, #26
 8013fc2:	9200      	str	r2, [sp, #0]
 8013fc4:	b29b      	uxth	r3, r3
 8013fc6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8013fca:	4629      	mov	r1, r5
 8013fcc:	20e6      	movs	r0, #230	; 0xe6
 8013fce:	f008 fcb6 	bl	801c93e <TFT_FillRectangle>
 8013fd2:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
		if (deg == 2)
 8013fd6:	2e02      	cmp	r6, #2
			GUI_TextEn_mW_m2_sr(X+210, Y);
 8013fd8:	4629      	mov	r1, r5
 8013fda:	b280      	uxth	r0, r0
		if (deg == 2)
 8013fdc:	d102      	bne.n	8013fe4 <GUI_Text_L_Measure+0x474>
			GUI_TextEn_mW_m2_sr(X+210, Y);
 8013fde:	f003 ff99 	bl	8017f14 <GUI_TextEn_mW_m2_sr>
 8013fe2:	e7e2      	b.n	8013faa <GUI_Text_L_Measure+0x43a>
			GUI_TextEn_W_m2_sr(X+210, Y);
 8013fe4:	f003 ff3e 	bl	8017e64 <GUI_TextEn_W_m2_sr>
 8013fe8:	e7df      	b.n	8013faa <GUI_Text_L_Measure+0x43a>
 8013fea:	bf00      	nop
 8013fec:	2000022b 	.word	0x2000022b
 8013ff0:	2000022c 	.word	0x2000022c

08013ff4 <GUI_Text_PPF_Measure>:

uint8_t old_numPPF = 10, old_nan_PPF = 0;
void GUI_Text_PPF_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8013ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff8:	ed2d 8b02 	vpush	{d8}
 8013ffc:	4692      	mov	sl, r2
 8013ffe:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8014000:	4ab1      	ldr	r2, [pc, #708]	; (80142c8 <GUI_Text_PPF_Measure+0x2d4>)
 8014002:	4bb2      	ldr	r3, [pc, #712]	; (80142cc <GUI_Text_PPF_Measure+0x2d8>)
 8014004:	4eb2      	ldr	r6, [pc, #712]	; (80142d0 <GUI_Text_PPF_Measure+0x2dc>)
{	
 8014006:	4604      	mov	r4, r0
 8014008:	460d      	mov	r5, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 801400a:	7810      	ldrb	r0, [r2, #0]
 801400c:	7819      	ldrb	r1, [r3, #0]
 801400e:	4288      	cmp	r0, r1
{	
 8014010:	b087      	sub	sp, #28
 8014012:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8014014:	bf1c      	itt	ne
 8014016:	2300      	movne	r3, #0
 8014018:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 801401a:	2300      	movs	r3, #0
{	
 801401c:	eeb0 8a40 	vmov.f32	s16, s0
 8014020:	4691      	mov	r9, r2
	char buffer[9] = {0};
 8014022:	9303      	str	r3, [sp, #12]
 8014024:	9304      	str	r3, [sp, #16]
 8014026:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 122, deg = 0, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 801402a:	f1ba 0f00 	cmp.w	sl, #0
 801402e:	d067      	beq.n	8014100 <GUI_Text_PPF_Measure+0x10c>
		{	
			if(!old_nan_PPF){
 8014030:	7837      	ldrb	r7, [r6, #0]
 8014032:	2f00      	cmp	r7, #0
 8014034:	f040 80f0 	bne.w	8014218 <GUI_Text_PPF_Measure+0x224>
				TFT_SetTextColor(TFT_White);
 8014038:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801403c:	f008 feae 	bl	801cd9c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8014040:	2063      	movs	r0, #99	; 0x63
 8014042:	f008 feb1 	bl	801cda8 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8014046:	48a3      	ldr	r0, [pc, #652]	; (80142d4 <GUI_Text_PPF_Measure+0x2e0>)
 8014048:	f008 fea2 	bl	801cd90 <TFT_SetFont>
				TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 801404c:	2163      	movs	r1, #99	; 0x63
 801404e:	f105 031a 	add.w	r3, r5, #26
 8014052:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8014056:	f104 0046 	add.w	r0, r4, #70	; 0x46
 801405a:	9100      	str	r1, [sp, #0]
 801405c:	b29b      	uxth	r3, r3
 801405e:	b292      	uxth	r2, r2
 8014060:	4629      	mov	r1, r5
 8014062:	b280      	uxth	r0, r0
 8014064:	f008 fc6b 	bl	801c93e <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8014068:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801406a:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 801406e:	f88d 300c 	strb.w	r3, [sp, #12]
 8014072:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014076:	aa03      	add	r2, sp, #12
 8014078:	2303      	movs	r3, #3
 801407a:	4629      	mov	r1, r5
 801407c:	b280      	uxth	r0, r0
 801407e:	f008 ffa9 	bl	801cfd4 <TFT_DisplayString>
				old_nan_PPF = 1;
 8014082:	2301      	movs	r3, #1
 8014084:	7033      	strb	r3, [r6, #0]
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	
{
	TFT_SetTextColor(TFT_White);
 8014086:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801408a:	f008 fe87 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801408e:	2063      	movs	r0, #99	; 0x63
 8014090:	f008 fe8a 	bl	801cda8 <TFT_SetBackColor>
	if(Language_status == Ru ){
 8014094:	4b90      	ldr	r3, [pc, #576]	; (80142d8 <GUI_Text_PPF_Measure+0x2e4>)
 8014096:	f8df b25c 	ldr.w	fp, [pc, #604]	; 80142f4 <GUI_Text_PPF_Measure+0x300>
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	1cae      	adds	r6, r5, #2
 801409e:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	f040 80c0 	bne.w	8014228 <GUI_Text_PPF_Measure+0x234>
			TFT_SetFont(&Font26RU_arch_big);
 80140a8:	488c      	ldr	r0, [pc, #560]	; (80142dc <GUI_Text_PPF_Measure+0x2e8>)
 80140aa:	f008 fe71 	bl	801cd90 <TFT_SetFont>
			if(preGUI_screen_state != GUI_screen_state){
 80140ae:	f899 2000 	ldrb.w	r2, [r9]
 80140b2:	f898 3000 	ldrb.w	r3, [r8]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d012      	beq.n	80140e0 <GUI_Text_PPF_Measure+0xec>
				TFT_DrawCharRus(X, Y, 'Ф'-17);
 80140ba:	2293      	movs	r2, #147	; 0x93
 80140bc:	4629      	mov	r1, r5
 80140be:	4620      	mov	r0, r4
 80140c0:	f008 fe78 	bl	801cdb4 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+24, Y, 'А'-17);
 80140c4:	f104 0018 	add.w	r0, r4, #24
 80140c8:	227f      	movs	r2, #127	; 0x7f
 80140ca:	4629      	mov	r1, r5
 80140cc:	b280      	uxth	r0, r0
 80140ce:	f008 fe71 	bl	801cdb4 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+48, Y, 'Р'-17);}
 80140d2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80140d6:	228f      	movs	r2, #143	; 0x8f
 80140d8:	4629      	mov	r1, r5
 80140da:	b280      	uxth	r0, r0
 80140dc:	f008 fe6a 	bl	801cdb4 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 80140e0:	f89b 3000 	ldrb.w	r3, [fp]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	f000 8099 	beq.w	801421c <GUI_Text_PPF_Measure+0x228>
 80140ea:	463a      	mov	r2, r7
 80140ec:	b2b1      	uxth	r1, r6
 80140ee:	fa1f f08a 	uxth.w	r0, sl
 80140f2:	f004 ff4f 	bl	8018f94 <GUI_TextRu_umol>
				TFT_DrawChar(X+5, Y+2, 'P');
				TFT_DrawChar(X+20, Y+2, 'L');}
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
			}
		}	}
}
 80140f6:	b007      	add	sp, #28
 80140f8:	ecbd 8b02 	vpop	{d8}
 80140fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_PPF){TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);}
 8014100:	7833      	ldrb	r3, [r6, #0]
 8014102:	b16b      	cbz	r3, 8014120 <GUI_Text_PPF_Measure+0x12c>
 8014104:	2163      	movs	r1, #99	; 0x63
 8014106:	f105 031a 	add.w	r3, r5, #26
 801410a:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801410e:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8014112:	9100      	str	r1, [sp, #0]
 8014114:	b29b      	uxth	r3, r3
 8014116:	b292      	uxth	r2, r2
 8014118:	4629      	mov	r1, r5
 801411a:	b280      	uxth	r0, r0
 801411c:	f008 fc0f 	bl	801c93e <TFT_FillRectangle>
	Value = floor(Value*10)/10.0;
 8014120:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014124:	ee68 7a27 	vmul.f32	s15, s16, s15
	old_nan_PPF = 0;
 8014128:	2300      	movs	r3, #0
	Value = floor(Value*10)/10.0;
 801412a:	ee17 0a90 	vmov	r0, s15
	old_nan_PPF = 0;
 801412e:	7033      	strb	r3, [r6, #0]
	Value = floor(Value*10)/10.0;
 8014130:	f7ec fa22 	bl	8000578 <__aeabi_f2d>
 8014134:	ec41 0b10 	vmov	d0, r0, r1
 8014138:	f00f fa26 	bl	8023588 <floor>
 801413c:	2200      	movs	r2, #0
 801413e:	ec51 0b10 	vmov	r0, r1, d0
 8014142:	4b67      	ldr	r3, [pc, #412]	; (80142e0 <GUI_Text_PPF_Measure+0x2ec>)
 8014144:	f7ec fb96 	bl	8000874 <__aeabi_ddiv>
 8014148:	f7ec fd62 	bl	8000c10 <__aeabi_d2f>
	if((Value/1000) >= 1.0)
 801414c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80142e4 <GUI_Text_PPF_Measure+0x2f0>
	Value = floor(Value*10)/10.0;
 8014150:	ee08 0a10 	vmov	s16, r0
	if((Value/1000) >= 1.0)
 8014154:	eec8 7a07 	vdiv.f32	s15, s16, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801415c:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 122, deg = 0, number = 0;
 8014160:	267a      	movs	r6, #122	; 0x7a
	if((Value/1000) >= 1.0)
 8014162:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	uint8_t	delta_pos = 122, deg = 0, number = 0;
 8014166:	eef4 7ae8 	vcmpe.f32	s15, s17
 801416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801416e:	bfa8      	it	ge
 8014170:	eeb0 8a67 	vmovge.f32	s16, s15
 8014174:	bfac      	ite	ge
 8014176:	2701      	movge	r7, #1
 8014178:	2700      	movlt	r7, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801417a:	f1bb 0f00 	cmp.w	fp, #0
 801417e:	bf08      	it	eq
 8014180:	4618      	moveq	r0, r3
 8014182:	f008 fe0b 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014186:	2063      	movs	r0, #99	; 0x63
 8014188:	f008 fe0e 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801418c:	4851      	ldr	r0, [pc, #324]	; (80142d4 <GUI_Text_PPF_Measure+0x2e0>)
 801418e:	f008 fdff 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8014192:	ee18 0a10 	vmov	r0, s16
 8014196:	f7ec f9ef 	bl	8000578 <__aeabi_f2d>
 801419a:	4602      	mov	r2, r0
 801419c:	460b      	mov	r3, r1
 801419e:	a803      	add	r0, sp, #12
 80141a0:	4951      	ldr	r1, [pc, #324]	; (80142e8 <GUI_Text_PPF_Measure+0x2f4>)
 80141a2:	f00c fa35 	bl	8020610 <sprintf>
	uint32_t dec = 10;
 80141a6:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 80141a8:	2304      	movs	r3, #4
			dec *= 10;
 80141aa:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80141ac:	ee07 2a90 	vmov	s15, r2
 80141b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80141b4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80141b8:	eef4 7ae8 	vcmpe.f32	s15, s17
 80141bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c0:	db06      	blt.n	80141d0 <GUI_Text_PPF_Measure+0x1dc>
			delta_pos-=23;
 80141c2:	3e17      	subs	r6, #23
			number++;
 80141c4:	f10a 0a01 	add.w	sl, sl, #1
			dec *= 10;
 80141c8:	434a      	muls	r2, r1
			delta_pos-=23;
 80141ca:	b2f6      	uxtb	r6, r6
			number++;
 80141cc:	fa5f fa8a 	uxtb.w	sl, sl
 80141d0:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80141d2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80141d6:	d1e9      	bne.n	80141ac <GUI_Text_PPF_Measure+0x1b8>
	if(number < old_numPPF )
 80141d8:	4b44      	ldr	r3, [pc, #272]	; (80142ec <GUI_Text_PPF_Measure+0x2f8>)
 80141da:	781a      	ldrb	r2, [r3, #0]
 80141dc:	4552      	cmp	r2, sl
 80141de:	469b      	mov	fp, r3
 80141e0:	d90d      	bls.n	80141fe <GUI_Text_PPF_Measure+0x20a>
		TFT_FillRectangle(X+70, Y, X+228, Y+26, TFT_Black_Bkgr);
 80141e2:	2163      	movs	r1, #99	; 0x63
 80141e4:	f105 031a 	add.w	r3, r5, #26
 80141e8:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
 80141ec:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80141f0:	9100      	str	r1, [sp, #0]
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	b292      	uxth	r2, r2
 80141f6:	4629      	mov	r1, r5
 80141f8:	b280      	uxth	r0, r0
 80141fa:	f008 fba0 	bl	801c93e <TFT_FillRectangle>
	buffer[8] = 0;
 80141fe:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014200:	19a0      	adds	r0, r4, r6
	buffer[8] = 0;
 8014202:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014206:	aa03      	add	r2, sp, #12
 8014208:	2303      	movs	r3, #3
 801420a:	4629      	mov	r1, r5
 801420c:	b280      	uxth	r0, r0
	old_numPPF = number;
 801420e:	f88b a000 	strb.w	sl, [fp]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014212:	f008 fedf 	bl	801cfd4 <TFT_DisplayString>
 8014216:	e736      	b.n	8014086 <GUI_Text_PPF_Measure+0x92>
	uint8_t	delta_pos = 122, deg = 0, number = 0;
 8014218:	461f      	mov	r7, r3
 801421a:	e734      	b.n	8014086 <GUI_Text_PPF_Measure+0x92>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 801421c:	b2b1      	uxth	r1, r6
 801421e:	fa1f f08a 	uxth.w	r0, sl
 8014222:	f004 ff25 	bl	8019070 <GUI_TextRu_umol_sr>
 8014226:	e766      	b.n	80140f6 <GUI_Text_PPF_Measure+0x102>
			TFT_SetFont(&Font16EN_arch_big);
 8014228:	4831      	ldr	r0, [pc, #196]	; (80142f0 <GUI_Text_PPF_Measure+0x2fc>)
 801422a:	f008 fdb1 	bl	801cd90 <TFT_SetFont>
			if(Mode_EL){
 801422e:	f89b 3000 	ldrb.w	r3, [fp]
				if(preGUI_screen_state != GUI_screen_state){
 8014232:	f899 2000 	ldrb.w	r2, [r9]
			if(Mode_EL){
 8014236:	b333      	cbz	r3, 8014286 <GUI_Text_PPF_Measure+0x292>
				if(preGUI_screen_state != GUI_screen_state){
 8014238:	f898 3000 	ldrb.w	r3, [r8]
 801423c:	429a      	cmp	r2, r3
 801423e:	d01b      	beq.n	8014278 <GUI_Text_PPF_Measure+0x284>
				TFT_DrawChar(X-10, Y+2, 'P');
 8014240:	b2b5      	uxth	r5, r6
 8014242:	f1a4 000a 	sub.w	r0, r4, #10
 8014246:	2250      	movs	r2, #80	; 0x50
 8014248:	4629      	mov	r1, r5
 801424a:	b280      	uxth	r0, r0
 801424c:	f008 fe6a 	bl	801cf24 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8014250:	1d60      	adds	r0, r4, #5
 8014252:	2250      	movs	r2, #80	; 0x50
 8014254:	4629      	mov	r1, r5
 8014256:	b280      	uxth	r0, r0
 8014258:	f008 fe64 	bl	801cf24 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'F');
 801425c:	f104 0014 	add.w	r0, r4, #20
 8014260:	2246      	movs	r2, #70	; 0x46
 8014262:	4629      	mov	r1, r5
 8014264:	b280      	uxth	r0, r0
 8014266:	f008 fe5d 	bl	801cf24 <TFT_DrawChar>
				TFT_DrawChar(X+35, Y+2, 'D');}
 801426a:	f104 0023 	add.w	r0, r4, #35	; 0x23
 801426e:	2244      	movs	r2, #68	; 0x44
 8014270:	4629      	mov	r1, r5
 8014272:	b280      	uxth	r0, r0
 8014274:	f008 fe56 	bl	801cf24 <TFT_DrawChar>
				GUI_TextEn_umol(X+200, Y+2, deg);
 8014278:	463a      	mov	r2, r7
 801427a:	b2b1      	uxth	r1, r6
 801427c:	fa1f f08a 	uxth.w	r0, sl
 8014280:	f002 fe8a 	bl	8016f98 <GUI_TextEn_umol>
 8014284:	e737      	b.n	80140f6 <GUI_Text_PPF_Measure+0x102>
				if(preGUI_screen_state != GUI_screen_state){
 8014286:	f898 3000 	ldrb.w	r3, [r8]
 801428a:	429a      	cmp	r2, r3
 801428c:	d014      	beq.n	80142b8 <GUI_Text_PPF_Measure+0x2c4>
				TFT_DrawChar(X-10, Y+2, 'P');
 801428e:	b2b5      	uxth	r5, r6
 8014290:	f1a4 000a 	sub.w	r0, r4, #10
 8014294:	2250      	movs	r2, #80	; 0x50
 8014296:	4629      	mov	r1, r5
 8014298:	b280      	uxth	r0, r0
 801429a:	f008 fe43 	bl	801cf24 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 801429e:	1d60      	adds	r0, r4, #5
 80142a0:	2250      	movs	r2, #80	; 0x50
 80142a2:	4629      	mov	r1, r5
 80142a4:	b280      	uxth	r0, r0
 80142a6:	f008 fe3d 	bl	801cf24 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'L');}
 80142aa:	f104 0014 	add.w	r0, r4, #20
 80142ae:	224c      	movs	r2, #76	; 0x4c
 80142b0:	4629      	mov	r1, r5
 80142b2:	b280      	uxth	r0, r0
 80142b4:	f008 fe36 	bl	801cf24 <TFT_DrawChar>
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
 80142b8:	463a      	mov	r2, r7
 80142ba:	b2b1      	uxth	r1, r6
 80142bc:	fa1f f08a 	uxth.w	r0, sl
 80142c0:	f002 fed0 	bl	8017064 <GUI_TextEn_umol_sr>
}
 80142c4:	e717      	b.n	80140f6 <GUI_Text_PPF_Measure+0x102>
 80142c6:	bf00      	nop
 80142c8:	2000022a 	.word	0x2000022a
 80142cc:	20005701 	.word	0x20005701
 80142d0:	2000573a 	.word	0x2000573a
 80142d4:	200001f0 	.word	0x200001f0
 80142d8:	20005703 	.word	0x20005703
 80142dc:	20000200 	.word	0x20000200
 80142e0:	40240000 	.word	0x40240000
 80142e4:	447a0000 	.word	0x447a0000
 80142e8:	080320e5 	.word	0x080320e5
 80142ec:	20000235 	.word	0x20000235
 80142f0:	200001b0 	.word	0x200001b0
 80142f4:	20000ebc 	.word	0x20000ebc

080142f8 <GUI_Text_PPFRGB_Measure>:
uint8_t old_numPPFR = 10, old_numPPFG = 10, old_numPPFB = 10, old_numPPFFR = 10, test = 0, test2 = 0, delta_pos2 = 140, old_nan_PPFRGB = 0;
float ValueB2 = 10;
void GUI_Text_PPFRGB_Measure(uint16_t X, uint16_t Y, float ValueR, float ValueG, float ValueB, float ValueFR, uint8_t nope, uint8_t grey)
{
 80142f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142fc:	ed2d 8b08 	vpush	{d8-d11}
 8014300:	4616      	mov	r6, r2
 8014302:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8014304:	4aad      	ldr	r2, [pc, #692]	; (80145bc <GUI_Text_PPFRGB_Measure+0x2c4>)
 8014306:	4bae      	ldr	r3, [pc, #696]	; (80145c0 <GUI_Text_PPFRGB_Measure+0x2c8>)
 8014308:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80145dc <GUI_Text_PPFRGB_Measure+0x2e4>
{
 801430c:	4605      	mov	r5, r0
 801430e:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8014310:	7810      	ldrb	r0, [r2, #0]
 8014312:	7819      	ldrb	r1, [r3, #0]
{
 8014314:	b089      	sub	sp, #36	; 0x24
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8014316:	4288      	cmp	r0, r1
 8014318:	9303      	str	r3, [sp, #12]
 801431a:	bf1c      	itt	ne
 801431c:	2300      	movne	r3, #0
 801431e:	f889 3000 	strbne.w	r3, [r9]
	
	char buffer[9] = {0};
 8014322:	2300      	movs	r3, #0
{
 8014324:	eef0 aa40 	vmov.f32	s21, s0
 8014328:	eeb0 ba60 	vmov.f32	s22, s1
 801432c:	eeb0 8a41 	vmov.f32	s16, s2
 8014330:	eeb0 aa61 	vmov.f32	s20, s3
 8014334:	9202      	str	r2, [sp, #8]
	char buffer[9] = {0};
 8014336:	9305      	str	r3, [sp, #20]
 8014338:	9306      	str	r3, [sp, #24]
 801433a:	f88d 301c 	strb.w	r3, [sp, #28]
	uint8_t	delta_pos = 140, deg = 0, number=0;
	uint32_t dec = 10;

		if(nope) 
 801433e:	2e00      	cmp	r6, #0
 8014340:	f000 814e 	beq.w	80145e0 <GUI_Text_PPFRGB_Measure+0x2e8>
		{	
			if(!old_nan_PPFRGB){
 8014344:	f899 7000 	ldrb.w	r7, [r9]
 8014348:	2f00      	cmp	r7, #0
 801434a:	f040 8353 	bne.w	80149f4 <GUI_Text_PPFRGB_Measure+0x6fc>
				TFT_SetTextColor(TFT_White);
 801434e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014352:	f008 fd23 	bl	801cd9c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8014356:	2063      	movs	r0, #99	; 0x63
 8014358:	f008 fd26 	bl	801cda8 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 801435c:	f105 0662 	add.w	r6, r5, #98	; 0x62
				TFT_SetFont(&Font26EN_arch_digit);
 8014360:	4898      	ldr	r0, [pc, #608]	; (80145c4 <GUI_Text_PPFRGB_Measure+0x2cc>)
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8014362:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
				TFT_SetFont(&Font26EN_arch_digit);
 8014366:	f008 fd13 	bl	801cd90 <TFT_SetFont>
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 801436a:	b2b6      	uxth	r6, r6
 801436c:	fa1f f888 	uxth.w	r8, r8
 8014370:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8014374:	f104 0314 	add.w	r3, r4, #20
 8014378:	4630      	mov	r0, r6
 801437a:	b29b      	uxth	r3, r3
 801437c:	4642      	mov	r2, r8
 801437e:	4621      	mov	r1, r4
 8014380:	f8cd a000 	str.w	sl, [sp]
 8014384:	f008 fadb 	bl	801c93e <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8014388:	f104 0329 	add.w	r3, r4, #41	; 0x29
 801438c:	f104 0115 	add.w	r1, r4, #21
 8014390:	4630      	mov	r0, r6
 8014392:	b29b      	uxth	r3, r3
 8014394:	4642      	mov	r2, r8
 8014396:	b289      	uxth	r1, r1
 8014398:	f8cd a000 	str.w	sl, [sp]
 801439c:	f008 facf 	bl	801c93e <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 80143a0:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 80143a4:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80143a8:	4630      	mov	r0, r6
 80143aa:	b29b      	uxth	r3, r3
 80143ac:	4642      	mov	r2, r8
 80143ae:	b289      	uxth	r1, r1
 80143b0:	f8cd a000 	str.w	sl, [sp]
 80143b4:	f008 fac3 	bl	801c93e <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80143b8:	f104 0357 	add.w	r3, r4, #87	; 0x57
 80143bc:	f104 0141 	add.w	r1, r4, #65	; 0x41
 80143c0:	4630      	mov	r0, r6
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	4642      	mov	r2, r8
 80143c6:	b289      	uxth	r1, r1
 80143c8:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80143cc:	f105 0675 	add.w	r6, r5, #117	; 0x75
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80143d0:	f008 fab5 	bl	801c93e <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80143d4:	b2b6      	uxth	r6, r6
				buffer[0] = '-';buffer[1] = '-';
 80143d6:	232d      	movs	r3, #45	; 0x2d
 80143d8:	f88d 3014 	strb.w	r3, [sp, #20]
 80143dc:	f88d 3015 	strb.w	r3, [sp, #21]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80143e0:	aa05      	add	r2, sp, #20
 80143e2:	2303      	movs	r3, #3
 80143e4:	4621      	mov	r1, r4
 80143e6:	4630      	mov	r0, r6
 80143e8:	f008 fdf4 	bl	801cfd4 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+22, (uint8_t *)buffer, LEFT_MODE);
 80143ec:	f104 0116 	add.w	r1, r4, #22
 80143f0:	2303      	movs	r3, #3
 80143f2:	aa05      	add	r2, sp, #20
 80143f4:	b289      	uxth	r1, r1
 80143f6:	4630      	mov	r0, r6
 80143f8:	f008 fdec 	bl	801cfd4 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+44, (uint8_t *)buffer, LEFT_MODE);
 80143fc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8014400:	2303      	movs	r3, #3
 8014402:	aa05      	add	r2, sp, #20
 8014404:	b289      	uxth	r1, r1
 8014406:	4630      	mov	r0, r6
 8014408:	f008 fde4 	bl	801cfd4 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801440c:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8014410:	2303      	movs	r3, #3
 8014412:	aa05      	add	r2, sp, #20
 8014414:	b289      	uxth	r1, r1
 8014416:	4630      	mov	r0, r6
 8014418:	f008 fddc 	bl	801cfd4 <TFT_DisplayString>
				old_nan_PPFRGB = 1;
 801441c:	2301      	movs	r3, #1
 801441e:	f889 3000 	strb.w	r3, [r9]
	number = 0;
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8014422:	9b02      	ldr	r3, [sp, #8]
 8014424:	781a      	ldrb	r2, [r3, #0]
 8014426:	9b03      	ldr	r3, [sp, #12]
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	429a      	cmp	r2, r3
 801442c:	f000 80c1 	beq.w	80145b2 <GUI_Text_PPFRGB_Measure+0x2ba>
if (Language_status==Ru)
 8014430:	4e65      	ldr	r6, [pc, #404]	; (80145c8 <GUI_Text_PPFRGB_Measure+0x2d0>)
 8014432:	7833      	ldrb	r3, [r6, #0]
 8014434:	2b00      	cmp	r3, #0
 8014436:	f040 82e4 	bne.w	8014a02 <GUI_Text_PPFRGB_Measure+0x70a>
	{	TFT_SetTextColor(TFT_White);
 801443a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801443e:	f008 fcad 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
 8014442:	4862      	ldr	r0, [pc, #392]	; (80145cc <GUI_Text_PPFRGB_Measure+0x2d4>)
 8014444:	f008 fca4 	bl	801cd90 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y, 'С');
 8014448:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801444c:	22a1      	movs	r2, #161	; 0xa1
 801444e:	4621      	mov	r1, r4
 8014450:	b280      	uxth	r0, r0
 8014452:	f008 fcaf 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8014456:	f104 0805 	add.w	r8, r4, #5
		TFT_SetFont(&Font16RU_arch_small);
 801445a:	485d      	ldr	r0, [pc, #372]	; (80145d0 <GUI_Text_PPFRGB_Measure+0x2d8>)
 801445c:	f008 fc98 	bl	801cd90 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8014460:	fa1f f888 	uxth.w	r8, r8
 8014464:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8014468:	22b8      	movs	r2, #184	; 0xb8
 801446a:	4641      	mov	r1, r8
 801446c:	b280      	uxth	r0, r0
 801446e:	f008 fca1 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+5, 'н');
 8014472:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8014476:	b280      	uxth	r0, r0
 8014478:	22bd      	movs	r2, #189	; 0xbd
 801447a:	4641      	mov	r1, r8
 801447c:	f008 fc9a 	bl	801cdb4 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8014480:	4b54      	ldr	r3, [pc, #336]	; (80145d4 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8014488:	2b00      	cmp	r3, #0
 801448a:	f000 82b5 	beq.w	80149f8 <GUI_Text_PPFRGB_Measure+0x700>
 801448e:	463a      	mov	r2, r7
 8014490:	4621      	mov	r1, r4
 8014492:	b280      	uxth	r0, r0
 8014494:	f004 fd7e 	bl	8018f94 <GUI_TextRu_umol>
	{TFT_SetTextColor(TFT_White);
		GUI_TextEn_Blue(X+34, Y);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
	}
	
	if (Language_status==Ru)
 8014498:	7833      	ldrb	r3, [r6, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	f040 82d1 	bne.w	8014a42 <GUI_Text_PPFRGB_Measure+0x74a>
	{	TFT_SetTextColor(TFT_White);
 80144a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80144a4:	f008 fc7a 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+22, 'З');
 80144a8:	f104 0816 	add.w	r8, r4, #22
		TFT_SetFont(&Font16RU_arch_big);
 80144ac:	4847      	ldr	r0, [pc, #284]	; (80145cc <GUI_Text_PPFRGB_Measure+0x2d4>)
 80144ae:	f008 fc6f 	bl	801cd90 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+22, 'З');
 80144b2:	fa1f f888 	uxth.w	r8, r8
 80144b6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80144ba:	2297      	movs	r2, #151	; 0x97
 80144bc:	4641      	mov	r1, r8
 80144be:	b280      	uxth	r0, r0
 80144c0:	f008 fc78 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+27, 'е');
 80144c4:	f104 091b 	add.w	r9, r4, #27
		TFT_SetFont(&Font16RU_arch_small);
 80144c8:	4841      	ldr	r0, [pc, #260]	; (80145d0 <GUI_Text_PPFRGB_Measure+0x2d8>)
 80144ca:	f008 fc61 	bl	801cd90 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+27, 'е');
 80144ce:	fa1f f989 	uxth.w	r9, r9
 80144d2:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80144d6:	22b5      	movs	r2, #181	; 0xb5
 80144d8:	4649      	mov	r1, r9
 80144da:	b280      	uxth	r0, r0
 80144dc:	f008 fc6a 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+27, 'л');
 80144e0:	f105 0042 	add.w	r0, r5, #66	; 0x42
 80144e4:	b280      	uxth	r0, r0
 80144e6:	22bb      	movs	r2, #187	; 0xbb
 80144e8:	4649      	mov	r1, r9
 80144ea:	f008 fc63 	bl	801cdb4 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 80144ee:	4b39      	ldr	r3, [pc, #228]	; (80145d4 <GUI_Text_PPFRGB_Measure+0x2dc>)
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	f000 829e 	beq.w	8014a38 <GUI_Text_PPFRGB_Measure+0x740>
 80144fc:	463a      	mov	r2, r7
 80144fe:	4641      	mov	r1, r8
 8014500:	b280      	uxth	r0, r0
 8014502:	f004 fd47 	bl	8018f94 <GUI_TextRu_umol>
		GUI_TextEn_Green(X+17, Y+22);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
	}
	
	
	if (Language_status==Ru)
 8014506:	7833      	ldrb	r3, [r6, #0]
 8014508:	f105 0925 	add.w	r9, r5, #37	; 0x25
 801450c:	2b00      	cmp	r3, #0
 801450e:	f040 82bc 	bne.w	8014a8a <GUI_Text_PPFRGB_Measure+0x792>
	{	TFT_SetTextColor(TFT_White);
 8014512:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014516:	f008 fc41 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+44, 'К');
 801451a:	f104 082c 	add.w	r8, r4, #44	; 0x2c
		TFT_SetFont(&Font16RU_arch_big);
 801451e:	482b      	ldr	r0, [pc, #172]	; (80145cc <GUI_Text_PPFRGB_Measure+0x2d4>)
 8014520:	f008 fc36 	bl	801cd90 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8014524:	fa1f f888 	uxth.w	r8, r8
 8014528:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801452c:	229a      	movs	r2, #154	; 0x9a
 801452e:	4641      	mov	r1, r8
 8014530:	b280      	uxth	r0, r0
 8014532:	f008 fc3f 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
 8014536:	4826      	ldr	r0, [pc, #152]	; (80145d0 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8014538:	f008 fc2a 	bl	801cd90 <TFT_SetFont>
		TFT_DrawCharRus(X+55, Y+49, 'р');
 801453c:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8014540:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8014544:	b280      	uxth	r0, r0
 8014546:	2280      	movs	r2, #128	; 0x80
 8014548:	b289      	uxth	r1, r1
 801454a:	f008 fc33 	bl	801cdb4 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 801454e:	4b21      	ldr	r3, [pc, #132]	; (80145d4 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8014556:	2b00      	cmp	r3, #0
 8014558:	f000 8292 	beq.w	8014a80 <GUI_Text_PPFRGB_Measure+0x788>
 801455c:	463a      	mov	r2, r7
 801455e:	4641      	mov	r1, r8
 8014560:	b280      	uxth	r0, r0
 8014562:	f004 fd17 	bl	8018f94 <GUI_TextRu_umol>
	else if (Language_status==En)
	{	TFT_SetTextColor(TFT_White);
		GUI_TextEn_Red(X+37, Y+44);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
	}
	TFT_SetTextColor(TFT_White);
 8014566:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+37, Y+66, 'F');
 801456a:	3442      	adds	r4, #66	; 0x42
	TFT_SetTextColor(TFT_White);
 801456c:	f008 fc16 	bl	801cd9c <TFT_SetTextColor>
	TFT_DrawChar(X+37, Y+66, 'F');
 8014570:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_big);
 8014572:	4819      	ldr	r0, [pc, #100]	; (80145d8 <GUI_Text_PPFRGB_Measure+0x2e0>)
 8014574:	f008 fc0c 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+37, Y+66, 'F');
 8014578:	2246      	movs	r2, #70	; 0x46
 801457a:	4621      	mov	r1, r4
 801457c:	fa1f f089 	uxth.w	r0, r9
 8014580:	f008 fcd0 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+66, 'R');
 8014584:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8014588:	2252      	movs	r2, #82	; 0x52
 801458a:	4621      	mov	r1, r4
 801458c:	b280      	uxth	r0, r0
 801458e:	f008 fcc9 	bl	801cf24 <TFT_DrawChar>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8014592:	7833      	ldrb	r3, [r6, #0]
 8014594:	2b00      	cmp	r3, #0
 8014596:	f040 829b 	bne.w	8014ad0 <GUI_Text_PPFRGB_Measure+0x7d8>
 801459a:	4b0e      	ldr	r3, [pc, #56]	; (80145d4 <GUI_Text_PPFRGB_Measure+0x2dc>)
 801459c:	781b      	ldrb	r3, [r3, #0]
 801459e:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	f000 828f 	beq.w	8014ac6 <GUI_Text_PPFRGB_Measure+0x7ce>
 80145a8:	463a      	mov	r2, r7
 80145aa:	4621      	mov	r1, r4
 80145ac:	b280      	uxth	r0, r0
 80145ae:	f004 fcf1 	bl	8018f94 <GUI_TextRu_umol>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
}
}
 80145b2:	b009      	add	sp, #36	; 0x24
 80145b4:	ecbd 8b08 	vpop	{d8-d11}
 80145b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145bc:	2000022a 	.word	0x2000022a
 80145c0:	20005701 	.word	0x20005701
 80145c4:	200001f0 	.word	0x200001f0
 80145c8:	20005703 	.word	0x20005703
 80145cc:	200001d0 	.word	0x200001d0
 80145d0:	200001d8 	.word	0x200001d8
 80145d4:	20000ebc 	.word	0x20000ebc
 80145d8:	200001b0 	.word	0x200001b0
 80145dc:	2000573b 	.word	0x2000573b
		if(old_nan_PPFRGB) 
 80145e0:	f899 3000 	ldrb.w	r3, [r9]
 80145e4:	b3b3      	cbz	r3, 8014654 <GUI_Text_PPFRGB_Measure+0x35c>
			TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 80145e6:	f105 0762 	add.w	r7, r5, #98	; 0x62
 80145ea:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
 80145ee:	b2bf      	uxth	r7, r7
 80145f0:	fa1f f888 	uxth.w	r8, r8
 80145f4:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80145f8:	f104 0314 	add.w	r3, r4, #20
 80145fc:	b29b      	uxth	r3, r3
 80145fe:	4642      	mov	r2, r8
 8014600:	4621      	mov	r1, r4
 8014602:	4638      	mov	r0, r7
 8014604:	f8cd a000 	str.w	sl, [sp]
 8014608:	f008 f999 	bl	801c93e <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 801460c:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8014610:	f104 0115 	add.w	r1, r4, #21
 8014614:	b29b      	uxth	r3, r3
 8014616:	4642      	mov	r2, r8
 8014618:	b289      	uxth	r1, r1
 801461a:	4638      	mov	r0, r7
 801461c:	f8cd a000 	str.w	sl, [sp]
 8014620:	f008 f98d 	bl	801c93e <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8014624:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8014628:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 801462c:	b29b      	uxth	r3, r3
 801462e:	4642      	mov	r2, r8
 8014630:	b289      	uxth	r1, r1
 8014632:	4638      	mov	r0, r7
 8014634:	f8cd a000 	str.w	sl, [sp]
 8014638:	f008 f981 	bl	801c93e <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 801463c:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8014640:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8014644:	f8cd a000 	str.w	sl, [sp]
 8014648:	b29b      	uxth	r3, r3
 801464a:	4642      	mov	r2, r8
 801464c:	b289      	uxth	r1, r1
 801464e:	4638      	mov	r0, r7
 8014650:	f008 f975 	bl	801c93e <TFT_FillRectangle>
	ValueB = floor(ValueB*10)/10.0;
 8014654:	eeb2 9a04 	vmov.f32	s18, #36	; 0x41200000  10.0
 8014658:	ee68 7a09 	vmul.f32	s15, s16, s18
	old_nan_PPFRGB = 0;
 801465c:	2700      	movs	r7, #0
	ValueB = floor(ValueB*10)/10.0;
 801465e:	ee17 0a90 	vmov	r0, s15
	old_nan_PPFRGB = 0;
 8014662:	f889 7000 	strb.w	r7, [r9]
	ValueB = floor(ValueB*10)/10.0;
 8014666:	f7eb ff87 	bl	8000578 <__aeabi_f2d>
 801466a:	ec41 0b10 	vmov	d0, r0, r1
 801466e:	f00e ff8b 	bl	8023588 <floor>
 8014672:	2200      	movs	r2, #0
 8014674:	ec51 0b10 	vmov	r0, r1, d0
 8014678:	4bd6      	ldr	r3, [pc, #856]	; (80149d4 <GUI_Text_PPFRGB_Measure+0x6dc>)
	if((ValueB/1000) > 1.0)
 801467a:	eddf 8ad7 	vldr	s17, [pc, #860]	; 80149d8 <GUI_Text_PPFRGB_Measure+0x6e0>
	ValueB = floor(ValueB*10)/10.0;
 801467e:	f7ec f8f9 	bl	8000874 <__aeabi_ddiv>
 8014682:	f7ec fac5 	bl	8000c10 <__aeabi_d2f>
 8014686:	ee09 0a90 	vmov	s19, r0
	if((ValueB/1000) > 1.0)
 801468a:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801468e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014692:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 140, deg = 0, number=0;
 8014696:	f04f 088c 	mov.w	r8, #140	; 0x8c
 801469a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		ValueB = ValueB/(1000);
 801469e:	eef4 7a48 	vcmp.f32	s15, s16
 80146a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a6:	bfc8      	it	gt
 80146a8:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80146ac:	45bb      	cmp	fp, r7
 80146ae:	bf08      	it	eq
 80146b0:	4618      	moveq	r0, r3
 80146b2:	f008 fb73 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80146b6:	2063      	movs	r0, #99	; 0x63
 80146b8:	f008 fb76 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80146bc:	48c7      	ldr	r0, [pc, #796]	; (80149dc <GUI_Text_PPFRGB_Measure+0x6e4>)
 80146be:	f008 fb67 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueB);
 80146c2:	ee19 0a90 	vmov	r0, s19
 80146c6:	f7eb ff57 	bl	8000578 <__aeabi_f2d>
 80146ca:	4602      	mov	r2, r0
 80146cc:	460b      	mov	r3, r1
 80146ce:	a805      	add	r0, sp, #20
 80146d0:	49c3      	ldr	r1, [pc, #780]	; (80149e0 <GUI_Text_PPFRGB_Measure+0x6e8>)
 80146d2:	f00b ff9d 	bl	8020610 <sprintf>
	uint32_t dec = 10;
 80146d6:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueB);
 80146d8:	2314      	movs	r3, #20
			dec *= 10;
 80146da:	4611      	mov	r1, r2
		if((ValueB/((float)dec)) >= 1.0)
 80146dc:	ee07 2a90 	vmov	s15, r2
 80146e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80146e4:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80146e8:	eef4 7ac8 	vcmpe.f32	s15, s16
 80146ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f0:	db06      	blt.n	8014700 <GUI_Text_PPFRGB_Measure+0x408>
			delta_pos-= 22 - i*2;
 80146f2:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 80146f6:	3701      	adds	r7, #1
			dec *= 10;
 80146f8:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 80146fa:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80146fe:	b2ff      	uxtb	r7, r7
 8014700:	3b02      	subs	r3, #2
 8014702:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 8014704:	2b0c      	cmp	r3, #12
 8014706:	d1e9      	bne.n	80146dc <GUI_Text_PPFRGB_Measure+0x3e4>
	if(number < old_numPPFB )
 8014708:	4bb6      	ldr	r3, [pc, #728]	; (80149e4 <GUI_Text_PPFRGB_Measure+0x6ec>)
 801470a:	781a      	ldrb	r2, [r3, #0]
 801470c:	42ba      	cmp	r2, r7
 801470e:	4699      	mov	r9, r3
 8014710:	d90d      	bls.n	801472e <GUI_Text_PPFRGB_Measure+0x436>
		TFT_FillRectangle(X+98, Y, X+197, Y+20, TFT_Black_Bkgr);
 8014712:	2163      	movs	r1, #99	; 0x63
 8014714:	f104 0314 	add.w	r3, r4, #20
 8014718:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801471c:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8014720:	9100      	str	r1, [sp, #0]
 8014722:	b29b      	uxth	r3, r3
 8014724:	b292      	uxth	r2, r2
 8014726:	4621      	mov	r1, r4
 8014728:	b280      	uxth	r0, r0
 801472a:	f008 f908 	bl	801c93e <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801472e:	eb05 0008 	add.w	r0, r5, r8
 8014732:	2303      	movs	r3, #3
 8014734:	aa05      	add	r2, sp, #20
	old_numPPFB = number;
 8014736:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801473a:	4621      	mov	r1, r4
 801473c:	b280      	uxth	r0, r0
	buffer[8] = 0;
 801473e:	2700      	movs	r7, #0
 8014740:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014744:	f008 fc46 	bl	801cfd4 <TFT_DisplayString>
	ValueG = floor(ValueG*10)/10.0;
 8014748:	ee6b 7a09 	vmul.f32	s15, s22, s18
	delta_pos = 140;
 801474c:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueG = floor(ValueG*10)/10.0;
 8014750:	ee17 0a90 	vmov	r0, s15
 8014754:	f7eb ff10 	bl	8000578 <__aeabi_f2d>
 8014758:	ec41 0b10 	vmov	d0, r0, r1
 801475c:	f00e ff14 	bl	8023588 <floor>
 8014760:	2200      	movs	r2, #0
 8014762:	4b9c      	ldr	r3, [pc, #624]	; (80149d4 <GUI_Text_PPFRGB_Measure+0x6dc>)
 8014764:	ec51 0b10 	vmov	r0, r1, d0
 8014768:	f7ec f884 	bl	8000874 <__aeabi_ddiv>
 801476c:	f7ec fa50 	bl	8000c10 <__aeabi_d2f>
 8014770:	ee09 0a90 	vmov	s19, r0
	if((ValueG/1000) > 1.0)
 8014774:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetFont(&Font16EN_arch_big);
 8014778:	4898      	ldr	r0, [pc, #608]	; (80149dc <GUI_Text_PPFRGB_Measure+0x6e4>)
		ValueG = ValueG/(1000);
 801477a:	eef4 7a48 	vcmp.f32	s15, s16
 801477e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014782:	bfc8      	it	gt
 8014784:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 8014788:	f008 fb02 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueG);
 801478c:	ee19 0a90 	vmov	r0, s19
 8014790:	f7eb fef2 	bl	8000578 <__aeabi_f2d>
 8014794:	4602      	mov	r2, r0
 8014796:	460b      	mov	r3, r1
 8014798:	a805      	add	r0, sp, #20
 801479a:	4991      	ldr	r1, [pc, #580]	; (80149e0 <GUI_Text_PPFRGB_Measure+0x6e8>)
 801479c:	f00b ff38 	bl	8020610 <sprintf>
	dec = 10;
 80147a0:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueG);
 80147a2:	2314      	movs	r3, #20
			dec *= 10;
 80147a4:	4611      	mov	r1, r2
		if((ValueG/(dec)) >= 1.0)
 80147a6:	ee07 2a90 	vmov	s15, r2
 80147aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80147ae:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80147b2:	eef4 7ac8 	vcmpe.f32	s15, s16
 80147b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ba:	db06      	blt.n	80147ca <GUI_Text_PPFRGB_Measure+0x4d2>
			delta_pos-= 22 - i*2;
 80147bc:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 80147c0:	3701      	adds	r7, #1
			dec *= 10;
 80147c2:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 80147c4:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80147c8:	b2ff      	uxtb	r7, r7
 80147ca:	3b02      	subs	r3, #2
 80147cc:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 80147ce:	2b0c      	cmp	r3, #12
 80147d0:	d1e9      	bne.n	80147a6 <GUI_Text_PPFRGB_Measure+0x4ae>
		if(number < old_numPPFG )
 80147d2:	4b85      	ldr	r3, [pc, #532]	; (80149e8 <GUI_Text_PPFRGB_Measure+0x6f0>)
 80147d4:	781a      	ldrb	r2, [r3, #0]
 80147d6:	42ba      	cmp	r2, r7
 80147d8:	4699      	mov	r9, r3
 80147da:	d911      	bls.n	8014800 <GUI_Text_PPFRGB_Measure+0x508>
		TFT_FillRectangle(X+98, Y+21, X+197, Y+41, TFT_Black_Bkgr);
 80147dc:	f104 0329 	add.w	r3, r4, #41	; 0x29
 80147e0:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80147e4:	f104 0115 	add.w	r1, r4, #21
 80147e8:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80147ec:	f04f 0e63 	mov.w	lr, #99	; 0x63
 80147f0:	f8cd e000 	str.w	lr, [sp]
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	b292      	uxth	r2, r2
 80147f8:	b289      	uxth	r1, r1
 80147fa:	b280      	uxth	r0, r0
 80147fc:	f008 f89f 	bl	801c93e <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014800:	eb05 0008 	add.w	r0, r5, r8
 8014804:	f104 0116 	add.w	r1, r4, #22
 8014808:	2303      	movs	r3, #3
 801480a:	aa05      	add	r2, sp, #20
	old_numPPFG = number;
 801480c:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014810:	b289      	uxth	r1, r1
 8014812:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8014814:	2700      	movs	r7, #0
 8014816:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 801481a:	f008 fbdb 	bl	801cfd4 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 801481e:	ee6a 7a89 	vmul.f32	s15, s21, s18
	delta_pos = 140;
 8014822:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 8014826:	ee17 0a90 	vmov	r0, s15
 801482a:	f7eb fea5 	bl	8000578 <__aeabi_f2d>
 801482e:	ec41 0b10 	vmov	d0, r0, r1
 8014832:	f00e fea9 	bl	8023588 <floor>
 8014836:	2200      	movs	r2, #0
 8014838:	4b66      	ldr	r3, [pc, #408]	; (80149d4 <GUI_Text_PPFRGB_Measure+0x6dc>)
 801483a:	ec51 0b10 	vmov	r0, r1, d0
 801483e:	f7ec f819 	bl	8000874 <__aeabi_ddiv>
 8014842:	f7ec f9e5 	bl	8000c10 <__aeabi_d2f>
 8014846:	ee09 0a90 	vmov	s19, r0
	if((ValueR/1000) > 1.0)
 801484a:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetFont(&Font16EN_arch_big);
 801484e:	4863      	ldr	r0, [pc, #396]	; (80149dc <GUI_Text_PPFRGB_Measure+0x6e4>)
		ValueR = ValueR/(1000);
 8014850:	eef4 7a48 	vcmp.f32	s15, s16
 8014854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014858:	bfc8      	it	gt
 801485a:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 801485e:	f008 fa97 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueR);
 8014862:	ee19 0a90 	vmov	r0, s19
 8014866:	f7eb fe87 	bl	8000578 <__aeabi_f2d>
 801486a:	4602      	mov	r2, r0
 801486c:	460b      	mov	r3, r1
 801486e:	a805      	add	r0, sp, #20
 8014870:	495b      	ldr	r1, [pc, #364]	; (80149e0 <GUI_Text_PPFRGB_Measure+0x6e8>)
 8014872:	f00b fecd 	bl	8020610 <sprintf>
	dec = 10;
 8014876:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueR);
 8014878:	2314      	movs	r3, #20
			dec *= 10;
 801487a:	4611      	mov	r1, r2
		if((ValueR/(dec)) >= 1.0)
 801487c:	ee07 2a90 	vmov	s15, r2
 8014880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014884:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8014888:	eef4 7ac8 	vcmpe.f32	s15, s16
 801488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014890:	db06      	blt.n	80148a0 <GUI_Text_PPFRGB_Measure+0x5a8>
			delta_pos-= 22 - i*2;
 8014892:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8014896:	3701      	adds	r7, #1
			dec *= 10;
 8014898:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 801489a:	fa5f f888 	uxtb.w	r8, r8
			number++;
 801489e:	b2ff      	uxtb	r7, r7
 80148a0:	3b02      	subs	r3, #2
 80148a2:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 80148a4:	2b0c      	cmp	r3, #12
 80148a6:	d1e9      	bne.n	801487c <GUI_Text_PPFRGB_Measure+0x584>
	if(number < old_numPPFR )
 80148a8:	4b50      	ldr	r3, [pc, #320]	; (80149ec <GUI_Text_PPFRGB_Measure+0x6f4>)
 80148aa:	781a      	ldrb	r2, [r3, #0]
 80148ac:	42ba      	cmp	r2, r7
 80148ae:	4699      	mov	r9, r3
 80148b0:	d911      	bls.n	80148d6 <GUI_Text_PPFRGB_Measure+0x5de>
		TFT_FillRectangle(X+98, Y+42, X+197, Y+63, TFT_Black_Bkgr);
 80148b2:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 80148b6:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80148ba:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80148be:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80148c2:	f04f 0e63 	mov.w	lr, #99	; 0x63
 80148c6:	f8cd e000 	str.w	lr, [sp]
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	b292      	uxth	r2, r2
 80148ce:	b289      	uxth	r1, r1
 80148d0:	b280      	uxth	r0, r0
 80148d2:	f008 f834 	bl	801c93e <TFT_FillRectangle>
	buffer[8] = 0;
 80148d6:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 80148d8:	eb05 0008 	add.w	r0, r5, r8
 80148dc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80148e0:	aa05      	add	r2, sp, #20
	buffer[8] = 0;
 80148e2:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 80148e6:	b289      	uxth	r1, r1
 80148e8:	2303      	movs	r3, #3
 80148ea:	b280      	uxth	r0, r0
	old_numPPFR = number;
 80148ec:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 80148f0:	f008 fb70 	bl	801cfd4 <TFT_DisplayString>
	ValueFR = floor(ValueFR*10)/10.0;
 80148f4:	ee6a 7a09 	vmul.f32	s15, s20, s18
	delta_pos = 140;
 80148f8:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueFR = floor(ValueFR*10)/10.0;
 80148fc:	ee17 0a90 	vmov	r0, s15
 8014900:	f7eb fe3a 	bl	8000578 <__aeabi_f2d>
 8014904:	ec41 0b10 	vmov	d0, r0, r1
 8014908:	f00e fe3e 	bl	8023588 <floor>
 801490c:	2200      	movs	r2, #0
 801490e:	4b31      	ldr	r3, [pc, #196]	; (80149d4 <GUI_Text_PPFRGB_Measure+0x6dc>)
 8014910:	ec51 0b10 	vmov	r0, r1, d0
 8014914:	f7eb ffae 	bl	8000874 <__aeabi_ddiv>
 8014918:	f7ec f97a 	bl	8000c10 <__aeabi_d2f>
 801491c:	ee09 0a10 	vmov	s18, r0
	if((ValueFR/1000) > 1.0)
 8014920:	eec9 7a28 	vdiv.f32	s15, s18, s17
	TFT_SetFont(&Font16EN_arch_big);
 8014924:	482d      	ldr	r0, [pc, #180]	; (80149dc <GUI_Text_PPFRGB_Measure+0x6e4>)
	else deg=0;
 8014926:	eef4 7ac8 	vcmpe.f32	s15, s16
 801492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801492e:	bfc8      	it	gt
 8014930:	eeb0 9a67 	vmovgt.f32	s18, s15
 8014934:	bfcc      	ite	gt
 8014936:	2701      	movgt	r7, #1
 8014938:	2700      	movle	r7, #0
	TFT_SetFont(&Font16EN_arch_big);
 801493a:	f008 fa29 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueFR);
 801493e:	ee19 0a10 	vmov	r0, s18
 8014942:	f7eb fe19 	bl	8000578 <__aeabi_f2d>
 8014946:	4602      	mov	r2, r0
 8014948:	460b      	mov	r3, r1
 801494a:	a805      	add	r0, sp, #20
 801494c:	4924      	ldr	r1, [pc, #144]	; (80149e0 <GUI_Text_PPFRGB_Measure+0x6e8>)
 801494e:	f00b fe5f 	bl	8020610 <sprintf>
	dec = 10;
 8014952:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueFR);
 8014954:	2314      	movs	r3, #20
			dec *= 10;
 8014956:	4611      	mov	r1, r2
		if((ValueFR/(dec)) >= 1.0)
 8014958:	ee07 2a90 	vmov	s15, r2
 801495c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014960:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8014964:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801496c:	db06      	blt.n	801497c <GUI_Text_PPFRGB_Measure+0x684>
			delta_pos-= 22 - i*2;
 801496e:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8014972:	3601      	adds	r6, #1
			dec *= 10;
 8014974:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 8014976:	fa5f f888 	uxtb.w	r8, r8
			number++;
 801497a:	b2f6      	uxtb	r6, r6
 801497c:	3b02      	subs	r3, #2
 801497e:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 8014980:	2b0c      	cmp	r3, #12
 8014982:	d1e9      	bne.n	8014958 <GUI_Text_PPFRGB_Measure+0x660>
	if(number < old_numPPFFR )
 8014984:	4b1a      	ldr	r3, [pc, #104]	; (80149f0 <GUI_Text_PPFRGB_Measure+0x6f8>)
 8014986:	781a      	ldrb	r2, [r3, #0]
 8014988:	42b2      	cmp	r2, r6
 801498a:	4699      	mov	r9, r3
 801498c:	d911      	bls.n	80149b2 <GUI_Text_PPFRGB_Measure+0x6ba>
		TFT_FillRectangle(X+98, Y+65, X+197, Y+87, TFT_Black_Bkgr);
 801498e:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8014992:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014996:	f104 0141 	add.w	r1, r4, #65	; 0x41
 801499a:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801499e:	f04f 0e63 	mov.w	lr, #99	; 0x63
 80149a2:	f8cd e000 	str.w	lr, [sp]
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	b292      	uxth	r2, r2
 80149aa:	b289      	uxth	r1, r1
 80149ac:	b280      	uxth	r0, r0
 80149ae:	f007 ffc6 	bl	801c93e <TFT_FillRectangle>
	buffer[8] = 0;
 80149b2:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 80149b4:	f104 0142 	add.w	r1, r4, #66	; 0x42
 80149b8:	eb05 0008 	add.w	r0, r5, r8
	buffer[8] = 0;
 80149bc:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 80149c0:	aa05      	add	r2, sp, #20
 80149c2:	2303      	movs	r3, #3
 80149c4:	b289      	uxth	r1, r1
 80149c6:	b280      	uxth	r0, r0
	old_numPPFFR = number;
 80149c8:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 80149cc:	f008 fb02 	bl	801cfd4 <TFT_DisplayString>
 80149d0:	e527      	b.n	8014422 <GUI_Text_PPFRGB_Measure+0x12a>
 80149d2:	bf00      	nop
 80149d4:	40240000 	.word	0x40240000
 80149d8:	447a0000 	.word	0x447a0000
 80149dc:	200001b0 	.word	0x200001b0
 80149e0:	080320e5 	.word	0x080320e5
 80149e4:	20000236 	.word	0x20000236
 80149e8:	20000238 	.word	0x20000238
 80149ec:	20000239 	.word	0x20000239
 80149f0:	20000237 	.word	0x20000237
	uint8_t	delta_pos = 140, deg = 0, number=0;
 80149f4:	461f      	mov	r7, r3
 80149f6:	e514      	b.n	8014422 <GUI_Text_PPFRGB_Measure+0x12a>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 80149f8:	4621      	mov	r1, r4
 80149fa:	b280      	uxth	r0, r0
 80149fc:	f004 fb38 	bl	8019070 <GUI_TextRu_umol_sr>
 8014a00:	e54a      	b.n	8014498 <GUI_Text_PPFRGB_Measure+0x1a0>
	else if (Language_status==En)
 8014a02:	2b01      	cmp	r3, #1
 8014a04:	f47f ad48 	bne.w	8014498 <GUI_Text_PPFRGB_Measure+0x1a0>
	{TFT_SetTextColor(TFT_White);
 8014a08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014a0c:	f008 f9c6 	bl	801cd9c <TFT_SetTextColor>
		GUI_TextEn_Blue(X+34, Y);
 8014a10:	f105 0022 	add.w	r0, r5, #34	; 0x22
 8014a14:	4621      	mov	r1, r4
 8014a16:	b280      	uxth	r0, r0
 8014a18:	f003 fb7c 	bl	8018114 <GUI_TextEn_Blue>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
 8014a1c:	4b35      	ldr	r3, [pc, #212]	; (8014af4 <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014a24:	463a      	mov	r2, r7
 8014a26:	4621      	mov	r1, r4
 8014a28:	b280      	uxth	r0, r0
 8014a2a:	b113      	cbz	r3, 8014a32 <GUI_Text_PPFRGB_Measure+0x73a>
 8014a2c:	f002 fab4 	bl	8016f98 <GUI_TextEn_umol>
 8014a30:	e532      	b.n	8014498 <GUI_Text_PPFRGB_Measure+0x1a0>
 8014a32:	f002 fb17 	bl	8017064 <GUI_TextEn_umol_sr>
 8014a36:	e52f      	b.n	8014498 <GUI_Text_PPFRGB_Measure+0x1a0>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 8014a38:	4641      	mov	r1, r8
 8014a3a:	b280      	uxth	r0, r0
 8014a3c:	f004 fb18 	bl	8019070 <GUI_TextRu_umol_sr>
 8014a40:	e561      	b.n	8014506 <GUI_Text_PPFRGB_Measure+0x20e>
	else if (Language_status==En)
 8014a42:	2b01      	cmp	r3, #1
 8014a44:	f47f ad5f 	bne.w	8014506 <GUI_Text_PPFRGB_Measure+0x20e>
	{	TFT_SetTextColor(TFT_White);
 8014a48:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Green(X+17, Y+22);
 8014a4c:	f104 0816 	add.w	r8, r4, #22
	{	TFT_SetTextColor(TFT_White);
 8014a50:	f008 f9a4 	bl	801cd9c <TFT_SetTextColor>
		GUI_TextEn_Green(X+17, Y+22);
 8014a54:	fa1f f888 	uxth.w	r8, r8
 8014a58:	f105 0011 	add.w	r0, r5, #17
 8014a5c:	4641      	mov	r1, r8
 8014a5e:	b280      	uxth	r0, r0
 8014a60:	f003 fb26 	bl	80180b0 <GUI_TextEn_Green>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
 8014a64:	4b23      	ldr	r3, [pc, #140]	; (8014af4 <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014a6c:	463a      	mov	r2, r7
 8014a6e:	4641      	mov	r1, r8
 8014a70:	b280      	uxth	r0, r0
 8014a72:	b113      	cbz	r3, 8014a7a <GUI_Text_PPFRGB_Measure+0x782>
 8014a74:	f002 fa90 	bl	8016f98 <GUI_TextEn_umol>
 8014a78:	e545      	b.n	8014506 <GUI_Text_PPFRGB_Measure+0x20e>
 8014a7a:	f002 faf3 	bl	8017064 <GUI_TextEn_umol_sr>
 8014a7e:	e542      	b.n	8014506 <GUI_Text_PPFRGB_Measure+0x20e>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 8014a80:	4641      	mov	r1, r8
 8014a82:	b280      	uxth	r0, r0
 8014a84:	f004 faf4 	bl	8019070 <GUI_TextRu_umol_sr>
 8014a88:	e56d      	b.n	8014566 <GUI_Text_PPFRGB_Measure+0x26e>
	else if (Language_status==En)
 8014a8a:	2b01      	cmp	r3, #1
 8014a8c:	f47f ad6b 	bne.w	8014566 <GUI_Text_PPFRGB_Measure+0x26e>
		GUI_TextEn_Red(X+37, Y+44);
 8014a90:	f104 082c 	add.w	r8, r4, #44	; 0x2c
	{	TFT_SetTextColor(TFT_White);
 8014a94:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Red(X+37, Y+44);
 8014a98:	fa1f f888 	uxth.w	r8, r8
	{	TFT_SetTextColor(TFT_White);
 8014a9c:	f008 f97e 	bl	801cd9c <TFT_SetTextColor>
		GUI_TextEn_Red(X+37, Y+44);
 8014aa0:	4641      	mov	r1, r8
 8014aa2:	fa1f f089 	uxth.w	r0, r9
 8014aa6:	f003 fb61 	bl	801816c <GUI_TextEn_Red>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
 8014aaa:	4b12      	ldr	r3, [pc, #72]	; (8014af4 <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014ab2:	463a      	mov	r2, r7
 8014ab4:	4641      	mov	r1, r8
 8014ab6:	b280      	uxth	r0, r0
 8014ab8:	b113      	cbz	r3, 8014ac0 <GUI_Text_PPFRGB_Measure+0x7c8>
 8014aba:	f002 fa6d 	bl	8016f98 <GUI_TextEn_umol>
 8014abe:	e552      	b.n	8014566 <GUI_Text_PPFRGB_Measure+0x26e>
 8014ac0:	f002 fad0 	bl	8017064 <GUI_TextEn_umol_sr>
 8014ac4:	e54f      	b.n	8014566 <GUI_Text_PPFRGB_Measure+0x26e>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8014ac6:	4621      	mov	r1, r4
 8014ac8:	b280      	uxth	r0, r0
 8014aca:	f004 fad1 	bl	8019070 <GUI_TextRu_umol_sr>
 8014ace:	e570      	b.n	80145b2 <GUI_Text_PPFRGB_Measure+0x2ba>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
 8014ad0:	2b01      	cmp	r3, #1
 8014ad2:	f47f ad6e 	bne.w	80145b2 <GUI_Text_PPFRGB_Measure+0x2ba>
 8014ad6:	4b07      	ldr	r3, [pc, #28]	; (8014af4 <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014ad8:	781b      	ldrb	r3, [r3, #0]
 8014ada:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014ade:	463a      	mov	r2, r7
 8014ae0:	4621      	mov	r1, r4
 8014ae2:	b280      	uxth	r0, r0
 8014ae4:	b113      	cbz	r3, 8014aec <GUI_Text_PPFRGB_Measure+0x7f4>
 8014ae6:	f002 fa57 	bl	8016f98 <GUI_TextEn_umol>
 8014aea:	e562      	b.n	80145b2 <GUI_Text_PPFRGB_Measure+0x2ba>
 8014aec:	f002 faba 	bl	8017064 <GUI_TextEn_umol_sr>
}
 8014af0:	e55f      	b.n	80145b2 <GUI_Text_PPFRGB_Measure+0x2ba>
 8014af2:	bf00      	nop
 8014af4:	20000ebc 	.word	0x20000ebc

08014af8 <GUI_Text_XYZ_Measure>:
uint8_t old_numX = 10, old_numY = 10, old_numZ = 10, old_nanXYZ = 0;
void GUI_Text_XYZ_Measure(uint16_t X, uint16_t Y, uint16_t ValueX, uint16_t ValueY, uint16_t ValueZ, uint8_t nope, uint8_t grey)
{
 8014af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afc:	b087      	sub	sp, #28
 8014afe:	4605      	mov	r5, r0
 8014b00:	9302      	str	r3, [sp, #8]
 8014b02:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014b06:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
 8014b08:	2300      	movs	r3, #0
{
 8014b0a:	460c      	mov	r4, r1
 8014b0c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
	char buffer[5] = {0};
 8014b10:	9304      	str	r3, [sp, #16]
 8014b12:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 190, number = 0;
	uint32_t dec = 10;
	
	if((ValueX ==0 && ValueY ==100 && ValueZ ==0)||nope)
 8014b16:	4693      	mov	fp, r2
 8014b18:	b922      	cbnz	r2, 8014b24 <GUI_Text_XYZ_Measure+0x2c>
 8014b1a:	9b02      	ldr	r3, [sp, #8]
 8014b1c:	2b64      	cmp	r3, #100	; 0x64
 8014b1e:	d101      	bne.n	8014b24 <GUI_Text_XYZ_Measure+0x2c>
 8014b20:	9b03      	ldr	r3, [sp, #12]
 8014b22:	b10b      	cbz	r3, 8014b28 <GUI_Text_XYZ_Measure+0x30>
 8014b24:	2e00      	cmp	r6, #0
 8014b26:	d07c      	beq.n	8014c22 <GUI_Text_XYZ_Measure+0x12a>
	{
		if(!old_nanXYZ){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8014b28:	4bb2      	ldr	r3, [pc, #712]	; (8014df4 <GUI_Text_XYZ_Measure+0x2fc>)
 8014b2a:	781a      	ldrb	r2, [r3, #0]
 8014b2c:	469a      	mov	sl, r3
 8014b2e:	b96a      	cbnz	r2, 8014b4c <GUI_Text_XYZ_Measure+0x54>
 8014b30:	2163      	movs	r1, #99	; 0x63
 8014b32:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 8014b36:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8014b3a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014b3e:	9100      	str	r1, [sp, #0]
 8014b40:	b29b      	uxth	r3, r3
 8014b42:	b292      	uxth	r2, r2
 8014b44:	4621      	mov	r1, r4
 8014b46:	b280      	uxth	r0, r0
 8014b48:	f007 fef9 	bl	801c93e <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8014b4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014b50:	f008 f924 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014b54:	f105 0987 	add.w	r9, r5, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 8014b58:	2063      	movs	r0, #99	; 0x63
 8014b5a:	f008 f925 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014b5e:	fa1f f989 	uxth.w	r9, r9
 8014b62:	48a5      	ldr	r0, [pc, #660]	; (8014df8 <GUI_Text_XYZ_Measure+0x300>)
 8014b64:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 8014b68:	f008 f912 	bl	801cd90 <TFT_SetFont>
 8014b6c:	fa1f f888 	uxth.w	r8, r8
 8014b70:	222d      	movs	r2, #45	; 0x2d
 8014b72:	4621      	mov	r1, r4
 8014b74:	4648      	mov	r0, r9
 8014b76:	f105 06b9 	add.w	r6, r5, #185	; 0xb9
 8014b7a:	f008 f9d3 	bl	801cf24 <TFT_DrawChar>
 8014b7e:	b2b6      	uxth	r6, r6
 8014b80:	2220      	movs	r2, #32
 8014b82:	4621      	mov	r1, r4
 8014b84:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014b86:	f104 0723 	add.w	r7, r4, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014b8a:	f008 f9cb 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014b8e:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014b90:	222d      	movs	r2, #45	; 0x2d
 8014b92:	4621      	mov	r1, r4
 8014b94:	4630      	mov	r0, r6
 8014b96:	f008 f9c5 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014b9a:	4639      	mov	r1, r7
 8014b9c:	222d      	movs	r2, #45	; 0x2d
 8014b9e:	4648      	mov	r0, r9
 8014ba0:	f008 f9c0 	bl	801cf24 <TFT_DrawChar>
 8014ba4:	4639      	mov	r1, r7
 8014ba6:	2220      	movs	r2, #32
 8014ba8:	4640      	mov	r0, r8
 8014baa:	f008 f9bb 	bl	801cf24 <TFT_DrawChar>
 8014bae:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8014bb0:	f104 0746 	add.w	r7, r4, #70	; 0x46
 8014bb4:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014bb6:	222d      	movs	r2, #45	; 0x2d
 8014bb8:	4630      	mov	r0, r6
 8014bba:	f008 f9b3 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8014bbe:	222d      	movs	r2, #45	; 0x2d
 8014bc0:	4639      	mov	r1, r7
 8014bc2:	4648      	mov	r0, r9
 8014bc4:	f008 f9ae 	bl	801cf24 <TFT_DrawChar>
 8014bc8:	2220      	movs	r2, #32
 8014bca:	4639      	mov	r1, r7
 8014bcc:	4640      	mov	r0, r8
 8014bce:	f008 f9a9 	bl	801cf24 <TFT_DrawChar>
 8014bd2:	222d      	movs	r2, #45	; 0x2d
 8014bd4:	4639      	mov	r1, r7
 8014bd6:	4630      	mov	r0, r6
 8014bd8:	f008 f9a4 	bl	801cf24 <TFT_DrawChar>
		old_nanXYZ = 1;
 8014bdc:	2301      	movs	r3, #1
 8014bde:	f88a 3000 	strb.w	r3, [sl]
	old_numZ = number;
	number = 0;
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
	old_nanXYZ = 0;
}
			TFT_SetTextColor(TFT_White);
 8014be2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014be6:	f008 f8d9 	bl	801cd9c <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8014bea:	2063      	movs	r0, #99	; 0x63
 8014bec:	f008 f8dc 	bl	801cda8 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 8014bf0:	4881      	ldr	r0, [pc, #516]	; (8014df8 <GUI_Text_XYZ_Measure+0x300>)
 8014bf2:	f008 f8cd 	bl	801cd90 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'X'-34);
 8014bf6:	4621      	mov	r1, r4
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	2236      	movs	r2, #54	; 0x36
 8014bfc:	f008 f992 	bl	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X, Y+35, 'Y'-34);
 8014c00:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8014c04:	4628      	mov	r0, r5
 8014c06:	2237      	movs	r2, #55	; 0x37
 8014c08:	b289      	uxth	r1, r1
 8014c0a:	f008 f98b 	bl	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'Z'-34);
 8014c0e:	f104 0146 	add.w	r1, r4, #70	; 0x46
 8014c12:	2238      	movs	r2, #56	; 0x38
 8014c14:	b289      	uxth	r1, r1
 8014c16:	4628      	mov	r0, r5
 8014c18:	f008 f984 	bl	801cf24 <TFT_DrawChar>
}	
 8014c1c:	b007      	add	sp, #28
 8014c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014c22:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8014c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c2a:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8014c2e:	2800      	cmp	r0, #0
 8014c30:	bf14      	ite	ne
 8014c32:	4610      	movne	r0, r2
 8014c34:	4618      	moveq	r0, r3
 8014c36:	f008 f8b1 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014c3a:	2063      	movs	r0, #99	; 0x63
 8014c3c:	f008 f8b4 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014c40:	486e      	ldr	r0, [pc, #440]	; (8014dfc <GUI_Text_XYZ_Measure+0x304>)
 8014c42:	f008 f8a5 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%d", ValueX);
 8014c46:	465a      	mov	r2, fp
 8014c48:	496d      	ldr	r1, [pc, #436]	; (8014e00 <GUI_Text_XYZ_Measure+0x308>)
 8014c4a:	a804      	add	r0, sp, #16
 8014c4c:	f00b fce0 	bl	8020610 <sprintf>
	uint8_t	delta_pos = 190, number = 0;
 8014c50:	46b0      	mov	r8, r6
	sprintf (buffer, "%d", ValueX);
 8014c52:	f04f 0904 	mov.w	r9, #4
	uint32_t dec = 10;
 8014c56:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 190, number = 0;
 8014c5a:	27be      	movs	r7, #190	; 0xbe
		if((ValueX/(dec)) >= 1.0)
 8014c5c:	fbbb f0fa 	udiv	r0, fp, sl
 8014c60:	f7eb fc68 	bl	8000534 <__aeabi_ui2d>
 8014c64:	2200      	movs	r2, #0
 8014c66:	4b67      	ldr	r3, [pc, #412]	; (8014e04 <GUI_Text_XYZ_Measure+0x30c>)
 8014c68:	f7eb ff60 	bl	8000b2c <__aeabi_dcmpge>
 8014c6c:	b140      	cbz	r0, 8014c80 <GUI_Text_XYZ_Measure+0x188>
			dec *= 10;
 8014c6e:	230a      	movs	r3, #10
			delta_pos-=23;
 8014c70:	3f17      	subs	r7, #23
			number++;
 8014c72:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8014c76:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8014c7a:	b2ff      	uxtb	r7, r7
			number++;
 8014c7c:	fa5f f888 	uxtb.w	r8, r8
 8014c80:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014c84:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8014c88:	d1e8      	bne.n	8014c5c <GUI_Text_XYZ_Measure+0x164>
	if(number < old_numX || old_nanXYZ )
 8014c8a:	4b5f      	ldr	r3, [pc, #380]	; (8014e08 <GUI_Text_XYZ_Measure+0x310>)
 8014c8c:	781a      	ldrb	r2, [r3, #0]
 8014c8e:	4542      	cmp	r2, r8
 8014c90:	4699      	mov	r9, r3
 8014c92:	d802      	bhi.n	8014c9a <GUI_Text_XYZ_Measure+0x1a2>
 8014c94:	4b57      	ldr	r3, [pc, #348]	; (8014df4 <GUI_Text_XYZ_Measure+0x2fc>)
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	b16b      	cbz	r3, 8014cb6 <GUI_Text_XYZ_Measure+0x1be>
		TFT_FillRectangle(X+40, Y, X+197, Y+24, TFT_Black_Bkgr);
 8014c9a:	2163      	movs	r1, #99	; 0x63
 8014c9c:	f104 0318 	add.w	r3, r4, #24
 8014ca0:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014ca4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014ca8:	9100      	str	r1, [sp, #0]
 8014caa:	b29b      	uxth	r3, r3
 8014cac:	b292      	uxth	r2, r2
 8014cae:	4621      	mov	r1, r4
 8014cb0:	b280      	uxth	r0, r0
 8014cb2:	f007 fe44 	bl	801c93e <TFT_FillRectangle>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014cb6:	19e8      	adds	r0, r5, r7
 8014cb8:	2303      	movs	r3, #3
 8014cba:	aa04      	add	r2, sp, #16
 8014cbc:	4621      	mov	r1, r4
 8014cbe:	b280      	uxth	r0, r0
	old_numX = number;
 8014cc0:	f889 8000 	strb.w	r8, [r9]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014cc4:	f008 f986 	bl	801cfd4 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8014cc8:	484c      	ldr	r0, [pc, #304]	; (8014dfc <GUI_Text_XYZ_Measure+0x304>)
 8014cca:	f008 f861 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%d", ValueY);
 8014cce:	9a02      	ldr	r2, [sp, #8]
 8014cd0:	494b      	ldr	r1, [pc, #300]	; (8014e00 <GUI_Text_XYZ_Measure+0x308>)
 8014cd2:	a804      	add	r0, sp, #16
 8014cd4:	f00b fc9c 	bl	8020610 <sprintf>
	dec = 10;
 8014cd8:	f04f 0a0a 	mov.w	sl, #10
	number = 0;
 8014cdc:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueY);
 8014ce0:	f04f 0904 	mov.w	r9, #4
	delta_pos = 190;
 8014ce4:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8014ce6:	46d3      	mov	fp, sl
		if((ValueY/(dec)) >= 1.0)
 8014ce8:	9b02      	ldr	r3, [sp, #8]
 8014cea:	fbb3 f0fa 	udiv	r0, r3, sl
 8014cee:	f7eb fc21 	bl	8000534 <__aeabi_ui2d>
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	4b43      	ldr	r3, [pc, #268]	; (8014e04 <GUI_Text_XYZ_Measure+0x30c>)
 8014cf6:	f7eb ff19 	bl	8000b2c <__aeabi_dcmpge>
 8014cfa:	b138      	cbz	r0, 8014d0c <GUI_Text_XYZ_Measure+0x214>
			delta_pos-=23;
 8014cfc:	3f17      	subs	r7, #23
			number++;
 8014cfe:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8014d02:	fb0b fa0a 	mul.w	sl, fp, sl
			delta_pos-=23;
 8014d06:	b2ff      	uxtb	r7, r7
			number++;
 8014d08:	fa5f f888 	uxtb.w	r8, r8
 8014d0c:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014d10:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8014d14:	d1e8      	bne.n	8014ce8 <GUI_Text_XYZ_Measure+0x1f0>
	if(number < old_numY || old_nanXYZ)
 8014d16:	4b3d      	ldr	r3, [pc, #244]	; (8014e0c <GUI_Text_XYZ_Measure+0x314>)
 8014d18:	781a      	ldrb	r2, [r3, #0]
 8014d1a:	4542      	cmp	r2, r8
 8014d1c:	f104 0923 	add.w	r9, r4, #35	; 0x23
 8014d20:	469a      	mov	sl, r3
 8014d22:	d802      	bhi.n	8014d2a <GUI_Text_XYZ_Measure+0x232>
 8014d24:	4b33      	ldr	r3, [pc, #204]	; (8014df4 <GUI_Text_XYZ_Measure+0x2fc>)
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	b173      	cbz	r3, 8014d48 <GUI_Text_XYZ_Measure+0x250>
		TFT_FillRectangle(X+40, Y+35, X+197, Y+59, TFT_Black_Bkgr);
 8014d2a:	2163      	movs	r1, #99	; 0x63
 8014d2c:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8014d30:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014d34:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014d38:	9100      	str	r1, [sp, #0]
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	b292      	uxth	r2, r2
 8014d3e:	fa1f f189 	uxth.w	r1, r9
 8014d42:	b280      	uxth	r0, r0
 8014d44:	f007 fdfb 	bl	801c93e <TFT_FillRectangle>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8014d48:	19e8      	adds	r0, r5, r7
 8014d4a:	fa1f f189 	uxth.w	r1, r9
 8014d4e:	2303      	movs	r3, #3
 8014d50:	aa04      	add	r2, sp, #16
 8014d52:	b280      	uxth	r0, r0
	old_numY = number;
 8014d54:	f88a 8000 	strb.w	r8, [sl]
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8014d58:	f008 f93c 	bl	801cfd4 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8014d5c:	4827      	ldr	r0, [pc, #156]	; (8014dfc <GUI_Text_XYZ_Measure+0x304>)
 8014d5e:	f008 f817 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%d", ValueZ);
 8014d62:	9a03      	ldr	r2, [sp, #12]
 8014d64:	4926      	ldr	r1, [pc, #152]	; (8014e00 <GUI_Text_XYZ_Measure+0x308>)
 8014d66:	a804      	add	r0, sp, #16
 8014d68:	f00b fc52 	bl	8020610 <sprintf>
	 dec = 10;
 8014d6c:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueZ);
 8014d70:	f04f 0804 	mov.w	r8, #4
		delta_pos = 190;
 8014d74:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8014d76:	46ca      	mov	sl, r9
		if((ValueZ/(dec)) >= 1.0)
 8014d78:	9b03      	ldr	r3, [sp, #12]
 8014d7a:	fbb3 f0f9 	udiv	r0, r3, r9
 8014d7e:	f7eb fbd9 	bl	8000534 <__aeabi_ui2d>
 8014d82:	2200      	movs	r2, #0
 8014d84:	4b1f      	ldr	r3, [pc, #124]	; (8014e04 <GUI_Text_XYZ_Measure+0x30c>)
 8014d86:	f7eb fed1 	bl	8000b2c <__aeabi_dcmpge>
 8014d8a:	b128      	cbz	r0, 8014d98 <GUI_Text_XYZ_Measure+0x2a0>
			delta_pos-=23;
 8014d8c:	3f17      	subs	r7, #23
			number++;
 8014d8e:	3601      	adds	r6, #1
			dec *= 10;
 8014d90:	fb0a f909 	mul.w	r9, sl, r9
			delta_pos-=23;
 8014d94:	b2ff      	uxtb	r7, r7
			number++;
 8014d96:	b2f6      	uxtb	r6, r6
 8014d98:	f108 38ff 	add.w	r8, r8, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 8014d9c:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8014da0:	d1ea      	bne.n	8014d78 <GUI_Text_XYZ_Measure+0x280>
	if(number < old_numZ || old_nanXYZ)
 8014da2:	4b1b      	ldr	r3, [pc, #108]	; (8014e10 <GUI_Text_XYZ_Measure+0x318>)
 8014da4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8014df4 <GUI_Text_XYZ_Measure+0x2fc>
 8014da8:	781a      	ldrb	r2, [r3, #0]
 8014daa:	42b2      	cmp	r2, r6
 8014dac:	f104 0a46 	add.w	sl, r4, #70	; 0x46
 8014db0:	4698      	mov	r8, r3
 8014db2:	d802      	bhi.n	8014dba <GUI_Text_XYZ_Measure+0x2c2>
 8014db4:	f899 3000 	ldrb.w	r3, [r9]
 8014db8:	b173      	cbz	r3, 8014dd8 <GUI_Text_XYZ_Measure+0x2e0>
		TFT_FillRectangle(X+40, Y+70, X+197, Y+94, TFT_Black_Bkgr);
 8014dba:	2163      	movs	r1, #99	; 0x63
 8014dbc:	f104 035e 	add.w	r3, r4, #94	; 0x5e
 8014dc0:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014dc4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014dc8:	9100      	str	r1, [sp, #0]
 8014dca:	b29b      	uxth	r3, r3
 8014dcc:	b292      	uxth	r2, r2
 8014dce:	fa1f f18a 	uxth.w	r1, sl
 8014dd2:	b280      	uxth	r0, r0
 8014dd4:	f007 fdb3 	bl	801c93e <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014dd8:	19e8      	adds	r0, r5, r7
 8014dda:	2303      	movs	r3, #3
 8014ddc:	aa04      	add	r2, sp, #16
 8014dde:	fa1f f18a 	uxth.w	r1, sl
 8014de2:	b280      	uxth	r0, r0
	old_numZ = number;
 8014de4:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014de8:	f008 f8f4 	bl	801cfd4 <TFT_DisplayString>
	old_nanXYZ = 0;
 8014dec:	2300      	movs	r3, #0
 8014dee:	f889 3000 	strb.w	r3, [r9]
 8014df2:	e6f6      	b.n	8014be2 <GUI_Text_XYZ_Measure+0xea>
 8014df4:	20005732 	.word	0x20005732
 8014df8:	200001e8 	.word	0x200001e8
 8014dfc:	200001f0 	.word	0x200001f0
 8014e00:	08025309 	.word	0x08025309
 8014e04:	3ff00000 	.word	0x3ff00000
 8014e08:	2000023a 	.word	0x2000023a
 8014e0c:	2000023b 	.word	0x2000023b
 8014e10:	2000023c 	.word	0x2000023c

08014e14 <GUI_Text_xy_Measure>:
uint8_t old_nanxy = 0;
void GUI_Text_xy_Measure(uint16_t X, uint16_t Y, float Valuex, float Valuey, uint8_t nope, uint8_t grey)
{
 8014e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e18:	ed2d 8b02 	vpush	{d8}
 8014e1c:	b085      	sub	sp, #20
 8014e1e:	4604      	mov	r4, r0
 8014e20:	4691      	mov	r9, r2
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 8014e22:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8014e26:	2200      	movs	r2, #0
{
 8014e28:	460d      	mov	r5, r1
 8014e2a:	eef0 8a40 	vmov.f32	s17, s0
 8014e2e:	eeb0 8a60 	vmov.f32	s16, s1
 8014e32:	461e      	mov	r6, r3
	char buffer[5] = {0};
 8014e34:	9202      	str	r2, [sp, #8]
 8014e36:	f88d 200c 	strb.w	r2, [sp, #12]
	TFT_SetTextColor(TFT_White);
 8014e3a:	f007 ffaf 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014e3e:	2063      	movs	r0, #99	; 0x63
 8014e40:	f007 ffb2 	bl	801cda8 <TFT_SetBackColor>

	if((Valuex == 0 && Valuey ==1) || nope){
 8014e44:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e4c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8014f94 <GUI_Text_xy_Measure+0x180>
 8014e50:	f105 0723 	add.w	r7, r5, #35	; 0x23
 8014e54:	d106      	bne.n	8014e64 <GUI_Text_xy_Measure+0x50>
 8014e56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e5a:	eeb4 8a67 	vcmp.f32	s16, s15
 8014e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e62:	d002      	beq.n	8014e6a <GUI_Text_xy_Measure+0x56>
 8014e64:	f1b9 0f00 	cmp.w	r9, #0
 8014e68:	d05a      	beq.n	8014f20 <GUI_Text_xy_Measure+0x10c>
		if(!old_nanxy){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8014e6a:	f898 3000 	ldrb.w	r3, [r8]
 8014e6e:	b96b      	cbnz	r3, 8014e8c <GUI_Text_xy_Measure+0x78>
 8014e70:	2163      	movs	r1, #99	; 0x63
 8014e72:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8014e76:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8014e7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014e7e:	9100      	str	r1, [sp, #0]
 8014e80:	b29b      	uxth	r3, r3
 8014e82:	b292      	uxth	r2, r2
 8014e84:	4629      	mov	r1, r5
 8014e86:	b280      	uxth	r0, r0
 8014e88:	f007 fd59 	bl	801c93e <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014e8c:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8014e90:	483c      	ldr	r0, [pc, #240]	; (8014f84 <GUI_Text_xy_Measure+0x170>)
 8014e92:	fa1f fb8b 	uxth.w	fp, fp
 8014e96:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8014e9a:	f007 ff79 	bl	801cd90 <TFT_SetFont>
 8014e9e:	fa1f fa8a 	uxth.w	sl, sl
 8014ea2:	222d      	movs	r2, #45	; 0x2d
 8014ea4:	4629      	mov	r1, r5
 8014ea6:	4658      	mov	r0, fp
 8014ea8:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8014eac:	f008 f83a 	bl	801cf24 <TFT_DrawChar>
 8014eb0:	fa1f f989 	uxth.w	r9, r9
 8014eb4:	2220      	movs	r2, #32
 8014eb6:	4629      	mov	r1, r5
 8014eb8:	4650      	mov	r0, sl
 8014eba:	f008 f833 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014ebe:	b2be      	uxth	r6, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014ec0:	222d      	movs	r2, #45	; 0x2d
 8014ec2:	4629      	mov	r1, r5
 8014ec4:	4648      	mov	r0, r9
 8014ec6:	f008 f82d 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014eca:	222d      	movs	r2, #45	; 0x2d
 8014ecc:	4631      	mov	r1, r6
 8014ece:	4658      	mov	r0, fp
 8014ed0:	f008 f828 	bl	801cf24 <TFT_DrawChar>
 8014ed4:	2220      	movs	r2, #32
 8014ed6:	4631      	mov	r1, r6
 8014ed8:	4650      	mov	r0, sl
 8014eda:	f008 f823 	bl	801cf24 <TFT_DrawChar>
 8014ede:	222d      	movs	r2, #45	; 0x2d
 8014ee0:	4631      	mov	r1, r6
 8014ee2:	4648      	mov	r0, r9
 8014ee4:	f008 f81e 	bl	801cf24 <TFT_DrawChar>
		old_nanxy = 1;
 8014ee8:	2301      	movs	r3, #1
 8014eea:	f888 3000 	strb.w	r3, [r8]
		
		sprintf (buffer, "%.4f", Valuey);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanxy = 0;
	}
	TFT_SetTextColor(TFT_White);
 8014eee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014ef2:	f007 ff53 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014ef6:	2063      	movs	r0, #99	; 0x63
 8014ef8:	f007 ff56 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 8014efc:	4822      	ldr	r0, [pc, #136]	; (8014f88 <GUI_Text_xy_Measure+0x174>)
 8014efe:	f007 ff47 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'x'-65);
 8014f02:	4629      	mov	r1, r5
 8014f04:	4620      	mov	r0, r4
 8014f06:	2237      	movs	r2, #55	; 0x37
 8014f08:	f008 f80c 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'y'-65);
 8014f0c:	2238      	movs	r2, #56	; 0x38
 8014f0e:	b2b9      	uxth	r1, r7
 8014f10:	4620      	mov	r0, r4
 8014f12:	f008 f807 	bl	801cf24 <TFT_DrawChar>
	
}	
 8014f16:	b005      	add	sp, #20
 8014f18:	ecbd 8b02 	vpop	{d8}
 8014f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f24:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8014f28:	2e00      	cmp	r6, #0
 8014f2a:	bf08      	it	eq
 8014f2c:	4610      	moveq	r0, r2
 8014f2e:	f007 ff35 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 8014f32:	4816      	ldr	r0, [pc, #88]	; (8014f8c <GUI_Text_xy_Measure+0x178>)
 8014f34:	f007 ff2c 	bl	801cd90 <TFT_SetFont>
		sprintf (buffer, "%.4f", Valuex);
 8014f38:	ee18 0a90 	vmov	r0, s17
 8014f3c:	f7eb fb1c 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014f40:	f104 0646 	add.w	r6, r4, #70	; 0x46
		sprintf (buffer, "%.4f", Valuex);
 8014f44:	4602      	mov	r2, r0
 8014f46:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014f48:	b2b6      	uxth	r6, r6
		sprintf (buffer, "%.4f", Valuex);
 8014f4a:	4911      	ldr	r1, [pc, #68]	; (8014f90 <GUI_Text_xy_Measure+0x17c>)
 8014f4c:	a802      	add	r0, sp, #8
 8014f4e:	f00b fb5f 	bl	8020610 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014f52:	2303      	movs	r3, #3
 8014f54:	aa02      	add	r2, sp, #8
 8014f56:	4629      	mov	r1, r5
 8014f58:	4630      	mov	r0, r6
 8014f5a:	f008 f83b 	bl	801cfd4 <TFT_DisplayString>
		sprintf (buffer, "%.4f", Valuey);
 8014f5e:	ee18 0a10 	vmov	r0, s16
 8014f62:	f7eb fb09 	bl	8000578 <__aeabi_f2d>
 8014f66:	4602      	mov	r2, r0
 8014f68:	460b      	mov	r3, r1
 8014f6a:	a802      	add	r0, sp, #8
 8014f6c:	4908      	ldr	r1, [pc, #32]	; (8014f90 <GUI_Text_xy_Measure+0x17c>)
 8014f6e:	f00b fb4f 	bl	8020610 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8014f72:	2303      	movs	r3, #3
 8014f74:	aa02      	add	r2, sp, #8
 8014f76:	b2b9      	uxth	r1, r7
 8014f78:	4630      	mov	r0, r6
 8014f7a:	f008 f82b 	bl	801cfd4 <TFT_DisplayString>
		old_nanxy = 0;
 8014f7e:	f888 9000 	strb.w	r9, [r8]
 8014f82:	e7b4      	b.n	8014eee <GUI_Text_xy_Measure+0xda>
 8014f84:	200001e8 	.word	0x200001e8
 8014f88:	200001f8 	.word	0x200001f8
 8014f8c:	200001f0 	.word	0x200001f0
 8014f90:	080320ef 	.word	0x080320ef
 8014f94:	20005740 	.word	0x20005740

08014f98 <GUI_Text_uv_Measure>:
uint8_t old_nanuv = 0;
void GUI_Text_uv_Measure(uint16_t X, uint16_t Y, float ValueU, float ValueV, uint8_t nope, uint8_t grey)
{
 8014f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f9c:	ed2d 8b02 	vpush	{d8}
 8014fa0:	b087      	sub	sp, #28
 8014fa2:	4604      	mov	r4, r0
 8014fa4:	469a      	mov	sl, r3
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 8014fa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8014faa:	2300      	movs	r3, #0
{
 8014fac:	460d      	mov	r5, r1
 8014fae:	eeb0 8a40 	vmov.f32	s16, s0
 8014fb2:	ee10 9a90 	vmov	r9, s1
 8014fb6:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8014fb8:	9304      	str	r3, [sp, #16]
 8014fba:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8014fbe:	f007 feed 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014fc2:	2063      	movs	r0, #99	; 0x63
 8014fc4:	f007 fef0 	bl	801cda8 <TFT_SetBackColor>
	
	if((ValueU == 0 && (ValueV >0.6 && ValueV <0.6001)) || nope){
 8014fc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd0:	4f5d      	ldr	r7, [pc, #372]	; (8015148 <GUI_Text_uv_Measure+0x1b0>)
 8014fd2:	f105 0623 	add.w	r6, r5, #35	; 0x23
 8014fd6:	d112      	bne.n	8014ffe <GUI_Text_uv_Measure+0x66>
 8014fd8:	4648      	mov	r0, r9
 8014fda:	f7eb facd 	bl	8000578 <__aeabi_f2d>
 8014fde:	a356      	add	r3, pc, #344	; (adr r3, 8015138 <GUI_Text_uv_Measure+0x1a0>)
 8014fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fe8:	f7eb fdaa 	bl	8000b40 <__aeabi_dcmpgt>
 8014fec:	b138      	cbz	r0, 8014ffe <GUI_Text_uv_Measure+0x66>
 8014fee:	a354      	add	r3, pc, #336	; (adr r3, 8015140 <GUI_Text_uv_Measure+0x1a8>)
 8014ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ff8:	f7eb fd84 	bl	8000b04 <__aeabi_dcmplt>
 8014ffc:	b910      	cbnz	r0, 8015004 <GUI_Text_uv_Measure+0x6c>
 8014ffe:	f1b8 0f00 	cmp.w	r8, #0
 8015002:	d064      	beq.n	80150ce <GUI_Text_uv_Measure+0x136>
		if(!old_nanuv){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8015004:	783b      	ldrb	r3, [r7, #0]
 8015006:	b96b      	cbnz	r3, 8015024 <GUI_Text_uv_Measure+0x8c>
 8015008:	2163      	movs	r1, #99	; 0x63
 801500a:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 801500e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015012:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015016:	9100      	str	r1, [sp, #0]
 8015018:	b29b      	uxth	r3, r3
 801501a:	b292      	uxth	r2, r2
 801501c:	4629      	mov	r1, r5
 801501e:	b280      	uxth	r0, r0
 8015020:	f007 fc8d 	bl	801c93e <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015024:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8015028:	4848      	ldr	r0, [pc, #288]	; (801514c <GUI_Text_uv_Measure+0x1b4>)
 801502a:	fa1f fb8b 	uxth.w	fp, fp
 801502e:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8015032:	f007 fead 	bl	801cd90 <TFT_SetFont>
 8015036:	fa1f fa8a 	uxth.w	sl, sl
 801503a:	222d      	movs	r2, #45	; 0x2d
 801503c:	4629      	mov	r1, r5
 801503e:	4658      	mov	r0, fp
 8015040:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8015044:	f007 ff6e 	bl	801cf24 <TFT_DrawChar>
 8015048:	fa1f f989 	uxth.w	r9, r9
 801504c:	2220      	movs	r2, #32
 801504e:	4629      	mov	r1, r5
 8015050:	4650      	mov	r0, sl
 8015052:	f007 ff67 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015056:	fa1f f886 	uxth.w	r8, r6
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801505a:	222d      	movs	r2, #45	; 0x2d
 801505c:	4629      	mov	r1, r5
 801505e:	4648      	mov	r0, r9
 8015060:	f007 ff60 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015064:	222d      	movs	r2, #45	; 0x2d
 8015066:	4641      	mov	r1, r8
 8015068:	4658      	mov	r0, fp
 801506a:	f007 ff5b 	bl	801cf24 <TFT_DrawChar>
 801506e:	2220      	movs	r2, #32
 8015070:	4641      	mov	r1, r8
 8015072:	4650      	mov	r0, sl
 8015074:	f007 ff56 	bl	801cf24 <TFT_DrawChar>
 8015078:	222d      	movs	r2, #45	; 0x2d
 801507a:	4641      	mov	r1, r8
 801507c:	4648      	mov	r0, r9
 801507e:	f007 ff51 	bl	801cf24 <TFT_DrawChar>
		old_nanuv = 1;
 8015082:	2301      	movs	r3, #1
 8015084:	703b      	strb	r3, [r7, #0]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
		sprintf (buffer, "%.4f", ValueV);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanuv = 0;
	}
	TFT_SetTextColor(TFT_White);
 8015086:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font26EN_arch_small);
	TFT_DrawChar(X+15, Y, 'z'-64);
 801508a:	f104 070f 	add.w	r7, r4, #15
	TFT_SetTextColor(TFT_White);
 801508e:	f007 fe85 	bl	801cd9c <TFT_SetTextColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8015092:	b2bf      	uxth	r7, r7
	TFT_SetFont(&Font26EN_arch_small);
 8015094:	482e      	ldr	r0, [pc, #184]	; (8015150 <GUI_Text_uv_Measure+0x1b8>)
 8015096:	f007 fe7b 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, 'z'-64);
 801509a:	4629      	mov	r1, r5
 801509c:	4638      	mov	r0, r7
 801509e:	223a      	movs	r2, #58	; 0x3a
 80150a0:	f007 ff40 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'u'-65);
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 80150a4:	b2b6      	uxth	r6, r6
	TFT_DrawChar(X, Y, 'u'-65);
 80150a6:	4629      	mov	r1, r5
 80150a8:	4620      	mov	r0, r4
 80150aa:	2234      	movs	r2, #52	; 0x34
 80150ac:	f007 ff3a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 80150b0:	4631      	mov	r1, r6
 80150b2:	4638      	mov	r0, r7
 80150b4:	223a      	movs	r2, #58	; 0x3a
 80150b6:	f007 ff35 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'v'-65);
 80150ba:	2235      	movs	r2, #53	; 0x35
 80150bc:	4631      	mov	r1, r6
 80150be:	4620      	mov	r0, r4
 80150c0:	f007 ff30 	bl	801cf24 <TFT_DrawChar>
}	
 80150c4:	b007      	add	sp, #28
 80150c6:	ecbd 8b02 	vpop	{d8}
 80150ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80150ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150d2:	f249 40d2 	movw	r0, #38098	; 0x94d2
 80150d6:	f1ba 0f00 	cmp.w	sl, #0
 80150da:	bf08      	it	eq
 80150dc:	4618      	moveq	r0, r3
 80150de:	f007 fe5d 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 80150e2:	481c      	ldr	r0, [pc, #112]	; (8015154 <GUI_Text_uv_Measure+0x1bc>)
 80150e4:	f007 fe54 	bl	801cd90 <TFT_SetFont>
		sprintf (buffer, "%.4f", ValueU);
 80150e8:	ee18 0a10 	vmov	r0, s16
 80150ec:	f7eb fa44 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80150f0:	f104 0a46 	add.w	sl, r4, #70	; 0x46
		sprintf (buffer, "%.4f", ValueU);
 80150f4:	4602      	mov	r2, r0
 80150f6:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80150f8:	fa1f fa8a 	uxth.w	sl, sl
		sprintf (buffer, "%.4f", ValueU);
 80150fc:	4916      	ldr	r1, [pc, #88]	; (8015158 <GUI_Text_uv_Measure+0x1c0>)
 80150fe:	a804      	add	r0, sp, #16
 8015100:	f00b fa86 	bl	8020610 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015104:	2303      	movs	r3, #3
 8015106:	aa04      	add	r2, sp, #16
 8015108:	4629      	mov	r1, r5
 801510a:	4650      	mov	r0, sl
 801510c:	f007 ff62 	bl	801cfd4 <TFT_DisplayString>
		sprintf (buffer, "%.4f", ValueV);
 8015110:	4648      	mov	r0, r9
 8015112:	f7eb fa31 	bl	8000578 <__aeabi_f2d>
 8015116:	4602      	mov	r2, r0
 8015118:	460b      	mov	r3, r1
 801511a:	a804      	add	r0, sp, #16
 801511c:	490e      	ldr	r1, [pc, #56]	; (8015158 <GUI_Text_uv_Measure+0x1c0>)
 801511e:	f00b fa77 	bl	8020610 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015122:	2303      	movs	r3, #3
 8015124:	aa04      	add	r2, sp, #16
 8015126:	b2b1      	uxth	r1, r6
 8015128:	4650      	mov	r0, sl
 801512a:	f007 ff53 	bl	801cfd4 <TFT_DisplayString>
		old_nanuv = 0;
 801512e:	f887 8000 	strb.w	r8, [r7]
 8015132:	e7a8      	b.n	8015086 <GUI_Text_uv_Measure+0xee>
 8015134:	f3af 8000 	nop.w
 8015138:	33333333 	.word	0x33333333
 801513c:	3fe33333 	.word	0x3fe33333
 8015140:	ea4a8c15 	.word	0xea4a8c15
 8015144:	3fe33404 	.word	0x3fe33404
 8015148:	2000573f 	.word	0x2000573f
 801514c:	200001e8 	.word	0x200001e8
 8015150:	200001f8 	.word	0x200001f8
 8015154:	200001f0 	.word	0x200001f0
 8015158:	080320ef 	.word	0x080320ef

0801515c <GUI_Text_CCT_Measure>:

uint8_t old_numCCT = 10, old_nan_CCT = 0;
void GUI_Text_CCT_Measure(uint16_t X, uint16_t Y, uint16_t Value, uint8_t nope, uint8_t grey)
{	
 801515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015160:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8015162:	4b71      	ldr	r3, [pc, #452]	; (8015328 <GUI_Text_CCT_Measure+0x1cc>)
{	
 8015164:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8015166:	781a      	ldrb	r2, [r3, #0]
 8015168:	4b70      	ldr	r3, [pc, #448]	; (801532c <GUI_Text_CCT_Measure+0x1d0>)
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	429a      	cmp	r2, r3
{	
 801516e:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8015170:	bf1c      	itt	ne
 8015172:	4b6f      	ldrne	r3, [pc, #444]	; (8015330 <GUI_Text_CCT_Measure+0x1d4>)
 8015174:	2200      	movne	r2, #0
	char buffer[9] = {0};
 8015176:	f04f 0600 	mov.w	r6, #0
{	
 801517a:	4605      	mov	r5, r0
	uint8_t	delta_pos = 180, number = 0;
	uint32_t dec = 10;
	
	
	TFT_SetBackColor(TFT_Black_Bkgr);
 801517c:	f04f 0063 	mov.w	r0, #99	; 0x63
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8015180:	bf18      	it	ne
 8015182:	701a      	strbne	r2, [r3, #0]
{	
 8015184:	460c      	mov	r4, r1
	char buffer[9] = {0};
 8015186:	9603      	str	r6, [sp, #12]
 8015188:	9604      	str	r6, [sp, #16]
 801518a:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetBackColor(TFT_Black_Bkgr);
 801518e:	f007 fe0b 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015192:	4868      	ldr	r0, [pc, #416]	; (8015334 <GUI_Text_CCT_Measure+0x1d8>)
 8015194:	f007 fdfc 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%d", Value);
 8015198:	464a      	mov	r2, r9
 801519a:	4967      	ldr	r1, [pc, #412]	; (8015338 <GUI_Text_CCT_Measure+0x1dc>)
 801519c:	a803      	add	r0, sp, #12
 801519e:	f00b fa37 	bl	8020610 <sprintf>
 80151a2:	f04f 0804 	mov.w	r8, #4
	uint32_t dec = 10;
 80151a6:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, number = 0;
 80151aa:	27b4      	movs	r7, #180	; 0xb4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 80151ac:	fbb9 f0fa 	udiv	r0, r9, sl
 80151b0:	f7eb f9c0 	bl	8000534 <__aeabi_ui2d>
 80151b4:	2200      	movs	r2, #0
 80151b6:	4b61      	ldr	r3, [pc, #388]	; (801533c <GUI_Text_CCT_Measure+0x1e0>)
 80151b8:	f7eb fcb8 	bl	8000b2c <__aeabi_dcmpge>
 80151bc:	b130      	cbz	r0, 80151cc <GUI_Text_CCT_Measure+0x70>
		{
			dec *= 10;
 80151be:	230a      	movs	r3, #10
			delta_pos-=23;
 80151c0:	3f17      	subs	r7, #23
			number++;
 80151c2:	3601      	adds	r6, #1
			dec *= 10;
 80151c4:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80151c8:	b2ff      	uxtb	r7, r7
			number++;
 80151ca:	b2f6      	uxtb	r6, r6
 80151cc:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 80151d0:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 80151d4:	d1ea      	bne.n	80151ac <GUI_Text_CCT_Measure+0x50>
		}
	}
	
	if((Value == 0 || nope) & !old_nan_CCT){old_nan_CCT = 1; TFT_FillRectangle(X+40, Y, X+205, Y+25, TFT_Black_Bkgr);TFT_SetTextColor(TFT_White); TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+125, Y+4, 'N'-33);TFT_DrawChar(X+150, Y+4, 'A'-33);TFT_DrawChar(X+175, Y+4, 'N'-33);}
 80151d6:	f1b9 0f00 	cmp.w	r9, #0
 80151da:	d063      	beq.n	80152a4 <GUI_Text_CCT_Measure+0x148>
 80151dc:	f11b 0200 	adds.w	r2, fp, #0
 80151e0:	bf18      	it	ne
 80151e2:	2201      	movne	r2, #1
 80151e4:	4b52      	ldr	r3, [pc, #328]	; (8015330 <GUI_Text_CCT_Measure+0x1d4>)
 80151e6:	7819      	ldrb	r1, [r3, #0]
 80151e8:	4698      	mov	r8, r3
 80151ea:	2900      	cmp	r1, #0
 80151ec:	d15c      	bne.n	80152a8 <GUI_Text_CCT_Measure+0x14c>
 80151ee:	2a00      	cmp	r2, #0
 80151f0:	d05a      	beq.n	80152a8 <GUI_Text_CCT_Measure+0x14c>
 80151f2:	2201      	movs	r2, #1
 80151f4:	701a      	strb	r2, [r3, #0]
 80151f6:	2163      	movs	r1, #99	; 0x63
 80151f8:	f104 0319 	add.w	r3, r4, #25
 80151fc:	f105 02cd 	add.w	r2, r5, #205	; 0xcd
 8015200:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015204:	b29b      	uxth	r3, r3
 8015206:	b292      	uxth	r2, r2
 8015208:	9100      	str	r1, [sp, #0]
 801520a:	b280      	uxth	r0, r0
 801520c:	4621      	mov	r1, r4
 801520e:	f007 fb96 	bl	801c93e <TFT_FillRectangle>
 8015212:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015216:	f007 fdc1 	bl	801cd9c <TFT_SetTextColor>
 801521a:	1d26      	adds	r6, r4, #4
 801521c:	4848      	ldr	r0, [pc, #288]	; (8015340 <GUI_Text_CCT_Measure+0x1e4>)
 801521e:	f007 fdb7 	bl	801cd90 <TFT_SetFont>
 8015222:	b2b6      	uxth	r6, r6
 8015224:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8015228:	222d      	movs	r2, #45	; 0x2d
 801522a:	4631      	mov	r1, r6
 801522c:	b280      	uxth	r0, r0
 801522e:	f007 fe79 	bl	801cf24 <TFT_DrawChar>
 8015232:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8015236:	2220      	movs	r2, #32
 8015238:	4631      	mov	r1, r6
 801523a:	b280      	uxth	r0, r0
 801523c:	f007 fe72 	bl	801cf24 <TFT_DrawChar>
 8015240:	f105 00af 	add.w	r0, r5, #175	; 0xaf
 8015244:	222d      	movs	r2, #45	; 0x2d
 8015246:	4631      	mov	r1, r6
 8015248:	b280      	uxth	r0, r0
 801524a:	f007 fe6b 	bl	801cf24 <TFT_DrawChar>
	old_numCCT = number;
		
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
	}
	
	TFT_SetTextColor(TFT_White);
 801524e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015252:	f007 fda3 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015256:	2063      	movs	r0, #99	; 0x63
 8015258:	f007 fda6 	bl	801cda8 <TFT_SetBackColor>
	if(Language_status == Ru ){
 801525c:	4b39      	ldr	r3, [pc, #228]	; (8015344 <GUI_Text_CCT_Measure+0x1e8>)
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	f105 06d7 	add.w	r6, r5, #215	; 0xd7
 8015264:	2b00      	cmp	r3, #0
 8015266:	d152      	bne.n	801530e <GUI_Text_CCT_Measure+0x1b2>
			TFT_SetFont(&Font26RU_arch_big);
 8015268:	4837      	ldr	r0, [pc, #220]	; (8015348 <GUI_Text_CCT_Measure+0x1ec>)
 801526a:	f007 fd91 	bl	801cd90 <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'К'-17);
 801526e:	2289      	movs	r2, #137	; 0x89
 8015270:	4621      	mov	r1, r4
 8015272:	4628      	mov	r0, r5
 8015274:	f007 fd9e 	bl	801cdb4 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'Ц'-17);
 8015278:	f105 0018 	add.w	r0, r5, #24
 801527c:	2295      	movs	r2, #149	; 0x95
 801527e:	4621      	mov	r1, r4
 8015280:	b280      	uxth	r0, r0
 8015282:	f007 fd97 	bl	801cdb4 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+45, Y, 'Т'-17);
 8015286:	f105 002d 	add.w	r0, r5, #45	; 0x2d
 801528a:	2291      	movs	r2, #145	; 0x91
 801528c:	4621      	mov	r1, r4
 801528e:	b280      	uxth	r0, r0
 8015290:	f007 fd90 	bl	801cdb4 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y, 'К'-17);
 8015294:	2289      	movs	r2, #137	; 0x89
 8015296:	4621      	mov	r1, r4
 8015298:	b2b0      	uxth	r0, r6
 801529a:	f007 fd8b 	bl	801cdb4 <TFT_DrawCharRus>
		{
			GUI_TextEn_CCT(X, Y+4);

			TFT_DrawChar(X+215, Y+4, 'K'-33);
		}	
}
 801529e:	b007      	add	sp, #28
 80152a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152a4:	2201      	movs	r2, #1
 80152a6:	e79d      	b.n	80151e4 <GUI_Text_CCT_Measure+0x88>
	else if(!nope & Value != 0){
 80152a8:	f1bb 0f00 	cmp.w	fp, #0
 80152ac:	d1cf      	bne.n	801524e <GUI_Text_CCT_Measure+0xf2>
 80152ae:	f1b9 0f00 	cmp.w	r9, #0
 80152b2:	d0cc      	beq.n	801524e <GUI_Text_CCT_Measure+0xf2>
	if(number < old_numCCT )
 80152b4:	4b25      	ldr	r3, [pc, #148]	; (801534c <GUI_Text_CCT_Measure+0x1f0>)
 80152b6:	781a      	ldrb	r2, [r3, #0]
 80152b8:	42b2      	cmp	r2, r6
 80152ba:	4699      	mov	r9, r3
 80152bc:	d90d      	bls.n	80152da <GUI_Text_CCT_Measure+0x17e>
		TFT_FillRectangle(X+40, Y, X+205, Y+25, TFT_Black_Bkgr);
 80152be:	2163      	movs	r1, #99	; 0x63
 80152c0:	f104 0319 	add.w	r3, r4, #25
 80152c4:	f105 02cd 	add.w	r2, r5, #205	; 0xcd
 80152c8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80152cc:	9100      	str	r1, [sp, #0]
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	b292      	uxth	r2, r2
 80152d2:	4621      	mov	r1, r4
 80152d4:	b280      	uxth	r0, r0
 80152d6:	f007 fb32 	bl	801c93e <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80152da:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80152de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152e2:	f249 42d2 	movw	r2, #38098	; 0x94d2
 80152e6:	2800      	cmp	r0, #0
 80152e8:	bf14      	ite	ne
 80152ea:	4610      	movne	r0, r2
 80152ec:	4618      	moveq	r0, r3
 80152ee:	f007 fd55 	bl	801cd9c <TFT_SetTextColor>
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 80152f2:	1ca1      	adds	r1, r4, #2
 80152f4:	19e8      	adds	r0, r5, r7
 80152f6:	2303      	movs	r3, #3
 80152f8:	aa03      	add	r2, sp, #12
 80152fa:	b289      	uxth	r1, r1
 80152fc:	b280      	uxth	r0, r0
	old_numCCT = number;
 80152fe:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8015302:	f007 fe67 	bl	801cfd4 <TFT_DisplayString>
 8015306:	2300      	movs	r3, #0
 8015308:	f888 3000 	strb.w	r3, [r8]
 801530c:	e79f      	b.n	801524e <GUI_Text_CCT_Measure+0xf2>
			GUI_TextEn_CCT(X, Y+4);
 801530e:	3404      	adds	r4, #4
 8015310:	b2a4      	uxth	r4, r4
 8015312:	4621      	mov	r1, r4
 8015314:	4628      	mov	r0, r5
 8015316:	f002 fd07 	bl	8017d28 <GUI_TextEn_CCT>
			TFT_DrawChar(X+215, Y+4, 'K'-33);
 801531a:	222a      	movs	r2, #42	; 0x2a
 801531c:	4621      	mov	r1, r4
 801531e:	b2b0      	uxth	r0, r6
 8015320:	f007 fe00 	bl	801cf24 <TFT_DrawChar>
}
 8015324:	e7bb      	b.n	801529e <GUI_Text_CCT_Measure+0x142>
 8015326:	bf00      	nop
 8015328:	2000022a 	.word	0x2000022a
 801532c:	20005701 	.word	0x20005701
 8015330:	20005733 	.word	0x20005733
 8015334:	200001f0 	.word	0x200001f0
 8015338:	08025309 	.word	0x08025309
 801533c:	3ff00000 	.word	0x3ff00000
 8015340:	200001e8 	.word	0x200001e8
 8015344:	20005703 	.word	0x20005703
 8015348:	20000200 	.word	0x20000200
 801534c:	20000232 	.word	0x20000232

08015350 <GUI_Text_lambdaD_Measure>:
uint8_t old_lambdaD = 10, old_nan_lambdaD = 0;
void GUI_Text_lambdaD_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8015350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015354:	ed2d 8b02 	vpush	{d8}
 8015358:	4616      	mov	r6, r2
 801535a:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 801535c:	4a71      	ldr	r2, [pc, #452]	; (8015524 <GUI_Text_lambdaD_Measure+0x1d4>)
 801535e:	4b72      	ldr	r3, [pc, #456]	; (8015528 <GUI_Text_lambdaD_Measure+0x1d8>)
 8015360:	4f72      	ldr	r7, [pc, #456]	; (801552c <GUI_Text_lambdaD_Measure+0x1dc>)
{	
 8015362:	4605      	mov	r5, r0
 8015364:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8015366:	7818      	ldrb	r0, [r3, #0]
 8015368:	7811      	ldrb	r1, [r2, #0]
	Value = floor(Value*10)/10.0;
 801536a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 801536e:	4288      	cmp	r0, r1
	Value = floor(Value*10)/10.0;
 8015370:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015374:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8015376:	bf18      	it	ne
 8015378:	2300      	movne	r3, #0
{	
 801537a:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 801537c:	bf18      	it	ne
 801537e:	703b      	strbne	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 8015380:	ee17 0a90 	vmov	r0, s15
 8015384:	4690      	mov	r8, r2
 8015386:	f7eb f8f7 	bl	8000578 <__aeabi_f2d>
 801538a:	ec41 0b10 	vmov	d0, r0, r1
 801538e:	f00e f8fb 	bl	8023588 <floor>
	char buffer[9] = {0};
 8015392:	2200      	movs	r2, #0
	Value = floor(Value*10)/10.0;
 8015394:	ec51 0b10 	vmov	r0, r1, d0
	char buffer[9] = {0};
 8015398:	9203      	str	r2, [sp, #12]
 801539a:	9204      	str	r2, [sp, #16]
 801539c:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
 80153a0:	2e00      	cmp	r6, #0
 80153a2:	d054      	beq.n	801544e <GUI_Text_lambdaD_Measure+0xfe>
		{	
			if(!old_nan_lambdaD){
 80153a4:	783b      	ldrb	r3, [r7, #0]
 80153a6:	bb33      	cbnz	r3, 80153f6 <GUI_Text_lambdaD_Measure+0xa6>
				TFT_SetTextColor(TFT_White);
 80153a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80153ac:	f007 fcf6 	bl	801cd9c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80153b0:	2063      	movs	r0, #99	; 0x63
 80153b2:	f007 fcf9 	bl	801cda8 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80153b6:	485e      	ldr	r0, [pc, #376]	; (8015530 <GUI_Text_lambdaD_Measure+0x1e0>)
 80153b8:	f007 fcea 	bl	801cd90 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 80153bc:	2163      	movs	r1, #99	; 0x63
 80153be:	f104 031a 	add.w	r3, r4, #26
 80153c2:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80153c6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80153ca:	9100      	str	r1, [sp, #0]
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	b292      	uxth	r2, r2
 80153d0:	4621      	mov	r1, r4
 80153d2:	b280      	uxth	r0, r0
 80153d4:	f007 fab3 	bl	801c93e <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80153d8:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80153da:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 80153de:	f88d 300c 	strb.w	r3, [sp, #12]
 80153e2:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80153e6:	aa03      	add	r2, sp, #12
 80153e8:	2303      	movs	r3, #3
 80153ea:	4621      	mov	r1, r4
 80153ec:	b280      	uxth	r0, r0
 80153ee:	f007 fdf1 	bl	801cfd4 <TFT_DisplayString>
				old_nan_lambdaD = 1;
 80153f2:	2301      	movs	r3, #1
 80153f4:	703b      	strb	r3, [r7, #0]
	} 
	old_lambdaD = number;
	
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 80153f6:	f899 2000 	ldrb.w	r2, [r9]
 80153fa:	f898 3000 	ldrb.w	r3, [r8]
 80153fe:	429a      	cmp	r2, r3
 8015400:	d020      	beq.n	8015444 <GUI_Text_lambdaD_Measure+0xf4>
	TFT_SetTextColor(TFT_White);
 8015402:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_d(X, Y+5);
 8015406:	1d66      	adds	r6, r4, #5
	TFT_SetTextColor(TFT_White);
 8015408:	f007 fcc8 	bl	801cd9c <TFT_SetTextColor>
	GUI_Text_lambda_d(X, Y+5);
 801540c:	b2b6      	uxth	r6, r6
	TFT_SetBackColor(TFT_Black_Bkgr);
 801540e:	2063      	movs	r0, #99	; 0x63
 8015410:	f007 fcca 	bl	801cda8 <TFT_SetBackColor>
	GUI_Text_lambda_d(X, Y+5);
 8015414:	4628      	mov	r0, r5
 8015416:	4631      	mov	r1, r6
 8015418:	f001 fd26 	bl	8016e68 <GUI_Text_lambda_d>
	if(Language_status == Ru ){
 801541c:	4b45      	ldr	r3, [pc, #276]	; (8015534 <GUI_Text_lambdaD_Measure+0x1e4>)
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 8015424:	35d8      	adds	r5, #216	; 0xd8
 8015426:	2b00      	cmp	r3, #0
 8015428:	d16c      	bne.n	8015504 <GUI_Text_lambdaD_Measure+0x1b4>
			TFT_SetFont(&Font26RU_arch_small);
 801542a:	4843      	ldr	r0, [pc, #268]	; (8015538 <GUI_Text_lambdaD_Measure+0x1e8>)
 801542c:	f007 fcb0 	bl	801cd90 <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 8015430:	22bd      	movs	r2, #189	; 0xbd
 8015432:	4631      	mov	r1, r6
 8015434:	b2b8      	uxth	r0, r7
 8015436:	f007 fcbd 	bl	801cdb4 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 801543a:	22bc      	movs	r2, #188	; 0xbc
 801543c:	4631      	mov	r1, r6
 801543e:	b2a8      	uxth	r0, r5
 8015440:	f007 fcb8 	bl	801cdb4 <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y+10, 'n');
			TFT_DrawChar(X+216, Y+10, 'm');
		}	
	}
}
 8015444:	b006      	add	sp, #24
 8015446:	ecbd 8b02 	vpop	{d8}
 801544a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	old_nan_lambdaD = 0;
 801544e:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015454:	f249 47d2 	movw	r7, #38098	; 0x94d2
	Value = floor(Value*10)/10.0;
 8015458:	2200      	movs	r2, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801545a:	f1ba 0f00 	cmp.w	sl, #0
 801545e:	bf08      	it	eq
 8015460:	461f      	moveq	r7, r3
	Value = floor(Value*10)/10.0;
 8015462:	4b36      	ldr	r3, [pc, #216]	; (801553c <GUI_Text_lambdaD_Measure+0x1ec>)
 8015464:	f7eb fa06 	bl	8000874 <__aeabi_ddiv>
 8015468:	f7eb fbd2 	bl	8000c10 <__aeabi_d2f>
 801546c:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015470:	4638      	mov	r0, r7
 8015472:	f007 fc93 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015476:	2063      	movs	r0, #99	; 0x63
 8015478:	f007 fc96 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801547c:	482c      	ldr	r0, [pc, #176]	; (8015530 <GUI_Text_lambdaD_Measure+0x1e0>)
 801547e:	f007 fc87 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8015482:	ee18 0a10 	vmov	r0, s16
 8015486:	f7eb f877 	bl	8000578 <__aeabi_f2d>
 801548a:	4602      	mov	r2, r0
 801548c:	460b      	mov	r3, r1
 801548e:	a803      	add	r0, sp, #12
 8015490:	492b      	ldr	r1, [pc, #172]	; (8015540 <GUI_Text_lambdaD_Measure+0x1f0>)
 8015492:	f00b f8bd 	bl	8020610 <sprintf>
	uint32_t dec = 10;
 8015496:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8015498:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 801549a:	277a      	movs	r7, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 801549c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80154a0:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80154a2:	ee07 2a10 	vmov	s14, r2
 80154a6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80154aa:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80154ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154b6:	db04      	blt.n	80154c2 <GUI_Text_lambdaD_Measure+0x172>
			delta_pos-=23;
 80154b8:	3f17      	subs	r7, #23
			number++;
 80154ba:	3601      	adds	r6, #1
			dec *= 10;
 80154bc:	434a      	muls	r2, r1
			delta_pos-=23;
 80154be:	b2ff      	uxtb	r7, r7
			number++;
 80154c0:	b2f6      	uxtb	r6, r6
 80154c2:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 80154c4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80154c8:	d1eb      	bne.n	80154a2 <GUI_Text_lambdaD_Measure+0x152>
	if(number < old_lambdaD )
 80154ca:	4b1e      	ldr	r3, [pc, #120]	; (8015544 <GUI_Text_lambdaD_Measure+0x1f4>)
 80154cc:	781a      	ldrb	r2, [r3, #0]
 80154ce:	42b2      	cmp	r2, r6
 80154d0:	469a      	mov	sl, r3
 80154d2:	d90d      	bls.n	80154f0 <GUI_Text_lambdaD_Measure+0x1a0>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80154d4:	2163      	movs	r1, #99	; 0x63
 80154d6:	f104 0319 	add.w	r3, r4, #25
 80154da:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80154de:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80154e2:	9100      	str	r1, [sp, #0]
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	b292      	uxth	r2, r2
 80154e8:	4621      	mov	r1, r4
 80154ea:	b280      	uxth	r0, r0
 80154ec:	f007 fa27 	bl	801c93e <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80154f0:	19e8      	adds	r0, r5, r7
 80154f2:	2303      	movs	r3, #3
 80154f4:	aa03      	add	r2, sp, #12
 80154f6:	4621      	mov	r1, r4
 80154f8:	b280      	uxth	r0, r0
	old_lambdaD = number;
 80154fa:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80154fe:	f007 fd69 	bl	801cfd4 <TFT_DisplayString>
 8015502:	e778      	b.n	80153f6 <GUI_Text_lambdaD_Measure+0xa6>
			TFT_DrawChar(X+200, Y+10, 'n');
 8015504:	340a      	adds	r4, #10
 8015506:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font16EN_arch_small);
 8015508:	480f      	ldr	r0, [pc, #60]	; (8015548 <GUI_Text_lambdaD_Measure+0x1f8>)
 801550a:	f007 fc41 	bl	801cd90 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+10, 'n');
 801550e:	4621      	mov	r1, r4
 8015510:	b2b8      	uxth	r0, r7
 8015512:	226e      	movs	r2, #110	; 0x6e
 8015514:	f007 fd06 	bl	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X+216, Y+10, 'm');
 8015518:	226d      	movs	r2, #109	; 0x6d
 801551a:	4621      	mov	r1, r4
 801551c:	b2a8      	uxth	r0, r5
 801551e:	f007 fd01 	bl	801cf24 <TFT_DrawChar>
}
 8015522:	e78f      	b.n	8015444 <GUI_Text_lambdaD_Measure+0xf4>
 8015524:	20005701 	.word	0x20005701
 8015528:	2000022a 	.word	0x2000022a
 801552c:	2000573e 	.word	0x2000573e
 8015530:	200001f0 	.word	0x200001f0
 8015534:	20005703 	.word	0x20005703
 8015538:	20000208 	.word	0x20000208
 801553c:	40240000 	.word	0x40240000
 8015540:	080320e5 	.word	0x080320e5
 8015544:	20000230 	.word	0x20000230
 8015548:	200001c0 	.word	0x200001c0

0801554c <GUI_Text_deltaE_Measure>:
}


uint8_t old_deltaE = 10, old_nan_deltaE = 0;
void GUI_Text_deltaE_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 801554c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015550:	ed2d 8b02 	vpush	{d8}
 8015554:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8015556:	4b76      	ldr	r3, [pc, #472]	; (8015730 <GUI_Text_deltaE_Measure+0x1e4>)
 8015558:	4e76      	ldr	r6, [pc, #472]	; (8015734 <GUI_Text_deltaE_Measure+0x1e8>)
{	
 801555a:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 801555c:	781a      	ldrb	r2, [r3, #0]
 801555e:	4b76      	ldr	r3, [pc, #472]	; (8015738 <GUI_Text_deltaE_Measure+0x1ec>)
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	429a      	cmp	r2, r3
{	
 8015564:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8015566:	bf1c      	itt	ne
 8015568:	2300      	movne	r3, #0
 801556a:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 801556c:	2300      	movs	r3, #0
 801556e:	9303      	str	r3, [sp, #12]
 8015570:	9304      	str	r3, [sp, #16]
 8015572:	f88d 3014 	strb.w	r3, [sp, #20]
{	
 8015576:	4604      	mov	r4, r0
 8015578:	460d      	mov	r5, r1
 801557a:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t	delta_pos = 140, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_deltaE){
 801557e:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8015580:	2f00      	cmp	r7, #0
 8015582:	d047      	beq.n	8015614 <GUI_Text_deltaE_Measure+0xc8>
			if(!old_nan_deltaE){
 8015584:	bb33      	cbnz	r3, 80155d4 <GUI_Text_deltaE_Measure+0x88>
				TFT_SetTextColor(TFT_White);
 8015586:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801558a:	f007 fc07 	bl	801cd9c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801558e:	2063      	movs	r0, #99	; 0x63
 8015590:	f007 fc0a 	bl	801cda8 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015594:	4869      	ldr	r0, [pc, #420]	; (801573c <GUI_Text_deltaE_Measure+0x1f0>)
 8015596:	f007 fbfb 	bl	801cd90 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801559a:	2163      	movs	r1, #99	; 0x63
 801559c:	f105 031a 	add.w	r3, r5, #26
 80155a0:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80155a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80155a8:	9100      	str	r1, [sp, #0]
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	b292      	uxth	r2, r2
 80155ae:	4629      	mov	r1, r5
 80155b0:	b280      	uxth	r0, r0
 80155b2:	f007 f9c4 	bl	801c93e <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80155b6:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80155b8:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 80155bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80155c0:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80155c4:	aa03      	add	r2, sp, #12
 80155c6:	2303      	movs	r3, #3
 80155c8:	4629      	mov	r1, r5
 80155ca:	b280      	uxth	r0, r0
 80155cc:	f007 fd02 	bl	801cfd4 <TFT_DisplayString>
				old_nan_deltaE = 1;
 80155d0:	2301      	movs	r3, #1
 80155d2:	7033      	strb	r3, [r6, #0]
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 80155d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80155d8:	f007 fbe0 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80155dc:	2063      	movs	r0, #99	; 0x63
 80155de:	f007 fbe3 	bl	801cda8 <TFT_SetBackColor>

	TFT_SetFont(&Font16EN_arch_big);
 80155e2:	4857      	ldr	r0, [pc, #348]	; (8015740 <GUI_Text_deltaE_Measure+0x1f4>)
 80155e4:	f007 fbd4 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y+6, '~'+2);
 80155e8:	1da9      	adds	r1, r5, #6
 80155ea:	2280      	movs	r2, #128	; 0x80
 80155ec:	b289      	uxth	r1, r1
 80155ee:	4620      	mov	r0, r4
 80155f0:	f007 fc98 	bl	801cf24 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 80155f4:	4853      	ldr	r0, [pc, #332]	; (8015744 <GUI_Text_deltaE_Measure+0x1f8>)
 80155f6:	f007 fbcb 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'E'-33);
 80155fa:	1ca9      	adds	r1, r5, #2
 80155fc:	f104 0012 	add.w	r0, r4, #18
 8015600:	2224      	movs	r2, #36	; 0x24
 8015602:	b289      	uxth	r1, r1
 8015604:	b280      	uxth	r0, r0
 8015606:	f007 fc8d 	bl	801cf24 <TFT_DrawChar>

}
 801560a:	b007      	add	sp, #28
 801560c:	ecbd 8b02 	vpop	{d8}
 8015610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(old_nan_deltaE){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);}
 8015614:	b163      	cbz	r3, 8015630 <GUI_Text_deltaE_Measure+0xe4>
 8015616:	f101 031a 	add.w	r3, r1, #26
 801561a:	f100 02fa 	add.w	r2, r0, #250	; 0xfa
 801561e:	2163      	movs	r1, #99	; 0x63
 8015620:	3028      	adds	r0, #40	; 0x28
 8015622:	9100      	str	r1, [sp, #0]
 8015624:	b29b      	uxth	r3, r3
 8015626:	b292      	uxth	r2, r2
 8015628:	4629      	mov	r1, r5
 801562a:	b280      	uxth	r0, r0
 801562c:	f007 f987 	bl	801c93e <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015630:	f64f 73ff 	movw	r3, #65535	; 0xffff
	old_nan_deltaE = 0;
 8015634:	f04f 0800 	mov.w	r8, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015638:	f249 40d2 	movw	r0, #38098	; 0x94d2
 801563c:	45c1      	cmp	r9, r8
 801563e:	bf08      	it	eq
 8015640:	4618      	moveq	r0, r3
	old_nan_deltaE = 0;
 8015642:	f886 8000 	strb.w	r8, [r6]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015646:	f007 fba9 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801564a:	2063      	movs	r0, #99	; 0x63
 801564c:	f007 fbac 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015650:	483a      	ldr	r0, [pc, #232]	; (801573c <GUI_Text_deltaE_Measure+0x1f0>)
 8015652:	f007 fb9d 	bl	801cd90 <TFT_SetFont>
	Value = floor(Value*10)/10.0;
 8015656:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801565a:	ee68 7a27 	vmul.f32	s15, s16, s15
	uint8_t	delta_pos = 140, sign = 0, number = 0;
 801565e:	268c      	movs	r6, #140	; 0x8c
	Value = floor(Value*10)/10.0;
 8015660:	ee17 0a90 	vmov	r0, s15
 8015664:	f7ea ff88 	bl	8000578 <__aeabi_f2d>
 8015668:	ec41 0b10 	vmov	d0, r0, r1
 801566c:	f00d ff8c 	bl	8023588 <floor>
 8015670:	2200      	movs	r2, #0
 8015672:	4b35      	ldr	r3, [pc, #212]	; (8015748 <GUI_Text_deltaE_Measure+0x1fc>)
 8015674:	ec51 0b10 	vmov	r0, r1, d0
 8015678:	f7eb f8fc 	bl	8000874 <__aeabi_ddiv>
 801567c:	f7eb fac8 	bl	8000c10 <__aeabi_d2f>
 8015680:	ee08 0a10 	vmov	s16, r0
	if(Value < 0){Value *= -1; sign = 1;}
 8015684:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801568c:	bf48      	it	mi
 801568e:	eeb1 8a48 	vnegmi.f32	s16, s16
	sprintf (buffer, "%.2f", Value);
 8015692:	ee18 0a10 	vmov	r0, s16
	if(Value < 0){Value *= -1; sign = 1;}
 8015696:	bf48      	it	mi
 8015698:	f04f 0801 	movmi.w	r8, #1
	sprintf (buffer, "%.2f", Value);
 801569c:	f7ea ff6c 	bl	8000578 <__aeabi_f2d>
 80156a0:	4602      	mov	r2, r0
 80156a2:	460b      	mov	r3, r1
 80156a4:	a803      	add	r0, sp, #12
 80156a6:	4929      	ldr	r1, [pc, #164]	; (801574c <GUI_Text_deltaE_Measure+0x200>)
 80156a8:	f00a ffb2 	bl	8020610 <sprintf>
	uint32_t dec = 10;
 80156ac:	220a      	movs	r2, #10
	sprintf (buffer, "%.2f", Value);
 80156ae:	2304      	movs	r3, #4
		if((Value/(dec)) >= 1.0)
 80156b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80156b4:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80156b6:	ee07 2a10 	vmov	s14, r2
 80156ba:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80156be:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80156c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80156c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ca:	db04      	blt.n	80156d6 <GUI_Text_deltaE_Measure+0x18a>
			delta_pos-=23;
 80156cc:	3e17      	subs	r6, #23
			number++;
 80156ce:	3701      	adds	r7, #1
			dec *= 10;
 80156d0:	434a      	muls	r2, r1
			delta_pos-=23;
 80156d2:	b2f6      	uxtb	r6, r6
			number++;
 80156d4:	b2ff      	uxtb	r7, r7
 80156d6:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80156d8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80156dc:	d1eb      	bne.n	80156b6 <GUI_Text_deltaE_Measure+0x16a>
	if(number < old_deltaE )
 80156de:	4b1c      	ldr	r3, [pc, #112]	; (8015750 <GUI_Text_deltaE_Measure+0x204>)
 80156e0:	781a      	ldrb	r2, [r3, #0]
 80156e2:	42ba      	cmp	r2, r7
 80156e4:	4699      	mov	r9, r3
 80156e6:	d90d      	bls.n	8015704 <GUI_Text_deltaE_Measure+0x1b8>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80156e8:	2163      	movs	r1, #99	; 0x63
 80156ea:	f105 0319 	add.w	r3, r5, #25
 80156ee:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80156f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80156f6:	9100      	str	r1, [sp, #0]
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	b292      	uxth	r2, r2
 80156fc:	4629      	mov	r1, r5
 80156fe:	b280      	uxth	r0, r0
 8015700:	f007 f91d 	bl	801c93e <TFT_FillRectangle>
	old_deltaE = number;
 8015704:	f889 7000 	strb.w	r7, [r9]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}
 8015708:	f1b8 0f00 	cmp.w	r8, #0
 801570c:	d007      	beq.n	801571e <GUI_Text_deltaE_Measure+0x1d2>
 801570e:	f1a4 0012 	sub.w	r0, r4, #18
 8015712:	4430      	add	r0, r6
 8015714:	222d      	movs	r2, #45	; 0x2d
 8015716:	4629      	mov	r1, r5
 8015718:	b280      	uxth	r0, r0
 801571a:	f007 fc03 	bl	801cf24 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801571e:	19a0      	adds	r0, r4, r6
 8015720:	2303      	movs	r3, #3
 8015722:	aa03      	add	r2, sp, #12
 8015724:	4629      	mov	r1, r5
 8015726:	b280      	uxth	r0, r0
 8015728:	f007 fc54 	bl	801cfd4 <TFT_DisplayString>
 801572c:	e752      	b.n	80155d4 <GUI_Text_deltaE_Measure+0x88>
 801572e:	bf00      	nop
 8015730:	2000022a 	.word	0x2000022a
 8015734:	2000573d 	.word	0x2000573d
 8015738:	20005701 	.word	0x20005701
 801573c:	200001f0 	.word	0x200001f0
 8015740:	200001b0 	.word	0x200001b0
 8015744:	200001e8 	.word	0x200001e8
 8015748:	40240000 	.word	0x40240000
 801574c:	080320ea 	.word	0x080320ea
 8015750:	2000022f 	.word	0x2000022f

08015754 <GUI_Text_EbEr_Measure>:
uint8_t old_num_EB = 10, old_num_ER = 10, old_nan_EBER = 0;
void GUI_Text_EbEr_Measure(uint16_t X, uint16_t Y, float ValueEB, float ValueER, uint8_t nope, uint8_t grey)
{
 8015754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015758:	ed2d 8b04 	vpush	{d8-d9}
 801575c:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 801575e:	4bb6      	ldr	r3, [pc, #728]	; (8015a38 <GUI_Text_EbEr_Measure+0x2e4>)
 8015760:	4eb6      	ldr	r6, [pc, #728]	; (8015a3c <GUI_Text_EbEr_Measure+0x2e8>)
{
 8015762:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8015764:	781a      	ldrb	r2, [r3, #0]
 8015766:	4bb6      	ldr	r3, [pc, #728]	; (8015a40 <GUI_Text_EbEr_Measure+0x2ec>)
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	429a      	cmp	r2, r3
{
 801576c:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 801576e:	bf1c      	itt	ne
 8015770:	2300      	movne	r3, #0
 8015772:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8015774:	2300      	movs	r3, #0
 8015776:	9303      	str	r3, [sp, #12]
 8015778:	9304      	str	r3, [sp, #16]
 801577a:	f88d 3014 	strb.w	r3, [sp, #20]
{
 801577e:	4605      	mov	r5, r0
 8015780:	460c      	mov	r4, r1
 8015782:	eef0 8a40 	vmov.f32	s17, s0
 8015786:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_EBER){
 801578a:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 801578c:	f1b8 0f00 	cmp.w	r8, #0
 8015790:	d06f      	beq.n	8015872 <GUI_Text_EbEr_Measure+0x11e>
			if(!old_nan_EBER){
 8015792:	2b00      	cmp	r3, #0
 8015794:	d140      	bne.n	8015818 <GUI_Text_EbEr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 8015796:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801579a:	f007 faff 	bl	801cd9c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801579e:	2063      	movs	r0, #99	; 0x63
 80157a0:	f007 fb02 	bl	801cda8 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80157a4:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 80157a8:	48a6      	ldr	r0, [pc, #664]	; (8015a44 <GUI_Text_EbEr_Measure+0x2f0>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80157aa:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 80157ae:	f007 faef 	bl	801cd90 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80157b2:	b2bf      	uxth	r7, r7
 80157b4:	fa1f f989 	uxth.w	r9, r9
 80157b8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80157bc:	f104 031a 	add.w	r3, r4, #26
 80157c0:	4638      	mov	r0, r7
 80157c2:	b29b      	uxth	r3, r3
 80157c4:	464a      	mov	r2, r9
 80157c6:	4621      	mov	r1, r4
 80157c8:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 80157cc:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80157d0:	f007 f8b5 	bl	801c93e <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 80157d4:	fa1f f888 	uxth.w	r8, r8
 80157d8:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 80157dc:	4638      	mov	r0, r7
 80157de:	b29b      	uxth	r3, r3
 80157e0:	464a      	mov	r2, r9
 80157e2:	4641      	mov	r1, r8
 80157e4:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80157e8:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 80157ec:	f007 f8a7 	bl	801c93e <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80157f0:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 80157f2:	232d      	movs	r3, #45	; 0x2d
 80157f4:	f88d 300c 	strb.w	r3, [sp, #12]
 80157f8:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80157fc:	aa03      	add	r2, sp, #12
 80157fe:	2303      	movs	r3, #3
 8015800:	4621      	mov	r1, r4
 8015802:	4638      	mov	r0, r7
 8015804:	f007 fbe6 	bl	801cfd4 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015808:	2303      	movs	r3, #3
 801580a:	aa03      	add	r2, sp, #12
 801580c:	4641      	mov	r1, r8
 801580e:	4638      	mov	r0, r7
 8015810:	f007 fbe0 	bl	801cfd4 <TFT_DisplayString>
				old_nan_EBER = 1;
 8015814:	2301      	movs	r3, #1
 8015816:	7033      	strb	r3, [r6, #0]
	old_num_ER = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8015818:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801581c:	f007 fabe 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8015820:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8015824:	4888      	ldr	r0, [pc, #544]	; (8015a48 <GUI_Text_EbEr_Measure+0x2f4>)
 8015826:	f007 fab3 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 801582a:	b2b6      	uxth	r6, r6
 801582c:	f104 010c 	add.w	r1, r4, #12
 8015830:	4630      	mov	r0, r6
 8015832:	2242      	movs	r2, #66	; 0x42
 8015834:	b289      	uxth	r1, r1
 8015836:	f007 fb75 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 801583a:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 801583e:	2252      	movs	r2, #82	; 0x52
 8015840:	b289      	uxth	r1, r1
 8015842:	4630      	mov	r0, r6
 8015844:	f007 fb6e 	bl	801cf24 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015848:	4880      	ldr	r0, [pc, #512]	; (8015a4c <GUI_Text_EbEr_Measure+0x2f8>)
 801584a:	f007 faa1 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 801584e:	1ca1      	adds	r1, r4, #2
 8015850:	4628      	mov	r0, r5
 8015852:	2224      	movs	r2, #36	; 0x24
 8015854:	b289      	uxth	r1, r1
 8015856:	f007 fb65 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'E'-33);
 801585a:	f104 0125 	add.w	r1, r4, #37	; 0x25
 801585e:	2224      	movs	r2, #36	; 0x24
 8015860:	b289      	uxth	r1, r1
 8015862:	4628      	mov	r0, r5
 8015864:	f007 fb5e 	bl	801cf24 <TFT_DrawChar>
}
 8015868:	b007      	add	sp, #28
 801586a:	ecbd 8b04 	vpop	{d8-d9}
 801586e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_EBER){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015872:	b1eb      	cbz	r3, 80158b0 <GUI_Text_EbEr_Measure+0x15c>
 8015874:	f100 0728 	add.w	r7, r0, #40	; 0x28
 8015878:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 801587c:	f101 031a 	add.w	r3, r1, #26
 8015880:	b2bf      	uxth	r7, r7
 8015882:	fa1f f989 	uxth.w	r9, r9
 8015886:	f04f 0b63 	mov.w	fp, #99	; 0x63
 801588a:	b29b      	uxth	r3, r3
 801588c:	464a      	mov	r2, r9
 801588e:	4638      	mov	r0, r7
 8015890:	f8cd b000 	str.w	fp, [sp]
 8015894:	f007 f853 	bl	801c93e <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8015898:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801589c:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80158a0:	f8cd b000 	str.w	fp, [sp]
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	464a      	mov	r2, r9
 80158a8:	b289      	uxth	r1, r1
 80158aa:	4638      	mov	r0, r7
 80158ac:	f007 f847 	bl	801c93e <TFT_FillRectangle>
	ValueEB = floor(ValueEB*100)/100.0;
 80158b0:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8015a50 <GUI_Text_EbEr_Measure+0x2fc>
 80158b4:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_EBER = 0;
 80158b8:	2700      	movs	r7, #0
	ValueEB = floor(ValueEB*100)/100.0;
 80158ba:	ee17 0a90 	vmov	r0, s15
	old_nan_EBER = 0;
 80158be:	7037      	strb	r7, [r6, #0]
	ValueEB = floor(ValueEB*100)/100.0;
 80158c0:	f7ea fe5a 	bl	8000578 <__aeabi_f2d>
 80158c4:	ec41 0b10 	vmov	d0, r0, r1
 80158c8:	f00d fe5e 	bl	8023588 <floor>
 80158cc:	2200      	movs	r2, #0
 80158ce:	4b61      	ldr	r3, [pc, #388]	; (8015a54 <GUI_Text_EbEr_Measure+0x300>)
 80158d0:	ec51 0b10 	vmov	r0, r1, d0
 80158d4:	f7ea ffce 	bl	8000874 <__aeabi_ddiv>
 80158d8:	f7eb f99a 	bl	8000c10 <__aeabi_d2f>
	ValueER = floor(ValueER*100)/100.0;
 80158dc:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueEB = floor(ValueEB*100)/100.0;
 80158e0:	ee08 0a90 	vmov	s17, r0
	ValueER = floor(ValueER*100)/100.0;
 80158e4:	ee17 0a90 	vmov	r0, s15
 80158e8:	f7ea fe46 	bl	8000578 <__aeabi_f2d>
 80158ec:	ec41 0b10 	vmov	d0, r0, r1
 80158f0:	f00d fe4a 	bl	8023588 <floor>
 80158f4:	2200      	movs	r2, #0
 80158f6:	ec51 0b10 	vmov	r0, r1, d0
 80158fa:	4b56      	ldr	r3, [pc, #344]	; (8015a54 <GUI_Text_EbEr_Measure+0x300>)
 80158fc:	f7ea ffba 	bl	8000874 <__aeabi_ddiv>
 8015900:	f7eb f986 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015904:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueER = floor(ValueER*100)/100.0;
 8015908:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801590c:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015910:	45ba      	cmp	sl, r7
 8015912:	bf08      	it	eq
 8015914:	4618      	moveq	r0, r3
 8015916:	f007 fa41 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801591a:	2063      	movs	r0, #99	; 0x63
 801591c:	f007 fa44 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015920:	4848      	ldr	r0, [pc, #288]	; (8015a44 <GUI_Text_EbEr_Measure+0x2f0>)
 8015922:	f007 fa35 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueEB);
 8015926:	ee18 0a90 	vmov	r0, s17
 801592a:	f7ea fe25 	bl	8000578 <__aeabi_f2d>
 801592e:	4602      	mov	r2, r0
 8015930:	460b      	mov	r3, r1
 8015932:	a803      	add	r0, sp, #12
 8015934:	4948      	ldr	r1, [pc, #288]	; (8015a58 <GUI_Text_EbEr_Measure+0x304>)
 8015936:	f00a fe6b 	bl	8020610 <sprintf>
	uint32_t dec = 10;
 801593a:	f04f 090a 	mov.w	r9, #10
		if((ValueEB/(dec)) >= 1.0)
 801593e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueEB);
 8015942:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8015944:	2696      	movs	r6, #150	; 0x96
 8015946:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 801594a:	464a      	mov	r2, r9
		if((ValueEB/(dec)) >= 1.0)
 801594c:	ee07 9a10 	vmov	s14, r9
 8015950:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015954:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8015958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801595c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015960:	db05      	blt.n	801596e <GUI_Text_EbEr_Measure+0x21a>
			delta_pos-=23;
 8015962:	3e17      	subs	r6, #23
			number++;
 8015964:	3701      	adds	r7, #1
			dec *= 10;
 8015966:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 801596a:	b2f6      	uxtb	r6, r6
			number++;
 801596c:	b2ff      	uxtb	r7, r7
 801596e:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015970:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015974:	d1ea      	bne.n	801594c <GUI_Text_EbEr_Measure+0x1f8>
	if(number < old_num_EB )
 8015976:	4b39      	ldr	r3, [pc, #228]	; (8015a5c <GUI_Text_EbEr_Measure+0x308>)
 8015978:	781a      	ldrb	r2, [r3, #0]
 801597a:	42ba      	cmp	r2, r7
 801597c:	469a      	mov	sl, r3
 801597e:	d90d      	bls.n	801599c <GUI_Text_EbEr_Measure+0x248>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015980:	2163      	movs	r1, #99	; 0x63
 8015982:	f104 0319 	add.w	r3, r4, #25
 8015986:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801598a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801598e:	9100      	str	r1, [sp, #0]
 8015990:	b29b      	uxth	r3, r3
 8015992:	b292      	uxth	r2, r2
 8015994:	4621      	mov	r1, r4
 8015996:	b280      	uxth	r0, r0
 8015998:	f006 ffd1 	bl	801c93e <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801599c:	19a8      	adds	r0, r5, r6
 801599e:	2303      	movs	r3, #3
 80159a0:	aa03      	add	r2, sp, #12
 80159a2:	4621      	mov	r1, r4
 80159a4:	b280      	uxth	r0, r0
	old_num_EB = number;
 80159a6:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80159aa:	f007 fb13 	bl	801cfd4 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueER);
 80159ae:	ee18 0a10 	vmov	r0, s16
 80159b2:	f7ea fde1 	bl	8000578 <__aeabi_f2d>
 80159b6:	4602      	mov	r2, r0
 80159b8:	460b      	mov	r3, r1
 80159ba:	a803      	add	r0, sp, #12
 80159bc:	4926      	ldr	r1, [pc, #152]	; (8015a58 <GUI_Text_EbEr_Measure+0x304>)
 80159be:	f00a fe27 	bl	8020610 <sprintf>
 80159c2:	2304      	movs	r3, #4
			dec *= 10;
 80159c4:	220a      	movs	r2, #10
		if((ValueER/(dec)) >= 1.0)
 80159c6:	ee07 9a90 	vmov	s15, r9
 80159ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80159ce:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80159d2:	eef4 7ac9 	vcmpe.f32	s15, s18
 80159d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159da:	db07      	blt.n	80159ec <GUI_Text_EbEr_Measure+0x298>
			delta_pos-=23;
 80159dc:	3e17      	subs	r6, #23
			number++;
 80159de:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80159e2:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 80159e6:	b2f6      	uxtb	r6, r6
			number++;
 80159e8:	fa5f f888 	uxtb.w	r8, r8
 80159ec:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 80159ee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80159f2:	d1e8      	bne.n	80159c6 <GUI_Text_EbEr_Measure+0x272>
	if(number < old_num_ER )
 80159f4:	4f1a      	ldr	r7, [pc, #104]	; (8015a60 <GUI_Text_EbEr_Measure+0x30c>)
 80159f6:	783b      	ldrb	r3, [r7, #0]
 80159f8:	4543      	cmp	r3, r8
 80159fa:	d911      	bls.n	8015a20 <GUI_Text_EbEr_Measure+0x2cc>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 80159fc:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015a00:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015a04:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015a08:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015a0c:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015a10:	f8cd e000 	str.w	lr, [sp]
 8015a14:	b29b      	uxth	r3, r3
 8015a16:	b292      	uxth	r2, r2
 8015a18:	b289      	uxth	r1, r1
 8015a1a:	b280      	uxth	r0, r0
 8015a1c:	f006 ff8f 	bl	801c93e <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015a20:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015a24:	19a8      	adds	r0, r5, r6
 8015a26:	2303      	movs	r3, #3
 8015a28:	aa03      	add	r2, sp, #12
 8015a2a:	b289      	uxth	r1, r1
 8015a2c:	b280      	uxth	r0, r0
	old_num_ER = number;
 8015a2e:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015a32:	f007 facf 	bl	801cfd4 <TFT_DisplayString>
 8015a36:	e6ef      	b.n	8015818 <GUI_Text_EbEr_Measure+0xc4>
 8015a38:	2000022a 	.word	0x2000022a
 8015a3c:	20005734 	.word	0x20005734
 8015a40:	20005701 	.word	0x20005701
 8015a44:	200001f0 	.word	0x200001f0
 8015a48:	200001b0 	.word	0x200001b0
 8015a4c:	200001e8 	.word	0x200001e8
 8015a50:	42c80000 	.word	0x42c80000
 8015a54:	40590000 	.word	0x40590000
 8015a58:	080320ea 	.word	0x080320ea
 8015a5c:	2000023f 	.word	0x2000023f
 8015a60:	20000240 	.word	0x20000240

08015a64 <GUI_Text_LbLr_Measure>:
uint8_t old_num_LB = 10, old_num_LR = 10, old_nan_LBLR = 0;
void GUI_Text_LbLr_Measure(uint16_t X, uint16_t Y, float ValueLB, float ValueLR, uint8_t nope, uint8_t grey)
{
 8015a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a68:	ed2d 8b04 	vpush	{d8-d9}
 8015a6c:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 8015a6e:	4bb8      	ldr	r3, [pc, #736]	; (8015d50 <GUI_Text_LbLr_Measure+0x2ec>)
 8015a70:	4eb8      	ldr	r6, [pc, #736]	; (8015d54 <GUI_Text_LbLr_Measure+0x2f0>)
{
 8015a72:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 8015a74:	781a      	ldrb	r2, [r3, #0]
 8015a76:	4bb8      	ldr	r3, [pc, #736]	; (8015d58 <GUI_Text_LbLr_Measure+0x2f4>)
 8015a78:	781b      	ldrb	r3, [r3, #0]
 8015a7a:	429a      	cmp	r2, r3
{
 8015a7c:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 8015a7e:	bf1c      	itt	ne
 8015a80:	2300      	movne	r3, #0
 8015a82:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8015a84:	2300      	movs	r3, #0
 8015a86:	9303      	str	r3, [sp, #12]
 8015a88:	9304      	str	r3, [sp, #16]
 8015a8a:	f88d 3014 	strb.w	r3, [sp, #20]
{
 8015a8e:	4605      	mov	r5, r0
 8015a90:	460c      	mov	r4, r1
 8015a92:	eef0 8a40 	vmov.f32	s17, s0
 8015a96:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	if(nope) 
		{	
			if(!old_nan_LBLR){
 8015a9a:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8015a9c:	f1b8 0f00 	cmp.w	r8, #0
 8015aa0:	d072      	beq.n	8015b88 <GUI_Text_LbLr_Measure+0x124>
			if(!old_nan_LBLR){
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d140      	bne.n	8015b28 <GUI_Text_LbLr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 8015aa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015aaa:	f007 f977 	bl	801cd9c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015aae:	2063      	movs	r0, #99	; 0x63
 8015ab0:	f007 f97a 	bl	801cda8 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015ab4:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8015ab8:	48a8      	ldr	r0, [pc, #672]	; (8015d5c <GUI_Text_LbLr_Measure+0x2f8>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015aba:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 8015abe:	f007 f967 	bl	801cd90 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015ac2:	b2bf      	uxth	r7, r7
 8015ac4:	fa1f f989 	uxth.w	r9, r9
 8015ac8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8015acc:	f104 031a 	add.w	r3, r4, #26
 8015ad0:	4638      	mov	r0, r7
 8015ad2:	b29b      	uxth	r3, r3
 8015ad4:	464a      	mov	r2, r9
 8015ad6:	4621      	mov	r1, r4
 8015ad8:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015adc:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015ae0:	f006 ff2d 	bl	801c93e <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015ae4:	fa1f f888 	uxth.w	r8, r8
 8015ae8:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015aec:	4638      	mov	r0, r7
 8015aee:	b29b      	uxth	r3, r3
 8015af0:	464a      	mov	r2, r9
 8015af2:	4641      	mov	r1, r8
 8015af4:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015af8:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015afc:	f006 ff1f 	bl	801c93e <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015b00:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8015b02:	232d      	movs	r3, #45	; 0x2d
 8015b04:	f88d 300c 	strb.w	r3, [sp, #12]
 8015b08:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015b0c:	aa03      	add	r2, sp, #12
 8015b0e:	2303      	movs	r3, #3
 8015b10:	4621      	mov	r1, r4
 8015b12:	4638      	mov	r0, r7
 8015b14:	f007 fa5e 	bl	801cfd4 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015b18:	2303      	movs	r3, #3
 8015b1a:	aa03      	add	r2, sp, #12
 8015b1c:	4641      	mov	r1, r8
 8015b1e:	4638      	mov	r0, r7
 8015b20:	f007 fa58 	bl	801cfd4 <TFT_DisplayString>
				old_nan_LBLR = 1;
 8015b24:	2301      	movs	r3, #1
 8015b26:	7033      	strb	r3, [r6, #0]
	old_num_LR = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetFont(&Font26EN_arch_digit);
 8015b28:	488c      	ldr	r0, [pc, #560]	; (8015d5c <GUI_Text_LbLr_Measure+0x2f8>)
 8015b2a:	f007 f931 	bl	801cd90 <TFT_SetFont>

	TFT_SetTextColor(TFT_White);
 8015b2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015b32:	f007 f933 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8015b36:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8015b3a:	4889      	ldr	r0, [pc, #548]	; (8015d60 <GUI_Text_LbLr_Measure+0x2fc>)
 8015b3c:	f007 f928 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8015b40:	b2b6      	uxth	r6, r6
 8015b42:	f104 010c 	add.w	r1, r4, #12
 8015b46:	4630      	mov	r0, r6
 8015b48:	2242      	movs	r2, #66	; 0x42
 8015b4a:	b289      	uxth	r1, r1
 8015b4c:	f007 f9ea 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8015b50:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8015b54:	2252      	movs	r2, #82	; 0x52
 8015b56:	b289      	uxth	r1, r1
 8015b58:	4630      	mov	r0, r6
 8015b5a:	f007 f9e3 	bl	801cf24 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015b5e:	4881      	ldr	r0, [pc, #516]	; (8015d64 <GUI_Text_LbLr_Measure+0x300>)
 8015b60:	f007 f916 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8015b64:	1ca1      	adds	r1, r4, #2
 8015b66:	4628      	mov	r0, r5
 8015b68:	222b      	movs	r2, #43	; 0x2b
 8015b6a:	b289      	uxth	r1, r1
 8015b6c:	f007 f9da 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'L'-33);
 8015b70:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8015b74:	222b      	movs	r2, #43	; 0x2b
 8015b76:	b289      	uxth	r1, r1
 8015b78:	4628      	mov	r0, r5
 8015b7a:	f007 f9d3 	bl	801cf24 <TFT_DrawChar>
}
 8015b7e:	b007      	add	sp, #28
 8015b80:	ecbd 8b04 	vpop	{d8-d9}
 8015b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(old_nan_LBLR){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015b88:	b1eb      	cbz	r3, 8015bc6 <GUI_Text_LbLr_Measure+0x162>
 8015b8a:	f100 0728 	add.w	r7, r0, #40	; 0x28
 8015b8e:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 8015b92:	f101 031a 	add.w	r3, r1, #26
 8015b96:	b2bf      	uxth	r7, r7
 8015b98:	fa1f f989 	uxth.w	r9, r9
 8015b9c:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8015ba0:	b29b      	uxth	r3, r3
 8015ba2:	464a      	mov	r2, r9
 8015ba4:	4638      	mov	r0, r7
 8015ba6:	f8cd b000 	str.w	fp, [sp]
 8015baa:	f006 fec8 	bl	801c93e <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8015bae:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015bb2:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015bb6:	f8cd b000 	str.w	fp, [sp]
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	464a      	mov	r2, r9
 8015bbe:	b289      	uxth	r1, r1
 8015bc0:	4638      	mov	r0, r7
 8015bc2:	f006 febc 	bl	801c93e <TFT_FillRectangle>
	ValueLB = floor(ValueLB*100)/100.0;
 8015bc6:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8015d68 <GUI_Text_LbLr_Measure+0x304>
 8015bca:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_LBLR = 0;
 8015bce:	2700      	movs	r7, #0
	ValueLB = floor(ValueLB*100)/100.0;
 8015bd0:	ee17 0a90 	vmov	r0, s15
	old_nan_LBLR = 0;
 8015bd4:	7037      	strb	r7, [r6, #0]
	ValueLB = floor(ValueLB*100)/100.0;
 8015bd6:	f7ea fccf 	bl	8000578 <__aeabi_f2d>
 8015bda:	ec41 0b10 	vmov	d0, r0, r1
 8015bde:	f00d fcd3 	bl	8023588 <floor>
 8015be2:	2200      	movs	r2, #0
 8015be4:	4b61      	ldr	r3, [pc, #388]	; (8015d6c <GUI_Text_LbLr_Measure+0x308>)
 8015be6:	ec51 0b10 	vmov	r0, r1, d0
 8015bea:	f7ea fe43 	bl	8000874 <__aeabi_ddiv>
 8015bee:	f7eb f80f 	bl	8000c10 <__aeabi_d2f>
	ValueLR = floor(ValueLR*100)/100.0;
 8015bf2:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueLB = floor(ValueLB*100)/100.0;
 8015bf6:	ee08 0a90 	vmov	s17, r0
	ValueLR = floor(ValueLR*100)/100.0;
 8015bfa:	ee17 0a90 	vmov	r0, s15
 8015bfe:	f7ea fcbb 	bl	8000578 <__aeabi_f2d>
 8015c02:	ec41 0b10 	vmov	d0, r0, r1
 8015c06:	f00d fcbf 	bl	8023588 <floor>
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	ec51 0b10 	vmov	r0, r1, d0
 8015c10:	4b56      	ldr	r3, [pc, #344]	; (8015d6c <GUI_Text_LbLr_Measure+0x308>)
 8015c12:	f7ea fe2f 	bl	8000874 <__aeabi_ddiv>
 8015c16:	f7ea fffb 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueLR = floor(ValueLR*100)/100.0;
 8015c1e:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015c22:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015c26:	45ba      	cmp	sl, r7
 8015c28:	bf08      	it	eq
 8015c2a:	4618      	moveq	r0, r3
 8015c2c:	f007 f8b6 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015c30:	2063      	movs	r0, #99	; 0x63
 8015c32:	f007 f8b9 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015c36:	4849      	ldr	r0, [pc, #292]	; (8015d5c <GUI_Text_LbLr_Measure+0x2f8>)
 8015c38:	f007 f8aa 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueLB);
 8015c3c:	ee18 0a90 	vmov	r0, s17
 8015c40:	f7ea fc9a 	bl	8000578 <__aeabi_f2d>
 8015c44:	4602      	mov	r2, r0
 8015c46:	460b      	mov	r3, r1
 8015c48:	a803      	add	r0, sp, #12
 8015c4a:	4949      	ldr	r1, [pc, #292]	; (8015d70 <GUI_Text_LbLr_Measure+0x30c>)
 8015c4c:	f00a fce0 	bl	8020610 <sprintf>
	uint32_t dec = 10;
 8015c50:	f04f 090a 	mov.w	r9, #10
		if((ValueLB/(dec)) >= 1.0)
 8015c54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueLB);
 8015c58:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8015c5a:	2696      	movs	r6, #150	; 0x96
 8015c5c:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 8015c60:	464a      	mov	r2, r9
		if((ValueLB/(dec)) >= 1.0)
 8015c62:	ee07 9a10 	vmov	s14, r9
 8015c66:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015c6a:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8015c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c76:	db05      	blt.n	8015c84 <GUI_Text_LbLr_Measure+0x220>
			delta_pos-=23;
 8015c78:	3e17      	subs	r6, #23
			number++;
 8015c7a:	3701      	adds	r7, #1
			dec *= 10;
 8015c7c:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015c80:	b2f6      	uxtb	r6, r6
			number++;
 8015c82:	b2ff      	uxtb	r7, r7
 8015c84:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015c86:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015c8a:	d1ea      	bne.n	8015c62 <GUI_Text_LbLr_Measure+0x1fe>
	if(number < old_num_LB )
 8015c8c:	4b39      	ldr	r3, [pc, #228]	; (8015d74 <GUI_Text_LbLr_Measure+0x310>)
 8015c8e:	781a      	ldrb	r2, [r3, #0]
 8015c90:	42ba      	cmp	r2, r7
 8015c92:	469a      	mov	sl, r3
 8015c94:	d90d      	bls.n	8015cb2 <GUI_Text_LbLr_Measure+0x24e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015c96:	2163      	movs	r1, #99	; 0x63
 8015c98:	f104 0319 	add.w	r3, r4, #25
 8015c9c:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015ca0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015ca4:	9100      	str	r1, [sp, #0]
 8015ca6:	b29b      	uxth	r3, r3
 8015ca8:	b292      	uxth	r2, r2
 8015caa:	4621      	mov	r1, r4
 8015cac:	b280      	uxth	r0, r0
 8015cae:	f006 fe46 	bl	801c93e <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015cb2:	19a8      	adds	r0, r5, r6
 8015cb4:	2303      	movs	r3, #3
 8015cb6:	aa03      	add	r2, sp, #12
 8015cb8:	4621      	mov	r1, r4
 8015cba:	b280      	uxth	r0, r0
	old_num_LB = number;
 8015cbc:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015cc0:	f007 f988 	bl	801cfd4 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueLR);
 8015cc4:	ee18 0a10 	vmov	r0, s16
 8015cc8:	f7ea fc56 	bl	8000578 <__aeabi_f2d>
 8015ccc:	4602      	mov	r2, r0
 8015cce:	460b      	mov	r3, r1
 8015cd0:	a803      	add	r0, sp, #12
 8015cd2:	4927      	ldr	r1, [pc, #156]	; (8015d70 <GUI_Text_LbLr_Measure+0x30c>)
 8015cd4:	f00a fc9c 	bl	8020610 <sprintf>
 8015cd8:	2304      	movs	r3, #4
			dec *= 10;
 8015cda:	220a      	movs	r2, #10
		if((ValueLR/(dec)) >= 1.0)
 8015cdc:	ee07 9a90 	vmov	s15, r9
 8015ce0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015ce4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015ce8:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf0:	db07      	blt.n	8015d02 <GUI_Text_LbLr_Measure+0x29e>
			delta_pos-=23;
 8015cf2:	3e17      	subs	r6, #23
			number++;
 8015cf4:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015cf8:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015cfc:	b2f6      	uxtb	r6, r6
			number++;
 8015cfe:	fa5f f888 	uxtb.w	r8, r8
 8015d02:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015d04:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015d08:	d1e8      	bne.n	8015cdc <GUI_Text_LbLr_Measure+0x278>
	if(number < old_num_LR )
 8015d0a:	4f1b      	ldr	r7, [pc, #108]	; (8015d78 <GUI_Text_LbLr_Measure+0x314>)
 8015d0c:	783b      	ldrb	r3, [r7, #0]
 8015d0e:	4543      	cmp	r3, r8
 8015d10:	d911      	bls.n	8015d36 <GUI_Text_LbLr_Measure+0x2d2>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8015d12:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015d16:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015d1a:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015d1e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015d22:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015d26:	f8cd e000 	str.w	lr, [sp]
 8015d2a:	b29b      	uxth	r3, r3
 8015d2c:	b292      	uxth	r2, r2
 8015d2e:	b289      	uxth	r1, r1
 8015d30:	b280      	uxth	r0, r0
 8015d32:	f006 fe04 	bl	801c93e <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015d36:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015d3a:	19a8      	adds	r0, r5, r6
 8015d3c:	2303      	movs	r3, #3
 8015d3e:	aa03      	add	r2, sp, #12
 8015d40:	b289      	uxth	r1, r1
 8015d42:	b280      	uxth	r0, r0
	old_num_LR = number;
 8015d44:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015d48:	f007 f944 	bl	801cfd4 <TFT_DisplayString>
 8015d4c:	e6ec      	b.n	8015b28 <GUI_Text_LbLr_Measure+0xc4>
 8015d4e:	bf00      	nop
 8015d50:	2000022a 	.word	0x2000022a
 8015d54:	20005737 	.word	0x20005737
 8015d58:	20005701 	.word	0x20005701
 8015d5c:	200001f0 	.word	0x200001f0
 8015d60:	200001b0 	.word	0x200001b0
 8015d64:	200001e8 	.word	0x200001e8
 8015d68:	42c80000 	.word	0x42c80000
 8015d6c:	40590000 	.word	0x40590000
 8015d70:	080320ea 	.word	0x080320ea
 8015d74:	20000242 	.word	0x20000242
 8015d78:	20000243 	.word	0x20000243

08015d7c <GUI_Text_S_P_Measure>:

uint8_t old_num_SP = 10, old_nan_SP = 0;
void GUI_Text_S_P_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{
 8015d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d80:	ed2d 8b02 	vpush	{d8}
 8015d84:	4616      	mov	r6, r2
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8015d86:	4a59      	ldr	r2, [pc, #356]	; (8015eec <GUI_Text_S_P_Measure+0x170>)
 8015d88:	4f59      	ldr	r7, [pc, #356]	; (8015ef0 <GUI_Text_S_P_Measure+0x174>)
{
 8015d8a:	460c      	mov	r4, r1
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8015d8c:	7811      	ldrb	r1, [r2, #0]
 8015d8e:	4a59      	ldr	r2, [pc, #356]	; (8015ef4 <GUI_Text_S_P_Measure+0x178>)
 8015d90:	7812      	ldrb	r2, [r2, #0]
 8015d92:	4291      	cmp	r1, r2
{
 8015d94:	b086      	sub	sp, #24
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8015d96:	bf1c      	itt	ne
 8015d98:	2200      	movne	r2, #0
 8015d9a:	703a      	strbne	r2, [r7, #0]
	char buffer[9] = {0};
 8015d9c:	2200      	movs	r2, #0
{
 8015d9e:	4605      	mov	r5, r0
 8015da0:	eeb0 8a40 	vmov.f32	s16, s0
	char buffer[9] = {0};
 8015da4:	9203      	str	r2, [sp, #12]
 8015da6:	9204      	str	r2, [sp, #16]
 8015da8:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 100, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 8015dac:	2e00      	cmp	r6, #0
 8015dae:	d04c      	beq.n	8015e4a <GUI_Text_S_P_Measure+0xce>
		{	
			if(!old_nan_SP){
 8015db0:	783b      	ldrb	r3, [r7, #0]
 8015db2:	bb33      	cbnz	r3, 8015e02 <GUI_Text_S_P_Measure+0x86>
				TFT_SetTextColor(TFT_White);
 8015db4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015db8:	f006 fff0 	bl	801cd9c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015dbc:	2063      	movs	r0, #99	; 0x63
 8015dbe:	f006 fff3 	bl	801cda8 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015dc2:	484d      	ldr	r0, [pc, #308]	; (8015ef8 <GUI_Text_S_P_Measure+0x17c>)
 8015dc4:	f006 ffe4 	bl	801cd90 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015dc8:	2163      	movs	r1, #99	; 0x63
 8015dca:	f104 031a 	add.w	r3, r4, #26
 8015dce:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8015dd2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015dd6:	9100      	str	r1, [sp, #0]
 8015dd8:	b29b      	uxth	r3, r3
 8015dda:	b292      	uxth	r2, r2
 8015ddc:	4621      	mov	r1, r4
 8015dde:	b280      	uxth	r0, r0
 8015de0:	f006 fdad 	bl	801c93e <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015de4:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015de6:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8015dea:	f88d 300c 	strb.w	r3, [sp, #12]
 8015dee:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015df2:	aa03      	add	r2, sp, #12
 8015df4:	2303      	movs	r3, #3
 8015df6:	4621      	mov	r1, r4
 8015df8:	b280      	uxth	r0, r0
 8015dfa:	f007 f8eb 	bl	801cfd4 <TFT_DisplayString>
				old_nan_SP = 1;
 8015dfe:	2301      	movs	r3, #1
 8015e00:	703b      	strb	r3, [r7, #0]
	} 
	old_num_SP = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}	
	TFT_SetTextColor(TFT_White);
 8015e02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015e06:	f006 ffc9 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetFont(&Font26EN_arch_digit);
	TFT_DrawChar(X+22, Y+2, '/');
 8015e0a:	3402      	adds	r4, #2
	TFT_SetFont(&Font26EN_arch_digit);
 8015e0c:	483a      	ldr	r0, [pc, #232]	; (8015ef8 <GUI_Text_S_P_Measure+0x17c>)
 8015e0e:	f006 ffbf 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+22, Y+2, '/');
 8015e12:	b2a4      	uxth	r4, r4
 8015e14:	f105 0016 	add.w	r0, r5, #22
 8015e18:	4621      	mov	r1, r4
 8015e1a:	222f      	movs	r2, #47	; 0x2f
 8015e1c:	b280      	uxth	r0, r0
 8015e1e:	f007 f881 	bl	801cf24 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015e22:	4836      	ldr	r0, [pc, #216]	; (8015efc <GUI_Text_S_P_Measure+0x180>)
 8015e24:	f006 ffb4 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'S'-33);
 8015e28:	4621      	mov	r1, r4
 8015e2a:	4628      	mov	r0, r5
 8015e2c:	2232      	movs	r2, #50	; 0x32
 8015e2e:	f007 f879 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'P'-33);
 8015e32:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8015e36:	222f      	movs	r2, #47	; 0x2f
 8015e38:	4621      	mov	r1, r4
 8015e3a:	b280      	uxth	r0, r0
 8015e3c:	f007 f872 	bl	801cf24 <TFT_DrawChar>
}
 8015e40:	b006      	add	sp, #24
 8015e42:	ecbd 8b02 	vpop	{d8}
 8015e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015e4a:	f249 41d2 	movw	r1, #38098	; 0x94d2
 8015e4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	bf18      	it	ne
 8015e56:	4608      	movne	r0, r1
	old_nan_SP = 0;
 8015e58:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015e5a:	f006 ff9f 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015e5e:	2063      	movs	r0, #99	; 0x63
 8015e60:	f006 ffa2 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015e64:	4824      	ldr	r0, [pc, #144]	; (8015ef8 <GUI_Text_S_P_Measure+0x17c>)
 8015e66:	f006 ff93 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%.4f", Value);
 8015e6a:	ee18 0a10 	vmov	r0, s16
 8015e6e:	f7ea fb83 	bl	8000578 <__aeabi_f2d>
 8015e72:	4602      	mov	r2, r0
 8015e74:	460b      	mov	r3, r1
 8015e76:	a803      	add	r0, sp, #12
 8015e78:	4921      	ldr	r1, [pc, #132]	; (8015f00 <GUI_Text_S_P_Measure+0x184>)
 8015e7a:	f00a fbc9 	bl	8020610 <sprintf>
	uint32_t dec = 10;
 8015e7e:	220a      	movs	r2, #10
	sprintf (buffer, "%.4f", Value);
 8015e80:	2304      	movs	r3, #4
	uint8_t	delta_pos = 100, number = 0;
 8015e82:	2764      	movs	r7, #100	; 0x64
		if((Value/(dec)) >= 1.0)
 8015e84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8015e88:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015e8a:	ee07 2a10 	vmov	s14, r2
 8015e8e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015e92:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9e:	db04      	blt.n	8015eaa <GUI_Text_S_P_Measure+0x12e>
			delta_pos-=23;
 8015ea0:	3f17      	subs	r7, #23
			number++;
 8015ea2:	3601      	adds	r6, #1
			dec *= 10;
 8015ea4:	434a      	muls	r2, r1
			delta_pos-=23;
 8015ea6:	b2ff      	uxtb	r7, r7
			number++;
 8015ea8:	b2f6      	uxtb	r6, r6
 8015eaa:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015eac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015eb0:	d1eb      	bne.n	8015e8a <GUI_Text_S_P_Measure+0x10e>
	if(number < old_num_SP )
 8015eb2:	4b14      	ldr	r3, [pc, #80]	; (8015f04 <GUI_Text_S_P_Measure+0x188>)
 8015eb4:	781a      	ldrb	r2, [r3, #0]
 8015eb6:	42b2      	cmp	r2, r6
 8015eb8:	4698      	mov	r8, r3
 8015eba:	d90d      	bls.n	8015ed8 <GUI_Text_S_P_Measure+0x15c>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015ebc:	2163      	movs	r1, #99	; 0x63
 8015ebe:	f104 0319 	add.w	r3, r4, #25
 8015ec2:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015ec6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015eca:	9100      	str	r1, [sp, #0]
 8015ecc:	b29b      	uxth	r3, r3
 8015ece:	b292      	uxth	r2, r2
 8015ed0:	4621      	mov	r1, r4
 8015ed2:	b280      	uxth	r0, r0
 8015ed4:	f006 fd33 	bl	801c93e <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ed8:	19e8      	adds	r0, r5, r7
 8015eda:	2303      	movs	r3, #3
 8015edc:	aa03      	add	r2, sp, #12
 8015ede:	4621      	mov	r1, r4
 8015ee0:	b280      	uxth	r0, r0
	old_num_SP = number;
 8015ee2:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ee6:	f007 f875 	bl	801cfd4 <TFT_DisplayString>
 8015eea:	e78a      	b.n	8015e02 <GUI_Text_S_P_Measure+0x86>
 8015eec:	2000022a 	.word	0x2000022a
 8015ef0:	2000573c 	.word	0x2000573c
 8015ef4:	20005701 	.word	0x20005701
 8015ef8:	200001f0 	.word	0x200001f0
 8015efc:	200001e8 	.word	0x200001e8
 8015f00:	080320ef 	.word	0x080320ef
 8015f04:	20000244 	.word	0x20000244

08015f08 <GUI_Text_LAB_Measure>:

uint8_t old_num_L = 10, old_num_A = 10, old_num_B = 10, old_nan = 0;
void GUI_Text_LAB_Measure(uint16_t X, uint16_t Y, int16_t ValueL, int16_t ValueA, int16_t ValueB, uint8_t nope, uint8_t grey)
{
 8015f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f0c:	b089      	sub	sp, #36	; 0x24
 8015f0e:	461f      	mov	r7, r3
 8015f10:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8015f14:	9304      	str	r3, [sp, #16]
 8015f16:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015f1a:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
	uint8_t	delta_pos = 180, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(ValueA <= -431 || nope){
 8015f1c:	f517 7fd7 	cmn.w	r7, #430	; 0x1ae
	char buffer[5] = {0};
 8015f20:	f04f 0300 	mov.w	r3, #0
{
 8015f24:	4604      	mov	r4, r0
 8015f26:	460d      	mov	r5, r1
 8015f28:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8015f2a:	9306      	str	r3, [sp, #24]
 8015f2c:	f88d 301c 	strb.w	r3, [sp, #28]
	if(ValueA <= -431 || nope){
 8015f30:	db03      	blt.n	8015f3a <GUI_Text_LAB_Measure+0x32>
 8015f32:	9b03      	ldr	r3, [sp, #12]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	f000 80a9 	beq.w	801608c <GUI_Text_LAB_Measure+0x184>
		if(!old_nan){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8015f3a:	4b4e      	ldr	r3, [pc, #312]	; (8016074 <GUI_Text_LAB_Measure+0x16c>)
 8015f3c:	781a      	ldrb	r2, [r3, #0]
 8015f3e:	469a      	mov	sl, r3
 8015f40:	b96a      	cbnz	r2, 8015f5e <GUI_Text_LAB_Measure+0x56>
 8015f42:	2163      	movs	r1, #99	; 0x63
 8015f44:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8015f48:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015f4c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015f50:	9100      	str	r1, [sp, #0]
 8015f52:	b29b      	uxth	r3, r3
 8015f54:	b292      	uxth	r2, r2
 8015f56:	4629      	mov	r1, r5
 8015f58:	b280      	uxth	r0, r0
 8015f5a:	f006 fcf0 	bl	801c93e <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8015f5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015f62:	f006 ff1b 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015f66:	f104 0987 	add.w	r9, r4, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015f6a:	2063      	movs	r0, #99	; 0x63
 8015f6c:	f006 ff1c 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015f70:	fa1f f989 	uxth.w	r9, r9
 8015f74:	4840      	ldr	r0, [pc, #256]	; (8016078 <GUI_Text_LAB_Measure+0x170>)
 8015f76:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 8015f7a:	f006 ff09 	bl	801cd90 <TFT_SetFont>
 8015f7e:	fa1f f888 	uxth.w	r8, r8
 8015f82:	222d      	movs	r2, #45	; 0x2d
 8015f84:	4629      	mov	r1, r5
 8015f86:	4648      	mov	r0, r9
 8015f88:	f104 06b9 	add.w	r6, r4, #185	; 0xb9
 8015f8c:	f006 ffca 	bl	801cf24 <TFT_DrawChar>
 8015f90:	b2b6      	uxth	r6, r6
 8015f92:	2220      	movs	r2, #32
 8015f94:	4629      	mov	r1, r5
 8015f96:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015f98:	f105 0723 	add.w	r7, r5, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015f9c:	f006 ffc2 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015fa0:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015fa2:	222d      	movs	r2, #45	; 0x2d
 8015fa4:	4629      	mov	r1, r5
 8015fa6:	4630      	mov	r0, r6
 8015fa8:	f006 ffbc 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015fac:	4639      	mov	r1, r7
 8015fae:	222d      	movs	r2, #45	; 0x2d
 8015fb0:	4648      	mov	r0, r9
 8015fb2:	f006 ffb7 	bl	801cf24 <TFT_DrawChar>
 8015fb6:	4639      	mov	r1, r7
 8015fb8:	2220      	movs	r2, #32
 8015fba:	4640      	mov	r0, r8
 8015fbc:	f006 ffb2 	bl	801cf24 <TFT_DrawChar>
 8015fc0:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8015fc2:	f105 0746 	add.w	r7, r5, #70	; 0x46
 8015fc6:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015fc8:	222d      	movs	r2, #45	; 0x2d
 8015fca:	4630      	mov	r0, r6
 8015fcc:	f006 ffaa 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8015fd0:	222d      	movs	r2, #45	; 0x2d
 8015fd2:	4639      	mov	r1, r7
 8015fd4:	4648      	mov	r0, r9
 8015fd6:	f006 ffa5 	bl	801cf24 <TFT_DrawChar>
 8015fda:	2220      	movs	r2, #32
 8015fdc:	4639      	mov	r1, r7
 8015fde:	4640      	mov	r0, r8
 8015fe0:	f006 ffa0 	bl	801cf24 <TFT_DrawChar>
 8015fe4:	222d      	movs	r2, #45	; 0x2d
 8015fe6:	4639      	mov	r1, r7
 8015fe8:	4630      	mov	r0, r6
 8015fea:	f006 ff9b 	bl	801cf24 <TFT_DrawChar>
		old_nan = 1;
 8015fee:	2301      	movs	r3, #1
 8015ff0:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
		old_nan = 0;
	} 
	
	if(preGUI_screen_state != GUI_screen_state || GUI_screen_state == Color_Screen){
 8015ff4:	4b21      	ldr	r3, [pc, #132]	; (801607c <GUI_Text_LAB_Measure+0x174>)
 8015ff6:	781a      	ldrb	r2, [r3, #0]
 8015ff8:	4b21      	ldr	r3, [pc, #132]	; (8016080 <GUI_Text_LAB_Measure+0x178>)
 8015ffa:	781b      	ldrb	r3, [r3, #0]
 8015ffc:	4293      	cmp	r3, r2
 8015ffe:	d101      	bne.n	8016004 <GUI_Text_LAB_Measure+0xfc>
 8016000:	2b05      	cmp	r3, #5
 8016002:	d134      	bne.n	801606e <GUI_Text_LAB_Measure+0x166>
			TFT_SetTextColor(TFT_White);
 8016004:	f64f 70ff 	movw	r0, #65535	; 0xffff
			TFT_SetFont(&Font26EN_arch_digit);
			TFT_DrawChar(X+17, Y, '*');
 8016008:	f104 0611 	add.w	r6, r4, #17
			TFT_SetTextColor(TFT_White);
 801600c:	f006 fec6 	bl	801cd9c <TFT_SetTextColor>
			TFT_DrawChar(X+17, Y, '*');
 8016010:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_digit);
 8016012:	481c      	ldr	r0, [pc, #112]	; (8016084 <GUI_Text_LAB_Measure+0x17c>)
			TFT_DrawChar(X+17, Y+35, '*');
 8016014:	f105 0823 	add.w	r8, r5, #35	; 0x23
			TFT_SetFont(&Font26EN_arch_digit);
 8016018:	f006 feba 	bl	801cd90 <TFT_SetFont>
			TFT_DrawChar(X+17, Y+35, '*');
 801601c:	fa1f f888 	uxth.w	r8, r8
			TFT_DrawChar(X+17, Y, '*');
 8016020:	222a      	movs	r2, #42	; 0x2a
 8016022:	4629      	mov	r1, r5
 8016024:	4630      	mov	r0, r6
			TFT_DrawChar(X+17, Y+70, '*');
 8016026:	f105 0746 	add.w	r7, r5, #70	; 0x46
			TFT_DrawChar(X+17, Y, '*');
 801602a:	f006 ff7b 	bl	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 801602e:	b2bf      	uxth	r7, r7
			TFT_DrawChar(X+17, Y+35, '*');
 8016030:	222a      	movs	r2, #42	; 0x2a
 8016032:	4641      	mov	r1, r8
 8016034:	4630      	mov	r0, r6
 8016036:	f006 ff75 	bl	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 801603a:	222a      	movs	r2, #42	; 0x2a
 801603c:	4639      	mov	r1, r7
 801603e:	4630      	mov	r0, r6
 8016040:	f006 ff70 	bl	801cf24 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_big);
 8016044:	480c      	ldr	r0, [pc, #48]	; (8016078 <GUI_Text_LAB_Measure+0x170>)
 8016046:	f006 fea3 	bl	801cd90 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'L'-33);
 801604a:	222b      	movs	r2, #43	; 0x2b
 801604c:	4629      	mov	r1, r5
 801604e:	4620      	mov	r0, r4
 8016050:	f006 ff68 	bl	801cf24 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_small);
 8016054:	480c      	ldr	r0, [pc, #48]	; (8016088 <GUI_Text_LAB_Measure+0x180>)
 8016056:	f006 fe9b 	bl	801cd90 <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'a'-65);
 801605a:	2220      	movs	r2, #32
 801605c:	4641      	mov	r1, r8
 801605e:	4620      	mov	r0, r4
 8016060:	f006 ff60 	bl	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'b'-65);}
 8016064:	2221      	movs	r2, #33	; 0x21
 8016066:	4639      	mov	r1, r7
 8016068:	4620      	mov	r0, r4
 801606a:	f006 ff5b 	bl	801cf24 <TFT_DrawChar>
}	
 801606e:	b009      	add	sp, #36	; 0x24
 8016070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016074:	20005731 	.word	0x20005731
 8016078:	200001e8 	.word	0x200001e8
 801607c:	2000022a 	.word	0x2000022a
 8016080:	20005701 	.word	0x20005701
 8016084:	200001f0 	.word	0x200001f0
 8016088:	200001f8 	.word	0x200001f8
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801608c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8016090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016094:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8016098:	2800      	cmp	r0, #0
 801609a:	bf14      	ite	ne
 801609c:	4610      	movne	r0, r2
 801609e:	4618      	moveq	r0, r3
 80160a0:	f006 fe7c 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80160a4:	2063      	movs	r0, #99	; 0x63
 80160a6:	f006 fe7f 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80160aa:	488e      	ldr	r0, [pc, #568]	; (80162e4 <GUI_Text_LAB_Measure+0x3dc>)
 80160ac:	f006 fe70 	bl	801cd90 <TFT_SetFont>
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 80160b0:	f1b8 0f00 	cmp.w	r8, #0
 80160b4:	bfbd      	ittte	lt
 80160b6:	f1c8 0800 	rsblt	r8, r8, #0
 80160ba:	fa0f f888 	sxthlt.w	r8, r8
 80160be:	2301      	movlt	r3, #1
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 80160c0:	9b03      	ldrge	r3, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 80160c2:	4989      	ldr	r1, [pc, #548]	; (80162e8 <GUI_Text_LAB_Measure+0x3e0>)
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 80160c4:	9305      	str	r3, [sp, #20]
	sprintf (buffer, "%d", ValueL);
 80160c6:	4642      	mov	r2, r8
 80160c8:	a806      	add	r0, sp, #24
 80160ca:	f00a faa1 	bl	8020610 <sprintf>
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 80160ce:	f04f 0900 	mov.w	r9, #0
	sprintf (buffer, "%d", ValueL);
 80160d2:	f04f 0b04 	mov.w	fp, #4
	uint32_t dec = 10;
 80160d6:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 80160da:	26b4      	movs	r6, #180	; 0xb4
		if((ValueL/(dec)) >= 1.0)
 80160dc:	fbb8 f0fa 	udiv	r0, r8, sl
 80160e0:	f7ea fa28 	bl	8000534 <__aeabi_ui2d>
 80160e4:	2200      	movs	r2, #0
 80160e6:	4b81      	ldr	r3, [pc, #516]	; (80162ec <GUI_Text_LAB_Measure+0x3e4>)
 80160e8:	f7ea fd20 	bl	8000b2c <__aeabi_dcmpge>
 80160ec:	b140      	cbz	r0, 8016100 <GUI_Text_LAB_Measure+0x1f8>
			dec *= 10;
 80160ee:	230a      	movs	r3, #10
			delta_pos-=23;
 80160f0:	3e17      	subs	r6, #23
			number++;
 80160f2:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 80160f6:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80160fa:	b2f6      	uxtb	r6, r6
			number++;
 80160fc:	fa5f f989 	uxtb.w	r9, r9
 8016100:	f10b 3bff 	add.w	fp, fp, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8016104:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 8016108:	d1e8      	bne.n	80160dc <GUI_Text_LAB_Measure+0x1d4>
	if(number < old_num_L || old_nan == 1 )
 801610a:	4b79      	ldr	r3, [pc, #484]	; (80162f0 <GUI_Text_LAB_Measure+0x3e8>)
 801610c:	781a      	ldrb	r2, [r3, #0]
 801610e:	454a      	cmp	r2, r9
 8016110:	4698      	mov	r8, r3
 8016112:	d803      	bhi.n	801611c <GUI_Text_LAB_Measure+0x214>
 8016114:	4b77      	ldr	r3, [pc, #476]	; (80162f4 <GUI_Text_LAB_Measure+0x3ec>)
 8016116:	781b      	ldrb	r3, [r3, #0]
 8016118:	2b01      	cmp	r3, #1
 801611a:	d10d      	bne.n	8016138 <GUI_Text_LAB_Measure+0x230>
		TFT_FillRectangle(X+40, Y, X+250, Y+25, TFT_Black_Bkgr);
 801611c:	2163      	movs	r1, #99	; 0x63
 801611e:	f105 0319 	add.w	r3, r5, #25
 8016122:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8016126:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801612a:	9100      	str	r1, [sp, #0]
 801612c:	b29b      	uxth	r3, r3
 801612e:	b292      	uxth	r2, r2
 8016130:	4629      	mov	r1, r5
 8016132:	b280      	uxth	r0, r0
 8016134:	f006 fc03 	bl	801c93e <TFT_FillRectangle>
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8016138:	9b05      	ldr	r3, [sp, #20]
	old_num_L = number;
 801613a:	f888 9000 	strb.w	r9, [r8]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 801613e:	b13b      	cbz	r3, 8016150 <GUI_Text_LAB_Measure+0x248>
 8016140:	f1a4 0012 	sub.w	r0, r4, #18
 8016144:	4430      	add	r0, r6
 8016146:	222d      	movs	r2, #45	; 0x2d
 8016148:	4629      	mov	r1, r5
 801614a:	b280      	uxth	r0, r0
 801614c:	f006 feea 	bl	801cf24 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016150:	19a0      	adds	r0, r4, r6
 8016152:	2303      	movs	r3, #3
 8016154:	aa06      	add	r2, sp, #24
 8016156:	4629      	mov	r1, r5
 8016158:	b280      	uxth	r0, r0
 801615a:	f006 ff3b 	bl	801cfd4 <TFT_DisplayString>
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 801615e:	2f00      	cmp	r7, #0
 8016160:	bfbc      	itt	lt
 8016162:	427f      	neglt	r7, r7
 8016164:	b23f      	sxthlt	r7, r7
	TFT_SetFont(&Font26EN_arch_digit);
 8016166:	485f      	ldr	r0, [pc, #380]	; (80162e4 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 8016168:	bfb4      	ite	lt
 801616a:	f04f 0b01 	movlt.w	fp, #1
 801616e:	f04f 0b00 	movge.w	fp, #0
	TFT_SetFont(&Font26EN_arch_digit);
 8016172:	f006 fe0d 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%d", ValueA);
 8016176:	463a      	mov	r2, r7
 8016178:	495b      	ldr	r1, [pc, #364]	; (80162e8 <GUI_Text_LAB_Measure+0x3e0>)
 801617a:	a806      	add	r0, sp, #24
 801617c:	f00a fa48 	bl	8020610 <sprintf>
	number = 0;
 8016180:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueA);
 8016184:	f04f 0904 	mov.w	r9, #4
	dec = 10;
 8016188:	f04f 0a0a 	mov.w	sl, #10
	delta_pos = 180;
 801618c:	26b4      	movs	r6, #180	; 0xb4
		if((ValueA/(dec)) >= 1.0)
 801618e:	fbb7 f0fa 	udiv	r0, r7, sl
 8016192:	f7ea f9cf 	bl	8000534 <__aeabi_ui2d>
 8016196:	2200      	movs	r2, #0
 8016198:	4b54      	ldr	r3, [pc, #336]	; (80162ec <GUI_Text_LAB_Measure+0x3e4>)
 801619a:	f7ea fcc7 	bl	8000b2c <__aeabi_dcmpge>
 801619e:	b140      	cbz	r0, 80161b2 <GUI_Text_LAB_Measure+0x2aa>
			dec *= 10;
 80161a0:	230a      	movs	r3, #10
			delta_pos-=23;
 80161a2:	3e17      	subs	r6, #23
			number++;
 80161a4:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80161a8:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80161ac:	b2f6      	uxtb	r6, r6
			number++;
 80161ae:	fa5f f888 	uxtb.w	r8, r8
 80161b2:	f109 39ff 	add.w	r9, r9, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 80161b6:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 80161ba:	d1e8      	bne.n	801618e <GUI_Text_LAB_Measure+0x286>
	if(number < old_num_A || old_nan == 1 )
 80161bc:	4b4e      	ldr	r3, [pc, #312]	; (80162f8 <GUI_Text_LAB_Measure+0x3f0>)
 80161be:	781b      	ldrb	r3, [r3, #0]
 80161c0:	4543      	cmp	r3, r8
 80161c2:	f105 0723 	add.w	r7, r5, #35	; 0x23
 80161c6:	d803      	bhi.n	80161d0 <GUI_Text_LAB_Measure+0x2c8>
 80161c8:	4b4a      	ldr	r3, [pc, #296]	; (80162f4 <GUI_Text_LAB_Measure+0x3ec>)
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	2b01      	cmp	r3, #1
 80161ce:	d10d      	bne.n	80161ec <GUI_Text_LAB_Measure+0x2e4>
		TFT_FillRectangle(X+40, Y+35, X+250, Y+62, TFT_Black_Bkgr);
 80161d0:	2163      	movs	r1, #99	; 0x63
 80161d2:	f105 033e 	add.w	r3, r5, #62	; 0x3e
 80161d6:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80161da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80161de:	9100      	str	r1, [sp, #0]
 80161e0:	b29b      	uxth	r3, r3
 80161e2:	b292      	uxth	r2, r2
 80161e4:	b2b9      	uxth	r1, r7
 80161e6:	b280      	uxth	r0, r0
 80161e8:	f006 fba9 	bl	801c93e <TFT_FillRectangle>
	old_num_A = number;
 80161ec:	4b42      	ldr	r3, [pc, #264]	; (80162f8 <GUI_Text_LAB_Measure+0x3f0>)
 80161ee:	f883 8000 	strb.w	r8, [r3]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 80161f2:	f1bb 0f00 	cmp.w	fp, #0
 80161f6:	d007      	beq.n	8016208 <GUI_Text_LAB_Measure+0x300>
 80161f8:	f1a4 0012 	sub.w	r0, r4, #18
 80161fc:	4430      	add	r0, r6
 80161fe:	222d      	movs	r2, #45	; 0x2d
 8016200:	b2b9      	uxth	r1, r7
 8016202:	b280      	uxth	r0, r0
 8016204:	f006 fe8e 	bl	801cf24 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8016208:	19a0      	adds	r0, r4, r6
 801620a:	b2b9      	uxth	r1, r7
 801620c:	aa06      	add	r2, sp, #24
 801620e:	2303      	movs	r3, #3
 8016210:	b280      	uxth	r0, r0
 8016212:	f006 fedf 	bl	801cfd4 <TFT_DisplayString>
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8016216:	9b04      	ldr	r3, [sp, #16]
	TFT_SetFont(&Font26EN_arch_digit);
 8016218:	4832      	ldr	r0, [pc, #200]	; (80162e4 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 801621a:	2b00      	cmp	r3, #0
 801621c:	bfbf      	itttt	lt
 801621e:	425b      	neglt	r3, r3
 8016220:	b21b      	sxthlt	r3, r3
 8016222:	9304      	strlt	r3, [sp, #16]
 8016224:	f04f 0901 	movlt.w	r9, #1
 8016228:	bfa8      	it	ge
 801622a:	f04f 0900 	movge.w	r9, #0
	TFT_SetFont(&Font26EN_arch_digit);
 801622e:	f006 fdaf 	bl	801cd90 <TFT_SetFont>
	sprintf (buffer, "%d", ValueB);
 8016232:	9a04      	ldr	r2, [sp, #16]
 8016234:	492c      	ldr	r1, [pc, #176]	; (80162e8 <GUI_Text_LAB_Measure+0x3e0>)
 8016236:	a806      	add	r0, sp, #24
 8016238:	f00a f9ea 	bl	8020610 <sprintf>
	 dec = 10;
 801623c:	f04f 080a 	mov.w	r8, #10
	sprintf (buffer, "%d", ValueB);
 8016240:	2704      	movs	r7, #4
		delta_pos = 180;
 8016242:	26b4      	movs	r6, #180	; 0xb4
			dec *= 10;
 8016244:	46c2      	mov	sl, r8
		if(abs((ValueB/(dec))) >= 1.0)
 8016246:	9b04      	ldr	r3, [sp, #16]
 8016248:	fbb3 f0f8 	udiv	r0, r3, r8
 801624c:	2800      	cmp	r0, #0
 801624e:	bfb8      	it	lt
 8016250:	4240      	neglt	r0, r0
 8016252:	f7ea f97f 	bl	8000554 <__aeabi_i2d>
 8016256:	2200      	movs	r2, #0
 8016258:	4b24      	ldr	r3, [pc, #144]	; (80162ec <GUI_Text_LAB_Measure+0x3e4>)
 801625a:	f7ea fc67 	bl	8000b2c <__aeabi_dcmpge>
 801625e:	b138      	cbz	r0, 8016270 <GUI_Text_LAB_Measure+0x368>
			number++;
 8016260:	9b03      	ldr	r3, [sp, #12]
 8016262:	3301      	adds	r3, #1
			delta_pos-=23;
 8016264:	3e17      	subs	r6, #23
			number++;
 8016266:	b2db      	uxtb	r3, r3
			dec *= 10;
 8016268:	fb0a f808 	mul.w	r8, sl, r8
			delta_pos-=23;
 801626c:	b2f6      	uxtb	r6, r6
			number++;
 801626e:	9303      	str	r3, [sp, #12]
 8016270:	3f01      	subs	r7, #1
	for (uint8_t i = 1; i <= 4; i++)
 8016272:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8016276:	d1e6      	bne.n	8016246 <GUI_Text_LAB_Measure+0x33e>
	if(number < old_num_B || old_nan == 1)
 8016278:	4b20      	ldr	r3, [pc, #128]	; (80162fc <GUI_Text_LAB_Measure+0x3f4>)
 801627a:	9903      	ldr	r1, [sp, #12]
 801627c:	781a      	ldrb	r2, [r3, #0]
 801627e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80162f4 <GUI_Text_LAB_Measure+0x3ec>
 8016282:	428a      	cmp	r2, r1
 8016284:	f105 0746 	add.w	r7, r5, #70	; 0x46
 8016288:	469a      	mov	sl, r3
 801628a:	d803      	bhi.n	8016294 <GUI_Text_LAB_Measure+0x38c>
 801628c:	f898 3000 	ldrb.w	r3, [r8]
 8016290:	2b01      	cmp	r3, #1
 8016292:	d10d      	bne.n	80162b0 <GUI_Text_LAB_Measure+0x3a8>
		TFT_FillRectangle(X+40, Y+70, X+250, Y+95, TFT_Black_Bkgr);
 8016294:	2163      	movs	r1, #99	; 0x63
 8016296:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 801629a:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801629e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80162a2:	9100      	str	r1, [sp, #0]
 80162a4:	b29b      	uxth	r3, r3
 80162a6:	b292      	uxth	r2, r2
 80162a8:	b2b9      	uxth	r1, r7
 80162aa:	b280      	uxth	r0, r0
 80162ac:	f006 fb47 	bl	801c93e <TFT_FillRectangle>
	old_num_B = number;
 80162b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80162b4:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
 80162b8:	f1b9 0f00 	cmp.w	r9, #0
 80162bc:	d007      	beq.n	80162ce <GUI_Text_LAB_Measure+0x3c6>
 80162be:	f1a4 0012 	sub.w	r0, r4, #18
 80162c2:	4430      	add	r0, r6
 80162c4:	222d      	movs	r2, #45	; 0x2d
 80162c6:	b2b9      	uxth	r1, r7
 80162c8:	b280      	uxth	r0, r0
 80162ca:	f006 fe2b 	bl	801cf24 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 80162ce:	19a0      	adds	r0, r4, r6
 80162d0:	2303      	movs	r3, #3
 80162d2:	aa06      	add	r2, sp, #24
 80162d4:	b2b9      	uxth	r1, r7
 80162d6:	b280      	uxth	r0, r0
 80162d8:	f006 fe7c 	bl	801cfd4 <TFT_DisplayString>
		old_nan = 0;
 80162dc:	2300      	movs	r3, #0
 80162de:	f888 3000 	strb.w	r3, [r8]
 80162e2:	e687      	b.n	8015ff4 <GUI_Text_LAB_Measure+0xec>
 80162e4:	200001f0 	.word	0x200001f0
 80162e8:	08025309 	.word	0x08025309
 80162ec:	3ff00000 	.word	0x3ff00000
 80162f0:	20000241 	.word	0x20000241
 80162f4:	20005731 	.word	0x20005731
 80162f8:	2000023d 	.word	0x2000023d
 80162fc:	2000023e 	.word	0x2000023e

08016300 <GUI_Battery_Level>:
			

			

void GUI_Battery_Level(uint16_t X, uint16_t Y, double charge)
{
 8016300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	char buffer[5] = {0};
 8016304:	2300      	movs	r3, #0
	
	
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8016306:	f101 070a 	add.w	r7, r1, #10
 801630a:	f100 062d 	add.w	r6, r0, #45	; 0x2d
 801630e:	b2b6      	uxth	r6, r6
{
 8016310:	4604      	mov	r4, r0
	char buffer[5] = {0};
 8016312:	9302      	str	r3, [sp, #8]
 8016314:	f88d 300c 	strb.w	r3, [sp, #12]
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8016318:	f241 3a76 	movw	sl, #4982	; 0x1376
 801631c:	f101 031a 	add.w	r3, r1, #26
 8016320:	b2bf      	uxth	r7, r7
 8016322:	300a      	adds	r0, #10
{
 8016324:	460d      	mov	r5, r1
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8016326:	4632      	mov	r2, r6
 8016328:	b29b      	uxth	r3, r3
 801632a:	4639      	mov	r1, r7
 801632c:	b280      	uxth	r0, r0
 801632e:	f8cd a000 	str.w	sl, [sp]
{
 8016332:	ec59 8b10 	vmov	r8, r9, d0
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8016336:	f006 fb02 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(X+45, Y+15, X+48, Y+20, TFT_Blue_Off); //small battery rect
 801633a:	f105 0314 	add.w	r3, r5, #20
 801633e:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8016342:	f105 010f 	add.w	r1, r5, #15
 8016346:	4630      	mov	r0, r6
 8016348:	b29b      	uxth	r3, r3
 801634a:	b292      	uxth	r2, r2
 801634c:	b289      	uxth	r1, r1
 801634e:	f8cd a000 	str.w	sl, [sp]
 8016352:	f006 faf4 	bl	801c93e <TFT_FillRectangle>

		if(charge < 12)
 8016356:	2200      	movs	r2, #0
 8016358:	4b4b      	ldr	r3, [pc, #300]	; (8016488 <GUI_Battery_Level+0x188>)
 801635a:	4640      	mov	r0, r8
 801635c:	4649      	mov	r1, r9
 801635e:	f7ea fbd1 	bl	8000b04 <__aeabi_dcmplt>
 8016362:	f105 0618 	add.w	r6, r5, #24
 8016366:	b170      	cbz	r0, 8016386 <GUI_Battery_Level+0x86>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_Red);
 8016368:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801636c:	f104 0213 	add.w	r2, r4, #19
 8016370:	f105 010c 	add.w	r1, r5, #12
 8016374:	f104 000f 	add.w	r0, r4, #15
 8016378:	9300      	str	r3, [sp, #0]
 801637a:	b292      	uxth	r2, r2
 801637c:	b2b3      	uxth	r3, r6
 801637e:	b289      	uxth	r1, r1
 8016380:	b280      	uxth	r0, r0
 8016382:	f006 fadc 	bl	801c93e <TFT_FillRectangle>
		}		
		if(charge >= 12)
 8016386:	2200      	movs	r2, #0
 8016388:	4b3f      	ldr	r3, [pc, #252]	; (8016488 <GUI_Battery_Level+0x188>)
 801638a:	4640      	mov	r0, r8
 801638c:	4649      	mov	r1, r9
 801638e:	f7ea fbcd 	bl	8000b2c <__aeabi_dcmpge>
 8016392:	b170      	cbz	r0, 80163b2 <GUI_Battery_Level+0xb2>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_White);
 8016394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016398:	f104 0213 	add.w	r2, r4, #19
 801639c:	f105 010c 	add.w	r1, r5, #12
 80163a0:	f104 000f 	add.w	r0, r4, #15
 80163a4:	9300      	str	r3, [sp, #0]
 80163a6:	b292      	uxth	r2, r2
 80163a8:	b2b3      	uxth	r3, r6
 80163aa:	b289      	uxth	r1, r1
 80163ac:	b280      	uxth	r0, r0
 80163ae:	f006 fac6 	bl	801c93e <TFT_FillRectangle>
		}		
		if(charge >= 25)
 80163b2:	2200      	movs	r2, #0
 80163b4:	4b35      	ldr	r3, [pc, #212]	; (801648c <GUI_Battery_Level+0x18c>)
 80163b6:	4640      	mov	r0, r8
 80163b8:	4649      	mov	r1, r9
 80163ba:	f7ea fbb7 	bl	8000b2c <__aeabi_dcmpge>
 80163be:	b170      	cbz	r0, 80163de <GUI_Battery_Level+0xde>
		{
			TFT_FillRectangle(X+22, Y+12, X+26, Y+24, TFT_White);
 80163c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163c4:	f104 021a 	add.w	r2, r4, #26
 80163c8:	f105 010c 	add.w	r1, r5, #12
 80163cc:	f104 0016 	add.w	r0, r4, #22
 80163d0:	9300      	str	r3, [sp, #0]
 80163d2:	b292      	uxth	r2, r2
 80163d4:	b2b3      	uxth	r3, r6
 80163d6:	b289      	uxth	r1, r1
 80163d8:	b280      	uxth	r0, r0
 80163da:	f006 fab0 	bl	801c93e <TFT_FillRectangle>
		}		
		if(charge >= 50)
 80163de:	2200      	movs	r2, #0
 80163e0:	4b2b      	ldr	r3, [pc, #172]	; (8016490 <GUI_Battery_Level+0x190>)
 80163e2:	4640      	mov	r0, r8
 80163e4:	4649      	mov	r1, r9
 80163e6:	f7ea fba1 	bl	8000b2c <__aeabi_dcmpge>
 80163ea:	b170      	cbz	r0, 801640a <GUI_Battery_Level+0x10a>
		{
			TFT_FillRectangle(X+29, Y+12, X+33, Y+24, TFT_White);
 80163ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163f0:	f104 0221 	add.w	r2, r4, #33	; 0x21
 80163f4:	f105 010c 	add.w	r1, r5, #12
 80163f8:	f104 001d 	add.w	r0, r4, #29
 80163fc:	9300      	str	r3, [sp, #0]
 80163fe:	b292      	uxth	r2, r2
 8016400:	b2b3      	uxth	r3, r6
 8016402:	b289      	uxth	r1, r1
 8016404:	b280      	uxth	r0, r0
 8016406:	f006 fa9a 	bl	801c93e <TFT_FillRectangle>
		}
		if(charge >= 85)
 801640a:	2200      	movs	r2, #0
 801640c:	4b21      	ldr	r3, [pc, #132]	; (8016494 <GUI_Battery_Level+0x194>)
 801640e:	4640      	mov	r0, r8
 8016410:	4649      	mov	r1, r9
 8016412:	f7ea fb8b 	bl	8000b2c <__aeabi_dcmpge>
 8016416:	b170      	cbz	r0, 8016436 <GUI_Battery_Level+0x136>
		{
			TFT_FillRectangle(X+36, Y+12, X+40, Y+24, TFT_White);
 8016418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801641c:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8016420:	f105 010c 	add.w	r1, r5, #12
 8016424:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016428:	9300      	str	r3, [sp, #0]
 801642a:	b292      	uxth	r2, r2
 801642c:	b2b3      	uxth	r3, r6
 801642e:	b289      	uxth	r1, r1
 8016430:	b280      	uxth	r0, r0
 8016432:	f006 fa84 	bl	801c93e <TFT_FillRectangle>
		}
		
		sprintf (buffer, "%.1f%%", charge);
 8016436:	4642      	mov	r2, r8
 8016438:	464b      	mov	r3, r9
 801643a:	4917      	ldr	r1, [pc, #92]	; (8016498 <GUI_Battery_Level+0x198>)
 801643c:	a802      	add	r0, sp, #8
 801643e:	f00a f8e7 	bl	8020610 <sprintf>
		TFT_SetFont(&Font8);
 8016442:	4816      	ldr	r0, [pc, #88]	; (801649c <GUI_Battery_Level+0x19c>)
 8016444:	f006 fca4 	bl	801cd90 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8016448:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801644c:	f006 fca6 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016450:	2063      	movs	r0, #99	; 0x63
 8016452:	f006 fca9 	bl	801cda8 <TFT_SetBackColor>
		TFT_FillRectangle(X+50, Y+10, X+80, Y+24, TFT_Black_Bkgr);
 8016456:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801645a:	f104 0032 	add.w	r0, r4, #50	; 0x32
 801645e:	2363      	movs	r3, #99	; 0x63
 8016460:	9300      	str	r3, [sp, #0]
 8016462:	4639      	mov	r1, r7
 8016464:	b2b3      	uxth	r3, r6
 8016466:	b292      	uxth	r2, r2
 8016468:	b280      	uxth	r0, r0
 801646a:	f006 fa68 	bl	801c93e <TFT_FillRectangle>
		TFT_DisplayString(X+52, Y+14, (uint8_t *)buffer, LEFT_MODE);
 801646e:	f105 010e 	add.w	r1, r5, #14
 8016472:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8016476:	2303      	movs	r3, #3
 8016478:	aa02      	add	r2, sp, #8
 801647a:	b289      	uxth	r1, r1
 801647c:	b280      	uxth	r0, r0
 801647e:	f006 fda9 	bl	801cfd4 <TFT_DisplayString>

}
 8016482:	b004      	add	sp, #16
 8016484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016488:	40280000 	.word	0x40280000
 801648c:	40390000 	.word	0x40390000
 8016490:	40490000 	.word	0x40490000
 8016494:	40554000 	.word	0x40554000
 8016498:	080320de 	.word	0x080320de
 801649c:	20000218 	.word	0x20000218

080164a0 <GUI_Axes_Locus_XY>:

void GUI_Axes_Locus_XY(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 80164a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80164a2:	1e86      	subs	r6, r0, #2
{
 80164a4:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80164a6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80164aa:	b2b6      	uxth	r6, r6
 80164ac:	39fa      	subs	r1, #250	; 0xfa
{
 80164ae:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80164b0:	4623      	mov	r3, r4
 80164b2:	4602      	mov	r2, r0
 80164b4:	9700      	str	r7, [sp, #0]
 80164b6:	4630      	mov	r0, r6
 80164b8:	b289      	uxth	r1, r1
 80164ba:	f006 fa40 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+XY2_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 80164be:	1ce3      	adds	r3, r4, #3
 80164c0:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 80164c4:	1c61      	adds	r1, r4, #1
 80164c6:	4630      	mov	r0, r6
 80164c8:	9700      	str	r7, [sp, #0]
 80164ca:	b29b      	uxth	r3, r3
 80164cc:	b292      	uxth	r2, r2
 80164ce:	b289      	uxth	r1, r1
 80164d0:	f006 fa35 	bl	801c93e <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-300/2, X_center+3, Y_center-300/2, TFT_White);
 80164d4:	f1a4 0396 	sub.w	r3, r4, #150	; 0x96
 80164d8:	b29b      	uxth	r3, r3
 80164da:	1cea      	adds	r2, r5, #3
 80164dc:	1f68      	subs	r0, r5, #5
 80164de:	4619      	mov	r1, r3
 80164e0:	9700      	str	r7, [sp, #0]
 80164e2:	b292      	uxth	r2, r2
 80164e4:	b280      	uxth	r0, r0
 80164e6:	f006 f9cd 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(X_center+295/2, Y_center-3, X_center+295/2, Y_center+6, TFT_White);
 80164ea:	1da6      	adds	r6, r4, #6
 80164ec:	f105 0293 	add.w	r2, r5, #147	; 0x93
 80164f0:	b292      	uxth	r2, r2
 80164f2:	b2b6      	uxth	r6, r6
 80164f4:	1ee1      	subs	r1, r4, #3
 80164f6:	4633      	mov	r3, r6
 80164f8:	4610      	mov	r0, r2
 80164fa:	b289      	uxth	r1, r1
 80164fc:	9700      	str	r7, [sp, #0]
 80164fe:	f006 f9c1 	bl	801c884 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8016502:	4819      	ldr	r0, [pc, #100]	; (8016568 <GUI_Axes_Locus_XY+0xc8>)
 8016504:	f006 fc44 	bl	801cd90 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8016508:	3c98      	subs	r4, #152	; 0x98
		TFT_SetTextColor(TFT_White);
 801650a:	4638      	mov	r0, r7
 801650c:	f006 fc46 	bl	801cd9c <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8016510:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016512:	2063      	movs	r0, #99	; 0x63
 8016514:	f006 fc48 	bl	801cda8 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8016518:	4621      	mov	r1, r4
 801651a:	222e      	movs	r2, #46	; 0x2e
 801651c:	2004      	movs	r0, #4
 801651e:	f006 fd01 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-300/2-2, '0');
 8016522:	4621      	mov	r1, r4
 8016524:	2230      	movs	r2, #48	; 0x30
 8016526:	2000      	movs	r0, #0
 8016528:	f006 fcfc 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-300/2-2, '5');
 801652c:	4621      	mov	r1, r4
 801652e:	2235      	movs	r2, #53	; 0x35
 8016530:	2008      	movs	r0, #8
 8016532:	f006 fcf7 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+295/2-6+4,  Y_center+6, '.');
 8016536:	f105 0091 	add.w	r0, r5, #145	; 0x91
 801653a:	4631      	mov	r1, r6
 801653c:	222e      	movs	r2, #46	; 0x2e
 801653e:	b280      	uxth	r0, r0
 8016540:	f006 fcf0 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+0,  Y_center+6, '0');
 8016544:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8016548:	4631      	mov	r1, r6
 801654a:	2230      	movs	r2, #48	; 0x30
 801654c:	b280      	uxth	r0, r0
 801654e:	f006 fce9 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8016552:	f105 0095 	add.w	r0, r5, #149	; 0x95
 8016556:	2235      	movs	r2, #53	; 0x35
 8016558:	4631      	mov	r1, r6
 801655a:	b280      	uxth	r0, r0
}
 801655c:	b003      	add	sp, #12
 801655e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8016562:	f006 bcdf 	b.w	801cf24 <TFT_DrawChar>
 8016566:	bf00      	nop
 8016568:	20000210 	.word	0x20000210

0801656c <GUI_Axes_Locus_LUV>:

void GUI_Axes_Locus_LUV(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 801656c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 801656e:	1e86      	subs	r6, r0, #2
{
 8016570:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8016572:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8016576:	b2b6      	uxth	r6, r6
 8016578:	39ea      	subs	r1, #234	; 0xea
{
 801657a:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 801657c:	4623      	mov	r3, r4
 801657e:	4602      	mov	r2, r0
 8016580:	9700      	str	r7, [sp, #0]
 8016582:	4630      	mov	r0, r6
 8016584:	b289      	uxth	r1, r1
 8016586:	f006 f9da 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+LUV_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 801658a:	1ce3      	adds	r3, r4, #3
 801658c:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8016590:	1c61      	adds	r1, r4, #1
 8016592:	4630      	mov	r0, r6
 8016594:	9700      	str	r7, [sp, #0]
 8016596:	b29b      	uxth	r3, r3
 8016598:	b292      	uxth	r2, r2
 801659a:	b289      	uxth	r1, r1
 801659c:	f006 f9cf 	bl	801c93e <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-396/2, X_center+3, Y_center-396/2, TFT_White);
 80165a0:	f1a4 03c6 	sub.w	r3, r4, #198	; 0xc6
 80165a4:	b29b      	uxth	r3, r3
 80165a6:	1cea      	adds	r2, r5, #3
 80165a8:	1f68      	subs	r0, r5, #5
 80165aa:	4619      	mov	r1, r3
 80165ac:	9700      	str	r7, [sp, #0]
 80165ae:	b292      	uxth	r2, r2
 80165b0:	b280      	uxth	r0, r0
 80165b2:	f006 f967 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(X_center+403/2, Y_center-3, X_center+403/2, Y_center+6, TFT_White);
 80165b6:	1da6      	adds	r6, r4, #6
 80165b8:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
 80165bc:	b292      	uxth	r2, r2
 80165be:	b2b6      	uxth	r6, r6
 80165c0:	1ee1      	subs	r1, r4, #3
 80165c2:	4633      	mov	r3, r6
 80165c4:	4610      	mov	r0, r2
 80165c6:	b289      	uxth	r1, r1
 80165c8:	9700      	str	r7, [sp, #0]
 80165ca:	f006 f95b 	bl	801c884 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 80165ce:	4819      	ldr	r0, [pc, #100]	; (8016634 <GUI_Axes_Locus_LUV+0xc8>)
 80165d0:	f006 fbde 	bl	801cd90 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 80165d4:	3cc8      	subs	r4, #200	; 0xc8
		TFT_SetTextColor(TFT_White);
 80165d6:	4638      	mov	r0, r7
 80165d8:	f006 fbe0 	bl	801cd9c <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 80165dc:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 80165de:	2063      	movs	r0, #99	; 0x63
 80165e0:	f006 fbe2 	bl	801cda8 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 80165e4:	4621      	mov	r1, r4
 80165e6:	222e      	movs	r2, #46	; 0x2e
 80165e8:	2004      	movs	r0, #4
 80165ea:	f006 fc9b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-396/2-2, '0');
 80165ee:	4621      	mov	r1, r4
 80165f0:	2230      	movs	r2, #48	; 0x30
 80165f2:	2000      	movs	r0, #0
 80165f4:	f006 fc96 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-396/2-2, '5');
 80165f8:	4621      	mov	r1, r4
 80165fa:	2235      	movs	r2, #53	; 0x35
 80165fc:	2008      	movs	r0, #8
 80165fe:	f006 fc91 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+403/2-6+4,  Y_center+6, '.');
 8016602:	f105 00c7 	add.w	r0, r5, #199	; 0xc7
 8016606:	4631      	mov	r1, r6
 8016608:	222e      	movs	r2, #46	; 0x2e
 801660a:	b280      	uxth	r0, r0
 801660c:	f006 fc8a 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+0,  Y_center+6, '0');
 8016610:	f105 00c3 	add.w	r0, r5, #195	; 0xc3
 8016614:	4631      	mov	r1, r6
 8016616:	2230      	movs	r2, #48	; 0x30
 8016618:	b280      	uxth	r0, r0
 801661a:	f006 fc83 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 801661e:	f105 00cb 	add.w	r0, r5, #203	; 0xcb
 8016622:	2235      	movs	r2, #53	; 0x35
 8016624:	4631      	mov	r1, r6
 8016626:	b280      	uxth	r0, r0
}
 8016628:	b003      	add	sp, #12
 801662a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 801662e:	f006 bc79 	b.w	801cf24 <TFT_DrawChar>
 8016632:	bf00      	nop
 8016634:	20000210 	.word	0x20000210

08016638 <GUI_Axes_Locus_Lab>:

void GUI_Axes_Locus_Lab(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8016638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 801663c:	f100 037d 	add.w	r3, r0, #125	; 0x7d
{
 8016640:	b087      	sub	sp, #28
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8016642:	b29b      	uxth	r3, r3
{
 8016644:	4604      	mov	r4, r0
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8016646:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
 801664a:	460d      	mov	r5, r1
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 801664c:	9303      	str	r3, [sp, #12]
 801664e:	387f      	subs	r0, #127	; 0x7f
 8016650:	1c4b      	adds	r3, r1, #1
 8016652:	3901      	subs	r1, #1
 8016654:	9a03      	ldr	r2, [sp, #12]
 8016656:	9700      	str	r7, [sp, #0]
 8016658:	b29b      	uxth	r3, r3
 801665a:	b289      	uxth	r1, r1
 801665c:	b280      	uxth	r0, r0
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 801665e:	f1a5 067d 	sub.w	r6, r5, #125	; 0x7d
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8016662:	f006 f96c 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 8016666:	b2b6      	uxth	r6, r6
 8016668:	f105 037d 	add.w	r3, r5, #125	; 0x7d
 801666c:	1ea0      	subs	r0, r4, #2
 801666e:	b29b      	uxth	r3, r3
 8016670:	4622      	mov	r2, r4
 8016672:	4631      	mov	r1, r6
 8016674:	9700      	str	r7, [sp, #0]
 8016676:	b280      	uxth	r0, r0
 8016678:	9304      	str	r3, [sp, #16]
 801667a:	f006 f960 	bl	801c93e <TFT_FillRectangle>
		

		TFT_SetFont(&Font6EN_arch_big);
 801667e:	4850      	ldr	r0, [pc, #320]	; (80167c0 <GUI_Axes_Locus_Lab+0x188>)
 8016680:	f006 fb86 	bl	801cd90 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8016684:	4638      	mov	r0, r7
 8016686:	f006 fb89 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801668a:	2063      	movs	r0, #99	; 0x63
 801668c:	f006 fb8c 	bl	801cda8 <TFT_SetBackColor>
	
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8016690:	f1a4 031e 	sub.w	r3, r4, #30
 8016694:	b29b      	uxth	r3, r3
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8016696:	f1a4 0b19 	sub.w	fp, r4, #25
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 801669a:	4618      	mov	r0, r3
 801669c:	4631      	mov	r1, r6
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 801669e:	fa1f fb8b 	uxth.w	fp, fp
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80166a2:	222b      	movs	r2, #43	; 0x2b
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80166a4:	f1a4 0a14 	sub.w	sl, r4, #20
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80166a8:	9305      	str	r3, [sp, #20]
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80166aa:	fa1f fa8a 	uxth.w	sl, sl
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80166ae:	f006 fc39 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 80166b2:	f1a4 090e 	sub.w	r9, r4, #14
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 80166b6:	4631      	mov	r1, r6
 80166b8:	4658      	mov	r0, fp
 80166ba:	2231      	movs	r2, #49	; 0x31
 80166bc:	f006 fc32 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 80166c0:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80166c4:	4631      	mov	r1, r6
 80166c6:	4650      	mov	r0, sl
 80166c8:	2232      	movs	r2, #50	; 0x32
 80166ca:	f006 fc2b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 80166ce:	4631      	mov	r1, r6
 80166d0:	4648      	mov	r0, r9
 80166d2:	2238      	movs	r2, #56	; 0x38
 80166d4:	f006 fc26 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(X_center-35+5,  Y_center+LAB_LOCUS_SIZEY/2-8, '-');
 80166d8:	f105 0875 	add.w	r8, r5, #117	; 0x75
 80166dc:	9b05      	ldr	r3, [sp, #20]
 80166de:	fa1f f888 	uxth.w	r8, r8
 80166e2:	4618      	mov	r0, r3
 80166e4:	4641      	mov	r1, r8
 80166e6:	222d      	movs	r2, #45	; 0x2d
 80166e8:	f006 fc1c 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+10,  Y_center+LAB_LOCUS_SIZEY/2-8, '1');
 80166ec:	4641      	mov	r1, r8
 80166ee:	4658      	mov	r0, fp
 80166f0:	2231      	movs	r2, #49	; 0x31
 80166f2:	f006 fc17 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+15,  Y_center+LAB_LOCUS_SIZEY/2-8, '2');
 80166f6:	4641      	mov	r1, r8
 80166f8:	4650      	mov	r0, sl
 80166fa:	2232      	movs	r2, #50	; 0x32
 80166fc:	f006 fc12 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8016700:	4641      	mov	r1, r8
		
		TFT_DrawChar(0,  Y_center-11, '-');
 8016702:	f1a5 080b 	sub.w	r8, r5, #11
 8016706:	fa1f f888 	uxth.w	r8, r8
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 801670a:	4648      	mov	r0, r9
 801670c:	2238      	movs	r2, #56	; 0x38
 801670e:	f006 fc09 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-11, '-');
 8016712:	4641      	mov	r1, r8
 8016714:	222d      	movs	r2, #45	; 0x2d
 8016716:	2000      	movs	r0, #0
 8016718:	f006 fc04 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(5,  Y_center-11, '1');
 801671c:	4641      	mov	r1, r8
 801671e:	2231      	movs	r2, #49	; 0x31
 8016720:	2005      	movs	r0, #5
 8016722:	f006 fbff 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(10,  Y_center-11, '2');
 8016726:	4641      	mov	r1, r8
 8016728:	2232      	movs	r2, #50	; 0x32
 801672a:	200a      	movs	r0, #10
 801672c:	f006 fbfa 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(16,  Y_center-11, '8');
 8016730:	4641      	mov	r1, r8
 8016732:	2238      	movs	r2, #56	; 0x38
 8016734:	2010      	movs	r0, #16
 8016736:	f006 fbf5 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(260-15,  Y_center-11, '+');
 801673a:	4641      	mov	r1, r8
 801673c:	222b      	movs	r2, #43	; 0x2b
 801673e:	20f5      	movs	r0, #245	; 0xf5
 8016740:	f006 fbf0 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(260-10,  Y_center-11, '1');
 8016744:	4641      	mov	r1, r8
 8016746:	2231      	movs	r2, #49	; 0x31
 8016748:	20fa      	movs	r0, #250	; 0xfa
 801674a:	f006 fbeb 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(260-5,  Y_center-11, '2');
 801674e:	4641      	mov	r1, r8
 8016750:	2232      	movs	r2, #50	; 0x32
 8016752:	20ff      	movs	r0, #255	; 0xff
 8016754:	f006 fbe6 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(260,  Y_center-11, '8');
		
		//		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/4, X_center+3, Y_center-LAB_LOCUS_SIZEY/4, TFT_White);
//		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/4, X_center+3, Y_center+LAB_LOCUS_SIZEY/4, TFT_White);
		
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8016758:	f104 0903 	add.w	r9, r4, #3
		TFT_DrawChar(260,  Y_center-11, '8');
 801675c:	4641      	mov	r1, r8
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 801675e:	f1a4 0805 	sub.w	r8, r4, #5
 8016762:	fa1f f888 	uxth.w	r8, r8
 8016766:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(260,  Y_center-11, '8');
 801676a:	2238      	movs	r2, #56	; 0x38
 801676c:	f44f 7082 	mov.w	r0, #260	; 0x104
 8016770:	f006 fbd8 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8016774:	4633      	mov	r3, r6
 8016776:	464a      	mov	r2, r9
 8016778:	4631      	mov	r1, r6
 801677a:	4640      	mov	r0, r8
 801677c:	9700      	str	r7, [sp, #0]
 801677e:	f006 f881 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/2, X_center+3, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);
 8016782:	9b04      	ldr	r3, [sp, #16]
 8016784:	9700      	str	r7, [sp, #0]
 8016786:	464a      	mov	r2, r9
 8016788:	4619      	mov	r1, r3
 801678a:	4640      	mov	r0, r8
 801678c:	f006 f87a 	bl	801c884 <TFT_DrawLine>
	
//		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/4, Y_center-3, X_center-LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
//		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/4, Y_center-3, X_center+LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
		
		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/2+1, Y_center-3, X_center-LAB_LOCUS_SIZEX/2+1, Y_center+6, TFT_White);
 8016790:	f1a4 027c 	sub.w	r2, r4, #124	; 0x7c
 8016794:	1eec      	subs	r4, r5, #3
 8016796:	3506      	adds	r5, #6
 8016798:	b292      	uxth	r2, r2
 801679a:	b2a4      	uxth	r4, r4
 801679c:	b2ad      	uxth	r5, r5
 801679e:	462b      	mov	r3, r5
 80167a0:	4621      	mov	r1, r4
 80167a2:	4610      	mov	r0, r2
 80167a4:	9700      	str	r7, [sp, #0]
 80167a6:	f006 f86d 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/2, Y_center-3, X_center+LAB_LOCUS_SIZEX/2, Y_center+6, TFT_White);
 80167aa:	9a03      	ldr	r2, [sp, #12]
 80167ac:	9700      	str	r7, [sp, #0]
 80167ae:	462b      	mov	r3, r5
 80167b0:	4621      	mov	r1, r4
 80167b2:	4610      	mov	r0, r2
 80167b4:	f006 f866 	bl	801c884 <TFT_DrawLine>
}
 80167b8:	b007      	add	sp, #28
 80167ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167be:	bf00      	nop
 80167c0:	20000210 	.word	0x20000210

080167c4 <GUI_Text_CIE_XYZ>:
#include "stdio.h"
#include "GUI_Text_Elements_EN.h"


void GUI_Text_CIE_XYZ(uint16_t X, uint16_t Y)
{
 80167c4:	b538      	push	{r3, r4, r5, lr}
 80167c6:	4604      	mov	r4, r0
TFT_SetTextColor(TFT_White);
 80167c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80167cc:	460d      	mov	r5, r1
TFT_SetTextColor(TFT_White);
 80167ce:	f006 fae5 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80167d2:	2063      	movs	r0, #99	; 0x63
 80167d4:	f006 fae8 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80167d8:	4816      	ldr	r0, [pc, #88]	; (8016834 <GUI_Text_CIE_XYZ+0x70>)
 80167da:	f006 fad9 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80167de:	4629      	mov	r1, r5
 80167e0:	4620      	mov	r0, r4
 80167e2:	2243      	movs	r2, #67	; 0x43
 80167e4:	f006 fb9e 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80167e8:	f104 000d 	add.w	r0, r4, #13
 80167ec:	4629      	mov	r1, r5
 80167ee:	2249      	movs	r2, #73	; 0x49
 80167f0:	b280      	uxth	r0, r0
 80167f2:	f006 fb97 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80167f6:	f104 001b 	add.w	r0, r4, #27
 80167fa:	4629      	mov	r1, r5
 80167fc:	2245      	movs	r2, #69	; 0x45
 80167fe:	b280      	uxth	r0, r0
 8016800:	f006 fb90 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'X');
 8016804:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8016808:	4629      	mov	r1, r5
 801680a:	2258      	movs	r2, #88	; 0x58
 801680c:	b280      	uxth	r0, r0
 801680e:	f006 fb89 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y, 'Y');
 8016812:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8016816:	4629      	mov	r1, r5
 8016818:	2259      	movs	r2, #89	; 0x59
 801681a:	b280      	uxth	r0, r0
 801681c:	f006 fb82 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y, 'Z');
 8016820:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8016824:	4629      	mov	r1, r5
 8016826:	225a      	movs	r2, #90	; 0x5a
 8016828:	b280      	uxth	r0, r0
}
 801682a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+81, Y, 'Z');
 801682e:	f006 bb79 	b.w	801cf24 <TFT_DrawChar>
 8016832:	bf00      	nop
 8016834:	200001b0 	.word	0x200001b0

08016838 <GUI_Text_CIE_xy_1931>:
	TFT_DrawChar(X+49, Y+1, 'x');
	TFT_DrawChar(X+72, Y+1, 'y');
}

void GUI_Text_CIE_xy_1931(uint16_t X, uint16_t Y)
{
 8016838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801683a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 801683c:	4f2c      	ldr	r7, [pc, #176]	; (80168f0 <GUI_Text_CIE_xy_1931+0xb8>)
	TFT_SetTextColor(TFT_White);
 801683e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016842:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016844:	f006 faaa 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016848:	2063      	movs	r0, #99	; 0x63
 801684a:	f006 faad 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801684e:	4638      	mov	r0, r7
 8016850:	f006 fa9e 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016854:	4629      	mov	r1, r5
 8016856:	4620      	mov	r0, r4
 8016858:	2243      	movs	r2, #67	; 0x43
 801685a:	f006 fb63 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801685e:	f104 000d 	add.w	r0, r4, #13
 8016862:	4629      	mov	r1, r5
 8016864:	2249      	movs	r2, #73	; 0x49
 8016866:	b280      	uxth	r0, r0
 8016868:	f006 fb5c 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801686c:	f104 001b 	add.w	r0, r4, #27
 8016870:	4629      	mov	r1, r5
 8016872:	2245      	movs	r2, #69	; 0x45
 8016874:	b280      	uxth	r0, r0
 8016876:	f006 fb55 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 801687a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801687e:	4629      	mov	r1, r5
 8016880:	222c      	movs	r2, #44	; 0x2c
 8016882:	b280      	uxth	r0, r0
 8016884:	f006 fb4e 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8016888:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 801688a:	481a      	ldr	r0, [pc, #104]	; (80168f4 <GUI_Text_CIE_xy_1931+0xbc>)
 801688c:	f006 fa80 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016890:	b2b6      	uxth	r6, r6
 8016892:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8016896:	4631      	mov	r1, r6
 8016898:	2278      	movs	r2, #120	; 0x78
 801689a:	b280      	uxth	r0, r0
 801689c:	f006 fb42 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 80168a0:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80168a4:	4631      	mov	r1, r6
 80168a6:	2279      	movs	r2, #121	; 0x79
 80168a8:	b280      	uxth	r0, r0
 80168aa:	f006 fb3b 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80168ae:	4638      	mov	r0, r7
 80168b0:	f006 fa6e 	bl	801cd90 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 80168b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80168b8:	4629      	mov	r1, r5
 80168ba:	2231      	movs	r2, #49	; 0x31
 80168bc:	b280      	uxth	r0, r0
 80168be:	f006 fb31 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+133, Y, '1');
 80168c2:	f104 0085 	add.w	r0, r4, #133	; 0x85
 80168c6:	4629      	mov	r1, r5
 80168c8:	2231      	movs	r2, #49	; 0x31
 80168ca:	b280      	uxth	r0, r0
 80168cc:	f006 fb2a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 80168d0:	f104 0069 	add.w	r0, r4, #105	; 0x69
 80168d4:	4629      	mov	r1, r5
 80168d6:	2239      	movs	r2, #57	; 0x39
 80168d8:	b280      	uxth	r0, r0
 80168da:	f006 fb23 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+121, Y, '3');
 80168de:	f104 0079 	add.w	r0, r4, #121	; 0x79
 80168e2:	4629      	mov	r1, r5
 80168e4:	2233      	movs	r2, #51	; 0x33
 80168e6:	b280      	uxth	r0, r0


}
 80168e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+121, Y, '3');
 80168ec:	f006 bb1a 	b.w	801cf24 <TFT_DrawChar>
 80168f0:	200001b0 	.word	0x200001b0
 80168f4:	200001c0 	.word	0x200001c0

080168f8 <GUI_Text_CIE_xy_1964>:

void GUI_Text_CIE_xy_1964(uint16_t X, uint16_t Y)
{
 80168f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168fa:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 80168fc:	4f2c      	ldr	r7, [pc, #176]	; (80169b0 <GUI_Text_CIE_xy_1964+0xb8>)
	TFT_SetTextColor(TFT_White);
 80168fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016902:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016904:	f006 fa4a 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016908:	2063      	movs	r0, #99	; 0x63
 801690a:	f006 fa4d 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801690e:	4638      	mov	r0, r7
 8016910:	f006 fa3e 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016914:	4629      	mov	r1, r5
 8016916:	4620      	mov	r0, r4
 8016918:	2243      	movs	r2, #67	; 0x43
 801691a:	f006 fb03 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801691e:	f104 000d 	add.w	r0, r4, #13
 8016922:	4629      	mov	r1, r5
 8016924:	2249      	movs	r2, #73	; 0x49
 8016926:	b280      	uxth	r0, r0
 8016928:	f006 fafc 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801692c:	f104 001b 	add.w	r0, r4, #27
 8016930:	4629      	mov	r1, r5
 8016932:	2245      	movs	r2, #69	; 0x45
 8016934:	b280      	uxth	r0, r0
 8016936:	f006 faf5 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 801693a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801693e:	4629      	mov	r1, r5
 8016940:	222c      	movs	r2, #44	; 0x2c
 8016942:	b280      	uxth	r0, r0
 8016944:	f006 faee 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8016948:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 801694a:	481a      	ldr	r0, [pc, #104]	; (80169b4 <GUI_Text_CIE_xy_1964+0xbc>)
 801694c:	f006 fa20 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016950:	b2b6      	uxth	r6, r6
 8016952:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8016956:	4631      	mov	r1, r6
 8016958:	2278      	movs	r2, #120	; 0x78
 801695a:	b280      	uxth	r0, r0
 801695c:	f006 fae2 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8016960:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016964:	4631      	mov	r1, r6
 8016966:	2279      	movs	r2, #121	; 0x79
 8016968:	b280      	uxth	r0, r0
 801696a:	f006 fadb 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 801696e:	4638      	mov	r0, r7
 8016970:	f006 fa0e 	bl	801cd90 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8016974:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016978:	4629      	mov	r1, r5
 801697a:	2231      	movs	r2, #49	; 0x31
 801697c:	b280      	uxth	r0, r0
 801697e:	f006 fad1 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8016982:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8016986:	4629      	mov	r1, r5
 8016988:	2239      	movs	r2, #57	; 0x39
 801698a:	b280      	uxth	r0, r0
 801698c:	f006 faca 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y, '6');
 8016990:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8016994:	4629      	mov	r1, r5
 8016996:	2236      	movs	r2, #54	; 0x36
 8016998:	b280      	uxth	r0, r0
 801699a:	f006 fac3 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+135, Y, '4');
 801699e:	f104 0087 	add.w	r0, r4, #135	; 0x87
 80169a2:	4629      	mov	r1, r5
 80169a4:	2234      	movs	r2, #52	; 0x34
 80169a6:	b280      	uxth	r0, r0
}
 80169a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+135, Y, '4');
 80169ac:	f006 baba 	b.w	801cf24 <TFT_DrawChar>
 80169b0:	200001b0 	.word	0x200001b0
 80169b4:	200001c0 	.word	0x200001c0

080169b8 <GUI_Text_CIE_Luv>:



void GUI_Text_CIE_Luv(uint16_t X, uint16_t Y)
{
 80169b8:	b538      	push	{r3, r4, r5, lr}
 80169ba:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80169bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80169c0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80169c2:	f006 f9eb 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80169c6:	2063      	movs	r0, #99	; 0x63
 80169c8:	f006 f9ee 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80169cc:	481f      	ldr	r0, [pc, #124]	; (8016a4c <GUI_Text_CIE_Luv+0x94>)
 80169ce:	f006 f9df 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80169d2:	4621      	mov	r1, r4
 80169d4:	4628      	mov	r0, r5
 80169d6:	2243      	movs	r2, #67	; 0x43
 80169d8:	f006 faa4 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80169dc:	f105 000d 	add.w	r0, r5, #13
 80169e0:	4621      	mov	r1, r4
 80169e2:	2249      	movs	r2, #73	; 0x49
 80169e4:	b280      	uxth	r0, r0
 80169e6:	f006 fa9d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80169ea:	f105 001b 	add.w	r0, r5, #27
 80169ee:	4621      	mov	r1, r4
 80169f0:	2245      	movs	r2, #69	; 0x45
 80169f2:	b280      	uxth	r0, r0
 80169f4:	f006 fa96 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 80169f8:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80169fc:	4621      	mov	r1, r4
 80169fe:	224c      	movs	r2, #76	; 0x4c
 8016a00:	b280      	uxth	r0, r0
 8016a02:	f006 fa8f 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '('-1);
 8016a06:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8016a0a:	4621      	mov	r1, r4
 8016a0c:	2227      	movs	r2, #39	; 0x27
 8016a0e:	b280      	uxth	r0, r0
 8016a10:	f006 fa88 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+106, Y, '('-1);
 8016a14:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 8016a18:	4621      	mov	r1, r4
 8016a1a:	2227      	movs	r2, #39	; 0x27
 8016a1c:	b280      	uxth	r0, r0
 8016a1e:	f006 fa81 	bl	801cf24 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'u');
 8016a22:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016a24:	480a      	ldr	r0, [pc, #40]	; (8016a50 <GUI_Text_CIE_Luv+0x98>)
 8016a26:	f006 f9b3 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'u');
 8016a2a:	b2a4      	uxth	r4, r4
 8016a2c:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8016a30:	4621      	mov	r1, r4
 8016a32:	2275      	movs	r2, #117	; 0x75
 8016a34:	b280      	uxth	r0, r0
 8016a36:	f006 fa75 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'v');
 8016a3a:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8016a3e:	4621      	mov	r1, r4
 8016a40:	2276      	movs	r2, #118	; 0x76
 8016a42:	b280      	uxth	r0, r0
}
 8016a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'v');
 8016a48:	f006 ba6c 	b.w	801cf24 <TFT_DrawChar>
 8016a4c:	200001b0 	.word	0x200001b0
 8016a50:	200001c0 	.word	0x200001c0

08016a54 <GUI_Text_CIE_Lab>:

void GUI_Text_CIE_Lab(uint16_t X, uint16_t Y)
{
 8016a54:	b538      	push	{r3, r4, r5, lr}
 8016a56:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016a58:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016a5c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016a5e:	f006 f99d 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016a62:	2063      	movs	r0, #99	; 0x63
 8016a64:	f006 f9a0 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016a68:	481f      	ldr	r0, [pc, #124]	; (8016ae8 <GUI_Text_CIE_Lab+0x94>)
 8016a6a:	f006 f991 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016a6e:	4621      	mov	r1, r4
 8016a70:	4628      	mov	r0, r5
 8016a72:	2243      	movs	r2, #67	; 0x43
 8016a74:	f006 fa56 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016a78:	f105 000d 	add.w	r0, r5, #13
 8016a7c:	4621      	mov	r1, r4
 8016a7e:	2249      	movs	r2, #73	; 0x49
 8016a80:	b280      	uxth	r0, r0
 8016a82:	f006 fa4f 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016a86:	f105 001b 	add.w	r0, r5, #27
 8016a8a:	4621      	mov	r1, r4
 8016a8c:	2245      	movs	r2, #69	; 0x45
 8016a8e:	b280      	uxth	r0, r0
 8016a90:	f006 fa48 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 8016a94:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016a98:	4621      	mov	r1, r4
 8016a9a:	224c      	movs	r2, #76	; 0x4c
 8016a9c:	b280      	uxth	r0, r0
 8016a9e:	f006 fa41 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '*');
 8016aa2:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8016aa6:	4621      	mov	r1, r4
 8016aa8:	222a      	movs	r2, #42	; 0x2a
 8016aaa:	b280      	uxth	r0, r0
 8016aac:	f006 fa3a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '*');
 8016ab0:	f105 0069 	add.w	r0, r5, #105	; 0x69
 8016ab4:	4621      	mov	r1, r4
 8016ab6:	222a      	movs	r2, #42	; 0x2a
 8016ab8:	b280      	uxth	r0, r0
 8016aba:	f006 fa33 	bl	801cf24 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'a');
 8016abe:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016ac0:	480a      	ldr	r0, [pc, #40]	; (8016aec <GUI_Text_CIE_Lab+0x98>)
 8016ac2:	f006 f965 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'a');
 8016ac6:	b2a4      	uxth	r4, r4
 8016ac8:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8016acc:	4621      	mov	r1, r4
 8016ace:	2261      	movs	r2, #97	; 0x61
 8016ad0:	b280      	uxth	r0, r0
 8016ad2:	f006 fa27 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'b');
 8016ad6:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8016ada:	4621      	mov	r1, r4
 8016adc:	2262      	movs	r2, #98	; 0x62
 8016ade:	b280      	uxth	r0, r0
}
 8016ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'b');
 8016ae4:	f006 ba1e 	b.w	801cf24 <TFT_DrawChar>
 8016ae8:	200001b0 	.word	0x200001b0
 8016aec:	200001c0 	.word	0x200001c0

08016af0 <GUI_Text_Bluetooth>:

void GUI_Text_Bluetooth(uint16_t X, uint16_t Y)
{
 8016af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016af2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_small);
 8016af4:	4e29      	ldr	r6, [pc, #164]	; (8016b9c <GUI_Text_Bluetooth+0xac>)
	TFT_SetTextColor(TFT_White);
 8016af6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016afa:	460f      	mov	r7, r1
	TFT_SetTextColor(TFT_White);
 8016afc:	f006 f94e 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b00:	2063      	movs	r0, #99	; 0x63
 8016b02:	f006 f951 	bl	801cda8 <TFT_SetBackColor>
	TFT_DrawChar(X+13, Y+2, 'l');
 8016b06:	1cbd      	adds	r5, r7, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016b08:	4630      	mov	r0, r6
	TFT_DrawChar(X+13, Y+2, 'l');
 8016b0a:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16EN_arch_small);
 8016b0c:	f006 f940 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'l');
 8016b10:	f104 000d 	add.w	r0, r4, #13
 8016b14:	4629      	mov	r1, r5
 8016b16:	226c      	movs	r2, #108	; 0x6c
 8016b18:	b280      	uxth	r0, r0
 8016b1a:	f006 fa03 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 't');
 8016b1e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 8016b22:	4629      	mov	r1, r5
 8016b24:	2274      	movs	r2, #116	; 0x74
 8016b26:	b280      	uxth	r0, r0
 8016b28:	f006 f9fc 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y+2, 't');
 8016b2c:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8016b30:	4629      	mov	r1, r5
 8016b32:	2274      	movs	r2, #116	; 0x74
 8016b34:	b280      	uxth	r0, r0
 8016b36:	f006 f9f5 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016b3a:	4819      	ldr	r0, [pc, #100]	; (8016ba0 <GUI_Text_Bluetooth+0xb0>)
 8016b3c:	f006 f928 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'B');
 8016b40:	4639      	mov	r1, r7
 8016b42:	2242      	movs	r2, #66	; 0x42
 8016b44:	4620      	mov	r0, r4
 8016b46:	f006 f9ed 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	f006 f920 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+23, Y+2, 'u');
 8016b50:	f104 0017 	add.w	r0, r4, #23
 8016b54:	4629      	mov	r1, r5
 8016b56:	2275      	movs	r2, #117	; 0x75
 8016b58:	b280      	uxth	r0, r0
 8016b5a:	f006 f9e3 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+36, Y+2, 'e');
 8016b5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016b62:	4629      	mov	r1, r5
 8016b64:	2265      	movs	r2, #101	; 0x65
 8016b66:	b280      	uxth	r0, r0
 8016b68:	f006 f9dc 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'o');
 8016b6c:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8016b70:	4629      	mov	r1, r5
 8016b72:	226f      	movs	r2, #111	; 0x6f
 8016b74:	b280      	uxth	r0, r0
 8016b76:	f006 f9d5 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'o');
 8016b7a:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8016b7e:	4629      	mov	r1, r5
 8016b80:	226f      	movs	r2, #111	; 0x6f
 8016b82:	b280      	uxth	r0, r0
 8016b84:	f006 f9ce 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y+2, 'h');
 8016b88:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 8016b8c:	4629      	mov	r1, r5
 8016b8e:	2268      	movs	r2, #104	; 0x68
 8016b90:	b280      	uxth	r0, r0
}
 8016b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+91, Y+2, 'h');
 8016b96:	f006 b9c5 	b.w	801cf24 <TFT_DrawChar>
 8016b9a:	bf00      	nop
 8016b9c:	200001c0 	.word	0x200001c0
 8016ba0:	200001b0 	.word	0x200001b0

08016ba4 <GUI_Text_A>:

void GUI_Text_A(uint16_t X, uint16_t Y)
{
 8016ba4:	b538      	push	{r3, r4, r5, lr}
 8016ba6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016ba8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016bac:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016bae:	f006 f8f5 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016bb2:	2063      	movs	r0, #99	; 0x63
 8016bb4:	f006 f8f8 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016bb8:	4804      	ldr	r0, [pc, #16]	; (8016bcc <GUI_Text_A+0x28>)
 8016bba:	f006 f8e9 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'A');
 8016bbe:	4629      	mov	r1, r5
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	2241      	movs	r2, #65	; 0x41
}
 8016bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'A');
 8016bc8:	f006 b9ac 	b.w	801cf24 <TFT_DrawChar>
 8016bcc:	200001b0 	.word	0x200001b0

08016bd0 <GUI_Text_D65>:

void GUI_Text_D65(uint16_t X, uint16_t Y)
{
 8016bd0:	b538      	push	{r3, r4, r5, lr}
 8016bd2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016bd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016bd8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016bda:	f006 f8df 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016bde:	2063      	movs	r0, #99	; 0x63
 8016be0:	f006 f8e2 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016be4:	480b      	ldr	r0, [pc, #44]	; (8016c14 <GUI_Text_D65+0x44>)
 8016be6:	f006 f8d3 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016bea:	4629      	mov	r1, r5
 8016bec:	4620      	mov	r0, r4
 8016bee:	2244      	movs	r2, #68	; 0x44
 8016bf0:	f006 f998 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '6');
 8016bf4:	f104 000f 	add.w	r0, r4, #15
 8016bf8:	4629      	mov	r1, r5
 8016bfa:	2236      	movs	r2, #54	; 0x36
 8016bfc:	b280      	uxth	r0, r0
 8016bfe:	f006 f991 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, '5');
 8016c02:	f104 0020 	add.w	r0, r4, #32
 8016c06:	4629      	mov	r1, r5
 8016c08:	2235      	movs	r2, #53	; 0x35
 8016c0a:	b280      	uxth	r0, r0
}
 8016c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+32, Y, '5');
 8016c10:	f006 b988 	b.w	801cf24 <TFT_DrawChar>
 8016c14:	200001b0 	.word	0x200001b0

08016c18 <GUI_Text_C>:

void GUI_Text_C(uint16_t X, uint16_t Y)
{
 8016c18:	b538      	push	{r3, r4, r5, lr}
 8016c1a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016c1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016c20:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016c22:	f006 f8bb 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c26:	2063      	movs	r0, #99	; 0x63
 8016c28:	f006 f8be 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016c2c:	4804      	ldr	r0, [pc, #16]	; (8016c40 <GUI_Text_C+0x28>)
 8016c2e:	f006 f8af 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016c32:	4629      	mov	r1, r5
 8016c34:	4620      	mov	r0, r4
 8016c36:	2243      	movs	r2, #67	; 0x43
}
 8016c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'C');
 8016c3c:	f006 b972 	b.w	801cf24 <TFT_DrawChar>
 8016c40:	200001b0 	.word	0x200001b0

08016c44 <GUI_Text_D50>:

void GUI_Text_D50(uint16_t X, uint16_t Y)
{
 8016c44:	b538      	push	{r3, r4, r5, lr}
 8016c46:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016c48:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016c4c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016c4e:	f006 f8a5 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c52:	2063      	movs	r0, #99	; 0x63
 8016c54:	f006 f8a8 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016c58:	480b      	ldr	r0, [pc, #44]	; (8016c88 <GUI_Text_D50+0x44>)
 8016c5a:	f006 f899 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016c5e:	4629      	mov	r1, r5
 8016c60:	4620      	mov	r0, r4
 8016c62:	2244      	movs	r2, #68	; 0x44
 8016c64:	f006 f95e 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8016c68:	f104 000f 	add.w	r0, r4, #15
 8016c6c:	4629      	mov	r1, r5
 8016c6e:	2235      	movs	r2, #53	; 0x35
 8016c70:	b280      	uxth	r0, r0
 8016c72:	f006 f957 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '0');
 8016c76:	f104 001f 	add.w	r0, r4, #31
 8016c7a:	4629      	mov	r1, r5
 8016c7c:	2230      	movs	r2, #48	; 0x30
 8016c7e:	b280      	uxth	r0, r0
}
 8016c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '0');
 8016c84:	f006 b94e 	b.w	801cf24 <TFT_DrawChar>
 8016c88:	200001b0 	.word	0x200001b0

08016c8c <GUI_Text_D55>:

void GUI_Text_D55(uint16_t X, uint16_t Y)
{
 8016c8c:	b538      	push	{r3, r4, r5, lr}
 8016c8e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016c90:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016c94:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016c96:	f006 f881 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c9a:	2063      	movs	r0, #99	; 0x63
 8016c9c:	f006 f884 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016ca0:	480b      	ldr	r0, [pc, #44]	; (8016cd0 <GUI_Text_D55+0x44>)
 8016ca2:	f006 f875 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016ca6:	4629      	mov	r1, r5
 8016ca8:	4620      	mov	r0, r4
 8016caa:	2244      	movs	r2, #68	; 0x44
 8016cac:	f006 f93a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8016cb0:	f104 000f 	add.w	r0, r4, #15
 8016cb4:	4629      	mov	r1, r5
 8016cb6:	2235      	movs	r2, #53	; 0x35
 8016cb8:	b280      	uxth	r0, r0
 8016cba:	f006 f933 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8016cbe:	f104 001f 	add.w	r0, r4, #31
 8016cc2:	4629      	mov	r1, r5
 8016cc4:	2235      	movs	r2, #53	; 0x35
 8016cc6:	b280      	uxth	r0, r0
}
 8016cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016ccc:	f006 b92a 	b.w	801cf24 <TFT_DrawChar>
 8016cd0:	200001b0 	.word	0x200001b0

08016cd4 <GUI_Text_D75>:

void GUI_Text_D75(uint16_t X, uint16_t Y)
{
 8016cd4:	b538      	push	{r3, r4, r5, lr}
 8016cd6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016cd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016cdc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016cde:	f006 f85d 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016ce2:	2063      	movs	r0, #99	; 0x63
 8016ce4:	f006 f860 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016ce8:	480b      	ldr	r0, [pc, #44]	; (8016d18 <GUI_Text_D75+0x44>)
 8016cea:	f006 f851 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016cee:	4629      	mov	r1, r5
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	2244      	movs	r2, #68	; 0x44
 8016cf4:	f006 f916 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '7');
 8016cf8:	f104 000f 	add.w	r0, r4, #15
 8016cfc:	4629      	mov	r1, r5
 8016cfe:	2237      	movs	r2, #55	; 0x37
 8016d00:	b280      	uxth	r0, r0
 8016d02:	f006 f90f 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8016d06:	f104 001f 	add.w	r0, r4, #31
 8016d0a:	4629      	mov	r1, r5
 8016d0c:	2235      	movs	r2, #53	; 0x35
 8016d0e:	b280      	uxth	r0, r0
}
 8016d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016d14:	f006 b906 	b.w	801cf24 <TFT_DrawChar>
 8016d18:	200001b0 	.word	0x200001b0

08016d1c <GUI_Text_CIE_xy>:


void GUI_Text_CIE_xy(uint16_t X, uint16_t Y)
{
 8016d1c:	b538      	push	{r3, r4, r5, lr}
 8016d1e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016d20:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016d24:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016d26:	f006 f839 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016d2a:	2063      	movs	r0, #99	; 0x63
 8016d2c:	f006 f83c 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016d30:	4815      	ldr	r0, [pc, #84]	; (8016d88 <GUI_Text_CIE_xy+0x6c>)
 8016d32:	f006 f82d 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016d36:	4621      	mov	r1, r4
 8016d38:	4628      	mov	r0, r5
 8016d3a:	2243      	movs	r2, #67	; 0x43
 8016d3c:	f006 f8f2 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016d40:	f105 000d 	add.w	r0, r5, #13
 8016d44:	4621      	mov	r1, r4
 8016d46:	2249      	movs	r2, #73	; 0x49
 8016d48:	b280      	uxth	r0, r0
 8016d4a:	f006 f8eb 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016d4e:	f105 001b 	add.w	r0, r5, #27
 8016d52:	4621      	mov	r1, r4
 8016d54:	2245      	movs	r2, #69	; 0x45
 8016d56:	b280      	uxth	r0, r0
 8016d58:	f006 f8e4 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8016d5c:	3401      	adds	r4, #1
	TFT_SetFont(&Font16EN_arch_small);
 8016d5e:	480b      	ldr	r0, [pc, #44]	; (8016d8c <GUI_Text_CIE_xy+0x70>)
 8016d60:	f006 f816 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016d64:	b2a4      	uxth	r4, r4
 8016d66:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016d6a:	4621      	mov	r1, r4
 8016d6c:	2278      	movs	r2, #120	; 0x78
 8016d6e:	b280      	uxth	r0, r0
 8016d70:	f006 f8d8 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+61, Y+1, 'y');
 8016d74:	f105 003d 	add.w	r0, r5, #61	; 0x3d
 8016d78:	4621      	mov	r1, r4
 8016d7a:	2279      	movs	r2, #121	; 0x79
 8016d7c:	b280      	uxth	r0, r0
}
 8016d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+61, Y+1, 'y');
 8016d82:	f006 b8cf 	b.w	801cf24 <TFT_DrawChar>
 8016d86:	bf00      	nop
 8016d88:	200001b0 	.word	0x200001b0
 8016d8c:	200001c0 	.word	0x200001c0

08016d90 <GUI_Text_CRI>:

void GUI_Text_CRI(uint16_t X, uint16_t Y)
{
 8016d90:	b538      	push	{r3, r4, r5, lr}
 8016d92:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016d94:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016d98:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016d9a:	f005 ffff 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016d9e:	2063      	movs	r0, #99	; 0x63
 8016da0:	f006 f802 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016da4:	480b      	ldr	r0, [pc, #44]	; (8016dd4 <GUI_Text_CRI+0x44>)
 8016da6:	f005 fff3 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+27, Y, 'I');
 8016daa:	f104 001b 	add.w	r0, r4, #27
 8016dae:	4629      	mov	r1, r5
 8016db0:	2249      	movs	r2, #73	; 0x49
 8016db2:	b280      	uxth	r0, r0
 8016db4:	f006 f8b6 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'C');
 8016db8:	4629      	mov	r1, r5
 8016dba:	4620      	mov	r0, r4
 8016dbc:	2243      	movs	r2, #67	; 0x43
 8016dbe:	f006 f8b1 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'R');
 8016dc2:	f104 000d 	add.w	r0, r4, #13
 8016dc6:	4629      	mov	r1, r5
 8016dc8:	2252      	movs	r2, #82	; 0x52
 8016dca:	b280      	uxth	r0, r0
}
 8016dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+13, Y, 'R');
 8016dd0:	f006 b8a8 	b.w	801cf24 <TFT_DrawChar>
 8016dd4:	200001b0 	.word	0x200001b0

08016dd8 <GUI_Text_CQS>:

void GUI_Text_CQS(uint16_t X, uint16_t Y)
{
 8016dd8:	b538      	push	{r3, r4, r5, lr}
 8016dda:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016ddc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016de0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016de2:	f005 ffdb 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016de6:	2063      	movs	r0, #99	; 0x63
 8016de8:	f005 ffde 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016dec:	480b      	ldr	r0, [pc, #44]	; (8016e1c <GUI_Text_CQS+0x44>)
 8016dee:	f005 ffcf 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016df2:	4629      	mov	r1, r5
 8016df4:	4620      	mov	r0, r4
 8016df6:	2243      	movs	r2, #67	; 0x43
 8016df8:	f006 f894 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'Q');
 8016dfc:	f104 000d 	add.w	r0, r4, #13
 8016e00:	4629      	mov	r1, r5
 8016e02:	2251      	movs	r2, #81	; 0x51
 8016e04:	b280      	uxth	r0, r0
 8016e06:	f006 f88d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'S');
 8016e0a:	f104 001c 	add.w	r0, r4, #28
 8016e0e:	4629      	mov	r1, r5
 8016e10:	2253      	movs	r2, #83	; 0x53
 8016e12:	b280      	uxth	r0, r0
}
 8016e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'S');
 8016e18:	f006 b884 	b.w	801cf24 <TFT_DrawChar>
 8016e1c:	200001b0 	.word	0x200001b0

08016e20 <GUI_Text_SP>:



void GUI_Text_SP(uint16_t X, uint16_t Y)
{
 8016e20:	b538      	push	{r3, r4, r5, lr}
 8016e22:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016e24:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e28:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016e2a:	f005 ffb7 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e2e:	2063      	movs	r0, #99	; 0x63
 8016e30:	f005 ffba 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016e34:	480b      	ldr	r0, [pc, #44]	; (8016e64 <GUI_Text_SP+0x44>)
 8016e36:	f005 ffab 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+13, Y, '/');
 8016e3a:	f104 000d 	add.w	r0, r4, #13
 8016e3e:	4629      	mov	r1, r5
 8016e40:	222f      	movs	r2, #47	; 0x2f
 8016e42:	b280      	uxth	r0, r0
 8016e44:	f006 f86e 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'S');
 8016e48:	4629      	mov	r1, r5
 8016e4a:	4620      	mov	r0, r4
 8016e4c:	2253      	movs	r2, #83	; 0x53
 8016e4e:	f006 f869 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'P');
 8016e52:	f104 001c 	add.w	r0, r4, #28
 8016e56:	4629      	mov	r1, r5
 8016e58:	2250      	movs	r2, #80	; 0x50
 8016e5a:	b280      	uxth	r0, r0
}
 8016e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'P');
 8016e60:	f006 b860 	b.w	801cf24 <TFT_DrawChar>
 8016e64:	200001b0 	.word	0x200001b0

08016e68 <GUI_Text_lambda_d>:



void GUI_Text_lambda_d(uint16_t X, uint16_t Y)
{
 8016e68:	b538      	push	{r3, r4, r5, lr}
 8016e6a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016e6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e70:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016e72:	f005 ff93 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e76:	2063      	movs	r0, #99	; 0x63
 8016e78:	f005 ff96 	bl	801cda8 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8016e7c:	480a      	ldr	r0, [pc, #40]	; (8016ea8 <GUI_Text_lambda_d+0x40>)
 8016e7e:	f005 ff87 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 8016e82:	4629      	mov	r1, r5
 8016e84:	227f      	movs	r2, #127	; 0x7f
 8016e86:	4620      	mov	r0, r4
 8016e88:	f006 f84c 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016e8c:	4807      	ldr	r0, [pc, #28]	; (8016eac <GUI_Text_lambda_d+0x44>)
 8016e8e:	f005 ff7f 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'd');
 8016e92:	1de9      	adds	r1, r5, #7
 8016e94:	f104 000f 	add.w	r0, r4, #15
 8016e98:	2264      	movs	r2, #100	; 0x64
 8016e9a:	b289      	uxth	r1, r1
 8016e9c:	b280      	uxth	r0, r0
}
 8016e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'd');
 8016ea2:	f006 b83f 	b.w	801cf24 <TFT_DrawChar>
 8016ea6:	bf00      	nop
 8016ea8:	200001b0 	.word	0x200001b0
 8016eac:	200001c0 	.word	0x200001c0

08016eb0 <GUI_Text_V_lambda>:
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+15, Y+7, 'c');
}

void GUI_Text_V_lambda(uint16_t X, uint16_t Y)
{
 8016eb0:	b538      	push	{r3, r4, r5, lr}
 8016eb2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016eb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016eb8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016eba:	f005 ff6f 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016ebe:	2063      	movs	r0, #99	; 0x63
 8016ec0:	f005 ff72 	bl	801cda8 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8016ec4:	4824      	ldr	r0, [pc, #144]	; (8016f58 <GUI_Text_V_lambda+0xa8>)
 8016ec6:	f005 ff63 	bl	801cd90 <TFT_SetFont>

	TFT_DrawChar(X+13, Y, '(');
 8016eca:	f104 000d 	add.w	r0, r4, #13
 8016ece:	4629      	mov	r1, r5
 8016ed0:	2228      	movs	r2, #40	; 0x28
 8016ed2:	b280      	uxth	r0, r0
 8016ed4:	f006 f826 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y, ')');
 8016ed8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016edc:	4629      	mov	r1, r5
 8016ede:	2229      	movs	r2, #41	; 0x29
 8016ee0:	b280      	uxth	r0, r0
 8016ee2:	f006 f81f 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'V');
 8016ee6:	4629      	mov	r1, r5
 8016ee8:	4620      	mov	r0, r4
 8016eea:	2256      	movs	r2, #86	; 0x56
 8016eec:	f006 f81a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y, '~'+1);
 8016ef0:	f104 001a 	add.w	r0, r4, #26
 8016ef4:	4629      	mov	r1, r5
 8016ef6:	227f      	movs	r2, #127	; 0x7f
 8016ef8:	b280      	uxth	r0, r0
 8016efa:	f006 f813 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y, '/');
 8016efe:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8016f02:	4629      	mov	r1, r5
 8016f04:	222f      	movs	r2, #47	; 0x2f
 8016f06:	b280      	uxth	r0, r0
 8016f08:	f006 f80c 	bl	801cf24 <TFT_DrawChar>
		
	TFT_DrawChar(X+80, Y, '('-1);
 8016f0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016f10:	4629      	mov	r1, r5
 8016f12:	2227      	movs	r2, #39	; 0x27
 8016f14:	b280      	uxth	r0, r0
 8016f16:	f006 f805 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y, '(');
 8016f1a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8016f1e:	4629      	mov	r1, r5
 8016f20:	2228      	movs	r2, #40	; 0x28
 8016f22:	b280      	uxth	r0, r0
 8016f24:	f005 fffe 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+117, Y, ')');
 8016f28:	f104 0075 	add.w	r0, r4, #117	; 0x75
 8016f2c:	4629      	mov	r1, r5
 8016f2e:	2229      	movs	r2, #41	; 0x29
 8016f30:	b280      	uxth	r0, r0
 8016f32:	f005 fff7 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+68, Y, 'V');
 8016f36:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8016f3a:	4629      	mov	r1, r5
 8016f3c:	2256      	movs	r2, #86	; 0x56
 8016f3e:	b280      	uxth	r0, r0
 8016f40:	f005 fff0 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, '~'+1);
 8016f44:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8016f48:	4629      	mov	r1, r5
 8016f4a:	227f      	movs	r2, #127	; 0x7f
 8016f4c:	b280      	uxth	r0, r0
		
}
 8016f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, '~'+1);
 8016f52:	f005 bfe7 	b.w	801cf24 <TFT_DrawChar>
 8016f56:	bf00      	nop
 8016f58:	200001b0 	.word	0x200001b0

08016f5c <GUI_Text_deltaE>:

void GUI_Text_deltaE(uint16_t X, uint16_t Y)
{
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016f60:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016f64:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016f66:	f005 ff19 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f6a:	2063      	movs	r0, #99	; 0x63
 8016f6c:	f005 ff1c 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016f70:	4808      	ldr	r0, [pc, #32]	; (8016f94 <GUI_Text_deltaE+0x38>)
 8016f72:	f005 ff0d 	bl	801cd90 <TFT_SetFont>

	TFT_DrawChar(X, Y, '~'+2);
 8016f76:	4629      	mov	r1, r5
 8016f78:	4620      	mov	r0, r4
 8016f7a:	2280      	movs	r2, #128	; 0x80
 8016f7c:	f005 ffd2 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+14, Y, 'E');
 8016f80:	f104 000e 	add.w	r0, r4, #14
 8016f84:	4629      	mov	r1, r5
 8016f86:	2245      	movs	r2, #69	; 0x45
 8016f88:	b280      	uxth	r0, r0
}
 8016f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+14, Y, 'E');
 8016f8e:	f005 bfc9 	b.w	801cf24 <TFT_DrawChar>
 8016f92:	bf00      	nop
 8016f94:	200001b0 	.word	0x200001b0

08016f98 <GUI_TextEn_umol>:

void GUI_TextEn_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 8016f98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016f9c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016f9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016fa2:	4616      	mov	r6, r2
 8016fa4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016fa6:	f005 fef9 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016faa:	2063      	movs	r0, #99	; 0x63
 8016fac:	f005 fefc 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8016fb0:	482b      	ldr	r0, [pc, #172]	; (8017060 <GUI_TextEn_umol+0xc8>)
 8016fb2:	f005 feed 	bl	801cd90 <TFT_SetFont>
	
	if(deg){
 8016fb6:	2e00      	cmp	r6, #0
 8016fb8:	d050      	beq.n	801705c <GUI_TextEn_umol+0xc4>
			TFT_DrawChar(X, Y, 'm'-65);
 8016fba:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X, Y, 'z'-64);
 8016fbc:	4629      	mov	r1, r5
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f005 ffb0 	bl	801cf24 <TFT_DrawChar>
	}
	TFT_DrawChar(X+8, Y, 'm'-65);
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016fc4:	f104 0710 	add.w	r7, r4, #16
	TFT_DrawChar(X+8, Y, 'm'-65);
 8016fc8:	f104 0008 	add.w	r0, r4, #8
 8016fcc:	4629      	mov	r1, r5
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016fce:	b2bf      	uxth	r7, r7
	TFT_DrawChar(X+8, Y, 'm'-65);
 8016fd0:	222c      	movs	r2, #44	; 0x2c
 8016fd2:	b280      	uxth	r0, r0
 8016fd4:	f005 ffa6 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016fd8:	4629      	mov	r1, r5
 8016fda:	4638      	mov	r0, r7
 8016fdc:	222e      	movs	r2, #46	; 0x2e
 8016fde:	f005 ffa1 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+22, Y, 'l'-65);
 8016fe2:	f104 0016 	add.w	r0, r4, #22
 8016fe6:	4629      	mov	r1, r5
 8016fe8:	222b      	movs	r2, #43	; 0x2b
 8016fea:	b280      	uxth	r0, r0
 8016fec:	f005 ff9a 	bl	801cf24 <TFT_DrawChar>
	
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8016ff0:	f105 030a 	add.w	r3, r5, #10
 8016ff4:	b29b      	uxth	r3, r3
 8016ff6:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016ffa:	f104 0219 	add.w	r2, r4, #25
 8016ffe:	4619      	mov	r1, r3
 8017000:	4620      	mov	r0, r4
 8017002:	f8cd 8000 	str.w	r8, [sp]
 8017006:	b292      	uxth	r2, r2
	
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8017008:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 801700c:	f005 fc3a 	bl	801c884 <TFT_DrawLine>
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8017010:	b2b6      	uxth	r6, r6
 8017012:	f104 000a 	add.w	r0, r4, #10
 8017016:	4631      	mov	r1, r6
 8017018:	223b      	movs	r2, #59	; 0x3b
 801701a:	b280      	uxth	r0, r0
 801701c:	f005 ff82 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+2, Y+11, 'm'-65);
 8017020:	1ca0      	adds	r0, r4, #2
 8017022:	4631      	mov	r1, r6
 8017024:	222c      	movs	r2, #44	; 0x2c
 8017026:	b280      	uxth	r0, r0
 8017028:	f005 ff7c 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawRectangle(X+16, Y+14, X+17, Y+15, TFT_White);
 801702c:	f105 030f 	add.w	r3, r5, #15
 8017030:	f104 0211 	add.w	r2, r4, #17
 8017034:	f105 010e 	add.w	r1, r5, #14
 8017038:	4638      	mov	r0, r7
 801703a:	f8cd 8000 	str.w	r8, [sp]
 801703e:	b29b      	uxth	r3, r3
 8017040:	b292      	uxth	r2, r2
 8017042:	b289      	uxth	r1, r1
 8017044:	f005 fc93 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8017048:	f104 0013 	add.w	r0, r4, #19
 801704c:	2232      	movs	r2, #50	; 0x32
 801704e:	4631      	mov	r1, r6
 8017050:	b280      	uxth	r0, r0
}
 8017052:	b002      	add	sp, #8
 8017054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8017058:	f005 bf64 	b.w	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X, Y, 'z'-64);
 801705c:	223a      	movs	r2, #58	; 0x3a
 801705e:	e7ad      	b.n	8016fbc <GUI_TextEn_umol+0x24>
 8017060:	20000190 	.word	0x20000190

08017064 <GUI_TextEn_umol_sr>:

void GUI_TextEn_umol_sr(uint16_t X, uint16_t Y, uint8_t deg)
{
 8017064:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017068:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801706a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801706e:	460d      	mov	r5, r1
 8017070:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 8017072:	f005 fe93 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017076:	2063      	movs	r0, #99	; 0x63
 8017078:	f005 fe96 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 801707c:	483b      	ldr	r0, [pc, #236]	; (801716c <GUI_TextEn_umol_sr+0x108>)
 801707e:	f005 fe87 	bl	801cd90 <TFT_SetFont>
 8017082:	f104 0009 	add.w	r0, r4, #9
	
	if(deg){
 8017086:	2e00      	cmp	r6, #0
 8017088:	d06d      	beq.n	8017166 <GUI_TextEn_umol_sr+0x102>
			TFT_DrawChar(X+9, Y, 'm'-65);
 801708a:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X+9, Y, 'z'-64);
 801708c:	4629      	mov	r1, r5
 801708e:	b280      	uxth	r0, r0
 8017090:	f005 ff48 	bl	801cf24 <TFT_DrawChar>
	}
	TFT_DrawChar(X+17, Y, 'm'-65);
 8017094:	f104 0011 	add.w	r0, r4, #17
 8017098:	4629      	mov	r1, r5
 801709a:	222c      	movs	r2, #44	; 0x2c
 801709c:	b280      	uxth	r0, r0
 801709e:	f005 ff41 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+25, Y, 'o'-65);
 80170a2:	f104 0019 	add.w	r0, r4, #25
 80170a6:	4629      	mov	r1, r5
 80170a8:	222e      	movs	r2, #46	; 0x2e
 80170aa:	b280      	uxth	r0, r0
 80170ac:	f005 ff3a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'l'-65);
 80170b0:	f104 001f 	add.w	r0, r4, #31
 80170b4:	4629      	mov	r1, r5
 80170b6:	222b      	movs	r2, #43	; 0x2b
 80170b8:	b280      	uxth	r0, r0
 80170ba:	f005 ff33 	bl	801cf24 <TFT_DrawChar>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 80170be:	f105 030a 	add.w	r3, r5, #10
 80170c2:	b29b      	uxth	r3, r3
 80170c4:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80170c8:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 80170cc:	1ce0      	adds	r0, r4, #3
 80170ce:	4619      	mov	r1, r3
 80170d0:	f8cd 8000 	str.w	r8, [sp]
 80170d4:	b292      	uxth	r2, r2
 80170d6:	b280      	uxth	r0, r0
	
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 80170d8:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 80170dc:	f005 fbd2 	bl	801c884 <TFT_DrawLine>
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 80170e0:	b2b6      	uxth	r6, r6
 80170e2:	f104 000d 	add.w	r0, r4, #13
 80170e6:	4631      	mov	r1, r6
 80170e8:	223b      	movs	r2, #59	; 0x3b
 80170ea:	b280      	uxth	r0, r0
 80170ec:	f005 ff1a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 80170f0:	1d60      	adds	r0, r4, #5
 80170f2:	4631      	mov	r1, r6
 80170f4:	222c      	movs	r2, #44	; 0x2c
 80170f6:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 80170f8:	f105 070e 	add.w	r7, r5, #14
 80170fc:	350f      	adds	r5, #15
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 80170fe:	f005 ff11 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8017102:	b2bf      	uxth	r7, r7
 8017104:	b2ad      	uxth	r5, r5
 8017106:	f104 0214 	add.w	r2, r4, #20
 801710a:	f104 0013 	add.w	r0, r4, #19
 801710e:	462b      	mov	r3, r5
 8017110:	4639      	mov	r1, r7
 8017112:	f8cd 8000 	str.w	r8, [sp]
 8017116:	b292      	uxth	r2, r2
 8017118:	b280      	uxth	r0, r0
 801711a:	f005 fc28 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawChar(X+22, Y+11, 's'-65);
 801711e:	f104 0016 	add.w	r0, r4, #22
 8017122:	4631      	mov	r1, r6
 8017124:	2232      	movs	r2, #50	; 0x32
 8017126:	b280      	uxth	r0, r0
 8017128:	f005 fefc 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawRectangle(X+30, Y+14, X+36, Y+15, TFT_White);
 801712c:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8017130:	f104 001e 	add.w	r0, r4, #30
 8017134:	462b      	mov	r3, r5
 8017136:	4639      	mov	r1, r7
 8017138:	f8cd 8000 	str.w	r8, [sp]
 801713c:	b292      	uxth	r2, r2
 801713e:	b280      	uxth	r0, r0
 8017140:	f005 fc15 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawChar(X+32, Y+11, 's'-65);
 8017144:	f104 0020 	add.w	r0, r4, #32
 8017148:	4631      	mov	r1, r6
 801714a:	2232      	movs	r2, #50	; 0x32
 801714c:	b280      	uxth	r0, r0
 801714e:	f005 fee9 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 8017152:	f104 0027 	add.w	r0, r4, #39	; 0x27
 8017156:	2231      	movs	r2, #49	; 0x31
 8017158:	4631      	mov	r1, r6
 801715a:	b280      	uxth	r0, r0
}
 801715c:	b002      	add	sp, #8
 801715e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 8017162:	f005 bedf 	b.w	801cf24 <TFT_DrawChar>
			TFT_DrawChar(X+9, Y, 'z'-64);
 8017166:	223a      	movs	r2, #58	; 0x3a
 8017168:	e790      	b.n	801708c <GUI_TextEn_umol_sr+0x28>
 801716a:	bf00      	nop
 801716c:	20000190 	.word	0x20000190

08017170 <GUI_Text_On>:


void GUI_Text_On(uint16_t X, uint16_t Y)
{
 8017170:	b538      	push	{r3, r4, r5, lr}
 8017172:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017174:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017178:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801717a:	f005 fe0f 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801717e:	2063      	movs	r0, #99	; 0x63
 8017180:	f005 fe12 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017184:	480a      	ldr	r0, [pc, #40]	; (80171b0 <GUI_Text_On+0x40>)
 8017186:	f005 fe03 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 801718a:	4629      	mov	r1, r5
 801718c:	224f      	movs	r2, #79	; 0x4f
 801718e:	4620      	mov	r0, r4
 8017190:	f005 fec8 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017194:	4807      	ldr	r0, [pc, #28]	; (80171b4 <GUI_Text_On+0x44>)
 8017196:	f005 fdfb 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 801719a:	1ca9      	adds	r1, r5, #2
 801719c:	f104 0010 	add.w	r0, r4, #16
 80171a0:	226e      	movs	r2, #110	; 0x6e
 80171a2:	b289      	uxth	r1, r1
 80171a4:	b280      	uxth	r0, r0
	
}
 80171a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+16, Y+2, 'n');
 80171aa:	f005 bebb 	b.w	801cf24 <TFT_DrawChar>
 80171ae:	bf00      	nop
 80171b0:	200001b0 	.word	0x200001b0
 80171b4:	200001c0 	.word	0x200001c0

080171b8 <GUI_Text_Off>:

void GUI_Text_Off(uint16_t X, uint16_t Y)
{
 80171b8:	b570      	push	{r4, r5, r6, lr}
 80171ba:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80171bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80171c0:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 80171c2:	f005 fdeb 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80171c6:	2063      	movs	r0, #99	; 0x63
 80171c8:	f005 fdee 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+13, Y+2, 'f');
 80171cc:	1cb4      	adds	r4, r6, #2
	TFT_SetFont(&Font16EN_arch_small);
 80171ce:	480e      	ldr	r0, [pc, #56]	; (8017208 <GUI_Text_Off+0x50>)
 80171d0:	f005 fdde 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'f');
 80171d4:	b2a4      	uxth	r4, r4
 80171d6:	f105 000d 	add.w	r0, r5, #13
 80171da:	4621      	mov	r1, r4
 80171dc:	2266      	movs	r2, #102	; 0x66
 80171de:	b280      	uxth	r0, r0
 80171e0:	f005 fea0 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y+2, 'f');
 80171e4:	f105 0017 	add.w	r0, r5, #23
 80171e8:	4621      	mov	r1, r4
 80171ea:	2266      	movs	r2, #102	; 0x66
 80171ec:	b280      	uxth	r0, r0
 80171ee:	f005 fe99 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80171f2:	4806      	ldr	r0, [pc, #24]	; (801720c <GUI_Text_Off+0x54>)
 80171f4:	f005 fdcc 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 80171f8:	4631      	mov	r1, r6
 80171fa:	4628      	mov	r0, r5
 80171fc:	224f      	movs	r2, #79	; 0x4f
}
 80171fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X, Y, 'O');
 8017202:	f005 be8f 	b.w	801cf24 <TFT_DrawChar>
 8017206:	bf00      	nop
 8017208:	200001c0 	.word	0x200001c0
 801720c:	200001b0 	.word	0x200001b0

08017210 <GUI_Text_EbEr>:

void GUI_Text_EbEr(uint16_t X, uint16_t Y)
{
 8017210:	b538      	push	{r3, r4, r5, lr}
 8017212:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017214:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017218:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801721a:	f005 fdbf 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801721e:	2063      	movs	r0, #99	; 0x63
 8017220:	f005 fdc2 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017224:	4815      	ldr	r0, [pc, #84]	; (801727c <GUI_Text_EbEr+0x6c>)
 8017226:	f005 fdb3 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 801722a:	1ca1      	adds	r1, r4, #2
 801722c:	f105 0013 	add.w	r0, r5, #19
 8017230:	222c      	movs	r2, #44	; 0x2c
 8017232:	b289      	uxth	r1, r1
 8017234:	b280      	uxth	r0, r0
 8017236:	f005 fe75 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'E');
 801723a:	4621      	mov	r1, r4
 801723c:	4628      	mov	r0, r5
 801723e:	2245      	movs	r2, #69	; 0x45
 8017240:	f005 fe70 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, 'E');
 8017244:	f105 0020 	add.w	r0, r5, #32
 8017248:	4621      	mov	r1, r4
 801724a:	2245      	movs	r2, #69	; 0x45
 801724c:	b280      	uxth	r0, r0
 801724e:	f005 fe69 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8017252:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8017254:	480a      	ldr	r0, [pc, #40]	; (8017280 <GUI_Text_EbEr+0x70>)
 8017256:	f005 fd9b 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 801725a:	b2a4      	uxth	r4, r4
 801725c:	f105 0012 	add.w	r0, r5, #18
 8017260:	4621      	mov	r1, r4
 8017262:	2242      	movs	r2, #66	; 0x42
 8017264:	b280      	uxth	r0, r0
 8017266:	f005 fe5d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+12, 'R');
 801726a:	f105 0032 	add.w	r0, r5, #50	; 0x32
 801726e:	4621      	mov	r1, r4
 8017270:	2252      	movs	r2, #82	; 0x52
 8017272:	b280      	uxth	r0, r0
}
 8017274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+50, Y+12, 'R');
 8017278:	f005 be54 	b.w	801cf24 <TFT_DrawChar>
 801727c:	200001b0 	.word	0x200001b0
 8017280:	20000218 	.word	0x20000218

08017284 <GUI_Text_LbLr>:

void GUI_Text_LbLr(uint16_t X, uint16_t Y)
{
 8017284:	b538      	push	{r3, r4, r5, lr}
 8017286:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017288:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801728c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801728e:	f005 fd85 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017292:	2063      	movs	r0, #99	; 0x63
 8017294:	f005 fd88 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017298:	4815      	ldr	r0, [pc, #84]	; (80172f0 <GUI_Text_LbLr+0x6c>)
 801729a:	f005 fd79 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 801729e:	1ca1      	adds	r1, r4, #2
 80172a0:	f105 0013 	add.w	r0, r5, #19
 80172a4:	222c      	movs	r2, #44	; 0x2c
 80172a6:	b289      	uxth	r1, r1
 80172a8:	b280      	uxth	r0, r0
 80172aa:	f005 fe3b 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'L');
 80172ae:	4621      	mov	r1, r4
 80172b0:	4628      	mov	r0, r5
 80172b2:	224c      	movs	r2, #76	; 0x4c
 80172b4:	f005 fe36 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y, 'L');
 80172b8:	f105 001e 	add.w	r0, r5, #30
 80172bc:	4621      	mov	r1, r4
 80172be:	224c      	movs	r2, #76	; 0x4c
 80172c0:	b280      	uxth	r0, r0
 80172c2:	f005 fe2f 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 80172c6:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 80172c8:	480a      	ldr	r0, [pc, #40]	; (80172f4 <GUI_Text_LbLr+0x70>)
 80172ca:	f005 fd61 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 80172ce:	b2a4      	uxth	r4, r4
 80172d0:	f105 0012 	add.w	r0, r5, #18
 80172d4:	4621      	mov	r1, r4
 80172d6:	2242      	movs	r2, #66	; 0x42
 80172d8:	b280      	uxth	r0, r0
 80172da:	f005 fe23 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+48, Y+12, 'R');
 80172de:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80172e2:	4621      	mov	r1, r4
 80172e4:	2252      	movs	r2, #82	; 0x52
 80172e6:	b280      	uxth	r0, r0
}
 80172e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+48, Y+12, 'R');
 80172ec:	f005 be1a 	b.w	801cf24 <TFT_DrawChar>
 80172f0:	200001b0 	.word	0x200001b0
 80172f4:	20000218 	.word	0x20000218

080172f8 <GUI_TextEn_Language>:
///////////////////////////////////////////////////////////////////////
void GUI_TextEn_Language(uint16_t X, uint16_t Y)
{	/* Print word 'Language' */
 80172f8:	b538      	push	{r3, r4, r5, lr}
 80172fa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80172fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	/* Print word 'Language' */
 8017300:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017302:	f005 fd4b 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017306:	2063      	movs	r0, #99	; 0x63
 8017308:	f005 fd4e 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801730c:	481f      	ldr	r0, [pc, #124]	; (801738c <GUI_TextEn_Language+0x94>)
 801730e:	f005 fd3f 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8017312:	4621      	mov	r1, r4
 8017314:	224c      	movs	r2, #76	; 0x4c
 8017316:	4628      	mov	r0, r5
 8017318:	f005 fe04 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+14, Y+2, 'a');
 801731c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801731e:	481c      	ldr	r0, [pc, #112]	; (8017390 <GUI_TextEn_Language+0x98>)
	TFT_DrawChar(X+14, Y+2, 'a');
 8017320:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017322:	f005 fd35 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+14, Y+2, 'a');
 8017326:	f105 000e 	add.w	r0, r5, #14
 801732a:	4621      	mov	r1, r4
 801732c:	2261      	movs	r2, #97	; 0x61
 801732e:	b280      	uxth	r0, r0
 8017330:	f005 fdf8 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y+2, 'n');
 8017334:	f105 001a 	add.w	r0, r5, #26
 8017338:	4621      	mov	r1, r4
 801733a:	226e      	movs	r2, #110	; 0x6e
 801733c:	b280      	uxth	r0, r0
 801733e:	f005 fdf1 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+2, 'g');
 8017342:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8017346:	4621      	mov	r1, r4
 8017348:	2267      	movs	r2, #103	; 0x67
 801734a:	b280      	uxth	r0, r0
 801734c:	f005 fdea 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'a');
 8017350:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8017354:	4621      	mov	r1, r4
 8017356:	2261      	movs	r2, #97	; 0x61
 8017358:	b280      	uxth	r0, r0
 801735a:	f005 fde3 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+52, Y+2, 'u');
 801735e:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8017362:	4621      	mov	r1, r4
 8017364:	2275      	movs	r2, #117	; 0x75
 8017366:	b280      	uxth	r0, r0
 8017368:	f005 fddc 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+77, Y+2, 'g');
 801736c:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8017370:	4621      	mov	r1, r4
 8017372:	2267      	movs	r2, #103	; 0x67
 8017374:	b280      	uxth	r0, r0
 8017376:	f005 fdd5 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y+2, 'e');
 801737a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801737e:	4621      	mov	r1, r4
 8017380:	2265      	movs	r2, #101	; 0x65
 8017382:	b280      	uxth	r0, r0
}
 8017384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+90, Y+2, 'e');
 8017388:	f005 bdcc 	b.w	801cf24 <TFT_DrawChar>
 801738c:	200001b8 	.word	0x200001b8
 8017390:	200001c8 	.word	0x200001c8

08017394 <GUI_TextEn_English>:
void GUI_TextEn_English(uint16_t X, uint16_t Y)
{
 8017394:	b538      	push	{r3, r4, r5, lr}
 8017396:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017398:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801739c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801739e:	f005 fcfd 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80173a2:	2063      	movs	r0, #99	; 0x63
 80173a4:	f005 fd00 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80173a8:	481c      	ldr	r0, [pc, #112]	; (801741c <GUI_TextEn_English+0x88>)
 80173aa:	f005 fcf1 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'E');
 80173ae:	4621      	mov	r1, r4
 80173b0:	2245      	movs	r2, #69	; 0x45
 80173b2:	4628      	mov	r0, r5
 80173b4:	f005 fdb6 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'n');
 80173b8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80173ba:	4819      	ldr	r0, [pc, #100]	; (8017420 <GUI_TextEn_English+0x8c>)
	TFT_DrawChar(X+16, Y+2, 'n');
 80173bc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80173be:	f005 fce7 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 80173c2:	f105 0010 	add.w	r0, r5, #16
 80173c6:	4621      	mov	r1, r4
 80173c8:	226e      	movs	r2, #110	; 0x6e
 80173ca:	b280      	uxth	r0, r0
 80173cc:	f005 fdaa 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'g');
 80173d0:	f105 001d 	add.w	r0, r5, #29
 80173d4:	4621      	mov	r1, r4
 80173d6:	2267      	movs	r2, #103	; 0x67
 80173d8:	b280      	uxth	r0, r0
 80173da:	f005 fda3 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'l');
 80173de:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 80173e2:	4621      	mov	r1, r4
 80173e4:	226c      	movs	r2, #108	; 0x6c
 80173e6:	b280      	uxth	r0, r0
 80173e8:	f005 fd9c 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 'i');
 80173ec:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 80173f0:	4621      	mov	r1, r4
 80173f2:	2269      	movs	r2, #105	; 0x69
 80173f4:	b280      	uxth	r0, r0
 80173f6:	f005 fd95 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 's');
 80173fa:	f105 0035 	add.w	r0, r5, #53	; 0x35
 80173fe:	4621      	mov	r1, r4
 8017400:	2273      	movs	r2, #115	; 0x73
 8017402:	b280      	uxth	r0, r0
 8017404:	f005 fd8e 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'h');
 8017408:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801740c:	4621      	mov	r1, r4
 801740e:	2268      	movs	r2, #104	; 0x68
 8017410:	b280      	uxth	r0, r0
	

}
 8017412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+65, Y+2, 'h');
 8017416:	f005 bd85 	b.w	801cf24 <TFT_DrawChar>
 801741a:	bf00      	nop
 801741c:	200001b8 	.word	0x200001b8
 8017420:	200001c8 	.word	0x200001c8

08017424 <GUI_TextEn_Info>:
void GUI_TextEn_Info(uint16_t X, uint16_t Y)
{
 8017424:	b538      	push	{r3, r4, r5, lr}
 8017426:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017428:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801742c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801742e:	f005 fcb5 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017432:	2063      	movs	r0, #99	; 0x63
 8017434:	f005 fcb8 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017438:	4811      	ldr	r0, [pc, #68]	; (8017480 <GUI_TextEn_Info+0x5c>)
 801743a:	f005 fca9 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 801743e:	4621      	mov	r1, r4
 8017440:	2249      	movs	r2, #73	; 0x49
 8017442:	4628      	mov	r0, r5
 8017444:	f005 fd6e 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+18, Y+2, 'f');
 8017448:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801744a:	480e      	ldr	r0, [pc, #56]	; (8017484 <GUI_TextEn_Info+0x60>)
 801744c:	f005 fca0 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'f');
 8017450:	b2a4      	uxth	r4, r4
 8017452:	f105 0012 	add.w	r0, r5, #18
 8017456:	4621      	mov	r1, r4
 8017458:	2266      	movs	r2, #102	; 0x66
 801745a:	b280      	uxth	r0, r0
 801745c:	f005 fd62 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+8, Y+2, 'n');
 8017460:	f105 0008 	add.w	r0, r5, #8
 8017464:	4621      	mov	r1, r4
 8017466:	226e      	movs	r2, #110	; 0x6e
 8017468:	b280      	uxth	r0, r0
 801746a:	f005 fd5b 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'o');
 801746e:	f105 001d 	add.w	r0, r5, #29
 8017472:	4621      	mov	r1, r4
 8017474:	226f      	movs	r2, #111	; 0x6f
 8017476:	b280      	uxth	r0, r0
}
 8017478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+29, Y+2, 'o');
 801747c:	f005 bd52 	b.w	801cf24 <TFT_DrawChar>
 8017480:	200001b8 	.word	0x200001b8
 8017484:	200001c8 	.word	0x200001c8

08017488 <GUI_TextEn_Radiance>:
void GUI_TextEn_Radiance(uint16_t X, uint16_t Y)
{
 8017488:	b538      	push	{r3, r4, r5, lr}
 801748a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801748c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017490:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017492:	f005 fc83 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017496:	2063      	movs	r0, #99	; 0x63
 8017498:	f005 fc86 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801749c:	481f      	ldr	r0, [pc, #124]	; (801751c <GUI_TextEn_Radiance+0x94>)
 801749e:	f005 fc77 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'R');
 80174a2:	4621      	mov	r1, r4
 80174a4:	2252      	movs	r2, #82	; 0x52
 80174a6:	4628      	mov	r0, r5
 80174a8:	f005 fd3c 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'a');
 80174ac:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80174ae:	481c      	ldr	r0, [pc, #112]	; (8017520 <GUI_TextEn_Radiance+0x98>)
	TFT_DrawChar(X+16, Y+2, 'a');
 80174b0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80174b2:	f005 fc6d 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 80174b6:	f105 0010 	add.w	r0, r5, #16
 80174ba:	4621      	mov	r1, r4
 80174bc:	2261      	movs	r2, #97	; 0x61
 80174be:	b280      	uxth	r0, r0
 80174c0:	f005 fd30 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'd');
 80174c4:	f105 001c 	add.w	r0, r5, #28
 80174c8:	4621      	mov	r1, r4
 80174ca:	2264      	movs	r2, #100	; 0x64
 80174cc:	b280      	uxth	r0, r0
 80174ce:	f005 fd29 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 80174d2:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80174d6:	4621      	mov	r1, r4
 80174d8:	2269      	movs	r2, #105	; 0x69
 80174da:	b280      	uxth	r0, r0
 80174dc:	f005 fd22 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'a');
 80174e0:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80174e4:	4621      	mov	r1, r4
 80174e6:	2261      	movs	r2, #97	; 0x61
 80174e8:	b280      	uxth	r0, r0
 80174ea:	f005 fd1b 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y+2, 'n');
 80174ee:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 80174f2:	4621      	mov	r1, r4
 80174f4:	226e      	movs	r2, #110	; 0x6e
 80174f6:	b280      	uxth	r0, r0
 80174f8:	f005 fd14 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'c');
 80174fc:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8017500:	4621      	mov	r1, r4
 8017502:	2263      	movs	r2, #99	; 0x63
 8017504:	b280      	uxth	r0, r0
 8017506:	f005 fd0d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+83, Y+2, 'e');
 801750a:	f105 0053 	add.w	r0, r5, #83	; 0x53
 801750e:	4621      	mov	r1, r4
 8017510:	2265      	movs	r2, #101	; 0x65
 8017512:	b280      	uxth	r0, r0
}
 8017514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+83, Y+2, 'e');
 8017518:	f005 bd04 	b.w	801cf24 <TFT_DrawChar>
 801751c:	200001b8 	.word	0x200001b8
 8017520:	200001c8 	.word	0x200001c8

08017524 <GUI_TextEn_Irradiance>:
void GUI_TextEn_Irradiance(uint16_t X, uint16_t Y)
{
 8017524:	b538      	push	{r3, r4, r5, lr}
 8017526:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017528:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801752c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801752e:	f005 fc35 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017532:	2063      	movs	r0, #99	; 0x63
 8017534:	f005 fc38 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017538:	4826      	ldr	r0, [pc, #152]	; (80175d4 <GUI_TextEn_Irradiance+0xb0>)
 801753a:	f005 fc29 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 801753e:	4621      	mov	r1, r4
 8017540:	2249      	movs	r2, #73	; 0x49
 8017542:	4628      	mov	r0, r5
 8017544:	f005 fcee 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+9, Y+2, 'r');
 8017548:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801754a:	4823      	ldr	r0, [pc, #140]	; (80175d8 <GUI_TextEn_Irradiance+0xb4>)
	TFT_DrawChar(X+9, Y+2, 'r');
 801754c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801754e:	f005 fc1f 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+9, Y+2, 'r');
 8017552:	f105 0009 	add.w	r0, r5, #9
 8017556:	4621      	mov	r1, r4
 8017558:	2272      	movs	r2, #114	; 0x72
 801755a:	b280      	uxth	r0, r0
 801755c:	f005 fce2 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+2, 'r');
 8017560:	f105 0015 	add.w	r0, r5, #21
 8017564:	4621      	mov	r1, r4
 8017566:	2272      	movs	r2, #114	; 0x72
 8017568:	b280      	uxth	r0, r0
 801756a:	f005 fcdb 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'a');
 801756e:	f105 0020 	add.w	r0, r5, #32
 8017572:	4621      	mov	r1, r4
 8017574:	2261      	movs	r2, #97	; 0x61
 8017576:	b280      	uxth	r0, r0
 8017578:	f005 fcd4 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y+2, 'd');
 801757c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8017580:	4621      	mov	r1, r4
 8017582:	2264      	movs	r2, #100	; 0x64
 8017584:	b280      	uxth	r0, r0
 8017586:	f005 fccd 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'i');
 801758a:	f105 0039 	add.w	r0, r5, #57	; 0x39
 801758e:	4621      	mov	r1, r4
 8017590:	2269      	movs	r2, #105	; 0x69
 8017592:	b280      	uxth	r0, r0
 8017594:	f005 fcc6 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+62, Y+2, 'a');
 8017598:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 801759c:	4621      	mov	r1, r4
 801759e:	2261      	movs	r2, #97	; 0x61
 80175a0:	b280      	uxth	r0, r0
 80175a2:	f005 fcbf 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y+2, 'n');
 80175a6:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 80175aa:	4621      	mov	r1, r4
 80175ac:	226e      	movs	r2, #110	; 0x6e
 80175ae:	b280      	uxth	r0, r0
 80175b0:	f005 fcb8 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'c');
 80175b4:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80175b8:	4621      	mov	r1, r4
 80175ba:	2263      	movs	r2, #99	; 0x63
 80175bc:	b280      	uxth	r0, r0
 80175be:	f005 fcb1 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 80175c2:	f105 0063 	add.w	r0, r5, #99	; 0x63
 80175c6:	4621      	mov	r1, r4
 80175c8:	2265      	movs	r2, #101	; 0x65
 80175ca:	b280      	uxth	r0, r0
}
 80175cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+99, Y+2, 'e');
 80175d0:	f005 bca8 	b.w	801cf24 <TFT_DrawChar>
 80175d4:	200001b8 	.word	0x200001b8
 80175d8:	200001c8 	.word	0x200001c8

080175dc <GUI_TextMsgEn_HighIrradiance>:

void GUI_TextMsgEn_HighIrradiance(uint16_t X, uint16_t Y)
{
 80175dc:	b538      	push	{r3, r4, r5, lr}
 80175de:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80175e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80175e4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80175e6:	f005 fbd9 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80175ea:	2063      	movs	r0, #99	; 0x63
 80175ec:	f005 fbdc 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80175f0:	4834      	ldr	r0, [pc, #208]	; (80176c4 <GUI_TextMsgEn_HighIrradiance+0xe8>)
 80175f2:	f005 fbcd 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 80175f6:	4621      	mov	r1, r4
 80175f8:	2248      	movs	r2, #72	; 0x48
 80175fa:	4628      	mov	r0, r5
 80175fc:	f005 fc92 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8017600:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017602:	4831      	ldr	r0, [pc, #196]	; (80176c8 <GUI_TextMsgEn_HighIrradiance+0xec>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8017604:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017606:	f005 fbc3 	bl	801cd90 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 801760a:	f105 0010 	add.w	r0, r5, #16
 801760e:	4621      	mov	r1, r4
 8017610:	2269      	movs	r2, #105	; 0x69
 8017612:	b280      	uxth	r0, r0
 8017614:	f005 fc86 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8017618:	f105 0017 	add.w	r0, r5, #23
 801761c:	4621      	mov	r1, r4
 801761e:	2267      	movs	r2, #103	; 0x67
 8017620:	b280      	uxth	r0, r0
 8017622:	f005 fc7f 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 8017626:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801762a:	4621      	mov	r1, r4
 801762c:	2268      	movs	r2, #104	; 0x68
 801762e:	b280      	uxth	r0, r0
 8017630:	f005 fc78 	bl	801cf24 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'i');
 8017634:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8017638:	4621      	mov	r1, r4
 801763a:	2269      	movs	r2, #105	; 0x69
 801763c:	b280      	uxth	r0, r0
 801763e:	f005 fc71 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+67, Y+2, 'r');
 8017642:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8017646:	4621      	mov	r1, r4
 8017648:	2272      	movs	r2, #114	; 0x72
 801764a:	b280      	uxth	r0, r0
 801764c:	f005 fc6a 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+79, Y+2, 'r');
 8017650:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8017654:	4621      	mov	r1, r4
 8017656:	2272      	movs	r2, #114	; 0x72
 8017658:	b280      	uxth	r0, r0
 801765a:	f005 fc63 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'a');
 801765e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8017662:	4621      	mov	r1, r4
 8017664:	2261      	movs	r2, #97	; 0x61
 8017666:	b280      	uxth	r0, r0
 8017668:	f005 fc5c 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+102, Y+2, 'd');
 801766c:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8017670:	4621      	mov	r1, r4
 8017672:	2264      	movs	r2, #100	; 0x64
 8017674:	b280      	uxth	r0, r0
 8017676:	f005 fc55 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+115, Y+2, 'i');
 801767a:	f105 0073 	add.w	r0, r5, #115	; 0x73
 801767e:	4621      	mov	r1, r4
 8017680:	2269      	movs	r2, #105	; 0x69
 8017682:	b280      	uxth	r0, r0
 8017684:	f005 fc4e 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'a');
 8017688:	f105 0078 	add.w	r0, r5, #120	; 0x78
 801768c:	4621      	mov	r1, r4
 801768e:	2261      	movs	r2, #97	; 0x61
 8017690:	b280      	uxth	r0, r0
 8017692:	f005 fc47 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'n');
 8017696:	f105 0084 	add.w	r0, r5, #132	; 0x84
 801769a:	4621      	mov	r1, r4
 801769c:	226e      	movs	r2, #110	; 0x6e
 801769e:	b280      	uxth	r0, r0
 80176a0:	f005 fc40 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+145, Y+2, 'c');
 80176a4:	f105 0091 	add.w	r0, r5, #145	; 0x91
 80176a8:	4621      	mov	r1, r4
 80176aa:	2263      	movs	r2, #99	; 0x63
 80176ac:	b280      	uxth	r0, r0
 80176ae:	f005 fc39 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+157, Y+2, 'e');
 80176b2:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 80176b6:	4621      	mov	r1, r4
 80176b8:	2265      	movs	r2, #101	; 0x65
 80176ba:	b280      	uxth	r0, r0
}
 80176bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+157, Y+2, 'e');
 80176c0:	f005 bc30 	b.w	801cf24 <TFT_DrawChar>
 80176c4:	200001b8 	.word	0x200001b8
 80176c8:	200001c8 	.word	0x200001c8

080176cc <GUI_TextMsgEn_HighRadiance>:

void GUI_TextMsgEn_HighRadiance(uint16_t X, uint16_t Y)
{
 80176cc:	b538      	push	{r3, r4, r5, lr}
 80176ce:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80176d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80176d4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80176d6:	f005 fb61 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80176da:	2063      	movs	r0, #99	; 0x63
 80176dc:	f005 fb64 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80176e0:	482d      	ldr	r0, [pc, #180]	; (8017798 <GUI_TextMsgEn_HighRadiance+0xcc>)
 80176e2:	f005 fb55 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 80176e6:	4621      	mov	r1, r4
 80176e8:	2248      	movs	r2, #72	; 0x48
 80176ea:	4628      	mov	r0, r5
 80176ec:	f005 fc1a 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 80176f0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80176f2:	482a      	ldr	r0, [pc, #168]	; (801779c <GUI_TextMsgEn_HighRadiance+0xd0>)
  TFT_DrawChar(X+16, Y+2, 'i');
 80176f4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80176f6:	f005 fb4b 	bl	801cd90 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 80176fa:	f105 0010 	add.w	r0, r5, #16
 80176fe:	4621      	mov	r1, r4
 8017700:	2269      	movs	r2, #105	; 0x69
 8017702:	b280      	uxth	r0, r0
 8017704:	f005 fc0e 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8017708:	f105 0017 	add.w	r0, r5, #23
 801770c:	4621      	mov	r1, r4
 801770e:	2267      	movs	r2, #103	; 0x67
 8017710:	b280      	uxth	r0, r0
 8017712:	f005 fc07 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 8017716:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801771a:	4621      	mov	r1, r4
 801771c:	2268      	movs	r2, #104	; 0x68
 801771e:	b280      	uxth	r0, r0
 8017720:	f005 fc00 	bl	801cf24 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'r');
 8017724:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8017728:	4621      	mov	r1, r4
 801772a:	2272      	movs	r2, #114	; 0x72
 801772c:	b280      	uxth	r0, r0
 801772e:	f005 fbf9 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+70, Y+2, 'a');
 8017732:	f105 0046 	add.w	r0, r5, #70	; 0x46
 8017736:	4621      	mov	r1, r4
 8017738:	2261      	movs	r2, #97	; 0x61
 801773a:	b280      	uxth	r0, r0
 801773c:	f005 fbf2 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+82, Y+2, 'd');
 8017740:	f105 0052 	add.w	r0, r5, #82	; 0x52
 8017744:	4621      	mov	r1, r4
 8017746:	2264      	movs	r2, #100	; 0x64
 8017748:	b280      	uxth	r0, r0
 801774a:	f005 fbeb 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'i');
 801774e:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 8017752:	4621      	mov	r1, r4
 8017754:	2269      	movs	r2, #105	; 0x69
 8017756:	b280      	uxth	r0, r0
 8017758:	f005 fbe4 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+100, Y+2, 'a');
 801775c:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8017760:	4621      	mov	r1, r4
 8017762:	2261      	movs	r2, #97	; 0x61
 8017764:	b280      	uxth	r0, r0
 8017766:	f005 fbdd 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+112, Y+2, 'n');
 801776a:	f105 0070 	add.w	r0, r5, #112	; 0x70
 801776e:	4621      	mov	r1, r4
 8017770:	226e      	movs	r2, #110	; 0x6e
 8017772:	b280      	uxth	r0, r0
 8017774:	f005 fbd6 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+125, Y+2, 'c');
 8017778:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 801777c:	4621      	mov	r1, r4
 801777e:	2263      	movs	r2, #99	; 0x63
 8017780:	b280      	uxth	r0, r0
 8017782:	f005 fbcf 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+137, Y+2, 'e');
 8017786:	f105 0089 	add.w	r0, r5, #137	; 0x89
 801778a:	4621      	mov	r1, r4
 801778c:	2265      	movs	r2, #101	; 0x65
 801778e:	b280      	uxth	r0, r0
}
 8017790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+137, Y+2, 'e');
 8017794:	f005 bbc6 	b.w	801cf24 <TFT_DrawChar>
 8017798:	200001b8 	.word	0x200001b8
 801779c:	200001c8 	.word	0x200001c8

080177a0 <GUI_TextMsgEn_LowRadiance>:

void GUI_TextMsgEn_LowRadiance(uint16_t X, uint16_t Y)
{
 80177a0:	b538      	push	{r3, r4, r5, lr}
 80177a2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80177a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80177a8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80177aa:	f005 faf7 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80177ae:	2063      	movs	r0, #99	; 0x63
 80177b0:	f005 fafa 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80177b4:	482a      	ldr	r0, [pc, #168]	; (8017860 <GUI_TextMsgEn_LowRadiance+0xc0>)
 80177b6:	f005 faeb 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80177ba:	4621      	mov	r1, r4
 80177bc:	224c      	movs	r2, #76	; 0x4c
 80177be:	4628      	mov	r0, r5
 80177c0:	f005 fbb0 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 80177c4:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80177c6:	4827      	ldr	r0, [pc, #156]	; (8017864 <GUI_TextMsgEn_LowRadiance+0xc4>)
  TFT_DrawChar(X+16, Y+2, 'o');
 80177c8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80177ca:	f005 fae1 	bl	801cd90 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 80177ce:	f105 0010 	add.w	r0, r5, #16
 80177d2:	4621      	mov	r1, r4
 80177d4:	226f      	movs	r2, #111	; 0x6f
 80177d6:	b280      	uxth	r0, r0
 80177d8:	f005 fba4 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 80177dc:	f105 001d 	add.w	r0, r5, #29
 80177e0:	4621      	mov	r1, r4
 80177e2:	2277      	movs	r2, #119	; 0x77
 80177e4:	b280      	uxth	r0, r0
 80177e6:	f005 fb9d 	bl	801cf24 <TFT_DrawChar>
  
  TFT_DrawChar(X+54, Y+2, 'r');
 80177ea:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80177ee:	4621      	mov	r1, r4
 80177f0:	2272      	movs	r2, #114	; 0x72
 80177f2:	b280      	uxth	r0, r0
 80177f4:	f005 fb96 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+65, Y+2, 'a');
 80177f8:	f105 0041 	add.w	r0, r5, #65	; 0x41
 80177fc:	4621      	mov	r1, r4
 80177fe:	2261      	movs	r2, #97	; 0x61
 8017800:	b280      	uxth	r0, r0
 8017802:	f005 fb8f 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+77, Y+2, 'd');
 8017806:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 801780a:	4621      	mov	r1, r4
 801780c:	2264      	movs	r2, #100	; 0x64
 801780e:	b280      	uxth	r0, r0
 8017810:	f005 fb88 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'i');
 8017814:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8017818:	4621      	mov	r1, r4
 801781a:	2269      	movs	r2, #105	; 0x69
 801781c:	b280      	uxth	r0, r0
 801781e:	f005 fb81 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'a');
 8017822:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 8017826:	4621      	mov	r1, r4
 8017828:	2261      	movs	r2, #97	; 0x61
 801782a:	b280      	uxth	r0, r0
 801782c:	f005 fb7a 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+107, Y+2, 'n');
 8017830:	f105 006b 	add.w	r0, r5, #107	; 0x6b
 8017834:	4621      	mov	r1, r4
 8017836:	226e      	movs	r2, #110	; 0x6e
 8017838:	b280      	uxth	r0, r0
 801783a:	f005 fb73 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'c');
 801783e:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8017842:	4621      	mov	r1, r4
 8017844:	2263      	movs	r2, #99	; 0x63
 8017846:	b280      	uxth	r0, r0
 8017848:	f005 fb6c 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'e');
 801784c:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8017850:	4621      	mov	r1, r4
 8017852:	2265      	movs	r2, #101	; 0x65
 8017854:	b280      	uxth	r0, r0
}
 8017856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+132, Y+2, 'e');
 801785a:	f005 bb63 	b.w	801cf24 <TFT_DrawChar>
 801785e:	bf00      	nop
 8017860:	200001b8 	.word	0x200001b8
 8017864:	200001c8 	.word	0x200001c8

08017868 <GUI_TextMsgEn_LowIrradiance>:

void GUI_TextMsgEn_LowIrradiance(uint16_t X, uint16_t Y)
{
 8017868:	b538      	push	{r3, r4, r5, lr}
 801786a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801786c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017870:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017872:	f005 fa93 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017876:	2063      	movs	r0, #99	; 0x63
 8017878:	f005 fa96 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801787c:	4831      	ldr	r0, [pc, #196]	; (8017944 <GUI_TextMsgEn_LowIrradiance+0xdc>)
 801787e:	f005 fa87 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8017882:	4621      	mov	r1, r4
 8017884:	224c      	movs	r2, #76	; 0x4c
 8017886:	4628      	mov	r0, r5
 8017888:	f005 fb4c 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 801788c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801788e:	482e      	ldr	r0, [pc, #184]	; (8017948 <GUI_TextMsgEn_LowIrradiance+0xe0>)
  TFT_DrawChar(X+16, Y+2, 'o');
 8017890:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017892:	f005 fa7d 	bl	801cd90 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8017896:	f105 0010 	add.w	r0, r5, #16
 801789a:	4621      	mov	r1, r4
 801789c:	226f      	movs	r2, #111	; 0x6f
 801789e:	b280      	uxth	r0, r0
 80178a0:	f005 fb40 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 80178a4:	f105 001d 	add.w	r0, r5, #29
 80178a8:	4621      	mov	r1, r4
 80178aa:	2277      	movs	r2, #119	; 0x77
 80178ac:	b280      	uxth	r0, r0
 80178ae:	f005 fb39 	bl	801cf24 <TFT_DrawChar>
	
  TFT_DrawChar(X+55, Y+2, 'i');
 80178b2:	f105 0037 	add.w	r0, r5, #55	; 0x37
 80178b6:	4621      	mov	r1, r4
 80178b8:	2269      	movs	r2, #105	; 0x69
 80178ba:	b280      	uxth	r0, r0
 80178bc:	f005 fb32 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+63, Y+2, 'r');
 80178c0:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 80178c4:	4621      	mov	r1, r4
 80178c6:	2272      	movs	r2, #114	; 0x72
 80178c8:	b280      	uxth	r0, r0
 80178ca:	f005 fb2b 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+75, Y+2, 'r');
 80178ce:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 80178d2:	4621      	mov	r1, r4
 80178d4:	2272      	movs	r2, #114	; 0x72
 80178d6:	b280      	uxth	r0, r0
 80178d8:	f005 fb24 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+86, Y+2, 'a');
 80178dc:	f105 0056 	add.w	r0, r5, #86	; 0x56
 80178e0:	4621      	mov	r1, r4
 80178e2:	2261      	movs	r2, #97	; 0x61
 80178e4:	b280      	uxth	r0, r0
 80178e6:	f005 fb1d 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+98, Y+2, 'd');
 80178ea:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80178ee:	4621      	mov	r1, r4
 80178f0:	2264      	movs	r2, #100	; 0x64
 80178f2:	b280      	uxth	r0, r0
 80178f4:	f005 fb16 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+111, Y+2, 'i');
 80178f8:	f105 006f 	add.w	r0, r5, #111	; 0x6f
 80178fc:	4621      	mov	r1, r4
 80178fe:	2269      	movs	r2, #105	; 0x69
 8017900:	b280      	uxth	r0, r0
 8017902:	f005 fb0f 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+116, Y+2, 'a');
 8017906:	f105 0074 	add.w	r0, r5, #116	; 0x74
 801790a:	4621      	mov	r1, r4
 801790c:	2261      	movs	r2, #97	; 0x61
 801790e:	b280      	uxth	r0, r0
 8017910:	f005 fb08 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+128, Y+2, 'n');
 8017914:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8017918:	4621      	mov	r1, r4
 801791a:	226e      	movs	r2, #110	; 0x6e
 801791c:	b280      	uxth	r0, r0
 801791e:	f005 fb01 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+141, Y+2, 'c');
 8017922:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8017926:	4621      	mov	r1, r4
 8017928:	2263      	movs	r2, #99	; 0x63
 801792a:	b280      	uxth	r0, r0
 801792c:	f005 fafa 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawChar(X+153, Y+2, 'e');
 8017930:	f105 0099 	add.w	r0, r5, #153	; 0x99
 8017934:	4621      	mov	r1, r4
 8017936:	2265      	movs	r2, #101	; 0x65
 8017938:	b280      	uxth	r0, r0
	
	
}
 801793a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+153, Y+2, 'e');
 801793e:	f005 baf1 	b.w	801cf24 <TFT_DrawChar>
 8017942:	bf00      	nop
 8017944:	200001b8 	.word	0x200001b8
 8017948:	200001c8 	.word	0x200001c8

0801794c <GUI_TextEn_Luminance>:
void GUI_TextEn_Luminance(uint16_t X, uint16_t Y)
{
 801794c:	b538      	push	{r3, r4, r5, lr}
 801794e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017950:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017954:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017956:	f005 fa21 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801795a:	2063      	movs	r0, #99	; 0x63
 801795c:	f005 fa24 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017960:	4823      	ldr	r0, [pc, #140]	; (80179f0 <GUI_TextEn_Luminance+0xa4>)
 8017962:	f005 fa15 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8017966:	4621      	mov	r1, r4
 8017968:	224c      	movs	r2, #76	; 0x4c
 801796a:	4628      	mov	r0, r5
 801796c:	f005 fada 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+13, Y+2, 'u');
 8017970:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017972:	4820      	ldr	r0, [pc, #128]	; (80179f4 <GUI_TextEn_Luminance+0xa8>)
	TFT_DrawChar(X+13, Y+2, 'u');
 8017974:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017976:	f005 fa0b 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'u');
 801797a:	f105 000d 	add.w	r0, r5, #13
 801797e:	4621      	mov	r1, r4
 8017980:	2275      	movs	r2, #117	; 0x75
 8017982:	b280      	uxth	r0, r0
 8017984:	f005 face 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'm');
 8017988:	f105 001b 	add.w	r0, r5, #27
 801798c:	4621      	mov	r1, r4
 801798e:	226d      	movs	r2, #109	; 0x6d
 8017990:	b280      	uxth	r0, r0
 8017992:	f005 fac7 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8017996:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801799a:	4621      	mov	r1, r4
 801799c:	2269      	movs	r2, #105	; 0x69
 801799e:	b280      	uxth	r0, r0
 80179a0:	f005 fac0 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y+2, 'a');
 80179a4:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 80179a8:	4621      	mov	r1, r4
 80179aa:	2261      	movs	r2, #97	; 0x61
 80179ac:	b280      	uxth	r0, r0
 80179ae:	f005 fab9 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'n');
 80179b2:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80179b6:	4621      	mov	r1, r4
 80179b8:	226e      	movs	r2, #110	; 0x6e
 80179ba:	b280      	uxth	r0, r0
 80179bc:	f005 fab2 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'n');
 80179c0:	f105 0047 	add.w	r0, r5, #71	; 0x47
 80179c4:	4621      	mov	r1, r4
 80179c6:	226e      	movs	r2, #110	; 0x6e
 80179c8:	b280      	uxth	r0, r0
 80179ca:	f005 faab 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+84, Y+2, 'c');
 80179ce:	f105 0054 	add.w	r0, r5, #84	; 0x54
 80179d2:	4621      	mov	r1, r4
 80179d4:	2263      	movs	r2, #99	; 0x63
 80179d6:	b280      	uxth	r0, r0
 80179d8:	f005 faa4 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+96, Y+2, 'e');
 80179dc:	f105 0060 	add.w	r0, r5, #96	; 0x60
 80179e0:	4621      	mov	r1, r4
 80179e2:	2265      	movs	r2, #101	; 0x65
 80179e4:	b280      	uxth	r0, r0
}
 80179e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+96, Y+2, 'e');
 80179ea:	f005 ba9b 	b.w	801cf24 <TFT_DrawChar>
 80179ee:	bf00      	nop
 80179f0:	200001b8 	.word	0x200001b8
 80179f4:	200001c8 	.word	0x200001c8

080179f8 <GUI_TextEn_Illuminance>:

void GUI_TextEn_Illuminance(uint16_t X, uint16_t Y)
{
 80179f8:	b538      	push	{r3, r4, r5, lr}
 80179fa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80179fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017a00:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017a02:	f005 f9cb 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017a06:	2063      	movs	r0, #99	; 0x63
 8017a08:	f005 f9ce 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017a0c:	482a      	ldr	r0, [pc, #168]	; (8017ab8 <GUI_TextEn_Illuminance+0xc0>)
 8017a0e:	f005 f9bf 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8017a12:	4621      	mov	r1, r4
 8017a14:	2249      	movs	r2, #73	; 0x49
 8017a16:	4628      	mov	r0, r5
 8017a18:	f005 fa84 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+8, Y+2, 'l');
 8017a1c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017a1e:	4827      	ldr	r0, [pc, #156]	; (8017abc <GUI_TextEn_Illuminance+0xc4>)
	TFT_DrawChar(X+8, Y+2, 'l');
 8017a20:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017a22:	f005 f9b5 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+8, Y+2, 'l');
 8017a26:	f105 0008 	add.w	r0, r5, #8
 8017a2a:	4621      	mov	r1, r4
 8017a2c:	226c      	movs	r2, #108	; 0x6c
 8017a2e:	b280      	uxth	r0, r0
 8017a30:	f005 fa78 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y+2, 'l');
 8017a34:	f105 000d 	add.w	r0, r5, #13
 8017a38:	4621      	mov	r1, r4
 8017a3a:	226c      	movs	r2, #108	; 0x6c
 8017a3c:	b280      	uxth	r0, r0
 8017a3e:	f005 fa71 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+18, Y+2, 'u');
 8017a42:	f105 0012 	add.w	r0, r5, #18
 8017a46:	4621      	mov	r1, r4
 8017a48:	2275      	movs	r2, #117	; 0x75
 8017a4a:	b280      	uxth	r0, r0
 8017a4c:	f005 fa6a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'm');
 8017a50:	f105 0020 	add.w	r0, r5, #32
 8017a54:	4621      	mov	r1, r4
 8017a56:	226d      	movs	r2, #109	; 0x6d
 8017a58:	b280      	uxth	r0, r0
 8017a5a:	f005 fa63 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'i');
 8017a5e:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8017a62:	4621      	mov	r1, r4
 8017a64:	2269      	movs	r2, #105	; 0x69
 8017a66:	b280      	uxth	r0, r0
 8017a68:	f005 fa5c 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+64, Y+2, 'a');
 8017a6c:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8017a70:	4621      	mov	r1, r4
 8017a72:	2261      	movs	r2, #97	; 0x61
 8017a74:	b280      	uxth	r0, r0
 8017a76:	f005 fa55 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+51, Y+2, 'n');
 8017a7a:	f105 0033 	add.w	r0, r5, #51	; 0x33
 8017a7e:	4621      	mov	r1, r4
 8017a80:	226e      	movs	r2, #110	; 0x6e
 8017a82:	b280      	uxth	r0, r0
 8017a84:	f005 fa4e 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'n');
 8017a88:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8017a8c:	4621      	mov	r1, r4
 8017a8e:	226e      	movs	r2, #110	; 0x6e
 8017a90:	b280      	uxth	r0, r0
 8017a92:	f005 fa47 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'c');
 8017a96:	f105 0059 	add.w	r0, r5, #89	; 0x59
 8017a9a:	4621      	mov	r1, r4
 8017a9c:	2263      	movs	r2, #99	; 0x63
 8017a9e:	b280      	uxth	r0, r0
 8017aa0:	f005 fa40 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017aa4:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8017aa8:	4621      	mov	r1, r4
 8017aaa:	2265      	movs	r2, #101	; 0x65
 8017aac:	b280      	uxth	r0, r0
}
 8017aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+101, Y+2, 'e');
 8017ab2:	f005 ba37 	b.w	801cf24 <TFT_DrawChar>
 8017ab6:	bf00      	nop
 8017ab8:	200001b8 	.word	0x200001b8
 8017abc:	200001c8 	.word	0x200001c8

08017ac0 <GUI_TextEn_Mode>:
void GUI_TextEn_Mode(uint16_t X, uint16_t Y)
{
 8017ac0:	b538      	push	{r3, r4, r5, lr}
 8017ac2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017ac4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017ac8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017aca:	f005 f967 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017ace:	2063      	movs	r0, #99	; 0x63
 8017ad0:	f005 f96a 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017ad4:	4811      	ldr	r0, [pc, #68]	; (8017b1c <GUI_TextEn_Mode+0x5c>)
 8017ad6:	f005 f95b 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'M');
 8017ada:	4621      	mov	r1, r4
 8017adc:	224d      	movs	r2, #77	; 0x4d
 8017ade:	4628      	mov	r0, r5
 8017ae0:	f005 fa20 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+19, Y+2, 'o');
 8017ae4:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017ae6:	480e      	ldr	r0, [pc, #56]	; (8017b20 <GUI_TextEn_Mode+0x60>)
 8017ae8:	f005 f952 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, 'o');
 8017aec:	b2a4      	uxth	r4, r4
 8017aee:	f105 0013 	add.w	r0, r5, #19
 8017af2:	4621      	mov	r1, r4
 8017af4:	226f      	movs	r2, #111	; 0x6f
 8017af6:	b280      	uxth	r0, r0
 8017af8:	f005 fa14 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'd');
 8017afc:	f105 001e 	add.w	r0, r5, #30
 8017b00:	4621      	mov	r1, r4
 8017b02:	2264      	movs	r2, #100	; 0x64
 8017b04:	b280      	uxth	r0, r0
 8017b06:	f005 fa0d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+43, Y+2, 'e');
 8017b0a:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 8017b0e:	4621      	mov	r1, r4
 8017b10:	2265      	movs	r2, #101	; 0x65
 8017b12:	b280      	uxth	r0, r0
}
 8017b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+43, Y+2, 'e');
 8017b18:	f005 ba04 	b.w	801cf24 <TFT_DrawChar>
 8017b1c:	200001b8 	.word	0x200001b8
 8017b20:	200001c8 	.word	0x200001c8

08017b24 <GUI_TextEn_PPFD>:

void GUI_TextEn_PPFD(uint16_t X, uint16_t Y)
{
 8017b24:	b538      	push	{r3, r4, r5, lr}
 8017b26:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017b28:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017b2c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017b2e:	f005 f935 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017b32:	2063      	movs	r0, #99	; 0x63
 8017b34:	f005 f938 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017b38:	480f      	ldr	r0, [pc, #60]	; (8017b78 <GUI_TextEn_PPFD+0x54>)
 8017b3a:	f005 f929 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+48, Y, 'D');
 8017b3e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8017b42:	4629      	mov	r1, r5
 8017b44:	2244      	movs	r2, #68	; 0x44
 8017b46:	b280      	uxth	r0, r0
 8017b48:	f005 f9ec 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'F');
 8017b4c:	f104 001f 	add.w	r0, r4, #31
 8017b50:	4629      	mov	r1, r5
 8017b52:	2246      	movs	r2, #70	; 0x46
 8017b54:	b280      	uxth	r0, r0
 8017b56:	f005 f9e5 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8017b5a:	f104 0010 	add.w	r0, r4, #16
 8017b5e:	4629      	mov	r1, r5
 8017b60:	2250      	movs	r2, #80	; 0x50
 8017b62:	b280      	uxth	r0, r0
 8017b64:	f005 f9de 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017b68:	4629      	mov	r1, r5
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	2250      	movs	r2, #80	; 0x50
}
 8017b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8017b72:	f005 b9d7 	b.w	801cf24 <TFT_DrawChar>
 8017b76:	bf00      	nop
 8017b78:	200001b8 	.word	0x200001b8

08017b7c <GUI_TextEn_PPL>:
void GUI_TextEn_PPL(uint16_t X, uint16_t Y)
{
 8017b7c:	b538      	push	{r3, r4, r5, lr}
 8017b7e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017b80:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017b84:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017b86:	f005 f909 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017b8a:	2063      	movs	r0, #99	; 0x63
 8017b8c:	f005 f90c 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017b90:	480b      	ldr	r0, [pc, #44]	; (8017bc0 <GUI_TextEn_PPL+0x44>)
 8017b92:	f005 f8fd 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+31, Y, 'L');
 8017b96:	f104 001f 	add.w	r0, r4, #31
 8017b9a:	4629      	mov	r1, r5
 8017b9c:	224c      	movs	r2, #76	; 0x4c
 8017b9e:	b280      	uxth	r0, r0
 8017ba0:	f005 f9c0 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8017ba4:	f104 0010 	add.w	r0, r4, #16
 8017ba8:	4629      	mov	r1, r5
 8017baa:	2250      	movs	r2, #80	; 0x50
 8017bac:	b280      	uxth	r0, r0
 8017bae:	f005 f9b9 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017bb2:	4629      	mov	r1, r5
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	2250      	movs	r2, #80	; 0x50
}
 8017bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8017bbc:	f005 b9b2 	b.w	801cf24 <TFT_DrawChar>
 8017bc0:	200001b8 	.word	0x200001b8

08017bc4 <GUI_TextEn_PARwavebands>:
void GUI_TextEn_PARwavebands(uint16_t X, uint16_t Y)
{
 8017bc4:	b538      	push	{r3, r4, r5, lr}
 8017bc6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017bc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017bcc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017bce:	f005 f8e5 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017bd2:	2063      	movs	r0, #99	; 0x63
 8017bd4:	f005 f8e8 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017bd8:	482d      	ldr	r0, [pc, #180]	; (8017c90 <GUI_TextEn_PARwavebands+0xcc>)
 8017bda:	f005 f8d9 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+32, Y, 'R');
 8017bde:	f105 0020 	add.w	r0, r5, #32
 8017be2:	4621      	mov	r1, r4
 8017be4:	2252      	movs	r2, #82	; 0x52
 8017be6:	b280      	uxth	r0, r0
 8017be8:	f005 f99c 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'A');
 8017bec:	f105 0010 	add.w	r0, r5, #16
 8017bf0:	4621      	mov	r1, r4
 8017bf2:	2241      	movs	r2, #65	; 0x41
 8017bf4:	b280      	uxth	r0, r0
 8017bf6:	f005 f995 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017bfa:	4621      	mov	r1, r4
 8017bfc:	2250      	movs	r2, #80	; 0x50
 8017bfe:	4628      	mov	r0, r5
 8017c00:	f005 f990 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+75, Y+2, 'a');
 8017c04:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017c06:	4823      	ldr	r0, [pc, #140]	; (8017c94 <GUI_TextEn_PARwavebands+0xd0>)
	TFT_DrawChar(X+75, Y+2, 'a');
 8017c08:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017c0a:	f005 f8c1 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+75, Y+2, 'a');
 8017c0e:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8017c12:	4621      	mov	r1, r4
 8017c14:	2261      	movs	r2, #97	; 0x61
 8017c16:	b280      	uxth	r0, r0
 8017c18:	f005 f984 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+60, Y+2, 'w');
 8017c1c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8017c20:	4621      	mov	r1, r4
 8017c22:	2277      	movs	r2, #119	; 0x77
 8017c24:	b280      	uxth	r0, r0
 8017c26:	f005 f97d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017c2a:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8017c2e:	4621      	mov	r1, r4
 8017c30:	2265      	movs	r2, #101	; 0x65
 8017c32:	b280      	uxth	r0, r0
 8017c34:	f005 f976 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'v');
 8017c38:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8017c3c:	4621      	mov	r1, r4
 8017c3e:	2276      	movs	r2, #118	; 0x76
 8017c40:	b280      	uxth	r0, r0
 8017c42:	f005 f96f 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+126, Y+2, 'a');
 8017c46:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8017c4a:	4621      	mov	r1, r4
 8017c4c:	2261      	movs	r2, #97	; 0x61
 8017c4e:	b280      	uxth	r0, r0
 8017c50:	f005 f968 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+113, Y+2, 'b');
 8017c54:	f105 0071 	add.w	r0, r5, #113	; 0x71
 8017c58:	4621      	mov	r1, r4
 8017c5a:	2262      	movs	r2, #98	; 0x62
 8017c5c:	b280      	uxth	r0, r0
 8017c5e:	f005 f961 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+138, Y+2, 'n');
 8017c62:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8017c66:	4621      	mov	r1, r4
 8017c68:	226e      	movs	r2, #110	; 0x6e
 8017c6a:	b280      	uxth	r0, r0
 8017c6c:	f005 f95a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+151, Y+2, 'd');
 8017c70:	f105 0097 	add.w	r0, r5, #151	; 0x97
 8017c74:	4621      	mov	r1, r4
 8017c76:	2264      	movs	r2, #100	; 0x64
 8017c78:	b280      	uxth	r0, r0
 8017c7a:	f005 f953 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+165, Y+2, 's');
 8017c7e:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
 8017c82:	4621      	mov	r1, r4
 8017c84:	2273      	movs	r2, #115	; 0x73
 8017c86:	b280      	uxth	r0, r0
}
 8017c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+165, Y+2, 's');
 8017c8c:	f005 b94a 	b.w	801cf24 <TFT_DrawChar>
 8017c90:	200001b8 	.word	0x200001b8
 8017c94:	200001c8 	.word	0x200001c8

08017c98 <GUI_TextEn_B_G_R_FR>:
void GUI_TextEn_B_G_R_FR(uint16_t X, uint16_t Y)
{
 8017c98:	b538      	push	{r3, r4, r5, lr}
 8017c9a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017c9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017ca0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017ca2:	f005 f87b 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017ca6:	2063      	movs	r0, #99	; 0x63
 8017ca8:	f005 f87e 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017cac:	481d      	ldr	r0, [pc, #116]	; (8017d24 <GUI_TextEn_B_G_R_FR+0x8c>)
 8017cae:	f005 f86f 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, '-');
 8017cb2:	f104 000f 	add.w	r0, r4, #15
 8017cb6:	4629      	mov	r1, r5
 8017cb8:	222d      	movs	r2, #45	; 0x2d
 8017cba:	b280      	uxth	r0, r0
 8017cbc:	f005 f932 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'B');
 8017cc0:	4629      	mov	r1, r5
 8017cc2:	4620      	mov	r0, r4
 8017cc4:	2242      	movs	r2, #66	; 0x42
 8017cc6:	f005 f92d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y, '-');
 8017cca:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8017cce:	4629      	mov	r1, r5
 8017cd0:	222d      	movs	r2, #45	; 0x2d
 8017cd2:	b280      	uxth	r0, r0
 8017cd4:	f005 f926 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y, 'G');
 8017cd8:	f104 001d 	add.w	r0, r4, #29
 8017cdc:	4629      	mov	r1, r5
 8017cde:	2247      	movs	r2, #71	; 0x47
 8017ce0:	b280      	uxth	r0, r0
 8017ce2:	f005 f91f 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y, '-');
 8017ce6:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8017cea:	4629      	mov	r1, r5
 8017cec:	222d      	movs	r2, #45	; 0x2d
 8017cee:	b280      	uxth	r0, r0
 8017cf0:	f005 f918 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y, 'R');	
 8017cf4:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8017cf8:	4629      	mov	r1, r5
 8017cfa:	2252      	movs	r2, #82	; 0x52
 8017cfc:	b280      	uxth	r0, r0
 8017cfe:	f005 f911 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y, 'F');
 8017d02:	f104 0057 	add.w	r0, r4, #87	; 0x57
 8017d06:	4629      	mov	r1, r5
 8017d08:	2246      	movs	r2, #70	; 0x46
 8017d0a:	b280      	uxth	r0, r0
 8017d0c:	f005 f90a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, 'R');
 8017d10:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8017d14:	4629      	mov	r1, r5
 8017d16:	2252      	movs	r2, #82	; 0x52
 8017d18:	b280      	uxth	r0, r0
}
 8017d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, 'R');
 8017d1e:	f005 b901 	b.w	801cf24 <TFT_DrawChar>
 8017d22:	bf00      	nop
 8017d24:	200001b8 	.word	0x200001b8

08017d28 <GUI_TextEn_CCT>:
	TFT_DrawChar(X, Y, 'L');
	TFT_SetFont(&Font11EN_arch_big);
	TFT_DrawChar(X+17, Y+7, 'R');
}
void GUI_TextEn_CCT(uint16_t X, uint16_t Y)
{
 8017d28:	b538      	push	{r3, r4, r5, lr}
 8017d2a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017d2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017d30:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017d32:	f005 f833 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017d36:	2063      	movs	r0, #99	; 0x63
 8017d38:	f005 f836 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8017d3c:	480b      	ldr	r0, [pc, #44]	; (8017d6c <GUI_TextEn_CCT+0x44>)
 8017d3e:	f005 f827 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C'-33);
 8017d42:	4629      	mov	r1, r5
 8017d44:	4620      	mov	r0, r4
 8017d46:	2222      	movs	r2, #34	; 0x22
 8017d48:	f005 f8ec 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y, 'C'-33);
 8017d4c:	f104 0017 	add.w	r0, r4, #23
 8017d50:	4629      	mov	r1, r5
 8017d52:	2222      	movs	r2, #34	; 0x22
 8017d54:	b280      	uxth	r0, r0
 8017d56:	f005 f8e5 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y, 'T'-33);
 8017d5a:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8017d5e:	4629      	mov	r1, r5
 8017d60:	2233      	movs	r2, #51	; 0x33
 8017d62:	b280      	uxth	r0, r0
}
 8017d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+46, Y, 'T'-33);
 8017d68:	f005 b8dc 	b.w	801cf24 <TFT_DrawChar>
 8017d6c:	200001e8 	.word	0x200001e8

08017d70 <GUI_TextEn_W_m2>:

/* Measure dimensions */
void GUI_TextEn_W_m2(uint16_t X, uint16_t Y)
{
 8017d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d72:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017d74:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017d78:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017d7a:	f005 f80f 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017d7e:	2063      	movs	r0, #99	; 0x63
 8017d80:	f005 f812 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017d84:	4815      	ldr	r0, [pc, #84]	; (8017ddc <GUI_TextEn_W_m2+0x6c>)
 8017d86:	f005 f803 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+3, Y, 'W');
 8017d8a:	1ce8      	adds	r0, r5, #3
 8017d8c:	4621      	mov	r1, r4
 8017d8e:	2257      	movs	r2, #87	; 0x57
 8017d90:	b280      	uxth	r0, r0
 8017d92:	f005 f8c7 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 8017d96:	f104 0111 	add.w	r1, r4, #17
 8017d9a:	1c68      	adds	r0, r5, #1
 8017d9c:	226d      	movs	r2, #109	; 0x6d
 8017d9e:	b289      	uxth	r1, r1
 8017da0:	b280      	uxth	r0, r0
 8017da2:	f005 f8bf 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 8017da6:	480e      	ldr	r0, [pc, #56]	; (8017de0 <GUI_TextEn_W_m2+0x70>)
 8017da8:	f004 fff2 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');	
 8017dac:	f104 0110 	add.w	r1, r4, #16
 8017db0:	f105 000b 	add.w	r0, r5, #11
 8017db4:	2232      	movs	r2, #50	; 0x32
 8017db6:	b289      	uxth	r1, r1
 8017db8:	b280      	uxth	r0, r0
 8017dba:	f005 f8b3 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8017dbe:	f104 030e 	add.w	r3, r4, #14
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	f105 0211 	add.w	r2, r5, #17
 8017dc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017dcc:	9100      	str	r1, [sp, #0]
 8017dce:	b292      	uxth	r2, r2
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	4628      	mov	r0, r5
 8017dd4:	f004 fd56 	bl	801c884 <TFT_DrawLine>
}
 8017dd8:	b003      	add	sp, #12
 8017dda:	bd30      	pop	{r4, r5, pc}
 8017ddc:	20000220 	.word	0x20000220
 8017de0:	20000210 	.word	0x20000210

08017de4 <GUI_TextEn_mW_m2>:

void GUI_TextEn_mW_m2(uint16_t X, uint16_t Y)
{
 8017de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017de6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017de8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017dec:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017dee:	f004 ffd5 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017df2:	2063      	movs	r0, #99	; 0x63
 8017df4:	f004 ffd8 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017df8:	4818      	ldr	r0, [pc, #96]	; (8017e5c <GUI_TextEn_mW_m2+0x78>)
 8017dfa:	f004 ffc9 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X-3, Y, 'm');
 8017dfe:	1ee8      	subs	r0, r5, #3
 8017e00:	4621      	mov	r1, r4
 8017e02:	226d      	movs	r2, #109	; 0x6d
 8017e04:	b280      	uxth	r0, r0
 8017e06:	f005 f88d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y, 'W');
 8017e0a:	1de8      	adds	r0, r5, #7
 8017e0c:	4621      	mov	r1, r4
 8017e0e:	2257      	movs	r2, #87	; 0x57
 8017e10:	b280      	uxth	r0, r0
 8017e12:	f005 f887 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 8017e16:	f104 0111 	add.w	r1, r4, #17
 8017e1a:	1c68      	adds	r0, r5, #1
 8017e1c:	226d      	movs	r2, #109	; 0x6d
 8017e1e:	b289      	uxth	r1, r1
 8017e20:	b280      	uxth	r0, r0
 8017e22:	f005 f87f 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 8017e26:	480e      	ldr	r0, [pc, #56]	; (8017e60 <GUI_TextEn_mW_m2+0x7c>)
 8017e28:	f004 ffb2 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');
 8017e2c:	f104 0110 	add.w	r1, r4, #16
 8017e30:	f105 000b 	add.w	r0, r5, #11
 8017e34:	2232      	movs	r2, #50	; 0x32
 8017e36:	b289      	uxth	r1, r1
 8017e38:	b280      	uxth	r0, r0
 8017e3a:	f005 f873 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8017e3e:	f104 030e 	add.w	r3, r4, #14
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	f105 0211 	add.w	r2, r5, #17
 8017e48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017e4c:	9100      	str	r1, [sp, #0]
 8017e4e:	b292      	uxth	r2, r2
 8017e50:	4619      	mov	r1, r3
 8017e52:	4628      	mov	r0, r5
 8017e54:	f004 fd16 	bl	801c884 <TFT_DrawLine>
}
 8017e58:	b003      	add	sp, #12
 8017e5a:	bd30      	pop	{r4, r5, pc}
 8017e5c:	20000220 	.word	0x20000220
 8017e60:	20000210 	.word	0x20000210

08017e64 <GUI_TextEn_W_m2_sr>:

void GUI_TextEn_W_m2_sr(uint16_t X, uint16_t Y)
{
 8017e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017e66:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017e68:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017e6c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017e6e:	f004 ff95 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017e72:	2063      	movs	r0, #99	; 0x63
 8017e74:	f004 ff98 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017e78:	4824      	ldr	r0, [pc, #144]	; (8017f0c <GUI_TextEn_W_m2_sr+0xa8>)
 8017e7a:	f004 ff89 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+12, Y, 'W');
 8017e7e:	f105 000c 	add.w	r0, r5, #12
 8017e82:	4621      	mov	r1, r4
 8017e84:	2257      	movs	r2, #87	; 0x57
 8017e86:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 8017e88:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+12, Y, 'W');
 8017e8c:	f005 f84a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8017e90:	b2b6      	uxth	r6, r6
 8017e92:	f105 0014 	add.w	r0, r5, #20
 8017e96:	4631      	mov	r1, r6
 8017e98:	226d      	movs	r2, #109	; 0x6d
 8017e9a:	b280      	uxth	r0, r0
 8017e9c:	f005 f842 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8017ea0:	4631      	mov	r1, r6
 8017ea2:	4628      	mov	r0, r5
 8017ea4:	2273      	movs	r2, #115	; 0x73
 8017ea6:	f005 f83d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 8017eaa:	1de8      	adds	r0, r5, #7
 8017eac:	4631      	mov	r1, r6
 8017eae:	2272      	movs	r2, #114	; 0x72
 8017eb0:	b280      	uxth	r0, r0
 8017eb2:	f005 f837 	bl	801cf24 <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 8017eb6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8017eba:	f104 0318 	add.w	r3, r4, #24
 8017ebe:	f105 0212 	add.w	r2, r5, #18
 8017ec2:	f104 0117 	add.w	r1, r4, #23
 8017ec6:	f105 0011 	add.w	r0, r5, #17
 8017eca:	b29b      	uxth	r3, r3
 8017ecc:	b292      	uxth	r2, r2
 8017ece:	b289      	uxth	r1, r1
 8017ed0:	9600      	str	r6, [sp, #0]
 8017ed2:	b280      	uxth	r0, r0
 8017ed4:	f004 fd33 	bl	801c93e <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 8017ed8:	480d      	ldr	r0, [pc, #52]	; (8017f10 <GUI_TextEn_W_m2_sr+0xac>)
 8017eda:	f004 ff59 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');	
 8017ede:	f104 0110 	add.w	r1, r4, #16
 8017ee2:	f105 001e 	add.w	r0, r5, #30
 8017ee6:	2232      	movs	r2, #50	; 0x32
 8017ee8:	b289      	uxth	r1, r1
 8017eea:	b280      	uxth	r0, r0
 8017eec:	f005 f81a 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 8017ef0:	f104 030e 	add.w	r3, r4, #14
 8017ef4:	b29b      	uxth	r3, r3
 8017ef6:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8017efa:	9600      	str	r6, [sp, #0]
 8017efc:	b292      	uxth	r2, r2
 8017efe:	4619      	mov	r1, r3
 8017f00:	4628      	mov	r0, r5
 8017f02:	f004 fcbf 	bl	801c884 <TFT_DrawLine>
}
 8017f06:	b002      	add	sp, #8
 8017f08:	bd70      	pop	{r4, r5, r6, pc}
 8017f0a:	bf00      	nop
 8017f0c:	20000220 	.word	0x20000220
 8017f10:	20000210 	.word	0x20000210

08017f14 <GUI_TextEn_mW_m2_sr>:

void GUI_TextEn_mW_m2_sr(uint16_t X, uint16_t Y)
{
 8017f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f16:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017f18:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017f1c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017f1e:	f004 ff3d 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017f22:	2063      	movs	r0, #99	; 0x63
 8017f24:	f004 ff40 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017f28:	4827      	ldr	r0, [pc, #156]	; (8017fc8 <GUI_TextEn_mW_m2_sr+0xb4>)
 8017f2a:	f004 ff31 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+6, Y, 'm');
 8017f2e:	1da8      	adds	r0, r5, #6
 8017f30:	4621      	mov	r1, r4
 8017f32:	226d      	movs	r2, #109	; 0x6d
 8017f34:	b280      	uxth	r0, r0
 8017f36:	f004 fff5 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'W');
 8017f3a:	f105 0010 	add.w	r0, r5, #16
 8017f3e:	4621      	mov	r1, r4
 8017f40:	2257      	movs	r2, #87	; 0x57
 8017f42:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 8017f44:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+16, Y, 'W');
 8017f48:	f004 ffec 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8017f4c:	b2b6      	uxth	r6, r6
 8017f4e:	f105 0014 	add.w	r0, r5, #20
 8017f52:	4631      	mov	r1, r6
 8017f54:	226d      	movs	r2, #109	; 0x6d
 8017f56:	b280      	uxth	r0, r0
 8017f58:	f004 ffe4 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8017f5c:	4631      	mov	r1, r6
 8017f5e:	4628      	mov	r0, r5
 8017f60:	2273      	movs	r2, #115	; 0x73
 8017f62:	f004 ffdf 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 8017f66:	1de8      	adds	r0, r5, #7
 8017f68:	4631      	mov	r1, r6
 8017f6a:	2272      	movs	r2, #114	; 0x72
 8017f6c:	b280      	uxth	r0, r0
 8017f6e:	f004 ffd9 	bl	801cf24 <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 8017f72:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8017f76:	f104 0318 	add.w	r3, r4, #24
 8017f7a:	f105 0212 	add.w	r2, r5, #18
 8017f7e:	f104 0117 	add.w	r1, r4, #23
 8017f82:	f105 0011 	add.w	r0, r5, #17
 8017f86:	b29b      	uxth	r3, r3
 8017f88:	b292      	uxth	r2, r2
 8017f8a:	b289      	uxth	r1, r1
 8017f8c:	9600      	str	r6, [sp, #0]
 8017f8e:	b280      	uxth	r0, r0
 8017f90:	f004 fcd5 	bl	801c93e <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 8017f94:	480d      	ldr	r0, [pc, #52]	; (8017fcc <GUI_TextEn_mW_m2_sr+0xb8>)
 8017f96:	f004 fefb 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');
 8017f9a:	f104 0110 	add.w	r1, r4, #16
 8017f9e:	f105 001e 	add.w	r0, r5, #30
 8017fa2:	2232      	movs	r2, #50	; 0x32
 8017fa4:	b289      	uxth	r1, r1
 8017fa6:	b280      	uxth	r0, r0
 8017fa8:	f004 ffbc 	bl	801cf24 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 8017fac:	f104 030e 	add.w	r3, r4, #14
 8017fb0:	b29b      	uxth	r3, r3
 8017fb2:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8017fb6:	9600      	str	r6, [sp, #0]
 8017fb8:	b292      	uxth	r2, r2
 8017fba:	4619      	mov	r1, r3
 8017fbc:	4628      	mov	r0, r5
 8017fbe:	f004 fc61 	bl	801c884 <TFT_DrawLine>
}
 8017fc2:	b002      	add	sp, #8
 8017fc4:	bd70      	pop	{r4, r5, r6, pc}
 8017fc6:	bf00      	nop
 8017fc8:	20000220 	.word	0x20000220
 8017fcc:	20000210 	.word	0x20000210

08017fd0 <GUI_TextEn_cd_m2>:
void GUI_TextEn_cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 8017fd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017fd4:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017fd6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017fda:	460d      	mov	r5, r1
 8017fdc:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 8017fde:	f004 fedd 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017fe2:	2063      	movs	r0, #99	; 0x63
 8017fe4:	f004 fee0 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017fe8:	482f      	ldr	r0, [pc, #188]	; (80180a8 <GUI_TextEn_cd_m2+0xd8>)
 8017fea:	f004 fed1 	bl	801cd90 <TFT_SetFont>
	
	if (deg==1)
 8017fee:	2e01      	cmp	r6, #1
 8017ff0:	f105 0911 	add.w	r9, r5, #17
 8017ff4:	f105 0810 	add.w	r8, r5, #16
 8017ff8:	f105 060e 	add.w	r6, r5, #14
 8017ffc:	d131      	bne.n	8018062 <GUI_TextEn_cd_m2+0x92>
	{
		TFT_DrawChar(X, Y, 'k');
 8017ffe:	226b      	movs	r2, #107	; 0x6b
 8018000:	4629      	mov	r1, r5
 8018002:	4620      	mov	r0, r4
 8018004:	f004 ff8e 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+7, Y, 'c');
 8018008:	1de0      	adds	r0, r4, #7
 801800a:	2263      	movs	r2, #99	; 0x63
 801800c:	4629      	mov	r1, r5
 801800e:	b280      	uxth	r0, r0
 8018010:	f004 ff88 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+14, Y, 'd');
 8018014:	f104 000e 	add.w	r0, r4, #14
 8018018:	2264      	movs	r2, #100	; 0x64
 801801a:	4629      	mov	r1, r5
 801801c:	b280      	uxth	r0, r0
 801801e:	f004 ff81 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(X+5, Y+17, 'm');
 8018022:	1d60      	adds	r0, r4, #5
 8018024:	226d      	movs	r2, #109	; 0x6d
 8018026:	fa1f f189 	uxth.w	r1, r9
 801802a:	b280      	uxth	r0, r0
 801802c:	f004 ff7a 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8018030:	481e      	ldr	r0, [pc, #120]	; (80180ac <GUI_TextEn_cd_m2+0xdc>)
 8018032:	f004 fead 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+16, '2');	
 8018036:	f104 000f 	add.w	r0, r4, #15
 801803a:	2232      	movs	r2, #50	; 0x32
 801803c:	fa1f f188 	uxth.w	r1, r8
 8018040:	b280      	uxth	r0, r0
 8018042:	f004 ff6f 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+22, Y+14, TFT_White);
 8018046:	b2b3      	uxth	r3, r6
 8018048:	f104 0216 	add.w	r2, r4, #22
		TFT_DrawChar(X+9, Y, 'd');
		
		TFT_DrawChar(X+2, Y+17, 'm');
		TFT_SetFont(&Font6EN_arch_big);
		TFT_DrawChar(X+12, Y+16, '2');	
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 801804c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018050:	9100      	str	r1, [sp, #0]
 8018052:	b292      	uxth	r2, r2
 8018054:	4619      	mov	r1, r3
 8018056:	4620      	mov	r0, r4
 8018058:	f004 fc14 	bl	801c884 <TFT_DrawLine>
	}
}
 801805c:	b003      	add	sp, #12
 801805e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		TFT_DrawChar(X+2, Y, 'c');
 8018062:	1ca7      	adds	r7, r4, #2
 8018064:	b2bf      	uxth	r7, r7
 8018066:	2263      	movs	r2, #99	; 0x63
 8018068:	4629      	mov	r1, r5
 801806a:	4638      	mov	r0, r7
 801806c:	f004 ff5a 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+9, Y, 'd');
 8018070:	f104 0009 	add.w	r0, r4, #9
 8018074:	2264      	movs	r2, #100	; 0x64
 8018076:	4629      	mov	r1, r5
 8018078:	b280      	uxth	r0, r0
 801807a:	f004 ff53 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+2, Y+17, 'm');
 801807e:	226d      	movs	r2, #109	; 0x6d
 8018080:	fa1f f189 	uxth.w	r1, r9
 8018084:	4638      	mov	r0, r7
 8018086:	f004 ff4d 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 801808a:	4808      	ldr	r0, [pc, #32]	; (80180ac <GUI_TextEn_cd_m2+0xdc>)
 801808c:	f004 fe80 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X+12, Y+16, '2');	
 8018090:	f104 000c 	add.w	r0, r4, #12
 8018094:	2232      	movs	r2, #50	; 0x32
 8018096:	fa1f f188 	uxth.w	r1, r8
 801809a:	b280      	uxth	r0, r0
 801809c:	f004 ff42 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 80180a0:	b2b3      	uxth	r3, r6
 80180a2:	f104 0213 	add.w	r2, r4, #19
 80180a6:	e7d1      	b.n	801804c <GUI_TextEn_cd_m2+0x7c>
 80180a8:	20000220 	.word	0x20000220
 80180ac:	20000210 	.word	0x20000210

080180b0 <GUI_TextEn_Green>:
	TFT_DrawChar(X+23, Y+16, '2');

  TFT_DrawLine(X, Y+14, X+30, Y+14, TFT_White);	
}
void GUI_TextEn_Green(uint16_t X, uint16_t Y)
{
 80180b0:	b538      	push	{r3, r4, r5, lr}
 80180b2:	4605      	mov	r5, r0
 80180b4:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 80180b6:	4815      	ldr	r0, [pc, #84]	; (801810c <GUI_TextEn_Green+0x5c>)
 80180b8:	f004 fe6a 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'G');
 80180bc:	4621      	mov	r1, r4
 80180be:	2247      	movs	r2, #71	; 0x47
 80180c0:	4628      	mov	r0, r5
 80180c2:	f004 ff2f 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+15, Y+2, 'r');
 80180c6:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 80180c8:	4811      	ldr	r0, [pc, #68]	; (8018110 <GUI_TextEn_Green+0x60>)
 80180ca:	f004 fe61 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'r');
 80180ce:	b2a4      	uxth	r4, r4
 80180d0:	f105 000f 	add.w	r0, r5, #15
 80180d4:	4621      	mov	r1, r4
 80180d6:	2272      	movs	r2, #114	; 0x72
 80180d8:	b280      	uxth	r0, r0
 80180da:	f004 ff23 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+26, Y+2, 'e');
 80180de:	f105 001a 	add.w	r0, r5, #26
 80180e2:	4621      	mov	r1, r4
 80180e4:	2265      	movs	r2, #101	; 0x65
 80180e6:	b280      	uxth	r0, r0
 80180e8:	f004 ff1c 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+38, Y+2, 'e');
 80180ec:	f105 0026 	add.w	r0, r5, #38	; 0x26
 80180f0:	4621      	mov	r1, r4
 80180f2:	2265      	movs	r2, #101	; 0x65
 80180f4:	b280      	uxth	r0, r0
 80180f6:	f004 ff15 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+50, Y+2, 'n');
 80180fa:	f105 0032 	add.w	r0, r5, #50	; 0x32
 80180fe:	4621      	mov	r1, r4
 8018100:	226e      	movs	r2, #110	; 0x6e
 8018102:	b280      	uxth	r0, r0
}
 8018104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+50, Y+2, 'n');
 8018108:	f004 bf0c 	b.w	801cf24 <TFT_DrawChar>
 801810c:	200001b0 	.word	0x200001b0
 8018110:	200001c0 	.word	0x200001c0

08018114 <GUI_TextEn_Blue>:
void GUI_TextEn_Blue(uint16_t X, uint16_t Y)
{
 8018114:	b538      	push	{r3, r4, r5, lr}
 8018116:	4605      	mov	r5, r0
 8018118:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 801811a:	4812      	ldr	r0, [pc, #72]	; (8018164 <GUI_TextEn_Blue+0x50>)
 801811c:	f004 fe38 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'B');
 8018120:	4621      	mov	r1, r4
 8018122:	2242      	movs	r2, #66	; 0x42
 8018124:	4628      	mov	r0, r5
 8018126:	f004 fefd 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small_A);
		TFT_DrawChar(X+15, Y+2, 'l');
 801812a:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small_A);
 801812c:	480e      	ldr	r0, [pc, #56]	; (8018168 <GUI_TextEn_Blue+0x54>)
 801812e:	f004 fe2f 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'l');
 8018132:	b2a4      	uxth	r4, r4
 8018134:	f105 000f 	add.w	r0, r5, #15
 8018138:	4621      	mov	r1, r4
 801813a:	226c      	movs	r2, #108	; 0x6c
 801813c:	b280      	uxth	r0, r0
 801813e:	f004 fef1 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+20, Y+2, 'u');
 8018142:	f105 0014 	add.w	r0, r5, #20
 8018146:	4621      	mov	r1, r4
 8018148:	2275      	movs	r2, #117	; 0x75
 801814a:	b280      	uxth	r0, r0
 801814c:	f004 feea 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+33, Y+2, 'e');
 8018150:	f105 0021 	add.w	r0, r5, #33	; 0x21
 8018154:	4621      	mov	r1, r4
 8018156:	2265      	movs	r2, #101	; 0x65
 8018158:	b280      	uxth	r0, r0
}
 801815a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+33, Y+2, 'e');
 801815e:	f004 bee1 	b.w	801cf24 <TFT_DrawChar>
 8018162:	bf00      	nop
 8018164:	200001b0 	.word	0x200001b0
 8018168:	200001c8 	.word	0x200001c8

0801816c <GUI_TextEn_Red>:
void GUI_TextEn_Red(uint16_t X, uint16_t Y)
{
 801816c:	b538      	push	{r3, r4, r5, lr}
 801816e:	4605      	mov	r5, r0
 8018170:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8018172:	480e      	ldr	r0, [pc, #56]	; (80181ac <GUI_TextEn_Red+0x40>)
 8018174:	f004 fe0c 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'R');
 8018178:	4621      	mov	r1, r4
 801817a:	2252      	movs	r2, #82	; 0x52
 801817c:	4628      	mov	r0, r5
 801817e:	f004 fed1 	bl	801cf24 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+16, Y+2, 'e');
 8018182:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 8018184:	480a      	ldr	r0, [pc, #40]	; (80181b0 <GUI_TextEn_Red+0x44>)
 8018186:	f004 fe03 	bl	801cd90 <TFT_SetFont>
		TFT_DrawChar(X+16, Y+2, 'e');
 801818a:	b2a4      	uxth	r4, r4
 801818c:	f105 0010 	add.w	r0, r5, #16
 8018190:	4621      	mov	r1, r4
 8018192:	2265      	movs	r2, #101	; 0x65
 8018194:	b280      	uxth	r0, r0
 8018196:	f004 fec5 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(X+29, Y+2, 'd');
 801819a:	f105 001d 	add.w	r0, r5, #29
 801819e:	4621      	mov	r1, r4
 80181a0:	2264      	movs	r2, #100	; 0x64
 80181a2:	b280      	uxth	r0, r0
}
 80181a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+29, Y+2, 'd');
 80181a8:	f004 bebc 	b.w	801cf24 <TFT_DrawChar>
 80181ac:	200001b0 	.word	0x200001b0
 80181b0:	200001c0 	.word	0x200001c0

080181b4 <GUI_TextEn_WriteSD>:

void GUI_TextEn_WriteSD(uint16_t X, uint16_t Y)
{
 80181b4:	b538      	push	{r3, r4, r5, lr}
 80181b6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80181b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80181bc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80181be:	f004 fded 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80181c2:	2063      	movs	r0, #99	; 0x63
 80181c4:	f004 fdf0 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80181c8:	4815      	ldr	r0, [pc, #84]	; (8018220 <GUI_TextEn_WriteSD+0x6c>)
 80181ca:	f004 fde1 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'W');
 80181ce:	4621      	mov	r1, r4
 80181d0:	2257      	movs	r2, #87	; 0x57
 80181d2:	4628      	mov	r0, r5
 80181d4:	f004 fea6 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+17, Y+2, 'r');
 80181d8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 80181da:	4812      	ldr	r0, [pc, #72]	; (8018224 <GUI_TextEn_WriteSD+0x70>)
 80181dc:	f004 fdd8 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'r');
 80181e0:	b2a4      	uxth	r4, r4
 80181e2:	f105 0011 	add.w	r0, r5, #17
 80181e6:	4621      	mov	r1, r4
 80181e8:	2272      	movs	r2, #114	; 0x72
 80181ea:	b280      	uxth	r0, r0
 80181ec:	f004 fe9a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'i');
 80181f0:	f105 001c 	add.w	r0, r5, #28
 80181f4:	4621      	mov	r1, r4
 80181f6:	2269      	movs	r2, #105	; 0x69
 80181f8:	b280      	uxth	r0, r0
 80181fa:	f004 fe93 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 't');
 80181fe:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8018202:	4621      	mov	r1, r4
 8018204:	2274      	movs	r2, #116	; 0x74
 8018206:	b280      	uxth	r0, r0
 8018208:	f004 fe8c 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 'e');
 801820c:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8018210:	4621      	mov	r1, r4
 8018212:	2265      	movs	r2, #101	; 0x65
 8018214:	b280      	uxth	r0, r0
}
 8018216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+53, Y+2, 'e');
 801821a:	f004 be83 	b.w	801cf24 <TFT_DrawChar>
 801821e:	bf00      	nop
 8018220:	200001b0 	.word	0x200001b0
 8018224:	200001c0 	.word	0x200001c0

08018228 <GUI_TextEn_Info_Callibration>:


void GUI_TextEn_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8018228:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801822a:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 801822c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018230:	2300      	movs	r3, #0
 8018232:	9300      	str	r3, [sp, #0]
 8018234:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018238:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801823a:	f004 fdaf 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801823e:	2063      	movs	r0, #99	; 0x63
 8018240:	f004 fdb2 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018244:	4834      	ldr	r0, [pc, #208]	; (8018318 <GUI_TextEn_Info_Callibration+0xf0>)
	TFT_DrawChar(X+89, Y+2, 't');
	TFT_DrawChar(X+97, Y+2, 'i');
	TFT_DrawChar(X+108, Y+2, 'o');
	TFT_DrawChar(X+120, Y+2, 'n');
	
	sprintf (buffer, "%02u",  date);
 8018246:	4d35      	ldr	r5, [pc, #212]	; (801831c <GUI_TextEn_Info_Callibration+0xf4>)
	TFT_SetFont(&Font16EN_arch_big);
 8018248:	f004 fda2 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801824c:	2243      	movs	r2, #67	; 0x43
 801824e:	2164      	movs	r1, #100	; 0x64
 8018250:	2046      	movs	r0, #70	; 0x46
 8018252:	f004 fe67 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018256:	4832      	ldr	r0, [pc, #200]	; (8018320 <GUI_TextEn_Info_Callibration+0xf8>)
 8018258:	f004 fd9a 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 801825c:	2261      	movs	r2, #97	; 0x61
 801825e:	2166      	movs	r1, #102	; 0x66
 8018260:	2056      	movs	r0, #86	; 0x56
 8018262:	f004 fe5f 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'l');
 8018266:	226c      	movs	r2, #108	; 0x6c
 8018268:	2166      	movs	r1, #102	; 0x66
 801826a:	2063      	movs	r0, #99	; 0x63
 801826c:	f004 fe5a 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+38, Y+2, 'i');
 8018270:	2269      	movs	r2, #105	; 0x69
 8018272:	2166      	movs	r1, #102	; 0x66
 8018274:	206c      	movs	r0, #108	; 0x6c
 8018276:	f004 fe55 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+2, 'b');
 801827a:	2262      	movs	r2, #98	; 0x62
 801827c:	2166      	movs	r1, #102	; 0x66
 801827e:	2078      	movs	r0, #120	; 0x78
 8018280:	f004 fe50 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y+2, 'r');
 8018284:	2272      	movs	r2, #114	; 0x72
 8018286:	2166      	movs	r1, #102	; 0x66
 8018288:	2085      	movs	r0, #133	; 0x85
 801828a:	f004 fe4b 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'a');
 801828e:	2261      	movs	r2, #97	; 0x61
 8018290:	2166      	movs	r1, #102	; 0x66
 8018292:	2092      	movs	r0, #146	; 0x92
 8018294:	f004 fe46 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 't');
 8018298:	2274      	movs	r2, #116	; 0x74
 801829a:	2166      	movs	r1, #102	; 0x66
 801829c:	209f      	movs	r0, #159	; 0x9f
 801829e:	f004 fe41 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+97, Y+2, 'i');
 80182a2:	2269      	movs	r2, #105	; 0x69
 80182a4:	2166      	movs	r1, #102	; 0x66
 80182a6:	20a7      	movs	r0, #167	; 0xa7
 80182a8:	f004 fe3c 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+108, Y+2, 'o');
 80182ac:	226f      	movs	r2, #111	; 0x6f
 80182ae:	2166      	movs	r1, #102	; 0x66
 80182b0:	20b2      	movs	r0, #178	; 0xb2
 80182b2:	f004 fe37 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y+2, 'n');
 80182b6:	226e      	movs	r2, #110	; 0x6e
 80182b8:	2166      	movs	r1, #102	; 0x66
 80182ba:	20be      	movs	r0, #190	; 0xbe
 80182bc:	f004 fe32 	bl	801cf24 <TFT_DrawChar>
	sprintf (buffer, "%02u",  date);
 80182c0:	4622      	mov	r2, r4
 80182c2:	4629      	mov	r1, r5
 80182c4:	4668      	mov	r0, sp
 80182c6:	f008 f9a3 	bl	8020610 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 80182ca:	4816      	ldr	r0, [pc, #88]	; (8018324 <GUI_TextEn_Info_Callibration+0xfc>)
 80182cc:	f004 fd60 	bl	801cd90 <TFT_SetFont>
	buffer[2] = '.';
 80182d0:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80182d2:	2303      	movs	r3, #3
 80182d4:	466a      	mov	r2, sp
 80182d6:	2182      	movs	r1, #130	; 0x82
 80182d8:	201e      	movs	r0, #30
	buffer[2] = '.';
 80182da:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80182de:	f004 fe79 	bl	801cfd4 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 80182e2:	4632      	mov	r2, r6
 80182e4:	4629      	mov	r1, r5
 80182e6:	4668      	mov	r0, sp
 80182e8:	f008 f992 	bl	8020610 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80182ec:	2303      	movs	r3, #3
 80182ee:	466a      	mov	r2, sp
 80182f0:	2182      	movs	r1, #130	; 0x82
 80182f2:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 80182f4:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80182f8:	f004 fe6c 	bl	801cfd4 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 80182fc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8018300:	4909      	ldr	r1, [pc, #36]	; (8018328 <GUI_TextEn_Info_Callibration+0x100>)
 8018302:	4668      	mov	r0, sp
 8018304:	f008 f984 	bl	8020610 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018308:	2303      	movs	r3, #3
 801830a:	466a      	mov	r2, sp
 801830c:	2182      	movs	r1, #130	; 0x82
 801830e:	209b      	movs	r0, #155	; 0x9b
 8018310:	f004 fe60 	bl	801cfd4 <TFT_DisplayString>
}
 8018314:	b002      	add	sp, #8
 8018316:	bd70      	pop	{r4, r5, r6, pc}
 8018318:	200001b0 	.word	0x200001b0
 801831c:	080320f4 	.word	0x080320f4
 8018320:	200001c0 	.word	0x200001c0
 8018324:	200001f0 	.word	0x200001f0
 8018328:	080320f9 	.word	0x080320f9

0801832c <GUI_TextEn_Info_Serial>:

void GUI_TextEn_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 801832c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801832e:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 8018330:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018334:	2300      	movs	r3, #0
 8018336:	9300      	str	r3, [sp, #0]
 8018338:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801833c:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 801833e:	f004 fd2d 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018342:	2063      	movs	r0, #99	; 0x63
 8018344:	f004 fd30 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018348:	482e      	ldr	r0, [pc, #184]	; (8018404 <GUI_TextEn_Info_Serial+0xd8>)
 801834a:	f004 fd21 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'S');
 801834e:	2253      	movs	r2, #83	; 0x53
 8018350:	21c8      	movs	r1, #200	; 0xc8
 8018352:	203c      	movs	r0, #60	; 0x3c
 8018354:	f004 fde6 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018358:	482b      	ldr	r0, [pc, #172]	; (8018408 <GUI_TextEn_Info_Serial+0xdc>)
 801835a:	f004 fd19 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'e');
 801835e:	2265      	movs	r2, #101	; 0x65
 8018360:	21ca      	movs	r1, #202	; 0xca
 8018362:	204d      	movs	r0, #77	; 0x4d
 8018364:	f004 fdde 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'r');
 8018368:	2272      	movs	r2, #114	; 0x72
 801836a:	21ca      	movs	r1, #202	; 0xca
 801836c:	205a      	movs	r0, #90	; 0x5a
 801836e:	f004 fdd9 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'i');
 8018372:	2269      	movs	r2, #105	; 0x69
 8018374:	21ca      	movs	r1, #202	; 0xca
 8018376:	2066      	movs	r0, #102	; 0x66
 8018378:	f004 fdd4 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+54, Y+2, 'a');
 801837c:	2261      	movs	r2, #97	; 0x61
 801837e:	21ca      	movs	r1, #202	; 0xca
 8018380:	2072      	movs	r0, #114	; 0x72
 8018382:	f004 fdcf 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+67, Y+2, 'l');
 8018386:	226c      	movs	r2, #108	; 0x6c
 8018388:	21ca      	movs	r1, #202	; 0xca
 801838a:	207f      	movs	r0, #127	; 0x7f
 801838c:	f004 fdca 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'n');
 8018390:	226e      	movs	r2, #110	; 0x6e
 8018392:	21ca      	movs	r1, #202	; 0xca
 8018394:	2095      	movs	r0, #149	; 0x95
 8018396:	f004 fdc5 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+102, Y+2, 'u');
 801839a:	2275      	movs	r2, #117	; 0x75
 801839c:	21ca      	movs	r1, #202	; 0xca
 801839e:	20a2      	movs	r0, #162	; 0xa2
 80183a0:	f004 fdc0 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+115, Y+2, 'm');
 80183a4:	226d      	movs	r2, #109	; 0x6d
 80183a6:	21ca      	movs	r1, #202	; 0xca
 80183a8:	20af      	movs	r0, #175	; 0xaf
 80183aa:	f004 fdbb 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+128, Y+2, 'b');
 80183ae:	2262      	movs	r2, #98	; 0x62
 80183b0:	21ca      	movs	r1, #202	; 0xca
 80183b2:	20bc      	movs	r0, #188	; 0xbc
 80183b4:	f004 fdb6 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+141, Y+2, 'e');
 80183b8:	2265      	movs	r2, #101	; 0x65
 80183ba:	21ca      	movs	r1, #202	; 0xca
 80183bc:	20c9      	movs	r0, #201	; 0xc9
 80183be:	f004 fdb1 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+154, Y+2, 'r');
 80183c2:	2272      	movs	r2, #114	; 0x72
 80183c4:	21ca      	movs	r1, #202	; 0xca
 80183c6:	20d6      	movs	r0, #214	; 0xd6
 80183c8:	f004 fdac 	bl	801cf24 <TFT_DrawChar>

	
	sprintf (buffer, "%u",  Part);
 80183cc:	462a      	mov	r2, r5
 80183ce:	490f      	ldr	r1, [pc, #60]	; (801840c <GUI_TextEn_Info_Serial+0xe0>)
 80183d0:	4668      	mov	r0, sp
 80183d2:	f008 f91d 	bl	8020610 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 80183d6:	480e      	ldr	r0, [pc, #56]	; (8018410 <GUI_TextEn_Info_Serial+0xe4>)
 80183d8:	f004 fcda 	bl	801cd90 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80183dc:	2303      	movs	r3, #3
 80183de:	466a      	mov	r2, sp
 80183e0:	21e6      	movs	r1, #230	; 0xe6
 80183e2:	2028      	movs	r0, #40	; 0x28
 80183e4:	f004 fdf6 	bl	801cfd4 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 80183e8:	4622      	mov	r2, r4
 80183ea:	490a      	ldr	r1, [pc, #40]	; (8018414 <GUI_TextEn_Info_Serial+0xe8>)
 80183ec:	4668      	mov	r0, sp
 80183ee:	f008 f90f 	bl	8020610 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80183f2:	2303      	movs	r3, #3
 80183f4:	466a      	mov	r2, sp
 80183f6:	21e6      	movs	r1, #230	; 0xe6
 80183f8:	2087      	movs	r0, #135	; 0x87
 80183fa:	f004 fdeb 	bl	801cfd4 <TFT_DisplayString>
}
 80183fe:	b003      	add	sp, #12
 8018400:	bd30      	pop	{r4, r5, pc}
 8018402:	bf00      	nop
 8018404:	200001b0 	.word	0x200001b0
 8018408:	200001c0 	.word	0x200001c0
 801840c:	080320fd 	.word	0x080320fd
 8018410:	200001f0 	.word	0x200001f0
 8018414:	08032100 	.word	0x08032100

08018418 <GUI_TextEn_Info_Ver>:

void GUI_TextEn_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 8018418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801841a:	2300      	movs	r3, #0
	
	X = 20;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 801841c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018420:	9302      	str	r3, [sp, #8]
 8018422:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8018426:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801842a:	f004 fcb7 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801842e:	2063      	movs	r0, #99	; 0x63
 8018430:	f004 fcba 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018434:	482e      	ldr	r0, [pc, #184]	; (80184f0 <GUI_TextEn_Info_Ver+0xd8>)
	TFT_DrawChar(X+55, Y+2, 'w');
	TFT_DrawChar(X+70, Y+2, 'a');
	TFT_DrawChar(X+86, Y+2, 'r');
	TFT_DrawChar(X+99, Y+2, 'e');
	
	TFT_SetFont(&Font16);
 8018436:	4c2f      	ldr	r4, [pc, #188]	; (80184f4 <GUI_TextEn_Info_Ver+0xdc>)
	TFT_SetFont(&Font16EN_arch_big);
 8018438:	f004 fcaa 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'F');
 801843c:	2246      	movs	r2, #70	; 0x46
 801843e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018442:	2014      	movs	r0, #20
 8018444:	f004 fd6e 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018448:	482b      	ldr	r0, [pc, #172]	; (80184f8 <GUI_TextEn_Info_Ver+0xe0>)
 801844a:	f004 fca1 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'i');
 801844e:	2269      	movs	r2, #105	; 0x69
 8018450:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018454:	2024      	movs	r0, #36	; 0x24
 8018456:	f004 fd65 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'r');
 801845a:	2272      	movs	r2, #114	; 0x72
 801845c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018460:	202f      	movs	r0, #47	; 0x2f
 8018462:	f004 fd5f 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y+2, 'm');
 8018466:	226d      	movs	r2, #109	; 0x6d
 8018468:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801846c:	203c      	movs	r0, #60	; 0x3c
 801846e:	f004 fd59 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+55, Y+2, 'w');
 8018472:	2277      	movs	r2, #119	; 0x77
 8018474:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018478:	204b      	movs	r0, #75	; 0x4b
 801847a:	f004 fd53 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'a');
 801847e:	2261      	movs	r2, #97	; 0x61
 8018480:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018484:	205a      	movs	r0, #90	; 0x5a
 8018486:	f004 fd4d 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+86, Y+2, 'r');
 801848a:	2272      	movs	r2, #114	; 0x72
 801848c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018490:	206a      	movs	r0, #106	; 0x6a
 8018492:	f004 fd47 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8018496:	2265      	movs	r2, #101	; 0x65
 8018498:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801849c:	2077      	movs	r0, #119	; 0x77
 801849e:	f004 fd41 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16);
 80184a2:	4620      	mov	r0, r4
 80184a4:	f004 fc74 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+152, Y, '.');
 80184a8:	222e      	movs	r2, #46	; 0x2e
 80184aa:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80184ae:	20ac      	movs	r0, #172	; 0xac
 80184b0:	f004 fd38 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+142, Y, 'v');
 80184b4:	2276      	movs	r2, #118	; 0x76
 80184b6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80184ba:	20a2      	movs	r0, #162	; 0xa2
 80184bc:	f004 fd32 	bl	801cf24 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 80184c0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80184c4:	ee10 0a10 	vmov	r0, s0
 80184c8:	f7e8 f856 	bl	8000578 <__aeabi_f2d>
 80184cc:	4602      	mov	r2, r0
 80184ce:	460b      	mov	r3, r1
 80184d0:	a802      	add	r0, sp, #8
 80184d2:	490a      	ldr	r1, [pc, #40]	; (80184fc <GUI_TextEn_Info_Ver+0xe4>)
 80184d4:	f008 f89c 	bl	8020610 <sprintf>
	TFT_SetFont(&Font16);
 80184d8:	4620      	mov	r0, r4
 80184da:	f004 fc59 	bl	801cd90 <TFT_SetFont>
	TFT_DisplayString(X+172, Y, (uint8_t *)buffer, LEFT_MODE);
 80184de:	2303      	movs	r3, #3
 80184e0:	aa02      	add	r2, sp, #8
 80184e2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80184e6:	20c0      	movs	r0, #192	; 0xc0
 80184e8:	f004 fd74 	bl	801cfd4 <TFT_DisplayString>
}
 80184ec:	b004      	add	sp, #16
 80184ee:	bd10      	pop	{r4, pc}
 80184f0:	200001b0 	.word	0x200001b0
 80184f4:	200001a8 	.word	0x200001a8
 80184f8:	200001c0 	.word	0x200001c0
 80184fc:	080320e5 	.word	0x080320e5

08018500 <GUI_TitleString_Name>:
#include "stdio.h"
#include "GUI_Text_Elements_RU.h"

void GUI_TitleString_Name(uint16_t X, uint16_t Y)
{
 8018500:	b538      	push	{r3, r4, r5, lr}
 8018502:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018504:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018508:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801850a:	f004 fc47 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 801850e:	2084      	movs	r0, #132	; 0x84
 8018510:	f004 fc4a 	bl	801cda8 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8018514:	4825      	ldr	r0, [pc, #148]	; (80185ac <GUI_TitleString_Name+0xac>)
 8018516:	f004 fc3b 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'T');
 801851a:	4629      	mov	r1, r5
 801851c:	4620      	mov	r0, r4
 801851e:	2254      	movs	r2, #84	; 0x54
 8018520:	f004 fd00 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+15, 	Y, 'K');
 8018524:	f104 000f 	add.w	r0, r4, #15
 8018528:	4629      	mov	r1, r5
 801852a:	224b      	movs	r2, #75	; 0x4b
 801852c:	b280      	uxth	r0, r0
 801852e:	f004 fcf9 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+30, 	Y, 'A');
 8018532:	f104 001e 	add.w	r0, r4, #30
 8018536:	4629      	mov	r1, r5
 8018538:	2241      	movs	r2, #65	; 0x41
 801853a:	b280      	uxth	r0, r0
 801853c:	f004 fcf2 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+45, 	Y, '-');
 8018540:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 8018544:	4629      	mov	r1, r5
 8018546:	222d      	movs	r2, #45	; 0x2d
 8018548:	b280      	uxth	r0, r0
 801854a:	f004 fceb 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+60, 	Y, 'S');
 801854e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8018552:	4629      	mov	r1, r5
 8018554:	2253      	movs	r2, #83	; 0x53
 8018556:	b280      	uxth	r0, r0
 8018558:	f004 fce4 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801855c:	4814      	ldr	r0, [pc, #80]	; (80185b0 <GUI_TitleString_Name+0xb0>)
 801855e:	f004 fc17 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+75, 	Y, 'p');
 8018562:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8018566:	4629      	mov	r1, r5
 8018568:	2270      	movs	r2, #112	; 0x70
 801856a:	b280      	uxth	r0, r0
 801856c:	f004 fcda 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+88, 	Y, 'e');
 8018570:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018574:	4629      	mov	r1, r5
 8018576:	2265      	movs	r2, #101	; 0x65
 8018578:	b280      	uxth	r0, r0
 801857a:	f004 fcd3 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+99, 	Y, 'c');
 801857e:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8018582:	4629      	mov	r1, r5
 8018584:	2263      	movs	r2, #99	; 0x63
 8018586:	b280      	uxth	r0, r0
 8018588:	f004 fccc 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+109, 	Y, 't');
 801858c:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8018590:	4629      	mov	r1, r5
 8018592:	2274      	movs	r2, #116	; 0x74
 8018594:	b280      	uxth	r0, r0
 8018596:	f004 fcc5 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+120, 	Y, 'r');
 801859a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801859e:	4629      	mov	r1, r5
 80185a0:	2272      	movs	r2, #114	; 0x72
 80185a2:	b280      	uxth	r0, r0
}
 80185a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+120, 	Y, 'r');
 80185a8:	f004 bcbc 	b.w	801cf24 <TFT_DrawChar>
 80185ac:	200001b0 	.word	0x200001b0
 80185b0:	200001c0 	.word	0x200001c0

080185b4 <GUI_TitleString_Version>:

void GUI_TitleString_Version(uint16_t X, uint16_t Y, float Version)
{
 80185b4:	b530      	push	{r4, r5, lr}
 80185b6:	b085      	sub	sp, #20
	char buffer[5] = {0};
 80185b8:	2300      	movs	r3, #0
{
 80185ba:	4604      	mov	r4, r0
	
	TFT_SetTextColor(TFT_White);
 80185bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 80185c0:	9302      	str	r3, [sp, #8]
 80185c2:	f88d 300c 	strb.w	r3, [sp, #12]
{
 80185c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80185ca:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80185cc:	f004 fbe6 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 80185d0:	2084      	movs	r0, #132	; 0x84
 80185d2:	f004 fbe9 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
 80185d6:	4815      	ldr	r0, [pc, #84]	; (801862c <GUI_TitleString_Version+0x78>)
 80185d8:	f004 fbda 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'v');
 80185dc:	4629      	mov	r1, r5
 80185de:	2276      	movs	r2, #118	; 0x76
 80185e0:	4620      	mov	r0, r4
 80185e2:	f004 fc9f 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80185e6:	4812      	ldr	r0, [pc, #72]	; (8018630 <GUI_TitleString_Version+0x7c>)
 80185e8:	f004 fbd2 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+13, 		Y, '.');
 80185ec:	f104 000d 	add.w	r0, r4, #13
 80185f0:	222e      	movs	r2, #46	; 0x2e
 80185f2:	4629      	mov	r1, r5
 80185f4:	b280      	uxth	r0, r0
 80185f6:	f004 fc95 	bl	801cf24 <TFT_DrawChar>
	sprintf (buffer, "%.1f",  Version);
 80185fa:	ed9d 0a01 	vldr	s0, [sp, #4]
 80185fe:	ee10 0a10 	vmov	r0, s0
 8018602:	f7e7 ffb9 	bl	8000578 <__aeabi_f2d>
 8018606:	4602      	mov	r2, r0
 8018608:	460b      	mov	r3, r1
 801860a:	a802      	add	r0, sp, #8
 801860c:	4909      	ldr	r1, [pc, #36]	; (8018634 <GUI_TitleString_Version+0x80>)
 801860e:	f007 ffff 	bl	8020610 <sprintf>
	TFT_SetFont(&Font16);
 8018612:	4809      	ldr	r0, [pc, #36]	; (8018638 <GUI_TitleString_Version+0x84>)
 8018614:	f004 fbbc 	bl	801cd90 <TFT_SetFont>
	TFT_DisplayString(X+24, Y, (uint8_t *)buffer, LEFT_MODE);
 8018618:	f104 0018 	add.w	r0, r4, #24
 801861c:	2303      	movs	r3, #3
 801861e:	aa02      	add	r2, sp, #8
 8018620:	4629      	mov	r1, r5
 8018622:	b280      	uxth	r0, r0
 8018624:	f004 fcd6 	bl	801cfd4 <TFT_DisplayString>
}
 8018628:	b005      	add	sp, #20
 801862a:	bd30      	pop	{r4, r5, pc}
 801862c:	200001c0 	.word	0x200001c0
 8018630:	200001b0 	.word	0x200001b0
 8018634:	080320e5 	.word	0x080320e5
 8018638:	200001a8 	.word	0x200001a8

0801863c <GUI_TextRu_Language>:

void GUI_TextRu_Language(uint16_t X, uint16_t Y)
{
 801863c:	b538      	push	{r3, r4, r5, lr}
 801863e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018640:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018644:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018646:	f004 fba9 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801864a:	2063      	movs	r0, #99	; 0x63
 801864c:	f004 fbac 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018650:	4811      	ldr	r0, [pc, #68]	; (8018698 <GUI_TextRu_Language+0x5c>)
 8018652:	f004 fb9d 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 8018656:	4621      	mov	r1, r4
 8018658:	22af      	movs	r2, #175	; 0xaf
 801865a:	4628      	mov	r0, r5
 801865c:	f004 fbaa 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8018660:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018662:	480e      	ldr	r0, [pc, #56]	; (801869c <GUI_TextRu_Language+0x60>)
 8018664:	f004 fb94 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8018668:	b2a4      	uxth	r4, r4
 801866a:	f105 000f 	add.w	r0, r5, #15
 801866e:	4621      	mov	r1, r4
 8018670:	22b7      	movs	r2, #183	; 0xb7
 8018672:	b280      	uxth	r0, r0
 8018674:	f004 fb9e 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ы');
 8018678:	f105 001c 	add.w	r0, r5, #28
 801867c:	4621      	mov	r1, r4
 801867e:	228b      	movs	r2, #139	; 0x8b
 8018680:	b280      	uxth	r0, r0
 8018682:	f004 fb97 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8018686:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801868a:	4621      	mov	r1, r4
 801868c:	22ba      	movs	r2, #186	; 0xba
 801868e:	b280      	uxth	r0, r0
}
 8018690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8018694:	f004 bb8e 	b.w	801cdb4 <TFT_DrawCharRus>
 8018698:	200001d0 	.word	0x200001d0
 801869c:	200001d8 	.word	0x200001d8

080186a0 <GUI_TextRu_Russian>:

void GUI_TextRu_Russian(uint16_t X, uint16_t Y)
{
 80186a0:	b538      	push	{r3, r4, r5, lr}
 80186a2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80186a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80186a8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80186aa:	f004 fb77 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80186ae:	2063      	movs	r0, #99	; 0x63
 80186b0:	f004 fb7a 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80186b4:	481c      	ldr	r0, [pc, #112]	; (8018728 <GUI_TextRu_Russian+0x88>)
 80186b6:	f004 fb6b 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 80186ba:	4621      	mov	r1, r4
 80186bc:	22a0      	movs	r2, #160	; 0xa0
 80186be:	4628      	mov	r0, r5
 80186c0:	f004 fb78 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'у');
 80186c4:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 80186c6:	4819      	ldr	r0, [pc, #100]	; (801872c <GUI_TextRu_Russian+0x8c>)
	TFT_DrawCharRus(X+15, Y+5, 'у');
 80186c8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 80186ca:	f004 fb61 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'у');
 80186ce:	f105 000f 	add.w	r0, r5, #15
 80186d2:	4621      	mov	r1, r4
 80186d4:	2283      	movs	r2, #131	; 0x83
 80186d6:	b280      	uxth	r0, r0
 80186d8:	f004 fb6c 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'с');
 80186dc:	f105 001c 	add.w	r0, r5, #28
 80186e0:	4621      	mov	r1, r4
 80186e2:	2281      	movs	r2, #129	; 0x81
 80186e4:	b280      	uxth	r0, r0
 80186e6:	f004 fb65 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'с');
 80186ea:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80186ee:	4621      	mov	r1, r4
 80186f0:	2281      	movs	r2, #129	; 0x81
 80186f2:	b280      	uxth	r0, r0
 80186f4:	f004 fb5e 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'к');
 80186f8:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80186fc:	4621      	mov	r1, r4
 80186fe:	22ba      	movs	r2, #186	; 0xba
 8018700:	b280      	uxth	r0, r0
 8018702:	f004 fb57 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+64, Y+5, 'и');
 8018706:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801870a:	4621      	mov	r1, r4
 801870c:	22b8      	movs	r2, #184	; 0xb8
 801870e:	b280      	uxth	r0, r0
 8018710:	f004 fb50 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+77, Y+5, 'й');
 8018714:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8018718:	4621      	mov	r1, r4
 801871a:	22b9      	movs	r2, #185	; 0xb9
 801871c:	b280      	uxth	r0, r0
}
 801871e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+77, Y+5, 'й');
 8018722:	f004 bb47 	b.w	801cdb4 <TFT_DrawCharRus>
 8018726:	bf00      	nop
 8018728:	200001d0 	.word	0x200001d0
 801872c:	200001d8 	.word	0x200001d8

08018730 <GUI_TextRu_Info>:



void GUI_TextRu_Info(uint16_t X, uint16_t Y)
{
 8018730:	b538      	push	{r3, r4, r5, lr}
 8018732:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018734:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018738:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801873a:	f004 fb2f 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801873e:	2063      	movs	r0, #99	; 0x63
 8018740:	f004 fb32 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018744:	4849      	ldr	r0, [pc, #292]	; (801886c <GUI_TextRu_Info+0x13c>)
 8018746:	f004 fb23 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'И');
 801874a:	4621      	mov	r1, r4
 801874c:	2298      	movs	r2, #152	; 0x98
 801874e:	4628      	mov	r0, r5
 8018750:	f004 fb30 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8018754:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018756:	4846      	ldr	r0, [pc, #280]	; (8018870 <GUI_TextRu_Info+0x140>)
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8018758:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801875a:	f004 fb19 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801875e:	f105 000f 	add.w	r0, r5, #15
 8018762:	4621      	mov	r1, r4
 8018764:	22bd      	movs	r2, #189	; 0xbd
 8018766:	b280      	uxth	r0, r0
 8018768:	f004 fb24 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ф');
 801876c:	f105 001c 	add.w	r0, r5, #28
 8018770:	4621      	mov	r1, r4
 8018772:	2284      	movs	r2, #132	; 0x84
 8018774:	b280      	uxth	r0, r0
 8018776:	f004 fb1d 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'о');
 801877a:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801877e:	4621      	mov	r1, r4
 8018780:	22be      	movs	r2, #190	; 0xbe
 8018782:	b280      	uxth	r0, r0
 8018784:	f004 fb16 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'р');
 8018788:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801878c:	4621      	mov	r1, r4
 801878e:	2280      	movs	r2, #128	; 0x80
 8018790:	b280      	uxth	r0, r0
 8018792:	f004 fb0f 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'м');
 8018796:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801879a:	4621      	mov	r1, r4
 801879c:	22bc      	movs	r2, #188	; 0xbc
 801879e:	b280      	uxth	r0, r0
 80187a0:	f004 fb08 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+78, Y+5, 'а');
 80187a4:	f105 004e 	add.w	r0, r5, #78	; 0x4e
 80187a8:	4621      	mov	r1, r4
 80187aa:	22b0      	movs	r2, #176	; 0xb0
 80187ac:	b280      	uxth	r0, r0
 80187ae:	f004 fb01 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+90, Y+5, 'ц');
 80187b2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80187b6:	4621      	mov	r1, r4
 80187b8:	2286      	movs	r2, #134	; 0x86
 80187ba:	b280      	uxth	r0, r0
 80187bc:	f004 fafa 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+102, Y+5, 'и');
 80187c0:	f105 0066 	add.w	r0, r5, #102	; 0x66
 80187c4:	4621      	mov	r1, r4
 80187c6:	22b8      	movs	r2, #184	; 0xb8
 80187c8:	b280      	uxth	r0, r0
 80187ca:	f004 faf3 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+114, Y+5, 'я');
 80187ce:	f105 0072 	add.w	r0, r5, #114	; 0x72
 80187d2:	4621      	mov	r1, r4
 80187d4:	228f      	movs	r2, #143	; 0x8f
 80187d6:	b280      	uxth	r0, r0
 80187d8:	f004 faec 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+126, Y+5, 0x01);
 80187dc:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 80187e0:	4621      	mov	r1, r4
 80187e2:	2201      	movs	r2, #1
 80187e4:	b280      	uxth	r0, r0
 80187e6:	f004 fae5 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+138, Y+5, 'о');
 80187ea:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 80187ee:	4621      	mov	r1, r4
 80187f0:	22be      	movs	r2, #190	; 0xbe
 80187f2:	b280      	uxth	r0, r0
 80187f4:	f004 fade 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+150, Y+5, 0x01);
 80187f8:	f105 0096 	add.w	r0, r5, #150	; 0x96
 80187fc:	4621      	mov	r1, r4
 80187fe:	2201      	movs	r2, #1
 8018800:	b280      	uxth	r0, r0
 8018802:	f004 fad7 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+5, 'п');
 8018806:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801880a:	4621      	mov	r1, r4
 801880c:	22bf      	movs	r2, #191	; 0xbf
 801880e:	b280      	uxth	r0, r0
 8018810:	f004 fad0 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+174, Y+5, 'р');
 8018814:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 8018818:	4621      	mov	r1, r4
 801881a:	2280      	movs	r2, #128	; 0x80
 801881c:	b280      	uxth	r0, r0
 801881e:	f004 fac9 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+186, Y+5, 'и');
 8018822:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 8018826:	4621      	mov	r1, r4
 8018828:	22b8      	movs	r2, #184	; 0xb8
 801882a:	b280      	uxth	r0, r0
 801882c:	f004 fac2 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+198, Y+5, 'б');
 8018830:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8018834:	4621      	mov	r1, r4
 8018836:	22b1      	movs	r2, #177	; 0xb1
 8018838:	b280      	uxth	r0, r0
 801883a:	f004 fabb 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+210, Y+5, 'о');
 801883e:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 8018842:	4621      	mov	r1, r4
 8018844:	22be      	movs	r2, #190	; 0xbe
 8018846:	b280      	uxth	r0, r0
 8018848:	f004 fab4 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+222, Y+5, 'р');
 801884c:	f105 00de 	add.w	r0, r5, #222	; 0xde
 8018850:	4621      	mov	r1, r4
 8018852:	2280      	movs	r2, #128	; 0x80
 8018854:	b280      	uxth	r0, r0
 8018856:	f004 faad 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+234, Y+5, 'е');
 801885a:	f105 00ea 	add.w	r0, r5, #234	; 0xea
 801885e:	4621      	mov	r1, r4
 8018860:	22b5      	movs	r2, #181	; 0xb5
 8018862:	b280      	uxth	r0, r0
}
 8018864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+234, Y+5, 'е');
 8018868:	f004 baa4 	b.w	801cdb4 <TFT_DrawCharRus>
 801886c:	200001d0 	.word	0x200001d0
 8018870:	200001d8 	.word	0x200001d8

08018874 <GUI_TextRu_Mode>:

void GUI_TextRu_Mode(uint16_t X, uint16_t Y)
{
 8018874:	b538      	push	{r3, r4, r5, lr}
 8018876:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018878:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801887c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801887e:	f004 fa8d 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018882:	2063      	movs	r0, #99	; 0x63
 8018884:	f004 fa90 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018888:	4815      	ldr	r0, [pc, #84]	; (80188e0 <GUI_TextRu_Mode+0x6c>)
 801888a:	f004 fa81 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 801888e:	4621      	mov	r1, r4
 8018890:	22a0      	movs	r2, #160	; 0xa0
 8018892:	4628      	mov	r0, r5
 8018894:	f004 fa8e 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'е');
 8018898:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801889a:	4812      	ldr	r0, [pc, #72]	; (80188e4 <GUI_TextRu_Mode+0x70>)
 801889c:	f004 fa78 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'е');
 80188a0:	b2a4      	uxth	r4, r4
 80188a2:	f105 000f 	add.w	r0, r5, #15
 80188a6:	4621      	mov	r1, r4
 80188a8:	22b5      	movs	r2, #181	; 0xb5
 80188aa:	b280      	uxth	r0, r0
 80188ac:	f004 fa82 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ж');
 80188b0:	f105 001c 	add.w	r0, r5, #28
 80188b4:	4621      	mov	r1, r4
 80188b6:	22b6      	movs	r2, #182	; 0xb6
 80188b8:	b280      	uxth	r0, r0
 80188ba:	f004 fa7b 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 80188be:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80188c2:	4621      	mov	r1, r4
 80188c4:	22b8      	movs	r2, #184	; 0xb8
 80188c6:	b280      	uxth	r0, r0
 80188c8:	f004 fa74 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+54, Y+5, 'м');
 80188cc:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80188d0:	4621      	mov	r1, r4
 80188d2:	22bc      	movs	r2, #188	; 0xbc
 80188d4:	b280      	uxth	r0, r0
}
 80188d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+54, Y+5, 'м');
 80188da:	f004 ba6b 	b.w	801cdb4 <TFT_DrawCharRus>
 80188de:	bf00      	nop
 80188e0:	200001d0 	.word	0x200001d0
 80188e4:	200001d8 	.word	0x200001d8

080188e8 <GUI_TextRu_Illuminance>:

void GUI_TextRu_Illuminance(uint16_t X, uint16_t Y)
{
 80188e8:	b538      	push	{r3, r4, r5, lr}
 80188ea:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80188ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80188f0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80188f2:	f004 fa53 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80188f6:	2063      	movs	r0, #99	; 0x63
 80188f8:	f004 fa56 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80188fc:	482d      	ldr	r0, [pc, #180]	; (80189b4 <GUI_TextRu_Illuminance+0xcc>)
 80188fe:	f004 fa47 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 8018902:	4621      	mov	r1, r4
 8018904:	229e      	movs	r2, #158	; 0x9e
 8018906:	4628      	mov	r0, r5
 8018908:	f004 fa54 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801890c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801890e:	482a      	ldr	r0, [pc, #168]	; (80189b8 <GUI_TextRu_Illuminance+0xd0>)
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018910:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018912:	f004 fa3d 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018916:	f105 000f 	add.w	r0, r5, #15
 801891a:	4621      	mov	r1, r4
 801891c:	2281      	movs	r2, #129	; 0x81
 801891e:	b280      	uxth	r0, r0
 8018920:	f004 fa48 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+26, Y+5, 'в');
 8018924:	f105 001a 	add.w	r0, r5, #26
 8018928:	4621      	mov	r1, r4
 801892a:	22b2      	movs	r2, #178	; 0xb2
 801892c:	b280      	uxth	r0, r0
 801892e:	f004 fa41 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+38, Y+5, 'е');
 8018932:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8018936:	4621      	mov	r1, r4
 8018938:	22b5      	movs	r2, #181	; 0xb5
 801893a:	b280      	uxth	r0, r0
 801893c:	f004 fa3a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+50, Y+5, 'щ');
 8018940:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8018944:	4621      	mov	r1, r4
 8018946:	2289      	movs	r2, #137	; 0x89
 8018948:	b280      	uxth	r0, r0
 801894a:	f004 fa33 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+62, Y+5, 'е');
 801894e:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 8018952:	4621      	mov	r1, r4
 8018954:	22b5      	movs	r2, #181	; 0xb5
 8018956:	b280      	uxth	r0, r0
 8018958:	f004 fa2c 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'н');
 801895c:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8018960:	4621      	mov	r1, r4
 8018962:	22bd      	movs	r2, #189	; 0xbd
 8018964:	b280      	uxth	r0, r0
 8018966:	f004 fa25 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'н');
 801896a:	f105 0055 	add.w	r0, r5, #85	; 0x55
 801896e:	4621      	mov	r1, r4
 8018970:	22bd      	movs	r2, #189	; 0xbd
 8018972:	b280      	uxth	r0, r0
 8018974:	f004 fa1e 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 8018978:	f105 0061 	add.w	r0, r5, #97	; 0x61
 801897c:	4621      	mov	r1, r4
 801897e:	22be      	movs	r2, #190	; 0xbe
 8018980:	b280      	uxth	r0, r0
 8018982:	f004 fa17 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 8018986:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801898a:	4621      	mov	r1, r4
 801898c:	2281      	movs	r2, #129	; 0x81
 801898e:	b280      	uxth	r0, r0
 8018990:	f004 fa10 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+5, 'т');
 8018994:	f105 0076 	add.w	r0, r5, #118	; 0x76
 8018998:	4621      	mov	r1, r4
 801899a:	2282      	movs	r2, #130	; 0x82
 801899c:	b280      	uxth	r0, r0
 801899e:	f004 fa09 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 80189a2:	f105 0082 	add.w	r0, r5, #130	; 0x82
 80189a6:	4621      	mov	r1, r4
 80189a8:	228c      	movs	r2, #140	; 0x8c
 80189aa:	b280      	uxth	r0, r0
}
 80189ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 80189b0:	f004 ba00 	b.w	801cdb4 <TFT_DrawCharRus>
 80189b4:	200001d0 	.word	0x200001d0
 80189b8:	200001d8 	.word	0x200001d8

080189bc <GUI_TextRu_PPF>:

void GUI_TextRu_PPF(uint16_t X, uint16_t Y)
{
 80189bc:	b538      	push	{r3, r4, r5, lr}
 80189be:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80189c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80189c4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80189c6:	f004 f9e9 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80189ca:	2063      	movs	r0, #99	; 0x63
 80189cc:	f004 f9ec 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80189d0:	480b      	ldr	r0, [pc, #44]	; (8018a00 <GUI_TextRu_PPF+0x44>)
 80189d2:	f004 f9dd 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 80189d6:	4629      	mov	r1, r5
 80189d8:	4620      	mov	r0, r4
 80189da:	22a4      	movs	r2, #164	; 0xa4
 80189dc:	f004 f9ea 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 80189e0:	f104 0011 	add.w	r0, r4, #17
 80189e4:	4629      	mov	r1, r5
 80189e6:	2290      	movs	r2, #144	; 0x90
 80189e8:	b280      	uxth	r0, r0
 80189ea:	f004 f9e3 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 80189ee:	f104 0020 	add.w	r0, r4, #32
 80189f2:	4629      	mov	r1, r5
 80189f4:	22a0      	movs	r2, #160	; 0xa0
 80189f6:	b280      	uxth	r0, r0
}
 80189f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+32, Y, 'Р');
 80189fc:	f004 b9da 	b.w	801cdb4 <TFT_DrawCharRus>
 8018a00:	200001d0 	.word	0x200001d0

08018a04 <GUI_TextRu_PPF_RGB>:

void GUI_TextRu_PPF_RGB(uint16_t X, uint16_t Y)
{
 8018a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a08:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16RU_arch_big);
 8018a0a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8018b18 <GUI_TextRu_PPF_RGB+0x114>
	TFT_DrawCharRus(X, Y, 'С');
	TFT_SetFont(&Font16RU_arch_small);
 8018a0e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8018b1c <GUI_TextRu_PPF_RGB+0x118>
	TFT_DrawCharRus(X+15, Y+5, 'и');
	TFT_DrawCharRus(X+27, Y+5, 'н');
	TFT_SetFont(&Font16EN_arch_big);
 8018a12:	4f40      	ldr	r7, [pc, #256]	; (8018b14 <GUI_TextRu_PPF_RGB+0x110>)
	TFT_SetTextColor(TFT_White);
 8018a14:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018a18:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018a1a:	f004 f9bf 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018a1e:	2063      	movs	r0, #99	; 0x63
 8018a20:	f004 f9c2 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018a24:	4648      	mov	r0, r9
 8018a26:	f004 f9b3 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'С');
 8018a2a:	4629      	mov	r1, r5
 8018a2c:	22a1      	movs	r2, #161	; 0xa1
 8018a2e:	4620      	mov	r0, r4
 8018a30:	f004 f9c0 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018a34:	1d6e      	adds	r6, r5, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018a36:	4640      	mov	r0, r8
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018a38:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font16RU_arch_small);
 8018a3a:	f004 f9a9 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018a3e:	f104 000f 	add.w	r0, r4, #15
 8018a42:	4631      	mov	r1, r6
 8018a44:	22b8      	movs	r2, #184	; 0xb8
 8018a46:	b280      	uxth	r0, r0
 8018a48:	f004 f9b4 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'н');
 8018a4c:	f104 001b 	add.w	r0, r4, #27
 8018a50:	4631      	mov	r1, r6
 8018a52:	22bd      	movs	r2, #189	; 0xbd
 8018a54:	b280      	uxth	r0, r0
 8018a56:	f004 f9ad 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018a5a:	4638      	mov	r0, r7
 8018a5c:	f004 f998 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+40, Y, '-');
 8018a60:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018a64:	4629      	mov	r1, r5
 8018a66:	222d      	movs	r2, #45	; 0x2d
 8018a68:	b280      	uxth	r0, r0
 8018a6a:	f004 fa5b 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 8018a6e:	4648      	mov	r0, r9
 8018a70:	f004 f98e 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+55, Y, 'З');
 8018a74:	f104 0037 	add.w	r0, r4, #55	; 0x37
 8018a78:	4629      	mov	r1, r5
 8018a7a:	2297      	movs	r2, #151	; 0x97
 8018a7c:	b280      	uxth	r0, r0
 8018a7e:	f004 f999 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018a82:	4640      	mov	r0, r8
 8018a84:	f004 f984 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+70, Y+5, 'е');
 8018a88:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8018a8c:	4631      	mov	r1, r6
 8018a8e:	22b5      	movs	r2, #181	; 0xb5
 8018a90:	b280      	uxth	r0, r0
 8018a92:	f004 f98f 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+5, 'л');
 8018a96:	f104 0052 	add.w	r0, r4, #82	; 0x52
 8018a9a:	4631      	mov	r1, r6
 8018a9c:	22bb      	movs	r2, #187	; 0xbb
 8018a9e:	b280      	uxth	r0, r0
 8018aa0:	f004 f988 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018aa4:	4638      	mov	r0, r7
 8018aa6:	f004 f973 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+94, Y, '-');
 8018aaa:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 8018aae:	4629      	mov	r1, r5
 8018ab0:	222d      	movs	r2, #45	; 0x2d
 8018ab2:	b280      	uxth	r0, r0
 8018ab4:	f004 fa36 	bl	801cf24 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 8018ab8:	4648      	mov	r0, r9
 8018aba:	f004 f969 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+109, Y, 'К');
 8018abe:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8018ac2:	4629      	mov	r1, r5
 8018ac4:	229a      	movs	r2, #154	; 0x9a
 8018ac6:	b280      	uxth	r0, r0
 8018ac8:	f004 f974 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018acc:	4640      	mov	r0, r8
 8018ace:	f004 f95f 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+124, Y+5, 'р');
 8018ad2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8018ad6:	4631      	mov	r1, r6
 8018ad8:	2280      	movs	r2, #128	; 0x80
 8018ada:	b280      	uxth	r0, r0
 8018adc:	f004 f96a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018ae0:	4638      	mov	r0, r7
 8018ae2:	f004 f955 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+136, Y, '-');
 8018ae6:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8018aea:	4629      	mov	r1, r5
 8018aec:	222d      	movs	r2, #45	; 0x2d
 8018aee:	b280      	uxth	r0, r0
 8018af0:	f004 fa18 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+152, Y, 'F');
 8018af4:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8018af8:	4629      	mov	r1, r5
 8018afa:	2246      	movs	r2, #70	; 0x46
 8018afc:	b280      	uxth	r0, r0
 8018afe:	f004 fa11 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+167, Y, 'R');
 8018b02:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 8018b06:	4629      	mov	r1, r5
 8018b08:	2252      	movs	r2, #82	; 0x52
 8018b0a:	b280      	uxth	r0, r0
}
 8018b0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TFT_DrawChar(X+167, Y, 'R');
 8018b10:	f004 ba08 	b.w	801cf24 <TFT_DrawChar>
 8018b14:	200001b0 	.word	0x200001b0
 8018b18:	200001d0 	.word	0x200001d0
 8018b1c:	200001d8 	.word	0x200001d8

08018b20 <GUI_TextRu_PPF_bands>:
void GUI_TextRu_PPF_bands(uint16_t X, uint16_t Y)
{
 8018b20:	b538      	push	{r3, r4, r5, lr}
 8018b22:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018b24:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b28:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018b2a:	f004 f937 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b2e:	2063      	movs	r0, #99	; 0x63
 8018b30:	f004 f93a 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018b34:	482d      	ldr	r0, [pc, #180]	; (8018bec <GUI_TextRu_PPF_bands+0xcc>)
 8018b36:	f004 f92b 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 8018b3a:	4621      	mov	r1, r4
 8018b3c:	4628      	mov	r0, r5
 8018b3e:	22a4      	movs	r2, #164	; 0xa4
 8018b40:	f004 f938 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 8018b44:	f105 0011 	add.w	r0, r5, #17
 8018b48:	4621      	mov	r1, r4
 8018b4a:	2290      	movs	r2, #144	; 0x90
 8018b4c:	b280      	uxth	r0, r0
 8018b4e:	f004 f931 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 8018b52:	f105 0020 	add.w	r0, r5, #32
 8018b56:	4621      	mov	r1, r4
 8018b58:	22a0      	movs	r2, #160	; 0xa0
 8018b5a:	b280      	uxth	r0, r0
 8018b5c:	f004 f92a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018b60:	3402      	adds	r4, #2
	TFT_SetFont(&Font16RU_arch_small);
 8018b62:	4823      	ldr	r0, [pc, #140]	; (8018bf0 <GUI_TextRu_PPF_bands+0xd0>)
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018b64:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018b66:	f004 f913 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018b6a:	f105 0039 	add.w	r0, r5, #57	; 0x39
 8018b6e:	4621      	mov	r1, r4
 8018b70:	22b4      	movs	r2, #180	; 0xb4
 8018b72:	b280      	uxth	r0, r0
 8018b74:	f004 f91e 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+70, Y+2, 'и');
 8018b78:	f105 0046 	add.w	r0, r5, #70	; 0x46
 8018b7c:	4621      	mov	r1, r4
 8018b7e:	22b8      	movs	r2, #184	; 0xb8
 8018b80:	b280      	uxth	r0, r0
 8018b82:	f004 f917 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+83, Y+2, 'а');
 8018b86:	f105 0053 	add.w	r0, r5, #83	; 0x53
 8018b8a:	4621      	mov	r1, r4
 8018b8c:	22b0      	movs	r2, #176	; 0xb0
 8018b8e:	b280      	uxth	r0, r0
 8018b90:	f004 f910 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+96, Y+2, 'п');
 8018b94:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8018b98:	4621      	mov	r1, r4
 8018b9a:	22bf      	movs	r2, #191	; 0xbf
 8018b9c:	b280      	uxth	r0, r0
 8018b9e:	f004 f909 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+2, 'а');
 8018ba2:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 8018ba6:	4621      	mov	r1, r4
 8018ba8:	22b0      	movs	r2, #176	; 0xb0
 8018baa:	b280      	uxth	r0, r0
 8018bac:	f004 f902 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+122, Y+2, 'з');
 8018bb0:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 8018bb4:	4621      	mov	r1, r4
 8018bb6:	22b7      	movs	r2, #183	; 0xb7
 8018bb8:	b280      	uxth	r0, r0
 8018bba:	f004 f8fb 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+135, Y+2, 'о');
 8018bbe:	f105 0087 	add.w	r0, r5, #135	; 0x87
 8018bc2:	4621      	mov	r1, r4
 8018bc4:	22be      	movs	r2, #190	; 0xbe
 8018bc6:	b280      	uxth	r0, r0
 8018bc8:	f004 f8f4 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+148, Y+2, 'н');
 8018bcc:	f105 0094 	add.w	r0, r5, #148	; 0x94
 8018bd0:	4621      	mov	r1, r4
 8018bd2:	22bd      	movs	r2, #189	; 0xbd
 8018bd4:	b280      	uxth	r0, r0
 8018bd6:	f004 f8ed 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018bda:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 8018bde:	4621      	mov	r1, r4
 8018be0:	228b      	movs	r2, #139	; 0x8b
 8018be2:	b280      	uxth	r0, r0
}
 8018be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018be8:	f004 b8e4 	b.w	801cdb4 <TFT_DrawCharRus>
 8018bec:	200001d0 	.word	0x200001d0
 8018bf0:	200001d8 	.word	0x200001d8

08018bf4 <GUI_TextRu_Info_Callibration>:

void GUI_TextRu_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8018bf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018bf6:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8018bf8:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	9300      	str	r3, [sp, #0]
 8018c00:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018c04:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 8018c06:	f004 f8c9 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018c0a:	2063      	movs	r0, #99	; 0x63
 8018c0c:	f004 f8cc 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018c10:	4832      	ldr	r0, [pc, #200]	; (8018cdc <GUI_TextRu_Info_Callibration+0xe8>)
	TFT_DrawCharRus(X+82, Y+2, 'о');
	TFT_DrawCharRus(X+95, Y+2, 'в');
	TFT_DrawCharRus(X+108, Y+2, 'к');
	TFT_DrawCharRus(X+118, Y+2, 'а');
	
	sprintf (buffer, "%02u",  date);
 8018c12:	4d33      	ldr	r5, [pc, #204]	; (8018ce0 <GUI_TextRu_Info_Callibration+0xec>)
	TFT_SetFont(&Font16RU_arch_big);
 8018c14:	f004 f8bc 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'К');
 8018c18:	229a      	movs	r2, #154	; 0x9a
 8018c1a:	2160      	movs	r1, #96	; 0x60
 8018c1c:	2046      	movs	r0, #70	; 0x46
 8018c1e:	f004 f8c9 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018c22:	4830      	ldr	r0, [pc, #192]	; (8018ce4 <GUI_TextRu_Info_Callibration+0xf0>)
 8018c24:	f004 f8b4 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'а');
 8018c28:	22b0      	movs	r2, #176	; 0xb0
 8018c2a:	2166      	movs	r1, #102	; 0x66
 8018c2c:	2057      	movs	r0, #87	; 0x57
 8018c2e:	f004 f8c1 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'л');
 8018c32:	22bb      	movs	r2, #187	; 0xbb
 8018c34:	2166      	movs	r1, #102	; 0x66
 8018c36:	2064      	movs	r0, #100	; 0x64
 8018c38:	f004 f8bc 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 8018c3c:	22b8      	movs	r2, #184	; 0xb8
 8018c3e:	2166      	movs	r1, #102	; 0x66
 8018c40:	2071      	movs	r0, #113	; 0x71
 8018c42:	f004 f8b7 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'б');
 8018c46:	22b1      	movs	r2, #177	; 0xb1
 8018c48:	2166      	movs	r1, #102	; 0x66
 8018c4a:	207e      	movs	r0, #126	; 0x7e
 8018c4c:	f004 f8b2 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'р');
 8018c50:	2280      	movs	r2, #128	; 0x80
 8018c52:	2166      	movs	r1, #102	; 0x66
 8018c54:	208b      	movs	r0, #139	; 0x8b
 8018c56:	f004 f8ad 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'о');
 8018c5a:	22be      	movs	r2, #190	; 0xbe
 8018c5c:	2166      	movs	r1, #102	; 0x66
 8018c5e:	2098      	movs	r0, #152	; 0x98
 8018c60:	f004 f8a8 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'в');
 8018c64:	22b2      	movs	r2, #178	; 0xb2
 8018c66:	2166      	movs	r1, #102	; 0x66
 8018c68:	20a5      	movs	r0, #165	; 0xa5
 8018c6a:	f004 f8a3 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+108, Y+2, 'к');
 8018c6e:	22ba      	movs	r2, #186	; 0xba
 8018c70:	2166      	movs	r1, #102	; 0x66
 8018c72:	20b2      	movs	r0, #178	; 0xb2
 8018c74:	f004 f89e 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+2, 'а');
 8018c78:	22b0      	movs	r2, #176	; 0xb0
 8018c7a:	2166      	movs	r1, #102	; 0x66
 8018c7c:	20bc      	movs	r0, #188	; 0xbc
 8018c7e:	f004 f899 	bl	801cdb4 <TFT_DrawCharRus>
	sprintf (buffer, "%02u",  date);
 8018c82:	4622      	mov	r2, r4
 8018c84:	4629      	mov	r1, r5
 8018c86:	4668      	mov	r0, sp
 8018c88:	f007 fcc2 	bl	8020610 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8018c8c:	4816      	ldr	r0, [pc, #88]	; (8018ce8 <GUI_TextRu_Info_Callibration+0xf4>)
 8018c8e:	f004 f87f 	bl	801cd90 <TFT_SetFont>
	buffer[2] = '.';
 8018c92:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018c94:	2303      	movs	r3, #3
 8018c96:	466a      	mov	r2, sp
 8018c98:	2182      	movs	r1, #130	; 0x82
 8018c9a:	201e      	movs	r0, #30
	buffer[2] = '.';
 8018c9c:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018ca0:	f004 f998 	bl	801cfd4 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 8018ca4:	4632      	mov	r2, r6
 8018ca6:	4629      	mov	r1, r5
 8018ca8:	4668      	mov	r0, sp
 8018caa:	f007 fcb1 	bl	8020610 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018cae:	2303      	movs	r3, #3
 8018cb0:	466a      	mov	r2, sp
 8018cb2:	2182      	movs	r1, #130	; 0x82
 8018cb4:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 8018cb6:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018cba:	f004 f98b 	bl	801cfd4 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 8018cbe:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8018cc2:	490a      	ldr	r1, [pc, #40]	; (8018cec <GUI_TextRu_Info_Callibration+0xf8>)
 8018cc4:	4668      	mov	r0, sp
 8018cc6:	f007 fca3 	bl	8020610 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018cca:	2303      	movs	r3, #3
 8018ccc:	466a      	mov	r2, sp
 8018cce:	2182      	movs	r1, #130	; 0x82
 8018cd0:	209b      	movs	r0, #155	; 0x9b
 8018cd2:	f004 f97f 	bl	801cfd4 <TFT_DisplayString>
}
 8018cd6:	b002      	add	sp, #8
 8018cd8:	bd70      	pop	{r4, r5, r6, pc}
 8018cda:	bf00      	nop
 8018cdc:	200001d0 	.word	0x200001d0
 8018ce0:	080320f4 	.word	0x080320f4
 8018ce4:	200001d8 	.word	0x200001d8
 8018ce8:	200001f0 	.word	0x200001f0
 8018cec:	080320f9 	.word	0x080320f9

08018cf0 <GUI_TextRu_WriteSD>:

void GUI_TextRu_WriteSD(uint16_t X, uint16_t Y)
{
 8018cf0:	b538      	push	{r3, r4, r5, lr}
 8018cf2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018cf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018cf8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018cfa:	f004 f84f 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018cfe:	2063      	movs	r0, #99	; 0x63
 8018d00:	f004 f852 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018d04:	4818      	ldr	r0, [pc, #96]	; (8018d68 <GUI_TextRu_WriteSD+0x78>)
 8018d06:	f004 f843 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'З');
 8018d0a:	4621      	mov	r1, r4
 8018d0c:	2297      	movs	r2, #151	; 0x97
 8018d0e:	4628      	mov	r0, r5
 8018d10:	f004 f850 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018d14:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018d16:	4815      	ldr	r0, [pc, #84]	; (8018d6c <GUI_TextRu_WriteSD+0x7c>)
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018d18:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018d1a:	f004 f839 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018d1e:	f105 000f 	add.w	r0, r5, #15
 8018d22:	4621      	mov	r1, r4
 8018d24:	22b0      	movs	r2, #176	; 0xb0
 8018d26:	b280      	uxth	r0, r0
 8018d28:	f004 f844 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'п');
 8018d2c:	f105 001c 	add.w	r0, r5, #28
 8018d30:	4621      	mov	r1, r4
 8018d32:	22bf      	movs	r2, #191	; 0xbf
 8018d34:	b280      	uxth	r0, r0
 8018d36:	f004 f83d 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 8018d3a:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8018d3e:	4621      	mov	r1, r4
 8018d40:	22b8      	movs	r2, #184	; 0xb8
 8018d42:	b280      	uxth	r0, r0
 8018d44:	f004 f836 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'с');
 8018d48:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8018d4c:	4621      	mov	r1, r4
 8018d4e:	2281      	movs	r2, #129	; 0x81
 8018d50:	b280      	uxth	r0, r0
 8018d52:	f004 f82f 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 8018d56:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8018d5a:	4621      	mov	r1, r4
 8018d5c:	228c      	movs	r2, #140	; 0x8c
 8018d5e:	b280      	uxth	r0, r0
}
 8018d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 8018d64:	f004 b826 	b.w	801cdb4 <TFT_DrawCharRus>
 8018d68:	200001d0 	.word	0x200001d0
 8018d6c:	200001d8 	.word	0x200001d8

08018d70 <GUI_TextRu_Info_Serial>:

void GUI_TextRu_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 8018d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d72:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 8018d74:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018d78:	2300      	movs	r3, #0
 8018d7a:	9300      	str	r3, [sp, #0]
 8018d7c:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018d80:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 8018d82:	f004 f80b 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018d86:	2063      	movs	r0, #99	; 0x63
 8018d88:	f004 f80e 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018d8c:	4830      	ldr	r0, [pc, #192]	; (8018e50 <GUI_TextRu_Info_Serial+0xe0>)
 8018d8e:	f003 ffff 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'С');
 8018d92:	22a1      	movs	r2, #161	; 0xa1
 8018d94:	21c4      	movs	r1, #196	; 0xc4
 8018d96:	203c      	movs	r0, #60	; 0x3c
 8018d98:	f004 f80c 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018d9c:	482d      	ldr	r0, [pc, #180]	; (8018e54 <GUI_TextRu_Info_Serial+0xe4>)
 8018d9e:	f003 fff7 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'е');
 8018da2:	22b5      	movs	r2, #181	; 0xb5
 8018da4:	21ca      	movs	r1, #202	; 0xca
 8018da6:	204d      	movs	r0, #77	; 0x4d
 8018da8:	f004 f804 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'р');
 8018dac:	2280      	movs	r2, #128	; 0x80
 8018dae:	21ca      	movs	r1, #202	; 0xca
 8018db0:	205a      	movs	r0, #90	; 0x5a
 8018db2:	f003 ffff 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 8018db6:	22b8      	movs	r2, #184	; 0xb8
 8018db8:	21ca      	movs	r1, #202	; 0xca
 8018dba:	2067      	movs	r0, #103	; 0x67
 8018dbc:	f003 fffa 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'й');
 8018dc0:	22b9      	movs	r2, #185	; 0xb9
 8018dc2:	21ca      	movs	r1, #202	; 0xca
 8018dc4:	2074      	movs	r0, #116	; 0x74
 8018dc6:	f003 fff5 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'н');
 8018dca:	22bd      	movs	r2, #189	; 0xbd
 8018dcc:	21ca      	movs	r1, #202	; 0xca
 8018dce:	2081      	movs	r0, #129	; 0x81
 8018dd0:	f003 fff0 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'ы');
 8018dd4:	228b      	movs	r2, #139	; 0x8b
 8018dd6:	21ca      	movs	r1, #202	; 0xca
 8018dd8:	208e      	movs	r0, #142	; 0x8e
 8018dda:	f003 ffeb 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'й');
 8018dde:	22b9      	movs	r2, #185	; 0xb9
 8018de0:	21ca      	movs	r1, #202	; 0xca
 8018de2:	209b      	movs	r0, #155	; 0x9b
 8018de4:	f003 ffe6 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+115, Y+2, 'н');
 8018de8:	22bd      	movs	r2, #189	; 0xbd
 8018dea:	21ca      	movs	r1, #202	; 0xca
 8018dec:	20af      	movs	r0, #175	; 0xaf
 8018dee:	f003 ffe1 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+128, Y+2, 'о');
 8018df2:	22be      	movs	r2, #190	; 0xbe
 8018df4:	21ca      	movs	r1, #202	; 0xca
 8018df6:	20bc      	movs	r0, #188	; 0xbc
 8018df8:	f003 ffdc 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+141, Y+2, 'м');
 8018dfc:	22bc      	movs	r2, #188	; 0xbc
 8018dfe:	21ca      	movs	r1, #202	; 0xca
 8018e00:	20c9      	movs	r0, #201	; 0xc9
 8018e02:	f003 ffd7 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+154, Y+2, 'е');
 8018e06:	22b5      	movs	r2, #181	; 0xb5
 8018e08:	21ca      	movs	r1, #202	; 0xca
 8018e0a:	20d6      	movs	r0, #214	; 0xd6
 8018e0c:	f003 ffd2 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+165, Y+2, 'р');
 8018e10:	2280      	movs	r2, #128	; 0x80
 8018e12:	21ca      	movs	r1, #202	; 0xca
 8018e14:	20e1      	movs	r0, #225	; 0xe1
 8018e16:	f003 ffcd 	bl	801cdb4 <TFT_DrawCharRus>

	sprintf (buffer, "%u",  Part);
 8018e1a:	462a      	mov	r2, r5
 8018e1c:	490e      	ldr	r1, [pc, #56]	; (8018e58 <GUI_TextRu_Info_Serial+0xe8>)
 8018e1e:	4668      	mov	r0, sp
 8018e20:	f007 fbf6 	bl	8020610 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8018e24:	480d      	ldr	r0, [pc, #52]	; (8018e5c <GUI_TextRu_Info_Serial+0xec>)
 8018e26:	f003 ffb3 	bl	801cd90 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018e2a:	2303      	movs	r3, #3
 8018e2c:	466a      	mov	r2, sp
 8018e2e:	21e6      	movs	r1, #230	; 0xe6
 8018e30:	2028      	movs	r0, #40	; 0x28
 8018e32:	f004 f8cf 	bl	801cfd4 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 8018e36:	4622      	mov	r2, r4
 8018e38:	4909      	ldr	r1, [pc, #36]	; (8018e60 <GUI_TextRu_Info_Serial+0xf0>)
 8018e3a:	4668      	mov	r0, sp
 8018e3c:	f007 fbe8 	bl	8020610 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018e40:	2303      	movs	r3, #3
 8018e42:	466a      	mov	r2, sp
 8018e44:	21e6      	movs	r1, #230	; 0xe6
 8018e46:	2087      	movs	r0, #135	; 0x87
 8018e48:	f004 f8c4 	bl	801cfd4 <TFT_DisplayString>
}
 8018e4c:	b003      	add	sp, #12
 8018e4e:	bd30      	pop	{r4, r5, pc}
 8018e50:	200001d0 	.word	0x200001d0
 8018e54:	200001d8 	.word	0x200001d8
 8018e58:	080320fd 	.word	0x080320fd
 8018e5c:	200001f0 	.word	0x200001f0
 8018e60:	08032100 	.word	0x08032100

08018e64 <GUI_TextRu_Info_Ver>:

void GUI_TextRu_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 8018e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 8018e66:	2300      	movs	r3, #0
	
	X = 120;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8018e68:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018e6c:	9302      	str	r3, [sp, #8]
 8018e6e:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8018e72:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 8018e76:	f003 ff91 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018e7a:	2063      	movs	r0, #99	; 0x63
 8018e7c:	f003 ff94 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018e80:	481b      	ldr	r0, [pc, #108]	; (8018ef0 <GUI_TextRu_Info_Ver+0x8c>)
	TFT_DrawCharRus(X, Y-1, 'П');
	TFT_DrawCharRus(X+18, Y-1, 'О');
	
	TFT_SetFont(&Font16);
 8018e82:	4c1c      	ldr	r4, [pc, #112]	; (8018ef4 <GUI_TextRu_Info_Ver+0x90>)
	TFT_SetFont(&Font16RU_arch_big);
 8018e84:	f003 ff84 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-1, 'П');
 8018e88:	229f      	movs	r2, #159	; 0x9f
 8018e8a:	f240 115d 	movw	r1, #349	; 0x15d
 8018e8e:	2078      	movs	r0, #120	; 0x78
 8018e90:	f003 ff90 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+18, Y-1, 'О');
 8018e94:	229e      	movs	r2, #158	; 0x9e
 8018e96:	f240 115d 	movw	r1, #349	; 0x15d
 8018e9a:	208a      	movs	r0, #138	; 0x8a
 8018e9c:	f003 ff8a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16);
 8018ea0:	4620      	mov	r0, r4
 8018ea2:	f003 ff75 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+52, Y, '.');
 8018ea6:	222e      	movs	r2, #46	; 0x2e
 8018ea8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018eac:	20ac      	movs	r0, #172	; 0xac
 8018eae:	f004 f839 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y, 'v');
 8018eb2:	2276      	movs	r2, #118	; 0x76
 8018eb4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018eb8:	20a2      	movs	r0, #162	; 0xa2
 8018eba:	f004 f833 	bl	801cf24 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 8018ebe:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018ec2:	ee10 0a10 	vmov	r0, s0
 8018ec6:	f7e7 fb57 	bl	8000578 <__aeabi_f2d>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	460b      	mov	r3, r1
 8018ece:	a802      	add	r0, sp, #8
 8018ed0:	4909      	ldr	r1, [pc, #36]	; (8018ef8 <GUI_TextRu_Info_Ver+0x94>)
 8018ed2:	f007 fb9d 	bl	8020610 <sprintf>
	TFT_SetFont(&Font16);
 8018ed6:	4620      	mov	r0, r4
 8018ed8:	f003 ff5a 	bl	801cd90 <TFT_SetFont>
	TFT_DisplayString(185, Y, (uint8_t *)buffer, LEFT_MODE);
 8018edc:	2303      	movs	r3, #3
 8018ede:	aa02      	add	r2, sp, #8
 8018ee0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018ee4:	20b9      	movs	r0, #185	; 0xb9
 8018ee6:	f004 f875 	bl	801cfd4 <TFT_DisplayString>
}
 8018eea:	b004      	add	sp, #16
 8018eec:	bd10      	pop	{r4, pc}
 8018eee:	bf00      	nop
 8018ef0:	200001d0 	.word	0x200001d0
 8018ef4:	200001a8 	.word	0x200001a8
 8018ef8:	080320e5 	.word	0x080320e5

08018efc <GUI_TextRu_CCT>:

void GUI_TextRu_CCT(uint16_t X, uint16_t Y)
{
 8018efc:	b538      	push	{r3, r4, r5, lr}
 8018efe:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018f00:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018f04:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018f06:	f003 ff49 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018f0a:	2063      	movs	r0, #99	; 0x63
 8018f0c:	f003 ff4c 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018f10:	481e      	ldr	r0, [pc, #120]	; (8018f8c <GUI_TextRu_CCT+0x90>)
 8018f12:	f003 ff3d 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'К');
 8018f16:	4629      	mov	r1, r5
 8018f18:	4620      	mov	r0, r4
 8018f1a:	229a      	movs	r2, #154	; 0x9a
 8018f1c:	f003 ff4a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'Ц');
 8018f20:	f104 0011 	add.w	r0, r4, #17
 8018f24:	4629      	mov	r1, r5
 8018f26:	22a6      	movs	r2, #166	; 0xa6
 8018f28:	b280      	uxth	r0, r0
 8018f2a:	f003 ff43 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+33, Y, 'Т');
 8018f2e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 8018f32:	4629      	mov	r1, r5
 8018f34:	22a2      	movs	r2, #162	; 0xa2
 8018f36:	b280      	uxth	r0, r0
 8018f38:	f003 ff3c 	bl	801cdb4 <TFT_DrawCharRus>

	TFT_SetFont(&Font16EN_arch_big);
 8018f3c:	4814      	ldr	r0, [pc, #80]	; (8018f90 <GUI_TextRu_CCT+0x94>)
 8018f3e:	f003 ff27 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+49, Y, '(');
 8018f42:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8018f46:	4629      	mov	r1, r5
 8018f48:	2228      	movs	r2, #40	; 0x28
 8018f4a:	b280      	uxth	r0, r0
 8018f4c:	f003 ffea 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+104, Y, ')');
 8018f50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018f54:	4629      	mov	r1, r5
 8018f56:	2229      	movs	r2, #41	; 0x29
 8018f58:	b280      	uxth	r0, r0
 8018f5a:	f003 ffe3 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y, 'C');
 8018f5e:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 8018f62:	4629      	mov	r1, r5
 8018f64:	2243      	movs	r2, #67	; 0x43
 8018f66:	b280      	uxth	r0, r0
 8018f68:	f003 ffdc 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y, 'C');
 8018f6c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018f70:	4629      	mov	r1, r5
 8018f72:	2243      	movs	r2, #67	; 0x43
 8018f74:	b280      	uxth	r0, r0
 8018f76:	f003 ffd5 	bl	801cf24 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y, 'T');
 8018f7a:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 8018f7e:	4629      	mov	r1, r5
 8018f80:	2254      	movs	r2, #84	; 0x54
 8018f82:	b280      	uxth	r0, r0
}
 8018f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+91, Y, 'T');
 8018f88:	f003 bfcc 	b.w	801cf24 <TFT_DrawChar>
 8018f8c:	200001d0 	.word	0x200001d0
 8018f90:	200001b0 	.word	0x200001b0

08018f94 <GUI_TextRu_umol>:

void GUI_TextRu_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 8018f94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018f98:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018f9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018f9e:	4616      	mov	r6, r2
 8018fa0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018fa2:	f003 fefb 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018fa6:	2063      	movs	r0, #99	; 0x63
 8018fa8:	f003 fefe 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 8018fac:	482f      	ldr	r0, [pc, #188]	; (801906c <GUI_TextRu_umol+0xd8>)
 8018fae:	f003 feef 	bl	801cd90 <TFT_SetFont>
	
	if(deg){
 8018fb2:	2e00      	cmp	r6, #0
 8018fb4:	d057      	beq.n	8019066 <GUI_TextRu_umol+0xd2>
		TFT_DrawCharRus(X, Y, 'м');
 8018fb6:	22bc      	movs	r2, #188	; 0xbc
	} else{
		TFT_DrawCharRus(X, Y, 'я'+1);
 8018fb8:	4629      	mov	r1, r5
 8018fba:	4620      	mov	r0, r4
 8018fbc:	f003 fefa 	bl	801cdb4 <TFT_DrawCharRus>
	}

	TFT_DrawCharRus(X+8, Y, 'м');
 8018fc0:	f104 0008 	add.w	r0, r4, #8
 8018fc4:	4629      	mov	r1, r5
 8018fc6:	22bc      	movs	r2, #188	; 0xbc
 8018fc8:	b280      	uxth	r0, r0
 8018fca:	f003 fef3 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y, 'о');
	TFT_DrawCharRus(X+22, Y, 'л');
 8018fce:	f104 0716 	add.w	r7, r4, #22
	TFT_DrawCharRus(X+16, Y, 'о');
 8018fd2:	f104 0010 	add.w	r0, r4, #16
 8018fd6:	4629      	mov	r1, r5
	TFT_DrawCharRus(X+22, Y, 'л');
 8018fd8:	b2bf      	uxth	r7, r7
	TFT_DrawCharRus(X+16, Y, 'о');
 8018fda:	22be      	movs	r2, #190	; 0xbe
 8018fdc:	b280      	uxth	r0, r0
 8018fde:	f003 fee9 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+22, Y, 'л');
 8018fe2:	4629      	mov	r1, r5
 8018fe4:	4638      	mov	r0, r7
 8018fe6:	22bb      	movs	r2, #187	; 0xbb
 8018fe8:	f003 fee4 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y, 'ь');
 8018fec:	f104 001c 	add.w	r0, r4, #28
 8018ff0:	4629      	mov	r1, r5
 8018ff2:	228c      	movs	r2, #140	; 0x8c
 8018ff4:	b280      	uxth	r0, r0
 8018ff6:	f003 fedd 	bl	801cdb4 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018ffa:	f105 030a 	add.w	r3, r5, #10
 8018ffe:	b29b      	uxth	r3, r3
 8019000:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8019004:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8019008:	4619      	mov	r1, r3
 801900a:	4620      	mov	r0, r4
 801900c:	f8cd 8000 	str.w	r8, [sp]
 8019010:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 8019012:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8019016:	f003 fc35 	bl	801c884 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801901a:	b2b6      	uxth	r6, r6
 801901c:	f104 000d 	add.w	r0, r4, #13
 8019020:	4631      	mov	r1, r6
 8019022:	2291      	movs	r2, #145	; 0x91
 8019024:	b280      	uxth	r0, r0
 8019026:	f003 fec5 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+11, 'м');
 801902a:	1d60      	adds	r0, r4, #5
 801902c:	4631      	mov	r1, r6
 801902e:	22bc      	movs	r2, #188	; 0xbc
 8019030:	b280      	uxth	r0, r0
 8019032:	f003 febf 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8019036:	f105 030f 	add.w	r3, r5, #15
 801903a:	f104 0214 	add.w	r2, r4, #20
 801903e:	f105 010e 	add.w	r1, r5, #14
 8019042:	f104 0013 	add.w	r0, r4, #19
 8019046:	f8cd 8000 	str.w	r8, [sp]
 801904a:	b29b      	uxth	r3, r3
 801904c:	b292      	uxth	r2, r2
 801904e:	b289      	uxth	r1, r1
 8019050:	b280      	uxth	r0, r0
 8019052:	f003 fc8c 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+11, 'с');
 8019056:	2281      	movs	r2, #129	; 0x81
 8019058:	4631      	mov	r1, r6
 801905a:	4638      	mov	r0, r7
}
 801905c:	b002      	add	sp, #8
 801905e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+22, Y+11, 'с');
 8019062:	f003 bea7 	b.w	801cdb4 <TFT_DrawCharRus>
		TFT_DrawCharRus(X, Y, 'я'+1);
 8019066:	2290      	movs	r2, #144	; 0x90
 8019068:	e7a6      	b.n	8018fb8 <GUI_TextRu_umol+0x24>
 801906a:	bf00      	nop
 801906c:	200001a0 	.word	0x200001a0

08019070 <GUI_TextRu_umol_sr>:

void GUI_TextRu_umol_sr(uint16_t X, uint16_t Y)
{
 8019070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019074:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019076:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801907a:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801907c:	f003 fe8e 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019080:	2063      	movs	r0, #99	; 0x63
 8019082:	f003 fe91 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 8019086:	483c      	ldr	r0, [pc, #240]	; (8019178 <GUI_TextRu_umol_sr+0x108>)
 8019088:	f003 fe82 	bl	801cd90 <TFT_SetFont>
	
	TFT_DrawCharRus(X+7, Y, 'я'+1);
 801908c:	1de0      	adds	r0, r4, #7
 801908e:	4629      	mov	r1, r5
 8019090:	2290      	movs	r2, #144	; 0x90
 8019092:	b280      	uxth	r0, r0
 8019094:	f003 fe8e 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y, 'м');
 8019098:	f104 000f 	add.w	r0, r4, #15
 801909c:	4629      	mov	r1, r5
 801909e:	22bc      	movs	r2, #188	; 0xbc
 80190a0:	b280      	uxth	r0, r0
 80190a2:	f003 fe87 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+23, Y, 'о');
 80190a6:	f104 0017 	add.w	r0, r4, #23
 80190aa:	4629      	mov	r1, r5
 80190ac:	22be      	movs	r2, #190	; 0xbe
 80190ae:	b280      	uxth	r0, r0
 80190b0:	f003 fe80 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y, 'л');
 80190b4:	f104 001d 	add.w	r0, r4, #29
 80190b8:	4629      	mov	r1, r5
 80190ba:	22bb      	movs	r2, #187	; 0xbb
 80190bc:	b280      	uxth	r0, r0
 80190be:	f003 fe79 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+35, Y, 'ь');
 80190c2:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80190c6:	4629      	mov	r1, r5
 80190c8:	228c      	movs	r2, #140	; 0x8c
 80190ca:	b280      	uxth	r0, r0
 80190cc:	f003 fe72 	bl	801cdb4 <TFT_DrawCharRus>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 80190d0:	f105 030a 	add.w	r3, r5, #10
 80190d4:	b29b      	uxth	r3, r3
 80190d6:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80190da:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 80190de:	1ce0      	adds	r0, r4, #3
 80190e0:	4619      	mov	r1, r3
 80190e2:	f8cd 8000 	str.w	r8, [sp]
 80190e6:	b292      	uxth	r2, r2
 80190e8:	b280      	uxth	r0, r0
	
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 80190ea:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 80190ee:	f003 fbc9 	bl	801c884 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 80190f2:	b2b6      	uxth	r6, r6
 80190f4:	f104 000d 	add.w	r0, r4, #13
 80190f8:	4631      	mov	r1, r6
 80190fa:	2291      	movs	r2, #145	; 0x91
 80190fc:	b280      	uxth	r0, r0
 80190fe:	f003 fe59 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+12, 'м');
 8019102:	1d60      	adds	r0, r4, #5
 8019104:	4631      	mov	r1, r6
 8019106:	22bc      	movs	r2, #188	; 0xbc
 8019108:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801910a:	f105 0710 	add.w	r7, r5, #16
 801910e:	350f      	adds	r5, #15
	TFT_DrawCharRus(X+5, Y+12, 'м');
 8019110:	f003 fe50 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 8019114:	b2bf      	uxth	r7, r7
 8019116:	b2ad      	uxth	r5, r5
 8019118:	f104 0214 	add.w	r2, r4, #20
 801911c:	f104 0013 	add.w	r0, r4, #19
 8019120:	462b      	mov	r3, r5
 8019122:	4639      	mov	r1, r7
 8019124:	f8cd 8000 	str.w	r8, [sp]
 8019128:	b292      	uxth	r2, r2
 801912a:	b280      	uxth	r0, r0
 801912c:	f003 fc1f 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+12, 'с');
 8019130:	f104 0016 	add.w	r0, r4, #22
 8019134:	4631      	mov	r1, r6
 8019136:	2281      	movs	r2, #129	; 0x81
 8019138:	b280      	uxth	r0, r0
 801913a:	f003 fe3b 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+30, Y+16, X+31, Y+15, TFT_White);
 801913e:	f104 021f 	add.w	r2, r4, #31
 8019142:	f104 001e 	add.w	r0, r4, #30
 8019146:	462b      	mov	r3, r5
 8019148:	4639      	mov	r1, r7
 801914a:	f8cd 8000 	str.w	r8, [sp]
 801914e:	b292      	uxth	r2, r2
 8019150:	b280      	uxth	r0, r0
 8019152:	f003 fc0c 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawCharRus(X+32, Y+12, 'с');
 8019156:	f104 0020 	add.w	r0, r4, #32
 801915a:	4631      	mov	r1, r6
 801915c:	2281      	movs	r2, #129	; 0x81
 801915e:	b280      	uxth	r0, r0
 8019160:	f003 fe28 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+12, 'р');
 8019164:	f104 0027 	add.w	r0, r4, #39	; 0x27
 8019168:	2280      	movs	r2, #128	; 0x80
 801916a:	4631      	mov	r1, r6
 801916c:	b280      	uxth	r0, r0

}
 801916e:	b002      	add	sp, #8
 8019170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+39, Y+12, 'р');
 8019174:	f003 be1e 	b.w	801cdb4 <TFT_DrawCharRus>
 8019178:	200001a0 	.word	0x200001a0

0801917c <GUI_TextRu_mW_m2>:

void GUI_TextRu_mW_m2(uint16_t X, uint16_t Y)
{
 801917c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801917e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);

	TFT_SetFont(&Font12RU_arch_small);
 8019180:	4f22      	ldr	r7, [pc, #136]	; (801920c <GUI_TextRu_mW_m2+0x90>)
	TFT_SetTextColor(TFT_White);
 8019182:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019186:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019188:	f003 fe08 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801918c:	2063      	movs	r0, #99	; 0x63
 801918e:	f003 fe0b 	bl	801cda8 <TFT_SetBackColor>
	TFT_DrawCharRus(X-1, Y+2, 'м');
 8019192:	1cae      	adds	r6, r5, #2
	TFT_SetFont(&Font12RU_arch_small);
 8019194:	4638      	mov	r0, r7
 8019196:	f003 fdfb 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X-1, Y+2, 'м');
 801919a:	b2b6      	uxth	r6, r6
 801919c:	1e60      	subs	r0, r4, #1
 801919e:	4631      	mov	r1, r6
 80191a0:	22bc      	movs	r2, #188	; 0xbc
 80191a2:	b280      	uxth	r0, r0
 80191a4:	f003 fe06 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_big);
 80191a8:	4819      	ldr	r0, [pc, #100]	; (8019210 <GUI_TextRu_mW_m2+0x94>)
 80191aa:	f003 fdf1 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+6, Y, 'В'-17);
 80191ae:	1da0      	adds	r0, r4, #6
 80191b0:	4629      	mov	r1, r5
 80191b2:	2281      	movs	r2, #129	; 0x81
 80191b4:	b280      	uxth	r0, r0
 80191b6:	f003 fdfd 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 80191ba:	4638      	mov	r0, r7
 80191bc:	f003 fde8 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+2, 'т');
 80191c0:	f104 0010 	add.w	r0, r4, #16
 80191c4:	4631      	mov	r1, r6
 80191c6:	2282      	movs	r2, #130	; 0x82
 80191c8:	b280      	uxth	r0, r0
 80191ca:	f003 fdf3 	bl	801cdb4 <TFT_DrawCharRus>

	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 80191ce:	f105 030a 	add.w	r3, r5, #10
 80191d2:	b29b      	uxth	r3, r3
 80191d4:	f104 0214 	add.w	r2, r4, #20
 80191d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80191dc:	9100      	str	r1, [sp, #0]
 80191de:	4620      	mov	r0, r4
 80191e0:	4619      	mov	r1, r3
 80191e2:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 80191e4:	350c      	adds	r5, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 80191e6:	f003 fb4d 	bl	801c884 <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 80191ea:	b2ad      	uxth	r5, r5
 80191ec:	f104 000c 	add.w	r0, r4, #12
 80191f0:	4629      	mov	r1, r5
 80191f2:	2291      	movs	r2, #145	; 0x91
 80191f4:	b280      	uxth	r0, r0
 80191f6:	f003 fddd 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 80191fa:	1d20      	adds	r0, r4, #4
 80191fc:	22bc      	movs	r2, #188	; 0xbc
 80191fe:	4629      	mov	r1, r5
 8019200:	b280      	uxth	r0, r0
}
 8019202:	b003      	add	sp, #12
 8019204:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8019208:	f003 bdd4 	b.w	801cdb4 <TFT_DrawCharRus>
 801920c:	200001a0 	.word	0x200001a0
 8019210:	20000198 	.word	0x20000198

08019214 <GUI_TextRu_W_m2>:

void GUI_TextRu_W_m2(uint16_t X, uint16_t Y)
{
 8019214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019216:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019218:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801921c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801921e:	f003 fdbd 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019222:	2063      	movs	r0, #99	; 0x63
 8019224:	f003 fdc0 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 8019228:	4819      	ldr	r0, [pc, #100]	; (8019290 <GUI_TextRu_W_m2+0x7c>)
 801922a:	f003 fdb1 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+1, Y, 'В'-17);
 801922e:	1c68      	adds	r0, r5, #1
 8019230:	4621      	mov	r1, r4
 8019232:	2281      	movs	r2, #129	; 0x81
 8019234:	b280      	uxth	r0, r0
 8019236:	f003 fdbd 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 801923a:	4816      	ldr	r0, [pc, #88]	; (8019294 <GUI_TextRu_W_m2+0x80>)
 801923c:	f003 fda8 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+11, Y+2, 'т');
 8019240:	1ca1      	adds	r1, r4, #2
 8019242:	f105 000b 	add.w	r0, r5, #11
 8019246:	2282      	movs	r2, #130	; 0x82
 8019248:	b289      	uxth	r1, r1
 801924a:	b280      	uxth	r0, r0
 801924c:	f003 fdb2 	bl	801cdb4 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 8019250:	f104 030a 	add.w	r3, r4, #10
 8019254:	b29b      	uxth	r3, r3
 8019256:	f105 0214 	add.w	r2, r5, #20
 801925a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801925e:	9100      	str	r1, [sp, #0]
 8019260:	4628      	mov	r0, r5
 8019262:	4619      	mov	r1, r3
 8019264:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 8019266:	340c      	adds	r4, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 8019268:	f003 fb0c 	bl	801c884 <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 801926c:	b2a4      	uxth	r4, r4
 801926e:	f105 000c 	add.w	r0, r5, #12
 8019272:	4621      	mov	r1, r4
 8019274:	2291      	movs	r2, #145	; 0x91
 8019276:	b280      	uxth	r0, r0
 8019278:	f003 fd9c 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 801927c:	1d28      	adds	r0, r5, #4
 801927e:	22bc      	movs	r2, #188	; 0xbc
 8019280:	4621      	mov	r1, r4
 8019282:	b280      	uxth	r0, r0
}
 8019284:	b003      	add	sp, #12
 8019286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 801928a:	f003 bd93 	b.w	801cdb4 <TFT_DrawCharRus>
 801928e:	bf00      	nop
 8019290:	20000198 	.word	0x20000198
 8019294:	200001a0 	.word	0x200001a0

08019298 <GUI_TextRu_W_m2_sr>:

void GUI_TextRu_W_m2_sr(uint16_t X, uint16_t Y)
{
 8019298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801929c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801929e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80192a2:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80192a4:	f003 fd7a 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80192a8:	2063      	movs	r0, #99	; 0x63
 80192aa:	f003 fd7d 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 80192ae:	4829      	ldr	r0, [pc, #164]	; (8019354 <GUI_TextRu_W_m2_sr+0xbc>)
 80192b0:	f003 fd6e 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+8, Y, 'В'-17);
 80192b4:	f104 0008 	add.w	r0, r4, #8
 80192b8:	4629      	mov	r1, r5
 80192ba:	2281      	movs	r2, #129	; 0x81
 80192bc:	b280      	uxth	r0, r0
 80192be:	f003 fd79 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
	TFT_DrawCharRus(X+18, Y+2, 'т');
 80192c2:	f104 0712 	add.w	r7, r4, #18
	TFT_SetFont(&Font12RU_arch_small);
 80192c6:	4824      	ldr	r0, [pc, #144]	; (8019358 <GUI_TextRu_W_m2_sr+0xc0>)
 80192c8:	f003 fd62 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+18, Y+2, 'т');
 80192cc:	b2bf      	uxth	r7, r7
 80192ce:	1ca9      	adds	r1, r5, #2
 80192d0:	4638      	mov	r0, r7
 80192d2:	2282      	movs	r2, #130	; 0x82
 80192d4:	b289      	uxth	r1, r1
 80192d6:	f003 fd6d 	bl	801cdb4 <TFT_DrawCharRus>

	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 80192da:	f105 030a 	add.w	r3, r5, #10
 80192de:	b29b      	uxth	r3, r3
 80192e0:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80192e4:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80192e8:	4619      	mov	r1, r3
 80192ea:	4620      	mov	r0, r4
 80192ec:	f8cd 8000 	str.w	r8, [sp]
 80192f0:	b292      	uxth	r2, r2

	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 80192f2:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 80192f6:	f003 fac5 	bl	801c884 <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 80192fa:	b2b6      	uxth	r6, r6
 80192fc:	f104 000a 	add.w	r0, r4, #10
 8019300:	4631      	mov	r1, r6
 8019302:	2291      	movs	r2, #145	; 0x91
 8019304:	b280      	uxth	r0, r0
 8019306:	f003 fd55 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 801930a:	1ca0      	adds	r0, r4, #2
 801930c:	4631      	mov	r1, r6
 801930e:	22bc      	movs	r2, #188	; 0xbc
 8019310:	b280      	uxth	r0, r0
 8019312:	f003 fd4f 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 8019316:	f105 030f 	add.w	r3, r5, #15
 801931a:	f105 0110 	add.w	r1, r5, #16
 801931e:	f104 0011 	add.w	r0, r4, #17
 8019322:	b29b      	uxth	r3, r3
 8019324:	463a      	mov	r2, r7
 8019326:	f8cd 8000 	str.w	r8, [sp]
 801932a:	b289      	uxth	r1, r1
 801932c:	b280      	uxth	r0, r0
 801932e:	f003 fb1e 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 8019332:	f104 0015 	add.w	r0, r4, #21
 8019336:	4631      	mov	r1, r6
 8019338:	2281      	movs	r2, #129	; 0x81
 801933a:	b280      	uxth	r0, r0
 801933c:	f003 fd3a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8019340:	f104 001c 	add.w	r0, r4, #28
 8019344:	2280      	movs	r2, #128	; 0x80
 8019346:	4631      	mov	r1, r6
 8019348:	b280      	uxth	r0, r0
}
 801934a:	b002      	add	sp, #8
 801934c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8019350:	f003 bd30 	b.w	801cdb4 <TFT_DrawCharRus>
 8019354:	20000198 	.word	0x20000198
 8019358:	200001a0 	.word	0x200001a0

0801935c <GUI_TextRu_mW_m2_sr>:

void GUI_TextRu_mW_m2_sr(uint16_t X, uint16_t Y)
{
 801935c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801935e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font12RU_arch_small);
 8019360:	4f32      	ldr	r7, [pc, #200]	; (801942c <GUI_TextRu_mW_m2_sr+0xd0>)
	TFT_SetTextColor(TFT_White);
 8019362:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019366:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019368:	f003 fd18 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801936c:	2063      	movs	r0, #99	; 0x63
 801936e:	f003 fd1b 	bl	801cda8 <TFT_SetBackColor>
	TFT_DrawCharRus(X+5, Y+2, 'м');
 8019372:	1cae      	adds	r6, r5, #2
	TFT_SetFont(&Font12RU_arch_small);
 8019374:	4638      	mov	r0, r7
 8019376:	f003 fd0b 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+5, Y+2, 'м');
 801937a:	b2b6      	uxth	r6, r6
 801937c:	1d60      	adds	r0, r4, #5
 801937e:	4631      	mov	r1, r6
 8019380:	22bc      	movs	r2, #188	; 0xbc
 8019382:	b280      	uxth	r0, r0
 8019384:	f003 fd16 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_big);
 8019388:	4829      	ldr	r0, [pc, #164]	; (8019430 <GUI_TextRu_mW_m2_sr+0xd4>)
 801938a:	f003 fd01 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+12, Y, 'В'-17);
 801938e:	f104 000c 	add.w	r0, r4, #12
 8019392:	4629      	mov	r1, r5
 8019394:	2281      	movs	r2, #129	; 0x81
 8019396:	b280      	uxth	r0, r0
 8019398:	f003 fd0c 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 801939c:	4638      	mov	r0, r7
 801939e:	f003 fcf7 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+22, Y+2, 'т');
 80193a2:	f104 0016 	add.w	r0, r4, #22
 80193a6:	4631      	mov	r1, r6
 80193a8:	2282      	movs	r2, #130	; 0x82
 80193aa:	b280      	uxth	r0, r0
 80193ac:	f003 fd02 	bl	801cdb4 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 80193b0:	f105 030a 	add.w	r3, r5, #10
 80193b4:	b29b      	uxth	r3, r3
 80193b6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80193ba:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80193be:	4619      	mov	r1, r3
 80193c0:	4620      	mov	r0, r4
 80193c2:	9700      	str	r7, [sp, #0]
 80193c4:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 80193c6:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 80193ca:	f003 fa5b 	bl	801c884 <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 80193ce:	b2b6      	uxth	r6, r6
 80193d0:	f104 000a 	add.w	r0, r4, #10
 80193d4:	4631      	mov	r1, r6
 80193d6:	2291      	movs	r2, #145	; 0x91
 80193d8:	b280      	uxth	r0, r0
 80193da:	f003 fceb 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 80193de:	1ca0      	adds	r0, r4, #2
 80193e0:	4631      	mov	r1, r6
 80193e2:	22bc      	movs	r2, #188	; 0xbc
 80193e4:	b280      	uxth	r0, r0
 80193e6:	f003 fce5 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 80193ea:	f105 030f 	add.w	r3, r5, #15
 80193ee:	f104 0212 	add.w	r2, r4, #18
 80193f2:	f105 0110 	add.w	r1, r5, #16
 80193f6:	f104 0011 	add.w	r0, r4, #17
 80193fa:	b29b      	uxth	r3, r3
 80193fc:	9700      	str	r7, [sp, #0]
 80193fe:	b292      	uxth	r2, r2
 8019400:	b289      	uxth	r1, r1
 8019402:	b280      	uxth	r0, r0
 8019404:	f003 fab3 	bl	801c96e <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 8019408:	f104 0015 	add.w	r0, r4, #21
 801940c:	4631      	mov	r1, r6
 801940e:	2281      	movs	r2, #129	; 0x81
 8019410:	b280      	uxth	r0, r0
 8019412:	f003 fccf 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8019416:	f104 001c 	add.w	r0, r4, #28
 801941a:	2280      	movs	r2, #128	; 0x80
 801941c:	4631      	mov	r1, r6
 801941e:	b280      	uxth	r0, r0
}
 8019420:	b003      	add	sp, #12
 8019422:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8019426:	f003 bcc5 	b.w	801cdb4 <TFT_DrawCharRus>
 801942a:	bf00      	nop
 801942c:	200001a0 	.word	0x200001a0
 8019430:	20000198 	.word	0x20000198

08019434 <GUI_TextRu_Cd_m2>:

void GUI_TextRu_Cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 8019434:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019438:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801943a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801943e:	460e      	mov	r6, r1
 8019440:	4692      	mov	sl, r2
	TFT_SetTextColor(TFT_White);
 8019442:	f003 fcab 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019446:	2063      	movs	r0, #99	; 0x63
 8019448:	f003 fcae 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801944c:	482f      	ldr	r0, [pc, #188]	; (801950c <GUI_TextRu_Cd_m2+0xd8>)
 801944e:	f003 fc9f 	bl	801cd90 <TFT_SetFont>
 8019452:	f104 0008 	add.w	r0, r4, #8
 8019456:	f104 0810 	add.w	r8, r4, #16
 801945a:	f106 070a 	add.w	r7, r6, #10
 801945e:	f104 0906 	add.w	r9, r4, #6
 8019462:	f106 050c 	add.w	r5, r6, #12
	
	if(deg){
		TFT_DrawCharRus(X+8, Y, 'к');
 8019466:	22ba      	movs	r2, #186	; 0xba
 8019468:	4631      	mov	r1, r6
 801946a:	b280      	uxth	r0, r0
	if(deg){
 801946c:	f1ba 0f00 	cmp.w	sl, #0
 8019470:	d02c      	beq.n	80194cc <GUI_TextRu_Cd_m2+0x98>
		TFT_DrawCharRus(X+8, Y, 'к');
 8019472:	f003 fc9f 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'к');
 8019476:	22ba      	movs	r2, #186	; 0xba
 8019478:	4631      	mov	r1, r6
 801947a:	fa1f f088 	uxth.w	r0, r8
 801947e:	f003 fc99 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+24, Y, 'д');
 8019482:	f104 0018 	add.w	r0, r4, #24
 8019486:	22b4      	movs	r2, #180	; 0xb4
 8019488:	4631      	mov	r1, r6
 801948a:	b280      	uxth	r0, r0
 801948c:	f003 fc92 	bl	801cdb4 <TFT_DrawCharRus>
		
		TFT_DrawLine(X+6, Y+10, X+31, Y+10, TFT_White);
 8019490:	b2bb      	uxth	r3, r7
 8019492:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019496:	f104 021f 	add.w	r2, r4, #31
 801949a:	9100      	str	r1, [sp, #0]
 801949c:	b292      	uxth	r2, r2
 801949e:	4619      	mov	r1, r3
 80194a0:	fa1f f089 	uxth.w	r0, r9
 80194a4:	f003 f9ee 	bl	801c884 <TFT_DrawLine>
		
		TFT_DrawCharRus(X+20, Y+12, 'я'+2);
 80194a8:	b2ad      	uxth	r5, r5
 80194aa:	f104 0014 	add.w	r0, r4, #20
 80194ae:	b280      	uxth	r0, r0
 80194b0:	2291      	movs	r2, #145	; 0x91
 80194b2:	4629      	mov	r1, r5
 80194b4:	f003 fc7e 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+12, Y+12, 'м');}
 80194b8:	f104 000c 	add.w	r0, r4, #12
		TFT_DrawCharRus(X+16, Y, 'д');
		
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
		
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 80194bc:	22bc      	movs	r2, #188	; 0xbc
 80194be:	4629      	mov	r1, r5
 80194c0:	b280      	uxth	r0, r0
		
}
 80194c2:	b002      	add	sp, #8
 80194c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 80194c8:	f003 bc74 	b.w	801cdb4 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+8, Y, 'к');
 80194cc:	f003 fc72 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'д');
 80194d0:	22b4      	movs	r2, #180	; 0xb4
 80194d2:	4631      	mov	r1, r6
 80194d4:	fa1f f088 	uxth.w	r0, r8
 80194d8:	f003 fc6c 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
 80194dc:	b2bb      	uxth	r3, r7
 80194de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80194e2:	f104 0217 	add.w	r2, r4, #23
 80194e6:	9100      	str	r1, [sp, #0]
 80194e8:	b292      	uxth	r2, r2
 80194ea:	4619      	mov	r1, r3
 80194ec:	fa1f f089 	uxth.w	r0, r9
 80194f0:	f003 f9c8 	bl	801c884 <TFT_DrawLine>
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
 80194f4:	b2ad      	uxth	r5, r5
 80194f6:	f104 0011 	add.w	r0, r4, #17
 80194fa:	b280      	uxth	r0, r0
 80194fc:	2291      	movs	r2, #145	; 0x91
 80194fe:	4629      	mov	r1, r5
 8019500:	f003 fc58 	bl	801cdb4 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8019504:	f104 0009 	add.w	r0, r4, #9
 8019508:	e7d8      	b.n	80194bc <GUI_TextRu_Cd_m2+0x88>
 801950a:	bf00      	nop
 801950c:	200001a0 	.word	0x200001a0

08019510 <GUI_TextRu_Irradiance>:

void GUI_TextRu_Irradiance(uint16_t X, uint16_t Y)
{
 8019510:	b538      	push	{r3, r4, r5, lr}
 8019512:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019514:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019518:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801951a:	f003 fc3f 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801951e:	2063      	movs	r0, #99	; 0x63
 8019520:	f003 fc42 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8019524:	482d      	ldr	r0, [pc, #180]	; (80195dc <GUI_TextRu_Irradiance+0xcc>)
 8019526:	f003 fc33 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 801952a:	4621      	mov	r1, r4
 801952c:	229e      	movs	r2, #158	; 0x9e
 801952e:	4628      	mov	r0, r5
 8019530:	f003 fc40 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8019534:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019536:	482a      	ldr	r0, [pc, #168]	; (80195e0 <GUI_TextRu_Irradiance+0xd0>)
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8019538:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801953a:	f003 fc29 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801953e:	f105 0010 	add.w	r0, r5, #16
 8019542:	4621      	mov	r1, r4
 8019544:	22b1      	movs	r2, #177	; 0xb1
 8019546:	b280      	uxth	r0, r0
 8019548:	f003 fc34 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'л');
 801954c:	f105 001b 	add.w	r0, r5, #27
 8019550:	4621      	mov	r1, r4
 8019552:	22bb      	movs	r2, #187	; 0xbb
 8019554:	b280      	uxth	r0, r0
 8019556:	f003 fc2d 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+5, 'у');
 801955a:	f105 0027 	add.w	r0, r5, #39	; 0x27
 801955e:	4621      	mov	r1, r4
 8019560:	2283      	movs	r2, #131	; 0x83
 8019562:	b280      	uxth	r0, r0
 8019564:	f003 fc26 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+51, Y+5, 'ч');
 8019568:	f105 0033 	add.w	r0, r5, #51	; 0x33
 801956c:	4621      	mov	r1, r4
 801956e:	2287      	movs	r2, #135	; 0x87
 8019570:	b280      	uxth	r0, r0
 8019572:	f003 fc1f 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'е');
 8019576:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 801957a:	4621      	mov	r1, r4
 801957c:	22b5      	movs	r2, #181	; 0xb5
 801957e:	b280      	uxth	r0, r0
 8019580:	f003 fc18 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'н');
 8019584:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8019588:	4621      	mov	r1, r4
 801958a:	22bd      	movs	r2, #189	; 0xbd
 801958c:	b280      	uxth	r0, r0
 801958e:	f003 fc11 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+86, Y+5, 'н');
 8019592:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8019596:	4621      	mov	r1, r4
 8019598:	22bd      	movs	r2, #189	; 0xbd
 801959a:	b280      	uxth	r0, r0
 801959c:	f003 fc0a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+98, Y+5, 'о');
 80195a0:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80195a4:	4621      	mov	r1, r4
 80195a6:	22be      	movs	r2, #190	; 0xbe
 80195a8:	b280      	uxth	r0, r0
 80195aa:	f003 fc03 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+110, Y+5, 'с');
 80195ae:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 80195b2:	4621      	mov	r1, r4
 80195b4:	2281      	movs	r2, #129	; 0x81
 80195b6:	b280      	uxth	r0, r0
 80195b8:	f003 fbfc 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+119, Y+5, 'т');
 80195bc:	f105 0077 	add.w	r0, r5, #119	; 0x77
 80195c0:	4621      	mov	r1, r4
 80195c2:	2282      	movs	r2, #130	; 0x82
 80195c4:	b280      	uxth	r0, r0
 80195c6:	f003 fbf5 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 80195ca:	f105 0083 	add.w	r0, r5, #131	; 0x83
 80195ce:	4621      	mov	r1, r4
 80195d0:	228c      	movs	r2, #140	; 0x8c
 80195d2:	b280      	uxth	r0, r0
}
 80195d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 80195d8:	f003 bbec 	b.w	801cdb4 <TFT_DrawCharRus>
 80195dc:	200001d0 	.word	0x200001d0
 80195e0:	200001d8 	.word	0x200001d8

080195e4 <GUI_TextRu_Luminance>:

void GUI_TextRu_Luminance(uint16_t X, uint16_t Y)
{
 80195e4:	b538      	push	{r3, r4, r5, lr}
 80195e6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80195e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80195ec:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80195ee:	f003 fbd5 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80195f2:	2063      	movs	r0, #99	; 0x63
 80195f4:	f003 fbd8 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80195f8:	481c      	ldr	r0, [pc, #112]	; (801966c <GUI_TextRu_Luminance+0x88>)
 80195fa:	f003 fbc9 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 80195fe:	4621      	mov	r1, r4
 8019600:	22af      	movs	r2, #175	; 0xaf
 8019602:	4628      	mov	r0, r5
 8019604:	f003 fbd6 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8019608:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801960a:	4819      	ldr	r0, [pc, #100]	; (8019670 <GUI_TextRu_Luminance+0x8c>)
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801960c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801960e:	f003 fbbf 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8019612:	f105 0010 	add.w	r0, r5, #16
 8019616:	4621      	mov	r1, r4
 8019618:	2280      	movs	r2, #128	; 0x80
 801961a:	b280      	uxth	r0, r0
 801961c:	f003 fbca 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'к');
 8019620:	f105 001c 	add.w	r0, r5, #28
 8019624:	4621      	mov	r1, r4
 8019626:	22ba      	movs	r2, #186	; 0xba
 8019628:	b280      	uxth	r0, r0
 801962a:	f003 fbc3 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'о');
 801962e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8019632:	4621      	mov	r1, r4
 8019634:	22be      	movs	r2, #190	; 0xbe
 8019636:	b280      	uxth	r0, r0
 8019638:	f003 fbbc 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'с');
 801963c:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8019640:	4621      	mov	r1, r4
 8019642:	2281      	movs	r2, #129	; 0x81
 8019644:	b280      	uxth	r0, r0
 8019646:	f003 fbb5 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'т');
 801964a:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 801964e:	4621      	mov	r1, r4
 8019650:	2282      	movs	r2, #130	; 0x82
 8019652:	b280      	uxth	r0, r0
 8019654:	f003 fbae 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 8019658:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 801965c:	4621      	mov	r1, r4
 801965e:	228c      	movs	r2, #140	; 0x8c
 8019660:	b280      	uxth	r0, r0
}
 8019662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 8019666:	f003 bba5 	b.w	801cdb4 <TFT_DrawCharRus>
 801966a:	bf00      	nop
 801966c:	200001d0 	.word	0x200001d0
 8019670:	200001d8 	.word	0x200001d8

08019674 <GUI_TextRu_Radiance>:

void GUI_TextRu_Radiance(uint16_t X, uint16_t Y)
{
 8019674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019676:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019678:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801967c:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 801967e:	f003 fb8d 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019682:	2063      	movs	r0, #99	; 0x63
 8019684:	f003 fb90 	bl	801cda8 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
	TFT_DrawCharRus(X, Y, 'Э');
	TFT_SetFont(&Font16RU_arch_small);
 8019688:	4f31      	ldr	r7, [pc, #196]	; (8019750 <GUI_TextRu_Radiance+0xdc>)
	TFT_SetFont(&Font16RU_arch_big);
 801968a:	4832      	ldr	r0, [pc, #200]	; (8019754 <GUI_TextRu_Radiance+0xe0>)
 801968c:	f003 fb80 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Э');
 8019690:	4631      	mov	r1, r6
 8019692:	22ad      	movs	r2, #173	; 0xad
 8019694:	4620      	mov	r0, r4
 8019696:	f003 fb8d 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801969a:	1d75      	adds	r5, r6, #5
	TFT_SetFont(&Font16RU_arch_small);
 801969c:	4638      	mov	r0, r7
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801969e:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16RU_arch_small);
 80196a0:	f003 fb76 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 80196a4:	f104 0010 	add.w	r0, r4, #16
 80196a8:	4629      	mov	r1, r5
 80196aa:	22bd      	movs	r2, #189	; 0xbd
 80196ac:	b280      	uxth	r0, r0
 80196ae:	f003 fb81 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y+5, 'е');
 80196b2:	f104 001d 	add.w	r0, r4, #29
 80196b6:	4629      	mov	r1, r5
 80196b8:	22b5      	movs	r2, #181	; 0xb5
 80196ba:	b280      	uxth	r0, r0
 80196bc:	f003 fb7a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 80196c0:	4825      	ldr	r0, [pc, #148]	; (8019758 <GUI_TextRu_Radiance+0xe4>)
 80196c2:	f003 fb65 	bl	801cd90 <TFT_SetFont>
	TFT_DrawChar(X+46, 		Y, '.');
 80196c6:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 80196ca:	4631      	mov	r1, r6
 80196cc:	222e      	movs	r2, #46	; 0x2e
 80196ce:	b280      	uxth	r0, r0
 80196d0:	f003 fc28 	bl	801cf24 <TFT_DrawChar>

	TFT_SetFont(&Font16RU_arch_small);
 80196d4:	4638      	mov	r0, r7
 80196d6:	f003 fb5b 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X+41, Y+5, 'р');
 80196da:	f104 0029 	add.w	r0, r4, #41	; 0x29
 80196de:	4629      	mov	r1, r5
 80196e0:	2280      	movs	r2, #128	; 0x80
 80196e2:	b280      	uxth	r0, r0
 80196e4:	f003 fb66 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+61, Y+5, 'я');
 80196e8:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 80196ec:	4629      	mov	r1, r5
 80196ee:	228f      	movs	r2, #143	; 0x8f
 80196f0:	b280      	uxth	r0, r0
 80196f2:	f003 fb5f 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'р');
 80196f6:	f104 0049 	add.w	r0, r4, #73	; 0x49
 80196fa:	4629      	mov	r1, r5
 80196fc:	2280      	movs	r2, #128	; 0x80
 80196fe:	b280      	uxth	r0, r0
 8019700:	f003 fb58 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'к');
 8019704:	f104 0055 	add.w	r0, r4, #85	; 0x55
 8019708:	4629      	mov	r1, r5
 801970a:	22ba      	movs	r2, #186	; 0xba
 801970c:	b280      	uxth	r0, r0
 801970e:	f003 fb51 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 8019712:	f104 0061 	add.w	r0, r4, #97	; 0x61
 8019716:	4629      	mov	r1, r5
 8019718:	22be      	movs	r2, #190	; 0xbe
 801971a:	b280      	uxth	r0, r0
 801971c:	f003 fb4a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 8019720:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8019724:	4629      	mov	r1, r5
 8019726:	2281      	movs	r2, #129	; 0x81
 8019728:	b280      	uxth	r0, r0
 801972a:	f003 fb43 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+120, Y+5, 'т');
 801972e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8019732:	4629      	mov	r1, r5
 8019734:	2282      	movs	r2, #130	; 0x82
 8019736:	b280      	uxth	r0, r0
 8019738:	f003 fb3c 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801973c:	f104 0083 	add.w	r0, r4, #131	; 0x83
 8019740:	4629      	mov	r1, r5
 8019742:	228c      	movs	r2, #140	; 0x8c
 8019744:	b280      	uxth	r0, r0

}
 8019746:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801974a:	f003 bb33 	b.w	801cdb4 <TFT_DrawCharRus>
 801974e:	bf00      	nop
 8019750:	200001d8 	.word	0x200001d8
 8019754:	200001d0 	.word	0x200001d0
 8019758:	200001b0 	.word	0x200001b0

0801975c <GUI_TextMsgRu_LowIrradiance>:

void GUI_TextMsgRu_LowIrradiance(uint16_t X, uint16_t Y)
{
 801975c:	b538      	push	{r3, r4, r5, lr}
 801975e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019760:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019764:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019766:	f003 fb19 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801976a:	2063      	movs	r0, #99	; 0x63
 801976c:	f003 fb1c 	bl	801cda8 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019770:	483f      	ldr	r0, [pc, #252]	; (8019870 <GUI_TextMsgRu_LowIrradiance+0x114>)
 8019772:	f003 fb0d 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 8019776:	4621      	mov	r1, r4
 8019778:	229c      	movs	r2, #156	; 0x9c
 801977a:	4628      	mov	r0, r5
 801977c:	f003 fb1a 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019780:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019782:	483c      	ldr	r0, [pc, #240]	; (8019874 <GUI_TextMsgRu_LowIrradiance+0x118>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019784:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019786:	f003 fb03 	bl	801cd90 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801978a:	f105 0010 	add.w	r0, r5, #16
 801978e:	4621      	mov	r1, r4
 8019790:	22b0      	movs	r2, #176	; 0xb0
 8019792:	b280      	uxth	r0, r0
 8019794:	f003 fb0e 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019798:	f105 001c 	add.w	r0, r5, #28
 801979c:	4621      	mov	r1, r4
 801979e:	22bb      	movs	r2, #187	; 0xbb
 80197a0:	b280      	uxth	r0, r0
 80197a2:	f003 fb07 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 80197a6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80197aa:	4621      	mov	r1, r4
 80197ac:	22b0      	movs	r2, #176	; 0xb0
 80197ae:	b280      	uxth	r0, r0
 80197b0:	f003 fb00 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 80197b4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80197b8:	4621      	mov	r1, r4
 80197ba:	228f      	movs	r2, #143	; 0x8f
 80197bc:	b280      	uxth	r0, r0
 80197be:	f003 faf9 	bl	801cdb4 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'о');
 80197c2:	f105 0049 	add.w	r0, r5, #73	; 0x49
 80197c6:	4621      	mov	r1, r4
 80197c8:	22be      	movs	r2, #190	; 0xbe
 80197ca:	b280      	uxth	r0, r0
 80197cc:	f003 faf2 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+87, Y+5, 'б');
 80197d0:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80197d4:	4621      	mov	r1, r4
 80197d6:	22b1      	movs	r2, #177	; 0xb1
 80197d8:	b280      	uxth	r0, r0
 80197da:	f003 faeb 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+98, Y+5, 'л');
 80197de:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80197e2:	4621      	mov	r1, r4
 80197e4:	22bb      	movs	r2, #187	; 0xbb
 80197e6:	b280      	uxth	r0, r0
 80197e8:	f003 fae4 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+110, Y+5, 'у');
 80197ec:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 80197f0:	4621      	mov	r1, r4
 80197f2:	2283      	movs	r2, #131	; 0x83
 80197f4:	b280      	uxth	r0, r0
 80197f6:	f003 fadd 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+122, Y+5, 'ч');
 80197fa:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 80197fe:	4621      	mov	r1, r4
 8019800:	2287      	movs	r2, #135	; 0x87
 8019802:	b280      	uxth	r0, r0
 8019804:	f003 fad6 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+134, Y+5, 'е');
 8019808:	f105 0086 	add.w	r0, r5, #134	; 0x86
 801980c:	4621      	mov	r1, r4
 801980e:	22b5      	movs	r2, #181	; 0xb5
 8019810:	b280      	uxth	r0, r0
 8019812:	f003 facf 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+145, Y+5, 'н');
 8019816:	f105 0091 	add.w	r0, r5, #145	; 0x91
 801981a:	4621      	mov	r1, r4
 801981c:	22bd      	movs	r2, #189	; 0xbd
 801981e:	b280      	uxth	r0, r0
 8019820:	f003 fac8 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+157, Y+5, 'н');
 8019824:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 8019828:	4621      	mov	r1, r4
 801982a:	22bd      	movs	r2, #189	; 0xbd
 801982c:	b280      	uxth	r0, r0
 801982e:	f003 fac1 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+169, Y+5, 'о');
 8019832:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
 8019836:	4621      	mov	r1, r4
 8019838:	22be      	movs	r2, #190	; 0xbe
 801983a:	b280      	uxth	r0, r0
 801983c:	f003 faba 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+181, Y+5, 'с');
 8019840:	f105 00b5 	add.w	r0, r5, #181	; 0xb5
 8019844:	4621      	mov	r1, r4
 8019846:	2281      	movs	r2, #129	; 0x81
 8019848:	b280      	uxth	r0, r0
 801984a:	f003 fab3 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+190, Y+5, 'т');
 801984e:	f105 00be 	add.w	r0, r5, #190	; 0xbe
 8019852:	4621      	mov	r1, r4
 8019854:	2282      	movs	r2, #130	; 0x82
 8019856:	b280      	uxth	r0, r0
 8019858:	f003 faac 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 801985c:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8019860:	4621      	mov	r1, r4
 8019862:	228c      	movs	r2, #140	; 0x8c
 8019864:	b280      	uxth	r0, r0
}
 8019866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 801986a:	f003 baa3 	b.w	801cdb4 <TFT_DrawCharRus>
 801986e:	bf00      	nop
 8019870:	200001d0 	.word	0x200001d0
 8019874:	200001d8 	.word	0x200001d8

08019878 <GUI_TextMsgRu_LowRadiance>:

void GUI_TextMsgRu_LowRadiance(uint16_t X, uint16_t Y)
{
 8019878:	b538      	push	{r3, r4, r5, lr}
 801987a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801987c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019880:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019882:	f003 fa8b 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019886:	2063      	movs	r0, #99	; 0x63
 8019888:	f003 fa8e 	bl	801cda8 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801988c:	482d      	ldr	r0, [pc, #180]	; (8019944 <GUI_TextMsgRu_LowRadiance+0xcc>)
 801988e:	f003 fa7f 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 8019892:	4621      	mov	r1, r4
 8019894:	229c      	movs	r2, #156	; 0x9c
 8019896:	4628      	mov	r0, r5
 8019898:	f003 fa8c 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801989c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801989e:	482a      	ldr	r0, [pc, #168]	; (8019948 <GUI_TextMsgRu_LowRadiance+0xd0>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 80198a0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 80198a2:	f003 fa75 	bl	801cd90 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 80198a6:	f105 0010 	add.w	r0, r5, #16
 80198aa:	4621      	mov	r1, r4
 80198ac:	22b0      	movs	r2, #176	; 0xb0
 80198ae:	b280      	uxth	r0, r0
 80198b0:	f003 fa80 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 80198b4:	f105 001c 	add.w	r0, r5, #28
 80198b8:	4621      	mov	r1, r4
 80198ba:	22bb      	movs	r2, #187	; 0xbb
 80198bc:	b280      	uxth	r0, r0
 80198be:	f003 fa79 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 80198c2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80198c6:	4621      	mov	r1, r4
 80198c8:	22b0      	movs	r2, #176	; 0xb0
 80198ca:	b280      	uxth	r0, r0
 80198cc:	f003 fa72 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 80198d0:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80198d4:	4621      	mov	r1, r4
 80198d6:	228f      	movs	r2, #143	; 0x8f
 80198d8:	b280      	uxth	r0, r0
 80198da:	f003 fa6b 	bl	801cdb4 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'я');
 80198de:	f105 0049 	add.w	r0, r5, #73	; 0x49
 80198e2:	4621      	mov	r1, r4
 80198e4:	228f      	movs	r2, #143	; 0x8f
 80198e6:	b280      	uxth	r0, r0
 80198e8:	f003 fa64 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+85, Y+5, 'р');
 80198ec:	f105 0055 	add.w	r0, r5, #85	; 0x55
 80198f0:	4621      	mov	r1, r4
 80198f2:	2280      	movs	r2, #128	; 0x80
 80198f4:	b280      	uxth	r0, r0
 80198f6:	f003 fa5d 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+97, Y+5, 'к');
 80198fa:	f105 0061 	add.w	r0, r5, #97	; 0x61
 80198fe:	4621      	mov	r1, r4
 8019900:	22ba      	movs	r2, #186	; 0xba
 8019902:	b280      	uxth	r0, r0
 8019904:	f003 fa56 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+109, Y+5, 'о');
 8019908:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801990c:	4621      	mov	r1, r4
 801990e:	22be      	movs	r2, #190	; 0xbe
 8019910:	b280      	uxth	r0, r0
 8019912:	f003 fa4f 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+121, Y+5, 'с');
 8019916:	f105 0079 	add.w	r0, r5, #121	; 0x79
 801991a:	4621      	mov	r1, r4
 801991c:	2281      	movs	r2, #129	; 0x81
 801991e:	b280      	uxth	r0, r0
 8019920:	f003 fa48 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+132, Y+5, 'т');
 8019924:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8019928:	4621      	mov	r1, r4
 801992a:	2282      	movs	r2, #130	; 0x82
 801992c:	b280      	uxth	r0, r0
 801992e:	f003 fa41 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 8019932:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 8019936:	4621      	mov	r1, r4
 8019938:	228c      	movs	r2, #140	; 0x8c
 801993a:	b280      	uxth	r0, r0
}
 801993c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 8019940:	f003 ba38 	b.w	801cdb4 <TFT_DrawCharRus>
 8019944:	200001d0 	.word	0x200001d0
 8019948:	200001d8 	.word	0x200001d8

0801994c <GUI_TextMsgRu_HighIrradiance>:

void GUI_TextMsgRu_HighIrradiance(uint16_t X, uint16_t Y)
{
 801994c:	b538      	push	{r3, r4, r5, lr}
 801994e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019950:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019954:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019956:	f003 fa21 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801995a:	2063      	movs	r0, #99	; 0x63
 801995c:	f003 fa24 	bl	801cda8 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019960:	4846      	ldr	r0, [pc, #280]	; (8019a7c <GUI_TextMsgRu_HighIrradiance+0x130>)
 8019962:	f003 fa15 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 8019966:	4621      	mov	r1, r4
 8019968:	2291      	movs	r2, #145	; 0x91
 801996a:	4628      	mov	r0, r5
 801996c:	f003 fa22 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019970:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019972:	4843      	ldr	r0, [pc, #268]	; (8019a80 <GUI_TextMsgRu_HighIrradiance+0x134>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019974:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019976:	f003 fa0b 	bl	801cd90 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801997a:	f105 0010 	add.w	r0, r5, #16
 801997e:	4621      	mov	r1, r4
 8019980:	22be      	movs	r2, #190	; 0xbe
 8019982:	b280      	uxth	r0, r0
 8019984:	f003 fa16 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019988:	f105 001c 	add.w	r0, r5, #28
 801998c:	4621      	mov	r1, r4
 801998e:	22bb      	movs	r2, #187	; 0xbb
 8019990:	b280      	uxth	r0, r0
 8019992:	f003 fa0f 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 8019996:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801999a:	4621      	mov	r1, r4
 801999c:	228c      	movs	r2, #140	; 0x8c
 801999e:	b280      	uxth	r0, r0
 80199a0:	f003 fa08 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 80199a4:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80199a8:	4621      	mov	r1, r4
 80199aa:	2288      	movs	r2, #136	; 0x88
 80199ac:	b280      	uxth	r0, r0
 80199ae:	f003 fa01 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 80199b2:	f105 0043 	add.w	r0, r5, #67	; 0x43
 80199b6:	4621      	mov	r1, r4
 80199b8:	22b0      	movs	r2, #176	; 0xb0
 80199ba:	b280      	uxth	r0, r0
 80199bc:	f003 f9fa 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 80199c0:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 80199c4:	4621      	mov	r1, r4
 80199c6:	228f      	movs	r2, #143	; 0x8f
 80199c8:	b280      	uxth	r0, r0
 80199ca:	f003 f9f3 	bl	801cdb4 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'о');
 80199ce:	f105 0066 	add.w	r0, r5, #102	; 0x66
 80199d2:	4621      	mov	r1, r4
 80199d4:	22be      	movs	r2, #190	; 0xbe
 80199d6:	b280      	uxth	r0, r0
 80199d8:	f003 f9ec 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+116, Y+5, 'б');
 80199dc:	f105 0074 	add.w	r0, r5, #116	; 0x74
 80199e0:	4621      	mov	r1, r4
 80199e2:	22b1      	movs	r2, #177	; 0xb1
 80199e4:	b280      	uxth	r0, r0
 80199e6:	f003 f9e5 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+127, Y+5, 'л');
 80199ea:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 80199ee:	4621      	mov	r1, r4
 80199f0:	22bb      	movs	r2, #187	; 0xbb
 80199f2:	b280      	uxth	r0, r0
 80199f4:	f003 f9de 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+139, Y+5, 'у');
 80199f8:	f105 008b 	add.w	r0, r5, #139	; 0x8b
 80199fc:	4621      	mov	r1, r4
 80199fe:	2283      	movs	r2, #131	; 0x83
 8019a00:	b280      	uxth	r0, r0
 8019a02:	f003 f9d7 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+151, Y+5, 'ч');
 8019a06:	f105 0097 	add.w	r0, r5, #151	; 0x97
 8019a0a:	4621      	mov	r1, r4
 8019a0c:	2287      	movs	r2, #135	; 0x87
 8019a0e:	b280      	uxth	r0, r0
 8019a10:	f003 f9d0 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+163, Y+5, 'е');
 8019a14:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
 8019a18:	4621      	mov	r1, r4
 8019a1a:	22b5      	movs	r2, #181	; 0xb5
 8019a1c:	b280      	uxth	r0, r0
 8019a1e:	f003 f9c9 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+174, Y+5, 'н');
 8019a22:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 8019a26:	4621      	mov	r1, r4
 8019a28:	22bd      	movs	r2, #189	; 0xbd
 8019a2a:	b280      	uxth	r0, r0
 8019a2c:	f003 f9c2 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+186, Y+5, 'н');
 8019a30:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 8019a34:	4621      	mov	r1, r4
 8019a36:	22bd      	movs	r2, #189	; 0xbd
 8019a38:	b280      	uxth	r0, r0
 8019a3a:	f003 f9bb 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+198, Y+5, 'о');
 8019a3e:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 8019a42:	4621      	mov	r1, r4
 8019a44:	22be      	movs	r2, #190	; 0xbe
 8019a46:	b280      	uxth	r0, r0
 8019a48:	f003 f9b4 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+210, Y+5, 'с');
 8019a4c:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 8019a50:	4621      	mov	r1, r4
 8019a52:	2281      	movs	r2, #129	; 0x81
 8019a54:	b280      	uxth	r0, r0
 8019a56:	f003 f9ad 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+219, Y+5, 'т');
 8019a5a:	f105 00db 	add.w	r0, r5, #219	; 0xdb
 8019a5e:	4621      	mov	r1, r4
 8019a60:	2282      	movs	r2, #130	; 0x82
 8019a62:	b280      	uxth	r0, r0
 8019a64:	f003 f9a6 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 8019a68:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
 8019a6c:	4621      	mov	r1, r4
 8019a6e:	228c      	movs	r2, #140	; 0x8c
 8019a70:	b280      	uxth	r0, r0
}
 8019a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 8019a76:	f003 b99d 	b.w	801cdb4 <TFT_DrawCharRus>
 8019a7a:	bf00      	nop
 8019a7c:	200001d0 	.word	0x200001d0
 8019a80:	200001d8 	.word	0x200001d8

08019a84 <GUI_TextMsgRu_HighRadiance>:

void GUI_TextMsgRu_HighRadiance(uint16_t X, uint16_t Y)
{
 8019a84:	b538      	push	{r3, r4, r5, lr}
 8019a86:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019a88:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019a8c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019a8e:	f003 f985 	bl	801cd9c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019a92:	2063      	movs	r0, #99	; 0x63
 8019a94:	f003 f988 	bl	801cda8 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019a98:	4834      	ldr	r0, [pc, #208]	; (8019b6c <GUI_TextMsgRu_HighRadiance+0xe8>)
 8019a9a:	f003 f979 	bl	801cd90 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 8019a9e:	4621      	mov	r1, r4
 8019aa0:	2291      	movs	r2, #145	; 0x91
 8019aa2:	4628      	mov	r0, r5
 8019aa4:	f003 f986 	bl	801cdb4 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019aa8:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019aaa:	4831      	ldr	r0, [pc, #196]	; (8019b70 <GUI_TextMsgRu_HighRadiance+0xec>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019aac:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019aae:	f003 f96f 	bl	801cd90 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019ab2:	f105 0010 	add.w	r0, r5, #16
 8019ab6:	4621      	mov	r1, r4
 8019ab8:	22be      	movs	r2, #190	; 0xbe
 8019aba:	b280      	uxth	r0, r0
 8019abc:	f003 f97a 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019ac0:	f105 001c 	add.w	r0, r5, #28
 8019ac4:	4621      	mov	r1, r4
 8019ac6:	22bb      	movs	r2, #187	; 0xbb
 8019ac8:	b280      	uxth	r0, r0
 8019aca:	f003 f973 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 8019ace:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8019ad2:	4621      	mov	r1, r4
 8019ad4:	228c      	movs	r2, #140	; 0x8c
 8019ad6:	b280      	uxth	r0, r0
 8019ad8:	f003 f96c 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 8019adc:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019ae0:	4621      	mov	r1, r4
 8019ae2:	2288      	movs	r2, #136	; 0x88
 8019ae4:	b280      	uxth	r0, r0
 8019ae6:	f003 f965 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 8019aea:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8019aee:	4621      	mov	r1, r4
 8019af0:	22b0      	movs	r2, #176	; 0xb0
 8019af2:	b280      	uxth	r0, r0
 8019af4:	f003 f95e 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 8019af8:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8019afc:	4621      	mov	r1, r4
 8019afe:	228f      	movs	r2, #143	; 0x8f
 8019b00:	b280      	uxth	r0, r0
 8019b02:	f003 f957 	bl	801cdb4 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'я');
 8019b06:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8019b0a:	4621      	mov	r1, r4
 8019b0c:	228f      	movs	r2, #143	; 0x8f
 8019b0e:	b280      	uxth	r0, r0
 8019b10:	f003 f950 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+114, Y+5, 'р');
 8019b14:	f105 0072 	add.w	r0, r5, #114	; 0x72
 8019b18:	4621      	mov	r1, r4
 8019b1a:	2280      	movs	r2, #128	; 0x80
 8019b1c:	b280      	uxth	r0, r0
 8019b1e:	f003 f949 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+126, Y+5, 'к');
 8019b22:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8019b26:	4621      	mov	r1, r4
 8019b28:	22ba      	movs	r2, #186	; 0xba
 8019b2a:	b280      	uxth	r0, r0
 8019b2c:	f003 f942 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+138, Y+5, 'о');
 8019b30:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8019b34:	4621      	mov	r1, r4
 8019b36:	22be      	movs	r2, #190	; 0xbe
 8019b38:	b280      	uxth	r0, r0
 8019b3a:	f003 f93b 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+150, Y+5, 'с');
 8019b3e:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8019b42:	4621      	mov	r1, r4
 8019b44:	2281      	movs	r2, #129	; 0x81
 8019b46:	b280      	uxth	r0, r0
 8019b48:	f003 f934 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+161, Y+5, 'т');
 8019b4c:	f105 00a1 	add.w	r0, r5, #161	; 0xa1
 8019b50:	4621      	mov	r1, r4
 8019b52:	2282      	movs	r2, #130	; 0x82
 8019b54:	b280      	uxth	r0, r0
 8019b56:	f003 f92d 	bl	801cdb4 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 8019b5a:	f105 00ac 	add.w	r0, r5, #172	; 0xac
 8019b5e:	4621      	mov	r1, r4
 8019b60:	228c      	movs	r2, #140	; 0x8c
 8019b62:	b280      	uxth	r0, r0
}
 8019b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 8019b68:	f003 b924 	b.w	801cdb4 <TFT_DrawCharRus>
 8019b6c:	200001d0 	.word	0x200001d0
 8019b70:	200001d8 	.word	0x200001d8

08019b74 <Set.part.0>:
void Set(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_SET);
 8019b74:	2201      	movs	r2, #1
 8019b76:	2102      	movs	r1, #2
 8019b78:	4801      	ldr	r0, [pc, #4]	; (8019b80 <Set.part.0+0xc>)
 8019b7a:	f7e8 bd33 	b.w	80025e4 <HAL_GPIO_WritePin>
 8019b7e:	bf00      	nop
 8019b80:	48000400 	.word	0x48000400

08019b84 <Reset.part.1>:
void Reset(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_RESET);
 8019b84:	2200      	movs	r2, #0
 8019b86:	2102      	movs	r1, #2
 8019b88:	4801      	ldr	r0, [pc, #4]	; (8019b90 <Reset.part.1+0xc>)
 8019b8a:	f7e8 bd2b 	b.w	80025e4 <HAL_GPIO_WritePin>
 8019b8e:	bf00      	nop
 8019b90:	48000400 	.word	0x48000400

08019b94 <GPIO_QSPI_Init>:
{
 8019b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019b98:	4b39      	ldr	r3, [pc, #228]	; (8019c80 <GPIO_QSPI_Init+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8019b9a:	4c3a      	ldr	r4, [pc, #232]	; (8019c84 <GPIO_QSPI_Init+0xf0>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019b9e:	4f3a      	ldr	r7, [pc, #232]	; (8019c88 <GPIO_QSPI_Init+0xf4>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019ba0:	f042 0220 	orr.w	r2, r2, #32
 8019ba4:	64da      	str	r2, [r3, #76]	; 0x4c
 8019ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019ba8:	f002 0220 	and.w	r2, r2, #32
 8019bac:	9201      	str	r2, [sp, #4]
 8019bae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019bb2:	f042 0201 	orr.w	r2, r2, #1
 8019bb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8019bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019bba:	f002 0201 	and.w	r2, r2, #1
 8019bbe:	9202      	str	r2, [sp, #8]
 8019bc0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019bc4:	f042 0202 	orr.w	r2, r2, #2
 8019bc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8019bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019bcc:	f003 0302 	and.w	r3, r3, #2
 8019bd0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019bd2:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019bd4:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019bd6:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019bda:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019bdc:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019bde:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019be0:	4621      	mov	r1, r4
 8019be2:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019be4:	e884 0048 	stmia.w	r4, {r3, r6}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8019be8:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019bec:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019bf0:	f7e8 fb82 	bl	80022f8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019bf4:	4621      	mov	r1, r4
 8019bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8019bfa:	f8c4 9000 	str.w	r9, [r4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019bfe:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8019c00:	60a6      	str	r6, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019c02:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019c06:	f7e8 fb77 	bl	80022f8 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8019c0a:	4649      	mov	r1, r9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019c0c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8019c8c <GPIO_QSPI_Init+0xf8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8019c10:	4632      	mov	r2, r6
 8019c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019c16:	f7e8 fce5 	bl	80025e4 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019c1a:	4621      	mov	r1, r4
 8019c1c:	4648      	mov	r0, r9
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8019c1e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019c22:	f8c4 8000 	str.w	r8, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019c26:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019c28:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019c2a:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019c2e:	f7e8 fb63 	bl	80022f8 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019c32:	4621      	mov	r1, r4
 8019c34:	4638      	mov	r0, r7
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8019c36:	f8c4 a000 	str.w	sl, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019c3a:	6066      	str	r6, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019c3c:	60a5      	str	r5, [r4, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019c3e:	f8c4 800c 	str.w	r8, [r4, #12]
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019c42:	f7e8 fb59 	bl	80022f8 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8019c46:	462a      	mov	r2, r5
 8019c48:	4631      	mov	r1, r6
 8019c4a:	4648      	mov	r0, r9
 8019c4c:	f7e8 fcca 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8019c50:	462a      	mov	r2, r5
 8019c52:	4648      	mov	r0, r9
 8019c54:	2102      	movs	r1, #2
 8019c56:	f7e8 fcc5 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8019c5a:	462a      	mov	r2, r5
 8019c5c:	4638      	mov	r0, r7
 8019c5e:	2140      	movs	r1, #64	; 0x40
 8019c60:	f7e8 fcc0 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8019c64:	462a      	mov	r2, r5
 8019c66:	4638      	mov	r0, r7
 8019c68:	2180      	movs	r1, #128	; 0x80
 8019c6a:	f7e8 fcbb 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8019c6e:	462a      	mov	r2, r5
 8019c70:	4651      	mov	r1, sl
 8019c72:	4638      	mov	r0, r7
 8019c74:	f7e8 fcb6 	bl	80025e4 <HAL_GPIO_WritePin>
}
 8019c78:	b004      	add	sp, #16
 8019c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c7e:	bf00      	nop
 8019c80:	40021000 	.word	0x40021000
 8019c84:	20005744 	.word	0x20005744
 8019c88:	48001400 	.word	0x48001400
 8019c8c:	48000400 	.word	0x48000400

08019c90 <Set>:
	switch(pin)
 8019c90:	3801      	subs	r0, #1
 8019c92:	2805      	cmp	r0, #5
 8019c94:	d81b      	bhi.n	8019cce <Set+0x3e>
 8019c96:	e8df f000 	tbb	[pc, r0]
 8019c9a:	0503      	.short	0x0503
 8019c9c:	16110e0a 	.word	0x16110e0a
 8019ca0:	f7ff bf68 	b.w	8019b74 <Set.part.0>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 8019ca4:	2201      	movs	r2, #1
 8019ca6:	480a      	ldr	r0, [pc, #40]	; (8019cd0 <Set+0x40>)
 8019ca8:	4611      	mov	r1, r2
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019caa:	f7e8 bc9b 	b.w	80025e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_SET);
 8019cae:	2201      	movs	r2, #1
 8019cb0:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019cb2:	4808      	ldr	r0, [pc, #32]	; (8019cd4 <Set+0x44>)
 8019cb4:	e7f9      	b.n	8019caa <Set+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 8019cb6:	2201      	movs	r2, #1
 8019cb8:	2140      	movs	r1, #64	; 0x40
 8019cba:	e7fa      	b.n	8019cb2 <Set+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 8019cbc:	2201      	movs	r2, #1
 8019cbe:	2104      	movs	r1, #4
 8019cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019cc4:	e7f1      	b.n	8019caa <Set+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019cc6:	2201      	movs	r2, #1
 8019cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019ccc:	e7f1      	b.n	8019cb2 <Set+0x22>
 8019cce:	4770      	bx	lr
 8019cd0:	48000400 	.word	0x48000400
 8019cd4:	48001400 	.word	0x48001400

08019cd8 <Reset>:
	switch(pin)
 8019cd8:	3801      	subs	r0, #1
 8019cda:	2805      	cmp	r0, #5
 8019cdc:	d81b      	bhi.n	8019d16 <Reset+0x3e>
 8019cde:	e8df f000 	tbb	[pc, r0]
 8019ce2:	0503      	.short	0x0503
 8019ce4:	16110e0a 	.word	0x16110e0a
 8019ce8:	f7ff bf4c 	b.w	8019b84 <Reset.part.1>
			break;
		case io1:
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_RESET);
 8019cec:	480a      	ldr	r0, [pc, #40]	; (8019d18 <Reset+0x40>)
 8019cee:	2200      	movs	r2, #0
 8019cf0:	2101      	movs	r1, #1
			break;
		case cs:
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
			break;
		case clk:
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8019cf2:	f7e8 bc77 	b.w	80025e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_RESET);
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8019cfa:	4808      	ldr	r0, [pc, #32]	; (8019d1c <Reset+0x44>)
 8019cfc:	e7f9      	b.n	8019cf2 <Reset+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_RESET);
 8019cfe:	2200      	movs	r2, #0
 8019d00:	2140      	movs	r1, #64	; 0x40
 8019d02:	e7fa      	b.n	8019cfa <Reset+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 8019d04:	2200      	movs	r2, #0
 8019d06:	2104      	movs	r1, #4
 8019d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019d0c:	e7f1      	b.n	8019cf2 <Reset+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8019d0e:	2200      	movs	r2, #0
 8019d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019d14:	e7f1      	b.n	8019cfa <Reset+0x22>
 8019d16:	4770      	bx	lr
 8019d18:	48000400 	.word	0x48000400
 8019d1c:	48001400 	.word	0x48001400

08019d20 <QSPI_Recieve_Init>:
	}
}

/* */
void QSPI_Recieve_Init(void)
{
 8019d20:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019d22:	4c09      	ldr	r4, [pc, #36]	; (8019d48 <QSPI_Recieve_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019d24:	4809      	ldr	r0, [pc, #36]	; (8019d4c <QSPI_Recieve_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019d26:	2303      	movs	r3, #3
 8019d28:	2500      	movs	r5, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019d2a:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019d2c:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019d30:	f7e8 fae2 	bl	80022f8 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8019d34:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019d36:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019d3a:	4621      	mov	r1, r4
 8019d3c:	4804      	ldr	r0, [pc, #16]	; (8019d50 <QSPI_Recieve_Init+0x30>)
}
 8019d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019d42:	f7e8 bad9 	b.w	80022f8 <HAL_GPIO_Init>
 8019d46:	bf00      	nop
 8019d48:	20005744 	.word	0x20005744
 8019d4c:	48000400 	.word	0x48000400
 8019d50:	48001400 	.word	0x48001400

08019d54 <QSPI_Transmit_Init>:
void QSPI_Transmit_Init(void)
{
 8019d54:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019d56:	4c09      	ldr	r4, [pc, #36]	; (8019d7c <QSPI_Transmit_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019d58:	4809      	ldr	r0, [pc, #36]	; (8019d80 <QSPI_Transmit_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019d5a:	2303      	movs	r3, #3
 8019d5c:	2501      	movs	r5, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019d5e:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019d60:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019d64:	f7e8 fac8 	bl	80022f8 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8019d68:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019d6a:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019d6e:	4621      	mov	r1, r4
 8019d70:	4804      	ldr	r0, [pc, #16]	; (8019d84 <QSPI_Transmit_Init+0x30>)
}
 8019d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019d76:	f7e8 babf 	b.w	80022f8 <HAL_GPIO_Init>
 8019d7a:	bf00      	nop
 8019d7c:	20005744 	.word	0x20005744
 8019d80:	48000400 	.word	0x48000400
 8019d84:	48001400 	.word	0x48001400

08019d88 <Single_Mode>:
void Single_Mode(void)
{
 8019d88:	b570      	push	{r4, r5, r6, lr}
	/* PB1 (IO0) */
	GPIO_InitStruct.Pin = IO0_PIN;
 8019d8a:	4c0d      	ldr	r4, [pc, #52]	; (8019dc0 <Single_Mode+0x38>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019d8c:	4e0d      	ldr	r6, [pc, #52]	; (8019dc4 <Single_Mode+0x3c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019d8e:	2501      	movs	r5, #1
 8019d90:	2302      	movs	r3, #2
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019d92:	4621      	mov	r1, r4
 8019d94:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019d96:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019d9a:	f7e8 faad 	bl	80022f8 <HAL_GPIO_Init>
	
	/* PB0 (IO1) */
	GPIO_InitStruct.Pin = IO1_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019d9e:	2300      	movs	r3, #0
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019da0:	4621      	mov	r1, r4
 8019da2:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019da4:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pin = IO1_PIN;
 8019da6:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019da8:	f7e8 faa6 	bl	80022f8 <HAL_GPIO_Init>
	
	/* PF7 (IO2) */
	GPIO_InitStruct.Pin = IO2_PIN;
 8019dac:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019dae:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8019db2:	4621      	mov	r1, r4
 8019db4:	4804      	ldr	r0, [pc, #16]	; (8019dc8 <Single_Mode+0x40>)
}
 8019db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8019dba:	f7e8 ba9d 	b.w	80022f8 <HAL_GPIO_Init>
 8019dbe:	bf00      	nop
 8019dc0:	20005744 	.word	0x20005744
 8019dc4:	48000400 	.word	0x48000400
 8019dc8:	48001400 	.word	0x48001400

08019dcc <SPI_Byte_T>:

/* Single mode SPI functions */

/* Byte transmit function */
void SPI_Byte_T(uint8_t byte)
{
 8019dcc:	b538      	push	{r3, r4, r5, lr}
 8019dce:	4605      	mov	r5, r0
 8019dd0:	2408      	movs	r4, #8
	for(uint8_t i=0; i<8; i++)
	{
		if(0x80 & byte)
 8019dd2:	062b      	lsls	r3, r5, #24
 8019dd4:	d501      	bpl.n	8019dda <SPI_Byte_T+0xe>
 8019dd6:	f7ff fecd 	bl	8019b74 <Set.part.0>
		{
			Set(io0);
		}
		Set(clk);
 8019dda:	2006      	movs	r0, #6
 8019ddc:	f7ff ff58 	bl	8019c90 <Set>
 8019de0:	3c01      	subs	r4, #1
 8019de2:	f7ff fecf 	bl	8019b84 <Reset.part.1>
		Reset(io0);	
		byte=(byte<<1);
		Reset(clk);	
 8019de6:	2006      	movs	r0, #6
		byte=(byte<<1);
 8019de8:	006d      	lsls	r5, r5, #1
		Reset(clk);	
 8019dea:	f7ff ff75 	bl	8019cd8 <Reset>
	for(uint8_t i=0; i<8; i++)
 8019dee:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte=(byte<<1);
 8019df2:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<8; i++)
 8019df4:	d1ed      	bne.n	8019dd2 <SPI_Byte_T+0x6>
	}	
}
 8019df6:	bd38      	pop	{r3, r4, r5, pc}

08019df8 <SPI_Byte_R>:
	
	SPI_Check_Busy();
}
/* Byte receive function */
uint8_t SPI_Byte_R(void)
{
 8019df8:	b570      	push	{r4, r5, r6, lr}
	uint8_t byte=0;
	for(uint8_t i=0; i<8; i++)
 8019dfa:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 8019dfc:	4e0d      	ldr	r6, [pc, #52]	; (8019e34 <SPI_Byte_R+0x3c>)
	uint8_t byte=0;
 8019dfe:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 8019e00:	2101      	movs	r1, #1
 8019e02:	4630      	mov	r0, r6
 8019e04:	f7e8 fbe8 	bl	80025d8 <HAL_GPIO_ReadPin>
 8019e08:	b108      	cbz	r0, 8019e0e <SPI_Byte_R+0x16>
 8019e0a:	f044 0401 	orr.w	r4, r4, #1
		Set(clk);
 8019e0e:	2006      	movs	r0, #6
 8019e10:	f7ff ff3e 	bl	8019c90 <Set>
		if (i<7) byte=(byte<<1);
 8019e14:	2d07      	cmp	r5, #7
	for(uint8_t i=0; i<8; i++)
 8019e16:	f105 0501 	add.w	r5, r5, #1
		if (i<7) byte=(byte<<1);
 8019e1a:	bf18      	it	ne
 8019e1c:	0064      	lslne	r4, r4, #1
		Reset(clk);
 8019e1e:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<8; i++)
 8019e22:	b2ed      	uxtb	r5, r5
		if (i<7) byte=(byte<<1);
 8019e24:	bf18      	it	ne
 8019e26:	b2e4      	uxtbne	r4, r4
		Reset(clk);
 8019e28:	f7ff ff56 	bl	8019cd8 <Reset>
	for(uint8_t i=0; i<8; i++)
 8019e2c:	2d08      	cmp	r5, #8
 8019e2e:	d1e7      	bne.n	8019e00 <SPI_Byte_R+0x8>
	}
	return byte;
}
 8019e30:	4620      	mov	r0, r4
 8019e32:	bd70      	pop	{r4, r5, r6, pc}
 8019e34:	48000400 	.word	0x48000400

08019e38 <SPI_Read_SR.part.2>:
	SPI_Address(address);
	Set(cs);
	SPI_Check_Busy();
}
/* Read status register */
uint8_t SPI_Read_SR(uint8_t sr)
 8019e38:	b510      	push	{r4, lr}
	uint8_t reg;
	
	switch(sr)
	{
		case 1:
			Reset(cs);
 8019e3a:	2005      	movs	r0, #5
 8019e3c:	f7ff ff4c 	bl	8019cd8 <Reset>
	SPI_Byte_T(cmd);
 8019e40:	2005      	movs	r0, #5
 8019e42:	f7ff ffc3 	bl	8019dcc <SPI_Byte_T>
			SPI_Instruction(0x05);
			reg=SPI_Byte_R();
 8019e46:	f7ff ffd7 	bl	8019df8 <SPI_Byte_R>
 8019e4a:	4604      	mov	r4, r0
			Set(cs);
 8019e4c:	2005      	movs	r0, #5
 8019e4e:	f7ff ff1f 	bl	8019c90 <Set>

	}
	return reg;

	SPI_Check_Busy();
}
 8019e52:	4620      	mov	r0, r4
 8019e54:	bd10      	pop	{r4, pc}

08019e56 <SPI_Check_Busy>:
{
 8019e56:	b508      	push	{r3, lr}
 8019e58:	f7ff ffee 	bl	8019e38 <SPI_Read_SR.part.2>
	while( SPI_Read_SR(1)&0x01 )
 8019e5c:	07c3      	lsls	r3, r0, #31
 8019e5e:	d400      	bmi.n	8019e62 <SPI_Check_Busy+0xc>
}
 8019e60:	bd08      	pop	{r3, pc}
		HAL_Delay(0);
 8019e62:	2000      	movs	r0, #0
 8019e64:	f7e7 f8e2 	bl	800102c <HAL_Delay>
 8019e68:	e7f6      	b.n	8019e58 <SPI_Check_Busy+0x2>
	...

08019e6c <QSPI_16_R>:
	}
	return byte;
}
/* Recieve 16 bit in quad mode  */
uint16_t QSPI_16_R(void)
{
 8019e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t byte=0;
	for(uint8_t i=0; i<4; i++)
 8019e6e:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 8019e70:	4e18      	ldr	r6, [pc, #96]	; (8019ed4 <QSPI_16_R+0x68>)
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 8019e72:	4f19      	ldr	r7, [pc, #100]	; (8019ed8 <QSPI_16_R+0x6c>)
	uint16_t byte=0;
 8019e74:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 8019e76:	2102      	movs	r1, #2
 8019e78:	4630      	mov	r0, r6
 8019e7a:	f7e8 fbad 	bl	80025d8 <HAL_GPIO_ReadPin>
 8019e7e:	b108      	cbz	r0, 8019e84 <QSPI_16_R+0x18>
 8019e80:	f044 0401 	orr.w	r4, r4, #1
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 8019e84:	2101      	movs	r1, #1
 8019e86:	4630      	mov	r0, r6
 8019e88:	f7e8 fba6 	bl	80025d8 <HAL_GPIO_ReadPin>
 8019e8c:	b108      	cbz	r0, 8019e92 <QSPI_16_R+0x26>
 8019e8e:	f044 0402 	orr.w	r4, r4, #2
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 8019e92:	2180      	movs	r1, #128	; 0x80
 8019e94:	4638      	mov	r0, r7
 8019e96:	f7e8 fb9f 	bl	80025d8 <HAL_GPIO_ReadPin>
 8019e9a:	b108      	cbz	r0, 8019ea0 <QSPI_16_R+0x34>
 8019e9c:	f044 0404 	orr.w	r4, r4, #4
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 8019ea0:	2140      	movs	r1, #64	; 0x40
 8019ea2:	4638      	mov	r0, r7
 8019ea4:	f7e8 fb98 	bl	80025d8 <HAL_GPIO_ReadPin>
 8019ea8:	b108      	cbz	r0, 8019eae <QSPI_16_R+0x42>
 8019eaa:	f044 0408 	orr.w	r4, r4, #8
		Set(clk);
 8019eae:	2006      	movs	r0, #6
 8019eb0:	f7ff feee 	bl	8019c90 <Set>
		if (i<3) byte=(byte<<4);
 8019eb4:	2d03      	cmp	r5, #3
	for(uint8_t i=0; i<4; i++)
 8019eb6:	f105 0501 	add.w	r5, r5, #1
		if (i<3) byte=(byte<<4);
 8019eba:	bf18      	it	ne
 8019ebc:	0124      	lslne	r4, r4, #4
		Reset(clk);
 8019ebe:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<4; i++)
 8019ec2:	b2ed      	uxtb	r5, r5
		if (i<3) byte=(byte<<4);
 8019ec4:	bf18      	it	ne
 8019ec6:	b2a4      	uxthne	r4, r4
		Reset(clk);
 8019ec8:	f7ff ff06 	bl	8019cd8 <Reset>
	for(uint8_t i=0; i<4; i++)
 8019ecc:	2d04      	cmp	r5, #4
 8019ece:	d1d2      	bne.n	8019e76 <QSPI_16_R+0xa>
	}
	return byte;
}
 8019ed0:	4620      	mov	r0, r4
 8019ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ed4:	48000400 	.word	0x48000400
 8019ed8:	48001400 	.word	0x48001400

08019edc <QSPI_Byte_T>:
	}
	return byte;
}
/* Send byte in quad mode */
void QSPI_Byte_T(uint8_t byte)
{
 8019edc:	b538      	push	{r3, r4, r5, lr}
 8019ede:	4604      	mov	r4, r0
 8019ee0:	2502      	movs	r5, #2
	for(uint8_t i=0; i<2; i++)
	{
		if(0x80 & byte)	Set(io3);
 8019ee2:	0620      	lsls	r0, r4, #24
 8019ee4:	d502      	bpl.n	8019eec <QSPI_Byte_T+0x10>
 8019ee6:	2004      	movs	r0, #4
 8019ee8:	f7ff fed2 	bl	8019c90 <Set>
		if(0x40 & byte)	Set(io2);
 8019eec:	0661      	lsls	r1, r4, #25
 8019eee:	d502      	bpl.n	8019ef6 <QSPI_Byte_T+0x1a>
 8019ef0:	2003      	movs	r0, #3
 8019ef2:	f7ff fecd 	bl	8019c90 <Set>
		if(0x20 & byte)	Set(io1);
 8019ef6:	06a2      	lsls	r2, r4, #26
 8019ef8:	d502      	bpl.n	8019f00 <QSPI_Byte_T+0x24>
 8019efa:	2002      	movs	r0, #2
 8019efc:	f7ff fec8 	bl	8019c90 <Set>
		if(0x10 & byte)	Set(io0);
 8019f00:	06e3      	lsls	r3, r4, #27
 8019f02:	d501      	bpl.n	8019f08 <QSPI_Byte_T+0x2c>
 8019f04:	f7ff fe36 	bl	8019b74 <Set.part.0>

		Set(clk);
 8019f08:	2006      	movs	r0, #6
 8019f0a:	f7ff fec1 	bl	8019c90 <Set>
		Reset(io3);	Reset(io2);	Reset(io1);	Reset(io0);	
 8019f0e:	2004      	movs	r0, #4
 8019f10:	f7ff fee2 	bl	8019cd8 <Reset>
 8019f14:	2003      	movs	r0, #3
 8019f16:	f7ff fedf 	bl	8019cd8 <Reset>
 8019f1a:	2002      	movs	r0, #2
 8019f1c:	f7ff fedc 	bl	8019cd8 <Reset>
 8019f20:	3d01      	subs	r5, #1
 8019f22:	f7ff fe2f 	bl	8019b84 <Reset.part.1>
		byte=(byte<<4);
		Reset(clk);	
 8019f26:	2006      	movs	r0, #6
		byte=(byte<<4);
 8019f28:	0124      	lsls	r4, r4, #4
		Reset(clk);	
 8019f2a:	f7ff fed5 	bl	8019cd8 <Reset>
	for(uint8_t i=0; i<2; i++)
 8019f2e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte=(byte<<4);
 8019f32:	b2e4      	uxtb	r4, r4
	for(uint8_t i=0; i<2; i++)
 8019f34:	d1d5      	bne.n	8019ee2 <QSPI_Byte_T+0x6>
	}	
}
 8019f36:	bd38      	pop	{r3, r4, r5, pc}

08019f38 <QSPI_Dummy>:
		Reset(clk);	
	}	
}
/* Dummy cycles in Quad Mode */
void QSPI_Dummy(uint8_t n) 	// n - number of dummy cycles
{
 8019f38:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i=0; i<(n*4); i++)
	{
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 8019f3a:	4e07      	ldr	r6, [pc, #28]	; (8019f58 <QSPI_Dummy+0x20>)
	for(uint8_t i=0; i<(n*4); i++)
 8019f3c:	0085      	lsls	r5, r0, #2
 8019f3e:	2400      	movs	r4, #0
 8019f40:	b2e3      	uxtb	r3, r4
 8019f42:	42ab      	cmp	r3, r5
 8019f44:	f104 0401 	add.w	r4, r4, #1
 8019f48:	db00      	blt.n	8019f4c <QSPI_Dummy+0x14>
	}
}
 8019f4a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 8019f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019f50:	4630      	mov	r0, r6
 8019f52:	f7e8 fb4c 	bl	80025ee <HAL_GPIO_TogglePin>
 8019f56:	e7f3      	b.n	8019f40 <QSPI_Dummy+0x8>
 8019f58:	48001400 	.word	0x48001400

08019f5c <QSPI_Address>:
		arr[e]=QSPI_Byte_R();
	}
}
/* Address send in quad mode  */
void QSPI_Address(uint32_t addr)	// hasn't worked yet
{
 8019f5c:	b510      	push	{r4, lr}
 8019f5e:	4604      	mov	r4, r0
	uint8_t byte=0;
	
	for(uint8_t e=0; e<3; e++)
	{
		byte=(addr >> (8 * (2-e)));
		QSPI_Byte_T(byte);
 8019f60:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8019f64:	f7ff ffba 	bl	8019edc <QSPI_Byte_T>
 8019f68:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8019f6c:	f7ff ffb6 	bl	8019edc <QSPI_Byte_T>
 8019f70:	b2e0      	uxtb	r0, r4
	}
}
 8019f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		QSPI_Byte_T(byte);
 8019f76:	f7ff bfb1 	b.w	8019edc <QSPI_Byte_T>

08019f7a <QSPI_Recieve_IO_16>:
	SPI_Check_Busy();
}
/* Ψ祠𳭪򨨠嬿 16 蠳2 ⩲ */
/* Read 16 bit array from memory in quad mode */
void QSPI_Recieve_IO_16(uint16_t* arr, uint32_t address, uint32_t size)		// be aware that this function reconfigurates GPIO
{
 8019f7a:	b570      	push	{r4, r5, r6, lr}
 8019f7c:	460c      	mov	r4, r1
 8019f7e:	4615      	mov	r5, r2
 8019f80:	4606      	mov	r6, r0
	QSPI_Transmit_Init();	
 8019f82:	f7ff fee7 	bl	8019d54 <QSPI_Transmit_Init>
	Reset(cs);
 8019f86:	2005      	movs	r0, #5
 8019f88:	f7ff fea6 	bl	8019cd8 <Reset>
	SPI_Byte_T(cmd);
 8019f8c:	20eb      	movs	r0, #235	; 0xeb
 8019f8e:	f7ff ff1d 	bl	8019dcc <SPI_Byte_T>
	SPI_Instruction(fastread_quad_io);
	QSPI_Address(address);
 8019f92:	4620      	mov	r0, r4
 8019f94:	f7ff ffe2 	bl	8019f5c <QSPI_Address>
	QSPI_Dummy(3);	
 8019f98:	2003      	movs	r0, #3
 8019f9a:	f7ff ffcd 	bl	8019f38 <QSPI_Dummy>
	
	QSPI_Recieve_Init();
 8019f9e:	f7ff febf 	bl	8019d20 <QSPI_Recieve_Init>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 8019fa2:	2400      	movs	r4, #0
 8019fa4:	42ac      	cmp	r4, r5
 8019fa6:	d108      	bne.n	8019fba <QSPI_Recieve_IO_16+0x40>
	Set(cs);
 8019fa8:	2005      	movs	r0, #5
 8019faa:	f7ff fe71 	bl	8019c90 <Set>

	Single_Mode();
 8019fae:	f7ff feeb 	bl	8019d88 <Single_Mode>
	SPI_Check_Busy();
}
 8019fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPI_Check_Busy();
 8019fb6:	f7ff bf4e 	b.w	8019e56 <SPI_Check_Busy>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 8019fba:	f7ff ff57 	bl	8019e6c <QSPI_16_R>
 8019fbe:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 8019fc2:	3401      	adds	r4, #1
 8019fc4:	e7ee      	b.n	8019fa4 <QSPI_Recieve_IO_16+0x2a>
	...

08019fc8 <Image_load>:
void Image_load(uint32_t address, uint32_t size){
 8019fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fcc:	f5ad 6d2f 	sub.w	sp, sp, #2800	; 0xaf0
 8019fd0:	4680      	mov	r8, r0
 8019fd2:	460f      	mov	r7, r1
	uint16_t buff[1400] = {0};
 8019fd4:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8019fd8:	2100      	movs	r1, #0
 8019fda:	4668      	mov	r0, sp
 8019fdc:	f006 fb0f 	bl	80205fe <memset>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 8019fe0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 801a024 <Image_load+0x5c>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 8019fe4:	2400      	movs	r4, #0
 8019fe6:	f44f 66af 	mov.w	r6, #1400	; 0x578
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 8019fea:	f44f 6a30 	mov.w	sl, #2816	; 0xb00
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 8019fee:	fb06 f304 	mul.w	r3, r6, r4
 8019ff2:	429f      	cmp	r7, r3
 8019ff4:	d803      	bhi.n	8019ffe <Image_load+0x36>
}
 8019ff6:	f50d 6d2f 	add.w	sp, sp, #2800	; 0xaf0
 8019ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 8019ffe:	b2a5      	uxth	r5, r4
 801a000:	f44f 62af 	mov.w	r2, #1400	; 0x578
 801a004:	fb0a 8105 	mla	r1, sl, r5, r8
 801a008:	4668      	mov	r0, sp
 801a00a:	f7ff ffb6 	bl	8019f7a <QSPI_Recieve_IO_16>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 801a00e:	fb06 f005 	mul.w	r0, r6, r5
 801a012:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801a016:	4669      	mov	r1, sp
 801a018:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 801a01c:	f006 fae4 	bl	80205e8 <memcpy>
 801a020:	3401      	adds	r4, #1
 801a022:	e7e4      	b.n	8019fee <Image_load+0x26>
 801a024:	20055954 	.word	0x20055954

0801a028 <Rabs_calc_Factor2_Settings_change>:
#include "Rabs_math.h"

float Rabs_calc_Factor2_Settings_change(float Kt, float P)
{
	return Kt * P;
}
 801a028:	ee20 0a20 	vmul.f32	s0, s0, s1
 801a02c:	4770      	bx	lr
	...

0801a030 <Rabs_calc_Factor1>:

float Rabs_calc_Factor1(uint16_t Rdark, float Lt, uint16_t R_data[])
{
 801a030:	b538      	push	{r3, r4, r5, lr}
	uint32_t sum = 0;
	float Kl = 0;
	
	Kl = Lt/100.00;
 801a032:	eddf 7a17 	vldr	s15, [pc, #92]	; 801a090 <Rabs_calc_Factor1+0x60>
{
 801a036:	ed2d 8b02 	vpush	{d8}
	Kl = Lt/100.00;
 801a03a:	ee80 8a27 	vdiv.f32	s16, s0, s15
 801a03e:	1e8a      	subs	r2, r1, #2
	uint32_t sum = 0;
 801a040:	2300      	movs	r3, #0
 801a042:	f201 71fe 	addw	r1, r1, #2046	; 0x7fe
	for (uint16_t i = 0; i < 1024; i++)
	{
		sum = sum + (R_data[i] - Rdark);
 801a046:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 801a04a:	1a24      	subs	r4, r4, r0
	for (uint16_t i = 0; i < 1024; i++)
 801a04c:	4291      	cmp	r1, r2
		sum = sum + (R_data[i] - Rdark);
 801a04e:	4423      	add	r3, r4
	for (uint16_t i = 0; i < 1024; i++)
 801a050:	d1f9      	bne.n	801a046 <Rabs_calc_Factor1+0x16>
	}
	return Kl*(((float)sum)/1024.00);
 801a052:	ee07 3a90 	vmov	s15, r3
 801a056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a05a:	ee17 0a90 	vmov	r0, s15
 801a05e:	f7e6 fa8b 	bl	8000578 <__aeabi_f2d>
 801a062:	2200      	movs	r2, #0
 801a064:	4b0b      	ldr	r3, [pc, #44]	; (801a094 <Rabs_calc_Factor1+0x64>)
 801a066:	f7e6 fadb 	bl	8000620 <__aeabi_dmul>
 801a06a:	4604      	mov	r4, r0
 801a06c:	ee18 0a10 	vmov	r0, s16
 801a070:	460d      	mov	r5, r1
 801a072:	f7e6 fa81 	bl	8000578 <__aeabi_f2d>
 801a076:	4602      	mov	r2, r0
 801a078:	460b      	mov	r3, r1
 801a07a:	4620      	mov	r0, r4
 801a07c:	4629      	mov	r1, r5
 801a07e:	f7e6 facf 	bl	8000620 <__aeabi_dmul>
 801a082:	f7e6 fdc5 	bl	8000c10 <__aeabi_d2f>
}
 801a086:	ecbd 8b02 	vpop	{d8}
 801a08a:	ee00 0a10 	vmov	s0, r0
 801a08e:	bd38      	pop	{r3, r4, r5, pc}
 801a090:	42c80000 	.word	0x42c80000
 801a094:	3f500000 	.word	0x3f500000

0801a098 <Rabs_calc_main>:
//
//		r--;
//	}
//}
void Rabs_calc_main(uint16_t R_data[], uint16_t Rdark, float Factor1, float Factor2, float Sn[], float Rabs[])
{
 801a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//			Rabs[1023-i] = (Rabs[1023-i] + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
			Factor3 = Factor3*Factor2*(Sn[r]);
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
		}

		Rabs_prev[1023-i][n] = Factor3;
 801a09c:	4f2c      	ldr	r7, [pc, #176]	; (801a150 <Rabs_calc_main+0xb8>)
 801a09e:	4d2d      	ldr	r5, [pc, #180]	; (801a154 <Rabs_calc_main+0xbc>)
 801a0a0:	783e      	ldrb	r6, [r7, #0]
 801a0a2:	f1a0 0c02 	sub.w	ip, r0, #2
		Factor3 = R_data[i] - Rdark - Factor1;
 801a0a6:	482c      	ldr	r0, [pc, #176]	; (801a158 <Rabs_calc_main+0xc0>)
 801a0a8:	ea4f 0986 	mov.w	r9, r6, lsl #2
		Rabs_prev[1023-i][n] = Factor3;
 801a0ac:	f640 7efc 	movw	lr, #4092	; 0xffc
		if(Factor3 <= 0)
 801a0b0:	f04f 0b00 	mov.w	fp, #0
 801a0b4:	4680      	mov	r8, r0
 801a0b6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		Factor3 = R_data[i] - Rdark - Factor1;
 801a0ba:	f83c 4f02 	ldrh.w	r4, [ip, #2]!
 801a0be:	1a64      	subs	r4, r4, r1
 801a0c0:	ee07 4a90 	vmov	s15, r4
 801a0c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0c8:	eb03 0a0e 	add.w	sl, r3, lr
 801a0cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
		if(Factor3 <= 0)
 801a0d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Factor3 = R_data[i] - Rdark - Factor1;
 801a0d8:	edc0 7a00 	vstr	s15, [r0]
		if(Factor3 <= 0)
 801a0dc:	d829      	bhi.n	801a132 <Rabs_calc_main+0x9a>
			Rabs[1023-i] = (Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3]) / 5;
 801a0de:	edd5 7a00 	vldr	s15, [r5]
			Factor3 = 0;
 801a0e2:	f8c0 b000 	str.w	fp, [r0]
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a0e6:	edd5 6a01 	vldr	s13, [r5, #4]
 801a0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a0ee:	edd5 6a02 	vldr	s13, [r5, #8]
 801a0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a0f6:	edd5 6a03 	vldr	s13, [r5, #12]
 801a0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
		Rabs_prev[1023-i][n] = Factor3;
 801a0fe:	eb05 0409 	add.w	r4, r5, r9
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a102:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a106:	f1ae 0e04 	sub.w	lr, lr, #4
	for (uint16_t i = 0; i < 1024; i++)
 801a10a:	f11e 0f04 	cmn.w	lr, #4
 801a10e:	f1a5 0510 	sub.w	r5, r5, #16
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a112:	edca 6a00 	vstr	s13, [sl]
		Rabs_prev[1023-i][n] = Factor3;
 801a116:	f8d8 a000 	ldr.w	sl, [r8]
 801a11a:	f8c4 a000 	str.w	sl, [r4]
	for (uint16_t i = 0; i < 1024; i++)
 801a11e:	d1cc      	bne.n	801a0ba <Rabs_calc_main+0x22>

		r--;
	}
	n++;
 801a120:	3601      	adds	r6, #1
 801a122:	b2f6      	uxtb	r6, r6
	if (n>3) n = 0;
 801a124:	2e03      	cmp	r6, #3
 801a126:	bf8a      	itet	hi
 801a128:	2300      	movhi	r3, #0
	n++;
 801a12a:	703e      	strbls	r6, [r7, #0]
	if (n>3) n = 0;
 801a12c:	703b      	strbhi	r3, [r7, #0]
 801a12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Factor3 = Factor3*Factor2*(Sn[r]);
 801a132:	eb02 040e 	add.w	r4, r2, lr
 801a136:	edd4 6a00 	vldr	s13, [r4]
 801a13a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801a13e:	ee67 7aa6 	vmul.f32	s15, s15, s13
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a142:	edd5 6a00 	vldr	s13, [r5]
			Factor3 = Factor3*Factor2*(Sn[r]);
 801a146:	edc0 7a00 	vstr	s15, [r0]
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 801a14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a14e:	e7ca      	b.n	801a0e6 <Rabs_calc_main+0x4e>
 801a150:	2000975c 	.word	0x2000975c
 801a154:	2000974c 	.word	0x2000974c
 801a158:	20005758 	.word	0x20005758

0801a15c <Rabs_find_MAX>:
	return Factor3*Factor2;
}

float Rabs_find_MAX(float Rabs[], uint8_t direction)
{	
	uint8_t    step = (direction == 0x00)? 4 :3;
 801a15c:	2900      	cmp	r1, #0

	float max = 0;
 801a15e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a190 <Rabs_find_MAX+0x34>

	for (uint16_t i = 1023; i >= step; i-=step)
 801a162:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801a166:	bf0c      	ite	eq
 801a168:	2204      	moveq	r2, #4
 801a16a:	2203      	movne	r2, #3
 801a16c:	4293      	cmp	r3, r2
 801a16e:	d200      	bcs.n	801a172 <Rabs_find_MAX+0x16>
	{
		max = Rabs[i] > max ? Rabs[i] : max;
	}
	return max;
}
 801a170:	4770      	bx	lr
		max = Rabs[i] > max ? Rabs[i] : max;
 801a172:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801a176:	edd1 7a00 	vldr	s15, [r1]
 801a17a:	eeb4 0a67 	vcmp.f32	s0, s15
 801a17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a182:	eba3 0302 	sub.w	r3, r3, r2
 801a186:	bf48      	it	mi
 801a188:	eeb0 0a67 	vmovmi.f32	s0, s15
 801a18c:	b29b      	uxth	r3, r3
 801a18e:	e7ed      	b.n	801a16c <Rabs_find_MAX+0x10>
 801a190:	00000000 	.word	0x00000000

0801a194 <Rabs_find_MAX_all>:

float Rabs_find_MAX_all(float Rabs[])
{	
	float max = 0;
 801a194:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801a1b4 <Rabs_find_MAX_all+0x20>
 801a198:	f500 5380 	add.w	r3, r0, #4096	; 0x1000

	for (uint16_t i = 0; i < 1024; i++)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 801a19c:	ecf0 7a01 	vldmia	r0!, {s15}
 801a1a0:	eef4 7a40 	vcmp.f32	s15, s0
 801a1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1a8:	bfc8      	it	gt
 801a1aa:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 0; i < 1024; i++)
 801a1ae:	4298      	cmp	r0, r3
 801a1b0:	d1f4      	bne.n	801a19c <Rabs_find_MAX_all+0x8>
	}
	return max;
}
 801a1b2:	4770      	bx	lr
 801a1b4:	00000000 	.word	0x00000000

0801a1b8 <WriteSDFLASH_t>:
char buffer_sd[11];

FLASH_EraseInitTypeDef EraseInitStruct3;

void WriteSDFLASH_t(uint64_t filenum)
{
 801a1b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a1bc:	4c52      	ldr	r4, [pc, #328]	; (801a308 <WriteSDFLASH_t+0x150>)
uint32_t PAGEError = 0;
 801a1be:	f10d 0808 	add.w	r8, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a1c2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801a1c6:	f04f 0900 	mov.w	r9, #0
 801a1ca:	f848 9d04 	str.w	r9, [r8, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a1ce:	6125      	str	r5, [r4, #16]
{
 801a1d0:	460f      	mov	r7, r1
 801a1d2:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801a1d4:	f7e7 ff02 	bl	8001fdc <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801a1d8:	f7e7 ff00 	bl	8001fdc <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a1dc:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801a1de:	2064      	movs	r0, #100	; 0x64
 801a1e0:	f7e6 ff24 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801a1e4:	4849      	ldr	r0, [pc, #292]	; (801a30c <WriteSDFLASH_t+0x154>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801a1e6:	2302      	movs	r3, #2
 801a1e8:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)43;
 801a1ea:	232b      	movs	r3, #43	; 0x2b
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a1ec:	4641      	mov	r1, r8
		EraseInitStruct3.Page = (uint32_t)43;
 801a1ee:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801a1f4:	f8c0 9000 	str.w	r9, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a1f8:	f7e8 f80a 	bl	8002210 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801a1fc:	2032      	movs	r0, #50	; 0x32
 801a1fe:	f7e6 ff15 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a202:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801a204:	f7e7 fefc 	bl	8002000 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801a208:	f7e7 fee8 	bl	8001fdc <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a20c:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)FILENUMBER, filenum);
 801a20e:	4d40      	ldr	r5, [pc, #256]	; (801a310 <WriteSDFLASH_t+0x158>)
 801a210:	4632      	mov	r2, r6
 801a212:	463b      	mov	r3, r7
 801a214:	4629      	mov	r1, r5
 801a216:	2000      	movs	r0, #0
 801a218:	f7e7 ff3a 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a21c:	2800      	cmp	r0, #0
 801a21e:	d1f7      	bne.n	801a210 <WriteSDFLASH_t+0x58>
					}

				flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a224:	6123      	str	r3, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MODEEL, Mode_EL);
 801a226:	4d3b      	ldr	r5, [pc, #236]	; (801a314 <WriteSDFLASH_t+0x15c>)
 801a228:	4c3b      	ldr	r4, [pc, #236]	; (801a318 <WriteSDFLASH_t+0x160>)
 801a22a:	782a      	ldrb	r2, [r5, #0]
 801a22c:	2300      	movs	r3, #0
 801a22e:	4621      	mov	r1, r4
 801a230:	2000      	movs	r0, #0
 801a232:	f7e7 ff2d 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a236:	2800      	cmp	r0, #0
 801a238:	d1f7      	bne.n	801a22a <WriteSDFLASH_t+0x72>
					}
						
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a23a:	4b33      	ldr	r3, [pc, #204]	; (801a308 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801a23c:	4d37      	ldr	r5, [pc, #220]	; (801a31c <WriteSDFLASH_t+0x164>)
 801a23e:	4c38      	ldr	r4, [pc, #224]	; (801a320 <WriteSDFLASH_t+0x168>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a240:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a244:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801a246:	882a      	ldrh	r2, [r5, #0]
 801a248:	2300      	movs	r3, #0
 801a24a:	4621      	mov	r1, r4
 801a24c:	2000      	movs	r0, #0
 801a24e:	f7e7 ff1f 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a252:	2800      	cmp	r0, #0
 801a254:	d1f7      	bne.n	801a246 <WriteSDFLASH_t+0x8e>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a256:	4b2c      	ldr	r3, [pc, #176]	; (801a308 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801a258:	4d32      	ldr	r5, [pc, #200]	; (801a324 <WriteSDFLASH_t+0x16c>)
 801a25a:	4c33      	ldr	r4, [pc, #204]	; (801a328 <WriteSDFLASH_t+0x170>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a25c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a260:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801a262:	782a      	ldrb	r2, [r5, #0]
 801a264:	2300      	movs	r3, #0
 801a266:	4621      	mov	r1, r4
 801a268:	2000      	movs	r0, #0
 801a26a:	f7e7 ff11 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a26e:	2800      	cmp	r0, #0
 801a270:	d1f7      	bne.n	801a262 <WriteSDFLASH_t+0xaa>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a272:	4b25      	ldr	r3, [pc, #148]	; (801a308 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801a274:	4d2d      	ldr	r5, [pc, #180]	; (801a32c <WriteSDFLASH_t+0x174>)
 801a276:	4c2e      	ldr	r4, [pc, #184]	; (801a330 <WriteSDFLASH_t+0x178>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a278:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a27c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801a27e:	782a      	ldrb	r2, [r5, #0]
 801a280:	2300      	movs	r3, #0
 801a282:	4621      	mov	r1, r4
 801a284:	2000      	movs	r0, #0
 801a286:	f7e7 ff03 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a28a:	2800      	cmp	r0, #0
 801a28c:	d1f7      	bne.n	801a27e <WriteSDFLASH_t+0xc6>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a28e:	4b1e      	ldr	r3, [pc, #120]	; (801a308 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801a290:	4d28      	ldr	r5, [pc, #160]	; (801a334 <WriteSDFLASH_t+0x17c>)
 801a292:	4c29      	ldr	r4, [pc, #164]	; (801a338 <WriteSDFLASH_t+0x180>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a294:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a298:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801a29a:	782a      	ldrb	r2, [r5, #0]
 801a29c:	2300      	movs	r3, #0
 801a29e:	4621      	mov	r1, r4
 801a2a0:	2000      	movs	r0, #0
 801a2a2:	f7e7 fef5 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a2a6:	2800      	cmp	r0, #0
 801a2a8:	d1f7      	bne.n	801a29a <WriteSDFLASH_t+0xe2>
						}
						flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a2aa:	4b17      	ldr	r3, [pc, #92]	; (801a308 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801a2ac:	4d23      	ldr	r5, [pc, #140]	; (801a33c <WriteSDFLASH_t+0x184>)
 801a2ae:	4c24      	ldr	r4, [pc, #144]	; (801a340 <WriteSDFLASH_t+0x188>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a2b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a2b4:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801a2b6:	782a      	ldrb	r2, [r5, #0]
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	4621      	mov	r1, r4
 801a2bc:	2000      	movs	r0, #0
 801a2be:	f7e7 fee7 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a2c2:	2800      	cmp	r0, #0
 801a2c4:	d1f7      	bne.n	801a2b6 <WriteSDFLASH_t+0xfe>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a2c6:	4b10      	ldr	r3, [pc, #64]	; (801a308 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801a2c8:	4d1e      	ldr	r5, [pc, #120]	; (801a344 <WriteSDFLASH_t+0x18c>)
 801a2ca:	4c1f      	ldr	r4, [pc, #124]	; (801a348 <WriteSDFLASH_t+0x190>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a2cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a2d0:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801a2d2:	782a      	ldrb	r2, [r5, #0]
 801a2d4:	2300      	movs	r3, #0
 801a2d6:	4621      	mov	r1, r4
 801a2d8:	2000      	movs	r0, #0
 801a2da:	f7e7 fed9 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a2de:	2800      	cmp	r0, #0
 801a2e0:	d1f7      	bne.n	801a2d2 <WriteSDFLASH_t+0x11a>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a2e2:	4b09      	ldr	r3, [pc, #36]	; (801a308 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801a2e4:	4d19      	ldr	r5, [pc, #100]	; (801a34c <WriteSDFLASH_t+0x194>)
 801a2e6:	4c1a      	ldr	r4, [pc, #104]	; (801a350 <WriteSDFLASH_t+0x198>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a2e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a2ec:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801a2ee:	782a      	ldrb	r2, [r5, #0]
 801a2f0:	2300      	movs	r3, #0
 801a2f2:	4621      	mov	r1, r4
 801a2f4:	2000      	movs	r0, #0
 801a2f6:	f7e7 fecb 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a2fa:	2800      	cmp	r0, #0
 801a2fc:	d1f7      	bne.n	801a2ee <WriteSDFLASH_t+0x136>
					}
						HAL_FLASH_Lock();
 801a2fe:	f7e7 fe7f 	bl	8002000 <HAL_FLASH_Lock>
}
 801a302:	b003      	add	sp, #12
 801a304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a308:	40022000 	.word	0x40022000
 801a30c:	20092640 	.word	0x20092640
 801a310:	0812b020 	.word	0x0812b020
 801a314:	20000ebc 	.word	0x20000ebc
 801a318:	0812b030 	.word	0x0812b030
 801a31c:	20005706 	.word	0x20005706
 801a320:	0812b038 	.word	0x0812b038
 801a324:	20005702 	.word	0x20005702
 801a328:	0812b040 	.word	0x0812b040
 801a32c:	200056ff 	.word	0x200056ff
 801a330:	0812b048 	.word	0x0812b048
 801a334:	20005700 	.word	0x20005700
 801a338:	0812b050 	.word	0x0812b050
 801a33c:	20005703 	.word	0x20005703
 801a340:	0812b058 	.word	0x0812b058
 801a344:	20090ab9 	.word	0x20090ab9
 801a348:	0812b060 	.word	0x0812b060
 801a34c:	20090aba 	.word	0x20090aba
 801a350:	0812b068 	.word	0x0812b068

0801a354 <WriteFLASH_Screen>:


void WriteFLASH_Screen(uint8_t Screen)
{
 801a354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a358:	4c1b      	ldr	r4, [pc, #108]	; (801a3c8 <WriteFLASH_Screen+0x74>)
uint32_t PAGEError = 0;
 801a35a:	af02      	add	r7, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a35c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801a360:	f04f 0800 	mov.w	r8, #0
 801a364:	f847 8d04 	str.w	r8, [r7, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a368:	6125      	str	r5, [r4, #16]
{
 801a36a:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801a36c:	f7e7 fe36 	bl	8001fdc <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801a370:	f7e7 fe34 	bl	8001fdc <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a374:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801a376:	2064      	movs	r0, #100	; 0x64
 801a378:	f7e6 fe58 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801a37c:	4813      	ldr	r0, [pc, #76]	; (801a3cc <WriteFLASH_Screen+0x78>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801a37e:	2302      	movs	r3, #2
 801a380:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)44;
 801a382:	232c      	movs	r3, #44	; 0x2c
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a384:	4639      	mov	r1, r7
		EraseInitStruct3.Page = (uint32_t)44;
 801a386:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801a388:	2301      	movs	r3, #1
 801a38a:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801a38c:	f8c0 8000 	str.w	r8, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a390:	f7e7 ff3e 	bl	8002210 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801a394:	2032      	movs	r0, #50	; 0x32
 801a396:	f7e6 fe49 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a39a:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801a39c:	f7e7 fe30 	bl	8002000 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801a3a0:	f7e7 fe1c 	bl	8001fdc <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a3a4:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SCREENADDR, Screen);
 801a3a6:	b2f4      	uxtb	r4, r6
 801a3a8:	4e09      	ldr	r6, [pc, #36]	; (801a3d0 <WriteFLASH_Screen+0x7c>)
 801a3aa:	2500      	movs	r5, #0
 801a3ac:	4622      	mov	r2, r4
 801a3ae:	462b      	mov	r3, r5
 801a3b0:	4631      	mov	r1, r6
 801a3b2:	2000      	movs	r0, #0
 801a3b4:	f7e7 fe6c 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a3b8:	2800      	cmp	r0, #0
 801a3ba:	d1f7      	bne.n	801a3ac <WriteFLASH_Screen+0x58>
					}
		HAL_FLASH_Lock();
 801a3bc:	f7e7 fe20 	bl	8002000 <HAL_FLASH_Lock>
}
 801a3c0:	b002      	add	sp, #8
 801a3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3c6:	bf00      	nop
 801a3c8:	40022000 	.word	0x40022000
 801a3cc:	20092640 	.word	0x20092640
 801a3d0:	0812c020 	.word	0x0812c020
 801a3d4:	00000000 	.word	0x00000000

0801a3d8 <Calculate_SD_Data>:


void Calculate_SD_Data()
{
 801a3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	SDWr_Status_bar = 0;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801a3da:	4c5b      	ldr	r4, [pc, #364]	; (801a548 <Calculate_SD_Data+0x170>)
	SDWr_Status_bar = 0;
 801a3dc:	4e5b      	ldr	r6, [pc, #364]	; (801a54c <Calculate_SD_Data+0x174>)
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801a3de:	4d5c      	ldr	r5, [pc, #368]	; (801a550 <Calculate_SD_Data+0x178>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a3e0:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 801a554 <Calculate_SD_Data+0x17c>
	Calculate_xy1931(colorimetry_XYZ1931);
 801a3e4:	4f5c      	ldr	r7, [pc, #368]	; (801a558 <Calculate_SD_Data+0x180>)
	SDWr_Status_bar = 0;
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	2300      	movs	r3, #0
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a3ea:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a3ee:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0;
 801a3f0:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a3f4:	f7f9 f90e 	bl	8013614 <GUI_Bar_Measure>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801a3f8:	462a      	mov	r2, r5
 801a3fa:	4b58      	ldr	r3, [pc, #352]	; (801a55c <Calculate_SD_Data+0x184>)
 801a3fc:	4958      	ldr	r1, [pc, #352]	; (801a560 <Calculate_SD_Data+0x188>)
 801a3fe:	4620      	mov	r0, r4
 801a400:	f7f4 f960 	bl	800e6c4 <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801a404:	4638      	mov	r0, r7
 801a406:	f7f4 f9c9 	bl	800e79c <Calculate_xy1931>
	Calculate_uv1976(colorimetry_xy1931);
 801a40a:	4856      	ldr	r0, [pc, #344]	; (801a564 <Calculate_SD_Data+0x18c>)
 801a40c:	f7f4 fa08 	bl	800e820 <Calculate_uv1976>
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801a410:	4b55      	ldr	r3, [pc, #340]	; (801a568 <Calculate_SD_Data+0x190>)
 801a412:	781a      	ldrb	r2, [r3, #0]
 801a414:	4b55      	ldr	r3, [pc, #340]	; (801a56c <Calculate_SD_Data+0x194>)
 801a416:	4638      	mov	r0, r7
 801a418:	7819      	ldrb	r1, [r3, #0]
	
	SDWr_Status_bar = 0.1;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	delta_Eab_Measure = Calculate_deltaEab();
	
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a41a:	4f55      	ldr	r7, [pc, #340]	; (801a570 <Calculate_SD_Data+0x198>)
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801a41c:	f7f4 fbc0 	bl	800eba0 <Calculate_Lab>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801a420:	4620      	mov	r0, r4
 801a422:	2101      	movs	r1, #1
 801a424:	f7f4 fa20 	bl	800e868 <Calculate_Tc>
 801a428:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a42c:	4b51      	ldr	r3, [pc, #324]	; (801a574 <Calculate_SD_Data+0x19c>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a42e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 801a578 <Calculate_SD_Data+0x1a0>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801a432:	ee17 2a90 	vmov	r2, s15
 801a436:	801a      	strh	r2, [r3, #0]
	SDWr_Status_bar = 0.1;
 801a438:	a33d      	add	r3, pc, #244	; (adr r3, 801a530 <Calculate_SD_Data+0x158>)
 801a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a43e:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a442:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.1;
 801a444:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a448:	f7f9 f8e4 	bl	8013614 <GUI_Bar_Measure>
	delta_Eab_Measure = Calculate_deltaEab();
 801a44c:	f7f4 fde8 	bl	800f020 <Calculate_deltaEab>
 801a450:	4b4a      	ldr	r3, [pc, #296]	; (801a57c <Calculate_SD_Data+0x1a4>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a452:	4629      	mov	r1, r5
	delta_Eab_Measure = Calculate_deltaEab();
 801a454:	8018      	strh	r0, [r3, #0]
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a456:	4620      	mov	r0, r4
 801a458:	f7f3 ff88 	bl	800e36c <Calculate_EL_Day>
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801a45c:	4620      	mov	r0, r4
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a45e:	4d48      	ldr	r5, [pc, #288]	; (801a580 <Calculate_SD_Data+0x1a8>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a460:	ed87 0a00 	vstr	s0, [r7]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801a464:	f7f3 ffa2 	bl	800e3ac <Calculate_EL_Day_Wt>
 801a468:	4b46      	ldr	r3, [pc, #280]	; (801a584 <Calculate_SD_Data+0x1ac>)
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a46a:	4629      	mov	r1, r5
 801a46c:	4620      	mov	r0, r4
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801a46e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a472:	f7f3 ffe1 	bl	800e438 <Calculate_PPFD_PPL>
 801a476:	4b44      	ldr	r3, [pc, #272]	; (801a588 <Calculate_SD_Data+0x1b0>)
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801a478:	4629      	mov	r1, r5
 801a47a:	4620      	mov	r0, r4
 801a47c:	2200      	movs	r2, #0
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a47e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801a482:	f7f4 f845 	bl	800e510 <Calculate_PPFD_PPL_Range>
 801a486:	4b41      	ldr	r3, [pc, #260]	; (801a58c <Calculate_SD_Data+0x1b4>)
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801a488:	4629      	mov	r1, r5
 801a48a:	4620      	mov	r0, r4
 801a48c:	2201      	movs	r2, #1
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801a48e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801a492:	f7f4 f83d 	bl	800e510 <Calculate_PPFD_PPL_Range>
 801a496:	4b3e      	ldr	r3, [pc, #248]	; (801a590 <Calculate_SD_Data+0x1b8>)
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801a498:	4629      	mov	r1, r5
 801a49a:	4620      	mov	r0, r4
 801a49c:	2202      	movs	r2, #2
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801a49e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801a4a2:	f7f4 f835 	bl	800e510 <Calculate_PPFD_PPL_Range>
 801a4a6:	4b3b      	ldr	r3, [pc, #236]	; (801a594 <Calculate_SD_Data+0x1bc>)
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801a4a8:	4629      	mov	r1, r5
 801a4aa:	4620      	mov	r0, r4
 801a4ac:	2203      	movs	r2, #3
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801a4ae:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801a4b2:	f7f4 f82d 	bl	800e510 <Calculate_PPFD_PPL_Range>
 801a4b6:	4b38      	ldr	r3, [pc, #224]	; (801a598 <Calculate_SD_Data+0x1c0>)
 801a4b8:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.3;
 801a4bc:	a31e      	add	r3, pc, #120	; (adr r3, 801a538 <Calculate_SD_Data+0x160>)
 801a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a4c2:	ed9f 0a36 	vldr	s0, [pc, #216]	; 801a59c <Calculate_SD_Data+0x1c4>
 801a4c6:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a4ca:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.3;
 801a4cc:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a4d0:	f7f9 f8a0 	bl	8013614 <GUI_Bar_Measure>
	E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	4932      	ldr	r1, [pc, #200]	; (801a5a0 <Calculate_SD_Data+0x1c8>)
 801a4d8:	f7f3 ff80 	bl	800e3dc <Calculate_EL_Night>
 801a4dc:	4b31      	ldr	r3, [pc, #196]	; (801a5a4 <Calculate_SD_Data+0x1cc>)
 801a4de:	eef0 0a40 	vmov.f32	s1, s0
 801a4e2:	ed83 0a00 	vstr	s0, [r3]
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801a4e6:	ed97 0a00 	vldr	s0, [r7]
 801a4ea:	f7f3 ff97 	bl	800e41c <Calculate_SP>
 801a4ee:	4b2e      	ldr	r3, [pc, #184]	; (801a5a8 <Calculate_SD_Data+0x1d0>)
	
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801a4f0:	492e      	ldr	r1, [pc, #184]	; (801a5ac <Calculate_SD_Data+0x1d4>)
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801a4f2:	ed83 0a00 	vstr	s0, [r3]
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801a4f6:	4620      	mov	r0, r4
 801a4f8:	f7f4 f894 	bl	800e624 <Calculate_ELr>
 801a4fc:	4b2c      	ldr	r3, [pc, #176]	; (801a5b0 <Calculate_SD_Data+0x1d8>)
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801a4fe:	492d      	ldr	r1, [pc, #180]	; (801a5b4 <Calculate_SD_Data+0x1dc>)
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801a500:	ed83 0a00 	vstr	s0, [r3]
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801a504:	4620      	mov	r0, r4
 801a506:	f7f4 f873 	bl	800e5f0 <Calculate_ELb>
 801a50a:	4b2b      	ldr	r3, [pc, #172]	; (801a5b8 <Calculate_SD_Data+0x1e0>)
 801a50c:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.4;
 801a510:	a30b      	add	r3, pc, #44	; (adr r3, 801a540 <Calculate_SD_Data+0x168>)
 801a512:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a516:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801a5bc <Calculate_SD_Data+0x1e4>
	SDWr_Status_bar = 0.4;
 801a51a:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a51e:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a522:	2055      	movs	r0, #85	; 0x55
}
 801a524:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a528:	f7f9 b874 	b.w	8013614 <GUI_Bar_Measure>
 801a52c:	f3af 8000 	nop.w
 801a530:	9999999a 	.word	0x9999999a
 801a534:	3fb99999 	.word	0x3fb99999
 801a538:	33333333 	.word	0x33333333
 801a53c:	3fd33333 	.word	0x3fd33333
 801a540:	9999999a 	.word	0x9999999a
 801a544:	3fd99999 	.word	0x3fd99999
 801a548:	2000c53c 	.word	0x2000c53c
 801a54c:	20009760 	.word	0x20009760
 801a550:	20052940 	.word	0x20052940
 801a554:	00000000 	.word	0x00000000
 801a558:	2008f522 	.word	0x2008f522
 801a55c:	2008d514 	.word	0x2008d514
 801a560:	2008a514 	.word	0x2008a514
 801a564:	2008f540 	.word	0x2008f540
 801a568:	20090ab9 	.word	0x20090ab9
 801a56c:	20005704 	.word	0x20005704
 801a570:	20095ca0 	.word	0x20095ca0
 801a574:	20054940 	.word	0x20054940
 801a578:	3dcccccd 	.word	0x3dcccccd
 801a57c:	20090ab6 	.word	0x20090ab6
 801a580:	20054948 	.word	0x20054948
 801a584:	20095718 	.word	0x20095718
 801a588:	20095720 	.word	0x20095720
 801a58c:	20095804 	.word	0x20095804
 801a590:	20095b88 	.word	0x20095b88
 801a594:	20095a3c 	.word	0x20095a3c
 801a598:	2009571c 	.word	0x2009571c
 801a59c:	3e99999a 	.word	0x3e99999a
 801a5a0:	20053940 	.word	0x20053940
 801a5a4:	2009570c 	.word	0x2009570c
 801a5a8:	20095800 	.word	0x20095800
 801a5ac:	2000ad38 	.word	0x2000ad38
 801a5b0:	20095c9c 	.word	0x20095c9c
 801a5b4:	20009d38 	.word	0x20009d38
 801a5b8:	20095c98 	.word	0x20095c98
 801a5bc:	3ecccccd 	.word	0x3ecccccd

0801a5c0 <SD_Witer>:



uint8_t mount = 0;
void SD_Witer(uint16_t file_cnt, uint8_t Language_status, uint8_t Memory_Data_satus, uint8_t Mode_EL, uint8_t CRICQS_done)
{
 801a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5c4:	461f      	mov	r7, r3
	
	char digit_buff[3];
	char source_type[4];
	char measure_buff[12];

	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801a5c6:	4bb8      	ldr	r3, [pc, #736]	; (801a8a8 <SD_Witer+0x2e8>)
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	2b01      	cmp	r3, #1
{
 801a5cc:	b087      	sub	sp, #28
 801a5ce:	4605      	mov	r5, r0
 801a5d0:	460c      	mov	r4, r1
 801a5d2:	4690      	mov	r8, r2
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801a5d4:	f000 85fe 	beq.w	801b1d4 <SD_Witer+0xc14>
 801a5d8:	2b02      	cmp	r3, #2
 801a5da:	f000 85fe 	beq.w	801b1da <SD_Witer+0xc1a>
 801a5de:	2b04      	cmp	r3, #4
 801a5e0:	f000 85fe 	beq.w	801b1e0 <SD_Witer+0xc20>
 801a5e4:	2b08      	cmp	r3, #8
 801a5e6:	f000 85fe 	beq.w	801b1e6 <SD_Witer+0xc26>
 801a5ea:	2b10      	cmp	r3, #16
 801a5ec:	f000 85fe 	beq.w	801b1ec <SD_Witer+0xc2c>
 801a5f0:	4aae      	ldr	r2, [pc, #696]	; (801a8ac <SD_Witer+0x2ec>)
 801a5f2:	49af      	ldr	r1, [pc, #700]	; (801a8b0 <SD_Witer+0x2f0>)
 801a5f4:	2b20      	cmp	r3, #32
 801a5f6:	bf18      	it	ne
 801a5f8:	4611      	movne	r1, r2
 801a5fa:	a802      	add	r0, sp, #8
 801a5fc:	f006 f849 	bl	8020692 <strcpy>
	
	memset(measure_buff, 0, 12);
 801a600:	2300      	movs	r3, #0
	
		sprintf(digit_buff, "%.3d", file_cnt );
 801a602:	462a      	mov	r2, r5
 801a604:	49ab      	ldr	r1, [pc, #684]	; (801a8b4 <SD_Witer+0x2f4>)
	memset(measure_buff, 0, 12);
 801a606:	9303      	str	r3, [sp, #12]
		sprintf(digit_buff, "%.3d", file_cnt );
 801a608:	a801      	add	r0, sp, #4
	memset(measure_buff, 0, 12);
 801a60a:	9304      	str	r3, [sp, #16]
 801a60c:	9305      	str	r3, [sp, #20]
		sprintf(digit_buff, "%.3d", file_cnt );
 801a60e:	f005 ffff 	bl	8020610 <sprintf>
		strcat(buffer_sd, digit_buff);
 801a612:	a901      	add	r1, sp, #4
 801a614:	48a8      	ldr	r0, [pc, #672]	; (801a8b8 <SD_Witer+0x2f8>)
		strcat(buffer_sd, ".txt");

		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801a616:	4da9      	ldr	r5, [pc, #676]	; (801a8bc <SD_Witer+0x2fc>)
 801a618:	4ea7      	ldr	r6, [pc, #668]	; (801a8b8 <SD_Witer+0x2f8>)
		strcat(buffer_sd, digit_buff);
 801a61a:	f006 f81d 	bl	8020658 <strcat>
		strcat(buffer_sd, ".txt");
 801a61e:	49a8      	ldr	r1, [pc, #672]	; (801a8c0 <SD_Witer+0x300>)
 801a620:	48a5      	ldr	r0, [pc, #660]	; (801a8b8 <SD_Witer+0x2f8>)
 801a622:	f006 f819 	bl	8020658 <strcat>
		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801a626:	2201      	movs	r2, #1
 801a628:	49a6      	ldr	r1, [pc, #664]	; (801a8c4 <SD_Witer+0x304>)
 801a62a:	48a7      	ldr	r0, [pc, #668]	; (801a8c8 <SD_Witer+0x308>)
 801a62c:	f7ef f8f6 	bl	800981c <f_mount>
 801a630:	7028      	strb	r0, [r5, #0]
       if (res != FR_OK)
 801a632:	2800      	cmp	r0, #0
 801a634:	f040 85b1 	bne.w	801b19a <SD_Witer+0xbda>
        {
                //printf("Ошибка монтирования диска %d\r\n", result);
        }
			else
				{
				res = f_open(&MyFile, buffer_sd, FA_CREATE_ALWAYS | FA_WRITE);
 801a638:	220a      	movs	r2, #10
 801a63a:	4631      	mov	r1, r6
 801a63c:	48a3      	ldr	r0, [pc, #652]	; (801a8cc <SD_Witer+0x30c>)
 801a63e:	f7ef f921 	bl	8009884 <f_open>
 801a642:	7028      	strb	r0, [r5, #0]
				if (res == FR_OK)
 801a644:	2800      	cmp	r0, #0
 801a646:	f040 85a8 	bne.w	801b19a <SD_Witer+0xbda>
					{
							
							SDWr_Status_bar = 0.5;
 801a64a:	4ba1      	ldr	r3, [pc, #644]	; (801a8d0 <SD_Witer+0x310>)
 801a64c:	49a1      	ldr	r1, [pc, #644]	; (801a8d4 <SD_Witer+0x314>)
 801a64e:	2000      	movs	r0, #0
 801a650:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a654:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801a658:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a65c:	2055      	movs	r0, #85	; 0x55
 801a65e:	f7f8 ffd9 	bl	8013614 <GUI_Bar_Measure>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801a662:	4b9d      	ldr	r3, [pc, #628]	; (801a8d8 <SD_Witer+0x318>)
 801a664:	2c00      	cmp	r4, #0
 801a666:	f040 85c4 	bne.w	801b1f2 <SD_Witer+0xc32>
 801a66a:	499c      	ldr	r1, [pc, #624]	; (801a8dc <SD_Witer+0x31c>)
 801a66c:	2235      	movs	r2, #53	; 0x35
 801a66e:	4897      	ldr	r0, [pc, #604]	; (801a8cc <SD_Witer+0x30c>)
 801a670:	f7ef fa1e 	bl	8009ab0 <f_write>
							sprintf(measure_buff, "%.4f", SP_Measure);
 801a674:	4b9a      	ldr	r3, [pc, #616]	; (801a8e0 <SD_Witer+0x320>)
 801a676:	6818      	ldr	r0, [r3, #0]
 801a678:	f7e5 ff7e 	bl	8000578 <__aeabi_f2d>
 801a67c:	4602      	mov	r2, r0
 801a67e:	460b      	mov	r3, r1
 801a680:	a803      	add	r0, sp, #12
 801a682:	4998      	ldr	r1, [pc, #608]	; (801a8e4 <SD_Witer+0x324>)
 801a684:	f005 ffc4 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a688:	220c      	movs	r2, #12
 801a68a:	4b93      	ldr	r3, [pc, #588]	; (801a8d8 <SD_Witer+0x318>)
 801a68c:	488f      	ldr	r0, [pc, #572]	; (801a8cc <SD_Witer+0x30c>)
 801a68e:	eb0d 0102 	add.w	r1, sp, r2
 801a692:	f7ef fa0d 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
 801a696:	2300      	movs	r3, #0
 801a698:	9303      	str	r3, [sp, #12]
 801a69a:	9304      	str	r3, [sp, #16]
 801a69c:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801a69e:	4b8e      	ldr	r3, [pc, #568]	; (801a8d8 <SD_Witer+0x318>)
 801a6a0:	2c00      	cmp	r4, #0
 801a6a2:	f040 85aa 	bne.w	801b1fa <SD_Witer+0xc3a>
 801a6a6:	4990      	ldr	r1, [pc, #576]	; (801a8e8 <SD_Witer+0x328>)
 801a6a8:	2226      	movs	r2, #38	; 0x26
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801a6aa:	f8df 9264 	ldr.w	r9, [pc, #612]	; 801a910 <SD_Witer+0x350>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801a6ae:	4887      	ldr	r0, [pc, #540]	; (801a8cc <SD_Witer+0x30c>)
 801a6b0:	f7ef f9fe 	bl	8009ab0 <f_write>
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801a6b4:	f8b9 2000 	ldrh.w	r2, [r9]
 801a6b8:	498c      	ldr	r1, [pc, #560]	; (801a8ec <SD_Witer+0x32c>)
 801a6ba:	a803      	add	r0, sp, #12
 801a6bc:	f005 ffa8 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6c0:	220c      	movs	r2, #12
 801a6c2:	4b85      	ldr	r3, [pc, #532]	; (801a8d8 <SD_Witer+0x318>)
 801a6c4:	4881      	ldr	r0, [pc, #516]	; (801a8cc <SD_Witer+0x30c>)
 801a6c6:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801a6ca:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6cc:	f7ef f9f0 	bl	8009ab0 <f_write>
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801a6d0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801a6d4:	4985      	ldr	r1, [pc, #532]	; (801a8ec <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801a6d6:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801a6d8:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a6da:	9504      	str	r5, [sp, #16]
 801a6dc:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801a6de:	f005 ff97 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6e2:	220c      	movs	r2, #12
 801a6e4:	4b7c      	ldr	r3, [pc, #496]	; (801a8d8 <SD_Witer+0x318>)
 801a6e6:	4879      	ldr	r0, [pc, #484]	; (801a8cc <SD_Witer+0x30c>)
 801a6e8:	eb0d 0102 	add.w	r1, sp, r2
 801a6ec:	f7ef f9e0 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801a6f0:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801a6f4:	497d      	ldr	r1, [pc, #500]	; (801a8ec <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801a6f6:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801a6f8:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a6fa:	9504      	str	r5, [sp, #16]
 801a6fc:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801a6fe:	f005 ff87 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a702:	220c      	movs	r2, #12
 801a704:	4b74      	ldr	r3, [pc, #464]	; (801a8d8 <SD_Witer+0x318>)
 801a706:	4871      	ldr	r0, [pc, #452]	; (801a8cc <SD_Witer+0x30c>)
 801a708:	eb0d 0102 	add.w	r1, sp, r2
 801a70c:	f7ef f9d0 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
 801a710:	9503      	str	r5, [sp, #12]
 801a712:	9504      	str	r5, [sp, #16]
 801a714:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801a716:	4b70      	ldr	r3, [pc, #448]	; (801a8d8 <SD_Witer+0x318>)
 801a718:	2c00      	cmp	r4, #0
 801a71a:	f040 8572 	bne.w	801b202 <SD_Witer+0xc42>
 801a71e:	4974      	ldr	r1, [pc, #464]	; (801a8f0 <SD_Witer+0x330>)
 801a720:	222e      	movs	r2, #46	; 0x2e
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801a722:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 801a914 <SD_Witer+0x354>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801a726:	4869      	ldr	r0, [pc, #420]	; (801a8cc <SD_Witer+0x30c>)
 801a728:	f7ef f9c2 	bl	8009ab0 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801a72c:	f8d9 0000 	ldr.w	r0, [r9]
 801a730:	f7e5 ff22 	bl	8000578 <__aeabi_f2d>
 801a734:	4602      	mov	r2, r0
 801a736:	460b      	mov	r3, r1
 801a738:	a803      	add	r0, sp, #12
 801a73a:	496e      	ldr	r1, [pc, #440]	; (801a8f4 <SD_Witer+0x334>)
 801a73c:	f005 ff68 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a740:	220c      	movs	r2, #12
 801a742:	4b65      	ldr	r3, [pc, #404]	; (801a8d8 <SD_Witer+0x318>)
 801a744:	4861      	ldr	r0, [pc, #388]	; (801a8cc <SD_Witer+0x30c>)
 801a746:	eb0d 0102 	add.w	r1, sp, r2
 801a74a:	f7ef f9b1 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
 801a74e:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801a750:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801a754:	9503      	str	r5, [sp, #12]
 801a756:	9504      	str	r5, [sp, #16]
 801a758:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801a75a:	f7e5 ff0d 	bl	8000578 <__aeabi_f2d>
 801a75e:	4602      	mov	r2, r0
 801a760:	460b      	mov	r3, r1
 801a762:	a803      	add	r0, sp, #12
 801a764:	495f      	ldr	r1, [pc, #380]	; (801a8e4 <SD_Witer+0x324>)
 801a766:	f005 ff53 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a76a:	220c      	movs	r2, #12
 801a76c:	4b5a      	ldr	r3, [pc, #360]	; (801a8d8 <SD_Witer+0x318>)
 801a76e:	4857      	ldr	r0, [pc, #348]	; (801a8cc <SD_Witer+0x30c>)
 801a770:	eb0d 0102 	add.w	r1, sp, r2
 801a774:	f7ef f99c 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
 801a778:	9503      	str	r5, [sp, #12]
 801a77a:	9504      	str	r5, [sp, #16]
 801a77c:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801a77e:	4b56      	ldr	r3, [pc, #344]	; (801a8d8 <SD_Witer+0x318>)
 801a780:	2c00      	cmp	r4, #0
 801a782:	f040 8542 	bne.w	801b20a <SD_Witer+0xc4a>
 801a786:	495c      	ldr	r1, [pc, #368]	; (801a8f8 <SD_Witer+0x338>)
 801a788:	2230      	movs	r2, #48	; 0x30
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801a78a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801a918 <SD_Witer+0x358>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801a78e:	484f      	ldr	r0, [pc, #316]	; (801a8cc <SD_Witer+0x30c>)
 801a790:	f7ef f98e 	bl	8009ab0 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801a794:	f8d9 0000 	ldr.w	r0, [r9]
 801a798:	f7e5 feee 	bl	8000578 <__aeabi_f2d>
 801a79c:	4602      	mov	r2, r0
 801a79e:	460b      	mov	r3, r1
 801a7a0:	a803      	add	r0, sp, #12
 801a7a2:	4954      	ldr	r1, [pc, #336]	; (801a8f4 <SD_Witer+0x334>)
 801a7a4:	f005 ff34 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a7a8:	220c      	movs	r2, #12
 801a7aa:	4b4b      	ldr	r3, [pc, #300]	; (801a8d8 <SD_Witer+0x318>)
 801a7ac:	4847      	ldr	r0, [pc, #284]	; (801a8cc <SD_Witer+0x30c>)
 801a7ae:	eb0d 0102 	add.w	r1, sp, r2
 801a7b2:	f7ef f97d 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
 801a7b6:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801a7b8:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801a7bc:	9503      	str	r5, [sp, #12]
 801a7be:	9504      	str	r5, [sp, #16]
 801a7c0:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801a7c2:	f7e5 fed9 	bl	8000578 <__aeabi_f2d>
 801a7c6:	4602      	mov	r2, r0
 801a7c8:	460b      	mov	r3, r1
 801a7ca:	a803      	add	r0, sp, #12
 801a7cc:	4945      	ldr	r1, [pc, #276]	; (801a8e4 <SD_Witer+0x324>)
 801a7ce:	f005 ff1f 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a7d2:	220c      	movs	r2, #12
 801a7d4:	4b40      	ldr	r3, [pc, #256]	; (801a8d8 <SD_Witer+0x318>)
 801a7d6:	483d      	ldr	r0, [pc, #244]	; (801a8cc <SD_Witer+0x30c>)
 801a7d8:	eb0d 0102 	add.w	r1, sp, r2
 801a7dc:	f7ef f968 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
 801a7e0:	9503      	str	r5, [sp, #12]
 801a7e2:	9504      	str	r5, [sp, #16]
 801a7e4:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801a7e6:	4b3c      	ldr	r3, [pc, #240]	; (801a8d8 <SD_Witer+0x318>)
 801a7e8:	2c00      	cmp	r4, #0
 801a7ea:	f040 8512 	bne.w	801b212 <SD_Witer+0xc52>
 801a7ee:	4943      	ldr	r1, [pc, #268]	; (801a8fc <SD_Witer+0x33c>)
 801a7f0:	220e      	movs	r2, #14
 801a7f2:	4836      	ldr	r0, [pc, #216]	; (801a8cc <SD_Witer+0x30c>)
 801a7f4:	f7ef f95c 	bl	8009ab0 <f_write>
							if(Tc_Measure == 0xFFFF){f_write(&MyFile, "NAN", 3, &byteswritten);}
 801a7f8:	4b41      	ldr	r3, [pc, #260]	; (801a900 <SD_Witer+0x340>)
 801a7fa:	881a      	ldrh	r2, [r3, #0]
 801a7fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a800:	429a      	cmp	r2, r3
 801a802:	f040 8537 	bne.w	801b274 <SD_Witer+0xcb4>
 801a806:	4b34      	ldr	r3, [pc, #208]	; (801a8d8 <SD_Witer+0x318>)
 801a808:	4928      	ldr	r1, [pc, #160]	; (801a8ac <SD_Witer+0x2ec>)
 801a80a:	4830      	ldr	r0, [pc, #192]	; (801a8cc <SD_Witer+0x30c>)
 801a80c:	2203      	movs	r2, #3
 801a80e:	f7ef f94f 	bl	8009ab0 <f_write>
										sprintf(measure_buff, "%.d", Tc_Measure);
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
										memset(measure_buff, 0, 12);
								}
						
								SDWr_Status_bar = 0.7;
 801a812:	a123      	add	r1, pc, #140	; (adr r1, 801a8a0 <SD_Witer+0x2e0>)
 801a814:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a818:	4b2d      	ldr	r3, [pc, #180]	; (801a8d0 <SD_Witer+0x310>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a81a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801a904 <SD_Witer+0x344>
								SDWr_Status_bar = 0.7;
 801a81e:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a822:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a826:	2055      	movs	r0, #85	; 0x55
 801a828:	f7f8 fef4 	bl	8013614 <GUI_Bar_Measure>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801a82c:	4b2a      	ldr	r3, [pc, #168]	; (801a8d8 <SD_Witer+0x318>)
 801a82e:	2c00      	cmp	r4, #0
 801a830:	f040 8531 	bne.w	801b296 <SD_Witer+0xcd6>
 801a834:	4934      	ldr	r1, [pc, #208]	; (801a908 <SD_Witer+0x348>)
 801a836:	224a      	movs	r2, #74	; 0x4a
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801a838:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 801a91c <SD_Witer+0x35c>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801a83c:	4823      	ldr	r0, [pc, #140]	; (801a8cc <SD_Witer+0x30c>)
 801a83e:	f7ef f937 	bl	8009ab0 <f_write>
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801a842:	f9b9 2000 	ldrsh.w	r2, [r9]
 801a846:	4931      	ldr	r1, [pc, #196]	; (801a90c <SD_Witer+0x34c>)
 801a848:	a803      	add	r0, sp, #12
 801a84a:	f005 fee1 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a84e:	220c      	movs	r2, #12
 801a850:	4b21      	ldr	r3, [pc, #132]	; (801a8d8 <SD_Witer+0x318>)
 801a852:	481e      	ldr	r0, [pc, #120]	; (801a8cc <SD_Witer+0x30c>)
 801a854:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801a858:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a85a:	f7ef f929 	bl	8009ab0 <f_write>
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801a85e:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 801a862:	492a      	ldr	r1, [pc, #168]	; (801a90c <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801a864:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801a866:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a868:	9504      	str	r5, [sp, #16]
 801a86a:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801a86c:	f005 fed0 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a870:	220c      	movs	r2, #12
 801a872:	4b19      	ldr	r3, [pc, #100]	; (801a8d8 <SD_Witer+0x318>)
 801a874:	4815      	ldr	r0, [pc, #84]	; (801a8cc <SD_Witer+0x30c>)
 801a876:	eb0d 0102 	add.w	r1, sp, r2
 801a87a:	f7ef f919 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801a87e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801a882:	4922      	ldr	r1, [pc, #136]	; (801a90c <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801a884:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801a886:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a888:	9504      	str	r5, [sp, #16]
 801a88a:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801a88c:	f005 fec0 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a890:	220c      	movs	r2, #12
 801a892:	4b11      	ldr	r3, [pc, #68]	; (801a8d8 <SD_Witer+0x318>)
 801a894:	480d      	ldr	r0, [pc, #52]	; (801a8cc <SD_Witer+0x30c>)
 801a896:	eb0d 0102 	add.w	r1, sp, r2
 801a89a:	f7ef f909 	bl	8009ab0 <f_write>
 801a89e:	e03f      	b.n	801a920 <SD_Witer+0x360>
 801a8a0:	66666666 	.word	0x66666666
 801a8a4:	3fe66666 	.word	0x3fe66666
 801a8a8:	20090ab9 	.word	0x20090ab9
 801a8ac:	08032113 	.word	0x08032113
 801a8b0:	08032117 	.word	0x08032117
 801a8b4:	0803211b 	.word	0x0803211b
 801a8b8:	20092634 	.word	0x20092634
 801a8bc:	20093680 	.word	0x20093680
 801a8c0:	08032120 	.word	0x08032120
 801a8c4:	20093685 	.word	0x20093685
 801a8c8:	20091600 	.word	0x20091600
 801a8cc:	20092650 	.word	0x20092650
 801a8d0:	20009760 	.word	0x20009760
 801a8d4:	3fe00000 	.word	0x3fe00000
 801a8d8:	200915f8 	.word	0x200915f8
 801a8dc:	20000929 	.word	0x20000929
 801a8e0:	20095800 	.word	0x20095800
 801a8e4:	080320ef 	.word	0x080320ef
 801a8e8:	20000442 	.word	0x20000442
 801a8ec:	08032146 	.word	0x08032146
 801a8f0:	200004be 	.word	0x200004be
 801a8f4:	08032125 	.word	0x08032125
 801a8f8:	2000047c 	.word	0x2000047c
 801a8fc:	20000250 	.word	0x20000250
 801a900:	20054940 	.word	0x20054940
 801a904:	3f333333 	.word	0x3f333333
 801a908:	20000614 	.word	0x20000614
 801a90c:	0803212f 	.word	0x0803212f
 801a910:	2008f522 	.word	0x2008f522
 801a914:	2008f540 	.word	0x2008f540
 801a918:	2008f538 	.word	0x2008f538
 801a91c:	2008f51c 	.word	0x2008f51c
							memset(measure_buff, 0, 12);
 801a920:	9503      	str	r5, [sp, #12]
 801a922:	9504      	str	r5, [sp, #16]
 801a924:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801a926:	4bb4      	ldr	r3, [pc, #720]	; (801abf8 <SD_Witer+0x638>)
 801a928:	2c00      	cmp	r4, #0
 801a92a:	f040 84b8 	bne.w	801b29e <SD_Witer+0xcde>
 801a92e:	49b3      	ldr	r1, [pc, #716]	; (801abfc <SD_Witer+0x63c>)
 801a930:	222a      	movs	r2, #42	; 0x2a
 801a932:	48b3      	ldr	r0, [pc, #716]	; (801ac00 <SD_Witer+0x640>)
 801a934:	f7ef f8bc 	bl	8009ab0 <f_write>
							f_write(&MyFile, &source_type, sizeof(source_type), &byteswritten);//SourceType
 801a938:	4baf      	ldr	r3, [pc, #700]	; (801abf8 <SD_Witer+0x638>)
 801a93a:	48b1      	ldr	r0, [pc, #708]	; (801ac00 <SD_Witer+0x640>)
 801a93c:	2204      	movs	r2, #4
 801a93e:	a902      	add	r1, sp, #8
 801a940:	f7ef f8b6 	bl	8009ab0 <f_write>
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801a944:	4bac      	ldr	r3, [pc, #688]	; (801abf8 <SD_Witer+0x638>)
 801a946:	2c00      	cmp	r4, #0
 801a948:	f040 84ad 	bne.w	801b2a6 <SD_Witer+0xce6>
 801a94c:	49ad      	ldr	r1, [pc, #692]	; (801ac04 <SD_Witer+0x644>)
 801a94e:	2235      	movs	r2, #53	; 0x35
 801a950:	48ab      	ldr	r0, [pc, #684]	; (801ac00 <SD_Witer+0x640>)
 801a952:	f7ef f8ad 	bl	8009ab0 <f_write>
							sprintf(measure_buff, "%d\t", lambda_d_Measure); //Lambda D
 801a956:	4bac      	ldr	r3, [pc, #688]	; (801ac08 <SD_Witer+0x648>)
 801a958:	49ac      	ldr	r1, [pc, #688]	; (801ac0c <SD_Witer+0x64c>)
 801a95a:	881a      	ldrh	r2, [r3, #0]
 801a95c:	a803      	add	r0, sp, #12
 801a95e:	f005 fe57 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a962:	220c      	movs	r2, #12
 801a964:	4ba4      	ldr	r3, [pc, #656]	; (801abf8 <SD_Witer+0x638>)
 801a966:	48a6      	ldr	r0, [pc, #664]	; (801ac00 <SD_Witer+0x640>)
 801a968:	eb0d 0102 	add.w	r1, sp, r2
 801a96c:	f7ef f8a0 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
 801a970:	2300      	movs	r3, #0
 801a972:	9303      	str	r3, [sp, #12]
 801a974:	9304      	str	r3, [sp, #16]
 801a976:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801a978:	4b9f      	ldr	r3, [pc, #636]	; (801abf8 <SD_Witer+0x638>)
 801a97a:	2c00      	cmp	r4, #0
 801a97c:	f040 8497 	bne.w	801b2ae <SD_Witer+0xcee>
 801a980:	49a3      	ldr	r1, [pc, #652]	; (801ac10 <SD_Witer+0x650>)
 801a982:	223b      	movs	r2, #59	; 0x3b
 801a984:	489e      	ldr	r0, [pc, #632]	; (801ac00 <SD_Witer+0x640>)
 801a986:	f7ef f893 	bl	8009ab0 <f_write>
							sprintf(measure_buff, "%d\t", lambda_c_Measure); //Lambda C
 801a98a:	4ba2      	ldr	r3, [pc, #648]	; (801ac14 <SD_Witer+0x654>)
 801a98c:	499f      	ldr	r1, [pc, #636]	; (801ac0c <SD_Witer+0x64c>)
 801a98e:	881a      	ldrh	r2, [r3, #0]
 801a990:	a803      	add	r0, sp, #12
 801a992:	f005 fe3d 	bl	8020610 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a996:	220c      	movs	r2, #12
 801a998:	4b97      	ldr	r3, [pc, #604]	; (801abf8 <SD_Witer+0x638>)
 801a99a:	4899      	ldr	r0, [pc, #612]	; (801ac00 <SD_Witer+0x640>)
 801a99c:	eb0d 0102 	add.w	r1, sp, r2
 801a9a0:	f7ef f886 	bl	8009ab0 <f_write>
							memset(measure_buff, 0, 12);
 801a9a4:	2300      	movs	r3, #0
						
							if(Memory_Data_satus == 0x01)
 801a9a6:	f1b8 0f01 	cmp.w	r8, #1
							memset(measure_buff, 0, 12);
 801a9aa:	9303      	str	r3, [sp, #12]
 801a9ac:	9304      	str	r3, [sp, #16]
 801a9ae:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a9b0:	4b91      	ldr	r3, [pc, #580]	; (801abf8 <SD_Witer+0x638>)
							if(Memory_Data_satus == 0x01)
 801a9b2:	f040 8484 	bne.w	801b2be <SD_Witer+0xcfe>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a9b6:	2c00      	cmp	r4, #0
 801a9b8:	f040 847d 	bne.w	801b2b6 <SD_Witer+0xcf6>
 801a9bc:	4996      	ldr	r1, [pc, #600]	; (801ac18 <SD_Witer+0x658>)
 801a9be:	2224      	movs	r2, #36	; 0x24
 801a9c0:	488f      	ldr	r0, [pc, #572]	; (801ac00 <SD_Witer+0x640>)
 801a9c2:	f7ef f875 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%d\t", delta_Eab_Measure); //Delta E
 801a9c6:	4b95      	ldr	r3, [pc, #596]	; (801ac1c <SD_Witer+0x65c>)
 801a9c8:	4990      	ldr	r1, [pc, #576]	; (801ac0c <SD_Witer+0x64c>)
 801a9ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a9ce:	a803      	add	r0, sp, #12
 801a9d0:	f005 fe1e 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9d4:	220c      	movs	r2, #12
 801a9d6:	4b88      	ldr	r3, [pc, #544]	; (801abf8 <SD_Witer+0x638>)
 801a9d8:	4889      	ldr	r0, [pc, #548]	; (801ac00 <SD_Witer+0x640>)
 801a9da:	eb0d 0102 	add.w	r1, sp, r2
 801a9de:	f7ef f867 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	9303      	str	r3, [sp, #12]
 801a9e6:	9304      	str	r3, [sp, #16]
 801a9e8:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
								f_write(&MyFile, "NAN", 3, &byteswritten);
							}
							
							SDWr_Status_bar = 0.8;
 801a9ea:	a181      	add	r1, pc, #516	; (adr r1, 801abf0 <SD_Witer+0x630>)
 801a9ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9f0:	4b8b      	ldr	r3, [pc, #556]	; (801ac20 <SD_Witer+0x660>)
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a9f2:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801ac24 <SD_Witer+0x664>
 801a9f6:	f8df 8278 	ldr.w	r8, [pc, #632]	; 801ac70 <SD_Witer+0x6b0>
							SDWr_Status_bar = 0.8;
 801a9fa:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a9fe:	f44f 718c 	mov.w	r1, #280	; 0x118
 801aa02:	2055      	movs	r0, #85	; 0x55
 801aa04:	f7f8 fe06 	bl	8013614 <GUI_Bar_Measure>
							if(Mode_EL == 0x01) //E mode
 801aa08:	2f01      	cmp	r7, #1
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801aa0a:	4b7b      	ldr	r3, [pc, #492]	; (801abf8 <SD_Witer+0x638>)
							if(Mode_EL == 0x01) //E mode
 801aa0c:	f040 847d 	bne.w	801b30a <SD_Witer+0xd4a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801aa10:	2c00      	cmp	r4, #0
 801aa12:	f040 8465 	bne.w	801b2e0 <SD_Witer+0xd20>
 801aa16:	4984      	ldr	r1, [pc, #528]	; (801ac28 <SD_Witer+0x668>)
 801aa18:	2263      	movs	r2, #99	; 0x63
 801aa1a:	4879      	ldr	r0, [pc, #484]	; (801ac00 <SD_Witer+0x640>)
 801aa1c:	4f83      	ldr	r7, [pc, #524]	; (801ac2c <SD_Witer+0x66c>)
 801aa1e:	f8df b254 	ldr.w	fp, [pc, #596]	; 801ac74 <SD_Witer+0x6b4>
								
								for(uint16_t i=0; i < 1024; i++)
								{
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa22:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801abf8 <SD_Witer+0x638>
 801aa26:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801ac00 <SD_Witer+0x640>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801aa2a:	f7ef f841 	bl	8009ab0 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
 801aa2e:	f857 0b04 	ldr.w	r0, [r7], #4
 801aa32:	f7e5 fda1 	bl	8000578 <__aeabi_f2d>
 801aa36:	4602      	mov	r2, r0
 801aa38:	460b      	mov	r3, r1
 801aa3a:	a803      	add	r0, sp, #12
 801aa3c:	497c      	ldr	r1, [pc, #496]	; (801ac30 <SD_Witer+0x670>)
 801aa3e:	f005 fde7 	bl	8020610 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa42:	220c      	movs	r2, #12
 801aa44:	4653      	mov	r3, sl
 801aa46:	eb0d 0102 	add.w	r1, sp, r2
 801aa4a:	4648      	mov	r0, r9
 801aa4c:	f7ef f830 	bl	8009ab0 <f_write>
									memset(measure_buff, 0, 12);
 801aa50:	2500      	movs	r5, #0
									
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801aa52:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801aa56:	9503      	str	r5, [sp, #12]
 801aa58:	9504      	str	r5, [sp, #16]
 801aa5a:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801aa5c:	f7e5 fd8c 	bl	8000578 <__aeabi_f2d>
 801aa60:	4602      	mov	r2, r0
 801aa62:	460b      	mov	r3, r1
 801aa64:	a803      	add	r0, sp, #12
 801aa66:	4973      	ldr	r1, [pc, #460]	; (801ac34 <SD_Witer+0x674>)
 801aa68:	f005 fdd2 	bl	8020610 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa6c:	220c      	movs	r2, #12
 801aa6e:	4653      	mov	r3, sl
 801aa70:	eb0d 0102 	add.w	r1, sp, r2
 801aa74:	4648      	mov	r0, r9
 801aa76:	f7ef f81b 	bl	8009ab0 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801aa7a:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801aa7c:	9503      	str	r5, [sp, #12]
 801aa7e:	9504      	str	r5, [sp, #16]
 801aa80:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801aa82:	d1d4      	bne.n	801aa2e <SD_Witer+0x46e>
								}
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801aa84:	4b5c      	ldr	r3, [pc, #368]	; (801abf8 <SD_Witer+0x638>)
 801aa86:	2c00      	cmp	r4, #0
 801aa88:	f040 842e 	bne.w	801b2e8 <SD_Witer+0xd28>
 801aa8c:	496a      	ldr	r1, [pc, #424]	; (801ac38 <SD_Witer+0x678>)
 801aa8e:	2224      	movs	r2, #36	; 0x24
 801aa90:	485b      	ldr	r0, [pc, #364]	; (801ac00 <SD_Witer+0x640>)
 801aa92:	f7ef f80d 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f",  E_day); //Ee
 801aa96:	4b69      	ldr	r3, [pc, #420]	; (801ac3c <SD_Witer+0x67c>)
 801aa98:	6818      	ldr	r0, [r3, #0]
 801aa9a:	f7e5 fd6d 	bl	8000578 <__aeabi_f2d>
 801aa9e:	4602      	mov	r2, r0
 801aaa0:	460b      	mov	r3, r1
 801aaa2:	a803      	add	r0, sp, #12
 801aaa4:	4966      	ldr	r1, [pc, #408]	; (801ac40 <SD_Witer+0x680>)
 801aaa6:	f005 fdb3 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aaaa:	220c      	movs	r2, #12
 801aaac:	4b52      	ldr	r3, [pc, #328]	; (801abf8 <SD_Witer+0x638>)
 801aaae:	4854      	ldr	r0, [pc, #336]	; (801ac00 <SD_Witer+0x640>)
 801aab0:	eb0d 0102 	add.w	r1, sp, r2
 801aab4:	f7ee fffc 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801aab8:	2300      	movs	r3, #0
 801aaba:	9303      	str	r3, [sp, #12]
 801aabc:	9304      	str	r3, [sp, #16]
 801aabe:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801aac0:	4b4d      	ldr	r3, [pc, #308]	; (801abf8 <SD_Witer+0x638>)
 801aac2:	2c00      	cmp	r4, #0
 801aac4:	f040 8414 	bne.w	801b2f0 <SD_Witer+0xd30>
 801aac8:	495e      	ldr	r1, [pc, #376]	; (801ac44 <SD_Witer+0x684>)
 801aaca:	2221      	movs	r2, #33	; 0x21
 801aacc:	484c      	ldr	r0, [pc, #304]	; (801ac00 <SD_Witer+0x640>)
 801aace:	f7ee ffef 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.1f",  E_day_Wt); //Eu
 801aad2:	4b5d      	ldr	r3, [pc, #372]	; (801ac48 <SD_Witer+0x688>)
 801aad4:	6818      	ldr	r0, [r3, #0]
 801aad6:	f7e5 fd4f 	bl	8000578 <__aeabi_f2d>
 801aada:	4602      	mov	r2, r0
 801aadc:	460b      	mov	r3, r1
 801aade:	a803      	add	r0, sp, #12
 801aae0:	495a      	ldr	r1, [pc, #360]	; (801ac4c <SD_Witer+0x68c>)
 801aae2:	f005 fd95 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aae6:	220c      	movs	r2, #12
 801aae8:	4b43      	ldr	r3, [pc, #268]	; (801abf8 <SD_Witer+0x638>)
 801aaea:	4845      	ldr	r0, [pc, #276]	; (801ac00 <SD_Witer+0x640>)
 801aaec:	eb0d 0102 	add.w	r1, sp, r2
 801aaf0:	f7ee ffde 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	9303      	str	r3, [sp, #12]
 801aaf8:	9304      	str	r3, [sp, #16]
 801aafa:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801aafc:	4b3e      	ldr	r3, [pc, #248]	; (801abf8 <SD_Witer+0x638>)
 801aafe:	2c00      	cmp	r4, #0
 801ab00:	f040 83fa 	bne.w	801b2f8 <SD_Witer+0xd38>
 801ab04:	4952      	ldr	r1, [pc, #328]	; (801ac50 <SD_Witer+0x690>)
 801ab06:	2223      	movs	r2, #35	; 0x23
 801ab08:	483d      	ldr	r0, [pc, #244]	; (801ac00 <SD_Witer+0x640>)
 801ab0a:	f7ee ffd1 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPFD
 801ab0e:	4b51      	ldr	r3, [pc, #324]	; (801ac54 <SD_Witer+0x694>)
 801ab10:	6818      	ldr	r0, [r3, #0]
 801ab12:	f7e5 fd31 	bl	8000578 <__aeabi_f2d>
 801ab16:	4602      	mov	r2, r0
 801ab18:	460b      	mov	r3, r1
 801ab1a:	a803      	add	r0, sp, #12
 801ab1c:	4948      	ldr	r1, [pc, #288]	; (801ac40 <SD_Witer+0x680>)
 801ab1e:	f005 fd77 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab22:	220c      	movs	r2, #12
 801ab24:	4b34      	ldr	r3, [pc, #208]	; (801abf8 <SD_Witer+0x638>)
 801ab26:	4836      	ldr	r0, [pc, #216]	; (801ac00 <SD_Witer+0x640>)
 801ab28:	eb0d 0102 	add.w	r1, sp, r2
 801ab2c:	f7ee ffc0 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801ab30:	2300      	movs	r3, #0
 801ab32:	9303      	str	r3, [sp, #12]
 801ab34:	9304      	str	r3, [sp, #16]
 801ab36:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801ab38:	4b2f      	ldr	r3, [pc, #188]	; (801abf8 <SD_Witer+0x638>)
 801ab3a:	2c00      	cmp	r4, #0
 801ab3c:	f040 83df 	bne.w	801b2fe <SD_Witer+0xd3e>
 801ab40:	4945      	ldr	r1, [pc, #276]	; (801ac58 <SD_Witer+0x698>)
 801ab42:	2239      	movs	r2, #57	; 0x39
 801ab44:	482e      	ldr	r0, [pc, #184]	; (801ac00 <SD_Witer+0x640>)
 801ab46:	f7ee ffb3 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPFD B
 801ab4a:	4b44      	ldr	r3, [pc, #272]	; (801ac5c <SD_Witer+0x69c>)
 801ab4c:	6818      	ldr	r0, [r3, #0]
 801ab4e:	f7e5 fd13 	bl	8000578 <__aeabi_f2d>
 801ab52:	4602      	mov	r2, r0
 801ab54:	460b      	mov	r3, r1
 801ab56:	a803      	add	r0, sp, #12
 801ab58:	4941      	ldr	r1, [pc, #260]	; (801ac60 <SD_Witer+0x6a0>)
 801ab5a:	f005 fd59 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab5e:	220c      	movs	r2, #12
 801ab60:	eb0d 0102 	add.w	r1, sp, r2
 801ab64:	4b24      	ldr	r3, [pc, #144]	; (801abf8 <SD_Witer+0x638>)
 801ab66:	4826      	ldr	r0, [pc, #152]	; (801ac00 <SD_Witer+0x640>)
 801ab68:	f7ee ffa2 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801ab6c:	4b3d      	ldr	r3, [pc, #244]	; (801ac64 <SD_Witer+0x6a4>)
								memset(measure_buff, 0, 12);
 801ab6e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801ab70:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801ab72:	9503      	str	r5, [sp, #12]
 801ab74:	9504      	str	r5, [sp, #16]
 801ab76:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801ab78:	f7e5 fcfe 	bl	8000578 <__aeabi_f2d>
 801ab7c:	4602      	mov	r2, r0
 801ab7e:	460b      	mov	r3, r1
 801ab80:	a803      	add	r0, sp, #12
 801ab82:	4937      	ldr	r1, [pc, #220]	; (801ac60 <SD_Witer+0x6a0>)
 801ab84:	f005 fd44 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab88:	220c      	movs	r2, #12
 801ab8a:	eb0d 0102 	add.w	r1, sp, r2
 801ab8e:	4b1a      	ldr	r3, [pc, #104]	; (801abf8 <SD_Witer+0x638>)
 801ab90:	481b      	ldr	r0, [pc, #108]	; (801ac00 <SD_Witer+0x640>)
 801ab92:	f7ee ff8d 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801ab96:	4b34      	ldr	r3, [pc, #208]	; (801ac68 <SD_Witer+0x6a8>)
								memset(measure_buff, 0, 12);
 801ab98:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801ab9a:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801ab9c:	9504      	str	r5, [sp, #16]
 801ab9e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801aba0:	f7e5 fcea 	bl	8000578 <__aeabi_f2d>
 801aba4:	4602      	mov	r2, r0
 801aba6:	460b      	mov	r3, r1
 801aba8:	a803      	add	r0, sp, #12
 801abaa:	492d      	ldr	r1, [pc, #180]	; (801ac60 <SD_Witer+0x6a0>)
 801abac:	f005 fd30 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801abb0:	220c      	movs	r2, #12
 801abb2:	eb0d 0102 	add.w	r1, sp, r2
 801abb6:	4b10      	ldr	r3, [pc, #64]	; (801abf8 <SD_Witer+0x638>)
 801abb8:	4811      	ldr	r0, [pc, #68]	; (801ac00 <SD_Witer+0x640>)
 801abba:	f7ee ff79 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801abbe:	4b2b      	ldr	r3, [pc, #172]	; (801ac6c <SD_Witer+0x6ac>)
								memset(measure_buff, 0, 12);
 801abc0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801abc2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801abc4:	9504      	str	r5, [sp, #16]
 801abc6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801abc8:	f7e5 fcd6 	bl	8000578 <__aeabi_f2d>
 801abcc:	4602      	mov	r2, r0
 801abce:	460b      	mov	r3, r1
 801abd0:	a803      	add	r0, sp, #12
 801abd2:	4923      	ldr	r1, [pc, #140]	; (801ac60 <SD_Witer+0x6a0>)
 801abd4:	f005 fd1c 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801abd8:	220c      	movs	r2, #12
 801abda:	4b07      	ldr	r3, [pc, #28]	; (801abf8 <SD_Witer+0x638>)
 801abdc:	4808      	ldr	r0, [pc, #32]	; (801ac00 <SD_Witer+0x640>)
 801abde:	eb0d 0102 	add.w	r1, sp, r2
 801abe2:	f7ee ff65 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801abe6:	9503      	str	r5, [sp, #12]
 801abe8:	9504      	str	r5, [sp, #16]
 801abea:	9505      	str	r5, [sp, #20]
 801abec:	e044      	b.n	801ac78 <SD_Witer+0x6b8>
 801abee:	bf00      	nop
 801abf0:	9999999a 	.word	0x9999999a
 801abf4:	3fe99999 	.word	0x3fe99999
 801abf8:	200915f8 	.word	0x200915f8
 801abfc:	200008e1 	.word	0x200008e1
 801ac00:	20092650 	.word	0x20092650
 801ac04:	20000a09 	.word	0x20000a09
 801ac08:	20095b84 	.word	0x20095b84
 801ac0c:	08032146 	.word	0x08032146
 801ac10:	200009b4 	.word	0x200009b4
 801ac14:	200959bc 	.word	0x200959bc
 801ac18:	20000971 	.word	0x20000971
 801ac1c:	20090ab6 	.word	0x20090ab6
 801ac20:	20009760 	.word	0x20009760
 801ac24:	3f4ccccd 	.word	0x3f4ccccd
 801ac28:	20000569 	.word	0x20000569
 801ac2c:	2000c53c 	.word	0x2000c53c
 801ac30:	08032133 	.word	0x08032133
 801ac34:	08032138 	.word	0x08032138
 801ac38:	20000520 	.word	0x20000520
 801ac3c:	20095ca0 	.word	0x20095ca0
 801ac40:	080320ea 	.word	0x080320ea
 801ac44:	200005de 	.word	0x200005de
 801ac48:	20095718 	.word	0x20095718
 801ac4c:	080320e5 	.word	0x080320e5
 801ac50:	20000812 	.word	0x20000812
 801ac54:	20095720 	.word	0x20095720
 801ac58:	200007c6 	.word	0x200007c6
 801ac5c:	20095804 	.word	0x20095804
 801ac60:	0803213f 	.word	0x0803213f
 801ac64:	20095b88 	.word	0x20095b88
 801ac68:	20095a3c 	.word	0x20095a3c
 801ac6c:	2009571c 	.word	0x2009571c
 801ac70:	2000d53c 	.word	0x2000d53c
 801ac74:	20054948 	.word	0x20054948
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801ac78:	4baf      	ldr	r3, [pc, #700]	; (801af38 <SD_Witer+0x978>)
 801ac7a:	2c00      	cmp	r4, #0
 801ac7c:	f040 8342 	bne.w	801b304 <SD_Witer+0xd44>
 801ac80:	49ae      	ldr	r1, [pc, #696]	; (801af3c <SD_Witer+0x97c>)
 801ac82:	2213      	movs	r2, #19
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801ac84:	48ae      	ldr	r0, [pc, #696]	; (801af40 <SD_Witer+0x980>)
 801ac86:	f7ee ff13 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f\t", ELb_Measure); //Lb
 801ac8a:	4bae      	ldr	r3, [pc, #696]	; (801af44 <SD_Witer+0x984>)
 801ac8c:	6818      	ldr	r0, [r3, #0]
 801ac8e:	f7e5 fc73 	bl	8000578 <__aeabi_f2d>
 801ac92:	4602      	mov	r2, r0
 801ac94:	460b      	mov	r3, r1
 801ac96:	a803      	add	r0, sp, #12
 801ac98:	49ab      	ldr	r1, [pc, #684]	; (801af48 <SD_Witer+0x988>)
 801ac9a:	f005 fcb9 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac9e:	220c      	movs	r2, #12
 801aca0:	eb0d 0102 	add.w	r1, sp, r2
 801aca4:	4ba4      	ldr	r3, [pc, #656]	; (801af38 <SD_Witer+0x978>)
 801aca6:	48a6      	ldr	r0, [pc, #664]	; (801af40 <SD_Witer+0x980>)
 801aca8:	f7ee ff02 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);

								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801acac:	4ba7      	ldr	r3, [pc, #668]	; (801af4c <SD_Witer+0x98c>)
								memset(measure_buff, 0, 12);
 801acae:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801acb0:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801acb2:	9503      	str	r5, [sp, #12]
 801acb4:	9504      	str	r5, [sp, #16]
 801acb6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801acb8:	f7e5 fc5e 	bl	8000578 <__aeabi_f2d>
 801acbc:	4602      	mov	r2, r0
 801acbe:	460b      	mov	r3, r1
 801acc0:	a803      	add	r0, sp, #12
 801acc2:	49a3      	ldr	r1, [pc, #652]	; (801af50 <SD_Witer+0x990>)
 801acc4:	f005 fca4 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801acc8:	220c      	movs	r2, #12
 801acca:	eb0d 0102 	add.w	r1, sp, r2
 801acce:	4b9a      	ldr	r3, [pc, #616]	; (801af38 <SD_Witer+0x978>)
 801acd0:	489b      	ldr	r0, [pc, #620]	; (801af40 <SD_Witer+0x980>)
 801acd2:	f7ee feed 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								
								SDWr_Status_bar = 0.9;
 801acd6:	a196      	add	r1, pc, #600	; (adr r1, 801af30 <SD_Witer+0x970>)
 801acd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801acdc:	4b9d      	ldr	r3, [pc, #628]	; (801af54 <SD_Witer+0x994>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801acde:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801af58 <SD_Witer+0x998>
								memset(measure_buff, 0, 12);
 801ace2:	9503      	str	r5, [sp, #12]
								SDWr_Status_bar = 0.9;
 801ace4:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801ace8:	f44f 718c 	mov.w	r1, #280	; 0x118
 801acec:	2055      	movs	r0, #85	; 0x55
								memset(measure_buff, 0, 12);
 801acee:	9504      	str	r5, [sp, #16]
 801acf0:	9505      	str	r5, [sp, #20]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801acf2:	f7f8 fc8f 	bl	8013614 <GUI_Bar_Measure>
						
							}
							if(CRICQS_done == 0x01)
 801acf6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801acfa:	2b01      	cmp	r3, #1
 801acfc:	f040 824d 	bne.w	801b19a <SD_Witer+0xbda>
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801ad00:	4b8d      	ldr	r3, [pc, #564]	; (801af38 <SD_Witer+0x978>)
 801ad02:	2c00      	cmp	r4, #0
 801ad04:	f040 8407 	bne.w	801b516 <SD_Witer+0xf56>
 801ad08:	4994      	ldr	r1, [pc, #592]	; (801af5c <SD_Witer+0x99c>)
 801ad0a:	227d      	movs	r2, #125	; 0x7d
 801ad0c:	488c      	ldr	r0, [pc, #560]	; (801af40 <SD_Witer+0x980>)
 801ad0e:	f7ee fecf 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%d\t", 151); //Ra
 801ad12:	2297      	movs	r2, #151	; 0x97
 801ad14:	4992      	ldr	r1, [pc, #584]	; (801af60 <SD_Witer+0x9a0>)
 801ad16:	a803      	add	r0, sp, #12
 801ad18:	f005 fc7a 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad1c:	220c      	movs	r2, #12
 801ad1e:	4b86      	ldr	r3, [pc, #536]	; (801af38 <SD_Witer+0x978>)
 801ad20:	4887      	ldr	r0, [pc, #540]	; (801af40 <SD_Witer+0x980>)
 801ad22:	eb0d 0102 	add.w	r1, sp, r2
								memset(measure_buff, 0, 12);
 801ad26:	2500      	movs	r5, #0
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad28:	f7ee fec2 	bl	8009ab0 <f_write>
								
								sprintf(measure_buff, "%d", 231); //Rall
 801ad2c:	22e7      	movs	r2, #231	; 0xe7
 801ad2e:	498d      	ldr	r1, [pc, #564]	; (801af64 <SD_Witer+0x9a4>)
								memset(measure_buff, 0, 12);
 801ad30:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d", 231); //Rall
 801ad32:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ad34:	9504      	str	r5, [sp, #16]
 801ad36:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d", 231); //Rall
 801ad38:	f005 fc6a 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad3c:	220c      	movs	r2, #12
 801ad3e:	4b7e      	ldr	r3, [pc, #504]	; (801af38 <SD_Witer+0x978>)
 801ad40:	487f      	ldr	r0, [pc, #508]	; (801af40 <SD_Witer+0x980>)
 801ad42:	eb0d 0102 	add.w	r1, sp, r2
 801ad46:	f7ee feb3 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801ad4a:	220d      	movs	r2, #13
 801ad4c:	4986      	ldr	r1, [pc, #536]	; (801af68 <SD_Witer+0x9a8>)
								memset(measure_buff, 0, 12);
 801ad4e:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801ad50:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ad52:	9504      	str	r5, [sp, #16]
 801ad54:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801ad56:	f005 fc5b 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad5a:	220c      	movs	r2, #12
 801ad5c:	4b76      	ldr	r3, [pc, #472]	; (801af38 <SD_Witer+0x978>)
 801ad5e:	4878      	ldr	r0, [pc, #480]	; (801af40 <SD_Witer+0x980>)
 801ad60:	eb0d 0102 	add.w	r1, sp, r2
 801ad64:	f7ee fea4 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 29); //R2
 801ad68:	221d      	movs	r2, #29
 801ad6a:	497d      	ldr	r1, [pc, #500]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ad6c:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 29); //R2
 801ad6e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ad70:	9504      	str	r5, [sp, #16]
 801ad72:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 29); //R2
 801ad74:	f005 fc4c 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad78:	220c      	movs	r2, #12
 801ad7a:	4b6f      	ldr	r3, [pc, #444]	; (801af38 <SD_Witer+0x978>)
 801ad7c:	4870      	ldr	r0, [pc, #448]	; (801af40 <SD_Witer+0x980>)
 801ad7e:	eb0d 0102 	add.w	r1, sp, r2
 801ad82:	f7ee fe95 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 49); //R3
 801ad86:	2231      	movs	r2, #49	; 0x31
 801ad88:	4975      	ldr	r1, [pc, #468]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ad8a:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 49); //R3
 801ad8c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ad8e:	9504      	str	r5, [sp, #16]
 801ad90:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 49); //R3
 801ad92:	f005 fc3d 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad96:	220c      	movs	r2, #12
 801ad98:	4b67      	ldr	r3, [pc, #412]	; (801af38 <SD_Witer+0x978>)
 801ad9a:	4869      	ldr	r0, [pc, #420]	; (801af40 <SD_Witer+0x980>)
 801ad9c:	eb0d 0102 	add.w	r1, sp, r2
 801ada0:	f7ee fe86 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 44); //R4
 801ada4:	222c      	movs	r2, #44	; 0x2c
 801ada6:	496e      	ldr	r1, [pc, #440]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ada8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 44); //R4
 801adaa:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801adac:	9504      	str	r5, [sp, #16]
 801adae:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 44); //R4
 801adb0:	f005 fc2e 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801adb4:	220c      	movs	r2, #12
 801adb6:	4b60      	ldr	r3, [pc, #384]	; (801af38 <SD_Witer+0x978>)
 801adb8:	4861      	ldr	r0, [pc, #388]	; (801af40 <SD_Witer+0x980>)
 801adba:	eb0d 0102 	add.w	r1, sp, r2
 801adbe:	f7ee fe77 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 55); //R5
 801adc2:	2237      	movs	r2, #55	; 0x37
 801adc4:	4966      	ldr	r1, [pc, #408]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801adc6:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 55); //R5
 801adc8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801adca:	9504      	str	r5, [sp, #16]
 801adcc:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 55); //R5
 801adce:	f005 fc1f 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801add2:	220c      	movs	r2, #12
 801add4:	4b58      	ldr	r3, [pc, #352]	; (801af38 <SD_Witer+0x978>)
 801add6:	485a      	ldr	r0, [pc, #360]	; (801af40 <SD_Witer+0x980>)
 801add8:	eb0d 0102 	add.w	r1, sp, r2
 801addc:	f7ee fe68 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 68); //R6
 801ade0:	2244      	movs	r2, #68	; 0x44
 801ade2:	495f      	ldr	r1, [pc, #380]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ade4:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 68); //R6
 801ade6:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ade8:	9504      	str	r5, [sp, #16]
 801adea:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 68); //R6
 801adec:	f005 fc10 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801adf0:	220c      	movs	r2, #12
 801adf2:	4b51      	ldr	r3, [pc, #324]	; (801af38 <SD_Witer+0x978>)
 801adf4:	4852      	ldr	r0, [pc, #328]	; (801af40 <SD_Witer+0x980>)
 801adf6:	eb0d 0102 	add.w	r1, sp, r2
 801adfa:	f7ee fe59 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",79); //R7
 801adfe:	224f      	movs	r2, #79	; 0x4f
 801ae00:	4957      	ldr	r1, [pc, #348]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ae02:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",79); //R7
 801ae04:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ae06:	9504      	str	r5, [sp, #16]
 801ae08:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",79); //R7
 801ae0a:	f005 fc01 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ae0e:	220c      	movs	r2, #12
 801ae10:	4b49      	ldr	r3, [pc, #292]	; (801af38 <SD_Witer+0x978>)
 801ae12:	484b      	ldr	r0, [pc, #300]	; (801af40 <SD_Witer+0x980>)
 801ae14:	eb0d 0102 	add.w	r1, sp, r2
 801ae18:	f7ee fe4a 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",88); //R8
 801ae1c:	2258      	movs	r2, #88	; 0x58
 801ae1e:	4950      	ldr	r1, [pc, #320]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ae20:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",88); //R8
 801ae22:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ae24:	9504      	str	r5, [sp, #16]
 801ae26:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",88); //R8
 801ae28:	f005 fbf2 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ae2c:	220c      	movs	r2, #12
 801ae2e:	4b42      	ldr	r3, [pc, #264]	; (801af38 <SD_Witer+0x978>)
 801ae30:	4843      	ldr	r0, [pc, #268]	; (801af40 <SD_Witer+0x980>)
 801ae32:	eb0d 0102 	add.w	r1, sp, r2
 801ae36:	f7ee fe3b 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",98); //R9
 801ae3a:	2262      	movs	r2, #98	; 0x62
 801ae3c:	4948      	ldr	r1, [pc, #288]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ae3e:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",98); //R9
 801ae40:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ae42:	9504      	str	r5, [sp, #16]
 801ae44:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",98); //R9
 801ae46:	f005 fbe3 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ae4a:	220c      	movs	r2, #12
 801ae4c:	4b3a      	ldr	r3, [pc, #232]	; (801af38 <SD_Witer+0x978>)
 801ae4e:	483c      	ldr	r0, [pc, #240]	; (801af40 <SD_Witer+0x980>)
 801ae50:	eb0d 0102 	add.w	r1, sp, r2
 801ae54:	f7ee fe2c 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 105); //R10
 801ae58:	2269      	movs	r2, #105	; 0x69
 801ae5a:	4941      	ldr	r1, [pc, #260]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ae5c:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 105); //R10
 801ae5e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ae60:	9504      	str	r5, [sp, #16]
 801ae62:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 105); //R10
 801ae64:	f005 fbd4 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ae68:	220c      	movs	r2, #12
 801ae6a:	4b33      	ldr	r3, [pc, #204]	; (801af38 <SD_Witer+0x978>)
 801ae6c:	4834      	ldr	r0, [pc, #208]	; (801af40 <SD_Witer+0x980>)
 801ae6e:	eb0d 0102 	add.w	r1, sp, r2
 801ae72:	f7ee fe1d 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 112); //R11
 801ae76:	2270      	movs	r2, #112	; 0x70
 801ae78:	4939      	ldr	r1, [pc, #228]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ae7a:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 112); //R11
 801ae7c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ae7e:	9504      	str	r5, [sp, #16]
 801ae80:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 112); //R11
 801ae82:	f005 fbc5 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ae86:	220c      	movs	r2, #12
 801ae88:	4b2b      	ldr	r3, [pc, #172]	; (801af38 <SD_Witer+0x978>)
 801ae8a:	482d      	ldr	r0, [pc, #180]	; (801af40 <SD_Witer+0x980>)
 801ae8c:	eb0d 0102 	add.w	r1, sp, r2
 801ae90:	f7ee fe0e 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 127); //R12
 801ae94:	227f      	movs	r2, #127	; 0x7f
 801ae96:	4932      	ldr	r1, [pc, #200]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ae98:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 127); //R12
 801ae9a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ae9c:	9504      	str	r5, [sp, #16]
 801ae9e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 127); //R12
 801aea0:	f005 fbb6 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aea4:	220c      	movs	r2, #12
 801aea6:	4b24      	ldr	r3, [pc, #144]	; (801af38 <SD_Witer+0x978>)
 801aea8:	4825      	ldr	r0, [pc, #148]	; (801af40 <SD_Witer+0x980>)
 801aeaa:	eb0d 0102 	add.w	r1, sp, r2
 801aeae:	f7ee fdff 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 133); //R13
 801aeb2:	2285      	movs	r2, #133	; 0x85
 801aeb4:	492a      	ldr	r1, [pc, #168]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aeb6:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 133); //R13
 801aeb8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aeba:	9504      	str	r5, [sp, #16]
 801aebc:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 133); //R13
 801aebe:	f005 fba7 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aec2:	220c      	movs	r2, #12
 801aec4:	4b1c      	ldr	r3, [pc, #112]	; (801af38 <SD_Witer+0x978>)
 801aec6:	481e      	ldr	r0, [pc, #120]	; (801af40 <SD_Witer+0x980>)
 801aec8:	eb0d 0102 	add.w	r1, sp, r2
 801aecc:	f7ee fdf0 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 148); //R14
 801aed0:	2294      	movs	r2, #148	; 0x94
 801aed2:	4923      	ldr	r1, [pc, #140]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aed4:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 148); //R14
 801aed6:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aed8:	9504      	str	r5, [sp, #16]
 801aeda:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 148); //R14
 801aedc:	f005 fb98 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aee0:	220c      	movs	r2, #12
 801aee2:	4b15      	ldr	r3, [pc, #84]	; (801af38 <SD_Witer+0x978>)
 801aee4:	4816      	ldr	r0, [pc, #88]	; (801af40 <SD_Witer+0x980>)
 801aee6:	eb0d 0102 	add.w	r1, sp, r2
 801aeea:	f7ee fde1 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 152); //R15
 801aeee:	2298      	movs	r2, #152	; 0x98
 801aef0:	491b      	ldr	r1, [pc, #108]	; (801af60 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aef2:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 152); //R15
 801aef4:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aef6:	9504      	str	r5, [sp, #16]
 801aef8:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 152); //R15
 801aefa:	f005 fb89 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aefe:	220c      	movs	r2, #12
 801af00:	4b0d      	ldr	r3, [pc, #52]	; (801af38 <SD_Witer+0x978>)
 801af02:	480f      	ldr	r0, [pc, #60]	; (801af40 <SD_Witer+0x980>)
 801af04:	eb0d 0102 	add.w	r1, sp, r2
 801af08:	f7ee fdd2 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801af0c:	9503      	str	r5, [sp, #12]
 801af0e:	9504      	str	r5, [sp, #16]
 801af10:	9505      	str	r5, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801af12:	4b09      	ldr	r3, [pc, #36]	; (801af38 <SD_Witer+0x978>)
 801af14:	2c00      	cmp	r4, #0
 801af16:	f040 8302 	bne.w	801b51e <SD_Witer+0xf5e>
 801af1a:	4914      	ldr	r1, [pc, #80]	; (801af6c <SD_Witer+0x9ac>)
 801af1c:	227f      	movs	r2, #127	; 0x7f
 801af1e:	4808      	ldr	r0, [pc, #32]	; (801af40 <SD_Witer+0x980>)
								
								sprintf(measure_buff, "%d", Qf); //Qf
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801af20:	4d13      	ldr	r5, [pc, #76]	; (801af70 <SD_Witer+0x9b0>)
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801af22:	f7ee fdc5 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%d\t", Qa); //Qa
 801af26:	4b13      	ldr	r3, [pc, #76]	; (801af74 <SD_Witer+0x9b4>)
 801af28:	e026      	b.n	801af78 <SD_Witer+0x9b8>
 801af2a:	bf00      	nop
 801af2c:	f3af 8000 	nop.w
 801af30:	cccccccd 	.word	0xcccccccd
 801af34:	3feccccc 	.word	0x3feccccc
 801af38:	200915f8 	.word	0x200915f8
 801af3c:	200004fb 	.word	0x200004fb
 801af40:	20092650 	.word	0x20092650
 801af44:	20095c98 	.word	0x20095c98
 801af48:	0803213f 	.word	0x0803213f
 801af4c:	20095c9c 	.word	0x20095c9c
 801af50:	080320ea 	.word	0x080320ea
 801af54:	20009760 	.word	0x20009760
 801af58:	3f666666 	.word	0x3f666666
 801af5c:	200003b3 	.word	0x200003b3
 801af60:	08032146 	.word	0x08032146
 801af64:	08025309 	.word	0x08025309
 801af68:	08032145 	.word	0x08032145
 801af6c:	200002c9 	.word	0x200002c9
 801af70:	20003624 	.word	0x20003624
 801af74:	20003633 	.word	0x20003633
 801af78:	49a8      	ldr	r1, [pc, #672]	; (801b21c <SD_Witer+0xc5c>)
 801af7a:	781a      	ldrb	r2, [r3, #0]
 801af7c:	a803      	add	r0, sp, #12
 801af7e:	f005 fb47 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801af82:	220c      	movs	r2, #12
 801af84:	eb0d 0102 	add.w	r1, sp, r2
 801af88:	4ba5      	ldr	r3, [pc, #660]	; (801b220 <SD_Witer+0xc60>)
 801af8a:	48a6      	ldr	r0, [pc, #664]	; (801b224 <SD_Witer+0xc64>)
 801af8c:	f7ee fd90 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801af90:	4ba5      	ldr	r3, [pc, #660]	; (801b228 <SD_Witer+0xc68>)
 801af92:	49a2      	ldr	r1, [pc, #648]	; (801b21c <SD_Witer+0xc5c>)
 801af94:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801af96:	2400      	movs	r4, #0
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801af98:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801af9a:	9403      	str	r4, [sp, #12]
 801af9c:	9404      	str	r4, [sp, #16]
 801af9e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801afa0:	f005 fb36 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801afa4:	220c      	movs	r2, #12
 801afa6:	eb0d 0102 	add.w	r1, sp, r2
 801afaa:	4b9d      	ldr	r3, [pc, #628]	; (801b220 <SD_Witer+0xc60>)
 801afac:	489d      	ldr	r0, [pc, #628]	; (801b224 <SD_Witer+0xc64>)
 801afae:	f7ee fd7f 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%d", Qf); //Qf
 801afb2:	4b9e      	ldr	r3, [pc, #632]	; (801b22c <SD_Witer+0xc6c>)
 801afb4:	499e      	ldr	r1, [pc, #632]	; (801b230 <SD_Witer+0xc70>)
 801afb6:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801afb8:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d", Qf); //Qf
 801afba:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801afbc:	9404      	str	r4, [sp, #16]
 801afbe:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d", Qf); //Qf
 801afc0:	f005 fb26 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801afc4:	220c      	movs	r2, #12
 801afc6:	4b96      	ldr	r3, [pc, #600]	; (801b220 <SD_Witer+0xc60>)
 801afc8:	4896      	ldr	r0, [pc, #600]	; (801b224 <SD_Witer+0xc64>)
 801afca:	eb0d 0102 	add.w	r1, sp, r2
 801afce:	f7ee fd6f 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801afd2:	782a      	ldrb	r2, [r5, #0]
 801afd4:	4997      	ldr	r1, [pc, #604]	; (801b234 <SD_Witer+0xc74>)
								memset(measure_buff, 0, 12);
 801afd6:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801afd8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801afda:	9404      	str	r4, [sp, #16]
 801afdc:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801afde:	f005 fb17 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801afe2:	220c      	movs	r2, #12
 801afe4:	4b8e      	ldr	r3, [pc, #568]	; (801b220 <SD_Witer+0xc60>)
 801afe6:	488f      	ldr	r0, [pc, #572]	; (801b224 <SD_Witer+0xc64>)
 801afe8:	eb0d 0102 	add.w	r1, sp, r2
 801afec:	f7ee fd60 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801aff0:	786a      	ldrb	r2, [r5, #1]
 801aff2:	498a      	ldr	r1, [pc, #552]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801aff4:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801aff6:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aff8:	9404      	str	r4, [sp, #16]
 801affa:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801affc:	f005 fb08 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b000:	220c      	movs	r2, #12
 801b002:	4b87      	ldr	r3, [pc, #540]	; (801b220 <SD_Witer+0xc60>)
 801b004:	4887      	ldr	r0, [pc, #540]	; (801b224 <SD_Witer+0xc64>)
 801b006:	eb0d 0102 	add.w	r1, sp, r2
 801b00a:	f7ee fd51 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801b00e:	78aa      	ldrb	r2, [r5, #2]
 801b010:	4982      	ldr	r1, [pc, #520]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b012:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801b014:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b016:	9404      	str	r4, [sp, #16]
 801b018:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801b01a:	f005 faf9 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b01e:	220c      	movs	r2, #12
 801b020:	4b7f      	ldr	r3, [pc, #508]	; (801b220 <SD_Witer+0xc60>)
 801b022:	4880      	ldr	r0, [pc, #512]	; (801b224 <SD_Witer+0xc64>)
 801b024:	eb0d 0102 	add.w	r1, sp, r2
 801b028:	f7ee fd42 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801b02c:	78ea      	ldrb	r2, [r5, #3]
 801b02e:	497b      	ldr	r1, [pc, #492]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b030:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801b032:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b034:	9404      	str	r4, [sp, #16]
 801b036:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801b038:	f005 faea 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b03c:	220c      	movs	r2, #12
 801b03e:	4b78      	ldr	r3, [pc, #480]	; (801b220 <SD_Witer+0xc60>)
 801b040:	4878      	ldr	r0, [pc, #480]	; (801b224 <SD_Witer+0xc64>)
 801b042:	eb0d 0102 	add.w	r1, sp, r2
 801b046:	f7ee fd33 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801b04a:	792a      	ldrb	r2, [r5, #4]
 801b04c:	4973      	ldr	r1, [pc, #460]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b04e:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801b050:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b052:	9404      	str	r4, [sp, #16]
 801b054:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801b056:	f005 fadb 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b05a:	220c      	movs	r2, #12
 801b05c:	4b70      	ldr	r3, [pc, #448]	; (801b220 <SD_Witer+0xc60>)
 801b05e:	4871      	ldr	r0, [pc, #452]	; (801b224 <SD_Witer+0xc64>)
 801b060:	eb0d 0102 	add.w	r1, sp, r2
 801b064:	f7ee fd24 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801b068:	796a      	ldrb	r2, [r5, #5]
 801b06a:	496c      	ldr	r1, [pc, #432]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b06c:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801b06e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b070:	9404      	str	r4, [sp, #16]
 801b072:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801b074:	f005 facc 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b078:	220c      	movs	r2, #12
 801b07a:	4b69      	ldr	r3, [pc, #420]	; (801b220 <SD_Witer+0xc60>)
 801b07c:	4869      	ldr	r0, [pc, #420]	; (801b224 <SD_Witer+0xc64>)
 801b07e:	eb0d 0102 	add.w	r1, sp, r2
 801b082:	f7ee fd15 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801b086:	79aa      	ldrb	r2, [r5, #6]
 801b088:	4964      	ldr	r1, [pc, #400]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b08a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801b08c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b08e:	9404      	str	r4, [sp, #16]
 801b090:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801b092:	f005 fabd 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b096:	220c      	movs	r2, #12
 801b098:	4b61      	ldr	r3, [pc, #388]	; (801b220 <SD_Witer+0xc60>)
 801b09a:	4862      	ldr	r0, [pc, #392]	; (801b224 <SD_Witer+0xc64>)
 801b09c:	eb0d 0102 	add.w	r1, sp, r2
 801b0a0:	f7ee fd06 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801b0a4:	79ea      	ldrb	r2, [r5, #7]
 801b0a6:	495d      	ldr	r1, [pc, #372]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b0a8:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801b0aa:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b0ac:	9404      	str	r4, [sp, #16]
 801b0ae:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801b0b0:	f005 faae 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b0b4:	220c      	movs	r2, #12
 801b0b6:	4b5a      	ldr	r3, [pc, #360]	; (801b220 <SD_Witer+0xc60>)
 801b0b8:	485a      	ldr	r0, [pc, #360]	; (801b224 <SD_Witer+0xc64>)
 801b0ba:	eb0d 0102 	add.w	r1, sp, r2
 801b0be:	f7ee fcf7 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801b0c2:	7a2a      	ldrb	r2, [r5, #8]
 801b0c4:	4955      	ldr	r1, [pc, #340]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b0c6:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801b0c8:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b0ca:	9404      	str	r4, [sp, #16]
 801b0cc:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801b0ce:	f005 fa9f 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b0d2:	220c      	movs	r2, #12
 801b0d4:	4b52      	ldr	r3, [pc, #328]	; (801b220 <SD_Witer+0xc60>)
 801b0d6:	4853      	ldr	r0, [pc, #332]	; (801b224 <SD_Witer+0xc64>)
 801b0d8:	eb0d 0102 	add.w	r1, sp, r2
 801b0dc:	f7ee fce8 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801b0e0:	7a6a      	ldrb	r2, [r5, #9]
 801b0e2:	494e      	ldr	r1, [pc, #312]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b0e4:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801b0e6:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b0e8:	9404      	str	r4, [sp, #16]
 801b0ea:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801b0ec:	f005 fa90 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b0f0:	220c      	movs	r2, #12
 801b0f2:	4b4b      	ldr	r3, [pc, #300]	; (801b220 <SD_Witer+0xc60>)
 801b0f4:	484b      	ldr	r0, [pc, #300]	; (801b224 <SD_Witer+0xc64>)
 801b0f6:	eb0d 0102 	add.w	r1, sp, r2
 801b0fa:	f7ee fcd9 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801b0fe:	7aaa      	ldrb	r2, [r5, #10]
 801b100:	4946      	ldr	r1, [pc, #280]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b102:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801b104:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b106:	9404      	str	r4, [sp, #16]
 801b108:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801b10a:	f005 fa81 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b10e:	220c      	movs	r2, #12
 801b110:	4b43      	ldr	r3, [pc, #268]	; (801b220 <SD_Witer+0xc60>)
 801b112:	4844      	ldr	r0, [pc, #272]	; (801b224 <SD_Witer+0xc64>)
 801b114:	eb0d 0102 	add.w	r1, sp, r2
 801b118:	f7ee fcca 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801b11c:	7aea      	ldrb	r2, [r5, #11]
 801b11e:	493f      	ldr	r1, [pc, #252]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b120:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801b122:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b124:	9404      	str	r4, [sp, #16]
 801b126:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801b128:	f005 fa72 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b12c:	220c      	movs	r2, #12
 801b12e:	4b3c      	ldr	r3, [pc, #240]	; (801b220 <SD_Witer+0xc60>)
 801b130:	483c      	ldr	r0, [pc, #240]	; (801b224 <SD_Witer+0xc64>)
 801b132:	eb0d 0102 	add.w	r1, sp, r2
 801b136:	f7ee fcbb 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801b13a:	7b2a      	ldrb	r2, [r5, #12]
 801b13c:	4937      	ldr	r1, [pc, #220]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b13e:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801b140:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b142:	9404      	str	r4, [sp, #16]
 801b144:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801b146:	f005 fa63 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b14a:	220c      	movs	r2, #12
 801b14c:	4b34      	ldr	r3, [pc, #208]	; (801b220 <SD_Witer+0xc60>)
 801b14e:	4835      	ldr	r0, [pc, #212]	; (801b224 <SD_Witer+0xc64>)
 801b150:	eb0d 0102 	add.w	r1, sp, r2
 801b154:	f7ee fcac 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801b158:	7b6a      	ldrb	r2, [r5, #13]
 801b15a:	4930      	ldr	r1, [pc, #192]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b15c:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801b15e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b160:	9404      	str	r4, [sp, #16]
 801b162:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801b164:	f005 fa54 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b168:	220c      	movs	r2, #12
 801b16a:	4b2d      	ldr	r3, [pc, #180]	; (801b220 <SD_Witer+0xc60>)
 801b16c:	482d      	ldr	r0, [pc, #180]	; (801b224 <SD_Witer+0xc64>)
 801b16e:	eb0d 0102 	add.w	r1, sp, r2
 801b172:	f7ee fc9d 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801b176:	7baa      	ldrb	r2, [r5, #14]
 801b178:	4928      	ldr	r1, [pc, #160]	; (801b21c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801b17a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801b17c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801b17e:	9404      	str	r4, [sp, #16]
 801b180:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801b182:	f005 fa45 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b186:	220c      	movs	r2, #12
 801b188:	4b25      	ldr	r3, [pc, #148]	; (801b220 <SD_Witer+0xc60>)
 801b18a:	4826      	ldr	r0, [pc, #152]	; (801b224 <SD_Witer+0xc64>)
 801b18c:	eb0d 0102 	add.w	r1, sp, r2
 801b190:	f7ee fc8e 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801b194:	9403      	str	r4, [sp, #12]
 801b196:	9404      	str	r4, [sp, #16]
 801b198:	9405      	str	r4, [sp, #20]
							}
					}
				}
				
			
				f_close(&MyFile);
 801b19a:	4822      	ldr	r0, [pc, #136]	; (801b224 <SD_Witer+0xc64>)
 801b19c:	f7ee fda6 	bl	8009cec <f_close>
				memset(buffer_sd, 0, 11);
 801b1a0:	2200      	movs	r2, #0
				
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801b1a2:	4925      	ldr	r1, [pc, #148]	; (801b238 <SD_Witer+0xc78>)
 801b1a4:	4825      	ldr	r0, [pc, #148]	; (801b23c <SD_Witer+0xc7c>)
				memset(buffer_sd, 0, 11);
 801b1a6:	6072      	str	r2, [r6, #4]
 801b1a8:	6032      	str	r2, [r6, #0]
 801b1aa:	f8c6 2007 	str.w	r2, [r6, #7]
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801b1ae:	f7ee fb35 	bl	800981c <f_mount>
 801b1b2:	4b23      	ldr	r3, [pc, #140]	; (801b240 <SD_Witer+0xc80>)
				SDWr_Status_bar = 1.0;
 801b1b4:	4923      	ldr	r1, [pc, #140]	; (801b244 <SD_Witer+0xc84>)
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801b1b6:	7018      	strb	r0, [r3, #0]
				SDWr_Status_bar = 1.0;
 801b1b8:	4b23      	ldr	r3, [pc, #140]	; (801b248 <SD_Witer+0xc88>)
 801b1ba:	2000      	movs	r0, #0
 801b1bc:	e9c3 0100 	strd	r0, r1, [r3]
				GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801b1c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b1c4:	f44f 718c 	mov.w	r1, #280	; 0x118
 801b1c8:	2055      	movs	r0, #85	; 0x55
 801b1ca:	f7f8 fa23 	bl	8013614 <GUI_Bar_Measure>
	}
 801b1ce:	b007      	add	sp, #28
 801b1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801b1d4:	491d      	ldr	r1, [pc, #116]	; (801b24c <SD_Witer+0xc8c>)
 801b1d6:	f7ff ba10 	b.w	801a5fa <SD_Witer+0x3a>
 801b1da:	491d      	ldr	r1, [pc, #116]	; (801b250 <SD_Witer+0xc90>)
 801b1dc:	f7ff ba0d 	b.w	801a5fa <SD_Witer+0x3a>
 801b1e0:	491c      	ldr	r1, [pc, #112]	; (801b254 <SD_Witer+0xc94>)
 801b1e2:	f7ff ba0a 	b.w	801a5fa <SD_Witer+0x3a>
 801b1e6:	491c      	ldr	r1, [pc, #112]	; (801b258 <SD_Witer+0xc98>)
 801b1e8:	f7ff ba07 	b.w	801a5fa <SD_Witer+0x3a>
 801b1ec:	491b      	ldr	r1, [pc, #108]	; (801b25c <SD_Witer+0xc9c>)
 801b1ee:	f7ff ba04 	b.w	801a5fa <SD_Witer+0x3a>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801b1f2:	221e      	movs	r2, #30
 801b1f4:	491a      	ldr	r1, [pc, #104]	; (801b260 <SD_Witer+0xca0>)
 801b1f6:	f7ff ba3a 	b.w	801a66e <SD_Witer+0xae>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801b1fa:	2212      	movs	r2, #18
 801b1fc:	4919      	ldr	r1, [pc, #100]	; (801b264 <SD_Witer+0xca4>)
 801b1fe:	f7ff ba54 	b.w	801a6aa <SD_Witer+0xea>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801b202:	2212      	movs	r2, #18
 801b204:	4918      	ldr	r1, [pc, #96]	; (801b268 <SD_Witer+0xca8>)
 801b206:	f7ff ba8c 	b.w	801a722 <SD_Witer+0x162>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801b20a:	2214      	movs	r2, #20
 801b20c:	4917      	ldr	r1, [pc, #92]	; (801b26c <SD_Witer+0xcac>)
 801b20e:	f7ff babc 	b.w	801a78a <SD_Witer+0x1ca>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801b212:	2209      	movs	r2, #9
 801b214:	4916      	ldr	r1, [pc, #88]	; (801b270 <SD_Witer+0xcb0>)
 801b216:	f7ff baec 	b.w	801a7f2 <SD_Witer+0x232>
 801b21a:	bf00      	nop
 801b21c:	08032146 	.word	0x08032146
 801b220:	200915f8 	.word	0x200915f8
 801b224:	20092650 	.word	0x20092650
 801b228:	20003635 	.word	0x20003635
 801b22c:	20003634 	.word	0x20003634
 801b230:	08025309 	.word	0x08025309
 801b234:	08032145 	.word	0x08032145
 801b238:	20093685 	.word	0x20093685
 801b23c:	20091600 	.word	0x20091600
 801b240:	20093680 	.word	0x20093680
 801b244:	3ff00000 	.word	0x3ff00000
 801b248:	20009760 	.word	0x20009760
 801b24c:	0803222e 	.word	0x0803222e
 801b250:	08032105 	.word	0x08032105
 801b254:	08032109 	.word	0x08032109
 801b258:	0803210b 	.word	0x0803210b
 801b25c:	0803210f 	.word	0x0803210f
 801b260:	2000090b 	.word	0x2000090b
 801b264:	20000430 	.word	0x20000430
 801b268:	200004ac 	.word	0x200004ac
 801b26c:	20000468 	.word	0x20000468
 801b270:	20000247 	.word	0x20000247
										sprintf(measure_buff, "%.d", Tc_Measure);
 801b274:	49ab      	ldr	r1, [pc, #684]	; (801b524 <SD_Witer+0xf64>)
 801b276:	a803      	add	r0, sp, #12
 801b278:	f005 f9ca 	bl	8020610 <sprintf>
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b27c:	220c      	movs	r2, #12
 801b27e:	4baa      	ldr	r3, [pc, #680]	; (801b528 <SD_Witer+0xf68>)
 801b280:	48aa      	ldr	r0, [pc, #680]	; (801b52c <SD_Witer+0xf6c>)
 801b282:	eb0d 0102 	add.w	r1, sp, r2
 801b286:	f7ee fc13 	bl	8009ab0 <f_write>
										memset(measure_buff, 0, 12);
 801b28a:	2300      	movs	r3, #0
 801b28c:	9303      	str	r3, [sp, #12]
 801b28e:	9304      	str	r3, [sp, #16]
 801b290:	9305      	str	r3, [sp, #20]
 801b292:	f7ff babe 	b.w	801a812 <SD_Witer+0x252>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801b296:	2215      	movs	r2, #21
 801b298:	49a5      	ldr	r1, [pc, #660]	; (801b530 <SD_Witer+0xf70>)
 801b29a:	f7ff bacd 	b.w	801a838 <SD_Witer+0x278>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801b29e:	2213      	movs	r2, #19
 801b2a0:	49a4      	ldr	r1, [pc, #656]	; (801b534 <SD_Witer+0xf74>)
 801b2a2:	f7ff bb46 	b.w	801a932 <SD_Witer+0x372>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801b2a6:	221a      	movs	r2, #26
 801b2a8:	49a3      	ldr	r1, [pc, #652]	; (801b538 <SD_Witer+0xf78>)
 801b2aa:	f7ff bb51 	b.w	801a950 <SD_Witer+0x390>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801b2ae:	221f      	movs	r2, #31
 801b2b0:	49a2      	ldr	r1, [pc, #648]	; (801b53c <SD_Witer+0xf7c>)
 801b2b2:	f7ff bb67 	b.w	801a984 <SD_Witer+0x3c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801b2b6:	2213      	movs	r2, #19
 801b2b8:	49a1      	ldr	r1, [pc, #644]	; (801b540 <SD_Witer+0xf80>)
 801b2ba:	f7ff bb81 	b.w	801a9c0 <SD_Witer+0x400>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801b2be:	b964      	cbnz	r4, 801b2da <SD_Witer+0xd1a>
 801b2c0:	49a0      	ldr	r1, [pc, #640]	; (801b544 <SD_Witer+0xf84>)
 801b2c2:	2224      	movs	r2, #36	; 0x24
 801b2c4:	4899      	ldr	r0, [pc, #612]	; (801b52c <SD_Witer+0xf6c>)
 801b2c6:	f7ee fbf3 	bl	8009ab0 <f_write>
								f_write(&MyFile, "NAN", 3, &byteswritten);
 801b2ca:	4b97      	ldr	r3, [pc, #604]	; (801b528 <SD_Witer+0xf68>)
 801b2cc:	499e      	ldr	r1, [pc, #632]	; (801b548 <SD_Witer+0xf88>)
 801b2ce:	4897      	ldr	r0, [pc, #604]	; (801b52c <SD_Witer+0xf6c>)
 801b2d0:	2203      	movs	r2, #3
 801b2d2:	f7ee fbed 	bl	8009ab0 <f_write>
 801b2d6:	f7ff bb88 	b.w	801a9ea <SD_Witer+0x42a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801b2da:	2213      	movs	r2, #19
 801b2dc:	4998      	ldr	r1, [pc, #608]	; (801b540 <SD_Witer+0xf80>)
 801b2de:	e7f1      	b.n	801b2c4 <SD_Witer+0xd04>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801b2e0:	2225      	movs	r2, #37	; 0x25
 801b2e2:	499a      	ldr	r1, [pc, #616]	; (801b54c <SD_Witer+0xf8c>)
 801b2e4:	f7ff bb99 	b.w	801aa1a <SD_Witer+0x45a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801b2e8:	2212      	movs	r2, #18
 801b2ea:	4999      	ldr	r1, [pc, #612]	; (801b550 <SD_Witer+0xf90>)
 801b2ec:	f7ff bbd0 	b.w	801aa90 <SD_Witer+0x4d0>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801b2f0:	2212      	movs	r2, #18
 801b2f2:	4998      	ldr	r1, [pc, #608]	; (801b554 <SD_Witer+0xf94>)
 801b2f4:	f7ff bbea 	b.w	801aacc <SD_Witer+0x50c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801b2f8:	2213      	movs	r2, #19
 801b2fa:	4997      	ldr	r1, [pc, #604]	; (801b558 <SD_Witer+0xf98>)
 801b2fc:	e404      	b.n	801ab08 <SD_Witer+0x548>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801b2fe:	221e      	movs	r2, #30
 801b300:	4996      	ldr	r1, [pc, #600]	; (801b55c <SD_Witer+0xf9c>)
 801b302:	e41f      	b.n	801ab44 <SD_Witer+0x584>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801b304:	220f      	movs	r2, #15
 801b306:	4996      	ldr	r1, [pc, #600]	; (801b560 <SD_Witer+0xfa0>)
 801b308:	e4bc      	b.n	801ac84 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801b30a:	2c00      	cmp	r4, #0
 801b30c:	f040 80f0 	bne.w	801b4f0 <SD_Witer+0xf30>
 801b310:	4994      	ldr	r1, [pc, #592]	; (801b564 <SD_Witer+0xfa4>)
 801b312:	2276      	movs	r2, #118	; 0x76
 801b314:	4885      	ldr	r0, [pc, #532]	; (801b52c <SD_Witer+0xf6c>)
 801b316:	4f94      	ldr	r7, [pc, #592]	; (801b568 <SD_Witer+0xfa8>)
 801b318:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801b5d0 <SD_Witer+0x1010>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b31c:	f8df a208 	ldr.w	sl, [pc, #520]	; 801b528 <SD_Witer+0xf68>
 801b320:	f8df 9208 	ldr.w	r9, [pc, #520]	; 801b52c <SD_Witer+0xf6c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801b324:	f7ee fbc4 	bl	8009ab0 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //L(lambda)
 801b328:	f857 0b04 	ldr.w	r0, [r7], #4
 801b32c:	f7e5 f924 	bl	8000578 <__aeabi_f2d>
 801b330:	4602      	mov	r2, r0
 801b332:	460b      	mov	r3, r1
 801b334:	a803      	add	r0, sp, #12
 801b336:	498d      	ldr	r1, [pc, #564]	; (801b56c <SD_Witer+0xfac>)
 801b338:	f005 f96a 	bl	8020610 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b33c:	220c      	movs	r2, #12
 801b33e:	4653      	mov	r3, sl
 801b340:	eb0d 0102 	add.w	r1, sp, r2
 801b344:	4648      	mov	r0, r9
 801b346:	f7ee fbb3 	bl	8009ab0 <f_write>
									memset(measure_buff, 0, 12);
 801b34a:	2500      	movs	r5, #0
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801b34c:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801b350:	9503      	str	r5, [sp, #12]
 801b352:	9504      	str	r5, [sp, #16]
 801b354:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801b356:	f7e5 f90f 	bl	8000578 <__aeabi_f2d>
 801b35a:	4602      	mov	r2, r0
 801b35c:	460b      	mov	r3, r1
 801b35e:	a803      	add	r0, sp, #12
 801b360:	4983      	ldr	r1, [pc, #524]	; (801b570 <SD_Witer+0xfb0>)
 801b362:	f005 f955 	bl	8020610 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b366:	220c      	movs	r2, #12
 801b368:	4653      	mov	r3, sl
 801b36a:	eb0d 0102 	add.w	r1, sp, r2
 801b36e:	4648      	mov	r0, r9
 801b370:	f7ee fb9e 	bl	8009ab0 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801b374:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801b376:	9503      	str	r5, [sp, #12]
 801b378:	9504      	str	r5, [sp, #16]
 801b37a:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801b37c:	d1d4      	bne.n	801b328 <SD_Witer+0xd68>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801b37e:	4b6a      	ldr	r3, [pc, #424]	; (801b528 <SD_Witer+0xf68>)
 801b380:	2c00      	cmp	r4, #0
 801b382:	f040 80b8 	bne.w	801b4f6 <SD_Witer+0xf36>
 801b386:	497b      	ldr	r1, [pc, #492]	; (801b574 <SD_Witer+0xfb4>)
 801b388:	223f      	movs	r2, #63	; 0x3f
 801b38a:	4868      	ldr	r0, [pc, #416]	; (801b52c <SD_Witer+0xf6c>)
 801b38c:	f7ee fb90 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f", E_day); //Le
 801b390:	4b79      	ldr	r3, [pc, #484]	; (801b578 <SD_Witer+0xfb8>)
 801b392:	6818      	ldr	r0, [r3, #0]
 801b394:	f7e5 f8f0 	bl	8000578 <__aeabi_f2d>
 801b398:	4602      	mov	r2, r0
 801b39a:	460b      	mov	r3, r1
 801b39c:	a803      	add	r0, sp, #12
 801b39e:	4977      	ldr	r1, [pc, #476]	; (801b57c <SD_Witer+0xfbc>)
 801b3a0:	f005 f936 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b3a4:	220c      	movs	r2, #12
 801b3a6:	4b60      	ldr	r3, [pc, #384]	; (801b528 <SD_Witer+0xf68>)
 801b3a8:	4860      	ldr	r0, [pc, #384]	; (801b52c <SD_Witer+0xf6c>)
 801b3aa:	eb0d 0102 	add.w	r1, sp, r2
 801b3ae:	f7ee fb7f 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	9303      	str	r3, [sp, #12]
 801b3b6:	9304      	str	r3, [sp, #16]
 801b3b8:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801b3ba:	4b5b      	ldr	r3, [pc, #364]	; (801b528 <SD_Witer+0xf68>)
 801b3bc:	2c00      	cmp	r4, #0
 801b3be:	f040 809d 	bne.w	801b4fc <SD_Witer+0xf3c>
 801b3c2:	496f      	ldr	r1, [pc, #444]	; (801b580 <SD_Witer+0xfc0>)
 801b3c4:	221b      	movs	r2, #27
 801b3c6:	4859      	ldr	r0, [pc, #356]	; (801b52c <SD_Witer+0xf6c>)
 801b3c8:	f7ee fb72 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.1f", E_day_Wt); //Lu
 801b3cc:	4b6d      	ldr	r3, [pc, #436]	; (801b584 <SD_Witer+0xfc4>)
 801b3ce:	6818      	ldr	r0, [r3, #0]
 801b3d0:	f7e5 f8d2 	bl	8000578 <__aeabi_f2d>
 801b3d4:	4602      	mov	r2, r0
 801b3d6:	460b      	mov	r3, r1
 801b3d8:	a803      	add	r0, sp, #12
 801b3da:	496b      	ldr	r1, [pc, #428]	; (801b588 <SD_Witer+0xfc8>)
 801b3dc:	f005 f918 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b3e0:	220c      	movs	r2, #12
 801b3e2:	4b51      	ldr	r3, [pc, #324]	; (801b528 <SD_Witer+0xf68>)
 801b3e4:	4851      	ldr	r0, [pc, #324]	; (801b52c <SD_Witer+0xf6c>)
 801b3e6:	eb0d 0102 	add.w	r1, sp, r2
 801b3ea:	f7ee fb61 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	9303      	str	r3, [sp, #12]
 801b3f2:	9304      	str	r3, [sp, #16]
 801b3f4:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801b3f6:	4b4c      	ldr	r3, [pc, #304]	; (801b528 <SD_Witer+0xf68>)
 801b3f8:	2c00      	cmp	r4, #0
 801b3fa:	f040 8082 	bne.w	801b502 <SD_Witer+0xf42>
 801b3fe:	4963      	ldr	r1, [pc, #396]	; (801b58c <SD_Witer+0xfcc>)
 801b400:	2227      	movs	r2, #39	; 0x27
 801b402:	484a      	ldr	r0, [pc, #296]	; (801b52c <SD_Witer+0xf6c>)
 801b404:	f7ee fb54 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPL
 801b408:	4b61      	ldr	r3, [pc, #388]	; (801b590 <SD_Witer+0xfd0>)
 801b40a:	6818      	ldr	r0, [r3, #0]
 801b40c:	f7e5 f8b4 	bl	8000578 <__aeabi_f2d>
 801b410:	4602      	mov	r2, r0
 801b412:	460b      	mov	r3, r1
 801b414:	a803      	add	r0, sp, #12
 801b416:	4959      	ldr	r1, [pc, #356]	; (801b57c <SD_Witer+0xfbc>)
 801b418:	f005 f8fa 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b41c:	220c      	movs	r2, #12
 801b41e:	4b42      	ldr	r3, [pc, #264]	; (801b528 <SD_Witer+0xf68>)
 801b420:	4842      	ldr	r0, [pc, #264]	; (801b52c <SD_Witer+0xf6c>)
 801b422:	eb0d 0102 	add.w	r1, sp, r2
 801b426:	f7ee fb43 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801b42a:	2300      	movs	r3, #0
 801b42c:	9303      	str	r3, [sp, #12]
 801b42e:	9304      	str	r3, [sp, #16]
 801b430:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801b432:	4b3d      	ldr	r3, [pc, #244]	; (801b528 <SD_Witer+0xf68>)
 801b434:	2c00      	cmp	r4, #0
 801b436:	d167      	bne.n	801b508 <SD_Witer+0xf48>
 801b438:	4956      	ldr	r1, [pc, #344]	; (801b594 <SD_Witer+0xfd4>)
 801b43a:	223d      	movs	r2, #61	; 0x3d
 801b43c:	483b      	ldr	r0, [pc, #236]	; (801b52c <SD_Witer+0xf6c>)
 801b43e:	f7ee fb37 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPL B
 801b442:	4b55      	ldr	r3, [pc, #340]	; (801b598 <SD_Witer+0xfd8>)
 801b444:	6818      	ldr	r0, [r3, #0]
 801b446:	f7e5 f897 	bl	8000578 <__aeabi_f2d>
 801b44a:	4602      	mov	r2, r0
 801b44c:	460b      	mov	r3, r1
 801b44e:	a803      	add	r0, sp, #12
 801b450:	4952      	ldr	r1, [pc, #328]	; (801b59c <SD_Witer+0xfdc>)
 801b452:	f005 f8dd 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b456:	220c      	movs	r2, #12
 801b458:	eb0d 0102 	add.w	r1, sp, r2
 801b45c:	4b32      	ldr	r3, [pc, #200]	; (801b528 <SD_Witer+0xf68>)
 801b45e:	4833      	ldr	r0, [pc, #204]	; (801b52c <SD_Witer+0xf6c>)
 801b460:	f7ee fb26 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801b464:	4b4e      	ldr	r3, [pc, #312]	; (801b5a0 <SD_Witer+0xfe0>)
								memset(measure_buff, 0, 12);
 801b466:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801b468:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801b46a:	9503      	str	r5, [sp, #12]
 801b46c:	9504      	str	r5, [sp, #16]
 801b46e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801b470:	f7e5 f882 	bl	8000578 <__aeabi_f2d>
 801b474:	4602      	mov	r2, r0
 801b476:	460b      	mov	r3, r1
 801b478:	a803      	add	r0, sp, #12
 801b47a:	4948      	ldr	r1, [pc, #288]	; (801b59c <SD_Witer+0xfdc>)
 801b47c:	f005 f8c8 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b480:	220c      	movs	r2, #12
 801b482:	eb0d 0102 	add.w	r1, sp, r2
 801b486:	4b28      	ldr	r3, [pc, #160]	; (801b528 <SD_Witer+0xf68>)
 801b488:	4828      	ldr	r0, [pc, #160]	; (801b52c <SD_Witer+0xf6c>)
 801b48a:	f7ee fb11 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801b48e:	4b45      	ldr	r3, [pc, #276]	; (801b5a4 <SD_Witer+0xfe4>)
								memset(measure_buff, 0, 12);
 801b490:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801b492:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801b494:	9504      	str	r5, [sp, #16]
 801b496:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801b498:	f7e5 f86e 	bl	8000578 <__aeabi_f2d>
 801b49c:	4602      	mov	r2, r0
 801b49e:	460b      	mov	r3, r1
 801b4a0:	a803      	add	r0, sp, #12
 801b4a2:	493e      	ldr	r1, [pc, #248]	; (801b59c <SD_Witer+0xfdc>)
 801b4a4:	f005 f8b4 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b4a8:	220c      	movs	r2, #12
 801b4aa:	eb0d 0102 	add.w	r1, sp, r2
 801b4ae:	4b1e      	ldr	r3, [pc, #120]	; (801b528 <SD_Witer+0xf68>)
 801b4b0:	481e      	ldr	r0, [pc, #120]	; (801b52c <SD_Witer+0xf6c>)
 801b4b2:	f7ee fafd 	bl	8009ab0 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801b4b6:	4b3c      	ldr	r3, [pc, #240]	; (801b5a8 <SD_Witer+0xfe8>)
								memset(measure_buff, 0, 12);
 801b4b8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801b4ba:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801b4bc:	9504      	str	r5, [sp, #16]
 801b4be:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801b4c0:	f7e5 f85a 	bl	8000578 <__aeabi_f2d>
 801b4c4:	4602      	mov	r2, r0
 801b4c6:	460b      	mov	r3, r1
 801b4c8:	a803      	add	r0, sp, #12
 801b4ca:	4934      	ldr	r1, [pc, #208]	; (801b59c <SD_Witer+0xfdc>)
 801b4cc:	f005 f8a0 	bl	8020610 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b4d0:	220c      	movs	r2, #12
 801b4d2:	4b15      	ldr	r3, [pc, #84]	; (801b528 <SD_Witer+0xf68>)
 801b4d4:	4815      	ldr	r0, [pc, #84]	; (801b52c <SD_Witer+0xf6c>)
 801b4d6:	eb0d 0102 	add.w	r1, sp, r2
 801b4da:	f7ee fae9 	bl	8009ab0 <f_write>
								memset(measure_buff, 0, 12);
 801b4de:	9503      	str	r5, [sp, #12]
 801b4e0:	9504      	str	r5, [sp, #16]
 801b4e2:	9505      	str	r5, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801b4e4:	4b10      	ldr	r3, [pc, #64]	; (801b528 <SD_Witer+0xf68>)
 801b4e6:	b994      	cbnz	r4, 801b50e <SD_Witer+0xf4e>
 801b4e8:	221a      	movs	r2, #26
 801b4ea:	4930      	ldr	r1, [pc, #192]	; (801b5ac <SD_Witer+0xfec>)
 801b4ec:	f7ff bbca 	b.w	801ac84 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801b4f0:	2223      	movs	r2, #35	; 0x23
 801b4f2:	492f      	ldr	r1, [pc, #188]	; (801b5b0 <SD_Witer+0xff0>)
 801b4f4:	e70e      	b.n	801b314 <SD_Witer+0xd54>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801b4f6:	2216      	movs	r2, #22
 801b4f8:	492e      	ldr	r1, [pc, #184]	; (801b5b4 <SD_Witer+0xff4>)
 801b4fa:	e746      	b.n	801b38a <SD_Witer+0xdca>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801b4fc:	2213      	movs	r2, #19
 801b4fe:	492e      	ldr	r1, [pc, #184]	; (801b5b8 <SD_Witer+0xff8>)
 801b500:	e761      	b.n	801b3c6 <SD_Witer+0xe06>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801b502:	2215      	movs	r2, #21
 801b504:	492d      	ldr	r1, [pc, #180]	; (801b5bc <SD_Witer+0xffc>)
 801b506:	e77c      	b.n	801b402 <SD_Witer+0xe42>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801b508:	2220      	movs	r2, #32
 801b50a:	492d      	ldr	r1, [pc, #180]	; (801b5c0 <SD_Witer+0x1000>)
 801b50c:	e796      	b.n	801b43c <SD_Witer+0xe7c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801b50e:	2214      	movs	r2, #20
 801b510:	492c      	ldr	r1, [pc, #176]	; (801b5c4 <SD_Witer+0x1004>)
 801b512:	f7ff bbb7 	b.w	801ac84 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801b516:	226b      	movs	r2, #107	; 0x6b
 801b518:	492b      	ldr	r1, [pc, #172]	; (801b5c8 <SD_Witer+0x1008>)
 801b51a:	f7ff bbf7 	b.w	801ad0c <SD_Witer+0x74c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801b51e:	226b      	movs	r2, #107	; 0x6b
 801b520:	492a      	ldr	r1, [pc, #168]	; (801b5cc <SD_Witer+0x100c>)
 801b522:	e4fc      	b.n	801af1e <SD_Witer+0x95e>
 801b524:	0803212b 	.word	0x0803212b
 801b528:	200915f8 	.word	0x200915f8
 801b52c:	20092650 	.word	0x20092650
 801b530:	200005ff 	.word	0x200005ff
 801b534:	200008ce 	.word	0x200008ce
 801b538:	200009ef 	.word	0x200009ef
 801b53c:	20000995 	.word	0x20000995
 801b540:	2000095e 	.word	0x2000095e
 801b544:	20000971 	.word	0x20000971
 801b548:	08032113 	.word	0x08032113
 801b54c:	20000544 	.word	0x20000544
 801b550:	2000050e 	.word	0x2000050e
 801b554:	200005cc 	.word	0x200005cc
 801b558:	200007ff 	.word	0x200007ff
 801b55c:	200007a8 	.word	0x200007a8
 801b560:	200004ec 	.word	0x200004ec
 801b564:	20000704 	.word	0x20000704
 801b568:	2000c53c 	.word	0x2000c53c
 801b56c:	08032133 	.word	0x08032133
 801b570:	08032138 	.word	0x08032138
 801b574:	200006a2 	.word	0x200006a2
 801b578:	20095ca0 	.word	0x20095ca0
 801b57c:	080320ea 	.word	0x080320ea
 801b580:	2000078d 	.word	0x2000078d
 801b584:	20095718 	.word	0x20095718
 801b588:	080320e5 	.word	0x080320e5
 801b58c:	200008a7 	.word	0x200008a7
 801b590:	20095720 	.word	0x20095720
 801b594:	20000855 	.word	0x20000855
 801b598:	20095804 	.word	0x20095804
 801b59c:	0803213f 	.word	0x0803213f
 801b5a0:	20095b88 	.word	0x20095b88
 801b5a4:	20095a3c 	.word	0x20095a3c
 801b5a8:	2009571c 	.word	0x2009571c
 801b5ac:	20000672 	.word	0x20000672
 801b5b0:	200006e1 	.word	0x200006e1
 801b5b4:	2000068c 	.word	0x2000068c
 801b5b8:	2000077a 	.word	0x2000077a
 801b5bc:	20000892 	.word	0x20000892
 801b5c0:	20000835 	.word	0x20000835
 801b5c4:	2000065e 	.word	0x2000065e
 801b5c8:	20000348 	.word	0x20000348
 801b5cc:	2000025e 	.word	0x2000025e
 801b5d0:	20054948 	.word	0x20054948

0801b5d4 <Spectral_Axes>:
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,		};


void Spectral_Axes(uint8_t direction){
 801b5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (direction == 0x00)
 801b5d6:	2800      	cmp	r0, #0
 801b5d8:	d145      	bne.n	801b666 <Spectral_Axes+0x92>
	{
//		TFT_FillRectangle(20, 95, 270, 412, TFT_Black_Bkgr);

		TFT_FillRectangle(18, 95, 20, 412, TFT_Grey); //Yline
 801b5da:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801b5de:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801b5e2:	2214      	movs	r2, #20
 801b5e4:	215f      	movs	r1, #95	; 0x5f
 801b5e6:	2012      	movs	r0, #18
 801b5e8:	9400      	str	r4, [sp, #0]
 801b5ea:	f001 f9a8 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(18, 412, 270, 414, TFT_Grey);//XLine
 801b5ee:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 801b5f2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801b5f6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801b5fa:	2012      	movs	r0, #18
 801b5fc:	9400      	str	r4, [sp, #0]
 801b5fe:	f001 f99e 	bl	801c93e <TFT_FillRectangle>
		
		TFT_DrawLine(18, 334, 268, 334, TFT_Grey); //25
 801b602:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 801b606:	4619      	mov	r1, r3
 801b608:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b60c:	2012      	movs	r0, #18
 801b60e:	9400      	str	r4, [sp, #0]
 801b610:	f001 f938 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(18, 257, 268, 257, TFT_Grey); //50
 801b614:	f240 1301 	movw	r3, #257	; 0x101
 801b618:	4619      	mov	r1, r3
 801b61a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b61e:	2012      	movs	r0, #18
 801b620:	9400      	str	r4, [sp, #0]
 801b622:	f001 f92f 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(18, 181, 268, 181, TFT_Grey); //75
 801b626:	23b5      	movs	r3, #181	; 0xb5
 801b628:	4619      	mov	r1, r3
 801b62a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b62e:	2012      	movs	r0, #18
 801b630:	9400      	str	r4, [sp, #0]
 801b632:	f001 f927 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(18, 105, 268, 105, TFT_Grey); //100
 801b636:	2369      	movs	r3, #105	; 0x69
 801b638:	9400      	str	r4, [sp, #0]
 801b63a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b63e:	4619      	mov	r1, r3
 801b640:	2012      	movs	r0, #18
 801b642:	f001 f91f 	bl	801c884 <TFT_DrawLine>
 801b646:	2538      	movs	r5, #56	; 0x38
		
		for(uint16_t i = 0; i < 210; i+=40){
			TFT_DrawLine(56+i, 95, 56+i, 412, TFT_Grey);
 801b648:	462a      	mov	r2, r5
 801b64a:	4628      	mov	r0, r5
 801b64c:	3528      	adds	r5, #40	; 0x28
 801b64e:	9400      	str	r4, [sp, #0]
 801b650:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801b654:	215f      	movs	r1, #95	; 0x5f
 801b656:	b2ad      	uxth	r5, r5
 801b658:	f001 f914 	bl	801c884 <TFT_DrawLine>
		for(uint16_t i = 0; i < 210; i+=40){
 801b65c:	f5b5 7f94 	cmp.w	r5, #296	; 0x128
 801b660:	d1f2      	bne.n	801b648 <Spectral_Axes+0x74>
		
		for(uint16_t i = 0; i < 260; i+=50){
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
		}
	}
}
 801b662:	b003      	add	sp, #12
 801b664:	bd30      	pop	{r4, r5, pc}
	} else if (direction == 0x01)
 801b666:	2801      	cmp	r0, #1
 801b668:	d140      	bne.n	801b6ec <Spectral_Axes+0x118>
		TFT_FillRectangle(253, 70, 255, 406, TFT_Grey); //XLine
 801b66a:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801b66e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b672:	22ff      	movs	r2, #255	; 0xff
 801b674:	2146      	movs	r1, #70	; 0x46
 801b676:	20fd      	movs	r0, #253	; 0xfd
 801b678:	9400      	str	r4, [sp, #0]
 801b67a:	f001 f960 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_Grey); //Yline
 801b67e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b682:	22ff      	movs	r2, #255	; 0xff
 801b684:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801b688:	2028      	movs	r0, #40	; 0x28
 801b68a:	9400      	str	r4, [sp, #0]
 801b68c:	f001 f957 	bl	801c93e <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_Grey); //25
 801b690:	22cc      	movs	r2, #204	; 0xcc
 801b692:	4610      	mov	r0, r2
 801b694:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b698:	2146      	movs	r1, #70	; 0x46
 801b69a:	9400      	str	r4, [sp, #0]
 801b69c:	f001 f8f2 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_Grey); //50
 801b6a0:	2297      	movs	r2, #151	; 0x97
 801b6a2:	4610      	mov	r0, r2
 801b6a4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b6a8:	2146      	movs	r1, #70	; 0x46
 801b6aa:	9400      	str	r4, [sp, #0]
 801b6ac:	f001 f8ea 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_Grey); //75
 801b6b0:	2262      	movs	r2, #98	; 0x62
 801b6b2:	4610      	mov	r0, r2
 801b6b4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b6b8:	2146      	movs	r1, #70	; 0x46
 801b6ba:	9400      	str	r4, [sp, #0]
 801b6bc:	f001 f8e2 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_Grey); //100
 801b6c0:	222d      	movs	r2, #45	; 0x2d
 801b6c2:	9400      	str	r4, [sp, #0]
 801b6c4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b6c8:	2146      	movs	r1, #70	; 0x46
 801b6ca:	4610      	mov	r0, r2
 801b6cc:	f001 f8da 	bl	801c884 <TFT_DrawLine>
 801b6d0:	f44f 75b1 	mov.w	r5, #354	; 0x162
			TFT_DrawLine(40, 354-i, 255, 354-i, TFT_Grey);
 801b6d4:	462b      	mov	r3, r5
 801b6d6:	4629      	mov	r1, r5
 801b6d8:	3d32      	subs	r5, #50	; 0x32
 801b6da:	9400      	str	r4, [sp, #0]
 801b6dc:	22ff      	movs	r2, #255	; 0xff
 801b6de:	2028      	movs	r0, #40	; 0x28
 801b6e0:	b2ad      	uxth	r5, r5
 801b6e2:	f001 f8cf 	bl	801c884 <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801b6e6:	2d36      	cmp	r5, #54	; 0x36
 801b6e8:	d1f4      	bne.n	801b6d4 <Spectral_Axes+0x100>
 801b6ea:	e7ba      	b.n	801b662 <Spectral_Axes+0x8e>
	} else if (direction == 0x02)
 801b6ec:	2802      	cmp	r0, #2
 801b6ee:	d1b8      	bne.n	801b662 <Spectral_Axes+0x8e>
		TFT_FillRectangle(18, 74, 16, 406, TFT_Grey); //XLine
 801b6f0:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801b6f4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b6f8:	2210      	movs	r2, #16
 801b6fa:	214a      	movs	r1, #74	; 0x4a
 801b6fc:	2012      	movs	r0, #18
 801b6fe:	9400      	str	r4, [sp, #0]
 801b700:	f001 f91d 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_Grey); //Yline
 801b704:	234c      	movs	r3, #76	; 0x4c
 801b706:	22e8      	movs	r2, #232	; 0xe8
 801b708:	214a      	movs	r1, #74	; 0x4a
 801b70a:	2011      	movs	r0, #17
 801b70c:	9400      	str	r4, [sp, #0]
 801b70e:	f001 f916 	bl	801c93e <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_Grey); //25
 801b712:	2244      	movs	r2, #68	; 0x44
 801b714:	4610      	mov	r0, r2
 801b716:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b71a:	2146      	movs	r1, #70	; 0x46
 801b71c:	9400      	str	r4, [sp, #0]
 801b71e:	f001 f8b1 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_Grey); //50
 801b722:	2279      	movs	r2, #121	; 0x79
 801b724:	4610      	mov	r0, r2
 801b726:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b72a:	2146      	movs	r1, #70	; 0x46
 801b72c:	9400      	str	r4, [sp, #0]
 801b72e:	f001 f8a9 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_Grey); //75
 801b732:	22ae      	movs	r2, #174	; 0xae
 801b734:	4610      	mov	r0, r2
 801b736:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b73a:	2146      	movs	r1, #70	; 0x46
 801b73c:	9400      	str	r4, [sp, #0]
 801b73e:	f001 f8a1 	bl	801c884 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_Grey); //100
 801b742:	22e3      	movs	r2, #227	; 0xe3
 801b744:	9400      	str	r4, [sp, #0]
 801b746:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b74a:	2146      	movs	r1, #70	; 0x46
 801b74c:	4610      	mov	r0, r2
 801b74e:	f001 f899 	bl	801c884 <TFT_DrawLine>
 801b752:	f44f 75bb 	mov.w	r5, #374	; 0x176
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
 801b756:	462b      	mov	r3, r5
 801b758:	4629      	mov	r1, r5
 801b75a:	3d32      	subs	r5, #50	; 0x32
 801b75c:	9400      	str	r4, [sp, #0]
 801b75e:	22e8      	movs	r2, #232	; 0xe8
 801b760:	2011      	movs	r0, #17
 801b762:	b2ad      	uxth	r5, r5
 801b764:	f001 f88e 	bl	801c884 <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801b768:	2d4a      	cmp	r5, #74	; 0x4a
 801b76a:	d1f4      	bne.n	801b756 <Spectral_Axes+0x182>
 801b76c:	e779      	b.n	801b662 <Spectral_Axes+0x8e>
	...

0801b770 <Spectral_PAR_Range>:

void Spectral_PAR_Range(uint8_t direction){
 801b770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b774:	4d6b      	ldr	r5, [pc, #428]	; (801b924 <Spectral_PAR_Range+0x1b4>)
 801b776:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801b930 <Spectral_PAR_Range+0x1c0>
 801b77a:	4f6b      	ldr	r7, [pc, #428]	; (801b928 <Spectral_PAR_Range+0x1b8>)
 801b77c:	4e6b      	ldr	r6, [pc, #428]	; (801b92c <Spectral_PAR_Range+0x1bc>)
	if (direction == 0x00)
 801b77e:	2800      	cmp	r0, #0
 801b780:	d146      	bne.n	801b810 <Spectral_PAR_Range+0xa0>
	{
		TFT_FillRectangle(19, 105, 19+PARGraph_B/4, 411, TFT_Black_Bkgr);
 801b782:	882a      	ldrh	r2, [r5, #0]
 801b784:	2363      	movs	r3, #99	; 0x63
 801b786:	0892      	lsrs	r2, r2, #2
 801b788:	9300      	str	r3, [sp, #0]
 801b78a:	3213      	adds	r2, #19
 801b78c:	f240 139b 	movw	r3, #411	; 0x19b
 801b790:	2169      	movs	r1, #105	; 0x69
 801b792:	2013      	movs	r0, #19
 801b794:	f001 f8d3 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_B/4, 105, 19+PARGraph_G/4, 411, TFT_PAR_Blue);
 801b798:	8828      	ldrh	r0, [r5, #0]
 801b79a:	f8b8 2000 	ldrh.w	r2, [r8]
 801b79e:	f644 33d4 	movw	r3, #19412	; 0x4bd4
 801b7a2:	0892      	lsrs	r2, r2, #2
 801b7a4:	0880      	lsrs	r0, r0, #2
 801b7a6:	9300      	str	r3, [sp, #0]
 801b7a8:	3213      	adds	r2, #19
 801b7aa:	f240 139b 	movw	r3, #411	; 0x19b
 801b7ae:	2169      	movs	r1, #105	; 0x69
 801b7b0:	3013      	adds	r0, #19
 801b7b2:	f001 f8c4 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_G/4, 105, 19+PARGraph_R/4, 411, TFT_PAR_Green);
 801b7b6:	883a      	ldrh	r2, [r7, #0]
 801b7b8:	f8b8 0000 	ldrh.w	r0, [r8]
 801b7bc:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801b7c0:	0892      	lsrs	r2, r2, #2
 801b7c2:	0880      	lsrs	r0, r0, #2
 801b7c4:	9300      	str	r3, [sp, #0]
 801b7c6:	3213      	adds	r2, #19
 801b7c8:	f240 139b 	movw	r3, #411	; 0x19b
 801b7cc:	2169      	movs	r1, #105	; 0x69
 801b7ce:	3013      	adds	r0, #19
 801b7d0:	f001 f8b5 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_R/4, 105, 19+PARGraph_IR/4, 411, TFT_PAR_Red);
 801b7d4:	8838      	ldrh	r0, [r7, #0]
 801b7d6:	8832      	ldrh	r2, [r6, #0]
 801b7d8:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801b7dc:	0892      	lsrs	r2, r2, #2
 801b7de:	0880      	lsrs	r0, r0, #2
 801b7e0:	9300      	str	r3, [sp, #0]
 801b7e2:	3213      	adds	r2, #19
 801b7e4:	f240 139b 	movw	r3, #411	; 0x19b
 801b7e8:	2169      	movs	r1, #105	; 0x69
 801b7ea:	3013      	adds	r0, #19
 801b7ec:	f001 f8a7 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_IR/4, 105, 19+1000/4, 411, TFT_PAR_IRed);
 801b7f0:	8830      	ldrh	r0, [r6, #0]
 801b7f2:	f646 0382 	movw	r3, #26754	; 0x6882
 801b7f6:	0880      	lsrs	r0, r0, #2
 801b7f8:	9300      	str	r3, [sp, #0]
 801b7fa:	f240 120d 	movw	r2, #269	; 0x10d
 801b7fe:	f240 139b 	movw	r3, #411	; 0x19b
 801b802:	2169      	movs	r1, #105	; 0x69
 801b804:	3013      	adds	r0, #19
	}else
	{
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801b806:	f001 f89a 	bl	801c93e <TFT_FillRectangle>
	}
}
 801b80a:	b002      	add	sp, #8
 801b80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(direction == 0x01)
 801b810:	2801      	cmp	r0, #1
 801b812:	f04f 0403 	mov.w	r4, #3
 801b816:	d142      	bne.n	801b89e <Spectral_PAR_Range+0x12e>
		TFT_FillRectangle( 45, 403-PARGraph_G/3, 253, 403-PARGraph_B/3, TFT_PAR_Blue);
 801b818:	882b      	ldrh	r3, [r5, #0]
 801b81a:	f8b8 1000 	ldrh.w	r1, [r8]
 801b81e:	fbb3 f3f4 	udiv	r3, r3, r4
 801b822:	f240 1593 	movw	r5, #403	; 0x193
 801b826:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801b82a:	1aeb      	subs	r3, r5, r3
 801b82c:	fbb1 f1f4 	udiv	r1, r1, r4
 801b830:	1a69      	subs	r1, r5, r1
 801b832:	9200      	str	r2, [sp, #0]
 801b834:	b29b      	uxth	r3, r3
 801b836:	22fd      	movs	r2, #253	; 0xfd
 801b838:	b289      	uxth	r1, r1
 801b83a:	202d      	movs	r0, #45	; 0x2d
 801b83c:	f001 f87f 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_R/3, 253, 403-PARGraph_G/3, TFT_PAR_Green);
 801b840:	8839      	ldrh	r1, [r7, #0]
 801b842:	f8b8 3000 	ldrh.w	r3, [r8]
 801b846:	fbb1 f1f4 	udiv	r1, r1, r4
 801b84a:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801b84e:	fbb3 f3f4 	udiv	r3, r3, r4
 801b852:	1a69      	subs	r1, r5, r1
 801b854:	1aeb      	subs	r3, r5, r3
 801b856:	9200      	str	r2, [sp, #0]
 801b858:	b29b      	uxth	r3, r3
 801b85a:	22fd      	movs	r2, #253	; 0xfd
 801b85c:	b289      	uxth	r1, r1
 801b85e:	202d      	movs	r0, #45	; 0x2d
 801b860:	f001 f86d 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_IR/3, 253, 403-PARGraph_R/3, TFT_PAR_Red);
 801b864:	883b      	ldrh	r3, [r7, #0]
 801b866:	8831      	ldrh	r1, [r6, #0]
 801b868:	fbb3 f3f4 	udiv	r3, r3, r4
 801b86c:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801b870:	1aeb      	subs	r3, r5, r3
 801b872:	fbb1 f1f4 	udiv	r1, r1, r4
 801b876:	1a69      	subs	r1, r5, r1
 801b878:	9200      	str	r2, [sp, #0]
 801b87a:	b29b      	uxth	r3, r3
 801b87c:	22fd      	movs	r2, #253	; 0xfd
 801b87e:	b289      	uxth	r1, r1
 801b880:	202d      	movs	r0, #45	; 0x2d
 801b882:	f001 f85c 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-1000/3, 253, 403-PARGraph_IR/3, TFT_PAR_IRed);
 801b886:	f646 0282 	movw	r2, #26754	; 0x6882
 801b88a:	8833      	ldrh	r3, [r6, #0]
 801b88c:	fbb3 f3f4 	udiv	r3, r3, r4
 801b890:	1aeb      	subs	r3, r5, r3
 801b892:	9200      	str	r2, [sp, #0]
 801b894:	b29b      	uxth	r3, r3
 801b896:	22fd      	movs	r2, #253	; 0xfd
 801b898:	2146      	movs	r1, #70	; 0x46
 801b89a:	202d      	movs	r0, #45	; 0x2d
 801b89c:	e7b3      	b.n	801b806 <Spectral_PAR_Range+0x96>
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
 801b89e:	8829      	ldrh	r1, [r5, #0]
 801b8a0:	f8b8 3000 	ldrh.w	r3, [r8]
 801b8a4:	fbb1 f1f4 	udiv	r1, r1, r4
 801b8a8:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801b8ac:	fbb3 f3f4 	udiv	r3, r3, r4
 801b8b0:	314a      	adds	r1, #74	; 0x4a
 801b8b2:	334a      	adds	r3, #74	; 0x4a
 801b8b4:	9200      	str	r2, [sp, #0]
 801b8b6:	b29b      	uxth	r3, r3
 801b8b8:	22e3      	movs	r2, #227	; 0xe3
 801b8ba:	b289      	uxth	r1, r1
 801b8bc:	2013      	movs	r0, #19
 801b8be:	f001 f83e 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
 801b8c2:	883b      	ldrh	r3, [r7, #0]
 801b8c4:	f8b8 1000 	ldrh.w	r1, [r8]
 801b8c8:	fbb3 f3f4 	udiv	r3, r3, r4
 801b8cc:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801b8d0:	334a      	adds	r3, #74	; 0x4a
 801b8d2:	fbb1 f1f4 	udiv	r1, r1, r4
 801b8d6:	314a      	adds	r1, #74	; 0x4a
 801b8d8:	9200      	str	r2, [sp, #0]
 801b8da:	b29b      	uxth	r3, r3
 801b8dc:	22e3      	movs	r2, #227	; 0xe3
 801b8de:	b289      	uxth	r1, r1
 801b8e0:	2013      	movs	r0, #19
 801b8e2:	f001 f82c 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
 801b8e6:	8839      	ldrh	r1, [r7, #0]
 801b8e8:	8833      	ldrh	r3, [r6, #0]
 801b8ea:	fbb1 f1f4 	udiv	r1, r1, r4
 801b8ee:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801b8f2:	fbb3 f3f4 	udiv	r3, r3, r4
 801b8f6:	314a      	adds	r1, #74	; 0x4a
 801b8f8:	334a      	adds	r3, #74	; 0x4a
 801b8fa:	9200      	str	r2, [sp, #0]
 801b8fc:	b29b      	uxth	r3, r3
 801b8fe:	22e3      	movs	r2, #227	; 0xe3
 801b900:	b289      	uxth	r1, r1
 801b902:	2013      	movs	r0, #19
 801b904:	f001 f81b 	bl	801c93e <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801b908:	f646 0382 	movw	r3, #26754	; 0x6882
 801b90c:	8831      	ldrh	r1, [r6, #0]
 801b90e:	fbb1 f1f4 	udiv	r1, r1, r4
 801b912:	314a      	adds	r1, #74	; 0x4a
 801b914:	9300      	str	r3, [sp, #0]
 801b916:	22e3      	movs	r2, #227	; 0xe3
 801b918:	f240 1397 	movw	r3, #407	; 0x197
 801b91c:	b289      	uxth	r1, r1
 801b91e:	2013      	movs	r0, #19
 801b920:	e771      	b.n	801b806 <Spectral_PAR_Range+0x96>
 801b922:	bf00      	nop
 801b924:	20095a42 	.word	0x20095a42
 801b928:	20095ce4 	.word	0x20095ce4
 801b92c:	20095a40 	.word	0x20095a40
 801b930:	20095b8c 	.word	0x20095b8c

0801b934 <Spectral_Axes_Text>:


void Spectral_Axes_Text(uint8_t direction){
 801b934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char buffer[4] = {0};
 801b936:	ac02      	add	r4, sp, #8
 801b938:	2300      	movs	r3, #0
 801b93a:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	if (direction == 0x00)
 801b93e:	4606      	mov	r6, r0
 801b940:	4d67      	ldr	r5, [pc, #412]	; (801bae0 <Spectral_Axes_Text+0x1ac>)
 801b942:	2800      	cmp	r0, #0
 801b944:	d162      	bne.n	801ba0c <Spectral_Axes_Text+0xd8>
	{
		TFT_SetTextColor(TFT_White);
 801b946:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b94a:	f001 fa27 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801b94e:	2063      	movs	r0, #99	; 0x63
 801b950:	f001 fa2a 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801b954:	4863      	ldr	r0, [pc, #396]	; (801bae4 <Spectral_Axes_Text+0x1b0>)
 801b956:	f001 fa1b 	bl	801cd90 <TFT_SetFont>

		TFT_DrawChar(5, 410, '0');
 801b95a:	2230      	movs	r2, #48	; 0x30
 801b95c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801b960:	2005      	movs	r0, #5
 801b962:	f001 fadf 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(7, 257, '.');
 801b966:	222e      	movs	r2, #46	; 0x2e
 801b968:	f240 1101 	movw	r1, #257	; 0x101
 801b96c:	2007      	movs	r0, #7
 801b96e:	f001 fad9 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(3, 257, '0');
 801b972:	2230      	movs	r2, #48	; 0x30
 801b974:	f240 1101 	movw	r1, #257	; 0x101
 801b978:	2003      	movs	r0, #3
 801b97a:	f001 fad3 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(11, 257, '5');
 801b97e:	2235      	movs	r2, #53	; 0x35
 801b980:	f240 1101 	movw	r1, #257	; 0x101
 801b984:	200b      	movs	r0, #11
 801b986:	f001 facd 	bl	801cf24 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 801b98a:	2231      	movs	r2, #49	; 0x31
 801b98c:	2169      	movs	r1, #105	; 0x69
 801b98e:	4630      	mov	r0, r6
 801b990:	f001 fac8 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '.');
 801b994:	222e      	movs	r2, #46	; 0x2e
 801b996:	2169      	movs	r1, #105	; 0x69
 801b998:	2004      	movs	r0, #4
 801b99a:	f001 fac3 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 801b99e:	2230      	movs	r2, #48	; 0x30
 801b9a0:	2169      	movs	r1, #105	; 0x69
 801b9a2:	2009      	movs	r0, #9
 801b9a4:	f001 fabe 	bl	801cf24 <TFT_DrawChar>
		
		
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801b9a8:	882a      	ldrh	r2, [r5, #0]
 801b9aa:	494f      	ldr	r1, [pc, #316]	; (801bae8 <Spectral_Axes_Text+0x1b4>)
 801b9ac:	4620      	mov	r0, r4
 801b9ae:	f004 fe2f 	bl	8020610 <sprintf>
		TFT_DisplayString(11, 416, (uint8_t *)buffer, LEFT_MODE);
 801b9b2:	2303      	movs	r3, #3
 801b9b4:	4622      	mov	r2, r4
 801b9b6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b9ba:	200b      	movs	r0, #11
 801b9bc:	f001 fb0a 	bl	801cfd4 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801b9c0:	886a      	ldrh	r2, [r5, #2]
 801b9c2:	4949      	ldr	r1, [pc, #292]	; (801bae8 <Spectral_Axes_Text+0x1b4>)
 801b9c4:	4620      	mov	r0, r4
 801b9c6:	f004 fe23 	bl	8020610 <sprintf>
		TFT_DisplayString(85, 416, (uint8_t *)buffer, LEFT_MODE);
 801b9ca:	2303      	movs	r3, #3
 801b9cc:	4622      	mov	r2, r4
 801b9ce:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b9d2:	2055      	movs	r0, #85	; 0x55
 801b9d4:	f001 fafe 	bl	801cfd4 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801b9d8:	88aa      	ldrh	r2, [r5, #4]
 801b9da:	4943      	ldr	r1, [pc, #268]	; (801bae8 <Spectral_Axes_Text+0x1b4>)
 801b9dc:	4620      	mov	r0, r4
 801b9de:	f004 fe17 	bl	8020610 <sprintf>
		TFT_DisplayString(165, 416, (uint8_t *)buffer, LEFT_MODE);
 801b9e2:	2303      	movs	r3, #3
 801b9e4:	4622      	mov	r2, r4
 801b9e6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b9ea:	20a5      	movs	r0, #165	; 0xa5
 801b9ec:	f001 faf2 	bl	801cfd4 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801b9f0:	88ea      	ldrh	r2, [r5, #6]
 801b9f2:	493d      	ldr	r1, [pc, #244]	; (801bae8 <Spectral_Axes_Text+0x1b4>)
 801b9f4:	4620      	mov	r0, r4
 801b9f6:	f004 fe0b 	bl	8020610 <sprintf>
		TFT_DisplayString(245, 416, (uint8_t *)buffer, LEFT_MODE);
 801b9fa:	2303      	movs	r3, #3
 801b9fc:	4622      	mov	r2, r4
 801b9fe:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801ba02:	20f5      	movs	r0, #245	; 0xf5
 801ba04:	f001 fae6 	bl	801cfd4 <TFT_DisplayString>
		TFT_DrawChar(62, 43, '.');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 801ba08:	b003      	add	sp, #12
 801ba0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba0c:	4f37      	ldr	r7, [pc, #220]	; (801baec <Spectral_Axes_Text+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 801ba0e:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 801ba10:	bf14      	ite	ne
 801ba12:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 801ba14:	7038      	strbeq	r0, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801ba16:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 801ba1a:	bf18      	it	ne
 801ba1c:	703b      	strbne	r3, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801ba1e:	f001 f9bd 	bl	801cd9c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801ba22:	2063      	movs	r0, #99	; 0x63
 801ba24:	f001 f9c0 	bl	801cda8 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801ba28:	482e      	ldr	r0, [pc, #184]	; (801bae4 <Spectral_Axes_Text+0x1b0>)
 801ba2a:	f001 f9b1 	bl	801cd90 <TFT_SetFont>
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801ba2e:	882a      	ldrh	r2, [r5, #0]
 801ba30:	492d      	ldr	r1, [pc, #180]	; (801bae8 <Spectral_Axes_Text+0x1b4>)
 801ba32:	4620      	mov	r0, r4
 801ba34:	f004 fdec 	bl	8020610 <sprintf>
		TFT_DisplayString(65, 258, (uint8_t *)buffer, LEFT_MODE);
 801ba38:	2303      	movs	r3, #3
 801ba3a:	4622      	mov	r2, r4
 801ba3c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ba40:	2041      	movs	r0, #65	; 0x41
 801ba42:	f001 fac7 	bl	801cfd4 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801ba46:	886a      	ldrh	r2, [r5, #2]
 801ba48:	4927      	ldr	r1, [pc, #156]	; (801bae8 <Spectral_Axes_Text+0x1b4>)
 801ba4a:	4620      	mov	r0, r4
 801ba4c:	f004 fde0 	bl	8020610 <sprintf>
		TFT_DisplayString(165, 258, (uint8_t *)buffer, LEFT_MODE);
 801ba50:	2303      	movs	r3, #3
 801ba52:	4622      	mov	r2, r4
 801ba54:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ba58:	20a5      	movs	r0, #165	; 0xa5
 801ba5a:	f001 fabb 	bl	801cfd4 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801ba5e:	88aa      	ldrh	r2, [r5, #4]
 801ba60:	4921      	ldr	r1, [pc, #132]	; (801bae8 <Spectral_Axes_Text+0x1b4>)
 801ba62:	4620      	mov	r0, r4
 801ba64:	f004 fdd4 	bl	8020610 <sprintf>
		TFT_DisplayString(265, 258, (uint8_t *)buffer, LEFT_MODE);
 801ba68:	2303      	movs	r3, #3
 801ba6a:	4622      	mov	r2, r4
 801ba6c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ba70:	f240 1009 	movw	r0, #265	; 0x109
 801ba74:	f001 faae 	bl	801cfd4 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801ba78:	88ea      	ldrh	r2, [r5, #6]
 801ba7a:	491b      	ldr	r1, [pc, #108]	; (801bae8 <Spectral_Axes_Text+0x1b4>)
 801ba7c:	4620      	mov	r0, r4
 801ba7e:	f004 fdc7 	bl	8020610 <sprintf>
		TFT_DisplayString(365, 258, (uint8_t *)buffer, LEFT_MODE);
 801ba82:	2303      	movs	r3, #3
 801ba84:	4622      	mov	r2, r4
 801ba86:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ba8a:	f240 106d 	movw	r0, #365	; 0x16d
 801ba8e:	f001 faa1 	bl	801cfd4 <TFT_DisplayString>
		TFT_DrawChar(65, 250, '0');
 801ba92:	2230      	movs	r2, #48	; 0x30
 801ba94:	21fa      	movs	r1, #250	; 0xfa
 801ba96:	2041      	movs	r0, #65	; 0x41
 801ba98:	f001 fa44 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(57, 149, '0');
 801ba9c:	2230      	movs	r2, #48	; 0x30
 801ba9e:	2195      	movs	r1, #149	; 0x95
 801baa0:	2039      	movs	r0, #57	; 0x39
 801baa2:	f001 fa3f 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(62, 149, '.');
 801baa6:	222e      	movs	r2, #46	; 0x2e
 801baa8:	2195      	movs	r1, #149	; 0x95
 801baaa:	203e      	movs	r0, #62	; 0x3e
 801baac:	f001 fa3a 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(67, 149, '5');
 801bab0:	2235      	movs	r2, #53	; 0x35
 801bab2:	2195      	movs	r1, #149	; 0x95
 801bab4:	2043      	movs	r0, #67	; 0x43
 801bab6:	f001 fa35 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 801baba:	2231      	movs	r2, #49	; 0x31
 801babc:	212b      	movs	r1, #43	; 0x2b
 801babe:	2039      	movs	r0, #57	; 0x39
 801bac0:	f001 fa30 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '.');
 801bac4:	222e      	movs	r2, #46	; 0x2e
 801bac6:	212b      	movs	r1, #43	; 0x2b
 801bac8:	203e      	movs	r0, #62	; 0x3e
 801baca:	f001 fa2b 	bl	801cf24 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 801bace:	2230      	movs	r2, #48	; 0x30
 801bad0:	212b      	movs	r1, #43	; 0x2b
 801bad2:	2043      	movs	r0, #67	; 0x43
 801bad4:	f001 fa26 	bl	801cf24 <TFT_DrawChar>
		TFT_direction = 0x00;
 801bad8:	2300      	movs	r3, #0
 801bada:	703b      	strb	r3, [r7, #0]
}
 801badc:	e794      	b.n	801ba08 <Spectral_Axes_Text+0xd4>
 801bade:	bf00      	nop
 801bae0:	20055948 	.word	0x20055948
 801bae4:	20000210 	.word	0x20000210
 801bae8:	0803214a 	.word	0x0803214a
 801baec:	200056a0 	.word	0x200056a0

0801baf0 <Spectral_DrawGraph_Const>:
		memset(graph_data_old, 0, sizeof(graph_data_old));	
}


void Spectral_DrawGraph_Const(uint16_t ZeroX, uint16_t ZeroY, uint16_t *GraphData, uint16_t color, uint8_t direction)
{
 801baf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baf4:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		uint16_t i, j = 0;
		uint16_t graph_data[335];
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801baf8:	f1b8 0f00 	cmp.w	r8, #0
 801bafc:	bf0c      	ite	eq
 801bafe:	f04f 09f0 	moveq.w	r9, #240	; 0xf0
 801bb02:	f44f 79a5 	movne.w	r9, #330	; 0x14a
{
 801bb06:	4682      	mov	sl, r0
 801bb08:	461f      	mov	r7, r3
 801bb0a:	4614      	mov	r4, r2
 801bb0c:	eb02 0649 	add.w	r6, r2, r9, lsl #1
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bb10:	2500      	movs	r5, #0
		uint8_t	step = (direction == 0x00)? 4 :3;
	
		for(i = 0; i < graph_lenht; i++)
	{
		if(direction == 0x00){
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801bb12:	f100 0b01 	add.w	fp, r0, #1
 801bb16:	b2a8      	uxth	r0, r5
		if(direction == 0x00){
 801bb18:	f1b8 0f00 	cmp.w	r8, #0
 801bb1c:	d10e      	bne.n	801bb3c <Spectral_DrawGraph_Const+0x4c>
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801bb1e:	8863      	ldrh	r3, [r4, #2]
 801bb20:	8821      	ldrh	r1, [r4, #0]
 801bb22:	eb00 020b 	add.w	r2, r0, fp
 801bb26:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801bb2a:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801bb2e:	4450      	add	r0, sl
		else if(direction == 0x01)
		{
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801bb30:	9700      	str	r7, [sp, #0]
 801bb32:	b29b      	uxth	r3, r3
 801bb34:	b292      	uxth	r2, r2
 801bb36:	b289      	uxth	r1, r1
 801bb38:	b280      	uxth	r0, r0
 801bb3a:	e013      	b.n	801bb64 <Spectral_DrawGraph_Const+0x74>
		else if(direction == 0x01)
 801bb3c:	f1b8 0f01 	cmp.w	r8, #1
 801bb40:	d11d      	bne.n	801bb7e <Spectral_DrawGraph_Const+0x8e>
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801bb42:	8872      	ldrh	r2, [r6, #2]
 801bb44:	f8b6 e000 	ldrh.w	lr, [r6]
 801bb48:	9700      	str	r7, [sp, #0]
 801bb4a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801bb4e:	f100 0149 	add.w	r1, r0, #73	; 0x49
 801bb52:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801bb56:	f1ce 0efd 	rsb	lr, lr, #253	; 0xfd
 801bb5a:	b29b      	uxth	r3, r3
 801bb5c:	b292      	uxth	r2, r2
 801bb5e:	b289      	uxth	r1, r1
 801bb60:	fa1f f08e 	uxth.w	r0, lr
 801bb64:	3501      	adds	r5, #1
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801bb66:	f000 fe8d 	bl	801c884 <TFT_DrawLine>
		for(i = 0; i < graph_lenht; i++)
 801bb6a:	b2ab      	uxth	r3, r5
 801bb6c:	4599      	cmp	r9, r3
 801bb6e:	f104 0402 	add.w	r4, r4, #2
 801bb72:	f1a6 0602 	sub.w	r6, r6, #2
 801bb76:	d8ce      	bhi.n	801bb16 <Spectral_DrawGraph_Const+0x26>
	}
}
 801bb78:	b003      	add	sp, #12
 801bb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801bb7e:	f100 034d 	add.w	r3, r0, #77	; 0x4d
 801bb82:	8862      	ldrh	r2, [r4, #2]
 801bb84:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 801bb88:	8820      	ldrh	r0, [r4, #0]
 801bb8a:	3212      	adds	r2, #18
 801bb8c:	3012      	adds	r0, #18
 801bb8e:	e7cf      	b.n	801bb30 <Spectral_DrawGraph_Const+0x40>

0801bb90 <Spectral_DrawGraph_Line2>:
				flag_spectral = 0;}
					}
}

void Spectral_DrawGraph_Line2(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint16_t color, uint8_t direction)
{
 801bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb94:	b087      	sub	sp, #28
 801bb96:	4691      	mov	r9, r2
 801bb98:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801bb9c:	9004      	str	r0, [sp, #16]
    float buf_pix;
//    static uint16_t
    uint16_t i, j = 0;
    static uint16_t GraphData_Prev[355];
    uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bb9e:	2e00      	cmp	r6, #0
 801bba0:	bf0c      	ite	eq
 801bba2:	23f0      	moveq	r3, #240	; 0xf0
 801bba4:	f44f 73a5 	movne.w	r3, #330	; 0x14a
 801bba8:	9303      	str	r3, [sp, #12]
    uint8_t    step = (direction == 0x00)? 4 :3;
    uint16_t  jj = 0, ii = 0;

//    screen_cnt++;
//	screen_cnt > 200 ||
    if( direction != Rotation_Screen_Spectral_Old2){
 801bbaa:	4bc9      	ldr	r3, [pc, #804]	; (801bed0 <Spectral_DrawGraph_Line2+0x340>)
 801bbac:	781a      	ldrb	r2, [r3, #0]
 801bbae:	42b2      	cmp	r2, r6
 801bbb0:	d01b      	beq.n	801bbea <Spectral_DrawGraph_Line2+0x5a>
			Rotation_Screen_Spectral_Old2 = direction;
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801bbb2:	2463      	movs	r4, #99	; 0x63
			Rotation_Screen_Spectral_Old2 = direction;
 801bbb4:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801bbb6:	f240 120f 	movw	r2, #271	; 0x10f
 801bbba:	f240 13a5 	movw	r3, #421	; 0x1a5
 801bbbe:	9400      	str	r4, [sp, #0]
 801bbc0:	2137      	movs	r1, #55	; 0x37
 801bbc2:	2001      	movs	r0, #1
 801bbc4:	f000 febb 	bl	801c93e <TFT_FillRectangle>

        if(Graph_Field&PPF_Bands)
 801bbc8:	4bc2      	ldr	r3, [pc, #776]	; (801bed4 <Spectral_DrawGraph_Line2+0x344>)
 801bbca:	781b      	ldrb	r3, [r3, #0]
 801bbcc:	07db      	lsls	r3, r3, #31
 801bbce:	f140 8087 	bpl.w	801bce0 <Spectral_DrawGraph_Line2+0x150>
        {
            Spectral_PAR_Range(direction);
 801bbd2:	4630      	mov	r0, r6
 801bbd4:	f7ff fdcc 	bl	801b770 <Spectral_PAR_Range>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
        }

//    Spectral_Axes(direction);
//    Spectral_Axes_Text(direction);
	memset(GraphData_Prev, 0, sizeof(GraphData_Prev));
 801bbd8:	f240 22c6 	movw	r2, #710	; 0x2c6
 801bbdc:	2100      	movs	r1, #0
 801bbde:	48be      	ldr	r0, [pc, #760]	; (801bed8 <Spectral_DrawGraph_Line2+0x348>)
 801bbe0:	f004 fd0d 	bl	80205fe <memset>
    screen_cnt = 0;
 801bbe4:	4bbd      	ldr	r3, [pc, #756]	; (801bedc <Spectral_DrawGraph_Line2+0x34c>)
 801bbe6:	2200      	movs	r2, #0
 801bbe8:	801a      	strh	r2, [r3, #0]
    }
    flag_refresh = 1;
 801bbea:	4bbd      	ldr	r3, [pc, #756]	; (801bee0 <Spectral_DrawGraph_Line2+0x350>)
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);

//          DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
            flag_spectral = 0;
        } else if(direction == 0x02)
				{flag_spectral = 1; 
 801bbec:	f8df b300 	ldr.w	fp, [pc, #768]	; 801bef0 <Spectral_DrawGraph_Line2+0x360>
 801bbf0:	4dbc      	ldr	r5, [pc, #752]	; (801bee4 <Spectral_DrawGraph_Line2+0x354>)
    flag_refresh = 1;
 801bbf2:	2401      	movs	r4, #1
 801bbf4:	701c      	strb	r4, [r3, #0]
    i_coord = 0;
 801bbf6:	4bbc      	ldr	r3, [pc, #752]	; (801bee8 <Spectral_DrawGraph_Line2+0x358>)
 801bbf8:	2200      	movs	r2, #0
 801bbfa:	801a      	strh	r2, [r3, #0]
 801bbfc:	1c63      	adds	r3, r4, #1
        if(direction == 0x00){
 801bbfe:	2e00      	cmp	r6, #0
 801bc00:	f040 8098 	bne.w	801bd34 <Spectral_DrawGraph_Line2+0x1a4>
            flag_spectral = 1;
 801bc04:	2201      	movs	r2, #1
            			if((i+4)%40 == 0) i++;
 801bc06:	1d20      	adds	r0, r4, #4
 801bc08:	2128      	movs	r1, #40	; 0x28
            flag_spectral = 1;
 801bc0a:	f88b 2000 	strb.w	r2, [fp]
            			if((i+4)%40 == 0) i++;
 801bc0e:	fb90 f2f1 	sdiv	r2, r0, r1
 801bc12:	fb01 0212 	mls	r2, r1, r2, r0
 801bc16:	b902      	cbnz	r2, 801bc1a <Spectral_DrawGraph_Line2+0x8a>
 801bc18:	b29c      	uxth	r4, r3
            			if(412-GraphData[i] < 181)
 801bc1a:	0063      	lsls	r3, r4, #1
 801bc1c:	9305      	str	r3, [sp, #20]
 801bc1e:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801bc22:	9a04      	ldr	r2, [sp, #16]
 801bc24:	4fb1      	ldr	r7, [pc, #708]	; (801beec <Spectral_DrawGraph_Line2+0x35c>)
 801bc26:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801bc2a:	2bb4      	cmp	r3, #180	; 0xb4
 801bc2c:	eb04 0a02 	add.w	sl, r4, r2
 801bc30:	b299      	uxth	r1, r3
 801bc32:	dc5f      	bgt.n	801bcf4 <Spectral_DrawGraph_Line2+0x164>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 180, Vertical_color_dara[i]);
 801bc34:	fa1f f88a 	uxth.w	r8, sl
 801bc38:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bc3c:	9300      	str	r3, [sp, #0]
 801bc3e:	4642      	mov	r2, r8
 801bc40:	23b4      	movs	r3, #180	; 0xb4
 801bc42:	4640      	mov	r0, r8
 801bc44:	f001 fa0e 	bl	801d064 <DrawLineX>
            				DrawLineX(ZeroX+i, 182, ZeroX+i, 256, Vertical_color_dara[i]);
 801bc48:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bc4c:	9300      	str	r3, [sp, #0]
 801bc4e:	4642      	mov	r2, r8
 801bc50:	f44f 7380 	mov.w	r3, #256	; 0x100
 801bc54:	21b6      	movs	r1, #182	; 0xb6
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801bc56:	4640      	mov	r0, r8
 801bc58:	f001 fa04 	bl	801d064 <DrawLineX>
							DrawLineX(ZeroX+i, 258, ZeroX+i, 333, Vertical_color_dara[i]);
 801bc5c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bc60:	9300      	str	r3, [sp, #0]
 801bc62:	4642      	mov	r2, r8
 801bc64:	f240 134d 	movw	r3, #333	; 0x14d
 801bc68:	f44f 7181 	mov.w	r1, #258	; 0x102
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801bc6c:	4640      	mov	r0, r8
 801bc6e:	f001 f9f9 	bl	801d064 <DrawLineX>
							DrawLineX(ZeroX+i, 335, ZeroX+i, 411, Vertical_color_dara[i]);
 801bc72:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bc76:	9300      	str	r3, [sp, #0]
 801bc78:	4642      	mov	r2, r8
 801bc7a:	f240 139b 	movw	r3, #411	; 0x19b
 801bc7e:	f240 114f 	movw	r1, #335	; 0x14f
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801bc82:	4610      	mov	r0, r2
 801bc84:	f001 f9ee 	bl	801d064 <DrawLineX>
						if(GraphData_Prev[i]>GraphData[i])	DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 412 - GraphData_Prev[i], TFT_Black_Bkgr);
 801bc88:	4b93      	ldr	r3, [pc, #588]	; (801bed8 <Spectral_DrawGraph_Line2+0x348>)
 801bc8a:	0062      	lsls	r2, r4, #1
 801bc8c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801bc90:	f839 1002 	ldrh.w	r1, [r9, r2]
 801bc94:	428b      	cmp	r3, r1
 801bc96:	d90c      	bls.n	801bcb2 <Spectral_DrawGraph_Line2+0x122>
 801bc98:	2063      	movs	r0, #99	; 0x63
 801bc9a:	fa1f f28a 	uxth.w	r2, sl
 801bc9e:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801bca2:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801bca6:	9000      	str	r0, [sp, #0]
 801bca8:	b29b      	uxth	r3, r3
 801bcaa:	b289      	uxth	r1, r1
 801bcac:	4610      	mov	r0, r2
				}

//				DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);


				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801bcae:	f001 f9d9 	bl	801d064 <DrawLineX>

//				DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
				flag_spectral = 0;}
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	f88b 3000 	strb.w	r3, [fp]
    for(i = 1; i < graph_lenht; i++)
 801bcb8:	3401      	adds	r4, #1
 801bcba:	9b03      	ldr	r3, [sp, #12]
 801bcbc:	b2a4      	uxth	r4, r4
 801bcbe:	42a3      	cmp	r3, r4
 801bcc0:	d89c      	bhi.n	801bbfc <Spectral_DrawGraph_Line2+0x6c>
					}
    memcpy(GraphData_Prev, GraphData, sizeof(GraphData_Prev));
 801bcc2:	f240 22c6 	movw	r2, #710	; 0x2c6
 801bcc6:	4649      	mov	r1, r9
 801bcc8:	4883      	ldr	r0, [pc, #524]	; (801bed8 <Spectral_DrawGraph_Line2+0x348>)
 801bcca:	f004 fc8d 	bl	80205e8 <memcpy>
    Spectral_Axes(direction);
 801bcce:	4630      	mov	r0, r6
 801bcd0:	f7ff fc80 	bl	801b5d4 <Spectral_Axes>
	Spectral_Axes_Text(direction);
 801bcd4:	4630      	mov	r0, r6
}
 801bcd6:	b007      	add	sp, #28
 801bcd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Spectral_Axes_Text(direction);
 801bcdc:	f7ff be2a 	b.w	801b934 <Spectral_Axes_Text>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
 801bce0:	9400      	str	r4, [sp, #0]
 801bce2:	f240 13a5 	movw	r3, #421	; 0x1a5
 801bce6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801bcea:	2137      	movs	r1, #55	; 0x37
 801bcec:	2005      	movs	r0, #5
 801bcee:	f000 fe26 	bl	801c93e <TFT_FillRectangle>
 801bcf2:	e771      	b.n	801bbd8 <Spectral_DrawGraph_Line2+0x48>
            			else if(412-GraphData[i] < 257)
 801bcf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bcf8:	dc08      	bgt.n	801bd0c <Spectral_DrawGraph_Line2+0x17c>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801bcfa:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bcfe:	9300      	str	r3, [sp, #0]
 801bd00:	fa1f f88a 	uxth.w	r8, sl
 801bd04:	f44f 7380 	mov.w	r3, #256	; 0x100
 801bd08:	4642      	mov	r2, r8
 801bd0a:	e7a4      	b.n	801bc56 <Spectral_DrawGraph_Line2+0xc6>
            			else if(412-GraphData[i] < 334)
 801bd0c:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 801bd10:	da08      	bge.n	801bd24 <Spectral_DrawGraph_Line2+0x194>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801bd12:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bd16:	9300      	str	r3, [sp, #0]
 801bd18:	fa1f f88a 	uxth.w	r8, sl
 801bd1c:	f240 134d 	movw	r3, #333	; 0x14d
 801bd20:	4642      	mov	r2, r8
 801bd22:	e7a3      	b.n	801bc6c <Spectral_DrawGraph_Line2+0xdc>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801bd24:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801bd28:	9300      	str	r3, [sp, #0]
 801bd2a:	fa1f f28a 	uxth.w	r2, sl
 801bd2e:	f240 139b 	movw	r3, #411	; 0x19b
 801bd32:	e7a6      	b.n	801bc82 <Spectral_DrawGraph_Line2+0xf2>
        else if(direction == 0x01)
 801bd34:	2e01      	cmp	r6, #1
 801bd36:	d16a      	bne.n	801be0e <Spectral_DrawGraph_Line2+0x27e>
            if((i+18)%50 == 0) i++;
 801bd38:	f104 0012 	add.w	r0, r4, #18
 801bd3c:	2132      	movs	r1, #50	; 0x32
 801bd3e:	fb90 f2f1 	sdiv	r2, r0, r1
 801bd42:	fb01 0212 	mls	r2, r1, r2, r0
            flag_spectral = 1;
 801bd46:	f88b 6000 	strb.w	r6, [fp]
            if((i+18)%50 == 0) i++;
 801bd4a:	b902      	cbnz	r2, 801bd4e <Spectral_DrawGraph_Line2+0x1be>
 801bd4c:	b29c      	uxth	r4, r3
            if(253 - GraphData[graph_lenht-i] < 98)
 801bd4e:	9b03      	ldr	r3, [sp, #12]
 801bd50:	eba3 0804 	sub.w	r8, r3, r4
 801bd54:	f104 0748 	add.w	r7, r4, #72	; 0x48
 801bd58:	f839 3018 	ldrh.w	r3, [r9, r8, lsl #1]
 801bd5c:	f1c3 03fd 	rsb	r3, r3, #253	; 0xfd
 801bd60:	2b61      	cmp	r3, #97	; 0x61
 801bd62:	b298      	uxth	r0, r3
 801bd64:	dc38      	bgt.n	801bdd8 <Spectral_DrawGraph_Line2+0x248>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 97, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bd66:	b2bf      	uxth	r7, r7
 801bd68:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bd6c:	9300      	str	r3, [sp, #0]
 801bd6e:	2261      	movs	r2, #97	; 0x61
 801bd70:	463b      	mov	r3, r7
 801bd72:	4639      	mov	r1, r7
 801bd74:	f001 f976 	bl	801d064 <DrawLineX>
            	DrawLineX(99, 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bd78:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bd7c:	9300      	str	r3, [sp, #0]
 801bd7e:	2296      	movs	r2, #150	; 0x96
 801bd80:	463b      	mov	r3, r7
 801bd82:	4639      	mov	r1, r7
 801bd84:	2063      	movs	r0, #99	; 0x63
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bd86:	f001 f96d 	bl	801d064 <DrawLineX>
				DrawLineX(152, 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bd8a:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bd8e:	9300      	str	r3, [sp, #0]
 801bd90:	22cb      	movs	r2, #203	; 0xcb
 801bd92:	463b      	mov	r3, r7
 801bd94:	4639      	mov	r1, r7
 801bd96:	2098      	movs	r0, #152	; 0x98
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bd98:	f001 f964 	bl	801d064 <DrawLineX>
				DrawLineX(205, 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bd9c:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bda0:	9300      	str	r3, [sp, #0]
 801bda2:	22fc      	movs	r2, #252	; 0xfc
 801bda4:	463b      	mov	r3, r7
 801bda6:	4639      	mov	r1, r7
 801bda8:	20cd      	movs	r0, #205	; 0xcd
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bdaa:	f001 f95b 	bl	801d064 <DrawLineX>
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);
 801bdae:	4b4a      	ldr	r3, [pc, #296]	; (801bed8 <Spectral_DrawGraph_Line2+0x348>)
 801bdb0:	f839 0018 	ldrh.w	r0, [r9, r8, lsl #1]
 801bdb4:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
 801bdb8:	4282      	cmp	r2, r0
 801bdba:	f67f af7a 	bls.w	801bcb2 <Spectral_DrawGraph_Line2+0x122>
 801bdbe:	f104 0348 	add.w	r3, r4, #72	; 0x48
 801bdc2:	b29b      	uxth	r3, r3
 801bdc4:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801bdc8:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801bdcc:	2163      	movs	r1, #99	; 0x63
 801bdce:	9100      	str	r1, [sp, #0]
 801bdd0:	b292      	uxth	r2, r2
 801bdd2:	4619      	mov	r1, r3
 801bdd4:	b280      	uxth	r0, r0
 801bdd6:	e76a      	b.n	801bcae <Spectral_DrawGraph_Line2+0x11e>
            else if(253 - GraphData[graph_lenht-i] < 151)
 801bdd8:	2b96      	cmp	r3, #150	; 0x96
 801bdda:	dc07      	bgt.n	801bdec <Spectral_DrawGraph_Line2+0x25c>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bddc:	b2bf      	uxth	r7, r7
 801bdde:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bde2:	9300      	str	r3, [sp, #0]
 801bde4:	2296      	movs	r2, #150	; 0x96
 801bde6:	463b      	mov	r3, r7
 801bde8:	4639      	mov	r1, r7
 801bdea:	e7cc      	b.n	801bd86 <Spectral_DrawGraph_Line2+0x1f6>
            else if(253 - GraphData[graph_lenht-i] < 204)
 801bdec:	2bcb      	cmp	r3, #203	; 0xcb
 801bdee:	dc07      	bgt.n	801be00 <Spectral_DrawGraph_Line2+0x270>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801bdf0:	b2bf      	uxth	r7, r7
 801bdf2:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801bdf6:	9300      	str	r3, [sp, #0]
 801bdf8:	22cb      	movs	r2, #203	; 0xcb
 801bdfa:	463b      	mov	r3, r7
 801bdfc:	4639      	mov	r1, r7
 801bdfe:	e7cb      	b.n	801bd98 <Spectral_DrawGraph_Line2+0x208>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801be00:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
 801be04:	9200      	str	r2, [sp, #0]
 801be06:	b2bb      	uxth	r3, r7
 801be08:	22fc      	movs	r2, #252	; 0xfc
 801be0a:	4619      	mov	r1, r3
 801be0c:	e7cd      	b.n	801bdaa <Spectral_DrawGraph_Line2+0x21a>
        } else if(direction == 0x02)
 801be0e:	2e02      	cmp	r6, #2
 801be10:	f47f af52 	bne.w	801bcb8 <Spectral_DrawGraph_Line2+0x128>
				{flag_spectral = 1; 
 801be14:	2201      	movs	r2, #1
				if((i+2)%50 == 0) i++;
 801be16:	1ca0      	adds	r0, r4, #2
 801be18:	2132      	movs	r1, #50	; 0x32
				{flag_spectral = 1; 
 801be1a:	f88b 2000 	strb.w	r2, [fp]
				if((i+2)%50 == 0) i++;
 801be1e:	fb90 f2f1 	sdiv	r2, r0, r1
 801be22:	fb01 0212 	mls	r2, r1, r2, r0
 801be26:	b902      	cbnz	r2, 801be2a <Spectral_DrawGraph_Line2+0x29a>
 801be28:	b29c      	uxth	r4, r3
				if(GraphData[i]+18 > 174)
 801be2a:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801be2e:	2b9c      	cmp	r3, #156	; 0x9c
 801be30:	ea4f 0844 	mov.w	r8, r4, lsl #1
 801be34:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 801be38:	f103 0012 	add.w	r0, r3, #18
 801be3c:	dd32      	ble.n	801bea4 <Spectral_DrawGraph_Line2+0x314>
					DrawLineX(GraphData[i]+18, 76+i, 175, 76+i, Horizontal_color_dara[i]);
 801be3e:	b2bf      	uxth	r7, r7
 801be40:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801be44:	9300      	str	r3, [sp, #0]
 801be46:	22af      	movs	r2, #175	; 0xaf
 801be48:	463b      	mov	r3, r7
 801be4a:	4639      	mov	r1, r7
 801be4c:	b280      	uxth	r0, r0
 801be4e:	f001 f909 	bl	801d064 <DrawLineX>
					DrawLineX(173, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801be52:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801be56:	9300      	str	r3, [sp, #0]
 801be58:	227a      	movs	r2, #122	; 0x7a
 801be5a:	463b      	mov	r3, r7
 801be5c:	4639      	mov	r1, r7
 801be5e:	20ad      	movs	r0, #173	; 0xad
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801be60:	f001 f900 	bl	801d064 <DrawLineX>
					DrawLineX(120, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801be64:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801be68:	9300      	str	r3, [sp, #0]
 801be6a:	2245      	movs	r2, #69	; 0x45
 801be6c:	463b      	mov	r3, r7
 801be6e:	4639      	mov	r1, r7
 801be70:	2078      	movs	r0, #120	; 0x78
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801be72:	f001 f8f7 	bl	801d064 <DrawLineX>
					DrawLineX(67, 76+i, 19, 76+i, Horizontal_color_dara[i]);
 801be76:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801be7a:	9300      	str	r3, [sp, #0]
 801be7c:	2213      	movs	r2, #19
 801be7e:	463b      	mov	r3, r7
 801be80:	4639      	mov	r1, r7
 801be82:	2043      	movs	r0, #67	; 0x43
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801be84:	f001 f8ee 	bl	801d064 <DrawLineX>
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801be88:	4b13      	ldr	r3, [pc, #76]	; (801bed8 <Spectral_DrawGraph_Line2+0x348>)
 801be8a:	f839 0008 	ldrh.w	r0, [r9, r8]
 801be8e:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 801be92:	4282      	cmp	r2, r0
 801be94:	f67f af0d 	bls.w	801bcb2 <Spectral_DrawGraph_Line2+0x122>
 801be98:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 801be9c:	b29b      	uxth	r3, r3
 801be9e:	3212      	adds	r2, #18
 801bea0:	3012      	adds	r0, #18
 801bea2:	e793      	b.n	801bdcc <Spectral_DrawGraph_Line2+0x23c>
				else if(GraphData[i]+18 > 121)
 801bea4:	2b67      	cmp	r3, #103	; 0x67
 801bea6:	dd08      	ble.n	801beba <Spectral_DrawGraph_Line2+0x32a>
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801bea8:	b2bf      	uxth	r7, r7
 801beaa:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801beae:	9300      	str	r3, [sp, #0]
 801beb0:	227a      	movs	r2, #122	; 0x7a
 801beb2:	463b      	mov	r3, r7
 801beb4:	4639      	mov	r1, r7
 801beb6:	b280      	uxth	r0, r0
 801beb8:	e7d2      	b.n	801be60 <Spectral_DrawGraph_Line2+0x2d0>
				else if(GraphData[i]+18 > 68)
 801beba:	2b32      	cmp	r3, #50	; 0x32
 801bebc:	dd1a      	ble.n	801bef4 <Spectral_DrawGraph_Line2+0x364>
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801bebe:	b2bf      	uxth	r7, r7
 801bec0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801bec4:	9300      	str	r3, [sp, #0]
 801bec6:	2245      	movs	r2, #69	; 0x45
 801bec8:	463b      	mov	r3, r7
 801beca:	4639      	mov	r1, r7
 801becc:	b280      	uxth	r0, r0
 801bece:	e7d0      	b.n	801be72 <Spectral_DrawGraph_Line2+0x2e2>
 801bed0:	20093681 	.word	0x20093681
 801bed4:	20005702 	.word	0x20005702
 801bed8:	20009768 	.word	0x20009768
 801bedc:	20009cf8 	.word	0x20009cf8
 801bee0:	20009cf4 	.word	0x20009cf4
 801bee4:	20000a3e 	.word	0x20000a3e
 801bee8:	20009cf6 	.word	0x20009cf6
 801beec:	20000cd2 	.word	0x20000cd2
 801bef0:	20009cf5 	.word	0x20009cf5
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801bef4:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 801bef8:	9200      	str	r2, [sp, #0]
 801befa:	b2bb      	uxth	r3, r7
 801befc:	2212      	movs	r2, #18
 801befe:	4619      	mov	r1, r3
 801bf00:	b280      	uxth	r0, r0
 801bf02:	e7bf      	b.n	801be84 <Spectral_DrawGraph_Line2+0x2f4>

0801bf04 <Rabs_graph_to_display>:



uint16_t Line_Rabs_buff_graph2[355] = {0};
void Rabs_graph_to_display(uint8_t direction, float Line_Rabs_buff[])
{    
 801bf04:	b570      	push	{r4, r5, r6, lr}
 801bf06:	ed2d 8b02 	vpush	{d8}
	uint8_t    step = (direction == 0x00)? 4 :3;
 801bf0a:	eddf 7a23 	vldr	s15, [pc, #140]	; 801bf98 <Rabs_graph_to_display+0x94>
 801bf0e:	ed9f 8a23 	vldr	s16, [pc, #140]	; 801bf9c <Rabs_graph_to_display+0x98>
 801bf12:	2800      	cmp	r0, #0
{    
 801bf14:	b082      	sub	sp, #8
 801bf16:	460e      	mov	r6, r1
	uint16_t  q = 0, res;
	float scale = (direction == 0x00)? 307 : 209; 
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801bf18:	f240 22c6 	movw	r2, #710	; 0x2c6
 801bf1c:	f04f 0100 	mov.w	r1, #0
 801bf20:	481f      	ldr	r0, [pc, #124]	; (801bfa0 <Rabs_graph_to_display+0x9c>)
	uint8_t    step = (direction == 0x00)? 4 :3;
 801bf22:	bf14      	ite	ne
 801bf24:	2403      	movne	r4, #3
 801bf26:	2404      	moveq	r4, #4
 801bf28:	bf08      	it	eq
 801bf2a:	eeb0 8a67 	vmoveq.f32	s16, s15
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801bf2e:	f004 fb66 	bl	80205fe <memset>

	for(uint16_t ic = 0; ic <= 1023; ic+=step){
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801bf32:	4b1c      	ldr	r3, [pc, #112]	; (801bfa4 <Rabs_graph_to_display+0xa0>)
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801bf34:	481a      	ldr	r0, [pc, #104]	; (801bfa0 <Rabs_graph_to_display+0x9c>)
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801bf36:	ed93 7a00 	vldr	s14, [r3]
 801bf3a:	2100      	movs	r1, #0
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801bf3c:	460b      	mov	r3, r1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801bf3e:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801bf42:	edd2 6a00 	vldr	s13, [r2]
 801bf46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bf4a:	4423      	add	r3, r4
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801bf4c:	b28d      	uxth	r5, r1
 801bf4e:	b29b      	uxth	r3, r3
 801bf50:	3101      	adds	r1, #1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801bf52:	ee67 7a88 	vmul.f32	s15, s15, s16
 801bf56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bf5a:	edcd 7a01 	vstr	s15, [sp, #4]
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801bf5e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801bf62:	ee07 2a90 	vmov	s15, r2
 801bf66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf6a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf72:	bf4c      	ite	mi
 801bf74:	eefc 7ac8 	vcvtmi.u32.f32	s15, s16
 801bf78:	eefc 7ae7 	vcvtpl.u32.f32	s15, s15
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801bf7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801bf80:	edcd 7a01 	vstr	s15, [sp, #4]
 801bf84:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801bf88:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801bf8c:	d3d7      	bcc.n	801bf3e <Rabs_graph_to_display+0x3a>
		q++;
	}
}
 801bf8e:	b002      	add	sp, #8
 801bf90:	ecbd 8b02 	vpop	{d8}
 801bf94:	bd70      	pop	{r4, r5, r6, pc}
 801bf96:	bf00      	nop
 801bf98:	43998000 	.word	0x43998000
 801bf9c:	43510000 	.word	0x43510000
 801bfa0:	20009a2e 	.word	0x20009a2e
 801bfa4:	20095ae0 	.word	0x20095ae0

0801bfa8 <Refresh_screen_Graph>:

void Refresh_screen_Graph(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint8_t direction)
{   
 801bfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfac:	b085      	sub	sp, #20
	uint16_t i = 0;
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bfae:	461d      	mov	r5, r3
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);

        } else if(direction == 0x02)
				{
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801bfb0:	f8df 8350 	ldr.w	r8, [pc, #848]	; 801c304 <Refresh_screen_Graph+0x35c>
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	bf0c      	ite	eq
 801bfb8:	23f0      	moveq	r3, #240	; 0xf0
 801bfba:	f44f 73a5 	movne.w	r3, #330	; 0x14a
{   
 801bfbe:	4682      	mov	sl, r0
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bfc0:	9303      	str	r3, [sp, #12]
 801bfc2:	4616      	mov	r6, r2
 801bfc4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801bfc8:	2400      	movs	r4, #0
        if(direction == 0x00){
 801bfca:	2d00      	cmp	r5, #0
 801bfcc:	f040 80a0 	bne.w	801c110 <Refresh_screen_Graph+0x168>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(68, 18+PARGraph_G/4, 375, 20+PARGraph_G/4, TFT_PAR_Green);
 801bfd0:	f898 3000 	ldrb.w	r3, [r8]
 801bfd4:	07db      	lsls	r3, r3, #31
 801bfd6:	d529      	bpl.n	801c02c <Refresh_screen_Graph+0x84>
 801bfd8:	4bc6      	ldr	r3, [pc, #792]	; (801c2f4 <Refresh_screen_Graph+0x34c>)
 801bfda:	8819      	ldrh	r1, [r3, #0]
 801bfdc:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801bfe0:	0889      	lsrs	r1, r1, #2
 801bfe2:	9300      	str	r3, [sp, #0]
 801bfe4:	f240 1277 	movw	r2, #375	; 0x177
 801bfe8:	f101 0314 	add.w	r3, r1, #20
 801bfec:	2044      	movs	r0, #68	; 0x44
 801bfee:	3112      	adds	r1, #18
 801bff0:	f000 fa66 	bl	801c4c0 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_R/4, 375, 20+PARGraph_R/4, TFT_PAR_Red);
 801bff4:	4bc0      	ldr	r3, [pc, #768]	; (801c2f8 <Refresh_screen_Graph+0x350>)
 801bff6:	8819      	ldrh	r1, [r3, #0]
 801bff8:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801bffc:	0889      	lsrs	r1, r1, #2
 801bffe:	9300      	str	r3, [sp, #0]
 801c000:	f240 1277 	movw	r2, #375	; 0x177
 801c004:	f101 0314 	add.w	r3, r1, #20
 801c008:	2044      	movs	r0, #68	; 0x44
 801c00a:	3112      	adds	r1, #18
 801c00c:	f000 fa58 	bl	801c4c0 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_IR/4, 375, 20+PARGraph_IR/4, TFT_PAR_IRed);}
 801c010:	4bba      	ldr	r3, [pc, #744]	; (801c2fc <Refresh_screen_Graph+0x354>)
 801c012:	8819      	ldrh	r1, [r3, #0]
 801c014:	f646 0382 	movw	r3, #26754	; 0x6882
 801c018:	0889      	lsrs	r1, r1, #2
 801c01a:	9300      	str	r3, [sp, #0]
 801c01c:	f240 1277 	movw	r2, #375	; 0x177
 801c020:	f101 0314 	add.w	r3, r1, #20
 801c024:	2044      	movs	r0, #68	; 0x44
 801c026:	3112      	adds	r1, #18
 801c028:	f000 fa4a 	bl	801c4c0 <TFT_FillRectangle_DMA>
 801c02c:	b2a2      	uxth	r2, r4
 801c02e:	f10a 0301 	add.w	r3, sl, #1
 801c032:	eb02 000a 	add.w	r0, r2, sl
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801c036:	8831      	ldrh	r1, [r6, #0]
 801c038:	f898 7000 	ldrb.w	r7, [r8]
 801c03c:	441a      	add	r2, r3
 801c03e:	8873      	ldrh	r3, [r6, #2]
 801c040:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801c044:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801c048:	07ff      	lsls	r7, r7, #31
 801c04a:	b280      	uxth	r0, r0
 801c04c:	b289      	uxth	r1, r1
 801c04e:	b292      	uxth	r2, r2
 801c050:	b29b      	uxth	r3, r3
 801c052:	f140 8161 	bpl.w	801c318 <Refresh_screen_Graph+0x370>
 801c056:	4faa      	ldr	r7, [pc, #680]	; (801c300 <Refresh_screen_Graph+0x358>)
 801c058:	883f      	ldrh	r7, [r7, #0]
 801c05a:	08bf      	lsrs	r7, r7, #2
 801c05c:	eb0a 0c04 	add.w	ip, sl, r4
 801c060:	3712      	adds	r7, #18
 801c062:	4567      	cmp	r7, ip
 801c064:	f280 8158 	bge.w	801c318 <Refresh_screen_Graph+0x370>
 801c068:	4fa2      	ldr	r7, [pc, #648]	; (801c2f4 <Refresh_screen_Graph+0x34c>)
 801c06a:	883f      	ldrh	r7, [r7, #0]
 801c06c:	08bf      	lsrs	r7, r7, #2
 801c06e:	3712      	adds	r7, #18
 801c070:	4567      	cmp	r7, ip
 801c072:	f280 8153 	bge.w	801c31c <Refresh_screen_Graph+0x374>
																																							(ZeroX+i < 19+PARGraph_R/4) ? TFT_PAR_Green :
 801c076:	4fa0      	ldr	r7, [pc, #640]	; (801c2f8 <Refresh_screen_Graph+0x350>)
 801c078:	883f      	ldrh	r7, [r7, #0]
 801c07a:	08bf      	lsrs	r7, r7, #2
 801c07c:	3712      	adds	r7, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801c07e:	4567      	cmp	r7, ip
 801c080:	f280 814f 	bge.w	801c322 <Refresh_screen_Graph+0x37a>
																																							(ZeroX+i < 19+PARGraph_IR/4) ? TFT_PAR_Red : TFT_PAR_IRed) : TFT_Black_Bkgr);
 801c084:	4f9d      	ldr	r7, [pc, #628]	; (801c2fc <Refresh_screen_Graph+0x354>)
 801c086:	f8b7 e000 	ldrh.w	lr, [r7]
 801c08a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801c08e:	f10e 0e12 	add.w	lr, lr, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801c092:	f646 0b82 	movw	fp, #26754	; 0x6882
 801c096:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801c09a:	45e6      	cmp	lr, ip
 801c09c:	bfb8      	it	lt
 801c09e:	465f      	movlt	r7, fp
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
					
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c0a0:	9700      	str	r7, [sp, #0]
 801c0a2:	f000 ffdf 	bl	801d064 <DrawLineX>
 801c0a6:	3401      	adds	r4, #1
	 for(i = 0; i < graph_lenht; i++)
 801c0a8:	9a03      	ldr	r2, [sp, #12]
 801c0aa:	b2a3      	uxth	r3, r4
 801c0ac:	429a      	cmp	r2, r3
 801c0ae:	f106 0602 	add.w	r6, r6, #2
 801c0b2:	f1a9 0902 	sub.w	r9, r9, #2
 801c0b6:	d888      	bhi.n	801bfca <Refresh_screen_Graph+0x22>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
           	:TFT_Black_Bkgr);
				}
			}
		Spectral_Axes(direction);
		 if(Graph_Field&V_lambda)
 801c0b8:	4c92      	ldr	r4, [pc, #584]	; (801c304 <Refresh_screen_Graph+0x35c>)
		Spectral_Axes(direction);
 801c0ba:	4628      	mov	r0, r5
 801c0bc:	f7ff fa8a 	bl	801b5d4 <Spectral_Axes>
		 if(Graph_Field&V_lambda)
 801c0c0:	7822      	ldrb	r2, [r4, #0]
 801c0c2:	0752      	lsls	r2, r2, #29
 801c0c4:	d50e      	bpl.n	801c0e4 <Refresh_screen_Graph+0x13c>
			{
					Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, direction);
 801c0c6:	2114      	movs	r1, #20
 801c0c8:	4608      	mov	r0, r1
 801c0ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801c0ce:	4a8e      	ldr	r2, [pc, #568]	; (801c308 <Refresh_screen_Graph+0x360>)
 801c0d0:	9500      	str	r5, [sp, #0]
 801c0d2:	f7ff fd0d 	bl	801baf0 <Spectral_DrawGraph_Const>
					Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, direction);
 801c0d6:	2114      	movs	r1, #20
 801c0d8:	9500      	str	r5, [sp, #0]
 801c0da:	231f      	movs	r3, #31
 801c0dc:	4a8b      	ldr	r2, [pc, #556]	; (801c30c <Refresh_screen_Graph+0x364>)
 801c0de:	4608      	mov	r0, r1
 801c0e0:	f7ff fd06 	bl	801baf0 <Spectral_DrawGraph_Const>
					}
			
			if(Graph_Field&EbEr_graph)
 801c0e4:	7823      	ldrb	r3, [r4, #0]
 801c0e6:	079b      	lsls	r3, r3, #30
 801c0e8:	d50f      	bpl.n	801c10a <Refresh_screen_Graph+0x162>
					{
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, direction);
 801c0ea:	2114      	movs	r1, #20
 801c0ec:	4608      	mov	r0, r1
 801c0ee:	f240 33ef 	movw	r3, #1007	; 0x3ef
 801c0f2:	4a87      	ldr	r2, [pc, #540]	; (801c310 <Refresh_screen_Graph+0x368>)
 801c0f4:	9500      	str	r5, [sp, #0]
 801c0f6:	f7ff fcfb 	bl	801baf0 <Spectral_DrawGraph_Const>
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, direction);
 801c0fa:	2114      	movs	r1, #20
 801c0fc:	9500      	str	r5, [sp, #0]
 801c0fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801c102:	4a84      	ldr	r2, [pc, #528]	; (801c314 <Refresh_screen_Graph+0x36c>)
 801c104:	4608      	mov	r0, r1
 801c106:	f7ff fcf3 	bl	801baf0 <Spectral_DrawGraph_Const>
					}
}
 801c10a:	b005      	add	sp, #20
 801c10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(direction == 0x01)
 801c110:	2d01      	cmp	r5, #1
 801c112:	d178      	bne.n	801c206 <Refresh_screen_Graph+0x25e>
				if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(76+PARGraph_G/3, 45, 79+PARGraph_G/3,253, TFT_PAR_Green);
 801c114:	f898 3000 	ldrb.w	r3, [r8]
 801c118:	07db      	lsls	r3, r3, #31
 801c11a:	d530      	bpl.n	801c17e <Refresh_screen_Graph+0x1d6>
 801c11c:	4b75      	ldr	r3, [pc, #468]	; (801c2f4 <Refresh_screen_Graph+0x34c>)
 801c11e:	2703      	movs	r7, #3
 801c120:	8818      	ldrh	r0, [r3, #0]
 801c122:	fbb0 f0f7 	udiv	r0, r0, r7
 801c126:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801c12a:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801c12e:	304c      	adds	r0, #76	; 0x4c
 801c130:	9300      	str	r3, [sp, #0]
 801c132:	b292      	uxth	r2, r2
 801c134:	23fd      	movs	r3, #253	; 0xfd
 801c136:	212d      	movs	r1, #45	; 0x2d
 801c138:	b280      	uxth	r0, r0
 801c13a:	f000 f9c1 	bl	801c4c0 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_R/3, 45, 79+PARGraph_R/3,253, TFT_PAR_Red);
 801c13e:	4b6e      	ldr	r3, [pc, #440]	; (801c2f8 <Refresh_screen_Graph+0x350>)
 801c140:	8818      	ldrh	r0, [r3, #0]
 801c142:	fbb0 f0f7 	udiv	r0, r0, r7
 801c146:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801c14a:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801c14e:	304c      	adds	r0, #76	; 0x4c
 801c150:	9300      	str	r3, [sp, #0]
 801c152:	b292      	uxth	r2, r2
 801c154:	23fd      	movs	r3, #253	; 0xfd
 801c156:	212d      	movs	r1, #45	; 0x2d
 801c158:	b280      	uxth	r0, r0
 801c15a:	f000 f9b1 	bl	801c4c0 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_IR/3,45, 79+PARGraph_IR/3,253, TFT_PAR_IRed);}
 801c15e:	4b67      	ldr	r3, [pc, #412]	; (801c2fc <Refresh_screen_Graph+0x354>)
 801c160:	8818      	ldrh	r0, [r3, #0]
 801c162:	fbb0 f7f7 	udiv	r7, r0, r7
 801c166:	f646 0382 	movw	r3, #26754	; 0x6882
 801c16a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 801c16e:	374c      	adds	r7, #76	; 0x4c
 801c170:	9300      	str	r3, [sp, #0]
 801c172:	b292      	uxth	r2, r2
 801c174:	23fd      	movs	r3, #253	; 0xfd
 801c176:	212d      	movs	r1, #45	; 0x2d
 801c178:	b2b8      	uxth	r0, r7
 801c17a:	f000 f9a1 	bl	801c4c0 <TFT_FillRectangle_DMA>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c17e:	f8b9 0000 	ldrh.w	r0, [r9]
 801c182:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801c186:	f898 7000 	ldrb.w	r7, [r8]
 801c18a:	b2a3      	uxth	r3, r4
 801c18c:	f103 0149 	add.w	r1, r3, #73	; 0x49
 801c190:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
 801c194:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801c198:	3348      	adds	r3, #72	; 0x48
 801c19a:	07ff      	lsls	r7, r7, #31
 801c19c:	b280      	uxth	r0, r0
 801c19e:	b289      	uxth	r1, r1
 801c1a0:	b292      	uxth	r2, r2
 801c1a2:	b29b      	uxth	r3, r3
 801c1a4:	f140 80b8 	bpl.w	801c318 <Refresh_screen_Graph+0x370>
											   72+i+1 < 403-PARGraph_IR/3 ? TFT_PAR_IRed:
 801c1a8:	4f54      	ldr	r7, [pc, #336]	; (801c2fc <Refresh_screen_Graph+0x354>)
 801c1aa:	f8b7 c000 	ldrh.w	ip, [r7]
 801c1ae:	f240 1793 	movw	r7, #403	; 0x193
 801c1b2:	f104 0b49 	add.w	fp, r4, #73	; 0x49
 801c1b6:	f04f 0e03 	mov.w	lr, #3
 801c1ba:	fbbc fcfe 	udiv	ip, ip, lr
 801c1be:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c1c2:	45dc      	cmp	ip, fp
 801c1c4:	dc19      	bgt.n	801c1fa <Refresh_screen_Graph+0x252>
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
 801c1c6:	f8df c130 	ldr.w	ip, [pc, #304]	; 801c2f8 <Refresh_screen_Graph+0x350>
 801c1ca:	f8bc c000 	ldrh.w	ip, [ip]
 801c1ce:	fbbc fcfe 	udiv	ip, ip, lr
 801c1d2:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c1d6:	45dc      	cmp	ip, fp
 801c1d8:	dc12      	bgt.n	801c200 <Refresh_screen_Graph+0x258>
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801c1da:	f8df c118 	ldr.w	ip, [pc, #280]	; 801c2f4 <Refresh_screen_Graph+0x34c>
 801c1de:	f8bc c000 	ldrh.w	ip, [ip]
 801c1e2:	fbbc fefe 	udiv	lr, ip, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c1e6:	f644 3cd4 	movw	ip, #19412	; 0x4bd4
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801c1ea:	eba7 0e0e 	sub.w	lr, r7, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801c1ee:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801c1f2:	45de      	cmp	lr, fp
 801c1f4:	bfd8      	it	le
 801c1f6:	4667      	movle	r7, ip
 801c1f8:	e752      	b.n	801c0a0 <Refresh_screen_Graph+0xf8>
 801c1fa:	f646 0782 	movw	r7, #26754	; 0x6882
 801c1fe:	e74f      	b.n	801c0a0 <Refresh_screen_Graph+0xf8>
 801c200:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801c204:	e74c      	b.n	801c0a0 <Refresh_screen_Graph+0xf8>
        } else if(direction == 0x02)
 801c206:	2d02      	cmp	r5, #2
 801c208:	f47f af4d 	bne.w	801c0a6 <Refresh_screen_Graph+0xfe>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801c20c:	f898 3000 	ldrb.w	r3, [r8]
 801c210:	07db      	lsls	r3, r3, #31
 801c212:	d535      	bpl.n	801c280 <Refresh_screen_Graph+0x2d8>
 801c214:	4b37      	ldr	r3, [pc, #220]	; (801c2f4 <Refresh_screen_Graph+0x34c>)
 801c216:	f240 1795 	movw	r7, #405	; 0x195
 801c21a:	8818      	ldrh	r0, [r3, #0]
 801c21c:	f04f 0b03 	mov.w	fp, #3
 801c220:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801c224:	fbb0 f0fb 	udiv	r0, r0, fp
 801c228:	1a3a      	subs	r2, r7, r0
 801c22a:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801c22e:	9300      	str	r3, [sp, #0]
 801c230:	b292      	uxth	r2, r2
 801c232:	23e3      	movs	r3, #227	; 0xe3
 801c234:	2113      	movs	r1, #19
 801c236:	b280      	uxth	r0, r0
 801c238:	f000 f942 	bl	801c4c0 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
 801c23c:	4b2e      	ldr	r3, [pc, #184]	; (801c2f8 <Refresh_screen_Graph+0x350>)
 801c23e:	8818      	ldrh	r0, [r3, #0]
 801c240:	fbb0 f0fb 	udiv	r0, r0, fp
 801c244:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801c248:	1a3a      	subs	r2, r7, r0
 801c24a:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801c24e:	9300      	str	r3, [sp, #0]
 801c250:	b292      	uxth	r2, r2
 801c252:	23e3      	movs	r3, #227	; 0xe3
 801c254:	2113      	movs	r1, #19
 801c256:	b280      	uxth	r0, r0
 801c258:	f000 f932 	bl	801c4c0 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
 801c25c:	4b27      	ldr	r3, [pc, #156]	; (801c2fc <Refresh_screen_Graph+0x354>)
 801c25e:	8818      	ldrh	r0, [r3, #0]
 801c260:	fbb0 fbfb 	udiv	fp, r0, fp
 801c264:	f646 0382 	movw	r3, #26754	; 0x6882
 801c268:	eba7 020b 	sub.w	r2, r7, fp
 801c26c:	f5cb 7bcc 	rsb	fp, fp, #408	; 0x198
 801c270:	9300      	str	r3, [sp, #0]
 801c272:	b292      	uxth	r2, r2
 801c274:	23e3      	movs	r3, #227	; 0xe3
 801c276:	2113      	movs	r1, #19
 801c278:	fa1f f08b 	uxth.w	r0, fp
 801c27c:	f000 f920 	bl	801c4c0 <TFT_FillRectangle_DMA>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c280:	8830      	ldrh	r0, [r6, #0]
 801c282:	8872      	ldrh	r2, [r6, #2]
 801c284:	f898 7000 	ldrb.w	r7, [r8]
 801c288:	b2a3      	uxth	r3, r4
 801c28a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 801c28e:	3012      	adds	r0, #18
 801c290:	3212      	adds	r2, #18
 801c292:	334d      	adds	r3, #77	; 0x4d
 801c294:	07ff      	lsls	r7, r7, #31
 801c296:	b280      	uxth	r0, r0
 801c298:	b289      	uxth	r1, r1
 801c29a:	b292      	uxth	r2, r2
 801c29c:	b29b      	uxth	r3, r3
 801c29e:	d53b      	bpl.n	801c318 <Refresh_screen_Graph+0x370>
 801c2a0:	4f17      	ldr	r7, [pc, #92]	; (801c300 <Refresh_screen_Graph+0x358>)
 801c2a2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801c2a6:	f8b7 e000 	ldrh.w	lr, [r7]
 801c2aa:	2703      	movs	r7, #3
 801c2ac:	fbbe fef7 	udiv	lr, lr, r7
 801c2b0:	45e6      	cmp	lr, ip
 801c2b2:	dc31      	bgt.n	801c318 <Refresh_screen_Graph+0x370>
           	(76+i < 74+PARGraph_G/3) ? TFT_PAR_Blue :
 801c2b4:	f8df c03c 	ldr.w	ip, [pc, #60]	; 801c2f4 <Refresh_screen_Graph+0x34c>
 801c2b8:	f104 0e02 	add.w	lr, r4, #2
 801c2bc:	f8bc c000 	ldrh.w	ip, [ip]
 801c2c0:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c2c4:	45f4      	cmp	ip, lr
 801c2c6:	dc29      	bgt.n	801c31c <Refresh_screen_Graph+0x374>
           	(76+i < 74+PARGraph_R/3) ? TFT_PAR_Green :
 801c2c8:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801c2f8 <Refresh_screen_Graph+0x350>
 801c2cc:	f8bc c000 	ldrh.w	ip, [ip]
 801c2d0:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c2d4:	45f4      	cmp	ip, lr
 801c2d6:	dc24      	bgt.n	801c322 <Refresh_screen_Graph+0x37a>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801c2d8:	f8df c020 	ldr.w	ip, [pc, #32]	; 801c2fc <Refresh_screen_Graph+0x354>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c2dc:	f646 0b82 	movw	fp, #26754	; 0x6882
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801c2e0:	f8bc c000 	ldrh.w	ip, [ip]
 801c2e4:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801c2e8:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801c2ec:	45f4      	cmp	ip, lr
 801c2ee:	bfd8      	it	le
 801c2f0:	465f      	movle	r7, fp
 801c2f2:	e6d5      	b.n	801c0a0 <Refresh_screen_Graph+0xf8>
 801c2f4:	20095b8c 	.word	0x20095b8c
 801c2f8:	20095ce4 	.word	0x20095ce4
 801c2fc:	20095a40 	.word	0x20095a40
 801c300:	20095a42 	.word	0x20095a42
 801c304:	20005702 	.word	0x20005702
 801c308:	20090d82 	.word	0x20090d82
 801c30c:	20091320 	.word	0x20091320
 801c310:	2009105a 	.word	0x2009105a
 801c314:	20090abc 	.word	0x20090abc
 801c318:	2763      	movs	r7, #99	; 0x63
 801c31a:	e6c1      	b.n	801c0a0 <Refresh_screen_Graph+0xf8>
 801c31c:	f644 37d4 	movw	r7, #19412	; 0x4bd4
 801c320:	e6be      	b.n	801c0a0 <Refresh_screen_Graph+0xf8>
 801c322:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801c326:	e6bb      	b.n	801c0a0 <Refresh_screen_Graph+0xf8>

0801c328 <TS_IO_Read>:
{

  }

uint8_t TS_IO_Read(uint8_t DeviceAddr, uint8_t Reg)
{
 801c328:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 801c32a:	aa06      	add	r2, sp, #24
 801c32c:	2300      	movs	r3, #0
 801c32e:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x100);
 801c332:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c336:	9302      	str	r3, [sp, #8]
 801c338:	2301      	movs	r3, #1
 801c33a:	e88d 000c 	stmia.w	sp, {r2, r3}
 801c33e:	460a      	mov	r2, r1
 801c340:	4601      	mov	r1, r0
 801c342:	4804      	ldr	r0, [pc, #16]	; (801c354 <TS_IO_Read+0x2c>)
 801c344:	f7e6 faf0 	bl	8002928 <HAL_I2C_Mem_Read>

  return read_value;
}
 801c348:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801c34c:	b007      	add	sp, #28
 801c34e:	f85d fb04 	ldr.w	pc, [sp], #4
 801c352:	bf00      	nop
 801c354:	20095768 	.word	0x20095768

0801c358 <TS_ReadID>:
  HAL_I2C_Mem_Write(&hi2c1, DeviceAddr, (uint8_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x100);
  if(status != HAL_OK) Error();
}

uint8_t TS_ReadID(uint8_t DeviceAddr)
{
 801c358:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 801c35a:	2300      	movs	r3, #0
{
 801c35c:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 801c35e:	f88d 3007 	strb.w	r3, [sp, #7]
 801c362:	2403      	movs	r4, #3
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;

  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
  {
    ucReadId = TS_IO_Read(DeviceAddr, ID_G_CIPHER);
 801c364:	21a3      	movs	r1, #163	; 0xa3
 801c366:	4628      	mov	r0, r5
 801c368:	f7ff ffde 	bl	801c328 <TS_IO_Read>
 801c36c:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == CHIP_ID)
 801c370:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c374:	3c01      	subs	r4, #1
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801c376:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    if(ucReadId == CHIP_ID)
 801c37a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801c37c:	d001      	beq.n	801c382 <TS_ReadID+0x2a>
 801c37e:	2b0a      	cmp	r3, #10
 801c380:	d1f0      	bne.n	801c364 <TS_ReadID+0xc>
    {
      bFoundDevice = 1;
    }
  }
  return (ucReadId);
 801c382:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 801c386:	b003      	add	sp, #12
 801c388:	bd30      	pop	{r4, r5, pc}

0801c38a <Touch_Ini>:

void Touch_Ini(void)
{
 801c38a:	b508      	push	{r3, lr}
	if(TS_ReadID(TS_I2C_ADDRESS) != CHIP_ID) Error();
 801c38c:	2070      	movs	r0, #112	; 0x70
 801c38e:	f7ff ffe3 	bl	801c358 <TS_ReadID>
  HAL_Delay(200);
 801c392:	20c8      	movs	r0, #200	; 0xc8
}
 801c394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
 801c398:	f7e4 be48 	b.w	800102c <HAL_Delay>

0801c39c <TS_Get_XY1>:

void TS_Get_XY1(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801c39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t coord = 0x0000;

	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801c39e:	b2c5      	uxtb	r5, r0
{
 801c3a0:	460e      	mov	r6, r1
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801c3a2:	4628      	mov	r0, r5
 801c3a4:	2103      	movs	r1, #3
{
 801c3a6:	4617      	mov	r7, r2
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801c3a8:	f7ff ffbe 	bl	801c328 <TS_IO_Read>
 801c3ac:	4c10      	ldr	r4, [pc, #64]	; (801c3f0 <TS_Get_XY1+0x54>)
 801c3ae:	0200      	lsls	r0, r0, #8
 801c3b0:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801c3b2:	2104      	movs	r1, #4
 801c3b4:	4628      	mov	r0, r5
 801c3b6:	f7ff ffb7 	bl	801c328 <TS_IO_Read>
 801c3ba:	8823      	ldrh	r3, [r4, #0]
 801c3bc:	4318      	orrs	r0, r3
	
	if (Orientation90)
	{
//		*Y = (uint16_t)((X_SIZE_Touch - coord) * TS_Callib_x);
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801c3be:	4b0d      	ldr	r3, [pc, #52]	; (801c3f4 <TS_Get_XY1+0x58>)
 801c3c0:	881b      	ldrh	r3, [r3, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801c3c2:	b280      	uxth	r0, r0
 801c3c4:	8020      	strh	r0, [r4, #0]
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801c3c6:	1a18      	subs	r0, r3, r0
 801c3c8:	8038      	strh	r0, [r7, #0]
	else{
//		*X = (uint16_t)(coord * TS_Callib_x);
		*X = coord * TS_Callib_x;
	}
	
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_YH) << 8) & 0xFF00;
 801c3ca:	2105      	movs	r1, #5
 801c3cc:	4628      	mov	r0, r5
 801c3ce:	f7ff ffab 	bl	801c328 <TS_IO_Read>
 801c3d2:	0200      	lsls	r0, r0, #8
 801c3d4:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801c3d6:	2106      	movs	r1, #6
 801c3d8:	4628      	mov	r0, r5
 801c3da:	f7ff ffa5 	bl	801c328 <TS_IO_Read>
 801c3de:	8823      	ldrh	r3, [r4, #0]
 801c3e0:	4318      	orrs	r0, r3
	
		if (Orientation90)
	{
//		*X = (uint16_t)(coord * TS_Callib_y);
		*X = coord * TS_Callib_y;
		temporary_x = coord;
 801c3e2:	4b05      	ldr	r3, [pc, #20]	; (801c3f8 <TS_Get_XY1+0x5c>)
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801c3e4:	b280      	uxth	r0, r0
		*X = coord * TS_Callib_y;
 801c3e6:	8030      	strh	r0, [r6, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801c3e8:	8020      	strh	r0, [r4, #0]
		temporary_x = coord;
 801c3ea:	8018      	strh	r0, [r3, #0]
 801c3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3ee:	bf00      	nop
 801c3f0:	20009cfa 	.word	0x20009cfa
 801c3f4:	20000eb2 	.word	0x20000eb2
 801c3f8:	20009cfc 	.word	0x20009cfc

0801c3fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801c3fc:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 801c3fe:	2301      	movs	r3, #1
 801c400:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 801c404:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801c408:	2b01      	cmp	r3, #1
 801c40a:	d10e      	bne.n	801c42a <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 801c40c:	4808      	ldr	r0, [pc, #32]	; (801c430 <BSP_SD_Init+0x34>)
 801c40e:	f7e9 f897 	bl	8005540 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801c412:	b938      	cbnz	r0, 801c424 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801c414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801c418:	4805      	ldr	r0, [pc, #20]	; (801c430 <BSP_SD_Init+0x34>)
 801c41a:	f7e9 f80d 	bl	8005438 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 801c41e:	3000      	adds	r0, #0
 801c420:	bf18      	it	ne
 801c422:	2001      	movne	r0, #1
}
 801c424:	b003      	add	sp, #12
 801c426:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 801c42a:	2002      	movs	r0, #2
 801c42c:	e7fa      	b.n	801c424 <BSP_SD_Init+0x28>
 801c42e:	bf00      	nop
 801c430:	20095808 	.word	0x20095808

0801c434 <BSP_SD_ReadBlocks_DMA>:
{
 801c434:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801c436:	4613      	mov	r3, r2
 801c438:	460a      	mov	r2, r1
 801c43a:	4601      	mov	r1, r0
 801c43c:	4803      	ldr	r0, [pc, #12]	; (801c44c <BSP_SD_ReadBlocks_DMA+0x18>)
 801c43e:	f7e8 fc33 	bl	8004ca8 <HAL_SD_ReadBlocks_DMA>
}
 801c442:	3000      	adds	r0, #0
 801c444:	bf18      	it	ne
 801c446:	2001      	movne	r0, #1
 801c448:	bd08      	pop	{r3, pc}
 801c44a:	bf00      	nop
 801c44c:	20095808 	.word	0x20095808

0801c450 <BSP_SD_WriteBlocks_DMA>:
{
 801c450:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801c452:	4613      	mov	r3, r2
 801c454:	460a      	mov	r2, r1
 801c456:	4601      	mov	r1, r0
 801c458:	4803      	ldr	r0, [pc, #12]	; (801c468 <BSP_SD_WriteBlocks_DMA+0x18>)
 801c45a:	f7e8 fc97 	bl	8004d8c <HAL_SD_WriteBlocks_DMA>
}
 801c45e:	3000      	adds	r0, #0
 801c460:	bf18      	it	ne
 801c462:	2001      	movne	r0, #1
 801c464:	bd08      	pop	{r3, pc}
 801c466:	bf00      	nop
 801c468:	20095808 	.word	0x20095808

0801c46c <BSP_SD_GetCardState>:
{
 801c46c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801c46e:	4803      	ldr	r0, [pc, #12]	; (801c47c <BSP_SD_GetCardState+0x10>)
 801c470:	f7e9 f89f 	bl	80055b2 <HAL_SD_GetCardState>
}
 801c474:	3804      	subs	r0, #4
 801c476:	bf18      	it	ne
 801c478:	2001      	movne	r0, #1
 801c47a:	bd08      	pop	{r3, pc}
 801c47c:	20095808 	.word	0x20095808

0801c480 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801c480:	4601      	mov	r1, r0
 801c482:	4801      	ldr	r0, [pc, #4]	; (801c488 <BSP_SD_GetCardInfo+0x8>)
 801c484:	f7e8 bfc6 	b.w	8005414 <HAL_SD_GetCardInfo>
 801c488:	20095808 	.word	0x20095808

0801c48c <BSP_SD_WriteCpltCallback>:
 801c48c:	4770      	bx	lr

0801c48e <HAL_SD_TxCpltCallback>:
{
 801c48e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801c490:	f7ff fffc 	bl	801c48c <BSP_SD_WriteCpltCallback>
 801c494:	bd08      	pop	{r3, pc}

0801c496 <BSP_SD_ReadCpltCallback>:
{
 801c496:	4770      	bx	lr

0801c498 <HAL_SD_RxCpltCallback>:
{
 801c498:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801c49a:	f7ff fffc 	bl	801c496 <BSP_SD_ReadCpltCallback>
 801c49e:	bd08      	pop	{r3, pc}

0801c4a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801c4a0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801c4a2:	4903      	ldr	r1, [pc, #12]	; (801c4b0 <MX_FATFS_Init+0x10>)
 801c4a4:	4803      	ldr	r0, [pc, #12]	; (801c4b4 <MX_FATFS_Init+0x14>)
 801c4a6:	f7ed fc55 	bl	8009d54 <FATFS_LinkDriver>
 801c4aa:	4b03      	ldr	r3, [pc, #12]	; (801c4b8 <MX_FATFS_Init+0x18>)
 801c4ac:	7018      	strb	r0, [r3, #0]
 801c4ae:	bd08      	pop	{r3, pc}
 801c4b0:	20093685 	.word	0x20093685
 801c4b4:	08032164 	.word	0x08032164
 801c4b8:	20093684 	.word	0x20093684

0801c4bc <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 801c4bc:	2000      	movs	r0, #0
 801c4be:	4770      	bx	lr

0801c4c0 <TFT_FillRectangle_DMA>:
    }
}

void TFT_FillRectangle_DMA(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
  if(x1>x2) swap(x1,x2);
 801c4c0:	4290      	cmp	r0, r2
{
 801c4c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4c6:	461d      	mov	r5, r3
  if(x1>x2) swap(x1,x2);
 801c4c8:	bf88      	it	hi
 801c4ca:	4603      	movhi	r3, r0
{
 801c4cc:	4680      	mov	r8, r0
  if(x1>x2) swap(x1,x2);
 801c4ce:	bf84      	itt	hi
 801c4d0:	4690      	movhi	r8, r2
 801c4d2:	461a      	movhi	r2, r3
  if(y1>y2) swap(y1,y2);
 801c4d4:	42a9      	cmp	r1, r5
 801c4d6:	bf88      	it	hi
 801c4d8:	460b      	movhi	r3, r1
{
 801c4da:	460f      	mov	r7, r1
  if(y1>y2) swap(y1,y2);
 801c4dc:	bf84      	itt	hi
 801c4de:	462f      	movhi	r7, r5
 801c4e0:	461d      	movhi	r5, r3

  uint32_t addr = 0;
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801c4e2:	4b15      	ldr	r3, [pc, #84]	; (801c538 <TFT_FillRectangle_DMA+0x78>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801c4e4:	4e15      	ldr	r6, [pc, #84]	; (801c53c <TFT_FillRectangle_DMA+0x7c>)
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801c4e6:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 801c4ea:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
{
 801c4ee:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_R2M;
 801c4f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801c4f6:	eba2 0408 	sub.w	r4, r2, r8
  hdma2d.Init.Mode = DMA2D_R2M;
 801c4fa:	6073      	str	r3, [r6, #4]

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c4fc:	4630      	mov	r0, r6
  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801c4fe:	eba9 0304 	sub.w	r3, r9, r4
 801c502:	60f3      	str	r3, [r6, #12]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c504:	f7e5 fbc6 	bl	8001c94 <HAL_DMA2D_Init>
 801c508:	b990      	cbnz	r0, 801c530 <TFT_FillRectangle_DMA+0x70>
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801c50a:	fb09 8207 	mla	r2, r9, r7, r8
  {
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
 801c50e:	1bed      	subs	r5, r5, r7
 801c510:	9500      	str	r5, [sp, #0]
 801c512:	4623      	mov	r3, r4
 801c514:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801c518:	4651      	mov	r1, sl
 801c51a:	4630      	mov	r0, r6
 801c51c:	f7e5 fc04 	bl	8001d28 <HAL_DMA2D_Start>
 801c520:	b930      	cbnz	r0, 801c530 <TFT_FillRectangle_DMA+0x70>
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801c522:	210a      	movs	r1, #10
 801c524:	4630      	mov	r0, r6
    }
  }
}
 801c526:	b003      	add	sp, #12
 801c528:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801c52c:	f7e5 bc15 	b.w	8001d5a <HAL_DMA2D_PollForTransfer>
}
 801c530:	b003      	add	sp, #12
 801c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c536:	bf00      	nop
 801c538:	20095900 	.word	0x20095900
 801c53c:	20095b90 	.word	0x20095b90

0801c540 <TFT_FillScreen_DMA>:
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
	}
}

void TFT_FillScreen_DMA(uint16_t color)
{
 801c540:	b573      	push	{r0, r1, r4, r5, r6, lr}
  hdma2d.Init.Mode = DMA2D_R2M;
 801c542:	4c10      	ldr	r4, [pc, #64]	; (801c584 <TFT_FillScreen_DMA+0x44>)
 801c544:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 801c548:	4606      	mov	r6, r0
  hdma2d.Init.Mode = DMA2D_R2M;
 801c54a:	6063      	str	r3, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801c54c:	2502      	movs	r5, #2
  hdma2d.Init.OutputOffset = 0;
 801c54e:	2300      	movs	r3, #0
	
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c550:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0;
 801c552:	60e3      	str	r3, [r4, #12]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801c554:	60a5      	str	r5, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c556:	f7e5 fb9d 	bl	8001c94 <HAL_DMA2D_Init>
 801c55a:	b980      	cbnz	r0, 801c57e <TFT_FillScreen_DMA+0x3e>
  {
    if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 801c55c:	4a0a      	ldr	r2, [pc, #40]	; (801c588 <TFT_FillScreen_DMA+0x48>)
 801c55e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801c560:	9300      	str	r3, [sp, #0]
 801c562:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801c564:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801c566:	4631      	mov	r1, r6
 801c568:	4620      	mov	r0, r4
 801c56a:	f7e5 fbdd 	bl	8001d28 <HAL_DMA2D_Start>
 801c56e:	b930      	cbnz	r0, 801c57e <TFT_FillScreen_DMA+0x3e>
    hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801c570:	4629      	mov	r1, r5
 801c572:	4620      	mov	r0, r4
    }
  }
}
 801c574:	b002      	add	sp, #8
 801c576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801c57a:	f7e5 bbee 	b.w	8001d5a <HAL_DMA2D_PollForTransfer>
}
 801c57e:	b002      	add	sp, #8
 801c580:	bd70      	pop	{r4, r5, r6, pc}
 801c582:	bf00      	nop
 801c584:	20095b90 	.word	0x20095b90
 801c588:	20095900 	.word	0x20095900

0801c58c <TFT_DrawPixel>:


//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 801c58c:	b510      	push	{r4, lr}
	
//	tmp = Xpos;
//	Xpos = Ypos;
//	Ypos = X_SIZE - 1 - tmp;
////////////////////////////////////////////rotate -90
	if(TFT_direction == 0x00){
 801c58e:	4b14      	ldr	r3, [pc, #80]	; (801c5e0 <TFT_DrawPixel+0x54>)
 801c590:	781c      	ldrb	r4, [r3, #0]
 801c592:	b97c      	cbnz	r4, 801c5b4 <TFT_DrawPixel+0x28>

	tmp = Xpos;
	Xpos = Ypos;
	Ypos = Y_SIZE - 1 - tmp;
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801c594:	4b13      	ldr	r3, [pc, #76]	; (801c5e4 <TFT_DrawPixel+0x58>)
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	1a5b      	subs	r3, r3, r1
	Ypos = Y_SIZE - 1 - tmp;
 801c59a:	4913      	ldr	r1, [pc, #76]	; (801c5e8 <TFT_DrawPixel+0x5c>)
 801c59c:	8809      	ldrh	r1, [r1, #0]
 801c59e:	3901      	subs	r1, #1
 801c5a0:	1a09      	subs	r1, r1, r0
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801c5a2:	4812      	ldr	r0, [pc, #72]	; (801c5ec <TFT_DrawPixel+0x60>)
 801c5a4:	6e04      	ldr	r4, [r0, #96]	; 0x60
 801c5a6:	b289      	uxth	r1, r1
 801c5a8:	fb04 3111 	mls	r1, r4, r1, r3
 801c5ac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	else	if (TFT_direction == 0x01){
//////////////////////////////////////////// 0 - no rotate
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
	}else	if (TFT_direction == 0x02){
////////////////////////////////////////////rotate -180
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801c5ae:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801c5b2:	bd10      	pop	{r4, pc}
	else	if (TFT_direction == 0x01){
 801c5b4:	781c      	ldrb	r4, [r3, #0]
 801c5b6:	2c01      	cmp	r4, #1
 801c5b8:	d105      	bne.n	801c5c6 <TFT_DrawPixel+0x3a>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 801c5ba:	4c0c      	ldr	r4, [pc, #48]	; (801c5ec <TFT_DrawPixel+0x60>)
 801c5bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801c5be:	fb03 0101 	mla	r1, r3, r1, r0
 801c5c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801c5c4:	e7f3      	b.n	801c5ae <TFT_DrawPixel+0x22>
	}else	if (TFT_direction == 0x02){
 801c5c6:	781b      	ldrb	r3, [r3, #0]
 801c5c8:	2b02      	cmp	r3, #2
 801c5ca:	d1f2      	bne.n	801c5b2 <TFT_DrawPixel+0x26>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801c5cc:	4b05      	ldr	r3, [pc, #20]	; (801c5e4 <TFT_DrawPixel+0x58>)
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	1a18      	subs	r0, r3, r0
 801c5d2:	4b06      	ldr	r3, [pc, #24]	; (801c5ec <TFT_DrawPixel+0x60>)
 801c5d4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801c5d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c5d8:	fb04 0111 	mls	r1, r4, r1, r0
 801c5dc:	e7e7      	b.n	801c5ae <TFT_DrawPixel+0x22>
 801c5de:	bf00      	nop
 801c5e0:	200056a0 	.word	0x200056a0
 801c5e4:	20000eb4 	.word	0x20000eb4
 801c5e8:	20000eba 	.word	0x20000eba
 801c5ec:	20095900 	.word	0x20095900

0801c5f0 <TFT_DrawCircleCorner>:
{
 801c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5f4:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 801c5f6:	b293      	uxth	r3, r2
 801c5f8:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 801c5fc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801c600:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 801c602:	005b      	lsls	r3, r3, #1
 801c604:	b21b      	sxth	r3, r3
 801c606:	9301      	str	r3, [sp, #4]
    while (x < y) {
 801c608:	2300      	movs	r3, #0
 801c60a:	9300      	str	r3, [sp, #0]
        if (corner & 0x01) {	
 801c60c:	f00a 0301 	and.w	r3, sl, #1
{
 801c610:	4689      	mov	r9, r1
 801c612:	4616      	mov	r6, r2
	int16_t f = 1 - r;
 801c614:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801c616:	9302      	str	r3, [sp, #8]
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801c618:	b287      	uxth	r7, r0
    while (x < y) {
 801c61a:	f9bd 3000 	ldrsh.w	r3, [sp]
 801c61e:	42b3      	cmp	r3, r6
 801c620:	db02      	blt.n	801c628 <TFT_DrawCircleCorner+0x38>
}
 801c622:	b005      	add	sp, #20
 801c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c628:	2c00      	cmp	r4, #0
 801c62a:	db08      	blt.n	801c63e <TFT_DrawCircleCorner+0x4e>
            ddF_y += 2;
 801c62c:	9b01      	ldr	r3, [sp, #4]
 801c62e:	3302      	adds	r3, #2
 801c630:	b29b      	uxth	r3, r3
            y--;
 801c632:	3e01      	subs	r6, #1
            ddF_y += 2;
 801c634:	b21a      	sxth	r2, r3
            f += ddF_y;
 801c636:	441c      	add	r4, r3
            y--;
 801c638:	b236      	sxth	r6, r6
            ddF_y += 2;
 801c63a:	9201      	str	r2, [sp, #4]
            f += ddF_y;
 801c63c:	b224      	sxth	r4, r4
 801c63e:	f8bd 5000 	ldrh.w	r5, [sp]
        if (corner & 0x01) {	
 801c642:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801c644:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801c648:	3403      	adds	r4, #3
 801c64a:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801c64c:	b1e3      	cbz	r3, 801c688 <TFT_DrawCircleCorner+0x98>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801c64e:	fa1f f889 	uxth.w	r8, r9
 801c652:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c656:	9303      	str	r3, [sp, #12]
 801c658:	fa1f fb86 	uxth.w	fp, r6
 801c65c:	f108 3eff 	add.w	lr, r8, #4294967295
 801c660:	ebae 0e05 	sub.w	lr, lr, r5
 801c664:	eba7 000b 	sub.w	r0, r7, fp
 801c668:	461a      	mov	r2, r3
 801c66a:	fa1f f18e 	uxth.w	r1, lr
 801c66e:	b280      	uxth	r0, r0
 801c670:	f7ff ff8c 	bl	801c58c <TFT_DrawPixel>
			TFT_DrawPixel(x0 - x, y0 - y, color);
 801c674:	1e78      	subs	r0, r7, #1
 801c676:	9b03      	ldr	r3, [sp, #12]
 801c678:	eba8 010b 	sub.w	r1, r8, fp
 801c67c:	1b40      	subs	r0, r0, r5
 801c67e:	461a      	mov	r2, r3
 801c680:	b289      	uxth	r1, r1
 801c682:	b280      	uxth	r0, r0
 801c684:	f7ff ff82 	bl	801c58c <TFT_DrawPixel>
        if (corner & 0x02) {	
 801c688:	f01a 0f02 	tst.w	sl, #2
 801c68c:	d01a      	beq.n	801c6c4 <TFT_DrawCircleCorner+0xd4>
			TFT_DrawPixel(x0 + x, y0 - y, color);
 801c68e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c692:	9303      	str	r3, [sp, #12]
 801c694:	fa1f f889 	uxth.w	r8, r9
 801c698:	fa1f fb86 	uxth.w	fp, r6
 801c69c:	1c78      	adds	r0, r7, #1
 801c69e:	eba8 010b 	sub.w	r1, r8, fp
 801c6a2:	4428      	add	r0, r5
 801c6a4:	461a      	mov	r2, r3
 801c6a6:	b289      	uxth	r1, r1
 801c6a8:	b280      	uxth	r0, r0
 801c6aa:	f7ff ff6f 	bl	801c58c <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 - x, color);
 801c6ae:	f108 31ff 	add.w	r1, r8, #4294967295
 801c6b2:	9b03      	ldr	r3, [sp, #12]
 801c6b4:	1b49      	subs	r1, r1, r5
 801c6b6:	eb07 000b 	add.w	r0, r7, fp
 801c6ba:	461a      	mov	r2, r3
 801c6bc:	b289      	uxth	r1, r1
 801c6be:	b280      	uxth	r0, r0
 801c6c0:	f7ff ff64 	bl	801c58c <TFT_DrawPixel>
		if (corner & 0x04) {	
 801c6c4:	f01a 0f04 	tst.w	sl, #4
 801c6c8:	d01a      	beq.n	801c700 <TFT_DrawCircleCorner+0x110>
			TFT_DrawPixel(x0 + x, y0 + y, color);
 801c6ca:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c6ce:	9303      	str	r3, [sp, #12]
 801c6d0:	fa1f f889 	uxth.w	r8, r9
 801c6d4:	fa1f fb86 	uxth.w	fp, r6
 801c6d8:	1c78      	adds	r0, r7, #1
 801c6da:	eb08 010b 	add.w	r1, r8, fp
 801c6de:	4428      	add	r0, r5
 801c6e0:	461a      	mov	r2, r3
 801c6e2:	b289      	uxth	r1, r1
 801c6e4:	b280      	uxth	r0, r0
 801c6e6:	f7ff ff51 	bl	801c58c <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 + x, color);
 801c6ea:	f108 0101 	add.w	r1, r8, #1
 801c6ee:	9b03      	ldr	r3, [sp, #12]
 801c6f0:	4429      	add	r1, r5
 801c6f2:	eb07 000b 	add.w	r0, r7, fp
 801c6f6:	461a      	mov	r2, r3
 801c6f8:	b289      	uxth	r1, r1
 801c6fa:	b280      	uxth	r0, r0
 801c6fc:	f7ff ff46 	bl	801c58c <TFT_DrawPixel>
        if (corner & 0x08) {	
 801c700:	f01a 0f08 	tst.w	sl, #8
 801c704:	d01a      	beq.n	801c73c <TFT_DrawCircleCorner+0x14c>
			TFT_DrawPixel(x0 - x, y0 + y, color);
 801c706:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c70a:	9303      	str	r3, [sp, #12]
 801c70c:	fa1f fb89 	uxth.w	fp, r9
 801c710:	fa1f f886 	uxth.w	r8, r6
 801c714:	1e78      	subs	r0, r7, #1
 801c716:	eb0b 0108 	add.w	r1, fp, r8
 801c71a:	1b40      	subs	r0, r0, r5
 801c71c:	461a      	mov	r2, r3
 801c71e:	b289      	uxth	r1, r1
 801c720:	b280      	uxth	r0, r0
 801c722:	f7ff ff33 	bl	801c58c <TFT_DrawPixel>
			TFT_DrawPixel(x0 - y, y0 + x, color);
 801c726:	f10b 0101 	add.w	r1, fp, #1
 801c72a:	9b03      	ldr	r3, [sp, #12]
 801c72c:	4429      	add	r1, r5
 801c72e:	eba7 0008 	sub.w	r0, r7, r8
 801c732:	461a      	mov	r2, r3
 801c734:	b289      	uxth	r1, r1
 801c736:	b280      	uxth	r0, r0
 801c738:	f7ff ff28 	bl	801c58c <TFT_DrawPixel>
 801c73c:	9b00      	ldr	r3, [sp, #0]
 801c73e:	3301      	adds	r3, #1
 801c740:	9300      	str	r3, [sp, #0]
 801c742:	e76a      	b.n	801c61a <TFT_DrawCircleCorner+0x2a>

0801c744 <TFT_DrawCircle>:
{
 801c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801c748:	b295      	uxth	r5, r2
{
 801c74a:	b089      	sub	sp, #36	; 0x24
 801c74c:	4690      	mov	r8, r2
	int16_t f = 1 - r;
 801c74e:	f1c5 0201 	rsb	r2, r5, #1
 801c752:	b212      	sxth	r2, r2
 801c754:	9201      	str	r2, [sp, #4]
	int16_t ddF_y = -2 * r;
 801c756:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
    TFT_DrawPixel(x0, y0 + r, color);
 801c75a:	b28f      	uxth	r7, r1
	int16_t ddF_y = -2 * r;
 801c75c:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801c75e:	b29c      	uxth	r4, r3
 801c760:	b286      	uxth	r6, r0
	int16_t ddF_y = -2 * r;
 801c762:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801c764:	19e9      	adds	r1, r5, r7
	int16_t ddF_y = -2 * r;
 801c766:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801c768:	b289      	uxth	r1, r1
 801c76a:	4622      	mov	r2, r4
 801c76c:	4630      	mov	r0, r6
 801c76e:	f7ff ff0d 	bl	801c58c <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801c772:	1b79      	subs	r1, r7, r5
 801c774:	4622      	mov	r2, r4
 801c776:	b289      	uxth	r1, r1
 801c778:	4630      	mov	r0, r6
 801c77a:	f7ff ff07 	bl	801c58c <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801c77e:	19a8      	adds	r0, r5, r6
 801c780:	4622      	mov	r2, r4
 801c782:	4639      	mov	r1, r7
 801c784:	b280      	uxth	r0, r0
 801c786:	f7ff ff01 	bl	801c58c <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801c78a:	1b70      	subs	r0, r6, r5
 801c78c:	4622      	mov	r2, r4
 801c78e:	4639      	mov	r1, r7
 801c790:	b280      	uxth	r0, r0
 801c792:	f7ff fefb 	bl	801c58c <TFT_DrawPixel>
    while (x < y) {
 801c796:	2300      	movs	r3, #0
 801c798:	9302      	str	r3, [sp, #8]
 801c79a:	1c73      	adds	r3, r6, #1
 801c79c:	9304      	str	r3, [sp, #16]
 801c79e:	1e73      	subs	r3, r6, #1
 801c7a0:	9305      	str	r3, [sp, #20]
 801c7a2:	1c7b      	adds	r3, r7, #1
 801c7a4:	9306      	str	r3, [sp, #24]
 801c7a6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c7aa:	4543      	cmp	r3, r8
 801c7ac:	db02      	blt.n	801c7b4 <TFT_DrawCircle+0x70>
}
 801c7ae:	b009      	add	sp, #36	; 0x24
 801c7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c7b4:	9b01      	ldr	r3, [sp, #4]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	db0c      	blt.n	801c7d4 <TFT_DrawCircle+0x90>
            ddF_y += 2;
 801c7ba:	9b03      	ldr	r3, [sp, #12]
 801c7bc:	3302      	adds	r3, #2
 801c7be:	b29b      	uxth	r3, r3
 801c7c0:	b21a      	sxth	r2, r3
 801c7c2:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801c7c4:	9a01      	ldr	r2, [sp, #4]
 801c7c6:	4413      	add	r3, r2
            y--;
 801c7c8:	f108 38ff 	add.w	r8, r8, #4294967295
            f += ddF_y;
 801c7cc:	b21b      	sxth	r3, r3
            y--;
 801c7ce:	fa0f f888 	sxth.w	r8, r8
            f += ddF_y;
 801c7d2:	9301      	str	r3, [sp, #4]
 801c7d4:	f8bd 9008 	ldrh.w	r9, [sp, #8]
        f += ddF_x;
 801c7d8:	9b01      	ldr	r3, [sp, #4]
 801c7da:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 801c7de:	3303      	adds	r3, #3
 801c7e0:	b21b      	sxth	r3, r3
 801c7e2:	9301      	str	r3, [sp, #4]
 801c7e4:	9b04      	ldr	r3, [sp, #16]
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801c7e6:	fa1f f588 	uxth.w	r5, r8
 801c7ea:	444b      	add	r3, r9
 801c7ec:	eb07 0b05 	add.w	fp, r7, r5
 801c7f0:	b29b      	uxth	r3, r3
 801c7f2:	fa1f fb8b 	uxth.w	fp, fp
 801c7f6:	4659      	mov	r1, fp
 801c7f8:	4618      	mov	r0, r3
 801c7fa:	4622      	mov	r2, r4
 801c7fc:	9307      	str	r3, [sp, #28]
 801c7fe:	f7ff fec5 	bl	801c58c <TFT_DrawPixel>
 801c802:	9b05      	ldr	r3, [sp, #20]
 801c804:	eba3 0a09 	sub.w	sl, r3, r9
 801c808:	fa1f fa8a 	uxth.w	sl, sl
        TFT_DrawPixel(x0 - x, y0 + y, color);
 801c80c:	4659      	mov	r1, fp
 801c80e:	4650      	mov	r0, sl
 801c810:	4622      	mov	r2, r4
 801c812:	f7ff febb 	bl	801c58c <TFT_DrawPixel>
        TFT_DrawPixel(x0 + x, y0 - y, color);
 801c816:	eba7 0b05 	sub.w	fp, r7, r5
 801c81a:	9b07      	ldr	r3, [sp, #28]
 801c81c:	fa1f fb8b 	uxth.w	fp, fp
 801c820:	4618      	mov	r0, r3
 801c822:	4659      	mov	r1, fp
 801c824:	4622      	mov	r2, r4
 801c826:	f7ff feb1 	bl	801c58c <TFT_DrawPixel>
        TFT_DrawPixel(x0 - x, y0 - y, color);
 801c82a:	4659      	mov	r1, fp
 801c82c:	4650      	mov	r0, sl
 801c82e:	4622      	mov	r2, r4
 801c830:	f7ff feac 	bl	801c58c <TFT_DrawPixel>
 801c834:	9b06      	ldr	r3, [sp, #24]
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801c836:	eb06 0a05 	add.w	sl, r6, r5
 801c83a:	eb09 0b03 	add.w	fp, r9, r3
 801c83e:	fa1f fa8a 	uxth.w	sl, sl
 801c842:	fa1f fb8b 	uxth.w	fp, fp
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801c846:	1b75      	subs	r5, r6, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801c848:	4622      	mov	r2, r4
 801c84a:	4659      	mov	r1, fp
 801c84c:	4650      	mov	r0, sl
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801c84e:	b2ad      	uxth	r5, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801c850:	f7ff fe9c 	bl	801c58c <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801c854:	4622      	mov	r2, r4
 801c856:	4659      	mov	r1, fp
 801c858:	4628      	mov	r0, r5
 801c85a:	f7ff fe97 	bl	801c58c <TFT_DrawPixel>
 801c85e:	1e7b      	subs	r3, r7, #1
 801c860:	eba3 0909 	sub.w	r9, r3, r9
 801c864:	fa1f f989 	uxth.w	r9, r9
        TFT_DrawPixel(x0 + y, y0 - x, color);
 801c868:	4622      	mov	r2, r4
 801c86a:	4649      	mov	r1, r9
 801c86c:	4650      	mov	r0, sl
 801c86e:	f7ff fe8d 	bl	801c58c <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801c872:	4622      	mov	r2, r4
 801c874:	4649      	mov	r1, r9
 801c876:	4628      	mov	r0, r5
 801c878:	f7ff fe88 	bl	801c58c <TFT_DrawPixel>
 801c87c:	9b02      	ldr	r3, [sp, #8]
 801c87e:	3301      	adds	r3, #1
 801c880:	9302      	str	r3, [sp, #8]
 801c882:	e790      	b.n	801c7a6 <TFT_DrawCircle+0x62>

0801c884 <TFT_DrawLine>:


int16_t prev_x=0, prev_y=0; 
//----------------------------------------
void TFT_DrawLine(uint16_t x0, uint16_t y0,	uint16_t x1, uint16_t y1, uint16_t color)
{
 801c884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c888:	b085      	sub	sp, #20
 801c88a:	469a      	mov	sl, r3
	int16_t dx, dy, sx, sy, err, e2;
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c88c:	4290      	cmp	r0, r2
{
 801c88e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c892:	9301      	str	r3, [sp, #4]
 801c894:	4607      	mov	r7, r0
 801c896:	460e      	mov	r6, r1
 801c898:	4693      	mov	fp, r2
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c89a:	d211      	bcs.n	801c8c0 <TFT_DrawLine+0x3c>
 801c89c:	eba2 0800 	sub.w	r8, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c8a0:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c8a2:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c8a6:	d341      	bcc.n	801c92c <TFT_DrawLine+0xa8>
	sx = (x0 < x1) ? 1 : -1; 
 801c8a8:	455f      	cmp	r7, fp
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c8aa:	eba6 050a 	sub.w	r5, r6, sl
 801c8ae:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801c8b0:	bf2c      	ite	cs
 801c8b2:	f04f 39ff 	movcs.w	r9, #4294967295
 801c8b6:	f04f 0901 	movcc.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
 801c8ba:	f04f 33ff 	mov.w	r3, #4294967295
 801c8be:	e00b      	b.n	801c8d8 <TFT_DrawLine+0x54>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c8c0:	eba0 0802 	sub.w	r8, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c8c4:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c8c6:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c8ca:	d2ed      	bcs.n	801c8a8 <TFT_DrawLine+0x24>
 801c8cc:	ebaa 0501 	sub.w	r5, sl, r1
 801c8d0:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801c8d2:	f04f 39ff 	mov.w	r9, #4294967295
	sy = (y0 < y1) ? 1 : -1; 
 801c8d6:	2301      	movs	r3, #1
	err = ((dx > dy) ? dx : -dy) / 2; 
 801c8d8:	45a8      	cmp	r8, r5
 801c8da:	f04f 0402 	mov.w	r4, #2
 801c8de:	dd20      	ble.n	801c922 <TFT_DrawLine+0x9e>
 801c8e0:	fb98 f4f4 	sdiv	r4, r8, r4

		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 801c8e4:	f1c8 0200 	rsb	r2, r8, #0
 801c8e8:	9202      	str	r2, [sp, #8]
		TFT_DrawPixel(x0, y0, color); 
 801c8ea:	9a01      	ldr	r2, [sp, #4]
 801c8ec:	9303      	str	r3, [sp, #12]
 801c8ee:	4631      	mov	r1, r6
 801c8f0:	4638      	mov	r0, r7
 801c8f2:	f7ff fe4b 	bl	801c58c <TFT_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 801c8f6:	455f      	cmp	r7, fp
 801c8f8:	9b03      	ldr	r3, [sp, #12]
 801c8fa:	d101      	bne.n	801c900 <TFT_DrawLine+0x7c>
 801c8fc:	4556      	cmp	r6, sl
 801c8fe:	d01b      	beq.n	801c938 <TFT_DrawLine+0xb4>
		if (e2 > -dx) {
 801c900:	9a02      	ldr	r2, [sp, #8]
 801c902:	4294      	cmp	r4, r2
			err -= dy;
 801c904:	bfc1      	itttt	gt
 801c906:	1b62      	subgt	r2, r4, r5
			x0 += sx;
 801c908:	444f      	addgt	r7, r9
			err -= dy;
 801c90a:	b212      	sxthgt	r2, r2
			x0 += sx;
 801c90c:	b2bf      	uxthgt	r7, r7
 801c90e:	bfd8      	it	le
 801c910:	4622      	movle	r2, r4
		} 
		if (e2 < dy) {
 801c912:	42ac      	cmp	r4, r5
 801c914:	da03      	bge.n	801c91e <TFT_DrawLine+0x9a>
			err += dx;
 801c916:	4442      	add	r2, r8
			y0 += sy;
 801c918:	441e      	add	r6, r3
			err += dx;
 801c91a:	b212      	sxth	r2, r2
			y0 += sy;
 801c91c:	b2b6      	uxth	r6, r6
	sy = (y0 < y1) ? 1 : -1; 
 801c91e:	4614      	mov	r4, r2
 801c920:	e7e3      	b.n	801c8ea <TFT_DrawLine+0x66>
	err = ((dx > dy) ? dx : -dy) / 2; 
 801c922:	fb95 f4f4 	sdiv	r4, r5, r4
 801c926:	4264      	negs	r4, r4
 801c928:	b224      	sxth	r4, r4
 801c92a:	e7db      	b.n	801c8e4 <TFT_DrawLine+0x60>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c92c:	ebaa 0501 	sub.w	r5, sl, r1
 801c930:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801c932:	f04f 0901 	mov.w	r9, #1
 801c936:	e7ce      	b.n	801c8d6 <TFT_DrawLine+0x52>
		} 
	}
}
 801c938:	b005      	add	sp, #20
 801c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c93e <TFT_FillRectangle>:
{
 801c93e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801c942:	f8bd 8020 	ldrh.w	r8, [sp, #32]
{
 801c946:	4606      	mov	r6, r0
 801c948:	460c      	mov	r4, r1
 801c94a:	4617      	mov	r7, r2
 801c94c:	461d      	mov	r5, r3
	for (; y0 <= y1; y0++) {
 801c94e:	42ac      	cmp	r4, r5
 801c950:	d902      	bls.n	801c958 <TFT_FillRectangle+0x1a>
}
 801c952:	b002      	add	sp, #8
 801c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801c958:	4623      	mov	r3, r4
 801c95a:	4621      	mov	r1, r4
 801c95c:	f8cd 8000 	str.w	r8, [sp]
 801c960:	463a      	mov	r2, r7
 801c962:	4630      	mov	r0, r6
	for (; y0 <= y1; y0++) {
 801c964:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801c966:	f7ff ff8d 	bl	801c884 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801c96a:	b2a4      	uxth	r4, r4
 801c96c:	e7ef      	b.n	801c94e <TFT_FillRectangle+0x10>

0801c96e <TFT_DrawRectangle>:
{
 801c96e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801c972:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801c976:	9400      	str	r4, [sp, #0]
{
 801c978:	461f      	mov	r7, r3
 801c97a:	4605      	mov	r5, r0
 801c97c:	4688      	mov	r8, r1
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801c97e:	460b      	mov	r3, r1
{
 801c980:	4616      	mov	r6, r2
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801c982:	f7ff ff7f 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(x0, y0, x0, y1, color);	/* Left */
 801c986:	463b      	mov	r3, r7
 801c988:	462a      	mov	r2, r5
 801c98a:	4641      	mov	r1, r8
 801c98c:	4628      	mov	r0, r5
 801c98e:	9400      	str	r4, [sp, #0]
 801c990:	f7ff ff78 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(x1, y0, x1, y1, color);	/* Right */
 801c994:	463b      	mov	r3, r7
 801c996:	4632      	mov	r2, r6
 801c998:	4641      	mov	r1, r8
 801c99a:	4630      	mov	r0, r6
 801c99c:	9400      	str	r4, [sp, #0]
 801c99e:	f7ff ff71 	bl	801c884 <TFT_DrawLine>
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801c9a2:	463b      	mov	r3, r7
 801c9a4:	4632      	mov	r2, r6
 801c9a6:	4639      	mov	r1, r7
 801c9a8:	4628      	mov	r0, r5
 801c9aa:	9408      	str	r4, [sp, #32]
}
 801c9ac:	b002      	add	sp, #8
 801c9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801c9b2:	f7ff bf67 	b.w	801c884 <TFT_DrawLine>

0801c9b6 <TFT_DrawFilledCircle>:
{
 801c9b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801c9ba:	b297      	uxth	r7, r2
{
 801c9bc:	4691      	mov	r9, r2
	int16_t ddF_y = -2 * r;
 801c9be:	ebc7 32c7 	rsb	r2, r7, r7, lsl #15
{
 801c9c2:	b089      	sub	sp, #36	; 0x24
    TFT_DrawPixel(x0, y0 + r, color);
 801c9c4:	b28d      	uxth	r5, r1
	int16_t ddF_y = -2 * r;
 801c9c6:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801c9c8:	b29e      	uxth	r6, r3
 801c9ca:	fa1f f880 	uxth.w	r8, r0
	int16_t ddF_y = -2 * r;
 801c9ce:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801c9d0:	1979      	adds	r1, r7, r5
	int16_t ddF_y = -2 * r;
 801c9d2:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801c9d4:	b289      	uxth	r1, r1
 801c9d6:	4632      	mov	r2, r6
 801c9d8:	4640      	mov	r0, r8
 801c9da:	f7ff fdd7 	bl	801c58c <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801c9de:	eb07 0a08 	add.w	sl, r7, r8
    TFT_DrawPixel(x0, y0 - r, color);
 801c9e2:	1be9      	subs	r1, r5, r7
	int16_t f = 1 - r;
 801c9e4:	f1c7 0401 	rsb	r4, r7, #1
    TFT_DrawPixel(x0, y0 - r, color);
 801c9e8:	4632      	mov	r2, r6
 801c9ea:	b289      	uxth	r1, r1
 801c9ec:	4640      	mov	r0, r8
    TFT_DrawPixel(x0 + r, y0, color);
 801c9ee:	fa1f fa8a 	uxth.w	sl, sl
    TFT_DrawPixel(x0 - r, y0, color);
 801c9f2:	eba8 0707 	sub.w	r7, r8, r7
    TFT_DrawPixel(x0, y0 - r, color);
 801c9f6:	f7ff fdc9 	bl	801c58c <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801c9fa:	b2bf      	uxth	r7, r7
    TFT_DrawPixel(x0 + r, y0, color);
 801c9fc:	4632      	mov	r2, r6
 801c9fe:	4629      	mov	r1, r5
 801ca00:	4650      	mov	r0, sl
 801ca02:	f7ff fdc3 	bl	801c58c <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801ca06:	4632      	mov	r2, r6
 801ca08:	4629      	mov	r1, r5
 801ca0a:	4638      	mov	r0, r7
 801ca0c:	f7ff fdbe 	bl	801c58c <TFT_DrawPixel>
    TFT_DrawLine(x0 - r, y0, x0 + r, y0, color);
 801ca10:	462b      	mov	r3, r5
 801ca12:	9600      	str	r6, [sp, #0]
 801ca14:	4652      	mov	r2, sl
 801ca16:	4629      	mov	r1, r5
 801ca18:	4638      	mov	r0, r7
 801ca1a:	f7ff ff33 	bl	801c884 <TFT_DrawLine>
    while (x < y) {
 801ca1e:	2300      	movs	r3, #0
 801ca20:	9302      	str	r3, [sp, #8]
 801ca22:	f108 33ff 	add.w	r3, r8, #4294967295
 801ca26:	9305      	str	r3, [sp, #20]
 801ca28:	f108 0301 	add.w	r3, r8, #1
 801ca2c:	9306      	str	r3, [sp, #24]
 801ca2e:	1c6b      	adds	r3, r5, #1
	int16_t f = 1 - r;
 801ca30:	b224      	sxth	r4, r4
 801ca32:	9307      	str	r3, [sp, #28]
    while (x < y) {
 801ca34:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801ca38:	454b      	cmp	r3, r9
 801ca3a:	db02      	blt.n	801ca42 <TFT_DrawFilledCircle+0x8c>
}
 801ca3c:	b009      	add	sp, #36	; 0x24
 801ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801ca42:	2c00      	cmp	r4, #0
 801ca44:	db0a      	blt.n	801ca5c <TFT_DrawFilledCircle+0xa6>
            ddF_y += 2;
 801ca46:	9b03      	ldr	r3, [sp, #12]
 801ca48:	3302      	adds	r3, #2
 801ca4a:	b29b      	uxth	r3, r3
            y--;
 801ca4c:	f109 39ff 	add.w	r9, r9, #4294967295
            ddF_y += 2;
 801ca50:	b21a      	sxth	r2, r3
            f += ddF_y;
 801ca52:	441c      	add	r4, r3
            y--;
 801ca54:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
 801ca58:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801ca5a:	b224      	sxth	r4, r4
 801ca5c:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801ca60:	9b05      	ldr	r3, [sp, #20]
 801ca62:	9a06      	ldr	r2, [sp, #24]
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801ca64:	9600      	str	r6, [sp, #0]
 801ca66:	fa1f f789 	uxth.w	r7, r9
 801ca6a:	eba3 0b0a 	sub.w	fp, r3, sl
 801ca6e:	19eb      	adds	r3, r5, r7
 801ca70:	fa1f fb8b 	uxth.w	fp, fp
 801ca74:	b29b      	uxth	r3, r3
 801ca76:	4452      	add	r2, sl
 801ca78:	b292      	uxth	r2, r2
 801ca7a:	4619      	mov	r1, r3
 801ca7c:	4658      	mov	r0, fp
 801ca7e:	9204      	str	r2, [sp, #16]
 801ca80:	f7ff ff00 	bl	801c884 <TFT_DrawLine>
        TFT_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 801ca84:	1beb      	subs	r3, r5, r7
 801ca86:	b29b      	uxth	r3, r3
 801ca88:	465a      	mov	r2, fp
 801ca8a:	4619      	mov	r1, r3
 801ca8c:	9804      	ldr	r0, [sp, #16]
 801ca8e:	9600      	str	r6, [sp, #0]
 801ca90:	f7ff fef8 	bl	801c884 <TFT_DrawLine>
 801ca94:	9b07      	ldr	r3, [sp, #28]
        TFT_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 801ca96:	9600      	str	r6, [sp, #0]
 801ca98:	eb08 0b07 	add.w	fp, r8, r7
 801ca9c:	4453      	add	r3, sl
 801ca9e:	eba8 0707 	sub.w	r7, r8, r7
 801caa2:	b29b      	uxth	r3, r3
 801caa4:	fa1f fb8b 	uxth.w	fp, fp
 801caa8:	b2bf      	uxth	r7, r7
 801caaa:	4619      	mov	r1, r3
 801caac:	463a      	mov	r2, r7
 801caae:	4658      	mov	r0, fp
 801cab0:	f7ff fee8 	bl	801c884 <TFT_DrawLine>
 801cab4:	1e6b      	subs	r3, r5, #1
 801cab6:	eba3 030a 	sub.w	r3, r3, sl
 801caba:	b29b      	uxth	r3, r3
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801cabc:	4619      	mov	r1, r3
 801cabe:	9600      	str	r6, [sp, #0]
 801cac0:	463a      	mov	r2, r7
 801cac2:	4658      	mov	r0, fp
 801cac4:	f7ff fede 	bl	801c884 <TFT_DrawLine>
 801cac8:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801caca:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 801cace:	3403      	adds	r4, #3
 801cad0:	3301      	adds	r3, #1
 801cad2:	b224      	sxth	r4, r4
 801cad4:	9302      	str	r3, [sp, #8]
 801cad6:	e7ad      	b.n	801ca34 <TFT_DrawFilledCircle+0x7e>

0801cad8 <TFT_DrawFilledCircleCorner>:
{
 801cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cadc:	4699      	mov	r9, r3
	int16_t f = 1 - r;
 801cade:	b293      	uxth	r3, r2
 801cae0:	f1c3 0601 	rsb	r6, r3, #1
	int16_t ddF_y = -2 * r;
 801cae4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801cae8:	b087      	sub	sp, #28
	int16_t ddF_y = -2 * r;
 801caea:	005b      	lsls	r3, r3, #1
 801caec:	b21b      	sxth	r3, r3
 801caee:	9304      	str	r3, [sp, #16]
    while (x < y) {
 801caf0:	2300      	movs	r3, #0
 801caf2:	9302      	str	r3, [sp, #8]
        if (corner & 0x01) {
 801caf4:	f009 0301 	and.w	r3, r9, #1
{
 801caf8:	9103      	str	r1, [sp, #12]
 801cafa:	4617      	mov	r7, r2
	int16_t f = 1 - r;
 801cafc:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801cafe:	9305      	str	r3, [sp, #20]
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801cb00:	b284      	uxth	r4, r0
    while (x < y) {
 801cb02:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801cb06:	42bb      	cmp	r3, r7
 801cb08:	db02      	blt.n	801cb10 <TFT_DrawFilledCircleCorner+0x38>
}
 801cb0a:	b007      	add	sp, #28
 801cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801cb10:	2e00      	cmp	r6, #0
 801cb12:	db08      	blt.n	801cb26 <TFT_DrawFilledCircleCorner+0x4e>
            ddF_y += 2;
 801cb14:	9b04      	ldr	r3, [sp, #16]
 801cb16:	3302      	adds	r3, #2
 801cb18:	b29b      	uxth	r3, r3
            y--;
 801cb1a:	3f01      	subs	r7, #1
            ddF_y += 2;
 801cb1c:	b21a      	sxth	r2, r3
            f += ddF_y;
 801cb1e:	441e      	add	r6, r3
            y--;
 801cb20:	b23f      	sxth	r7, r7
            ddF_y += 2;
 801cb22:	9204      	str	r2, [sp, #16]
            f += ddF_y;
 801cb24:	b236      	sxth	r6, r6
 801cb26:	f8bd 5008 	ldrh.w	r5, [sp, #8]
        if (corner & 0x01) {
 801cb2a:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 801cb2c:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801cb30:	3603      	adds	r6, #3
 801cb32:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801cb34:	b1f3      	cbz	r3, 801cb74 <TFT_DrawFilledCircleCorner+0x9c>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801cb36:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801cb3a:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801cb3e:	f8cd b000 	str.w	fp, [sp]
 801cb42:	fa1f fa87 	uxth.w	sl, r7
 801cb46:	eba8 030a 	sub.w	r3, r8, sl
 801cb4a:	1e62      	subs	r2, r4, #1
 801cb4c:	b29b      	uxth	r3, r3
 801cb4e:	1b52      	subs	r2, r2, r5
 801cb50:	4619      	mov	r1, r3
 801cb52:	b292      	uxth	r2, r2
 801cb54:	4620      	mov	r0, r4
 801cb56:	f7ff fe95 	bl	801c884 <TFT_DrawLine>
 801cb5a:	f108 33ff 	add.w	r3, r8, #4294967295
 801cb5e:	1b5b      	subs	r3, r3, r5
 801cb60:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 801cb62:	eba4 020a 	sub.w	r2, r4, sl
 801cb66:	f8cd b000 	str.w	fp, [sp]
 801cb6a:	b292      	uxth	r2, r2
 801cb6c:	4619      	mov	r1, r3
 801cb6e:	4620      	mov	r0, r4
 801cb70:	f7ff fe88 	bl	801c884 <TFT_DrawLine>
        if (corner & 0x02) {	
 801cb74:	f019 0f02 	tst.w	r9, #2
 801cb78:	d01e      	beq.n	801cbb8 <TFT_DrawFilledCircleCorner+0xe0>
			TFT_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 801cb7a:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801cb7e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801cb82:	f8cd b000 	str.w	fp, [sp]
 801cb86:	fa1f fa87 	uxth.w	sl, r7
 801cb8a:	eba8 030a 	sub.w	r3, r8, sl
 801cb8e:	1c60      	adds	r0, r4, #1
 801cb90:	b29b      	uxth	r3, r3
 801cb92:	4428      	add	r0, r5
 801cb94:	4619      	mov	r1, r3
 801cb96:	4622      	mov	r2, r4
 801cb98:	b280      	uxth	r0, r0
 801cb9a:	f7ff fe73 	bl	801c884 <TFT_DrawLine>
 801cb9e:	f108 33ff 	add.w	r3, r8, #4294967295
 801cba2:	1b5b      	subs	r3, r3, r5
 801cba4:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 801cba6:	eb04 000a 	add.w	r0, r4, sl
 801cbaa:	f8cd b000 	str.w	fp, [sp]
 801cbae:	4622      	mov	r2, r4
 801cbb0:	4619      	mov	r1, r3
 801cbb2:	b280      	uxth	r0, r0
 801cbb4:	f7ff fe66 	bl	801c884 <TFT_DrawLine>
		if (corner & 0x04) {
 801cbb8:	f019 0f04 	tst.w	r9, #4
 801cbbc:	d01e      	beq.n	801cbfc <TFT_DrawFilledCircleCorner+0x124>
			TFT_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 801cbbe:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801cbc2:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801cbc6:	f8cd b000 	str.w	fp, [sp]
 801cbca:	fa1f fa87 	uxth.w	sl, r7
 801cbce:	eb08 030a 	add.w	r3, r8, sl
 801cbd2:	1c62      	adds	r2, r4, #1
 801cbd4:	b29b      	uxth	r3, r3
 801cbd6:	442a      	add	r2, r5
 801cbd8:	4619      	mov	r1, r3
 801cbda:	b292      	uxth	r2, r2
 801cbdc:	4620      	mov	r0, r4
 801cbde:	f7ff fe51 	bl	801c884 <TFT_DrawLine>
 801cbe2:	f108 0301 	add.w	r3, r8, #1
 801cbe6:	442b      	add	r3, r5
 801cbe8:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 801cbea:	eb04 000a 	add.w	r0, r4, sl
 801cbee:	f8cd b000 	str.w	fp, [sp]
 801cbf2:	4622      	mov	r2, r4
 801cbf4:	4619      	mov	r1, r3
 801cbf6:	b280      	uxth	r0, r0
 801cbf8:	f7ff fe44 	bl	801c884 <TFT_DrawLine>
        if (corner & 0x08) {
 801cbfc:	f019 0f08 	tst.w	r9, #8
 801cc00:	d01e      	beq.n	801cc40 <TFT_DrawFilledCircleCorner+0x168>
			TFT_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 801cc02:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801cc06:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801cc0a:	f8cd b000 	str.w	fp, [sp]
 801cc0e:	fa1f fa87 	uxth.w	sl, r7
 801cc12:	eb08 030a 	add.w	r3, r8, sl
 801cc16:	1e60      	subs	r0, r4, #1
 801cc18:	b29b      	uxth	r3, r3
 801cc1a:	1b40      	subs	r0, r0, r5
 801cc1c:	4619      	mov	r1, r3
 801cc1e:	4622      	mov	r2, r4
 801cc20:	b280      	uxth	r0, r0
 801cc22:	f7ff fe2f 	bl	801c884 <TFT_DrawLine>
 801cc26:	f108 0301 	add.w	r3, r8, #1
 801cc2a:	442b      	add	r3, r5
 801cc2c:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 801cc2e:	eba4 020a 	sub.w	r2, r4, sl
 801cc32:	f8cd b000 	str.w	fp, [sp]
 801cc36:	b292      	uxth	r2, r2
 801cc38:	4619      	mov	r1, r3
 801cc3a:	4620      	mov	r0, r4
 801cc3c:	f7ff fe22 	bl	801c884 <TFT_DrawLine>
 801cc40:	9b02      	ldr	r3, [sp, #8]
 801cc42:	3301      	adds	r3, #1
 801cc44:	9302      	str	r3, [sp, #8]
 801cc46:	e75c      	b.n	801cb02 <TFT_DrawFilledCircleCorner+0x2a>

0801cc48 <TFT_DrawFilledRoundedRectangle>:
{
 801cc48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (x1 == x0 || y1 == y0) {
 801cc4c:	4282      	cmp	r2, r0
{
 801cc4e:	4683      	mov	fp, r0
 801cc50:	460d      	mov	r5, r1
 801cc52:	4692      	mov	sl, r2
 801cc54:	461c      	mov	r4, r3
 801cc56:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801cc5a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (x1 == x0 || y1 == y0) {
 801cc5e:	d06d      	beq.n	801cd3c <TFT_DrawFilledRoundedRectangle+0xf4>
 801cc60:	428b      	cmp	r3, r1
 801cc62:	d06b      	beq.n	801cd3c <TFT_DrawFilledRoundedRectangle+0xf4>
	if (r == 0) {
 801cc64:	b91e      	cbnz	r6, 801cc6e <TFT_DrawFilledRoundedRectangle+0x26>
		TFT_FillRectangle(x0, y0, x1, y1, color);
 801cc66:	f8cd 8000 	str.w	r8, [sp]
 801cc6a:	f7ff fe68 	bl	801c93e <TFT_FillRectangle>
	if (x0 > x1) {
 801cc6e:	45da      	cmp	sl, fp
 801cc70:	bf3e      	ittt	cc
 801cc72:	465b      	movcc	r3, fp
 801cc74:	46d3      	movcc	fp, sl
 801cc76:	469a      	movcc	sl, r3
	if (y0 > y1) {
 801cc78:	42ac      	cmp	r4, r5
 801cc7a:	bf38      	it	cc
 801cc7c:	462b      	movcc	r3, r5
	if (r > ((x1 - x0) / 2)) {
 801cc7e:	ebaa 010b 	sub.w	r1, sl, fp
	if (y0 > y1) {
 801cc82:	bf3c      	itt	cc
 801cc84:	4625      	movcc	r5, r4
 801cc86:	461c      	movcc	r4, r3
	if (r > ((x1 - x0) / 2)) {
 801cc88:	2302      	movs	r3, #2
 801cc8a:	fb91 f1f3 	sdiv	r1, r1, r3
 801cc8e:	428e      	cmp	r6, r1
		r = (x1 - x0) / 2;
 801cc90:	bfc8      	it	gt
 801cc92:	b28e      	uxthgt	r6, r1
 801cc94:	461a      	mov	r2, r3
	if (r > ((y1 - y0) / 2)) {
 801cc96:	1b63      	subs	r3, r4, r5
 801cc98:	fb93 f3f2 	sdiv	r3, r3, r2
 801cc9c:	429e      	cmp	r6, r3
		r = (y1 - y0) / 2;
 801cc9e:	bfc8      	it	gt
 801cca0:	b29e      	uxthgt	r6, r3
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801cca2:	eb0b 0706 	add.w	r7, fp, r6
 801cca6:	ebaa 0906 	sub.w	r9, sl, r6
 801ccaa:	b2bf      	uxth	r7, r7
 801ccac:	fa1f f989 	uxth.w	r9, r9
 801ccb0:	4623      	mov	r3, r4
 801ccb2:	4629      	mov	r1, r5
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801ccb4:	1ba4      	subs	r4, r4, r6
 801ccb6:	4435      	add	r5, r6
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801ccb8:	464a      	mov	r2, r9
 801ccba:	4638      	mov	r0, r7
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801ccbc:	b2ad      	uxth	r5, r5
 801ccbe:	b2a4      	uxth	r4, r4
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801ccc0:	f8cd 8000 	str.w	r8, [sp]
 801ccc4:	f7ff fe3b 	bl	801c93e <TFT_FillRectangle>
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801ccc8:	4623      	mov	r3, r4
 801ccca:	463a      	mov	r2, r7
 801cccc:	4629      	mov	r1, r5
 801ccce:	4658      	mov	r0, fp
 801ccd0:	f8cd 8000 	str.w	r8, [sp]
 801ccd4:	f7ff fe33 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801ccd8:	b236      	sxth	r6, r6
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801ccda:	4623      	mov	r3, r4
 801ccdc:	4652      	mov	r2, sl
 801ccde:	4629      	mov	r1, r5
 801cce0:	4648      	mov	r0, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801cce2:	b23f      	sxth	r7, r7
 801cce4:	b22d      	sxth	r5, r5
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801cce6:	f8cd 8000 	str.w	r8, [sp]
 801ccea:	f7ff fe28 	bl	801c93e <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801ccee:	fa0f f989 	sxth.w	r9, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801ccf2:	4632      	mov	r2, r6
 801ccf4:	4629      	mov	r1, r5
 801ccf6:	4638      	mov	r0, r7
 801ccf8:	f8cd 8000 	str.w	r8, [sp]
 801ccfc:	2301      	movs	r3, #1
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801ccfe:	3c01      	subs	r4, #1
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801cd00:	f7ff feea 	bl	801cad8 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801cd04:	b224      	sxth	r4, r4
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801cd06:	4632      	mov	r2, r6
 801cd08:	4629      	mov	r1, r5
 801cd0a:	4648      	mov	r0, r9
 801cd0c:	f8cd 8000 	str.w	r8, [sp]
 801cd10:	2302      	movs	r3, #2
 801cd12:	f7ff fee1 	bl	801cad8 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801cd16:	4632      	mov	r2, r6
 801cd18:	4621      	mov	r1, r4
 801cd1a:	4648      	mov	r0, r9
 801cd1c:	f8cd 8000 	str.w	r8, [sp]
 801cd20:	2304      	movs	r3, #4
 801cd22:	f7ff fed9 	bl	801cad8 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801cd26:	2308      	movs	r3, #8
 801cd28:	4632      	mov	r2, r6
 801cd2a:	4621      	mov	r1, r4
 801cd2c:	4638      	mov	r0, r7
 801cd2e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 801cd32:	b003      	add	sp, #12
 801cd34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801cd38:	f7ff bece 	b.w	801cad8 <TFT_DrawFilledCircleCorner>
}
 801cd3c:	b003      	add	sp, #12
 801cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd42 <TFT_DrawBitmap>:
	}
}


void TFT_DrawBitmap(uint16_t X1, uint16_t Y1, sImage pbmp)
{
 801cd42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cd46:	4688      	mov	r8, r1
 801cd48:	a902      	add	r1, sp, #8
 801cd4a:	e901 000c 	stmdb	r1, {r2, r3}
 801cd4e:	4607      	mov	r7, r0
	uint16_t Xpos, Ypos;
	uint32_t i = 0;
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801cd50:	4645      	mov	r5, r8
	uint32_t i = 0;
 801cd52:	2400      	movs	r4, #0
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801cd54:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cd58:	4443      	add	r3, r8
 801cd5a:	429d      	cmp	r5, r3
 801cd5c:	da15      	bge.n	801cd8a <TFT_DrawBitmap+0x48>
 801cd5e:	0066      	lsls	r6, r4, #1
 801cd60:	eba7 0904 	sub.w	r9, r7, r4
 801cd64:	e006      	b.n	801cd74 <TFT_DrawBitmap+0x32>
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801cd66:	9b01      	ldr	r3, [sp, #4]
 801cd68:	4629      	mov	r1, r5
 801cd6a:	5b9a      	ldrh	r2, [r3, r6]
 801cd6c:	f7ff fc0e 	bl	801c58c <TFT_DrawPixel>
			i++;
 801cd70:	3401      	adds	r4, #1
 801cd72:	3602      	adds	r6, #2
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801cd74:	f8bd 3000 	ldrh.w	r3, [sp]
 801cd78:	eb09 0004 	add.w	r0, r9, r4
 801cd7c:	b280      	uxth	r0, r0
 801cd7e:	443b      	add	r3, r7
 801cd80:	4298      	cmp	r0, r3
 801cd82:	dbf0      	blt.n	801cd66 <TFT_DrawBitmap+0x24>
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801cd84:	3501      	adds	r5, #1
 801cd86:	b2ad      	uxth	r5, r5
 801cd88:	e7e4      	b.n	801cd54 <TFT_DrawBitmap+0x12>
		}
	}
}
 801cd8a:	b003      	add	sp, #12
 801cd8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801cd90 <TFT_SetFont>:

//----------------------------------------

void TFT_SetFont(sFONT *fonts)
{
  lcdprop.pFont=fonts;
 801cd90:	4b01      	ldr	r3, [pc, #4]	; (801cd98 <TFT_SetFont+0x8>)
 801cd92:	6098      	str	r0, [r3, #8]
 801cd94:	4770      	bx	lr
 801cd96:	bf00      	nop
 801cd98:	200956f4 	.word	0x200956f4

0801cd9c <TFT_SetTextColor>:

//----------------------------------------

void TFT_SetTextColor(uint32_t color)
{
  lcdprop.TextColor=color;
 801cd9c:	4b01      	ldr	r3, [pc, #4]	; (801cda4 <TFT_SetTextColor+0x8>)
 801cd9e:	6018      	str	r0, [r3, #0]
 801cda0:	4770      	bx	lr
 801cda2:	bf00      	nop
 801cda4:	200956f4 	.word	0x200956f4

0801cda8 <TFT_SetBackColor>:

//----------------------------------------

void TFT_SetBackColor(uint32_t color)
{
  lcdprop.BackColor=color;
 801cda8:	4b01      	ldr	r3, [pc, #4]	; (801cdb0 <TFT_SetBackColor+0x8>)
 801cdaa:	6058      	str	r0, [r3, #4]
 801cdac:	4770      	bx	lr
 801cdae:	bf00      	nop
 801cdb0:	200956f4 	.word	0x200956f4

0801cdb4 <TFT_DrawCharRus>:

//----------------------------------------
	//--------------------------------------------------------------

void TFT_DrawCharRus(uint16_t x, uint16_t y, const uint8_t c)
{
 801cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdb8:	b085      	sub	sp, #20
  uint32_t i = 0, j = 0;
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
	if(c == 0x01)
 801cdba:	2a01      	cmp	r2, #1
{
 801cdbc:	9001      	str	r0, [sp, #4]
 801cdbe:	9102      	str	r1, [sp, #8]
 801cdc0:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801ce78 <TFT_DrawCharRus+0xc4>
 801cdc4:	482b      	ldr	r0, [pc, #172]	; (801ce74 <TFT_DrawCharRus+0xc0>)
	if(c == 0x01)
 801cdc6:	d11f      	bne.n	801ce08 <TFT_DrawCharRus+0x54>
	{
		ch = &lcdprop.pFont->table[0];
 801cdc8:	6882      	ldr	r2, [r0, #8]
 801cdca:	6812      	ldr	r2, [r2, #0]
	}
	else
	{
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801cdcc:	f8cb 2000 	str.w	r2, [fp]
	}
	
	height = lcdprop.pFont->Height;
 801cdd0:	6882      	ldr	r2, [r0, #8]
	width = lcdprop.pFont->Width;
 801cdd2:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	height = lcdprop.pFont->Height;
 801cdd6:	88d3      	ldrh	r3, [r2, #6]
 801cdd8:	9300      	str	r3, [sp, #0]
	offset = 8 *((width + 7)/8) - width ;
 801cdda:	f10a 0507 	add.w	r5, sl, #7
 801cdde:	10ed      	asrs	r5, r5, #3
 801cde0:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
			break;
		}
		for (j = 0; j < width; j++)
		{
				if(line & (1 << (width- j + offset- 1)))
 801cde4:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0; i < height; i++)
 801cde8:	2600      	movs	r6, #0
				if(line & (1 << (width- j + offset- 1)))
 801cdea:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0; i < height; i++)
 801cdee:	46b0      	mov	r8, r6
				if(line & (1 << (width- j + offset- 1)))
 801cdf0:	9303      	str	r3, [sp, #12]
 801cdf2:	9b02      	ldr	r3, [sp, #8]
 801cdf4:	eb03 0908 	add.w	r9, r3, r8
	for(i = 0; i < height; i++)
 801cdf8:	9b00      	ldr	r3, [sp, #0]
 801cdfa:	4598      	cmp	r8, r3
 801cdfc:	fa1f f989 	uxth.w	r9, r9
 801ce00:	d30e      	bcc.n	801ce20 <TFT_DrawCharRus+0x6c>
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801ce02:	b005      	add	sp, #20
 801ce04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801ce08:	6884      	ldr	r4, [r0, #8]
 801ce0a:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 801ce0e:	88e2      	ldrh	r2, [r4, #6]
 801ce10:	434a      	muls	r2, r1
 801ce12:	88a1      	ldrh	r1, [r4, #4]
 801ce14:	6824      	ldr	r4, [r4, #0]
 801ce16:	3107      	adds	r1, #7
 801ce18:	10c9      	asrs	r1, r1, #3
 801ce1a:	fb01 4202 	mla	r2, r1, r2, r4
 801ce1e:	e7d5      	b.n	801cdcc <TFT_DrawCharRus+0x18>
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801ce20:	f8db 2000 	ldr.w	r2, [fp]
		switch((width + 7)/8)
 801ce24:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801ce26:	eb02 0106 	add.w	r1, r2, r6
 801ce2a:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801ce2c:	d00a      	beq.n	801ce44 <TFT_DrawCharRus+0x90>
 801ce2e:	784a      	ldrb	r2, [r1, #1]
 801ce30:	2d02      	cmp	r5, #2
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801ce32:	bf1d      	ittte	ne
 801ce34:	0212      	lslne	r2, r2, #8
 801ce36:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801ce3a:	788a      	ldrbne	r2, [r1, #2]
				line = (pchar[0]<< 8) | pchar[1];
 801ce3c:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801ce40:	bf18      	it	ne
 801ce42:	4314      	orrne	r4, r2
		for (j = 0; j < width; j++)
 801ce44:	2700      	movs	r7, #0
 801ce46:	4557      	cmp	r7, sl
 801ce48:	d303      	bcc.n	801ce52 <TFT_DrawCharRus+0x9e>
	for(i = 0; i < height; i++)
 801ce4a:	f108 0801 	add.w	r8, r8, #1
 801ce4e:	442e      	add	r6, r5
 801ce50:	e7cf      	b.n	801cdf2 <TFT_DrawCharRus+0x3e>
				if(line & (1 << (width- j + offset- 1)))
 801ce52:	9b03      	ldr	r3, [sp, #12]
 801ce54:	1bd9      	subs	r1, r3, r7
 801ce56:	9b01      	ldr	r3, [sp, #4]
 801ce58:	2201      	movs	r2, #1
 801ce5a:	408a      	lsls	r2, r1
 801ce5c:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801ce5e:	4b05      	ldr	r3, [pc, #20]	; (801ce74 <TFT_DrawCharRus+0xc0>)
				if(line & (1 << (width- j + offset- 1)))
 801ce60:	4222      	tst	r2, r4
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801ce62:	bf14      	ite	ne
 801ce64:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801ce66:	889a      	ldrheq	r2, [r3, #4]
 801ce68:	4649      	mov	r1, r9
 801ce6a:	b280      	uxth	r0, r0
 801ce6c:	f7ff fb8e 	bl	801c58c <TFT_DrawPixel>
		for (j = 0; j < width; j++)
 801ce70:	3701      	adds	r7, #1
 801ce72:	e7e8      	b.n	801ce46 <TFT_DrawCharRus+0x92>
 801ce74:	200956f4 	.word	0x200956f4
 801ce78:	20095704 	.word	0x20095704

0801ce7c <TFT_DrawCutBMP>:


	uint16_t Xpos, Ypos;
	uint32_t ip = 0;
void TFT_DrawCutBMP(uint16_t x_pos, uint16_t y_pos, uint16_t xs, uint16_t ys, uint16_t size, sImage pbmp)
{
 801ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce80:	b085      	sub	sp, #20
	uint16_t q = 1;
	ip = pbmp.Width*ys+xs-1;
 801ce82:	4d25      	ldr	r5, [pc, #148]	; (801cf18 <TFT_DrawCutBMP+0x9c>)
 801ce84:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
{
 801ce88:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
	
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801ce8c:	4c23      	ldr	r4, [pc, #140]	; (801cf1c <TFT_DrawCutBMP+0xa0>)
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801ce8e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801cf20 <TFT_DrawCutBMP+0xa4>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801ce92:	8021      	strh	r1, [r4, #0]
	ip = pbmp.Width*ys+xs-1;
 801ce94:	fb09 2303 	mla	r3, r9, r3, r2
 801ce98:	1e5a      	subs	r2, r3, #1
 801ce9a:	602a      	str	r2, [r5, #0]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801ce9c:	19ca      	adds	r2, r1, r7
{
 801ce9e:	4683      	mov	fp, r0
	uint16_t q = 1;
 801cea0:	2601      	movs	r6, #1
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801cea2:	9202      	str	r2, [sp, #8]
 801cea4:	8822      	ldrh	r2, [r4, #0]
 801cea6:	9902      	ldr	r1, [sp, #8]
 801cea8:	428a      	cmp	r2, r1
 801ceaa:	db02      	blt.n	801ceb2 <TFT_DrawCutBMP+0x36>
				{ip = ip + pbmp.Width-size+1; 
					q++;}
		}
	}
	
}
 801ceac:	b005      	add	sp, #20
 801ceae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801ceb2:	eb0b 0207 	add.w	r2, fp, r7
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801ceb6:	eb03 0a07 	add.w	sl, r3, r7
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801ceba:	f8a8 b000 	strh.w	fp, [r8]
 801cebe:	9201      	str	r2, [sp, #4]
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801cec0:	f1aa 0a02 	sub.w	sl, sl, #2
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cec4:	f8b8 0000 	ldrh.w	r0, [r8]
 801cec8:	9a01      	ldr	r2, [sp, #4]
 801ceca:	4290      	cmp	r0, r2
 801cecc:	db03      	blt.n	801ced6 <TFT_DrawCutBMP+0x5a>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801cece:	8822      	ldrh	r2, [r4, #0]
 801ced0:	3201      	adds	r2, #1
 801ced2:	8022      	strh	r2, [r4, #0]
 801ced4:	e7e6      	b.n	801cea4 <TFT_DrawCutBMP+0x28>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
 801ced6:	6829      	ldr	r1, [r5, #0]
 801ced8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ceda:	9303      	str	r3, [sp, #12]
 801cedc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801cee0:	8821      	ldrh	r1, [r4, #0]
 801cee2:	f7ff fb53 	bl	801c58c <TFT_DrawPixel>
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801cee6:	682a      	ldr	r2, [r5, #0]
 801cee8:	9b03      	ldr	r3, [sp, #12]
 801ceea:	1e71      	subs	r1, r6, #1
 801ceec:	fb09 a101 	mla	r1, r9, r1, sl
 801cef0:	4291      	cmp	r1, r2
 801cef2:	f102 0201 	add.w	r2, r2, #1
				{ip = ip + pbmp.Width-size+1; 
 801cef6:	bf9b      	ittet	ls
 801cef8:	444a      	addls	r2, r9
 801cefa:	1bd2      	subls	r2, r2, r7
				{	ip++;} 
 801cefc:	602a      	strhi	r2, [r5, #0]
				{ip = ip + pbmp.Width-size+1; 
 801cefe:	602a      	strls	r2, [r5, #0]
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cf00:	f8b8 2000 	ldrh.w	r2, [r8]
					q++;}
 801cf04:	bf98      	it	ls
 801cf06:	3601      	addls	r6, #1
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cf08:	f102 0201 	add.w	r2, r2, #1
					q++;}
 801cf0c:	bf98      	it	ls
 801cf0e:	b2b6      	uxthls	r6, r6
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cf10:	f8a8 2000 	strh.w	r2, [r8]
 801cf14:	e7d6      	b.n	801cec4 <TFT_DrawCutBMP+0x48>
 801cf16:	bf00      	nop
 801cf18:	20009d1c 	.word	0x20009d1c
 801cf1c:	200956f0 	.word	0x200956f0
 801cf20:	20095700 	.word	0x20095700

0801cf24 <TFT_DrawChar>:
		i++;
	}
}

void TFT_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 801cf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i=0, j=0;
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line;
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cf28:	4b28      	ldr	r3, [pc, #160]	; (801cfcc <TFT_DrawChar+0xa8>)
{
 801cf2a:	b085      	sub	sp, #20
 801cf2c:	e88d 0003 	stmia.w	sp, {r0, r1}
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cf30:	6899      	ldr	r1, [r3, #8]
 801cf32:	4827      	ldr	r0, [pc, #156]	; (801cfd0 <TFT_DrawChar+0xac>)
		((lcdprop.pFont->Width +7) / 8)];
 801cf34:	f8b1 a004 	ldrh.w	sl, [r1, #4]
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cf38:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 801cf3c:	6809      	ldr	r1, [r1, #0]
 801cf3e:	9002      	str	r0, [sp, #8]
		((lcdprop.pFont->Width +7) / 8)];
 801cf40:	f10a 0507 	add.w	r5, sl, #7
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cf44:	3a20      	subs	r2, #32
		((lcdprop.pFont->Width +7) / 8)];
 801cf46:	10ed      	asrs	r5, r5, #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cf48:	fb0b f202 	mul.w	r2, fp, r2
 801cf4c:	fb05 1202 	mla	r2, r5, r2, r1
 801cf50:	6002      	str	r2, [r0, #0]
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 * ((width + 7)/8) - width;
 801cf52:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
			break;
		}
		for(j = 0;j < width; j++)
		{
			if(line & (1 << (width - j + offset -1)))
 801cf56:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0;i < height; i++)
 801cf5a:	2600      	movs	r6, #0
			if(line & (1 << (width - j + offset -1)))
 801cf5c:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0;i < height; i++)
 801cf60:	46b0      	mov	r8, r6
			if(line & (1 << (width - j + offset -1)))
 801cf62:	9303      	str	r3, [sp, #12]
 801cf64:	9b01      	ldr	r3, [sp, #4]
	for(i = 0;i < height; i++)
 801cf66:	45d8      	cmp	r8, fp
 801cf68:	eb03 0908 	add.w	r9, r3, r8
 801cf6c:	fa1f f989 	uxth.w	r9, r9
 801cf70:	d302      	bcc.n	801cf78 <TFT_DrawChar+0x54>
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801cf72:	b005      	add	sp, #20
 801cf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801cf78:	9b02      	ldr	r3, [sp, #8]
 801cf7a:	681a      	ldr	r2, [r3, #0]
		switch((width + 7)/8)
 801cf7c:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801cf7e:	eb02 0106 	add.w	r1, r2, r6
 801cf82:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801cf84:	d00a      	beq.n	801cf9c <TFT_DrawChar+0x78>
 801cf86:	784a      	ldrb	r2, [r1, #1]
 801cf88:	2d02      	cmp	r5, #2
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801cf8a:	bf1d      	ittte	ne
 801cf8c:	0212      	lslne	r2, r2, #8
 801cf8e:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801cf92:	788a      	ldrbne	r2, [r1, #2]
			line = (pchar[0]<<8) | pchar[1];
 801cf94:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801cf98:	bf18      	it	ne
 801cf9a:	4314      	orrne	r4, r2
		for(j = 0;j < width; j++)
 801cf9c:	2700      	movs	r7, #0
 801cf9e:	4557      	cmp	r7, sl
 801cfa0:	d303      	bcc.n	801cfaa <TFT_DrawChar+0x86>
	for(i = 0;i < height; i++)
 801cfa2:	f108 0801 	add.w	r8, r8, #1
 801cfa6:	442e      	add	r6, r5
 801cfa8:	e7dc      	b.n	801cf64 <TFT_DrawChar+0x40>
			if(line & (1 << (width - j + offset -1)))
 801cfaa:	9b03      	ldr	r3, [sp, #12]
 801cfac:	1bd9      	subs	r1, r3, r7
 801cfae:	9b00      	ldr	r3, [sp, #0]
 801cfb0:	2201      	movs	r2, #1
 801cfb2:	408a      	lsls	r2, r1
 801cfb4:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801cfb6:	4b05      	ldr	r3, [pc, #20]	; (801cfcc <TFT_DrawChar+0xa8>)
			if(line & (1 << (width - j + offset -1)))
 801cfb8:	4222      	tst	r2, r4
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801cfba:	bf14      	ite	ne
 801cfbc:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801cfbe:	889a      	ldrheq	r2, [r3, #4]
 801cfc0:	4649      	mov	r1, r9
 801cfc2:	b280      	uxth	r0, r0
 801cfc4:	f7ff fae2 	bl	801c58c <TFT_DrawPixel>
		for(j = 0;j < width; j++)
 801cfc8:	3701      	adds	r7, #1
 801cfca:	e7e8      	b.n	801cf9e <TFT_DrawChar+0x7a>
 801cfcc:	200956f4 	.word	0x200956f4
 801cfd0:	20095704 	.word	0x20095704

0801cfd4 <TFT_DisplayString>:
//----------------------------------------
void TFT_DisplayString(uint16_t Xpos, uint16_t Ypos, const uint8_t *Text,	Text_AlignModeTypdef Mode)
{
 801cfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfd8:	460e      	mov	r6, r1
 801cfda:	4604      	mov	r4, r0
 801cfdc:	4615      	mov	r5, r2
	uint16_t ref_column = 1, i = 0;
	uint32_t size = 0, xsize = 0;
	const uint8_t *ptr = Text;
 801cfde:	4611      	mov	r1, r2
 801cfe0:	eba1 0e05 	sub.w	lr, r1, r5
	
	while(*ptr++) size++ ;
 801cfe4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cfe8:	2a00      	cmp	r2, #0
 801cfea:	d1f9      	bne.n	801cfe0 <TFT_DisplayString+0xc>
	xsize = (X_SIZE/lcdprop.pFont->Width);
 801cfec:	4f1b      	ldr	r7, [pc, #108]	; (801d05c <TFT_DisplayString+0x88>)
 801cfee:	f8df 8070 	ldr.w	r8, [pc, #112]	; 801d060 <TFT_DisplayString+0x8c>
 801cff2:	68ba      	ldr	r2, [r7, #8]
 801cff4:	f8b8 1000 	ldrh.w	r1, [r8]
 801cff8:	8890      	ldrh	r0, [r2, #4]
 801cffa:	fbb1 f2f0 	udiv	r2, r1, r0
	switch (Mode)
 801cffe:	2b01      	cmp	r3, #1
 801d000:	d017      	beq.n	801d032 <TFT_DisplayString+0x5e>
 801d002:	2b02      	cmp	r3, #2
 801d004:	d01c      	beq.n	801d040 <TFT_DisplayString+0x6c>
		{
			ref_column = Xpos;
			break;
		}
	}
	if((ref_column < 1) || (ref_column >= 0x8000))
 801d006:	b223      	sxth	r3, r4
	{
		ref_column = 1;
 801d008:	2b00      	cmp	r3, #0
 801d00a:	bfd8      	it	le
 801d00c:	2401      	movle	r4, #1
 801d00e:	46a9      	mov	r9, r5
	}
	
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801d010:	68b9      	ldr	r1, [r7, #8]
 801d012:	f8b8 0000 	ldrh.w	r0, [r8]
 801d016:	8889      	ldrh	r1, [r1, #4]
 801d018:	eba9 0305 	sub.w	r3, r9, r5
 801d01c:	b29b      	uxth	r3, r3
 801d01e:	fb01 0313 	mls	r3, r1, r3, r0
 801d022:	b29b      	uxth	r3, r3
 801d024:	4299      	cmp	r1, r3
 801d026:	f819 2b01 	ldrb.w	r2, [r9], #1
 801d02a:	dc00      	bgt.n	801d02e <TFT_DisplayString+0x5a>
 801d02c:	b96a      	cbnz	r2, 801d04a <TFT_DisplayString+0x76>
 801d02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width) / 2;
 801d032:	eba2 020e 	sub.w	r2, r2, lr
 801d036:	4342      	muls	r2, r0
 801d038:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801d03c:	b2a4      	uxth	r4, r4
			break;
 801d03e:	e7e2      	b.n	801d006 <TFT_DisplayString+0x32>
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801d040:	eba2 020e 	sub.w	r2, r2, lr
 801d044:	fb12 4400 	smlabb	r4, r2, r0, r4
 801d048:	e7f8      	b.n	801d03c <TFT_DisplayString+0x68>
			lcdprop.pFont->Width))
	{
		TFT_DrawChar(ref_column, Ypos, *Text);
 801d04a:	4620      	mov	r0, r4
 801d04c:	4631      	mov	r1, r6
 801d04e:	f7ff ff69 	bl	801cf24 <TFT_DrawChar>
		ref_column += lcdprop.pFont->Width;
 801d052:	68bb      	ldr	r3, [r7, #8]
 801d054:	889b      	ldrh	r3, [r3, #4]
 801d056:	441c      	add	r4, r3
 801d058:	b2a4      	uxth	r4, r4
 801d05a:	e7d9      	b.n	801d010 <TFT_DisplayString+0x3c>
 801d05c:	200956f4 	.word	0x200956f4
 801d060:	20000eb8 	.word	0x20000eb8

0801d064 <DrawLineX>:
		Text++;
		i++;
	}
}

void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801d064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801d068:	1a5f      	subs	r7, r3, r1
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801d06a:	4616      	mov	r6, r2
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801d06c:	eba6 0800 	sub.w	r8, r6, r0
 801d070:	2f00      	cmp	r7, #0
 801d072:	bfb8      	it	lt
 801d074:	427f      	neglt	r7, r7
 801d076:	f1b8 0f00 	cmp.w	r8, #0
 801d07a:	bfb8      	it	lt
 801d07c:	f1c8 0800 	rsblt	r8, r8, #0
    if (steep){
 801d080:	4547      	cmp	r7, r8
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801d082:	4604      	mov	r4, r0
 801d084:	460d      	mov	r5, r1
 801d086:	461a      	mov	r2, r3
 801d088:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    if (steep){
 801d08c:	dd04      	ble.n	801d098 <DrawLineX+0x34>
 801d08e:	4633      	mov	r3, r6
        swap(x1, y1);
 801d090:	460c      	mov	r4, r1
        swap(x2, y2);
 801d092:	4616      	mov	r6, r2
        swap(x1, y1);
 801d094:	4605      	mov	r5, r0
        swap(x2, y2);
 801d096:	461a      	mov	r2, r3
    }
    if(x1>x2){
 801d098:	42b4      	cmp	r4, r6
 801d09a:	d905      	bls.n	801d0a8 <DrawLineX+0x44>
 801d09c:	462b      	mov	r3, r5
        swap(x1, x2);
        swap(y1, y2);
 801d09e:	4615      	mov	r5, r2
 801d0a0:	461a      	mov	r2, r3
    if(x1>x2){
 801d0a2:	4623      	mov	r3, r4
 801d0a4:	4634      	mov	r4, r6
 801d0a6:	461e      	mov	r6, r3
    }
    int dx,dy;
    dx=x2-x1;
    dy=abs(y2-y1);
 801d0a8:	eba2 0905 	sub.w	r9, r2, r5
 801d0ac:	464b      	mov	r3, r9
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	bfb8      	it	lt
 801d0b2:	425b      	neglt	r3, r3
    dx=x2-x1;
 801d0b4:	eba6 0a04 	sub.w	sl, r6, r4
    dy=abs(y2-y1);
 801d0b8:	9301      	str	r3, [sp, #4]
    int err=dx/2;
 801d0ba:	2302      	movs	r3, #2
 801d0bc:	fb9a f9f3 	sdiv	r9, sl, r3
    int ystep;
    if(y1<y2) ystep = 1;
    else  ystep = -1;
 801d0c0:	4295      	cmp	r5, r2
 801d0c2:	bf34      	ite	cc
 801d0c4:	2301      	movcc	r3, #1
 801d0c6:	f04f 33ff 	movcs.w	r3, #4294967295
 801d0ca:	9300      	str	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801d0cc:	42b4      	cmp	r4, r6
 801d0ce:	d902      	bls.n	801d0d6 <DrawLineX+0x72>
        if (err<0){
            y1 += ystep;
            err+=dx;
        }
    }
}
 801d0d0:	b003      	add	sp, #12
 801d0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801d0d6:	4547      	cmp	r7, r8
 801d0d8:	bfcb      	itete	gt
 801d0da:	4628      	movgt	r0, r5
        else {TFT_DrawPixel(x1, y1, color);
 801d0dc:	4629      	movle	r1, r5
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801d0de:	4621      	movgt	r1, r4
        else {TFT_DrawPixel(x1, y1, color);
 801d0e0:	4620      	movle	r0, r4
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801d0e2:	465a      	mov	r2, fp
        else {TFT_DrawPixel(x1, y1, color);
 801d0e4:	f7ff fa52 	bl	801c58c <TFT_DrawPixel>
        if (err<0){
 801d0e8:	9b01      	ldr	r3, [sp, #4]
 801d0ea:	ebb9 0903 	subs.w	r9, r9, r3
            y1 += ystep;
 801d0ee:	bf48      	it	mi
 801d0f0:	9b00      	ldrmi	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801d0f2:	f104 0401 	add.w	r4, r4, #1
            y1 += ystep;
 801d0f6:	bf42      	ittt	mi
 801d0f8:	18ed      	addmi	r5, r5, r3
 801d0fa:	b2ad      	uxthmi	r5, r5
            err+=dx;
 801d0fc:	44d1      	addmi	r9, sl
    for ( ; x1<=x2; x1++){
 801d0fe:	b2a4      	uxth	r4, r4
 801d100:	e7e4      	b.n	801d0cc <DrawLineX+0x68>
	...

0801d104 <MX_SDMMC1_SD_Init>:

/* SDMMC1 init function */
static void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 801d104:	4b06      	ldr	r3, [pc, #24]	; (801d120 <MX_SDMMC1_SD_Init+0x1c>)
 801d106:	4a07      	ldr	r2, [pc, #28]	; (801d124 <MX_SDMMC1_SD_Init+0x20>)
 801d108:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801d10a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801d10e:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801d110:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 10;
 801d112:	210a      	movs	r1, #10
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801d114:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801d116:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801d118:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 801d11a:	6159      	str	r1, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801d11c:	619a      	str	r2, [r3, #24]
 801d11e:	4770      	bx	lr
 801d120:	20095808 	.word	0x20095808
 801d124:	50062400 	.word	0x50062400

0801d128 <MX_TIM2_Init>:
{
 801d128:	b510      	push	{r4, lr}
  htim2.Init.Period = exposure_timer_period[exp_num];
 801d12a:	4a16      	ldr	r2, [pc, #88]	; (801d184 <MX_TIM2_Init+0x5c>)
  htim2.Instance = TIM2;
 801d12c:	4c16      	ldr	r4, [pc, #88]	; (801d188 <MX_TIM2_Init+0x60>)
  htim2.Init.Period = exposure_timer_period[exp_num];
 801d12e:	7811      	ldrb	r1, [r2, #0]
 801d130:	4a16      	ldr	r2, [pc, #88]	; (801d18c <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 10000;
 801d132:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801d136:	f242 7310 	movw	r3, #10000	; 0x2710
 801d13a:	e884 0009 	stmia.w	r4, {r0, r3}
{
 801d13e:	b088      	sub	sp, #32
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d140:	2300      	movs	r3, #0
  htim2.Init.Period = exposure_timer_period[exp_num];
 801d142:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d146:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801d148:	4620      	mov	r0, r4
  htim2.Init.Period = exposure_timer_period[exp_num];
 801d14a:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d14c:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d14e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801d150:	f7e8 feac 	bl	8005eac <HAL_TIM_Base_Init>
 801d154:	b100      	cbz	r0, 801d158 <MX_TIM2_Init+0x30>
 801d156:	e7fe      	b.n	801d156 <MX_TIM2_Init+0x2e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d158:	a908      	add	r1, sp, #32
 801d15a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d15e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801d162:	4620      	mov	r0, r4
 801d164:	f7e8 fffe 	bl	8006164 <HAL_TIM_ConfigClockSource>
 801d168:	b100      	cbz	r0, 801d16c <MX_TIM2_Init+0x44>
 801d16a:	e7fe      	b.n	801d16a <MX_TIM2_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801d16c:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d16e:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801d170:	a901      	add	r1, sp, #4
 801d172:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801d174:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801d176:	f7e9 f919 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801d17a:	b100      	cbz	r0, 801d17e <MX_TIM2_Init+0x56>
 801d17c:	e7fe      	b.n	801d17c <MX_TIM2_Init+0x54>
}
 801d17e:	b008      	add	sp, #32
 801d180:	bd10      	pop	{r4, pc}
 801d182:	bf00      	nop
 801d184:	200905b6 	.word	0x200905b6
 801d188:	20095c58 	.word	0x20095c58
 801d18c:	08032150 	.word	0x08032150

0801d190 <DWT_Init>:
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) 
 801d190:	4a07      	ldr	r2, [pc, #28]	; (801d1b0 <DWT_Init+0x20>)
 801d192:	68d3      	ldr	r3, [r2, #12]
 801d194:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 801d198:	d109      	bne.n	801d1ae <DWT_Init+0x1e>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801d19a:	68d1      	ldr	r1, [r2, #12]
 801d19c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 801d1a0:	60d1      	str	r1, [r2, #12]
    DWT->CYCCNT = 0;
 801d1a2:	4a04      	ldr	r2, [pc, #16]	; (801d1b4 <DWT_Init+0x24>)
 801d1a4:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801d1a6:	6813      	ldr	r3, [r2, #0]
 801d1a8:	f043 0301 	orr.w	r3, r3, #1
 801d1ac:	6013      	str	r3, [r2, #0]
 801d1ae:	4770      	bx	lr
 801d1b0:	e000edf0 	.word	0xe000edf0
 801d1b4:	e0001000 	.word	0xe0001000

0801d1b8 <DWT_Delay>:
  return DWT->CYCCNT;
 801d1b8:	4a07      	ldr	r2, [pc, #28]	; (801d1d8 <DWT_Delay+0x20>)
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801d1ba:	4b08      	ldr	r3, [pc, #32]	; (801d1dc <DWT_Delay+0x24>)
  return DWT->CYCCNT;
 801d1bc:	6851      	ldr	r1, [r2, #4]
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801d1be:	681b      	ldr	r3, [r3, #0]
{
 801d1c0:	b510      	push	{r4, lr}
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801d1c2:	4c07      	ldr	r4, [pc, #28]	; (801d1e0 <DWT_Delay+0x28>)
 801d1c4:	fbb3 f3f4 	udiv	r3, r3, r4
 801d1c8:	fb00 1003 	mla	r0, r0, r3, r1
  return DWT->CYCCNT;
 801d1cc:	6853      	ldr	r3, [r2, #4]
  return (((int32_t)DWT_Get() - tp) < 0);
 801d1ce:	1a1b      	subs	r3, r3, r0
  while (DWT_Compare(tp));
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	dbfb      	blt.n	801d1cc <DWT_Delay+0x14>
}
 801d1d4:	bd10      	pop	{r4, pc}
 801d1d6:	bf00      	nop
 801d1d8:	e0001000 	.word	0xe0001000
 801d1dc:	20000ed4 	.word	0x20000ed4
 801d1e0:	000f4240 	.word	0x000f4240

0801d1e4 <Calculate_Data>:
{
 801d1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801d1e6:	4a78      	ldr	r2, [pc, #480]	; (801d3c8 <Calculate_Data+0x1e4>)
 801d1e8:	4b78      	ldr	r3, [pc, #480]	; (801d3cc <Calculate_Data+0x1e8>)
 801d1ea:	4979      	ldr	r1, [pc, #484]	; (801d3d0 <Calculate_Data+0x1ec>)
 801d1ec:	4879      	ldr	r0, [pc, #484]	; (801d3d4 <Calculate_Data+0x1f0>)
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801d1ee:	4d7a      	ldr	r5, [pc, #488]	; (801d3d8 <Calculate_Data+0x1f4>)
	if(GUI_screen_state == Color_Screen)
 801d1f0:	4f7a      	ldr	r7, [pc, #488]	; (801d3dc <Calculate_Data+0x1f8>)
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801d1f2:	f7f1 fa19 	bl	800e628 <Calculate_XYZ1964>
	Calculate_xy1964(colorimetry_XYZ1964);
 801d1f6:	487a      	ldr	r0, [pc, #488]	; (801d3e0 <Calculate_Data+0x1fc>)
 801d1f8:	f7f1 fab2 	bl	800e760 <Calculate_xy1964>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801d1fc:	4b79      	ldr	r3, [pc, #484]	; (801d3e4 <Calculate_Data+0x200>)
 801d1fe:	4a7a      	ldr	r2, [pc, #488]	; (801d3e8 <Calculate_Data+0x204>)
 801d200:	497a      	ldr	r1, [pc, #488]	; (801d3ec <Calculate_Data+0x208>)
 801d202:	4874      	ldr	r0, [pc, #464]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d204:	f7f1 fa5e 	bl	800e6c4 <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801d208:	4879      	ldr	r0, [pc, #484]	; (801d3f0 <Calculate_Data+0x20c>)
 801d20a:	f7f1 fac7 	bl	800e79c <Calculate_xy1931>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801d20e:	7829      	ldrb	r1, [r5, #0]
 801d210:	4870      	ldr	r0, [pc, #448]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d212:	f7f1 fb29 	bl	800e868 <Calculate_Tc>
 801d216:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801d21a:	4b76      	ldr	r3, [pc, #472]	; (801d3f4 <Calculate_Data+0x210>)
 801d21c:	ee17 2a90 	vmov	r2, s15
 801d220:	801a      	strh	r2, [r3, #0]
	if(GUI_screen_state == Color_Screen)
 801d222:	783a      	ldrb	r2, [r7, #0]
 801d224:	2a05      	cmp	r2, #5
 801d226:	d114      	bne.n	801d252 <Calculate_Data+0x6e>
		if(Color_Field&Color_CIE_Luv) {Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);} else 
 801d228:	4b73      	ldr	r3, [pc, #460]	; (801d3f8 <Calculate_Data+0x214>)
 801d22a:	781b      	ldrb	r3, [r3, #0]
 801d22c:	075a      	lsls	r2, r3, #29
 801d22e:	f140 80ba 	bpl.w	801d3a6 <Calculate_Data+0x1c2>
 801d232:	7828      	ldrb	r0, [r5, #0]
 801d234:	4e71      	ldr	r6, [pc, #452]	; (801d3fc <Calculate_Data+0x218>)
 801d236:	4c72      	ldr	r4, [pc, #456]	; (801d400 <Calculate_Data+0x21c>)
 801d238:	2800      	cmp	r0, #0
 801d23a:	bf0c      	ite	eq
 801d23c:	4630      	moveq	r0, r6
 801d23e:	4620      	movne	r0, r4
 801d240:	f7f1 faee 	bl	800e820 <Calculate_uv1976>
 801d244:	7828      	ldrb	r0, [r5, #0]
 801d246:	2800      	cmp	r0, #0
 801d248:	bf0c      	ite	eq
 801d24a:	4630      	moveq	r0, r6
 801d24c:	4620      	movne	r0, r4
 801d24e:	f7f1 fac3 	bl	800e7d8 <Calculate_uv>
	if(GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen|| GUI_screen_state == Measure3_Screen)
 801d252:	783b      	ldrb	r3, [r7, #0]
 801d254:	3b01      	subs	r3, #1
 801d256:	2b02      	cmp	r3, #2
 801d258:	f200 80a4 	bhi.w	801d3a4 <Calculate_Data+0x1c0>
			if(Measure_Field&Illuminance) {E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);}
 801d25c:	4c69      	ldr	r4, [pc, #420]	; (801d404 <Calculate_Data+0x220>)
 801d25e:	8823      	ldrh	r3, [r4, #0]
 801d260:	07de      	lsls	r6, r3, #31
 801d262:	d506      	bpl.n	801d272 <Calculate_Data+0x8e>
 801d264:	4960      	ldr	r1, [pc, #384]	; (801d3e8 <Calculate_Data+0x204>)
 801d266:	485b      	ldr	r0, [pc, #364]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d268:	f7f1 f880 	bl	800e36c <Calculate_EL_Day>
 801d26c:	4b66      	ldr	r3, [pc, #408]	; (801d408 <Calculate_Data+0x224>)
 801d26e:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&Irradiance) {E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);}
 801d272:	8823      	ldrh	r3, [r4, #0]
 801d274:	0798      	lsls	r0, r3, #30
 801d276:	d505      	bpl.n	801d284 <Calculate_Data+0xa0>
 801d278:	4856      	ldr	r0, [pc, #344]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d27a:	f7f1 f897 	bl	800e3ac <Calculate_EL_Day_Wt>
 801d27e:	4b63      	ldr	r3, [pc, #396]	; (801d40c <Calculate_Data+0x228>)
 801d280:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801d284:	8823      	ldrh	r3, [r4, #0]
 801d286:	0499      	lsls	r1, r3, #18
 801d288:	d519      	bpl.n	801d2be <Calculate_Data+0xda>
 801d28a:	4961      	ldr	r1, [pc, #388]	; (801d410 <Calculate_Data+0x22c>)
 801d28c:	4851      	ldr	r0, [pc, #324]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d28e:	4e61      	ldr	r6, [pc, #388]	; (801d414 <Calculate_Data+0x230>)
 801d290:	4f5d      	ldr	r7, [pc, #372]	; (801d408 <Calculate_Data+0x224>)
 801d292:	f7f1 f8a3 	bl	800e3dc <Calculate_EL_Night>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801d296:	8822      	ldrh	r2, [r4, #0]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801d298:	ed86 0a00 	vstr	s0, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801d29c:	f012 0f01 	tst.w	r2, #1
 801d2a0:	f040 808f 	bne.w	801d3c2 <Calculate_Data+0x1de>
 801d2a4:	4950      	ldr	r1, [pc, #320]	; (801d3e8 <Calculate_Data+0x204>)
 801d2a6:	484b      	ldr	r0, [pc, #300]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d2a8:	f7f1 f860 	bl	800e36c <Calculate_EL_Day>
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801d2ac:	edd6 0a00 	vldr	s1, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801d2b0:	ed87 0a00 	vstr	s0, [r7]
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801d2b4:	f7f1 f8b2 	bl	800e41c <Calculate_SP>
 801d2b8:	4b57      	ldr	r3, [pc, #348]	; (801d418 <Calculate_Data+0x234>)
 801d2ba:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD) {PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));//*100000
 801d2be:	8823      	ldrh	r3, [r4, #0]
 801d2c0:	075a      	lsls	r2, r3, #29
 801d2c2:	d506      	bpl.n	801d2d2 <Calculate_Data+0xee>
 801d2c4:	4955      	ldr	r1, [pc, #340]	; (801d41c <Calculate_Data+0x238>)
 801d2c6:	4843      	ldr	r0, [pc, #268]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d2c8:	f7f1 f8b6 	bl	800e438 <Calculate_PPFD_PPL>
 801d2cc:	4b54      	ldr	r3, [pc, #336]	; (801d420 <Calculate_Data+0x23c>)
 801d2ce:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801d2d2:	8823      	ldrh	r3, [r4, #0]
 801d2d4:	071b      	lsls	r3, r3, #28
 801d2d6:	d51f      	bpl.n	801d318 <Calculate_Data+0x134>
 801d2d8:	2200      	movs	r2, #0
 801d2da:	4950      	ldr	r1, [pc, #320]	; (801d41c <Calculate_Data+0x238>)
 801d2dc:	483d      	ldr	r0, [pc, #244]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d2de:	f7f1 f917 	bl	800e510 <Calculate_PPFD_PPL_Range>
 801d2e2:	4b50      	ldr	r3, [pc, #320]	; (801d424 <Calculate_Data+0x240>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801d2e4:	494d      	ldr	r1, [pc, #308]	; (801d41c <Calculate_Data+0x238>)
 801d2e6:	483b      	ldr	r0, [pc, #236]	; (801d3d4 <Calculate_Data+0x1f0>)
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801d2e8:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801d2ec:	2201      	movs	r2, #1
 801d2ee:	f7f1 f90f 	bl	800e510 <Calculate_PPFD_PPL_Range>
 801d2f2:	4b4d      	ldr	r3, [pc, #308]	; (801d428 <Calculate_Data+0x244>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801d2f4:	4949      	ldr	r1, [pc, #292]	; (801d41c <Calculate_Data+0x238>)
 801d2f6:	4837      	ldr	r0, [pc, #220]	; (801d3d4 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801d2f8:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801d2fc:	2202      	movs	r2, #2
 801d2fe:	f7f1 f907 	bl	800e510 <Calculate_PPFD_PPL_Range>
 801d302:	4b4a      	ldr	r3, [pc, #296]	; (801d42c <Calculate_Data+0x248>)
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801d304:	4945      	ldr	r1, [pc, #276]	; (801d41c <Calculate_Data+0x238>)
 801d306:	4833      	ldr	r0, [pc, #204]	; (801d3d4 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801d308:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801d30c:	2203      	movs	r2, #3
 801d30e:	f7f1 f8ff 	bl	800e510 <Calculate_PPFD_PPL_Range>
 801d312:	4b47      	ldr	r3, [pc, #284]	; (801d430 <Calculate_Data+0x24c>)
 801d314:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&delta_E){delta_Eab_Measure = Calculate_deltaEab();}
 801d318:	8823      	ldrh	r3, [r4, #0]
 801d31a:	051f      	lsls	r7, r3, #20
 801d31c:	d503      	bpl.n	801d326 <Calculate_Data+0x142>
 801d31e:	f7f1 fe7f 	bl	800f020 <Calculate_deltaEab>
 801d322:	4b44      	ldr	r3, [pc, #272]	; (801d434 <Calculate_Data+0x250>)
 801d324:	8018      	strh	r0, [r3, #0]
			if(Measure_Field&CIE_Luv){Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);}
 801d326:	8823      	ldrh	r3, [r4, #0]
 801d328:	065e      	lsls	r6, r3, #25
 801d32a:	d50f      	bpl.n	801d34c <Calculate_Data+0x168>
 801d32c:	7828      	ldrb	r0, [r5, #0]
 801d32e:	4f33      	ldr	r7, [pc, #204]	; (801d3fc <Calculate_Data+0x218>)
 801d330:	4e33      	ldr	r6, [pc, #204]	; (801d400 <Calculate_Data+0x21c>)
 801d332:	2800      	cmp	r0, #0
 801d334:	bf0c      	ite	eq
 801d336:	4638      	moveq	r0, r7
 801d338:	4630      	movne	r0, r6
 801d33a:	f7f1 fa71 	bl	800e820 <Calculate_uv1976>
 801d33e:	7828      	ldrb	r0, [r5, #0]
 801d340:	2800      	cmp	r0, #0
 801d342:	bf0c      	ite	eq
 801d344:	4638      	moveq	r0, r7
 801d346:	4630      	movne	r0, r6
 801d348:	f7f1 fa46 	bl	800e7d8 <Calculate_uv>
			if(Measure_Field&CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801d34c:	8823      	ldrh	r3, [r4, #0]
 801d34e:	0618      	lsls	r0, r3, #24
 801d350:	d509      	bpl.n	801d366 <Calculate_Data+0x182>
 801d352:	4b39      	ldr	r3, [pc, #228]	; (801d438 <Calculate_Data+0x254>)
 801d354:	7829      	ldrb	r1, [r5, #0]
 801d356:	781a      	ldrb	r2, [r3, #0]
 801d358:	4821      	ldr	r0, [pc, #132]	; (801d3e0 <Calculate_Data+0x1fc>)
 801d35a:	4b25      	ldr	r3, [pc, #148]	; (801d3f0 <Calculate_Data+0x20c>)
 801d35c:	2900      	cmp	r1, #0
 801d35e:	bf18      	it	ne
 801d360:	4618      	movne	r0, r3
 801d362:	f7f1 fc1d 	bl	800eba0 <Calculate_Lab>
			if(Measure_Field&lambda_d){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801d366:	8823      	ldrh	r3, [r4, #0]
 801d368:	0599      	lsls	r1, r3, #22
 801d36a:	d503      	bpl.n	801d374 <Calculate_Data+0x190>
 801d36c:	7829      	ldrb	r1, [r5, #0]
 801d36e:	4819      	ldr	r0, [pc, #100]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d370:	f7f1 fd4c 	bl	800ee0c <Calculate_Lambda_Dominant>
			if(Measure_Field&lambda_c){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801d374:	8823      	ldrh	r3, [r4, #0]
 801d376:	055a      	lsls	r2, r3, #21
 801d378:	d503      	bpl.n	801d382 <Calculate_Data+0x19e>
 801d37a:	7829      	ldrb	r1, [r5, #0]
 801d37c:	4815      	ldr	r0, [pc, #84]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d37e:	f7f1 fd45 	bl	800ee0c <Calculate_Lambda_Dominant>
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801d382:	8823      	ldrh	r3, [r4, #0]
 801d384:	04db      	lsls	r3, r3, #19
 801d386:	d50d      	bpl.n	801d3a4 <Calculate_Data+0x1c0>
 801d388:	492c      	ldr	r1, [pc, #176]	; (801d43c <Calculate_Data+0x258>)
 801d38a:	4812      	ldr	r0, [pc, #72]	; (801d3d4 <Calculate_Data+0x1f0>)
 801d38c:	f7f1 f94a 	bl	800e624 <Calculate_ELr>
 801d390:	4b2b      	ldr	r3, [pc, #172]	; (801d440 <Calculate_Data+0x25c>)
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801d392:	492c      	ldr	r1, [pc, #176]	; (801d444 <Calculate_Data+0x260>)
 801d394:	480f      	ldr	r0, [pc, #60]	; (801d3d4 <Calculate_Data+0x1f0>)
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801d396:	ed83 0a00 	vstr	s0, [r3]
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801d39a:	f7f1 f929 	bl	800e5f0 <Calculate_ELb>
 801d39e:	4b2a      	ldr	r3, [pc, #168]	; (801d448 <Calculate_Data+0x264>)
 801d3a0:	ed83 0a00 	vstr	s0, [r3]
 801d3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Color_Field&Color_CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801d3a6:	079b      	lsls	r3, r3, #30
 801d3a8:	f57f af53 	bpl.w	801d252 <Calculate_Data+0x6e>
 801d3ac:	4b22      	ldr	r3, [pc, #136]	; (801d438 <Calculate_Data+0x254>)
 801d3ae:	7829      	ldrb	r1, [r5, #0]
 801d3b0:	781a      	ldrb	r2, [r3, #0]
 801d3b2:	480b      	ldr	r0, [pc, #44]	; (801d3e0 <Calculate_Data+0x1fc>)
 801d3b4:	4b0e      	ldr	r3, [pc, #56]	; (801d3f0 <Calculate_Data+0x20c>)
 801d3b6:	2900      	cmp	r1, #0
 801d3b8:	bf18      	it	ne
 801d3ba:	4618      	movne	r0, r3
 801d3bc:	f7f1 fbf0 	bl	800eba0 <Calculate_Lab>
 801d3c0:	e747      	b.n	801d252 <Calculate_Data+0x6e>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801d3c2:	ed97 0a00 	vldr	s0, [r7]
 801d3c6:	e771      	b.n	801d2ac <Calculate_Data+0xc8>
 801d3c8:	2008c514 	.word	0x2008c514
 801d3cc:	2008e514 	.word	0x2008e514
 801d3d0:	2008b514 	.word	0x2008b514
 801d3d4:	2000c53c 	.word	0x2000c53c
 801d3d8:	20005704 	.word	0x20005704
 801d3dc:	20005701 	.word	0x20005701
 801d3e0:	2008f528 	.word	0x2008f528
 801d3e4:	2008d514 	.word	0x2008d514
 801d3e8:	20052940 	.word	0x20052940
 801d3ec:	2008a514 	.word	0x2008a514
 801d3f0:	2008f522 	.word	0x2008f522
 801d3f4:	20054940 	.word	0x20054940
 801d3f8:	200056ff 	.word	0x200056ff
 801d3fc:	2008f548 	.word	0x2008f548
 801d400:	2008f540 	.word	0x2008f540
 801d404:	20005706 	.word	0x20005706
 801d408:	20095ca0 	.word	0x20095ca0
 801d40c:	20095718 	.word	0x20095718
 801d410:	20053940 	.word	0x20053940
 801d414:	2009570c 	.word	0x2009570c
 801d418:	20095800 	.word	0x20095800
 801d41c:	20054948 	.word	0x20054948
 801d420:	20095720 	.word	0x20095720
 801d424:	20095804 	.word	0x20095804
 801d428:	20095b88 	.word	0x20095b88
 801d42c:	20095a3c 	.word	0x20095a3c
 801d430:	2009571c 	.word	0x2009571c
 801d434:	20090ab6 	.word	0x20090ab6
 801d438:	20090ab9 	.word	0x20090ab9
 801d43c:	2000ad38 	.word	0x2000ad38
 801d440:	20095c9c 	.word	0x20095c9c
 801d444:	20009d38 	.word	0x20009d38
 801d448:	20095c98 	.word	0x20095c98

0801d44c <Get_Battery_Level>:
{
 801d44c:	b510      	push	{r4, lr}
	HAL_ADC_Start(&hadc1);
 801d44e:	4818      	ldr	r0, [pc, #96]	; (801d4b0 <Get_Battery_Level+0x64>)
	adcResult = HAL_ADC_GetValue(&hadc1);
 801d450:	4c18      	ldr	r4, [pc, #96]	; (801d4b4 <Get_Battery_Level+0x68>)
	HAL_ADC_Start(&hadc1);
 801d452:	f7e4 f9f5 	bl	8001840 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 2);
 801d456:	2102      	movs	r1, #2
 801d458:	4815      	ldr	r0, [pc, #84]	; (801d4b0 <Get_Battery_Level+0x64>)
 801d45a:	f7e3 feeb 	bl	8001234 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 801d45e:	4814      	ldr	r0, [pc, #80]	; (801d4b0 <Get_Battery_Level+0x64>)
 801d460:	f7e3 ff36 	bl	80012d0 <HAL_ADC_GetValue>
 801d464:	8020      	strh	r0, [r4, #0]
	HAL_ADC_Stop(&hadc1);
 801d466:	4812      	ldr	r0, [pc, #72]	; (801d4b0 <Get_Battery_Level+0x64>)
 801d468:	f7e4 fa69 	bl	800193e <HAL_ADC_Stop>
	if (adcResult > 3455) adcResult = 3455;
 801d46c:	8823      	ldrh	r3, [r4, #0]
 801d46e:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 801d472:	bf24      	itt	cs
 801d474:	f640 527f 	movwcs	r2, #3455	; 0xd7f
 801d478:	8022      	strhcs	r2, [r4, #0]
	if (adcResult < 2750) adcResult = 2750;
 801d47a:	8821      	ldrh	r1, [r4, #0]
 801d47c:	f640 22bd 	movw	r2, #2749	; 0xabd
 801d480:	4291      	cmp	r1, r2
 801d482:	bf9c      	itt	ls
 801d484:	f640 22be 	movwls	r2, #2750	; 0xabe
 801d488:	8022      	strhls	r2, [r4, #0]
	return percentage_charge = (adcResult - 2750)*100.0 / 705;
 801d48a:	8820      	ldrh	r0, [r4, #0]
 801d48c:	f6a0 20be 	subw	r0, r0, #2750	; 0xabe
 801d490:	f7e3 f860 	bl	8000554 <__aeabi_i2d>
 801d494:	2200      	movs	r2, #0
 801d496:	4b08      	ldr	r3, [pc, #32]	; (801d4b8 <Get_Battery_Level+0x6c>)
 801d498:	f7e3 f8c2 	bl	8000620 <__aeabi_dmul>
 801d49c:	2200      	movs	r2, #0
 801d49e:	4b07      	ldr	r3, [pc, #28]	; (801d4bc <Get_Battery_Level+0x70>)
 801d4a0:	f7e3 f9e8 	bl	8000874 <__aeabi_ddiv>
 801d4a4:	4b06      	ldr	r3, [pc, #24]	; (801d4c0 <Get_Battery_Level+0x74>)
}
 801d4a6:	ec41 0b10 	vmov	d0, r0, r1
	return percentage_charge = (adcResult - 2750)*100.0 / 705;
 801d4aa:	e9c3 0100 	strd	r0, r1, [r3]
}
 801d4ae:	bd10      	pop	{r4, pc}
 801d4b0:	200959d0 	.word	0x200959d0
 801d4b4:	20055950 	.word	0x20055950
 801d4b8:	40590000 	.word	0x40590000
 801d4bc:	40860800 	.word	0x40860800
 801d4c0:	200905c8 	.word	0x200905c8

0801d4c4 <packet_generator_data_send>:
{
 801d4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801d4c8:	4c25      	ldr	r4, [pc, #148]	; (801d560 <packet_generator_data_send+0x9c>)
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801d4ca:	4f26      	ldr	r7, [pc, #152]	; (801d564 <packet_generator_data_send+0xa0>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d4cc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 801d56c <packet_generator_data_send+0xa8>
			memset(dataToSend, 0, sizeof(dataToSend));
 801d4d0:	2100      	movs	r1, #0
 801d4d2:	2240      	movs	r2, #64	; 0x40
 801d4d4:	4620      	mov	r0, r4
 801d4d6:	f003 f892 	bl	80205fe <memset>
			dataToSend[0] = 0xAB;
 801d4da:	23ab      	movs	r3, #171	; 0xab
 801d4dc:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d4de:	2312      	movs	r3, #18
			dataToSend[2] = 0x01;
 801d4e0:	2500      	movs	r5, #0
			dataToSend[1] = 0x12;
 801d4e2:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x01;
 801d4e4:	2301      	movs	r3, #1
 801d4e6:	70a3      	strb	r3, [r4, #2]
			packet_number = 0;
 801d4e8:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801d4ea:	4629      	mov	r1, r5
			q = 5;
 801d4ec:	2305      	movs	r3, #5
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d4ee:	46a0      	mov	r8, r4
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801d4f0:	f837 2015 	ldrh.w	r2, [r7, r5, lsl #1]
				dataToSend[q+1] = byte_low;
 801d4f4:	eb04 0e03 	add.w	lr, r4, r3
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801d4f8:	0a10      	lsrs	r0, r2, #8
 801d4fa:	54e0      	strb	r0, [r4, r3]
				q = q + 2;
 801d4fc:	3302      	adds	r3, #2
				byte_low = Line_buff[cnt] & 0x00FF;
 801d4fe:	f88e 2001 	strb.w	r2, [lr, #1]
				q = q + 2;
 801d502:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + byte_high + byte_low;
 801d504:	fa50 f282 	uxtab	r2, r0, r2
 801d508:	440a      	add	r2, r1
				if(q >= 62 || cnt == 1023){
 801d50a:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + byte_high + byte_low;
 801d50c:	b291      	uxth	r1, r2
				if(q >= 62 || cnt == 1023){
 801d50e:	d803      	bhi.n	801d518 <packet_generator_data_send+0x54>
 801d510:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801d514:	4295      	cmp	r5, r2
 801d516:	d118      	bne.n	801d54a <packet_generator_data_send+0x86>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d518:	7860      	ldrb	r0, [r4, #1]
 801d51a:	7822      	ldrb	r2, [r4, #0]
 801d51c:	4402      	add	r2, r0
 801d51e:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d520:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d522:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d524:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801d526:	b2f3      	uxtb	r3, r6
 801d528:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d52a:	4413      	add	r3, r2
 801d52c:	185a      	adds	r2, r3, r1
 801d52e:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d532:	4641      	mov	r1, r8
 801d534:	2240      	movs	r2, #64	; 0x40
 801d536:	4648      	mov	r0, r9
 801d538:	f7ea fed0 	bl	80082dc <USBD_CUSTOM_HID_SendReport>
					packet_number = packet_number + 1;
 801d53c:	3601      	adds	r6, #1
					HAL_Delay(3);
 801d53e:	2003      	movs	r0, #3
 801d540:	f7e3 fd74 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801d544:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801d546:	2100      	movs	r1, #0
					q = 5;
 801d548:	2305      	movs	r3, #5
 801d54a:	3501      	adds	r5, #1
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801d54c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801d550:	d1ce      	bne.n	801d4f0 <packet_generator_data_send+0x2c>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801d552:	4b05      	ldr	r3, [pc, #20]	; (801d568 <packet_generator_data_send+0xa4>)
 801d554:	2200      	movs	r2, #0
 801d556:	601a      	str	r2, [r3, #0]
 801d558:	605a      	str	r2, [r3, #4]
 801d55a:	609a      	str	r2, [r3, #8]
 801d55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d560:	2008f55c 	.word	0x2008f55c
 801d564:	2000e53c 	.word	0x2000e53c
 801d568:	2008f550 	.word	0x2008f550
 801d56c:	20095cec 	.word	0x20095cec

0801d570 <packet_generator_Rabs_data_send>:
{
 801d570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801d574:	4c3b      	ldr	r4, [pc, #236]	; (801d664 <packet_generator_Rabs_data_send+0xf4>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801d576:	4d3c      	ldr	r5, [pc, #240]	; (801d668 <packet_generator_Rabs_data_send+0xf8>)
 801d578:	4f3c      	ldr	r7, [pc, #240]	; (801d66c <packet_generator_Rabs_data_send+0xfc>)
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d57a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801d690 <packet_generator_Rabs_data_send+0x120>
			memset(dataToSend, 0, sizeof(dataToSend));
 801d57e:	2240      	movs	r2, #64	; 0x40
 801d580:	2100      	movs	r1, #0
 801d582:	4620      	mov	r0, r4
 801d584:	f003 f83b 	bl	80205fe <memset>
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801d588:	4b39      	ldr	r3, [pc, #228]	; (801d670 <packet_generator_Rabs_data_send+0x100>)
 801d58a:	8828      	ldrh	r0, [r5, #0]
 801d58c:	4939      	ldr	r1, [pc, #228]	; (801d674 <packet_generator_Rabs_data_send+0x104>)
 801d58e:	ed93 0a00 	vldr	s0, [r3]
 801d592:	f7fc fd4d 	bl	801a030 <Rabs_calc_Factor1>
 801d596:	4b38      	ldr	r3, [pc, #224]	; (801d678 <packet_generator_Rabs_data_send+0x108>)
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801d598:	4938      	ldr	r1, [pc, #224]	; (801d67c <packet_generator_Rabs_data_send+0x10c>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801d59a:	ed83 0a00 	vstr	s0, [r3]
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801d59e:	edd1 0a00 	vldr	s1, [r1]
 801d5a2:	4b37      	ldr	r3, [pc, #220]	; (801d680 <packet_generator_Rabs_data_send+0x110>)
 801d5a4:	8829      	ldrh	r1, [r5, #0]
 801d5a6:	4833      	ldr	r0, [pc, #204]	; (801d674 <packet_generator_Rabs_data_send+0x104>)
 801d5a8:	4a36      	ldr	r2, [pc, #216]	; (801d684 <packet_generator_Rabs_data_send+0x114>)
 801d5aa:	f7fc fd75 	bl	801a098 <Rabs_calc_main>
			dataToSend[0] = 0xAB;
 801d5ae:	23ab      	movs	r3, #171	; 0xab
 801d5b0:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d5b2:	2312      	movs	r3, #18
 801d5b4:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x03;
 801d5b6:	2303      	movs	r3, #3
 801d5b8:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d5ba:	4b33      	ldr	r3, [pc, #204]	; (801d688 <packet_generator_Rabs_data_send+0x118>)
 801d5bc:	781b      	ldrb	r3, [r3, #0]
 801d5be:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801d5c0:	f04f 0500 	mov.w	r5, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d5c4:	bf18      	it	ne
 801d5c6:	2301      	movne	r3, #1
 801d5c8:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801d5ca:	71a5      	strb	r5, [r4, #6]
			packet_number = 0;
 801d5cc:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801d5ce:	4628      	mov	r0, r5
			q = 7;
 801d5d0:	2307      	movs	r3, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d5d2:	46a0      	mov	r8, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801d5d4:	f857 2d04 	ldr.w	r2, [r7, #-4]!
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d5d8:	f103 0c01 	add.w	ip, r3, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d5dc:	0e11      	lsrs	r1, r2, #24
 801d5de:	54e1      	strb	r1, [r4, r3]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d5e0:	f103 0e02 	add.w	lr, r3, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d5e4:	0c11      	lsrs	r1, r2, #16
 801d5e6:	f804 100c 	strb.w	r1, [r4, ip]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d5ea:	0a11      	lsrs	r1, r2, #8
 801d5ec:	f804 100e 	strb.w	r1, [r4, lr]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d5f0:	18e1      	adds	r1, r4, r3
 801d5f2:	b2d2      	uxtb	r2, r2
 801d5f4:	70ca      	strb	r2, [r1, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d5f6:	5ce1      	ldrb	r1, [r4, r3]
 801d5f8:	4401      	add	r1, r0
 801d5fa:	f814 000c 	ldrb.w	r0, [r4, ip]
 801d5fe:	4401      	add	r1, r0
 801d600:	f814 000e 	ldrb.w	r0, [r4, lr]
				q = q + 4;
 801d604:	3304      	adds	r3, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d606:	4408      	add	r0, r1
				q = q + 4;
 801d608:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d60a:	fa12 f080 	uxtah	r0, r2, r0
				if(q >= 62 || cnt == 1023){
 801d60e:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d610:	b280      	uxth	r0, r0
				if(q >= 62 || cnt == 1023){
 801d612:	d803      	bhi.n	801d61c <packet_generator_Rabs_data_send+0xac>
 801d614:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801d618:	4295      	cmp	r5, r2
 801d61a:	d116      	bne.n	801d64a <packet_generator_Rabs_data_send+0xda>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d61c:	7861      	ldrb	r1, [r4, #1]
 801d61e:	7822      	ldrb	r2, [r4, #0]
 801d620:	440a      	add	r2, r1
 801d622:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d624:	0a33      	lsrs	r3, r6, #8
 801d626:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d628:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801d62a:	b2f3      	uxtb	r3, r6
 801d62c:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d62e:	4413      	add	r3, r2
 801d630:	4418      	add	r0, r3
					packet_number = packet_number + 1;
 801d632:	3601      	adds	r6, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d634:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801d638:	b2b6      	uxth	r6, r6
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d63a:	2240      	movs	r2, #64	; 0x40
 801d63c:	4641      	mov	r1, r8
 801d63e:	4648      	mov	r0, r9
 801d640:	f7ea fe4c 	bl	80082dc <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801d644:	2800      	cmp	r0, #0
 801d646:	d1f8      	bne.n	801d63a <packet_generator_Rabs_data_send+0xca>
					q = 7;
 801d648:	2307      	movs	r3, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801d64a:	3501      	adds	r5, #1
 801d64c:	b2ad      	uxth	r5, r5
 801d64e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801d652:	d1bf      	bne.n	801d5d4 <packet_generator_Rabs_data_send+0x64>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801d654:	4b0d      	ldr	r3, [pc, #52]	; (801d68c <packet_generator_Rabs_data_send+0x11c>)
 801d656:	2200      	movs	r2, #0
 801d658:	601a      	str	r2, [r3, #0]
 801d65a:	605a      	str	r2, [r3, #4]
 801d65c:	609a      	str	r2, [r3, #8]
 801d65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d662:	bf00      	nop
 801d664:	2008f55c 	.word	0x2008f55c
 801d668:	20009d22 	.word	0x20009d22
 801d66c:	2000d53c 	.word	0x2000d53c
 801d670:	2005193c 	.word	0x2005193c
 801d674:	2000e53c 	.word	0x2000e53c
 801d678:	20009d30 	.word	0x20009d30
 801d67c:	20009d34 	.word	0x20009d34
 801d680:	2000c53c 	.word	0x2000c53c
 801d684:	20051940 	.word	0x20051940
 801d688:	20000ebc 	.word	0x20000ebc
 801d68c:	2008f550 	.word	0x2008f550
 801d690:	20095cec 	.word	0x20095cec

0801d694 <packet_generator_Calculated_data_send>:
{
 801d694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801d698:	4c8a      	ldr	r4, [pc, #552]	; (801d8c4 <packet_generator_Calculated_data_send+0x230>)
 801d69a:	f8df 9250 	ldr.w	r9, [pc, #592]	; 801d8ec <packet_generator_Calculated_data_send+0x258>
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d69e:	f8df b244 	ldr.w	fp, [pc, #580]	; 801d8e4 <packet_generator_Calculated_data_send+0x250>
{
 801d6a2:	b087      	sub	sp, #28
			memset(dataToSend, 0, sizeof(dataToSend));
 801d6a4:	2240      	movs	r2, #64	; 0x40
 801d6a6:	2100      	movs	r1, #0
 801d6a8:	4620      	mov	r0, r4
 801d6aa:	f002 ffa8 	bl	80205fe <memset>
			delta_Eab_Measure = Calculate_deltaEab();
 801d6ae:	f7f1 fcb7 	bl	800f020 <Calculate_deltaEab>
 801d6b2:	4b85      	ldr	r3, [pc, #532]	; (801d8c8 <packet_generator_Calculated_data_send+0x234>)
 801d6b4:	8018      	strh	r0, [r3, #0]
			dataToSend[0] = 0xAB;
 801d6b6:	23ab      	movs	r3, #171	; 0xab
 801d6b8:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d6ba:	2312      	movs	r3, #18
 801d6bc:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801d6be:	2304      	movs	r3, #4
 801d6c0:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d6c2:	4b82      	ldr	r3, [pc, #520]	; (801d8cc <packet_generator_Calculated_data_send+0x238>)
 801d6c4:	781b      	ldrb	r3, [r3, #0]
 801d6c6:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801d6c8:	f04f 0800 	mov.w	r8, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d6cc:	bf18      	it	ne
 801d6ce:	2301      	movne	r3, #1
 801d6d0:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801d6d2:	f884 8006 	strb.w	r8, [r4, #6]
			uint16_t CRC_pack = 0, packet_number = 0;
 801d6d6:	4645      	mov	r5, r8
 801d6d8:	4647      	mov	r7, r8
			q = 7;
 801d6da:	2607      	movs	r6, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d6dc:	46a2      	mov	sl, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801d6de:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801d6e2:	9305      	str	r3, [sp, #20]
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d6e4:	0e1a      	lsrs	r2, r3, #24
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d6e6:	1c70      	adds	r0, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d6e8:	55a2      	strb	r2, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d6ea:	1cb1      	adds	r1, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d6ec:	0c1a      	lsrs	r2, r3, #16
 801d6ee:	5422      	strb	r2, [r4, r0]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d6f0:	0a1a      	lsrs	r2, r3, #8
 801d6f2:	5462      	strb	r2, [r4, r1]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d6f4:	19a2      	adds	r2, r4, r6
 801d6f6:	b2db      	uxtb	r3, r3
 801d6f8:	70d3      	strb	r3, [r2, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d6fa:	5da2      	ldrb	r2, [r4, r6]
 801d6fc:	443a      	add	r2, r7
 801d6fe:	5c27      	ldrb	r7, [r4, r0]
 801d700:	443a      	add	r2, r7
 801d702:	5c67      	ldrb	r7, [r4, r1]
				q = q + 4;
 801d704:	3604      	adds	r6, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d706:	4417      	add	r7, r2
				q = q + 4;
 801d708:	b2f6      	uxtb	r6, r6
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d70a:	fa13 f787 	uxtah	r7, r3, r7
				if(q >= 62 || cnt == 1023){
 801d70e:	2e3d      	cmp	r6, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d710:	b2bf      	uxth	r7, r7
				if(q >= 62 || cnt == 1023){
 801d712:	d803      	bhi.n	801d71c <packet_generator_Calculated_data_send+0x88>
 801d714:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801d718:	4598      	cmp	r8, r3
 801d71a:	d11a      	bne.n	801d752 <packet_generator_Calculated_data_send+0xbe>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d71c:	7861      	ldrb	r1, [r4, #1]
 801d71e:	7822      	ldrb	r2, [r4, #0]
 801d720:	440a      	add	r2, r1
 801d722:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d724:	0a2b      	lsrs	r3, r5, #8
 801d726:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d728:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801d72a:	b2eb      	uxtb	r3, r5
 801d72c:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d72e:	4413      	add	r3, r2
 801d730:	441f      	add	r7, r3
					packet_number = packet_number + 1;
 801d732:	3501      	adds	r5, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d734:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801d738:	b2ad      	uxth	r5, r5
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d73a:	2240      	movs	r2, #64	; 0x40
 801d73c:	4651      	mov	r1, sl
 801d73e:	4658      	mov	r0, fp
 801d740:	f7ea fdcc 	bl	80082dc <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801d744:	4607      	mov	r7, r0
 801d746:	2800      	cmp	r0, #0
 801d748:	d1f7      	bne.n	801d73a <packet_generator_Calculated_data_send+0xa6>
					HAL_Delay(3);
 801d74a:	2003      	movs	r0, #3
 801d74c:	f7e3 fc6e 	bl	800102c <HAL_Delay>
					q = 7;
 801d750:	2607      	movs	r6, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801d752:	f108 0801 	add.w	r8, r8, #1
 801d756:	fa1f f888 	uxth.w	r8, r8
 801d75a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 801d75e:	d1be      	bne.n	801d6de <packet_generator_Calculated_data_send+0x4a>
			memset(dataToSend, 0, sizeof(dataToSend));
 801d760:	2240      	movs	r2, #64	; 0x40
 801d762:	2100      	movs	r1, #0
 801d764:	4857      	ldr	r0, [pc, #348]	; (801d8c4 <packet_generator_Calculated_data_send+0x230>)
 801d766:	f002 ff4a 	bl	80205fe <memset>
			dataToSend[0] = 0xAB;
 801d76a:	23ab      	movs	r3, #171	; 0xab
 801d76c:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d76e:	2312      	movs	r3, #18
 801d770:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801d772:	2304      	movs	r3, #4
 801d774:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d776:	4b55      	ldr	r3, [pc, #340]	; (801d8cc <packet_generator_Calculated_data_send+0x238>)
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801d778:	4a55      	ldr	r2, [pc, #340]	; (801d8d0 <packet_generator_Calculated_data_send+0x23c>)
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d77a:	781b      	ldrb	r3, [r3, #0]
 801d77c:	3300      	adds	r3, #0
 801d77e:	bf18      	it	ne
 801d780:	2301      	movne	r3, #1
 801d782:	7163      	strb	r3, [r4, #5]
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801d784:	6813      	ldr	r3, [r2, #0]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d786:	f106 0a01 	add.w	sl, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d78a:	0e19      	lsrs	r1, r3, #24
 801d78c:	55a1      	strb	r1, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d78e:	f106 0902 	add.w	r9, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d792:	0c19      	lsrs	r1, r3, #16
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d794:	f106 0803 	add.w	r8, r6, #3
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d798:	f804 100a 	strb.w	r1, [r4, sl]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d79c:	0a19      	lsrs	r1, r3, #8
 801d79e:	f804 1009 	strb.w	r1, [r4, r9]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d7a2:	f804 3008 	strb.w	r3, [r4, r8]
				memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801d7a6:	6853      	ldr	r3, [r2, #4]
 801d7a8:	9305      	str	r3, [sp, #20]
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801d7aa:	f106 0c04 	add.w	ip, r6, #4
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801d7ae:	f106 0e05 	add.w	lr, r6, #5
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801d7b2:	0e1a      	lsrs	r2, r3, #24
 801d7b4:	f804 200c 	strb.w	r2, [r4, ip]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801d7b8:	1db0      	adds	r0, r6, #6
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801d7ba:	0c1a      	lsrs	r2, r3, #16
 801d7bc:	f804 200e 	strb.w	r2, [r4, lr]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801d7c0:	0a1a      	lsrs	r2, r3, #8
 801d7c2:	5422      	strb	r2, [r4, r0]
				dataToSend[q+7] = (buff_float) & 0x000000FF;
 801d7c4:	1df2      	adds	r2, r6, #7
 801d7c6:	9203      	str	r2, [sp, #12]
 801d7c8:	54a3      	strb	r3, [r4, r2]
				memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801d7ca:	4b42      	ldr	r3, [pc, #264]	; (801d8d4 <packet_generator_Calculated_data_send+0x240>)
 801d7cc:	881b      	ldrh	r3, [r3, #0]
 801d7ce:	f8ad 3014 	strh.w	r3, [sp, #20]
				dataToSend[q+8]= (buff_float >> 8) & 0x000000FF;
 801d7d2:	f106 0308 	add.w	r3, r6, #8
 801d7d6:	9300      	str	r3, [sp, #0]
 801d7d8:	9b05      	ldr	r3, [sp, #20]
 801d7da:	9900      	ldr	r1, [sp, #0]
 801d7dc:	0a1a      	lsrs	r2, r3, #8
 801d7de:	5462      	strb	r2, [r4, r1]
				dataToSend[q+9] = (buff_float) & 0x000000FF;
 801d7e0:	f106 0209 	add.w	r2, r6, #9
 801d7e4:	9201      	str	r2, [sp, #4]
 801d7e6:	54a3      	strb	r3, [r4, r2]
				dataToSend[q+10]= Source_Type;
 801d7e8:	f106 030a 	add.w	r3, r6, #10
 801d7ec:	9302      	str	r3, [sp, #8]
 801d7ee:	4b3a      	ldr	r3, [pc, #232]	; (801d8d8 <packet_generator_Calculated_data_send+0x244>)
 801d7f0:	9a02      	ldr	r2, [sp, #8]
 801d7f2:	781b      	ldrb	r3, [r3, #0]
 801d7f4:	54a3      	strb	r3, [r4, r2]
			if(Calculate_deltaEab_Done == 0x01)
 801d7f6:	4b39      	ldr	r3, [pc, #228]	; (801d8dc <packet_generator_Calculated_data_send+0x248>)
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801d7f8:	4932      	ldr	r1, [pc, #200]	; (801d8c4 <packet_generator_Calculated_data_send+0x230>)
			if(Calculate_deltaEab_Done == 0x01)
 801d7fa:	781b      	ldrb	r3, [r3, #0]
 801d7fc:	2b01      	cmp	r3, #1
				memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801d7fe:	bf01      	itttt	eq
 801d800:	4b31      	ldreq	r3, [pc, #196]	; (801d8c8 <packet_generator_Calculated_data_send+0x234>)
 801d802:	881b      	ldrheq	r3, [r3, #0]
 801d804:	f8ad 3014 	strheq.w	r3, [sp, #20]
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801d808:	9b05      	ldreq	r3, [sp, #20]
 801d80a:	4434      	add	r4, r6
 801d80c:	bf0b      	itete	eq
 801d80e:	0a1a      	lsreq	r2, r3, #8
			} else {dataToSend[q+11] = 0;
 801d810:	2300      	movne	r3, #0
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801d812:	72e2      	strbeq	r2, [r4, #11]
			} else {dataToSend[q+11] = 0;
 801d814:	72e3      	strbne	r3, [r4, #11]
				dataToSend[q+12] = 0;
 801d816:	7323      	strb	r3, [r4, #12]
				memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801d818:	4c31      	ldr	r4, [pc, #196]	; (801d8e0 <packet_generator_Calculated_data_send+0x24c>)
 801d81a:	6822      	ldr	r2, [r4, #0]
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801d81c:	198b      	adds	r3, r1, r6
 801d81e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801d822:	f883 b00d 	strb.w	fp, [r3, #13]
				dataToSend[q+14] = (buff_float >> 16) & 0x000000FF;
 801d826:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d82a:	f883 b00e 	strb.w	fp, [r3, #14]
				dataToSend[q+16] = (buff_float) & 0x000000FF;
 801d82e:	741a      	strb	r2, [r3, #16]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801d830:	ea4f 2b12 	mov.w	fp, r2, lsr #8
				memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801d834:	6862      	ldr	r2, [r4, #4]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801d836:	f883 b00f 	strb.w	fp, [r3, #15]
				dataToSend[q+17] = (buff_float >> 24) & 0x000000FF;
 801d83a:	0e14      	lsrs	r4, r2, #24
 801d83c:	745c      	strb	r4, [r3, #17]
				dataToSend[q+18] = (buff_float >> 16) & 0x000000FF;
 801d83e:	0c14      	lsrs	r4, r2, #16
 801d840:	749c      	strb	r4, [r3, #18]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801d842:	0a14      	lsrs	r4, r2, #8
				dataToSend[q+20] = (buff_float) & 0x000000FF;
 801d844:	751a      	strb	r2, [r3, #20]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801d846:	74dc      	strb	r4, [r3, #19]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d848:	0a2a      	lsrs	r2, r5, #8
 801d84a:	70ca      	strb	r2, [r1, #3]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801d84c:	780c      	ldrb	r4, [r1, #0]
 801d84e:	784a      	ldrb	r2, [r1, #1]
 801d850:	4422      	add	r2, r4
 801d852:	788c      	ldrb	r4, [r1, #2]
					dataToSend[4] = packet_number & 0x00FF;
 801d854:	b2ed      	uxtb	r5, r5
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801d856:	4422      	add	r2, r4
					dataToSend[4] = packet_number & 0x00FF;
 801d858:	710d      	strb	r5, [r1, #4]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801d85a:	4415      	add	r5, r2
 801d85c:	19ea      	adds	r2, r5, r7
 801d85e:	5d8d      	ldrb	r5, [r1, r6]
 801d860:	f811 4008 	ldrb.w	r4, [r1, r8]
 801d864:	5c08      	ldrb	r0, [r1, r0]
 801d866:	442a      	add	r2, r5
 801d868:	f811 500a 	ldrb.w	r5, [r1, sl]
 801d86c:	442a      	add	r2, r5
 801d86e:	f811 5009 	ldrb.w	r5, [r1, r9]
 801d872:	442a      	add	r2, r5
 801d874:	4422      	add	r2, r4
 801d876:	f811 400c 	ldrb.w	r4, [r1, ip]
 801d87a:	4422      	add	r2, r4
 801d87c:	f811 400e 	ldrb.w	r4, [r1, lr]
 801d880:	4422      	add	r2, r4
 801d882:	4402      	add	r2, r0
 801d884:	9803      	ldr	r0, [sp, #12]
 801d886:	5c08      	ldrb	r0, [r1, r0]
 801d888:	4402      	add	r2, r0
 801d88a:	9800      	ldr	r0, [sp, #0]
 801d88c:	5c08      	ldrb	r0, [r1, r0]
 801d88e:	4402      	add	r2, r0
 801d890:	9801      	ldr	r0, [sp, #4]
 801d892:	5c08      	ldrb	r0, [r1, r0]
 801d894:	4402      	add	r2, r0
 801d896:	9802      	ldr	r0, [sp, #8]
 801d898:	7adb      	ldrb	r3, [r3, #11]
 801d89a:	5c08      	ldrb	r0, [r1, r0]
 801d89c:	4402      	add	r2, r0
 801d89e:	4413      	add	r3, r2
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d8a0:	4810      	ldr	r0, [pc, #64]	; (801d8e4 <packet_generator_Calculated_data_send+0x250>)
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + dataToSend[q]+dataToSend[q+1]+dataToSend[q+2] + dataToSend[q+3] + dataToSend[q+4]+
 801d8a2:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d8a6:	2240      	movs	r2, #64	; 0x40
 801d8a8:	f7ea fd18 	bl	80082dc <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(3);
 801d8ac:	2003      	movs	r0, #3
 801d8ae:	f7e3 fbbd 	bl	800102c <HAL_Delay>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801d8b2:	4b0d      	ldr	r3, [pc, #52]	; (801d8e8 <packet_generator_Calculated_data_send+0x254>)
 801d8b4:	2200      	movs	r2, #0
 801d8b6:	601a      	str	r2, [r3, #0]
 801d8b8:	605a      	str	r2, [r3, #4]
 801d8ba:	609a      	str	r2, [r3, #8]
}
 801d8bc:	b007      	add	sp, #28
 801d8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8c2:	bf00      	nop
 801d8c4:	2008f55c 	.word	0x2008f55c
 801d8c8:	20090ab6 	.word	0x20090ab6
 801d8cc:	20000ebc 	.word	0x20000ebc
 801d8d0:	2008f548 	.word	0x2008f548
 801d8d4:	20054940 	.word	0x20054940
 801d8d8:	20090ab9 	.word	0x20090ab9
 801d8dc:	200056a1 	.word	0x200056a1
 801d8e0:	2008f540 	.word	0x2008f540
 801d8e4:	20095cec 	.word	0x20095cec
 801d8e8:	2008f550 	.word	0x2008f550
 801d8ec:	2000d53c 	.word	0x2000d53c

0801d8f0 <usb_receive_processing>:
{
 801d8f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(dataToReceive[0] == 0xAB)
 801d8f4:	4ca6      	ldr	r4, [pc, #664]	; (801db90 <usb_receive_processing+0x2a0>)
 801d8f6:	f894 9000 	ldrb.w	r9, [r4]
	uint32_t PAGEError = 0;
 801d8fa:	2500      	movs	r5, #0
		if(dataToReceive[0] == 0xAB)
 801d8fc:	f1b9 0fab 	cmp.w	r9, #171	; 0xab
	uint32_t PAGEError = 0;
 801d900:	9501      	str	r5, [sp, #4]
 801d902:	4626      	mov	r6, r4
		if(dataToReceive[0] == 0xAB)
 801d904:	d12a      	bne.n	801d95c <usb_receive_processing+0x6c>
			if(dataToReceive[1] == 0x12)
 801d906:	f894 8001 	ldrb.w	r8, [r4, #1]
 801d90a:	f1b8 0f12 	cmp.w	r8, #18
 801d90e:	d117      	bne.n	801d940 <usb_receive_processing+0x50>
			switch(dataToReceive[2])
 801d910:	78a7      	ldrb	r7, [r4, #2]
 801d912:	2f0a      	cmp	r7, #10
 801d914:	f000 80dd 	beq.w	801dad2 <usb_receive_processing+0x1e2>
 801d918:	d815      	bhi.n	801d946 <usb_receive_processing+0x56>
 801d91a:	2f02      	cmp	r7, #2
 801d91c:	d023      	beq.n	801d966 <usb_receive_processing+0x76>
 801d91e:	2f04      	cmp	r7, #4
 801d920:	f000 81a2 	beq.w	801dc68 <usb_receive_processing+0x378>
 801d924:	2f01      	cmp	r7, #1
 801d926:	d119      	bne.n	801d95c <usb_receive_processing+0x6c>
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801d928:	78f2      	ldrb	r2, [r6, #3]
						send_usb_block = 1;
 801d92a:	4c9a      	ldr	r4, [pc, #616]	; (801db94 <usb_receive_processing+0x2a4>)
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801d92c:	2a01      	cmp	r2, #1
						send_usb_block = 1;
 801d92e:	7027      	strb	r7, [r4, #0]
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801d930:	d116      	bne.n	801d960 <usb_receive_processing+0x70>
						packet_generator_Rabs_data_send();
 801d932:	f7ff fe1d 	bl	801d570 <packet_generator_Rabs_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d936:	2300      	movs	r3, #0
 801d938:	6033      	str	r3, [r6, #0]
 801d93a:	6073      	str	r3, [r6, #4]
 801d93c:	60b3      	str	r3, [r6, #8]
						send_usb_block = 0;
 801d93e:	7023      	strb	r3, [r4, #0]
}
 801d940:	b002      	add	sp, #8
 801d942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch(dataToReceive[2])
 801d946:	2f0c      	cmp	r7, #12
 801d948:	f000 8146 	beq.w	801dbd8 <usb_receive_processing+0x2e8>
 801d94c:	f0c0 80d8 	bcc.w	801db00 <usb_receive_processing+0x210>
 801d950:	2f0d      	cmp	r7, #13
 801d952:	f000 80a7 	beq.w	801daa4 <usb_receive_processing+0x1b4>
 801d956:	2f66      	cmp	r7, #102	; 0x66
 801d958:	f000 816f 	beq.w	801dc3a <usb_receive_processing+0x34a>
			__asm("nop");
 801d95c:	bf00      	nop
}
 801d95e:	e7ef      	b.n	801d940 <usb_receive_processing+0x50>
						packet_generator_data_send();
 801d960:	f7ff fdb0 	bl	801d4c4 <packet_generator_data_send>
 801d964:	e7e7      	b.n	801d936 <usb_receive_processing+0x46>
						send_usb_block = 0;
 801d966:	4b8b      	ldr	r3, [pc, #556]	; (801db94 <usb_receive_processing+0x2a4>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801d968:	4c8b      	ldr	r4, [pc, #556]	; (801db98 <usb_receive_processing+0x2a8>)
						send_usb_block = 0;
 801d96a:	701d      	strb	r5, [r3, #0]
						memset(dataToSend, 0, sizeof(dataToSend));
 801d96c:	4629      	mov	r1, r5
						if (exp_num != dataToReceive[3]){
 801d96e:	4d8b      	ldr	r5, [pc, #556]	; (801db9c <usb_receive_processing+0x2ac>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801d970:	2240      	movs	r2, #64	; 0x40
 801d972:	4620      	mov	r0, r4
 801d974:	f002 fe43 	bl	80205fe <memset>
						if (exp_num != dataToReceive[3]){
 801d978:	78f3      	ldrb	r3, [r6, #3]
 801d97a:	782a      	ldrb	r2, [r5, #0]
						dataToSend[0] = 0xAB;
 801d97c:	f884 9000 	strb.w	r9, [r4]
						if (exp_num != dataToReceive[3]){
 801d980:	4293      	cmp	r3, r2
						dataToSend[1] = 0x12;
 801d982:	f884 8001 	strb.w	r8, [r4, #1]
						dataToSend[2] = CMD_CNFG;
 801d986:	70a7      	strb	r7, [r4, #2]
						if (exp_num != dataToReceive[3]){
 801d988:	d07a      	beq.n	801da80 <usb_receive_processing+0x190>
							exp_num = dataToReceive[3];
 801d98a:	702b      	strb	r3, [r5, #0]
							htim2.Init.Period = exposure_timer_period[exp_num];
 801d98c:	782a      	ldrb	r2, [r5, #0]
 801d98e:	4b84      	ldr	r3, [pc, #528]	; (801dba0 <usb_receive_processing+0x2b0>)
 801d990:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801d994:	4b83      	ldr	r3, [pc, #524]	; (801dba4 <usb_receive_processing+0x2b4>)
 801d996:	60da      	str	r2, [r3, #12]
							MX_TIM2_Init();
 801d998:	f7ff fbc6 	bl	801d128 <MX_TIM2_Init>
							Calibration_Exposure_Change(exp_num);
 801d99c:	7828      	ldrb	r0, [r5, #0]
 801d99e:	f7f1 fc59 	bl	800f254 <Calibration_Exposure_Change>
						if (LaserOnOff != dataToReceive[4]){
 801d9a2:	4a81      	ldr	r2, [pc, #516]	; (801dba8 <usb_receive_processing+0x2b8>)
 801d9a4:	7933      	ldrb	r3, [r6, #4]
 801d9a6:	7811      	ldrb	r1, [r2, #0]
 801d9a8:	428b      	cmp	r3, r1
 801d9aa:	4691      	mov	r9, r2
 801d9ac:	d06c      	beq.n	801da88 <usb_receive_processing+0x198>
							LaserOnOff = (dataToReceive[4] > 0) ? 1 : 0;
 801d9ae:	3300      	adds	r3, #0
 801d9b0:	bf18      	it	ne
 801d9b2:	2301      	movne	r3, #1
 801d9b4:	7013      	strb	r3, [r2, #0]
							if(LaserOnOff == 0){
 801d9b6:	7813      	ldrb	r3, [r2, #0]
 801d9b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d161      	bne.n	801da84 <usb_receive_processing+0x194>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d9c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d9c4:	4879      	ldr	r0, [pc, #484]	; (801dbac <usb_receive_processing+0x2bc>)
 801d9c6:	f7e4 fe0d 	bl	80025e4 <HAL_GPIO_WritePin>
						if (VGain != dataToReceive[5]){
 801d9ca:	4a79      	ldr	r2, [pc, #484]	; (801dbb0 <usb_receive_processing+0x2c0>)
 801d9cc:	7973      	ldrb	r3, [r6, #5]
 801d9ce:	7811      	ldrb	r1, [r2, #0]
 801d9d0:	428b      	cmp	r3, r1
 801d9d2:	4690      	mov	r8, r2
 801d9d4:	d05c      	beq.n	801da90 <usb_receive_processing+0x1a0>
							VGain = (dataToReceive[5] > 0) ? 1 : 0;
 801d9d6:	3300      	adds	r3, #0
 801d9d8:	bf18      	it	ne
 801d9da:	2301      	movne	r3, #1
 801d9dc:	7013      	strb	r3, [r2, #0]
							if(VGain == 0){
 801d9de:	7813      	ldrb	r3, [r2, #0]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d153      	bne.n	801da8c <usb_receive_processing+0x19c>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 801d9e4:	2201      	movs	r2, #1
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d9e6:	2120      	movs	r1, #32
 801d9e8:	4872      	ldr	r0, [pc, #456]	; (801dbb4 <usb_receive_processing+0x2c4>)
 801d9ea:	f7e4 fdfb 	bl	80025e4 <HAL_GPIO_WritePin>
						if (TFT_ON_OFF != dataToReceive[6]){
 801d9ee:	4f72      	ldr	r7, [pc, #456]	; (801dbb8 <usb_receive_processing+0x2c8>)
 801d9f0:	79b3      	ldrb	r3, [r6, #6]
 801d9f2:	783a      	ldrb	r2, [r7, #0]
 801d9f4:	4293      	cmp	r3, r2
 801d9f6:	d051      	beq.n	801da9c <usb_receive_processing+0x1ac>
							TFT_ON_OFF = (dataToReceive[6] > 0) ? 1 : 0;
 801d9f8:	3300      	adds	r3, #0
 801d9fa:	bf18      	it	ne
 801d9fc:	2301      	movne	r3, #1
 801d9fe:	703b      	strb	r3, [r7, #0]
							if(TFT_ON_OFF == 1){
 801da00:	f897 a000 	ldrb.w	sl, [r7]
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801da04:	486d      	ldr	r0, [pc, #436]	; (801dbbc <usb_receive_processing+0x2cc>)
							if(TFT_ON_OFF == 1){
 801da06:	fa5f fa8a 	uxtb.w	sl, sl
 801da0a:	f1ba 0f01 	cmp.w	sl, #1
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801da0e:	f04f 0104 	mov.w	r1, #4
							if(TFT_ON_OFF == 1){
 801da12:	d13f      	bne.n	801da94 <usb_receive_processing+0x1a4>
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801da14:	f7e8 fc56 	bl	80062c4 <HAL_TIM_PWM_Start>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801da18:	4652      	mov	r2, sl
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801da1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801da1e:	4865      	ldr	r0, [pc, #404]	; (801dbb4 <usb_receive_processing+0x2c4>)
 801da20:	f7e4 fde0 	bl	80025e4 <HAL_GPIO_WritePin>
						if (Mode_EL != dataToReceive[7]){
 801da24:	4866      	ldr	r0, [pc, #408]	; (801dbc0 <usb_receive_processing+0x2d0>)
 801da26:	79f3      	ldrb	r3, [r6, #7]
 801da28:	7802      	ldrb	r2, [r0, #0]
 801da2a:	429a      	cmp	r2, r3
 801da2c:	d038      	beq.n	801daa0 <usb_receive_processing+0x1b0>
							Mode_EL = (dataToReceive[7] > 0) ? 1 : 0; //Mode_EL=1 -Rabs_E, Mode_EL=0 -Rabs_L
 801da2e:	3300      	adds	r3, #0
 801da30:	bf18      	it	ne
 801da32:	2301      	movne	r3, #1
 801da34:	7003      	strb	r3, [r0, #0]
						dataToSend[3] = exp_num;
 801da36:	7829      	ldrb	r1, [r5, #0]
						dataToSend[4] = LaserOnOff;
 801da38:	f899 5000 	ldrb.w	r5, [r9]
						dataToSend[5] = VGain;
 801da3c:	f898 3000 	ldrb.w	r3, [r8]
						dataToSend[7] = Mode_EL;
 801da40:	7800      	ldrb	r0, [r0, #0]
 801da42:	71e0      	strb	r0, [r4, #7]
						dataToSend[5] = VGain;
 801da44:	b2da      	uxtb	r2, r3
						dataToSend[3] = exp_num;
 801da46:	b2c9      	uxtb	r1, r1
						dataToSend[4] = LaserOnOff;
 801da48:	b2ed      	uxtb	r5, r5
						dataToSend[6] = TFT_ON_OFF;
 801da4a:	783b      	ldrb	r3, [r7, #0]
						dataToSend[3] = exp_num;
 801da4c:	70e1      	strb	r1, [r4, #3]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801da4e:	4429      	add	r1, r5
						dataToSend[5] = VGain;
 801da50:	7162      	strb	r2, [r4, #5]
						dataToSend[6] = TFT_ON_OFF;
 801da52:	b2db      	uxtb	r3, r3
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801da54:	440a      	add	r2, r1
						dataToSend[6] = TFT_ON_OFF;
 801da56:	71a3      	strb	r3, [r4, #6]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801da58:	4413      	add	r3, r2
 801da5a:	7822      	ldrb	r2, [r4, #0]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801da5c:	494e      	ldr	r1, [pc, #312]	; (801db98 <usb_receive_processing+0x2a8>)
 801da5e:	4859      	ldr	r0, [pc, #356]	; (801dbc4 <usb_receive_processing+0x2d4>)
						dataToSend[4] = LaserOnOff;
 801da60:	7125      	strb	r5, [r4, #4]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801da62:	4413      	add	r3, r2
 801da64:	7862      	ldrb	r2, [r4, #1]
 801da66:	4413      	add	r3, r2
 801da68:	78a2      	ldrb	r2, [r4, #2]
 801da6a:	4413      	add	r3, r2
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801da6c:	2240      	movs	r2, #64	; 0x40
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801da6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801da72:	f7ea fc33 	bl	80082dc <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801da76:	2300      	movs	r3, #0
 801da78:	6033      	str	r3, [r6, #0]
 801da7a:	6073      	str	r3, [r6, #4]
 801da7c:	60b3      	str	r3, [r6, #8]
					break;
 801da7e:	e75f      	b.n	801d940 <usb_receive_processing+0x50>
							__asm("nop");
 801da80:	bf00      	nop
 801da82:	e78e      	b.n	801d9a2 <usb_receive_processing+0xb2>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801da84:	2201      	movs	r2, #1
 801da86:	e79b      	b.n	801d9c0 <usb_receive_processing+0xd0>
							__asm("nop");
 801da88:	bf00      	nop
 801da8a:	e79e      	b.n	801d9ca <usb_receive_processing+0xda>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801da8c:	2200      	movs	r2, #0
 801da8e:	e7aa      	b.n	801d9e6 <usb_receive_processing+0xf6>
							__asm("nop");
 801da90:	bf00      	nop
 801da92:	e7ac      	b.n	801d9ee <usb_receive_processing+0xfe>
								HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801da94:	f7e8 fc4c 	bl	8006330 <HAL_TIM_PWM_Stop>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801da98:	2200      	movs	r2, #0
 801da9a:	e7be      	b.n	801da1a <usb_receive_processing+0x12a>
							__asm("nop");
 801da9c:	bf00      	nop
 801da9e:	e7c1      	b.n	801da24 <usb_receive_processing+0x134>
							__asm("nop");
 801daa0:	bf00      	nop
 801daa2:	e7c8      	b.n	801da36 <usb_receive_processing+0x146>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801daa4:	4e48      	ldr	r6, [pc, #288]	; (801dbc8 <usb_receive_processing+0x2d8>)
						EraseInitStruct.NbPages = 44; 
 801daa6:	232c      	movs	r3, #44	; 0x2c
 801daa8:	60f3      	str	r3, [r6, #12]
						EraseInitStruct.Banks = FLASH_BANK_2; 
 801daaa:	2302      	movs	r3, #2
 801daac:	6073      	str	r3, [r6, #4]
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801daae:	6035      	str	r5, [r6, #0]
						EraseInitStruct.Page = 0;
 801dab0:	60b5      	str	r5, [r6, #8]
						HAL_FLASH_Unlock(); 
 801dab2:	f7e4 fa93 	bl	8001fdc <HAL_FLASH_Unlock>
						if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 801dab6:	a901      	add	r1, sp, #4
 801dab8:	4630      	mov	r0, r6
 801daba:	f7e4 fba9 	bl	8002210 <HAL_FLASHEx_Erase>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801dabe:	4b43      	ldr	r3, [pc, #268]	; (801dbcc <usb_receive_processing+0x2dc>)
 801dac0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801dac4:	611a      	str	r2, [r3, #16]
						HAL_FLASH_Lock();
 801dac6:	f7e4 fa9b 	bl	8002000 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801daca:	6025      	str	r5, [r4, #0]
 801dacc:	6065      	str	r5, [r4, #4]
 801dace:	60a5      	str	r5, [r4, #8]
					break;
 801dad0:	e736      	b.n	801d940 <usb_receive_processing+0x50>
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801dad2:	7923      	ldrb	r3, [r4, #4]
 801dad4:	78e2      	ldrb	r2, [r4, #3]
 801dad6:	041b      	lsls	r3, r3, #16
 801dad8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801dadc:	79a2      	ldrb	r2, [r4, #6]
 801dade:	4313      	orrs	r3, r2
 801dae0:	7962      	ldrb	r2, [r4, #5]
 801dae2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801dae6:	4a3a      	ldr	r2, [pc, #232]	; (801dbd0 <usb_receive_processing+0x2e0>)
 801dae8:	6013      	str	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801daea:	4b2b      	ldr	r3, [pc, #172]	; (801db98 <usb_receive_processing+0x2a8>)
						dataToSend[2] = 0x1A;
 801daec:	221a      	movs	r2, #26
						dataToSend[0] = 0xAB;
 801daee:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801daf2:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x1A;
 801daf6:	709a      	strb	r2, [r3, #2]
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801daf8:	6025      	str	r5, [r4, #0]
 801dafa:	6065      	str	r5, [r4, #4]
 801dafc:	60a5      	str	r5, [r4, #8]
 801dafe:	e043      	b.n	801db88 <usb_receive_processing+0x298>
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801db00:	79e0      	ldrb	r0, [r4, #7]
 801db02:	f894 8008 	ldrb.w	r8, [r4, #8]
 801db06:	4e33      	ldr	r6, [pc, #204]	; (801dbd4 <usb_receive_processing+0x2e4>)
 801db08:	ea4f 4108 	mov.w	r1, r8, lsl #16
 801db0c:	0603      	lsls	r3, r0, #24
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801db0e:	f894 8009 	ldrb.w	r8, [r4, #9]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801db12:	79a0      	ldrb	r0, [r4, #6]
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801db14:	462a      	mov	r2, r5
 801db16:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801db18:	2100      	movs	r1, #0
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801db1a:	432a      	orrs	r2, r5
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801db1c:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801db1e:	ea4f 2108 	mov.w	r1, r8, lsl #8
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801db22:	f894 8003 	ldrb.w	r8, [r4, #3]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801db26:	4302      	orrs	r2, r0
 801db28:	432a      	orrs	r2, r5
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801db2a:	ea4f 6008 	mov.w	r0, r8, lsl #24
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801db2e:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801db30:	f894 8004 	ldrb.w	r8, [r4, #4]
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801db34:	7aa1      	ldrb	r1, [r4, #10]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801db36:	432a      	orrs	r2, r5
 801db38:	430b      	orrs	r3, r1
 801db3a:	4302      	orrs	r2, r0
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801db3c:	2100      	movs	r1, #0
 801db3e:	ea4f 4008 	mov.w	r0, r8, lsl #16
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801db42:	f894 8005 	ldrb.w	r8, [r4, #5]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801db46:	4d22      	ldr	r5, [pc, #136]	; (801dbd0 <usb_receive_processing+0x2e0>)
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801db48:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801db4a:	2100      	movs	r1, #0
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801db4c:	4302      	orrs	r2, r0
 801db4e:	430b      	orrs	r3, r1
 801db50:	ea4f 2008 	mov.w	r0, r8, lsl #8
 801db54:	2100      	movs	r1, #0
 801db56:	4310      	orrs	r0, r2
 801db58:	4319      	orrs	r1, r3
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801db5a:	e9c6 0100 	strd	r0, r1, [r6]
						HAL_FLASH_Unlock();
 801db5e:	f7e4 fa3d 	bl	8001fdc <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801db62:	4b1a      	ldr	r3, [pc, #104]	; (801dbcc <usb_receive_processing+0x2dc>)
 801db64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801db68:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801db6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801db6e:	6829      	ldr	r1, [r5, #0]
 801db70:	2000      	movs	r0, #0
 801db72:	f7e4 fa8d 	bl	8002090 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801db76:	4604      	mov	r4, r0
 801db78:	2800      	cmp	r0, #0
 801db7a:	d1f6      	bne.n	801db6a <usb_receive_processing+0x27a>
						HAL_FLASH_Lock();
 801db7c:	f7e4 fa40 	bl	8002000 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801db80:	4b03      	ldr	r3, [pc, #12]	; (801db90 <usb_receive_processing+0x2a0>)
 801db82:	601c      	str	r4, [r3, #0]
 801db84:	605c      	str	r4, [r3, #4]
 801db86:	609c      	str	r4, [r3, #8]
						HAL_Delay(3);
 801db88:	2003      	movs	r0, #3
 801db8a:	f7e3 fa4f 	bl	800102c <HAL_Delay>
					break;
 801db8e:	e6d7      	b.n	801d940 <usb_receive_processing+0x50>
 801db90:	2008f550 	.word	0x2008f550
 801db94:	200905d1 	.word	0x200905d1
 801db98:	2008f55c 	.word	0x2008f55c
 801db9c:	200905b6 	.word	0x200905b6
 801dba0:	08032150 	.word	0x08032150
 801dba4:	20095c58 	.word	0x20095c58
 801dba8:	2000bd38 	.word	0x2000bd38
 801dbac:	48000800 	.word	0x48000800
 801dbb0:	20000ebf 	.word	0x20000ebf
 801dbb4:	48001400 	.word	0x48001400
 801dbb8:	20000ebe 	.word	0x20000ebe
 801dbbc:	200957b4 	.word	0x200957b4
 801dbc0:	20000ebc 	.word	0x20000ebc
 801dbc4:	20095cec 	.word	0x20095cec
 801dbc8:	200959ac 	.word	0x200959ac
 801dbcc:	40022000 	.word	0x40022000
 801dbd0:	20095adc 	.word	0x20095adc
 801dbd4:	20095a48 	.word	0x20095a48
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801dbd8:	7920      	ldrb	r0, [r4, #4]
 801dbda:	78e3      	ldrb	r3, [r4, #3]
 801dbdc:	0400      	lsls	r0, r0, #16
 801dbde:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801dbe2:	79a3      	ldrb	r3, [r4, #6]
 801dbe4:	4318      	orrs	r0, r3
 801dbe6:	7963      	ldrb	r3, [r4, #5]
 801dbe8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801dbec:	4b23      	ldr	r3, [pc, #140]	; (801dc7c <usb_receive_processing+0x38c>)
 801dbee:	6018      	str	r0, [r3, #0]
						flash_data_read = flash_data_read_buff(flash_address);
 801dbf0:	f7ee fb91 	bl	800c316 <flash_data_read_buff>
 801dbf4:	4b22      	ldr	r3, [pc, #136]	; (801dc80 <usb_receive_processing+0x390>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801dbf6:	4a23      	ldr	r2, [pc, #140]	; (801dc84 <usb_receive_processing+0x394>)
						flash_data_read = flash_data_read_buff(flash_address);
 801dbf8:	e9c3 0100 	strd	r0, r1, [r3]
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801dbfc:	cb03      	ldmia	r3!, {r0, r1}
 801dbfe:	6051      	str	r1, [r2, #4]
						dataToSend[0] = 0xAB;
 801dc00:	4921      	ldr	r1, [pc, #132]	; (801dc88 <usb_receive_processing+0x398>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801dc02:	6010      	str	r0, [r2, #0]
						dataToSend[2] = 0x1C;
 801dc04:	231c      	movs	r3, #28
 801dc06:	708b      	strb	r3, [r1, #2]
						dataToSend[7] = flash_data_read_SND[7];
 801dc08:	79d3      	ldrb	r3, [r2, #7]
 801dc0a:	71cb      	strb	r3, [r1, #7]
						dataToSend[8] = flash_data_read_SND[6];
 801dc0c:	7993      	ldrb	r3, [r2, #6]
 801dc0e:	720b      	strb	r3, [r1, #8]
						dataToSend[9] = flash_data_read_SND[5];
 801dc10:	7953      	ldrb	r3, [r2, #5]
 801dc12:	724b      	strb	r3, [r1, #9]
						dataToSend[10]= flash_data_read_SND[4];
 801dc14:	7913      	ldrb	r3, [r2, #4]
 801dc16:	728b      	strb	r3, [r1, #10]
						dataToSend[3] = flash_data_read_SND[3];
 801dc18:	78d3      	ldrb	r3, [r2, #3]
 801dc1a:	70cb      	strb	r3, [r1, #3]
						dataToSend[4] = flash_data_read_SND[2];
 801dc1c:	7893      	ldrb	r3, [r2, #2]
 801dc1e:	710b      	strb	r3, [r1, #4]
						dataToSend[5] = flash_data_read_SND[1];
 801dc20:	7853      	ldrb	r3, [r2, #1]
 801dc22:	714b      	strb	r3, [r1, #5]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801dc24:	4819      	ldr	r0, [pc, #100]	; (801dc8c <usb_receive_processing+0x39c>)
						dataToSend[6]	= flash_data_read_SND[0];
 801dc26:	7813      	ldrb	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801dc28:	f881 9000 	strb.w	r9, [r1]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801dc2c:	2240      	movs	r2, #64	; 0x40
						dataToSend[1] = 0x12;
 801dc2e:	f881 8001 	strb.w	r8, [r1, #1]
						dataToSend[6]	= flash_data_read_SND[0];
 801dc32:	718b      	strb	r3, [r1, #6]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801dc34:	f7ea fb52 	bl	80082dc <USBD_CUSTOM_HID_SendReport>
 801dc38:	e75e      	b.n	801daf8 <usb_receive_processing+0x208>
						if(CRC_STATUS == CRC_OK){
 801dc3a:	4a15      	ldr	r2, [pc, #84]	; (801dc90 <usb_receive_processing+0x3a0>)
						dataToSend[0] = 0xAB;
 801dc3c:	4b12      	ldr	r3, [pc, #72]	; (801dc88 <usb_receive_processing+0x398>)
						if(CRC_STATUS == CRC_OK){
 801dc3e:	7812      	ldrb	r2, [r2, #0]
						dataToSend[0] = 0xAB;
 801dc40:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801dc44:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x66;
 801dc48:	709f      	strb	r7, [r3, #2]
						if(CRC_STATUS == CRC_OK){
 801dc4a:	b95a      	cbnz	r2, 801dc64 <usb_receive_processing+0x374>
							dataToSend[3] = 0x01;
 801dc4c:	2201      	movs	r2, #1
 801dc4e:	70da      	strb	r2, [r3, #3]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801dc50:	2240      	movs	r2, #64	; 0x40
 801dc52:	490d      	ldr	r1, [pc, #52]	; (801dc88 <usb_receive_processing+0x398>)
 801dc54:	480d      	ldr	r0, [pc, #52]	; (801dc8c <usb_receive_processing+0x39c>)
 801dc56:	f7ea fb41 	bl	80082dc <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801dc5a:	2300      	movs	r3, #0
 801dc5c:	6033      	str	r3, [r6, #0]
 801dc5e:	6073      	str	r3, [r6, #4]
 801dc60:	60b3      	str	r3, [r6, #8]
 801dc62:	e791      	b.n	801db88 <usb_receive_processing+0x298>
							dataToSend[3] = 0x00;
 801dc64:	70dd      	strb	r5, [r3, #3]
 801dc66:	e7f3      	b.n	801dc50 <usb_receive_processing+0x360>
						send_usb_block = 1;
 801dc68:	4e0a      	ldr	r6, [pc, #40]	; (801dc94 <usb_receive_processing+0x3a4>)
 801dc6a:	2301      	movs	r3, #1
 801dc6c:	7033      	strb	r3, [r6, #0]
						packet_generator_Calculated_data_send();
 801dc6e:	f7ff fd11 	bl	801d694 <packet_generator_Calculated_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801dc72:	6025      	str	r5, [r4, #0]
 801dc74:	6065      	str	r5, [r4, #4]
 801dc76:	60a5      	str	r5, [r4, #8]
						send_usb_block = 0;
 801dc78:	7035      	strb	r5, [r6, #0]
					break;
 801dc7a:	e661      	b.n	801d940 <usb_receive_processing+0x50>
 801dc7c:	20095adc 	.word	0x20095adc
 801dc80:	200957f8 	.word	0x200957f8
 801dc84:	200905b7 	.word	0x200905b7
 801dc88:	2008f55c 	.word	0x2008f55c
 801dc8c:	20095cec 	.word	0x20095cec
 801dc90:	20095712 	.word	0x20095712
 801dc94:	200905d1 	.word	0x200905d1

0801dc98 <string_parse>:
{			
 801dc98:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(buf_str[0] == 0xAB)
 801dc9a:	7801      	ldrb	r1, [r0, #0]
 801dc9c:	29ab      	cmp	r1, #171	; 0xab
 801dc9e:	f040 8095 	bne.w	801ddcc <string_parse+0x134>
		if(buf_str[1] == 0x12)
 801dca2:	7843      	ldrb	r3, [r0, #1]
 801dca4:	2b12      	cmp	r3, #18
 801dca6:	f040 808a 	bne.w	801ddbe <string_parse+0x126>
			if(buf_str[2] == 0x02)
 801dcaa:	7882      	ldrb	r2, [r0, #2]
 801dcac:	2a02      	cmp	r2, #2
 801dcae:	f040 8086 	bne.w	801ddbe <string_parse+0x126>
							data_bluetooth_send[0] = 0xAB;
 801dcb2:	4a47      	ldr	r2, [pc, #284]	; (801ddd0 <string_parse+0x138>)
							data_bluetooth_send[1] = 0x12;
 801dcb4:	7053      	strb	r3, [r2, #1]
							data_bluetooth_send[2] = 0x04;
 801dcb6:	2304      	movs	r3, #4
 801dcb8:	7093      	strb	r3, [r2, #2]
							data_bluetooth_send[3] = (Mode_EL == 0)? 0 : 1;
 801dcba:	4b46      	ldr	r3, [pc, #280]	; (801ddd4 <string_parse+0x13c>)
							data_bluetooth_send[0] = 0xAB;
 801dcbc:	7011      	strb	r1, [r2, #0]
							data_bluetooth_send[3] = (Mode_EL == 0)? 0 : 1;
 801dcbe:	781b      	ldrb	r3, [r3, #0]
 801dcc0:	4945      	ldr	r1, [pc, #276]	; (801ddd8 <string_parse+0x140>)
 801dcc2:	3300      	adds	r3, #0
 801dcc4:	bf18      	it	ne
 801dcc6:	2301      	movne	r3, #1
 801dcc8:	70d3      	strb	r3, [r2, #3]
							data_bluetooth_send[4] = 0;
 801dcca:	2300      	movs	r3, #0
 801dccc:	7113      	strb	r3, [r2, #4]
 801dcce:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 801dcd2:	4613      	mov	r3, r2
								memcpy(&buff_float, &Line_Rabs_buff[1023-i], sizeof(float));
 801dcd4:	f851 0904 	ldr.w	r0, [r1], #-4
								data_bluetooth_send[qz+3] = (buff_float) & 0x000000FF;
 801dcd8:	7210      	strb	r0, [r2, #8]
								data_bluetooth_send[qz+0] =  (buff_float >> 24) & 0x000000FF;
 801dcda:	0e05      	lsrs	r5, r0, #24
 801dcdc:	7155      	strb	r5, [r2, #5]
								data_bluetooth_send[qz+1] =  (buff_float >> 16) & 0x000000FF;
 801dcde:	0c05      	lsrs	r5, r0, #16
 801dce0:	7195      	strb	r5, [r2, #6]
							for(uint16_t i = 0; i < 1024; i++){
 801dce2:	428c      	cmp	r4, r1
								data_bluetooth_send[qz+2] =  (buff_float >> 8) & 0x000000FF;
 801dce4:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801dce8:	71d5      	strb	r5, [r2, #7]
 801dcea:	f102 0204 	add.w	r2, r2, #4
							for(uint16_t i = 0; i < 1024; i++){
 801dcee:	d1f1      	bne.n	801dcd4 <string_parse+0x3c>
						memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801dcf0:	493a      	ldr	r1, [pc, #232]	; (801dddc <string_parse+0x144>)
 801dcf2:	680a      	ldr	r2, [r1, #0]
						data_bluetooth_send[qz] =  (buff_float >> 24) & 0x000000FF;
 801dcf4:	f241 0005 	movw	r0, #4101	; 0x1005
 801dcf8:	0e14      	lsrs	r4, r2, #24
 801dcfa:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+1] = (buff_float >> 16) & 0x000000FF;
 801dcfc:	f241 0006 	movw	r0, #4102	; 0x1006
 801dd00:	0c14      	lsrs	r4, r2, #16
 801dd02:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+2] = (buff_float >> 8) & 0x000000FF;
 801dd04:	f241 0007 	movw	r0, #4103	; 0x1007
 801dd08:	0a14      	lsrs	r4, r2, #8
 801dd0a:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+3] = (buff_float) & 0x000000FF;
 801dd0c:	f241 0008 	movw	r0, #4104	; 0x1008
 801dd10:	541a      	strb	r2, [r3, r0]
						memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801dd12:	684a      	ldr	r2, [r1, #4]
 801dd14:	9201      	str	r2, [sp, #4]
						data_bluetooth_send[qz+4] = (buff_float >> 24) & 0x000000FF;
 801dd16:	f241 0109 	movw	r1, #4105	; 0x1009
 801dd1a:	0e10      	lsrs	r0, r2, #24
 801dd1c:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+5] = (buff_float >> 16) & 0x000000FF;
 801dd1e:	f241 010a 	movw	r1, #4106	; 0x100a
 801dd22:	0c10      	lsrs	r0, r2, #16
 801dd24:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+6] = (buff_float >> 8) & 0x000000FF;
 801dd26:	f241 010b 	movw	r1, #4107	; 0x100b
 801dd2a:	0a10      	lsrs	r0, r2, #8
 801dd2c:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+7] = (buff_float) & 0x000000FF;
 801dd2e:	f241 010c 	movw	r1, #4108	; 0x100c
 801dd32:	545a      	strb	r2, [r3, r1]
						memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801dd34:	4a2a      	ldr	r2, [pc, #168]	; (801dde0 <string_parse+0x148>)
 801dd36:	8812      	ldrh	r2, [r2, #0]
 801dd38:	f8ad 2004 	strh.w	r2, [sp, #4]
						data_bluetooth_send[qz+8]= (buff_float >> 8) & 0x000000FF;
 801dd3c:	9a01      	ldr	r2, [sp, #4]
 801dd3e:	f241 010d 	movw	r1, #4109	; 0x100d
 801dd42:	0a10      	lsrs	r0, r2, #8
 801dd44:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+9] = (buff_float) & 0x000000FF;
 801dd46:	f241 010e 	movw	r1, #4110	; 0x100e
 801dd4a:	545a      	strb	r2, [r3, r1]
						data_bluetooth_send[qz+10]= Source_Type;
 801dd4c:	4a25      	ldr	r2, [pc, #148]	; (801dde4 <string_parse+0x14c>)
 801dd4e:	7811      	ldrb	r1, [r2, #0]
 801dd50:	f241 020f 	movw	r2, #4111	; 0x100f
 801dd54:	5499      	strb	r1, [r3, r2]
						if(Calculate_deltaEab_Done == 0x01)
 801dd56:	4a24      	ldr	r2, [pc, #144]	; (801dde8 <string_parse+0x150>)
 801dd58:	7812      	ldrb	r2, [r2, #0]
 801dd5a:	2a01      	cmp	r2, #1
 801dd5c:	d131      	bne.n	801ddc2 <string_parse+0x12a>
							memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801dd5e:	4a23      	ldr	r2, [pc, #140]	; (801ddec <string_parse+0x154>)
 801dd60:	8812      	ldrh	r2, [r2, #0]
 801dd62:	f8ad 2004 	strh.w	r2, [sp, #4]
							data_bluetooth_send[qz+11] = (buff_float >> 8) & 0x000000FF;
 801dd66:	9a01      	ldr	r2, [sp, #4]
 801dd68:	f241 0110 	movw	r1, #4112	; 0x1010
 801dd6c:	0a10      	lsrs	r0, r2, #8
 801dd6e:	5458      	strb	r0, [r3, r1]
							data_bluetooth_send[qz+12] = 0x00;
 801dd70:	f241 0111 	movw	r1, #4113	; 0x1011
						data_bluetooth_send[qz+13] = (buff_float >> 24) & 0x000000FF;
 801dd74:	f241 0012 	movw	r0, #4114	; 0x1012
							data_bluetooth_send[qz+12] = 0x00;
 801dd78:	545a      	strb	r2, [r3, r1]
						memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801dd7a:	491d      	ldr	r1, [pc, #116]	; (801ddf0 <string_parse+0x158>)
 801dd7c:	680a      	ldr	r2, [r1, #0]
						data_bluetooth_send[qz+13] = (buff_float >> 24) & 0x000000FF;
 801dd7e:	0e14      	lsrs	r4, r2, #24
 801dd80:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+14] = (buff_float >> 16) & 0x000000FF;
 801dd82:	f241 0013 	movw	r0, #4115	; 0x1013
 801dd86:	0c14      	lsrs	r4, r2, #16
 801dd88:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+15]= (buff_float >> 8) & 0x000000FF;
 801dd8a:	f241 0014 	movw	r0, #4116	; 0x1014
 801dd8e:	0a14      	lsrs	r4, r2, #8
 801dd90:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+16] = (buff_float) & 0x000000FF;
 801dd92:	f241 0015 	movw	r0, #4117	; 0x1015
 801dd96:	541a      	strb	r2, [r3, r0]
						memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801dd98:	684a      	ldr	r2, [r1, #4]
						data_bluetooth_send[qz+17] = (buff_float >> 24) & 0x000000FF;
 801dd9a:	f241 0116 	movw	r1, #4118	; 0x1016
 801dd9e:	0e10      	lsrs	r0, r2, #24
 801dda0:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+18] = (buff_float >> 16) & 0x000000FF;
 801dda2:	f241 0117 	movw	r1, #4119	; 0x1017
 801dda6:	0c10      	lsrs	r0, r2, #16
 801dda8:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+19] = (buff_float >> 8) & 0x000000FF;
 801ddaa:	f241 0118 	movw	r1, #4120	; 0x1018
 801ddae:	0a10      	lsrs	r0, r2, #8
 801ddb0:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+20] = (buff_float) & 0x000000FF;
 801ddb2:	f241 0119 	movw	r1, #4121	; 0x1019
 801ddb6:	545a      	strb	r2, [r3, r1]
						send_bluetooth = 1;		
 801ddb8:	4b0e      	ldr	r3, [pc, #56]	; (801ddf4 <string_parse+0x15c>)
 801ddba:	2201      	movs	r2, #1
 801ddbc:	701a      	strb	r2, [r3, #0]
}
 801ddbe:	b003      	add	sp, #12
 801ddc0:	bd30      	pop	{r4, r5, pc}
						} else {data_bluetooth_send[qz+11] = 0x00;
 801ddc2:	f241 0110 	movw	r1, #4112	; 0x1010
 801ddc6:	2200      	movs	r2, #0
 801ddc8:	545a      	strb	r2, [r3, r1]
 801ddca:	e7d1      	b.n	801dd70 <string_parse+0xd8>
		__asm("nop");
 801ddcc:	bf00      	nop
}
 801ddce:	e7f6      	b.n	801ddbe <string_parse+0x126>
 801ddd0:	2008f59c 	.word	0x2008f59c
 801ddd4:	20000ebc 	.word	0x20000ebc
 801ddd8:	2000d538 	.word	0x2000d538
 801dddc:	2008f548 	.word	0x2008f548
 801dde0:	20054940 	.word	0x20054940
 801dde4:	20090ab9 	.word	0x20090ab9
 801dde8:	200056a1 	.word	0x200056a1
 801ddec:	20090ab6 	.word	0x20090ab6
 801ddf0:	2008f540 	.word	0x2008f540
 801ddf4:	200905d0 	.word	0x200905d0

0801ddf8 <UART2_RxCpltCallback>:
{
 801ddf8:	b570      	push	{r4, r5, r6, lr}
 if (usartprop.usart_cnt>12)
 801ddfa:	4c0f      	ldr	r4, [pc, #60]	; (801de38 <UART2_RxCpltCallback+0x40>)
 801ddfc:	7b63      	ldrb	r3, [r4, #13]
 801ddfe:	2b0c      	cmp	r3, #12
 801de00:	d908      	bls.n	801de14 <UART2_RxCpltCallback+0x1c>
    usartprop.usart_cnt = 0;
 801de02:	2300      	movs	r3, #0
    HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801de04:	490d      	ldr	r1, [pc, #52]	; (801de3c <UART2_RxCpltCallback+0x44>)
    usartprop.usart_cnt = 0;
 801de06:	7363      	strb	r3, [r4, #13]
    HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801de08:	2201      	movs	r2, #1
  HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801de0a:	480d      	ldr	r0, [pc, #52]	; (801de40 <UART2_RxCpltCallback+0x48>)
}
 801de0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801de10:	f7e8 bc70 	b.w	80066f4 <HAL_UART_Receive_IT>
  b = str1[0];
 801de14:	4d09      	ldr	r5, [pc, #36]	; (801de3c <UART2_RxCpltCallback+0x44>)
 801de16:	782a      	ldrb	r2, [r5, #0]
  usartprop.usart_buf[usartprop.usart_cnt] = b;
 801de18:	54e2      	strb	r2, [r4, r3]
  if(b==0x0A)
 801de1a:	2a0a      	cmp	r2, #10
 801de1c:	d109      	bne.n	801de32 <UART2_RxCpltCallback+0x3a>
    usartprop.usart_buf[usartprop.usart_cnt+1]=0;
 801de1e:	4423      	add	r3, r4
 801de20:	2600      	movs	r6, #0
    string_parse((uint8_t*)usartprop.usart_buf);
 801de22:	4620      	mov	r0, r4
    usartprop.usart_buf[usartprop.usart_cnt+1]=0;
 801de24:	705e      	strb	r6, [r3, #1]
    string_parse((uint8_t*)usartprop.usart_buf);
 801de26:	f7ff ff37 	bl	801dc98 <string_parse>
    usartprop.usart_cnt=0;
 801de2a:	7366      	strb	r6, [r4, #13]
  HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801de2c:	2201      	movs	r2, #1
 801de2e:	4629      	mov	r1, r5
 801de30:	e7eb      	b.n	801de0a <UART2_RxCpltCallback+0x12>
  usartprop.usart_cnt++;
 801de32:	3301      	adds	r3, #1
 801de34:	7363      	strb	r3, [r4, #13]
 801de36:	e7f9      	b.n	801de2c <UART2_RxCpltCallback+0x34>
 801de38:	200959be 	.word	0x200959be
 801de3c:	200905d2 	.word	0x200905d2
 801de40:	20095a54 	.word	0x20095a54

0801de44 <HAL_UART_RxCpltCallback>:
  if(huart==&huart1)
 801de44:	4b02      	ldr	r3, [pc, #8]	; (801de50 <HAL_UART_RxCpltCallback+0xc>)
 801de46:	4283      	cmp	r3, r0
 801de48:	d101      	bne.n	801de4e <HAL_UART_RxCpltCallback+0xa>
    UART2_RxCpltCallback();
 801de4a:	f7ff bfd5 	b.w	801ddf8 <UART2_RxCpltCallback>
 801de4e:	4770      	bx	lr
 801de50:	20095a54 	.word	0x20095a54

0801de54 <auto_exposure>:
{ 
 801de54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de56:	4d45      	ldr	r5, [pc, #276]	; (801df6c <auto_exposure+0x118>)
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801de58:	4c45      	ldr	r4, [pc, #276]	; (801df70 <auto_exposure+0x11c>)
 801de5a:	882b      	ldrh	r3, [r5, #0]
{ 
 801de5c:	2200      	movs	r2, #0
	for (uint16_t i = 5; i<1024; i++){
 801de5e:	f240 71f6 	movw	r1, #2038	; 0x7f6
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801de62:	18a0      	adds	r0, r4, r2
 801de64:	3202      	adds	r2, #2
 801de66:	8940      	ldrh	r0, [r0, #10]
 801de68:	4283      	cmp	r3, r0
 801de6a:	bf38      	it	cc
 801de6c:	4603      	movcc	r3, r0
	for (uint16_t i = 5; i<1024; i++){
 801de6e:	428a      	cmp	r2, r1
 801de70:	d1f7      	bne.n	801de62 <auto_exposure+0xe>
	if(max_el < 20000 && exp_num != 9)
 801de72:	f644 621f 	movw	r2, #19999	; 0x4e1f
 801de76:	4293      	cmp	r3, r2
 801de78:	802b      	strh	r3, [r5, #0]
 801de7a:	4c3e      	ldr	r4, [pc, #248]	; (801df74 <auto_exposure+0x120>)
 801de7c:	d840      	bhi.n	801df00 <auto_exposure+0xac>
 801de7e:	7823      	ldrb	r3, [r4, #0]
 801de80:	2b09      	cmp	r3, #9
 801de82:	d027      	beq.n	801ded4 <auto_exposure+0x80>
		highSignal = 0;
 801de84:	4a3c      	ldr	r2, [pc, #240]	; (801df78 <auto_exposure+0x124>)
		send_usb_block =1;
 801de86:	4f3d      	ldr	r7, [pc, #244]	; (801df7c <auto_exposure+0x128>)
		highSignal = 0;
 801de88:	2300      	movs	r3, #0
 801de8a:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801de8c:	4a3c      	ldr	r2, [pc, #240]	; (801df80 <auto_exposure+0x12c>)
 801de8e:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801de90:	2301      	movs	r3, #1
 801de92:	703b      	strb	r3, [r7, #0]
		exp_num++;
 801de94:	7823      	ldrb	r3, [r4, #0]
 801de96:	3301      	adds	r3, #1
		exp_num--;
 801de98:	b2db      	uxtb	r3, r3
 801de9a:	7023      	strb	r3, [r4, #0]
		htim2.Init.Period = exposure_timer_period[exp_num];
 801de9c:	7822      	ldrb	r2, [r4, #0]
 801de9e:	4b39      	ldr	r3, [pc, #228]	; (801df84 <auto_exposure+0x130>)
 801dea0:	4e39      	ldr	r6, [pc, #228]	; (801df88 <auto_exposure+0x134>)
 801dea2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801dea6:	4b39      	ldr	r3, [pc, #228]	; (801df8c <auto_exposure+0x138>)
 801dea8:	60da      	str	r2, [r3, #12]
		MX_TIM2_Init();
 801deaa:	f7ff f93d 	bl	801d128 <MX_TIM2_Init>
		Calibration_Exposure_Change(exp_num);
 801deae:	7820      	ldrb	r0, [r4, #0]
 801deb0:	f7f1 f9d0 	bl	800f254 <Calibration_Exposure_Change>
		if(Mode_EL == 0){
 801deb4:	4b36      	ldr	r3, [pc, #216]	; (801df90 <auto_exposure+0x13c>)
 801deb6:	781a      	ldrb	r2, [r3, #0]
 801deb8:	4b36      	ldr	r3, [pc, #216]	; (801df94 <auto_exposure+0x140>)
 801deba:	2a00      	cmp	r2, #0
 801debc:	d132      	bne.n	801df24 <auto_exposure+0xd0>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801debe:	4a36      	ldr	r2, [pc, #216]	; (801df98 <auto_exposure+0x144>)
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801dec0:	ed93 0a00 	vldr	s0, [r3]
 801dec4:	edd2 0a00 	vldr	s1, [r2]
 801dec8:	f7fc f8ae 	bl	801a028 <Rabs_calc_Factor2_Settings_change>
		send_usb_block =0;
 801decc:	2300      	movs	r3, #0
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801dece:	ed86 0a00 	vstr	s0, [r6]
		send_usb_block =0;
 801ded2:	703b      	strb	r3, [r7, #0]
	if(old_exp_num!=exp_num ){exp_set = 1; }else{exp_set = 0;}
 801ded4:	4b31      	ldr	r3, [pc, #196]	; (801df9c <auto_exposure+0x148>)
 801ded6:	7822      	ldrb	r2, [r4, #0]
 801ded8:	7819      	ldrb	r1, [r3, #0]
 801deda:	4291      	cmp	r1, r2
 801dedc:	4a30      	ldr	r2, [pc, #192]	; (801dfa0 <auto_exposure+0x14c>)
 801dede:	bf14      	ite	ne
 801dee0:	2101      	movne	r1, #1
 801dee2:	2100      	moveq	r1, #0
 801dee4:	7011      	strb	r1, [r2, #0]
	old_exp_num = exp_num;
 801dee6:	7822      	ldrb	r2, [r4, #0]
 801dee8:	701a      	strb	r2, [r3, #0]
	if(exp_num ==0 && max_el >=50000)
 801deea:	7823      	ldrb	r3, [r4, #0]
 801deec:	b9e3      	cbnz	r3, 801df28 <auto_exposure+0xd4>
 801deee:	882a      	ldrh	r2, [r5, #0]
 801def0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801def4:	429a      	cmp	r2, r3
 801def6:	d917      	bls.n	801df28 <auto_exposure+0xd4>
		highSignal = 1;
 801def8:	2201      	movs	r2, #1
			highSignal = 0;
 801defa:	4b1f      	ldr	r3, [pc, #124]	; (801df78 <auto_exposure+0x124>)
			lowSignal = 0;
 801defc:	701a      	strb	r2, [r3, #0]
 801defe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if(max_el > 45000 && exp_num != 0)
 801df00:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 801df04:	4293      	cmp	r3, r2
 801df06:	d9e5      	bls.n	801ded4 <auto_exposure+0x80>
 801df08:	7823      	ldrb	r3, [r4, #0]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d0e2      	beq.n	801ded4 <auto_exposure+0x80>
		highSignal = 0;
 801df0e:	4a1a      	ldr	r2, [pc, #104]	; (801df78 <auto_exposure+0x124>)
		send_usb_block =1;
 801df10:	4f1a      	ldr	r7, [pc, #104]	; (801df7c <auto_exposure+0x128>)
		highSignal = 0;
 801df12:	2300      	movs	r3, #0
 801df14:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801df16:	4a1a      	ldr	r2, [pc, #104]	; (801df80 <auto_exposure+0x12c>)
 801df18:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801df1a:	2301      	movs	r3, #1
 801df1c:	703b      	strb	r3, [r7, #0]
		exp_num--;
 801df1e:	7823      	ldrb	r3, [r4, #0]
 801df20:	3b01      	subs	r3, #1
 801df22:	e7b9      	b.n	801de98 <auto_exposure+0x44>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801df24:	4a1f      	ldr	r2, [pc, #124]	; (801dfa4 <auto_exposure+0x150>)
 801df26:	e7cb      	b.n	801dec0 <auto_exposure+0x6c>
	} else if((exp_num ==0 && max_el < 50000))
 801df28:	7823      	ldrb	r3, [r4, #0]
 801df2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801df2e:	b923      	cbnz	r3, 801df3a <auto_exposure+0xe6>
 801df30:	8829      	ldrh	r1, [r5, #0]
 801df32:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801df36:	4299      	cmp	r1, r3
 801df38:	d9df      	bls.n	801defa <auto_exposure+0xa6>
	} else if((exp_num ==9 && max_el < DarkSignal+2000)) //20000
 801df3a:	7823      	ldrb	r3, [r4, #0]
 801df3c:	2b09      	cmp	r3, #9
 801df3e:	d109      	bne.n	801df54 <auto_exposure+0x100>
 801df40:	4b19      	ldr	r3, [pc, #100]	; (801dfa8 <auto_exposure+0x154>)
 801df42:	882a      	ldrh	r2, [r5, #0]
 801df44:	881b      	ldrh	r3, [r3, #0]
 801df46:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 801df4a:	4293      	cmp	r3, r2
 801df4c:	db02      	blt.n	801df54 <auto_exposure+0x100>
			lowSignal = 1;
 801df4e:	2201      	movs	r2, #1
			lowSignal = 0;
 801df50:	4b0b      	ldr	r3, [pc, #44]	; (801df80 <auto_exposure+0x12c>)
 801df52:	e7d3      	b.n	801defc <auto_exposure+0xa8>
	}else if((exp_num ==9 && max_el > DarkSignal+2000))
 801df54:	7823      	ldrb	r3, [r4, #0]
 801df56:	2b09      	cmp	r3, #9
 801df58:	d1d1      	bne.n	801defe <auto_exposure+0xaa>
 801df5a:	4b13      	ldr	r3, [pc, #76]	; (801dfa8 <auto_exposure+0x154>)
 801df5c:	882a      	ldrh	r2, [r5, #0]
 801df5e:	881b      	ldrh	r3, [r3, #0]
 801df60:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801df64:	429a      	cmp	r2, r3
 801df66:	ddca      	ble.n	801defe <auto_exposure+0xaa>
			lowSignal = 0;
 801df68:	2200      	movs	r2, #0
 801df6a:	e7f1      	b.n	801df50 <auto_exposure+0xfc>
 801df6c:	200905c4 	.word	0x200905c4
 801df70:	2000e53c 	.word	0x2000e53c
 801df74:	200905b6 	.word	0x200905b6
 801df78:	200905bf 	.word	0x200905bf
 801df7c:	200905d1 	.word	0x200905d1
 801df80:	200905c2 	.word	0x200905c2
 801df84:	08032150 	.word	0x08032150
 801df88:	20009d34 	.word	0x20009d34
 801df8c:	20095c58 	.word	0x20095c58
 801df90:	20000ebc 	.word	0x20000ebc
 801df94:	20009d2c 	.word	0x20009d2c
 801df98:	20009d28 	.word	0x20009d28
 801df9c:	200905c6 	.word	0x200905c6
 801dfa0:	20000ec0 	.word	0x20000ec0
 801dfa4:	20009d24 	.word	0x20009d24
 801dfa8:	20009d22 	.word	0x20009d22

0801dfac <TIM2_IRQHandler>:
{
 801dfac:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 801dfae:	4d0d      	ldr	r5, [pc, #52]	; (801dfe4 <TIM2_IRQHandler+0x38>)
 801dfb0:	2200      	movs	r2, #0
 801dfb2:	2110      	movs	r1, #16
 801dfb4:	4628      	mov	r0, r5
 801dfb6:	f7e4 fb15 	bl	80025e4 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 801dfba:	200a      	movs	r0, #10
 801dfbc:	f7ff f8fc 	bl	801d1b8 <DWT_Delay>
	i = 0;
 801dfc0:	4b09      	ldr	r3, [pc, #36]	; (801dfe8 <TIM2_IRQHandler+0x3c>)
 801dfc2:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801dfc4:	4628      	mov	r0, r5
 801dfc6:	2201      	movs	r2, #1
 801dfc8:	2110      	movs	r1, #16
	i = 0;
 801dfca:	801c      	strh	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801dfcc:	f7e4 fb0a 	bl	80025e4 <HAL_GPIO_WritePin>
  cnt_delay_bar = 0;
 801dfd0:	4b06      	ldr	r3, [pc, #24]	; (801dfec <TIM2_IRQHandler+0x40>)
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801dfd2:	201c      	movs	r0, #28
  cnt_delay_bar = 0;
 801dfd4:	801c      	strh	r4, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801dfd6:	f7e3 fd47 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim2);
 801dfda:	4805      	ldr	r0, [pc, #20]	; (801dff0 <TIM2_IRQHandler+0x44>)
}																					//	7.812ms	15.625ms	31.25ms	62.5ms	125ms	250ms	500ms	1s			2s			4s
 801dfdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IRQHandler(&htim2);
 801dfe0:	f7e7 be4d 	b.w	8005c7e <HAL_TIM_IRQHandler>
 801dfe4:	48000800 	.word	0x48000800
 801dfe8:	200905c0 	.word	0x200905c0
 801dfec:	2008f514 	.word	0x2008f514
 801dff0:	20095c58 	.word	0x20095c58

0801dff4 <TIM6_DAC_IRQHandler>:
{
 801dff4:	b508      	push	{r3, lr}
	pause_button = 0;
 801dff6:	4b06      	ldr	r3, [pc, #24]	; (801e010 <TIM6_DAC_IRQHandler+0x1c>)
 801dff8:	2200      	movs	r2, #0
 801dffa:	701a      	strb	r2, [r3, #0]
	Get_Battery_Level();
 801dffc:	f7ff fa26 	bl	801d44c <Get_Battery_Level>
	HAL_NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 801e000:	2036      	movs	r0, #54	; 0x36
 801e002:	f7e3 fd31 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_TIM_IRQHandler(&htim6);
 801e006:	4803      	ldr	r0, [pc, #12]	; (801e014 <TIM6_DAC_IRQHandler+0x20>)
}
 801e008:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 801e00c:	f7e7 be37 	b.w	8005c7e <HAL_TIM_IRQHandler>
 801e010:	200905c7 	.word	0x200905c7
 801e014:	20095ae4 	.word	0x20095ae4

0801e018 <TIM7_IRQHandler>:
{
 801e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801e01a:	4b48      	ldr	r3, [pc, #288]	; (801e13c <TIM7_IRQHandler+0x124>)
 801e01c:	781b      	ldrb	r3, [r3, #0]
	if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen||
 801e01e:	3b01      	subs	r3, #1
 801e020:	2b04      	cmp	r3, #4
 801e022:	d81e      	bhi.n	801e062 <TIM7_IRQHandler+0x4a>
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801e024:	4b46      	ldr	r3, [pc, #280]	; (801e140 <TIM7_IRQHandler+0x128>)
 801e026:	781b      	ldrb	r3, [r3, #0]
 801e028:	b9db      	cbnz	r3, 801e062 <TIM7_IRQHandler+0x4a>
 801e02a:	4b46      	ldr	r3, [pc, #280]	; (801e144 <TIM7_IRQHandler+0x12c>)
 801e02c:	781b      	ldrb	r3, [r3, #0]
 801e02e:	b9c3      	cbnz	r3, 801e062 <TIM7_IRQHandler+0x4a>
			cnt_delay_bar++;
 801e030:	4a45      	ldr	r2, [pc, #276]	; (801e148 <TIM7_IRQHandler+0x130>)
			if(exp_num > 4){
 801e032:	4946      	ldr	r1, [pc, #280]	; (801e14c <TIM7_IRQHandler+0x134>)
			cnt_delay_bar++;
 801e034:	8813      	ldrh	r3, [r2, #0]
 801e036:	3301      	adds	r3, #1
 801e038:	b29b      	uxth	r3, r3
 801e03a:	8013      	strh	r3, [r2, #0]
			if(exp_num > 4){
 801e03c:	780a      	ldrb	r2, [r1, #0]
 801e03e:	2a04      	cmp	r2, #4
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801e040:	780a      	ldrb	r2, [r1, #0]
			if(exp_num > 4){
 801e042:	d96b      	bls.n	801e11c <TIM7_IRQHandler+0x104>
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801e044:	4842      	ldr	r0, [pc, #264]	; (801e150 <TIM7_IRQHandler+0x138>)
 801e046:	f241 7670 	movw	r6, #6000	; 0x1770
 801e04a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801e04e:	fbb2 f2f6 	udiv	r2, r2, r6
 801e052:	4293      	cmp	r3, r2
 801e054:	d12b      	bne.n	801e0ae <TIM7_IRQHandler+0x96>
						GUI_Bar_Measure(85, 13, 0.2);
 801e056:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801e154 <TIM7_IRQHandler+0x13c>
						GUI_Bar_Measure(85, 13, 0.6);
 801e05a:	210d      	movs	r1, #13
 801e05c:	2055      	movs	r0, #85	; 0x55
 801e05e:	f7f5 fad9 	bl	8013614 <GUI_Bar_Measure>
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801e062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801e066:	483c      	ldr	r0, [pc, #240]	; (801e158 <TIM7_IRQHandler+0x140>)
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801e068:	4c3c      	ldr	r4, [pc, #240]	; (801e15c <TIM7_IRQHandler+0x144>)
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801e06a:	4d3d      	ldr	r5, [pc, #244]	; (801e160 <TIM7_IRQHandler+0x148>)
 801e06c:	f7e4 fab4 	bl	80025d8 <HAL_GPIO_ReadPin>
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801e070:	7823      	ldrb	r3, [r4, #0]
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801e072:	7028      	strb	r0, [r5, #0]
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801e074:	4283      	cmp	r3, r0
 801e076:	d012      	beq.n	801e09e <TIM7_IRQHandler+0x86>
 801e078:	4b3a      	ldr	r3, [pc, #232]	; (801e164 <TIM7_IRQHandler+0x14c>)
 801e07a:	781b      	ldrb	r3, [r3, #0]
 801e07c:	b97b      	cbnz	r3, 801e09e <TIM7_IRQHandler+0x86>
		GUI_Button_SD_Card(55, 426, !SD_Detect);
 801e07e:	fab0 f280 	clz	r2, r0
 801e082:	0952      	lsrs	r2, r2, #5
 801e084:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e088:	2037      	movs	r0, #55	; 0x37
 801e08a:	f7f4 fd3b 	bl	8012b04 <GUI_Button_SD_Card>
		old_sd_detect = SD_Detect;
 801e08e:	782b      	ldrb	r3, [r5, #0]
 801e090:	7023      	strb	r3, [r4, #0]
		if(SD_Detect == 0){
 801e092:	2b00      	cmp	r3, #0
 801e094:	d14b      	bne.n	801e12e <TIM7_IRQHandler+0x116>
				MX_SDMMC1_SD_Init();
 801e096:	f7ff f835 	bl	801d104 <MX_SDMMC1_SD_Init>
				MX_FATFS_Init();
 801e09a:	f7fe fa01 	bl	801c4a0 <MX_FATFS_Init>
	HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
 801e09e:	2037      	movs	r0, #55	; 0x37
 801e0a0:	f7e3 fce2 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim7);
 801e0a4:	4830      	ldr	r0, [pc, #192]	; (801e168 <TIM7_IRQHandler+0x150>)
}
 801e0a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_IRQHandler(&htim7);
 801e0aa:	f7e7 bde8 	b.w	8005c7e <HAL_TIM_IRQHandler>
				else if (cnt_delay_bar == 2*(exposure_timer_period[exp_num]/12)/500)
 801e0ae:	780a      	ldrb	r2, [r1, #0]
 801e0b0:	270c      	movs	r7, #12
 801e0b2:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 801e0b6:	fbb5 f5f7 	udiv	r5, r5, r7
 801e0ba:	22fa      	movs	r2, #250	; 0xfa
 801e0bc:	fb95 f5f2 	sdiv	r5, r5, r2
 801e0c0:	42ab      	cmp	r3, r5
 801e0c2:	d102      	bne.n	801e0ca <TIM7_IRQHandler+0xb2>
						GUI_Bar_Measure(85, 13, 0.4);
 801e0c4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801e16c <TIM7_IRQHandler+0x154>
 801e0c8:	e7c7      	b.n	801e05a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 3*(exposure_timer_period[exp_num]/12)/500)
 801e0ca:	780a      	ldrb	r2, [r1, #0]
 801e0cc:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 801e0d0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801e0d4:	fbb2 f2f7 	udiv	r2, r2, r7
 801e0d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e0dc:	fb92 f2f4 	sdiv	r2, r2, r4
 801e0e0:	4293      	cmp	r3, r2
 801e0e2:	d102      	bne.n	801e0ea <TIM7_IRQHandler+0xd2>
						GUI_Bar_Measure(85, 13, 0.6);
 801e0e4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801e170 <TIM7_IRQHandler+0x158>
 801e0e8:	e7b7      	b.n	801e05a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 4*(exposure_timer_period[exp_num]/12)/500)
 801e0ea:	780a      	ldrb	r2, [r1, #0]
 801e0ec:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 801e0f0:	fbb4 f4f7 	udiv	r4, r4, r7
 801e0f4:	227d      	movs	r2, #125	; 0x7d
 801e0f6:	fb94 f4f2 	sdiv	r4, r4, r2
 801e0fa:	42a3      	cmp	r3, r4
 801e0fc:	d102      	bne.n	801e104 <TIM7_IRQHandler+0xec>
						GUI_Bar_Measure(85, 13, 0.8);
 801e0fe:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801e174 <TIM7_IRQHandler+0x15c>
 801e102:	e7aa      	b.n	801e05a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 5*((exposure_timer_period[exp_num]/12)/500))
 801e104:	780a      	ldrb	r2, [r1, #0]
 801e106:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801e10a:	fbb2 f2f6 	udiv	r2, r2, r6
 801e10e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e112:	4293      	cmp	r3, r2
 801e114:	d1a5      	bne.n	801e062 <TIM7_IRQHandler+0x4a>
						GUI_Bar_Measure(85, 13, 1);
 801e116:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e11a:	e79e      	b.n	801e05a <TIM7_IRQHandler+0x42>
				} else if(exp_num > 2)
 801e11c:	2a02      	cmp	r2, #2
 801e11e:	d9fa      	bls.n	801e116 <TIM7_IRQHandler+0xfe>
							if(cnt_delay_bar == 1){
 801e120:	2b01      	cmp	r3, #1
 801e122:	d102      	bne.n	801e12a <TIM7_IRQHandler+0x112>
								GUI_Bar_Measure(85, 13, 0.5);
 801e124:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801e128:	e797      	b.n	801e05a <TIM7_IRQHandler+0x42>
							} else if(cnt_delay_bar == 2){
 801e12a:	2b02      	cmp	r3, #2
 801e12c:	e7f2      	b.n	801e114 <TIM7_IRQHandler+0xfc>
			FATFS_UnLinkDriver(SDPath);
 801e12e:	4812      	ldr	r0, [pc, #72]	; (801e178 <TIM7_IRQHandler+0x160>)
 801e130:	f7eb fe2c 	bl	8009d8c <FATFS_UnLinkDriver>
				HAL_SD_DeInit(&hsd1);
 801e134:	4811      	ldr	r0, [pc, #68]	; (801e17c <TIM7_IRQHandler+0x164>)
 801e136:	f7e6 fda3 	bl	8004c80 <HAL_SD_DeInit>
 801e13a:	e7b0      	b.n	801e09e <TIM7_IRQHandler+0x86>
 801e13c:	20005701 	.word	0x20005701
 801e140:	20005728 	.word	0x20005728
 801e144:	20009cf5 	.word	0x20009cf5
 801e148:	2008f514 	.word	0x2008f514
 801e14c:	200905b6 	.word	0x200905b6
 801e150:	08032150 	.word	0x08032150
 801e154:	3e4ccccd 	.word	0x3e4ccccd
 801e158:	48000800 	.word	0x48000800
 801e15c:	20000ec2 	.word	0x20000ec2
 801e160:	20095c54 	.word	0x20095c54
 801e164:	20095712 	.word	0x20095712
 801e168:	20095ca4 	.word	0x20095ca4
 801e16c:	3ecccccd 	.word	0x3ecccccd
 801e170:	3f19999a 	.word	0x3f19999a
 801e174:	3f4ccccd 	.word	0x3f4ccccd
 801e178:	20093685 	.word	0x20093685
 801e17c:	20095808 	.word	0x20095808

0801e180 <EXTI9_5_IRQHandler>:
{
 801e180:	b513      	push	{r0, r1, r4, lr}
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801e182:	4c22      	ldr	r4, [pc, #136]	; (801e20c <EXTI9_5_IRQHandler+0x8c>)
	DWT_Delay(1);
 801e184:	2001      	movs	r0, #1
 801e186:	f7ff f817 	bl	801d1b8 <DWT_Delay>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801e18a:	2300      	movs	r3, #0
 801e18c:	4622      	mov	r2, r4
 801e18e:	4621      	mov	r1, r4
 801e190:	9300      	str	r3, [sp, #0]
 801e192:	481f      	ldr	r0, [pc, #124]	; (801e210 <EXTI9_5_IRQHandler+0x90>)
 801e194:	2302      	movs	r3, #2
 801e196:	f7e7 fb02 	bl	800579e <HAL_SPI_TransmitReceive>
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801e19a:	7823      	ldrb	r3, [r4, #0]
 801e19c:	7862      	ldrb	r2, [r4, #1]
 801e19e:	4c1d      	ldr	r4, [pc, #116]	; (801e214 <EXTI9_5_IRQHandler+0x94>)
 801e1a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Line[i] = Line[i-1]; 
 801e1a4:	8821      	ldrh	r1, [r4, #0]
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801e1a6:	f64c 73fe 	movw	r3, #53246	; 0xcffe
 801e1aa:	429a      	cmp	r2, r3
		Line[i] = Line[i-1]; 
 801e1ac:	b289      	uxth	r1, r1
 801e1ae:	4b1a      	ldr	r3, [pc, #104]	; (801e218 <EXTI9_5_IRQHandler+0x98>)
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801e1b0:	dd05      	ble.n	801e1be <EXTI9_5_IRQHandler+0x3e>
		Line[i] = Line[i-1]; 
 801e1b2:	8822      	ldrh	r2, [r4, #0]
 801e1b4:	b292      	uxth	r2, r2
 801e1b6:	3a01      	subs	r2, #1
 801e1b8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801e1bc:	e002      	b.n	801e1c4 <EXTI9_5_IRQHandler+0x44>
	} else if((RxBuf[0] << 8 | RxBuf[1])<=0x0EFF)
 801e1be:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 801e1c2:	dbf6      	blt.n	801e1b2 <EXTI9_5_IRQHandler+0x32>
		Line[i] = RxBuf[0] << 8 | RxBuf[1];
 801e1c4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(i >= 1023)
 801e1c8:	8823      	ldrh	r3, [r4, #0]
 801e1ca:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801e1ce:	b29b      	uxth	r3, r3
 801e1d0:	4293      	cmp	r3, r2
 801e1d2:	d916      	bls.n	801e202 <EXTI9_5_IRQHandler+0x82>
		if(send_usb_block == 0 && (!pause))
 801e1d4:	4b11      	ldr	r3, [pc, #68]	; (801e21c <EXTI9_5_IRQHandler+0x9c>)
 801e1d6:	781b      	ldrb	r3, [r3, #0]
 801e1d8:	b943      	cbnz	r3, 801e1ec <EXTI9_5_IRQHandler+0x6c>
 801e1da:	4b11      	ldr	r3, [pc, #68]	; (801e220 <EXTI9_5_IRQHandler+0xa0>)
 801e1dc:	781b      	ldrb	r3, [r3, #0]
 801e1de:	b92b      	cbnz	r3, 801e1ec <EXTI9_5_IRQHandler+0x6c>
				memcpy(Line_buff, Line, sizeof(Line));
 801e1e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e1e4:	490c      	ldr	r1, [pc, #48]	; (801e218 <EXTI9_5_IRQHandler+0x98>)
 801e1e6:	480f      	ldr	r0, [pc, #60]	; (801e224 <EXTI9_5_IRQHandler+0xa4>)
 801e1e8:	f002 f9fe 	bl	80205e8 <memcpy>
			i = 0;
 801e1ec:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801e1ee:	2017      	movs	r0, #23
			i++;
 801e1f0:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801e1f2:	f7e3 fc39 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801e1f6:	2080      	movs	r0, #128	; 0x80
}
 801e1f8:	b002      	add	sp, #8
 801e1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801e1fe:	f7e4 b9fb 	b.w	80025f8 <HAL_GPIO_EXTI_IRQHandler>
			i++;
 801e202:	8823      	ldrh	r3, [r4, #0]
 801e204:	3301      	adds	r3, #1
 801e206:	b29b      	uxth	r3, r3
 801e208:	e7f1      	b.n	801e1ee <EXTI9_5_IRQHandler+0x6e>
 801e20a:	bf00      	nop
 801e20c:	20095b8e 	.word	0x20095b8e
 801e210:	20095bf0 	.word	0x20095bf0
 801e214:	200905c0 	.word	0x200905c0
 801e218:	2000bd3a 	.word	0x2000bd3a
 801e21c:	200905d1 	.word	0x200905d1
 801e220:	20005728 	.word	0x20005728
 801e224:	2000e53c 	.word	0x2000e53c

0801e228 <EXTI3_IRQHandler>:
{	
 801e228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cnt_touch_delay = cnt_touch_delay + 1;
 801e22a:	4b29      	ldr	r3, [pc, #164]	; (801e2d0 <EXTI3_IRQHandler+0xa8>)
	Touch_x = 0, Touch_y = 0;
 801e22c:	4e29      	ldr	r6, [pc, #164]	; (801e2d4 <EXTI3_IRQHandler+0xac>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801e22e:	681a      	ldr	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801e230:	4c29      	ldr	r4, [pc, #164]	; (801e2d8 <EXTI3_IRQHandler+0xb0>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801e232:	3201      	adds	r2, #1
 801e234:	601a      	str	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801e236:	2200      	movs	r2, #0
 801e238:	8032      	strh	r2, [r6, #0]
 801e23a:	8022      	strh	r2, [r4, #0]
	if((!TFT_ON_OFF) && (cnt_touch_delay >= 50))
 801e23c:	4a27      	ldr	r2, [pc, #156]	; (801e2dc <EXTI3_IRQHandler+0xb4>)
 801e23e:	7817      	ldrb	r7, [r2, #0]
 801e240:	461d      	mov	r5, r3
 801e242:	4611      	mov	r1, r2
 801e244:	b957      	cbnz	r7, 801e25c <EXTI3_IRQHandler+0x34>
 801e246:	681b      	ldr	r3, [r3, #0]
 801e248:	2b31      	cmp	r3, #49	; 0x31
 801e24a:	d907      	bls.n	801e25c <EXTI3_IRQHandler+0x34>
			TFT_ON_OFF = 0x01;
 801e24c:	2301      	movs	r3, #1
 801e24e:	7013      	strb	r3, [r2, #0]
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801e250:	2104      	movs	r1, #4
 801e252:	4823      	ldr	r0, [pc, #140]	; (801e2e0 <EXTI3_IRQHandler+0xb8>)
}
 801e254:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801e258:	f7e8 b834 	b.w	80062c4 <HAL_TIM_PWM_Start>
		if(TFT_ON_OFF){
 801e25c:	780b      	ldrb	r3, [r1, #0]
 801e25e:	b36b      	cbz	r3, 801e2bc <EXTI3_IRQHandler+0x94>
			TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801e260:	4a1d      	ldr	r2, [pc, #116]	; (801e2d8 <EXTI3_IRQHandler+0xb0>)
 801e262:	491c      	ldr	r1, [pc, #112]	; (801e2d4 <EXTI3_IRQHandler+0xac>)
 801e264:	2070      	movs	r0, #112	; 0x70
 801e266:	f7fe f899 	bl	801c39c <TS_Get_XY1>
			if((Mode_EL == 0x00) && ((Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) )))
 801e26a:	4b1e      	ldr	r3, [pc, #120]	; (801e2e4 <EXTI3_IRQHandler+0xbc>)
 801e26c:	781a      	ldrb	r2, [r3, #0]
 801e26e:	bb0a      	cbnz	r2, 801e2b4 <EXTI3_IRQHandler+0x8c>
 801e270:	8833      	ldrh	r3, [r6, #0]
 801e272:	3b6d      	subs	r3, #109	; 0x6d
 801e274:	b29b      	uxth	r3, r3
 801e276:	2b36      	cmp	r3, #54	; 0x36
 801e278:	d81c      	bhi.n	801e2b4 <EXTI3_IRQHandler+0x8c>
 801e27a:	8823      	ldrh	r3, [r4, #0]
 801e27c:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801e280:	b29b      	uxth	r3, r3
 801e282:	2b36      	cmp	r3, #54	; 0x36
 801e284:	d816      	bhi.n	801e2b4 <EXTI3_IRQHandler+0x8c>
				pause_button++;
 801e286:	4c18      	ldr	r4, [pc, #96]	; (801e2e8 <EXTI3_IRQHandler+0xc0>)
 801e288:	7823      	ldrb	r3, [r4, #0]
 801e28a:	3301      	adds	r3, #1
 801e28c:	b2db      	uxtb	r3, r3
				if(pause_button > 3)
 801e28e:	2b03      	cmp	r3, #3
				pause_button++;
 801e290:	7023      	strb	r3, [r4, #0]
				if(pause_button > 3)
 801e292:	d90f      	bls.n	801e2b4 <EXTI3_IRQHandler+0x8c>
					LaserOnOff = !LaserOnOff;
 801e294:	4915      	ldr	r1, [pc, #84]	; (801e2ec <EXTI3_IRQHandler+0xc4>)
 801e296:	780b      	ldrb	r3, [r1, #0]
 801e298:	fab3 f383 	clz	r3, r3
 801e29c:	095b      	lsrs	r3, r3, #5
 801e29e:	700b      	strb	r3, [r1, #0]
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801e2a0:	780b      	ldrb	r3, [r1, #0]
 801e2a2:	b19b      	cbz	r3, 801e2cc <EXTI3_IRQHandler+0xa4>
 801e2a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e2a8:	4811      	ldr	r0, [pc, #68]	; (801e2f0 <EXTI3_IRQHandler+0xc8>)
 801e2aa:	f7e4 f99b 	bl	80025e4 <HAL_GPIO_WritePin>
					cnt_touch_delay = 0;
 801e2ae:	2300      	movs	r3, #0
 801e2b0:	602b      	str	r3, [r5, #0]
					pause_button = 0;
 801e2b2:	7023      	strb	r3, [r4, #0]
				GUI_Touch_Processing();
 801e2b4:	f7f2 ff3c 	bl	8011130 <GUI_Touch_Processing>
				cnt_touch_delay = 0;
 801e2b8:	2300      	movs	r3, #0
 801e2ba:	602b      	str	r3, [r5, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 801e2bc:	2009      	movs	r0, #9
 801e2be:	f7e3 fbd3 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801e2c2:	2008      	movs	r0, #8
}
 801e2c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801e2c8:	f7e4 b996 	b.w	80025f8 <HAL_GPIO_EXTI_IRQHandler>
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801e2cc:	2201      	movs	r2, #1
 801e2ce:	e7e9      	b.n	801e2a4 <EXTI3_IRQHandler+0x7c>
 801e2d0:	2008f518 	.word	0x2008f518
 801e2d4:	20054942 	.word	0x20054942
 801e2d8:	20054944 	.word	0x20054944
 801e2dc:	20000ebe 	.word	0x20000ebe
 801e2e0:	200957b4 	.word	0x200957b4
 801e2e4:	20000ebc 	.word	0x20000ebc
 801e2e8:	200905c7 	.word	0x200905c7
 801e2ec:	2000bd38 	.word	0x2000bd38
 801e2f0:	48000800 	.word	0x48000800

0801e2f4 <SystemClock_Config>:
{
 801e2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801e2f6:	2000      	movs	r0, #0
{
 801e2f8:	b0bf      	sub	sp, #252	; 0xfc
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801e2fa:	f7e5 fc79 	bl	8003bf0 <HAL_PWREx_ControlVoltageScaling>
 801e2fe:	b100      	cbz	r0, 801e302 <SystemClock_Config+0xe>
 801e300:	e7fe      	b.n	801e300 <SystemClock_Config+0xc>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801e302:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e306:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801e308:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801e30a:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801e30c:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801e30e:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801e312:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801e314:	2705      	movs	r7, #5
  RCC_OscInitStruct.PLL.PLLN = 30;
 801e316:	231e      	movs	r3, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801e318:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801e31a:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801e31c:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801e31e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801e320:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 801e322:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 30;
 801e324:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801e326:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801e328:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801e32a:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801e32c:	f7e5 fd56 	bl	8003ddc <HAL_RCC_OscConfig>
 801e330:	b100      	cbz	r0, 801e334 <SystemClock_Config+0x40>
 801e332:	e7fe      	b.n	801e332 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801e334:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801e336:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801e338:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801e33a:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801e33c:	4639      	mov	r1, r7
 801e33e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801e340:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801e342:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801e344:	f7e5 ff9c 	bl	8004280 <HAL_RCC_ClockConfig>
 801e348:	b100      	cbz	r0, 801e34c <SystemClock_Config+0x58>
 801e34a:	e7fe      	b.n	801e34a <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
 801e34c:	4b1e      	ldr	r3, [pc, #120]	; (801e3c8 <SystemClock_Config+0xd4>)
 801e34e:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 801e350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e354:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801e356:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801e35a:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 801e35c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 801e360:	9337      	str	r3, [sp, #220]	; 0xdc
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 801e362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801e366:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PLLSAI2.PLLSAI2N = 9;
 801e368:	2309      	movs	r3, #9
 801e36a:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 801e36c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801e370:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801e372:	230c      	movs	r3, #12
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801e374:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801e376:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801e378:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801e37a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 801e37e:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 801e380:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 801e382:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 801e384:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 801e386:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 801e388:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801e38a:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801e38c:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 801e38e:	963a      	str	r6, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 801e390:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 801e392:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801e394:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801e396:	f7e6 f9a7 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 801e39a:	4604      	mov	r4, r0
 801e39c:	b100      	cbz	r0, 801e3a0 <SystemClock_Config+0xac>
 801e39e:	e7fe      	b.n	801e39e <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 801e3a0:	f7e6 f868 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 801e3a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e3a8:	fbb0 f0f3 	udiv	r0, r0, r3
 801e3ac:	f7e3 fb46 	bl	8001a3c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 801e3b0:	2004      	movs	r0, #4
 801e3b2:	f7e3 fb67 	bl	8001a84 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801e3b6:	4622      	mov	r2, r4
 801e3b8:	4621      	mov	r1, r4
 801e3ba:	f04f 30ff 	mov.w	r0, #4294967295
 801e3be:	f7e3 faef 	bl	80019a0 <HAL_NVIC_SetPriority>
}
 801e3c2:	b03f      	add	sp, #252	; 0xfc
 801e3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3c6:	bf00      	nop
 801e3c8:	00486060 	.word	0x00486060
 801e3cc:	00000000 	.word	0x00000000

0801e3d0 <main>:
{
 801e3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3d4:	ed2d 8b02 	vpush	{d8}
 801e3d8:	b0a7      	sub	sp, #156	; 0x9c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801e3da:	4db2      	ldr	r5, [pc, #712]	; (801e6a4 <main+0x2d4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801e3dc:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 801e6c0 <main+0x2f0>
  HAL_Init();
 801e3e0:	f7e2 fe06 	bl	8000ff0 <HAL_Init>
	HAL_Delay(1);
 801e3e4:	2001      	movs	r0, #1
 801e3e6:	f7e2 fe21 	bl	800102c <HAL_Delay>
  SystemClock_Config();
 801e3ea:	f7ff ff83 	bl	801e2f4 <SystemClock_Config>
	HAL_Delay(1);
 801e3ee:	2001      	movs	r0, #1
 801e3f0:	f7e2 fe1c 	bl	800102c <HAL_Delay>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801e3f4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e3f6:	f043 0310 	orr.w	r3, r3, #16
 801e3fa:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e3fc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e3fe:	f003 0310 	and.w	r3, r3, #16
 801e402:	9307      	str	r3, [sp, #28]
 801e404:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801e406:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e408:	f043 0320 	orr.w	r3, r3, #32
 801e40c:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e40e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e410:	f003 0320 	and.w	r3, r3, #32
 801e414:	9308      	str	r3, [sp, #32]
 801e416:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801e418:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e41a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e41e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e420:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e426:	9309      	str	r3, [sp, #36]	; 0x24
 801e428:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801e42a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e42c:	f043 0301 	orr.w	r3, r3, #1
 801e430:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e432:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e434:	f003 0301 	and.w	r3, r3, #1
 801e438:	930a      	str	r3, [sp, #40]	; 0x28
 801e43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801e43c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e43e:	f043 0304 	orr.w	r3, r3, #4
 801e442:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e444:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e446:	f003 0304 	and.w	r3, r3, #4
 801e44a:	930b      	str	r3, [sp, #44]	; 0x2c
 801e44c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801e44e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e450:	f043 0302 	orr.w	r3, r3, #2
 801e454:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e456:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e458:	f003 0302 	and.w	r3, r3, #2
 801e45c:	930c      	str	r3, [sp, #48]	; 0x30
 801e45e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801e460:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e462:	f043 0308 	orr.w	r3, r3, #8
 801e466:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e468:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e46a:	f003 0308 	and.w	r3, r3, #8
 801e46e:	930d      	str	r3, [sp, #52]	; 0x34
 801e470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801e472:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e478:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e47a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e480:	930e      	str	r3, [sp, #56]	; 0x38
 801e482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	  HAL_PWREx_EnableVddIO2();
 801e484:	f7e5 fc16 	bl	8003cb4 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 801e488:	2200      	movs	r2, #0
 801e48a:	f242 0110 	movw	r1, #8208	; 0x2010
 801e48e:	4886      	ldr	r0, [pc, #536]	; (801e6a8 <main+0x2d8>)
 801e490:	f7e4 f8a8 	bl	80025e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801e494:	2200      	movs	r2, #0
 801e496:	2120      	movs	r1, #32
 801e498:	4884      	ldr	r0, [pc, #528]	; (801e6ac <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e49a:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e49c:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801e49e:	f7e4 f8a1 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801e4a2:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e4a4:	a919      	add	r1, sp, #100	; 0x64
 801e4a6:	4881      	ldr	r0, [pc, #516]	; (801e6ac <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801e4a8:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e4aa:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e4ac:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e4ae:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e4b0:	f7e3 ff22 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); //VIDEO_GAIN ON
 801e4b4:	4622      	mov	r2, r4
 801e4b6:	4639      	mov	r1, r7
 801e4b8:	487c      	ldr	r0, [pc, #496]	; (801e6ac <main+0x2dc>)
 801e4ba:	f7e4 f893 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801e4be:	f242 0310 	movw	r3, #8208	; 0x2010
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e4c2:	a919      	add	r1, sp, #100	; 0x64
 801e4c4:	4878      	ldr	r0, [pc, #480]	; (801e6a8 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801e4c6:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e4c8:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e4ca:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e4cc:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e4ce:	f7e3 ff13 	bl	80022f8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//ST init HIGH
 801e4d2:	4632      	mov	r2, r6
 801e4d4:	2110      	movs	r1, #16
 801e4d6:	4874      	ldr	r0, [pc, #464]	; (801e6a8 <main+0x2d8>)
 801e4d8:	f7e4 f884 	bl	80025e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Laser init OFF
 801e4dc:	4622      	mov	r2, r4
 801e4de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e4e2:	4871      	ldr	r0, [pc, #452]	; (801e6a8 <main+0x2d8>)
 801e4e4:	f7e4 f87e 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801e4e8:	2380      	movs	r3, #128	; 0x80
 801e4ea:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e4ec:	a919      	add	r1, sp, #100	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801e4ee:	4b70      	ldr	r3, [pc, #448]	; (801e6b0 <main+0x2e0>)
 801e4f0:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e4f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e4f6:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e4f8:	f7e3 fefe 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 801e4fc:	4622      	mov	r2, r4
 801e4fe:	2104      	movs	r1, #4
 801e500:	486a      	ldr	r0, [pc, #424]	; (801e6ac <main+0x2dc>)
 801e502:	f7e4 f86f 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e506:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e50a:	a919      	add	r1, sp, #100	; 0x64
 801e50c:	4867      	ldr	r0, [pc, #412]	; (801e6ac <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e50e:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e512:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e514:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e516:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e518:	f7e3 feee 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801e51c:	4632      	mov	r2, r6
 801e51e:	4651      	mov	r1, sl
 801e520:	4862      	ldr	r0, [pc, #392]	; (801e6ac <main+0x2dc>)
 801e522:	f7e4 f85f 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 801e526:	4622      	mov	r2, r4
 801e528:	2102      	movs	r1, #2
 801e52a:	4860      	ldr	r0, [pc, #384]	; (801e6ac <main+0x2dc>)
 801e52c:	f7e4 f85a 	bl	80025e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801e530:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e532:	a919      	add	r1, sp, #100	; 0x64
 801e534:	485d      	ldr	r0, [pc, #372]	; (801e6ac <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801e536:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e538:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e53a:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e53c:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e53e:	f7e3 fedb 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 801e542:	4632      	mov	r2, r6
 801e544:	4639      	mov	r1, r7
 801e546:	4859      	ldr	r0, [pc, #356]	; (801e6ac <main+0x2dc>)
 801e548:	f7e4 f84c 	bl	80025e4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801e54c:	f44f 6800 	mov.w	r8, #2048	; 0x800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e550:	a919      	add	r1, sp, #100	; 0x64
 801e552:	4856      	ldr	r0, [pc, #344]	; (801e6ac <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801e554:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e558:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e55a:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e55c:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e55e:	f7e3 fecb 	bl	80022f8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 801e562:	4632      	mov	r2, r6
 801e564:	4641      	mov	r1, r8
 801e566:	4851      	ldr	r0, [pc, #324]	; (801e6ac <main+0x2dc>)
 801e568:	f7e4 f83c 	bl	80025e4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801e56c:	f04f 0808 	mov.w	r8, #8
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e570:	a919      	add	r1, sp, #100	; 0x64
 801e572:	484e      	ldr	r0, [pc, #312]	; (801e6ac <main+0x2dc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801e574:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801e578:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e57c:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e57e:	f7e3 febb 	bl	80022f8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801e582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e586:	a919      	add	r1, sp, #100	; 0x64
 801e588:	4847      	ldr	r0, [pc, #284]	; (801e6a8 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801e58a:	9319      	str	r3, [sp, #100]	; 0x64
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801e58c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e590:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e592:	f7e3 feb1 	bl	80022f8 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 2); //SDO IRQ
 801e596:	463a      	mov	r2, r7
 801e598:	4621      	mov	r1, r4
 801e59a:	2017      	movs	r0, #23
 801e59c:	f7e3 fa00 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0); //Touchscreen IRQ
 801e5a0:	4622      	mov	r2, r4
 801e5a2:	4639      	mov	r1, r7
 801e5a4:	2009      	movs	r0, #9
 801e5a6:	f7e3 f9fb 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801e5aa:	2017      	movs	r0, #23
 801e5ac:	f7e3 fa2c 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801e5b0:	2009      	movs	r0, #9
 801e5b2:	f7e3 fa29 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e5b6:	4630      	mov	r0, r6
 801e5b8:	f7e2 fd38 	bl	800102c <HAL_Delay>
	DWT_Init();
 801e5bc:	f7fe fde8 	bl	801d190 <DWT_Init>
	HAL_Delay(1);
 801e5c0:	4630      	mov	r0, r6
 801e5c2:	f7e2 fd33 	bl	800102c <HAL_Delay>
	MX_TIM2_Init();
 801e5c6:	f7fe fdaf 	bl	801d128 <MX_TIM2_Init>
	HAL_Delay(1);
 801e5ca:	4630      	mov	r0, r6
 801e5cc:	f7e2 fd2e 	bl	800102c <HAL_Delay>

//PWM Timer for booster
static void MX_TIM15_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 801e5d0:	221c      	movs	r2, #28
 801e5d2:	4621      	mov	r1, r4
 801e5d4:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e5d6:	940f      	str	r4, [sp, #60]	; 0x3c
 801e5d8:	9410      	str	r4, [sp, #64]	; 0x40
 801e5da:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 801e5dc:	f002 f80f 	bl	80205fe <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801e5e0:	222c      	movs	r2, #44	; 0x2c
 801e5e2:	4621      	mov	r1, r4
 801e5e4:	a819      	add	r0, sp, #100	; 0x64
 801e5e6:	f002 f80a 	bl	80205fe <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 801e5ea:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 801e6c4 <main+0x2f4>
  htim15.Init.Prescaler = 1200;
 801e5ee:	4b31      	ldr	r3, [pc, #196]	; (801e6b4 <main+0x2e4>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e5f0:	f8c9 4008 	str.w	r4, [r9, #8]
  htim15.Init.Prescaler = 1200;
 801e5f4:	f44f 6b96 	mov.w	fp, #1200	; 0x4b0
 801e5f8:	e889 0808 	stmia.w	r9, {r3, fp}
  htim15.Init.Period = 100;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801e5fc:	4648      	mov	r0, r9
  htim15.Init.Period = 100;
 801e5fe:	2364      	movs	r3, #100	; 0x64
 801e600:	f8c9 300c 	str.w	r3, [r9, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801e604:	f8c9 4010 	str.w	r4, [r9, #16]
  htim15.Init.RepetitionCounter = 0;
 801e608:	f8c9 4014 	str.w	r4, [r9, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e60c:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801e610:	f7e7 fc80 	bl	8005f14 <HAL_TIM_PWM_Init>
 801e614:	b100      	cbz	r0, 801e618 <main+0x248>
 801e616:	e7fe      	b.n	801e616 <main+0x246>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e618:	900f      	str	r0, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e61a:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 801e61c:	a90f      	add	r1, sp, #60	; 0x3c
 801e61e:	4648      	mov	r0, r9
 801e620:	f7e7 fec4 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801e624:	b100      	cbz	r0, 801e628 <main+0x258>
 801e626:	e7fe      	b.n	801e626 <main+0x256>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801e628:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 801e62a:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801e62c:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801e62e:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801e630:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801e632:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801e634:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801e636:	4652      	mov	r2, sl
 801e638:	a912      	add	r1, sp, #72	; 0x48
 801e63a:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801e63c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801e63e:	f7e7 fd01 	bl	8006044 <HAL_TIM_PWM_ConfigChannel>
 801e642:	b100      	cbz	r0, 801e646 <main+0x276>
 801e644:	e7fe      	b.n	801e644 <main+0x274>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801e646:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801e648:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801e64a:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = 0;
 801e64c:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801e64e:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801e650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 801e654:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801e656:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801e658:	a919      	add	r1, sp, #100	; 0x64
 801e65a:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801e65c:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801e65e:	f7e7 fed1 	bl	8006404 <HAL_TIMEx_ConfigBreakDeadTime>
 801e662:	4682      	mov	sl, r0
 801e664:	b100      	cbz	r0, 801e668 <main+0x298>
 801e666:	e7fe      	b.n	801e666 <main+0x296>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 801e668:	4648      	mov	r0, r9
 801e66a:	f001 fbb5 	bl	801fdd8 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801e66e:	4630      	mov	r0, r6
 801e670:	f7e2 fcdc 	bl	800102c <HAL_Delay>
  htim5.Instance = TIM5;
 801e674:	4c10      	ldr	r4, [pc, #64]	; (801e6b8 <main+0x2e8>)
 801e676:	4b11      	ldr	r3, [pc, #68]	; (801e6bc <main+0x2ec>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801e678:	f8c4 a010 	str.w	sl, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e67c:	e884 0488 	stmia.w	r4, {r3, r7, sl}
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801e680:	4620      	mov	r0, r4
  htim5.Init.Period = 30;
 801e682:	231e      	movs	r3, #30
 801e684:	60e3      	str	r3, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e686:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801e68a:	f7e7 fc29 	bl	8005ee0 <HAL_TIM_OC_Init>
 801e68e:	b100      	cbz	r0, 801e692 <main+0x2c2>
 801e690:	e7fe      	b.n	801e690 <main+0x2c0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e692:	9012      	str	r0, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e694:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801e696:	a912      	add	r1, sp, #72	; 0x48
 801e698:	4620      	mov	r0, r4
 801e69a:	f7e7 fe87 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801e69e:	4602      	mov	r2, r0
 801e6a0:	b190      	cbz	r0, 801e6c8 <main+0x2f8>
 801e6a2:	e7fe      	b.n	801e6a2 <main+0x2d2>
 801e6a4:	40021000 	.word	0x40021000
 801e6a8:	48000800 	.word	0x48000800
 801e6ac:	48001400 	.word	0x48001400
 801e6b0:	10210000 	.word	0x10210000
 801e6b4:	40014000 	.word	0x40014000
 801e6b8:	2009589c 	.word	0x2009589c
 801e6bc:	40000c00 	.word	0x40000c00
 801e6c0:	10110000 	.word	0x10110000
 801e6c4:	200957b4 	.word	0x200957b4
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801e6c8:	2330      	movs	r3, #48	; 0x30
 801e6ca:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801e6cc:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 5;
 801e6ce:	2305      	movs	r3, #5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801e6d0:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801e6d2:	a919      	add	r1, sp, #100	; 0x64
 801e6d4:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5;
 801e6d6:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801e6d8:	f7e7 fc7c 	bl	8005fd4 <HAL_TIM_OC_ConfigChannel>
 801e6dc:	4681      	mov	r9, r0
 801e6de:	b100      	cbz	r0, 801e6e2 <main+0x312>
 801e6e0:	e7fe      	b.n	801e6e0 <main+0x310>
  HAL_TIM_MspPostInit(&htim5);
 801e6e2:	4620      	mov	r0, r4
 801e6e4:	f001 fb78 	bl	801fdd8 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801e6e8:	4630      	mov	r0, r6
 801e6ea:	f7e2 fc9f 	bl	800102c <HAL_Delay>
	MX_USB_DEVICE_Init();
 801e6ee:	f001 fcf5 	bl	80200dc <MX_USB_DEVICE_Init>
	HAL_Delay(1);
 801e6f2:	4630      	mov	r0, r6
 801e6f4:	f7e2 fc9a 	bl	800102c <HAL_Delay>
  hdma2d.Instance = DMA2D;
 801e6f8:	4c8e      	ldr	r4, [pc, #568]	; (801e934 <main+0x564>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801e6fa:	4b8f      	ldr	r3, [pc, #572]	; (801e938 <main+0x568>)
	hdma2d.LayerCfg[0].InputOffset = 0;
 801e6fc:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hdma2d.Init.Mode = DMA2D_R2M;
 801e700:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
 801e704:	e884 0408 	stmia.w	r4, {r3, sl}
  hdma2d.LayerCfg[0].InputAlpha =125;
 801e708:	237d      	movs	r3, #125	; 0x7d
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 801e70a:	62e7      	str	r7, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801e70c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hdma2d.LayerCfg[0].InputAlpha =125;
 801e710:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d.LayerCfg[1].InputOffset = 0;
 801e712:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 801e716:	6467      	str	r7, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801e718:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 125;
 801e71c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801e71e:	4620      	mov	r0, r4
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801e720:	60a7      	str	r7, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 801e722:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801e726:	f7e3 fab5 	bl	8001c94 <HAL_DMA2D_Init>
 801e72a:	b100      	cbz	r0, 801e72e <main+0x35e>
 801e72c:	e7fe      	b.n	801e72c <main+0x35c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801e72e:	4631      	mov	r1, r6
 801e730:	4620      	mov	r0, r4
 801e732:	f7e3 fb95 	bl	8001e60 <HAL_DMA2D_ConfigLayer>
 801e736:	4681      	mov	r9, r0
 801e738:	b100      	cbz	r0, 801e73c <main+0x36c>
 801e73a:	e7fe      	b.n	801e73a <main+0x36a>
	HAL_Delay(1);
 801e73c:	4630      	mov	r0, r6
 801e73e:	f7e2 fc75 	bl	800102c <HAL_Delay>
  hspi1.Instance = SPI1;
 801e742:	4c7e      	ldr	r4, [pc, #504]	; (801e93c <main+0x56c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801e744:	4b7e      	ldr	r3, [pc, #504]	; (801e940 <main+0x570>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801e746:	f8c4 9008 	str.w	r9, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801e74a:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801e74e:	e884 1008 	stmia.w	r4, {r3, ip}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801e752:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801e756:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801e758:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e75c:	61a3      	str	r3, [r4, #24]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 801e75e:	2310      	movs	r3, #16
 801e760:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801e762:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 7;
 801e764:	2307      	movs	r3, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801e766:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801e768:	6166      	str	r6, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 801e76a:	f8c4 801c 	str.w	r8, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801e76e:	f8c4 9020 	str.w	r9, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e772:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 801e776:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801e778:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801e77c:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801e780:	f7e6 ffbc 	bl	80056fc <HAL_SPI_Init>
 801e784:	b100      	cbz	r0, 801e788 <main+0x3b8>
 801e786:	e7fe      	b.n	801e786 <main+0x3b6>
	__HAL_SPI_ENABLE(&hspi1);
 801e788:	6822      	ldr	r2, [r4, #0]
  hi2c1.Instance = I2C1;
 801e78a:	4c6e      	ldr	r4, [pc, #440]	; (801e944 <main+0x574>)
	__HAL_SPI_ENABLE(&hspi1);
 801e78c:	6813      	ldr	r3, [r2, #0]
 801e78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e792:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 801e794:	2001      	movs	r0, #1
 801e796:	f7e2 fc49 	bl	800102c <HAL_Delay>
  hi2c1.Instance = I2C1;
 801e79a:	4b6b      	ldr	r3, [pc, #428]	; (801e948 <main+0x578>)
 801e79c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 801e79e:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 801e7a2:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 801e7a6:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 801e7aa:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 112;
 801e7ac:	2370      	movs	r3, #112	; 0x70
 801e7ae:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801e7b0:	2701      	movs	r7, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801e7b2:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801e7b4:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801e7b6:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801e7b8:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801e7ba:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801e7bc:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801e7be:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801e7c0:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801e7c2:	f7e4 f860 	bl	8002886 <HAL_I2C_Init>
 801e7c6:	4601      	mov	r1, r0
 801e7c8:	b100      	cbz	r0, 801e7cc <main+0x3fc>
 801e7ca:	e7fe      	b.n	801e7ca <main+0x3fa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801e7cc:	4620      	mov	r0, r4
 801e7ce:	f7e4 fbc3 	bl	8002f58 <HAL_I2CEx_ConfigAnalogFilter>
 801e7d2:	4601      	mov	r1, r0
 801e7d4:	b100      	cbz	r0, 801e7d8 <main+0x408>
 801e7d6:	e7fe      	b.n	801e7d6 <main+0x406>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801e7d8:	4620      	mov	r0, r4
 801e7da:	f7e4 fbe3 	bl	8002fa4 <HAL_I2CEx_ConfigDigitalFilter>
 801e7de:	4606      	mov	r6, r0
 801e7e0:	b100      	cbz	r0, 801e7e4 <main+0x414>
 801e7e2:	e7fe      	b.n	801e7e2 <main+0x412>
	HAL_Delay(1);
 801e7e4:	4638      	mov	r0, r7
 801e7e6:	f7e2 fc21 	bl	800102c <HAL_Delay>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801e7ea:	4c58      	ldr	r4, [pc, #352]	; (801e94c <main+0x57c>)
  huart1.Init.BaudRate = 115200;
 801e7ec:	4b58      	ldr	r3, [pc, #352]	; (801e950 <main+0x580>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801e7ee:	60a6      	str	r6, [r4, #8]
  huart1.Init.BaudRate = 115200;
 801e7f0:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 801e7f4:	e884 4008 	stmia.w	r4, {r3, lr}
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801e7f8:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 801e7fa:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 801e7fc:	60e6      	str	r6, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801e7fe:	6126      	str	r6, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801e800:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801e802:	61a6      	str	r6, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801e804:	61e6      	str	r6, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801e806:	6226      	str	r6, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801e808:	6266      	str	r6, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801e80a:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801e80c:	f7e8 fc4a 	bl	80070a4 <HAL_UART_Init>
 801e810:	4601      	mov	r1, r0
 801e812:	b100      	cbz	r0, 801e816 <main+0x446>
 801e814:	e7fe      	b.n	801e814 <main+0x444>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801e816:	4620      	mov	r0, r4
 801e818:	f7e8 fcd8 	bl	80071cc <HAL_UARTEx_SetTxFifoThreshold>
 801e81c:	4601      	mov	r1, r0
 801e81e:	b100      	cbz	r0, 801e822 <main+0x452>
 801e820:	e7fe      	b.n	801e820 <main+0x450>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801e822:	4620      	mov	r0, r4
 801e824:	f7e8 fcf6 	bl	8007214 <HAL_UARTEx_SetRxFifoThreshold>
 801e828:	b100      	cbz	r0, 801e82c <main+0x45c>
 801e82a:	e7fe      	b.n	801e82a <main+0x45a>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 801e82c:	4620      	mov	r0, r4
 801e82e:	f7e8 fcb2 	bl	8007196 <HAL_UARTEx_DisableFifoMode>
 801e832:	4606      	mov	r6, r0
 801e834:	b100      	cbz	r0, 801e838 <main+0x468>
 801e836:	e7fe      	b.n	801e836 <main+0x466>
  {
    Error_Handler();
  }

  HAL_NVIC_SetPriority(USART1_IRQn, 1, 3);
 801e838:	2203      	movs	r2, #3
 801e83a:	4639      	mov	r1, r7
 801e83c:	2025      	movs	r0, #37	; 0x25
 801e83e:	f7e3 f8af 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801e842:	4638      	mov	r0, r7
 801e844:	f7e2 fbf2 	bl	800102c <HAL_Delay>
  hltdc.Instance = LTDC;
 801e848:	4c42      	ldr	r4, [pc, #264]	; (801e954 <main+0x584>)
 801e84a:	4b43      	ldr	r3, [pc, #268]	; (801e958 <main+0x588>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801e84c:	60a6      	str	r6, [r4, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801e84e:	e884 0048 	stmia.w	r4, {r3, r6}
  hltdc.Init.HorizontalSync = 5;
 801e852:	2305      	movs	r3, #5
 801e854:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 30;
 801e856:	231e      	movs	r3, #30
 801e858:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 40;
 801e85a:	2328      	movs	r3, #40	; 0x28
 801e85c:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 8;
 801e85e:	2308      	movs	r3, #8
 801e860:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 520;
 801e862:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e866:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 280;
 801e868:	f44f 738c 	mov.w	r3, #280	; 0x118
 801e86c:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 801e86e:	f240 230d 	movw	r3, #525	; 0x20d
 801e872:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801e874:	4620      	mov	r0, r4
  hltdc.Init.TotalHeigh = 288;
 801e876:	f44f 7390 	mov.w	r3, #288	; 0x120
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801e87a:	60e6      	str	r6, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801e87c:	6126      	str	r6, [r4, #16]
  hltdc.Init.TotalHeigh = 288;
 801e87e:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801e880:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801e884:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801e888:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801e88c:	f7e4 fc36 	bl	80030fc <HAL_LTDC_Init>
 801e890:	4602      	mov	r2, r0
 801e892:	b100      	cbz	r0, 801e896 <main+0x4c6>
 801e894:	e7fe      	b.n	801e894 <main+0x4c4>
  pLayerCfg.WindowY1 = 272;
 801e896:	f44f 7188 	mov.w	r1, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 801e89a:	9019      	str	r0, [sp, #100]	; 0x64
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801e89c:	2302      	movs	r3, #2
  pLayerCfg.WindowX1 = 480;
 801e89e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801e8a2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 801e8a6:	901a      	str	r0, [sp, #104]	; 0x68
  pLayerCfg.WindowY1 = 272;
 801e8a8:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801e8aa:	931d      	str	r3, [sp, #116]	; 0x74
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801e8ac:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.Alpha = 255;
 801e8ae:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.ImageWidth = 480;
 801e8b0:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.ImageHeight = 272;
 801e8b2:	9124      	str	r1, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801e8b4:	4620      	mov	r0, r4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801e8b6:	2607      	movs	r6, #7
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801e8b8:	a919      	add	r1, sp, #100	; 0x64
  pLayerCfg.WindowY0 = 0;
 801e8ba:	921b      	str	r2, [sp, #108]	; 0x6c
  pLayerCfg.Alpha = 255;
 801e8bc:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.Alpha0 = 0;
 801e8be:	921f      	str	r2, [sp, #124]	; 0x7c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801e8c0:	9621      	str	r6, [sp, #132]	; 0x84
  pLayerCfg.FBStartAdress = 0;
 801e8c2:	9222      	str	r2, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 255;
 801e8c4:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
  pLayerCfg.Backcolor.Green = 255;
 801e8c8:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
  pLayerCfg.Backcolor.Red = 255;
 801e8cc:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801e8d0:	f7e4 fc80 	bl	80031d4 <HAL_LTDC_ConfigLayer>
 801e8d4:	4604      	mov	r4, r0
 801e8d6:	b100      	cbz	r0, 801e8da <main+0x50a>
 801e8d8:	e7fe      	b.n	801e8d8 <main+0x508>
	HAL_Delay(1);
 801e8da:	4638      	mov	r0, r7
 801e8dc:	f7e2 fba6 	bl	800102c <HAL_Delay>
  hadc1.Instance = ADC1;
 801e8e0:	481e      	ldr	r0, [pc, #120]	; (801e95c <main+0x58c>)
 801e8e2:	4b1f      	ldr	r3, [pc, #124]	; (801e960 <main+0x590>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801e8e4:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 801e8e6:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801e8ea:	2304      	movs	r3, #4
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801e8ec:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801e8ee:	6104      	str	r4, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801e8f0:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 801e8f2:	6184      	str	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 801e8f4:	61c7      	str	r7, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 801e8f6:	6207      	str	r7, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801e8f8:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 801e8fa:	6287      	str	r7, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801e8fc:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801e8fe:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801e900:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801e902:	6384      	str	r4, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 801e904:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801e906:	f7e2 fbc7 	bl	8001098 <HAL_ADC_Init>
 801e90a:	b100      	cbz	r0, 801e90e <main+0x53e>
 801e90c:	e7fe      	b.n	801e90c <main+0x53c>
  sConfig.Channel = ADC_CHANNEL_3;
 801e90e:	4b15      	ldr	r3, [pc, #84]	; (801e964 <main+0x594>)
 801e910:	9319      	str	r3, [sp, #100]	; 0x64
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801e912:	2306      	movs	r3, #6
 801e914:	931a      	str	r3, [sp, #104]	; 0x68
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 801e916:	2307      	movs	r3, #7
 801e918:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801e91a:	237f      	movs	r3, #127	; 0x7f
 801e91c:	931c      	str	r3, [sp, #112]	; 0x70
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801e91e:	2604      	movs	r6, #4
  sConfig.Offset = 0;
 801e920:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801e922:	a919      	add	r1, sp, #100	; 0x64
 801e924:	480d      	ldr	r0, [pc, #52]	; (801e95c <main+0x58c>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801e926:	961d      	str	r6, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 801e928:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801e92a:	f7e2 fcd5 	bl	80012d8 <HAL_ADC_ConfigChannel>
 801e92e:	4604      	mov	r4, r0
 801e930:	b1d0      	cbz	r0, 801e968 <main+0x598>
 801e932:	e7fe      	b.n	801e932 <main+0x562>
 801e934:	20095b90 	.word	0x20095b90
 801e938:	4002b000 	.word	0x4002b000
 801e93c:	20095bf0 	.word	0x20095bf0
 801e940:	40013000 	.word	0x40013000
 801e944:	20095768 	.word	0x20095768
 801e948:	40005400 	.word	0x40005400
 801e94c:	20095a54 	.word	0x20095a54
 801e950:	40013800 	.word	0x40013800
 801e954:	20095900 	.word	0x20095900
 801e958:	40016800 	.word	0x40016800
 801e95c:	200959d0 	.word	0x200959d0
 801e960:	50040000 	.word	0x50040000
 801e964:	0c900008 	.word	0x0c900008
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 801e968:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801e96a:	f043 0304 	orr.w	r3, r3, #4
 801e96e:	64ab      	str	r3, [r5, #72]	; 0x48
 801e970:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801e972:	f003 0304 	and.w	r3, r3, #4
 801e976:	930f      	str	r3, [sp, #60]	; 0x3c
 801e978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 801e97a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801e97c:	f043 0301 	orr.w	r3, r3, #1
 801e980:	64ab      	str	r3, [r5, #72]	; 0x48
 801e982:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim6.Instance = TIM6;
 801e984:	4d32      	ldr	r5, [pc, #200]	; (801ea50 <main+0x680>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 801e986:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801e98a:	4602      	mov	r2, r0
 801e98c:	4601      	mov	r1, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 801e98e:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801e990:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 801e992:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801e994:	f7e3 f804 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 801e998:	200b      	movs	r0, #11
 801e99a:	f7e3 f835 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e99e:	2001      	movs	r0, #1
 801e9a0:	f7e2 fb44 	bl	800102c <HAL_Delay>
	HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_1);
 801e9a4:	4621      	mov	r1, r4
 801e9a6:	482b      	ldr	r0, [pc, #172]	; (801ea54 <main+0x684>)
 801e9a8:	f7e7 fcc0 	bl	800632c <HAL_TIM_OC_Start>
	HAL_Delay(1);
 801e9ac:	2001      	movs	r0, #1
 801e9ae:	f7e2 fb3d 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);  //ST Signal
 801e9b2:	2201      	movs	r2, #1
 801e9b4:	4621      	mov	r1, r4
 801e9b6:	201c      	movs	r0, #28
 801e9b8:	f7e2 fff2 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801e9bc:	2002      	movs	r0, #2
 801e9be:	f7e2 fb35 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801e9c2:	201c      	movs	r0, #28
 801e9c4:	f7e3 f820 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e9c8:	2001      	movs	r0, #1
 801e9ca:	f7e2 fb2f 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 801e9ce:	4822      	ldr	r0, [pc, #136]	; (801ea58 <main+0x688>)
 801e9d0:	f7e7 f938 	bl	8005c44 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 801e9d4:	2001      	movs	r0, #1
 801e9d6:	f7e2 fb29 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(LTDC_IRQn, 1, 3);  //
 801e9da:	2203      	movs	r2, #3
 801e9dc:	2101      	movs	r1, #1
 801e9de:	205b      	movs	r0, #91	; 0x5b
 801e9e0:	f7e2 ffde 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801e9e4:	2002      	movs	r0, #2
 801e9e6:	f7e2 fb21 	bl	800102c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801e9ea:	4631      	mov	r1, r6
 801e9ec:	481b      	ldr	r0, [pc, #108]	; (801ea5c <main+0x68c>)
 801e9ee:	f7e7 fc69 	bl	80062c4 <HAL_TIM_PWM_Start>
	TIM15->CCR2 = 50;
 801e9f2:	4b1b      	ldr	r3, [pc, #108]	; (801ea60 <main+0x690>)
 801e9f4:	2232      	movs	r2, #50	; 0x32
 801e9f6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1);
 801e9f8:	2001      	movs	r0, #1
 801e9fa:	f7e2 fb17 	bl	800102c <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801e9fe:	2201      	movs	r2, #1
 801ea00:	4918      	ldr	r1, [pc, #96]	; (801ea64 <main+0x694>)
 801ea02:	4819      	ldr	r0, [pc, #100]	; (801ea68 <main+0x698>)
 801ea04:	f7e7 fe76 	bl	80066f4 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 801ea08:	2001      	movs	r0, #1
 801ea0a:	f7e2 fb0f 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801ea0e:	4817      	ldr	r0, [pc, #92]	; (801ea6c <main+0x69c>)
 801ea10:	2201      	movs	r2, #1
 801ea12:	4631      	mov	r1, r6
 801ea14:	f7e3 fde6 	bl	80025e4 <HAL_GPIO_WritePin>
  htim6.Init.Prescaler = 48000;
 801ea18:	4b15      	ldr	r3, [pc, #84]	; (801ea70 <main+0x6a0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801ea1a:	9419      	str	r4, [sp, #100]	; 0x64
  htim6.Init.Prescaler = 48000;
 801ea1c:	f64b 3780 	movw	r7, #48000	; 0xbb80
 801ea20:	e885 0088 	stmia.w	r5, {r3, r7}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801ea24:	4628      	mov	r0, r5
  htim6.Init.Period = 3800;
 801ea26:	f640 63d8 	movw	r3, #3800	; 0xed8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801ea2a:	941a      	str	r4, [sp, #104]	; 0x68
 801ea2c:	941b      	str	r4, [sp, #108]	; 0x6c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ea2e:	60ac      	str	r4, [r5, #8]
  htim6.Init.Period = 3800;
 801ea30:	60eb      	str	r3, [r5, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801ea32:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801ea34:	f7e7 fa3a 	bl	8005eac <HAL_TIM_Base_Init>
 801ea38:	b100      	cbz	r0, 801ea3c <main+0x66c>
 801ea3a:	e7fe      	b.n	801ea3a <main+0x66a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801ea3c:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ea3e:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801ea40:	a919      	add	r1, sp, #100	; 0x64
 801ea42:	4628      	mov	r0, r5
 801ea44:	f7e7 fcb2 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801ea48:	4607      	mov	r7, r0
 801ea4a:	b198      	cbz	r0, 801ea74 <main+0x6a4>
 801ea4c:	e7fe      	b.n	801ea4c <main+0x67c>
 801ea4e:	bf00      	nop
 801ea50:	20095ae4 	.word	0x20095ae4
 801ea54:	2009589c 	.word	0x2009589c
 801ea58:	20095c58 	.word	0x20095c58
 801ea5c:	200957b4 	.word	0x200957b4
 801ea60:	40014000 	.word	0x40014000
 801ea64:	200905d2 	.word	0x200905d2
 801ea68:	20095a54 	.word	0x20095a54
 801ea6c:	48001400 	.word	0x48001400
 801ea70:	40001000 	.word	0x40001000
	HAL_Delay(1);
 801ea74:	2001      	movs	r0, #1
 801ea76:	f7e2 fad9 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801ea7a:	2036      	movs	r0, #54	; 0x36
 801ea7c:	f7e2 ffc4 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801ea80:	2001      	movs	r0, #1
 801ea82:	f7e2 fad3 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 801ea86:	4628      	mov	r0, r5
 801ea88:	f7e7 f8dc 	bl	8005c44 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 4);
 801ea8c:	4632      	mov	r2, r6
 801ea8e:	2101      	movs	r1, #1
 801ea90:	201c      	movs	r0, #28
 801ea92:	f7e2 ff85 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801ea96:	2001      	movs	r0, #1
 801ea98:	f7e2 fac8 	bl	800102c <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801ea9c:	463a      	mov	r2, r7
 801ea9e:	49d0      	ldr	r1, [pc, #832]	; (801ede0 <main+0xa10>)
 801eaa0:	48d0      	ldr	r0, [pc, #832]	; (801ede4 <main+0xa14>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801eaa2:	4cd1      	ldr	r4, [pc, #836]	; (801ede8 <main+0xa18>)
 801eaa4:	4dd1      	ldr	r5, [pc, #836]	; (801edec <main+0xa1c>)
 801eaa6:	4ed2      	ldr	r6, [pc, #840]	; (801edf0 <main+0xa20>)
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801eaa8:	f8df 9400 	ldr.w	r9, [pc, #1024]	; 801eeac <main+0xadc>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801eaac:	f7e4 fbbb 	bl	8003226 <HAL_LTDC_SetAddress>
	HAL_Delay(1);
 801eab0:	2001      	movs	r0, #1
 801eab2:	f7e2 fabb 	bl	800102c <HAL_Delay>
	Touch_Ini();
 801eab6:	f7fd fc68 	bl	801c38a <Touch_Ini>
	MX_SDMMC1_SD_Init();
 801eaba:	f7fe fb23 	bl	801d104 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 801eabe:	f7fd fcef 	bl	801c4a0 <MX_FATFS_Init>
	GPIO_QSPI_Init();
 801eac2:	f7fb f867 	bl	8019b94 <GPIO_QSPI_Init>
	Single_Mode();	
 801eac6:	f7fb f95f 	bl	8019d88 <Single_Mode>
	HAL_Delay(20);
 801eaca:	2014      	movs	r0, #20
 801eacc:	f7e2 faae 	bl	800102c <HAL_Delay>
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801ead0:	2103      	movs	r1, #3
 801ead2:	48c8      	ldr	r0, [pc, #800]	; (801edf4 <main+0xa24>)
 801ead4:	f7f0 fb38 	bl	800f148 <Calibration_Load_1byte>
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801ead8:	4bc7      	ldr	r3, [pc, #796]	; (801edf8 <main+0xa28>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801eada:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801eadc:	28ff      	cmp	r0, #255	; 0xff
 801eade:	bf18      	it	ne
 801eae0:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801eae2:	f04f 0103 	mov.w	r1, #3
 801eae6:	48c5      	ldr	r0, [pc, #788]	; (801edfc <main+0xa2c>)
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801eae8:	bf08      	it	eq
 801eaea:	701f      	strbeq	r7, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801eaec:	f7f0 fb2c 	bl	800f148 <Calibration_Load_1byte>
 801eaf0:	4bc3      	ldr	r3, [pc, #780]	; (801ee00 <main+0xa30>)
 801eaf2:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801eaf4:	28ff      	cmp	r0, #255	; 0xff
 801eaf6:	bf0c      	ite	eq
 801eaf8:	2200      	moveq	r2, #0
 801eafa:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801eafc:	f04f 0103 	mov.w	r1, #3
 801eb00:	48c0      	ldr	r0, [pc, #768]	; (801ee04 <main+0xa34>)
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801eb02:	bf08      	it	eq
 801eb04:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801eb06:	f7f0 fb1f 	bl	800f148 <Calibration_Load_1byte>
 801eb0a:	4bbf      	ldr	r3, [pc, #764]	; (801ee08 <main+0xa38>)
 801eb0c:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801eb0e:	28ff      	cmp	r0, #255	; 0xff
 801eb10:	bf0a      	itet	eq
 801eb12:	781a      	ldrbeq	r2, [r3, #0]
 801eb14:	7018      	strbne	r0, [r3, #0]
 801eb16:	f042 0201 	orreq.w	r2, r2, #1
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801eb1a:	f04f 0103 	mov.w	r1, #3
 801eb1e:	48bb      	ldr	r0, [pc, #748]	; (801ee0c <main+0xa3c>)
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801eb20:	bf08      	it	eq
 801eb22:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801eb24:	f7f0 fb10 	bl	800f148 <Calibration_Load_1byte>
 801eb28:	4bb9      	ldr	r3, [pc, #740]	; (801ee10 <main+0xa40>)
 801eb2a:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801eb2c:	28ff      	cmp	r0, #255	; 0xff
 801eb2e:	bf0c      	ite	eq
 801eb30:	2200      	moveq	r2, #0
 801eb32:	7018      	strbne	r0, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801eb34:	f04f 0103 	mov.w	r1, #3
 801eb38:	48b6      	ldr	r0, [pc, #728]	; (801ee14 <main+0xa44>)
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801eb3a:	bf08      	it	eq
 801eb3c:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801eb3e:	f7f0 fb03 	bl	800f148 <Calibration_Load_1byte>
 801eb42:	4bb5      	ldr	r3, [pc, #724]	; (801ee18 <main+0xa48>)
 801eb44:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801eb46:	28ff      	cmp	r0, #255	; 0xff
 801eb48:	bf0c      	ite	eq
 801eb4a:	2200      	moveq	r2, #0
 801eb4c:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801eb4e:	f04f 0103 	mov.w	r1, #3
 801eb52:	48b2      	ldr	r0, [pc, #712]	; (801ee1c <main+0xa4c>)
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801eb54:	bf08      	it	eq
 801eb56:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801eb58:	f7f0 faf6 	bl	800f148 <Calibration_Load_1byte>
 801eb5c:	4bb0      	ldr	r3, [pc, #704]	; (801ee20 <main+0xa50>)
 801eb5e:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801eb60:	28ff      	cmp	r0, #255	; 0xff
 801eb62:	bf0a      	itet	eq
 801eb64:	781a      	ldrbeq	r2, [r3, #0]
 801eb66:	7018      	strbne	r0, [r3, #0]
 801eb68:	f042 0210 	orreq.w	r2, r2, #16
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801eb6c:	f04f 0103 	mov.w	r1, #3
 801eb70:	48ac      	ldr	r0, [pc, #688]	; (801ee24 <main+0xa54>)
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801eb72:	bf08      	it	eq
 801eb74:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801eb76:	f7f0 fae7 	bl	800f148 <Calibration_Load_1byte>
 801eb7a:	4bab      	ldr	r3, [pc, #684]	; (801ee28 <main+0xa58>)
 801eb7c:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801eb7e:	28ff      	cmp	r0, #255	; 0xff
 801eb80:	bf0c      	ite	eq
 801eb82:	2200      	moveq	r2, #0
 801eb84:	7018      	strbne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801eb86:	f04f 0101 	mov.w	r1, #1
 801eb8a:	48a8      	ldr	r0, [pc, #672]	; (801ee2c <main+0xa5c>)
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801eb8c:	bf08      	it	eq
 801eb8e:	701a      	strbeq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801eb90:	f7f0 fab6 	bl	800f100 <Calibration_Load_2byte>
 801eb94:	4ca6      	ldr	r4, [pc, #664]	; (801ee30 <main+0xa60>)
 801eb96:	4ba7      	ldr	r3, [pc, #668]	; (801ee34 <main+0xa64>)
 801eb98:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801eb9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eb9e:	4290      	cmp	r0, r2
 801eba0:	bf0c      	ite	eq
 801eba2:	2200      	moveq	r2, #0
 801eba4:	8018      	strhne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801eba6:	f04f 0101 	mov.w	r1, #1
 801ebaa:	48a3      	ldr	r0, [pc, #652]	; (801ee38 <main+0xa68>)
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801ebac:	bf08      	it	eq
 801ebae:	801a      	strheq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801ebb0:	f7f0 faa6 	bl	800f100 <Calibration_Load_2byte>
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801ebb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ebb8:	4298      	cmp	r0, r3
 801ebba:	4ba0      	ldr	r3, [pc, #640]	; (801ee3c <main+0xa6c>)
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801ebbc:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801ebbe:	bf06      	itte	eq
 801ebc0:	2200      	moveq	r2, #0
 801ebc2:	801a      	strheq	r2, [r3, #0]
 801ebc4:	8018      	strhne	r0, [r3, #0]
	Calibration_WaveLenght_Graph();
 801ebc6:	f7f0 fb83 	bl	800f2d0 <Calibration_WaveLenght_Graph>
	Calibration_Exposure_Change(exp_num);
 801ebca:	4b9d      	ldr	r3, [pc, #628]	; (801ee40 <main+0xa70>)
 801ebcc:	4f9d      	ldr	r7, [pc, #628]	; (801ee44 <main+0xa74>)
 801ebce:	7818      	ldrb	r0, [r3, #0]
 801ebd0:	f7f0 fb40 	bl	800f254 <Calibration_Exposure_Change>
	Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 801ebd4:	4b88      	ldr	r3, [pc, #544]	; (801edf8 <main+0xa28>)
 801ebd6:	489c      	ldr	r0, [pc, #624]	; (801ee48 <main+0xa78>)
 801ebd8:	781c      	ldrb	r4, [r3, #0]
 801ebda:	4b9c      	ldr	r3, [pc, #624]	; (801ee4c <main+0xa7c>)
 801ebdc:	4a9c      	ldr	r2, [pc, #624]	; (801ee50 <main+0xa80>)
 801ebde:	2c00      	cmp	r4, #0
 801ebe0:	bf18      	it	ne
 801ebe2:	4618      	movne	r0, r3
 801ebe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ebe8:	f7f0 faf2 	bl	800f1d0 <Calibration_Load_Pack>
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801ebec:	4899      	ldr	r0, [pc, #612]	; (801ee54 <main+0xa84>)
 801ebee:	f7f0 fadd 	bl	800f1ac <Calibration_Load_float>
 801ebf2:	4b99      	ldr	r3, [pc, #612]	; (801ee58 <main+0xa88>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801ebf4:	4899      	ldr	r0, [pc, #612]	; (801ee5c <main+0xa8c>)
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801ebf6:	ed83 0a00 	vstr	s0, [r3]
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801ebfa:	f7f0 fad7 	bl	800f1ac <Calibration_Load_float>
 801ebfe:	4b98      	ldr	r3, [pc, #608]	; (801ee60 <main+0xa90>)
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801ec00:	4a98      	ldr	r2, [pc, #608]	; (801ee64 <main+0xa94>)
 801ec02:	4899      	ldr	r0, [pc, #612]	; (801ee68 <main+0xa98>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801ec04:	ed83 0a00 	vstr	s0, [r3]
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801ec08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ec0c:	f7f0 fae0 	bl	800f1d0 <Calibration_Load_Pack>
	Calibration_Load_Pack(SPECTRAL_NIGHT, 0x400, Spectral_night);
 801ec10:	4a96      	ldr	r2, [pc, #600]	; (801ee6c <main+0xa9c>)
 801ec12:	4897      	ldr	r0, [pc, #604]	; (801ee70 <main+0xaa0>)
 801ec14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ec18:	f7f0 fada 	bl	800f1d0 <Calibration_Load_Pack>
	Calibration_Load_Pack(X10_CIE1964, 0x400, calibratre_x_1964);
 801ec1c:	4a95      	ldr	r2, [pc, #596]	; (801ee74 <main+0xaa4>)
 801ec1e:	4896      	ldr	r0, [pc, #600]	; (801ee78 <main+0xaa8>)
 801ec20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ec24:	f7f0 fad4 	bl	800f1d0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Y10_CIE1964, 0x400, calibratre_y_1964);
 801ec28:	4a94      	ldr	r2, [pc, #592]	; (801ee7c <main+0xaac>)
 801ec2a:	4895      	ldr	r0, [pc, #596]	; (801ee80 <main+0xab0>)
 801ec2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ec30:	f7f0 face 	bl	800f1d0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z10_CIE1964, 0x400, calibratre_z_1964);
 801ec34:	4a93      	ldr	r2, [pc, #588]	; (801ee84 <main+0xab4>)
 801ec36:	4894      	ldr	r0, [pc, #592]	; (801ee88 <main+0xab8>)
 801ec38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ec3c:	f7f0 fac8 	bl	800f1d0 <Calibration_Load_Pack>
	Calibration_Load_Pack(X2_CIE1931, 0x400, calibratre_x_1931);
 801ec40:	4a92      	ldr	r2, [pc, #584]	; (801ee8c <main+0xabc>)
 801ec42:	4893      	ldr	r0, [pc, #588]	; (801ee90 <main+0xac0>)
 801ec44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ec48:	f7f0 fac2 	bl	800f1d0 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z2_CIE1931, 0x400, calibratre_z_1931);
 801ec4c:	4a91      	ldr	r2, [pc, #580]	; (801ee94 <main+0xac4>)
 801ec4e:	4892      	ldr	r0, [pc, #584]	; (801ee98 <main+0xac8>)
 801ec50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ec54:	f7f0 fabc 	bl	800f1d0 <Calibration_Load_Pack>
 801ec58:	4b90      	ldr	r3, [pc, #576]	; (801ee9c <main+0xacc>)
 801ec5a:	9302      	str	r3, [sp, #8]
 801ec5c:	4b90      	ldr	r3, [pc, #576]	; (801eea0 <main+0xad0>)
 801ec5e:	9304      	str	r3, [sp, #16]
 801ec60:	4b90      	ldr	r3, [pc, #576]	; (801eea4 <main+0xad4>)
 801ec62:	9303      	str	r3, [sp, #12]
 801ec64:	46aa      	mov	sl, r5
 801ec66:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801ec6a:	f04f 0800 	mov.w	r8, #0
 801ec6e:	2100      	movs	r1, #0
 801ec70:	4620      	mov	r0, r4
 801ec72:	f7f0 fa45 	bl	800f100 <Calibration_Load_2byte>
 801ec76:	ee07 0a90 	vmov	s15, r0
 801ec7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec7e:	f504 4b90 	add.w	fp, r4, #18432	; 0x4800
 801ec82:	ee17 0a90 	vmov	r0, s15
 801ec86:	f7e1 fc77 	bl	8000578 <__aeabi_f2d>
 801ec8a:	4642      	mov	r2, r8
 801ec8c:	464b      	mov	r3, r9
 801ec8e:	f7e1 fdf1 	bl	8000874 <__aeabi_ddiv>
 801ec92:	a351      	add	r3, pc, #324	; (adr r3, 801edd8 <main+0xa08>)
 801ec94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec98:	f7e1 fb10 	bl	80002bc <__adddf3>
 801ec9c:	f7e1 ffb8 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801eca0:	2101      	movs	r1, #1
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801eca2:	f8ca 0000 	str.w	r0, [sl]
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801eca6:	4620      	mov	r0, r4
 801eca8:	f7f0 fa2a 	bl	800f100 <Calibration_Load_2byte>
 801ecac:	ee07 0a90 	vmov	s15, r0
 801ecb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecb4:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801ecb8:	ee17 0a90 	vmov	r0, s15
 801ecbc:	f7e1 fc5c 	bl	8000578 <__aeabi_f2d>
 801ecc0:	4642      	mov	r2, r8
 801ecc2:	464b      	mov	r3, r9
 801ecc4:	f7e1 fdd6 	bl	8000874 <__aeabi_ddiv>
 801ecc8:	a343      	add	r3, pc, #268	; (adr r3, 801edd8 <main+0xa08>)
 801ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecce:	f7e1 faf5 	bl	80002bc <__adddf3>
 801ecd2:	f7e1 ff9d 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801ecd6:	2102      	movs	r1, #2
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801ecd8:	f8ca 0004 	str.w	r0, [sl, #4]
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801ecdc:	4620      	mov	r0, r4
 801ecde:	f7f0 fa0f 	bl	800f100 <Calibration_Load_2byte>
 801ece2:	ee07 0a90 	vmov	s15, r0
 801ece6:	eef8 7a67 	vcvt.f32.u32	s15, s15
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801ecea:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 801eea8 <main+0xad8>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801ecee:	ee17 0a90 	vmov	r0, s15
 801ecf2:	f7e1 fc41 	bl	8000578 <__aeabi_f2d>
 801ecf6:	4642      	mov	r2, r8
 801ecf8:	464b      	mov	r3, r9
 801ecfa:	f7e1 fdbb 	bl	8000874 <__aeabi_ddiv>
 801ecfe:	a336      	add	r3, pc, #216	; (adr r3, 801edd8 <main+0xa08>)
 801ed00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed04:	f7e1 fada 	bl	80002bc <__adddf3>
 801ed08:	f7e1 ff82 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801ed0c:	2103      	movs	r1, #3
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801ed0e:	f8ca 0008 	str.w	r0, [sl, #8]
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801ed12:	4620      	mov	r0, r4
 801ed14:	f7f0 f9f4 	bl	800f100 <Calibration_Load_2byte>
 801ed18:	ee07 0a90 	vmov	s15, r0
 801ed1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed20:	f10a 0a10 	add.w	sl, sl, #16
 801ed24:	ee17 0a90 	vmov	r0, s15
 801ed28:	f7e1 fc26 	bl	8000578 <__aeabi_f2d>
 801ed2c:	4642      	mov	r2, r8
 801ed2e:	464b      	mov	r3, r9
 801ed30:	f7e1 fda0 	bl	8000874 <__aeabi_ddiv>
 801ed34:	a328      	add	r3, pc, #160	; (adr r3, 801edd8 <main+0xa08>)
 801ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed3a:	f7e1 fabf 	bl	80002bc <__adddf3>
 801ed3e:	f7e1 ff67 	bl	8000c10 <__aeabi_d2f>
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801ed42:	2100      	movs	r1, #0
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801ed44:	f84a 0c04 	str.w	r0, [sl, #-4]
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801ed48:	4658      	mov	r0, fp
 801ed4a:	f7f0 f9d9 	bl	800f100 <Calibration_Load_2byte>
 801ed4e:	ee07 0a90 	vmov	s15, r0
 801ed52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ed56:	9b02      	ldr	r3, [sp, #8]
 801ed58:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801ed5c:	2101      	movs	r1, #1
 801ed5e:	4658      	mov	r0, fp
 801ed60:	3710      	adds	r7, #16
 801ed62:	3610      	adds	r6, #16
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801ed64:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801ed68:	f7f0 f9ca 	bl	800f100 <Calibration_Load_2byte>
 801ed6c:	ee07 0a90 	vmov	s15, r0
 801ed70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ed74:	9b02      	ldr	r3, [sp, #8]
 801ed76:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801ed7a:	2102      	movs	r1, #2
 801ed7c:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801ed7e:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801ed82:	f7f0 f9bd 	bl	800f100 <Calibration_Load_2byte>
 801ed86:	ee07 0a90 	vmov	s15, r0
 801ed8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ed8e:	9b02      	ldr	r3, [sp, #8]
 801ed90:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801ed94:	2103      	movs	r1, #3
 801ed96:	4658      	mov	r0, fp
 801ed98:	f504 4ba0 	add.w	fp, r4, #20480	; 0x5000
 801ed9c:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801eda0:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801eda4:	f7f0 f9ac 	bl	800f100 <Calibration_Load_2byte>
 801eda8:	ee07 0a90 	vmov	s15, r0
 801edac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801edb0:	9b02      	ldr	r3, [sp, #8]
 801edb2:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801edb6:	2100      	movs	r1, #0
 801edb8:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801edba:	edc3 7a03 	vstr	s15, [r3, #12]
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801edbe:	f7f0 f99f 	bl	800f100 <Calibration_Load_2byte>
 801edc2:	ee07 0a90 	vmov	s15, r0
 801edc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801edca:	9b04      	ldr	r3, [sp, #16]
 801edcc:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801edd0:	2101      	movs	r1, #1
 801edd2:	e06d      	b.n	801eeb0 <main+0xae0>
 801edd4:	f3af 8000 	nop.w
 801edd8:	00000000 	.word	0x00000000
 801eddc:	4072c000 	.word	0x4072c000
 801ede0:	2000ed3c 	.word	0x2000ed3c
 801ede4:	20095900 	.word	0x20095900
 801ede8:	200957f4 	.word	0x200957f4
 801edec:	20054948 	.word	0x20054948
 801edf0:	2004f93c 	.word	0x2004f93c
 801edf4:	0812b030 	.word	0x0812b030
 801edf8:	20000ebc 	.word	0x20000ebc
 801edfc:	0812b040 	.word	0x0812b040
 801ee00:	20005702 	.word	0x20005702
 801ee04:	0812b048 	.word	0x0812b048
 801ee08:	200056ff 	.word	0x200056ff
 801ee0c:	0812b050 	.word	0x0812b050
 801ee10:	20005700 	.word	0x20005700
 801ee14:	0812b058 	.word	0x0812b058
 801ee18:	20005703 	.word	0x20005703
 801ee1c:	0812b060 	.word	0x0812b060
 801ee20:	20090ab9 	.word	0x20090ab9
 801ee24:	0812b068 	.word	0x0812b068
 801ee28:	20090aba 	.word	0x20090aba
 801ee2c:	0812b038 	.word	0x0812b038
 801ee30:	20095888 	.word	0x20095888
 801ee34:	20005706 	.word	0x20005706
 801ee38:	0812b020 	.word	0x0812b020
 801ee3c:	2000572e 	.word	0x2000572e
 801ee40:	200905b6 	.word	0x200905b6
 801ee44:	2004e93c 	.word	0x2004e93c
 801ee48:	08101838 	.word	0x08101838
 801ee4c:	08100838 	.word	0x08100838
 801ee50:	20051940 	.word	0x20051940
 801ee54:	08102838 	.word	0x08102838
 801ee58:	20009d24 	.word	0x20009d24
 801ee5c:	0810283c 	.word	0x0810283c
 801ee60:	20009d28 	.word	0x20009d28
 801ee64:	20052940 	.word	0x20052940
 801ee68:	08102840 	.word	0x08102840
 801ee6c:	20053940 	.word	0x20053940
 801ee70:	08103844 	.word	0x08103844
 801ee74:	2008b514 	.word	0x2008b514
 801ee78:	08107840 	.word	0x08107840
 801ee7c:	2008c514 	.word	0x2008c514
 801ee80:	08108840 	.word	0x08108840
 801ee84:	2008e514 	.word	0x2008e514
 801ee88:	08109840 	.word	0x08109840
 801ee8c:	2008a514 	.word	0x2008a514
 801ee90:	08105840 	.word	0x08105840
 801ee94:	2008d514 	.word	0x2008d514
 801ee98:	08106840 	.word	0x08106840
 801ee9c:	20009d38 	.word	0x20009d38
 801eea0:	2000ad38 	.word	0x2000ad38
 801eea4:	2005093c 	.word	0x2005093c
 801eea8:	447a0000 	.word	0x447a0000
 801eeac:	40590000 	.word	0x40590000
 801eeb0:	4658      	mov	r0, fp
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801eeb2:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801eeb6:	f7f0 f923 	bl	800f100 <Calibration_Load_2byte>
 801eeba:	ee07 0a90 	vmov	s15, r0
 801eebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801eec2:	9b04      	ldr	r3, [sp, #16]
 801eec4:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801eec8:	2102      	movs	r1, #2
 801eeca:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801eecc:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801eed0:	f7f0 f916 	bl	800f100 <Calibration_Load_2byte>
 801eed4:	ee07 0a90 	vmov	s15, r0
 801eed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801eedc:	9b04      	ldr	r3, [sp, #16]
 801eede:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801eee2:	2103      	movs	r1, #3
 801eee4:	4658      	mov	r0, fp
 801eee6:	f504 4b28 	add.w	fp, r4, #43008	; 0xa800
 801eeea:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801eeee:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801eef2:	f7f0 f905 	bl	800f100 <Calibration_Load_2byte>
 801eef6:	ee07 0a90 	vmov	s15, r0
 801eefa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801eefe:	9b04      	ldr	r3, [sp, #16]
 801ef00:	eec7 7a08 	vdiv.f32	s15, s14, s16
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801ef04:	2100      	movs	r1, #0
 801ef06:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801ef08:	edc3 7a03 	vstr	s15, [r3, #12]
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801ef0c:	f7f0 f8f8 	bl	800f100 <Calibration_Load_2byte>
 801ef10:	ee07 0a90 	vmov	s15, r0
 801ef14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef18:	ee17 0a90 	vmov	r0, s15
 801ef1c:	f7e1 fb2c 	bl	8000578 <__aeabi_f2d>
 801ef20:	4642      	mov	r2, r8
 801ef22:	464b      	mov	r3, r9
 801ef24:	f7e1 fca6 	bl	8000874 <__aeabi_ddiv>
 801ef28:	2200      	movs	r2, #0
 801ef2a:	4bda      	ldr	r3, [pc, #872]	; (801f294 <main+0xec4>)
 801ef2c:	f7e1 f9c4 	bl	80002b8 <__aeabi_dsub>
 801ef30:	f7e1 fe6e 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801ef34:	2101      	movs	r1, #1
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801ef36:	f847 0c10 	str.w	r0, [r7, #-16]
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801ef3a:	4658      	mov	r0, fp
 801ef3c:	f7f0 f8e0 	bl	800f100 <Calibration_Load_2byte>
 801ef40:	ee07 0a90 	vmov	s15, r0
 801ef44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef48:	ee17 0a90 	vmov	r0, s15
 801ef4c:	f7e1 fb14 	bl	8000578 <__aeabi_f2d>
 801ef50:	4642      	mov	r2, r8
 801ef52:	464b      	mov	r3, r9
 801ef54:	f7e1 fc8e 	bl	8000874 <__aeabi_ddiv>
 801ef58:	2200      	movs	r2, #0
 801ef5a:	4bce      	ldr	r3, [pc, #824]	; (801f294 <main+0xec4>)
 801ef5c:	f7e1 f9ac 	bl	80002b8 <__aeabi_dsub>
 801ef60:	f7e1 fe56 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801ef64:	2102      	movs	r1, #2
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801ef66:	f847 0c0c 	str.w	r0, [r7, #-12]
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801ef6a:	4658      	mov	r0, fp
 801ef6c:	f7f0 f8c8 	bl	800f100 <Calibration_Load_2byte>
 801ef70:	ee07 0a90 	vmov	s15, r0
 801ef74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef78:	ee17 0a90 	vmov	r0, s15
 801ef7c:	f7e1 fafc 	bl	8000578 <__aeabi_f2d>
 801ef80:	4642      	mov	r2, r8
 801ef82:	464b      	mov	r3, r9
 801ef84:	f7e1 fc76 	bl	8000874 <__aeabi_ddiv>
 801ef88:	2200      	movs	r2, #0
 801ef8a:	4bc2      	ldr	r3, [pc, #776]	; (801f294 <main+0xec4>)
 801ef8c:	f7e1 f994 	bl	80002b8 <__aeabi_dsub>
 801ef90:	f7e1 fe3e 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801ef94:	2103      	movs	r1, #3
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801ef96:	f847 0c08 	str.w	r0, [r7, #-8]
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801ef9a:	4658      	mov	r0, fp
 801ef9c:	f7f0 f8b0 	bl	800f100 <Calibration_Load_2byte>
 801efa0:	ee07 0a90 	vmov	s15, r0
 801efa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801efa8:	f504 4b30 	add.w	fp, r4, #45056	; 0xb000
 801efac:	ee17 0a90 	vmov	r0, s15
 801efb0:	f7e1 fae2 	bl	8000578 <__aeabi_f2d>
 801efb4:	4642      	mov	r2, r8
 801efb6:	464b      	mov	r3, r9
 801efb8:	f7e1 fc5c 	bl	8000874 <__aeabi_ddiv>
 801efbc:	2200      	movs	r2, #0
 801efbe:	4bb5      	ldr	r3, [pc, #724]	; (801f294 <main+0xec4>)
 801efc0:	f7e1 f97a 	bl	80002b8 <__aeabi_dsub>
 801efc4:	f7e1 fe24 	bl	8000c10 <__aeabi_d2f>
 801efc8:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801efcc:	f847 0c04 	str.w	r0, [r7, #-4]
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801efd0:	2100      	movs	r1, #0
 801efd2:	4658      	mov	r0, fp
 801efd4:	f7f0 f894 	bl	800f100 <Calibration_Load_2byte>
 801efd8:	ee07 0a90 	vmov	s15, r0
 801efdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801efe0:	ee17 0a90 	vmov	r0, s15
 801efe4:	f7e1 fac8 	bl	8000578 <__aeabi_f2d>
 801efe8:	4642      	mov	r2, r8
 801efea:	464b      	mov	r3, r9
 801efec:	f7e1 fc42 	bl	8000874 <__aeabi_ddiv>
 801eff0:	2200      	movs	r2, #0
 801eff2:	4ba8      	ldr	r3, [pc, #672]	; (801f294 <main+0xec4>)
 801eff4:	f7e1 f960 	bl	80002b8 <__aeabi_dsub>
 801eff8:	f7e1 fe0a 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801effc:	2101      	movs	r1, #1
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801effe:	f846 0c10 	str.w	r0, [r6, #-16]
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801f002:	4658      	mov	r0, fp
 801f004:	f7f0 f87c 	bl	800f100 <Calibration_Load_2byte>
 801f008:	ee07 0a90 	vmov	s15, r0
 801f00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f010:	ee17 0a90 	vmov	r0, s15
 801f014:	f7e1 fab0 	bl	8000578 <__aeabi_f2d>
 801f018:	4642      	mov	r2, r8
 801f01a:	464b      	mov	r3, r9
 801f01c:	f7e1 fc2a 	bl	8000874 <__aeabi_ddiv>
 801f020:	2200      	movs	r2, #0
 801f022:	4b9c      	ldr	r3, [pc, #624]	; (801f294 <main+0xec4>)
 801f024:	f7e1 f948 	bl	80002b8 <__aeabi_dsub>
 801f028:	f7e1 fdf2 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801f02c:	2102      	movs	r1, #2
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801f02e:	f846 0c0c 	str.w	r0, [r6, #-12]
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801f032:	4658      	mov	r0, fp
 801f034:	f7f0 f864 	bl	800f100 <Calibration_Load_2byte>
 801f038:	ee07 0a90 	vmov	s15, r0
 801f03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f040:	ee17 0a90 	vmov	r0, s15
 801f044:	f7e1 fa98 	bl	8000578 <__aeabi_f2d>
 801f048:	4642      	mov	r2, r8
 801f04a:	464b      	mov	r3, r9
 801f04c:	f7e1 fc12 	bl	8000874 <__aeabi_ddiv>
 801f050:	2200      	movs	r2, #0
 801f052:	4b90      	ldr	r3, [pc, #576]	; (801f294 <main+0xec4>)
 801f054:	f7e1 f930 	bl	80002b8 <__aeabi_dsub>
 801f058:	f7e1 fdda 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801f05c:	2103      	movs	r1, #3
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801f05e:	f846 0c08 	str.w	r0, [r6, #-8]
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801f062:	4658      	mov	r0, fp
 801f064:	f7f0 f84c 	bl	800f100 <Calibration_Load_2byte>
 801f068:	ee07 0a90 	vmov	s15, r0
 801f06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f070:	f504 4b38 	add.w	fp, r4, #47104	; 0xb800
 801f074:	ee17 0a90 	vmov	r0, s15
 801f078:	f7e1 fa7e 	bl	8000578 <__aeabi_f2d>
 801f07c:	4642      	mov	r2, r8
 801f07e:	464b      	mov	r3, r9
 801f080:	f7e1 fbf8 	bl	8000874 <__aeabi_ddiv>
 801f084:	2200      	movs	r2, #0
 801f086:	4b83      	ldr	r3, [pc, #524]	; (801f294 <main+0xec4>)
 801f088:	f7e1 f916 	bl	80002b8 <__aeabi_dsub>
 801f08c:	f7e1 fdc0 	bl	8000c10 <__aeabi_d2f>
 801f090:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801f094:	f846 0c04 	str.w	r0, [r6, #-4]
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801f098:	2100      	movs	r1, #0
 801f09a:	4658      	mov	r0, fp
 801f09c:	f7f0 f830 	bl	800f100 <Calibration_Load_2byte>
 801f0a0:	ee07 0a90 	vmov	s15, r0
 801f0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0a8:	3408      	adds	r4, #8
 801f0aa:	ee17 0a90 	vmov	r0, s15
 801f0ae:	f7e1 fa63 	bl	8000578 <__aeabi_f2d>
 801f0b2:	4642      	mov	r2, r8
 801f0b4:	464b      	mov	r3, r9
 801f0b6:	f7e1 fbdd 	bl	8000874 <__aeabi_ddiv>
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	4b75      	ldr	r3, [pc, #468]	; (801f294 <main+0xec4>)
 801f0be:	f7e1 f8fb 	bl	80002b8 <__aeabi_dsub>
 801f0c2:	f7e1 fda5 	bl	8000c10 <__aeabi_d2f>
 801f0c6:	9b03      	ldr	r3, [sp, #12]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801f0c8:	2101      	movs	r1, #1
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801f0ca:	6018      	str	r0, [r3, #0]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801f0cc:	4658      	mov	r0, fp
 801f0ce:	f7f0 f817 	bl	800f100 <Calibration_Load_2byte>
 801f0d2:	ee07 0a90 	vmov	s15, r0
 801f0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0da:	ee17 0a90 	vmov	r0, s15
 801f0de:	f7e1 fa4b 	bl	8000578 <__aeabi_f2d>
 801f0e2:	4642      	mov	r2, r8
 801f0e4:	464b      	mov	r3, r9
 801f0e6:	f7e1 fbc5 	bl	8000874 <__aeabi_ddiv>
 801f0ea:	2200      	movs	r2, #0
 801f0ec:	4b69      	ldr	r3, [pc, #420]	; (801f294 <main+0xec4>)
 801f0ee:	f7e1 f8e3 	bl	80002b8 <__aeabi_dsub>
 801f0f2:	f7e1 fd8d 	bl	8000c10 <__aeabi_d2f>
 801f0f6:	9b03      	ldr	r3, [sp, #12]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801f0f8:	2102      	movs	r1, #2
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801f0fa:	6058      	str	r0, [r3, #4]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801f0fc:	4658      	mov	r0, fp
 801f0fe:	f7ef ffff 	bl	800f100 <Calibration_Load_2byte>
 801f102:	ee07 0a90 	vmov	s15, r0
 801f106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f10a:	ee17 0a90 	vmov	r0, s15
 801f10e:	f7e1 fa33 	bl	8000578 <__aeabi_f2d>
 801f112:	4642      	mov	r2, r8
 801f114:	464b      	mov	r3, r9
 801f116:	f7e1 fbad 	bl	8000874 <__aeabi_ddiv>
 801f11a:	2200      	movs	r2, #0
 801f11c:	4b5d      	ldr	r3, [pc, #372]	; (801f294 <main+0xec4>)
 801f11e:	f7e1 f8cb 	bl	80002b8 <__aeabi_dsub>
 801f122:	f7e1 fd75 	bl	8000c10 <__aeabi_d2f>
 801f126:	9b03      	ldr	r3, [sp, #12]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801f128:	2103      	movs	r1, #3
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801f12a:	6098      	str	r0, [r3, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801f12c:	4658      	mov	r0, fp
 801f12e:	f7ef ffe7 	bl	800f100 <Calibration_Load_2byte>
 801f132:	ee07 0a90 	vmov	s15, r0
 801f136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f13a:	ee17 0a90 	vmov	r0, s15
 801f13e:	f7e1 fa1b 	bl	8000578 <__aeabi_f2d>
 801f142:	4642      	mov	r2, r8
 801f144:	464b      	mov	r3, r9
 801f146:	f7e1 fb95 	bl	8000874 <__aeabi_ddiv>
 801f14a:	4b52      	ldr	r3, [pc, #328]	; (801f294 <main+0xec4>)
 801f14c:	2200      	movs	r2, #0
 801f14e:	f7e1 f8b3 	bl	80002b8 <__aeabi_dsub>
 801f152:	f7e1 fd5d 	bl	8000c10 <__aeabi_d2f>
 801f156:	9b03      	ldr	r3, [sp, #12]
 801f158:	60d8      	str	r0, [r3, #12]
 801f15a:	9b02      	ldr	r3, [sp, #8]
 801f15c:	3310      	adds	r3, #16
 801f15e:	9302      	str	r3, [sp, #8]
 801f160:	9b04      	ldr	r3, [sp, #16]
 801f162:	3310      	adds	r3, #16
 801f164:	9304      	str	r3, [sp, #16]
 801f166:	9b03      	ldr	r3, [sp, #12]
 801f168:	3310      	adds	r3, #16
 801f16a:	9303      	str	r3, [sp, #12]
	for(uint16_t i = 0; i < 2*1024; i=i+8){
 801f16c:	4b4a      	ldr	r3, [pc, #296]	; (801f298 <main+0xec8>)
 801f16e:	429c      	cmp	r4, r3
 801f170:	f47f ad7d 	bne.w	801ec6e <main+0x89e>
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801f174:	2100      	movs	r1, #0
 801f176:	4849      	ldr	r0, [pc, #292]	; (801f29c <main+0xecc>)
 801f178:	f7ef ffc2 	bl	800f100 <Calibration_Load_2byte>
 801f17c:	4b48      	ldr	r3, [pc, #288]	; (801f2a0 <main+0xed0>)
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801f17e:	2101      	movs	r1, #1
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801f180:	8018      	strh	r0, [r3, #0]
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801f182:	4846      	ldr	r0, [pc, #280]	; (801f29c <main+0xecc>)
 801f184:	f7ef ffbc 	bl	800f100 <Calibration_Load_2byte>
 801f188:	4b46      	ldr	r3, [pc, #280]	; (801f2a4 <main+0xed4>)
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801f18a:	2100      	movs	r1, #0
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801f18c:	8018      	strh	r0, [r3, #0]
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801f18e:	4846      	ldr	r0, [pc, #280]	; (801f2a8 <main+0xed8>)
 801f190:	f7ef ffb6 	bl	800f100 <Calibration_Load_2byte>
 801f194:	4b45      	ldr	r3, [pc, #276]	; (801f2ac <main+0xedc>)
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801f196:	2100      	movs	r1, #0
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801f198:	8018      	strh	r0, [r3, #0]
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801f19a:	4845      	ldr	r0, [pc, #276]	; (801f2b0 <main+0xee0>)
 801f19c:	f7ef ffb0 	bl	800f100 <Calibration_Load_2byte>
 801f1a0:	4b44      	ldr	r3, [pc, #272]	; (801f2b4 <main+0xee4>)
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801f1a2:	2101      	movs	r1, #1
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801f1a4:	8018      	strh	r0, [r3, #0]
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801f1a6:	4842      	ldr	r0, [pc, #264]	; (801f2b0 <main+0xee0>)
 801f1a8:	f7ef ffaa 	bl	800f100 <Calibration_Load_2byte>
 801f1ac:	4b42      	ldr	r3, [pc, #264]	; (801f2b8 <main+0xee8>)
 801f1ae:	4943      	ldr	r1, [pc, #268]	; (801f2bc <main+0xeec>)
 801f1b0:	8018      	strh	r0, [r3, #0]
 801f1b2:	4b43      	ldr	r3, [pc, #268]	; (801f2c0 <main+0xef0>)
 801f1b4:	4a43      	ldr	r2, [pc, #268]	; (801f2c4 <main+0xef4>)
 801f1b6:	f8b3 e000 	ldrh.w	lr, [r3]
 801f1ba:	4b43      	ldr	r3, [pc, #268]	; (801f2c8 <main+0xef8>)
 801f1bc:	8810      	ldrh	r0, [r2, #0]
 801f1be:	f8b3 8000 	ldrh.w	r8, [r3]
 801f1c2:	880e      	ldrh	r6, [r1, #0]
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801f1c4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801f2cc <main+0xefc>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801f1c8:	eddf 6a41 	vldr	s13, [pc, #260]	; 801f2d0 <main+0xf00>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801f1cc:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801f2d4 <main+0xf04>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801f1d0:	eddf 5a41 	vldr	s11, [pc, #260]	; 801f2d8 <main+0xf08>
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801f1d4:	2300      	movs	r3, #0
 801f1d6:	461c      	mov	r4, r3
 801f1d8:	461f      	mov	r7, r3
 801f1da:	469c      	mov	ip, r3
 801f1dc:	4699      	mov	r9, r3
 801f1de:	468a      	mov	sl, r1
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801f1e0:	ecf5 7a01 	vldmia	r5!, {s15}
 801f1e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1ec:	b299      	uxth	r1, r3
 801f1ee:	d807      	bhi.n	801f200 <main+0xe30>
 801f1f0:	ed95 5a00 	vldr	s10, [r5]
 801f1f4:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801f1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1fc:	f280 80f3 	bge.w	801f3e6 <main+0x1016>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801f200:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f208:	d807      	bhi.n	801f21a <main+0xe4a>
 801f20a:	ed95 5a00 	vldr	s10, [r5]
 801f20e:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801f212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f216:	f280 80ea 	bge.w	801f3ee <main+0x101e>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801f21a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801f21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f222:	d807      	bhi.n	801f234 <main+0xe64>
 801f224:	ed95 5a00 	vldr	s10, [r5]
 801f228:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801f22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f230:	f280 80e1 	bge.w	801f3f6 <main+0x1026>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801f234:	eef4 7ae5 	vcmpe.f32	s15, s11
 801f238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f23c:	d808      	bhi.n	801f250 <main+0xe80>
 801f23e:	edd5 7a00 	vldr	s15, [r5]
			PARGraph_IR = i;
 801f242:	eef4 7a65 	vcmp.f32	s15, s11
 801f246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f24a:	bfa4      	itt	ge
 801f24c:	4608      	movge	r0, r1
 801f24e:	2401      	movge	r4, #1
 801f250:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++){
 801f252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f256:	d1c3      	bne.n	801f1e0 <main+0xe10>
 801f258:	f1b9 0f00 	cmp.w	r9, #0
 801f25c:	d002      	beq.n	801f264 <main+0xe94>
 801f25e:	4b1a      	ldr	r3, [pc, #104]	; (801f2c8 <main+0xef8>)
 801f260:	f8a3 8000 	strh.w	r8, [r3]
 801f264:	f1bc 0f00 	cmp.w	ip, #0
 801f268:	d002      	beq.n	801f270 <main+0xea0>
 801f26a:	4b15      	ldr	r3, [pc, #84]	; (801f2c0 <main+0xef0>)
 801f26c:	f8a3 e000 	strh.w	lr, [r3]
 801f270:	b10f      	cbz	r7, 801f276 <main+0xea6>
 801f272:	f8aa 6000 	strh.w	r6, [sl]
 801f276:	b104      	cbz	r4, 801f27a <main+0xeaa>
 801f278:	8010      	strh	r0, [r2, #0]
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801f27a:	4b18      	ldr	r3, [pc, #96]	; (801f2dc <main+0xf0c>)
 801f27c:	4a18      	ldr	r2, [pc, #96]	; (801f2e0 <main+0xf10>)
 801f27e:	edd3 7a00 	vldr	s15, [r3]
 801f282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f286:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801f28a:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801f28e:	8011      	strh	r1, [r2, #0]
 801f290:	e028      	b.n	801f2e4 <main+0xf14>
 801f292:	bf00      	nop
 801f294:	40490000 	.word	0x40490000
 801f298:	08100800 	.word	0x08100800
 801f29c:	0812a048 	.word	0x0812a048
 801f2a0:	20095710 	.word	0x20095710
 801f2a4:	20095724 	.word	0x20095724
 801f2a8:	0812a04c 	.word	0x0812a04c
 801f2ac:	200959a8 	.word	0x200959a8
 801f2b0:	0812a040 	.word	0x0812a040
 801f2b4:	20095714 	.word	0x20095714
 801f2b8:	20095a50 	.word	0x20095a50
 801f2bc:	20095ce4 	.word	0x20095ce4
 801f2c0:	20095b8c 	.word	0x20095b8c
 801f2c4:	20095a40 	.word	0x20095a40
 801f2c8:	20095a42 	.word	0x20095a42
 801f2cc:	43c80000 	.word	0x43c80000
 801f2d0:	43fa0000 	.word	0x43fa0000
 801f2d4:	44160000 	.word	0x44160000
 801f2d8:	442f0000 	.word	0x442f0000
 801f2dc:	20054948 	.word	0x20054948
 801f2e0:	20055948 	.word	0x20055948
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801f2e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f2e8:	ee17 1a90 	vmov	r1, s15
 801f2ec:	8051      	strh	r1, [r2, #2]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801f2ee:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 801f2f2:	edd1 7a00 	vldr	s15, [r1]
 801f2f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801f2fa:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801f2fe:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801f302:	edd3 7a00 	vldr	s15, [r3]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801f306:	8091      	strh	r1, [r2, #4]
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801f308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f30c:	ee17 3a90 	vmov	r3, s15
 801f310:	80d3      	strh	r3, [r2, #6]
	if(Mode_EL == 0){
 801f312:	4baa      	ldr	r3, [pc, #680]	; (801f5bc <main+0x11ec>)
 801f314:	781a      	ldrb	r2, [r3, #0]
 801f316:	4baa      	ldr	r3, [pc, #680]	; (801f5c0 <main+0x11f0>)
 801f318:	2a00      	cmp	r2, #0
 801f31a:	d16f      	bne.n	801f3fc <main+0x102c>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801f31c:	4aa9      	ldr	r2, [pc, #676]	; (801f5c4 <main+0x11f4>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f31e:	edd2 0a00 	vldr	s1, [r2]
 801f322:	ed93 0a00 	vldr	s0, [r3]
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801f326:	4ca8      	ldr	r4, [pc, #672]	; (801f5c8 <main+0x11f8>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f328:	f7fa fe7e 	bl	801a028 <Rabs_calc_Factor2_Settings_change>
 801f32c:	4ba7      	ldr	r3, [pc, #668]	; (801f5cc <main+0x11fc>)
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801f32e:	48a8      	ldr	r0, [pc, #672]	; (801f5d0 <main+0x1200>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f330:	ed83 0a00 	vstr	s0, [r3]
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801f334:	2103      	movs	r1, #3
 801f336:	f7ef ff07 	bl	800f148 <Calibration_Load_1byte>
 801f33a:	7020      	strb	r0, [r4, #0]
	Calculate_Data();
 801f33c:	f7fd ff52 	bl	801d1e4 <Calculate_Data>
	Get_Battery_Level();
 801f340:	f7fe f884 	bl	801d44c <Get_Battery_Level>
	HAL_Delay(1);
 801f344:	2001      	movs	r0, #1
 801f346:	f7e1 fe71 	bl	800102c <HAL_Delay>
	Image_load(TKA_LOGO_BMP, TKA_LOGO_BMP_SIZEX*TKA_LOGO_BMP_SIZEY);
 801f34a:	f64b 61e6 	movw	r1, #48870	; 0xbee6
 801f34e:	2000      	movs	r0, #0
 801f350:	f7fa fe3a 	bl	8019fc8 <Image_load>
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 801f354:	4a9f      	ldr	r2, [pc, #636]	; (801f5d4 <main+0x1204>)
 801f356:	f245 410a 	movw	r1, #21514	; 0x540a
 801f35a:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 801f35e:	f7ec ffdd 	bl	800c31c <CRC_Check>
 801f362:	4b9d      	ldr	r3, [pc, #628]	; (801f5d8 <main+0x1208>)
 801f364:	7018      	strb	r0, [r3, #0]
		BlueTooth_Module_Init();
 801f366:	f7ea fe5f 	bl	800a028 <BlueTooth_Module_Init>
		GUI_Title_Screen();
 801f36a:	f7f0 f8cd 	bl	800f508 <GUI_Title_Screen>
		HAL_Delay(2000);	
 801f36e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801f372:	f7e1 fe5b 	bl	800102c <HAL_Delay>
		usb_receive_processing();
 801f376:	f7fe fabb 	bl	801d8f0 <usb_receive_processing>
		if(Bluetooth == 0)
 801f37a:	4b98      	ldr	r3, [pc, #608]	; (801f5dc <main+0x120c>)
 801f37c:	781b      	ldrb	r3, [r3, #0]
 801f37e:	46a2      	mov	sl, r4
 801f380:	2b00      	cmp	r3, #0
 801f382:	d13d      	bne.n	801f400 <main+0x1030>
			BlueTooth_On();
 801f384:	f7ea fd32 	bl	8009dec <BlueTooth_On>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801f388:	4c95      	ldr	r4, [pc, #596]	; (801f5e0 <main+0x1210>)
			HAL_Delay(200);
 801f38a:	20c8      	movs	r0, #200	; 0xc8
 801f38c:	f7e1 fe4e 	bl	800102c <HAL_Delay>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801f390:	7823      	ldrb	r3, [r4, #0]
 801f392:	07d8      	lsls	r0, r3, #31
 801f394:	d537      	bpl.n	801f406 <main+0x1036>
 801f396:	4b93      	ldr	r3, [pc, #588]	; (801f5e4 <main+0x1214>)
 801f398:	4893      	ldr	r0, [pc, #588]	; (801f5e8 <main+0x1218>)
 801f39a:	781b      	ldrb	r3, [r3, #0]
 801f39c:	f013 0f01 	tst.w	r3, #1
 801f3a0:	bf18      	it	ne
 801f3a2:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 801f3a6:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 801f3aa:	f7fa fe0d 	bl	8019fc8 <Image_load>
		Locus.pData = (uint16_t *)bmp;
 801f3ae:	4b8f      	ldr	r3, [pc, #572]	; (801f5ec <main+0x121c>)
 801f3b0:	4a8f      	ldr	r2, [pc, #572]	; (801f5f0 <main+0x1220>)
 801f3b2:	605a      	str	r2, [r3, #4]
		Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 801f3b4:	7822      	ldrb	r2, [r4, #0]
 801f3b6:	f002 0101 	and.w	r1, r2, #1
 801f3ba:	2900      	cmp	r1, #0
 801f3bc:	bf14      	ite	ne
 801f3be:	21d8      	movne	r1, #216	; 0xd8
 801f3c0:	21fa      	moveq	r1, #250	; 0xfa
 801f3c2:	8019      	strh	r1, [r3, #0]
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801f3c4:	d12d      	bne.n	801f422 <main+0x1052>
 801f3c6:	f012 0f04 	tst.w	r2, #4
 801f3ca:	bf0c      	ite	eq
 801f3cc:	22fa      	moveq	r2, #250	; 0xfa
 801f3ce:	22ea      	movne	r2, #234	; 0xea
 801f3d0:	805a      	strh	r2, [r3, #2]
		switch(GUI_screen_state){
 801f3d2:	f89a 3000 	ldrb.w	r3, [sl]
 801f3d6:	3b01      	subs	r3, #1
 801f3d8:	2b05      	cmp	r3, #5
 801f3da:	d858      	bhi.n	801f48e <main+0x10be>
 801f3dc:	e8df f003 	tbb	[pc, r3]
 801f3e0:	453b235a 	.word	0x453b235a
 801f3e4:	514b      	.short	0x514b
			PARGraph_B = i;
 801f3e6:	4688      	mov	r8, r1
 801f3e8:	f04f 0901 	mov.w	r9, #1
 801f3ec:	e730      	b.n	801f250 <main+0xe80>
			PARGraph_G = i;
 801f3ee:	468e      	mov	lr, r1
 801f3f0:	f04f 0c01 	mov.w	ip, #1
 801f3f4:	e72c      	b.n	801f250 <main+0xe80>
			PARGraph_R = i;
 801f3f6:	460e      	mov	r6, r1
 801f3f8:	2701      	movs	r7, #1
 801f3fa:	e729      	b.n	801f250 <main+0xe80>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f3fc:	4a7d      	ldr	r2, [pc, #500]	; (801f5f4 <main+0x1224>)
 801f3fe:	e78e      	b.n	801f31e <main+0xf4e>
			BlueTooth_Off();
 801f400:	f7ea fd1c 	bl	8009e3c <BlueTooth_Off>
 801f404:	e7c0      	b.n	801f388 <main+0xfb8>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801f406:	f003 0304 	and.w	r3, r3, #4
 801f40a:	2b00      	cmp	r3, #0
 801f40c:	4b7a      	ldr	r3, [pc, #488]	; (801f5f8 <main+0x1228>)
 801f40e:	487b      	ldr	r0, [pc, #492]	; (801f5fc <main+0x122c>)
 801f410:	bf08      	it	eq
 801f412:	4618      	moveq	r0, r3
 801f414:	f24f 4324 	movw	r3, #62500	; 0xf424
 801f418:	f24e 4184 	movw	r1, #58500	; 0xe484
 801f41c:	bf08      	it	eq
 801f41e:	4619      	moveq	r1, r3
 801f420:	e7c3      	b.n	801f3aa <main+0xfda>
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801f422:	22fa      	movs	r2, #250	; 0xfa
 801f424:	e7d4      	b.n	801f3d0 <main+0x1000>
		case Measure2_Screen: preGUI_screen_state = Measure_Screen; GUI_Measure2_Screen();  break;
 801f426:	4b76      	ldr	r3, [pc, #472]	; (801f600 <main+0x1230>)
 801f428:	2201      	movs	r2, #1
 801f42a:	701a      	strb	r2, [r3, #0]
 801f42c:	f7f1 f9a6 	bl	801077c <GUI_Measure2_Screen>
  htim7.Instance = TIM7;
 801f430:	4c74      	ldr	r4, [pc, #464]	; (801f604 <main+0x1234>)
  htim7.Init.Prescaler = 60000;
 801f432:	4975      	ldr	r1, [pc, #468]	; (801f608 <main+0x1238>)
 801f434:	f64e 2260 	movw	r2, #60000	; 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f438:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 60000;
 801f43a:	e884 0006 	stmia.w	r4, {r1, r2}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801f43e:	4620      	mov	r0, r4
  htim7.Init.Period = 200;
 801f440:	22c8      	movs	r2, #200	; 0xc8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f442:	9319      	str	r3, [sp, #100]	; 0x64
 801f444:	931a      	str	r3, [sp, #104]	; 0x68
 801f446:	931b      	str	r3, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f448:	60a3      	str	r3, [r4, #8]
  htim7.Init.Period = 200;
 801f44a:	60e2      	str	r2, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801f44c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801f44e:	f7e6 fd2d 	bl	8005eac <HAL_TIM_Base_Init>
 801f452:	b310      	cbz	r0, 801f49a <main+0x10ca>
 801f454:	e7fe      	b.n	801f454 <main+0x1084>
		case Measure3_Screen: preGUI_screen_state = Measure2_Screen; GUI_Measure_Screen(); GUI_Measure2_Screen();GUI_Measure3_Screen();  break;
 801f456:	4b6a      	ldr	r3, [pc, #424]	; (801f600 <main+0x1230>)
 801f458:	2202      	movs	r2, #2
 801f45a:	701a      	strb	r2, [r3, #0]
 801f45c:	f7f1 f960 	bl	8010720 <GUI_Measure_Screen>
 801f460:	f7f1 f98c 	bl	801077c <GUI_Measure2_Screen>
 801f464:	f7f1 f9c2 	bl	80107ec <GUI_Measure3_Screen>
 801f468:	e7e2      	b.n	801f430 <main+0x1060>
		case Graph_Screen: preGUI_screen_state = Measure_Screen; GUI_Graph_Screen(); break;
 801f46a:	4b65      	ldr	r3, [pc, #404]	; (801f600 <main+0x1230>)
 801f46c:	2201      	movs	r2, #1
 801f46e:	701a      	strb	r2, [r3, #0]
 801f470:	f7f0 ffba 	bl	80103e8 <GUI_Graph_Screen>
 801f474:	e7dc      	b.n	801f430 <main+0x1060>
		case Color_Screen: preGUI_screen_state = ColorSet1_Screen; GUI_Color_Screen();  break; 
 801f476:	4b62      	ldr	r3, [pc, #392]	; (801f600 <main+0x1230>)
 801f478:	220e      	movs	r2, #14
 801f47a:	701a      	strb	r2, [r3, #0]
 801f47c:	f7f1 f9ec 	bl	8010858 <GUI_Color_Screen>
 801f480:	e7d6      	b.n	801f430 <main+0x1060>
		case Color_Rendition_Screen: preGUI_screen_state = Measure_Screen; GUI_ColorRend_Screen();	break;
 801f482:	4b5f      	ldr	r3, [pc, #380]	; (801f600 <main+0x1230>)
 801f484:	2201      	movs	r2, #1
 801f486:	701a      	strb	r2, [r3, #0]
 801f488:	f7f1 fd54 	bl	8010f34 <GUI_ColorRend_Screen>
 801f48c:	e7d0      	b.n	801f430 <main+0x1060>
		default: GUI_screen_state =  Measure_Screen; GUI_Measure_Screen();  break;
 801f48e:	2301      	movs	r3, #1
 801f490:	f88a 3000 	strb.w	r3, [sl]
 801f494:	f7f1 f944 	bl	8010720 <GUI_Measure_Screen>
 801f498:	e7ca      	b.n	801f430 <main+0x1060>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801f49a:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801f49c:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801f49e:	a919      	add	r1, sp, #100	; 0x64
 801f4a0:	4620      	mov	r0, r4
 801f4a2:	f7e6 ff83 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 801f4a6:	4607      	mov	r7, r0
 801f4a8:	b100      	cbz	r0, 801f4ac <main+0x10dc>
 801f4aa:	e7fe      	b.n	801f4aa <main+0x10da>
	HAL_Delay(1);
 801f4ac:	2001      	movs	r0, #1
 801f4ae:	f7e1 fdbd 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f4b2:	2037      	movs	r0, #55	; 0x37
 801f4b4:	f7e2 faa8 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 801f4b8:	2025      	movs	r0, #37	; 0x25
 801f4ba:	f7e2 faa5 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801f4be:	2001      	movs	r0, #1
 801f4c0:	f7e1 fdb4 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start(&htim7);
 801f4c4:	4620      	mov	r0, r4
 801f4c6:	f7e6 fba3 	bl	8005c10 <HAL_TIM_Base_Start>
	HAL_Delay(1);
 801f4ca:	2001      	movs	r0, #1
 801f4cc:	f7e1 fdae 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 801f4d0:	4620      	mov	r0, r4
 801f4d2:	f7e6 fbb7 	bl	8005c44 <HAL_TIM_Base_Start_IT>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801f4d6:	4d4d      	ldr	r5, [pc, #308]	; (801f60c <main+0x123c>)
	uint8_t exp_stable = 0, start = 1;
 801f4d8:	9702      	str	r7, [sp, #8]
 801f4da:	2301      	movs	r3, #1
	uint32_t cnt_delay = 0, scr_refresh = 0, scr_refresh_measure = 0, bat_refresh = 0;
 801f4dc:	46b8      	mov	r8, r7
 801f4de:	46b9      	mov	r9, r7
 801f4e0:	463c      	mov	r4, r7
	uint8_t exp_stable = 0, start = 1;
 801f4e2:	9303      	str	r3, [sp, #12]
	 if(send_bluetooth) 
 801f4e4:	4e4a      	ldr	r6, [pc, #296]	; (801f610 <main+0x1240>)
	 usb_receive_processing();
 801f4e6:	f7fe fa03 	bl	801d8f0 <usb_receive_processing>
	 if(send_bluetooth) 
 801f4ea:	7833      	ldrb	r3, [r6, #0]
 801f4ec:	b13b      	cbz	r3, 801f4fe <main+0x112e>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&data_bluetooth_send, 4122);
 801f4ee:	f241 021a 	movw	r2, #4122	; 0x101a
 801f4f2:	4948      	ldr	r1, [pc, #288]	; (801f614 <main+0x1244>)
 801f4f4:	4848      	ldr	r0, [pc, #288]	; (801f618 <main+0x1248>)
 801f4f6:	f7e7 f975 	bl	80067e4 <HAL_UART_Transmit_DMA>
			send_bluetooth = 0;
 801f4fa:	2300      	movs	r3, #0
 801f4fc:	7033      	strb	r3, [r6, #0]
 801f4fe:	f8df b148 	ldr.w	fp, [pc, #328]	; 801f648 <main+0x1278>
		while(start)
 801f502:	9b03      	ldr	r3, [sp, #12]
 801f504:	1c66      	adds	r6, r4, #1
 801f506:	2b00      	cmp	r3, #0
 801f508:	f040 80a0 	bne.w	801f64c <main+0x127c>
		if(!exp_set){
 801f50c:	4b43      	ldr	r3, [pc, #268]	; (801f61c <main+0x124c>)
 801f50e:	781b      	ldrb	r3, [r3, #0]
 801f510:	b99b      	cbnz	r3, 801f53a <main+0x116a>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f512:	4b43      	ldr	r3, [pc, #268]	; (801f620 <main+0x1250>)
 801f514:	4c43      	ldr	r4, [pc, #268]	; (801f624 <main+0x1254>)
 801f516:	4944      	ldr	r1, [pc, #272]	; (801f628 <main+0x1258>)
 801f518:	ed93 0a00 	vldr	s0, [r3]
 801f51c:	8820      	ldrh	r0, [r4, #0]
 801f51e:	f7fa fd87 	bl	801a030 <Rabs_calc_Factor1>
 801f522:	4b42      	ldr	r3, [pc, #264]	; (801f62c <main+0x125c>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801f524:	4929      	ldr	r1, [pc, #164]	; (801f5cc <main+0x11fc>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f526:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801f52a:	edd1 0a00 	vldr	s1, [r1]
 801f52e:	4b40      	ldr	r3, [pc, #256]	; (801f630 <main+0x1260>)
 801f530:	4a40      	ldr	r2, [pc, #256]	; (801f634 <main+0x1264>)
 801f532:	8821      	ldrh	r1, [r4, #0]
 801f534:	483c      	ldr	r0, [pc, #240]	; (801f628 <main+0x1258>)
 801f536:	f7fa fdaf 	bl	801a098 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801f53a:	f89b 3000 	ldrb.w	r3, [fp]
 801f53e:	b92b      	cbnz	r3, 801f54c <main+0x117c>
 801f540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f544:	493a      	ldr	r1, [pc, #232]	; (801f630 <main+0x1260>)
 801f546:	483c      	ldr	r0, [pc, #240]	; (801f638 <main+0x1268>)
 801f548:	f001 f84e 	bl	80205e8 <memcpy>
			exp_start = 0;
 801f54c:	4b3b      	ldr	r3, [pc, #236]	; (801f63c <main+0x126c>)
 801f54e:	2200      	movs	r2, #0
 801f550:	701a      	strb	r2, [r3, #0]
		if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen) && !pause)
 801f552:	f89a 3000 	ldrb.w	r3, [sl]
 801f556:	1e5a      	subs	r2, r3, #1
 801f558:	2a02      	cmp	r2, #2
 801f55a:	f200 80c1 	bhi.w	801f6e0 <main+0x1310>
 801f55e:	4b38      	ldr	r3, [pc, #224]	; (801f640 <main+0x1270>)
 801f560:	781b      	ldrb	r3, [r3, #0]
 801f562:	2b00      	cmp	r3, #0
 801f564:	f040 8145 	bne.w	801f7f2 <main+0x1422>
			if(!pause & !exp_set)
 801f568:	4b2c      	ldr	r3, [pc, #176]	; (801f61c <main+0x124c>)
 801f56a:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801f56c:	4634      	mov	r4, r6
			if(!pause & !exp_set)
 801f56e:	b94b      	cbnz	r3, 801f584 <main+0x11b4>
				scr_refresh_measure++;
 801f570:	f108 0801 	add.w	r8, r8, #1
				if(scr_refresh_measure == 28 )
 801f574:	f1b8 0f1c 	cmp.w	r8, #28
 801f578:	d104      	bne.n	801f584 <main+0x11b4>
 801f57a:	9304      	str	r3, [sp, #16]
					Calculate_Data();
 801f57c:	f7fd fe32 	bl	801d1e4 <Calculate_Data>
					scr_refresh_measure = 0;
 801f580:	9b04      	ldr	r3, [sp, #16]
 801f582:	4698      	mov	r8, r3
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 801f584:	2e28      	cmp	r6, #40	; 0x28
 801f586:	f240 80d7 	bls.w	801f738 <main+0x1368>
 801f58a:	782b      	ldrb	r3, [r5, #0]
 801f58c:	2b05      	cmp	r3, #5
 801f58e:	d90c      	bls.n	801f5aa <main+0x11da>
 801f590:	2e46      	cmp	r6, #70	; 0x46
 801f592:	f240 80d1 	bls.w	801f738 <main+0x1368>
 801f596:	782b      	ldrb	r3, [r5, #0]
 801f598:	2b05      	cmp	r3, #5
 801f59a:	d902      	bls.n	801f5a2 <main+0x11d2>
 801f59c:	782b      	ldrb	r3, [r5, #0]
 801f59e:	2b07      	cmp	r3, #7
 801f5a0:	d903      	bls.n	801f5aa <main+0x11da>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f5a2:	782b      	ldrb	r3, [r5, #0]
 801f5a4:	2b07      	cmp	r3, #7
 801f5a6:	f240 80c7 	bls.w	801f738 <main+0x1368>
								auto_exposure();
 801f5aa:	f7fe fc53 	bl	801de54 <auto_exposure>
								max_el = 0;
 801f5ae:	4b25      	ldr	r3, [pc, #148]	; (801f644 <main+0x1274>)
 801f5b0:	2400      	movs	r4, #0
 801f5b2:	801c      	strh	r4, [r3, #0]
 801f5b4:	e0c0      	b.n	801f738 <main+0x1368>
        	bat_refresh = 0;
 801f5b6:	4607      	mov	r7, r0
 801f5b8:	e794      	b.n	801f4e4 <main+0x1114>
 801f5ba:	bf00      	nop
 801f5bc:	20000ebc 	.word	0x20000ebc
 801f5c0:	20009d2c 	.word	0x20009d2c
 801f5c4:	20009d28 	.word	0x20009d28
 801f5c8:	20005701 	.word	0x20005701
 801f5cc:	20009d34 	.word	0x20009d34
 801f5d0:	0812c020 	.word	0x0812c020
 801f5d4:	0812a050 	.word	0x0812a050
 801f5d8:	20095712 	.word	0x20095712
 801f5dc:	20090aba 	.word	0x20090aba
 801f5e0:	200056ff 	.word	0x200056ff
 801f5e4:	20005704 	.word	0x20005704
 801f5e8:	00051d00 	.word	0x00051d00
 801f5ec:	20091050 	.word	0x20091050
 801f5f0:	20055954 	.word	0x20055954
 801f5f4:	20009d24 	.word	0x20009d24
 801f5f8:	00018100 	.word	0x00018100
 801f5fc:	0006ca00 	.word	0x0006ca00
 801f600:	2000022a 	.word	0x2000022a
 801f604:	20095ca4 	.word	0x20095ca4
 801f608:	40001400 	.word	0x40001400
 801f60c:	200905b6 	.word	0x200905b6
 801f610:	200905d0 	.word	0x200905d0
 801f614:	2008f59c 	.word	0x2008f59c
 801f618:	20095a54 	.word	0x20095a54
 801f61c:	20000ec0 	.word	0x20000ec0
 801f620:	2005193c 	.word	0x2005193c
 801f624:	20009d22 	.word	0x20009d22
 801f628:	2000e53c 	.word	0x2000e53c
 801f62c:	20009d30 	.word	0x20009d30
 801f630:	2000c53c 	.word	0x2000c53c
 801f634:	20051940 	.word	0x20051940
 801f638:	2000d53c 	.word	0x2000d53c
 801f63c:	20000ec1 	.word	0x20000ec1
 801f640:	20005728 	.word	0x20005728
 801f644:	200905c4 	.word	0x200905c4
 801f648:	20055952 	.word	0x20055952
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f64c:	4b76      	ldr	r3, [pc, #472]	; (801f828 <main+0x1458>)
 801f64e:	4c77      	ldr	r4, [pc, #476]	; (801f82c <main+0x145c>)
 801f650:	4977      	ldr	r1, [pc, #476]	; (801f830 <main+0x1460>)
 801f652:	ed93 0a00 	vldr	s0, [r3]
 801f656:	8820      	ldrh	r0, [r4, #0]
 801f658:	f7fa fcea 	bl	801a030 <Rabs_calc_Factor1>
 801f65c:	4b75      	ldr	r3, [pc, #468]	; (801f834 <main+0x1464>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801f65e:	4976      	ldr	r1, [pc, #472]	; (801f838 <main+0x1468>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f660:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801f664:	edd1 0a00 	vldr	s1, [r1]
 801f668:	4b74      	ldr	r3, [pc, #464]	; (801f83c <main+0x146c>)
 801f66a:	4a75      	ldr	r2, [pc, #468]	; (801f840 <main+0x1470>)
 801f66c:	8821      	ldrh	r1, [r4, #0]
 801f66e:	4870      	ldr	r0, [pc, #448]	; (801f830 <main+0x1460>)
 801f670:	f7fa fd12 	bl	801a098 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801f674:	f89b 3000 	ldrb.w	r3, [fp]
 801f678:	b92b      	cbnz	r3, 801f686 <main+0x12b6>
 801f67a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f67e:	496f      	ldr	r1, [pc, #444]	; (801f83c <main+0x146c>)
 801f680:	4870      	ldr	r0, [pc, #448]	; (801f844 <main+0x1474>)
 801f682:	f000 ffb1 	bl	80205e8 <memcpy>
			Calculate_Data();
 801f686:	f7fd fdad 	bl	801d1e4 <Calculate_Data>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801f68a:	2e14      	cmp	r6, #20
			cnt_delay++;
 801f68c:	4634      	mov	r4, r6
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801f68e:	f67f af38 	bls.w	801f502 <main+0x1132>
 801f692:	782b      	ldrb	r3, [r5, #0]
 801f694:	2b05      	cmp	r3, #5
 801f696:	d910      	bls.n	801f6ba <main+0x12ea>
 801f698:	2e32      	cmp	r6, #50	; 0x32
 801f69a:	f67f af32 	bls.w	801f502 <main+0x1132>
 801f69e:	782b      	ldrb	r3, [r5, #0]
 801f6a0:	2b05      	cmp	r3, #5
 801f6a2:	d902      	bls.n	801f6aa <main+0x12da>
 801f6a4:	782b      	ldrb	r3, [r5, #0]
 801f6a6:	2b07      	cmp	r3, #7
 801f6a8:	d907      	bls.n	801f6ba <main+0x12ea>
 801f6aa:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
 801f6ae:	f67f af28 	bls.w	801f502 <main+0x1132>
 801f6b2:	782b      	ldrb	r3, [r5, #0]
 801f6b4:	2b07      	cmp	r3, #7
 801f6b6:	f67f af24 	bls.w	801f502 <main+0x1132>
								auto_exposure();
 801f6ba:	f7fe fbcb 	bl	801de54 <auto_exposure>
								max_el = 0;
 801f6be:	4b62      	ldr	r3, [pc, #392]	; (801f848 <main+0x1478>)
 801f6c0:	2400      	movs	r4, #0
 801f6c2:	801c      	strh	r4, [r3, #0]
								exp_stable = exp_stable+1;
 801f6c4:	9b02      	ldr	r3, [sp, #8]
 801f6c6:	3301      	adds	r3, #1
 801f6c8:	b2db      	uxtb	r3, r3
 801f6ca:	9302      	str	r3, [sp, #8]
								exp_start = 1;
 801f6cc:	4b5f      	ldr	r3, [pc, #380]	; (801f84c <main+0x147c>)
 801f6ce:	2201      	movs	r2, #1
 801f6d0:	701a      	strb	r2, [r3, #0]
 801f6d2:	9b02      	ldr	r3, [sp, #8]
 801f6d4:	2b0a      	cmp	r3, #10
 801f6d6:	bf8c      	ite	hi
 801f6d8:	2300      	movhi	r3, #0
 801f6da:	2301      	movls	r3, #1
 801f6dc:	9303      	str	r3, [sp, #12]
 801f6de:	e710      	b.n	801f502 <main+0x1132>
		else	if((GUI_screen_state == Color_Screen) && !pause)
 801f6e0:	2b05      	cmp	r3, #5
 801f6e2:	f040 8086 	bne.w	801f7f2 <main+0x1422>
 801f6e6:	4b5a      	ldr	r3, [pc, #360]	; (801f850 <main+0x1480>)
 801f6e8:	781b      	ldrb	r3, [r3, #0]
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	f040 8081 	bne.w	801f7f2 <main+0x1422>
			if(!pause & !exp_set)
 801f6f0:	4b58      	ldr	r3, [pc, #352]	; (801f854 <main+0x1484>)
 801f6f2:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801f6f4:	4634      	mov	r4, r6
			if(!pause & !exp_set)
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	f040 8091 	bne.w	801f81e <main+0x144e>
				scr_refresh_measure++;
 801f6fc:	f108 0801 	add.w	r8, r8, #1
				if(scr_refresh_measure == 28 )
 801f700:	f1b8 0f1c 	cmp.w	r8, #28
 801f704:	f040 808b 	bne.w	801f81e <main+0x144e>
 801f708:	9304      	str	r3, [sp, #16]
					Calculate_Data();
 801f70a:	f7fd fd6b 	bl	801d1e4 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801f70e:	9b04      	ldr	r3, [sp, #16]
 801f710:	2e28      	cmp	r6, #40	; 0x28
					scr_refresh_measure = 0;
 801f712:	4698      	mov	r8, r3
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801f714:	d910      	bls.n	801f738 <main+0x1368>
 801f716:	782b      	ldrb	r3, [r5, #0]
 801f718:	2b05      	cmp	r3, #5
 801f71a:	f67f af46 	bls.w	801f5aa <main+0x11da>
 801f71e:	2e46      	cmp	r6, #70	; 0x46
 801f720:	d90a      	bls.n	801f738 <main+0x1368>
 801f722:	782b      	ldrb	r3, [r5, #0]
 801f724:	2b05      	cmp	r3, #5
 801f726:	d903      	bls.n	801f730 <main+0x1360>
 801f728:	782b      	ldrb	r3, [r5, #0]
 801f72a:	2b07      	cmp	r3, #7
 801f72c:	f67f af3d 	bls.w	801f5aa <main+0x11da>
 801f730:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f734:	f63f af35 	bhi.w	801f5a2 <main+0x11d2>
        if(GUI_screen_state == Graph_Screen)
 801f738:	f89a 3000 	ldrb.w	r3, [sl]
 801f73c:	2b04      	cmp	r3, #4
 801f73e:	d171      	bne.n	801f824 <main+0x1454>
            scr_refresh++;
 801f740:	f109 0901 	add.w	r9, r9, #1
            if(scr_refresh == 40 ){
 801f744:	f1b9 0f28 	cmp.w	r9, #40	; 0x28
 801f748:	d12f      	bne.n	801f7aa <main+0x13da>
							block_graph = 1;
 801f74a:	2301      	movs	r3, #1
 801f74c:	f88b 3000 	strb.w	r3, [fp]
								if(preGUI_screen_state == Graph_Screen && Rotation_Screen_Spectral_Old3 == Rotation_Screen_Spectral){ Refresh_screen_Graph(20, 20, Line_Rabs_buff_graph2, Rotation_Screen_Spectral_Old3);}
 801f750:	4b41      	ldr	r3, [pc, #260]	; (801f858 <main+0x1488>)
 801f752:	4e42      	ldr	r6, [pc, #264]	; (801f85c <main+0x148c>)
 801f754:	781b      	ldrb	r3, [r3, #0]
 801f756:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801f870 <main+0x14a0>
 801f75a:	2b04      	cmp	r3, #4
 801f75c:	d109      	bne.n	801f772 <main+0x13a2>
 801f75e:	7832      	ldrb	r2, [r6, #0]
 801f760:	f899 3000 	ldrb.w	r3, [r9]
 801f764:	4293      	cmp	r3, r2
 801f766:	d104      	bne.n	801f772 <main+0x13a2>
 801f768:	2114      	movs	r1, #20
 801f76a:	4a3d      	ldr	r2, [pc, #244]	; (801f860 <main+0x1490>)
 801f76c:	4608      	mov	r0, r1
 801f76e:	f7fc fc1b 	bl	801bfa8 <Refresh_screen_Graph>
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801f772:	f899 1000 	ldrb.w	r1, [r9]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801f776:	4833      	ldr	r0, [pc, #204]	; (801f844 <main+0x1474>)
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801f778:	7031      	strb	r1, [r6, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801f77a:	f7fa fcef 	bl	801a15c <Rabs_find_MAX>
 801f77e:	4b39      	ldr	r3, [pc, #228]	; (801f864 <main+0x1494>)
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801f780:	4930      	ldr	r1, [pc, #192]	; (801f844 <main+0x1474>)
 801f782:	7830      	ldrb	r0, [r6, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801f784:	ed83 0a00 	vstr	s0, [r3]
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801f788:	f7fc fbbc 	bl	801bf04 <Rabs_graph_to_display>
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801f78c:	7833      	ldrb	r3, [r6, #0]
 801f78e:	9300      	str	r3, [sp, #0]
 801f790:	2114      	movs	r1, #20
 801f792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f796:	4a32      	ldr	r2, [pc, #200]	; (801f860 <main+0x1490>)
 801f798:	4608      	mov	r0, r1
								block_graph = 0;
 801f79a:	f04f 0900 	mov.w	r9, #0
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801f79e:	f7fc f9f7 	bl	801bb90 <Spectral_DrawGraph_Line2>
								block_graph = 0;
 801f7a2:	f88b 9000 	strb.w	r9, [fp]
								GUI_SignalLevel();
 801f7a6:	f7f0 ff59 	bl	801065c <GUI_SignalLevel>
        bat_refresh++;
 801f7aa:	3701      	adds	r7, #1
        GUI_Display_Refresh();
 801f7ac:	f7f1 fc60 	bl	8011070 <GUI_Display_Refresh>
        if (bat_refresh == 1000)
 801f7b0:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 801f7b4:	f47f ae96 	bne.w	801f4e4 <main+0x1114>
        	if(percentage_charge < percentage_charge_prev)
 801f7b8:	4f2b      	ldr	r7, [pc, #172]	; (801f868 <main+0x1498>)
 801f7ba:	4e2c      	ldr	r6, [pc, #176]	; (801f86c <main+0x149c>)
        	Get_Battery_Level();
 801f7bc:	f7fd fe46 	bl	801d44c <Get_Battery_Level>
        	if(percentage_charge < percentage_charge_prev)
 801f7c0:	ed97 0b00 	vldr	d0, [r7]
 801f7c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f7c8:	ec51 0b10 	vmov	r0, r1, d0
 801f7cc:	ed8d 0b04 	vstr	d0, [sp, #16]
 801f7d0:	f7e1 f998 	bl	8000b04 <__aeabi_dcmplt>
 801f7d4:	ed9d 0b04 	vldr	d0, [sp, #16]
 801f7d8:	2800      	cmp	r0, #0
 801f7da:	f43f aeec 	beq.w	801f5b6 <main+0x11e6>
        		GUI_Battery_Level(0, 0, percentage_charge);
 801f7de:	2100      	movs	r1, #0
 801f7e0:	4608      	mov	r0, r1
 801f7e2:	f7f6 fd8d 	bl	8016300 <GUI_Battery_Level>
        		percentage_charge_prev = percentage_charge;
 801f7e6:	e9d7 2300 	ldrd	r2, r3, [r7]
        	bat_refresh = 0;
 801f7ea:	2700      	movs	r7, #0
        		percentage_charge_prev = percentage_charge;
 801f7ec:	e9c6 2300 	strd	r2, r3, [r6]
 801f7f0:	e678      	b.n	801f4e4 <main+0x1114>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f7f2:	2efa      	cmp	r6, #250	; 0xfa
				cnt_delay++;
 801f7f4:	4634      	mov	r4, r6
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f7f6:	d99f      	bls.n	801f738 <main+0x1368>
 801f7f8:	782b      	ldrb	r3, [r5, #0]
 801f7fa:	2b05      	cmp	r3, #5
 801f7fc:	f67f aed5 	bls.w	801f5aa <main+0x11da>
 801f800:	f240 33b6 	movw	r3, #950	; 0x3b6
 801f804:	429e      	cmp	r6, r3
 801f806:	d997      	bls.n	801f738 <main+0x1368>
 801f808:	782b      	ldrb	r3, [r5, #0]
 801f80a:	2b05      	cmp	r3, #5
 801f80c:	d903      	bls.n	801f816 <main+0x1446>
 801f80e:	782b      	ldrb	r3, [r5, #0]
 801f810:	2b07      	cmp	r3, #7
 801f812:	f67f aeca 	bls.w	801f5aa <main+0x11da>
 801f816:	f240 53aa 	movw	r3, #1450	; 0x5aa
 801f81a:	429e      	cmp	r6, r3
 801f81c:	e78a      	b.n	801f734 <main+0x1364>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801f81e:	2e28      	cmp	r6, #40	; 0x28
 801f820:	f63f af79 	bhi.w	801f716 <main+0x1346>
        } else{__asm("nop");}
 801f824:	bf00      	nop
 801f826:	e7c0      	b.n	801f7aa <main+0x13da>
 801f828:	2005193c 	.word	0x2005193c
 801f82c:	20009d22 	.word	0x20009d22
 801f830:	2000e53c 	.word	0x2000e53c
 801f834:	20009d30 	.word	0x20009d30
 801f838:	20009d34 	.word	0x20009d34
 801f83c:	2000c53c 	.word	0x2000c53c
 801f840:	20051940 	.word	0x20051940
 801f844:	2000d53c 	.word	0x2000d53c
 801f848:	200905c4 	.word	0x200905c4
 801f84c:	20000ec1 	.word	0x20000ec1
 801f850:	20005728 	.word	0x20005728
 801f854:	20000ec0 	.word	0x20000ec0
 801f858:	2000022a 	.word	0x2000022a
 801f85c:	20000ebd 	.word	0x20000ebd
 801f860:	20009a2e 	.word	0x20009a2e
 801f864:	20095ae0 	.word	0x20095ae0
 801f868:	200905c8 	.word	0x200905c8
 801f86c:	20000ec8 	.word	0x20000ec8
 801f870:	2000570a 	.word	0x2000570a

0801f874 <_Error_Handler>:

}

void _Error_Handler(char *file, int line)
{
 801f874:	e7fe      	b.n	801f874 <_Error_Handler>
	...

0801f878 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 801f878:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 801f87a:	4c06      	ldr	r4, [pc, #24]	; (801f894 <SD_CheckStatus.isra.0+0x1c>)
 801f87c:	2301      	movs	r3, #1
 801f87e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801f880:	f7fc fdf4 	bl	801c46c <BSP_SD_GetCardState>
 801f884:	4623      	mov	r3, r4
 801f886:	b918      	cbnz	r0, 801f890 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 801f888:	7822      	ldrb	r2, [r4, #0]
 801f88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f88e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 801f890:	7818      	ldrb	r0, [r3, #0]
}
 801f892:	bd10      	pop	{r4, pc}
 801f894:	20000ed0 	.word	0x20000ed0

0801f898 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801f898:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801f89a:	4c05      	ldr	r4, [pc, #20]	; (801f8b0 <SD_initialize+0x18>)
 801f89c:	2301      	movs	r3, #1
 801f89e:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801f8a0:	f7fc fdac 	bl	801c3fc <BSP_SD_Init>
 801f8a4:	b910      	cbnz	r0, 801f8ac <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 801f8a6:	f7ff ffe7 	bl	801f878 <SD_CheckStatus.isra.0>
 801f8aa:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 801f8ac:	7820      	ldrb	r0, [r4, #0]
}
 801f8ae:	bd10      	pop	{r4, pc}
 801f8b0:	20000ed0 	.word	0x20000ed0

0801f8b4 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 801f8b4:	f7ff bfe0 	b.w	801f878 <SD_CheckStatus.isra.0>

0801f8b8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801f8b8:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 801f8ba:	4c16      	ldr	r4, [pc, #88]	; (801f914 <SD_read+0x5c>)
{
 801f8bc:	4608      	mov	r0, r1
 801f8be:	4611      	mov	r1, r2
  ReadStatus = 0;
 801f8c0:	2200      	movs	r2, #0
 801f8c2:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801f8c4:	461a      	mov	r2, r3
 801f8c6:	f7fc fdb5 	bl	801c434 <BSP_SD_ReadBlocks_DMA>
 801f8ca:	b108      	cbz	r0, 801f8d0 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 801f8cc:	2001      	movs	r0, #1
 801f8ce:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 801f8d0:	f7e1 fba6 	bl	8001020 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f8d4:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801f8d8:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f8da:	6823      	ldr	r3, [r4, #0]
 801f8dc:	b19b      	cbz	r3, 801f906 <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 801f8de:	6823      	ldr	r3, [r4, #0]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	d0f3      	beq.n	801f8cc <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 801f8e4:	2300      	movs	r3, #0
 801f8e6:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801f8e8:	f7e1 fb9a 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801f8ec:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801f8f0:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801f8f2:	f7e1 fb95 	bl	8001020 <HAL_GetTick>
 801f8f6:	1b40      	subs	r0, r0, r5
 801f8f8:	42a0      	cmp	r0, r4
 801f8fa:	d8e7      	bhi.n	801f8cc <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801f8fc:	f7fc fdb6 	bl	801c46c <BSP_SD_GetCardState>
 801f900:	2800      	cmp	r0, #0
 801f902:	d1f6      	bne.n	801f8f2 <SD_read+0x3a>
      }
    }
  }

  return res;
}
 801f904:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f906:	f7e1 fb8b 	bl	8001020 <HAL_GetTick>
 801f90a:	1b80      	subs	r0, r0, r6
 801f90c:	42a8      	cmp	r0, r5
 801f90e:	d9e4      	bls.n	801f8da <SD_read+0x22>
 801f910:	e7e5      	b.n	801f8de <SD_read+0x26>
 801f912:	bf00      	nop
 801f914:	20090610 	.word	0x20090610

0801f918 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801f918:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 801f91a:	4c16      	ldr	r4, [pc, #88]	; (801f974 <SD_write+0x5c>)
{
 801f91c:	4608      	mov	r0, r1
 801f91e:	4611      	mov	r1, r2
  WriteStatus = 0;
 801f920:	2200      	movs	r2, #0
 801f922:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801f924:	461a      	mov	r2, r3
 801f926:	f7fc fd93 	bl	801c450 <BSP_SD_WriteBlocks_DMA>
 801f92a:	b108      	cbz	r0, 801f930 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 801f92c:	2001      	movs	r0, #1
 801f92e:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 801f930:	f7e1 fb76 	bl	8001020 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f934:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801f938:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f93a:	6823      	ldr	r3, [r4, #0]
 801f93c:	b19b      	cbz	r3, 801f966 <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 801f93e:	6823      	ldr	r3, [r4, #0]
 801f940:	2b00      	cmp	r3, #0
 801f942:	d0f3      	beq.n	801f92c <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 801f944:	2300      	movs	r3, #0
 801f946:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801f948:	f7e1 fb6a 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801f94c:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801f950:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801f952:	f7e1 fb65 	bl	8001020 <HAL_GetTick>
 801f956:	1b40      	subs	r0, r0, r5
 801f958:	42a0      	cmp	r0, r4
 801f95a:	d8e7      	bhi.n	801f92c <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801f95c:	f7fc fd86 	bl	801c46c <BSP_SD_GetCardState>
 801f960:	2800      	cmp	r0, #0
 801f962:	d1f6      	bne.n	801f952 <SD_write+0x3a>
      }
    }
  }

  return res;
}
 801f964:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f966:	f7e1 fb5b 	bl	8001020 <HAL_GetTick>
 801f96a:	1b80      	subs	r0, r0, r6
 801f96c:	42a8      	cmp	r0, r5
 801f96e:	d9e4      	bls.n	801f93a <SD_write+0x22>
 801f970:	e7e5      	b.n	801f93e <SD_write+0x26>
 801f972:	bf00      	nop
 801f974:	20090614 	.word	0x20090614

0801f978 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801f978:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801f97a:	4b12      	ldr	r3, [pc, #72]	; (801f9c4 <SD_ioctl+0x4c>)
 801f97c:	781b      	ldrb	r3, [r3, #0]
 801f97e:	07db      	lsls	r3, r3, #31
{
 801f980:	b08a      	sub	sp, #40	; 0x28
 801f982:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801f984:	d41b      	bmi.n	801f9be <SD_ioctl+0x46>

  switch (cmd)
 801f986:	2903      	cmp	r1, #3
 801f988:	d803      	bhi.n	801f992 <SD_ioctl+0x1a>
 801f98a:	e8df f001 	tbb	[pc, r1]
 801f98e:	0510      	.short	0x0510
 801f990:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 801f992:	2004      	movs	r0, #4
  }

  return res;
}
 801f994:	b00a      	add	sp, #40	; 0x28
 801f996:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801f998:	a801      	add	r0, sp, #4
 801f99a:	f7fc fd71 	bl	801c480 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801f99e:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801f9a0:	6023      	str	r3, [r4, #0]
 801f9a2:	e004      	b.n	801f9ae <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 801f9a4:	a801      	add	r0, sp, #4
 801f9a6:	f7fc fd6b 	bl	801c480 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801f9aa:	9b08      	ldr	r3, [sp, #32]
 801f9ac:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 801f9ae:	2000      	movs	r0, #0
 801f9b0:	e7f0      	b.n	801f994 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 801f9b2:	a801      	add	r0, sp, #4
 801f9b4:	f7fc fd64 	bl	801c480 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801f9b8:	9b08      	ldr	r3, [sp, #32]
 801f9ba:	0a5b      	lsrs	r3, r3, #9
 801f9bc:	e7f0      	b.n	801f9a0 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801f9be:	2003      	movs	r0, #3
 801f9c0:	e7e8      	b.n	801f994 <SD_ioctl+0x1c>
 801f9c2:	bf00      	nop
 801f9c4:	20000ed0 	.word	0x20000ed0

0801f9c8 <HAL_MspInit>:
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801f9c8:	4b21      	ldr	r3, [pc, #132]	; (801fa50 <HAL_MspInit+0x88>)
{
 801f9ca:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801f9cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f9ce:	f042 0201 	orr.w	r2, r2, #1
 801f9d2:	661a      	str	r2, [r3, #96]	; 0x60
 801f9d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f9d6:	f002 0201 	and.w	r2, r2, #1
 801f9da:	9200      	str	r2, [sp, #0]
 801f9dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801f9de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f9e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801f9e4:	659a      	str	r2, [r3, #88]	; 0x58
 801f9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f9e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f9ec:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801f9ee:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 801f9f0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801f9f2:	f7e1 ffc3 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 801f9f6:	2200      	movs	r2, #0
 801f9f8:	4611      	mov	r1, r2
 801f9fa:	f06f 000b 	mvn.w	r0, #11
 801f9fe:	f7e1 ffcf 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 801fa02:	2200      	movs	r2, #0
 801fa04:	4611      	mov	r1, r2
 801fa06:	f06f 000a 	mvn.w	r0, #10
 801fa0a:	f7e1 ffc9 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801fa0e:	2200      	movs	r2, #0
 801fa10:	4611      	mov	r1, r2
 801fa12:	f06f 0009 	mvn.w	r0, #9
 801fa16:	f7e1 ffc3 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801fa1a:	2200      	movs	r2, #0
 801fa1c:	4611      	mov	r1, r2
 801fa1e:	f06f 0004 	mvn.w	r0, #4
 801fa22:	f7e1 ffbd 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 801fa26:	2200      	movs	r2, #0
 801fa28:	4611      	mov	r1, r2
 801fa2a:	f06f 0003 	mvn.w	r0, #3
 801fa2e:	f7e1 ffb7 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 801fa32:	2200      	movs	r2, #0
 801fa34:	4611      	mov	r1, r2
 801fa36:	f06f 0001 	mvn.w	r0, #1
 801fa3a:	f7e1 ffb1 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801fa3e:	2200      	movs	r2, #0
 801fa40:	4611      	mov	r1, r2
 801fa42:	f04f 30ff 	mov.w	r0, #4294967295
 801fa46:	f7e1 ffab 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801fa4a:	b003      	add	sp, #12
 801fa4c:	f85d fb04 	ldr.w	pc, [sp], #4
 801fa50:	40021000 	.word	0x40021000

0801fa54 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 801fa54:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 801fa56:	6802      	ldr	r2, [r0, #0]
 801fa58:	4b31      	ldr	r3, [pc, #196]	; (801fb20 <HAL_LTDC_MspInit+0xcc>)
 801fa5a:	429a      	cmp	r2, r3
{
 801fa5c:	b08a      	sub	sp, #40	; 0x28
  if(hltdc->Instance==LTDC)
 801fa5e:	d15d      	bne.n	801fb1c <HAL_LTDC_MspInit+0xc8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801fa60:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fa64:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 801fa66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801fa68:	482e      	ldr	r0, [pc, #184]	; (801fb24 <HAL_LTDC_MspInit+0xd0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 801fa6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801fa6e:	661a      	str	r2, [r3, #96]	; 0x60
 801fa70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fa72:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801fa76:	9200      	str	r2, [sp, #0]
 801fa78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801fa7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa7c:	f042 0210 	orr.w	r2, r2, #16
 801fa80:	64da      	str	r2, [r3, #76]	; 0x4c
 801fa82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa84:	f002 0210 	and.w	r2, r2, #16
 801fa88:	9201      	str	r2, [sp, #4]
 801fa8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801fa8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa8e:	f042 0202 	orr.w	r2, r2, #2
 801fa92:	64da      	str	r2, [r3, #76]	; 0x4c
 801fa94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa96:	f002 0202 	and.w	r2, r2, #2
 801fa9a:	9202      	str	r2, [sp, #8]
 801fa9c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801fa9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801faa0:	f042 0220 	orr.w	r2, r2, #32
 801faa4:	64da      	str	r2, [r3, #76]	; 0x4c
 801faa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801faa8:	f002 0220 	and.w	r2, r2, #32
 801faac:	9203      	str	r2, [sp, #12]
 801faae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801fab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fab2:	f042 0208 	orr.w	r2, r2, #8
 801fab6:	64da      	str	r2, [r3, #76]	; 0x4c
 801fab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801faba:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801fabc:	f003 0308 	and.w	r3, r3, #8
 801fac0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fac2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801fac4:	260b      	movs	r6, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801fac6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fac8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801faca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801face:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801fad0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fad2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801fad4:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801fad6:	f7e2 fc0f 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fada:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801fadc:	a905      	add	r1, sp, #20
 801fade:	4812      	ldr	r0, [pc, #72]	; (801fb28 <HAL_LTDC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fae0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fae2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fae4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fae6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801fae8:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801faea:	f7e2 fc05 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801faee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801faf2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801faf4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801faf6:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801faf8:	480c      	ldr	r0, [pc, #48]	; (801fb2c <HAL_LTDC_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801fafa:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fafc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fafe:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fb00:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fb02:	f7e2 fbf9 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801fb06:	f64d 730b 	movw	r3, #57099	; 0xdf0b
                          |GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801fb0a:	a905      	add	r1, sp, #20
 801fb0c:	4808      	ldr	r0, [pc, #32]	; (801fb30 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801fb0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fb10:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fb12:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fb14:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801fb16:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801fb18:	f7e2 fbee 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801fb1c:	b00a      	add	sp, #40	; 0x28
 801fb1e:	bd70      	pop	{r4, r5, r6, pc}
 801fb20:	40016800 	.word	0x40016800
 801fb24:	48001000 	.word	0x48001000
 801fb28:	48000400 	.word	0x48000400
 801fb2c:	48001400 	.word	0x48001400
 801fb30:	48000c00 	.word	0x48000c00

0801fb34 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801fb34:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 801fb36:	6802      	ldr	r2, [r0, #0]
 801fb38:	4b13      	ldr	r3, [pc, #76]	; (801fb88 <HAL_SPI_MspInit+0x54>)
 801fb3a:	429a      	cmp	r2, r3
{
 801fb3c:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 801fb3e:	d121      	bne.n	801fb84 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801fb40:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fb44:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 801fb46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fb48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801fb4c:	661a      	str	r2, [r3, #96]	; 0x60
 801fb4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fb50:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 801fb52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801fb56:	9300      	str	r3, [sp, #0]
 801fb58:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 801fb5a:	2342      	movs	r3, #66	; 0x42
 801fb5c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fb5e:	2302      	movs	r3, #2
 801fb60:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fb62:	2303      	movs	r3, #3
 801fb64:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fb66:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801fb68:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fb6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801fb6e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fb70:	f7e2 fbc2 	bl	80022f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 801fb74:	2023      	movs	r0, #35	; 0x23
 801fb76:	4622      	mov	r2, r4
 801fb78:	4621      	mov	r1, r4
 801fb7a:	f7e1 ff11 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 801fb7e:	2023      	movs	r0, #35	; 0x23
 801fb80:	f7e1 ff42 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 801fb84:	b006      	add	sp, #24
 801fb86:	bd10      	pop	{r4, pc}
 801fb88:	40013000 	.word	0x40013000

0801fb8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801fb8c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801fb8e:	2214      	movs	r2, #20
{
 801fb90:	b08a      	sub	sp, #40	; 0x28
 801fb92:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801fb94:	2100      	movs	r1, #0
 801fb96:	eb0d 0002 	add.w	r0, sp, r2
 801fb9a:	f000 fd30 	bl	80205fe <memset>
  if(huart->Instance==LPUART1)
 801fb9e:	6823      	ldr	r3, [r4, #0]
 801fba0:	4a24      	ldr	r2, [pc, #144]	; (801fc34 <HAL_UART_MspInit+0xa8>)
 801fba2:	4293      	cmp	r3, r2
 801fba4:	d11f      	bne.n	801fbe6 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801fba6:	4b24      	ldr	r3, [pc, #144]	; (801fc38 <HAL_UART_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fba8:	4824      	ldr	r0, [pc, #144]	; (801fc3c <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801fbaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801fbac:	f042 0201 	orr.w	r2, r2, #1
 801fbb0:	65da      	str	r2, [r3, #92]	; 0x5c
 801fbb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801fbb4:	f002 0201 	and.w	r2, r2, #1
 801fbb8:	9201      	str	r2, [sp, #4]
 801fbba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801fbbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fbbe:	f042 0204 	orr.w	r2, r2, #4
 801fbc2:	64da      	str	r2, [r3, #76]	; 0x4c
 801fbc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fbc6:	f003 0304 	and.w	r3, r3, #4
 801fbca:	9302      	str	r3, [sp, #8]
 801fbcc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801fbce:	2303      	movs	r3, #3
 801fbd0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fbd2:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fbd4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801fbd6:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fbd8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801fbda:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fbdc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fbde:	f7e2 fb8b 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801fbe2:	b00a      	add	sp, #40	; 0x28
 801fbe4:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 801fbe6:	4a16      	ldr	r2, [pc, #88]	; (801fc40 <HAL_UART_MspInit+0xb4>)
 801fbe8:	4293      	cmp	r3, r2
 801fbea:	d1fa      	bne.n	801fbe2 <HAL_UART_MspInit+0x56>
    __HAL_RCC_USART1_CLK_ENABLE();
 801fbec:	4b12      	ldr	r3, [pc, #72]	; (801fc38 <HAL_UART_MspInit+0xac>)
 801fbee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fbf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801fbf4:	661a      	str	r2, [r3, #96]	; 0x60
 801fbf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fbf8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801fbfc:	9203      	str	r2, [sp, #12]
 801fbfe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801fc00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fc02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fc06:	64da      	str	r2, [r3, #76]	; 0x4c
 801fc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fc0e:	9304      	str	r3, [sp, #16]
 801fc10:	9b04      	ldr	r3, [sp, #16]
    HAL_PWREx_EnableVddIO2();
 801fc12:	f7e4 f84f 	bl	8003cb4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801fc16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801fc1a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fc1c:	2302      	movs	r3, #2
 801fc1e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fc20:	2300      	movs	r3, #0
 801fc22:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fc24:	2303      	movs	r3, #3
 801fc26:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801fc28:	2307      	movs	r3, #7
 801fc2a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fc2c:	a905      	add	r1, sp, #20
 801fc2e:	4805      	ldr	r0, [pc, #20]	; (801fc44 <HAL_UART_MspInit+0xb8>)
 801fc30:	e7d5      	b.n	801fbde <HAL_UART_MspInit+0x52>
 801fc32:	bf00      	nop
 801fc34:	40008000 	.word	0x40008000
 801fc38:	40021000 	.word	0x40021000
 801fc3c:	48000800 	.word	0x48000800
 801fc40:	40013800 	.word	0x40013800
 801fc44:	48001800 	.word	0x48001800

0801fc48 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==LPUART1)
 801fc48:	6803      	ldr	r3, [r0, #0]
 801fc4a:	4a0d      	ldr	r2, [pc, #52]	; (801fc80 <HAL_UART_MspDeInit+0x38>)
 801fc4c:	4293      	cmp	r3, r2
 801fc4e:	d109      	bne.n	801fc64 <HAL_UART_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801fc50:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
  
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801fc54:	480b      	ldr	r0, [pc, #44]	; (801fc84 <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801fc56:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801fc58:	f023 0301 	bic.w	r3, r3, #1
 801fc5c:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801fc5e:	2103      	movs	r1, #3

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 801fc60:	f7e2 bc22 	b.w	80024a8 <HAL_GPIO_DeInit>
  else if(huart->Instance==USART3)
 801fc64:	4a08      	ldr	r2, [pc, #32]	; (801fc88 <HAL_UART_MspDeInit+0x40>)
 801fc66:	4293      	cmp	r3, r2
 801fc68:	d109      	bne.n	801fc7e <HAL_UART_MspDeInit+0x36>
    __HAL_RCC_USART3_CLK_DISABLE();
 801fc6a:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 801fc6e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 801fc72:	6d93      	ldr	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 801fc74:	4805      	ldr	r0, [pc, #20]	; (801fc8c <HAL_UART_MspDeInit+0x44>)
    __HAL_RCC_USART3_CLK_DISABLE();
 801fc76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801fc7a:	6593      	str	r3, [r2, #88]	; 0x58
 801fc7c:	e7f0      	b.n	801fc60 <HAL_UART_MspDeInit+0x18>
 801fc7e:	4770      	bx	lr
 801fc80:	40008000 	.word	0x40008000
 801fc84:	48000800 	.word	0x48000800
 801fc88:	40004800 	.word	0x40004800
 801fc8c:	48000400 	.word	0x48000400

0801fc90 <HAL_ADC_MspInit>:
}



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801fc90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 801fc92:	6802      	ldr	r2, [r0, #0]
 801fc94:	4b0e      	ldr	r3, [pc, #56]	; (801fcd0 <HAL_ADC_MspInit+0x40>)
 801fc96:	429a      	cmp	r2, r3
 801fc98:	d116      	bne.n	801fcc8 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801fc9a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 801fc9e:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fca2:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 801fca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fca6:	480b      	ldr	r0, [pc, #44]	; (801fcd4 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 801fca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801fcac:	64da      	str	r2, [r3, #76]	; 0x4c
 801fcae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fcb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801fcb4:	9300      	str	r3, [sp, #0]
 801fcb6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fcb8:	2304      	movs	r3, #4
 801fcba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801fcbc:	230b      	movs	r3, #11
 801fcbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fcc0:	2300      	movs	r3, #0
 801fcc2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fcc4:	f7e2 fb18 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801fcc8:	b007      	add	sp, #28
 801fcca:	f85d fb04 	ldr.w	pc, [sp], #4
 801fcce:	bf00      	nop
 801fcd0:	50040000 	.word	0x50040000
 801fcd4:	48000800 	.word	0x48000800

0801fcd8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801fcd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 801fcda:	6803      	ldr	r3, [r0, #0]
 801fcdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 801fce0:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2)
 801fce2:	d112      	bne.n	801fd0a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801fce4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801fce8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 801fcea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fcec:	f042 0201 	orr.w	r2, r2, #1
 801fcf0:	659a      	str	r2, [r3, #88]	; 0x58
 801fcf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801fcf4:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 801fcf6:	f003 0301 	and.w	r3, r3, #1
 801fcfa:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801fcfc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 801fcfe:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801fd00:	f7e1 fe4e 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801fd04:	201c      	movs	r0, #28
 801fd06:	f7e1 fe7f 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
	
	if(htim_base->Instance==TIM7)
 801fd0a:	6822      	ldr	r2, [r4, #0]
 801fd0c:	4b20      	ldr	r3, [pc, #128]	; (801fd90 <HAL_TIM_Base_MspInit+0xb8>)
 801fd0e:	429a      	cmp	r2, r3
 801fd10:	d10d      	bne.n	801fd2e <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 801fd12:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801fd16:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 801fd18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fd1a:	f042 0220 	orr.w	r2, r2, #32
 801fd1e:	659a      	str	r2, [r3, #88]	; 0x58
 801fd20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fd22:	f003 0320 	and.w	r3, r3, #32
 801fd26:	9301      	str	r3, [sp, #4]
 801fd28:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801fd2a:	f7e1 fe6d 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
	
	 if(htim_base->Instance==TIM4)
 801fd2e:	6822      	ldr	r2, [r4, #0]
 801fd30:	4b18      	ldr	r3, [pc, #96]	; (801fd94 <HAL_TIM_Base_MspInit+0xbc>)
 801fd32:	429a      	cmp	r2, r3
 801fd34:	d112      	bne.n	801fd5c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801fd36:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801fd3a:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 801fd3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fd3e:	f042 0204 	orr.w	r2, r2, #4
 801fd42:	659a      	str	r2, [r3, #88]	; 0x58
 801fd44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801fd46:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 801fd48:	f003 0304 	and.w	r3, r3, #4
 801fd4c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801fd4e:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 801fd50:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801fd52:	f7e1 fe25 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801fd56:	201e      	movs	r0, #30
 801fd58:	f7e1 fe56 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
	}
		if(htim_base->Instance==TIM6)
 801fd5c:	6822      	ldr	r2, [r4, #0]
 801fd5e:	4b0e      	ldr	r3, [pc, #56]	; (801fd98 <HAL_TIM_Base_MspInit+0xc0>)
 801fd60:	429a      	cmp	r2, r3
 801fd62:	d112      	bne.n	801fd8a <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801fd64:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801fd68:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 801fd6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fd6c:	f042 0210 	orr.w	r2, r2, #16
 801fd70:	659a      	str	r2, [r3, #88]	; 0x58
 801fd72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fd74:	f003 0310 	and.w	r3, r3, #16
 801fd78:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801fd7a:	2200      	movs	r2, #0
 801fd7c:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 801fd7e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801fd80:	f7e1 fe0e 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801fd84:	2036      	movs	r0, #54	; 0x36
 801fd86:	f7e1 fe3f 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 801fd8a:	b004      	add	sp, #16
 801fd8c:	bd10      	pop	{r4, pc}
 801fd8e:	bf00      	nop
 801fd90:	40001400 	.word	0x40001400
 801fd94:	40000800 	.word	0x40000800
 801fd98:	40001000 	.word	0x40001000

0801fd9c <HAL_TIM_OC_MspInit>:


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 801fd9c:	b507      	push	{r0, r1, r2, lr}

  if(htim_oc->Instance==TIM5)
 801fd9e:	4b0d      	ldr	r3, [pc, #52]	; (801fdd4 <HAL_TIM_OC_MspInit+0x38>)
 801fda0:	6802      	ldr	r2, [r0, #0]
 801fda2:	429a      	cmp	r2, r3
 801fda4:	d112      	bne.n	801fdcc <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 801fda6:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801fdaa:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 801fdac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fdae:	f042 0208 	orr.w	r2, r2, #8
 801fdb2:	659a      	str	r2, [r3, #88]	; 0x58
 801fdb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801fdb6:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 801fdb8:	f003 0308 	and.w	r3, r3, #8
 801fdbc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801fdbe:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 801fdc0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801fdc2:	f7e1 fded 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801fdc6:	2032      	movs	r0, #50	; 0x32
 801fdc8:	f7e1 fe1e 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 801fdcc:	b003      	add	sp, #12
 801fdce:	f85d fb04 	ldr.w	pc, [sp], #4
 801fdd2:	bf00      	nop
 801fdd4:	40000c00 	.word	0x40000c00

0801fdd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801fdd8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 801fdda:	6802      	ldr	r2, [r0, #0]
 801fddc:	4b19      	ldr	r3, [pc, #100]	; (801fe44 <HAL_TIM_MspPostInit+0x6c>)
 801fdde:	429a      	cmp	r2, r3
{
 801fde0:	b086      	sub	sp, #24
 801fde2:	4604      	mov	r4, r0
  if(htim->Instance==TIM5)
 801fde4:	d10c      	bne.n	801fe00 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM5_MspPostInit 0 */
  
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801fde6:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fde8:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801fdea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fdec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fdee:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fdf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fdf4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fdf6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fdf8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801fdfa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fdfc:	f7e2 fa7c 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

  if(htim->Instance==TIM15)
 801fe00:	6822      	ldr	r2, [r4, #0]
 801fe02:	4b11      	ldr	r3, [pc, #68]	; (801fe48 <HAL_TIM_MspPostInit+0x70>)
 801fe04:	429a      	cmp	r2, r3
 801fe06:	d11a      	bne.n	801fe3e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801fe08:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801fe0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fe0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fe12:	64da      	str	r2, [r3, #76]	; 0x4c
 801fe14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fe16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fe1a:	9300      	str	r3, [sp, #0]
 801fe1c:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableVddIO2();
 801fe1e:	f7e3 ff49 	bl	8003cb4 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration    
    PG11     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801fe22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fe26:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fe28:	2302      	movs	r3, #2
 801fe2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe2c:	2300      	movs	r3, #0
 801fe2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fe30:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fe32:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 801fe34:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fe36:	4805      	ldr	r0, [pc, #20]	; (801fe4c <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 801fe38:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fe3a:	f7e2 fa5d 	bl	80022f8 <HAL_GPIO_Init>
	}
}
 801fe3e:	b006      	add	sp, #24
 801fe40:	bd10      	pop	{r4, pc}
 801fe42:	bf00      	nop
 801fe44:	40000c00 	.word	0x40000c00
 801fe48:	40014000 	.word	0x40014000
 801fe4c:	48001800 	.word	0x48001800

0801fe50 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 801fe50:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 801fe52:	4b0d      	ldr	r3, [pc, #52]	; (801fe88 <HAL_DMA2D_MspInit+0x38>)
 801fe54:	6802      	ldr	r2, [r0, #0]
 801fe56:	429a      	cmp	r2, r3
 801fe58:	d112      	bne.n	801fe80 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801fe5a:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801fe5e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801fe60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801fe62:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801fe66:	649a      	str	r2, [r3, #72]	; 0x48
 801fe68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801fe6a:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801fe6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fe70:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801fe72:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801fe74:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801fe76:	f7e1 fd93 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801fe7a:	205a      	movs	r0, #90	; 0x5a
 801fe7c:	f7e1 fdc4 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 801fe80:	b003      	add	sp, #12
 801fe82:	f85d fb04 	ldr.w	pc, [sp], #4
 801fe86:	bf00      	nop
 801fe88:	4002b000 	.word	0x4002b000

0801fe8c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801fe8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 801fe8e:	6802      	ldr	r2, [r0, #0]
 801fe90:	4b17      	ldr	r3, [pc, #92]	; (801fef0 <HAL_I2C_MspInit+0x64>)
 801fe92:	429a      	cmp	r2, r3
 801fe94:	d128      	bne.n	801fee8 <HAL_I2C_MspInit+0x5c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801fe96:	23c0      	movs	r3, #192	; 0xc0
 801fe98:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801fe9a:	2312      	movs	r3, #18
 801fe9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801fe9e:	2301      	movs	r3, #1
 801fea0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fea2:	2303      	movs	r3, #3
 801fea4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801fea6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801fea8:	eb0d 0103 	add.w	r1, sp, r3
 801feac:	4811      	ldr	r0, [pc, #68]	; (801fef4 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801feae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801feb0:	f7e2 fa22 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801feb4:	4b10      	ldr	r3, [pc, #64]	; (801fef8 <HAL_I2C_MspInit+0x6c>)
 801feb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801feb8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801febc:	659a      	str	r2, [r3, #88]	; 0x58
 801febe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801fec0:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 801fec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801fec6:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 801fec8:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801feca:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 801fecc:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801fece:	f7e1 fd67 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 801fed2:	201f      	movs	r0, #31
 801fed4:	f7e1 fd98 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 801fed8:	2200      	movs	r2, #0
 801feda:	2020      	movs	r0, #32
 801fedc:	4611      	mov	r1, r2
 801fede:	f7e1 fd5f 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 801fee2:	2020      	movs	r0, #32
 801fee4:	f7e1 fd90 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 801fee8:	b007      	add	sp, #28
 801feea:	f85d fb04 	ldr.w	pc, [sp], #4
 801feee:	bf00      	nop
 801fef0:	40005400 	.word	0x40005400
 801fef4:	48000400 	.word	0x48000400
 801fef8:	40021000 	.word	0x40021000

0801fefc <HAL_SD_MspInit>:

}


void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 801fefc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 801fefe:	6802      	ldr	r2, [r0, #0]
 801ff00:	4b18      	ldr	r3, [pc, #96]	; (801ff64 <HAL_SD_MspInit+0x68>)
 801ff02:	429a      	cmp	r2, r3
{
 801ff04:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 801ff06:	d12b      	bne.n	801ff60 <HAL_SD_MspInit+0x64>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801ff08:	4b17      	ldr	r3, [pc, #92]	; (801ff68 <HAL_SD_MspInit+0x6c>)
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ff0a:	4818      	ldr	r0, [pc, #96]	; (801ff6c <HAL_SD_MspInit+0x70>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801ff0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ff0e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801ff12:	64da      	str	r2, [r3, #76]	; 0x4c
 801ff14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ff16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ff1a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ff1c:	2400      	movs	r4, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801ff1e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ff20:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801ff22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ff26:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ff28:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801ff2a:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ff2c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801ff2e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ff30:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ff32:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801ff34:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ff36:	f7e2 f9df 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801ff3a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801ff3c:	eb0d 0103 	add.w	r1, sp, r3
 801ff40:	480b      	ldr	r0, [pc, #44]	; (801ff70 <HAL_SD_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801ff42:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ff44:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ff46:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ff48:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801ff4a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801ff4c:	f7e2 f9d4 	bl	80022f8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 801ff50:	2031      	movs	r0, #49	; 0x31
 801ff52:	4622      	mov	r2, r4
 801ff54:	4621      	mov	r1, r4
 801ff56:	f7e1 fd23 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 801ff5a:	2031      	movs	r0, #49	; 0x31
 801ff5c:	f7e1 fd54 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 801ff60:	b007      	add	sp, #28
 801ff62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff64:	50062400 	.word	0x50062400
 801ff68:	40021000 	.word	0x40021000
 801ff6c:	48000800 	.word	0x48000800
 801ff70:	48000c00 	.word	0x48000c00

0801ff74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 801ff74:	6802      	ldr	r2, [r0, #0]
 801ff76:	4b08      	ldr	r3, [pc, #32]	; (801ff98 <HAL_TIM_PWM_MspInit+0x24>)
 801ff78:	429a      	cmp	r2, r3
{
 801ff7a:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM15)
 801ff7c:	d10a      	bne.n	801ff94 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 801ff7e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801ff82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801ff84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801ff88:	661a      	str	r2, [r3, #96]	; 0x60
 801ff8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ff8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ff90:	9301      	str	r3, [sp, #4]
 801ff92:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 801ff94:	b002      	add	sp, #8
 801ff96:	4770      	bx	lr
 801ff98:	40014000 	.word	0x40014000

0801ff9c <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 801ff9c:	b508      	push	{r3, lr}

  if(hsd->Instance==SDMMC1)
 801ff9e:	6802      	ldr	r2, [r0, #0]
 801ffa0:	4b0b      	ldr	r3, [pc, #44]	; (801ffd0 <HAL_SD_MspDeInit+0x34>)
 801ffa2:	429a      	cmp	r2, r3
 801ffa4:	d112      	bne.n	801ffcc <HAL_SD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 801ffa6:	4a0b      	ldr	r2, [pc, #44]	; (801ffd4 <HAL_SD_MspDeInit+0x38>)
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801ffa8:	480b      	ldr	r0, [pc, #44]	; (801ffd8 <HAL_SD_MspDeInit+0x3c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 801ffaa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801ffac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 801ffb0:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801ffb2:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 801ffb6:	f7e2 fa77 	bl	80024a8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 801ffba:	4808      	ldr	r0, [pc, #32]	; (801ffdc <HAL_SD_MspDeInit+0x40>)
 801ffbc:	2104      	movs	r1, #4
 801ffbe:	f7e2 fa73 	bl	80024a8 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 801ffc2:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 801ffc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 801ffc8:	f7e1 bd2a 	b.w	8001a20 <HAL_NVIC_DisableIRQ>
 801ffcc:	bd08      	pop	{r3, pc}
 801ffce:	bf00      	nop
 801ffd0:	50062400 	.word	0x50062400
 801ffd4:	40021000 	.word	0x40021000
 801ffd8:	48000800 	.word	0x48000800
 801ffdc:	48000c00 	.word	0x48000c00

0801ffe0 <DMA1_Channel1_IRQHandler>:
*/

void DMA1_Channel1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 801ffe0:	4801      	ldr	r0, [pc, #4]	; (801ffe8 <DMA1_Channel1_IRQHandler+0x8>)
 801ffe2:	f7e1 bdf3 	b.w	8001bcc <HAL_DMA_IRQHandler>
 801ffe6:	bf00      	nop
 801ffe8:	20095b24 	.word	0x20095b24

0801ffec <NMI_Handler>:
 801ffec:	4770      	bx	lr

0801ffee <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 801ffee:	e7fe      	b.n	801ffee <HardFault_Handler>

0801fff0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 801fff0:	e7fe      	b.n	801fff0 <MemManage_Handler>

0801fff2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 801fff2:	e7fe      	b.n	801fff2 <BusFault_Handler>

0801fff4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 801fff4:	e7fe      	b.n	801fff4 <UsageFault_Handler>

0801fff6 <SVC_Handler>:
 801fff6:	4770      	bx	lr

0801fff8 <DebugMon_Handler>:
 801fff8:	4770      	bx	lr

0801fffa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 801fffa:	4770      	bx	lr

0801fffc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 801fffc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801fffe:	f7e1 f807 	bl	8001010 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020002:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8020006:	f7e1 bd4a 	b.w	8001a9e <HAL_SYSTICK_IRQHandler>
	...

0802000c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802000c:	4801      	ldr	r0, [pc, #4]	; (8020014 <SPI1_IRQHandler+0x8>)
 802000e:	f7e5 bc55 	b.w	80058bc <HAL_SPI_IRQHandler>
 8020012:	bf00      	nop
 8020014:	20095bf0 	.word	0x20095bf0

08020018 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8020018:	4801      	ldr	r0, [pc, #4]	; (8020020 <TIM5_IRQHandler+0x8>)
 802001a:	f7e5 be30 	b.w	8005c7e <HAL_TIM_IRQHandler>
 802001e:	bf00      	nop
 8020020:	2009589c 	.word	0x2009589c

08020024 <USART1_IRQHandler>:



void USART1_IRQHandler(void)
{
	HAL_UART_IRQHandler(&huart1);
 8020024:	4801      	ldr	r0, [pc, #4]	; (802002c <USART1_IRQHandler+0x8>)
 8020026:	f7e6 bc65 	b.w	80068f4 <HAL_UART_IRQHandler>
 802002a:	bf00      	nop
 802002c:	20095a54 	.word	0x20095a54

08020030 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8020030:	4801      	ldr	r0, [pc, #4]	; (8020038 <OTG_FS_IRQHandler+0x8>)
 8020032:	f7e3 b9ab 	b.w	800338c <HAL_PCD_IRQHandler>
 8020036:	bf00      	nop
 8020038:	20095f88 	.word	0x20095f88

0802003c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 802003c:	4801      	ldr	r0, [pc, #4]	; (8020044 <I2C1_EV_IRQHandler+0x8>)
 802003e:	f7e2 bd31 	b.w	8002aa4 <HAL_I2C_EV_IRQHandler>
 8020042:	bf00      	nop
 8020044:	20095768 	.word	0x20095768

08020048 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8020048:	4801      	ldr	r0, [pc, #4]	; (8020050 <I2C1_ER_IRQHandler+0x8>)
 802004a:	f7e2 bf41 	b.w	8002ed0 <HAL_I2C_ER_IRQHandler>
 802004e:	bf00      	nop
 8020050:	20095768 	.word	0x20095768

08020054 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8020054:	4801      	ldr	r0, [pc, #4]	; (802005c <SDMMC1_IRQHandler+0x8>)
 8020056:	f7e4 bf0f 	b.w	8004e78 <HAL_SD_IRQHandler>
 802005a:	bf00      	nop
 802005c:	20095808 	.word	0x20095808

08020060 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8020060:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8020062:	4b0a      	ldr	r3, [pc, #40]	; (802008c <_sbrk+0x2c>)
 8020064:	6819      	ldr	r1, [r3, #0]
{
 8020066:	4602      	mov	r2, r0
	if (heap_end == 0)
 8020068:	b909      	cbnz	r1, 802006e <_sbrk+0xe>
		heap_end = &end;
 802006a:	4909      	ldr	r1, [pc, #36]	; (8020090 <_sbrk+0x30>)
 802006c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 802006e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8020070:	4669      	mov	r1, sp
 8020072:	4402      	add	r2, r0
 8020074:	428a      	cmp	r2, r1
 8020076:	d906      	bls.n	8020086 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8020078:	f000 fa8c 	bl	8020594 <__errno>
 802007c:	230c      	movs	r3, #12
 802007e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8020080:	f04f 30ff 	mov.w	r0, #4294967295
 8020084:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8020086:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8020088:	bd08      	pop	{r3, pc}
 802008a:	bf00      	nop
 802008c:	20090618 	.word	0x20090618
 8020090:	200965a0 	.word	0x200965a0

08020094 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020094:	490f      	ldr	r1, [pc, #60]	; (80200d4 <SystemInit+0x40>)
 8020096:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 802009a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802009e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80200a2:	4b0d      	ldr	r3, [pc, #52]	; (80200d8 <SystemInit+0x44>)
 80200a4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80200a6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80200a8:	f042 0201 	orr.w	r2, r2, #1
 80200ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80200ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80200b0:	681a      	ldr	r2, [r3, #0]
 80200b2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80200b6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80200ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80200bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80200c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80200c2:	681a      	ldr	r2, [r3, #0]
 80200c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80200c8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80200ca:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80200cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80200d0:	608b      	str	r3, [r1, #8]
 80200d2:	4770      	bx	lr
 80200d4:	e000ed00 	.word	0xe000ed00
 80200d8:	40021000 	.word	0x40021000

080200dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80200dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80200de:	2200      	movs	r2, #0
 80200e0:	490a      	ldr	r1, [pc, #40]	; (802010c <MX_USB_DEVICE_Init+0x30>)
 80200e2:	480b      	ldr	r0, [pc, #44]	; (8020110 <MX_USB_DEVICE_Init+0x34>)
 80200e4:	f7e8 f915 	bl	8008312 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 80200e8:	490a      	ldr	r1, [pc, #40]	; (8020114 <MX_USB_DEVICE_Init+0x38>)
 80200ea:	4809      	ldr	r0, [pc, #36]	; (8020110 <MX_USB_DEVICE_Init+0x34>)
 80200ec:	f7e8 f926 	bl	800833c <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 80200f0:	4909      	ldr	r1, [pc, #36]	; (8020118 <MX_USB_DEVICE_Init+0x3c>)
 80200f2:	4807      	ldr	r0, [pc, #28]	; (8020110 <MX_USB_DEVICE_Init+0x34>)
 80200f4:	f7e8 f906 	bl	8008304 <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 80200f8:	4805      	ldr	r0, [pc, #20]	; (8020110 <MX_USB_DEVICE_Init+0x34>)
 80200fa:	f000 f9ac 	bl	8020456 <USBD_LL_BatteryCharging>
 80200fe:	b120      	cbz	r0, 802010a <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8020100:	4803      	ldr	r0, [pc, #12]	; (8020110 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8020102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 8020106:	f7e8 b920 	b.w	800834a <USBD_Start>
 802010a:	bd08      	pop	{r3, pc}
 802010c:	20000f0c 	.word	0x20000f0c
 8020110:	20095cec 	.word	0x20095cec
 8020114:	20000020 	.word	0x20000020
 8020118:	20000efc 	.word	0x20000efc

0802011c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802011c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 802011e:	6803      	ldr	r3, [r0, #0]
 8020120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8020124:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 8020126:	d133      	bne.n	8020190 <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8020128:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802012c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802012e:	2302      	movs	r3, #2
 8020130:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020132:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020134:	4c19      	ldr	r4, [pc, #100]	; (802019c <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020136:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020138:	2303      	movs	r3, #3
 802013a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802013c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802013e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8020144:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020146:	f7e2 f8d7 	bl	80022f8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802014a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 802014c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8020150:	64e3      	str	r3, [r4, #76]	; 0x4c
 8020152:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8020154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8020158:	9301      	str	r3, [sp, #4]
 802015a:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802015c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802015e:	00db      	lsls	r3, r3, #3
 8020160:	d418      	bmi.n	8020194 <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8020162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020168:	65a3      	str	r3, [r4, #88]	; 0x58
 802016a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802016c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020170:	9302      	str	r3, [sp, #8]
 8020172:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8020174:	f7e3 fd96 	bl	8003ca4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8020178:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802017a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802017e:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8020180:	2200      	movs	r2, #0
 8020182:	2043      	movs	r0, #67	; 0x43
 8020184:	4611      	mov	r1, r2
 8020186:	f7e1 fc0b 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802018a:	2043      	movs	r0, #67	; 0x43
 802018c:	f7e1 fc3c 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8020190:	b008      	add	sp, #32
 8020192:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8020194:	f7e3 fd86 	bl	8003ca4 <HAL_PWREx_EnableVddUSB>
 8020198:	e7f2      	b.n	8020180 <HAL_PCD_MspInit+0x64>
 802019a:	bf00      	nop
 802019c:	40021000 	.word	0x40021000

080201a0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80201a0:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80201a4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80201a8:	f7e8 b8e6 	b.w	8008378 <USBD_LL_SetupStage>

080201ac <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80201ac:	231c      	movs	r3, #28
 80201ae:	fb03 0301 	mla	r3, r3, r1, r0
 80201b2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80201b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80201ba:	f7e8 b90a 	b.w	80083d2 <USBD_LL_DataOutStage>

080201be <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80201be:	231c      	movs	r3, #28
 80201c0:	fb03 0301 	mla	r3, r3, r1, r0
 80201c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80201c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80201ca:	f7e8 b93a 	b.w	8008442 <USBD_LL_DataInStage>

080201ce <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80201ce:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80201d2:	f7e8 b9cb 	b.w	800856c <USBD_LL_SOF>

080201d6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80201d6:	b510      	push	{r4, lr}
 80201d8:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80201da:	2101      	movs	r1, #1
 80201dc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80201e0:	f7e8 f9b2 	bl	8008548 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80201e4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80201e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80201ec:	f7e8 b985 	b.w	80084fa <USBD_LL_Reset>

080201f0 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80201f0:	6802      	ldr	r2, [r0, #0]
 80201f2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 80201f6:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80201f8:	f043 0301 	orr.w	r3, r3, #1
{
 80201fc:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80201fe:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8020202:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8020206:	f7e8 f9a2 	bl	800854e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802020a:	6a23      	ldr	r3, [r4, #32]
 802020c:	b123      	cbz	r3, 8020218 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802020e:	4a03      	ldr	r2, [pc, #12]	; (802021c <HAL_PCD_SuspendCallback+0x2c>)
 8020210:	6913      	ldr	r3, [r2, #16]
 8020212:	f043 0306 	orr.w	r3, r3, #6
 8020216:	6113      	str	r3, [r2, #16]
 8020218:	bd10      	pop	{r4, pc}
 802021a:	bf00      	nop
 802021c:	e000ed00 	.word	0xe000ed00

08020220 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8020220:	6802      	ldr	r2, [r0, #0]
 8020222:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8020226:	f023 0301 	bic.w	r3, r3, #1
{
 802022a:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802022c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8020230:	6a03      	ldr	r3, [r0, #32]
{
 8020232:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8020234:	b133      	cbz	r3, 8020244 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020236:	4a06      	ldr	r2, [pc, #24]	; (8020250 <HAL_PCD_ResumeCallback+0x30>)
 8020238:	6913      	ldr	r3, [r2, #16]
 802023a:	f023 0306 	bic.w	r3, r3, #6
 802023e:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8020240:	f7fe f858 	bl	801e2f4 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020244:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8020248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802024c:	f7e8 b988 	b.w	8008560 <USBD_LL_Resume>
 8020250:	e000ed00 	.word	0xe000ed00

08020254 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020254:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8020258:	f7e8 b996 	b.w	8008588 <USBD_LL_IsoOUTIncomplete>

0802025c <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802025c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8020260:	f7e8 b990 	b.w	8008584 <USBD_LL_IsoINIncomplete>

08020264 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8020264:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8020268:	f7e8 b990 	b.w	800858c <USBD_LL_DevConnected>

0802026c <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 802026c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8020270:	f7e8 b98e 	b.w	8008590 <USBD_LL_DevDisconnected>

08020274 <USBD_LL_Init>:
{
 8020274:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 8020276:	7802      	ldrb	r2, [r0, #0]
 8020278:	bb4a      	cbnz	r2, 80202ce <USBD_LL_Init+0x5a>
  hpcd_USB_OTG_FS.pData = pdev;
 802027a:	4b16      	ldr	r3, [pc, #88]	; (80202d4 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 802027c:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 802027e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8020282:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8020286:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 802028a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802028e:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8020290:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8020292:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020294:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8020296:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8020298:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 802029a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 802029c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 802029e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80202a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80202a2:	f7e2 ffe0 	bl	8003266 <HAL_PCD_Init>
 80202a6:	b120      	cbz	r0, 80202b2 <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 80202a8:	f240 116b 	movw	r1, #363	; 0x16b
 80202ac:	480a      	ldr	r0, [pc, #40]	; (80202d8 <USBD_LL_Init+0x64>)
 80202ae:	f7ff fae1 	bl	801f874 <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80202b2:	2180      	movs	r1, #128	; 0x80
 80202b4:	4807      	ldr	r0, [pc, #28]	; (80202d4 <USBD_LL_Init+0x60>)
 80202b6:	f7e3 fc67 	bl	8003b88 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80202ba:	2240      	movs	r2, #64	; 0x40
 80202bc:	2100      	movs	r1, #0
 80202be:	4805      	ldr	r0, [pc, #20]	; (80202d4 <USBD_LL_Init+0x60>)
 80202c0:	f7e3 fc41 	bl	8003b46 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80202c4:	2280      	movs	r2, #128	; 0x80
 80202c6:	2101      	movs	r1, #1
 80202c8:	4802      	ldr	r0, [pc, #8]	; (80202d4 <USBD_LL_Init+0x60>)
 80202ca:	f7e3 fc3c 	bl	8003b46 <HAL_PCDEx_SetTxFiFo>
}
 80202ce:	2000      	movs	r0, #0
 80202d0:	bd08      	pop	{r3, pc}
 80202d2:	bf00      	nop
 80202d4:	20095f88 	.word	0x20095f88
 80202d8:	080321c4 	.word	0x080321c4

080202dc <USBD_LL_Start>:
{
 80202dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80202de:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80202e2:	f7e3 f83d 	bl	8003360 <HAL_PCD_Start>
 80202e6:	2803      	cmp	r0, #3
 80202e8:	bf9a      	itte	ls
 80202ea:	4b02      	ldrls	r3, [pc, #8]	; (80202f4 <USBD_LL_Start+0x18>)
 80202ec:	5c18      	ldrbls	r0, [r3, r0]
 80202ee:	2002      	movhi	r0, #2
}
 80202f0:	bd08      	pop	{r3, pc}
 80202f2:	bf00      	nop
 80202f4:	080321c0 	.word	0x080321c0

080202f8 <USBD_LL_OpenEP>:
{
 80202f8:	b510      	push	{r4, lr}
 80202fa:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80202fc:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8020300:	4613      	mov	r3, r2
 8020302:	4622      	mov	r2, r4
 8020304:	f7e3 fb1c 	bl	8003940 <HAL_PCD_EP_Open>
 8020308:	2803      	cmp	r0, #3
 802030a:	bf9a      	itte	ls
 802030c:	4b01      	ldrls	r3, [pc, #4]	; (8020314 <USBD_LL_OpenEP+0x1c>)
 802030e:	5c18      	ldrbls	r0, [r3, r0]
 8020310:	2002      	movhi	r0, #2
}
 8020312:	bd10      	pop	{r4, pc}
 8020314:	080321c0 	.word	0x080321c0

08020318 <USBD_LL_CloseEP>:
{
 8020318:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802031a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802031e:	f7e3 fb44 	bl	80039aa <HAL_PCD_EP_Close>
 8020322:	2803      	cmp	r0, #3
 8020324:	bf9a      	itte	ls
 8020326:	4b02      	ldrls	r3, [pc, #8]	; (8020330 <USBD_LL_CloseEP+0x18>)
 8020328:	5c18      	ldrbls	r0, [r3, r0]
 802032a:	2002      	movhi	r0, #2
}
 802032c:	bd08      	pop	{r3, pc}
 802032e:	bf00      	nop
 8020330:	080321c0 	.word	0x080321c0

08020334 <USBD_LL_StallEP>:
{
 8020334:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020336:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802033a:	f7e3 fb99 	bl	8003a70 <HAL_PCD_EP_SetStall>
 802033e:	2803      	cmp	r0, #3
 8020340:	bf9a      	itte	ls
 8020342:	4b02      	ldrls	r3, [pc, #8]	; (802034c <USBD_LL_StallEP+0x18>)
 8020344:	5c18      	ldrbls	r0, [r3, r0]
 8020346:	2002      	movhi	r0, #2
}
 8020348:	bd08      	pop	{r3, pc}
 802034a:	bf00      	nop
 802034c:	080321c0 	.word	0x080321c0

08020350 <USBD_LL_ClearStallEP>:
{
 8020350:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8020352:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8020356:	f7e3 fbc4 	bl	8003ae2 <HAL_PCD_EP_ClrStall>
 802035a:	2803      	cmp	r0, #3
 802035c:	bf9a      	itte	ls
 802035e:	4b02      	ldrls	r3, [pc, #8]	; (8020368 <USBD_LL_ClearStallEP+0x18>)
 8020360:	5c18      	ldrbls	r0, [r3, r0]
 8020362:	2002      	movhi	r0, #2
}
 8020364:	bd08      	pop	{r3, pc}
 8020366:	bf00      	nop
 8020368:	080321c0 	.word	0x080321c0

0802036c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 802036c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020370:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8020374:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8020378:	bf1b      	ittet	ne
 802037a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 802037e:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8020382:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8020386:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 802038a:	bf08      	it	eq
 802038c:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8020390:	4770      	bx	lr
	...

08020394 <USBD_LL_SetUSBAddress>:
{
 8020394:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020396:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802039a:	f7e3 fabd 	bl	8003918 <HAL_PCD_SetAddress>
 802039e:	2803      	cmp	r0, #3
 80203a0:	bf9a      	itte	ls
 80203a2:	4b02      	ldrls	r3, [pc, #8]	; (80203ac <USBD_LL_SetUSBAddress+0x18>)
 80203a4:	5c18      	ldrbls	r0, [r3, r0]
 80203a6:	2002      	movhi	r0, #2
}
 80203a8:	bd08      	pop	{r3, pc}
 80203aa:	bf00      	nop
 80203ac:	080321c0 	.word	0x080321c0

080203b0 <USBD_LL_Transmit>:
{
 80203b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80203b2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80203b6:	f7e3 fb40 	bl	8003a3a <HAL_PCD_EP_Transmit>
 80203ba:	2803      	cmp	r0, #3
 80203bc:	bf9a      	itte	ls
 80203be:	4b02      	ldrls	r3, [pc, #8]	; (80203c8 <USBD_LL_Transmit+0x18>)
 80203c0:	5c18      	ldrbls	r0, [r3, r0]
 80203c2:	2002      	movhi	r0, #2
}
 80203c4:	bd08      	pop	{r3, pc}
 80203c6:	bf00      	nop
 80203c8:	080321c0 	.word	0x080321c0

080203cc <USBD_LL_PrepareReceive>:
{
 80203cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80203ce:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80203d2:	f7e3 fb14 	bl	80039fe <HAL_PCD_EP_Receive>
 80203d6:	2803      	cmp	r0, #3
 80203d8:	bf9a      	itte	ls
 80203da:	4b02      	ldrls	r3, [pc, #8]	; (80203e4 <USBD_LL_PrepareReceive+0x18>)
 80203dc:	5c18      	ldrbls	r0, [r3, r0]
 80203de:	2002      	movhi	r0, #2
}
 80203e0:	bd08      	pop	{r3, pc}
 80203e2:	bf00      	nop
 80203e4:	080321c0 	.word	0x080321c0

080203e8 <HAL_PCDEx_LPM_Callback>:
{
 80203e8:	b510      	push	{r4, lr}
 80203ea:	4604      	mov	r4, r0
  switch (msg)
 80203ec:	b111      	cbz	r1, 80203f4 <HAL_PCDEx_LPM_Callback+0xc>
 80203ee:	2901      	cmp	r1, #1
 80203f0:	d016      	beq.n	8020420 <HAL_PCDEx_LPM_Callback+0x38>
 80203f2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80203f4:	6a03      	ldr	r3, [r0, #32]
 80203f6:	b133      	cbz	r3, 8020406 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 80203f8:	f7fd ff7c 	bl	801e2f4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80203fc:	4a12      	ldr	r2, [pc, #72]	; (8020448 <HAL_PCDEx_LPM_Callback+0x60>)
 80203fe:	6913      	ldr	r3, [r2, #16]
 8020400:	f023 0306 	bic.w	r3, r3, #6
 8020404:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8020406:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8020408:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802040c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8020410:	f023 0301 	bic.w	r3, r3, #1
 8020414:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8020418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 802041c:	f7e8 b8a0 	b.w	8008560 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020420:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8020422:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020426:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 802042a:	f043 0301 	orr.w	r3, r3, #1
 802042e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8020432:	f7e8 f88c 	bl	800854e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8020436:	6a23      	ldr	r3, [r4, #32]
 8020438:	b123      	cbz	r3, 8020444 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802043a:	4a03      	ldr	r2, [pc, #12]	; (8020448 <HAL_PCDEx_LPM_Callback+0x60>)
 802043c:	6913      	ldr	r3, [r2, #16]
 802043e:	f043 0306 	orr.w	r3, r3, #6
 8020442:	6113      	str	r3, [r2, #16]
 8020444:	bd10      	pop	{r4, pc}
 8020446:	bf00      	nop
 8020448:	e000ed00 	.word	0xe000ed00

0802044c <USBD_static_malloc>:
}
 802044c:	4800      	ldr	r0, [pc, #0]	; (8020450 <USBD_static_malloc+0x4>)
 802044e:	4770      	bx	lr
 8020450:	2009061c 	.word	0x2009061c

08020454 <USBD_static_free>:
{
 8020454:	4770      	bx	lr

08020456 <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 8020456:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 802045a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802045c:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 802045e:	bf14      	ite	ne
 8020460:	2002      	movne	r0, #2
 8020462:	2000      	moveq	r0, #0
 8020464:	4770      	bx	lr

08020466 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8020466:	2000      	movs	r0, #0
 8020468:	4770      	bx	lr
	...

0802046c <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 802046c:	4b05      	ldr	r3, [pc, #20]	; (8020484 <CUSTOM_HID_OutEvent_FS+0x18>)
 
  for (uint8_t i = 0; i < 12; i++)
  {
    dataToReceive[i] = hhid->Report_buf[i];
 802046e:	4a06      	ldr	r2, [pc, #24]	; (8020488 <CUSTOM_HID_OutEvent_FS+0x1c>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 8020470:	f8d3 0290 	ldr.w	r0, [r3, #656]	; 0x290
 8020474:	2300      	movs	r3, #0
    dataToReceive[i] = hhid->Report_buf[i];
 8020476:	5cc1      	ldrb	r1, [r0, r3]
 8020478:	5499      	strb	r1, [r3, r2]
 802047a:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 12; i++)
 802047c:	2b0c      	cmp	r3, #12
 802047e:	d1fa      	bne.n	8020476 <CUSTOM_HID_OutEvent_FS+0xa>
  }
 
 
  return (USBD_OK);
}
 8020480:	2000      	movs	r0, #0
 8020482:	4770      	bx	lr
 8020484:	20095cec 	.word	0x20095cec
 8020488:	2008f550 	.word	0x2008f550

0802048c <CUSTOM_HID_Init_FS>:
 802048c:	2000      	movs	r0, #0
 802048e:	4770      	bx	lr

08020490 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8020490:	2312      	movs	r3, #18
 8020492:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8020494:	4800      	ldr	r0, [pc, #0]	; (8020498 <USBD_FS_DeviceDescriptor+0x8>)
 8020496:	4770      	bx	lr
 8020498:	20000f38 	.word	0x20000f38

0802049c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 802049c:	2304      	movs	r3, #4
 802049e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80204a0:	4800      	ldr	r0, [pc, #0]	; (80204a4 <USBD_FS_LangIDStrDescriptor+0x8>)
 80204a2:	4770      	bx	lr
 80204a4:	20000f4c 	.word	0x20000f4c

080204a8 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 80204a8:	230c      	movs	r3, #12
 80204aa:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80204ac:	4800      	ldr	r0, [pc, #0]	; (80204b0 <USBD_FS_USR_BOSDescriptor+0x8>)
 80204ae:	4770      	bx	lr
 80204b0:	20000f2c 	.word	0x20000f2c

080204b4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80204b4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80204b6:	4c04      	ldr	r4, [pc, #16]	; (80204c8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80204b8:	4804      	ldr	r0, [pc, #16]	; (80204cc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80204ba:	460a      	mov	r2, r1
 80204bc:	4621      	mov	r1, r4
 80204be:	f7e8 fa73 	bl	80089a8 <USBD_GetString>
}
 80204c2:	4620      	mov	r0, r4
 80204c4:	bd10      	pop	{r4, pc}
 80204c6:	bf00      	nop
 80204c8:	20096390 	.word	0x20096390
 80204cc:	080321fe 	.word	0x080321fe

080204d0 <USBD_FS_ProductStrDescriptor>:
{
 80204d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80204d2:	4c04      	ldr	r4, [pc, #16]	; (80204e4 <USBD_FS_ProductStrDescriptor+0x14>)
 80204d4:	4804      	ldr	r0, [pc, #16]	; (80204e8 <USBD_FS_ProductStrDescriptor+0x18>)
 80204d6:	460a      	mov	r2, r1
 80204d8:	4621      	mov	r1, r4
 80204da:	f7e8 fa65 	bl	80089a8 <USBD_GetString>
}
 80204de:	4620      	mov	r0, r4
 80204e0:	bd10      	pop	{r4, pc}
 80204e2:	bf00      	nop
 80204e4:	20096390 	.word	0x20096390
 80204e8:	08032205 	.word	0x08032205

080204ec <USBD_FS_SerialStrDescriptor>:
{
 80204ec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80204ee:	4c04      	ldr	r4, [pc, #16]	; (8020500 <USBD_FS_SerialStrDescriptor+0x14>)
 80204f0:	4804      	ldr	r0, [pc, #16]	; (8020504 <USBD_FS_SerialStrDescriptor+0x18>)
 80204f2:	460a      	mov	r2, r1
 80204f4:	4621      	mov	r1, r4
 80204f6:	f7e8 fa57 	bl	80089a8 <USBD_GetString>
}
 80204fa:	4620      	mov	r0, r4
 80204fc:	bd10      	pop	{r4, pc}
 80204fe:	bf00      	nop
 8020500:	20096390 	.word	0x20096390
 8020504:	08032223 	.word	0x08032223

08020508 <USBD_FS_ConfigStrDescriptor>:
{
 8020508:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802050a:	4c04      	ldr	r4, [pc, #16]	; (802051c <USBD_FS_ConfigStrDescriptor+0x14>)
 802050c:	4804      	ldr	r0, [pc, #16]	; (8020520 <USBD_FS_ConfigStrDescriptor+0x18>)
 802050e:	460a      	mov	r2, r1
 8020510:	4621      	mov	r1, r4
 8020512:	f7e8 fa49 	bl	80089a8 <USBD_GetString>
}
 8020516:	4620      	mov	r0, r4
 8020518:	bd10      	pop	{r4, pc}
 802051a:	bf00      	nop
 802051c:	20096390 	.word	0x20096390
 8020520:	080321d7 	.word	0x080321d7

08020524 <USBD_FS_InterfaceStrDescriptor>:
{
 8020524:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020526:	4c04      	ldr	r4, [pc, #16]	; (8020538 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8020528:	4804      	ldr	r0, [pc, #16]	; (802053c <USBD_FS_InterfaceStrDescriptor+0x18>)
 802052a:	460a      	mov	r2, r1
 802052c:	4621      	mov	r1, r4
 802052e:	f7e8 fa3b 	bl	80089a8 <USBD_GetString>
}
 8020532:	4620      	mov	r0, r4
 8020534:	bd10      	pop	{r4, pc}
 8020536:	bf00      	nop
 8020538:	20096390 	.word	0x20096390
 802053c:	080321e9 	.word	0x080321e9

08020540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8020540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020578 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8020544:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8020546:	e003      	b.n	8020550 <LoopCopyDataInit>

08020548 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8020548:	4b0c      	ldr	r3, [pc, #48]	; (802057c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 802054a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 802054c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 802054e:	3104      	adds	r1, #4

08020550 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8020550:	480b      	ldr	r0, [pc, #44]	; (8020580 <LoopForever+0xa>)
	ldr	r3, =_edata
 8020552:	4b0c      	ldr	r3, [pc, #48]	; (8020584 <LoopForever+0xe>)
	adds	r2, r0, r1
 8020554:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8020556:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8020558:	d3f6      	bcc.n	8020548 <CopyDataInit>
	ldr	r2, =_sbss
 802055a:	4a0b      	ldr	r2, [pc, #44]	; (8020588 <LoopForever+0x12>)
	b	LoopFillZerobss
 802055c:	e002      	b.n	8020564 <LoopFillZerobss>

0802055e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 802055e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8020560:	f842 3b04 	str.w	r3, [r2], #4

08020564 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8020564:	4b09      	ldr	r3, [pc, #36]	; (802058c <LoopForever+0x16>)
	cmp	r2, r3
 8020566:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8020568:	d3f9      	bcc.n	802055e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 802056a:	f7ff fd93 	bl	8020094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802056e:	f000 f817 	bl	80205a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8020572:	f7fd ff2d 	bl	801e3d0 <main>

08020576 <LoopForever>:

LoopForever:
    b LoopForever
 8020576:	e7fe      	b.n	8020576 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8020578:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 802057c:	08032530 	.word	0x08032530
	ldr	r0, =_sdata
 8020580:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8020584:	200015c4 	.word	0x200015c4
	ldr	r2, =_sbss
 8020588:	200015c8 	.word	0x200015c8
	ldr	r3, = _ebss
 802058c:	200965a0 	.word	0x200965a0

08020590 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8020590:	e7fe      	b.n	8020590 <ADC1_IRQHandler>
	...

08020594 <__errno>:
 8020594:	4b01      	ldr	r3, [pc, #4]	; (802059c <__errno+0x8>)
 8020596:	6818      	ldr	r0, [r3, #0]
 8020598:	4770      	bx	lr
 802059a:	bf00      	nop
 802059c:	20000f50 	.word	0x20000f50

080205a0 <__libc_init_array>:
 80205a0:	b570      	push	{r4, r5, r6, lr}
 80205a2:	4e0d      	ldr	r6, [pc, #52]	; (80205d8 <__libc_init_array+0x38>)
 80205a4:	4c0d      	ldr	r4, [pc, #52]	; (80205dc <__libc_init_array+0x3c>)
 80205a6:	1ba4      	subs	r4, r4, r6
 80205a8:	10a4      	asrs	r4, r4, #2
 80205aa:	2500      	movs	r5, #0
 80205ac:	42a5      	cmp	r5, r4
 80205ae:	d109      	bne.n	80205c4 <__libc_init_array+0x24>
 80205b0:	4e0b      	ldr	r6, [pc, #44]	; (80205e0 <__libc_init_array+0x40>)
 80205b2:	4c0c      	ldr	r4, [pc, #48]	; (80205e4 <__libc_init_array+0x44>)
 80205b4:	f004 fe0c 	bl	80251d0 <_init>
 80205b8:	1ba4      	subs	r4, r4, r6
 80205ba:	10a4      	asrs	r4, r4, #2
 80205bc:	2500      	movs	r5, #0
 80205be:	42a5      	cmp	r5, r4
 80205c0:	d105      	bne.n	80205ce <__libc_init_array+0x2e>
 80205c2:	bd70      	pop	{r4, r5, r6, pc}
 80205c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80205c8:	4798      	blx	r3
 80205ca:	3501      	adds	r5, #1
 80205cc:	e7ee      	b.n	80205ac <__libc_init_array+0xc>
 80205ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80205d2:	4798      	blx	r3
 80205d4:	3501      	adds	r5, #1
 80205d6:	e7f2      	b.n	80205be <__libc_init_array+0x1e>
 80205d8:	08032528 	.word	0x08032528
 80205dc:	08032528 	.word	0x08032528
 80205e0:	08032528 	.word	0x08032528
 80205e4:	0803252c 	.word	0x0803252c

080205e8 <memcpy>:
 80205e8:	b510      	push	{r4, lr}
 80205ea:	1e43      	subs	r3, r0, #1
 80205ec:	440a      	add	r2, r1
 80205ee:	4291      	cmp	r1, r2
 80205f0:	d100      	bne.n	80205f4 <memcpy+0xc>
 80205f2:	bd10      	pop	{r4, pc}
 80205f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80205f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80205fc:	e7f7      	b.n	80205ee <memcpy+0x6>

080205fe <memset>:
 80205fe:	4402      	add	r2, r0
 8020600:	4603      	mov	r3, r0
 8020602:	4293      	cmp	r3, r2
 8020604:	d100      	bne.n	8020608 <memset+0xa>
 8020606:	4770      	bx	lr
 8020608:	f803 1b01 	strb.w	r1, [r3], #1
 802060c:	e7f9      	b.n	8020602 <memset+0x4>
	...

08020610 <sprintf>:
 8020610:	b40e      	push	{r1, r2, r3}
 8020612:	b500      	push	{lr}
 8020614:	b09c      	sub	sp, #112	; 0x70
 8020616:	f44f 7102 	mov.w	r1, #520	; 0x208
 802061a:	ab1d      	add	r3, sp, #116	; 0x74
 802061c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8020620:	9002      	str	r0, [sp, #8]
 8020622:	9006      	str	r0, [sp, #24]
 8020624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020628:	480a      	ldr	r0, [pc, #40]	; (8020654 <sprintf+0x44>)
 802062a:	9104      	str	r1, [sp, #16]
 802062c:	9107      	str	r1, [sp, #28]
 802062e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8020632:	f853 2b04 	ldr.w	r2, [r3], #4
 8020636:	f8ad 1016 	strh.w	r1, [sp, #22]
 802063a:	6800      	ldr	r0, [r0, #0]
 802063c:	9301      	str	r3, [sp, #4]
 802063e:	a902      	add	r1, sp, #8
 8020640:	f000 f832 	bl	80206a8 <_svfprintf_r>
 8020644:	9b02      	ldr	r3, [sp, #8]
 8020646:	2200      	movs	r2, #0
 8020648:	701a      	strb	r2, [r3, #0]
 802064a:	b01c      	add	sp, #112	; 0x70
 802064c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020650:	b003      	add	sp, #12
 8020652:	4770      	bx	lr
 8020654:	20000f50 	.word	0x20000f50

08020658 <strcat>:
 8020658:	b510      	push	{r4, lr}
 802065a:	4602      	mov	r2, r0
 802065c:	4613      	mov	r3, r2
 802065e:	3201      	adds	r2, #1
 8020660:	781c      	ldrb	r4, [r3, #0]
 8020662:	2c00      	cmp	r4, #0
 8020664:	d1fa      	bne.n	802065c <strcat+0x4>
 8020666:	3b01      	subs	r3, #1
 8020668:	f811 2b01 	ldrb.w	r2, [r1], #1
 802066c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020670:	2a00      	cmp	r2, #0
 8020672:	d1f9      	bne.n	8020668 <strcat+0x10>
 8020674:	bd10      	pop	{r4, pc}

08020676 <strchr>:
 8020676:	b2c9      	uxtb	r1, r1
 8020678:	4603      	mov	r3, r0
 802067a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802067e:	b11a      	cbz	r2, 8020688 <strchr+0x12>
 8020680:	4291      	cmp	r1, r2
 8020682:	d1f9      	bne.n	8020678 <strchr+0x2>
 8020684:	4618      	mov	r0, r3
 8020686:	4770      	bx	lr
 8020688:	2900      	cmp	r1, #0
 802068a:	bf0c      	ite	eq
 802068c:	4618      	moveq	r0, r3
 802068e:	2000      	movne	r0, #0
 8020690:	4770      	bx	lr

08020692 <strcpy>:
 8020692:	4603      	mov	r3, r0
 8020694:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020698:	f803 2b01 	strb.w	r2, [r3], #1
 802069c:	2a00      	cmp	r2, #0
 802069e:	d1f9      	bne.n	8020694 <strcpy+0x2>
 80206a0:	4770      	bx	lr
 80206a2:	0000      	movs	r0, r0
 80206a4:	0000      	movs	r0, r0
	...

080206a8 <_svfprintf_r>:
 80206a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206ac:	b0bd      	sub	sp, #244	; 0xf4
 80206ae:	468a      	mov	sl, r1
 80206b0:	4615      	mov	r5, r2
 80206b2:	461f      	mov	r7, r3
 80206b4:	4683      	mov	fp, r0
 80206b6:	f001 fe25 	bl	8022304 <_localeconv_r>
 80206ba:	6803      	ldr	r3, [r0, #0]
 80206bc:	930d      	str	r3, [sp, #52]	; 0x34
 80206be:	4618      	mov	r0, r3
 80206c0:	f7df fdee 	bl	80002a0 <strlen>
 80206c4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80206c8:	9008      	str	r0, [sp, #32]
 80206ca:	061b      	lsls	r3, r3, #24
 80206cc:	d518      	bpl.n	8020700 <_svfprintf_r+0x58>
 80206ce:	f8da 3010 	ldr.w	r3, [sl, #16]
 80206d2:	b9ab      	cbnz	r3, 8020700 <_svfprintf_r+0x58>
 80206d4:	2140      	movs	r1, #64	; 0x40
 80206d6:	4658      	mov	r0, fp
 80206d8:	f001 fe2a 	bl	8022330 <_malloc_r>
 80206dc:	f8ca 0000 	str.w	r0, [sl]
 80206e0:	f8ca 0010 	str.w	r0, [sl, #16]
 80206e4:	b948      	cbnz	r0, 80206fa <_svfprintf_r+0x52>
 80206e6:	230c      	movs	r3, #12
 80206e8:	f8cb 3000 	str.w	r3, [fp]
 80206ec:	f04f 33ff 	mov.w	r3, #4294967295
 80206f0:	9309      	str	r3, [sp, #36]	; 0x24
 80206f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80206f4:	b03d      	add	sp, #244	; 0xf4
 80206f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206fa:	2340      	movs	r3, #64	; 0x40
 80206fc:	f8ca 3014 	str.w	r3, [sl, #20]
 8020700:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8020968 <_svfprintf_r+0x2c0>
 8020704:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020708:	2300      	movs	r3, #0
 802070a:	ac2c      	add	r4, sp, #176	; 0xb0
 802070c:	941f      	str	r4, [sp, #124]	; 0x7c
 802070e:	9321      	str	r3, [sp, #132]	; 0x84
 8020710:	9320      	str	r3, [sp, #128]	; 0x80
 8020712:	9505      	str	r5, [sp, #20]
 8020714:	9303      	str	r3, [sp, #12]
 8020716:	9311      	str	r3, [sp, #68]	; 0x44
 8020718:	9310      	str	r3, [sp, #64]	; 0x40
 802071a:	9309      	str	r3, [sp, #36]	; 0x24
 802071c:	9d05      	ldr	r5, [sp, #20]
 802071e:	462b      	mov	r3, r5
 8020720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020724:	b112      	cbz	r2, 802072c <_svfprintf_r+0x84>
 8020726:	2a25      	cmp	r2, #37	; 0x25
 8020728:	f040 8083 	bne.w	8020832 <_svfprintf_r+0x18a>
 802072c:	9b05      	ldr	r3, [sp, #20]
 802072e:	1aee      	subs	r6, r5, r3
 8020730:	d00d      	beq.n	802074e <_svfprintf_r+0xa6>
 8020732:	e884 0048 	stmia.w	r4, {r3, r6}
 8020736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020738:	4433      	add	r3, r6
 802073a:	9321      	str	r3, [sp, #132]	; 0x84
 802073c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802073e:	3301      	adds	r3, #1
 8020740:	2b07      	cmp	r3, #7
 8020742:	9320      	str	r3, [sp, #128]	; 0x80
 8020744:	dc77      	bgt.n	8020836 <_svfprintf_r+0x18e>
 8020746:	3408      	adds	r4, #8
 8020748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802074a:	4433      	add	r3, r6
 802074c:	9309      	str	r3, [sp, #36]	; 0x24
 802074e:	782b      	ldrb	r3, [r5, #0]
 8020750:	2b00      	cmp	r3, #0
 8020752:	f000 8729 	beq.w	80215a8 <_svfprintf_r+0xf00>
 8020756:	2300      	movs	r3, #0
 8020758:	1c69      	adds	r1, r5, #1
 802075a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 802075e:	461a      	mov	r2, r3
 8020760:	f04f 39ff 	mov.w	r9, #4294967295
 8020764:	930a      	str	r3, [sp, #40]	; 0x28
 8020766:	461d      	mov	r5, r3
 8020768:	200a      	movs	r0, #10
 802076a:	1c4e      	adds	r6, r1, #1
 802076c:	7809      	ldrb	r1, [r1, #0]
 802076e:	9605      	str	r6, [sp, #20]
 8020770:	9102      	str	r1, [sp, #8]
 8020772:	9902      	ldr	r1, [sp, #8]
 8020774:	3920      	subs	r1, #32
 8020776:	2958      	cmp	r1, #88	; 0x58
 8020778:	f200 8418 	bhi.w	8020fac <_svfprintf_r+0x904>
 802077c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8020780:	041600a6 	.word	0x041600a6
 8020784:	00ab0416 	.word	0x00ab0416
 8020788:	04160416 	.word	0x04160416
 802078c:	04160416 	.word	0x04160416
 8020790:	04160416 	.word	0x04160416
 8020794:	006500ae 	.word	0x006500ae
 8020798:	00b70416 	.word	0x00b70416
 802079c:	041600ba 	.word	0x041600ba
 80207a0:	00da00d7 	.word	0x00da00d7
 80207a4:	00da00da 	.word	0x00da00da
 80207a8:	00da00da 	.word	0x00da00da
 80207ac:	00da00da 	.word	0x00da00da
 80207b0:	00da00da 	.word	0x00da00da
 80207b4:	04160416 	.word	0x04160416
 80207b8:	04160416 	.word	0x04160416
 80207bc:	04160416 	.word	0x04160416
 80207c0:	04160416 	.word	0x04160416
 80207c4:	04160416 	.word	0x04160416
 80207c8:	012b0115 	.word	0x012b0115
 80207cc:	012b0416 	.word	0x012b0416
 80207d0:	04160416 	.word	0x04160416
 80207d4:	04160416 	.word	0x04160416
 80207d8:	041600ed 	.word	0x041600ed
 80207dc:	03400416 	.word	0x03400416
 80207e0:	04160416 	.word	0x04160416
 80207e4:	04160416 	.word	0x04160416
 80207e8:	03a80416 	.word	0x03a80416
 80207ec:	04160416 	.word	0x04160416
 80207f0:	04160086 	.word	0x04160086
 80207f4:	04160416 	.word	0x04160416
 80207f8:	04160416 	.word	0x04160416
 80207fc:	04160416 	.word	0x04160416
 8020800:	04160416 	.word	0x04160416
 8020804:	01070416 	.word	0x01070416
 8020808:	012b006b 	.word	0x012b006b
 802080c:	012b012b 	.word	0x012b012b
 8020810:	006b00f0 	.word	0x006b00f0
 8020814:	04160416 	.word	0x04160416
 8020818:	041600fa 	.word	0x041600fa
 802081c:	03420322 	.word	0x03420322
 8020820:	01010376 	.word	0x01010376
 8020824:	03870416 	.word	0x03870416
 8020828:	03aa0416 	.word	0x03aa0416
 802082c:	04160416 	.word	0x04160416
 8020830:	03c2      	.short	0x03c2
 8020832:	461d      	mov	r5, r3
 8020834:	e773      	b.n	802071e <_svfprintf_r+0x76>
 8020836:	aa1f      	add	r2, sp, #124	; 0x7c
 8020838:	4651      	mov	r1, sl
 802083a:	4658      	mov	r0, fp
 802083c:	f002 fa72 	bl	8022d24 <__ssprint_r>
 8020840:	2800      	cmp	r0, #0
 8020842:	f040 8692 	bne.w	802156a <_svfprintf_r+0xec2>
 8020846:	ac2c      	add	r4, sp, #176	; 0xb0
 8020848:	e77e      	b.n	8020748 <_svfprintf_r+0xa0>
 802084a:	2301      	movs	r3, #1
 802084c:	222b      	movs	r2, #43	; 0x2b
 802084e:	9905      	ldr	r1, [sp, #20]
 8020850:	e78b      	b.n	802076a <_svfprintf_r+0xc2>
 8020852:	460f      	mov	r7, r1
 8020854:	e7fb      	b.n	802084e <_svfprintf_r+0x1a6>
 8020856:	b10b      	cbz	r3, 802085c <_svfprintf_r+0x1b4>
 8020858:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 802085c:	06ae      	lsls	r6, r5, #26
 802085e:	f140 80aa 	bpl.w	80209b6 <_svfprintf_r+0x30e>
 8020862:	3707      	adds	r7, #7
 8020864:	f027 0707 	bic.w	r7, r7, #7
 8020868:	f107 0308 	add.w	r3, r7, #8
 802086c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020870:	9304      	str	r3, [sp, #16]
 8020872:	2e00      	cmp	r6, #0
 8020874:	f177 0300 	sbcs.w	r3, r7, #0
 8020878:	da06      	bge.n	8020888 <_svfprintf_r+0x1e0>
 802087a:	4276      	negs	r6, r6
 802087c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8020880:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8020884:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8020888:	2301      	movs	r3, #1
 802088a:	e2ca      	b.n	8020e22 <_svfprintf_r+0x77a>
 802088c:	b10b      	cbz	r3, 8020892 <_svfprintf_r+0x1ea>
 802088e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020892:	4b37      	ldr	r3, [pc, #220]	; (8020970 <_svfprintf_r+0x2c8>)
 8020894:	9311      	str	r3, [sp, #68]	; 0x44
 8020896:	06ab      	lsls	r3, r5, #26
 8020898:	f140 8339 	bpl.w	8020f0e <_svfprintf_r+0x866>
 802089c:	3707      	adds	r7, #7
 802089e:	f027 0707 	bic.w	r7, r7, #7
 80208a2:	f107 0308 	add.w	r3, r7, #8
 80208a6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80208aa:	9304      	str	r3, [sp, #16]
 80208ac:	07e8      	lsls	r0, r5, #31
 80208ae:	d50b      	bpl.n	80208c8 <_svfprintf_r+0x220>
 80208b0:	ea56 0307 	orrs.w	r3, r6, r7
 80208b4:	d008      	beq.n	80208c8 <_svfprintf_r+0x220>
 80208b6:	2330      	movs	r3, #48	; 0x30
 80208b8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80208bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80208c0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80208c4:	f045 0502 	orr.w	r5, r5, #2
 80208c8:	2302      	movs	r3, #2
 80208ca:	e2a7      	b.n	8020e1c <_svfprintf_r+0x774>
 80208cc:	2a00      	cmp	r2, #0
 80208ce:	d1be      	bne.n	802084e <_svfprintf_r+0x1a6>
 80208d0:	2301      	movs	r3, #1
 80208d2:	2220      	movs	r2, #32
 80208d4:	e7bb      	b.n	802084e <_svfprintf_r+0x1a6>
 80208d6:	f045 0501 	orr.w	r5, r5, #1
 80208da:	e7b8      	b.n	802084e <_svfprintf_r+0x1a6>
 80208dc:	683e      	ldr	r6, [r7, #0]
 80208de:	960a      	str	r6, [sp, #40]	; 0x28
 80208e0:	2e00      	cmp	r6, #0
 80208e2:	f107 0104 	add.w	r1, r7, #4
 80208e6:	dab4      	bge.n	8020852 <_svfprintf_r+0x1aa>
 80208e8:	4276      	negs	r6, r6
 80208ea:	960a      	str	r6, [sp, #40]	; 0x28
 80208ec:	460f      	mov	r7, r1
 80208ee:	f045 0504 	orr.w	r5, r5, #4
 80208f2:	e7ac      	b.n	802084e <_svfprintf_r+0x1a6>
 80208f4:	9905      	ldr	r1, [sp, #20]
 80208f6:	1c4e      	adds	r6, r1, #1
 80208f8:	7809      	ldrb	r1, [r1, #0]
 80208fa:	9102      	str	r1, [sp, #8]
 80208fc:	292a      	cmp	r1, #42	; 0x2a
 80208fe:	d010      	beq.n	8020922 <_svfprintf_r+0x27a>
 8020900:	f04f 0900 	mov.w	r9, #0
 8020904:	9605      	str	r6, [sp, #20]
 8020906:	9902      	ldr	r1, [sp, #8]
 8020908:	3930      	subs	r1, #48	; 0x30
 802090a:	2909      	cmp	r1, #9
 802090c:	f63f af31 	bhi.w	8020772 <_svfprintf_r+0xca>
 8020910:	fb00 1909 	mla	r9, r0, r9, r1
 8020914:	9905      	ldr	r1, [sp, #20]
 8020916:	460e      	mov	r6, r1
 8020918:	f816 1b01 	ldrb.w	r1, [r6], #1
 802091c:	9102      	str	r1, [sp, #8]
 802091e:	9605      	str	r6, [sp, #20]
 8020920:	e7f1      	b.n	8020906 <_svfprintf_r+0x25e>
 8020922:	6839      	ldr	r1, [r7, #0]
 8020924:	9605      	str	r6, [sp, #20]
 8020926:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 802092a:	3704      	adds	r7, #4
 802092c:	e78f      	b.n	802084e <_svfprintf_r+0x1a6>
 802092e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8020932:	e78c      	b.n	802084e <_svfprintf_r+0x1a6>
 8020934:	2100      	movs	r1, #0
 8020936:	910a      	str	r1, [sp, #40]	; 0x28
 8020938:	9902      	ldr	r1, [sp, #8]
 802093a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802093c:	3930      	subs	r1, #48	; 0x30
 802093e:	fb00 1106 	mla	r1, r0, r6, r1
 8020942:	910a      	str	r1, [sp, #40]	; 0x28
 8020944:	9905      	ldr	r1, [sp, #20]
 8020946:	460e      	mov	r6, r1
 8020948:	f816 1b01 	ldrb.w	r1, [r6], #1
 802094c:	9102      	str	r1, [sp, #8]
 802094e:	9902      	ldr	r1, [sp, #8]
 8020950:	9605      	str	r6, [sp, #20]
 8020952:	3930      	subs	r1, #48	; 0x30
 8020954:	2909      	cmp	r1, #9
 8020956:	d9ef      	bls.n	8020938 <_svfprintf_r+0x290>
 8020958:	e70b      	b.n	8020772 <_svfprintf_r+0xca>
 802095a:	f045 0508 	orr.w	r5, r5, #8
 802095e:	e776      	b.n	802084e <_svfprintf_r+0x1a6>
 8020960:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8020964:	e773      	b.n	802084e <_svfprintf_r+0x1a6>
 8020966:	bf00      	nop
	...
 8020970:	0803223c 	.word	0x0803223c
 8020974:	9905      	ldr	r1, [sp, #20]
 8020976:	7809      	ldrb	r1, [r1, #0]
 8020978:	296c      	cmp	r1, #108	; 0x6c
 802097a:	d105      	bne.n	8020988 <_svfprintf_r+0x2e0>
 802097c:	9905      	ldr	r1, [sp, #20]
 802097e:	3101      	adds	r1, #1
 8020980:	9105      	str	r1, [sp, #20]
 8020982:	f045 0520 	orr.w	r5, r5, #32
 8020986:	e762      	b.n	802084e <_svfprintf_r+0x1a6>
 8020988:	f045 0510 	orr.w	r5, r5, #16
 802098c:	e75f      	b.n	802084e <_svfprintf_r+0x1a6>
 802098e:	1d3b      	adds	r3, r7, #4
 8020990:	9304      	str	r3, [sp, #16]
 8020992:	2600      	movs	r6, #0
 8020994:	683b      	ldr	r3, [r7, #0]
 8020996:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 802099a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 802099e:	f04f 0901 	mov.w	r9, #1
 80209a2:	4637      	mov	r7, r6
 80209a4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80209a8:	e11b      	b.n	8020be2 <_svfprintf_r+0x53a>
 80209aa:	b10b      	cbz	r3, 80209b0 <_svfprintf_r+0x308>
 80209ac:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80209b0:	f045 0510 	orr.w	r5, r5, #16
 80209b4:	e752      	b.n	802085c <_svfprintf_r+0x1b4>
 80209b6:	f015 0f10 	tst.w	r5, #16
 80209ba:	f107 0304 	add.w	r3, r7, #4
 80209be:	d003      	beq.n	80209c8 <_svfprintf_r+0x320>
 80209c0:	683e      	ldr	r6, [r7, #0]
 80209c2:	9304      	str	r3, [sp, #16]
 80209c4:	17f7      	asrs	r7, r6, #31
 80209c6:	e754      	b.n	8020872 <_svfprintf_r+0x1ca>
 80209c8:	683e      	ldr	r6, [r7, #0]
 80209ca:	9304      	str	r3, [sp, #16]
 80209cc:	f015 0f40 	tst.w	r5, #64	; 0x40
 80209d0:	bf18      	it	ne
 80209d2:	b236      	sxthne	r6, r6
 80209d4:	e7f6      	b.n	80209c4 <_svfprintf_r+0x31c>
 80209d6:	b10b      	cbz	r3, 80209dc <_svfprintf_r+0x334>
 80209d8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80209dc:	3707      	adds	r7, #7
 80209de:	f027 0707 	bic.w	r7, r7, #7
 80209e2:	f107 0308 	add.w	r3, r7, #8
 80209e6:	9304      	str	r3, [sp, #16]
 80209e8:	ed97 7b00 	vldr	d7, [r7]
 80209ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80209f0:	9b06      	ldr	r3, [sp, #24]
 80209f2:	9312      	str	r3, [sp, #72]	; 0x48
 80209f4:	9b07      	ldr	r3, [sp, #28]
 80209f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80209fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80209fc:	f04f 32ff 	mov.w	r2, #4294967295
 8020a00:	4b4a      	ldr	r3, [pc, #296]	; (8020b2c <_svfprintf_r+0x484>)
 8020a02:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8020a06:	f7e0 f8a5 	bl	8000b54 <__aeabi_dcmpun>
 8020a0a:	2800      	cmp	r0, #0
 8020a0c:	f040 85d5 	bne.w	80215ba <_svfprintf_r+0xf12>
 8020a10:	f04f 32ff 	mov.w	r2, #4294967295
 8020a14:	4b45      	ldr	r3, [pc, #276]	; (8020b2c <_svfprintf_r+0x484>)
 8020a16:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8020a1a:	f7e0 f87d 	bl	8000b18 <__aeabi_dcmple>
 8020a1e:	2800      	cmp	r0, #0
 8020a20:	f040 85cb 	bne.w	80215ba <_svfprintf_r+0xf12>
 8020a24:	2200      	movs	r2, #0
 8020a26:	2300      	movs	r3, #0
 8020a28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020a2c:	f7e0 f86a 	bl	8000b04 <__aeabi_dcmplt>
 8020a30:	b110      	cbz	r0, 8020a38 <_svfprintf_r+0x390>
 8020a32:	232d      	movs	r3, #45	; 0x2d
 8020a34:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8020a38:	4b3d      	ldr	r3, [pc, #244]	; (8020b30 <_svfprintf_r+0x488>)
 8020a3a:	4a3e      	ldr	r2, [pc, #248]	; (8020b34 <_svfprintf_r+0x48c>)
 8020a3c:	9902      	ldr	r1, [sp, #8]
 8020a3e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8020a42:	2947      	cmp	r1, #71	; 0x47
 8020a44:	bfcc      	ite	gt
 8020a46:	4690      	movgt	r8, r2
 8020a48:	4698      	movle	r8, r3
 8020a4a:	f04f 0903 	mov.w	r9, #3
 8020a4e:	2600      	movs	r6, #0
 8020a50:	4637      	mov	r7, r6
 8020a52:	e0c6      	b.n	8020be2 <_svfprintf_r+0x53a>
 8020a54:	f1b9 3fff 	cmp.w	r9, #4294967295
 8020a58:	d022      	beq.n	8020aa0 <_svfprintf_r+0x3f8>
 8020a5a:	9b02      	ldr	r3, [sp, #8]
 8020a5c:	f023 0320 	bic.w	r3, r3, #32
 8020a60:	2b47      	cmp	r3, #71	; 0x47
 8020a62:	d104      	bne.n	8020a6e <_svfprintf_r+0x3c6>
 8020a64:	f1b9 0f00 	cmp.w	r9, #0
 8020a68:	bf08      	it	eq
 8020a6a:	f04f 0901 	moveq.w	r9, #1
 8020a6e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8020a72:	930c      	str	r3, [sp, #48]	; 0x30
 8020a74:	9b07      	ldr	r3, [sp, #28]
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	da15      	bge.n	8020aa6 <_svfprintf_r+0x3fe>
 8020a7a:	9b06      	ldr	r3, [sp, #24]
 8020a7c:	930e      	str	r3, [sp, #56]	; 0x38
 8020a7e:	9b07      	ldr	r3, [sp, #28]
 8020a80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020a84:	930f      	str	r3, [sp, #60]	; 0x3c
 8020a86:	232d      	movs	r3, #45	; 0x2d
 8020a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8020a8a:	9b02      	ldr	r3, [sp, #8]
 8020a8c:	f023 0720 	bic.w	r7, r3, #32
 8020a90:	2f46      	cmp	r7, #70	; 0x46
 8020a92:	d00e      	beq.n	8020ab2 <_svfprintf_r+0x40a>
 8020a94:	2f45      	cmp	r7, #69	; 0x45
 8020a96:	d146      	bne.n	8020b26 <_svfprintf_r+0x47e>
 8020a98:	f109 0601 	add.w	r6, r9, #1
 8020a9c:	2102      	movs	r1, #2
 8020a9e:	e00a      	b.n	8020ab6 <_svfprintf_r+0x40e>
 8020aa0:	f04f 0906 	mov.w	r9, #6
 8020aa4:	e7e3      	b.n	8020a6e <_svfprintf_r+0x3c6>
 8020aa6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8020aaa:	2300      	movs	r3, #0
 8020aac:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8020ab0:	e7ea      	b.n	8020a88 <_svfprintf_r+0x3e0>
 8020ab2:	464e      	mov	r6, r9
 8020ab4:	2103      	movs	r1, #3
 8020ab6:	ab1d      	add	r3, sp, #116	; 0x74
 8020ab8:	9301      	str	r3, [sp, #4]
 8020aba:	ab1a      	add	r3, sp, #104	; 0x68
 8020abc:	9300      	str	r3, [sp, #0]
 8020abe:	4632      	mov	r2, r6
 8020ac0:	ab19      	add	r3, sp, #100	; 0x64
 8020ac2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8020ac6:	4658      	mov	r0, fp
 8020ac8:	f000 fe4e 	bl	8021768 <_dtoa_r>
 8020acc:	2f47      	cmp	r7, #71	; 0x47
 8020ace:	4680      	mov	r8, r0
 8020ad0:	d102      	bne.n	8020ad8 <_svfprintf_r+0x430>
 8020ad2:	07e8      	lsls	r0, r5, #31
 8020ad4:	f140 857e 	bpl.w	80215d4 <_svfprintf_r+0xf2c>
 8020ad8:	eb08 0306 	add.w	r3, r8, r6
 8020adc:	2f46      	cmp	r7, #70	; 0x46
 8020ade:	9303      	str	r3, [sp, #12]
 8020ae0:	d111      	bne.n	8020b06 <_svfprintf_r+0x45e>
 8020ae2:	f898 3000 	ldrb.w	r3, [r8]
 8020ae6:	2b30      	cmp	r3, #48	; 0x30
 8020ae8:	d109      	bne.n	8020afe <_svfprintf_r+0x456>
 8020aea:	2200      	movs	r2, #0
 8020aec:	2300      	movs	r3, #0
 8020aee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020af2:	f7df fffd 	bl	8000af0 <__aeabi_dcmpeq>
 8020af6:	b910      	cbnz	r0, 8020afe <_svfprintf_r+0x456>
 8020af8:	f1c6 0601 	rsb	r6, r6, #1
 8020afc:	9619      	str	r6, [sp, #100]	; 0x64
 8020afe:	9a03      	ldr	r2, [sp, #12]
 8020b00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020b02:	441a      	add	r2, r3
 8020b04:	9203      	str	r2, [sp, #12]
 8020b06:	2200      	movs	r2, #0
 8020b08:	2300      	movs	r3, #0
 8020b0a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020b0e:	f7df ffef 	bl	8000af0 <__aeabi_dcmpeq>
 8020b12:	b988      	cbnz	r0, 8020b38 <_svfprintf_r+0x490>
 8020b14:	2230      	movs	r2, #48	; 0x30
 8020b16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020b18:	9903      	ldr	r1, [sp, #12]
 8020b1a:	4299      	cmp	r1, r3
 8020b1c:	d90e      	bls.n	8020b3c <_svfprintf_r+0x494>
 8020b1e:	1c59      	adds	r1, r3, #1
 8020b20:	911d      	str	r1, [sp, #116]	; 0x74
 8020b22:	701a      	strb	r2, [r3, #0]
 8020b24:	e7f7      	b.n	8020b16 <_svfprintf_r+0x46e>
 8020b26:	464e      	mov	r6, r9
 8020b28:	e7b8      	b.n	8020a9c <_svfprintf_r+0x3f4>
 8020b2a:	bf00      	nop
 8020b2c:	7fefffff 	.word	0x7fefffff
 8020b30:	08032230 	.word	0x08032230
 8020b34:	08032234 	.word	0x08032234
 8020b38:	9b03      	ldr	r3, [sp, #12]
 8020b3a:	931d      	str	r3, [sp, #116]	; 0x74
 8020b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020b3e:	2f47      	cmp	r7, #71	; 0x47
 8020b40:	eba3 0308 	sub.w	r3, r3, r8
 8020b44:	9303      	str	r3, [sp, #12]
 8020b46:	f040 80fa 	bne.w	8020d3e <_svfprintf_r+0x696>
 8020b4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020b4c:	1cd9      	adds	r1, r3, #3
 8020b4e:	db02      	blt.n	8020b56 <_svfprintf_r+0x4ae>
 8020b50:	4599      	cmp	r9, r3
 8020b52:	f280 8120 	bge.w	8020d96 <_svfprintf_r+0x6ee>
 8020b56:	9b02      	ldr	r3, [sp, #8]
 8020b58:	3b02      	subs	r3, #2
 8020b5a:	9302      	str	r3, [sp, #8]
 8020b5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020b5e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8020b62:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8020b66:	1e53      	subs	r3, r2, #1
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	9319      	str	r3, [sp, #100]	; 0x64
 8020b6c:	bfb6      	itet	lt
 8020b6e:	f1c2 0301 	rsblt	r3, r2, #1
 8020b72:	222b      	movge	r2, #43	; 0x2b
 8020b74:	222d      	movlt	r2, #45	; 0x2d
 8020b76:	2b09      	cmp	r3, #9
 8020b78:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8020b7c:	f340 80fb 	ble.w	8020d76 <_svfprintf_r+0x6ce>
 8020b80:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8020b84:	260a      	movs	r6, #10
 8020b86:	fb93 f0f6 	sdiv	r0, r3, r6
 8020b8a:	fb06 3310 	mls	r3, r6, r0, r3
 8020b8e:	3330      	adds	r3, #48	; 0x30
 8020b90:	2809      	cmp	r0, #9
 8020b92:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020b96:	f102 31ff 	add.w	r1, r2, #4294967295
 8020b9a:	4603      	mov	r3, r0
 8020b9c:	f300 80e4 	bgt.w	8020d68 <_svfprintf_r+0x6c0>
 8020ba0:	3330      	adds	r3, #48	; 0x30
 8020ba2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8020ba6:	3a02      	subs	r2, #2
 8020ba8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8020bac:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8020bb0:	4282      	cmp	r2, r0
 8020bb2:	4619      	mov	r1, r3
 8020bb4:	f0c0 80da 	bcc.w	8020d6c <_svfprintf_r+0x6c4>
 8020bb8:	9a03      	ldr	r2, [sp, #12]
 8020bba:	ab1b      	add	r3, sp, #108	; 0x6c
 8020bbc:	1acb      	subs	r3, r1, r3
 8020bbe:	2a01      	cmp	r2, #1
 8020bc0:	9310      	str	r3, [sp, #64]	; 0x40
 8020bc2:	eb03 0902 	add.w	r9, r3, r2
 8020bc6:	dc02      	bgt.n	8020bce <_svfprintf_r+0x526>
 8020bc8:	f015 0701 	ands.w	r7, r5, #1
 8020bcc:	d002      	beq.n	8020bd4 <_svfprintf_r+0x52c>
 8020bce:	9b08      	ldr	r3, [sp, #32]
 8020bd0:	2700      	movs	r7, #0
 8020bd2:	4499      	add	r9, r3
 8020bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020bd6:	b113      	cbz	r3, 8020bde <_svfprintf_r+0x536>
 8020bd8:	232d      	movs	r3, #45	; 0x2d
 8020bda:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8020bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020be0:	2600      	movs	r6, #0
 8020be2:	454e      	cmp	r6, r9
 8020be4:	4633      	mov	r3, r6
 8020be6:	bfb8      	it	lt
 8020be8:	464b      	movlt	r3, r9
 8020bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8020bec:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8020bf0:	b113      	cbz	r3, 8020bf8 <_svfprintf_r+0x550>
 8020bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020bf4:	3301      	adds	r3, #1
 8020bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8020bf8:	f015 0302 	ands.w	r3, r5, #2
 8020bfc:	9314      	str	r3, [sp, #80]	; 0x50
 8020bfe:	bf1e      	ittt	ne
 8020c00:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8020c02:	3302      	addne	r3, #2
 8020c04:	930b      	strne	r3, [sp, #44]	; 0x2c
 8020c06:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8020c0a:	9315      	str	r3, [sp, #84]	; 0x54
 8020c0c:	d118      	bne.n	8020c40 <_svfprintf_r+0x598>
 8020c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020c12:	1a9b      	subs	r3, r3, r2
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	930c      	str	r3, [sp, #48]	; 0x30
 8020c18:	dd12      	ble.n	8020c40 <_svfprintf_r+0x598>
 8020c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c1c:	2b10      	cmp	r3, #16
 8020c1e:	4ba9      	ldr	r3, [pc, #676]	; (8020ec4 <_svfprintf_r+0x81c>)
 8020c20:	6023      	str	r3, [r4, #0]
 8020c22:	f300 81d5 	bgt.w	8020fd0 <_svfprintf_r+0x928>
 8020c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c28:	6063      	str	r3, [r4, #4]
 8020c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020c2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c2e:	4413      	add	r3, r2
 8020c30:	9321      	str	r3, [sp, #132]	; 0x84
 8020c32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c34:	3301      	adds	r3, #1
 8020c36:	2b07      	cmp	r3, #7
 8020c38:	9320      	str	r3, [sp, #128]	; 0x80
 8020c3a:	f300 81e2 	bgt.w	8021002 <_svfprintf_r+0x95a>
 8020c3e:	3408      	adds	r4, #8
 8020c40:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8020c44:	b173      	cbz	r3, 8020c64 <_svfprintf_r+0x5bc>
 8020c46:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8020c4a:	6023      	str	r3, [r4, #0]
 8020c4c:	2301      	movs	r3, #1
 8020c4e:	6063      	str	r3, [r4, #4]
 8020c50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c52:	3301      	adds	r3, #1
 8020c54:	9321      	str	r3, [sp, #132]	; 0x84
 8020c56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c58:	3301      	adds	r3, #1
 8020c5a:	2b07      	cmp	r3, #7
 8020c5c:	9320      	str	r3, [sp, #128]	; 0x80
 8020c5e:	f300 81da 	bgt.w	8021016 <_svfprintf_r+0x96e>
 8020c62:	3408      	adds	r4, #8
 8020c64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020c66:	b16b      	cbz	r3, 8020c84 <_svfprintf_r+0x5dc>
 8020c68:	ab18      	add	r3, sp, #96	; 0x60
 8020c6a:	6023      	str	r3, [r4, #0]
 8020c6c:	2302      	movs	r3, #2
 8020c6e:	6063      	str	r3, [r4, #4]
 8020c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c72:	3302      	adds	r3, #2
 8020c74:	9321      	str	r3, [sp, #132]	; 0x84
 8020c76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c78:	3301      	adds	r3, #1
 8020c7a:	2b07      	cmp	r3, #7
 8020c7c:	9320      	str	r3, [sp, #128]	; 0x80
 8020c7e:	f300 81d4 	bgt.w	802102a <_svfprintf_r+0x982>
 8020c82:	3408      	adds	r4, #8
 8020c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020c86:	2b80      	cmp	r3, #128	; 0x80
 8020c88:	d114      	bne.n	8020cb4 <_svfprintf_r+0x60c>
 8020c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020c8e:	1a9b      	subs	r3, r3, r2
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	dd0f      	ble.n	8020cb4 <_svfprintf_r+0x60c>
 8020c94:	4a8c      	ldr	r2, [pc, #560]	; (8020ec8 <_svfprintf_r+0x820>)
 8020c96:	6022      	str	r2, [r4, #0]
 8020c98:	2b10      	cmp	r3, #16
 8020c9a:	f300 81d0 	bgt.w	802103e <_svfprintf_r+0x996>
 8020c9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020ca0:	6063      	str	r3, [r4, #4]
 8020ca2:	4413      	add	r3, r2
 8020ca4:	9321      	str	r3, [sp, #132]	; 0x84
 8020ca6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020ca8:	3301      	adds	r3, #1
 8020caa:	2b07      	cmp	r3, #7
 8020cac:	9320      	str	r3, [sp, #128]	; 0x80
 8020cae:	f300 81df 	bgt.w	8021070 <_svfprintf_r+0x9c8>
 8020cb2:	3408      	adds	r4, #8
 8020cb4:	eba6 0609 	sub.w	r6, r6, r9
 8020cb8:	2e00      	cmp	r6, #0
 8020cba:	dd0f      	ble.n	8020cdc <_svfprintf_r+0x634>
 8020cbc:	4b82      	ldr	r3, [pc, #520]	; (8020ec8 <_svfprintf_r+0x820>)
 8020cbe:	6023      	str	r3, [r4, #0]
 8020cc0:	2e10      	cmp	r6, #16
 8020cc2:	f300 81df 	bgt.w	8021084 <_svfprintf_r+0x9dc>
 8020cc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020cc8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8020cca:	6066      	str	r6, [r4, #4]
 8020ccc:	3301      	adds	r3, #1
 8020cce:	4406      	add	r6, r0
 8020cd0:	2b07      	cmp	r3, #7
 8020cd2:	9621      	str	r6, [sp, #132]	; 0x84
 8020cd4:	9320      	str	r3, [sp, #128]	; 0x80
 8020cd6:	f300 81ec 	bgt.w	80210b2 <_svfprintf_r+0xa0a>
 8020cda:	3408      	adds	r4, #8
 8020cdc:	05eb      	lsls	r3, r5, #23
 8020cde:	f100 81f2 	bmi.w	80210c6 <_svfprintf_r+0xa1e>
 8020ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020ce4:	e884 0300 	stmia.w	r4, {r8, r9}
 8020ce8:	444b      	add	r3, r9
 8020cea:	9321      	str	r3, [sp, #132]	; 0x84
 8020cec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020cee:	3301      	adds	r3, #1
 8020cf0:	2b07      	cmp	r3, #7
 8020cf2:	9320      	str	r3, [sp, #128]	; 0x80
 8020cf4:	f340 8419 	ble.w	802152a <_svfprintf_r+0xe82>
 8020cf8:	aa1f      	add	r2, sp, #124	; 0x7c
 8020cfa:	4651      	mov	r1, sl
 8020cfc:	4658      	mov	r0, fp
 8020cfe:	f002 f811 	bl	8022d24 <__ssprint_r>
 8020d02:	2800      	cmp	r0, #0
 8020d04:	f040 8431 	bne.w	802156a <_svfprintf_r+0xec2>
 8020d08:	ac2c      	add	r4, sp, #176	; 0xb0
 8020d0a:	076b      	lsls	r3, r5, #29
 8020d0c:	f100 8410 	bmi.w	8021530 <_svfprintf_r+0xe88>
 8020d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020d16:	428a      	cmp	r2, r1
 8020d18:	bfac      	ite	ge
 8020d1a:	189b      	addge	r3, r3, r2
 8020d1c:	185b      	addlt	r3, r3, r1
 8020d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8020d20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020d22:	b13b      	cbz	r3, 8020d34 <_svfprintf_r+0x68c>
 8020d24:	aa1f      	add	r2, sp, #124	; 0x7c
 8020d26:	4651      	mov	r1, sl
 8020d28:	4658      	mov	r0, fp
 8020d2a:	f001 fffb 	bl	8022d24 <__ssprint_r>
 8020d2e:	2800      	cmp	r0, #0
 8020d30:	f040 841b 	bne.w	802156a <_svfprintf_r+0xec2>
 8020d34:	2300      	movs	r3, #0
 8020d36:	9320      	str	r3, [sp, #128]	; 0x80
 8020d38:	9f04      	ldr	r7, [sp, #16]
 8020d3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8020d3c:	e4ee      	b.n	802071c <_svfprintf_r+0x74>
 8020d3e:	9b02      	ldr	r3, [sp, #8]
 8020d40:	2b65      	cmp	r3, #101	; 0x65
 8020d42:	f77f af0b 	ble.w	8020b5c <_svfprintf_r+0x4b4>
 8020d46:	9b02      	ldr	r3, [sp, #8]
 8020d48:	2b66      	cmp	r3, #102	; 0x66
 8020d4a:	d124      	bne.n	8020d96 <_svfprintf_r+0x6ee>
 8020d4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	dd19      	ble.n	8020d86 <_svfprintf_r+0x6de>
 8020d52:	f1b9 0f00 	cmp.w	r9, #0
 8020d56:	d101      	bne.n	8020d5c <_svfprintf_r+0x6b4>
 8020d58:	07ea      	lsls	r2, r5, #31
 8020d5a:	d502      	bpl.n	8020d62 <_svfprintf_r+0x6ba>
 8020d5c:	9a08      	ldr	r2, [sp, #32]
 8020d5e:	4413      	add	r3, r2
 8020d60:	444b      	add	r3, r9
 8020d62:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8020d64:	4699      	mov	r9, r3
 8020d66:	e735      	b.n	8020bd4 <_svfprintf_r+0x52c>
 8020d68:	460a      	mov	r2, r1
 8020d6a:	e70c      	b.n	8020b86 <_svfprintf_r+0x4de>
 8020d6c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8020d70:	f803 1b01 	strb.w	r1, [r3], #1
 8020d74:	e71c      	b.n	8020bb0 <_svfprintf_r+0x508>
 8020d76:	2230      	movs	r2, #48	; 0x30
 8020d78:	4413      	add	r3, r2
 8020d7a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8020d7e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8020d82:	a91c      	add	r1, sp, #112	; 0x70
 8020d84:	e718      	b.n	8020bb8 <_svfprintf_r+0x510>
 8020d86:	f1b9 0f00 	cmp.w	r9, #0
 8020d8a:	d101      	bne.n	8020d90 <_svfprintf_r+0x6e8>
 8020d8c:	07eb      	lsls	r3, r5, #31
 8020d8e:	d515      	bpl.n	8020dbc <_svfprintf_r+0x714>
 8020d90:	9b08      	ldr	r3, [sp, #32]
 8020d92:	3301      	adds	r3, #1
 8020d94:	e7e4      	b.n	8020d60 <_svfprintf_r+0x6b8>
 8020d96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020d98:	9b03      	ldr	r3, [sp, #12]
 8020d9a:	429a      	cmp	r2, r3
 8020d9c:	db06      	blt.n	8020dac <_svfprintf_r+0x704>
 8020d9e:	07ef      	lsls	r7, r5, #31
 8020da0:	d50e      	bpl.n	8020dc0 <_svfprintf_r+0x718>
 8020da2:	9b08      	ldr	r3, [sp, #32]
 8020da4:	4413      	add	r3, r2
 8020da6:	2267      	movs	r2, #103	; 0x67
 8020da8:	9202      	str	r2, [sp, #8]
 8020daa:	e7da      	b.n	8020d62 <_svfprintf_r+0x6ba>
 8020dac:	9b03      	ldr	r3, [sp, #12]
 8020dae:	9908      	ldr	r1, [sp, #32]
 8020db0:	2a00      	cmp	r2, #0
 8020db2:	440b      	add	r3, r1
 8020db4:	dcf7      	bgt.n	8020da6 <_svfprintf_r+0x6fe>
 8020db6:	f1c2 0201 	rsb	r2, r2, #1
 8020dba:	e7f3      	b.n	8020da4 <_svfprintf_r+0x6fc>
 8020dbc:	2301      	movs	r3, #1
 8020dbe:	e7d0      	b.n	8020d62 <_svfprintf_r+0x6ba>
 8020dc0:	4613      	mov	r3, r2
 8020dc2:	e7f0      	b.n	8020da6 <_svfprintf_r+0x6fe>
 8020dc4:	b10b      	cbz	r3, 8020dca <_svfprintf_r+0x722>
 8020dc6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020dca:	f015 0f20 	tst.w	r5, #32
 8020dce:	f107 0304 	add.w	r3, r7, #4
 8020dd2:	d008      	beq.n	8020de6 <_svfprintf_r+0x73e>
 8020dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020dd6:	683a      	ldr	r2, [r7, #0]
 8020dd8:	17ce      	asrs	r6, r1, #31
 8020dda:	4608      	mov	r0, r1
 8020ddc:	4631      	mov	r1, r6
 8020dde:	e9c2 0100 	strd	r0, r1, [r2]
 8020de2:	461f      	mov	r7, r3
 8020de4:	e49a      	b.n	802071c <_svfprintf_r+0x74>
 8020de6:	06ee      	lsls	r6, r5, #27
 8020de8:	d503      	bpl.n	8020df2 <_svfprintf_r+0x74a>
 8020dea:	683a      	ldr	r2, [r7, #0]
 8020dec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020dee:	6011      	str	r1, [r2, #0]
 8020df0:	e7f7      	b.n	8020de2 <_svfprintf_r+0x73a>
 8020df2:	0668      	lsls	r0, r5, #25
 8020df4:	d5f9      	bpl.n	8020dea <_svfprintf_r+0x742>
 8020df6:	683a      	ldr	r2, [r7, #0]
 8020df8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020dfc:	8011      	strh	r1, [r2, #0]
 8020dfe:	e7f0      	b.n	8020de2 <_svfprintf_r+0x73a>
 8020e00:	f045 0510 	orr.w	r5, r5, #16
 8020e04:	f015 0320 	ands.w	r3, r5, #32
 8020e08:	d022      	beq.n	8020e50 <_svfprintf_r+0x7a8>
 8020e0a:	3707      	adds	r7, #7
 8020e0c:	f027 0707 	bic.w	r7, r7, #7
 8020e10:	f107 0308 	add.w	r3, r7, #8
 8020e14:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020e18:	9304      	str	r3, [sp, #16]
 8020e1a:	2300      	movs	r3, #0
 8020e1c:	2200      	movs	r2, #0
 8020e1e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020e22:	f1b9 3fff 	cmp.w	r9, #4294967295
 8020e26:	f000 83db 	beq.w	80215e0 <_svfprintf_r+0xf38>
 8020e2a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8020e2e:	920b      	str	r2, [sp, #44]	; 0x2c
 8020e30:	ea56 0207 	orrs.w	r2, r6, r7
 8020e34:	f040 83d9 	bne.w	80215ea <_svfprintf_r+0xf42>
 8020e38:	f1b9 0f00 	cmp.w	r9, #0
 8020e3c:	f000 80aa 	beq.w	8020f94 <_svfprintf_r+0x8ec>
 8020e40:	2b01      	cmp	r3, #1
 8020e42:	d076      	beq.n	8020f32 <_svfprintf_r+0x88a>
 8020e44:	2b02      	cmp	r3, #2
 8020e46:	f000 8091 	beq.w	8020f6c <_svfprintf_r+0x8c4>
 8020e4a:	2600      	movs	r6, #0
 8020e4c:	2700      	movs	r7, #0
 8020e4e:	e3d2      	b.n	80215f6 <_svfprintf_r+0xf4e>
 8020e50:	1d3a      	adds	r2, r7, #4
 8020e52:	f015 0110 	ands.w	r1, r5, #16
 8020e56:	9204      	str	r2, [sp, #16]
 8020e58:	d002      	beq.n	8020e60 <_svfprintf_r+0x7b8>
 8020e5a:	683e      	ldr	r6, [r7, #0]
 8020e5c:	2700      	movs	r7, #0
 8020e5e:	e7dd      	b.n	8020e1c <_svfprintf_r+0x774>
 8020e60:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8020e64:	d0f9      	beq.n	8020e5a <_svfprintf_r+0x7b2>
 8020e66:	883e      	ldrh	r6, [r7, #0]
 8020e68:	2700      	movs	r7, #0
 8020e6a:	e7d6      	b.n	8020e1a <_svfprintf_r+0x772>
 8020e6c:	1d3b      	adds	r3, r7, #4
 8020e6e:	9304      	str	r3, [sp, #16]
 8020e70:	2330      	movs	r3, #48	; 0x30
 8020e72:	2278      	movs	r2, #120	; 0x78
 8020e74:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8020e78:	4b14      	ldr	r3, [pc, #80]	; (8020ecc <_svfprintf_r+0x824>)
 8020e7a:	683e      	ldr	r6, [r7, #0]
 8020e7c:	9311      	str	r3, [sp, #68]	; 0x44
 8020e7e:	2700      	movs	r7, #0
 8020e80:	f045 0502 	orr.w	r5, r5, #2
 8020e84:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8020e88:	2302      	movs	r3, #2
 8020e8a:	9202      	str	r2, [sp, #8]
 8020e8c:	e7c6      	b.n	8020e1c <_svfprintf_r+0x774>
 8020e8e:	1d3b      	adds	r3, r7, #4
 8020e90:	2600      	movs	r6, #0
 8020e92:	f1b9 3fff 	cmp.w	r9, #4294967295
 8020e96:	9304      	str	r3, [sp, #16]
 8020e98:	f8d7 8000 	ldr.w	r8, [r7]
 8020e9c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8020ea0:	d00a      	beq.n	8020eb8 <_svfprintf_r+0x810>
 8020ea2:	464a      	mov	r2, r9
 8020ea4:	4631      	mov	r1, r6
 8020ea6:	4640      	mov	r0, r8
 8020ea8:	f7df f9aa 	bl	8000200 <memchr>
 8020eac:	2800      	cmp	r0, #0
 8020eae:	f000 808d 	beq.w	8020fcc <_svfprintf_r+0x924>
 8020eb2:	eba0 0908 	sub.w	r9, r0, r8
 8020eb6:	e5cb      	b.n	8020a50 <_svfprintf_r+0x3a8>
 8020eb8:	4640      	mov	r0, r8
 8020eba:	f7df f9f1 	bl	80002a0 <strlen>
 8020ebe:	4681      	mov	r9, r0
 8020ec0:	e5c6      	b.n	8020a50 <_svfprintf_r+0x3a8>
 8020ec2:	bf00      	nop
 8020ec4:	0803225e 	.word	0x0803225e
 8020ec8:	0803226e 	.word	0x0803226e
 8020ecc:	0803224d 	.word	0x0803224d
 8020ed0:	f045 0510 	orr.w	r5, r5, #16
 8020ed4:	06a9      	lsls	r1, r5, #26
 8020ed6:	d509      	bpl.n	8020eec <_svfprintf_r+0x844>
 8020ed8:	3707      	adds	r7, #7
 8020eda:	f027 0707 	bic.w	r7, r7, #7
 8020ede:	f107 0308 	add.w	r3, r7, #8
 8020ee2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020ee6:	9304      	str	r3, [sp, #16]
 8020ee8:	2301      	movs	r3, #1
 8020eea:	e797      	b.n	8020e1c <_svfprintf_r+0x774>
 8020eec:	1d3b      	adds	r3, r7, #4
 8020eee:	f015 0f10 	tst.w	r5, #16
 8020ef2:	9304      	str	r3, [sp, #16]
 8020ef4:	d001      	beq.n	8020efa <_svfprintf_r+0x852>
 8020ef6:	683e      	ldr	r6, [r7, #0]
 8020ef8:	e002      	b.n	8020f00 <_svfprintf_r+0x858>
 8020efa:	066a      	lsls	r2, r5, #25
 8020efc:	d5fb      	bpl.n	8020ef6 <_svfprintf_r+0x84e>
 8020efe:	883e      	ldrh	r6, [r7, #0]
 8020f00:	2700      	movs	r7, #0
 8020f02:	e7f1      	b.n	8020ee8 <_svfprintf_r+0x840>
 8020f04:	b10b      	cbz	r3, 8020f0a <_svfprintf_r+0x862>
 8020f06:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020f0a:	4ba3      	ldr	r3, [pc, #652]	; (8021198 <_svfprintf_r+0xaf0>)
 8020f0c:	e4c2      	b.n	8020894 <_svfprintf_r+0x1ec>
 8020f0e:	1d3b      	adds	r3, r7, #4
 8020f10:	f015 0f10 	tst.w	r5, #16
 8020f14:	9304      	str	r3, [sp, #16]
 8020f16:	d001      	beq.n	8020f1c <_svfprintf_r+0x874>
 8020f18:	683e      	ldr	r6, [r7, #0]
 8020f1a:	e002      	b.n	8020f22 <_svfprintf_r+0x87a>
 8020f1c:	066e      	lsls	r6, r5, #25
 8020f1e:	d5fb      	bpl.n	8020f18 <_svfprintf_r+0x870>
 8020f20:	883e      	ldrh	r6, [r7, #0]
 8020f22:	2700      	movs	r7, #0
 8020f24:	e4c2      	b.n	80208ac <_svfprintf_r+0x204>
 8020f26:	4643      	mov	r3, r8
 8020f28:	e366      	b.n	80215f8 <_svfprintf_r+0xf50>
 8020f2a:	2f00      	cmp	r7, #0
 8020f2c:	bf08      	it	eq
 8020f2e:	2e0a      	cmpeq	r6, #10
 8020f30:	d205      	bcs.n	8020f3e <_svfprintf_r+0x896>
 8020f32:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8020f36:	3630      	adds	r6, #48	; 0x30
 8020f38:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8020f3c:	e377      	b.n	802162e <_svfprintf_r+0xf86>
 8020f3e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8020f42:	4630      	mov	r0, r6
 8020f44:	4639      	mov	r1, r7
 8020f46:	220a      	movs	r2, #10
 8020f48:	2300      	movs	r3, #0
 8020f4a:	f7df feb1 	bl	8000cb0 <__aeabi_uldivmod>
 8020f4e:	3230      	adds	r2, #48	; 0x30
 8020f50:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8020f54:	2300      	movs	r3, #0
 8020f56:	4630      	mov	r0, r6
 8020f58:	4639      	mov	r1, r7
 8020f5a:	220a      	movs	r2, #10
 8020f5c:	f7df fea8 	bl	8000cb0 <__aeabi_uldivmod>
 8020f60:	4606      	mov	r6, r0
 8020f62:	460f      	mov	r7, r1
 8020f64:	ea56 0307 	orrs.w	r3, r6, r7
 8020f68:	d1eb      	bne.n	8020f42 <_svfprintf_r+0x89a>
 8020f6a:	e360      	b.n	802162e <_svfprintf_r+0xf86>
 8020f6c:	2600      	movs	r6, #0
 8020f6e:	2700      	movs	r7, #0
 8020f70:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8020f74:	f006 030f 	and.w	r3, r6, #15
 8020f78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020f7a:	5cd3      	ldrb	r3, [r2, r3]
 8020f7c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8020f80:	0933      	lsrs	r3, r6, #4
 8020f82:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8020f86:	093a      	lsrs	r2, r7, #4
 8020f88:	461e      	mov	r6, r3
 8020f8a:	4617      	mov	r7, r2
 8020f8c:	ea56 0307 	orrs.w	r3, r6, r7
 8020f90:	d1f0      	bne.n	8020f74 <_svfprintf_r+0x8cc>
 8020f92:	e34c      	b.n	802162e <_svfprintf_r+0xf86>
 8020f94:	b93b      	cbnz	r3, 8020fa6 <_svfprintf_r+0x8fe>
 8020f96:	07ea      	lsls	r2, r5, #31
 8020f98:	d505      	bpl.n	8020fa6 <_svfprintf_r+0x8fe>
 8020f9a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8020f9e:	2330      	movs	r3, #48	; 0x30
 8020fa0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8020fa4:	e343      	b.n	802162e <_svfprintf_r+0xf86>
 8020fa6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8020faa:	e340      	b.n	802162e <_svfprintf_r+0xf86>
 8020fac:	b10b      	cbz	r3, 8020fb2 <_svfprintf_r+0x90a>
 8020fae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020fb2:	9b02      	ldr	r3, [sp, #8]
 8020fb4:	2b00      	cmp	r3, #0
 8020fb6:	f000 82f7 	beq.w	80215a8 <_svfprintf_r+0xf00>
 8020fba:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8020fbe:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8020fc2:	2600      	movs	r6, #0
 8020fc4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8020fc8:	9704      	str	r7, [sp, #16]
 8020fca:	e4e8      	b.n	802099e <_svfprintf_r+0x2f6>
 8020fcc:	4606      	mov	r6, r0
 8020fce:	e53f      	b.n	8020a50 <_svfprintf_r+0x3a8>
 8020fd0:	2310      	movs	r3, #16
 8020fd2:	6063      	str	r3, [r4, #4]
 8020fd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020fd6:	3310      	adds	r3, #16
 8020fd8:	9321      	str	r3, [sp, #132]	; 0x84
 8020fda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020fdc:	3301      	adds	r3, #1
 8020fde:	2b07      	cmp	r3, #7
 8020fe0:	9320      	str	r3, [sp, #128]	; 0x80
 8020fe2:	dc04      	bgt.n	8020fee <_svfprintf_r+0x946>
 8020fe4:	3408      	adds	r4, #8
 8020fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020fe8:	3b10      	subs	r3, #16
 8020fea:	930c      	str	r3, [sp, #48]	; 0x30
 8020fec:	e615      	b.n	8020c1a <_svfprintf_r+0x572>
 8020fee:	aa1f      	add	r2, sp, #124	; 0x7c
 8020ff0:	4651      	mov	r1, sl
 8020ff2:	4658      	mov	r0, fp
 8020ff4:	f001 fe96 	bl	8022d24 <__ssprint_r>
 8020ff8:	2800      	cmp	r0, #0
 8020ffa:	f040 82b6 	bne.w	802156a <_svfprintf_r+0xec2>
 8020ffe:	ac2c      	add	r4, sp, #176	; 0xb0
 8021000:	e7f1      	b.n	8020fe6 <_svfprintf_r+0x93e>
 8021002:	aa1f      	add	r2, sp, #124	; 0x7c
 8021004:	4651      	mov	r1, sl
 8021006:	4658      	mov	r0, fp
 8021008:	f001 fe8c 	bl	8022d24 <__ssprint_r>
 802100c:	2800      	cmp	r0, #0
 802100e:	f040 82ac 	bne.w	802156a <_svfprintf_r+0xec2>
 8021012:	ac2c      	add	r4, sp, #176	; 0xb0
 8021014:	e614      	b.n	8020c40 <_svfprintf_r+0x598>
 8021016:	aa1f      	add	r2, sp, #124	; 0x7c
 8021018:	4651      	mov	r1, sl
 802101a:	4658      	mov	r0, fp
 802101c:	f001 fe82 	bl	8022d24 <__ssprint_r>
 8021020:	2800      	cmp	r0, #0
 8021022:	f040 82a2 	bne.w	802156a <_svfprintf_r+0xec2>
 8021026:	ac2c      	add	r4, sp, #176	; 0xb0
 8021028:	e61c      	b.n	8020c64 <_svfprintf_r+0x5bc>
 802102a:	aa1f      	add	r2, sp, #124	; 0x7c
 802102c:	4651      	mov	r1, sl
 802102e:	4658      	mov	r0, fp
 8021030:	f001 fe78 	bl	8022d24 <__ssprint_r>
 8021034:	2800      	cmp	r0, #0
 8021036:	f040 8298 	bne.w	802156a <_svfprintf_r+0xec2>
 802103a:	ac2c      	add	r4, sp, #176	; 0xb0
 802103c:	e622      	b.n	8020c84 <_svfprintf_r+0x5dc>
 802103e:	2210      	movs	r2, #16
 8021040:	6062      	str	r2, [r4, #4]
 8021042:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021044:	3210      	adds	r2, #16
 8021046:	9221      	str	r2, [sp, #132]	; 0x84
 8021048:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802104a:	3201      	adds	r2, #1
 802104c:	2a07      	cmp	r2, #7
 802104e:	9220      	str	r2, [sp, #128]	; 0x80
 8021050:	dc02      	bgt.n	8021058 <_svfprintf_r+0x9b0>
 8021052:	3408      	adds	r4, #8
 8021054:	3b10      	subs	r3, #16
 8021056:	e61d      	b.n	8020c94 <_svfprintf_r+0x5ec>
 8021058:	aa1f      	add	r2, sp, #124	; 0x7c
 802105a:	4651      	mov	r1, sl
 802105c:	4658      	mov	r0, fp
 802105e:	930c      	str	r3, [sp, #48]	; 0x30
 8021060:	f001 fe60 	bl	8022d24 <__ssprint_r>
 8021064:	2800      	cmp	r0, #0
 8021066:	f040 8280 	bne.w	802156a <_svfprintf_r+0xec2>
 802106a:	ac2c      	add	r4, sp, #176	; 0xb0
 802106c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802106e:	e7f1      	b.n	8021054 <_svfprintf_r+0x9ac>
 8021070:	aa1f      	add	r2, sp, #124	; 0x7c
 8021072:	4651      	mov	r1, sl
 8021074:	4658      	mov	r0, fp
 8021076:	f001 fe55 	bl	8022d24 <__ssprint_r>
 802107a:	2800      	cmp	r0, #0
 802107c:	f040 8275 	bne.w	802156a <_svfprintf_r+0xec2>
 8021080:	ac2c      	add	r4, sp, #176	; 0xb0
 8021082:	e617      	b.n	8020cb4 <_svfprintf_r+0x60c>
 8021084:	2310      	movs	r3, #16
 8021086:	6063      	str	r3, [r4, #4]
 8021088:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802108a:	3310      	adds	r3, #16
 802108c:	9321      	str	r3, [sp, #132]	; 0x84
 802108e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021090:	3301      	adds	r3, #1
 8021092:	2b07      	cmp	r3, #7
 8021094:	9320      	str	r3, [sp, #128]	; 0x80
 8021096:	dc02      	bgt.n	802109e <_svfprintf_r+0x9f6>
 8021098:	3408      	adds	r4, #8
 802109a:	3e10      	subs	r6, #16
 802109c:	e60e      	b.n	8020cbc <_svfprintf_r+0x614>
 802109e:	aa1f      	add	r2, sp, #124	; 0x7c
 80210a0:	4651      	mov	r1, sl
 80210a2:	4658      	mov	r0, fp
 80210a4:	f001 fe3e 	bl	8022d24 <__ssprint_r>
 80210a8:	2800      	cmp	r0, #0
 80210aa:	f040 825e 	bne.w	802156a <_svfprintf_r+0xec2>
 80210ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80210b0:	e7f3      	b.n	802109a <_svfprintf_r+0x9f2>
 80210b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80210b4:	4651      	mov	r1, sl
 80210b6:	4658      	mov	r0, fp
 80210b8:	f001 fe34 	bl	8022d24 <__ssprint_r>
 80210bc:	2800      	cmp	r0, #0
 80210be:	f040 8254 	bne.w	802156a <_svfprintf_r+0xec2>
 80210c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80210c4:	e60a      	b.n	8020cdc <_svfprintf_r+0x634>
 80210c6:	9b02      	ldr	r3, [sp, #8]
 80210c8:	2b65      	cmp	r3, #101	; 0x65
 80210ca:	f340 81a9 	ble.w	8021420 <_svfprintf_r+0xd78>
 80210ce:	2200      	movs	r2, #0
 80210d0:	2300      	movs	r3, #0
 80210d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80210d6:	f7df fd0b 	bl	8000af0 <__aeabi_dcmpeq>
 80210da:	2800      	cmp	r0, #0
 80210dc:	d062      	beq.n	80211a4 <_svfprintf_r+0xafc>
 80210de:	4b2f      	ldr	r3, [pc, #188]	; (802119c <_svfprintf_r+0xaf4>)
 80210e0:	6023      	str	r3, [r4, #0]
 80210e2:	2301      	movs	r3, #1
 80210e4:	6063      	str	r3, [r4, #4]
 80210e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80210e8:	3301      	adds	r3, #1
 80210ea:	9321      	str	r3, [sp, #132]	; 0x84
 80210ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80210ee:	3301      	adds	r3, #1
 80210f0:	2b07      	cmp	r3, #7
 80210f2:	9320      	str	r3, [sp, #128]	; 0x80
 80210f4:	dc25      	bgt.n	8021142 <_svfprintf_r+0xa9a>
 80210f6:	3408      	adds	r4, #8
 80210f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80210fa:	9a03      	ldr	r2, [sp, #12]
 80210fc:	4293      	cmp	r3, r2
 80210fe:	db02      	blt.n	8021106 <_svfprintf_r+0xa5e>
 8021100:	07ee      	lsls	r6, r5, #31
 8021102:	f57f ae02 	bpl.w	8020d0a <_svfprintf_r+0x662>
 8021106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021108:	6023      	str	r3, [r4, #0]
 802110a:	9b08      	ldr	r3, [sp, #32]
 802110c:	6063      	str	r3, [r4, #4]
 802110e:	9a08      	ldr	r2, [sp, #32]
 8021110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021112:	4413      	add	r3, r2
 8021114:	9321      	str	r3, [sp, #132]	; 0x84
 8021116:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021118:	3301      	adds	r3, #1
 802111a:	2b07      	cmp	r3, #7
 802111c:	9320      	str	r3, [sp, #128]	; 0x80
 802111e:	dc1a      	bgt.n	8021156 <_svfprintf_r+0xaae>
 8021120:	3408      	adds	r4, #8
 8021122:	9b03      	ldr	r3, [sp, #12]
 8021124:	1e5e      	subs	r6, r3, #1
 8021126:	2e00      	cmp	r6, #0
 8021128:	f77f adef 	ble.w	8020d0a <_svfprintf_r+0x662>
 802112c:	4f1c      	ldr	r7, [pc, #112]	; (80211a0 <_svfprintf_r+0xaf8>)
 802112e:	f04f 0810 	mov.w	r8, #16
 8021132:	2e10      	cmp	r6, #16
 8021134:	6027      	str	r7, [r4, #0]
 8021136:	dc18      	bgt.n	802116a <_svfprintf_r+0xac2>
 8021138:	6066      	str	r6, [r4, #4]
 802113a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802113c:	441e      	add	r6, r3
 802113e:	9621      	str	r6, [sp, #132]	; 0x84
 8021140:	e5d4      	b.n	8020cec <_svfprintf_r+0x644>
 8021142:	aa1f      	add	r2, sp, #124	; 0x7c
 8021144:	4651      	mov	r1, sl
 8021146:	4658      	mov	r0, fp
 8021148:	f001 fdec 	bl	8022d24 <__ssprint_r>
 802114c:	2800      	cmp	r0, #0
 802114e:	f040 820c 	bne.w	802156a <_svfprintf_r+0xec2>
 8021152:	ac2c      	add	r4, sp, #176	; 0xb0
 8021154:	e7d0      	b.n	80210f8 <_svfprintf_r+0xa50>
 8021156:	aa1f      	add	r2, sp, #124	; 0x7c
 8021158:	4651      	mov	r1, sl
 802115a:	4658      	mov	r0, fp
 802115c:	f001 fde2 	bl	8022d24 <__ssprint_r>
 8021160:	2800      	cmp	r0, #0
 8021162:	f040 8202 	bne.w	802156a <_svfprintf_r+0xec2>
 8021166:	ac2c      	add	r4, sp, #176	; 0xb0
 8021168:	e7db      	b.n	8021122 <_svfprintf_r+0xa7a>
 802116a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802116c:	f8c4 8004 	str.w	r8, [r4, #4]
 8021170:	3310      	adds	r3, #16
 8021172:	9321      	str	r3, [sp, #132]	; 0x84
 8021174:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021176:	3301      	adds	r3, #1
 8021178:	2b07      	cmp	r3, #7
 802117a:	9320      	str	r3, [sp, #128]	; 0x80
 802117c:	dc02      	bgt.n	8021184 <_svfprintf_r+0xadc>
 802117e:	3408      	adds	r4, #8
 8021180:	3e10      	subs	r6, #16
 8021182:	e7d6      	b.n	8021132 <_svfprintf_r+0xa8a>
 8021184:	aa1f      	add	r2, sp, #124	; 0x7c
 8021186:	4651      	mov	r1, sl
 8021188:	4658      	mov	r0, fp
 802118a:	f001 fdcb 	bl	8022d24 <__ssprint_r>
 802118e:	2800      	cmp	r0, #0
 8021190:	f040 81eb 	bne.w	802156a <_svfprintf_r+0xec2>
 8021194:	ac2c      	add	r4, sp, #176	; 0xb0
 8021196:	e7f3      	b.n	8021180 <_svfprintf_r+0xad8>
 8021198:	0803224d 	.word	0x0803224d
 802119c:	0803210d 	.word	0x0803210d
 80211a0:	0803226e 	.word	0x0803226e
 80211a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	dc7a      	bgt.n	80212a0 <_svfprintf_r+0xbf8>
 80211aa:	4b9b      	ldr	r3, [pc, #620]	; (8021418 <_svfprintf_r+0xd70>)
 80211ac:	6023      	str	r3, [r4, #0]
 80211ae:	2301      	movs	r3, #1
 80211b0:	6063      	str	r3, [r4, #4]
 80211b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80211b4:	3301      	adds	r3, #1
 80211b6:	9321      	str	r3, [sp, #132]	; 0x84
 80211b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80211ba:	3301      	adds	r3, #1
 80211bc:	2b07      	cmp	r3, #7
 80211be:	9320      	str	r3, [sp, #128]	; 0x80
 80211c0:	dc44      	bgt.n	802124c <_svfprintf_r+0xba4>
 80211c2:	3408      	adds	r4, #8
 80211c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80211c6:	b923      	cbnz	r3, 80211d2 <_svfprintf_r+0xb2a>
 80211c8:	9b03      	ldr	r3, [sp, #12]
 80211ca:	b913      	cbnz	r3, 80211d2 <_svfprintf_r+0xb2a>
 80211cc:	07e8      	lsls	r0, r5, #31
 80211ce:	f57f ad9c 	bpl.w	8020d0a <_svfprintf_r+0x662>
 80211d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80211d4:	6023      	str	r3, [r4, #0]
 80211d6:	9b08      	ldr	r3, [sp, #32]
 80211d8:	6063      	str	r3, [r4, #4]
 80211da:	9a08      	ldr	r2, [sp, #32]
 80211dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80211de:	4413      	add	r3, r2
 80211e0:	9321      	str	r3, [sp, #132]	; 0x84
 80211e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80211e4:	3301      	adds	r3, #1
 80211e6:	2b07      	cmp	r3, #7
 80211e8:	9320      	str	r3, [sp, #128]	; 0x80
 80211ea:	dc39      	bgt.n	8021260 <_svfprintf_r+0xbb8>
 80211ec:	f104 0308 	add.w	r3, r4, #8
 80211f0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80211f2:	2e00      	cmp	r6, #0
 80211f4:	da19      	bge.n	802122a <_svfprintf_r+0xb82>
 80211f6:	4f89      	ldr	r7, [pc, #548]	; (802141c <_svfprintf_r+0xd74>)
 80211f8:	4276      	negs	r6, r6
 80211fa:	2410      	movs	r4, #16
 80211fc:	2e10      	cmp	r6, #16
 80211fe:	601f      	str	r7, [r3, #0]
 8021200:	dc38      	bgt.n	8021274 <_svfprintf_r+0xbcc>
 8021202:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021204:	605e      	str	r6, [r3, #4]
 8021206:	4416      	add	r6, r2
 8021208:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802120a:	9621      	str	r6, [sp, #132]	; 0x84
 802120c:	3201      	adds	r2, #1
 802120e:	2a07      	cmp	r2, #7
 8021210:	f103 0308 	add.w	r3, r3, #8
 8021214:	9220      	str	r2, [sp, #128]	; 0x80
 8021216:	dd08      	ble.n	802122a <_svfprintf_r+0xb82>
 8021218:	aa1f      	add	r2, sp, #124	; 0x7c
 802121a:	4651      	mov	r1, sl
 802121c:	4658      	mov	r0, fp
 802121e:	f001 fd81 	bl	8022d24 <__ssprint_r>
 8021222:	2800      	cmp	r0, #0
 8021224:	f040 81a1 	bne.w	802156a <_svfprintf_r+0xec2>
 8021228:	ab2c      	add	r3, sp, #176	; 0xb0
 802122a:	9a03      	ldr	r2, [sp, #12]
 802122c:	605a      	str	r2, [r3, #4]
 802122e:	9903      	ldr	r1, [sp, #12]
 8021230:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021232:	f8c3 8000 	str.w	r8, [r3]
 8021236:	440a      	add	r2, r1
 8021238:	9221      	str	r2, [sp, #132]	; 0x84
 802123a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802123c:	3201      	adds	r2, #1
 802123e:	2a07      	cmp	r2, #7
 8021240:	9220      	str	r2, [sp, #128]	; 0x80
 8021242:	f73f ad59 	bgt.w	8020cf8 <_svfprintf_r+0x650>
 8021246:	f103 0408 	add.w	r4, r3, #8
 802124a:	e55e      	b.n	8020d0a <_svfprintf_r+0x662>
 802124c:	aa1f      	add	r2, sp, #124	; 0x7c
 802124e:	4651      	mov	r1, sl
 8021250:	4658      	mov	r0, fp
 8021252:	f001 fd67 	bl	8022d24 <__ssprint_r>
 8021256:	2800      	cmp	r0, #0
 8021258:	f040 8187 	bne.w	802156a <_svfprintf_r+0xec2>
 802125c:	ac2c      	add	r4, sp, #176	; 0xb0
 802125e:	e7b1      	b.n	80211c4 <_svfprintf_r+0xb1c>
 8021260:	aa1f      	add	r2, sp, #124	; 0x7c
 8021262:	4651      	mov	r1, sl
 8021264:	4658      	mov	r0, fp
 8021266:	f001 fd5d 	bl	8022d24 <__ssprint_r>
 802126a:	2800      	cmp	r0, #0
 802126c:	f040 817d 	bne.w	802156a <_svfprintf_r+0xec2>
 8021270:	ab2c      	add	r3, sp, #176	; 0xb0
 8021272:	e7bd      	b.n	80211f0 <_svfprintf_r+0xb48>
 8021274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021276:	605c      	str	r4, [r3, #4]
 8021278:	3210      	adds	r2, #16
 802127a:	9221      	str	r2, [sp, #132]	; 0x84
 802127c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802127e:	3201      	adds	r2, #1
 8021280:	2a07      	cmp	r2, #7
 8021282:	9220      	str	r2, [sp, #128]	; 0x80
 8021284:	dc02      	bgt.n	802128c <_svfprintf_r+0xbe4>
 8021286:	3308      	adds	r3, #8
 8021288:	3e10      	subs	r6, #16
 802128a:	e7b7      	b.n	80211fc <_svfprintf_r+0xb54>
 802128c:	aa1f      	add	r2, sp, #124	; 0x7c
 802128e:	4651      	mov	r1, sl
 8021290:	4658      	mov	r0, fp
 8021292:	f001 fd47 	bl	8022d24 <__ssprint_r>
 8021296:	2800      	cmp	r0, #0
 8021298:	f040 8167 	bne.w	802156a <_svfprintf_r+0xec2>
 802129c:	ab2c      	add	r3, sp, #176	; 0xb0
 802129e:	e7f3      	b.n	8021288 <_svfprintf_r+0xbe0>
 80212a0:	9b03      	ldr	r3, [sp, #12]
 80212a2:	42bb      	cmp	r3, r7
 80212a4:	bfa8      	it	ge
 80212a6:	463b      	movge	r3, r7
 80212a8:	2b00      	cmp	r3, #0
 80212aa:	461e      	mov	r6, r3
 80212ac:	dd0b      	ble.n	80212c6 <_svfprintf_r+0xc1e>
 80212ae:	6063      	str	r3, [r4, #4]
 80212b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80212b2:	f8c4 8000 	str.w	r8, [r4]
 80212b6:	4433      	add	r3, r6
 80212b8:	9321      	str	r3, [sp, #132]	; 0x84
 80212ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80212bc:	3301      	adds	r3, #1
 80212be:	2b07      	cmp	r3, #7
 80212c0:	9320      	str	r3, [sp, #128]	; 0x80
 80212c2:	dc5f      	bgt.n	8021384 <_svfprintf_r+0xcdc>
 80212c4:	3408      	adds	r4, #8
 80212c6:	2e00      	cmp	r6, #0
 80212c8:	bfac      	ite	ge
 80212ca:	1bbe      	subge	r6, r7, r6
 80212cc:	463e      	movlt	r6, r7
 80212ce:	2e00      	cmp	r6, #0
 80212d0:	dd0f      	ble.n	80212f2 <_svfprintf_r+0xc4a>
 80212d2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 802141c <_svfprintf_r+0xd74>
 80212d6:	f8c4 9000 	str.w	r9, [r4]
 80212da:	2e10      	cmp	r6, #16
 80212dc:	dc5c      	bgt.n	8021398 <_svfprintf_r+0xcf0>
 80212de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80212e0:	6066      	str	r6, [r4, #4]
 80212e2:	441e      	add	r6, r3
 80212e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80212e6:	9621      	str	r6, [sp, #132]	; 0x84
 80212e8:	3301      	adds	r3, #1
 80212ea:	2b07      	cmp	r3, #7
 80212ec:	9320      	str	r3, [sp, #128]	; 0x80
 80212ee:	dc6a      	bgt.n	80213c6 <_svfprintf_r+0xd1e>
 80212f0:	3408      	adds	r4, #8
 80212f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80212f4:	9a03      	ldr	r2, [sp, #12]
 80212f6:	4293      	cmp	r3, r2
 80212f8:	db01      	blt.n	80212fe <_svfprintf_r+0xc56>
 80212fa:	07e9      	lsls	r1, r5, #31
 80212fc:	d50d      	bpl.n	802131a <_svfprintf_r+0xc72>
 80212fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021300:	6023      	str	r3, [r4, #0]
 8021302:	9b08      	ldr	r3, [sp, #32]
 8021304:	6063      	str	r3, [r4, #4]
 8021306:	9a08      	ldr	r2, [sp, #32]
 8021308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802130a:	4413      	add	r3, r2
 802130c:	9321      	str	r3, [sp, #132]	; 0x84
 802130e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021310:	3301      	adds	r3, #1
 8021312:	2b07      	cmp	r3, #7
 8021314:	9320      	str	r3, [sp, #128]	; 0x80
 8021316:	dc60      	bgt.n	80213da <_svfprintf_r+0xd32>
 8021318:	3408      	adds	r4, #8
 802131a:	9b03      	ldr	r3, [sp, #12]
 802131c:	9a03      	ldr	r2, [sp, #12]
 802131e:	1bde      	subs	r6, r3, r7
 8021320:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021322:	1ad3      	subs	r3, r2, r3
 8021324:	429e      	cmp	r6, r3
 8021326:	bfa8      	it	ge
 8021328:	461e      	movge	r6, r3
 802132a:	2e00      	cmp	r6, #0
 802132c:	dd0b      	ble.n	8021346 <_svfprintf_r+0xc9e>
 802132e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021330:	6066      	str	r6, [r4, #4]
 8021332:	4433      	add	r3, r6
 8021334:	9321      	str	r3, [sp, #132]	; 0x84
 8021336:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021338:	3301      	adds	r3, #1
 802133a:	4447      	add	r7, r8
 802133c:	2b07      	cmp	r3, #7
 802133e:	6027      	str	r7, [r4, #0]
 8021340:	9320      	str	r3, [sp, #128]	; 0x80
 8021342:	dc54      	bgt.n	80213ee <_svfprintf_r+0xd46>
 8021344:	3408      	adds	r4, #8
 8021346:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021348:	9a03      	ldr	r2, [sp, #12]
 802134a:	2e00      	cmp	r6, #0
 802134c:	eba2 0303 	sub.w	r3, r2, r3
 8021350:	bfac      	ite	ge
 8021352:	1b9e      	subge	r6, r3, r6
 8021354:	461e      	movlt	r6, r3
 8021356:	2e00      	cmp	r6, #0
 8021358:	f77f acd7 	ble.w	8020d0a <_svfprintf_r+0x662>
 802135c:	4f2f      	ldr	r7, [pc, #188]	; (802141c <_svfprintf_r+0xd74>)
 802135e:	f04f 0810 	mov.w	r8, #16
 8021362:	2e10      	cmp	r6, #16
 8021364:	6027      	str	r7, [r4, #0]
 8021366:	f77f aee7 	ble.w	8021138 <_svfprintf_r+0xa90>
 802136a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802136c:	f8c4 8004 	str.w	r8, [r4, #4]
 8021370:	3310      	adds	r3, #16
 8021372:	9321      	str	r3, [sp, #132]	; 0x84
 8021374:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021376:	3301      	adds	r3, #1
 8021378:	2b07      	cmp	r3, #7
 802137a:	9320      	str	r3, [sp, #128]	; 0x80
 802137c:	dc41      	bgt.n	8021402 <_svfprintf_r+0xd5a>
 802137e:	3408      	adds	r4, #8
 8021380:	3e10      	subs	r6, #16
 8021382:	e7ee      	b.n	8021362 <_svfprintf_r+0xcba>
 8021384:	aa1f      	add	r2, sp, #124	; 0x7c
 8021386:	4651      	mov	r1, sl
 8021388:	4658      	mov	r0, fp
 802138a:	f001 fccb 	bl	8022d24 <__ssprint_r>
 802138e:	2800      	cmp	r0, #0
 8021390:	f040 80eb 	bne.w	802156a <_svfprintf_r+0xec2>
 8021394:	ac2c      	add	r4, sp, #176	; 0xb0
 8021396:	e796      	b.n	80212c6 <_svfprintf_r+0xc1e>
 8021398:	2310      	movs	r3, #16
 802139a:	6063      	str	r3, [r4, #4]
 802139c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802139e:	3310      	adds	r3, #16
 80213a0:	9321      	str	r3, [sp, #132]	; 0x84
 80213a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80213a4:	3301      	adds	r3, #1
 80213a6:	2b07      	cmp	r3, #7
 80213a8:	9320      	str	r3, [sp, #128]	; 0x80
 80213aa:	dc02      	bgt.n	80213b2 <_svfprintf_r+0xd0a>
 80213ac:	3408      	adds	r4, #8
 80213ae:	3e10      	subs	r6, #16
 80213b0:	e791      	b.n	80212d6 <_svfprintf_r+0xc2e>
 80213b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80213b4:	4651      	mov	r1, sl
 80213b6:	4658      	mov	r0, fp
 80213b8:	f001 fcb4 	bl	8022d24 <__ssprint_r>
 80213bc:	2800      	cmp	r0, #0
 80213be:	f040 80d4 	bne.w	802156a <_svfprintf_r+0xec2>
 80213c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80213c4:	e7f3      	b.n	80213ae <_svfprintf_r+0xd06>
 80213c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80213c8:	4651      	mov	r1, sl
 80213ca:	4658      	mov	r0, fp
 80213cc:	f001 fcaa 	bl	8022d24 <__ssprint_r>
 80213d0:	2800      	cmp	r0, #0
 80213d2:	f040 80ca 	bne.w	802156a <_svfprintf_r+0xec2>
 80213d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80213d8:	e78b      	b.n	80212f2 <_svfprintf_r+0xc4a>
 80213da:	aa1f      	add	r2, sp, #124	; 0x7c
 80213dc:	4651      	mov	r1, sl
 80213de:	4658      	mov	r0, fp
 80213e0:	f001 fca0 	bl	8022d24 <__ssprint_r>
 80213e4:	2800      	cmp	r0, #0
 80213e6:	f040 80c0 	bne.w	802156a <_svfprintf_r+0xec2>
 80213ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80213ec:	e795      	b.n	802131a <_svfprintf_r+0xc72>
 80213ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80213f0:	4651      	mov	r1, sl
 80213f2:	4658      	mov	r0, fp
 80213f4:	f001 fc96 	bl	8022d24 <__ssprint_r>
 80213f8:	2800      	cmp	r0, #0
 80213fa:	f040 80b6 	bne.w	802156a <_svfprintf_r+0xec2>
 80213fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8021400:	e7a1      	b.n	8021346 <_svfprintf_r+0xc9e>
 8021402:	aa1f      	add	r2, sp, #124	; 0x7c
 8021404:	4651      	mov	r1, sl
 8021406:	4658      	mov	r0, fp
 8021408:	f001 fc8c 	bl	8022d24 <__ssprint_r>
 802140c:	2800      	cmp	r0, #0
 802140e:	f040 80ac 	bne.w	802156a <_svfprintf_r+0xec2>
 8021412:	ac2c      	add	r4, sp, #176	; 0xb0
 8021414:	e7b4      	b.n	8021380 <_svfprintf_r+0xcd8>
 8021416:	bf00      	nop
 8021418:	0803210d 	.word	0x0803210d
 802141c:	0803226e 	.word	0x0803226e
 8021420:	9b03      	ldr	r3, [sp, #12]
 8021422:	2b01      	cmp	r3, #1
 8021424:	dc01      	bgt.n	802142a <_svfprintf_r+0xd82>
 8021426:	07ea      	lsls	r2, r5, #31
 8021428:	d576      	bpl.n	8021518 <_svfprintf_r+0xe70>
 802142a:	2301      	movs	r3, #1
 802142c:	6063      	str	r3, [r4, #4]
 802142e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021430:	f8c4 8000 	str.w	r8, [r4]
 8021434:	3301      	adds	r3, #1
 8021436:	9321      	str	r3, [sp, #132]	; 0x84
 8021438:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802143a:	3301      	adds	r3, #1
 802143c:	2b07      	cmp	r3, #7
 802143e:	9320      	str	r3, [sp, #128]	; 0x80
 8021440:	dc36      	bgt.n	80214b0 <_svfprintf_r+0xe08>
 8021442:	3408      	adds	r4, #8
 8021444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021446:	6023      	str	r3, [r4, #0]
 8021448:	9b08      	ldr	r3, [sp, #32]
 802144a:	6063      	str	r3, [r4, #4]
 802144c:	9a08      	ldr	r2, [sp, #32]
 802144e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021450:	4413      	add	r3, r2
 8021452:	9321      	str	r3, [sp, #132]	; 0x84
 8021454:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021456:	3301      	adds	r3, #1
 8021458:	2b07      	cmp	r3, #7
 802145a:	9320      	str	r3, [sp, #128]	; 0x80
 802145c:	dc31      	bgt.n	80214c2 <_svfprintf_r+0xe1a>
 802145e:	3408      	adds	r4, #8
 8021460:	2300      	movs	r3, #0
 8021462:	2200      	movs	r2, #0
 8021464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021468:	f7df fb42 	bl	8000af0 <__aeabi_dcmpeq>
 802146c:	9b03      	ldr	r3, [sp, #12]
 802146e:	1e5e      	subs	r6, r3, #1
 8021470:	2800      	cmp	r0, #0
 8021472:	d12f      	bne.n	80214d4 <_svfprintf_r+0xe2c>
 8021474:	f108 0301 	add.w	r3, r8, #1
 8021478:	e884 0048 	stmia.w	r4, {r3, r6}
 802147c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802147e:	9a03      	ldr	r2, [sp, #12]
 8021480:	3b01      	subs	r3, #1
 8021482:	4413      	add	r3, r2
 8021484:	9321      	str	r3, [sp, #132]	; 0x84
 8021486:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021488:	3301      	adds	r3, #1
 802148a:	2b07      	cmp	r3, #7
 802148c:	9320      	str	r3, [sp, #128]	; 0x80
 802148e:	dd4a      	ble.n	8021526 <_svfprintf_r+0xe7e>
 8021490:	aa1f      	add	r2, sp, #124	; 0x7c
 8021492:	4651      	mov	r1, sl
 8021494:	4658      	mov	r0, fp
 8021496:	f001 fc45 	bl	8022d24 <__ssprint_r>
 802149a:	2800      	cmp	r0, #0
 802149c:	d165      	bne.n	802156a <_svfprintf_r+0xec2>
 802149e:	ac2c      	add	r4, sp, #176	; 0xb0
 80214a0:	ab1b      	add	r3, sp, #108	; 0x6c
 80214a2:	6023      	str	r3, [r4, #0]
 80214a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80214a6:	6063      	str	r3, [r4, #4]
 80214a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80214ac:	4413      	add	r3, r2
 80214ae:	e41c      	b.n	8020cea <_svfprintf_r+0x642>
 80214b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80214b2:	4651      	mov	r1, sl
 80214b4:	4658      	mov	r0, fp
 80214b6:	f001 fc35 	bl	8022d24 <__ssprint_r>
 80214ba:	2800      	cmp	r0, #0
 80214bc:	d155      	bne.n	802156a <_svfprintf_r+0xec2>
 80214be:	ac2c      	add	r4, sp, #176	; 0xb0
 80214c0:	e7c0      	b.n	8021444 <_svfprintf_r+0xd9c>
 80214c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80214c4:	4651      	mov	r1, sl
 80214c6:	4658      	mov	r0, fp
 80214c8:	f001 fc2c 	bl	8022d24 <__ssprint_r>
 80214cc:	2800      	cmp	r0, #0
 80214ce:	d14c      	bne.n	802156a <_svfprintf_r+0xec2>
 80214d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80214d2:	e7c5      	b.n	8021460 <_svfprintf_r+0xdb8>
 80214d4:	2e00      	cmp	r6, #0
 80214d6:	dde3      	ble.n	80214a0 <_svfprintf_r+0xdf8>
 80214d8:	4f59      	ldr	r7, [pc, #356]	; (8021640 <_svfprintf_r+0xf98>)
 80214da:	f04f 0810 	mov.w	r8, #16
 80214de:	2e10      	cmp	r6, #16
 80214e0:	6027      	str	r7, [r4, #0]
 80214e2:	dc04      	bgt.n	80214ee <_svfprintf_r+0xe46>
 80214e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80214e6:	6066      	str	r6, [r4, #4]
 80214e8:	441e      	add	r6, r3
 80214ea:	9621      	str	r6, [sp, #132]	; 0x84
 80214ec:	e7cb      	b.n	8021486 <_svfprintf_r+0xdde>
 80214ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80214f0:	f8c4 8004 	str.w	r8, [r4, #4]
 80214f4:	3310      	adds	r3, #16
 80214f6:	9321      	str	r3, [sp, #132]	; 0x84
 80214f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80214fa:	3301      	adds	r3, #1
 80214fc:	2b07      	cmp	r3, #7
 80214fe:	9320      	str	r3, [sp, #128]	; 0x80
 8021500:	dc02      	bgt.n	8021508 <_svfprintf_r+0xe60>
 8021502:	3408      	adds	r4, #8
 8021504:	3e10      	subs	r6, #16
 8021506:	e7ea      	b.n	80214de <_svfprintf_r+0xe36>
 8021508:	aa1f      	add	r2, sp, #124	; 0x7c
 802150a:	4651      	mov	r1, sl
 802150c:	4658      	mov	r0, fp
 802150e:	f001 fc09 	bl	8022d24 <__ssprint_r>
 8021512:	bb50      	cbnz	r0, 802156a <_svfprintf_r+0xec2>
 8021514:	ac2c      	add	r4, sp, #176	; 0xb0
 8021516:	e7f5      	b.n	8021504 <_svfprintf_r+0xe5c>
 8021518:	2301      	movs	r3, #1
 802151a:	6063      	str	r3, [r4, #4]
 802151c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802151e:	f8c4 8000 	str.w	r8, [r4]
 8021522:	3301      	adds	r3, #1
 8021524:	e7ae      	b.n	8021484 <_svfprintf_r+0xddc>
 8021526:	3408      	adds	r4, #8
 8021528:	e7ba      	b.n	80214a0 <_svfprintf_r+0xdf8>
 802152a:	3408      	adds	r4, #8
 802152c:	f7ff bbed 	b.w	8020d0a <_svfprintf_r+0x662>
 8021530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021534:	1a9d      	subs	r5, r3, r2
 8021536:	2d00      	cmp	r5, #0
 8021538:	f77f abea 	ble.w	8020d10 <_svfprintf_r+0x668>
 802153c:	2610      	movs	r6, #16
 802153e:	4b41      	ldr	r3, [pc, #260]	; (8021644 <_svfprintf_r+0xf9c>)
 8021540:	6023      	str	r3, [r4, #0]
 8021542:	2d10      	cmp	r5, #16
 8021544:	dc1b      	bgt.n	802157e <_svfprintf_r+0xed6>
 8021546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021548:	6065      	str	r5, [r4, #4]
 802154a:	441d      	add	r5, r3
 802154c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802154e:	9521      	str	r5, [sp, #132]	; 0x84
 8021550:	3301      	adds	r3, #1
 8021552:	2b07      	cmp	r3, #7
 8021554:	9320      	str	r3, [sp, #128]	; 0x80
 8021556:	f77f abdb 	ble.w	8020d10 <_svfprintf_r+0x668>
 802155a:	aa1f      	add	r2, sp, #124	; 0x7c
 802155c:	4651      	mov	r1, sl
 802155e:	4658      	mov	r0, fp
 8021560:	f001 fbe0 	bl	8022d24 <__ssprint_r>
 8021564:	2800      	cmp	r0, #0
 8021566:	f43f abd3 	beq.w	8020d10 <_svfprintf_r+0x668>
 802156a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802156e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8021572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021574:	bf18      	it	ne
 8021576:	f04f 33ff 	movne.w	r3, #4294967295
 802157a:	f7ff b8b9 	b.w	80206f0 <_svfprintf_r+0x48>
 802157e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021580:	6066      	str	r6, [r4, #4]
 8021582:	3310      	adds	r3, #16
 8021584:	9321      	str	r3, [sp, #132]	; 0x84
 8021586:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021588:	3301      	adds	r3, #1
 802158a:	2b07      	cmp	r3, #7
 802158c:	9320      	str	r3, [sp, #128]	; 0x80
 802158e:	dc02      	bgt.n	8021596 <_svfprintf_r+0xeee>
 8021590:	3408      	adds	r4, #8
 8021592:	3d10      	subs	r5, #16
 8021594:	e7d3      	b.n	802153e <_svfprintf_r+0xe96>
 8021596:	aa1f      	add	r2, sp, #124	; 0x7c
 8021598:	4651      	mov	r1, sl
 802159a:	4658      	mov	r0, fp
 802159c:	f001 fbc2 	bl	8022d24 <__ssprint_r>
 80215a0:	2800      	cmp	r0, #0
 80215a2:	d1e2      	bne.n	802156a <_svfprintf_r+0xec2>
 80215a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80215a6:	e7f4      	b.n	8021592 <_svfprintf_r+0xeea>
 80215a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	d0dd      	beq.n	802156a <_svfprintf_r+0xec2>
 80215ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80215b0:	4651      	mov	r1, sl
 80215b2:	4658      	mov	r0, fp
 80215b4:	f001 fbb6 	bl	8022d24 <__ssprint_r>
 80215b8:	e7d7      	b.n	802156a <_svfprintf_r+0xec2>
 80215ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80215be:	4610      	mov	r0, r2
 80215c0:	4619      	mov	r1, r3
 80215c2:	f7df fac7 	bl	8000b54 <__aeabi_dcmpun>
 80215c6:	2800      	cmp	r0, #0
 80215c8:	f43f aa44 	beq.w	8020a54 <_svfprintf_r+0x3ac>
 80215cc:	4b1e      	ldr	r3, [pc, #120]	; (8021648 <_svfprintf_r+0xfa0>)
 80215ce:	4a1f      	ldr	r2, [pc, #124]	; (802164c <_svfprintf_r+0xfa4>)
 80215d0:	f7ff ba34 	b.w	8020a3c <_svfprintf_r+0x394>
 80215d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80215d6:	eba3 0308 	sub.w	r3, r3, r8
 80215da:	9303      	str	r3, [sp, #12]
 80215dc:	f7ff bab5 	b.w	8020b4a <_svfprintf_r+0x4a2>
 80215e0:	ea56 0207 	orrs.w	r2, r6, r7
 80215e4:	950b      	str	r5, [sp, #44]	; 0x2c
 80215e6:	f43f ac2b 	beq.w	8020e40 <_svfprintf_r+0x798>
 80215ea:	2b01      	cmp	r3, #1
 80215ec:	f43f ac9d 	beq.w	8020f2a <_svfprintf_r+0x882>
 80215f0:	2b02      	cmp	r3, #2
 80215f2:	f43f acbd 	beq.w	8020f70 <_svfprintf_r+0x8c8>
 80215f6:	ab2c      	add	r3, sp, #176	; 0xb0
 80215f8:	08f1      	lsrs	r1, r6, #3
 80215fa:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80215fe:	08f8      	lsrs	r0, r7, #3
 8021600:	f006 0207 	and.w	r2, r6, #7
 8021604:	4607      	mov	r7, r0
 8021606:	460e      	mov	r6, r1
 8021608:	3230      	adds	r2, #48	; 0x30
 802160a:	ea56 0107 	orrs.w	r1, r6, r7
 802160e:	f103 38ff 	add.w	r8, r3, #4294967295
 8021612:	f803 2c01 	strb.w	r2, [r3, #-1]
 8021616:	f47f ac86 	bne.w	8020f26 <_svfprintf_r+0x87e>
 802161a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802161c:	07c9      	lsls	r1, r1, #31
 802161e:	d506      	bpl.n	802162e <_svfprintf_r+0xf86>
 8021620:	2a30      	cmp	r2, #48	; 0x30
 8021622:	d004      	beq.n	802162e <_svfprintf_r+0xf86>
 8021624:	2230      	movs	r2, #48	; 0x30
 8021626:	f808 2c01 	strb.w	r2, [r8, #-1]
 802162a:	f1a3 0802 	sub.w	r8, r3, #2
 802162e:	464e      	mov	r6, r9
 8021630:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8021634:	eba9 0908 	sub.w	r9, r9, r8
 8021638:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802163a:	2700      	movs	r7, #0
 802163c:	f7ff bad1 	b.w	8020be2 <_svfprintf_r+0x53a>
 8021640:	0803226e 	.word	0x0803226e
 8021644:	0803225e 	.word	0x0803225e
 8021648:	08032113 	.word	0x08032113
 802164c:	08032238 	.word	0x08032238

08021650 <quorem>:
 8021650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021654:	6903      	ldr	r3, [r0, #16]
 8021656:	690c      	ldr	r4, [r1, #16]
 8021658:	429c      	cmp	r4, r3
 802165a:	4680      	mov	r8, r0
 802165c:	f300 8082 	bgt.w	8021764 <quorem+0x114>
 8021660:	3c01      	subs	r4, #1
 8021662:	f101 0714 	add.w	r7, r1, #20
 8021666:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 802166a:	f100 0614 	add.w	r6, r0, #20
 802166e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8021672:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8021676:	eb06 030e 	add.w	r3, r6, lr
 802167a:	3501      	adds	r5, #1
 802167c:	eb07 090e 	add.w	r9, r7, lr
 8021680:	9301      	str	r3, [sp, #4]
 8021682:	fbb0 f5f5 	udiv	r5, r0, r5
 8021686:	b395      	cbz	r5, 80216ee <quorem+0x9e>
 8021688:	f04f 0a00 	mov.w	sl, #0
 802168c:	4638      	mov	r0, r7
 802168e:	46b4      	mov	ip, r6
 8021690:	46d3      	mov	fp, sl
 8021692:	f850 2b04 	ldr.w	r2, [r0], #4
 8021696:	b293      	uxth	r3, r2
 8021698:	fb05 a303 	mla	r3, r5, r3, sl
 802169c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80216a0:	b29b      	uxth	r3, r3
 80216a2:	ebab 0303 	sub.w	r3, fp, r3
 80216a6:	0c12      	lsrs	r2, r2, #16
 80216a8:	f8bc b000 	ldrh.w	fp, [ip]
 80216ac:	fb05 a202 	mla	r2, r5, r2, sl
 80216b0:	fa13 f38b 	uxtah	r3, r3, fp
 80216b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80216b8:	fa1f fb82 	uxth.w	fp, r2
 80216bc:	f8dc 2000 	ldr.w	r2, [ip]
 80216c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80216c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80216c8:	b29b      	uxth	r3, r3
 80216ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80216ce:	4581      	cmp	r9, r0
 80216d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80216d4:	f84c 3b04 	str.w	r3, [ip], #4
 80216d8:	d2db      	bcs.n	8021692 <quorem+0x42>
 80216da:	f856 300e 	ldr.w	r3, [r6, lr]
 80216de:	b933      	cbnz	r3, 80216ee <quorem+0x9e>
 80216e0:	9b01      	ldr	r3, [sp, #4]
 80216e2:	3b04      	subs	r3, #4
 80216e4:	429e      	cmp	r6, r3
 80216e6:	461a      	mov	r2, r3
 80216e8:	d330      	bcc.n	802174c <quorem+0xfc>
 80216ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80216ee:	4640      	mov	r0, r8
 80216f0:	f001 fa41 	bl	8022b76 <__mcmp>
 80216f4:	2800      	cmp	r0, #0
 80216f6:	db25      	blt.n	8021744 <quorem+0xf4>
 80216f8:	3501      	adds	r5, #1
 80216fa:	4630      	mov	r0, r6
 80216fc:	f04f 0e00 	mov.w	lr, #0
 8021700:	f857 2b04 	ldr.w	r2, [r7], #4
 8021704:	f8d0 c000 	ldr.w	ip, [r0]
 8021708:	b293      	uxth	r3, r2
 802170a:	ebae 0303 	sub.w	r3, lr, r3
 802170e:	0c12      	lsrs	r2, r2, #16
 8021710:	fa13 f38c 	uxtah	r3, r3, ip
 8021714:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8021718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802171c:	b29b      	uxth	r3, r3
 802171e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021722:	45b9      	cmp	r9, r7
 8021724:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8021728:	f840 3b04 	str.w	r3, [r0], #4
 802172c:	d2e8      	bcs.n	8021700 <quorem+0xb0>
 802172e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8021732:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8021736:	b92a      	cbnz	r2, 8021744 <quorem+0xf4>
 8021738:	3b04      	subs	r3, #4
 802173a:	429e      	cmp	r6, r3
 802173c:	461a      	mov	r2, r3
 802173e:	d30b      	bcc.n	8021758 <quorem+0x108>
 8021740:	f8c8 4010 	str.w	r4, [r8, #16]
 8021744:	4628      	mov	r0, r5
 8021746:	b003      	add	sp, #12
 8021748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802174c:	6812      	ldr	r2, [r2, #0]
 802174e:	3b04      	subs	r3, #4
 8021750:	2a00      	cmp	r2, #0
 8021752:	d1ca      	bne.n	80216ea <quorem+0x9a>
 8021754:	3c01      	subs	r4, #1
 8021756:	e7c5      	b.n	80216e4 <quorem+0x94>
 8021758:	6812      	ldr	r2, [r2, #0]
 802175a:	3b04      	subs	r3, #4
 802175c:	2a00      	cmp	r2, #0
 802175e:	d1ef      	bne.n	8021740 <quorem+0xf0>
 8021760:	3c01      	subs	r4, #1
 8021762:	e7ea      	b.n	802173a <quorem+0xea>
 8021764:	2000      	movs	r0, #0
 8021766:	e7ee      	b.n	8021746 <quorem+0xf6>

08021768 <_dtoa_r>:
 8021768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802176c:	ec57 6b10 	vmov	r6, r7, d0
 8021770:	b097      	sub	sp, #92	; 0x5c
 8021772:	e9cd 6700 	strd	r6, r7, [sp]
 8021776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021778:	9107      	str	r1, [sp, #28]
 802177a:	4604      	mov	r4, r0
 802177c:	920a      	str	r2, [sp, #40]	; 0x28
 802177e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021780:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8021782:	b93e      	cbnz	r6, 8021794 <_dtoa_r+0x2c>
 8021784:	2010      	movs	r0, #16
 8021786:	f000 fdcb 	bl	8022320 <malloc>
 802178a:	6260      	str	r0, [r4, #36]	; 0x24
 802178c:	6046      	str	r6, [r0, #4]
 802178e:	6086      	str	r6, [r0, #8]
 8021790:	6006      	str	r6, [r0, #0]
 8021792:	60c6      	str	r6, [r0, #12]
 8021794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021796:	6819      	ldr	r1, [r3, #0]
 8021798:	b151      	cbz	r1, 80217b0 <_dtoa_r+0x48>
 802179a:	685a      	ldr	r2, [r3, #4]
 802179c:	604a      	str	r2, [r1, #4]
 802179e:	2301      	movs	r3, #1
 80217a0:	4093      	lsls	r3, r2
 80217a2:	608b      	str	r3, [r1, #8]
 80217a4:	4620      	mov	r0, r4
 80217a6:	f001 f811 	bl	80227cc <_Bfree>
 80217aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80217ac:	2200      	movs	r2, #0
 80217ae:	601a      	str	r2, [r3, #0]
 80217b0:	9b01      	ldr	r3, [sp, #4]
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	bfbf      	itttt	lt
 80217b6:	2301      	movlt	r3, #1
 80217b8:	602b      	strlt	r3, [r5, #0]
 80217ba:	9b01      	ldrlt	r3, [sp, #4]
 80217bc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80217c0:	bfb2      	itee	lt
 80217c2:	9301      	strlt	r3, [sp, #4]
 80217c4:	2300      	movge	r3, #0
 80217c6:	602b      	strge	r3, [r5, #0]
 80217c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80217cc:	4ba8      	ldr	r3, [pc, #672]	; (8021a70 <_dtoa_r+0x308>)
 80217ce:	ea33 0308 	bics.w	r3, r3, r8
 80217d2:	d11b      	bne.n	802180c <_dtoa_r+0xa4>
 80217d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80217d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80217da:	6013      	str	r3, [r2, #0]
 80217dc:	9b00      	ldr	r3, [sp, #0]
 80217de:	b923      	cbnz	r3, 80217ea <_dtoa_r+0x82>
 80217e0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80217e4:	2800      	cmp	r0, #0
 80217e6:	f000 8578 	beq.w	80222da <_dtoa_r+0xb72>
 80217ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80217ec:	b953      	cbnz	r3, 8021804 <_dtoa_r+0x9c>
 80217ee:	4ba1      	ldr	r3, [pc, #644]	; (8021a74 <_dtoa_r+0x30c>)
 80217f0:	e021      	b.n	8021836 <_dtoa_r+0xce>
 80217f2:	4ba1      	ldr	r3, [pc, #644]	; (8021a78 <_dtoa_r+0x310>)
 80217f4:	9302      	str	r3, [sp, #8]
 80217f6:	3308      	adds	r3, #8
 80217f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80217fa:	6013      	str	r3, [r2, #0]
 80217fc:	9802      	ldr	r0, [sp, #8]
 80217fe:	b017      	add	sp, #92	; 0x5c
 8021800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021804:	4b9b      	ldr	r3, [pc, #620]	; (8021a74 <_dtoa_r+0x30c>)
 8021806:	9302      	str	r3, [sp, #8]
 8021808:	3303      	adds	r3, #3
 802180a:	e7f5      	b.n	80217f8 <_dtoa_r+0x90>
 802180c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8021810:	2200      	movs	r2, #0
 8021812:	2300      	movs	r3, #0
 8021814:	4630      	mov	r0, r6
 8021816:	4639      	mov	r1, r7
 8021818:	f7df f96a 	bl	8000af0 <__aeabi_dcmpeq>
 802181c:	4681      	mov	r9, r0
 802181e:	b160      	cbz	r0, 802183a <_dtoa_r+0xd2>
 8021820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021822:	2301      	movs	r3, #1
 8021824:	6013      	str	r3, [r2, #0]
 8021826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021828:	2b00      	cmp	r3, #0
 802182a:	f000 8553 	beq.w	80222d4 <_dtoa_r+0xb6c>
 802182e:	4b93      	ldr	r3, [pc, #588]	; (8021a7c <_dtoa_r+0x314>)
 8021830:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021832:	6013      	str	r3, [r2, #0]
 8021834:	3b01      	subs	r3, #1
 8021836:	9302      	str	r3, [sp, #8]
 8021838:	e7e0      	b.n	80217fc <_dtoa_r+0x94>
 802183a:	aa14      	add	r2, sp, #80	; 0x50
 802183c:	a915      	add	r1, sp, #84	; 0x54
 802183e:	ec47 6b10 	vmov	d0, r6, r7
 8021842:	4620      	mov	r0, r4
 8021844:	f001 fa0f 	bl	8022c66 <__d2b>
 8021848:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802184c:	4682      	mov	sl, r0
 802184e:	2d00      	cmp	r5, #0
 8021850:	d07e      	beq.n	8021950 <_dtoa_r+0x1e8>
 8021852:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021856:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 802185a:	4630      	mov	r0, r6
 802185c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8021860:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8021864:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8021868:	2200      	movs	r2, #0
 802186a:	4b85      	ldr	r3, [pc, #532]	; (8021a80 <_dtoa_r+0x318>)
 802186c:	f7de fd24 	bl	80002b8 <__aeabi_dsub>
 8021870:	a379      	add	r3, pc, #484	; (adr r3, 8021a58 <_dtoa_r+0x2f0>)
 8021872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021876:	f7de fed3 	bl	8000620 <__aeabi_dmul>
 802187a:	a379      	add	r3, pc, #484	; (adr r3, 8021a60 <_dtoa_r+0x2f8>)
 802187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021880:	f7de fd1c 	bl	80002bc <__adddf3>
 8021884:	4606      	mov	r6, r0
 8021886:	4628      	mov	r0, r5
 8021888:	460f      	mov	r7, r1
 802188a:	f7de fe63 	bl	8000554 <__aeabi_i2d>
 802188e:	a376      	add	r3, pc, #472	; (adr r3, 8021a68 <_dtoa_r+0x300>)
 8021890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021894:	f7de fec4 	bl	8000620 <__aeabi_dmul>
 8021898:	4602      	mov	r2, r0
 802189a:	460b      	mov	r3, r1
 802189c:	4630      	mov	r0, r6
 802189e:	4639      	mov	r1, r7
 80218a0:	f7de fd0c 	bl	80002bc <__adddf3>
 80218a4:	4606      	mov	r6, r0
 80218a6:	460f      	mov	r7, r1
 80218a8:	f7df f96a 	bl	8000b80 <__aeabi_d2iz>
 80218ac:	2200      	movs	r2, #0
 80218ae:	4683      	mov	fp, r0
 80218b0:	2300      	movs	r3, #0
 80218b2:	4630      	mov	r0, r6
 80218b4:	4639      	mov	r1, r7
 80218b6:	f7df f925 	bl	8000b04 <__aeabi_dcmplt>
 80218ba:	b158      	cbz	r0, 80218d4 <_dtoa_r+0x16c>
 80218bc:	4658      	mov	r0, fp
 80218be:	f7de fe49 	bl	8000554 <__aeabi_i2d>
 80218c2:	4602      	mov	r2, r0
 80218c4:	460b      	mov	r3, r1
 80218c6:	4630      	mov	r0, r6
 80218c8:	4639      	mov	r1, r7
 80218ca:	f7df f911 	bl	8000af0 <__aeabi_dcmpeq>
 80218ce:	b908      	cbnz	r0, 80218d4 <_dtoa_r+0x16c>
 80218d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80218d4:	f1bb 0f16 	cmp.w	fp, #22
 80218d8:	d859      	bhi.n	802198e <_dtoa_r+0x226>
 80218da:	496a      	ldr	r1, [pc, #424]	; (8021a84 <_dtoa_r+0x31c>)
 80218dc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80218e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80218e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80218e8:	f7df f92a 	bl	8000b40 <__aeabi_dcmpgt>
 80218ec:	2800      	cmp	r0, #0
 80218ee:	d050      	beq.n	8021992 <_dtoa_r+0x22a>
 80218f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80218f4:	2300      	movs	r3, #0
 80218f6:	930e      	str	r3, [sp, #56]	; 0x38
 80218f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80218fa:	1b5d      	subs	r5, r3, r5
 80218fc:	1e6b      	subs	r3, r5, #1
 80218fe:	9306      	str	r3, [sp, #24]
 8021900:	bf45      	ittet	mi
 8021902:	f1c5 0301 	rsbmi	r3, r5, #1
 8021906:	9305      	strmi	r3, [sp, #20]
 8021908:	2300      	movpl	r3, #0
 802190a:	2300      	movmi	r3, #0
 802190c:	bf4c      	ite	mi
 802190e:	9306      	strmi	r3, [sp, #24]
 8021910:	9305      	strpl	r3, [sp, #20]
 8021912:	f1bb 0f00 	cmp.w	fp, #0
 8021916:	db3e      	blt.n	8021996 <_dtoa_r+0x22e>
 8021918:	9b06      	ldr	r3, [sp, #24]
 802191a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802191e:	445b      	add	r3, fp
 8021920:	9306      	str	r3, [sp, #24]
 8021922:	2300      	movs	r3, #0
 8021924:	9308      	str	r3, [sp, #32]
 8021926:	9b07      	ldr	r3, [sp, #28]
 8021928:	2b09      	cmp	r3, #9
 802192a:	f200 80af 	bhi.w	8021a8c <_dtoa_r+0x324>
 802192e:	2b05      	cmp	r3, #5
 8021930:	bfc4      	itt	gt
 8021932:	3b04      	subgt	r3, #4
 8021934:	9307      	strgt	r3, [sp, #28]
 8021936:	9b07      	ldr	r3, [sp, #28]
 8021938:	f1a3 0302 	sub.w	r3, r3, #2
 802193c:	bfcc      	ite	gt
 802193e:	2600      	movgt	r6, #0
 8021940:	2601      	movle	r6, #1
 8021942:	2b03      	cmp	r3, #3
 8021944:	f200 80ae 	bhi.w	8021aa4 <_dtoa_r+0x33c>
 8021948:	e8df f003 	tbb	[pc, r3]
 802194c:	772f8482 	.word	0x772f8482
 8021950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021952:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021954:	441d      	add	r5, r3
 8021956:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802195a:	2b20      	cmp	r3, #32
 802195c:	dd11      	ble.n	8021982 <_dtoa_r+0x21a>
 802195e:	9a00      	ldr	r2, [sp, #0]
 8021960:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8021964:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8021968:	fa22 f000 	lsr.w	r0, r2, r0
 802196c:	fa08 f303 	lsl.w	r3, r8, r3
 8021970:	4318      	orrs	r0, r3
 8021972:	f7de fddf 	bl	8000534 <__aeabi_ui2d>
 8021976:	2301      	movs	r3, #1
 8021978:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 802197c:	3d01      	subs	r5, #1
 802197e:	9312      	str	r3, [sp, #72]	; 0x48
 8021980:	e772      	b.n	8021868 <_dtoa_r+0x100>
 8021982:	f1c3 0020 	rsb	r0, r3, #32
 8021986:	9b00      	ldr	r3, [sp, #0]
 8021988:	fa03 f000 	lsl.w	r0, r3, r0
 802198c:	e7f1      	b.n	8021972 <_dtoa_r+0x20a>
 802198e:	2301      	movs	r3, #1
 8021990:	e7b1      	b.n	80218f6 <_dtoa_r+0x18e>
 8021992:	900e      	str	r0, [sp, #56]	; 0x38
 8021994:	e7b0      	b.n	80218f8 <_dtoa_r+0x190>
 8021996:	9b05      	ldr	r3, [sp, #20]
 8021998:	eba3 030b 	sub.w	r3, r3, fp
 802199c:	9305      	str	r3, [sp, #20]
 802199e:	f1cb 0300 	rsb	r3, fp, #0
 80219a2:	9308      	str	r3, [sp, #32]
 80219a4:	2300      	movs	r3, #0
 80219a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80219a8:	e7bd      	b.n	8021926 <_dtoa_r+0x1be>
 80219aa:	2301      	movs	r3, #1
 80219ac:	9309      	str	r3, [sp, #36]	; 0x24
 80219ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	dd7a      	ble.n	8021aaa <_dtoa_r+0x342>
 80219b4:	9304      	str	r3, [sp, #16]
 80219b6:	9303      	str	r3, [sp, #12]
 80219b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80219ba:	2200      	movs	r2, #0
 80219bc:	606a      	str	r2, [r5, #4]
 80219be:	2104      	movs	r1, #4
 80219c0:	f101 0214 	add.w	r2, r1, #20
 80219c4:	429a      	cmp	r2, r3
 80219c6:	d975      	bls.n	8021ab4 <_dtoa_r+0x34c>
 80219c8:	6869      	ldr	r1, [r5, #4]
 80219ca:	4620      	mov	r0, r4
 80219cc:	f000 feca 	bl	8022764 <_Balloc>
 80219d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80219d2:	6028      	str	r0, [r5, #0]
 80219d4:	681b      	ldr	r3, [r3, #0]
 80219d6:	9302      	str	r3, [sp, #8]
 80219d8:	9b03      	ldr	r3, [sp, #12]
 80219da:	2b0e      	cmp	r3, #14
 80219dc:	f200 80e5 	bhi.w	8021baa <_dtoa_r+0x442>
 80219e0:	2e00      	cmp	r6, #0
 80219e2:	f000 80e2 	beq.w	8021baa <_dtoa_r+0x442>
 80219e6:	ed9d 7b00 	vldr	d7, [sp]
 80219ea:	f1bb 0f00 	cmp.w	fp, #0
 80219ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80219f2:	dd74      	ble.n	8021ade <_dtoa_r+0x376>
 80219f4:	4a23      	ldr	r2, [pc, #140]	; (8021a84 <_dtoa_r+0x31c>)
 80219f6:	f00b 030f 	and.w	r3, fp, #15
 80219fa:	ea4f 162b 	mov.w	r6, fp, asr #4
 80219fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021a02:	06f0      	lsls	r0, r6, #27
 8021a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021a08:	d559      	bpl.n	8021abe <_dtoa_r+0x356>
 8021a0a:	4b1f      	ldr	r3, [pc, #124]	; (8021a88 <_dtoa_r+0x320>)
 8021a0c:	ec51 0b17 	vmov	r0, r1, d7
 8021a10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021a14:	f7de ff2e 	bl	8000874 <__aeabi_ddiv>
 8021a18:	e9cd 0100 	strd	r0, r1, [sp]
 8021a1c:	f006 060f 	and.w	r6, r6, #15
 8021a20:	2503      	movs	r5, #3
 8021a22:	4f19      	ldr	r7, [pc, #100]	; (8021a88 <_dtoa_r+0x320>)
 8021a24:	2e00      	cmp	r6, #0
 8021a26:	d14c      	bne.n	8021ac2 <_dtoa_r+0x35a>
 8021a28:	4642      	mov	r2, r8
 8021a2a:	464b      	mov	r3, r9
 8021a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021a30:	f7de ff20 	bl	8000874 <__aeabi_ddiv>
 8021a34:	e9cd 0100 	strd	r0, r1, [sp]
 8021a38:	e06a      	b.n	8021b10 <_dtoa_r+0x3a8>
 8021a3a:	2301      	movs	r3, #1
 8021a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8021a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a40:	445b      	add	r3, fp
 8021a42:	9304      	str	r3, [sp, #16]
 8021a44:	3301      	adds	r3, #1
 8021a46:	2b01      	cmp	r3, #1
 8021a48:	9303      	str	r3, [sp, #12]
 8021a4a:	bfb8      	it	lt
 8021a4c:	2301      	movlt	r3, #1
 8021a4e:	e7b3      	b.n	80219b8 <_dtoa_r+0x250>
 8021a50:	2300      	movs	r3, #0
 8021a52:	e7ab      	b.n	80219ac <_dtoa_r+0x244>
 8021a54:	2300      	movs	r3, #0
 8021a56:	e7f1      	b.n	8021a3c <_dtoa_r+0x2d4>
 8021a58:	636f4361 	.word	0x636f4361
 8021a5c:	3fd287a7 	.word	0x3fd287a7
 8021a60:	8b60c8b3 	.word	0x8b60c8b3
 8021a64:	3fc68a28 	.word	0x3fc68a28
 8021a68:	509f79fb 	.word	0x509f79fb
 8021a6c:	3fd34413 	.word	0x3fd34413
 8021a70:	7ff00000 	.word	0x7ff00000
 8021a74:	08032287 	.word	0x08032287
 8021a78:	0803227e 	.word	0x0803227e
 8021a7c:	0803210e 	.word	0x0803210e
 8021a80:	3ff80000 	.word	0x3ff80000
 8021a84:	080322b8 	.word	0x080322b8
 8021a88:	08032290 	.word	0x08032290
 8021a8c:	2601      	movs	r6, #1
 8021a8e:	2300      	movs	r3, #0
 8021a90:	9307      	str	r3, [sp, #28]
 8021a92:	9609      	str	r6, [sp, #36]	; 0x24
 8021a94:	f04f 33ff 	mov.w	r3, #4294967295
 8021a98:	9304      	str	r3, [sp, #16]
 8021a9a:	9303      	str	r3, [sp, #12]
 8021a9c:	2200      	movs	r2, #0
 8021a9e:	2312      	movs	r3, #18
 8021aa0:	920a      	str	r2, [sp, #40]	; 0x28
 8021aa2:	e789      	b.n	80219b8 <_dtoa_r+0x250>
 8021aa4:	2301      	movs	r3, #1
 8021aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8021aa8:	e7f4      	b.n	8021a94 <_dtoa_r+0x32c>
 8021aaa:	2301      	movs	r3, #1
 8021aac:	9304      	str	r3, [sp, #16]
 8021aae:	9303      	str	r3, [sp, #12]
 8021ab0:	461a      	mov	r2, r3
 8021ab2:	e7f5      	b.n	8021aa0 <_dtoa_r+0x338>
 8021ab4:	686a      	ldr	r2, [r5, #4]
 8021ab6:	3201      	adds	r2, #1
 8021ab8:	606a      	str	r2, [r5, #4]
 8021aba:	0049      	lsls	r1, r1, #1
 8021abc:	e780      	b.n	80219c0 <_dtoa_r+0x258>
 8021abe:	2502      	movs	r5, #2
 8021ac0:	e7af      	b.n	8021a22 <_dtoa_r+0x2ba>
 8021ac2:	07f1      	lsls	r1, r6, #31
 8021ac4:	d508      	bpl.n	8021ad8 <_dtoa_r+0x370>
 8021ac6:	4640      	mov	r0, r8
 8021ac8:	4649      	mov	r1, r9
 8021aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021ace:	f7de fda7 	bl	8000620 <__aeabi_dmul>
 8021ad2:	3501      	adds	r5, #1
 8021ad4:	4680      	mov	r8, r0
 8021ad6:	4689      	mov	r9, r1
 8021ad8:	1076      	asrs	r6, r6, #1
 8021ada:	3708      	adds	r7, #8
 8021adc:	e7a2      	b.n	8021a24 <_dtoa_r+0x2bc>
 8021ade:	f000 809d 	beq.w	8021c1c <_dtoa_r+0x4b4>
 8021ae2:	f1cb 0600 	rsb	r6, fp, #0
 8021ae6:	4b9f      	ldr	r3, [pc, #636]	; (8021d64 <_dtoa_r+0x5fc>)
 8021ae8:	4f9f      	ldr	r7, [pc, #636]	; (8021d68 <_dtoa_r+0x600>)
 8021aea:	f006 020f 	and.w	r2, r6, #15
 8021aee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8021afa:	f7de fd91 	bl	8000620 <__aeabi_dmul>
 8021afe:	e9cd 0100 	strd	r0, r1, [sp]
 8021b02:	1136      	asrs	r6, r6, #4
 8021b04:	2300      	movs	r3, #0
 8021b06:	2502      	movs	r5, #2
 8021b08:	2e00      	cmp	r6, #0
 8021b0a:	d17c      	bne.n	8021c06 <_dtoa_r+0x49e>
 8021b0c:	2b00      	cmp	r3, #0
 8021b0e:	d191      	bne.n	8021a34 <_dtoa_r+0x2cc>
 8021b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	f000 8084 	beq.w	8021c20 <_dtoa_r+0x4b8>
 8021b18:	e9dd 8900 	ldrd	r8, r9, [sp]
 8021b1c:	2200      	movs	r2, #0
 8021b1e:	4b93      	ldr	r3, [pc, #588]	; (8021d6c <_dtoa_r+0x604>)
 8021b20:	4640      	mov	r0, r8
 8021b22:	4649      	mov	r1, r9
 8021b24:	f7de ffee 	bl	8000b04 <__aeabi_dcmplt>
 8021b28:	2800      	cmp	r0, #0
 8021b2a:	d079      	beq.n	8021c20 <_dtoa_r+0x4b8>
 8021b2c:	9b03      	ldr	r3, [sp, #12]
 8021b2e:	2b00      	cmp	r3, #0
 8021b30:	d076      	beq.n	8021c20 <_dtoa_r+0x4b8>
 8021b32:	9b04      	ldr	r3, [sp, #16]
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	dd34      	ble.n	8021ba2 <_dtoa_r+0x43a>
 8021b38:	2200      	movs	r2, #0
 8021b3a:	4b8d      	ldr	r3, [pc, #564]	; (8021d70 <_dtoa_r+0x608>)
 8021b3c:	4640      	mov	r0, r8
 8021b3e:	4649      	mov	r1, r9
 8021b40:	f7de fd6e 	bl	8000620 <__aeabi_dmul>
 8021b44:	e9cd 0100 	strd	r0, r1, [sp]
 8021b48:	9e04      	ldr	r6, [sp, #16]
 8021b4a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8021b4e:	3501      	adds	r5, #1
 8021b50:	4628      	mov	r0, r5
 8021b52:	f7de fcff 	bl	8000554 <__aeabi_i2d>
 8021b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021b5a:	f7de fd61 	bl	8000620 <__aeabi_dmul>
 8021b5e:	2200      	movs	r2, #0
 8021b60:	4b84      	ldr	r3, [pc, #528]	; (8021d74 <_dtoa_r+0x60c>)
 8021b62:	f7de fbab 	bl	80002bc <__adddf3>
 8021b66:	4680      	mov	r8, r0
 8021b68:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8021b6c:	2e00      	cmp	r6, #0
 8021b6e:	d15a      	bne.n	8021c26 <_dtoa_r+0x4be>
 8021b70:	2200      	movs	r2, #0
 8021b72:	4b81      	ldr	r3, [pc, #516]	; (8021d78 <_dtoa_r+0x610>)
 8021b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021b78:	f7de fb9e 	bl	80002b8 <__aeabi_dsub>
 8021b7c:	4642      	mov	r2, r8
 8021b7e:	464b      	mov	r3, r9
 8021b80:	e9cd 0100 	strd	r0, r1, [sp]
 8021b84:	f7de ffdc 	bl	8000b40 <__aeabi_dcmpgt>
 8021b88:	2800      	cmp	r0, #0
 8021b8a:	f040 829b 	bne.w	80220c4 <_dtoa_r+0x95c>
 8021b8e:	4642      	mov	r2, r8
 8021b90:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8021b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021b98:	f7de ffb4 	bl	8000b04 <__aeabi_dcmplt>
 8021b9c:	2800      	cmp	r0, #0
 8021b9e:	f040 828f 	bne.w	80220c0 <_dtoa_r+0x958>
 8021ba2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8021ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8021baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	f2c0 8150 	blt.w	8021e52 <_dtoa_r+0x6ea>
 8021bb2:	f1bb 0f0e 	cmp.w	fp, #14
 8021bb6:	f300 814c 	bgt.w	8021e52 <_dtoa_r+0x6ea>
 8021bba:	4b6a      	ldr	r3, [pc, #424]	; (8021d64 <_dtoa_r+0x5fc>)
 8021bbc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021bc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	f280 80da 	bge.w	8021d80 <_dtoa_r+0x618>
 8021bcc:	9b03      	ldr	r3, [sp, #12]
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	f300 80d6 	bgt.w	8021d80 <_dtoa_r+0x618>
 8021bd4:	f040 8273 	bne.w	80220be <_dtoa_r+0x956>
 8021bd8:	2200      	movs	r2, #0
 8021bda:	4b67      	ldr	r3, [pc, #412]	; (8021d78 <_dtoa_r+0x610>)
 8021bdc:	4640      	mov	r0, r8
 8021bde:	4649      	mov	r1, r9
 8021be0:	f7de fd1e 	bl	8000620 <__aeabi_dmul>
 8021be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021be8:	f7de ffa0 	bl	8000b2c <__aeabi_dcmpge>
 8021bec:	9e03      	ldr	r6, [sp, #12]
 8021bee:	4637      	mov	r7, r6
 8021bf0:	2800      	cmp	r0, #0
 8021bf2:	f040 824a 	bne.w	802208a <_dtoa_r+0x922>
 8021bf6:	9b02      	ldr	r3, [sp, #8]
 8021bf8:	9a02      	ldr	r2, [sp, #8]
 8021bfa:	1c5d      	adds	r5, r3, #1
 8021bfc:	2331      	movs	r3, #49	; 0x31
 8021bfe:	7013      	strb	r3, [r2, #0]
 8021c00:	f10b 0b01 	add.w	fp, fp, #1
 8021c04:	e245      	b.n	8022092 <_dtoa_r+0x92a>
 8021c06:	07f2      	lsls	r2, r6, #31
 8021c08:	d505      	bpl.n	8021c16 <_dtoa_r+0x4ae>
 8021c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021c0e:	f7de fd07 	bl	8000620 <__aeabi_dmul>
 8021c12:	3501      	adds	r5, #1
 8021c14:	2301      	movs	r3, #1
 8021c16:	1076      	asrs	r6, r6, #1
 8021c18:	3708      	adds	r7, #8
 8021c1a:	e775      	b.n	8021b08 <_dtoa_r+0x3a0>
 8021c1c:	2502      	movs	r5, #2
 8021c1e:	e777      	b.n	8021b10 <_dtoa_r+0x3a8>
 8021c20:	465f      	mov	r7, fp
 8021c22:	9e03      	ldr	r6, [sp, #12]
 8021c24:	e794      	b.n	8021b50 <_dtoa_r+0x3e8>
 8021c26:	9a02      	ldr	r2, [sp, #8]
 8021c28:	4b4e      	ldr	r3, [pc, #312]	; (8021d64 <_dtoa_r+0x5fc>)
 8021c2a:	4432      	add	r2, r6
 8021c2c:	9213      	str	r2, [sp, #76]	; 0x4c
 8021c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021c30:	1e71      	subs	r1, r6, #1
 8021c32:	2a00      	cmp	r2, #0
 8021c34:	d048      	beq.n	8021cc8 <_dtoa_r+0x560>
 8021c36:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8021c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c3e:	2000      	movs	r0, #0
 8021c40:	494e      	ldr	r1, [pc, #312]	; (8021d7c <_dtoa_r+0x614>)
 8021c42:	f7de fe17 	bl	8000874 <__aeabi_ddiv>
 8021c46:	4642      	mov	r2, r8
 8021c48:	464b      	mov	r3, r9
 8021c4a:	f7de fb35 	bl	80002b8 <__aeabi_dsub>
 8021c4e:	9d02      	ldr	r5, [sp, #8]
 8021c50:	4680      	mov	r8, r0
 8021c52:	4689      	mov	r9, r1
 8021c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021c58:	f7de ff92 	bl	8000b80 <__aeabi_d2iz>
 8021c5c:	4606      	mov	r6, r0
 8021c5e:	f7de fc79 	bl	8000554 <__aeabi_i2d>
 8021c62:	4602      	mov	r2, r0
 8021c64:	460b      	mov	r3, r1
 8021c66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021c6a:	f7de fb25 	bl	80002b8 <__aeabi_dsub>
 8021c6e:	3630      	adds	r6, #48	; 0x30
 8021c70:	f805 6b01 	strb.w	r6, [r5], #1
 8021c74:	4642      	mov	r2, r8
 8021c76:	464b      	mov	r3, r9
 8021c78:	e9cd 0100 	strd	r0, r1, [sp]
 8021c7c:	f7de ff42 	bl	8000b04 <__aeabi_dcmplt>
 8021c80:	2800      	cmp	r0, #0
 8021c82:	d165      	bne.n	8021d50 <_dtoa_r+0x5e8>
 8021c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021c88:	2000      	movs	r0, #0
 8021c8a:	4938      	ldr	r1, [pc, #224]	; (8021d6c <_dtoa_r+0x604>)
 8021c8c:	f7de fb14 	bl	80002b8 <__aeabi_dsub>
 8021c90:	4642      	mov	r2, r8
 8021c92:	464b      	mov	r3, r9
 8021c94:	f7de ff36 	bl	8000b04 <__aeabi_dcmplt>
 8021c98:	2800      	cmp	r0, #0
 8021c9a:	f040 80ba 	bne.w	8021e12 <_dtoa_r+0x6aa>
 8021c9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021ca0:	429d      	cmp	r5, r3
 8021ca2:	f43f af7e 	beq.w	8021ba2 <_dtoa_r+0x43a>
 8021ca6:	2200      	movs	r2, #0
 8021ca8:	4b31      	ldr	r3, [pc, #196]	; (8021d70 <_dtoa_r+0x608>)
 8021caa:	4640      	mov	r0, r8
 8021cac:	4649      	mov	r1, r9
 8021cae:	f7de fcb7 	bl	8000620 <__aeabi_dmul>
 8021cb2:	2200      	movs	r2, #0
 8021cb4:	4680      	mov	r8, r0
 8021cb6:	4689      	mov	r9, r1
 8021cb8:	4b2d      	ldr	r3, [pc, #180]	; (8021d70 <_dtoa_r+0x608>)
 8021cba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021cbe:	f7de fcaf 	bl	8000620 <__aeabi_dmul>
 8021cc2:	e9cd 0100 	strd	r0, r1, [sp]
 8021cc6:	e7c5      	b.n	8021c54 <_dtoa_r+0x4ec>
 8021cc8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8021ccc:	4642      	mov	r2, r8
 8021cce:	464b      	mov	r3, r9
 8021cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021cd4:	f7de fca4 	bl	8000620 <__aeabi_dmul>
 8021cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8021cdc:	9d02      	ldr	r5, [sp, #8]
 8021cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021ce2:	f7de ff4d 	bl	8000b80 <__aeabi_d2iz>
 8021ce6:	4606      	mov	r6, r0
 8021ce8:	f7de fc34 	bl	8000554 <__aeabi_i2d>
 8021cec:	3630      	adds	r6, #48	; 0x30
 8021cee:	4602      	mov	r2, r0
 8021cf0:	460b      	mov	r3, r1
 8021cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021cf6:	f7de fadf 	bl	80002b8 <__aeabi_dsub>
 8021cfa:	f805 6b01 	strb.w	r6, [r5], #1
 8021cfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021d00:	42ab      	cmp	r3, r5
 8021d02:	4680      	mov	r8, r0
 8021d04:	4689      	mov	r9, r1
 8021d06:	f04f 0200 	mov.w	r2, #0
 8021d0a:	d125      	bne.n	8021d58 <_dtoa_r+0x5f0>
 8021d0c:	4b1b      	ldr	r3, [pc, #108]	; (8021d7c <_dtoa_r+0x614>)
 8021d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8021d12:	f7de fad3 	bl	80002bc <__adddf3>
 8021d16:	4602      	mov	r2, r0
 8021d18:	460b      	mov	r3, r1
 8021d1a:	4640      	mov	r0, r8
 8021d1c:	4649      	mov	r1, r9
 8021d1e:	f7de ff0f 	bl	8000b40 <__aeabi_dcmpgt>
 8021d22:	2800      	cmp	r0, #0
 8021d24:	d175      	bne.n	8021e12 <_dtoa_r+0x6aa>
 8021d26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8021d2a:	2000      	movs	r0, #0
 8021d2c:	4913      	ldr	r1, [pc, #76]	; (8021d7c <_dtoa_r+0x614>)
 8021d2e:	f7de fac3 	bl	80002b8 <__aeabi_dsub>
 8021d32:	4602      	mov	r2, r0
 8021d34:	460b      	mov	r3, r1
 8021d36:	4640      	mov	r0, r8
 8021d38:	4649      	mov	r1, r9
 8021d3a:	f7de fee3 	bl	8000b04 <__aeabi_dcmplt>
 8021d3e:	2800      	cmp	r0, #0
 8021d40:	f43f af2f 	beq.w	8021ba2 <_dtoa_r+0x43a>
 8021d44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021d48:	2b30      	cmp	r3, #48	; 0x30
 8021d4a:	f105 32ff 	add.w	r2, r5, #4294967295
 8021d4e:	d001      	beq.n	8021d54 <_dtoa_r+0x5ec>
 8021d50:	46bb      	mov	fp, r7
 8021d52:	e04d      	b.n	8021df0 <_dtoa_r+0x688>
 8021d54:	4615      	mov	r5, r2
 8021d56:	e7f5      	b.n	8021d44 <_dtoa_r+0x5dc>
 8021d58:	4b05      	ldr	r3, [pc, #20]	; (8021d70 <_dtoa_r+0x608>)
 8021d5a:	f7de fc61 	bl	8000620 <__aeabi_dmul>
 8021d5e:	e9cd 0100 	strd	r0, r1, [sp]
 8021d62:	e7bc      	b.n	8021cde <_dtoa_r+0x576>
 8021d64:	080322b8 	.word	0x080322b8
 8021d68:	08032290 	.word	0x08032290
 8021d6c:	3ff00000 	.word	0x3ff00000
 8021d70:	40240000 	.word	0x40240000
 8021d74:	401c0000 	.word	0x401c0000
 8021d78:	40140000 	.word	0x40140000
 8021d7c:	3fe00000 	.word	0x3fe00000
 8021d80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8021d84:	9d02      	ldr	r5, [sp, #8]
 8021d86:	4642      	mov	r2, r8
 8021d88:	464b      	mov	r3, r9
 8021d8a:	4630      	mov	r0, r6
 8021d8c:	4639      	mov	r1, r7
 8021d8e:	f7de fd71 	bl	8000874 <__aeabi_ddiv>
 8021d92:	f7de fef5 	bl	8000b80 <__aeabi_d2iz>
 8021d96:	9000      	str	r0, [sp, #0]
 8021d98:	f7de fbdc 	bl	8000554 <__aeabi_i2d>
 8021d9c:	4642      	mov	r2, r8
 8021d9e:	464b      	mov	r3, r9
 8021da0:	f7de fc3e 	bl	8000620 <__aeabi_dmul>
 8021da4:	4602      	mov	r2, r0
 8021da6:	460b      	mov	r3, r1
 8021da8:	4630      	mov	r0, r6
 8021daa:	4639      	mov	r1, r7
 8021dac:	f7de fa84 	bl	80002b8 <__aeabi_dsub>
 8021db0:	9e00      	ldr	r6, [sp, #0]
 8021db2:	9f03      	ldr	r7, [sp, #12]
 8021db4:	3630      	adds	r6, #48	; 0x30
 8021db6:	f805 6b01 	strb.w	r6, [r5], #1
 8021dba:	9e02      	ldr	r6, [sp, #8]
 8021dbc:	1bae      	subs	r6, r5, r6
 8021dbe:	42b7      	cmp	r7, r6
 8021dc0:	4602      	mov	r2, r0
 8021dc2:	460b      	mov	r3, r1
 8021dc4:	d138      	bne.n	8021e38 <_dtoa_r+0x6d0>
 8021dc6:	f7de fa79 	bl	80002bc <__adddf3>
 8021dca:	4606      	mov	r6, r0
 8021dcc:	460f      	mov	r7, r1
 8021dce:	4602      	mov	r2, r0
 8021dd0:	460b      	mov	r3, r1
 8021dd2:	4640      	mov	r0, r8
 8021dd4:	4649      	mov	r1, r9
 8021dd6:	f7de fe95 	bl	8000b04 <__aeabi_dcmplt>
 8021dda:	b9c8      	cbnz	r0, 8021e10 <_dtoa_r+0x6a8>
 8021ddc:	4632      	mov	r2, r6
 8021dde:	463b      	mov	r3, r7
 8021de0:	4640      	mov	r0, r8
 8021de2:	4649      	mov	r1, r9
 8021de4:	f7de fe84 	bl	8000af0 <__aeabi_dcmpeq>
 8021de8:	b110      	cbz	r0, 8021df0 <_dtoa_r+0x688>
 8021dea:	9b00      	ldr	r3, [sp, #0]
 8021dec:	07db      	lsls	r3, r3, #31
 8021dee:	d40f      	bmi.n	8021e10 <_dtoa_r+0x6a8>
 8021df0:	4651      	mov	r1, sl
 8021df2:	4620      	mov	r0, r4
 8021df4:	f000 fcea 	bl	80227cc <_Bfree>
 8021df8:	2300      	movs	r3, #0
 8021dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021dfc:	702b      	strb	r3, [r5, #0]
 8021dfe:	f10b 0301 	add.w	r3, fp, #1
 8021e02:	6013      	str	r3, [r2, #0]
 8021e04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	f43f acf8 	beq.w	80217fc <_dtoa_r+0x94>
 8021e0c:	601d      	str	r5, [r3, #0]
 8021e0e:	e4f5      	b.n	80217fc <_dtoa_r+0x94>
 8021e10:	465f      	mov	r7, fp
 8021e12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021e16:	2a39      	cmp	r2, #57	; 0x39
 8021e18:	f105 33ff 	add.w	r3, r5, #4294967295
 8021e1c:	d106      	bne.n	8021e2c <_dtoa_r+0x6c4>
 8021e1e:	9a02      	ldr	r2, [sp, #8]
 8021e20:	429a      	cmp	r2, r3
 8021e22:	d107      	bne.n	8021e34 <_dtoa_r+0x6cc>
 8021e24:	2330      	movs	r3, #48	; 0x30
 8021e26:	7013      	strb	r3, [r2, #0]
 8021e28:	3701      	adds	r7, #1
 8021e2a:	4613      	mov	r3, r2
 8021e2c:	781a      	ldrb	r2, [r3, #0]
 8021e2e:	3201      	adds	r2, #1
 8021e30:	701a      	strb	r2, [r3, #0]
 8021e32:	e78d      	b.n	8021d50 <_dtoa_r+0x5e8>
 8021e34:	461d      	mov	r5, r3
 8021e36:	e7ec      	b.n	8021e12 <_dtoa_r+0x6aa>
 8021e38:	2200      	movs	r2, #0
 8021e3a:	4ba4      	ldr	r3, [pc, #656]	; (80220cc <_dtoa_r+0x964>)
 8021e3c:	f7de fbf0 	bl	8000620 <__aeabi_dmul>
 8021e40:	2200      	movs	r2, #0
 8021e42:	2300      	movs	r3, #0
 8021e44:	4606      	mov	r6, r0
 8021e46:	460f      	mov	r7, r1
 8021e48:	f7de fe52 	bl	8000af0 <__aeabi_dcmpeq>
 8021e4c:	2800      	cmp	r0, #0
 8021e4e:	d09a      	beq.n	8021d86 <_dtoa_r+0x61e>
 8021e50:	e7ce      	b.n	8021df0 <_dtoa_r+0x688>
 8021e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021e54:	2a00      	cmp	r2, #0
 8021e56:	f000 80cd 	beq.w	8021ff4 <_dtoa_r+0x88c>
 8021e5a:	9a07      	ldr	r2, [sp, #28]
 8021e5c:	2a01      	cmp	r2, #1
 8021e5e:	f300 80af 	bgt.w	8021fc0 <_dtoa_r+0x858>
 8021e62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021e64:	2a00      	cmp	r2, #0
 8021e66:	f000 80a7 	beq.w	8021fb8 <_dtoa_r+0x850>
 8021e6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8021e6e:	9e08      	ldr	r6, [sp, #32]
 8021e70:	9d05      	ldr	r5, [sp, #20]
 8021e72:	9a05      	ldr	r2, [sp, #20]
 8021e74:	441a      	add	r2, r3
 8021e76:	9205      	str	r2, [sp, #20]
 8021e78:	9a06      	ldr	r2, [sp, #24]
 8021e7a:	2101      	movs	r1, #1
 8021e7c:	441a      	add	r2, r3
 8021e7e:	4620      	mov	r0, r4
 8021e80:	9206      	str	r2, [sp, #24]
 8021e82:	f000 fd43 	bl	802290c <__i2b>
 8021e86:	4607      	mov	r7, r0
 8021e88:	2d00      	cmp	r5, #0
 8021e8a:	dd0c      	ble.n	8021ea6 <_dtoa_r+0x73e>
 8021e8c:	9b06      	ldr	r3, [sp, #24]
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	dd09      	ble.n	8021ea6 <_dtoa_r+0x73e>
 8021e92:	42ab      	cmp	r3, r5
 8021e94:	9a05      	ldr	r2, [sp, #20]
 8021e96:	bfa8      	it	ge
 8021e98:	462b      	movge	r3, r5
 8021e9a:	1ad2      	subs	r2, r2, r3
 8021e9c:	9205      	str	r2, [sp, #20]
 8021e9e:	9a06      	ldr	r2, [sp, #24]
 8021ea0:	1aed      	subs	r5, r5, r3
 8021ea2:	1ad3      	subs	r3, r2, r3
 8021ea4:	9306      	str	r3, [sp, #24]
 8021ea6:	9b08      	ldr	r3, [sp, #32]
 8021ea8:	b1f3      	cbz	r3, 8021ee8 <_dtoa_r+0x780>
 8021eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	f000 80a5 	beq.w	8021ffc <_dtoa_r+0x894>
 8021eb2:	2e00      	cmp	r6, #0
 8021eb4:	dd10      	ble.n	8021ed8 <_dtoa_r+0x770>
 8021eb6:	4639      	mov	r1, r7
 8021eb8:	4632      	mov	r2, r6
 8021eba:	4620      	mov	r0, r4
 8021ebc:	f000 fdbc 	bl	8022a38 <__pow5mult>
 8021ec0:	4652      	mov	r2, sl
 8021ec2:	4601      	mov	r1, r0
 8021ec4:	4607      	mov	r7, r0
 8021ec6:	4620      	mov	r0, r4
 8021ec8:	f000 fd29 	bl	802291e <__multiply>
 8021ecc:	4651      	mov	r1, sl
 8021ece:	4680      	mov	r8, r0
 8021ed0:	4620      	mov	r0, r4
 8021ed2:	f000 fc7b 	bl	80227cc <_Bfree>
 8021ed6:	46c2      	mov	sl, r8
 8021ed8:	9b08      	ldr	r3, [sp, #32]
 8021eda:	1b9a      	subs	r2, r3, r6
 8021edc:	d004      	beq.n	8021ee8 <_dtoa_r+0x780>
 8021ede:	4651      	mov	r1, sl
 8021ee0:	4620      	mov	r0, r4
 8021ee2:	f000 fda9 	bl	8022a38 <__pow5mult>
 8021ee6:	4682      	mov	sl, r0
 8021ee8:	2101      	movs	r1, #1
 8021eea:	4620      	mov	r0, r4
 8021eec:	f000 fd0e 	bl	802290c <__i2b>
 8021ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	4606      	mov	r6, r0
 8021ef6:	f340 8083 	ble.w	8022000 <_dtoa_r+0x898>
 8021efa:	461a      	mov	r2, r3
 8021efc:	4601      	mov	r1, r0
 8021efe:	4620      	mov	r0, r4
 8021f00:	f000 fd9a 	bl	8022a38 <__pow5mult>
 8021f04:	9b07      	ldr	r3, [sp, #28]
 8021f06:	2b01      	cmp	r3, #1
 8021f08:	4606      	mov	r6, r0
 8021f0a:	dd7c      	ble.n	8022006 <_dtoa_r+0x89e>
 8021f0c:	f04f 0800 	mov.w	r8, #0
 8021f10:	6933      	ldr	r3, [r6, #16]
 8021f12:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021f16:	6918      	ldr	r0, [r3, #16]
 8021f18:	f000 fcaa 	bl	8022870 <__hi0bits>
 8021f1c:	f1c0 0020 	rsb	r0, r0, #32
 8021f20:	9b06      	ldr	r3, [sp, #24]
 8021f22:	4418      	add	r0, r3
 8021f24:	f010 001f 	ands.w	r0, r0, #31
 8021f28:	f000 8096 	beq.w	8022058 <_dtoa_r+0x8f0>
 8021f2c:	f1c0 0320 	rsb	r3, r0, #32
 8021f30:	2b04      	cmp	r3, #4
 8021f32:	f340 8087 	ble.w	8022044 <_dtoa_r+0x8dc>
 8021f36:	9b05      	ldr	r3, [sp, #20]
 8021f38:	f1c0 001c 	rsb	r0, r0, #28
 8021f3c:	4403      	add	r3, r0
 8021f3e:	9305      	str	r3, [sp, #20]
 8021f40:	9b06      	ldr	r3, [sp, #24]
 8021f42:	4405      	add	r5, r0
 8021f44:	4403      	add	r3, r0
 8021f46:	9306      	str	r3, [sp, #24]
 8021f48:	9b05      	ldr	r3, [sp, #20]
 8021f4a:	2b00      	cmp	r3, #0
 8021f4c:	dd05      	ble.n	8021f5a <_dtoa_r+0x7f2>
 8021f4e:	4651      	mov	r1, sl
 8021f50:	461a      	mov	r2, r3
 8021f52:	4620      	mov	r0, r4
 8021f54:	f000 fdbe 	bl	8022ad4 <__lshift>
 8021f58:	4682      	mov	sl, r0
 8021f5a:	9b06      	ldr	r3, [sp, #24]
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	dd05      	ble.n	8021f6c <_dtoa_r+0x804>
 8021f60:	4631      	mov	r1, r6
 8021f62:	461a      	mov	r2, r3
 8021f64:	4620      	mov	r0, r4
 8021f66:	f000 fdb5 	bl	8022ad4 <__lshift>
 8021f6a:	4606      	mov	r6, r0
 8021f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f6e:	2b00      	cmp	r3, #0
 8021f70:	d074      	beq.n	802205c <_dtoa_r+0x8f4>
 8021f72:	4631      	mov	r1, r6
 8021f74:	4650      	mov	r0, sl
 8021f76:	f000 fdfe 	bl	8022b76 <__mcmp>
 8021f7a:	2800      	cmp	r0, #0
 8021f7c:	da6e      	bge.n	802205c <_dtoa_r+0x8f4>
 8021f7e:	2300      	movs	r3, #0
 8021f80:	4651      	mov	r1, sl
 8021f82:	220a      	movs	r2, #10
 8021f84:	4620      	mov	r0, r4
 8021f86:	f000 fc38 	bl	80227fa <__multadd>
 8021f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021f90:	4682      	mov	sl, r0
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	f000 81a8 	beq.w	80222e8 <_dtoa_r+0xb80>
 8021f98:	2300      	movs	r3, #0
 8021f9a:	4639      	mov	r1, r7
 8021f9c:	220a      	movs	r2, #10
 8021f9e:	4620      	mov	r0, r4
 8021fa0:	f000 fc2b 	bl	80227fa <__multadd>
 8021fa4:	9b04      	ldr	r3, [sp, #16]
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	4607      	mov	r7, r0
 8021faa:	f300 80c8 	bgt.w	802213e <_dtoa_r+0x9d6>
 8021fae:	9b07      	ldr	r3, [sp, #28]
 8021fb0:	2b02      	cmp	r3, #2
 8021fb2:	f340 80c4 	ble.w	802213e <_dtoa_r+0x9d6>
 8021fb6:	e059      	b.n	802206c <_dtoa_r+0x904>
 8021fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021fba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021fbe:	e756      	b.n	8021e6e <_dtoa_r+0x706>
 8021fc0:	9b03      	ldr	r3, [sp, #12]
 8021fc2:	1e5e      	subs	r6, r3, #1
 8021fc4:	9b08      	ldr	r3, [sp, #32]
 8021fc6:	42b3      	cmp	r3, r6
 8021fc8:	bfbf      	itttt	lt
 8021fca:	9b08      	ldrlt	r3, [sp, #32]
 8021fcc:	9608      	strlt	r6, [sp, #32]
 8021fce:	1af2      	sublt	r2, r6, r3
 8021fd0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8021fd2:	bfb6      	itet	lt
 8021fd4:	189b      	addlt	r3, r3, r2
 8021fd6:	1b9e      	subge	r6, r3, r6
 8021fd8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8021fda:	9b03      	ldr	r3, [sp, #12]
 8021fdc:	bfb8      	it	lt
 8021fde:	2600      	movlt	r6, #0
 8021fe0:	2b00      	cmp	r3, #0
 8021fe2:	bfb9      	ittee	lt
 8021fe4:	9b05      	ldrlt	r3, [sp, #20]
 8021fe6:	9a03      	ldrlt	r2, [sp, #12]
 8021fe8:	9d05      	ldrge	r5, [sp, #20]
 8021fea:	9b03      	ldrge	r3, [sp, #12]
 8021fec:	bfbc      	itt	lt
 8021fee:	1a9d      	sublt	r5, r3, r2
 8021ff0:	2300      	movlt	r3, #0
 8021ff2:	e73e      	b.n	8021e72 <_dtoa_r+0x70a>
 8021ff4:	9e08      	ldr	r6, [sp, #32]
 8021ff6:	9d05      	ldr	r5, [sp, #20]
 8021ff8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021ffa:	e745      	b.n	8021e88 <_dtoa_r+0x720>
 8021ffc:	9a08      	ldr	r2, [sp, #32]
 8021ffe:	e76e      	b.n	8021ede <_dtoa_r+0x776>
 8022000:	9b07      	ldr	r3, [sp, #28]
 8022002:	2b01      	cmp	r3, #1
 8022004:	dc19      	bgt.n	802203a <_dtoa_r+0x8d2>
 8022006:	9b00      	ldr	r3, [sp, #0]
 8022008:	b9bb      	cbnz	r3, 802203a <_dtoa_r+0x8d2>
 802200a:	9b01      	ldr	r3, [sp, #4]
 802200c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022010:	b99b      	cbnz	r3, 802203a <_dtoa_r+0x8d2>
 8022012:	9b01      	ldr	r3, [sp, #4]
 8022014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022018:	0d1b      	lsrs	r3, r3, #20
 802201a:	051b      	lsls	r3, r3, #20
 802201c:	b183      	cbz	r3, 8022040 <_dtoa_r+0x8d8>
 802201e:	9b05      	ldr	r3, [sp, #20]
 8022020:	3301      	adds	r3, #1
 8022022:	9305      	str	r3, [sp, #20]
 8022024:	9b06      	ldr	r3, [sp, #24]
 8022026:	3301      	adds	r3, #1
 8022028:	9306      	str	r3, [sp, #24]
 802202a:	f04f 0801 	mov.w	r8, #1
 802202e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022030:	2b00      	cmp	r3, #0
 8022032:	f47f af6d 	bne.w	8021f10 <_dtoa_r+0x7a8>
 8022036:	2001      	movs	r0, #1
 8022038:	e772      	b.n	8021f20 <_dtoa_r+0x7b8>
 802203a:	f04f 0800 	mov.w	r8, #0
 802203e:	e7f6      	b.n	802202e <_dtoa_r+0x8c6>
 8022040:	4698      	mov	r8, r3
 8022042:	e7f4      	b.n	802202e <_dtoa_r+0x8c6>
 8022044:	d080      	beq.n	8021f48 <_dtoa_r+0x7e0>
 8022046:	9a05      	ldr	r2, [sp, #20]
 8022048:	331c      	adds	r3, #28
 802204a:	441a      	add	r2, r3
 802204c:	9205      	str	r2, [sp, #20]
 802204e:	9a06      	ldr	r2, [sp, #24]
 8022050:	441a      	add	r2, r3
 8022052:	441d      	add	r5, r3
 8022054:	4613      	mov	r3, r2
 8022056:	e776      	b.n	8021f46 <_dtoa_r+0x7de>
 8022058:	4603      	mov	r3, r0
 802205a:	e7f4      	b.n	8022046 <_dtoa_r+0x8de>
 802205c:	9b03      	ldr	r3, [sp, #12]
 802205e:	2b00      	cmp	r3, #0
 8022060:	dc36      	bgt.n	80220d0 <_dtoa_r+0x968>
 8022062:	9b07      	ldr	r3, [sp, #28]
 8022064:	2b02      	cmp	r3, #2
 8022066:	dd33      	ble.n	80220d0 <_dtoa_r+0x968>
 8022068:	9b03      	ldr	r3, [sp, #12]
 802206a:	9304      	str	r3, [sp, #16]
 802206c:	9b04      	ldr	r3, [sp, #16]
 802206e:	b963      	cbnz	r3, 802208a <_dtoa_r+0x922>
 8022070:	4631      	mov	r1, r6
 8022072:	2205      	movs	r2, #5
 8022074:	4620      	mov	r0, r4
 8022076:	f000 fbc0 	bl	80227fa <__multadd>
 802207a:	4601      	mov	r1, r0
 802207c:	4606      	mov	r6, r0
 802207e:	4650      	mov	r0, sl
 8022080:	f000 fd79 	bl	8022b76 <__mcmp>
 8022084:	2800      	cmp	r0, #0
 8022086:	f73f adb6 	bgt.w	8021bf6 <_dtoa_r+0x48e>
 802208a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802208c:	9d02      	ldr	r5, [sp, #8]
 802208e:	ea6f 0b03 	mvn.w	fp, r3
 8022092:	2300      	movs	r3, #0
 8022094:	9303      	str	r3, [sp, #12]
 8022096:	4631      	mov	r1, r6
 8022098:	4620      	mov	r0, r4
 802209a:	f000 fb97 	bl	80227cc <_Bfree>
 802209e:	2f00      	cmp	r7, #0
 80220a0:	f43f aea6 	beq.w	8021df0 <_dtoa_r+0x688>
 80220a4:	9b03      	ldr	r3, [sp, #12]
 80220a6:	b12b      	cbz	r3, 80220b4 <_dtoa_r+0x94c>
 80220a8:	42bb      	cmp	r3, r7
 80220aa:	d003      	beq.n	80220b4 <_dtoa_r+0x94c>
 80220ac:	4619      	mov	r1, r3
 80220ae:	4620      	mov	r0, r4
 80220b0:	f000 fb8c 	bl	80227cc <_Bfree>
 80220b4:	4639      	mov	r1, r7
 80220b6:	4620      	mov	r0, r4
 80220b8:	f000 fb88 	bl	80227cc <_Bfree>
 80220bc:	e698      	b.n	8021df0 <_dtoa_r+0x688>
 80220be:	2600      	movs	r6, #0
 80220c0:	4637      	mov	r7, r6
 80220c2:	e7e2      	b.n	802208a <_dtoa_r+0x922>
 80220c4:	46bb      	mov	fp, r7
 80220c6:	4637      	mov	r7, r6
 80220c8:	e595      	b.n	8021bf6 <_dtoa_r+0x48e>
 80220ca:	bf00      	nop
 80220cc:	40240000 	.word	0x40240000
 80220d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220d2:	bb93      	cbnz	r3, 802213a <_dtoa_r+0x9d2>
 80220d4:	9b03      	ldr	r3, [sp, #12]
 80220d6:	9304      	str	r3, [sp, #16]
 80220d8:	9d02      	ldr	r5, [sp, #8]
 80220da:	4631      	mov	r1, r6
 80220dc:	4650      	mov	r0, sl
 80220de:	f7ff fab7 	bl	8021650 <quorem>
 80220e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80220e6:	f805 9b01 	strb.w	r9, [r5], #1
 80220ea:	9b02      	ldr	r3, [sp, #8]
 80220ec:	9a04      	ldr	r2, [sp, #16]
 80220ee:	1aeb      	subs	r3, r5, r3
 80220f0:	429a      	cmp	r2, r3
 80220f2:	f300 80dc 	bgt.w	80222ae <_dtoa_r+0xb46>
 80220f6:	9b02      	ldr	r3, [sp, #8]
 80220f8:	2a01      	cmp	r2, #1
 80220fa:	bfac      	ite	ge
 80220fc:	189b      	addge	r3, r3, r2
 80220fe:	3301      	addlt	r3, #1
 8022100:	4698      	mov	r8, r3
 8022102:	2300      	movs	r3, #0
 8022104:	9303      	str	r3, [sp, #12]
 8022106:	4651      	mov	r1, sl
 8022108:	2201      	movs	r2, #1
 802210a:	4620      	mov	r0, r4
 802210c:	f000 fce2 	bl	8022ad4 <__lshift>
 8022110:	4631      	mov	r1, r6
 8022112:	4682      	mov	sl, r0
 8022114:	f000 fd2f 	bl	8022b76 <__mcmp>
 8022118:	2800      	cmp	r0, #0
 802211a:	f300 808d 	bgt.w	8022238 <_dtoa_r+0xad0>
 802211e:	d103      	bne.n	8022128 <_dtoa_r+0x9c0>
 8022120:	f019 0f01 	tst.w	r9, #1
 8022124:	f040 8088 	bne.w	8022238 <_dtoa_r+0xad0>
 8022128:	4645      	mov	r5, r8
 802212a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802212e:	2b30      	cmp	r3, #48	; 0x30
 8022130:	f105 32ff 	add.w	r2, r5, #4294967295
 8022134:	d1af      	bne.n	8022096 <_dtoa_r+0x92e>
 8022136:	4615      	mov	r5, r2
 8022138:	e7f7      	b.n	802212a <_dtoa_r+0x9c2>
 802213a:	9b03      	ldr	r3, [sp, #12]
 802213c:	9304      	str	r3, [sp, #16]
 802213e:	2d00      	cmp	r5, #0
 8022140:	dd05      	ble.n	802214e <_dtoa_r+0x9e6>
 8022142:	4639      	mov	r1, r7
 8022144:	462a      	mov	r2, r5
 8022146:	4620      	mov	r0, r4
 8022148:	f000 fcc4 	bl	8022ad4 <__lshift>
 802214c:	4607      	mov	r7, r0
 802214e:	f1b8 0f00 	cmp.w	r8, #0
 8022152:	d04c      	beq.n	80221ee <_dtoa_r+0xa86>
 8022154:	6879      	ldr	r1, [r7, #4]
 8022156:	4620      	mov	r0, r4
 8022158:	f000 fb04 	bl	8022764 <_Balloc>
 802215c:	693a      	ldr	r2, [r7, #16]
 802215e:	3202      	adds	r2, #2
 8022160:	4605      	mov	r5, r0
 8022162:	0092      	lsls	r2, r2, #2
 8022164:	f107 010c 	add.w	r1, r7, #12
 8022168:	300c      	adds	r0, #12
 802216a:	f7fe fa3d 	bl	80205e8 <memcpy>
 802216e:	2201      	movs	r2, #1
 8022170:	4629      	mov	r1, r5
 8022172:	4620      	mov	r0, r4
 8022174:	f000 fcae 	bl	8022ad4 <__lshift>
 8022178:	9b00      	ldr	r3, [sp, #0]
 802217a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802217e:	9703      	str	r7, [sp, #12]
 8022180:	f003 0301 	and.w	r3, r3, #1
 8022184:	4607      	mov	r7, r0
 8022186:	9305      	str	r3, [sp, #20]
 8022188:	4631      	mov	r1, r6
 802218a:	4650      	mov	r0, sl
 802218c:	f7ff fa60 	bl	8021650 <quorem>
 8022190:	9903      	ldr	r1, [sp, #12]
 8022192:	4605      	mov	r5, r0
 8022194:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8022198:	4650      	mov	r0, sl
 802219a:	f000 fcec 	bl	8022b76 <__mcmp>
 802219e:	463a      	mov	r2, r7
 80221a0:	9000      	str	r0, [sp, #0]
 80221a2:	4631      	mov	r1, r6
 80221a4:	4620      	mov	r0, r4
 80221a6:	f000 fd00 	bl	8022baa <__mdiff>
 80221aa:	68c3      	ldr	r3, [r0, #12]
 80221ac:	4602      	mov	r2, r0
 80221ae:	bb03      	cbnz	r3, 80221f2 <_dtoa_r+0xa8a>
 80221b0:	4601      	mov	r1, r0
 80221b2:	9006      	str	r0, [sp, #24]
 80221b4:	4650      	mov	r0, sl
 80221b6:	f000 fcde 	bl	8022b76 <__mcmp>
 80221ba:	9a06      	ldr	r2, [sp, #24]
 80221bc:	4603      	mov	r3, r0
 80221be:	4611      	mov	r1, r2
 80221c0:	4620      	mov	r0, r4
 80221c2:	9306      	str	r3, [sp, #24]
 80221c4:	f000 fb02 	bl	80227cc <_Bfree>
 80221c8:	9b06      	ldr	r3, [sp, #24]
 80221ca:	b9a3      	cbnz	r3, 80221f6 <_dtoa_r+0xa8e>
 80221cc:	9a07      	ldr	r2, [sp, #28]
 80221ce:	b992      	cbnz	r2, 80221f6 <_dtoa_r+0xa8e>
 80221d0:	9a05      	ldr	r2, [sp, #20]
 80221d2:	b982      	cbnz	r2, 80221f6 <_dtoa_r+0xa8e>
 80221d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80221d8:	d029      	beq.n	802222e <_dtoa_r+0xac6>
 80221da:	9b00      	ldr	r3, [sp, #0]
 80221dc:	2b00      	cmp	r3, #0
 80221de:	dd01      	ble.n	80221e4 <_dtoa_r+0xa7c>
 80221e0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80221e4:	f108 0501 	add.w	r5, r8, #1
 80221e8:	f888 9000 	strb.w	r9, [r8]
 80221ec:	e753      	b.n	8022096 <_dtoa_r+0x92e>
 80221ee:	4638      	mov	r0, r7
 80221f0:	e7c2      	b.n	8022178 <_dtoa_r+0xa10>
 80221f2:	2301      	movs	r3, #1
 80221f4:	e7e3      	b.n	80221be <_dtoa_r+0xa56>
 80221f6:	9a00      	ldr	r2, [sp, #0]
 80221f8:	2a00      	cmp	r2, #0
 80221fa:	db04      	blt.n	8022206 <_dtoa_r+0xa9e>
 80221fc:	d125      	bne.n	802224a <_dtoa_r+0xae2>
 80221fe:	9a07      	ldr	r2, [sp, #28]
 8022200:	bb1a      	cbnz	r2, 802224a <_dtoa_r+0xae2>
 8022202:	9a05      	ldr	r2, [sp, #20]
 8022204:	bb0a      	cbnz	r2, 802224a <_dtoa_r+0xae2>
 8022206:	2b00      	cmp	r3, #0
 8022208:	ddec      	ble.n	80221e4 <_dtoa_r+0xa7c>
 802220a:	4651      	mov	r1, sl
 802220c:	2201      	movs	r2, #1
 802220e:	4620      	mov	r0, r4
 8022210:	f000 fc60 	bl	8022ad4 <__lshift>
 8022214:	4631      	mov	r1, r6
 8022216:	4682      	mov	sl, r0
 8022218:	f000 fcad 	bl	8022b76 <__mcmp>
 802221c:	2800      	cmp	r0, #0
 802221e:	dc03      	bgt.n	8022228 <_dtoa_r+0xac0>
 8022220:	d1e0      	bne.n	80221e4 <_dtoa_r+0xa7c>
 8022222:	f019 0f01 	tst.w	r9, #1
 8022226:	d0dd      	beq.n	80221e4 <_dtoa_r+0xa7c>
 8022228:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802222c:	d1d8      	bne.n	80221e0 <_dtoa_r+0xa78>
 802222e:	2339      	movs	r3, #57	; 0x39
 8022230:	f888 3000 	strb.w	r3, [r8]
 8022234:	f108 0801 	add.w	r8, r8, #1
 8022238:	4645      	mov	r5, r8
 802223a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802223e:	2b39      	cmp	r3, #57	; 0x39
 8022240:	f105 32ff 	add.w	r2, r5, #4294967295
 8022244:	d03b      	beq.n	80222be <_dtoa_r+0xb56>
 8022246:	3301      	adds	r3, #1
 8022248:	e040      	b.n	80222cc <_dtoa_r+0xb64>
 802224a:	2b00      	cmp	r3, #0
 802224c:	f108 0501 	add.w	r5, r8, #1
 8022250:	dd05      	ble.n	802225e <_dtoa_r+0xaf6>
 8022252:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8022256:	d0ea      	beq.n	802222e <_dtoa_r+0xac6>
 8022258:	f109 0901 	add.w	r9, r9, #1
 802225c:	e7c4      	b.n	80221e8 <_dtoa_r+0xa80>
 802225e:	9b02      	ldr	r3, [sp, #8]
 8022260:	9a04      	ldr	r2, [sp, #16]
 8022262:	f805 9c01 	strb.w	r9, [r5, #-1]
 8022266:	1aeb      	subs	r3, r5, r3
 8022268:	4293      	cmp	r3, r2
 802226a:	46a8      	mov	r8, r5
 802226c:	f43f af4b 	beq.w	8022106 <_dtoa_r+0x99e>
 8022270:	4651      	mov	r1, sl
 8022272:	2300      	movs	r3, #0
 8022274:	220a      	movs	r2, #10
 8022276:	4620      	mov	r0, r4
 8022278:	f000 fabf 	bl	80227fa <__multadd>
 802227c:	9b03      	ldr	r3, [sp, #12]
 802227e:	9903      	ldr	r1, [sp, #12]
 8022280:	42bb      	cmp	r3, r7
 8022282:	4682      	mov	sl, r0
 8022284:	f04f 0300 	mov.w	r3, #0
 8022288:	f04f 020a 	mov.w	r2, #10
 802228c:	4620      	mov	r0, r4
 802228e:	d104      	bne.n	802229a <_dtoa_r+0xb32>
 8022290:	f000 fab3 	bl	80227fa <__multadd>
 8022294:	9003      	str	r0, [sp, #12]
 8022296:	4607      	mov	r7, r0
 8022298:	e776      	b.n	8022188 <_dtoa_r+0xa20>
 802229a:	f000 faae 	bl	80227fa <__multadd>
 802229e:	2300      	movs	r3, #0
 80222a0:	9003      	str	r0, [sp, #12]
 80222a2:	220a      	movs	r2, #10
 80222a4:	4639      	mov	r1, r7
 80222a6:	4620      	mov	r0, r4
 80222a8:	f000 faa7 	bl	80227fa <__multadd>
 80222ac:	e7f3      	b.n	8022296 <_dtoa_r+0xb2e>
 80222ae:	4651      	mov	r1, sl
 80222b0:	2300      	movs	r3, #0
 80222b2:	220a      	movs	r2, #10
 80222b4:	4620      	mov	r0, r4
 80222b6:	f000 faa0 	bl	80227fa <__multadd>
 80222ba:	4682      	mov	sl, r0
 80222bc:	e70d      	b.n	80220da <_dtoa_r+0x972>
 80222be:	9b02      	ldr	r3, [sp, #8]
 80222c0:	4293      	cmp	r3, r2
 80222c2:	d105      	bne.n	80222d0 <_dtoa_r+0xb68>
 80222c4:	9a02      	ldr	r2, [sp, #8]
 80222c6:	f10b 0b01 	add.w	fp, fp, #1
 80222ca:	2331      	movs	r3, #49	; 0x31
 80222cc:	7013      	strb	r3, [r2, #0]
 80222ce:	e6e2      	b.n	8022096 <_dtoa_r+0x92e>
 80222d0:	4615      	mov	r5, r2
 80222d2:	e7b2      	b.n	802223a <_dtoa_r+0xad2>
 80222d4:	4b09      	ldr	r3, [pc, #36]	; (80222fc <_dtoa_r+0xb94>)
 80222d6:	f7ff baae 	b.w	8021836 <_dtoa_r+0xce>
 80222da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80222dc:	2b00      	cmp	r3, #0
 80222de:	f47f aa88 	bne.w	80217f2 <_dtoa_r+0x8a>
 80222e2:	4b07      	ldr	r3, [pc, #28]	; (8022300 <_dtoa_r+0xb98>)
 80222e4:	f7ff baa7 	b.w	8021836 <_dtoa_r+0xce>
 80222e8:	9b04      	ldr	r3, [sp, #16]
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	f73f aef4 	bgt.w	80220d8 <_dtoa_r+0x970>
 80222f0:	9b07      	ldr	r3, [sp, #28]
 80222f2:	2b02      	cmp	r3, #2
 80222f4:	f77f aef0 	ble.w	80220d8 <_dtoa_r+0x970>
 80222f8:	e6b8      	b.n	802206c <_dtoa_r+0x904>
 80222fa:	bf00      	nop
 80222fc:	0803210d 	.word	0x0803210d
 8022300:	0803227e 	.word	0x0803227e

08022304 <_localeconv_r>:
 8022304:	4b04      	ldr	r3, [pc, #16]	; (8022318 <_localeconv_r+0x14>)
 8022306:	681b      	ldr	r3, [r3, #0]
 8022308:	6a18      	ldr	r0, [r3, #32]
 802230a:	4b04      	ldr	r3, [pc, #16]	; (802231c <_localeconv_r+0x18>)
 802230c:	2800      	cmp	r0, #0
 802230e:	bf08      	it	eq
 8022310:	4618      	moveq	r0, r3
 8022312:	30f0      	adds	r0, #240	; 0xf0
 8022314:	4770      	bx	lr
 8022316:	bf00      	nop
 8022318:	20000f50 	.word	0x20000f50
 802231c:	20001454 	.word	0x20001454

08022320 <malloc>:
 8022320:	4b02      	ldr	r3, [pc, #8]	; (802232c <malloc+0xc>)
 8022322:	4601      	mov	r1, r0
 8022324:	6818      	ldr	r0, [r3, #0]
 8022326:	f000 b803 	b.w	8022330 <_malloc_r>
 802232a:	bf00      	nop
 802232c:	20000f50 	.word	0x20000f50

08022330 <_malloc_r>:
 8022330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022334:	f101 040b 	add.w	r4, r1, #11
 8022338:	2c16      	cmp	r4, #22
 802233a:	4681      	mov	r9, r0
 802233c:	d907      	bls.n	802234e <_malloc_r+0x1e>
 802233e:	f034 0407 	bics.w	r4, r4, #7
 8022342:	d505      	bpl.n	8022350 <_malloc_r+0x20>
 8022344:	230c      	movs	r3, #12
 8022346:	f8c9 3000 	str.w	r3, [r9]
 802234a:	2600      	movs	r6, #0
 802234c:	e131      	b.n	80225b2 <_malloc_r+0x282>
 802234e:	2410      	movs	r4, #16
 8022350:	428c      	cmp	r4, r1
 8022352:	d3f7      	bcc.n	8022344 <_malloc_r+0x14>
 8022354:	4648      	mov	r0, r9
 8022356:	f000 f9f9 	bl	802274c <__malloc_lock>
 802235a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 802235e:	4d9c      	ldr	r5, [pc, #624]	; (80225d0 <_malloc_r+0x2a0>)
 8022360:	d236      	bcs.n	80223d0 <_malloc_r+0xa0>
 8022362:	f104 0208 	add.w	r2, r4, #8
 8022366:	442a      	add	r2, r5
 8022368:	f1a2 0108 	sub.w	r1, r2, #8
 802236c:	6856      	ldr	r6, [r2, #4]
 802236e:	428e      	cmp	r6, r1
 8022370:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8022374:	d102      	bne.n	802237c <_malloc_r+0x4c>
 8022376:	68d6      	ldr	r6, [r2, #12]
 8022378:	42b2      	cmp	r2, r6
 802237a:	d010      	beq.n	802239e <_malloc_r+0x6e>
 802237c:	6873      	ldr	r3, [r6, #4]
 802237e:	68f2      	ldr	r2, [r6, #12]
 8022380:	68b1      	ldr	r1, [r6, #8]
 8022382:	f023 0303 	bic.w	r3, r3, #3
 8022386:	60ca      	str	r2, [r1, #12]
 8022388:	4433      	add	r3, r6
 802238a:	6091      	str	r1, [r2, #8]
 802238c:	685a      	ldr	r2, [r3, #4]
 802238e:	f042 0201 	orr.w	r2, r2, #1
 8022392:	605a      	str	r2, [r3, #4]
 8022394:	4648      	mov	r0, r9
 8022396:	f000 f9df 	bl	8022758 <__malloc_unlock>
 802239a:	3608      	adds	r6, #8
 802239c:	e109      	b.n	80225b2 <_malloc_r+0x282>
 802239e:	3302      	adds	r3, #2
 80223a0:	4a8c      	ldr	r2, [pc, #560]	; (80225d4 <_malloc_r+0x2a4>)
 80223a2:	692e      	ldr	r6, [r5, #16]
 80223a4:	4296      	cmp	r6, r2
 80223a6:	4611      	mov	r1, r2
 80223a8:	d06d      	beq.n	8022486 <_malloc_r+0x156>
 80223aa:	6870      	ldr	r0, [r6, #4]
 80223ac:	f020 0003 	bic.w	r0, r0, #3
 80223b0:	1b07      	subs	r7, r0, r4
 80223b2:	2f0f      	cmp	r7, #15
 80223b4:	dd47      	ble.n	8022446 <_malloc_r+0x116>
 80223b6:	1933      	adds	r3, r6, r4
 80223b8:	f044 0401 	orr.w	r4, r4, #1
 80223bc:	6074      	str	r4, [r6, #4]
 80223be:	616b      	str	r3, [r5, #20]
 80223c0:	612b      	str	r3, [r5, #16]
 80223c2:	60da      	str	r2, [r3, #12]
 80223c4:	609a      	str	r2, [r3, #8]
 80223c6:	f047 0201 	orr.w	r2, r7, #1
 80223ca:	605a      	str	r2, [r3, #4]
 80223cc:	5037      	str	r7, [r6, r0]
 80223ce:	e7e1      	b.n	8022394 <_malloc_r+0x64>
 80223d0:	0a63      	lsrs	r3, r4, #9
 80223d2:	d02a      	beq.n	802242a <_malloc_r+0xfa>
 80223d4:	2b04      	cmp	r3, #4
 80223d6:	d812      	bhi.n	80223fe <_malloc_r+0xce>
 80223d8:	09a3      	lsrs	r3, r4, #6
 80223da:	3338      	adds	r3, #56	; 0x38
 80223dc:	1c5a      	adds	r2, r3, #1
 80223de:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80223e2:	f1a2 0008 	sub.w	r0, r2, #8
 80223e6:	6856      	ldr	r6, [r2, #4]
 80223e8:	4286      	cmp	r6, r0
 80223ea:	d006      	beq.n	80223fa <_malloc_r+0xca>
 80223ec:	6872      	ldr	r2, [r6, #4]
 80223ee:	f022 0203 	bic.w	r2, r2, #3
 80223f2:	1b11      	subs	r1, r2, r4
 80223f4:	290f      	cmp	r1, #15
 80223f6:	dd1c      	ble.n	8022432 <_malloc_r+0x102>
 80223f8:	3b01      	subs	r3, #1
 80223fa:	3301      	adds	r3, #1
 80223fc:	e7d0      	b.n	80223a0 <_malloc_r+0x70>
 80223fe:	2b14      	cmp	r3, #20
 8022400:	d801      	bhi.n	8022406 <_malloc_r+0xd6>
 8022402:	335b      	adds	r3, #91	; 0x5b
 8022404:	e7ea      	b.n	80223dc <_malloc_r+0xac>
 8022406:	2b54      	cmp	r3, #84	; 0x54
 8022408:	d802      	bhi.n	8022410 <_malloc_r+0xe0>
 802240a:	0b23      	lsrs	r3, r4, #12
 802240c:	336e      	adds	r3, #110	; 0x6e
 802240e:	e7e5      	b.n	80223dc <_malloc_r+0xac>
 8022410:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8022414:	d802      	bhi.n	802241c <_malloc_r+0xec>
 8022416:	0be3      	lsrs	r3, r4, #15
 8022418:	3377      	adds	r3, #119	; 0x77
 802241a:	e7df      	b.n	80223dc <_malloc_r+0xac>
 802241c:	f240 5254 	movw	r2, #1364	; 0x554
 8022420:	4293      	cmp	r3, r2
 8022422:	d804      	bhi.n	802242e <_malloc_r+0xfe>
 8022424:	0ca3      	lsrs	r3, r4, #18
 8022426:	337c      	adds	r3, #124	; 0x7c
 8022428:	e7d8      	b.n	80223dc <_malloc_r+0xac>
 802242a:	233f      	movs	r3, #63	; 0x3f
 802242c:	e7d6      	b.n	80223dc <_malloc_r+0xac>
 802242e:	237e      	movs	r3, #126	; 0x7e
 8022430:	e7d4      	b.n	80223dc <_malloc_r+0xac>
 8022432:	2900      	cmp	r1, #0
 8022434:	68f1      	ldr	r1, [r6, #12]
 8022436:	db04      	blt.n	8022442 <_malloc_r+0x112>
 8022438:	68b3      	ldr	r3, [r6, #8]
 802243a:	60d9      	str	r1, [r3, #12]
 802243c:	608b      	str	r3, [r1, #8]
 802243e:	18b3      	adds	r3, r6, r2
 8022440:	e7a4      	b.n	802238c <_malloc_r+0x5c>
 8022442:	460e      	mov	r6, r1
 8022444:	e7d0      	b.n	80223e8 <_malloc_r+0xb8>
 8022446:	2f00      	cmp	r7, #0
 8022448:	616a      	str	r2, [r5, #20]
 802244a:	612a      	str	r2, [r5, #16]
 802244c:	db05      	blt.n	802245a <_malloc_r+0x12a>
 802244e:	4430      	add	r0, r6
 8022450:	6843      	ldr	r3, [r0, #4]
 8022452:	f043 0301 	orr.w	r3, r3, #1
 8022456:	6043      	str	r3, [r0, #4]
 8022458:	e79c      	b.n	8022394 <_malloc_r+0x64>
 802245a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 802245e:	d244      	bcs.n	80224ea <_malloc_r+0x1ba>
 8022460:	08c0      	lsrs	r0, r0, #3
 8022462:	1087      	asrs	r7, r0, #2
 8022464:	2201      	movs	r2, #1
 8022466:	fa02 f707 	lsl.w	r7, r2, r7
 802246a:	686a      	ldr	r2, [r5, #4]
 802246c:	3001      	adds	r0, #1
 802246e:	433a      	orrs	r2, r7
 8022470:	606a      	str	r2, [r5, #4]
 8022472:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8022476:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 802247a:	60b7      	str	r7, [r6, #8]
 802247c:	3a08      	subs	r2, #8
 802247e:	60f2      	str	r2, [r6, #12]
 8022480:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8022484:	60fe      	str	r6, [r7, #12]
 8022486:	2001      	movs	r0, #1
 8022488:	109a      	asrs	r2, r3, #2
 802248a:	fa00 f202 	lsl.w	r2, r0, r2
 802248e:	6868      	ldr	r0, [r5, #4]
 8022490:	4282      	cmp	r2, r0
 8022492:	f200 80a1 	bhi.w	80225d8 <_malloc_r+0x2a8>
 8022496:	4202      	tst	r2, r0
 8022498:	d106      	bne.n	80224a8 <_malloc_r+0x178>
 802249a:	f023 0303 	bic.w	r3, r3, #3
 802249e:	0052      	lsls	r2, r2, #1
 80224a0:	4202      	tst	r2, r0
 80224a2:	f103 0304 	add.w	r3, r3, #4
 80224a6:	d0fa      	beq.n	802249e <_malloc_r+0x16e>
 80224a8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80224ac:	46e0      	mov	r8, ip
 80224ae:	469e      	mov	lr, r3
 80224b0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80224b4:	4546      	cmp	r6, r8
 80224b6:	d153      	bne.n	8022560 <_malloc_r+0x230>
 80224b8:	f10e 0e01 	add.w	lr, lr, #1
 80224bc:	f01e 0f03 	tst.w	lr, #3
 80224c0:	f108 0808 	add.w	r8, r8, #8
 80224c4:	d1f4      	bne.n	80224b0 <_malloc_r+0x180>
 80224c6:	0798      	lsls	r0, r3, #30
 80224c8:	d179      	bne.n	80225be <_malloc_r+0x28e>
 80224ca:	686b      	ldr	r3, [r5, #4]
 80224cc:	ea23 0302 	bic.w	r3, r3, r2
 80224d0:	606b      	str	r3, [r5, #4]
 80224d2:	6868      	ldr	r0, [r5, #4]
 80224d4:	0052      	lsls	r2, r2, #1
 80224d6:	4282      	cmp	r2, r0
 80224d8:	d87e      	bhi.n	80225d8 <_malloc_r+0x2a8>
 80224da:	2a00      	cmp	r2, #0
 80224dc:	d07c      	beq.n	80225d8 <_malloc_r+0x2a8>
 80224de:	4673      	mov	r3, lr
 80224e0:	4202      	tst	r2, r0
 80224e2:	d1e1      	bne.n	80224a8 <_malloc_r+0x178>
 80224e4:	3304      	adds	r3, #4
 80224e6:	0052      	lsls	r2, r2, #1
 80224e8:	e7fa      	b.n	80224e0 <_malloc_r+0x1b0>
 80224ea:	0a42      	lsrs	r2, r0, #9
 80224ec:	2a04      	cmp	r2, #4
 80224ee:	d815      	bhi.n	802251c <_malloc_r+0x1ec>
 80224f0:	0982      	lsrs	r2, r0, #6
 80224f2:	3238      	adds	r2, #56	; 0x38
 80224f4:	1c57      	adds	r7, r2, #1
 80224f6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80224fa:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80224fe:	45be      	cmp	lr, r7
 8022500:	d126      	bne.n	8022550 <_malloc_r+0x220>
 8022502:	2001      	movs	r0, #1
 8022504:	1092      	asrs	r2, r2, #2
 8022506:	fa00 f202 	lsl.w	r2, r0, r2
 802250a:	6868      	ldr	r0, [r5, #4]
 802250c:	4310      	orrs	r0, r2
 802250e:	6068      	str	r0, [r5, #4]
 8022510:	f8c6 e00c 	str.w	lr, [r6, #12]
 8022514:	60b7      	str	r7, [r6, #8]
 8022516:	f8ce 6008 	str.w	r6, [lr, #8]
 802251a:	e7b3      	b.n	8022484 <_malloc_r+0x154>
 802251c:	2a14      	cmp	r2, #20
 802251e:	d801      	bhi.n	8022524 <_malloc_r+0x1f4>
 8022520:	325b      	adds	r2, #91	; 0x5b
 8022522:	e7e7      	b.n	80224f4 <_malloc_r+0x1c4>
 8022524:	2a54      	cmp	r2, #84	; 0x54
 8022526:	d802      	bhi.n	802252e <_malloc_r+0x1fe>
 8022528:	0b02      	lsrs	r2, r0, #12
 802252a:	326e      	adds	r2, #110	; 0x6e
 802252c:	e7e2      	b.n	80224f4 <_malloc_r+0x1c4>
 802252e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8022532:	d802      	bhi.n	802253a <_malloc_r+0x20a>
 8022534:	0bc2      	lsrs	r2, r0, #15
 8022536:	3277      	adds	r2, #119	; 0x77
 8022538:	e7dc      	b.n	80224f4 <_malloc_r+0x1c4>
 802253a:	f240 5754 	movw	r7, #1364	; 0x554
 802253e:	42ba      	cmp	r2, r7
 8022540:	bf9a      	itte	ls
 8022542:	0c82      	lsrls	r2, r0, #18
 8022544:	327c      	addls	r2, #124	; 0x7c
 8022546:	227e      	movhi	r2, #126	; 0x7e
 8022548:	e7d4      	b.n	80224f4 <_malloc_r+0x1c4>
 802254a:	68bf      	ldr	r7, [r7, #8]
 802254c:	45be      	cmp	lr, r7
 802254e:	d004      	beq.n	802255a <_malloc_r+0x22a>
 8022550:	687a      	ldr	r2, [r7, #4]
 8022552:	f022 0203 	bic.w	r2, r2, #3
 8022556:	4290      	cmp	r0, r2
 8022558:	d3f7      	bcc.n	802254a <_malloc_r+0x21a>
 802255a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 802255e:	e7d7      	b.n	8022510 <_malloc_r+0x1e0>
 8022560:	6870      	ldr	r0, [r6, #4]
 8022562:	68f7      	ldr	r7, [r6, #12]
 8022564:	f020 0003 	bic.w	r0, r0, #3
 8022568:	eba0 0a04 	sub.w	sl, r0, r4
 802256c:	f1ba 0f0f 	cmp.w	sl, #15
 8022570:	dd10      	ble.n	8022594 <_malloc_r+0x264>
 8022572:	68b2      	ldr	r2, [r6, #8]
 8022574:	1933      	adds	r3, r6, r4
 8022576:	f044 0401 	orr.w	r4, r4, #1
 802257a:	6074      	str	r4, [r6, #4]
 802257c:	60d7      	str	r7, [r2, #12]
 802257e:	60ba      	str	r2, [r7, #8]
 8022580:	f04a 0201 	orr.w	r2, sl, #1
 8022584:	616b      	str	r3, [r5, #20]
 8022586:	612b      	str	r3, [r5, #16]
 8022588:	60d9      	str	r1, [r3, #12]
 802258a:	6099      	str	r1, [r3, #8]
 802258c:	605a      	str	r2, [r3, #4]
 802258e:	f846 a000 	str.w	sl, [r6, r0]
 8022592:	e6ff      	b.n	8022394 <_malloc_r+0x64>
 8022594:	f1ba 0f00 	cmp.w	sl, #0
 8022598:	db0f      	blt.n	80225ba <_malloc_r+0x28a>
 802259a:	4430      	add	r0, r6
 802259c:	6843      	ldr	r3, [r0, #4]
 802259e:	f043 0301 	orr.w	r3, r3, #1
 80225a2:	6043      	str	r3, [r0, #4]
 80225a4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80225a8:	4648      	mov	r0, r9
 80225aa:	60df      	str	r7, [r3, #12]
 80225ac:	60bb      	str	r3, [r7, #8]
 80225ae:	f000 f8d3 	bl	8022758 <__malloc_unlock>
 80225b2:	4630      	mov	r0, r6
 80225b4:	b003      	add	sp, #12
 80225b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225ba:	463e      	mov	r6, r7
 80225bc:	e77a      	b.n	80224b4 <_malloc_r+0x184>
 80225be:	f85c 0908 	ldr.w	r0, [ip], #-8
 80225c2:	4584      	cmp	ip, r0
 80225c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80225c8:	f43f af7d 	beq.w	80224c6 <_malloc_r+0x196>
 80225cc:	e781      	b.n	80224d2 <_malloc_r+0x1a2>
 80225ce:	bf00      	nop
 80225d0:	20001044 	.word	0x20001044
 80225d4:	2000104c 	.word	0x2000104c
 80225d8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80225dc:	f8db 6004 	ldr.w	r6, [fp, #4]
 80225e0:	f026 0603 	bic.w	r6, r6, #3
 80225e4:	42b4      	cmp	r4, r6
 80225e6:	d803      	bhi.n	80225f0 <_malloc_r+0x2c0>
 80225e8:	1b33      	subs	r3, r6, r4
 80225ea:	2b0f      	cmp	r3, #15
 80225ec:	f300 8096 	bgt.w	802271c <_malloc_r+0x3ec>
 80225f0:	4a4f      	ldr	r2, [pc, #316]	; (8022730 <_malloc_r+0x400>)
 80225f2:	6817      	ldr	r7, [r2, #0]
 80225f4:	4a4f      	ldr	r2, [pc, #316]	; (8022734 <_malloc_r+0x404>)
 80225f6:	6811      	ldr	r1, [r2, #0]
 80225f8:	3710      	adds	r7, #16
 80225fa:	3101      	adds	r1, #1
 80225fc:	eb0b 0306 	add.w	r3, fp, r6
 8022600:	4427      	add	r7, r4
 8022602:	d005      	beq.n	8022610 <_malloc_r+0x2e0>
 8022604:	494c      	ldr	r1, [pc, #304]	; (8022738 <_malloc_r+0x408>)
 8022606:	3901      	subs	r1, #1
 8022608:	440f      	add	r7, r1
 802260a:	3101      	adds	r1, #1
 802260c:	4249      	negs	r1, r1
 802260e:	400f      	ands	r7, r1
 8022610:	4639      	mov	r1, r7
 8022612:	4648      	mov	r0, r9
 8022614:	9201      	str	r2, [sp, #4]
 8022616:	9300      	str	r3, [sp, #0]
 8022618:	f000 fb74 	bl	8022d04 <_sbrk_r>
 802261c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022620:	4680      	mov	r8, r0
 8022622:	d056      	beq.n	80226d2 <_malloc_r+0x3a2>
 8022624:	9b00      	ldr	r3, [sp, #0]
 8022626:	9a01      	ldr	r2, [sp, #4]
 8022628:	4283      	cmp	r3, r0
 802262a:	d901      	bls.n	8022630 <_malloc_r+0x300>
 802262c:	45ab      	cmp	fp, r5
 802262e:	d150      	bne.n	80226d2 <_malloc_r+0x3a2>
 8022630:	4842      	ldr	r0, [pc, #264]	; (802273c <_malloc_r+0x40c>)
 8022632:	6801      	ldr	r1, [r0, #0]
 8022634:	4543      	cmp	r3, r8
 8022636:	eb07 0e01 	add.w	lr, r7, r1
 802263a:	f8c0 e000 	str.w	lr, [r0]
 802263e:	4940      	ldr	r1, [pc, #256]	; (8022740 <_malloc_r+0x410>)
 8022640:	4682      	mov	sl, r0
 8022642:	d113      	bne.n	802266c <_malloc_r+0x33c>
 8022644:	420b      	tst	r3, r1
 8022646:	d111      	bne.n	802266c <_malloc_r+0x33c>
 8022648:	68ab      	ldr	r3, [r5, #8]
 802264a:	443e      	add	r6, r7
 802264c:	f046 0601 	orr.w	r6, r6, #1
 8022650:	605e      	str	r6, [r3, #4]
 8022652:	4a3c      	ldr	r2, [pc, #240]	; (8022744 <_malloc_r+0x414>)
 8022654:	f8da 3000 	ldr.w	r3, [sl]
 8022658:	6811      	ldr	r1, [r2, #0]
 802265a:	428b      	cmp	r3, r1
 802265c:	bf88      	it	hi
 802265e:	6013      	strhi	r3, [r2, #0]
 8022660:	4a39      	ldr	r2, [pc, #228]	; (8022748 <_malloc_r+0x418>)
 8022662:	6811      	ldr	r1, [r2, #0]
 8022664:	428b      	cmp	r3, r1
 8022666:	bf88      	it	hi
 8022668:	6013      	strhi	r3, [r2, #0]
 802266a:	e032      	b.n	80226d2 <_malloc_r+0x3a2>
 802266c:	6810      	ldr	r0, [r2, #0]
 802266e:	3001      	adds	r0, #1
 8022670:	bf1b      	ittet	ne
 8022672:	eba8 0303 	subne.w	r3, r8, r3
 8022676:	4473      	addne	r3, lr
 8022678:	f8c2 8000 	streq.w	r8, [r2]
 802267c:	f8ca 3000 	strne.w	r3, [sl]
 8022680:	f018 0007 	ands.w	r0, r8, #7
 8022684:	bf1c      	itt	ne
 8022686:	f1c0 0008 	rsbne	r0, r0, #8
 802268a:	4480      	addne	r8, r0
 802268c:	4b2a      	ldr	r3, [pc, #168]	; (8022738 <_malloc_r+0x408>)
 802268e:	4447      	add	r7, r8
 8022690:	4418      	add	r0, r3
 8022692:	400f      	ands	r7, r1
 8022694:	1bc7      	subs	r7, r0, r7
 8022696:	4639      	mov	r1, r7
 8022698:	4648      	mov	r0, r9
 802269a:	f000 fb33 	bl	8022d04 <_sbrk_r>
 802269e:	1c43      	adds	r3, r0, #1
 80226a0:	bf08      	it	eq
 80226a2:	4640      	moveq	r0, r8
 80226a4:	f8da 3000 	ldr.w	r3, [sl]
 80226a8:	f8c5 8008 	str.w	r8, [r5, #8]
 80226ac:	bf08      	it	eq
 80226ae:	2700      	moveq	r7, #0
 80226b0:	eba0 0008 	sub.w	r0, r0, r8
 80226b4:	443b      	add	r3, r7
 80226b6:	4407      	add	r7, r0
 80226b8:	f047 0701 	orr.w	r7, r7, #1
 80226bc:	45ab      	cmp	fp, r5
 80226be:	f8ca 3000 	str.w	r3, [sl]
 80226c2:	f8c8 7004 	str.w	r7, [r8, #4]
 80226c6:	d0c4      	beq.n	8022652 <_malloc_r+0x322>
 80226c8:	2e0f      	cmp	r6, #15
 80226ca:	d810      	bhi.n	80226ee <_malloc_r+0x3be>
 80226cc:	2301      	movs	r3, #1
 80226ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80226d2:	68ab      	ldr	r3, [r5, #8]
 80226d4:	685a      	ldr	r2, [r3, #4]
 80226d6:	f022 0203 	bic.w	r2, r2, #3
 80226da:	4294      	cmp	r4, r2
 80226dc:	eba2 0304 	sub.w	r3, r2, r4
 80226e0:	d801      	bhi.n	80226e6 <_malloc_r+0x3b6>
 80226e2:	2b0f      	cmp	r3, #15
 80226e4:	dc1a      	bgt.n	802271c <_malloc_r+0x3ec>
 80226e6:	4648      	mov	r0, r9
 80226e8:	f000 f836 	bl	8022758 <__malloc_unlock>
 80226ec:	e62d      	b.n	802234a <_malloc_r+0x1a>
 80226ee:	f8db 3004 	ldr.w	r3, [fp, #4]
 80226f2:	3e0c      	subs	r6, #12
 80226f4:	f026 0607 	bic.w	r6, r6, #7
 80226f8:	f003 0301 	and.w	r3, r3, #1
 80226fc:	4333      	orrs	r3, r6
 80226fe:	f8cb 3004 	str.w	r3, [fp, #4]
 8022702:	eb0b 0306 	add.w	r3, fp, r6
 8022706:	2205      	movs	r2, #5
 8022708:	2e0f      	cmp	r6, #15
 802270a:	605a      	str	r2, [r3, #4]
 802270c:	609a      	str	r2, [r3, #8]
 802270e:	d9a0      	bls.n	8022652 <_malloc_r+0x322>
 8022710:	f10b 0108 	add.w	r1, fp, #8
 8022714:	4648      	mov	r0, r9
 8022716:	f000 fc03 	bl	8022f20 <_free_r>
 802271a:	e79a      	b.n	8022652 <_malloc_r+0x322>
 802271c:	68ae      	ldr	r6, [r5, #8]
 802271e:	f044 0201 	orr.w	r2, r4, #1
 8022722:	4434      	add	r4, r6
 8022724:	f043 0301 	orr.w	r3, r3, #1
 8022728:	6072      	str	r2, [r6, #4]
 802272a:	60ac      	str	r4, [r5, #8]
 802272c:	6063      	str	r3, [r4, #4]
 802272e:	e631      	b.n	8022394 <_malloc_r+0x64>
 8022730:	20090670 	.word	0x20090670
 8022734:	2000144c 	.word	0x2000144c
 8022738:	00000080 	.word	0x00000080
 802273c:	20090640 	.word	0x20090640
 8022740:	0000007f 	.word	0x0000007f
 8022744:	20090668 	.word	0x20090668
 8022748:	2009066c 	.word	0x2009066c

0802274c <__malloc_lock>:
 802274c:	4801      	ldr	r0, [pc, #4]	; (8022754 <__malloc_lock+0x8>)
 802274e:	f000 bca3 	b.w	8023098 <__retarget_lock_acquire_recursive>
 8022752:	bf00      	nop
 8022754:	20096594 	.word	0x20096594

08022758 <__malloc_unlock>:
 8022758:	4801      	ldr	r0, [pc, #4]	; (8022760 <__malloc_unlock+0x8>)
 802275a:	f000 bc9e 	b.w	802309a <__retarget_lock_release_recursive>
 802275e:	bf00      	nop
 8022760:	20096594 	.word	0x20096594

08022764 <_Balloc>:
 8022764:	b570      	push	{r4, r5, r6, lr}
 8022766:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022768:	4604      	mov	r4, r0
 802276a:	460e      	mov	r6, r1
 802276c:	b93d      	cbnz	r5, 802277e <_Balloc+0x1a>
 802276e:	2010      	movs	r0, #16
 8022770:	f7ff fdd6 	bl	8022320 <malloc>
 8022774:	6260      	str	r0, [r4, #36]	; 0x24
 8022776:	6045      	str	r5, [r0, #4]
 8022778:	6085      	str	r5, [r0, #8]
 802277a:	6005      	str	r5, [r0, #0]
 802277c:	60c5      	str	r5, [r0, #12]
 802277e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022780:	68eb      	ldr	r3, [r5, #12]
 8022782:	b183      	cbz	r3, 80227a6 <_Balloc+0x42>
 8022784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022786:	68db      	ldr	r3, [r3, #12]
 8022788:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802278c:	b9b8      	cbnz	r0, 80227be <_Balloc+0x5a>
 802278e:	2101      	movs	r1, #1
 8022790:	fa01 f506 	lsl.w	r5, r1, r6
 8022794:	1d6a      	adds	r2, r5, #5
 8022796:	0092      	lsls	r2, r2, #2
 8022798:	4620      	mov	r0, r4
 802279a:	f000 fb3d 	bl	8022e18 <_calloc_r>
 802279e:	b160      	cbz	r0, 80227ba <_Balloc+0x56>
 80227a0:	6046      	str	r6, [r0, #4]
 80227a2:	6085      	str	r5, [r0, #8]
 80227a4:	e00e      	b.n	80227c4 <_Balloc+0x60>
 80227a6:	2221      	movs	r2, #33	; 0x21
 80227a8:	2104      	movs	r1, #4
 80227aa:	4620      	mov	r0, r4
 80227ac:	f000 fb34 	bl	8022e18 <_calloc_r>
 80227b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80227b2:	60e8      	str	r0, [r5, #12]
 80227b4:	68db      	ldr	r3, [r3, #12]
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	d1e4      	bne.n	8022784 <_Balloc+0x20>
 80227ba:	2000      	movs	r0, #0
 80227bc:	bd70      	pop	{r4, r5, r6, pc}
 80227be:	6802      	ldr	r2, [r0, #0]
 80227c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80227c4:	2300      	movs	r3, #0
 80227c6:	6103      	str	r3, [r0, #16]
 80227c8:	60c3      	str	r3, [r0, #12]
 80227ca:	bd70      	pop	{r4, r5, r6, pc}

080227cc <_Bfree>:
 80227cc:	b570      	push	{r4, r5, r6, lr}
 80227ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80227d0:	4606      	mov	r6, r0
 80227d2:	460d      	mov	r5, r1
 80227d4:	b93c      	cbnz	r4, 80227e6 <_Bfree+0x1a>
 80227d6:	2010      	movs	r0, #16
 80227d8:	f7ff fda2 	bl	8022320 <malloc>
 80227dc:	6270      	str	r0, [r6, #36]	; 0x24
 80227de:	6044      	str	r4, [r0, #4]
 80227e0:	6084      	str	r4, [r0, #8]
 80227e2:	6004      	str	r4, [r0, #0]
 80227e4:	60c4      	str	r4, [r0, #12]
 80227e6:	b13d      	cbz	r5, 80227f8 <_Bfree+0x2c>
 80227e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80227ea:	686a      	ldr	r2, [r5, #4]
 80227ec:	68db      	ldr	r3, [r3, #12]
 80227ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80227f2:	6029      	str	r1, [r5, #0]
 80227f4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80227f8:	bd70      	pop	{r4, r5, r6, pc}

080227fa <__multadd>:
 80227fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227fe:	690d      	ldr	r5, [r1, #16]
 8022800:	461f      	mov	r7, r3
 8022802:	4606      	mov	r6, r0
 8022804:	460c      	mov	r4, r1
 8022806:	f101 0e14 	add.w	lr, r1, #20
 802280a:	2300      	movs	r3, #0
 802280c:	f8de 0000 	ldr.w	r0, [lr]
 8022810:	b281      	uxth	r1, r0
 8022812:	fb02 7101 	mla	r1, r2, r1, r7
 8022816:	0c0f      	lsrs	r7, r1, #16
 8022818:	0c00      	lsrs	r0, r0, #16
 802281a:	fb02 7000 	mla	r0, r2, r0, r7
 802281e:	b289      	uxth	r1, r1
 8022820:	3301      	adds	r3, #1
 8022822:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8022826:	429d      	cmp	r5, r3
 8022828:	ea4f 4710 	mov.w	r7, r0, lsr #16
 802282c:	f84e 1b04 	str.w	r1, [lr], #4
 8022830:	dcec      	bgt.n	802280c <__multadd+0x12>
 8022832:	b1d7      	cbz	r7, 802286a <__multadd+0x70>
 8022834:	68a3      	ldr	r3, [r4, #8]
 8022836:	429d      	cmp	r5, r3
 8022838:	db12      	blt.n	8022860 <__multadd+0x66>
 802283a:	6861      	ldr	r1, [r4, #4]
 802283c:	4630      	mov	r0, r6
 802283e:	3101      	adds	r1, #1
 8022840:	f7ff ff90 	bl	8022764 <_Balloc>
 8022844:	6922      	ldr	r2, [r4, #16]
 8022846:	3202      	adds	r2, #2
 8022848:	f104 010c 	add.w	r1, r4, #12
 802284c:	4680      	mov	r8, r0
 802284e:	0092      	lsls	r2, r2, #2
 8022850:	300c      	adds	r0, #12
 8022852:	f7fd fec9 	bl	80205e8 <memcpy>
 8022856:	4621      	mov	r1, r4
 8022858:	4630      	mov	r0, r6
 802285a:	f7ff ffb7 	bl	80227cc <_Bfree>
 802285e:	4644      	mov	r4, r8
 8022860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022864:	3501      	adds	r5, #1
 8022866:	615f      	str	r7, [r3, #20]
 8022868:	6125      	str	r5, [r4, #16]
 802286a:	4620      	mov	r0, r4
 802286c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022870 <__hi0bits>:
 8022870:	0c02      	lsrs	r2, r0, #16
 8022872:	0412      	lsls	r2, r2, #16
 8022874:	4603      	mov	r3, r0
 8022876:	b9b2      	cbnz	r2, 80228a6 <__hi0bits+0x36>
 8022878:	0403      	lsls	r3, r0, #16
 802287a:	2010      	movs	r0, #16
 802287c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8022880:	bf04      	itt	eq
 8022882:	021b      	lsleq	r3, r3, #8
 8022884:	3008      	addeq	r0, #8
 8022886:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802288a:	bf04      	itt	eq
 802288c:	011b      	lsleq	r3, r3, #4
 802288e:	3004      	addeq	r0, #4
 8022890:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8022894:	bf04      	itt	eq
 8022896:	009b      	lsleq	r3, r3, #2
 8022898:	3002      	addeq	r0, #2
 802289a:	2b00      	cmp	r3, #0
 802289c:	db06      	blt.n	80228ac <__hi0bits+0x3c>
 802289e:	005b      	lsls	r3, r3, #1
 80228a0:	d503      	bpl.n	80228aa <__hi0bits+0x3a>
 80228a2:	3001      	adds	r0, #1
 80228a4:	4770      	bx	lr
 80228a6:	2000      	movs	r0, #0
 80228a8:	e7e8      	b.n	802287c <__hi0bits+0xc>
 80228aa:	2020      	movs	r0, #32
 80228ac:	4770      	bx	lr

080228ae <__lo0bits>:
 80228ae:	6803      	ldr	r3, [r0, #0]
 80228b0:	f013 0207 	ands.w	r2, r3, #7
 80228b4:	4601      	mov	r1, r0
 80228b6:	d00b      	beq.n	80228d0 <__lo0bits+0x22>
 80228b8:	07da      	lsls	r2, r3, #31
 80228ba:	d423      	bmi.n	8022904 <__lo0bits+0x56>
 80228bc:	0798      	lsls	r0, r3, #30
 80228be:	bf49      	itett	mi
 80228c0:	085b      	lsrmi	r3, r3, #1
 80228c2:	089b      	lsrpl	r3, r3, #2
 80228c4:	2001      	movmi	r0, #1
 80228c6:	600b      	strmi	r3, [r1, #0]
 80228c8:	bf5c      	itt	pl
 80228ca:	600b      	strpl	r3, [r1, #0]
 80228cc:	2002      	movpl	r0, #2
 80228ce:	4770      	bx	lr
 80228d0:	b298      	uxth	r0, r3
 80228d2:	b9a8      	cbnz	r0, 8022900 <__lo0bits+0x52>
 80228d4:	0c1b      	lsrs	r3, r3, #16
 80228d6:	2010      	movs	r0, #16
 80228d8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80228dc:	bf04      	itt	eq
 80228de:	0a1b      	lsreq	r3, r3, #8
 80228e0:	3008      	addeq	r0, #8
 80228e2:	071a      	lsls	r2, r3, #28
 80228e4:	bf04      	itt	eq
 80228e6:	091b      	lsreq	r3, r3, #4
 80228e8:	3004      	addeq	r0, #4
 80228ea:	079a      	lsls	r2, r3, #30
 80228ec:	bf04      	itt	eq
 80228ee:	089b      	lsreq	r3, r3, #2
 80228f0:	3002      	addeq	r0, #2
 80228f2:	07da      	lsls	r2, r3, #31
 80228f4:	d402      	bmi.n	80228fc <__lo0bits+0x4e>
 80228f6:	085b      	lsrs	r3, r3, #1
 80228f8:	d006      	beq.n	8022908 <__lo0bits+0x5a>
 80228fa:	3001      	adds	r0, #1
 80228fc:	600b      	str	r3, [r1, #0]
 80228fe:	4770      	bx	lr
 8022900:	4610      	mov	r0, r2
 8022902:	e7e9      	b.n	80228d8 <__lo0bits+0x2a>
 8022904:	2000      	movs	r0, #0
 8022906:	4770      	bx	lr
 8022908:	2020      	movs	r0, #32
 802290a:	4770      	bx	lr

0802290c <__i2b>:
 802290c:	b510      	push	{r4, lr}
 802290e:	460c      	mov	r4, r1
 8022910:	2101      	movs	r1, #1
 8022912:	f7ff ff27 	bl	8022764 <_Balloc>
 8022916:	2201      	movs	r2, #1
 8022918:	6144      	str	r4, [r0, #20]
 802291a:	6102      	str	r2, [r0, #16]
 802291c:	bd10      	pop	{r4, pc}

0802291e <__multiply>:
 802291e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022922:	4614      	mov	r4, r2
 8022924:	690a      	ldr	r2, [r1, #16]
 8022926:	6923      	ldr	r3, [r4, #16]
 8022928:	429a      	cmp	r2, r3
 802292a:	bfb8      	it	lt
 802292c:	460b      	movlt	r3, r1
 802292e:	4689      	mov	r9, r1
 8022930:	bfbc      	itt	lt
 8022932:	46a1      	movlt	r9, r4
 8022934:	461c      	movlt	r4, r3
 8022936:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802293a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802293e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8022942:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8022946:	eb07 060a 	add.w	r6, r7, sl
 802294a:	429e      	cmp	r6, r3
 802294c:	bfc8      	it	gt
 802294e:	3101      	addgt	r1, #1
 8022950:	f7ff ff08 	bl	8022764 <_Balloc>
 8022954:	f100 0514 	add.w	r5, r0, #20
 8022958:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802295c:	462b      	mov	r3, r5
 802295e:	2200      	movs	r2, #0
 8022960:	4543      	cmp	r3, r8
 8022962:	d316      	bcc.n	8022992 <__multiply+0x74>
 8022964:	f104 0214 	add.w	r2, r4, #20
 8022968:	f109 0114 	add.w	r1, r9, #20
 802296c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8022970:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8022974:	9301      	str	r3, [sp, #4]
 8022976:	9c01      	ldr	r4, [sp, #4]
 8022978:	4294      	cmp	r4, r2
 802297a:	4613      	mov	r3, r2
 802297c:	d80c      	bhi.n	8022998 <__multiply+0x7a>
 802297e:	2e00      	cmp	r6, #0
 8022980:	dd03      	ble.n	802298a <__multiply+0x6c>
 8022982:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022986:	2b00      	cmp	r3, #0
 8022988:	d054      	beq.n	8022a34 <__multiply+0x116>
 802298a:	6106      	str	r6, [r0, #16]
 802298c:	b003      	add	sp, #12
 802298e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022992:	f843 2b04 	str.w	r2, [r3], #4
 8022996:	e7e3      	b.n	8022960 <__multiply+0x42>
 8022998:	f8b3 a000 	ldrh.w	sl, [r3]
 802299c:	3204      	adds	r2, #4
 802299e:	f1ba 0f00 	cmp.w	sl, #0
 80229a2:	d020      	beq.n	80229e6 <__multiply+0xc8>
 80229a4:	46ae      	mov	lr, r5
 80229a6:	4689      	mov	r9, r1
 80229a8:	f04f 0c00 	mov.w	ip, #0
 80229ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80229b0:	f8be b000 	ldrh.w	fp, [lr]
 80229b4:	b2a3      	uxth	r3, r4
 80229b6:	fb0a b303 	mla	r3, sl, r3, fp
 80229ba:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80229be:	f8de 4000 	ldr.w	r4, [lr]
 80229c2:	4463      	add	r3, ip
 80229c4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80229c8:	fb0a c40b 	mla	r4, sl, fp, ip
 80229cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80229d0:	b29b      	uxth	r3, r3
 80229d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80229d6:	454f      	cmp	r7, r9
 80229d8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80229dc:	f84e 3b04 	str.w	r3, [lr], #4
 80229e0:	d8e4      	bhi.n	80229ac <__multiply+0x8e>
 80229e2:	f8ce c000 	str.w	ip, [lr]
 80229e6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80229ea:	f1b9 0f00 	cmp.w	r9, #0
 80229ee:	d01f      	beq.n	8022a30 <__multiply+0x112>
 80229f0:	682b      	ldr	r3, [r5, #0]
 80229f2:	46ae      	mov	lr, r5
 80229f4:	468c      	mov	ip, r1
 80229f6:	f04f 0a00 	mov.w	sl, #0
 80229fa:	f8bc 4000 	ldrh.w	r4, [ip]
 80229fe:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022a02:	fb09 b404 	mla	r4, r9, r4, fp
 8022a06:	44a2      	add	sl, r4
 8022a08:	b29b      	uxth	r3, r3
 8022a0a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8022a0e:	f84e 3b04 	str.w	r3, [lr], #4
 8022a12:	f85c 3b04 	ldr.w	r3, [ip], #4
 8022a16:	f8be 4000 	ldrh.w	r4, [lr]
 8022a1a:	0c1b      	lsrs	r3, r3, #16
 8022a1c:	fb09 4303 	mla	r3, r9, r3, r4
 8022a20:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8022a24:	4567      	cmp	r7, ip
 8022a26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022a2a:	d8e6      	bhi.n	80229fa <__multiply+0xdc>
 8022a2c:	f8ce 3000 	str.w	r3, [lr]
 8022a30:	3504      	adds	r5, #4
 8022a32:	e7a0      	b.n	8022976 <__multiply+0x58>
 8022a34:	3e01      	subs	r6, #1
 8022a36:	e7a2      	b.n	802297e <__multiply+0x60>

08022a38 <__pow5mult>:
 8022a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022a3c:	4615      	mov	r5, r2
 8022a3e:	f012 0203 	ands.w	r2, r2, #3
 8022a42:	4606      	mov	r6, r0
 8022a44:	460f      	mov	r7, r1
 8022a46:	d007      	beq.n	8022a58 <__pow5mult+0x20>
 8022a48:	3a01      	subs	r2, #1
 8022a4a:	4c21      	ldr	r4, [pc, #132]	; (8022ad0 <__pow5mult+0x98>)
 8022a4c:	2300      	movs	r3, #0
 8022a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022a52:	f7ff fed2 	bl	80227fa <__multadd>
 8022a56:	4607      	mov	r7, r0
 8022a58:	10ad      	asrs	r5, r5, #2
 8022a5a:	d035      	beq.n	8022ac8 <__pow5mult+0x90>
 8022a5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022a5e:	b93c      	cbnz	r4, 8022a70 <__pow5mult+0x38>
 8022a60:	2010      	movs	r0, #16
 8022a62:	f7ff fc5d 	bl	8022320 <malloc>
 8022a66:	6270      	str	r0, [r6, #36]	; 0x24
 8022a68:	6044      	str	r4, [r0, #4]
 8022a6a:	6084      	str	r4, [r0, #8]
 8022a6c:	6004      	str	r4, [r0, #0]
 8022a6e:	60c4      	str	r4, [r0, #12]
 8022a70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022a74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022a78:	b94c      	cbnz	r4, 8022a8e <__pow5mult+0x56>
 8022a7a:	f240 2171 	movw	r1, #625	; 0x271
 8022a7e:	4630      	mov	r0, r6
 8022a80:	f7ff ff44 	bl	802290c <__i2b>
 8022a84:	2300      	movs	r3, #0
 8022a86:	f8c8 0008 	str.w	r0, [r8, #8]
 8022a8a:	4604      	mov	r4, r0
 8022a8c:	6003      	str	r3, [r0, #0]
 8022a8e:	f04f 0800 	mov.w	r8, #0
 8022a92:	07eb      	lsls	r3, r5, #31
 8022a94:	d50a      	bpl.n	8022aac <__pow5mult+0x74>
 8022a96:	4639      	mov	r1, r7
 8022a98:	4622      	mov	r2, r4
 8022a9a:	4630      	mov	r0, r6
 8022a9c:	f7ff ff3f 	bl	802291e <__multiply>
 8022aa0:	4639      	mov	r1, r7
 8022aa2:	4681      	mov	r9, r0
 8022aa4:	4630      	mov	r0, r6
 8022aa6:	f7ff fe91 	bl	80227cc <_Bfree>
 8022aaa:	464f      	mov	r7, r9
 8022aac:	106d      	asrs	r5, r5, #1
 8022aae:	d00b      	beq.n	8022ac8 <__pow5mult+0x90>
 8022ab0:	6820      	ldr	r0, [r4, #0]
 8022ab2:	b938      	cbnz	r0, 8022ac4 <__pow5mult+0x8c>
 8022ab4:	4622      	mov	r2, r4
 8022ab6:	4621      	mov	r1, r4
 8022ab8:	4630      	mov	r0, r6
 8022aba:	f7ff ff30 	bl	802291e <__multiply>
 8022abe:	6020      	str	r0, [r4, #0]
 8022ac0:	f8c0 8000 	str.w	r8, [r0]
 8022ac4:	4604      	mov	r4, r0
 8022ac6:	e7e4      	b.n	8022a92 <__pow5mult+0x5a>
 8022ac8:	4638      	mov	r0, r7
 8022aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022ace:	bf00      	nop
 8022ad0:	08032380 	.word	0x08032380

08022ad4 <__lshift>:
 8022ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ad8:	460c      	mov	r4, r1
 8022ada:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022ade:	6923      	ldr	r3, [r4, #16]
 8022ae0:	6849      	ldr	r1, [r1, #4]
 8022ae2:	eb0a 0903 	add.w	r9, sl, r3
 8022ae6:	68a3      	ldr	r3, [r4, #8]
 8022ae8:	4607      	mov	r7, r0
 8022aea:	4616      	mov	r6, r2
 8022aec:	f109 0501 	add.w	r5, r9, #1
 8022af0:	42ab      	cmp	r3, r5
 8022af2:	db31      	blt.n	8022b58 <__lshift+0x84>
 8022af4:	4638      	mov	r0, r7
 8022af6:	f7ff fe35 	bl	8022764 <_Balloc>
 8022afa:	2200      	movs	r2, #0
 8022afc:	4680      	mov	r8, r0
 8022afe:	f100 0314 	add.w	r3, r0, #20
 8022b02:	4611      	mov	r1, r2
 8022b04:	4552      	cmp	r2, sl
 8022b06:	db2a      	blt.n	8022b5e <__lshift+0x8a>
 8022b08:	6920      	ldr	r0, [r4, #16]
 8022b0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022b0e:	f104 0114 	add.w	r1, r4, #20
 8022b12:	f016 021f 	ands.w	r2, r6, #31
 8022b16:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8022b1a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8022b1e:	d022      	beq.n	8022b66 <__lshift+0x92>
 8022b20:	f1c2 0c20 	rsb	ip, r2, #32
 8022b24:	2000      	movs	r0, #0
 8022b26:	680e      	ldr	r6, [r1, #0]
 8022b28:	4096      	lsls	r6, r2
 8022b2a:	4330      	orrs	r0, r6
 8022b2c:	f843 0b04 	str.w	r0, [r3], #4
 8022b30:	f851 0b04 	ldr.w	r0, [r1], #4
 8022b34:	458e      	cmp	lr, r1
 8022b36:	fa20 f00c 	lsr.w	r0, r0, ip
 8022b3a:	d8f4      	bhi.n	8022b26 <__lshift+0x52>
 8022b3c:	6018      	str	r0, [r3, #0]
 8022b3e:	b108      	cbz	r0, 8022b44 <__lshift+0x70>
 8022b40:	f109 0502 	add.w	r5, r9, #2
 8022b44:	3d01      	subs	r5, #1
 8022b46:	4638      	mov	r0, r7
 8022b48:	f8c8 5010 	str.w	r5, [r8, #16]
 8022b4c:	4621      	mov	r1, r4
 8022b4e:	f7ff fe3d 	bl	80227cc <_Bfree>
 8022b52:	4640      	mov	r0, r8
 8022b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b58:	3101      	adds	r1, #1
 8022b5a:	005b      	lsls	r3, r3, #1
 8022b5c:	e7c8      	b.n	8022af0 <__lshift+0x1c>
 8022b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8022b62:	3201      	adds	r2, #1
 8022b64:	e7ce      	b.n	8022b04 <__lshift+0x30>
 8022b66:	3b04      	subs	r3, #4
 8022b68:	f851 2b04 	ldr.w	r2, [r1], #4
 8022b6c:	f843 2f04 	str.w	r2, [r3, #4]!
 8022b70:	458e      	cmp	lr, r1
 8022b72:	d8f9      	bhi.n	8022b68 <__lshift+0x94>
 8022b74:	e7e6      	b.n	8022b44 <__lshift+0x70>

08022b76 <__mcmp>:
 8022b76:	6903      	ldr	r3, [r0, #16]
 8022b78:	690a      	ldr	r2, [r1, #16]
 8022b7a:	1a9b      	subs	r3, r3, r2
 8022b7c:	b530      	push	{r4, r5, lr}
 8022b7e:	d10c      	bne.n	8022b9a <__mcmp+0x24>
 8022b80:	0092      	lsls	r2, r2, #2
 8022b82:	3014      	adds	r0, #20
 8022b84:	3114      	adds	r1, #20
 8022b86:	1884      	adds	r4, r0, r2
 8022b88:	4411      	add	r1, r2
 8022b8a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8022b8e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8022b92:	4295      	cmp	r5, r2
 8022b94:	d003      	beq.n	8022b9e <__mcmp+0x28>
 8022b96:	d305      	bcc.n	8022ba4 <__mcmp+0x2e>
 8022b98:	2301      	movs	r3, #1
 8022b9a:	4618      	mov	r0, r3
 8022b9c:	bd30      	pop	{r4, r5, pc}
 8022b9e:	42a0      	cmp	r0, r4
 8022ba0:	d3f3      	bcc.n	8022b8a <__mcmp+0x14>
 8022ba2:	e7fa      	b.n	8022b9a <__mcmp+0x24>
 8022ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8022ba8:	e7f7      	b.n	8022b9a <__mcmp+0x24>

08022baa <__mdiff>:
 8022baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022bae:	460d      	mov	r5, r1
 8022bb0:	4607      	mov	r7, r0
 8022bb2:	4611      	mov	r1, r2
 8022bb4:	4628      	mov	r0, r5
 8022bb6:	4614      	mov	r4, r2
 8022bb8:	f7ff ffdd 	bl	8022b76 <__mcmp>
 8022bbc:	1e06      	subs	r6, r0, #0
 8022bbe:	d108      	bne.n	8022bd2 <__mdiff+0x28>
 8022bc0:	4631      	mov	r1, r6
 8022bc2:	4638      	mov	r0, r7
 8022bc4:	f7ff fdce 	bl	8022764 <_Balloc>
 8022bc8:	2301      	movs	r3, #1
 8022bca:	6103      	str	r3, [r0, #16]
 8022bcc:	6146      	str	r6, [r0, #20]
 8022bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bd2:	bfa4      	itt	ge
 8022bd4:	4623      	movge	r3, r4
 8022bd6:	462c      	movge	r4, r5
 8022bd8:	4638      	mov	r0, r7
 8022bda:	6861      	ldr	r1, [r4, #4]
 8022bdc:	bfa6      	itte	ge
 8022bde:	461d      	movge	r5, r3
 8022be0:	2600      	movge	r6, #0
 8022be2:	2601      	movlt	r6, #1
 8022be4:	f7ff fdbe 	bl	8022764 <_Balloc>
 8022be8:	692b      	ldr	r3, [r5, #16]
 8022bea:	60c6      	str	r6, [r0, #12]
 8022bec:	6926      	ldr	r6, [r4, #16]
 8022bee:	f105 0914 	add.w	r9, r5, #20
 8022bf2:	f104 0214 	add.w	r2, r4, #20
 8022bf6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8022bfa:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8022bfe:	f100 0514 	add.w	r5, r0, #20
 8022c02:	f04f 0c00 	mov.w	ip, #0
 8022c06:	f852 ab04 	ldr.w	sl, [r2], #4
 8022c0a:	f859 4b04 	ldr.w	r4, [r9], #4
 8022c0e:	fa1c f18a 	uxtah	r1, ip, sl
 8022c12:	b2a3      	uxth	r3, r4
 8022c14:	1ac9      	subs	r1, r1, r3
 8022c16:	0c23      	lsrs	r3, r4, #16
 8022c18:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8022c1c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8022c20:	b289      	uxth	r1, r1
 8022c22:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8022c26:	45c8      	cmp	r8, r9
 8022c28:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8022c2c:	4696      	mov	lr, r2
 8022c2e:	f845 3b04 	str.w	r3, [r5], #4
 8022c32:	d8e8      	bhi.n	8022c06 <__mdiff+0x5c>
 8022c34:	45be      	cmp	lr, r7
 8022c36:	d305      	bcc.n	8022c44 <__mdiff+0x9a>
 8022c38:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8022c3c:	b18b      	cbz	r3, 8022c62 <__mdiff+0xb8>
 8022c3e:	6106      	str	r6, [r0, #16]
 8022c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c44:	f85e 1b04 	ldr.w	r1, [lr], #4
 8022c48:	fa1c f381 	uxtah	r3, ip, r1
 8022c4c:	141a      	asrs	r2, r3, #16
 8022c4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8022c52:	b29b      	uxth	r3, r3
 8022c54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022c58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022c5c:	f845 3b04 	str.w	r3, [r5], #4
 8022c60:	e7e8      	b.n	8022c34 <__mdiff+0x8a>
 8022c62:	3e01      	subs	r6, #1
 8022c64:	e7e8      	b.n	8022c38 <__mdiff+0x8e>

08022c66 <__d2b>:
 8022c66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022c6a:	460e      	mov	r6, r1
 8022c6c:	2101      	movs	r1, #1
 8022c6e:	ec59 8b10 	vmov	r8, r9, d0
 8022c72:	4615      	mov	r5, r2
 8022c74:	f7ff fd76 	bl	8022764 <_Balloc>
 8022c78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8022c7c:	4607      	mov	r7, r0
 8022c7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022c82:	bb34      	cbnz	r4, 8022cd2 <__d2b+0x6c>
 8022c84:	9301      	str	r3, [sp, #4]
 8022c86:	f1b8 0f00 	cmp.w	r8, #0
 8022c8a:	d027      	beq.n	8022cdc <__d2b+0x76>
 8022c8c:	a802      	add	r0, sp, #8
 8022c8e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8022c92:	f7ff fe0c 	bl	80228ae <__lo0bits>
 8022c96:	9900      	ldr	r1, [sp, #0]
 8022c98:	b1f0      	cbz	r0, 8022cd8 <__d2b+0x72>
 8022c9a:	9a01      	ldr	r2, [sp, #4]
 8022c9c:	f1c0 0320 	rsb	r3, r0, #32
 8022ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8022ca4:	430b      	orrs	r3, r1
 8022ca6:	40c2      	lsrs	r2, r0
 8022ca8:	617b      	str	r3, [r7, #20]
 8022caa:	9201      	str	r2, [sp, #4]
 8022cac:	9b01      	ldr	r3, [sp, #4]
 8022cae:	61bb      	str	r3, [r7, #24]
 8022cb0:	2b00      	cmp	r3, #0
 8022cb2:	bf14      	ite	ne
 8022cb4:	2102      	movne	r1, #2
 8022cb6:	2101      	moveq	r1, #1
 8022cb8:	6139      	str	r1, [r7, #16]
 8022cba:	b1c4      	cbz	r4, 8022cee <__d2b+0x88>
 8022cbc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8022cc0:	4404      	add	r4, r0
 8022cc2:	6034      	str	r4, [r6, #0]
 8022cc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022cc8:	6028      	str	r0, [r5, #0]
 8022cca:	4638      	mov	r0, r7
 8022ccc:	b003      	add	sp, #12
 8022cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022cd6:	e7d5      	b.n	8022c84 <__d2b+0x1e>
 8022cd8:	6179      	str	r1, [r7, #20]
 8022cda:	e7e7      	b.n	8022cac <__d2b+0x46>
 8022cdc:	a801      	add	r0, sp, #4
 8022cde:	f7ff fde6 	bl	80228ae <__lo0bits>
 8022ce2:	9b01      	ldr	r3, [sp, #4]
 8022ce4:	617b      	str	r3, [r7, #20]
 8022ce6:	2101      	movs	r1, #1
 8022ce8:	6139      	str	r1, [r7, #16]
 8022cea:	3020      	adds	r0, #32
 8022cec:	e7e5      	b.n	8022cba <__d2b+0x54>
 8022cee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8022cf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022cf6:	6030      	str	r0, [r6, #0]
 8022cf8:	6918      	ldr	r0, [r3, #16]
 8022cfa:	f7ff fdb9 	bl	8022870 <__hi0bits>
 8022cfe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8022d02:	e7e1      	b.n	8022cc8 <__d2b+0x62>

08022d04 <_sbrk_r>:
 8022d04:	b538      	push	{r3, r4, r5, lr}
 8022d06:	4c06      	ldr	r4, [pc, #24]	; (8022d20 <_sbrk_r+0x1c>)
 8022d08:	2300      	movs	r3, #0
 8022d0a:	4605      	mov	r5, r0
 8022d0c:	4608      	mov	r0, r1
 8022d0e:	6023      	str	r3, [r4, #0]
 8022d10:	f7fd f9a6 	bl	8020060 <_sbrk>
 8022d14:	1c43      	adds	r3, r0, #1
 8022d16:	d102      	bne.n	8022d1e <_sbrk_r+0x1a>
 8022d18:	6823      	ldr	r3, [r4, #0]
 8022d1a:	b103      	cbz	r3, 8022d1e <_sbrk_r+0x1a>
 8022d1c:	602b      	str	r3, [r5, #0]
 8022d1e:	bd38      	pop	{r3, r4, r5, pc}
 8022d20:	2009659c 	.word	0x2009659c

08022d24 <__ssprint_r>:
 8022d24:	6893      	ldr	r3, [r2, #8]
 8022d26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d2a:	4681      	mov	r9, r0
 8022d2c:	460c      	mov	r4, r1
 8022d2e:	4617      	mov	r7, r2
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	d060      	beq.n	8022df6 <__ssprint_r+0xd2>
 8022d34:	f04f 0b00 	mov.w	fp, #0
 8022d38:	f8d2 a000 	ldr.w	sl, [r2]
 8022d3c:	465e      	mov	r6, fp
 8022d3e:	b356      	cbz	r6, 8022d96 <__ssprint_r+0x72>
 8022d40:	68a3      	ldr	r3, [r4, #8]
 8022d42:	429e      	cmp	r6, r3
 8022d44:	d344      	bcc.n	8022dd0 <__ssprint_r+0xac>
 8022d46:	89a2      	ldrh	r2, [r4, #12]
 8022d48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022d4c:	d03e      	beq.n	8022dcc <__ssprint_r+0xa8>
 8022d4e:	6825      	ldr	r5, [r4, #0]
 8022d50:	6921      	ldr	r1, [r4, #16]
 8022d52:	eba5 0801 	sub.w	r8, r5, r1
 8022d56:	6965      	ldr	r5, [r4, #20]
 8022d58:	2302      	movs	r3, #2
 8022d5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022d5e:	fb95 f5f3 	sdiv	r5, r5, r3
 8022d62:	f108 0301 	add.w	r3, r8, #1
 8022d66:	4433      	add	r3, r6
 8022d68:	429d      	cmp	r5, r3
 8022d6a:	bf38      	it	cc
 8022d6c:	461d      	movcc	r5, r3
 8022d6e:	0553      	lsls	r3, r2, #21
 8022d70:	d546      	bpl.n	8022e00 <__ssprint_r+0xdc>
 8022d72:	4629      	mov	r1, r5
 8022d74:	4648      	mov	r0, r9
 8022d76:	f7ff fadb 	bl	8022330 <_malloc_r>
 8022d7a:	b998      	cbnz	r0, 8022da4 <__ssprint_r+0x80>
 8022d7c:	230c      	movs	r3, #12
 8022d7e:	f8c9 3000 	str.w	r3, [r9]
 8022d82:	89a3      	ldrh	r3, [r4, #12]
 8022d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022d88:	81a3      	strh	r3, [r4, #12]
 8022d8a:	2300      	movs	r3, #0
 8022d8c:	60bb      	str	r3, [r7, #8]
 8022d8e:	607b      	str	r3, [r7, #4]
 8022d90:	f04f 30ff 	mov.w	r0, #4294967295
 8022d94:	e031      	b.n	8022dfa <__ssprint_r+0xd6>
 8022d96:	f8da b000 	ldr.w	fp, [sl]
 8022d9a:	f8da 6004 	ldr.w	r6, [sl, #4]
 8022d9e:	f10a 0a08 	add.w	sl, sl, #8
 8022da2:	e7cc      	b.n	8022d3e <__ssprint_r+0x1a>
 8022da4:	4642      	mov	r2, r8
 8022da6:	6921      	ldr	r1, [r4, #16]
 8022da8:	9001      	str	r0, [sp, #4]
 8022daa:	f7fd fc1d 	bl	80205e8 <memcpy>
 8022dae:	89a2      	ldrh	r2, [r4, #12]
 8022db0:	9b01      	ldr	r3, [sp, #4]
 8022db2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8022db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022dba:	81a2      	strh	r2, [r4, #12]
 8022dbc:	6123      	str	r3, [r4, #16]
 8022dbe:	6165      	str	r5, [r4, #20]
 8022dc0:	4443      	add	r3, r8
 8022dc2:	eba5 0508 	sub.w	r5, r5, r8
 8022dc6:	6023      	str	r3, [r4, #0]
 8022dc8:	60a5      	str	r5, [r4, #8]
 8022dca:	4633      	mov	r3, r6
 8022dcc:	429e      	cmp	r6, r3
 8022dce:	d200      	bcs.n	8022dd2 <__ssprint_r+0xae>
 8022dd0:	4633      	mov	r3, r6
 8022dd2:	461a      	mov	r2, r3
 8022dd4:	4659      	mov	r1, fp
 8022dd6:	6820      	ldr	r0, [r4, #0]
 8022dd8:	9301      	str	r3, [sp, #4]
 8022dda:	f000 f971 	bl	80230c0 <memmove>
 8022dde:	68a2      	ldr	r2, [r4, #8]
 8022de0:	9b01      	ldr	r3, [sp, #4]
 8022de2:	1ad2      	subs	r2, r2, r3
 8022de4:	60a2      	str	r2, [r4, #8]
 8022de6:	6822      	ldr	r2, [r4, #0]
 8022de8:	4413      	add	r3, r2
 8022dea:	6023      	str	r3, [r4, #0]
 8022dec:	68bb      	ldr	r3, [r7, #8]
 8022dee:	1b9e      	subs	r6, r3, r6
 8022df0:	60be      	str	r6, [r7, #8]
 8022df2:	2e00      	cmp	r6, #0
 8022df4:	d1cf      	bne.n	8022d96 <__ssprint_r+0x72>
 8022df6:	2000      	movs	r0, #0
 8022df8:	6078      	str	r0, [r7, #4]
 8022dfa:	b003      	add	sp, #12
 8022dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e00:	462a      	mov	r2, r5
 8022e02:	4648      	mov	r0, r9
 8022e04:	f000 f976 	bl	80230f4 <_realloc_r>
 8022e08:	4603      	mov	r3, r0
 8022e0a:	2800      	cmp	r0, #0
 8022e0c:	d1d6      	bne.n	8022dbc <__ssprint_r+0x98>
 8022e0e:	6921      	ldr	r1, [r4, #16]
 8022e10:	4648      	mov	r0, r9
 8022e12:	f000 f885 	bl	8022f20 <_free_r>
 8022e16:	e7b1      	b.n	8022d7c <__ssprint_r+0x58>

08022e18 <_calloc_r>:
 8022e18:	b510      	push	{r4, lr}
 8022e1a:	4351      	muls	r1, r2
 8022e1c:	f7ff fa88 	bl	8022330 <_malloc_r>
 8022e20:	4604      	mov	r4, r0
 8022e22:	b198      	cbz	r0, 8022e4c <_calloc_r+0x34>
 8022e24:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022e28:	f022 0203 	bic.w	r2, r2, #3
 8022e2c:	3a04      	subs	r2, #4
 8022e2e:	2a24      	cmp	r2, #36	; 0x24
 8022e30:	d81b      	bhi.n	8022e6a <_calloc_r+0x52>
 8022e32:	2a13      	cmp	r2, #19
 8022e34:	d917      	bls.n	8022e66 <_calloc_r+0x4e>
 8022e36:	2100      	movs	r1, #0
 8022e38:	2a1b      	cmp	r2, #27
 8022e3a:	6001      	str	r1, [r0, #0]
 8022e3c:	6041      	str	r1, [r0, #4]
 8022e3e:	d807      	bhi.n	8022e50 <_calloc_r+0x38>
 8022e40:	f100 0308 	add.w	r3, r0, #8
 8022e44:	2200      	movs	r2, #0
 8022e46:	601a      	str	r2, [r3, #0]
 8022e48:	605a      	str	r2, [r3, #4]
 8022e4a:	609a      	str	r2, [r3, #8]
 8022e4c:	4620      	mov	r0, r4
 8022e4e:	bd10      	pop	{r4, pc}
 8022e50:	2a24      	cmp	r2, #36	; 0x24
 8022e52:	6081      	str	r1, [r0, #8]
 8022e54:	60c1      	str	r1, [r0, #12]
 8022e56:	bf11      	iteee	ne
 8022e58:	f100 0310 	addne.w	r3, r0, #16
 8022e5c:	6101      	streq	r1, [r0, #16]
 8022e5e:	f100 0318 	addeq.w	r3, r0, #24
 8022e62:	6141      	streq	r1, [r0, #20]
 8022e64:	e7ee      	b.n	8022e44 <_calloc_r+0x2c>
 8022e66:	4603      	mov	r3, r0
 8022e68:	e7ec      	b.n	8022e44 <_calloc_r+0x2c>
 8022e6a:	2100      	movs	r1, #0
 8022e6c:	f7fd fbc7 	bl	80205fe <memset>
 8022e70:	e7ec      	b.n	8022e4c <_calloc_r+0x34>
	...

08022e74 <_malloc_trim_r>:
 8022e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022e78:	4f25      	ldr	r7, [pc, #148]	; (8022f10 <_malloc_trim_r+0x9c>)
 8022e7a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8022f1c <_malloc_trim_r+0xa8>
 8022e7e:	4689      	mov	r9, r1
 8022e80:	4606      	mov	r6, r0
 8022e82:	f7ff fc63 	bl	802274c <__malloc_lock>
 8022e86:	68bb      	ldr	r3, [r7, #8]
 8022e88:	685d      	ldr	r5, [r3, #4]
 8022e8a:	f1a8 0411 	sub.w	r4, r8, #17
 8022e8e:	f025 0503 	bic.w	r5, r5, #3
 8022e92:	eba4 0409 	sub.w	r4, r4, r9
 8022e96:	442c      	add	r4, r5
 8022e98:	fbb4 f4f8 	udiv	r4, r4, r8
 8022e9c:	3c01      	subs	r4, #1
 8022e9e:	fb08 f404 	mul.w	r4, r8, r4
 8022ea2:	4544      	cmp	r4, r8
 8022ea4:	da05      	bge.n	8022eb2 <_malloc_trim_r+0x3e>
 8022ea6:	4630      	mov	r0, r6
 8022ea8:	f7ff fc56 	bl	8022758 <__malloc_unlock>
 8022eac:	2000      	movs	r0, #0
 8022eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022eb2:	2100      	movs	r1, #0
 8022eb4:	4630      	mov	r0, r6
 8022eb6:	f7ff ff25 	bl	8022d04 <_sbrk_r>
 8022eba:	68bb      	ldr	r3, [r7, #8]
 8022ebc:	442b      	add	r3, r5
 8022ebe:	4298      	cmp	r0, r3
 8022ec0:	d1f1      	bne.n	8022ea6 <_malloc_trim_r+0x32>
 8022ec2:	4261      	negs	r1, r4
 8022ec4:	4630      	mov	r0, r6
 8022ec6:	f7ff ff1d 	bl	8022d04 <_sbrk_r>
 8022eca:	3001      	adds	r0, #1
 8022ecc:	d110      	bne.n	8022ef0 <_malloc_trim_r+0x7c>
 8022ece:	2100      	movs	r1, #0
 8022ed0:	4630      	mov	r0, r6
 8022ed2:	f7ff ff17 	bl	8022d04 <_sbrk_r>
 8022ed6:	68ba      	ldr	r2, [r7, #8]
 8022ed8:	1a83      	subs	r3, r0, r2
 8022eda:	2b0f      	cmp	r3, #15
 8022edc:	dde3      	ble.n	8022ea6 <_malloc_trim_r+0x32>
 8022ede:	490d      	ldr	r1, [pc, #52]	; (8022f14 <_malloc_trim_r+0xa0>)
 8022ee0:	6809      	ldr	r1, [r1, #0]
 8022ee2:	1a40      	subs	r0, r0, r1
 8022ee4:	490c      	ldr	r1, [pc, #48]	; (8022f18 <_malloc_trim_r+0xa4>)
 8022ee6:	f043 0301 	orr.w	r3, r3, #1
 8022eea:	6008      	str	r0, [r1, #0]
 8022eec:	6053      	str	r3, [r2, #4]
 8022eee:	e7da      	b.n	8022ea6 <_malloc_trim_r+0x32>
 8022ef0:	68bb      	ldr	r3, [r7, #8]
 8022ef2:	4a09      	ldr	r2, [pc, #36]	; (8022f18 <_malloc_trim_r+0xa4>)
 8022ef4:	1b2d      	subs	r5, r5, r4
 8022ef6:	f045 0501 	orr.w	r5, r5, #1
 8022efa:	605d      	str	r5, [r3, #4]
 8022efc:	6813      	ldr	r3, [r2, #0]
 8022efe:	4630      	mov	r0, r6
 8022f00:	1b1c      	subs	r4, r3, r4
 8022f02:	6014      	str	r4, [r2, #0]
 8022f04:	f7ff fc28 	bl	8022758 <__malloc_unlock>
 8022f08:	2001      	movs	r0, #1
 8022f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022f0e:	bf00      	nop
 8022f10:	20001044 	.word	0x20001044
 8022f14:	2000144c 	.word	0x2000144c
 8022f18:	20090640 	.word	0x20090640
 8022f1c:	00000080 	.word	0x00000080

08022f20 <_free_r>:
 8022f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f24:	4604      	mov	r4, r0
 8022f26:	4688      	mov	r8, r1
 8022f28:	2900      	cmp	r1, #0
 8022f2a:	f000 80ab 	beq.w	8023084 <_free_r+0x164>
 8022f2e:	f7ff fc0d 	bl	802274c <__malloc_lock>
 8022f32:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8022f36:	4d54      	ldr	r5, [pc, #336]	; (8023088 <_free_r+0x168>)
 8022f38:	f022 0001 	bic.w	r0, r2, #1
 8022f3c:	f1a8 0308 	sub.w	r3, r8, #8
 8022f40:	181f      	adds	r7, r3, r0
 8022f42:	68a9      	ldr	r1, [r5, #8]
 8022f44:	687e      	ldr	r6, [r7, #4]
 8022f46:	428f      	cmp	r7, r1
 8022f48:	f026 0603 	bic.w	r6, r6, #3
 8022f4c:	f002 0201 	and.w	r2, r2, #1
 8022f50:	d11b      	bne.n	8022f8a <_free_r+0x6a>
 8022f52:	4430      	add	r0, r6
 8022f54:	b93a      	cbnz	r2, 8022f66 <_free_r+0x46>
 8022f56:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8022f5a:	1a9b      	subs	r3, r3, r2
 8022f5c:	4410      	add	r0, r2
 8022f5e:	6899      	ldr	r1, [r3, #8]
 8022f60:	68da      	ldr	r2, [r3, #12]
 8022f62:	60ca      	str	r2, [r1, #12]
 8022f64:	6091      	str	r1, [r2, #8]
 8022f66:	f040 0201 	orr.w	r2, r0, #1
 8022f6a:	605a      	str	r2, [r3, #4]
 8022f6c:	60ab      	str	r3, [r5, #8]
 8022f6e:	4b47      	ldr	r3, [pc, #284]	; (802308c <_free_r+0x16c>)
 8022f70:	681b      	ldr	r3, [r3, #0]
 8022f72:	4298      	cmp	r0, r3
 8022f74:	d304      	bcc.n	8022f80 <_free_r+0x60>
 8022f76:	4b46      	ldr	r3, [pc, #280]	; (8023090 <_free_r+0x170>)
 8022f78:	4620      	mov	r0, r4
 8022f7a:	6819      	ldr	r1, [r3, #0]
 8022f7c:	f7ff ff7a 	bl	8022e74 <_malloc_trim_r>
 8022f80:	4620      	mov	r0, r4
 8022f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022f86:	f7ff bbe7 	b.w	8022758 <__malloc_unlock>
 8022f8a:	607e      	str	r6, [r7, #4]
 8022f8c:	2a00      	cmp	r2, #0
 8022f8e:	d139      	bne.n	8023004 <_free_r+0xe4>
 8022f90:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8022f94:	1a5b      	subs	r3, r3, r1
 8022f96:	4408      	add	r0, r1
 8022f98:	6899      	ldr	r1, [r3, #8]
 8022f9a:	f105 0e08 	add.w	lr, r5, #8
 8022f9e:	4571      	cmp	r1, lr
 8022fa0:	d032      	beq.n	8023008 <_free_r+0xe8>
 8022fa2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8022fa6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8022faa:	f8ce 1008 	str.w	r1, [lr, #8]
 8022fae:	19b9      	adds	r1, r7, r6
 8022fb0:	6849      	ldr	r1, [r1, #4]
 8022fb2:	07c9      	lsls	r1, r1, #31
 8022fb4:	d40a      	bmi.n	8022fcc <_free_r+0xac>
 8022fb6:	4430      	add	r0, r6
 8022fb8:	68b9      	ldr	r1, [r7, #8]
 8022fba:	bb3a      	cbnz	r2, 802300c <_free_r+0xec>
 8022fbc:	4e35      	ldr	r6, [pc, #212]	; (8023094 <_free_r+0x174>)
 8022fbe:	42b1      	cmp	r1, r6
 8022fc0:	d124      	bne.n	802300c <_free_r+0xec>
 8022fc2:	616b      	str	r3, [r5, #20]
 8022fc4:	612b      	str	r3, [r5, #16]
 8022fc6:	2201      	movs	r2, #1
 8022fc8:	60d9      	str	r1, [r3, #12]
 8022fca:	6099      	str	r1, [r3, #8]
 8022fcc:	f040 0101 	orr.w	r1, r0, #1
 8022fd0:	6059      	str	r1, [r3, #4]
 8022fd2:	5018      	str	r0, [r3, r0]
 8022fd4:	2a00      	cmp	r2, #0
 8022fd6:	d1d3      	bne.n	8022f80 <_free_r+0x60>
 8022fd8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8022fdc:	d21a      	bcs.n	8023014 <_free_r+0xf4>
 8022fde:	08c0      	lsrs	r0, r0, #3
 8022fe0:	1081      	asrs	r1, r0, #2
 8022fe2:	2201      	movs	r2, #1
 8022fe4:	408a      	lsls	r2, r1
 8022fe6:	6869      	ldr	r1, [r5, #4]
 8022fe8:	3001      	adds	r0, #1
 8022fea:	430a      	orrs	r2, r1
 8022fec:	606a      	str	r2, [r5, #4]
 8022fee:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8022ff2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8022ff6:	6099      	str	r1, [r3, #8]
 8022ff8:	3a08      	subs	r2, #8
 8022ffa:	60da      	str	r2, [r3, #12]
 8022ffc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8023000:	60cb      	str	r3, [r1, #12]
 8023002:	e7bd      	b.n	8022f80 <_free_r+0x60>
 8023004:	2200      	movs	r2, #0
 8023006:	e7d2      	b.n	8022fae <_free_r+0x8e>
 8023008:	2201      	movs	r2, #1
 802300a:	e7d0      	b.n	8022fae <_free_r+0x8e>
 802300c:	68fe      	ldr	r6, [r7, #12]
 802300e:	60ce      	str	r6, [r1, #12]
 8023010:	60b1      	str	r1, [r6, #8]
 8023012:	e7db      	b.n	8022fcc <_free_r+0xac>
 8023014:	0a42      	lsrs	r2, r0, #9
 8023016:	2a04      	cmp	r2, #4
 8023018:	d813      	bhi.n	8023042 <_free_r+0x122>
 802301a:	0982      	lsrs	r2, r0, #6
 802301c:	3238      	adds	r2, #56	; 0x38
 802301e:	1c51      	adds	r1, r2, #1
 8023020:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8023024:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8023028:	428e      	cmp	r6, r1
 802302a:	d124      	bne.n	8023076 <_free_r+0x156>
 802302c:	2001      	movs	r0, #1
 802302e:	1092      	asrs	r2, r2, #2
 8023030:	fa00 f202 	lsl.w	r2, r0, r2
 8023034:	6868      	ldr	r0, [r5, #4]
 8023036:	4302      	orrs	r2, r0
 8023038:	606a      	str	r2, [r5, #4]
 802303a:	60de      	str	r6, [r3, #12]
 802303c:	6099      	str	r1, [r3, #8]
 802303e:	60b3      	str	r3, [r6, #8]
 8023040:	e7de      	b.n	8023000 <_free_r+0xe0>
 8023042:	2a14      	cmp	r2, #20
 8023044:	d801      	bhi.n	802304a <_free_r+0x12a>
 8023046:	325b      	adds	r2, #91	; 0x5b
 8023048:	e7e9      	b.n	802301e <_free_r+0xfe>
 802304a:	2a54      	cmp	r2, #84	; 0x54
 802304c:	d802      	bhi.n	8023054 <_free_r+0x134>
 802304e:	0b02      	lsrs	r2, r0, #12
 8023050:	326e      	adds	r2, #110	; 0x6e
 8023052:	e7e4      	b.n	802301e <_free_r+0xfe>
 8023054:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8023058:	d802      	bhi.n	8023060 <_free_r+0x140>
 802305a:	0bc2      	lsrs	r2, r0, #15
 802305c:	3277      	adds	r2, #119	; 0x77
 802305e:	e7de      	b.n	802301e <_free_r+0xfe>
 8023060:	f240 5154 	movw	r1, #1364	; 0x554
 8023064:	428a      	cmp	r2, r1
 8023066:	bf9a      	itte	ls
 8023068:	0c82      	lsrls	r2, r0, #18
 802306a:	327c      	addls	r2, #124	; 0x7c
 802306c:	227e      	movhi	r2, #126	; 0x7e
 802306e:	e7d6      	b.n	802301e <_free_r+0xfe>
 8023070:	6889      	ldr	r1, [r1, #8]
 8023072:	428e      	cmp	r6, r1
 8023074:	d004      	beq.n	8023080 <_free_r+0x160>
 8023076:	684a      	ldr	r2, [r1, #4]
 8023078:	f022 0203 	bic.w	r2, r2, #3
 802307c:	4290      	cmp	r0, r2
 802307e:	d3f7      	bcc.n	8023070 <_free_r+0x150>
 8023080:	68ce      	ldr	r6, [r1, #12]
 8023082:	e7da      	b.n	802303a <_free_r+0x11a>
 8023084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023088:	20001044 	.word	0x20001044
 802308c:	20001450 	.word	0x20001450
 8023090:	20090670 	.word	0x20090670
 8023094:	2000104c 	.word	0x2000104c

08023098 <__retarget_lock_acquire_recursive>:
 8023098:	4770      	bx	lr

0802309a <__retarget_lock_release_recursive>:
 802309a:	4770      	bx	lr

0802309c <__ascii_mbtowc>:
 802309c:	b082      	sub	sp, #8
 802309e:	b901      	cbnz	r1, 80230a2 <__ascii_mbtowc+0x6>
 80230a0:	a901      	add	r1, sp, #4
 80230a2:	b142      	cbz	r2, 80230b6 <__ascii_mbtowc+0x1a>
 80230a4:	b14b      	cbz	r3, 80230ba <__ascii_mbtowc+0x1e>
 80230a6:	7813      	ldrb	r3, [r2, #0]
 80230a8:	600b      	str	r3, [r1, #0]
 80230aa:	7812      	ldrb	r2, [r2, #0]
 80230ac:	1c10      	adds	r0, r2, #0
 80230ae:	bf18      	it	ne
 80230b0:	2001      	movne	r0, #1
 80230b2:	b002      	add	sp, #8
 80230b4:	4770      	bx	lr
 80230b6:	4610      	mov	r0, r2
 80230b8:	e7fb      	b.n	80230b2 <__ascii_mbtowc+0x16>
 80230ba:	f06f 0001 	mvn.w	r0, #1
 80230be:	e7f8      	b.n	80230b2 <__ascii_mbtowc+0x16>

080230c0 <memmove>:
 80230c0:	4288      	cmp	r0, r1
 80230c2:	b510      	push	{r4, lr}
 80230c4:	eb01 0302 	add.w	r3, r1, r2
 80230c8:	d803      	bhi.n	80230d2 <memmove+0x12>
 80230ca:	1e42      	subs	r2, r0, #1
 80230cc:	4299      	cmp	r1, r3
 80230ce:	d10c      	bne.n	80230ea <memmove+0x2a>
 80230d0:	bd10      	pop	{r4, pc}
 80230d2:	4298      	cmp	r0, r3
 80230d4:	d2f9      	bcs.n	80230ca <memmove+0xa>
 80230d6:	1881      	adds	r1, r0, r2
 80230d8:	1ad2      	subs	r2, r2, r3
 80230da:	42d3      	cmn	r3, r2
 80230dc:	d100      	bne.n	80230e0 <memmove+0x20>
 80230de:	bd10      	pop	{r4, pc}
 80230e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80230e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80230e8:	e7f7      	b.n	80230da <memmove+0x1a>
 80230ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80230ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80230f2:	e7eb      	b.n	80230cc <memmove+0xc>

080230f4 <_realloc_r>:
 80230f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230f8:	4682      	mov	sl, r0
 80230fa:	460c      	mov	r4, r1
 80230fc:	b929      	cbnz	r1, 802310a <_realloc_r+0x16>
 80230fe:	4611      	mov	r1, r2
 8023100:	b003      	add	sp, #12
 8023102:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023106:	f7ff b913 	b.w	8022330 <_malloc_r>
 802310a:	9201      	str	r2, [sp, #4]
 802310c:	f7ff fb1e 	bl	802274c <__malloc_lock>
 8023110:	9a01      	ldr	r2, [sp, #4]
 8023112:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8023116:	f102 080b 	add.w	r8, r2, #11
 802311a:	f1b8 0f16 	cmp.w	r8, #22
 802311e:	f1a4 0908 	sub.w	r9, r4, #8
 8023122:	f025 0603 	bic.w	r6, r5, #3
 8023126:	d90a      	bls.n	802313e <_realloc_r+0x4a>
 8023128:	f038 0807 	bics.w	r8, r8, #7
 802312c:	d509      	bpl.n	8023142 <_realloc_r+0x4e>
 802312e:	230c      	movs	r3, #12
 8023130:	f8ca 3000 	str.w	r3, [sl]
 8023134:	2700      	movs	r7, #0
 8023136:	4638      	mov	r0, r7
 8023138:	b003      	add	sp, #12
 802313a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802313e:	f04f 0810 	mov.w	r8, #16
 8023142:	4590      	cmp	r8, r2
 8023144:	d3f3      	bcc.n	802312e <_realloc_r+0x3a>
 8023146:	45b0      	cmp	r8, r6
 8023148:	f340 8145 	ble.w	80233d6 <_realloc_r+0x2e2>
 802314c:	4ba8      	ldr	r3, [pc, #672]	; (80233f0 <_realloc_r+0x2fc>)
 802314e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8023152:	eb09 0106 	add.w	r1, r9, r6
 8023156:	4571      	cmp	r1, lr
 8023158:	469b      	mov	fp, r3
 802315a:	684b      	ldr	r3, [r1, #4]
 802315c:	d005      	beq.n	802316a <_realloc_r+0x76>
 802315e:	f023 0001 	bic.w	r0, r3, #1
 8023162:	4408      	add	r0, r1
 8023164:	6840      	ldr	r0, [r0, #4]
 8023166:	07c7      	lsls	r7, r0, #31
 8023168:	d447      	bmi.n	80231fa <_realloc_r+0x106>
 802316a:	f023 0303 	bic.w	r3, r3, #3
 802316e:	4571      	cmp	r1, lr
 8023170:	eb06 0703 	add.w	r7, r6, r3
 8023174:	d119      	bne.n	80231aa <_realloc_r+0xb6>
 8023176:	f108 0010 	add.w	r0, r8, #16
 802317a:	4287      	cmp	r7, r0
 802317c:	db3f      	blt.n	80231fe <_realloc_r+0x10a>
 802317e:	eb09 0308 	add.w	r3, r9, r8
 8023182:	eba7 0708 	sub.w	r7, r7, r8
 8023186:	f047 0701 	orr.w	r7, r7, #1
 802318a:	f8cb 3008 	str.w	r3, [fp, #8]
 802318e:	605f      	str	r7, [r3, #4]
 8023190:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8023194:	f003 0301 	and.w	r3, r3, #1
 8023198:	ea43 0308 	orr.w	r3, r3, r8
 802319c:	f844 3c04 	str.w	r3, [r4, #-4]
 80231a0:	4650      	mov	r0, sl
 80231a2:	f7ff fad9 	bl	8022758 <__malloc_unlock>
 80231a6:	4627      	mov	r7, r4
 80231a8:	e7c5      	b.n	8023136 <_realloc_r+0x42>
 80231aa:	45b8      	cmp	r8, r7
 80231ac:	dc27      	bgt.n	80231fe <_realloc_r+0x10a>
 80231ae:	68cb      	ldr	r3, [r1, #12]
 80231b0:	688a      	ldr	r2, [r1, #8]
 80231b2:	60d3      	str	r3, [r2, #12]
 80231b4:	609a      	str	r2, [r3, #8]
 80231b6:	eba7 0008 	sub.w	r0, r7, r8
 80231ba:	280f      	cmp	r0, #15
 80231bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80231c0:	eb09 0207 	add.w	r2, r9, r7
 80231c4:	f240 8109 	bls.w	80233da <_realloc_r+0x2e6>
 80231c8:	eb09 0108 	add.w	r1, r9, r8
 80231cc:	f003 0301 	and.w	r3, r3, #1
 80231d0:	ea43 0308 	orr.w	r3, r3, r8
 80231d4:	f040 0001 	orr.w	r0, r0, #1
 80231d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80231dc:	6048      	str	r0, [r1, #4]
 80231de:	6853      	ldr	r3, [r2, #4]
 80231e0:	f043 0301 	orr.w	r3, r3, #1
 80231e4:	6053      	str	r3, [r2, #4]
 80231e6:	3108      	adds	r1, #8
 80231e8:	4650      	mov	r0, sl
 80231ea:	f7ff fe99 	bl	8022f20 <_free_r>
 80231ee:	4650      	mov	r0, sl
 80231f0:	f7ff fab2 	bl	8022758 <__malloc_unlock>
 80231f4:	f109 0708 	add.w	r7, r9, #8
 80231f8:	e79d      	b.n	8023136 <_realloc_r+0x42>
 80231fa:	2300      	movs	r3, #0
 80231fc:	4619      	mov	r1, r3
 80231fe:	07e8      	lsls	r0, r5, #31
 8023200:	f100 8084 	bmi.w	802330c <_realloc_r+0x218>
 8023204:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8023208:	eba9 0505 	sub.w	r5, r9, r5
 802320c:	6868      	ldr	r0, [r5, #4]
 802320e:	f020 0003 	bic.w	r0, r0, #3
 8023212:	4430      	add	r0, r6
 8023214:	2900      	cmp	r1, #0
 8023216:	d076      	beq.n	8023306 <_realloc_r+0x212>
 8023218:	4571      	cmp	r1, lr
 802321a:	d150      	bne.n	80232be <_realloc_r+0x1ca>
 802321c:	4403      	add	r3, r0
 802321e:	f108 0110 	add.w	r1, r8, #16
 8023222:	428b      	cmp	r3, r1
 8023224:	db6f      	blt.n	8023306 <_realloc_r+0x212>
 8023226:	462f      	mov	r7, r5
 8023228:	68ea      	ldr	r2, [r5, #12]
 802322a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 802322e:	60ca      	str	r2, [r1, #12]
 8023230:	6091      	str	r1, [r2, #8]
 8023232:	1f32      	subs	r2, r6, #4
 8023234:	2a24      	cmp	r2, #36	; 0x24
 8023236:	d83b      	bhi.n	80232b0 <_realloc_r+0x1bc>
 8023238:	2a13      	cmp	r2, #19
 802323a:	d936      	bls.n	80232aa <_realloc_r+0x1b6>
 802323c:	6821      	ldr	r1, [r4, #0]
 802323e:	60a9      	str	r1, [r5, #8]
 8023240:	6861      	ldr	r1, [r4, #4]
 8023242:	60e9      	str	r1, [r5, #12]
 8023244:	2a1b      	cmp	r2, #27
 8023246:	d81c      	bhi.n	8023282 <_realloc_r+0x18e>
 8023248:	f105 0210 	add.w	r2, r5, #16
 802324c:	f104 0108 	add.w	r1, r4, #8
 8023250:	6808      	ldr	r0, [r1, #0]
 8023252:	6010      	str	r0, [r2, #0]
 8023254:	6848      	ldr	r0, [r1, #4]
 8023256:	6050      	str	r0, [r2, #4]
 8023258:	6889      	ldr	r1, [r1, #8]
 802325a:	6091      	str	r1, [r2, #8]
 802325c:	eb05 0208 	add.w	r2, r5, r8
 8023260:	eba3 0308 	sub.w	r3, r3, r8
 8023264:	f043 0301 	orr.w	r3, r3, #1
 8023268:	f8cb 2008 	str.w	r2, [fp, #8]
 802326c:	6053      	str	r3, [r2, #4]
 802326e:	686b      	ldr	r3, [r5, #4]
 8023270:	f003 0301 	and.w	r3, r3, #1
 8023274:	ea43 0308 	orr.w	r3, r3, r8
 8023278:	606b      	str	r3, [r5, #4]
 802327a:	4650      	mov	r0, sl
 802327c:	f7ff fa6c 	bl	8022758 <__malloc_unlock>
 8023280:	e759      	b.n	8023136 <_realloc_r+0x42>
 8023282:	68a1      	ldr	r1, [r4, #8]
 8023284:	6129      	str	r1, [r5, #16]
 8023286:	68e1      	ldr	r1, [r4, #12]
 8023288:	6169      	str	r1, [r5, #20]
 802328a:	2a24      	cmp	r2, #36	; 0x24
 802328c:	bf01      	itttt	eq
 802328e:	6922      	ldreq	r2, [r4, #16]
 8023290:	61aa      	streq	r2, [r5, #24]
 8023292:	6960      	ldreq	r0, [r4, #20]
 8023294:	61e8      	streq	r0, [r5, #28]
 8023296:	bf19      	ittee	ne
 8023298:	f105 0218 	addne.w	r2, r5, #24
 802329c:	f104 0110 	addne.w	r1, r4, #16
 80232a0:	f105 0220 	addeq.w	r2, r5, #32
 80232a4:	f104 0118 	addeq.w	r1, r4, #24
 80232a8:	e7d2      	b.n	8023250 <_realloc_r+0x15c>
 80232aa:	463a      	mov	r2, r7
 80232ac:	4621      	mov	r1, r4
 80232ae:	e7cf      	b.n	8023250 <_realloc_r+0x15c>
 80232b0:	4621      	mov	r1, r4
 80232b2:	4638      	mov	r0, r7
 80232b4:	9301      	str	r3, [sp, #4]
 80232b6:	f7ff ff03 	bl	80230c0 <memmove>
 80232ba:	9b01      	ldr	r3, [sp, #4]
 80232bc:	e7ce      	b.n	802325c <_realloc_r+0x168>
 80232be:	18c7      	adds	r7, r0, r3
 80232c0:	45b8      	cmp	r8, r7
 80232c2:	dc20      	bgt.n	8023306 <_realloc_r+0x212>
 80232c4:	68cb      	ldr	r3, [r1, #12]
 80232c6:	688a      	ldr	r2, [r1, #8]
 80232c8:	60d3      	str	r3, [r2, #12]
 80232ca:	609a      	str	r2, [r3, #8]
 80232cc:	4628      	mov	r0, r5
 80232ce:	68eb      	ldr	r3, [r5, #12]
 80232d0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80232d4:	60d3      	str	r3, [r2, #12]
 80232d6:	609a      	str	r2, [r3, #8]
 80232d8:	1f32      	subs	r2, r6, #4
 80232da:	2a24      	cmp	r2, #36	; 0x24
 80232dc:	d842      	bhi.n	8023364 <_realloc_r+0x270>
 80232de:	2a13      	cmp	r2, #19
 80232e0:	d93e      	bls.n	8023360 <_realloc_r+0x26c>
 80232e2:	6823      	ldr	r3, [r4, #0]
 80232e4:	60ab      	str	r3, [r5, #8]
 80232e6:	6863      	ldr	r3, [r4, #4]
 80232e8:	60eb      	str	r3, [r5, #12]
 80232ea:	2a1b      	cmp	r2, #27
 80232ec:	d824      	bhi.n	8023338 <_realloc_r+0x244>
 80232ee:	f105 0010 	add.w	r0, r5, #16
 80232f2:	f104 0308 	add.w	r3, r4, #8
 80232f6:	681a      	ldr	r2, [r3, #0]
 80232f8:	6002      	str	r2, [r0, #0]
 80232fa:	685a      	ldr	r2, [r3, #4]
 80232fc:	6042      	str	r2, [r0, #4]
 80232fe:	689b      	ldr	r3, [r3, #8]
 8023300:	6083      	str	r3, [r0, #8]
 8023302:	46a9      	mov	r9, r5
 8023304:	e757      	b.n	80231b6 <_realloc_r+0xc2>
 8023306:	4580      	cmp	r8, r0
 8023308:	4607      	mov	r7, r0
 802330a:	dddf      	ble.n	80232cc <_realloc_r+0x1d8>
 802330c:	4611      	mov	r1, r2
 802330e:	4650      	mov	r0, sl
 8023310:	f7ff f80e 	bl	8022330 <_malloc_r>
 8023314:	4607      	mov	r7, r0
 8023316:	2800      	cmp	r0, #0
 8023318:	d0af      	beq.n	802327a <_realloc_r+0x186>
 802331a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802331e:	f023 0301 	bic.w	r3, r3, #1
 8023322:	f1a0 0208 	sub.w	r2, r0, #8
 8023326:	444b      	add	r3, r9
 8023328:	429a      	cmp	r2, r3
 802332a:	d11f      	bne.n	802336c <_realloc_r+0x278>
 802332c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8023330:	f027 0703 	bic.w	r7, r7, #3
 8023334:	4437      	add	r7, r6
 8023336:	e73e      	b.n	80231b6 <_realloc_r+0xc2>
 8023338:	68a3      	ldr	r3, [r4, #8]
 802333a:	612b      	str	r3, [r5, #16]
 802333c:	68e3      	ldr	r3, [r4, #12]
 802333e:	616b      	str	r3, [r5, #20]
 8023340:	2a24      	cmp	r2, #36	; 0x24
 8023342:	bf01      	itttt	eq
 8023344:	6923      	ldreq	r3, [r4, #16]
 8023346:	61ab      	streq	r3, [r5, #24]
 8023348:	6962      	ldreq	r2, [r4, #20]
 802334a:	61ea      	streq	r2, [r5, #28]
 802334c:	bf19      	ittee	ne
 802334e:	f105 0018 	addne.w	r0, r5, #24
 8023352:	f104 0310 	addne.w	r3, r4, #16
 8023356:	f105 0020 	addeq.w	r0, r5, #32
 802335a:	f104 0318 	addeq.w	r3, r4, #24
 802335e:	e7ca      	b.n	80232f6 <_realloc_r+0x202>
 8023360:	4623      	mov	r3, r4
 8023362:	e7c8      	b.n	80232f6 <_realloc_r+0x202>
 8023364:	4621      	mov	r1, r4
 8023366:	f7ff feab 	bl	80230c0 <memmove>
 802336a:	e7ca      	b.n	8023302 <_realloc_r+0x20e>
 802336c:	1f32      	subs	r2, r6, #4
 802336e:	2a24      	cmp	r2, #36	; 0x24
 8023370:	d82d      	bhi.n	80233ce <_realloc_r+0x2da>
 8023372:	2a13      	cmp	r2, #19
 8023374:	d928      	bls.n	80233c8 <_realloc_r+0x2d4>
 8023376:	6823      	ldr	r3, [r4, #0]
 8023378:	6003      	str	r3, [r0, #0]
 802337a:	6863      	ldr	r3, [r4, #4]
 802337c:	6043      	str	r3, [r0, #4]
 802337e:	2a1b      	cmp	r2, #27
 8023380:	d80e      	bhi.n	80233a0 <_realloc_r+0x2ac>
 8023382:	f100 0308 	add.w	r3, r0, #8
 8023386:	f104 0208 	add.w	r2, r4, #8
 802338a:	6811      	ldr	r1, [r2, #0]
 802338c:	6019      	str	r1, [r3, #0]
 802338e:	6851      	ldr	r1, [r2, #4]
 8023390:	6059      	str	r1, [r3, #4]
 8023392:	6892      	ldr	r2, [r2, #8]
 8023394:	609a      	str	r2, [r3, #8]
 8023396:	4621      	mov	r1, r4
 8023398:	4650      	mov	r0, sl
 802339a:	f7ff fdc1 	bl	8022f20 <_free_r>
 802339e:	e76c      	b.n	802327a <_realloc_r+0x186>
 80233a0:	68a3      	ldr	r3, [r4, #8]
 80233a2:	6083      	str	r3, [r0, #8]
 80233a4:	68e3      	ldr	r3, [r4, #12]
 80233a6:	60c3      	str	r3, [r0, #12]
 80233a8:	2a24      	cmp	r2, #36	; 0x24
 80233aa:	bf01      	itttt	eq
 80233ac:	6923      	ldreq	r3, [r4, #16]
 80233ae:	6103      	streq	r3, [r0, #16]
 80233b0:	6961      	ldreq	r1, [r4, #20]
 80233b2:	6141      	streq	r1, [r0, #20]
 80233b4:	bf19      	ittee	ne
 80233b6:	f100 0310 	addne.w	r3, r0, #16
 80233ba:	f104 0210 	addne.w	r2, r4, #16
 80233be:	f100 0318 	addeq.w	r3, r0, #24
 80233c2:	f104 0218 	addeq.w	r2, r4, #24
 80233c6:	e7e0      	b.n	802338a <_realloc_r+0x296>
 80233c8:	4603      	mov	r3, r0
 80233ca:	4622      	mov	r2, r4
 80233cc:	e7dd      	b.n	802338a <_realloc_r+0x296>
 80233ce:	4621      	mov	r1, r4
 80233d0:	f7ff fe76 	bl	80230c0 <memmove>
 80233d4:	e7df      	b.n	8023396 <_realloc_r+0x2a2>
 80233d6:	4637      	mov	r7, r6
 80233d8:	e6ed      	b.n	80231b6 <_realloc_r+0xc2>
 80233da:	f003 0301 	and.w	r3, r3, #1
 80233de:	431f      	orrs	r7, r3
 80233e0:	f8c9 7004 	str.w	r7, [r9, #4]
 80233e4:	6853      	ldr	r3, [r2, #4]
 80233e6:	f043 0301 	orr.w	r3, r3, #1
 80233ea:	6053      	str	r3, [r2, #4]
 80233ec:	e6ff      	b.n	80231ee <_realloc_r+0xfa>
 80233ee:	bf00      	nop
 80233f0:	20001044 	.word	0x20001044

080233f4 <__ascii_wctomb>:
 80233f4:	b149      	cbz	r1, 802340a <__ascii_wctomb+0x16>
 80233f6:	2aff      	cmp	r2, #255	; 0xff
 80233f8:	bf85      	ittet	hi
 80233fa:	238a      	movhi	r3, #138	; 0x8a
 80233fc:	6003      	strhi	r3, [r0, #0]
 80233fe:	700a      	strbls	r2, [r1, #0]
 8023400:	f04f 30ff 	movhi.w	r0, #4294967295
 8023404:	bf98      	it	ls
 8023406:	2001      	movls	r0, #1
 8023408:	4770      	bx	lr
 802340a:	4608      	mov	r0, r1
 802340c:	4770      	bx	lr
	...

08023410 <cbrt>:
 8023410:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8023414:	ec51 0b10 	vmov	r0, r1, d0
 8023418:	4a59      	ldr	r2, [pc, #356]	; (8023580 <cbrt+0x170>)
 802341a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802341e:	4293      	cmp	r3, r2
 8023420:	468a      	mov	sl, r1
 8023422:	ee10 2a10 	vmov	r2, s0
 8023426:	d907      	bls.n	8023438 <cbrt+0x28>
 8023428:	460b      	mov	r3, r1
 802342a:	f7dc ff47 	bl	80002bc <__adddf3>
 802342e:	ec41 0b10 	vmov	d0, r0, r1
 8023432:	b002      	add	sp, #8
 8023434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023438:	431a      	orrs	r2, r3
 802343a:	d0f8      	beq.n	802342e <cbrt+0x1e>
 802343c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8023440:	4619      	mov	r1, r3
 8023442:	4606      	mov	r6, r0
 8023444:	461f      	mov	r7, r3
 8023446:	d27c      	bcs.n	8023542 <cbrt+0x132>
 8023448:	2200      	movs	r2, #0
 802344a:	4b4e      	ldr	r3, [pc, #312]	; (8023584 <cbrt+0x174>)
 802344c:	f7dd f8e8 	bl	8000620 <__aeabi_dmul>
 8023450:	2203      	movs	r2, #3
 8023452:	fbb1 f3f2 	udiv	r3, r1, r2
 8023456:	f103 5525 	add.w	r5, r3, #692060160	; 0x29400000
 802345a:	f505 157d 	add.w	r5, r5, #4145152	; 0x3f4000
 802345e:	f505 5562 	add.w	r5, r5, #14464	; 0x3880
 8023462:	4604      	mov	r4, r0
 8023464:	3513      	adds	r5, #19
 8023466:	4622      	mov	r2, r4
 8023468:	462b      	mov	r3, r5
 802346a:	4620      	mov	r0, r4
 802346c:	4629      	mov	r1, r5
 802346e:	f7dd f8d7 	bl	8000620 <__aeabi_dmul>
 8023472:	4632      	mov	r2, r6
 8023474:	463b      	mov	r3, r7
 8023476:	f7dd f9fd 	bl	8000874 <__aeabi_ddiv>
 802347a:	4622      	mov	r2, r4
 802347c:	462b      	mov	r3, r5
 802347e:	f7dd f8cf 	bl	8000620 <__aeabi_dmul>
 8023482:	a335      	add	r3, pc, #212	; (adr r3, 8023558 <cbrt+0x148>)
 8023484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023488:	f7dc ff18 	bl	80002bc <__adddf3>
 802348c:	a334      	add	r3, pc, #208	; (adr r3, 8023560 <cbrt+0x150>)
 802348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023492:	e9cd 0100 	strd	r0, r1, [sp]
 8023496:	f7dc ff11 	bl	80002bc <__adddf3>
 802349a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802349e:	4680      	mov	r8, r0
 80234a0:	4689      	mov	r9, r1
 80234a2:	a131      	add	r1, pc, #196	; (adr r1, 8023568 <cbrt+0x158>)
 80234a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80234a8:	f7dd f9e4 	bl	8000874 <__aeabi_ddiv>
 80234ac:	4602      	mov	r2, r0
 80234ae:	460b      	mov	r3, r1
 80234b0:	4640      	mov	r0, r8
 80234b2:	4649      	mov	r1, r9
 80234b4:	f7dc ff02 	bl	80002bc <__adddf3>
 80234b8:	4602      	mov	r2, r0
 80234ba:	460b      	mov	r3, r1
 80234bc:	a12c      	add	r1, pc, #176	; (adr r1, 8023570 <cbrt+0x160>)
 80234be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80234c2:	f7dd f9d7 	bl	8000874 <__aeabi_ddiv>
 80234c6:	a32c      	add	r3, pc, #176	; (adr r3, 8023578 <cbrt+0x168>)
 80234c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234cc:	f7dc fef6 	bl	80002bc <__adddf3>
 80234d0:	4622      	mov	r2, r4
 80234d2:	462b      	mov	r3, r5
 80234d4:	f7dd f8a4 	bl	8000620 <__aeabi_dmul>
 80234d8:	2400      	movs	r4, #0
 80234da:	1c4d      	adds	r5, r1, #1
 80234dc:	4622      	mov	r2, r4
 80234de:	462b      	mov	r3, r5
 80234e0:	4620      	mov	r0, r4
 80234e2:	4629      	mov	r1, r5
 80234e4:	f7dd f89c 	bl	8000620 <__aeabi_dmul>
 80234e8:	4602      	mov	r2, r0
 80234ea:	460b      	mov	r3, r1
 80234ec:	4630      	mov	r0, r6
 80234ee:	4639      	mov	r1, r7
 80234f0:	f7dd f9c0 	bl	8000874 <__aeabi_ddiv>
 80234f4:	4622      	mov	r2, r4
 80234f6:	462b      	mov	r3, r5
 80234f8:	4680      	mov	r8, r0
 80234fa:	4689      	mov	r9, r1
 80234fc:	f7dc fedc 	bl	80002b8 <__aeabi_dsub>
 8023500:	4622      	mov	r2, r4
 8023502:	4606      	mov	r6, r0
 8023504:	460f      	mov	r7, r1
 8023506:	462b      	mov	r3, r5
 8023508:	4620      	mov	r0, r4
 802350a:	4629      	mov	r1, r5
 802350c:	f7dc fed6 	bl	80002bc <__adddf3>
 8023510:	4642      	mov	r2, r8
 8023512:	464b      	mov	r3, r9
 8023514:	f7dc fed2 	bl	80002bc <__adddf3>
 8023518:	4602      	mov	r2, r0
 802351a:	460b      	mov	r3, r1
 802351c:	4630      	mov	r0, r6
 802351e:	4639      	mov	r1, r7
 8023520:	f7dd f9a8 	bl	8000874 <__aeabi_ddiv>
 8023524:	4622      	mov	r2, r4
 8023526:	462b      	mov	r3, r5
 8023528:	f7dd f87a 	bl	8000620 <__aeabi_dmul>
 802352c:	4602      	mov	r2, r0
 802352e:	460b      	mov	r3, r1
 8023530:	4620      	mov	r0, r4
 8023532:	4629      	mov	r1, r5
 8023534:	f7dc fec2 	bl	80002bc <__adddf3>
 8023538:	f00a 4a00 	and.w	sl, sl, #2147483648	; 0x80000000
 802353c:	ea4a 0101 	orr.w	r1, sl, r1
 8023540:	e775      	b.n	802342e <cbrt+0x1e>
 8023542:	2203      	movs	r2, #3
 8023544:	fb93 f3f2 	sdiv	r3, r3, r2
 8023548:	f103 552c 	add.w	r5, r3, #721420288	; 0x2b000000
 802354c:	f5a5 05c1 	sub.w	r5, r5, #6324224	; 0x608000
 8023550:	2400      	movs	r4, #0
 8023552:	f2a5 756d 	subw	r5, r5, #1901	; 0x76d
 8023556:	e786      	b.n	8023466 <cbrt+0x56>
 8023558:	f15f15f1 	.word	0xf15f15f1
 802355c:	3fe15f15 	.word	0x3fe15f15
 8023560:	0ea0ea0f 	.word	0x0ea0ea0f
 8023564:	3ff6a0ea 	.word	0x3ff6a0ea
 8023568:	2532c834 	.word	0x2532c834
 802356c:	bfe691de 	.word	0xbfe691de
 8023570:	6db6db6e 	.word	0x6db6db6e
 8023574:	3ff9b6db 	.word	0x3ff9b6db
 8023578:	b6db6db7 	.word	0xb6db6db7
 802357c:	3fd6db6d 	.word	0x3fd6db6d
 8023580:	7fefffff 	.word	0x7fefffff
 8023584:	43500000 	.word	0x43500000

08023588 <floor>:
 8023588:	ec51 0b10 	vmov	r0, r1, d0
 802358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023590:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8023594:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8023598:	2e13      	cmp	r6, #19
 802359a:	ee10 8a10 	vmov	r8, s0
 802359e:	460c      	mov	r4, r1
 80235a0:	ee10 5a10 	vmov	r5, s0
 80235a4:	dc35      	bgt.n	8023612 <floor+0x8a>
 80235a6:	2e00      	cmp	r6, #0
 80235a8:	da17      	bge.n	80235da <floor+0x52>
 80235aa:	a335      	add	r3, pc, #212	; (adr r3, 8023680 <floor+0xf8>)
 80235ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235b0:	f7dc fe84 	bl	80002bc <__adddf3>
 80235b4:	2200      	movs	r2, #0
 80235b6:	2300      	movs	r3, #0
 80235b8:	f7dd fac2 	bl	8000b40 <__aeabi_dcmpgt>
 80235bc:	b150      	cbz	r0, 80235d4 <floor+0x4c>
 80235be:	2c00      	cmp	r4, #0
 80235c0:	da5a      	bge.n	8023678 <floor+0xf0>
 80235c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80235c6:	ea53 0308 	orrs.w	r3, r3, r8
 80235ca:	4b2f      	ldr	r3, [pc, #188]	; (8023688 <floor+0x100>)
 80235cc:	f04f 0500 	mov.w	r5, #0
 80235d0:	bf18      	it	ne
 80235d2:	461c      	movne	r4, r3
 80235d4:	4621      	mov	r1, r4
 80235d6:	4628      	mov	r0, r5
 80235d8:	e025      	b.n	8023626 <floor+0x9e>
 80235da:	4f2c      	ldr	r7, [pc, #176]	; (802368c <floor+0x104>)
 80235dc:	4137      	asrs	r7, r6
 80235de:	ea01 0307 	and.w	r3, r1, r7
 80235e2:	4303      	orrs	r3, r0
 80235e4:	d01f      	beq.n	8023626 <floor+0x9e>
 80235e6:	a326      	add	r3, pc, #152	; (adr r3, 8023680 <floor+0xf8>)
 80235e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235ec:	f7dc fe66 	bl	80002bc <__adddf3>
 80235f0:	2200      	movs	r2, #0
 80235f2:	2300      	movs	r3, #0
 80235f4:	f7dd faa4 	bl	8000b40 <__aeabi_dcmpgt>
 80235f8:	2800      	cmp	r0, #0
 80235fa:	d0eb      	beq.n	80235d4 <floor+0x4c>
 80235fc:	2c00      	cmp	r4, #0
 80235fe:	bfbe      	ittt	lt
 8023600:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8023604:	fa43 f606 	asrlt.w	r6, r3, r6
 8023608:	19a4      	addlt	r4, r4, r6
 802360a:	ea24 0407 	bic.w	r4, r4, r7
 802360e:	2500      	movs	r5, #0
 8023610:	e7e0      	b.n	80235d4 <floor+0x4c>
 8023612:	2e33      	cmp	r6, #51	; 0x33
 8023614:	dd0b      	ble.n	802362e <floor+0xa6>
 8023616:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802361a:	d104      	bne.n	8023626 <floor+0x9e>
 802361c:	ee10 2a10 	vmov	r2, s0
 8023620:	460b      	mov	r3, r1
 8023622:	f7dc fe4b 	bl	80002bc <__adddf3>
 8023626:	ec41 0b10 	vmov	d0, r0, r1
 802362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802362e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8023632:	f04f 33ff 	mov.w	r3, #4294967295
 8023636:	fa23 f707 	lsr.w	r7, r3, r7
 802363a:	4238      	tst	r0, r7
 802363c:	d0f3      	beq.n	8023626 <floor+0x9e>
 802363e:	a310      	add	r3, pc, #64	; (adr r3, 8023680 <floor+0xf8>)
 8023640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023644:	f7dc fe3a 	bl	80002bc <__adddf3>
 8023648:	2200      	movs	r2, #0
 802364a:	2300      	movs	r3, #0
 802364c:	f7dd fa78 	bl	8000b40 <__aeabi_dcmpgt>
 8023650:	2800      	cmp	r0, #0
 8023652:	d0bf      	beq.n	80235d4 <floor+0x4c>
 8023654:	2c00      	cmp	r4, #0
 8023656:	da02      	bge.n	802365e <floor+0xd6>
 8023658:	2e14      	cmp	r6, #20
 802365a:	d103      	bne.n	8023664 <floor+0xdc>
 802365c:	3401      	adds	r4, #1
 802365e:	ea25 0507 	bic.w	r5, r5, r7
 8023662:	e7b7      	b.n	80235d4 <floor+0x4c>
 8023664:	2301      	movs	r3, #1
 8023666:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802366a:	fa03 f606 	lsl.w	r6, r3, r6
 802366e:	4435      	add	r5, r6
 8023670:	45a8      	cmp	r8, r5
 8023672:	bf88      	it	hi
 8023674:	18e4      	addhi	r4, r4, r3
 8023676:	e7f2      	b.n	802365e <floor+0xd6>
 8023678:	2500      	movs	r5, #0
 802367a:	462c      	mov	r4, r5
 802367c:	e7aa      	b.n	80235d4 <floor+0x4c>
 802367e:	bf00      	nop
 8023680:	8800759c 	.word	0x8800759c
 8023684:	7e37e43c 	.word	0x7e37e43c
 8023688:	bff00000 	.word	0xbff00000
 802368c:	000fffff 	.word	0x000fffff

08023690 <exp>:
 8023690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023692:	ed2d 8b02 	vpush	{d8}
 8023696:	4e38      	ldr	r6, [pc, #224]	; (8023778 <exp+0xe8>)
 8023698:	b08b      	sub	sp, #44	; 0x2c
 802369a:	ec55 4b10 	vmov	r4, r5, d0
 802369e:	f000 fb17 	bl	8023cd0 <__ieee754_exp>
 80236a2:	f996 3000 	ldrsb.w	r3, [r6]
 80236a6:	eeb0 8a40 	vmov.f32	s16, s0
 80236aa:	eef0 8a60 	vmov.f32	s17, s1
 80236ae:	3301      	adds	r3, #1
 80236b0:	d02c      	beq.n	802370c <exp+0x7c>
 80236b2:	ec45 4b10 	vmov	d0, r4, r5
 80236b6:	f001 fc67 	bl	8024f88 <finite>
 80236ba:	b338      	cbz	r0, 802370c <exp+0x7c>
 80236bc:	a32a      	add	r3, pc, #168	; (adr r3, 8023768 <exp+0xd8>)
 80236be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236c2:	4620      	mov	r0, r4
 80236c4:	4629      	mov	r1, r5
 80236c6:	f7dd fa3b 	bl	8000b40 <__aeabi_dcmpgt>
 80236ca:	4607      	mov	r7, r0
 80236cc:	2800      	cmp	r0, #0
 80236ce:	d030      	beq.n	8023732 <exp+0xa2>
 80236d0:	2303      	movs	r3, #3
 80236d2:	9300      	str	r3, [sp, #0]
 80236d4:	4b29      	ldr	r3, [pc, #164]	; (802377c <exp+0xec>)
 80236d6:	9301      	str	r3, [sp, #4]
 80236d8:	2300      	movs	r3, #0
 80236da:	9308      	str	r3, [sp, #32]
 80236dc:	f996 3000 	ldrsb.w	r3, [r6]
 80236e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80236e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80236e8:	b9c3      	cbnz	r3, 802371c <exp+0x8c>
 80236ea:	4b25      	ldr	r3, [pc, #148]	; (8023780 <exp+0xf0>)
 80236ec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80236f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80236f4:	4668      	mov	r0, sp
 80236f6:	f001 fc4f 	bl	8024f98 <matherr>
 80236fa:	b1a8      	cbz	r0, 8023728 <exp+0x98>
 80236fc:	9b08      	ldr	r3, [sp, #32]
 80236fe:	b11b      	cbz	r3, 8023708 <exp+0x78>
 8023700:	f7fc ff48 	bl	8020594 <__errno>
 8023704:	9b08      	ldr	r3, [sp, #32]
 8023706:	6003      	str	r3, [r0, #0]
 8023708:	ed9d 8b06 	vldr	d8, [sp, #24]
 802370c:	eeb0 0a48 	vmov.f32	s0, s16
 8023710:	eef0 0a68 	vmov.f32	s1, s17
 8023714:	b00b      	add	sp, #44	; 0x2c
 8023716:	ecbd 8b02 	vpop	{d8}
 802371a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802371c:	4919      	ldr	r1, [pc, #100]	; (8023784 <exp+0xf4>)
 802371e:	2000      	movs	r0, #0
 8023720:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023724:	2b02      	cmp	r3, #2
 8023726:	d1e5      	bne.n	80236f4 <exp+0x64>
 8023728:	f7fc ff34 	bl	8020594 <__errno>
 802372c:	2322      	movs	r3, #34	; 0x22
 802372e:	6003      	str	r3, [r0, #0]
 8023730:	e7e4      	b.n	80236fc <exp+0x6c>
 8023732:	a30f      	add	r3, pc, #60	; (adr r3, 8023770 <exp+0xe0>)
 8023734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023738:	4620      	mov	r0, r4
 802373a:	4629      	mov	r1, r5
 802373c:	f7dd f9e2 	bl	8000b04 <__aeabi_dcmplt>
 8023740:	2800      	cmp	r0, #0
 8023742:	d0e3      	beq.n	802370c <exp+0x7c>
 8023744:	2304      	movs	r3, #4
 8023746:	9300      	str	r3, [sp, #0]
 8023748:	4b0c      	ldr	r3, [pc, #48]	; (802377c <exp+0xec>)
 802374a:	9301      	str	r3, [sp, #4]
 802374c:	2200      	movs	r2, #0
 802374e:	2300      	movs	r3, #0
 8023750:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023754:	9708      	str	r7, [sp, #32]
 8023756:	e9cd 4504 	strd	r4, r5, [sp, #16]
 802375a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 802375e:	f996 3000 	ldrsb.w	r3, [r6]
 8023762:	e7df      	b.n	8023724 <exp+0x94>
 8023764:	f3af 8000 	nop.w
 8023768:	fefa39ef 	.word	0xfefa39ef
 802376c:	40862e42 	.word	0x40862e42
 8023770:	d52d3051 	.word	0xd52d3051
 8023774:	c0874910 	.word	0xc0874910
 8023778:	200015c0 	.word	0x200015c0
 802377c:	08032495 	.word	0x08032495
 8023780:	47efffff 	.word	0x47efffff
 8023784:	7ff00000 	.word	0x7ff00000

08023788 <log>:
 8023788:	b570      	push	{r4, r5, r6, lr}
 802378a:	ed2d 8b02 	vpush	{d8}
 802378e:	b08a      	sub	sp, #40	; 0x28
 8023790:	ec55 4b10 	vmov	r4, r5, d0
 8023794:	f000 fc10 	bl	8023fb8 <__ieee754_log>
 8023798:	4b36      	ldr	r3, [pc, #216]	; (8023874 <log+0xec>)
 802379a:	eeb0 8a40 	vmov.f32	s16, s0
 802379e:	eef0 8a60 	vmov.f32	s17, s1
 80237a2:	f993 6000 	ldrsb.w	r6, [r3]
 80237a6:	1c73      	adds	r3, r6, #1
 80237a8:	d05b      	beq.n	8023862 <log+0xda>
 80237aa:	4622      	mov	r2, r4
 80237ac:	462b      	mov	r3, r5
 80237ae:	4620      	mov	r0, r4
 80237b0:	4629      	mov	r1, r5
 80237b2:	f7dd f9cf 	bl	8000b54 <__aeabi_dcmpun>
 80237b6:	2800      	cmp	r0, #0
 80237b8:	d153      	bne.n	8023862 <log+0xda>
 80237ba:	2200      	movs	r2, #0
 80237bc:	2300      	movs	r3, #0
 80237be:	4620      	mov	r0, r4
 80237c0:	4629      	mov	r1, r5
 80237c2:	f7dd f9bd 	bl	8000b40 <__aeabi_dcmpgt>
 80237c6:	2800      	cmp	r0, #0
 80237c8:	d14b      	bne.n	8023862 <log+0xda>
 80237ca:	4b2b      	ldr	r3, [pc, #172]	; (8023878 <log+0xf0>)
 80237cc:	9301      	str	r3, [sp, #4]
 80237ce:	9008      	str	r0, [sp, #32]
 80237d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80237d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80237d8:	b9a6      	cbnz	r6, 8023804 <log+0x7c>
 80237da:	4b28      	ldr	r3, [pc, #160]	; (802387c <log+0xf4>)
 80237dc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80237e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80237e4:	4620      	mov	r0, r4
 80237e6:	2200      	movs	r2, #0
 80237e8:	2300      	movs	r3, #0
 80237ea:	4629      	mov	r1, r5
 80237ec:	f7dd f980 	bl	8000af0 <__aeabi_dcmpeq>
 80237f0:	bb40      	cbnz	r0, 8023844 <log+0xbc>
 80237f2:	2301      	movs	r3, #1
 80237f4:	2e02      	cmp	r6, #2
 80237f6:	9300      	str	r3, [sp, #0]
 80237f8:	d119      	bne.n	802382e <log+0xa6>
 80237fa:	f7fc fecb 	bl	8020594 <__errno>
 80237fe:	2321      	movs	r3, #33	; 0x21
 8023800:	6003      	str	r3, [r0, #0]
 8023802:	e019      	b.n	8023838 <log+0xb0>
 8023804:	4b1e      	ldr	r3, [pc, #120]	; (8023880 <log+0xf8>)
 8023806:	2200      	movs	r2, #0
 8023808:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802380c:	4620      	mov	r0, r4
 802380e:	2200      	movs	r2, #0
 8023810:	2300      	movs	r3, #0
 8023812:	4629      	mov	r1, r5
 8023814:	f7dd f96c 	bl	8000af0 <__aeabi_dcmpeq>
 8023818:	2800      	cmp	r0, #0
 802381a:	d0ea      	beq.n	80237f2 <log+0x6a>
 802381c:	2302      	movs	r3, #2
 802381e:	429e      	cmp	r6, r3
 8023820:	9300      	str	r3, [sp, #0]
 8023822:	d111      	bne.n	8023848 <log+0xc0>
 8023824:	f7fc feb6 	bl	8020594 <__errno>
 8023828:	2322      	movs	r3, #34	; 0x22
 802382a:	6003      	str	r3, [r0, #0]
 802382c:	e011      	b.n	8023852 <log+0xca>
 802382e:	4668      	mov	r0, sp
 8023830:	f001 fbb2 	bl	8024f98 <matherr>
 8023834:	2800      	cmp	r0, #0
 8023836:	d0e0      	beq.n	80237fa <log+0x72>
 8023838:	4812      	ldr	r0, [pc, #72]	; (8023884 <log+0xfc>)
 802383a:	f001 fbb1 	bl	8024fa0 <nan>
 802383e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8023842:	e006      	b.n	8023852 <log+0xca>
 8023844:	2302      	movs	r3, #2
 8023846:	9300      	str	r3, [sp, #0]
 8023848:	4668      	mov	r0, sp
 802384a:	f001 fba5 	bl	8024f98 <matherr>
 802384e:	2800      	cmp	r0, #0
 8023850:	d0e8      	beq.n	8023824 <log+0x9c>
 8023852:	9b08      	ldr	r3, [sp, #32]
 8023854:	b11b      	cbz	r3, 802385e <log+0xd6>
 8023856:	f7fc fe9d 	bl	8020594 <__errno>
 802385a:	9b08      	ldr	r3, [sp, #32]
 802385c:	6003      	str	r3, [r0, #0]
 802385e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8023862:	eeb0 0a48 	vmov.f32	s0, s16
 8023866:	eef0 0a68 	vmov.f32	s1, s17
 802386a:	b00a      	add	sp, #40	; 0x28
 802386c:	ecbd 8b02 	vpop	{d8}
 8023870:	bd70      	pop	{r4, r5, r6, pc}
 8023872:	bf00      	nop
 8023874:	200015c0 	.word	0x200015c0
 8023878:	08032499 	.word	0x08032499
 802387c:	c7efffff 	.word	0xc7efffff
 8023880:	fff00000 	.word	0xfff00000
 8023884:	08032149 	.word	0x08032149

08023888 <pow>:
 8023888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802388c:	ed2d 8b04 	vpush	{d8-d9}
 8023890:	b08d      	sub	sp, #52	; 0x34
 8023892:	ec57 6b10 	vmov	r6, r7, d0
 8023896:	ec55 4b11 	vmov	r4, r5, d1
 802389a:	f000 fd65 	bl	8024368 <__ieee754_pow>
 802389e:	4bae      	ldr	r3, [pc, #696]	; (8023b58 <pow+0x2d0>)
 80238a0:	eeb0 8a40 	vmov.f32	s16, s0
 80238a4:	eef0 8a60 	vmov.f32	s17, s1
 80238a8:	f993 9000 	ldrsb.w	r9, [r3]
 80238ac:	f1b9 3fff 	cmp.w	r9, #4294967295
 80238b0:	4698      	mov	r8, r3
 80238b2:	d05f      	beq.n	8023974 <pow+0xec>
 80238b4:	4622      	mov	r2, r4
 80238b6:	462b      	mov	r3, r5
 80238b8:	4620      	mov	r0, r4
 80238ba:	4629      	mov	r1, r5
 80238bc:	f7dd f94a 	bl	8000b54 <__aeabi_dcmpun>
 80238c0:	4683      	mov	fp, r0
 80238c2:	2800      	cmp	r0, #0
 80238c4:	d156      	bne.n	8023974 <pow+0xec>
 80238c6:	4632      	mov	r2, r6
 80238c8:	463b      	mov	r3, r7
 80238ca:	4630      	mov	r0, r6
 80238cc:	4639      	mov	r1, r7
 80238ce:	f7dd f941 	bl	8000b54 <__aeabi_dcmpun>
 80238d2:	9001      	str	r0, [sp, #4]
 80238d4:	b1e8      	cbz	r0, 8023912 <pow+0x8a>
 80238d6:	2200      	movs	r2, #0
 80238d8:	2300      	movs	r3, #0
 80238da:	4620      	mov	r0, r4
 80238dc:	4629      	mov	r1, r5
 80238de:	f7dd f907 	bl	8000af0 <__aeabi_dcmpeq>
 80238e2:	2800      	cmp	r0, #0
 80238e4:	d046      	beq.n	8023974 <pow+0xec>
 80238e6:	2301      	movs	r3, #1
 80238e8:	9302      	str	r3, [sp, #8]
 80238ea:	4b9c      	ldr	r3, [pc, #624]	; (8023b5c <pow+0x2d4>)
 80238ec:	9303      	str	r3, [sp, #12]
 80238ee:	4b9c      	ldr	r3, [pc, #624]	; (8023b60 <pow+0x2d8>)
 80238f0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80238f4:	2200      	movs	r2, #0
 80238f6:	f1b9 0f02 	cmp.w	r9, #2
 80238fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80238fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023902:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023906:	d033      	beq.n	8023970 <pow+0xe8>
 8023908:	a802      	add	r0, sp, #8
 802390a:	f001 fb45 	bl	8024f98 <matherr>
 802390e:	bb48      	cbnz	r0, 8023964 <pow+0xdc>
 8023910:	e05e      	b.n	80239d0 <pow+0x148>
 8023912:	f04f 0a00 	mov.w	sl, #0
 8023916:	f04f 0b00 	mov.w	fp, #0
 802391a:	4652      	mov	r2, sl
 802391c:	465b      	mov	r3, fp
 802391e:	4630      	mov	r0, r6
 8023920:	4639      	mov	r1, r7
 8023922:	f7dd f8e5 	bl	8000af0 <__aeabi_dcmpeq>
 8023926:	ec4b ab19 	vmov	d9, sl, fp
 802392a:	2800      	cmp	r0, #0
 802392c:	d055      	beq.n	80239da <pow+0x152>
 802392e:	4652      	mov	r2, sl
 8023930:	465b      	mov	r3, fp
 8023932:	4620      	mov	r0, r4
 8023934:	4629      	mov	r1, r5
 8023936:	f7dd f8db 	bl	8000af0 <__aeabi_dcmpeq>
 802393a:	4680      	mov	r8, r0
 802393c:	b318      	cbz	r0, 8023986 <pow+0xfe>
 802393e:	2301      	movs	r3, #1
 8023940:	9302      	str	r3, [sp, #8]
 8023942:	4b86      	ldr	r3, [pc, #536]	; (8023b5c <pow+0x2d4>)
 8023944:	9303      	str	r3, [sp, #12]
 8023946:	9b01      	ldr	r3, [sp, #4]
 8023948:	930a      	str	r3, [sp, #40]	; 0x28
 802394a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802394e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023952:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8023956:	f1b9 0f00 	cmp.w	r9, #0
 802395a:	d0d5      	beq.n	8023908 <pow+0x80>
 802395c:	4b80      	ldr	r3, [pc, #512]	; (8023b60 <pow+0x2d8>)
 802395e:	2200      	movs	r2, #0
 8023960:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023966:	b11b      	cbz	r3, 8023970 <pow+0xe8>
 8023968:	f7fc fe14 	bl	8020594 <__errno>
 802396c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802396e:	6003      	str	r3, [r0, #0]
 8023970:	ed9d 8b08 	vldr	d8, [sp, #32]
 8023974:	eeb0 0a48 	vmov.f32	s0, s16
 8023978:	eef0 0a68 	vmov.f32	s1, s17
 802397c:	b00d      	add	sp, #52	; 0x34
 802397e:	ecbd 8b04 	vpop	{d8-d9}
 8023982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023986:	ec45 4b10 	vmov	d0, r4, r5
 802398a:	f001 fafd 	bl	8024f88 <finite>
 802398e:	2800      	cmp	r0, #0
 8023990:	d0f0      	beq.n	8023974 <pow+0xec>
 8023992:	4652      	mov	r2, sl
 8023994:	465b      	mov	r3, fp
 8023996:	4620      	mov	r0, r4
 8023998:	4629      	mov	r1, r5
 802399a:	f7dd f8b3 	bl	8000b04 <__aeabi_dcmplt>
 802399e:	2800      	cmp	r0, #0
 80239a0:	d0e8      	beq.n	8023974 <pow+0xec>
 80239a2:	2301      	movs	r3, #1
 80239a4:	9302      	str	r3, [sp, #8]
 80239a6:	4b6d      	ldr	r3, [pc, #436]	; (8023b5c <pow+0x2d4>)
 80239a8:	9303      	str	r3, [sp, #12]
 80239aa:	4b6b      	ldr	r3, [pc, #428]	; (8023b58 <pow+0x2d0>)
 80239ac:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80239b0:	f993 3000 	ldrsb.w	r3, [r3]
 80239b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80239b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80239bc:	b913      	cbnz	r3, 80239c4 <pow+0x13c>
 80239be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80239c2:	e7a1      	b.n	8023908 <pow+0x80>
 80239c4:	4967      	ldr	r1, [pc, #412]	; (8023b64 <pow+0x2dc>)
 80239c6:	2000      	movs	r0, #0
 80239c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80239cc:	2b02      	cmp	r3, #2
 80239ce:	d19b      	bne.n	8023908 <pow+0x80>
 80239d0:	f7fc fde0 	bl	8020594 <__errno>
 80239d4:	2321      	movs	r3, #33	; 0x21
 80239d6:	6003      	str	r3, [r0, #0]
 80239d8:	e7c4      	b.n	8023964 <pow+0xdc>
 80239da:	eeb0 0a48 	vmov.f32	s0, s16
 80239de:	eef0 0a68 	vmov.f32	s1, s17
 80239e2:	f001 fad1 	bl	8024f88 <finite>
 80239e6:	9001      	str	r0, [sp, #4]
 80239e8:	2800      	cmp	r0, #0
 80239ea:	f040 808a 	bne.w	8023b02 <pow+0x27a>
 80239ee:	ec47 6b10 	vmov	d0, r6, r7
 80239f2:	f001 fac9 	bl	8024f88 <finite>
 80239f6:	2800      	cmp	r0, #0
 80239f8:	f000 8083 	beq.w	8023b02 <pow+0x27a>
 80239fc:	ec45 4b10 	vmov	d0, r4, r5
 8023a00:	f001 fac2 	bl	8024f88 <finite>
 8023a04:	2800      	cmp	r0, #0
 8023a06:	d07c      	beq.n	8023b02 <pow+0x27a>
 8023a08:	ec53 2b18 	vmov	r2, r3, d8
 8023a0c:	ee18 0a10 	vmov	r0, s16
 8023a10:	4619      	mov	r1, r3
 8023a12:	f7dd f89f 	bl	8000b54 <__aeabi_dcmpun>
 8023a16:	f998 9000 	ldrsb.w	r9, [r8]
 8023a1a:	4b50      	ldr	r3, [pc, #320]	; (8023b5c <pow+0x2d4>)
 8023a1c:	b1b0      	cbz	r0, 8023a4c <pow+0x1c4>
 8023a1e:	2201      	movs	r2, #1
 8023a20:	9303      	str	r3, [sp, #12]
 8023a22:	9b01      	ldr	r3, [sp, #4]
 8023a24:	9202      	str	r2, [sp, #8]
 8023a26:	930a      	str	r3, [sp, #40]	; 0x28
 8023a28:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023a2c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023a30:	f1b9 0f00 	cmp.w	r9, #0
 8023a34:	d0c3      	beq.n	80239be <pow+0x136>
 8023a36:	4652      	mov	r2, sl
 8023a38:	465b      	mov	r3, fp
 8023a3a:	4650      	mov	r0, sl
 8023a3c:	4659      	mov	r1, fp
 8023a3e:	f7dc ff19 	bl	8000874 <__aeabi_ddiv>
 8023a42:	f1b9 0f02 	cmp.w	r9, #2
 8023a46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023a4a:	e7c0      	b.n	80239ce <pow+0x146>
 8023a4c:	2203      	movs	r2, #3
 8023a4e:	9202      	str	r2, [sp, #8]
 8023a50:	9303      	str	r3, [sp, #12]
 8023a52:	900a      	str	r0, [sp, #40]	; 0x28
 8023a54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023a58:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023a5c:	f1b9 0f00 	cmp.w	r9, #0
 8023a60:	d12c      	bne.n	8023abc <pow+0x234>
 8023a62:	4b41      	ldr	r3, [pc, #260]	; (8023b68 <pow+0x2e0>)
 8023a64:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8023a68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023a6c:	4630      	mov	r0, r6
 8023a6e:	4652      	mov	r2, sl
 8023a70:	465b      	mov	r3, fp
 8023a72:	4639      	mov	r1, r7
 8023a74:	f7dd f846 	bl	8000b04 <__aeabi_dcmplt>
 8023a78:	2800      	cmp	r0, #0
 8023a7a:	d066      	beq.n	8023b4a <pow+0x2c2>
 8023a7c:	2200      	movs	r2, #0
 8023a7e:	4b3b      	ldr	r3, [pc, #236]	; (8023b6c <pow+0x2e4>)
 8023a80:	4620      	mov	r0, r4
 8023a82:	4629      	mov	r1, r5
 8023a84:	f7dc fdcc 	bl	8000620 <__aeabi_dmul>
 8023a88:	4604      	mov	r4, r0
 8023a8a:	460d      	mov	r5, r1
 8023a8c:	ec45 4b10 	vmov	d0, r4, r5
 8023a90:	f001 fa8e 	bl	8024fb0 <rint>
 8023a94:	4620      	mov	r0, r4
 8023a96:	ec53 2b10 	vmov	r2, r3, d0
 8023a9a:	4629      	mov	r1, r5
 8023a9c:	f7dd f828 	bl	8000af0 <__aeabi_dcmpeq>
 8023aa0:	b920      	cbnz	r0, 8023aac <pow+0x224>
 8023aa2:	4b33      	ldr	r3, [pc, #204]	; (8023b70 <pow+0x2e8>)
 8023aa4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8023aa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023aac:	f998 3000 	ldrsb.w	r3, [r8]
 8023ab0:	2b02      	cmp	r3, #2
 8023ab2:	d14a      	bne.n	8023b4a <pow+0x2c2>
 8023ab4:	f7fc fd6e 	bl	8020594 <__errno>
 8023ab8:	2322      	movs	r3, #34	; 0x22
 8023aba:	e78c      	b.n	80239d6 <pow+0x14e>
 8023abc:	4b2d      	ldr	r3, [pc, #180]	; (8023b74 <pow+0x2ec>)
 8023abe:	2200      	movs	r2, #0
 8023ac0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023ac4:	4630      	mov	r0, r6
 8023ac6:	4652      	mov	r2, sl
 8023ac8:	465b      	mov	r3, fp
 8023aca:	4639      	mov	r1, r7
 8023acc:	f7dd f81a 	bl	8000b04 <__aeabi_dcmplt>
 8023ad0:	2800      	cmp	r0, #0
 8023ad2:	d0eb      	beq.n	8023aac <pow+0x224>
 8023ad4:	2200      	movs	r2, #0
 8023ad6:	4b25      	ldr	r3, [pc, #148]	; (8023b6c <pow+0x2e4>)
 8023ad8:	4620      	mov	r0, r4
 8023ada:	4629      	mov	r1, r5
 8023adc:	f7dc fda0 	bl	8000620 <__aeabi_dmul>
 8023ae0:	4604      	mov	r4, r0
 8023ae2:	460d      	mov	r5, r1
 8023ae4:	ec45 4b10 	vmov	d0, r4, r5
 8023ae8:	f001 fa62 	bl	8024fb0 <rint>
 8023aec:	4620      	mov	r0, r4
 8023aee:	ec53 2b10 	vmov	r2, r3, d0
 8023af2:	4629      	mov	r1, r5
 8023af4:	f7dc fffc 	bl	8000af0 <__aeabi_dcmpeq>
 8023af8:	2800      	cmp	r0, #0
 8023afa:	d1d7      	bne.n	8023aac <pow+0x224>
 8023afc:	2200      	movs	r2, #0
 8023afe:	4b19      	ldr	r3, [pc, #100]	; (8023b64 <pow+0x2dc>)
 8023b00:	e7d2      	b.n	8023aa8 <pow+0x220>
 8023b02:	2200      	movs	r2, #0
 8023b04:	2300      	movs	r3, #0
 8023b06:	ec51 0b18 	vmov	r0, r1, d8
 8023b0a:	f7dc fff1 	bl	8000af0 <__aeabi_dcmpeq>
 8023b0e:	2800      	cmp	r0, #0
 8023b10:	f43f af30 	beq.w	8023974 <pow+0xec>
 8023b14:	ec47 6b10 	vmov	d0, r6, r7
 8023b18:	f001 fa36 	bl	8024f88 <finite>
 8023b1c:	2800      	cmp	r0, #0
 8023b1e:	f43f af29 	beq.w	8023974 <pow+0xec>
 8023b22:	ec45 4b10 	vmov	d0, r4, r5
 8023b26:	f001 fa2f 	bl	8024f88 <finite>
 8023b2a:	2800      	cmp	r0, #0
 8023b2c:	f43f af22 	beq.w	8023974 <pow+0xec>
 8023b30:	2304      	movs	r3, #4
 8023b32:	9302      	str	r3, [sp, #8]
 8023b34:	4b09      	ldr	r3, [pc, #36]	; (8023b5c <pow+0x2d4>)
 8023b36:	9303      	str	r3, [sp, #12]
 8023b38:	2300      	movs	r3, #0
 8023b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8023b3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023b40:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023b44:	ed8d 9b08 	vstr	d9, [sp, #32]
 8023b48:	e7b0      	b.n	8023aac <pow+0x224>
 8023b4a:	a802      	add	r0, sp, #8
 8023b4c:	f001 fa24 	bl	8024f98 <matherr>
 8023b50:	2800      	cmp	r0, #0
 8023b52:	f47f af07 	bne.w	8023964 <pow+0xdc>
 8023b56:	e7ad      	b.n	8023ab4 <pow+0x22c>
 8023b58:	200015c0 	.word	0x200015c0
 8023b5c:	0803249d 	.word	0x0803249d
 8023b60:	3ff00000 	.word	0x3ff00000
 8023b64:	fff00000 	.word	0xfff00000
 8023b68:	47efffff 	.word	0x47efffff
 8023b6c:	3fe00000 	.word	0x3fe00000
 8023b70:	c7efffff 	.word	0xc7efffff
 8023b74:	7ff00000 	.word	0x7ff00000

08023b78 <sqrt>:
 8023b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023b7c:	ed2d 8b02 	vpush	{d8}
 8023b80:	b08b      	sub	sp, #44	; 0x2c
 8023b82:	ec55 4b10 	vmov	r4, r5, d0
 8023b86:	f001 f901 	bl	8024d8c <__ieee754_sqrt>
 8023b8a:	4b26      	ldr	r3, [pc, #152]	; (8023c24 <sqrt+0xac>)
 8023b8c:	eeb0 8a40 	vmov.f32	s16, s0
 8023b90:	eef0 8a60 	vmov.f32	s17, s1
 8023b94:	f993 6000 	ldrsb.w	r6, [r3]
 8023b98:	1c73      	adds	r3, r6, #1
 8023b9a:	d02a      	beq.n	8023bf2 <sqrt+0x7a>
 8023b9c:	4622      	mov	r2, r4
 8023b9e:	462b      	mov	r3, r5
 8023ba0:	4620      	mov	r0, r4
 8023ba2:	4629      	mov	r1, r5
 8023ba4:	f7dc ffd6 	bl	8000b54 <__aeabi_dcmpun>
 8023ba8:	4607      	mov	r7, r0
 8023baa:	bb10      	cbnz	r0, 8023bf2 <sqrt+0x7a>
 8023bac:	f04f 0800 	mov.w	r8, #0
 8023bb0:	f04f 0900 	mov.w	r9, #0
 8023bb4:	4642      	mov	r2, r8
 8023bb6:	464b      	mov	r3, r9
 8023bb8:	4620      	mov	r0, r4
 8023bba:	4629      	mov	r1, r5
 8023bbc:	f7dc ffa2 	bl	8000b04 <__aeabi_dcmplt>
 8023bc0:	b1b8      	cbz	r0, 8023bf2 <sqrt+0x7a>
 8023bc2:	2301      	movs	r3, #1
 8023bc4:	9300      	str	r3, [sp, #0]
 8023bc6:	4b18      	ldr	r3, [pc, #96]	; (8023c28 <sqrt+0xb0>)
 8023bc8:	9301      	str	r3, [sp, #4]
 8023bca:	9708      	str	r7, [sp, #32]
 8023bcc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8023bd0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8023bd4:	b9b6      	cbnz	r6, 8023c04 <sqrt+0x8c>
 8023bd6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8023bda:	4668      	mov	r0, sp
 8023bdc:	f001 f9dc 	bl	8024f98 <matherr>
 8023be0:	b1d0      	cbz	r0, 8023c18 <sqrt+0xa0>
 8023be2:	9b08      	ldr	r3, [sp, #32]
 8023be4:	b11b      	cbz	r3, 8023bee <sqrt+0x76>
 8023be6:	f7fc fcd5 	bl	8020594 <__errno>
 8023bea:	9b08      	ldr	r3, [sp, #32]
 8023bec:	6003      	str	r3, [r0, #0]
 8023bee:	ed9d 8b06 	vldr	d8, [sp, #24]
 8023bf2:	eeb0 0a48 	vmov.f32	s0, s16
 8023bf6:	eef0 0a68 	vmov.f32	s1, s17
 8023bfa:	b00b      	add	sp, #44	; 0x2c
 8023bfc:	ecbd 8b02 	vpop	{d8}
 8023c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023c04:	4642      	mov	r2, r8
 8023c06:	464b      	mov	r3, r9
 8023c08:	4640      	mov	r0, r8
 8023c0a:	4649      	mov	r1, r9
 8023c0c:	f7dc fe32 	bl	8000874 <__aeabi_ddiv>
 8023c10:	2e02      	cmp	r6, #2
 8023c12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023c16:	d1e0      	bne.n	8023bda <sqrt+0x62>
 8023c18:	f7fc fcbc 	bl	8020594 <__errno>
 8023c1c:	2321      	movs	r3, #33	; 0x21
 8023c1e:	6003      	str	r3, [r0, #0]
 8023c20:	e7df      	b.n	8023be2 <sqrt+0x6a>
 8023c22:	bf00      	nop
 8023c24:	200015c0 	.word	0x200015c0
 8023c28:	080324a1 	.word	0x080324a1

08023c2c <sqrtf>:
 8023c2c:	b510      	push	{r4, lr}
 8023c2e:	ed2d 8b02 	vpush	{d8}
 8023c32:	b08a      	sub	sp, #40	; 0x28
 8023c34:	eeb0 8a40 	vmov.f32	s16, s0
 8023c38:	f001 f958 	bl	8024eec <__ieee754_sqrtf>
 8023c3c:	4b21      	ldr	r3, [pc, #132]	; (8023cc4 <sqrtf+0x98>)
 8023c3e:	f993 4000 	ldrsb.w	r4, [r3]
 8023c42:	1c63      	adds	r3, r4, #1
 8023c44:	d02c      	beq.n	8023ca0 <sqrtf+0x74>
 8023c46:	eeb4 8a48 	vcmp.f32	s16, s16
 8023c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c4e:	d627      	bvs.n	8023ca0 <sqrtf+0x74>
 8023c50:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c58:	d522      	bpl.n	8023ca0 <sqrtf+0x74>
 8023c5a:	2301      	movs	r3, #1
 8023c5c:	9300      	str	r3, [sp, #0]
 8023c5e:	4b1a      	ldr	r3, [pc, #104]	; (8023cc8 <sqrtf+0x9c>)
 8023c60:	9301      	str	r3, [sp, #4]
 8023c62:	ee18 0a10 	vmov	r0, s16
 8023c66:	2300      	movs	r3, #0
 8023c68:	9308      	str	r3, [sp, #32]
 8023c6a:	f7dc fc85 	bl	8000578 <__aeabi_f2d>
 8023c6e:	2200      	movs	r2, #0
 8023c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023c78:	2300      	movs	r3, #0
 8023c7a:	b9ac      	cbnz	r4, 8023ca8 <sqrtf+0x7c>
 8023c7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023c80:	4668      	mov	r0, sp
 8023c82:	f001 f989 	bl	8024f98 <matherr>
 8023c86:	b1b8      	cbz	r0, 8023cb8 <sqrtf+0x8c>
 8023c88:	9b08      	ldr	r3, [sp, #32]
 8023c8a:	b11b      	cbz	r3, 8023c94 <sqrtf+0x68>
 8023c8c:	f7fc fc82 	bl	8020594 <__errno>
 8023c90:	9b08      	ldr	r3, [sp, #32]
 8023c92:	6003      	str	r3, [r0, #0]
 8023c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023c98:	f7dc ffba 	bl	8000c10 <__aeabi_d2f>
 8023c9c:	ee00 0a10 	vmov	s0, r0
 8023ca0:	b00a      	add	sp, #40	; 0x28
 8023ca2:	ecbd 8b02 	vpop	{d8}
 8023ca6:	bd10      	pop	{r4, pc}
 8023ca8:	4610      	mov	r0, r2
 8023caa:	4619      	mov	r1, r3
 8023cac:	f7dc fde2 	bl	8000874 <__aeabi_ddiv>
 8023cb0:	2c02      	cmp	r4, #2
 8023cb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023cb6:	d1e3      	bne.n	8023c80 <sqrtf+0x54>
 8023cb8:	f7fc fc6c 	bl	8020594 <__errno>
 8023cbc:	2321      	movs	r3, #33	; 0x21
 8023cbe:	6003      	str	r3, [r0, #0]
 8023cc0:	e7e2      	b.n	8023c88 <sqrtf+0x5c>
 8023cc2:	bf00      	nop
 8023cc4:	200015c0 	.word	0x200015c0
 8023cc8:	080324a6 	.word	0x080324a6
 8023ccc:	00000000 	.word	0x00000000

08023cd0 <__ieee754_exp>:
 8023cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cd4:	ec55 4b10 	vmov	r4, r5, d0
 8023cd8:	4aad      	ldr	r2, [pc, #692]	; (8023f90 <__ieee754_exp+0x2c0>)
 8023cda:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8023cde:	4297      	cmp	r7, r2
 8023ce0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8023ce4:	f240 80af 	bls.w	8023e46 <__ieee754_exp+0x176>
 8023ce8:	4aaa      	ldr	r2, [pc, #680]	; (8023f94 <__ieee754_exp+0x2c4>)
 8023cea:	4297      	cmp	r7, r2
 8023cec:	d915      	bls.n	8023d1a <__ieee754_exp+0x4a>
 8023cee:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8023cf2:	4323      	orrs	r3, r4
 8023cf4:	d009      	beq.n	8023d0a <__ieee754_exp+0x3a>
 8023cf6:	ee10 2a10 	vmov	r2, s0
 8023cfa:	462b      	mov	r3, r5
 8023cfc:	4620      	mov	r0, r4
 8023cfe:	4629      	mov	r1, r5
 8023d00:	f7dc fadc 	bl	80002bc <__adddf3>
 8023d04:	4604      	mov	r4, r0
 8023d06:	460d      	mov	r5, r1
 8023d08:	e002      	b.n	8023d10 <__ieee754_exp+0x40>
 8023d0a:	b10e      	cbz	r6, 8023d10 <__ieee754_exp+0x40>
 8023d0c:	2400      	movs	r4, #0
 8023d0e:	2500      	movs	r5, #0
 8023d10:	ec45 4b10 	vmov	d0, r4, r5
 8023d14:	b003      	add	sp, #12
 8023d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d1a:	a387      	add	r3, pc, #540	; (adr r3, 8023f38 <__ieee754_exp+0x268>)
 8023d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d20:	ee10 0a10 	vmov	r0, s0
 8023d24:	4629      	mov	r1, r5
 8023d26:	f7dc ff0b 	bl	8000b40 <__aeabi_dcmpgt>
 8023d2a:	b138      	cbz	r0, 8023d3c <__ieee754_exp+0x6c>
 8023d2c:	a384      	add	r3, pc, #528	; (adr r3, 8023f40 <__ieee754_exp+0x270>)
 8023d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d32:	4610      	mov	r0, r2
 8023d34:	4619      	mov	r1, r3
 8023d36:	f7dc fc73 	bl	8000620 <__aeabi_dmul>
 8023d3a:	e7e3      	b.n	8023d04 <__ieee754_exp+0x34>
 8023d3c:	a382      	add	r3, pc, #520	; (adr r3, 8023f48 <__ieee754_exp+0x278>)
 8023d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d42:	4620      	mov	r0, r4
 8023d44:	4629      	mov	r1, r5
 8023d46:	f7dc fedd 	bl	8000b04 <__aeabi_dcmplt>
 8023d4a:	2800      	cmp	r0, #0
 8023d4c:	d1de      	bne.n	8023d0c <__ieee754_exp+0x3c>
 8023d4e:	4b92      	ldr	r3, [pc, #584]	; (8023f98 <__ieee754_exp+0x2c8>)
 8023d50:	429f      	cmp	r7, r3
 8023d52:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 8023d56:	f200 808e 	bhi.w	8023e76 <__ieee754_exp+0x1a6>
 8023d5a:	4b90      	ldr	r3, [pc, #576]	; (8023f9c <__ieee754_exp+0x2cc>)
 8023d5c:	443b      	add	r3, r7
 8023d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d62:	4620      	mov	r0, r4
 8023d64:	4629      	mov	r1, r5
 8023d66:	f7dc faa7 	bl	80002b8 <__aeabi_dsub>
 8023d6a:	4b8d      	ldr	r3, [pc, #564]	; (8023fa0 <__ieee754_exp+0x2d0>)
 8023d6c:	441f      	add	r7, r3
 8023d6e:	ed97 7b00 	vldr	d7, [r7]
 8023d72:	ed8d 7b00 	vstr	d7, [sp]
 8023d76:	4682      	mov	sl, r0
 8023d78:	f1c6 0001 	rsb	r0, r6, #1
 8023d7c:	468b      	mov	fp, r1
 8023d7e:	1b86      	subs	r6, r0, r6
 8023d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023d84:	4650      	mov	r0, sl
 8023d86:	4659      	mov	r1, fp
 8023d88:	f7dc fa96 	bl	80002b8 <__aeabi_dsub>
 8023d8c:	4604      	mov	r4, r0
 8023d8e:	460d      	mov	r5, r1
 8023d90:	4622      	mov	r2, r4
 8023d92:	462b      	mov	r3, r5
 8023d94:	4620      	mov	r0, r4
 8023d96:	4629      	mov	r1, r5
 8023d98:	f7dc fc42 	bl	8000620 <__aeabi_dmul>
 8023d9c:	a36c      	add	r3, pc, #432	; (adr r3, 8023f50 <__ieee754_exp+0x280>)
 8023d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023da2:	4680      	mov	r8, r0
 8023da4:	4689      	mov	r9, r1
 8023da6:	f7dc fc3b 	bl	8000620 <__aeabi_dmul>
 8023daa:	a36b      	add	r3, pc, #428	; (adr r3, 8023f58 <__ieee754_exp+0x288>)
 8023dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023db0:	f7dc fa82 	bl	80002b8 <__aeabi_dsub>
 8023db4:	4642      	mov	r2, r8
 8023db6:	464b      	mov	r3, r9
 8023db8:	f7dc fc32 	bl	8000620 <__aeabi_dmul>
 8023dbc:	a368      	add	r3, pc, #416	; (adr r3, 8023f60 <__ieee754_exp+0x290>)
 8023dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dc2:	f7dc fa7b 	bl	80002bc <__adddf3>
 8023dc6:	4642      	mov	r2, r8
 8023dc8:	464b      	mov	r3, r9
 8023dca:	f7dc fc29 	bl	8000620 <__aeabi_dmul>
 8023dce:	a366      	add	r3, pc, #408	; (adr r3, 8023f68 <__ieee754_exp+0x298>)
 8023dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dd4:	f7dc fa70 	bl	80002b8 <__aeabi_dsub>
 8023dd8:	4642      	mov	r2, r8
 8023dda:	464b      	mov	r3, r9
 8023ddc:	f7dc fc20 	bl	8000620 <__aeabi_dmul>
 8023de0:	a363      	add	r3, pc, #396	; (adr r3, 8023f70 <__ieee754_exp+0x2a0>)
 8023de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023de6:	f7dc fa69 	bl	80002bc <__adddf3>
 8023dea:	4642      	mov	r2, r8
 8023dec:	464b      	mov	r3, r9
 8023dee:	f7dc fc17 	bl	8000620 <__aeabi_dmul>
 8023df2:	4602      	mov	r2, r0
 8023df4:	460b      	mov	r3, r1
 8023df6:	4620      	mov	r0, r4
 8023df8:	4629      	mov	r1, r5
 8023dfa:	f7dc fa5d 	bl	80002b8 <__aeabi_dsub>
 8023dfe:	4680      	mov	r8, r0
 8023e00:	4689      	mov	r9, r1
 8023e02:	4602      	mov	r2, r0
 8023e04:	460b      	mov	r3, r1
 8023e06:	4620      	mov	r0, r4
 8023e08:	4629      	mov	r1, r5
 8023e0a:	2e00      	cmp	r6, #0
 8023e0c:	d162      	bne.n	8023ed4 <__ieee754_exp+0x204>
 8023e0e:	f7dc fc07 	bl	8000620 <__aeabi_dmul>
 8023e12:	2200      	movs	r2, #0
 8023e14:	4606      	mov	r6, r0
 8023e16:	460f      	mov	r7, r1
 8023e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023e1c:	4640      	mov	r0, r8
 8023e1e:	4649      	mov	r1, r9
 8023e20:	f7dc fa4a 	bl	80002b8 <__aeabi_dsub>
 8023e24:	4602      	mov	r2, r0
 8023e26:	460b      	mov	r3, r1
 8023e28:	4630      	mov	r0, r6
 8023e2a:	4639      	mov	r1, r7
 8023e2c:	f7dc fd22 	bl	8000874 <__aeabi_ddiv>
 8023e30:	4622      	mov	r2, r4
 8023e32:	462b      	mov	r3, r5
 8023e34:	f7dc fa40 	bl	80002b8 <__aeabi_dsub>
 8023e38:	4602      	mov	r2, r0
 8023e3a:	460b      	mov	r3, r1
 8023e3c:	2000      	movs	r0, #0
 8023e3e:	4959      	ldr	r1, [pc, #356]	; (8023fa4 <__ieee754_exp+0x2d4>)
 8023e40:	f7dc fa3a 	bl	80002b8 <__aeabi_dsub>
 8023e44:	e75e      	b.n	8023d04 <__ieee754_exp+0x34>
 8023e46:	4b58      	ldr	r3, [pc, #352]	; (8023fa8 <__ieee754_exp+0x2d8>)
 8023e48:	429f      	cmp	r7, r3
 8023e4a:	d880      	bhi.n	8023d4e <__ieee754_exp+0x7e>
 8023e4c:	4b57      	ldr	r3, [pc, #348]	; (8023fac <__ieee754_exp+0x2dc>)
 8023e4e:	429f      	cmp	r7, r3
 8023e50:	d83c      	bhi.n	8023ecc <__ieee754_exp+0x1fc>
 8023e52:	a33b      	add	r3, pc, #236	; (adr r3, 8023f40 <__ieee754_exp+0x270>)
 8023e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e58:	ee10 0a10 	vmov	r0, s0
 8023e5c:	4629      	mov	r1, r5
 8023e5e:	f7dc fa2d 	bl	80002bc <__adddf3>
 8023e62:	2200      	movs	r2, #0
 8023e64:	4b4f      	ldr	r3, [pc, #316]	; (8023fa4 <__ieee754_exp+0x2d4>)
 8023e66:	f7dc fe6b 	bl	8000b40 <__aeabi_dcmpgt>
 8023e6a:	b388      	cbz	r0, 8023ed0 <__ieee754_exp+0x200>
 8023e6c:	2200      	movs	r2, #0
 8023e6e:	4b4d      	ldr	r3, [pc, #308]	; (8023fa4 <__ieee754_exp+0x2d4>)
 8023e70:	4620      	mov	r0, r4
 8023e72:	4629      	mov	r1, r5
 8023e74:	e744      	b.n	8023d00 <__ieee754_exp+0x30>
 8023e76:	4e4e      	ldr	r6, [pc, #312]	; (8023fb0 <__ieee754_exp+0x2e0>)
 8023e78:	a33f      	add	r3, pc, #252	; (adr r3, 8023f78 <__ieee754_exp+0x2a8>)
 8023e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e7e:	443e      	add	r6, r7
 8023e80:	4620      	mov	r0, r4
 8023e82:	4629      	mov	r1, r5
 8023e84:	f7dc fbcc 	bl	8000620 <__aeabi_dmul>
 8023e88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023e8c:	f7dc fa16 	bl	80002bc <__adddf3>
 8023e90:	f7dc fe76 	bl	8000b80 <__aeabi_d2iz>
 8023e94:	4606      	mov	r6, r0
 8023e96:	f7dc fb5d 	bl	8000554 <__aeabi_i2d>
 8023e9a:	a339      	add	r3, pc, #228	; (adr r3, 8023f80 <__ieee754_exp+0x2b0>)
 8023e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ea0:	4680      	mov	r8, r0
 8023ea2:	4689      	mov	r9, r1
 8023ea4:	f7dc fbbc 	bl	8000620 <__aeabi_dmul>
 8023ea8:	4602      	mov	r2, r0
 8023eaa:	460b      	mov	r3, r1
 8023eac:	4620      	mov	r0, r4
 8023eae:	4629      	mov	r1, r5
 8023eb0:	f7dc fa02 	bl	80002b8 <__aeabi_dsub>
 8023eb4:	a334      	add	r3, pc, #208	; (adr r3, 8023f88 <__ieee754_exp+0x2b8>)
 8023eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eba:	4682      	mov	sl, r0
 8023ebc:	468b      	mov	fp, r1
 8023ebe:	4640      	mov	r0, r8
 8023ec0:	4649      	mov	r1, r9
 8023ec2:	f7dc fbad 	bl	8000620 <__aeabi_dmul>
 8023ec6:	e9cd 0100 	strd	r0, r1, [sp]
 8023eca:	e759      	b.n	8023d80 <__ieee754_exp+0xb0>
 8023ecc:	2600      	movs	r6, #0
 8023ece:	e75f      	b.n	8023d90 <__ieee754_exp+0xc0>
 8023ed0:	4606      	mov	r6, r0
 8023ed2:	e75d      	b.n	8023d90 <__ieee754_exp+0xc0>
 8023ed4:	f7dc fba4 	bl	8000620 <__aeabi_dmul>
 8023ed8:	4642      	mov	r2, r8
 8023eda:	4604      	mov	r4, r0
 8023edc:	460d      	mov	r5, r1
 8023ede:	464b      	mov	r3, r9
 8023ee0:	2000      	movs	r0, #0
 8023ee2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8023ee6:	f7dc f9e7 	bl	80002b8 <__aeabi_dsub>
 8023eea:	4602      	mov	r2, r0
 8023eec:	460b      	mov	r3, r1
 8023eee:	4620      	mov	r0, r4
 8023ef0:	4629      	mov	r1, r5
 8023ef2:	f7dc fcbf 	bl	8000874 <__aeabi_ddiv>
 8023ef6:	4602      	mov	r2, r0
 8023ef8:	460b      	mov	r3, r1
 8023efa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023efe:	f7dc f9db 	bl	80002b8 <__aeabi_dsub>
 8023f02:	4652      	mov	r2, sl
 8023f04:	465b      	mov	r3, fp
 8023f06:	f7dc f9d7 	bl	80002b8 <__aeabi_dsub>
 8023f0a:	460b      	mov	r3, r1
 8023f0c:	4602      	mov	r2, r0
 8023f0e:	4925      	ldr	r1, [pc, #148]	; (8023fa4 <__ieee754_exp+0x2d4>)
 8023f10:	2000      	movs	r0, #0
 8023f12:	f7dc f9d1 	bl	80002b8 <__aeabi_dsub>
 8023f16:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8023f1a:	429e      	cmp	r6, r3
 8023f1c:	db02      	blt.n	8023f24 <__ieee754_exp+0x254>
 8023f1e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8023f22:	e6ef      	b.n	8023d04 <__ieee754_exp+0x34>
 8023f24:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8023f28:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8023f2c:	2200      	movs	r2, #0
 8023f2e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023f32:	e700      	b.n	8023d36 <__ieee754_exp+0x66>
 8023f34:	f3af 8000 	nop.w
 8023f38:	fefa39ef 	.word	0xfefa39ef
 8023f3c:	40862e42 	.word	0x40862e42
 8023f40:	8800759c 	.word	0x8800759c
 8023f44:	7e37e43c 	.word	0x7e37e43c
 8023f48:	d52d3051 	.word	0xd52d3051
 8023f4c:	c0874910 	.word	0xc0874910
 8023f50:	72bea4d0 	.word	0x72bea4d0
 8023f54:	3e663769 	.word	0x3e663769
 8023f58:	c5d26bf1 	.word	0xc5d26bf1
 8023f5c:	3ebbbd41 	.word	0x3ebbbd41
 8023f60:	af25de2c 	.word	0xaf25de2c
 8023f64:	3f11566a 	.word	0x3f11566a
 8023f68:	16bebd93 	.word	0x16bebd93
 8023f6c:	3f66c16c 	.word	0x3f66c16c
 8023f70:	5555553e 	.word	0x5555553e
 8023f74:	3fc55555 	.word	0x3fc55555
 8023f78:	652b82fe 	.word	0x652b82fe
 8023f7c:	3ff71547 	.word	0x3ff71547
 8023f80:	fee00000 	.word	0xfee00000
 8023f84:	3fe62e42 	.word	0x3fe62e42
 8023f88:	35793c76 	.word	0x35793c76
 8023f8c:	3dea39ef 	.word	0x3dea39ef
 8023f90:	40862e41 	.word	0x40862e41
 8023f94:	7fefffff 	.word	0x7fefffff
 8023f98:	3ff0a2b1 	.word	0x3ff0a2b1
 8023f9c:	080324c0 	.word	0x080324c0
 8023fa0:	080324d0 	.word	0x080324d0
 8023fa4:	3ff00000 	.word	0x3ff00000
 8023fa8:	3fd62e42 	.word	0x3fd62e42
 8023fac:	3e2fffff 	.word	0x3e2fffff
 8023fb0:	080324b0 	.word	0x080324b0
 8023fb4:	00000000 	.word	0x00000000

08023fb8 <__ieee754_log>:
 8023fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fbc:	ec51 0b10 	vmov	r0, r1, d0
 8023fc0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8023fc4:	b087      	sub	sp, #28
 8023fc6:	ee10 3a10 	vmov	r3, s0
 8023fca:	460d      	mov	r5, r1
 8023fcc:	da27      	bge.n	802401e <__ieee754_log+0x66>
 8023fce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8023fd2:	4313      	orrs	r3, r2
 8023fd4:	d10a      	bne.n	8023fec <__ieee754_log+0x34>
 8023fd6:	49cc      	ldr	r1, [pc, #816]	; (8024308 <__ieee754_log+0x350>)
 8023fd8:	2200      	movs	r2, #0
 8023fda:	2300      	movs	r3, #0
 8023fdc:	2000      	movs	r0, #0
 8023fde:	f7dc fc49 	bl	8000874 <__aeabi_ddiv>
 8023fe2:	ec41 0b10 	vmov	d0, r0, r1
 8023fe6:	b007      	add	sp, #28
 8023fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fec:	2900      	cmp	r1, #0
 8023fee:	da07      	bge.n	8024000 <__ieee754_log+0x48>
 8023ff0:	ee10 2a10 	vmov	r2, s0
 8023ff4:	460b      	mov	r3, r1
 8023ff6:	f7dc f95f 	bl	80002b8 <__aeabi_dsub>
 8023ffa:	2200      	movs	r2, #0
 8023ffc:	2300      	movs	r3, #0
 8023ffe:	e7ee      	b.n	8023fde <__ieee754_log+0x26>
 8024000:	4bc2      	ldr	r3, [pc, #776]	; (802430c <__ieee754_log+0x354>)
 8024002:	2200      	movs	r2, #0
 8024004:	f7dc fb0c 	bl	8000620 <__aeabi_dmul>
 8024008:	f06f 0335 	mvn.w	r3, #53	; 0x35
 802400c:	460d      	mov	r5, r1
 802400e:	4ac0      	ldr	r2, [pc, #768]	; (8024310 <__ieee754_log+0x358>)
 8024010:	4295      	cmp	r5, r2
 8024012:	dd06      	ble.n	8024022 <__ieee754_log+0x6a>
 8024014:	4602      	mov	r2, r0
 8024016:	460b      	mov	r3, r1
 8024018:	f7dc f950 	bl	80002bc <__adddf3>
 802401c:	e7e1      	b.n	8023fe2 <__ieee754_log+0x2a>
 802401e:	2300      	movs	r3, #0
 8024020:	e7f5      	b.n	802400e <__ieee754_log+0x56>
 8024022:	152c      	asrs	r4, r5, #20
 8024024:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8024028:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802402c:	441c      	add	r4, r3
 802402e:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8024032:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8024036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802403a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 802403e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8024042:	ea42 0105 	orr.w	r1, r2, r5
 8024046:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802404a:	2200      	movs	r2, #0
 802404c:	4bb1      	ldr	r3, [pc, #708]	; (8024314 <__ieee754_log+0x35c>)
 802404e:	f7dc f933 	bl	80002b8 <__aeabi_dsub>
 8024052:	1cab      	adds	r3, r5, #2
 8024054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024058:	2b02      	cmp	r3, #2
 802405a:	4682      	mov	sl, r0
 802405c:	468b      	mov	fp, r1
 802405e:	f04f 0200 	mov.w	r2, #0
 8024062:	dc5b      	bgt.n	802411c <__ieee754_log+0x164>
 8024064:	2300      	movs	r3, #0
 8024066:	f7dc fd43 	bl	8000af0 <__aeabi_dcmpeq>
 802406a:	b1d0      	cbz	r0, 80240a2 <__ieee754_log+0xea>
 802406c:	2c00      	cmp	r4, #0
 802406e:	f000 8170 	beq.w	8024352 <__ieee754_log+0x39a>
 8024072:	4620      	mov	r0, r4
 8024074:	f7dc fa6e 	bl	8000554 <__aeabi_i2d>
 8024078:	a38f      	add	r3, pc, #572	; (adr r3, 80242b8 <__ieee754_log+0x300>)
 802407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802407e:	4606      	mov	r6, r0
 8024080:	460f      	mov	r7, r1
 8024082:	f7dc facd 	bl	8000620 <__aeabi_dmul>
 8024086:	a38e      	add	r3, pc, #568	; (adr r3, 80242c0 <__ieee754_log+0x308>)
 8024088:	e9d3 2300 	ldrd	r2, r3, [r3]
 802408c:	4604      	mov	r4, r0
 802408e:	460d      	mov	r5, r1
 8024090:	4630      	mov	r0, r6
 8024092:	4639      	mov	r1, r7
 8024094:	f7dc fac4 	bl	8000620 <__aeabi_dmul>
 8024098:	4602      	mov	r2, r0
 802409a:	460b      	mov	r3, r1
 802409c:	4620      	mov	r0, r4
 802409e:	4629      	mov	r1, r5
 80240a0:	e7ba      	b.n	8024018 <__ieee754_log+0x60>
 80240a2:	a389      	add	r3, pc, #548	; (adr r3, 80242c8 <__ieee754_log+0x310>)
 80240a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240a8:	4650      	mov	r0, sl
 80240aa:	4659      	mov	r1, fp
 80240ac:	f7dc fab8 	bl	8000620 <__aeabi_dmul>
 80240b0:	4602      	mov	r2, r0
 80240b2:	460b      	mov	r3, r1
 80240b4:	2000      	movs	r0, #0
 80240b6:	4998      	ldr	r1, [pc, #608]	; (8024318 <__ieee754_log+0x360>)
 80240b8:	f7dc f8fe 	bl	80002b8 <__aeabi_dsub>
 80240bc:	4652      	mov	r2, sl
 80240be:	4606      	mov	r6, r0
 80240c0:	460f      	mov	r7, r1
 80240c2:	465b      	mov	r3, fp
 80240c4:	4650      	mov	r0, sl
 80240c6:	4659      	mov	r1, fp
 80240c8:	f7dc faaa 	bl	8000620 <__aeabi_dmul>
 80240cc:	4602      	mov	r2, r0
 80240ce:	460b      	mov	r3, r1
 80240d0:	4630      	mov	r0, r6
 80240d2:	4639      	mov	r1, r7
 80240d4:	f7dc faa4 	bl	8000620 <__aeabi_dmul>
 80240d8:	4606      	mov	r6, r0
 80240da:	460f      	mov	r7, r1
 80240dc:	b934      	cbnz	r4, 80240ec <__ieee754_log+0x134>
 80240de:	4602      	mov	r2, r0
 80240e0:	460b      	mov	r3, r1
 80240e2:	4650      	mov	r0, sl
 80240e4:	4659      	mov	r1, fp
 80240e6:	f7dc f8e7 	bl	80002b8 <__aeabi_dsub>
 80240ea:	e77a      	b.n	8023fe2 <__ieee754_log+0x2a>
 80240ec:	4620      	mov	r0, r4
 80240ee:	f7dc fa31 	bl	8000554 <__aeabi_i2d>
 80240f2:	a371      	add	r3, pc, #452	; (adr r3, 80242b8 <__ieee754_log+0x300>)
 80240f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240f8:	4680      	mov	r8, r0
 80240fa:	4689      	mov	r9, r1
 80240fc:	f7dc fa90 	bl	8000620 <__aeabi_dmul>
 8024100:	a36f      	add	r3, pc, #444	; (adr r3, 80242c0 <__ieee754_log+0x308>)
 8024102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024106:	4604      	mov	r4, r0
 8024108:	460d      	mov	r5, r1
 802410a:	4640      	mov	r0, r8
 802410c:	4649      	mov	r1, r9
 802410e:	f7dc fa87 	bl	8000620 <__aeabi_dmul>
 8024112:	4602      	mov	r2, r0
 8024114:	460b      	mov	r3, r1
 8024116:	4630      	mov	r0, r6
 8024118:	4639      	mov	r1, r7
 802411a:	e0b2      	b.n	8024282 <__ieee754_log+0x2ca>
 802411c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024120:	f7dc f8cc 	bl	80002bc <__adddf3>
 8024124:	4602      	mov	r2, r0
 8024126:	460b      	mov	r3, r1
 8024128:	4650      	mov	r0, sl
 802412a:	4659      	mov	r1, fp
 802412c:	f7dc fba2 	bl	8000874 <__aeabi_ddiv>
 8024130:	e9cd 0100 	strd	r0, r1, [sp]
 8024134:	4620      	mov	r0, r4
 8024136:	f7dc fa0d 	bl	8000554 <__aeabi_i2d>
 802413a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802413e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024142:	4610      	mov	r0, r2
 8024144:	4619      	mov	r1, r3
 8024146:	f7dc fa6b 	bl	8000620 <__aeabi_dmul>
 802414a:	4602      	mov	r2, r0
 802414c:	460b      	mov	r3, r1
 802414e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024152:	f7dc fa65 	bl	8000620 <__aeabi_dmul>
 8024156:	a35e      	add	r3, pc, #376	; (adr r3, 80242d0 <__ieee754_log+0x318>)
 8024158:	e9d3 2300 	ldrd	r2, r3, [r3]
 802415c:	4606      	mov	r6, r0
 802415e:	460f      	mov	r7, r1
 8024160:	f7dc fa5e 	bl	8000620 <__aeabi_dmul>
 8024164:	a35c      	add	r3, pc, #368	; (adr r3, 80242d8 <__ieee754_log+0x320>)
 8024166:	e9d3 2300 	ldrd	r2, r3, [r3]
 802416a:	f7dc f8a7 	bl	80002bc <__adddf3>
 802416e:	4632      	mov	r2, r6
 8024170:	463b      	mov	r3, r7
 8024172:	f7dc fa55 	bl	8000620 <__aeabi_dmul>
 8024176:	a35a      	add	r3, pc, #360	; (adr r3, 80242e0 <__ieee754_log+0x328>)
 8024178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802417c:	f7dc f89e 	bl	80002bc <__adddf3>
 8024180:	4632      	mov	r2, r6
 8024182:	463b      	mov	r3, r7
 8024184:	f7dc fa4c 	bl	8000620 <__aeabi_dmul>
 8024188:	a357      	add	r3, pc, #348	; (adr r3, 80242e8 <__ieee754_log+0x330>)
 802418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802418e:	f7dc f895 	bl	80002bc <__adddf3>
 8024192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024196:	f7dc fa43 	bl	8000620 <__aeabi_dmul>
 802419a:	a355      	add	r3, pc, #340	; (adr r3, 80242f0 <__ieee754_log+0x338>)
 802419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80241a4:	4630      	mov	r0, r6
 80241a6:	4639      	mov	r1, r7
 80241a8:	f7dc fa3a 	bl	8000620 <__aeabi_dmul>
 80241ac:	a352      	add	r3, pc, #328	; (adr r3, 80242f8 <__ieee754_log+0x340>)
 80241ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241b2:	f7dc f883 	bl	80002bc <__adddf3>
 80241b6:	4632      	mov	r2, r6
 80241b8:	463b      	mov	r3, r7
 80241ba:	f7dc fa31 	bl	8000620 <__aeabi_dmul>
 80241be:	a350      	add	r3, pc, #320	; (adr r3, 8024300 <__ieee754_log+0x348>)
 80241c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241c4:	f7dc f87a 	bl	80002bc <__adddf3>
 80241c8:	4632      	mov	r2, r6
 80241ca:	463b      	mov	r3, r7
 80241cc:	f7dc fa28 	bl	8000620 <__aeabi_dmul>
 80241d0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80241d4:	4602      	mov	r2, r0
 80241d6:	460b      	mov	r3, r1
 80241d8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80241dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80241e0:	f7dc f86c 	bl	80002bc <__adddf3>
 80241e4:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80241e8:	3551      	adds	r5, #81	; 0x51
 80241ea:	ea45 0508 	orr.w	r5, r5, r8
 80241ee:	2d00      	cmp	r5, #0
 80241f0:	4606      	mov	r6, r0
 80241f2:	460f      	mov	r7, r1
 80241f4:	dd50      	ble.n	8024298 <__ieee754_log+0x2e0>
 80241f6:	2200      	movs	r2, #0
 80241f8:	4b47      	ldr	r3, [pc, #284]	; (8024318 <__ieee754_log+0x360>)
 80241fa:	4650      	mov	r0, sl
 80241fc:	4659      	mov	r1, fp
 80241fe:	f7dc fa0f 	bl	8000620 <__aeabi_dmul>
 8024202:	4652      	mov	r2, sl
 8024204:	465b      	mov	r3, fp
 8024206:	f7dc fa0b 	bl	8000620 <__aeabi_dmul>
 802420a:	4680      	mov	r8, r0
 802420c:	4689      	mov	r9, r1
 802420e:	b994      	cbnz	r4, 8024236 <__ieee754_log+0x27e>
 8024210:	4602      	mov	r2, r0
 8024212:	460b      	mov	r3, r1
 8024214:	4630      	mov	r0, r6
 8024216:	4639      	mov	r1, r7
 8024218:	f7dc f850 	bl	80002bc <__adddf3>
 802421c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024220:	f7dc f9fe 	bl	8000620 <__aeabi_dmul>
 8024224:	4602      	mov	r2, r0
 8024226:	460b      	mov	r3, r1
 8024228:	4640      	mov	r0, r8
 802422a:	4649      	mov	r1, r9
 802422c:	f7dc f844 	bl	80002b8 <__aeabi_dsub>
 8024230:	4602      	mov	r2, r0
 8024232:	460b      	mov	r3, r1
 8024234:	e755      	b.n	80240e2 <__ieee754_log+0x12a>
 8024236:	a320      	add	r3, pc, #128	; (adr r3, 80242b8 <__ieee754_log+0x300>)
 8024238:	e9d3 2300 	ldrd	r2, r3, [r3]
 802423c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024240:	f7dc f9ee 	bl	8000620 <__aeabi_dmul>
 8024244:	4642      	mov	r2, r8
 8024246:	464b      	mov	r3, r9
 8024248:	4604      	mov	r4, r0
 802424a:	460d      	mov	r5, r1
 802424c:	4630      	mov	r0, r6
 802424e:	4639      	mov	r1, r7
 8024250:	f7dc f834 	bl	80002bc <__adddf3>
 8024254:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024258:	f7dc f9e2 	bl	8000620 <__aeabi_dmul>
 802425c:	a318      	add	r3, pc, #96	; (adr r3, 80242c0 <__ieee754_log+0x308>)
 802425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024262:	4606      	mov	r6, r0
 8024264:	460f      	mov	r7, r1
 8024266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802426a:	f7dc f9d9 	bl	8000620 <__aeabi_dmul>
 802426e:	4602      	mov	r2, r0
 8024270:	460b      	mov	r3, r1
 8024272:	4630      	mov	r0, r6
 8024274:	4639      	mov	r1, r7
 8024276:	f7dc f821 	bl	80002bc <__adddf3>
 802427a:	4602      	mov	r2, r0
 802427c:	460b      	mov	r3, r1
 802427e:	4640      	mov	r0, r8
 8024280:	4649      	mov	r1, r9
 8024282:	f7dc f819 	bl	80002b8 <__aeabi_dsub>
 8024286:	4652      	mov	r2, sl
 8024288:	465b      	mov	r3, fp
 802428a:	f7dc f815 	bl	80002b8 <__aeabi_dsub>
 802428e:	4602      	mov	r2, r0
 8024290:	460b      	mov	r3, r1
 8024292:	4620      	mov	r0, r4
 8024294:	4629      	mov	r1, r5
 8024296:	e726      	b.n	80240e6 <__ieee754_log+0x12e>
 8024298:	2c00      	cmp	r4, #0
 802429a:	d13f      	bne.n	802431c <__ieee754_log+0x364>
 802429c:	4602      	mov	r2, r0
 802429e:	460b      	mov	r3, r1
 80242a0:	4650      	mov	r0, sl
 80242a2:	4659      	mov	r1, fp
 80242a4:	f7dc f808 	bl	80002b8 <__aeabi_dsub>
 80242a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80242ac:	f7dc f9b8 	bl	8000620 <__aeabi_dmul>
 80242b0:	e7be      	b.n	8024230 <__ieee754_log+0x278>
 80242b2:	bf00      	nop
 80242b4:	f3af 8000 	nop.w
 80242b8:	fee00000 	.word	0xfee00000
 80242bc:	3fe62e42 	.word	0x3fe62e42
 80242c0:	35793c76 	.word	0x35793c76
 80242c4:	3dea39ef 	.word	0x3dea39ef
 80242c8:	55555555 	.word	0x55555555
 80242cc:	3fd55555 	.word	0x3fd55555
 80242d0:	df3e5244 	.word	0xdf3e5244
 80242d4:	3fc2f112 	.word	0x3fc2f112
 80242d8:	96cb03de 	.word	0x96cb03de
 80242dc:	3fc74664 	.word	0x3fc74664
 80242e0:	94229359 	.word	0x94229359
 80242e4:	3fd24924 	.word	0x3fd24924
 80242e8:	55555593 	.word	0x55555593
 80242ec:	3fe55555 	.word	0x3fe55555
 80242f0:	d078c69f 	.word	0xd078c69f
 80242f4:	3fc39a09 	.word	0x3fc39a09
 80242f8:	1d8e78af 	.word	0x1d8e78af
 80242fc:	3fcc71c5 	.word	0x3fcc71c5
 8024300:	9997fa04 	.word	0x9997fa04
 8024304:	3fd99999 	.word	0x3fd99999
 8024308:	c3500000 	.word	0xc3500000
 802430c:	43500000 	.word	0x43500000
 8024310:	7fefffff 	.word	0x7fefffff
 8024314:	3ff00000 	.word	0x3ff00000
 8024318:	3fe00000 	.word	0x3fe00000
 802431c:	a30e      	add	r3, pc, #56	; (adr r3, 8024358 <__ieee754_log+0x3a0>)
 802431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024326:	f7dc f97b 	bl	8000620 <__aeabi_dmul>
 802432a:	4632      	mov	r2, r6
 802432c:	463b      	mov	r3, r7
 802432e:	4604      	mov	r4, r0
 8024330:	460d      	mov	r5, r1
 8024332:	4650      	mov	r0, sl
 8024334:	4659      	mov	r1, fp
 8024336:	f7db ffbf 	bl	80002b8 <__aeabi_dsub>
 802433a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802433e:	f7dc f96f 	bl	8000620 <__aeabi_dmul>
 8024342:	a307      	add	r3, pc, #28	; (adr r3, 8024360 <__ieee754_log+0x3a8>)
 8024344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024348:	4606      	mov	r6, r0
 802434a:	460f      	mov	r7, r1
 802434c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024350:	e6dd      	b.n	802410e <__ieee754_log+0x156>
 8024352:	2000      	movs	r0, #0
 8024354:	2100      	movs	r1, #0
 8024356:	e644      	b.n	8023fe2 <__ieee754_log+0x2a>
 8024358:	fee00000 	.word	0xfee00000
 802435c:	3fe62e42 	.word	0x3fe62e42
 8024360:	35793c76 	.word	0x35793c76
 8024364:	3dea39ef 	.word	0x3dea39ef

08024368 <__ieee754_pow>:
 8024368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802436c:	b091      	sub	sp, #68	; 0x44
 802436e:	ed8d 1b00 	vstr	d1, [sp]
 8024372:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8024376:	ec57 6b10 	vmov	r6, r7, d0
 802437a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802437e:	ea58 0302 	orrs.w	r3, r8, r2
 8024382:	ee10 aa10 	vmov	sl, s0
 8024386:	463d      	mov	r5, r7
 8024388:	f000 84bd 	beq.w	8024d06 <__ieee754_pow+0x99e>
 802438c:	4b78      	ldr	r3, [pc, #480]	; (8024570 <__ieee754_pow+0x208>)
 802438e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8024392:	429c      	cmp	r4, r3
 8024394:	dc09      	bgt.n	80243aa <__ieee754_pow+0x42>
 8024396:	d103      	bne.n	80243a0 <__ieee754_pow+0x38>
 8024398:	b93e      	cbnz	r6, 80243aa <__ieee754_pow+0x42>
 802439a:	45a0      	cmp	r8, r4
 802439c:	dc0d      	bgt.n	80243ba <__ieee754_pow+0x52>
 802439e:	e001      	b.n	80243a4 <__ieee754_pow+0x3c>
 80243a0:	4598      	cmp	r8, r3
 80243a2:	dc02      	bgt.n	80243aa <__ieee754_pow+0x42>
 80243a4:	4598      	cmp	r8, r3
 80243a6:	d10e      	bne.n	80243c6 <__ieee754_pow+0x5e>
 80243a8:	b16a      	cbz	r2, 80243c6 <__ieee754_pow+0x5e>
 80243aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80243ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80243b2:	ea54 030a 	orrs.w	r3, r4, sl
 80243b6:	f000 84a6 	beq.w	8024d06 <__ieee754_pow+0x99e>
 80243ba:	486e      	ldr	r0, [pc, #440]	; (8024574 <__ieee754_pow+0x20c>)
 80243bc:	b011      	add	sp, #68	; 0x44
 80243be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243c2:	f000 bded 	b.w	8024fa0 <nan>
 80243c6:	2d00      	cmp	r5, #0
 80243c8:	da53      	bge.n	8024472 <__ieee754_pow+0x10a>
 80243ca:	4b6b      	ldr	r3, [pc, #428]	; (8024578 <__ieee754_pow+0x210>)
 80243cc:	4598      	cmp	r8, r3
 80243ce:	dc4d      	bgt.n	802446c <__ieee754_pow+0x104>
 80243d0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80243d4:	4598      	cmp	r8, r3
 80243d6:	dd4c      	ble.n	8024472 <__ieee754_pow+0x10a>
 80243d8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80243dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80243e0:	2b14      	cmp	r3, #20
 80243e2:	dd26      	ble.n	8024432 <__ieee754_pow+0xca>
 80243e4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80243e8:	fa22 f103 	lsr.w	r1, r2, r3
 80243ec:	fa01 f303 	lsl.w	r3, r1, r3
 80243f0:	429a      	cmp	r2, r3
 80243f2:	d13e      	bne.n	8024472 <__ieee754_pow+0x10a>
 80243f4:	f001 0101 	and.w	r1, r1, #1
 80243f8:	f1c1 0b02 	rsb	fp, r1, #2
 80243fc:	2a00      	cmp	r2, #0
 80243fe:	d15b      	bne.n	80244b8 <__ieee754_pow+0x150>
 8024400:	4b5b      	ldr	r3, [pc, #364]	; (8024570 <__ieee754_pow+0x208>)
 8024402:	4598      	cmp	r8, r3
 8024404:	d124      	bne.n	8024450 <__ieee754_pow+0xe8>
 8024406:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802440a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802440e:	ea53 030a 	orrs.w	r3, r3, sl
 8024412:	f000 8478 	beq.w	8024d06 <__ieee754_pow+0x99e>
 8024416:	4b59      	ldr	r3, [pc, #356]	; (802457c <__ieee754_pow+0x214>)
 8024418:	429c      	cmp	r4, r3
 802441a:	dd2d      	ble.n	8024478 <__ieee754_pow+0x110>
 802441c:	f1b9 0f00 	cmp.w	r9, #0
 8024420:	f280 8475 	bge.w	8024d0e <__ieee754_pow+0x9a6>
 8024424:	2000      	movs	r0, #0
 8024426:	2100      	movs	r1, #0
 8024428:	ec41 0b10 	vmov	d0, r0, r1
 802442c:	b011      	add	sp, #68	; 0x44
 802442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024432:	2a00      	cmp	r2, #0
 8024434:	d13e      	bne.n	80244b4 <__ieee754_pow+0x14c>
 8024436:	f1c3 0314 	rsb	r3, r3, #20
 802443a:	fa48 f103 	asr.w	r1, r8, r3
 802443e:	fa01 f303 	lsl.w	r3, r1, r3
 8024442:	4598      	cmp	r8, r3
 8024444:	f040 846b 	bne.w	8024d1e <__ieee754_pow+0x9b6>
 8024448:	f001 0101 	and.w	r1, r1, #1
 802444c:	f1c1 0b02 	rsb	fp, r1, #2
 8024450:	4b4b      	ldr	r3, [pc, #300]	; (8024580 <__ieee754_pow+0x218>)
 8024452:	4598      	cmp	r8, r3
 8024454:	d118      	bne.n	8024488 <__ieee754_pow+0x120>
 8024456:	f1b9 0f00 	cmp.w	r9, #0
 802445a:	f280 845c 	bge.w	8024d16 <__ieee754_pow+0x9ae>
 802445e:	4948      	ldr	r1, [pc, #288]	; (8024580 <__ieee754_pow+0x218>)
 8024460:	4632      	mov	r2, r6
 8024462:	463b      	mov	r3, r7
 8024464:	2000      	movs	r0, #0
 8024466:	f7dc fa05 	bl	8000874 <__aeabi_ddiv>
 802446a:	e7dd      	b.n	8024428 <__ieee754_pow+0xc0>
 802446c:	f04f 0b02 	mov.w	fp, #2
 8024470:	e7c4      	b.n	80243fc <__ieee754_pow+0x94>
 8024472:	f04f 0b00 	mov.w	fp, #0
 8024476:	e7c1      	b.n	80243fc <__ieee754_pow+0x94>
 8024478:	f1b9 0f00 	cmp.w	r9, #0
 802447c:	dad2      	bge.n	8024424 <__ieee754_pow+0xbc>
 802447e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8024482:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024486:	e7cf      	b.n	8024428 <__ieee754_pow+0xc0>
 8024488:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802448c:	d106      	bne.n	802449c <__ieee754_pow+0x134>
 802448e:	4632      	mov	r2, r6
 8024490:	463b      	mov	r3, r7
 8024492:	4610      	mov	r0, r2
 8024494:	4619      	mov	r1, r3
 8024496:	f7dc f8c3 	bl	8000620 <__aeabi_dmul>
 802449a:	e7c5      	b.n	8024428 <__ieee754_pow+0xc0>
 802449c:	4b39      	ldr	r3, [pc, #228]	; (8024584 <__ieee754_pow+0x21c>)
 802449e:	4599      	cmp	r9, r3
 80244a0:	d10a      	bne.n	80244b8 <__ieee754_pow+0x150>
 80244a2:	2d00      	cmp	r5, #0
 80244a4:	db08      	blt.n	80244b8 <__ieee754_pow+0x150>
 80244a6:	ec47 6b10 	vmov	d0, r6, r7
 80244aa:	b011      	add	sp, #68	; 0x44
 80244ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244b0:	f000 bc6c 	b.w	8024d8c <__ieee754_sqrt>
 80244b4:	f04f 0b00 	mov.w	fp, #0
 80244b8:	ec47 6b10 	vmov	d0, r6, r7
 80244bc:	f000 fd5d 	bl	8024f7a <fabs>
 80244c0:	ec51 0b10 	vmov	r0, r1, d0
 80244c4:	f1ba 0f00 	cmp.w	sl, #0
 80244c8:	d127      	bne.n	802451a <__ieee754_pow+0x1b2>
 80244ca:	b124      	cbz	r4, 80244d6 <__ieee754_pow+0x16e>
 80244cc:	4b2c      	ldr	r3, [pc, #176]	; (8024580 <__ieee754_pow+0x218>)
 80244ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80244d2:	429a      	cmp	r2, r3
 80244d4:	d121      	bne.n	802451a <__ieee754_pow+0x1b2>
 80244d6:	f1b9 0f00 	cmp.w	r9, #0
 80244da:	da05      	bge.n	80244e8 <__ieee754_pow+0x180>
 80244dc:	4602      	mov	r2, r0
 80244de:	460b      	mov	r3, r1
 80244e0:	2000      	movs	r0, #0
 80244e2:	4927      	ldr	r1, [pc, #156]	; (8024580 <__ieee754_pow+0x218>)
 80244e4:	f7dc f9c6 	bl	8000874 <__aeabi_ddiv>
 80244e8:	2d00      	cmp	r5, #0
 80244ea:	da9d      	bge.n	8024428 <__ieee754_pow+0xc0>
 80244ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80244f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80244f4:	ea54 030b 	orrs.w	r3, r4, fp
 80244f8:	d108      	bne.n	802450c <__ieee754_pow+0x1a4>
 80244fa:	4602      	mov	r2, r0
 80244fc:	460b      	mov	r3, r1
 80244fe:	4610      	mov	r0, r2
 8024500:	4619      	mov	r1, r3
 8024502:	f7db fed9 	bl	80002b8 <__aeabi_dsub>
 8024506:	4602      	mov	r2, r0
 8024508:	460b      	mov	r3, r1
 802450a:	e7ac      	b.n	8024466 <__ieee754_pow+0xfe>
 802450c:	f1bb 0f01 	cmp.w	fp, #1
 8024510:	d18a      	bne.n	8024428 <__ieee754_pow+0xc0>
 8024512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024516:	4619      	mov	r1, r3
 8024518:	e786      	b.n	8024428 <__ieee754_pow+0xc0>
 802451a:	0fed      	lsrs	r5, r5, #31
 802451c:	1e6b      	subs	r3, r5, #1
 802451e:	930d      	str	r3, [sp, #52]	; 0x34
 8024520:	ea5b 0303 	orrs.w	r3, fp, r3
 8024524:	d102      	bne.n	802452c <__ieee754_pow+0x1c4>
 8024526:	4632      	mov	r2, r6
 8024528:	463b      	mov	r3, r7
 802452a:	e7e8      	b.n	80244fe <__ieee754_pow+0x196>
 802452c:	4b16      	ldr	r3, [pc, #88]	; (8024588 <__ieee754_pow+0x220>)
 802452e:	4598      	cmp	r8, r3
 8024530:	f340 80fe 	ble.w	8024730 <__ieee754_pow+0x3c8>
 8024534:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8024538:	4598      	cmp	r8, r3
 802453a:	dd0a      	ble.n	8024552 <__ieee754_pow+0x1ea>
 802453c:	4b0f      	ldr	r3, [pc, #60]	; (802457c <__ieee754_pow+0x214>)
 802453e:	429c      	cmp	r4, r3
 8024540:	dc0d      	bgt.n	802455e <__ieee754_pow+0x1f6>
 8024542:	f1b9 0f00 	cmp.w	r9, #0
 8024546:	f6bf af6d 	bge.w	8024424 <__ieee754_pow+0xbc>
 802454a:	a307      	add	r3, pc, #28	; (adr r3, 8024568 <__ieee754_pow+0x200>)
 802454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024550:	e79f      	b.n	8024492 <__ieee754_pow+0x12a>
 8024552:	4b0e      	ldr	r3, [pc, #56]	; (802458c <__ieee754_pow+0x224>)
 8024554:	429c      	cmp	r4, r3
 8024556:	ddf4      	ble.n	8024542 <__ieee754_pow+0x1da>
 8024558:	4b09      	ldr	r3, [pc, #36]	; (8024580 <__ieee754_pow+0x218>)
 802455a:	429c      	cmp	r4, r3
 802455c:	dd18      	ble.n	8024590 <__ieee754_pow+0x228>
 802455e:	f1b9 0f00 	cmp.w	r9, #0
 8024562:	dcf2      	bgt.n	802454a <__ieee754_pow+0x1e2>
 8024564:	e75e      	b.n	8024424 <__ieee754_pow+0xbc>
 8024566:	bf00      	nop
 8024568:	8800759c 	.word	0x8800759c
 802456c:	7e37e43c 	.word	0x7e37e43c
 8024570:	7ff00000 	.word	0x7ff00000
 8024574:	08032149 	.word	0x08032149
 8024578:	433fffff 	.word	0x433fffff
 802457c:	3fefffff 	.word	0x3fefffff
 8024580:	3ff00000 	.word	0x3ff00000
 8024584:	3fe00000 	.word	0x3fe00000
 8024588:	41e00000 	.word	0x41e00000
 802458c:	3feffffe 	.word	0x3feffffe
 8024590:	2200      	movs	r2, #0
 8024592:	4b63      	ldr	r3, [pc, #396]	; (8024720 <__ieee754_pow+0x3b8>)
 8024594:	f7db fe90 	bl	80002b8 <__aeabi_dsub>
 8024598:	a355      	add	r3, pc, #340	; (adr r3, 80246f0 <__ieee754_pow+0x388>)
 802459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802459e:	4604      	mov	r4, r0
 80245a0:	460d      	mov	r5, r1
 80245a2:	f7dc f83d 	bl	8000620 <__aeabi_dmul>
 80245a6:	a354      	add	r3, pc, #336	; (adr r3, 80246f8 <__ieee754_pow+0x390>)
 80245a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245ac:	4606      	mov	r6, r0
 80245ae:	460f      	mov	r7, r1
 80245b0:	4620      	mov	r0, r4
 80245b2:	4629      	mov	r1, r5
 80245b4:	f7dc f834 	bl	8000620 <__aeabi_dmul>
 80245b8:	2200      	movs	r2, #0
 80245ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80245be:	4b59      	ldr	r3, [pc, #356]	; (8024724 <__ieee754_pow+0x3bc>)
 80245c0:	4620      	mov	r0, r4
 80245c2:	4629      	mov	r1, r5
 80245c4:	f7dc f82c 	bl	8000620 <__aeabi_dmul>
 80245c8:	4602      	mov	r2, r0
 80245ca:	460b      	mov	r3, r1
 80245cc:	a14c      	add	r1, pc, #304	; (adr r1, 8024700 <__ieee754_pow+0x398>)
 80245ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80245d2:	f7db fe71 	bl	80002b8 <__aeabi_dsub>
 80245d6:	4622      	mov	r2, r4
 80245d8:	462b      	mov	r3, r5
 80245da:	f7dc f821 	bl	8000620 <__aeabi_dmul>
 80245de:	4602      	mov	r2, r0
 80245e0:	460b      	mov	r3, r1
 80245e2:	2000      	movs	r0, #0
 80245e4:	4950      	ldr	r1, [pc, #320]	; (8024728 <__ieee754_pow+0x3c0>)
 80245e6:	f7db fe67 	bl	80002b8 <__aeabi_dsub>
 80245ea:	4622      	mov	r2, r4
 80245ec:	462b      	mov	r3, r5
 80245ee:	4680      	mov	r8, r0
 80245f0:	4689      	mov	r9, r1
 80245f2:	4620      	mov	r0, r4
 80245f4:	4629      	mov	r1, r5
 80245f6:	f7dc f813 	bl	8000620 <__aeabi_dmul>
 80245fa:	4602      	mov	r2, r0
 80245fc:	460b      	mov	r3, r1
 80245fe:	4640      	mov	r0, r8
 8024600:	4649      	mov	r1, r9
 8024602:	f7dc f80d 	bl	8000620 <__aeabi_dmul>
 8024606:	a340      	add	r3, pc, #256	; (adr r3, 8024708 <__ieee754_pow+0x3a0>)
 8024608:	e9d3 2300 	ldrd	r2, r3, [r3]
 802460c:	f7dc f808 	bl	8000620 <__aeabi_dmul>
 8024610:	4602      	mov	r2, r0
 8024612:	460b      	mov	r3, r1
 8024614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024618:	f7db fe4e 	bl	80002b8 <__aeabi_dsub>
 802461c:	4602      	mov	r2, r0
 802461e:	460b      	mov	r3, r1
 8024620:	4604      	mov	r4, r0
 8024622:	460d      	mov	r5, r1
 8024624:	4630      	mov	r0, r6
 8024626:	4639      	mov	r1, r7
 8024628:	f7db fe48 	bl	80002bc <__adddf3>
 802462c:	2000      	movs	r0, #0
 802462e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024632:	4632      	mov	r2, r6
 8024634:	463b      	mov	r3, r7
 8024636:	f7db fe3f 	bl	80002b8 <__aeabi_dsub>
 802463a:	4602      	mov	r2, r0
 802463c:	460b      	mov	r3, r1
 802463e:	4620      	mov	r0, r4
 8024640:	4629      	mov	r1, r5
 8024642:	f7db fe39 	bl	80002b8 <__aeabi_dsub>
 8024646:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024648:	f10b 33ff 	add.w	r3, fp, #4294967295
 802464c:	4313      	orrs	r3, r2
 802464e:	4606      	mov	r6, r0
 8024650:	460f      	mov	r7, r1
 8024652:	f040 81eb 	bne.w	8024a2c <__ieee754_pow+0x6c4>
 8024656:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8024710 <__ieee754_pow+0x3a8>
 802465a:	e9dd 4500 	ldrd	r4, r5, [sp]
 802465e:	2400      	movs	r4, #0
 8024660:	4622      	mov	r2, r4
 8024662:	462b      	mov	r3, r5
 8024664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024668:	ed8d 7b02 	vstr	d7, [sp, #8]
 802466c:	f7db fe24 	bl	80002b8 <__aeabi_dsub>
 8024670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024674:	f7db ffd4 	bl	8000620 <__aeabi_dmul>
 8024678:	e9dd 2300 	ldrd	r2, r3, [sp]
 802467c:	4680      	mov	r8, r0
 802467e:	4689      	mov	r9, r1
 8024680:	4630      	mov	r0, r6
 8024682:	4639      	mov	r1, r7
 8024684:	f7db ffcc 	bl	8000620 <__aeabi_dmul>
 8024688:	4602      	mov	r2, r0
 802468a:	460b      	mov	r3, r1
 802468c:	4640      	mov	r0, r8
 802468e:	4649      	mov	r1, r9
 8024690:	f7db fe14 	bl	80002bc <__adddf3>
 8024694:	4622      	mov	r2, r4
 8024696:	462b      	mov	r3, r5
 8024698:	4680      	mov	r8, r0
 802469a:	4689      	mov	r9, r1
 802469c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80246a0:	f7db ffbe 	bl	8000620 <__aeabi_dmul>
 80246a4:	460b      	mov	r3, r1
 80246a6:	4604      	mov	r4, r0
 80246a8:	460d      	mov	r5, r1
 80246aa:	4602      	mov	r2, r0
 80246ac:	4649      	mov	r1, r9
 80246ae:	4640      	mov	r0, r8
 80246b0:	e9cd 4500 	strd	r4, r5, [sp]
 80246b4:	f7db fe02 	bl	80002bc <__adddf3>
 80246b8:	4b1c      	ldr	r3, [pc, #112]	; (802472c <__ieee754_pow+0x3c4>)
 80246ba:	4299      	cmp	r1, r3
 80246bc:	4606      	mov	r6, r0
 80246be:	460f      	mov	r7, r1
 80246c0:	468b      	mov	fp, r1
 80246c2:	f340 82f7 	ble.w	8024cb4 <__ieee754_pow+0x94c>
 80246c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80246ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80246ce:	4303      	orrs	r3, r0
 80246d0:	f000 81ea 	beq.w	8024aa8 <__ieee754_pow+0x740>
 80246d4:	a310      	add	r3, pc, #64	; (adr r3, 8024718 <__ieee754_pow+0x3b0>)
 80246d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80246de:	f7db ff9f 	bl	8000620 <__aeabi_dmul>
 80246e2:	a30d      	add	r3, pc, #52	; (adr r3, 8024718 <__ieee754_pow+0x3b0>)
 80246e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246e8:	e6d5      	b.n	8024496 <__ieee754_pow+0x12e>
 80246ea:	bf00      	nop
 80246ec:	f3af 8000 	nop.w
 80246f0:	60000000 	.word	0x60000000
 80246f4:	3ff71547 	.word	0x3ff71547
 80246f8:	f85ddf44 	.word	0xf85ddf44
 80246fc:	3e54ae0b 	.word	0x3e54ae0b
 8024700:	55555555 	.word	0x55555555
 8024704:	3fd55555 	.word	0x3fd55555
 8024708:	652b82fe 	.word	0x652b82fe
 802470c:	3ff71547 	.word	0x3ff71547
 8024710:	00000000 	.word	0x00000000
 8024714:	bff00000 	.word	0xbff00000
 8024718:	8800759c 	.word	0x8800759c
 802471c:	7e37e43c 	.word	0x7e37e43c
 8024720:	3ff00000 	.word	0x3ff00000
 8024724:	3fd00000 	.word	0x3fd00000
 8024728:	3fe00000 	.word	0x3fe00000
 802472c:	408fffff 	.word	0x408fffff
 8024730:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8024734:	f04f 0200 	mov.w	r2, #0
 8024738:	da05      	bge.n	8024746 <__ieee754_pow+0x3de>
 802473a:	4bd3      	ldr	r3, [pc, #844]	; (8024a88 <__ieee754_pow+0x720>)
 802473c:	f7db ff70 	bl	8000620 <__aeabi_dmul>
 8024740:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8024744:	460c      	mov	r4, r1
 8024746:	1523      	asrs	r3, r4, #20
 8024748:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802474c:	4413      	add	r3, r2
 802474e:	9307      	str	r3, [sp, #28]
 8024750:	4bce      	ldr	r3, [pc, #824]	; (8024a8c <__ieee754_pow+0x724>)
 8024752:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8024756:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802475a:	429c      	cmp	r4, r3
 802475c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8024760:	dd08      	ble.n	8024774 <__ieee754_pow+0x40c>
 8024762:	4bcb      	ldr	r3, [pc, #812]	; (8024a90 <__ieee754_pow+0x728>)
 8024764:	429c      	cmp	r4, r3
 8024766:	f340 815e 	ble.w	8024a26 <__ieee754_pow+0x6be>
 802476a:	9b07      	ldr	r3, [sp, #28]
 802476c:	3301      	adds	r3, #1
 802476e:	9307      	str	r3, [sp, #28]
 8024770:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8024774:	f04f 0a00 	mov.w	sl, #0
 8024778:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802477c:	930c      	str	r3, [sp, #48]	; 0x30
 802477e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024780:	4bc4      	ldr	r3, [pc, #784]	; (8024a94 <__ieee754_pow+0x72c>)
 8024782:	4413      	add	r3, r2
 8024784:	ed93 7b00 	vldr	d7, [r3]
 8024788:	4629      	mov	r1, r5
 802478a:	ec53 2b17 	vmov	r2, r3, d7
 802478e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8024792:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024796:	f7db fd8f 	bl	80002b8 <__aeabi_dsub>
 802479a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802479e:	4606      	mov	r6, r0
 80247a0:	460f      	mov	r7, r1
 80247a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80247a6:	f7db fd89 	bl	80002bc <__adddf3>
 80247aa:	4602      	mov	r2, r0
 80247ac:	460b      	mov	r3, r1
 80247ae:	2000      	movs	r0, #0
 80247b0:	49b9      	ldr	r1, [pc, #740]	; (8024a98 <__ieee754_pow+0x730>)
 80247b2:	f7dc f85f 	bl	8000874 <__aeabi_ddiv>
 80247b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80247ba:	4602      	mov	r2, r0
 80247bc:	460b      	mov	r3, r1
 80247be:	4630      	mov	r0, r6
 80247c0:	4639      	mov	r1, r7
 80247c2:	f7db ff2d 	bl	8000620 <__aeabi_dmul>
 80247c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80247ca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80247ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80247d2:	2300      	movs	r3, #0
 80247d4:	9302      	str	r3, [sp, #8]
 80247d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80247da:	106d      	asrs	r5, r5, #1
 80247dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80247e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80247e4:	2200      	movs	r2, #0
 80247e6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80247ea:	4640      	mov	r0, r8
 80247ec:	4649      	mov	r1, r9
 80247ee:	4614      	mov	r4, r2
 80247f0:	461d      	mov	r5, r3
 80247f2:	f7db ff15 	bl	8000620 <__aeabi_dmul>
 80247f6:	4602      	mov	r2, r0
 80247f8:	460b      	mov	r3, r1
 80247fa:	4630      	mov	r0, r6
 80247fc:	4639      	mov	r1, r7
 80247fe:	f7db fd5b 	bl	80002b8 <__aeabi_dsub>
 8024802:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024806:	4606      	mov	r6, r0
 8024808:	460f      	mov	r7, r1
 802480a:	4620      	mov	r0, r4
 802480c:	4629      	mov	r1, r5
 802480e:	f7db fd53 	bl	80002b8 <__aeabi_dsub>
 8024812:	4602      	mov	r2, r0
 8024814:	460b      	mov	r3, r1
 8024816:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802481a:	f7db fd4d 	bl	80002b8 <__aeabi_dsub>
 802481e:	4642      	mov	r2, r8
 8024820:	464b      	mov	r3, r9
 8024822:	f7db fefd 	bl	8000620 <__aeabi_dmul>
 8024826:	4602      	mov	r2, r0
 8024828:	460b      	mov	r3, r1
 802482a:	4630      	mov	r0, r6
 802482c:	4639      	mov	r1, r7
 802482e:	f7db fd43 	bl	80002b8 <__aeabi_dsub>
 8024832:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8024836:	f7db fef3 	bl	8000620 <__aeabi_dmul>
 802483a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802483e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024842:	4610      	mov	r0, r2
 8024844:	4619      	mov	r1, r3
 8024846:	f7db feeb 	bl	8000620 <__aeabi_dmul>
 802484a:	a37b      	add	r3, pc, #492	; (adr r3, 8024a38 <__ieee754_pow+0x6d0>)
 802484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024850:	4604      	mov	r4, r0
 8024852:	460d      	mov	r5, r1
 8024854:	f7db fee4 	bl	8000620 <__aeabi_dmul>
 8024858:	a379      	add	r3, pc, #484	; (adr r3, 8024a40 <__ieee754_pow+0x6d8>)
 802485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802485e:	f7db fd2d 	bl	80002bc <__adddf3>
 8024862:	4622      	mov	r2, r4
 8024864:	462b      	mov	r3, r5
 8024866:	f7db fedb 	bl	8000620 <__aeabi_dmul>
 802486a:	a377      	add	r3, pc, #476	; (adr r3, 8024a48 <__ieee754_pow+0x6e0>)
 802486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024870:	f7db fd24 	bl	80002bc <__adddf3>
 8024874:	4622      	mov	r2, r4
 8024876:	462b      	mov	r3, r5
 8024878:	f7db fed2 	bl	8000620 <__aeabi_dmul>
 802487c:	a374      	add	r3, pc, #464	; (adr r3, 8024a50 <__ieee754_pow+0x6e8>)
 802487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024882:	f7db fd1b 	bl	80002bc <__adddf3>
 8024886:	4622      	mov	r2, r4
 8024888:	462b      	mov	r3, r5
 802488a:	f7db fec9 	bl	8000620 <__aeabi_dmul>
 802488e:	a372      	add	r3, pc, #456	; (adr r3, 8024a58 <__ieee754_pow+0x6f0>)
 8024890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024894:	f7db fd12 	bl	80002bc <__adddf3>
 8024898:	4622      	mov	r2, r4
 802489a:	462b      	mov	r3, r5
 802489c:	f7db fec0 	bl	8000620 <__aeabi_dmul>
 80248a0:	a36f      	add	r3, pc, #444	; (adr r3, 8024a60 <__ieee754_pow+0x6f8>)
 80248a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248a6:	f7db fd09 	bl	80002bc <__adddf3>
 80248aa:	4622      	mov	r2, r4
 80248ac:	4606      	mov	r6, r0
 80248ae:	460f      	mov	r7, r1
 80248b0:	462b      	mov	r3, r5
 80248b2:	4620      	mov	r0, r4
 80248b4:	4629      	mov	r1, r5
 80248b6:	f7db feb3 	bl	8000620 <__aeabi_dmul>
 80248ba:	4602      	mov	r2, r0
 80248bc:	460b      	mov	r3, r1
 80248be:	4630      	mov	r0, r6
 80248c0:	4639      	mov	r1, r7
 80248c2:	f7db fead 	bl	8000620 <__aeabi_dmul>
 80248c6:	4642      	mov	r2, r8
 80248c8:	4604      	mov	r4, r0
 80248ca:	460d      	mov	r5, r1
 80248cc:	464b      	mov	r3, r9
 80248ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80248d2:	f7db fcf3 	bl	80002bc <__adddf3>
 80248d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80248da:	f7db fea1 	bl	8000620 <__aeabi_dmul>
 80248de:	4622      	mov	r2, r4
 80248e0:	462b      	mov	r3, r5
 80248e2:	f7db fceb 	bl	80002bc <__adddf3>
 80248e6:	4642      	mov	r2, r8
 80248e8:	4606      	mov	r6, r0
 80248ea:	460f      	mov	r7, r1
 80248ec:	464b      	mov	r3, r9
 80248ee:	4640      	mov	r0, r8
 80248f0:	4649      	mov	r1, r9
 80248f2:	f7db fe95 	bl	8000620 <__aeabi_dmul>
 80248f6:	2200      	movs	r2, #0
 80248f8:	4b68      	ldr	r3, [pc, #416]	; (8024a9c <__ieee754_pow+0x734>)
 80248fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80248fe:	f7db fcdd 	bl	80002bc <__adddf3>
 8024902:	4632      	mov	r2, r6
 8024904:	463b      	mov	r3, r7
 8024906:	f7db fcd9 	bl	80002bc <__adddf3>
 802490a:	9802      	ldr	r0, [sp, #8]
 802490c:	460d      	mov	r5, r1
 802490e:	4604      	mov	r4, r0
 8024910:	4602      	mov	r2, r0
 8024912:	460b      	mov	r3, r1
 8024914:	4640      	mov	r0, r8
 8024916:	4649      	mov	r1, r9
 8024918:	f7db fe82 	bl	8000620 <__aeabi_dmul>
 802491c:	2200      	movs	r2, #0
 802491e:	4680      	mov	r8, r0
 8024920:	4689      	mov	r9, r1
 8024922:	4b5e      	ldr	r3, [pc, #376]	; (8024a9c <__ieee754_pow+0x734>)
 8024924:	4620      	mov	r0, r4
 8024926:	4629      	mov	r1, r5
 8024928:	f7db fcc6 	bl	80002b8 <__aeabi_dsub>
 802492c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024930:	f7db fcc2 	bl	80002b8 <__aeabi_dsub>
 8024934:	4602      	mov	r2, r0
 8024936:	460b      	mov	r3, r1
 8024938:	4630      	mov	r0, r6
 802493a:	4639      	mov	r1, r7
 802493c:	f7db fcbc 	bl	80002b8 <__aeabi_dsub>
 8024940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024944:	f7db fe6c 	bl	8000620 <__aeabi_dmul>
 8024948:	4622      	mov	r2, r4
 802494a:	4606      	mov	r6, r0
 802494c:	460f      	mov	r7, r1
 802494e:	462b      	mov	r3, r5
 8024950:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024954:	f7db fe64 	bl	8000620 <__aeabi_dmul>
 8024958:	4602      	mov	r2, r0
 802495a:	460b      	mov	r3, r1
 802495c:	4630      	mov	r0, r6
 802495e:	4639      	mov	r1, r7
 8024960:	f7db fcac 	bl	80002bc <__adddf3>
 8024964:	4606      	mov	r6, r0
 8024966:	460f      	mov	r7, r1
 8024968:	4602      	mov	r2, r0
 802496a:	460b      	mov	r3, r1
 802496c:	4640      	mov	r0, r8
 802496e:	4649      	mov	r1, r9
 8024970:	f7db fca4 	bl	80002bc <__adddf3>
 8024974:	9802      	ldr	r0, [sp, #8]
 8024976:	a33c      	add	r3, pc, #240	; (adr r3, 8024a68 <__ieee754_pow+0x700>)
 8024978:	e9d3 2300 	ldrd	r2, r3, [r3]
 802497c:	4604      	mov	r4, r0
 802497e:	460d      	mov	r5, r1
 8024980:	f7db fe4e 	bl	8000620 <__aeabi_dmul>
 8024984:	4642      	mov	r2, r8
 8024986:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802498a:	464b      	mov	r3, r9
 802498c:	4620      	mov	r0, r4
 802498e:	4629      	mov	r1, r5
 8024990:	f7db fc92 	bl	80002b8 <__aeabi_dsub>
 8024994:	4602      	mov	r2, r0
 8024996:	460b      	mov	r3, r1
 8024998:	4630      	mov	r0, r6
 802499a:	4639      	mov	r1, r7
 802499c:	f7db fc8c 	bl	80002b8 <__aeabi_dsub>
 80249a0:	a333      	add	r3, pc, #204	; (adr r3, 8024a70 <__ieee754_pow+0x708>)
 80249a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249a6:	f7db fe3b 	bl	8000620 <__aeabi_dmul>
 80249aa:	a333      	add	r3, pc, #204	; (adr r3, 8024a78 <__ieee754_pow+0x710>)
 80249ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249b0:	4606      	mov	r6, r0
 80249b2:	460f      	mov	r7, r1
 80249b4:	4620      	mov	r0, r4
 80249b6:	4629      	mov	r1, r5
 80249b8:	f7db fe32 	bl	8000620 <__aeabi_dmul>
 80249bc:	4602      	mov	r2, r0
 80249be:	460b      	mov	r3, r1
 80249c0:	4630      	mov	r0, r6
 80249c2:	4639      	mov	r1, r7
 80249c4:	f7db fc7a 	bl	80002bc <__adddf3>
 80249c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80249ca:	4b35      	ldr	r3, [pc, #212]	; (8024aa0 <__ieee754_pow+0x738>)
 80249cc:	4413      	add	r3, r2
 80249ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249d2:	f7db fc73 	bl	80002bc <__adddf3>
 80249d6:	4604      	mov	r4, r0
 80249d8:	9807      	ldr	r0, [sp, #28]
 80249da:	460d      	mov	r5, r1
 80249dc:	f7db fdba 	bl	8000554 <__aeabi_i2d>
 80249e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80249e2:	4b30      	ldr	r3, [pc, #192]	; (8024aa4 <__ieee754_pow+0x73c>)
 80249e4:	4413      	add	r3, r2
 80249e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80249ea:	4606      	mov	r6, r0
 80249ec:	460f      	mov	r7, r1
 80249ee:	4622      	mov	r2, r4
 80249f0:	462b      	mov	r3, r5
 80249f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80249f6:	f7db fc61 	bl	80002bc <__adddf3>
 80249fa:	4642      	mov	r2, r8
 80249fc:	464b      	mov	r3, r9
 80249fe:	f7db fc5d 	bl	80002bc <__adddf3>
 8024a02:	4632      	mov	r2, r6
 8024a04:	463b      	mov	r3, r7
 8024a06:	f7db fc59 	bl	80002bc <__adddf3>
 8024a0a:	9802      	ldr	r0, [sp, #8]
 8024a0c:	4632      	mov	r2, r6
 8024a0e:	463b      	mov	r3, r7
 8024a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024a14:	f7db fc50 	bl	80002b8 <__aeabi_dsub>
 8024a18:	4642      	mov	r2, r8
 8024a1a:	464b      	mov	r3, r9
 8024a1c:	f7db fc4c 	bl	80002b8 <__aeabi_dsub>
 8024a20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8024a24:	e607      	b.n	8024636 <__ieee754_pow+0x2ce>
 8024a26:	f04f 0a01 	mov.w	sl, #1
 8024a2a:	e6a5      	b.n	8024778 <__ieee754_pow+0x410>
 8024a2c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8024a80 <__ieee754_pow+0x718>
 8024a30:	e613      	b.n	802465a <__ieee754_pow+0x2f2>
 8024a32:	bf00      	nop
 8024a34:	f3af 8000 	nop.w
 8024a38:	4a454eef 	.word	0x4a454eef
 8024a3c:	3fca7e28 	.word	0x3fca7e28
 8024a40:	93c9db65 	.word	0x93c9db65
 8024a44:	3fcd864a 	.word	0x3fcd864a
 8024a48:	a91d4101 	.word	0xa91d4101
 8024a4c:	3fd17460 	.word	0x3fd17460
 8024a50:	518f264d 	.word	0x518f264d
 8024a54:	3fd55555 	.word	0x3fd55555
 8024a58:	db6fabff 	.word	0xdb6fabff
 8024a5c:	3fdb6db6 	.word	0x3fdb6db6
 8024a60:	33333303 	.word	0x33333303
 8024a64:	3fe33333 	.word	0x3fe33333
 8024a68:	e0000000 	.word	0xe0000000
 8024a6c:	3feec709 	.word	0x3feec709
 8024a70:	dc3a03fd 	.word	0xdc3a03fd
 8024a74:	3feec709 	.word	0x3feec709
 8024a78:	145b01f5 	.word	0x145b01f5
 8024a7c:	be3e2fe0 	.word	0xbe3e2fe0
 8024a80:	00000000 	.word	0x00000000
 8024a84:	3ff00000 	.word	0x3ff00000
 8024a88:	43400000 	.word	0x43400000
 8024a8c:	0003988e 	.word	0x0003988e
 8024a90:	000bb679 	.word	0x000bb679
 8024a94:	080324e0 	.word	0x080324e0
 8024a98:	3ff00000 	.word	0x3ff00000
 8024a9c:	40080000 	.word	0x40080000
 8024aa0:	08032500 	.word	0x08032500
 8024aa4:	080324f0 	.word	0x080324f0
 8024aa8:	a3b6      	add	r3, pc, #728	; (adr r3, 8024d84 <__ieee754_pow+0xa1c>)
 8024aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024aae:	4640      	mov	r0, r8
 8024ab0:	4649      	mov	r1, r9
 8024ab2:	f7db fc03 	bl	80002bc <__adddf3>
 8024ab6:	4622      	mov	r2, r4
 8024ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024abc:	462b      	mov	r3, r5
 8024abe:	4630      	mov	r0, r6
 8024ac0:	4639      	mov	r1, r7
 8024ac2:	f7db fbf9 	bl	80002b8 <__aeabi_dsub>
 8024ac6:	4602      	mov	r2, r0
 8024ac8:	460b      	mov	r3, r1
 8024aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024ace:	f7dc f837 	bl	8000b40 <__aeabi_dcmpgt>
 8024ad2:	2800      	cmp	r0, #0
 8024ad4:	f47f adfe 	bne.w	80246d4 <__ieee754_pow+0x36c>
 8024ad8:	4aa5      	ldr	r2, [pc, #660]	; (8024d70 <__ieee754_pow+0xa08>)
 8024ada:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024ade:	4293      	cmp	r3, r2
 8024ae0:	f340 810c 	ble.w	8024cfc <__ieee754_pow+0x994>
 8024ae4:	151b      	asrs	r3, r3, #20
 8024ae6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8024aea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8024aee:	fa4a f303 	asr.w	r3, sl, r3
 8024af2:	445b      	add	r3, fp
 8024af4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8024af8:	4e9e      	ldr	r6, [pc, #632]	; (8024d74 <__ieee754_pow+0xa0c>)
 8024afa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8024afe:	4116      	asrs	r6, r2
 8024b00:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8024b04:	2000      	movs	r0, #0
 8024b06:	ea23 0106 	bic.w	r1, r3, r6
 8024b0a:	f1c2 0214 	rsb	r2, r2, #20
 8024b0e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8024b12:	fa4a fa02 	asr.w	sl, sl, r2
 8024b16:	f1bb 0f00 	cmp.w	fp, #0
 8024b1a:	4602      	mov	r2, r0
 8024b1c:	460b      	mov	r3, r1
 8024b1e:	4620      	mov	r0, r4
 8024b20:	4629      	mov	r1, r5
 8024b22:	bfb8      	it	lt
 8024b24:	f1ca 0a00 	rsblt	sl, sl, #0
 8024b28:	f7db fbc6 	bl	80002b8 <__aeabi_dsub>
 8024b2c:	e9cd 0100 	strd	r0, r1, [sp]
 8024b30:	4642      	mov	r2, r8
 8024b32:	464b      	mov	r3, r9
 8024b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024b38:	f7db fbc0 	bl	80002bc <__adddf3>
 8024b3c:	2000      	movs	r0, #0
 8024b3e:	a37a      	add	r3, pc, #488	; (adr r3, 8024d28 <__ieee754_pow+0x9c0>)
 8024b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b44:	4604      	mov	r4, r0
 8024b46:	460d      	mov	r5, r1
 8024b48:	f7db fd6a 	bl	8000620 <__aeabi_dmul>
 8024b4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024b50:	4606      	mov	r6, r0
 8024b52:	460f      	mov	r7, r1
 8024b54:	4620      	mov	r0, r4
 8024b56:	4629      	mov	r1, r5
 8024b58:	f7db fbae 	bl	80002b8 <__aeabi_dsub>
 8024b5c:	4602      	mov	r2, r0
 8024b5e:	460b      	mov	r3, r1
 8024b60:	4640      	mov	r0, r8
 8024b62:	4649      	mov	r1, r9
 8024b64:	f7db fba8 	bl	80002b8 <__aeabi_dsub>
 8024b68:	a371      	add	r3, pc, #452	; (adr r3, 8024d30 <__ieee754_pow+0x9c8>)
 8024b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b6e:	f7db fd57 	bl	8000620 <__aeabi_dmul>
 8024b72:	a371      	add	r3, pc, #452	; (adr r3, 8024d38 <__ieee754_pow+0x9d0>)
 8024b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b78:	4680      	mov	r8, r0
 8024b7a:	4689      	mov	r9, r1
 8024b7c:	4620      	mov	r0, r4
 8024b7e:	4629      	mov	r1, r5
 8024b80:	f7db fd4e 	bl	8000620 <__aeabi_dmul>
 8024b84:	4602      	mov	r2, r0
 8024b86:	460b      	mov	r3, r1
 8024b88:	4640      	mov	r0, r8
 8024b8a:	4649      	mov	r1, r9
 8024b8c:	f7db fb96 	bl	80002bc <__adddf3>
 8024b90:	4604      	mov	r4, r0
 8024b92:	460d      	mov	r5, r1
 8024b94:	4602      	mov	r2, r0
 8024b96:	460b      	mov	r3, r1
 8024b98:	4630      	mov	r0, r6
 8024b9a:	4639      	mov	r1, r7
 8024b9c:	f7db fb8e 	bl	80002bc <__adddf3>
 8024ba0:	4632      	mov	r2, r6
 8024ba2:	463b      	mov	r3, r7
 8024ba4:	4680      	mov	r8, r0
 8024ba6:	4689      	mov	r9, r1
 8024ba8:	f7db fb86 	bl	80002b8 <__aeabi_dsub>
 8024bac:	4602      	mov	r2, r0
 8024bae:	460b      	mov	r3, r1
 8024bb0:	4620      	mov	r0, r4
 8024bb2:	4629      	mov	r1, r5
 8024bb4:	f7db fb80 	bl	80002b8 <__aeabi_dsub>
 8024bb8:	4642      	mov	r2, r8
 8024bba:	4606      	mov	r6, r0
 8024bbc:	460f      	mov	r7, r1
 8024bbe:	464b      	mov	r3, r9
 8024bc0:	4640      	mov	r0, r8
 8024bc2:	4649      	mov	r1, r9
 8024bc4:	f7db fd2c 	bl	8000620 <__aeabi_dmul>
 8024bc8:	a35d      	add	r3, pc, #372	; (adr r3, 8024d40 <__ieee754_pow+0x9d8>)
 8024bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bce:	4604      	mov	r4, r0
 8024bd0:	460d      	mov	r5, r1
 8024bd2:	f7db fd25 	bl	8000620 <__aeabi_dmul>
 8024bd6:	a35c      	add	r3, pc, #368	; (adr r3, 8024d48 <__ieee754_pow+0x9e0>)
 8024bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bdc:	f7db fb6c 	bl	80002b8 <__aeabi_dsub>
 8024be0:	4622      	mov	r2, r4
 8024be2:	462b      	mov	r3, r5
 8024be4:	f7db fd1c 	bl	8000620 <__aeabi_dmul>
 8024be8:	a359      	add	r3, pc, #356	; (adr r3, 8024d50 <__ieee754_pow+0x9e8>)
 8024bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bee:	f7db fb65 	bl	80002bc <__adddf3>
 8024bf2:	4622      	mov	r2, r4
 8024bf4:	462b      	mov	r3, r5
 8024bf6:	f7db fd13 	bl	8000620 <__aeabi_dmul>
 8024bfa:	a357      	add	r3, pc, #348	; (adr r3, 8024d58 <__ieee754_pow+0x9f0>)
 8024bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c00:	f7db fb5a 	bl	80002b8 <__aeabi_dsub>
 8024c04:	4622      	mov	r2, r4
 8024c06:	462b      	mov	r3, r5
 8024c08:	f7db fd0a 	bl	8000620 <__aeabi_dmul>
 8024c0c:	a354      	add	r3, pc, #336	; (adr r3, 8024d60 <__ieee754_pow+0x9f8>)
 8024c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c12:	f7db fb53 	bl	80002bc <__adddf3>
 8024c16:	4622      	mov	r2, r4
 8024c18:	462b      	mov	r3, r5
 8024c1a:	f7db fd01 	bl	8000620 <__aeabi_dmul>
 8024c1e:	4602      	mov	r2, r0
 8024c20:	460b      	mov	r3, r1
 8024c22:	4640      	mov	r0, r8
 8024c24:	4649      	mov	r1, r9
 8024c26:	f7db fb47 	bl	80002b8 <__aeabi_dsub>
 8024c2a:	4604      	mov	r4, r0
 8024c2c:	460d      	mov	r5, r1
 8024c2e:	4602      	mov	r2, r0
 8024c30:	460b      	mov	r3, r1
 8024c32:	4640      	mov	r0, r8
 8024c34:	4649      	mov	r1, r9
 8024c36:	f7db fcf3 	bl	8000620 <__aeabi_dmul>
 8024c3a:	2200      	movs	r2, #0
 8024c3c:	e9cd 0100 	strd	r0, r1, [sp]
 8024c40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024c44:	4620      	mov	r0, r4
 8024c46:	4629      	mov	r1, r5
 8024c48:	f7db fb36 	bl	80002b8 <__aeabi_dsub>
 8024c4c:	4602      	mov	r2, r0
 8024c4e:	460b      	mov	r3, r1
 8024c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024c54:	f7db fe0e 	bl	8000874 <__aeabi_ddiv>
 8024c58:	4632      	mov	r2, r6
 8024c5a:	4604      	mov	r4, r0
 8024c5c:	460d      	mov	r5, r1
 8024c5e:	463b      	mov	r3, r7
 8024c60:	4640      	mov	r0, r8
 8024c62:	4649      	mov	r1, r9
 8024c64:	f7db fcdc 	bl	8000620 <__aeabi_dmul>
 8024c68:	4632      	mov	r2, r6
 8024c6a:	463b      	mov	r3, r7
 8024c6c:	f7db fb26 	bl	80002bc <__adddf3>
 8024c70:	4602      	mov	r2, r0
 8024c72:	460b      	mov	r3, r1
 8024c74:	4620      	mov	r0, r4
 8024c76:	4629      	mov	r1, r5
 8024c78:	f7db fb1e 	bl	80002b8 <__aeabi_dsub>
 8024c7c:	4642      	mov	r2, r8
 8024c7e:	464b      	mov	r3, r9
 8024c80:	f7db fb1a 	bl	80002b8 <__aeabi_dsub>
 8024c84:	4602      	mov	r2, r0
 8024c86:	460b      	mov	r3, r1
 8024c88:	2000      	movs	r0, #0
 8024c8a:	493b      	ldr	r1, [pc, #236]	; (8024d78 <__ieee754_pow+0xa10>)
 8024c8c:	f7db fb14 	bl	80002b8 <__aeabi_dsub>
 8024c90:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8024c94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8024c98:	4602      	mov	r2, r0
 8024c9a:	460b      	mov	r3, r1
 8024c9c:	da31      	bge.n	8024d02 <__ieee754_pow+0x99a>
 8024c9e:	4650      	mov	r0, sl
 8024ca0:	ec43 2b10 	vmov	d0, r2, r3
 8024ca4:	f000 fa0c 	bl	80250c0 <scalbn>
 8024ca8:	ec51 0b10 	vmov	r0, r1, d0
 8024cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024cb0:	f7ff bbf1 	b.w	8024496 <__ieee754_pow+0x12e>
 8024cb4:	4b31      	ldr	r3, [pc, #196]	; (8024d7c <__ieee754_pow+0xa14>)
 8024cb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8024cba:	429e      	cmp	r6, r3
 8024cbc:	f77f af0c 	ble.w	8024ad8 <__ieee754_pow+0x770>
 8024cc0:	4b2f      	ldr	r3, [pc, #188]	; (8024d80 <__ieee754_pow+0xa18>)
 8024cc2:	440b      	add	r3, r1
 8024cc4:	4303      	orrs	r3, r0
 8024cc6:	d00b      	beq.n	8024ce0 <__ieee754_pow+0x978>
 8024cc8:	a327      	add	r3, pc, #156	; (adr r3, 8024d68 <__ieee754_pow+0xa00>)
 8024cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024cd2:	f7db fca5 	bl	8000620 <__aeabi_dmul>
 8024cd6:	a324      	add	r3, pc, #144	; (adr r3, 8024d68 <__ieee754_pow+0xa00>)
 8024cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cdc:	f7ff bbdb 	b.w	8024496 <__ieee754_pow+0x12e>
 8024ce0:	4622      	mov	r2, r4
 8024ce2:	462b      	mov	r3, r5
 8024ce4:	f7db fae8 	bl	80002b8 <__aeabi_dsub>
 8024ce8:	4602      	mov	r2, r0
 8024cea:	460b      	mov	r3, r1
 8024cec:	4640      	mov	r0, r8
 8024cee:	4649      	mov	r1, r9
 8024cf0:	f7db ff12 	bl	8000b18 <__aeabi_dcmple>
 8024cf4:	2800      	cmp	r0, #0
 8024cf6:	f43f aeef 	beq.w	8024ad8 <__ieee754_pow+0x770>
 8024cfa:	e7e5      	b.n	8024cc8 <__ieee754_pow+0x960>
 8024cfc:	f04f 0a00 	mov.w	sl, #0
 8024d00:	e716      	b.n	8024b30 <__ieee754_pow+0x7c8>
 8024d02:	4621      	mov	r1, r4
 8024d04:	e7d2      	b.n	8024cac <__ieee754_pow+0x944>
 8024d06:	2000      	movs	r0, #0
 8024d08:	491b      	ldr	r1, [pc, #108]	; (8024d78 <__ieee754_pow+0xa10>)
 8024d0a:	f7ff bb8d 	b.w	8024428 <__ieee754_pow+0xc0>
 8024d0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024d12:	f7ff bb89 	b.w	8024428 <__ieee754_pow+0xc0>
 8024d16:	4630      	mov	r0, r6
 8024d18:	4639      	mov	r1, r7
 8024d1a:	f7ff bb85 	b.w	8024428 <__ieee754_pow+0xc0>
 8024d1e:	4693      	mov	fp, r2
 8024d20:	f7ff bb96 	b.w	8024450 <__ieee754_pow+0xe8>
 8024d24:	f3af 8000 	nop.w
 8024d28:	00000000 	.word	0x00000000
 8024d2c:	3fe62e43 	.word	0x3fe62e43
 8024d30:	fefa39ef 	.word	0xfefa39ef
 8024d34:	3fe62e42 	.word	0x3fe62e42
 8024d38:	0ca86c39 	.word	0x0ca86c39
 8024d3c:	be205c61 	.word	0xbe205c61
 8024d40:	72bea4d0 	.word	0x72bea4d0
 8024d44:	3e663769 	.word	0x3e663769
 8024d48:	c5d26bf1 	.word	0xc5d26bf1
 8024d4c:	3ebbbd41 	.word	0x3ebbbd41
 8024d50:	af25de2c 	.word	0xaf25de2c
 8024d54:	3f11566a 	.word	0x3f11566a
 8024d58:	16bebd93 	.word	0x16bebd93
 8024d5c:	3f66c16c 	.word	0x3f66c16c
 8024d60:	5555553e 	.word	0x5555553e
 8024d64:	3fc55555 	.word	0x3fc55555
 8024d68:	c2f8f359 	.word	0xc2f8f359
 8024d6c:	01a56e1f 	.word	0x01a56e1f
 8024d70:	3fe00000 	.word	0x3fe00000
 8024d74:	000fffff 	.word	0x000fffff
 8024d78:	3ff00000 	.word	0x3ff00000
 8024d7c:	4090cbff 	.word	0x4090cbff
 8024d80:	3f6f3400 	.word	0x3f6f3400
 8024d84:	652b82fe 	.word	0x652b82fe
 8024d88:	3c971547 	.word	0x3c971547

08024d8c <__ieee754_sqrt>:
 8024d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d90:	ec55 4b10 	vmov	r4, r5, d0
 8024d94:	4e54      	ldr	r6, [pc, #336]	; (8024ee8 <__ieee754_sqrt+0x15c>)
 8024d96:	43ae      	bics	r6, r5
 8024d98:	ee10 0a10 	vmov	r0, s0
 8024d9c:	462b      	mov	r3, r5
 8024d9e:	462a      	mov	r2, r5
 8024da0:	4621      	mov	r1, r4
 8024da2:	d113      	bne.n	8024dcc <__ieee754_sqrt+0x40>
 8024da4:	ee10 2a10 	vmov	r2, s0
 8024da8:	462b      	mov	r3, r5
 8024daa:	ee10 0a10 	vmov	r0, s0
 8024dae:	4629      	mov	r1, r5
 8024db0:	f7db fc36 	bl	8000620 <__aeabi_dmul>
 8024db4:	4602      	mov	r2, r0
 8024db6:	460b      	mov	r3, r1
 8024db8:	4620      	mov	r0, r4
 8024dba:	4629      	mov	r1, r5
 8024dbc:	f7db fa7e 	bl	80002bc <__adddf3>
 8024dc0:	4604      	mov	r4, r0
 8024dc2:	460d      	mov	r5, r1
 8024dc4:	ec45 4b10 	vmov	d0, r4, r5
 8024dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024dcc:	2d00      	cmp	r5, #0
 8024dce:	dc10      	bgt.n	8024df2 <__ieee754_sqrt+0x66>
 8024dd0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8024dd4:	4330      	orrs	r0, r6
 8024dd6:	d0f5      	beq.n	8024dc4 <__ieee754_sqrt+0x38>
 8024dd8:	b15d      	cbz	r5, 8024df2 <__ieee754_sqrt+0x66>
 8024dda:	ee10 2a10 	vmov	r2, s0
 8024dde:	462b      	mov	r3, r5
 8024de0:	4620      	mov	r0, r4
 8024de2:	4629      	mov	r1, r5
 8024de4:	f7db fa68 	bl	80002b8 <__aeabi_dsub>
 8024de8:	4602      	mov	r2, r0
 8024dea:	460b      	mov	r3, r1
 8024dec:	f7db fd42 	bl	8000874 <__aeabi_ddiv>
 8024df0:	e7e6      	b.n	8024dc0 <__ieee754_sqrt+0x34>
 8024df2:	151b      	asrs	r3, r3, #20
 8024df4:	d10c      	bne.n	8024e10 <__ieee754_sqrt+0x84>
 8024df6:	2a00      	cmp	r2, #0
 8024df8:	d06d      	beq.n	8024ed6 <__ieee754_sqrt+0x14a>
 8024dfa:	2000      	movs	r0, #0
 8024dfc:	02d6      	lsls	r6, r2, #11
 8024dfe:	d56e      	bpl.n	8024ede <__ieee754_sqrt+0x152>
 8024e00:	1e44      	subs	r4, r0, #1
 8024e02:	1b1b      	subs	r3, r3, r4
 8024e04:	f1c0 0420 	rsb	r4, r0, #32
 8024e08:	fa21 f404 	lsr.w	r4, r1, r4
 8024e0c:	4322      	orrs	r2, r4
 8024e0e:	4081      	lsls	r1, r0
 8024e10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024e14:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8024e18:	07dd      	lsls	r5, r3, #31
 8024e1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8024e1e:	bf42      	ittt	mi
 8024e20:	0052      	lslmi	r2, r2, #1
 8024e22:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8024e26:	0049      	lslmi	r1, r1, #1
 8024e28:	1058      	asrs	r0, r3, #1
 8024e2a:	2500      	movs	r5, #0
 8024e2c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8024e30:	441a      	add	r2, r3
 8024e32:	0049      	lsls	r1, r1, #1
 8024e34:	2316      	movs	r3, #22
 8024e36:	462c      	mov	r4, r5
 8024e38:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8024e3c:	19a7      	adds	r7, r4, r6
 8024e3e:	4297      	cmp	r7, r2
 8024e40:	bfde      	ittt	le
 8024e42:	1bd2      	suble	r2, r2, r7
 8024e44:	19bc      	addle	r4, r7, r6
 8024e46:	19ad      	addle	r5, r5, r6
 8024e48:	0052      	lsls	r2, r2, #1
 8024e4a:	3b01      	subs	r3, #1
 8024e4c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8024e50:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024e54:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024e58:	d1f0      	bne.n	8024e3c <__ieee754_sqrt+0xb0>
 8024e5a:	f04f 0e20 	mov.w	lr, #32
 8024e5e:	469c      	mov	ip, r3
 8024e60:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8024e64:	42a2      	cmp	r2, r4
 8024e66:	eb06 070c 	add.w	r7, r6, ip
 8024e6a:	dc02      	bgt.n	8024e72 <__ieee754_sqrt+0xe6>
 8024e6c:	d112      	bne.n	8024e94 <__ieee754_sqrt+0x108>
 8024e6e:	428f      	cmp	r7, r1
 8024e70:	d810      	bhi.n	8024e94 <__ieee754_sqrt+0x108>
 8024e72:	2f00      	cmp	r7, #0
 8024e74:	eb07 0c06 	add.w	ip, r7, r6
 8024e78:	da34      	bge.n	8024ee4 <__ieee754_sqrt+0x158>
 8024e7a:	f1bc 0f00 	cmp.w	ip, #0
 8024e7e:	db31      	blt.n	8024ee4 <__ieee754_sqrt+0x158>
 8024e80:	f104 0801 	add.w	r8, r4, #1
 8024e84:	1b12      	subs	r2, r2, r4
 8024e86:	428f      	cmp	r7, r1
 8024e88:	bf88      	it	hi
 8024e8a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8024e8e:	1bc9      	subs	r1, r1, r7
 8024e90:	4433      	add	r3, r6
 8024e92:	4644      	mov	r4, r8
 8024e94:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8024e98:	f1be 0e01 	subs.w	lr, lr, #1
 8024e9c:	443a      	add	r2, r7
 8024e9e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024ea2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024ea6:	d1dd      	bne.n	8024e64 <__ieee754_sqrt+0xd8>
 8024ea8:	430a      	orrs	r2, r1
 8024eaa:	d006      	beq.n	8024eba <__ieee754_sqrt+0x12e>
 8024eac:	1c5c      	adds	r4, r3, #1
 8024eae:	bf13      	iteet	ne
 8024eb0:	3301      	addne	r3, #1
 8024eb2:	3501      	addeq	r5, #1
 8024eb4:	4673      	moveq	r3, lr
 8024eb6:	f023 0301 	bicne.w	r3, r3, #1
 8024eba:	106a      	asrs	r2, r5, #1
 8024ebc:	085b      	lsrs	r3, r3, #1
 8024ebe:	07e9      	lsls	r1, r5, #31
 8024ec0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8024ec4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8024ec8:	bf48      	it	mi
 8024eca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8024ece:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8024ed2:	461c      	mov	r4, r3
 8024ed4:	e776      	b.n	8024dc4 <__ieee754_sqrt+0x38>
 8024ed6:	0aca      	lsrs	r2, r1, #11
 8024ed8:	3b15      	subs	r3, #21
 8024eda:	0549      	lsls	r1, r1, #21
 8024edc:	e78b      	b.n	8024df6 <__ieee754_sqrt+0x6a>
 8024ede:	0052      	lsls	r2, r2, #1
 8024ee0:	3001      	adds	r0, #1
 8024ee2:	e78b      	b.n	8024dfc <__ieee754_sqrt+0x70>
 8024ee4:	46a0      	mov	r8, r4
 8024ee6:	e7cd      	b.n	8024e84 <__ieee754_sqrt+0xf8>
 8024ee8:	7ff00000 	.word	0x7ff00000

08024eec <__ieee754_sqrtf>:
 8024eec:	ee10 2a10 	vmov	r2, s0
 8024ef0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024ef4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024ef8:	b570      	push	{r4, r5, r6, lr}
 8024efa:	d302      	bcc.n	8024f02 <__ieee754_sqrtf+0x16>
 8024efc:	eea0 0a00 	vfma.f32	s0, s0, s0
 8024f00:	bd70      	pop	{r4, r5, r6, pc}
 8024f02:	b3b1      	cbz	r1, 8024f72 <__ieee754_sqrtf+0x86>
 8024f04:	2a00      	cmp	r2, #0
 8024f06:	da04      	bge.n	8024f12 <__ieee754_sqrtf+0x26>
 8024f08:	ee70 7a40 	vsub.f32	s15, s0, s0
 8024f0c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8024f10:	bd70      	pop	{r4, r5, r6, pc}
 8024f12:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8024f16:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8024f1a:	d204      	bcs.n	8024f26 <__ieee754_sqrtf+0x3a>
 8024f1c:	2100      	movs	r1, #0
 8024f1e:	0210      	lsls	r0, r2, #8
 8024f20:	d528      	bpl.n	8024f74 <__ieee754_sqrtf+0x88>
 8024f22:	3901      	subs	r1, #1
 8024f24:	1a5b      	subs	r3, r3, r1
 8024f26:	3b7f      	subs	r3, #127	; 0x7f
 8024f28:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8024f2c:	07d9      	lsls	r1, r3, #31
 8024f2e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8024f32:	bf48      	it	mi
 8024f34:	0052      	lslmi	r2, r2, #1
 8024f36:	1059      	asrs	r1, r3, #1
 8024f38:	2300      	movs	r3, #0
 8024f3a:	0052      	lsls	r2, r2, #1
 8024f3c:	2419      	movs	r4, #25
 8024f3e:	461e      	mov	r6, r3
 8024f40:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8024f44:	1835      	adds	r5, r6, r0
 8024f46:	4295      	cmp	r5, r2
 8024f48:	bfde      	ittt	le
 8024f4a:	182e      	addle	r6, r5, r0
 8024f4c:	1b52      	suble	r2, r2, r5
 8024f4e:	181b      	addle	r3, r3, r0
 8024f50:	3c01      	subs	r4, #1
 8024f52:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024f56:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8024f5a:	d1f3      	bne.n	8024f44 <__ieee754_sqrtf+0x58>
 8024f5c:	b112      	cbz	r2, 8024f64 <__ieee754_sqrtf+0x78>
 8024f5e:	3301      	adds	r3, #1
 8024f60:	f023 0301 	bic.w	r3, r3, #1
 8024f64:	105b      	asrs	r3, r3, #1
 8024f66:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8024f6a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8024f6e:	ee00 3a10 	vmov	s0, r3
 8024f72:	bd70      	pop	{r4, r5, r6, pc}
 8024f74:	0052      	lsls	r2, r2, #1
 8024f76:	3101      	adds	r1, #1
 8024f78:	e7d1      	b.n	8024f1e <__ieee754_sqrtf+0x32>

08024f7a <fabs>:
 8024f7a:	ec53 2b10 	vmov	r2, r3, d0
 8024f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024f82:	ec43 2b10 	vmov	d0, r2, r3
 8024f86:	4770      	bx	lr

08024f88 <finite>:
 8024f88:	ee10 3a90 	vmov	r3, s1
 8024f8c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8024f90:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024f94:	0fc0      	lsrs	r0, r0, #31
 8024f96:	4770      	bx	lr

08024f98 <matherr>:
 8024f98:	2000      	movs	r0, #0
 8024f9a:	4770      	bx	lr
 8024f9c:	0000      	movs	r0, r0
	...

08024fa0 <nan>:
 8024fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024fa8 <nan+0x8>
 8024fa4:	4770      	bx	lr
 8024fa6:	bf00      	nop
 8024fa8:	00000000 	.word	0x00000000
 8024fac:	7ff80000 	.word	0x7ff80000

08024fb0 <rint>:
 8024fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024fb2:	ec51 0b10 	vmov	r0, r1, d0
 8024fb6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8024fba:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8024fbe:	2e13      	cmp	r6, #19
 8024fc0:	ee10 7a10 	vmov	r7, s0
 8024fc4:	460b      	mov	r3, r1
 8024fc6:	4602      	mov	r2, r0
 8024fc8:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8024fcc:	dc58      	bgt.n	8025080 <rint+0xd0>
 8024fce:	2e00      	cmp	r6, #0
 8024fd0:	da2b      	bge.n	802502a <rint+0x7a>
 8024fd2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024fd6:	4302      	orrs	r2, r0
 8024fd8:	d023      	beq.n	8025022 <rint+0x72>
 8024fda:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8024fde:	4302      	orrs	r2, r0
 8024fe0:	4251      	negs	r1, r2
 8024fe2:	4311      	orrs	r1, r2
 8024fe4:	0b09      	lsrs	r1, r1, #12
 8024fe6:	0c5b      	lsrs	r3, r3, #17
 8024fe8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8024fec:	045b      	lsls	r3, r3, #17
 8024fee:	ea41 0703 	orr.w	r7, r1, r3
 8024ff2:	4b31      	ldr	r3, [pc, #196]	; (80250b8 <rint+0x108>)
 8024ff4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024ff8:	4639      	mov	r1, r7
 8024ffa:	e9d3 6700 	ldrd	r6, r7, [r3]
 8024ffe:	ee10 0a10 	vmov	r0, s0
 8025002:	4632      	mov	r2, r6
 8025004:	463b      	mov	r3, r7
 8025006:	f7db f959 	bl	80002bc <__adddf3>
 802500a:	e9cd 0100 	strd	r0, r1, [sp]
 802500e:	463b      	mov	r3, r7
 8025010:	4632      	mov	r2, r6
 8025012:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025016:	f7db f94f 	bl	80002b8 <__aeabi_dsub>
 802501a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802501e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8025022:	ec41 0b10 	vmov	d0, r0, r1
 8025026:	b003      	add	sp, #12
 8025028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802502a:	4c24      	ldr	r4, [pc, #144]	; (80250bc <rint+0x10c>)
 802502c:	4134      	asrs	r4, r6
 802502e:	ea01 0704 	and.w	r7, r1, r4
 8025032:	4307      	orrs	r7, r0
 8025034:	d0f5      	beq.n	8025022 <rint+0x72>
 8025036:	0861      	lsrs	r1, r4, #1
 8025038:	ea03 0001 	and.w	r0, r3, r1
 802503c:	4302      	orrs	r2, r0
 802503e:	d00b      	beq.n	8025058 <rint+0xa8>
 8025040:	ea23 0101 	bic.w	r1, r3, r1
 8025044:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8025048:	2e13      	cmp	r6, #19
 802504a:	fa43 f306 	asr.w	r3, r3, r6
 802504e:	bf0c      	ite	eq
 8025050:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8025054:	2200      	movne	r2, #0
 8025056:	430b      	orrs	r3, r1
 8025058:	4619      	mov	r1, r3
 802505a:	4b17      	ldr	r3, [pc, #92]	; (80250b8 <rint+0x108>)
 802505c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8025060:	e9d5 4500 	ldrd	r4, r5, [r5]
 8025064:	4610      	mov	r0, r2
 8025066:	462b      	mov	r3, r5
 8025068:	4622      	mov	r2, r4
 802506a:	f7db f927 	bl	80002bc <__adddf3>
 802506e:	e9cd 0100 	strd	r0, r1, [sp]
 8025072:	4622      	mov	r2, r4
 8025074:	462b      	mov	r3, r5
 8025076:	e9dd 0100 	ldrd	r0, r1, [sp]
 802507a:	f7db f91d 	bl	80002b8 <__aeabi_dsub>
 802507e:	e7d0      	b.n	8025022 <rint+0x72>
 8025080:	2e33      	cmp	r6, #51	; 0x33
 8025082:	dd08      	ble.n	8025096 <rint+0xe6>
 8025084:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8025088:	d1cb      	bne.n	8025022 <rint+0x72>
 802508a:	ee10 2a10 	vmov	r2, s0
 802508e:	460b      	mov	r3, r1
 8025090:	f7db f914 	bl	80002bc <__adddf3>
 8025094:	e7c5      	b.n	8025022 <rint+0x72>
 8025096:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 802509a:	f04f 34ff 	mov.w	r4, #4294967295
 802509e:	40f4      	lsrs	r4, r6
 80250a0:	4220      	tst	r0, r4
 80250a2:	d0be      	beq.n	8025022 <rint+0x72>
 80250a4:	0861      	lsrs	r1, r4, #1
 80250a6:	420f      	tst	r7, r1
 80250a8:	bf1f      	itttt	ne
 80250aa:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80250ae:	ea27 0101 	bicne.w	r1, r7, r1
 80250b2:	4132      	asrne	r2, r6
 80250b4:	430a      	orrne	r2, r1
 80250b6:	e7cf      	b.n	8025058 <rint+0xa8>
 80250b8:	08032510 	.word	0x08032510
 80250bc:	000fffff 	.word	0x000fffff

080250c0 <scalbn>:
 80250c0:	b570      	push	{r4, r5, r6, lr}
 80250c2:	ec55 4b10 	vmov	r4, r5, d0
 80250c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80250ca:	4606      	mov	r6, r0
 80250cc:	462b      	mov	r3, r5
 80250ce:	b9b2      	cbnz	r2, 80250fe <scalbn+0x3e>
 80250d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80250d4:	4323      	orrs	r3, r4
 80250d6:	d03c      	beq.n	8025152 <scalbn+0x92>
 80250d8:	2200      	movs	r2, #0
 80250da:	4b33      	ldr	r3, [pc, #204]	; (80251a8 <scalbn+0xe8>)
 80250dc:	4629      	mov	r1, r5
 80250de:	ee10 0a10 	vmov	r0, s0
 80250e2:	f7db fa9d 	bl	8000620 <__aeabi_dmul>
 80250e6:	4a31      	ldr	r2, [pc, #196]	; (80251ac <scalbn+0xec>)
 80250e8:	4296      	cmp	r6, r2
 80250ea:	4604      	mov	r4, r0
 80250ec:	460d      	mov	r5, r1
 80250ee:	460b      	mov	r3, r1
 80250f0:	da13      	bge.n	802511a <scalbn+0x5a>
 80250f2:	a329      	add	r3, pc, #164	; (adr r3, 8025198 <scalbn+0xd8>)
 80250f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250f8:	f7db fa92 	bl	8000620 <__aeabi_dmul>
 80250fc:	e00a      	b.n	8025114 <scalbn+0x54>
 80250fe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025102:	428a      	cmp	r2, r1
 8025104:	d10c      	bne.n	8025120 <scalbn+0x60>
 8025106:	ee10 2a10 	vmov	r2, s0
 802510a:	462b      	mov	r3, r5
 802510c:	4620      	mov	r0, r4
 802510e:	4629      	mov	r1, r5
 8025110:	f7db f8d4 	bl	80002bc <__adddf3>
 8025114:	4604      	mov	r4, r0
 8025116:	460d      	mov	r5, r1
 8025118:	e01b      	b.n	8025152 <scalbn+0x92>
 802511a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802511e:	3a36      	subs	r2, #54	; 0x36
 8025120:	4432      	add	r2, r6
 8025122:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025126:	428a      	cmp	r2, r1
 8025128:	dd0b      	ble.n	8025142 <scalbn+0x82>
 802512a:	ec45 4b11 	vmov	d1, r4, r5
 802512e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80251a0 <scalbn+0xe0>
 8025132:	f000 f83f 	bl	80251b4 <copysign>
 8025136:	a31a      	add	r3, pc, #104	; (adr r3, 80251a0 <scalbn+0xe0>)
 8025138:	e9d3 2300 	ldrd	r2, r3, [r3]
 802513c:	ec51 0b10 	vmov	r0, r1, d0
 8025140:	e7da      	b.n	80250f8 <scalbn+0x38>
 8025142:	2a00      	cmp	r2, #0
 8025144:	dd08      	ble.n	8025158 <scalbn+0x98>
 8025146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802514a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802514e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025152:	ec45 4b10 	vmov	d0, r4, r5
 8025156:	bd70      	pop	{r4, r5, r6, pc}
 8025158:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802515c:	da0d      	bge.n	802517a <scalbn+0xba>
 802515e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025162:	429e      	cmp	r6, r3
 8025164:	ec45 4b11 	vmov	d1, r4, r5
 8025168:	dce1      	bgt.n	802512e <scalbn+0x6e>
 802516a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8025198 <scalbn+0xd8>
 802516e:	f000 f821 	bl	80251b4 <copysign>
 8025172:	a309      	add	r3, pc, #36	; (adr r3, 8025198 <scalbn+0xd8>)
 8025174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025178:	e7e0      	b.n	802513c <scalbn+0x7c>
 802517a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802517e:	3236      	adds	r2, #54	; 0x36
 8025180:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025184:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025188:	4620      	mov	r0, r4
 802518a:	4629      	mov	r1, r5
 802518c:	2200      	movs	r2, #0
 802518e:	4b08      	ldr	r3, [pc, #32]	; (80251b0 <scalbn+0xf0>)
 8025190:	e7b2      	b.n	80250f8 <scalbn+0x38>
 8025192:	bf00      	nop
 8025194:	f3af 8000 	nop.w
 8025198:	c2f8f359 	.word	0xc2f8f359
 802519c:	01a56e1f 	.word	0x01a56e1f
 80251a0:	8800759c 	.word	0x8800759c
 80251a4:	7e37e43c 	.word	0x7e37e43c
 80251a8:	43500000 	.word	0x43500000
 80251ac:	ffff3cb0 	.word	0xffff3cb0
 80251b0:	3c900000 	.word	0x3c900000

080251b4 <copysign>:
 80251b4:	ec53 2b10 	vmov	r2, r3, d0
 80251b8:	ee11 0a90 	vmov	r0, s3
 80251bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80251c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80251c4:	ea41 0300 	orr.w	r3, r1, r0
 80251c8:	ec43 2b10 	vmov	d0, r2, r3
 80251cc:	4770      	bx	lr
	...

080251d0 <_init>:
 80251d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80251d2:	bf00      	nop
 80251d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80251d6:	bc08      	pop	{r3}
 80251d8:	469e      	mov	lr, r3
 80251da:	4770      	bx	lr

080251dc <_fini>:
 80251dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80251de:	bf00      	nop
 80251e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80251e2:	bc08      	pop	{r3}
 80251e4:	469e      	mov	lr, r3
 80251e6:	4770      	bx	lr
