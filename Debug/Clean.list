
Clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024400  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d2e8  080245c0  080245c0  000345c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080318a8  080318a8  000418a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080318b0  080318b0  000418b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080318b4  080318b4  000418b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000015b4  20000000  080318b8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00094fa4  200015b8  08032e6c  000515b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2009655c  08032e6c  0005655c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000515b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007743d  00000000  00000000  000515e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c149  00000000  00000000  000c8a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002be7e  00000000  00000000  000d4b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002f00  00000000  00000000  001009e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003f70  00000000  00000000  001038e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001ea41  00000000  00000000  00107858  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000f1f6  00000000  00000000  00126299  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0013548f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a3f0  00000000  00000000  0013550c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200015b8 	.word	0x200015b8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080245a8 	.word	0x080245a8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200015bc 	.word	0x200015bc
 80001fc:	080245a8 	.word	0x080245a8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f092 0f00 	teq	r2, #0
 800059a:	bf14      	ite	ne
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e720      	b.n	80003f4 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aedc 	beq.w	80003a2 <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6c1      	b.n	80003a2 <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97a 	b.w	8000fbc <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	9e08      	ldr	r6, [sp, #32]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d151      	bne.n	8000d94 <__udivmoddi4+0xb4>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4617      	mov	r7, r2
 8000cf4:	d96d      	bls.n	8000dd2 <__udivmoddi4+0xf2>
 8000cf6:	fab2 fe82 	clz	lr, r2
 8000cfa:	f1be 0f00 	cmp.w	lr, #0
 8000cfe:	d00b      	beq.n	8000d18 <__udivmoddi4+0x38>
 8000d00:	f1ce 0c20 	rsb	ip, lr, #32
 8000d04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d1c:	0c25      	lsrs	r5, r4, #16
 8000d1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d22:	fa1f f987 	uxth.w	r9, r7
 8000d26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d2e:	fb08 f309 	mul.w	r3, r8, r9
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x6c>
 8000d36:	19ed      	adds	r5, r5, r7
 8000d38:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d3c:	f080 8123 	bcs.w	8000f86 <__udivmoddi4+0x2a6>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	f240 8120 	bls.w	8000f86 <__udivmoddi4+0x2a6>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	1aed      	subs	r5, r5, r3
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb00 f909 	mul.w	r9, r0, r9
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x98>
 8000d64:	19e4      	adds	r4, r4, r7
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 810a 	bcs.w	8000f82 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8107 	bls.w	8000f82 <__udivmoddi4+0x2a2>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 0409 	sub.w	r4, r4, r9
 8000d7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d80:	2100      	movs	r1, #0
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d061      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000d86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	6034      	str	r4, [r6, #0]
 8000d8e:	6073      	str	r3, [r6, #4]
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0xc8>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d054      	beq.n	8000e46 <__udivmoddi4+0x166>
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000da2:	4608      	mov	r0, r1
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	fab3 f183 	clz	r1, r3
 8000dac:	2900      	cmp	r1, #0
 8000dae:	f040 808e 	bne.w	8000ece <__udivmoddi4+0x1ee>
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xdc>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80fa 	bhi.w	8000fb0 <__udivmoddi4+0x2d0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	46ac      	mov	ip, r5
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d03f      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000dca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	b912      	cbnz	r2, 8000dda <__udivmoddi4+0xfa>
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dda:	fab7 fe87 	clz	lr, r7
 8000dde:	f1be 0f00 	cmp.w	lr, #0
 8000de2:	d134      	bne.n	8000e4e <__udivmoddi4+0x16e>
 8000de4:	1beb      	subs	r3, r5, r7
 8000de6:	0c3a      	lsrs	r2, r7, #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000df2:	0c25      	lsrs	r5, r4, #16
 8000df4:	fb02 3318 	mls	r3, r2, r8, r3
 8000df8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfc:	fb0c f308 	mul.w	r3, ip, r8
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x134>
 8000e04:	19ed      	adds	r5, r5, r7
 8000e06:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x132>
 8000e0c:	42ab      	cmp	r3, r5
 8000e0e:	f200 80d1 	bhi.w	8000fb4 <__udivmoddi4+0x2d4>
 8000e12:	4680      	mov	r8, r0
 8000e14:	1aed      	subs	r5, r5, r3
 8000e16:	b2a3      	uxth	r3, r4
 8000e18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e24:	fb0c fc00 	mul.w	ip, ip, r0
 8000e28:	45a4      	cmp	ip, r4
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x15c>
 8000e2c:	19e4      	adds	r4, r4, r7
 8000e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x15a>
 8000e34:	45a4      	cmp	ip, r4
 8000e36:	f200 80b8 	bhi.w	8000faa <__udivmoddi4+0x2ca>
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	eba4 040c 	sub.w	r4, r4, ip
 8000e40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e44:	e79d      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1ce 0420 	rsb	r4, lr, #32
 8000e52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e5e:	0c3a      	lsrs	r2, r7, #16
 8000e60:	fa25 f404 	lsr.w	r4, r5, r4
 8000e64:	ea48 0803 	orr.w	r8, r8, r3
 8000e68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e70:	fb02 4411 	mls	r4, r2, r1, r4
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e86:	d909      	bls.n	8000e9c <__udivmoddi4+0x1bc>
 8000e88:	19ed      	adds	r5, r5, r7
 8000e8a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e8e:	f080 808a 	bcs.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	f240 8087 	bls.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e98:	3902      	subs	r1, #2
 8000e9a:	443d      	add	r5, r7
 8000e9c:	1aeb      	subs	r3, r5, r3
 8000e9e:	fa1f f588 	uxth.w	r5, r8
 8000ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ea6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eaa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000eae:	fb00 f30c 	mul.w	r3, r0, ip
 8000eb2:	42ab      	cmp	r3, r5
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x1e6>
 8000eb6:	19ed      	adds	r5, r5, r7
 8000eb8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebc:	d26f      	bcs.n	8000f9e <__udivmoddi4+0x2be>
 8000ebe:	42ab      	cmp	r3, r5
 8000ec0:	d96d      	bls.n	8000f9e <__udivmoddi4+0x2be>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	1aeb      	subs	r3, r5, r3
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	e78f      	b.n	8000dee <__udivmoddi4+0x10e>
 8000ece:	f1c1 0720 	rsb	r7, r1, #32
 8000ed2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ed6:	408b      	lsls	r3, r1
 8000ed8:	fa05 f401 	lsl.w	r4, r5, r1
 8000edc:	ea48 0303 	orr.w	r3, r8, r3
 8000ee0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ee4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ef2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ef6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000efa:	fa1f f883 	uxth.w	r8, r3
 8000efe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f02:	fb09 f408 	mul.w	r4, r9, r8
 8000f06:	42ac      	cmp	r4, r5
 8000f08:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x244>
 8000f12:	18ed      	adds	r5, r5, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d243      	bcs.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	d941      	bls.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	441d      	add	r5, r3
 8000f24:	1b2d      	subs	r5, r5, r4
 8000f26:	fa1f fe8e 	uxth.w	lr, lr
 8000f2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45a0      	cmp	r8, r4
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x26e>
 8000f3e:	18e4      	adds	r4, r4, r3
 8000f40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f44:	d229      	bcs.n	8000f9a <__udivmoddi4+0x2ba>
 8000f46:	45a0      	cmp	r8, r4
 8000f48:	d927      	bls.n	8000f9a <__udivmoddi4+0x2ba>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	441c      	add	r4, r3
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba4 0408 	sub.w	r4, r4, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454c      	cmp	r4, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	464d      	mov	r5, r9
 8000f60:	d315      	bcc.n	8000f8e <__udivmoddi4+0x2ae>
 8000f62:	d012      	beq.n	8000f8a <__udivmoddi4+0x2aa>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x29c>
 8000f66:	ebba 030e 	subs.w	r3, sl, lr
 8000f6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40cb      	lsrs	r3, r1
 8000f74:	431f      	orrs	r7, r3
 8000f76:	40cc      	lsrs	r4, r1
 8000f78:	6037      	str	r7, [r6, #0]
 8000f7a:	6074      	str	r4, [r6, #4]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	4618      	mov	r0, r3
 8000f84:	e6f8      	b.n	8000d78 <__udivmoddi4+0x98>
 8000f86:	4690      	mov	r8, r2
 8000f88:	e6e0      	b.n	8000d4c <__udivmoddi4+0x6c>
 8000f8a:	45c2      	cmp	sl, r8
 8000f8c:	d2ea      	bcs.n	8000f64 <__udivmoddi4+0x284>
 8000f8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f92:	eb69 0503 	sbc.w	r5, r9, r3
 8000f96:	3801      	subs	r0, #1
 8000f98:	e7e4      	b.n	8000f64 <__udivmoddi4+0x284>
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	e7d7      	b.n	8000f4e <__udivmoddi4+0x26e>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	e791      	b.n	8000ec6 <__udivmoddi4+0x1e6>
 8000fa2:	4681      	mov	r9, r0
 8000fa4:	e7be      	b.n	8000f24 <__udivmoddi4+0x244>
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	e778      	b.n	8000e9c <__udivmoddi4+0x1bc>
 8000faa:	3802      	subs	r0, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	e745      	b.n	8000e3c <__udivmoddi4+0x15c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xe6>
 8000fb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb8:	443d      	add	r5, r7
 8000fba:	e72b      	b.n	8000e14 <__udivmoddi4+0x134>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_InitTick+0x2c>)
{
 8000fc4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd0:	f000 fd34 	bl	8001a3c <HAL_SYSTICK_Config>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b938      	cbnz	r0, 8000fe8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fcde 	bl	80019a0 <HAL_NVIC_SetPriority>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000ec4 	.word	0x20000ec4

08000ff0 <HAL_Init>:
{
 8000ff0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 fcc2 	bl	800197c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ffe1 	bl	8000fc0 <HAL_InitTick>
 8000ffe:	4604      	mov	r4, r0
 8001000:	b918      	cbnz	r0, 800100a <HAL_Init+0x1a>
    HAL_MspInit();
 8001002:	f01d fef5 	bl	801edf0 <HAL_MspInit>
}
 8001006:	4620      	mov	r0, r4
 8001008:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800100a:	2401      	movs	r4, #1
 800100c:	e7fb      	b.n	8001006 <HAL_Init+0x16>
	...

08001010 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001010:	4a02      	ldr	r2, [pc, #8]	; (800101c <HAL_IncTick+0xc>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20090620 	.word	0x20090620

08001020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <HAL_GetTick+0x8>)
 8001022:	6818      	ldr	r0, [r3, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20090620 	.word	0x20090620

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff6 	bl	8001020 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001034:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001036:	4605      	mov	r5, r0
  {
    wait++;
 8001038:	bf18      	it	ne
 800103a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	4284      	cmp	r4, r0
 8001044:	d8fa      	bhi.n	800103c <HAL_Delay+0x10>
  {
  }
}
 8001046:	bd38      	pop	{r3, r4, r5, pc}

08001048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001048:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800104e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001052:	fab6 f386 	clz	r3, r6
 8001056:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800105a:	40de      	lsrs	r6, r3
 800105c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800105e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001062:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001066:	fa93 f5a3 	rbit	r5, r3
 800106a:	fab5 f585 	clz	r5, r5
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	2407      	movs	r4, #7
 8001074:	fa21 f505 	lsr.w	r5, r1, r5
 8001078:	fa04 f505 	lsl.w	r5, r4, r5
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001084:	40d9      	lsrs	r1, r3
 8001086:	ea24 0405 	bic.w	r4, r4, r5
 800108a:	fa02 f101 	lsl.w	r1, r2, r1
 800108e:	4321      	orrs	r1, r4
 8001090:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001094:	bd70      	pop	{r4, r5, r6, pc}
	...

08001098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109e:	4604      	mov	r4, r0
 80010a0:	2800      	cmp	r0, #0
 80010a2:	f000 80b4 	beq.w	800120e <HAL_ADC_Init+0x176>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80010a8:	b925      	cbnz	r5, 80010b4 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	f01d ffed 	bl	801f088 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	6625      	str	r5, [r4, #96]	; 0x60
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010b0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 80010b4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010ba:	bf41      	itttt	mi
 80010bc:	689a      	ldrmi	r2, [r3, #8]
 80010be:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 80010c2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 80010c6:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 80010c8:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010ca:	00d1      	lsls	r1, r2, #3
 80010cc:	d576      	bpl.n	80011bc <HAL_ADC_Init+0x124>
 80010ce:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	f140 808a 	bpl.w	80011ea <HAL_ADC_Init+0x152>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d6:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010da:	06d5      	lsls	r5, r2, #27
 80010dc:	f100 8093 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80010e0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e2:	0751      	lsls	r1, r2, #29
 80010e4:	f100 808f 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010ea:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010ee:	f042 0202 	orr.w	r2, r2, #2
 80010f2:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	2a01      	cmp	r2, #1
 80010fc:	f040 8089 	bne.w	8001212 <HAL_ADC_Init+0x17a>
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	07d2      	lsls	r2, r2, #31
 8001104:	f140 8085 	bpl.w	8001212 <HAL_ADC_Init+0x17a>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8001108:	68e5      	ldr	r5, [r4, #12]
 800110a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 800110c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 800110e:	432a      	orrs	r2, r5
 8001110:	68a5      	ldr	r5, [r4, #8]
 8001112:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001114:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001116:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001118:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800111c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001120:	bf02      	ittt	eq
 8001122:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8001124:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001128:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800112e:	b121      	cbz	r1, 800113a <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001130:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001132:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001136:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001138:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800113a:	68dd      	ldr	r5, [r3, #12]
 800113c:	4939      	ldr	r1, [pc, #228]	; (8001224 <HAL_ADC_Init+0x18c>)
 800113e:	4029      	ands	r1, r5
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	f012 0f0c 	tst.w	r2, #12
 800114a:	d120      	bne.n	800118e <HAL_ADC_Init+0xf6>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800114c:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800114e:	69a5      	ldr	r5, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001150:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001152:	0052      	lsls	r2, r2, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001154:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8001158:	6d25      	ldr	r5, [r4, #80]	; 0x50
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800115a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 800115e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001160:	f021 0106 	bic.w	r1, r1, #6
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8001168:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800116a:	2a01      	cmp	r2, #1
 800116c:	d147      	bne.n	80011fe <HAL_ADC_Init+0x166>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800116e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001170:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001172:	6919      	ldr	r1, [r3, #16]
 8001174:	432a      	orrs	r2, r5
 8001176:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	432a      	orrs	r2, r5
 800117e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001180:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001184:	432a      	orrs	r2, r5
 8001186:	f021 0104 	bic.w	r1, r1, #4
 800118a:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800118c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800118e:	6922      	ldr	r2, [r4, #16]
 8001190:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001192:	bf05      	ittet	eq
 8001194:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001196:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001198:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800119a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800119e:	bf06      	itte	eq
 80011a0:	f021 010f 	biceq.w	r1, r1, #15
 80011a4:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a6:	f022 020f 	bicne.w	r2, r2, #15
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011b8:	b003      	add	sp, #12
 80011ba:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80011bc:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80011be:	491a      	ldr	r1, [pc, #104]	; (8001228 <HAL_ADC_Init+0x190>)
 80011c0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80011c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_ADC_Init+0x194>)
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011d6:	220a      	movs	r2, #10
 80011d8:	434a      	muls	r2, r1
      wait_loop_index--;
 80011da:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80011dc:	9a01      	ldr	r2, [sp, #4]
 80011de:	2a00      	cmp	r2, #0
 80011e0:	f43f af75 	beq.w	80010ce <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80011e4:	9a01      	ldr	r2, [sp, #4]
 80011e6:	3a01      	subs	r2, #1
 80011e8:	e7f7      	b.n	80011da <HAL_ADC_Init+0x142>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011ec:	f042 0210 	orr.w	r2, r2, #16
 80011f0:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	6622      	str	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e76c      	b.n	80010d8 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	e7c2      	b.n	800118c <HAL_ADC_Init+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	e7d2      	b.n	80011b8 <HAL_ADC_Init+0x120>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001212:	4907      	ldr	r1, [pc, #28]	; (8001230 <HAL_ADC_Init+0x198>)
 8001214:	6865      	ldr	r5, [r4, #4]
 8001216:	688a      	ldr	r2, [r1, #8]
 8001218:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800121c:	432a      	orrs	r2, r5
 800121e:	608a      	str	r2, [r1, #8]
 8001220:	e772      	b.n	8001108 <HAL_ADC_Init+0x70>
 8001222:	bf00      	nop
 8001224:	fff0c007 	.word	0xfff0c007
 8001228:	001e8480 	.word	0x001e8480
 800122c:	20000ec4 	.word	0x20000ec4
 8001230:	50040300 	.word	0x50040300

08001234 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001236:	6945      	ldr	r5, [r0, #20]
 8001238:	2d08      	cmp	r5, #8
{
 800123a:	4604      	mov	r4, r0
 800123c:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800123e:	d00a      	beq.n	8001256 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	07dd      	lsls	r5, r3, #31
 8001246:	d505      	bpl.n	8001254 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800124a:	f043 0320 	orr.w	r3, r3, #32
 800124e:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001254:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001256:	f7ff fee3 	bl	8001020 <HAL_GetTick>
 800125a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4215      	tst	r5, r2
 8001262:	d01d      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001264:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800126a:	65e2      	str	r2, [r4, #92]	; 0x5c
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001272:	d10f      	bne.n	8001294 <HAL_ADC_PollForConversion+0x60>
 8001274:	69e2      	ldr	r2, [r4, #28]
 8001276:	b96a      	cbnz	r2, 8001294 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	0711      	lsls	r1, r2, #28
 800127c:	d50a      	bpl.n	8001294 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800127e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001284:	65e2      	str	r2, [r4, #92]	; 0x5c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001286:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001288:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128a:	bf5e      	ittt	pl
 800128c:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 800128e:	f042 0201 	orrpl.w	r2, r2, #1
 8001292:	65e2      	strpl	r2, [r4, #92]	; 0x5c
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001294:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001296:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001298:	d114      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800129a:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800129c:	2000      	movs	r0, #0
}
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012a0:	1c70      	adds	r0, r6, #1
 80012a2:	d0dc      	beq.n	800125e <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012a4:	b946      	cbnz	r6, 80012b8 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 80012ae:	2300      	movs	r3, #0
 80012b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_TIMEOUT;
 80012b4:	2003      	movs	r0, #3
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012b8:	f7ff feb2 	bl	8001020 <HAL_GetTick>
 80012bc:	1bc0      	subs	r0, r0, r7
 80012be:	4286      	cmp	r6, r0
 80012c0:	d2cc      	bcs.n	800125c <HAL_ADC_PollForConversion+0x28>
 80012c2:	e7f0      	b.n	80012a6 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012c4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80012c8:	d1e8      	bne.n	800129c <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012d0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012d0:	6803      	ldr	r3, [r0, #0]
 80012d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80012e2:	2b01      	cmp	r3, #1
{
 80012e4:	4605      	mov	r5, r0
 80012e6:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80012e8:	f000 8168 	beq.w	80015bc <HAL_ADC_ConfigChannel+0x2e4>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f2:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012f4:	6882      	ldr	r2, [r0, #8]
 80012f6:	0757      	lsls	r7, r2, #29
 80012f8:	f100 815a 	bmi.w	80015b0 <HAL_ADC_ConfigChannel+0x2d8>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012fc:	684b      	ldr	r3, [r1, #4]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d808      	bhi.n	8001314 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 8001302:	3b02      	subs	r3, #2
 8001304:	2b03      	cmp	r3, #3
 8001306:	d864      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0xfa>
 8001308:	e8df f003 	tbb	[pc, r3]
 800130c:	605e5c02 	.word	0x605e5c02
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001310:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001312:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001314:	6861      	ldr	r1, [r4, #4]
 8001316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	f401 7640 	and.w	r6, r1, #768	; 0x300
 8001326:	40de      	lsrs	r6, r3
 8001328:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800132c:	f001 011f 	and.w	r1, r1, #31
 8001330:	231f      	movs	r3, #31
 8001332:	fa03 f201 	lsl.w	r2, r3, r1
 8001336:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800133a:	ea23 0302 	bic.w	r3, r3, r2
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001344:	408a      	lsls	r2, r1
 8001346:	4313      	orrs	r3, r2
 8001348:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800134c:	6882      	ldr	r2, [r0, #8]
 800134e:	f012 020c 	ands.w	r2, r2, #12
 8001352:	d126      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001354:	68a3      	ldr	r3, [r4, #8]
 8001356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800135a:	d13c      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800135c:	6821      	ldr	r1, [r4, #0]
 800135e:	f7ff fe73 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001362:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001364:	6953      	ldr	r3, [r2, #20]
 8001366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800136a:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800136c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800136e:	f8d5 e000 	ldr.w	lr, [r5]
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001378:	2e04      	cmp	r6, #4
 800137a:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800137e:	d033      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x110>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001380:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001384:	0048      	lsls	r0, r1, #1
 8001386:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001388:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800138c:	4081      	lsls	r1, r0
 800138e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001392:	4319      	orrs	r1, r3
 8001394:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001398:	4bc5      	ldr	r3, [pc, #788]	; (80016b0 <HAL_ADC_ConfigChannel+0x3d8>)
 800139a:	4003      	ands	r3, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80013a2:	6828      	ldr	r0, [r5, #0]
 80013a4:	6883      	ldr	r3, [r0, #8]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	f040 8108 	bne.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
 80013b0:	6803      	ldr	r3, [r0, #0]
 80013b2:	07de      	lsls	r6, r3, #31
 80013b4:	f140 8104 	bpl.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ba:	2300      	movs	r3, #0
 80013bc:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80013c0:	b003      	add	sp, #12
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80013c4:	2312      	movs	r3, #18
 80013c6:	e7a4      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80013c8:	2318      	movs	r3, #24
 80013ca:	e7a2      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80013cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d0:	e79f      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	e79d      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013d6:	461a      	mov	r2, r3
 80013d8:	6821      	ldr	r1, [r4, #0]
 80013da:	f7ff fe35 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013de:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013e0:	6953      	ldr	r3, [r2, #20]
 80013e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013e6:	e7c0      	b.n	800136a <HAL_ADC_ConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e8:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ec:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80013f0:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80013f4:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d13a      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x19a>
 80013fc:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8001400:	4287      	cmp	r7, r0
 8001402:	f040 8149 	bne.w	8001698 <HAL_ADC_ConfigChannel+0x3c0>
  MODIFY_REG(*preg,
 8001406:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800140a:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800140e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001410:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8001414:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001418:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800141c:	bb9f      	cbnz	r7, 8001486 <HAL_ADC_ConfigChannel+0x1ae>
 800141e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001422:	4283      	cmp	r3, r0
 8001424:	f040 813d 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x3ca>
  MODIFY_REG(*preg,
 8001428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800142c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800142e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001430:	6891      	ldr	r1, [r2, #8]
 8001432:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001436:	f102 0608 	add.w	r6, r2, #8
 800143a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800143e:	bb77      	cbnz	r7, 800149e <HAL_ADC_ConfigChannel+0x1c6>
 8001440:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001444:	4283      	cmp	r3, r0
 8001446:	f040 8147 	bne.w	80016d8 <HAL_ADC_ConfigChannel+0x400>
  MODIFY_REG(*preg,
 800144a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800144e:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001450:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800145c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001460:	bb4e      	cbnz	r6, 80014b6 <HAL_ADC_ConfigChannel+0x1de>
 8001462:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001466:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001468:	bf04      	itt	eq
 800146a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800146e:	6002      	streq	r2, [r0, #0]
 8001470:	e797      	b.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
 8001472:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001476:	fab0 f080 	clz	r0, r0
 800147a:	4287      	cmp	r7, r0
 800147c:	d0c3      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x12e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800147e:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001482:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	4283      	cmp	r3, r0
 8001490:	d0ca      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x150>
 8001492:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001494:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	f102 0608 	add.w	r6, r2, #8
 800149a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	4283      	cmp	r3, r0
 80014a8:	d0cf      	beq.n	800144a <HAL_ADC_ConfigChannel+0x172>
 80014aa:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014ae:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	e7d2      	b.n	8001466 <HAL_ADC_ConfigChannel+0x18e>
 80014c0:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014c4:	fab2 f282 	clz	r2, r2
 80014c8:	3201      	adds	r2, #1
 80014ca:	2a09      	cmp	r2, #9
 80014cc:	d90d      	bls.n	80014ea <HAL_ADC_ConfigChannel+0x212>
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	fab2 f282 	clz	r2, r2
 80014d6:	3201      	adds	r2, #1
 80014d8:	0696      	lsls	r6, r2, #26
 80014da:	fa93 f1a3 	rbit	r1, r3
 80014de:	fab1 f181 	clz	r1, r1
 80014e2:	1c4a      	adds	r2, r1, #1
 80014e4:	2101      	movs	r1, #1
 80014e6:	4091      	lsls	r1, r2
 80014e8:	e016      	b.n	8001518 <HAL_ADC_ConfigChannel+0x240>
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	3201      	adds	r2, #1
 80014f4:	0692      	lsls	r2, r2, #26
 80014f6:	fa93 f1a3 	rbit	r1, r3
 80014fa:	fab1 f181 	clz	r1, r1
 80014fe:	1c4e      	adds	r6, r1, #1
 8001500:	2101      	movs	r1, #1
 8001502:	40b1      	lsls	r1, r6
 8001504:	e07f      	b.n	8001606 <HAL_ADC_ConfigChannel+0x32e>
 8001506:	fa93 f1a3 	rbit	r1, r3
 800150a:	fab1 f181 	clz	r1, r1
 800150e:	3101      	adds	r1, #1
 8001510:	e080      	b.n	8001614 <HAL_ADC_ConfigChannel+0x33c>
 8001512:	4616      	mov	r6, r2
 8001514:	fa01 f10e 	lsl.w	r1, r1, lr
 8001518:	ea41 0206 	orr.w	r2, r1, r6
 800151c:	b94f      	cbnz	r7, 8001532 <HAL_ADC_ConfigChannel+0x25a>
 800151e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001526:	f1a3 011b 	sub.w	r1, r3, #27
 800152a:	0509      	lsls	r1, r1, #20
 800152c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001530:	e073      	b.n	800161a <HAL_ADC_ConfigChannel+0x342>
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	e7f2      	b.n	8001522 <HAL_ADC_ConfigChannel+0x24a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 800153e:	429a      	cmp	r2, r3
 8001540:	d104      	bne.n	800154c <HAL_ADC_ConfigChannel+0x274>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001544:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001546:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800154a:	e072      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 800154c:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800154e:	429a      	cmp	r2, r3
 8001550:	f47f af32 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001554:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001556:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001558:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800155c:	e069      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800155e:	4955      	ldr	r1, [pc, #340]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 8001560:	428a      	cmp	r2, r1
 8001562:	d111      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2b0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001564:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	f47f af26 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 800156c:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001570:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001574:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001578:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800157c:	430b      	orrs	r3, r1
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8001586:	e717      	b.n	80013b8 <HAL_ADC_ConfigChannel+0xe0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001588:	494c      	ldr	r1, [pc, #304]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800158a:	428a      	cmp	r2, r1
 800158c:	f47f af14 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	f47f af10 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001598:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800159c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a0:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80015a8:	430b      	orrs	r3, r1
 80015aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ae:	e7e8      	b.n	8001582 <HAL_ADC_ConfigChannel+0x2aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80015b8:	4618      	mov	r0, r3
 80015ba:	e6fe      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  __HAL_LOCK(hadc);
 80015bc:	2002      	movs	r0, #2
 80015be:	e6ff      	b.n	80013c0 <HAL_ADC_ConfigChannel+0xe8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015c0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80015c2:	4a40      	ldr	r2, [pc, #256]	; (80016c4 <HAL_ADC_ConfigChannel+0x3ec>)
 80015c4:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	f001 0e20 	and.w	lr, r1, #32
 80015ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80015d2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80015d6:	4072      	eors	r2, r6
 80015d8:	403a      	ands	r2, r7
 80015da:	4072      	eors	r2, r6
 80015dc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015e0:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <HAL_ADC_ConfigChannel+0x3f0>)
 80015e2:	4291      	cmp	r1, r2
 80015e4:	d11d      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x34a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015e6:	2f00      	cmp	r7, #0
 80015e8:	f47f af6a 	bne.w	80014c0 <HAL_ADC_ConfigChannel+0x1e8>
 80015ec:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015f0:	f101 0e01 	add.w	lr, r1, #1
 80015f4:	f1be 0f09 	cmp.w	lr, #9
 80015f8:	f04f 0101 	mov.w	r1, #1
 80015fc:	ea4f 628e 	mov.w	r2, lr, lsl #26
 8001600:	d887      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x23a>
 8001602:	fa01 f10e 	lsl.w	r1, r1, lr
 8001606:	430a      	orrs	r2, r1
 8001608:	2f00      	cmp	r7, #0
 800160a:	f47f af7c 	bne.w	8001506 <HAL_ADC_ConfigChannel+0x22e>
 800160e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001618:	0509      	lsls	r1, r1, #20
 800161a:	4311      	orrs	r1, r2
 800161c:	68a2      	ldr	r2, [r4, #8]
 800161e:	f7ff fd13 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 8001626:	429a      	cmp	r2, r3
 8001628:	d188      	bne.n	800153c <HAL_ADC_ConfigChannel+0x264>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001632:	f47f aec1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	6898      	ldr	r0, [r3, #8]
 800163a:	f000 0003 	and.w	r0, r0, #3
 800163e:	2801      	cmp	r0, #1
 8001640:	d102      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x370>
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	07c9      	lsls	r1, r1, #31
 8001646:	d422      	bmi.n	800168e <HAL_ADC_ConfigChannel+0x3b6>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001648:	4920      	ldr	r1, [pc, #128]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 800164a:	428a      	cmp	r2, r1
 800164c:	d187      	bne.n	800155e <HAL_ADC_ConfigChannel+0x286>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	f47f aeb1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001656:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800165a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800165e:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001662:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001666:	430b      	orrs	r3, r1
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_ADC_ConfigChannel+0x3f8>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_ADC_ConfigChannel+0x3fc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fbb3 f2f2 	udiv	r2, r3, r2
 800167a:	2378      	movs	r3, #120	; 0x78
 800167c:	4353      	muls	r3, r2
                wait_loop_index--;
 800167e:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8001680:	9b01      	ldr	r3, [sp, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f43f ae98 	beq.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
                wait_loop_index--;
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	e7f7      	b.n	800167e <HAL_ADC_ConfigChannel+0x3a6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001696:	e690      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001698:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800169c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016a0:	e6bd      	b.n	800141e <HAL_ADC_ConfigChannel+0x146>
 80016a2:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016a4:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	f102 0608 	add.w	r6, r2, #8
 80016aa:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016ae:	e6c7      	b.n	8001440 <HAL_ADC_ConfigChannel+0x168>
 80016b0:	03fff000 	.word	0x03fff000
 80016b4:	cb840000 	.word	0xcb840000
 80016b8:	50040300 	.word	0x50040300
 80016bc:	80000001 	.word	0x80000001
 80016c0:	50040000 	.word	0x50040000
 80016c4:	0007ffff 	.word	0x0007ffff
 80016c8:	407f0000 	.word	0x407f0000
 80016cc:	c7520000 	.word	0xc7520000
 80016d0:	20000ec4 	.word	0x20000ec4
 80016d4:	001e8480 	.word	0x001e8480
 80016d8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016dc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80016e4:	e6bd      	b.n	8001462 <HAL_ADC_ConfigChannel+0x18a>
 80016e6:	bf00      	nop

080016e8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016e8:	6803      	ldr	r3, [r0, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	f012 0f0c 	tst.w	r2, #12
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016f4:	d101      	bne.n	80016fa <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	0190      	lsls	r0, r2, #6
 80016fe:	d52a      	bpl.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 8001700:	69e2      	ldr	r2, [r4, #28]
 8001702:	2a01      	cmp	r2, #1
 8001704:	d127      	bne.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 8001706:	69a2      	ldr	r2, [r4, #24]
 8001708:	2a01      	cmp	r2, #1
 800170a:	d124      	bne.n	8001756 <ADC_ConversionStop+0x6e>
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	0649      	lsls	r1, r1, #25
 8001712:	d514      	bpl.n	800173e <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8001718:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	0756      	lsls	r6, r2, #29
 800171e:	d50a      	bpl.n	8001736 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001720:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001722:	0795      	lsls	r5, r2, #30
 8001724:	d407      	bmi.n	8001736 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800172c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001730:	f042 0210 	orr.w	r2, r2, #16
 8001734:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001736:	2901      	cmp	r1, #1
 8001738:	d10f      	bne.n	800175a <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800173a:	2504      	movs	r5, #4
        break;
 800173c:	e01e      	b.n	800177c <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800173e:	3a01      	subs	r2, #1
 8001740:	d1e5      	bne.n	800170e <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001756:	2902      	cmp	r1, #2
 8001758:	d1df      	bne.n	800171a <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	0710      	lsls	r0, r2, #28
 800175e:	d506      	bpl.n	800176e <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001760:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001762:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001764:	bf5e      	ittt	pl
 8001766:	689a      	ldrpl	r2, [r3, #8]
 8001768:	f042 0220 	orrpl.w	r2, r2, #32
 800176c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 800176e:	2902      	cmp	r1, #2
 8001770:	d003      	beq.n	800177a <ADC_ConversionStop+0x92>
 8001772:	2903      	cmp	r1, #3
 8001774:	d1e1      	bne.n	800173a <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001776:	250c      	movs	r5, #12
 8001778:	e000      	b.n	800177c <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800177a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 800177c:	f7ff fc50 	bl	8001020 <HAL_GetTick>
 8001780:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	421d      	tst	r5, r3
 8001788:	d0b5      	beq.n	80016f6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800178a:	f7ff fc49 	bl	8001020 <HAL_GetTick>
 800178e:	1b80      	subs	r0, r0, r6
 8001790:	2805      	cmp	r0, #5
 8001792:	d9f6      	bls.n	8001782 <ADC_ConversionStop+0x9a>
 8001794:	e7d5      	b.n	8001742 <ADC_ConversionStop+0x5a>
 8001796:	bf00      	nop
 8001798:	0a340001 	.word	0x0a340001

0800179c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800179c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800179e:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a0:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 80017a2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a4:	6893      	ldr	r3, [r2, #8]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
{
 80017ac:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017ae:	d108      	bne.n	80017c2 <ADC_Enable+0x26>
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	07d8      	lsls	r0, r3, #31
 80017b4:	d505      	bpl.n	80017c2 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	b002      	add	sp, #8
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	e012      	b.n	80017e8 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017c2:	6891      	ldr	r1, [r2, #8]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <ADC_Enable+0x94>)
 80017c6:	4219      	tst	r1, r3
 80017c8:	d127      	bne.n	800181a <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 80017ca:	6893      	ldr	r3, [r2, #8]
 80017cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <ADC_Enable+0x98>)
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <ADC_Enable+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80017e4:	230a      	movs	r3, #10
 80017e6:	4353      	muls	r3, r2
      wait_loop_index--;
 80017e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e5      	bne.n	80017bc <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 80017f0:	f7ff fc16 	bl	8001020 <HAL_GetTick>
 80017f4:	4e11      	ldr	r6, [pc, #68]	; (800183c <ADC_Enable+0xa0>)
 80017f6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	07db      	lsls	r3, r3, #31
 80017fe:	d4da      	bmi.n	80017b6 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001800:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 8001802:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8001804:	bf5f      	itttt	pl
 8001806:	6893      	ldrpl	r3, [r2, #8]
 8001808:	4033      	andpl	r3, r6
 800180a:	f043 0301 	orrpl.w	r3, r3, #1
 800180e:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001810:	f7ff fc06 	bl	8001020 <HAL_GetTick>
 8001814:	1b40      	subs	r0, r0, r5
 8001816:	2802      	cmp	r0, #2
 8001818:	d9ee      	bls.n	80017f8 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
 800182c:	e7c4      	b.n	80017b8 <ADC_Enable+0x1c>
 800182e:	bf00      	nop
 8001830:	8000003f 	.word	0x8000003f
 8001834:	20000ec4 	.word	0x20000ec4
 8001838:	001e8480 	.word	0x001e8480
 800183c:	7fffffc0 	.word	0x7fffffc0

08001840 <HAL_ADC_Start>:
{
 8001840:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001842:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001844:	689d      	ldr	r5, [r3, #8]
 8001846:	f015 0504 	ands.w	r5, r5, #4
{
 800184a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800184c:	d13a      	bne.n	80018c4 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 800184e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001852:	2b01      	cmp	r3, #1
 8001854:	d036      	beq.n	80018c4 <HAL_ADC_Start+0x84>
 8001856:	2301      	movs	r3, #1
 8001858:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800185c:	f7ff ff9e 	bl	800179c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001860:	2800      	cmp	r0, #0
 8001862:	d12c      	bne.n	80018be <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001864:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	65e3      	str	r3, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001874:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001876:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800187a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800187e:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	bf48      	it	mi
 8001882:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001884:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8001886:	bf52      	itee	pl
 8001888:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800188a:	f023 0306 	bicmi.w	r3, r3, #6
 800188e:	6623      	strmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001890:	231c      	movs	r3, #28
 8001892:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001894:	2300      	movs	r3, #0
 8001896:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800189a:	68d3      	ldr	r3, [r2, #12]
 800189c:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800189e:	bf41      	itttt	mi
 80018a0:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
 80018a2:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 80018a6:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 80018aa:	65e3      	strmi	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6093      	str	r3, [r2, #8]
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80018be:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80018c4:	2002      	movs	r0, #2
}
 80018c6:	bd38      	pop	{r3, r4, r5, pc}

080018c8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c8:	6802      	ldr	r2, [r0, #0]
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
 80018cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018ce:	6890      	ldr	r0, [r2, #8]
 80018d0:	f000 0003 	and.w	r0, r0, #3
 80018d4:	2801      	cmp	r0, #1
 80018d6:	d001      	beq.n	80018dc <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	07d9      	lsls	r1, r3, #31
 80018e0:	d5fa      	bpl.n	80018d8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018e2:	6893      	ldr	r3, [r2, #8]
 80018e4:	f003 030d 	and.w	r3, r3, #13
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d11f      	bne.n	800192c <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018fc:	2303      	movs	r3, #3
 80018fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001900:	f7ff fb8e 	bl	8001020 <HAL_GetTick>
 8001904:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	07db      	lsls	r3, r3, #31
 800190c:	d5e4      	bpl.n	80018d8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800190e:	f7ff fb87 	bl	8001020 <HAL_GetTick>
 8001912:	1b40      	subs	r0, r0, r5
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f6      	bls.n	8001906 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001920:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800192e:	f043 0310 	orr.w	r3, r3, #16
 8001932:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 800193c:	bd38      	pop	{r3, r4, r5, pc}

0800193e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800193e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001942:	2b01      	cmp	r3, #1
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001948:	d016      	beq.n	8001978 <HAL_ADC_Stop+0x3a>
 800194a:	2301      	movs	r3, #1
 800194c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001950:	2103      	movs	r1, #3
 8001952:	f7ff fec9 	bl	80016e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001956:	b958      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ffb5 	bl	80018c8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800195e:	b938      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001960:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8001970:	2300      	movs	r3, #0
 8001972:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8001976:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001978:	2002      	movs	r0, #2
}
 800197a:	bd10      	pop	{r4, pc}

0800197c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800197e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800198c:	0200      	lsls	r0, r0, #8
 800198e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001992:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001996:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001998:	60d3      	str	r3, [r2, #12]
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b530      	push	{r4, r5, lr}
 80019a4:	68dc      	ldr	r4, [r3, #12]
 80019a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	bf28      	it	cs
 80019b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 0501 	mov.w	r5, #1
 80019bc:	fa05 f303 	lsl.w	r3, r5, r3
 80019c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c4:	bf8c      	ite	hi
 80019c6:	3c03      	subhi	r4, #3
 80019c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ca:	4019      	ands	r1, r3
 80019cc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ce:	fa05 f404 	lsl.w	r4, r5, r4
 80019d2:	3c01      	subs	r4, #1
 80019d4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	ea42 0201 	orr.w	r2, r2, r1
 80019dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	bfaf      	iteee	ge
 80019e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	f000 000f 	andlt.w	r0, r0, #15
 80019ea:	4b06      	ldrlt	r3, [pc, #24]	; (8001a04 <HAL_NVIC_SetPriority+0x64>)
 80019ec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	bfa5      	ittet	ge
 80019f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80019f4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80019fc:	bd30      	pop	{r4, r5, pc}
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000ed14 	.word	0xe000ed14

08001a08 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a08:	0942      	lsrs	r2, r0, #5
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f000 001f 	and.w	r0, r0, #31
 8001a10:	fa03 f000 	lsl.w	r0, r3, r0
 8001a14:	4b01      	ldr	r3, [pc, #4]	; (8001a1c <HAL_NVIC_EnableIRQ+0x14>)
 8001a16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a20:	0943      	lsrs	r3, r0, #5
 8001a22:	2201      	movs	r2, #1
 8001a24:	f000 001f 	and.w	r0, r0, #31
 8001a28:	fa02 f000 	lsl.w	r0, r2, r0
 8001a2c:	3320      	adds	r3, #32
 8001a2e:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <HAL_NVIC_DisableIRQ+0x18>)
 8001a30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	3801      	subs	r0, #1
 8001a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a42:	d20a      	bcs.n	8001a5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a48:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	21f0      	movs	r1, #240	; 0xf0
 8001a4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a68:	0943      	lsrs	r3, r0, #5
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f000 001f 	and.w	r0, r0, #31
 8001a70:	fa02 f000 	lsl.w	r0, r2, r0
 8001a74:	3360      	adds	r3, #96	; 0x60
 8001a76:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001a78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a86:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a88:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a8a:	bf0c      	ite	eq
 8001a8c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a90:	f022 0204 	bicne.w	r2, r2, #4
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	4770      	bx	lr
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a9c:	4770      	bx	lr

08001a9e <HAL_SYSTICK_IRQHandler>:
{
 8001a9e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001aa0:	f7ff fffc 	bl	8001a9c <HAL_SYSTICK_Callback>
 8001aa4:	bd08      	pop	{r3, pc}

08001aa6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa6:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001aaa:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001aac:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001aae:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001ab0:	b114      	cbz	r4, 8001ab8 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab2:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001ab4:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001ab6:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ab8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001aba:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001abc:	f004 051c 	and.w	r5, r4, #28
 8001ac0:	2401      	movs	r4, #1
 8001ac2:	40ac      	lsls	r4, r5
 8001ac4:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ac6:	6804      	ldr	r4, [r0, #0]
 8001ac8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aca:	6883      	ldr	r3, [r0, #8]
 8001acc:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ace:	bf0b      	itete	eq
 8001ad0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ad2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ad4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001ad6:	60e2      	strne	r2, [r4, #12]
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001adc <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001adc:	6803      	ldr	r3, [r0, #0]
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
  }
  else
  {
    /* DMA2 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001ade:	490d      	ldr	r1, [pc, #52]	; (8001b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 8001ae2:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001ae4:	4c0d      	ldr	r4, [pc, #52]	; (8001b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8001ae6:	42a3      	cmp	r3, r4
 8001ae8:	bf88      	it	hi
 8001aea:	460a      	movhi	r2, r1
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001aec:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001aee:	f021 0103 	bic.w	r1, r1, #3
 8001af2:	440a      	add	r2, r1
 8001af4:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001af6:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001af8:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001afa:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001afc:	3b08      	subs	r3, #8
 8001afe:	2214      	movs	r2, #20
 8001b00:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001b04:	2201      	movs	r2, #1
 8001b06:	f003 031c 	and.w	r3, r3, #28
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	6503      	str	r3, [r0, #80]	; 0x50
 8001b10:	bd10      	pop	{r4, pc}
 8001b12:	bf00      	nop
 8001b14:	4002081c 	.word	0x4002081c
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020407 	.word	0x40020407
 8001b20:	40020880 	.word	0x40020880

08001b24 <HAL_DMA_Init>:
{
 8001b24:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8001b26:	4604      	mov	r4, r0
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d05d      	beq.n	8001be8 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b2c:	6801      	ldr	r1, [r0, #0]
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_DMA_Init+0xc8>)
 8001b30:	4299      	cmp	r1, r3
 8001b32:	f04f 0014 	mov.w	r0, #20
 8001b36:	d84a      	bhi.n	8001bce <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b38:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_DMA_Init+0xcc>)
 8001b3a:	440a      	add	r2, r1
 8001b3c:	fbb2 f2f0 	udiv	r2, r2, r0
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b44:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001b48:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001b50:	68e0      	ldr	r0, [r4, #12]
 8001b52:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8001b54:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001b56:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	6920      	ldr	r0, [r4, #16]
 8001b5a:	4303      	orrs	r3, r0
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b60:	69a0      	ldr	r0, [r4, #24]
 8001b62:	4303      	orrs	r3, r0
 8001b64:	69e0      	ldr	r0, [r4, #28]
 8001b66:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b68:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b6a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001b6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b72:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001b74:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001b76:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7ff ffaf 	bl	8001adc <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b7e:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b82:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b88:	bf04      	itt	eq
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b8e:	6862      	ldr	r2, [r4, #4]
 8001b90:	b2d3      	uxtb	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b94:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b98:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9a:	6048      	str	r0, [r1, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b9c:	d81f      	bhi.n	8001bde <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ba0:	4815      	ldr	r0, [pc, #84]	; (8001bf8 <HAL_DMA_Init+0xd4>)
 8001ba2:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ba4:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ba6:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ba8:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001baa:	2101      	movs	r1, #1
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bb4:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bb6:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bb8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bba:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bbc:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbe:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001bc0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001bc4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001bc8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 8001bcc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_DMA_Init+0xd8>)
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_DMA_Init+0xdc>)
 8001bdc:	e7b4      	b.n	8001b48 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001be2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001be4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001be6:	e7ea      	b.n	8001bbe <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
}
 8001bea:	bd10      	pop	{r4, pc}
 8001bec:	40020407 	.word	0x40020407
 8001bf0:	bffdfff8 	.word	0xbffdfff8
 8001bf4:	1000823f 	.word	0x1000823f
 8001bf8:	40020940 	.word	0x40020940
 8001bfc:	bffdfbf8 	.word	0xbffdfbf8
 8001c00:	40020400 	.word	0x40020400

08001c04 <HAL_DMA_DeInit>:
{
 8001c04:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma )
 8001c06:	4604      	mov	r4, r0
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d045      	beq.n	8001c98 <HAL_DMA_DeInit+0x94>
  __HAL_DMA_DISABLE(hdma);
 8001c0c:	6801      	ldr	r1, [r0, #0]
 8001c0e:	680b      	ldr	r3, [r1, #0]
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_DMA_DeInit+0x98>)
 8001c18:	4299      	cmp	r1, r3
 8001c1a:	f04f 0014 	mov.w	r0, #20
 8001c1e:	d833      	bhi.n	8001c88 <HAL_DMA_DeInit+0x84>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_DMA_DeInit+0x9c>)
 8001c22:	440a      	add	r2, r1
 8001c24:	fbb2 f2f0 	udiv	r2, r2, r0
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c2c:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001c30:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c36:	f003 031c 	and.w	r3, r3, #28
 8001c3a:	2501      	movs	r5, #1
 8001c3c:	fa05 f303 	lsl.w	r3, r5, r3
  hdma->Instance->CCR  = 0;
 8001c40:	2600      	movs	r6, #0
 8001c42:	600e      	str	r6, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c44:	4620      	mov	r0, r4
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c46:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c48:	f7ff ff48 	bl	8001adc <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 8001c4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c4e:	6861      	ldr	r1, [r4, #4]
  hdma->DMAmuxChannel->CCR = 0;
 8001c50:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c56:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c58:	1e4a      	subs	r2, r1, #1
 8001c5a:	2a03      	cmp	r2, #3
 8001c5c:	d806      	bhi.n	8001c6c <HAL_DMA_DeInit+0x68>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_DMA_DeInit+0xa0>)
 8001c60:	440b      	add	r3, r1
 8001c62:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c64:	4095      	lsls	r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c66:	601e      	str	r6, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_DMA_DeInit+0xa4>)
 8001c6a:	605d      	str	r5, [r3, #4]
  hdma->DMAmuxRequestGen = 0U;
 8001c6c:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->DMAmuxRequestGen = 0U;
 8001c70:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001c72:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c74:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8001c76:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c78:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001c7a:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001c7c:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 8001c7e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001c82:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return HAL_OK;
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_DMA_DeInit+0xa8>)
 8001c8a:	440b      	add	r3, r1
 8001c8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_DMA_DeInit+0xac>)
 8001c96:	e7cb      	b.n	8001c30 <HAL_DMA_DeInit+0x2c>
    return HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
}
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
 8001c9c:	40020407 	.word	0x40020407
 8001ca0:	bffdfff8 	.word	0xbffdfff8
 8001ca4:	1000823f 	.word	0x1000823f
 8001ca8:	40020940 	.word	0x40020940
 8001cac:	bffdfbf8 	.word	0xbffdfbf8
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <HAL_DMA_Start_IT>:
{
 8001cb4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001cb6:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8001cba:	2d01      	cmp	r5, #1
{
 8001cbc:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001cbe:	d039      	beq.n	8001d34 <HAL_DMA_Start_IT+0x80>
 8001cc0:	2501      	movs	r5, #1
 8001cc2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc6:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8001cca:	2d01      	cmp	r5, #1
 8001ccc:	f04f 0600 	mov.w	r6, #0
 8001cd0:	f04f 0502 	mov.w	r5, #2
 8001cd4:	d12c      	bne.n	8001d30 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd6:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cda:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001cdc:	6806      	ldr	r6, [r0, #0]
 8001cde:	6835      	ldr	r5, [r6, #0]
 8001ce0:	f025 0501 	bic.w	r5, r5, #1
 8001ce4:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce6:	f7ff fede 	bl	8001aa6 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001cea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	b1ba      	cbz	r2, 8001d20 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cf6:	601a      	str	r2, [r3, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cf8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cfa:	6811      	ldr	r1, [r2, #0]
 8001cfc:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cfe:	bf42      	ittt	mi
 8001d00:	6811      	ldrmi	r1, [r2, #0]
 8001d02:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8001d06:	6011      	strmi	r1, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001d08:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d0a:	b11a      	cbz	r2, 8001d14 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d0c:	6811      	ldr	r1, [r2, #0]
 8001d0e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001d12:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f042 020a 	orr.w	r2, r2, #10
 8001d2e:	e7e2      	b.n	8001cf6 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001d30:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001d34:	2002      	movs	r0, #2
}
 8001d36:	bd70      	pop	{r4, r5, r6, pc}

08001d38 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d38:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001d3c:	2b02      	cmp	r3, #2
{
 8001d3e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d40:	d003      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d42:	2304      	movs	r3, #4
 8001d44:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001d46:	2001      	movs	r0, #1
 8001d48:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f022 020e 	bic.w	r2, r2, #14
 8001d54:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d5e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001d60:	6813      	ldr	r3, [r2, #0]
 8001d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d68:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d6a:	f003 021c 	and.w	r2, r3, #28
 8001d6e:	2301      	movs	r3, #1
 8001d70:	4093      	lsls	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d76:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001d78:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001d7a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d7c:	b133      	cbz	r3, 8001d8c <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d86:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d88:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d8a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferAbortCallback != NULL)
 8001d92:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001d94:	2400      	movs	r4, #0
 8001d96:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001d9a:	b113      	cbz	r3, 8001da2 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001d9c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	4620      	mov	r0, r4
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	4618      	mov	r0, r3
}
 8001da4:	bd10      	pop	{r4, pc}

08001da6 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001da6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001daa:	6803      	ldr	r3, [r0, #0]
{
 8001dac:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001dae:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001db2:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001db4:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001db6:	2404      	movs	r4, #4
 8001db8:	4094      	lsls	r4, r2
 8001dba:	4226      	tst	r6, r4
 8001dbc:	d00e      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x36>
 8001dbe:	f015 0f04 	tst.w	r5, #4
 8001dc2:	d00b      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dc8:	bf5e      	ittt	pl
 8001dca:	681a      	ldrpl	r2, [r3, #0]
 8001dcc:	f022 0204 	bicpl.w	r2, r2, #4
 8001dd0:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001dd2:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001dd4:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001dd6:	b373      	cbz	r3, 8001e36 <HAL_DMA_IRQHandler+0x90>
}
 8001dd8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001dda:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001ddc:	2402      	movs	r4, #2
 8001dde:	4094      	lsls	r4, r2
 8001de0:	4226      	tst	r6, r4
 8001de2:	d012      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x64>
 8001de4:	f015 0f02 	tst.w	r5, #2
 8001de8:	d00f      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	0695      	lsls	r5, r2, #26
 8001dee:	d406      	bmi.n	8001dfe <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	f022 020a 	bic.w	r2, r2, #10
 8001df6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001dfe:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e00:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001e02:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001e06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001e08:	e7e5      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001e0a:	2408      	movs	r4, #8
 8001e0c:	4094      	lsls	r4, r2
 8001e0e:	4234      	tst	r4, r6
 8001e10:	d011      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x90>
 8001e12:	072c      	lsls	r4, r5, #28
 8001e14:	d50f      	bpl.n	8001e36 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e16:	681c      	ldr	r4, [r3, #0]
 8001e18:	f024 040e 	bic.w	r4, r4, #14
 8001e1c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e1e:	2301      	movs	r3, #1
 8001e20:	fa03 f202 	lsl.w	r2, r3, r2
 8001e24:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e26:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e28:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001e32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e34:	e7cf      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x30>
}
 8001e36:	bc70      	pop	{r4, r5, r6}
 8001e38:	4770      	bx	lr
	...

08001e3c <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8001e3e:	6805      	ldr	r5, [r0, #0]
 8001e40:	4e0a      	ldr	r6, [pc, #40]	; (8001e6c <DMA2D_SetConfig+0x30>)
 8001e42:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001e44:	fa96 f6a6 	rbit	r6, r6
 8001e48:	9f05      	ldr	r7, [sp, #20]
 8001e4a:	fab6 f686 	clz	r6, r6
 8001e4e:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001e52:	433c      	orrs	r4, r7
 8001e54:	40b3      	lsls	r3, r6
 8001e56:	4323      	orrs	r3, r4
 8001e58:	646b      	str	r3, [r5, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e5a:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001e5c:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, pdata);    
 8001e62:	bf0c      	ite	eq
 8001e64:	63a9      	streq	r1, [r5, #56]	; 0x38
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
  WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001e66:	60e9      	strne	r1, [r5, #12]
 8001e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	3fff0000 	.word	0x3fff0000

08001e70 <HAL_DMA2D_Init>:
{ 
 8001e70:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d == NULL)
 8001e72:	4604      	mov	r4, r0
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d043      	beq.n	8001f00 <HAL_DMA2D_Init+0x90>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001e78:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001e7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e80:	b91b      	cbnz	r3, 8001e8a <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8001e82:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_DMA2D_MspInit(hdma2d);
 8001e86:	f01d f9df 	bl	801f248 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	69e0      	ldr	r0, [r4, #28]
 8001e94:	6819      	ldr	r1, [r3, #0]
 8001e96:	6862      	ldr	r2, [r4, #4]
 8001e98:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8001e9c:	4302      	orrs	r2, r0
 8001e9e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001ea6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea8:	68a2      	ldr	r2, [r4, #8]
 8001eaa:	69a0      	ldr	r0, [r4, #24]
 8001eac:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8001eb0:	4302      	orrs	r2, r0
 8001eb2:	f021 0101 	bic.w	r1, r1, #1
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebc:	68e1      	ldr	r1, [r4, #12]
 8001ebe:	0c12      	lsrs	r2, r2, #16
 8001ec0:	0412      	lsls	r2, r2, #16
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 8001ec6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001ec8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001ed4:	fab2 f082 	clz	r0, r2
 8001ed8:	fa91 f1a1 	rbit	r1, r1
 8001edc:	6922      	ldr	r2, [r4, #16]
 8001ede:	4082      	lsls	r2, r0
 8001ee0:	6960      	ldr	r0, [r4, #20]
 8001ee2:	fab1 f181 	clz	r1, r1
 8001ee6:	fa00 f101 	lsl.w	r1, r0, r1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	f425 1140 	bic.w	r1, r5, #3145728	; 0x300000
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ef4:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ef6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ef8:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001efa:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  return HAL_OK;
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001f00:	2001      	movs	r0, #1
}
 8001f02:	bd38      	pop	{r3, r4, r5, pc}

08001f04 <HAL_DMA2D_Start>:
{
 8001f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001f06:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 8001f0a:	2c01      	cmp	r4, #1
 8001f0c:	f04f 0402 	mov.w	r4, #2
 8001f10:	d00f      	beq.n	8001f32 <HAL_DMA2D_Start+0x2e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f12:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  __HAL_LOCK(hdma2d);
 8001f16:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f18:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001f1a:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f1e:	9400      	str	r4, [sp, #0]
 8001f20:	f7ff ff8c 	bl	8001e3c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001f24:	6802      	ldr	r2, [r0, #0]
 8001f26:	6813      	ldr	r3, [r2, #0]
 8001f28:	4333      	orrs	r3, r6
 8001f2a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001f2c:	2000      	movs	r0, #0
}
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001f32:	4620      	mov	r0, r4
 8001f34:	e7fb      	b.n	8001f2e <HAL_DMA2D_Start+0x2a>

08001f36 <HAL_DMA2D_PollForTransfer>:
{
 8001f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001f3c:	6803      	ldr	r3, [r0, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	07db      	lsls	r3, r3, #31
{
 8001f42:	4604      	mov	r4, r0
 8001f44:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001f46:	d427      	bmi.n	8001f98 <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	69da      	ldr	r2, [r3, #28]
 8001f4c:	0696      	lsls	r6, r2, #26
 8001f4e:	d55c      	bpl.n	800200a <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8001f50:	f7ff f866 	bl	8001020 <HAL_GetTick>
 8001f54:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	06d2      	lsls	r2, r2, #27
 8001f5c:	d458      	bmi.n	8002010 <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001f62:	9a01      	ldr	r2, [sp, #4]
 8001f64:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001f68:	d05d      	beq.n	8002026 <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001f6a:	9a01      	ldr	r2, [sp, #4]
 8001f6c:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001f6e:	bf42      	ittt	mi
 8001f70:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f72:	f042 0204 	orrmi.w	r2, r2, #4
 8001f76:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001f78:	9a01      	ldr	r2, [sp, #4]
 8001f7a:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001f7c:	bf42      	ittt	mi
 8001f7e:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f80:	f042 0202 	orrmi.w	r2, r2, #2
 8001f84:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001f86:	9a01      	ldr	r2, [sp, #4]
 8001f88:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001f8a:	bf42      	ittt	mi
 8001f8c:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f8e:	f042 0201 	orrmi.w	r2, r2, #1
 8001f92:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f94:	2229      	movs	r2, #41	; 0x29
 8001f96:	e01b      	b.n	8001fd0 <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8001f98:	f7ff f842 	bl	8001020 <HAL_GetTick>
 8001f9c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	0792      	lsls	r2, r2, #30
 8001fa4:	d4d0      	bmi.n	8001f48 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001faa:	9a01      	ldr	r2, [sp, #4]
 8001fac:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001fb0:	d017      	beq.n	8001fe2 <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001fb2:	9a01      	ldr	r2, [sp, #4]
 8001fb4:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001fb6:	bf42      	ittt	mi
 8001fb8:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001fba:	f042 0202 	orrmi.w	r2, r2, #2
 8001fbe:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001fc0:	9a01      	ldr	r2, [sp, #4]
 8001fc2:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001fc4:	bf42      	ittt	mi
 8001fc6:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001fc8:	f042 0201 	orrmi.w	r2, r2, #1
 8001fcc:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fce:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fd0:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(hdma2d);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;      
 8001fde:	2001      	movs	r0, #1
 8001fe0:	e01f      	b.n	8002022 <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 8001fe2:	1c69      	adds	r1, r5, #1
 8001fe4:	d0dc      	beq.n	8001fa0 <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fe6:	b955      	cbnz	r5, 8001ffe <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001fe8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	65e3      	str	r3, [r4, #92]	; 0x5c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001ff0:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001ff2:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001ff4:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          __HAL_UNLOCK(hdma2d);
 8001ff8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          return HAL_TIMEOUT;
 8001ffc:	e011      	b.n	8002022 <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ffe:	f7ff f80f 	bl	8001020 <HAL_GetTick>
 8002002:	1b80      	subs	r0, r0, r6
 8002004:	4285      	cmp	r5, r0
 8002006:	d2ca      	bcs.n	8001f9e <HAL_DMA2D_PollForTransfer+0x68>
 8002008:	e7ee      	b.n	8001fe8 <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 800200c:	069b      	lsls	r3, r3, #26
 800200e:	d49f      	bmi.n	8001f50 <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	2212      	movs	r2, #18
 8002014:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002016:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002018:	2301      	movs	r3, #1
 800201a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);
 800201e:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8002022:	b002      	add	sp, #8
 8002024:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8002026:	1c69      	adds	r1, r5, #1
 8002028:	d096      	beq.n	8001f58 <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800202a:	2d00      	cmp	r5, #0
 800202c:	d0dc      	beq.n	8001fe8 <HAL_DMA2D_PollForTransfer+0xb2>
 800202e:	f7fe fff7 	bl	8001020 <HAL_GetTick>
 8002032:	1b80      	subs	r0, r0, r6
 8002034:	4285      	cmp	r5, r0
 8002036:	d28e      	bcs.n	8001f56 <HAL_DMA2D_PollForTransfer+0x20>
 8002038:	e7d6      	b.n	8001fe8 <HAL_DMA2D_PollForTransfer+0xb2>
	...

0800203c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800203c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8002040:	2b01      	cmp	r3, #1
{   
 8002042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002044:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8002048:	d041      	beq.n	80020ce <HAL_DMA2D_ConfigLayer+0x92>
 800204a:	2201      	movs	r2, #1
 800204c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 8002050:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 8002054:	6802      	ldr	r2, [r0, #0]
  if(LayerIdx == 0)
 8002056:	2900      	cmp	r1, #0
 8002058:	d14d      	bne.n	80020f6 <HAL_DMA2D_ConfigLayer+0xba>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800205a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800205c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800205e:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8002060:	f1a6 0509 	sub.w	r5, r6, #9
 8002064:	2d01      	cmp	r5, #1
 8002066:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800206a:	d832      	bhi.n	80020d2 <HAL_DMA2D_ConfigLayer+0x96>
 800206c:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA));
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	f004 417f 	and.w	r1, r4, #4278190080	; 0xff000000
 8002078:	4331      	orrs	r1, r6
 800207a:	fa07 f303 	lsl.w	r3, r7, r3
 800207e:	4319      	orrs	r1, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 8002080:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8002084:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002090:	fab3 f783 	clz	r7, r3
 8002094:	fa96 f6a6 	rbit	r6, r6
 8002098:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800209a:	40bb      	lsls	r3, r7
 800209c:	4f3c      	ldr	r7, [pc, #240]	; (8002190 <HAL_DMA2D_ConfigLayer+0x154>)
 800209e:	ea0e 0707 	and.w	r7, lr, r7
 80020a2:	4339      	orrs	r1, r7
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80020a8:	fab6 f686 	clz	r6, r6
 80020ac:	fa01 f606 	lsl.w	r6, r1, r6
 80020b0:	4333      	orrs	r3, r6
 80020b2:	6253      	str	r3, [r2, #36]	; 0x24
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020b4:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 80020b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020b8:	6193      	str	r3, [r2, #24]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020ba:	d802      	bhi.n	80020c2 <HAL_DMA2D_ConfigLayer+0x86>
      WRITE_REG(hdma2d->Instance->BGCOLR, LayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80020bc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80020c0:	6294      	str	r4, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);  
 80020c8:	2300      	movs	r3, #0
 80020ca:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  __HAL_LOCK(hdma2d);
 80020ce:	4618      	mov	r0, r3
}
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA));
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	fa91 f1a1 	rbit	r1, r1
 80020e2:	fab1 f181 	clz	r1, r1
 80020e6:	fa04 f101 	lsl.w	r1, r4, r1
 80020ea:	fa07 f303 	lsl.w	r3, r7, r3
 80020ee:	430b      	orrs	r3, r1
 80020f0:	ea43 0106 	orr.w	r1, r3, r6
 80020f4:	e7c4      	b.n	8002080 <HAL_DMA2D_ConfigLayer+0x44>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020f6:	2418      	movs	r4, #24
 80020f8:	fb04 0401 	mla	r4, r4, r1, r0
 80020fc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002100:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002102:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8002104:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8002106:	f1a7 0509 	sub.w	r5, r7, #9
 800210a:	2d01      	cmp	r5, #1
 800210c:	d82f      	bhi.n	800216e <HAL_DMA2D_ConfigLayer+0x132>
 800210e:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_FGPFCCR_ALPHA));
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 800211a:	4337      	orrs	r7, r6
 800211c:	fa04 f303 	lsl.w	r3, r4, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8002120:	433b      	orrs	r3, r7
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 8002122:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8002126:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 800212a:	fa94 f4a4 	rbit	r4, r4
 800212e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002132:	fab4 f784 	clz	r7, r4
 8002136:	fa96 f6a6 	rbit	r6, r6
 800213a:	2418      	movs	r4, #24
 800213c:	fb04 0101 	mla	r1, r4, r1, r0
 8002140:	fab6 f686 	clz	r6, r6
 8002144:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8002146:	40bc      	lsls	r4, r7
 8002148:	4f11      	ldr	r7, [pc, #68]	; (8002190 <HAL_DMA2D_ConfigLayer+0x154>)
 800214a:	ea0e 0707 	and.w	r7, lr, r7
 800214e:	433b      	orrs	r3, r7
 8002150:	4323      	orrs	r3, r4
 8002152:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8002154:	fa04 f606 	lsl.w	r6, r4, r6
 8002158:	4333      	orrs	r3, r6
 800215a:	61d3      	str	r3, [r2, #28]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800215c:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 800215e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002160:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, LayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8002162:	bf9e      	ittt	ls
 8002164:	6b4b      	ldrls	r3, [r1, #52]	; 0x34
 8002166:	f023 437f 	bicls.w	r3, r3, #4278190080	; 0xff000000
 800216a:	6213      	strls	r3, [r2, #32]
 800216c:	e7a9      	b.n	80020c2 <HAL_DMA2D_ConfigLayer+0x86>
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	fa9e feae 	rbit	lr, lr
 800217e:	fabe fe8e 	clz	lr, lr
 8002182:	fa04 f303 	lsl.w	r3, r4, r3
 8002186:	fa06 f60e 	lsl.w	r6, r6, lr
 800218a:	4333      	orrs	r3, r6
 800218c:	e7c8      	b.n	8002120 <HAL_DMA2D_ConfigLayer+0xe4>
 800218e:	bf00      	nop
 8002190:	00ccfff0 	.word	0x00ccfff0

08002194 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <FLASH_Program_Fast+0x20>)
 8002196:	6953      	ldr	r3, [r2, #20]
 8002198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800219c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800219e:	b672      	cpsid	i
 80021a0:	f501 7300 	add.w	r3, r1, #512	; 0x200
 80021a4:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80021a6:	680a      	ldr	r2, [r1, #0]
 80021a8:	500a      	str	r2, [r1, r0]
    dest_addr++;
    src_addr++;
 80021aa:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 80021ac:	4299      	cmp	r1, r3
 80021ae:	d1fa      	bne.n	80021a6 <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 80021b0:	b662      	cpsie	i
 80021b2:	4770      	bx	lr
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_FLASH_Unlock+0x1c>)
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80021be:	bfbf      	itttt	lt
 80021c0:	4a05      	ldrlt	r2, [pc, #20]	; (80021d8 <HAL_FLASH_Unlock+0x20>)
 80021c2:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80021c4:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80021c8:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80021ca:	bfba      	itte	lt
 80021cc:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80021ce:	0fc0      	lsrlt	r0, r0, #31
 80021d0:	2000      	movge	r0, #0
}
 80021d2:	4770      	bx	lr
 80021d4:	40022000 	.word	0x40022000
 80021d8:	45670123 	.word	0x45670123

080021dc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80021dc:	4a03      	ldr	r2, [pc, #12]	; (80021ec <HAL_FLASH_Lock+0x10>)
 80021de:	6953      	ldr	r3, [r2, #20]
 80021e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021e4:	6153      	str	r3, [r2, #20]
}
 80021e6:	2000      	movs	r0, #0
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000

080021f0 <FLASH_WaitForLastOperation>:
{
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7fe ff14 	bl	8001020 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80021f8:	4c1a      	ldr	r4, [pc, #104]	; (8002264 <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 80021fa:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80021fc:	6923      	ldr	r3, [r4, #16]
 80021fe:	03db      	lsls	r3, r3, #15
 8002200:	d41e      	bmi.n	8002240 <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002202:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8002204:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002206:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800220a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800220e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002212:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8002216:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 800221a:	4318      	orrs	r0, r3
 800221c:	d019      	beq.n	8002252 <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <FLASH_WaitForLastOperation+0x78>)
 8002220:	6853      	ldr	r3, [r2, #4]
 8002222:	4303      	orrs	r3, r0
 8002224:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8002226:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 800222a:	bf1e      	ittt	ne
 800222c:	69a2      	ldrne	r2, [r4, #24]
 800222e:	4313      	orrne	r3, r2
 8002230:	61a3      	strne	r3, [r4, #24]
 8002232:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 8002236:	d001      	beq.n	800223c <FLASH_WaitForLastOperation+0x4c>
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <FLASH_WaitForLastOperation+0x74>)
 800223a:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002240:	1c6a      	adds	r2, r5, #1
 8002242:	d0db      	beq.n	80021fc <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002244:	f7fe feec 	bl	8001020 <HAL_GetTick>
 8002248:	1b80      	subs	r0, r0, r6
 800224a:	4285      	cmp	r5, r0
 800224c:	d8d6      	bhi.n	80021fc <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 800224e:	2003      	movs	r0, #3
 8002250:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002252:	6923      	ldr	r3, [r4, #16]
 8002254:	f013 0301 	ands.w	r3, r3, #1
 8002258:	d002      	beq.n	8002260 <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800225a:	2301      	movs	r3, #1
 800225c:	6123      	str	r3, [r4, #16]
 800225e:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002260:	4618      	mov	r0, r3
}
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	40022000 	.word	0x40022000
 8002268:	20000000 	.word	0x20000000

0800226c <HAL_FLASH_Program>:
{
 800226c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002270:	4c24      	ldr	r4, [pc, #144]	; (8002304 <HAL_FLASH_Program+0x98>)
{
 8002272:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8002274:	7823      	ldrb	r3, [r4, #0]
 8002276:	2b01      	cmp	r3, #1
{
 8002278:	4607      	mov	r7, r0
 800227a:	4688      	mov	r8, r1
 800227c:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 800227e:	d03f      	beq.n	8002300 <HAL_FLASH_Program+0x94>
 8002280:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002282:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002286:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002288:	f7ff ffb2 	bl	80021f0 <FLASH_WaitForLastOperation>
 800228c:	4606      	mov	r6, r0
  if(status == HAL_OK)
 800228e:	bb20      	cbnz	r0, 80022da <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002290:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002292:	481d      	ldr	r0, [pc, #116]	; (8002308 <HAL_FLASH_Program+0x9c>)
 8002294:	6805      	ldr	r5, [r0, #0]
 8002296:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800229a:	bf17      	itett	ne
 800229c:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800229e:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80022a0:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80022a4:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80022a6:	bf1c      	itt	ne
 80022a8:	2302      	movne	r3, #2
 80022aa:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80022ac:	b9d7      	cbnz	r7, 80022e4 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80022ae:	6945      	ldr	r5, [r0, #20]
 80022b0:	f045 0501 	orr.w	r5, r5, #1
 80022b4:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80022b6:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 80022ba:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80022bc:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022c4:	f7ff ff94 	bl	80021f0 <FLASH_WaitForLastOperation>
 80022c8:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 80022ca:	b125      	cbz	r5, 80022d6 <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_FLASH_Program+0x9c>)
 80022ce:	6953      	ldr	r3, [r2, #20]
 80022d0:	ea23 0505 	bic.w	r5, r3, r5
 80022d4:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 80022d6:	f000 f85d 	bl	8002394 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80022da:	2300      	movs	r3, #0
 80022dc:	7023      	strb	r3, [r4, #0]
}
 80022de:	4630      	mov	r0, r6
 80022e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80022e4:	1e7b      	subs	r3, r7, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d901      	bls.n	80022ee <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 80022ea:	2500      	movs	r5, #0
 80022ec:	e7e8      	b.n	80022c0 <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80022ee:	4649      	mov	r1, r9
 80022f0:	4640      	mov	r0, r8
 80022f2:	f7ff ff4f 	bl	8002194 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80022f6:	2f02      	cmp	r7, #2
 80022f8:	d1f7      	bne.n	80022ea <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 80022fa:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80022fe:	e7df      	b.n	80022c0 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8002300:	2602      	movs	r6, #2
 8002302:	e7ec      	b.n	80022de <HAL_FLASH_Program+0x72>
 8002304:	20000000 	.word	0x20000000
 8002308:	40022000 	.word	0x40022000

0800230c <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <FLASH_MassErase+0x40>)
 800230e:	6a13      	ldr	r3, [r2, #32]
 8002310:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002314:	4613      	mov	r3, r2
 8002316:	d011      	beq.n	800233c <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002318:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800231a:	bf42      	ittt	mi
 800231c:	6952      	ldrmi	r2, [r2, #20]
 800231e:	f042 0204 	orrmi.w	r2, r2, #4
 8002322:	615a      	strmi	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002324:	0782      	lsls	r2, r0, #30
 8002326:	d503      	bpl.n	8002330 <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800232e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002330:	4a06      	ldr	r2, [pc, #24]	; (800234c <FLASH_MassErase+0x40>)
 8002332:	6953      	ldr	r3, [r2, #20]
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6153      	str	r3, [r2, #20]
 800233a:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800233c:	6953      	ldr	r3, [r2, #20]
 800233e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	6153      	str	r3, [r2, #20]
 8002348:	e7f2      	b.n	8002330 <FLASH_MassErase+0x24>
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000

08002350 <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <FLASH_PageErase+0x40>)
 8002352:	6a1a      	ldr	r2, [r3, #32]
 8002354:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002358:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800235a:	d113      	bne.n	8002384 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800235c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002360:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	00c0      	lsls	r0, r0, #3
 8002366:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800236a:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 800236e:	4310      	orrs	r0, r2
 8002370:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	f042 0202 	orr.w	r2, r2, #2
 8002378:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002380:	615a      	str	r2, [r3, #20]
 8002382:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 8002384:	07c9      	lsls	r1, r1, #31
 8002386:	d4e9      	bmi.n	800235c <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238c:	e7e8      	b.n	8002360 <FLASH_PageErase+0x10>
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000

08002394 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002394:	4913      	ldr	r1, [pc, #76]	; (80023e4 <FLASH_FlushCaches+0x50>)
 8002396:	7f0b      	ldrb	r3, [r1, #28]
 8002398:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 800239a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800239e:	2a01      	cmp	r2, #1
 80023a0:	d10c      	bne.n	80023bc <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80023a2:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <FLASH_FlushCaches+0x54>)
 80023a4:	6810      	ldr	r0, [r2, #0]
 80023a6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80023aa:	6010      	str	r0, [r2, #0]
 80023ac:	6810      	ldr	r0, [r2, #0]
 80023ae:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80023b2:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b4:	6810      	ldr	r0, [r2, #0]
 80023b6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80023ba:	6010      	str	r0, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80023bc:	3b02      	subs	r3, #2
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d80c      	bhi.n	80023dc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <FLASH_FlushCaches+0x54>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023d2:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023da:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80023dc:	2300      	movs	r3, #0
 80023de:	770b      	strb	r3, [r1, #28]
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_FLASHEx_Erase>:
{
 80023ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80023f0:	4c35      	ldr	r4, [pc, #212]	; (80024c8 <HAL_FLASHEx_Erase+0xdc>)
 80023f2:	7823      	ldrb	r3, [r4, #0]
 80023f4:	2b01      	cmp	r3, #1
{
 80023f6:	4606      	mov	r6, r0
 80023f8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80023fa:	d062      	beq.n	80024c2 <HAL_FLASHEx_Erase+0xd6>
 80023fc:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023fe:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002402:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002404:	f7ff fef4 	bl	80021f0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8002408:	4605      	mov	r5, r0
 800240a:	bb40      	cbnz	r0, 800245e <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800240e:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002416:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002418:	d026      	beq.n	8002468 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800241a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	0551      	lsls	r1, r2, #21
 8002424:	d506      	bpl.n	8002434 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242c:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800242e:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002430:	7723      	strb	r3, [r4, #28]
 8002432:	e000      	b.n	8002436 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002434:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002436:	6833      	ldr	r3, [r6, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d11f      	bne.n	800247c <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 800243c:	6870      	ldr	r0, [r6, #4]
 800243e:	f7ff ff65 	bl	800230c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002442:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002446:	f7ff fed3 	bl	80021f0 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800244a:	4a20      	ldr	r2, [pc, #128]	; (80024cc <HAL_FLASHEx_Erase+0xe0>)
 800244c:	6953      	ldr	r3, [r2, #20]
 800244e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002452:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002456:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002458:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800245a:	f7ff ff9b 	bl	8002394 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800245e:	2300      	movs	r3, #0
 8002460:	7023      	strb	r3, [r4, #0]
}
 8002462:	4628      	mov	r0, r5
 8002464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002468:	0552      	lsls	r2, r2, #21
 800246a:	d505      	bpl.n	8002478 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002472:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002474:	2302      	movs	r3, #2
 8002476:	e7db      	b.n	8002430 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002478:	7720      	strb	r0, [r4, #28]
 800247a:	e7dc      	b.n	8002436 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
 8002480:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002484:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002486:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80024cc <HAL_FLASHEx_Erase+0xe0>
 800248a:	f8df a044 	ldr.w	sl, [pc, #68]	; 80024d0 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800248e:	68b3      	ldr	r3, [r6, #8]
 8002490:	68f2      	ldr	r2, [r6, #12]
 8002492:	4413      	add	r3, r2
 8002494:	429f      	cmp	r7, r3
 8002496:	d2e0      	bcs.n	800245a <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002498:	6871      	ldr	r1, [r6, #4]
 800249a:	4638      	mov	r0, r7
 800249c:	f7ff ff58 	bl	8002350 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024a4:	f7ff fea4 	bl	80021f0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80024a8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80024ac:	ea03 030a 	and.w	r3, r3, sl
 80024b0:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80024b4:	b118      	cbz	r0, 80024be <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 80024b6:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024ba:	4605      	mov	r5, r0
          break;
 80024bc:	e7cd      	b.n	800245a <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80024be:	3701      	adds	r7, #1
 80024c0:	e7e5      	b.n	800248e <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 80024c2:	2502      	movs	r5, #2
 80024c4:	e7cd      	b.n	8002462 <HAL_FLASHEx_Erase+0x76>
 80024c6:	bf00      	nop
 80024c8:	20000000 	.word	0x20000000
 80024cc:	40022000 	.word	0x40022000
 80024d0:	fffff805 	.word	0xfffff805

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d8:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024dc:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8002680 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024e0:	4a65      	ldr	r2, [pc, #404]	; (8002678 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 80024e2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e4:	fa38 f403 	lsrs.w	r4, r8, r3
 80024e8:	d102      	bne.n	80024f0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80024ea:	b003      	add	sp, #12
 80024ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f0:	f04f 0e01 	mov.w	lr, #1
 80024f4:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80024f8:	ea18 060e 	ands.w	r6, r8, lr
 80024fc:	f000 80ab 	beq.w	8002656 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002500:	684c      	ldr	r4, [r1, #4]
 8002502:	f024 0710 	bic.w	r7, r4, #16
 8002506:	2f02      	cmp	r7, #2
 8002508:	d116      	bne.n	8002538 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800250a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800250e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002512:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002516:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800251a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800251e:	f04f 0c0f 	mov.w	ip, #15
 8002522:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002526:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800252a:	690d      	ldr	r5, [r1, #16]
 800252c:	fa05 f50b 	lsl.w	r5, r5, fp
 8002530:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002534:	f8ca 5020 	str.w	r5, [sl, #32]
 8002538:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800253c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800253e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002542:	fa05 f50a 	lsl.w	r5, r5, sl
 8002546:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002548:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800254c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002550:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002554:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002556:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800255a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800255c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002560:	d811      	bhi.n	8002586 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002562:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002564:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002568:	68cf      	ldr	r7, [r1, #12]
 800256a:	fa07 fc0a 	lsl.w	ip, r7, sl
 800256e:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002572:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002574:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002576:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800257a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800257e:	409f      	lsls	r7, r3
 8002580:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002584:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002586:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002588:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800258a:	688f      	ldr	r7, [r1, #8]
 800258c:	fa07 f70a 	lsl.w	r7, r7, sl
 8002590:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002592:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002594:	00e5      	lsls	r5, r4, #3
 8002596:	d55e      	bpl.n	8002656 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002598:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800259c:	f045 0501 	orr.w	r5, r5, #1
 80025a0:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80025a4:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80025a8:	f023 0703 	bic.w	r7, r3, #3
 80025ac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80025b0:	f005 0501 	and.w	r5, r5, #1
 80025b4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80025b8:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ba:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80025c0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c4:	f04f 0c0f 	mov.w	ip, #15
 80025c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80025cc:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025d4:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d8:	d03f      	beq.n	800265a <HAL_GPIO_Init+0x186>
 80025da:	4d28      	ldr	r5, [pc, #160]	; (800267c <HAL_GPIO_Init+0x1a8>)
 80025dc:	42a8      	cmp	r0, r5
 80025de:	d03e      	beq.n	800265e <HAL_GPIO_Init+0x18a>
 80025e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025e4:	42a8      	cmp	r0, r5
 80025e6:	d03c      	beq.n	8002662 <HAL_GPIO_Init+0x18e>
 80025e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025ec:	42a8      	cmp	r0, r5
 80025ee:	d03a      	beq.n	8002666 <HAL_GPIO_Init+0x192>
 80025f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025f4:	42a8      	cmp	r0, r5
 80025f6:	d038      	beq.n	800266a <HAL_GPIO_Init+0x196>
 80025f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025fc:	42a8      	cmp	r0, r5
 80025fe:	d036      	beq.n	800266e <HAL_GPIO_Init+0x19a>
 8002600:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002604:	42a8      	cmp	r0, r5
 8002606:	d034      	beq.n	8002672 <HAL_GPIO_Init+0x19e>
 8002608:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800260c:	42a8      	cmp	r0, r5
 800260e:	bf14      	ite	ne
 8002610:	2508      	movne	r5, #8
 8002612:	2507      	moveq	r5, #7
 8002614:	fa05 f50e 	lsl.w	r5, r5, lr
 8002618:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800261c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 800261e:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8002620:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002622:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002626:	bf0c      	ite	eq
 8002628:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800262a:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 800262c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 800262e:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002630:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002634:	bf0c      	ite	eq
 8002636:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002638:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 800263a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 800263c:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800263e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002642:	bf0c      	ite	eq
 8002644:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002646:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 8002648:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 800264a:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800264c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800264e:	bf54      	ite	pl
 8002650:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8002652:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 8002654:	60d5      	str	r5, [r2, #12]
    position++;
 8002656:	3301      	adds	r3, #1
 8002658:	e744      	b.n	80024e4 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800265a:	2500      	movs	r5, #0
 800265c:	e7da      	b.n	8002614 <HAL_GPIO_Init+0x140>
 800265e:	2501      	movs	r5, #1
 8002660:	e7d8      	b.n	8002614 <HAL_GPIO_Init+0x140>
 8002662:	2502      	movs	r5, #2
 8002664:	e7d6      	b.n	8002614 <HAL_GPIO_Init+0x140>
 8002666:	2503      	movs	r5, #3
 8002668:	e7d4      	b.n	8002614 <HAL_GPIO_Init+0x140>
 800266a:	2504      	movs	r5, #4
 800266c:	e7d2      	b.n	8002614 <HAL_GPIO_Init+0x140>
 800266e:	2505      	movs	r5, #5
 8002670:	e7d0      	b.n	8002614 <HAL_GPIO_Init+0x140>
 8002672:	2506      	movs	r5, #6
 8002674:	e7ce      	b.n	8002614 <HAL_GPIO_Init+0x140>
 8002676:	bf00      	nop
 8002678:	40010400 	.word	0x40010400
 800267c:	48000400 	.word	0x48000400
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002688:	4d46      	ldr	r5, [pc, #280]	; (80027a4 <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800268a:	f8df a120 	ldr.w	sl, [pc, #288]	; 80027ac <HAL_GPIO_DeInit+0x128>
 800268e:	f8df b120 	ldr.w	fp, [pc, #288]	; 80027b0 <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 8002692:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002694:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002698:	fa31 f302 	lsrs.w	r3, r1, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 800269e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80026a2:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 80026a6:	ea11 0608 	ands.w	r6, r1, r8
 80026aa:	d06b      	beq.n	8002784 <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80026ac:	6807      	ldr	r7, [r0, #0]
 80026ae:	2303      	movs	r3, #3
 80026b0:	0054      	lsls	r4, r2, #1
 80026b2:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026b6:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80026ba:	4327      	orrs	r7, r4
 80026bc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80026c0:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026c2:	f8dc 7020 	ldr.w	r7, [ip, #32]
 80026c6:	f002 0e07 	and.w	lr, r2, #7
 80026ca:	463b      	mov	r3, r7
 80026cc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80026d0:	270f      	movs	r7, #15
 80026d2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80026d6:	ea23 0e0e 	bic.w	lr, r3, lr
 80026da:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026de:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80026e2:	43e4      	mvns	r4, r4
 80026e4:	ea0e 0e04 	and.w	lr, lr, r4
 80026e8:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ec:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80026f0:	ea2e 0808 	bic.w	r8, lr, r8
 80026f4:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026f8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80026fc:	ea04 040e 	and.w	r4, r4, lr
 8002700:	60c4      	str	r4, [r0, #12]
 8002702:	f022 0403 	bic.w	r4, r2, #3
 8002706:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800270a:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800270e:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002712:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002716:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800271a:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800271e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002722:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002726:	d02f      	beq.n	8002788 <HAL_GPIO_DeInit+0x104>
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_GPIO_DeInit+0x124>)
 800272a:	4298      	cmp	r0, r3
 800272c:	d02e      	beq.n	800278c <HAL_GPIO_DeInit+0x108>
 800272e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002732:	4298      	cmp	r0, r3
 8002734:	d02c      	beq.n	8002790 <HAL_GPIO_DeInit+0x10c>
 8002736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800273a:	4298      	cmp	r0, r3
 800273c:	d02a      	beq.n	8002794 <HAL_GPIO_DeInit+0x110>
 800273e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002742:	4298      	cmp	r0, r3
 8002744:	d028      	beq.n	8002798 <HAL_GPIO_DeInit+0x114>
 8002746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800274a:	4298      	cmp	r0, r3
 800274c:	d026      	beq.n	800279c <HAL_GPIO_DeInit+0x118>
 800274e:	4550      	cmp	r0, sl
 8002750:	d026      	beq.n	80027a0 <HAL_GPIO_DeInit+0x11c>
 8002752:	4558      	cmp	r0, fp
 8002754:	bf0c      	ite	eq
 8002756:	2307      	moveq	r3, #7
 8002758:	2308      	movne	r3, #8
 800275a:	fa03 f30e 	lsl.w	r3, r3, lr
 800275e:	459c      	cmp	ip, r3
 8002760:	d110      	bne.n	8002784 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002762:	68a3      	ldr	r3, [r4, #8]
 8002764:	ea23 0707 	bic.w	r7, r3, r7
 8002768:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 800276a:	682b      	ldr	r3, [r5, #0]
 800276c:	43f6      	mvns	r6, r6
 800276e:	4033      	ands	r3, r6
 8002770:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002772:	686b      	ldr	r3, [r5, #4]
 8002774:	4033      	ands	r3, r6
 8002776:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002778:	68ab      	ldr	r3, [r5, #8]
 800277a:	4033      	ands	r3, r6
 800277c:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800277e:	68eb      	ldr	r3, [r5, #12]
 8002780:	401e      	ands	r6, r3
 8002782:	60ee      	str	r6, [r5, #12]
    position++;
 8002784:	3201      	adds	r2, #1
 8002786:	e787      	b.n	8002698 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002788:	2300      	movs	r3, #0
 800278a:	e7e6      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 800278c:	2301      	movs	r3, #1
 800278e:	e7e4      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 8002790:	2302      	movs	r3, #2
 8002792:	e7e2      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 8002794:	2303      	movs	r3, #3
 8002796:	e7e0      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 8002798:	2304      	movs	r3, #4
 800279a:	e7de      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 800279c:	2305      	movs	r3, #5
 800279e:	e7dc      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 80027a0:	2306      	movs	r3, #6
 80027a2:	e7da      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 80027a4:	40010400 	.word	0x40010400
 80027a8:	48000400 	.word	0x48000400
 80027ac:	48001800 	.word	0x48001800
 80027b0:	48001c00 	.word	0x48001c00

080027b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027b4:	6903      	ldr	r3, [r0, #16]
 80027b6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80027b8:	bf14      	ite	ne
 80027ba:	2001      	movne	r0, #1
 80027bc:	2000      	moveq	r0, #0
 80027be:	4770      	bx	lr

080027c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	b10a      	cbz	r2, 80027c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c2:	6181      	str	r1, [r0, #24]
 80027c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027c6:	6281      	str	r1, [r0, #40]	; 0x28
 80027c8:	4770      	bx	lr

080027ca <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80027ca:	6943      	ldr	r3, [r0, #20]
 80027cc:	4059      	eors	r1, r3
 80027ce:	6141      	str	r1, [r0, #20]
 80027d0:	4770      	bx	lr

080027d2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80027d4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80027d8:	6959      	ldr	r1, [r3, #20]
 80027da:	4201      	tst	r1, r0
 80027dc:	d002      	beq.n	80027e4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e0:	f7ff fff7 	bl	80027d2 <HAL_GPIO_EXTI_Callback>
 80027e4:	bd08      	pop	{r3, pc}
 80027e6:	bf00      	nop
 80027e8:	40010400 	.word	0x40010400

080027ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027ec:	6803      	ldr	r3, [r0, #0]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80027f2:	bf44      	itt	mi
 80027f4:	2200      	movmi	r2, #0
 80027f6:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027fc:	bf5e      	ittt	pl
 80027fe:	699a      	ldrpl	r2, [r3, #24]
 8002800:	f042 0201 	orrpl.w	r2, r2, #1
 8002804:	619a      	strpl	r2, [r3, #24]
 8002806:	4770      	bx	lr

08002808 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002808:	b530      	push	{r4, r5, lr}
 800280a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800280c:	6805      	ldr	r5, [r0, #0]
 800280e:	4323      	orrs	r3, r4
 8002810:	0d64      	lsrs	r4, r4, #21
 8002812:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002816:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800281a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800281e:	6868      	ldr	r0, [r5, #4]
 8002820:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002824:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002828:	4319      	orrs	r1, r3
 800282a:	f044 0403 	orr.w	r4, r4, #3
 800282e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002832:	ea20 0404 	bic.w	r4, r0, r4
 8002836:	4321      	orrs	r1, r4
 8002838:	6069      	str	r1, [r5, #4]
 800283a:	bd30      	pop	{r4, r5, pc}

0800283c <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800283c:	f011 0301 	ands.w	r3, r1, #1
 8002840:	d007      	beq.n	8002852 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002842:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002846:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800284a:	2b28      	cmp	r3, #40	; 0x28
 800284c:	bf0c      	ite	eq
 800284e:	2342      	moveq	r3, #66	; 0x42
 8002850:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002852:	078a      	lsls	r2, r1, #30
 8002854:	d509      	bpl.n	800286a <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002856:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800285a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800285e:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002860:	bf0c      	ite	eq
 8002862:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002866:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800286a:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800286c:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002870:	bf48      	it	mi
 8002872:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002876:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800287a:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800287c:	bf08      	it	eq
 800287e:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002882:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002884:	6801      	ldr	r1, [r0, #0]
 8002886:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 8002888:	bf08      	it	eq
 800288a:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800288e:	ea22 0303 	bic.w	r3, r2, r3
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	4770      	bx	lr

08002896 <I2C_WaitOnFlagUntilTimeout>:
{
 8002896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289a:	9f06      	ldr	r7, [sp, #24]
 800289c:	4604      	mov	r4, r0
 800289e:	4688      	mov	r8, r1
 80028a0:	4616      	mov	r6, r2
 80028a2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a4:	6822      	ldr	r2, [r4, #0]
 80028a6:	6993      	ldr	r3, [r2, #24]
 80028a8:	ea38 0303 	bics.w	r3, r8, r3
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	42b3      	cmp	r3, r6
 80028b4:	d002      	beq.n	80028bc <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80028b6:	2000      	movs	r0, #0
}
 80028b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80028bc:	1c6b      	adds	r3, r5, #1
 80028be:	d0f2      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c0:	f7fe fbae 	bl	8001020 <HAL_GetTick>
 80028c4:	1bc0      	subs	r0, r0, r7
 80028c6:	4285      	cmp	r5, r0
 80028c8:	d301      	bcc.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x38>
 80028ca:	2d00      	cmp	r5, #0
 80028cc:	d1ea      	bne.n	80028a4 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028d0:	f043 0320 	orr.w	r3, r3, #32
 80028d4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	2320      	movs	r3, #32
 80028d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	2300      	movs	r3, #0
 80028de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80028e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80028e6:	2001      	movs	r0, #1
 80028e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028ec <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ec:	6803      	ldr	r3, [r0, #0]
{
 80028ee:	b570      	push	{r4, r5, r6, lr}
 80028f0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f2:	6998      	ldr	r0, [r3, #24]
 80028f4:	f010 0010 	ands.w	r0, r0, #16
{
 80028f8:	460d      	mov	r5, r1
 80028fa:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028fc:	d116      	bne.n	800292c <I2C_IsAcknowledgeFailed+0x40>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002900:	1c69      	adds	r1, r5, #1
 8002902:	d014      	beq.n	800292e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002904:	f7fe fb8c 	bl	8001020 <HAL_GetTick>
 8002908:	1b80      	subs	r0, r0, r6
 800290a:	4285      	cmp	r5, r0
 800290c:	d300      	bcc.n	8002910 <I2C_IsAcknowledgeFailed+0x24>
 800290e:	b96d      	cbnz	r5, 800292c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002918:	2320      	movs	r3, #32
 800291a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291e:	2300      	movs	r3, #0
 8002920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002924:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002928:	2001      	movs	r0, #1
}
 800292a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	6999      	ldr	r1, [r3, #24]
 8002930:	068a      	lsls	r2, r1, #26
 8002932:	d5e5      	bpl.n	8002900 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002934:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002936:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002938:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800293a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800293e:	f7ff ff55 	bl	80027ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	6853      	ldr	r3, [r2, #4]
 8002946:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800294a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800294e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002958:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002960:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8002964:	e7db      	b.n	800291e <I2C_IsAcknowledgeFailed+0x32>

08002966 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002966:	b570      	push	{r4, r5, r6, lr}
 8002968:	4604      	mov	r4, r0
 800296a:	460d      	mov	r5, r1
 800296c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	079b      	lsls	r3, r3, #30
 8002974:	d501      	bpl.n	800297a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
 8002978:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	4632      	mov	r2, r6
 800297c:	4629      	mov	r1, r5
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff ffb4 	bl	80028ec <I2C_IsAcknowledgeFailed>
 8002984:	b9a0      	cbnz	r0, 80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002986:	1c6a      	adds	r2, r5, #1
 8002988:	d0f1      	beq.n	800296e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe fb49 	bl	8001020 <HAL_GetTick>
 800298e:	1b80      	subs	r0, r0, r6
 8002990:	4285      	cmp	r5, r0
 8002992:	d301      	bcc.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002994:	2d00      	cmp	r5, #0
 8002996:	d1ea      	bne.n	800296e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800299a:	f043 0320 	orr.w	r3, r3, #32
 800299e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	2320      	movs	r3, #32
 80029a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80029ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80029b0:	2001      	movs	r0, #1
}
 80029b2:	bd70      	pop	{r4, r5, r6, pc}

080029b4 <I2C_RequestMemoryRead>:
{
 80029b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80029b8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <I2C_RequestMemoryRead+0x60>)
 80029bc:	9300      	str	r3, [sp, #0]
{
 80029be:	4605      	mov	r5, r0
 80029c0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029c2:	2300      	movs	r3, #0
 80029c4:	b2fa      	uxtb	r2, r7
 80029c6:	f7ff ff1f 	bl	8002808 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ca:	4632      	mov	r2, r6
 80029cc:	9908      	ldr	r1, [sp, #32]
 80029ce:	4628      	mov	r0, r5
 80029d0:	f7ff ffc9 	bl	8002966 <I2C_WaitOnTXISFlagUntilTimeout>
 80029d4:	b110      	cbz	r0, 80029dc <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
}
 80029d8:	b003      	add	sp, #12
 80029da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029dc:	2f01      	cmp	r7, #1
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	d10c      	bne.n	80029fc <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029e2:	b2e4      	uxtb	r4, r4
 80029e4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029e6:	9b08      	ldr	r3, [sp, #32]
 80029e8:	9600      	str	r6, [sp, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	4628      	mov	r0, r5
 80029f0:	f7ff ff51 	bl	8002896 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80029f4:	3000      	adds	r0, #0
 80029f6:	bf18      	it	ne
 80029f8:	2001      	movne	r0, #1
 80029fa:	e7ed      	b.n	80029d8 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029fc:	0a22      	lsrs	r2, r4, #8
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a00:	9908      	ldr	r1, [sp, #32]
 8002a02:	4632      	mov	r2, r6
 8002a04:	4628      	mov	r0, r5
 8002a06:	f7ff ffae 	bl	8002966 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d1e3      	bne.n	80029d6 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	e7e7      	b.n	80029e2 <I2C_RequestMemoryRead+0x2e>
 8002a12:	bf00      	nop
 8002a14:	80002000 	.word	0x80002000

08002a18 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	460d      	mov	r5, r1
 8002a1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	069b      	lsls	r3, r3, #26
 8002a26:	d501      	bpl.n	8002a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002a28:	2000      	movs	r0, #0
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2c:	4632      	mov	r2, r6
 8002a2e:	4629      	mov	r1, r5
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7ff ff5b 	bl	80028ec <I2C_IsAcknowledgeFailed>
 8002a36:	b990      	cbnz	r0, 8002a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7fe faf2 	bl	8001020 <HAL_GetTick>
 8002a3c:	1b80      	subs	r0, r0, r6
 8002a3e:	4285      	cmp	r5, r0
 8002a40:	d301      	bcc.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002a42:	2d00      	cmp	r5, #0
 8002a44:	d1ec      	bne.n	8002a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a48:	f043 0320 	orr.w	r3, r3, #32
 8002a4c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	2320      	movs	r3, #32
 8002a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002a5e:	2001      	movs	r0, #1
}
 8002a60:	bd70      	pop	{r4, r5, r6, pc}

08002a62 <HAL_I2C_Init>:
{
 8002a62:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002a64:	4604      	mov	r4, r0
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d04a      	beq.n	8002b00 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a6a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a72:	b91b      	cbnz	r3, 8002a7c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002a74:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002a78:	f01c fc04 	bl	801f284 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7c:	2324      	movs	r3, #36	; 0x24
 8002a7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002a82:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a84:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a8e:	6862      	ldr	r2, [r4, #4]
 8002a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a94:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a96:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a98:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa2:	d124      	bne.n	8002aee <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa8:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aaa:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002aac:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002abe:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ac0:	6922      	ldr	r2, [r4, #16]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	69a1      	ldr	r1, [r4, #24]
 8002ac6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002aca:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002acc:	6a21      	ldr	r1, [r4, #32]
 8002ace:	69e2      	ldr	r2, [r4, #28]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002aec:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002af2:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002af4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002af6:	bf04      	itt	eq
 8002af8:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002afc:	605a      	streq	r2, [r3, #4]
 8002afe:	e7d4      	b.n	8002aaa <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002b00:	2001      	movs	r0, #1
}
 8002b02:	bd10      	pop	{r4, pc}

08002b04 <HAL_I2C_Mem_Read>:
{
 8002b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b08:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002b0e:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b10:	2b20      	cmp	r3, #32
{
 8002b12:	4604      	mov	r4, r0
 8002b14:	460f      	mov	r7, r1
 8002b16:	9203      	str	r2, [sp, #12]
 8002b18:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002b1c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b20:	f040 80a9 	bne.w	8002c76 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b26:	b113      	cbz	r3, 8002b2e <HAL_I2C_Mem_Read+0x2a>
 8002b28:	f1ba 0f00 	cmp.w	sl, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b32:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002b34:	2001      	movs	r0, #1
}
 8002b36:	b005      	add	sp, #20
 8002b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002b3c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f000 8098 	beq.w	8002c76 <HAL_I2C_Mem_Read+0x172>
 8002b46:	2501      	movs	r5, #1
 8002b48:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fa68 	bl	8001020 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b50:	2319      	movs	r3, #25
 8002b52:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002b54:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b56:	462a      	mov	r2, r5
 8002b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7ff fe9a 	bl	8002896 <I2C_WaitOnFlagUntilTimeout>
 8002b62:	4681      	mov	r9, r0
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d1e5      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b68:	2322      	movs	r3, #34	; 0x22
 8002b6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b6e:	2340      	movs	r3, #64	; 0x40
 8002b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b76:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002b78:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8002b7a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002b7c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b80:	9601      	str	r6, [sp, #4]
 8002b82:	f8cd 8000 	str.w	r8, [sp]
 8002b86:	465b      	mov	r3, fp
 8002b88:	9a03      	ldr	r2, [sp, #12]
 8002b8a:	4639      	mov	r1, r7
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ff11 	bl	80029b4 <I2C_RequestMemoryRead>
 8002b92:	b110      	cbz	r0, 8002b9a <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8002b94:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002b98:	e7cc      	b.n	8002b34 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2bff      	cmp	r3, #255	; 0xff
 8002ba0:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_I2C_Mem_Read+0x178>)
 8002ba2:	d958      	bls.n	8002c56 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ba6:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002baa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002bae:	4639      	mov	r1, r7
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7ff fe29 	bl	8002808 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bb6:	9600      	str	r6, [sp, #0]
 8002bb8:	4643      	mov	r3, r8
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7ff fe69 	bl	8002896 <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d1b5      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bc8:	6822      	ldr	r2, [r4, #0]
 8002bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bce:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002bd2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002bd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002be0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002be2:	3a01      	subs	r2, #1
 8002be4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002be6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002be8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bea:	b1ab      	cbz	r3, 8002c18 <HAL_I2C_Mem_Read+0x114>
 8002bec:	b9a2      	cbnz	r2, 8002c18 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bee:	9600      	str	r6, [sp, #0]
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f7ff fe4e 	bl	8002896 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	d19a      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2bff      	cmp	r3, #255	; 0xff
 8002c04:	d92f      	bls.n	8002c66 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c06:	22ff      	movs	r2, #255	; 0xff
 8002c08:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c0a:	9000      	str	r0, [sp, #0]
 8002c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c10:	4639      	mov	r1, r7
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7ff fdf8 	bl	8002808 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002c18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ca      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c20:	4632      	mov	r2, r6
 8002c22:	4641      	mov	r1, r8
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff fef7 	bl	8002a18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d182      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	2120      	movs	r1, #32
 8002c32:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002c3a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002c3e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002c4c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c50:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002c54:	e76f      	b.n	8002b36 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002c56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c58:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002c5a:	b292      	uxth	r2, r2
 8002c5c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	e7a3      	b.n	8002bae <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002c66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c68:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	e7cc      	b.n	8002c10 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8002c76:	2002      	movs	r0, #2
 8002c78:	e75d      	b.n	8002b36 <HAL_I2C_Mem_Read+0x32>
 8002c7a:	bf00      	nop
 8002c7c:	80002400 	.word	0x80002400

08002c80 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c80:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8002c82:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c84:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c86:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8002c88:	b103      	cbz	r3, 8002c8c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c8a:	4718      	bx	r3
 8002c8c:	4770      	bx	lr

08002c8e <HAL_I2C_SlaveTxCpltCallback>:
 8002c8e:	4770      	bx	lr

08002c90 <HAL_I2C_SlaveRxCpltCallback>:
 8002c90:	4770      	bx	lr

08002c92 <I2C_ITSlaveSequentialCplt>:
{
 8002c92:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	2500      	movs	r5, #0
 8002c96:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c9e:	2b29      	cmp	r3, #41	; 0x29
 8002ca0:	d10c      	bne.n	8002cbc <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ca2:	2328      	movs	r3, #40	; 0x28
 8002ca4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ca8:	2321      	movs	r3, #33	; 0x21
 8002caa:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cac:	2101      	movs	r1, #1
 8002cae:	f7ff fdc5 	bl	800283c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002cb2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cb6:	f7ff ffea 	bl	8002c8e <HAL_I2C_SlaveTxCpltCallback>
 8002cba:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cc2:	d10b      	bne.n	8002cdc <I2C_ITSlaveSequentialCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002cc4:	2328      	movs	r3, #40	; 0x28
 8002cc6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cca:	2322      	movs	r3, #34	; 0x22
 8002ccc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cce:	2102      	movs	r1, #2
 8002cd0:	f7ff fdb4 	bl	800283c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002cd4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cd8:	f7ff ffda 	bl	8002c90 <HAL_I2C_SlaveRxCpltCallback>
 8002cdc:	bd38      	pop	{r3, r4, r5, pc}

08002cde <HAL_I2C_AddrCallback>:
{
 8002cde:	4770      	bx	lr

08002ce0 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ce2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ce6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cea:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002cec:	4604      	mov	r4, r0
 8002cee:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cf0:	d134      	bne.n	8002d5c <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8002cf2:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf4:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cf6:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002cf8:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002cfa:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cfc:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cfe:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002d00:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d04:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d08:	d120      	bne.n	8002d4c <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d0a:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002d0e:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002d12:	f015 0506 	ands.w	r5, r5, #6
 8002d16:	d10e      	bne.n	8002d36 <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8002d18:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d1a:	3101      	adds	r1, #1
 8002d1c:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d1e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d20:	2902      	cmp	r1, #2
 8002d22:	d120      	bne.n	8002d66 <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d24:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8002d26:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d28:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002d2a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d2e:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d30:	f7ff ffd5 	bl	8002cde <HAL_I2C_AddrCallback>
 8002d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d36:	2104      	movs	r1, #4
 8002d38:	f7ff fd80 	bl	800283c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d42:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d46:	4631      	mov	r1, r6
 8002d48:	4620      	mov	r0, r4
 8002d4a:	e7f1      	b.n	8002d30 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	f7ff fd75 	bl	800283c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d58:	462a      	mov	r2, r5
 8002d5a:	e7f4      	b.n	8002d46 <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d60:	2300      	movs	r3, #0
 8002d62:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d68 <HAL_I2C_ListenCpltCallback>:
 8002d68:	4770      	bx	lr
	...

08002d6c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <I2C_ITListenCplt+0x60>)
{
 8002d6e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d72:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002d78:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d82:	074b      	lsls	r3, r1, #29
{
 8002d84:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d86:	d512      	bpl.n	8002dae <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d88:	6802      	ldr	r2, [r0, #0]
 8002d8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d92:	3301      	adds	r3, #1
 8002d94:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002d96:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002d98:	b14b      	cbz	r3, 8002dae <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002d9e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002da6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dae:	4620      	mov	r0, r4
 8002db0:	2107      	movs	r1, #7
 8002db2:	f7ff fd43 	bl	800283c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	2210      	movs	r2, #16
 8002dba:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f7ff ffd0 	bl	8002d68 <HAL_I2C_ListenCpltCallback>
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	bf00      	nop
 8002dcc:	ffff0000 	.word	0xffff0000

08002dd0 <HAL_I2C_ErrorCallback>:
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_I2C_AbortCpltCallback>:
{
 8002dd2:	4770      	bx	lr

08002dd4 <I2C_ITError>:
{
 8002dd4:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002dd6:	4a32      	ldr	r2, [pc, #200]	; (8002ea0 <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002dd8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ddc:	2500      	movs	r5, #0
 8002dde:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002de2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002de4:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002de6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002de8:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002dea:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002dec:	2b02      	cmp	r3, #2
{
 8002dee:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8002df0:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002df2:	d822      	bhi.n	8002e3a <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002df4:	2103      	movs	r1, #3
 8002df6:	f7ff fd21 	bl	800283c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dfa:	2328      	movs	r3, #40	; 0x28
 8002dfc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e00:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e02:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002e04:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e0a:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002e0c:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8002e10:	d020      	beq.n	8002e54 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8002e12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e18:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d03e      	beq.n	8002e9c <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <I2C_ITError+0xd4>)
 8002e20:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002e22:	2300      	movs	r3, #0
 8002e24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e28:	f7fe ff86 	bl	8001d38 <HAL_DMA_Abort_IT>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d035      	beq.n	8002e9c <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e30:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e32:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e38:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e3a:	2107      	movs	r1, #7
 8002e3c:	f7ff fcfe 	bl	800283c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e44:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e46:	bf1c      	itt	ne
 8002e48:	2320      	movne	r3, #32
 8002e4a:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	6303      	str	r3, [r0, #48]	; 0x30
 8002e52:	e7d7      	b.n	8002e04 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e54:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8002e58:	d00e      	beq.n	8002e78 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e5a:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002e5c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e62:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002e64:	b1d0      	cbz	r0, 8002e9c <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <I2C_ITError+0xd4>)
 8002e68:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002e6a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e6e:	f7fe ff63 	bl	8001d38 <HAL_DMA_Abort_IT>
 8002e72:	b198      	cbz	r0, 8002e9c <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e74:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e76:	e7dc      	b.n	8002e32 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e78:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002e7c:	2b60      	cmp	r3, #96	; 0x60
 8002e7e:	d108      	bne.n	8002e92 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	2320      	movs	r3, #32
 8002e82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002e86:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff ffa1 	bl	8002dd2 <HAL_I2C_AbortCpltCallback>
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8002e92:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7ff ff9a 	bl	8002dd0 <HAL_I2C_ErrorCallback>
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
 8002e9e:	bf00      	nop
 8002ea0:	ffff0000 	.word	0xffff0000
 8002ea4:	08002f9d 	.word	0x08002f9d
 8002ea8:	0800310d 	.word	0x0800310d

08002eac <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002eac:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eae:	2220      	movs	r2, #32
{
 8002eb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002eb2:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb4:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	61da      	str	r2, [r3, #28]
{
 8002eba:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ebc:	2107      	movs	r1, #7
{
 8002ebe:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ec0:	f7ff fcbc 	bl	800283c <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ec4:	6803      	ldr	r3, [r0, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ecc:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002ed4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002ed8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002ee2:	f7ff fc83 	bl	80027ec <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ee6:	0471      	lsls	r1, r6, #17
 8002ee8:	d532      	bpl.n	8002f50 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8002eea:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002eec:	b11b      	cbz	r3, 8002ef6 <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ef6:	076b      	lsls	r3, r5, #29
 8002ef8:	d50e      	bpl.n	8002f18 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002efe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f04:	3301      	adds	r3, #1
 8002f06:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002f08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002f0a:	b12b      	cbz	r3, 8002f18 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002f18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b11b      	cbz	r3, 8002f26 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f2e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f32:	b18b      	cbz	r3, 8002f58 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff ff4c 	bl	8002dd4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f3c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002f40:	2b28      	cmp	r3, #40	; 0x28
 8002f42:	d128      	bne.n	8002f96 <I2C_ITSlaveCplt+0xea>
      I2C_ITListenCplt(hi2c, ITFlags);
 8002f44:	4629      	mov	r1, r5
 8002f46:	4620      	mov	r0, r4
}
 8002f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8002f4c:	f7ff bf0e 	b.w	8002d6c <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f50:	0432      	lsls	r2, r6, #16
 8002f52:	d5d0      	bpl.n	8002ef6 <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 8002f54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f56:	e7c9      	b.n	8002eec <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f5a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002f5e:	d00a      	beq.n	8002f76 <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f60:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <I2C_ITSlaveCplt+0xec>)
 8002f62:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	2220      	movs	r2, #32
 8002f66:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff fefa 	bl	8002d68 <HAL_I2C_ListenCpltCallback>
 8002f74:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f76:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f7e:	2a22      	cmp	r2, #34	; 0x22
 8002f80:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f88:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f8a:	d102      	bne.n	8002f92 <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f8c:	f7ff fe80 	bl	8002c90 <HAL_I2C_SlaveRxCpltCallback>
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f92:	f7ff fe7c 	bl	8002c8e <HAL_I2C_SlaveTxCpltCallback>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	ffff0000 	.word	0xffff0000

08002f9c <I2C_Slave_ISR_IT>:
{
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8002fa0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fa4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002fa6:	2a01      	cmp	r2, #1
{
 8002fa8:	4604      	mov	r4, r0
 8002faa:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8002fac:	d07c      	beq.n	80030a8 <I2C_Slave_ISR_IT+0x10c>
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fb4:	06ca      	lsls	r2, r1, #27
 8002fb6:	d539      	bpl.n	800302c <I2C_Slave_ISR_IT+0x90>
 8002fb8:	06f2      	lsls	r2, r6, #27
 8002fba:	d537      	bpl.n	800302c <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8002fbc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	bb32      	cbnz	r2, 8003010 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002fc2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002fc6:	2a28      	cmp	r2, #40	; 0x28
 8002fc8:	d110      	bne.n	8002fec <I2C_Slave_ISR_IT+0x50>
 8002fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fce:	d10d      	bne.n	8002fec <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 8002fd0:	f7ff fecc 	bl	8002d6c <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fd4:	06aa      	lsls	r2, r5, #26
 8002fd6:	d505      	bpl.n	8002fe4 <I2C_Slave_ISR_IT+0x48>
 8002fd8:	06b3      	lsls	r3, r6, #26
 8002fda:	d503      	bpl.n	8002fe4 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002fdc:	4629      	mov	r1, r5
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7ff ff64 	bl	8002eac <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fec:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002ff0:	2a29      	cmp	r2, #41	; 0x29
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff8:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ffa:	d1eb      	bne.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
 8002ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003000:	d0e8      	beq.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8003002:	4620      	mov	r0, r4
 8003004:	f7ff fbf2 	bl	80027ec <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff fe42 	bl	8002c92 <I2C_ITSlaveSequentialCplt>
 800300e:	e7e1      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003010:	6802      	ldr	r2, [r0, #0]
 8003012:	2110      	movs	r1, #16
 8003014:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003016:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003018:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800301c:	f042 0204 	orr.w	r2, r2, #4
 8003020:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003022:	d1d7      	bne.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003024:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003026:	f7ff fed5 	bl	8002dd4 <I2C_ITError>
 800302a:	e7d3      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800302c:	076a      	lsls	r2, r5, #29
 800302e:	d51a      	bpl.n	8003066 <I2C_Slave_ISR_IT+0xca>
 8003030:	0770      	lsls	r0, r6, #29
 8003032:	d518      	bpl.n	8003066 <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 8003034:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003036:	b292      	uxth	r2, r2
 8003038:	b16a      	cbz	r2, 8003056 <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800303a:	6821      	ldr	r1, [r4, #0]
 800303c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800303e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8003040:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8003042:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003044:	3201      	adds	r2, #1
 8003046:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003048:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800304a:	3a01      	subs	r2, #1
 800304c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800304e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003050:	3a01      	subs	r2, #1
 8003052:	b292      	uxth	r2, r2
 8003054:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003056:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003058:	b292      	uxth	r2, r2
 800305a:	2a00      	cmp	r2, #0
 800305c:	d1ba      	bne.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
 800305e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003062:	d1d1      	bne.n	8003008 <I2C_Slave_ISR_IT+0x6c>
 8003064:	e7b6      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003066:	0729      	lsls	r1, r5, #28
 8003068:	d505      	bpl.n	8003076 <I2C_Slave_ISR_IT+0xda>
 800306a:	0732      	lsls	r2, r6, #28
 800306c:	d503      	bpl.n	8003076 <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff fe36 	bl	8002ce0 <I2C_ITAddrCplt.isra.8>
 8003074:	e7ae      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003076:	07a8      	lsls	r0, r5, #30
 8003078:	d5ac      	bpl.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
 800307a:	07b1      	lsls	r1, r6, #30
 800307c:	d5aa      	bpl.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 800307e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003080:	b292      	uxth	r2, r2
 8003082:	b16a      	cbz	r2, 80030a0 <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	f813 1b01 	ldrb.w	r1, [r3], #1
 800308c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800308e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003090:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003092:	3b01      	subs	r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003098:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	8523      	strh	r3, [r4, #40]	; 0x28
 800309e:	e799      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80030a0:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 80030a4:	d0b0      	beq.n	8003008 <I2C_Slave_ISR_IT+0x6c>
 80030a6:	e795      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 80030a8:	2002      	movs	r0, #2
}
 80030aa:	bd70      	pop	{r4, r5, r6, pc}

080030ac <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030ac:	6803      	ldr	r3, [r0, #0]
 80030ae:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030b0:	681a      	ldr	r2, [r3, #0]
{
 80030b2:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030b4:	05cc      	lsls	r4, r1, #23
 80030b6:	d508      	bpl.n	80030ca <HAL_I2C_ER_IRQHandler+0x1e>
 80030b8:	0614      	lsls	r4, r2, #24
 80030ba:	d506      	bpl.n	80030ca <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80030bc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030be:	f044 0401 	orr.w	r4, r4, #1
 80030c2:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030c4:	f44f 7480 	mov.w	r4, #256	; 0x100
 80030c8:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030ca:	054c      	lsls	r4, r1, #21
 80030cc:	d508      	bpl.n	80030e0 <HAL_I2C_ER_IRQHandler+0x34>
 80030ce:	0614      	lsls	r4, r2, #24
 80030d0:	d506      	bpl.n	80030e0 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80030d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030d4:	f044 0408 	orr.w	r4, r4, #8
 80030d8:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80030de:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030e0:	0589      	lsls	r1, r1, #22
 80030e2:	d508      	bpl.n	80030f6 <HAL_I2C_ER_IRQHandler+0x4a>
 80030e4:	0612      	lsls	r2, r2, #24
 80030e6:	d506      	bpl.n	80030f6 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80030e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80030ea:	f042 0202 	orr.w	r2, r2, #2
 80030ee:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f4:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80030f6:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80030f8:	f011 0f0b 	tst.w	r1, #11
 80030fc:	d003      	beq.n	8003106 <HAL_I2C_ER_IRQHandler+0x5a>
}
 80030fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8003102:	f7ff be67 	b.w	8002dd4 <I2C_ITError>
}
 8003106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800310a:	4770      	bx	lr

0800310c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800310c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 800310e:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 8003110:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003116:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003118:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800311a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800311e:	2b60      	cmp	r3, #96	; 0x60
 8003120:	d105      	bne.n	800312e <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8003122:	2320      	movs	r3, #32
 8003124:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8003128:	f7ff fe53 	bl	8002dd2 <HAL_I2C_AbortCpltCallback>
 800312c:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 800312e:	f7ff fe4f 	bl	8002dd0 <HAL_I2C_ErrorCallback>
 8003132:	bd08      	pop	{r3, pc}

08003134 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003134:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	2a20      	cmp	r2, #32
{
 800313c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800313e:	d11d      	bne.n	800317c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003140:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003144:	2b01      	cmp	r3, #1
 8003146:	d019      	beq.n	800317c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	2324      	movs	r3, #36	; 0x24
 800314a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800314e:	6803      	ldr	r3, [r0, #0]
 8003150:	681c      	ldr	r4, [r3, #0]
 8003152:	f024 0401 	bic.w	r4, r4, #1
 8003156:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003158:	681c      	ldr	r4, [r3, #0]
 800315a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800315e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003160:	681c      	ldr	r4, [r3, #0]
 8003162:	4321      	orrs	r1, r4
 8003164:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	f041 0101 	orr.w	r1, r1, #1
 800316c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003170:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003174:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003178:	4618      	mov	r0, r3
 800317a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800317c:	2002      	movs	r0, #2
  }
}
 800317e:	bd10      	pop	{r4, pc}

08003180 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003180:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003182:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8003186:	b2e4      	uxtb	r4, r4
 8003188:	2c20      	cmp	r4, #32
 800318a:	d11c      	bne.n	80031c6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003190:	2b01      	cmp	r3, #1
 8003192:	d018      	beq.n	80031c6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003194:	2324      	movs	r3, #36	; 0x24
 8003196:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319a:	6803      	ldr	r3, [r0, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031a4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031a6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031aa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031ae:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80031c2:	4618      	mov	r0, r3
 80031c4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2002      	movs	r0, #2
  }
}
 80031c8:	bd10      	pop	{r4, pc}

080031ca <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80031ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031ce:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80031d0:	6804      	ldr	r4, [r0, #0]
 80031d2:	684f      	ldr	r7, [r1, #4]
 80031d4:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031d6:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80031da:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031de:	3284      	adds	r2, #132	; 0x84
 80031e0:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031e2:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031e6:	6858      	ldr	r0, [r3, #4]
 80031e8:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 80031ec:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031ee:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80031f0:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031f4:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80031f8:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031fa:	4430      	add	r0, r6
 80031fc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003200:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003202:	68e0      	ldr	r0, [r4, #12]
 8003204:	68cd      	ldr	r5, [r1, #12]
 8003206:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800320a:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800320c:	6898      	ldr	r0, [r3, #8]
 800320e:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8003212:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003214:	68e6      	ldr	r6, [r4, #12]
 8003216:	6888      	ldr	r0, [r1, #8]
 8003218:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800321c:	3001      	adds	r0, #1
 800321e:	4430      	add	r0, r6
 8003220:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003224:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003226:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003228:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800322a:	f020 0007 	bic.w	r0, r0, #7
 800322e:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003230:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003234:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003236:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003238:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800323c:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003240:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003244:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003248:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800324c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003250:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003254:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003256:	6958      	ldr	r0, [r3, #20]
 8003258:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800325c:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800325e:	6948      	ldr	r0, [r1, #20]
 8003260:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003262:	69d8      	ldr	r0, [r3, #28]
 8003264:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003268:	f020 0007 	bic.w	r0, r0, #7
 800326c:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800326e:	6a08      	ldr	r0, [r1, #32]
 8003270:	69cd      	ldr	r5, [r1, #28]
 8003272:	4305      	orrs	r5, r0
 8003274:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003276:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003278:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800327a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800327e:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003280:	b31e      	cbz	r6, 80032ca <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003282:	2e01      	cmp	r6, #1
 8003284:	d023      	beq.n	80032ce <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003286:	1eb0      	subs	r0, r6, #2
 8003288:	2802      	cmp	r0, #2
 800328a:	d922      	bls.n	80032d2 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800328c:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 800328e:	bf0c      	ite	eq
 8003290:	2002      	moveq	r0, #2
 8003292:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003294:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003296:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800329a:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800329c:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800329e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80032a0:	eba7 070e 	sub.w	r7, r7, lr
 80032a4:	4345      	muls	r5, r0
 80032a6:	4378      	muls	r0, r7
 80032a8:	3003      	adds	r0, #3
 80032aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80032ae:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80032b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032b2:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80032b6:	f020 0007 	bic.w	r0, r0, #7
 80032ba:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80032bc:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80032be:	58a3      	ldr	r3, [r4, r2]
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	50a3      	str	r3, [r4, r2]
 80032c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 80032ca:	2004      	movs	r0, #4
 80032cc:	e7e2      	b.n	8003294 <LTDC_SetConfig+0xca>
    tmp = 3;
 80032ce:	2003      	movs	r0, #3
 80032d0:	e7e0      	b.n	8003294 <LTDC_SetConfig+0xca>
    tmp = 2;
 80032d2:	2002      	movs	r0, #2
 80032d4:	e7de      	b.n	8003294 <LTDC_SetConfig+0xca>
	...

080032d8 <HAL_LTDC_Init>:
{
 80032d8:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 80032da:	4604      	mov	r4, r0
 80032dc:	2800      	cmp	r0, #0
 80032de:	d063      	beq.n	80033a8 <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80032e0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80032e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032e8:	b91b      	cbnz	r3, 80032f2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80032ea:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80032ee:	f01b fdc5 	bl	801ee7c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032f2:	2302      	movs	r3, #2
 80032f4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80032f8:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032fa:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003302:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003304:	6862      	ldr	r2, [r4, #4]
 8003306:	6999      	ldr	r1, [r3, #24]
 8003308:	4302      	orrs	r2, r0
 800330a:	68e0      	ldr	r0, [r4, #12]
 800330c:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800330e:	6920      	ldr	r0, [r4, #16]
 8003310:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003312:	430a      	orrs	r2, r1
 8003314:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	4924      	ldr	r1, [pc, #144]	; (80033ac <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16);
 800331a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800331c:	400a      	ands	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003326:	69a0      	ldr	r0, [r4, #24]
 8003328:	4302      	orrs	r2, r0
 800332a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800332c:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800332e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003330:	400a      	ands	r2, r1
 8003332:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800333a:	6a20      	ldr	r0, [r4, #32]
 800333c:	4302      	orrs	r2, r0
 800333e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003340:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8003342:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003344:	400a      	ands	r2, r1
 8003346:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800334e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003350:	4302      	orrs	r2, r0
 8003352:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	4011      	ands	r1, r2
 8003358:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800335a:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800335c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800335e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003362:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003364:	430a      	orrs	r2, r1
 8003366:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800336a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800336e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003372:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003376:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800337a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800337e:	430a      	orrs	r2, r1
 8003380:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003384:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800338a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338c:	f042 0206 	orr.w	r2, r2, #6
 8003390:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003392:	699a      	ldr	r2, [r3, #24]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800339a:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800339c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800339e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80033a2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
}
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	f000f800 	.word	0xf000f800

080033b0 <HAL_LTDC_ConfigLayer>:
{   
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80033b2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80033b6:	2b01      	cmp	r3, #1
{   
 80033b8:	4606      	mov	r6, r0
 80033ba:	468e      	mov	lr, r1
 80033bc:	4694      	mov	ip, r2
 80033be:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80033c2:	d01d      	beq.n	8003400 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033c4:	2434      	movs	r4, #52	; 0x34
 80033c6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033c8:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033cc:	fb04 6402 	mla	r4, r4, r2, r6
 80033d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 80033d2:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033d4:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 80033d6:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80033e8:	4630      	mov	r0, r6
 80033ea:	4662      	mov	r2, ip
 80033ec:	4671      	mov	r1, lr
 80033ee:	f7ff feec 	bl	80031ca <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033f2:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80033f4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033f6:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80033f8:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80033fc:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003402 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8003402:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003406:	2b01      	cmp	r3, #1
{
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	f04f 0302 	mov.w	r3, #2
 800340e:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8003410:	d015      	beq.n	800343e <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003412:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8003416:	2334      	movs	r3, #52	; 0x34
 8003418:	4353      	muls	r3, r2
 800341a:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 800341c:	2501      	movs	r5, #1
 800341e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8003422:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003424:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003428:	4401      	add	r1, r0
 800342a:	f7ff fece 	bl	80031ca <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800342e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8003430:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003432:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003434:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003438:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 800343c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 800343e:	4618      	mov	r0, r3
}
 8003440:	bd70      	pop	{r4, r5, r6, pc}

08003442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003446:	4604      	mov	r4, r0
{
 8003448:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 800344a:	2800      	cmp	r0, #0
 800344c:	d074      	beq.n	8003538 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800344e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8003452:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003456:	b91b      	cbnz	r3, 8003460 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003458:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800345c:	f01c f85a 	bl	801f514 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003460:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003462:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8003464:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003468:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 800346c:	f004 f98f 	bl	800778e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003472:	466e      	mov	r6, sp
 8003474:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003478:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800347a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800347e:	e886 0003 	stmia.w	r6, {r0, r1}
 8003482:	f104 0804 	add.w	r8, r4, #4
 8003486:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	f004 f94a 	bl	8007724 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003490:	2100      	movs	r1, #0
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	f004 f981 	bl	800779a <USB_SetCurrentMode>
 8003498:	2100      	movs	r1, #0
 800349a:	4622      	mov	r2, r4
 800349c:	4623      	mov	r3, r4
 800349e:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034a2:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034a4:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 80034a6:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034aa:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 80034ae:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 80034b0:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 80034b2:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034b6:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80034ba:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034bc:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80034be:	6518      	str	r0, [r3, #80]	; 0x50
 80034c0:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 80034c4:	d1ef      	bne.n	80034a6 <HAL_PCD_Init+0x64>
 80034c6:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034c8:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80034ca:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80034ce:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 80034d0:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 80034d2:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034d6:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034da:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034de:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034e2:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 80034e6:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 80034ea:	d1ee      	bne.n	80034ca <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ee:	466e      	mov	r6, sp
 80034f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80034f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80034f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034fa:	e886 0003 	stmia.w	r6, {r0, r1}
 80034fe:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	f004 f98a 	bl	800781c <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8003508:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800350a:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800350e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003518:	4620      	mov	r0, r4
 800351a:	f000 fc27 	bl	8003d6c <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 800351e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003520:	2b01      	cmp	r3, #1
 8003522:	d102      	bne.n	800352a <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8003524:	4620      	mov	r0, r4
 8003526:	f000 fc34 	bl	8003d92 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f004 fc50 	bl	8007dd0 <USB_DevDisconnect>

  return HAL_OK;
 8003530:	2000      	movs	r0, #0
}
 8003532:	b00a      	add	sp, #40	; 0x28
 8003534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003538:	2001      	movs	r0, #1
 800353a:	e7fa      	b.n	8003532 <HAL_PCD_Init+0xf0>

0800353c <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800353c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003540:	2b01      	cmp	r3, #1
{
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003546:	d00c      	beq.n	8003562 <HAL_PCD_Start+0x26>
 8003548:	2301      	movs	r3, #1
 800354a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800354e:	6800      	ldr	r0, [r0, #0]
 8003550:	f004 fc32 	bl	8007db8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	f004 f914 	bl	8007782 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800355a:	2000      	movs	r0, #0
 800355c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003560:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003562:	2002      	movs	r0, #2
}
 8003564:	bd10      	pop	{r4, pc}
	...

08003568 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356c:	f8d0 9000 	ldr.w	r9, [r0]
{
 8003570:	b085      	sub	sp, #20
 8003572:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003574:	4648      	mov	r0, r9
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8003576:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800357a:	f004 fc64 	bl	8007e46 <USB_GetMode>
 800357e:	9000      	str	r0, [sp, #0]
 8003580:	2800      	cmp	r0, #0
 8003582:	f040 8154 	bne.w	800382e <HAL_PCD_IRQHandler+0x2c6>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	f004 fc2e 	bl	8007de8 <USB_ReadInterrupts>
 800358c:	2800      	cmp	r0, #0
 800358e:	f000 814e 	beq.w	800382e <HAL_PCD_IRQHandler+0x2c6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003592:	6820      	ldr	r0, [r4, #0]
 8003594:	f004 fc28 	bl	8007de8 <USB_ReadInterrupts>
 8003598:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800359a:	bf48      	it	mi
 800359c:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800359e:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035a0:	bf42      	ittt	mi
 80035a2:	6953      	ldrmi	r3, [r2, #20]
 80035a4:	f003 0302 	andmi.w	r3, r3, #2
 80035a8:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035aa:	f004 fc1d 	bl	8007de8 <USB_ReadInterrupts>
 80035ae:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
 80035b2:	d00b      	beq.n	80035cc <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	f004 fc1b 	bl	8007df0 <USB_ReadDevAllOutEpInterrupt>
 80035ba:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80035be:	4605      	mov	r5, r0

      while (ep_intr != 0U)
 80035c0:	46b2      	mov	sl, r6
      epnum = 0U;
 80035c2:	f04f 0b00 	mov.w	fp, #0
      while (ep_intr != 0U)
 80035c6:	2d00      	cmp	r5, #0
 80035c8:	f040 8134 	bne.w	8003834 <HAL_PCD_IRQHandler+0x2cc>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035cc:	6820      	ldr	r0, [r4, #0]
 80035ce:	f004 fc0b 	bl	8007de8 <USB_ReadInterrupts>
 80035d2:	0347      	lsls	r7, r0, #13
 80035d4:	d50c      	bpl.n	80035f0 <HAL_PCD_IRQHandler+0x88>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	f004 fc12 	bl	8007e00 <USB_ReadDevAllInEpInterrupt>
 80035dc:	4625      	mov	r5, r4
 80035de:	9001      	str	r0, [sp, #4]
 80035e0:	f509 6810 	add.w	r8, r9, #2304	; 0x900

      epnum = 0U;
 80035e4:	f04f 0b00 	mov.w	fp, #0

      while (ep_intr != 0U)
 80035e8:	9b01      	ldr	r3, [sp, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 8164 	bne.w	80038b8 <HAL_PCD_IRQHandler+0x350>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035f0:	6820      	ldr	r0, [r4, #0]
 80035f2:	f004 fbf9 	bl	8007de8 <USB_ReadInterrupts>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	da15      	bge.n	8003626 <HAL_PCD_IRQHandler+0xbe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035fa:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8003606:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800360a:	2b01      	cmp	r3, #1
 800360c:	f040 81cf 	bne.w	80039ae <HAL_PCD_IRQHandler+0x446>
      {
        hpcd->LPM_State = LPM_L0;
 8003610:	2100      	movs	r1, #0
 8003612:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003616:	4620      	mov	r0, r4
 8003618:	f01c f8e2 	bl	801f7e0 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	6953      	ldr	r3, [r2, #20]
 8003620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003624:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	f004 fbde 	bl	8007de8 <USB_ReadInterrupts>
 800362c:	0505      	lsls	r5, r0, #20
 800362e:	d50b      	bpl.n	8003648 <HAL_PCD_IRQHandler+0xe0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003630:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8003634:	07d8      	lsls	r0, r3, #31
 8003636:	d502      	bpl.n	800363e <HAL_PCD_IRQHandler+0xd6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003638:	4620      	mov	r0, r4
 800363a:	f01b ffd5 	bl	801f5e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	6953      	ldr	r3, [r2, #20]
 8003642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003646:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003648:	6820      	ldr	r0, [r4, #0]
 800364a:	f004 fbcd 	bl	8007de8 <USB_ReadInterrupts>
 800364e:	0101      	lsls	r1, r0, #4
 8003650:	d514      	bpl.n	800367c <HAL_PCD_IRQHandler+0x114>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800365a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800365c:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8003660:	2a00      	cmp	r2, #0
 8003662:	f040 81a8 	bne.w	80039b6 <HAL_PCD_IRQHandler+0x44e>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8003668:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800366a:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800366e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003672:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003676:	4620      	mov	r0, r4
 8003678:	f01c f8b2 	bl	801f7e0 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800367c:	6820      	ldr	r0, [r4, #0]
 800367e:	f004 fbb3 	bl	8007de8 <USB_ReadInterrupts>
 8003682:	04c2      	lsls	r2, r0, #19
 8003684:	d534      	bpl.n	80036f0 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003686:	f509 6500 	add.w	r5, r9, #2048	; 0x800
 800368a:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800368c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003694:	2110      	movs	r1, #16
 8003696:	f004 f897 	bl	80077c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369a:	6860      	ldr	r0, [r4, #4]
 800369c:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036a0:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a4:	9a00      	ldr	r2, [sp, #0]
 80036a6:	4282      	cmp	r2, r0
 80036a8:	f040 8189 	bne.w	80039be <HAL_PCD_IRQHandler+0x456>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036ac:	69eb      	ldr	r3, [r5, #28]
 80036ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036b2:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 819a 	beq.w	80039f0 <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80036bc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80036c0:	f043 030b 	orr.w	r3, r3, #11
 80036c4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80036c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80036ca:	f043 030b 	orr.w	r3, r3, #11
 80036ce:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036d0:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036d4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036da:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036de:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80036e2:	f004 fbcf 	bl	8007e84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	6953      	ldr	r3, [r2, #20]
 80036ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ee:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	f004 fb79 	bl	8007de8 <USB_ReadInterrupts>
 80036f6:	0483      	lsls	r3, r0, #18
 80036f8:	d520      	bpl.n	800373c <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036fa:	6820      	ldr	r0, [r4, #0]
 80036fc:	f004 fba7 	bl	8007e4e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	68d3      	ldr	r3, [r2, #12]
 8003704:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003708:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800370a:	2303      	movs	r3, #3
 800370c:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 800370e:	2340      	movs	r3, #64	; 0x40
 8003710:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8003712:	f000 ff9d 	bl	8004650 <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003716:	4bb3      	ldr	r3, [pc, #716]	; (80039e4 <HAL_PCD_IRQHandler+0x47c>)
 8003718:	4ab3      	ldr	r2, [pc, #716]	; (80039e8 <HAL_PCD_IRQHandler+0x480>)
 800371a:	4403      	add	r3, r0
 800371c:	4293      	cmp	r3, r2
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	f200 816f 	bhi.w	8003a02 <HAL_PCD_IRQHandler+0x49a>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 800372a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800372c:	4620      	mov	r0, r4
 800372e:	f01b ff4e 	bl	801f5ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	6953      	ldr	r3, [r2, #20]
 8003736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373a:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	f004 fb53 	bl	8007de8 <USB_ReadInterrupts>
 8003742:	06c7      	lsls	r7, r0, #27
 8003744:	d52b      	bpl.n	800379e <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	6993      	ldr	r3, [r2, #24]
 800374a:	f023 0310 	bic.w	r3, r3, #16
 800374e:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8003750:	f8d9 5020 	ldr.w	r5, [r9, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003754:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8003758:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800375a:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800375e:	f040 81a0 	bne.w	8003aa2 <HAL_PCD_IRQHandler+0x53a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003762:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003766:	421d      	tst	r5, r3
 8003768:	d014      	beq.n	8003794 <HAL_PCD_IRQHandler+0x22c>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800376a:	261c      	movs	r6, #28
 800376c:	fb06 4607 	mla	r6, r6, r7, r4
 8003770:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003774:	462a      	mov	r2, r5
 8003776:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800377a:	4648      	mov	r0, r9
 800377c:	f004 faa6 	bl	8007ccc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003780:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 8003784:	442b      	add	r3, r5
 8003786:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800378a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800378e:	441d      	add	r5, r3
 8003790:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003794:	6822      	ldr	r2, [r4, #0]
 8003796:	6993      	ldr	r3, [r2, #24]
 8003798:	f043 0310 	orr.w	r3, r3, #16
 800379c:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	f004 fb22 	bl	8007de8 <USB_ReadInterrupts>
 80037a4:	0706      	lsls	r6, r0, #28
 80037a6:	d507      	bpl.n	80037b8 <HAL_PCD_IRQHandler+0x250>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037a8:	4620      	mov	r0, r4
 80037aa:	f01b ff0c 	bl	801f5c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	6953      	ldr	r3, [r2, #20]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	f004 fb15 	bl	8007de8 <USB_ReadInterrupts>
 80037be:	02c5      	lsls	r5, r0, #11
 80037c0:	d509      	bpl.n	80037d6 <HAL_PCD_IRQHandler+0x26e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037c2:	fa5f f18b 	uxtb.w	r1, fp
 80037c6:	4620      	mov	r0, r4
 80037c8:	f01b ff44 	bl	801f654 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	6953      	ldr	r3, [r2, #20]
 80037d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037d6:	6820      	ldr	r0, [r4, #0]
 80037d8:	f004 fb06 	bl	8007de8 <USB_ReadInterrupts>
 80037dc:	0280      	lsls	r0, r0, #10
 80037de:	d509      	bpl.n	80037f4 <HAL_PCD_IRQHandler+0x28c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037e0:	fa5f f18b 	uxtb.w	r1, fp
 80037e4:	4620      	mov	r0, r4
 80037e6:	f01b ff31 	bl	801f64c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	6953      	ldr	r3, [r2, #20]
 80037ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	f004 faf7 	bl	8007de8 <USB_ReadInterrupts>
 80037fa:	0041      	lsls	r1, r0, #1
 80037fc:	d507      	bpl.n	800380e <HAL_PCD_IRQHandler+0x2a6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037fe:	4620      	mov	r0, r4
 8003800:	f01b ff2c 	bl	801f65c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	6953      	ldr	r3, [r2, #20]
 8003808:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800380c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	f004 faea 	bl	8007de8 <USB_ReadInterrupts>
 8003814:	0742      	lsls	r2, r0, #29
 8003816:	d50a      	bpl.n	800382e <HAL_PCD_IRQHandler+0x2c6>
    {
      temp = hpcd->Instance->GOTGINT;
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800381c:	076b      	lsls	r3, r5, #29
 800381e:	d502      	bpl.n	8003826 <HAL_PCD_IRQHandler+0x2be>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003820:	4620      	mov	r0, r4
 8003822:	f01b ff1f 	bl	801f664 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	4315      	orrs	r5, r2
 800382c:	605d      	str	r5, [r3, #4]
    }
  }
}
 800382e:	b005      	add	sp, #20
 8003830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8003834:	07e9      	lsls	r1, r5, #31
 8003836:	d52e      	bpl.n	8003896 <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003838:	fa5f f28b 	uxtb.w	r2, fp
 800383c:	4611      	mov	r1, r2
 800383e:	6820      	ldr	r0, [r4, #0]
 8003840:	9201      	str	r2, [sp, #4]
 8003842:	f004 fae5 	bl	8007e10 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003846:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003848:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800384a:	d50d      	bpl.n	8003868 <HAL_PCD_IRQHandler+0x300>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800384c:	4b67      	ldr	r3, [pc, #412]	; (80039ec <HAL_PCD_IRQHandler+0x484>)
 800384e:	9a01      	ldr	r2, [sp, #4]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003850:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003852:	4598      	cmp	r8, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003854:	f8ca 1008 	str.w	r1, [sl, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003858:	d129      	bne.n	80038ae <HAL_PCD_IRQHandler+0x346>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 800385a:	68b1      	ldr	r1, [r6, #8]
 800385c:	040b      	lsls	r3, r1, #16
 800385e:	d520      	bpl.n	80038a2 <HAL_PCD_IRQHandler+0x33a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003860:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003864:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003868:	0739      	lsls	r1, r7, #28
 800386a:	d50f      	bpl.n	800388c <HAL_PCD_IRQHandler+0x324>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800386c:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_PCD_IRQHandler+0x484>)
 800386e:	4598      	cmp	r8, r3
 8003870:	d106      	bne.n	8003880 <HAL_PCD_IRQHandler+0x318>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003872:	68b2      	ldr	r2, [r6, #8]
 8003874:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003876:	bf44      	itt	mi
 8003878:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 800387c:	f8ca 2008 	strmi.w	r2, [sl, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 8003880:	4620      	mov	r0, r4
 8003882:	f01b fe89 	bl	801f598 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003886:	2308      	movs	r3, #8
 8003888:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800388c:	06fb      	lsls	r3, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800388e:	bf44      	itt	mi
 8003890:	2310      	movmi	r3, #16
 8003892:	f8ca 3008 	strmi.w	r3, [sl, #8]
        epnum++;
 8003896:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 800389a:	086d      	lsrs	r5, r5, #1
 800389c:	f10a 0a20 	add.w	sl, sl, #32
 80038a0:	e691      	b.n	80035c6 <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 80038a2:	68b1      	ldr	r1, [r6, #8]
 80038a4:	0688      	lsls	r0, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 80038a6:	bf44      	itt	mi
 80038a8:	2120      	movmi	r1, #32
 80038aa:	f8ca 1008 	strmi.w	r1, [sl, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038ae:	4611      	mov	r1, r2
 80038b0:	4620      	mov	r0, r4
 80038b2:	f01b fe77 	bl	801f5a4 <HAL_PCD_DataOutStageCallback>
 80038b6:	e7d7      	b.n	8003868 <HAL_PCD_IRQHandler+0x300>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038b8:	9b01      	ldr	r3, [sp, #4]
 80038ba:	07de      	lsls	r6, r3, #31
 80038bc:	d56e      	bpl.n	800399c <HAL_PCD_IRQHandler+0x434>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038be:	fa5f fa8b 	uxtb.w	sl, fp
 80038c2:	4651      	mov	r1, sl
 80038c4:	6820      	ldr	r0, [r4, #0]
 80038c6:	f004 faac 	bl	8007e22 <USB_ReadDevInEPInterrupt>
 80038ca:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038cc:	07f0      	lsls	r0, r6, #31
 80038ce:	d510      	bpl.n	80038f2 <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d0:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 80038d4:	2001      	movs	r0, #1
 80038d6:	f00b 020f 	and.w	r2, fp, #15
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038de:	ea23 0302 	bic.w	r3, r3, r2
 80038e2:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038e6:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038e8:	f8c8 0008 	str.w	r0, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038ec:	4620      	mov	r0, r4
 80038ee:	f01b fe62 	bl	801f5b6 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038f2:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038f4:	bf44      	itt	mi
 80038f6:	2308      	movmi	r3, #8
 80038f8:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038fc:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038fe:	bf44      	itt	mi
 8003900:	2310      	movmi	r3, #16
 8003902:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003906:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003908:	bf44      	itt	mi
 800390a:	2340      	movmi	r3, #64	; 0x40
 800390c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003910:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003912:	bf44      	itt	mi
 8003914:	2302      	movmi	r3, #2
 8003916:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800391a:	0636      	lsls	r6, r6, #24
 800391c:	d53e      	bpl.n	800399c <HAL_PCD_IRQHandler+0x434>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800391e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003920:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 8003922:	42b3      	cmp	r3, r6
 8003924:	d83a      	bhi.n	800399c <HAL_PCD_IRQHandler+0x434>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8003926:	1af6      	subs	r6, r6, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8003928:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 800392e:	429e      	cmp	r6, r3
 8003930:	bf28      	it	cs
 8003932:	461e      	movcs	r6, r3

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003934:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003938:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800393a:	eb03 134b 	add.w	r3, r3, fp, lsl #5
  len32b = (len + 3U) / 4U;
 800393e:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003940:	9303      	str	r3, [sp, #12]
 8003942:	9b03      	ldr	r3, [sp, #12]
 8003944:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	b29b      	uxth	r3, r3
 800394a:	42b3      	cmp	r3, r6
 800394c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800394e:	d923      	bls.n	8003998 <HAL_PCD_IRQHandler+0x430>
 8003950:	429f      	cmp	r7, r3
 8003952:	d921      	bls.n	8003998 <HAL_PCD_IRQHandler+0x430>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003954:	b967      	cbnz	r7, 8003970 <HAL_PCD_IRQHandler+0x408>
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003956:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003958:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800395a:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 800395e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003962:	fa02 f20b 	lsl.w	r2, r2, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003966:	ea23 0302 	bic.w	r3, r3, r2
 800396a:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 800396e:	e015      	b.n	800399c <HAL_PCD_IRQHandler+0x434>
    len = ep->xfer_len - ep->xfer_count;
 8003970:	1aff      	subs	r7, r7, r3
 8003972:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003974:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8003976:	9802      	ldr	r0, [sp, #8]
 8003978:	429f      	cmp	r7, r3
 800397a:	bf28      	it	cs
 800397c:	461f      	movcs	r7, r3
 800397e:	b2bb      	uxth	r3, r7
 8003980:	4652      	mov	r2, sl
 8003982:	f004 f8cd 	bl	8007b20 <USB_WritePacket>
    ep->xfer_buff  += len;
 8003986:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003988:	443b      	add	r3, r7
 800398a:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800398c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 800398e:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 8003990:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 8003992:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 8003994:	656f      	str	r7, [r5, #84]	; 0x54
 8003996:	e7d4      	b.n	8003942 <HAL_PCD_IRQHandler+0x3da>
  if (ep->xfer_len <= ep->xfer_count)
 8003998:	429f      	cmp	r7, r3
 800399a:	d9dc      	bls.n	8003956 <HAL_PCD_IRQHandler+0x3ee>
        ep_intr >>= 1U;
 800399c:	9b01      	ldr	r3, [sp, #4]
 800399e:	085b      	lsrs	r3, r3, #1
        epnum++;
 80039a0:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	351c      	adds	r5, #28
 80039a8:	f108 0820 	add.w	r8, r8, #32
 80039ac:	e61c      	b.n	80035e8 <HAL_PCD_IRQHandler+0x80>
        HAL_PCD_ResumeCallback(hpcd);
 80039ae:	4620      	mov	r0, r4
 80039b0:	f01b fe32 	bl	801f618 <HAL_PCD_ResumeCallback>
 80039b4:	e632      	b.n	800361c <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 80039b6:	4620      	mov	r0, r4
 80039b8:	f01b fe16 	bl	801f5e8 <HAL_PCD_SuspendCallback>
 80039bc:	e65e      	b.n	800367c <HAL_PCD_IRQHandler+0x114>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039be:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80039c6:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039c8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80039d0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80039d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d8:	9a00      	ldr	r2, [sp, #0]
 80039da:	3201      	adds	r2, #1
 80039dc:	9200      	str	r2, [sp, #0]
 80039de:	3320      	adds	r3, #32
 80039e0:	e660      	b.n	80036a4 <HAL_PCD_IRQHandler+0x13c>
 80039e2:	bf00      	nop
 80039e4:	ff275340 	.word	0xff275340
 80039e8:	000c34ff 	.word	0x000c34ff
 80039ec:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80039f0:	696b      	ldr	r3, [r5, #20]
 80039f2:	f043 030b 	orr.w	r3, r3, #11
 80039f6:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80039f8:	692b      	ldr	r3, [r5, #16]
 80039fa:	f043 030b 	orr.w	r3, r3, #11
 80039fe:	612b      	str	r3, [r5, #16]
 8003a00:	e666      	b.n	80036d0 <HAL_PCD_IRQHandler+0x168>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a02:	4a2f      	ldr	r2, [pc, #188]	; (8003ac0 <HAL_PCD_IRQHandler+0x558>)
 8003a04:	492f      	ldr	r1, [pc, #188]	; (8003ac4 <HAL_PCD_IRQHandler+0x55c>)
 8003a06:	4402      	add	r2, r0
 8003a08:	428a      	cmp	r2, r1
 8003a0a:	d803      	bhi.n	8003a14 <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003a12:	e68a      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a14:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8003a18:	492b      	ldr	r1, [pc, #172]	; (8003ac8 <HAL_PCD_IRQHandler+0x560>)
 8003a1a:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003a1e:	428a      	cmp	r2, r1
 8003a20:	d803      	bhi.n	8003a2a <HAL_PCD_IRQHandler+0x4c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8003a28:	e67f      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a2a:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8003a2e:	4927      	ldr	r1, [pc, #156]	; (8003acc <HAL_PCD_IRQHandler+0x564>)
 8003a30:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d803      	bhi.n	8003a40 <HAL_PCD_IRQHandler+0x4d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003a3e:	e674      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <HAL_PCD_IRQHandler+0x568>)
 8003a42:	4924      	ldr	r1, [pc, #144]	; (8003ad4 <HAL_PCD_IRQHandler+0x56c>)
 8003a44:	4402      	add	r2, r0
 8003a46:	428a      	cmp	r2, r1
 8003a48:	d803      	bhi.n	8003a52 <HAL_PCD_IRQHandler+0x4ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8003a50:	e66b      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_PCD_IRQHandler+0x570>)
 8003a54:	4921      	ldr	r1, [pc, #132]	; (8003adc <HAL_PCD_IRQHandler+0x574>)
 8003a56:	4402      	add	r2, r0
 8003a58:	428a      	cmp	r2, r1
 8003a5a:	d803      	bhi.n	8003a64 <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8003a62:	e662      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_PCD_IRQHandler+0x578>)
 8003a66:	491f      	ldr	r1, [pc, #124]	; (8003ae4 <HAL_PCD_IRQHandler+0x57c>)
 8003a68:	4402      	add	r2, r0
 8003a6a:	428a      	cmp	r2, r1
 8003a6c:	d803      	bhi.n	8003a76 <HAL_PCD_IRQHandler+0x50e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8003a74:	e659      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a76:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8003a7a:	491b      	ldr	r1, [pc, #108]	; (8003ae8 <HAL_PCD_IRQHandler+0x580>)
 8003a7c:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8003a80:	428a      	cmp	r2, r1
 8003a82:	d803      	bhi.n	8003a8c <HAL_PCD_IRQHandler+0x524>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a8a:	e64e      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a8c:	4a17      	ldr	r2, [pc, #92]	; (8003aec <HAL_PCD_IRQHandler+0x584>)
 8003a8e:	4918      	ldr	r1, [pc, #96]	; (8003af0 <HAL_PCD_IRQHandler+0x588>)
 8003a90:	4402      	add	r2, r0
 8003a92:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	bf94      	ite	ls
 8003a98:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a9c:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8003aa0:	e643      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	f47f ae76 	bne.w	8003794 <HAL_PCD_IRQHandler+0x22c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003aae:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab0:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ab2:	f004 f90b 	bl	8007ccc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab6:	fb06 4607 	mla	r6, r6, r7, r4
 8003aba:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003abe:	e664      	b.n	800378a <HAL_PCD_IRQHandler+0x222>
 8003ac0:	ff1b1e40 	.word	0xff1b1e40
 8003ac4:	000f423f 	.word	0x000f423f
 8003ac8:	00124f7f 	.word	0x00124f7f
 8003acc:	0013d61f 	.word	0x0013d61f
 8003ad0:	fee5b660 	.word	0xfee5b660
 8003ad4:	0016e35f 	.word	0x0016e35f
 8003ad8:	feced300 	.word	0xfeced300
 8003adc:	001b773f 	.word	0x001b773f
 8003ae0:	feb35bc0 	.word	0xfeb35bc0
 8003ae4:	002191bf 	.word	0x002191bf
 8003ae8:	0038751f 	.word	0x0038751f
 8003aec:	fe5954e0 	.word	0xfe5954e0
 8003af0:	00419cdf 	.word	0x00419cdf

08003af4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003af4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003af8:	2a01      	cmp	r2, #1
{
 8003afa:	b510      	push	{r4, lr}
 8003afc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003afe:	d00b      	beq.n	8003b18 <HAL_PCD_SetAddress+0x24>
 8003b00:	2201      	movs	r2, #1
 8003b02:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003b06:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b0a:	6800      	ldr	r0, [r0, #0]
 8003b0c:	f004 f944 	bl	8007d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b10:	2000      	movs	r0, #0
 8003b12:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003b16:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003b18:	2002      	movs	r0, #2
}
 8003b1a:	bd10      	pop	{r4, pc}

08003b1c <HAL_PCD_EP_Open>:
{
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4604      	mov	r4, r0
 8003b20:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003b24:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b28:	f04f 061c 	mov.w	r6, #28
 8003b2c:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b2e:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003b32:	bf15      	itete	ne
 8003b34:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8003b38:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b3c:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003b3e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003b42:	bf15      	itete	ne
 8003b44:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8003b46:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8003b48:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8003b4c:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8003b50:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003b52:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8003b54:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8003b56:	b2c0      	uxtb	r0, r0
 8003b58:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8003b5a:	b102      	cbz	r2, 8003b5e <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003b5c:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003b5e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003b60:	bf04      	itt	eq
 8003b62:	2300      	moveq	r3, #0
 8003b64:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003b66:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d009      	beq.n	8003b82 <HAL_PCD_EP_Open+0x66>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	f003 feed 	bl	8007954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8003b82:	2002      	movs	r0, #2
}
 8003b84:	bd70      	pop	{r4, r5, r6, pc}

08003b86 <HAL_PCD_EP_Close>:
{
 8003b86:	f001 030f 	and.w	r3, r1, #15
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	b510      	push	{r4, lr}
 8003b8e:	4604      	mov	r4, r0
 8003b90:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8003b92:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b96:	fb00 4102 	mla	r1, r0, r2, r4
 8003b9a:	bf19      	ittee	ne
 8003b9c:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003b9e:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 8003ba2:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003ba6:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003baa:	bf15      	itete	ne
 8003bac:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003bae:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8003bb0:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8003bb4:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 8003bb8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003bba:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d009      	beq.n	8003bd6 <HAL_PCD_EP_Close+0x50>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	f003 ff05 	bl	80079d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003bd4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003bd6:	2002      	movs	r0, #2
}
 8003bd8:	bd10      	pop	{r4, pc}

08003bda <HAL_PCD_EP_Receive>:
{
 8003bda:	b538      	push	{r3, r4, r5, lr}
 8003bdc:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003be0:	241c      	movs	r4, #28
 8003be2:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003be6:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003bea:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003bee:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003bf2:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003bf4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003bf8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003bfc:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 8003c00:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c04:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003c06:	b91d      	cbnz	r5, 8003c10 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c08:	f003 ff18 	bl	8007a3c <USB_EP0StartXfer>
}
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c10:	f003 ff96 	bl	8007b40 <USB_EPStartXfer>
 8003c14:	e7fa      	b.n	8003c0c <HAL_PCD_EP_Receive+0x32>

08003c16 <HAL_PCD_EP_Transmit>:
{
 8003c16:	b538      	push	{r3, r4, r5, lr}
 8003c18:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c1c:	241c      	movs	r4, #28
 8003c1e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003c22:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c26:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003c28:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003c2e:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003c30:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003c32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 8003c36:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c3a:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003c3c:	b91d      	cbnz	r5, 8003c46 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c3e:	f003 fefd 	bl	8007a3c <USB_EP0StartXfer>
}
 8003c42:	2000      	movs	r0, #0
 8003c44:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c46:	f003 ff7b 	bl	8007b40 <USB_EPStartXfer>
 8003c4a:	e7fa      	b.n	8003c42 <HAL_PCD_EP_Transmit+0x2c>

08003c4c <HAL_PCD_EP_SetStall>:
{
 8003c4c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003c4e:	6843      	ldr	r3, [r0, #4]
 8003c50:	f001 050f 	and.w	r5, r1, #15
 8003c54:	429d      	cmp	r5, r3
{
 8003c56:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003c58:	d82d      	bhi.n	8003cb6 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003c5a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c5e:	f04f 021c 	mov.w	r2, #28
 8003c62:	d01e      	beq.n	8003ca2 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8003c64:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c68:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8003c6c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c6e:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8003c70:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8003c74:	2201      	movs	r2, #1
 8003c76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8003c78:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003c7a:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8003c7e:	4291      	cmp	r1, r2
 8003c80:	d01b      	beq.n	8003cba <HAL_PCD_EP_SetStall+0x6e>
 8003c82:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c86:	4619      	mov	r1, r3
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	f004 f82d 	bl	8007ce8 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8003c8e:	b925      	cbnz	r5, 8003c9a <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c90:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	f004 f8f5 	bl	8007e84 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003ca0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003ca2:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003ca6:	fb02 0101 	mla	r1, r2, r1, r0
 8003caa:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003cac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003cb0:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003cb4:	e7de      	b.n	8003c74 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003cba:	2002      	movs	r0, #2
}
 8003cbc:	bd38      	pop	{r3, r4, r5, pc}

08003cbe <HAL_PCD_EP_ClrStall>:
{
 8003cbe:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cc0:	6843      	ldr	r3, [r0, #4]
 8003cc2:	f001 020f 	and.w	r2, r1, #15
 8003cc6:	429a      	cmp	r2, r3
{
 8003cc8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cca:	d826      	bhi.n	8003d1a <HAL_PCD_EP_ClrStall+0x5c>
 8003ccc:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003cce:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003cd2:	fb03 0102 	mla	r1, r3, r2, r0
 8003cd6:	bf19      	ittee	ne
 8003cd8:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003cda:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003cde:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003ce2:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003ce6:	bf14      	ite	ne
 8003ce8:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003cea:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003cec:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003cf0:	bf14      	ite	ne
 8003cf2:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003cf6:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003cfa:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8003cfc:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003cfe:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d00b      	beq.n	8003d1e <HAL_PCD_EP_ClrStall+0x60>
 8003d06:	2301      	movs	r3, #1
 8003d08:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	f004 f818 	bl	8007d42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d12:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003d16:	4628      	mov	r0, r5
 8003d18:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003d1e:	2002      	movs	r0, #2
}
 8003d20:	bd38      	pop	{r3, r4, r5, pc}

08003d22 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d22:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d24:	6804      	ldr	r4, [r0, #0]
 8003d26:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003d28:	b921      	cbnz	r1, 8003d34 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d2e:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003d30:	2000      	movs	r0, #0
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003d36:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	1c46      	adds	r6, r0, #1
 8003d40:	b2c0      	uxtb	r0, r0
 8003d42:	4285      	cmp	r5, r0
 8003d44:	d806      	bhi.n	8003d54 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d46:	313f      	adds	r1, #63	; 0x3f
 8003d48:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	e7ed      	b.n	8003d30 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d54:	3040      	adds	r0, #64	; 0x40
 8003d56:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003d5a:	6840      	ldr	r0, [r0, #4]
 8003d5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003d60:	4630      	mov	r0, r6
 8003d62:	e7ec      	b.n	8003d3e <HAL_PCDEx_SetTxFiFo+0x1c>

08003d64 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003d64:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003d66:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003d68:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d6c:	6802      	ldr	r2, [r0, #0]
{
 8003d6e:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003d70:	2101      	movs	r1, #1
 8003d72:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d76:	2000      	movs	r0, #0
 8003d78:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d7c:	6993      	ldr	r3, [r2, #24]
 8003d7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d82:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d84:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	f043 0303 	orr.w	r3, r3, #3
 8003d8e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003d90:	4770      	bx	lr

08003d92 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d92:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003d9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da0:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8003da2:	2000      	movs	r0, #0
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <HAL_PWREx_GetVoltageRange+0x20>)
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003db0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003db4:	d007      	beq.n	8003dc6 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dba:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003dbe:	bf14      	ite	ne
 8003dc0:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003dc4:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003dc6:	4770      	bx	lr
 8003dc8:	40007000 	.word	0x40007000

08003dcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dcc:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dce:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dd0:	bb28      	cbnz	r0, 8003e1e <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dd2:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003dd6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dda:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003de6:	d119      	bne.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003df4:	4a20      	ldr	r2, [pc, #128]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003df6:	6811      	ldr	r1, [r2, #0]
 8003df8:	2232      	movs	r2, #50	; 0x32
 8003dfa:	434a      	muls	r2, r1
 8003dfc:	491f      	ldr	r1, [pc, #124]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003dfe:	fbb2 f2f1 	udiv	r2, r2, r1
 8003e02:	4619      	mov	r1, r3
 8003e04:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e06:	6958      	ldr	r0, [r3, #20]
 8003e08:	0540      	lsls	r0, r0, #21
 8003e0a:	d500      	bpl.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x42>
 8003e0c:	b922      	cbnz	r2, 8003e18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e0e:	694b      	ldr	r3, [r1, #20]
 8003e10:	055b      	lsls	r3, r3, #21
 8003e12:	d52d      	bpl.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8003e14:	2003      	movs	r0, #3
 8003e16:	4770      	bx	lr
        wait_loop_index--;
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	e7f4      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003e1c:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e1e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003e22:	d120      	bne.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e24:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003e28:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e2c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e38:	d11a      	bne.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e44:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e46:	4a0c      	ldr	r2, [pc, #48]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003e48:	6811      	ldr	r1, [r2, #0]
 8003e4a:	2232      	movs	r2, #50	; 0x32
 8003e4c:	434a      	muls	r2, r1
 8003e4e:	490b      	ldr	r1, [pc, #44]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003e50:	fbb2 f2f1 	udiv	r2, r2, r1
 8003e54:	4619      	mov	r1, r3
 8003e56:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e58:	6958      	ldr	r0, [r3, #20]
 8003e5a:	0540      	lsls	r0, r0, #21
 8003e5c:	d5d7      	bpl.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x42>
 8003e5e:	2a00      	cmp	r2, #0
 8003e60:	d0d5      	beq.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8003e62:	3a01      	subs	r2, #1
 8003e64:	e7f8      	b.n	8003e58 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e66:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e6e:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e70:	2000      	movs	r0, #0
}
 8003e72:	4770      	bx	lr
 8003e74:	40007000 	.word	0x40007000
 8003e78:	20000ec4 	.word	0x20000ec4
 8003e7c:	000f4240 	.word	0x000f4240

08003e80 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e80:	4a02      	ldr	r2, [pc, #8]	; (8003e8c <HAL_PWREx_EnableVddUSB+0xc>)
 8003e82:	6853      	ldr	r3, [r2, #4]
 8003e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e88:	6053      	str	r3, [r2, #4]
 8003e8a:	4770      	bx	lr
 8003e8c:	40007000 	.word	0x40007000

08003e90 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e90:	4a02      	ldr	r2, [pc, #8]	; (8003e9c <HAL_PWREx_EnableVddIO2+0xc>)
 8003e92:	6853      	ldr	r3, [r2, #4]
 8003e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e98:	6053      	str	r3, [r2, #4]
 8003e9a:	4770      	bx	lr
 8003e9c:	40007000 	.word	0x40007000

08003ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ea2:	4d1c      	ldr	r5, [pc, #112]	; (8003f14 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8003ea4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ea6:	00da      	lsls	r2, r3, #3
{
 8003ea8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003eaa:	d518      	bpl.n	8003ede <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003eac:	f7ff ff7c 	bl	8003da8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003eb4:	d123      	bne.n	8003efe <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eb6:	2c80      	cmp	r4, #128	; 0x80
 8003eb8:	d928      	bls.n	8003f0c <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003eba:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ebc:	bf8c      	ite	hi
 8003ebe:	2002      	movhi	r0, #2
 8003ec0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ec2:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8003ec4:	6813      	ldr	r3, [r2, #0]
 8003ec6:	f023 030f 	bic.w	r3, r3, #15
 8003eca:	4303      	orrs	r3, r0
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003ed4:	1a18      	subs	r0, r3, r0
 8003ed6:	bf18      	it	ne
 8003ed8:	2001      	movne	r0, #1
 8003eda:	b003      	add	sp, #12
 8003edc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	65ab      	str	r3, [r5, #88]	; 0x58
 8003ee6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003ef0:	f7ff ff5a 	bl	8003da8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efa:	65ab      	str	r3, [r5, #88]	; 0x58
 8003efc:	e7d8      	b.n	8003eb0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8003efe:	2c7f      	cmp	r4, #127	; 0x7f
 8003f00:	d806      	bhi.n	8003f10 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8003f02:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003f06:	4258      	negs	r0, r3
 8003f08:	4158      	adcs	r0, r3
 8003f0a:	e7da      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	e7d8      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f10:	2002      	movs	r0, #2
 8003f12:	e7d6      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40022000 	.word	0x40022000

08003f1c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <HAL_RCC_GetSysClockFreq+0x90>)
 8003f1e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f20:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f22:	f012 020c 	ands.w	r2, r2, #12
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x18>
 8003f28:	2a0c      	cmp	r2, #12
 8003f2a:	d115      	bne.n	8003f58 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f30:	2901      	cmp	r1, #1
 8003f32:	d118      	bne.n	8003f66 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f34:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003f36:	481e      	ldr	r0, [pc, #120]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x94>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f38:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f3a:	bf55      	itete	pl
 8003f3c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f40:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f42:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f46:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003f4a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f4e:	b112      	cbz	r2, 8003f56 <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f50:	2a0c      	cmp	r2, #12
 8003f52:	d009      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x4c>
 8003f54:	2000      	movs	r0, #0
}
 8003f56:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f58:	2a04      	cmp	r2, #4
 8003f5a:	d024      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x8a>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f5c:	2a08      	cmp	r2, #8
 8003f5e:	4815      	ldr	r0, [pc, #84]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f60:	bf18      	it	ne
 8003f62:	2000      	movne	r0, #0
 8003f64:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f66:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f68:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f6a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f6c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f70:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 8003f74:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f76:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x6c>
 8003f7c:	2903      	cmp	r1, #3
 8003f7e:	d003      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x6c>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f80:	68d9      	ldr	r1, [r3, #12]
 8003f82:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8003f86:	e003      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f88:	68d9      	ldr	r1, [r3, #12]
 8003f8a:	480a      	ldr	r0, [pc, #40]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f8c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f90:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f92:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f96:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003f9a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f9c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f9e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003fa0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003fa4:	4770      	bx	lr
 8003fa6:	4803      	ldr	r0, [pc, #12]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	0803151c 	.word	0x0803151c
 8003fb4:	00f42400 	.word	0x00f42400

08003fb8 <HAL_RCC_OscConfig>:
{
 8003fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	b908      	cbnz	r0, 8003fc4 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	e046      	b.n	8004052 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc4:	4ca8      	ldr	r4, [pc, #672]	; (8004268 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fc6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc8:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fca:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fcc:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fce:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fd2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fd6:	d572      	bpl.n	80040be <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fd8:	b11e      	cbz	r6, 8003fe2 <HAL_RCC_OscConfig+0x2a>
 8003fda:	2e0c      	cmp	r6, #12
 8003fdc:	d151      	bne.n	8004082 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fde:	2f01      	cmp	r7, #1
 8003fe0:	d14f      	bne.n	8004082 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	0799      	lsls	r1, r3, #30
 8003fe6:	d502      	bpl.n	8003fee <HAL_RCC_OscConfig+0x36>
 8003fe8:	69ab      	ldr	r3, [r5, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0e8      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	6a28      	ldr	r0, [r5, #32]
 8003ff2:	071a      	lsls	r2, r3, #28
 8003ff4:	bf56      	itet	pl
 8003ff6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003ffa:	6823      	ldrmi	r3, [r4, #0]
 8003ffc:	091b      	lsrpl	r3, r3, #4
 8003ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004002:	4283      	cmp	r3, r0
 8004004:	d228      	bcs.n	8004058 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004006:	f7ff ff4b 	bl	8003ea0 <RCC_SetFlashLatencyFromMSIRange>
 800400a:	2800      	cmp	r0, #0
 800400c:	d1d8      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	f043 0308 	orr.w	r3, r3, #8
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	6a2a      	ldr	r2, [r5, #32]
 800401a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401e:	4313      	orrs	r3, r2
 8004020:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004022:	6863      	ldr	r3, [r4, #4]
 8004024:	69ea      	ldr	r2, [r5, #28]
 8004026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800402e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004030:	f7ff ff74 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8004034:	68a3      	ldr	r3, [r4, #8]
 8004036:	4a8d      	ldr	r2, [pc, #564]	; (800426c <HAL_RCC_OscConfig+0x2b4>)
 8004038:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	40d8      	lsrs	r0, r3
 8004044:	4b8a      	ldr	r3, [pc, #552]	; (8004270 <HAL_RCC_OscConfig+0x2b8>)
 8004046:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004048:	2000      	movs	r0, #0
 800404a:	f7fc ffb9 	bl	8000fc0 <HAL_InitTick>
        if(status != HAL_OK)
 800404e:	2800      	cmp	r0, #0
 8004050:	d035      	beq.n	80040be <HAL_RCC_OscConfig+0x106>
}
 8004052:	b003      	add	sp, #12
 8004054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	f043 0308 	orr.w	r3, r3, #8
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004066:	4303      	orrs	r3, r0
 8004068:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800406a:	6863      	ldr	r3, [r4, #4]
 800406c:	69ea      	ldr	r2, [r5, #28]
 800406e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004072:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004076:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004078:	f7ff ff12 	bl	8003ea0 <RCC_SetFlashLatencyFromMSIRange>
 800407c:	2800      	cmp	r0, #0
 800407e:	d0d7      	beq.n	8004030 <HAL_RCC_OscConfig+0x78>
 8004080:	e79e      	b.n	8003fc0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004082:	69ab      	ldr	r3, [r5, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d03a      	beq.n	80040fe <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004090:	f7fc ffc6 	bl	8001020 <HAL_GetTick>
 8004094:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	079b      	lsls	r3, r3, #30
 800409a:	d528      	bpl.n	80040ee <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	f043 0308 	orr.w	r3, r3, #8
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	6a2a      	ldr	r2, [r5, #32]
 80040a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ac:	4313      	orrs	r3, r2
 80040ae:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	69ea      	ldr	r2, [r5, #28]
 80040b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040bc:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040be:	682b      	ldr	r3, [r5, #0]
 80040c0:	07d9      	lsls	r1, r3, #31
 80040c2:	d42d      	bmi.n	8004120 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	079a      	lsls	r2, r3, #30
 80040c8:	d46b      	bmi.n	80041a2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ca:	682b      	ldr	r3, [r5, #0]
 80040cc:	0719      	lsls	r1, r3, #28
 80040ce:	f100 80a0 	bmi.w	8004212 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d2:	682b      	ldr	r3, [r5, #0]
 80040d4:	075a      	lsls	r2, r3, #29
 80040d6:	f100 80cd 	bmi.w	8004274 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	069a      	lsls	r2, r3, #26
 80040de:	f100 8136 	bmi.w	800434e <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 815c 	bne.w	80043a2 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80040ea:	2000      	movs	r0, #0
 80040ec:	e7b1      	b.n	8004052 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040ee:	f7fc ff97 	bl	8001020 <HAL_GetTick>
 80040f2:	eba0 0008 	sub.w	r0, r0, r8
 80040f6:	2802      	cmp	r0, #2
 80040f8:	d9cd      	bls.n	8004096 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 80040fa:	2003      	movs	r0, #3
 80040fc:	e7a9      	b.n	8004052 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004106:	f7fc ff8b 	bl	8001020 <HAL_GetTick>
 800410a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	0798      	lsls	r0, r3, #30
 8004110:	d5d5      	bpl.n	80040be <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004112:	f7fc ff85 	bl	8001020 <HAL_GetTick>
 8004116:	eba0 0008 	sub.w	r0, r0, r8
 800411a:	2802      	cmp	r0, #2
 800411c:	d9f6      	bls.n	800410c <HAL_RCC_OscConfig+0x154>
 800411e:	e7ec      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004120:	2e08      	cmp	r6, #8
 8004122:	d003      	beq.n	800412c <HAL_RCC_OscConfig+0x174>
 8004124:	2e0c      	cmp	r6, #12
 8004126:	d108      	bne.n	800413a <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8004128:	2f03      	cmp	r7, #3
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	039b      	lsls	r3, r3, #14
 8004130:	d5c8      	bpl.n	80040c4 <HAL_RCC_OscConfig+0x10c>
 8004132:	686b      	ldr	r3, [r5, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1c5      	bne.n	80040c4 <HAL_RCC_OscConfig+0x10c>
 8004138:	e742      	b.n	8003fc0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800413a:	686b      	ldr	r3, [r5, #4]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d110      	bne.n	8004164 <HAL_RCC_OscConfig+0x1ac>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800414a:	f7fc ff69 	bl	8001020 <HAL_GetTick>
 800414e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	0398      	lsls	r0, r3, #14
 8004154:	d4b6      	bmi.n	80040c4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004156:	f7fc ff63 	bl	8001020 <HAL_GetTick>
 800415a:	eba0 0008 	sub.w	r0, r0, r8
 800415e:	2864      	cmp	r0, #100	; 0x64
 8004160:	d9f6      	bls.n	8004150 <HAL_RCC_OscConfig+0x198>
 8004162:	e7ca      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004168:	d104      	bne.n	8004174 <HAL_RCC_OscConfig+0x1bc>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	e7e6      	b.n	8004142 <HAL_RCC_OscConfig+0x18a>
 8004174:	6822      	ldr	r2, [r4, #0]
 8004176:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800417a:	6022      	str	r2, [r4, #0]
 800417c:	6822      	ldr	r2, [r4, #0]
 800417e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004182:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e0      	bne.n	800414a <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8004188:	f7fc ff4a 	bl	8001020 <HAL_GetTick>
 800418c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	0399      	lsls	r1, r3, #14
 8004192:	d597      	bpl.n	80040c4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fc ff44 	bl	8001020 <HAL_GetTick>
 8004198:	eba0 0008 	sub.w	r0, r0, r8
 800419c:	2864      	cmp	r0, #100	; 0x64
 800419e:	d9f6      	bls.n	800418e <HAL_RCC_OscConfig+0x1d6>
 80041a0:	e7ab      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041a2:	2e04      	cmp	r6, #4
 80041a4:	d003      	beq.n	80041ae <HAL_RCC_OscConfig+0x1f6>
 80041a6:	2e0c      	cmp	r6, #12
 80041a8:	d110      	bne.n	80041cc <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80041aa:	2f02      	cmp	r7, #2
 80041ac:	d10e      	bne.n	80041cc <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	055a      	lsls	r2, r3, #21
 80041b2:	d503      	bpl.n	80041bc <HAL_RCC_OscConfig+0x204>
 80041b4:	68eb      	ldr	r3, [r5, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f43f af02 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041bc:	6863      	ldr	r3, [r4, #4]
 80041be:	692a      	ldr	r2, [r5, #16]
 80041c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80041c8:	6063      	str	r3, [r4, #4]
 80041ca:	e77e      	b.n	80040ca <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041cc:	68eb      	ldr	r3, [r5, #12]
 80041ce:	b17b      	cbz	r3, 80041f0 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041d8:	f7fc ff22 	bl	8001020 <HAL_GetTick>
 80041dc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	055b      	lsls	r3, r3, #21
 80041e2:	d4eb      	bmi.n	80041bc <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e4:	f7fc ff1c 	bl	8001020 <HAL_GetTick>
 80041e8:	1bc0      	subs	r0, r0, r7
 80041ea:	2802      	cmp	r0, #2
 80041ec:	d9f7      	bls.n	80041de <HAL_RCC_OscConfig+0x226>
 80041ee:	e784      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041f8:	f7fc ff12 	bl	8001020 <HAL_GetTick>
 80041fc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	0558      	lsls	r0, r3, #21
 8004202:	f57f af62 	bpl.w	80040ca <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004206:	f7fc ff0b 	bl	8001020 <HAL_GetTick>
 800420a:	1bc0      	subs	r0, r0, r7
 800420c:	2802      	cmp	r0, #2
 800420e:	d9f6      	bls.n	80041fe <HAL_RCC_OscConfig+0x246>
 8004210:	e773      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004212:	696b      	ldr	r3, [r5, #20]
 8004214:	b19b      	cbz	r3, 800423e <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8004216:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004222:	f7fc fefd 	bl	8001020 <HAL_GetTick>
 8004226:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004228:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800422c:	079b      	lsls	r3, r3, #30
 800422e:	f53f af50 	bmi.w	80040d2 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004232:	f7fc fef5 	bl	8001020 <HAL_GetTick>
 8004236:	1bc0      	subs	r0, r0, r7
 8004238:	2802      	cmp	r0, #2
 800423a:	d9f5      	bls.n	8004228 <HAL_RCC_OscConfig+0x270>
 800423c:	e75d      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 800423e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800424a:	f7fc fee9 	bl	8001020 <HAL_GetTick>
 800424e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004250:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004254:	0798      	lsls	r0, r3, #30
 8004256:	f57f af3c 	bpl.w	80040d2 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425a:	f7fc fee1 	bl	8001020 <HAL_GetTick>
 800425e:	1bc0      	subs	r0, r0, r7
 8004260:	2802      	cmp	r0, #2
 8004262:	d9f5      	bls.n	8004250 <HAL_RCC_OscConfig+0x298>
 8004264:	e749      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	08031503 	.word	0x08031503
 8004270:	20000ec4 	.word	0x20000ec4
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004274:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004276:	00d9      	lsls	r1, r3, #3
 8004278:	d429      	bmi.n	80042ce <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	65a3      	str	r3, [r4, #88]	; 0x58
 8004282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800428c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004290:	4f71      	ldr	r7, [pc, #452]	; (8004458 <HAL_RCC_OscConfig+0x4a0>)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	05da      	lsls	r2, r3, #23
 8004296:	d51d      	bpl.n	80042d4 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004298:	68ab      	ldr	r3, [r5, #8]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d12b      	bne.n	80042f6 <HAL_RCC_OscConfig+0x33e>
 800429e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80042aa:	f7fc feb9 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80042b2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042b8:	0798      	lsls	r0, r3, #30
 80042ba:	d542      	bpl.n	8004342 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80042bc:	f1b8 0f00 	cmp.w	r8, #0
 80042c0:	f43f af0b 	beq.w	80040da <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80042cc:	e705      	b.n	80040da <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 80042ce:	f04f 0800 	mov.w	r8, #0
 80042d2:	e7dd      	b.n	8004290 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042da:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80042dc:	f7fc fea0 	bl	8001020 <HAL_GetTick>
 80042e0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	05db      	lsls	r3, r3, #23
 80042e6:	d4d7      	bmi.n	8004298 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fc fe9a 	bl	8001020 <HAL_GetTick>
 80042ec:	eba0 0009 	sub.w	r0, r0, r9
 80042f0:	2802      	cmp	r0, #2
 80042f2:	d9f6      	bls.n	80042e2 <HAL_RCC_OscConfig+0x32a>
 80042f4:	e701      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f6:	2b05      	cmp	r3, #5
 80042f8:	d106      	bne.n	8004308 <HAL_RCC_OscConfig+0x350>
 80042fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042fe:	f043 0304 	orr.w	r3, r3, #4
 8004302:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004306:	e7ca      	b.n	800429e <HAL_RCC_OscConfig+0x2e6>
 8004308:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004314:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004318:	f022 0204 	bic.w	r2, r2, #4
 800431c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1c2      	bne.n	80042aa <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8004324:	f7fc fe7c 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800432c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800432e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004332:	0799      	lsls	r1, r3, #30
 8004334:	d5c2      	bpl.n	80042bc <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fc fe73 	bl	8001020 <HAL_GetTick>
 800433a:	1bc0      	subs	r0, r0, r7
 800433c:	4548      	cmp	r0, r9
 800433e:	d9f6      	bls.n	800432e <HAL_RCC_OscConfig+0x376>
 8004340:	e6db      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fc fe6d 	bl	8001020 <HAL_GetTick>
 8004346:	1bc0      	subs	r0, r0, r7
 8004348:	4548      	cmp	r0, r9
 800434a:	d9b3      	bls.n	80042b4 <HAL_RCC_OscConfig+0x2fc>
 800434c:	e6d5      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800434e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004350:	b19b      	cbz	r3, 800437a <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8004352:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800435e:	f7fc fe5f 	bl	8001020 <HAL_GetTick>
 8004362:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004364:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004368:	079b      	lsls	r3, r3, #30
 800436a:	f53f aeba 	bmi.w	80040e2 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800436e:	f7fc fe57 	bl	8001020 <HAL_GetTick>
 8004372:	1bc0      	subs	r0, r0, r7
 8004374:	2802      	cmp	r0, #2
 8004376:	d9f5      	bls.n	8004364 <HAL_RCC_OscConfig+0x3ac>
 8004378:	e6bf      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 800437a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004386:	f7fc fe4b 	bl	8001020 <HAL_GetTick>
 800438a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800438c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004390:	0798      	lsls	r0, r3, #30
 8004392:	f57f aea6 	bpl.w	80040e2 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004396:	f7fc fe43 	bl	8001020 <HAL_GetTick>
 800439a:	1bc0      	subs	r0, r0, r7
 800439c:	2802      	cmp	r0, #2
 800439e:	d9f5      	bls.n	800438c <HAL_RCC_OscConfig+0x3d4>
 80043a0:	e6ab      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043a2:	2e0c      	cmp	r6, #12
 80043a4:	f43f ae0c 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043a8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043b2:	d136      	bne.n	8004422 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 80043b4:	f7fc fe34 	bl	8001020 <HAL_GetTick>
 80043b8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	0199      	lsls	r1, r3, #6
 80043be:	d42a      	bmi.n	8004416 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80043c2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80043c4:	06db      	lsls	r3, r3, #27
 80043c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80043ca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80043cc:	4313      	orrs	r3, r2
 80043ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80043d0:	3a01      	subs	r2, #1
 80043d2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80043d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80043d8:	0852      	lsrs	r2, r2, #1
 80043da:	3a01      	subs	r2, #1
 80043dc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80043e0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80043e2:	0852      	lsrs	r2, r2, #1
 80043e4:	3a01      	subs	r2, #1
 80043e6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80043ea:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f2:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043f4:	68e3      	ldr	r3, [r4, #12]
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80043fc:	f7fc fe10 	bl	8001020 <HAL_GetTick>
 8004400:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	019a      	lsls	r2, r3, #6
 8004406:	f53f ae70 	bmi.w	80040ea <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440a:	f7fc fe09 	bl	8001020 <HAL_GetTick>
 800440e:	1b40      	subs	r0, r0, r5
 8004410:	2802      	cmp	r0, #2
 8004412:	d9f6      	bls.n	8004402 <HAL_RCC_OscConfig+0x44a>
 8004414:	e671      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004416:	f7fc fe03 	bl	8001020 <HAL_GetTick>
 800441a:	1b80      	subs	r0, r0, r6
 800441c:	2802      	cmp	r0, #2
 800441e:	d9cc      	bls.n	80043ba <HAL_RCC_OscConfig+0x402>
 8004420:	e66b      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004428:	bf02      	ittt	eq
 800442a:	68e3      	ldreq	r3, [r4, #12]
 800442c:	f023 0303 	biceq.w	r3, r3, #3
 8004430:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800443e:	f7fc fdef 	bl	8001020 <HAL_GetTick>
 8004442:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	019b      	lsls	r3, r3, #6
 8004448:	f57f ae4f 	bpl.w	80040ea <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fc fde8 	bl	8001020 <HAL_GetTick>
 8004450:	1b40      	subs	r0, r0, r5
 8004452:	2802      	cmp	r0, #2
 8004454:	d9f6      	bls.n	8004444 <HAL_RCC_OscConfig+0x48c>
 8004456:	e650      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
 8004458:	40007000 	.word	0x40007000

0800445c <HAL_RCC_ClockConfig>:
{
 800445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004460:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8004462:	4605      	mov	r5, r0
 8004464:	b910      	cbnz	r0, 800446c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004466:	2001      	movs	r0, #1
 8004468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4a71      	ldr	r2, [pc, #452]	; (8004634 <HAL_RCC_ClockConfig+0x1d8>)
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	428b      	cmp	r3, r1
 8004476:	d334      	bcc.n	80044e2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004478:	6829      	ldr	r1, [r5, #0]
 800447a:	f011 0701 	ands.w	r7, r1, #1
 800447e:	d13b      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	682a      	ldr	r2, [r5, #0]
 8004482:	0791      	lsls	r1, r2, #30
 8004484:	f140 80bb 	bpl.w	80045fe <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	496b      	ldr	r1, [pc, #428]	; (8004638 <HAL_RCC_ClockConfig+0x1dc>)
 800448a:	68a8      	ldr	r0, [r5, #8]
 800448c:	688b      	ldr	r3, [r1, #8]
 800448e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004492:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004494:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004496:	4967      	ldr	r1, [pc, #412]	; (8004634 <HAL_RCC_ClockConfig+0x1d8>)
 8004498:	680b      	ldr	r3, [r1, #0]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	429e      	cmp	r6, r3
 80044a0:	f0c0 80b5 	bcc.w	800460e <HAL_RCC_ClockConfig+0x1b2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	f012 0f04 	tst.w	r2, #4
 80044a8:	4c63      	ldr	r4, [pc, #396]	; (8004638 <HAL_RCC_ClockConfig+0x1dc>)
 80044aa:	f040 80bc 	bne.w	8004626 <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	0713      	lsls	r3, r2, #28
 80044b0:	d506      	bpl.n	80044c0 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	68a3      	ldr	r3, [r4, #8]
 80044b4:	692a      	ldr	r2, [r5, #16]
 80044b6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80044ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80044be:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044c0:	f7ff fd2c 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	4a5d      	ldr	r2, [pc, #372]	; (800463c <HAL_RCC_ClockConfig+0x1e0>)
 80044c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044cc:	5cd3      	ldrb	r3, [r2, r3]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	40d8      	lsrs	r0, r3
 80044d4:	4b5a      	ldr	r3, [pc, #360]	; (8004640 <HAL_RCC_ClockConfig+0x1e4>)
 80044d6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80044d8:	2000      	movs	r0, #0
}
 80044da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80044de:	f7fc bd6f 	b.w	8000fc0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	f023 030f 	bic.w	r3, r3, #15
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ec:	6813      	ldr	r3, [r2, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d1b7      	bne.n	8004466 <HAL_RCC_ClockConfig+0xa>
 80044f6:	e7bf      	b.n	8004478 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f8:	686b      	ldr	r3, [r5, #4]
 80044fa:	4c4f      	ldr	r4, [pc, #316]	; (8004638 <HAL_RCC_ClockConfig+0x1dc>)
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d168      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x176>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	019b      	lsls	r3, r3, #6
 8004504:	d5af      	bpl.n	8004466 <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004506:	68e3      	ldr	r3, [r4, #12]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d11e      	bne.n	800454e <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004510:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004512:	4a4c      	ldr	r2, [pc, #304]	; (8004644 <HAL_RCC_ClockConfig+0x1e8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004514:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004516:	bf55      	itete	pl
 8004518:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800451c:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800451e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004522:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 8004526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800452a:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800452c:	68e3      	ldr	r3, [r4, #12]
 800452e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004532:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004534:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 8004538:	2b02      	cmp	r3, #2
 800453a:	d00a      	beq.n	8004552 <HAL_RCC_ClockConfig+0xf6>
 800453c:	2b03      	cmp	r3, #3
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0xf6>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004540:	fbb2 f3f0 	udiv	r3, r2, r0
 8004544:	68e7      	ldr	r7, [r4, #12]
 8004546:	f3c7 2706 	ubfx	r7, r7, #8, #7
 800454a:	437b      	muls	r3, r7
 800454c:	e008      	b.n	8004560 <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 800454e:	2200      	movs	r2, #0
 8004550:	e7eb      	b.n	800452a <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004552:	68e2      	ldr	r2, [r4, #12]
 8004554:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <HAL_RCC_ClockConfig+0x1ec>)
 8004556:	fbb3 f3f0 	udiv	r3, r3, r0
 800455a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800455e:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004560:	68e2      	ldr	r2, [r4, #12]
 8004562:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8004566:	3201      	adds	r2, #1
 8004568:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 800456a:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800456e:	4a37      	ldr	r2, [pc, #220]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d81c      	bhi.n	80045ae <HAL_RCC_ClockConfig+0x152>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004574:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	686a      	ldr	r2, [r5, #4]
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	4313      	orrs	r3, r2
 8004580:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004582:	f7fc fd4d 	bl	8001020 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004586:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800458a:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458c:	68a3      	ldr	r3, [r4, #8]
 800458e:	686a      	ldr	r2, [r5, #4]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004598:	f43f af72 	beq.w	8004480 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7fc fd40 	bl	8001020 <HAL_GetTick>
 80045a0:	eba0 0008 	sub.w	r0, r0, r8
 80045a4:	4548      	cmp	r0, r9
 80045a6:	d9f1      	bls.n	800458c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80045a8:	2003      	movs	r0, #3
}
 80045aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80045ae:	68a3      	ldr	r3, [r4, #8]
 80045b0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80045b4:	d107      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x16a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c0:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045c2:	2780      	movs	r7, #128	; 0x80
 80045c4:	e7d7      	b.n	8004576 <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80045c6:	0788      	lsls	r0, r1, #30
 80045c8:	d5d4      	bpl.n	8004574 <HAL_RCC_ClockConfig+0x118>
 80045ca:	68ab      	ldr	r3, [r5, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1d1      	bne.n	8004574 <HAL_RCC_ClockConfig+0x118>
 80045d0:	e7f1      	b.n	80045b6 <HAL_RCC_ClockConfig+0x15a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d10a      	bne.n	80045ec <HAL_RCC_ClockConfig+0x190>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045dc:	f43f af43 	beq.w	8004466 <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80045e0:	f7ff fc9c 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	4298      	cmp	r0, r3
 80045e8:	d9c4      	bls.n	8004574 <HAL_RCC_ClockConfig+0x118>
 80045ea:	e7e4      	b.n	80045b6 <HAL_RCC_ClockConfig+0x15a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ec:	b91b      	cbnz	r3, 80045f6 <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	f013 0f02 	tst.w	r3, #2
 80045f4:	e7f2      	b.n	80045dc <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80045fc:	e7ee      	b.n	80045dc <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 80045fe:	2f80      	cmp	r7, #128	; 0x80
 8004600:	f47f af49 	bne.w	8004496 <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004604:	490c      	ldr	r1, [pc, #48]	; (8004638 <HAL_RCC_ClockConfig+0x1dc>)
 8004606:	688b      	ldr	r3, [r1, #8]
 8004608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460c:	e742      	b.n	8004494 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460e:	680b      	ldr	r3, [r1, #0]
 8004610:	f023 030f 	bic.w	r3, r3, #15
 8004614:	4333      	orrs	r3, r6
 8004616:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004618:	680b      	ldr	r3, [r1, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	429e      	cmp	r6, r3
 8004620:	f47f af21 	bne.w	8004466 <HAL_RCC_ClockConfig+0xa>
 8004624:	e73e      	b.n	80044a4 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004626:	68a3      	ldr	r3, [r4, #8]
 8004628:	68e9      	ldr	r1, [r5, #12]
 800462a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800462e:	430b      	orrs	r3, r1
 8004630:	60a3      	str	r3, [r4, #8]
 8004632:	e73c      	b.n	80044ae <HAL_RCC_ClockConfig+0x52>
 8004634:	40022000 	.word	0x40022000
 8004638:	40021000 	.word	0x40021000
 800463c:	08031503 	.word	0x08031503
 8004640:	20000ec4 	.word	0x20000ec4
 8004644:	0803151c 	.word	0x0803151c
 8004648:	00f42400 	.word	0x00f42400
 800464c:	04c4b400 	.word	0x04c4b400

08004650 <HAL_RCC_GetHCLKFreq>:
}
 8004650:	4b01      	ldr	r3, [pc, #4]	; (8004658 <HAL_RCC_GetHCLKFreq+0x8>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000ec4 	.word	0x20000ec4

0800465c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x18>)
 800465e:	4a06      	ldr	r2, [pc, #24]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	4a04      	ldr	r2, [pc, #16]	; (800467c <HAL_RCC_GetPCLK1Freq+0x20>)
 800466a:	6810      	ldr	r0, [r2, #0]
 800466c:	f003 031f 	and.w	r3, r3, #31
}
 8004670:	40d8      	lsrs	r0, r3
 8004672:	4770      	bx	lr
 8004674:	40021000 	.word	0x40021000
 8004678:	08031513 	.word	0x08031513
 800467c:	20000ec4 	.word	0x20000ec4

08004680 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004682:	4a06      	ldr	r2, [pc, #24]	; (800469c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800468a:	5cd3      	ldrb	r3, [r2, r3]
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800468e:	6810      	ldr	r0, [r2, #0]
 8004690:	f003 031f 	and.w	r3, r3, #31
}
 8004694:	40d8      	lsrs	r0, r3
 8004696:	4770      	bx	lr
 8004698:	40021000 	.word	0x40021000
 800469c:	08031513 	.word	0x08031513
 80046a0:	20000ec4 	.word	0x20000ec4

080046a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046a6:	4b3f      	ldr	r3, [pc, #252]	; (80047a4 <RCCEx_PLLSAI1_Config+0x100>)
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	f012 0f03 	tst.w	r2, #3
{
 80046ae:	4605      	mov	r5, r0
 80046b0:	460e      	mov	r6, r1
 80046b2:	461c      	mov	r4, r3
 80046b4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046b6:	d022      	beq.n	80046fe <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	4283      	cmp	r3, r0
 80046c0:	d130      	bne.n	8004724 <RCCEx_PLLSAI1_Config+0x80>
       ||
 80046c2:	b37b      	cbz	r3, 8004724 <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046ca:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fc fca8 	bl	8001020 <HAL_GetTick>
 80046d0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	011a      	lsls	r2, r3, #4
 80046d6:	d42e      	bmi.n	8004736 <RCCEx_PLLSAI1_Config+0x92>
 80046d8:	68af      	ldr	r7, [r5, #8]
 80046da:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046dc:	b396      	cbz	r6, 8004744 <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046de:	2e01      	cmp	r6, #1
 80046e0:	d14c      	bne.n	800477c <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e2:	6922      	ldr	r2, [r4, #16]
 80046e4:	4930      	ldr	r1, [pc, #192]	; (80047a8 <RCCEx_PLLSAI1_Config+0x104>)
 80046e6:	4011      	ands	r1, r2
 80046e8:	692a      	ldr	r2, [r5, #16]
 80046ea:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80046ee:	3b01      	subs	r3, #1
 80046f0:	0852      	lsrs	r2, r2, #1
 80046f2:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 80046f6:	3a01      	subs	r2, #1
 80046f8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80046fc:	e02d      	b.n	800475a <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 80046fe:	2802      	cmp	r0, #2
 8004700:	d00c      	beq.n	800471c <RCCEx_PLLSAI1_Config+0x78>
 8004702:	2803      	cmp	r0, #3
 8004704:	d010      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0x84>
 8004706:	2801      	cmp	r0, #1
 8004708:	d10c      	bne.n	8004724 <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	079f      	lsls	r7, r3, #30
 800470e:	d534      	bpl.n	800477a <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004710:	68e3      	ldr	r3, [r4, #12]
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	4318      	orrs	r0, r3
 8004718:	60e0      	str	r0, [r4, #12]
 800471a:	e7d3      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004722:	d1f5      	bne.n	8004710 <RCCEx_PLLSAI1_Config+0x6c>
 8004724:	2001      	movs	r0, #1
 8004726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	0391      	lsls	r1, r2, #14
 800472c:	d4f0      	bmi.n	8004710 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004734:	e7f5      	b.n	8004722 <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004736:	f7fc fc73 	bl	8001020 <HAL_GetTick>
 800473a:	1bc0      	subs	r0, r0, r7
 800473c:	2802      	cmp	r0, #2
 800473e:	d9c8      	bls.n	80046d2 <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 8004740:	2003      	movs	r0, #3
 8004742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004744:	68e8      	ldr	r0, [r5, #12]
 8004746:	6926      	ldr	r6, [r4, #16]
 8004748:	4918      	ldr	r1, [pc, #96]	; (80047ac <RCCEx_PLLSAI1_Config+0x108>)
 800474a:	06c2      	lsls	r2, r0, #27
 800474c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004750:	4031      	ands	r1, r6
 8004752:	430a      	orrs	r2, r1
 8004754:	3b01      	subs	r3, #1
 8004756:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800475a:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004762:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fc fc5c 	bl	8001020 <HAL_GetTick>
 8004768:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	d513      	bpl.n	8004798 <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	69aa      	ldr	r2, [r5, #24]
 8004774:	4313      	orrs	r3, r2
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800477c:	6921      	ldr	r1, [r4, #16]
 800477e:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <RCCEx_PLLSAI1_Config+0x10c>)
 8004780:	400a      	ands	r2, r1
 8004782:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004786:	3b01      	subs	r3, #1
 8004788:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800478c:	696a      	ldr	r2, [r5, #20]
 800478e:	0852      	lsrs	r2, r2, #1
 8004790:	3a01      	subs	r2, #1
 8004792:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004796:	e7e0      	b.n	800475a <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004798:	f7fc fc42 	bl	8001020 <HAL_GetTick>
 800479c:	1b80      	subs	r0, r0, r6
 800479e:	2802      	cmp	r0, #2
 80047a0:	d9e3      	bls.n	800476a <RCCEx_PLLSAI1_Config+0xc6>
 80047a2:	e7cd      	b.n	8004740 <RCCEx_PLLSAI1_Config+0x9c>
 80047a4:	40021000 	.word	0x40021000
 80047a8:	ff9f800f 	.word	0xff9f800f
 80047ac:	07ff800f 	.word	0x07ff800f
 80047b0:	f9ff800f 	.word	0xf9ff800f

080047b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047b6:	4b3f      	ldr	r3, [pc, #252]	; (80048b4 <RCCEx_PLLSAI2_Config+0x100>)
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	f012 0f03 	tst.w	r2, #3
{
 80047be:	4605      	mov	r5, r0
 80047c0:	460e      	mov	r6, r1
 80047c2:	461c      	mov	r4, r3
 80047c4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047c6:	d022      	beq.n	800480e <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	4283      	cmp	r3, r0
 80047d0:	d130      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x80>
       ||
 80047d2:	b37b      	cbz	r3, 8004834 <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047dc:	f7fc fc20 	bl	8001020 <HAL_GetTick>
 80047e0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	009a      	lsls	r2, r3, #2
 80047e6:	d42e      	bmi.n	8004846 <RCCEx_PLLSAI2_Config+0x92>
 80047e8:	68af      	ldr	r7, [r5, #8]
 80047ea:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ec:	b396      	cbz	r6, 8004854 <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80047ee:	2e01      	cmp	r6, #1
 80047f0:	d14c      	bne.n	800488c <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047f2:	6962      	ldr	r2, [r4, #20]
 80047f4:	4930      	ldr	r1, [pc, #192]	; (80048b8 <RCCEx_PLLSAI2_Config+0x104>)
 80047f6:	4011      	ands	r1, r2
 80047f8:	692a      	ldr	r2, [r5, #16]
 80047fa:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80047fe:	3b01      	subs	r3, #1
 8004800:	0852      	lsrs	r2, r2, #1
 8004802:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 8004806:	3a01      	subs	r2, #1
 8004808:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800480c:	e02d      	b.n	800486a <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 800480e:	2802      	cmp	r0, #2
 8004810:	d00c      	beq.n	800482c <RCCEx_PLLSAI2_Config+0x78>
 8004812:	2803      	cmp	r0, #3
 8004814:	d010      	beq.n	8004838 <RCCEx_PLLSAI2_Config+0x84>
 8004816:	2801      	cmp	r0, #1
 8004818:	d10c      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	079f      	lsls	r7, r3, #30
 800481e:	d534      	bpl.n	800488a <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004820:	68e3      	ldr	r3, [r4, #12]
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	4318      	orrs	r0, r3
 8004828:	60e0      	str	r0, [r4, #12]
 800482a:	e7d3      	b.n	80047d4 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004832:	d1f5      	bne.n	8004820 <RCCEx_PLLSAI2_Config+0x6c>
 8004834:	2001      	movs	r0, #1
 8004836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	0391      	lsls	r1, r2, #14
 800483c:	d4f0      	bmi.n	8004820 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004844:	e7f5      	b.n	8004832 <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004846:	f7fc fbeb 	bl	8001020 <HAL_GetTick>
 800484a:	1bc0      	subs	r0, r0, r7
 800484c:	2802      	cmp	r0, #2
 800484e:	d9c8      	bls.n	80047e2 <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 8004850:	2003      	movs	r0, #3
 8004852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004854:	68e8      	ldr	r0, [r5, #12]
 8004856:	6966      	ldr	r6, [r4, #20]
 8004858:	4918      	ldr	r1, [pc, #96]	; (80048bc <RCCEx_PLLSAI2_Config+0x108>)
 800485a:	06c2      	lsls	r2, r0, #27
 800485c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004860:	4031      	ands	r1, r6
 8004862:	430a      	orrs	r2, r1
 8004864:	3b01      	subs	r3, #1
 8004866:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800486a:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004872:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fc fbd4 	bl	8001020 <HAL_GetTick>
 8004878:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	d513      	bpl.n	80048a8 <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004880:	6963      	ldr	r3, [r4, #20]
 8004882:	69aa      	ldr	r2, [r5, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	6163      	str	r3, [r4, #20]
 8004888:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800488c:	6961      	ldr	r1, [r4, #20]
 800488e:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <RCCEx_PLLSAI2_Config+0x10c>)
 8004890:	400a      	ands	r2, r1
 8004892:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004896:	3b01      	subs	r3, #1
 8004898:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800489c:	696a      	ldr	r2, [r5, #20]
 800489e:	0852      	lsrs	r2, r2, #1
 80048a0:	3a01      	subs	r2, #1
 80048a2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80048a6:	e7e0      	b.n	800486a <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048a8:	f7fc fbba 	bl	8001020 <HAL_GetTick>
 80048ac:	1b80      	subs	r0, r0, r6
 80048ae:	2802      	cmp	r0, #2
 80048b0:	d9e3      	bls.n	800487a <RCCEx_PLLSAI2_Config+0xc6>
 80048b2:	e7cd      	b.n	8004850 <RCCEx_PLLSAI2_Config+0x9c>
 80048b4:	40021000 	.word	0x40021000
 80048b8:	ff9f800f 	.word	0xff9f800f
 80048bc:	07ff800f 	.word	0x07ff800f
 80048c0:	f9ff800f 	.word	0xf9ff800f

080048c4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80048c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048c8:	6805      	ldr	r5, [r0, #0]
 80048ca:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80048ce:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048d0:	d023      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80048d2:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80048d4:	2940      	cmp	r1, #64	; 0x40
 80048d6:	d014      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80048d8:	d804      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80048da:	b1c1      	cbz	r1, 800490e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80048dc:	2920      	cmp	r1, #32
 80048de:	d02b      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 80048e0:	2501      	movs	r5, #1
 80048e2:	e01a      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80048e4:	2960      	cmp	r1, #96	; 0x60
 80048e6:	d001      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x28>
 80048e8:	2980      	cmp	r1, #128	; 0x80
 80048ea:	d1f9      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ec:	4a4e      	ldr	r2, [pc, #312]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ee:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80048f0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80048f4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80048f8:	430b      	orrs	r3, r1
 80048fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80048fe:	2500      	movs	r5, #0
 8004900:	e00b      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004902:	4a49      	ldr	r2, [pc, #292]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004904:	68d3      	ldr	r3, [r2, #12]
 8004906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490a:	60d3      	str	r3, [r2, #12]
      break;
 800490c:	e7ee      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800490e:	3004      	adds	r0, #4
 8004910:	f7ff fec8 	bl	80046a4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004914:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004916:	2800      	cmp	r0, #0
 8004918:	d0e8      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	04db      	lsls	r3, r3, #19
 800491e:	d509      	bpl.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004920:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004922:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004926:	d014      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8004928:	d80b      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800492a:	b1c1      	cbz	r1, 800495e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800492c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004930:	d071      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 8004932:	2501      	movs	r5, #1
 8004934:	462e      	mov	r6, r5
 8004936:	e021      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004938:	2100      	movs	r1, #0
 800493a:	3020      	adds	r0, #32
 800493c:	f7ff ff3a 	bl	80047b4 <RCCEx_PLLSAI2_Config>
 8004940:	e7e8      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004942:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004946:	d002      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004948:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800494c:	d1f1      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800494e:	462e      	mov	r6, r5
 8004950:	e009      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004952:	4a35      	ldr	r2, [pc, #212]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004954:	68d3      	ldr	r3, [r2, #12]
 8004956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495a:	60d3      	str	r3, [r2, #12]
 800495c:	e7f7      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800495e:	1d20      	adds	r0, r4, #4
 8004960:	f7ff fea0 	bl	80046a4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004964:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004966:	2e00      	cmp	r6, #0
 8004968:	d15b      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800496a:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800496c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800496e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004972:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004976:	430b      	orrs	r3, r1
 8004978:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	039f      	lsls	r7, r3, #14
 8004980:	d565      	bpl.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004982:	4f29      	ldr	r7, [pc, #164]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004986:	00d8      	lsls	r0, r3, #3
 8004988:	f140 81f3 	bpl.w	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 800498c:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004990:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004a2c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004994:	f8d9 3000 	ldr.w	r3, [r9]
 8004998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499c:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80049a0:	f7fc fb3e 	bl	8001020 <HAL_GetTick>
 80049a4:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049a6:	f8d9 3000 	ldr.w	r3, [r9]
 80049aa:	05d9      	lsls	r1, r3, #23
 80049ac:	d540      	bpl.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	f040 8197 	bne.w	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80049bc:	d015      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x126>
 80049be:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d011      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80049ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80049e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049ea:	07da      	lsls	r2, r3, #31
 80049ec:	d509      	bpl.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 80049ee:	f7fc fb17 	bl	8001020 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80049f6:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049fc:	079b      	lsls	r3, r3, #30
 80049fe:	f140 8168 	bpl.w	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a06:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a14:	e014      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a16:	2100      	movs	r1, #0
 8004a18:	f104 0020 	add.w	r0, r4, #32
 8004a1c:	f7ff feca 	bl	80047b4 <RCCEx_PLLSAI2_Config>
 8004a20:	e7a0      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004a22:	4635      	mov	r5, r6
 8004a24:	e7aa      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fc faf6 	bl	8001020 <HAL_GetTick>
 8004a34:	eba0 000a 	sub.w	r0, r0, sl
 8004a38:	2802      	cmp	r0, #2
 8004a3a:	d9b4      	bls.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8004a3c:	2503      	movs	r5, #3
 8004a3e:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 8004a40:	f1b8 0f00 	cmp.w	r8, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	07df      	lsls	r7, r3, #31
 8004a52:	d508      	bpl.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a54:	49c0      	ldr	r1, [pc, #768]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a5c:	f022 0203 	bic.w	r2, r2, #3
 8004a60:	4302      	orrs	r2, r0
 8004a62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a66:	0798      	lsls	r0, r3, #30
 8004a68:	d508      	bpl.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a6a:	49bb      	ldr	r1, [pc, #748]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a6c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a72:	f022 020c 	bic.w	r2, r2, #12
 8004a76:	4302      	orrs	r2, r0
 8004a78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a7c:	0759      	lsls	r1, r3, #29
 8004a7e:	d508      	bpl.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a80:	49b5      	ldr	r1, [pc, #724]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a82:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004a84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a88:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004a8c:	4302      	orrs	r2, r0
 8004a8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a92:	071a      	lsls	r2, r3, #28
 8004a94:	d508      	bpl.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a96:	49b0      	ldr	r1, [pc, #704]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004a9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004aa2:	4302      	orrs	r2, r0
 8004aa4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aa8:	06df      	lsls	r7, r3, #27
 8004aaa:	d508      	bpl.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aac:	49aa      	ldr	r1, [pc, #680]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004aae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004ab0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ab4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ab8:	4302      	orrs	r2, r0
 8004aba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004abe:	0698      	lsls	r0, r3, #26
 8004ac0:	d508      	bpl.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ac2:	49a5      	ldr	r1, [pc, #660]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ac4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004ac6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004aca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ace:	4302      	orrs	r2, r0
 8004ad0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ad4:	0599      	lsls	r1, r3, #22
 8004ad6:	d508      	bpl.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ad8:	499f      	ldr	r1, [pc, #636]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ada:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004adc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ae0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004ae4:	4302      	orrs	r2, r0
 8004ae6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004aea:	055a      	lsls	r2, r3, #21
 8004aec:	d508      	bpl.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aee:	499a      	ldr	r1, [pc, #616]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004af0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004af2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004af6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004afa:	4302      	orrs	r2, r0
 8004afc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b00:	065f      	lsls	r7, r3, #25
 8004b02:	d508      	bpl.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b04:	4994      	ldr	r1, [pc, #592]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b08:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b0c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b10:	4302      	orrs	r2, r0
 8004b12:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b16:	0618      	lsls	r0, r3, #24
 8004b18:	d508      	bpl.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b1a:	498f      	ldr	r1, [pc, #572]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004b26:	4302      	orrs	r2, r0
 8004b28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b2c:	05d9      	lsls	r1, r3, #23
 8004b2e:	d508      	bpl.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b30:	4989      	ldr	r1, [pc, #548]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b32:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004b34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004b3c:	4302      	orrs	r2, r0
 8004b3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b42:	02da      	lsls	r2, r3, #11
 8004b44:	d508      	bpl.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b46:	4984      	ldr	r1, [pc, #528]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b48:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004b4a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004b4e:	f022 0203 	bic.w	r2, r2, #3
 8004b52:	4302      	orrs	r2, r0
 8004b54:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b58:	049f      	lsls	r7, r3, #18
 8004b5a:	d510      	bpl.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b5c:	4a7e      	ldr	r2, [pc, #504]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b5e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004b60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b64:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004b68:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b6a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b72:	f040 80b8 	bne.w	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b76:	68d3      	ldr	r3, [r2, #12]
 8004b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b7c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	0318      	lsls	r0, r3, #12
 8004b82:	d50f      	bpl.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b84:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004b86:	4b74      	ldr	r3, [pc, #464]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b88:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004b8c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004b90:	f040 80b6 	bne.w	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba2:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	0359      	lsls	r1, r3, #13
 8004ba8:	d510      	bpl.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004baa:	4a6b      	ldr	r2, [pc, #428]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004bac:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004bae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bb2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004bb6:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bb8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bc0:	f040 80bd 	bne.w	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc4:	68d3      	ldr	r3, [r2, #12]
 8004bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bca:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	045a      	lsls	r2, r3, #17
 8004bd0:	d514      	bpl.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bd2:	4961      	ldr	r1, [pc, #388]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004bd4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004bd8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004bdc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004be0:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004be2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bea:	d107      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bec:	2102      	movs	r1, #2
 8004bee:	1d20      	adds	r0, r4, #4
 8004bf0:	f7ff fd58 	bl	80046a4 <RCCEx_PLLSAI1_Config>
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	bf18      	it	ne
 8004bfa:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bfc:	6822      	ldr	r2, [r4, #0]
 8004bfe:	03d3      	lsls	r3, r2, #15
 8004c00:	d509      	bpl.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c02:	4955      	ldr	r1, [pc, #340]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c04:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004c08:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004c0c:	f023 0304 	bic.w	r3, r3, #4
 8004c10:	4303      	orrs	r3, r0
 8004c12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c16:	0297      	lsls	r7, r2, #10
 8004c18:	d509      	bpl.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c1a:	494f      	ldr	r1, [pc, #316]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c1c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004c20:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004c24:	f023 0318 	bic.w	r3, r3, #24
 8004c28:	4303      	orrs	r3, r0
 8004c2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c2e:	0250      	lsls	r0, r2, #9
 8004c30:	d51f      	bpl.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c32:	4f49      	ldr	r7, [pc, #292]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004c3c:	f7fc f9f0 	bl	8001020 <HAL_GetTick>
 8004c40:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	0099      	lsls	r1, r3, #2
 8004c46:	f100 8089 	bmi.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	f040 808f 	bne.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c54:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004c58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c62:	2102      	movs	r1, #2
 8004c64:	f104 0020 	add.w	r0, r4, #32
 8004c68:	f7ff fda4 	bl	80047b4 <RCCEx_PLLSAI2_Config>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	bf18      	it	ne
 8004c70:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	021a      	lsls	r2, r3, #8
 8004c76:	d514      	bpl.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004c78:	4937      	ldr	r1, [pc, #220]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c7a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004c7e:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c86:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004c88:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004c8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004c92:	2101      	movs	r1, #1
 8004c94:	f104 0020 	add.w	r0, r4, #32
 8004c98:	f7ff fd8c 	bl	80047b4 <RCCEx_PLLSAI2_Config>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	bf18      	it	ne
 8004ca0:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	01db      	lsls	r3, r3, #7
 8004ca6:	d510      	bpl.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ca8:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004caa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004cae:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004cb2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004cb6:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004cb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cbc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004cc0:	d103      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc2:	68d3      	ldr	r3, [r2, #12]
 8004cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc8:	60d3      	str	r3, [r2, #12]
}
 8004cca:	4628      	mov	r0, r5
 8004ccc:	b002      	add	sp, #8
 8004cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7fc f9a5 	bl	8001020 <HAL_GetTick>
 8004cd6:	eba0 0009 	sub.w	r0, r0, r9
 8004cda:	4550      	cmp	r0, sl
 8004cdc:	f67f ae8c 	bls.w	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004ce0:	e6ac      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004ce2:	4635      	mov	r5, r6
 8004ce4:	e6ac      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ce6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004cea:	f47f af48 	bne.w	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cee:	2101      	movs	r1, #1
 8004cf0:	1d20      	adds	r0, r4, #4
 8004cf2:	f7ff fcd7 	bl	80046a4 <RCCEx_PLLSAI1_Config>
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	bf18      	it	ne
 8004cfc:	4605      	movne	r5, r0
 8004cfe:	e73e      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004d08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d0c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004d10:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d12:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d1a:	d103      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d22:	e73e      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d24:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004d28:	f47f af3c 	bne.w	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	1d20      	adds	r0, r4, #4
 8004d30:	f7ff fcb8 	bl	80046a4 <RCCEx_PLLSAI1_Config>
 8004d34:	4606      	mov	r6, r0
 8004d36:	2800      	cmp	r0, #0
 8004d38:	bf18      	it	ne
 8004d3a:	4605      	movne	r5, r0
 8004d3c:	e732      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d3e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004d42:	f47f af43 	bne.w	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d46:	2101      	movs	r1, #1
 8004d48:	1d20      	adds	r0, r4, #4
 8004d4a:	f7ff fcab 	bl	80046a4 <RCCEx_PLLSAI1_Config>
 8004d4e:	4606      	mov	r6, r0
 8004d50:	2800      	cmp	r0, #0
 8004d52:	bf18      	it	ne
 8004d54:	4605      	movne	r5, r0
 8004d56:	e739      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004d58:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d5c:	f7fc f960 	bl	8001020 <HAL_GetTick>
 8004d60:	eba0 0008 	sub.w	r0, r0, r8
 8004d64:	2802      	cmp	r0, #2
 8004d66:	f67f af6c 	bls.w	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 8004d6a:	2503      	movs	r5, #3
 8004d6c:	e781      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004d6e:	4635      	mov	r5, r6
 8004d70:	e77f      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d78:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d84:	f04f 0801 	mov.w	r8, #1
 8004d88:	e602      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004d8a:	bf00      	nop

08004d8c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	b087      	sub	sp, #28
 8004d92:	4606      	mov	r6, r0
 8004d94:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004d96:	f7fc f943 	bl	8001020 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004d9a:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004d9c:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004d9e:	6830      	ldr	r0, [r6, #0]
 8004da0:	f002 fa76 	bl	8007290 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004da4:	4604      	mov	r4, r0
 8004da6:	bb40      	cbnz	r0, 8004dfa <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004da8:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004daa:	6830      	ldr	r0, [r6, #0]
 8004dac:	0409      	lsls	r1, r1, #16
 8004dae:	f002 fb89 	bl	80074c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004db2:	4604      	mov	r4, r0
 8004db4:	bb08      	cbnz	r0, 8004dfa <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004db6:	2230      	movs	r2, #48	; 0x30
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	2108      	movs	r1, #8
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004dc4:	2301      	movs	r3, #1
  SDMMC_ConfigData(hsd->Instance, &config);
 8004dc6:	4669      	mov	r1, sp
 8004dc8:	6830      	ldr	r0, [r6, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004dca:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004dcc:	9305      	str	r3, [sp, #20]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004dce:	f002 fa4d 	bl	800726c <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004dd2:	6830      	ldr	r0, [r6, #0]
 8004dd4:	f002 fba5 	bl	8007522 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004dd8:	4604      	mov	r4, r0
 8004dda:	b970      	cbnz	r0, 8004dfa <SD_FindSCR+0x6e>
 8004ddc:	4605      	mov	r5, r0
 8004dde:	4607      	mov	r7, r0
 8004de0:	4683      	mov	fp, r0
  {
    return errorstate;
  }
  
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004de2:	f240 592a 	movw	r9, #1322	; 0x52a
 8004de6:	6830      	ldr	r0, [r6, #0]
 8004de8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dea:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004dee:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004df0:	d007      	beq.n	8004e02 <SD_FindSCR+0x76>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004df2:	0719      	lsls	r1, r3, #28
 8004df4:	d51c      	bpl.n	8004e30 <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004df6:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004df8:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	b007      	add	sp, #28
 8004dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004e02:	031b      	lsls	r3, r3, #12
 8004e04:	d40b      	bmi.n	8004e1e <SD_FindSCR+0x92>
 8004e06:	f1bb 0f00 	cmp.w	fp, #0
 8004e0a:	d108      	bne.n	8004e1e <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004e0c:	f002 f96a 	bl	80070e4 <SDMMC_ReadFIFO>
 8004e10:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004e12:	6830      	ldr	r0, [r6, #0]
 8004e14:	f002 f966 	bl	80070e4 <SDMMC_ReadFIFO>
      index++;
 8004e18:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004e1c:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004e1e:	f7fc f8ff 	bl	8001020 <HAL_GetTick>
 8004e22:	eba0 000a 	sub.w	r0, r0, sl
 8004e26:	3001      	adds	r0, #1
 8004e28:	d1dd      	bne.n	8004de6 <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 8004e2a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004e2e:	e7e4      	b.n	8004dfa <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004e30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e32:	079a      	lsls	r2, r3, #30
 8004e34:	d501      	bpl.n	8004e3a <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004e36:	2402      	movs	r4, #2
 8004e38:	e7de      	b.n	8004df8 <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004e3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e3c:	069b      	lsls	r3, r3, #26
 8004e3e:	d501      	bpl.n	8004e44 <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004e40:	2420      	movs	r4, #32
 8004e42:	e7d9      	b.n	8004df8 <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <SD_FindSCR+0xcc>)
 8004e46:	6383      	str	r3, [r0, #56]	; 0x38
 8004e48:	ba3f      	rev	r7, r7
 8004e4a:	ba2d      	rev	r5, r5
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e4c:	f8c8 7004 	str.w	r7, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e50:	f8c8 5000 	str.w	r5, [r8]
  return HAL_SD_ERROR_NONE;
 8004e54:	e7d1      	b.n	8004dfa <SD_FindSCR+0x6e>
 8004e56:	bf00      	nop
 8004e58:	18000f3a 	.word	0x18000f3a

08004e5c <HAL_SD_DeInit>:
{
 8004e5c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004e5e:	4604      	mov	r4, r0
 8004e60:	b168      	cbz	r0, 8004e7e <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 8004e62:	2303      	movs	r3, #3
 8004e64:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  SDMMC_PowerState_OFF(hsd->Instance);
 8004e68:	6800      	ldr	r0, [r0, #0]
 8004e6a:	f002 f949 	bl	8007100 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f01a fa90 	bl	801f394 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e74:	2000      	movs	r0, #0
 8004e76:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8004e78:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004e7c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e7e:	2001      	movs	r0, #1
}
 8004e80:	bd10      	pop	{r4, pc}
	...

08004e84 <HAL_SD_ReadBlocks_DMA>:
{
 8004e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	4604      	mov	r4, r0
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	4615      	mov	r5, r2
 8004e8e:	461e      	mov	r6, r3
  if(NULL == pData)
 8004e90:	460f      	mov	r7, r1
 8004e92:	b939      	cbnz	r1, 8004ea4 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e94:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e9a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004e9c:	2001      	movs	r0, #1
}
 8004e9e:	b006      	add	sp, #24
 8004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004ea4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004ea8:	b2c0      	uxtb	r0, r0
 8004eaa:	2801      	cmp	r0, #1
 8004eac:	d158      	bne.n	8004f60 <HAL_SD_ReadBlocks_DMA+0xdc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004eae:	18d3      	adds	r3, r2, r3
 8004eb0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004eb2:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004eb4:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004eb6:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004eb8:	d904      	bls.n	8004ec4 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ebc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ec0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004ec2:	e7ec      	b.n	8004e9e <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004eca:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004ece:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004ed0:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ed4:	2b01      	cmp	r3, #1
    hsd->pRxBuffPtr = (uint32_t*)pData;
 8004ed6:	62a7      	str	r7, [r4, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004ed8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004edc:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004ee0:	bf18      	it	ne
 8004ee2:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ee4:	f002 f9d4 	bl	8007290 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ee8:	b148      	cbz	r0, 8004efe <HAL_SD_ReadBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ef2:	4318      	orrs	r0, r3
 8004ef4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004efc:	e7cf      	b.n	8004e9e <HAL_SD_ReadBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004f02:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f06:	2390      	movs	r3, #144	; 0x90
 8004f08:	9302      	str	r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f0a:	9004      	str	r0, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004f0c:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004f0e:	9005      	str	r0, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004f10:	4669      	mov	r1, sp
 8004f12:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004f14:	9303      	str	r3, [sp, #12]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004f16:	f002 f9a9 	bl	800726c <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004f1e:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8004f22:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004f24:	68c3      	ldr	r3, [r0, #12]
 8004f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f2a:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004f2c:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004f2e:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004f30:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004f32:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004f34:	d90e      	bls.n	8004f54 <HAL_SD_ReadBlocks_DMA+0xd0>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004f36:	2382      	movs	r3, #130	; 0x82
 8004f38:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f002 f9da 	bl	80072f4 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d0ac      	beq.n	8004e9e <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4c:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f52:	e7cd      	b.n	8004ef0 <HAL_SD_ReadBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004f54:	2381      	movs	r3, #129	; 0x81
 8004f56:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f002 f9b2 	bl	80072c2 <SDMMC_CmdReadSingleBlock>
 8004f5e:	e7ef      	b.n	8004f40 <HAL_SD_ReadBlocks_DMA+0xbc>
    return HAL_BUSY;
 8004f60:	2002      	movs	r0, #2
 8004f62:	e79c      	b.n	8004e9e <HAL_SD_ReadBlocks_DMA+0x1a>
 8004f64:	1fe00fff 	.word	0x1fe00fff

08004f68 <HAL_SD_WriteBlocks_DMA>:
{
 8004f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	b086      	sub	sp, #24
 8004f70:	4615      	mov	r5, r2
 8004f72:	461e      	mov	r6, r3
  if(NULL == pData)
 8004f74:	460f      	mov	r7, r1
 8004f76:	b939      	cbnz	r1, 8004f88 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f7e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004f80:	2001      	movs	r0, #1
}
 8004f82:	b006      	add	sp, #24
 8004f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004f88:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004f8c:	b2c0      	uxtb	r0, r0
 8004f8e:	2801      	cmp	r0, #1
 8004f90:	d159      	bne.n	8005046 <HAL_SD_WriteBlocks_DMA+0xde>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f92:	18d3      	adds	r3, r2, r3
 8004f94:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f96:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f98:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f9a:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f9c:	d904      	bls.n	8004fa8 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004fa6:	e7ec      	b.n	8004f82 <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004fae:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004fb2:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004fb4:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fb8:	2b01      	cmp	r3, #1
    hsd->pTxBuffPtr = (uint32_t*)pData;
 8004fba:	6227      	str	r7, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004fbc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004fc4:	bf18      	it	ne
 8004fc6:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fc8:	f002 f962 	bl	8007290 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fcc:	b148      	cbz	r0, 8004fe2 <HAL_SD_WriteBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004fd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fd6:	4318      	orrs	r0, r3
 8004fd8:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fda:	2001      	movs	r0, #1
 8004fdc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004fe0:	e7cf      	b.n	8004f82 <HAL_SD_WriteBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fe2:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004fe6:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004fea:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004fec:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004fee:	9005      	str	r0, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004ff0:	f04f 0890 	mov.w	r8, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 8004ff4:	4669      	mov	r1, sp
 8004ff6:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004ff8:	f8cd 8008 	str.w	r8, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004ffc:	f002 f936 	bl	800726c <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 8005000:	6820      	ldr	r0, [r4, #0]
 8005002:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005004:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
 8005008:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800500a:	68c3      	ldr	r3, [r0, #12]
 800500c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005010:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8005012:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8005014:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8005016:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005018:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800501a:	d90e      	bls.n	800503a <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800501c:	23a0      	movs	r3, #160	; 0xa0
 800501e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8005020:	4629      	mov	r1, r5
 8005022:	f002 f999 	bl	8007358 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005026:	2800      	cmp	r0, #0
 8005028:	d0ab      	beq.n	8004f82 <HAL_SD_WriteBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	4a07      	ldr	r2, [pc, #28]	; (800504c <HAL_SD_WriteBlocks_DMA+0xe4>)
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005032:	f422 728d 	bic.w	r2, r2, #282	; 0x11a
 8005036:	63da      	str	r2, [r3, #60]	; 0x3c
 8005038:	e7cc      	b.n	8004fd4 <HAL_SD_WriteBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800503a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800503e:	4629      	mov	r1, r5
 8005040:	f002 f971 	bl	8007326 <SDMMC_CmdWriteSingleBlock>
 8005044:	e7ef      	b.n	8005026 <HAL_SD_WriteBlocks_DMA+0xbe>
    return HAL_BUSY;
 8005046:	2002      	movs	r0, #2
 8005048:	e79b      	b.n	8004f82 <HAL_SD_WriteBlocks_DMA+0x1a>
 800504a:	bf00      	nop
 800504c:	1fe00fff 	.word	0x1fe00fff

08005050 <HAL_SD_ErrorCallback>:
 8005050:	4770      	bx	lr
	...

08005054 <HAL_SD_IRQHandler>:
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8005054:	6803      	ldr	r3, [r0, #0]
 8005056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{  
 8005058:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800505a:	05d5      	lsls	r5, r2, #23
{  
 800505c:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800505e:	d55f      	bpl.n	8005120 <HAL_SD_IRQHandler+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8005060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT   |\
 8005066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005068:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 800506c:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005074:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005078:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005080:	60da      	str	r2, [r3, #12]
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8005082:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005084:	f012 0208 	ands.w	r2, r2, #8
 8005088:	d023      	beq.n	80050d2 <HAL_SD_IRQHandler+0x7e>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800508a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800508c:	0790      	lsls	r0, r2, #30
 800508e:	d402      	bmi.n	8005096 <HAL_SD_IRQHandler+0x42>
 8005090:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005092:	0691      	lsls	r1, r2, #26
 8005094:	d509      	bpl.n	80050aa <HAL_SD_IRQHandler+0x56>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005096:	4618      	mov	r0, r3
 8005098:	f002 f978 	bl	800738c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800509c:	b128      	cbz	r0, 80050aa <HAL_SD_IRQHandler+0x56>
          hsd->ErrorCode |= errorstate;
 800509e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050a0:	4318      	orrs	r0, r3
 80050a2:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80050a4:	4620      	mov	r0, r4
 80050a6:	f7ff ffd3 	bl	8005050 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	4a59      	ldr	r2, [pc, #356]	; (8005214 <HAL_SD_IRQHandler+0x1c0>)
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80050b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050b8:	07da      	lsls	r2, r3, #31
 80050ba:	d503      	bpl.n	80050c4 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 80050bc:	4620      	mov	r0, r4
 80050be:	f016 fd4b 	bl	801bb58 <HAL_SD_RxCpltCallback>
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80050c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050c6:	079b      	lsls	r3, r3, #30
 80050c8:	d4f8      	bmi.n	80050bc <HAL_SD_IRQHandler+0x68>
        HAL_SD_TxCpltCallback(hsd);
 80050ca:	4620      	mov	r0, r4
 80050cc:	f016 fd3f 	bl	801bb4e <HAL_SD_TxCpltCallback>
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80050d2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80050d4:	060e      	lsls	r6, r1, #24
 80050d6:	f140 8090 	bpl.w	80051fa <HAL_SD_IRQHandler+0x1a6>
      hsd->Instance->DLEN = 0;
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80050dc:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80050de:	651a      	str	r2, [r3, #80]	; 0x50
      if((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET)
 80050e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80050e2:	07d5      	lsls	r5, r2, #31
 80050e4:	d409      	bmi.n	80050fa <HAL_SD_IRQHandler+0xa6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80050e6:	4618      	mov	r0, r3
 80050e8:	f002 f950 	bl	800738c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80050ec:	b128      	cbz	r0, 80050fa <HAL_SD_IRQHandler+0xa6>
          hsd->ErrorCode |= errorstate;
 80050ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050f0:	4318      	orrs	r0, r3
 80050f2:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80050f4:	4620      	mov	r0, r4
 80050f6:	f7ff ffab 	bl	8005050 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8005100:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005102:	06d8      	lsls	r0, r3, #27
 8005104:	d402      	bmi.n	800510c <HAL_SD_IRQHandler+0xb8>
 8005106:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005108:	0699      	lsls	r1, r3, #26
 800510a:	d502      	bpl.n	8005112 <HAL_SD_IRQHandler+0xbe>
        HAL_SD_TxCpltCallback(hsd);
 800510c:	4620      	mov	r0, r4
 800510e:	f016 fd1e 	bl	801bb4e <HAL_SD_TxCpltCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8005112:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005114:	07da      	lsls	r2, r3, #31
 8005116:	d4d1      	bmi.n	80050bc <HAL_SD_IRQHandler+0x68>
 8005118:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800511a:	079b      	lsls	r3, r3, #30
 800511c:	d4ce      	bmi.n	80050bc <HAL_SD_IRQHandler+0x68>
 800511e:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8005120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005122:	0456      	lsls	r6, r2, #17
 8005124:	d50d      	bpl.n	8005142 <HAL_SD_IRQHandler+0xee>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005126:	6a05      	ldr	r5, [r0, #32]
 8005128:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 800512c:	4629      	mov	r1, r5
 800512e:	6820      	ldr	r0, [r4, #0]
 8005130:	3504      	adds	r5, #4
 8005132:	f001 ffda 	bl	80070ea <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8005136:	42ae      	cmp	r6, r5
 8005138:	d1f8      	bne.n	800512c <HAL_SD_IRQHandler+0xd8>
  }
  
  hsd->pTxBuffPtr += 8;
 800513a:	6a23      	ldr	r3, [r4, #32]
 800513c:	3320      	adds	r3, #32
 800513e:	6223      	str	r3, [r4, #32]
 8005140:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8005142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005144:	0415      	lsls	r5, r2, #16
 8005146:	d50d      	bpl.n	8005164 <HAL_SD_IRQHandler+0x110>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005148:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800514a:	1f2e      	subs	r6, r5, #4
 800514c:	351c      	adds	r5, #28
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	f001 ffc8 	bl	80070e4 <SDMMC_ReadFIFO>
 8005154:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0; count < 8; count++)
 8005158:	42b5      	cmp	r5, r6
 800515a:	d1f8      	bne.n	800514e <HAL_SD_IRQHandler+0xfa>
  hsd->pRxBuffPtr += 8;
 800515c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800515e:	3320      	adds	r3, #32
 8005160:	62a3      	str	r3, [r4, #40]	; 0x28
 8005162:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8005164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005166:	f012 0f3a 	tst.w	r2, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800516a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 800516c:	d036      	beq.n	80051dc <HAL_SD_IRQHandler+0x188>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800516e:	0791      	lsls	r1, r2, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8005170:	bf42      	ittt	mi
 8005172:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8005174:	f042 0202 	orrmi.w	r2, r2, #2
 8005178:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800517a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800517c:	0712      	lsls	r2, r2, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800517e:	bf42      	ittt	mi
 8005180:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8005182:	f042 0208 	orrmi.w	r2, r2, #8
 8005186:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518a:	0696      	lsls	r6, r2, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800518c:	bf42      	ittt	mi
 800518e:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8005190:	f042 0220 	orrmi.w	r2, r2, #32
 8005194:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005198:	06d5      	lsls	r5, r2, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800519a:	bf42      	ittt	mi
 800519c:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 800519e:	f042 0210 	orrmi.w	r2, r2, #16
 80051a2:	6382      	strmi	r2, [r0, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051a4:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <HAL_SD_IRQHandler+0x1c0>)
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80051a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051aa:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80051ae:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80051b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80051b2:	f012 0208 	ands.w	r2, r2, #8
 80051b6:	d006      	beq.n	80051c6 <HAL_SD_IRQHandler+0x172>
        hsd->State = HAL_SD_STATE_READY;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff ff46 	bl	8005050 <HAL_SD_ErrorCallback>
 80051c4:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80051c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80051c8:	0608      	lsls	r0, r1, #24
 80051ca:	d516      	bpl.n	80051fa <HAL_SD_IRQHandler+0x1a6>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80051cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051ce:	b1a1      	cbz	r1, 80051fa <HAL_SD_IRQHandler+0x1a6>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80051d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80051d2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80051d6:	63d9      	str	r1, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80051d8:	651a      	str	r2, [r3, #80]	; 0x50
 80051da:	e7ed      	b.n	80051b8 <HAL_SD_IRQHandler+0x164>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_IDMABTC) != RESET)
 80051dc:	00d1      	lsls	r1, r2, #3
 80051de:	d50c      	bpl.n	80051fa <HAL_SD_IRQHandler+0x1a6>
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 80051e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e2:	f013 0f04 	tst.w	r3, #4
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80051e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 80051e8:	d10b      	bne.n	8005202 <HAL_SD_IRQHandler+0x1ae>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80051ea:	069a      	lsls	r2, r3, #26
 80051ec:	d506      	bpl.n	80051fc <HAL_SD_IRQHandler+0x1a8>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 80051ee:	f000 fb72 	bl	80058d6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 80051fc:	f000 fb69 	bl	80058d2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 8005200:	e7f7      	b.n	80051f2 <HAL_SD_IRQHandler+0x19e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005202:	069b      	lsls	r3, r3, #26
 8005204:	d502      	bpl.n	800520c <HAL_SD_IRQHandler+0x1b8>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8005206:	f000 fb65 	bl	80058d4 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
 800520a:	e7f2      	b.n	80051f2 <HAL_SD_IRQHandler+0x19e>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800520c:	f000 fb60 	bl	80058d0 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
 8005210:	e7ef      	b.n	80051f2 <HAL_SD_IRQHandler+0x19e>
 8005212:	bf00      	nop
 8005214:	18000f3a 	.word	0x18000f3a

08005218 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8005218:	6e03      	ldr	r3, [r0, #96]	; 0x60
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800521a:	0f9a      	lsrs	r2, r3, #30
 800521c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800521e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8005222:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8005224:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8005228:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 800522a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800522e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8005230:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005234:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8005236:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005238:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800523a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800523c:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800523e:	0112      	lsls	r2, r2, #4
 8005240:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005242:	88ca      	ldrh	r2, [r1, #6]
{
 8005244:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005246:	b292      	uxth	r2, r2
 8005248:	f3c3 5403 	ubfx	r4, r3, #20, #4
 800524c:	4322      	orrs	r2, r4
 800524e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005250:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8005254:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8005256:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800525a:	09d4      	lsrs	r4, r2, #7
 800525c:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800525e:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8005262:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005264:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8005268:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800526a:	f3c2 1400 	ubfx	r4, r2, #4, #1
 800526e:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8005270:	2400      	movs	r4, #0
 8005272:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005274:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005276:	2c00      	cmp	r4, #0
 8005278:	f040 8083 	bne.w	8005382 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800527c:	0292      	lsls	r2, r2, #10
 800527e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005282:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8005284:	690a      	ldr	r2, [r1, #16]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800528c:	4313      	orrs	r3, r2
 800528e:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8005290:	6e82      	ldr	r2, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8005292:	690b      	ldr	r3, [r1, #16]
 8005294:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005298:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800529a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800529e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80052a0:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80052a4:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80052a6:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80052aa:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80052ac:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80052b0:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80052b2:	0bd3      	lsrs	r3, r2, #15
 80052b4:	f003 0306 	and.w	r3, r3, #6
 80052b8:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80052ba:	7e0c      	ldrb	r4, [r1, #24]
 80052bc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80052c0:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80052c4:	4322      	orrs	r2, r4
 80052c6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80052c8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80052ca:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80052cc:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80052ce:	3402      	adds	r4, #2
 80052d0:	40a2      	lsls	r2, r4
 80052d2:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80052d4:	7a0d      	ldrb	r5, [r1, #8]
 80052d6:	2401      	movs	r4, #1
 80052d8:	40ac      	lsls	r4, r5
 80052da:	6504      	str	r4, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80052dc:	0a64      	lsrs	r4, r4, #9
 80052de:	4362      	muls	r2, r4
 80052e0:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512;
 80052e2:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80052e6:	6582      	str	r2, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80052e8:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80052f2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80052f4:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80052f6:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80052f8:	7e8a      	ldrb	r2, [r1, #26]
 80052fa:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80052fe:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005304:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005306:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8005308:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800530a:	0fda      	lsrs	r2, r3, #31
 800530c:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800530e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8005312:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005314:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8005318:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800531a:	0d9a      	lsrs	r2, r3, #22
 800531c:	f002 020c 	and.w	r2, r2, #12
 8005320:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005322:	7fca      	ldrb	r2, [r1, #31]
 8005324:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8005328:	4302      	orrs	r2, r0
 800532a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800532c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8005330:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 8005334:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005336:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 800533a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800533e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8005342:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005346:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800534a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800534e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8005352:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8005356:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800535a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800535e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8005362:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8005366:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800536a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800536e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 8005372:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8005376:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8005380:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005382:	2c01      	cmp	r4, #1
 8005384:	d11a      	bne.n	80053bc <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800538c:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800538e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp << 8);
 8005390:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8005392:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8005394:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005398:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 800539a:	690c      	ldr	r4, [r1, #16]
 800539c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80053a0:	4322      	orrs	r2, r4
 80053a2:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80053a4:	690a      	ldr	r2, [r1, #16]
 80053a6:	0292      	lsls	r2, r2, #10
 80053a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053ac:	64c2      	str	r2, [r0, #76]	; 0x4c
 80053ae:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80053b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80053b8:	6502      	str	r2, [r0, #80]	; 0x50
 80053ba:	e794      	b.n	80052e6 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80053bc:	6803      	ldr	r3, [r0, #0]
 80053be:	4a05      	ldr	r2, [pc, #20]	; (80053d4 <HAL_SD_GetCardCSD+0x1bc>)
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80053c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c8:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80053d0:	4618      	mov	r0, r3
 80053d2:	bd30      	pop	{r4, r5, pc}
 80053d4:	1fe00fff 	.word	0x1fe00fff

080053d8 <HAL_SD_InitCard>:
{
 80053d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053da:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053dc:	2300      	movs	r3, #0
 80053de:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80053e0:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80053e2:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80053e4:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80053e6:	233c      	movs	r3, #60	; 0x3c
 80053e8:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80053ea:	6983      	ldr	r3, [r0, #24]
 80053ec:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80053ee:	bf01      	itttt	eq
 80053f0:	6802      	ldreq	r2, [r0, #0]
 80053f2:	6813      	ldreq	r3, [r2, #0]
 80053f4:	f043 0304 	orreq.w	r3, r3, #4
 80053f8:	6013      	streq	r3, [r2, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 80053fa:	ab0a      	add	r3, sp, #40	; 0x28
{
 80053fc:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 80053fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005402:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005406:	ab07      	add	r3, sp, #28
 8005408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800540a:	6820      	ldr	r0, [r4, #0]
 800540c:	f001 fe50 	bl	80070b0 <SDMMC_Init>
  if(status != HAL_OK)
 8005410:	2800      	cmp	r0, #0
 8005412:	f040 80e9 	bne.w	80055e8 <HAL_SD_InitCard+0x210>
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005416:	6820      	ldr	r0, [r4, #0]
 8005418:	f001 fe6c 	bl	80070f4 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800541c:	4605      	mov	r5, r0
 800541e:	2800      	cmp	r0, #0
 8005420:	f040 80e2 	bne.w	80055e8 <HAL_SD_InitCard+0x210>
  HAL_Delay(2U);
 8005424:	2002      	movs	r0, #2
 8005426:	f7fb fe01 	bl	800102c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800542a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 800542c:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800542e:	f001 ffe1 	bl	80073f4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005432:	b958      	cbnz	r0, 800544c <HAL_SD_InitCard+0x74>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	f002 f807 	bl	8007448 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800543a:	b170      	cbz	r0, 800545a <HAL_SD_InitCard+0x82>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800543c:	6425      	str	r5, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800543e:	2100      	movs	r1, #0
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	f002 f83f 	bl	80074c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005446:	b158      	cbz	r0, 8005460 <HAL_SD_InitCard+0x88>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005448:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 800544c:	2501      	movs	r5, #1
 800544e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005454:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 8005456:	63a0      	str	r0, [r4, #56]	; 0x38
 8005458:	e098      	b.n	800558c <HAL_SD_InitCard+0x1b4>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800545a:	2301      	movs	r3, #1
 800545c:	6423      	str	r3, [r4, #64]	; 0x40
 800545e:	e7ee      	b.n	800543e <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005460:	4f62      	ldr	r7, [pc, #392]	; (80055ec <HAL_SD_InitCard+0x214>)
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005462:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8005466:	9b06      	ldr	r3, [sp, #24]
 8005468:	42b3      	cmp	r3, r6
 800546a:	d815      	bhi.n	8005498 <HAL_SD_InitCard+0xc0>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800546c:	2100      	movs	r1, #0
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	f002 f828 	bl	80074c4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005474:	2800      	cmp	r0, #0
 8005476:	d1e9      	bne.n	800544c <HAL_SD_InitCard+0x74>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005478:	4639      	mov	r1, r7
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	f002 f83b 	bl	80074f6 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005480:	4601      	mov	r1, r0
 8005482:	2800      	cmp	r0, #0
 8005484:	d1e0      	bne.n	8005448 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	f001 fe56 	bl	8007138 <SDMMC_GetResponse>
      count++;
 800548c:	9b06      	ldr	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 800548e:	2800      	cmp	r0, #0
      count++;
 8005490:	f103 0301 	add.w	r3, r3, #1
 8005494:	9306      	str	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005496:	dae6      	bge.n	8005466 <HAL_SD_InitCard+0x8e>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005498:	9a06      	ldr	r2, [sp, #24]
 800549a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800549e:	429a      	cmp	r2, r3
 80054a0:	d902      	bls.n	80054a8 <HAL_SD_InitCard+0xd0>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80054a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80054a6:	e7d1      	b.n	800544c <HAL_SD_InitCard+0x74>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80054a8:	0043      	lsls	r3, r0, #1
 80054aa:	d532      	bpl.n	8005512 <HAL_SD_InitCard+0x13a>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80054ac:	2301      	movs	r3, #1
 80054ae:	63e3      	str	r3, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80054b0:	69a3      	ldr	r3, [r4, #24]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d12d      	bne.n	8005512 <HAL_SD_InitCard+0x13a>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80054b6:	01c7      	lsls	r7, r0, #7
 80054b8:	d52b      	bpl.n	8005512 <HAL_SD_InitCard+0x13a>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80054ba:	6820      	ldr	r0, [r4, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80054bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054c0:	65e3      	str	r3, [r4, #92]	; 0x5c
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80054c2:	6803      	ldr	r3, [r0, #0]
 80054c4:	f043 0303 	orr.w	r3, r3, #3
 80054c8:	6003      	str	r3, [r0, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80054ca:	f002 f8f9 	bl	80076c0 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d1bc      	bne.n	800544c <HAL_SD_InitCard+0x74>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP);
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d6:	0156      	lsls	r6, r2, #5
 80054d8:	d5fc      	bpl.n	80054d4 <HAL_SD_InitCard+0xfc>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80054da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	02d8      	lsls	r0, r3, #11
 80054e4:	d5b0      	bpl.n	8005448 <HAL_SD_InitCard+0x70>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80054e6:	2001      	movs	r0, #1
 80054e8:	f000 f965 	bl	80057b6 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	f042 0202 	orr.w	r2, r2, #2
 80054f4:	601a      	str	r2, [r3, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND);
 80054f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f8:	0191      	lsls	r1, r2, #6
 80054fa:	d5fc      	bpl.n	80054f6 <HAL_SD_InitCard+0x11e>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80054fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005504:	02d2      	lsls	r2, r2, #11
 8005506:	d4cc      	bmi.n	80054a2 <HAL_SD_InitCard+0xca>
            hsd->Instance->POWER = 0x13; 
 8005508:	2213      	movs	r2, #19
 800550a:	601a      	str	r2, [r3, #0]
            hsd->Instance->ICR = 0xFFFFFFFF;
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1;
 8005512:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8005514:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8005516:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800551a:	f001 fdf7 	bl	800710c <SDMMC_GetPowerState>
 800551e:	b910      	cbnz	r0, 8005526 <HAL_SD_InitCard+0x14e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005520:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005524:	e03c      	b.n	80055a0 <HAL_SD_InitCard+0x1c8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005528:	2b03      	cmp	r3, #3
 800552a:	d018      	beq.n	800555e <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	f002 f811 	bl	8007554 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005532:	2800      	cmp	r0, #0
 8005534:	d134      	bne.n	80055a0 <HAL_SD_InitCard+0x1c8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005536:	4601      	mov	r1, r0
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	f001 fdfd 	bl	8007138 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800553e:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005540:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005542:	6820      	ldr	r0, [r4, #0]
 8005544:	f001 fdf8 	bl	8007138 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005548:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800554a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800554c:	6820      	ldr	r0, [r4, #0]
 800554e:	f001 fdf3 	bl	8007138 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005552:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005554:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005556:	6820      	ldr	r0, [r4, #0]
 8005558:	f001 fdee 	bl	8007138 <SDMMC_GetResponse>
 800555c:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800555e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005560:	2b03      	cmp	r3, #3
 8005562:	d116      	bne.n	8005592 <HAL_SD_InitCard+0x1ba>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005564:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005566:	2b03      	cmp	r3, #3
 8005568:	d120      	bne.n	80055ac <HAL_SD_InitCard+0x1d4>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800556a:	2104      	movs	r1, #4
 800556c:	6820      	ldr	r0, [r4, #0]
 800556e:	f001 fde3 	bl	8007138 <SDMMC_GetResponse>
 8005572:	0d00      	lsrs	r0, r0, #20
 8005574:	6460      	str	r0, [r4, #68]	; 0x44
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005576:	a90d      	add	r1, sp, #52	; 0x34
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff fe4d 	bl	8005218 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800557e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005580:	6820      	ldr	r0, [r4, #0]
 8005582:	0412      	lsls	r2, r2, #16
 8005584:	2300      	movs	r3, #0
 8005586:	f001 ff1b 	bl	80073c0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800558a:	b948      	cbnz	r0, 80055a0 <HAL_SD_InitCard+0x1c8>
}
 800558c:	4628      	mov	r0, r5
 800558e:	b019      	add	sp, #100	; 0x64
 8005590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005592:	f10d 0116 	add.w	r1, sp, #22
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	f002 f808 	bl	80075ac <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800559c:	2800      	cmp	r0, #0
 800559e:	d0e1      	beq.n	8005564 <HAL_SD_InitCard+0x18c>
    hsd->State = HAL_SD_STATE_READY;
 80055a0:	2501      	movs	r5, #1
 80055a2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055a8:	4308      	orrs	r0, r1
 80055aa:	e754      	b.n	8005456 <HAL_SD_InitCard+0x7e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80055ac:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80055b0:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	0409      	lsls	r1, r1, #16
 80055b6:	f001 ffe3 	bl	8007580 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_SD_InitCard+0x1c8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055be:	4601      	mov	r1, r0
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	f001 fdb9 	bl	8007138 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055c6:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055c8:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055ca:	6820      	ldr	r0, [r4, #0]
 80055cc:	f001 fdb4 	bl	8007138 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055d0:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055d2:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	f001 fdaf 	bl	8007138 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055da:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055dc:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	f001 fdaa 	bl	8007138 <SDMMC_GetResponse>
 80055e4:	66e0      	str	r0, [r4, #108]	; 0x6c
 80055e6:	e7c0      	b.n	800556a <HAL_SD_InitCard+0x192>
    return HAL_ERROR;
 80055e8:	2501      	movs	r5, #1
 80055ea:	e7cf      	b.n	800558c <HAL_SD_InitCard+0x1b4>
 80055ec:	c1100000 	.word	0xc1100000

080055f0 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80055f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80055f2:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80055f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055f6:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80055f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055fa:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80055fc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80055fe:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005600:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005602:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005604:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005606:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005608:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800560a:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800560c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800560e:	61cb      	str	r3, [r1, #28]
}
 8005610:	2000      	movs	r0, #0
 8005612:	4770      	bx	lr

08005614 <HAL_SD_ConfigWideBusOperation>:
{
 8005614:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8005616:	2303      	movs	r3, #3
 8005618:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800561c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800561e:	2b03      	cmp	r3, #3
{
 8005620:	b08a      	sub	sp, #40	; 0x28
 8005622:	4604      	mov	r4, r0
 8005624:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005626:	d002      	beq.n	800562e <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005628:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800562c:	d103      	bne.n	8005636 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800562e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005634:	e056      	b.n	80056e4 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005636:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800563a:	d12d      	bne.n	8005698 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 800563c:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800563e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005640:	9104      	str	r1, [sp, #16]
 8005642:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005644:	f001 fd78 	bl	8007138 <SDMMC_GetResponse>
 8005648:	0180      	lsls	r0, r0, #6
 800564a:	d41f      	bmi.n	800568c <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 800564c:	a904      	add	r1, sp, #16
 800564e:	4620      	mov	r0, r4
 8005650:	f7ff fb9c 	bl	8004d8c <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005654:	b960      	cbnz	r0, 8005670 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005656:	9b05      	ldr	r3, [sp, #20]
 8005658:	0359      	lsls	r1, r3, #13
 800565a:	d51a      	bpl.n	8005692 <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800565c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	0409      	lsls	r1, r1, #16
 8005662:	f001 ff2f 	bl	80074c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005666:	b918      	cbnz	r0, 8005670 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005668:	2102      	movs	r1, #2
 800566a:	6820      	ldr	r0, [r4, #0]
 800566c:	f002 f826 	bl	80076bc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005672:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8005674:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005676:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005678:	2d00      	cmp	r5, #0
 800567a:	d035      	beq.n	80056e8 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	4a26      	ldr	r2, [pc, #152]	; (8005718 <HAL_SD_ConfigWideBusOperation+0x104>)
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005682:	2001      	movs	r0, #1
 8005684:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8005688:	b00a      	add	sp, #40	; 0x28
 800568a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800568c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005690:	e7ee      	b.n	8005670 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005692:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005696:	e7eb      	b.n	8005670 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005698:	bb09      	cbnz	r1, 80056de <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800569a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800569c:	9104      	str	r1, [sp, #16]
 800569e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056a0:	f001 fd4a 	bl	8007138 <SDMMC_GetResponse>
 80056a4:	0182      	lsls	r2, r0, #6
 80056a6:	d414      	bmi.n	80056d2 <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80056a8:	a904      	add	r1, sp, #16
 80056aa:	4620      	mov	r0, r4
 80056ac:	f7ff fb6e 	bl	8004d8c <SD_FindSCR>
  if(errorstate != HAL_OK)
 80056b0:	b960      	cbnz	r0, 80056cc <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80056b2:	9b05      	ldr	r3, [sp, #20]
 80056b4:	03db      	lsls	r3, r3, #15
 80056b6:	d50f      	bpl.n	80056d8 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80056b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056ba:	6820      	ldr	r0, [r4, #0]
 80056bc:	0409      	lsls	r1, r1, #16
 80056be:	f001 ff01 	bl	80074c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80056c2:	b918      	cbnz	r0, 80056cc <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80056c4:	4601      	mov	r1, r0
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	f001 fff8 	bl	80076bc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80056cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056ce:	4308      	orrs	r0, r1
 80056d0:	e7d0      	b.n	8005674 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80056d6:	e7f9      	b.n	80056cc <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056d8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80056dc:	e7f6      	b.n	80056cc <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80056e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80056e6:	e7c6      	b.n	8005676 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80056e8:	6863      	ldr	r3, [r4, #4]
 80056ea:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80056ec:	68a3      	ldr	r3, [r4, #8]
 80056ee:	9305      	str	r3, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	9307      	str	r3, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80056f4:	6963      	ldr	r3, [r4, #20]
 80056f6:	9308      	str	r3, [sp, #32]
    SDMMC_Init(hsd->Instance, Init);
 80056f8:	ab0a      	add	r3, sp, #40	; 0x28
 80056fa:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80056fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.BusWide             = WideMode;
 8005702:	9606      	str	r6, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 8005704:	ab04      	add	r3, sp, #16
 8005706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005708:	6820      	ldr	r0, [r4, #0]
 800570a:	f001 fcd1 	bl	80070b0 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800570e:	2301      	movs	r3, #1
 8005710:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005714:	4628      	mov	r0, r5
 8005716:	e7b7      	b.n	8005688 <HAL_SD_ConfigWideBusOperation+0x74>
 8005718:	1fe00fff 	.word	0x1fe00fff

0800571c <HAL_SD_Init>:
{ 
 800571c:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 800571e:	4604      	mov	r4, r0
 8005720:	b910      	cbnz	r0, 8005728 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8005722:	2501      	movs	r5, #1
}
 8005724:	4628      	mov	r0, r5
 8005726:	bd38      	pop	{r3, r4, r5, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8005728:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800572c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005730:	b913      	cbnz	r3, 8005738 <HAL_SD_Init+0x1c>
    hsd->Lock = HAL_UNLOCKED;
 8005732:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005734:	f019 fdde 	bl	801f2f4 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8005738:	2303      	movs	r3, #3
 800573a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800573e:	4620      	mov	r0, r4
 8005740:	f7ff fe4a 	bl	80053d8 <HAL_SD_InitCard>
 8005744:	2800      	cmp	r0, #0
 8005746:	d1ec      	bne.n	8005722 <HAL_SD_Init+0x6>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005748:	68e1      	ldr	r1, [r4, #12]
 800574a:	4620      	mov	r0, r4
 800574c:	f7ff ff62 	bl	8005614 <HAL_SD_ConfigWideBusOperation>
 8005750:	4605      	mov	r5, r0
 8005752:	2800      	cmp	r0, #0
 8005754:	d1e5      	bne.n	8005722 <HAL_SD_Init+0x6>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005756:	69a3      	ldr	r3, [r4, #24]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d006      	beq.n	800576a <HAL_SD_Init+0x4e>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800575c:	2300      	movs	r3, #0
 800575e:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005760:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005762:	2301      	movs	r3, #1
 8005764:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005768:	e7dc      	b.n	8005724 <HAL_SD_Init+0x8>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 800576a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800576c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005770:	d002      	beq.n	8005778 <HAL_SD_Init+0x5c>
 8005772:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d1f1      	bne.n	800575c <HAL_SD_Init+0x40>
      hsd->Instance->CLKCR |= 0x00100000;
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	6853      	ldr	r3, [r2, #4]
 800577c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005780:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_OK)
 8005782:	4620      	mov	r0, r4
 8005784:	f000 f818 	bl	80057b8 <HAL_SDEx_HighSpeed>
 8005788:	2800      	cmp	r0, #0
 800578a:	d0e7      	beq.n	800575c <HAL_SD_Init+0x40>
 800578c:	e7c9      	b.n	8005722 <HAL_SD_Init+0x6>

0800578e <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800578e:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8005790:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005792:	0409      	lsls	r1, r1, #16
{
 8005794:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005796:	6800      	ldr	r0, [r0, #0]
 8005798:	f001 ff5e 	bl	8007658 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 800579c:	4601      	mov	r1, r0
 800579e:	b928      	cbnz	r0, 80057ac <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	f001 fcc9 	bl	8007138 <SDMMC_GetResponse>
  return cardstate;
 80057a6:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80057aa:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80057ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057ae:	4319      	orrs	r1, r3
 80057b0:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80057b2:	2000      	movs	r0, #0
 80057b4:	e7f7      	b.n	80057a6 <HAL_SD_GetCardState+0x18>

080057b6 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transciver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80057b6:	4770      	bx	lr

080057b8 <HAL_SDEx_HighSpeed>:
{
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t SD_hs[64]  = {0};
 80057bc:	2640      	movs	r6, #64	; 0x40
{
 80057be:	b096      	sub	sp, #88	; 0x58
 80057c0:	4605      	mov	r5, r0
  uint8_t SD_hs[64]  = {0};
 80057c2:	4632      	mov	r2, r6
 80057c4:	2100      	movs	r1, #0
 80057c6:	a806      	add	r0, sp, #24
 80057c8:	f01a f915 	bl	801f9f6 <memset>
  uint32_t Timeout = HAL_GetTick();
 80057cc:	f7fb fc28 	bl	8001020 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80057d0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 80057d2:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d074      	beq.n	80058c2 <HAL_SDEx_HighSpeed+0x10a>
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80057d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057dc:	d004      	beq.n	80057e8 <HAL_SDEx_HighSpeed+0x30>
  uint32_t errorstate = HAL_OK;
 80057de:	2400      	movs	r4, #0
}
 80057e0:	4620      	mov	r0, r4
 80057e2:	b016      	add	sp, #88	; 0x58
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 80057e8:	69af      	ldr	r7, [r5, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80057ea:	2f01      	cmp	r7, #1
 80057ec:	d1f7      	bne.n	80057de <HAL_SDEx_HighSpeed+0x26>
    hsd->Instance->DCTRL = 0;
 80057ee:	6828      	ldr	r0, [r5, #0]
 80057f0:	2300      	movs	r3, #0
 80057f2:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 80057f4:	4631      	mov	r1, r6
 80057f6:	f001 fd4b 	bl	8007290 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_OK)
 80057fa:	4604      	mov	r4, r0
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d1ef      	bne.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005800:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64;
 8005804:	e88d 0048 	stmia.w	sp, {r3, r6}
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005808:	2360      	movs	r3, #96	; 0x60
 800580a:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800580c:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800580e:	2302      	movs	r3, #2
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005810:	4669      	mov	r1, sp
 8005812:	6828      	ldr	r0, [r5, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005814:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005816:	9705      	str	r7, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005818:	f001 fd28 	bl	800726c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 800581c:	492a      	ldr	r1, [pc, #168]	; (80058c8 <HAL_SDEx_HighSpeed+0x110>)
 800581e:	6828      	ldr	r0, [r5, #0]
 8005820:	f001 ff33 	bl	800768a <SDMMC_CmdSwitch>
    if(errorstate != HAL_OK)
 8005824:	4604      	mov	r4, r0
 8005826:	2800      	cmp	r0, #0
 8005828:	d1da      	bne.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
 800582a:	ae06      	add	r6, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800582c:	f240 592a 	movw	r9, #1322	; 0x52a
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005834:	ea12 0f09 	tst.w	r2, r9
 8005838:	d005      	beq.n	8005846 <HAL_SDEx_HighSpeed+0x8e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800583a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583c:	0710      	lsls	r0, r2, #28
 800583e:	d51e      	bpl.n	800587e <HAL_SDEx_HighSpeed+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005840:	2208      	movs	r2, #8
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8005844:	e7cc      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	041f      	lsls	r7, r3, #16
 800584a:	d50a      	bpl.n	8005862 <HAL_SDEx_HighSpeed+0xaa>
 800584c:	1f37      	subs	r7, r6, #4
 800584e:	f106 0a1c 	add.w	sl, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005852:	6828      	ldr	r0, [r5, #0]
 8005854:	f001 fc46 	bl	80070e4 <SDMMC_ReadFIFO>
 8005858:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 800585c:	4557      	cmp	r7, sl
 800585e:	d1f8      	bne.n	8005852 <HAL_SDEx_HighSpeed+0x9a>
        tempbuff += 8;
 8005860:	3620      	adds	r6, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8005862:	f7fb fbdd 	bl	8001020 <HAL_GetTick>
 8005866:	eba0 0008 	sub.w	r0, r0, r8
 800586a:	3001      	adds	r0, #1
 800586c:	d1e0      	bne.n	8005830 <HAL_SDEx_HighSpeed+0x78>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800586e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005872:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005874:	2301      	movs	r3, #1
 8005876:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        return HAL_TIMEOUT;
 800587a:	2403      	movs	r4, #3
 800587c:	e7b0      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800587e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005880:	0791      	lsls	r1, r2, #30
 8005882:	d502      	bpl.n	800588a <HAL_SDEx_HighSpeed+0xd2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005884:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005886:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 8005888:	e7aa      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800588a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800588c:	0692      	lsls	r2, r2, #26
 800588e:	d501      	bpl.n	8005894 <HAL_SDEx_HighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005890:	2420      	movs	r4, #32
 8005892:	e7f8      	b.n	8005886 <HAL_SDEx_HighSpeed+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005894:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <HAL_SDEx_HighSpeed+0x114>)
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
    if ((SD_hs[13]& 2) != 2)
 8005898:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800589c:	079b      	lsls	r3, r3, #30
 800589e:	d502      	bpl.n	80058a6 <HAL_SDEx_HighSpeed+0xee>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80058a0:	2001      	movs	r0, #1
 80058a2:	f7ff ff88 	bl	80057b6 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058aa:	6828      	ldr	r0, [r5, #0]
 80058ac:	f001 fcf0 	bl	8007290 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d094      	beq.n	80057de <HAL_SDEx_HighSpeed+0x26>
      hsd->State = HAL_SD_STATE_READY;
 80058b4:	2401      	movs	r4, #1
 80058b6:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 80058ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80058bc:	4318      	orrs	r0, r3
 80058be:	63a8      	str	r0, [r5, #56]	; 0x38
      return HAL_ERROR;
 80058c0:	e78e      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 80058c2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80058c6:	e78b      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
 80058c8:	80ffff01 	.word	0x80ffff01
 80058cc:	18000f3a 	.word	0x18000f3a

080058d0 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
 80058d0:	4770      	bx	lr

080058d2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
 80058d2:	4770      	bx	lr

080058d4 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
 80058d4:	4770      	bx	lr

080058d6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80058d6:	4770      	bx	lr

080058d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058da:	4604      	mov	r4, r0
 80058dc:	2800      	cmp	r0, #0
 80058de:	d04a      	beq.n	8005976 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e0:	2300      	movs	r3, #0
 80058e2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058e4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80058e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058ec:	b91b      	cbnz	r3, 80058f6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ee:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058f2:	f019 fb33 	bl	801ef5c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058f6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058f8:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80058fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80058fe:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005900:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8005902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005906:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800590a:	600b      	str	r3, [r1, #0]
 800590c:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005910:	d92e      	bls.n	8005970 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005912:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005914:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005918:	bf18      	it	ne
 800591a:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800591c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800591e:	b92b      	cbnz	r3, 800592c <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005920:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005924:	bf8c      	ite	hi
 8005926:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005928:	2301      	movls	r3, #1
 800592a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800592c:	68a6      	ldr	r6, [r4, #8]
 800592e:	6863      	ldr	r3, [r4, #4]
 8005930:	69a5      	ldr	r5, [r4, #24]
 8005932:	4333      	orrs	r3, r6
 8005934:	6926      	ldr	r6, [r4, #16]
 8005936:	4333      	orrs	r3, r6
 8005938:	6966      	ldr	r6, [r4, #20]
 800593a:	4333      	orrs	r3, r6
 800593c:	69e6      	ldr	r6, [r4, #28]
 800593e:	4333      	orrs	r3, r6
 8005940:	6a26      	ldr	r6, [r4, #32]
 8005942:	4333      	orrs	r3, r6
 8005944:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005946:	4333      	orrs	r3, r6
 8005948:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800594c:	4333      	orrs	r3, r6
 800594e:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005952:	431a      	orrs	r2, r3
 8005954:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005956:	0c2d      	lsrs	r5, r5, #16
 8005958:	431a      	orrs	r2, r3
 800595a:	f005 0504 	and.w	r5, r5, #4
 800595e:	432a      	orrs	r2, r5
 8005960:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8005962:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005964:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005966:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005968:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800596a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	
  return HAL_OK;
 800596e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005970:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005974:	e7d0      	b.n	8005918 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8005976:	2001      	movs	r0, #1
}
 8005978:	bd70      	pop	{r4, r5, r6, pc}

0800597a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800597a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597e:	461d      	mov	r5, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005980:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8005984:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8005988:	2b01      	cmp	r3, #1
{
 800598a:	4604      	mov	r4, r0
 800598c:	460e      	mov	r6, r1
 800598e:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8005990:	d07d      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x114>
 8005992:	2301      	movs	r3, #1
 8005994:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005998:	f7fb fb42 	bl	8001020 <HAL_GetTick>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800599c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	hspi->TxISR       = NULL;


  /* Set the Rx Fifo threshold */
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059a0:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 80059a2:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059a6:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059a8:	bf1c      	itt	ne
 80059aa:	2305      	movne	r3, #5
 80059ac:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80059b4:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80059b8:	87e5      	strh	r5, [r4, #62]	; 0x3e
	hspi->TxISR       = NULL;
 80059ba:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059bc:	6853      	ldr	r3, [r2, #4]
	hspi->TxXferSize  = Size;
 80059be:	87a5      	strh	r5, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059c4:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059c6:	63a6      	str	r6, [r4, #56]	; 0x38
  tickstart = HAL_GetTick();
 80059c8:	4681      	mov	r9, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059ca:	6053      	str	r3, [r2, #4]
  uint32_t txallowed = 1U;
 80059cc:	2501      	movs	r5, #1


    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b95b      	cbnz	r3, 80059ec <HAL_SPI_TransmitReceive+0x72>
 80059d4:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80059d8:	b280      	uxth	r0, r0
 80059da:	b938      	cbnz	r0, 80059ec <HAL_SPI_TransmitReceive+0x72>
    }
 // }


error :
  hspi->State = HAL_SPI_STATE_READY;
 80059dc:	2301      	movs	r3, #1
 80059de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80059e2:	2300      	movs	r3, #0
 80059e4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80059e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80059ec:	b195      	cbz	r5, 8005a14 <HAL_SPI_TransmitReceive+0x9a>
 80059ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	b17b      	cbz	r3, 8005a14 <HAL_SPI_TransmitReceive+0x9a>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	0791      	lsls	r1, r2, #30
 80059fa:	d50b      	bpl.n	8005a14 <HAL_SPI_TransmitReceive+0x9a>
        if (hspi->TxXferCount > 1U)
 80059fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80059fe:	b292      	uxth	r2, r2
 8005a00:	2a01      	cmp	r2, #1
 8005a02:	d932      	bls.n	8005a6a <HAL_SPI_TransmitReceive+0xf0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005a04:	f836 2b02 	ldrh.w	r2, [r6], #2
 8005a08:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8005a0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a0c:	3b02      	subs	r3, #2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005a12:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005a14:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	b1db      	cbz	r3, 8005a54 <HAL_SPI_TransmitReceive+0xda>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	07d2      	lsls	r2, r2, #31
 8005a22:	d517      	bpl.n	8005a54 <HAL_SPI_TransmitReceive+0xda>
        if (hspi->RxXferCount > 1U)
 8005a24:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005a28:	b292      	uxth	r2, r2
 8005a2a:	2a01      	cmp	r2, #1
 8005a2c:	d925      	bls.n	8005a7a <HAL_SPI_TransmitReceive+0x100>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	f827 2b02 	strh.w	r2, [r7], #2
          hspi->RxXferCount -= 2U;
 8005a34:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005a38:	3a02      	subs	r2, #2
 8005a3a:	b292      	uxth	r2, r2
 8005a3c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a40:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005a44:	b292      	uxth	r2, r2
 8005a46:	2a01      	cmp	r2, #1
 8005a48:	d803      	bhi.n	8005a52 <HAL_SPI_TransmitReceive+0xd8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a50:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8005a52:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005a54:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005a58:	d0b9      	beq.n	80059ce <HAL_SPI_TransmitReceive+0x54>
 8005a5a:	f7fb fae1 	bl	8001020 <HAL_GetTick>
 8005a5e:	eba0 0009 	sub.w	r0, r0, r9
 8005a62:	4580      	cmp	r8, r0
 8005a64:	d8b3      	bhi.n	80059ce <HAL_SPI_TransmitReceive+0x54>
        errorcode = HAL_TIMEOUT;
 8005a66:	2003      	movs	r0, #3
 8005a68:	e7b8      	b.n	80059dc <HAL_SPI_TransmitReceive+0x62>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005a6a:	7832      	ldrb	r2, [r6, #0]
 8005a6c:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8005a6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005a76:	3601      	adds	r6, #1
 8005a78:	e7cb      	b.n	8005a12 <HAL_SPI_TransmitReceive+0x98>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a7a:	7b1b      	ldrb	r3, [r3, #12]
 8005a7c:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 8005a7e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a8a:	3701      	adds	r7, #1
 8005a8c:	e7e1      	b.n	8005a52 <HAL_SPI_TransmitReceive+0xd8>
  __HAL_LOCK(hspi);
 8005a8e:	2002      	movs	r0, #2
  return errorcode;
}
 8005a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005a94 <HAL_SPI_ErrorCallback>:
 8005a94:	4770      	bx	lr
	...

08005a98 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8005a98:	6803      	ldr	r3, [r0, #0]
{
 8005a9a:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005a9c:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005a9e:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8005aa0:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8005aa4:	2d01      	cmp	r5, #1
{
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8005aaa:	d105      	bne.n	8005ab8 <HAL_SPI_IRQHandler+0x20>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8005aac:	064d      	lsls	r5, r1, #25
 8005aae:	d503      	bpl.n	8005ab8 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 8005ab0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 8005ab2:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8005ab4:	b005      	add	sp, #20
 8005ab6:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8005ab8:	0795      	lsls	r5, r2, #30
 8005aba:	d504      	bpl.n	8005ac6 <HAL_SPI_IRQHandler+0x2e>
 8005abc:	0608      	lsls	r0, r1, #24
 8005abe:	d502      	bpl.n	8005ac6 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8005ac0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	e7f5      	b.n	8005ab2 <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8005ac6:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8005aca:	d0f3      	beq.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
 8005acc:	068d      	lsls	r5, r1, #26
 8005ace:	d5f1      	bpl.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8005ad0:	0650      	lsls	r0, r2, #25
 8005ad2:	d50f      	bpl.n	8005af4 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ad4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005ad8:	2803      	cmp	r0, #3
 8005ada:	f04f 0500 	mov.w	r5, #0
 8005ade:	d041      	beq.n	8005b64 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ae0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005ae2:	f040 0004 	orr.w	r0, r0, #4
 8005ae6:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae8:	9500      	str	r5, [sp, #0]
 8005aea:	68d8      	ldr	r0, [r3, #12]
 8005aec:	9000      	str	r0, [sp, #0]
 8005aee:	6898      	ldr	r0, [r3, #8]
 8005af0:	9000      	str	r0, [sp, #0]
 8005af2:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8005af4:	0695      	lsls	r5, r2, #26
 8005af6:	d50c      	bpl.n	8005b12 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005af8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005afa:	f040 0001 	orr.w	r0, r0, #1
 8005afe:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b00:	2000      	movs	r0, #0
 8005b02:	9002      	str	r0, [sp, #8]
 8005b04:	6898      	ldr	r0, [r3, #8]
 8005b06:	9002      	str	r0, [sp, #8]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005b0e:	6018      	str	r0, [r3, #0]
 8005b10:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8005b12:	05d0      	lsls	r0, r2, #23
 8005b14:	d508      	bpl.n	8005b28 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b16:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005b18:	f042 0208 	orr.w	r2, r2, #8
 8005b1c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b1e:	2200      	movs	r2, #0
 8005b20:	9203      	str	r2, [sp, #12]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	9203      	str	r2, [sp, #12]
 8005b26:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b28:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	d0c2      	beq.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b34:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005b36:	2201      	movs	r2, #1
 8005b38:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b3c:	078a      	lsls	r2, r1, #30
 8005b3e:	d018      	beq.n	8005b72 <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b40:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005b42:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b44:	f022 0203 	bic.w	r2, r2, #3
 8005b48:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005b4a:	b118      	cbz	r0, 8005b54 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_SPI_IRQHandler+0xe4>)
 8005b4e:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005b50:	f7fc f8f2 	bl	8001d38 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8005b54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0ac      	beq.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b5a:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <HAL_SPI_IRQHandler+0xe4>)
 8005b5c:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005b5e:	f7fc f8eb 	bl	8001d38 <HAL_DMA_Abort_IT>
 8005b62:	e7a7      	b.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b64:	9501      	str	r5, [sp, #4]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	9201      	str	r2, [sp, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	9b01      	ldr	r3, [sp, #4]
        return;
 8005b70:	e7a0      	b.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8005b72:	4620      	mov	r0, r4
 8005b74:	f7ff ff8e 	bl	8005a94 <HAL_SPI_ErrorCallback>
 8005b78:	e79c      	b.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
 8005b7a:	bf00      	nop
 8005b7c:	08005b81 	.word	0x08005b81

08005b80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b80:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b82:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005b8a:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8005b8c:	f7ff ff82 	bl	8005a94 <HAL_SPI_ErrorCallback>
 8005b90:	bd08      	pop	{r3, pc}
	...

08005b94 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b94:	6a03      	ldr	r3, [r0, #32]
 8005b96:	f023 0301 	bic.w	r3, r3, #1
 8005b9a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9c:	6a03      	ldr	r3, [r0, #32]
{
 8005b9e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005baa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005bae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bb0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005bb2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005bb6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bb8:	4d1b      	ldr	r5, [pc, #108]	; (8005c28 <TIM_OC1_SetConfig+0x94>)
 8005bba:	42a8      	cmp	r0, r5
 8005bbc:	d00f      	beq.n	8005bde <TIM_OC1_SetConfig+0x4a>
 8005bbe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bc2:	42a8      	cmp	r0, r5
 8005bc4:	d00b      	beq.n	8005bde <TIM_OC1_SetConfig+0x4a>
 8005bc6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bca:	42a8      	cmp	r0, r5
 8005bcc:	d007      	beq.n	8005bde <TIM_OC1_SetConfig+0x4a>
 8005bce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bd2:	42a8      	cmp	r0, r5
 8005bd4:	d003      	beq.n	8005bde <TIM_OC1_SetConfig+0x4a>
 8005bd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bda:	42a8      	cmp	r0, r5
 8005bdc:	d11e      	bne.n	8005c1c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bde:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005be4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be6:	4d10      	ldr	r5, [pc, #64]	; (8005c28 <TIM_OC1_SetConfig+0x94>)
 8005be8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bea:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	d00f      	beq.n	8005c10 <TIM_OC1_SetConfig+0x7c>
 8005bf0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bf4:	42a8      	cmp	r0, r5
 8005bf6:	d00b      	beq.n	8005c10 <TIM_OC1_SetConfig+0x7c>
 8005bf8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bfc:	42a8      	cmp	r0, r5
 8005bfe:	d007      	beq.n	8005c10 <TIM_OC1_SetConfig+0x7c>
 8005c00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c04:	42a8      	cmp	r0, r5
 8005c06:	d003      	beq.n	8005c10 <TIM_OC1_SetConfig+0x7c>
 8005c08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c0c:	42a8      	cmp	r0, r5
 8005c0e:	d105      	bne.n	8005c1c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c10:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c14:	698e      	ldr	r6, [r1, #24]
 8005c16:	694c      	ldr	r4, [r1, #20]
 8005c18:	4334      	orrs	r4, r6
 8005c1a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c20:	684a      	ldr	r2, [r1, #4]
 8005c22:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	6203      	str	r3, [r0, #32]
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	40012c00 	.word	0x40012c00

08005c2c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c2c:	6a03      	ldr	r3, [r0, #32]
 8005c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c32:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c34:	6a03      	ldr	r3, [r0, #32]
{
 8005c36:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c42:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005c46:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c48:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005c4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c52:	4d16      	ldr	r5, [pc, #88]	; (8005cac <TIM_OC3_SetConfig+0x80>)
 8005c54:	42a8      	cmp	r0, r5
 8005c56:	d003      	beq.n	8005c60 <TIM_OC3_SetConfig+0x34>
 8005c58:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c5c:	42a8      	cmp	r0, r5
 8005c5e:	d10d      	bne.n	8005c7c <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c60:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6a:	4d10      	ldr	r5, [pc, #64]	; (8005cac <TIM_OC3_SetConfig+0x80>)
 8005c6c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c72:	d00e      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c74:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c78:	42a8      	cmp	r0, r5
 8005c7a:	d00a      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c7c:	4d0c      	ldr	r5, [pc, #48]	; (8005cb0 <TIM_OC3_SetConfig+0x84>)
 8005c7e:	42a8      	cmp	r0, r5
 8005c80:	d007      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c86:	42a8      	cmp	r0, r5
 8005c88:	d003      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c8e:	42a8      	cmp	r0, r5
 8005c90:	d106      	bne.n	8005ca0 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c92:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c96:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c98:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c9a:	4334      	orrs	r4, r6
 8005c9c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca4:	684a      	ldr	r2, [r1, #4]
 8005ca6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca8:	6203      	str	r3, [r0, #32]
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40014000 	.word	0x40014000

08005cb4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb4:	6a03      	ldr	r3, [r0, #32]
 8005cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cba:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbc:	6a03      	ldr	r3, [r0, #32]
{
 8005cbe:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005cca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	4d0e      	ldr	r5, [pc, #56]	; (8005d18 <TIM_OC4_SetConfig+0x64>)
 8005cde:	42a8      	cmp	r0, r5
 8005ce0:	d00f      	beq.n	8005d02 <TIM_OC4_SetConfig+0x4e>
 8005ce2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ce6:	42a8      	cmp	r0, r5
 8005ce8:	d00b      	beq.n	8005d02 <TIM_OC4_SetConfig+0x4e>
 8005cea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005cee:	42a8      	cmp	r0, r5
 8005cf0:	d007      	beq.n	8005d02 <TIM_OC4_SetConfig+0x4e>
 8005cf2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cf6:	42a8      	cmp	r0, r5
 8005cf8:	d003      	beq.n	8005d02 <TIM_OC4_SetConfig+0x4e>
 8005cfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cfe:	42a8      	cmp	r0, r5
 8005d00:	d104      	bne.n	8005d0c <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d02:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d04:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d08:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d10:	684a      	ldr	r2, [r1, #4]
 8005d12:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d14:	6203      	str	r3, [r0, #32]
 8005d16:	bd30      	pop	{r4, r5, pc}
 8005d18:	40012c00 	.word	0x40012c00

08005d1c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d1c:	6a03      	ldr	r3, [r0, #32]
 8005d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d22:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d24:	6a03      	ldr	r3, [r0, #32]
{
 8005d26:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d2a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005d36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d38:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005d3a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d3e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d42:	4d0f      	ldr	r5, [pc, #60]	; (8005d80 <TIM_OC5_SetConfig+0x64>)
 8005d44:	42a8      	cmp	r0, r5
 8005d46:	d00f      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d48:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d4c:	42a8      	cmp	r0, r5
 8005d4e:	d00b      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d50:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005d54:	42a8      	cmp	r0, r5
 8005d56:	d007      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d5c:	42a8      	cmp	r0, r5
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d64:	42a8      	cmp	r0, r5
 8005d66:	d104      	bne.n	8005d72 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d68:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d6a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d6e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d74:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d76:	684a      	ldr	r2, [r1, #4]
 8005d78:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7a:	6203      	str	r3, [r0, #32]
 8005d7c:	bd30      	pop	{r4, r5, pc}
 8005d7e:	bf00      	nop
 8005d80:	40012c00 	.word	0x40012c00

08005d84 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d84:	6a03      	ldr	r3, [r0, #32]
 8005d86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d8a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8c:	6a03      	ldr	r3, [r0, #32]
{
 8005d8e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d92:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d96:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005da2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005da4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005da8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dac:	4d0e      	ldr	r5, [pc, #56]	; (8005de8 <TIM_OC6_SetConfig+0x64>)
 8005dae:	42a8      	cmp	r0, r5
 8005db0:	d00f      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005db2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005db6:	42a8      	cmp	r0, r5
 8005db8:	d00b      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005dba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005dbe:	42a8      	cmp	r0, r5
 8005dc0:	d007      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005dc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dc6:	42a8      	cmp	r0, r5
 8005dc8:	d003      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005dca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dce:	42a8      	cmp	r0, r5
 8005dd0:	d104      	bne.n	8005ddc <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dd2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dd4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dd8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ddc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dde:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005de0:	684a      	ldr	r2, [r1, #4]
 8005de2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	6203      	str	r3, [r0, #32]
 8005de6:	bd30      	pop	{r4, r5, pc}
 8005de8:	40012c00 	.word	0x40012c00

08005dec <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	2302      	movs	r3, #2
{
 8005dee:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005df4:	6803      	ldr	r3, [r0, #0]
 8005df6:	4c09      	ldr	r4, [pc, #36]	; (8005e1c <HAL_TIM_Base_Start+0x30>)
 8005df8:	6899      	ldr	r1, [r3, #8]
 8005dfa:	4021      	ands	r1, r4
 8005dfc:	2906      	cmp	r1, #6
 8005dfe:	d008      	beq.n	8005e12 <HAL_TIM_Base_Start+0x26>
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	4022      	ands	r2, r4
 8005e04:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005e08:	bf1e      	ittt	ne
 8005e0a:	681a      	ldrne	r2, [r3, #0]
 8005e0c:	f042 0201 	orrne.w	r2, r2, #1
 8005e10:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005e18:	2000      	movs	r0, #0
 8005e1a:	bd10      	pop	{r4, pc}
 8005e1c:	00010007 	.word	0x00010007

08005e20 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e20:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e22:	480a      	ldr	r0, [pc, #40]	; (8005e4c <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e2c:	6899      	ldr	r1, [r3, #8]
 8005e2e:	4001      	ands	r1, r0
 8005e30:	2906      	cmp	r1, #6
 8005e32:	d008      	beq.n	8005e46 <HAL_TIM_Base_Start_IT+0x26>
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	4002      	ands	r2, r0
 8005e38:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005e3c:	bf1e      	ittt	ne
 8005e3e:	681a      	ldrne	r2, [r3, #0]
 8005e40:	f042 0201 	orrne.w	r2, r2, #1
 8005e44:	601a      	strne	r2, [r3, #0]
}
 8005e46:	2000      	movs	r0, #0
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	00010007 	.word	0x00010007

08005e50 <HAL_TIM_PeriodElapsedCallback>:
 8005e50:	4770      	bx	lr

08005e52 <HAL_TIM_OC_DelayElapsedCallback>:
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIM_IC_CaptureCallback>:
 8005e54:	4770      	bx	lr

08005e56 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIM_TriggerCallback>:
 8005e58:	4770      	bx	lr

08005e5a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e5a:	6803      	ldr	r3, [r0, #0]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	0791      	lsls	r1, r2, #30
{
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e64:	d50f      	bpl.n	8005e86 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	0792      	lsls	r2, r2, #30
 8005e6a:	d50c      	bpl.n	8005e86 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e6c:	f06f 0202 	mvn.w	r2, #2
 8005e70:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e72:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e74:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e76:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e78:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e7a:	f000 8085 	beq.w	8005f88 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	f7ff ffe9 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	2300      	movs	r3, #0
 8005e84:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	0752      	lsls	r2, r2, #29
 8005e8c:	d510      	bpl.n	8005eb0 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	0750      	lsls	r0, r2, #29
 8005e92:	d50d      	bpl.n	8005eb0 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e94:	f06f 0204 	mvn.w	r2, #4
 8005e98:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e9a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e9c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e9e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ea2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ea6:	d075      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea8:	f7ff ffd4 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eac:	2300      	movs	r3, #0
 8005eae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	0711      	lsls	r1, r2, #28
 8005eb6:	d50f      	bpl.n	8005ed8 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	0712      	lsls	r2, r2, #28
 8005ebc:	d50c      	bpl.n	8005ed8 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ebe:	f06f 0208 	mvn.w	r2, #8
 8005ec2:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ec4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec6:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ec8:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eca:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ecc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ece:	d067      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed0:	f7ff ffc0 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	06d0      	lsls	r0, r2, #27
 8005ede:	d510      	bpl.n	8005f02 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	06d1      	lsls	r1, r2, #27
 8005ee4:	d50d      	bpl.n	8005f02 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee6:	f06f 0210 	mvn.w	r2, #16
 8005eea:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eec:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eee:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef8:	d058      	beq.n	8005fac <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	f7ff ffab 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	2300      	movs	r3, #0
 8005f00:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	07d2      	lsls	r2, r2, #31
 8005f08:	d508      	bpl.n	8005f1c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	07d0      	lsls	r0, r2, #31
 8005f0e:	d505      	bpl.n	8005f1c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f10:	f06f 0201 	mvn.w	r2, #1
 8005f14:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f16:	4620      	mov	r0, r4
 8005f18:	f7ff ff9a 	bl	8005e50 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	0611      	lsls	r1, r2, #24
 8005f22:	d508      	bpl.n	8005f36 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	0612      	lsls	r2, r2, #24
 8005f28:	d505      	bpl.n	8005f36 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fb98 	bl	8006666 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	05d0      	lsls	r0, r2, #23
 8005f3c:	d508      	bpl.n	8005f50 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	0611      	lsls	r1, r2, #24
 8005f42:	d505      	bpl.n	8005f50 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 fb8c 	bl	8006668 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	0652      	lsls	r2, r2, #25
 8005f56:	d508      	bpl.n	8005f6a <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	0650      	lsls	r0, r2, #25
 8005f5c:	d505      	bpl.n	8005f6a <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f62:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff ff77 	bl	8005e58 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	0691      	lsls	r1, r2, #26
 8005f70:	d522      	bpl.n	8005fb8 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	0692      	lsls	r2, r2, #26
 8005f76:	d51f      	bpl.n	8005fb8 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f78:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005f7c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f7e:	611a      	str	r2, [r3, #16]
}
 8005f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005f84:	f000 bb6e 	b.w	8006664 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f88:	f7ff ff63 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff ff62 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f92:	e776      	b.n	8005e82 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f94:	f7ff ff5d 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff ff5c 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f9e:	e785      	b.n	8005eac <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa0:	f7ff ff57 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7ff ff56 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8005faa:	e793      	b.n	8005ed4 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fac:	f7ff ff51 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff ff50 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8005fb6:	e7a2      	b.n	8005efe <HAL_TIM_IRQHandler+0xa4>
 8005fb8:	bd10      	pop	{r4, pc}
	...

08005fbc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fbc:	4a30      	ldr	r2, [pc, #192]	; (8006080 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005fbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc0:	4290      	cmp	r0, r2
 8005fc2:	d012      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005fc8:	d00f      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005fce:	4290      	cmp	r0, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fd6:	4290      	cmp	r0, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fde:	4290      	cmp	r0, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fe2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005fe6:	4290      	cmp	r0, r2
 8005fe8:	d119      	bne.n	800601e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005fea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ff0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	4a23      	ldr	r2, [pc, #140]	; (8006080 <TIM_Base_SetConfig+0xc4>)
 8005ff4:	4290      	cmp	r0, r2
 8005ff6:	d01d      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8005ff8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005ffc:	d01a      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8005ffe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006002:	4290      	cmp	r0, r2
 8006004:	d016      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8006006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800600a:	4290      	cmp	r0, r2
 800600c:	d012      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 800600e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006012:	4290      	cmp	r0, r2
 8006014:	d00e      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8006016:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800601a:	4290      	cmp	r0, r2
 800601c:	d00a      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 800601e:	4a19      	ldr	r2, [pc, #100]	; (8006084 <TIM_Base_SetConfig+0xc8>)
 8006020:	4290      	cmp	r0, r2
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8006024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006028:	4290      	cmp	r0, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 800602c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006030:	4290      	cmp	r0, r2
 8006032:	d103      	bne.n	800603c <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006034:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800603c:	694a      	ldr	r2, [r1, #20]
 800603e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006042:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006044:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006046:	688b      	ldr	r3, [r1, #8]
 8006048:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800604a:	680b      	ldr	r3, [r1, #0]
 800604c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <TIM_Base_SetConfig+0xc4>)
 8006050:	4298      	cmp	r0, r3
 8006052:	d00f      	beq.n	8006074 <TIM_Base_SetConfig+0xb8>
 8006054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006058:	4298      	cmp	r0, r3
 800605a:	d00b      	beq.n	8006074 <TIM_Base_SetConfig+0xb8>
 800605c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006060:	4298      	cmp	r0, r3
 8006062:	d007      	beq.n	8006074 <TIM_Base_SetConfig+0xb8>
 8006064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006068:	4298      	cmp	r0, r3
 800606a:	d003      	beq.n	8006074 <TIM_Base_SetConfig+0xb8>
 800606c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006070:	4298      	cmp	r0, r3
 8006072:	d101      	bne.n	8006078 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006074:	690b      	ldr	r3, [r1, #16]
 8006076:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006078:	2301      	movs	r3, #1
 800607a:	6143      	str	r3, [r0, #20]
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40014000 	.word	0x40014000

08006088 <HAL_TIM_Base_Init>:
{
 8006088:	b510      	push	{r4, lr}
  if (htim == NULL)
 800608a:	4604      	mov	r4, r0
 800608c:	b1a0      	cbz	r0, 80060b8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800608e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006092:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006096:	b91b      	cbnz	r3, 80060a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006098:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800609c:	f019 f818 	bl	801f0d0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	2302      	movs	r3, #2
 80060a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a6:	6820      	ldr	r0, [r4, #0]
 80060a8:	1d21      	adds	r1, r4, #4
 80060aa:	f7ff ff87 	bl	8005fbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80060b4:	2000      	movs	r0, #0
 80060b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80060b8:	2001      	movs	r0, #1
}
 80060ba:	bd10      	pop	{r4, pc}

080060bc <HAL_TIM_OC_Init>:
{
 80060bc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80060be:	4604      	mov	r4, r0
 80060c0:	b1a0      	cbz	r0, 80060ec <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060ca:	b91b      	cbnz	r3, 80060d4 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80060cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80060d0:	f019 f860 	bl	801f194 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	2302      	movs	r3, #2
 80060d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	1d21      	adds	r1, r4, #4
 80060de:	f7ff ff6d 	bl	8005fbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80060e8:	2000      	movs	r0, #0
 80060ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80060ec:	2001      	movs	r0, #1
}
 80060ee:	bd10      	pop	{r4, pc}

080060f0 <HAL_TIM_PWM_Init>:
{
 80060f0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80060f2:	4604      	mov	r4, r0
 80060f4:	b1a0      	cbz	r0, 8006120 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060fe:	b91b      	cbnz	r3, 8006108 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006100:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006104:	f019 f932 	bl	801f36c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	2302      	movs	r3, #2
 800610a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	1d21      	adds	r1, r4, #4
 8006112:	f7ff ff53 	bl	8005fbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006116:	2301      	movs	r3, #1
 8006118:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800611c:	2000      	movs	r0, #0
 800611e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006120:	2001      	movs	r0, #1
}
 8006122:	bd10      	pop	{r4, pc}

08006124 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006124:	6a03      	ldr	r3, [r0, #32]
 8006126:	f023 0310 	bic.w	r3, r3, #16
 800612a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800612c:	6a03      	ldr	r3, [r0, #32]
{
 800612e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8006130:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006132:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006136:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800613a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800613e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006142:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006144:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006148:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800614c:	4d16      	ldr	r5, [pc, #88]	; (80061a8 <TIM_OC2_SetConfig+0x84>)
 800614e:	42a8      	cmp	r0, r5
 8006150:	d003      	beq.n	800615a <TIM_OC2_SetConfig+0x36>
 8006152:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006156:	42a8      	cmp	r0, r5
 8006158:	d10d      	bne.n	8006176 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800615a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800615c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006160:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	4d10      	ldr	r5, [pc, #64]	; (80061a8 <TIM_OC2_SetConfig+0x84>)
 8006166:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8006168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	d00e      	beq.n	800618c <TIM_OC2_SetConfig+0x68>
 800616e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006172:	42a8      	cmp	r0, r5
 8006174:	d00a      	beq.n	800618c <TIM_OC2_SetConfig+0x68>
 8006176:	4d0d      	ldr	r5, [pc, #52]	; (80061ac <TIM_OC2_SetConfig+0x88>)
 8006178:	42a8      	cmp	r0, r5
 800617a:	d007      	beq.n	800618c <TIM_OC2_SetConfig+0x68>
 800617c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006180:	42a8      	cmp	r0, r5
 8006182:	d003      	beq.n	800618c <TIM_OC2_SetConfig+0x68>
 8006184:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006188:	42a8      	cmp	r0, r5
 800618a:	d106      	bne.n	800619a <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800618c:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006190:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006192:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006194:	4334      	orrs	r4, r6
 8006196:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800619a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800619c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800619e:	684a      	ldr	r2, [r1, #4]
 80061a0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80061a2:	6203      	str	r3, [r0, #32]
 80061a4:	bd70      	pop	{r4, r5, r6, pc}
 80061a6:	bf00      	nop
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40014000 	.word	0x40014000

080061b0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80061b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
{
 80061b6:	b510      	push	{r4, lr}
 80061b8:	4604      	mov	r4, r0
 80061ba:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80061be:	d010      	beq.n	80061e2 <HAL_TIM_OC_ConfigChannel+0x32>
 80061c0:	2301      	movs	r3, #1
  switch (Channel)
 80061c2:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80061c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80061cc:	d01c      	beq.n	8006208 <HAL_TIM_OC_ConfigChannel+0x58>
 80061ce:	d809      	bhi.n	80061e4 <HAL_TIM_OC_ConfigChannel+0x34>
 80061d0:	b192      	cbz	r2, 80061f8 <HAL_TIM_OC_ConfigChannel+0x48>
 80061d2:	2a04      	cmp	r2, #4
 80061d4:	d014      	beq.n	8006200 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80061d6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80061d8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80061da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80061de:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80061e2:	bd10      	pop	{r4, pc}
  switch (Channel)
 80061e4:	2a10      	cmp	r2, #16
 80061e6:	d013      	beq.n	8006210 <HAL_TIM_OC_ConfigChannel+0x60>
 80061e8:	2a14      	cmp	r2, #20
 80061ea:	d015      	beq.n	8006218 <HAL_TIM_OC_ConfigChannel+0x68>
 80061ec:	2a0c      	cmp	r2, #12
 80061ee:	d1f2      	bne.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	f7ff fd5f 	bl	8005cb4 <TIM_OC4_SetConfig>
      break;
 80061f6:	e7ee      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	f7ff fccb 	bl	8005b94 <TIM_OC1_SetConfig>
      break;
 80061fe:	e7ea      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	f7ff ff8f 	bl	8006124 <TIM_OC2_SetConfig>
      break;
 8006206:	e7e6      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	f7ff fd0f 	bl	8005c2c <TIM_OC3_SetConfig>
      break;
 800620e:	e7e2      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006210:	6820      	ldr	r0, [r4, #0]
 8006212:	f7ff fd83 	bl	8005d1c <TIM_OC5_SetConfig>
      break;
 8006216:	e7de      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	f7ff fdb3 	bl	8005d84 <TIM_OC6_SetConfig>
      break;
 800621e:	e7da      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>

08006220 <HAL_TIM_PWM_ConfigChannel>:
{
 8006220:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006222:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006226:	2b01      	cmp	r3, #1
{
 8006228:	4604      	mov	r4, r0
 800622a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800622e:	d010      	beq.n	8006252 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006230:	2301      	movs	r3, #1
  switch (Channel)
 8006232:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006234:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800623c:	d043      	beq.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800623e:	d809      	bhi.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006240:	b1fa      	cbz	r2, 8006282 <HAL_TIM_PWM_ConfigChannel+0x62>
 8006242:	2a04      	cmp	r2, #4
 8006244:	d02e      	beq.n	80062a4 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8006246:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006248:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800624a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800624e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006252:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8006254:	2a10      	cmp	r2, #16
 8006256:	d047      	beq.n	80062e8 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006258:	2a14      	cmp	r2, #20
 800625a:	d056      	beq.n	800630a <HAL_TIM_PWM_ConfigChannel+0xea>
 800625c:	2a0c      	cmp	r2, #12
 800625e:	d1f2      	bne.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	f7ff fd27 	bl	8005cb4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006266:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006268:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006280:	e030      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	f7ff fc86 	bl	8005b94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006288:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800628a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	f022 0204 	bic.w	r2, r2, #4
 800629a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062a0:	619a      	str	r2, [r3, #24]
      break;
 80062a2:	e7d0      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	f7ff ff3d 	bl	8006124 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062aa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062ac:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062b6:	699a      	ldr	r2, [r3, #24]
 80062b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80062c4:	e7ec      	b.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	f7ff fcb0 	bl	8005c2c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062cc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ce:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	f042 0208 	orr.w	r2, r2, #8
 80062d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062d8:	69da      	ldr	r2, [r3, #28]
 80062da:	f022 0204 	bic.w	r2, r2, #4
 80062de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062e4:	61da      	str	r2, [r3, #28]
      break;
 80062e6:	e7ae      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	f7ff fd17 	bl	8005d1c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062ee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062f0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062f4:	f042 0208 	orr.w	r2, r2, #8
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062fc:	f022 0204 	bic.w	r2, r2, #4
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006302:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006304:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006306:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006308:	e79d      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	f7ff fd3a 	bl	8005d84 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006310:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006312:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800631c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006326:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800632a:	e7ec      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0xe6>

0800632c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800632c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800632e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006330:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006332:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006336:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800633a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633c:	6083      	str	r3, [r0, #8]
 800633e:	bd10      	pop	{r4, pc}

08006340 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006340:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
{
 8006346:	b570      	push	{r4, r5, r6, lr}
 8006348:	4604      	mov	r4, r0
 800634a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800634e:	d017      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006354:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8006356:	2301      	movs	r3, #1
 8006358:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800635c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800635e:	4b48      	ldr	r3, [pc, #288]	; (8006480 <HAL_TIM_ConfigClockSource+0x140>)
 8006360:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8006362:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006364:	680b      	ldr	r3, [r1, #0]
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d072      	beq.n	8006450 <HAL_TIM_ConfigClockSource+0x110>
 800636a:	d815      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x58>
 800636c:	2b10      	cmp	r3, #16
 800636e:	d00c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x4a>
 8006370:	d807      	bhi.n	8006382 <HAL_TIM_ConfigClockSource+0x42>
 8006372:	b153      	cbz	r3, 800638a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8006374:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006376:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006378:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800637c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006380:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006382:	2b20      	cmp	r3, #32
 8006384:	d001      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x4a>
 8006386:	2b30      	cmp	r3, #48	; 0x30
 8006388:	d1f4      	bne.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800638a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800638c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8006390:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006394:	4313      	orrs	r3, r2
 8006396:	e033      	b.n	8006400 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8006398:	2b70      	cmp	r3, #112	; 0x70
 800639a:	d033      	beq.n	8006404 <HAL_TIM_ConfigClockSource+0xc4>
 800639c:	d81b      	bhi.n	80063d6 <HAL_TIM_ConfigClockSource+0x96>
 800639e:	2b50      	cmp	r3, #80	; 0x50
 80063a0:	d03f      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0xe2>
 80063a2:	2b60      	cmp	r3, #96	; 0x60
 80063a4:	d1e6      	bne.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a6:	684d      	ldr	r5, [r1, #4]
 80063a8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063aa:	6a01      	ldr	r1, [r0, #32]
 80063ac:	f021 0110 	bic.w	r1, r1, #16
 80063b0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80063b4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063b6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80063be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063c2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80063c6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80063c8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80063ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80063d4:	e014      	b.n	8006400 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80063d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063da:	d00c      	beq.n	80063f6 <HAL_TIM_ConfigClockSource+0xb6>
 80063dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e0:	d1c8      	bne.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80063e2:	68cb      	ldr	r3, [r1, #12]
 80063e4:	684a      	ldr	r2, [r1, #4]
 80063e6:	6889      	ldr	r1, [r1, #8]
 80063e8:	f7ff ffa0 	bl	800632c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	6893      	ldr	r3, [r2, #8]
 80063f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063f4:	e013      	b.n	800641e <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80063f6:	6883      	ldr	r3, [r0, #8]
 80063f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fc:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006400:	6083      	str	r3, [r0, #8]
 8006402:	e7b7      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8006404:	68cb      	ldr	r3, [r1, #12]
 8006406:	684a      	ldr	r2, [r1, #4]
 8006408:	6889      	ldr	r1, [r1, #8]
 800640a:	f7ff ff8f 	bl	800632c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800640e:	6822      	ldr	r2, [r4, #0]
 8006410:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800641a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800641e:	6093      	str	r3, [r2, #8]
      break;
 8006420:	e7a8      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	684a      	ldr	r2, [r1, #4]
 8006424:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006426:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006428:	6a05      	ldr	r5, [r0, #32]
 800642a:	f025 0501 	bic.w	r5, r5, #1
 800642e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006430:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006432:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800643a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800643e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006440:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006442:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006444:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800644a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 800644e:	e7d7      	b.n	8006400 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006450:	684a      	ldr	r2, [r1, #4]
 8006452:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006454:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006456:	6a05      	ldr	r5, [r0, #32]
 8006458:	f025 0501 	bic.w	r5, r5, #1
 800645c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006460:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006468:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800646c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800646e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006470:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006472:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006478:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800647c:	e7c0      	b.n	8006400 <HAL_TIM_ConfigClockSource+0xc0>
 800647e:	bf00      	nop
 8006480:	fffe0088 	.word	0xfffe0088

08006484 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006484:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006486:	f001 011f 	and.w	r1, r1, #31
{
 800648a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800648c:	2401      	movs	r4, #1
 800648e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8006490:	ea23 0304 	bic.w	r3, r3, r4
 8006494:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006496:	6a03      	ldr	r3, [r0, #32]
 8006498:	408a      	lsls	r2, r1
 800649a:	431a      	orrs	r2, r3
 800649c:	6202      	str	r2, [r0, #32]
 800649e:	bd10      	pop	{r4, pc}

080064a0 <HAL_TIM_PWM_Start>:
{
 80064a0:	b510      	push	{r4, lr}
 80064a2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064a4:	2201      	movs	r2, #1
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	f7ff ffec 	bl	8006484 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	4a14      	ldr	r2, [pc, #80]	; (8006500 <HAL_TIM_PWM_Start+0x60>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d01f      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
 80064b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d01b      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
 80064bc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d017      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
 80064c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d013      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
 80064cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00f      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80064d4:	6899      	ldr	r1, [r3, #8]
 80064d6:	480b      	ldr	r0, [pc, #44]	; (8006504 <HAL_TIM_PWM_Start+0x64>)
 80064d8:	4001      	ands	r1, r0
 80064da:	2906      	cmp	r1, #6
 80064dc:	d008      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x50>
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	4002      	ands	r2, r0
 80064e2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80064e6:	d003      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
}
 80064f0:	2000      	movs	r0, #0
 80064f2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80064f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064fa:	645a      	str	r2, [r3, #68]	; 0x44
 80064fc:	e7ea      	b.n	80064d4 <HAL_TIM_PWM_Start+0x34>
 80064fe:	bf00      	nop
 8006500:	40012c00 	.word	0x40012c00
 8006504:	00010007 	.word	0x00010007

08006508 <HAL_TIM_OC_Start>:
 8006508:	f7ff bfca 	b.w	80064a0 <HAL_TIM_PWM_Start>

0800650c <HAL_TIM_PWM_Stop>:
{
 800650c:	b510      	push	{r4, lr}
 800650e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006510:	2200      	movs	r2, #0
 8006512:	6800      	ldr	r0, [r0, #0]
 8006514:	f7ff ffb6 	bl	8006484 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <HAL_TIM_PWM_Stop+0x78>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00f      	beq.n	8006540 <HAL_TIM_PWM_Stop+0x34>
 8006520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006524:	4293      	cmp	r3, r2
 8006526:	d00b      	beq.n	8006540 <HAL_TIM_PWM_Stop+0x34>
 8006528:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800652c:	4293      	cmp	r3, r2
 800652e:	d007      	beq.n	8006540 <HAL_TIM_PWM_Stop+0x34>
 8006530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <HAL_TIM_PWM_Stop+0x34>
 8006538:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800653c:	4293      	cmp	r3, r2
 800653e:	d10d      	bne.n	800655c <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 8006540:	6a19      	ldr	r1, [r3, #32]
 8006542:	f241 1211 	movw	r2, #4369	; 0x1111
 8006546:	4211      	tst	r1, r2
 8006548:	d108      	bne.n	800655c <HAL_TIM_PWM_Stop+0x50>
 800654a:	6a19      	ldr	r1, [r3, #32]
 800654c:	f240 4244 	movw	r2, #1092	; 0x444
 8006550:	4211      	tst	r1, r2
 8006552:	bf02      	ittt	eq
 8006554:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8006556:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800655a:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800655c:	6a19      	ldr	r1, [r3, #32]
 800655e:	f241 1211 	movw	r2, #4369	; 0x1111
 8006562:	4211      	tst	r1, r2
 8006564:	d108      	bne.n	8006578 <HAL_TIM_PWM_Stop+0x6c>
 8006566:	6a19      	ldr	r1, [r3, #32]
 8006568:	f240 4244 	movw	r2, #1092	; 0x444
 800656c:	4211      	tst	r1, r2
 800656e:	d103      	bne.n	8006578 <HAL_TIM_PWM_Stop+0x6c>
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	f022 0201 	bic.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006578:	2301      	movs	r3, #1
 800657a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800657e:	2000      	movs	r0, #0
 8006580:	bd10      	pop	{r4, pc}
 8006582:	bf00      	nop
 8006584:	40012c00 	.word	0x40012c00

08006588 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006588:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800658c:	2b01      	cmp	r3, #1
{
 800658e:	b530      	push	{r4, r5, lr}
 8006590:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8006594:	d01f      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006596:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006598:	4d10      	ldr	r5, [pc, #64]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 800659a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800659e:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80065a0:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80065a2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065a4:	d003      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80065a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80065aa:	42aa      	cmp	r2, r5
 80065ac:	d103      	bne.n	80065b6 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065ae:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065b4:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b6:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065b8:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065be:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80065c0:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c4:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065c6:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 80065ca:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80065cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065d0:	2300      	movs	r3, #0
 80065d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80065d6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80065d8:	bd30      	pop	{r4, r5, pc}
 80065da:	bf00      	nop
 80065dc:	40012c00 	.word	0x40012c00

080065e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80065e4:	2b01      	cmp	r3, #1
{
 80065e6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80065e8:	d038      	beq.n	800665c <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065ea:	68cb      	ldr	r3, [r1, #12]
 80065ec:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065ee:	4c1c      	ldr	r4, [pc, #112]	; (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065f6:	684a      	ldr	r2, [r1, #4]
 80065f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065fe:	680a      	ldr	r2, [r1, #0]
 8006600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006604:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006606:	690a      	ldr	r2, [r1, #16]
 8006608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800660e:	694a      	ldr	r2, [r1, #20]
 8006610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006614:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006616:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800661c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800661e:	698a      	ldr	r2, [r1, #24]
 8006620:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006628:	6802      	ldr	r2, [r0, #0]
 800662a:	42a2      	cmp	r2, r4
 800662c:	d003      	beq.n	8006636 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800662e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006632:	42a2      	cmp	r2, r4
 8006634:	d10c      	bne.n	8006650 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006636:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006638:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800663c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006640:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006642:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006648:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800664a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800664e:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006650:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006652:	2300      	movs	r3, #0
 8006654:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006658:	4618      	mov	r0, r3
 800665a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800665c:	2002      	movs	r0, #2
}
 800665e:	bd10      	pop	{r4, pc}
 8006660:	40012c00 	.word	0x40012c00

08006664 <HAL_TIMEx_CommutationCallback>:
 8006664:	4770      	bx	lr

08006666 <HAL_TIMEx_BreakCallback>:
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006668:	4770      	bx	lr

0800666a <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800666a:	6803      	ldr	r3, [r0, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006672:	601a      	str	r2, [r3, #0]
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	f022 0201 	bic.w	r2, r2, #1
 800667a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	2320      	movs	r3, #32
 800667e:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	6703      	str	r3, [r0, #112]	; 0x70
 8006686:	4770      	bx	lr

08006688 <HAL_UART_Transmit_DMA>:
{
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4604      	mov	r4, r0
 800668c:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800668e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006692:	2a20      	cmp	r2, #32
 8006694:	d12c      	bne.n	80066f0 <HAL_UART_Transmit_DMA+0x68>
    if((pData == NULL ) || (Size == 0U))
 8006696:	b349      	cbz	r1, 80066ec <HAL_UART_Transmit_DMA+0x64>
 8006698:	b343      	cbz	r3, 80066ec <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800669a:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 800669e:	2a01      	cmp	r2, #1
 80066a0:	d026      	beq.n	80066f0 <HAL_UART_Transmit_DMA+0x68>
 80066a2:	2201      	movs	r2, #1
 80066a4:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066a8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 80066aa:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ae:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b0:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b6:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066ba:	4a0e      	ldr	r2, [pc, #56]	; (80066f4 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 80066bc:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->pTxBuffPtr  = pData;
 80066c0:	6521      	str	r1, [r4, #80]	; 0x50
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066c2:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066c4:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <HAL_UART_Transmit_DMA+0x70>)
 80066c6:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066c8:	4a0c      	ldr	r2, [pc, #48]	; (80066fc <HAL_UART_Transmit_DMA+0x74>)
 80066ca:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80066cc:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 80066ce:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80066d0:	3228      	adds	r2, #40	; 0x28
 80066d2:	f7fb faef 	bl	8001cb4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	2240      	movs	r2, #64	; 0x40
 80066da:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066dc:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80066de:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066e6:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80066e8:	4628      	mov	r0, r5
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80066ec:	2001      	movs	r0, #1
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80066f0:	2002      	movs	r0, #2
}
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	08006703 	.word	0x08006703
 80066f8:	08006733 	.word	0x08006733
 80066fc:	0800673f 	.word	0x0800673f

08006700 <HAL_UART_TxCpltCallback>:
 8006700:	4770      	bx	lr

08006702 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006702:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006704:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006706:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f013 0320 	ands.w	r3, r3, #32
 800670e:	d10b      	bne.n	8006728 <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0U;
 8006710:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
    
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006714:	6813      	ldr	r3, [r2, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800671c:	609a      	str	r2, [r3, #8]
    
    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8006728:	4610      	mov	r0, r2
 800672a:	f7ff ffe9 	bl	8006700 <HAL_UART_TxCpltCallback>
 800672e:	bd08      	pop	{r3, pc}

08006730 <HAL_UART_TxHalfCpltCallback>:
 8006730:	4770      	bx	lr

08006732 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006732:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_TxHalfCpltCallback(huart);
 8006734:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006736:	f7ff fffb 	bl	8006730 <HAL_UART_TxHalfCpltCallback>
 800673a:	bd08      	pop	{r3, pc}

0800673c <HAL_UART_ErrorCallback>:
 800673c:	4770      	bx	lr

0800673e <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800673e:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 8006740:	b508      	push	{r3, lr}
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006742:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
 8006746:	2b21      	cmp	r3, #33	; 0x21
 8006748:	d10d      	bne.n	8006766 <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800674a:	680b      	ldr	r3, [r1, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	0612      	lsls	r2, r2, #24
 8006750:	d509      	bpl.n	8006766 <UART_DMAError+0x28>
  {
    huart->TxXferCount = 0U;
 8006752:	2200      	movs	r2, #0
 8006754:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800675e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006760:	2320      	movs	r3, #32
 8006762:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006766:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 800676a:	2b22      	cmp	r3, #34	; 0x22
 800676c:	d109      	bne.n	8006782 <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800676e:	680b      	ldr	r3, [r1, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	065b      	lsls	r3, r3, #25
 8006774:	d505      	bpl.n	8006782 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800677c:	4608      	mov	r0, r1
 800677e:	f7ff ff74 	bl	800666a <UART_EndRxTransfer>
  }
  
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006782:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8006786:	f043 0310 	orr.w	r3, r3, #16
 800678a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  HAL_UART_ErrorCallback(huart);
 800678e:	4608      	mov	r0, r1
 8006790:	f7ff ffd4 	bl	800673c <HAL_UART_ErrorCallback>
 8006794:	bd08      	pop	{r3, pc}
	...

08006798 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006798:	6802      	ldr	r2, [r0, #0]
 800679a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800679c:	6811      	ldr	r1, [r2, #0]
{
 800679e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80067a0:	071d      	lsls	r5, r3, #28
{
 80067a2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067a4:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 80067a6:	d10b      	bne.n	80067c0 <HAL_UART_IRQHandler+0x28>
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 80067a8:	069e      	lsls	r6, r3, #26
 80067aa:	d577      	bpl.n	800689c <HAL_UART_IRQHandler+0x104>
       && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 80067ac:	068d      	lsls	r5, r1, #26
 80067ae:	d401      	bmi.n	80067b4 <HAL_UART_IRQHandler+0x1c>
           || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 80067b0:	00c6      	lsls	r6, r0, #3
 80067b2:	d573      	bpl.n	800689c <HAL_UART_IRQHandler+0x104>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 80067b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80ac 	beq.w	8006914 <HAL_UART_IRQHandler+0x17c>
 80067bc:	4620      	mov	r0, r4
 80067be:	e061      	b.n	8006884 <HAL_UART_IRQHandler+0xec>
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 80067c0:	4e55      	ldr	r6, [pc, #340]	; (8006918 <HAL_UART_IRQHandler+0x180>)
 80067c2:	4006      	ands	r6, r0
 80067c4:	d102      	bne.n	80067cc <HAL_UART_IRQHandler+0x34>
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
 80067c6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80067ca:	d067      	beq.n	800689c <HAL_UART_IRQHandler+0x104>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067cc:	07dd      	lsls	r5, r3, #31
 80067ce:	d509      	bpl.n	80067e4 <HAL_UART_IRQHandler+0x4c>
 80067d0:	05cd      	lsls	r5, r1, #23
 80067d2:	d507      	bpl.n	80067e4 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067d4:	2501      	movs	r5, #1
 80067d6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067d8:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80067dc:	f045 0501 	orr.w	r5, r5, #1
 80067e0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e4:	079d      	lsls	r5, r3, #30
 80067e6:	d509      	bpl.n	80067fc <HAL_UART_IRQHandler+0x64>
 80067e8:	07c5      	lsls	r5, r0, #31
 80067ea:	d507      	bpl.n	80067fc <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067ec:	2502      	movs	r5, #2
 80067ee:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067f0:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80067f4:	f045 0504 	orr.w	r5, r5, #4
 80067f8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067fc:	075d      	lsls	r5, r3, #29
 80067fe:	d509      	bpl.n	8006814 <HAL_UART_IRQHandler+0x7c>
 8006800:	07c5      	lsls	r5, r0, #31
 8006802:	d507      	bpl.n	8006814 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006804:	2504      	movs	r5, #4
 8006806:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006808:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800680c:	f045 0502 	orr.w	r5, r5, #2
 8006810:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8006814:	071d      	lsls	r5, r3, #28
 8006816:	d509      	bpl.n	800682c <HAL_UART_IRQHandler+0x94>
       &&(  ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 8006818:	068d      	lsls	r5, r1, #26
 800681a:	d400      	bmi.n	800681e <HAL_UART_IRQHandler+0x86>
 800681c:	b136      	cbz	r6, 800682c <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800681e:	2508      	movs	r5, #8
 8006820:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006822:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006826:	432a      	orrs	r2, r5
 8006828:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800682c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006830:	2a00      	cmp	r2, #0
 8006832:	d06f      	beq.n	8006914 <HAL_UART_IRQHandler+0x17c>
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006834:	069e      	lsls	r6, r3, #26
 8006836:	d507      	bpl.n	8006848 <HAL_UART_IRQHandler+0xb0>
         && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006838:	068d      	lsls	r5, r1, #26
 800683a:	d401      	bmi.n	8006840 <HAL_UART_IRQHandler+0xa8>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800683c:	00c0      	lsls	r0, r0, #3
 800683e:	d503      	bpl.n	8006848 <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8006840:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006842:	b10b      	cbz	r3, 8006848 <HAL_UART_IRQHandler+0xb0>
 8006844:	4620      	mov	r0, r4
 8006846:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006848:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800684c:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 800684e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006850:	d404      	bmi.n	800685c <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006856:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800685a:	d01a      	beq.n	8006892 <HAL_UART_IRQHandler+0xfa>
        UART_EndRxTransfer(huart);
 800685c:	f7ff ff05 	bl	800666a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	0652      	lsls	r2, r2, #25
 8006866:	d510      	bpl.n	800688a <HAL_UART_IRQHandler+0xf2>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006868:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800686a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800686c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006870:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006872:	b150      	cbz	r0, 800688a <HAL_UART_IRQHandler+0xf2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006874:	4b29      	ldr	r3, [pc, #164]	; (800691c <HAL_UART_IRQHandler+0x184>)
 8006876:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006878:	f7fb fa5e 	bl	8001d38 <HAL_DMA_Abort_IT>
 800687c:	2800      	cmp	r0, #0
 800687e:	d049      	beq.n	8006914 <HAL_UART_IRQHandler+0x17c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006880:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006882:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8006884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006888:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff ff56 	bl	800673c <HAL_UART_ErrorCallback>
 8006890:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006892:	f7ff ff53 	bl	800673c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006896:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800689a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800689c:	02de      	lsls	r6, r3, #11
 800689e:	d50e      	bpl.n	80068be <HAL_UART_IRQHandler+0x126>
 80068a0:	0245      	lsls	r5, r0, #9
 80068a2:	d50c      	bpl.n	80068be <HAL_UART_IRQHandler+0x126>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068a8:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80068aa:	2320      	movs	r3, #32
 80068ac:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_UARTEx_WakeupCallback(huart);
 80068b0:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80068b2:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
}
 80068b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80068ba:	f000 bb63 	b.w	8006f84 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET) 
 80068be:	061e      	lsls	r6, r3, #24
 80068c0:	d505      	bpl.n	80068ce <HAL_UART_IRQHandler+0x136>
     && (   ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 80068c2:	060d      	lsls	r5, r1, #24
 80068c4:	d401      	bmi.n	80068ca <HAL_UART_IRQHandler+0x132>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 80068c6:	0200      	lsls	r0, r0, #8
 80068c8:	d501      	bpl.n	80068ce <HAL_UART_IRQHandler+0x136>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80068ca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80068cc:	e773      	b.n	80067b6 <HAL_UART_IRQHandler+0x1e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068ce:	065e      	lsls	r6, r3, #25
 80068d0:	d50e      	bpl.n	80068f0 <HAL_UART_IRQHandler+0x158>
 80068d2:	064d      	lsls	r5, r1, #25
 80068d4:	d50c      	bpl.n	80068f0 <HAL_UART_IRQHandler+0x158>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068d6:	6813      	ldr	r3, [r2, #0]
 80068d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068dc:	6013      	str	r3, [r2, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068de:	2320      	movs	r3, #32
 80068e0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	6763      	str	r3, [r4, #116]	; 0x74
  
  HAL_UART_TxCpltCallback(huart);
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7ff ff09 	bl	8006700 <HAL_UART_TxCpltCallback>
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 80068f0:	0218      	lsls	r0, r3, #8
 80068f2:	d506      	bpl.n	8006902 <HAL_UART_IRQHandler+0x16a>
 80068f4:	004a      	lsls	r2, r1, #1
 80068f6:	d504      	bpl.n	8006902 <HAL_UART_IRQHandler+0x16a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068f8:	4620      	mov	r0, r4
}
 80068fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068fe:	f000 bb43 	b.w	8006f88 <HAL_UARTEx_TxFifoEmptyCallback>
  if(((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 8006902:	01db      	lsls	r3, r3, #7
 8006904:	d506      	bpl.n	8006914 <HAL_UART_IRQHandler+0x17c>
 8006906:	2900      	cmp	r1, #0
 8006908:	da04      	bge.n	8006914 <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800690a:	4620      	mov	r0, r4
}
 800690c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006910:	f000 bb39 	b.w	8006f86 <HAL_UARTEx_RxFifoFullCallback>
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	bf00      	nop
 8006918:	10000001 	.word	0x10000001
 800691c:	08006921 	.word	0x08006921

08006920 <UART_DMAAbortOnError>:
{
 8006920:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006922:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800692a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800692e:	f7ff ff05 	bl	800673c <HAL_UART_ErrorCallback>
 8006932:	bd08      	pop	{r3, pc}

08006934 <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 8006934:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006936:	69c1      	ldr	r1, [r0, #28]
 8006938:	6882      	ldr	r2, [r0, #8]
{
 800693a:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800693e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006940:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006942:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006944:	4302      	orrs	r2, r0
 8006946:	6960      	ldr	r0, [r4, #20]
 8006948:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800694a:	48bd      	ldr	r0, [pc, #756]	; (8006c40 <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800694c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800694e:	4028      	ands	r0, r5
 8006950:	4302      	orrs	r2, r0
 8006952:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	68e0      	ldr	r0, [r4, #12]
 8006958:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800695c:	4302      	orrs	r2, r0
 800695e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006960:	4ab8      	ldr	r2, [pc, #736]	; (8006c44 <UART_SetConfig+0x310>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006962:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006964:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8006966:	bf1c      	itt	ne
 8006968:	6a22      	ldrne	r2, [r4, #32]
 800696a:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006972:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006976:	4302      	orrs	r2, r0
 8006978:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800697a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800697c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800697e:	f020 000f 	bic.w	r0, r0, #15
 8006982:	4310      	orrs	r0, r2
 8006984:	62d8      	str	r0, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006986:	48b0      	ldr	r0, [pc, #704]	; (8006c48 <UART_SetConfig+0x314>)
 8006988:	4283      	cmp	r3, r0
 800698a:	d117      	bne.n	80069bc <UART_SetConfig+0x88>
 800698c:	4baf      	ldr	r3, [pc, #700]	; (8006c4c <UART_SetConfig+0x318>)
 800698e:	48b0      	ldr	r0, [pc, #704]	; (8006c50 <UART_SetConfig+0x31c>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	5cc3      	ldrb	r3, [r0, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800699a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800699e:	f040 81a7 	bne.w	8006cf0 <UART_SetConfig+0x3bc>
    switch (clocksource)
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d849      	bhi.n	8006a3a <UART_SetConfig+0x106>
 80069a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80069aa:	017f      	.short	0x017f
 80069ac:	016800d0 	.word	0x016800d0
 80069b0:	01780048 	.word	0x01780048
 80069b4:	00480048 	.word	0x00480048
 80069b8:	002d0048 	.word	0x002d0048
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069bc:	48a5      	ldr	r0, [pc, #660]	; (8006c54 <UART_SetConfig+0x320>)
 80069be:	4283      	cmp	r3, r0
 80069c0:	d106      	bne.n	80069d0 <UART_SetConfig+0x9c>
 80069c2:	4ba2      	ldr	r3, [pc, #648]	; (8006c4c <UART_SetConfig+0x318>)
 80069c4:	48a4      	ldr	r0, [pc, #656]	; (8006c58 <UART_SetConfig+0x324>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	f003 030c 	and.w	r3, r3, #12
 80069ce:	e7e3      	b.n	8006998 <UART_SetConfig+0x64>
 80069d0:	48a2      	ldr	r0, [pc, #648]	; (8006c5c <UART_SetConfig+0x328>)
 80069d2:	4283      	cmp	r3, r0
 80069d4:	d11d      	bne.n	8006a12 <UART_SetConfig+0xde>
 80069d6:	4b9d      	ldr	r3, [pc, #628]	; (8006c4c <UART_SetConfig+0x318>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	f000 8157 	beq.w	8006c94 <UART_SetConfig+0x360>
 80069e6:	d804      	bhi.n	80069f2 <UART_SetConfig+0xbe>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8159 	beq.w	8006ca0 <UART_SetConfig+0x36c>
 80069ee:	2310      	movs	r3, #16
 80069f0:	e7d3      	b.n	800699a <UART_SetConfig+0x66>
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	f000 813e 	beq.w	8006c74 <UART_SetConfig+0x340>
 80069f8:	2b30      	cmp	r3, #48	; 0x30
 80069fa:	d1f8      	bne.n	80069ee <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069fc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006a00:	f040 80d0 	bne.w	8006ba4 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a04:	4b96      	ldr	r3, [pc, #600]	; (8006c60 <UART_SetConfig+0x32c>)
 8006a06:	6861      	ldr	r1, [r4, #4]
 8006a08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a10:	e138      	b.n	8006c84 <UART_SetConfig+0x350>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a12:	4894      	ldr	r0, [pc, #592]	; (8006c64 <UART_SetConfig+0x330>)
 8006a14:	4283      	cmp	r3, r0
 8006a16:	d12d      	bne.n	8006a74 <UART_SetConfig+0x140>
 8006a18:	f500 30e2 	add.w	r0, r0, #115712	; 0x1c400
 8006a1c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006a20:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8006a24:	2840      	cmp	r0, #64	; 0x40
 8006a26:	f000 80fd 	beq.w	8006c24 <UART_SetConfig+0x2f0>
 8006a2a:	d812      	bhi.n	8006a52 <UART_SetConfig+0x11e>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f000 80c0 	beq.w	8006bb2 <UART_SetConfig+0x27e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a32:	4884      	ldr	r0, [pc, #528]	; (8006c44 <UART_SetConfig+0x310>)
 8006a34:	4283      	cmp	r3, r0
 8006a36:	f040 8156 	bne.w	8006ce6 <UART_SetConfig+0x3b2>
      ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
  huart->NbTxDataToProcess = 1;
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  huart->NbRxDataToProcess = 1;
 8006a42:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  huart->RxISR = NULL;
 8006a46:	2200      	movs	r2, #0
 8006a48:	6722      	str	r2, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006a4a:	6762      	str	r2, [r4, #116]	; 0x74
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a52:	2880      	cmp	r0, #128	; 0x80
 8006a54:	f000 80bb 	beq.w	8006bce <UART_SetConfig+0x29a>
 8006a58:	28c0      	cmp	r0, #192	; 0xc0
 8006a5a:	d1ea      	bne.n	8006a32 <UART_SetConfig+0xfe>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a5c:	4879      	ldr	r0, [pc, #484]	; (8006c44 <UART_SetConfig+0x310>)
 8006a5e:	4283      	cmp	r3, r0
 8006a60:	d1cc      	bne.n	80069fc <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a62:	4b7f      	ldr	r3, [pc, #508]	; (8006c60 <UART_SetConfig+0x32c>)
 8006a64:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      break;
 8006a6c:	2208      	movs	r2, #8
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a6e:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8006a72:	e0aa      	b.n	8006bca <UART_SetConfig+0x296>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a74:	487c      	ldr	r0, [pc, #496]	; (8006c68 <UART_SetConfig+0x334>)
 8006a76:	4283      	cmp	r3, r0
 8006a78:	d111      	bne.n	8006a9e <UART_SetConfig+0x16a>
 8006a7a:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
 8006a7e:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006a82:	f400 7040 	and.w	r0, r0, #768	; 0x300
 8006a86:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006a8a:	f000 80cb 	beq.w	8006c24 <UART_SetConfig+0x2f0>
 8006a8e:	d9cd      	bls.n	8006a2c <UART_SetConfig+0xf8>
 8006a90:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006a94:	f000 809b 	beq.w	8006bce <UART_SetConfig+0x29a>
 8006a98:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8006a9c:	e7dd      	b.n	8006a5a <UART_SetConfig+0x126>
 8006a9e:	4869      	ldr	r0, [pc, #420]	; (8006c44 <UART_SetConfig+0x310>)
 8006aa0:	4283      	cmp	r3, r0
 8006aa2:	d1a4      	bne.n	80069ee <UART_SetConfig+0xba>
 8006aa4:	f500 30c8 	add.w	r0, r0, #102400	; 0x19000
 8006aa8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006aac:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 8006ab0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006ab4:	f000 80b6 	beq.w	8006c24 <UART_SetConfig+0x2f0>
 8006ab8:	d9b8      	bls.n	8006a2c <UART_SetConfig+0xf8>
 8006aba:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006abe:	f000 8086 	beq.w	8006bce <UART_SetConfig+0x29a>
 8006ac2:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8006ac6:	e7c8      	b.n	8006a5a <UART_SetConfig+0x126>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ac8:	f7fd fdc8 	bl	800465c <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006acc:	4b64      	ldr	r3, [pc, #400]	; (8006c60 <UART_SetConfig+0x32c>)
 8006ace:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ad0:	6865      	ldr	r5, [r4, #4]
 8006ad2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e005      	b.n	8006ae6 <UART_SetConfig+0x1b2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ada:	4b61      	ldr	r3, [pc, #388]	; (8006c60 <UART_SetConfig+0x32c>)
 8006adc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ade:	4863      	ldr	r0, [pc, #396]	; (8006c6c <UART_SetConfig+0x338>)
 8006ae0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006ae4:	2300      	movs	r3, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	f7fa f8e2 	bl	8000cb0 <__aeabi_uldivmod>
 8006aec:	020f      	lsls	r7, r1, #8
 8006aee:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006af2:	0206      	lsls	r6, r0, #8
 8006af4:	0868      	lsrs	r0, r5, #1
 8006af6:	eb16 0b00 	adds.w	fp, r6, r0
 8006afa:	f147 0c00 	adc.w	ip, r7, #0
 8006afe:	462a      	mov	r2, r5
 8006b00:	2300      	movs	r3, #0
 8006b02:	4658      	mov	r0, fp
 8006b04:	4661      	mov	r1, ip
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b06:	f7fa f8d3 	bl	8000cb0 <__aeabi_uldivmod>
          break;
 8006b0a:	2300      	movs	r3, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0c:	4a58      	ldr	r2, [pc, #352]	; (8006c70 <UART_SetConfig+0x33c>)
 8006b0e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006b12:	4291      	cmp	r1, r2
 8006b14:	d891      	bhi.n	8006a3a <UART_SetConfig+0x106>
          huart->Instance->BRR = usartdiv;
 8006b16:	6822      	ldr	r2, [r4, #0]
 8006b18:	60d0      	str	r0, [r2, #12]
 8006b1a:	e78f      	b.n	8006a3c <UART_SetConfig+0x108>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b1c:	f7fd f9fe 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8006b20:	e7d4      	b.n	8006acc <UART_SetConfig+0x198>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b24:	4b4e      	ldr	r3, [pc, #312]	; (8006c60 <UART_SetConfig+0x32c>)
 8006b26:	0868      	lsrs	r0, r5, #1
 8006b28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	462a      	mov	r2, r5
 8006b30:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006b34:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8006b38:	fbb6 f6f3 	udiv	r6, r6, r3
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	fbe6 0105 	umlal	r0, r1, r6, r5
 8006b42:	e7e0      	b.n	8006b06 <UART_SetConfig+0x1d2>
          ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006b46:	2000      	movs	r0, #0
 8006b48:	e7e0      	b.n	8006b0c <UART_SetConfig+0x1d8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4a:	f7fd fd99 	bl	8004680 <HAL_RCC_GetPCLK2Freq>
 8006b4e:	e0ad      	b.n	8006cac <UART_SetConfig+0x378>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b50:	f7fd fd84 	bl	800465c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b54:	6862      	ldr	r2, [r4, #4]
 8006b56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b58:	4b41      	ldr	r3, [pc, #260]	; (8006c60 <UART_SetConfig+0x32c>)
 8006b5a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006b5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b62:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8006b66:	fbb0 f0f2 	udiv	r0, r0, r2
 8006b6a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b6c:	f1a0 0210 	sub.w	r2, r0, #16
 8006b70:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006b74:	429a      	cmp	r2, r3
 8006b76:	f63f af60 	bhi.w	8006a3a <UART_SetConfig+0x106>
      huart->Instance->BRR = usartdiv;
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	60d8      	str	r0, [r3, #12]
 8006b7e:	e0b0      	b.n	8006ce2 <UART_SetConfig+0x3ae>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b80:	f7fd fd7e 	bl	8004680 <HAL_RCC_GetPCLK2Freq>
 8006b84:	e7e6      	b.n	8006b54 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b86:	4936      	ldr	r1, [pc, #216]	; (8006c60 <UART_SetConfig+0x32c>)
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006b8e:	4837      	ldr	r0, [pc, #220]	; (8006c6c <UART_SetConfig+0x338>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b90:	fbb0 f0f2 	udiv	r0, r0, r2
 8006b94:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006b98:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b9c:	e7e5      	b.n	8006b6a <UART_SetConfig+0x236>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9e:	f7fd f9bd 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8006ba2:	e7d7      	b.n	8006b54 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ba4:	492e      	ldr	r1, [pc, #184]	; (8006c60 <UART_SetConfig+0x32c>)
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006bac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006bb0:	e7ee      	b.n	8006b90 <UART_SetConfig+0x25c>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006bb2:	4a24      	ldr	r2, [pc, #144]	; (8006c44 <UART_SetConfig+0x310>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d173      	bne.n	8006ca0 <UART_SetConfig+0x36c>
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bb8:	f7fd fd50 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 8006bbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006bbe:	4b28      	ldr	r3, [pc, #160]	; (8006c60 <UART_SetConfig+0x32c>)
 8006bc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006bc4:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006bc8:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8006bca:	b953      	cbnz	r3, 8006be2 <UART_SetConfig+0x2ae>
 8006bcc:	e736      	b.n	8006a3c <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006bce:	481d      	ldr	r0, [pc, #116]	; (8006c44 <UART_SetConfig+0x310>)
 8006bd0:	4283      	cmp	r3, r0
 8006bd2:	d14f      	bne.n	8006c74 <UART_SetConfig+0x340>
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bd4:	4b22      	ldr	r3, [pc, #136]	; (8006c60 <UART_SetConfig+0x32c>)
 8006bd6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006bda:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <UART_SetConfig+0x338>)
 8006bdc:	fbb3 f3f0 	udiv	r3, r3, r0
 8006be0:	2202      	movs	r2, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8006be2:	6865      	ldr	r5, [r4, #4]
 8006be4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006be8:	4299      	cmp	r1, r3
 8006bea:	f63f af26 	bhi.w	8006a3a <UART_SetConfig+0x106>
 8006bee:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006bf2:	f63f af22 	bhi.w	8006a3a <UART_SetConfig+0x106>
        switch (clocksource)
 8006bf6:	2a08      	cmp	r2, #8
 8006bf8:	d8a4      	bhi.n	8006b44 <UART_SetConfig+0x210>
 8006bfa:	a301      	add	r3, pc, #4	; (adr r3, 8006c00 <UART_SetConfig+0x2cc>)
 8006bfc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006c00:	08006ac9 	.word	0x08006ac9
 8006c04:	08006b45 	.word	0x08006b45
 8006c08:	08006adb 	.word	0x08006adb
 8006c0c:	08006b45 	.word	0x08006b45
 8006c10:	08006b1d 	.word	0x08006b1d
 8006c14:	08006b45 	.word	0x08006b45
 8006c18:	08006b45 	.word	0x08006b45
 8006c1c:	08006b45 	.word	0x08006b45
 8006c20:	08006b23 	.word	0x08006b23
  if(UART_INSTANCE_LOWPOWER(huart))
 8006c24:	4a07      	ldr	r2, [pc, #28]	; (8006c44 <UART_SetConfig+0x310>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d134      	bne.n	8006c94 <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c2a:	f7fd f977 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8006c2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <UART_SetConfig+0x32c>)
 8006c32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c36:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	e7c5      	b.n	8006bca <UART_SetConfig+0x296>
 8006c3e:	bf00      	nop
 8006c40:	cfff69f3 	.word	0xcfff69f3
 8006c44:	40008000 	.word	0x40008000
 8006c48:	40013800 	.word	0x40013800
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	080245c0 	.word	0x080245c0
 8006c54:	40004400 	.word	0x40004400
 8006c58:	080245c4 	.word	0x080245c4
 8006c5c:	40004800 	.word	0x40004800
 8006c60:	080245d2 	.word	0x080245d2
 8006c64:	40004c00 	.word	0x40004c00
 8006c68:	40005000 	.word	0x40005000
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	000ffcff 	.word	0x000ffcff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c74:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c78:	d185      	bne.n	8006b86 <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c7a:	4b29      	ldr	r3, [pc, #164]	; (8006d20 <UART_SetConfig+0x3ec>)
 8006c7c:	6861      	ldr	r1, [r4, #4]
 8006c7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c82:	4828      	ldr	r0, [pc, #160]	; (8006d24 <UART_SetConfig+0x3f0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c88:	0848      	lsrs	r0, r1, #1
 8006c8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006c8e:	fbb0 f0f1 	udiv	r0, r0, r1
 8006c92:	e017      	b.n	8006cc4 <UART_SetConfig+0x390>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c98:	d181      	bne.n	8006b9e <UART_SetConfig+0x26a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9a:	f7fd f93f 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8006c9e:	e005      	b.n	8006cac <UART_SetConfig+0x378>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006ca4:	f47f af54 	bne.w	8006b50 <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca8:	f7fd fcd8 	bl	800465c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cac:	6862      	ldr	r2, [r4, #4]
 8006cae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cb0:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <UART_SetConfig+0x3ec>)
 8006cb2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cba:	0850      	lsrs	r0, r2, #1
 8006cbc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006cc0:	fbb0 f0f2 	udiv	r0, r0, r2
 8006cc4:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc6:	f1a0 0210 	sub.w	r2, r0, #16
 8006cca:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	f63f aeb3 	bhi.w	8006a3a <UART_SetConfig+0x106>
      brrtemp = usartdiv & 0xFFF0U;
 8006cd4:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8006cd8:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cda:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8006cde:	4318      	orrs	r0, r3
 8006ce0:	60d0      	str	r0, [r2, #12]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e6aa      	b.n	8006a3c <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006cea:	f43f aea6 	beq.w	8006a3a <UART_SetConfig+0x106>
 8006cee:	2310      	movs	r3, #16
    switch (clocksource)
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	f63f aea2 	bhi.w	8006a3a <UART_SetConfig+0x106>
 8006cf6:	a101      	add	r1, pc, #4	; (adr r1, 8006cfc <UART_SetConfig+0x3c8>)
 8006cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cfc:	08006b51 	.word	0x08006b51
 8006d00:	08006b81 	.word	0x08006b81
 8006d04:	08006b87 	.word	0x08006b87
 8006d08:	08006a3b 	.word	0x08006a3b
 8006d0c:	08006b9f 	.word	0x08006b9f
 8006d10:	08006a3b 	.word	0x08006a3b
 8006d14:	08006a3b 	.word	0x08006a3b
 8006d18:	08006a3b 	.word	0x08006a3b
 8006d1c:	08006ba5 	.word	0x08006ba5
 8006d20:	080245d2 	.word	0x080245d2
 8006d24:	00f42400 	.word	0x00f42400

08006d28 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d2a:	07da      	lsls	r2, r3, #31
{
 8006d2c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d2e:	d506      	bpl.n	8006d3e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d30:	6801      	ldr	r1, [r0, #0]
 8006d32:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006d34:	684a      	ldr	r2, [r1, #4]
 8006d36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006d3a:	4322      	orrs	r2, r4
 8006d3c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d3e:	079c      	lsls	r4, r3, #30
 8006d40:	d506      	bpl.n	8006d50 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d42:	6801      	ldr	r1, [r0, #0]
 8006d44:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006d46:	684a      	ldr	r2, [r1, #4]
 8006d48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d4c:	4322      	orrs	r2, r4
 8006d4e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d50:	0759      	lsls	r1, r3, #29
 8006d52:	d506      	bpl.n	8006d62 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d54:	6801      	ldr	r1, [r0, #0]
 8006d56:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006d58:	684a      	ldr	r2, [r1, #4]
 8006d5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d5e:	4322      	orrs	r2, r4
 8006d60:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d62:	071a      	lsls	r2, r3, #28
 8006d64:	d506      	bpl.n	8006d74 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d66:	6801      	ldr	r1, [r0, #0]
 8006d68:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006d6a:	684a      	ldr	r2, [r1, #4]
 8006d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d70:	4322      	orrs	r2, r4
 8006d72:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	06dc      	lsls	r4, r3, #27
 8006d76:	d506      	bpl.n	8006d86 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d78:	6801      	ldr	r1, [r0, #0]
 8006d7a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006d7c:	688a      	ldr	r2, [r1, #8]
 8006d7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d82:	4322      	orrs	r2, r4
 8006d84:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d86:	0699      	lsls	r1, r3, #26
 8006d88:	d506      	bpl.n	8006d98 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d8a:	6801      	ldr	r1, [r0, #0]
 8006d8c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006d8e:	688a      	ldr	r2, [r1, #8]
 8006d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d94:	4322      	orrs	r2, r4
 8006d96:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d98:	065a      	lsls	r2, r3, #25
 8006d9a:	d50f      	bpl.n	8006dbc <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d9c:	6801      	ldr	r1, [r0, #0]
 8006d9e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006da0:	684a      	ldr	r2, [r1, #4]
 8006da2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006da6:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006da8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dac:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dae:	d105      	bne.n	8006dbc <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006db0:	684a      	ldr	r2, [r1, #4]
 8006db2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006db4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006db8:	4322      	orrs	r2, r4
 8006dba:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dbc:	061b      	lsls	r3, r3, #24
 8006dbe:	d506      	bpl.n	8006dce <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dc0:	6802      	ldr	r2, [r0, #0]
 8006dc2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006dc4:	6853      	ldr	r3, [r2, #4]
 8006dc6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	6053      	str	r3, [r2, #4]
 8006dce:	bd10      	pop	{r4, pc}

08006dd0 <UART_WaitOnFlagUntilTimeout>:
{
 8006dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd4:	9d06      	ldr	r5, [sp, #24]
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	4616      	mov	r6, r2
 8006ddc:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dde:	6821      	ldr	r1, [r4, #0]
 8006de0:	69ca      	ldr	r2, [r1, #28]
 8006de2:	ea37 0302 	bics.w	r3, r7, r2
 8006de6:	bf0c      	ite	eq
 8006de8:	2201      	moveq	r2, #1
 8006dea:	2200      	movne	r2, #0
 8006dec:	42b2      	cmp	r2, r6
 8006dee:	d002      	beq.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006df0:	2000      	movs	r0, #0
}
 8006df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8006df6:	1c6b      	adds	r3, r5, #1
 8006df8:	d0f2      	beq.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006dfa:	b99d      	cbnz	r5, 8006e24 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006e0e:	2320      	movs	r3, #32
 8006e10:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        huart->RxState = HAL_UART_STATE_READY;
 8006e14:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
        __HAL_UNLOCK(huart);
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8006e1e:	2003      	movs	r0, #3
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006e24:	f7fa f8fc 	bl	8001020 <HAL_GetTick>
 8006e28:	eba0 0008 	sub.w	r0, r0, r8
 8006e2c:	4285      	cmp	r5, r0
 8006e2e:	d2d6      	bcs.n	8006dde <UART_WaitOnFlagUntilTimeout+0xe>
 8006e30:	e7e4      	b.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x2c>

08006e32 <UART_CheckIdleState>:
{
 8006e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e34:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e36:	2600      	movs	r6, #0
 8006e38:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8006e3c:	f7fa f8f0 	bl	8001020 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8006e46:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e48:	d417      	bmi.n	8006e7a <UART_CheckIdleState+0x48>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	075b      	lsls	r3, r3, #29
 8006e50:	d50a      	bpl.n	8006e68 <UART_CheckIdleState+0x36>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7ff ffb5 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8006e66:	b9a0      	cbnz	r0, 8006e92 <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 8006e68:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006e6a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8006e6c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006e70:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState= HAL_UART_STATE_READY;
 8006e74:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
  return HAL_OK;
 8006e78:	e00c      	b.n	8006e94 <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	4632      	mov	r2, r6
 8006e82:	4603      	mov	r3, r0
 8006e84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f7ff ffa1 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d0db      	beq.n	8006e4a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006e92:	2003      	movs	r0, #3
}
 8006e94:	b002      	add	sp, #8
 8006e96:	bd70      	pop	{r4, r5, r6, pc}

08006e98 <HAL_UART_Init>:
{
 8006e98:	b510      	push	{r4, lr}
  if(huart == NULL)
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	b360      	cbz	r0, 8006ef8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8006e9e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006ea2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ea6:	b91b      	cbnz	r3, 8006eb0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006ea8:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006eac:	f018 f882 	bl	801efb4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006eb0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006eb2:	2324      	movs	r3, #36	; 0x24
 8006eb4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 8006eb8:	6813      	ldr	r3, [r2, #0]
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f7ff fd37 	bl	8006934 <UART_SetConfig>
 8006ec6:	2801      	cmp	r0, #1
 8006ec8:	d016      	beq.n	8006ef8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ecc:	b113      	cbz	r3, 8006ed4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff ff2a 	bl	8006d28 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006edc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ee4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006eec:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006eee:	601a      	str	r2, [r3, #0]
}
 8006ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006ef4:	f7ff bf9d 	b.w	8006e32 <UART_CheckIdleState>
}
 8006ef8:	2001      	movs	r0, #1
 8006efa:	bd10      	pop	{r4, pc}

08006efc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006efe:	2203      	movs	r2, #3
 8006f00:	f88d 2003 	strb.w	r2, [sp, #3]
 8006f04:	2207      	movs	r2, #7
 8006f06:	f88d 2004 	strb.w	r2, [sp, #4]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	f88d 2008 	strb.w	r2, [sp, #8]
 8006f10:	f88d 200c 	strb.w	r2, [sp, #12]
  
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f14:	6e82      	ldr	r2, [r0, #104]	; 0x68
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006f16:	2301      	movs	r3, #1
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006f18:	2104      	movs	r1, #4
 8006f1a:	2402      	movs	r4, #2
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006f1c:	f88d 3000 	strb.w	r3, [sp]
 8006f20:	f88d 3001 	strb.w	r3, [sp, #1]
 8006f24:	f88d 3002 	strb.w	r3, [sp, #2]
 8006f28:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006f2c:	f88d 1009 	strb.w	r1, [sp, #9]
 8006f30:	f88d 400a 	strb.w	r4, [sp, #10]
 8006f34:	f88d 100b 	strb.w	r1, [sp, #11]
 8006f38:	f88d 300d 	strb.w	r3, [sp, #13]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f3c:	b92a      	cbnz	r2, 8006f4a <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1;
 8006f3e:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    rx_fifo_depth = 8; /* RX Fifo size */
    tx_fifo_depth = 8; /* TX Fifo size */
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006f42:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  }
}
 8006f46:	b004      	add	sp, #16
 8006f48:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f4a:	6803      	ldr	r3, [r0, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f4e:	6899      	ldr	r1, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006f50:	ab04      	add	r3, sp, #16
 8006f52:	eb03 7151 	add.w	r1, r3, r1, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006f56:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006f5a:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 8006f5e:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f6a:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006f6e:	ab04      	add	r3, sp, #16
 8006f70:	441a      	add	r2, r3
 8006f72:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8006f76:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f82:	e7de      	b.n	8006f42 <UARTEx_SetNbDataToProcess+0x46>

08006f84 <HAL_UARTEx_WakeupCallback>:
 8006f84:	4770      	bx	lr

08006f86 <HAL_UARTEx_RxFifoFullCallback>:
 8006f86:	4770      	bx	lr

08006f88 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8006f88:	4770      	bx	lr

08006f8a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006f8a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006f8c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006f90:	2b01      	cmp	r3, #1
{
 8006f92:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006f94:	d01b      	beq.n	8006fce <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8006f96:	2301      	movs	r3, #1
 8006f98:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006f9c:	2324      	movs	r3, #36	; 0x24
 8006f9e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa2:	6803      	ldr	r3, [r0, #0]
 8006fa4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006fb4:	4311      	orrs	r1, r2
 8006fb6:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006fb8:	f7ff ffa0 	bl	8006efc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fbc:	6803      	ldr	r3, [r0, #0]
 8006fbe:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006fce:	2002      	movs	r0, #2
}
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}

08006fd2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006fd2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006fd4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006fd8:	2b01      	cmp	r3, #1
{
 8006fda:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006fdc:	d01b      	beq.n	8007016 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006fe4:	2324      	movs	r3, #36	; 0x24
 8006fe6:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fea:	6803      	ldr	r3, [r0, #0]
 8006fec:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	f022 0201 	bic.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8006ffc:	4311      	orrs	r1, r2
 8006ffe:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007000:	f7ff ff7c 	bl	8006efc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007004:	6803      	ldr	r3, [r0, #0]
 8007006:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007008:	2320      	movs	r3, #32
 800700a:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 800700e:	2000      	movs	r0, #0
 8007010:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8007014:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007016:	2002      	movs	r0, #2
}
 8007018:	bd38      	pop	{r3, r4, r5, pc}
	...

0800701c <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800701c:	4b11      	ldr	r3, [pc, #68]	; (8007064 <SDMMC_GetCmdResp2+0x48>)
 800701e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	fbb3 f2f2 	udiv	r2, r3, r2
 8007028:	f241 3388 	movw	r3, #5000	; 0x1388
 800702c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800702e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007032:	d313      	bcc.n	800705c <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007034:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007036:	f012 0f45 	tst.w	r2, #69	; 0x45
 800703a:	d0f8      	beq.n	800702e <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800703c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800703e:	075b      	lsls	r3, r3, #29
 8007040:	d503      	bpl.n	800704a <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007042:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007044:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8007046:	4618      	mov	r0, r3
 8007048:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800704a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800704c:	f013 0301 	ands.w	r3, r3, #1
 8007050:	d001      	beq.n	8007056 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007052:	2301      	movs	r3, #1
 8007054:	e7f6      	b.n	8007044 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007056:	4a04      	ldr	r2, [pc, #16]	; (8007068 <SDMMC_GetCmdResp2+0x4c>)
 8007058:	6382      	str	r2, [r0, #56]	; 0x38
 800705a:	e7f4      	b.n	8007046 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800705c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007060:	e7f1      	b.n	8007046 <SDMMC_GetCmdResp2+0x2a>
 8007062:	bf00      	nop
 8007064:	20000ec4 	.word	0x20000ec4
 8007068:	002000c5 	.word	0x002000c5

0800706c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800706c:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <SDMMC_GetCmdResp3+0x3c>)
 800706e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	fbb3 f2f2 	udiv	r2, r3, r2
 8007078:	f241 3388 	movw	r3, #5000	; 0x1388
 800707c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800707e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007082:	d30d      	bcc.n	80070a0 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007084:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007086:	f012 0f45 	tst.w	r2, #69	; 0x45
 800708a:	d0f8      	beq.n	800707e <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800708c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800708e:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007092:	bf15      	itete	ne
 8007094:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007096:	4a05      	ldreq	r2, [pc, #20]	; (80070ac <SDMMC_GetCmdResp3+0x40>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007098:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800709a:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800709c:	4618      	mov	r0, r3
 800709e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80070a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000ec4 	.word	0x20000ec4
 80070ac:	002000c5 	.word	0x002000c5

080070b0 <SDMMC_Init>:
{
 80070b0:	b084      	sub	sp, #16
 80070b2:	b510      	push	{r4, lr}
 80070b4:	ac03      	add	r4, sp, #12
 80070b6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80070ba:	9a04      	ldr	r2, [sp, #16]
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	6841      	ldr	r1, [r0, #4]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	9a05      	ldr	r2, [sp, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	9a06      	ldr	r2, [sp, #24]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	9a07      	ldr	r2, [sp, #28]
}
 80070cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80070d0:	4313      	orrs	r3, r2
 80070d2:	4a03      	ldr	r2, [pc, #12]	; (80070e0 <SDMMC_Init+0x30>)
 80070d4:	400a      	ands	r2, r1
 80070d6:	4313      	orrs	r3, r2
 80070d8:	6043      	str	r3, [r0, #4]
}
 80070da:	b004      	add	sp, #16
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr
 80070e0:	fffc2c00 	.word	0xfffc2c00

080070e4 <SDMMC_ReadFIFO>:
 80070e4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80070e8:	4770      	bx	lr

080070ea <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 80070ea:	680b      	ldr	r3, [r1, #0]
 80070ec:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80070f0:	2000      	movs	r0, #0
 80070f2:	4770      	bx	lr

080070f4 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80070f4:	6803      	ldr	r3, [r0, #0]
 80070f6:	f043 0303 	orr.w	r3, r3, #3
 80070fa:	6003      	str	r3, [r0, #0]
}
 80070fc:	2000      	movs	r0, #0
 80070fe:	4770      	bx	lr

08007100 <SDMMC_PowerState_OFF>:
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8007100:	6803      	ldr	r3, [r0, #0]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	6003      	str	r3, [r0, #0]
}
 8007108:	2000      	movs	r0, #0
 800710a:	4770      	bx	lr

0800710c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800710c:	6800      	ldr	r0, [r0, #0]
}
 800710e:	f000 0003 	and.w	r0, r0, #3
 8007112:	4770      	bx	lr

08007114 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8007114:	680b      	ldr	r3, [r1, #0]
 8007116:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007118:	68c2      	ldr	r2, [r0, #12]
 800711a:	4b06      	ldr	r3, [pc, #24]	; (8007134 <SDMMC_SendCommand+0x20>)
 800711c:	4013      	ands	r3, r2
 800711e:	684a      	ldr	r2, [r1, #4]
 8007120:	4313      	orrs	r3, r2
 8007122:	688a      	ldr	r2, [r1, #8]
 8007124:	4313      	orrs	r3, r2
 8007126:	68ca      	ldr	r2, [r1, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	690a      	ldr	r2, [r1, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	60c3      	str	r3, [r0, #12]
}
 8007130:	2000      	movs	r0, #0
 8007132:	4770      	bx	lr
 8007134:	fffee0c0 	.word	0xfffee0c0

08007138 <SDMMC_GetResponse>:
{
 8007138:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800713a:	3014      	adds	r0, #20
 800713c:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007142:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8007144:	9b01      	ldr	r3, [sp, #4]
 8007146:	6818      	ldr	r0, [r3, #0]
}  
 8007148:	b002      	add	sp, #8
 800714a:	4770      	bx	lr

0800714c <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800714c:	4b44      	ldr	r3, [pc, #272]	; (8007260 <SDMMC_GetCmdResp1+0x114>)
{
 800714e:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8007156:	fbb3 f3f4 	udiv	r3, r3, r4
 800715a:	435a      	muls	r2, r3
    if (count-- == 0)
 800715c:	2a00      	cmp	r2, #0
 800715e:	d049      	beq.n	80071f4 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007160:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007162:	f013 0f45 	tst.w	r3, #69	; 0x45
 8007166:	f102 32ff 	add.w	r2, r2, #4294967295
 800716a:	d0f7      	beq.n	800715c <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800716c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800716e:	075c      	lsls	r4, r3, #29
 8007170:	d503      	bpl.n	800717a <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007172:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007174:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007176:	4618      	mov	r0, r3
 8007178:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800717a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800717c:	f013 0301 	ands.w	r3, r3, #1
 8007180:	d001      	beq.n	8007186 <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007182:	2301      	movs	r3, #1
 8007184:	e7f6      	b.n	8007174 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007186:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	4291      	cmp	r1, r2
 800718c:	d135      	bne.n	80071fa <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800718e:	4a35      	ldr	r2, [pc, #212]	; (8007264 <SDMMC_GetCmdResp1+0x118>)
 8007190:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007192:	4619      	mov	r1, r3
 8007194:	f7ff ffd0 	bl	8007138 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007198:	4b33      	ldr	r3, [pc, #204]	; (8007268 <SDMMC_GetCmdResp1+0x11c>)
 800719a:	4003      	ands	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0ea      	beq.n	8007176 <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80071a0:	2800      	cmp	r0, #0
 80071a2:	db2c      	blt.n	80071fe <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80071a4:	0042      	lsls	r2, r0, #1
 80071a6:	d42d      	bmi.n	8007204 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80071a8:	0084      	lsls	r4, r0, #2
 80071aa:	d42d      	bmi.n	8007208 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80071ac:	00c1      	lsls	r1, r0, #3
 80071ae:	d42d      	bmi.n	800720c <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80071b0:	0102      	lsls	r2, r0, #4
 80071b2:	d42e      	bmi.n	8007212 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80071b4:	0144      	lsls	r4, r0, #5
 80071b6:	d42f      	bmi.n	8007218 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80071b8:	01c1      	lsls	r1, r0, #7
 80071ba:	d430      	bmi.n	800721e <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80071bc:	0202      	lsls	r2, r0, #8
 80071be:	d431      	bmi.n	8007224 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80071c0:	0244      	lsls	r4, r0, #9
 80071c2:	d432      	bmi.n	800722a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80071c4:	0281      	lsls	r1, r0, #10
 80071c6:	d433      	bmi.n	8007230 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80071c8:	02c2      	lsls	r2, r0, #11
 80071ca:	d434      	bmi.n	8007236 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80071cc:	0344      	lsls	r4, r0, #13
 80071ce:	d435      	bmi.n	800723c <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80071d0:	0381      	lsls	r1, r0, #14
 80071d2:	d436      	bmi.n	8007242 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80071d4:	03c2      	lsls	r2, r0, #15
 80071d6:	d437      	bmi.n	8007248 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80071d8:	0404      	lsls	r4, r0, #16
 80071da:	d438      	bmi.n	800724e <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80071dc:	0441      	lsls	r1, r0, #17
 80071de:	d439      	bmi.n	8007254 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80071e0:	0482      	lsls	r2, r0, #18
 80071e2:	d43a      	bmi.n	800725a <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80071e4:	f010 0f08 	tst.w	r0, #8
 80071e8:	bf14      	ite	ne
 80071ea:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80071ee:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80071f2:	e7c0      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80071f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071f8:	e7bd      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e7bb      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80071fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007202:	e7b8      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	e7b6      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007208:	2380      	movs	r3, #128	; 0x80
 800720a:	e7b4      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800720c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007210:	e7b1      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007216:	e7ae      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800721c:	e7ab      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800721e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007222:	e7a8      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007228:	e7a5      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800722a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800722e:	e7a2      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007230:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007234:	e79f      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8007236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723a:	e79c      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800723c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007240:	e799      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007242:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007246:	e796      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007248:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800724c:	e793      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800724e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007252:	e790      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007258:	e78d      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 800725a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800725e:	e78a      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
 8007260:	20000ec4 	.word	0x20000ec4
 8007264:	002000c5 	.word	0x002000c5
 8007268:	fdffe008 	.word	0xfdffe008

0800726c <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800726c:	680b      	ldr	r3, [r1, #0]
 800726e:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007270:	684b      	ldr	r3, [r1, #4]
 8007272:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007274:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007276:	688a      	ldr	r2, [r1, #8]
 8007278:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800727c:	4313      	orrs	r3, r2
 800727e:	68ca      	ldr	r2, [r1, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	690a      	ldr	r2, [r1, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	694a      	ldr	r2, [r1, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800728c:	2000      	movs	r0, #0
 800728e:	4770      	bx	lr

08007290 <SDMMC_CmdBlockLength>:
{
 8007290:	b530      	push	{r4, r5, lr}
 8007292:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007298:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800729a:	2300      	movs	r3, #0
{
 800729c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800729e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072a0:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072a2:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072a4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072aa:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072ac:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072ae:	f7ff ff31 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80072b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b6:	4621      	mov	r1, r4
 80072b8:	4628      	mov	r0, r5
 80072ba:	f7ff ff47 	bl	800714c <SDMMC_GetCmdResp1>
}
 80072be:	b007      	add	sp, #28
 80072c0:	bd30      	pop	{r4, r5, pc}

080072c2 <SDMMC_CmdReadSingleBlock>:
{
 80072c2:	b530      	push	{r4, r5, lr}
 80072c4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072cc:	2300      	movs	r3, #0
{
 80072ce:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80072d0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80072d2:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072d4:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072d6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072dc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80072de:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072e0:	f7ff ff18 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80072e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e8:	4621      	mov	r1, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f7ff ff2e 	bl	800714c <SDMMC_GetCmdResp1>
}
 80072f0:	b007      	add	sp, #28
 80072f2:	bd30      	pop	{r4, r5, pc}

080072f4 <SDMMC_CmdReadMultiBlock>:
{
 80072f4:	b530      	push	{r4, r5, lr}
 80072f6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072fe:	2300      	movs	r3, #0
{
 8007300:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007302:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007304:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007306:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007308:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800730a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800730e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007310:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007312:	f7ff feff 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007316:	f241 3288 	movw	r2, #5000	; 0x1388
 800731a:	4621      	mov	r1, r4
 800731c:	4628      	mov	r0, r5
 800731e:	f7ff ff15 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007322:	b007      	add	sp, #28
 8007324:	bd30      	pop	{r4, r5, pc}

08007326 <SDMMC_CmdWriteSingleBlock>:
{
 8007326:	b530      	push	{r4, r5, lr}
 8007328:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800732a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800732e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007330:	2300      	movs	r3, #0
{
 8007332:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007334:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007336:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007338:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800733a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800733c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007340:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007342:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007344:	f7ff fee6 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007348:	f241 3288 	movw	r2, #5000	; 0x1388
 800734c:	4621      	mov	r1, r4
 800734e:	4628      	mov	r0, r5
 8007350:	f7ff fefc 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007354:	b007      	add	sp, #28
 8007356:	bd30      	pop	{r4, r5, pc}

08007358 <SDMMC_CmdWriteMultiBlock>:
{
 8007358:	b530      	push	{r4, r5, lr}
 800735a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800735c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007360:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007362:	2300      	movs	r3, #0
{
 8007364:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007366:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007368:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800736a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800736c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800736e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007372:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007374:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007376:	f7ff fecd 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800737a:	f241 3288 	movw	r2, #5000	; 0x1388
 800737e:	4621      	mov	r1, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f7ff fee3 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007386:	b007      	add	sp, #28
 8007388:	bd30      	pop	{r4, r5, pc}
	...

0800738c <SDMMC_CmdStopTransfer>:
{
 800738c:	b530      	push	{r4, r5, lr}
 800738e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007390:	2300      	movs	r3, #0
{
 8007392:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8007394:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007396:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007398:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800739c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800739e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073a4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073a6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80073a8:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073aa:	f7ff feb3 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80073ae:	4a03      	ldr	r2, [pc, #12]	; (80073bc <SDMMC_CmdStopTransfer+0x30>)
 80073b0:	4621      	mov	r1, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7ff feca 	bl	800714c <SDMMC_GetCmdResp1>
}
 80073b8:	b007      	add	sp, #28
 80073ba:	bd30      	pop	{r4, r5, pc}
 80073bc:	05f5e100 	.word	0x05f5e100

080073c0 <SDMMC_CmdSelDesel>:
{
 80073c0:	b530      	push	{r4, r5, lr}
 80073c2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ca:	2300      	movs	r3, #0
{
 80073cc:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073ce:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073d0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80073d8:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073da:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073dc:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073de:	f7ff fe99 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80073e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f7ff feaf 	bl	800714c <SDMMC_GetCmdResp1>
}
 80073ee:	b007      	add	sp, #28
 80073f0:	bd30      	pop	{r4, r5, pc}
	...

080073f4 <SDMMC_CmdGoIdleState>:
{
 80073f4:	b510      	push	{r4, lr}
 80073f6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80073fc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80073fe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007400:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007402:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007408:	9305      	str	r3, [sp, #20]
{
 800740a:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800740c:	f7ff fe82 	bl	8007114 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <SDMMC_CmdGoIdleState+0x4c>)
 8007412:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	fbb3 f2f2 	udiv	r2, r3, r2
 800741c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007420:	4353      	muls	r3, r2
    if (count-- == 0)
 8007422:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007426:	d307      	bcc.n	8007438 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007428:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800742a:	0612      	lsls	r2, r2, #24
 800742c:	d5f9      	bpl.n	8007422 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <SDMMC_CmdGoIdleState+0x50>)
 8007430:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007432:	2000      	movs	r0, #0
}
 8007434:	b006      	add	sp, #24
 8007436:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8007438:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800743c:	e7fa      	b.n	8007434 <SDMMC_CmdGoIdleState+0x40>
 800743e:	bf00      	nop
 8007440:	20000ec4 	.word	0x20000ec4
 8007444:	002000c5 	.word	0x002000c5

08007448 <SDMMC_CmdOperCond>:
{
 8007448:	b510      	push	{r4, lr}
 800744a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800744c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007450:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007452:	2308      	movs	r3, #8
 8007454:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800745a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800745c:	2300      	movs	r3, #0
 800745e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007460:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007466:	9305      	str	r3, [sp, #20]
{
 8007468:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800746a:	f7ff fe53 	bl	8007114 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800746e:	4b14      	ldr	r3, [pc, #80]	; (80074c0 <SDMMC_CmdOperCond+0x78>)
 8007470:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	fbb3 f2f2 	udiv	r2, r3, r2
 800747a:	f241 3388 	movw	r3, #5000	; 0x1388
 800747e:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8007480:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007484:	d318      	bcc.n	80074b8 <SDMMC_CmdOperCond+0x70>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007486:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007488:	f012 0f45 	tst.w	r2, #69	; 0x45
 800748c:	d0f8      	beq.n	8007480 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800748e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007490:	075b      	lsls	r3, r3, #29
 8007492:	d503      	bpl.n	800749c <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007494:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007496:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007498:	b006      	add	sp, #24
 800749a:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800749c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800749e:	f012 0201 	ands.w	r2, r2, #1
 80074a2:	d001      	beq.n	80074a8 <SDMMC_CmdOperCond+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074a4:	2001      	movs	r0, #1
 80074a6:	e7f6      	b.n	8007496 <SDMMC_CmdOperCond+0x4e>
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80074a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80074aa:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80074ae:	d0f3      	beq.n	8007498 <SDMMC_CmdOperCond+0x50>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074b4:	4610      	mov	r0, r2
 80074b6:	e7ef      	b.n	8007498 <SDMMC_CmdOperCond+0x50>
      return SDMMC_ERROR_TIMEOUT;
 80074b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80074bc:	e7ec      	b.n	8007498 <SDMMC_CmdOperCond+0x50>
 80074be:	bf00      	nop
 80074c0:	20000ec4 	.word	0x20000ec4

080074c4 <SDMMC_CmdAppCommand>:
{
 80074c4:	b530      	push	{r4, r5, lr}
 80074c6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074cc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074ce:	2300      	movs	r3, #0
{
 80074d0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80074d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074d4:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074d6:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074d8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074de:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074e0:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074e2:	f7ff fe17 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80074e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ea:	4621      	mov	r1, r4
 80074ec:	4628      	mov	r0, r5
 80074ee:	f7ff fe2d 	bl	800714c <SDMMC_GetCmdResp1>
}
 80074f2:	b007      	add	sp, #28
 80074f4:	bd30      	pop	{r4, r5, pc}

080074f6 <SDMMC_CmdAppOperCommand>:
{
 80074f6:	b510      	push	{r4, lr}
 80074f8:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80074fa:	2329      	movs	r3, #41	; 0x29
 80074fc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007502:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007504:	2300      	movs	r3, #0
{
 8007506:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007508:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800750a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800750c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800750e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007512:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007514:	f7ff fdfe 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007518:	4620      	mov	r0, r4
 800751a:	f7ff fda7 	bl	800706c <SDMMC_GetCmdResp3>
}
 800751e:	b006      	add	sp, #24
 8007520:	bd10      	pop	{r4, pc}

08007522 <SDMMC_CmdSendSCR>:
{
 8007522:	b530      	push	{r4, r5, lr}
 8007524:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007526:	2300      	movs	r3, #0
{
 8007528:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 800752a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800752c:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800752e:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007532:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007534:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800753a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800753c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800753e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007540:	f7ff fde8 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007544:	f241 3288 	movw	r2, #5000	; 0x1388
 8007548:	4621      	mov	r1, r4
 800754a:	4628      	mov	r0, r5
 800754c:	f7ff fdfe 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007550:	b007      	add	sp, #28
 8007552:	bd30      	pop	{r4, r5, pc}

08007554 <SDMMC_CmdSendCID>:
{
 8007554:	b510      	push	{r4, lr}
 8007556:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8007558:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800755a:	2202      	movs	r2, #2
{
 800755c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800755e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007560:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007562:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007564:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800756c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800756e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007570:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007572:	f7ff fdcf 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff fd50 	bl	800701c <SDMMC_GetCmdResp2>
}
 800757c:	b006      	add	sp, #24
 800757e:	bd10      	pop	{r4, pc}

08007580 <SDMMC_CmdSendCSD>:
{
 8007580:	b510      	push	{r4, lr}
 8007582:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007584:	2309      	movs	r3, #9
 8007586:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007588:	f44f 7340 	mov.w	r3, #768	; 0x300
 800758c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800758e:	2300      	movs	r3, #0
{
 8007590:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007592:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007594:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007596:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800759c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800759e:	f7ff fdb9 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80075a2:	4620      	mov	r0, r4
 80075a4:	f7ff fd3a 	bl	800701c <SDMMC_GetCmdResp2>
}
 80075a8:	b006      	add	sp, #24
 80075aa:	bd10      	pop	{r4, pc}

080075ac <SDMMC_CmdSetRelAdd>:
{
 80075ac:	b530      	push	{r4, r5, lr}
 80075ae:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80075b0:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80075b2:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0;
 80075b4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80075b6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075b8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075ba:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 80075c2:	460d      	mov	r5, r1
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075c4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075c6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075c8:	9305      	str	r3, [sp, #20]
{
 80075ca:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075cc:	f7ff fda2 	bl	8007114 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80075d0:	4b1f      	ldr	r3, [pc, #124]	; (8007650 <SDMMC_CmdSetRelAdd+0xa4>)
 80075d2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80075dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80075e0:	4353      	muls	r3, r2
    if (count-- == 0)
 80075e2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80075e6:	d32a      	bcc.n	800763e <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80075e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80075ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 80075ee:	d0f8      	beq.n	80075e2 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80075f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075f2:	075a      	lsls	r2, r3, #29
 80075f4:	d503      	bpl.n	80075fe <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80075f6:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075f8:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80075fa:	b007      	add	sp, #28
 80075fc:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80075fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007600:	f011 0101 	ands.w	r1, r1, #1
 8007604:	d001      	beq.n	800760a <SDMMC_CmdSetRelAdd+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007606:	2001      	movs	r0, #1
 8007608:	e7f6      	b.n	80075f8 <SDMMC_CmdSetRelAdd+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800760a:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b03      	cmp	r3, #3
 8007610:	d118      	bne.n	8007644 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <SDMMC_CmdSetRelAdd+0xa8>)
 8007614:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007616:	4620      	mov	r0, r4
 8007618:	f7ff fd8e 	bl	8007138 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800761c:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8007620:	d103      	bne.n	800762a <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007622:	0c00      	lsrs	r0, r0, #16
 8007624:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8007626:	4618      	mov	r0, r3
 8007628:	e7e7      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800762a:	0443      	lsls	r3, r0, #17
 800762c:	d40c      	bmi.n	8007648 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800762e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007632:	bf14      	ite	ne
 8007634:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007638:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800763c:	e7dd      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 800763e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007642:	e7da      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007644:	2001      	movs	r0, #1
 8007646:	e7d8      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007648:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800764c:	e7d5      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
 800764e:	bf00      	nop
 8007650:	20000ec4 	.word	0x20000ec4
 8007654:	002000c5 	.word	0x002000c5

08007658 <SDMMC_CmdSendStatus>:
{
 8007658:	b530      	push	{r4, r5, lr}
 800765a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800765c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007660:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007662:	2300      	movs	r3, #0
{
 8007664:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007666:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007668:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800766a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800766c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800766e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007672:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007674:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007676:	f7ff fd4d 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800767a:	f241 3288 	movw	r2, #5000	; 0x1388
 800767e:	4621      	mov	r1, r4
 8007680:	4628      	mov	r0, r5
 8007682:	f7ff fd63 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007686:	b007      	add	sp, #28
 8007688:	bd30      	pop	{r4, r5, pc}

0800768a <SDMMC_CmdSwitch>:
{
 800768a:	b530      	push	{r4, r5, lr}
 800768c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800768e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007692:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007694:	2300      	movs	r3, #0
{
 8007696:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007698:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800769a:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800769c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800769e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80076a6:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076a8:	f7ff fd34 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80076ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b0:	4621      	mov	r1, r4
 80076b2:	4628      	mov	r0, r5
 80076b4:	f7ff fd4a 	bl	800714c <SDMMC_GetCmdResp1>
}
 80076b8:	b007      	add	sp, #28
 80076ba:	bd30      	pop	{r4, r5, pc}

080076bc <SDMMC_CmdBusWidth>:
 80076bc:	f7ff bfe5 	b.w	800768a <SDMMC_CmdSwitch>

080076c0 <SDMMC_CmdVoltageSwitch>:
{
 80076c0:	b530      	push	{r4, r5, lr}
 80076c2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0x00000000;
 80076c4:	2300      	movs	r3, #0
{
 80076c6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 80076c8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80076ca:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076cc:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076d0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076d8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076da:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80076dc:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076de:	f7ff fd19 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80076e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e6:	4621      	mov	r1, r4
 80076e8:	4628      	mov	r0, r5
 80076ea:	f7ff fd2f 	bl	800714c <SDMMC_GetCmdResp1>
}
 80076ee:	b007      	add	sp, #28
 80076f0:	bd30      	pop	{r4, r5, pc}
	...

080076f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076f4:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076f6:	3b01      	subs	r3, #1
 80076f8:	d101      	bne.n	80076fe <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80076fa:	2003      	movs	r0, #3
 80076fc:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076fe:	6902      	ldr	r2, [r0, #16]
 8007700:	2a00      	cmp	r2, #0
 8007702:	daf8      	bge.n	80076f6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007704:	6903      	ldr	r3, [r0, #16]
 8007706:	4a06      	ldr	r2, [pc, #24]	; (8007720 <USB_CoreReset+0x2c>)
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800770e:	3a01      	subs	r2, #1
 8007710:	d0f3      	beq.n	80076fa <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007712:	6903      	ldr	r3, [r0, #16]
 8007714:	f013 0301 	ands.w	r3, r3, #1
 8007718:	d1f9      	bne.n	800770e <USB_CoreReset+0x1a>

  return HAL_OK;
 800771a:	4618      	mov	r0, r3
}
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	00030d41 	.word	0x00030d41

08007724 <USB_CoreInit>:
{
 8007724:	b084      	sub	sp, #16
 8007726:	b538      	push	{r3, r4, r5, lr}
 8007728:	ad05      	add	r5, sp, #20
 800772a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	2b01      	cmp	r3, #1
{
 8007732:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007734:	d11b      	bne.n	800776e <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007736:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800773e:	68c3      	ldr	r3, [r0, #12]
 8007740:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007748:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800774a:	68c3      	ldr	r3, [r0, #12]
 800774c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007750:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8007752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007754:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007756:	bf02      	ittt	eq
 8007758:	68c3      	ldreq	r3, [r0, #12]
 800775a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800775e:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007760:	f7ff ffc8 	bl	80076f4 <USB_CoreReset>
}
 8007764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007768:	2000      	movs	r0, #0
 800776a:	b004      	add	sp, #16
 800776c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800776e:	68c3      	ldr	r3, [r0, #12]
 8007770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007774:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007776:	f7ff ffbd 	bl	80076f4 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800777a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800777e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007780:	e7f0      	b.n	8007764 <USB_CoreInit+0x40>

08007782 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007782:	6883      	ldr	r3, [r0, #8]
 8007784:	f043 0301 	orr.w	r3, r3, #1
 8007788:	6083      	str	r3, [r0, #8]
}
 800778a:	2000      	movs	r0, #0
 800778c:	4770      	bx	lr

0800778e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800778e:	6883      	ldr	r3, [r0, #8]
 8007790:	f023 0301 	bic.w	r3, r3, #1
 8007794:	6083      	str	r3, [r0, #8]
}
 8007796:	2000      	movs	r0, #0
 8007798:	4770      	bx	lr

0800779a <USB_SetCurrentMode>:
{
 800779a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800779c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800779e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80077a4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80077a6:	d108      	bne.n	80077ba <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077a8:	68c3      	ldr	r3, [r0, #12]
 80077aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077ae:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80077b0:	2032      	movs	r0, #50	; 0x32
 80077b2:	f7f9 fc3b 	bl	800102c <HAL_Delay>
  return HAL_OK;
 80077b6:	2000      	movs	r0, #0
 80077b8:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80077ba:	b919      	cbnz	r1, 80077c4 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077bc:	68c3      	ldr	r3, [r0, #12]
 80077be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077c2:	e7f4      	b.n	80077ae <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80077c4:	2001      	movs	r0, #1
}
 80077c6:	bd08      	pop	{r3, pc}

080077c8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077c8:	0189      	lsls	r1, r1, #6
 80077ca:	f041 0120 	orr.w	r1, r1, #32
 80077ce:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <USB_FlushTxFifo+0x20>)
 80077d0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80077d2:	3a01      	subs	r2, #1
 80077d4:	d005      	beq.n	80077e2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077d6:	6903      	ldr	r3, [r0, #16]
 80077d8:	f013 0320 	ands.w	r3, r3, #32
 80077dc:	d1f9      	bne.n	80077d2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80077de:	4618      	mov	r0, r3
 80077e0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80077e2:	2003      	movs	r0, #3
}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	00030d41 	.word	0x00030d41

080077ec <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077ec:	2310      	movs	r3, #16
 80077ee:	4a06      	ldr	r2, [pc, #24]	; (8007808 <USB_FlushRxFifo+0x1c>)
 80077f0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80077f2:	3a01      	subs	r2, #1
 80077f4:	d005      	beq.n	8007802 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077f6:	6903      	ldr	r3, [r0, #16]
 80077f8:	f013 0310 	ands.w	r3, r3, #16
 80077fc:	d1f9      	bne.n	80077f2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80077fe:	4618      	mov	r0, r3
 8007800:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007802:	2003      	movs	r0, #3
}
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	00030d41 	.word	0x00030d41

0800780c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800780c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007810:	4319      	orrs	r1, r3
 8007812:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007816:	2000      	movs	r0, #0
 8007818:	4770      	bx	lr
	...

0800781c <USB_DevInit>:
{
 800781c:	b084      	sub	sp, #16
 800781e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007822:	4604      	mov	r4, r0
 8007824:	a807      	add	r0, sp, #28
 8007826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800782a:	2300      	movs	r3, #0
 800782c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800782e:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8007830:	4619      	mov	r1, r3
 8007832:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007836:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800783a:	3301      	adds	r3, #1
 800783c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800783e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8007840:	d1f7      	bne.n	8007832 <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007848:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800784a:	b95f      	cbnz	r7, 8007864 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800784c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800784e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007852:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800785a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007862:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8007864:	2500      	movs	r5, #0
 8007866:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800786a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800786e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007872:	2103      	movs	r1, #3
 8007874:	4620      	mov	r0, r4
 8007876:	f7ff ffc9 	bl	800780c <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800787a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800787e:	2110      	movs	r1, #16
 8007880:	4620      	mov	r0, r4
 8007882:	f7ff ffa1 	bl	80077c8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007886:	4620      	mov	r0, r4
 8007888:	f7ff ffb0 	bl	80077ec <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 800788c:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800788e:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8007890:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8007892:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8007894:	61f5      	str	r5, [r6, #28]
 8007896:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800789a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800789e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078a2:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078a6:	4543      	cmp	r3, r8
 80078a8:	d12f      	bne.n	800790a <USB_DevInit+0xee>
 80078aa:	2100      	movs	r1, #0
 80078ac:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078b0:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078b2:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078b6:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078ba:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078be:	428b      	cmp	r3, r1
 80078c0:	d134      	bne.n	800792c <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078c2:	6933      	ldr	r3, [r6, #16]
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078ce:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80078d2:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078d4:	69a3      	ldr	r3, [r4, #24]
 80078d6:	f043 0310 	orr.w	r3, r3, #16
 80078da:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078dc:	69a2      	ldr	r2, [r4, #24]
 80078de:	4b1c      	ldr	r3, [pc, #112]	; (8007950 <USB_DevInit+0x134>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80078e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e6:	b11b      	cbz	r3, 80078f0 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078e8:	69a3      	ldr	r3, [r4, #24]
 80078ea:	f043 0308 	orr.w	r3, r3, #8
 80078ee:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80078f0:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078f2:	bf01      	itttt	eq
 80078f4:	69a3      	ldreq	r3, [r4, #24]
 80078f6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80078fa:	f043 0304 	orreq.w	r3, r3, #4
 80078fe:	61a3      	streq	r3, [r4, #24]
}
 8007900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007904:	2000      	movs	r0, #0
 8007906:	b004      	add	sp, #16
 8007908:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800790a:	f8d2 c000 	ldr.w	ip, [r2]
 800790e:	f1bc 0f00 	cmp.w	ip, #0
 8007912:	da09      	bge.n	8007928 <USB_DevInit+0x10c>
      if (i == 0U)
 8007914:	b933      	cbnz	r3, 8007924 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007916:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007918:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800791a:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800791c:	f8c2 e008 	str.w	lr, [r2, #8]
 8007920:	3220      	adds	r2, #32
 8007922:	e7c0      	b.n	80078a6 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007924:	6010      	str	r0, [r2, #0]
 8007926:	e7f7      	b.n	8007918 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007928:	6011      	str	r1, [r2, #0]
 800792a:	e7f5      	b.n	8007918 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800792c:	f8d2 8000 	ldr.w	r8, [r2]
 8007930:	f1b8 0f00 	cmp.w	r8, #0
 8007934:	da0a      	bge.n	800794c <USB_DevInit+0x130>
      if (i == 0U)
 8007936:	b939      	cbnz	r1, 8007948 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007938:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800793c:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007940:	f8c2 c008 	str.w	ip, [r2, #8]
 8007944:	3220      	adds	r2, #32
 8007946:	e7ba      	b.n	80078be <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007948:	6015      	str	r5, [r2, #0]
 800794a:	e7f7      	b.n	800793c <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800794c:	6010      	str	r0, [r2, #0]
 800794e:	e7f5      	b.n	800793c <USB_DevInit+0x120>
 8007950:	803c3800 	.word	0x803c3800

08007954 <USB_ActivateEndpoint>:
{
 8007954:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007956:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007958:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800795a:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800795e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8007962:	2a01      	cmp	r2, #1
 8007964:	f004 050f 	and.w	r5, r4, #15
 8007968:	d11b      	bne.n	80079a2 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800796a:	40aa      	lsls	r2, r5
 800796c:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800796e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007972:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007974:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007978:	041a      	lsls	r2, r3, #16
 800797a:	d410      	bmi.n	800799e <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800797c:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800797e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007980:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800798c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007990:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007994:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8007998:	4313      	orrs	r3, r2
 800799a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800799e:	2000      	movs	r0, #0
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 80079a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80079a6:	40aa      	lsls	r2, r5
 80079a8:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079aa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 80079ae:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079b0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	d4f2      	bmi.n	800799e <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079b8:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80079ba:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079bc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80079c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079cc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80079d0:	4313      	orrs	r3, r2
 80079d2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80079d6:	e7e2      	b.n	800799e <USB_ActivateEndpoint+0x4a>

080079d8 <USB_DeactivateEndpoint>:
{
 80079d8:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80079da:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80079dc:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079de:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80079e2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	f004 050f 	and.w	r5, r4, #15
 80079ec:	d110      	bne.n	8007a10 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079ee:	40ab      	lsls	r3, r5
 80079f0:	43db      	mvns	r3, r3
 80079f2:	4019      	ands	r1, r3
 80079f4:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079f6:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079f8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079fc:	400b      	ands	r3, r1
 80079fe:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a00:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <USB_DeactivateEndpoint+0x5c>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a14:	40ab      	lsls	r3, r5
 8007a16:	43db      	mvns	r3, r3
 8007a18:	4019      	ands	r1, r3
 8007a1a:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007a1c:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a1e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007a22:	400b      	ands	r3, r1
 8007a24:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a26:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007a2a:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <USB_DeactivateEndpoint+0x60>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007a32:	e7eb      	b.n	8007a0c <USB_DeactivateEndpoint+0x34>
 8007a34:	ec337800 	.word	0xec337800
 8007a38:	eff37800 	.word	0xeff37800

08007a3c <USB_EP0StartXfer>:
{
 8007a3c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007a3e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007a40:	780a      	ldrb	r2, [r1, #0]
 8007a42:	694d      	ldr	r5, [r1, #20]
 8007a44:	4e35      	ldr	r6, [pc, #212]	; (8007b1c <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	f04f 0320 	mov.w	r3, #32
 8007a4c:	d145      	bne.n	8007ada <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a4e:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 8007a52:	bb45      	cbnz	r5, 8007aa6 <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a54:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007a58:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007a5c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007a60:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a64:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007a68:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007a6c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a70:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007a74:	4026      	ands	r6, r4
 8007a76:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    if (ep->xfer_len > 0U)
 8007a7a:	694b      	ldr	r3, [r1, #20]
 8007a7c:	b14b      	cbz	r3, 8007a92 <USB_EP0StartXfer+0x56>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007a7e:	780b      	ldrb	r3, [r1, #0]
 8007a80:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 8007a84:	f003 010f 	and.w	r1, r3, #15
 8007a88:	2301      	movs	r3, #1
 8007a8a:	408b      	lsls	r3, r1
 8007a8c:	432b      	orrs	r3, r5
 8007a8e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a92:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8007a96:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8007a9a:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8007a9e:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aaa:	691c      	ldr	r4, [r3, #16]
 8007aac:	4026      	ands	r6, r4
 8007aae:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ab0:	691c      	ldr	r4, [r3, #16]
 8007ab2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007ab6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007aba:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007abc:	688c      	ldr	r4, [r1, #8]
 8007abe:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8007ac0:	bf88      	it	hi
 8007ac2:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ac4:	691c      	ldr	r4, [r3, #16]
 8007ac6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007aca:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007acc:	694c      	ldr	r4, [r1, #20]
 8007ace:	691d      	ldr	r5, [r3, #16]
 8007ad0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007ad4:	432c      	orrs	r4, r5
 8007ad6:	611c      	str	r4, [r3, #16]
 8007ad8:	e7cf      	b.n	8007a7a <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ada:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007ade:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	4032      	ands	r2, r6
 8007ae6:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007aee:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007af2:	611a      	str	r2, [r3, #16]
 8007af4:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8007af6:	b105      	cbz	r5, 8007afa <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8007af8:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007afa:	6919      	ldr	r1, [r3, #16]
 8007afc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8007b00:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007b02:	6919      	ldr	r1, [r3, #16]
 8007b04:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b0c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b14:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007b18:	e7c3      	b.n	8007aa2 <USB_EP0StartXfer+0x66>
 8007b1a:	bf00      	nop
 8007b1c:	fff80000 	.word	0xfff80000

08007b20 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8007b20:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007b22:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8007b26:	f023 0303 	bic.w	r3, r3, #3
 8007b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b2e:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8007b30:	4299      	cmp	r1, r3
 8007b32:	d101      	bne.n	8007b38 <USB_WritePacket+0x18>
}
 8007b34:	2000      	movs	r0, #0
 8007b36:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007b38:	f851 0b04 	ldr.w	r0, [r1], #4
 8007b3c:	6010      	str	r0, [r2, #0]
 8007b3e:	e7f7      	b.n	8007b30 <USB_WritePacket+0x10>

08007b40 <USB_EPStartXfer>:
{
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8007b42:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007b44:	780d      	ldrb	r5, [r1, #0]
 8007b46:	4e5f      	ldr	r6, [pc, #380]	; (8007cc4 <USB_EPStartXfer+0x184>)
  if (ep->is_in == 1U)
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f04f 0220 	mov.w	r2, #32
 8007b4e:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b50:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8007b54:	d169      	bne.n	8007c2a <USB_EPStartXfer+0xea>
    if (ep->xfer_len == 0U)
 8007b56:	bb83      	cbnz	r3, 8007bba <USB_EPStartXfer+0x7a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b58:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8007b5c:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8007b60:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007b64:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007b68:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b6a:	6922      	ldr	r2, [r4, #16]
 8007b6c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007b70:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b72:	6922      	ldr	r2, [r4, #16]
 8007b74:	4016      	ands	r6, r2
 8007b76:	6126      	str	r6, [r4, #16]
    if (ep->type != EP_TYPE_ISOC)
 8007b78:	78ce      	ldrb	r6, [r1, #3]
 8007b7a:	2e01      	cmp	r6, #1
 8007b7c:	f000 8094 	beq.w	8007ca8 <USB_EPStartXfer+0x168>
      if (ep->xfer_len > 0U)
 8007b80:	b153      	cbz	r3, 8007b98 <USB_EPStartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007b82:	780a      	ldrb	r2, [r1, #0]
 8007b84:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8007b88:	f002 040f 	and.w	r4, r2, #15
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	40a2      	lsls	r2, r4
 8007b90:	ea42 020e 	orr.w	r2, r2, lr
 8007b94:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b98:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 8007b9c:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b9e:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007ba2:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007ba6:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8007baa:	d104      	bne.n	8007bb6 <USB_EPStartXfer+0x76>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007bac:	780a      	ldrb	r2, [r1, #0]
 8007bae:	68c9      	ldr	r1, [r1, #12]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f7ff ffb5 	bl	8007b20 <USB_WritePacket>
}
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bba:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007bbe:	4034      	ands	r4, r6
 8007bc0:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bc4:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bc8:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bca:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007bce:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007bd2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bd6:	199c      	adds	r4, r3, r6
 8007bd8:	3c01      	subs	r4, #1
 8007bda:	fbb4 f6f6 	udiv	r6, r4, r6
 8007bde:	4c3a      	ldr	r4, [pc, #232]	; (8007cc8 <USB_EPStartXfer+0x188>)
 8007be0:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8007be4:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 8007be8:	433c      	orrs	r4, r7
 8007bea:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bee:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8007bf2:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8007bf6:	4334      	orrs	r4, r6
 8007bf8:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8007bfc:	78cc      	ldrb	r4, [r1, #3]
 8007bfe:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8007c04:	d1b8      	bne.n	8007b78 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c06:	6914      	ldr	r4, [r2, #16]
 8007c08:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8007c0c:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c0e:	6914      	ldr	r4, [r2, #16]
 8007c10:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8007c14:	6114      	str	r4, [r2, #16]
 8007c16:	e7af      	b.n	8007b78 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c18:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007c1c:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007c20:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c24:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
 8007c28:	e7b6      	b.n	8007b98 <USB_EPStartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c2a:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8007c2e:	692c      	ldr	r4, [r5, #16]
 8007c30:	4034      	ands	r4, r6
 8007c32:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c34:	692c      	ldr	r4, [r5, #16]
 8007c36:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007c3a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007c3e:	612c      	str	r4, [r5, #16]
 8007c40:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8007c42:	b9fb      	cbnz	r3, 8007c84 <USB_EPStartXfer+0x144>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c44:	692b      	ldr	r3, [r5, #16]
 8007c46:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007c4a:	431c      	orrs	r4, r3
 8007c4c:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c4e:	692b      	ldr	r3, [r5, #16]
 8007c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c54:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8007c56:	78cb      	ldrb	r3, [r1, #3]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d10c      	bne.n	8007c76 <USB_EPStartXfer+0x136>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c5c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007c60:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c64:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007c68:	bf0c      	ite	eq
 8007c6a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c6e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8007c72:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c76:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007c7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c7e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  return HAL_OK;
 8007c82:	e798      	b.n	8007bb6 <USB_EPStartXfer+0x76>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c84:	4e10      	ldr	r6, [pc, #64]	; (8007cc8 <USB_EPStartXfer+0x188>)
 8007c86:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c88:	4423      	add	r3, r4
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c90:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8007c94:	433e      	orrs	r6, r7
 8007c96:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	692e      	ldr	r6, [r5, #16]
 8007c9c:	435c      	muls	r4, r3
 8007c9e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007ca2:	4334      	orrs	r4, r6
 8007ca4:	612c      	str	r4, [r5, #16]
 8007ca6:	e7d6      	b.n	8007c56 <USB_EPStartXfer+0x116>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ca8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007cac:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007cb0:	f04f 0220 	mov.w	r2, #32
 8007cb4:	d0b0      	beq.n	8007c18 <USB_EPStartXfer+0xd8>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cb6:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007cba:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007cbe:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007cc2:	e7af      	b.n	8007c24 <USB_EPStartXfer+0xe4>
 8007cc4:	fff80000 	.word	0xfff80000
 8007cc8:	1ff80000 	.word	0x1ff80000

08007ccc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ccc:	3203      	adds	r2, #3
 8007cce:	f022 0203 	bic.w	r2, r2, #3
 8007cd2:	440a      	add	r2, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007cd4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8007cd8:	4291      	cmp	r1, r2
 8007cda:	d101      	bne.n	8007ce0 <USB_ReadPacket+0x14>
}
 8007cdc:	4608      	mov	r0, r1
 8007cde:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007ce0:	6803      	ldr	r3, [r0, #0]
 8007ce2:	f841 3b04 	str.w	r3, [r1], #4
 8007ce6:	e7f7      	b.n	8007cd8 <USB_ReadPacket+0xc>

08007ce8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8007ce8:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007cea:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cf2:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007cf6:	d112      	bne.n	8007d1e <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cf8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	db06      	blt.n	8007d0e <USB_EPSetStall+0x26>
 8007d00:	b12a      	cbz	r2, 8007d0e <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d02:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d0a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d0e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d16:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d1e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	db06      	blt.n	8007d34 <USB_EPSetStall+0x4c>
 8007d26:	b12a      	cbz	r2, 8007d34 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d28:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d30:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d34:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d3c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007d40:	e7eb      	b.n	8007d1a <USB_EPSetStall+0x32>

08007d42 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8007d42:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007d44:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d4c:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007d50:	d111      	bne.n	8007d76 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d52:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d5a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d5e:	78cb      	ldrb	r3, [r1, #3]
 8007d60:	3b02      	subs	r3, #2
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d805      	bhi.n	8007d72 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d66:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d6e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007d72:	2000      	movs	r0, #0
 8007d74:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d76:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d7e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d82:	78cb      	ldrb	r3, [r1, #3]
 8007d84:	3b02      	subs	r3, #2
 8007d86:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d88:	bf9e      	ittt	ls
 8007d8a:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8007d8e:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8007d92:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8007d96:	e7ec      	b.n	8007d72 <USB_EPClearStall+0x30>

08007d98 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d98:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007d9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007da0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007da4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007da8:	0109      	lsls	r1, r1, #4
 8007daa:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007dae:	4319      	orrs	r1, r3
 8007db0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007db4:	2000      	movs	r0, #0
 8007db6:	4770      	bx	lr

08007db8 <USB_DevConnect>:
{
 8007db8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007dba:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007dbe:	f023 0302 	bic.w	r3, r3, #2
 8007dc2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007dc6:	2003      	movs	r0, #3
 8007dc8:	f7f9 f930 	bl	800102c <HAL_Delay>
}
 8007dcc:	2000      	movs	r0, #0
 8007dce:	bd08      	pop	{r3, pc}

08007dd0 <USB_DevDisconnect>:
{
 8007dd0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dd2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007dd6:	f043 0302 	orr.w	r3, r3, #2
 8007dda:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007dde:	2003      	movs	r0, #3
 8007de0:	f7f9 f924 	bl	800102c <HAL_Delay>
}
 8007de4:	2000      	movs	r0, #0
 8007de6:	bd08      	pop	{r3, pc}

08007de8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007de8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007dea:	6980      	ldr	r0, [r0, #24]
}
 8007dec:	4010      	ands	r0, r2
 8007dee:	4770      	bx	lr

08007df0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007df0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007df4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007df8:	69c0      	ldr	r0, [r0, #28]
 8007dfa:	4018      	ands	r0, r3
}
 8007dfc:	0c00      	lsrs	r0, r0, #16
 8007dfe:	4770      	bx	lr

08007e00 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007e00:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007e04:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e08:	69c0      	ldr	r0, [r0, #28]
 8007e0a:	4018      	ands	r0, r3
}
 8007e0c:	b280      	uxth	r0, r0
 8007e0e:	4770      	bx	lr

08007e10 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e10:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e14:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e18:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e1c:	6940      	ldr	r0, [r0, #20]
}
 8007e1e:	4010      	ands	r0, r2
 8007e20:	4770      	bx	lr

08007e22 <USB_ReadDevInEPInterrupt>:
{
 8007e22:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8007e24:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e28:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e2c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007e30:	f001 010f 	and.w	r1, r1, #15
 8007e34:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e36:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007e3a:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e3c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	4323      	orrs	r3, r4
}
 8007e42:	4018      	ands	r0, r3
 8007e44:	bd10      	pop	{r4, pc}

08007e46 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007e46:	6940      	ldr	r0, [r0, #20]
}
 8007e48:	f000 0001 	and.w	r0, r0, #1
 8007e4c:	4770      	bx	lr

08007e4e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e4e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007e52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e56:	f023 0307 	bic.w	r3, r3, #7
 8007e5a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007e5e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	f002 0206 	and.w	r2, r2, #6
 8007e68:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007e6a:	bf02      	ittt	eq
 8007e6c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8007e70:	f042 0203 	orreq.w	r2, r2, #3
 8007e74:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e7e:	605a      	str	r2, [r3, #4]
}
 8007e80:	2000      	movs	r0, #0
 8007e82:	4770      	bx	lr

08007e84 <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e84:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007e88:	2000      	movs	r0, #0
 8007e8a:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007e92:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	f042 0218 	orr.w	r2, r2, #24
 8007e9a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8007ea2:	611a      	str	r2, [r3, #16]
}
 8007ea4:	4770      	bx	lr
	...

08007ea8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8007ea8:	2329      	movs	r3, #41	; 0x29
 8007eaa:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8007eac:	4800      	ldr	r0, [pc, #0]	; (8007eb0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8007eae:	4770      	bx	lr
 8007eb0:	2000005c 	.word	0x2000005c

08007eb4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8007eb4:	2329      	movs	r3, #41	; 0x29
 8007eb6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8007eb8:	4800      	ldr	r0, [pc, #0]	; (8007ebc <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8007eba:	4770      	bx	lr
 8007ebc:	20000088 	.word	0x20000088

08007ec0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007ec0:	2329      	movs	r3, #41	; 0x29
 8007ec2:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8007ec4:	4800      	ldr	r0, [pc, #0]	; (8007ec8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8007ec6:	4770      	bx	lr
 8007ec8:	200000cc 	.word	0x200000cc

08007ecc <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007ecc:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	7718      	strb	r0, [r3, #28]

  return USBD_OK;
}
 8007ed4:	4770      	bx	lr

08007ed6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ed6:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007ed8:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if (hhid->IsReportAvailable == 1U)
 8007edc:	69a3      	ldr	r3, [r4, #24]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d107      	bne.n	8007ef2 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007ee2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007ee6:	7861      	ldrb	r1, [r4, #1]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	7820      	ldrb	r0, [r4, #0]
 8007eec:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61a3      	str	r3, [r4, #24]
  }

  return USBD_OK;
}
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	bd10      	pop	{r4, pc}
	...

08007ef8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007ef8:	230a      	movs	r3, #10
 8007efa:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8007efc:	4800      	ldr	r0, [pc, #0]	; (8007f00 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8007efe:	4770      	bx	lr
 8007f00:	200000c0 	.word	0x200000c0

08007f04 <USBD_CUSTOM_HID_DataOut>:
{
 8007f04:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007f06:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007f0a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007f0e:	7869      	ldrb	r1, [r5, #1]
 8007f10:	68db      	ldr	r3, [r3, #12]
{
 8007f12:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007f14:	7828      	ldrb	r0, [r5, #0]
 8007f16:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8007f18:	230c      	movs	r3, #12
 8007f1a:	462a      	mov	r2, r5
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f017 fc50 	bl	801f7c4 <USBD_LL_PrepareReceive>
}
 8007f24:	2000      	movs	r0, #0
 8007f26:	bd38      	pop	{r3, r4, r5, pc}

08007f28 <USBD_CUSTOM_HID_Setup>:
{
 8007f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8007f2a:	2500      	movs	r5, #0
 8007f2c:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f30:	780d      	ldrb	r5, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007f32:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f36:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3e:	d028      	beq.n	8007f92 <USBD_CUSTOM_HID_Setup+0x6a>
 8007f40:	2d20      	cmp	r5, #32
 8007f42:	d161      	bne.n	8008008 <USBD_CUSTOM_HID_Setup+0xe0>
    switch (req->bRequest)
 8007f44:	7849      	ldrb	r1, [r1, #1]
 8007f46:	3902      	subs	r1, #2
 8007f48:	2909      	cmp	r1, #9
 8007f4a:	d85b      	bhi.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
 8007f4c:	e8df f001 	tbb	[pc, r1]
 8007f50:	5a5a0a15 	.word	0x5a5a0a15
 8007f54:	195a5a5a 	.word	0x195a5a5a
 8007f58:	0511      	.short	0x0511
      hhid->Protocol = (uint8_t)(req->wValue);
 8007f5a:	7893      	ldrb	r3, [r2, #2]
 8007f5c:	60e3      	str	r3, [r4, #12]
  uint8_t ret = USBD_OK;
 8007f5e:	2000      	movs	r0, #0
}
 8007f60:	b003      	add	sp, #12
 8007f62:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007f64:	2201      	movs	r2, #1
 8007f66:	f104 010c 	add.w	r1, r4, #12
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fc18 	bl	80087a0 <USBD_CtlSendData>
 8007f70:	e7f5      	b.n	8007f5e <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f72:	8853      	ldrh	r3, [r2, #2]
 8007f74:	0a1b      	lsrs	r3, r3, #8
 8007f76:	6123      	str	r3, [r4, #16]
 8007f78:	e7f1      	b.n	8007f5e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f104 0110 	add.w	r1, r4, #16
 8007f80:	e7f3      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
      hhid->IsReportAvailable = 1U;
 8007f82:	2101      	movs	r1, #1
 8007f84:	61a1      	str	r1, [r4, #24]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8007f86:	88d2      	ldrh	r2, [r2, #6]
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fc1d 	bl	80087ca <USBD_CtlPrepareRx>
 8007f90:	e7e5      	b.n	8007f5e <USBD_CUSTOM_HID_Setup+0x36>
    switch (req->bRequest)
 8007f92:	7849      	ldrb	r1, [r1, #1]
 8007f94:	290b      	cmp	r1, #11
 8007f96:	d835      	bhi.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
 8007f98:	e8df f001 	tbb	[pc, r1]
 8007f9c:	34343406 	.word	0x34343406
 8007fa0:	340e3434 	.word	0x340e3434
 8007fa4:	2d253434 	.word	0x2d253434
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa8:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007fac:	2903      	cmp	r1, #3
 8007fae:	d129      	bne.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f10d 0106 	add.w	r1, sp, #6
 8007fb6:	e7d8      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007fb8:	8851      	ldrh	r1, [r2, #2]
 8007fba:	0a09      	lsrs	r1, r1, #8
 8007fbc:	2922      	cmp	r1, #34	; 0x22
 8007fbe:	d107      	bne.n	8007fd0 <USBD_CUSTOM_HID_Setup+0xa8>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007fc0:	88d2      	ldrh	r2, [r2, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007fc2:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007fc6:	2a21      	cmp	r2, #33	; 0x21
 8007fc8:	bf28      	it	cs
 8007fca:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007fcc:	6809      	ldr	r1, [r1, #0]
 8007fce:	e7cc      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007fd0:	2921      	cmp	r1, #33	; 0x21
 8007fd2:	d105      	bne.n	8007fe0 <USBD_CUSTOM_HID_Setup+0xb8>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007fd4:	88d2      	ldrh	r2, [r2, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 8007fd6:	490e      	ldr	r1, [pc, #56]	; (8008010 <USBD_CUSTOM_HID_Setup+0xe8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007fd8:	2a09      	cmp	r2, #9
 8007fda:	bf28      	it	cs
 8007fdc:	2209      	movcs	r2, #9
 8007fde:	e7c4      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
  uint8_t  *pbuf = NULL;
 8007fe0:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8007fe2:	460a      	mov	r2, r1
 8007fe4:	e7c1      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007fea:	2903      	cmp	r1, #3
 8007fec:	d10a      	bne.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f104 0114 	add.w	r1, r4, #20
 8007ff4:	e7b9      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff6:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007ffa:	2903      	cmp	r1, #3
 8007ffc:	d102      	bne.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8007ffe:	7893      	ldrb	r3, [r2, #2]
 8008000:	6163      	str	r3, [r4, #20]
 8008002:	e7ac      	b.n	8007f5e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8008008:	f000 fba3 	bl	8008752 <USBD_CtlError>
    ret = USBD_FAIL;
 800800c:	2002      	movs	r0, #2
    break;
 800800e:	e7a7      	b.n	8007f60 <USBD_CUSTOM_HID_Setup+0x38>
 8008010:	200000b4 	.word	0x200000b4

08008014 <USBD_CUSTOM_HID_DeInit>:
{
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008018:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800801a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800801c:	f017 fb78 	bl	801f710 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008020:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008022:	2101      	movs	r1, #1
 8008024:	4620      	mov	r0, r4
 8008026:	f017 fb73 	bl	801f710 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800802a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800802e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if(pdev->pClassData != NULL)
 8008032:	b14b      	cbz	r3, 8008048 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008034:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800803c:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8008040:	f017 fc04 	bl	801f84c <USBD_static_free>
    pdev->pClassData = NULL;
 8008044:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8008048:	2000      	movs	r0, #0
 800804a:	bd38      	pop	{r3, r4, r5, pc}

0800804c <USBD_CUSTOM_HID_Init>:
{
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	4605      	mov	r5, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008050:	2401      	movs	r4, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008052:	2340      	movs	r3, #64	; 0x40
 8008054:	2203      	movs	r2, #3
 8008056:	2181      	movs	r1, #129	; 0x81
 8008058:	f017 fb4a 	bl	801f6f0 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800805c:	230c      	movs	r3, #12
 800805e:	2203      	movs	r2, #3
 8008060:	4621      	mov	r1, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008062:	62ec      	str	r4, [r5, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008064:	4628      	mov	r0, r5
 8008066:	f017 fb43 	bl	801f6f0 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800806a:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 800806e:	2020      	movs	r0, #32
 8008070:	f017 fbe8 	bl	801f844 <USBD_static_malloc>
 8008074:	4606      	mov	r6, r0
 8008076:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800807a:	b168      	cbz	r0, 8008098 <USBD_CUSTOM_HID_Init+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800807c:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    hhid->state = CUSTOM_HID_IDLE;
 8008080:	2700      	movs	r7, #0
 8008082:	7707      	strb	r7, [r0, #28]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008088:	230c      	movs	r3, #12
 800808a:	4632      	mov	r2, r6
 800808c:	4621      	mov	r1, r4
 800808e:	4628      	mov	r0, r5
 8008090:	f017 fb98 	bl	801f7c4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008094:	4638      	mov	r0, r7
 8008096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 8008098:	4620      	mov	r0, r4
}
 800809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800809c <USBD_CUSTOM_HID_SendReport>:
{
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80080a0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80080a4:	2a03      	cmp	r2, #3
 80080a6:	d109      	bne.n	80080bc <USBD_CUSTOM_HID_SendReport+0x20>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80080a8:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    if(hhid->state == CUSTOM_HID_IDLE)
 80080ac:	7f35      	ldrb	r5, [r6, #28]
 80080ae:	2401      	movs	r4, #1
 80080b0:	b935      	cbnz	r5, 80080c0 <USBD_CUSTOM_HID_SendReport+0x24>
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80080b2:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 80080b4:	7734      	strb	r4, [r6, #28]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80080b6:	2181      	movs	r1, #129	; 0x81
 80080b8:	f017 fb76 	bl	801f7a8 <USBD_LL_Transmit>
  return USBD_OK;
 80080bc:	2000      	movs	r0, #0
 80080be:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 80080c0:	4620      	mov	r0, r4
}
 80080c2:	bd70      	pop	{r4, r5, r6, pc}

080080c4 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80080c4:	b119      	cbz	r1, 80080ce <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80080c6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80080ca:	2000      	movs	r0, #0
 80080cc:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80080ce:	2002      	movs	r0, #2
  }

  return ret;
}
 80080d0:	4770      	bx	lr

080080d2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080d2:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80080d4:	b180      	cbz	r0, 80080f8 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80080d6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80080da:	b113      	cbz	r3, 80080e2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80080e2:	b109      	cbz	r1, 80080e8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80080e4:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80080ee:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80080f0:	f017 fabc 	bl	801f66c <USBD_LL_Init>

  return USBD_OK;
 80080f4:	2000      	movs	r0, #0
 80080f6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80080f8:	2002      	movs	r0, #2
}
 80080fa:	bd08      	pop	{r3, pc}

080080fc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80080fc:	b119      	cbz	r1, 8008106 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080fe:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8008102:	2000      	movs	r0, #0
 8008104:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008106:	2002      	movs	r0, #2
  }

  return status;
}
 8008108:	4770      	bx	lr

0800810a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800810a:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800810c:	f017 fae2 	bl	801f6d4 <USBD_LL_Start>

  return USBD_OK;
}
 8008110:	2000      	movs	r0, #0
 8008112:	bd08      	pop	{r3, pc}

08008114 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008114:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8008116:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800811a:	b90b      	cbnz	r3, 8008120 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800811c:	2002      	movs	r0, #2
 800811e:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4798      	blx	r3
 8008124:	2800      	cmp	r0, #0
 8008126:	d1f9      	bne.n	800811c <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008128:	bd08      	pop	{r3, pc}

0800812a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800812a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800812c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4798      	blx	r3
  return USBD_OK;
}
 8008134:	2000      	movs	r0, #0
 8008136:	bd08      	pop	{r3, pc}

08008138 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800813c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8008140:	4628      	mov	r0, r5
 8008142:	f000 faf2 	bl	800872a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008146:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008148:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 800814c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8008150:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8008154:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8008158:	f001 031f 	and.w	r3, r1, #31
 800815c:	2b01      	cmp	r3, #1
 800815e:	d00e      	beq.n	800817e <USBD_LL_SetupStage+0x46>
 8008160:	d307      	bcc.n	8008172 <USBD_LL_SetupStage+0x3a>
 8008162:	2b02      	cmp	r3, #2
 8008164:	d010      	beq.n	8008188 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008166:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800816a:	4620      	mov	r0, r4
 800816c:	f017 fade 	bl	801f72c <USBD_LL_StallEP>
    break;
 8008170:	e003      	b.n	800817a <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8008172:	4629      	mov	r1, r5
 8008174:	4620      	mov	r0, r4
 8008176:	f000 f901 	bl	800837c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800817a:	2000      	movs	r0, #0
 800817c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800817e:	4629      	mov	r1, r5
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fa25 	bl	80085d0 <USBD_StdItfReq>
    break;
 8008186:	e7f8      	b.n	800817a <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8008188:	4629      	mov	r1, r5
 800818a:	4620      	mov	r0, r4
 800818c:	f000 fa45 	bl	800861a <USBD_StdEPReq>
    break;
 8008190:	e7f3      	b.n	800817a <USBD_LL_SetupStage+0x42>

08008192 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008192:	b570      	push	{r4, r5, r6, lr}
 8008194:	4605      	mov	r5, r0
 8008196:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008198:	bb39      	cbnz	r1, 80081ea <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800819a:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d11e      	bne.n	80081e0 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 80081a2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80081a6:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d90b      	bls.n	80081c6 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80081ae:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80081b0:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80081b2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80081b6:	bf8c      	ite	hi
 80081b8:	b29a      	uxthhi	r2, r3
 80081ba:	b292      	uxthls	r2, r2
 80081bc:	4631      	mov	r1, r6
 80081be:	f000 fb13 	bl	80087e8 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80081c2:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80081c6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	b123      	cbz	r3, 80081d8 <USBD_LL_DataOutStage+0x46>
 80081ce:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80081d2:	2a03      	cmp	r2, #3
 80081d4:	d100      	bne.n	80081d8 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80081d6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 fb0d 	bl	80087f8 <USBD_CtlSendStatus>
 80081de:	e7f0      	b.n	80081c2 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d1ee      	bne.n	80081c2 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 80081e4:	f017 faa2 	bl	801f72c <USBD_LL_StallEP>
 80081e8:	e7eb      	b.n	80081c2 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80081ea:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	b12b      	cbz	r3, 80081fe <USBD_LL_DataOutStage+0x6c>
 80081f2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80081f6:	2a03      	cmp	r2, #3
 80081f8:	d101      	bne.n	80081fe <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 80081fa:	4798      	blx	r3
 80081fc:	e7e1      	b.n	80081c2 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80081fe:	2002      	movs	r0, #2
}
 8008200:	bd70      	pop	{r4, r5, r6, pc}

08008202 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008202:	b570      	push	{r4, r5, r6, lr}
 8008204:	4613      	mov	r3, r2
 8008206:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008208:	460e      	mov	r6, r1
 800820a:	2900      	cmp	r1, #0
 800820c:	d148      	bne.n	80082a0 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800820e:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8008212:	2a02      	cmp	r2, #2
 8008214:	d13d      	bne.n	8008292 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008216:	6a05      	ldr	r5, [r0, #32]
 8008218:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800821a:	4295      	cmp	r5, r2
 800821c:	d914      	bls.n	8008248 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800821e:	1aaa      	subs	r2, r5, r2
 8008220:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008222:	4619      	mov	r1, r3
 8008224:	b292      	uxth	r2, r2
 8008226:	f000 fac8 	bl	80087ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800822a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800822c:	461a      	mov	r2, r3
 800822e:	4619      	mov	r1, r3
 8008230:	4620      	mov	r0, r4
 8008232:	f017 fac7 	bl	801f7c4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008236:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800823a:	2b01      	cmp	r3, #1
 800823c:	f04f 0000 	mov.w	r0, #0
 8008240:	d13a      	bne.n	80082b8 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008242:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8008246:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008248:	69c3      	ldr	r3, [r0, #28]
 800824a:	fbb3 f5f2 	udiv	r5, r3, r2
 800824e:	fb02 3515 	mls	r5, r2, r5, r3
 8008252:	b965      	cbnz	r5, 800826e <USBD_LL_DataInStage+0x6c>
 8008254:	429a      	cmp	r2, r3
 8008256:	d80a      	bhi.n	800826e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8008258:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800825c:	4293      	cmp	r3, r2
 800825e:	d206      	bcs.n	800826e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008260:	462a      	mov	r2, r5
 8008262:	f000 faaa 	bl	80087ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008266:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800826a:	462b      	mov	r3, r5
 800826c:	e7de      	b.n	800822c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800826e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	b12b      	cbz	r3, 8008282 <USBD_LL_DataInStage+0x80>
 8008276:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800827a:	2a03      	cmp	r2, #3
 800827c:	d101      	bne.n	8008282 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 800827e:	4620      	mov	r0, r4
 8008280:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8008282:	2180      	movs	r1, #128	; 0x80
 8008284:	4620      	mov	r0, r4
 8008286:	f017 fa51 	bl	801f72c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800828a:	4620      	mov	r0, r4
 800828c:	f000 fabf 	bl	800880e <USBD_CtlReceiveStatus>
 8008290:	e7d1      	b.n	8008236 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008292:	f032 0304 	bics.w	r3, r2, #4
 8008296:	d1ce      	bne.n	8008236 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8008298:	2180      	movs	r1, #128	; 0x80
 800829a:	f017 fa47 	bl	801f72c <USBD_LL_StallEP>
 800829e:	e7ca      	b.n	8008236 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80082a0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	b133      	cbz	r3, 80082b6 <USBD_LL_DataInStage+0xb4>
 80082a8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80082ac:	2a03      	cmp	r2, #3
 80082ae:	d102      	bne.n	80082b6 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80082b0:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80082b2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80082b6:	2002      	movs	r0, #2
}
 80082b8:	bd70      	pop	{r4, r5, r6, pc}

080082ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80082ba:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082bc:	2200      	movs	r2, #0
{
 80082be:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c0:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082c2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082c4:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	f017 fa12 	bl	801f6f0 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082cc:	4633      	mov	r3, r6
 80082ce:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082d0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082d4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082d8:	2200      	movs	r2, #0
 80082da:	4620      	mov	r0, r4
 80082dc:	f017 fa08 	bl	801f6f0 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80082e0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082e4:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80082e6:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082e8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082ea:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80082ee:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80082f2:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80082f4:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80082f8:	b123      	cbz	r3, 8008304 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082fa:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80082fe:	4620      	mov	r0, r4
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008304:	2000      	movs	r0, #0
 8008306:	bd70      	pop	{r4, r5, r6, pc}

08008308 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008308:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800830a:	2000      	movs	r0, #0
 800830c:	4770      	bx	lr

0800830e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800830e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008312:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008316:	2304      	movs	r3, #4
 8008318:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800831c:	2000      	movs	r0, #0
 800831e:	4770      	bx	lr

08008320 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8008320:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8008324:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8008328:	2000      	movs	r0, #0
 800832a:	4770      	bx	lr

0800832c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800832c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800832e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008332:	2a03      	cmp	r2, #3
 8008334:	d104      	bne.n	8008340 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8008336:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	b103      	cbz	r3, 8008340 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800833e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8008340:	2000      	movs	r0, #0
 8008342:	bd08      	pop	{r3, pc}

08008344 <USBD_LL_IsoINIncomplete>:
 8008344:	2000      	movs	r0, #0
 8008346:	4770      	bx	lr

08008348 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8008348:	2000      	movs	r0, #0
 800834a:	4770      	bx	lr

0800834c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800834c:	2000      	movs	r0, #0
 800834e:	4770      	bx	lr

08008350 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008350:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008352:	2201      	movs	r2, #1
 8008354:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008358:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 800835c:	7901      	ldrb	r1, [r0, #4]
 800835e:	6852      	ldr	r2, [r2, #4]
 8008360:	4790      	blx	r2

  return USBD_OK;
}
 8008362:	2000      	movs	r0, #0
 8008364:	bd08      	pop	{r3, pc}

08008366 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8008366:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8008368:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800836a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800836c:	f017 f9de 	bl	801f72c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008370:	4620      	mov	r0, r4
 8008372:	2100      	movs	r1, #0
}
 8008374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8008378:	f017 b9d8 	b.w	801f72c <USBD_LL_StallEP>

0800837c <USBD_StdDevReq>:
{
 800837c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800837e:	780b      	ldrb	r3, [r1, #0]
 8008380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008384:	2b20      	cmp	r3, #32
{
 8008386:	4604      	mov	r4, r0
 8008388:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800838a:	d014      	beq.n	80083b6 <USBD_StdDevReq+0x3a>
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d012      	beq.n	80083b6 <USBD_StdDevReq+0x3a>
 8008390:	2b00      	cmp	r3, #0
 8008392:	f040 809c 	bne.w	80084ce <USBD_StdDevReq+0x152>
    switch (req->bRequest)
 8008396:	784b      	ldrb	r3, [r1, #1]
 8008398:	2b09      	cmp	r3, #9
 800839a:	f200 8097 	bhi.w	80084cc <USBD_StdDevReq+0x150>
 800839e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80083a2:	00ef      	.short	0x00ef
 80083a4:	00950109 	.word	0x00950109
 80083a8:	00950102 	.word	0x00950102
 80083ac:	00130089 	.word	0x00130089
 80083b0:	00da0095 	.word	0x00da0095
 80083b4:	00a7      	.short	0x00a7
    pdev->pClass->Setup(pdev, req);
 80083b6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80083ba:	4629      	mov	r1, r5
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	4620      	mov	r0, r4
 80083c0:	4798      	blx	r3
}
 80083c2:	2000      	movs	r0, #0
 80083c4:	b003      	add	sp, #12
 80083c6:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80083c8:	8849      	ldrh	r1, [r1, #2]
 80083ca:	0a0b      	lsrs	r3, r1, #8
 80083cc:	3b01      	subs	r3, #1
 80083ce:	2b0e      	cmp	r3, #14
 80083d0:	d87c      	bhi.n	80084cc <USBD_StdDevReq+0x150>
 80083d2:	e8df f003 	tbb	[pc, r3]
 80083d6:	2824      	.short	0x2824
 80083d8:	5c7b7b35 	.word	0x5c7b7b35
 80083dc:	7b7b7b65 	.word	0x7b7b7b65
 80083e0:	7b7b7b7b 	.word	0x7b7b7b7b
 80083e4:	08          	.byte	0x08
 80083e5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80083e6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80083ea:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083ec:	7c20      	ldrb	r0, [r4, #16]
 80083ee:	f10d 0106 	add.w	r1, sp, #6
 80083f2:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80083f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80083f8:	b152      	cbz	r2, 8008410 <USBD_StdDevReq+0x94>
 80083fa:	88eb      	ldrh	r3, [r5, #6]
 80083fc:	b143      	cbz	r3, 8008410 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 80083fe:	429a      	cmp	r2, r3
 8008400:	bf28      	it	cs
 8008402:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8008404:	4601      	mov	r1, r0
 8008406:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8008408:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800840c:	f000 f9c8 	bl	80087a0 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8008410:	88eb      	ldrh	r3, [r5, #6]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1d5      	bne.n	80083c2 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8008416:	4620      	mov	r0, r4
 8008418:	f000 f9ee 	bl	80087f8 <USBD_CtlSendStatus>
 800841c:	e7d1      	b.n	80083c2 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800841e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	e7e2      	b.n	80083ec <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008426:	7c02      	ldrb	r2, [r0, #16]
 8008428:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800842c:	b932      	cbnz	r2, 800843c <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008430:	f10d 0006 	add.w	r0, sp, #6
 8008434:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008436:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008438:	7043      	strb	r3, [r0, #1]
 800843a:	e7db      	b.n	80083f4 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	e7f7      	b.n	8008430 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8008440:	b2c9      	uxtb	r1, r1
 8008442:	2905      	cmp	r1, #5
 8008444:	d81c      	bhi.n	8008480 <USBD_StdDevReq+0x104>
 8008446:	e8df f001 	tbb	[pc, r1]
 800844a:	0703      	.short	0x0703
 800844c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008450:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	e7c9      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008458:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	e7c5      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008460:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	e7c1      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008468:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	e7bd      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008470:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	e7b9      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008478:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	e7b5      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8008480:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008484:	f10d 0206 	add.w	r2, sp, #6
 8008488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848a:	4798      	blx	r3
 800848c:	e7b2      	b.n	80083f4 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800848e:	7c03      	ldrb	r3, [r0, #16]
 8008490:	b9e3      	cbnz	r3, 80084cc <USBD_StdDevReq+0x150>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008492:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008496:	f10d 0006 	add.w	r0, sp, #6
 800849a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849c:	4798      	blx	r3
 800849e:	e7a9      	b.n	80083f4 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80084a0:	7c03      	ldrb	r3, [r0, #16]
 80084a2:	b99b      	cbnz	r3, 80084cc <USBD_StdDevReq+0x150>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084a4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80084a8:	f10d 0006 	add.w	r0, sp, #6
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084b0:	2307      	movs	r3, #7
 80084b2:	e7c1      	b.n	8008438 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084b4:	888b      	ldrh	r3, [r1, #4]
 80084b6:	b94b      	cbnz	r3, 80084cc <USBD_StdDevReq+0x150>
 80084b8:	88cb      	ldrh	r3, [r1, #6]
 80084ba:	b93b      	cbnz	r3, 80084cc <USBD_StdDevReq+0x150>
 80084bc:	884d      	ldrh	r5, [r1, #2]
 80084be:	2d7f      	cmp	r5, #127	; 0x7f
 80084c0:	d804      	bhi.n	80084cc <USBD_StdDevReq+0x150>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80084c6:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084c8:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	d103      	bne.n	80084d4 <USBD_StdDevReq+0x158>
      USBD_CtlError(pdev, req);
 80084cc:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80084ce:	f7ff ff4a 	bl	8008366 <USBD_CtlError.constprop.1>
    break;
 80084d2:	e776      	b.n	80083c2 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 80084d4:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084d8:	f017 f958 	bl	801f78c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 f98b 	bl	80087f8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80084e2:	b11d      	cbz	r5, 80084ec <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e4:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084e6:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80084ea:	e76a      	b.n	80083c2 <USBD_StdDevReq+0x46>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e7fa      	b.n	80084e6 <USBD_StdDevReq+0x16a>
  cfgidx = (uint8_t)(req->wValue);
 80084f0:	7889      	ldrb	r1, [r1, #2]
 80084f2:	4d36      	ldr	r5, [pc, #216]	; (80085cc <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084f4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80084f6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084f8:	d8e8      	bhi.n	80084cc <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 80084fa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d008      	beq.n	8008514 <USBD_StdDevReq+0x198>
 8008502:	2b03      	cmp	r3, #3
 8008504:	d015      	beq.n	8008532 <USBD_StdDevReq+0x1b6>
      USBD_CtlError(pdev, req);
 8008506:	f7ff ff2e 	bl	8008366 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 800850a:	7829      	ldrb	r1, [r5, #0]
 800850c:	4620      	mov	r0, r4
 800850e:	f7ff fe0c 	bl	800812a <USBD_ClrClassConfig>
 8008512:	e756      	b.n	80083c2 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8008514:	2900      	cmp	r1, #0
 8008516:	f43f af7e 	beq.w	8008416 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 800851a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800851c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800851e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008520:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008524:	4620      	mov	r0, r4
 8008526:	f7ff fdf5 	bl	8008114 <USBD_SetClassConfig>
 800852a:	2802      	cmp	r0, #2
 800852c:	f47f af73 	bne.w	8008416 <USBD_StdDevReq+0x9a>
 8008530:	e7cc      	b.n	80084cc <USBD_StdDevReq+0x150>
      if (cfgidx == 0U)
 8008532:	b931      	cbnz	r1, 8008542 <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008534:	2302      	movs	r3, #2
 8008536:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800853a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800853c:	f7ff fdf5 	bl	800812a <USBD_ClrClassConfig>
 8008540:	e769      	b.n	8008416 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8008542:	6841      	ldr	r1, [r0, #4]
 8008544:	2901      	cmp	r1, #1
 8008546:	f43f af66 	beq.w	8008416 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800854a:	b2c9      	uxtb	r1, r1
 800854c:	f7ff fded 	bl	800812a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008550:	7829      	ldrb	r1, [r5, #0]
 8008552:	6061      	str	r1, [r4, #4]
 8008554:	e7e6      	b.n	8008524 <USBD_StdDevReq+0x1a8>
  if (req->wLength != 1U)
 8008556:	88ca      	ldrh	r2, [r1, #6]
 8008558:	2a01      	cmp	r2, #1
 800855a:	d1b7      	bne.n	80084cc <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 800855c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008560:	2b00      	cmp	r3, #0
 8008562:	d0b3      	beq.n	80084cc <USBD_StdDevReq+0x150>
 8008564:	2b02      	cmp	r3, #2
 8008566:	d903      	bls.n	8008570 <USBD_StdDevReq+0x1f4>
 8008568:	2b03      	cmp	r3, #3
 800856a:	d1af      	bne.n	80084cc <USBD_StdDevReq+0x150>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800856c:	1d01      	adds	r1, r0, #4
 800856e:	e003      	b.n	8008578 <USBD_StdDevReq+0x1fc>
      pdev->dev_default_config = 0U;
 8008570:	4601      	mov	r1, r0
 8008572:	2300      	movs	r3, #0
 8008574:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008578:	4620      	mov	r0, r4
 800857a:	f000 f911 	bl	80087a0 <USBD_CtlSendData>
 800857e:	e720      	b.n	80083c2 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8008580:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008584:	3b01      	subs	r3, #1
 8008586:	2b02      	cmp	r3, #2
 8008588:	d8a0      	bhi.n	80084cc <USBD_StdDevReq+0x150>
    if(req->wLength != 0x2U)
 800858a:	88cb      	ldrh	r3, [r1, #6]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d19d      	bne.n	80084cc <USBD_StdDevReq+0x150>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008590:	2301      	movs	r3, #1
 8008592:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8008594:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8008598:	b10b      	cbz	r3, 800859e <USBD_StdDevReq+0x222>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800859a:	2303      	movs	r3, #3
 800859c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800859e:	2202      	movs	r2, #2
 80085a0:	f104 010c 	add.w	r1, r4, #12
 80085a4:	e7e8      	b.n	8008578 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085a6:	884b      	ldrh	r3, [r1, #2]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	f47f af0a 	bne.w	80083c2 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 80085ae:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80085b2:	e730      	b.n	8008416 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 80085b4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80085b8:	3b01      	subs	r3, #1
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d886      	bhi.n	80084cc <USBD_StdDevReq+0x150>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085be:	884b      	ldrh	r3, [r1, #2]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	f47f aefe 	bne.w	80083c2 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e7f1      	b.n	80085ae <USBD_StdDevReq+0x232>
 80085ca:	bf00      	nop
 80085cc:	200015d4 	.word	0x200015d4

080085d0 <USBD_StdItfReq>:
{
 80085d0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d2:	780b      	ldrb	r3, [r1, #0]
 80085d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085d8:	2b20      	cmp	r3, #32
{
 80085da:	4604      	mov	r4, r0
 80085dc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085de:	d002      	beq.n	80085e6 <USBD_StdItfReq+0x16>
 80085e0:	2b40      	cmp	r3, #64	; 0x40
 80085e2:	d000      	beq.n	80085e6 <USBD_StdItfReq+0x16>
 80085e4:	b9b3      	cbnz	r3, 8008614 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 80085e6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80085ea:	3b01      	subs	r3, #1
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d810      	bhi.n	8008612 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085f0:	792b      	ldrb	r3, [r5, #4]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d80d      	bhi.n	8008612 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80085f6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80085fa:	4629      	mov	r1, r5
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4620      	mov	r0, r4
 8008600:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008602:	88eb      	ldrh	r3, [r5, #6]
 8008604:	b91b      	cbnz	r3, 800860e <USBD_StdItfReq+0x3e>
 8008606:	b910      	cbnz	r0, 800860e <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8008608:	4620      	mov	r0, r4
 800860a:	f000 f8f5 	bl	80087f8 <USBD_CtlSendStatus>
}
 800860e:	2000      	movs	r0, #0
 8008610:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8008612:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8008614:	f7ff fea7 	bl	8008366 <USBD_CtlError.constprop.1>
    break;
 8008618:	e7f9      	b.n	800860e <USBD_StdItfReq+0x3e>

0800861a <USBD_StdEPReq>:
{
 800861a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800861c:	780a      	ldrb	r2, [r1, #0]
 800861e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008622:	2a20      	cmp	r2, #32
{
 8008624:	4604      	mov	r4, r0
 8008626:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008628:	d013      	beq.n	8008652 <USBD_StdEPReq+0x38>
 800862a:	2a40      	cmp	r2, #64	; 0x40
 800862c:	d011      	beq.n	8008652 <USBD_StdEPReq+0x38>
 800862e:	b96a      	cbnz	r2, 800864c <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8008630:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008632:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8008634:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8008636:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8008638:	d01f      	beq.n	800867a <USBD_StdEPReq+0x60>
 800863a:	d335      	bcc.n	80086a8 <USBD_StdEPReq+0x8e>
 800863c:	2d03      	cmp	r5, #3
 800863e:	d105      	bne.n	800864c <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8008640:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008644:	2a02      	cmp	r2, #2
 8008646:	d026      	beq.n	8008696 <USBD_StdEPReq+0x7c>
 8008648:	2a03      	cmp	r2, #3
 800864a:	d00a      	beq.n	8008662 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 800864c:	f7ff fe8b 	bl	8008366 <USBD_CtlError.constprop.1>
    break;
 8008650:	e005      	b.n	800865e <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8008652:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8008656:	4619      	mov	r1, r3
 8008658:	6892      	ldr	r2, [r2, #8]
 800865a:	4620      	mov	r0, r4
 800865c:	4790      	blx	r2
}
 800865e:	2000      	movs	r0, #0
 8008660:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008662:	885a      	ldrh	r2, [r3, #2]
 8008664:	b92a      	cbnz	r2, 8008672 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008666:	064a      	lsls	r2, r1, #25
 8008668:	d003      	beq.n	8008672 <USBD_StdEPReq+0x58>
 800866a:	88db      	ldrh	r3, [r3, #6]
 800866c:	b90b      	cbnz	r3, 8008672 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 800866e:	f017 f85d 	bl	801f72c <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8008672:	4620      	mov	r0, r4
 8008674:	f000 f8c0 	bl	80087f8 <USBD_CtlSendStatus>
        break;
 8008678:	e7f1      	b.n	800865e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 800867a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800867e:	2a02      	cmp	r2, #2
 8008680:	d009      	beq.n	8008696 <USBD_StdEPReq+0x7c>
 8008682:	2a03      	cmp	r2, #3
 8008684:	d1e2      	bne.n	800864c <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008686:	885b      	ldrh	r3, [r3, #2]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e8      	bne.n	800865e <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 800868c:	064d      	lsls	r5, r1, #25
 800868e:	d0f0      	beq.n	8008672 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008690:	f017 f85a 	bl	801f748 <USBD_LL_ClearStallEP>
 8008694:	e7ed      	b.n	8008672 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008696:	064b      	lsls	r3, r1, #25
 8008698:	d017      	beq.n	80086ca <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 800869a:	f017 f847 	bl	801f72c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800869e:	2180      	movs	r1, #128	; 0x80
 80086a0:	4620      	mov	r0, r4
 80086a2:	f017 f843 	bl	801f72c <USBD_LL_StallEP>
 80086a6:	e7da      	b.n	800865e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80086a8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d00e      	beq.n	80086ce <USBD_StdEPReq+0xb4>
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d1cb      	bne.n	800864c <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 80086b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80086b8:	f04f 0314 	mov.w	r3, #20
 80086bc:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086c0:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 80086c4:	d012      	beq.n	80086ec <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086c6:	6992      	ldr	r2, [r2, #24]
 80086c8:	b9da      	cbnz	r2, 8008702 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80086ca:	4620      	mov	r0, r4
 80086cc:	e7be      	b.n	800864c <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ce:	0649      	lsls	r1, r1, #25
 80086d0:	d1fb      	bne.n	80086ca <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80086d2:	0613      	lsls	r3, r2, #24
 80086d4:	bf4c      	ite	mi
 80086d6:	f100 0114 	addmi.w	r1, r0, #20
 80086da:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80086de:	2300      	movs	r3, #0
 80086e0:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086e2:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 f85b 	bl	80087a0 <USBD_CtlSendData>
          break;
 80086ea:	e7b8      	b.n	800865e <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086ec:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	d0ea      	beq.n	80086ca <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80086f4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80086f8:	fb03 0505 	mla	r5, r3, r5, r0
 80086fc:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8008700:	e004      	b.n	800870c <USBD_StdEPReq+0xf2>
 8008702:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8008706:	fb05 3503 	mla	r5, r5, r3, r3
 800870a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800870c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8008710:	d103      	bne.n	800871a <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8008712:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008714:	2202      	movs	r2, #2
 8008716:	4629      	mov	r1, r5
 8008718:	e7e4      	b.n	80086e4 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800871a:	4620      	mov	r0, r4
 800871c:	f017 f822 	bl	801f764 <USBD_LL_IsStallEP>
 8008720:	b108      	cbz	r0, 8008726 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8008722:	2301      	movs	r3, #1
 8008724:	e7f5      	b.n	8008712 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8008726:	6028      	str	r0, [r5, #0]
 8008728:	e7f4      	b.n	8008714 <USBD_StdEPReq+0xfa>

0800872a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800872a:	780b      	ldrb	r3, [r1, #0]
 800872c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800872e:	784b      	ldrb	r3, [r1, #1]
 8008730:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008732:	78ca      	ldrb	r2, [r1, #3]
 8008734:	788b      	ldrb	r3, [r1, #2]
 8008736:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800873a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800873c:	794a      	ldrb	r2, [r1, #5]
 800873e:	790b      	ldrb	r3, [r1, #4]
 8008740:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008744:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008746:	79ca      	ldrb	r2, [r1, #7]
 8008748:	798b      	ldrb	r3, [r1, #6]
 800874a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800874e:	80c3      	strh	r3, [r0, #6]
 8008750:	4770      	bx	lr

08008752 <USBD_CtlError>:
{
 8008752:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8008754:	2180      	movs	r1, #128	; 0x80
{
 8008756:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8008758:	f016 ffe8 	bl	801f72c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800875c:	4620      	mov	r0, r4
 800875e:	2100      	movs	r1, #0
}
 8008760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8008764:	f016 bfe2 	b.w	801f72c <USBD_LL_StallEP>

08008768 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008768:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800876a:	b188      	cbz	r0, 8008790 <USBD_GetString+0x28>
 800876c:	4605      	mov	r5, r0
 800876e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8008770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2c00      	cmp	r4, #0
 8008778:	d1f9      	bne.n	800876e <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800877a:	3301      	adds	r3, #1
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008780:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008782:	2303      	movs	r3, #3
 8008784:	704b      	strb	r3, [r1, #1]
 8008786:	3801      	subs	r0, #1
 8008788:	2302      	movs	r3, #2
    while (*desc != '\0')
 800878a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800878e:	b905      	cbnz	r5, 8008792 <USBD_GetString+0x2a>
 8008790:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	b2d2      	uxtb	r2, r2
 8008796:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8008798:	3302      	adds	r3, #2
 800879a:	b2db      	uxtb	r3, r3
 800879c:	548c      	strb	r4, [r1, r2]
 800879e:	e7f4      	b.n	800878a <USBD_GetString+0x22>

080087a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80087a0:	b510      	push	{r4, lr}
 80087a2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087a4:	2202      	movs	r2, #2
 80087a6:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80087aa:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80087ac:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80087ae:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80087b0:	2100      	movs	r1, #0
 80087b2:	f016 fff9 	bl	801f7a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80087b6:	2000      	movs	r0, #0
 80087b8:	bd10      	pop	{r4, pc}

080087ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80087ba:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80087bc:	4613      	mov	r3, r2
 80087be:	460a      	mov	r2, r1
 80087c0:	2100      	movs	r1, #0
 80087c2:	f016 fff1 	bl	801f7a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80087c6:	2000      	movs	r0, #0
 80087c8:	bd08      	pop	{r3, pc}

080087ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80087ca:	b510      	push	{r4, lr}
 80087cc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087ce:	2203      	movs	r2, #3
 80087d0:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80087d4:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80087d8:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80087da:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80087de:	2100      	movs	r1, #0
 80087e0:	f016 fff0 	bl	801f7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80087e4:	2000      	movs	r0, #0
 80087e6:	bd10      	pop	{r4, pc}

080087e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80087e8:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087ea:	4613      	mov	r3, r2
 80087ec:	460a      	mov	r2, r1
 80087ee:	2100      	movs	r1, #0
 80087f0:	f016 ffe8 	bl	801f7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80087f4:	2000      	movs	r0, #0
 80087f6:	bd08      	pop	{r3, pc}

080087f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80087f8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087fa:	2304      	movs	r3, #4
 80087fc:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008800:	2300      	movs	r3, #0
 8008802:	461a      	mov	r2, r3
 8008804:	4619      	mov	r1, r3
 8008806:	f016 ffcf 	bl	801f7a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800880a:	2000      	movs	r0, #0
 800880c:	bd08      	pop	{r3, pc}

0800880e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800880e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008810:	2305      	movs	r3, #5
 8008812:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008816:	2300      	movs	r3, #0
 8008818:	461a      	mov	r2, r3
 800881a:	4619      	mov	r1, r3
 800881c:	f016 ffd2 	bl	801f7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008820:	2000      	movs	r0, #0
 8008822:	bd08      	pop	{r3, pc}

08008824 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008824:	4b03      	ldr	r3, [pc, #12]	; (8008834 <disk_status+0x10>)
 8008826:	181a      	adds	r2, r3, r0
 8008828:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800882c:	7a10      	ldrb	r0, [r2, #8]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	4718      	bx	r3
 8008834:	20001600 	.word	0x20001600

08008838 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008838:	4b06      	ldr	r3, [pc, #24]	; (8008854 <disk_initialize+0x1c>)
 800883a:	5c1a      	ldrb	r2, [r3, r0]
 800883c:	b942      	cbnz	r2, 8008850 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800883e:	2201      	movs	r2, #1
 8008840:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008842:	181a      	adds	r2, r3, r0
 8008844:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008848:	7a10      	ldrb	r0, [r2, #8]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4718      	bx	r3
  }
  return stat;
}
 8008850:	2000      	movs	r0, #0
 8008852:	4770      	bx	lr
 8008854:	20001600 	.word	0x20001600

08008858 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008858:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800885a:	4c05      	ldr	r4, [pc, #20]	; (8008870 <disk_read+0x18>)
 800885c:	1825      	adds	r5, r4, r0
 800885e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008862:	6860      	ldr	r0, [r4, #4]
 8008864:	6884      	ldr	r4, [r0, #8]
 8008866:	7a28      	ldrb	r0, [r5, #8]
 8008868:	46a4      	mov	ip, r4
  return res;
}
 800886a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800886c:	4760      	bx	ip
 800886e:	bf00      	nop
 8008870:	20001600 	.word	0x20001600

08008874 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008874:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008876:	4c05      	ldr	r4, [pc, #20]	; (800888c <disk_write+0x18>)
 8008878:	1825      	adds	r5, r4, r0
 800887a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800887e:	6860      	ldr	r0, [r4, #4]
 8008880:	68c4      	ldr	r4, [r0, #12]
 8008882:	7a28      	ldrb	r0, [r5, #8]
 8008884:	46a4      	mov	ip, r4
  return res;
}
 8008886:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008888:	4760      	bx	ip
 800888a:	bf00      	nop
 800888c:	20001600 	.word	0x20001600

08008890 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <disk_ioctl+0x18>)
{
 8008892:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008894:	181c      	adds	r4, r3, r0
 8008896:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800889a:	7a20      	ldrb	r0, [r4, #8]
 800889c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800889e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	4718      	bx	r3
 80088a6:	bf00      	nop
 80088a8:	20001600 	.word	0x20001600

080088ac <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80088ac:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80088ae:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80088b0:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80088b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80088b6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80088ba:	4770      	bx	lr

080088bc <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80088bc:	0a0b      	lsrs	r3, r1, #8
 80088be:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80088c0:	7043      	strb	r3, [r0, #1]
 80088c2:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80088c4:	0e09      	lsrs	r1, r1, #24
 80088c6:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80088c8:	70c1      	strb	r1, [r0, #3]
 80088ca:	4770      	bx	lr

080088cc <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80088cc:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80088ce:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80088d2:	4290      	cmp	r0, r2
 80088d4:	d1fb      	bne.n	80088ce <mem_set+0x2>
}
 80088d6:	4770      	bx	lr

080088d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088d8:	4b15      	ldr	r3, [pc, #84]	; (8008930 <chk_lock+0x58>)
 80088da:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088dc:	2500      	movs	r5, #0
 80088de:	462a      	mov	r2, r5
 80088e0:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 80088e2:	681e      	ldr	r6, [r3, #0]
 80088e4:	b1a6      	cbz	r6, 8008910 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088e6:	6807      	ldr	r7, [r0, #0]
 80088e8:	42be      	cmp	r6, r7
 80088ea:	d112      	bne.n	8008912 <chk_lock+0x3a>
 80088ec:	685f      	ldr	r7, [r3, #4]
 80088ee:	6886      	ldr	r6, [r0, #8]
 80088f0:	42b7      	cmp	r7, r6
 80088f2:	d10e      	bne.n	8008912 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80088f4:	689f      	ldr	r7, [r3, #8]
 80088f6:	6946      	ldr	r6, [r0, #20]
 80088f8:	42b7      	cmp	r7, r6
 80088fa:	d10a      	bne.n	8008912 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80088fc:	b9b1      	cbnz	r1, 800892c <chk_lock+0x54>
 80088fe:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8008902:	8993      	ldrh	r3, [r2, #12]
 8008904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008908:	bf14      	ite	ne
 800890a:	2000      	movne	r0, #0
 800890c:	2010      	moveq	r0, #16
 800890e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8008910:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008912:	3201      	adds	r2, #1
 8008914:	2a02      	cmp	r2, #2
 8008916:	f103 0310 	add.w	r3, r3, #16
 800891a:	d1e2      	bne.n	80088e2 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800891c:	b10d      	cbz	r5, 8008922 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800891e:	2000      	movs	r0, #0
 8008920:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008922:	2902      	cmp	r1, #2
 8008924:	bf0c      	ite	eq
 8008926:	2000      	moveq	r0, #0
 8008928:	2012      	movne	r0, #18
 800892a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800892c:	2010      	movs	r0, #16
 800892e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008930:	200015dc 	.word	0x200015dc

08008934 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008934:	4a1c      	ldr	r2, [pc, #112]	; (80089a8 <inc_lock+0x74>)
 8008936:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8008938:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800893a:	2300      	movs	r3, #0
 800893c:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 800893e:	6814      	ldr	r4, [r2, #0]
 8008940:	42ac      	cmp	r4, r5
 8008942:	d107      	bne.n	8008954 <inc_lock+0x20>
 8008944:	6857      	ldr	r7, [r2, #4]
 8008946:	6884      	ldr	r4, [r0, #8]
 8008948:	42a7      	cmp	r7, r4
 800894a:	d103      	bne.n	8008954 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 800894c:	6897      	ldr	r7, [r2, #8]
 800894e:	6944      	ldr	r4, [r0, #20]
 8008950:	42a7      	cmp	r7, r4
 8008952:	d01d      	beq.n	8008990 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008954:	3301      	adds	r3, #1
 8008956:	2b02      	cmp	r3, #2
 8008958:	f102 0210 	add.w	r2, r2, #16
 800895c:	d1ef      	bne.n	800893e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800895e:	6833      	ldr	r3, [r6, #0]
 8008960:	b113      	cbz	r3, 8008968 <inc_lock+0x34>
 8008962:	6933      	ldr	r3, [r6, #16]
 8008964:	b9eb      	cbnz	r3, 80089a2 <inc_lock+0x6e>
 8008966:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8008968:	011c      	lsls	r4, r3, #4
 800896a:	1932      	adds	r2, r6, r4
 800896c:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 800896e:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8008970:	6940      	ldr	r0, [r0, #20]
 8008972:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8008974:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8008976:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8008978:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800897a:	b979      	cbnz	r1, 800899c <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800897c:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008980:	8992      	ldrh	r2, [r2, #12]
 8008982:	3201      	adds	r2, #1
 8008984:	b292      	uxth	r2, r2
 8008986:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 800898a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800898c:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 800898e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008990:	2900      	cmp	r1, #0
 8008992:	d0f3      	beq.n	800897c <inc_lock+0x48>
 8008994:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008998:	8992      	ldrh	r2, [r2, #12]
 800899a:	b912      	cbnz	r2, 80089a2 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800899c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089a0:	e7f1      	b.n	8008986 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80089a2:	2000      	movs	r0, #0
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a6:	bf00      	nop
 80089a8:	200015dc 	.word	0x200015dc

080089ac <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80089ac:	3801      	subs	r0, #1
 80089ae:	2801      	cmp	r0, #1
 80089b0:	d80e      	bhi.n	80089d0 <dec_lock+0x24>
		n = Files[i].ctr;
 80089b2:	4a09      	ldr	r2, [pc, #36]	; (80089d8 <dec_lock+0x2c>)
 80089b4:	0103      	lsls	r3, r0, #4
 80089b6:	18d1      	adds	r1, r2, r3
 80089b8:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 80089ba:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80089be:	b280      	uxth	r0, r0
 80089c0:	b108      	cbz	r0, 80089c6 <dec_lock+0x1a>
 80089c2:	1e48      	subs	r0, r1, #1
 80089c4:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 80089c6:	18d1      	adds	r1, r2, r3
 80089c8:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089ca:	b918      	cbnz	r0, 80089d4 <dec_lock+0x28>
 80089cc:	50d0      	str	r0, [r2, r3]
 80089ce:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089d0:	2002      	movs	r0, #2
 80089d2:	4770      	bx	lr
		res = FR_OK;
 80089d4:	2000      	movs	r0, #0
	}
	return res;
}
 80089d6:	4770      	bx	lr
 80089d8:	200015dc 	.word	0x200015dc

080089dc <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089dc:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 80089de:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089e0:	3b02      	subs	r3, #2
 80089e2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80089e4:	bf3d      	ittte	cc
 80089e6:	8943      	ldrhcc	r3, [r0, #10]
 80089e8:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 80089ea:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089ee:	2000      	movcs	r0, #0
}
 80089f0:	4770      	bx	lr

080089f2 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 80089f4:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 80089f6:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089f8:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	fbb1 f1f3 	udiv	r1, r1, r3
 8008a00:	8963      	ldrh	r3, [r4, #10]
 8008a02:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a06:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008a08:	b130      	cbz	r0, 8008a18 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008a0a:	4281      	cmp	r1, r0
 8008a0c:	d302      	bcc.n	8008a14 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a0e:	1a09      	subs	r1, r1, r0
 8008a10:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a12:	e7f8      	b.n	8008a06 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a14:	6850      	ldr	r0, [r2, #4]
 8008a16:	4408      	add	r0, r1
}
 8008a18:	bd10      	pop	{r4, pc}

08008a1a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a1a:	6802      	ldr	r2, [r0, #0]
{
 8008a1c:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008a1e:	b152      	cbz	r2, 8008a36 <get_ldnumber+0x1c>
 8008a20:	4611      	mov	r1, r2
 8008a22:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a28:	2c20      	cmp	r4, #32
 8008a2a:	d90c      	bls.n	8008a46 <get_ldnumber+0x2c>
 8008a2c:	2c3a      	cmp	r4, #58	; 0x3a
 8008a2e:	d1f8      	bne.n	8008a22 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8008a30:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a32:	428b      	cmp	r3, r1
 8008a34:	d002      	beq.n	8008a3c <get_ldnumber+0x22>
	int vol = -1;
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008a3a:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008a3c:	7812      	ldrb	r2, [r2, #0]
 8008a3e:	2a30      	cmp	r2, #48	; 0x30
 8008a40:	d1f9      	bne.n	8008a36 <get_ldnumber+0x1c>
					*path = ++tt;
 8008a42:	3301      	adds	r3, #1
 8008a44:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8008a46:	2000      	movs	r0, #0
 8008a48:	bd10      	pop	{r4, pc}

08008a4a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008a4a:	b538      	push	{r3, r4, r5, lr}
 8008a4c:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008a4e:	4604      	mov	r4, r0
 8008a50:	b918      	cbnz	r0, 8008a5a <validate+0x10>
		*fs = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8008a56:	2009      	movs	r0, #9
 8008a58:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008a5a:	6803      	ldr	r3, [r0, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d0f8      	beq.n	8008a52 <validate+0x8>
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	d0f5      	beq.n	8008a52 <validate+0x8>
 8008a66:	88d9      	ldrh	r1, [r3, #6]
 8008a68:	8882      	ldrh	r2, [r0, #4]
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	d1f1      	bne.n	8008a52 <validate+0x8>
 8008a6e:	7858      	ldrb	r0, [r3, #1]
 8008a70:	f7ff fed8 	bl	8008824 <disk_status>
 8008a74:	f010 0001 	ands.w	r0, r0, #1
 8008a78:	d1eb      	bne.n	8008a52 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}

08008a80 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a80:	3801      	subs	r0, #1
 8008a82:	440a      	add	r2, r1
			*d++ = *s++;
 8008a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a88:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8008a8c:	4291      	cmp	r1, r2
 8008a8e:	d1f9      	bne.n	8008a84 <mem_cpy.part.0+0x4>
}
 8008a90:	4770      	bx	lr

08008a92 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8008a92:	7eca      	ldrb	r2, [r1, #27]
 8008a94:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8008a96:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008a98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8008a9c:	bf01      	itttt	eq
 8008a9e:	7d48      	ldrbeq	r0, [r1, #21]
 8008aa0:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008aa2:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008aa6:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	4770      	bx	lr

08008aae <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8008aae:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008ab2:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8008ab4:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8008ab6:	7803      	ldrb	r3, [r0, #0]
 8008ab8:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008aba:	bf01      	itttt	eq
 8008abc:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008abe:	750a      	strbeq	r2, [r1, #20]
 8008ac0:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8008ac2:	754a      	strbeq	r2, [r1, #21]
 8008ac4:	4770      	bx	lr

08008ac6 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008ac8:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008aca:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008ace:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	7840      	ldrb	r0, [r0, #1]
 8008ad8:	f7ff fecc 	bl	8008874 <disk_write>
 8008adc:	b9a0      	cbnz	r0, 8008b08 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ae0:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 8008ae2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ae4:	1aeb      	subs	r3, r5, r3
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d301      	bcc.n	8008aee <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8008aea:	2000      	movs	r0, #0
 8008aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008aee:	78a6      	ldrb	r6, [r4, #2]
 8008af0:	2e01      	cmp	r6, #1
 8008af2:	d9fa      	bls.n	8008aea <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8008af4:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008af6:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8008af8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008afa:	462a      	mov	r2, r5
 8008afc:	2301      	movs	r3, #1
 8008afe:	4639      	mov	r1, r7
 8008b00:	f7ff feb8 	bl	8008874 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b04:	3e01      	subs	r6, #1
 8008b06:	e7f3      	b.n	8008af0 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8008b08:	2001      	movs	r0, #1
}
 8008b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b0c <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008b0c:	78c3      	ldrb	r3, [r0, #3]
 8008b0e:	b10b      	cbz	r3, 8008b14 <sync_window+0x8>
 8008b10:	f7ff bfd9 	b.w	8008ac6 <sync_window.part.4>
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	4770      	bx	lr

08008b18 <sync_fs>:
{
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008b1c:	f7ff fff6 	bl	8008b0c <sync_window>
 8008b20:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d141      	bne.n	8008baa <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b26:	7823      	ldrb	r3, [r4, #0]
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d136      	bne.n	8008b9a <sync_fs+0x82>
 8008b2c:	7927      	ldrb	r7, [r4, #4]
 8008b2e:	2f01      	cmp	r7, #1
 8008b30:	d133      	bne.n	8008b9a <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8008b32:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8008b36:	4601      	mov	r1, r0
 8008b38:	89a2      	ldrh	r2, [r4, #12]
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f7ff fec6 	bl	80088cc <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8008b40:	2355      	movs	r3, #85	; 0x55
 8008b42:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8008b46:	23aa      	movs	r3, #170	; 0xaa
 8008b48:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8008b4c:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8008b4e:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8008b50:	2172      	movs	r1, #114	; 0x72
 8008b52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8008b56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8008b5a:	2361      	movs	r3, #97	; 0x61
 8008b5c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8008b60:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8008b64:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 8008b68:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8008b6c:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8008b70:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b74:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008b78:	6961      	ldr	r1, [r4, #20]
 8008b7a:	f7ff fe9f 	bl	80088bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b7e:	6921      	ldr	r1, [r4, #16]
 8008b80:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008b84:	f7ff fe9a 	bl	80088bc <st_dword>
			fs->winsect = fs->volbase + 1;
 8008b88:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b8a:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8008b8c:	3201      	adds	r2, #1
 8008b8e:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b90:	463b      	mov	r3, r7
 8008b92:	4631      	mov	r1, r6
 8008b94:	f7ff fe6e 	bl	8008874 <disk_write>
			fs->fsi_flag = 0;
 8008b98:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	7860      	ldrb	r0, [r4, #1]
 8008ba0:	f7ff fe76 	bl	8008890 <disk_ioctl>
 8008ba4:	3000      	adds	r0, #0
 8008ba6:	bf18      	it	ne
 8008ba8:	2001      	movne	r0, #1
}
 8008baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bac <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008bac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008bae:	428b      	cmp	r3, r1
{
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008bb6:	d012      	beq.n	8008bde <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8008bb8:	f7ff ffa8 	bl	8008b0c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	b960      	cbnz	r0, 8008bda <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8008bc8:	7870      	ldrb	r0, [r6, #1]
 8008bca:	f7ff fe45 	bl	8008858 <disk_read>
 8008bce:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8008bd0:	bf1c      	itt	ne
 8008bd2:	f04f 35ff 	movne.w	r5, #4294967295
 8008bd6:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008bd8:	6335      	str	r5, [r6, #48]	; 0x30
}
 8008bda:	4620      	mov	r0, r4
 8008bdc:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008bde:	2400      	movs	r4, #0
 8008be0:	e7fb      	b.n	8008bda <move_window+0x2e>
	...

08008be4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008be4:	2300      	movs	r3, #0
{
 8008be6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008be8:	70c3      	strb	r3, [r0, #3]
 8008bea:	f04f 33ff 	mov.w	r3, #4294967295
 8008bee:	6303      	str	r3, [r0, #48]	; 0x30
{
 8008bf0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008bf2:	f7ff ffdb 	bl	8008bac <move_window>
 8008bf6:	bb30      	cbnz	r0, 8008c46 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8008bf8:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008bfc:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8008c00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c04:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d11e      	bne.n	8008c4a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008c0c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008c10:	2be9      	cmp	r3, #233	; 0xe9
 8008c12:	d005      	beq.n	8008c20 <check_fs+0x3c>
 8008c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c16:	4a10      	ldr	r2, [pc, #64]	; (8008c58 <check_fs+0x74>)
 8008c18:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d116      	bne.n	8008c4e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c20:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8008c24:	f7ff fe42 	bl	80088ac <ld_dword>
 8008c28:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <check_fs+0x78>)
 8008c2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008c2e:	4298      	cmp	r0, r3
 8008c30:	d00f      	beq.n	8008c52 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008c32:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8008c36:	f7ff fe39 	bl	80088ac <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <check_fs+0x7c>)
 8008c3c:	4298      	cmp	r0, r3
 8008c3e:	bf14      	ite	ne
 8008c40:	2002      	movne	r0, #2
 8008c42:	2000      	moveq	r0, #0
 8008c44:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008c46:	2004      	movs	r0, #4
 8008c48:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c4a:	2003      	movs	r0, #3
 8008c4c:	bd10      	pop	{r4, pc}
	return 2;
 8008c4e:	2002      	movs	r0, #2
 8008c50:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c52:	2000      	movs	r0, #0
}
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	bf00      	nop
 8008c58:	009000eb 	.word	0x009000eb
 8008c5c:	00544146 	.word	0x00544146
 8008c60:	33544146 	.word	0x33544146

08008c64 <find_volume>:
{
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8008c68:	2300      	movs	r3, #0
{
 8008c6a:	b085      	sub	sp, #20
	*rfs = 0;
 8008c6c:	600b      	str	r3, [r1, #0]
{
 8008c6e:	460f      	mov	r7, r1
 8008c70:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8008c72:	f7ff fed2 	bl	8008a1a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c76:	1e06      	subs	r6, r0, #0
 8008c78:	f2c0 815e 	blt.w	8008f38 <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008c7c:	4bb2      	ldr	r3, [pc, #712]	; (8008f48 <find_volume+0x2e4>)
 8008c7e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008c82:	2c00      	cmp	r4, #0
 8008c84:	f000 815a 	beq.w	8008f3c <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 8008c88:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c8a:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008c8c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c90:	b173      	cbz	r3, 8008cb0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8008c92:	7860      	ldrb	r0, [r4, #1]
 8008c94:	f7ff fdc6 	bl	8008824 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c98:	07c1      	lsls	r1, r0, #31
 8008c9a:	d409      	bmi.n	8008cb0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	f000 814f 	beq.w	8008f40 <find_volume+0x2dc>
 8008ca2:	f010 0004 	ands.w	r0, r0, #4
 8008ca6:	d000      	beq.n	8008caa <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8008ca8:	200a      	movs	r0, #10
}
 8008caa:	b005      	add	sp, #20
 8008cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8008cb0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008cb2:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8008cb4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008cb6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008cb8:	f7ff fdbe 	bl	8008838 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008cbc:	07c2      	lsls	r2, r0, #31
 8008cbe:	f100 8141 	bmi.w	8008f44 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008cc2:	b10d      	cbz	r5, 8008cc8 <find_volume+0x64>
 8008cc4:	0743      	lsls	r3, r0, #29
 8008cc6:	d4ef      	bmi.n	8008ca8 <find_volume+0x44>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008cc8:	f104 020c 	add.w	r2, r4, #12
 8008ccc:	2102      	movs	r1, #2
 8008cce:	7860      	ldrb	r0, [r4, #1]
 8008cd0:	f7ff fdde 	bl	8008890 <disk_ioctl>
 8008cd4:	b108      	cbz	r0, 8008cda <find_volume+0x76>
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	e7e7      	b.n	8008caa <find_volume+0x46>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8008ce0:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8008ce4:	d8f7      	bhi.n	8008cd6 <find_volume+0x72>
 8008ce6:	1e5e      	subs	r6, r3, #1
 8008ce8:	401e      	ands	r6, r3
 8008cea:	d1f4      	bne.n	8008cd6 <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008cec:	4631      	mov	r1, r6
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f7ff ff78 	bl	8008be4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008cf4:	2802      	cmp	r0, #2
 8008cf6:	f040 8101 	bne.w	8008efc <find_volume+0x298>
 8008cfa:	f504 71fd 	add.w	r1, r4, #506	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008cfe:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8008d02:	b110      	cbz	r0, 8008d0a <find_volume+0xa6>
 8008d04:	4608      	mov	r0, r1
 8008d06:	f7ff fdd1 	bl	80088ac <ld_dword>
 8008d0a:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008d0e:	3601      	adds	r6, #1
 8008d10:	2e04      	cmp	r6, #4
 8008d12:	f101 0110 	add.w	r1, r1, #16
 8008d16:	d1f2      	bne.n	8008cfe <find_volume+0x9a>
 8008d18:	2500      	movs	r5, #0
			bsect = br[i];
 8008d1a:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	f000 80e4 	beq.w	8008eec <find_volume+0x288>
 8008d24:	4631      	mov	r1, r6
 8008d26:	4620      	mov	r0, r4
 8008d28:	f7ff ff5c 	bl	8008be4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008d2c:	2801      	cmp	r0, #1
 8008d2e:	f200 80de 	bhi.w	8008eee <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8008d32:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008d36:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008d3a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8008d3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d42:	4598      	cmp	r8, r3
 8008d44:	f040 80e0 	bne.w	8008f08 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008d48:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8008d4c:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008d50:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8008d54:	d104      	bne.n	8008d60 <find_volume+0xfc>
 8008d56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d5a:	f7ff fda7 	bl	80088ac <ld_dword>
 8008d5e:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d60:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8008d64:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d66:	1e7b      	subs	r3, r7, #1
 8008d68:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d6a:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d6c:	f200 80cc 	bhi.w	8008f08 <find_volume+0x2a4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d70:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 8008d74:	fa1f f389 	uxth.w	r3, r9
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d78:	434f      	muls	r7, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d7a:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80c3 	beq.w	8008f08 <find_volume+0x2a4>
 8008d82:	f109 33ff 	add.w	r3, r9, #4294967295
 8008d86:	ea13 0f09 	tst.w	r3, r9
 8008d8a:	f040 80bd 	bne.w	8008f08 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008d8e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008d92:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8008d96:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d9a:	ea4f 1358 	mov.w	r3, r8, lsr #5
 8008d9e:	fbba fbf3 	udiv	fp, sl, r3
 8008da2:	fb03 a31b 	mls	r3, r3, fp, sl
 8008da6:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008da8:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f040 80ab 	bne.w	8008f08 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008db2:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8008db6:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008dba:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 8008dbe:	d103      	bne.n	8008dc8 <find_volume+0x164>
 8008dc0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8008dc4:	f7ff fd72 	bl	80088ac <ld_dword>
	rv = rv << 8 | ptr[0];
 8008dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008dcc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008dd0:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8008dd4:	f000 8098 	beq.w	8008f08 <find_volume+0x2a4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008dd8:	fa12 f38b 	uxtah	r3, r2, fp
 8008ddc:	443b      	add	r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008dde:	4298      	cmp	r0, r3
 8008de0:	f0c0 8092 	bcc.w	8008f08 <find_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008de4:	1ac5      	subs	r5, r0, r3
 8008de6:	fbb5 f5f9 	udiv	r5, r5, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	f000 808c 	beq.w	8008f08 <find_volume+0x2a4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008df0:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8008df4:	4285      	cmp	r5, r0
 8008df6:	f200 8089 	bhi.w	8008f0c <find_volume+0x2a8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008dfa:	f640 79f5 	movw	r9, #4085	; 0xff5
 8008dfe:	454d      	cmp	r5, r9
 8008e00:	bf8c      	ite	hi
 8008e02:	f04f 0902 	movhi.w	r9, #2
 8008e06:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e0a:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e0c:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8008e0e:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 8008e10:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e14:	61a5      	str	r5, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008e16:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e18:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008e1c:	d179      	bne.n	8008f12 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8008e1e:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8008e22:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e26:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8008e2a:	d16d      	bne.n	8008f08 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008e2c:	f1ba 0f00 	cmp.w	sl, #0
 8008e30:	d16a      	bne.n	8008f08 <find_volume+0x2a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e32:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008e36:	f7ff fd39 	bl	80088ac <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008e3a:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e3c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008e3e:	f108 33ff 	add.w	r3, r8, #4294967295
 8008e42:	441d      	add	r5, r3
 8008e44:	fbb5 f8f8 	udiv	r8, r5, r8
 8008e48:	4541      	cmp	r1, r8
 8008e4a:	d35d      	bcc.n	8008f08 <find_volume+0x2a4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e50:	6163      	str	r3, [r4, #20]
 8008e52:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e54:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8008e58:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e5c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e5e:	d12f      	bne.n	8008ec0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008e60:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8008e64:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8008e68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d127      	bne.n	8008ec0 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008e70:	1c71      	adds	r1, r6, #1
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7ff fe9a 	bl	8008bac <move_window>
 8008e78:	bb10      	cbnz	r0, 8008ec0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008e7a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008e7e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8008e82:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8008e84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e88:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d117      	bne.n	8008ec0 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e90:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008e94:	f7ff fd0a 	bl	80088ac <ld_dword>
 8008e98:	4b2c      	ldr	r3, [pc, #176]	; (8008f4c <find_volume+0x2e8>)
 8008e9a:	4298      	cmp	r0, r3
 8008e9c:	d110      	bne.n	8008ec0 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e9e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008ea2:	f7ff fd03 	bl	80088ac <ld_dword>
 8008ea6:	4b2a      	ldr	r3, [pc, #168]	; (8008f50 <find_volume+0x2ec>)
 8008ea8:	4298      	cmp	r0, r3
 8008eaa:	d109      	bne.n	8008ec0 <find_volume+0x25c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008eac:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008eb0:	f7ff fcfc 	bl	80088ac <ld_dword>
 8008eb4:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008eb6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008eba:	f7ff fcf7 	bl	80088ac <ld_dword>
 8008ebe:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ec0:	4a24      	ldr	r2, [pc, #144]	; (8008f54 <find_volume+0x2f0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8008ec2:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ec6:	8813      	ldrh	r3, [r2, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	8013      	strh	r3, [r2, #0]
 8008ece:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008ed0:	4b21      	ldr	r3, [pc, #132]	; (8008f58 <find_volume+0x2f4>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4294      	cmp	r4, r2
 8008ed6:	bf04      	itt	eq
 8008ed8:	2200      	moveq	r2, #0
 8008eda:	601a      	streq	r2, [r3, #0]
 8008edc:	691a      	ldr	r2, [r3, #16]
 8008ede:	4294      	cmp	r4, r2
 8008ee0:	f04f 0000 	mov.w	r0, #0
 8008ee4:	f47f aee1 	bne.w	8008caa <find_volume+0x46>
 8008ee8:	6118      	str	r0, [r3, #16]
 8008eea:	e6de      	b.n	8008caa <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008eec:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008eee:	3501      	adds	r5, #1
 8008ef0:	2d04      	cmp	r5, #4
 8008ef2:	f47f af12 	bne.w	8008d1a <find_volume+0xb6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008ef6:	2804      	cmp	r0, #4
 8008ef8:	d106      	bne.n	8008f08 <find_volume+0x2a4>
 8008efa:	e6ec      	b.n	8008cd6 <find_volume+0x72>
 8008efc:	2804      	cmp	r0, #4
 8008efe:	f43f aeea 	beq.w	8008cd6 <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008f02:	2801      	cmp	r0, #1
 8008f04:	f67f af15 	bls.w	8008d32 <find_volume+0xce>
 8008f08:	200d      	movs	r0, #13
 8008f0a:	e6ce      	b.n	8008caa <find_volume+0x46>
		fmt = FS_FAT32;
 8008f0c:	f04f 0903 	mov.w	r9, #3
 8008f10:	e77b      	b.n	8008e0a <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008f12:	f1ba 0f00 	cmp.w	sl, #0
 8008f16:	d0f7      	beq.n	8008f08 <find_volume+0x2a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f18:	f1b9 0f02 	cmp.w	r9, #2
 8008f1c:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8008f20:	bf18      	it	ne
 8008f22:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f24:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f26:	bf18      	it	ne
 8008f28:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f2c:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f2e:	bf0c      	ite	eq
 8008f30:	4605      	moveq	r5, r0
 8008f32:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8008f36:	e782      	b.n	8008e3e <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f38:	200b      	movs	r0, #11
 8008f3a:	e6b6      	b.n	8008caa <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008f3c:	200c      	movs	r0, #12
 8008f3e:	e6b4      	b.n	8008caa <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8008f40:	4628      	mov	r0, r5
 8008f42:	e6b2      	b.n	8008caa <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008f44:	2003      	movs	r0, #3
 8008f46:	e6b0      	b.n	8008caa <find_volume+0x46>
 8008f48:	200015d8 	.word	0x200015d8
 8008f4c:	41615252 	.word	0x41615252
 8008f50:	61417272 	.word	0x61417272
 8008f54:	200015fc 	.word	0x200015fc
 8008f58:	200015dc 	.word	0x200015dc

08008f5c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f5c:	2901      	cmp	r1, #1
{
 8008f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f62:	4604      	mov	r4, r0
 8008f64:	460d      	mov	r5, r1
 8008f66:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f68:	f240 808a 	bls.w	8009080 <put_fat+0x124>
 8008f6c:	6983      	ldr	r3, [r0, #24]
 8008f6e:	4299      	cmp	r1, r3
 8008f70:	f080 8086 	bcs.w	8009080 <put_fat+0x124>
		switch (fs->fs_type) {
 8008f74:	7803      	ldrb	r3, [r0, #0]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d049      	beq.n	800900e <put_fat+0xb2>
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d060      	beq.n	8009040 <put_fat+0xe4>
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d17e      	bne.n	8009080 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 8008f82:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f86:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008f88:	8983      	ldrh	r3, [r0, #12]
 8008f8a:	fbba f3f3 	udiv	r3, sl, r3
 8008f8e:	4419      	add	r1, r3
 8008f90:	f7ff fe0c 	bl	8008bac <move_window>
 8008f94:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8008f96:	bb78      	cbnz	r0, 8008ff8 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	fbba f2f3 	udiv	r2, sl, r3
 8008f9e:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8008fa2:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008fa6:	f015 0501 	ands.w	r5, r5, #1
 8008faa:	bf1f      	itttt	ne
 8008fac:	f818 3002 	ldrbne.w	r3, [r8, r2]
 8008fb0:	f003 010f 	andne.w	r1, r3, #15
 8008fb4:	013b      	lslne	r3, r7, #4
 8008fb6:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8008fba:	bf14      	ite	ne
 8008fbc:	430b      	orrne	r3, r1
 8008fbe:	b2fb      	uxtbeq	r3, r7
 8008fc0:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 8008fca:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	fbb9 f3f3 	udiv	r3, r9, r3
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4419      	add	r1, r3
 8008fd8:	f7ff fde8 	bl	8008bac <move_window>
			if (res != FR_OK) break;
 8008fdc:	4606      	mov	r6, r0
 8008fde:	b958      	cbnz	r0, 8008ff8 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	fbb9 f2f3 	udiv	r2, r9, r3
 8008fe6:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008fea:	b145      	cbz	r5, 8008ffe <put_fat+0xa2>
 8008fec:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8008ff0:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	70e3      	strb	r3, [r4, #3]
}
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ffe:	f818 3002 	ldrb.w	r3, [r8, r2]
 8009002:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8009006:	f023 030f 	bic.w	r3, r3, #15
 800900a:	431f      	orrs	r7, r3
 800900c:	e7f0      	b.n	8008ff0 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800900e:	8983      	ldrh	r3, [r0, #12]
 8009010:	085b      	lsrs	r3, r3, #1
 8009012:	fbb1 f3f3 	udiv	r3, r1, r3
 8009016:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009018:	4419      	add	r1, r3
 800901a:	f7ff fdc7 	bl	8008bac <move_window>
			if (res != FR_OK) break;
 800901e:	4606      	mov	r6, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	d1e9      	bne.n	8008ff8 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009024:	89a1      	ldrh	r1, [r4, #12]
 8009026:	006d      	lsls	r5, r5, #1
 8009028:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800902c:	fbb5 f3f1 	udiv	r3, r5, r1
 8009030:	fb01 5513 	mls	r5, r1, r3, r5
 8009034:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8009036:	5557      	strb	r7, [r2, r5]
 8009038:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800903c:	705f      	strb	r7, [r3, #1]
 800903e:	e7d9      	b.n	8008ff4 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009040:	8983      	ldrh	r3, [r0, #12]
 8009042:	089b      	lsrs	r3, r3, #2
 8009044:	fbb1 f3f3 	udiv	r3, r1, r3
 8009048:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800904a:	4419      	add	r1, r3
 800904c:	f7ff fdae 	bl	8008bac <move_window>
			if (res != FR_OK) break;
 8009050:	4606      	mov	r6, r0
 8009052:	2800      	cmp	r0, #0
 8009054:	d1d0      	bne.n	8008ff8 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009056:	89a1      	ldrh	r1, [r4, #12]
 8009058:	00ad      	lsls	r5, r5, #2
 800905a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800905e:	fbb5 f2f1 	udiv	r2, r5, r1
 8009062:	fb01 5512 	mls	r5, r1, r2, r5
 8009066:	441d      	add	r5, r3
 8009068:	4628      	mov	r0, r5
 800906a:	f7ff fc1f 	bl	80088ac <ld_dword>
 800906e:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8009072:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009076:	4339      	orrs	r1, r7
 8009078:	4628      	mov	r0, r5
 800907a:	f7ff fc1f 	bl	80088bc <st_dword>
 800907e:	e7b9      	b.n	8008ff4 <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8009080:	2602      	movs	r6, #2
 8009082:	e7b9      	b.n	8008ff8 <put_fat+0x9c>

08009084 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009084:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8009086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009088:	4604      	mov	r4, r0
 800908a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800908c:	d968      	bls.n	8009160 <get_fat.isra.8+0xdc>
 800908e:	6983      	ldr	r3, [r0, #24]
 8009090:	4299      	cmp	r1, r3
 8009092:	d265      	bcs.n	8009160 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 8009094:	7803      	ldrb	r3, [r0, #0]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d032      	beq.n	8009100 <get_fat.isra.8+0x7c>
 800909a:	2b03      	cmp	r3, #3
 800909c:	d048      	beq.n	8009130 <get_fat.isra.8+0xac>
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d15e      	bne.n	8009160 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 80090a2:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80090a8:	8983      	ldrh	r3, [r0, #12]
 80090aa:	fbb5 f3f3 	udiv	r3, r5, r3
 80090ae:	4419      	add	r1, r3
 80090b0:	f7ff fd7c 	bl	8008bac <move_window>
 80090b4:	b110      	cbz	r0, 80090bc <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80090bc:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090be:	6a63      	ldr	r3, [r4, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 80090c0:	fbb5 f2f1 	udiv	r2, r5, r1
 80090c4:	fb01 5212 	mls	r2, r1, r2, r5
 80090c8:	4422      	add	r2, r4
 80090ca:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090cc:	4620      	mov	r0, r4
 80090ce:	fbb7 f1f1 	udiv	r1, r7, r1
 80090d2:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 80090d4:	f892 5034 	ldrb.w	r5, [r2, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090d8:	f7ff fd68 	bl	8008bac <move_window>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d1ea      	bne.n	80090b6 <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 80090e0:	89a2      	ldrh	r2, [r4, #12]
 80090e2:	fbb7 f3f2 	udiv	r3, r7, r2
 80090e6:	fb02 7313 	mls	r3, r2, r3, r7
 80090ea:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80090ec:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80090ee:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80090f2:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80090f6:	bf4c      	ite	mi
 80090f8:	0900      	lsrmi	r0, r0, #4
 80090fa:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80090fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009100:	8983      	ldrh	r3, [r0, #12]
 8009102:	085b      	lsrs	r3, r3, #1
 8009104:	fbb1 f3f3 	udiv	r3, r1, r3
 8009108:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800910a:	4419      	add	r1, r3
 800910c:	f7ff fd4e 	bl	8008bac <move_window>
 8009110:	2800      	cmp	r0, #0
 8009112:	d1d0      	bne.n	80090b6 <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009114:	89a1      	ldrh	r1, [r4, #12]
 8009116:	0076      	lsls	r6, r6, #1
 8009118:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800911c:	fbb6 f3f1 	udiv	r3, r6, r1
 8009120:	fb01 6613 	mls	r6, r1, r3, r6
 8009124:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 8009126:	5d90      	ldrb	r0, [r2, r6]
 8009128:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800912a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800912e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009130:	8983      	ldrh	r3, [r0, #12]
 8009132:	089b      	lsrs	r3, r3, #2
 8009134:	fbb1 f3f3 	udiv	r3, r1, r3
 8009138:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800913a:	4419      	add	r1, r3
 800913c:	f7ff fd36 	bl	8008bac <move_window>
 8009140:	2800      	cmp	r0, #0
 8009142:	d1b8      	bne.n	80090b6 <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009144:	89a2      	ldrh	r2, [r4, #12]
 8009146:	00b6      	lsls	r6, r6, #2
 8009148:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800914c:	fbb6 f3f2 	udiv	r3, r6, r2
 8009150:	fb02 6613 	mls	r6, r2, r3, r6
 8009154:	4430      	add	r0, r6
 8009156:	f7ff fba9 	bl	80088ac <ld_dword>
 800915a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800915e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8009160:	2001      	movs	r0, #1
}
 8009162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009164 <create_chain>:
{
 8009164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800916a:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800916c:	460f      	mov	r7, r1
 800916e:	b971      	cbnz	r1, 800918e <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009170:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009172:	b1f6      	cbz	r6, 80091b2 <create_chain+0x4e>
 8009174:	69ab      	ldr	r3, [r5, #24]
 8009176:	429e      	cmp	r6, r3
 8009178:	bf28      	it	cs
 800917a:	2601      	movcs	r6, #1
 800917c:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800917e:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 8009180:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009182:	429c      	cmp	r4, r3
 8009184:	d318      	bcc.n	80091b8 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8009186:	2e01      	cmp	r6, #1
 8009188:	d815      	bhi.n	80091b6 <create_chain+0x52>
 800918a:	2400      	movs	r4, #0
 800918c:	e009      	b.n	80091a2 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800918e:	4628      	mov	r0, r5
 8009190:	f7ff ff78 	bl	8009084 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009194:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009196:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009198:	d937      	bls.n	800920a <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	d104      	bne.n	80091a8 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800919e:	f04f 34ff 	mov.w	r4, #4294967295
}
 80091a2:	4620      	mov	r0, r4
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80091a8:	69ab      	ldr	r3, [r5, #24]
 80091aa:	4298      	cmp	r0, r3
 80091ac:	d3f9      	bcc.n	80091a2 <create_chain+0x3e>
 80091ae:	463e      	mov	r6, r7
 80091b0:	e7e4      	b.n	800917c <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80091b2:	2601      	movs	r6, #1
 80091b4:	e7e2      	b.n	800917c <create_chain+0x18>
				ncl = 2;
 80091b6:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80091b8:	4621      	mov	r1, r4
 80091ba:	f8d8 0000 	ldr.w	r0, [r8]
 80091be:	f7ff ff61 	bl	8009084 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 80091c2:	b130      	cbz	r0, 80091d2 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80091c4:	2801      	cmp	r0, #1
 80091c6:	d020      	beq.n	800920a <create_chain+0xa6>
 80091c8:	3001      	adds	r0, #1
 80091ca:	d0e8      	beq.n	800919e <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 80091cc:	42b4      	cmp	r4, r6
 80091ce:	d1d6      	bne.n	800917e <create_chain+0x1a>
 80091d0:	e7db      	b.n	800918a <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80091d2:	f04f 32ff 	mov.w	r2, #4294967295
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f7ff febf 	bl	8008f5c <put_fat>
		if (res == FR_OK && clst != 0) {
 80091de:	b990      	cbnz	r0, 8009206 <create_chain+0xa2>
 80091e0:	b957      	cbnz	r7, 80091f8 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091e2:	69aa      	ldr	r2, [r5, #24]
 80091e4:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 80091e6:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091e8:	3a02      	subs	r2, #2
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d90f      	bls.n	800920e <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80091ee:	792b      	ldrb	r3, [r5, #4]
 80091f0:	f043 0301 	orr.w	r3, r3, #1
 80091f4:	712b      	strb	r3, [r5, #4]
 80091f6:	e7d4      	b.n	80091a2 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80091f8:	4622      	mov	r2, r4
 80091fa:	4639      	mov	r1, r7
 80091fc:	4628      	mov	r0, r5
 80091fe:	f7ff fead 	bl	8008f5c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009202:	2800      	cmp	r0, #0
 8009204:	d0ed      	beq.n	80091e2 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009206:	2801      	cmp	r0, #1
 8009208:	d0c9      	beq.n	800919e <create_chain+0x3a>
 800920a:	2401      	movs	r4, #1
 800920c:	e7c9      	b.n	80091a2 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800920e:	3b01      	subs	r3, #1
 8009210:	616b      	str	r3, [r5, #20]
 8009212:	e7ec      	b.n	80091ee <create_chain+0x8a>

08009214 <remove_chain>:
{
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009218:	2d01      	cmp	r5, #1
{
 800921a:	4607      	mov	r7, r0
 800921c:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800921e:	d801      	bhi.n	8009224 <remove_chain+0x10>
 8009220:	2002      	movs	r0, #2
 8009222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8009224:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009226:	69a3      	ldr	r3, [r4, #24]
 8009228:	429d      	cmp	r5, r3
 800922a:	d2f9      	bcs.n	8009220 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800922c:	b12a      	cbz	r2, 800923a <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800922e:	f04f 32ff 	mov.w	r2, #4294967295
 8009232:	4620      	mov	r0, r4
 8009234:	f7ff fe92 	bl	8008f5c <put_fat>
		if (res != FR_OK) return res;
 8009238:	bb08      	cbnz	r0, 800927e <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800923a:	4629      	mov	r1, r5
 800923c:	6838      	ldr	r0, [r7, #0]
 800923e:	f7ff ff21 	bl	8009084 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8009242:	4606      	mov	r6, r0
 8009244:	b908      	cbnz	r0, 800924a <remove_chain+0x36>
	return FR_OK;
 8009246:	2000      	movs	r0, #0
 8009248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800924a:	2801      	cmp	r0, #1
 800924c:	d0e8      	beq.n	8009220 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d014      	beq.n	800927c <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009252:	2200      	movs	r2, #0
 8009254:	4629      	mov	r1, r5
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff fe80 	bl	8008f5c <put_fat>
			if (res != FR_OK) return res;
 800925c:	b978      	cbnz	r0, 800927e <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800925e:	69a2      	ldr	r2, [r4, #24]
 8009260:	6963      	ldr	r3, [r4, #20]
 8009262:	1e91      	subs	r1, r2, #2
 8009264:	428b      	cmp	r3, r1
 8009266:	d205      	bcs.n	8009274 <remove_chain+0x60>
			fs->free_clst++;
 8009268:	3301      	adds	r3, #1
 800926a:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800926c:	7923      	ldrb	r3, [r4, #4]
 800926e:	f043 0301 	orr.w	r3, r3, #1
 8009272:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009274:	4296      	cmp	r6, r2
 8009276:	4635      	mov	r5, r6
 8009278:	d3df      	bcc.n	800923a <remove_chain+0x26>
 800927a:	e7e4      	b.n	8009246 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800927c:	2001      	movs	r0, #1
}
 800927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009280 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009280:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8009282:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8009284:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8009286:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8009288:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800928a:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800928c:	b992      	cbnz	r2, 80092b4 <dir_sdi.constprop.11+0x34>
 800928e:	7823      	ldrb	r3, [r4, #0]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8009294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009296:	b973      	cbnz	r3, 80092b6 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009298:	8923      	ldrh	r3, [r4, #8]
 800929a:	b90b      	cbnz	r3, 80092a0 <dir_sdi.constprop.11+0x20>
 800929c:	2002      	movs	r0, #2
 800929e:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 80092a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092a2:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 80092a4:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 80092a6:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0f7      	beq.n	800929c <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80092ac:	3434      	adds	r4, #52	; 0x34
 80092ae:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80092b0:	2000      	movs	r0, #0
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80092b4:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092b6:	8961      	ldrh	r1, [r4, #10]
 80092b8:	89a0      	ldrh	r0, [r4, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092ba:	4348      	muls	r0, r1
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092bc:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80092be:	d10c      	bne.n	80092da <dir_sdi.constprop.11+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092c0:	4611      	mov	r1, r2
 80092c2:	6828      	ldr	r0, [r5, #0]
 80092c4:	f7ff fede 	bl	8009084 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092c8:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092ca:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092cc:	d00b      	beq.n	80092e6 <dir_sdi.constprop.11+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80092ce:	2801      	cmp	r0, #1
 80092d0:	d9e4      	bls.n	800929c <dir_sdi.constprop.11+0x1c>
 80092d2:	69a3      	ldr	r3, [r4, #24]
 80092d4:	4298      	cmp	r0, r3
 80092d6:	d3f3      	bcc.n	80092c0 <dir_sdi.constprop.11+0x40>
 80092d8:	e7e0      	b.n	800929c <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 80092da:	4619      	mov	r1, r3
 80092dc:	4620      	mov	r0, r4
 80092de:	f7ff fb7d 	bl	80089dc <clust2sect>
 80092e2:	61e8      	str	r0, [r5, #28]
 80092e4:	e7de      	b.n	80092a4 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092e6:	2001      	movs	r0, #1
}
 80092e8:	bd38      	pop	{r3, r4, r5, pc}

080092ea <dir_next>:
{
 80092ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092ee:	69c3      	ldr	r3, [r0, #28]
{
 80092f0:	4605      	mov	r5, r0
 80092f2:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092f4:	b1b3      	cbz	r3, 8009324 <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092f6:	6947      	ldr	r7, [r0, #20]
 80092f8:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092fa:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 80092fe:	d211      	bcs.n	8009324 <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 8009300:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009302:	89a2      	ldrh	r2, [r4, #12]
 8009304:	fbb7 f0f2 	udiv	r0, r7, r2
 8009308:	fb02 7210 	mls	r2, r2, r0, r7
 800930c:	2a00      	cmp	r2, #0
 800930e:	d14f      	bne.n	80093b0 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 8009310:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8009312:	3301      	adds	r3, #1
 8009314:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 8009316:	b941      	cbnz	r1, 800932a <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009318:	8923      	ldrh	r3, [r4, #8]
 800931a:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800931e:	d847      	bhi.n	80093b0 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 8009320:	2300      	movs	r3, #0
 8009322:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009324:	2004      	movs	r0, #4
 8009326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800932a:	8963      	ldrh	r3, [r4, #10]
 800932c:	3b01      	subs	r3, #1
 800932e:	4203      	tst	r3, r0
 8009330:	d13e      	bne.n	80093b0 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009332:	4620      	mov	r0, r4
 8009334:	f7ff fea6 	bl	8009084 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009338:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800933a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800933c:	d802      	bhi.n	8009344 <dir_next+0x5a>
 800933e:	2002      	movs	r0, #2
 8009340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009344:	1c42      	adds	r2, r0, #1
 8009346:	d102      	bne.n	800934e <dir_next+0x64>
 8009348:	2001      	movs	r0, #1
 800934a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800934e:	69a3      	ldr	r3, [r4, #24]
 8009350:	4298      	cmp	r0, r3
 8009352:	d327      	bcc.n	80093a4 <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 8009354:	f1b8 0f00 	cmp.w	r8, #0
 8009358:	d0e2      	beq.n	8009320 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800935a:	69a9      	ldr	r1, [r5, #24]
 800935c:	4628      	mov	r0, r5
 800935e:	f7ff ff01 	bl	8009164 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009362:	4606      	mov	r6, r0
 8009364:	2800      	cmp	r0, #0
 8009366:	d03d      	beq.n	80093e4 <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009368:	2801      	cmp	r0, #1
 800936a:	d0e8      	beq.n	800933e <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d0eb      	beq.n	8009348 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009370:	4620      	mov	r0, r4
 8009372:	f7ff fbcb 	bl	8008b0c <sync_window>
 8009376:	4680      	mov	r8, r0
 8009378:	2800      	cmp	r0, #0
 800937a:	d1e5      	bne.n	8009348 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800937c:	4601      	mov	r1, r0
 800937e:	89a2      	ldrh	r2, [r4, #12]
 8009380:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009384:	f7ff faa2 	bl	80088cc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009388:	4631      	mov	r1, r6
 800938a:	4620      	mov	r0, r4
 800938c:	f7ff fb26 	bl	80089dc <clust2sect>
						fs->wflag = 1;
 8009390:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009394:	6320      	str	r0, [r4, #48]	; 0x30
 8009396:	8963      	ldrh	r3, [r4, #10]
 8009398:	4598      	cmp	r8, r3
 800939a:	d316      	bcc.n	80093ca <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 800939c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800939e:	eba3 0308 	sub.w	r3, r3, r8
 80093a2:	6323      	str	r3, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 80093a4:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80093a6:	4631      	mov	r1, r6
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7ff fb17 	bl	80089dc <clust2sect>
 80093ae:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093b0:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 80093b2:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093b4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80093b8:	fbb7 f2f1 	udiv	r2, r7, r1
 80093bc:	fb01 7712 	mls	r7, r1, r2, r7
 80093c0:	441f      	add	r7, r3
 80093c2:	622f      	str	r7, [r5, #32]
	return FR_OK;
 80093c4:	2000      	movs	r0, #0
 80093c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 80093ca:	f884 9003 	strb.w	r9, [r4, #3]
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff fb79 	bl	8008ac6 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d1b7      	bne.n	8009348 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093da:	3301      	adds	r3, #1
 80093dc:	f108 0801 	add.w	r8, r8, #1
 80093e0:	6323      	str	r3, [r4, #48]	; 0x30
 80093e2:	e7d8      	b.n	8009396 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80093e4:	2007      	movs	r0, #7
}
 80093e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080093ec <follow_path>:
{
 80093ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80093f0:	6806      	ldr	r6, [r0, #0]
{
 80093f2:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80093f4:	780b      	ldrb	r3, [r1, #0]
 80093f6:	2b2f      	cmp	r3, #47	; 0x2f
 80093f8:	460d      	mov	r5, r1
 80093fa:	f101 0101 	add.w	r1, r1, #1
 80093fe:	d0f9      	beq.n	80093f4 <follow_path+0x8>
 8009400:	2b5c      	cmp	r3, #92	; 0x5c
 8009402:	d0f7      	beq.n	80093f4 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8009404:	2300      	movs	r3, #0
 8009406:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009408:	782b      	ldrb	r3, [r5, #0]
 800940a:	2b1f      	cmp	r3, #31
 800940c:	d959      	bls.n	80094c2 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800940e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8009570 <follow_path+0x184>
	p = *path; sfn = dp->fn;
 8009412:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8009416:	220b      	movs	r2, #11
 8009418:	2120      	movs	r1, #32
 800941a:	4638      	mov	r0, r7
 800941c:	f7ff fa56 	bl	80088cc <mem_set>
	si = i = 0; ni = 8;
 8009420:	2200      	movs	r2, #0
 8009422:	f105 3eff 	add.w	lr, r5, #4294967295
 8009426:	4611      	mov	r1, r2
 8009428:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 800942a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800942e:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8009430:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009434:	d90b      	bls.n	800944e <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009436:	2b2f      	cmp	r3, #47	; 0x2f
 8009438:	d14b      	bne.n	80094d2 <follow_path+0xe6>
 800943a:	1868      	adds	r0, r5, r1
 800943c:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800943e:	f810 eb01 	ldrb.w	lr, [r0], #1
 8009442:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8009446:	d0f9      	beq.n	800943c <follow_path+0x50>
 8009448:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 800944c:	d0f6      	beq.n	800943c <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800944e:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009450:	2a00      	cmp	r2, #0
 8009452:	d054      	beq.n	80094fe <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009454:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8009458:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800945c:	2ae5      	cmp	r2, #229	; 0xe5
 800945e:	bf04      	itt	eq
 8009460:	2205      	moveq	r2, #5
 8009462:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009466:	2b21      	cmp	r3, #33	; 0x21
 8009468:	bf34      	ite	cc
 800946a:	2304      	movcc	r3, #4
 800946c:	2300      	movcs	r3, #0
 800946e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009472:	4620      	mov	r0, r4
 8009474:	f7ff ff04 	bl	8009280 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8009478:	2800      	cmp	r0, #0
 800947a:	d145      	bne.n	8009508 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 800947c:	69e1      	ldr	r1, [r4, #28]
 800947e:	4648      	mov	r0, r9
 8009480:	f7ff fb94 	bl	8008bac <move_window>
		if (res != FR_OK) break;
 8009484:	2800      	cmp	r0, #0
 8009486:	d13f      	bne.n	8009508 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8009488:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	2a00      	cmp	r2, #0
 800948e:	d046      	beq.n	800951e <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009490:	7ada      	ldrb	r2, [r3, #11]
 8009492:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009496:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009498:	7ada      	ldrb	r2, [r3, #11]
 800949a:	0711      	lsls	r1, r2, #28
 800949c:	d40c      	bmi.n	80094b8 <follow_path+0xcc>
 800949e:	f103 0e0b 	add.w	lr, r3, #11
 80094a2:	4639      	mov	r1, r7
		r = *d++ - *s++;
 80094a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a8:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 80094ac:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 80094ae:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 80094b2:	d027      	beq.n	8009504 <follow_path+0x118>
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	d0f5      	beq.n	80094a4 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 80094b8:	2100      	movs	r1, #0
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff ff15 	bl	80092ea <dir_next>
 80094c0:	e7da      	b.n	8009478 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 80094c2:	2380      	movs	r3, #128	; 0x80
 80094c4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80094c8:	4620      	mov	r0, r4
}
 80094ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 80094ce:	f7ff bed7 	b.w	8009280 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80094d2:	2b5c      	cmp	r3, #92	; 0x5c
 80094d4:	d0b1      	beq.n	800943a <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80094d6:	2b2e      	cmp	r3, #46	; 0x2e
 80094d8:	d039      	beq.n	800954e <follow_path+0x162>
 80094da:	4290      	cmp	r0, r2
 80094dc:	d90f      	bls.n	80094fe <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 80094de:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80094e2:	bf18      	it	ne
 80094e4:	3b80      	subne	r3, #128	; 0x80
 80094e6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009574 <follow_path+0x188>
 80094ea:	bf18      	it	ne
 80094ec:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 80094f0:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 80094f4:	f1bc 0f00 	cmp.w	ip, #0
 80094f8:	d02e      	beq.n	8009558 <follow_path+0x16c>
 80094fa:	4563      	cmp	r3, ip
 80094fc:	d1f8      	bne.n	80094f0 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80094fe:	2006      	movs	r0, #6
	return res;
 8009500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009504:	2a00      	cmp	r2, #0
 8009506:	d1d7      	bne.n	80094b8 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8009508:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800950c:	b148      	cbz	r0, 8009522 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800950e:	2804      	cmp	r0, #4
 8009510:	d12c      	bne.n	800956c <follow_path+0x180>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009512:	f013 0f04 	tst.w	r3, #4
 8009516:	bf08      	it	eq
 8009518:	2005      	moveq	r0, #5
 800951a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800951e:	2004      	movs	r0, #4
 8009520:	e7f2      	b.n	8009508 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009522:	075a      	lsls	r2, r3, #29
 8009524:	d422      	bmi.n	800956c <follow_path+0x180>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009526:	79a3      	ldrb	r3, [r4, #6]
 8009528:	06db      	lsls	r3, r3, #27
 800952a:	d50d      	bpl.n	8009548 <follow_path+0x15c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800952c:	89b2      	ldrh	r2, [r6, #12]
 800952e:	6960      	ldr	r0, [r4, #20]
 8009530:	fbb0 f3f2 	udiv	r3, r0, r2
 8009534:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8009538:	fb02 0313 	mls	r3, r2, r3, r0
 800953c:	4419      	add	r1, r3
 800953e:	7830      	ldrb	r0, [r6, #0]
 8009540:	f7ff faa7 	bl	8008a92 <ld_clust.isra.1>
 8009544:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009546:	e764      	b.n	8009412 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009548:	2005      	movs	r0, #5
 800954a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800954e:	280b      	cmp	r0, #11
 8009550:	d0d5      	beq.n	80094fe <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8009552:	2208      	movs	r2, #8
 8009554:	200b      	movs	r0, #11
 8009556:	e768      	b.n	800942a <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009558:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 800955c:	f1bc 0f19 	cmp.w	ip, #25
 8009560:	d801      	bhi.n	8009566 <follow_path+0x17a>
 8009562:	3b20      	subs	r3, #32
 8009564:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8009566:	54bb      	strb	r3, [r7, r2]
 8009568:	3201      	adds	r2, #1
 800956a:	e75e      	b.n	800942a <follow_path+0x3e>
}
 800956c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009570:	080245ea 	.word	0x080245ea
 8009574:	08024669 	.word	0x08024669

08009578 <dir_register>:
{
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800957c:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800957e:	f7ff fe7f 	bl	8009280 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8009582:	4604      	mov	r4, r0
 8009584:	bb28      	cbnz	r0, 80095d2 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8009586:	69e9      	ldr	r1, [r5, #28]
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff fb0f 	bl	8008bac <move_window>
			if (res != FR_OK) break;
 800958e:	4604      	mov	r4, r0
 8009590:	b9f8      	cbnz	r0, 80095d2 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009592:	6a2b      	ldr	r3, [r5, #32]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2be5      	cmp	r3, #229	; 0xe5
 8009598:	d114      	bne.n	80095c4 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800959a:	69e9      	ldr	r1, [r5, #28]
 800959c:	4630      	mov	r0, r6
 800959e:	f7ff fb05 	bl	8008bac <move_window>
		if (res == FR_OK) {
 80095a2:	4604      	mov	r4, r0
 80095a4:	b960      	cbnz	r0, 80095c0 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80095a6:	4601      	mov	r1, r0
 80095a8:	2220      	movs	r2, #32
 80095aa:	6a28      	ldr	r0, [r5, #32]
 80095ac:	f7ff f98e 	bl	80088cc <mem_set>
 80095b0:	220b      	movs	r2, #11
 80095b2:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80095b6:	6a28      	ldr	r0, [r5, #32]
 80095b8:	f7ff fa62 	bl	8008a80 <mem_cpy.part.0>
			fs->wflag = 1;
 80095bc:	2301      	movs	r3, #1
 80095be:	70f3      	strb	r3, [r6, #3]
}
 80095c0:	4620      	mov	r0, r4
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0e8      	beq.n	800959a <dir_register+0x22>
			res = dir_next(dp, 1);
 80095c8:	2101      	movs	r1, #1
 80095ca:	4628      	mov	r0, r5
 80095cc:	f7ff fe8d 	bl	80092ea <dir_next>
 80095d0:	e7d7      	b.n	8009582 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80095d2:	2c04      	cmp	r4, #4
 80095d4:	bf08      	it	eq
 80095d6:	2407      	moveq	r4, #7
 80095d8:	e7f2      	b.n	80095c0 <dir_register+0x48>
	...

080095dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80095dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80095de:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80095e0:	a804      	add	r0, sp, #16
{
 80095e2:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80095e4:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 80095e8:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095ea:	f7ff fa16 	bl	8008a1a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80095ee:	1e05      	subs	r5, r0, #0
 80095f0:	db1f      	blt.n	8009632 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80095f2:	4912      	ldr	r1, [pc, #72]	; (800963c <f_mount+0x60>)
 80095f4:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 80095f8:	b15c      	cbz	r4, 8009612 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80095fa:	4b11      	ldr	r3, [pc, #68]	; (8009640 <f_mount+0x64>)
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4294      	cmp	r4, r2
 8009600:	bf04      	itt	eq
 8009602:	2200      	moveq	r2, #0
 8009604:	601a      	streq	r2, [r3, #0]
 8009606:	691a      	ldr	r2, [r3, #16]
 8009608:	2000      	movs	r0, #0
 800960a:	4294      	cmp	r4, r2
 800960c:	bf08      	it	eq
 800960e:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009610:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8009612:	9801      	ldr	r0, [sp, #4]
 8009614:	b108      	cbz	r0, 800961a <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009616:	2300      	movs	r3, #0
 8009618:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800961a:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800961e:	b130      	cbz	r0, 800962e <f_mount+0x52>
 8009620:	2e01      	cmp	r6, #1
 8009622:	d108      	bne.n	8009636 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009624:	2200      	movs	r2, #0
 8009626:	a901      	add	r1, sp, #4
 8009628:	4668      	mov	r0, sp
 800962a:	f7ff fb1b 	bl	8008c64 <find_volume>
	LEAVE_FF(fs, res);
}
 800962e:	b004      	add	sp, #16
 8009630:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009632:	200b      	movs	r0, #11
 8009634:	e7fb      	b.n	800962e <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009636:	2000      	movs	r0, #0
 8009638:	e7f9      	b.n	800962e <f_mount+0x52>
 800963a:	bf00      	nop
 800963c:	200015d8 	.word	0x200015d8
 8009640:	200015dc 	.word	0x200015dc

08009644 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009648:	b090      	sub	sp, #64	; 0x40
 800964a:	4690      	mov	r8, r2
 800964c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800964e:	4604      	mov	r4, r0
 8009650:	2800      	cmp	r0, #0
 8009652:	f000 80d1 	beq.w	80097f8 <f_open+0x1b4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009656:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800965a:	462a      	mov	r2, r5
 800965c:	a903      	add	r1, sp, #12
 800965e:	a801      	add	r0, sp, #4
 8009660:	f7ff fb00 	bl	8008c64 <find_volume>
	if (res == FR_OK) {
 8009664:	4607      	mov	r7, r0
 8009666:	bb38      	cbnz	r0, 80096b8 <f_open+0x74>
		dj.obj.fs = fs;
 8009668:	ae10      	add	r6, sp, #64	; 0x40
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009670:	9901      	ldr	r1, [sp, #4]
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff feba 	bl	80093ec <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009678:	b958      	cbnz	r0, 8009692 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800967a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800967e:	2b00      	cmp	r3, #0
 8009680:	db1e      	blt.n	80096c0 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009682:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8009686:	bf14      	ite	ne
 8009688:	2101      	movne	r1, #1
 800968a:	2100      	moveq	r1, #0
 800968c:	4630      	mov	r0, r6
 800968e:	f7ff f923 	bl	80088d8 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009692:	f018 0f1c 	tst.w	r8, #28
 8009696:	d073      	beq.n	8009780 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8009698:	b1a0      	cbz	r0, 80096c4 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800969a:	2804      	cmp	r0, #4
 800969c:	d109      	bne.n	80096b2 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800969e:	4b73      	ldr	r3, [pc, #460]	; (800986c <f_open+0x228>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	f000 80de 	beq.w	8009864 <f_open+0x220>
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80da 	beq.w	8009864 <f_open+0x220>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096b0:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096b2:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096b6:	b170      	cbz	r0, 80096d6 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80096b8:	2300      	movs	r3, #0
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	4607      	mov	r7, r0
 80096be:	e095      	b.n	80097ec <f_open+0x1a8>
				res = FR_INVALID_NAME;
 80096c0:	2006      	movs	r0, #6
 80096c2:	e7e6      	b.n	8009692 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80096c8:	f013 0f11 	tst.w	r3, #17
 80096cc:	d163      	bne.n	8009796 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096ce:	f018 0f04 	tst.w	r8, #4
 80096d2:	f040 80c1 	bne.w	8009858 <f_open+0x214>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096d6:	0728      	lsls	r0, r5, #28
 80096d8:	d53c      	bpl.n	8009754 <f_open+0x110>
				dw = GET_FATTIME();
 80096da:	f012 fa4f 	bl	801bb7c <get_fattime>
 80096de:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80096e0:	4601      	mov	r1, r0
 80096e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096e4:	300e      	adds	r0, #14
 80096e6:	f7ff f8e9 	bl	80088bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80096ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096ec:	4611      	mov	r1, r2
 80096ee:	3016      	adds	r0, #22
 80096f0:	f7ff f8e4 	bl	80088bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096f6:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096fa:	2220      	movs	r2, #32
 80096fc:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009702:	f899 0000 	ldrb.w	r0, [r9]
 8009706:	4651      	mov	r1, sl
 8009708:	f7ff f9c3 	bl	8008a92 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800970c:	2200      	movs	r2, #0
 800970e:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009710:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009712:	4648      	mov	r0, r9
 8009714:	f7ff f9cb 	bl	8008aae <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800971a:	2200      	movs	r2, #0
 800971c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800971e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8009720:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8009722:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	2101      	movs	r1, #1
 8009728:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800972a:	f1b8 0f00 	cmp.w	r8, #0
 800972e:	d011      	beq.n	8009754 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8009730:	4641      	mov	r1, r8
 8009732:	4630      	mov	r0, r6
						dw = fs->winsect;
 8009734:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8009738:	f7ff fd6c 	bl	8009214 <remove_chain>
						if (res == FR_OK) {
 800973c:	2800      	cmp	r0, #0
 800973e:	d1bb      	bne.n	80096b8 <f_open+0x74>
							res = move_window(fs, dw);
 8009740:	4649      	mov	r1, r9
 8009742:	9803      	ldr	r0, [sp, #12]
 8009744:	f7ff fa32 	bl	8008bac <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009748:	9a03      	ldr	r2, [sp, #12]
 800974a:	f108 33ff 	add.w	r3, r8, #4294967295
 800974e:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8009750:	2800      	cmp	r0, #0
 8009752:	d1b1      	bne.n	80096b8 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009754:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009756:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975a:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 800975c:	bf48      	it	mi
 800975e:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009762:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8009766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009768:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800976a:	bf14      	ite	ne
 800976c:	2101      	movne	r1, #1
 800976e:	2100      	moveq	r1, #0
 8009770:	4630      	mov	r0, r6
 8009772:	f7ff f8df 	bl	8008934 <inc_lock>
 8009776:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009778:	2800      	cmp	r0, #0
 800977a:	d13f      	bne.n	80097fc <f_open+0x1b8>
 800977c:	2002      	movs	r0, #2
 800977e:	e79b      	b.n	80096b8 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8009780:	2800      	cmp	r0, #0
 8009782:	d199      	bne.n	80096b8 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009784:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009788:	06da      	lsls	r2, r3, #27
 800978a:	d467      	bmi.n	800985c <f_open+0x218>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800978c:	f018 0f02 	tst.w	r8, #2
 8009790:	d0e0      	beq.n	8009754 <f_open+0x110>
 8009792:	07db      	lsls	r3, r3, #31
 8009794:	d5de      	bpl.n	8009754 <f_open+0x110>
					res = FR_DENIED;
 8009796:	2007      	movs	r0, #7
 8009798:	e78e      	b.n	80096b8 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	f7ff fc72 	bl	8009084 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 80097a0:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80097a2:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80097a4:	d926      	bls.n	80097f4 <f_open+0x1b0>
 80097a6:	1c42      	adds	r2, r0, #1
 80097a8:	4250      	negs	r0, r2
 80097aa:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80097ac:	eba5 0508 	sub.w	r5, r5, r8
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d04d      	beq.n	8009850 <f_open+0x20c>
				fp->clust = clst;
 80097b4:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f47f af7e 	bne.w	80096b8 <f_open+0x74>
 80097bc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80097c0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80097c4:	fbb5 f2f3 	udiv	r2, r5, r3
 80097c8:	fb03 5512 	mls	r5, r3, r2, r5
 80097cc:	b175      	cbz	r5, 80097ec <f_open+0x1a8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80097ce:	4640      	mov	r0, r8
 80097d0:	f7ff f904 	bl	80089dc <clust2sect>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d0d1      	beq.n	800977c <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80097d8:	4402      	add	r2, r0
 80097da:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80097dc:	2301      	movs	r3, #1
 80097de:	4631      	mov	r1, r6
 80097e0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80097e4:	f7ff f838 	bl	8008858 <disk_read>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d139      	bne.n	8009860 <f_open+0x21c>

	LEAVE_FF(fs, res);
}
 80097ec:	4638      	mov	r0, r7
 80097ee:	b010      	add	sp, #64	; 0x40
 80097f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 80097f4:	2002      	movs	r0, #2
 80097f6:	e7d9      	b.n	80097ac <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 80097f8:	2709      	movs	r7, #9
 80097fa:	e7f7      	b.n	80097ec <f_open+0x1a8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097fc:	9e03      	ldr	r6, [sp, #12]
 80097fe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009802:	7830      	ldrb	r0, [r6, #0]
 8009804:	4641      	mov	r1, r8
 8009806:	f7ff f944 	bl	8008a92 <ld_clust.isra.1>
 800980a:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800980c:	f108 001c 	add.w	r0, r8, #28
 8009810:	f7ff f84c 	bl	80088ac <ld_dword>
			fp->obj.id = fs->id;
 8009814:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009816:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009818:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800981a:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800981e:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8009820:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009822:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8009824:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8009826:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009828:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800982a:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800982c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff f84b 	bl	80088cc <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009836:	06ab      	lsls	r3, r5, #26
 8009838:	d5d8      	bpl.n	80097ec <f_open+0x1a8>
 800983a:	68e5      	ldr	r5, [r4, #12]
 800983c:	2d00      	cmp	r5, #0
 800983e:	d0d5      	beq.n	80097ec <f_open+0x1a8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009840:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009842:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009844:	895a      	ldrh	r2, [r3, #10]
 8009846:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800984a:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800984c:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009850:	45a8      	cmp	r8, r5
 8009852:	d3a2      	bcc.n	800979a <f_open+0x156>
 8009854:	2000      	movs	r0, #0
 8009856:	e7ad      	b.n	80097b4 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009858:	2008      	movs	r0, #8
 800985a:	e72d      	b.n	80096b8 <f_open+0x74>
					res = FR_NO_FILE;
 800985c:	2004      	movs	r0, #4
 800985e:	e72b      	b.n	80096b8 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009860:	2001      	movs	r0, #1
 8009862:	e729      	b.n	80096b8 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009864:	4630      	mov	r0, r6
 8009866:	f7ff fe87 	bl	8009578 <dir_register>
 800986a:	e722      	b.n	80096b2 <f_open+0x6e>
 800986c:	200015dc 	.word	0x200015dc

08009870 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	469b      	mov	fp, r3
 8009876:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009878:	2300      	movs	r3, #0
{
 800987a:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 800987c:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009880:	a903      	add	r1, sp, #12
{
 8009882:	4604      	mov	r4, r0
 8009884:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009886:	f7ff f8e0 	bl	8008a4a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800988a:	4605      	mov	r5, r0
 800988c:	2800      	cmp	r0, #0
 800988e:	d132      	bne.n	80098f6 <f_write+0x86>
 8009890:	7d65      	ldrb	r5, [r4, #21]
 8009892:	bb85      	cbnz	r5, 80098f6 <f_write+0x86>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009894:	7d23      	ldrb	r3, [r4, #20]
 8009896:	079a      	lsls	r2, r3, #30
 8009898:	f140 80be 	bpl.w	8009a18 <f_write+0x1a8>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800989c:	69a3      	ldr	r3, [r4, #24]
 800989e:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80098a2:	bf28      	it	cs
 80098a4:	ea6f 0803 	mvncs.w	r8, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80098a8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80098ac:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 80098ae:	f1b8 0f00 	cmp.w	r8, #0
 80098b2:	d01c      	beq.n	80098ee <f_write+0x7e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80098b4:	9803      	ldr	r0, [sp, #12]
 80098b6:	69a1      	ldr	r1, [r4, #24]
 80098b8:	8983      	ldrh	r3, [r0, #12]
 80098ba:	fbb1 f2f3 	udiv	r2, r1, r3
 80098be:	fb03 1312 	mls	r3, r3, r2, r1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f040 8091 	bne.w	80099ea <f_write+0x17a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80098c8:	8943      	ldrh	r3, [r0, #10]
 80098ca:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 80098cc:	4013      	ands	r3, r2
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	d124      	bne.n	800991c <f_write+0xac>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80098d2:	b931      	cbnz	r1, 80098e2 <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80098d4:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80098d6:	b9a0      	cbnz	r0, 8009902 <f_write+0x92>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80098d8:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80098da:	4620      	mov	r0, r4
 80098dc:	f7ff fc42 	bl	8009164 <create_chain>
 80098e0:	e004      	b.n	80098ec <f_write+0x7c>
					if (fp->cltbl) {
 80098e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098e4:	b15b      	cbz	r3, 80098fe <f_write+0x8e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7ff f883 	bl	80089f2 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80098ec:	b948      	cbnz	r0, 8009902 <f_write+0x92>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80098ee:	7d23      	ldrb	r3, [r4, #20]
 80098f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f4:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 80098f6:	4628      	mov	r0, r5
 80098f8:	b005      	add	sp, #20
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80098fe:	69e1      	ldr	r1, [r4, #28]
 8009900:	e7eb      	b.n	80098da <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009902:	2801      	cmp	r0, #1
 8009904:	d102      	bne.n	800990c <f_write+0x9c>
 8009906:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009908:	7565      	strb	r5, [r4, #21]
 800990a:	e7f4      	b.n	80098f6 <f_write+0x86>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d101      	bne.n	8009914 <f_write+0xa4>
 8009910:	2501      	movs	r5, #1
 8009912:	e7f9      	b.n	8009908 <f_write+0x98>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009914:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8009916:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009918:	b903      	cbnz	r3, 800991c <f_write+0xac>
 800991a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800991c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009920:	2b00      	cmp	r3, #0
 8009922:	da0c      	bge.n	800993e <f_write+0xce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009924:	9803      	ldr	r0, [sp, #12]
 8009926:	6a22      	ldr	r2, [r4, #32]
 8009928:	9900      	ldr	r1, [sp, #0]
 800992a:	7840      	ldrb	r0, [r0, #1]
 800992c:	2301      	movs	r3, #1
 800992e:	f7fe ffa1 	bl	8008874 <disk_write>
 8009932:	2800      	cmp	r0, #0
 8009934:	d1ec      	bne.n	8009910 <f_write+0xa0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009936:	7d23      	ldrb	r3, [r4, #20]
 8009938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800993c:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800993e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009942:	69e1      	ldr	r1, [r4, #28]
 8009944:	4650      	mov	r0, sl
 8009946:	f7ff f849 	bl	80089dc <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800994a:	2800      	cmp	r0, #0
 800994c:	d0db      	beq.n	8009906 <f_write+0x96>
			sect += csect;
 800994e:	9b01      	ldr	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009950:	f8ba 700c 	ldrh.w	r7, [sl, #12]
 8009954:	fbb8 f7f7 	udiv	r7, r8, r7
			sect += csect;
 8009958:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800995a:	2f00      	cmp	r7, #0
 800995c:	d034      	beq.n	80099c8 <f_write+0x158>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800995e:	9a01      	ldr	r2, [sp, #4]
 8009960:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009964:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009968:	443a      	add	r2, r7
 800996a:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800996c:	bf84      	itt	hi
 800996e:	9a01      	ldrhi	r2, [sp, #4]
 8009970:	1a9f      	subhi	r7, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009972:	463b      	mov	r3, r7
 8009974:	4632      	mov	r2, r6
 8009976:	4649      	mov	r1, r9
 8009978:	f7fe ff7c 	bl	8008874 <disk_write>
 800997c:	2800      	cmp	r0, #0
 800997e:	d1c7      	bne.n	8009910 <f_write+0xa0>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009980:	6a21      	ldr	r1, [r4, #32]
 8009982:	1b89      	subs	r1, r1, r6
 8009984:	428f      	cmp	r7, r1
 8009986:	d90b      	bls.n	80099a0 <f_write+0x130>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009988:	9b03      	ldr	r3, [sp, #12]
 800998a:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 800998c:	b122      	cbz	r2, 8009998 <f_write+0x128>
 800998e:	fb02 9101 	mla	r1, r2, r1, r9
 8009992:	9800      	ldr	r0, [sp, #0]
 8009994:	f7ff f874 	bl	8008a80 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009998:	7d23      	ldrb	r3, [r4, #20]
 800999a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999e:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	899b      	ldrh	r3, [r3, #12]
 80099a4:	435f      	muls	r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80099a6:	69a3      	ldr	r3, [r4, #24]
 80099a8:	68e2      	ldr	r2, [r4, #12]
 80099aa:	443b      	add	r3, r7
 80099ac:	61a3      	str	r3, [r4, #24]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	bf2c      	ite	cs
 80099b2:	60e2      	strcs	r2, [r4, #12]
 80099b4:	60e3      	strcc	r3, [r4, #12]
 80099b6:	f8db 3000 	ldr.w	r3, [fp]
 80099ba:	443b      	add	r3, r7
 80099bc:	44b9      	add	r9, r7
 80099be:	f8cb 3000 	str.w	r3, [fp]
 80099c2:	eba8 0807 	sub.w	r8, r8, r7
 80099c6:	e772      	b.n	80098ae <f_write+0x3e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80099c8:	6a23      	ldr	r3, [r4, #32]
 80099ca:	429e      	cmp	r6, r3
 80099cc:	d00c      	beq.n	80099e8 <f_write+0x178>
 80099ce:	69a2      	ldr	r2, [r4, #24]
 80099d0:	68e3      	ldr	r3, [r4, #12]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d208      	bcs.n	80099e8 <f_write+0x178>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80099d6:	2301      	movs	r3, #1
 80099d8:	4632      	mov	r2, r6
 80099da:	9900      	ldr	r1, [sp, #0]
 80099dc:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80099e0:	f7fe ff3a 	bl	8008858 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d193      	bne.n	8009910 <f_write+0xa0>
			fp->sect = sect;
 80099e8:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	899f      	ldrh	r7, [r3, #12]
 80099ee:	69a3      	ldr	r3, [r4, #24]
 80099f0:	fbb3 f0f7 	udiv	r0, r3, r7
 80099f4:	fb07 3010 	mls	r0, r7, r0, r3
 80099f8:	1a3f      	subs	r7, r7, r0
 80099fa:	4547      	cmp	r7, r8
 80099fc:	bf28      	it	cs
 80099fe:	4647      	movcs	r7, r8
	if (cnt) {
 8009a00:	b12f      	cbz	r7, 8009a0e <f_write+0x19e>
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	463a      	mov	r2, r7
 8009a06:	4649      	mov	r1, r9
 8009a08:	4418      	add	r0, r3
 8009a0a:	f7ff f839 	bl	8008a80 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8009a0e:	7d23      	ldrb	r3, [r4, #20]
 8009a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a14:	7523      	strb	r3, [r4, #20]
 8009a16:	e7c6      	b.n	80099a6 <f_write+0x136>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009a18:	2507      	movs	r5, #7
 8009a1a:	e76c      	b.n	80098f6 <f_write+0x86>

08009a1c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a1e:	a901      	add	r1, sp, #4
{
 8009a20:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a22:	f7ff f812 	bl	8008a4a <validate>
	if (res == FR_OK) {
 8009a26:	4605      	mov	r5, r0
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d13a      	bne.n	8009aa2 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009a2c:	7d23      	ldrb	r3, [r4, #20]
 8009a2e:	065a      	lsls	r2, r3, #25
 8009a30:	d537      	bpl.n	8009aa2 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009a32:	061b      	lsls	r3, r3, #24
 8009a34:	d50c      	bpl.n	8009a50 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a36:	9801      	ldr	r0, [sp, #4]
 8009a38:	6a22      	ldr	r2, [r4, #32]
 8009a3a:	7840      	ldrb	r0, [r0, #1]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009a42:	f7fe ff17 	bl	8008874 <disk_write>
 8009a46:	bb78      	cbnz	r0, 8009aa8 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a48:	7d23      	ldrb	r3, [r4, #20]
 8009a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a4e:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a50:	f012 f894 	bl	801bb7c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a54:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8009a56:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8009a58:	9801      	ldr	r0, [sp, #4]
 8009a5a:	f7ff f8a7 	bl	8008bac <move_window>
				if (res == FR_OK) {
 8009a5e:	4605      	mov	r5, r0
 8009a60:	b9f8      	cbnz	r0, 8009aa2 <f_sync+0x86>
					dir = fp->dir_ptr;
 8009a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a64:	7af3      	ldrb	r3, [r6, #11]
 8009a66:	f043 0320 	orr.w	r3, r3, #32
 8009a6a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009a6c:	68a2      	ldr	r2, [r4, #8]
 8009a6e:	6820      	ldr	r0, [r4, #0]
 8009a70:	4631      	mov	r1, r6
 8009a72:	f7ff f81c 	bl	8008aae <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009a76:	68e1      	ldr	r1, [r4, #12]
 8009a78:	f106 001c 	add.w	r0, r6, #28
 8009a7c:	f7fe ff1e 	bl	80088bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009a80:	4639      	mov	r1, r7
 8009a82:	f106 0016 	add.w	r0, r6, #22
 8009a86:	f7fe ff19 	bl	80088bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8009a8a:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a8c:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8009a8e:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8009a90:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8009a92:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a94:	f7ff f840 	bl	8008b18 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a98:	7d23      	ldrb	r3, [r4, #20]
 8009a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a9e:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009aa0:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	b003      	add	sp, #12
 8009aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009aa8:	2501      	movs	r5, #1
 8009aaa:	e7fa      	b.n	8009aa2 <f_sync+0x86>

08009aac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009aac:	b513      	push	{r0, r1, r4, lr}
 8009aae:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ab0:	f7ff ffb4 	bl	8009a1c <f_sync>
	if (res == FR_OK)
 8009ab4:	b948      	cbnz	r0, 8009aca <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ab6:	a901      	add	r1, sp, #4
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f7fe ffc6 	bl	8008a4a <validate>
		if (res == FR_OK) {
 8009abe:	b920      	cbnz	r0, 8009aca <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009ac0:	6920      	ldr	r0, [r4, #16]
 8009ac2:	f7fe ff73 	bl	80089ac <dec_lock>
			if (res == FR_OK)
 8009ac6:	b900      	cbnz	r0, 8009aca <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009ac8:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009aca:	b002      	add	sp, #8
 8009acc:	bd10      	pop	{r4, pc}
	...

08009ad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ad0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009ad2:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <FATFS_LinkDriverEx+0x40>)
 8009ad4:	7a5d      	ldrb	r5, [r3, #9]
 8009ad6:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8009ada:	b9b5      	cbnz	r5, 8009b0a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009adc:	7a5d      	ldrb	r5, [r3, #9]
 8009ade:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009ae0:	7a5d      	ldrb	r5, [r3, #9]
 8009ae2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009ae6:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009ae8:	7a58      	ldrb	r0, [r3, #9]
 8009aea:	4418      	add	r0, r3
 8009aec:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009aee:	7a5a      	ldrb	r2, [r3, #9]
 8009af0:	b2d2      	uxtb	r2, r2
 8009af2:	1c50      	adds	r0, r2, #1
 8009af4:	b2c0      	uxtb	r0, r0
 8009af6:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8009af8:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8009afa:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8009afc:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009afe:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8009b00:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8009b02:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009b04:	70cc      	strb	r4, [r1, #3]
 8009b06:	4620      	mov	r0, r4
 8009b08:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8009b0a:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8009b0c:	bd30      	pop	{r4, r5, pc}
 8009b0e:	bf00      	nop
 8009b10:	20001600 	.word	0x20001600

08009b14 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b14:	2200      	movs	r2, #0
 8009b16:	f7ff bfdb 	b.w	8009ad0 <FATFS_LinkDriverEx>
	...

08009b1c <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8009b1c:	4a0a      	ldr	r2, [pc, #40]	; (8009b48 <FATFS_UnLinkDriverEx+0x2c>)
 8009b1e:	7a53      	ldrb	r3, [r2, #9]
 8009b20:	b17b      	cbz	r3, 8009b42 <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8009b22:	7803      	ldrb	r3, [r0, #0]
 8009b24:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009b2c:	6848      	ldr	r0, [r1, #4]
 8009b2e:	b140      	cbz	r0, 8009b42 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8009b30:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8009b32:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8009b34:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8009b36:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8009b38:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	7253      	strb	r3, [r2, #9]
 8009b40:	4770      	bx	lr
  uint8_t ret = 1;
 8009b42:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20001600 	.word	0x20001600

08009b4c <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	f7ff bfe5 	b.w	8009b1c <FATFS_UnLinkDriverEx>
 8009b52:	0000      	movs	r0, r0
 8009b54:	0000      	movs	r0, r0
	...

08009b58 <calcNorm560>:
double M_inv[9] = { 1.07645, -0.237662, 0.161212,
					0.410964, 0.554342, 0.034694,
					-0.010954, -0.013389, 1.024343 };
					
void calcNorm560(uint16_t CCT_measure)
{
 8009b58:	b508      	push	{r3, lr}
	norm_560 = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 8009b5a:	f7f6 fcfb 	bl	8000554 <__aeabi_i2d>
 8009b5e:	a316      	add	r3, pc, #88	; (adr r3, 8009bb8 <calcNorm560+0x60>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f7f6 fd5c 	bl	8000620 <__aeabi_dmul>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	a114      	add	r1, pc, #80	; (adr r1, 8009bc0 <calcNorm560+0x68>)
 8009b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b72:	f7f6 fe7f 	bl	8000874 <__aeabi_ddiv>
 8009b76:	ec41 0b10 	vmov	d0, r0, r1
 8009b7a:	f018 ff75 	bl	8022a68 <exp>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	ec51 0b10 	vmov	r0, r1, d0
 8009b84:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <calcNorm560+0x58>)
 8009b86:	f7f6 fb97 	bl	80002b8 <__aeabi_dsub>
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	a106      	add	r1, pc, #24	; (adr r1, 8009ba8 <calcNorm560+0x50>)
 8009b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b94:	f7f6 fe6e 	bl	8000874 <__aeabi_ddiv>
 8009b98:	f7f7 f83a 	bl	8000c10 <__aeabi_d2f>
 8009b9c:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <calcNorm560+0x5c>)
 8009b9e:	6018      	str	r0, [r3, #0]
 8009ba0:	bd08      	pop	{r3, pc}
 8009ba2:	bf00      	nop
 8009ba4:	f3af 8000 	nop.w
 8009ba8:	f9f35846 	.word	0xf9f35846
 8009bac:	466ca5d1 	.word	0x466ca5d1
 8009bb0:	3ff00000 	.word	0x3ff00000
 8009bb4:	20090818 	.word	0x20090818
 8009bb8:	05ea7ab3 	.word	0x05ea7ab3
 8009bbc:	3ea2ca5d 	.word	0x3ea2ca5d
 8009bc0:	aba38759 	.word	0xaba38759
 8009bc4:	3f8d7774 	.word	0x3f8d7774

08009bc8 <calcSref>:
}

double ans = 0;
double calcSref(int idx, uint16_t CCT_measure)
{
 8009bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (CCT_measure < 5000)
 8009bcc:	f241 3387 	movw	r3, #4999	; 0x1387
 8009bd0:	4299      	cmp	r1, r3
{
 8009bd2:	460e      	mov	r6, r1
 8009bd4:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8009bd8:	4c3b      	ldr	r4, [pc, #236]	; (8009cc8 <calcSref+0x100>)
	if (CCT_measure < 5000)
 8009bda:	d84d      	bhi.n	8009c78 <calcSref+0xb0>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 8009bdc:	4d3b      	ldr	r5, [pc, #236]	; (8009ccc <calcSref+0x104>)
 8009bde:	4405      	add	r5, r0
 8009be0:	6828      	ldr	r0, [r5, #0]
 8009be2:	f7f6 fcc9 	bl	8000578 <__aeabi_f2d>
 8009be6:	a332      	add	r3, pc, #200	; (adr r3, 8009cb0 <calcSref+0xe8>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fd18 	bl	8000620 <__aeabi_dmul>
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	f7f6 fcad 	bl	8000554 <__aeabi_i2d>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4640      	mov	r0, r8
 8009c00:	4649      	mov	r1, r9
 8009c02:	f7f6 fd0d 	bl	8000620 <__aeabi_dmul>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	a12b      	add	r1, pc, #172	; (adr r1, 8009cb8 <calcSref+0xf0>)
 8009c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c10:	f7f6 fe30 	bl	8000874 <__aeabi_ddiv>
 8009c14:	ec41 0b10 	vmov	d0, r0, r1
 8009c18:	f018 ff26 	bl	8022a68 <exp>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	ec51 0b10 	vmov	r0, r1, d0
 8009c22:	4b2b      	ldr	r3, [pc, #172]	; (8009cd0 <calcSref+0x108>)
 8009c24:	f7f6 fb48 	bl	80002b8 <__aeabi_dsub>
 8009c28:	e9c4 0100 	strd	r0, r1, [r4]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009c2c:	6828      	ldr	r0, [r5, #0]
 8009c2e:	f7f6 fca3 	bl	8000578 <__aeabi_f2d>
 8009c32:	a31f      	add	r3, pc, #124	; (adr r3, 8009cb0 <calcSref+0xe8>)
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f7f6 fcf2 	bl	8000620 <__aeabi_dmul>
 8009c3c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8009cc0 <calcSref+0xf8>
 8009c40:	ec41 0b10 	vmov	d0, r0, r1
 8009c44:	f019 f80c 	bl	8022c60 <pow>
 8009c48:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c4c:	ec51 0b10 	vmov	r0, r1, d0
 8009c50:	f7f6 fe10 	bl	8000874 <__aeabi_ddiv>
		ans /= norm_560;
 8009c54:	4b1f      	ldr	r3, [pc, #124]	; (8009cd4 <calcSref+0x10c>)
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009c56:	4606      	mov	r6, r0
		ans /= norm_560;
 8009c58:	6818      	ldr	r0, [r3, #0]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009c5a:	460f      	mov	r7, r1
		ans /= norm_560;
 8009c5c:	f7f6 fc8c 	bl	8000578 <__aeabi_f2d>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4630      	mov	r0, r6
 8009c66:	4639      	mov	r1, r7
 8009c68:	f7f6 fe04 	bl	8000874 <__aeabi_ddiv>
	}
	else
	{
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009c6c:	e9c4 0100 	strd	r0, r1, [r4]
	}
	return ans;
}
 8009c70:	ed94 0b00 	vldr	d0, [r4]
 8009c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009c78:	4a17      	ldr	r2, [pc, #92]	; (8009cd8 <calcSref+0x110>)
 8009c7a:	4b18      	ldr	r3, [pc, #96]	; (8009cdc <calcSref+0x114>)
 8009c7c:	4918      	ldr	r1, [pc, #96]	; (8009ce0 <calcSref+0x118>)
 8009c7e:	4403      	add	r3, r0
 8009c80:	4401      	add	r1, r0
 8009c82:	4410      	add	r0, r2
 8009c84:	4a17      	ldr	r2, [pc, #92]	; (8009ce4 <calcSref+0x11c>)
 8009c86:	edd1 6a00 	vldr	s13, [r1]
 8009c8a:	ed92 7a00 	vldr	s14, [r2]
 8009c8e:	edd0 7a00 	vldr	s15, [r0]
 8009c92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009c96:	edd3 6a00 	vldr	s13, [r3]
 8009c9a:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <calcSref+0x120>)
 8009c9c:	ed93 7a00 	vldr	s14, [r3]
 8009ca0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009ca4:	ee17 0a90 	vmov	r0, s15
 8009ca8:	f7f6 fc66 	bl	8000578 <__aeabi_f2d>
 8009cac:	e7de      	b.n	8009c6c <calcSref+0xa4>
 8009cae:	bf00      	nop
 8009cb0:	e826d695 	.word	0xe826d695
 8009cb4:	3e112e0b 	.word	0x3e112e0b
 8009cb8:	aba38759 	.word	0xaba38759
 8009cbc:	3f8d7774 	.word	0x3f8d7774
 8009cc0:	00000000 	.word	0x00000000
 8009cc4:	c0140000 	.word	0xc0140000
 8009cc8:	20003628 	.word	0x20003628
 8009ccc:	20054938 	.word	0x20054938
 8009cd0:	3ff00000 	.word	0x3ff00000
 8009cd4:	20090818 	.word	0x20090818
 8009cd8:	2004e92c 	.word	0x2004e92c
 8009cdc:	2005092c 	.word	0x2005092c
 8009ce0:	2004f92c 	.word	0x2004f92c
 8009ce4:	2000360c 	.word	0x2000360c
 8009ce8:	20003610 	.word	0x20003610
 8009cec:	00000000 	.word	0x00000000

08009cf0 <cqs_func>:

void cqs_func(uint16_t CCT_measure, float *Rabs)
{
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	ed2d 8b0a 	vpush	{d8-d12}
 8009cf8:	b0af      	sub	sp, #188	; 0xbc
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	9004      	str	r0, [sp, #16]
	double x_test = 0;	
	double y_test = 0;		
	double z_test = 0;	
	
	
	memset(CQS_S_test, 0, sizeof(CQS_S_test));
 8009cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d02:	2100      	movs	r1, #0
 8009d04:	48c4      	ldr	r0, [pc, #784]	; (800a018 <cqs_func+0x328>)
 8009d06:	f015 fe76 	bl	801f9f6 <memset>
	memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 8009d0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d0e:	2100      	movs	r1, #0
 8009d10:	48c2      	ldr	r0, [pc, #776]	; (800a01c <cqs_func+0x32c>)
 8009d12:	f015 fe70 	bl	801f9f6 <memset>
	
	for (uint16_t i = 0; i < 1024; i++){
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009d16:	4bc2      	ldr	r3, [pc, #776]	; (800a020 <cqs_func+0x330>)
 8009d18:	ed93 7a00 	vldr	s14, [r3]
 8009d1c:	4bbe      	ldr	r3, [pc, #760]	; (800a018 <cqs_func+0x328>)
 8009d1e:	4621      	mov	r1, r4
 8009d20:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8009d24:	ecf1 6a01 	vldmia	r1!, {s13}
 8009d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t i = 0; i < 1024; i++){
 8009d2c:	428a      	cmp	r2, r1
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009d2e:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t i = 0; i < 1024; i++){
 8009d32:	d1f7      	bne.n	8009d24 <cqs_func+0x34>
	}

	if (CCT_measure < 3500){
 8009d34:	9a04      	ldr	r2, [sp, #16]
 8009d36:	f640 53ab 	movw	r3, #3499	; 0xdab
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	f200 870d 	bhi.w	800ab5a <cqs_func+0xe6a>
		Mcct = (float)CCT_measure*(float)CCT_measure*(float)CCT_measure*0.000000000092672 - (float)CCT_measure*(float)CCT_measure*0.00000083959 + (float)CCT_measure*0.00255 - 1.612;
 8009d40:	ee07 2a90 	vmov	s15, r2
 8009d44:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009d48:	ee68 8a08 	vmul.f32	s17, s16, s16
 8009d4c:	ee68 7a28 	vmul.f32	s15, s16, s17
 8009d50:	ee17 0a90 	vmov	r0, s15
 8009d54:	f7f6 fc10 	bl	8000578 <__aeabi_f2d>
 8009d58:	a3a3      	add	r3, pc, #652	; (adr r3, 8009fe8 <cqs_func+0x2f8>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fc5f 	bl	8000620 <__aeabi_dmul>
 8009d62:	4604      	mov	r4, r0
 8009d64:	ee18 0a90 	vmov	r0, s17
 8009d68:	460d      	mov	r5, r1
 8009d6a:	f7f6 fc05 	bl	8000578 <__aeabi_f2d>
 8009d6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009ff0 <cqs_func+0x300>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fc54 	bl	8000620 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	4629      	mov	r1, r5
 8009d80:	f7f6 fa9a 	bl	80002b8 <__aeabi_dsub>
 8009d84:	4604      	mov	r4, r0
 8009d86:	ee18 0a10 	vmov	r0, s16
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	f7f6 fbf4 	bl	8000578 <__aeabi_f2d>
 8009d90:	a399      	add	r3, pc, #612	; (adr r3, 8009ff8 <cqs_func+0x308>)
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f7f6 fc43 	bl	8000620 <__aeabi_dmul>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7f6 fa8b 	bl	80002bc <__adddf3>
 8009da6:	a396      	add	r3, pc, #600	; (adr r3, 800a000 <cqs_func+0x310>)
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	f7f6 fa84 	bl	80002b8 <__aeabi_dsub>
 8009db0:	4b9c      	ldr	r3, [pc, #624]	; (800a024 <cqs_func+0x334>)
 8009db2:	e9c3 0100 	strd	r0, r1, [r3]
	}
	
	if (CCT_measure < 5000)
	{
		calcNorm560(CCT_measure);
 8009db6:	9804      	ldr	r0, [sp, #16]
 8009db8:	f7ff fece 	bl	8009b58 <calcNorm560>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
	}
	
	bar_CQS = 0.2;
 8009dbc:	a192      	add	r1, pc, #584	; (adr r1, 800a008 <cqs_func+0x318>)
 8009dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc2:	4b99      	ldr	r3, [pc, #612]	; (800a028 <cqs_func+0x338>)
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009dc4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800a02c <cqs_func+0x33c>
	bar_CQS = 0.2;
 8009dc8:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009dcc:	210d      	movs	r1, #13
 8009dce:	2055      	movs	r0, #85	; 0x55
 8009dd0:	f009 f972 	bl	80130b8 <GUI_Bar_Measure>

	memset(x_ref, 0, sizeof(x_ref));
 8009dd4:	2278      	movs	r2, #120	; 0x78
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4895      	ldr	r0, [pc, #596]	; (800a030 <cqs_func+0x340>)
 8009dda:	f015 fe0c 	bl	801f9f6 <memset>
	memset(y_ref, 0, sizeof(y_ref));
 8009dde:	2278      	movs	r2, #120	; 0x78
 8009de0:	2100      	movs	r1, #0
 8009de2:	4894      	ldr	r0, [pc, #592]	; (800a034 <cqs_func+0x344>)
 8009de4:	f015 fe07 	bl	801f9f6 <memset>
	memset(z_ref, 0, sizeof(z_ref));
 8009de8:	2278      	movs	r2, #120	; 0x78
 8009dea:	2100      	movs	r1, #0
 8009dec:	4892      	ldr	r0, [pc, #584]	; (800a038 <cqs_func+0x348>)
 8009dee:	f015 fe02 	bl	801f9f6 <memset>
	double zw_test = 0;
 8009df2:	f04f 0a00 	mov.w	sl, #0
 8009df6:	f04f 0b00 	mov.w	fp, #0
 8009dfa:	4b8d      	ldr	r3, [pc, #564]	; (800a030 <cqs_func+0x340>)
 8009dfc:	930a      	str	r3, [sp, #40]	; 0x28
	double yw_test = 0;
 8009dfe:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8009e02:	4b8c      	ldr	r3, [pc, #560]	; (800a034 <cqs_func+0x344>)
 8009e04:	9308      	str	r3, [sp, #32]
	double xw_test = 0;
 8009e06:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
	double zw_ref = 0;
 8009e0a:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	double yw_ref = 0;
 8009e0e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	double xw_ref = 0;
 8009e12:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	double k_test = 0;
 8009e16:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double k_ref = 0;
 8009e1a:	e9cd ab00 	strd	sl, fp, [sp]
 8009e1e:	4b86      	ldr	r3, [pc, #536]	; (800a038 <cqs_func+0x348>)
 8009e20:	9306      	str	r3, [sp, #24]
		bar_CQS += 0.04;
		GUI_Bar_Measure(85, 13, bar_CQS);
		
		 x_test = 0;	
		 y_test = 0;		
		 z_test = 0;	
 8009e22:	ec4b ab1b 	vmov	d11, sl, fp
		 y_test = 0;		
 8009e26:	ec4b ab1a 	vmov	d10, sl, fp
	memset(z_ref, 0, sizeof(z_ref));
 8009e2a:	2400      	movs	r4, #0
		bar_CQS += 0.04;
 8009e2c:	4d7e      	ldr	r5, [pc, #504]	; (800a028 <cqs_func+0x338>)
 8009e2e:	4f83      	ldr	r7, [pc, #524]	; (800a03c <cqs_func+0x34c>)
	
	
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8009e30:	4e79      	ldr	r6, [pc, #484]	; (800a018 <cqs_func+0x328>)
		bar_CQS += 0.04;
 8009e32:	a377      	add	r3, pc, #476	; (adr r3, 800a010 <cqs_func+0x320>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009e3c:	f7f6 fa3e 	bl	80002bc <__adddf3>
 8009e40:	e9c5 0100 	strd	r0, r1, [r5]
		GUI_Bar_Measure(85, 13, bar_CQS);
 8009e44:	f7f6 fee4 	bl	8000c10 <__aeabi_d2f>
 8009e48:	210d      	movs	r1, #13
 8009e4a:	ee00 0a10 	vmov	s0, r0
 8009e4e:	2055      	movs	r0, #85	; 0x55
 8009e50:	f009 f932 	bl	80130b8 <GUI_Bar_Measure>
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8009e54:	487a      	ldr	r0, [pc, #488]	; (800a040 <cqs_func+0x350>)
 8009e56:	4a71      	ldr	r2, [pc, #452]	; (800a01c <cqs_func+0x32c>)
 8009e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e5c:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8009e60:	f004 ff1a 	bl	800ec98 <Calibration_Load_Pack>
 8009e64:	4b77      	ldr	r3, [pc, #476]	; (800a044 <cqs_func+0x354>)
 8009e66:	9320      	str	r3, [sp, #128]	; 0x80
 8009e68:	4b77      	ldr	r3, [pc, #476]	; (800a048 <cqs_func+0x358>)
 8009e6a:	931e      	str	r3, [sp, #120]	; 0x78
		 z_test = 0;	
 8009e6c:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
 8009e70:	4b76      	ldr	r3, [pc, #472]	; (800a04c <cqs_func+0x35c>)
 8009e72:	931c      	str	r3, [sp, #112]	; 0x70
		 y_test = 0;		
 8009e74:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
		 x_test = 0;	
 8009e78:	ed8d ab16 	vstr	d10, [sp, #88]	; 0x58
 8009e7c:	b2e3      	uxtb	r3, r4

		for (int j = 0; j < 1024; j++)
 8009e7e:	2500      	movs	r5, #0
 8009e80:	9326      	str	r3, [sp, #152]	; 0x98
		{
			if (i == 0)
 8009e82:	2c00      	cmp	r4, #0
 8009e84:	d17d      	bne.n	8009f82 <cqs_func+0x292>
			{
				s_ref[j] = calcSref(j, CCT_measure);
 8009e86:	9904      	ldr	r1, [sp, #16]
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f7ff fe9d 	bl	8009bc8 <calcSref>
 8009e8e:	ec51 0b10 	vmov	r0, r1, d0
 8009e92:	f7f6 febd 	bl	8000c10 <__aeabi_d2f>
 8009e96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e98:	6018      	str	r0, [r3, #0]
				k_ref += s_ref[j] * Spectral_day[j];
 8009e9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
				s_ref[j] = calcSref(j, CCT_measure);
 8009e9c:	ee08 0a10 	vmov	s16, r0
				k_ref += s_ref[j] * Spectral_day[j];
 8009ea0:	edd3 9a00 	vldr	s19, [r3]
 8009ea4:	ee68 7a29 	vmul.f32	s15, s16, s19
 8009ea8:	ee17 0a90 	vmov	r0, s15
 8009eac:	f7f6 fb64 	bl	8000578 <__aeabi_f2d>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	4680      	mov	r8, r0
 8009eb4:	4689      	mov	r9, r1
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ebc:	f7f6 f9fe 	bl	80002bc <__adddf3>
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009ec0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009ec2:	ed93 9a00 	vldr	s18, [r3]
 8009ec6:	ee68 7a09 	vmul.f32	s15, s16, s18
				k_ref += s_ref[j] * Spectral_day[j];
 8009eca:	e9cd 0100 	strd	r0, r1, [sp]
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009ece:	ee17 0a90 	vmov	r0, s15
 8009ed2:	f7f6 fb51 	bl	8000578 <__aeabi_f2d>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ede:	f7f6 f9ed 	bl	80002bc <__adddf3>
				yw_ref += s_ref[j] * Spectral_day[j];
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	464b      	mov	r3, r9
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009ee6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				yw_ref += s_ref[j] * Spectral_day[j];
 8009eea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009eee:	f7f6 f9e5 	bl	80002bc <__adddf3>
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009ef2:	edd7 8a00 	vldr	s17, [r7]
 8009ef6:	ee68 7a28 	vmul.f32	s15, s16, s17
				yw_ref += s_ref[j] * Spectral_day[j];
 8009efa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009efe:	ee17 0a90 	vmov	r0, s15
 8009f02:	f7f6 fb39 	bl	8000578 <__aeabi_f2d>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f0e:	f7f6 f9d5 	bl	80002bc <__adddf3>
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009f12:	ed96 8a00 	vldr	s16, [r6]
 8009f16:	ee69 7a88 	vmul.f32	s15, s19, s16
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009f1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009f1e:	ee17 0a90 	vmov	r0, s15
 8009f22:	f7f6 fb29 	bl	8000578 <__aeabi_f2d>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	4689      	mov	r9, r1
 8009f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f32:	f7f6 f9c3 	bl	80002bc <__adddf3>
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009f36:	ee69 7a08 	vmul.f32	s15, s18, s16
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009f3e:	ee17 0a90 	vmov	r0, s15
 8009f42:	f7f6 fb19 	bl	8000578 <__aeabi_f2d>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009f4e:	f7f6 f9b5 	bl	80002bc <__adddf3>
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009f52:	4642      	mov	r2, r8
 8009f54:	464b      	mov	r3, r9
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009f56:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009f5a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8009f5e:	f7f6 f9ad 	bl	80002bc <__adddf3>
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8009f62:	ee68 7a88 	vmul.f32	s15, s17, s16
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009f66:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8009f6a:	ee17 0a90 	vmov	r0, s15
 8009f6e:	f7f6 fb03 	bl	8000578 <__aeabi_f2d>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4650      	mov	r0, sl
 8009f78:	4659      	mov	r1, fp
 8009f7a:	f7f6 f99f 	bl	80002bc <__adddf3>
 8009f7e:	4682      	mov	sl, r0
 8009f80:	468b      	mov	fp, r1
			}

			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009f82:	4b26      	ldr	r3, [pc, #152]	; (800a01c <cqs_func+0x32c>)
 8009f84:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009f88:	ed93 8a00 	vldr	s16, [r3]
 8009f8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f8e:	ecb3 9a01 	vldmia	r3!, {s18}
 8009f92:	9320      	str	r3, [sp, #128]	; 0x80
 8009f94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f96:	ee28 9a09 	vmul.f32	s18, s16, s18
 8009f9a:	ecf3 9a01 	vldmia	r3!, {s19}
 8009f9e:	ee69 7a29 	vmul.f32	s15, s18, s19
 8009fa2:	931e      	str	r3, [sp, #120]	; 0x78
 8009fa4:	ee17 0a90 	vmov	r0, s15
 8009fa8:	f7f6 fae6 	bl	8000578 <__aeabi_f2d>
 8009fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	f7f6 f983 	bl	80002bc <__adddf3>
 8009fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb8:	e9c3 0100 	strd	r0, r1, [r3]
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009fbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009fbe:	ecf3 8a01 	vldmia	r3!, {s17}
 8009fc2:	ee68 8a28 	vmul.f32	s17, s16, s17
			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009fc6:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009fca:	ee69 7aa8 	vmul.f32	s15, s19, s17
 8009fce:	931c      	str	r3, [sp, #112]	; 0x70
 8009fd0:	ee17 0a90 	vmov	r0, s15
 8009fd4:	f7f6 fad0 	bl	8000578 <__aeabi_f2d>
 8009fd8:	9b08      	ldr	r3, [sp, #32]
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 f96d 	bl	80002bc <__adddf3>
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009fe2:	ecf7 7a01 	vldmia	r7!, {s15}
 8009fe6:	e033      	b.n	800a050 <cqs_func+0x360>
 8009fe8:	56b31fbb 	.word	0x56b31fbb
 8009fec:	3dd97936 	.word	0x3dd97936
 8009ff0:	ef649b9b 	.word	0xef649b9b
 8009ff4:	3eac2c05 	.word	0x3eac2c05
 8009ff8:	d35a8588 	.word	0xd35a8588
 8009ffc:	3f64e3bc 	.word	0x3f64e3bc
 800a000:	83126e98 	.word	0x83126e98
 800a004:	3ff9cac0 	.word	0x3ff9cac0
 800a008:	9999999a 	.word	0x9999999a
 800a00c:	3fc99999 	.word	0x3fc99999
 800a010:	47ae147b 	.word	0x47ae147b
 800a014:	3fa47ae1 	.word	0x3fa47ae1
 800a018:	2000260c 	.word	0x2000260c
 800a01c:	2000160c 	.word	0x2000160c
 800a020:	200958ac 	.word	0x200958ac
 800a024:	20000188 	.word	0x20000188
 800a028:	200906a0 	.word	0x200906a0
 800a02c:	3e4ccccd 	.word	0x3e4ccccd
 800a030:	200906a8 	.word	0x200906a8
 800a034:	20090838 	.word	0x20090838
 800a038:	200907a0 	.word	0x200907a0
 800a03c:	2008d504 	.word	0x2008d504
 800a040:	0810c040 	.word	0x0810c040
 800a044:	2008a504 	.word	0x2008a504
 800a048:	20003630 	.word	0x20003630
 800a04c:	20052930 	.word	0x20052930
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a050:	9b08      	ldr	r3, [sp, #32]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a052:	ee28 8a27 	vmul.f32	s16, s16, s15
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a056:	e9c3 0100 	strd	r0, r1, [r3]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a05a:	ee69 7a88 	vmul.f32	s15, s19, s16
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a05e:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a062:	ee17 0a90 	vmov	r0, s15
 800a066:	f7f6 fa87 	bl	8000578 <__aeabi_f2d>
 800a06a:	9b06      	ldr	r3, [sp, #24]
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7f6 f924 	bl	80002bc <__adddf3>
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a074:	ecf6 9a01 	vldmia	r6!, {s19}
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a078:	9b06      	ldr	r3, [sp, #24]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a07a:	ee69 7a29 	vmul.f32	s15, s18, s19
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a07e:	4680      	mov	r8, r0
 800a080:	4689      	mov	r9, r1
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a082:	ee17 0a90 	vmov	r0, s15
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a086:	e9c3 8900 	strd	r8, r9, [r3]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a08a:	f7f6 fa75 	bl	8000578 <__aeabi_f2d>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a096:	f7f6 f911 	bl	80002bc <__adddf3>
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a09a:	ee68 7aa9 	vmul.f32	s15, s17, s19
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a09e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0a2:	ee17 0a90 	vmov	r0, s15
 800a0a6:	f7f6 fa67 	bl	8000578 <__aeabi_f2d>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a0b2:	f7f6 f903 	bl	80002bc <__adddf3>
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0b6:	ee68 7a29 	vmul.f32	s15, s16, s19
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0ba:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0be:	ee17 0a90 	vmov	r0, s15
 800a0c2:	f7f6 fa59 	bl	8000578 <__aeabi_f2d>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a0ce:	f7f6 f8f5 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800a0d2:	3501      	adds	r5, #1
 800a0d4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0d8:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		for (int j = 0; j < 1024; j++)
 800a0dc:	f47f aed1 	bne.w	8009e82 <cqs_func+0x192>
		}
		
		memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a0e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4874      	ldr	r0, [pc, #464]	; (800a2b8 <cqs_func+0x5c8>)
 800a0e8:	f015 fc85 	bl	801f9f6 <memset>
		
		if (i == 0) {
 800a0ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0ee:	b97b      	cbnz	r3, 800a110 <cqs_func+0x420>
			k_ref = 100 / k_ref;
 800a0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	4971      	ldr	r1, [pc, #452]	; (800a2bc <cqs_func+0x5cc>)
 800a0f8:	f7f6 fbbc 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800a0fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_ref = 100 / k_ref;
 800a100:	e9cd 0100 	strd	r0, r1, [sp]
			k_test = 100 / k_test;
 800a104:	2000      	movs	r0, #0
 800a106:	496d      	ldr	r1, [pc, #436]	; (800a2bc <cqs_func+0x5cc>)
 800a108:	f7f6 fbb4 	bl	8000874 <__aeabi_ddiv>
 800a10c:	e9cd 0102 	strd	r0, r1, [sp, #8]
		}
			
		x_ref[i] *= k_ref;
 800a110:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a114:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a118:	f7f6 fa82 	bl	8000620 <__aeabi_dmul>
 800a11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
		z_ref[i] *= k_ref;
		x_test *= k_test;
		y_test *= k_test;
		z_test *= k_test;
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a11e:	4d68      	ldr	r5, [pc, #416]	; (800a2c0 <cqs_func+0x5d0>)
 800a120:	4f68      	ldr	r7, [pc, #416]	; (800a2c4 <cqs_func+0x5d4>)
		x_ref[i] *= k_ref;
 800a122:	e8e3 0102 	strd	r0, r1, [r3], #8
		y_ref[i] *= k_ref;
 800a126:	e9dd 0100 	ldrd	r0, r1, [sp]
		x_ref[i] *= k_ref;
 800a12a:	930a      	str	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
 800a12c:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a130:	f7f6 fa76 	bl	8000620 <__aeabi_dmul>
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	e8e3 0102 	strd	r0, r1, [r3], #8
		z_ref[i] *= k_ref;
 800a13a:	4642      	mov	r2, r8
		y_ref[i] *= k_ref;
 800a13c:	9308      	str	r3, [sp, #32]
		z_ref[i] *= k_ref;
 800a13e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a142:	464b      	mov	r3, r9
 800a144:	f7f6 fa6c 	bl	8000620 <__aeabi_dmul>
 800a148:	9b06      	ldr	r3, [sp, #24]
 800a14a:	e8e3 0102 	strd	r0, r1, [r3], #8
		x_test *= k_test;
 800a14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		z_ref[i] *= k_ref;
 800a152:	9306      	str	r3, [sp, #24]
		x_test *= k_test;
 800a154:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a158:	f7f6 fa62 	bl	8000620 <__aeabi_dmul>
		y_test *= k_test;
 800a15c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
		x_test *= k_test;
 800a160:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
		y_test *= k_test;
 800a164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a168:	f7f6 fa5a 	bl	8000620 <__aeabi_dmul>
		z_test *= k_test;
 800a16c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
		y_test *= k_test;
 800a170:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		z_test *= k_test;
 800a174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a178:	f7f6 fa52 	bl	8000620 <__aeabi_dmul>
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a17c:	ed95 7b00 	vldr	d7, [r5]
 800a180:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800a184:	ed95 7b02 	vldr	d7, [r5, #8]
 800a188:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800a18c:	ed95 7b04 	vldr	d7, [r5, #16]
 800a190:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		z_test *= k_test;
 800a194:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a198:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a19c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800a1a0:	f7f6 fa3e 	bl	8000620 <__aeabi_dmul>
 800a1a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	4689      	mov	r9, r1
 800a1ac:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a1b0:	f7f6 fa36 	bl	8000620 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 f87e 	bl	80002bc <__adddf3>
 800a1c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a1c4:	4680      	mov	r8, r0
 800a1c6:	4689      	mov	r9, r1
 800a1c8:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a1cc:	f7f6 fa28 	bl	8000620 <__aeabi_dmul>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	f7f6 f870 	bl	80002bc <__adddf3>
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a1dc:	ed95 7b06 	vldr	d7, [r5, #24]
 800a1e0:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800a1e4:	ed95 7b08 	vldr	d7, [r5, #32]
 800a1e8:	00e6      	lsls	r6, r4, #3
 800a1ea:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800a1ee:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a1f2:	4437      	add	r7, r6
 800a1f4:	e9c7 0100 	strd	r0, r1, [r7]
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a1f8:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800a1fc:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a200:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 800a204:	f7f6 fa0c 	bl	8000620 <__aeabi_dmul>
 800a208:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a20c:	4680      	mov	r8, r0
 800a20e:	4689      	mov	r9, r1
 800a210:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a214:	f7f6 fa04 	bl	8000620 <__aeabi_dmul>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	4640      	mov	r0, r8
 800a21e:	4649      	mov	r1, r9
 800a220:	f7f6 f84c 	bl	80002bc <__adddf3>
 800a224:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a228:	4680      	mov	r8, r0
 800a22a:	4689      	mov	r9, r1
 800a22c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a230:	f7f6 f9f6 	bl	8000620 <__aeabi_dmul>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4640      	mov	r0, r8
 800a23a:	4649      	mov	r1, r9
 800a23c:	f7f6 f83e 	bl	80002bc <__adddf3>
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a240:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
 800a244:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800a248:	ed95 7b0e 	vldr	d7, [r5, #56]	; 0x38
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a24c:	4f1e      	ldr	r7, [pc, #120]	; (800a2c8 <cqs_func+0x5d8>)
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a24e:	4b1f      	ldr	r3, [pc, #124]	; (800a2cc <cqs_func+0x5dc>)
 800a250:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 800a254:	ed95 7b10 	vldr	d7, [r5, #64]	; 0x40
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a258:	4437      	add	r7, r6
 800a25a:	e9c7 0100 	strd	r0, r1, [r7]
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a25e:	441e      	add	r6, r3
 800a260:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a264:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a268:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800a26c:	f7f6 f9d8 	bl	8000620 <__aeabi_dmul>
 800a270:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a274:	4680      	mov	r8, r0
 800a276:	4689      	mov	r9, r1
 800a278:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a27c:	f7f6 f9d0 	bl	8000620 <__aeabi_dmul>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4640      	mov	r0, r8
 800a286:	4649      	mov	r1, r9
 800a288:	f7f6 f818 	bl	80002bc <__adddf3>
 800a28c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a290:	4680      	mov	r8, r0
 800a292:	4689      	mov	r9, r1
 800a294:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a298:	f7f6 f9c2 	bl	8000620 <__aeabi_dmul>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4640      	mov	r0, r8
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	f7f6 f80a 	bl	80002bc <__adddf3>
 800a2a8:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 15; i++)
 800a2aa:	2c0f      	cmp	r4, #15
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a2ac:	e9c6 0100 	strd	r0, r1, [r6]
	for (uint8_t i = 0; i < 15; i++)
 800a2b0:	f47f adbc 	bne.w	8009e2c <cqs_func+0x13c>
 800a2b4:	e00e      	b.n	800a2d4 <cqs_func+0x5e4>
 800a2b6:	bf00      	nop
 800a2b8:	2000160c 	.word	0x2000160c
 800a2bc:	40590000 	.word	0x40590000
 800a2c0:	200000f8 	.word	0x200000f8
 800a2c4:	20090728 	.word	0x20090728
 800a2c8:	200908b0 	.word	0x200908b0
 800a2cc:	20090628 	.word	0x20090628
 800a2d0:	00000000 	.word	0x00000000
	}

	xw_ref *= k_ref;
 800a2d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2dc:	f7f6 f9a0 	bl	8000620 <__aeabi_dmul>
	yw_ref *= k_ref;
 800a2e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	xw_ref *= k_ref;
 800a2e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
	yw_ref *= k_ref;
 800a2e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2ec:	f7f6 f998 	bl	8000620 <__aeabi_dmul>
	zw_ref *= k_ref;
 800a2f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	yw_ref *= k_ref;
 800a2f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	zw_ref *= k_ref;
 800a2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2fc:	f7f6 f990 	bl	8000620 <__aeabi_dmul>
	xw_test *= k_test;
 800a300:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
	zw_ref *= k_ref;
 800a304:	e9cd 0108 	strd	r0, r1, [sp, #32]
	xw_test *= k_test;
 800a308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a30c:	f7f6 f988 	bl	8000620 <__aeabi_dmul>
	yw_test *= k_test;
 800a310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	xw_test *= k_test;
 800a314:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	yw_test *= k_test;
 800a318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a31c:	f7f6 f980 	bl	8000620 <__aeabi_dmul>
	zw_test *= k_test;
 800a320:	4652      	mov	r2, sl
 800a322:	465b      	mov	r3, fp
	yw_test *= k_test;
 800a324:	e9cd 0100 	strd	r0, r1, [sp]
	zw_test *= k_test;
 800a328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a32c:	f7f6 f978 	bl	8000620 <__aeabi_dmul>

	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	zw_test *= k_test;
 800a334:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a338:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a33c:	f7f6 f970 	bl	8000620 <__aeabi_dmul>
 800a340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a344:	4604      	mov	r4, r0
 800a346:	460d      	mov	r5, r1
 800a348:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a34c:	f7f6 f968 	bl	8000620 <__aeabi_dmul>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f7f5 ffb0 	bl	80002bc <__adddf3>
 800a35c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a360:	4604      	mov	r4, r0
 800a362:	460d      	mov	r5, r1
 800a364:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a368:	f7f6 f95a 	bl	8000620 <__aeabi_dmul>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4620      	mov	r0, r4
 800a372:	4629      	mov	r1, r5
 800a374:	f7f5 ffa2 	bl	80002bc <__adddf3>
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a37c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a380:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a384:	f7f6 f94c 	bl	8000620 <__aeabi_dmul>
 800a388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a38c:	4604      	mov	r4, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a394:	f7f6 f944 	bl	8000620 <__aeabi_dmul>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f5 ff8c 	bl	80002bc <__adddf3>
 800a3a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a3b0:	f7f6 f936 	bl	8000620 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7f5 ff7e 	bl	80002bc <__adddf3>
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a3c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a3c4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a3c8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a3cc:	f7f6 f928 	bl	8000620 <__aeabi_dmul>
 800a3d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a3dc:	f7f6 f920 	bl	8000620 <__aeabi_dmul>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f5 ff68 	bl	80002bc <__adddf3>
 800a3ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a3f8:	f7f6 f912 	bl	8000620 <__aeabi_dmul>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4620      	mov	r0, r4
 800a402:	4629      	mov	r1, r5
 800a404:	f7f5 ff5a 	bl	80002bc <__adddf3>
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a408:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a40c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a410:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a414:	f7f6 f904 	bl	8000620 <__aeabi_dmul>
 800a418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a41c:	4604      	mov	r4, r0
 800a41e:	460d      	mov	r5, r1
 800a420:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a424:	f7f6 f8fc 	bl	8000620 <__aeabi_dmul>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 ff44 	bl	80002bc <__adddf3>
 800a434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a440:	f7f6 f8ee 	bl	8000620 <__aeabi_dmul>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	f7f5 ff36 	bl	80002bc <__adddf3>
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a450:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a454:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a458:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a45c:	f7f6 f8e0 	bl	8000620 <__aeabi_dmul>
 800a460:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a464:	4604      	mov	r4, r0
 800a466:	460d      	mov	r5, r1
 800a468:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a46c:	f7f6 f8d8 	bl	8000620 <__aeabi_dmul>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f5 ff20 	bl	80002bc <__adddf3>
 800a47c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a480:	4604      	mov	r4, r0
 800a482:	460d      	mov	r5, r1
 800a484:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a488:	f7f6 f8ca 	bl	8000620 <__aeabi_dmul>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4620      	mov	r0, r4
 800a492:	4629      	mov	r1, r5
 800a494:	f7f5 ff12 	bl	80002bc <__adddf3>
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a498:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a49c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a4a0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a4a4:	f7f6 f8bc 	bl	8000620 <__aeabi_dmul>
 800a4a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	460d      	mov	r5, r1
 800a4b0:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a4b4:	f7f6 f8b4 	bl	8000620 <__aeabi_dmul>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f7f5 fefc 	bl	80002bc <__adddf3>
 800a4c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a4d0:	f7f6 f8a6 	bl	8000620 <__aeabi_dmul>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f7f5 feee 	bl	80002bc <__adddf3>

	float alpha = yw_test / yw_ref;
 800a4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a4e4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	float alpha = yw_test / yw_ref;
 800a4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4ec:	f7f6 f9c2 	bl	8000874 <__aeabi_ddiv>
 800a4f0:	f7f6 fb8e 	bl	8000c10 <__aeabi_d2f>
	float delta_e_rms = 0;
	float sum_delta_e = 0;
	float sum_delta_c = 0;
 800a4f4:	ed5f 8a8a 	vldr	s17, [pc, #-552]	; 800a2d0 <cqs_func+0x5e0>
 800a4f8:	f8df b390 	ldr.w	fp, [pc, #912]	; 800a88c <cqs_func+0xb9c>
	float alpha = yw_test / yw_ref;
 800a4fc:	901c      	str	r0, [sp, #112]	; 0x70
 800a4fe:	f04f 0a00 	mov.w	sl, #0
	float sum_delta_e = 0;
 800a502:	eef0 9a68 	vmov.f32	s19, s17
	float delta_e_rms = 0;
 800a506:	eeb0 aa68 	vmov.f32	s20, s17

	for (int i = 0; i < 15; i++)
	{
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a50a:	981c      	ldr	r0, [sp, #112]	; 0x70
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;

		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a50c:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800a890 <cqs_func+0xba0>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];

		float y_tmp = cbrt(y_ref[i] / yw_ref);
		float L_ref = 116* y_tmp - 16;
 800a510:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 800a860 <cqs_func+0xb70>
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a514:	f7f6 f830 	bl	8000578 <__aeabi_f2d>
 800a518:	4bd2      	ldr	r3, [pc, #840]	; (800a864 <cqs_func+0xb74>)
 800a51a:	4453      	add	r3, sl
 800a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a520:	4604      	mov	r4, r0
 800a522:	460d      	mov	r5, r1
 800a524:	f7f6 f87c 	bl	8000620 <__aeabi_dmul>
 800a528:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a52c:	f7f6 f878 	bl	8000620 <__aeabi_dmul>
 800a530:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a534:	f7f6 f99e 	bl	8000874 <__aeabi_ddiv>
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a538:	4bcb      	ldr	r3, [pc, #812]	; (800a868 <cqs_func+0xb78>)
 800a53a:	4453      	add	r3, sl
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a53c:	4606      	mov	r6, r0
 800a53e:	460f      	mov	r7, r1
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	4620      	mov	r0, r4
 800a546:	4629      	mov	r1, r5
 800a548:	f7f6 f86a 	bl	8000620 <__aeabi_dmul>
 800a54c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a550:	f7f6 f866 	bl	8000620 <__aeabi_dmul>
 800a554:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a558:	f7f6 f98c 	bl	8000874 <__aeabi_ddiv>
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a55c:	4bc3      	ldr	r3, [pc, #780]	; (800a86c <cqs_func+0xb7c>)
 800a55e:	4453      	add	r3, sl
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a560:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	4620      	mov	r0, r4
 800a56a:	4629      	mov	r1, r5
 800a56c:	f7f6 f858 	bl	8000620 <__aeabi_dmul>
 800a570:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a574:	f7f6 f854 	bl	8000620 <__aeabi_dmul>
 800a578:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a57c:	f7f6 f97a 	bl	8000874 <__aeabi_ddiv>
 800a580:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a584:	49ba      	ldr	r1, [pc, #744]	; (800a870 <cqs_func+0xb80>)
 800a586:	4451      	add	r1, sl
 800a588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a590:	f7f6 f970 	bl	8000874 <__aeabi_ddiv>
 800a594:	ec41 0b10 	vmov	d0, r0, r1
 800a598:	f018 f926 	bl	80227e8 <cbrt>
 800a59c:	ec51 0b10 	vmov	r0, r1, d0
 800a5a0:	f7f6 fb36 	bl	8000c10 <__aeabi_d2f>
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a5a4:	49b3      	ldr	r1, [pc, #716]	; (800a874 <cqs_func+0xb84>)
 800a5a6:	4451      	add	r1, sl
 800a5a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a5ac:	ee0a 0a90 	vmov	s21, r0
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5b4:	f7f6 f95e 	bl	8000874 <__aeabi_ddiv>
 800a5b8:	ec41 0b10 	vmov	d0, r0, r1
 800a5bc:	f018 f914 	bl	80227e8 <cbrt>
 800a5c0:	ee1a 0a90 	vmov	r0, s21
 800a5c4:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a5c8:	f7f5 ffd6 	bl	8000578 <__aeabi_f2d>
 800a5cc:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	ec51 0b10 	vmov	r0, r1, d0
 800a5dc:	f7f5 fe6c 	bl	80002b8 <__aeabi_dsub>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	4ba5      	ldr	r3, [pc, #660]	; (800a878 <cqs_func+0xb88>)
 800a5e4:	f7f6 f81c 	bl	8000620 <__aeabi_dmul>
 800a5e8:	f7f6 fb12 	bl	8000c10 <__aeabi_d2f>
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a5ec:	49a3      	ldr	r1, [pc, #652]	; (800a87c <cqs_func+0xb8c>)
 800a5ee:	4451      	add	r1, sl
 800a5f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a5f4:	ee0b 0a90 	vmov	s23, r0
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a5f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5fc:	f7f6 f93a 	bl	8000874 <__aeabi_ddiv>
 800a600:	ec41 0b10 	vmov	d0, r0, r1
 800a604:	f018 f8f0 	bl	80227e8 <cbrt>
 800a608:	4620      	mov	r0, r4
 800a60a:	ec53 2b10 	vmov	r2, r3, d0
 800a60e:	4629      	mov	r1, r5
 800a610:	f7f5 fe52 	bl	80002b8 <__aeabi_dsub>
 800a614:	2200      	movs	r2, #0
 800a616:	4b9a      	ldr	r3, [pc, #616]	; (800a880 <cqs_func+0xb90>)
 800a618:	f7f6 f802 	bl	8000620 <__aeabi_dmul>
 800a61c:	f7f6 faf8 	bl	8000c10 <__aeabi_d2f>
		float L_ref = 116* y_tmp - 16;
 800a620:	eebb 8a00 	vmov.f32	s16, #176	; 0xc1800000 -16.0
 800a624:	eef0 ca48 	vmov.f32	s25, s16
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a628:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
		float L_ref = 116* y_tmp - 16;
 800a62c:	eeea ca89 	vfma.f32	s25, s21, s18
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a630:	4639      	mov	r1, r7
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a632:	ee0a 0a90 	vmov	s21, r0
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a636:	4630      	mov	r0, r6
 800a638:	f7f5 fff2 	bl	8000620 <__aeabi_dmul>
 800a63c:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800a640:	4604      	mov	r4, r0
 800a642:	460d      	mov	r5, r1
 800a644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a648:	f7f5 ffea 	bl	8000620 <__aeabi_dmul>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	4620      	mov	r0, r4
 800a652:	4629      	mov	r1, r5
 800a654:	f7f5 fe32 	bl	80002bc <__adddf3>
 800a658:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 800a65c:	4604      	mov	r4, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a664:	f7f5 ffdc 	bl	8000620 <__aeabi_dmul>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f7f5 fe24 	bl	80002bc <__adddf3>

		y_tmp = cbrt(Y_ic_test / yw_test);
 800a674:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a678:	f7f6 f8fc 	bl	8000874 <__aeabi_ddiv>
 800a67c:	ec41 0b10 	vmov	d0, r0, r1
 800a680:	f018 f8b2 	bl	80227e8 <cbrt>
 800a684:	ec51 0b10 	vmov	r0, r1, d0
 800a688:	f7f6 fac2 	bl	8000c10 <__aeabi_d2f>
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a68c:	e9d8 2300 	ldrd	r2, r3, [r8]
		y_tmp = cbrt(Y_ic_test / yw_test);
 800a690:	ee0b 0a10 	vmov	s22, r0
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a694:	4639      	mov	r1, r7
 800a696:	4630      	mov	r0, r6
 800a698:	f7f5 ffc2 	bl	8000620 <__aeabi_dmul>
 800a69c:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6a8:	f7f5 ffba 	bl	8000620 <__aeabi_dmul>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f5 fe02 	bl	80002bc <__adddf3>
 800a6b8:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800a6bc:	4604      	mov	r4, r0
 800a6be:	460d      	mov	r5, r1
 800a6c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a6c4:	f7f5 ffac 	bl	8000620 <__aeabi_dmul>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	f7f5 fdf4 	bl	80002bc <__adddf3>
		float L_test = 116 * y_tmp - 16;
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a6d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6d8:	f7f6 f8cc 	bl	8000874 <__aeabi_ddiv>
 800a6dc:	ec41 0b10 	vmov	d0, r0, r1
 800a6e0:	f018 f882 	bl	80227e8 <cbrt>
 800a6e4:	ee1b 0a10 	vmov	r0, s22
 800a6e8:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a6ec:	f7f5 ff44 	bl	8000578 <__aeabi_f2d>
 800a6f0:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	ec51 0b10 	vmov	r0, r1, d0
 800a700:	f7f5 fdda 	bl	80002b8 <__aeabi_dsub>
 800a704:	2200      	movs	r2, #0
 800a706:	4b5c      	ldr	r3, [pc, #368]	; (800a878 <cqs_func+0xb88>)
 800a708:	f7f5 ff8a 	bl	8000620 <__aeabi_dmul>
 800a70c:	f7f6 fa80 	bl	8000c10 <__aeabi_d2f>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a710:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a714:	ee0c 0a10 	vmov	s24, r0
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a718:	4639      	mov	r1, r7
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7f5 ff80 	bl	8000620 <__aeabi_dmul>
 800a720:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800a724:	4606      	mov	r6, r0
 800a726:	460f      	mov	r7, r1
 800a728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a72c:	f7f5 ff78 	bl	8000620 <__aeabi_dmul>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4630      	mov	r0, r6
 800a736:	4639      	mov	r1, r7
 800a738:	f7f5 fdc0 	bl	80002bc <__adddf3>
 800a73c:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
 800a740:	4606      	mov	r6, r0
 800a742:	460f      	mov	r7, r1
 800a744:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a748:	f7f5 ff6a 	bl	8000620 <__aeabi_dmul>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4630      	mov	r0, r6
 800a752:	4639      	mov	r1, r7
 800a754:	f7f5 fdb2 	bl	80002bc <__adddf3>
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a75c:	f7f6 f88a 	bl	8000874 <__aeabi_ddiv>
 800a760:	ec41 0b10 	vmov	d0, r0, r1
 800a764:	f018 f840 	bl	80227e8 <cbrt>
 800a768:	4620      	mov	r0, r4
 800a76a:	ec53 2b10 	vmov	r2, r3, d0
 800a76e:	4629      	mov	r1, r5
 800a770:	f7f5 fda2 	bl	80002b8 <__aeabi_dsub>
 800a774:	2200      	movs	r2, #0
 800a776:	4b42      	ldr	r3, [pc, #264]	; (800a880 <cqs_func+0xb90>)
 800a778:	f7f5 ff52 	bl	8000620 <__aeabi_dmul>
 800a77c:	f7f6 fa48 	bl	8000c10 <__aeabi_d2f>
		float L_test = 116 * y_tmp - 16;
 800a780:	eeab 8a09 	vfma.f32	s16, s22, s18
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a784:	ee0b 0a10 	vmov	s22, r0

		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a788:	ee6b 7a0b 	vmul.f32	s15, s22, s22
		float L_test = 116 * y_tmp - 16;
 800a78c:	eeb0 9a48 	vmov.f32	s18, s16
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a790:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800a794:	ee17 0a90 	vmov	r0, s15
 800a798:	f7f5 feee 	bl	8000578 <__aeabi_f2d>
 800a79c:	ec41 0b10 	vmov	d0, r0, r1
 800a7a0:	f018 fbd6 	bl	8022f50 <sqrt>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7a4:	ee6a 7aaa 	vmul.f32	s15, s21, s21
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7a8:	ec55 4b10 	vmov	r4, r5, d0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7ac:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800a7b0:	ee17 0a90 	vmov	r0, s15
 800a7b4:	f7f5 fee0 	bl	8000578 <__aeabi_f2d>
 800a7b8:	ec41 0b10 	vmov	d0, r0, r1
 800a7bc:	f018 fbc8 	bl	8022f50 <sqrt>
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4620      	mov	r0, r4
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7c4:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7c8:	f7f6 fa22 	bl	8000c10 <__aeabi_d2f>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7cc:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7d0:	ee08 0a10 	vmov	s16, r0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7d4:	ec51 0b10 	vmov	r0, r1, d0
 800a7d8:	f7f6 fa1a 	bl	8000c10 <__aeabi_d2f>
		float delta_c = delta_c_test - delta_c_ref;
 800a7dc:	ee07 0a90 	vmov	s15, r0

		bar_CQS = 0.9;
 800a7e0:	a11d      	add	r1, pc, #116	; (adr r1, 800a858 <cqs_func+0xb68>)
 800a7e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e6:	4b27      	ldr	r3, [pc, #156]	; (800a884 <cqs_func+0xb94>)
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a7e8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800a888 <cqs_func+0xb98>
		bar_CQS = 0.9;
 800a7ec:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a7f0:	210d      	movs	r1, #13
 800a7f2:	2055      	movs	r0, #85	; 0x55
		float delta_c = delta_c_test - delta_c_ref;
 800a7f4:	ee38 8a67 	vsub.f32	s16, s16, s15
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a7f8:	f008 fc5e 	bl	80130b8 <GUI_Bar_Measure>
	
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800a7fc:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800a800:	ee17 0a90 	vmov	r0, s15
 800a804:	f7f5 feb8 	bl	8000578 <__aeabi_f2d>
 800a808:	ee7c 7a6b 	vsub.f32	s15, s24, s23
 800a80c:	4606      	mov	r6, r0
 800a80e:	ee17 0a90 	vmov	r0, s15
 800a812:	460f      	mov	r7, r1
 800a814:	f7f5 feb0 	bl	8000578 <__aeabi_f2d>
 800a818:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 800a81c:	4680      	mov	r8, r0
 800a81e:	ee17 0a90 	vmov	r0, s15
 800a822:	4689      	mov	r9, r1
 800a824:	f7f5 fea8 	bl	8000578 <__aeabi_f2d>
 800a828:	4632      	mov	r2, r6
 800a82a:	4604      	mov	r4, r0
 800a82c:	460d      	mov	r5, r1
 800a82e:	463b      	mov	r3, r7
 800a830:	4630      	mov	r0, r6
 800a832:	4639      	mov	r1, r7
 800a834:	f7f5 fef4 	bl	8000620 <__aeabi_dmul>
 800a838:	4642      	mov	r2, r8
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	464b      	mov	r3, r9
 800a840:	4640      	mov	r0, r8
 800a842:	4649      	mov	r1, r9
 800a844:	f7f5 feec 	bl	8000620 <__aeabi_dmul>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4630      	mov	r0, r6
 800a84e:	4639      	mov	r1, r7
 800a850:	f7f5 fd34 	bl	80002bc <__adddf3>
 800a854:	e01e      	b.n	800a894 <cqs_func+0xba4>
 800a856:	bf00      	nop
 800a858:	cccccccd 	.word	0xcccccccd
 800a85c:	3feccccc 	.word	0x3feccccc
 800a860:	42e80000 	.word	0x42e80000
 800a864:	20090728 	.word	0x20090728
 800a868:	200908b0 	.word	0x200908b0
 800a86c:	20090628 	.word	0x20090628
 800a870:	20090838 	.word	0x20090838
 800a874:	200906a8 	.word	0x200906a8
 800a878:	407f4000 	.word	0x407f4000
 800a87c:	200907a0 	.word	0x200907a0
 800a880:	40690000 	.word	0x40690000
 800a884:	200906a0 	.word	0x200906a0
 800a888:	3f666666 	.word	0x3f666666
 800a88c:	20003613 	.word	0x20003613
 800a890:	20000140 	.word	0x20000140
 800a894:	4622      	mov	r2, r4
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	462b      	mov	r3, r5
 800a89c:	4620      	mov	r0, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f5 febe 	bl	8000620 <__aeabi_dmul>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f5 fd06 	bl	80002bc <__adddf3>
 800a8b0:	ec41 0b10 	vmov	d0, r0, r1
 800a8b4:	f018 fb4c 	bl	8022f50 <sqrt>
 800a8b8:	ec51 0b10 	vmov	r0, r1, d0
 800a8bc:	f7f6 f9a8 	bl	8000c10 <__aeabi_d2f>
		float E_sat = delta_E_CQS;
		if (delta_c > 0)
 800a8c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800a8c8:	ee09 0a10 	vmov	s18, r0
		if (delta_c > 0)
 800a8cc:	f340 82a4 	ble.w	800ae18 <cqs_func+0x1128>
		{
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800a8d0:	ee68 7a48 	vnmul.f32	s15, s16, s16
 800a8d4:	eee9 7a09 	vfma.f32	s15, s18, s18
 800a8d8:	ee17 0a90 	vmov	r0, s15
 800a8dc:	f7f5 fe4c 	bl	8000578 <__aeabi_f2d>
 800a8e0:	ec41 0b10 	vmov	d0, r0, r1
 800a8e4:	f018 fb34 	bl	8022f50 <sqrt>
 800a8e8:	ec51 0b10 	vmov	r0, r1, d0
 800a8ec:	f7f6 f990 	bl	8000c10 <__aeabi_d2f>
			sum_delta_c += delta_c;
 800a8f0:	ee78 8a88 	vadd.f32	s17, s17, s16
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800a8f4:	ee07 0a90 	vmov	s15, r0
		}			

		delta_e_rms += (E_sat*E_sat);
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a8f8:	ee17 0a90 	vmov	r0, s15
		delta_e_rms += (E_sat*E_sat);
 800a8fc:	eea7 aaa7 	vfma.f32	s20, s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a900:	f7f5 fe3a 	bl	8000578 <__aeabi_f2d>
 800a904:	a3bc      	add	r3, pc, #752	; (adr r3, 800abf8 <cqs_func+0xf08>)
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	f7f5 fe89 	bl	8000620 <__aeabi_dmul>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	2000      	movs	r0, #0
 800a914:	49c8      	ldr	r1, [pc, #800]	; (800ac38 <cqs_func+0xf48>)
 800a916:	4cc9      	ldr	r4, [pc, #804]	; (800ac3c <cqs_func+0xf4c>)
 800a918:	f7f5 fcce 	bl	80002b8 <__aeabi_dsub>
 800a91c:	2200      	movs	r2, #0
 800a91e:	4bc8      	ldr	r3, [pc, #800]	; (800ac40 <cqs_func+0xf50>)
 800a920:	f7f5 ffa8 	bl	8000874 <__aeabi_ddiv>
 800a924:	ec41 0b10 	vmov	d0, r0, r1
 800a928:	f018 f89e 	bl	8022a68 <exp>
 800a92c:	2200      	movs	r2, #0
 800a92e:	4bc5      	ldr	r3, [pc, #788]	; (800ac44 <cqs_func+0xf54>)
 800a930:	ec51 0b10 	vmov	r0, r1, d0
 800a934:	f7f5 fcc2 	bl	80002bc <__adddf3>
 800a938:	ec41 0b10 	vmov	d0, r0, r1
 800a93c:	f018 f910 	bl	8022b60 <log>
 800a940:	2200      	movs	r2, #0
 800a942:	ec51 0b10 	vmov	r0, r1, d0
 800a946:	4bbe      	ldr	r3, [pc, #760]	; (800ac40 <cqs_func+0xf50>)
 800a948:	f7f5 fe6a 	bl	8000620 <__aeabi_dmul>
 800a94c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a950:	f7f5 fe66 	bl	8000620 <__aeabi_dmul>
 800a954:	f7f6 f95c 	bl	8000c10 <__aeabi_d2f>
 800a958:	ee07 0a90 	vmov	s15, r0
 800a95c:	4bba      	ldr	r3, [pc, #744]	; (800ac48 <cqs_func+0xf58>)
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a95e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a962:	6018      	str	r0, [r3, #0]
 800a964:	f10a 0a08 	add.w	sl, sl, #8
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a968:	ee17 3a90 	vmov	r3, s15
	for (int i = 0; i < 15; i++)
 800a96c:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
 800a970:	eee9 9a09 	vfma.f32	s19, s18, s18
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a974:	f80b 3f01 	strb.w	r3, [fp, #1]!
	for (int i = 0; i < 15; i++)
 800a978:	f47f adc7 	bne.w	800a50a <cqs_func+0x81a>
	}
	delta_e_rms /= 15;
 800a97c:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
	delta_e_rms = sqrt(delta_e_rms);
 800a980:	eeca 7a08 	vdiv.f32	s15, s20, s16
 800a984:	ee17 0a90 	vmov	r0, s15
 800a988:	f7f5 fdf6 	bl	8000578 <__aeabi_f2d>
 800a98c:	ec41 0b10 	vmov	d0, r0, r1
 800a990:	f018 fade 	bl	8022f50 <sqrt>
 800a994:	ec51 0b10 	vmov	r0, r1, d0
 800a998:	f7f6 f93a 	bl	8000c10 <__aeabi_d2f>
	sum_delta_e /= 15;
	sum_delta_e = sqrt(sum_delta_e);
 800a99c:	eec9 7a88 	vdiv.f32	s15, s19, s16
	delta_e_rms = sqrt(delta_e_rms);
 800a9a0:	ee09 0a10 	vmov	s18, r0
	sum_delta_e = sqrt(sum_delta_e);
 800a9a4:	ee17 0a90 	vmov	r0, s15
 800a9a8:	f7f5 fde6 	bl	8000578 <__aeabi_f2d>
 800a9ac:	ec41 0b10 	vmov	d0, r0, r1
 800a9b0:	f018 face 	bl	8022f50 <sqrt>
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800a9b4:	ee19 0a10 	vmov	r0, s18
	sum_delta_e = sqrt(sum_delta_e);
 800a9b8:	ec59 8b10 	vmov	r8, r9, d0
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800a9bc:	f7f5 fddc 	bl	8000578 <__aeabi_f2d>
 800a9c0:	a38d      	add	r3, pc, #564	; (adr r3, 800abf8 <cqs_func+0xf08>)
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	f7f5 fe2b 	bl	8000620 <__aeabi_dmul>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	4999      	ldr	r1, [pc, #612]	; (800ac38 <cqs_func+0xf48>)
 800a9d2:	f7f5 fc71 	bl	80002b8 <__aeabi_dsub>
 800a9d6:	f7f6 f91b 	bl	8000c10 <__aeabi_d2f>
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800a9da:	ee06 0a90 	vmov	s13, r0
 800a9de:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800a9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9e6:	ee17 0a10 	vmov	r0, s14
 800a9ea:	f7f5 fdc5 	bl	8000578 <__aeabi_f2d>
 800a9ee:	ec41 0b10 	vmov	d0, r0, r1
 800a9f2:	f018 f839 	bl	8022a68 <exp>
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	4b92      	ldr	r3, [pc, #584]	; (800ac44 <cqs_func+0xf54>)
 800a9fa:	ec51 0b10 	vmov	r0, r1, d0
 800a9fe:	f7f5 fc5d 	bl	80002bc <__adddf3>
 800aa02:	ec41 0b10 	vmov	d0, r0, r1
 800aa06:	f018 f8ab 	bl	8022b60 <log>

	 Qa_temp = Mcct * Qa0_100;
 800aa0a:	e9d4 6700 	ldrd	r6, r7, [r4]
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800aa0e:	ec51 0b10 	vmov	r0, r1, d0
 800aa12:	2200      	movs	r2, #0
 800aa14:	4b8a      	ldr	r3, [pc, #552]	; (800ac40 <cqs_func+0xf50>)
 800aa16:	f7f5 fe03 	bl	8000620 <__aeabi_dmul>
 800aa1a:	f7f6 f8f9 	bl	8000c10 <__aeabi_d2f>
	 Qa_temp = Mcct * Qa0_100;
 800aa1e:	f7f5 fdab 	bl	8000578 <__aeabi_f2d>
 800aa22:	4632      	mov	r2, r6
 800aa24:	463b      	mov	r3, r7
 800aa26:	f7f5 fdfb 	bl	8000620 <__aeabi_dmul>
 800aa2a:	f7f6 f8f1 	bl	8000c10 <__aeabi_d2f>
 800aa2e:	ee07 0a90 	vmov	s15, r0
 800aa32:	4b86      	ldr	r3, [pc, #536]	; (800ac4c <cqs_func+0xf5c>)
	 Qa = (uint8_t)Qa_temp;
 800aa34:	4a86      	ldr	r2, [pc, #536]	; (800ac50 <cqs_func+0xf60>)
	 Qa_temp = Mcct * Qa0_100;
 800aa36:	6018      	str	r0, [r3, #0]
	 Qa = (uint8_t)Qa_temp;
 800aa38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sum_delta_e = sqrt(sum_delta_e);
 800aa3c:	4649      	mov	r1, r9
	 Qa = (uint8_t)Qa_temp;
 800aa3e:	ee17 3a90 	vmov	r3, s15
	sum_delta_e = sqrt(sum_delta_e);
 800aa42:	4640      	mov	r0, r8
	 Qa = (uint8_t)Qa_temp;
 800aa44:	7013      	strb	r3, [r2, #0]
	sum_delta_e = sqrt(sum_delta_e);
 800aa46:	f7f6 f8e3 	bl	8000c10 <__aeabi_d2f>
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800aa4a:	f7f5 fd95 	bl	8000578 <__aeabi_f2d>
 800aa4e:	a36c      	add	r3, pc, #432	; (adr r3, 800ac00 <cqs_func+0xf10>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fde4 	bl	8000620 <__aeabi_dmul>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	4976      	ldr	r1, [pc, #472]	; (800ac38 <cqs_func+0xf48>)
 800aa60:	f7f5 fc2a 	bl	80002b8 <__aeabi_dsub>
 800aa64:	2200      	movs	r2, #0
 800aa66:	4b76      	ldr	r3, [pc, #472]	; (800ac40 <cqs_func+0xf50>)
 800aa68:	f7f5 ff04 	bl	8000874 <__aeabi_ddiv>
 800aa6c:	ec41 0b10 	vmov	d0, r0, r1
 800aa70:	f017 fffa 	bl	8022a68 <exp>
 800aa74:	2200      	movs	r2, #0
 800aa76:	4b73      	ldr	r3, [pc, #460]	; (800ac44 <cqs_func+0xf54>)
 800aa78:	ec51 0b10 	vmov	r0, r1, d0
 800aa7c:	f7f5 fc1c 	bl	80002b8 <__aeabi_dsub>
 800aa80:	ec41 0b10 	vmov	d0, r0, r1
 800aa84:	f018 f86c 	bl	8022b60 <log>
 800aa88:	2200      	movs	r2, #0
 800aa8a:	4b6d      	ldr	r3, [pc, #436]	; (800ac40 <cqs_func+0xf50>)
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	ed8d 0b00 	vstr	d0, [sp]
 800aa94:	f7f5 fdc4 	bl	8000620 <__aeabi_dmul>
 800aa98:	ed9d 0b00 	vldr	d0, [sp]
 800aa9c:	ec53 2b10 	vmov	r2, r3, d0
 800aaa0:	f7f5 fdbe 	bl	8000620 <__aeabi_dmul>
 800aaa4:	f7f6 f8b4 	bl	8000c10 <__aeabi_d2f>
 800aaa8:	ee07 0a90 	vmov	s15, r0
 800aaac:	4b69      	ldr	r3, [pc, #420]	; (800ac54 <cqs_func+0xf64>)
		Qf = (uint8_t)Qf_temp;
 800aaae:	4a6a      	ldr	r2, [pc, #424]	; (800ac58 <cqs_func+0xf68>)
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800aab0:	6018      	str	r0, [r3, #0]
		Qf = (uint8_t)Qf_temp;
 800aab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800aab6:	e9d4 0100 	ldrd	r0, r1, [r4]
		Qf = (uint8_t)Qf_temp;
 800aaba:	ee17 3a90 	vmov	r3, s15
 800aabe:	7013      	strb	r3, [r2, #0]
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800aac0:	2200      	movs	r2, #0
 800aac2:	4b5f      	ldr	r3, [pc, #380]	; (800ac40 <cqs_func+0xf50>)
 800aac4:	f7f5 fdac 	bl	8000620 <__aeabi_dmul>
 800aac8:	eec8 7a88 	vdiv.f32	s15, s17, s16
 800aacc:	4604      	mov	r4, r0
 800aace:	460d      	mov	r5, r1
 800aad0:	ee79 7a67 	vsub.f32	s15, s18, s15
 800aad4:	ee17 0a90 	vmov	r0, s15
 800aad8:	f7f5 fd4e 	bl	8000578 <__aeabi_f2d>
 800aadc:	a34a      	add	r3, pc, #296	; (adr r3, 800ac08 <cqs_func+0xf18>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fd9d 	bl	8000620 <__aeabi_dmul>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	2000      	movs	r0, #0
 800aaec:	4952      	ldr	r1, [pc, #328]	; (800ac38 <cqs_func+0xf48>)
 800aaee:	f7f5 fbe3 	bl	80002b8 <__aeabi_dsub>
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	4b52      	ldr	r3, [pc, #328]	; (800ac40 <cqs_func+0xf50>)
 800aaf6:	f7f5 febd 	bl	8000874 <__aeabi_ddiv>
 800aafa:	ec41 0b10 	vmov	d0, r0, r1
 800aafe:	f017 ffb3 	bl	8022a68 <exp>
 800ab02:	2200      	movs	r2, #0
 800ab04:	4b4f      	ldr	r3, [pc, #316]	; (800ac44 <cqs_func+0xf54>)
 800ab06:	ec51 0b10 	vmov	r0, r1, d0
 800ab0a:	f7f5 fbd5 	bl	80002b8 <__aeabi_dsub>
 800ab0e:	ec41 0b10 	vmov	d0, r0, r1
 800ab12:	f018 f825 	bl	8022b60 <log>
 800ab16:	4620      	mov	r0, r4
 800ab18:	ec53 2b10 	vmov	r2, r3, d0
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	f7f5 fd7f 	bl	8000620 <__aeabi_dmul>
 800ab22:	f7f6 f875 	bl	8000c10 <__aeabi_d2f>
 800ab26:	ee07 0a90 	vmov	s15, r0
 800ab2a:	4b4c      	ldr	r3, [pc, #304]	; (800ac5c <cqs_func+0xf6c>)
		Qp = (uint8_t)Qp_temp;
 800ab2c:	4a4c      	ldr	r2, [pc, #304]	; (800ac60 <cqs_func+0xf70>)
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800ab2e:	6018      	str	r0, [r3, #0]
		Qp = (uint8_t)Qp_temp;
 800ab30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	
		bar_CQS = 1.0;
 800ab34:	4943      	ldr	r1, [pc, #268]	; (800ac44 <cqs_func+0xf54>)
		Qp = (uint8_t)Qp_temp;
 800ab36:	ee17 3a90 	vmov	r3, s15
 800ab3a:	7013      	strb	r3, [r2, #0]
		bar_CQS = 1.0;
 800ab3c:	4b49      	ldr	r3, [pc, #292]	; (800ac64 <cqs_func+0xf74>)
 800ab3e:	2000      	movs	r0, #0
 800ab40:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ab44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ab48:	210d      	movs	r1, #13
 800ab4a:	2055      	movs	r0, #85	; 0x55
 800ab4c:	b02f      	add	sp, #188	; 0xbc
 800ab4e:	ecbd 8b0a 	vpop	{d8-d12}
 800ab52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ab56:	f008 baaf 	b.w	80130b8 <GUI_Bar_Measure>
	if (CCT_measure < 5000)
 800ab5a:	9a04      	ldr	r2, [sp, #16]
 800ab5c:	f241 3387 	movw	r3, #4999	; 0x1387
 800ab60:	429a      	cmp	r2, r3
 800ab62:	f67f a928 	bls.w	8009db6 <cqs_func+0xc6>
		if (CCT_measure < 7000)
 800ab66:	9a04      	ldr	r2, [sp, #16]
 800ab68:	f641 3357 	movw	r3, #6999	; 0x1b57
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d97b      	bls.n	800ac68 <cqs_func+0xf78>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ab70:	9804      	ldr	r0, [sp, #16]
 800ab72:	f7f5 fcdf 	bl	8000534 <__aeabi_ui2d>
 800ab76:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800ac10 <cqs_func+0xf20>
 800ab7a:	ec41 0b10 	vmov	d0, r0, r1
 800ab7e:	f018 f86f 	bl	8022c60 <pow>
 800ab82:	eddd 7a04 	vldr	s15, [sp, #16]
 800ab86:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ab8a:	ed8d 0b00 	vstr	d0, [sp]
 800ab8e:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ab92:	ee17 0a90 	vmov	r0, s15
 800ab96:	f7f5 fcef 	bl	8000578 <__aeabi_f2d>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	a11e      	add	r1, pc, #120	; (adr r1, 800ac18 <cqs_func+0xf28>)
 800aba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aba4:	f7f5 fe66 	bl	8000874 <__aeabi_ddiv>
 800aba8:	ed9d 0b00 	vldr	d0, [sp]
 800abac:	4604      	mov	r4, r0
 800abae:	ec53 2b10 	vmov	r2, r3, d0
 800abb2:	460d      	mov	r5, r1
 800abb4:	a11a      	add	r1, pc, #104	; (adr r1, 800ac20 <cqs_func+0xf30>)
 800abb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abba:	f7f5 fe5b 	bl	8000874 <__aeabi_ddiv>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4620      	mov	r0, r4
 800abc4:	4629      	mov	r1, r5
 800abc6:	f7f5 fb79 	bl	80002bc <__adddf3>
 800abca:	4604      	mov	r4, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800abcc:	ee18 0a10 	vmov	r0, s16
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800abd0:	460d      	mov	r5, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800abd2:	f7f5 fcd1 	bl	8000578 <__aeabi_f2d>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	a113      	add	r1, pc, #76	; (adr r1, 800ac28 <cqs_func+0xf38>)
 800abdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe0:	f7f5 fe48 	bl	8000874 <__aeabi_ddiv>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	4620      	mov	r0, r4
 800abea:	4629      	mov	r1, r5
 800abec:	f7f5 fb66 	bl	80002bc <__adddf3>
 800abf0:	a30f      	add	r3, pc, #60	; (adr r3, 800ac30 <cqs_func+0xf40>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	e073      	b.n	800ace0 <cqs_func+0xff0>
 800abf8:	cccccccd 	.word	0xcccccccd
 800abfc:	4008cccc 	.word	0x4008cccc
 800ac00:	d70a3d71 	.word	0xd70a3d71
 800ac04:	400770a3 	.word	0x400770a3
 800ac08:	a3d70a3d 	.word	0xa3d70a3d
 800ac0c:	400e3d70 	.word	0x400e3d70
 800ac10:	00000000 	.word	0x00000000
 800ac14:	40080000 	.word	0x40080000
 800ac18:	00000000 	.word	0x00000000
 800ac1c:	413d04e8 	.word	0x413d04e8
 800ac20:	00000001 	.word	0x00000001
 800ac24:	c1dde5cf 	.word	0xc1dde5cf
 800ac28:	28f5c290 	.word	0x28f5c290
 800ac2c:	406eef5c 	.word	0x406eef5c
 800ac30:	a3ec02f3 	.word	0xa3ec02f3
 800ac34:	3fce5753 	.word	0x3fce5753
 800ac38:	40590000 	.word	0x40590000
 800ac3c:	20000188 	.word	0x20000188
 800ac40:	40240000 	.word	0x40240000
 800ac44:	3ff00000 	.word	0x3ff00000
 800ac48:	20090830 	.word	0x20090830
 800ac4c:	20090928 	.word	0x20090928
 800ac50:	20003623 	.word	0x20003623
 800ac54:	2009092c 	.word	0x2009092c
 800ac58:	20003624 	.word	0x20003624
 800ac5c:	20090720 	.word	0x20090720
 800ac60:	20003625 	.word	0x20003625
 800ac64:	200906a0 	.word	0x200906a0
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ac68:	eddd 7a04 	vldr	s15, [sp, #16]
 800ac6c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ac70:	ee68 8a08 	vmul.f32	s17, s16, s16
 800ac74:	ee68 7a28 	vmul.f32	s15, s16, s17
 800ac78:	ee17 0a90 	vmov	r0, s15
 800ac7c:	f7f5 fc7c 	bl	8000578 <__aeabi_f2d>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	a181      	add	r1, pc, #516	; (adr r1, 800ae8c <cqs_func+0x119c>)
 800ac86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac8a:	f7f5 fdf3 	bl	8000874 <__aeabi_ddiv>
 800ac8e:	4604      	mov	r4, r0
 800ac90:	ee18 0a90 	vmov	r0, s17
 800ac94:	460d      	mov	r5, r1
 800ac96:	f7f5 fc6f 	bl	8000578 <__aeabi_f2d>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	a17d      	add	r1, pc, #500	; (adr r1, 800ae94 <cqs_func+0x11a4>)
 800aca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aca4:	f7f5 fde6 	bl	8000874 <__aeabi_ddiv>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4620      	mov	r0, r4
 800acae:	4629      	mov	r1, r5
 800acb0:	f7f5 fb04 	bl	80002bc <__adddf3>
 800acb4:	4604      	mov	r4, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800acb6:	ee18 0a10 	vmov	r0, s16
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800acba:	460d      	mov	r5, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800acbc:	f7f5 fc5c 	bl	8000578 <__aeabi_f2d>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	a175      	add	r1, pc, #468	; (adr r1, 800ae9c <cqs_func+0x11ac>)
 800acc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acca:	f7f5 fdd3 	bl	8000874 <__aeabi_ddiv>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	4620      	mov	r0, r4
 800acd4:	4629      	mov	r1, r5
 800acd6:	f7f5 faf1 	bl	80002bc <__adddf3>
 800acda:	a372      	add	r3, pc, #456	; (adr r3, 800aea4 <cqs_func+0x11b4>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ace0:	f7f5 faec 	bl	80002bc <__adddf3>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ace4:	4b64      	ldr	r3, [pc, #400]	; (800ae78 <cqs_func+0x1188>)
 800ace6:	e9c3 0100 	strd	r0, r1, [r3]
		yD = -3 * xD*xD + 2.87*xD - 0.275;
 800acea:	4b63      	ldr	r3, [pc, #396]	; (800ae78 <cqs_func+0x1188>)
 800acec:	e9d3 4500 	ldrd	r4, r5, [r3]
 800acf0:	2200      	movs	r2, #0
 800acf2:	4b62      	ldr	r3, [pc, #392]	; (800ae7c <cqs_func+0x118c>)
 800acf4:	4620      	mov	r0, r4
 800acf6:	4629      	mov	r1, r5
 800acf8:	f7f5 fc92 	bl	8000620 <__aeabi_dmul>
 800acfc:	4622      	mov	r2, r4
 800acfe:	462b      	mov	r3, r5
 800ad00:	f7f5 fc8e 	bl	8000620 <__aeabi_dmul>
 800ad04:	a346      	add	r3, pc, #280	; (adr r3, 800ae20 <cqs_func+0x1130>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	460f      	mov	r7, r1
 800ad0e:	4620      	mov	r0, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7f5 fc85 	bl	8000620 <__aeabi_dmul>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	f7f5 facd 	bl	80002bc <__adddf3>
 800ad22:	a341      	add	r3, pc, #260	; (adr r3, 800ae28 <cqs_func+0x1138>)
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	f7f5 fac6 	bl	80002b8 <__aeabi_dsub>
 800ad2c:	4b54      	ldr	r3, [pc, #336]	; (800ae80 <cqs_func+0x1190>)
 800ad2e:	4606      	mov	r6, r0
 800ad30:	460f      	mov	r7, r1
 800ad32:	e9c3 6700 	strd	r6, r7, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ad36:	4620      	mov	r0, r4
 800ad38:	a33d      	add	r3, pc, #244	; (adr r3, 800ae30 <cqs_func+0x1140>)
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	4629      	mov	r1, r5
 800ad40:	f7f5 fc6e 	bl	8000620 <__aeabi_dmul>
 800ad44:	a33c      	add	r3, pc, #240	; (adr r3, 800ae38 <cqs_func+0x1148>)
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	f7f5 fab7 	bl	80002bc <__adddf3>
 800ad4e:	a33c      	add	r3, pc, #240	; (adr r3, 800ae40 <cqs_func+0x1150>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	4680      	mov	r8, r0
 800ad56:	4689      	mov	r9, r1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f7f5 fc60 	bl	8000620 <__aeabi_dmul>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	4640      	mov	r0, r8
 800ad66:	4649      	mov	r1, r9
 800ad68:	f7f5 faa6 	bl	80002b8 <__aeabi_dsub>
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800ad6c:	a336      	add	r3, pc, #216	; (adr r3, 800ae48 <cqs_func+0x1158>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ad72:	4680      	mov	r8, r0
 800ad74:	4689      	mov	r9, r1
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800ad76:	4620      	mov	r0, r4
 800ad78:	4629      	mov	r1, r5
 800ad7a:	f7f5 fc51 	bl	8000620 <__aeabi_dmul>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	a133      	add	r1, pc, #204	; (adr r1, 800ae50 <cqs_func+0x1160>)
 800ad84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad88:	f7f5 fa96 	bl	80002b8 <__aeabi_dsub>
 800ad8c:	a332      	add	r3, pc, #200	; (adr r3, 800ae58 <cqs_func+0x1168>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	4682      	mov	sl, r0
 800ad94:	468b      	mov	fp, r1
 800ad96:	4630      	mov	r0, r6
 800ad98:	4639      	mov	r1, r7
 800ad9a:	f7f5 fc41 	bl	8000620 <__aeabi_dmul>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4650      	mov	r0, sl
 800ada4:	4659      	mov	r1, fp
 800ada6:	f7f5 fa89 	bl	80002bc <__adddf3>
 800adaa:	f7f5 ff31 	bl	8000c10 <__aeabi_d2f>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800adae:	f7f5 fbe3 	bl	8000578 <__aeabi_f2d>
 800adb2:	4642      	mov	r2, r8
 800adb4:	464b      	mov	r3, r9
 800adb6:	f7f5 fd5d 	bl	8000874 <__aeabi_ddiv>
 800adba:	f7f5 ff29 	bl	8000c10 <__aeabi_d2f>
 800adbe:	4b31      	ldr	r3, [pc, #196]	; (800ae84 <cqs_func+0x1194>)
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800adc0:	4629      	mov	r1, r5
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800adc2:	6018      	str	r0, [r3, #0]
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800adc4:	a326      	add	r3, pc, #152	; (adr r3, 800ae60 <cqs_func+0x1170>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	4620      	mov	r0, r4
 800adcc:	f7f5 fc28 	bl	8000620 <__aeabi_dmul>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	a124      	add	r1, pc, #144	; (adr r1, 800ae68 <cqs_func+0x1178>)
 800add6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adda:	f7f5 fa6d 	bl	80002b8 <__aeabi_dsub>
 800adde:	a324      	add	r3, pc, #144	; (adr r3, 800ae70 <cqs_func+0x1180>)
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	4604      	mov	r4, r0
 800ade6:	460d      	mov	r5, r1
 800ade8:	4630      	mov	r0, r6
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fc18 	bl	8000620 <__aeabi_dmul>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	4620      	mov	r0, r4
 800adf6:	4629      	mov	r1, r5
 800adf8:	f7f5 fa60 	bl	80002bc <__adddf3>
 800adfc:	f7f5 ff08 	bl	8000c10 <__aeabi_d2f>
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ae00:	f7f5 fbba 	bl	8000578 <__aeabi_f2d>
 800ae04:	464b      	mov	r3, r9
 800ae06:	4642      	mov	r2, r8
 800ae08:	f7f5 fd34 	bl	8000874 <__aeabi_ddiv>
 800ae0c:	f7f5 ff00 	bl	8000c10 <__aeabi_d2f>
 800ae10:	4b1d      	ldr	r3, [pc, #116]	; (800ae88 <cqs_func+0x1198>)
 800ae12:	6018      	str	r0, [r3, #0]
 800ae14:	f7fe bfd2 	b.w	8009dbc <cqs_func+0xcc>
		float E_sat = delta_E_CQS;
 800ae18:	ee07 0a90 	vmov	s15, r0
 800ae1c:	e56c      	b.n	800a8f8 <cqs_func+0xc08>
 800ae1e:	bf00      	nop
 800ae20:	8f5c28f6 	.word	0x8f5c28f6
 800ae24:	4006f5c2 	.word	0x4006f5c2
 800ae28:	9999999a 	.word	0x9999999a
 800ae2c:	3fd19999 	.word	0x3fd19999
 800ae30:	af4f0d84 	.word	0xaf4f0d84
 800ae34:	3fd06594 	.word	0x3fd06594
 800ae38:	9f559b3d 	.word	0x9f559b3d
 800ae3c:	3f98adab 	.word	0x3f98adab
 800ae40:	487fcb92 	.word	0x487fcb92
 800ae44:	3fe77dbf 	.word	0x3fe77dbf
 800ae48:	17c1bda5 	.word	0x17c1bda5
 800ae4c:	3ffc5326 	.word	0x3ffc5326
 800ae50:	76c8b439 	.word	0x76c8b439
 800ae54:	bff59fbe 	.word	0xbff59fbe
 800ae58:	0aa64c30 	.word	0x0aa64c30
 800ae5c:	4017a546 	.word	0x4017a546
 800ae60:	205bc01a 	.word	0x205bc01a
 800ae64:	403f7141 	.word	0x403f7141
 800ae68:	eb851eb8 	.word	0xeb851eb8
 800ae6c:	3f9eb851 	.word	0x3f9eb851
 800ae70:	ee631f8a 	.word	0xee631f8a
 800ae74:	403e125a 	.word	0x403e125a
 800ae78:	20090828 	.word	0x20090828
 800ae7c:	c0080000 	.word	0xc0080000
 800ae80:	20090820 	.word	0x20090820
 800ae84:	2000360c 	.word	0x2000360c
 800ae88:	20003610 	.word	0x20003610
 800ae8c:	dc000000 	.word	0xdc000000
 800ae90:	c1f12993 	.word	0xc1f12993
 800ae94:	00000000 	.word	0x00000000
 800ae98:	4146a47c 	.word	0x4146a47c
 800ae9c:	3d70a3d7 	.word	0x3d70a3d7
 800aea0:	4058c70a 	.word	0x4058c70a
 800aea4:	d594f26b 	.word	0xd594f26b
 800aea8:	3fcf3d74 	.word	0x3fcf3d74

0800aeac <CQS_Axes>:
#include "CQS_graph.h"
extern uint8_t TFT_direction;


void CQS_Axes(uint8_t direction){
 800aeac:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800aeae:	bbb8      	cbnz	r0, 800af20 <CQS_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800aeb0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800aeb4:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800aeb8:	2212      	movs	r2, #18
 800aeba:	215f      	movs	r1, #95	; 0x5f
 800aebc:	2010      	movs	r0, #16
 800aebe:	9400      	str	r4, [sp, #0]
 800aec0:	f011 f89d 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800aec4:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800aec8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800aecc:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800aed0:	2010      	movs	r0, #16
 800aed2:	9400      	str	r4, [sp, #0]
 800aed4:	f011 f893 	bl	801bffe <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800aed8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800aedc:	4619      	mov	r1, r3
 800aede:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800aee2:	2010      	movs	r0, #16
 800aee4:	9400      	str	r4, [sp, #0]
 800aee6:	f011 f82d 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800aeea:	f240 1301 	movw	r3, #257	; 0x101
 800aeee:	4619      	mov	r1, r3
 800aef0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800aef4:	2010      	movs	r0, #16
 800aef6:	9400      	str	r4, [sp, #0]
 800aef8:	f011 f824 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800aefc:	23b5      	movs	r3, #181	; 0xb5
 800aefe:	4619      	mov	r1, r3
 800af00:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800af04:	2010      	movs	r0, #16
 800af06:	9400      	str	r4, [sp, #0]
 800af08:	f011 f81c 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800af0c:	2369      	movs	r3, #105	; 0x69
 800af0e:	9400      	str	r4, [sp, #0]
 800af10:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800af14:	4619      	mov	r1, r3
 800af16:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800af18:	f011 f814 	bl	801bf44 <TFT_DrawLine>
		}
}
 800af1c:	b002      	add	sp, #8
 800af1e:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800af20:	2801      	cmp	r0, #1
 800af22:	d131      	bne.n	800af88 <CQS_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800af24:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800af28:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af2c:	22ff      	movs	r2, #255	; 0xff
 800af2e:	2146      	movs	r1, #70	; 0x46
 800af30:	20fd      	movs	r0, #253	; 0xfd
 800af32:	9400      	str	r4, [sp, #0]
 800af34:	f011 f863 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800af38:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af3c:	22ff      	movs	r2, #255	; 0xff
 800af3e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800af42:	2028      	movs	r0, #40	; 0x28
 800af44:	9400      	str	r4, [sp, #0]
 800af46:	f011 f85a 	bl	801bffe <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800af4a:	22cc      	movs	r2, #204	; 0xcc
 800af4c:	4610      	mov	r0, r2
 800af4e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af52:	2146      	movs	r1, #70	; 0x46
 800af54:	9400      	str	r4, [sp, #0]
 800af56:	f010 fff5 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800af5a:	2297      	movs	r2, #151	; 0x97
 800af5c:	4610      	mov	r0, r2
 800af5e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af62:	2146      	movs	r1, #70	; 0x46
 800af64:	9400      	str	r4, [sp, #0]
 800af66:	f010 ffed 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800af6a:	2262      	movs	r2, #98	; 0x62
 800af6c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af70:	4610      	mov	r0, r2
 800af72:	9400      	str	r4, [sp, #0]
 800af74:	2146      	movs	r1, #70	; 0x46
 800af76:	f010 ffe5 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800af7a:	9400      	str	r4, [sp, #0]
 800af7c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af80:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800af82:	2146      	movs	r1, #70	; 0x46
 800af84:	4610      	mov	r0, r2
 800af86:	e7c7      	b.n	800af18 <CQS_Axes+0x6c>
	}else if (direction == 0x02)
 800af88:	2802      	cmp	r0, #2
 800af8a:	d1c7      	bne.n	800af1c <CQS_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800af8c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800af90:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af94:	2210      	movs	r2, #16
 800af96:	214a      	movs	r1, #74	; 0x4a
 800af98:	2012      	movs	r0, #18
 800af9a:	9400      	str	r4, [sp, #0]
 800af9c:	f011 f82f 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800afa0:	234c      	movs	r3, #76	; 0x4c
 800afa2:	22e8      	movs	r2, #232	; 0xe8
 800afa4:	214a      	movs	r1, #74	; 0x4a
 800afa6:	2011      	movs	r0, #17
 800afa8:	9400      	str	r4, [sp, #0]
 800afaa:	f011 f828 	bl	801bffe <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800afae:	2244      	movs	r2, #68	; 0x44
 800afb0:	4610      	mov	r0, r2
 800afb2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afb6:	2146      	movs	r1, #70	; 0x46
 800afb8:	9400      	str	r4, [sp, #0]
 800afba:	f010 ffc3 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800afbe:	2279      	movs	r2, #121	; 0x79
 800afc0:	4610      	mov	r0, r2
 800afc2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afc6:	2146      	movs	r1, #70	; 0x46
 800afc8:	9400      	str	r4, [sp, #0]
 800afca:	f010 ffbb 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800afce:	22ae      	movs	r2, #174	; 0xae
 800afd0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afd4:	4610      	mov	r0, r2
 800afd6:	9400      	str	r4, [sp, #0]
 800afd8:	2146      	movs	r1, #70	; 0x46
 800afda:	f010 ffb3 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800afde:	9400      	str	r4, [sp, #0]
 800afe0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afe4:	22e3      	movs	r2, #227	; 0xe3
 800afe6:	e7cc      	b.n	800af82 <CQS_Axes+0xd6>

0800afe8 <CQS_Axes_Measure>:

void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800afe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800afec:	ac02      	add	r4, sp, #8
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800afee:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800aff0:	2300      	movs	r3, #0
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800aff2:	4688      	mov	r8, r1
 800aff4:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800aff6:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800affa:	2800      	cmp	r0, #0
 800affc:	d15a      	bne.n	800b0b4 <CQS_Axes_Measure+0xcc>
	{
		
		TFT_SetTextColor(TFT_White);
 800affe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b002:	f011 fa2b 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b006:	2063      	movs	r0, #99	; 0x63
 800b008:	f011 fa2e 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b00c:	485c      	ldr	r0, [pc, #368]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b00e:	f011 fa1f 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(20, 70, 'a');
 800b012:	2261      	movs	r2, #97	; 0x61
 800b014:	2146      	movs	r1, #70	; 0x46
 800b016:	2014      	movs	r0, #20
 800b018:	f011 fae4 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b01c:	4859      	ldr	r0, [pc, #356]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b01e:	f011 fa17 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(5, 70-2, 'Q');
 800b022:	2251      	movs	r2, #81	; 0x51
 800b024:	2144      	movs	r1, #68	; 0x44
 800b026:	2005      	movs	r0, #5
 800b028:	f011 fadc 	bl	801c5e4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qa);
 800b02c:	4642      	mov	r2, r8
 800b02e:	4956      	ldr	r1, [pc, #344]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b030:	4620      	mov	r0, r4
 800b032:	f014 fce9 	bl	801fa08 <sprintf>
		TFT_DisplayString(39, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b036:	2303      	movs	r3, #3
 800b038:	4622      	mov	r2, r4
 800b03a:	2144      	movs	r1, #68	; 0x44
 800b03c:	2027      	movs	r0, #39	; 0x27
 800b03e:	f011 fb29 	bl	801c694 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b042:	484f      	ldr	r0, [pc, #316]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b044:	f011 fa04 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(112, 70, 'p');
 800b048:	2270      	movs	r2, #112	; 0x70
 800b04a:	4610      	mov	r0, r2
 800b04c:	2146      	movs	r1, #70	; 0x46
 800b04e:	f011 fac9 	bl	801c5e4 <TFT_DrawChar>

		TFT_SetFont(&Font16EN_arch_big);
 800b052:	484c      	ldr	r0, [pc, #304]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b054:	f011 f9fc 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(93, 70-2, 'Q');
 800b058:	2251      	movs	r2, #81	; 0x51
 800b05a:	2144      	movs	r1, #68	; 0x44
 800b05c:	205d      	movs	r0, #93	; 0x5d
 800b05e:	f011 fac1 	bl	801c5e4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qp);
 800b062:	463a      	mov	r2, r7
 800b064:	4948      	ldr	r1, [pc, #288]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b066:	4620      	mov	r0, r4
 800b068:	f014 fcce 	bl	801fa08 <sprintf>
		TFT_DisplayString(130, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b06c:	2303      	movs	r3, #3
 800b06e:	4622      	mov	r2, r4
 800b070:	2144      	movs	r1, #68	; 0x44
 800b072:	2082      	movs	r0, #130	; 0x82
 800b074:	f011 fb0e 	bl	801c694 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b078:	4841      	ldr	r0, [pc, #260]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b07a:	f011 f9e9 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(206, 70, 'f');
 800b07e:	2266      	movs	r2, #102	; 0x66
 800b080:	2146      	movs	r1, #70	; 0x46
 800b082:	20ce      	movs	r0, #206	; 0xce
 800b084:	f011 faae 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b088:	483e      	ldr	r0, [pc, #248]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b08a:	f011 f9e1 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(191, 70-2, 'Q');
 800b08e:	2251      	movs	r2, #81	; 0x51
 800b090:	2144      	movs	r1, #68	; 0x44
 800b092:	20bf      	movs	r0, #191	; 0xbf
 800b094:	f011 faa6 	bl	801c5e4 <TFT_DrawChar>

		sprintf (buffer, "%d", Qf);
 800b098:	4632      	mov	r2, r6
 800b09a:	493b      	ldr	r1, [pc, #236]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b09c:	4620      	mov	r0, r4
 800b09e:	f014 fcb3 	bl	801fa08 <sprintf>
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	2144      	movs	r1, #68	; 0x44
 800b0a8:	20e6      	movs	r0, #230	; 0xe6
 800b0aa:	f011 faf3 	bl	801c694 <TFT_DisplayString>
		
		sprintf (buffer, "%d", Qf);
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800b0ae:	b002      	add	sp, #8
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b4:	4d35      	ldr	r5, [pc, #212]	; (800b18c <CQS_Axes_Measure+0x1a4>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b0b6:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800b0b8:	bf14      	ite	ne
 800b0ba:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b0bc:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b0be:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b0c2:	bf18      	it	ne
 800b0c4:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b0c6:	f011 f9c9 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b0ca:	2063      	movs	r0, #99	; 0x63
 800b0cc:	f011 f9cc 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b0d0:	482b      	ldr	r0, [pc, #172]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b0d2:	f011 f9bd 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800b0d6:	2261      	movs	r2, #97	; 0x61
 800b0d8:	2110      	movs	r1, #16
 800b0da:	2064      	movs	r0, #100	; 0x64
 800b0dc:	f011 fa82 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b0e0:	4828      	ldr	r0, [pc, #160]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b0e2:	f011 f9b5 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'Q');
 800b0e6:	2251      	movs	r2, #81	; 0x51
 800b0e8:	210e      	movs	r1, #14
 800b0ea:	2055      	movs	r0, #85	; 0x55
 800b0ec:	f011 fa7a 	bl	801c5e4 <TFT_DrawChar>
		sprintf (buffer, "%d", Qa);
 800b0f0:	4642      	mov	r2, r8
 800b0f2:	4925      	ldr	r1, [pc, #148]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f014 fc87 	bl	801fa08 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	210e      	movs	r1, #14
 800b100:	207d      	movs	r0, #125	; 0x7d
 800b102:	f011 fac7 	bl	801c694 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b106:	481e      	ldr	r0, [pc, #120]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b108:	f011 f9a2 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(216, 16, 'p');
 800b10c:	2270      	movs	r2, #112	; 0x70
 800b10e:	2110      	movs	r1, #16
 800b110:	20d8      	movs	r0, #216	; 0xd8
 800b112:	f011 fa67 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b116:	481b      	ldr	r0, [pc, #108]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b118:	f011 f99a 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(199, 16-2, 'Q');
 800b11c:	2251      	movs	r2, #81	; 0x51
 800b11e:	210e      	movs	r1, #14
 800b120:	20c7      	movs	r0, #199	; 0xc7
 800b122:	f011 fa5f 	bl	801c5e4 <TFT_DrawChar>
		sprintf (buffer, "%d", Qp);
 800b126:	463a      	mov	r2, r7
 800b128:	4917      	ldr	r1, [pc, #92]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b12a:	4620      	mov	r0, r4
 800b12c:	f014 fc6c 	bl	801fa08 <sprintf>
		TFT_DisplayString(252, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b130:	2303      	movs	r3, #3
 800b132:	4622      	mov	r2, r4
 800b134:	210e      	movs	r1, #14
 800b136:	20fc      	movs	r0, #252	; 0xfc
 800b138:	f011 faac 	bl	801c694 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b13c:	4810      	ldr	r0, [pc, #64]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b13e:	f011 f987 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(340, 16-2, 'f');
 800b142:	2266      	movs	r2, #102	; 0x66
 800b144:	210e      	movs	r1, #14
 800b146:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800b14a:	f011 fa4b 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b14e:	480d      	ldr	r0, [pc, #52]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b150:	f011 f97e 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(325, 16-2, 'Q');
 800b154:	2251      	movs	r2, #81	; 0x51
 800b156:	210e      	movs	r1, #14
 800b158:	f240 1045 	movw	r0, #325	; 0x145
 800b15c:	f011 fa42 	bl	801c5e4 <TFT_DrawChar>
		sprintf (buffer, "%d", Qf);
 800b160:	4632      	mov	r2, r6
 800b162:	4909      	ldr	r1, [pc, #36]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b164:	4620      	mov	r0, r4
 800b166:	f014 fc4f 	bl	801fa08 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b16a:	2303      	movs	r3, #3
 800b16c:	4622      	mov	r2, r4
 800b16e:	210e      	movs	r1, #14
 800b170:	f240 106d 	movw	r0, #365	; 0x16d
 800b174:	f011 fa8e 	bl	801c694 <TFT_DisplayString>
		TFT_direction = 0x00;
 800b178:	2300      	movs	r3, #0
 800b17a:	702b      	strb	r3, [r5, #0]
}
 800b17c:	e797      	b.n	800b0ae <CQS_Axes_Measure+0xc6>
 800b17e:	bf00      	nop
 800b180:	200001c0 	.word	0x200001c0
 800b184:	200001b0 	.word	0x200001b0
 800b188:	08024679 	.word	0x08024679
 800b18c:	20005690 	.word	0x20005690

0800b190 <CQS_Axes_Text>:

void CQS_Axes_Text(uint8_t direction){
 800b190:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800b192:	4604      	mov	r4, r0
 800b194:	2800      	cmp	r0, #0
 800b196:	f040 811f 	bne.w	800b3d8 <CQS_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800b19a:	488e      	ldr	r0, [pc, #568]	; (800b3d4 <CQS_Axes_Text+0x244>)
 800b19c:	f011 f958 	bl	801c450 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b1a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b1a4:	f011 f95a 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b1a8:	2063      	movs	r0, #99	; 0x63
 800b1aa:	f011 f95d 	bl	801c468 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'Q');
 800b1ae:	2251      	movs	r2, #81	; 0x51
 800b1b0:	f240 119f 	movw	r1, #415	; 0x19f
 800b1b4:	2018      	movs	r0, #24
 800b1b6:	f011 fa15 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800b1ba:	2231      	movs	r2, #49	; 0x31
 800b1bc:	f240 119f 	movw	r1, #415	; 0x19f
 800b1c0:	201e      	movs	r0, #30
 800b1c2:	f011 fa0f 	bl	801c5e4 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'Q');
 800b1c6:	2251      	movs	r2, #81	; 0x51
 800b1c8:	f240 119f 	movw	r1, #415	; 0x19f
 800b1cc:	2028      	movs	r0, #40	; 0x28
 800b1ce:	f011 fa09 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800b1d2:	2232      	movs	r2, #50	; 0x32
 800b1d4:	f240 119f 	movw	r1, #415	; 0x19f
 800b1d8:	202e      	movs	r0, #46	; 0x2e
 800b1da:	f011 fa03 	bl	801c5e4 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'Q');
 800b1de:	2251      	movs	r2, #81	; 0x51
 800b1e0:	f240 119f 	movw	r1, #415	; 0x19f
 800b1e4:	2038      	movs	r0, #56	; 0x38
 800b1e6:	f011 f9fd 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800b1ea:	2233      	movs	r2, #51	; 0x33
 800b1ec:	f240 119f 	movw	r1, #415	; 0x19f
 800b1f0:	203e      	movs	r0, #62	; 0x3e
 800b1f2:	f011 f9f7 	bl	801c5e4 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'Q');
 800b1f6:	2251      	movs	r2, #81	; 0x51
 800b1f8:	f240 119f 	movw	r1, #415	; 0x19f
 800b1fc:	2048      	movs	r0, #72	; 0x48
 800b1fe:	f011 f9f1 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800b202:	2234      	movs	r2, #52	; 0x34
 800b204:	f240 119f 	movw	r1, #415	; 0x19f
 800b208:	204e      	movs	r0, #78	; 0x4e
 800b20a:	f011 f9eb 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'Q');
 800b20e:	2251      	movs	r2, #81	; 0x51
 800b210:	f240 119f 	movw	r1, #415	; 0x19f
 800b214:	2058      	movs	r0, #88	; 0x58
 800b216:	f011 f9e5 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800b21a:	2235      	movs	r2, #53	; 0x35
 800b21c:	f240 119f 	movw	r1, #415	; 0x19f
 800b220:	205e      	movs	r0, #94	; 0x5e
 800b222:	f011 f9df 	bl	801c5e4 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'Q');
 800b226:	2251      	movs	r2, #81	; 0x51
 800b228:	f240 119f 	movw	r1, #415	; 0x19f
 800b22c:	2068      	movs	r0, #104	; 0x68
 800b22e:	f011 f9d9 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800b232:	2236      	movs	r2, #54	; 0x36
 800b234:	f240 119f 	movw	r1, #415	; 0x19f
 800b238:	206e      	movs	r0, #110	; 0x6e
 800b23a:	f011 f9d3 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'Q');
 800b23e:	2251      	movs	r2, #81	; 0x51
 800b240:	f240 119f 	movw	r1, #415	; 0x19f
 800b244:	2078      	movs	r0, #120	; 0x78
 800b246:	f011 f9cd 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800b24a:	2237      	movs	r2, #55	; 0x37
 800b24c:	f240 119f 	movw	r1, #415	; 0x19f
 800b250:	207e      	movs	r0, #126	; 0x7e
 800b252:	f011 f9c7 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'Q');
 800b256:	2251      	movs	r2, #81	; 0x51
 800b258:	f240 119f 	movw	r1, #415	; 0x19f
 800b25c:	2088      	movs	r0, #136	; 0x88
 800b25e:	f011 f9c1 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800b262:	2238      	movs	r2, #56	; 0x38
 800b264:	f240 119f 	movw	r1, #415	; 0x19f
 800b268:	208e      	movs	r0, #142	; 0x8e
 800b26a:	f011 f9bb 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'Q');
 800b26e:	2251      	movs	r2, #81	; 0x51
 800b270:	f240 119f 	movw	r1, #415	; 0x19f
 800b274:	2098      	movs	r0, #152	; 0x98
 800b276:	f011 f9b5 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800b27a:	2239      	movs	r2, #57	; 0x39
 800b27c:	f240 119f 	movw	r1, #415	; 0x19f
 800b280:	209e      	movs	r0, #158	; 0x9e
 800b282:	f011 f9af 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800b286:	2231      	movs	r2, #49	; 0x31
 800b288:	f240 119f 	movw	r1, #415	; 0x19f
 800b28c:	20ad      	movs	r0, #173	; 0xad
 800b28e:	f011 f9a9 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'Q');
 800b292:	2251      	movs	r2, #81	; 0x51
 800b294:	f240 119f 	movw	r1, #415	; 0x19f
 800b298:	20a8      	movs	r0, #168	; 0xa8
 800b29a:	f011 f9a3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800b29e:	2230      	movs	r2, #48	; 0x30
 800b2a0:	f240 119f 	movw	r1, #415	; 0x19f
 800b2a4:	20b1      	movs	r0, #177	; 0xb1
 800b2a6:	f011 f99d 	bl	801c5e4 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800b2aa:	2231      	movs	r2, #49	; 0x31
 800b2ac:	f240 119f 	movw	r1, #415	; 0x19f
 800b2b0:	20bd      	movs	r0, #189	; 0xbd
 800b2b2:	f011 f997 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'Q');
 800b2b6:	2251      	movs	r2, #81	; 0x51
 800b2b8:	f240 119f 	movw	r1, #415	; 0x19f
 800b2bc:	20b8      	movs	r0, #184	; 0xb8
 800b2be:	f011 f991 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800b2c2:	2231      	movs	r2, #49	; 0x31
 800b2c4:	f240 119f 	movw	r1, #415	; 0x19f
 800b2c8:	20c2      	movs	r0, #194	; 0xc2
 800b2ca:	f011 f98b 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800b2ce:	2231      	movs	r2, #49	; 0x31
 800b2d0:	f240 119f 	movw	r1, #415	; 0x19f
 800b2d4:	20cd      	movs	r0, #205	; 0xcd
 800b2d6:	f011 f985 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'Q');
 800b2da:	2251      	movs	r2, #81	; 0x51
 800b2dc:	f240 119f 	movw	r1, #415	; 0x19f
 800b2e0:	20c8      	movs	r0, #200	; 0xc8
 800b2e2:	f011 f97f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800b2e6:	2232      	movs	r2, #50	; 0x32
 800b2e8:	f240 119f 	movw	r1, #415	; 0x19f
 800b2ec:	20d1      	movs	r0, #209	; 0xd1
 800b2ee:	f011 f979 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800b2f2:	2231      	movs	r2, #49	; 0x31
 800b2f4:	f240 119f 	movw	r1, #415	; 0x19f
 800b2f8:	20dd      	movs	r0, #221	; 0xdd
 800b2fa:	f011 f973 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'Q');
 800b2fe:	2251      	movs	r2, #81	; 0x51
 800b300:	f240 119f 	movw	r1, #415	; 0x19f
 800b304:	20d8      	movs	r0, #216	; 0xd8
 800b306:	f011 f96d 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800b30a:	2233      	movs	r2, #51	; 0x33
 800b30c:	f240 119f 	movw	r1, #415	; 0x19f
 800b310:	20e1      	movs	r0, #225	; 0xe1
 800b312:	f011 f967 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800b316:	2231      	movs	r2, #49	; 0x31
 800b318:	f240 119f 	movw	r1, #415	; 0x19f
 800b31c:	20ed      	movs	r0, #237	; 0xed
 800b31e:	f011 f961 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'Q');
 800b322:	2251      	movs	r2, #81	; 0x51
 800b324:	f240 119f 	movw	r1, #415	; 0x19f
 800b328:	20e8      	movs	r0, #232	; 0xe8
 800b32a:	f011 f95b 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800b32e:	2234      	movs	r2, #52	; 0x34
 800b330:	f240 119f 	movw	r1, #415	; 0x19f
 800b334:	20f1      	movs	r0, #241	; 0xf1
 800b336:	f011 f955 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800b33a:	2231      	movs	r2, #49	; 0x31
 800b33c:	f240 119f 	movw	r1, #415	; 0x19f
 800b340:	20fd      	movs	r0, #253	; 0xfd
 800b342:	f011 f94f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'Q');
 800b346:	2251      	movs	r2, #81	; 0x51
 800b348:	f240 119f 	movw	r1, #415	; 0x19f
 800b34c:	20f8      	movs	r0, #248	; 0xf8
 800b34e:	f011 f949 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800b352:	2235      	movs	r2, #53	; 0x35
 800b354:	f240 119f 	movw	r1, #415	; 0x19f
 800b358:	f240 1001 	movw	r0, #257	; 0x101
 800b35c:	f011 f942 	bl	801c5e4 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800b360:	2230      	movs	r2, #48	; 0x30
 800b362:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800b366:	2005      	movs	r0, #5
 800b368:	f011 f93c 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800b36c:	2232      	movs	r2, #50	; 0x32
 800b36e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b372:	2001      	movs	r0, #1
 800b374:	f011 f936 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800b378:	2235      	movs	r2, #53	; 0x35
 800b37a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b37e:	2007      	movs	r0, #7
 800b380:	f011 f930 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800b384:	2235      	movs	r2, #53	; 0x35
 800b386:	f240 1101 	movw	r1, #257	; 0x101
 800b38a:	2001      	movs	r0, #1
 800b38c:	f011 f92a 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800b390:	2230      	movs	r2, #48	; 0x30
 800b392:	f240 1101 	movw	r1, #257	; 0x101
 800b396:	2007      	movs	r0, #7
 800b398:	f011 f924 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800b39c:	2237      	movs	r2, #55	; 0x37
 800b39e:	21b5      	movs	r1, #181	; 0xb5
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	f011 f91f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800b3a6:	2235      	movs	r2, #53	; 0x35
 800b3a8:	21b5      	movs	r1, #181	; 0xb5
 800b3aa:	2007      	movs	r0, #7
 800b3ac:	f011 f91a 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	2231      	movs	r2, #49	; 0x31
 800b3b4:	2169      	movs	r1, #105	; 0x69
 800b3b6:	f011 f915 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800b3ba:	2230      	movs	r2, #48	; 0x30
 800b3bc:	2169      	movs	r1, #105	; 0x69
 800b3be:	2004      	movs	r0, #4
 800b3c0:	f011 f910 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800b3c4:	2230      	movs	r2, #48	; 0x30
 800b3c6:	2169      	movs	r1, #105	; 0x69
 800b3c8:	2009      	movs	r0, #9
		TFT_DrawChar(67, 43, '0');
		

		TFT_direction = 0x00;
	}
}
 800b3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800b3ce:	f011 b909 	b.w	801c5e4 <TFT_DrawChar>
 800b3d2:	bf00      	nop
 800b3d4:	20000210 	.word	0x20000210
 800b3d8:	4d98      	ldr	r5, [pc, #608]	; (800b63c <CQS_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b3da:	2801      	cmp	r0, #1
 800b3dc:	bf0c      	ite	eq
 800b3de:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800b3e0:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800b3e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b3e6:	bf18      	it	ne
 800b3e8:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b3ea:	f011 f837 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b3ee:	2063      	movs	r0, #99	; 0x63
 800b3f0:	f011 f83a 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800b3f4:	4892      	ldr	r0, [pc, #584]	; (800b640 <CQS_Axes_Text+0x4b0>)
 800b3f6:	f011 f82b 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'Q');
 800b3fa:	2251      	movs	r2, #81	; 0x51
 800b3fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b400:	2057      	movs	r0, #87	; 0x57
 800b402:	f011 f8ef 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800b406:	2231      	movs	r2, #49	; 0x31
 800b408:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b40c:	205d      	movs	r0, #93	; 0x5d
 800b40e:	f011 f8e9 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'Q');
 800b412:	2251      	movs	r2, #81	; 0x51
 800b414:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b418:	206d      	movs	r0, #109	; 0x6d
 800b41a:	f011 f8e3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800b41e:	2232      	movs	r2, #50	; 0x32
 800b420:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b424:	2073      	movs	r0, #115	; 0x73
 800b426:	f011 f8dd 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'Q');
 800b42a:	2251      	movs	r2, #81	; 0x51
 800b42c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b430:	2083      	movs	r0, #131	; 0x83
 800b432:	f011 f8d7 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800b436:	2233      	movs	r2, #51	; 0x33
 800b438:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b43c:	2089      	movs	r0, #137	; 0x89
 800b43e:	f011 f8d1 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'Q');
 800b442:	2251      	movs	r2, #81	; 0x51
 800b444:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b448:	2099      	movs	r0, #153	; 0x99
 800b44a:	f011 f8cb 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800b44e:	2234      	movs	r2, #52	; 0x34
 800b450:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b454:	209f      	movs	r0, #159	; 0x9f
 800b456:	f011 f8c5 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'Q');
 800b45a:	2251      	movs	r2, #81	; 0x51
 800b45c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b460:	20af      	movs	r0, #175	; 0xaf
 800b462:	f011 f8bf 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800b466:	2235      	movs	r2, #53	; 0x35
 800b468:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b46c:	20b5      	movs	r0, #181	; 0xb5
 800b46e:	f011 f8b9 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'Q');
 800b472:	2251      	movs	r2, #81	; 0x51
 800b474:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b478:	20c5      	movs	r0, #197	; 0xc5
 800b47a:	f011 f8b3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800b47e:	2236      	movs	r2, #54	; 0x36
 800b480:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b484:	20cb      	movs	r0, #203	; 0xcb
 800b486:	f011 f8ad 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'Q');
 800b48a:	2251      	movs	r2, #81	; 0x51
 800b48c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b490:	20db      	movs	r0, #219	; 0xdb
 800b492:	f011 f8a7 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800b496:	2237      	movs	r2, #55	; 0x37
 800b498:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b49c:	20e1      	movs	r0, #225	; 0xe1
 800b49e:	f011 f8a1 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'Q');
 800b4a2:	2251      	movs	r2, #81	; 0x51
 800b4a4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4a8:	20f1      	movs	r0, #241	; 0xf1
 800b4aa:	f011 f89b 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800b4ae:	2238      	movs	r2, #56	; 0x38
 800b4b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4b4:	20f7      	movs	r0, #247	; 0xf7
 800b4b6:	f011 f895 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'Q');
 800b4ba:	2251      	movs	r2, #81	; 0x51
 800b4bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4c0:	f240 1007 	movw	r0, #263	; 0x107
 800b4c4:	f011 f88e 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800b4c8:	2239      	movs	r2, #57	; 0x39
 800b4ca:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4ce:	f240 100d 	movw	r0, #269	; 0x10d
 800b4d2:	f011 f887 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800b4d6:	2231      	movs	r2, #49	; 0x31
 800b4d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4dc:	f44f 7091 	mov.w	r0, #290	; 0x122
 800b4e0:	f011 f880 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'Q');
 800b4e4:	2251      	movs	r2, #81	; 0x51
 800b4e6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4ea:	f240 101d 	movw	r0, #285	; 0x11d
 800b4ee:	f011 f879 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800b4f2:	2230      	movs	r2, #48	; 0x30
 800b4f4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4f8:	f44f 7093 	mov.w	r0, #294	; 0x126
 800b4fc:	f011 f872 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800b500:	2231      	movs	r2, #49	; 0x31
 800b502:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b506:	f44f 709c 	mov.w	r0, #312	; 0x138
 800b50a:	f011 f86b 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'Q');
 800b50e:	2251      	movs	r2, #81	; 0x51
 800b510:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b514:	f240 1033 	movw	r0, #307	; 0x133
 800b518:	f011 f864 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800b51c:	2231      	movs	r2, #49	; 0x31
 800b51e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b522:	f240 103d 	movw	r0, #317	; 0x13d
 800b526:	f011 f85d 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800b52a:	2231      	movs	r2, #49	; 0x31
 800b52c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b530:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800b534:	f011 f856 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'Q');
 800b538:	2251      	movs	r2, #81	; 0x51
 800b53a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b53e:	f240 1049 	movw	r0, #329	; 0x149
 800b542:	f011 f84f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800b546:	2232      	movs	r2, #50	; 0x32
 800b548:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b54c:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800b550:	f011 f848 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800b554:	2231      	movs	r2, #49	; 0x31
 800b556:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b55a:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800b55e:	f011 f841 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'Q');
 800b562:	2251      	movs	r2, #81	; 0x51
 800b564:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b568:	f240 105f 	movw	r0, #351	; 0x15f
 800b56c:	f011 f83a 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800b570:	2233      	movs	r2, #51	; 0x33
 800b572:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b576:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800b57a:	f011 f833 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800b57e:	2231      	movs	r2, #49	; 0x31
 800b580:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b584:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800b588:	f011 f82c 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'Q');
 800b58c:	2251      	movs	r2, #81	; 0x51
 800b58e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b592:	f240 1075 	movw	r0, #373	; 0x175
 800b596:	f011 f825 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800b59a:	2234      	movs	r2, #52	; 0x34
 800b59c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5a0:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800b5a4:	f011 f81e 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800b5a8:	2231      	movs	r2, #49	; 0x31
 800b5aa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b5b2:	f011 f817 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'Q');
 800b5b6:	2251      	movs	r2, #81	; 0x51
 800b5b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5bc:	f240 108b 	movw	r0, #395	; 0x18b
 800b5c0:	f011 f810 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800b5c4:	2235      	movs	r2, #53	; 0x35
 800b5c6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5ca:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b5ce:	f011 f809 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800b5d2:	2230      	movs	r2, #48	; 0x30
 800b5d4:	21fa      	movs	r1, #250	; 0xfa
 800b5d6:	2041      	movs	r0, #65	; 0x41
 800b5d8:	f011 f804 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800b5dc:	2232      	movs	r2, #50	; 0x32
 800b5de:	21ca      	movs	r1, #202	; 0xca
 800b5e0:	203a      	movs	r0, #58	; 0x3a
 800b5e2:	f010 ffff 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800b5e6:	2235      	movs	r2, #53	; 0x35
 800b5e8:	21ca      	movs	r1, #202	; 0xca
 800b5ea:	2041      	movs	r0, #65	; 0x41
 800b5ec:	f010 fffa 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800b5f0:	2235      	movs	r2, #53	; 0x35
 800b5f2:	2195      	movs	r1, #149	; 0x95
 800b5f4:	203a      	movs	r0, #58	; 0x3a
 800b5f6:	f010 fff5 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800b5fa:	2230      	movs	r2, #48	; 0x30
 800b5fc:	2195      	movs	r1, #149	; 0x95
 800b5fe:	2041      	movs	r0, #65	; 0x41
 800b600:	f010 fff0 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800b604:	2237      	movs	r2, #55	; 0x37
 800b606:	2160      	movs	r1, #96	; 0x60
 800b608:	203a      	movs	r0, #58	; 0x3a
 800b60a:	f010 ffeb 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800b60e:	2235      	movs	r2, #53	; 0x35
 800b610:	2160      	movs	r1, #96	; 0x60
 800b612:	2041      	movs	r0, #65	; 0x41
 800b614:	f010 ffe6 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800b618:	2231      	movs	r2, #49	; 0x31
 800b61a:	212b      	movs	r1, #43	; 0x2b
 800b61c:	2039      	movs	r0, #57	; 0x39
 800b61e:	f010 ffe1 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800b622:	2230      	movs	r2, #48	; 0x30
 800b624:	212b      	movs	r1, #43	; 0x2b
 800b626:	203e      	movs	r0, #62	; 0x3e
 800b628:	f010 ffdc 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800b62c:	2230      	movs	r2, #48	; 0x30
 800b62e:	212b      	movs	r1, #43	; 0x2b
 800b630:	2043      	movs	r0, #67	; 0x43
 800b632:	f010 ffd7 	bl	801c5e4 <TFT_DrawChar>
		TFT_direction = 0x00;
 800b636:	2300      	movs	r3, #0
 800b638:	702b      	strb	r3, [r5, #0]
 800b63a:	bd38      	pop	{r3, r4, r5, pc}
 800b63c:	20005690 	.word	0x20005690
 800b640:	20000210 	.word	0x20000210

0800b644 <CQS_chart>:

void CQS_chart(uint8_t direction, uint8_t *GraphData)
{
 800b644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b648:	ed2d 8b04 	vpush	{d8-d9}
 800b64c:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800b64e:	ad06      	add	r5, sp, #24
 800b650:	2300      	movs	r3, #0
{
 800b652:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800b654:	f825 3d04 	strh.w	r3, [r5, #-4]!
 800b658:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 800b9e0 <CQS_chart+0x39c>
 800b65c:	1e4e      	subs	r6, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800b65e:	2800      	cmp	r0, #0
 800b660:	f040 81ca 	bne.w	800b9f8 <CQS_chart+0x3b4>
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b664:	780b      	ldrb	r3, [r1, #0]
 800b666:	ed9f 9adf 	vldr	s18, [pc, #892]	; 800b9e4 <CQS_chart+0x3a0>
 800b66a:	eddf 8adf 	vldr	s17, [pc, #892]	; 800b9e8 <CQS_chart+0x3a4>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800b66e:	4fdf      	ldr	r7, [pc, #892]	; (800b9ec <CQS_chart+0x3a8>)
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b670:	ee07 3a90 	vmov	s15, r3
 800b674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b678:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800b67c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	2222      	movs	r2, #34	; 0x22
 800b684:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b688:	2018      	movs	r0, #24
 800b68a:	eef0 7a49 	vmov.f32	s15, s18
 800b68e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b696:	edcd 7a03 	vstr	s15, [sp, #12]
 800b69a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b69e:	f010 fcae 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(float)GraphData[1]/100*305, 50, 410, CQS_COLOR_Q2);
 800b6a2:	7863      	ldrb	r3, [r4, #1]
 800b6a4:	ee07 3a90 	vmov	s15, r3
 800b6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ac:	f645 2392 	movw	r3, #23186	; 0x5a92
 800b6b0:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	2232      	movs	r2, #50	; 0x32
 800b6b8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b6bc:	2028      	movs	r0, #40	; 0x28
 800b6be:	eef0 7a49 	vmov.f32	s15, s18
 800b6c2:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b6c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ca:	edcd 7a03 	vstr	s15, [sp, #12]
 800b6ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b6d2:	f010 fc94 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(float)GraphData[2]/100*305, 66, 410, CQS_COLOR_Q3);
 800b6d6:	78a3      	ldrb	r3, [r4, #2]
 800b6d8:	ee07 3a90 	vmov	s15, r3
 800b6dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e0:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800b6e4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	2242      	movs	r2, #66	; 0x42
 800b6ec:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b6f0:	2038      	movs	r0, #56	; 0x38
 800b6f2:	eef0 7a49 	vmov.f32	s15, s18
 800b6f6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b6fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fe:	edcd 7a03 	vstr	s15, [sp, #12]
 800b702:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b706:	f010 fc7a 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(float)GraphData[3]/100*305, 82, 410, CQS_COLOR_Q4);
 800b70a:	78e3      	ldrb	r3, [r4, #3]
 800b70c:	ee07 3a90 	vmov	s15, r3
 800b710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b714:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800b718:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	2252      	movs	r2, #82	; 0x52
 800b720:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b724:	2048      	movs	r0, #72	; 0x48
 800b726:	eef0 7a49 	vmov.f32	s15, s18
 800b72a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b72e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b732:	edcd 7a03 	vstr	s15, [sp, #12]
 800b736:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b73a:	f010 fc60 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(float)GraphData[4]/100*305, 98, 410, CQS_COLOR_Q5);
 800b73e:	7923      	ldrb	r3, [r4, #4]
 800b740:	ee07 3a90 	vmov	s15, r3
 800b744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b748:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800b74c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	2262      	movs	r2, #98	; 0x62
 800b754:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b758:	2058      	movs	r0, #88	; 0x58
 800b75a:	eef0 7a49 	vmov.f32	s15, s18
 800b75e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b766:	edcd 7a03 	vstr	s15, [sp, #12]
 800b76a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b76e:	f010 fc46 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(float)GraphData[5]/100*305, 114, 410, CQS_COLOR_Q6);
 800b772:	7963      	ldrb	r3, [r4, #5]
 800b774:	ee07 3a90 	vmov	s15, r3
 800b778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b77c:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800b780:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	2272      	movs	r2, #114	; 0x72
 800b788:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b78c:	2068      	movs	r0, #104	; 0x68
 800b78e:	eef0 7a49 	vmov.f32	s15, s18
 800b792:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b79a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b79e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b7a2:	f010 fc2c 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(float)GraphData[6]/100*305, 130, 410, CQS_COLOR_Q7);
 800b7a6:	79a3      	ldrb	r3, [r4, #6]
 800b7a8:	ee07 3a90 	vmov	s15, r3
 800b7ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b0:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800b7b4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	2282      	movs	r2, #130	; 0x82
 800b7bc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b7c0:	2078      	movs	r0, #120	; 0x78
 800b7c2:	eef0 7a49 	vmov.f32	s15, s18
 800b7c6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b7ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ce:	edcd 7a03 	vstr	s15, [sp, #12]
 800b7d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b7d6:	f010 fc12 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(float)GraphData[7]/100*305, 146, 410, CQS_COLOR_Q8);
 800b7da:	79e3      	ldrb	r3, [r4, #7]
 800b7dc:	ee07 3a90 	vmov	s15, r3
 800b7e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e4:	f247 5369 	movw	r3, #30057	; 0x7569
 800b7e8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	2292      	movs	r2, #146	; 0x92
 800b7f0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b7f4:	2088      	movs	r0, #136	; 0x88
 800b7f6:	eef0 7a49 	vmov.f32	s15, s18
 800b7fa:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b802:	edcd 7a03 	vstr	s15, [sp, #12]
 800b806:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b80a:	f010 fbf8 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(float)GraphData[8]/100*305, 162, 410, CQS_COLOR_Q9);
 800b80e:	7a23      	ldrb	r3, [r4, #8]
 800b810:	ee07 3a90 	vmov	s15, r3
 800b814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b818:	f24b 6307 	movw	r3, #46599	; 0xb607
 800b81c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	22a2      	movs	r2, #162	; 0xa2
 800b824:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b828:	2098      	movs	r0, #152	; 0x98
 800b82a:	eef0 7a49 	vmov.f32	s15, s18
 800b82e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b836:	edcd 7a03 	vstr	s15, [sp, #12]
 800b83a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b83e:	f010 fbde 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(float)GraphData[9]/100*305, 178, 410, CQS_COLOR_Q10);
 800b842:	7a63      	ldrb	r3, [r4, #9]
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84c:	f64e 6325 	movw	r3, #60965	; 0xee25
 800b850:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	22b2      	movs	r2, #178	; 0xb2
 800b858:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b85c:	20a8      	movs	r0, #168	; 0xa8
 800b85e:	eef0 7a49 	vmov.f32	s15, s18
 800b862:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b86a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b86e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b872:	f010 fbc4 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(float)GraphData[10]/100*305, 194, 410, CQS_COLOR_Q11);
 800b876:	7aa3      	ldrb	r3, [r4, #10]
 800b878:	ee07 3a90 	vmov	s15, r3
 800b87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b880:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800b884:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	22c2      	movs	r2, #194	; 0xc2
 800b88c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b890:	20b8      	movs	r0, #184	; 0xb8
 800b892:	eef0 7a49 	vmov.f32	s15, s18
 800b896:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b89a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b89e:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8a6:	f010 fbaa 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(float)GraphData[11]/100*305, 210, 410, CQS_COLOR_Q12);
 800b8aa:	7ae3      	ldrb	r3, [r4, #11]
 800b8ac:	ee07 3a90 	vmov	s15, r3
 800b8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b4:	f64e 4347 	movw	r3, #60487	; 0xec47
 800b8b8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	22d2      	movs	r2, #210	; 0xd2
 800b8c0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b8c4:	20c8      	movs	r0, #200	; 0xc8
 800b8c6:	eef0 7a49 	vmov.f32	s15, s18
 800b8ca:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b8ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8d2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8da:	f010 fb90 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(float)GraphData[12]/100*305, 226, 410, CQS_COLOR_Q13);
 800b8de:	7b23      	ldrb	r3, [r4, #12]
 800b8e0:	ee07 3a90 	vmov	s15, r3
 800b8e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e8:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800b8ec:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	22e2      	movs	r2, #226	; 0xe2
 800b8f4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b8f8:	20d8      	movs	r0, #216	; 0xd8
 800b8fa:	eef0 7a49 	vmov.f32	s15, s18
 800b8fe:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b906:	edcd 7a03 	vstr	s15, [sp, #12]
 800b90a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b90e:	f010 fb76 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(float)GraphData[13]/100*305, 242, 410, CQS_COLOR_Q14);
 800b912:	7b63      	ldrb	r3, [r4, #13]
 800b914:	ee07 3a90 	vmov	s15, r3
 800b918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91c:	f64a 1347 	movw	r3, #43335	; 0xa947
 800b920:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	22f2      	movs	r2, #242	; 0xf2
 800b928:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b92c:	20e8      	movs	r0, #232	; 0xe8
 800b92e:	eef0 7a49 	vmov.f32	s15, s18
 800b932:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b93a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b93e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b942:	f010 fb5c 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b946:	7ba3      	ldrb	r3, [r4, #14]
 800b948:	ee07 3a90 	vmov	s15, r3
 800b94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b950:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800b954:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b958:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	20f8      	movs	r0, #248	; 0xf8
 800b960:	f44f 73cd 	mov.w	r3, #410	; 0x19a
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b964:	2418      	movs	r4, #24
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b966:	eea7 9a68 	vfms.f32	s18, s14, s17
 800b96a:	eefc 7ac9 	vcvt.u32.f32	s15, s18
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800b96e:	ed9f 9a20 	vldr	s18, [pc, #128]	; 800b9f0 <CQS_chart+0x3ac>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b972:	edcd 7a03 	vstr	s15, [sp, #12]
 800b976:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b97a:	f010 fb40 	bl	801bffe <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800b97e:	481d      	ldr	r0, [pc, #116]	; (800b9f4 <CQS_chart+0x3b0>)
 800b980:	f010 fd66 	bl	801c450 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b984:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b988:	f010 fd68 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b98c:	2063      	movs	r0, #99	; 0x63
 800b98e:	f010 fd6b 	bl	801c468 <TFT_SetBackColor>
			sprintf (buffer, "%d", GraphData[i]);
 800b992:	7872      	ldrb	r2, [r6, #1]
 800b994:	4639      	mov	r1, r7
 800b996:	4628      	mov	r0, r5
 800b998:	f014 f836 	bl	801fa08 <sprintf>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800b99c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800b9a0:	ee07 3a90 	vmov	s15, r3
 800b9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b9ae:	3410      	adds	r4, #16
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	b2a4      	uxth	r4, r4
 800b9b6:	eef0 7a49 	vmov.f32	s15, s18
 800b9ba:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b9be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9c2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b9c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b9ca:	f010 fe63 	bl	801c694 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800b9ce:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800b9d2:	d1de      	bne.n	800b992 <CQS_chart+0x34e>
			X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800b9d4:	b006      	add	sp, #24
 800b9d6:	ecbd 8b04 	vpop	{d8-d9}
 800b9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9de:	bf00      	nop
 800b9e0:	42c80000 	.word	0x42c80000
 800b9e4:	43cd0000 	.word	0x43cd0000
 800b9e8:	43988000 	.word	0x43988000
 800b9ec:	08024679 	.word	0x08024679
 800b9f0:	43c80000 	.word	0x43c80000
 800b9f4:	20000210 	.word	0x20000210
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b9f8:	2801      	cmp	r0, #1
 800b9fa:	4fdf      	ldr	r7, [pc, #892]	; (800bd78 <CQS_chart+0x734>)
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800b9fc:	eddf 8adf 	vldr	s17, [pc, #892]	; 800bd7c <CQS_chart+0x738>
		if(direction == 0x01){TFT_direction = 0x01;} 
 800ba00:	bf0e      	itee	eq
 800ba02:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800ba04:	2302      	movne	r3, #2
 800ba06:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800ba08:	780b      	ldrb	r3, [r1, #0]
 800ba0a:	ed9f 9add 	vldr	s18, [pc, #884]	; 800bd80 <CQS_chart+0x73c>
			sprintf (buffer, "%d", GraphData[i]);
 800ba0e:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800bd90 <CQS_chart+0x74c>
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1a:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800ba1e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	2262      	movs	r2, #98	; 0x62
 800ba26:	23fc      	movs	r3, #252	; 0xfc
 800ba28:	2057      	movs	r0, #87	; 0x57
 800ba2a:	eef0 7a68 	vmov.f32	s15, s17
 800ba2e:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba36:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba3a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba3e:	f010 fade 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(109, 252-(float)GraphData[1]/100*210, 120, 252, CQS_COLOR_Q2);
 800ba42:	7863      	ldrb	r3, [r4, #1]
 800ba44:	ee07 3a90 	vmov	s15, r3
 800ba48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4c:	f645 2392 	movw	r3, #23186	; 0x5a92
 800ba50:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	2278      	movs	r2, #120	; 0x78
 800ba58:	23fc      	movs	r3, #252	; 0xfc
 800ba5a:	206d      	movs	r0, #109	; 0x6d
 800ba5c:	eef0 7a68 	vmov.f32	s15, s17
 800ba60:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba68:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba6c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba70:	f010 fac5 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(131, 252-(float)GraphData[2]/100*210, 142, 252, CQS_COLOR_Q3);
 800ba74:	78a3      	ldrb	r3, [r4, #2]
 800ba76:	ee07 3a90 	vmov	s15, r3
 800ba7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7e:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800ba82:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	228e      	movs	r2, #142	; 0x8e
 800ba8a:	23fc      	movs	r3, #252	; 0xfc
 800ba8c:	2083      	movs	r0, #131	; 0x83
 800ba8e:	eef0 7a68 	vmov.f32	s15, s17
 800ba92:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba9a:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba9e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800baa2:	f010 faac 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(153, 252-(float)GraphData[3]/100*210, 164, 252, CQS_COLOR_Q4);
 800baa6:	78e3      	ldrb	r3, [r4, #3]
 800baa8:	ee07 3a90 	vmov	s15, r3
 800baac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab0:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800bab4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	22a4      	movs	r2, #164	; 0xa4
 800babc:	23fc      	movs	r3, #252	; 0xfc
 800babe:	2099      	movs	r0, #153	; 0x99
 800bac0:	eef0 7a68 	vmov.f32	s15, s17
 800bac4:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bacc:	edcd 7a03 	vstr	s15, [sp, #12]
 800bad0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bad4:	f010 fa93 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(175, 252-(float)GraphData[4]/100*210, 186, 252, CQS_COLOR_Q5);
 800bad8:	7923      	ldrb	r3, [r4, #4]
 800bada:	ee07 3a90 	vmov	s15, r3
 800bade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae2:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800bae6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	22ba      	movs	r2, #186	; 0xba
 800baee:	23fc      	movs	r3, #252	; 0xfc
 800baf0:	20af      	movs	r0, #175	; 0xaf
 800baf2:	eef0 7a68 	vmov.f32	s15, s17
 800baf6:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bafe:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb02:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb06:	f010 fa7a 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(197, 252-(float)GraphData[5]/100*210, 208, 252, CQS_COLOR_Q6);
 800bb0a:	7963      	ldrb	r3, [r4, #5]
 800bb0c:	ee07 3a90 	vmov	s15, r3
 800bb10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb14:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800bb18:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	22d0      	movs	r2, #208	; 0xd0
 800bb20:	23fc      	movs	r3, #252	; 0xfc
 800bb22:	20c5      	movs	r0, #197	; 0xc5
 800bb24:	eef0 7a68 	vmov.f32	s15, s17
 800bb28:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb30:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb34:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb38:	f010 fa61 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(219, 252-(float)GraphData[6]/100*210, 230, 252, CQS_COLOR_Q7);
 800bb3c:	79a3      	ldrb	r3, [r4, #6]
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb46:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800bb4a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	22e6      	movs	r2, #230	; 0xe6
 800bb52:	23fc      	movs	r3, #252	; 0xfc
 800bb54:	20db      	movs	r0, #219	; 0xdb
 800bb56:	eef0 7a68 	vmov.f32	s15, s17
 800bb5a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb62:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb66:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb6a:	f010 fa48 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(241, 252-(float)GraphData[7]/100*210, 252, 252, CQS_COLOR_Q8);
 800bb6e:	79e3      	ldrb	r3, [r4, #7]
 800bb70:	ee07 3a90 	vmov	s15, r3
 800bb74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb78:	f247 5369 	movw	r3, #30057	; 0x7569
 800bb7c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	23fc      	movs	r3, #252	; 0xfc
 800bb84:	461a      	mov	r2, r3
 800bb86:	20f1      	movs	r0, #241	; 0xf1
 800bb88:	eef0 7a68 	vmov.f32	s15, s17
 800bb8c:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb94:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb98:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb9c:	f010 fa2f 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(263, 252-(float)GraphData[8]/100*210, 274, 252, CQS_COLOR_Q9);
 800bba0:	7a23      	ldrb	r3, [r4, #8]
 800bba2:	ee07 3a90 	vmov	s15, r3
 800bba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbaa:	f24b 6307 	movw	r3, #46599	; 0xb607
 800bbae:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bbb8:	23fc      	movs	r3, #252	; 0xfc
 800bbba:	f240 1007 	movw	r0, #263	; 0x107
 800bbbe:	eef0 7a68 	vmov.f32	s15, s17
 800bbc2:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bbc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbca:	edcd 7a03 	vstr	s15, [sp, #12]
 800bbce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bbd2:	f010 fa14 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(285, 252-(float)GraphData[9]/100*210, 296, 252, CQS_COLOR_Q10);
 800bbd6:	7a63      	ldrb	r3, [r4, #9]
 800bbd8:	ee07 3a90 	vmov	s15, r3
 800bbdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe0:	f64e 6325 	movw	r3, #60965	; 0xee25
 800bbe4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bbee:	23fc      	movs	r3, #252	; 0xfc
 800bbf0:	f240 101d 	movw	r0, #285	; 0x11d
 800bbf4:	eef0 7a68 	vmov.f32	s15, s17
 800bbf8:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bbfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc00:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc04:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc08:	f010 f9f9 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(307, 252-(float)GraphData[10]/100*210,318, 252, CQS_COLOR_Q11);
 800bc0c:	7aa3      	ldrb	r3, [r4, #10]
 800bc0e:	ee07 3a90 	vmov	s15, r3
 800bc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc16:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800bc1a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800bc24:	23fc      	movs	r3, #252	; 0xfc
 800bc26:	f240 1033 	movw	r0, #307	; 0x133
 800bc2a:	eef0 7a68 	vmov.f32	s15, s17
 800bc2e:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc36:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc3a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc3e:	f010 f9de 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(329, 252-(float)GraphData[11]/100*210,340, 252, CQS_COLOR_Q12);
 800bc42:	7ae3      	ldrb	r3, [r4, #11]
 800bc44:	ee07 3a90 	vmov	s15, r3
 800bc48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4c:	f64e 4347 	movw	r3, #60487	; 0xec47
 800bc50:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800bc5a:	23fc      	movs	r3, #252	; 0xfc
 800bc5c:	f240 1049 	movw	r0, #329	; 0x149
 800bc60:	eef0 7a68 	vmov.f32	s15, s17
 800bc64:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc6c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc70:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc74:	f010 f9c3 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(351, 252-(float)GraphData[12]/100*210,362, 252, CQS_COLOR_Q13);
 800bc78:	7b23      	ldrb	r3, [r4, #12]
 800bc7a:	ee07 3a90 	vmov	s15, r3
 800bc7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc82:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800bc86:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800bc90:	23fc      	movs	r3, #252	; 0xfc
 800bc92:	f240 105f 	movw	r0, #351	; 0x15f
 800bc96:	eef0 7a68 	vmov.f32	s15, s17
 800bc9a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca2:	edcd 7a03 	vstr	s15, [sp, #12]
 800bca6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bcaa:	f010 f9a8 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
 800bcae:	7b63      	ldrb	r3, [r4, #13]
 800bcb0:	ee07 3a90 	vmov	s15, r3
 800bcb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb8:	f64a 1347 	movw	r3, #43335	; 0xa947
 800bcbc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800bcc6:	23fc      	movs	r3, #252	; 0xfc
 800bcc8:	f240 1075 	movw	r0, #373	; 0x175
 800bccc:	eef0 7a68 	vmov.f32	s15, s17
 800bcd0:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bcd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd8:	edcd 7a03 	vstr	s15, [sp, #12]
 800bcdc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bce0:	f010 f98d 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bce4:	7ba3      	ldrb	r3, [r4, #14]
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcee:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800bcf2:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800bcfc:	23fc      	movs	r3, #252	; 0xfc
 800bcfe:	f240 108b 	movw	r0, #395	; 0x18b
 800bd02:	2457      	movs	r4, #87	; 0x57
 800bd04:	eee7 8a49 	vfms.f32	s17, s14, s18
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bd08:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 800bd84 <CQS_chart+0x740>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bd0c:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800bd10:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800bd88 <CQS_chart+0x744>
 800bd14:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd18:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd1c:	f010 f96f 	bl	801bffe <TFT_FillRectangle>
			sprintf (buffer, "%d", GraphData[i]);
 800bd20:	7872      	ldrb	r2, [r6, #1]
 800bd22:	4641      	mov	r1, r8
 800bd24:	4628      	mov	r0, r5
 800bd26:	f013 fe6f 	bl	801fa08 <sprintf>
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bd2a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd36:	2b09      	cmp	r3, #9
 800bd38:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bd3c:	f04f 0303 	mov.w	r3, #3
 800bd40:	4620      	mov	r0, r4
 800bd42:	462a      	mov	r2, r5
 800bd44:	f104 0416 	add.w	r4, r4, #22
 800bd48:	b2a4      	uxth	r4, r4
 800bd4a:	bf94      	ite	ls
 800bd4c:	eddf 7a0f 	vldrls	s15, [pc, #60]	; 800bd8c <CQS_chart+0x748>
 800bd50:	eef0 7a49 	vmovhi.f32	s15, s18
 800bd54:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bd58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd5c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd60:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd64:	f010 fc96 	bl	801c694 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800bd68:	f240 13a1 	movw	r3, #417	; 0x1a1
 800bd6c:	429c      	cmp	r4, r3
 800bd6e:	d1d7      	bne.n	800bd20 <CQS_chart+0x6dc>
		TFT_direction = 0x00;
 800bd70:	2300      	movs	r3, #0
 800bd72:	703b      	strb	r3, [r7, #0]
}
 800bd74:	e62e      	b.n	800b9d4 <CQS_chart+0x390>
 800bd76:	bf00      	nop
 800bd78:	20005690 	.word	0x20005690
 800bd7c:	437c0000 	.word	0x437c0000
 800bd80:	43520000 	.word	0x43520000
 800bd84:	437a0000 	.word	0x437a0000
 800bd88:	43570000 	.word	0x43570000
 800bd8c:	43730000 	.word	0x43730000
 800bd90:	08024679 	.word	0x08024679

0800bd94 <CQS_Draw>:

void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bd94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bd98:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bd9a:	2363      	movs	r3, #99	; 0x63
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	4688      	mov	r8, r1
 800bda0:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bda2:	213a      	movs	r1, #58	; 0x3a
 800bda4:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	2005      	movs	r0, #5
 800bdac:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bdb0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bdb4:	f010 f923 	bl	801bffe <TFT_FillRectangle>
	CQS_Axes(direction);
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7ff f877 	bl	800aeac <CQS_Axes>
	CQS_Axes_Text(direction);
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f7ff f9e6 	bl	800b190 <CQS_Axes_Text>
	CQS_chart(direction, GraphData);
 800bdc4:	4641      	mov	r1, r8
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7ff fc3c 	bl	800b644 <CQS_chart>
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bdcc:	463b      	mov	r3, r7
 800bdce:	4632      	mov	r2, r6
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	b002      	add	sp, #8
 800bdd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bdda:	f7ff b905 	b.w	800afe8 <CQS_Axes_Measure>

0800bdde <flash_data_read_buff>:
#include "CRC_check.h"

uint64_t flash_data_read_buff(uint32_t flash_addr_buff) 
{ 
	return ( *(__IO uint64_t*) flash_addr_buff);
}
 800bdde:	e9d0 0100 	ldrd	r0, r1, [r0]
 800bde2:	4770      	bx	lr

0800bde4 <CRC_Check>:
uint32_t addr_i;

CRC_Check_StatusTypeDef CRC_Check(uint32_t start_flash_addr, uint32_t flash_size, uint32_t CRC_addr)
{

	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bde4:	4b13      	ldr	r3, [pc, #76]	; (800be34 <CRC_Check+0x50>)
{
 800bde6:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800bdea:	4e13      	ldr	r6, [pc, #76]	; (800be38 <CRC_Check+0x54>)
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bdec:	6018      	str	r0, [r3, #0]
 800bdee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800bdf2:	2400      	movs	r4, #0
 800bdf4:	4281      	cmp	r1, r0
 800bdf6:	d811      	bhi.n	800be1c <CRC_Check+0x38>
 800bdf8:	b104      	cbz	r4, 800bdfc <CRC_Check+0x18>
 800bdfa:	6018      	str	r0, [r3, #0]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bdfc:	e9d2 0100 	ldrd	r0, r1, [r2]
	{
		CRC_buff += flash_data_read_buff(addr_i);
	}
	crcr_flash = flash_data_read_buff(CRC_addr);
 800be00:	4b0e      	ldr	r3, [pc, #56]	; (800be3c <CRC_Check+0x58>)
 800be02:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800be06:	e9d6 0100 	ldrd	r0, r1, [r6]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800be0a:	e9d2 2300 	ldrd	r2, r3, [r2]
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800be0e:	4299      	cmp	r1, r3
 800be10:	bf0a      	itet	eq
 800be12:	4290      	cmpeq	r0, r2
		return	CRC_OK;
	} else
	{
		return	CRC_ERROR;
	}
};
 800be14:	2001      	movne	r0, #1
 800be16:	2000      	moveq	r0, #0
 800be18:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	return ( *(__IO uint64_t*) flash_addr_buff);
 800be1c:	e8f0 8902 	ldrd	r8, r9, [r0], #8
		CRC_buff += flash_data_read_buff(addr_i);
 800be20:	e9d6 4500 	ldrd	r4, r5, [r6]
 800be24:	eb14 0408 	adds.w	r4, r4, r8
 800be28:	eb45 0509 	adc.w	r5, r5, r9
 800be2c:	e9c6 4500 	strd	r4, r5, [r6]
 800be30:	2401      	movs	r4, #1
 800be32:	e7df      	b.n	800bdf4 <CRC_Check+0x10>
 800be34:	20090930 	.word	0x20090930
 800be38:	20004630 	.word	0x20004630
 800be3c:	20004638 	.word	0x20004638

0800be40 <calcNorm560_CRI>:
double L_i_ref ;
double u_i_ref ;
double v_i_ref ;

void calcNorm560_CRI(uint16_t CCT_measure)
{
 800be40:	b508      	push	{r3, lr}
	norm_560_CRI = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800be42:	f7f4 fb87 	bl	8000554 <__aeabi_i2d>
 800be46:	a316      	add	r3, pc, #88	; (adr r3, 800bea0 <calcNorm560_CRI+0x60>)
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	f7f4 fbe8 	bl	8000620 <__aeabi_dmul>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	a114      	add	r1, pc, #80	; (adr r1, 800bea8 <calcNorm560_CRI+0x68>)
 800be56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be5a:	f7f4 fd0b 	bl	8000874 <__aeabi_ddiv>
 800be5e:	ec41 0b10 	vmov	d0, r0, r1
 800be62:	f016 fe01 	bl	8022a68 <exp>
 800be66:	2200      	movs	r2, #0
 800be68:	ec51 0b10 	vmov	r0, r1, d0
 800be6c:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <calcNorm560_CRI+0x58>)
 800be6e:	f7f4 fa23 	bl	80002b8 <__aeabi_dsub>
 800be72:	460b      	mov	r3, r1
 800be74:	4602      	mov	r2, r0
 800be76:	a106      	add	r1, pc, #24	; (adr r1, 800be90 <calcNorm560_CRI+0x50>)
 800be78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be7c:	f7f4 fcfa 	bl	8000874 <__aeabi_ddiv>
 800be80:	f7f4 fec6 	bl	8000c10 <__aeabi_d2f>
 800be84:	4b05      	ldr	r3, [pc, #20]	; (800be9c <calcNorm560_CRI+0x5c>)
 800be86:	6018      	str	r0, [r3, #0]
 800be88:	bd08      	pop	{r3, pc}
 800be8a:	bf00      	nop
 800be8c:	f3af 8000 	nop.w
 800be90:	f9f35846 	.word	0xf9f35846
 800be94:	466ca5d1 	.word	0x466ca5d1
 800be98:	3ff00000 	.word	0x3ff00000
 800be9c:	20090960 	.word	0x20090960
 800bea0:	05ea7ab3 	.word	0x05ea7ab3
 800bea4:	3ea2ca5d 	.word	0x3ea2ca5d
 800bea8:	aba38759 	.word	0xaba38759
 800beac:	3f8d7774 	.word	0x3f8d7774

0800beb0 <calcSref_CRI>:


float calcSref_CRI(int idx, uint16_t CCT_measure)
{
	float ans;
	if (CCT_measure < 5000)
 800beb0:	f241 3387 	movw	r3, #4999	; 0x1387
 800beb4:	4299      	cmp	r1, r3
{
 800beb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beb8:	460d      	mov	r5, r1
 800beba:	ea4f 0080 	mov.w	r0, r0, lsl #2
	if (CCT_measure < 5000)
 800bebe:	d84e      	bhi.n	800bf5e <calcSref_CRI+0xae>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bec0:	4c39      	ldr	r4, [pc, #228]	; (800bfa8 <calcSref_CRI+0xf8>)
 800bec2:	4404      	add	r4, r0
 800bec4:	6820      	ldr	r0, [r4, #0]
 800bec6:	f7f4 fb57 	bl	8000578 <__aeabi_f2d>
 800beca:	a331      	add	r3, pc, #196	; (adr r3, 800bf90 <calcSref_CRI+0xe0>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	f7f4 fba6 	bl	8000620 <__aeabi_dmul>
 800bed4:	4606      	mov	r6, r0
 800bed6:	4628      	mov	r0, r5
 800bed8:	460f      	mov	r7, r1
 800beda:	f7f4 fb3b 	bl	8000554 <__aeabi_i2d>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	4630      	mov	r0, r6
 800bee4:	4639      	mov	r1, r7
 800bee6:	f7f4 fb9b 	bl	8000620 <__aeabi_dmul>
 800beea:	4602      	mov	r2, r0
 800beec:	460b      	mov	r3, r1
 800beee:	a12a      	add	r1, pc, #168	; (adr r1, 800bf98 <calcSref_CRI+0xe8>)
 800bef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bef4:	f7f4 fcbe 	bl	8000874 <__aeabi_ddiv>
 800bef8:	ec41 0b10 	vmov	d0, r0, r1
 800befc:	f016 fdb4 	bl	8022a68 <exp>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf00:	6820      	ldr	r0, [r4, #0]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bf02:	ec57 6b10 	vmov	r6, r7, d0
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf06:	f7f4 fb37 	bl	8000578 <__aeabi_f2d>
 800bf0a:	a321      	add	r3, pc, #132	; (adr r3, 800bf90 <calcSref_CRI+0xe0>)
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	f7f4 fb86 	bl	8000620 <__aeabi_dmul>
 800bf14:	ed9f 1b22 	vldr	d1, [pc, #136]	; 800bfa0 <calcSref_CRI+0xf0>
 800bf18:	ec41 0b10 	vmov	d0, r0, r1
 800bf1c:	f016 fea0 	bl	8022c60 <pow>
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bf20:	2200      	movs	r2, #0
 800bf22:	4b22      	ldr	r3, [pc, #136]	; (800bfac <calcSref_CRI+0xfc>)
 800bf24:	4630      	mov	r0, r6
 800bf26:	4639      	mov	r1, r7
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf28:	ed8d 0b00 	vstr	d0, [sp]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bf2c:	f7f4 f9c4 	bl	80002b8 <__aeabi_dsub>
 800bf30:	f7f4 fe6e 	bl	8000c10 <__aeabi_d2f>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf34:	f7f4 fb20 	bl	8000578 <__aeabi_f2d>
 800bf38:	ed9d 0b00 	vldr	d0, [sp]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4602      	mov	r2, r0
 800bf40:	ec51 0b10 	vmov	r0, r1, d0
 800bf44:	f7f4 fc96 	bl	8000874 <__aeabi_ddiv>
 800bf48:	f7f4 fe62 	bl	8000c10 <__aeabi_d2f>
		ans /= norm_560_CRI;
 800bf4c:	4b18      	ldr	r3, [pc, #96]	; (800bfb0 <calcSref_CRI+0x100>)
 800bf4e:	ee07 0a10 	vmov	s14, r0
 800bf52:	edd3 7a00 	vldr	s15, [r3]
 800bf56:	ee87 0a27 	vdiv.f32	s0, s14, s15
	else
	{
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
	}
	return ans;
}
 800bf5a:	b003      	add	sp, #12
 800bf5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
 800bf5e:	4a15      	ldr	r2, [pc, #84]	; (800bfb4 <calcSref_CRI+0x104>)
 800bf60:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <calcSref_CRI+0x108>)
 800bf62:	4916      	ldr	r1, [pc, #88]	; (800bfbc <calcSref_CRI+0x10c>)
 800bf64:	4403      	add	r3, r0
 800bf66:	4401      	add	r1, r0
 800bf68:	4410      	add	r0, r2
 800bf6a:	4a15      	ldr	r2, [pc, #84]	; (800bfc0 <calcSref_CRI+0x110>)
 800bf6c:	ed91 7a00 	vldr	s14, [r1]
 800bf70:	edd2 7a00 	vldr	s15, [r2]
 800bf74:	ed90 0a00 	vldr	s0, [r0]
 800bf78:	eea7 0a27 	vfma.f32	s0, s14, s15
 800bf7c:	ed93 7a00 	vldr	s14, [r3]
 800bf80:	4b10      	ldr	r3, [pc, #64]	; (800bfc4 <calcSref_CRI+0x114>)
 800bf82:	edd3 7a00 	vldr	s15, [r3]
 800bf86:	eea7 0a27 	vfma.f32	s0, s14, s15
	return ans;
 800bf8a:	e7e6      	b.n	800bf5a <calcSref_CRI+0xaa>
 800bf8c:	f3af 8000 	nop.w
 800bf90:	e826d695 	.word	0xe826d695
 800bf94:	3e112e0b 	.word	0x3e112e0b
 800bf98:	aba38759 	.word	0xaba38759
 800bf9c:	3f8d7774 	.word	0x3f8d7774
 800bfa0:	00000000 	.word	0x00000000
 800bfa4:	c0140000 	.word	0xc0140000
 800bfa8:	20054938 	.word	0x20054938
 800bfac:	3ff00000 	.word	0x3ff00000
 800bfb0:	20090960 	.word	0x20090960
 800bfb4:	2004e92c 	.word	0x2004e92c
 800bfb8:	2005092c 	.word	0x2005092c
 800bfbc:	2004f92c 	.word	0x2004f92c
 800bfc0:	20004640 	.word	0x20004640
 800bfc4:	20004644 	.word	0x20004644

0800bfc8 <CRI_func>:
		double x_i_ref = 0;
		double y_i_ref = 0;
		double z_i_ref = 0;

void CRI_func(uint16_t CCT_measure, float *Rabs)
{
 800bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	ed2d 8b08 	vpush	{d8-d11}
 800bfd0:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800bfd4:	b083      	sub	sp, #12
	int16_t Ra_temp = 0, Rall_temp = 0, R9_temp = 0;
	float s_ref_CRI[1024] = {0};
 800bfd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
{
 800bfda:	900c      	str	r0, [sp, #48]	; 0x30
 800bfdc:	468a      	mov	sl, r1
	float s_ref_CRI[1024] = {0};
 800bfde:	a822      	add	r0, sp, #136	; 0x88
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	f013 fd08 	bl	801f9f6 <memset>
	float CRI_R_temp[1024] = {0};
 800bfe6:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800bfea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bfee:	2100      	movs	r1, #0
 800bff0:	3008      	adds	r0, #8
 800bff2:	f013 fd00 	bl	801f9f6 <memset>

	memset(Ri_temp, 0, sizeof(Ri_temp));
 800bff6:	2278      	movs	r2, #120	; 0x78
 800bff8:	2100      	movs	r1, #0
 800bffa:	48c1      	ldr	r0, [pc, #772]	; (800c300 <CRI_func+0x338>)
 800bffc:	f013 fcfb 	bl	801f9f6 <memset>
	double y_ref = 0;
	double z_ref = 0;
	double u_ref = 0;
	double v_ref = 0;

	if (CCT_measure < 5000)
 800c000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c002:	f241 3387 	movw	r3, #4999	; 0x1387
 800c006:	429a      	cmp	r2, r3
 800c008:	f200 8514 	bhi.w	800ca34 <CRI_func+0xa6c>
	{
		calcNorm560_CRI(CCT_measure);
 800c00c:	4610      	mov	r0, r2
 800c00e:	f7ff ff17 	bl	800be40 <calcNorm560_CRI>
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
	}
	
	
	float u_test = colorimetry_uv[0];	
 800c012:	4bbc      	ldr	r3, [pc, #752]	; (800c304 <CRI_func+0x33c>)
	float v_test = colorimetry_uv[1];
	
	bar_CRI = 0.1;
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c014:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800c308 <CRI_func+0x340>
	float u_test = colorimetry_uv[0];	
 800c018:	edd3 7a00 	vldr	s15, [r3]
	bar_CRI = 0.1;
 800c01c:	a1b2      	add	r1, pc, #712	; (adr r1, 800c2e8 <CRI_func+0x320>)
 800c01e:	e9d1 0100 	ldrd	r0, r1, [r1]
	float u_test = colorimetry_uv[0];	
 800c022:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
	float v_test = colorimetry_uv[1];
 800c026:	edd3 7a01 	vldr	s15, [r3, #4]
	bar_CRI = 0.1;
 800c02a:	4bb8      	ldr	r3, [pc, #736]	; (800c30c <CRI_func+0x344>)
	float v_test = colorimetry_uv[1];
 800c02c:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
	bar_CRI = 0.1;
 800c030:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c034:	210d      	movs	r1, #13
 800c036:	2055      	movs	r0, #85	; 0x55
 800c038:	f007 f83e 	bl	80130b8 <GUI_Bar_Measure>
	
	for (uint16_t y = 0; y < 1024; y++){
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c03c:	4bb4      	ldr	r3, [pc, #720]	; (800c310 <CRI_func+0x348>)
 800c03e:	ed93 7a00 	vldr	s14, [r3]
 800c042:	4bb4      	ldr	r3, [pc, #720]	; (800c314 <CRI_func+0x34c>)
 800c044:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 800c048:	ecfa 6a01 	vldmia	sl!, {s13}
 800c04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t y = 0; y < 1024; y++){
 800c050:	4552      	cmp	r2, sl
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c052:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t y = 0; y < 1024; y++){
 800c056:	d1f7      	bne.n	800c048 <CRI_func+0x80>
 800c058:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 800c2f0 <CRI_func+0x328>
 800c05c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800c060:	eeb0 8a47 	vmov.f32	s16, s14
 800c064:	eef0 8a67 	vmov.f32	s17, s15
 800c068:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800c06c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c070:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c074:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c078:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c07c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c080:	2300      	movs	r3, #0
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	9310      	str	r3, [sp, #64]	; 0x40
 800c086:	9311      	str	r3, [sp, #68]	; 0x44
	}
	
	for (uint8_t i = 0; i < 15; i++)
	{
		bar_CRI += 0.05;
 800c088:	4ca0      	ldr	r4, [pc, #640]	; (800c30c <CRI_func+0x344>)
		for (int j = 0; j < 1024; j++)
		{
			if (i == 0)
			{
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c08a:	4fa3      	ldr	r7, [pc, #652]	; (800c318 <CRI_func+0x350>)
 800c08c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800c314 <CRI_func+0x34c>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c090:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800c340 <CRI_func+0x378>
		bar_CRI += 0.05;
 800c094:	a398      	add	r3, pc, #608	; (adr r3, 800c2f8 <CRI_func+0x330>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c09e:	f7f4 f90d 	bl	80002bc <__adddf3>
 800c0a2:	e9c4 0100 	strd	r0, r1, [r4]
		GUI_Bar_Measure(85, 13, bar_CRI);
 800c0a6:	f7f4 fdb3 	bl	8000c10 <__aeabi_d2f>
 800c0aa:	210d      	movs	r1, #13
 800c0ac:	ee00 0a10 	vmov	s0, r0
 800c0b0:	2055      	movs	r0, #85	; 0x55
 800c0b2:	f007 f801 	bl	80130b8 <GUI_Bar_Measure>
		 x_i_test = 0;
 800c0b6:	4b99      	ldr	r3, [pc, #612]	; (800c31c <CRI_func+0x354>)
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c0b8:	4899      	ldr	r0, [pc, #612]	; (800c320 <CRI_func+0x358>)
		 x_i_test = 0;
 800c0ba:	ed83 8b00 	vstr	d8, [r3]
		 y_i_test = 0;
 800c0be:	4b99      	ldr	r3, [pc, #612]	; (800c324 <CRI_func+0x35c>)
 800c0c0:	ed83 8b00 	vstr	d8, [r3]
		 z_i_test = 0;
 800c0c4:	4b98      	ldr	r3, [pc, #608]	; (800c328 <CRI_func+0x360>)
 800c0c6:	ed83 8b00 	vstr	d8, [r3]
		 x_i_ref = 0;
 800c0ca:	4b98      	ldr	r3, [pc, #608]	; (800c32c <CRI_func+0x364>)
 800c0cc:	ed83 8b00 	vstr	d8, [r3]
		 y_i_ref = 0;
 800c0d0:	4b97      	ldr	r3, [pc, #604]	; (800c330 <CRI_func+0x368>)
 800c0d2:	ed83 8b00 	vstr	d8, [r3]
		 z_i_ref = 0;
 800c0d6:	4b97      	ldr	r3, [pc, #604]	; (800c334 <CRI_func+0x36c>)
 800c0d8:	ed83 8b00 	vstr	d8, [r3]
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c0dc:	9b00      	ldr	r3, [sp, #0]
 800c0de:	f50d 5284 	add.w	r2, sp, #4224	; 0x1080
 800c0e2:	3208      	adds	r2, #8
 800c0e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0e8:	eb00 3003 	add.w	r0, r0, r3, lsl #12
 800c0ec:	f002 fdd4 	bl	800ec98 <Calibration_Load_Pack>
 800c0f0:	2400      	movs	r4, #0
		for (int j = 0; j < 1024; j++)
 800c0f2:	4625      	mov	r5, r4
 800c0f4:	f89d 3000 	ldrb.w	r3, [sp]
 800c0f8:	930d      	str	r3, [sp, #52]	; 0x34
			if (i == 0)
 800c0fa:	9b00      	ldr	r3, [sp, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d150      	bne.n	800c1a2 <CRI_func+0x1da>
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c100:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c102:	4628      	mov	r0, r5
 800c104:	f7ff fed4 	bl	800beb0 <calcSref_CRI>
 800c108:	ab22      	add	r3, sp, #136	; 0x88
 800c10a:	4423      	add	r3, r4
 800c10c:	ed83 0a00 	vstr	s0, [r3]
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c110:	19e3      	adds	r3, r4, r7
 800c112:	edd3 9a00 	vldr	s19, [r3]
 800c116:	eb09 0304 	add.w	r3, r9, r4
 800c11a:	edd3 7a00 	vldr	s15, [r3]
 800c11e:	ee69 7aa7 	vmul.f32	s15, s19, s15
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c122:	eeb0 9a40 	vmov.f32	s18, s0
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c126:	ee17 0a90 	vmov	r0, s15
 800c12a:	f7f4 fa25 	bl	8000578 <__aeabi_f2d>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c136:	f7f4 f8c1 	bl	80002bc <__adddf3>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c13a:	eb04 0308 	add.w	r3, r4, r8
 800c13e:	edd3 7a00 	vldr	s15, [r3]
 800c142:	ee69 7a27 	vmul.f32	s15, s18, s15
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c146:	e9cd 0104 	strd	r0, r1, [sp, #16]
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c14a:	ee17 0a90 	vmov	r0, s15
 800c14e:	f7f4 fa13 	bl	8000578 <__aeabi_f2d>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c15a:	f7f4 f8af 	bl	80002bc <__adddf3>
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c15e:	ee69 7a29 	vmul.f32	s15, s18, s19
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c162:	e9cd 0108 	strd	r0, r1, [sp, #32]
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c166:	ee17 0a90 	vmov	r0, s15
 800c16a:	f7f4 fa05 	bl	8000578 <__aeabi_f2d>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c176:	f7f4 f8a1 	bl	80002bc <__adddf3>
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c17a:	4b6f      	ldr	r3, [pc, #444]	; (800c338 <CRI_func+0x370>)
 800c17c:	4423      	add	r3, r4
 800c17e:	edd3 7a00 	vldr	s15, [r3]
 800c182:	ee69 7a27 	vmul.f32	s15, s18, s15
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c186:	e9cd 0106 	strd	r0, r1, [sp, #24]
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c18a:	ee17 0a90 	vmov	r0, s15
 800c18e:	f7f4 f9f3 	bl	8000578 <__aeabi_f2d>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c19a:	f7f4 f88f 	bl	80002bc <__adddf3>
 800c19e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			}

			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1a2:	f50d 5384 	add.w	r3, sp, #4224	; 0x1080
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	4423      	add	r3, r4
 800c1aa:	ed93 9a00 	vldr	s18, [r3]
 800c1ae:	4e5b      	ldr	r6, [pc, #364]	; (800c31c <CRI_func+0x354>)
 800c1b0:	eb09 0304 	add.w	r3, r9, r4
 800c1b4:	edd3 9a00 	vldr	s19, [r3]
 800c1b8:	eb04 0308 	add.w	r3, r4, r8
 800c1bc:	ee69 9a29 	vmul.f32	s19, s18, s19
 800c1c0:	ed93 ba00 	vldr	s22, [r3]
 800c1c4:	ee69 7a8b 	vmul.f32	s15, s19, s22
		for (int j = 0; j < 1024; j++)
 800c1c8:	3501      	adds	r5, #1
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1ca:	ee17 0a90 	vmov	r0, s15
 800c1ce:	f7f4 f9d3 	bl	8000578 <__aeabi_f2d>
 800c1d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1d6:	f7f4 f871 	bl	80002bc <__adddf3>
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1da:	19e3      	adds	r3, r4, r7
 800c1dc:	edd3 aa00 	vldr	s21, [r3]
 800c1e0:	ee69 7aaa 	vmul.f32	s15, s19, s21
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1e4:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1e8:	4e4e      	ldr	r6, [pc, #312]	; (800c324 <CRI_func+0x35c>)
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1ee:	ee17 0a90 	vmov	r0, s15
 800c1f2:	f7f4 f9c1 	bl	8000578 <__aeabi_f2d>
 800c1f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1fa:	f7f4 f85f 	bl	80002bc <__adddf3>
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c1fe:	4b4e      	ldr	r3, [pc, #312]	; (800c338 <CRI_func+0x370>)
 800c200:	4423      	add	r3, r4
 800c202:	ed93 aa00 	vldr	s20, [r3]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c206:	4682      	mov	sl, r0
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c208:	ee69 7a8a 	vmul.f32	s15, s19, s20
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c20c:	468b      	mov	fp, r1
 800c20e:	e9c6 ab00 	strd	sl, fp, [r6]
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c212:	4e45      	ldr	r6, [pc, #276]	; (800c328 <CRI_func+0x360>)
 800c214:	ee17 0a90 	vmov	r0, s15
 800c218:	f7f4 f9ae 	bl	8000578 <__aeabi_f2d>
 800c21c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c220:	f7f4 f84c 	bl	80002bc <__adddf3>

			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c224:	ab22      	add	r3, sp, #136	; 0x88
 800c226:	4423      	add	r3, r4
 800c228:	edd3 7a00 	vldr	s15, [r3]
 800c22c:	ee29 9a27 	vmul.f32	s18, s18, s15
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c230:	e9c6 0100 	strd	r0, r1, [r6]
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c234:	ee6b 7a09 	vmul.f32	s15, s22, s18
 800c238:	4e3c      	ldr	r6, [pc, #240]	; (800c32c <CRI_func+0x364>)
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c23a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c23e:	ee17 0a90 	vmov	r0, s15
 800c242:	f7f4 f999 	bl	8000578 <__aeabi_f2d>
 800c246:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c24a:	f7f4 f837 	bl	80002bc <__adddf3>
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c24e:	ee6a 7a89 	vmul.f32	s15, s21, s18
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c252:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c256:	4e36      	ldr	r6, [pc, #216]	; (800c330 <CRI_func+0x368>)
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c258:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c25c:	ee17 0a90 	vmov	r0, s15
 800c260:	f7f4 f98a 	bl	8000578 <__aeabi_f2d>
 800c264:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c268:	f7f4 f828 	bl	80002bc <__adddf3>
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c26c:	ee6a 7a09 	vmul.f32	s15, s20, s18
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c270:	e9c6 0100 	strd	r0, r1, [r6]
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c274:	4e2f      	ldr	r6, [pc, #188]	; (800c334 <CRI_func+0x36c>)
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c276:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c27a:	ee17 0a90 	vmov	r0, s15
 800c27e:	f7f4 f97b 	bl	8000578 <__aeabi_f2d>
 800c282:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c286:	f7f4 f819 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800c28a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c28e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c292:	e9c6 0100 	strd	r0, r1, [r6]
 800c296:	f104 0404 	add.w	r4, r4, #4
		for (int j = 0; j < 1024; j++)
 800c29a:	f47f af2b 	bne.w	800c0f4 <CRI_func+0x12c>
		}
		if (i == 0) 
 800c29e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f040 8089 	bne.w	800c3b8 <CRI_func+0x3f0>
		{
			k_ref = 100 / y_ref;
 800c2a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	4923      	ldr	r1, [pc, #140]	; (800c33c <CRI_func+0x374>)
 800c2ae:	f7f4 fae1 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800c2b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			k_ref = 100 / y_ref;
 800c2b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
			k_test = 100 / k_test;
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	491f      	ldr	r1, [pc, #124]	; (800c33c <CRI_func+0x374>)
 800c2be:	f7f4 fad9 	bl	8000874 <__aeabi_ddiv>
			x_ref *= k_ref;
 800c2c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_test = 100 / k_test;
 800c2c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
			x_ref *= k_ref;
 800c2ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2ce:	f7f4 f9a7 	bl	8000620 <__aeabi_dmul>
			y_ref *= k_ref;
 800c2d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			x_ref *= k_ref;
 800c2d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
			y_ref *= k_ref;
 800c2da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2de:	f7f4 f99f 	bl	8000620 <__aeabi_dmul>
			z_ref *= k_ref;
 800c2e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2e6:	e02d      	b.n	800c344 <CRI_func+0x37c>
 800c2e8:	9999999a 	.word	0x9999999a
 800c2ec:	3fb99999 	.word	0x3fb99999
	...
 800c2f8:	9999999a 	.word	0x9999999a
 800c2fc:	3fa99999 	.word	0x3fa99999
 800c300:	200909c0 	.word	0x200909c0
 800c304:	2008f520 	.word	0x2008f520
 800c308:	3dcccccd 	.word	0x3dcccccd
 800c30c:	20090970 	.word	0x20090970
 800c310:	200958ac 	.word	0x200958ac
 800c314:	2000465c 	.word	0x2000465c
 800c318:	20052930 	.word	0x20052930
 800c31c:	20005668 	.word	0x20005668
 800c320:	0811b040 	.word	0x0811b040
 800c324:	20005678 	.word	0x20005678
 800c328:	20005688 	.word	0x20005688
 800c32c:	20005660 	.word	0x20005660
 800c330:	20005670 	.word	0x20005670
 800c334:	20005680 	.word	0x20005680
 800c338:	2008d504 	.word	0x2008d504
 800c33c:	40590000 	.word	0x40590000
 800c340:	2008a504 	.word	0x2008a504
			y_ref *= k_ref;
 800c344:	e9cd 0106 	strd	r0, r1, [sp, #24]
			z_ref *= k_ref;
 800c348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c34c:	f7f4 f968 	bl	8000620 <__aeabi_dmul>
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c350:	2200      	movs	r2, #0
			z_ref *= k_ref;
 800c352:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c356:	4bb7      	ldr	r3, [pc, #732]	; (800c634 <CRI_func+0x66c>)
 800c358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c35c:	f7f4 f960 	bl	8000620 <__aeabi_dmul>
 800c360:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c364:	f7f3 ffaa 	bl	80002bc <__adddf3>
 800c368:	2200      	movs	r2, #0
 800c36a:	4604      	mov	r4, r0
 800c36c:	460d      	mov	r5, r1
 800c36e:	4bb2      	ldr	r3, [pc, #712]	; (800c638 <CRI_func+0x670>)
 800c370:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c374:	f7f4 f954 	bl	8000620 <__aeabi_dmul>
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f3 ff9c 	bl	80002bc <__adddf3>
 800c384:	2200      	movs	r2, #0
 800c386:	4604      	mov	r4, r0
 800c388:	460d      	mov	r5, r1
 800c38a:	4bac      	ldr	r3, [pc, #688]	; (800c63c <CRI_func+0x674>)
 800c38c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c390:	f7f4 f946 	bl	8000620 <__aeabi_dmul>
 800c394:	4622      	mov	r2, r4
 800c396:	462b      	mov	r3, r5
 800c398:	f7f4 fa6c 	bl	8000874 <__aeabi_ddiv>
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c39c:	2200      	movs	r2, #0
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c39e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c3a2:	4ba7      	ldr	r3, [pc, #668]	; (800c640 <CRI_func+0x678>)
 800c3a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3a8:	f7f4 f93a 	bl	8000620 <__aeabi_dmul>
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	462b      	mov	r3, r5
 800c3b0:	f7f4 fa60 	bl	8000874 <__aeabi_ddiv>
 800c3b4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

		}	
		x_i_test *= k_test;	
 800c3b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c0:	f7f4 f92e 	bl	8000620 <__aeabi_dmul>
 800c3c4:	4b9f      	ldr	r3, [pc, #636]	; (800c644 <CRI_func+0x67c>)
 800c3c6:	4680      	mov	r8, r0
 800c3c8:	4689      	mov	r9, r1
 800c3ca:	e9c3 8900 	strd	r8, r9, [r3]
		y_i_test *= k_test;
 800c3ce:	4652      	mov	r2, sl
 800c3d0:	465b      	mov	r3, fp
 800c3d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3d6:	f7f4 f923 	bl	8000620 <__aeabi_dmul>
 800c3da:	4b9b      	ldr	r3, [pc, #620]	; (800c648 <CRI_func+0x680>)
 800c3dc:	4682      	mov	sl, r0
 800c3de:	468b      	mov	fp, r1
 800c3e0:	e9c3 ab00 	strd	sl, fp, [r3]
		z_i_test *= k_test;
 800c3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3e8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c3ec:	f7f4 f918 	bl	8000620 <__aeabi_dmul>
 800c3f0:	4b96      	ldr	r3, [pc, #600]	; (800c64c <CRI_func+0x684>)
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	460d      	mov	r5, r1
 800c3f6:	e9c3 4500 	strd	r4, r5, [r3]
		
		x_i_ref *= k_ref;
 800c3fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3fe:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c402:	f7f4 f90d 	bl	8000620 <__aeabi_dmul>
 800c406:	4b92      	ldr	r3, [pc, #584]	; (800c650 <CRI_func+0x688>)
 800c408:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800c40c:	e9c3 0100 	strd	r0, r1, [r3]
		y_i_ref *= k_ref;
 800c410:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c418:	f7f4 f902 	bl	8000620 <__aeabi_dmul>
 800c41c:	4b8d      	ldr	r3, [pc, #564]	; (800c654 <CRI_func+0x68c>)
 800c41e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c422:	e9c3 0100 	strd	r0, r1, [r3]
		z_i_ref *= k_ref;	
 800c426:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c42a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42e:	f7f4 f8f7 	bl	8000620 <__aeabi_dmul>
 800c432:	4b89      	ldr	r3, [pc, #548]	; (800c658 <CRI_func+0x690>)
 800c434:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800c438:	e9c3 0100 	strd	r0, r1, [r3]
	
		 u_test_s = 4 * x_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c43c:	2200      	movs	r2, #0
 800c43e:	4b7d      	ldr	r3, [pc, #500]	; (800c634 <CRI_func+0x66c>)
 800c440:	4650      	mov	r0, sl
 800c442:	4659      	mov	r1, fp
 800c444:	f7f4 f8ec 	bl	8000620 <__aeabi_dmul>
 800c448:	4642      	mov	r2, r8
 800c44a:	464b      	mov	r3, r9
 800c44c:	f7f3 ff36 	bl	80002bc <__adddf3>
 800c450:	2200      	movs	r2, #0
 800c452:	4606      	mov	r6, r0
 800c454:	460f      	mov	r7, r1
 800c456:	4b78      	ldr	r3, [pc, #480]	; (800c638 <CRI_func+0x670>)
 800c458:	4620      	mov	r0, r4
 800c45a:	4629      	mov	r1, r5
 800c45c:	f7f4 f8e0 	bl	8000620 <__aeabi_dmul>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4630      	mov	r0, r6
 800c466:	4639      	mov	r1, r7
 800c468:	f7f3 ff28 	bl	80002bc <__adddf3>
 800c46c:	2200      	movs	r2, #0
 800c46e:	4604      	mov	r4, r0
 800c470:	460d      	mov	r5, r1
 800c472:	4b72      	ldr	r3, [pc, #456]	; (800c63c <CRI_func+0x674>)
 800c474:	4640      	mov	r0, r8
 800c476:	4649      	mov	r1, r9
 800c478:	f7f4 f8d2 	bl	8000620 <__aeabi_dmul>
 800c47c:	4622      	mov	r2, r4
 800c47e:	462b      	mov	r3, r5
 800c480:	f7f4 f9f8 	bl	8000874 <__aeabi_ddiv>
 800c484:	4b75      	ldr	r3, [pc, #468]	; (800c65c <CRI_func+0x694>)
 800c486:	4680      	mov	r8, r0
 800c488:	4689      	mov	r9, r1
 800c48a:	e9c3 8900 	strd	r8, r9, [r3]
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c48e:	2200      	movs	r2, #0
 800c490:	4b6b      	ldr	r3, [pc, #428]	; (800c640 <CRI_func+0x678>)
 800c492:	4650      	mov	r0, sl
 800c494:	4659      	mov	r1, fp
 800c496:	f7f4 f8c3 	bl	8000620 <__aeabi_dmul>
 800c49a:	4622      	mov	r2, r4
 800c49c:	462b      	mov	r3, r5
 800c49e:	f7f4 f9e9 	bl	8000874 <__aeabi_ddiv>
 800c4a2:	4b6f      	ldr	r3, [pc, #444]	; (800c660 <CRI_func+0x698>)
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	460f      	mov	r7, r1
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4a8:	ec4b ab10 	vmov	d0, sl, fp
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c4ac:	e9c3 6700 	strd	r6, r7, [r3]
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4b0:	f016 f99a 	bl	80227e8 <cbrt>
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	ec51 0b10 	vmov	r0, r1, d0
 800c4ba:	4b6a      	ldr	r3, [pc, #424]	; (800c664 <CRI_func+0x69c>)
 800c4bc:	f7f4 f8b0 	bl	8000620 <__aeabi_dmul>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4b69      	ldr	r3, [pc, #420]	; (800c668 <CRI_func+0x6a0>)
 800c4c4:	f7f3 fef8 	bl	80002b8 <__aeabi_dsub>
 800c4c8:	4b68      	ldr	r3, [pc, #416]	; (800c66c <CRI_func+0x6a4>)
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c4ca:	2200      	movs	r2, #0
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4cc:	e9c3 0100 	strd	r0, r1, [r3]
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c4d0:	4b67      	ldr	r3, [pc, #412]	; (800c670 <CRI_func+0x6a8>)
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4d2:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c4d6:	f7f4 f8a3 	bl	8000620 <__aeabi_dmul>
 800c4da:	4604      	mov	r4, r0
 800c4dc:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c4de:	460d      	mov	r5, r1
 800c4e0:	f7f4 f84a 	bl	8000578 <__aeabi_f2d>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	f7f3 fee4 	bl	80002b8 <__aeabi_dsub>
 800c4f0:	4622      	mov	r2, r4
 800c4f2:	462b      	mov	r3, r5
 800c4f4:	f7f4 f894 	bl	8000620 <__aeabi_dmul>
 800c4f8:	4b5e      	ldr	r3, [pc, #376]	; (800c674 <CRI_func+0x6ac>)
 800c4fa:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c4fe:	e9c3 0100 	strd	r0, r1, [r3]
		 v_i_test = 13 * L_i_test * (v_test_s - v_test);
 800c502:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c504:	f7f4 f838 	bl	8000578 <__aeabi_f2d>
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	4630      	mov	r0, r6
 800c50e:	4639      	mov	r1, r7
 800c510:	f7f3 fed2 	bl	80002b8 <__aeabi_dsub>
 800c514:	4622      	mov	r2, r4
 800c516:	462b      	mov	r3, r5
 800c518:	f7f4 f882 	bl	8000620 <__aeabi_dmul>
 800c51c:	4b56      	ldr	r3, [pc, #344]	; (800c678 <CRI_func+0x6b0>)
 800c51e:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800c522:	e9c3 0100 	strd	r0, r1, [r3]

		 u_ref_s = 4 * x_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c526:	2200      	movs	r2, #0
 800c528:	4b42      	ldr	r3, [pc, #264]	; (800c634 <CRI_func+0x66c>)
 800c52a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c52e:	f7f4 f877 	bl	8000620 <__aeabi_dmul>
 800c532:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c536:	f7f3 fec1 	bl	80002bc <__adddf3>
 800c53a:	2200      	movs	r2, #0
 800c53c:	4604      	mov	r4, r0
 800c53e:	460d      	mov	r5, r1
 800c540:	4b3d      	ldr	r3, [pc, #244]	; (800c638 <CRI_func+0x670>)
 800c542:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800c546:	f7f4 f86b 	bl	8000620 <__aeabi_dmul>
 800c54a:	4602      	mov	r2, r0
 800c54c:	460b      	mov	r3, r1
 800c54e:	4620      	mov	r0, r4
 800c550:	4629      	mov	r1, r5
 800c552:	f7f3 feb3 	bl	80002bc <__adddf3>
 800c556:	2200      	movs	r2, #0
 800c558:	4606      	mov	r6, r0
 800c55a:	460f      	mov	r7, r1
 800c55c:	4b37      	ldr	r3, [pc, #220]	; (800c63c <CRI_func+0x674>)
 800c55e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c562:	f7f4 f85d 	bl	8000620 <__aeabi_dmul>
 800c566:	4632      	mov	r2, r6
 800c568:	463b      	mov	r3, r7
 800c56a:	f7f4 f983 	bl	8000874 <__aeabi_ddiv>
 800c56e:	4b43      	ldr	r3, [pc, #268]	; (800c67c <CRI_func+0x6b4>)
 800c570:	4604      	mov	r4, r0
 800c572:	460d      	mov	r5, r1
 800c574:	e9c3 4500 	strd	r4, r5, [r3]
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c578:	2200      	movs	r2, #0
 800c57a:	4b31      	ldr	r3, [pc, #196]	; (800c640 <CRI_func+0x678>)
 800c57c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c580:	f7f4 f84e 	bl	8000620 <__aeabi_dmul>
 800c584:	4632      	mov	r2, r6
 800c586:	463b      	mov	r3, r7
 800c588:	f7f4 f974 	bl	8000874 <__aeabi_ddiv>
 800c58c:	4b3c      	ldr	r3, [pc, #240]	; (800c680 <CRI_func+0x6b8>)
 800c58e:	4682      	mov	sl, r0
 800c590:	468b      	mov	fp, r1
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c592:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c596:	e9c3 ab00 	strd	sl, fp, [r3]
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c59a:	f016 f925 	bl	80227e8 <cbrt>
 800c59e:	2200      	movs	r2, #0
 800c5a0:	ec51 0b10 	vmov	r0, r1, d0
 800c5a4:	4b2f      	ldr	r3, [pc, #188]	; (800c664 <CRI_func+0x69c>)
 800c5a6:	f7f4 f83b 	bl	8000620 <__aeabi_dmul>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	4b2e      	ldr	r3, [pc, #184]	; (800c668 <CRI_func+0x6a0>)
 800c5ae:	f7f3 fe83 	bl	80002b8 <__aeabi_dsub>
 800c5b2:	4b34      	ldr	r3, [pc, #208]	; (800c684 <CRI_func+0x6bc>)
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	460f      	mov	r7, r1
 800c5b8:	e9c3 6700 	strd	r6, r7, [r3]
		 u_i_ref = 13 * L_i_ref * (u_ref_s - u_ref);
 800c5bc:	2200      	movs	r2, #0
 800c5be:	4b2c      	ldr	r3, [pc, #176]	; (800c670 <CRI_func+0x6a8>)
 800c5c0:	f7f4 f82e 	bl	8000620 <__aeabi_dmul>
 800c5c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	4689      	mov	r9, r1
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	f7f3 fe72 	bl	80002b8 <__aeabi_dsub>
 800c5d4:	4642      	mov	r2, r8
 800c5d6:	464b      	mov	r3, r9
 800c5d8:	f7f4 f822 	bl	8000620 <__aeabi_dmul>
 800c5dc:	4b2a      	ldr	r3, [pc, #168]	; (800c688 <CRI_func+0x6c0>)
 800c5de:	4604      	mov	r4, r0
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	e9c3 4500 	strd	r4, r5, [r3]
		 v_i_ref = 13 * L_i_ref * (v_ref_s - v_ref);
 800c5e6:	4650      	mov	r0, sl
 800c5e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c5ec:	4659      	mov	r1, fp
 800c5ee:	f7f3 fe63 	bl	80002b8 <__aeabi_dsub>
 800c5f2:	4642      	mov	r2, r8
 800c5f4:	464b      	mov	r3, r9
 800c5f6:	f7f4 f813 	bl	8000620 <__aeabi_dmul>
 800c5fa:	4b24      	ldr	r3, [pc, #144]	; (800c68c <CRI_func+0x6c4>)
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	e9c3 8900 	strd	r8, r9, [r3]

		 delta_L = L_i_ref - L_i_test;
 800c604:	4630      	mov	r0, r6
 800c606:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c60a:	4639      	mov	r1, r7
 800c60c:	f7f3 fe54 	bl	80002b8 <__aeabi_dsub>
 800c610:	4b1f      	ldr	r3, [pc, #124]	; (800c690 <CRI_func+0x6c8>)
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	e9c3 6700 	strd	r6, r7, [r3]
		 delta_u = u_i_ref - u_i_test;
 800c61a:	4620      	mov	r0, r4
 800c61c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c620:	4629      	mov	r1, r5
 800c622:	f7f3 fe49 	bl	80002b8 <__aeabi_dsub>
 800c626:	4b1b      	ldr	r3, [pc, #108]	; (800c694 <CRI_func+0x6cc>)
 800c628:	4604      	mov	r4, r0
 800c62a:	460d      	mov	r5, r1
 800c62c:	e9c3 4500 	strd	r4, r5, [r3]
		 delta_v = v_i_ref - v_i_test;	
 800c630:	4640      	mov	r0, r8
 800c632:	e031      	b.n	800c698 <CRI_func+0x6d0>
 800c634:	402e0000 	.word	0x402e0000
 800c638:	40080000 	.word	0x40080000
 800c63c:	40100000 	.word	0x40100000
 800c640:	40180000 	.word	0x40180000
 800c644:	20005668 	.word	0x20005668
 800c648:	20005678 	.word	0x20005678
 800c64c:	20005688 	.word	0x20005688
 800c650:	20005660 	.word	0x20005660
 800c654:	20005670 	.word	0x20005670
 800c658:	20005680 	.word	0x20005680
 800c65c:	20090990 	.word	0x20090990
 800c660:	20090940 	.word	0x20090940
 800c664:	40390000 	.word	0x40390000
 800c668:	40310000 	.word	0x40310000
 800c66c:	200909b8 	.word	0x200909b8
 800c670:	402a0000 	.word	0x402a0000
 800c674:	20090948 	.word	0x20090948
 800c678:	20090988 	.word	0x20090988
 800c67c:	200909b0 	.word	0x200909b0
 800c680:	20090950 	.word	0x20090950
 800c684:	20090998 	.word	0x20090998
 800c688:	20090968 	.word	0x20090968
 800c68c:	20090938 	.word	0x20090938
 800c690:	20090980 	.word	0x20090980
 800c694:	20090978 	.word	0x20090978
 800c698:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800c69c:	4649      	mov	r1, r9
 800c69e:	f7f3 fe0b 	bl	80002b8 <__aeabi_dsub>
 800c6a2:	4bd5      	ldr	r3, [pc, #852]	; (800c9f8 <CRI_func+0xa30>)
 800c6a4:	4680      	mov	r8, r0
 800c6a6:	4689      	mov	r9, r1
		
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c6a8:	4632      	mov	r2, r6
		 delta_v = v_i_ref - v_i_test;	
 800c6aa:	e9c3 8900 	strd	r8, r9, [r3]
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	463b      	mov	r3, r7
 800c6b2:	4639      	mov	r1, r7
 800c6b4:	f7f3 ffb4 	bl	8000620 <__aeabi_dmul>
 800c6b8:	4622      	mov	r2, r4
 800c6ba:	462b      	mov	r3, r5
 800c6bc:	4606      	mov	r6, r0
 800c6be:	460f      	mov	r7, r1
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	f7f3 ffac 	bl	8000620 <__aeabi_dmul>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	4639      	mov	r1, r7
 800c6d0:	f7f3 fdf4 	bl	80002bc <__adddf3>
 800c6d4:	4642      	mov	r2, r8
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	460d      	mov	r5, r1
 800c6da:	464b      	mov	r3, r9
 800c6dc:	4640      	mov	r0, r8
 800c6de:	4649      	mov	r1, r9
 800c6e0:	f7f3 ff9e 	bl	8000620 <__aeabi_dmul>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	f7f3 fde6 	bl	80002bc <__adddf3>
 800c6f0:	ec41 0b10 	vmov	d0, r0, r1
 800c6f4:	f016 fc2c 	bl	8022f50 <sqrt>
 800c6f8:	4bc0      	ldr	r3, [pc, #768]	; (800c9fc <CRI_func+0xa34>)
 800c6fa:	ec51 0b10 	vmov	r0, r1, d0
 800c6fe:	ed83 0b00 	vstr	d0, [r3]
		Ri_temp[i] = 100 - 4.6*delta_E_CRI;
 800c702:	a39b      	add	r3, pc, #620	; (adr r3, 800c970 <CRI_func+0x9a8>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	f7f3 ff8a 	bl	8000620 <__aeabi_dmul>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	2000      	movs	r0, #0
 800c712:	49bb      	ldr	r1, [pc, #748]	; (800ca00 <CRI_func+0xa38>)
 800c714:	f7f3 fdd0 	bl	80002b8 <__aeabi_dsub>
 800c718:	9a00      	ldr	r2, [sp, #0]
 800c71a:	4bba      	ldr	r3, [pc, #744]	; (800ca04 <CRI_func+0xa3c>)
 800c71c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c720:	e9c3 0100 	strd	r0, r1, [r3]
		Ri[i] = (int8_t)Ri_temp[i];
 800c724:	f7f4 fa2c 	bl	8000b80 <__aeabi_d2iz>
 800c728:	4bb7      	ldr	r3, [pc, #732]	; (800ca08 <CRI_func+0xa40>)
 800c72a:	9a00      	ldr	r2, [sp, #0]
 800c72c:	b240      	sxtb	r0, r0
 800c72e:	54d0      	strb	r0, [r2, r3]
		
		if (i < 8)
 800c730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c732:	2b07      	cmp	r3, #7
 800c734:	f200 8111 	bhi.w	800c95a <CRI_func+0x992>
			Ra_temp += Ri[i];
 800c738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c73a:	4403      	add	r3, r0
 800c73c:	b21b      	sxth	r3, r3
 800c73e:	9311      	str	r3, [sp, #68]	; 0x44
		if (i == 8)
			R9 = Ri[i];
		if(i < 14)
 800c740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c742:	2b0e      	cmp	r3, #14
 800c744:	f040 810f 	bne.w	800c966 <CRI_func+0x99e>
			Rall_temp += Ri[i];
		
		memset(CRI_R_temp, 0, sizeof(CRI_R_temp));		
 800c748:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800c74c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c750:	2100      	movs	r1, #0
 800c752:	3008      	adds	r0, #8
 800c754:	f013 f94f 	bl	801f9f6 <memset>
 800c758:	9b00      	ldr	r3, [sp, #0]
 800c75a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 15; i++)
 800c75c:	2b0f      	cmp	r3, #15
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	f47f ac92 	bne.w	800c088 <CRI_func+0xc0>
	}
	
	bar_CRI = 0.9;
 800c764:	a384      	add	r3, pc, #528	; (adr r3, 800c978 <CRI_func+0x9b0>)
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	4ca8      	ldr	r4, [pc, #672]	; (800ca0c <CRI_func+0xa44>)
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c76c:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800ca10 <CRI_func+0xa48>
 800c770:	210d      	movs	r1, #13
 800c772:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 0.9;
 800c774:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c778:	f006 fc9e 	bl	80130b8 <GUI_Bar_Measure>
	
	Rall_temp /= 14;
 800c77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	Rall = (int8_t)Rall_temp;
	
	Ra_temp /= 8;
 800c77e:	9a11      	ldr	r2, [sp, #68]	; 0x44
	Rall_temp /= 14;
 800c780:	200e      	movs	r0, #14
 800c782:	fb93 f0f0 	sdiv	r0, r3, r0
	Rall = (int8_t)Rall_temp;
 800c786:	4ba3      	ldr	r3, [pc, #652]	; (800ca14 <CRI_func+0xa4c>)
 800c788:	7018      	strb	r0, [r3, #0]
	Ra_temp /= 8;
 800c78a:	2308      	movs	r3, #8
 800c78c:	fb92 f3f3 	sdiv	r3, r2, r3
	Ra = (int8_t)Ra_temp;
 800c790:	4aa1      	ldr	r2, [pc, #644]	; (800ca18 <CRI_func+0xa50>)
 800c792:	7013      	strb	r3, [r2, #0]
	
	bar_CRI = 1.0;
 800c794:	4ba1      	ldr	r3, [pc, #644]	; (800ca1c <CRI_func+0xa54>)
 800c796:	2200      	movs	r2, #0
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c798:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c79c:	210d      	movs	r1, #13
 800c79e:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 1.0;
 800c7a0:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c7a4:	f006 fc88 	bl	80130b8 <GUI_Bar_Measure>
 800c7a8:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 800c7ac:	b003      	add	sp, #12
 800c7ae:	ecbd 8b08 	vpop	{d8-d11}
 800c7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c7b6:	ee68 8a08 	vmul.f32	s17, s16, s16
 800c7ba:	ee68 7a28 	vmul.f32	s15, s16, s17
 800c7be:	ee17 0a90 	vmov	r0, s15
 800c7c2:	f7f3 fed9 	bl	8000578 <__aeabi_f2d>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	a16d      	add	r1, pc, #436	; (adr r1, 800c980 <CRI_func+0x9b8>)
 800c7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7d0:	f7f4 f850 	bl	8000874 <__aeabi_ddiv>
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	ee18 0a90 	vmov	r0, s17
 800c7da:	460f      	mov	r7, r1
 800c7dc:	f7f3 fecc 	bl	8000578 <__aeabi_f2d>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	a168      	add	r1, pc, #416	; (adr r1, 800c988 <CRI_func+0x9c0>)
 800c7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ea:	f7f4 f843 	bl	8000874 <__aeabi_ddiv>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	4639      	mov	r1, r7
 800c7f6:	f7f3 fd61 	bl	80002bc <__adddf3>
 800c7fa:	4606      	mov	r6, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c7fc:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c800:	460f      	mov	r7, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c802:	f7f3 feb9 	bl	8000578 <__aeabi_f2d>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	a161      	add	r1, pc, #388	; (adr r1, 800c990 <CRI_func+0x9c8>)
 800c80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c810:	f7f4 f830 	bl	8000874 <__aeabi_ddiv>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	4630      	mov	r0, r6
 800c81a:	4639      	mov	r1, r7
 800c81c:	f7f3 fd4e 	bl	80002bc <__adddf3>
 800c820:	a35d      	add	r3, pc, #372	; (adr r3, 800c998 <CRI_func+0x9d0>)
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800c826:	f7f3 fd49 	bl	80002bc <__adddf3>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c82a:	e9c4 0100 	strd	r0, r1, [r4]
		yD_CRI = -3 * xD_CRI*xD_CRI + 2.87*xD_CRI - 0.275;
 800c82e:	e9d4 4500 	ldrd	r4, r5, [r4]
 800c832:	2200      	movs	r2, #0
 800c834:	4b7a      	ldr	r3, [pc, #488]	; (800ca20 <CRI_func+0xa58>)
 800c836:	4620      	mov	r0, r4
 800c838:	4629      	mov	r1, r5
 800c83a:	f7f3 fef1 	bl	8000620 <__aeabi_dmul>
 800c83e:	4622      	mov	r2, r4
 800c840:	462b      	mov	r3, r5
 800c842:	f7f3 feed 	bl	8000620 <__aeabi_dmul>
 800c846:	a356      	add	r3, pc, #344	; (adr r3, 800c9a0 <CRI_func+0x9d8>)
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	4606      	mov	r6, r0
 800c84e:	460f      	mov	r7, r1
 800c850:	4620      	mov	r0, r4
 800c852:	4629      	mov	r1, r5
 800c854:	f7f3 fee4 	bl	8000620 <__aeabi_dmul>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	4630      	mov	r0, r6
 800c85e:	4639      	mov	r1, r7
 800c860:	f7f3 fd2c 	bl	80002bc <__adddf3>
 800c864:	a350      	add	r3, pc, #320	; (adr r3, 800c9a8 <CRI_func+0x9e0>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	f7f3 fd25 	bl	80002b8 <__aeabi_dsub>
 800c86e:	4b6d      	ldr	r3, [pc, #436]	; (800ca24 <CRI_func+0xa5c>)
 800c870:	4606      	mov	r6, r0
 800c872:	460f      	mov	r7, r1
 800c874:	e9c3 6700 	strd	r6, r7, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c878:	4620      	mov	r0, r4
 800c87a:	a34d      	add	r3, pc, #308	; (adr r3, 800c9b0 <CRI_func+0x9e8>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	4629      	mov	r1, r5
 800c882:	f7f3 fecd 	bl	8000620 <__aeabi_dmul>
 800c886:	a34c      	add	r3, pc, #304	; (adr r3, 800c9b8 <CRI_func+0x9f0>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f7f3 fd16 	bl	80002bc <__adddf3>
 800c890:	a34b      	add	r3, pc, #300	; (adr r3, 800c9c0 <CRI_func+0x9f8>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	4680      	mov	r8, r0
 800c898:	4689      	mov	r9, r1
 800c89a:	4630      	mov	r0, r6
 800c89c:	4639      	mov	r1, r7
 800c89e:	f7f3 febf 	bl	8000620 <__aeabi_dmul>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	f7f3 fd05 	bl	80002b8 <__aeabi_dsub>
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800c8ae:	a346      	add	r3, pc, #280	; (adr r3, 800c9c8 <CRI_func+0xa00>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c8b4:	4680      	mov	r8, r0
 800c8b6:	4689      	mov	r9, r1
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 feb0 	bl	8000620 <__aeabi_dmul>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	a142      	add	r1, pc, #264	; (adr r1, 800c9d0 <CRI_func+0xa08>)
 800c8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ca:	f7f3 fcf5 	bl	80002b8 <__aeabi_dsub>
 800c8ce:	a342      	add	r3, pc, #264	; (adr r3, 800c9d8 <CRI_func+0xa10>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	e9cd 0100 	strd	r0, r1, [sp]
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f3 fea0 	bl	8000620 <__aeabi_dmul>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8e8:	f7f3 fce8 	bl	80002bc <__adddf3>
 800c8ec:	f7f4 f990 	bl	8000c10 <__aeabi_d2f>
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c8f0:	f7f3 fe42 	bl	8000578 <__aeabi_f2d>
 800c8f4:	4642      	mov	r2, r8
 800c8f6:	464b      	mov	r3, r9
 800c8f8:	f7f3 ffbc 	bl	8000874 <__aeabi_ddiv>
 800c8fc:	f7f4 f988 	bl	8000c10 <__aeabi_d2f>
 800c900:	4b49      	ldr	r3, [pc, #292]	; (800ca28 <CRI_func+0xa60>)
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800c902:	4629      	mov	r1, r5
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c904:	6018      	str	r0, [r3, #0]
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800c906:	a336      	add	r3, pc, #216	; (adr r3, 800c9e0 <CRI_func+0xa18>)
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	4620      	mov	r0, r4
 800c90e:	f7f3 fe87 	bl	8000620 <__aeabi_dmul>
 800c912:	4602      	mov	r2, r0
 800c914:	460b      	mov	r3, r1
 800c916:	a134      	add	r1, pc, #208	; (adr r1, 800c9e8 <CRI_func+0xa20>)
 800c918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c91c:	f7f3 fccc 	bl	80002b8 <__aeabi_dsub>
 800c920:	a333      	add	r3, pc, #204	; (adr r3, 800c9f0 <CRI_func+0xa28>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	4604      	mov	r4, r0
 800c928:	460d      	mov	r5, r1
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f3 fe77 	bl	8000620 <__aeabi_dmul>
 800c932:	4602      	mov	r2, r0
 800c934:	460b      	mov	r3, r1
 800c936:	4620      	mov	r0, r4
 800c938:	4629      	mov	r1, r5
 800c93a:	f7f3 fcbf 	bl	80002bc <__adddf3>
 800c93e:	f7f4 f967 	bl	8000c10 <__aeabi_d2f>
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c942:	f7f3 fe19 	bl	8000578 <__aeabi_f2d>
 800c946:	464b      	mov	r3, r9
 800c948:	4642      	mov	r2, r8
 800c94a:	f7f3 ff93 	bl	8000874 <__aeabi_ddiv>
 800c94e:	f7f4 f95f 	bl	8000c10 <__aeabi_d2f>
 800c952:	4b36      	ldr	r3, [pc, #216]	; (800ca2c <CRI_func+0xa64>)
 800c954:	6018      	str	r0, [r3, #0]
 800c956:	f7ff bb5c 	b.w	800c012 <CRI_func+0x4a>
		if (i == 8)
 800c95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c95c:	2b08      	cmp	r3, #8
 800c95e:	f47f aeef 	bne.w	800c740 <CRI_func+0x778>
			R9 = Ri[i];
 800c962:	4b33      	ldr	r3, [pc, #204]	; (800ca30 <CRI_func+0xa68>)
 800c964:	7018      	strb	r0, [r3, #0]
			Rall_temp += Ri[i];
 800c966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c968:	4418      	add	r0, r3
 800c96a:	b203      	sxth	r3, r0
 800c96c:	9310      	str	r3, [sp, #64]	; 0x40
 800c96e:	e6eb      	b.n	800c748 <CRI_func+0x780>
 800c970:	66666666 	.word	0x66666666
 800c974:	40126666 	.word	0x40126666
 800c978:	cccccccd 	.word	0xcccccccd
 800c97c:	3feccccc 	.word	0x3feccccc
 800c980:	dc000000 	.word	0xdc000000
 800c984:	c1f12993 	.word	0xc1f12993
 800c988:	00000000 	.word	0x00000000
 800c98c:	4146a47c 	.word	0x4146a47c
 800c990:	3d70a3d7 	.word	0x3d70a3d7
 800c994:	4058c70a 	.word	0x4058c70a
 800c998:	d594f26b 	.word	0xd594f26b
 800c99c:	3fcf3d74 	.word	0x3fcf3d74
 800c9a0:	8f5c28f6 	.word	0x8f5c28f6
 800c9a4:	4006f5c2 	.word	0x4006f5c2
 800c9a8:	9999999a 	.word	0x9999999a
 800c9ac:	3fd19999 	.word	0x3fd19999
 800c9b0:	af4f0d84 	.word	0xaf4f0d84
 800c9b4:	3fd06594 	.word	0x3fd06594
 800c9b8:	9f559b3d 	.word	0x9f559b3d
 800c9bc:	3f98adab 	.word	0x3f98adab
 800c9c0:	487fcb92 	.word	0x487fcb92
 800c9c4:	3fe77dbf 	.word	0x3fe77dbf
 800c9c8:	17c1bda5 	.word	0x17c1bda5
 800c9cc:	3ffc5326 	.word	0x3ffc5326
 800c9d0:	76c8b439 	.word	0x76c8b439
 800c9d4:	bff59fbe 	.word	0xbff59fbe
 800c9d8:	0aa64c30 	.word	0x0aa64c30
 800c9dc:	4017a546 	.word	0x4017a546
 800c9e0:	205bc01a 	.word	0x205bc01a
 800c9e4:	403f7141 	.word	0x403f7141
 800c9e8:	eb851eb8 	.word	0xeb851eb8
 800c9ec:	3f9eb851 	.word	0x3f9eb851
 800c9f0:	ee631f8a 	.word	0xee631f8a
 800c9f4:	403e125a 	.word	0x403e125a
 800c9f8:	20090a38 	.word	0x20090a38
 800c9fc:	200909a8 	.word	0x200909a8
 800ca00:	40590000 	.word	0x40590000
 800ca04:	200909c0 	.word	0x200909c0
 800ca08:	2000464b 	.word	0x2000464b
 800ca0c:	20090970 	.word	0x20090970
 800ca10:	3f666666 	.word	0x3f666666
 800ca14:	2000464a 	.word	0x2000464a
 800ca18:	20004649 	.word	0x20004649
 800ca1c:	3ff00000 	.word	0x3ff00000
 800ca20:	c0080000 	.word	0xc0080000
 800ca24:	200909a0 	.word	0x200909a0
 800ca28:	20004640 	.word	0x20004640
 800ca2c:	20004644 	.word	0x20004644
 800ca30:	20004648 	.word	0x20004648
		if (CCT_measure < 7000)
 800ca34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca36:	4c30      	ldr	r4, [pc, #192]	; (800caf8 <CRI_func+0xb30>)
 800ca38:	f641 3357 	movw	r3, #6999	; 0x1b57
 800ca3c:	ee07 2a90 	vmov	s15, r2
 800ca40:	429a      	cmp	r2, r3
 800ca42:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ca46:	f67f aeb6 	bls.w	800c7b6 <CRI_func+0x7ee>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ca4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca4c:	f7f3 fd72 	bl	8000534 <__aeabi_ui2d>
 800ca50:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800cad0 <CRI_func+0xb08>
 800ca54:	ec41 0b10 	vmov	d0, r0, r1
 800ca58:	f016 f902 	bl	8022c60 <pow>
 800ca5c:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ca60:	ed8d 0b00 	vstr	d0, [sp]
 800ca64:	ee17 0a90 	vmov	r0, s15
 800ca68:	f7f3 fd86 	bl	8000578 <__aeabi_f2d>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	a119      	add	r1, pc, #100	; (adr r1, 800cad8 <CRI_func+0xb10>)
 800ca72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca76:	f7f3 fefd 	bl	8000874 <__aeabi_ddiv>
 800ca7a:	ed9d 0b00 	vldr	d0, [sp]
 800ca7e:	4606      	mov	r6, r0
 800ca80:	ec53 2b10 	vmov	r2, r3, d0
 800ca84:	460f      	mov	r7, r1
 800ca86:	a116      	add	r1, pc, #88	; (adr r1, 800cae0 <CRI_func+0xb18>)
 800ca88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca8c:	f7f3 fef2 	bl	8000874 <__aeabi_ddiv>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	4630      	mov	r0, r6
 800ca96:	4639      	mov	r1, r7
 800ca98:	f7f3 fc10 	bl	80002bc <__adddf3>
 800ca9c:	4606      	mov	r6, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ca9e:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800caa2:	460f      	mov	r7, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800caa4:	f7f3 fd68 	bl	8000578 <__aeabi_f2d>
 800caa8:	4602      	mov	r2, r0
 800caaa:	460b      	mov	r3, r1
 800caac:	a10e      	add	r1, pc, #56	; (adr r1, 800cae8 <CRI_func+0xb20>)
 800caae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cab2:	f7f3 fedf 	bl	8000874 <__aeabi_ddiv>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	4630      	mov	r0, r6
 800cabc:	4639      	mov	r1, r7
 800cabe:	f7f3 fbfd 	bl	80002bc <__adddf3>
 800cac2:	a30b      	add	r3, pc, #44	; (adr r3, 800caf0 <CRI_func+0xb28>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	e6ad      	b.n	800c826 <CRI_func+0x85e>
 800caca:	bf00      	nop
 800cacc:	f3af 8000 	nop.w
 800cad0:	00000000 	.word	0x00000000
 800cad4:	40080000 	.word	0x40080000
 800cad8:	00000000 	.word	0x00000000
 800cadc:	413d04e8 	.word	0x413d04e8
 800cae0:	00000001 	.word	0x00000001
 800cae4:	c1dde5cf 	.word	0xc1dde5cf
 800cae8:	28f5c290 	.word	0x28f5c290
 800caec:	406eef5c 	.word	0x406eef5c
 800caf0:	a3ec02f3 	.word	0xa3ec02f3
 800caf4:	3fce5753 	.word	0x3fce5753
 800caf8:	20090958 	.word	0x20090958

0800cafc <CRI_Axes>:
#include "CRI_graph.h"
uint8_t TFT_direction = 0x00;



void CRI_Axes(uint8_t direction){
 800cafc:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800cafe:	bbb8      	cbnz	r0, 800cb70 <CRI_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800cb00:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cb04:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800cb08:	2212      	movs	r2, #18
 800cb0a:	215f      	movs	r1, #95	; 0x5f
 800cb0c:	2010      	movs	r0, #16
 800cb0e:	9400      	str	r4, [sp, #0]
 800cb10:	f00f fa75 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800cb14:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800cb18:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800cb1c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800cb20:	2010      	movs	r0, #16
 800cb22:	9400      	str	r4, [sp, #0]
 800cb24:	f00f fa6b 	bl	801bffe <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800cb28:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb32:	2010      	movs	r0, #16
 800cb34:	9400      	str	r4, [sp, #0]
 800cb36:	f00f fa05 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800cb3a:	f240 1301 	movw	r3, #257	; 0x101
 800cb3e:	4619      	mov	r1, r3
 800cb40:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb44:	2010      	movs	r0, #16
 800cb46:	9400      	str	r4, [sp, #0]
 800cb48:	f00f f9fc 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800cb4c:	23b5      	movs	r3, #181	; 0xb5
 800cb4e:	4619      	mov	r1, r3
 800cb50:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb54:	2010      	movs	r0, #16
 800cb56:	9400      	str	r4, [sp, #0]
 800cb58:	f00f f9f4 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800cb5c:	2369      	movs	r3, #105	; 0x69
 800cb5e:	9400      	str	r4, [sp, #0]
 800cb60:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb64:	4619      	mov	r1, r3
 800cb66:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cb68:	f00f f9ec 	bl	801bf44 <TFT_DrawLine>
		
	}
}
 800cb6c:	b002      	add	sp, #8
 800cb6e:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800cb70:	2801      	cmp	r0, #1
 800cb72:	d131      	bne.n	800cbd8 <CRI_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800cb74:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cb78:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cb7c:	22ff      	movs	r2, #255	; 0xff
 800cb7e:	2146      	movs	r1, #70	; 0x46
 800cb80:	20fd      	movs	r0, #253	; 0xfd
 800cb82:	9400      	str	r4, [sp, #0]
 800cb84:	f00f fa3b 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800cb88:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cb8c:	22ff      	movs	r2, #255	; 0xff
 800cb8e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800cb92:	2028      	movs	r0, #40	; 0x28
 800cb94:	9400      	str	r4, [sp, #0]
 800cb96:	f00f fa32 	bl	801bffe <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800cb9a:	22cc      	movs	r2, #204	; 0xcc
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cba2:	2146      	movs	r1, #70	; 0x46
 800cba4:	9400      	str	r4, [sp, #0]
 800cba6:	f00f f9cd 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800cbaa:	2297      	movs	r2, #151	; 0x97
 800cbac:	4610      	mov	r0, r2
 800cbae:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbb2:	2146      	movs	r1, #70	; 0x46
 800cbb4:	9400      	str	r4, [sp, #0]
 800cbb6:	f00f f9c5 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800cbba:	2262      	movs	r2, #98	; 0x62
 800cbbc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	9400      	str	r4, [sp, #0]
 800cbc4:	2146      	movs	r1, #70	; 0x46
 800cbc6:	f00f f9bd 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800cbca:	9400      	str	r4, [sp, #0]
 800cbcc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbd0:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cbd2:	2146      	movs	r1, #70	; 0x46
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	e7c7      	b.n	800cb68 <CRI_Axes+0x6c>
	} else if (direction == 0x02)
 800cbd8:	2802      	cmp	r0, #2
 800cbda:	d1c7      	bne.n	800cb6c <CRI_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800cbdc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cbe0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbe4:	2210      	movs	r2, #16
 800cbe6:	214a      	movs	r1, #74	; 0x4a
 800cbe8:	2012      	movs	r0, #18
 800cbea:	9400      	str	r4, [sp, #0]
 800cbec:	f00f fa07 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800cbf0:	234c      	movs	r3, #76	; 0x4c
 800cbf2:	22e8      	movs	r2, #232	; 0xe8
 800cbf4:	214a      	movs	r1, #74	; 0x4a
 800cbf6:	2011      	movs	r0, #17
 800cbf8:	9400      	str	r4, [sp, #0]
 800cbfa:	f00f fa00 	bl	801bffe <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800cbfe:	2244      	movs	r2, #68	; 0x44
 800cc00:	4610      	mov	r0, r2
 800cc02:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc06:	2146      	movs	r1, #70	; 0x46
 800cc08:	9400      	str	r4, [sp, #0]
 800cc0a:	f00f f99b 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800cc0e:	2279      	movs	r2, #121	; 0x79
 800cc10:	4610      	mov	r0, r2
 800cc12:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc16:	2146      	movs	r1, #70	; 0x46
 800cc18:	9400      	str	r4, [sp, #0]
 800cc1a:	f00f f993 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800cc1e:	22ae      	movs	r2, #174	; 0xae
 800cc20:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc24:	4610      	mov	r0, r2
 800cc26:	9400      	str	r4, [sp, #0]
 800cc28:	2146      	movs	r1, #70	; 0x46
 800cc2a:	f00f f98b 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cc2e:	9400      	str	r4, [sp, #0]
 800cc30:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc34:	22e3      	movs	r2, #227	; 0xe3
 800cc36:	e7cc      	b.n	800cbd2 <CRI_Axes+0xd6>

0800cc38 <CRI_Axes_Measure>:

void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cc38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800cc3c:	ac02      	add	r4, sp, #8
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cc3e:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800cc40:	2300      	movs	r3, #0
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cc42:	4688      	mov	r8, r1
 800cc44:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800cc46:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d161      	bne.n	800cd12 <CRI_Axes_Measure+0xda>
	{
		TFT_SetTextColor(TFT_White);
 800cc4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cc52:	f00f fc03 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cc56:	2063      	movs	r0, #99	; 0x63
 800cc58:	f00f fc06 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800cc5c:	4861      	ldr	r0, [pc, #388]	; (800cde4 <CRI_Axes_Measure+0x1ac>)
 800cc5e:	f00f fbf7 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(17, 70, 'a');
 800cc62:	2261      	movs	r2, #97	; 0x61
 800cc64:	2146      	movs	r1, #70	; 0x46
 800cc66:	2011      	movs	r0, #17
 800cc68:	f00f fcbc 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cc6c:	485e      	ldr	r0, [pc, #376]	; (800cde8 <CRI_Axes_Measure+0x1b0>)
 800cc6e:	f00f fbef 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(3, 70-2, 'R');
 800cc72:	2252      	movs	r2, #82	; 0x52
 800cc74:	2144      	movs	r1, #68	; 0x44
 800cc76:	2003      	movs	r0, #3
 800cc78:	f00f fcb4 	bl	801c5e4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Ra);
 800cc7c:	4642      	mov	r2, r8
 800cc7e:	495b      	ldr	r1, [pc, #364]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cc80:	4620      	mov	r0, r4
 800cc82:	f012 fec1 	bl	801fa08 <sprintf>
		TFT_DisplayString(35, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800cc86:	2303      	movs	r3, #3
 800cc88:	4622      	mov	r2, r4
 800cc8a:	2144      	movs	r1, #68	; 0x44
 800cc8c:	2023      	movs	r0, #35	; 0x23
 800cc8e:	f00f fd01 	bl	801c694 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800cc92:	4854      	ldr	r0, [pc, #336]	; (800cde4 <CRI_Axes_Measure+0x1ac>)
 800cc94:	f00f fbdc 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(113, 70, 'l');
 800cc98:	226c      	movs	r2, #108	; 0x6c
 800cc9a:	2146      	movs	r1, #70	; 0x46
 800cc9c:	2071      	movs	r0, #113	; 0x71
 800cc9e:	f00f fca1 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(122, 70, 'l');
 800cca2:	226c      	movs	r2, #108	; 0x6c
 800cca4:	2146      	movs	r1, #70	; 0x46
 800cca6:	207a      	movs	r0, #122	; 0x7a
 800cca8:	f00f fc9c 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(102, 70, 'a');
 800ccac:	2261      	movs	r2, #97	; 0x61
 800ccae:	2146      	movs	r1, #70	; 0x46
 800ccb0:	2066      	movs	r0, #102	; 0x66
 800ccb2:	f00f fc97 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800ccb6:	484c      	ldr	r0, [pc, #304]	; (800cde8 <CRI_Axes_Measure+0x1b0>)
 800ccb8:	f00f fbca 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(86, 70-2, 'R');
 800ccbc:	2252      	movs	r2, #82	; 0x52
 800ccbe:	2144      	movs	r1, #68	; 0x44
 800ccc0:	2056      	movs	r0, #86	; 0x56
 800ccc2:	f00f fc8f 	bl	801c5e4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Rall);
 800ccc6:	463a      	mov	r2, r7
 800ccc8:	4948      	ldr	r1, [pc, #288]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800ccca:	4620      	mov	r0, r4
 800cccc:	f012 fe9c 	bl	801fa08 <sprintf>
		TFT_DisplayString(138, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	4622      	mov	r2, r4
 800ccd4:	2144      	movs	r1, #68	; 0x44
 800ccd6:	208a      	movs	r0, #138	; 0x8a
 800ccd8:	f00f fcdc 	bl	801c694 <TFT_DisplayString>
		

		
		sprintf (buffer, "%d", R9);
 800ccdc:	4632      	mov	r2, r6
 800ccde:	4943      	ldr	r1, [pc, #268]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cce0:	4620      	mov	r0, r4
 800cce2:	f012 fe91 	bl	801fa08 <sprintf>
		TFT_DisplayString(R9 < 0 ? 215 : 220, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800cce6:	2e00      	cmp	r6, #0
 800cce8:	bfb4      	ite	lt
 800ccea:	20d7      	movlt	r0, #215	; 0xd7
 800ccec:	20dc      	movge	r0, #220	; 0xdc
 800ccee:	2303      	movs	r3, #3
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	2144      	movs	r1, #68	; 0x44
 800ccf4:	f00f fcce 	bl	801c694 <TFT_DisplayString>
		TFT_DrawChar(183, 70-2, 'R');
 800ccf8:	2252      	movs	r2, #82	; 0x52
 800ccfa:	2144      	movs	r1, #68	; 0x44
 800ccfc:	20b7      	movs	r0, #183	; 0xb7
 800ccfe:	f00f fc71 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(198, 70-2, '9');
 800cd02:	2239      	movs	r2, #57	; 0x39
 800cd04:	2144      	movs	r1, #68	; 0x44
 800cd06:	20c6      	movs	r0, #198	; 0xc6
 800cd08:	f00f fc6c 	bl	801c5e4 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
	
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800cd0c:	b002      	add	sp, #8
 800cd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd12:	4d37      	ldr	r5, [pc, #220]	; (800cdf0 <CRI_Axes_Measure+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800cd14:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800cd16:	bf14      	ite	ne
 800cd18:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800cd1a:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cd1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800cd20:	bf18      	it	ne
 800cd22:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cd24:	f00f fb9a 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cd28:	2063      	movs	r0, #99	; 0x63
 800cd2a:	f00f fb9d 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800cd2e:	482d      	ldr	r0, [pc, #180]	; (800cde4 <CRI_Axes_Measure+0x1ac>)
 800cd30:	f00f fb8e 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800cd34:	2261      	movs	r2, #97	; 0x61
 800cd36:	2110      	movs	r1, #16
 800cd38:	2064      	movs	r0, #100	; 0x64
 800cd3a:	f00f fc53 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cd3e:	482a      	ldr	r0, [pc, #168]	; (800cde8 <CRI_Axes_Measure+0x1b0>)
 800cd40:	f00f fb86 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'R');
 800cd44:	2252      	movs	r2, #82	; 0x52
 800cd46:	210e      	movs	r1, #14
 800cd48:	2055      	movs	r0, #85	; 0x55
 800cd4a:	f00f fc4b 	bl	801c5e4 <TFT_DrawChar>
		sprintf (buffer, "%d", Ra);
 800cd4e:	4642      	mov	r2, r8
 800cd50:	4926      	ldr	r1, [pc, #152]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cd52:	4620      	mov	r0, r4
 800cd54:	f012 fe58 	bl	801fa08 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cd58:	2303      	movs	r3, #3
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	210e      	movs	r1, #14
 800cd5e:	207d      	movs	r0, #125	; 0x7d
 800cd60:	f00f fc98 	bl	801c694 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800cd64:	481f      	ldr	r0, [pc, #124]	; (800cde4 <CRI_Axes_Measure+0x1ac>)
 800cd66:	f00f fb73 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(221, 16, 'l');
 800cd6a:	226c      	movs	r2, #108	; 0x6c
 800cd6c:	2110      	movs	r1, #16
 800cd6e:	20dd      	movs	r0, #221	; 0xdd
 800cd70:	f00f fc38 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(230, 16, 'l');
 800cd74:	226c      	movs	r2, #108	; 0x6c
 800cd76:	2110      	movs	r1, #16
 800cd78:	20e6      	movs	r0, #230	; 0xe6
 800cd7a:	f00f fc33 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(210, 16, 'a');
 800cd7e:	2261      	movs	r2, #97	; 0x61
 800cd80:	2110      	movs	r1, #16
 800cd82:	20d2      	movs	r0, #210	; 0xd2
 800cd84:	f00f fc2e 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cd88:	4817      	ldr	r0, [pc, #92]	; (800cde8 <CRI_Axes_Measure+0x1b0>)
 800cd8a:	f00f fb61 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(195, 16-2, 'R');
 800cd8e:	2252      	movs	r2, #82	; 0x52
 800cd90:	210e      	movs	r1, #14
 800cd92:	20c3      	movs	r0, #195	; 0xc3
 800cd94:	f00f fc26 	bl	801c5e4 <TFT_DrawChar>
		sprintf (buffer, "%d", Rall);
 800cd98:	463a      	mov	r2, r7
 800cd9a:	4914      	ldr	r1, [pc, #80]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f012 fe33 	bl	801fa08 <sprintf>
		TFT_DisplayString(255, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cda2:	2303      	movs	r3, #3
 800cda4:	4622      	mov	r2, r4
 800cda6:	210e      	movs	r1, #14
 800cda8:	20ff      	movs	r0, #255	; 0xff
 800cdaa:	f00f fc73 	bl	801c694 <TFT_DisplayString>
		TFT_DrawChar(325, 16-2, 'R');
 800cdae:	2252      	movs	r2, #82	; 0x52
 800cdb0:	210e      	movs	r1, #14
 800cdb2:	f240 1045 	movw	r0, #325	; 0x145
 800cdb6:	f00f fc15 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(340, 16-2, '9');
 800cdba:	2239      	movs	r2, #57	; 0x39
 800cdbc:	210e      	movs	r1, #14
 800cdbe:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800cdc2:	f00f fc0f 	bl	801c5e4 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
 800cdc6:	4632      	mov	r2, r6
 800cdc8:	4908      	ldr	r1, [pc, #32]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f012 fe1c 	bl	801fa08 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	4622      	mov	r2, r4
 800cdd4:	210e      	movs	r1, #14
 800cdd6:	f240 106d 	movw	r0, #365	; 0x16d
 800cdda:	f00f fc5b 	bl	801c694 <TFT_DisplayString>
		TFT_direction = 0x00;
 800cdde:	2300      	movs	r3, #0
 800cde0:	702b      	strb	r3, [r5, #0]
}
 800cde2:	e793      	b.n	800cd0c <CRI_Axes_Measure+0xd4>
 800cde4:	200001c0 	.word	0x200001c0
 800cde8:	200001b0 	.word	0x200001b0
 800cdec:	08024679 	.word	0x08024679
 800cdf0:	20005690 	.word	0x20005690

0800cdf4 <CRI_Axes_Text>:

void CRI_Axes_Text(uint8_t direction){
 800cdf4:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	f040 811f 	bne.w	800d03c <CRI_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800cdfe:	488e      	ldr	r0, [pc, #568]	; (800d038 <CRI_Axes_Text+0x244>)
 800ce00:	f00f fb26 	bl	801c450 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800ce04:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ce08:	f00f fb28 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800ce0c:	2063      	movs	r0, #99	; 0x63
 800ce0e:	f00f fb2b 	bl	801c468 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'R');
 800ce12:	2252      	movs	r2, #82	; 0x52
 800ce14:	f240 119f 	movw	r1, #415	; 0x19f
 800ce18:	2018      	movs	r0, #24
 800ce1a:	f00f fbe3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800ce1e:	2231      	movs	r2, #49	; 0x31
 800ce20:	f240 119f 	movw	r1, #415	; 0x19f
 800ce24:	201e      	movs	r0, #30
 800ce26:	f00f fbdd 	bl	801c5e4 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'R');
 800ce2a:	2252      	movs	r2, #82	; 0x52
 800ce2c:	f240 119f 	movw	r1, #415	; 0x19f
 800ce30:	2028      	movs	r0, #40	; 0x28
 800ce32:	f00f fbd7 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800ce36:	2232      	movs	r2, #50	; 0x32
 800ce38:	f240 119f 	movw	r1, #415	; 0x19f
 800ce3c:	202e      	movs	r0, #46	; 0x2e
 800ce3e:	f00f fbd1 	bl	801c5e4 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'R');
 800ce42:	2252      	movs	r2, #82	; 0x52
 800ce44:	f240 119f 	movw	r1, #415	; 0x19f
 800ce48:	2038      	movs	r0, #56	; 0x38
 800ce4a:	f00f fbcb 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800ce4e:	2233      	movs	r2, #51	; 0x33
 800ce50:	f240 119f 	movw	r1, #415	; 0x19f
 800ce54:	203e      	movs	r0, #62	; 0x3e
 800ce56:	f00f fbc5 	bl	801c5e4 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'R');
 800ce5a:	2252      	movs	r2, #82	; 0x52
 800ce5c:	f240 119f 	movw	r1, #415	; 0x19f
 800ce60:	2048      	movs	r0, #72	; 0x48
 800ce62:	f00f fbbf 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800ce66:	2234      	movs	r2, #52	; 0x34
 800ce68:	f240 119f 	movw	r1, #415	; 0x19f
 800ce6c:	204e      	movs	r0, #78	; 0x4e
 800ce6e:	f00f fbb9 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'R');
 800ce72:	2252      	movs	r2, #82	; 0x52
 800ce74:	f240 119f 	movw	r1, #415	; 0x19f
 800ce78:	2058      	movs	r0, #88	; 0x58
 800ce7a:	f00f fbb3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800ce7e:	2235      	movs	r2, #53	; 0x35
 800ce80:	f240 119f 	movw	r1, #415	; 0x19f
 800ce84:	205e      	movs	r0, #94	; 0x5e
 800ce86:	f00f fbad 	bl	801c5e4 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'R');
 800ce8a:	2252      	movs	r2, #82	; 0x52
 800ce8c:	f240 119f 	movw	r1, #415	; 0x19f
 800ce90:	2068      	movs	r0, #104	; 0x68
 800ce92:	f00f fba7 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800ce96:	2236      	movs	r2, #54	; 0x36
 800ce98:	f240 119f 	movw	r1, #415	; 0x19f
 800ce9c:	206e      	movs	r0, #110	; 0x6e
 800ce9e:	f00f fba1 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'R');
 800cea2:	2252      	movs	r2, #82	; 0x52
 800cea4:	f240 119f 	movw	r1, #415	; 0x19f
 800cea8:	2078      	movs	r0, #120	; 0x78
 800ceaa:	f00f fb9b 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800ceae:	2237      	movs	r2, #55	; 0x37
 800ceb0:	f240 119f 	movw	r1, #415	; 0x19f
 800ceb4:	207e      	movs	r0, #126	; 0x7e
 800ceb6:	f00f fb95 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'R');
 800ceba:	2252      	movs	r2, #82	; 0x52
 800cebc:	f240 119f 	movw	r1, #415	; 0x19f
 800cec0:	2088      	movs	r0, #136	; 0x88
 800cec2:	f00f fb8f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800cec6:	2238      	movs	r2, #56	; 0x38
 800cec8:	f240 119f 	movw	r1, #415	; 0x19f
 800cecc:	208e      	movs	r0, #142	; 0x8e
 800cece:	f00f fb89 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'R');
 800ced2:	2252      	movs	r2, #82	; 0x52
 800ced4:	f240 119f 	movw	r1, #415	; 0x19f
 800ced8:	2098      	movs	r0, #152	; 0x98
 800ceda:	f00f fb83 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800cede:	2239      	movs	r2, #57	; 0x39
 800cee0:	f240 119f 	movw	r1, #415	; 0x19f
 800cee4:	209e      	movs	r0, #158	; 0x9e
 800cee6:	f00f fb7d 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800ceea:	2231      	movs	r2, #49	; 0x31
 800ceec:	f240 119f 	movw	r1, #415	; 0x19f
 800cef0:	20ad      	movs	r0, #173	; 0xad
 800cef2:	f00f fb77 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'R');
 800cef6:	2252      	movs	r2, #82	; 0x52
 800cef8:	f240 119f 	movw	r1, #415	; 0x19f
 800cefc:	20a8      	movs	r0, #168	; 0xa8
 800cefe:	f00f fb71 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800cf02:	2230      	movs	r2, #48	; 0x30
 800cf04:	f240 119f 	movw	r1, #415	; 0x19f
 800cf08:	20b1      	movs	r0, #177	; 0xb1
 800cf0a:	f00f fb6b 	bl	801c5e4 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800cf0e:	2231      	movs	r2, #49	; 0x31
 800cf10:	f240 119f 	movw	r1, #415	; 0x19f
 800cf14:	20bd      	movs	r0, #189	; 0xbd
 800cf16:	f00f fb65 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'R');
 800cf1a:	2252      	movs	r2, #82	; 0x52
 800cf1c:	f240 119f 	movw	r1, #415	; 0x19f
 800cf20:	20b8      	movs	r0, #184	; 0xb8
 800cf22:	f00f fb5f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800cf26:	2231      	movs	r2, #49	; 0x31
 800cf28:	f240 119f 	movw	r1, #415	; 0x19f
 800cf2c:	20c2      	movs	r0, #194	; 0xc2
 800cf2e:	f00f fb59 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800cf32:	2231      	movs	r2, #49	; 0x31
 800cf34:	f240 119f 	movw	r1, #415	; 0x19f
 800cf38:	20cd      	movs	r0, #205	; 0xcd
 800cf3a:	f00f fb53 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'R');
 800cf3e:	2252      	movs	r2, #82	; 0x52
 800cf40:	f240 119f 	movw	r1, #415	; 0x19f
 800cf44:	20c8      	movs	r0, #200	; 0xc8
 800cf46:	f00f fb4d 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800cf4a:	2232      	movs	r2, #50	; 0x32
 800cf4c:	f240 119f 	movw	r1, #415	; 0x19f
 800cf50:	20d1      	movs	r0, #209	; 0xd1
 800cf52:	f00f fb47 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800cf56:	2231      	movs	r2, #49	; 0x31
 800cf58:	f240 119f 	movw	r1, #415	; 0x19f
 800cf5c:	20dd      	movs	r0, #221	; 0xdd
 800cf5e:	f00f fb41 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'R');
 800cf62:	2252      	movs	r2, #82	; 0x52
 800cf64:	f240 119f 	movw	r1, #415	; 0x19f
 800cf68:	20d8      	movs	r0, #216	; 0xd8
 800cf6a:	f00f fb3b 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800cf6e:	2233      	movs	r2, #51	; 0x33
 800cf70:	f240 119f 	movw	r1, #415	; 0x19f
 800cf74:	20e1      	movs	r0, #225	; 0xe1
 800cf76:	f00f fb35 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800cf7a:	2231      	movs	r2, #49	; 0x31
 800cf7c:	f240 119f 	movw	r1, #415	; 0x19f
 800cf80:	20ed      	movs	r0, #237	; 0xed
 800cf82:	f00f fb2f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'R');
 800cf86:	2252      	movs	r2, #82	; 0x52
 800cf88:	f240 119f 	movw	r1, #415	; 0x19f
 800cf8c:	20e8      	movs	r0, #232	; 0xe8
 800cf8e:	f00f fb29 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800cf92:	2234      	movs	r2, #52	; 0x34
 800cf94:	f240 119f 	movw	r1, #415	; 0x19f
 800cf98:	20f1      	movs	r0, #241	; 0xf1
 800cf9a:	f00f fb23 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800cf9e:	2231      	movs	r2, #49	; 0x31
 800cfa0:	f240 119f 	movw	r1, #415	; 0x19f
 800cfa4:	20fd      	movs	r0, #253	; 0xfd
 800cfa6:	f00f fb1d 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'R');
 800cfaa:	2252      	movs	r2, #82	; 0x52
 800cfac:	f240 119f 	movw	r1, #415	; 0x19f
 800cfb0:	20f8      	movs	r0, #248	; 0xf8
 800cfb2:	f00f fb17 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800cfb6:	2235      	movs	r2, #53	; 0x35
 800cfb8:	f240 119f 	movw	r1, #415	; 0x19f
 800cfbc:	f240 1001 	movw	r0, #257	; 0x101
 800cfc0:	f00f fb10 	bl	801c5e4 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800cfc4:	2230      	movs	r2, #48	; 0x30
 800cfc6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800cfca:	2005      	movs	r0, #5
 800cfcc:	f00f fb0a 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800cfd0:	2232      	movs	r2, #50	; 0x32
 800cfd2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	f00f fb04 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800cfdc:	2235      	movs	r2, #53	; 0x35
 800cfde:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800cfe2:	2007      	movs	r0, #7
 800cfe4:	f00f fafe 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800cfe8:	2235      	movs	r2, #53	; 0x35
 800cfea:	f240 1101 	movw	r1, #257	; 0x101
 800cfee:	2001      	movs	r0, #1
 800cff0:	f00f faf8 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800cff4:	2230      	movs	r2, #48	; 0x30
 800cff6:	f240 1101 	movw	r1, #257	; 0x101
 800cffa:	2007      	movs	r0, #7
 800cffc:	f00f faf2 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800d000:	2237      	movs	r2, #55	; 0x37
 800d002:	21b5      	movs	r1, #181	; 0xb5
 800d004:	2001      	movs	r0, #1
 800d006:	f00f faed 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800d00a:	2235      	movs	r2, #53	; 0x35
 800d00c:	21b5      	movs	r1, #181	; 0xb5
 800d00e:	2007      	movs	r0, #7
 800d010:	f00f fae8 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800d014:	4620      	mov	r0, r4
 800d016:	2231      	movs	r2, #49	; 0x31
 800d018:	2169      	movs	r1, #105	; 0x69
 800d01a:	f00f fae3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800d01e:	2230      	movs	r2, #48	; 0x30
 800d020:	2169      	movs	r1, #105	; 0x69
 800d022:	2004      	movs	r0, #4
 800d024:	f00f fade 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800d028:	2230      	movs	r2, #48	; 0x30
 800d02a:	2169      	movs	r1, #105	; 0x69
 800d02c:	2009      	movs	r0, #9
		TFT_DrawChar(62, 43, '0');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 800d02e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800d032:	f00f bad7 	b.w	801c5e4 <TFT_DrawChar>
 800d036:	bf00      	nop
 800d038:	20000210 	.word	0x20000210
 800d03c:	4d98      	ldr	r5, [pc, #608]	; (800d2a0 <CRI_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d03e:	2801      	cmp	r0, #1
 800d040:	bf0c      	ite	eq
 800d042:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800d044:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800d046:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d04a:	bf18      	it	ne
 800d04c:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d04e:	f00f fa05 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d052:	2063      	movs	r0, #99	; 0x63
 800d054:	f00f fa08 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800d058:	4892      	ldr	r0, [pc, #584]	; (800d2a4 <CRI_Axes_Text+0x4b0>)
 800d05a:	f00f f9f9 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'R');
 800d05e:	2252      	movs	r2, #82	; 0x52
 800d060:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d064:	2057      	movs	r0, #87	; 0x57
 800d066:	f00f fabd 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800d06a:	2231      	movs	r2, #49	; 0x31
 800d06c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d070:	205d      	movs	r0, #93	; 0x5d
 800d072:	f00f fab7 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'R');
 800d076:	2252      	movs	r2, #82	; 0x52
 800d078:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d07c:	206d      	movs	r0, #109	; 0x6d
 800d07e:	f00f fab1 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800d082:	2232      	movs	r2, #50	; 0x32
 800d084:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d088:	2073      	movs	r0, #115	; 0x73
 800d08a:	f00f faab 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'R');
 800d08e:	2252      	movs	r2, #82	; 0x52
 800d090:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d094:	2083      	movs	r0, #131	; 0x83
 800d096:	f00f faa5 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800d09a:	2233      	movs	r2, #51	; 0x33
 800d09c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0a0:	2089      	movs	r0, #137	; 0x89
 800d0a2:	f00f fa9f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'R');
 800d0a6:	2252      	movs	r2, #82	; 0x52
 800d0a8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0ac:	2099      	movs	r0, #153	; 0x99
 800d0ae:	f00f fa99 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800d0b2:	2234      	movs	r2, #52	; 0x34
 800d0b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0b8:	209f      	movs	r0, #159	; 0x9f
 800d0ba:	f00f fa93 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'R');
 800d0be:	2252      	movs	r2, #82	; 0x52
 800d0c0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0c4:	20af      	movs	r0, #175	; 0xaf
 800d0c6:	f00f fa8d 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800d0ca:	2235      	movs	r2, #53	; 0x35
 800d0cc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0d0:	20b5      	movs	r0, #181	; 0xb5
 800d0d2:	f00f fa87 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'R');
 800d0d6:	2252      	movs	r2, #82	; 0x52
 800d0d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0dc:	20c5      	movs	r0, #197	; 0xc5
 800d0de:	f00f fa81 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800d0e2:	2236      	movs	r2, #54	; 0x36
 800d0e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0e8:	20cb      	movs	r0, #203	; 0xcb
 800d0ea:	f00f fa7b 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'R');
 800d0ee:	2252      	movs	r2, #82	; 0x52
 800d0f0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0f4:	20db      	movs	r0, #219	; 0xdb
 800d0f6:	f00f fa75 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800d0fa:	2237      	movs	r2, #55	; 0x37
 800d0fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d100:	20e1      	movs	r0, #225	; 0xe1
 800d102:	f00f fa6f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'R');
 800d106:	2252      	movs	r2, #82	; 0x52
 800d108:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d10c:	20f1      	movs	r0, #241	; 0xf1
 800d10e:	f00f fa69 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800d112:	2238      	movs	r2, #56	; 0x38
 800d114:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d118:	20f7      	movs	r0, #247	; 0xf7
 800d11a:	f00f fa63 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'R');
 800d11e:	2252      	movs	r2, #82	; 0x52
 800d120:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d124:	f240 1007 	movw	r0, #263	; 0x107
 800d128:	f00f fa5c 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800d12c:	2239      	movs	r2, #57	; 0x39
 800d12e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d132:	f240 100d 	movw	r0, #269	; 0x10d
 800d136:	f00f fa55 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800d13a:	2231      	movs	r2, #49	; 0x31
 800d13c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d140:	f44f 7091 	mov.w	r0, #290	; 0x122
 800d144:	f00f fa4e 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'R');
 800d148:	2252      	movs	r2, #82	; 0x52
 800d14a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d14e:	f240 101d 	movw	r0, #285	; 0x11d
 800d152:	f00f fa47 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800d156:	2230      	movs	r2, #48	; 0x30
 800d158:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d15c:	f44f 7093 	mov.w	r0, #294	; 0x126
 800d160:	f00f fa40 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800d164:	2231      	movs	r2, #49	; 0x31
 800d166:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d16a:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d16e:	f00f fa39 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'R');
 800d172:	2252      	movs	r2, #82	; 0x52
 800d174:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d178:	f240 1033 	movw	r0, #307	; 0x133
 800d17c:	f00f fa32 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800d180:	2231      	movs	r2, #49	; 0x31
 800d182:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d186:	f240 103d 	movw	r0, #317	; 0x13d
 800d18a:	f00f fa2b 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800d18e:	2231      	movs	r2, #49	; 0x31
 800d190:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d194:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800d198:	f00f fa24 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'R');
 800d19c:	2252      	movs	r2, #82	; 0x52
 800d19e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1a2:	f240 1049 	movw	r0, #329	; 0x149
 800d1a6:	f00f fa1d 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800d1aa:	2232      	movs	r2, #50	; 0x32
 800d1ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1b0:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800d1b4:	f00f fa16 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800d1b8:	2231      	movs	r2, #49	; 0x31
 800d1ba:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1be:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800d1c2:	f00f fa0f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'R');
 800d1c6:	2252      	movs	r2, #82	; 0x52
 800d1c8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1cc:	f240 105f 	movw	r0, #351	; 0x15f
 800d1d0:	f00f fa08 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800d1d4:	2233      	movs	r2, #51	; 0x33
 800d1d6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1da:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800d1de:	f00f fa01 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800d1e2:	2231      	movs	r2, #49	; 0x31
 800d1e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1e8:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800d1ec:	f00f f9fa 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'R');
 800d1f0:	2252      	movs	r2, #82	; 0x52
 800d1f2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1f6:	f240 1075 	movw	r0, #373	; 0x175
 800d1fa:	f00f f9f3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800d1fe:	2234      	movs	r2, #52	; 0x34
 800d200:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d204:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800d208:	f00f f9ec 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800d20c:	2231      	movs	r2, #49	; 0x31
 800d20e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d212:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d216:	f00f f9e5 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'R');
 800d21a:	2252      	movs	r2, #82	; 0x52
 800d21c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d220:	f240 108b 	movw	r0, #395	; 0x18b
 800d224:	f00f f9de 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800d228:	2235      	movs	r2, #53	; 0x35
 800d22a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d22e:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d232:	f00f f9d7 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800d236:	2230      	movs	r2, #48	; 0x30
 800d238:	21fa      	movs	r1, #250	; 0xfa
 800d23a:	2041      	movs	r0, #65	; 0x41
 800d23c:	f00f f9d2 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800d240:	2232      	movs	r2, #50	; 0x32
 800d242:	21ca      	movs	r1, #202	; 0xca
 800d244:	203a      	movs	r0, #58	; 0x3a
 800d246:	f00f f9cd 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800d24a:	2235      	movs	r2, #53	; 0x35
 800d24c:	21ca      	movs	r1, #202	; 0xca
 800d24e:	2041      	movs	r0, #65	; 0x41
 800d250:	f00f f9c8 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800d254:	2235      	movs	r2, #53	; 0x35
 800d256:	2195      	movs	r1, #149	; 0x95
 800d258:	203a      	movs	r0, #58	; 0x3a
 800d25a:	f00f f9c3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800d25e:	2230      	movs	r2, #48	; 0x30
 800d260:	2195      	movs	r1, #149	; 0x95
 800d262:	2041      	movs	r0, #65	; 0x41
 800d264:	f00f f9be 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800d268:	2237      	movs	r2, #55	; 0x37
 800d26a:	2160      	movs	r1, #96	; 0x60
 800d26c:	203a      	movs	r0, #58	; 0x3a
 800d26e:	f00f f9b9 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800d272:	2235      	movs	r2, #53	; 0x35
 800d274:	2160      	movs	r1, #96	; 0x60
 800d276:	2041      	movs	r0, #65	; 0x41
 800d278:	f00f f9b4 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800d27c:	2231      	movs	r2, #49	; 0x31
 800d27e:	212b      	movs	r1, #43	; 0x2b
 800d280:	2039      	movs	r0, #57	; 0x39
 800d282:	f00f f9af 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800d286:	2230      	movs	r2, #48	; 0x30
 800d288:	212b      	movs	r1, #43	; 0x2b
 800d28a:	203e      	movs	r0, #62	; 0x3e
 800d28c:	f00f f9aa 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800d290:	2230      	movs	r2, #48	; 0x30
 800d292:	212b      	movs	r1, #43	; 0x2b
 800d294:	2043      	movs	r0, #67	; 0x43
 800d296:	f00f f9a5 	bl	801c5e4 <TFT_DrawChar>
		TFT_direction = 0x00;
 800d29a:	2300      	movs	r3, #0
 800d29c:	702b      	strb	r3, [r5, #0]
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
 800d2a0:	20005690 	.word	0x20005690
 800d2a4:	20000210 	.word	0x20000210

0800d2a8 <CRI_chart>:

void CRI_chart(uint8_t direction, int8_t *GraphData)
{
 800d2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ac:	ed2d 8b02 	vpush	{d8}
 800d2b0:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800d2b2:	ae06      	add	r6, sp, #24
 800d2b4:	2300      	movs	r3, #0
{
 800d2b6:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800d2b8:	f826 3d04 	strh.w	r3, [r6, #-4]!
 800d2bc:	1e4d      	subs	r5, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f040 82de 	bne.w	800d880 <CRI_chart+0x5d8>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d2c4:	f991 3000 	ldrsb.w	r3, [r1]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f2c0 826f 	blt.w	800d7ac <CRI_chart+0x504>
 800d2ce:	2b64      	cmp	r3, #100	; 0x64
 800d2d0:	f300 826f 	bgt.w	800d7b2 <CRI_chart+0x50a>
 800d2d4:	ee07 3a90 	vmov	s15, r3
 800d2d8:	ed9f 7af7 	vldr	s14, [pc, #988]	; 800d6b8 <CRI_chart+0x410>
 800d2dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d2e4:	eddf 7af5 	vldr	s15, [pc, #980]	; 800d6bc <CRI_chart+0x414>
 800d2e8:	ed9f 7af5 	vldr	s14, [pc, #980]	; 800d6c0 <CRI_chart+0x418>
 800d2ec:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d2f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2f4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d2f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d2fc:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	2222      	movs	r2, #34	; 0x22
 800d304:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d308:	2018      	movs	r0, #24
 800d30a:	f00e fe78 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d30e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d312:	2b00      	cmp	r3, #0
 800d314:	f2c0 8250 	blt.w	800d7b8 <CRI_chart+0x510>
 800d318:	2b64      	cmp	r3, #100	; 0x64
 800d31a:	f300 8250 	bgt.w	800d7be <CRI_chart+0x516>
 800d31e:	ee07 3a90 	vmov	s15, r3
 800d322:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800d6b8 <CRI_chart+0x410>
 800d326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d32a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d32e:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800d6bc <CRI_chart+0x414>
 800d332:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 800d6c0 <CRI_chart+0x418>
 800d336:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d33a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d33e:	edcd 7a03 	vstr	s15, [sp, #12]
 800d342:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d346:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	2232      	movs	r2, #50	; 0x32
 800d34e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d352:	2028      	movs	r0, #40	; 0x28
 800d354:	f00e fe53 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d358:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f2c0 8231 	blt.w	800d7c4 <CRI_chart+0x51c>
 800d362:	2b64      	cmp	r3, #100	; 0x64
 800d364:	f300 8231 	bgt.w	800d7ca <CRI_chart+0x522>
 800d368:	ee07 3a90 	vmov	s15, r3
 800d36c:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800d6b8 <CRI_chart+0x410>
 800d370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d374:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d378:	eddf 7ad0 	vldr	s15, [pc, #832]	; 800d6bc <CRI_chart+0x414>
 800d37c:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800d6c0 <CRI_chart+0x418>
 800d380:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d388:	edcd 7a03 	vstr	s15, [sp, #12]
 800d38c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d390:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	2242      	movs	r2, #66	; 0x42
 800d398:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d39c:	2038      	movs	r0, #56	; 0x38
 800d39e:	f00e fe2e 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d3a2:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f2c0 8212 	blt.w	800d7d0 <CRI_chart+0x528>
 800d3ac:	2b64      	cmp	r3, #100	; 0x64
 800d3ae:	f300 8212 	bgt.w	800d7d6 <CRI_chart+0x52e>
 800d3b2:	ee07 3a90 	vmov	s15, r3
 800d3b6:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800d6b8 <CRI_chart+0x410>
 800d3ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d3c2:	eddf 7abe 	vldr	s15, [pc, #760]	; 800d6bc <CRI_chart+0x414>
 800d3c6:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800d6c0 <CRI_chart+0x418>
 800d3ca:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3d2:	edcd 7a03 	vstr	s15, [sp, #12]
 800d3d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d3da:	f241 430f 	movw	r3, #5135	; 0x140f
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	2252      	movs	r2, #82	; 0x52
 800d3e2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d3e6:	2048      	movs	r0, #72	; 0x48
 800d3e8:	f00e fe09 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d3ec:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f2c0 81f3 	blt.w	800d7dc <CRI_chart+0x534>
 800d3f6:	2b64      	cmp	r3, #100	; 0x64
 800d3f8:	f300 81f3 	bgt.w	800d7e2 <CRI_chart+0x53a>
 800d3fc:	ee07 3a90 	vmov	s15, r3
 800d400:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800d6b8 <CRI_chart+0x410>
 800d404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d408:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d40c:	eddf 7aab 	vldr	s15, [pc, #684]	; 800d6bc <CRI_chart+0x414>
 800d410:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800d6c0 <CRI_chart+0x418>
 800d414:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d41c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d420:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d424:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	2262      	movs	r2, #98	; 0x62
 800d42c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d430:	2058      	movs	r0, #88	; 0x58
 800d432:	f00e fde4 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d436:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f2c0 81d4 	blt.w	800d7e8 <CRI_chart+0x540>
 800d440:	2b64      	cmp	r3, #100	; 0x64
 800d442:	f300 81d4 	bgt.w	800d7ee <CRI_chart+0x546>
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800d6b8 <CRI_chart+0x410>
 800d44e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d452:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d456:	eddf 7a99 	vldr	s15, [pc, #612]	; 800d6bc <CRI_chart+0x414>
 800d45a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800d6c0 <CRI_chart+0x418>
 800d45e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d466:	edcd 7a03 	vstr	s15, [sp, #12]
 800d46a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d46e:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	2272      	movs	r2, #114	; 0x72
 800d476:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d47a:	2068      	movs	r0, #104	; 0x68
 800d47c:	f00e fdbf 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d480:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800d484:	2b00      	cmp	r3, #0
 800d486:	f2c0 81b5 	blt.w	800d7f4 <CRI_chart+0x54c>
 800d48a:	2b64      	cmp	r3, #100	; 0x64
 800d48c:	f300 81b5 	bgt.w	800d7fa <CRI_chart+0x552>
 800d490:	ee07 3a90 	vmov	s15, r3
 800d494:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d6b8 <CRI_chart+0x410>
 800d498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d49c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d4a0:	eddf 7a86 	vldr	s15, [pc, #536]	; 800d6bc <CRI_chart+0x414>
 800d4a4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800d6c0 <CRI_chart+0x418>
 800d4a8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d4ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4b0:	edcd 7a03 	vstr	s15, [sp, #12]
 800d4b4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d4b8:	f248 4357 	movw	r3, #33879	; 0x8457
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	2282      	movs	r2, #130	; 0x82
 800d4c0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d4c4:	2078      	movs	r0, #120	; 0x78
 800d4c6:	f00e fd9a 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d4ca:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f2c0 8196 	blt.w	800d800 <CRI_chart+0x558>
 800d4d4:	2b64      	cmp	r3, #100	; 0x64
 800d4d6:	f300 8196 	bgt.w	800d806 <CRI_chart+0x55e>
 800d4da:	ee07 3a90 	vmov	s15, r3
 800d4de:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800d6b8 <CRI_chart+0x410>
 800d4e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d4ea:	eddf 7a74 	vldr	s15, [pc, #464]	; 800d6bc <CRI_chart+0x414>
 800d4ee:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800d6c0 <CRI_chart+0x418>
 800d4f2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4fa:	edcd 7a03 	vstr	s15, [sp, #12]
 800d4fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d502:	f24a 4377 	movw	r3, #42103	; 0xa477
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	2292      	movs	r2, #146	; 0x92
 800d50a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d50e:	2088      	movs	r0, #136	; 0x88
 800d510:	f00e fd75 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d514:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f2c0 8177 	blt.w	800d80c <CRI_chart+0x564>
 800d51e:	2b64      	cmp	r3, #100	; 0x64
 800d520:	f300 8177 	bgt.w	800d812 <CRI_chart+0x56a>
 800d524:	ee07 3a90 	vmov	s15, r3
 800d528:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800d6b8 <CRI_chart+0x410>
 800d52c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d530:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d534:	eddf 7a61 	vldr	s15, [pc, #388]	; 800d6bc <CRI_chart+0x414>
 800d538:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800d6c0 <CRI_chart+0x418>
 800d53c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d544:	edcd 7a03 	vstr	s15, [sp, #12]
 800d548:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d54c:	f24e 1365 	movw	r3, #57701	; 0xe165
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	22a2      	movs	r2, #162	; 0xa2
 800d554:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d558:	2098      	movs	r0, #152	; 0x98
 800d55a:	f00e fd50 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d55e:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f2c0 8158 	blt.w	800d818 <CRI_chart+0x570>
 800d568:	2b64      	cmp	r3, #100	; 0x64
 800d56a:	f300 8158 	bgt.w	800d81e <CRI_chart+0x576>
 800d56e:	ee07 3a90 	vmov	s15, r3
 800d572:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800d6b8 <CRI_chart+0x410>
 800d576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d57a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d57e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800d6bc <CRI_chart+0x414>
 800d582:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800d6c0 <CRI_chart+0x418>
 800d586:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d58a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d58e:	edcd 7a03 	vstr	s15, [sp, #12]
 800d592:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d596:	f24e 7323 	movw	r3, #59171	; 0xe723
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	22b2      	movs	r2, #178	; 0xb2
 800d59e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d5a2:	20a8      	movs	r0, #168	; 0xa8
 800d5a4:	f00e fd2b 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d5a8:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f2c0 8139 	blt.w	800d824 <CRI_chart+0x57c>
 800d5b2:	2b64      	cmp	r3, #100	; 0x64
 800d5b4:	f300 8139 	bgt.w	800d82a <CRI_chart+0x582>
 800d5b8:	ee07 3a90 	vmov	s15, r3
 800d5bc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800d6b8 <CRI_chart+0x410>
 800d5c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d5c8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800d6bc <CRI_chart+0x414>
 800d5cc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800d6c0 <CRI_chart+0x418>
 800d5d0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d5d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5d8:	edcd 7a03 	vstr	s15, [sp, #12]
 800d5dc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d5e0:	f241 4327 	movw	r3, #5159	; 0x1427
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	22c2      	movs	r2, #194	; 0xc2
 800d5e8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d5ec:	20b8      	movs	r0, #184	; 0xb8
 800d5ee:	f00e fd06 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d5f2:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f2c0 811a 	blt.w	800d830 <CRI_chart+0x588>
 800d5fc:	2b64      	cmp	r3, #100	; 0x64
 800d5fe:	f300 811a 	bgt.w	800d836 <CRI_chart+0x58e>
 800d602:	ee07 3a90 	vmov	s15, r3
 800d606:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800d6b8 <CRI_chart+0x410>
 800d60a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d60e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d612:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d6bc <CRI_chart+0x414>
 800d616:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d6c0 <CRI_chart+0x418>
 800d61a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d61e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d622:	edcd 7a03 	vstr	s15, [sp, #12]
 800d626:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d62a:	f242 138d 	movw	r3, #8589	; 0x218d
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	22d2      	movs	r2, #210	; 0xd2
 800d632:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d636:	20c8      	movs	r0, #200	; 0xc8
 800d638:	f00e fce1 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d63c:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	f2c0 80fb 	blt.w	800d83c <CRI_chart+0x594>
 800d646:	2b64      	cmp	r3, #100	; 0x64
 800d648:	f300 80fb 	bgt.w	800d842 <CRI_chart+0x59a>
 800d64c:	ee07 3a90 	vmov	s15, r3
 800d650:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d6b8 <CRI_chart+0x410>
 800d654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d658:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d65c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800d6bc <CRI_chart+0x414>
 800d660:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d6c0 <CRI_chart+0x418>
 800d664:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d66c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d670:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d674:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	22e2      	movs	r2, #226	; 0xe2
 800d67c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d680:	20d8      	movs	r0, #216	; 0xd8
 800d682:	f00e fcbc 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d686:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f2c0 80dc 	blt.w	800d848 <CRI_chart+0x5a0>
 800d690:	2b64      	cmp	r3, #100	; 0x64
 800d692:	f300 80dc 	bgt.w	800d84e <CRI_chart+0x5a6>
 800d696:	ee07 3a90 	vmov	s15, r3
 800d69a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800d6b8 <CRI_chart+0x410>
 800d69e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d6a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 800d6bc <CRI_chart+0x414>
 800d6aa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d6c0 <CRI_chart+0x418>
 800d6ae:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d6b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6b6:	e00b      	b.n	800d6d0 <CRI_chart+0x428>
 800d6b8:	42c80000 	.word	0x42c80000
 800d6bc:	43cd0000 	.word	0x43cd0000
 800d6c0:	43988000 	.word	0x43988000
 800d6c4:	42c80000 	.word	0x42c80000
 800d6c8:	43cd0000 	.word	0x43cd0000
 800d6cc:	43988000 	.word	0x43988000
 800d6d0:	edcd 7a03 	vstr	s15, [sp, #12]
 800d6d4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d6d8:	f641 3346 	movw	r3, #6982	; 0x1b46
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	22f2      	movs	r2, #242	; 0xf2
 800d6e0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d6e4:	20e8      	movs	r0, #232	; 0xe8
 800d6e6:	f00e fc8a 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d6ea:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f2c0 80b0 	blt.w	800d854 <CRI_chart+0x5ac>
 800d6f4:	2b64      	cmp	r3, #100	; 0x64
 800d6f6:	f300 80b0 	bgt.w	800d85a <CRI_chart+0x5b2>
 800d6fa:	ee07 3a90 	vmov	s15, r3
 800d6fe:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800d6c4 <CRI_chart+0x41c>
 800d702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d706:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d70a:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800d6c8 <CRI_chart+0x420>
 800d70e:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800d6cc <CRI_chart+0x424>
 800d712:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d71a:	edcd 7a03 	vstr	s15, [sp, #12]
 800d71e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800d722:	4f52      	ldr	r7, [pc, #328]	; (800d86c <CRI_chart+0x5c4>)
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d724:	ed9f 8a52 	vldr	s16, [pc, #328]	; 800d870 <CRI_chart+0x5c8>
 800d728:	eddf 8a52 	vldr	s17, [pc, #328]	; 800d874 <CRI_chart+0x5cc>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d72c:	f24f 6311 	movw	r3, #62993	; 0xf611
 800d730:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	20f8      	movs	r0, #248	; 0xf8
 800d738:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d73c:	f00e fc5f 	bl	801bffe <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800d740:	484d      	ldr	r0, [pc, #308]	; (800d878 <CRI_chart+0x5d0>)
 800d742:	f00e fe85 	bl	801c450 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800d746:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d74a:	f00e fe87 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d74e:	2063      	movs	r0, #99	; 0x63
 800d750:	f00e fe8a 	bl	801c468 <TFT_SetBackColor>
 800d754:	2418      	movs	r4, #24
			sprintf (buffer, "%d", GraphData[i]);
 800d756:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800d75a:	4639      	mov	r1, r7
 800d75c:	4630      	mov	r0, r6
 800d75e:	f012 f953 	bl	801fa08 <sprintf>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d762:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800d766:	2b00      	cmp	r3, #0
 800d768:	db7a      	blt.n	800d860 <CRI_chart+0x5b8>
 800d76a:	2b64      	cmp	r3, #100	; 0x64
 800d76c:	dc7b      	bgt.n	800d866 <CRI_chart+0x5be>
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d776:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800d77a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d87c <CRI_chart+0x5d4>
 800d77e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800d782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d786:	edcd 7a03 	vstr	s15, [sp, #12]
 800d78a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d78e:	4620      	mov	r0, r4
 800d790:	3410      	adds	r4, #16
 800d792:	2303      	movs	r3, #3
 800d794:	4632      	mov	r2, r6
 800d796:	b2a4      	uxth	r4, r4
 800d798:	f00e ff7c 	bl	801c694 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800d79c:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800d7a0:	d1d9      	bne.n	800d756 <CRI_chart+0x4ae>
					X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800d7a2:	b006      	add	sp, #24
 800d7a4:	ecbd 8b02 	vpop	{d8}
 800d7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d7ac:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7b0:	e5a4      	b.n	800d2fc <CRI_chart+0x54>
 800d7b2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7b6:	e5a1      	b.n	800d2fc <CRI_chart+0x54>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d7b8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7bc:	e5c3      	b.n	800d346 <CRI_chart+0x9e>
 800d7be:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7c2:	e5c0      	b.n	800d346 <CRI_chart+0x9e>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d7c4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7c8:	e5e2      	b.n	800d390 <CRI_chart+0xe8>
 800d7ca:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7ce:	e5df      	b.n	800d390 <CRI_chart+0xe8>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d7d0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7d4:	e601      	b.n	800d3da <CRI_chart+0x132>
 800d7d6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7da:	e5fe      	b.n	800d3da <CRI_chart+0x132>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d7dc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7e0:	e620      	b.n	800d424 <CRI_chart+0x17c>
 800d7e2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7e6:	e61d      	b.n	800d424 <CRI_chart+0x17c>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d7e8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7ec:	e63f      	b.n	800d46e <CRI_chart+0x1c6>
 800d7ee:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7f2:	e63c      	b.n	800d46e <CRI_chart+0x1c6>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d7f4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7f8:	e65e      	b.n	800d4b8 <CRI_chart+0x210>
 800d7fa:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7fe:	e65b      	b.n	800d4b8 <CRI_chart+0x210>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d800:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d804:	e67d      	b.n	800d502 <CRI_chart+0x25a>
 800d806:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d80a:	e67a      	b.n	800d502 <CRI_chart+0x25a>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d80c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d810:	e69c      	b.n	800d54c <CRI_chart+0x2a4>
 800d812:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d816:	e699      	b.n	800d54c <CRI_chart+0x2a4>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d818:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d81c:	e6bb      	b.n	800d596 <CRI_chart+0x2ee>
 800d81e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d822:	e6b8      	b.n	800d596 <CRI_chart+0x2ee>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d824:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d828:	e6da      	b.n	800d5e0 <CRI_chart+0x338>
 800d82a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d82e:	e6d7      	b.n	800d5e0 <CRI_chart+0x338>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d830:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d834:	e6f9      	b.n	800d62a <CRI_chart+0x382>
 800d836:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d83a:	e6f6      	b.n	800d62a <CRI_chart+0x382>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d83c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d840:	e718      	b.n	800d674 <CRI_chart+0x3cc>
 800d842:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d846:	e715      	b.n	800d674 <CRI_chart+0x3cc>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d848:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d84c:	e744      	b.n	800d6d8 <CRI_chart+0x430>
 800d84e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d852:	e741      	b.n	800d6d8 <CRI_chart+0x430>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d854:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d858:	e763      	b.n	800d722 <CRI_chart+0x47a>
 800d85a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d85e:	e760      	b.n	800d722 <CRI_chart+0x47a>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d860:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d864:	e793      	b.n	800d78e <CRI_chart+0x4e6>
 800d866:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800d86a:	e790      	b.n	800d78e <CRI_chart+0x4e6>
 800d86c:	08024679 	.word	0x08024679
 800d870:	42c80000 	.word	0x42c80000
 800d874:	43988000 	.word	0x43988000
 800d878:	20000210 	.word	0x20000210
 800d87c:	43c80000 	.word	0x43c80000
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d880:	2801      	cmp	r0, #1
 800d882:	4fed      	ldr	r7, [pc, #948]	; (800dc38 <CRI_chart+0x990>)
		else {TFT_direction = 0x02;}
 800d884:	bf16      	itet	ne
 800d886:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d888:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800d88a:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800d88c:	f991 3000 	ldrsb.w	r3, [r1]
 800d890:	2b00      	cmp	r3, #0
 800d892:	f2c0 8260 	blt.w	800dd56 <CRI_chart+0xaae>
 800d896:	2b64      	cmp	r3, #100	; 0x64
 800d898:	f300 825f 	bgt.w	800dd5a <CRI_chart+0xab2>
 800d89c:	ee07 3a90 	vmov	s15, r3
 800d8a0:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800dc3c <CRI_chart+0x994>
 800d8a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8ac:	eddf 7ae4 	vldr	s15, [pc, #912]	; 800dc40 <CRI_chart+0x998>
 800d8b0:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800dc44 <CRI_chart+0x99c>
 800d8b4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d8b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8bc:	edcd 7a03 	vstr	s15, [sp, #12]
 800d8c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d8c4:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d8c8:	9300      	str	r3, [sp, #0]
 800d8ca:	2262      	movs	r2, #98	; 0x62
 800d8cc:	23fc      	movs	r3, #252	; 0xfc
 800d8ce:	2057      	movs	r0, #87	; 0x57
 800d8d0:	f00e fb95 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800d8d4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f2c0 8240 	blt.w	800dd5e <CRI_chart+0xab6>
 800d8de:	2b64      	cmp	r3, #100	; 0x64
 800d8e0:	f300 823f 	bgt.w	800dd62 <CRI_chart+0xaba>
 800d8e4:	ee07 3a90 	vmov	s15, r3
 800d8e8:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800dc3c <CRI_chart+0x994>
 800d8ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8f4:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800dc40 <CRI_chart+0x998>
 800d8f8:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800dc44 <CRI_chart+0x99c>
 800d8fc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d904:	edcd 7a03 	vstr	s15, [sp, #12]
 800d908:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d90c:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	2278      	movs	r2, #120	; 0x78
 800d914:	23fc      	movs	r3, #252	; 0xfc
 800d916:	206d      	movs	r0, #109	; 0x6d
 800d918:	f00e fb71 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800d91c:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d920:	2b00      	cmp	r3, #0
 800d922:	f2c0 8220 	blt.w	800dd66 <CRI_chart+0xabe>
 800d926:	2b64      	cmp	r3, #100	; 0x64
 800d928:	f300 821f 	bgt.w	800dd6a <CRI_chart+0xac2>
 800d92c:	ee07 3a90 	vmov	s15, r3
 800d930:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800dc3c <CRI_chart+0x994>
 800d934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d938:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d93c:	eddf 7ac0 	vldr	s15, [pc, #768]	; 800dc40 <CRI_chart+0x998>
 800d940:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800dc44 <CRI_chart+0x99c>
 800d944:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d94c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d950:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d954:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	228e      	movs	r2, #142	; 0x8e
 800d95c:	23fc      	movs	r3, #252	; 0xfc
 800d95e:	2083      	movs	r0, #131	; 0x83
 800d960:	f00e fb4d 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800d964:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f2c0 8200 	blt.w	800dd6e <CRI_chart+0xac6>
 800d96e:	2b64      	cmp	r3, #100	; 0x64
 800d970:	f300 81ff 	bgt.w	800dd72 <CRI_chart+0xaca>
 800d974:	ee07 3a90 	vmov	s15, r3
 800d978:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800dc3c <CRI_chart+0x994>
 800d97c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d980:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d984:	eddf 7aae 	vldr	s15, [pc, #696]	; 800dc40 <CRI_chart+0x998>
 800d988:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800dc44 <CRI_chart+0x99c>
 800d98c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d994:	edcd 7a03 	vstr	s15, [sp, #12]
 800d998:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d99c:	f241 430f 	movw	r3, #5135	; 0x140f
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	22a4      	movs	r2, #164	; 0xa4
 800d9a4:	23fc      	movs	r3, #252	; 0xfc
 800d9a6:	2099      	movs	r0, #153	; 0x99
 800d9a8:	f00e fb29 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800d9ac:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f2c0 81e0 	blt.w	800dd76 <CRI_chart+0xace>
 800d9b6:	2b64      	cmp	r3, #100	; 0x64
 800d9b8:	f300 81df 	bgt.w	800dd7a <CRI_chart+0xad2>
 800d9bc:	ee07 3a90 	vmov	s15, r3
 800d9c0:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800dc3c <CRI_chart+0x994>
 800d9c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d9cc:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800dc40 <CRI_chart+0x998>
 800d9d0:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800dc44 <CRI_chart+0x99c>
 800d9d4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d9d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9dc:	edcd 7a03 	vstr	s15, [sp, #12]
 800d9e0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d9e4:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	22ba      	movs	r2, #186	; 0xba
 800d9ec:	23fc      	movs	r3, #252	; 0xfc
 800d9ee:	20af      	movs	r0, #175	; 0xaf
 800d9f0:	f00e fb05 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800d9f4:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f2c0 81c0 	blt.w	800dd7e <CRI_chart+0xad6>
 800d9fe:	2b64      	cmp	r3, #100	; 0x64
 800da00:	f300 81bf 	bgt.w	800dd82 <CRI_chart+0xada>
 800da04:	ee07 3a90 	vmov	s15, r3
 800da08:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800dc3c <CRI_chart+0x994>
 800da0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da14:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800dc40 <CRI_chart+0x998>
 800da18:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800dc44 <CRI_chart+0x99c>
 800da1c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da24:	edcd 7a03 	vstr	s15, [sp, #12]
 800da28:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da2c:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	22d0      	movs	r2, #208	; 0xd0
 800da34:	23fc      	movs	r3, #252	; 0xfc
 800da36:	20c5      	movs	r0, #197	; 0xc5
 800da38:	f00e fae1 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800da3c:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800da40:	2b00      	cmp	r3, #0
 800da42:	f2c0 81a0 	blt.w	800dd86 <CRI_chart+0xade>
 800da46:	2b64      	cmp	r3, #100	; 0x64
 800da48:	f300 819f 	bgt.w	800dd8a <CRI_chart+0xae2>
 800da4c:	ee07 3a90 	vmov	s15, r3
 800da50:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800dc3c <CRI_chart+0x994>
 800da54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da5c:	eddf 7a78 	vldr	s15, [pc, #480]	; 800dc40 <CRI_chart+0x998>
 800da60:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800dc44 <CRI_chart+0x99c>
 800da64:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da6c:	edcd 7a03 	vstr	s15, [sp, #12]
 800da70:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da74:	f248 4357 	movw	r3, #33879	; 0x8457
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	22e6      	movs	r2, #230	; 0xe6
 800da7c:	23fc      	movs	r3, #252	; 0xfc
 800da7e:	20db      	movs	r0, #219	; 0xdb
 800da80:	f00e fabd 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800da84:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f2c0 8180 	blt.w	800dd8e <CRI_chart+0xae6>
 800da8e:	2b64      	cmp	r3, #100	; 0x64
 800da90:	f300 817f 	bgt.w	800dd92 <CRI_chart+0xaea>
 800da94:	ee07 3a90 	vmov	s15, r3
 800da98:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800dc3c <CRI_chart+0x994>
 800da9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800daa0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800daa4:	eddf 7a66 	vldr	s15, [pc, #408]	; 800dc40 <CRI_chart+0x998>
 800daa8:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800dc44 <CRI_chart+0x99c>
 800daac:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dab4:	edcd 7a03 	vstr	s15, [sp, #12]
 800dab8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dabc:	f24a 4377 	movw	r3, #42103	; 0xa477
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	23fc      	movs	r3, #252	; 0xfc
 800dac4:	461a      	mov	r2, r3
 800dac6:	20f1      	movs	r0, #241	; 0xf1
 800dac8:	f00e fa99 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800dacc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f2c0 8160 	blt.w	800dd96 <CRI_chart+0xaee>
 800dad6:	2b64      	cmp	r3, #100	; 0x64
 800dad8:	f300 815f 	bgt.w	800dd9a <CRI_chart+0xaf2>
 800dadc:	ee07 3a90 	vmov	s15, r3
 800dae0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800dc3c <CRI_chart+0x994>
 800dae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dae8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800daec:	eddf 7a54 	vldr	s15, [pc, #336]	; 800dc40 <CRI_chart+0x998>
 800daf0:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800dc44 <CRI_chart+0x99c>
 800daf4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800daf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dafc:	edcd 7a03 	vstr	s15, [sp, #12]
 800db00:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db04:	f24e 1365 	movw	r3, #57701	; 0xe165
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800db0e:	23fc      	movs	r3, #252	; 0xfc
 800db10:	f240 1007 	movw	r0, #263	; 0x107
 800db14:	f00e fa73 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800db18:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f2c0 813e 	blt.w	800dd9e <CRI_chart+0xaf6>
 800db22:	2b64      	cmp	r3, #100	; 0x64
 800db24:	f300 813d 	bgt.w	800dda2 <CRI_chart+0xafa>
 800db28:	ee07 3a90 	vmov	s15, r3
 800db2c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800dc3c <CRI_chart+0x994>
 800db30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db38:	eddf 7a41 	vldr	s15, [pc, #260]	; 800dc40 <CRI_chart+0x998>
 800db3c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800dc44 <CRI_chart+0x99c>
 800db40:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db48:	edcd 7a03 	vstr	s15, [sp, #12]
 800db4c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db50:	f24e 7323 	movw	r3, #59171	; 0xe723
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	f44f 7294 	mov.w	r2, #296	; 0x128
 800db5a:	23fc      	movs	r3, #252	; 0xfc
 800db5c:	f240 101d 	movw	r0, #285	; 0x11d
 800db60:	f00e fa4d 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800db64:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f2c0 811c 	blt.w	800dda6 <CRI_chart+0xafe>
 800db6e:	2b64      	cmp	r3, #100	; 0x64
 800db70:	f300 811b 	bgt.w	800ddaa <CRI_chart+0xb02>
 800db74:	ee07 3a90 	vmov	s15, r3
 800db78:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dc3c <CRI_chart+0x994>
 800db7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db84:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800dc40 <CRI_chart+0x998>
 800db88:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800dc44 <CRI_chart+0x99c>
 800db8c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db94:	edcd 7a03 	vstr	s15, [sp, #12]
 800db98:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db9c:	f241 4327 	movw	r3, #5159	; 0x1427
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800dba6:	23fc      	movs	r3, #252	; 0xfc
 800dba8:	f240 1033 	movw	r0, #307	; 0x133
 800dbac:	f00e fa27 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800dbb0:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f2c0 80fa 	blt.w	800ddae <CRI_chart+0xb06>
 800dbba:	2b64      	cmp	r3, #100	; 0x64
 800dbbc:	f300 80f9 	bgt.w	800ddb2 <CRI_chart+0xb0a>
 800dbc0:	ee07 3a90 	vmov	s15, r3
 800dbc4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800dc3c <CRI_chart+0x994>
 800dbc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dbd0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800dc40 <CRI_chart+0x998>
 800dbd4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800dc44 <CRI_chart+0x99c>
 800dbd8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dbdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbe0:	edcd 7a03 	vstr	s15, [sp, #12]
 800dbe4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dbe8:	f242 138d 	movw	r3, #8589	; 0x218d
 800dbec:	9300      	str	r3, [sp, #0]
 800dbee:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800dbf2:	23fc      	movs	r3, #252	; 0xfc
 800dbf4:	f240 1049 	movw	r0, #329	; 0x149
 800dbf8:	f00e fa01 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800dbfc:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f2c0 80d8 	blt.w	800ddb6 <CRI_chart+0xb0e>
 800dc06:	2b64      	cmp	r3, #100	; 0x64
 800dc08:	f300 80d7 	bgt.w	800ddba <CRI_chart+0xb12>
 800dc0c:	ee07 3a90 	vmov	s15, r3
 800dc10:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800dc3c <CRI_chart+0x994>
 800dc14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc1c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dc40 <CRI_chart+0x998>
 800dc20:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800dc44 <CRI_chart+0x99c>
 800dc24:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc2c:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc30:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc34:	e008      	b.n	800dc48 <CRI_chart+0x9a0>
 800dc36:	bf00      	nop
 800dc38:	20005690 	.word	0x20005690
 800dc3c:	42c80000 	.word	0x42c80000
 800dc40:	437e0000 	.word	0x437e0000
 800dc44:	43520000 	.word	0x43520000
 800dc48:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800dc52:	23fc      	movs	r3, #252	; 0xfc
 800dc54:	f240 105f 	movw	r0, #351	; 0x15f
 800dc58:	f00e f9d1 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800dc5c:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f2c0 80ac 	blt.w	800ddbe <CRI_chart+0xb16>
 800dc66:	2b64      	cmp	r3, #100	; 0x64
 800dc68:	f300 80ab 	bgt.w	800ddc2 <CRI_chart+0xb1a>
 800dc6c:	ee07 3a90 	vmov	s15, r3
 800dc70:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800dc3c <CRI_chart+0x994>
 800dc74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc7c:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800dc40 <CRI_chart+0x998>
 800dc80:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 800dc44 <CRI_chart+0x99c>
 800dc84:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc8c:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc90:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc94:	f641 3346 	movw	r3, #6982	; 0x1b46
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800dc9e:	23fc      	movs	r3, #252	; 0xfc
 800dca0:	f240 1075 	movw	r0, #373	; 0x175
 800dca4:	f00e f9ab 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800dca8:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f2c0 808a 	blt.w	800ddc6 <CRI_chart+0xb1e>
 800dcb2:	2b64      	cmp	r3, #100	; 0x64
 800dcb4:	f300 8089 	bgt.w	800ddca <CRI_chart+0xb22>
 800dcb8:	ee07 3a90 	vmov	s15, r3
 800dcbc:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 800dc3c <CRI_chart+0x994>
 800dcc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dcc8:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 800dc40 <CRI_chart+0x998>
 800dccc:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800dc44 <CRI_chart+0x99c>
 800dcd0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dcd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcd8:	edcd 7a03 	vstr	s15, [sp, #12]
 800dcdc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
					sprintf (buffer, "%d", GraphData[i]);
 800dce0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800dde4 <CRI_chart+0xb3c>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800dce4:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800ddd8 <CRI_chart+0xb30>
 800dce8:	eddf 8a3c 	vldr	s17, [pc, #240]	; 800dddc <CRI_chart+0xb34>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800dcec:	f24f 6311 	movw	r3, #62993	; 0xf611
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800dcf6:	23fc      	movs	r3, #252	; 0xfc
 800dcf8:	f240 108b 	movw	r0, #395	; 0x18b
 800dcfc:	f00e f97f 	bl	801bffe <TFT_FillRectangle>
 800dd00:	2457      	movs	r4, #87	; 0x57
					sprintf (buffer, "%d", GraphData[i]);
 800dd02:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800dd06:	4641      	mov	r1, r8
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f011 fe7d 	bl	801fa08 <sprintf>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800dd0e:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	db5b      	blt.n	800ddce <CRI_chart+0xb26>
 800dd16:	2b64      	cmp	r3, #100	; 0x64
 800dd18:	dc5b      	bgt.n	800ddd2 <CRI_chart+0xb2a>
 800dd1a:	ee07 3a90 	vmov	s15, r3
 800dd1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd22:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800dd26:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800dde0 <CRI_chart+0xb38>
 800dd2a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800dd2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd32:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	4632      	mov	r2, r6
 800dd40:	3416      	adds	r4, #22
 800dd42:	f00e fca7 	bl	801c694 <TFT_DisplayString>
 800dd46:	b2a4      	uxth	r4, r4
		for(uint8_t i = 0; i<=14; i++)
 800dd48:	f240 13a1 	movw	r3, #417	; 0x1a1
 800dd4c:	429c      	cmp	r4, r3
 800dd4e:	d1d8      	bne.n	800dd02 <CRI_chart+0xa5a>
		TFT_direction = 0x00;
 800dd50:	2300      	movs	r3, #0
 800dd52:	703b      	strb	r3, [r7, #0]
}
 800dd54:	e525      	b.n	800d7a2 <CRI_chart+0x4fa>
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800dd56:	21fe      	movs	r1, #254	; 0xfe
 800dd58:	e5b4      	b.n	800d8c4 <CRI_chart+0x61c>
 800dd5a:	219a      	movs	r1, #154	; 0x9a
 800dd5c:	e5b2      	b.n	800d8c4 <CRI_chart+0x61c>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800dd5e:	21fe      	movs	r1, #254	; 0xfe
 800dd60:	e5d4      	b.n	800d90c <CRI_chart+0x664>
 800dd62:	219a      	movs	r1, #154	; 0x9a
 800dd64:	e5d2      	b.n	800d90c <CRI_chart+0x664>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800dd66:	21fe      	movs	r1, #254	; 0xfe
 800dd68:	e5f4      	b.n	800d954 <CRI_chart+0x6ac>
 800dd6a:	219a      	movs	r1, #154	; 0x9a
 800dd6c:	e5f2      	b.n	800d954 <CRI_chart+0x6ac>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800dd6e:	21fe      	movs	r1, #254	; 0xfe
 800dd70:	e614      	b.n	800d99c <CRI_chart+0x6f4>
 800dd72:	219a      	movs	r1, #154	; 0x9a
 800dd74:	e612      	b.n	800d99c <CRI_chart+0x6f4>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800dd76:	21fe      	movs	r1, #254	; 0xfe
 800dd78:	e634      	b.n	800d9e4 <CRI_chart+0x73c>
 800dd7a:	219a      	movs	r1, #154	; 0x9a
 800dd7c:	e632      	b.n	800d9e4 <CRI_chart+0x73c>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800dd7e:	21fe      	movs	r1, #254	; 0xfe
 800dd80:	e654      	b.n	800da2c <CRI_chart+0x784>
 800dd82:	219a      	movs	r1, #154	; 0x9a
 800dd84:	e652      	b.n	800da2c <CRI_chart+0x784>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800dd86:	21fe      	movs	r1, #254	; 0xfe
 800dd88:	e674      	b.n	800da74 <CRI_chart+0x7cc>
 800dd8a:	219a      	movs	r1, #154	; 0x9a
 800dd8c:	e672      	b.n	800da74 <CRI_chart+0x7cc>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800dd8e:	21fe      	movs	r1, #254	; 0xfe
 800dd90:	e694      	b.n	800dabc <CRI_chart+0x814>
 800dd92:	219a      	movs	r1, #154	; 0x9a
 800dd94:	e692      	b.n	800dabc <CRI_chart+0x814>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800dd96:	21fe      	movs	r1, #254	; 0xfe
 800dd98:	e6b4      	b.n	800db04 <CRI_chart+0x85c>
 800dd9a:	219a      	movs	r1, #154	; 0x9a
 800dd9c:	e6b2      	b.n	800db04 <CRI_chart+0x85c>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800dd9e:	21fe      	movs	r1, #254	; 0xfe
 800dda0:	e6d6      	b.n	800db50 <CRI_chart+0x8a8>
 800dda2:	219a      	movs	r1, #154	; 0x9a
 800dda4:	e6d4      	b.n	800db50 <CRI_chart+0x8a8>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800dda6:	21fe      	movs	r1, #254	; 0xfe
 800dda8:	e6f8      	b.n	800db9c <CRI_chart+0x8f4>
 800ddaa:	219a      	movs	r1, #154	; 0x9a
 800ddac:	e6f6      	b.n	800db9c <CRI_chart+0x8f4>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800ddae:	21fe      	movs	r1, #254	; 0xfe
 800ddb0:	e71a      	b.n	800dbe8 <CRI_chart+0x940>
 800ddb2:	219a      	movs	r1, #154	; 0x9a
 800ddb4:	e718      	b.n	800dbe8 <CRI_chart+0x940>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800ddb6:	21fe      	movs	r1, #254	; 0xfe
 800ddb8:	e746      	b.n	800dc48 <CRI_chart+0x9a0>
 800ddba:	219a      	movs	r1, #154	; 0x9a
 800ddbc:	e744      	b.n	800dc48 <CRI_chart+0x9a0>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800ddbe:	21fe      	movs	r1, #254	; 0xfe
 800ddc0:	e768      	b.n	800dc94 <CRI_chart+0x9ec>
 800ddc2:	219a      	movs	r1, #154	; 0x9a
 800ddc4:	e766      	b.n	800dc94 <CRI_chart+0x9ec>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800ddc6:	21fe      	movs	r1, #254	; 0xfe
 800ddc8:	e78a      	b.n	800dce0 <CRI_chart+0xa38>
 800ddca:	219a      	movs	r1, #154	; 0x9a
 800ddcc:	e788      	b.n	800dce0 <CRI_chart+0xa38>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800ddce:	21f4      	movs	r1, #244	; 0xf4
 800ddd0:	e7b3      	b.n	800dd3a <CRI_chart+0xa92>
 800ddd2:	2190      	movs	r1, #144	; 0x90
 800ddd4:	e7b1      	b.n	800dd3a <CRI_chart+0xa92>
 800ddd6:	bf00      	nop
 800ddd8:	42c80000 	.word	0x42c80000
 800dddc:	43570000 	.word	0x43570000
 800dde0:	43740000 	.word	0x43740000
 800dde4:	08024679 	.word	0x08024679

0800dde8 <CRI_Draw>:

void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800dde8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ddec:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800ddee:	2363      	movs	r3, #99	; 0x63
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	4688      	mov	r8, r1
 800ddf4:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800ddf6:	213a      	movs	r1, #58	; 0x3a
 800ddf8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	2005      	movs	r0, #5
 800de00:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800de04:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800de08:	f00e f8f9 	bl	801bffe <TFT_FillRectangle>
	CRI_Axes(direction);
 800de0c:	4620      	mov	r0, r4
 800de0e:	f7fe fe75 	bl	800cafc <CRI_Axes>
	CRI_Axes_Text(direction);
 800de12:	4620      	mov	r0, r4
 800de14:	f7fe ffee 	bl	800cdf4 <CRI_Axes_Text>
	CRI_chart(direction, GraphData);
 800de18:	4641      	mov	r1, r8
 800de1a:	4620      	mov	r0, r4
 800de1c:	f7ff fa44 	bl	800d2a8 <CRI_chart>
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800de20:	463b      	mov	r3, r7
 800de22:	4632      	mov	r2, r6
 800de24:	4629      	mov	r1, r5
 800de26:	4620      	mov	r0, r4
 800de28:	b002      	add	sp, #8
 800de2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800de2e:	f7fe bf03 	b.w	800cc38 <CRI_Axes_Measure>
	...

0800de34 <Calculate_EL_Day>:
extern float colorimetry_xy1964[2], colorimetry_uv[2], colorimetry_uv1976[2], colorimetry_xy1931[2];
extern float calibratre_x_1931[1024], Spectral_day[1024], calibratre_z_1931[1024];
	
float Calculate_EL_Day(float R_data[], float Spectral_Day_const[])
{
	sum = 0;
 800de34:	4a0c      	ldr	r2, [pc, #48]	; (800de68 <Calculate_EL_Day+0x34>)
 800de36:	2300      	movs	r3, #0
 800de38:	6013      	str	r3, [r2, #0]
 800de3a:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800de3c:	ecb0 7a01 	vldmia	r0!, {s14}
 800de40:	ecf1 7a01 	vldmia	r1!, {s15}
 800de44:	ed92 0a00 	vldr	s0, [r2]
 800de48:	eea7 0a27 	vfma.f32	s0, s14, s15
	for ( iq = 0; iq < 1024; iq++)
 800de4c:	3301      	adds	r3, #1
 800de4e:	b29b      	uxth	r3, r3
 800de50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800de54:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800de58:	d1f0      	bne.n	800de3c <Calculate_EL_Day+0x8>
 800de5a:	4a04      	ldr	r2, [pc, #16]	; (800de6c <Calculate_EL_Day+0x38>)
	}
	return 683*sum;
}
 800de5c:	eddf 7a04 	vldr	s15, [pc, #16]	; 800de70 <Calculate_EL_Day+0x3c>
 800de60:	8013      	strh	r3, [r2, #0]
 800de62:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de66:	4770      	bx	lr
 800de68:	20090a4c 	.word	0x20090a4c
 800de6c:	20090a44 	.word	0x20090a44
 800de70:	442ac000 	.word	0x442ac000

0800de74 <Calculate_EL_Day_Wt>:


float Calculate_EL_Day_Wt(float R_data[])
{
	sum = 0;
 800de74:	4a09      	ldr	r2, [pc, #36]	; (800de9c <Calculate_EL_Day_Wt+0x28>)
 800de76:	2300      	movs	r3, #0
 800de78:	6013      	str	r3, [r2, #0]
 800de7a:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]);
 800de7c:	ecf0 7a01 	vldmia	r0!, {s15}
 800de80:	ed92 0a00 	vldr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800de84:	3301      	adds	r3, #1
		sum = sum + (R_data[iq]);
 800de86:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( iq = 0; iq < 1024; iq++)
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]);
 800de90:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800de94:	d1f2      	bne.n	800de7c <Calculate_EL_Day_Wt+0x8>
 800de96:	4a02      	ldr	r2, [pc, #8]	; (800dea0 <Calculate_EL_Day_Wt+0x2c>)
 800de98:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800de9a:	4770      	bx	lr
 800de9c:	20090a4c 	.word	0x20090a4c
 800dea0:	20090a44 	.word	0x20090a44

0800dea4 <Calculate_EL_Night>:

float Calculate_EL_Night(float R_data[], float Spectral_Night_const[])
{
	sum = 0;
 800dea4:	4a0c      	ldr	r2, [pc, #48]	; (800ded8 <Calculate_EL_Night+0x34>)
 800dea6:	2300      	movs	r3, #0
 800dea8:	6013      	str	r3, [r2, #0]
 800deaa:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800deac:	ecb0 7a01 	vldmia	r0!, {s14}
 800deb0:	ecf1 7a01 	vldmia	r1!, {s15}
 800deb4:	ed92 0a00 	vldr	s0, [r2]
 800deb8:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800debc:	3301      	adds	r3, #1
 800debe:	b29b      	uxth	r3, r3
 800dec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800dec4:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800dec8:	d1f0      	bne.n	800deac <Calculate_EL_Night+0x8>
 800deca:	4a04      	ldr	r2, [pc, #16]	; (800dedc <Calculate_EL_Night+0x38>)
	}
	return 1700*sum;
}
 800decc:	eddf 7a04 	vldr	s15, [pc, #16]	; 800dee0 <Calculate_EL_Night+0x3c>
 800ded0:	8013      	strh	r3, [r2, #0]
 800ded2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ded6:	4770      	bx	lr
 800ded8:	20090a4c 	.word	0x20090a4c
 800dedc:	20090a44 	.word	0x20090a44
 800dee0:	44d48000 	.word	0x44d48000

0800dee4 <Calculate_SP>:

float Calculate_SP(float EL_day_data, float EL_Night_data)
{
	return (EL_day_data !=0) ? EL_Night_data/EL_day_data: 0;
 800dee4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deec:	bf14      	ite	ne
 800deee:	eec0 7a80 	vdivne.f32	s15, s1, s0
 800def2:	eddf 7a02 	vldreq	s15, [pc, #8]	; 800defc <Calculate_SP+0x18>
}
 800def6:	eeb0 0a67 	vmov.f32	s0, s15
 800defa:	4770      	bx	lr
 800defc:	00000000 	.word	0x00000000

0800df00 <Calculate_PPFD_PPL>:

float Calculate_PPFD_PPL(float R_data[], float Wavelenght[])
{
 800df00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t it = 0, beg = 0, end = 1024;

	while(Wavelenght[it]<400)
 800df04:	eddf 7a30 	vldr	s15, [pc, #192]	; 800dfc8 <Calculate_PPFD_PPL+0xc8>
 800df08:	2300      	movs	r3, #0
 800df0a:	b29c      	uxth	r4, r3
 800df0c:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 800df10:	ed92 7a00 	vldr	s14, [r2]
 800df14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df1c:	f103 0301 	add.w	r3, r3, #1
 800df20:	d4f3      	bmi.n	800df0a <Calculate_PPFD_PPL+0xa>
	{
		it++;
	}
	beg = it+1;
 800df22:	3401      	adds	r4, #1

	it = 1024;
	while(Wavelenght[it]>700)
 800df24:	eddf 7a29 	vldr	s15, [pc, #164]	; 800dfcc <Calculate_PPFD_PPL+0xcc>
	beg = it+1;
 800df28:	b2a4      	uxth	r4, r4
	it = 1024;
 800df2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
	while(Wavelenght[it]>700)
 800df2e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800df32:	ed92 7a00 	vldr	s14, [r2]
 800df36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df3a:	3b01      	subs	r3, #1
 800df3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
		it--;
 800df40:	b29b      	uxth	r3, r3
	while(Wavelenght[it]>700)
 800df42:	dcf4      	bgt.n	800df2e <Calculate_PPFD_PPL+0x2e>
	}
	end = it-1;


	sum = 0;
	for (iq = beg; iq < end; iq++)
 800df44:	4a22      	ldr	r2, [pc, #136]	; (800dfd0 <Calculate_PPFD_PPL+0xd0>)
	sum = 0;
 800df46:	4d23      	ldr	r5, [pc, #140]	; (800dfd4 <Calculate_PPFD_PPL+0xd4>)
	end = it-1;
 800df48:	9300      	str	r3, [sp, #0]
	{
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df4a:	a71d      	add	r7, pc, #116	; (adr r7, 800dfc0 <Calculate_PPFD_PPL+0xc0>)
 800df4c:	e9d7 6700 	ldrd	r6, r7, [r7]
	sum = 0;
 800df50:	2300      	movs	r3, #0
 800df52:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800df56:	602b      	str	r3, [r5, #0]
 800df58:	eb00 0b0a 	add.w	fp, r0, sl
	for (iq = beg; iq < end; iq++)
 800df5c:	8014      	strh	r4, [r2, #0]
 800df5e:	448a      	add	sl, r1
 800df60:	2300      	movs	r3, #0
 800df62:	9201      	str	r2, [sp, #4]
 800df64:	9a00      	ldr	r2, [sp, #0]
 800df66:	42a2      	cmp	r2, r4
 800df68:	d807      	bhi.n	800df7a <Calculate_PPFD_PPL+0x7a>
 800df6a:	b10b      	cbz	r3, 800df70 <Calculate_PPFD_PPL+0x70>
 800df6c:	9b01      	ldr	r3, [sp, #4]
 800df6e:	801c      	strh	r4, [r3, #0]
	}
	return sum;
}
 800df70:	ed95 0a00 	vldr	s0, [r5]
 800df74:	b003      	add	sp, #12
 800df76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df7a:	ecbb 7a01 	vldmia	fp!, {s14}
 800df7e:	ecfa 7a01 	vldmia	sl!, {s15}
 800df82:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (iq = beg; iq < end; iq++)
 800df86:	3401      	adds	r4, #1
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df88:	ee17 0a90 	vmov	r0, s15
 800df8c:	f7f2 faf4 	bl	8000578 <__aeabi_f2d>
 800df90:	4632      	mov	r2, r6
 800df92:	463b      	mov	r3, r7
 800df94:	f7f2 fb44 	bl	8000620 <__aeabi_dmul>
 800df98:	4680      	mov	r8, r0
 800df9a:	6828      	ldr	r0, [r5, #0]
 800df9c:	4689      	mov	r9, r1
 800df9e:	f7f2 faeb 	bl	8000578 <__aeabi_f2d>
 800dfa2:	460b      	mov	r3, r1
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	4649      	mov	r1, r9
 800dfa8:	4640      	mov	r0, r8
 800dfaa:	f7f2 f987 	bl	80002bc <__adddf3>
 800dfae:	f7f2 fe2f 	bl	8000c10 <__aeabi_d2f>
	for (iq = beg; iq < end; iq++)
 800dfb2:	b2a4      	uxth	r4, r4
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800dfb4:	6028      	str	r0, [r5, #0]
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e7d4      	b.n	800df64 <Calculate_PPFD_PPL+0x64>
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w
 800dfc0:	73f2981b 	.word	0x73f2981b
 800dfc4:	3f811eb6 	.word	0x3f811eb6
 800dfc8:	43c80000 	.word	0x43c80000
 800dfcc:	442f0000 	.word	0x442f0000
 800dfd0:	20090a44 	.word	0x20090a44
 800dfd4:	20090a4c 	.word	0x20090a4c

0800dfd8 <Calculate_PPFD_PPL_Range>:

float Calculate_PPFD_PPL_Range(float R_data[], float Wavelenght[], uint8_t Range)
{
 800dfd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t Range_min, Range_max;
	sum = 0;
 800dfdc:	4d34      	ldr	r5, [pc, #208]	; (800e0b0 <Calculate_PPFD_PPL_Range+0xd8>)
 800dfde:	2300      	movs	r3, #0
 800dfe0:	602b      	str	r3, [r5, #0]
	
	if (Range == BLUE_RANGE)
 800dfe2:	b1f2      	cbz	r2, 800e022 <Calculate_PPFD_PPL_Range+0x4a>
	{
		Range_min = 400;
		Range_max = 500;
	} else if (Range == GREEN_RANGE)
 800dfe4:	2a01      	cmp	r2, #1
 800dfe6:	d021      	beq.n	800e02c <Calculate_PPFD_PPL_Range+0x54>
	{
		Range_min = 500;
		Range_max = 600;
	} else if (Range == RED_RANGE)
 800dfe8:	2a02      	cmp	r2, #2
 800dfea:	d024      	beq.n	800e036 <Calculate_PPFD_PPL_Range+0x5e>
		Range_min = 600;
		Range_max = 700;
	}else if (Range == FAR_RED_RANGE)
	{
		Range_min = 700;
		Range_max = 1000;
 800dfec:	2a03      	cmp	r2, #3
 800dfee:	bf0b      	itete	eq
 800dff0:	f44f 7a7a 	moveq.w	sl, #1000	; 0x3e8
 800dff4:	f04f 0a00 	movne.w	sl, #0
 800dff8:	f44f 772f 	moveq.w	r7, #700	; 0x2bc
 800dffc:	2700      	movne	r7, #0
	}
	
	for(iq = 0; iq < 1024; iq++)
 800dffe:	4a2d      	ldr	r2, [pc, #180]	; (800e0b4 <Calculate_PPFD_PPL_Range+0xdc>)
 800e000:	9201      	str	r2, [sp, #4]
 800e002:	2400      	movs	r4, #0
 800e004:	8014      	strh	r4, [r2, #0]
 800e006:	4606      	mov	r6, r0
 800e008:	468b      	mov	fp, r1
 800e00a:	4623      	mov	r3, r4
 800e00c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e010:	d116      	bne.n	800e040 <Calculate_PPFD_PPL_Range+0x68>
 800e012:	b10b      	cbz	r3, 800e018 <Calculate_PPFD_PPL_Range+0x40>
 800e014:	9b01      	ldr	r3, [sp, #4]
 800e016:	801c      	strh	r4, [r3, #0]
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
			}
		}
	}
	return sum;
}
 800e018:	ed95 0a00 	vldr	s0, [r5]
 800e01c:	b003      	add	sp, #12
 800e01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Range_max = 500;
 800e022:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
		Range_min = 400;
 800e026:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800e02a:	e7e8      	b.n	800dffe <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 600;
 800e02c:	f44f 7a16 	mov.w	sl, #600	; 0x258
		Range_min = 500;
 800e030:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800e034:	e7e3      	b.n	800dffe <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 700;
 800e036:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
		Range_min = 600;
 800e03a:	f44f 7716 	mov.w	r7, #600	; 0x258
 800e03e:	e7de      	b.n	800dffe <Calculate_PPFD_PPL_Range+0x26>
		if(Wavelenght[iq] > Range_min && Wavelenght[iq] < Range_max)
 800e040:	ee07 7a10 	vmov	s14, r7
 800e044:	ecfb 7a01 	vldmia	fp!, {s15}
 800e048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e04c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e054:	dd23      	ble.n	800e09e <Calculate_PPFD_PPL_Range+0xc6>
 800e056:	ee07 aa10 	vmov	s14, sl
 800e05a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e05e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e066:	d51a      	bpl.n	800e09e <Calculate_PPFD_PPL_Range+0xc6>
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e068:	ed96 7a00 	vldr	s14, [r6]
 800e06c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e070:	ee17 0a90 	vmov	r0, s15
 800e074:	f7f2 fa80 	bl	8000578 <__aeabi_f2d>
 800e078:	a30b      	add	r3, pc, #44	; (adr r3, 800e0a8 <Calculate_PPFD_PPL_Range+0xd0>)
 800e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07e:	f7f2 facf 	bl	8000620 <__aeabi_dmul>
 800e082:	4680      	mov	r8, r0
 800e084:	6828      	ldr	r0, [r5, #0]
 800e086:	4689      	mov	r9, r1
 800e088:	f7f2 fa76 	bl	8000578 <__aeabi_f2d>
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	4640      	mov	r0, r8
 800e092:	4649      	mov	r1, r9
 800e094:	f7f2 f912 	bl	80002bc <__adddf3>
 800e098:	f7f2 fdba 	bl	8000c10 <__aeabi_d2f>
 800e09c:	6028      	str	r0, [r5, #0]
 800e09e:	3401      	adds	r4, #1
 800e0a0:	b2a4      	uxth	r4, r4
 800e0a2:	3604      	adds	r6, #4
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e7b1      	b.n	800e00c <Calculate_PPFD_PPL_Range+0x34>
 800e0a8:	73f2981b 	.word	0x73f2981b
 800e0ac:	3f811eb6 	.word	0x3f811eb6
 800e0b0:	20090a4c 	.word	0x20090a4c
 800e0b4:	20090a44 	.word	0x20090a44

0800e0b8 <Calculate_ELb>:
	return sum;
}

float Calculate_ELb(float R_data[], float Hazard_Blue[])
{
		sum = 0;
 800e0b8:	4a0a      	ldr	r2, [pc, #40]	; (800e0e4 <Calculate_ELb+0x2c>)
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	6013      	str	r3, [r2, #0]
 800e0be:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e0c0:	ecb0 7a01 	vldmia	r0!, {s14}
 800e0c4:	ecf1 7a01 	vldmia	r1!, {s15}
 800e0c8:	ed92 0a00 	vldr	s0, [r2]
 800e0cc:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e0d8:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e0dc:	d1f0      	bne.n	800e0c0 <Calculate_ELb+0x8>
 800e0de:	4a02      	ldr	r2, [pc, #8]	; (800e0e8 <Calculate_ELb+0x30>)
 800e0e0:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e0e2:	4770      	bx	lr
 800e0e4:	20090a4c 	.word	0x20090a4c
 800e0e8:	20090a44 	.word	0x20090a44

0800e0ec <Calculate_ELr>:
 800e0ec:	f7ff bfe4 	b.w	800e0b8 <Calculate_ELb>

0800e0f0 <Calculate_XYZ1964>:




void Calculate_XYZ1964(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e0f0:	b5d0      	push	{r4, r6, r7, lr}
 800e0f2:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e0f6:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e17c <Calculate_XYZ1964+0x8c>
{
 800e0fa:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e0fc:	eef0 7a48 	vmov.f32	s15, s16
 800e100:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1964[0] = 0;
	colorimetry_XYZ1964[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e104:	ecb0 7a01 	vldmia	r0!, {s14}
 800e108:	ecf1 6a01 	vldmia	r1!, {s13}
 800e10c:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e110:	3401      	adds	r4, #1
 800e112:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e114:	ecf2 6a01 	vldmia	r2!, {s13}
 800e118:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e11c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e120:	ecf3 6a01 	vldmia	r3!, {s13}
 800e124:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e128:	d1ec      	bne.n	800e104 <Calculate_XYZ1964+0x14>
	}
	
	k = 100/Y_sum;
 800e12a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e180 <Calculate_XYZ1964+0x90>
 800e12e:	4b15      	ldr	r3, [pc, #84]	; (800e184 <Calculate_XYZ1964+0x94>)
 800e130:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e134:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1964[0] = k*X_sum;
 800e136:	4c14      	ldr	r4, [pc, #80]	; (800e188 <Calculate_XYZ1964+0x98>)
	k = 100/Y_sum;
 800e138:	ee16 0a90 	vmov	r0, s13
 800e13c:	f7f2 fa1c 	bl	8000578 <__aeabi_f2d>
 800e140:	4606      	mov	r6, r0
 800e142:	460f      	mov	r7, r1
	colorimetry_XYZ1964[0] = k*X_sum;
 800e144:	ee18 0a90 	vmov	r0, s17
 800e148:	f7f2 fa16 	bl	8000578 <__aeabi_f2d>
 800e14c:	4632      	mov	r2, r6
 800e14e:	463b      	mov	r3, r7
 800e150:	f7f2 fa66 	bl	8000620 <__aeabi_dmul>
 800e154:	f7f2 fd3c 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1964[1] = 100;
 800e158:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1964[0] = k*X_sum;
 800e15a:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1964[1] = 100;
 800e15c:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e15e:	ee18 0a10 	vmov	r0, s16
 800e162:	f7f2 fa09 	bl	8000578 <__aeabi_f2d>
 800e166:	4632      	mov	r2, r6
 800e168:	463b      	mov	r3, r7
 800e16a:	f7f2 fa59 	bl	8000620 <__aeabi_dmul>
 800e16e:	f7f2 fd2f 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e172:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e176:	80a0      	strh	r0, [r4, #4]
}
 800e178:	bdd0      	pop	{r4, r6, r7, pc}
 800e17a:	bf00      	nop
 800e17c:	00000000 	.word	0x00000000
 800e180:	42c80000 	.word	0x42c80000
 800e184:	20090a44 	.word	0x20090a44
 800e188:	2008f518 	.word	0x2008f518

0800e18c <Calculate_XYZ1931>:
void Calculate_XYZ1931(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e18c:	b5d0      	push	{r4, r6, r7, lr}
 800e18e:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e192:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e218 <Calculate_XYZ1931+0x8c>
{
 800e196:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e198:	eef0 7a48 	vmov.f32	s15, s16
 800e19c:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1931[0] = 0;
	colorimetry_XYZ1931[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e1a0:	ecb0 7a01 	vldmia	r0!, {s14}
 800e1a4:	ecf1 6a01 	vldmia	r1!, {s13}
 800e1a8:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e1ac:	3401      	adds	r4, #1
 800e1ae:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e1b0:	ecf2 6a01 	vldmia	r2!, {s13}
 800e1b4:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e1b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e1bc:	ecf3 6a01 	vldmia	r3!, {s13}
 800e1c0:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e1c4:	d1ec      	bne.n	800e1a0 <Calculate_XYZ1931+0x14>
	}
	
	k = 100/Y_sum;
 800e1c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e21c <Calculate_XYZ1931+0x90>
 800e1ca:	4b15      	ldr	r3, [pc, #84]	; (800e220 <Calculate_XYZ1931+0x94>)
 800e1cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e1d0:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1931[0] = k*X_sum;
 800e1d2:	4c14      	ldr	r4, [pc, #80]	; (800e224 <Calculate_XYZ1931+0x98>)
	k = 100/Y_sum;
 800e1d4:	ee16 0a90 	vmov	r0, s13
 800e1d8:	f7f2 f9ce 	bl	8000578 <__aeabi_f2d>
 800e1dc:	4606      	mov	r6, r0
 800e1de:	460f      	mov	r7, r1
	colorimetry_XYZ1931[0] = k*X_sum;
 800e1e0:	ee18 0a90 	vmov	r0, s17
 800e1e4:	f7f2 f9c8 	bl	8000578 <__aeabi_f2d>
 800e1e8:	4632      	mov	r2, r6
 800e1ea:	463b      	mov	r3, r7
 800e1ec:	f7f2 fa18 	bl	8000620 <__aeabi_dmul>
 800e1f0:	f7f2 fcee 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1931[1] = 100;
 800e1f4:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1931[0] = k*X_sum;
 800e1f6:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1931[1] = 100;
 800e1f8:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e1fa:	ee18 0a10 	vmov	r0, s16
 800e1fe:	f7f2 f9bb 	bl	8000578 <__aeabi_f2d>
 800e202:	4632      	mov	r2, r6
 800e204:	463b      	mov	r3, r7
 800e206:	f7f2 fa0b 	bl	8000620 <__aeabi_dmul>
 800e20a:	f7f2 fce1 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e20e:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e212:	80a0      	strh	r0, [r4, #4]
}
 800e214:	bdd0      	pop	{r4, r6, r7, pc}
 800e216:	bf00      	nop
 800e218:	00000000 	.word	0x00000000
 800e21c:	42c80000 	.word	0x42c80000
 800e220:	20090a44 	.word	0x20090a44
 800e224:	2008f512 	.word	0x2008f512

0800e228 <Calculate_xy1964>:
void Calculate_xy1964(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e228:	8801      	ldrh	r1, [r0, #0]
 800e22a:	8842      	ldrh	r2, [r0, #2]
 800e22c:	8880      	ldrh	r0, [r0, #4]
 800e22e:	188b      	adds	r3, r1, r2
 800e230:	4403      	add	r3, r0
	
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e232:	b29b      	uxth	r3, r3
 800e234:	ee07 3a90 	vmov	s15, r3
 800e238:	ee07 1a10 	vmov	s14, r1
 800e23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e240:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e244:	4b06      	ldr	r3, [pc, #24]	; (800e260 <Calculate_xy1964+0x38>)
 800e246:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e24a:	ee07 2a10 	vmov	s14, r2
 800e24e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e252:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e256:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e25a:	edc3 6a01 	vstr	s13, [r3, #4]
 800e25e:	4770      	bx	lr
 800e260:	2008f538 	.word	0x2008f538

0800e264 <Calculate_xy1931>:
}

void Calculate_xy1931(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e264:	8801      	ldrh	r1, [r0, #0]
 800e266:	8842      	ldrh	r2, [r0, #2]
 800e268:	8880      	ldrh	r0, [r0, #4]
 800e26a:	188b      	adds	r3, r1, r2
 800e26c:	4403      	add	r3, r0
	
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e26e:	b29b      	uxth	r3, r3
 800e270:	ee07 3a90 	vmov	s15, r3
 800e274:	ee07 1a10 	vmov	s14, r1
 800e278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e27c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e280:	4b06      	ldr	r3, [pc, #24]	; (800e29c <Calculate_xy1931+0x38>)
 800e282:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e286:	ee07 2a10 	vmov	s14, r2
 800e28a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e28e:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e292:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e296:	edc3 6a01 	vstr	s13, [r3, #4]
 800e29a:	4770      	bx	lr
 800e29c:	2008f530 	.word	0x2008f530

0800e2a0 <Calculate_uv>:
}

void Calculate_uv(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e2a0:	ed90 7a01 	vldr	s14, [r0, #4]
 800e2a4:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e2a8:	4b0e      	ldr	r3, [pc, #56]	; (800e2e4 <Calculate_uv+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e2aa:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2b2:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e2b6:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e2ba:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e2be:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e2c2:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e2c6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e2ca:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e2ce:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e2d2:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e2d6:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e2da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e2de:	edc3 6a01 	vstr	s13, [r3, #4]
 800e2e2:	4770      	bx	lr
 800e2e4:	2008f520 	.word	0x2008f520

0800e2e8 <Calculate_uv1976>:
}

void Calculate_uv1976(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e2e8:	ed90 7a01 	vldr	s14, [r0, #4]
 800e2ec:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e2f0:	4b0e      	ldr	r3, [pc, #56]	; (800e32c <Calculate_uv1976+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e2f2:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2fa:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e2fe:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e302:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e306:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e30a:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e30e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e312:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e316:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800e31a:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e31e:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e322:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e326:	edc3 6a01 	vstr	s13, [r3, #4]
 800e32a:	4770      	bx	lr
 800e32c:	2008f528 	.word	0x2008f528

0800e330 <Calculate_Tc>:
}

double up = 0, vp = 0, factor_uvp = 0, result_tc, u_dop = 0, v_dop = 0, deltaC = 0;
float Calculate_Tc(float R_data[], uint8_t CIE_Type)
{
 800e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e334:	ed2d 8b02 	vpush	{d8}
 800e338:	b08b      	sub	sp, #44	; 0x2c
	
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
	uint8_t	 i_min1 = 0, i_min2 = 0;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800e33a:	b921      	cbnz	r1, 800e346 <Calculate_Tc+0x16>
	{
		Calculate_XYZ1931(R_data, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 800e33c:	4bb4      	ldr	r3, [pc, #720]	; (800e610 <Calculate_Tc+0x2e0>)
 800e33e:	4ab5      	ldr	r2, [pc, #724]	; (800e614 <Calculate_Tc+0x2e4>)
 800e340:	49b5      	ldr	r1, [pc, #724]	; (800e618 <Calculate_Tc+0x2e8>)
 800e342:	f7ff ff23 	bl	800e18c <Calculate_XYZ1931>
	}
	
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e346:	4bb5      	ldr	r3, [pc, #724]	; (800e61c <Calculate_Tc+0x2ec>)
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e348:	eddf 8ab5 	vldr	s17, [pc, #724]	; 800e620 <Calculate_Tc+0x2f0>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e34c:	885e      	ldrh	r6, [r3, #2]
 800e34e:	881f      	ldrh	r7, [r3, #0]
 800e350:	889b      	ldrh	r3, [r3, #4]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
	
	
	for(uint8_t i = 0; i < 31; i++)
	{
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e352:	f8df a30c 	ldr.w	sl, [pc, #780]	; 800e660 <Calculate_Tc+0x330>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e356:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800e35a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e35e:	4438      	add	r0, r7
 800e360:	4418      	add	r0, r3
 800e362:	f7f2 f8f7 	bl	8000554 <__aeabi_i2d>
 800e366:	4baf      	ldr	r3, [pc, #700]	; (800e624 <Calculate_Tc+0x2f4>)
 800e368:	4604      	mov	r4, r0
 800e36a:	460d      	mov	r5, r1
 800e36c:	e9c3 4500 	strd	r4, r5, [r3]
	up = (4.*colorimetry_XYZ1931[0])/factor_uvp;
 800e370:	4638      	mov	r0, r7
 800e372:	f7f2 f8ef 	bl	8000554 <__aeabi_i2d>
 800e376:	2200      	movs	r2, #0
 800e378:	4bab      	ldr	r3, [pc, #684]	; (800e628 <Calculate_Tc+0x2f8>)
 800e37a:	4fac      	ldr	r7, [pc, #688]	; (800e62c <Calculate_Tc+0x2fc>)
 800e37c:	f7f2 f950 	bl	8000620 <__aeabi_dmul>
 800e380:	4622      	mov	r2, r4
 800e382:	462b      	mov	r3, r5
 800e384:	f7f2 fa76 	bl	8000874 <__aeabi_ddiv>
 800e388:	4ba9      	ldr	r3, [pc, #676]	; (800e630 <Calculate_Tc+0x300>)
 800e38a:	e9cd 0100 	strd	r0, r1, [sp]
 800e38e:	e9c3 0100 	strd	r0, r1, [r3]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
 800e392:	4630      	mov	r0, r6
 800e394:	f7f2 f8de 	bl	8000554 <__aeabi_i2d>
 800e398:	2200      	movs	r2, #0
 800e39a:	4ba6      	ldr	r3, [pc, #664]	; (800e634 <Calculate_Tc+0x304>)
 800e39c:	f7f2 f940 	bl	8000620 <__aeabi_dmul>
 800e3a0:	462b      	mov	r3, r5
 800e3a2:	4622      	mov	r2, r4
 800e3a4:	f7f2 fa66 	bl	8000874 <__aeabi_ddiv>
 800e3a8:	4ba3      	ldr	r3, [pc, #652]	; (800e638 <Calculate_Tc+0x308>)
 800e3aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3ae:	2600      	movs	r6, #0
 800e3b0:	e9c3 0100 	strd	r0, r1, [r3]
 800e3b4:	4ba1      	ldr	r3, [pc, #644]	; (800e63c <Calculate_Tc+0x30c>)
 800e3b6:	9304      	str	r3, [sp, #16]
	uint8_t	 i_min1 = 0, i_min2 = 0;
 800e3b8:	4635      	mov	r5, r6
 800e3ba:	4634      	mov	r4, r6
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e3bc:	eeb0 8a68 	vmov.f32	s16, s17
 800e3c0:	46d3      	mov	fp, sl
 800e3c2:	b2f3      	uxtb	r3, r6
 800e3c4:	9307      	str	r3, [sp, #28]
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e3c6:	9b04      	ldr	r3, [sp, #16]
 800e3c8:	ecf3 7a01 	vldmia	r3!, {s15}
 800e3cc:	9304      	str	r3, [sp, #16]
 800e3ce:	4b9c      	ldr	r3, [pc, #624]	; (800e640 <Calculate_Tc+0x310>)
 800e3d0:	edcd 7a05 	vstr	s15, [sp, #20]
 800e3d4:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800e3d8:	ecf7 7a01 	vldmia	r7!, {s15}
 800e3dc:	edcd 7a06 	vstr	s15, [sp, #24]
 800e3e0:	ee07 0a90 	vmov	s15, r0
 800e3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3e8:	ee17 0a90 	vmov	r0, s15
 800e3ec:	f7f2 f8c4 	bl	8000578 <__aeabi_f2d>
 800e3f0:	a381      	add	r3, pc, #516	; (adr r3, 800e5f8 <Calculate_Tc+0x2c8>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	f7f2 fa3d 	bl	8000874 <__aeabi_ddiv>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e402:	f7f1 ff59 	bl	80002b8 <__aeabi_dsub>
 800e406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e40a:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 800e40e:	ee07 0a90 	vmov	s15, r0
 800e412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e416:	3601      	adds	r6, #1
 800e418:	ee17 0a90 	vmov	r0, s15
 800e41c:	f7f2 f8ac 	bl	8000578 <__aeabi_f2d>
 800e420:	a375      	add	r3, pc, #468	; (adr r3, 800e5f8 <Calculate_Tc+0x2c8>)
 800e422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e426:	f7f2 fa25 	bl	8000874 <__aeabi_ddiv>
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e432:	f7f1 ff41 	bl	80002b8 <__aeabi_dsub>
 800e436:	4680      	mov	r8, r0
 800e438:	9805      	ldr	r0, [sp, #20]
 800e43a:	4689      	mov	r9, r1
 800e43c:	f7f2 f89c 	bl	8000578 <__aeabi_f2d>
 800e440:	4602      	mov	r2, r0
 800e442:	460b      	mov	r3, r1
 800e444:	4640      	mov	r0, r8
 800e446:	4649      	mov	r1, r9
 800e448:	f7f2 f8ea 	bl	8000620 <__aeabi_dmul>
 800e44c:	4602      	mov	r2, r0
 800e44e:	460b      	mov	r3, r1
 800e450:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e454:	f7f1 ff30 	bl	80002b8 <__aeabi_dsub>
 800e458:	4680      	mov	r8, r0
 800e45a:	9806      	ldr	r0, [sp, #24]
 800e45c:	4689      	mov	r9, r1
 800e45e:	f7f2 f88b 	bl	8000578 <__aeabi_f2d>
 800e462:	4602      	mov	r2, r0
 800e464:	460b      	mov	r3, r1
 800e466:	4640      	mov	r0, r8
 800e468:	4649      	mov	r1, r9
 800e46a:	f7f2 fa03 	bl	8000874 <__aeabi_ddiv>
 800e46e:	f7f2 fbcf 	bl	8000c10 <__aeabi_d2f>
 800e472:	ee07 0a10 	vmov	s14, r0
		if (fabs(dmin1) > fabs(dline)) {
 800e476:	eef0 7ac8 	vabs.f32	s15, s16
 800e47a:	eef0 6ac7 	vabs.f32	s13, s14
 800e47e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e486:	bfc1      	itttt	gt
 800e488:	4625      	movgt	r5, r4
 800e48a:	eef0 8a48 	vmovgt.f32	s17, s16
 800e48e:	9c07      	ldrgt	r4, [sp, #28]
				dmin2 = dmin1; 
				dmin1 = dline;
 800e490:	eeb0 8a47 	vmovgt.f32	s16, s14
	for(uint8_t i = 0; i < 31; i++)
 800e494:	2e1f      	cmp	r6, #31
 800e496:	d194      	bne.n	800e3c2 <Calculate_Tc+0x92>
				i_min2 = i_min1;
				i_min1 = i;
			}
	}
	
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e498:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e49c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800e640 <Calculate_Tc+0x310>
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e4a0:	f7f2 f858 	bl	8000554 <__aeabi_i2d>
 800e4a4:	a354      	add	r3, pc, #336	; (adr r3, 800e5f8 <Calculate_Tc+0x2c8>)
 800e4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4aa:	f7f2 f9e3 	bl	8000874 <__aeabi_ddiv>
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800e4b4:	460f      	mov	r7, r1
 800e4b6:	f7f2 f84d 	bl	8000554 <__aeabi_i2d>
 800e4ba:	a34f      	add	r3, pc, #316	; (adr r3, 800e5f8 <Calculate_Tc+0x2c8>)
 800e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c0:	f7f2 f9d8 	bl	8000874 <__aeabi_ddiv>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	4639      	mov	r1, r7
 800e4cc:	f7f1 fef6 	bl	80002bc <__adddf3>
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	4b5c      	ldr	r3, [pc, #368]	; (800e644 <Calculate_Tc+0x314>)
 800e4d4:	f7f2 f8a4 	bl	8000620 <__aeabi_dmul>
 800e4d8:	4b5b      	ldr	r3, [pc, #364]	; (800e648 <Calculate_Tc+0x318>)
 800e4da:	4680      	mov	r8, r0
 800e4dc:	4689      	mov	r9, r1
 800e4de:	e9c3 8900 	strd	r8, r9, [r3]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e4e2:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800e4e6:	f7f2 f835 	bl	8000554 <__aeabi_i2d>
 800e4ea:	a343      	add	r3, pc, #268	; (adr r3, 800e5f8 <Calculate_Tc+0x2c8>)
 800e4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f0:	f7f2 f9c0 	bl	8000874 <__aeabi_ddiv>
 800e4f4:	4606      	mov	r6, r0
 800e4f6:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 800e4fa:	460f      	mov	r7, r1
 800e4fc:	f7f2 f82a 	bl	8000554 <__aeabi_i2d>
 800e500:	a33d      	add	r3, pc, #244	; (adr r3, 800e5f8 <Calculate_Tc+0x2c8>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f2 f9b5 	bl	8000874 <__aeabi_ddiv>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4630      	mov	r0, r6
 800e510:	4639      	mov	r1, r7
 800e512:	f7f1 fed3 	bl	80002bc <__adddf3>
 800e516:	2200      	movs	r2, #0
 800e518:	4b4a      	ldr	r3, [pc, #296]	; (800e644 <Calculate_Tc+0x314>)
 800e51a:	f7f2 f881 	bl	8000620 <__aeabi_dmul>
 800e51e:	4b4b      	ldr	r3, [pc, #300]	; (800e64c <Calculate_Tc+0x31c>)
 800e520:	4606      	mov	r6, r0
 800e522:	460f      	mov	r7, r1
 800e524:	e9c3 6700 	strd	r6, r7, [r3]
	
	deltaC = sqrt((pow((u_dop - up), 2)+ pow((v_dop - vp), 2)));
 800e528:	4640      	mov	r0, r8
 800e52a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e52e:	4649      	mov	r1, r9
 800e530:	f7f1 fec2 	bl	80002b8 <__aeabi_dsub>
 800e534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e538:	4680      	mov	r8, r0
 800e53a:	4689      	mov	r9, r1
 800e53c:	4630      	mov	r0, r6
 800e53e:	4639      	mov	r1, r7
 800e540:	f7f1 feba 	bl	80002b8 <__aeabi_dsub>
 800e544:	4642      	mov	r2, r8
 800e546:	4606      	mov	r6, r0
 800e548:	460f      	mov	r7, r1
 800e54a:	464b      	mov	r3, r9
 800e54c:	4640      	mov	r0, r8
 800e54e:	4649      	mov	r1, r9
 800e550:	f7f2 f866 	bl	8000620 <__aeabi_dmul>
 800e554:	4632      	mov	r2, r6
 800e556:	4680      	mov	r8, r0
 800e558:	4689      	mov	r9, r1
 800e55a:	463b      	mov	r3, r7
 800e55c:	4630      	mov	r0, r6
 800e55e:	4639      	mov	r1, r7
 800e560:	f7f2 f85e 	bl	8000620 <__aeabi_dmul>
 800e564:	4602      	mov	r2, r0
 800e566:	460b      	mov	r3, r1
 800e568:	4640      	mov	r0, r8
 800e56a:	4649      	mov	r1, r9
 800e56c:	f7f1 fea6 	bl	80002bc <__adddf3>
 800e570:	ec41 0b10 	vmov	d0, r0, r1
 800e574:	f014 fcec 	bl	8022f50 <sqrt>
 800e578:	4b35      	ldr	r3, [pc, #212]	; (800e650 <Calculate_Tc+0x320>)
 800e57a:	ec51 0b10 	vmov	r0, r1, d0
 800e57e:	ed83 0b00 	vstr	d0, [r3]
	
	if(deltaC > 0.05)
 800e582:	a31f      	add	r3, pc, #124	; (adr r3, 800e600 <Calculate_Tc+0x2d0>)
 800e584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e588:	f7f2 fada 	bl	8000b40 <__aeabi_dcmpgt>
 800e58c:	bb78      	cbnz	r0, 800e5ee <Calculate_Tc+0x2be>
	{
		return 0xFFFF;
	}else
	{
		return result_tc = fabs(1000000./(Tc_tabl[i_min1]+dmin1*((Tc_tabl[i_min2]-Tc_tabl[i_min1])/(dmin1-dmin2))));
 800e58e:	4b31      	ldr	r3, [pc, #196]	; (800e654 <Calculate_Tc+0x324>)
 800e590:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800e594:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e598:	ee07 2a90 	vmov	s15, r2
 800e59c:	1a9b      	subs	r3, r3, r2
 800e59e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e5a2:	ee07 3a90 	vmov	s15, r3
 800e5a6:	ee78 8a68 	vsub.f32	s17, s16, s17
 800e5aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5ae:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800e5b2:	eea8 7a26 	vfma.f32	s14, s16, s13
 800e5b6:	ee17 0a10 	vmov	r0, s14
 800e5ba:	f7f1 ffdd 	bl	8000578 <__aeabi_f2d>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	a111      	add	r1, pc, #68	; (adr r1, 800e608 <Calculate_Tc+0x2d8>)
 800e5c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5c8:	f7f2 f954 	bl	8000874 <__aeabi_ddiv>
 800e5cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e5d0:	4921      	ldr	r1, [pc, #132]	; (800e658 <Calculate_Tc+0x328>)
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	e9c1 2300 	strd	r2, r3, [r1]
 800e5d8:	4610      	mov	r0, r2
 800e5da:	4619      	mov	r1, r3
 800e5dc:	f7f2 fb18 	bl	8000c10 <__aeabi_d2f>
	}
}
 800e5e0:	ee00 0a10 	vmov	s0, r0
 800e5e4:	b00b      	add	sp, #44	; 0x2c
 800e5e6:	ecbd 8b02 	vpop	{d8}
 800e5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0xFFFF;
 800e5ee:	481b      	ldr	r0, [pc, #108]	; (800e65c <Calculate_Tc+0x32c>)
 800e5f0:	e7f6      	b.n	800e5e0 <Calculate_Tc+0x2b0>
 800e5f2:	bf00      	nop
 800e5f4:	f3af 8000 	nop.w
 800e5f8:	00000000 	.word	0x00000000
 800e5fc:	40f86a00 	.word	0x40f86a00
 800e600:	9999999a 	.word	0x9999999a
 800e604:	3fa99999 	.word	0x3fa99999
 800e608:	00000000 	.word	0x00000000
 800e60c:	412e8480 	.word	0x412e8480
 800e610:	2008d504 	.word	0x2008d504
 800e614:	20052930 	.word	0x20052930
 800e618:	2008a504 	.word	0x2008a504
 800e61c:	2008f512 	.word	0x2008f512
 800e620:	447a0000 	.word	0x447a0000
 800e624:	200056a0 	.word	0x200056a0
 800e628:	40100000 	.word	0x40100000
 800e62c:	080247ec 	.word	0x080247ec
 800e630:	200056b0 	.word	0x200056b0
 800e634:	40180000 	.word	0x40180000
 800e638:	200056c0 	.word	0x200056c0
 800e63c:	08024770 	.word	0x08024770
 800e640:	080248a6 	.word	0x080248a6
 800e644:	3fe00000 	.word	0x3fe00000
 800e648:	200056a8 	.word	0x200056a8
 800e64c:	200056b8 	.word	0x200056b8
 800e650:	20005698 	.word	0x20005698
 800e654:	0802467c 	.word	0x0802467c
 800e658:	20090a50 	.word	0x20090a50
 800e65c:	477fff00 	.word	0x477fff00
 800e660:	08024868 	.word	0x08024868
 800e664:	00000000 	.word	0x00000000

0800e668 <Calculate_Lab>:

void Calculate_Lab(uint16_t colorimetry_XYZ_calculate[], uint8_t CIE_Type, uint8_t Source_Type)
{
 800e668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float Xref, Yref = 100, Zref;
	uint8_t i;
	double factor_x = 0, factor_y = 0, factor_z = 0, fx = 0, fy = 0, fz = 0;
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e66c:	2a01      	cmp	r2, #1
{
 800e66e:	ed2d 8b02 	vpush	{d8}
 800e672:	4606      	mov	r6, r0
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e674:	f000 80b9 	beq.w	800e7ea <Calculate_Lab+0x182>
 800e678:	2a02      	cmp	r2, #2
 800e67a:	f000 80b8 	beq.w	800e7ee <Calculate_Lab+0x186>
 800e67e:	2a04      	cmp	r2, #4
 800e680:	f000 80b7 	beq.w	800e7f2 <Calculate_Lab+0x18a>
 800e684:	2a08      	cmp	r2, #8
 800e686:	f000 80b6 	beq.w	800e7f6 <Calculate_Lab+0x18e>
 800e68a:	2a10      	cmp	r2, #16
 800e68c:	f000 80b5 	beq.w	800e7fa <Calculate_Lab+0x192>
 800e690:	2a20      	cmp	r2, #32
 800e692:	bf14      	ite	ne
 800e694:	2400      	movne	r4, #0
 800e696:	2405      	moveq	r4, #5
	
	if (CIE_Type == 0x01) //check CIE 1931
 800e698:	2901      	cmp	r1, #1
 800e69a:	f040 80b0 	bne.w	800e7fe <Calculate_Lab+0x196>
	{
		Xref = Xref_CIE1931[i]/100.0;
 800e69e:	4b82      	ldr	r3, [pc, #520]	; (800e8a8 <Calculate_Lab+0x240>)
 800e6a0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e6a4:	f7f1 ff56 	bl	8000554 <__aeabi_i2d>
 800e6a8:	4b80      	ldr	r3, [pc, #512]	; (800e8ac <Calculate_Lab+0x244>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f7f2 f8e2 	bl	8000874 <__aeabi_ddiv>
 800e6b0:	f7f2 faae 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1931[i]/100.0;
 800e6b4:	4b7e      	ldr	r3, [pc, #504]	; (800e8b0 <Calculate_Lab+0x248>)
		Xref = Xref_CIE1931[i]/100.0;
 800e6b6:	ee08 0a90 	vmov	s17, r0
	
	} else if(CIE_Type == 0x00) ////check CIE 1964
	{
		Xref = Xref_CIE1964[i]/100.0;
		Zref = Zref_CIE1964[i]/100.0;
 800e6ba:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e6be:	f7f1 ff49 	bl	8000554 <__aeabi_i2d>
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	4b79      	ldr	r3, [pc, #484]	; (800e8ac <Calculate_Lab+0x244>)
 800e6c6:	f7f2 f8d5 	bl	8000874 <__aeabi_ddiv>
 800e6ca:	f7f2 faa1 	bl	8000c10 <__aeabi_d2f>
 800e6ce:	ee08 0a10 	vmov	s16, r0
	}
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e6d2:	8833      	ldrh	r3, [r6, #0]
 800e6d4:	ee07 3a90 	vmov	s15, r3
 800e6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6dc:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800e6e0:	ee17 0a10 	vmov	r0, s14
 800e6e4:	f7f1 ff48 	bl	8000578 <__aeabi_f2d>
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e6e8:	8873      	ldrh	r3, [r6, #2]
 800e6ea:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800e8b4 <Calculate_Lab+0x24c>
 800e6ee:	ee07 3a90 	vmov	s15, r3
 800e6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e6f6:	4680      	mov	r8, r0
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e6f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e6fc:	4689      	mov	r9, r1
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e6fe:	ee16 0a90 	vmov	r0, s13
 800e702:	f7f1 ff39 	bl	8000578 <__aeabi_f2d>
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e706:	88b3      	ldrh	r3, [r6, #4]
 800e708:	ee07 3a90 	vmov	s15, r3
 800e70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e710:	4604      	mov	r4, r0
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e712:	ee87 7a88 	vdiv.f32	s14, s15, s16
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e716:	460d      	mov	r5, r1
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e718:	ee17 0a10 	vmov	r0, s14
 800e71c:	f7f1 ff2c 	bl	8000578 <__aeabi_f2d>
	
		if(factor_x > 0.00885645)
 800e720:	a35b      	add	r3, pc, #364	; (adr r3, 800e890 <Calculate_Lab+0x228>)
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e726:	4606      	mov	r6, r0
 800e728:	460f      	mov	r7, r1
		if(factor_x > 0.00885645)
 800e72a:	4640      	mov	r0, r8
 800e72c:	4649      	mov	r1, r9
 800e72e:	f7f2 fa07 	bl	8000b40 <__aeabi_dcmpgt>
 800e732:	2800      	cmp	r0, #0
 800e734:	d075      	beq.n	800e822 <Calculate_Lab+0x1ba>
	{
		fx = pow(factor_x, 1./3.);
 800e736:	ec49 8b10 	vmov	d0, r8, r9
 800e73a:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800e898 <Calculate_Lab+0x230>
 800e73e:	f014 fa8f 	bl	8022c60 <pow>
 800e742:	ec59 8b10 	vmov	r8, r9, d0
	} else 
	{
		fx = (903.3*factor_x + 16.) / 116.;
	}
	
		if(factor_y > 0.00885645)
 800e746:	a352      	add	r3, pc, #328	; (adr r3, 800e890 <Calculate_Lab+0x228>)
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	4620      	mov	r0, r4
 800e74e:	4629      	mov	r1, r5
 800e750:	f7f2 f9f6 	bl	8000b40 <__aeabi_dcmpgt>
 800e754:	2800      	cmp	r0, #0
 800e756:	d076      	beq.n	800e846 <Calculate_Lab+0x1de>
	{
		fy = pow(factor_y, 1./3.);
 800e758:	ec45 4b10 	vmov	d0, r4, r5
 800e75c:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 800e898 <Calculate_Lab+0x230>
 800e760:	f014 fa7e 	bl	8022c60 <pow>
 800e764:	ec55 4b10 	vmov	r4, r5, d0
	} else 
	{
		fy = (903.3*factor_y + 16.) / 116.;
	}
	
		if(factor_z > 0.00885645)
 800e768:	a349      	add	r3, pc, #292	; (adr r3, 800e890 <Calculate_Lab+0x228>)
 800e76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76e:	4630      	mov	r0, r6
 800e770:	4639      	mov	r1, r7
 800e772:	f7f2 f9e5 	bl	8000b40 <__aeabi_dcmpgt>
 800e776:	2800      	cmp	r0, #0
 800e778:	d077      	beq.n	800e86a <Calculate_Lab+0x202>
	{
		fz = pow(factor_z, 1./3.);
 800e77a:	ec47 6b10 	vmov	d0, r6, r7
 800e77e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 800e898 <Calculate_Lab+0x230>
 800e782:	f014 fa6d 	bl	8022c60 <pow>
 800e786:	ec57 6b10 	vmov	r6, r7, d0
	} else 
	{
		fz = (903.3*factor_z + 16.) / 116.;
	}
	
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e78a:	2200      	movs	r2, #0
 800e78c:	4b4a      	ldr	r3, [pc, #296]	; (800e8b8 <Calculate_Lab+0x250>)
 800e78e:	f8df a140 	ldr.w	sl, [pc, #320]	; 800e8d0 <Calculate_Lab+0x268>
 800e792:	4620      	mov	r0, r4
 800e794:	4629      	mov	r1, r5
 800e796:	f7f1 ff43 	bl	8000620 <__aeabi_dmul>
 800e79a:	2200      	movs	r2, #0
 800e79c:	4b47      	ldr	r3, [pc, #284]	; (800e8bc <Calculate_Lab+0x254>)
 800e79e:	f7f1 fd8b 	bl	80002b8 <__aeabi_dsub>
 800e7a2:	f7f2 f9ed 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e7a6:	4622      	mov	r2, r4
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e7a8:	f8aa 0000 	strh.w	r0, [sl]
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e7ac:	462b      	mov	r3, r5
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	f7f1 fd81 	bl	80002b8 <__aeabi_dsub>
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	4b41      	ldr	r3, [pc, #260]	; (800e8c0 <Calculate_Lab+0x258>)
 800e7ba:	f7f1 ff31 	bl	8000620 <__aeabi_dmul>
 800e7be:	f7f2 f9df 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e7c2:	4632      	mov	r2, r6
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e7c4:	f8aa 0002 	strh.w	r0, [sl, #2]
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e7c8:	463b      	mov	r3, r7
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	f7f1 fd73 	bl	80002b8 <__aeabi_dsub>
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	4b3b      	ldr	r3, [pc, #236]	; (800e8c4 <Calculate_Lab+0x25c>)
 800e7d6:	f7f1 ff23 	bl	8000620 <__aeabi_dmul>
 800e7da:	f7f2 f9d1 	bl	8000b80 <__aeabi_d2iz>
	
}
 800e7de:	ecbd 8b02 	vpop	{d8}
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e7e2:	f8aa 0004 	strh.w	r0, [sl, #4]
}
 800e7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e7ea:	2400      	movs	r4, #0
 800e7ec:	e754      	b.n	800e698 <Calculate_Lab+0x30>
 800e7ee:	2401      	movs	r4, #1
 800e7f0:	e752      	b.n	800e698 <Calculate_Lab+0x30>
 800e7f2:	2402      	movs	r4, #2
 800e7f4:	e750      	b.n	800e698 <Calculate_Lab+0x30>
 800e7f6:	2403      	movs	r4, #3
 800e7f8:	e74e      	b.n	800e698 <Calculate_Lab+0x30>
 800e7fa:	2404      	movs	r4, #4
 800e7fc:	e74c      	b.n	800e698 <Calculate_Lab+0x30>
	} else if(CIE_Type == 0x00) ////check CIE 1964
 800e7fe:	2900      	cmp	r1, #0
 800e800:	f47f af67 	bne.w	800e6d2 <Calculate_Lab+0x6a>
		Xref = Xref_CIE1964[i]/100.0;
 800e804:	4b30      	ldr	r3, [pc, #192]	; (800e8c8 <Calculate_Lab+0x260>)
 800e806:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e80a:	f7f1 fea3 	bl	8000554 <__aeabi_i2d>
 800e80e:	4b27      	ldr	r3, [pc, #156]	; (800e8ac <Calculate_Lab+0x244>)
 800e810:	2200      	movs	r2, #0
 800e812:	f7f2 f82f 	bl	8000874 <__aeabi_ddiv>
 800e816:	f7f2 f9fb 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1964[i]/100.0;
 800e81a:	4b2c      	ldr	r3, [pc, #176]	; (800e8cc <Calculate_Lab+0x264>)
		Xref = Xref_CIE1964[i]/100.0;
 800e81c:	ee08 0a90 	vmov	s17, r0
 800e820:	e74b      	b.n	800e6ba <Calculate_Lab+0x52>
		fx = (903.3*factor_x + 16.) / 116.;
 800e822:	a31f      	add	r3, pc, #124	; (adr r3, 800e8a0 <Calculate_Lab+0x238>)
 800e824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e828:	4640      	mov	r0, r8
 800e82a:	4649      	mov	r1, r9
 800e82c:	f7f1 fef8 	bl	8000620 <__aeabi_dmul>
 800e830:	2200      	movs	r2, #0
 800e832:	4b22      	ldr	r3, [pc, #136]	; (800e8bc <Calculate_Lab+0x254>)
 800e834:	f7f1 fd42 	bl	80002bc <__adddf3>
 800e838:	2200      	movs	r2, #0
 800e83a:	4b1f      	ldr	r3, [pc, #124]	; (800e8b8 <Calculate_Lab+0x250>)
 800e83c:	f7f2 f81a 	bl	8000874 <__aeabi_ddiv>
 800e840:	4680      	mov	r8, r0
 800e842:	4689      	mov	r9, r1
 800e844:	e77f      	b.n	800e746 <Calculate_Lab+0xde>
		fy = (903.3*factor_y + 16.) / 116.;
 800e846:	a316      	add	r3, pc, #88	; (adr r3, 800e8a0 <Calculate_Lab+0x238>)
 800e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84c:	4620      	mov	r0, r4
 800e84e:	4629      	mov	r1, r5
 800e850:	f7f1 fee6 	bl	8000620 <__aeabi_dmul>
 800e854:	2200      	movs	r2, #0
 800e856:	4b19      	ldr	r3, [pc, #100]	; (800e8bc <Calculate_Lab+0x254>)
 800e858:	f7f1 fd30 	bl	80002bc <__adddf3>
 800e85c:	2200      	movs	r2, #0
 800e85e:	4b16      	ldr	r3, [pc, #88]	; (800e8b8 <Calculate_Lab+0x250>)
 800e860:	f7f2 f808 	bl	8000874 <__aeabi_ddiv>
 800e864:	4604      	mov	r4, r0
 800e866:	460d      	mov	r5, r1
 800e868:	e77e      	b.n	800e768 <Calculate_Lab+0x100>
		fz = (903.3*factor_z + 16.) / 116.;
 800e86a:	a30d      	add	r3, pc, #52	; (adr r3, 800e8a0 <Calculate_Lab+0x238>)
 800e86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e870:	4630      	mov	r0, r6
 800e872:	4639      	mov	r1, r7
 800e874:	f7f1 fed4 	bl	8000620 <__aeabi_dmul>
 800e878:	2200      	movs	r2, #0
 800e87a:	4b10      	ldr	r3, [pc, #64]	; (800e8bc <Calculate_Lab+0x254>)
 800e87c:	f7f1 fd1e 	bl	80002bc <__adddf3>
 800e880:	2200      	movs	r2, #0
 800e882:	4b0d      	ldr	r3, [pc, #52]	; (800e8b8 <Calculate_Lab+0x250>)
 800e884:	f7f1 fff6 	bl	8000874 <__aeabi_ddiv>
 800e888:	4606      	mov	r6, r0
 800e88a:	460f      	mov	r7, r1
 800e88c:	e77d      	b.n	800e78a <Calculate_Lab+0x122>
 800e88e:	bf00      	nop
 800e890:	98de88b7 	.word	0x98de88b7
 800e894:	3f822354 	.word	0x3f822354
 800e898:	55555555 	.word	0x55555555
 800e89c:	3fd55555 	.word	0x3fd55555
 800e8a0:	66666666 	.word	0x66666666
 800e8a4:	408c3a66 	.word	0x408c3a66
 800e8a8:	080246ba 	.word	0x080246ba
 800e8ac:	40590000 	.word	0x40590000
 800e8b0:	080246d2 	.word	0x080246d2
 800e8b4:	42c80000 	.word	0x42c80000
 800e8b8:	405d0000 	.word	0x405d0000
 800e8bc:	40300000 	.word	0x40300000
 800e8c0:	407f4000 	.word	0x407f4000
 800e8c4:	40690000 	.word	0x40690000
 800e8c8:	080246c6 	.word	0x080246c6
 800e8cc:	080246de 	.word	0x080246de
 800e8d0:	2008f50c 	.word	0x2008f50c

0800e8d4 <Calculate_Lambda_Dominant>:
void Calculate_Lambda_Dominant(float R_data[], uint8_t CIE_Type)
{	
	float Px, Py, x1 = 0.3333, y1 = 0.3333, x2, y2, divider;
	int8_t triangle_p1, triangle_p2, triangle_p3, triangle_out, ld;
	
	x2 = colorimetry_xy1931[0];
 800e8d4:	4b75      	ldr	r3, [pc, #468]	; (800eaac <Calculate_Lambda_Dominant+0x1d8>)
	y2 = colorimetry_xy1931[1];
	
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e8d6:	eddf 7a76 	vldr	s15, [pc, #472]	; 800eab0 <Calculate_Lambda_Dominant+0x1dc>
	y2 = colorimetry_xy1931[1];
 800e8da:	ed93 6a01 	vldr	s12, [r3, #4]
	x2 = colorimetry_xy1931[0];
 800e8de:	edd3 5a00 	vldr	s11, [r3]
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e8e2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800eab4 <Calculate_Lambda_Dominant+0x1e0>
 800e8e6:	eddf 6a74 	vldr	s13, [pc, #464]	; 800eab8 <Calculate_Lambda_Dominant+0x1e4>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8ea:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800eabc <Calculate_Lambda_Dominant+0x1e8>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e8ee:	ee77 1ac6 	vsub.f32	s3, s15, s12
 800e8f2:	ee37 2ae5 	vsub.f32	s4, s15, s11
 800e8f6:	ee27 7a61 	vnmul.f32	s14, s14, s3
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8fa:	ee35 5a65 	vsub.f32	s10, s10, s11
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e8fe:	eea2 7a26 	vfma.f32	s14, s4, s13
{	
 800e902:	b5f0      	push	{r4, r5, r6, r7, lr}
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e904:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800eac0 <Calculate_Lambda_Dominant+0x1ec>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e908:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e90c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800e910:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800eac4 <Calculate_Lambda_Dominant+0x1f0>
 800e914:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 800e918:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800eac8 <Calculate_Lambda_Dominant+0x1f4>
 800e91c:	eee5 6a07 	vfma.f32	s13, s10, s14
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e924:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800eacc <Calculate_Lambda_Dominant+0x1f8>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e928:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e92c:	ee77 6a46 	vsub.f32	s13, s14, s12
 800e930:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ead0 <Calculate_Lambda_Dominant+0x1fc>
 800e934:	ee35 5a65 	vsub.f32	s10, s10, s11
 800e938:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800e93c:	eddf 6a65 	vldr	s13, [pc, #404]	; 800ead4 <Calculate_Lambda_Dominant+0x200>
 800e940:	eea5 7a26 	vfma.f32	s14, s10, s13
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e944:	bfcc      	ite	gt
 800e946:	2101      	movgt	r1, #1
 800e948:	f04f 31ff 	movle.w	r1, #4294967295
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e950:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e954:	bfcc      	ite	gt
 800e956:	2201      	movgt	r2, #1
 800e958:	f04f 32ff 	movle.w	r2, #4294967295
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e960:	bfcc      	ite	gt
 800e962:	2301      	movgt	r3, #1
 800e964:	f04f 33ff 	movle.w	r3, #4294967295
		
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800e968:	4291      	cmp	r1, r2
 800e96a:	f040 8093 	bne.w	800ea94 <Calculate_Lambda_Dominant+0x1c0>
 800e96e:	4299      	cmp	r1, r3
 800e970:	bf14      	ite	ne
 800e972:	2101      	movne	r1, #1
 800e974:	f04f 31ff 	moveq.w	r1, #4294967295
	
	for(uint8_t i = 0; i < 65; i++)
	{
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e978:	ee67 3ae5 	vnmul.f32	s7, s15, s11
 800e97c:	4856      	ldr	r0, [pc, #344]	; (800ead8 <Calculate_Lambda_Dominant+0x204>)
 800e97e:	4a57      	ldr	r2, [pc, #348]	; (800eadc <Calculate_Lambda_Dominant+0x208>)
 800e980:	8804      	ldrh	r4, [r0, #0]
 800e982:	4e57      	ldr	r6, [pc, #348]	; (800eae0 <Calculate_Lambda_Dominant+0x20c>)
 800e984:	4d57      	ldr	r5, [pc, #348]	; (800eae4 <Calculate_Lambda_Dominant+0x210>)
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
		
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
		{
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800e986:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800eab0 <Calculate_Lambda_Dominant+0x1dc>
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e98a:	eee6 3a27 	vfma.f32	s7, s12, s15
 800e98e:	f102 0782 	add.w	r7, r2, #130	; 0x82
 800e992:	2300      	movs	r3, #0
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e994:	eeb1 0a61 	vneg.f32	s0, s3
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e998:	ed95 6a00 	vldr	s12, [r5]
 800e99c:	edd6 6a00 	vldr	s13, [r6]
 800e9a0:	ed95 4a01 	vldr	s8, [r5, #4]
 800e9a4:	ed96 5a01 	vldr	s10, [r6, #4]
 800e9a8:	3504      	adds	r5, #4
 800e9aa:	3604      	adds	r6, #4
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e9ac:	ee64 2a66 	vnmul.f32	s5, s8, s13
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e9b0:	ee36 7a44 	vsub.f32	s14, s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e9b4:	eee5 2a06 	vfma.f32	s5, s10, s12
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e9b8:	ee27 3a61 	vnmul.f32	s6, s14, s3
 800e9bc:	ee76 4ac5 	vsub.f32	s9, s13, s10
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e9c0:	ee22 1ac2 	vnmul.f32	s2, s5, s4
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e9c4:	eea2 3a24 	vfma.f32	s6, s4, s9
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e9c8:	eea7 1a23 	vfma.f32	s2, s14, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e9cc:	eeb4 6ac4 	vcmpe.f32	s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e9d0:	ee81 7a03 	vdiv.f32	s14, s2, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d8:	bf54      	ite	pl
 800e9da:	eeb0 1a44 	vmovpl.f32	s2, s8
 800e9de:	eeb0 1a46 	vmovmi.f32	s2, s12
 800e9e2:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800e9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ea:	d54d      	bpl.n	800ea88 <Calculate_Lambda_Dominant+0x1b4>
 800e9ec:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800e9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f4:	bfd8      	it	le
 800e9f6:	eeb0 6a44 	vmovle.f32	s12, s8
 800e9fa:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800e9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea02:	dd41      	ble.n	800ea88 <Calculate_Lambda_Dominant+0x1b4>
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ea04:	ee64 4aa3 	vmul.f32	s9, s9, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ea08:	eef4 6ac5 	vcmpe.f32	s13, s10
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ea0c:	eee0 4a22 	vfma.f32	s9, s0, s5
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ea10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ea14:	ee84 6a83 	vdiv.f32	s12, s9, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ea18:	bf54      	ite	pl
 800ea1a:	eeb0 4a45 	vmovpl.f32	s8, s10
 800ea1e:	eeb0 4a66 	vmovmi.f32	s8, s13
 800ea22:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800ea26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea2a:	d52d      	bpl.n	800ea88 <Calculate_Lambda_Dominant+0x1b4>
 800ea2c:	eef4 6ac5 	vcmpe.f32	s13, s10
 800ea30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea34:	bfd8      	it	le
 800ea36:	eef0 6a45 	vmovle.f32	s13, s10
 800ea3a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ea3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea42:	dd21      	ble.n	800ea88 <Calculate_Lambda_Dominant+0x1b4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800ea44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea4c:	bf54      	ite	pl
 800ea4e:	eef0 6a60 	vmovpl.f32	s13, s1
 800ea52:	eef0 6a47 	vmovmi.f32	s13, s14
 800ea56:	eef4 6ae5 	vcmpe.f32	s13, s11
 800ea5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5e:	d51b      	bpl.n	800ea98 <Calculate_Lambda_Dominant+0x1c4>
 800ea60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea68:	bfd8      	it	le
 800ea6a:	eeb0 7a60 	vmovle.f32	s14, s1
 800ea6e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800ea72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea76:	bfcc      	ite	gt
 800ea78:	2301      	movgt	r3, #1
 800ea7a:	f04f 33ff 	movle.w	r3, #4294967295
			
			if((ld*triangle_out) > 0)
 800ea7e:	fb13 f301 	smulbb	r3, r3, r1
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d10b      	bne.n	800ea9e <Calculate_Lambda_Dominant+0x1ca>
			{
				lambda_d_Measure = lamda_dominant[i+1];
 800ea86:	8814      	ldrh	r4, [r2, #0]
 800ea88:	3202      	adds	r2, #2
	for(uint8_t i = 0; i < 65; i++)
 800ea8a:	4297      	cmp	r7, r2
 800ea8c:	d184      	bne.n	800e998 <Calculate_Lambda_Dominant+0xc4>
 800ea8e:	b103      	cbz	r3, 800ea92 <Calculate_Lambda_Dominant+0x1be>
 800ea90:	8004      	strh	r4, [r0, #0]
 800ea92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800ea94:	2101      	movs	r1, #1
 800ea96:	e76f      	b.n	800e978 <Calculate_Lambda_Dominant+0xa4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800ea98:	f04f 33ff 	mov.w	r3, #4294967295
 800ea9c:	e7ef      	b.n	800ea7e <Calculate_Lambda_Dominant+0x1aa>
			} else {
				lambda_d_Measure = triangle_out < 0 ? 0 : lamda_dominant[i+1];
 800ea9e:	1c4b      	adds	r3, r1, #1
 800eaa0:	bf14      	ite	ne
 800eaa2:	8814      	ldrhne	r4, [r2, #0]
 800eaa4:	2400      	moveq	r4, #0
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e7ee      	b.n	800ea88 <Calculate_Lambda_Dominant+0x1b4>
 800eaaa:	bf00      	nop
 800eaac:	2008f530 	.word	0x2008f530
 800eab0:	3eaaa64c 	.word	0x3eaaa64c
 800eab4:	be1fd4b2 	.word	0xbe1fd4b2
 800eab8:	beaaa64c 	.word	0xbeaaa64c
 800eabc:	3e3577e6 	.word	0x3e3577e6
 800eac0:	00000000 	.word	0x00000000
 800eac4:	3f0eeab2 	.word	0x3f0eeab2
 800eac8:	3e876ea8 	.word	0x3e876ea8
 800eacc:	3f3c48ac 	.word	0x3f3c48ac
 800ead0:	becdeb0c 	.word	0xbecdeb0c
 800ead4:	3d8cde90 	.word	0x3d8cde90
 800ead8:	20095b34 	.word	0x20095b34
 800eadc:	080246ec 	.word	0x080246ec
 800eae0:	080249ec 	.word	0x080249ec
 800eae4:	080248e4 	.word	0x080248e4

0800eae8 <Calculate_deltaEab>:

extern int16_t colorimetry_LAB_mem[3];
float result, res1, res2, res3;

int16_t Calculate_deltaEab() {
	if((Measure_Field&CIE_Lab) == 0){
 800eae8:	4b2c      	ldr	r3, [pc, #176]	; (800eb9c <Calculate_deltaEab+0xb4>)
 800eaea:	881b      	ldrh	r3, [r3, #0]
 800eaec:	061b      	lsls	r3, r3, #24
int16_t Calculate_deltaEab() {
 800eaee:	b507      	push	{r0, r1, r2, lr}
	if((Measure_Field&CIE_Lab) == 0){
 800eaf0:	d40a      	bmi.n	800eb08 <Calculate_deltaEab+0x20>
		Calculate_Lab(Measure_Color_xy == 0x00 ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 800eaf2:	4b2b      	ldr	r3, [pc, #172]	; (800eba0 <Calculate_deltaEab+0xb8>)
 800eaf4:	482b      	ldr	r0, [pc, #172]	; (800eba4 <Calculate_deltaEab+0xbc>)
 800eaf6:	7819      	ldrb	r1, [r3, #0]
 800eaf8:	4b2b      	ldr	r3, [pc, #172]	; (800eba8 <Calculate_deltaEab+0xc0>)
 800eafa:	781a      	ldrb	r2, [r3, #0]
 800eafc:	4b2b      	ldr	r3, [pc, #172]	; (800ebac <Calculate_deltaEab+0xc4>)
 800eafe:	2900      	cmp	r1, #0
 800eb00:	bf18      	it	ne
 800eb02:	4618      	movne	r0, r3
 800eb04:	f7ff fdb0 	bl	800e668 <Calculate_Lab>
	}
	res1 = ((float)(colorimetry_LAB[0]) - (float)(colorimetry_LAB_mem[0]));
 800eb08:	4a29      	ldr	r2, [pc, #164]	; (800ebb0 <Calculate_deltaEab+0xc8>)
 800eb0a:	f9b2 3000 	ldrsh.w	r3, [r2]
 800eb0e:	ee06 3a90 	vmov	s13, r3
 800eb12:	4b28      	ldr	r3, [pc, #160]	; (800ebb4 <Calculate_deltaEab+0xcc>)
 800eb14:	f9b3 1000 	ldrsh.w	r1, [r3]
 800eb18:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800eb1c:	ee06 1a90 	vmov	s13, r1
 800eb20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800eb24:	4924      	ldr	r1, [pc, #144]	; (800ebb8 <Calculate_deltaEab+0xd0>)
 800eb26:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800eb2a:	edc1 6a00 	vstr	s13, [r1]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eb2e:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb32:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eb36:	ee00 1a10 	vmov	s0, r1
 800eb3a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eb42:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800eb46:	ee00 1a10 	vmov	s0, r1
 800eb4a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800eb4e:	491b      	ldr	r1, [pc, #108]	; (800ebbc <Calculate_deltaEab+0xd4>)
 800eb50:	ee37 0ac0 	vsub.f32	s0, s15, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb54:	ee07 2a90 	vmov	s15, r2
 800eb58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eb5c:	ee07 3a90 	vmov	s15, r3
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eb60:	ed81 0a00 	vstr	s0, [r1]
	Calculate_deltaEab_Done = 0x01;
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb64:	ee20 0a00 	vmul.f32	s0, s0, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb6c:	eea6 0aa6 	vfma.f32	s0, s13, s13
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb70:	4b13      	ldr	r3, [pc, #76]	; (800ebc0 <Calculate_deltaEab+0xd8>)
 800eb72:	ee77 7a67 	vsub.f32	s15, s14, s15
	Calculate_deltaEab_Done = 0x01;
 800eb76:	2201      	movs	r2, #1
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb78:	edc3 7a00 	vstr	s15, [r3]
	Calculate_deltaEab_Done = 0x01;
 800eb7c:	4b11      	ldr	r3, [pc, #68]	; (800ebc4 <Calculate_deltaEab+0xdc>)
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb7e:	eea7 0aa7 	vfma.f32	s0, s15, s15
	Calculate_deltaEab_Done = 0x01;
 800eb82:	701a      	strb	r2, [r3, #0]
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb84:	f014 fa3e 	bl	8023004 <sqrtf>
 800eb88:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800eb8c:	edcd 7a01 	vstr	s15, [sp, #4]
}
 800eb90:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800eb94:	b003      	add	sp, #12
 800eb96:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb9a:	bf00      	nop
 800eb9c:	200056f6 	.word	0x200056f6
 800eba0:	200056f4 	.word	0x200056f4
 800eba4:	2008f518 	.word	0x2008f518
 800eba8:	20090a69 	.word	0x20090a69
 800ebac:	2008f512 	.word	0x2008f512
 800ebb0:	2008f50c 	.word	0x2008f50c
 800ebb4:	20090ff8 	.word	0x20090ff8
 800ebb8:	20090a48 	.word	0x20090a48
 800ebbc:	20090a40 	.word	0x20090a40
 800ebc0:	20090a58 	.word	0x20090a58
 800ebc4:	20005691 	.word	0x20005691

0800ebc8 <Calibration_Load_2byte>:
extern float Unit_nm[7], Spectral_Corection_Buff[1024], Scattering_Light, Exposure_Factor;
extern float Spectral_day[1024], Spectral_night[1024], Spectral_B[1024], Spectral_R[1024];
	
uint16_t buff2_array[4] = {0};
uint16_t Calibration_Load_2byte(uint32_t Address, uint8_t num)
{
 800ebc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint64_t buff = 0;

	uint16_t byte_array[4] = {0};
	uint8_t i = 0;
	
	i = num > 3 ? (num - 4*(num/4)) : num;
 800ebca:	2903      	cmp	r1, #3
{
 800ebcc:	460c      	mov	r4, r1
 800ebce:	bf88      	it	hi
 800ebd0:	f001 0403 	andhi.w	r4, r1, #3
	buff = flash_data_read_buff(Address);
 800ebd4:	f7fd f903 	bl	800bdde <flash_data_read_buff>
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800ebd8:	aa04      	add	r2, sp, #16
 800ebda:	e962 0104 	strd	r0, r1, [r2, #-16]!
 800ebde:	ca03      	ldmia	r2!, {r0, r1}
 800ebe0:	4b0a      	ldr	r3, [pc, #40]	; (800ec0c <Calibration_Load_2byte+0x44>)
 800ebe2:	6018      	str	r0, [r3, #0]
	
	byte_array[0] = buff2_array[1];
 800ebe4:	885a      	ldrh	r2, [r3, #2]
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800ebe6:	6059      	str	r1, [r3, #4]
	byte_array[0] = buff2_array[1];
 800ebe8:	f8ad 2008 	strh.w	r2, [sp, #8]
	byte_array[1] = buff2_array[0];
 800ebec:	881a      	ldrh	r2, [r3, #0]
 800ebee:	f8ad 200a 	strh.w	r2, [sp, #10]
	byte_array[2] = buff2_array[3];
 800ebf2:	88da      	ldrh	r2, [r3, #6]
	byte_array[3] = buff2_array[2];
 800ebf4:	889b      	ldrh	r3, [r3, #4]
 800ebf6:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	return byte_array[i];
 800ebfa:	ab04      	add	r3, sp, #16
 800ebfc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	byte_array[2] = buff2_array[3];
 800ec00:	f8ad 200c 	strh.w	r2, [sp, #12]
}
 800ec04:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800ec08:	b004      	add	sp, #16
 800ec0a:	bd10      	pop	{r4, pc}
 800ec0c:	200056d0 	.word	0x200056d0

0800ec10 <Calibration_Load_1byte>:
	

	uint8_t byte1[8] = {0};
uint8_t Calibration_Load_1byte(uint32_t Address, uint8_t num)
{
 800ec10:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t buff = 0;
	uint8_t buff_array[8] = {0};

	uint8_t i = 0;
	
	i = num > 7 ? (num - 8) : num;
 800ec12:	2907      	cmp	r1, #7
{
 800ec14:	b085      	sub	sp, #20
 800ec16:	460c      	mov	r4, r1
	i = num > 7 ? (num - 8) : num;
 800ec18:	bf84      	itt	hi
 800ec1a:	f1a1 0408 	subhi.w	r4, r1, #8
 800ec1e:	b2e4      	uxtbhi	r4, r4
	buff = flash_data_read_buff(Address);
 800ec20:	f7fd f8dd 	bl	800bdde <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec24:	e9cd 0100 	strd	r0, r1, [sp]
 800ec28:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800ec2c:	ab04      	add	r3, sp, #16
 800ec2e:	e903 0003 	stmdb	r3, {r0, r1}
	
	byte1[0] =  buff_array[3];
 800ec32:	4b0f      	ldr	r3, [pc, #60]	; (800ec70 <Calibration_Load_1byte+0x60>)
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec34:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800ec38:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800ec3c:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800ec40:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800ec44:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ec48:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800ec4c:	f89d 500f 	ldrb.w	r5, [sp, #15]
	byte1[0] =  buff_array[3];
 800ec50:	f89d c00b 	ldrb.w	ip, [sp, #11]
 800ec54:	f883 c000 	strb.w	ip, [r3]
	byte1[1] =  buff_array[2];
 800ec58:	f883 e001 	strb.w	lr, [r3, #1]
	byte1[2] =  buff_array[1];
 800ec5c:	709f      	strb	r7, [r3, #2]
	byte1[3] =  buff_array[0];
 800ec5e:	70de      	strb	r6, [r3, #3]
	byte1[4] =  buff_array[7];
 800ec60:	711d      	strb	r5, [r3, #4]
	byte1[5] =  buff_array[6];
 800ec62:	7158      	strb	r0, [r3, #5]
	byte1[6] =  buff_array[5];
 800ec64:	7199      	strb	r1, [r3, #6]
	byte1[7] =  buff_array[4];
 800ec66:	71da      	strb	r2, [r3, #7]
	
	return byte1[i];
}
 800ec68:	5d18      	ldrb	r0, [r3, r4]
 800ec6a:	b005      	add	sp, #20
 800ec6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	200056e4 	.word	0x200056e4

0800ec74 <Calibration_Load_float>:


	
float Calibration_Load_float(uint32_t Address)
{
 800ec74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buff_array[8] = {0};
	uint32_t buff_float = 0;
	float res = 0;
	uint64_t buff = 0;
	buff = flash_data_read_buff(Address);
 800ec76:	f7fd f8b2 	bl	800bdde <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec7a:	e9cd 0100 	strd	r0, r1, [sp]
 800ec7e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800ec82:	ab04      	add	r3, sp, #16
 800ec84:	e903 0003 	stmdb	r3, {r0, r1}
	buff_float = (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
	memcpy(&res, &buff_float, sizeof(uint32_t));
	return res;
 800ec88:	9b02      	ldr	r3, [sp, #8]
 800ec8a:	ba1b      	rev	r3, r3
}
 800ec8c:	ee00 3a10 	vmov	s0, r3
 800ec90:	b005      	add	sp, #20
 800ec92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ec98 <Calibration_Load_Pack>:
	uint8_t buff_array[8] = {0};
	uint64_t buff = 0;
	uint32_t buff_float = 0;
	
void Calibration_Load_Pack(uint32_t Address, uint16_t size, float data[])
{
 800ec98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t idx = 0;
	
	for (uint16_t i = 0; i < (4*size); i+=8){
		addr = Address + i;
 800ec9c:	f8df a078 	ldr.w	sl, [pc, #120]	; 800ed18 <Calibration_Load_Pack+0x80>
		buff = flash_data_read_buff(Address+i);
 800eca0:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800ed10 <Calibration_Load_Pack+0x78>
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800eca4:	4c19      	ldr	r4, [pc, #100]	; (800ed0c <Calibration_Load_Pack+0x74>)
{
 800eca6:	4681      	mov	r9, r0
 800eca8:	4617      	mov	r7, r2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800ecaa:	ea4f 0881 	mov.w	r8, r1, lsl #2
	uint16_t idx = 0;
 800ecae:	2500      	movs	r5, #0
 800ecb0:	00ae      	lsls	r6, r5, #2
 800ecb2:	b2b0      	uxth	r0, r6
	for (uint16_t i = 0; i < (4*size); i+=8){
 800ecb4:	4540      	cmp	r0, r8
 800ecb6:	db01      	blt.n	800ecbc <Calibration_Load_Pack+0x24>
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
		idx+=2;
	}
}
 800ecb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		addr = Address + i;
 800ecbc:	4448      	add	r0, r9
 800ecbe:	f8ca 0000 	str.w	r0, [sl]
		buff = flash_data_read_buff(Address+i);
 800ecc2:	f7fd f88c 	bl	800bdde <flash_data_read_buff>
 800ecc6:	e9cb 0100 	strd	r0, r1, [fp]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ecca:	4b11      	ldr	r3, [pc, #68]	; (800ed10 <Calibration_Load_Pack+0x78>)
 800eccc:	cb03      	ldmia	r3!, {r0, r1}
 800ecce:	6020      	str	r0, [r4, #0]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800ecd0:	7863      	ldrb	r3, [r4, #1]
 800ecd2:	7822      	ldrb	r2, [r4, #0]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ecd4:	6061      	str	r1, [r4, #4]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800ecd6:	041b      	lsls	r3, r3, #16
 800ecd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ecdc:	78e2      	ldrb	r2, [r4, #3]
 800ecde:	4313      	orrs	r3, r2
 800ece0:	78a2      	ldrb	r2, [r4, #2]
 800ece2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
 800ece6:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800ecea:	7963      	ldrb	r3, [r4, #5]
 800ecec:	7922      	ldrb	r2, [r4, #4]
 800ecee:	041b      	lsls	r3, r3, #16
 800ecf0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ecf4:	79e2      	ldrb	r2, [r4, #7]
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	79a2      	ldrb	r2, [r4, #6]
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800ecfa:	443e      	add	r6, r7
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800ecfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ed00:	4a04      	ldr	r2, [pc, #16]	; (800ed14 <Calibration_Load_Pack+0x7c>)
		idx+=2;
 800ed02:	3502      	adds	r5, #2
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800ed04:	6013      	str	r3, [r2, #0]
		idx+=2;
 800ed06:	b2ad      	uxth	r5, r5
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800ed08:	6073      	str	r3, [r6, #4]
 800ed0a:	e7d1      	b.n	800ecb0 <Calibration_Load_Pack+0x18>
 800ed0c:	200056d8 	.word	0x200056d8
 800ed10:	200056c8 	.word	0x200056c8
 800ed14:	200056e0 	.word	0x200056e0
 800ed18:	20090a60 	.word	0x20090a60

0800ed1c <Calibration_Exposure_Change>:


void Calibration_Exposure_Change(uint8_t Exp)
{
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	4605      	mov	r5, r0
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ed20:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800ed24:	f100 6001 	add.w	r0, r0, #135266304	; 0x8100000
 800ed28:	4629      	mov	r1, r5
 800ed2a:	f600 0028 	addw	r0, r0, #2088	; 0x828
 800ed2e:	f7ff ff6f 	bl	800ec10 <Calibration_Load_1byte>
 800ed32:	ee07 0a90 	vmov	s15, r0
 800ed36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ed3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ed42:	08a8      	lsrs	r0, r5, #2
 800ed44:	f100 2001 	add.w	r0, r0, #16777472	; 0x1000100
 800ed48:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ed4c:	4b0d      	ldr	r3, [pc, #52]	; (800ed84 <Calibration_Exposure_Change+0x68>)
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ed4e:	00c4      	lsls	r4, r0, #3
 800ed50:	4629      	mov	r1, r5
 800ed52:	4620      	mov	r0, r4
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ed54:	edc3 7a00 	vstr	s15, [r3]
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ed58:	f7ff ff36 	bl	800ebc8 <Calibration_Load_2byte>
 800ed5c:	4b0a      	ldr	r3, [pc, #40]	; (800ed88 <Calibration_Exposure_Change+0x6c>)
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ed5e:	4629      	mov	r1, r5
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ed60:	8018      	strh	r0, [r3, #0]
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ed62:	f104 0014 	add.w	r0, r4, #20
 800ed66:	f7ff ff2f 	bl	800ebc8 <Calibration_Load_2byte>
 800ed6a:	ee07 0a90 	vmov	s15, r0
 800ed6e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ed8c <Calibration_Exposure_Change+0x70>
 800ed72:	4b07      	ldr	r3, [pc, #28]	; (800ed90 <Calibration_Exposure_Change+0x74>)
 800ed74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed7c:	edc3 7a00 	vstr	s15, [r3]
 800ed80:	bd38      	pop	{r3, r4, r5, pc}
 800ed82:	bf00      	nop
 800ed84:	2005192c 	.word	0x2005192c
 800ed88:	20009d12 	.word	0x20009d12
 800ed8c:	42c80000 	.word	0x42c80000
 800ed90:	20009d1c 	.word	0x20009d1c
 800ed94:	00000000 	.word	0x00000000

0800ed98 <Calibration_WaveLenght_Graph>:
}

void Calibration_WaveLenght_Graph()
{
 800ed98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i <= 7; i++){
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed9c:	a717      	add	r7, pc, #92	; (adr r7, 800edfc <Calibration_WaveLenght_Graph+0x64>)
 800ed9e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800eda2:	f8df a060 	ldr.w	sl, [pc, #96]	; 800ee04 <Calibration_WaveLenght_Graph+0x6c>
 800eda6:	4d14      	ldr	r5, [pc, #80]	; (800edf8 <Calibration_WaveLenght_Graph+0x60>)
 800eda8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800ee08 <Calibration_WaveLenght_Graph+0x70>
	for (uint8_t i = 0; i <= 7; i++){
 800edac:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800ee0c <Calibration_WaveLenght_Graph+0x74>
{
 800edb0:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800edb4:	f04f 0800 	mov.w	r8, #0
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800edb8:	2100      	movs	r1, #0
 800edba:	4620      	mov	r0, r4
 800edbc:	f7ff ff04 	bl	800ebc8 <Calibration_Load_2byte>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800edc0:	ee07 0a90 	vmov	s15, r0
 800edc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800edc8:	f82a 0f02 	strh.w	r0, [sl, #2]!
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800edcc:	ee17 0a90 	vmov	r0, s15
 800edd0:	f7f1 fbd2 	bl	8000578 <__aeabi_f2d>
 800edd4:	4642      	mov	r2, r8
 800edd6:	464b      	mov	r3, r9
 800edd8:	f7f1 fd4c 	bl	8000874 <__aeabi_ddiv>
 800eddc:	4632      	mov	r2, r6
 800edde:	463b      	mov	r3, r7
 800ede0:	f7f1 fa6c 	bl	80002bc <__adddf3>
 800ede4:	f7f1 ff14 	bl	8000c10 <__aeabi_d2f>
 800ede8:	f504 7492 	add.w	r4, r4, #292	; 0x124
	for (uint8_t i = 0; i <= 7; i++){
 800edec:	455c      	cmp	r4, fp
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800edee:	f845 0b04 	str.w	r0, [r5], #4
	for (uint8_t i = 0; i <= 7; i++){
 800edf2:	d1e1      	bne.n	800edb8 <Calibration_WaveLenght_Graph+0x20>
	}
}
 800edf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf8:	20009cf0 	.word	0x20009cf0
 800edfc:	00000000 	.word	0x00000000
 800ee00:	4072c000 	.word	0x4072c000
 800ee04:	20055936 	.word	0x20055936
 800ee08:	40590000 	.word	0x40590000
 800ee0c:	08100920 	.word	0x08100920

0800ee10 <GUI_OptionMenuRu>:

extern uint16_t Touch_x, Touch_y;
uint16_t temp_x = 0, temp_y = 0;

void GUI_OptionMenuRu()
{	
 800ee10:	b513      	push	{r0, r1, r4, lr}
	GUI_TextRu_Language(10, 86);
 800ee12:	2156      	movs	r1, #86	; 0x56
 800ee14:	200a      	movs	r0, #10
 800ee16:	f009 f825 	bl	8017e64 <GUI_TextRu_Language>
	GUI_TextRu_Russian(118, 86);
 800ee1a:	2156      	movs	r1, #86	; 0x56
 800ee1c:	2076      	movs	r0, #118	; 0x76
 800ee1e:	f009 f853 	bl	8017ec8 <GUI_TextRu_Russian>
	GUI_Flag_Ru(218, 86);
 800ee22:	2156      	movs	r1, #86	; 0x56
 800ee24:	20da      	movs	r0, #218	; 0xda
 800ee26:	f004 f82c 	bl	8012e82 <GUI_Flag_Ru>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800ee2a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ee2e:	2378      	movs	r3, #120	; 0x78
 800ee30:	4619      	mov	r1, r3
 800ee32:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee36:	9400      	str	r4, [sp, #0]
 800ee38:	200a      	movs	r0, #10
 800ee3a:	f00d f883 	bl	801bf44 <TFT_DrawLine>
	GUI_TextRu_Info(10, 145);
 800ee3e:	2191      	movs	r1, #145	; 0x91
 800ee40:	200a      	movs	r0, #10
 800ee42:	f009 f889 	bl	8017f58 <GUI_TextRu_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800ee46:	23b7      	movs	r3, #183	; 0xb7
 800ee48:	4619      	mov	r1, r3
 800ee4a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee4e:	9400      	str	r4, [sp, #0]
 800ee50:	200a      	movs	r0, #10
 800ee52:	f00d f877 	bl	801bf44 <TFT_DrawLine>
	
	GUI_TextRu_Mode(10, 209);
 800ee56:	21d1      	movs	r1, #209	; 0xd1
 800ee58:	200a      	movs	r0, #10
 800ee5a:	f009 f91f 	bl	801809c <GUI_TextRu_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800ee5e:	4b21      	ldr	r3, [pc, #132]	; (800eee4 <GUI_OptionMenuRu+0xd4>)
 800ee60:	21ca      	movs	r1, #202	; 0xca
 800ee62:	781a      	ldrb	r2, [r3, #0]
 800ee64:	20b6      	movs	r0, #182	; 0xb6
 800ee66:	f003 ffd3 	bl	8012e10 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f00d faf6 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800ee70:	2063      	movs	r0, #99	; 0x63
 800ee72:	f00d faf9 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800ee76:	481c      	ldr	r0, [pc, #112]	; (800eee8 <GUI_OptionMenuRu+0xd8>)
 800ee78:	f00d faea 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800ee7c:	2245      	movs	r2, #69	; 0x45
 800ee7e:	21d2      	movs	r1, #210	; 0xd2
 800ee80:	20e1      	movs	r0, #225	; 0xe1
 800ee82:	f00d fbaf 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800ee86:	224c      	movs	r2, #76	; 0x4c
 800ee88:	21d2      	movs	r1, #210	; 0xd2
 800ee8a:	209b      	movs	r0, #155	; 0x9b
 800ee8c:	f00d fbaa 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ee90:	23f8      	movs	r3, #248	; 0xf8
 800ee92:	4619      	mov	r1, r3
 800ee94:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee98:	9400      	str	r4, [sp, #0]
 800ee9a:	200a      	movs	r0, #10
 800ee9c:	f00d f852 	bl	801bf44 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800eea0:	f240 1113 	movw	r1, #275	; 0x113
 800eea4:	200a      	movs	r0, #10
 800eea6:	f007 fad5 	bl	8016454 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800eeaa:	4b10      	ldr	r3, [pc, #64]	; (800eeec <GUI_OptionMenuRu+0xdc>)
 800eeac:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800eeb0:	781a      	ldrb	r2, [r3, #0]
 800eeb2:	20b6      	movs	r0, #182	; 0xb6
 800eeb4:	f003 ff52 	bl	8012d5c <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800eeb8:	f240 1113 	movw	r1, #275	; 0x113
 800eebc:	20de      	movs	r0, #222	; 0xde
 800eebe:	f007 fe09 	bl	8016ad4 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800eec2:	f240 1113 	movw	r1, #275	; 0x113
 800eec6:	208c      	movs	r0, #140	; 0x8c
 800eec8:	f007 fe28 	bl	8016b1c <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800eecc:	f240 1339 	movw	r3, #313	; 0x139
 800eed0:	9400      	str	r4, [sp, #0]
 800eed2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800eed6:	4619      	mov	r1, r3
 800eed8:	200a      	movs	r0, #10
 800eeda:	f00d f833 	bl	801bf44 <TFT_DrawLine>
}
 800eede:	b002      	add	sp, #8
 800eee0:	bd10      	pop	{r4, pc}
 800eee2:	bf00      	nop
 800eee4:	20000ebc 	.word	0x20000ebc
 800eee8:	200001b0 	.word	0x200001b0
 800eeec:	20090a6a 	.word	0x20090a6a

0800eef0 <GUI_OptionMenuEn>:
void GUI_OptionMenuEn()
{
 800eef0:	b513      	push	{r0, r1, r4, lr}
	GUI_TextEn_Language(10, 88);
 800eef2:	2158      	movs	r1, #88	; 0x58
 800eef4:	200a      	movs	r0, #10
 800eef6:	f007 feb1 	bl	8016c5c <GUI_TextEn_Language>
	GUI_TextEn_English(127, 88);
 800eefa:	2158      	movs	r1, #88	; 0x58
 800eefc:	207f      	movs	r0, #127	; 0x7f
 800eefe:	f007 fefb 	bl	8016cf8 <GUI_TextEn_English>
	GUI_Flag_En(218, 86);
 800ef02:	2156      	movs	r1, #86	; 0x56
 800ef04:	20da      	movs	r0, #218	; 0xda
 800ef06:	f003 ffe6 	bl	8012ed6 <GUI_Flag_En>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800ef0a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ef0e:	2378      	movs	r3, #120	; 0x78
 800ef10:	4619      	mov	r1, r3
 800ef12:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ef16:	9400      	str	r4, [sp, #0]
 800ef18:	200a      	movs	r0, #10
 800ef1a:	f00d f813 	bl	801bf44 <TFT_DrawLine>
	GUI_TextEn_Info(10, 147);
 800ef1e:	2193      	movs	r1, #147	; 0x93
 800ef20:	200a      	movs	r0, #10
 800ef22:	f007 ff31 	bl	8016d88 <GUI_TextEn_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800ef26:	23b7      	movs	r3, #183	; 0xb7
 800ef28:	4619      	mov	r1, r3
 800ef2a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ef2e:	9400      	str	r4, [sp, #0]
 800ef30:	200a      	movs	r0, #10
 800ef32:	f00d f807 	bl	801bf44 <TFT_DrawLine>
	
	GUI_TextEn_Mode(10, 211);
 800ef36:	21d3      	movs	r1, #211	; 0xd3
 800ef38:	200a      	movs	r0, #10
 800ef3a:	f008 fa73 	bl	8017424 <GUI_TextEn_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800ef3e:	4b21      	ldr	r3, [pc, #132]	; (800efc4 <GUI_OptionMenuEn+0xd4>)
 800ef40:	21ca      	movs	r1, #202	; 0xca
 800ef42:	781a      	ldrb	r2, [r3, #0]
 800ef44:	20b6      	movs	r0, #182	; 0xb6
 800ef46:	f003 ff63 	bl	8012e10 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f00d fa86 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800ef50:	2063      	movs	r0, #99	; 0x63
 800ef52:	f00d fa89 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800ef56:	481c      	ldr	r0, [pc, #112]	; (800efc8 <GUI_OptionMenuEn+0xd8>)
 800ef58:	f00d fa7a 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800ef5c:	2245      	movs	r2, #69	; 0x45
 800ef5e:	21d2      	movs	r1, #210	; 0xd2
 800ef60:	20e1      	movs	r0, #225	; 0xe1
 800ef62:	f00d fb3f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800ef66:	224c      	movs	r2, #76	; 0x4c
 800ef68:	21d2      	movs	r1, #210	; 0xd2
 800ef6a:	209b      	movs	r0, #155	; 0x9b
 800ef6c:	f00d fb3a 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ef70:	23f8      	movs	r3, #248	; 0xf8
 800ef72:	4619      	mov	r1, r3
 800ef74:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ef78:	9400      	str	r4, [sp, #0]
 800ef7a:	200a      	movs	r0, #10
 800ef7c:	f00c ffe2 	bl	801bf44 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800ef80:	f240 1113 	movw	r1, #275	; 0x113
 800ef84:	200a      	movs	r0, #10
 800ef86:	f007 fa65 	bl	8016454 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800ef8a:	4b10      	ldr	r3, [pc, #64]	; (800efcc <GUI_OptionMenuEn+0xdc>)
 800ef8c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ef90:	781a      	ldrb	r2, [r3, #0]
 800ef92:	20b6      	movs	r0, #182	; 0xb6
 800ef94:	f003 fee2 	bl	8012d5c <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800ef98:	f240 1113 	movw	r1, #275	; 0x113
 800ef9c:	20de      	movs	r0, #222	; 0xde
 800ef9e:	f007 fd99 	bl	8016ad4 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800efa2:	f240 1113 	movw	r1, #275	; 0x113
 800efa6:	208c      	movs	r0, #140	; 0x8c
 800efa8:	f007 fdb8 	bl	8016b1c <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800efac:	f240 1339 	movw	r3, #313	; 0x139
 800efb0:	9400      	str	r4, [sp, #0]
 800efb2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800efb6:	4619      	mov	r1, r3
 800efb8:	200a      	movs	r0, #10
 800efba:	f00c ffc3 	bl	801bf44 <TFT_DrawLine>
}
 800efbe:	b002      	add	sp, #8
 800efc0:	bd10      	pop	{r4, pc}
 800efc2:	bf00      	nop
 800efc4:	20000ebc 	.word	0x20000ebc
 800efc8:	200001b0 	.word	0x200001b0
 800efcc:	20090a6a 	.word	0x20090a6a

0800efd0 <GUI_Title_Screen>:
void GUI_Title_Screen()
{
 800efd0:	b507      	push	{r0, r1, r2, lr}
	TFT_FillScreen_DMA(0x0084);
 800efd2:	2084      	movs	r0, #132	; 0x84
 800efd4:	f00c fe14 	bl	801bc00 <TFT_FillScreen_DMA>
	GUI_TitleString_Name(80, 330);
 800efd8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800efdc:	2050      	movs	r0, #80	; 0x50
 800efde:	f008 fea3 	bl	8017d28 <GUI_TitleString_Name>
	GUI_TitleString_Version(180, 420, VERSION);
 800efe2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800efe6:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800efea:	20b4      	movs	r0, #180	; 0xb4
 800efec:	f008 fef6 	bl	8017ddc <GUI_TitleString_Version>
	sImage bmTKA_logo_Flash = {
 800eff0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800eff4:	f8ad 3000 	strh.w	r3, [sp]
 800eff8:	23b5      	movs	r3, #181	; 0xb5
 800effa:	f8ad 3002 	strh.w	r3, [sp, #2]
 800effe:	4b08      	ldr	r3, [pc, #32]	; (800f020 <GUI_Title_Screen+0x50>)
 800f000:	9301      	str	r3, [sp, #4]
			TKA_LOGO_BMP_SIZEX, // xSize
			TKA_LOGO_BMP_SIZEY, // ySize
			(uint16_t *)bmp,  // Pointer to picture data
		};
	TFT_DrawBitmap(0, 100, bmTKA_logo_Flash);
 800f002:	ab02      	add	r3, sp, #8
 800f004:	e913 000c 	ldmdb	r3, {r2, r3}
 800f008:	2164      	movs	r1, #100	; 0x64
 800f00a:	2000      	movs	r0, #0
 800f00c:	f00d f9f9 	bl	801c402 <TFT_DrawBitmap>
	Measure_Color_xy |= CIE_xy_1931_1964;
 800f010:	4a04      	ldr	r2, [pc, #16]	; (800f024 <GUI_Title_Screen+0x54>)
 800f012:	7813      	ldrb	r3, [r2, #0]
 800f014:	f043 0301 	orr.w	r3, r3, #1
 800f018:	7013      	strb	r3, [r2, #0]
}
 800f01a:	b003      	add	sp, #12
 800f01c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f020:	20055942 	.word	0x20055942
 800f024:	200056f4 	.word	0x200056f4

0800f028 <Measure_Elements_Draw>:
		Prev_Inf_Screen = Measure_Screen;
		preGUI_screen_state = Measure_Screen;
}

void Measure_Elements_Draw(uint8_t Measure_Number)
{	
 800f028:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t Y = 70, limit = 410;
	
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
	{
		screen_count_old = screen_count;
 800f02c:	4da4      	ldr	r5, [pc, #656]	; (800f2c0 <Measure_Elements_Draw+0x298>)
 800f02e:	4fa5      	ldr	r7, [pc, #660]	; (800f2c4 <Measure_Elements_Draw+0x29c>)
{	
 800f030:	4606      	mov	r6, r0
	uint16_t Y = 70, limit = 410;
 800f032:	2446      	movs	r4, #70	; 0x46
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f034:	2e0e      	cmp	r6, #14
 800f036:	f200 8099 	bhi.w	800f16c <Measure_Elements_Draw+0x144>
		screen_count_old = screen_count;
 800f03a:	782b      	ldrb	r3, [r5, #0]
 800f03c:	703b      	strb	r3, [r7, #0]
		
		switch(state_i){
 800f03e:	2e0c      	cmp	r6, #12
 800f040:	f200 808c 	bhi.w	800f15c <Measure_Elements_Draw+0x134>
 800f044:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f048:	0035000d 	.word	0x0035000d
 800f04c:	0060004c 	.word	0x0060004c
 800f050:	00ba0095 	.word	0x00ba0095
 800f054:	00fc00d2 	.word	0x00fc00d2
 800f058:	01680124 	.word	0x01680124
 800f05c:	019a0183 	.word	0x019a0183
 800f060:	01ba      	.short	0x01ba
					case 0: if(Measure_Field&Illuminance){
 800f062:	4a99      	ldr	r2, [pc, #612]	; (800f2c8 <Measure_Elements_Draw+0x2a0>)
 800f064:	8812      	ldrh	r2, [r2, #0]
 800f066:	07d2      	lsls	r2, r2, #31
 800f068:	d578      	bpl.n	800f15c <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f06a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f06e:	f280 81b9 	bge.w	800f3e4 <Measure_Elements_Draw+0x3bc>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f072:	4b96      	ldr	r3, [pc, #600]	; (800f2cc <Measure_Elements_Draw+0x2a4>)
 800f074:	4996      	ldr	r1, [pc, #600]	; (800f2d0 <Measure_Elements_Draw+0x2a8>)
 800f076:	781a      	ldrb	r2, [r3, #0]
 800f078:	4b96      	ldr	r3, [pc, #600]	; (800f2d4 <Measure_Elements_Draw+0x2ac>)
 800f07a:	4897      	ldr	r0, [pc, #604]	; (800f2d8 <Measure_Elements_Draw+0x2b0>)
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	b17a      	cbz	r2, 800f0a0 <Measure_Elements_Draw+0x78>
 800f080:	7802      	ldrb	r2, [r0, #0]
 800f082:	9200      	str	r2, [sp, #0]
 800f084:	ed91 0a00 	vldr	s0, [r1]
 800f088:	2200      	movs	r2, #0
 800f08a:	4621      	mov	r1, r4
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
									Y+=10;
							} else {screen_count++;}} break;
				case 1: if(Measure_Field&Irradiance){
					if(Y+35 <= limit){
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f08c:	2014      	movs	r0, #20
 800f08e:	f004 f843 	bl	8013118 <GUI_Text_E_Measure>
									Y+=10;
							}else {screen_count++;}} break;
				case 12: if(Measure_Field&SP_measure){
					if(Y+35 <= limit){
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
									Y+=35;
 800f092:	f104 0323 	add.w	r3, r4, #35	; 0x23
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f096:	f64f 72ff 	movw	r2, #65535	; 0xffff
									Y+=35;
 800f09a:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f09c:	9200      	str	r2, [sp, #0]
 800f09e:	e085      	b.n	800f1ac <Measure_Elements_Draw+0x184>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f0a0:	7800      	ldrb	r0, [r0, #0]
 800f0a2:	9000      	str	r0, [sp, #0]
 800f0a4:	ed91 0a00 	vldr	s0, [r1]
 800f0a8:	4621      	mov	r1, r4
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f0aa:	2014      	movs	r0, #20
 800f0ac:	f004 fa4e 	bl	801354c <GUI_Text_L_Measure>
 800f0b0:	e7ef      	b.n	800f092 <Measure_Elements_Draw+0x6a>
				case 1: if(Measure_Field&Irradiance){
 800f0b2:	4a85      	ldr	r2, [pc, #532]	; (800f2c8 <Measure_Elements_Draw+0x2a0>)
 800f0b4:	8812      	ldrh	r2, [r2, #0]
 800f0b6:	0790      	lsls	r0, r2, #30
 800f0b8:	d550      	bpl.n	800f15c <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f0ba:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f0be:	f280 8191 	bge.w	800f3e4 <Measure_Elements_Draw+0x3bc>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f0c2:	4b82      	ldr	r3, [pc, #520]	; (800f2cc <Measure_Elements_Draw+0x2a4>)
 800f0c4:	4a84      	ldr	r2, [pc, #528]	; (800f2d8 <Measure_Elements_Draw+0x2b0>)
 800f0c6:	7818      	ldrb	r0, [r3, #0]
 800f0c8:	4b82      	ldr	r3, [pc, #520]	; (800f2d4 <Measure_Elements_Draw+0x2ac>)
 800f0ca:	4984      	ldr	r1, [pc, #528]	; (800f2dc <Measure_Elements_Draw+0x2b4>)
 800f0cc:	7812      	ldrb	r2, [r2, #0]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	9200      	str	r2, [sp, #0]
 800f0d2:	ed91 0a00 	vldr	s0, [r1]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	4621      	mov	r1, r4
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	d0e5      	beq.n	800f0aa <Measure_Elements_Draw+0x82>
 800f0de:	e7d5      	b.n	800f08c <Measure_Elements_Draw+0x64>
				case 2: if(Measure_Field&PPFD){
 800f0e0:	4a79      	ldr	r2, [pc, #484]	; (800f2c8 <Measure_Elements_Draw+0x2a0>)
 800f0e2:	8812      	ldrh	r2, [r2, #0]
 800f0e4:	0751      	lsls	r1, r2, #29
 800f0e6:	d539      	bpl.n	800f15c <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f0e8:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f0ec:	f280 817a 	bge.w	800f3e4 <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPF_Measure(20, Y, PPFD_PPL_Measure, exp_start, exp_set);
 800f0f0:	497b      	ldr	r1, [pc, #492]	; (800f2e0 <Measure_Elements_Draw+0x2b8>)
 800f0f2:	4b79      	ldr	r3, [pc, #484]	; (800f2d8 <Measure_Elements_Draw+0x2b0>)
 800f0f4:	4a77      	ldr	r2, [pc, #476]	; (800f2d4 <Measure_Elements_Draw+0x2ac>)
 800f0f6:	ed91 0a00 	vldr	s0, [r1]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	7812      	ldrb	r2, [r2, #0]
 800f0fe:	4621      	mov	r1, r4
 800f100:	2014      	movs	r0, #20
 800f102:	f004 fc01 	bl	8013908 <GUI_Text_PPF_Measure>
 800f106:	e7c4      	b.n	800f092 <Measure_Elements_Draw+0x6a>
				case 3: if(Measure_Field&PPFD_BGR){
 800f108:	4a6f      	ldr	r2, [pc, #444]	; (800f2c8 <Measure_Elements_Draw+0x2a0>)
 800f10a:	8812      	ldrh	r2, [r2, #0]
 800f10c:	0712      	lsls	r2, r2, #28
 800f10e:	d525      	bpl.n	800f15c <Measure_Elements_Draw+0x134>
						if(Y+95 <= limit){
 800f110:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 800f114:	f280 8166 	bge.w	800f3e4 <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPFRGB_Measure(20, Y, PPFD_PPL_Red_Measure, PPFD_PPL_Green_Measure, PPFD_PPL_Blue_Measure, PPFD_PPL_Far_Red_Measure, exp_start, exp_set);
 800f118:	4972      	ldr	r1, [pc, #456]	; (800f2e4 <Measure_Elements_Draw+0x2bc>)
 800f11a:	4b6f      	ldr	r3, [pc, #444]	; (800f2d8 <Measure_Elements_Draw+0x2b0>)
 800f11c:	edd1 1a00 	vldr	s3, [r1]
 800f120:	4971      	ldr	r1, [pc, #452]	; (800f2e8 <Measure_Elements_Draw+0x2c0>)
 800f122:	4a6c      	ldr	r2, [pc, #432]	; (800f2d4 <Measure_Elements_Draw+0x2ac>)
 800f124:	ed91 1a00 	vldr	s2, [r1]
 800f128:	4970      	ldr	r1, [pc, #448]	; (800f2ec <Measure_Elements_Draw+0x2c4>)
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	edd1 0a00 	vldr	s1, [r1]
 800f130:	496f      	ldr	r1, [pc, #444]	; (800f2f0 <Measure_Elements_Draw+0x2c8>)
 800f132:	7812      	ldrb	r2, [r2, #0]
 800f134:	ed91 0a00 	vldr	s0, [r1]
 800f138:	2014      	movs	r0, #20
 800f13a:	4621      	mov	r1, r4
 800f13c:	f004 fd64 	bl	8013c08 <GUI_Text_PPFRGB_Measure>
									Y+=95;
 800f140:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 800f144:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f14a:	9200      	str	r2, [sp, #0]
 800f14c:	4619      	mov	r1, r3
 800f14e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f152:	200a      	movs	r0, #10
 800f154:	f00c fef6 	bl	801bf44 <TFT_DrawLine>
									Y+=10;
 800f158:	3469      	adds	r4, #105	; 0x69
									Y+=10;
 800f15a:	b2a4      	uxth	r4, r4
							}else {screen_count++;}} break;
			default: break;
		}

		if (screen_count != screen_count_old)
 800f15c:	782b      	ldrb	r3, [r5, #0]
 800f15e:	783a      	ldrb	r2, [r7, #0]
 800f160:	429a      	cmp	r2, r3
 800f162:	f000 8142 	beq.w	800f3ea <Measure_Elements_Draw+0x3c2>
			{
				state_Measure_Elements = state_i;
 800f166:	4a63      	ldr	r2, [pc, #396]	; (800f2f4 <Measure_Elements_Draw+0x2cc>)
				screen_count_old = screen_count;
 800f168:	703b      	strb	r3, [r7, #0]
				state_Measure_Elements = state_i;
 800f16a:	7016      	strb	r6, [r2, #0]
				break;
			}	
			
	}
	
}
 800f16c:	b004      	add	sp, #16
 800f16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				case 4: if(Measure_Field&CCT){
 800f172:	4a55      	ldr	r2, [pc, #340]	; (800f2c8 <Measure_Elements_Draw+0x2a0>)
 800f174:	8812      	ldrh	r2, [r2, #0]
 800f176:	05d0      	lsls	r0, r2, #23
 800f178:	d5f0      	bpl.n	800f15c <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f17a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f17e:	f280 8131 	bge.w	800f3e4 <Measure_Elements_Draw+0x3bc>
							GUI_Text_CCT_Measure(20, Y,  Tc_Measure == 0xFFFF ? 0 : Tc_Measure, exp_start, exp_set); //
 800f182:	4b5d      	ldr	r3, [pc, #372]	; (800f2f8 <Measure_Elements_Draw+0x2d0>)
 800f184:	4954      	ldr	r1, [pc, #336]	; (800f2d8 <Measure_Elements_Draw+0x2b0>)
 800f186:	881a      	ldrh	r2, [r3, #0]
 800f188:	4b52      	ldr	r3, [pc, #328]	; (800f2d4 <Measure_Elements_Draw+0x2ac>)
 800f18a:	7809      	ldrb	r1, [r1, #0]
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	9100      	str	r1, [sp, #0]
 800f190:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800f194:	4542      	cmp	r2, r8
 800f196:	bf08      	it	eq
 800f198:	2200      	moveq	r2, #0
 800f19a:	4621      	mov	r1, r4
 800f19c:	2014      	movs	r0, #20
 800f19e:	f005 fc8d 	bl	8014abc <GUI_Text_CCT_Measure>
									Y+=35;
 800f1a2:	f104 0323 	add.w	r3, r4, #35	; 0x23
 800f1a6:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f1a8:	f8cd 8000 	str.w	r8, [sp]
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f1ac:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	200a      	movs	r0, #10
 800f1b4:	f00c fec6 	bl	801bf44 <TFT_DrawLine>
									Y+=10;
 800f1b8:	342d      	adds	r4, #45	; 0x2d
 800f1ba:	e7ce      	b.n	800f15a <Measure_Elements_Draw+0x132>
				case 5: if(Measure_Field&delta_E){
 800f1bc:	4a42      	ldr	r2, [pc, #264]	; (800f2c8 <Measure_Elements_Draw+0x2a0>)
 800f1be:	8812      	ldrh	r2, [r2, #0]
 800f1c0:	0511      	lsls	r1, r2, #20
 800f1c2:	d5cb      	bpl.n	800f15c <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f1c4:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f1c8:	f280 810c 	bge.w	800f3e4 <Measure_Elements_Draw+0x3bc>
									GUI_Text_deltaE_Measure(20, Y, delta_Eab_Measure, exp_start, exp_set);
 800f1cc:	4b4b      	ldr	r3, [pc, #300]	; (800f2fc <Measure_Elements_Draw+0x2d4>)
 800f1ce:	4a41      	ldr	r2, [pc, #260]	; (800f2d4 <Measure_Elements_Draw+0x2ac>)
 800f1d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1d4:	7812      	ldrb	r2, [r2, #0]
 800f1d6:	ee00 3a10 	vmov	s0, r3
 800f1da:	4b3f      	ldr	r3, [pc, #252]	; (800f2d8 <Measure_Elements_Draw+0x2b0>)
 800f1dc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	2014      	movs	r0, #20
 800f1e6:	f005 fe61 	bl	8014eac <GUI_Text_deltaE_Measure>
 800f1ea:	e752      	b.n	800f092 <Measure_Elements_Draw+0x6a>
				case 6: if(Measure_Field&CIE_XYZ){
 800f1ec:	4a36      	ldr	r2, [pc, #216]	; (800f2c8 <Measure_Elements_Draw+0x2a0>)
 800f1ee:	8812      	ldrh	r2, [r2, #0]
 800f1f0:	06d2      	lsls	r2, r2, #27
 800f1f2:	d5b3      	bpl.n	800f15c <Measure_Elements_Draw+0x134>
						if(Y+105 <= limit){
 800f1f4:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f1f8:	f280 80f4 	bge.w	800f3e4 <Measure_Elements_Draw+0x3bc>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f1fc:	4b40      	ldr	r3, [pc, #256]	; (800f300 <Measure_Elements_Draw+0x2d8>)
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	b9e3      	cbnz	r3, 800f23c <Measure_Elements_Draw+0x214>
 800f202:	4940      	ldr	r1, [pc, #256]	; (800f304 <Measure_Elements_Draw+0x2dc>)
 800f204:	4834      	ldr	r0, [pc, #208]	; (800f2d8 <Measure_Elements_Draw+0x2b0>)
 800f206:	880a      	ldrh	r2, [r1, #0]
 800f208:	7800      	ldrb	r0, [r0, #0]
 800f20a:	884b      	ldrh	r3, [r1, #2]
 800f20c:	8889      	ldrh	r1, [r1, #4]
 800f20e:	9002      	str	r0, [sp, #8]
 800f210:	4830      	ldr	r0, [pc, #192]	; (800f2d4 <Measure_Elements_Draw+0x2ac>)
 800f212:	7800      	ldrb	r0, [r0, #0]
 800f214:	9001      	str	r0, [sp, #4]
 800f216:	9100      	str	r1, [sp, #0]
 800f218:	2014      	movs	r0, #20
 800f21a:	4621      	mov	r1, r4
 800f21c:	f005 f91a 	bl	8014454 <GUI_Text_XYZ_Measure>
									Y+=105;
 800f220:	f104 0369 	add.w	r3, r4, #105	; 0x69
 800f224:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f22a:	9200      	str	r2, [sp, #0]
 800f22c:	4619      	mov	r1, r3
 800f22e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f232:	200a      	movs	r0, #10
 800f234:	f00c fe86 	bl	801bf44 <TFT_DrawLine>
									Y+=10;
 800f238:	3473      	adds	r4, #115	; 0x73
 800f23a:	e78e      	b.n	800f15a <Measure_Elements_Draw+0x132>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f23c:	4932      	ldr	r1, [pc, #200]	; (800f308 <Measure_Elements_Draw+0x2e0>)
 800f23e:	e7e1      	b.n	800f204 <Measure_Elements_Draw+0x1dc>
				case 7: if(Measure_Field&CIE_xy){
 800f240:	4a21      	ldr	r2, [pc, #132]	; (800f2c8 <Measure_Elements_Draw+0x2a0>)
 800f242:	8812      	ldrh	r2, [r2, #0]
 800f244:	0690      	lsls	r0, r2, #26
 800f246:	d589      	bpl.n	800f15c <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f248:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f24c:	f300 80ca 	bgt.w	800f3e4 <Measure_Elements_Draw+0x3bc>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f250:	4b2b      	ldr	r3, [pc, #172]	; (800f300 <Measure_Elements_Draw+0x2d8>)
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	b9d3      	cbnz	r3, 800f28c <Measure_Elements_Draw+0x264>
 800f256:	4b2d      	ldr	r3, [pc, #180]	; (800f30c <Measure_Elements_Draw+0x2e4>)
 800f258:	ed93 0a00 	vldr	s0, [r3]
 800f25c:	edd3 0a01 	vldr	s1, [r3, #4]
 800f260:	4a1c      	ldr	r2, [pc, #112]	; (800f2d4 <Measure_Elements_Draw+0x2ac>)
 800f262:	4b1d      	ldr	r3, [pc, #116]	; (800f2d8 <Measure_Elements_Draw+0x2b0>)
 800f264:	7812      	ldrb	r2, [r2, #0]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	4621      	mov	r1, r4
 800f26a:	2014      	movs	r0, #20
 800f26c:	f005 fa80 	bl	8014770 <GUI_Text_xy_Measure>
									Y+=70;
 800f270:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800f274:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f27a:	9200      	str	r2, [sp, #0]
 800f27c:	4619      	mov	r1, r3
 800f27e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f282:	200a      	movs	r0, #10
 800f284:	f00c fe5e 	bl	801bf44 <TFT_DrawLine>
									Y+=10;
 800f288:	3450      	adds	r4, #80	; 0x50
 800f28a:	e766      	b.n	800f15a <Measure_Elements_Draw+0x132>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f28c:	4b20      	ldr	r3, [pc, #128]	; (800f310 <Measure_Elements_Draw+0x2e8>)
 800f28e:	e7e3      	b.n	800f258 <Measure_Elements_Draw+0x230>
				case 8: if(Measure_Field&CIE_Luv){
 800f290:	4a0d      	ldr	r2, [pc, #52]	; (800f2c8 <Measure_Elements_Draw+0x2a0>)
 800f292:	8812      	ldrh	r2, [r2, #0]
 800f294:	0651      	lsls	r1, r2, #25
 800f296:	f57f af61 	bpl.w	800f15c <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f29a:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f29e:	f300 80a1 	bgt.w	800f3e4 <Measure_Elements_Draw+0x3bc>
									GUI_Text_uv_Measure(20, Y, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 800f2a2:	491c      	ldr	r1, [pc, #112]	; (800f314 <Measure_Elements_Draw+0x2ec>)
 800f2a4:	4b0c      	ldr	r3, [pc, #48]	; (800f2d8 <Measure_Elements_Draw+0x2b0>)
 800f2a6:	4a0b      	ldr	r2, [pc, #44]	; (800f2d4 <Measure_Elements_Draw+0x2ac>)
 800f2a8:	edd1 0a01 	vldr	s1, [r1, #4]
 800f2ac:	ed91 0a00 	vldr	s0, [r1]
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	7812      	ldrb	r2, [r2, #0]
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	2014      	movs	r0, #20
 800f2b8:	f005 fb1e 	bl	80148f8 <GUI_Text_uv_Measure>
 800f2bc:	e7d8      	b.n	800f270 <Measure_Elements_Draw+0x248>
 800f2be:	bf00      	nop
 800f2c0:	2000571b 	.word	0x2000571b
 800f2c4:	2000571c 	.word	0x2000571c
 800f2c8:	200056f6 	.word	0x200056f6
 800f2cc:	20000ebc 	.word	0x20000ebc
 800f2d0:	20095c5c 	.word	0x20095c5c
 800f2d4:	20000ec1 	.word	0x20000ec1
 800f2d8:	20000ec0 	.word	0x20000ec0
 800f2dc:	200956c8 	.word	0x200956c8
 800f2e0:	200956d0 	.word	0x200956d0
 800f2e4:	200956cc 	.word	0x200956cc
 800f2e8:	200957b4 	.word	0x200957b4
 800f2ec:	20095b38 	.word	0x20095b38
 800f2f0:	20095a74 	.word	0x20095a74
 800f2f4:	20005720 	.word	0x20005720
 800f2f8:	20054930 	.word	0x20054930
 800f2fc:	20090a66 	.word	0x20090a66
 800f300:	200056f4 	.word	0x200056f4
 800f304:	2008f518 	.word	0x2008f518
 800f308:	2008f512 	.word	0x2008f512
 800f30c:	2008f538 	.word	0x2008f538
 800f310:	2008f530 	.word	0x2008f530
 800f314:	2008f528 	.word	0x2008f528
				case 9: if(Measure_Field&CIE_Lab){
 800f318:	4a35      	ldr	r2, [pc, #212]	; (800f3f0 <Measure_Elements_Draw+0x3c8>)
 800f31a:	8812      	ldrh	r2, [r2, #0]
 800f31c:	0612      	lsls	r2, r2, #24
 800f31e:	f57f af1d 	bpl.w	800f15c <Measure_Elements_Draw+0x134>
					if(Y+105 <= limit){
 800f322:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f326:	da5d      	bge.n	800f3e4 <Measure_Elements_Draw+0x3bc>
									GUI_Text_LAB_Measure(20, Y, colorimetry_LAB[0],colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 800f328:	4832      	ldr	r0, [pc, #200]	; (800f3f4 <Measure_Elements_Draw+0x3cc>)
 800f32a:	4933      	ldr	r1, [pc, #204]	; (800f3f8 <Measure_Elements_Draw+0x3d0>)
 800f32c:	7800      	ldrb	r0, [r0, #0]
 800f32e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f332:	f9b1 2000 	ldrsh.w	r2, [r1]
 800f336:	9002      	str	r0, [sp, #8]
 800f338:	4830      	ldr	r0, [pc, #192]	; (800f3fc <Measure_Elements_Draw+0x3d4>)
 800f33a:	7800      	ldrb	r0, [r0, #0]
 800f33c:	9001      	str	r0, [sp, #4]
 800f33e:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800f342:	9100      	str	r1, [sp, #0]
 800f344:	2014      	movs	r0, #20
 800f346:	4621      	mov	r1, r4
 800f348:	f006 fa8e 	bl	8015868 <GUI_Text_LAB_Measure>
 800f34c:	e768      	b.n	800f220 <Measure_Elements_Draw+0x1f8>
				case 10: if(Measure_Field&lambda_d){
 800f34e:	4a28      	ldr	r2, [pc, #160]	; (800f3f0 <Measure_Elements_Draw+0x3c8>)
 800f350:	8812      	ldrh	r2, [r2, #0]
 800f352:	0590      	lsls	r0, r2, #22
 800f354:	f57f af02 	bpl.w	800f15c <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f358:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f35c:	da42      	bge.n	800f3e4 <Measure_Elements_Draw+0x3bc>
									GUI_Text_lambdaD_Measure(20, Y, lambda_d_Measure, exp_start, exp_set);
 800f35e:	4b28      	ldr	r3, [pc, #160]	; (800f400 <Measure_Elements_Draw+0x3d8>)
 800f360:	4a26      	ldr	r2, [pc, #152]	; (800f3fc <Measure_Elements_Draw+0x3d4>)
 800f362:	881b      	ldrh	r3, [r3, #0]
 800f364:	7812      	ldrb	r2, [r2, #0]
 800f366:	ee00 3a10 	vmov	s0, r3
 800f36a:	4b22      	ldr	r3, [pc, #136]	; (800f3f4 <Measure_Elements_Draw+0x3cc>)
 800f36c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	4621      	mov	r1, r4
 800f374:	2014      	movs	r0, #20
 800f376:	f005 fc9b 	bl	8014cb0 <GUI_Text_lambdaD_Measure>
 800f37a:	e68a      	b.n	800f092 <Measure_Elements_Draw+0x6a>
				case 11: if(Measure_Field&EbEr){
 800f37c:	4a1c      	ldr	r2, [pc, #112]	; (800f3f0 <Measure_Elements_Draw+0x3c8>)
 800f37e:	8812      	ldrh	r2, [r2, #0]
 800f380:	04d1      	lsls	r1, r2, #19
 800f382:	f57f aeeb 	bpl.w	800f15c <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f386:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f38a:	dc2b      	bgt.n	800f3e4 <Measure_Elements_Draw+0x3bc>
						Mode_EL ?	 GUI_Text_EbEr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set); 
 800f38c:	4b1d      	ldr	r3, [pc, #116]	; (800f404 <Measure_Elements_Draw+0x3dc>)
 800f38e:	481e      	ldr	r0, [pc, #120]	; (800f408 <Measure_Elements_Draw+0x3e0>)
 800f390:	491e      	ldr	r1, [pc, #120]	; (800f40c <Measure_Elements_Draw+0x3e4>)
 800f392:	f893 e000 	ldrb.w	lr, [r3]
 800f396:	4a19      	ldr	r2, [pc, #100]	; (800f3fc <Measure_Elements_Draw+0x3d4>)
 800f398:	4b16      	ldr	r3, [pc, #88]	; (800f3f4 <Measure_Elements_Draw+0x3cc>)
 800f39a:	edd0 0a00 	vldr	s1, [r0]
 800f39e:	ed91 0a00 	vldr	s0, [r1]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	7812      	ldrb	r2, [r2, #0]
 800f3a6:	4621      	mov	r1, r4
 800f3a8:	2014      	movs	r0, #20
 800f3aa:	f1be 0f00 	cmp.w	lr, #0
 800f3ae:	d002      	beq.n	800f3b6 <Measure_Elements_Draw+0x38e>
 800f3b0:	f005 fe80 	bl	80150b4 <GUI_Text_EbEr_Measure>
 800f3b4:	e75c      	b.n	800f270 <Measure_Elements_Draw+0x248>
 800f3b6:	f006 f805 	bl	80153c4 <GUI_Text_LbLr_Measure>
 800f3ba:	e759      	b.n	800f270 <Measure_Elements_Draw+0x248>
				case 12: if(Measure_Field&SP_measure){
 800f3bc:	4a0c      	ldr	r2, [pc, #48]	; (800f3f0 <Measure_Elements_Draw+0x3c8>)
 800f3be:	8812      	ldrh	r2, [r2, #0]
 800f3c0:	0492      	lsls	r2, r2, #18
 800f3c2:	f57f aecb 	bpl.w	800f15c <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f3c6:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f3ca:	da0b      	bge.n	800f3e4 <Measure_Elements_Draw+0x3bc>
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
 800f3cc:	4910      	ldr	r1, [pc, #64]	; (800f410 <Measure_Elements_Draw+0x3e8>)
 800f3ce:	4b09      	ldr	r3, [pc, #36]	; (800f3f4 <Measure_Elements_Draw+0x3cc>)
 800f3d0:	4a0a      	ldr	r2, [pc, #40]	; (800f3fc <Measure_Elements_Draw+0x3d4>)
 800f3d2:	ed91 0a00 	vldr	s0, [r1]
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	7812      	ldrb	r2, [r2, #0]
 800f3da:	4621      	mov	r1, r4
 800f3dc:	2014      	movs	r0, #20
 800f3de:	f006 f97d 	bl	80156dc <GUI_Text_S_P_Measure>
 800f3e2:	e656      	b.n	800f092 <Measure_Elements_Draw+0x6a>
							}else {screen_count++;}} break;
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	702b      	strb	r3, [r5, #0]
 800f3e8:	e6b8      	b.n	800f15c <Measure_Elements_Draw+0x134>
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f3ea:	3601      	adds	r6, #1
 800f3ec:	b2f6      	uxtb	r6, r6
 800f3ee:	e621      	b.n	800f034 <Measure_Elements_Draw+0xc>
 800f3f0:	200056f6 	.word	0x200056f6
 800f3f4:	20000ec0 	.word	0x20000ec0
 800f3f8:	2008f50c 	.word	0x2008f50c
 800f3fc:	20000ec1 	.word	0x20000ec1
 800f400:	20095b34 	.word	0x20095b34
 800f404:	20000ebc 	.word	0x20000ebc
 800f408:	20095c58 	.word	0x20095c58
 800f40c:	20095c54 	.word	0x20095c54
 800f410:	200957b0 	.word	0x200957b0

0800f414 <GUI_Information_Screen>:
	TFT_FillScreen_DMA(TFT_Red);

}

void GUI_Information_Screen()
{
 800f414:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f416:	4b1e      	ldr	r3, [pc, #120]	; (800f490 <GUI_Information_Screen+0x7c>)
 800f418:	4a1e      	ldr	r2, [pc, #120]	; (800f494 <GUI_Information_Screen+0x80>)
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	7812      	ldrb	r2, [r2, #0]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d034      	beq.n	800f48c <GUI_Information_Screen+0x78>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f422:	2063      	movs	r0, #99	; 0x63
 800f424:	f00c fbec 	bl	801bc00 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f428:	4b1b      	ldr	r3, [pc, #108]	; (800f498 <GUI_Information_Screen+0x84>)
 800f42a:	491c      	ldr	r1, [pc, #112]	; (800f49c <GUI_Information_Screen+0x88>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	4a1c      	ldr	r2, [pc, #112]	; (800f4a0 <GUI_Information_Screen+0x8c>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f430:	8809      	ldrh	r1, [r1, #0]
 800f432:	7812      	ldrb	r2, [r2, #0]
 800f434:	4d1b      	ldr	r5, [pc, #108]	; (800f4a4 <GUI_Information_Screen+0x90>)
 800f436:	4c1c      	ldr	r4, [pc, #112]	; (800f4a8 <GUI_Information_Screen+0x94>)
		if(Language_status == En){
 800f438:	2b01      	cmp	r3, #1
 800f43a:	4b1c      	ldr	r3, [pc, #112]	; (800f4ac <GUI_Information_Screen+0x98>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	9100      	str	r1, [sp, #0]
 800f440:	f04f 0100 	mov.w	r1, #0
 800f444:	4608      	mov	r0, r1
		if(Language_status == En){
 800f446:	d110      	bne.n	800f46a <GUI_Information_Screen+0x56>
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f448:	f008 fb02 	bl	8017a50 <GUI_TextEn_Info_Callibration>
			GUI_TextEn_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f44c:	2100      	movs	r1, #0
 800f44e:	4608      	mov	r0, r1
 800f450:	882b      	ldrh	r3, [r5, #0]
 800f452:	8822      	ldrh	r2, [r4, #0]
 800f454:	f008 fb7e 	bl	8017b54 <GUI_TextEn_Info_Serial>
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f458:	2100      	movs	r1, #0
 800f45a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f45e:	4608      	mov	r0, r1
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
			GUI_TextRu_Info_Ver(0, 0, VERSION);
		}
	}
}
 800f460:	b003      	add	sp, #12
 800f462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f466:	f008 bbeb 	b.w	8017c40 <GUI_TextEn_Info_Ver>
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f46a:	f008 ffd7 	bl	801841c <GUI_TextRu_Info_Callibration>
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f46e:	2100      	movs	r1, #0
 800f470:	4608      	mov	r0, r1
 800f472:	882b      	ldrh	r3, [r5, #0]
 800f474:	8822      	ldrh	r2, [r4, #0]
 800f476:	f009 f88f 	bl	8018598 <GUI_TextRu_Info_Serial>
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f47a:	2100      	movs	r1, #0
 800f47c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f480:	4608      	mov	r0, r1
}
 800f482:	b003      	add	sp, #12
 800f484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f488:	f009 b900 	b.w	801868c <GUI_TextRu_Info_Ver>
}
 800f48c:	b003      	add	sp, #12
 800f48e:	bd30      	pop	{r4, r5, pc}
 800f490:	2000022a 	.word	0x2000022a
 800f494:	200056f1 	.word	0x200056f1
 800f498:	200056f3 	.word	0x200056f3
 800f49c:	200959e0 	.word	0x200959e0
 800f4a0:	200956c0 	.word	0x200956c0
 800f4a4:	20095a88 	.word	0x20095a88
 800f4a8:	200956c4 	.word	0x200956c4
 800f4ac:	200956d4 	.word	0x200956d4

0800f4b0 <GUI_SD_Write_Screen>:

void GUI_SD_Write_Screen()
{
 800f4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	if(preGUI_screen_state != GUI_screen_state){
 800f4b2:	4b29      	ldr	r3, [pc, #164]	; (800f558 <GUI_SD_Write_Screen+0xa8>)
 800f4b4:	4d29      	ldr	r5, [pc, #164]	; (800f55c <GUI_SD_Write_Screen+0xac>)
 800f4b6:	781a      	ldrb	r2, [r3, #0]
 800f4b8:	7829      	ldrb	r1, [r5, #0]
 800f4ba:	4291      	cmp	r1, r2
 800f4bc:	d020      	beq.n	800f500 <GUI_SD_Write_Screen+0x50>
		pause = 1;
 800f4be:	4b28      	ldr	r3, [pc, #160]	; (800f560 <GUI_SD_Write_Screen+0xb0>)
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
		if(Language_status == En){
 800f4c0:	4c28      	ldr	r4, [pc, #160]	; (800f564 <GUI_SD_Write_Screen+0xb4>)
		pause = 1;
 800f4c2:	2201      	movs	r2, #1
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f4c4:	2063      	movs	r0, #99	; 0x63
		pause = 1;
 800f4c6:	701a      	strb	r2, [r3, #0]
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f4c8:	f00c fb9a 	bl	801bc00 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f4cc:	7822      	ldrb	r2, [r4, #0]
 800f4ce:	2a01      	cmp	r2, #1
			GUI_TextEn_WriteSD(80, 120);
 800f4d0:	f04f 0178 	mov.w	r1, #120	; 0x78
 800f4d4:	f04f 0050 	mov.w	r0, #80	; 0x50
		if(Language_status == En){
 800f4d8:	d13a      	bne.n	800f550 <GUI_SD_Write_Screen+0xa0>
			GUI_TextEn_WriteSD(80, 120);
 800f4da:	f008 fa7f 	bl	80179dc <GUI_TextEn_WriteSD>
		}
		else
		{	
				 GUI_TextRu_WriteSD(80, 120);
		}
		if (SD_Detect == 0) {
 800f4de:	4b22      	ldr	r3, [pc, #136]	; (800f568 <GUI_SD_Write_Screen+0xb8>)
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	b96b      	cbnz	r3, 800f500 <GUI_SD_Write_Screen+0x50>
			Calculate_SD_Data(); 
 800f4e4:	f00a fad8 	bl	8019a98 <Calculate_SD_Data>
			SD_Witer(sdfile_cnt, Language_status, Memory_Data_satus, Mode_EL, CRICQS_done);
 800f4e8:	7821      	ldrb	r1, [r4, #0]
 800f4ea:	4c20      	ldr	r4, [pc, #128]	; (800f56c <GUI_SD_Write_Screen+0xbc>)
 800f4ec:	4b20      	ldr	r3, [pc, #128]	; (800f570 <GUI_SD_Write_Screen+0xc0>)
 800f4ee:	4a21      	ldr	r2, [pc, #132]	; (800f574 <GUI_SD_Write_Screen+0xc4>)
 800f4f0:	4821      	ldr	r0, [pc, #132]	; (800f578 <GUI_SD_Write_Screen+0xc8>)
 800f4f2:	7824      	ldrb	r4, [r4, #0]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	7812      	ldrb	r2, [r2, #0]
 800f4f8:	8800      	ldrh	r0, [r0, #0]
 800f4fa:	9400      	str	r4, [sp, #0]
 800f4fc:	f00a fbc0 	bl	8019c80 <SD_Witer>

		}
	}
	
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 800f500:	4c1e      	ldr	r4, [pc, #120]	; (800f57c <GUI_SD_Write_Screen+0xcc>)
 800f502:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f506:	f7f1 fb83 	bl	8000c10 <__aeabi_d2f>
 800f50a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800f50e:	ee00 0a10 	vmov	s0, r0
 800f512:	2055      	movs	r0, #85	; 0x55
 800f514:	f003 fdd0 	bl	80130b8 <GUI_Bar_Measure>
	
	if(SDWr_Status_bar == 1){
 800f518:	2200      	movs	r2, #0
 800f51a:	4b19      	ldr	r3, [pc, #100]	; (800f580 <GUI_SD_Write_Screen+0xd0>)
 800f51c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f520:	f7f1 fae6 	bl	8000af0 <__aeabi_dcmpeq>
 800f524:	b190      	cbz	r0, 800f54c <GUI_SD_Write_Screen+0x9c>
			if(sdfile_cnt < 999){
 800f526:	4b14      	ldr	r3, [pc, #80]	; (800f578 <GUI_SD_Write_Screen+0xc8>)
 800f528:	881a      	ldrh	r2, [r3, #0]
 800f52a:	f240 31e6 	movw	r1, #998	; 0x3e6
 800f52e:	428a      	cmp	r2, r1
					sdfile_cnt++;
 800f530:	bf94      	ite	ls
 800f532:	3201      	addls	r2, #1
				}else{
					sdfile_cnt = 0;
 800f534:	2200      	movhi	r2, #0
 800f536:	801a      	strh	r2, [r3, #0]
				} 
			WriteSDFLASH_t(sdfile_cnt);  
 800f538:	8818      	ldrh	r0, [r3, #0]
 800f53a:	2100      	movs	r1, #0
 800f53c:	f00a f99e 	bl	801987c <WriteSDFLASH_t>
			pause = 0; 
 800f540:	4b07      	ldr	r3, [pc, #28]	; (800f560 <GUI_SD_Write_Screen+0xb0>)
 800f542:	2200      	movs	r2, #0
 800f544:	701a      	strb	r2, [r3, #0]
			GUI_screen_state = Prev_Inf_Screen;
 800f546:	4b0f      	ldr	r3, [pc, #60]	; (800f584 <GUI_SD_Write_Screen+0xd4>)
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	702b      	strb	r3, [r5, #0]
	}

}
 800f54c:	b003      	add	sp, #12
 800f54e:	bd30      	pop	{r4, r5, pc}
				 GUI_TextRu_WriteSD(80, 120);
 800f550:	f008 ffe2 	bl	8018518 <GUI_TextRu_WriteSD>
 800f554:	e7c3      	b.n	800f4de <GUI_SD_Write_Screen+0x2e>
 800f556:	bf00      	nop
 800f558:	2000022a 	.word	0x2000022a
 800f55c:	200056f1 	.word	0x200056f1
 800f560:	20005718 	.word	0x20005718
 800f564:	200056f3 	.word	0x200056f3
 800f568:	20095c10 	.word	0x20095c10
 800f56c:	200056ec 	.word	0x200056ec
 800f570:	20000ebc 	.word	0x20000ebc
 800f574:	20000228 	.word	0x20000228
 800f578:	2000571e 	.word	0x2000571e
 800f57c:	20009750 	.word	0x20009750
 800f580:	3ff00000 	.word	0x3ff00000
 800f584:	20090a65 	.word	0x20090a65

0800f588 <GUI_Up_Panel>:


void GUI_Up_Panel()
{
	GUI_Battery_Level(0, 0, percentage_charge);
 800f588:	4b0f      	ldr	r3, [pc, #60]	; (800f5c8 <GUI_Up_Panel+0x40>)
{
 800f58a:	b507      	push	{r0, r1, r2, lr}
	GUI_Battery_Level(0, 0, percentage_charge);
 800f58c:	2100      	movs	r1, #0
 800f58e:	ed93 0b00 	vldr	d0, [r3]
 800f592:	4608      	mov	r0, r1
 800f594:	f006 fb64 	bl	8015c60 <GUI_Battery_Level>
	if (Bluetooth == ON){
 800f598:	4b0c      	ldr	r3, [pc, #48]	; (800f5cc <GUI_Up_Panel+0x44>)
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d106      	bne.n	800f5ae <GUI_Up_Panel+0x26>
		GUI_Bluetooth_Logo(240, 2);
 800f5a0:	2102      	movs	r1, #2
 800f5a2:	20f0      	movs	r0, #240	; 0xf0
	} else
	{
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
	}
}
 800f5a4:	b003      	add	sp, #12
 800f5a6:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Bluetooth_Logo(240, 2);
 800f5aa:	f002 bdf3 	b.w	8012194 <GUI_Bluetooth_Logo>
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
 800f5ae:	2363      	movs	r3, #99	; 0x63
 800f5b0:	9300      	str	r3, [sp, #0]
 800f5b2:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f5b6:	2323      	movs	r3, #35	; 0x23
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	20ef      	movs	r0, #239	; 0xef
 800f5bc:	f00c fd1f 	bl	801bffe <TFT_FillRectangle>
}
 800f5c0:	b003      	add	sp, #12
 800f5c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5c6:	bf00      	nop
 800f5c8:	20095b40 	.word	0x20095b40
 800f5cc:	20090a6a 	.word	0x20090a6a

0800f5d0 <GUI_Down_Panel>:

void GUI_Down_Panel()
{		
 800f5d0:	b508      	push	{r3, lr}
	GUI_Button_Settings(1, 426);
 800f5d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5d6:	2001      	movs	r0, #1
 800f5d8:	f002 fe2e 	bl	8012238 <GUI_Button_Settings>
	GUI_Button_SD_Card(55, 426, !SD_Detect);
 800f5dc:	4b1b      	ldr	r3, [pc, #108]	; (800f64c <GUI_Down_Panel+0x7c>)
 800f5de:	781a      	ldrb	r2, [r3, #0]
 800f5e0:	fab2 f282 	clz	r2, r2
 800f5e4:	0952      	lsrs	r2, r2, #5
 800f5e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5ea:	2037      	movs	r0, #55	; 0x37
 800f5ec:	f002 ffde 	bl	80125ac <GUI_Button_SD_Card>
	GUI_Button_Measure_Start_Pause(109, 426);
 800f5f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5f4:	206d      	movs	r0, #109	; 0x6d
 800f5f6:	f003 f8a5 	bl	8012744 <GUI_Button_Measure_Start_Pause>
	
	if(GUI_screen_state >= DataSet1_Screen)
 800f5fa:	4b15      	ldr	r3, [pc, #84]	; (800f650 <GUI_Down_Panel+0x80>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	2b06      	cmp	r3, #6
 800f600:	d90b      	bls.n	800f61a <GUI_Down_Panel+0x4a>
	{
		GUI_Button_Down(163, 426);
 800f602:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f606:	20a3      	movs	r0, #163	; 0xa3
 800f608:	f002 fe54 	bl	80122b4 <GUI_Button_Down>
		GUI_Button_TFT_On_Off(217, 426);
 800f60c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f610:	20d9      	movs	r0, #217	; 0xd9
	else
	{
		GUI_Button_TFT_Rotate(163, 426);
		GUI_Button_Right(217, 426);
	}
}
 800f612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_TFT_On_Off(217, 426);
 800f616:	f002 bf26 	b.w	8012466 <GUI_Button_TFT_On_Off>
	}else if(GUI_screen_state <= Measure3_Screen)
 800f61a:	2b03      	cmp	r3, #3
 800f61c:	d810      	bhi.n	800f640 <GUI_Down_Panel+0x70>
		GUI_Button_Down_Active(163, 426, (screen_count > 0));
 800f61e:	4b0d      	ldr	r3, [pc, #52]	; (800f654 <GUI_Down_Panel+0x84>)
 800f620:	781a      	ldrb	r2, [r3, #0]
 800f622:	3200      	adds	r2, #0
 800f624:	bf18      	it	ne
 800f626:	2201      	movne	r2, #1
 800f628:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f62c:	20a3      	movs	r0, #163	; 0xa3
 800f62e:	f002 fe86 	bl	801233e <GUI_Button_Down_Active>
		GUI_Button_Right(217, 426);
 800f632:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f636:	20d9      	movs	r0, #217	; 0xd9
}
 800f638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_Right(217, 426);
 800f63c:	f002 bec9 	b.w	80123d2 <GUI_Button_Right>
		GUI_Button_TFT_Rotate(163, 426);
 800f640:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f644:	20a3      	movs	r0, #163	; 0xa3
 800f646:	f002 ff3c 	bl	80124c2 <GUI_Button_TFT_Rotate>
 800f64a:	e7f2      	b.n	800f632 <GUI_Down_Panel+0x62>
 800f64c:	20095c10 	.word	0x20095c10
 800f650:	200056f1 	.word	0x200056f1
 800f654:	2000571b 	.word	0x2000571b

0800f658 <GUI_Panels>:

void GUI_Panels()
{
 800f658:	b507      	push	{r0, r1, r2, lr}
	if((GUI_screen_state == Measure_Screen && (preGUI_screen_state !=Measure2_Screen 
 800f65a:	4b1c      	ldr	r3, [pc, #112]	; (800f6cc <GUI_Panels+0x74>)
 800f65c:	781a      	ldrb	r2, [r3, #0]
 800f65e:	2a01      	cmp	r2, #1
 800f660:	d121      	bne.n	800f6a6 <GUI_Panels+0x4e>
 800f662:	4b1b      	ldr	r3, [pc, #108]	; (800f6d0 <GUI_Panels+0x78>)
 800f664:	7819      	ldrb	r1, [r3, #0]
 800f666:	2902      	cmp	r1, #2
 800f668:	d125      	bne.n	800f6b6 <GUI_Panels+0x5e>
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b03      	cmp	r3, #3
 800f66e:	d122      	bne.n	800f6b6 <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
			|| (preGUI_screen_state >= DataSet1_Screen && GUI_screen_state < DataSet1_Screen)
 800f670:	4b17      	ldr	r3, [pc, #92]	; (800f6d0 <GUI_Panels+0x78>)
 800f672:	7819      	ldrb	r1, [r3, #0]
 800f674:	2906      	cmp	r1, #6
 800f676:	d901      	bls.n	800f67c <GUI_Panels+0x24>
 800f678:	2a06      	cmp	r2, #6
 800f67a:	d91c      	bls.n	800f6b6 <GUI_Panels+0x5e>
			|| (preGUI_screen_state == Information_Screen) || ((GUI_screen_state == Color_Rendition_Screen) && preGUI_screen_state < Color_Rendition_Screen))
 800f67c:	7819      	ldrb	r1, [r3, #0]
 800f67e:	2911      	cmp	r1, #17
 800f680:	d019      	beq.n	800f6b6 <GUI_Panels+0x5e>
 800f682:	2a06      	cmp	r2, #6
 800f684:	d102      	bne.n	800f68c <GUI_Panels+0x34>
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	2b05      	cmp	r3, #5
 800f68a:	d914      	bls.n	800f6b6 <GUI_Panels+0x5e>
		GUI_Up_Panel();
		GUI_Down_Panel();
	} 
	else 
	{
		TFT_FillRectangle(0, 40, 271, 425, TFT_Black_Bkgr);
 800f68c:	2363      	movs	r3, #99	; 0x63
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	f240 120f 	movw	r2, #271	; 0x10f
 800f694:	f240 13a9 	movw	r3, #425	; 0x1a9
 800f698:	2128      	movs	r1, #40	; 0x28
 800f69a:	2000      	movs	r0, #0
 800f69c:	f00c fcaf 	bl	801bffe <TFT_FillRectangle>
	}
}
 800f6a0:	b003      	add	sp, #12
 800f6a2:	f85d fb04 	ldr.w	pc, [sp], #4
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f6a6:	2a04      	cmp	r2, #4
 800f6a8:	d005      	beq.n	800f6b6 <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
 800f6aa:	2a06      	cmp	r2, #6
 800f6ac:	d9e0      	bls.n	800f670 <GUI_Panels+0x18>
 800f6ae:	4b08      	ldr	r3, [pc, #32]	; (800f6d0 <GUI_Panels+0x78>)
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b06      	cmp	r3, #6
 800f6b4:	d8dc      	bhi.n	800f670 <GUI_Panels+0x18>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f6b6:	2063      	movs	r0, #99	; 0x63
 800f6b8:	f00c faa2 	bl	801bc00 <TFT_FillScreen_DMA>
		GUI_Up_Panel();
 800f6bc:	f7ff ff64 	bl	800f588 <GUI_Up_Panel>
}
 800f6c0:	b003      	add	sp, #12
 800f6c2:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Down_Panel();
 800f6c6:	f7ff bf83 	b.w	800f5d0 <GUI_Down_Panel>
 800f6ca:	bf00      	nop
 800f6cc:	200056f1 	.word	0x200056f1
 800f6d0:	2000022a 	.word	0x2000022a

0800f6d4 <GUI_DataSet1_Screen>:
{
 800f6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800f6d6:	4b28      	ldr	r3, [pc, #160]	; (800f778 <GUI_DataSet1_Screen+0xa4>)
 800f6d8:	4c28      	ldr	r4, [pc, #160]	; (800f77c <GUI_DataSet1_Screen+0xa8>)
 800f6da:	4d29      	ldr	r5, [pc, #164]	; (800f780 <GUI_DataSet1_Screen+0xac>)
 800f6dc:	2202      	movs	r2, #2
 800f6de:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Mode_EL_Old != Mode_EL || Language_status_prev != Language_status){
 800f6e0:	4b28      	ldr	r3, [pc, #160]	; (800f784 <GUI_DataSet1_Screen+0xb0>)
 800f6e2:	4a29      	ldr	r2, [pc, #164]	; (800f788 <GUI_DataSet1_Screen+0xb4>)
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	7812      	ldrb	r2, [r2, #0]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	4a28      	ldr	r2, [pc, #160]	; (800f78c <GUI_DataSet1_Screen+0xb8>)
 800f6ec:	4b28      	ldr	r3, [pc, #160]	; (800f790 <GUI_DataSet1_Screen+0xbc>)
 800f6ee:	d107      	bne.n	800f700 <GUI_DataSet1_Screen+0x2c>
 800f6f0:	7810      	ldrb	r0, [r2, #0]
 800f6f2:	7821      	ldrb	r1, [r4, #0]
 800f6f4:	4288      	cmp	r0, r1
 800f6f6:	d103      	bne.n	800f700 <GUI_DataSet1_Screen+0x2c>
 800f6f8:	7818      	ldrb	r0, [r3, #0]
 800f6fa:	7829      	ldrb	r1, [r5, #0]
 800f6fc:	4288      	cmp	r0, r1
 800f6fe:	d027      	beq.n	800f750 <GUI_DataSet1_Screen+0x7c>
		Mode_EL_Old = Mode_EL;
 800f700:	7821      	ldrb	r1, [r4, #0]
 800f702:	7011      	strb	r1, [r2, #0]
		Language_status_prev = Language_status;
 800f704:	782a      	ldrb	r2, [r5, #0]
 800f706:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800f708:	f7ff ffa6 	bl	800f658 <GUI_Panels>
		Prev_Inf_Screen2 = DataSet1_Screen;
 800f70c:	4b21      	ldr	r3, [pc, #132]	; (800f794 <GUI_DataSet1_Screen+0xc0>)
 800f70e:	2207      	movs	r2, #7
 800f710:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800f712:	782b      	ldrb	r3, [r5, #0]
 800f714:	bb0b      	cbnz	r3, 800f75a <GUI_DataSet1_Screen+0x86>
			GUI_OptionMenuRu();
 800f716:	f7ff fb7b 	bl	800ee10 <GUI_OptionMenuRu>
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f71a:	7823      	ldrb	r3, [r4, #0]
 800f71c:	f240 1151 	movw	r1, #337	; 0x151
 800f720:	200a      	movs	r0, #10
 800f722:	b1bb      	cbz	r3, 800f754 <GUI_DataSet1_Screen+0x80>
 800f724:	f008 fcf4 	bl	8018110 <GUI_TextRu_Illuminance>
		GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 800f728:	4b1b      	ldr	r3, [pc, #108]	; (800f798 <GUI_DataSet1_Screen+0xc4>)
 800f72a:	881a      	ldrh	r2, [r3, #0]
 800f72c:	f240 1147 	movw	r1, #327	; 0x147
 800f730:	f002 0201 	and.w	r2, r2, #1
 800f734:	20c8      	movs	r0, #200	; 0xc8
 800f736:	f003 faa1 	bl	8012c7c <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f73a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	f240 1379 	movw	r3, #377	; 0x179
 800f744:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f748:	4619      	mov	r1, r3
 800f74a:	200a      	movs	r0, #10
 800f74c:	f00c fbfa 	bl	801bf44 <TFT_DrawLine>
}
 800f750:	b003      	add	sp, #12
 800f752:	bd30      	pop	{r4, r5, pc}
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f754:	f009 faa2 	bl	8018c9c <GUI_TextRu_Luminance>
 800f758:	e7e6      	b.n	800f728 <GUI_DataSet1_Screen+0x54>
		else if (Language_status == En) {
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d1e4      	bne.n	800f728 <GUI_DataSet1_Screen+0x54>
			GUI_OptionMenuEn();
 800f75e:	f7ff fbc7 	bl	800eef0 <GUI_OptionMenuEn>
			Mode_EL ? GUI_TextEn_Illuminance(10, 339):GUI_TextEn_Luminance(10, 339);
 800f762:	7823      	ldrb	r3, [r4, #0]
 800f764:	f240 1153 	movw	r1, #339	; 0x153
 800f768:	200a      	movs	r0, #10
 800f76a:	b113      	cbz	r3, 800f772 <GUI_DataSet1_Screen+0x9e>
 800f76c:	f007 fdf6 	bl	801735c <GUI_TextEn_Illuminance>
 800f770:	e7da      	b.n	800f728 <GUI_DataSet1_Screen+0x54>
 800f772:	f007 fd9d 	bl	80172b0 <GUI_TextEn_Luminance>
 800f776:	e7d7      	b.n	800f728 <GUI_DataSet1_Screen+0x54>
 800f778:	20000230 	.word	0x20000230
 800f77c:	20000ebc 	.word	0x20000ebc
 800f780:	200056f3 	.word	0x200056f3
 800f784:	2000022a 	.word	0x2000022a
 800f788:	200056f1 	.word	0x200056f1
 800f78c:	20090a6b 	.word	0x20090a6b
 800f790:	20090a64 	.word	0x20090a64
 800f794:	20091008 	.word	0x20091008
 800f798:	200056f6 	.word	0x200056f6

0800f79c <GUI_DataSet2_Screen>:
{
 800f79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f79e:	4b66      	ldr	r3, [pc, #408]	; (800f938 <GUI_DataSet2_Screen+0x19c>)
 800f7a0:	4a66      	ldr	r2, [pc, #408]	; (800f93c <GUI_DataSet2_Screen+0x1a0>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	7812      	ldrb	r2, [r2, #0]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	f000 80c3 	beq.w	800f932 <GUI_DataSet2_Screen+0x196>
			GUI_Panels();
 800f7ac:	f7ff ff54 	bl	800f658 <GUI_Panels>
			if(Language_status == Ru){
 800f7b0:	4b63      	ldr	r3, [pc, #396]	; (800f940 <GUI_DataSet2_Screen+0x1a4>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d172      	bne.n	800f89e <GUI_DataSet2_Screen+0x102>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800f7b8:	4b62      	ldr	r3, [pc, #392]	; (800f944 <GUI_DataSet2_Screen+0x1a8>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	2152      	movs	r1, #82	; 0x52
 800f7be:	2012      	movs	r0, #18
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d069      	beq.n	800f898 <GUI_DataSet2_Screen+0xfc>
 800f7c4:	f009 fa00 	bl	8018bc8 <GUI_TextRu_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800f7c8:	4c5f      	ldr	r4, [pc, #380]	; (800f948 <GUI_DataSet2_Screen+0x1ac>)
 800f7ca:	8822      	ldrh	r2, [r4, #0]
 800f7cc:	2146      	movs	r1, #70	; 0x46
 800f7ce:	f002 0202 	and.w	r2, r2, #2
 800f7d2:	20c8      	movs	r0, #200	; 0xc8
 800f7d4:	f003 fa52 	bl	8012c7c <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f7d8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f7dc:	2378      	movs	r3, #120	; 0x78
 800f7de:	4619      	mov	r1, r3
 800f7e0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f7e4:	200a      	movs	r0, #10
 800f7e6:	9500      	str	r5, [sp, #0]
 800f7e8:	f00c fbac 	bl	801bf44 <TFT_DrawLine>
				GUI_TextRu_PPF(10, 145);
 800f7ec:	2191      	movs	r1, #145	; 0x91
 800f7ee:	200a      	movs	r0, #10
 800f7f0:	f008 fcf8 	bl	80181e4 <GUI_TextRu_PPF>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800f7f4:	8822      	ldrh	r2, [r4, #0]
 800f7f6:	2185      	movs	r1, #133	; 0x85
 800f7f8:	f002 0204 	and.w	r2, r2, #4
 800f7fc:	20c8      	movs	r0, #200	; 0xc8
 800f7fe:	f003 fa3d 	bl	8012c7c <GUI_CheckBox>
				GUI_TextRu_PPF_RGB(10, 209);
 800f802:	21d1      	movs	r1, #209	; 0xd1
 800f804:	200a      	movs	r0, #10
 800f806:	f008 fd11 	bl	801822c <GUI_TextRu_PPF_RGB>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800f80a:	8822      	ldrh	r2, [r4, #0]
 800f80c:	21c6      	movs	r1, #198	; 0xc6
 800f80e:	f002 0208 	and.w	r2, r2, #8
 800f812:	20c8      	movs	r0, #200	; 0xc8
 800f814:	f003 fa32 	bl	8012c7c <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f818:	23f8      	movs	r3, #248	; 0xf8
 800f81a:	4619      	mov	r1, r3
 800f81c:	200a      	movs	r0, #10
 800f81e:	9500      	str	r5, [sp, #0]
 800f820:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f824:	f00c fb8e 	bl	801bf44 <TFT_DrawLine>
				GUI_TextRu_CCT(20, 275);
 800f828:	f240 1113 	movw	r1, #275	; 0x113
 800f82c:	2014      	movs	r0, #20
 800f82e:	f008 ff79 	bl	8018724 <GUI_TextRu_CCT>
				GUI_CheckBox(200, 263, Measure_Field&CCT);
 800f832:	8822      	ldrh	r2, [r4, #0]
 800f834:	f240 1107 	movw	r1, #263	; 0x107
 800f838:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f83c:	20c8      	movs	r0, #200	; 0xc8
 800f83e:	f003 fa1d 	bl	8012c7c <GUI_CheckBox>
				TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f842:	f240 1339 	movw	r3, #313	; 0x139
 800f846:	4619      	mov	r1, r3
 800f848:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f84c:	9500      	str	r5, [sp, #0]
 800f84e:	200a      	movs	r0, #10
 800f850:	f00c fb78 	bl	801bf44 <TFT_DrawLine>
				GUI_Text_deltaE(20, 337);
 800f854:	f240 1151 	movw	r1, #337	; 0x151
 800f858:	2014      	movs	r0, #20
 800f85a:	f007 f831 	bl	80168c0 <GUI_Text_deltaE>
				GUI_CheckBox(200, 327, Measure_Field&delta_E);
 800f85e:	8822      	ldrh	r2, [r4, #0]
 800f860:	f240 1147 	movw	r1, #327	; 0x147
 800f864:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f868:	20c8      	movs	r0, #200	; 0xc8
 800f86a:	f003 fa07 	bl	8012c7c <GUI_CheckBox>
				TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f86e:	f240 1379 	movw	r3, #377	; 0x179
 800f872:	4619      	mov	r1, r3
 800f874:	9500      	str	r5, [sp, #0]
 800f876:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f87a:	200a      	movs	r0, #10
 800f87c:	f00c fb62 	bl	801bf44 <TFT_DrawLine>
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800f880:	8822      	ldrh	r2, [r4, #0]
 800f882:	2300      	movs	r3, #0
 800f884:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f888:	f240 1147 	movw	r1, #327	; 0x147
 800f88c:	2082      	movs	r0, #130	; 0x82
}
 800f88e:	b003      	add	sp, #12
 800f890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800f894:	f003 b8d2 	b.w	8012a3c <GUI_Button_Measure_deltaE_Small>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800f898:	f009 fa48 	bl	8018d2c <GUI_TextRu_Radiance>
 800f89c:	e794      	b.n	800f7c8 <GUI_DataSet2_Screen+0x2c>
			else if(Language_status == En){
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d147      	bne.n	800f932 <GUI_DataSet2_Screen+0x196>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800f8a2:	4d28      	ldr	r5, [pc, #160]	; (800f944 <GUI_DataSet2_Screen+0x1a8>)
 800f8a4:	782a      	ldrb	r2, [r5, #0]
 800f8a6:	2154      	movs	r1, #84	; 0x54
 800f8a8:	2012      	movs	r0, #18
 800f8aa:	2a00      	cmp	r2, #0
 800f8ac:	d03b      	beq.n	800f926 <GUI_DataSet2_Screen+0x18a>
 800f8ae:	f007 faeb 	bl	8016e88 <GUI_TextEn_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800f8b2:	4c25      	ldr	r4, [pc, #148]	; (800f948 <GUI_DataSet2_Screen+0x1ac>)
 800f8b4:	8822      	ldrh	r2, [r4, #0]
 800f8b6:	2146      	movs	r1, #70	; 0x46
 800f8b8:	f002 0202 	and.w	r2, r2, #2
 800f8bc:	20c8      	movs	r0, #200	; 0xc8
 800f8be:	f003 f9dd 	bl	8012c7c <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f8c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	2378      	movs	r3, #120	; 0x78
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	200a      	movs	r0, #10
 800f8ce:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f8d2:	f00c fb37 	bl	801bf44 <TFT_DrawLine>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800f8d6:	782b      	ldrb	r3, [r5, #0]
 800f8d8:	2193      	movs	r1, #147	; 0x93
 800f8da:	200a      	movs	r0, #10
 800f8dc:	b333      	cbz	r3, 800f92c <GUI_DataSet2_Screen+0x190>
 800f8de:	f007 fdd3 	bl	8017488 <GUI_TextEn_PPFD>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800f8e2:	8822      	ldrh	r2, [r4, #0]
 800f8e4:	2185      	movs	r1, #133	; 0x85
 800f8e6:	f002 0204 	and.w	r2, r2, #4
 800f8ea:	20c8      	movs	r0, #200	; 0xc8
 800f8ec:	f003 f9c6 	bl	8012c7c <GUI_CheckBox>
				GUI_TextEn_B_G_R_FR(10, 211);
 800f8f0:	21d3      	movs	r1, #211	; 0xd3
 800f8f2:	200a      	movs	r0, #10
 800f8f4:	f007 fe82 	bl	80175fc <GUI_TextEn_B_G_R_FR>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800f8f8:	8822      	ldrh	r2, [r4, #0]
 800f8fa:	21c6      	movs	r1, #198	; 0xc6
 800f8fc:	f002 0208 	and.w	r2, r2, #8
 800f900:	20c8      	movs	r0, #200	; 0xc8
 800f902:	f003 f9bb 	bl	8012c7c <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f906:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f90a:	23f8      	movs	r3, #248	; 0xf8
 800f90c:	4619      	mov	r1, r3
 800f90e:	9500      	str	r5, [sp, #0]
 800f910:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f914:	200a      	movs	r0, #10
 800f916:	f00c fb15 	bl	801bf44 <TFT_DrawLine>
				GUI_TextEn_CCT(20, 277);
 800f91a:	f240 1115 	movw	r1, #277	; 0x115
 800f91e:	2014      	movs	r0, #20
 800f920:	f007 feb4 	bl	801768c <GUI_TextEn_CCT>
 800f924:	e785      	b.n	800f832 <GUI_DataSet2_Screen+0x96>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800f926:	f007 fa61 	bl	8016dec <GUI_TextEn_Radiance>
 800f92a:	e7c2      	b.n	800f8b2 <GUI_DataSet2_Screen+0x116>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800f92c:	f007 fdd8 	bl	80174e0 <GUI_TextEn_PPL>
 800f930:	e7d7      	b.n	800f8e2 <GUI_DataSet2_Screen+0x146>
}
 800f932:	b003      	add	sp, #12
 800f934:	bd30      	pop	{r4, r5, pc}
 800f936:	bf00      	nop
 800f938:	2000022a 	.word	0x2000022a
 800f93c:	200056f1 	.word	0x200056f1
 800f940:	200056f3 	.word	0x200056f3
 800f944:	20000ebc 	.word	0x20000ebc
 800f948:	200056f6 	.word	0x200056f6

0800f94c <GUI_DataSet3_Screen>:
{
 800f94c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f94e:	4b35      	ldr	r3, [pc, #212]	; (800fa24 <GUI_DataSet3_Screen+0xd8>)
 800f950:	4a35      	ldr	r2, [pc, #212]	; (800fa28 <GUI_DataSet3_Screen+0xdc>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	7812      	ldrb	r2, [r2, #0]
 800f956:	429a      	cmp	r2, r3
 800f958:	d061      	beq.n	800fa1e <GUI_DataSet3_Screen+0xd2>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800f95a:	4c34      	ldr	r4, [pc, #208]	; (800fa2c <GUI_DataSet3_Screen+0xe0>)
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800f95c:	4e34      	ldr	r6, [pc, #208]	; (800fa30 <GUI_DataSet3_Screen+0xe4>)
		GUI_Panels();
 800f95e:	f7ff fe7b 	bl	800f658 <GUI_Panels>
		GUI_Text_CIE_XYZ(20, 82);
 800f962:	2152      	movs	r1, #82	; 0x52
 800f964:	2014      	movs	r0, #20
 800f966:	f006 fbdf 	bl	8016128 <GUI_Text_CIE_XYZ>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800f96a:	8822      	ldrh	r2, [r4, #0]
 800f96c:	2146      	movs	r1, #70	; 0x46
 800f96e:	f002 0210 	and.w	r2, r2, #16
 800f972:	20c8      	movs	r0, #200	; 0xc8
 800f974:	f003 f982 	bl	8012c7c <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f978:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f97c:	2378      	movs	r3, #120	; 0x78
 800f97e:	4619      	mov	r1, r3
 800f980:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f984:	200a      	movs	r0, #10
 800f986:	9500      	str	r5, [sp, #0]
 800f988:	f00c fadc 	bl	801bf44 <TFT_DrawLine>
		GUI_Text_CIE_xy(20, 145);
 800f98c:	2191      	movs	r1, #145	; 0x91
 800f98e:	2014      	movs	r0, #20
 800f990:	f006 fe76 	bl	8016680 <GUI_Text_CIE_xy>
		GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 800f994:	8822      	ldrh	r2, [r4, #0]
 800f996:	2185      	movs	r1, #133	; 0x85
 800f998:	f002 0220 	and.w	r2, r2, #32
 800f99c:	20c8      	movs	r0, #200	; 0xc8
 800f99e:	f003 f96d 	bl	8012c7c <GUI_CheckBox>
		GUI_Text_CIE_xy_1931(35, 209);
 800f9a2:	21d1      	movs	r1, #209	; 0xd1
 800f9a4:	2023      	movs	r0, #35	; 0x23
 800f9a6:	f006 fbf9 	bl	801619c <GUI_Text_CIE_xy_1931>
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800f9aa:	8823      	ldrh	r3, [r4, #0]
 800f9ac:	7832      	ldrb	r2, [r6, #0]
 800f9ae:	f003 0320 	and.w	r3, r3, #32
 800f9b2:	f002 0201 	and.w	r2, r2, #1
 800f9b6:	21c6      	movs	r1, #198	; 0xc6
 800f9b8:	20c8      	movs	r0, #200	; 0xc8
 800f9ba:	f003 f9a0 	bl	8012cfe <GUI_RadioBox>
		GUI_Text_CIE_xy_1964(35, 275);
 800f9be:	f240 1113 	movw	r1, #275	; 0x113
 800f9c2:	2023      	movs	r0, #35	; 0x23
 800f9c4:	f006 fc4a 	bl	801625c <GUI_Text_CIE_xy_1964>
		GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 800f9c8:	7832      	ldrb	r2, [r6, #0]
 800f9ca:	8823      	ldrh	r3, [r4, #0]
 800f9cc:	43d2      	mvns	r2, r2
 800f9ce:	f003 0320 	and.w	r3, r3, #32
 800f9d2:	f002 0201 	and.w	r2, r2, #1
 800f9d6:	f240 1107 	movw	r1, #263	; 0x107
 800f9da:	20c8      	movs	r0, #200	; 0xc8
 800f9dc:	f003 f98f 	bl	8012cfe <GUI_RadioBox>
		TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f9e0:	f240 1339 	movw	r3, #313	; 0x139
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f9ea:	200a      	movs	r0, #10
 800f9ec:	9500      	str	r5, [sp, #0]
 800f9ee:	f00c faa9 	bl	801bf44 <TFT_DrawLine>
		GUI_Text_CIE_Luv(20, 337);
 800f9f2:	f240 1151 	movw	r1, #337	; 0x151
 800f9f6:	2014      	movs	r0, #20
 800f9f8:	f006 fc90 	bl	801631c <GUI_Text_CIE_Luv>
		GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 800f9fc:	8822      	ldrh	r2, [r4, #0]
 800f9fe:	f240 1147 	movw	r1, #327	; 0x147
 800fa02:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800fa06:	20c8      	movs	r0, #200	; 0xc8
 800fa08:	f003 f938 	bl	8012c7c <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fa0c:	f240 1379 	movw	r3, #377	; 0x179
 800fa10:	9500      	str	r5, [sp, #0]
 800fa12:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fa16:	4619      	mov	r1, r3
 800fa18:	200a      	movs	r0, #10
 800fa1a:	f00c fa93 	bl	801bf44 <TFT_DrawLine>
}
 800fa1e:	b002      	add	sp, #8
 800fa20:	bd70      	pop	{r4, r5, r6, pc}
 800fa22:	bf00      	nop
 800fa24:	2000022a 	.word	0x2000022a
 800fa28:	200056f1 	.word	0x200056f1
 800fa2c:	200056f6 	.word	0x200056f6
 800fa30:	200056f4 	.word	0x200056f4

0800fa34 <GUI_DataSet4_Screen>:
{
 800fa34:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fa36:	4b4b      	ldr	r3, [pc, #300]	; (800fb64 <GUI_DataSet4_Screen+0x130>)
 800fa38:	4a4b      	ldr	r2, [pc, #300]	; (800fb68 <GUI_DataSet4_Screen+0x134>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	7812      	ldrb	r2, [r2, #0]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	f000 808b 	beq.w	800fb5a <GUI_DataSet4_Screen+0x126>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800fa44:	4c49      	ldr	r4, [pc, #292]	; (800fb6c <GUI_DataSet4_Screen+0x138>)
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800fa46:	4d4a      	ldr	r5, [pc, #296]	; (800fb70 <GUI_DataSet4_Screen+0x13c>)
		GUI_Panels();
 800fa48:	f7ff fe06 	bl	800f658 <GUI_Panels>
		GUI_Text_CIE_Lab(20, 80);
 800fa4c:	2150      	movs	r1, #80	; 0x50
 800fa4e:	2014      	movs	r0, #20
 800fa50:	f006 fcb2 	bl	80163b8 <GUI_Text_CIE_Lab>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800fa54:	8822      	ldrh	r2, [r4, #0]
 800fa56:	2141      	movs	r1, #65	; 0x41
 800fa58:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800fa5c:	20c8      	movs	r0, #200	; 0xc8
 800fa5e:	f003 f90d 	bl	8012c7c <GUI_CheckBox>
		GUI_Text_A(40, 115);
 800fa62:	2173      	movs	r1, #115	; 0x73
 800fa64:	2028      	movs	r0, #40	; 0x28
 800fa66:	f006 fd4f 	bl	8016508 <GUI_Text_A>
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800fa6a:	8823      	ldrh	r3, [r4, #0]
 800fa6c:	782a      	ldrb	r2, [r5, #0]
 800fa6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa72:	f002 0201 	and.w	r2, r2, #1
 800fa76:	216c      	movs	r1, #108	; 0x6c
 800fa78:	20c8      	movs	r0, #200	; 0xc8
 800fa7a:	f003 f940 	bl	8012cfe <GUI_RadioBox>
		GUI_Text_D65(40, 150);
 800fa7e:	2196      	movs	r1, #150	; 0x96
 800fa80:	2028      	movs	r0, #40	; 0x28
 800fa82:	f006 fd57 	bl	8016534 <GUI_Text_D65>
		GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 800fa86:	8823      	ldrh	r3, [r4, #0]
 800fa88:	782a      	ldrb	r2, [r5, #0]
 800fa8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa8e:	f002 0202 	and.w	r2, r2, #2
 800fa92:	218f      	movs	r1, #143	; 0x8f
 800fa94:	20c8      	movs	r0, #200	; 0xc8
 800fa96:	f003 f932 	bl	8012cfe <GUI_RadioBox>
		GUI_Text_C(40, 185);
 800fa9a:	21b9      	movs	r1, #185	; 0xb9
 800fa9c:	2028      	movs	r0, #40	; 0x28
 800fa9e:	f006 fd6d 	bl	801657c <GUI_Text_C>
		GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 800faa2:	8823      	ldrh	r3, [r4, #0]
 800faa4:	782a      	ldrb	r2, [r5, #0]
 800faa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faaa:	f002 0204 	and.w	r2, r2, #4
 800faae:	21b2      	movs	r1, #178	; 0xb2
 800fab0:	20c8      	movs	r0, #200	; 0xc8
 800fab2:	f003 f924 	bl	8012cfe <GUI_RadioBox>
		GUI_Text_D50(40, 220);
 800fab6:	21dc      	movs	r1, #220	; 0xdc
 800fab8:	2028      	movs	r0, #40	; 0x28
 800faba:	f006 fd75 	bl	80165a8 <GUI_Text_D50>
		GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 800fabe:	8823      	ldrh	r3, [r4, #0]
 800fac0:	782a      	ldrb	r2, [r5, #0]
 800fac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fac6:	f002 0208 	and.w	r2, r2, #8
 800faca:	21d5      	movs	r1, #213	; 0xd5
 800facc:	20c8      	movs	r0, #200	; 0xc8
 800face:	f003 f916 	bl	8012cfe <GUI_RadioBox>
		GUI_Text_D55(40, 255);
 800fad2:	21ff      	movs	r1, #255	; 0xff
 800fad4:	2028      	movs	r0, #40	; 0x28
 800fad6:	f006 fd8b 	bl	80165f0 <GUI_Text_D55>
		GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 800fada:	8823      	ldrh	r3, [r4, #0]
 800fadc:	782a      	ldrb	r2, [r5, #0]
 800fade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fae2:	f002 0210 	and.w	r2, r2, #16
 800fae6:	21f8      	movs	r1, #248	; 0xf8
 800fae8:	20c8      	movs	r0, #200	; 0xc8
 800faea:	f003 f908 	bl	8012cfe <GUI_RadioBox>
		GUI_Text_D75(40, 290);
 800faee:	f44f 7191 	mov.w	r1, #290	; 0x122
 800faf2:	2028      	movs	r0, #40	; 0x28
 800faf4:	f006 fda0 	bl	8016638 <GUI_Text_D75>
		GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 800faf8:	8823      	ldrh	r3, [r4, #0]
 800fafa:	782a      	ldrb	r2, [r5, #0]
 800fafc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb00:	f002 0220 	and.w	r2, r2, #32
 800fb04:	f240 111b 	movw	r1, #283	; 0x11b
 800fb08:	20c8      	movs	r0, #200	; 0xc8
 800fb0a:	f003 f8f8 	bl	8012cfe <GUI_RadioBox>
		TFT_DrawLine(10, 330, 262, 330, TFT_White);
 800fb0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800fb18:	4619      	mov	r1, r3
 800fb1a:	200a      	movs	r0, #10
 800fb1c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb20:	f00c fa10 	bl	801bf44 <TFT_DrawLine>
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800fb24:	4b13      	ldr	r3, [pc, #76]	; (800fb74 <GUI_DataSet4_Screen+0x140>)
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800fb2c:	2014      	movs	r0, #20
 800fb2e:	b1b3      	cbz	r3, 800fb5e <GUI_DataSet4_Screen+0x12a>
 800fb30:	f007 f820 	bl	8016b74 <GUI_Text_EbEr>
		GUI_CheckBox(200, 345, Measure_Field&EbEr);
 800fb34:	8822      	ldrh	r2, [r4, #0]
 800fb36:	f240 1159 	movw	r1, #345	; 0x159
 800fb3a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800fb3e:	20c8      	movs	r0, #200	; 0xc8
 800fb40:	f003 f89c 	bl	8012c7c <GUI_CheckBox>
		TFT_DrawLine(10, 390, 262, 390, TFT_White);
 800fb44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800fb4e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb52:	4619      	mov	r1, r3
 800fb54:	200a      	movs	r0, #10
 800fb56:	f00c f9f5 	bl	801bf44 <TFT_DrawLine>
}
 800fb5a:	b003      	add	sp, #12
 800fb5c:	bd30      	pop	{r4, r5, pc}
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800fb5e:	f007 f843 	bl	8016be8 <GUI_Text_LbLr>
 800fb62:	e7e7      	b.n	800fb34 <GUI_DataSet4_Screen+0x100>
 800fb64:	2000022a 	.word	0x2000022a
 800fb68:	200056f1 	.word	0x200056f1
 800fb6c:	200056f6 	.word	0x200056f6
 800fb70:	20090a69 	.word	0x20090a69
 800fb74:	20000ebc 	.word	0x20000ebc

0800fb78 <GUI_DataSet5_Screen>:
{
 800fb78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fb7a:	4b19      	ldr	r3, [pc, #100]	; (800fbe0 <GUI_DataSet5_Screen+0x68>)
 800fb7c:	4a19      	ldr	r2, [pc, #100]	; (800fbe4 <GUI_DataSet5_Screen+0x6c>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	7812      	ldrb	r2, [r2, #0]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d02a      	beq.n	800fbdc <GUI_DataSet5_Screen+0x64>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800fb86:	4d18      	ldr	r5, [pc, #96]	; (800fbe8 <GUI_DataSet5_Screen+0x70>)
		GUI_Panels();
 800fb88:	f7ff fd66 	bl	800f658 <GUI_Panels>
		GUI_Text_lambda_d(35, 86);
 800fb8c:	2156      	movs	r1, #86	; 0x56
 800fb8e:	2023      	movs	r0, #35	; 0x23
 800fb90:	f006 fe1c 	bl	80167cc <GUI_Text_lambda_d>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800fb94:	882a      	ldrh	r2, [r5, #0]
 800fb96:	2146      	movs	r1, #70	; 0x46
 800fb98:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800fb9c:	20c8      	movs	r0, #200	; 0xc8
 800fb9e:	f003 f86d 	bl	8012c7c <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800fba2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fba6:	2378      	movs	r3, #120	; 0x78
 800fba8:	4619      	mov	r1, r3
 800fbaa:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fbae:	200a      	movs	r0, #10
 800fbb0:	9400      	str	r4, [sp, #0]
 800fbb2:	f00c f9c7 	bl	801bf44 <TFT_DrawLine>
		GUI_Text_SP(35, 145);
 800fbb6:	2191      	movs	r1, #145	; 0x91
 800fbb8:	2023      	movs	r0, #35	; 0x23
 800fbba:	f006 fde3 	bl	8016784 <GUI_Text_SP>
		GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 800fbbe:	882a      	ldrh	r2, [r5, #0]
 800fbc0:	2185      	movs	r1, #133	; 0x85
 800fbc2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fbc6:	20c8      	movs	r0, #200	; 0xc8
 800fbc8:	f003 f858 	bl	8012c7c <GUI_CheckBox>
		TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800fbcc:	23b7      	movs	r3, #183	; 0xb7
 800fbce:	9400      	str	r4, [sp, #0]
 800fbd0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	200a      	movs	r0, #10
 800fbd8:	f00c f9b4 	bl	801bf44 <TFT_DrawLine>
}
 800fbdc:	b003      	add	sp, #12
 800fbde:	bd30      	pop	{r4, r5, pc}
 800fbe0:	2000022a 	.word	0x2000022a
 800fbe4:	200056f1 	.word	0x200056f1
 800fbe8:	200056f6 	.word	0x200056f6

0800fbec <GUI_GraphSet1_Screen>:
{
 800fbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fbee:	4b1d      	ldr	r3, [pc, #116]	; (800fc64 <GUI_GraphSet1_Screen+0x78>)
 800fbf0:	4a1d      	ldr	r2, [pc, #116]	; (800fc68 <GUI_GraphSet1_Screen+0x7c>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	7812      	ldrb	r2, [r2, #0]
 800fbf6:	4c1d      	ldr	r4, [pc, #116]	; (800fc6c <GUI_GraphSet1_Screen+0x80>)
 800fbf8:	4d1d      	ldr	r5, [pc, #116]	; (800fc70 <GUI_GraphSet1_Screen+0x84>)
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d103      	bne.n	800fc06 <GUI_GraphSet1_Screen+0x1a>
 800fbfe:	7822      	ldrb	r2, [r4, #0]
 800fc00:	782b      	ldrb	r3, [r5, #0]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d022      	beq.n	800fc4c <GUI_GraphSet1_Screen+0x60>
		GUI_Panels();
 800fc06:	f7ff fd27 	bl	800f658 <GUI_Panels>
		Language_status_prev = Language_status;
 800fc0a:	782b      	ldrb	r3, [r5, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fc0c:	4a19      	ldr	r2, [pc, #100]	; (800fc74 <GUI_GraphSet1_Screen+0x88>)
		Language_status_prev = Language_status;
 800fc0e:	7023      	strb	r3, [r4, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fc10:	210c      	movs	r1, #12
 800fc12:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800fc14:	b9e3      	cbnz	r3, 800fc50 <GUI_GraphSet1_Screen+0x64>
			GUI_OptionMenuRu();
 800fc16:	f7ff f8fb 	bl	800ee10 <GUI_OptionMenuRu>
			GUI_TextRu_PPF_bands(10, 337);
 800fc1a:	f240 1151 	movw	r1, #337	; 0x151
 800fc1e:	200a      	movs	r0, #10
 800fc20:	f008 fb92 	bl	8018348 <GUI_TextRu_PPF_bands>
			GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 800fc24:	4b14      	ldr	r3, [pc, #80]	; (800fc78 <GUI_GraphSet1_Screen+0x8c>)
 800fc26:	781a      	ldrb	r2, [r3, #0]
 800fc28:	f240 1147 	movw	r1, #327	; 0x147
 800fc2c:	f002 0201 	and.w	r2, r2, #1
 800fc30:	20c8      	movs	r0, #200	; 0xc8
 800fc32:	f003 f823 	bl	8012c7c <GUI_CheckBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fc36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	f240 1379 	movw	r3, #377	; 0x179
 800fc40:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fc44:	4619      	mov	r1, r3
 800fc46:	200a      	movs	r0, #10
 800fc48:	f00c f97c 	bl	801bf44 <TFT_DrawLine>
}
 800fc4c:	b003      	add	sp, #12
 800fc4e:	bd30      	pop	{r4, r5, pc}
		else if(Language_status == En){
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d1e7      	bne.n	800fc24 <GUI_GraphSet1_Screen+0x38>
			GUI_OptionMenuEn();
 800fc54:	f7ff f94c 	bl	800eef0 <GUI_OptionMenuEn>
			GUI_TextEn_PARwavebands(10, 339);
 800fc58:	f240 1153 	movw	r1, #339	; 0x153
 800fc5c:	200a      	movs	r0, #10
 800fc5e:	f007 fc63 	bl	8017528 <GUI_TextEn_PARwavebands>
 800fc62:	e7df      	b.n	800fc24 <GUI_GraphSet1_Screen+0x38>
 800fc64:	2000022a 	.word	0x2000022a
 800fc68:	200056f1 	.word	0x200056f1
 800fc6c:	20090a64 	.word	0x20090a64
 800fc70:	200056f3 	.word	0x200056f3
 800fc74:	20091008 	.word	0x20091008
 800fc78:	200056f2 	.word	0x200056f2

0800fc7c <GUI_GraphSet2_Screen>:
{
 800fc7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fc7e:	4b19      	ldr	r3, [pc, #100]	; (800fce4 <GUI_GraphSet2_Screen+0x68>)
 800fc80:	4a19      	ldr	r2, [pc, #100]	; (800fce8 <GUI_GraphSet2_Screen+0x6c>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	7812      	ldrb	r2, [r2, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d02a      	beq.n	800fce0 <GUI_GraphSet2_Screen+0x64>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800fc8a:	4d18      	ldr	r5, [pc, #96]	; (800fcec <GUI_GraphSet2_Screen+0x70>)
		GUI_Panels();
 800fc8c:	f7ff fce4 	bl	800f658 <GUI_Panels>
		GUI_Text_EbEr(18, 82);
 800fc90:	2152      	movs	r1, #82	; 0x52
 800fc92:	2012      	movs	r0, #18
 800fc94:	f006 ff6e 	bl	8016b74 <GUI_Text_EbEr>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800fc98:	782a      	ldrb	r2, [r5, #0]
 800fc9a:	2146      	movs	r1, #70	; 0x46
 800fc9c:	f002 0202 	and.w	r2, r2, #2
 800fca0:	20c8      	movs	r0, #200	; 0xc8
 800fca2:	f002 ffeb 	bl	8012c7c <GUI_CheckBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800fca6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fcaa:	237a      	movs	r3, #122	; 0x7a
 800fcac:	4619      	mov	r1, r3
 800fcae:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fcb2:	200a      	movs	r0, #10
 800fcb4:	9400      	str	r4, [sp, #0]
 800fcb6:	f00c f945 	bl	801bf44 <TFT_DrawLine>
		GUI_Text_V_lambda(10, 145);
 800fcba:	2191      	movs	r1, #145	; 0x91
 800fcbc:	200a      	movs	r0, #10
 800fcbe:	f006 fda9 	bl	8016814 <GUI_Text_V_lambda>
		GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 800fcc2:	782a      	ldrb	r2, [r5, #0]
 800fcc4:	2185      	movs	r1, #133	; 0x85
 800fcc6:	f002 0204 	and.w	r2, r2, #4
 800fcca:	20c8      	movs	r0, #200	; 0xc8
 800fccc:	f002 ffd6 	bl	8012c7c <GUI_CheckBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800fcd0:	23b9      	movs	r3, #185	; 0xb9
 800fcd2:	9400      	str	r4, [sp, #0]
 800fcd4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fcd8:	4619      	mov	r1, r3
 800fcda:	200a      	movs	r0, #10
 800fcdc:	f00c f932 	bl	801bf44 <TFT_DrawLine>
}
 800fce0:	b003      	add	sp, #12
 800fce2:	bd30      	pop	{r4, r5, pc}
 800fce4:	2000022a 	.word	0x2000022a
 800fce8:	200056f1 	.word	0x200056f1
 800fcec:	200056f2 	.word	0x200056f2

0800fcf0 <GUI_ColorSet1_Screen>:
{
 800fcf0:	b513      	push	{r0, r1, r4, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fcf2:	4b1b      	ldr	r3, [pc, #108]	; (800fd60 <GUI_ColorSet1_Screen+0x70>)
 800fcf4:	4a1b      	ldr	r2, [pc, #108]	; (800fd64 <GUI_ColorSet1_Screen+0x74>)
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	7812      	ldrb	r2, [r2, #0]
 800fcfa:	4c1b      	ldr	r4, [pc, #108]	; (800fd68 <GUI_ColorSet1_Screen+0x78>)
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	4b1b      	ldr	r3, [pc, #108]	; (800fd6c <GUI_ColorSet1_Screen+0x7c>)
 800fd00:	d103      	bne.n	800fd0a <GUI_ColorSet1_Screen+0x1a>
 800fd02:	7819      	ldrb	r1, [r3, #0]
 800fd04:	7822      	ldrb	r2, [r4, #0]
 800fd06:	4291      	cmp	r1, r2
 800fd08:	d023      	beq.n	800fd52 <GUI_ColorSet1_Screen+0x62>
		Language_status_prev = Language_status;
 800fd0a:	7822      	ldrb	r2, [r4, #0]
 800fd0c:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800fd0e:	f7ff fca3 	bl	800f658 <GUI_Panels>
		Prev_Inf_Screen2 = ColorSet1_Screen;
 800fd12:	4b17      	ldr	r3, [pc, #92]	; (800fd70 <GUI_ColorSet1_Screen+0x80>)
 800fd14:	220e      	movs	r2, #14
 800fd16:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800fd18:	7823      	ldrb	r3, [r4, #0]
 800fd1a:	b9e3      	cbnz	r3, 800fd56 <GUI_ColorSet1_Screen+0x66>
			GUI_OptionMenuRu();
 800fd1c:	f7ff f878 	bl	800ee10 <GUI_OptionMenuRu>
			GUI_Text_CIE_xy(10, 337);
 800fd20:	f240 1151 	movw	r1, #337	; 0x151
 800fd24:	200a      	movs	r0, #10
 800fd26:	f006 fcab 	bl	8016680 <GUI_Text_CIE_xy>
			GUI_RadioBox(200, 327, Color_Field&Color_CIE_xy, 0x01);
 800fd2a:	4b12      	ldr	r3, [pc, #72]	; (800fd74 <GUI_ColorSet1_Screen+0x84>)
 800fd2c:	781a      	ldrb	r2, [r3, #0]
 800fd2e:	2301      	movs	r3, #1
 800fd30:	401a      	ands	r2, r3
 800fd32:	f240 1147 	movw	r1, #327	; 0x147
 800fd36:	20c8      	movs	r0, #200	; 0xc8
 800fd38:	f002 ffe1 	bl	8012cfe <GUI_RadioBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fd3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	f240 1379 	movw	r3, #377	; 0x179
 800fd46:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	200a      	movs	r0, #10
 800fd4e:	f00c f8f9 	bl	801bf44 <TFT_DrawLine>
}
 800fd52:	b002      	add	sp, #8
 800fd54:	bd10      	pop	{r4, pc}
		else if(Language_status == En){
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	d1e2      	bne.n	800fd20 <GUI_ColorSet1_Screen+0x30>
			GUI_OptionMenuEn();
 800fd5a:	f7ff f8c9 	bl	800eef0 <GUI_OptionMenuEn>
 800fd5e:	e7df      	b.n	800fd20 <GUI_ColorSet1_Screen+0x30>
 800fd60:	2000022a 	.word	0x2000022a
 800fd64:	200056f1 	.word	0x200056f1
 800fd68:	200056f3 	.word	0x200056f3
 800fd6c:	20090a64 	.word	0x20090a64
 800fd70:	20091008 	.word	0x20091008
 800fd74:	200056ef 	.word	0x200056ef

0800fd78 <GUI_ColorSet2_Screen>:
{
 800fd78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fd7a:	4b1a      	ldr	r3, [pc, #104]	; (800fde4 <GUI_ColorSet2_Screen+0x6c>)
 800fd7c:	4a1a      	ldr	r2, [pc, #104]	; (800fde8 <GUI_ColorSet2_Screen+0x70>)
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	7812      	ldrb	r2, [r2, #0]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d02c      	beq.n	800fde0 <GUI_ColorSet2_Screen+0x68>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800fd86:	4d19      	ldr	r5, [pc, #100]	; (800fdec <GUI_ColorSet2_Screen+0x74>)
		GUI_Panels();
 800fd88:	f7ff fc66 	bl	800f658 <GUI_Panels>
		GUI_Text_CIE_Luv(20, 82);
 800fd8c:	2152      	movs	r1, #82	; 0x52
 800fd8e:	2014      	movs	r0, #20
 800fd90:	f006 fac4 	bl	801631c <GUI_Text_CIE_Luv>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800fd94:	782a      	ldrb	r2, [r5, #0]
 800fd96:	2301      	movs	r3, #1
 800fd98:	f002 0204 	and.w	r2, r2, #4
 800fd9c:	2146      	movs	r1, #70	; 0x46
 800fd9e:	20c8      	movs	r0, #200	; 0xc8
 800fda0:	f002 ffad 	bl	8012cfe <GUI_RadioBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800fda4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fda8:	237a      	movs	r3, #122	; 0x7a
 800fdaa:	4619      	mov	r1, r3
 800fdac:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fdb0:	200a      	movs	r0, #10
 800fdb2:	9400      	str	r4, [sp, #0]
 800fdb4:	f00c f8c6 	bl	801bf44 <TFT_DrawLine>
		GUI_Text_CIE_Lab(20, 145);
 800fdb8:	2191      	movs	r1, #145	; 0x91
 800fdba:	2014      	movs	r0, #20
 800fdbc:	f006 fafc 	bl	80163b8 <GUI_Text_CIE_Lab>
		GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 800fdc0:	782a      	ldrb	r2, [r5, #0]
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	f002 0202 	and.w	r2, r2, #2
 800fdc8:	2185      	movs	r1, #133	; 0x85
 800fdca:	20c8      	movs	r0, #200	; 0xc8
 800fdcc:	f002 ff97 	bl	8012cfe <GUI_RadioBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800fdd0:	23b9      	movs	r3, #185	; 0xb9
 800fdd2:	9400      	str	r4, [sp, #0]
 800fdd4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fdd8:	4619      	mov	r1, r3
 800fdda:	200a      	movs	r0, #10
 800fddc:	f00c f8b2 	bl	801bf44 <TFT_DrawLine>
}
 800fde0:	b003      	add	sp, #12
 800fde2:	bd30      	pop	{r4, r5, pc}
 800fde4:	2000022a 	.word	0x2000022a
 800fde8:	200056f1 	.word	0x200056f1
 800fdec:	200056ef 	.word	0x200056ef

0800fdf0 <GUI_ColorRendSet_Screen>:
{
 800fdf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800fdf2:	4b28      	ldr	r3, [pc, #160]	; (800fe94 <GUI_ColorRendSet_Screen+0xa4>)
 800fdf4:	4d28      	ldr	r5, [pc, #160]	; (800fe98 <GUI_ColorRendSet_Screen+0xa8>)
 800fdf6:	4c29      	ldr	r4, [pc, #164]	; (800fe9c <GUI_ColorRendSet_Screen+0xac>)
 800fdf8:	2202      	movs	r2, #2
 800fdfa:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fdfc:	4b28      	ldr	r3, [pc, #160]	; (800fea0 <GUI_ColorRendSet_Screen+0xb0>)
 800fdfe:	4a29      	ldr	r2, [pc, #164]	; (800fea4 <GUI_ColorRendSet_Screen+0xb4>)
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	7812      	ldrb	r2, [r2, #0]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d103      	bne.n	800fe10 <GUI_ColorRendSet_Screen+0x20>
 800fe08:	782a      	ldrb	r2, [r5, #0]
 800fe0a:	7823      	ldrb	r3, [r4, #0]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d03e      	beq.n	800fe8e <GUI_ColorRendSet_Screen+0x9e>
		GUI_Panels();
 800fe10:	f7ff fc22 	bl	800f658 <GUI_Panels>
		Language_status_prev = Language_status;
 800fe14:	7823      	ldrb	r3, [r4, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800fe16:	4a24      	ldr	r2, [pc, #144]	; (800fea8 <GUI_ColorRendSet_Screen+0xb8>)
		Language_status_prev = Language_status;
 800fe18:	702b      	strb	r3, [r5, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800fe1a:	2110      	movs	r1, #16
 800fe1c:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800fe1e:	b90b      	cbnz	r3, 800fe24 <GUI_ColorRendSet_Screen+0x34>
			GUI_OptionMenuRu();
 800fe20:	f7fe fff6 	bl	800ee10 <GUI_OptionMenuRu>
		if(Language_status == En){
 800fe24:	7823      	ldrb	r3, [r4, #0]
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d101      	bne.n	800fe2e <GUI_ColorRendSet_Screen+0x3e>
			GUI_OptionMenuEn();
 800fe2a:	f7ff f861 	bl	800eef0 <GUI_OptionMenuEn>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800fe2e:	4d1f      	ldr	r5, [pc, #124]	; (800feac <GUI_ColorRendSet_Screen+0xbc>)
			GUI_Text_CRI(30, 325);
 800fe30:	f240 1145 	movw	r1, #325	; 0x145
 800fe34:	201e      	movs	r0, #30
 800fe36:	f006 fc5d 	bl	80166f4 <GUI_Text_CRI>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800fe3a:	782a      	ldrb	r2, [r5, #0]
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	401a      	ands	r2, r3
 800fe40:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800fe44:	20b9      	movs	r0, #185	; 0xb9
 800fe46:	f002 ff5a 	bl	8012cfe <GUI_RadioBox>
			TFT_DrawLine(10, 355, 262, 355, TFT_White);
 800fe4a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fe4e:	f240 1363 	movw	r3, #355	; 0x163
 800fe52:	4619      	mov	r1, r3
 800fe54:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe58:	200a      	movs	r0, #10
 800fe5a:	9400      	str	r4, [sp, #0]
 800fe5c:	f00c f872 	bl	801bf44 <TFT_DrawLine>
			GUI_Text_CQS(30, 369);
 800fe60:	f240 1171 	movw	r1, #369	; 0x171
 800fe64:	201e      	movs	r0, #30
 800fe66:	f006 fc69 	bl	801673c <GUI_Text_CQS>
			GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 800fe6a:	782a      	ldrb	r2, [r5, #0]
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	43d2      	mvns	r2, r2
 800fe70:	401a      	ands	r2, r3
 800fe72:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800fe76:	20b9      	movs	r0, #185	; 0xb9
 800fe78:	f002 ff41 	bl	8012cfe <GUI_RadioBox>
			TFT_DrawLine(10, 401, 262, 401, TFT_White);
 800fe7c:	f240 1391 	movw	r3, #401	; 0x191
 800fe80:	9400      	str	r4, [sp, #0]
 800fe82:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe86:	4619      	mov	r1, r3
 800fe88:	200a      	movs	r0, #10
 800fe8a:	f00c f85b 	bl	801bf44 <TFT_DrawLine>
}
 800fe8e:	b003      	add	sp, #12
 800fe90:	bd30      	pop	{r4, r5, pc}
 800fe92:	bf00      	nop
 800fe94:	20000230 	.word	0x20000230
 800fe98:	20090a64 	.word	0x20090a64
 800fe9c:	200056f3 	.word	0x200056f3
 800fea0:	2000022a 	.word	0x2000022a
 800fea4:	200056f1 	.word	0x200056f1
 800fea8:	20091008 	.word	0x20091008
 800feac:	200056f0 	.word	0x200056f0

0800feb0 <GUI_Graph_Screen>:
void GUI_Graph_Screen(){
 800feb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800feb8:	4b87      	ldr	r3, [pc, #540]	; (80100d8 <GUI_Graph_Screen+0x228>)
 800feba:	4a88      	ldr	r2, [pc, #544]	; (80100dc <GUI_Graph_Screen+0x22c>)
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	7812      	ldrb	r2, [r2, #0]
 800fec0:	4d87      	ldr	r5, [pc, #540]	; (80100e0 <GUI_Graph_Screen+0x230>)
 800fec2:	4c88      	ldr	r4, [pc, #544]	; (80100e4 <GUI_Graph_Screen+0x234>)
 800fec4:	429a      	cmp	r2, r3
void GUI_Graph_Screen(){
 800fec6:	b083      	sub	sp, #12
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800fec8:	d104      	bne.n	800fed4 <GUI_Graph_Screen+0x24>
 800feca:	782a      	ldrb	r2, [r5, #0]
 800fecc:	7823      	ldrb	r3, [r4, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	f000 809d 	beq.w	801000e <GUI_Graph_Screen+0x15e>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fed4:	2063      	movs	r0, #99	; 0x63
 800fed6:	f00b fe93 	bl	801bc00 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 800feda:	4a83      	ldr	r2, [pc, #524]	; (80100e8 <GUI_Graph_Screen+0x238>)
 800fedc:	2300      	movs	r3, #0
 800fede:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 800fee0:	4a82      	ldr	r2, [pc, #520]	; (80100ec <GUI_Graph_Screen+0x23c>)
 800fee2:	7013      	strb	r3, [r2, #0]
		GUI_Panels();		
 800fee4:	f7ff fbb8 	bl	800f658 <GUI_Panels>
		Rotation_Screen_Spectral_Old = Rotation_Screen_Spectral;
 800fee8:	7820      	ldrb	r0, [r4, #0]
 800feea:	7028      	strb	r0, [r5, #0]
		if(Graph_Field&PPF_Bands)
 800feec:	4d80      	ldr	r5, [pc, #512]	; (80100f0 <GUI_Graph_Screen+0x240>)
 800feee:	782b      	ldrb	r3, [r5, #0]
 800fef0:	07d9      	lsls	r1, r3, #31
 800fef2:	d501      	bpl.n	800fef8 <GUI_Graph_Screen+0x48>
			Spectral_PAR_Range(Rotation_Screen_Spectral);
 800fef4:	f00a ff9c 	bl	801ae30 <Spectral_PAR_Range>
		if(Graph_Field&V_lambda)
 800fef8:	782b      	ldrb	r3, [r5, #0]
 800fefa:	075a      	lsls	r2, r3, #29
 800fefc:	d538      	bpl.n	800ff70 <GUI_Graph_Screen+0xc0>
			if(Rotation_Screen_Spectral == 0)
 800fefe:	7820      	ldrb	r0, [r4, #0]
 800ff00:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8010100 <GUI_Graph_Screen+0x250>
 800ff04:	f8df c210 	ldr.w	ip, [pc, #528]	; 8010118 <GUI_Graph_Screen+0x268>
 800ff08:	4e7a      	ldr	r6, [pc, #488]	; (80100f4 <GUI_Graph_Screen+0x244>)
 800ff0a:	4f7b      	ldr	r7, [pc, #492]	; (80100f8 <GUI_Graph_Screen+0x248>)
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	f040 8086 	bne.w	801001e <GUI_Graph_Screen+0x16e>
						buf_pix = (Spectral_day[i])*307;
 800ff12:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80100fc <GUI_Graph_Screen+0x24c>
 800ff16:	4603      	mov	r3, r0
 800ff18:	0119      	lsls	r1, r3, #4
 800ff1a:	eb0c 0201 	add.w	r2, ip, r1
 800ff1e:	edd2 7a00 	vldr	s15, [r2]
 800ff22:	ee67 7a87 	vmul.f32	s15, s15, s14
						buf_pix = (Spectral_night[i])*307;
 800ff26:	4439      	add	r1, r7
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800ff28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff2c:	ee17 2a90 	vmov	r2, s15
						buf_pix = (Spectral_night[i])*307;
 800ff30:	edd1 7a00 	vldr	s15, [r1]
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800ff34:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
						buf_pix = (Spectral_night[i])*307;
 800ff38:	ee67 7a87 	vmul.f32	s15, s15, s14
						graph_spectral_night[jj] = (uint16_t)buf_pix;
 800ff3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff40:	ee17 2a90 	vmov	r2, s15
 800ff44:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800ff48:	3301      	adds	r3, #1
				for(uint16_t i = 0; i < 1024; i+=4)
 800ff4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff4e:	d1e3      	bne.n	800ff18 <GUI_Graph_Screen+0x68>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, Rotation_Screen_Spectral);
 800ff50:	2114      	movs	r1, #20
 800ff52:	9000      	str	r0, [sp, #0]
 800ff54:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ff58:	4608      	mov	r0, r1
 800ff5a:	4a69      	ldr	r2, [pc, #420]	; (8010100 <GUI_Graph_Screen+0x250>)
 800ff5c:	f00b f928 	bl	801b1b0 <Spectral_DrawGraph_Const>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, Rotation_Screen_Spectral);
 800ff60:	7823      	ldrb	r3, [r4, #0]
 800ff62:	9300      	str	r3, [sp, #0]
 800ff64:	2114      	movs	r1, #20
 800ff66:	231f      	movs	r3, #31
 800ff68:	4a62      	ldr	r2, [pc, #392]	; (80100f4 <GUI_Graph_Screen+0x244>)
 800ff6a:	4608      	mov	r0, r1
 800ff6c:	f00b f920 	bl	801b1b0 <Spectral_DrawGraph_Const>
			if(Graph_Field&EbEr_graph)
 800ff70:	782b      	ldrb	r3, [r5, #0]
 800ff72:	079b      	lsls	r3, r3, #30
 800ff74:	d545      	bpl.n	8010002 <GUI_Graph_Screen+0x152>
				if(Rotation_Screen_Spectral == 0)
 800ff76:	7826      	ldrb	r6, [r4, #0]
 800ff78:	f8df 9190 	ldr.w	r9, [pc, #400]	; 801010c <GUI_Graph_Screen+0x25c>
 800ff7c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 801011c <GUI_Graph_Screen+0x26c>
 800ff80:	4f60      	ldr	r7, [pc, #384]	; (8010104 <GUI_Graph_Screen+0x254>)
 800ff82:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8010120 <GUI_Graph_Screen+0x270>
 800ff86:	2e00      	cmp	r6, #0
 800ff88:	d16c      	bne.n	8010064 <GUI_Graph_Screen+0x1b4>
							buf_pix = (Hazard_Blue[i])*307;
 800ff8a:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 80100fc <GUI_Graph_Screen+0x24c>
 800ff8e:	4635      	mov	r5, r6
 800ff90:	012a      	lsls	r2, r5, #4
 800ff92:	eb0a 0302 	add.w	r3, sl, r2
 800ff96:	edd3 7a00 	vldr	s15, [r3]
 800ff9a:	ee67 7a88 	vmul.f32	s15, s15, s16
							buf_pix = (Hazard_Retina[i])/10.*307;
 800ff9e:	4442      	add	r2, r8
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800ffa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							buf_pix = (Hazard_Retina[i])/10.*307;
 800ffa4:	6810      	ldr	r0, [r2, #0]
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800ffa6:	ee17 3a90 	vmov	r3, s15
 800ffaa:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
							buf_pix = (Hazard_Retina[i])/10.*307;
 800ffae:	f7f0 fae3 	bl	8000578 <__aeabi_f2d>
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	4b54      	ldr	r3, [pc, #336]	; (8010108 <GUI_Graph_Screen+0x258>)
 800ffb6:	f7f0 fc5d 	bl	8000874 <__aeabi_ddiv>
 800ffba:	a343      	add	r3, pc, #268	; (adr r3, 80100c8 <GUI_Graph_Screen+0x218>)
 800ffbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc0:	f7f0 fb2e 	bl	8000620 <__aeabi_dmul>
 800ffc4:	f7f0 fe24 	bl	8000c10 <__aeabi_d2f>
							graph_spectral_Retina[jj] = (uint16_t)buf_pix;
 800ffc8:	ee07 0a90 	vmov	s15, r0
 800ffcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffd0:	ee17 0a90 	vmov	r0, s15
 800ffd4:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800ffd8:	3501      	adds	r5, #1
					for(uint16_t i = 0; i < 1024; i+=4)
 800ffda:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ffde:	d1d7      	bne.n	800ff90 <GUI_Graph_Screen+0xe0>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, Rotation_Screen_Spectral);
 800ffe0:	2114      	movs	r1, #20
 800ffe2:	4608      	mov	r0, r1
 800ffe4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800ffe8:	4a48      	ldr	r2, [pc, #288]	; (801010c <GUI_Graph_Screen+0x25c>)
 800ffea:	9600      	str	r6, [sp, #0]
 800ffec:	f00b f8e0 	bl	801b1b0 <Spectral_DrawGraph_Const>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, Rotation_Screen_Spectral);
 800fff0:	7823      	ldrb	r3, [r4, #0]
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	2114      	movs	r1, #20
 800fff6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800fffa:	4a42      	ldr	r2, [pc, #264]	; (8010104 <GUI_Graph_Screen+0x254>)
 800fffc:	4608      	mov	r0, r1
 800fffe:	f00b f8d7 	bl	801b1b0 <Spectral_DrawGraph_Const>
		Spectral_Axes(Rotation_Screen_Spectral);
 8010002:	7820      	ldrb	r0, [r4, #0]
 8010004:	f00a fe46 	bl	801ac94 <Spectral_Axes>
		Spectral_Axes_Text(Rotation_Screen_Spectral);
 8010008:	7820      	ldrb	r0, [r4, #0]
 801000a:	f00a fff3 	bl	801aff4 <Spectral_Axes_Text>
	Prev_Inf_Screen = Graph_Screen;	
 801000e:	4b40      	ldr	r3, [pc, #256]	; (8010110 <GUI_Graph_Screen+0x260>)
 8010010:	2204      	movs	r2, #4
 8010012:	701a      	strb	r2, [r3, #0]
}
 8010014:	b003      	add	sp, #12
 8010016:	ecbd 8b02 	vpop	{d8}
 801001a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								buf_pix = (Spectral_day[i])*209;
 801001e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8010114 <GUI_Graph_Screen+0x264>
 8010022:	2300      	movs	r3, #0
 8010024:	f04f 080c 	mov.w	r8, #12
 8010028:	fb08 f103 	mul.w	r1, r8, r3
 801002c:	eb0c 0201 	add.w	r2, ip, r1
 8010030:	edd2 7a00 	vldr	s15, [r2]
 8010034:	ee67 7a87 	vmul.f32	s15, s15, s14
								buf_pix = (Spectral_night[i])*209;
 8010038:	4439      	add	r1, r7
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 801003a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801003e:	ee17 2a90 	vmov	r2, s15
								buf_pix = (Spectral_night[i])*209;
 8010042:	edd1 7a00 	vldr	s15, [r1]
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 8010046:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
								buf_pix = (Spectral_night[i])*209;
 801004a:	ee67 7a87 	vmul.f32	s15, s15, s14
								graph_spectral_night[ii] = (uint16_t)buf_pix;
 801004e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010052:	ee17 2a90 	vmov	r2, s15
 8010056:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801005a:	3301      	adds	r3, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 801005c:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8010060:	d1e2      	bne.n	8010028 <GUI_Graph_Screen+0x178>
 8010062:	e775      	b.n	800ff50 <GUI_Graph_Screen+0xa0>
								buf_pix = (Hazard_Blue[i])*209;
 8010064:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8010114 <GUI_Graph_Screen+0x264>
 8010068:	2500      	movs	r5, #0
 801006a:	f04f 0b0c 	mov.w	fp, #12
 801006e:	fb0b f205 	mul.w	r2, fp, r5
 8010072:	eb0a 0302 	add.w	r3, sl, r2
 8010076:	edd3 7a00 	vldr	s15, [r3]
 801007a:	ee67 7a88 	vmul.f32	s15, s15, s16
								buf_pix = (Hazard_Retina[i])/10.*209;
 801007e:	4442      	add	r2, r8
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 8010080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
								buf_pix = (Hazard_Retina[i])/10.*209;
 8010084:	6810      	ldr	r0, [r2, #0]
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 8010086:	ee17 3a90 	vmov	r3, s15
 801008a:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
								buf_pix = (Hazard_Retina[i])/10.*209;
 801008e:	f7f0 fa73 	bl	8000578 <__aeabi_f2d>
 8010092:	2200      	movs	r2, #0
 8010094:	4b1c      	ldr	r3, [pc, #112]	; (8010108 <GUI_Graph_Screen+0x258>)
 8010096:	f7f0 fbed 	bl	8000874 <__aeabi_ddiv>
 801009a:	a30d      	add	r3, pc, #52	; (adr r3, 80100d0 <GUI_Graph_Screen+0x220>)
 801009c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a0:	f7f0 fabe 	bl	8000620 <__aeabi_dmul>
 80100a4:	f7f0 fdb4 	bl	8000c10 <__aeabi_d2f>
								graph_spectral_Retina[ii] = (uint16_t)buf_pix;
 80100a8:	ee07 0a90 	vmov	s15, r0
 80100ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100b0:	ee17 0a90 	vmov	r0, s15
 80100b4:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 80100b8:	3501      	adds	r5, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 80100ba:	f5b5 7fab 	cmp.w	r5, #342	; 0x156
 80100be:	d1d6      	bne.n	801006e <GUI_Graph_Screen+0x1be>
 80100c0:	e78e      	b.n	800ffe0 <GUI_Graph_Screen+0x130>
 80100c2:	bf00      	nop
 80100c4:	f3af 8000 	nop.w
 80100c8:	00000000 	.word	0x00000000
 80100cc:	40733000 	.word	0x40733000
 80100d0:	00000000 	.word	0x00000000
 80100d4:	406a2000 	.word	0x406a2000
 80100d8:	2000022a 	.word	0x2000022a
 80100dc:	200056f1 	.word	0x200056f1
 80100e0:	20091009 	.word	0x20091009
 80100e4:	200056fa 	.word	0x200056fa
 80100e8:	20005717 	.word	0x20005717
 80100ec:	20005716 	.word	0x20005716
 80100f0:	200056f2 	.word	0x200056f2
 80100f4:	200912d0 	.word	0x200912d0
 80100f8:	20053930 	.word	0x20053930
 80100fc:	43998000 	.word	0x43998000
 8010100:	20090d32 	.word	0x20090d32
 8010104:	20090a6c 	.word	0x20090a6c
 8010108:	40240000 	.word	0x40240000
 801010c:	2009100a 	.word	0x2009100a
 8010110:	20090a65 	.word	0x20090a65
 8010114:	43510000 	.word	0x43510000
 8010118:	20052930 	.word	0x20052930
 801011c:	20009d28 	.word	0x20009d28
 8010120:	2000ad28 	.word	0x2000ad28

08010124 <GUI_SignalLevel>:
}



void GUI_SignalLevel()
{
 8010124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(oldHighSignal != highSignal)
 8010126:	4f2a      	ldr	r7, [pc, #168]	; (80101d0 <GUI_SignalLevel+0xac>)
 8010128:	4e2a      	ldr	r6, [pc, #168]	; (80101d4 <GUI_SignalLevel+0xb0>)
 801012a:	783b      	ldrb	r3, [r7, #0]
 801012c:	7832      	ldrb	r2, [r6, #0]
 801012e:	429a      	cmp	r2, r3
 8010130:	d00a      	beq.n	8010148 <GUI_SignalLevel+0x24>
  {
    if(highSignal)
 8010132:	b363      	cbz	r3, 801018e <GUI_SignalLevel+0x6a>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 8010134:	4b28      	ldr	r3, [pc, #160]	; (80101d8 <GUI_SignalLevel+0xb4>)
 8010136:	781a      	ldrb	r2, [r3, #0]
 8010138:	4b28      	ldr	r3, [pc, #160]	; (80101dc <GUI_SignalLevel+0xb8>)
 801013a:	211e      	movs	r1, #30
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	b9f2      	cbnz	r2, 801017e <GUI_SignalLevel+0x5a>
 8010140:	b1cb      	cbz	r3, 8010176 <GUI_SignalLevel+0x52>
 8010142:	200f      	movs	r0, #15
 8010144:	f008 ff5e 	bl	8019004 <GUI_TextMsgRu_HighIrradiance>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
  
  if(oldLowSignal != lowSignal)
 8010148:	4d25      	ldr	r5, [pc, #148]	; (80101e0 <GUI_SignalLevel+0xbc>)
 801014a:	4c26      	ldr	r4, [pc, #152]	; (80101e4 <GUI_SignalLevel+0xc0>)
 801014c:	782b      	ldrb	r3, [r5, #0]
 801014e:	7820      	ldrb	r0, [r4, #0]
 8010150:	4298      	cmp	r0, r3
 8010152:	d00a      	beq.n	801016a <GUI_SignalLevel+0x46>
  {
    if(lowSignal)
 8010154:	b38b      	cbz	r3, 80101ba <GUI_SignalLevel+0x96>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 8010156:	4b20      	ldr	r3, [pc, #128]	; (80101d8 <GUI_SignalLevel+0xb4>)
 8010158:	781a      	ldrb	r2, [r3, #0]
 801015a:	4b20      	ldr	r3, [pc, #128]	; (80101dc <GUI_SignalLevel+0xb8>)
 801015c:	211e      	movs	r1, #30
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	bb1a      	cbnz	r2, 80101aa <GUI_SignalLevel+0x86>
 8010162:	b1f3      	cbz	r3, 80101a2 <GUI_SignalLevel+0x7e>
 8010164:	2014      	movs	r0, #20
 8010166:	f008 fe55 	bl	8018e14 <GUI_TextMsgRu_LowIrradiance>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
	oldHighSignal = highSignal;
 801016a:	783b      	ldrb	r3, [r7, #0]
 801016c:	7033      	strb	r3, [r6, #0]
	oldLowSignal = lowSignal;
 801016e:	782b      	ldrb	r3, [r5, #0]
 8010170:	7023      	strb	r3, [r4, #0]
}
 8010172:	b003      	add	sp, #12
 8010174:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 8010176:	2032      	movs	r0, #50	; 0x32
 8010178:	f008 ffe0 	bl	801913c <GUI_TextMsgRu_HighRadiance>
 801017c:	e7e4      	b.n	8010148 <GUI_SignalLevel+0x24>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
 801017e:	2037      	movs	r0, #55	; 0x37
 8010180:	b113      	cbz	r3, 8010188 <GUI_SignalLevel+0x64>
 8010182:	f006 fedd 	bl	8016f40 <GUI_TextMsgEn_HighIrradiance>
 8010186:	e7df      	b.n	8010148 <GUI_SignalLevel+0x24>
 8010188:	f006 ff52 	bl	8017030 <GUI_TextMsgEn_HighRadiance>
 801018c:	e7dc      	b.n	8010148 <GUI_SignalLevel+0x24>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 801018e:	2363      	movs	r3, #99	; 0x63
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8010196:	2338      	movs	r3, #56	; 0x38
 8010198:	2120      	movs	r1, #32
 801019a:	200a      	movs	r0, #10
 801019c:	f00b ff2f 	bl	801bffe <TFT_FillRectangle>
 80101a0:	e7d2      	b.n	8010148 <GUI_SignalLevel+0x24>
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 80101a2:	2037      	movs	r0, #55	; 0x37
 80101a4:	f008 fec4 	bl	8018f30 <GUI_TextMsgRu_LowRadiance>
 80101a8:	e7df      	b.n	801016a <GUI_SignalLevel+0x46>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
 80101aa:	2046      	movs	r0, #70	; 0x46
 80101ac:	b113      	cbz	r3, 80101b4 <GUI_SignalLevel+0x90>
 80101ae:	f007 f80d 	bl	80171cc <GUI_TextMsgEn_LowIrradiance>
 80101b2:	e7da      	b.n	801016a <GUI_SignalLevel+0x46>
 80101b4:	f006 ffa6 	bl	8017104 <GUI_TextMsgEn_LowRadiance>
 80101b8:	e7d7      	b.n	801016a <GUI_SignalLevel+0x46>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 80101ba:	2363      	movs	r3, #99	; 0x63
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80101c2:	2338      	movs	r3, #56	; 0x38
 80101c4:	2120      	movs	r1, #32
 80101c6:	200a      	movs	r0, #10
 80101c8:	f00b ff19 	bl	801bffe <TFT_FillRectangle>
 80101cc:	e7cd      	b.n	801016a <GUI_SignalLevel+0x46>
 80101ce:	bf00      	nop
 80101d0:	200905af 	.word	0x200905af
 80101d4:	20005716 	.word	0x20005716
 80101d8:	200056f3 	.word	0x200056f3
 80101dc:	20000ebc 	.word	0x20000ebc
 80101e0:	200905b2 	.word	0x200905b2
 80101e4:	20005717 	.word	0x20005717

080101e8 <GUI_Measure_Screen>:
void GUI_Measure_Screen(){
 80101e8:	b510      	push	{r4, lr}
	if(preGUI_screen_state != GUI_screen_state){
 80101ea:	4910      	ldr	r1, [pc, #64]	; (801022c <GUI_Measure_Screen+0x44>)
 80101ec:	4c10      	ldr	r4, [pc, #64]	; (8010230 <GUI_Measure_Screen+0x48>)
 80101ee:	7809      	ldrb	r1, [r1, #0]
 80101f0:	7822      	ldrb	r2, [r4, #0]
 80101f2:	4291      	cmp	r1, r2
 80101f4:	d014      	beq.n	8010220 <GUI_Measure_Screen+0x38>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80101f6:	2063      	movs	r0, #99	; 0x63
 80101f8:	f00b fd02 	bl	801bc00 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 80101fc:	4b0d      	ldr	r3, [pc, #52]	; (8010234 <GUI_Measure_Screen+0x4c>)
 80101fe:	2000      	movs	r0, #0
 8010200:	7018      	strb	r0, [r3, #0]
		oldHighSignal = 0;
 8010202:	4b0d      	ldr	r3, [pc, #52]	; (8010238 <GUI_Measure_Screen+0x50>)
 8010204:	7018      	strb	r0, [r3, #0]
		screen_count = 0;
 8010206:	4b0d      	ldr	r3, [pc, #52]	; (801023c <GUI_Measure_Screen+0x54>)
 8010208:	7018      	strb	r0, [r3, #0]
		Measure_Elements_Draw(0);
 801020a:	f7fe ff0d 	bl	800f028 <Measure_Elements_Draw>
		GUI_Up_Panel();
 801020e:	f7ff f9bb 	bl	800f588 <GUI_Up_Panel>
		GUI_Down_Panel();
 8010212:	f7ff f9dd 	bl	800f5d0 <GUI_Down_Panel>
		Prev_Inf_Screen = Measure_Screen;
 8010216:	4a0a      	ldr	r2, [pc, #40]	; (8010240 <GUI_Measure_Screen+0x58>)
 8010218:	2301      	movs	r3, #1
 801021a:	7013      	strb	r3, [r2, #0]
		preGUI_screen_state = Measure_Screen;
 801021c:	7023      	strb	r3, [r4, #0]
 801021e:	bd10      	pop	{r4, pc}
		GUI_SignalLevel();
 8010220:	f7ff ff80 	bl	8010124 <GUI_SignalLevel>
		Measure_Elements_Draw(0);
 8010224:	2000      	movs	r0, #0
 8010226:	f7fe feff 	bl	800f028 <Measure_Elements_Draw>
 801022a:	e7f4      	b.n	8010216 <GUI_Measure_Screen+0x2e>
 801022c:	200056f1 	.word	0x200056f1
 8010230:	2000022a 	.word	0x2000022a
 8010234:	20005717 	.word	0x20005717
 8010238:	20005716 	.word	0x20005716
 801023c:	2000571b 	.word	0x2000571b
 8010240:	20090a65 	.word	0x20090a65

08010244 <GUI_Measure2_Screen>:
{
 8010244:	b510      	push	{r4, lr}
 old_meas_type_L = 2;
 8010246:	4b13      	ldr	r3, [pc, #76]	; (8010294 <GUI_Measure2_Screen+0x50>)
 8010248:	4c13      	ldr	r4, [pc, #76]	; (8010298 <GUI_Measure2_Screen+0x54>)
 801024a:	2202      	movs	r2, #2
 801024c:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != Measure2_Screen){
 801024e:	4b13      	ldr	r3, [pc, #76]	; (801029c <GUI_Measure2_Screen+0x58>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	4293      	cmp	r3, r2
 8010254:	d017      	beq.n	8010286 <GUI_Measure2_Screen+0x42>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 8010256:	2063      	movs	r0, #99	; 0x63
 8010258:	f00b fcd2 	bl	801bc00 <TFT_FillScreen_DMA>
		current_state_Measure_Draw = state_Measure_Elements;
 801025c:	4b10      	ldr	r3, [pc, #64]	; (80102a0 <GUI_Measure2_Screen+0x5c>)
 801025e:	7818      	ldrb	r0, [r3, #0]
		screen_count = 1;
 8010260:	4b10      	ldr	r3, [pc, #64]	; (80102a4 <GUI_Measure2_Screen+0x60>)
		current_state_Measure_Draw = state_Measure_Elements;
 8010262:	7020      	strb	r0, [r4, #0]
		screen_count = 1;
 8010264:	2201      	movs	r2, #1
 8010266:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010268:	4a0f      	ldr	r2, [pc, #60]	; (80102a8 <GUI_Measure2_Screen+0x64>)
 801026a:	2300      	movs	r3, #0
 801026c:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 801026e:	4a0f      	ldr	r2, [pc, #60]	; (80102ac <GUI_Measure2_Screen+0x68>)
 8010270:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010272:	f7fe fed9 	bl	800f028 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010276:	f7ff f987 	bl	800f588 <GUI_Up_Panel>
		GUI_Down_Panel();
 801027a:	f7ff f9a9 	bl	800f5d0 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 801027e:	4b0c      	ldr	r3, [pc, #48]	; (80102b0 <GUI_Measure2_Screen+0x6c>)
 8010280:	2201      	movs	r2, #1
 8010282:	701a      	strb	r2, [r3, #0]
 8010284:	bd10      	pop	{r4, pc}
			GUI_SignalLevel();
 8010286:	f7ff ff4d 	bl	8010124 <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 801028a:	7820      	ldrb	r0, [r4, #0]
 801028c:	f7fe fecc 	bl	800f028 <Measure_Elements_Draw>
 8010290:	e7f5      	b.n	801027e <GUI_Measure2_Screen+0x3a>
 8010292:	bf00      	nop
 8010294:	20000230 	.word	0x20000230
 8010298:	20005714 	.word	0x20005714
 801029c:	2000022a 	.word	0x2000022a
 80102a0:	20005720 	.word	0x20005720
 80102a4:	2000571b 	.word	0x2000571b
 80102a8:	20005717 	.word	0x20005717
 80102ac:	20005716 	.word	0x20005716
 80102b0:	20090a65 	.word	0x20090a65

080102b4 <GUI_Measure3_Screen>:
{
 80102b4:	b538      	push	{r3, r4, r5, lr}
 old_meas_type_L = 2;
 80102b6:	4b12      	ldr	r3, [pc, #72]	; (8010300 <GUI_Measure3_Screen+0x4c>)
 80102b8:	4c12      	ldr	r4, [pc, #72]	; (8010304 <GUI_Measure3_Screen+0x50>)
 80102ba:	2502      	movs	r5, #2
 80102bc:	701d      	strb	r5, [r3, #0]
	if(preGUI_screen_state != Measure3_Screen){
 80102be:	4b12      	ldr	r3, [pc, #72]	; (8010308 <GUI_Measure3_Screen+0x54>)
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	2b03      	cmp	r3, #3
 80102c4:	d016      	beq.n	80102f4 <GUI_Measure3_Screen+0x40>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80102c6:	2063      	movs	r0, #99	; 0x63
 80102c8:	f00b fc9a 	bl	801bc00 <TFT_FillScreen_DMA>
		current_state_Measure_Draw= state_Measure_Elements;
 80102cc:	4b0f      	ldr	r3, [pc, #60]	; (801030c <GUI_Measure3_Screen+0x58>)
		oldLowSignal = 0;
 80102ce:	4a10      	ldr	r2, [pc, #64]	; (8010310 <GUI_Measure3_Screen+0x5c>)
		current_state_Measure_Draw= state_Measure_Elements;
 80102d0:	7818      	ldrb	r0, [r3, #0]
		screen_count = 2;
 80102d2:	4b10      	ldr	r3, [pc, #64]	; (8010314 <GUI_Measure3_Screen+0x60>)
		current_state_Measure_Draw= state_Measure_Elements;
 80102d4:	7020      	strb	r0, [r4, #0]
		screen_count = 2;
 80102d6:	701d      	strb	r5, [r3, #0]
		oldLowSignal = 0;
 80102d8:	2300      	movs	r3, #0
 80102da:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 80102dc:	4a0e      	ldr	r2, [pc, #56]	; (8010318 <GUI_Measure3_Screen+0x64>)
 80102de:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 80102e0:	f7fe fea2 	bl	800f028 <Measure_Elements_Draw>
		GUI_Up_Panel();
 80102e4:	f7ff f950 	bl	800f588 <GUI_Up_Panel>
		GUI_Down_Panel();
 80102e8:	f7ff f972 	bl	800f5d0 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 80102ec:	4b0b      	ldr	r3, [pc, #44]	; (801031c <GUI_Measure3_Screen+0x68>)
 80102ee:	2201      	movs	r2, #1
 80102f0:	701a      	strb	r2, [r3, #0]
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
			GUI_SignalLevel();
 80102f4:	f7ff ff16 	bl	8010124 <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 80102f8:	7820      	ldrb	r0, [r4, #0]
 80102fa:	f7fe fe95 	bl	800f028 <Measure_Elements_Draw>
 80102fe:	e7f5      	b.n	80102ec <GUI_Measure3_Screen+0x38>
 8010300:	20000230 	.word	0x20000230
 8010304:	20005714 	.word	0x20005714
 8010308:	2000022a 	.word	0x2000022a
 801030c:	20005720 	.word	0x20005720
 8010310:	20005717 	.word	0x20005717
 8010314:	2000571b 	.word	0x2000571b
 8010318:	20005716 	.word	0x20005716
 801031c:	20090a65 	.word	0x20090a65

08010320 <GUI_Color_Screen>:
void GUI_Color_Screen(){
 8010320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010324:	ed2d 8b04 	vpush	{d8-d9}
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 8010328:	4c8f      	ldr	r4, [pc, #572]	; (8010568 <GUI_Color_Screen+0x248>)
 801032a:	4f90      	ldr	r7, [pc, #576]	; (801056c <GUI_Color_Screen+0x24c>)
 801032c:	7823      	ldrb	r3, [r4, #0]
 801032e:	4d90      	ldr	r5, [pc, #576]	; (8010570 <GUI_Color_Screen+0x250>)
 8010330:	2b04      	cmp	r3, #4
void GUI_Color_Screen(){
 8010332:	b089      	sub	sp, #36	; 0x24
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 8010334:	d008      	beq.n	8010348 <GUI_Color_Screen+0x28>
 8010336:	7823      	ldrb	r3, [r4, #0]
 8010338:	2b0e      	cmp	r3, #14
 801033a:	d005      	beq.n	8010348 <GUI_Color_Screen+0x28>
 801033c:	7823      	ldrb	r3, [r4, #0]
 801033e:	2b0f      	cmp	r3, #15
 8010340:	d002      	beq.n	8010348 <GUI_Color_Screen+0x28>
 8010342:	7823      	ldrb	r3, [r4, #0]
 8010344:	2b12      	cmp	r3, #18
 8010346:	d125      	bne.n	8010394 <GUI_Color_Screen+0x74>
		GUI_Panels();	
 8010348:	f7ff f986 	bl	800f658 <GUI_Panels>
		TFT_direction = Rotation_Screen_Color;
 801034c:	4b89      	ldr	r3, [pc, #548]	; (8010574 <GUI_Color_Screen+0x254>)
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	703b      	strb	r3, [r7, #0]
		TFT_DrawBitmap(Color_Field&Color_CIE_xy? 18:
 8010352:	782b      	ldrb	r3, [r5, #0]
 8010354:	f013 0f05 	tst.w	r3, #5
 8010358:	bf0c      	ite	eq
 801035a:	200b      	moveq	r0, #11
 801035c:	2012      	movne	r0, #18
 801035e:	f013 0f04 	tst.w	r3, #4
 8010362:	4b85      	ldr	r3, [pc, #532]	; (8010578 <GUI_Color_Screen+0x258>)
 8010364:	bf18      	it	ne
 8010366:	21ac      	movne	r1, #172	; 0xac
 8010368:	cb0c      	ldmia	r3, {r2, r3}
 801036a:	bf08      	it	eq
 801036c:	2196      	moveq	r1, #150	; 0x96
 801036e:	f00c f848 	bl	801c402 <TFT_DrawBitmap>
		flag = 0;	
 8010372:	4b82      	ldr	r3, [pc, #520]	; (801057c <GUI_Color_Screen+0x25c>)
 8010374:	2200      	movs	r2, #0
 8010376:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010378:	4b81      	ldr	r3, [pc, #516]	; (8010580 <GUI_Color_Screen+0x260>)
 801037a:	701a      	strb	r2, [r3, #0]
		oldHighSignal = 0;
 801037c:	4b81      	ldr	r3, [pc, #516]	; (8010584 <GUI_Color_Screen+0x264>)
 801037e:	701a      	strb	r2, [r3, #0]
		if(Color_Field&Color_CIE_xy){GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);}
 8010380:	782b      	ldrb	r3, [r5, #0]
 8010382:	f013 0101 	ands.w	r1, r3, #1
 8010386:	f000 80cf 	beq.w	8010528 <GUI_Color_Screen+0x208>
 801038a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801038e:	2012      	movs	r0, #18
 8010390:	f005 fd38 	bl	8015e04 <GUI_Axes_Locus_XY>
	Prev_Inf_Screen = Color_Screen;
 8010394:	4a7c      	ldr	r2, [pc, #496]	; (8010588 <GUI_Color_Screen+0x268>)
	preGUI_screen_state = Color_Screen;
 8010396:	2305      	movs	r3, #5
 8010398:	7023      	strb	r3, [r4, #0]
	Prev_Inf_Screen = Color_Screen;
 801039a:	7013      	strb	r3, [r2, #0]
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 801039c:	4b7b      	ldr	r3, [pc, #492]	; (801058c <GUI_Color_Screen+0x26c>)
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f040 80d4 	bne.w	801054e <GUI_Color_Screen+0x22e>
 80103a6:	4b7a      	ldr	r3, [pc, #488]	; (8010590 <GUI_Color_Screen+0x270>)
 80103a8:	edd3 8a00 	vldr	s17, [r3]
colorimetry_xy_buff[1] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[1] : colorimetry_xy1931[1];
 80103ac:	ed93 8a01 	vldr	s16, [r3, #4]
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 80103b0:	782b      	ldrb	r3, [r5, #0]
 80103b2:	07d9      	lsls	r1, r3, #31
 80103b4:	f140 8102 	bpl.w	80105bc <GUI_Color_Screen+0x29c>
 80103b8:	4b76      	ldr	r3, [pc, #472]	; (8010594 <GUI_Color_Screen+0x274>)
 80103ba:	4a77      	ldr	r2, [pc, #476]	; (8010598 <GUI_Color_Screen+0x278>)
		 scr_refresh++;
 80103bc:	4e77      	ldr	r6, [pc, #476]	; (801059c <GUI_Color_Screen+0x27c>)
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	7812      	ldrb	r2, [r2, #0]
 80103c2:	eef0 0a48 	vmov.f32	s1, s16
 80103c6:	eeb0 0a68 	vmov.f32	s0, s17
 80103ca:	2146      	movs	r1, #70	; 0x46
 80103cc:	2014      	movs	r0, #20
 80103ce:	f004 f9cf 	bl	8014770 <GUI_Text_xy_Measure>
		 scr_refresh++;
 80103d2:	7833      	ldrb	r3, [r6, #0]
 80103d4:	3301      	adds	r3, #1
 80103d6:	b2db      	uxtb	r3, r3
   if(scr_refresh > 15 ){
 80103d8:	2b0f      	cmp	r3, #15
		 scr_refresh++;
 80103da:	7033      	strb	r3, [r6, #0]
   if(scr_refresh > 15 ){
 80103dc:	f240 809b 	bls.w	8010516 <GUI_Color_Screen+0x1f6>
		 if(colorimetry_xy_buff[0] < 0.74 & colorimetry_xy_buff[1] < 0.84 ){
 80103e0:	ee18 0a90 	vmov	r0, s17
 80103e4:	f7f0 f8c8 	bl	8000578 <__aeabi_f2d>
 80103e8:	a35b      	add	r3, pc, #364	; (adr r3, 8010558 <GUI_Color_Screen+0x238>)
 80103ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ee:	f04f 0401 	mov.w	r4, #1
 80103f2:	f7f0 fb87 	bl	8000b04 <__aeabi_dcmplt>
 80103f6:	b900      	cbnz	r0, 80103fa <GUI_Color_Screen+0xda>
 80103f8:	4604      	mov	r4, r0
 80103fa:	f014 0fff 	tst.w	r4, #255	; 0xff
 80103fe:	f000 808a 	beq.w	8010516 <GUI_Color_Screen+0x1f6>
 8010402:	ee18 0a10 	vmov	r0, s16
 8010406:	f7f0 f8b7 	bl	8000578 <__aeabi_f2d>
 801040a:	a355      	add	r3, pc, #340	; (adr r3, 8010560 <GUI_Color_Screen+0x240>)
 801040c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010410:	f04f 0401 	mov.w	r4, #1
 8010414:	f7f0 fb76 	bl	8000b04 <__aeabi_dcmplt>
 8010418:	b900      	cbnz	r0, 801041c <GUI_Color_Screen+0xfc>
 801041a:	4604      	mov	r4, r0
 801041c:	f014 0fff 	tst.w	r4, #255	; 0xff
 8010420:	d079      	beq.n	8010516 <GUI_Color_Screen+0x1f6>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010422:	4b56      	ldr	r3, [pc, #344]	; (801057c <GUI_Color_Screen+0x25c>)
 8010424:	4c5e      	ldr	r4, [pc, #376]	; (80105a0 <GUI_Color_Screen+0x280>)
 8010426:	781a      	ldrb	r2, [r3, #0]
 8010428:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 80105a4 <GUI_Color_Screen+0x284>
 801042c:	eddf 9a5e 	vldr	s19, [pc, #376]	; 80105a8 <GUI_Color_Screen+0x288>
 8010430:	4698      	mov	r8, r3
 8010432:	2a00      	cmp	r2, #0
 8010434:	d03f      	beq.n	80104b6 <GUI_Color_Screen+0x196>
 8010436:	edd4 6a01 	vldr	s13, [r4, #4]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 801043a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80105ac <GUI_Color_Screen+0x28c>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 801043e:	edd4 5a00 	vldr	s11, [r4]
 8010442:	4a4d      	ldr	r2, [pc, #308]	; (8010578 <GUI_Color_Screen+0x258>)
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010444:	eef1 6a66 	vneg.f32	s13, s13
 8010448:	eea6 7a89 	vfma.f32	s14, s13, s18
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 801044c:	e892 0003 	ldmia.w	r2, {r0, r1}
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010450:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010454:	ee37 7a46 	vsub.f32	s14, s14, s12
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010458:	ab01      	add	r3, sp, #4
 801045a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801045e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80105b0 <GUI_Color_Screen+0x290>
 8010462:	edcd 7a04 	vstr	s15, [sp, #16]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010466:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 801046a:	eee5 7aa9 	vfma.f32	s15, s11, s19
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 801046e:	eea6 7a89 	vfma.f32	s14, s13, s18
 8010472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010476:	ee37 7a46 	vsub.f32	s14, s14, s12
 801047a:	edcd 7a05 	vstr	s15, [sp, #20]
 801047e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010482:	edcd 7a06 	vstr	s15, [sp, #24]
 8010486:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 801048a:	eee5 7aa9 	vfma.f32	s15, s11, s19
 801048e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010496:	edcd 7a07 	vstr	s15, [sp, #28]
 801049a:	e883 0003 	stmia.w	r3, {r0, r1}
 801049e:	230f      	movs	r3, #15
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80104a6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80104aa:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80104ae:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80104b2:	f00c f843 	bl	801c53c <TFT_DrawCutBMP>
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 80104b6:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 80104ba:	eee8 7aa9 	vfma.f32	s15, s17, s19
 80104be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104c2:	2204      	movs	r2, #4
		colorimetry_xy_old[0] = colorimetry_xy_buff[0];
 80104c4:	edc4 8a00 	vstr	s17, [r4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 80104c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		colorimetry_xy_old[1] = colorimetry_xy_buff[1];
 80104cc:	ed84 8a01 	vstr	s16, [r4, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 80104d0:	edcd 7a04 	vstr	s15, [sp, #16]
 80104d4:	eddf 7a37 	vldr	s15, [pc, #220]	; 80105b4 <GUI_Color_Screen+0x294>
 80104d8:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 80104dc:	eee8 7a49 	vfms.f32	s15, s16, s18
 80104e0:	4620      	mov	r0, r4
 80104e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80104e6:	edcd 7a04 	vstr	s15, [sp, #16]
 80104ea:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 80104ee:	4629      	mov	r1, r5
 80104f0:	f00b fdc1 	bl	801c076 <TFT_DrawFilledCircle>
		TFT_DrawFilledCircle(18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 2, TFT_Black);
 80104f4:	2300      	movs	r3, #0
 80104f6:	2202      	movs	r2, #2
 80104f8:	4629      	mov	r1, r5
 80104fa:	4620      	mov	r0, r4
 80104fc:	f00b fdbb 	bl	801c076 <TFT_DrawFilledCircle>
		GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);
 8010500:	2200      	movs	r2, #0
 8010502:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010506:	2012      	movs	r0, #18
 8010508:	f005 fc7c 	bl	8015e04 <GUI_Axes_Locus_XY>
		flag = 1;
 801050c:	2301      	movs	r3, #1
 801050e:	f888 3000 	strb.w	r3, [r8]
			scr_refresh = 0;
 8010512:	2300      	movs	r3, #0
 8010514:	7033      	strb	r3, [r6, #0]
	TFT_direction = 0x00;
 8010516:	2300      	movs	r3, #0
 8010518:	703b      	strb	r3, [r7, #0]
}         
 801051a:	b009      	add	sp, #36	; 0x24
 801051c:	ecbd 8b04 	vpop	{d8-d9}
 8010520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_SignalLevel();
 8010524:	f7ff bdfe 	b.w	8010124 <GUI_SignalLevel>
		else if(Color_Field&Color_CIE_Luv){GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);}
 8010528:	f013 0204 	ands.w	r2, r3, #4
 801052c:	d006      	beq.n	801053c <GUI_Color_Screen+0x21c>
 801052e:	460a      	mov	r2, r1
 8010530:	2012      	movs	r0, #18
 8010532:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010536:	f005 fccb 	bl	8015ed0 <GUI_Axes_Locus_LUV>
 801053a:	e72b      	b.n	8010394 <GUI_Color_Screen+0x74>
		else if(Color_Field&Color_CIE_Lab) {GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);}
 801053c:	0798      	lsls	r0, r3, #30
 801053e:	f57f af29 	bpl.w	8010394 <GUI_Color_Screen+0x74>
 8010542:	f240 1113 	movw	r1, #275	; 0x113
 8010546:	2088      	movs	r0, #136	; 0x88
 8010548:	f005 fd28 	bl	8015f9c <GUI_Axes_Locus_Lab>
 801054c:	e722      	b.n	8010394 <GUI_Color_Screen+0x74>
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 801054e:	4b1a      	ldr	r3, [pc, #104]	; (80105b8 <GUI_Color_Screen+0x298>)
 8010550:	e72a      	b.n	80103a8 <GUI_Color_Screen+0x88>
 8010552:	bf00      	nop
 8010554:	f3af 8000 	nop.w
 8010558:	7ae147ae 	.word	0x7ae147ae
 801055c:	3fe7ae14 	.word	0x3fe7ae14
 8010560:	ae147ae1 	.word	0xae147ae1
 8010564:	3feae147 	.word	0x3feae147
 8010568:	2000022a 	.word	0x2000022a
 801056c:	20005690 	.word	0x20005690
 8010570:	200056ef 	.word	0x200056ef
 8010574:	200056f8 	.word	0x200056f8
 8010578:	20091000 	.word	0x20091000
 801057c:	20005715 	.word	0x20005715
 8010580:	20005717 	.word	0x20005717
 8010584:	20005716 	.word	0x20005716
 8010588:	20090a65 	.word	0x20090a65
 801058c:	200056f4 	.word	0x200056f4
 8010590:	2008f538 	.word	0x2008f538
 8010594:	20000ec0 	.word	0x20000ec0
 8010598:	20000ec1 	.word	0x20000ec1
 801059c:	2000571a 	.word	0x2000571a
 80105a0:	2000570c 	.word	0x2000570c
 80105a4:	43960000 	.word	0x43960000
 80105a8:	43938000 	.word	0x43938000
 80105ac:	43790000 	.word	0x43790000
 80105b0:	43c78000 	.word	0x43c78000
 80105b4:	43c80000 	.word	0x43c80000
 80105b8:	2008f530 	.word	0x2008f530
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 80105bc:	075a      	lsls	r2, r3, #29
 80105be:	f140 80fb 	bpl.w	80107b8 <GUI_Color_Screen+0x498>
 80105c2:	4c71      	ldr	r4, [pc, #452]	; (8010788 <GUI_Color_Screen+0x468>)
 80105c4:	4b71      	ldr	r3, [pc, #452]	; (801078c <GUI_Color_Screen+0x46c>)
 80105c6:	4a72      	ldr	r2, [pc, #456]	; (8010790 <GUI_Color_Screen+0x470>)
		scr_refresh++;
 80105c8:	4e72      	ldr	r6, [pc, #456]	; (8010794 <GUI_Color_Screen+0x474>)
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	7812      	ldrb	r2, [r2, #0]
 80105ce:	edd4 0a01 	vldr	s1, [r4, #4]
 80105d2:	ed94 0a00 	vldr	s0, [r4]
 80105d6:	2146      	movs	r1, #70	; 0x46
 80105d8:	2014      	movs	r0, #20
 80105da:	f004 f98d 	bl	80148f8 <GUI_Text_uv_Measure>
		scr_refresh++;
 80105de:	7833      	ldrb	r3, [r6, #0]
 80105e0:	3301      	adds	r3, #1
 80105e2:	b2db      	uxtb	r3, r3
		if(scr_refresh > 15 ){
 80105e4:	2b0f      	cmp	r3, #15
		scr_refresh++;
 80105e6:	7033      	strb	r3, [r6, #0]
		if(scr_refresh > 15 ){
 80105e8:	d995      	bls.n	8010516 <GUI_Color_Screen+0x1f6>
		if(colorimetry_uv1976[0] < 0.63 & colorimetry_uv1976[1] < 0.59 & colorimetry_uv1976[0] > 0.0 & colorimetry_uv1976[1] > 0.0){
 80105ea:	edd4 7a00 	vldr	s15, [r4]
 80105ee:	ed94 8a01 	vldr	s16, [r4, #4]
 80105f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80105f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80105fe:	bfcc      	ite	gt
 8010600:	2501      	movgt	r5, #1
 8010602:	2500      	movle	r5, #0
 8010604:	ee17 0a90 	vmov	r0, s15
 8010608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060c:	f005 0501 	and.w	r5, r5, #1
 8010610:	bfd8      	it	le
 8010612:	2500      	movle	r5, #0
 8010614:	f7ef ffb0 	bl	8000578 <__aeabi_f2d>
 8010618:	a357      	add	r3, pc, #348	; (adr r3, 8010778 <GUI_Color_Screen+0x458>)
 801061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061e:	f04f 0801 	mov.w	r8, #1
 8010622:	f7f0 fa6f 	bl	8000b04 <__aeabi_dcmplt>
 8010626:	b900      	cbnz	r0, 801062a <GUI_Color_Screen+0x30a>
 8010628:	4680      	mov	r8, r0
 801062a:	ea15 0f08 	tst.w	r5, r8
 801062e:	f43f af72 	beq.w	8010516 <GUI_Color_Screen+0x1f6>
 8010632:	ee18 0a10 	vmov	r0, s16
 8010636:	f7ef ff9f 	bl	8000578 <__aeabi_f2d>
 801063a:	a351      	add	r3, pc, #324	; (adr r3, 8010780 <GUI_Color_Screen+0x460>)
 801063c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010640:	f04f 0501 	mov.w	r5, #1
 8010644:	f7f0 fa5e 	bl	8000b04 <__aeabi_dcmplt>
 8010648:	b900      	cbnz	r0, 801064c <GUI_Color_Screen+0x32c>
 801064a:	4605      	mov	r5, r0
 801064c:	f015 0fff 	tst.w	r5, #255	; 0xff
 8010650:	f43f af61 	beq.w	8010516 <GUI_Color_Screen+0x1f6>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010654:	4d50      	ldr	r5, [pc, #320]	; (8010798 <GUI_Color_Screen+0x478>)
 8010656:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80107b4 <GUI_Color_Screen+0x494>
 801065a:	782a      	ldrb	r2, [r5, #0]
 801065c:	eddf 9a4f 	vldr	s19, [pc, #316]	; 801079c <GUI_Color_Screen+0x47c>
 8010660:	eddf 8a4f 	vldr	s17, [pc, #316]	; 80107a0 <GUI_Color_Screen+0x480>
 8010664:	2a00      	cmp	r2, #0
 8010666:	d03f      	beq.n	80106e8 <GUI_Color_Screen+0x3c8>
 8010668:	edd8 6a01 	vldr	s13, [r8, #4]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 801066c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80107a4 <GUI_Color_Screen+0x484>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010670:	edd8 5a00 	vldr	s11, [r8]
 8010674:	4a4c      	ldr	r2, [pc, #304]	; (80107a8 <GUI_Color_Screen+0x488>)
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010676:	eef1 6a66 	vneg.f32	s13, s13
 801067a:	eea6 7aa9 	vfma.f32	s14, s13, s19
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 801067e:	e892 0003 	ldmia.w	r2, {r0, r1}
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010682:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010686:	ee37 7a46 	vsub.f32	s14, s14, s12
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 801068a:	ab01      	add	r3, sp, #4
 801068c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010690:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80107ac <GUI_Color_Screen+0x48c>
 8010694:	edcd 7a04 	vstr	s15, [sp, #16]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010698:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 801069c:	eee5 7aa8 	vfma.f32	s15, s11, s17
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 80106a0:	eea6 7aa9 	vfma.f32	s14, s13, s19
 80106a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80106a8:	ee37 7a46 	vsub.f32	s14, s14, s12
 80106ac:	edcd 7a05 	vstr	s15, [sp, #20]
 80106b0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80106b4:	edcd 7a06 	vstr	s15, [sp, #24]
 80106b8:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 80106bc:	eee5 7aa8 	vfma.f32	s15, s11, s17
 80106c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80106c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80106c8:	edcd 7a07 	vstr	s15, [sp, #28]
 80106cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80106d0:	230c      	movs	r3, #12
 80106d2:	9300      	str	r3, [sp, #0]
 80106d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80106d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80106dc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80106e0:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80106e4:	f00b ff2a 	bl	801c53c <TFT_DrawCutBMP>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 80106e8:	ed9f 9a31 	vldr	s18, [pc, #196]	; 80107b0 <GUI_Color_Screen+0x490>
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 80106ec:	ed94 7a01 	vldr	s14, [r4, #4]
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 80106f0:	edd4 7a00 	vldr	s15, [r4]
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 80106f4:	ed88 7a01 	vstr	s14, [r8, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 80106f8:	eef0 6a49 	vmov.f32	s13, s18
 80106fc:	eee7 6a69 	vfms.f32	s13, s14, s19
 8010700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010704:	2204      	movs	r2, #4
 8010706:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 801070a:	eebd 7ae6 	vcvt.s32.f32	s14, s13
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 801070e:	edc8 7a00 	vstr	s15, [r8]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010712:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010716:	eeb0 7a48 	vmov.f32	s14, s16
 801071a:	eea7 7aa8 	vfma.f32	s14, s15, s17
 801071e:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8010722:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8010726:	edcd 7a05 	vstr	s15, [sp, #20]
 801072a:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 801072e:	f00b fca2 	bl	801c076 <TFT_DrawFilledCircle>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 8010732:	edd4 7a01 	vldr	s15, [r4, #4]
 8010736:	eea7 9ae9 	vfms.f32	s18, s15, s19
 801073a:	2300      	movs	r3, #0
 801073c:	2202      	movs	r2, #2
 801073e:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8010742:	edcd 7a04 	vstr	s15, [sp, #16]
 8010746:	edd4 7a00 	vldr	s15, [r4]
 801074a:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801074e:	eea7 8aa8 	vfma.f32	s16, s15, s17
 8010752:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010756:	edcd 7a05 	vstr	s15, [sp, #20]
 801075a:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 801075e:	f00b fc8a 	bl	801c076 <TFT_DrawFilledCircle>
			GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);
 8010762:	2200      	movs	r2, #0
 8010764:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010768:	2012      	movs	r0, #18
 801076a:	f005 fbb1 	bl	8015ed0 <GUI_Axes_Locus_LUV>
			flag = 1;
 801076e:	2301      	movs	r3, #1
 8010770:	702b      	strb	r3, [r5, #0]
 8010772:	e6ce      	b.n	8010512 <GUI_Color_Screen+0x1f2>
 8010774:	f3af 8000 	nop.w
 8010778:	c28f5c29 	.word	0xc28f5c29
 801077c:	3fe428f5 	.word	0x3fe428f5
 8010780:	ae147ae1 	.word	0xae147ae1
 8010784:	3fe2e147 	.word	0x3fe2e147
 8010788:	2008f528 	.word	0x2008f528
 801078c:	20000ec0 	.word	0x20000ec0
 8010790:	20000ec1 	.word	0x20000ec1
 8010794:	2000571a 	.word	0x2000571a
 8010798:	20005715 	.word	0x20005715
 801079c:	43c60000 	.word	0x43c60000
 80107a0:	43c98000 	.word	0x43c98000
 80107a4:	43690000 	.word	0x43690000
 80107a8:	20091000 	.word	0x20091000
 80107ac:	43ca8000 	.word	0x43ca8000
 80107b0:	43cb0000 	.word	0x43cb0000
 80107b4:	20005704 	.word	0x20005704
	if(Color_Field&Color_CIE_Lab) {GUI_Text_LAB_Measure(20, 54, colorimetry_LAB[0], colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 80107b8:	079b      	lsls	r3, r3, #30
 80107ba:	f57f aeac 	bpl.w	8010516 <GUI_Color_Screen+0x1f6>
 80107be:	4984      	ldr	r1, [pc, #528]	; (80109d0 <GUI_Color_Screen+0x6b0>)
 80107c0:	4c84      	ldr	r4, [pc, #528]	; (80109d4 <GUI_Color_Screen+0x6b4>)
 80107c2:	7809      	ldrb	r1, [r1, #0]
 80107c4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80107c8:	f9b4 2000 	ldrsh.w	r2, [r4]
 80107cc:	9102      	str	r1, [sp, #8]
 80107ce:	4982      	ldr	r1, [pc, #520]	; (80109d8 <GUI_Color_Screen+0x6b8>)
 80107d0:	7809      	ldrb	r1, [r1, #0]
 80107d2:	9101      	str	r1, [sp, #4]
 80107d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80107d8:	9100      	str	r1, [sp, #0]
 80107da:	2014      	movs	r0, #20
 80107dc:	2136      	movs	r1, #54	; 0x36
 80107de:	f005 f843 	bl	8015868 <GUI_Text_LAB_Measure>
		if(colorimetry_LAB[1] < 128 & colorimetry_LAB[1] > -128 & colorimetry_LAB[2]<128 & colorimetry_LAB[2] > -128){
 80107e2:	8863      	ldrh	r3, [r4, #2]
 80107e4:	337f      	adds	r3, #127	; 0x7f
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	2bfe      	cmp	r3, #254	; 0xfe
 80107ea:	f63f ae94 	bhi.w	8010516 <GUI_Color_Screen+0x1f6>
 80107ee:	88a3      	ldrh	r3, [r4, #4]
 80107f0:	337f      	adds	r3, #127	; 0x7f
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	2bfe      	cmp	r3, #254	; 0xfe
 80107f6:	f63f ae8e 	bhi.w	8010516 <GUI_Color_Screen+0x1f6>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80107fa:	4d78      	ldr	r5, [pc, #480]	; (80109dc <GUI_Color_Screen+0x6bc>)
 80107fc:	4e78      	ldr	r6, [pc, #480]	; (80109e0 <GUI_Color_Screen+0x6c0>)
 80107fe:	782b      	ldrb	r3, [r5, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d05d      	beq.n	80108c0 <GUI_Color_Screen+0x5a0>
 8010804:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8010808:	f7ef fea4 	bl	8000554 <__aeabi_i2d>
 801080c:	a368      	add	r3, pc, #416	; (adr r3, 80109b0 <GUI_Color_Screen+0x690>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	f7ef ff05 	bl	8000620 <__aeabi_dmul>
 8010816:	4682      	mov	sl, r0
 8010818:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 801081c:	468b      	mov	fp, r1
 801081e:	f7ef fe99 	bl	8000554 <__aeabi_i2d>
 8010822:	a363      	add	r3, pc, #396	; (adr r3, 80109b0 <GUI_Color_Screen+0x690>)
 8010824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010828:	f7ef fefa 	bl	8000620 <__aeabi_dmul>
 801082c:	4680      	mov	r8, r0
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 801082e:	4602      	mov	r2, r0
 8010830:	460b      	mov	r3, r1
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010832:	4689      	mov	r9, r1
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 8010834:	2000      	movs	r0, #0
 8010836:	496b      	ldr	r1, [pc, #428]	; (80109e4 <GUI_Color_Screen+0x6c4>)
 8010838:	f7ef fd3e 	bl	80002b8 <__aeabi_dsub>
 801083c:	2200      	movs	r2, #0
 801083e:	4b6a      	ldr	r3, [pc, #424]	; (80109e8 <GUI_Color_Screen+0x6c8>)
 8010840:	f7ef fd3a 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010844:	f7f0 f9c4 	bl	8000bd0 <__aeabi_d2uiz>
 8010848:	b283      	uxth	r3, r0
 801084a:	9304      	str	r3, [sp, #16]
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 801084c:	2200      	movs	r2, #0
 801084e:	4b67      	ldr	r3, [pc, #412]	; (80109ec <GUI_Color_Screen+0x6cc>)
 8010850:	4650      	mov	r0, sl
 8010852:	4659      	mov	r1, fp
 8010854:	f7ef fd32 	bl	80002bc <__adddf3>
 8010858:	2200      	movs	r2, #0
 801085a:	4b63      	ldr	r3, [pc, #396]	; (80109e8 <GUI_Color_Screen+0x6c8>)
 801085c:	f7ef fd2c 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010860:	f7f0 f9b6 	bl	8000bd0 <__aeabi_d2uiz>
 8010864:	b283      	uxth	r3, r0
 8010866:	4642      	mov	r2, r8
 8010868:	9305      	str	r3, [sp, #20]
 801086a:	a153      	add	r1, pc, #332	; (adr r1, 80109b8 <GUI_Color_Screen+0x698>)
 801086c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010870:	464b      	mov	r3, r9
 8010872:	f7ef fd21 	bl	80002b8 <__aeabi_dsub>
 8010876:	2200      	movs	r2, #0
 8010878:	4b5b      	ldr	r3, [pc, #364]	; (80109e8 <GUI_Color_Screen+0x6c8>)
 801087a:	f7ef fd1d 	bl	80002b8 <__aeabi_dsub>
 801087e:	f7f0 f9a7 	bl	8000bd0 <__aeabi_d2uiz>
 8010882:	a34f      	add	r3, pc, #316	; (adr r3, 80109c0 <GUI_Color_Screen+0x6a0>)
 8010884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010888:	fa1f f880 	uxth.w	r8, r0
 801088c:	4659      	mov	r1, fp
 801088e:	4650      	mov	r0, sl
 8010890:	f7ef fd14 	bl	80002bc <__adddf3>
 8010894:	2200      	movs	r2, #0
 8010896:	4b54      	ldr	r3, [pc, #336]	; (80109e8 <GUI_Color_Screen+0x6c8>)
 8010898:	f7ef fd0e 	bl	80002b8 <__aeabi_dsub>
 801089c:	f7f0 f998 	bl	8000bd0 <__aeabi_d2uiz>
 80108a0:	4a53      	ldr	r2, [pc, #332]	; (80109f0 <GUI_Color_Screen+0x6d0>)
 80108a2:	fa1f fe80 	uxth.w	lr, r0
 80108a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108aa:	ab01      	add	r3, sp, #4
 80108ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80108b0:	230c      	movs	r3, #12
 80108b2:	9300      	str	r3, [sp, #0]
 80108b4:	9a05      	ldr	r2, [sp, #20]
 80108b6:	9b04      	ldr	r3, [sp, #16]
 80108b8:	4641      	mov	r1, r8
 80108ba:	4670      	mov	r0, lr
 80108bc:	f00b fe3e 	bl	801c53c <TFT_DrawCutBMP>
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 80108c0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 80108c4:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 80108c8:	80b0      	strh	r0, [r6, #4]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 80108ca:	ee07 0a90 	vmov	s15, r0
 80108ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 80108d2:	f8a6 8002 	strh.w	r8, [r6, #2]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 80108d6:	ee17 0a90 	vmov	r0, s15
 80108da:	f7ef fe4d 	bl	8000578 <__aeabi_f2d>
 80108de:	a334      	add	r3, pc, #208	; (adr r3, 80109b0 <GUI_Color_Screen+0x690>)
 80108e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e4:	f7ef fe9c 	bl	8000620 <__aeabi_dmul>
 80108e8:	4602      	mov	r2, r0
 80108ea:	460b      	mov	r3, r1
 80108ec:	a136      	add	r1, pc, #216	; (adr r1, 80109c8 <GUI_Color_Screen+0x6a8>)
 80108ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108f2:	f7ef fce1 	bl	80002b8 <__aeabi_dsub>
 80108f6:	f7f0 f943 	bl	8000b80 <__aeabi_d2iz>
 80108fa:	ee07 8a90 	vmov	s15, r8
 80108fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010902:	b206      	sxth	r6, r0
 8010904:	ee17 0a90 	vmov	r0, s15
 8010908:	f7ef fe36 	bl	8000578 <__aeabi_f2d>
 801090c:	a328      	add	r3, pc, #160	; (adr r3, 80109b0 <GUI_Color_Screen+0x690>)
 801090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010912:	f7ef fe85 	bl	8000620 <__aeabi_dmul>
 8010916:	2200      	movs	r2, #0
 8010918:	4b36      	ldr	r3, [pc, #216]	; (80109f4 <GUI_Color_Screen+0x6d4>)
 801091a:	f7ef fccf 	bl	80002bc <__adddf3>
 801091e:	f7f0 f92f 	bl	8000b80 <__aeabi_d2iz>
 8010922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010926:	2204      	movs	r2, #4
 8010928:	4631      	mov	r1, r6
 801092a:	b200      	sxth	r0, r0
 801092c:	f00b fba3 	bl	801c076 <TFT_DrawFilledCircle>
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 8010930:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010934:	ee07 0a90 	vmov	s15, r0
 8010938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801093c:	ee17 0a90 	vmov	r0, s15
 8010940:	f7ef fe1a 	bl	8000578 <__aeabi_f2d>
 8010944:	a31a      	add	r3, pc, #104	; (adr r3, 80109b0 <GUI_Color_Screen+0x690>)
 8010946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094a:	f7ef fe69 	bl	8000620 <__aeabi_dmul>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	a11d      	add	r1, pc, #116	; (adr r1, 80109c8 <GUI_Color_Screen+0x6a8>)
 8010954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010958:	f7ef fcae 	bl	80002b8 <__aeabi_dsub>
 801095c:	f7f0 f910 	bl	8000b80 <__aeabi_d2iz>
 8010960:	b206      	sxth	r6, r0
 8010962:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8010966:	ee07 0a90 	vmov	s15, r0
 801096a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801096e:	ee17 0a90 	vmov	r0, s15
 8010972:	f7ef fe01 	bl	8000578 <__aeabi_f2d>
 8010976:	a30e      	add	r3, pc, #56	; (adr r3, 80109b0 <GUI_Color_Screen+0x690>)
 8010978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097c:	f7ef fe50 	bl	8000620 <__aeabi_dmul>
 8010980:	2200      	movs	r2, #0
 8010982:	4b1c      	ldr	r3, [pc, #112]	; (80109f4 <GUI_Color_Screen+0x6d4>)
 8010984:	f7ef fc9a 	bl	80002bc <__adddf3>
 8010988:	f7f0 f8fa 	bl	8000b80 <__aeabi_d2iz>
 801098c:	2300      	movs	r3, #0
 801098e:	2202      	movs	r2, #2
 8010990:	4631      	mov	r1, r6
 8010992:	b200      	sxth	r0, r0
 8010994:	f00b fb6f 	bl	801c076 <TFT_DrawFilledCircle>
				GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);
 8010998:	2200      	movs	r2, #0
 801099a:	f240 1113 	movw	r1, #275	; 0x113
 801099e:	2088      	movs	r0, #136	; 0x88
 80109a0:	f005 fafc 	bl	8015f9c <GUI_Axes_Locus_Lab>
				flag = 1;
 80109a4:	2301      	movs	r3, #1
 80109a6:	702b      	strb	r3, [r5, #0]
				scr_refresh = 0;
 80109a8:	4b13      	ldr	r3, [pc, #76]	; (80109f8 <GUI_Color_Screen+0x6d8>)
 80109aa:	2200      	movs	r2, #0
 80109ac:	701a      	strb	r2, [r3, #0]
 80109ae:	e5b2      	b.n	8010516 <GUI_Color_Screen+0x1f6>
 80109b0:	5a1cac08 	.word	0x5a1cac08
 80109b4:	3fef3b64 	.word	0x3fef3b64
 80109b8:	00000000 	.word	0x00000000
 80109bc:	40712000 	.word	0x40712000
 80109c0:	00000000 	.word	0x00000000
 80109c4:	4060e000 	.word	0x4060e000
 80109c8:	00000000 	.word	0x00000000
 80109cc:	40713000 	.word	0x40713000
 80109d0:	20000ec0 	.word	0x20000ec0
 80109d4:	2008f50c 	.word	0x2008f50c
 80109d8:	20000ec1 	.word	0x20000ec1
 80109dc:	20005715 	.word	0x20005715
 80109e0:	200056fc 	.word	0x200056fc
 80109e4:	405f0000 	.word	0x405f0000
 80109e8:	40140000 	.word	0x40140000
 80109ec:	405f4000 	.word	0x405f4000
 80109f0:	20091000 	.word	0x20091000
 80109f4:	40610000 	.word	0x40610000
 80109f8:	2000571a 	.word	0x2000571a

080109fc <GUI_ColorRend_Screen>:
void GUI_ColorRend_Screen(){
 80109fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 80109fe:	4b39      	ldr	r3, [pc, #228]	; (8010ae4 <GUI_ColorRend_Screen+0xe8>)
 8010a00:	4d39      	ldr	r5, [pc, #228]	; (8010ae8 <GUI_ColorRend_Screen+0xec>)
 8010a02:	4c3a      	ldr	r4, [pc, #232]	; (8010aec <GUI_ColorRend_Screen+0xf0>)
 8010a04:	2202      	movs	r2, #2
 8010a06:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Rotation_Screen_Rend_Old != Rotation_Screen_Rend){
 8010a08:	4b39      	ldr	r3, [pc, #228]	; (8010af0 <GUI_ColorRend_Screen+0xf4>)
 8010a0a:	4a3a      	ldr	r2, [pc, #232]	; (8010af4 <GUI_ColorRend_Screen+0xf8>)
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	7812      	ldrb	r2, [r2, #0]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d103      	bne.n	8010a1c <GUI_ColorRend_Screen+0x20>
 8010a14:	782a      	ldrb	r2, [r5, #0]
 8010a16:	7823      	ldrb	r3, [r4, #0]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d02b      	beq.n	8010a74 <GUI_ColorRend_Screen+0x78>
	GUI_Panels();		
 8010a1c:	f7fe fe1c 	bl	800f658 <GUI_Panels>
	oldLowSignal = 0;
 8010a20:	4a35      	ldr	r2, [pc, #212]	; (8010af8 <GUI_ColorRend_Screen+0xfc>)
 8010a22:	2300      	movs	r3, #0
 8010a24:	7013      	strb	r3, [r2, #0]
	oldHighSignal = 0;
 8010a26:	4a35      	ldr	r2, [pc, #212]	; (8010afc <GUI_ColorRend_Screen+0x100>)
 8010a28:	7013      	strb	r3, [r2, #0]
	Rotation_Screen_Rend_Old = Rotation_Screen_Rend;
 8010a2a:	7823      	ldrb	r3, [r4, #0]
 8010a2c:	702b      	strb	r3, [r5, #0]
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010a2e:	4d34      	ldr	r5, [pc, #208]	; (8010b00 <GUI_ColorRend_Screen+0x104>)
 8010a30:	782a      	ldrb	r2, [r5, #0]
 8010a32:	2a00      	cmp	r2, #0
 8010a34:	d03c      	beq.n	8010ab0 <GUI_ColorRend_Screen+0xb4>
 8010a36:	4b33      	ldr	r3, [pc, #204]	; (8010b04 <GUI_ColorRend_Screen+0x108>)
 8010a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a3c:	f7f0 f8e8 	bl	8000c10 <__aeabi_d2f>
 8010a40:	210d      	movs	r1, #13
 8010a42:	ee00 0a10 	vmov	s0, r0
 8010a46:	2055      	movs	r0, #85	; 0x55
 8010a48:	f002 fb36 	bl	80130b8 <GUI_Bar_Measure>
	Prev_Inf_Screen = Color_Rendition_Screen;
 8010a4c:	4b2e      	ldr	r3, [pc, #184]	; (8010b08 <GUI_ColorRend_Screen+0x10c>)
 8010a4e:	2206      	movs	r2, #6
 8010a50:	701a      	strb	r2, [r3, #0]
	if (Color_rend_Field&CRI_CQS){
 8010a52:	782b      	ldrb	r3, [r5, #0]
 8010a54:	07da      	lsls	r2, r3, #31
 8010a56:	d52d      	bpl.n	8010ab4 <GUI_ColorRend_Screen+0xb8>
		CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8010a58:	492c      	ldr	r1, [pc, #176]	; (8010b0c <GUI_ColorRend_Screen+0x110>)
 8010a5a:	4b2d      	ldr	r3, [pc, #180]	; (8010b10 <GUI_ColorRend_Screen+0x114>)
 8010a5c:	4a2d      	ldr	r2, [pc, #180]	; (8010b14 <GUI_ColorRend_Screen+0x118>)
 8010a5e:	f991 1000 	ldrsb.w	r1, [r1]
 8010a62:	f993 3000 	ldrsb.w	r3, [r3]
 8010a66:	f992 2000 	ldrsb.w	r2, [r2]
 8010a6a:	7820      	ldrb	r0, [r4, #0]
 8010a6c:	9100      	str	r1, [sp, #0]
 8010a6e:	492a      	ldr	r1, [pc, #168]	; (8010b18 <GUI_ColorRend_Screen+0x11c>)
 8010a70:	f7fd f9ba 	bl	800dde8 <CRI_Draw>
	if(Calc_ColorRend != Calc_ColorRend_old){
 8010a74:	4b29      	ldr	r3, [pc, #164]	; (8010b1c <GUI_ColorRend_Screen+0x120>)
 8010a76:	781a      	ldrb	r2, [r3, #0]
 8010a78:	4b29      	ldr	r3, [pc, #164]	; (8010b20 <GUI_ColorRend_Screen+0x124>)
 8010a7a:	7819      	ldrb	r1, [r3, #0]
 8010a7c:	4291      	cmp	r1, r2
 8010a7e:	d012      	beq.n	8010aa6 <GUI_ColorRend_Screen+0xaa>
		Calc_ColorRend_old = Calc_ColorRend;
 8010a80:	701a      	strb	r2, [r3, #0]
		if (Color_rend_Field&CRI_CQS){
 8010a82:	4b1f      	ldr	r3, [pc, #124]	; (8010b00 <GUI_ColorRend_Screen+0x104>)
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	07db      	lsls	r3, r3, #31
 8010a88:	d520      	bpl.n	8010acc <GUI_ColorRend_Screen+0xd0>
			CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8010a8a:	4920      	ldr	r1, [pc, #128]	; (8010b0c <GUI_ColorRend_Screen+0x110>)
 8010a8c:	4b20      	ldr	r3, [pc, #128]	; (8010b10 <GUI_ColorRend_Screen+0x114>)
 8010a8e:	4a21      	ldr	r2, [pc, #132]	; (8010b14 <GUI_ColorRend_Screen+0x118>)
 8010a90:	f991 1000 	ldrsb.w	r1, [r1]
 8010a94:	f993 3000 	ldrsb.w	r3, [r3]
 8010a98:	f992 2000 	ldrsb.w	r2, [r2]
 8010a9c:	7820      	ldrb	r0, [r4, #0]
 8010a9e:	9100      	str	r1, [sp, #0]
 8010aa0:	491d      	ldr	r1, [pc, #116]	; (8010b18 <GUI_ColorRend_Screen+0x11c>)
 8010aa2:	f7fd f9a1 	bl	800dde8 <CRI_Draw>
}
 8010aa6:	b003      	add	sp, #12
 8010aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GUI_SignalLevel();
 8010aac:	f7ff bb3a 	b.w	8010124 <GUI_SignalLevel>
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010ab0:	4b1c      	ldr	r3, [pc, #112]	; (8010b24 <GUI_ColorRend_Screen+0x128>)
 8010ab2:	e7c1      	b.n	8010a38 <GUI_ColorRend_Screen+0x3c>
		CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010ab4:	491c      	ldr	r1, [pc, #112]	; (8010b28 <GUI_ColorRend_Screen+0x12c>)
 8010ab6:	4b1d      	ldr	r3, [pc, #116]	; (8010b2c <GUI_ColorRend_Screen+0x130>)
 8010ab8:	4a1d      	ldr	r2, [pc, #116]	; (8010b30 <GUI_ColorRend_Screen+0x134>)
 8010aba:	7809      	ldrb	r1, [r1, #0]
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	7812      	ldrb	r2, [r2, #0]
 8010ac0:	7820      	ldrb	r0, [r4, #0]
 8010ac2:	9100      	str	r1, [sp, #0]
 8010ac4:	491b      	ldr	r1, [pc, #108]	; (8010b34 <GUI_ColorRend_Screen+0x138>)
 8010ac6:	f7fb f965 	bl	800bd94 <CQS_Draw>
 8010aca:	e7d3      	b.n	8010a74 <GUI_ColorRend_Screen+0x78>
			CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010acc:	4916      	ldr	r1, [pc, #88]	; (8010b28 <GUI_ColorRend_Screen+0x12c>)
 8010ace:	4b17      	ldr	r3, [pc, #92]	; (8010b2c <GUI_ColorRend_Screen+0x130>)
 8010ad0:	4a17      	ldr	r2, [pc, #92]	; (8010b30 <GUI_ColorRend_Screen+0x134>)
 8010ad2:	7809      	ldrb	r1, [r1, #0]
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	7812      	ldrb	r2, [r2, #0]
 8010ad8:	7820      	ldrb	r0, [r4, #0]
 8010ada:	9100      	str	r1, [sp, #0]
 8010adc:	4915      	ldr	r1, [pc, #84]	; (8010b34 <GUI_ColorRend_Screen+0x138>)
 8010ade:	f7fb f959 	bl	800bd94 <CQS_Draw>
 8010ae2:	e7e0      	b.n	8010aa6 <GUI_ColorRend_Screen+0xaa>
 8010ae4:	20000230 	.word	0x20000230
 8010ae8:	20090a68 	.word	0x20090a68
 8010aec:	200056f9 	.word	0x200056f9
 8010af0:	2000022a 	.word	0x2000022a
 8010af4:	200056f1 	.word	0x200056f1
 8010af8:	20005717 	.word	0x20005717
 8010afc:	20005716 	.word	0x20005716
 8010b00:	200056f0 	.word	0x200056f0
 8010b04:	20090970 	.word	0x20090970
 8010b08:	20090a65 	.word	0x20090a65
 8010b0c:	20004648 	.word	0x20004648
 8010b10:	2000464a 	.word	0x2000464a
 8010b14:	20004649 	.word	0x20004649
 8010b18:	2000464b 	.word	0x2000464b
 8010b1c:	200056ed 	.word	0x200056ed
 8010b20:	200056ee 	.word	0x200056ee
 8010b24:	200906a0 	.word	0x200906a0
 8010b28:	20003624 	.word	0x20003624
 8010b2c:	20003625 	.word	0x20003625
 8010b30:	20003623 	.word	0x20003623
 8010b34:	20003614 	.word	0x20003614

08010b38 <GUI_Display_Refresh>:

void GUI_Display_Refresh()
{
 8010b38:	b508      	push	{r3, lr}
	
	switch(GUI_screen_state){
 8010b3a:	4b2d      	ldr	r3, [pc, #180]	; (8010bf0 <GUI_Display_Refresh+0xb8>)
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	2b11      	cmp	r3, #17
 8010b42:	d80f      	bhi.n	8010b64 <GUI_Display_Refresh+0x2c>
 8010b44:	e8df f003 	tbb	[pc, r3]
 8010b48:	17130f09 	.word	0x17130f09
 8010b4c:	27231f1b 	.word	0x27231f1b
 8010b50:	37332f2b 	.word	0x37332f2b
 8010b54:	47433f3b 	.word	0x47433f3b
 8010b58:	4f4b      	.short	0x4f4b
		case Measure_Screen: GUI_Measure_Screen(); preGUI_screen_state = Measure_Screen; break;
 8010b5a:	f7ff fb45 	bl	80101e8 <GUI_Measure_Screen>
 8010b5e:	2201      	movs	r2, #1
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
					
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8010b60:	4b24      	ldr	r3, [pc, #144]	; (8010bf4 <GUI_Display_Refresh+0xbc>)
 8010b62:	701a      	strb	r2, [r3, #0]
 8010b64:	bd08      	pop	{r3, pc}
		case Measure2_Screen: GUI_Measure2_Screen(); preGUI_screen_state = Measure2_Screen; break;
 8010b66:	f7ff fb6d 	bl	8010244 <GUI_Measure2_Screen>
 8010b6a:	2202      	movs	r2, #2
 8010b6c:	e7f8      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case Measure3_Screen: GUI_Measure3_Screen(); preGUI_screen_state = Measure3_Screen; break;
 8010b6e:	f7ff fba1 	bl	80102b4 <GUI_Measure3_Screen>
 8010b72:	2203      	movs	r2, #3
 8010b74:	e7f4      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case Graph_Screen: GUI_Graph_Screen(); preGUI_screen_state = Graph_Screen; break;
 8010b76:	f7ff f99b 	bl	800feb0 <GUI_Graph_Screen>
 8010b7a:	2204      	movs	r2, #4
 8010b7c:	e7f0      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case Color_Screen: GUI_Color_Screen(); preGUI_screen_state = Color_Screen; break; 
 8010b7e:	f7ff fbcf 	bl	8010320 <GUI_Color_Screen>
 8010b82:	2205      	movs	r2, #5
 8010b84:	e7ec      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case Color_Rendition_Screen: GUI_ColorRend_Screen(); preGUI_screen_state = Color_Rendition_Screen; break;		
 8010b86:	f7ff ff39 	bl	80109fc <GUI_ColorRend_Screen>
 8010b8a:	2206      	movs	r2, #6
 8010b8c:	e7e8      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case DataSet1_Screen: GUI_DataSet1_Screen();  preGUI_screen_state = DataSet1_Screen; break;
 8010b8e:	f7fe fda1 	bl	800f6d4 <GUI_DataSet1_Screen>
 8010b92:	2207      	movs	r2, #7
 8010b94:	e7e4      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case DataSet2_Screen: GUI_DataSet2_Screen();  preGUI_screen_state = DataSet2_Screen; break;
 8010b96:	f7fe fe01 	bl	800f79c <GUI_DataSet2_Screen>
 8010b9a:	2208      	movs	r2, #8
 8010b9c:	e7e0      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case DataSet3_Screen: GUI_DataSet3_Screen();  preGUI_screen_state = DataSet3_Screen; break;
 8010b9e:	f7fe fed5 	bl	800f94c <GUI_DataSet3_Screen>
 8010ba2:	2209      	movs	r2, #9
 8010ba4:	e7dc      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case DataSet4_Screen: GUI_DataSet4_Screen();  preGUI_screen_state = DataSet4_Screen; break;
 8010ba6:	f7fe ff45 	bl	800fa34 <GUI_DataSet4_Screen>
 8010baa:	220a      	movs	r2, #10
 8010bac:	e7d8      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case DataSet5_Screen: GUI_DataSet5_Screen();  preGUI_screen_state = DataSet5_Screen; break;
 8010bae:	f7fe ffe3 	bl	800fb78 <GUI_DataSet5_Screen>
 8010bb2:	220b      	movs	r2, #11
 8010bb4:	e7d4      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case GraphSet1_Screen: GUI_GraphSet1_Screen(); preGUI_screen_state = GraphSet1_Screen; break;
 8010bb6:	f7ff f819 	bl	800fbec <GUI_GraphSet1_Screen>
 8010bba:	220c      	movs	r2, #12
 8010bbc:	e7d0      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case GraphSet2_Screen: GUI_GraphSet2_Screen(); preGUI_screen_state = GraphSet2_Screen; break;
 8010bbe:	f7ff f85d 	bl	800fc7c <GUI_GraphSet2_Screen>
 8010bc2:	220d      	movs	r2, #13
 8010bc4:	e7cc      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
 8010bc6:	f7ff f893 	bl	800fcf0 <GUI_ColorSet1_Screen>
 8010bca:	220e      	movs	r2, #14
 8010bcc:	e7c8      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
 8010bce:	f7ff f8d3 	bl	800fd78 <GUI_ColorSet2_Screen>
 8010bd2:	220f      	movs	r2, #15
 8010bd4:	e7c4      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
 8010bd6:	f7ff f90b 	bl	800fdf0 <GUI_ColorRendSet_Screen>
 8010bda:	2210      	movs	r2, #16
 8010bdc:	e7c0      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
 8010bde:	f7fe fc19 	bl	800f414 <GUI_Information_Screen>
 8010be2:	2211      	movs	r2, #17
 8010be4:	e7bc      	b.n	8010b60 <GUI_Display_Refresh+0x28>
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8010be6:	f7fe fc63 	bl	800f4b0 <GUI_SD_Write_Screen>
 8010bea:	2212      	movs	r2, #18
 8010bec:	e7b8      	b.n	8010b60 <GUI_Display_Refresh+0x28>
 8010bee:	bf00      	nop
 8010bf0:	200056f1 	.word	0x200056f1
 8010bf4:	2000022a 	.word	0x2000022a

08010bf8 <GUI_Touch_Processing>:
		default: break;
	}
}

void GUI_Touch_Processing()
{
 8010bf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
//	uint16_t Touch_x = 0, Touch_y = 0;
//	TS_Get_XY1(TS_I2C_ADDRESS, &temp_x, &temp_y);
	switch(GUI_screen_state){
 8010bfc:	4c9c      	ldr	r4, [pc, #624]	; (8010e70 <GUI_Touch_Processing+0x278>)
 8010bfe:	7823      	ldrb	r3, [r4, #0]
 8010c00:	3b01      	subs	r3, #1
 8010c02:	2b11      	cmp	r3, #17
 8010c04:	f201 82b4 	bhi.w	8012170 <GUI_Touch_Processing+0x1578>
 8010c08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010c0c:	00390012 	.word	0x00390012
 8010c10:	00b90070 	.word	0x00b90070
 8010c14:	014800f8 	.word	0x014800f8
 8010c18:	03110202 	.word	0x03110202
 8010c1c:	04bd03db 	.word	0x04bd03db
 8010c20:	070a06a5 	.word	0x070a06a5
 8010c24:	080f07ac 	.word	0x080f07ac
 8010c28:	099d08e6 	.word	0x099d08e6
 8010c2c:	00960a64 	.word	0x00960a64
		
		case Measure_Screen:
			preGUI_screen_state = GUI_screen_state;
 8010c30:	4b90      	ldr	r3, [pc, #576]	; (8010e74 <GUI_Touch_Processing+0x27c>)
 8010c32:	2201      	movs	r2, #1
 8010c34:	701a      	strb	r2, [r3, #0]
		
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010c36:	4b90      	ldr	r3, [pc, #576]	; (8010e78 <GUI_Touch_Processing+0x280>)
 8010c38:	881a      	ldrh	r2, [r3, #0]
 8010c3a:	4b90      	ldr	r3, [pc, #576]	; (8010e7c <GUI_Touch_Processing+0x284>)
 8010c3c:	881b      	ldrh	r3, [r3, #0]
 8010c3e:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	2b36      	cmp	r3, #54	; 0x36
 8010c46:	f102 31ff 	add.w	r1, r2, #4294967295
 8010c4a:	bf8c      	ite	hi
 8010c4c:	2300      	movhi	r3, #0
 8010c4e:	2301      	movls	r3, #1
 8010c50:	2936      	cmp	r1, #54	; 0x36
 8010c52:	d802      	bhi.n	8010c5a <GUI_Touch_Processing+0x62>
 8010c54:	b10b      	cbz	r3, 8010c5a <GUI_Touch_Processing+0x62>
				{	
					GUI_screen_state = DataSet1_Screen;
 8010c56:	2107      	movs	r1, #7
 8010c58:	7021      	strb	r1, [r4, #0]
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //down
 8010c5a:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010c5e:	2936      	cmp	r1, #54	; 0x36
 8010c60:	d860      	bhi.n	8010d24 <GUI_Touch_Processing+0x12c>
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d05e      	beq.n	8010d24 <GUI_Touch_Processing+0x12c>
				{	
					GUI_screen_state = (screen_count > 0) ? Measure2_Screen : Measure_Screen; 
 8010c66:	4b86      	ldr	r3, [pc, #536]	; (8010e80 <GUI_Touch_Processing+0x288>)
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	bf0c      	ite	eq
 8010c6e:	2001      	moveq	r0, #1
 8010c70:	2002      	movne	r0, #2
				{	
					GUI_screen_state = DataSet1_Screen;
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
				{	
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 8010c72:	7020      	strb	r0, [r4, #0]

		break;
				
		default: preGUI_screen_state = Measure_Screen;
			}
}
 8010c74:	b002      	add	sp, #8
 8010c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					WriteFLASH_Screen(GUI_screen_state);
 8010c7a:	f008 becd 	b.w	8019a18 <WriteFLASH_Screen>
			preGUI_screen_state = GUI_screen_state;
 8010c7e:	4b7d      	ldr	r3, [pc, #500]	; (8010e74 <GUI_Touch_Processing+0x27c>)
 8010c80:	2202      	movs	r2, #2
 8010c82:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010c84:	4b7c      	ldr	r3, [pc, #496]	; (8010e78 <GUI_Touch_Processing+0x280>)
 8010c86:	881a      	ldrh	r2, [r3, #0]
 8010c88:	4b7c      	ldr	r3, [pc, #496]	; (8010e7c <GUI_Touch_Processing+0x284>)
 8010c8a:	881b      	ldrh	r3, [r3, #0]
 8010c8c:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	2b36      	cmp	r3, #54	; 0x36
 8010c94:	f102 31ff 	add.w	r1, r2, #4294967295
 8010c98:	bf8c      	ite	hi
 8010c9a:	2300      	movhi	r3, #0
 8010c9c:	2301      	movls	r3, #1
 8010c9e:	2936      	cmp	r1, #54	; 0x36
 8010ca0:	d802      	bhi.n	8010ca8 <GUI_Touch_Processing+0xb0>
 8010ca2:	b10b      	cbz	r3, 8010ca8 <GUI_Touch_Processing+0xb0>
					GUI_screen_state = DataSet1_Screen;
 8010ca4:	2107      	movs	r1, #7
 8010ca6:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010ca8:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010cac:	2936      	cmp	r1, #54	; 0x36
 8010cae:	d807      	bhi.n	8010cc0 <GUI_Touch_Processing+0xc8>
 8010cb0:	b133      	cbz	r3, 8010cc0 <GUI_Touch_Processing+0xc8>
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 8010cb2:	4b73      	ldr	r3, [pc, #460]	; (8010e80 <GUI_Touch_Processing+0x288>)
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	2b02      	cmp	r3, #2
 8010cb8:	bf34      	ite	cc
 8010cba:	2001      	movcc	r0, #1
 8010cbc:	2003      	movcs	r0, #3
 8010cbe:	e7d8      	b.n	8010c72 <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8010cc0:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010cc4:	2936      	cmp	r1, #54	; 0x36
 8010cc6:	d800      	bhi.n	8010cca <GUI_Touch_Processing+0xd2>
 8010cc8:	bb8b      	cbnz	r3, 8010d2e <GUI_Touch_Processing+0x136>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8010cca:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8010cce:	2936      	cmp	r1, #54	; 0x36
 8010cd0:	d801      	bhi.n	8010cd6 <GUI_Touch_Processing+0xde>
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d138      	bne.n	8010d48 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 8010cd6:	3a6d      	subs	r2, #109	; 0x6d
 8010cd8:	2a36      	cmp	r2, #54	; 0x36
 8010cda:	d82d      	bhi.n	8010d38 <GUI_Touch_Processing+0x140>
 8010cdc:	b363      	cbz	r3, 8010d38 <GUI_Touch_Processing+0x140>
						pause = !pause;
 8010cde:	4a69      	ldr	r2, [pc, #420]	; (8010e84 <GUI_Touch_Processing+0x28c>)
 8010ce0:	7813      	ldrb	r3, [r2, #0]
 8010ce2:	fab3 f383 	clz	r3, r3
 8010ce6:	095b      	lsrs	r3, r3, #5
 8010ce8:	7013      	strb	r3, [r2, #0]
 8010cea:	e025      	b.n	8010d38 <GUI_Touch_Processing+0x140>
			preGUI_screen_state = GUI_screen_state;
 8010cec:	4b61      	ldr	r3, [pc, #388]	; (8010e74 <GUI_Touch_Processing+0x27c>)
 8010cee:	2203      	movs	r2, #3
 8010cf0:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010cf2:	4b61      	ldr	r3, [pc, #388]	; (8010e78 <GUI_Touch_Processing+0x280>)
 8010cf4:	881a      	ldrh	r2, [r3, #0]
 8010cf6:	4b61      	ldr	r3, [pc, #388]	; (8010e7c <GUI_Touch_Processing+0x284>)
 8010cf8:	881b      	ldrh	r3, [r3, #0]
 8010cfa:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010cfe:	b29b      	uxth	r3, r3
 8010d00:	2b36      	cmp	r3, #54	; 0x36
 8010d02:	f102 31ff 	add.w	r1, r2, #4294967295
 8010d06:	bf8c      	ite	hi
 8010d08:	2300      	movhi	r3, #0
 8010d0a:	2301      	movls	r3, #1
 8010d0c:	2936      	cmp	r1, #54	; 0x36
 8010d0e:	d802      	bhi.n	8010d16 <GUI_Touch_Processing+0x11e>
 8010d10:	b10b      	cbz	r3, 8010d16 <GUI_Touch_Processing+0x11e>
					GUI_screen_state = DataSet1_Screen;
 8010d12:	2107      	movs	r1, #7
 8010d14:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Down
 8010d16:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010d1a:	2936      	cmp	r1, #54	; 0x36
 8010d1c:	d802      	bhi.n	8010d24 <GUI_Touch_Processing+0x12c>
 8010d1e:	b10b      	cbz	r3, 8010d24 <GUI_Touch_Processing+0x12c>
					GUI_screen_state = Measure_Screen;
 8010d20:	2001      	movs	r0, #1
 8010d22:	e7a6      	b.n	8010c72 <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8010d24:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010d28:	2936      	cmp	r1, #54	; 0x36
 8010d2a:	d808      	bhi.n	8010d3e <GUI_Touch_Processing+0x146>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8010d2c:	b13b      	cbz	r3, 8010d3e <GUI_Touch_Processing+0x146>
					WriteFLASH_Screen(Graph_Screen);
 8010d2e:	2004      	movs	r0, #4
 8010d30:	f008 fe72 	bl	8019a18 <WriteFLASH_Screen>
					GUI_screen_state =  Graph_Screen;
 8010d34:	2304      	movs	r3, #4
 8010d36:	7023      	strb	r3, [r4, #0]
}
 8010d38:	b002      	add	sp, #8
 8010d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8010d3e:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8010d42:	2936      	cmp	r1, #54	; 0x36
 8010d44:	d807      	bhi.n	8010d56 <GUI_Touch_Processing+0x15e>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8010d46:	b133      	cbz	r3, 8010d56 <GUI_Touch_Processing+0x15e>
					if(!SD_Detect){if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}}
 8010d48:	4b4f      	ldr	r3, [pc, #316]	; (8010e88 <GUI_Touch_Processing+0x290>)
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d1f3      	bne.n	8010d38 <GUI_Touch_Processing+0x140>
 8010d50:	2312      	movs	r3, #18
 8010d52:	7023      	strb	r3, [r4, #0]
 8010d54:	e7f0      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 8010d56:	3a6d      	subs	r2, #109	; 0x6d
 8010d58:	2a36      	cmp	r2, #54	; 0x36
 8010d5a:	d8ed      	bhi.n	8010d38 <GUI_Touch_Processing+0x140>
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d0eb      	beq.n	8010d38 <GUI_Touch_Processing+0x140>
						pause = !pause;
 8010d60:	4a48      	ldr	r2, [pc, #288]	; (8010e84 <GUI_Touch_Processing+0x28c>)
						GUI_Bar_Measure(85, 13, 0.0);
 8010d62:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8010e8c <GUI_Touch_Processing+0x294>
						pause = !pause;
 8010d66:	7813      	ldrb	r3, [r2, #0]
 8010d68:	fab3 f383 	clz	r3, r3
 8010d6c:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 8010d6e:	210d      	movs	r1, #13
 8010d70:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 8010d72:	7013      	strb	r3, [r2, #0]
}
 8010d74:	b002      	add	sp, #8
 8010d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Bar_Measure(85, 13, 0.0);
 8010d7a:	f002 b99d 	b.w	80130b8 <GUI_Bar_Measure>
			preGUI_screen_state = GUI_screen_state;
 8010d7e:	4b3d      	ldr	r3, [pc, #244]	; (8010e74 <GUI_Touch_Processing+0x27c>)
 8010d80:	2204      	movs	r2, #4
 8010d82:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8010d84:	4b3c      	ldr	r3, [pc, #240]	; (8010e78 <GUI_Touch_Processing+0x280>)
 8010d86:	881a      	ldrh	r2, [r3, #0]
 8010d88:	4b3c      	ldr	r3, [pc, #240]	; (8010e7c <GUI_Touch_Processing+0x284>)
 8010d8a:	881b      	ldrh	r3, [r3, #0]
 8010d8c:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	2b36      	cmp	r3, #54	; 0x36
 8010d94:	f102 31ff 	add.w	r1, r2, #4294967295
 8010d98:	bf8c      	ite	hi
 8010d9a:	2300      	movhi	r3, #0
 8010d9c:	2301      	movls	r3, #1
 8010d9e:	2936      	cmp	r1, #54	; 0x36
 8010da0:	d802      	bhi.n	8010da8 <GUI_Touch_Processing+0x1b0>
 8010da2:	b10b      	cbz	r3, 8010da8 <GUI_Touch_Processing+0x1b0>
					GUI_screen_state = GraphSet1_Screen;
 8010da4:	210c      	movs	r1, #12
 8010da6:	7021      	strb	r1, [r4, #0]
			if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 8010da8:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010dac:	2936      	cmp	r1, #54	; 0x36
 8010dae:	d808      	bhi.n	8010dc2 <GUI_Touch_Processing+0x1ca>
 8010db0:	b13b      	cbz	r3, 8010dc2 <GUI_Touch_Processing+0x1ca>
					if(Rotation_Screen_Spectral < 0x02) {Rotation_Screen_Spectral++;} else{Rotation_Screen_Spectral= 0x00;}
 8010db2:	4a37      	ldr	r2, [pc, #220]	; (8010e90 <GUI_Touch_Processing+0x298>)
 8010db4:	7813      	ldrb	r3, [r2, #0]
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	bf94      	ite	ls
 8010dba:	3301      	addls	r3, #1
 8010dbc:	2300      	movhi	r3, #0
 8010dbe:	7013      	strb	r3, [r2, #0]
 8010dc0:	e7ba      	b.n	8010d38 <GUI_Touch_Processing+0x140>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8010dc2:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010dc6:	2936      	cmp	r1, #54	; 0x36
 8010dc8:	d806      	bhi.n	8010dd8 <GUI_Touch_Processing+0x1e0>
 8010dca:	b12b      	cbz	r3, 8010dd8 <GUI_Touch_Processing+0x1e0>
					WriteFLASH_Screen(Color_Screen);
 8010dcc:	2005      	movs	r0, #5
 8010dce:	f008 fe23 	bl	8019a18 <WriteFLASH_Screen>
					GUI_screen_state = Color_Screen;
 8010dd2:	2305      	movs	r3, #5
 8010dd4:	7023      	strb	r3, [r4, #0]
 8010dd6:	e7af      	b.n	8010d38 <GUI_Touch_Processing+0x140>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8010dd8:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8010ddc:	2936      	cmp	r1, #54	; 0x36
 8010dde:	d801      	bhi.n	8010de4 <GUI_Touch_Processing+0x1ec>
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1b1      	bne.n	8010d48 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8010de4:	3a6d      	subs	r2, #109	; 0x6d
 8010de6:	2a36      	cmp	r2, #54	; 0x36
 8010de8:	d8a6      	bhi.n	8010d38 <GUI_Touch_Processing+0x140>
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d0a4      	beq.n	8010d38 <GUI_Touch_Processing+0x140>
					pause = !pause;
 8010dee:	4a25      	ldr	r2, [pc, #148]	; (8010e84 <GUI_Touch_Processing+0x28c>)
 8010df0:	7813      	ldrb	r3, [r2, #0]
 8010df2:	fab3 f383 	clz	r3, r3
 8010df6:	095b      	lsrs	r3, r3, #5
 8010df8:	7013      	strb	r3, [r2, #0]
 8010dfa:	e79d      	b.n	8010d38 <GUI_Touch_Processing+0x140>
			preGUI_screen_state = GUI_screen_state;
 8010dfc:	4b1d      	ldr	r3, [pc, #116]	; (8010e74 <GUI_Touch_Processing+0x27c>)
 8010dfe:	2205      	movs	r2, #5
 8010e00:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8010e02:	4b1d      	ldr	r3, [pc, #116]	; (8010e78 <GUI_Touch_Processing+0x280>)
 8010e04:	881a      	ldrh	r2, [r3, #0]
 8010e06:	4b1d      	ldr	r3, [pc, #116]	; (8010e7c <GUI_Touch_Processing+0x284>)
 8010e08:	881b      	ldrh	r3, [r3, #0]
 8010e0a:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	2b36      	cmp	r3, #54	; 0x36
 8010e12:	f102 31ff 	add.w	r1, r2, #4294967295
 8010e16:	bf8c      	ite	hi
 8010e18:	2300      	movhi	r3, #0
 8010e1a:	2301      	movls	r3, #1
 8010e1c:	2936      	cmp	r1, #54	; 0x36
 8010e1e:	d807      	bhi.n	8010e30 <GUI_Touch_Processing+0x238>
 8010e20:	b133      	cbz	r3, 8010e30 <GUI_Touch_Processing+0x238>
					preColor_Field = Color_Field;
 8010e22:	4b1c      	ldr	r3, [pc, #112]	; (8010e94 <GUI_Touch_Processing+0x29c>)
 8010e24:	781a      	ldrb	r2, [r3, #0]
 8010e26:	4b1c      	ldr	r3, [pc, #112]	; (8010e98 <GUI_Touch_Processing+0x2a0>)
 8010e28:	701a      	strb	r2, [r3, #0]
					GUI_screen_state = ColorSet1_Screen;
 8010e2a:	230e      	movs	r3, #14
 8010e2c:	7023      	strb	r3, [r4, #0]
 8010e2e:	e783      	b.n	8010d38 <GUI_Touch_Processing+0x140>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8010e30:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010e34:	2936      	cmp	r1, #54	; 0x36
 8010e36:	d806      	bhi.n	8010e46 <GUI_Touch_Processing+0x24e>
 8010e38:	b12b      	cbz	r3, 8010e46 <GUI_Touch_Processing+0x24e>
					WriteFLASH_Screen(Color_Rendition_Screen);
 8010e3a:	2006      	movs	r0, #6
 8010e3c:	f008 fdec 	bl	8019a18 <WriteFLASH_Screen>
					GUI_screen_state = Color_Rendition_Screen;
 8010e40:	2306      	movs	r3, #6
 8010e42:	7023      	strb	r3, [r4, #0]
 8010e44:	e778      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8010e46:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 8010e4a:	2936      	cmp	r1, #54	; 0x36
 8010e4c:	d807      	bhi.n	8010e5e <GUI_Touch_Processing+0x266>
 8010e4e:	b133      	cbz	r3, 8010e5e <GUI_Touch_Processing+0x266>
					pause = !pause;
 8010e50:	4a0c      	ldr	r2, [pc, #48]	; (8010e84 <GUI_Touch_Processing+0x28c>)
 8010e52:	7813      	ldrb	r3, [r2, #0]
 8010e54:	fab3 f383 	clz	r3, r3
 8010e58:	095b      	lsrs	r3, r3, #5
 8010e5a:	7013      	strb	r3, [r2, #0]
 8010e5c:	e76c      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8010e5e:	3a37      	subs	r2, #55	; 0x37
 8010e60:	2a36      	cmp	r2, #54	; 0x36
 8010e62:	f63f af69 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f47f af6e 	bne.w	8010d48 <GUI_Touch_Processing+0x150>
 8010e6c:	e764      	b.n	8010d38 <GUI_Touch_Processing+0x140>
 8010e6e:	bf00      	nop
 8010e70:	200056f1 	.word	0x200056f1
 8010e74:	2000022a 	.word	0x2000022a
 8010e78:	20054932 	.word	0x20054932
 8010e7c:	20054934 	.word	0x20054934
 8010e80:	2000571b 	.word	0x2000571b
 8010e84:	20005718 	.word	0x20005718
 8010e88:	20095c10 	.word	0x20095c10
 8010e8c:	00000000 	.word	0x00000000
 8010e90:	200056fa 	.word	0x200056fa
 8010e94:	200056ef 	.word	0x200056ef
 8010e98:	20005719 	.word	0x20005719
			preGUI_screen_state = GUI_screen_state;
 8010e9c:	4ba9      	ldr	r3, [pc, #676]	; (8011144 <GUI_Touch_Processing+0x54c>)
 8010e9e:	2206      	movs	r2, #6
 8010ea0:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8010ea2:	4ba9      	ldr	r3, [pc, #676]	; (8011148 <GUI_Touch_Processing+0x550>)
 8010ea4:	881a      	ldrh	r2, [r3, #0]
 8010ea6:	4ba9      	ldr	r3, [pc, #676]	; (801114c <GUI_Touch_Processing+0x554>)
 8010ea8:	881b      	ldrh	r3, [r3, #0]
 8010eaa:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	2b36      	cmp	r3, #54	; 0x36
 8010eb2:	f102 31ff 	add.w	r1, r2, #4294967295
 8010eb6:	bf8c      	ite	hi
 8010eb8:	2300      	movhi	r3, #0
 8010eba:	2301      	movls	r3, #1
 8010ebc:	2936      	cmp	r1, #54	; 0x36
 8010ebe:	d803      	bhi.n	8010ec8 <GUI_Touch_Processing+0x2d0>
 8010ec0:	b113      	cbz	r3, 8010ec8 <GUI_Touch_Processing+0x2d0>
					GUI_screen_state = ColorRendSet_Screen;
 8010ec2:	2310      	movs	r3, #16
 8010ec4:	7023      	strb	r3, [r4, #0]
 8010ec6:	e737      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8010ec8:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010ecc:	2936      	cmp	r1, #54	; 0x36
 8010ece:	d806      	bhi.n	8010ede <GUI_Touch_Processing+0x2e6>
 8010ed0:	b12b      	cbz	r3, 8010ede <GUI_Touch_Processing+0x2e6>
					WriteFLASH_Screen(Measure_Screen);
 8010ed2:	2001      	movs	r0, #1
 8010ed4:	f008 fda0 	bl	8019a18 <WriteFLASH_Screen>
					GUI_screen_state = Measure_Screen;
 8010ed8:	2301      	movs	r3, #1
 8010eda:	7023      	strb	r3, [r4, #0]
 8010edc:	e72c      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 8010ede:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010ee2:	2936      	cmp	r1, #54	; 0x36
 8010ee4:	d808      	bhi.n	8010ef8 <GUI_Touch_Processing+0x300>
 8010ee6:	b13b      	cbz	r3, 8010ef8 <GUI_Touch_Processing+0x300>
					if(Rotation_Screen_Rend < 0x02) {Rotation_Screen_Rend++;} else{Rotation_Screen_Rend = 0x00;}
 8010ee8:	4a99      	ldr	r2, [pc, #612]	; (8011150 <GUI_Touch_Processing+0x558>)
 8010eea:	7813      	ldrb	r3, [r2, #0]
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	bf94      	ite	ls
 8010ef0:	3301      	addls	r3, #1
 8010ef2:	2300      	movhi	r3, #0
 8010ef4:	7013      	strb	r3, [r2, #0]
 8010ef6:	e71f      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8010ef8:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 8010efc:	2936      	cmp	r1, #54	; 0x36
 8010efe:	d877      	bhi.n	8010ff0 <GUI_Touch_Processing+0x3f8>
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d075      	beq.n	8010ff0 <GUI_Touch_Processing+0x3f8>
					if (Color_rend_Field & CRI_CQS){
 8010f04:	4b93      	ldr	r3, [pc, #588]	; (8011154 <GUI_Touch_Processing+0x55c>)
 8010f06:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 80111d4 <GUI_Touch_Processing+0x5dc>
 8010f0a:	781c      	ldrb	r4, [r3, #0]
 8010f0c:	4e92      	ldr	r6, [pc, #584]	; (8011158 <GUI_Touch_Processing+0x560>)
 8010f0e:	4f93      	ldr	r7, [pc, #588]	; (801115c <GUI_Touch_Processing+0x564>)
 8010f10:	4d93      	ldr	r5, [pc, #588]	; (8011160 <GUI_Touch_Processing+0x568>)
 8010f12:	f014 0401 	ands.w	r4, r4, #1
 8010f16:	d03f      	beq.n	8010f98 <GUI_Touch_Processing+0x3a0>
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010f18:	4892      	ldr	r0, [pc, #584]	; (8011164 <GUI_Touch_Processing+0x56c>)
						CRICQS_done = 0x00;
 8010f1a:	2400      	movs	r4, #0
 8010f1c:	f888 4000 	strb.w	r4, [r8]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010f20:	f008 fc9a 	bl	8019858 <Rabs_find_MAX_all>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8010f24:	4b90      	ldr	r3, [pc, #576]	; (8011168 <GUI_Touch_Processing+0x570>)
 8010f26:	4a91      	ldr	r2, [pc, #580]	; (801116c <GUI_Touch_Processing+0x574>)
 8010f28:	4991      	ldr	r1, [pc, #580]	; (8011170 <GUI_Touch_Processing+0x578>)
 8010f2a:	488e      	ldr	r0, [pc, #568]	; (8011164 <GUI_Touch_Processing+0x56c>)
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010f2c:	ed86 0a00 	vstr	s0, [r6]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8010f30:	f7fd f92c 	bl	800e18c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8010f34:	488f      	ldr	r0, [pc, #572]	; (8011174 <GUI_Touch_Processing+0x57c>)
 8010f36:	f7fd f995 	bl	800e264 <Calculate_xy1931>
						Calculate_uv(colorimetry_xy1931);
 8010f3a:	488f      	ldr	r0, [pc, #572]	; (8011178 <GUI_Touch_Processing+0x580>)
 8010f3c:	f7fd f9b0 	bl	800e2a0 <Calculate_uv>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8010f40:	4888      	ldr	r0, [pc, #544]	; (8011164 <GUI_Touch_Processing+0x56c>)
 8010f42:	7839      	ldrb	r1, [r7, #0]
 8010f44:	f7fd f9f4 	bl	800e330 <Calculate_Tc>
 8010f48:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8010f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8010f50:	edcd 7a01 	vstr	s15, [sp, #4]
 8010f54:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8010f58:	8028      	strh	r0, [r5, #0]
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8010f5a:	4298      	cmp	r0, r3
 8010f5c:	d10b      	bne.n	8010f76 <GUI_Touch_Processing+0x37e>
 8010f5e:	4b87      	ldr	r3, [pc, #540]	; (801117c <GUI_Touch_Processing+0x584>)
 8010f60:	4887      	ldr	r0, [pc, #540]	; (8011180 <GUI_Touch_Processing+0x588>)
 8010f62:	701c      	strb	r4, [r3, #0]
 8010f64:	4b87      	ldr	r3, [pc, #540]	; (8011184 <GUI_Touch_Processing+0x58c>)
 8010f66:	701c      	strb	r4, [r3, #0]
 8010f68:	4b87      	ldr	r3, [pc, #540]	; (8011188 <GUI_Touch_Processing+0x590>)
 8010f6a:	220e      	movs	r2, #14
 8010f6c:	701c      	strb	r4, [r3, #0]
 8010f6e:	4621      	mov	r1, r4
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8010f70:	f00e fd41 	bl	801f9f6 <memset>
 8010f74:	e002      	b.n	8010f7c <GUI_Touch_Processing+0x384>
						else	{CRI_func(Tc_Measure, Line_Rabs_buff);}
 8010f76:	497b      	ldr	r1, [pc, #492]	; (8011164 <GUI_Touch_Processing+0x56c>)
 8010f78:	f7fb f826 	bl	800bfc8 <CRI_func>
					Calc_ColorRend = !Calc_ColorRend;
 8010f7c:	4a83      	ldr	r2, [pc, #524]	; (801118c <GUI_Touch_Processing+0x594>)
						CRICQS_done = 0x01;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	f888 3000 	strb.w	r3, [r8]
					Calc_ColorRend = !Calc_ColorRend;
 8010f84:	7813      	ldrb	r3, [r2, #0]
 8010f86:	fab3 f383 	clz	r3, r3
 8010f8a:	095b      	lsrs	r3, r3, #5
 8010f8c:	7013      	strb	r3, [r2, #0]
}
 8010f8e:	b002      	add	sp, #8
 8010f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Display_Refresh();
 8010f94:	f7ff bdd0 	b.w	8010b38 <GUI_Display_Refresh>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8010f98:	4b73      	ldr	r3, [pc, #460]	; (8011168 <GUI_Touch_Processing+0x570>)
 8010f9a:	4a74      	ldr	r2, [pc, #464]	; (801116c <GUI_Touch_Processing+0x574>)
 8010f9c:	4974      	ldr	r1, [pc, #464]	; (8011170 <GUI_Touch_Processing+0x578>)
 8010f9e:	4871      	ldr	r0, [pc, #452]	; (8011164 <GUI_Touch_Processing+0x56c>)
						CRICQS_done = 0x00;
 8010fa0:	f888 4000 	strb.w	r4, [r8]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8010fa4:	f7fd f8f2 	bl	800e18c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8010fa8:	4872      	ldr	r0, [pc, #456]	; (8011174 <GUI_Touch_Processing+0x57c>)
 8010faa:	f7fd f95b 	bl	800e264 <Calculate_xy1931>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8010fae:	7839      	ldrb	r1, [r7, #0]
 8010fb0:	486c      	ldr	r0, [pc, #432]	; (8011164 <GUI_Touch_Processing+0x56c>)
 8010fb2:	f7fd f9bd 	bl	800e330 <Calculate_Tc>
 8010fb6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010fba:	486a      	ldr	r0, [pc, #424]	; (8011164 <GUI_Touch_Processing+0x56c>)
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8010fbc:	ee17 3a90 	vmov	r3, s15
 8010fc0:	802b      	strh	r3, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010fc2:	f008 fc49 	bl	8019858 <Rabs_find_MAX_all>
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8010fc6:	8828      	ldrh	r0, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8010fc8:	ed86 0a00 	vstr	s0, [r6]
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8010fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fd0:	4298      	cmp	r0, r3
 8010fd2:	d109      	bne.n	8010fe8 <GUI_Touch_Processing+0x3f0>
 8010fd4:	4b6e      	ldr	r3, [pc, #440]	; (8011190 <GUI_Touch_Processing+0x598>)
 8010fd6:	486f      	ldr	r0, [pc, #444]	; (8011194 <GUI_Touch_Processing+0x59c>)
 8010fd8:	701c      	strb	r4, [r3, #0]
 8010fda:	4b6f      	ldr	r3, [pc, #444]	; (8011198 <GUI_Touch_Processing+0x5a0>)
 8010fdc:	701c      	strb	r4, [r3, #0]
 8010fde:	4b6f      	ldr	r3, [pc, #444]	; (801119c <GUI_Touch_Processing+0x5a4>)
 8010fe0:	220f      	movs	r2, #15
 8010fe2:	701c      	strb	r4, [r3, #0]
 8010fe4:	4621      	mov	r1, r4
 8010fe6:	e7c3      	b.n	8010f70 <GUI_Touch_Processing+0x378>
						else	{cqs_func(Tc_Measure, Line_Rabs_buff);}
 8010fe8:	495e      	ldr	r1, [pc, #376]	; (8011164 <GUI_Touch_Processing+0x56c>)
 8010fea:	f7f8 fe81 	bl	8009cf0 <cqs_func>
 8010fee:	e7c5      	b.n	8010f7c <GUI_Touch_Processing+0x384>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8010ff0:	3a37      	subs	r2, #55	; 0x37
 8010ff2:	2a36      	cmp	r2, #54	; 0x36
 8010ff4:	f63f aea0 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	f43f ae9d 	beq.w	8010d38 <GUI_Touch_Processing+0x140>
						if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}
 8010ffe:	4b68      	ldr	r3, [pc, #416]	; (80111a0 <GUI_Touch_Processing+0x5a8>)
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	b90b      	cbnz	r3, 8011008 <GUI_Touch_Processing+0x410>
 8011004:	2312      	movs	r3, #18
 8011006:	7023      	strb	r3, [r4, #0]
						pause = 0;
 8011008:	4b66      	ldr	r3, [pc, #408]	; (80111a4 <GUI_Touch_Processing+0x5ac>)
 801100a:	2200      	movs	r2, #0
 801100c:	701a      	strb	r2, [r3, #0]
 801100e:	e693      	b.n	8010d38 <GUI_Touch_Processing+0x140>
			preGUI_screen_state = GUI_screen_state;
 8011010:	4b4c      	ldr	r3, [pc, #304]	; (8011144 <GUI_Touch_Processing+0x54c>)
 8011012:	2207      	movs	r2, #7
 8011014:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Down
 8011016:	4a4d      	ldr	r2, [pc, #308]	; (801114c <GUI_Touch_Processing+0x554>)
 8011018:	4b4b      	ldr	r3, [pc, #300]	; (8011148 <GUI_Touch_Processing+0x550>)
 801101a:	8812      	ldrh	r2, [r2, #0]
 801101c:	881b      	ldrh	r3, [r3, #0]
 801101e:	f5a2 70d5 	sub.w	r0, r2, #426	; 0x1aa
 8011022:	2836      	cmp	r0, #54	; 0x36
 8011024:	f1a3 01a3 	sub.w	r1, r3, #163	; 0xa3
 8011028:	bf8c      	ite	hi
 801102a:	2000      	movhi	r0, #0
 801102c:	2001      	movls	r0, #1
 801102e:	2936      	cmp	r1, #54	; 0x36
 8011030:	d803      	bhi.n	801103a <GUI_Touch_Processing+0x442>
 8011032:	b110      	cbz	r0, 801103a <GUI_Touch_Processing+0x442>
					GUI_screen_state = DataSet2_Screen;
 8011034:	2308      	movs	r3, #8
 8011036:	7023      	strb	r3, [r4, #0]
 8011038:	e67e      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=202 & Touch_y <=(202+54) ) //Mode_EL
 801103a:	f1a3 01b6 	sub.w	r1, r3, #182	; 0xb6
 801103e:	2936      	cmp	r1, #54	; 0x36
 8011040:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 8011044:	bf8c      	ite	hi
 8011046:	2100      	movhi	r1, #0
 8011048:	2101      	movls	r1, #1
 801104a:	2d36      	cmp	r5, #54	; 0x36
 801104c:	d827      	bhi.n	801109e <GUI_Touch_Processing+0x4a6>
 801104e:	b331      	cbz	r1, 801109e <GUI_Touch_Processing+0x4a6>
					Mode_EL = !Mode_EL;
 8011050:	4c55      	ldr	r4, [pc, #340]	; (80111a8 <GUI_Touch_Processing+0x5b0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011052:	4b56      	ldr	r3, [pc, #344]	; (80111ac <GUI_Touch_Processing+0x5b4>)
					Mode_EL = !Mode_EL;
 8011054:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011056:	4856      	ldr	r0, [pc, #344]	; (80111b0 <GUI_Touch_Processing+0x5b8>)
					Mode_EL = !Mode_EL;
 8011058:	2a00      	cmp	r2, #0
 801105a:	bf0c      	ite	eq
 801105c:	2201      	moveq	r2, #1
 801105e:	2200      	movne	r2, #0
 8011060:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011062:	bf18      	it	ne
 8011064:	4618      	movne	r0, r3
 8011066:	4a53      	ldr	r2, [pc, #332]	; (80111b4 <GUI_Touch_Processing+0x5bc>)
 8011068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801106c:	f7fd fe14 	bl	800ec98 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011070:	7822      	ldrb	r2, [r4, #0]
 8011072:	4b51      	ldr	r3, [pc, #324]	; (80111b8 <GUI_Touch_Processing+0x5c0>)
 8011074:	2a00      	cmp	r2, #0
 8011076:	f040 87c5 	bne.w	8012004 <GUI_Touch_Processing+0x140c>
 801107a:	4a50      	ldr	r2, [pc, #320]	; (80111bc <GUI_Touch_Processing+0x5c4>)
 801107c:	edd2 0a00 	vldr	s1, [r2]
 8011080:	ed93 0a00 	vldr	s0, [r3]
 8011084:	f008 fb2c 	bl	80196e0 <Rabs_calc_Factor2_Settings_change>
 8011088:	4b4d      	ldr	r3, [pc, #308]	; (80111c0 <GUI_Touch_Processing+0x5c8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801108a:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 801108c:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8011090:	21ca      	movs	r1, #202	; 0xca
 8011092:	20b6      	movs	r0, #182	; 0xb6
}
 8011094:	b002      	add	sp, #8
 8011096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801109a:	f001 beb9 	b.w	8012e10 <GUI_Switch_ButtonActive>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=268 & Touch_y <=(268+54) ) //Bluetooth
 801109e:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 80110a2:	2d36      	cmp	r5, #54	; 0x36
 80110a4:	d810      	bhi.n	80110c8 <GUI_Touch_Processing+0x4d0>
 80110a6:	b179      	cbz	r1, 80110c8 <GUI_Touch_Processing+0x4d0>
					Bluetooth = !Bluetooth;
 80110a8:	4b46      	ldr	r3, [pc, #280]	; (80111c4 <GUI_Touch_Processing+0x5cc>)
 80110aa:	781a      	ldrb	r2, [r3, #0]
 80110ac:	fab2 f282 	clz	r2, r2
 80110b0:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 80110b2:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80110b6:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 80110b8:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 80110ba:	f001 fe4f 	bl	8012d5c <GUI_Switch_Button>
}
 80110be:	b002      	add	sp, #8
 80110c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Up_Panel();
 80110c4:	f7fe ba60 	b.w	800f588 <GUI_Up_Panel>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=124 & Touch_y <=(174) ) // Information
 80110c8:	f1a3 0108 	sub.w	r1, r3, #8
 80110cc:	29f2      	cmp	r1, #242	; 0xf2
 80110ce:	f1a2 057c 	sub.w	r5, r2, #124	; 0x7c
 80110d2:	bf8c      	ite	hi
 80110d4:	2100      	movhi	r1, #0
 80110d6:	2101      	movls	r1, #1
 80110d8:	2d32      	cmp	r5, #50	; 0x32
 80110da:	d803      	bhi.n	80110e4 <GUI_Touch_Processing+0x4ec>
 80110dc:	b111      	cbz	r1, 80110e4 <GUI_Touch_Processing+0x4ec>
					GUI_screen_state = Information_Screen;
 80110de:	2311      	movs	r3, #17
 80110e0:	7023      	strb	r3, [r4, #0]
 80110e2:	e629      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //Illuminance
 80110e4:	f1a3 05c8 	sub.w	r5, r3, #200	; 0xc8
 80110e8:	2d36      	cmp	r5, #54	; 0x36
 80110ea:	d80c      	bhi.n	8011106 <GUI_Touch_Processing+0x50e>
 80110ec:	f46f 77a3 	mvn.w	r7, #326	; 0x146
 80110f0:	19d5      	adds	r5, r2, r7
 80110f2:	2d36      	cmp	r5, #54	; 0x36
 80110f4:	d807      	bhi.n	8011106 <GUI_Touch_Processing+0x50e>
					Measure_Field ^= Illuminance;
 80110f6:	4b34      	ldr	r3, [pc, #208]	; (80111c8 <GUI_Touch_Processing+0x5d0>)
 80110f8:	881a      	ldrh	r2, [r3, #0]
 80110fa:	f082 0201 	eor.w	r2, r2, #1
 80110fe:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 8011100:	f002 0201 	and.w	r2, r2, #1
 8011104:	e1e0      	b.n	80114c8 <GUI_Touch_Processing+0x8d0>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 8011106:	1e5d      	subs	r5, r3, #1
 8011108:	2d36      	cmp	r5, #54	; 0x36
 801110a:	d868      	bhi.n	80111de <GUI_Touch_Processing+0x5e6>
 801110c:	2800      	cmp	r0, #0
 801110e:	d066      	beq.n	80111de <GUI_Touch_Processing+0x5e6>
					WriteSDFLASH_t(sdfile_cnt);
 8011110:	4b2e      	ldr	r3, [pc, #184]	; (80111cc <GUI_Touch_Processing+0x5d4>)
 8011112:	2100      	movs	r1, #0
 8011114:	8818      	ldrh	r0, [r3, #0]
 8011116:	f008 fbb1 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801111a:	4b2d      	ldr	r3, [pc, #180]	; (80111d0 <GUI_Touch_Processing+0x5d8>)
 801111c:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801111e:	1e5a      	subs	r2, r3, #1
 8011120:	2a05      	cmp	r2, #5
 8011122:	d804      	bhi.n	801112e <GUI_Touch_Processing+0x536>
 8011124:	e8df f002 	tbb	[pc, r2]
 8011128:	08030305 	.word	0x08030305
 801112c:	0b58      	.short	0x0b58
					GUI_screen_state = Prev_Inf_Screen;
 801112e:	7023      	strb	r3, [r4, #0]
 8011130:	e602      	b.n	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011132:	2301      	movs	r3, #1
 8011134:	7023      	strb	r3, [r4, #0]
 8011136:	e5ff      	b.n	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011138:	2304      	movs	r3, #4
 801113a:	7023      	strb	r3, [r4, #0]
 801113c:	e5fc      	b.n	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 801113e:	2306      	movs	r3, #6
 8011140:	7023      	strb	r3, [r4, #0]
 8011142:	e5f9      	b.n	8010d38 <GUI_Touch_Processing+0x140>
 8011144:	2000022a 	.word	0x2000022a
 8011148:	20054932 	.word	0x20054932
 801114c:	20054934 	.word	0x20054934
 8011150:	200056f9 	.word	0x200056f9
 8011154:	200056f0 	.word	0x200056f0
 8011158:	200958ac 	.word	0x200958ac
 801115c:	200056f4 	.word	0x200056f4
 8011160:	20054930 	.word	0x20054930
 8011164:	2000c52c 	.word	0x2000c52c
 8011168:	2008d504 	.word	0x2008d504
 801116c:	20052930 	.word	0x20052930
 8011170:	2008a504 	.word	0x2008a504
 8011174:	2008f512 	.word	0x2008f512
 8011178:	2008f530 	.word	0x2008f530
 801117c:	20004649 	.word	0x20004649
 8011180:	2000464b 	.word	0x2000464b
 8011184:	2000464a 	.word	0x2000464a
 8011188:	20004648 	.word	0x20004648
 801118c:	200056ed 	.word	0x200056ed
 8011190:	20003623 	.word	0x20003623
 8011194:	20003614 	.word	0x20003614
 8011198:	20003625 	.word	0x20003625
 801119c:	20003624 	.word	0x20003624
 80111a0:	20095c10 	.word	0x20095c10
 80111a4:	20005718 	.word	0x20005718
 80111a8:	20000ebc 	.word	0x20000ebc
 80111ac:	08101838 	.word	0x08101838
 80111b0:	08100838 	.word	0x08100838
 80111b4:	20051930 	.word	0x20051930
 80111b8:	20009d1c 	.word	0x20009d1c
 80111bc:	20009d18 	.word	0x20009d18
 80111c0:	20009d24 	.word	0x20009d24
 80111c4:	20090a6a 	.word	0x20090a6a
 80111c8:	200056f6 	.word	0x200056f6
 80111cc:	2000571e 	.word	0x2000571e
 80111d0:	20090a65 	.word	0x20090a65
 80111d4:	200056ec 	.word	0x200056ec
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80111d8:	2305      	movs	r3, #5
 80111da:	7023      	strb	r3, [r4, #0]
 80111dc:	e5ac      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=80 & Touch_y <=(120) ) // Language change
 80111de:	3a50      	subs	r2, #80	; 0x50
 80111e0:	2a28      	cmp	r2, #40	; 0x28
 80111e2:	d80c      	bhi.n	80111fe <GUI_Touch_Processing+0x606>
 80111e4:	b159      	cbz	r1, 80111fe <GUI_Touch_Processing+0x606>
					if (Language_status == Ru) Language_status=En;
 80111e6:	4ba1      	ldr	r3, [pc, #644]	; (801146c <GUI_Touch_Processing+0x874>)
 80111e8:	781a      	ldrb	r2, [r3, #0]
 80111ea:	b912      	cbnz	r2, 80111f2 <GUI_Touch_Processing+0x5fa>
 80111ec:	2201      	movs	r2, #1
 80111ee:	701a      	strb	r2, [r3, #0]
 80111f0:	e5a2      	b.n	8010d38 <GUI_Touch_Processing+0x140>
					else if (Language_status == En) Language_status=Ru;
 80111f2:	2a01      	cmp	r2, #1
 80111f4:	f47f ada0 	bne.w	8010d38 <GUI_Touch_Processing+0x140>
 80111f8:	2200      	movs	r2, #0
 80111fa:	701a      	strb	r2, [r3, #0]
 80111fc:	e59c      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 80111fe:	f1a3 02d9 	sub.w	r2, r3, #217	; 0xd9
 8011202:	2a36      	cmp	r2, #54	; 0x36
 8011204:	d810      	bhi.n	8011228 <GUI_Touch_Processing+0x630>
 8011206:	b178      	cbz	r0, 8011228 <GUI_Touch_Processing+0x630>
					TFT_ON_OFF = 0x00;
 8011208:	4b99      	ldr	r3, [pc, #612]	; (8011470 <GUI_Touch_Processing+0x878>)
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801120a:	489a      	ldr	r0, [pc, #616]	; (8011474 <GUI_Touch_Processing+0x87c>)
					TFT_ON_OFF = 0x00;
 801120c:	2400      	movs	r4, #0
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801120e:	2104      	movs	r1, #4
					TFT_ON_OFF = 0x00;
 8011210:	701c      	strb	r4, [r3, #0]
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011212:	f7f5 f97b 	bl	800650c <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 8011216:	4898      	ldr	r0, [pc, #608]	; (8011478 <GUI_Touch_Processing+0x880>)
 8011218:	4622      	mov	r2, r4
 801121a:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 801121e:	b002      	add	sp, #8
 8011220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 8011224:	f7f1 bacc 	b.w	80027c0 <HAL_GPIO_WritePin>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011228:	3b37      	subs	r3, #55	; 0x37
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 801122a:	2b36      	cmp	r3, #54	; 0x36
 801122c:	e0c3      	b.n	80113b6 <GUI_Touch_Processing+0x7be>
				preGUI_screen_state = GUI_screen_state;
 801122e:	4b93      	ldr	r3, [pc, #588]	; (801147c <GUI_Touch_Processing+0x884>)
 8011230:	2208      	movs	r2, #8
 8011232:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )////down
 8011234:	4b92      	ldr	r3, [pc, #584]	; (8011480 <GUI_Touch_Processing+0x888>)
 8011236:	881a      	ldrh	r2, [r3, #0]
 8011238:	4b92      	ldr	r3, [pc, #584]	; (8011484 <GUI_Touch_Processing+0x88c>)
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011240:	2836      	cmp	r0, #54	; 0x36
 8011242:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011246:	bf8c      	ite	hi
 8011248:	2000      	movhi	r0, #0
 801124a:	2001      	movls	r0, #1
 801124c:	2936      	cmp	r1, #54	; 0x36
 801124e:	d803      	bhi.n	8011258 <GUI_Touch_Processing+0x660>
 8011250:	b110      	cbz	r0, 8011258 <GUI_Touch_Processing+0x660>
					GUI_screen_state = DataSet3_Screen;
 8011252:	2309      	movs	r3, #9
 8011254:	7023      	strb	r3, [r4, #0]
 8011256:	e56f      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //Irradiance
 8011258:	f1a2 01c8 	sub.w	r1, r2, #200	; 0xc8
 801125c:	2936      	cmp	r1, #54	; 0x36
 801125e:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 8011262:	bf8c      	ite	hi
 8011264:	2100      	movhi	r1, #0
 8011266:	2101      	movls	r1, #1
 8011268:	2d36      	cmp	r5, #54	; 0x36
 801126a:	d808      	bhi.n	801127e <GUI_Touch_Processing+0x686>
 801126c:	b139      	cbz	r1, 801127e <GUI_Touch_Processing+0x686>
					Measure_Field ^= Irradiance;
 801126e:	4b86      	ldr	r3, [pc, #536]	; (8011488 <GUI_Touch_Processing+0x890>)
 8011270:	881a      	ldrh	r2, [r3, #0]
 8011272:	f082 0202 	eor.w	r2, r2, #2
 8011276:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8011278:	f002 0202 	and.w	r2, r2, #2
 801127c:	e0c8      	b.n	8011410 <GUI_Touch_Processing+0x818>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //PPFD
 801127e:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 8011282:	2d36      	cmp	r5, #54	; 0x36
 8011284:	d809      	bhi.n	801129a <GUI_Touch_Processing+0x6a2>
 8011286:	b141      	cbz	r1, 801129a <GUI_Touch_Processing+0x6a2>
					Measure_Field ^= PPFD;
 8011288:	4b7f      	ldr	r3, [pc, #508]	; (8011488 <GUI_Touch_Processing+0x890>)
 801128a:	881a      	ldrh	r2, [r3, #0]
 801128c:	f082 0204 	eor.w	r2, r2, #4
 8011290:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8011292:	f002 0204 	and.w	r2, r2, #4
 8011296:	2185      	movs	r1, #133	; 0x85
 8011298:	e01c      	b.n	80112d4 <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) ) //PPFD_BGR
 801129a:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 801129e:	2d36      	cmp	r5, #54	; 0x36
 80112a0:	d809      	bhi.n	80112b6 <GUI_Touch_Processing+0x6be>
 80112a2:	b141      	cbz	r1, 80112b6 <GUI_Touch_Processing+0x6be>
					Measure_Field ^= PPFD_BGR;
 80112a4:	4b78      	ldr	r3, [pc, #480]	; (8011488 <GUI_Touch_Processing+0x890>)
 80112a6:	881a      	ldrh	r2, [r3, #0]
 80112a8:	f082 0208 	eor.w	r2, r2, #8
 80112ac:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 80112ae:	f002 0208 	and.w	r2, r2, #8
					GUI_CheckBox(200, 198, Measure_Field&SP_measure);
 80112b2:	21c6      	movs	r1, #198	; 0xc6
 80112b4:	e00e      	b.n	80112d4 <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) ) //CCT
 80112b6:	f46f 7683 	mvn.w	r6, #262	; 0x106
 80112ba:	199d      	adds	r5, r3, r6
 80112bc:	2d36      	cmp	r5, #54	; 0x36
 80112be:	d80f      	bhi.n	80112e0 <GUI_Touch_Processing+0x6e8>
 80112c0:	b171      	cbz	r1, 80112e0 <GUI_Touch_Processing+0x6e8>
					Measure_Field ^= CCT;
 80112c2:	4b71      	ldr	r3, [pc, #452]	; (8011488 <GUI_Touch_Processing+0x890>)
 80112c4:	881a      	ldrh	r2, [r3, #0]
 80112c6:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 80112ca:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 263, Measure_Field&CCT);
 80112cc:	f240 1107 	movw	r1, #263	; 0x107
 80112d0:	f402 7280 	and.w	r2, r2, #256	; 0x100
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 80112d4:	20c8      	movs	r0, #200	; 0xc8
}
 80112d6:	b002      	add	sp, #8
 80112d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 80112dc:	f001 bcce 	b.w	8012c7c <GUI_CheckBox>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E
 80112e0:	f46f 75a3 	mvn.w	r5, #326	; 0x146
 80112e4:	442b      	add	r3, r5
 80112e6:	2b36      	cmp	r3, #54	; 0x36
 80112e8:	bf8c      	ite	hi
 80112ea:	2300      	movhi	r3, #0
 80112ec:	2301      	movls	r3, #1
 80112ee:	b1c1      	cbz	r1, 8011322 <GUI_Touch_Processing+0x72a>
 80112f0:	b1bb      	cbz	r3, 8011322 <GUI_Touch_Processing+0x72a>
					Measure_Field ^= delta_E;
 80112f2:	4c65      	ldr	r4, [pc, #404]	; (8011488 <GUI_Touch_Processing+0x890>)
 80112f4:	8822      	ldrh	r2, [r4, #0]
 80112f6:	f482 6200 	eor.w	r2, r2, #2048	; 0x800
 80112fa:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 327, Measure_Field&delta_E);
 80112fc:	f240 1147 	movw	r1, #327	; 0x147
 8011300:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011304:	20c8      	movs	r0, #200	; 0xc8
 8011306:	f001 fcb9 	bl	8012c7c <GUI_CheckBox>
					GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 801130a:	8822      	ldrh	r2, [r4, #0]
 801130c:	2300      	movs	r3, #0
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 801130e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011312:	f240 1147 	movw	r1, #327	; 0x147
 8011316:	2082      	movs	r0, #130	; 0x82
}
 8011318:	b002      	add	sp, #8
 801131a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 801131e:	f001 bb8d 	b.w	8012a3c <GUI_Button_Measure_deltaE_Small>
				else	if(Touch_x >= 130 & Touch_x <= (200+38) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E_measure_small
 8011322:	f1a2 0182 	sub.w	r1, r2, #130	; 0x82
 8011326:	296c      	cmp	r1, #108	; 0x6c
 8011328:	d81b      	bhi.n	8011362 <GUI_Touch_Processing+0x76a>
 801132a:	b1d3      	cbz	r3, 8011362 <GUI_Touch_Processing+0x76a>
					if(Measure_Field&delta_E)
 801132c:	4c56      	ldr	r4, [pc, #344]	; (8011488 <GUI_Touch_Processing+0x890>)
 801132e:	8823      	ldrh	r3, [r4, #0]
 8011330:	051b      	lsls	r3, r3, #20
 8011332:	f57f ad01 	bpl.w	8010d38 <GUI_Touch_Processing+0x140>
						Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 8011336:	4b55      	ldr	r3, [pc, #340]	; (801148c <GUI_Touch_Processing+0x894>)
 8011338:	4855      	ldr	r0, [pc, #340]	; (8011490 <GUI_Touch_Processing+0x898>)
 801133a:	7819      	ldrb	r1, [r3, #0]
 801133c:	4b55      	ldr	r3, [pc, #340]	; (8011494 <GUI_Touch_Processing+0x89c>)
 801133e:	781a      	ldrb	r2, [r3, #0]
 8011340:	4b55      	ldr	r3, [pc, #340]	; (8011498 <GUI_Touch_Processing+0x8a0>)
 8011342:	2900      	cmp	r1, #0
 8011344:	bf08      	it	eq
 8011346:	4618      	moveq	r0, r3
 8011348:	f7fd f98e 	bl	800e668 <Calculate_Lab>
						colorimetry_LAB_mem[0] = colorimetry_LAB[0];
 801134c:	4a53      	ldr	r2, [pc, #332]	; (801149c <GUI_Touch_Processing+0x8a4>)
 801134e:	4b54      	ldr	r3, [pc, #336]	; (80114a0 <GUI_Touch_Processing+0x8a8>)
 8011350:	8811      	ldrh	r1, [r2, #0]
 8011352:	8019      	strh	r1, [r3, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8011354:	8851      	ldrh	r1, [r2, #2]
						colorimetry_LAB_mem[2] = colorimetry_LAB[2];
 8011356:	8892      	ldrh	r2, [r2, #4]
 8011358:	809a      	strh	r2, [r3, #4]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 801135a:	8059      	strh	r1, [r3, #2]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 801135c:	8822      	ldrh	r2, [r4, #0]
 801135e:	2301      	movs	r3, #1
 8011360:	e7d5      	b.n	801130e <GUI_Touch_Processing+0x716>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 8011362:	1e53      	subs	r3, r2, #1
 8011364:	2b36      	cmp	r3, #54	; 0x36
 8011366:	d81d      	bhi.n	80113a4 <GUI_Touch_Processing+0x7ac>
 8011368:	b1e0      	cbz	r0, 80113a4 <GUI_Touch_Processing+0x7ac>
					WriteSDFLASH_t(sdfile_cnt);
 801136a:	4b4e      	ldr	r3, [pc, #312]	; (80114a4 <GUI_Touch_Processing+0x8ac>)
 801136c:	2100      	movs	r1, #0
 801136e:	8818      	ldrh	r0, [r3, #0]
 8011370:	f008 fa84 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011374:	4b4c      	ldr	r3, [pc, #304]	; (80114a8 <GUI_Touch_Processing+0x8b0>)
 8011376:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011378:	1e5a      	subs	r2, r3, #1
 801137a:	2a05      	cmp	r2, #5
 801137c:	d804      	bhi.n	8011388 <GUI_Touch_Processing+0x790>
 801137e:	e8df f002 	tbb	[pc, r2]
 8011382:	0305      	.short	0x0305
 8011384:	0b0e0803 	.word	0x0b0e0803
					GUI_screen_state = Prev_Inf_Screen;
 8011388:	7023      	strb	r3, [r4, #0]
 801138a:	e4d5      	b.n	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801138c:	2301      	movs	r3, #1
 801138e:	7023      	strb	r3, [r4, #0]
 8011390:	e4d2      	b.n	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011392:	2304      	movs	r3, #4
 8011394:	7023      	strb	r3, [r4, #0]
 8011396:	e4cf      	b.n	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011398:	2306      	movs	r3, #6
 801139a:	7023      	strb	r3, [r4, #0]
 801139c:	e4cc      	b.n	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801139e:	2305      	movs	r3, #5
 80113a0:	7023      	strb	r3, [r4, #0]
 80113a2:	e4c9      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 80113a4:	f1a2 03d9 	sub.w	r3, r2, #217	; 0xd9
 80113a8:	2b36      	cmp	r3, #54	; 0x36
 80113aa:	d802      	bhi.n	80113b2 <GUI_Touch_Processing+0x7ba>
 80113ac:	2800      	cmp	r0, #0
 80113ae:	f47f af2b 	bne.w	8011208 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 80113b2:	3a37      	subs	r2, #55	; 0x37
 80113b4:	2a36      	cmp	r2, #54	; 0x36
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 80113b6:	f63f acbf 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
 80113ba:	2800      	cmp	r0, #0
 80113bc:	f47f acc4 	bne.w	8010d48 <GUI_Touch_Processing+0x150>
 80113c0:	e4ba      	b.n	8010d38 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 80113c2:	4b2e      	ldr	r3, [pc, #184]	; (801147c <GUI_Touch_Processing+0x884>)
 80113c4:	2209      	movs	r2, #9
 80113c6:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )// down
 80113c8:	4b2d      	ldr	r3, [pc, #180]	; (8011480 <GUI_Touch_Processing+0x888>)
 80113ca:	8819      	ldrh	r1, [r3, #0]
 80113cc:	4b2d      	ldr	r3, [pc, #180]	; (8011484 <GUI_Touch_Processing+0x88c>)
 80113ce:	881b      	ldrh	r3, [r3, #0]
 80113d0:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 80113d4:	2836      	cmp	r0, #54	; 0x36
 80113d6:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 80113da:	bf8c      	ite	hi
 80113dc:	2000      	movhi	r0, #0
 80113de:	2001      	movls	r0, #1
 80113e0:	2a36      	cmp	r2, #54	; 0x36
 80113e2:	d803      	bhi.n	80113ec <GUI_Touch_Processing+0x7f4>
 80113e4:	b110      	cbz	r0, 80113ec <GUI_Touch_Processing+0x7f4>
					GUI_screen_state = DataSet4_Screen;
 80113e6:	230a      	movs	r3, #10
 80113e8:	7023      	strb	r3, [r4, #0]
 80113ea:	e4a5      	b.n	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //CIE_XYZ
 80113ec:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 80113f0:	2a36      	cmp	r2, #54	; 0x36
 80113f2:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 80113f6:	bf8c      	ite	hi
 80113f8:	2200      	movhi	r2, #0
 80113fa:	2201      	movls	r2, #1
 80113fc:	2d36      	cmp	r5, #54	; 0x36
 80113fe:	d809      	bhi.n	8011414 <GUI_Touch_Processing+0x81c>
 8011400:	b142      	cbz	r2, 8011414 <GUI_Touch_Processing+0x81c>
					Measure_Field ^= CIE_XYZ;
 8011402:	4b21      	ldr	r3, [pc, #132]	; (8011488 <GUI_Touch_Processing+0x890>)
 8011404:	881a      	ldrh	r2, [r3, #0]
 8011406:	f082 0210 	eor.w	r2, r2, #16
 801140a:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 801140c:	f002 0210 	and.w	r2, r2, #16
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8011410:	2146      	movs	r1, #70	; 0x46
 8011412:	e75f      	b.n	80112d4 <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //CIE_xy
 8011414:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 8011418:	2d36      	cmp	r5, #54	; 0x36
 801141a:	d847      	bhi.n	80114ac <GUI_Touch_Processing+0x8b4>
 801141c:	2a00      	cmp	r2, #0
 801141e:	d045      	beq.n	80114ac <GUI_Touch_Processing+0x8b4>
					Measure_Field ^= CIE_xy;
 8011420:	4c19      	ldr	r4, [pc, #100]	; (8011488 <GUI_Touch_Processing+0x890>)
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8011422:	4d1a      	ldr	r5, [pc, #104]	; (801148c <GUI_Touch_Processing+0x894>)
					Measure_Field ^= CIE_xy;
 8011424:	8822      	ldrh	r2, [r4, #0]
 8011426:	f082 0220 	eor.w	r2, r2, #32
 801142a:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 801142c:	2185      	movs	r1, #133	; 0x85
 801142e:	f002 0220 	and.w	r2, r2, #32
 8011432:	20c8      	movs	r0, #200	; 0xc8
 8011434:	f001 fc22 	bl	8012c7c <GUI_CheckBox>
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8011438:	8823      	ldrh	r3, [r4, #0]
 801143a:	782a      	ldrb	r2, [r5, #0]
 801143c:	f003 0320 	and.w	r3, r3, #32
 8011440:	f002 0201 	and.w	r2, r2, #1
 8011444:	21c6      	movs	r1, #198	; 0xc6
 8011446:	20c8      	movs	r0, #200	; 0xc8
 8011448:	f001 fc59 	bl	8012cfe <GUI_RadioBox>
					GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 801144c:	782a      	ldrb	r2, [r5, #0]
 801144e:	8823      	ldrh	r3, [r4, #0]
 8011450:	43d2      	mvns	r2, r2
 8011452:	f003 0320 	and.w	r3, r3, #32
 8011456:	f002 0201 	and.w	r2, r2, #1
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 801145a:	f240 1107 	movw	r1, #263	; 0x107
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 801145e:	20c8      	movs	r0, #200	; 0xc8
}
 8011460:	b002      	add	sp, #8
 8011462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 8011466:	f001 bc4a 	b.w	8012cfe <GUI_RadioBox>
 801146a:	bf00      	nop
 801146c:	200056f3 	.word	0x200056f3
 8011470:	20000ebe 	.word	0x20000ebe
 8011474:	20095764 	.word	0x20095764
 8011478:	48001400 	.word	0x48001400
 801147c:	2000022a 	.word	0x2000022a
 8011480:	20054932 	.word	0x20054932
 8011484:	20054934 	.word	0x20054934
 8011488:	200056f6 	.word	0x200056f6
 801148c:	200056f4 	.word	0x200056f4
 8011490:	2008f512 	.word	0x2008f512
 8011494:	20090a69 	.word	0x20090a69
 8011498:	2008f518 	.word	0x2008f518
 801149c:	2008f50c 	.word	0x2008f50c
 80114a0:	20090ff8 	.word	0x20090ff8
 80114a4:	2000571e 	.word	0x2000571e
 80114a8:	20090a65 	.word	0x20090a65
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //CIE_Luv
 80114ac:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 80114b0:	eb03 050c 	add.w	r5, r3, ip
 80114b4:	2d36      	cmp	r5, #54	; 0x36
 80114b6:	d80a      	bhi.n	80114ce <GUI_Touch_Processing+0x8d6>
 80114b8:	b14a      	cbz	r2, 80114ce <GUI_Touch_Processing+0x8d6>
					Measure_Field ^= CIE_Luv;
 80114ba:	4ba8      	ldr	r3, [pc, #672]	; (801175c <GUI_Touch_Processing+0xb64>)
 80114bc:	881a      	ldrh	r2, [r3, #0]
 80114be:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 80114c2:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 80114c4:	f002 0240 	and.w	r2, r2, #64	; 0x40
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 80114c8:	f240 1147 	movw	r1, #327	; 0x147
 80114cc:	e702      	b.n	80112d4 <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) && (Measure_Field&CIE_xy)) //CIE_xy_1931
 80114ce:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 80114d2:	2d36      	cmp	r5, #54	; 0x36
 80114d4:	d817      	bhi.n	8011506 <GUI_Touch_Processing+0x90e>
 80114d6:	b1b2      	cbz	r2, 8011506 <GUI_Touch_Processing+0x90e>
 80114d8:	4da0      	ldr	r5, [pc, #640]	; (801175c <GUI_Touch_Processing+0xb64>)
 80114da:	882d      	ldrh	r5, [r5, #0]
 80114dc:	06af      	lsls	r7, r5, #26
 80114de:	d512      	bpl.n	8011506 <GUI_Touch_Processing+0x90e>
					if(!(Measure_Color_xy&CIE_xy_1931_1964)){
 80114e0:	4c9f      	ldr	r4, [pc, #636]	; (8011760 <GUI_Touch_Processing+0xb68>)
 80114e2:	7822      	ldrb	r2, [r4, #0]
 80114e4:	07d6      	lsls	r6, r2, #31
 80114e6:	f53f ac27 	bmi.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 80114ea:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 80114ec:	f082 0201 	eor.w	r2, r2, #1
 80114f0:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 80114f2:	21c6      	movs	r1, #198	; 0xc6
 80114f4:	401a      	ands	r2, r3
 80114f6:	20c8      	movs	r0, #200	; 0xc8
 80114f8:	f001 fc01 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 80114fc:	7822      	ldrb	r2, [r4, #0]
 80114fe:	2301      	movs	r3, #1
 8011500:	43d2      	mvns	r2, r2
 8011502:	401a      	ands	r2, r3
 8011504:	e7a9      	b.n	801145a <GUI_Touch_Processing+0x862>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) && (Measure_Field&CIE_xy)) //CIE_xy_1964
 8011506:	f46f 7583 	mvn.w	r5, #262	; 0x106
 801150a:	442b      	add	r3, r5
 801150c:	2b36      	cmp	r3, #54	; 0x36
 801150e:	d80a      	bhi.n	8011526 <GUI_Touch_Processing+0x92e>
 8011510:	b14a      	cbz	r2, 8011526 <GUI_Touch_Processing+0x92e>
 8011512:	4b92      	ldr	r3, [pc, #584]	; (801175c <GUI_Touch_Processing+0xb64>)
 8011514:	881b      	ldrh	r3, [r3, #0]
 8011516:	069b      	lsls	r3, r3, #26
 8011518:	d505      	bpl.n	8011526 <GUI_Touch_Processing+0x92e>
					if((Measure_Color_xy&CIE_xy_1931_1964)){
 801151a:	4c91      	ldr	r4, [pc, #580]	; (8011760 <GUI_Touch_Processing+0xb68>)
 801151c:	7822      	ldrb	r2, [r4, #0]
 801151e:	07d7      	lsls	r7, r2, #31
 8011520:	f57f ac0a 	bpl.w	8010d38 <GUI_Touch_Processing+0x140>
 8011524:	e7e1      	b.n	80114ea <GUI_Touch_Processing+0x8f2>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 8011526:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 801152a:	2b36      	cmp	r3, #54	; 0x36
 801152c:	d802      	bhi.n	8011534 <GUI_Touch_Processing+0x93c>
 801152e:	2800      	cmp	r0, #0
 8011530:	f47f ae6a 	bne.w	8011208 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 8011534:	1e4b      	subs	r3, r1, #1
 8011536:	2b36      	cmp	r3, #54	; 0x36
 8011538:	f200 820a 	bhi.w	8011950 <GUI_Touch_Processing+0xd58>
 801153c:	2800      	cmp	r0, #0
 801153e:	f000 8207 	beq.w	8011950 <GUI_Touch_Processing+0xd58>
					WriteSDFLASH_t(sdfile_cnt);
 8011542:	4b88      	ldr	r3, [pc, #544]	; (8011764 <GUI_Touch_Processing+0xb6c>)
 8011544:	2100      	movs	r1, #0
 8011546:	8818      	ldrh	r0, [r3, #0]
 8011548:	f008 f998 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801154c:	4b86      	ldr	r3, [pc, #536]	; (8011768 <GUI_Touch_Processing+0xb70>)
 801154e:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011550:	1e5a      	subs	r2, r3, #1
 8011552:	2a05      	cmp	r2, #5
 8011554:	d804      	bhi.n	8011560 <GUI_Touch_Processing+0x968>
 8011556:	e8df f002 	tbb	[pc, r2]
 801155a:	0306      	.short	0x0306
 801155c:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8011560:	7023      	strb	r3, [r4, #0]
 8011562:	f7ff bbe9 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011566:	2301      	movs	r3, #1
 8011568:	7023      	strb	r3, [r4, #0]
 801156a:	f7ff bbe5 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801156e:	2304      	movs	r3, #4
 8011570:	7023      	strb	r3, [r4, #0]
 8011572:	f7ff bbe1 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011576:	2306      	movs	r3, #6
 8011578:	7023      	strb	r3, [r4, #0]
 801157a:	f7ff bbdd 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801157e:	2305      	movs	r3, #5
 8011580:	7023      	strb	r3, [r4, #0]
 8011582:	f7ff bbd9 	b.w	8010d38 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011586:	4b79      	ldr	r3, [pc, #484]	; (801176c <GUI_Touch_Processing+0xb74>)
 8011588:	220a      	movs	r2, #10
 801158a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //down
 801158c:	4b78      	ldr	r3, [pc, #480]	; (8011770 <GUI_Touch_Processing+0xb78>)
 801158e:	8819      	ldrh	r1, [r3, #0]
 8011590:	4b78      	ldr	r3, [pc, #480]	; (8011774 <GUI_Touch_Processing+0xb7c>)
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011598:	2836      	cmp	r0, #54	; 0x36
 801159a:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 801159e:	bf8c      	ite	hi
 80115a0:	2000      	movhi	r0, #0
 80115a2:	2001      	movls	r0, #1
 80115a4:	2a36      	cmp	r2, #54	; 0x36
 80115a6:	d804      	bhi.n	80115b2 <GUI_Touch_Processing+0x9ba>
 80115a8:	b118      	cbz	r0, 80115b2 <GUI_Touch_Processing+0x9ba>
					GUI_screen_state = DataSet5_Screen;
 80115aa:	230b      	movs	r3, #11
 80115ac:	7023      	strb	r3, [r4, #0]
 80115ae:	f7ff bbc3 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=65 & Touch_y <=(65+54) ) //CIE_Lab
 80115b2:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 80115b6:	2a36      	cmp	r2, #54	; 0x36
 80115b8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 80115bc:	bf8c      	ite	hi
 80115be:	2200      	movhi	r2, #0
 80115c0:	2201      	movls	r2, #1
 80115c2:	2d36      	cmp	r5, #54	; 0x36
 80115c4:	d848      	bhi.n	8011658 <GUI_Touch_Processing+0xa60>
 80115c6:	2a00      	cmp	r2, #0
 80115c8:	d046      	beq.n	8011658 <GUI_Touch_Processing+0xa60>
					Measure_Field ^= CIE_Lab;
 80115ca:	4c64      	ldr	r4, [pc, #400]	; (801175c <GUI_Touch_Processing+0xb64>)
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 80115cc:	4d6a      	ldr	r5, [pc, #424]	; (8011778 <GUI_Touch_Processing+0xb80>)
					Measure_Field ^= CIE_Lab;
 80115ce:	8822      	ldrh	r2, [r4, #0]
 80115d0:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 80115d4:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 80115d6:	2141      	movs	r1, #65	; 0x41
 80115d8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80115dc:	20c8      	movs	r0, #200	; 0xc8
 80115de:	f001 fb4d 	bl	8012c7c <GUI_CheckBox>
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 80115e2:	8823      	ldrh	r3, [r4, #0]
 80115e4:	782a      	ldrb	r2, [r5, #0]
 80115e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115ea:	f002 0201 	and.w	r2, r2, #1
 80115ee:	216c      	movs	r1, #108	; 0x6c
 80115f0:	20c8      	movs	r0, #200	; 0xc8
 80115f2:	f001 fb84 	bl	8012cfe <GUI_RadioBox>
					GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 80115f6:	8823      	ldrh	r3, [r4, #0]
 80115f8:	782a      	ldrb	r2, [r5, #0]
 80115fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115fe:	f002 0202 	and.w	r2, r2, #2
 8011602:	218f      	movs	r1, #143	; 0x8f
 8011604:	20c8      	movs	r0, #200	; 0xc8
 8011606:	f001 fb7a 	bl	8012cfe <GUI_RadioBox>
					GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 801160a:	8823      	ldrh	r3, [r4, #0]
 801160c:	782a      	ldrb	r2, [r5, #0]
 801160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011612:	f002 0204 	and.w	r2, r2, #4
 8011616:	21b2      	movs	r1, #178	; 0xb2
 8011618:	20c8      	movs	r0, #200	; 0xc8
 801161a:	f001 fb70 	bl	8012cfe <GUI_RadioBox>
					GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 801161e:	8823      	ldrh	r3, [r4, #0]
 8011620:	782a      	ldrb	r2, [r5, #0]
 8011622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011626:	f002 0208 	and.w	r2, r2, #8
 801162a:	21d5      	movs	r1, #213	; 0xd5
 801162c:	20c8      	movs	r0, #200	; 0xc8
 801162e:	f001 fb66 	bl	8012cfe <GUI_RadioBox>
					GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 8011632:	8823      	ldrh	r3, [r4, #0]
 8011634:	782a      	ldrb	r2, [r5, #0]
 8011636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801163a:	f002 0210 	and.w	r2, r2, #16
 801163e:	21f8      	movs	r1, #248	; 0xf8
 8011640:	20c8      	movs	r0, #200	; 0xc8
 8011642:	f001 fb5c 	bl	8012cfe <GUI_RadioBox>
					GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 8011646:	8823      	ldrh	r3, [r4, #0]
 8011648:	782a      	ldrb	r2, [r5, #0]
 801164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 801164e:	f002 0220 	and.w	r2, r2, #32
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 8011652:	f240 111b 	movw	r1, #283	; 0x11b
 8011656:	e702      	b.n	801145e <GUI_Touch_Processing+0x866>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=345 & Touch_y <=(345+54) ) //EbEr
 8011658:	f46f 76ac 	mvn.w	r6, #344	; 0x158
 801165c:	199d      	adds	r5, r3, r6
 801165e:	2d36      	cmp	r5, #54	; 0x36
 8011660:	d80a      	bhi.n	8011678 <GUI_Touch_Processing+0xa80>
 8011662:	b14a      	cbz	r2, 8011678 <GUI_Touch_Processing+0xa80>
					Measure_Field ^= EbEr;
 8011664:	4b3d      	ldr	r3, [pc, #244]	; (801175c <GUI_Touch_Processing+0xb64>)
 8011666:	881a      	ldrh	r2, [r3, #0]
 8011668:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 801166c:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 345, Measure_Field&EbEr);
 801166e:	f240 1159 	movw	r1, #345	; 0x159
 8011672:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8011676:	e62d      	b.n	80112d4 <GUI_Touch_Processing+0x6dc>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=108 & Touch_y <=(108+54) && (Measure_Field&CIE_Lab)) //Source_A
 8011678:	f1a3 056c 	sub.w	r5, r3, #108	; 0x6c
 801167c:	2d36      	cmp	r5, #54	; 0x36
 801167e:	d834      	bhi.n	80116ea <GUI_Touch_Processing+0xaf2>
 8011680:	b39a      	cbz	r2, 80116ea <GUI_Touch_Processing+0xaf2>
 8011682:	4d36      	ldr	r5, [pc, #216]	; (801175c <GUI_Touch_Processing+0xb64>)
 8011684:	882d      	ldrh	r5, [r5, #0]
 8011686:	062d      	lsls	r5, r5, #24
 8011688:	d52f      	bpl.n	80116ea <GUI_Touch_Processing+0xaf2>
					if(!(Source_Type&Source_A))
 801168a:	4d3b      	ldr	r5, [pc, #236]	; (8011778 <GUI_Touch_Processing+0xb80>)
 801168c:	782b      	ldrb	r3, [r5, #0]
 801168e:	07df      	lsls	r7, r3, #31
 8011690:	f53f ab52 	bmi.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type|=Source_A, 0x01);
 8011694:	2401      	movs	r4, #1
 8011696:	4623      	mov	r3, r4
 8011698:	4622      	mov	r2, r4
 801169a:	216c      	movs	r1, #108	; 0x6c
 801169c:	20c8      	movs	r0, #200	; 0xc8
 801169e:	702c      	strb	r4, [r5, #0]
 80116a0:	f001 fb2d 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80116a4:	782a      	ldrb	r2, [r5, #0]
 80116a6:	4623      	mov	r3, r4
 80116a8:	f002 0202 	and.w	r2, r2, #2
 80116ac:	218f      	movs	r1, #143	; 0x8f
 80116ae:	20c8      	movs	r0, #200	; 0xc8
 80116b0:	f001 fb25 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80116b4:	782a      	ldrb	r2, [r5, #0]
 80116b6:	4623      	mov	r3, r4
 80116b8:	f002 0204 	and.w	r2, r2, #4
 80116bc:	21b2      	movs	r1, #178	; 0xb2
 80116be:	20c8      	movs	r0, #200	; 0xc8
 80116c0:	f001 fb1d 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80116c4:	782a      	ldrb	r2, [r5, #0]
 80116c6:	4623      	mov	r3, r4
 80116c8:	f002 0208 	and.w	r2, r2, #8
 80116cc:	21d5      	movs	r1, #213	; 0xd5
 80116ce:	20c8      	movs	r0, #200	; 0xc8
 80116d0:	f001 fb15 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80116d4:	782a      	ldrb	r2, [r5, #0]
 80116d6:	4623      	mov	r3, r4
 80116d8:	f002 0210 	and.w	r2, r2, #16
 80116dc:	21f8      	movs	r1, #248	; 0xf8
 80116de:	20c8      	movs	r0, #200	; 0xc8
 80116e0:	f001 fb0d 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80116e4:	782a      	ldrb	r2, [r5, #0]
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80116e6:	2301      	movs	r3, #1
 80116e8:	e7b1      	b.n	801164e <GUI_Touch_Processing+0xa56>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=143  & Touch_y <=(143+54)  && (Measure_Field&CIE_Lab)) //Source_D65
 80116ea:	f1a3 058f 	sub.w	r5, r3, #143	; 0x8f
 80116ee:	2d36      	cmp	r5, #54	; 0x36
 80116f0:	d844      	bhi.n	801177c <GUI_Touch_Processing+0xb84>
 80116f2:	2a00      	cmp	r2, #0
 80116f4:	d042      	beq.n	801177c <GUI_Touch_Processing+0xb84>
 80116f6:	4d19      	ldr	r5, [pc, #100]	; (801175c <GUI_Touch_Processing+0xb64>)
 80116f8:	882d      	ldrh	r5, [r5, #0]
 80116fa:	062e      	lsls	r6, r5, #24
 80116fc:	d53e      	bpl.n	801177c <GUI_Touch_Processing+0xb84>
					if(!(Source_Type&Source_D65))
 80116fe:	4c1e      	ldr	r4, [pc, #120]	; (8011778 <GUI_Touch_Processing+0xb80>)
 8011700:	7822      	ldrb	r2, [r4, #0]
 8011702:	f012 0202 	ands.w	r2, r2, #2
 8011706:	f47f ab17 	bne.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 801170a:	2301      	movs	r3, #1
 801170c:	216c      	movs	r1, #108	; 0x6c
 801170e:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011710:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011712:	f001 faf4 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type|=Source_D65, 0x01);
 8011716:	7822      	ldrb	r2, [r4, #0]
 8011718:	2301      	movs	r3, #1
 801171a:	f042 0202 	orr.w	r2, r2, #2
 801171e:	218f      	movs	r1, #143	; 0x8f
 8011720:	20c8      	movs	r0, #200	; 0xc8
 8011722:	7022      	strb	r2, [r4, #0]
 8011724:	f001 faeb 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011728:	7822      	ldrb	r2, [r4, #0]
 801172a:	2301      	movs	r3, #1
 801172c:	f002 0204 	and.w	r2, r2, #4
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8011730:	21b2      	movs	r1, #178	; 0xb2
 8011732:	20c8      	movs	r0, #200	; 0xc8
 8011734:	f001 fae3 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011738:	7822      	ldrb	r2, [r4, #0]
 801173a:	2301      	movs	r3, #1
 801173c:	f002 0208 	and.w	r2, r2, #8
 8011740:	21d5      	movs	r1, #213	; 0xd5
 8011742:	20c8      	movs	r0, #200	; 0xc8
 8011744:	f001 fadb 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011748:	7822      	ldrb	r2, [r4, #0]
 801174a:	2301      	movs	r3, #1
 801174c:	f002 0210 	and.w	r2, r2, #16
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8011750:	21f8      	movs	r1, #248	; 0xf8
 8011752:	20c8      	movs	r0, #200	; 0xc8
 8011754:	f001 fad3 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011758:	7822      	ldrb	r2, [r4, #0]
 801175a:	e7c4      	b.n	80116e6 <GUI_Touch_Processing+0xaee>
 801175c:	200056f6 	.word	0x200056f6
 8011760:	200056f4 	.word	0x200056f4
 8011764:	2000571e 	.word	0x2000571e
 8011768:	20090a65 	.word	0x20090a65
 801176c:	2000022a 	.word	0x2000022a
 8011770:	20054932 	.word	0x20054932
 8011774:	20054934 	.word	0x20054934
 8011778:	20090a69 	.word	0x20090a69
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=178  & Touch_y <=(178+54)  && (Measure_Field&CIE_Lab)) //Source_C
 801177c:	f1a3 05b2 	sub.w	r5, r3, #178	; 0xb2
 8011780:	2d36      	cmp	r5, #54	; 0x36
 8011782:	d81e      	bhi.n	80117c2 <GUI_Touch_Processing+0xbca>
 8011784:	b1ea      	cbz	r2, 80117c2 <GUI_Touch_Processing+0xbca>
 8011786:	4db1      	ldr	r5, [pc, #708]	; (8011a4c <GUI_Touch_Processing+0xe54>)
 8011788:	882d      	ldrh	r5, [r5, #0]
 801178a:	062d      	lsls	r5, r5, #24
 801178c:	d519      	bpl.n	80117c2 <GUI_Touch_Processing+0xbca>
					if(!(Source_Type&Source_C))
 801178e:	4cb0      	ldr	r4, [pc, #704]	; (8011a50 <GUI_Touch_Processing+0xe58>)
 8011790:	7822      	ldrb	r2, [r4, #0]
 8011792:	f012 0204 	ands.w	r2, r2, #4
 8011796:	f47f aacf 	bne.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 801179a:	2301      	movs	r3, #1
 801179c:	216c      	movs	r1, #108	; 0x6c
 801179e:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 80117a0:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80117a2:	f001 faac 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80117a6:	7822      	ldrb	r2, [r4, #0]
 80117a8:	2301      	movs	r3, #1
 80117aa:	f002 0202 	and.w	r2, r2, #2
 80117ae:	218f      	movs	r1, #143	; 0x8f
 80117b0:	20c8      	movs	r0, #200	; 0xc8
 80117b2:	f001 faa4 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 80117b6:	7822      	ldrb	r2, [r4, #0]
 80117b8:	f042 0204 	orr.w	r2, r2, #4
 80117bc:	7022      	strb	r2, [r4, #0]
 80117be:	2301      	movs	r3, #1
 80117c0:	e7b6      	b.n	8011730 <GUI_Touch_Processing+0xb38>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=213  & Touch_y <=(213+54)  && (Measure_Field&CIE_Lab)) //Source_D50
 80117c2:	f1a3 05d5 	sub.w	r5, r3, #213	; 0xd5
 80117c6:	2d36      	cmp	r5, #54	; 0x36
 80117c8:	d826      	bhi.n	8011818 <GUI_Touch_Processing+0xc20>
 80117ca:	b32a      	cbz	r2, 8011818 <GUI_Touch_Processing+0xc20>
 80117cc:	4d9f      	ldr	r5, [pc, #636]	; (8011a4c <GUI_Touch_Processing+0xe54>)
 80117ce:	882d      	ldrh	r5, [r5, #0]
 80117d0:	062f      	lsls	r7, r5, #24
 80117d2:	d521      	bpl.n	8011818 <GUI_Touch_Processing+0xc20>
					if(!(Source_Type&Source_D50))
 80117d4:	4c9e      	ldr	r4, [pc, #632]	; (8011a50 <GUI_Touch_Processing+0xe58>)
 80117d6:	7822      	ldrb	r2, [r4, #0]
 80117d8:	f012 0208 	ands.w	r2, r2, #8
 80117dc:	f47f aaac 	bne.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80117e0:	2301      	movs	r3, #1
 80117e2:	216c      	movs	r1, #108	; 0x6c
 80117e4:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 80117e6:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80117e8:	f001 fa89 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80117ec:	7822      	ldrb	r2, [r4, #0]
 80117ee:	2301      	movs	r3, #1
 80117f0:	f002 0202 	and.w	r2, r2, #2
 80117f4:	218f      	movs	r1, #143	; 0x8f
 80117f6:	20c8      	movs	r0, #200	; 0xc8
 80117f8:	f001 fa81 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80117fc:	7822      	ldrb	r2, [r4, #0]
 80117fe:	2301      	movs	r3, #1
 8011800:	f002 0204 	and.w	r2, r2, #4
 8011804:	21b2      	movs	r1, #178	; 0xb2
 8011806:	20c8      	movs	r0, #200	; 0xc8
 8011808:	f001 fa79 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type|=Source_D50, 0x01);
 801180c:	7822      	ldrb	r2, [r4, #0]
 801180e:	f042 0208 	orr.w	r2, r2, #8
 8011812:	7022      	strb	r2, [r4, #0]
 8011814:	2301      	movs	r3, #1
 8011816:	e793      	b.n	8011740 <GUI_Touch_Processing+0xb48>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=248  & Touch_y <=(248+54)  && (Measure_Field&CIE_Lab)) //Source_D55
 8011818:	f1a3 05f8 	sub.w	r5, r3, #248	; 0xf8
 801181c:	2d36      	cmp	r5, #54	; 0x36
 801181e:	d82e      	bhi.n	801187e <GUI_Touch_Processing+0xc86>
 8011820:	b36a      	cbz	r2, 801187e <GUI_Touch_Processing+0xc86>
 8011822:	4d8a      	ldr	r5, [pc, #552]	; (8011a4c <GUI_Touch_Processing+0xe54>)
 8011824:	882d      	ldrh	r5, [r5, #0]
 8011826:	062e      	lsls	r6, r5, #24
 8011828:	d529      	bpl.n	801187e <GUI_Touch_Processing+0xc86>
					if(!(Source_Type&Source_D55))
 801182a:	4c89      	ldr	r4, [pc, #548]	; (8011a50 <GUI_Touch_Processing+0xe58>)
 801182c:	7822      	ldrb	r2, [r4, #0]
 801182e:	f012 0210 	ands.w	r2, r2, #16
 8011832:	f47f aa81 	bne.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011836:	2301      	movs	r3, #1
 8011838:	216c      	movs	r1, #108	; 0x6c
 801183a:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801183c:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 801183e:	f001 fa5e 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011842:	7822      	ldrb	r2, [r4, #0]
 8011844:	2301      	movs	r3, #1
 8011846:	f002 0202 	and.w	r2, r2, #2
 801184a:	218f      	movs	r1, #143	; 0x8f
 801184c:	20c8      	movs	r0, #200	; 0xc8
 801184e:	f001 fa56 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011852:	7822      	ldrb	r2, [r4, #0]
 8011854:	2301      	movs	r3, #1
 8011856:	f002 0204 	and.w	r2, r2, #4
 801185a:	21b2      	movs	r1, #178	; 0xb2
 801185c:	20c8      	movs	r0, #200	; 0xc8
 801185e:	f001 fa4e 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011862:	7822      	ldrb	r2, [r4, #0]
 8011864:	2301      	movs	r3, #1
 8011866:	f002 0208 	and.w	r2, r2, #8
 801186a:	21d5      	movs	r1, #213	; 0xd5
 801186c:	20c8      	movs	r0, #200	; 0xc8
 801186e:	f001 fa46 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8011872:	7822      	ldrb	r2, [r4, #0]
 8011874:	f042 0210 	orr.w	r2, r2, #16
 8011878:	7022      	strb	r2, [r4, #0]
 801187a:	2301      	movs	r3, #1
 801187c:	e768      	b.n	8011750 <GUI_Touch_Processing+0xb58>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=283  & Touch_y <=(283+54)  && (Measure_Field&CIE_Lab)) //Source_D75
 801187e:	f46f 758d 	mvn.w	r5, #282	; 0x11a
 8011882:	442b      	add	r3, r5
 8011884:	2b36      	cmp	r3, #54	; 0x36
 8011886:	d836      	bhi.n	80118f6 <GUI_Touch_Processing+0xcfe>
 8011888:	b3aa      	cbz	r2, 80118f6 <GUI_Touch_Processing+0xcfe>
 801188a:	4b70      	ldr	r3, [pc, #448]	; (8011a4c <GUI_Touch_Processing+0xe54>)
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	061b      	lsls	r3, r3, #24
 8011890:	d531      	bpl.n	80118f6 <GUI_Touch_Processing+0xcfe>
					if(!(Source_Type&Source_D75))
 8011892:	4c6f      	ldr	r4, [pc, #444]	; (8011a50 <GUI_Touch_Processing+0xe58>)
 8011894:	7822      	ldrb	r2, [r4, #0]
 8011896:	f012 0220 	ands.w	r2, r2, #32
 801189a:	f47f aa4d 	bne.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 801189e:	2301      	movs	r3, #1
 80118a0:	216c      	movs	r1, #108	; 0x6c
 80118a2:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 80118a4:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80118a6:	f001 fa2a 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80118aa:	7822      	ldrb	r2, [r4, #0]
 80118ac:	2301      	movs	r3, #1
 80118ae:	f002 0202 	and.w	r2, r2, #2
 80118b2:	218f      	movs	r1, #143	; 0x8f
 80118b4:	20c8      	movs	r0, #200	; 0xc8
 80118b6:	f001 fa22 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80118ba:	7822      	ldrb	r2, [r4, #0]
 80118bc:	2301      	movs	r3, #1
 80118be:	f002 0204 	and.w	r2, r2, #4
 80118c2:	21b2      	movs	r1, #178	; 0xb2
 80118c4:	20c8      	movs	r0, #200	; 0xc8
 80118c6:	f001 fa1a 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80118ca:	7822      	ldrb	r2, [r4, #0]
 80118cc:	2301      	movs	r3, #1
 80118ce:	f002 0208 	and.w	r2, r2, #8
 80118d2:	21d5      	movs	r1, #213	; 0xd5
 80118d4:	20c8      	movs	r0, #200	; 0xc8
 80118d6:	f001 fa12 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80118da:	7822      	ldrb	r2, [r4, #0]
 80118dc:	2301      	movs	r3, #1
 80118de:	f002 0210 	and.w	r2, r2, #16
 80118e2:	21f8      	movs	r1, #248	; 0xf8
 80118e4:	20c8      	movs	r0, #200	; 0xc8
 80118e6:	f001 fa0a 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 80118ea:	7822      	ldrb	r2, [r4, #0]
 80118ec:	f042 0220 	orr.w	r2, r2, #32
 80118f0:	7022      	strb	r2, [r4, #0]
 80118f2:	2301      	movs	r3, #1
 80118f4:	e6ad      	b.n	8011652 <GUI_Touch_Processing+0xa5a>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 80118f6:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 80118fa:	2b36      	cmp	r3, #54	; 0x36
 80118fc:	d802      	bhi.n	8011904 <GUI_Touch_Processing+0xd0c>
 80118fe:	2800      	cmp	r0, #0
 8011900:	f47f ac82 	bne.w	8011208 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011904:	1e4b      	subs	r3, r1, #1
 8011906:	2b36      	cmp	r3, #54	; 0x36
 8011908:	d822      	bhi.n	8011950 <GUI_Touch_Processing+0xd58>
 801190a:	b308      	cbz	r0, 8011950 <GUI_Touch_Processing+0xd58>
					WriteSDFLASH_t(sdfile_cnt);
 801190c:	4b51      	ldr	r3, [pc, #324]	; (8011a54 <GUI_Touch_Processing+0xe5c>)
 801190e:	2100      	movs	r1, #0
 8011910:	8818      	ldrh	r0, [r3, #0]
 8011912:	f007 ffb3 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011916:	4b50      	ldr	r3, [pc, #320]	; (8011a58 <GUI_Touch_Processing+0xe60>)
 8011918:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801191a:	1e5a      	subs	r2, r3, #1
 801191c:	2a05      	cmp	r2, #5
 801191e:	d804      	bhi.n	801192a <GUI_Touch_Processing+0xd32>
 8011920:	e8df f002 	tbb	[pc, r2]
 8011924:	0a030306 	.word	0x0a030306
 8011928:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 801192a:	7023      	strb	r3, [r4, #0]
 801192c:	f7ff ba04 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011930:	2301      	movs	r3, #1
 8011932:	7023      	strb	r3, [r4, #0]
 8011934:	f7ff ba00 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011938:	2304      	movs	r3, #4
 801193a:	7023      	strb	r3, [r4, #0]
 801193c:	f7ff b9fc 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011940:	2306      	movs	r3, #6
 8011942:	7023      	strb	r3, [r4, #0]
 8011944:	f7ff b9f8 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011948:	2305      	movs	r3, #5
 801194a:	7023      	strb	r3, [r4, #0]
 801194c:	f7ff b9f4 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011950:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8011954:	e469      	b.n	801122a <GUI_Touch_Processing+0x632>
					preGUI_screen_state = GUI_screen_state;
 8011956:	4b41      	ldr	r3, [pc, #260]	; (8011a5c <GUI_Touch_Processing+0xe64>)
 8011958:	220b      	movs	r2, #11
 801195a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Next
 801195c:	4a40      	ldr	r2, [pc, #256]	; (8011a60 <GUI_Touch_Processing+0xe68>)
 801195e:	4b41      	ldr	r3, [pc, #260]	; (8011a64 <GUI_Touch_Processing+0xe6c>)
 8011960:	8811      	ldrh	r1, [r2, #0]
 8011962:	881b      	ldrh	r3, [r3, #0]
 8011964:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8011968:	2a36      	cmp	r2, #54	; 0x36
 801196a:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 801196e:	bf8c      	ite	hi
 8011970:	2200      	movhi	r2, #0
 8011972:	2201      	movls	r2, #1
 8011974:	2836      	cmp	r0, #54	; 0x36
 8011976:	d804      	bhi.n	8011982 <GUI_Touch_Processing+0xd8a>
 8011978:	b11a      	cbz	r2, 8011982 <GUI_Touch_Processing+0xd8a>
					GUI_screen_state = DataSet1_Screen;
 801197a:	2307      	movs	r3, #7
 801197c:	7023      	strb	r3, [r4, #0]
 801197e:	f7ff b9db 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //EbEr
 8011982:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 8011986:	2836      	cmp	r0, #54	; 0x36
 8011988:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 801198c:	bf8c      	ite	hi
 801198e:	2000      	movhi	r0, #0
 8011990:	2001      	movls	r0, #1
 8011992:	2d36      	cmp	r5, #54	; 0x36
 8011994:	d808      	bhi.n	80119a8 <GUI_Touch_Processing+0xdb0>
 8011996:	b138      	cbz	r0, 80119a8 <GUI_Touch_Processing+0xdb0>
					Measure_Field ^= lambda_d;
 8011998:	4b2c      	ldr	r3, [pc, #176]	; (8011a4c <GUI_Touch_Processing+0xe54>)
 801199a:	881a      	ldrh	r2, [r3, #0]
 801199c:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 80119a0:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 80119a2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80119a6:	e533      	b.n	8011410 <GUI_Touch_Processing+0x818>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=198  & Touch_y <=(198+54) ) //EbEr
 80119a8:	39c6      	subs	r1, #198	; 0xc6
 80119aa:	2936      	cmp	r1, #54	; 0x36
 80119ac:	d808      	bhi.n	80119c0 <GUI_Touch_Processing+0xdc8>
 80119ae:	b138      	cbz	r0, 80119c0 <GUI_Touch_Processing+0xdc8>
					Measure_Field ^= SP_measure;
 80119b0:	4b26      	ldr	r3, [pc, #152]	; (8011a4c <GUI_Touch_Processing+0xe54>)
 80119b2:	881a      	ldrh	r2, [r3, #0]
 80119b4:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80119b8:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&SP_measure);
 80119ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80119be:	e478      	b.n	80112b2 <GUI_Touch_Processing+0x6ba>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 80119c0:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 80119c4:	2936      	cmp	r1, #54	; 0x36
 80119c6:	d802      	bhi.n	80119ce <GUI_Touch_Processing+0xdd6>
 80119c8:	2a00      	cmp	r2, #0
 80119ca:	f47f ac1d 	bne.w	8011208 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 80119ce:	1e59      	subs	r1, r3, #1
 80119d0:	2936      	cmp	r1, #54	; 0x36
 80119d2:	f200 82af 	bhi.w	8011f34 <GUI_Touch_Processing+0x133c>
 80119d6:	2a00      	cmp	r2, #0
 80119d8:	f000 82ac 	beq.w	8011f34 <GUI_Touch_Processing+0x133c>
					WriteSDFLASH_t(sdfile_cnt);
 80119dc:	4b1d      	ldr	r3, [pc, #116]	; (8011a54 <GUI_Touch_Processing+0xe5c>)
 80119de:	2100      	movs	r1, #0
 80119e0:	8818      	ldrh	r0, [r3, #0]
 80119e2:	f007 ff4b 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80119e6:	4b1c      	ldr	r3, [pc, #112]	; (8011a58 <GUI_Touch_Processing+0xe60>)
 80119e8:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80119ea:	1e5a      	subs	r2, r3, #1
 80119ec:	2a05      	cmp	r2, #5
 80119ee:	d804      	bhi.n	80119fa <GUI_Touch_Processing+0xe02>
 80119f0:	e8df f002 	tbb	[pc, r2]
 80119f4:	0a030306 	.word	0x0a030306
 80119f8:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 80119fa:	7023      	strb	r3, [r4, #0]
 80119fc:	f7ff b99c 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011a00:	2301      	movs	r3, #1
 8011a02:	7023      	strb	r3, [r4, #0]
 8011a04:	f7ff b998 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011a08:	2304      	movs	r3, #4
 8011a0a:	7023      	strb	r3, [r4, #0]
 8011a0c:	f7ff b994 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011a10:	2306      	movs	r3, #6
 8011a12:	7023      	strb	r3, [r4, #0]
 8011a14:	f7ff b990 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011a18:	2305      	movs	r3, #5
 8011a1a:	7023      	strb	r3, [r4, #0]
 8011a1c:	f7ff b98c 	b.w	8010d38 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011a20:	4b0e      	ldr	r3, [pc, #56]	; (8011a5c <GUI_Touch_Processing+0xe64>)
 8011a22:	220c      	movs	r2, #12
 8011a24:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011a26:	4a0e      	ldr	r2, [pc, #56]	; (8011a60 <GUI_Touch_Processing+0xe68>)
 8011a28:	4b0e      	ldr	r3, [pc, #56]	; (8011a64 <GUI_Touch_Processing+0xe6c>)
 8011a2a:	8812      	ldrh	r2, [r2, #0]
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	f5a2 71d5 	sub.w	r1, r2, #426	; 0x1aa
 8011a32:	2936      	cmp	r1, #54	; 0x36
 8011a34:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011a38:	bf8c      	ite	hi
 8011a3a:	2100      	movhi	r1, #0
 8011a3c:	2101      	movls	r1, #1
 8011a3e:	2836      	cmp	r0, #54	; 0x36
 8011a40:	d812      	bhi.n	8011a68 <GUI_Touch_Processing+0xe70>
 8011a42:	b189      	cbz	r1, 8011a68 <GUI_Touch_Processing+0xe70>
					GUI_screen_state = GraphSet2_Screen;
 8011a44:	230d      	movs	r3, #13
 8011a46:	7023      	strb	r3, [r4, #0]
 8011a48:	f7ff b976 	b.w	8010d38 <GUI_Touch_Processing+0x140>
 8011a4c:	200056f6 	.word	0x200056f6
 8011a50:	20090a69 	.word	0x20090a69
 8011a54:	2000571e 	.word	0x2000571e
 8011a58:	20090a65 	.word	0x20090a65
 8011a5c:	2000022a 	.word	0x2000022a
 8011a60:	20054934 	.word	0x20054934
 8011a64:	20054932 	.word	0x20054932
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 8011a68:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 8011a6c:	2836      	cmp	r0, #54	; 0x36
 8011a6e:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 8011a72:	bf8c      	ite	hi
 8011a74:	2000      	movhi	r0, #0
 8011a76:	2001      	movls	r0, #1
 8011a78:	2d36      	cmp	r5, #54	; 0x36
 8011a7a:	d802      	bhi.n	8011a82 <GUI_Touch_Processing+0xe8a>
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	f47f aae7 	bne.w	8011050 <GUI_Touch_Processing+0x458>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 8011a82:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 8011a86:	2d36      	cmp	r5, #54	; 0x36
 8011a88:	d802      	bhi.n	8011a90 <GUI_Touch_Processing+0xe98>
 8011a8a:	2800      	cmp	r0, #0
 8011a8c:	f47f ab0c 	bne.w	80110a8 <GUI_Touch_Processing+0x4b0>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //PPF_Bands
 8011a90:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 8011a94:	2836      	cmp	r0, #54	; 0x36
 8011a96:	d80c      	bhi.n	8011ab2 <GUI_Touch_Processing+0xeba>
 8011a98:	f46f 78a3 	mvn.w	r8, #326	; 0x146
 8011a9c:	eb02 0008 	add.w	r0, r2, r8
 8011aa0:	2836      	cmp	r0, #54	; 0x36
 8011aa2:	d806      	bhi.n	8011ab2 <GUI_Touch_Processing+0xeba>
					Graph_Field ^= PPF_Bands;
 8011aa4:	4ba6      	ldr	r3, [pc, #664]	; (8011d40 <GUI_Touch_Processing+0x1148>)
 8011aa6:	781a      	ldrb	r2, [r3, #0]
 8011aa8:	f082 0201 	eor.w	r2, r2, #1
 8011aac:	701a      	strb	r2, [r3, #0]
 8011aae:	f7ff bb27 	b.w	8011100 <GUI_Touch_Processing+0x508>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011ab2:	f1a3 00d9 	sub.w	r0, r3, #217	; 0xd9
 8011ab6:	2836      	cmp	r0, #54	; 0x36
 8011ab8:	d802      	bhi.n	8011ac0 <GUI_Touch_Processing+0xec8>
 8011aba:	2900      	cmp	r1, #0
 8011abc:	f47f aba4 	bne.w	8011208 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011ac0:	1e58      	subs	r0, r3, #1
 8011ac2:	2836      	cmp	r0, #54	; 0x36
 8011ac4:	d822      	bhi.n	8011b0c <GUI_Touch_Processing+0xf14>
 8011ac6:	b309      	cbz	r1, 8011b0c <GUI_Touch_Processing+0xf14>
					WriteSDFLASH_t(sdfile_cnt);
 8011ac8:	4b9e      	ldr	r3, [pc, #632]	; (8011d44 <GUI_Touch_Processing+0x114c>)
 8011aca:	2100      	movs	r1, #0
 8011acc:	8818      	ldrh	r0, [r3, #0]
 8011ace:	f007 fed5 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011ad2:	4b9d      	ldr	r3, [pc, #628]	; (8011d48 <GUI_Touch_Processing+0x1150>)
 8011ad4:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011ad6:	1e5a      	subs	r2, r3, #1
 8011ad8:	2a05      	cmp	r2, #5
 8011ada:	d804      	bhi.n	8011ae6 <GUI_Touch_Processing+0xeee>
 8011adc:	e8df f002 	tbb	[pc, r2]
 8011ae0:	0a030306 	.word	0x0a030306
 8011ae4:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8011ae6:	7023      	strb	r3, [r4, #0]
 8011ae8:	f7ff b926 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011aec:	2301      	movs	r3, #1
 8011aee:	7023      	strb	r3, [r4, #0]
 8011af0:	f7ff b922 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011af4:	2304      	movs	r3, #4
 8011af6:	7023      	strb	r3, [r4, #0]
 8011af8:	f7ff b91e 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011afc:	2306      	movs	r3, #6
 8011afe:	7023      	strb	r3, [r4, #0]
 8011b00:	f7ff b91a 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011b04:	2305      	movs	r3, #5
 8011b06:	7023      	strb	r3, [r4, #0]
 8011b08:	f7ff b916 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011b0c:	f1a3 0037 	sub.w	r0, r3, #55	; 0x37
 8011b10:	2836      	cmp	r0, #54	; 0x36
 8011b12:	d802      	bhi.n	8011b1a <GUI_Touch_Processing+0xf22>
 8011b14:	2900      	cmp	r1, #0
 8011b16:	f47f a917 	bne.w	8010d48 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8011b1a:	3b08      	subs	r3, #8
 8011b1c:	2bf2      	cmp	r3, #242	; 0xf2
 8011b1e:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
 8011b22:	bf8c      	ite	hi
 8011b24:	2300      	movhi	r3, #0
 8011b26:	2301      	movls	r3, #1
 8011b28:	2928      	cmp	r1, #40	; 0x28
 8011b2a:	d810      	bhi.n	8011b4e <GUI_Touch_Processing+0xf56>
 8011b2c:	b17b      	cbz	r3, 8011b4e <GUI_Touch_Processing+0xf56>
					if (Language_status == Ru) Language_status=En;
 8011b2e:	4b87      	ldr	r3, [pc, #540]	; (8011d4c <GUI_Touch_Processing+0x1154>)
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	b923      	cbnz	r3, 8011b3e <GUI_Touch_Processing+0xf46>
 8011b34:	4b85      	ldr	r3, [pc, #532]	; (8011d4c <GUI_Touch_Processing+0x1154>)
 8011b36:	2201      	movs	r2, #1
 8011b38:	701a      	strb	r2, [r3, #0]
 8011b3a:	f7ff b8fd 	b.w	8010d38 <GUI_Touch_Processing+0x140>
					else if (Language_status == En) Language_status=Ru;
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	f47f a8fa 	bne.w	8010d38 <GUI_Touch_Processing+0x140>
 8011b44:	4b81      	ldr	r3, [pc, #516]	; (8011d4c <GUI_Touch_Processing+0x1154>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	701a      	strb	r2, [r3, #0]
 8011b4a:	f7ff b8f5 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 8011b4e:	3a7c      	subs	r2, #124	; 0x7c
 8011b50:	2a32      	cmp	r2, #50	; 0x32
 8011b52:	f63f a8f1 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f43f a8ee 	beq.w	8010d38 <GUI_Touch_Processing+0x140>
					GUI_screen_state = Information_Screen;
 8011b5c:	2311      	movs	r3, #17
 8011b5e:	7023      	strb	r3, [r4, #0]
 8011b60:	f7ff b8ea 	b.w	8010d38 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011b64:	4b7a      	ldr	r3, [pc, #488]	; (8011d50 <GUI_Touch_Processing+0x1158>)
 8011b66:	220d      	movs	r2, #13
 8011b68:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011b6a:	4a7a      	ldr	r2, [pc, #488]	; (8011d54 <GUI_Touch_Processing+0x115c>)
 8011b6c:	4b7a      	ldr	r3, [pc, #488]	; (8011d58 <GUI_Touch_Processing+0x1160>)
 8011b6e:	8811      	ldrh	r1, [r2, #0]
 8011b70:	881b      	ldrh	r3, [r3, #0]
 8011b72:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8011b76:	2a36      	cmp	r2, #54	; 0x36
 8011b78:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011b7c:	bf8c      	ite	hi
 8011b7e:	2200      	movhi	r2, #0
 8011b80:	2201      	movls	r2, #1
 8011b82:	2836      	cmp	r0, #54	; 0x36
 8011b84:	d804      	bhi.n	8011b90 <GUI_Touch_Processing+0xf98>
 8011b86:	b11a      	cbz	r2, 8011b90 <GUI_Touch_Processing+0xf98>
					GUI_screen_state = GraphSet1_Screen;
 8011b88:	230c      	movs	r3, #12
 8011b8a:	7023      	strb	r3, [r4, #0]
 8011b8c:	f7ff b8d4 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //PPF_Bands
 8011b90:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 8011b94:	2836      	cmp	r0, #54	; 0x36
 8011b96:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 8011b9a:	bf8c      	ite	hi
 8011b9c:	2000      	movhi	r0, #0
 8011b9e:	2001      	movls	r0, #1
 8011ba0:	2d36      	cmp	r5, #54	; 0x36
 8011ba2:	d807      	bhi.n	8011bb4 <GUI_Touch_Processing+0xfbc>
 8011ba4:	b130      	cbz	r0, 8011bb4 <GUI_Touch_Processing+0xfbc>
					Graph_Field ^= EbEr_graph;
 8011ba6:	4b66      	ldr	r3, [pc, #408]	; (8011d40 <GUI_Touch_Processing+0x1148>)
 8011ba8:	781a      	ldrb	r2, [r3, #0]
 8011baa:	f082 0202 	eor.w	r2, r2, #2
 8011bae:	701a      	strb	r2, [r3, #0]
 8011bb0:	f7ff bb62 	b.w	8011278 <GUI_Touch_Processing+0x680>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //PPF_Bands
 8011bb4:	3985      	subs	r1, #133	; 0x85
 8011bb6:	2936      	cmp	r1, #54	; 0x36
 8011bb8:	d807      	bhi.n	8011bca <GUI_Touch_Processing+0xfd2>
 8011bba:	b130      	cbz	r0, 8011bca <GUI_Touch_Processing+0xfd2>
					Graph_Field ^= V_lambda;
 8011bbc:	4b60      	ldr	r3, [pc, #384]	; (8011d40 <GUI_Touch_Processing+0x1148>)
 8011bbe:	781a      	ldrb	r2, [r3, #0]
 8011bc0:	f082 0204 	eor.w	r2, r2, #4
 8011bc4:	701a      	strb	r2, [r3, #0]
 8011bc6:	f7ff bb64 	b.w	8011292 <GUI_Touch_Processing+0x69a>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011bca:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8011bce:	2936      	cmp	r1, #54	; 0x36
 8011bd0:	d802      	bhi.n	8011bd8 <GUI_Touch_Processing+0xfe0>
 8011bd2:	2a00      	cmp	r2, #0
 8011bd4:	f47f ab18 	bne.w	8011208 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011bd8:	1e59      	subs	r1, r3, #1
 8011bda:	2936      	cmp	r1, #54	; 0x36
 8011bdc:	f200 81aa 	bhi.w	8011f34 <GUI_Touch_Processing+0x133c>
 8011be0:	2a00      	cmp	r2, #0
 8011be2:	f000 81a7 	beq.w	8011f34 <GUI_Touch_Processing+0x133c>
					WriteSDFLASH_t(sdfile_cnt);
 8011be6:	4b57      	ldr	r3, [pc, #348]	; (8011d44 <GUI_Touch_Processing+0x114c>)
 8011be8:	2100      	movs	r1, #0
 8011bea:	8818      	ldrh	r0, [r3, #0]
 8011bec:	f007 fe46 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011bf0:	4b55      	ldr	r3, [pc, #340]	; (8011d48 <GUI_Touch_Processing+0x1150>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011bf4:	1e5a      	subs	r2, r3, #1
 8011bf6:	2a05      	cmp	r2, #5
 8011bf8:	d804      	bhi.n	8011c04 <GUI_Touch_Processing+0x100c>
 8011bfa:	e8df f002 	tbb	[pc, r2]
 8011bfe:	0306      	.short	0x0306
 8011c00:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8011c04:	7023      	strb	r3, [r4, #0]
 8011c06:	f7ff b897 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	7023      	strb	r3, [r4, #0]
 8011c0e:	f7ff b893 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011c12:	2304      	movs	r3, #4
 8011c14:	7023      	strb	r3, [r4, #0]
 8011c16:	f7ff b88f 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011c1a:	2306      	movs	r3, #6
 8011c1c:	7023      	strb	r3, [r4, #0]
 8011c1e:	f7ff b88b 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011c22:	2305      	movs	r3, #5
 8011c24:	7023      	strb	r3, [r4, #0]
 8011c26:	f7ff b887 	b.w	8010d38 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011c2a:	4b49      	ldr	r3, [pc, #292]	; (8011d50 <GUI_Touch_Processing+0x1158>)
 8011c2c:	220e      	movs	r2, #14
 8011c2e:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011c30:	4b49      	ldr	r3, [pc, #292]	; (8011d58 <GUI_Touch_Processing+0x1160>)
 8011c32:	881a      	ldrh	r2, [r3, #0]
 8011c34:	4b47      	ldr	r3, [pc, #284]	; (8011d54 <GUI_Touch_Processing+0x115c>)
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 8011c3c:	2d36      	cmp	r5, #54	; 0x36
 8011c3e:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011c42:	bf8c      	ite	hi
 8011c44:	2500      	movhi	r5, #0
 8011c46:	2501      	movls	r5, #1
 8011c48:	2936      	cmp	r1, #54	; 0x36
 8011c4a:	d804      	bhi.n	8011c56 <GUI_Touch_Processing+0x105e>
 8011c4c:	b11d      	cbz	r5, 8011c56 <GUI_Touch_Processing+0x105e>
					GUI_screen_state = ColorSet2_Screen;
 8011c4e:	230f      	movs	r3, #15
 8011c50:	7023      	strb	r3, [r4, #0]
 8011c52:	f7ff b871 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 8011c56:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 8011c5a:	2936      	cmp	r1, #54	; 0x36
 8011c5c:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 8011c60:	bf8c      	ite	hi
 8011c62:	2100      	movhi	r1, #0
 8011c64:	2101      	movls	r1, #1
 8011c66:	2836      	cmp	r0, #54	; 0x36
 8011c68:	d802      	bhi.n	8011c70 <GUI_Touch_Processing+0x1078>
 8011c6a:	2900      	cmp	r1, #0
 8011c6c:	f47f a9f0 	bne.w	8011050 <GUI_Touch_Processing+0x458>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 8011c70:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8011c74:	2836      	cmp	r0, #54	; 0x36
 8011c76:	d802      	bhi.n	8011c7e <GUI_Touch_Processing+0x1086>
 8011c78:	2900      	cmp	r1, #0
 8011c7a:	f47f aa15 	bne.w	80110a8 <GUI_Touch_Processing+0x4b0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 8011c7e:	f1a2 0008 	sub.w	r0, r2, #8
 8011c82:	28f2      	cmp	r0, #242	; 0xf2
 8011c84:	f1a3 067c 	sub.w	r6, r3, #124	; 0x7c
 8011c88:	bf8c      	ite	hi
 8011c8a:	2000      	movhi	r0, #0
 8011c8c:	2001      	movls	r0, #1
 8011c8e:	2e32      	cmp	r6, #50	; 0x32
 8011c90:	d802      	bhi.n	8011c98 <GUI_Touch_Processing+0x10a0>
 8011c92:	2800      	cmp	r0, #0
 8011c94:	f47f af62 	bne.w	8011b5c <GUI_Touch_Processing+0xf64>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //Color_CIE_xy
 8011c98:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 8011c9c:	eb03 060c 	add.w	r6, r3, ip
 8011ca0:	2e36      	cmp	r6, #54	; 0x36
 8011ca2:	d80c      	bhi.n	8011cbe <GUI_Touch_Processing+0x10c6>
 8011ca4:	b159      	cbz	r1, 8011cbe <GUI_Touch_Processing+0x10c6>
					if(!(Color_Field&Color_CIE_xy))
 8011ca6:	4a2d      	ldr	r2, [pc, #180]	; (8011d5c <GUI_Touch_Processing+0x1164>)
 8011ca8:	7813      	ldrb	r3, [r2, #0]
 8011caa:	07df      	lsls	r7, r3, #31
 8011cac:	f53f a844 	bmi.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 327, Color_Field|=Color_CIE_xy, 0x01);
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	7013      	strb	r3, [r2, #0]
 8011cb4:	f240 1147 	movw	r1, #327	; 0x147
 8011cb8:	461a      	mov	r2, r3
 8011cba:	f7ff bbd0 	b.w	801145e <GUI_Touch_Processing+0x866>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011cbe:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8011cc2:	2936      	cmp	r1, #54	; 0x36
 8011cc4:	d802      	bhi.n	8011ccc <GUI_Touch_Processing+0x10d4>
 8011cc6:	2d00      	cmp	r5, #0
 8011cc8:	f47f aa9e 	bne.w	8011208 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011ccc:	1e51      	subs	r1, r2, #1
 8011cce:	2936      	cmp	r1, #54	; 0x36
 8011cd0:	d873      	bhi.n	8011dba <GUI_Touch_Processing+0x11c2>
 8011cd2:	2d00      	cmp	r5, #0
 8011cd4:	d071      	beq.n	8011dba <GUI_Touch_Processing+0x11c2>
					if(preColor_Field != Color_Field)
 8011cd6:	4d21      	ldr	r5, [pc, #132]	; (8011d5c <GUI_Touch_Processing+0x1164>)
 8011cd8:	4921      	ldr	r1, [pc, #132]	; (8011d60 <GUI_Touch_Processing+0x1168>)
 8011cda:	782b      	ldrb	r3, [r5, #0]
 8011cdc:	7809      	ldrb	r1, [r1, #0]
 8011cde:	4299      	cmp	r1, r3
 8011ce0:	d01f      	beq.n	8011d22 <GUI_Touch_Processing+0x112a>
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011ce2:	07de      	lsls	r6, r3, #31
 8011ce4:	d546      	bpl.n	8011d74 <GUI_Touch_Processing+0x117c>
 8011ce6:	4b1f      	ldr	r3, [pc, #124]	; (8011d64 <GUI_Touch_Processing+0x116c>)
 8011ce8:	481f      	ldr	r0, [pc, #124]	; (8011d68 <GUI_Touch_Processing+0x1170>)
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	f013 0f01 	tst.w	r3, #1
 8011cf0:	bf18      	it	ne
 8011cf2:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8011cf6:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8011cfa:	f007 fcc1 	bl	8019680 <Image_load>
						Locus.pData = (uint16_t *)bmp;
 8011cfe:	4b1b      	ldr	r3, [pc, #108]	; (8011d6c <GUI_Touch_Processing+0x1174>)
 8011d00:	4a1b      	ldr	r2, [pc, #108]	; (8011d70 <GUI_Touch_Processing+0x1178>)
 8011d02:	605a      	str	r2, [r3, #4]
						Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8011d04:	782a      	ldrb	r2, [r5, #0]
 8011d06:	f002 0101 	and.w	r1, r2, #1
 8011d0a:	2900      	cmp	r1, #0
 8011d0c:	bf0c      	ite	eq
 8011d0e:	21fa      	moveq	r1, #250	; 0xfa
 8011d10:	21d8      	movne	r1, #216	; 0xd8
 8011d12:	8019      	strh	r1, [r3, #0]
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011d14:	d13c      	bne.n	8011d90 <GUI_Touch_Processing+0x1198>
 8011d16:	f012 0f04 	tst.w	r2, #4
 8011d1a:	bf0c      	ite	eq
 8011d1c:	22fa      	moveq	r2, #250	; 0xfa
 8011d1e:	22ea      	movne	r2, #234	; 0xea
 8011d20:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8011d22:	4b08      	ldr	r3, [pc, #32]	; (8011d44 <GUI_Touch_Processing+0x114c>)
 8011d24:	2100      	movs	r1, #0
 8011d26:	8818      	ldrh	r0, [r3, #0]
 8011d28:	f007 fda8 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011d2c:	4b06      	ldr	r3, [pc, #24]	; (8011d48 <GUI_Touch_Processing+0x1150>)
 8011d2e:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011d30:	1e5a      	subs	r2, r3, #1
 8011d32:	2a05      	cmp	r2, #5
 8011d34:	d82e      	bhi.n	8011d94 <GUI_Touch_Processing+0x119c>
 8011d36:	e8df f002 	tbb	[pc, r2]
 8011d3a:	2d30      	.short	0x2d30
 8011d3c:	383c342d 	.word	0x383c342d
 8011d40:	200056f2 	.word	0x200056f2
 8011d44:	2000571e 	.word	0x2000571e
 8011d48:	20090a65 	.word	0x20090a65
 8011d4c:	200056f3 	.word	0x200056f3
 8011d50:	2000022a 	.word	0x2000022a
 8011d54:	20054934 	.word	0x20054934
 8011d58:	20054932 	.word	0x20054932
 8011d5c:	200056ef 	.word	0x200056ef
 8011d60:	20005719 	.word	0x20005719
 8011d64:	200056f4 	.word	0x200056f4
 8011d68:	00051d00 	.word	0x00051d00
 8011d6c:	20091000 	.word	0x20091000
 8011d70:	20055942 	.word	0x20055942
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011d74:	f003 0304 	and.w	r3, r3, #4
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	4ba9      	ldr	r3, [pc, #676]	; (8012020 <GUI_Touch_Processing+0x1428>)
 8011d7c:	48a9      	ldr	r0, [pc, #676]	; (8012024 <GUI_Touch_Processing+0x142c>)
 8011d7e:	bf18      	it	ne
 8011d80:	4618      	movne	r0, r3
 8011d82:	f24e 4384 	movw	r3, #58500	; 0xe484
 8011d86:	f24f 4124 	movw	r1, #62500	; 0xf424
 8011d8a:	bf18      	it	ne
 8011d8c:	4619      	movne	r1, r3
 8011d8e:	e7b4      	b.n	8011cfa <GUI_Touch_Processing+0x1102>
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011d90:	22fa      	movs	r2, #250	; 0xfa
 8011d92:	e7c5      	b.n	8011d20 <GUI_Touch_Processing+0x1128>
					GUI_screen_state = Prev_Inf_Screen;
 8011d94:	7023      	strb	r3, [r4, #0]
 8011d96:	f7fe bfcf 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	7023      	strb	r3, [r4, #0]
 8011d9e:	f7fe bfcb 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011da2:	2304      	movs	r3, #4
 8011da4:	7023      	strb	r3, [r4, #0]
 8011da6:	f7fe bfc7 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011daa:	2306      	movs	r3, #6
 8011dac:	7023      	strb	r3, [r4, #0]
 8011dae:	f7fe bfc3 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011db2:	2305      	movs	r3, #5
 8011db4:	7023      	strb	r3, [r4, #0]
 8011db6:	f7fe bfbf 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011dba:	3a37      	subs	r2, #55	; 0x37
 8011dbc:	2a36      	cmp	r2, #54	; 0x36
 8011dbe:	d802      	bhi.n	8011dc6 <GUI_Touch_Processing+0x11ce>
 8011dc0:	2d00      	cmp	r5, #0
 8011dc2:	f47e afc1 	bne.w	8010d48 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8011dc6:	3b50      	subs	r3, #80	; 0x50
 8011dc8:	2b28      	cmp	r3, #40	; 0x28
 8011dca:	f63e afb5 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	f47f aead 	bne.w	8011b2e <GUI_Touch_Processing+0xf36>
 8011dd4:	f7fe bfb0 	b.w	8010d38 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011dd8:	4b93      	ldr	r3, [pc, #588]	; (8012028 <GUI_Touch_Processing+0x1430>)
 8011dda:	220f      	movs	r2, #15
 8011ddc:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011dde:	4a93      	ldr	r2, [pc, #588]	; (801202c <GUI_Touch_Processing+0x1434>)
 8011de0:	4b93      	ldr	r3, [pc, #588]	; (8012030 <GUI_Touch_Processing+0x1438>)
 8011de2:	8811      	ldrh	r1, [r2, #0]
 8011de4:	881b      	ldrh	r3, [r3, #0]
 8011de6:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8011dea:	2a36      	cmp	r2, #54	; 0x36
 8011dec:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011df0:	bf8c      	ite	hi
 8011df2:	2200      	movhi	r2, #0
 8011df4:	2201      	movls	r2, #1
 8011df6:	2836      	cmp	r0, #54	; 0x36
 8011df8:	d804      	bhi.n	8011e04 <GUI_Touch_Processing+0x120c>
 8011dfa:	b11a      	cbz	r2, 8011e04 <GUI_Touch_Processing+0x120c>
					GUI_screen_state = ColorSet1_Screen;
 8011dfc:	230e      	movs	r3, #14
 8011dfe:	7023      	strb	r3, [r4, #0]
 8011e00:	f7fe bf9a 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //Color_CIE_Luv
 8011e04:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 8011e08:	2836      	cmp	r0, #54	; 0x36
 8011e0a:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 8011e0e:	bf8c      	ite	hi
 8011e10:	2000      	movhi	r0, #0
 8011e12:	2001      	movls	r0, #1
 8011e14:	2d36      	cmp	r5, #54	; 0x36
 8011e16:	d813      	bhi.n	8011e40 <GUI_Touch_Processing+0x1248>
 8011e18:	b190      	cbz	r0, 8011e40 <GUI_Touch_Processing+0x1248>
					if(!(Color_Field&Color_CIE_Luv))
 8011e1a:	4c86      	ldr	r4, [pc, #536]	; (8012034 <GUI_Touch_Processing+0x143c>)
 8011e1c:	7823      	ldrb	r3, [r4, #0]
 8011e1e:	075d      	lsls	r5, r3, #29
 8011e20:	f53e af8a 	bmi.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 70, Color_Field|=Color_CIE_Luv, 0x01);
 8011e24:	2204      	movs	r2, #4
 8011e26:	2301      	movs	r3, #1
 8011e28:	2146      	movs	r1, #70	; 0x46
 8011e2a:	20c8      	movs	r0, #200	; 0xc8
 8011e2c:	7022      	strb	r2, [r4, #0]
 8011e2e:	f000 ff66 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 8011e32:	7822      	ldrb	r2, [r4, #0]
 8011e34:	2301      	movs	r3, #1
 8011e36:	f002 0202 	and.w	r2, r2, #2
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8011e3a:	2185      	movs	r1, #133	; 0x85
 8011e3c:	f7ff bb0f 	b.w	801145e <GUI_Touch_Processing+0x866>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //Color_CIE_Lab
 8011e40:	3985      	subs	r1, #133	; 0x85
 8011e42:	2936      	cmp	r1, #54	; 0x36
 8011e44:	d812      	bhi.n	8011e6c <GUI_Touch_Processing+0x1274>
 8011e46:	b188      	cbz	r0, 8011e6c <GUI_Touch_Processing+0x1274>
					if(!(Color_Field&Color_CIE_Lab))
 8011e48:	4c7a      	ldr	r4, [pc, #488]	; (8012034 <GUI_Touch_Processing+0x143c>)
 8011e4a:	7822      	ldrb	r2, [r4, #0]
 8011e4c:	f012 0202 	ands.w	r2, r2, #2
 8011e50:	f47e af72 	bne.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8011e54:	2301      	movs	r3, #1
 8011e56:	2146      	movs	r1, #70	; 0x46
 8011e58:	20c8      	movs	r0, #200	; 0xc8
						Color_Field = 0;
 8011e5a:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8011e5c:	f000 ff4f 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8011e60:	7822      	ldrb	r2, [r4, #0]
 8011e62:	f042 0202 	orr.w	r2, r2, #2
 8011e66:	7022      	strb	r2, [r4, #0]
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e7e6      	b.n	8011e3a <GUI_Touch_Processing+0x1242>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011e6c:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8011e70:	2936      	cmp	r1, #54	; 0x36
 8011e72:	d802      	bhi.n	8011e7a <GUI_Touch_Processing+0x1282>
 8011e74:	2a00      	cmp	r2, #0
 8011e76:	f47f a9c7 	bne.w	8011208 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011e7a:	1e59      	subs	r1, r3, #1
 8011e7c:	2936      	cmp	r1, #54	; 0x36
 8011e7e:	d859      	bhi.n	8011f34 <GUI_Touch_Processing+0x133c>
 8011e80:	2a00      	cmp	r2, #0
 8011e82:	d057      	beq.n	8011f34 <GUI_Touch_Processing+0x133c>
					if(preColor_Field != Color_Field)
 8011e84:	4d6b      	ldr	r5, [pc, #428]	; (8012034 <GUI_Touch_Processing+0x143c>)
 8011e86:	496c      	ldr	r1, [pc, #432]	; (8012038 <GUI_Touch_Processing+0x1440>)
 8011e88:	782b      	ldrb	r3, [r5, #0]
 8011e8a:	7809      	ldrb	r1, [r1, #0]
 8011e8c:	4299      	cmp	r1, r3
 8011e8e:	d01f      	beq.n	8011ed0 <GUI_Touch_Processing+0x12d8>
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011e90:	07d8      	lsls	r0, r3, #31
 8011e92:	d52c      	bpl.n	8011eee <GUI_Touch_Processing+0x12f6>
 8011e94:	4b69      	ldr	r3, [pc, #420]	; (801203c <GUI_Touch_Processing+0x1444>)
 8011e96:	486a      	ldr	r0, [pc, #424]	; (8012040 <GUI_Touch_Processing+0x1448>)
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	f013 0f01 	tst.w	r3, #1
 8011e9e:	bf18      	it	ne
 8011ea0:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8011ea4:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8011ea8:	f007 fbea 	bl	8019680 <Image_load>
								Locus.pData = (uint16_t *)bmp;
 8011eac:	4b65      	ldr	r3, [pc, #404]	; (8012044 <GUI_Touch_Processing+0x144c>)
 8011eae:	4a66      	ldr	r2, [pc, #408]	; (8012048 <GUI_Touch_Processing+0x1450>)
 8011eb0:	605a      	str	r2, [r3, #4]
								Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8011eb2:	782a      	ldrb	r2, [r5, #0]
 8011eb4:	f002 0101 	and.w	r1, r2, #1
 8011eb8:	2900      	cmp	r1, #0
 8011eba:	bf0c      	ite	eq
 8011ebc:	21fa      	moveq	r1, #250	; 0xfa
 8011ebe:	21d8      	movne	r1, #216	; 0xd8
 8011ec0:	8019      	strh	r1, [r3, #0]
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011ec2:	d122      	bne.n	8011f0a <GUI_Touch_Processing+0x1312>
 8011ec4:	f012 0f04 	tst.w	r2, #4
 8011ec8:	bf0c      	ite	eq
 8011eca:	22fa      	moveq	r2, #250	; 0xfa
 8011ecc:	22ea      	movne	r2, #234	; 0xea
 8011ece:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8011ed0:	4b5e      	ldr	r3, [pc, #376]	; (801204c <GUI_Touch_Processing+0x1454>)
 8011ed2:	2100      	movs	r1, #0
 8011ed4:	8818      	ldrh	r0, [r3, #0]
 8011ed6:	f007 fcd1 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011eda:	4b5d      	ldr	r3, [pc, #372]	; (8012050 <GUI_Touch_Processing+0x1458>)
 8011edc:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011ede:	1e5a      	subs	r2, r3, #1
 8011ee0:	2a05      	cmp	r2, #5
 8011ee2:	d814      	bhi.n	8011f0e <GUI_Touch_Processing+0x1316>
 8011ee4:	e8df f002 	tbb	[pc, r2]
 8011ee8:	1a131316 	.word	0x1a131316
 8011eec:	1e22      	.short	0x1e22
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011eee:	f003 0304 	and.w	r3, r3, #4
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	4b4a      	ldr	r3, [pc, #296]	; (8012020 <GUI_Touch_Processing+0x1428>)
 8011ef6:	484b      	ldr	r0, [pc, #300]	; (8012024 <GUI_Touch_Processing+0x142c>)
 8011ef8:	bf18      	it	ne
 8011efa:	4618      	movne	r0, r3
 8011efc:	f24e 4384 	movw	r3, #58500	; 0xe484
 8011f00:	f24f 4124 	movw	r1, #62500	; 0xf424
 8011f04:	bf18      	it	ne
 8011f06:	4619      	movne	r1, r3
 8011f08:	e7ce      	b.n	8011ea8 <GUI_Touch_Processing+0x12b0>
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011f0a:	22fa      	movs	r2, #250	; 0xfa
 8011f0c:	e7df      	b.n	8011ece <GUI_Touch_Processing+0x12d6>
					GUI_screen_state = Prev_Inf_Screen;
 8011f0e:	7023      	strb	r3, [r4, #0]
 8011f10:	f7fe bf12 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011f14:	2301      	movs	r3, #1
 8011f16:	7023      	strb	r3, [r4, #0]
 8011f18:	f7fe bf0e 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011f1c:	2304      	movs	r3, #4
 8011f1e:	7023      	strb	r3, [r4, #0]
 8011f20:	f7fe bf0a 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011f24:	2306      	movs	r3, #6
 8011f26:	7023      	strb	r3, [r4, #0]
 8011f28:	f7fe bf06 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011f2c:	2305      	movs	r3, #5
 8011f2e:	7023      	strb	r3, [r4, #0]
 8011f30:	f7fe bf02 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011f34:	3b37      	subs	r3, #55	; 0x37
 8011f36:	2b36      	cmp	r3, #54	; 0x36
 8011f38:	f63e aefe 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
 8011f3c:	2a00      	cmp	r2, #0
 8011f3e:	f47e af03 	bne.w	8010d48 <GUI_Touch_Processing+0x150>
 8011f42:	f7fe bef9 	b.w	8010d38 <GUI_Touch_Processing+0x140>
					preGUI_screen_state = GUI_screen_state;
 8011f46:	4b38      	ldr	r3, [pc, #224]	; (8012028 <GUI_Touch_Processing+0x1430>)
 8011f48:	2210      	movs	r2, #16
 8011f4a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) )//next
 8011f4c:	4b38      	ldr	r3, [pc, #224]	; (8012030 <GUI_Touch_Processing+0x1438>)
 8011f4e:	881a      	ldrh	r2, [r3, #0]
 8011f50:	4b36      	ldr	r3, [pc, #216]	; (801202c <GUI_Touch_Processing+0x1434>)
 8011f52:	881b      	ldrh	r3, [r3, #0]
 8011f54:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 8011f58:	2d36      	cmp	r5, #54	; 0x36
 8011f5a:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011f5e:	bf8c      	ite	hi
 8011f60:	2500      	movhi	r5, #0
 8011f62:	2501      	movls	r5, #1
 8011f64:	2936      	cmp	r1, #54	; 0x36
 8011f66:	d809      	bhi.n	8011f7c <GUI_Touch_Processing+0x1384>
 8011f68:	b145      	cbz	r5, 8011f7c <GUI_Touch_Processing+0x1384>
					WriteSDFLASH_t(sdfile_cnt);
 8011f6a:	4b38      	ldr	r3, [pc, #224]	; (801204c <GUI_Touch_Processing+0x1454>)
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	8818      	ldrh	r0, [r3, #0]
 8011f70:	f007 fc84 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Color_Rendition_Screen;
 8011f74:	2306      	movs	r3, #6
 8011f76:	7023      	strb	r3, [r4, #0]
 8011f78:	f7fe bede 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 8011f7c:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 8011f80:	2936      	cmp	r1, #54	; 0x36
 8011f82:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 8011f86:	bf8c      	ite	hi
 8011f88:	2100      	movhi	r1, #0
 8011f8a:	2101      	movls	r1, #1
 8011f8c:	2836      	cmp	r0, #54	; 0x36
 8011f8e:	d802      	bhi.n	8011f96 <GUI_Touch_Processing+0x139e>
 8011f90:	2900      	cmp	r1, #0
 8011f92:	f47f a85d 	bne.w	8011050 <GUI_Touch_Processing+0x458>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 8011f96:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8011f9a:	2836      	cmp	r0, #54	; 0x36
 8011f9c:	d802      	bhi.n	8011fa4 <GUI_Touch_Processing+0x13ac>
 8011f9e:	2900      	cmp	r1, #0
 8011fa0:	f47f a882 	bne.w	80110a8 <GUI_Touch_Processing+0x4b0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 8011fa4:	f1a2 0108 	sub.w	r1, r2, #8
 8011fa8:	29f2      	cmp	r1, #242	; 0xf2
 8011faa:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 8011fae:	bf8c      	ite	hi
 8011fb0:	2100      	movhi	r1, #0
 8011fb2:	2101      	movls	r1, #1
 8011fb4:	2832      	cmp	r0, #50	; 0x32
 8011fb6:	d802      	bhi.n	8011fbe <GUI_Touch_Processing+0x13c6>
 8011fb8:	2900      	cmp	r1, #0
 8011fba:	f47f adcf 	bne.w	8011b5c <GUI_Touch_Processing+0xf64>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=318  & Touch_y <=(318+54) ) //CRI
 8011fbe:	f1a2 00b9 	sub.w	r0, r2, #185	; 0xb9
 8011fc2:	2836      	cmp	r0, #54	; 0x36
 8011fc4:	f5a3 769f 	sub.w	r6, r3, #318	; 0x13e
 8011fc8:	bf8c      	ite	hi
 8011fca:	2000      	movhi	r0, #0
 8011fcc:	2001      	movls	r0, #1
 8011fce:	2e36      	cmp	r6, #54	; 0x36
 8011fd0:	d81b      	bhi.n	801200a <GUI_Touch_Processing+0x1412>
 8011fd2:	b1d0      	cbz	r0, 801200a <GUI_Touch_Processing+0x1412>
					if(!(Color_rend_Field & CRI_CQS)){
 8011fd4:	4c1f      	ldr	r4, [pc, #124]	; (8012054 <GUI_Touch_Processing+0x145c>)
 8011fd6:	7822      	ldrb	r2, [r4, #0]
 8011fd8:	07d1      	lsls	r1, r2, #31
 8011fda:	f53e aead 	bmi.w	8010d38 <GUI_Touch_Processing+0x140>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8011fde:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 8011fe0:	f082 0201 	eor.w	r2, r2, #1
 8011fe4:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8011fe6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8011fea:	401a      	ands	r2, r3
 8011fec:	20b9      	movs	r0, #185	; 0xb9
 8011fee:	f000 fe86 	bl	8012cfe <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 8011ff2:	7822      	ldrb	r2, [r4, #0]
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	43d2      	mvns	r2, r2
 8011ff8:	401a      	ands	r2, r3
 8011ffa:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8011ffe:	20b9      	movs	r0, #185	; 0xb9
 8012000:	f7ff ba2e 	b.w	8011460 <GUI_Touch_Processing+0x868>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8012004:	4a14      	ldr	r2, [pc, #80]	; (8012058 <GUI_Touch_Processing+0x1460>)
 8012006:	f7ff b839 	b.w	801107c <GUI_Touch_Processing+0x484>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=362  & Touch_y <=(362+54) ) //CQS
 801200a:	f5a3 76b5 	sub.w	r6, r3, #362	; 0x16a
 801200e:	2e36      	cmp	r6, #54	; 0x36
 8012010:	d824      	bhi.n	801205c <GUI_Touch_Processing+0x1464>
 8012012:	b318      	cbz	r0, 801205c <GUI_Touch_Processing+0x1464>
					if((Color_rend_Field&CRI_CQS)){
 8012014:	4c0f      	ldr	r4, [pc, #60]	; (8012054 <GUI_Touch_Processing+0x145c>)
 8012016:	7822      	ldrb	r2, [r4, #0]
 8012018:	07d3      	lsls	r3, r2, #31
 801201a:	f57e ae8d 	bpl.w	8010d38 <GUI_Touch_Processing+0x140>
 801201e:	e7de      	b.n	8011fde <GUI_Touch_Processing+0x13e6>
 8012020:	0006ca00 	.word	0x0006ca00
 8012024:	00018100 	.word	0x00018100
 8012028:	2000022a 	.word	0x2000022a
 801202c:	20054934 	.word	0x20054934
 8012030:	20054932 	.word	0x20054932
 8012034:	200056ef 	.word	0x200056ef
 8012038:	20005719 	.word	0x20005719
 801203c:	200056f4 	.word	0x200056f4
 8012040:	00051d00 	.word	0x00051d00
 8012044:	20091000 	.word	0x20091000
 8012048:	20055942 	.word	0x20055942
 801204c:	2000571e 	.word	0x2000571e
 8012050:	20090a65 	.word	0x20090a65
 8012054:	200056f0 	.word	0x200056f0
 8012058:	20009d14 	.word	0x20009d14
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 801205c:	f1a2 00d9 	sub.w	r0, r2, #217	; 0xd9
 8012060:	2836      	cmp	r0, #54	; 0x36
 8012062:	d802      	bhi.n	801206a <GUI_Touch_Processing+0x1472>
 8012064:	2d00      	cmp	r5, #0
 8012066:	f47f a8cf 	bne.w	8011208 <GUI_Touch_Processing+0x610>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 801206a:	1e50      	subs	r0, r2, #1
 801206c:	2836      	cmp	r0, #54	; 0x36
 801206e:	d822      	bhi.n	80120b6 <GUI_Touch_Processing+0x14be>
 8012070:	b30d      	cbz	r5, 80120b6 <GUI_Touch_Processing+0x14be>
					WriteSDFLASH_t(sdfile_cnt);
 8012072:	4b42      	ldr	r3, [pc, #264]	; (801217c <GUI_Touch_Processing+0x1584>)
 8012074:	2100      	movs	r1, #0
 8012076:	8818      	ldrh	r0, [r3, #0]
 8012078:	f007 fc00 	bl	801987c <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801207c:	4b40      	ldr	r3, [pc, #256]	; (8012180 <GUI_Touch_Processing+0x1588>)
 801207e:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012080:	1e5a      	subs	r2, r3, #1
 8012082:	2a05      	cmp	r2, #5
 8012084:	d804      	bhi.n	8012090 <GUI_Touch_Processing+0x1498>
 8012086:	e8df f002 	tbb	[pc, r2]
 801208a:	0306      	.short	0x0306
 801208c:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8012090:	7023      	strb	r3, [r4, #0]
 8012092:	f7fe be51 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012096:	2301      	movs	r3, #1
 8012098:	7023      	strb	r3, [r4, #0]
 801209a:	f7fe be4d 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801209e:	2304      	movs	r3, #4
 80120a0:	7023      	strb	r3, [r4, #0]
 80120a2:	f7fe be49 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80120a6:	2306      	movs	r3, #6
 80120a8:	7023      	strb	r3, [r4, #0]
 80120aa:	f7fe be45 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80120ae:	2305      	movs	r3, #5
 80120b0:	7023      	strb	r3, [r4, #0]
 80120b2:	f7fe be41 	b.w	8010d38 <GUI_Touch_Processing+0x140>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 80120b6:	3a37      	subs	r2, #55	; 0x37
 80120b8:	2a36      	cmp	r2, #54	; 0x36
 80120ba:	d802      	bhi.n	80120c2 <GUI_Touch_Processing+0x14ca>
 80120bc:	2d00      	cmp	r5, #0
 80120be:	f47e ae43 	bne.w	8010d48 <GUI_Touch_Processing+0x150>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 80120c2:	3b50      	subs	r3, #80	; 0x50
 80120c4:	2b28      	cmp	r3, #40	; 0x28
 80120c6:	f63e ae37 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
 80120ca:	2900      	cmp	r1, #0
 80120cc:	f47f ad2f 	bne.w	8011b2e <GUI_Touch_Processing+0xf36>
 80120d0:	f7fe be32 	b.w	8010d38 <GUI_Touch_Processing+0x140>
			if(Touch_x >= 8  & Touch_x <= (270)  & Touch_y >=8  & Touch_y <=(470) ) // Information
 80120d4:	4b2b      	ldr	r3, [pc, #172]	; (8012184 <GUI_Touch_Processing+0x158c>)
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	3b08      	subs	r3, #8
 80120da:	b29b      	uxth	r3, r3
 80120dc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80120e0:	f63e ae2a 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
 80120e4:	4b28      	ldr	r3, [pc, #160]	; (8012188 <GUI_Touch_Processing+0x1590>)
 80120e6:	881b      	ldrh	r3, [r3, #0]
 80120e8:	3b08      	subs	r3, #8
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	f5b3 7fe7 	cmp.w	r3, #462	; 0x1ce
 80120f0:	f63e ae22 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
					GUI_screen_state = preGUI_screen_state;
 80120f4:	4b25      	ldr	r3, [pc, #148]	; (801218c <GUI_Touch_Processing+0x1594>)
 80120f6:	781a      	ldrb	r2, [r3, #0]
 80120f8:	7022      	strb	r2, [r4, #0]
					preGUI_screen_state = Information_Screen;
 80120fa:	2211      	movs	r2, #17
 80120fc:	701a      	strb	r2, [r3, #0]
						switch (Prev_Inf_Screen2){
 80120fe:	4b24      	ldr	r3, [pc, #144]	; (8012190 <GUI_Touch_Processing+0x1598>)
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	3b07      	subs	r3, #7
 8012104:	2b09      	cmp	r3, #9
 8012106:	f63e ae17 	bhi.w	8010d38 <GUI_Touch_Processing+0x140>
 801210a:	a201      	add	r2, pc, #4	; (adr r2, 8012110 <GUI_Touch_Processing+0x1518>)
 801210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012110:	08012139 	.word	0x08012139
 8012114:	08010d39 	.word	0x08010d39
 8012118:	08010d39 	.word	0x08010d39
 801211c:	08010d39 	.word	0x08010d39
 8012120:	08010d39 	.word	0x08010d39
 8012124:	08012147 	.word	0x08012147
 8012128:	08010d39 	.word	0x08010d39
 801212c:	08012155 	.word	0x08012155
 8012130:	08010d39 	.word	0x08010d39
 8012134:	08012163 	.word	0x08012163
						case DataSet1_Screen: GUI_screen_state = DataSet1_Screen; 	Prev_Inf_Screen = Measure_Screen;	break;
 8012138:	2307      	movs	r3, #7
 801213a:	7023      	strb	r3, [r4, #0]
 801213c:	4b10      	ldr	r3, [pc, #64]	; (8012180 <GUI_Touch_Processing+0x1588>)
 801213e:	2201      	movs	r2, #1
 8012140:	701a      	strb	r2, [r3, #0]
 8012142:	f7fe bdf9 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case GraphSet1_Screen: GUI_screen_state = GraphSet1_Screen; Prev_Inf_Screen = Graph_Screen; 		break;
 8012146:	230c      	movs	r3, #12
 8012148:	7023      	strb	r3, [r4, #0]
 801214a:	4b0d      	ldr	r3, [pc, #52]	; (8012180 <GUI_Touch_Processing+0x1588>)
 801214c:	2204      	movs	r2, #4
 801214e:	701a      	strb	r2, [r3, #0]
 8012150:	f7fe bdf2 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case ColorSet1_Screen: GUI_screen_state = ColorSet1_Screen; Prev_Inf_Screen = Color_Screen; break;
 8012154:	230e      	movs	r3, #14
 8012156:	7023      	strb	r3, [r4, #0]
 8012158:	4b09      	ldr	r3, [pc, #36]	; (8012180 <GUI_Touch_Processing+0x1588>)
 801215a:	2205      	movs	r2, #5
 801215c:	701a      	strb	r2, [r3, #0]
 801215e:	f7fe bdeb 	b.w	8010d38 <GUI_Touch_Processing+0x140>
						case ColorRendSet_Screen: GUI_screen_state = ColorRendSet_Screen; Prev_Inf_Screen = Color_Rendition_Screen; break;
 8012162:	2310      	movs	r3, #16
 8012164:	7023      	strb	r3, [r4, #0]
 8012166:	4b06      	ldr	r3, [pc, #24]	; (8012180 <GUI_Touch_Processing+0x1588>)
 8012168:	2206      	movs	r2, #6
 801216a:	701a      	strb	r2, [r3, #0]
 801216c:	f7fe bde4 	b.w	8010d38 <GUI_Touch_Processing+0x140>
		default: preGUI_screen_state = Measure_Screen;
 8012170:	4b06      	ldr	r3, [pc, #24]	; (801218c <GUI_Touch_Processing+0x1594>)
 8012172:	2201      	movs	r2, #1
 8012174:	701a      	strb	r2, [r3, #0]
}
 8012176:	f7fe bddf 	b.w	8010d38 <GUI_Touch_Processing+0x140>
 801217a:	bf00      	nop
 801217c:	2000571e 	.word	0x2000571e
 8012180:	20090a65 	.word	0x20090a65
 8012184:	20054932 	.word	0x20054932
 8012188:	20054934 	.word	0x20054934
 801218c:	2000022a 	.word	0x2000022a
 8012190:	20091008 	.word	0x20091008

08012194 <GUI_Bluetooth_Logo>:

extern UART_HandleTypeDef hlpuart1;
extern uint8_t BluetoothStat;

void GUI_Bluetooth_Logo(uint16_t X, uint16_t Y)
{
 8012194:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8012198:	f101 031e 	add.w	r3, r1, #30
{
 801219c:	460c      	mov	r4, r1
 801219e:	4605      	mov	r5, r0
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 80121a0:	f100 0214 	add.w	r2, r0, #20
 80121a4:	2605      	movs	r6, #5
 80121a6:	f241 3776 	movw	r7, #4982	; 0x1376
 80121aa:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	b292      	uxth	r2, r2
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 80121b2:	f105 060a 	add.w	r6, r5, #10
 80121b6:	f104 0a1a 	add.w	sl, r4, #26
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 80121ba:	f00a f8a5 	bl	801c308 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 80121be:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80121c2:	b2b6      	uxth	r6, r6
 80121c4:	fa1f fa8a 	uxth.w	sl, sl
 80121c8:	1d21      	adds	r1, r4, #4
 80121ca:	4653      	mov	r3, sl
 80121cc:	4632      	mov	r2, r6
 80121ce:	4630      	mov	r0, r6
 80121d0:	f8cd 8000 	str.w	r8, [sp]
 80121d4:	b289      	uxth	r1, r1
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80121d6:	f105 070f 	add.w	r7, r5, #15
 80121da:	f104 090b 	add.w	r9, r4, #11
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 80121de:	f009 feb1 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80121e2:	b2bf      	uxth	r7, r7
 80121e4:	fa1f f989 	uxth.w	r9, r9
 80121e8:	1d61      	adds	r1, r4, #5
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80121ea:	3506      	adds	r5, #6
 80121ec:	3414      	adds	r4, #20
 80121ee:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80121f0:	464b      	mov	r3, r9
 80121f2:	463a      	mov	r2, r7
 80121f4:	4630      	mov	r0, r6
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80121f6:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80121f8:	f8cd 8000 	str.w	r8, [sp]
 80121fc:	b289      	uxth	r1, r1
 80121fe:	f009 fea1 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 8012202:	464b      	mov	r3, r9
 8012204:	463a      	mov	r2, r7
 8012206:	4621      	mov	r1, r4
 8012208:	4628      	mov	r0, r5
 801220a:	f8cd 8000 	str.w	r8, [sp]
 801220e:	f009 fe99 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+15, Y+20, TFT_White);
 8012212:	4623      	mov	r3, r4
 8012214:	463a      	mov	r2, r7
 8012216:	4649      	mov	r1, r9
 8012218:	4628      	mov	r0, r5
 801221a:	f8cd 8000 	str.w	r8, [sp]
 801221e:	f009 fe91 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+26, X+15, Y+20,TFT_White);
 8012222:	f8cd 8000 	str.w	r8, [sp]
 8012226:	4623      	mov	r3, r4
 8012228:	463a      	mov	r2, r7
 801222a:	4651      	mov	r1, sl
 801222c:	4630      	mov	r0, r6
 801222e:	f009 fe89 	bl	801bf44 <TFT_DrawLine>
}
 8012232:	b002      	add	sp, #8
 8012234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012238 <GUI_Button_Settings>:


void GUI_Button_Settings(uint16_t X, uint16_t Y)
{
 8012238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801223c:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012240:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012242:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012246:	f241 3676 	movw	r6, #4982	; 0x1376
{
 801224a:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801224c:	9600      	str	r6, [sp, #0]
 801224e:	b29b      	uxth	r3, r3
 8012250:	b292      	uxth	r2, r2
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 8012252:	f105 0608 	add.w	r6, r5, #8
 8012256:	352f      	adds	r5, #47	; 0x2f
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012258:	f009 fed1 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 801225c:	b2b6      	uxth	r6, r6
 801225e:	b2ad      	uxth	r5, r5
 8012260:	2702      	movs	r7, #2
 8012262:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8012266:	f104 0313 	add.w	r3, r4, #19
 801226a:	f104 010d 	add.w	r1, r4, #13
 801226e:	462a      	mov	r2, r5
 8012270:	4630      	mov	r0, r6
 8012272:	e88d 0180 	stmia.w	sp, {r7, r8}
 8012276:	b29b      	uxth	r3, r3
 8012278:	b289      	uxth	r1, r1
 801227a:	f00a f845 	bl	801c308 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+25, X+47, Y+31, 2, TFT_White);
 801227e:	f104 031f 	add.w	r3, r4, #31
 8012282:	f104 0119 	add.w	r1, r4, #25
 8012286:	462a      	mov	r2, r5
 8012288:	4630      	mov	r0, r6
 801228a:	e88d 0180 	stmia.w	sp, {r7, r8}
 801228e:	b29b      	uxth	r3, r3
 8012290:	b289      	uxth	r1, r1
 8012292:	f00a f839 	bl	801c308 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+37, X+47, Y+43, 2, TFT_White);
 8012296:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 801229a:	f104 0125 	add.w	r1, r4, #37	; 0x25
 801229e:	e88d 0180 	stmia.w	sp, {r7, r8}
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	462a      	mov	r2, r5
 80122a6:	b289      	uxth	r1, r1
 80122a8:	4630      	mov	r0, r6
 80122aa:	f00a f82d 	bl	801c308 <TFT_DrawFilledRoundedRectangle>
}
 80122ae:	b002      	add	sp, #8
 80122b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122b4 <GUI_Button_Down>:

void GUI_Button_Down(uint16_t X, uint16_t Y)
{
 80122b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80122b8:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 80122bc:	4604      	mov	r4, r0
 80122be:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80122c0:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80122c4:	f241 3676 	movw	r6, #4982	; 0x1376
 80122c8:	9600      	str	r6, [sp, #0]
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	b292      	uxth	r2, r2
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80122ce:	f105 0612 	add.w	r6, r5, #18
 80122d2:	f104 081c 	add.w	r8, r4, #28
 80122d6:	3528      	adds	r5, #40	; 0x28
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80122d8:	f009 fe91 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80122dc:	b2b6      	uxth	r6, r6
 80122de:	b2ad      	uxth	r5, r5
 80122e0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80122e4:	fa1f f888 	uxth.w	r8, r8
 80122e8:	f104 000c 	add.w	r0, r4, #12
 80122ec:	462b      	mov	r3, r5
 80122ee:	4642      	mov	r2, r8
 80122f0:	4631      	mov	r1, r6
 80122f2:	9700      	str	r7, [sp, #0]
 80122f4:	b280      	uxth	r0, r0
 80122f6:	f009 fe25 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 80122fa:	f104 021d 	add.w	r2, r4, #29
 80122fe:	f104 000d 	add.w	r0, r4, #13
 8012302:	462b      	mov	r3, r5
 8012304:	4631      	mov	r1, r6
 8012306:	9700      	str	r7, [sp, #0]
 8012308:	b292      	uxth	r2, r2
 801230a:	b280      	uxth	r0, r0
 801230c:	f009 fe1a 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 8012310:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8012314:	462b      	mov	r3, r5
 8012316:	4642      	mov	r2, r8
 8012318:	4631      	mov	r1, r6
 801231a:	9700      	str	r7, [sp, #0]
 801231c:	b280      	uxth	r0, r0
 801231e:	f009 fe11 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8012322:	f104 021b 	add.w	r2, r4, #27
 8012326:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801232a:	9700      	str	r7, [sp, #0]
 801232c:	462b      	mov	r3, r5
 801232e:	b292      	uxth	r2, r2
 8012330:	4631      	mov	r1, r6
 8012332:	b280      	uxth	r0, r0
 8012334:	f009 fe06 	bl	801bf44 <TFT_DrawLine>
}
 8012338:	b002      	add	sp, #8
 801233a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801233e <GUI_Button_Down_Active>:

void GUI_Button_Down_Active(uint16_t X, uint16_t Y, uint8_t Active)
{
 801233e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012342:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012346:	4604      	mov	r4, r0
 8012348:	460d      	mov	r5, r1
 801234a:	f100 0636 	add.w	r6, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 801234e:	2a00      	cmp	r2, #0
 8012350:	d03c      	beq.n	80123cc <GUI_Button_Down_Active+0x8e>
 8012352:	f241 3276 	movw	r2, #4982	; 0x1376
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012356:	9200      	str	r2, [sp, #0]
 8012358:	b29b      	uxth	r3, r3
 801235a:	b2b2      	uxth	r2, r6
	
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 801235c:	f104 081c 	add.w	r8, r4, #28
 8012360:	f105 0612 	add.w	r6, r5, #18
 8012364:	3528      	adds	r5, #40	; 0x28
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012366:	f009 fe4a 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 801236a:	b2b6      	uxth	r6, r6
 801236c:	b2ad      	uxth	r5, r5
 801236e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8012372:	fa1f f888 	uxth.w	r8, r8
 8012376:	f104 000c 	add.w	r0, r4, #12
 801237a:	462b      	mov	r3, r5
 801237c:	4642      	mov	r2, r8
 801237e:	4631      	mov	r1, r6
 8012380:	9700      	str	r7, [sp, #0]
 8012382:	b280      	uxth	r0, r0
 8012384:	f009 fdde 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 8012388:	f104 021d 	add.w	r2, r4, #29
 801238c:	f104 000d 	add.w	r0, r4, #13
 8012390:	462b      	mov	r3, r5
 8012392:	4631      	mov	r1, r6
 8012394:	9700      	str	r7, [sp, #0]
 8012396:	b292      	uxth	r2, r2
 8012398:	b280      	uxth	r0, r0
 801239a:	f009 fdd3 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 801239e:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80123a2:	462b      	mov	r3, r5
 80123a4:	4642      	mov	r2, r8
 80123a6:	4631      	mov	r1, r6
 80123a8:	9700      	str	r7, [sp, #0]
 80123aa:	b280      	uxth	r0, r0
 80123ac:	f009 fdca 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 80123b0:	f104 021b 	add.w	r2, r4, #27
 80123b4:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80123b8:	9700      	str	r7, [sp, #0]
 80123ba:	462b      	mov	r3, r5
 80123bc:	b292      	uxth	r2, r2
 80123be:	4631      	mov	r1, r6
 80123c0:	b280      	uxth	r0, r0
 80123c2:	f009 fdbf 	bl	801bf44 <TFT_DrawLine>
}
 80123c6:	b002      	add	sp, #8
 80123c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80123cc:	f64d 721c 	movw	r2, #57116	; 0xdf1c
 80123d0:	e7c1      	b.n	8012356 <GUI_Button_Down_Active+0x18>

080123d2 <GUI_Button_Right>:

void GUI_Button_Right(uint16_t X, uint16_t Y)
{
 80123d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d6:	4604      	mov	r4, r0
 80123d8:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80123da:	f241 3676 	movw	r6, #4982	; 0x1376
 80123de:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80123e2:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80123e6:	9600      	str	r6, [sp, #0]
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80123e8:	f104 0a13 	add.w	sl, r4, #19
 80123ec:	f105 0b0c 	add.w	fp, r5, #12
 80123f0:	f104 0928 	add.w	r9, r4, #40	; 0x28
 80123f4:	f105 061b 	add.w	r6, r5, #27
 80123f8:	b2b6      	uxth	r6, r6
 80123fa:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80123fe:	fa1f fa8a 	uxth.w	sl, sl
 8012402:	fa1f fb8b 	uxth.w	fp, fp
 8012406:	fa1f f989 	uxth.w	r9, r9
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801240a:	b29b      	uxth	r3, r3
 801240c:	b292      	uxth	r2, r2
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 801240e:	f104 0712 	add.w	r7, r4, #18
 8012412:	3427      	adds	r4, #39	; 0x27
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012414:	f009 fdf3 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012418:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 801241a:	4633      	mov	r3, r6
 801241c:	464a      	mov	r2, r9
 801241e:	4659      	mov	r1, fp
 8012420:	4650      	mov	r0, sl
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012422:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8012424:	f8cd 8000 	str.w	r8, [sp]
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012428:	352a      	adds	r5, #42	; 0x2a
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 801242a:	f009 fd8b 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 801242e:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012430:	4633      	mov	r3, r6
 8012432:	4622      	mov	r2, r4
 8012434:	4659      	mov	r1, fp
 8012436:	4638      	mov	r0, r7
 8012438:	f8cd 8000 	str.w	r8, [sp]
 801243c:	f009 fd82 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012440:	462b      	mov	r3, r5
 8012442:	4652      	mov	r2, sl
 8012444:	4631      	mov	r1, r6
 8012446:	4648      	mov	r0, r9
 8012448:	f8cd 8000 	str.w	r8, [sp]
 801244c:	f009 fd7a 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+39, Y+27, X+18, Y+42, TFT_White);
 8012450:	f8cd 8000 	str.w	r8, [sp]
 8012454:	462b      	mov	r3, r5
 8012456:	463a      	mov	r2, r7
 8012458:	4631      	mov	r1, r6
 801245a:	4620      	mov	r0, r4
 801245c:	f009 fd72 	bl	801bf44 <TFT_DrawLine>
}
 8012460:	b003      	add	sp, #12
 8012462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012466 <GUI_Button_TFT_On_Off>:

void GUI_Button_TFT_On_Off(uint16_t X, uint16_t Y)
{
 8012466:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012468:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801246c:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012470:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8012474:	4604      	mov	r4, r0
 8012476:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012478:	9600      	str	r6, [sp, #0]
 801247a:	b29b      	uxth	r3, r3
 801247c:	b292      	uxth	r2, r2
 801247e:	f009 fdbe 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawRectangle(X+8, Y+16, X+48, Y+39, TFT_White);
 8012482:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8012486:	f105 0327 	add.w	r3, r5, #39	; 0x27
 801248a:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801248e:	f105 0110 	add.w	r1, r5, #16
 8012492:	f104 0008 	add.w	r0, r4, #8
 8012496:	9600      	str	r6, [sp, #0]
 8012498:	b29b      	uxth	r3, r3
 801249a:	b292      	uxth	r2, r2
 801249c:	b289      	uxth	r1, r1
 801249e:	b280      	uxth	r0, r0
 80124a0:	f009 fdc5 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawLine(X+6, Y+5, X+51, Y+48, TFT_White);
 80124a4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80124a8:	f104 0233 	add.w	r2, r4, #51	; 0x33
 80124ac:	1d69      	adds	r1, r5, #5
 80124ae:	1da0      	adds	r0, r4, #6
 80124b0:	9600      	str	r6, [sp, #0]
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	b292      	uxth	r2, r2
 80124b6:	b289      	uxth	r1, r1
 80124b8:	b280      	uxth	r0, r0
 80124ba:	f009 fd43 	bl	801bf44 <TFT_DrawLine>
}
 80124be:	b002      	add	sp, #8
 80124c0:	bd70      	pop	{r4, r5, r6, pc}

080124c2 <GUI_Button_TFT_Rotate>:

void GUI_Button_TFT_Rotate(uint16_t X, uint16_t Y)
{
 80124c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80124c6:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 80124ca:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80124cc:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80124d0:	f241 3676 	movw	r6, #4982	; 0x1376
{
 80124d4:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80124d6:	9600      	str	r6, [sp, #0]
 80124d8:	b29b      	uxth	r3, r3
 80124da:	b292      	uxth	r2, r2
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 80124dc:	f105 071c 	add.w	r7, r5, #28
 80124e0:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80124e4:	f009 fd8b 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 80124e8:	b2bf      	uxth	r7, r7
 80124ea:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 80124ee:	f104 0109 	add.w	r1, r4, #9
 80124f2:	f105 0009 	add.w	r0, r5, #9
 80124f6:	463a      	mov	r2, r7
 80124f8:	9600      	str	r6, [sp, #0]
 80124fa:	b29b      	uxth	r3, r3
 80124fc:	b289      	uxth	r1, r1
 80124fe:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8012500:	f104 081e 	add.w	r8, r4, #30
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8012504:	f009 fd93 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8012508:	fa1f f888 	uxth.w	r8, r8
 801250c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8012510:	f105 0231 	add.w	r2, r5, #49	; 0x31
 8012514:	f105 0012 	add.w	r0, r5, #18
 8012518:	4641      	mov	r1, r8
 801251a:	9600      	str	r6, [sp, #0]
 801251c:	b29b      	uxth	r3, r3
 801251e:	b292      	uxth	r2, r2
 8012520:	b280      	uxth	r0, r0
 8012522:	f009 fd84 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
	
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012526:	f105 0921 	add.w	r9, r5, #33	; 0x21
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 801252a:	fa0f f188 	sxth.w	r1, r8
 801252e:	b238      	sxth	r0, r7
 8012530:	9600      	str	r6, [sp, #0]
 8012532:	2302      	movs	r3, #2
 8012534:	2210      	movs	r2, #16
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012536:	f105 071d 	add.w	r7, r5, #29
 801253a:	f104 080e 	add.w	r8, r4, #14
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 801253e:	f009 fbb7 	bl	801bcb0 <TFT_DrawCircleCorner>
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012542:	b2bf      	uxth	r7, r7
 8012544:	fa1f f888 	uxth.w	r8, r8
 8012548:	fa1f f989 	uxth.w	r9, r9
 801254c:	f104 0313 	add.w	r3, r4, #19
 8012550:	464a      	mov	r2, r9
 8012552:	4641      	mov	r1, r8
 8012554:	4638      	mov	r0, r7
 8012556:	9600      	str	r6, [sp, #0]
 8012558:	b29b      	uxth	r3, r3
 801255a:	f009 fcf3 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 801255e:	f104 030b 	add.w	r3, r4, #11
 8012562:	464a      	mov	r2, r9
 8012564:	4641      	mov	r1, r8
 8012566:	4638      	mov	r0, r7
 8012568:	9600      	str	r6, [sp, #0]
 801256a:	b29b      	uxth	r3, r3
	
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 801256c:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8012570:	f104 081d 	add.w	r8, r4, #29
 8012574:	3419      	adds	r4, #25
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8012576:	f009 fce5 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 801257a:	b2bf      	uxth	r7, r7
 801257c:	fa1f f888 	uxth.w	r8, r8
 8012580:	b2a4      	uxth	r4, r4
 8012582:	f105 0227 	add.w	r2, r5, #39	; 0x27
 8012586:	4623      	mov	r3, r4
 8012588:	4641      	mov	r1, r8
 801258a:	4638      	mov	r0, r7
 801258c:	9600      	str	r6, [sp, #0]
 801258e:	b292      	uxth	r2, r2
 8012590:	f009 fcd8 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+47, Y+25, TFT_White);
 8012594:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 8012598:	9600      	str	r6, [sp, #0]
 801259a:	4623      	mov	r3, r4
 801259c:	b292      	uxth	r2, r2
 801259e:	4641      	mov	r1, r8
 80125a0:	4638      	mov	r0, r7
 80125a2:	f009 fccf 	bl	801bf44 <TFT_DrawLine>
}
 80125a6:	b003      	add	sp, #12
 80125a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080125ac <GUI_Button_SD_Card>:

void GUI_Button_SD_Card(uint16_t X, uint16_t Y, uint8_t Active)
{
 80125ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b0:	b085      	sub	sp, #20
 80125b2:	4604      	mov	r4, r0
	
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 80125b4:	9203      	str	r2, [sp, #12]
 80125b6:	9e03      	ldr	r6, [sp, #12]
{
 80125b8:	460d      	mov	r5, r1
 80125ba:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80125be:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 80125c2:	2e00      	cmp	r6, #0
 80125c4:	f000 80b6 	beq.w	8012734 <GUI_Button_SD_Card+0x188>
 80125c8:	f241 3676 	movw	r6, #4982	; 0x1376
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
	
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80125cc:	f104 0715 	add.w	r7, r4, #21
 80125d0:	f105 0b05 	add.w	fp, r5, #5
 80125d4:	f104 092e 	add.w	r9, r4, #46	; 0x2e
 80125d8:	f105 0a07 	add.w	sl, r5, #7
 80125dc:	b2bf      	uxth	r7, r7
 80125de:	fa1f f989 	uxth.w	r9, r9
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80125e2:	9600      	str	r6, [sp, #0]
 80125e4:	b29b      	uxth	r3, r3
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80125e6:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80125ea:	b292      	uxth	r2, r2
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80125ec:	fa1f fb8b 	uxth.w	fp, fp
 80125f0:	fa1f fa8a 	uxth.w	sl, sl
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80125f4:	f009 fd03 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 80125f8:	f105 0832 	add.w	r8, r5, #50	; 0x32
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80125fc:	464a      	mov	r2, r9
 80125fe:	4638      	mov	r0, r7
 8012600:	4653      	mov	r3, sl
 8012602:	4659      	mov	r1, fp
 8012604:	9600      	str	r6, [sp, #0]
 8012606:	f009 fcfa 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 801260a:	fa1f f888 	uxth.w	r8, r8
 801260e:	f105 0108 	add.w	r1, r5, #8
 8012612:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8012616:	4643      	mov	r3, r8
 8012618:	464a      	mov	r2, r9
 801261a:	b289      	uxth	r1, r1
 801261c:	b280      	uxth	r0, r0
 801261e:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8012620:	f104 090a 	add.w	r9, r4, #10
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8012624:	f009 fceb 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8012628:	fa1f f989 	uxth.w	r9, r9
 801262c:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8012630:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8012634:	4643      	mov	r3, r8
 8012636:	464a      	mov	r2, r9
 8012638:	b289      	uxth	r1, r1
 801263a:	b280      	uxth	r0, r0
 801263c:	9600      	str	r6, [sp, #0]
 801263e:	f009 fcde 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+10, Y+16, X+12, Y+47, TFT_White);
 8012642:	f104 030c 	add.w	r3, r4, #12
 8012646:	b29b      	uxth	r3, r3
 8012648:	f105 0810 	add.w	r8, r5, #16
 801264c:	fa1f f888 	uxth.w	r8, r8
 8012650:	9302      	str	r3, [sp, #8]
 8012652:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 8012656:	4641      	mov	r1, r8
 8012658:	4648      	mov	r0, r9
 801265a:	b29b      	uxth	r3, r3
 801265c:	9a02      	ldr	r2, [sp, #8]
 801265e:	9600      	str	r6, [sp, #0]
 8012660:	f009 fccd 	bl	801bffe <TFT_FillRectangle>
	
	TFT_DrawLine(X+10, Y+16, X+21, Y+5, TFT_White);
 8012664:	463a      	mov	r2, r7
 8012666:	4641      	mov	r1, r8
 8012668:	4648      	mov	r0, r9
 801266a:	465b      	mov	r3, fp
 801266c:	9600      	str	r6, [sp, #0]
 801266e:	f009 fc69 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+16, X+21, Y+6, TFT_White);
 8012672:	1dab      	adds	r3, r5, #6
 8012674:	f104 000b 	add.w	r0, r4, #11
 8012678:	463a      	mov	r2, r7
 801267a:	4641      	mov	r1, r8
 801267c:	b29b      	uxth	r3, r3
 801267e:	b280      	uxth	r0, r0
 8012680:	9600      	str	r6, [sp, #0]
 8012682:	f009 fc5f 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
	
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012686:	f105 0913 	add.w	r9, r5, #19
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 801268a:	463a      	mov	r2, r7
 801268c:	4641      	mov	r1, r8
 801268e:	4653      	mov	r3, sl
 8012690:	9802      	ldr	r0, [sp, #8]
 8012692:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012694:	f105 080d 	add.w	r8, r5, #13
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8012698:	f009 fc54 	bl	801bf44 <TFT_DrawLine>
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 801269c:	fa1f f888 	uxth.w	r8, r8
 80126a0:	fa1f f989 	uxth.w	r9, r9
 80126a4:	f104 0013 	add.w	r0, r4, #19
 80126a8:	463a      	mov	r2, r7
 80126aa:	464b      	mov	r3, r9
 80126ac:	4641      	mov	r1, r8
 80126ae:	b280      	uxth	r0, r0
 80126b0:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 80126b2:	f104 071b 	add.w	r7, r4, #27
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 80126b6:	f009 fca2 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 80126ba:	b2bf      	uxth	r7, r7
 80126bc:	f104 0019 	add.w	r0, r4, #25
 80126c0:	464b      	mov	r3, r9
 80126c2:	463a      	mov	r2, r7
 80126c4:	4641      	mov	r1, r8
 80126c6:	b280      	uxth	r0, r0
 80126c8:	9600      	str	r6, [sp, #0]
 80126ca:	f009 fc98 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+31, Y+13, X+33, Y+19, TFT_White);
 80126ce:	f104 0221 	add.w	r2, r4, #33	; 0x21
 80126d2:	f104 001f 	add.w	r0, r4, #31
 80126d6:	464b      	mov	r3, r9
 80126d8:	b292      	uxth	r2, r2
 80126da:	4641      	mov	r1, r8
 80126dc:	b280      	uxth	r0, r0
 80126de:	9600      	str	r6, [sp, #0]
 80126e0:	f009 fc8d 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+37, Y+13, X+39, Y+19, TFT_White);
 80126e4:	f104 0227 	add.w	r2, r4, #39	; 0x27
 80126e8:	f104 0025 	add.w	r0, r4, #37	; 0x25
 80126ec:	464b      	mov	r3, r9
 80126ee:	b292      	uxth	r2, r2
 80126f0:	4641      	mov	r1, r8
 80126f2:	b280      	uxth	r0, r0
 80126f4:	9600      	str	r6, [sp, #0]
 80126f6:	f009 fc82 	bl	801bffe <TFT_FillRectangle>
	
	TFT_SetFont(&Font20);
 80126fa:	4811      	ldr	r0, [pc, #68]	; (8012740 <GUI_Button_SD_Card+0x194>)
 80126fc:	f009 fea8 	bl	801c450 <TFT_SetFont>
	TFT_SetTextColor(TFT_White);
 8012700:	4630      	mov	r0, r6
 8012702:	f009 feab 	bl	801c45c <TFT_SetTextColor>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012706:	9b03      	ldr	r3, [sp, #12]
 8012708:	b1bb      	cbz	r3, 801273a <GUI_Button_SD_Card+0x18e>
 801270a:	f241 3076 	movw	r0, #4982	; 0x1376
	TFT_DrawChar(X+16, Y+28, 'S');
 801270e:	351c      	adds	r5, #28
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8012710:	f009 feaa 	bl	801c468 <TFT_SetBackColor>
	TFT_DrawChar(X+16, Y+28, 'S');
 8012714:	b2ad      	uxth	r5, r5
 8012716:	f104 0010 	add.w	r0, r4, #16
 801271a:	4629      	mov	r1, r5
 801271c:	2253      	movs	r2, #83	; 0x53
 801271e:	b280      	uxth	r0, r0
 8012720:	f009 ff60 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+28, 'D');
 8012724:	2244      	movs	r2, #68	; 0x44
 8012726:	4629      	mov	r1, r5
 8012728:	4638      	mov	r0, r7
}
 801272a:	b005      	add	sp, #20
 801272c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawChar(X+27, Y+28, 'D');
 8012730:	f009 bf58 	b.w	801c5e4 <TFT_DrawChar>
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012734:	f64d 761c 	movw	r6, #57116	; 0xdf1c
 8012738:	e748      	b.n	80125cc <GUI_Button_SD_Card+0x20>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 801273a:	f64d 701c 	movw	r0, #57116	; 0xdf1c
 801273e:	e7e6      	b.n	801270e <GUI_Button_SD_Card+0x162>
 8012740:	200001e0 	.word	0x200001e0

08012744 <GUI_Button_Measure_Start_Pause>:

void GUI_Button_Measure_Start_Pause(uint16_t X, uint16_t Y)
{
 8012744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012748:	b085      	sub	sp, #20
 801274a:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801274c:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012750:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012754:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8012758:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801275a:	9600      	str	r6, [sp, #0]
 801275c:	b29b      	uxth	r3, r3
 801275e:	b292      	uxth	r2, r2
	
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8012760:	f104 090b 	add.w	r9, r4, #11
 8012764:	f104 072b 	add.w	r7, r4, #43	; 0x2b
 8012768:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801276c:	f009 fc47 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8012770:	fa1f f989 	uxth.w	r9, r9
 8012774:	b2bf      	uxth	r7, r7
 8012776:	f105 0225 	add.w	r2, r5, #37	; 0x25
 801277a:	f105 0023 	add.w	r0, r5, #35	; 0x23
 801277e:	463b      	mov	r3, r7
 8012780:	4649      	mov	r1, r9
 8012782:	9600      	str	r6, [sp, #0]
 8012784:	b292      	uxth	r2, r2
 8012786:	b280      	uxth	r0, r0
 8012788:	f009 fc39 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 801278c:	f105 0232 	add.w	r2, r5, #50	; 0x32
 8012790:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8012794:	463b      	mov	r3, r7
 8012796:	4649      	mov	r1, r9
 8012798:	9600      	str	r6, [sp, #0]
 801279a:	b292      	uxth	r2, r2
 801279c:	b280      	uxth	r0, r0
	
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 801279e:	f105 0806 	add.w	r8, r5, #6
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 80127a2:	f009 fc2c 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 80127a6:	fa1f f888 	uxth.w	r8, r8
 80127aa:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 80127ae:	f105 0a1e 	add.w	sl, r5, #30
 80127b2:	f104 0b1b 	add.w	fp, r4, #27
 80127b6:	fa1f fa8a 	uxth.w	sl, sl
 80127ba:	fa1f fb8b 	uxth.w	fp, fp
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 80127be:	b29b      	uxth	r3, r3
 80127c0:	4642      	mov	r2, r8
 80127c2:	4649      	mov	r1, r9
 80127c4:	4640      	mov	r0, r8
 80127c6:	9600      	str	r6, [sp, #0]
 80127c8:	9303      	str	r3, [sp, #12]
 80127ca:	f009 fbbb 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 80127ce:	465b      	mov	r3, fp
 80127d0:	4652      	mov	r2, sl
 80127d2:	4649      	mov	r1, r9
 80127d4:	4640      	mov	r0, r8
 80127d6:	9600      	str	r6, [sp, #0]
 80127d8:	f009 fbb4 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+44, X+30, Y+27, TFT_White);
 80127dc:	465b      	mov	r3, fp
 80127de:	4652      	mov	r2, sl
 80127e0:	9903      	ldr	r1, [sp, #12]
 80127e2:	9600      	str	r6, [sp, #0]
 80127e4:	4640      	mov	r0, r8
 80127e6:	f009 fbad 	bl	801bf44 <TFT_DrawLine>
	
	//paint white
	TFT_DrawLine(X+7, Y+12, X+7, Y+43, TFT_White);
 80127ea:	f104 080c 	add.w	r8, r4, #12
 80127ee:	1dea      	adds	r2, r5, #7
 80127f0:	b292      	uxth	r2, r2
 80127f2:	fa1f f888 	uxth.w	r8, r8
 80127f6:	463b      	mov	r3, r7
 80127f8:	4641      	mov	r1, r8
 80127fa:	4610      	mov	r0, r2
 80127fc:	9600      	str	r6, [sp, #0]
 80127fe:	f009 fba1 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+8, Y+12, X+8, Y+43, TFT_White);
 8012802:	f105 0208 	add.w	r2, r5, #8
 8012806:	b292      	uxth	r2, r2
 8012808:	463b      	mov	r3, r7
 801280a:	4641      	mov	r1, r8
 801280c:	4610      	mov	r0, r2
 801280e:	9600      	str	r6, [sp, #0]
 8012810:	f009 fb98 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+9, Y+13, X+9, Y+42, TFT_White);
 8012814:	f105 0209 	add.w	r2, r5, #9
 8012818:	b292      	uxth	r2, r2
 801281a:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 801281e:	f104 010d 	add.w	r1, r4, #13
 8012822:	4610      	mov	r0, r2
 8012824:	9600      	str	r6, [sp, #0]
 8012826:	b29b      	uxth	r3, r3
 8012828:	b289      	uxth	r1, r1
 801282a:	f009 fb8b 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+14, X+10, Y+41, TFT_White);
 801282e:	f104 080e 	add.w	r8, r4, #14
 8012832:	f105 020a 	add.w	r2, r5, #10
 8012836:	b292      	uxth	r2, r2
 8012838:	fa1f f888 	uxth.w	r8, r8
 801283c:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8012840:	4641      	mov	r1, r8
 8012842:	4610      	mov	r0, r2
 8012844:	9600      	str	r6, [sp, #0]
 8012846:	b29b      	uxth	r3, r3
 8012848:	f009 fb7c 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+14, X+11, Y+40, TFT_White);
 801284c:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8012850:	f105 020b 	add.w	r2, r5, #11
 8012854:	b292      	uxth	r2, r2
 8012856:	b2bf      	uxth	r7, r7
 8012858:	463b      	mov	r3, r7
 801285a:	4641      	mov	r1, r8
 801285c:	4610      	mov	r0, r2
 801285e:	9600      	str	r6, [sp, #0]
 8012860:	f009 fb70 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+15, X+12, Y+40, TFT_White);
 8012864:	f105 020c 	add.w	r2, r5, #12
 8012868:	b292      	uxth	r2, r2
 801286a:	f104 010f 	add.w	r1, r4, #15
 801286e:	463b      	mov	r3, r7
 8012870:	4610      	mov	r0, r2
 8012872:	9600      	str	r6, [sp, #0]
 8012874:	b289      	uxth	r1, r1
 8012876:	f009 fb65 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+16, X+13, Y+39, TFT_White);
 801287a:	f104 0810 	add.w	r8, r4, #16
 801287e:	f105 020d 	add.w	r2, r5, #13
 8012882:	b292      	uxth	r2, r2
 8012884:	fa1f f888 	uxth.w	r8, r8
 8012888:	f104 0327 	add.w	r3, r4, #39	; 0x27
 801288c:	4641      	mov	r1, r8
 801288e:	4610      	mov	r0, r2
 8012890:	9600      	str	r6, [sp, #0]
 8012892:	b29b      	uxth	r3, r3
 8012894:	f009 fb56 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+16, X+14, Y+38, TFT_White);
 8012898:	f104 0726 	add.w	r7, r4, #38	; 0x26
 801289c:	f105 020e 	add.w	r2, r5, #14
 80128a0:	b292      	uxth	r2, r2
 80128a2:	b2bf      	uxth	r7, r7
 80128a4:	463b      	mov	r3, r7
 80128a6:	4641      	mov	r1, r8
 80128a8:	4610      	mov	r0, r2
 80128aa:	9600      	str	r6, [sp, #0]
 80128ac:	f009 fb4a 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+17, X+15, Y+38, TFT_White);
 80128b0:	f105 020f 	add.w	r2, r5, #15
 80128b4:	b292      	uxth	r2, r2
 80128b6:	f104 0111 	add.w	r1, r4, #17
 80128ba:	463b      	mov	r3, r7
 80128bc:	4610      	mov	r0, r2
 80128be:	9600      	str	r6, [sp, #0]
 80128c0:	b289      	uxth	r1, r1
 80128c2:	f009 fb3f 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+18, X+16, Y+37, TFT_White);
 80128c6:	f104 0812 	add.w	r8, r4, #18
 80128ca:	f105 0210 	add.w	r2, r5, #16
 80128ce:	b292      	uxth	r2, r2
 80128d0:	fa1f f888 	uxth.w	r8, r8
 80128d4:	f104 0325 	add.w	r3, r4, #37	; 0x25
 80128d8:	4641      	mov	r1, r8
 80128da:	4610      	mov	r0, r2
 80128dc:	9600      	str	r6, [sp, #0]
 80128de:	b29b      	uxth	r3, r3
 80128e0:	f009 fb30 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+18, X+17, Y+36, TFT_White);
 80128e4:	f104 0724 	add.w	r7, r4, #36	; 0x24
 80128e8:	f105 0211 	add.w	r2, r5, #17
 80128ec:	b292      	uxth	r2, r2
 80128ee:	b2bf      	uxth	r7, r7
 80128f0:	463b      	mov	r3, r7
 80128f2:	4641      	mov	r1, r8
 80128f4:	4610      	mov	r0, r2
 80128f6:	9600      	str	r6, [sp, #0]
 80128f8:	f009 fb24 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+19, X+18, Y+36, TFT_White);
 80128fc:	f105 0212 	add.w	r2, r5, #18
 8012900:	b292      	uxth	r2, r2
 8012902:	f104 0113 	add.w	r1, r4, #19
 8012906:	463b      	mov	r3, r7
 8012908:	4610      	mov	r0, r2
 801290a:	9600      	str	r6, [sp, #0]
 801290c:	b289      	uxth	r1, r1
 801290e:	f009 fb19 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+20, X+19, Y+35, TFT_White);
 8012912:	f104 0714 	add.w	r7, r4, #20
 8012916:	f105 0213 	add.w	r2, r5, #19
 801291a:	b292      	uxth	r2, r2
 801291c:	b2bf      	uxth	r7, r7
 801291e:	f104 0323 	add.w	r3, r4, #35	; 0x23
 8012922:	4639      	mov	r1, r7
 8012924:	4610      	mov	r0, r2
 8012926:	9600      	str	r6, [sp, #0]
 8012928:	b29b      	uxth	r3, r3
 801292a:	f009 fb0b 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+20, X+20, Y+34, TFT_White);
 801292e:	f105 0214 	add.w	r2, r5, #20
 8012932:	b292      	uxth	r2, r2
 8012934:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8012938:	4639      	mov	r1, r7
 801293a:	4610      	mov	r0, r2
 801293c:	9600      	str	r6, [sp, #0]
 801293e:	b29b      	uxth	r3, r3
 8012940:	f009 fb00 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+21, X+21, Y+33, TFT_White);
 8012944:	f104 0821 	add.w	r8, r4, #33	; 0x21
 8012948:	f105 0215 	add.w	r2, r5, #21
 801294c:	b292      	uxth	r2, r2
 801294e:	fa1f f888 	uxth.w	r8, r8
 8012952:	f104 0115 	add.w	r1, r4, #21
 8012956:	4643      	mov	r3, r8
 8012958:	4610      	mov	r0, r2
 801295a:	9600      	str	r6, [sp, #0]
 801295c:	b289      	uxth	r1, r1
 801295e:	f009 faf1 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+22, X+22, Y+33, TFT_White);
 8012962:	f104 0716 	add.w	r7, r4, #22
 8012966:	f105 0216 	add.w	r2, r5, #22
 801296a:	b292      	uxth	r2, r2
 801296c:	b2bf      	uxth	r7, r7
 801296e:	4643      	mov	r3, r8
 8012970:	4639      	mov	r1, r7
 8012972:	4610      	mov	r0, r2
 8012974:	9600      	str	r6, [sp, #0]
 8012976:	f009 fae5 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+22, X+23, Y+32, TFT_White);
 801297a:	f105 0217 	add.w	r2, r5, #23
 801297e:	b292      	uxth	r2, r2
 8012980:	f104 0320 	add.w	r3, r4, #32
 8012984:	4639      	mov	r1, r7
 8012986:	4610      	mov	r0, r2
 8012988:	9600      	str	r6, [sp, #0]
 801298a:	b29b      	uxth	r3, r3
 801298c:	f009 fada 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+23, X+24, Y+31, TFT_White);
 8012990:	f104 081f 	add.w	r8, r4, #31
 8012994:	f105 0218 	add.w	r2, r5, #24
 8012998:	b292      	uxth	r2, r2
 801299a:	fa1f f888 	uxth.w	r8, r8
 801299e:	f104 0117 	add.w	r1, r4, #23
 80129a2:	4643      	mov	r3, r8
 80129a4:	4610      	mov	r0, r2
 80129a6:	9600      	str	r6, [sp, #0]
 80129a8:	b289      	uxth	r1, r1
 80129aa:	f009 facb 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+24, X+25, Y+31, TFT_White);
 80129ae:	f104 0718 	add.w	r7, r4, #24
 80129b2:	f105 0219 	add.w	r2, r5, #25
 80129b6:	b292      	uxth	r2, r2
 80129b8:	b2bf      	uxth	r7, r7
 80129ba:	4643      	mov	r3, r8
 80129bc:	4639      	mov	r1, r7
 80129be:	4610      	mov	r0, r2
 80129c0:	9600      	str	r6, [sp, #0]
 80129c2:	f009 fabf 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
 80129c6:	f105 021a 	add.w	r2, r5, #26
 80129ca:	b292      	uxth	r2, r2
 80129cc:	f104 031e 	add.w	r3, r4, #30
 80129d0:	4639      	mov	r1, r7
 80129d2:	4610      	mov	r0, r2
 80129d4:	9600      	str	r6, [sp, #0]
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	f009 fab4 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
 80129dc:	f104 0819 	add.w	r8, r4, #25
 80129e0:	f105 021b 	add.w	r2, r5, #27
 80129e4:	b292      	uxth	r2, r2
 80129e6:	fa1f f888 	uxth.w	r8, r8
 80129ea:	f104 031d 	add.w	r3, r4, #29
 80129ee:	4641      	mov	r1, r8
 80129f0:	4610      	mov	r0, r2
 80129f2:	9600      	str	r6, [sp, #0]
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	f009 faa5 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
 80129fa:	f104 071c 	add.w	r7, r4, #28
 80129fe:	f105 021c 	add.w	r2, r5, #28
 8012a02:	b292      	uxth	r2, r2
 8012a04:	b2bf      	uxth	r7, r7
 8012a06:	463b      	mov	r3, r7
 8012a08:	4641      	mov	r1, r8
 8012a0a:	4610      	mov	r0, r2
 8012a0c:	9600      	str	r6, [sp, #0]
 8012a0e:	f009 fa99 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
 8012a12:	f105 021d 	add.w	r2, r5, #29
 8012a16:	b292      	uxth	r2, r2
 8012a18:	f104 011a 	add.w	r1, r4, #26
 8012a1c:	463b      	mov	r3, r7
 8012a1e:	4610      	mov	r0, r2
 8012a20:	9600      	str	r6, [sp, #0]
 8012a22:	b289      	uxth	r1, r1
 8012a24:	f009 fa8e 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
 8012a28:	9600      	str	r6, [sp, #0]
 8012a2a:	465b      	mov	r3, fp
 8012a2c:	4652      	mov	r2, sl
 8012a2e:	4659      	mov	r1, fp
 8012a30:	4650      	mov	r0, sl
 8012a32:	f009 fa87 	bl	801bf44 <TFT_DrawLine>
}
 8012a36:	b005      	add	sp, #20
 8012a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012a3c <GUI_Button_Measure_deltaE_Small>:

void GUI_Button_Measure_deltaE_Small(uint16_t X, uint16_t Y, uint16_t Active, uint8_t color)
{
 8012a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a40:	4605      	mov	r5, r0
 8012a42:	460c      	mov	r4, r1
 8012a44:	f100 0623 	add.w	r6, r0, #35	; 0x23
 8012a48:	f101 0723 	add.w	r7, r1, #35	; 0x23
		if(Active){
 8012a4c:	2a00      	cmp	r2, #0
 8012a4e:	f000 8111 	beq.w	8012c74 <GUI_Button_Measure_deltaE_Small+0x238>
			TFT_FillRectangle(X, Y, X+35, Y+35, color == 0 ? TFT_Blue_Off:TFT_Green);
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f241 3276 	movw	r2, #4982	; 0x1376
 8012a58:	bf18      	it	ne
 8012a5a:	f44f 62fc 	movne.w	r2, #2016	; 0x7e0
 8012a5e:	9200      	str	r2, [sp, #0]
		}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
	
	
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012a60:	f105 080a 	add.w	r8, r5, #10
 8012a64:	f104 0b07 	add.w	fp, r4, #7
 8012a68:	f104 091e 	add.w	r9, r4, #30
 8012a6c:	fa1f f888 	uxth.w	r8, r8
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8012a70:	b2bb      	uxth	r3, r7
 8012a72:	b2b2      	uxth	r2, r6
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012a74:	fa1f fb8b 	uxth.w	fp, fp
 8012a78:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8012a7c:	fa1f f989 	uxth.w	r9, r9
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012a80:	f105 0a1c 	add.w	sl, r5, #28
 8012a84:	f104 0712 	add.w	r7, r4, #18
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8012a88:	f009 fab9 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012a8c:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012a8e:	464b      	mov	r3, r9
 8012a90:	4642      	mov	r2, r8
 8012a92:	4659      	mov	r1, fp
 8012a94:	4640      	mov	r0, r8
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012a96:	fa1f fa8a 	uxth.w	sl, sl
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012a9a:	9600      	str	r6, [sp, #0]
 8012a9c:	f009 fa52 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012aa0:	463b      	mov	r3, r7
 8012aa2:	4652      	mov	r2, sl
 8012aa4:	4659      	mov	r1, fp
 8012aa6:	4640      	mov	r0, r8
 8012aa8:	9600      	str	r6, [sp, #0]
 8012aaa:	f009 fa4b 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+30, X+28, Y+18, TFT_White);
 8012aae:	463b      	mov	r3, r7
 8012ab0:	4652      	mov	r2, sl
 8012ab2:	4649      	mov	r1, r9
 8012ab4:	4640      	mov	r0, r8
 8012ab6:	9600      	str	r6, [sp, #0]
 8012ab8:	f009 fa44 	bl	801bf44 <TFT_DrawLine>
	
	//paint
	TFT_DrawLine(X+11, Y+8, X+11, Y+29, TFT_White);
 8012abc:	f105 020b 	add.w	r2, r5, #11
 8012ac0:	b292      	uxth	r2, r2
 8012ac2:	f104 031d 	add.w	r3, r4, #29
 8012ac6:	f104 0108 	add.w	r1, r4, #8
 8012aca:	4610      	mov	r0, r2
 8012acc:	9600      	str	r6, [sp, #0]
 8012ace:	b29b      	uxth	r3, r3
 8012ad0:	b289      	uxth	r1, r1
 8012ad2:	f009 fa37 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+9, X+12, Y+28, TFT_White);
 8012ad6:	f104 091c 	add.w	r9, r4, #28
 8012ada:	f105 020c 	add.w	r2, r5, #12
 8012ade:	b292      	uxth	r2, r2
 8012ae0:	fa1f f989 	uxth.w	r9, r9
 8012ae4:	f104 0109 	add.w	r1, r4, #9
 8012ae8:	464b      	mov	r3, r9
 8012aea:	4610      	mov	r0, r2
 8012aec:	9600      	str	r6, [sp, #0]
 8012aee:	b289      	uxth	r1, r1
 8012af0:	f009 fa28 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+10, X+13, Y+28, TFT_White);
 8012af4:	f104 080a 	add.w	r8, r4, #10
 8012af8:	f105 020d 	add.w	r2, r5, #13
 8012afc:	b292      	uxth	r2, r2
 8012afe:	fa1f f888 	uxth.w	r8, r8
 8012b02:	464b      	mov	r3, r9
 8012b04:	4641      	mov	r1, r8
 8012b06:	4610      	mov	r0, r2
 8012b08:	9600      	str	r6, [sp, #0]
 8012b0a:	f009 fa1b 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+10, X+14, Y+27, TFT_White);
 8012b0e:	f105 020e 	add.w	r2, r5, #14
 8012b12:	b292      	uxth	r2, r2
 8012b14:	f104 031b 	add.w	r3, r4, #27
 8012b18:	4641      	mov	r1, r8
 8012b1a:	4610      	mov	r0, r2
 8012b1c:	9600      	str	r6, [sp, #0]
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	f009 fa10 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+11, X+15, Y+26, TFT_White);
 8012b24:	f104 091a 	add.w	r9, r4, #26
 8012b28:	f105 020f 	add.w	r2, r5, #15
 8012b2c:	b292      	uxth	r2, r2
 8012b2e:	fa1f f989 	uxth.w	r9, r9
 8012b32:	f104 010b 	add.w	r1, r4, #11
 8012b36:	464b      	mov	r3, r9
 8012b38:	4610      	mov	r0, r2
 8012b3a:	9600      	str	r6, [sp, #0]
 8012b3c:	b289      	uxth	r1, r1
 8012b3e:	f009 fa01 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+12, X+16, Y+26, TFT_White);
 8012b42:	f104 080c 	add.w	r8, r4, #12
 8012b46:	f105 0210 	add.w	r2, r5, #16
 8012b4a:	b292      	uxth	r2, r2
 8012b4c:	fa1f f888 	uxth.w	r8, r8
 8012b50:	464b      	mov	r3, r9
 8012b52:	4641      	mov	r1, r8
 8012b54:	4610      	mov	r0, r2
 8012b56:	9600      	str	r6, [sp, #0]
 8012b58:	f009 f9f4 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+12, X+17, Y+25, TFT_White);
 8012b5c:	f105 0211 	add.w	r2, r5, #17
 8012b60:	b292      	uxth	r2, r2
 8012b62:	f104 0319 	add.w	r3, r4, #25
 8012b66:	4641      	mov	r1, r8
 8012b68:	4610      	mov	r0, r2
 8012b6a:	9600      	str	r6, [sp, #0]
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	f009 f9e9 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+13, X+18, Y+24, TFT_White);
 8012b72:	f105 0212 	add.w	r2, r5, #18
 8012b76:	b292      	uxth	r2, r2
 8012b78:	f104 0318 	add.w	r3, r4, #24
 8012b7c:	f104 010d 	add.w	r1, r4, #13
 8012b80:	4610      	mov	r0, r2
 8012b82:	9600      	str	r6, [sp, #0]
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	b289      	uxth	r1, r1
 8012b88:	f009 f9dc 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+14, X+19, Y+23, TFT_White);
 8012b8c:	f104 080e 	add.w	r8, r4, #14
 8012b90:	f105 0213 	add.w	r2, r5, #19
 8012b94:	f104 0917 	add.w	r9, r4, #23
 8012b98:	b292      	uxth	r2, r2
 8012b9a:	fa1f f888 	uxth.w	r8, r8
 8012b9e:	fa1f f989 	uxth.w	r9, r9
 8012ba2:	464b      	mov	r3, r9
 8012ba4:	4641      	mov	r1, r8
 8012ba6:	4610      	mov	r0, r2
 8012ba8:	9600      	str	r6, [sp, #0]
 8012baa:	f009 f9cb 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+14, X+20, Y+23, TFT_White);
 8012bae:	f105 0214 	add.w	r2, r5, #20
 8012bb2:	b292      	uxth	r2, r2
 8012bb4:	464b      	mov	r3, r9
 8012bb6:	4641      	mov	r1, r8
 8012bb8:	4610      	mov	r0, r2
 8012bba:	9600      	str	r6, [sp, #0]
 8012bbc:	f009 f9c2 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+15, X+21, Y+22, TFT_White);
 8012bc0:	f104 080f 	add.w	r8, r4, #15
 8012bc4:	f105 0215 	add.w	r2, r5, #21
 8012bc8:	f104 0916 	add.w	r9, r4, #22
 8012bcc:	b292      	uxth	r2, r2
 8012bce:	fa1f f888 	uxth.w	r8, r8
 8012bd2:	fa1f f989 	uxth.w	r9, r9
 8012bd6:	464b      	mov	r3, r9
 8012bd8:	4641      	mov	r1, r8
 8012bda:	4610      	mov	r0, r2
 8012bdc:	9600      	str	r6, [sp, #0]
 8012bde:	f009 f9b1 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+15, X+22, Y+22, TFT_White);
 8012be2:	f105 0216 	add.w	r2, r5, #22
 8012be6:	b292      	uxth	r2, r2
 8012be8:	464b      	mov	r3, r9
 8012bea:	4641      	mov	r1, r8
 8012bec:	4610      	mov	r0, r2
 8012bee:	9600      	str	r6, [sp, #0]
 8012bf0:	f009 f9a8 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+16, X+23, Y+21, TFT_White);
 8012bf4:	f104 0810 	add.w	r8, r4, #16
 8012bf8:	f105 0217 	add.w	r2, r5, #23
 8012bfc:	b292      	uxth	r2, r2
 8012bfe:	fa1f f888 	uxth.w	r8, r8
 8012c02:	f104 0315 	add.w	r3, r4, #21
 8012c06:	4641      	mov	r1, r8
 8012c08:	4610      	mov	r0, r2
 8012c0a:	9600      	str	r6, [sp, #0]
 8012c0c:	b29b      	uxth	r3, r3
 8012c0e:	f009 f999 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+16, X+24, Y+20, TFT_White);
 8012c12:	f104 0914 	add.w	r9, r4, #20
 8012c16:	f105 0218 	add.w	r2, r5, #24
 8012c1a:	b292      	uxth	r2, r2
 8012c1c:	fa1f f989 	uxth.w	r9, r9
 8012c20:	464b      	mov	r3, r9
 8012c22:	4641      	mov	r1, r8
 8012c24:	4610      	mov	r0, r2
 8012c26:	9600      	str	r6, [sp, #0]
 8012c28:	f009 f98c 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+17, X+25, Y+20, TFT_White);
 8012c2c:	f104 0811 	add.w	r8, r4, #17
 8012c30:	f105 0219 	add.w	r2, r5, #25
 8012c34:	b292      	uxth	r2, r2
 8012c36:	fa1f f888 	uxth.w	r8, r8
 8012c3a:	464b      	mov	r3, r9
 8012c3c:	4641      	mov	r1, r8
 8012c3e:	4610      	mov	r0, r2
 8012c40:	9600      	str	r6, [sp, #0]
 8012c42:	f009 f97f 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+17, X+26, Y+19, TFT_White);
 8012c46:	3413      	adds	r4, #19
 8012c48:	f105 021a 	add.w	r2, r5, #26
 8012c4c:	b292      	uxth	r2, r2
 8012c4e:	b2a4      	uxth	r4, r4
 8012c50:	4623      	mov	r3, r4
 8012c52:	4641      	mov	r1, r8
 8012c54:	4610      	mov	r0, r2
 8012c56:	9600      	str	r6, [sp, #0]
 8012c58:	f009 f974 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+18, X+27, Y+19, TFT_White);
 8012c5c:	f105 021b 	add.w	r2, r5, #27
 8012c60:	b292      	uxth	r2, r2
 8012c62:	9600      	str	r6, [sp, #0]
 8012c64:	4623      	mov	r3, r4
 8012c66:	4639      	mov	r1, r7
 8012c68:	4610      	mov	r0, r2
 8012c6a:	f009 f96b 	bl	801bf44 <TFT_DrawLine>
}
 8012c6e:	b003      	add	sp, #12
 8012c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8012c74:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8012c78:	9300      	str	r3, [sp, #0]
 8012c7a:	e6f1      	b.n	8012a60 <GUI_Button_Measure_deltaE_Small+0x24>

08012c7c <GUI_CheckBox>:

void GUI_CheckBox(uint16_t X, uint16_t Y, uint16_t Check)
{
 8012c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8012c80:	f101 0323 	add.w	r3, r1, #35	; 0x23
{
 8012c84:	4616      	mov	r6, r2
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8012c86:	f241 3876 	movw	r8, #4982	; 0x1376
 8012c8a:	f100 0223 	add.w	r2, r0, #35	; 0x23
 8012c8e:	f8cd 8000 	str.w	r8, [sp]
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	b292      	uxth	r2, r2
{
 8012c96:	4604      	mov	r4, r0
 8012c98:	460d      	mov	r5, r1
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8012c9a:	f009 f9c8 	bl	801c02e <TFT_DrawRectangle>
	if(Check)
 8012c9e:	b1fe      	cbz	r6, 8012ce0 <GUI_CheckBox+0x64>
		{
			TFT_DrawLine(X+8, Y+17, X+16, Y+26, TFT_Blue_Off);
 8012ca0:	f104 0610 	add.w	r6, r4, #16
 8012ca4:	f105 071a 	add.w	r7, r5, #26
 8012ca8:	b2b6      	uxth	r6, r6
 8012caa:	b2bf      	uxth	r7, r7
 8012cac:	f105 0111 	add.w	r1, r5, #17
 8012cb0:	f104 0008 	add.w	r0, r4, #8
 8012cb4:	463b      	mov	r3, r7
 8012cb6:	4632      	mov	r2, r6
 8012cb8:	b289      	uxth	r1, r1
 8012cba:	b280      	uxth	r0, r0
 8012cbc:	f8cd 8000 	str.w	r8, [sp]
 8012cc0:	f009 f940 	bl	801bf44 <TFT_DrawLine>
			TFT_DrawLine(X+16, Y+26, X+29, Y+5, TFT_Blue_Off);
 8012cc4:	1d6b      	adds	r3, r5, #5
 8012cc6:	f104 021d 	add.w	r2, r4, #29
 8012cca:	f8cd 8000 	str.w	r8, [sp]
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	b292      	uxth	r2, r2
 8012cd2:	4639      	mov	r1, r7
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	f009 f935 	bl	801bf44 <TFT_DrawLine>
		} else {
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
		}
}
 8012cda:	b002      	add	sp, #8
 8012cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
 8012ce0:	f105 0320 	add.w	r3, r5, #32
 8012ce4:	f104 0220 	add.w	r2, r4, #32
 8012ce8:	1ca9      	adds	r1, r5, #2
 8012cea:	1ca0      	adds	r0, r4, #2
 8012cec:	2463      	movs	r4, #99	; 0x63
 8012cee:	9400      	str	r4, [sp, #0]
 8012cf0:	b29b      	uxth	r3, r3
 8012cf2:	b292      	uxth	r2, r2
 8012cf4:	b289      	uxth	r1, r1
 8012cf6:	b280      	uxth	r0, r0
 8012cf8:	f009 f981 	bl	801bffe <TFT_FillRectangle>
}
 8012cfc:	e7ed      	b.n	8012cda <GUI_CheckBox+0x5e>

08012cfe <GUI_RadioBox>:



void GUI_RadioBox(uint16_t X, uint16_t Y, uint16_t Check, uint16_t Active)
{
 8012cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d02:	f100 0411 	add.w	r4, r0, #17
 8012d06:	f101 0511 	add.w	r5, r1, #17
 8012d0a:	4690      	mov	r8, r2
	if(Active){
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 8012d0c:	b226      	sxth	r6, r4
 8012d0e:	b22f      	sxth	r7, r5
	if(Active){
 8012d10:	b173      	cbz	r3, 8012d30 <GUI_RadioBox+0x32>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 8012d12:	f241 3376 	movw	r3, #4982	; 0x1376
 8012d16:	220f      	movs	r2, #15
 8012d18:	4639      	mov	r1, r7
 8012d1a:	4630      	mov	r0, r6
 8012d1c:	f009 f872 	bl	801be04 <TFT_DrawCircle>
	} else
	{
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
	}
	if(Check)
 8012d20:	f1b8 0f00 	cmp.w	r8, #0
 8012d24:	d111      	bne.n	8012d4a <GUI_RadioBox+0x4c>
			if(Active)
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
		} else
		{
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8012d26:	2363      	movs	r3, #99	; 0x63
 8012d28:	220a      	movs	r2, #10
 8012d2a:	b229      	sxth	r1, r5
 8012d2c:	b220      	sxth	r0, r4
 8012d2e:	e011      	b.n	8012d54 <GUI_RadioBox+0x56>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
 8012d30:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8012d34:	220f      	movs	r2, #15
 8012d36:	4639      	mov	r1, r7
 8012d38:	4630      	mov	r0, r6
 8012d3a:	f009 f863 	bl	801be04 <TFT_DrawCircle>
	if(Check)
 8012d3e:	f1b8 0f00 	cmp.w	r8, #0
 8012d42:	d0f0      	beq.n	8012d26 <GUI_RadioBox+0x28>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8012d44:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8012d48:	e001      	b.n	8012d4e <GUI_RadioBox+0x50>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
 8012d4a:	f241 3376 	movw	r3, #4982	; 0x1376
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8012d4e:	220a      	movs	r2, #10
 8012d50:	4639      	mov	r1, r7
 8012d52:	4630      	mov	r0, r6
		}
}
 8012d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8012d58:	f009 b98d 	b.w	801c076 <TFT_DrawFilledCircle>

08012d5c <GUI_Switch_Button>:

void GUI_Switch_Button(uint16_t X, uint16_t Y, uint8_t Check)
{
 8012d5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012d60:	f101 031c 	add.w	r3, r1, #28
 8012d64:	2663      	movs	r6, #99	; 0x63
{
 8012d66:	4617      	mov	r7, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012d68:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
 8012d6c:	460d      	mov	r5, r1
 8012d6e:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012d70:	9600      	str	r6, [sp, #0]
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	b292      	uxth	r2, r2
 8012d76:	f009 f942 	bl	801bffe <TFT_FillRectangle>
 8012d7a:	f105 0611 	add.w	r6, r5, #17
 8012d7e:	f105 0318 	add.w	r3, r5, #24
 8012d82:	f105 010a 	add.w	r1, r5, #10
 8012d86:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8012d8a:	4d1f      	ldr	r5, [pc, #124]	; (8012e08 <GUI_Switch_Button+0xac>)
	if(Check)
 8012d8c:	b1ef      	cbz	r7, 8012dca <GUI_Switch_Button+0x6e>
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8012d8e:	f242 409b 	movw	r0, #9371	; 0x249b
 8012d92:	270a      	movs	r7, #10
 8012d94:	9001      	str	r0, [sp, #4]
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	b292      	uxth	r2, r2
 8012d9a:	b289      	uxth	r1, r1
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	9700      	str	r7, [sp, #0]
 8012da0:	f009 fab2 	bl	801c308 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8012da4:	f104 0019 	add.w	r0, r4, #25
 8012da8:	f241 3376 	movw	r3, #4982	; 0x1376
 8012dac:	463a      	mov	r2, r7
 8012dae:	b231      	sxth	r1, r6
 8012db0:	b200      	sxth	r0, r0
 8012db2:	f009 f960 	bl	801c076 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x00){
 8012db6:	782b      	ldrb	r3, [r5, #0]
 8012db8:	b923      	cbnz	r3, 8012dc4 <GUI_Switch_Button+0x68>
				HAL_UART_MspInit(&hlpuart1); //Enable Bluetooth
 8012dba:	4814      	ldr	r0, [pc, #80]	; (8012e0c <GUI_Switch_Button+0xb0>)
 8012dbc:	f00c f8fa 	bl	801efb4 <HAL_UART_MspInit>
				BluetoothStat = 0x01;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	702b      	strb	r3, [r5, #0]
			if(BluetoothStat == 0x01){
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
				BluetoothStat = 0x00;
			}
		}
}
 8012dc4:	b002      	add	sp, #8
 8012dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_LightGrey);
 8012dca:	f04f 080a 	mov.w	r8, #10
 8012dce:	f24c 6018 	movw	r0, #50712	; 0xc618
 8012dd2:	9001      	str	r0, [sp, #4]
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	b292      	uxth	r2, r2
 8012dd8:	b289      	uxth	r1, r1
 8012dda:	4620      	mov	r0, r4
 8012ddc:	f8cd 8000 	str.w	r8, [sp]
 8012de0:	f009 fa92 	bl	801c308 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8012de4:	eb04 0008 	add.w	r0, r4, r8
 8012de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012dec:	4642      	mov	r2, r8
 8012dee:	b231      	sxth	r1, r6
 8012df0:	b200      	sxth	r0, r0
 8012df2:	f009 f940 	bl	801c076 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x01){
 8012df6:	782b      	ldrb	r3, [r5, #0]
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d1e3      	bne.n	8012dc4 <GUI_Switch_Button+0x68>
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
 8012dfc:	4803      	ldr	r0, [pc, #12]	; (8012e0c <GUI_Switch_Button+0xb0>)
 8012dfe:	f00c f925 	bl	801f04c <HAL_UART_MspDeInit>
				BluetoothStat = 0x00;
 8012e02:	702f      	strb	r7, [r5, #0]
}
 8012e04:	e7de      	b.n	8012dc4 <GUI_Switch_Button+0x68>
 8012e06:	bf00      	nop
 8012e08:	20009d10 	.word	0x20009d10
 8012e0c:	200958b0 	.word	0x200958b0

08012e10 <GUI_Switch_ButtonActive>:

void GUI_Switch_ButtonActive(uint16_t X, uint16_t Y, uint8_t Check)
{
 8012e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012e12:	f101 031c 	add.w	r3, r1, #28
{
 8012e16:	4616      	mov	r6, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012e18:	2763      	movs	r7, #99	; 0x63
 8012e1a:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	b292      	uxth	r2, r2
 8012e22:	9700      	str	r7, [sp, #0]
{
 8012e24:	460d      	mov	r5, r1
 8012e26:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012e28:	f009 f8e9 	bl	801bffe <TFT_FillRectangle>
	if(Check)
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8012e2c:	f242 409b 	movw	r0, #9371	; 0x249b
 8012e30:	f105 0318 	add.w	r3, r5, #24
 8012e34:	f105 010a 	add.w	r1, r5, #10
 8012e38:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8012e3c:	3511      	adds	r5, #17
 8012e3e:	9001      	str	r0, [sp, #4]
	if(Check)
 8012e40:	b19e      	cbz	r6, 8012e6a <GUI_Switch_ButtonActive+0x5a>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8012e42:	260a      	movs	r6, #10
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	4620      	mov	r0, r4
 8012e48:	9600      	str	r6, [sp, #0]
 8012e4a:	b292      	uxth	r2, r2
 8012e4c:	b289      	uxth	r1, r1
 8012e4e:	f009 fa5b 	bl	801c308 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8012e52:	f104 0019 	add.w	r0, r4, #25
 8012e56:	f241 3376 	movw	r3, #4982	; 0x1376
		} else
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8012e5a:	4632      	mov	r2, r6
 8012e5c:	b229      	sxth	r1, r5
 8012e5e:	b200      	sxth	r0, r0
		}
}
 8012e60:	b003      	add	sp, #12
 8012e62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8012e66:	f009 b906 	b.w	801c076 <TFT_DrawFilledCircle>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8012e6a:	260a      	movs	r6, #10
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	4620      	mov	r0, r4
 8012e70:	9600      	str	r6, [sp, #0]
 8012e72:	b292      	uxth	r2, r2
 8012e74:	b289      	uxth	r1, r1
 8012e76:	f009 fa47 	bl	801c308 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8012e7a:	19a0      	adds	r0, r4, r6
 8012e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e80:	e7eb      	b.n	8012e5a <GUI_Switch_ButtonActive+0x4a>

08012e82 <GUI_Flag_Ru>:


void GUI_Flag_Ru(uint16_t X, uint16_t Y)
{
 8012e82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8012e86:	f100 0423 	add.w	r4, r0, #35	; 0x23
 8012e8a:	1dcf      	adds	r7, r1, #7
{
 8012e8c:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8012e8e:	b2a4      	uxth	r4, r4
 8012e90:	b2bf      	uxth	r7, r7
 8012e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e96:	9300      	str	r3, [sp, #0]
 8012e98:	4622      	mov	r2, r4
 8012e9a:	463b      	mov	r3, r7
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8012e9c:	f105 060e 	add.w	r6, r5, #14
{
 8012ea0:	4680      	mov	r8, r0
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8012ea2:	b2b6      	uxth	r6, r6
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8012ea4:	f009 f8ab 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8012ea8:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8012eac:	9300      	str	r3, [sp, #0]
 8012eae:	4622      	mov	r2, r4
 8012eb0:	4633      	mov	r3, r6
 8012eb2:	4639      	mov	r1, r7
 8012eb4:	4640      	mov	r0, r8
 8012eb6:	f009 f8a2 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+35, Y+21, TFT_RuRed);
 8012eba:	f105 0315 	add.w	r3, r5, #21
 8012ebe:	f64c 1243 	movw	r2, #51523	; 0xc943
 8012ec2:	9200      	str	r2, [sp, #0]
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	4622      	mov	r2, r4
 8012ec8:	4631      	mov	r1, r6
 8012eca:	4640      	mov	r0, r8
 8012ecc:	f009 f897 	bl	801bffe <TFT_FillRectangle>
}
 8012ed0:	b002      	add	sp, #8
 8012ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ed6 <GUI_Flag_En>:

void GUI_Flag_En(uint16_t X, uint16_t Y)
{
 8012ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8012eda:	f100 030f 	add.w	r3, r0, #15
{
 8012ede:	b08d      	sub	sp, #52	; 0x34
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	270f      	movs	r7, #15
 8012ee4:	9302      	str	r3, [sp, #8]
 8012ee6:	f101 0309 	add.w	r3, r1, #9
{
 8012eea:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	9700      	str	r7, [sp, #0]
 8012ef0:	9a02      	ldr	r2, [sp, #8]
 8012ef2:	9303      	str	r3, [sp, #12]
{
 8012ef4:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 8012ef6:	f009 f882 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y, X+34, Y+9, TFT_Navy);
 8012efa:	f104 0314 	add.w	r3, r4, #20
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	f104 0822 	add.w	r8, r4, #34	; 0x22
 8012f04:	fa1f f888 	uxth.w	r8, r8
 8012f08:	9304      	str	r3, [sp, #16]
 8012f0a:	9700      	str	r7, [sp, #0]
 8012f0c:	9b03      	ldr	r3, [sp, #12]
 8012f0e:	9804      	ldr	r0, [sp, #16]
 8012f10:	4642      	mov	r2, r8
 8012f12:	4629      	mov	r1, r5
 8012f14:	f009 f873 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+15, Y+21, TFT_Navy);
 8012f18:	f105 030e 	add.w	r3, r5, #14
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	f105 0615 	add.w	r6, r5, #21
 8012f22:	b2b6      	uxth	r6, r6
 8012f24:	9305      	str	r3, [sp, #20]
 8012f26:	9700      	str	r7, [sp, #0]
 8012f28:	4633      	mov	r3, r6
 8012f2a:	9a02      	ldr	r2, [sp, #8]
 8012f2c:	9905      	ldr	r1, [sp, #20]
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f009 f865 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y+14, X+34, Y+21, TFT_Navy);
 8012f34:	9700      	str	r7, [sp, #0]
 8012f36:	4633      	mov	r3, r6
 8012f38:	4642      	mov	r2, r8
 8012f3a:	9905      	ldr	r1, [sp, #20]
 8012f3c:	9804      	ldr	r0, [sp, #16]
 8012f3e:	f009 f85e 	bl	801bffe <TFT_FillRectangle>
	
	TFT_DrawLine(X, Y+2, X+29, Y+21, TFT_White);
 8012f42:	1cab      	adds	r3, r5, #2
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	f104 091d 	add.w	r9, r4, #29
 8012f4a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8012f4e:	9307      	str	r3, [sp, #28]
 8012f50:	fa1f f989 	uxth.w	r9, r9
 8012f54:	9700      	str	r7, [sp, #0]
 8012f56:	4633      	mov	r3, r6
 8012f58:	464a      	mov	r2, r9
 8012f5a:	9907      	ldr	r1, [sp, #28]
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	f008 fff1 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X, Y+1, X+29, Y+21, TFT_White);
 8012f62:	1c6b      	adds	r3, r5, #1
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	9308      	str	r3, [sp, #32]
 8012f68:	9700      	str	r7, [sp, #0]
 8012f6a:	4633      	mov	r3, r6
 8012f6c:	464a      	mov	r2, r9
 8012f6e:	9908      	ldr	r1, [sp, #32]
 8012f70:	4620      	mov	r0, r4
 8012f72:	f008 ffe7 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X, Y, X+30, Y+21, TFT_White);
 8012f76:	f104 021e 	add.w	r2, r4, #30
 8012f7a:	9700      	str	r7, [sp, #0]
 8012f7c:	4633      	mov	r3, r6
 8012f7e:	4629      	mov	r1, r5
 8012f80:	4620      	mov	r0, r4
 8012f82:	b292      	uxth	r2, r2
 8012f84:	f008 ffde 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y, X+31, Y+21, TFT_White);
 8012f88:	1c63      	adds	r3, r4, #1
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	f104 0a1f 	add.w	sl, r4, #31
 8012f90:	9309      	str	r3, [sp, #36]	; 0x24
 8012f92:	fa1f fa8a 	uxth.w	sl, sl
 8012f96:	9700      	str	r7, [sp, #0]
 8012f98:	4633      	mov	r3, r6
 8012f9a:	4652      	mov	r2, sl
 8012f9c:	4629      	mov	r1, r5
 8012f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012fa0:	f008 ffd0 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y, X+31, Y+21, TFT_White);
 8012fa4:	1ca3      	adds	r3, r4, #2
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8012faa:	9700      	str	r7, [sp, #0]
 8012fac:	4633      	mov	r3, r6
 8012fae:	4652      	mov	r2, sl
 8012fb0:	4629      	mov	r1, r5
 8012fb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012fb4:	f008 ffc6 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y, X+32, Y+21, TFT_White);
 8012fb8:	1ce3      	adds	r3, r4, #3
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	f104 0920 	add.w	r9, r4, #32
 8012fc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8012fc2:	fa1f f989 	uxth.w	r9, r9
 8012fc6:	9700      	str	r7, [sp, #0]
 8012fc8:	4633      	mov	r3, r6
 8012fca:	464a      	mov	r2, r9
 8012fcc:	4629      	mov	r1, r5
 8012fce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012fd0:	f008 ffb8 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+33, Y+21, TFT_White);
 8012fd4:	1d23      	adds	r3, r4, #4
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	f104 0b21 	add.w	fp, r4, #33	; 0x21
 8012fdc:	9306      	str	r3, [sp, #24]
 8012fde:	fa1f fb8b 	uxth.w	fp, fp
 8012fe2:	9700      	str	r7, [sp, #0]
 8012fe4:	4633      	mov	r3, r6
 8012fe6:	465a      	mov	r2, fp
 8012fe8:	4629      	mov	r1, r5
 8012fea:	9806      	ldr	r0, [sp, #24]
 8012fec:	f008 ffaa 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+34, Y+21, TFT_White);
 8012ff0:	9700      	str	r7, [sp, #0]
 8012ff2:	4633      	mov	r3, r6
 8012ff4:	4642      	mov	r2, r8
 8012ff6:	4629      	mov	r1, r5
 8012ff8:	9806      	ldr	r0, [sp, #24]
 8012ffa:	f008 ffa3 	bl	801bf44 <TFT_DrawLine>
	
	TFT_DrawLine(X, Y+21, X+31, Y, TFT_White);
 8012ffe:	9700      	str	r7, [sp, #0]
 8013000:	462b      	mov	r3, r5
 8013002:	4652      	mov	r2, sl
 8013004:	4631      	mov	r1, r6
 8013006:	4620      	mov	r0, r4
 8013008:	f008 ff9c 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y+21, X+32, Y, TFT_White);
 801300c:	9700      	str	r7, [sp, #0]
 801300e:	462b      	mov	r3, r5
 8013010:	464a      	mov	r2, r9
 8013012:	4631      	mov	r1, r6
 8013014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013016:	f008 ff95 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y+21, X+32, Y, TFT_White);
 801301a:	9700      	str	r7, [sp, #0]
 801301c:	462b      	mov	r3, r5
 801301e:	464a      	mov	r2, r9
 8013020:	4631      	mov	r1, r6
 8013022:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013024:	f008 ff8e 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y+21, X+33, Y, TFT_White);
 8013028:	9700      	str	r7, [sp, #0]
 801302a:	462b      	mov	r3, r5
 801302c:	465a      	mov	r2, fp
 801302e:	4631      	mov	r1, r6
 8013030:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013032:	f008 ff87 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y+21, X+34, Y, TFT_White);
 8013036:	9700      	str	r7, [sp, #0]
 8013038:	462b      	mov	r3, r5
 801303a:	4642      	mov	r2, r8
 801303c:	4631      	mov	r1, r6
 801303e:	9806      	ldr	r0, [sp, #24]
 8013040:	f008 ff80 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+5, Y+21, X+34, Y+1, TFT_White);
 8013044:	1d60      	adds	r0, r4, #5
 8013046:	9700      	str	r7, [sp, #0]
 8013048:	9b08      	ldr	r3, [sp, #32]
 801304a:	4642      	mov	r2, r8
 801304c:	4631      	mov	r1, r6
 801304e:	b280      	uxth	r0, r0
 8013050:	f008 ff78 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+21, X+34, Y+2, TFT_White);
 8013054:	1da0      	adds	r0, r4, #6
 8013056:	9700      	str	r7, [sp, #0]
 8013058:	9b07      	ldr	r3, [sp, #28]
 801305a:	4642      	mov	r2, r8
 801305c:	4631      	mov	r1, r6
 801305e:	b280      	uxth	r0, r0
 8013060:	f008 ff70 	bl	801bf44 <TFT_DrawLine>
	
	TFT_FillRectangle(X, Y+9, X+34, Y+14, TFT_White);
 8013064:	9700      	str	r7, [sp, #0]
 8013066:	9b05      	ldr	r3, [sp, #20]
 8013068:	9903      	ldr	r1, [sp, #12]
 801306a:	4642      	mov	r2, r8
 801306c:	4620      	mov	r0, r4
 801306e:	f008 ffc6 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+15, Y, X+20, Y+21, TFT_White);
 8013072:	9700      	str	r7, [sp, #0]
 8013074:	4633      	mov	r3, r6
 8013076:	9a04      	ldr	r2, [sp, #16]
 8013078:	9802      	ldr	r0, [sp, #8]
 801307a:	4629      	mov	r1, r5
 801307c:	f008 ffbf 	bl	801bffe <TFT_FillRectangle>
	
	TFT_FillRectangle(X+16, Y, X+19, Y+21, TFT_Red);
 8013080:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 8013084:	f104 0213 	add.w	r2, r4, #19
 8013088:	f104 0010 	add.w	r0, r4, #16
 801308c:	4633      	mov	r3, r6
 801308e:	4629      	mov	r1, r5
 8013090:	9700      	str	r7, [sp, #0]
 8013092:	b292      	uxth	r2, r2
 8013094:	b280      	uxth	r0, r0
 8013096:	f008 ffb2 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+10, X+34, Y+13, TFT_Red);
 801309a:	f105 030d 	add.w	r3, r5, #13
 801309e:	f105 010a 	add.w	r1, r5, #10
 80130a2:	9700      	str	r7, [sp, #0]
 80130a4:	b29b      	uxth	r3, r3
 80130a6:	4642      	mov	r2, r8
 80130a8:	b289      	uxth	r1, r1
 80130aa:	4620      	mov	r0, r4
 80130ac:	f008 ffa7 	bl	801bffe <TFT_FillRectangle>
	
}
 80130b0:	b00d      	add	sp, #52	; 0x34
 80130b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080130b8 <GUI_Bar_Measure>:
#include "GUI_Measure_Elements.h"
#include <math.h>
extern uint8_t Language_status, Mode_EL, preGUI_screen_state, GUI_screen_state;

void GUI_Bar_Measure(uint16_t X, uint16_t Y, float Value)
{
 80130b8:	b570      	push	{r4, r5, r6, lr}
 80130ba:	ed2d 8b02 	vpush	{d8}
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80130be:	f101 040a 	add.w	r4, r1, #10
{
 80130c2:	b084      	sub	sp, #16
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80130c4:	b2a4      	uxth	r4, r4
 80130c6:	f100 026e 	add.w	r2, r0, #110	; 0x6e
 80130ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80130ce:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80130d0:	9300      	str	r3, [sp, #0]
 80130d2:	b292      	uxth	r2, r2
 80130d4:	4623      	mov	r3, r4
{
 80130d6:	eeb0 8a40 	vmov.f32	s16, s0
 80130da:	460e      	mov	r6, r1
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80130dc:	f008 ff8f 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X, Y, X+110*Value, Y+10, TFT_Blue_Off);
 80130e0:	ee07 5a90 	vmov	s15, r5
 80130e4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8013114 <GUI_Bar_Measure+0x5c>
 80130e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130ec:	f241 3376 	movw	r3, #4982	; 0x1376
 80130f0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80130f4:	9300      	str	r3, [sp, #0]
 80130f6:	4631      	mov	r1, r6
 80130f8:	4623      	mov	r3, r4
 80130fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80130fe:	4628      	mov	r0, r5
 8013100:	edcd 7a03 	vstr	s15, [sp, #12]
 8013104:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013108:	f008 ff79 	bl	801bffe <TFT_FillRectangle>
}
 801310c:	b004      	add	sp, #16
 801310e:	ecbd 8b02 	vpop	{d8}
 8013112:	bd70      	pop	{r4, r5, r6, pc}
 8013114:	42dc0000 	.word	0x42dc0000

08013118 <GUI_Text_E_Measure>:


uint8_t  old_num_e = 10, old_num_n = 10, old_deg_e = 0xFF;
uint8_t old_meas_type_L = 2, old_numL_e = 10, old_numL_n = 10, old_rulx = 0, old_nan_Ee = 0, old_nan_El = 0; 
void GUI_Text_E_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 8013118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801311c:	ed2d 8b02 	vpush	{d8}
 8013120:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8013122:	4bba      	ldr	r3, [pc, #744]	; (801340c <GUI_Text_E_Measure+0x2f4>)
 8013124:	f8df a320 	ldr.w	sl, [pc, #800]	; 8013448 <GUI_Text_E_Measure+0x330>
 8013128:	f8df 9320 	ldr.w	r9, [pc, #800]	; 801344c <GUI_Text_E_Measure+0x334>
{
 801312c:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 801312e:	781a      	ldrb	r2, [r3, #0]
 8013130:	4bb7      	ldr	r3, [pc, #732]	; (8013410 <GUI_Text_E_Measure+0x2f8>)
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	429a      	cmp	r2, r3
{
 8013136:	b086      	sub	sp, #24
 8013138:	4604      	mov	r4, r0
 801313a:	460d      	mov	r5, r1
 801313c:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8013140:	d007      	beq.n	8013152 <GUI_Text_E_Measure+0x3a>
 8013142:	2300      	movs	r3, #0
 8013144:	f88a 3000 	strb.w	r3, [sl]
 8013148:	f889 3000 	strb.w	r3, [r9]
 801314c:	4bb1      	ldr	r3, [pc, #708]	; (8013414 <GUI_Text_E_Measure+0x2fc>)
 801314e:	22ff      	movs	r2, #255	; 0xff
 8013150:	701a      	strb	r2, [r3, #0]
	
	char buffer[9] = {0};
 8013152:	2300      	movs	r3, #0
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8013154:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 8013158:	9303      	str	r3, [sp, #12]
 801315a:	9304      	str	r3, [sp, #16]
 801315c:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8013160:	f009 f97c 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013164:	2063      	movs	r0, #99	; 0x63
 8013166:	f009 f97f 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 801316a:	48ab      	ldr	r0, [pc, #684]	; (8013418 <GUI_Text_E_Measure+0x300>)
 801316c:	f009 f970 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8013170:	1ca9      	adds	r1, r5, #2
 8013172:	2224      	movs	r2, #36	; 0x24
 8013174:	b289      	uxth	r1, r1
 8013176:	4620      	mov	r0, r4
 8013178:	f009 fa34 	bl	801c5e4 <TFT_DrawChar>
	

		if((Value/1000.0) >= 1.0)
 801317c:	ee18 0a10 	vmov	r0, s16
 8013180:	f7ed f9fa 	bl	8000578 <__aeabi_f2d>
 8013184:	2200      	movs	r2, #0
 8013186:	4ba5      	ldr	r3, [pc, #660]	; (801341c <GUI_Text_E_Measure+0x304>)
 8013188:	f7ed fb74 	bl	8000874 <__aeabi_ddiv>
 801318c:	2200      	movs	r2, #0
 801318e:	4ba4      	ldr	r3, [pc, #656]	; (8013420 <GUI_Text_E_Measure+0x308>)
 8013190:	f7ed fccc 	bl	8000b2c <__aeabi_dcmpge>
 8013194:	2800      	cmp	r0, #0
 8013196:	f000 80b4 	beq.w	8013302 <GUI_Text_E_Measure+0x1ea>
	{
		Value = Value/(1000.0);
 801319a:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8013424 <GUI_Text_E_Measure+0x30c>
 801319e:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 80131a2:	2701      	movs	r7, #1
		meas_type = 1;
	}else {meas_type = 0;}
	if(nope)
 80131a4:	2e00      	cmp	r6, #0
 80131a6:	f000 80ae 	beq.w	8013306 <GUI_Text_E_Measure+0x1ee>
		{	
			if(energy_light & !old_nan_Ee){
 80131aa:	f89a 3000 	ldrb.w	r3, [sl]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	bf14      	ite	ne
 80131b2:	2300      	movne	r3, #0
 80131b4:	f008 0301 	andeq.w	r3, r8, #1
 80131b8:	b33b      	cbz	r3, 801320a <GUI_Text_E_Measure+0xf2>
				TFT_SetTextColor(TFT_White);
 80131ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80131be:	f009 f94d 	bl	801c45c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80131c2:	2063      	movs	r0, #99	; 0x63
 80131c4:	f009 f950 	bl	801c468 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80131c8:	4897      	ldr	r0, [pc, #604]	; (8013428 <GUI_Text_E_Measure+0x310>)
 80131ca:	f009 f941 	bl	801c450 <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 80131ce:	2163      	movs	r1, #99	; 0x63
 80131d0:	f105 031a 	add.w	r3, r5, #26
 80131d4:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 80131d8:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80131dc:	9100      	str	r1, [sp, #0]
 80131de:	b29b      	uxth	r3, r3
 80131e0:	b292      	uxth	r2, r2
 80131e2:	4629      	mov	r1, r5
 80131e4:	b280      	uxth	r0, r0
 80131e6:	f008 ff0a 	bl	801bffe <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80131ea:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80131ec:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 80131f0:	f88d 300c 	strb.w	r3, [sp, #12]
 80131f4:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80131f8:	aa03      	add	r2, sp, #12
 80131fa:	2303      	movs	r3, #3
 80131fc:	4629      	mov	r1, r5
 80131fe:	b280      	uxth	r0, r0
 8013200:	f009 fa48 	bl	801c694 <TFT_DisplayString>
				old_nan_Ee = 1;
 8013204:	2301      	movs	r3, #1
 8013206:	f88a 3000 	strb.w	r3, [sl]
			}
				if(!energy_light & !old_nan_El){
 801320a:	f899 3000 	ldrb.w	r3, [r9]
 801320e:	bb53      	cbnz	r3, 8013266 <GUI_Text_E_Measure+0x14e>
 8013210:	f1b8 0f00 	cmp.w	r8, #0
 8013214:	d127      	bne.n	8013266 <GUI_Text_E_Measure+0x14e>
				TFT_SetTextColor(TFT_White);
 8013216:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801321a:	f009 f91f 	bl	801c45c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801321e:	2063      	movs	r0, #99	; 0x63
 8013220:	f009 f922 	bl	801c468 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8013224:	4880      	ldr	r0, [pc, #512]	; (8013428 <GUI_Text_E_Measure+0x310>)
 8013226:	f009 f913 	bl	801c450 <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 801322a:	2163      	movs	r1, #99	; 0x63
 801322c:	f105 031a 	add.w	r3, r5, #26
 8013230:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 8013234:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8013238:	9100      	str	r1, [sp, #0]
 801323a:	b29b      	uxth	r3, r3
 801323c:	b292      	uxth	r2, r2
 801323e:	4629      	mov	r1, r5
 8013240:	b280      	uxth	r0, r0
 8013242:	f008 fedc 	bl	801bffe <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8013246:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013248:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 801324c:	f88d 300c 	strb.w	r3, [sp, #12]
 8013250:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013254:	aa03      	add	r2, sp, #12
 8013256:	2303      	movs	r3, #3
 8013258:	4629      	mov	r1, r5
 801325a:	b280      	uxth	r0, r0
 801325c:	f009 fa1a 	bl	801c694 <TFT_DisplayString>
				old_nan_El = 1;
 8013260:	2301      	movs	r3, #1
 8013262:	f889 3000 	strb.w	r3, [r9]
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}

	if (Language_status == Ru && !energy_light)
 8013266:	4b71      	ldr	r3, [pc, #452]	; (801342c <GUI_Text_E_Measure+0x314>)
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	f040 80f0 	bne.w	8013450 <GUI_Text_E_Measure+0x338>
 8013270:	f1b8 0f00 	cmp.w	r8, #0
 8013274:	f040 813f 	bne.w	80134f6 <GUI_Text_E_Measure+0x3de>
	{
			if(deg != old_deg_e){
 8013278:	4b66      	ldr	r3, [pc, #408]	; (8013414 <GUI_Text_E_Measure+0x2fc>)
 801327a:	781a      	ldrb	r2, [r3, #0]
 801327c:	42ba      	cmp	r2, r7
 801327e:	4698      	mov	r8, r3
 8013280:	d030      	beq.n	80132e4 <GUI_Text_E_Measure+0x1cc>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8013282:	2663      	movs	r6, #99	; 0x63
 8013284:	f105 031a 	add.w	r3, r5, #26
 8013288:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801328c:	1ce9      	adds	r1, r5, #3
 801328e:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 8013292:	b29b      	uxth	r3, r3
 8013294:	b292      	uxth	r2, r2
 8013296:	b289      	uxth	r1, r1
 8013298:	9600      	str	r6, [sp, #0]
 801329a:	b280      	uxth	r0, r0
 801329c:	f008 feaf 	bl	801bffe <TFT_FillRectangle>
			TFT_SetTextColor(TFT_White);
 80132a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80132a4:	f009 f8da 	bl	801c45c <TFT_SetTextColor>
 80132a8:	1d2e      	adds	r6, r5, #4
			TFT_SetFont(&Font26RU_arch_small);
 80132aa:	4861      	ldr	r0, [pc, #388]	; (8013430 <GUI_Text_E_Measure+0x318>)
 80132ac:	f009 f8d0 	bl	801c450 <TFT_SetFont>
 80132b0:	f104 09d7 	add.w	r9, r4, #215	; 0xd7
 80132b4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
			if(deg){
			TFT_DrawCharRus(X+200, Y+4, 'к');
 80132b8:	b2b6      	uxth	r6, r6
			if(deg){
 80132ba:	2f00      	cmp	r7, #0
 80132bc:	f000 809c 	beq.w	80133f8 <GUI_Text_E_Measure+0x2e0>
			TFT_DrawCharRus(X+200, Y+4, 'к');
 80132c0:	22ba      	movs	r2, #186	; 0xba
 80132c2:	4631      	mov	r1, r6
 80132c4:	b280      	uxth	r0, r0
 80132c6:	f009 f8d5 	bl	801c474 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'л');
 80132ca:	22bb      	movs	r2, #187	; 0xbb
 80132cc:	4631      	mov	r1, r6
 80132ce:	fa1f f089 	uxth.w	r0, r9
 80132d2:	f009 f8cf 	bl	801c474 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
 80132d6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80132da:	22ba      	movs	r2, #186	; 0xba
 80132dc:	4631      	mov	r1, r6
 80132de:	b280      	uxth	r0, r0
			TFT_DrawCharRus(X+200, Y+4, 'л');
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80132e0:	f009 f8c8 	bl	801c474 <TFT_DrawCharRus>
			}
			
			
			old_deg_e = deg;
 80132e4:	f888 7000 	strb.w	r7, [r8]
		if(energy_light) {
			TFT_SetTextColor(TFT_White);
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+20, Y+14, 'e');}
	else {
		TFT_SetTextColor(TFT_White);
 80132e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80132ec:	f009 f8b6 	bl	801c45c <TFT_SetTextColor>
		TFT_SetFont(&Font16EN_arch_small);
 80132f0:	4850      	ldr	r0, [pc, #320]	; (8013434 <GUI_Text_E_Measure+0x31c>)
 80132f2:	f009 f8ad 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 80132f6:	f105 010d 	add.w	r1, r5, #13
 80132fa:	f104 0017 	add.w	r0, r4, #23
 80132fe:	227b      	movs	r2, #123	; 0x7b
 8013300:	e109      	b.n	8013516 <GUI_Text_E_Measure+0x3fe>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 8013302:	4607      	mov	r7, r0
 8013304:	e74e      	b.n	80131a4 <GUI_Text_E_Measure+0x8c>
		Value = floor(Value*10)/10.0;
 8013306:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801330a:	ee68 7a27 	vmul.f32	s15, s16, s15
		old_nan_Ee = 0; old_nan_El = 0;
 801330e:	f889 6000 	strb.w	r6, [r9]
		Value = floor(Value*10)/10.0;
 8013312:	ee17 0a90 	vmov	r0, s15
		old_nan_Ee = 0; old_nan_El = 0;
 8013316:	f88a 6000 	strb.w	r6, [sl]
		Value = floor(Value*10)/10.0;
 801331a:	f7ed f92d 	bl	8000578 <__aeabi_f2d>
 801331e:	ec41 0b10 	vmov	d0, r0, r1
 8013322:	f00f fb1d 	bl	8022960 <floor>
 8013326:	2200      	movs	r2, #0
 8013328:	ec51 0b10 	vmov	r0, r1, d0
 801332c:	4b42      	ldr	r3, [pc, #264]	; (8013438 <GUI_Text_E_Measure+0x320>)
 801332e:	f7ed faa1 	bl	8000874 <__aeabi_ddiv>
 8013332:	f7ed fc6d 	bl	8000c10 <__aeabi_d2f>
 8013336:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801333a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801333e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013342:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8013346:	2800      	cmp	r0, #0
 8013348:	bf14      	ite	ne
 801334a:	4610      	movne	r0, r2
 801334c:	4618      	moveq	r0, r3
 801334e:	f009 f885 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013352:	2063      	movs	r0, #99	; 0x63
 8013354:	f009 f888 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013358:	4833      	ldr	r0, [pc, #204]	; (8013428 <GUI_Text_E_Measure+0x310>)
 801335a:	f009 f879 	bl	801c450 <TFT_SetFont>
		sprintf (buffer, "%.1f", Value);}
 801335e:	ee18 0a10 	vmov	r0, s16
		sprintf (buffer, "%.1f", Value);
 8013362:	f7ed f909 	bl	8000578 <__aeabi_f2d>
 8013366:	4602      	mov	r2, r0
 8013368:	460b      	mov	r3, r1
 801336a:	a803      	add	r0, sp, #12
 801336c:	4933      	ldr	r1, [pc, #204]	; (801343c <GUI_Text_E_Measure+0x324>)
 801336e:	f00c fb4b 	bl	801fa08 <sprintf>
	uint32_t dec = 10;
 8013372:	220a      	movs	r2, #10
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013374:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 8013376:	f04f 097a 	mov.w	r9, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 801337a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 801337e:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8013380:	ee07 2a10 	vmov	s14, r2
 8013384:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8013388:	ee88 7a26 	vdiv.f32	s14, s16, s13
 801338c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013394:	db06      	blt.n	80133a4 <GUI_Text_E_Measure+0x28c>
			delta_pos-=23;
 8013396:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 801339a:	3601      	adds	r6, #1
			dec *= 10;
 801339c:	434a      	muls	r2, r1
			delta_pos-=23;
 801339e:	fa5f f989 	uxtb.w	r9, r9
			number++;
 80133a2:	b2f6      	uxtb	r6, r6
 80133a4:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80133a6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80133aa:	d1e9      	bne.n	8013380 <GUI_Text_E_Measure+0x268>
	if(energy_light && number < old_num_e )
 80133ac:	f1b8 0f00 	cmp.w	r8, #0
 80133b0:	d020      	beq.n	80133f4 <GUI_Text_E_Measure+0x2dc>
 80133b2:	4b23      	ldr	r3, [pc, #140]	; (8013440 <GUI_Text_E_Measure+0x328>)
	else if(!energy_light && number < old_num_n)
 80133b4:	781a      	ldrb	r2, [r3, #0]
 80133b6:	42b2      	cmp	r2, r6
 80133b8:	469a      	mov	sl, r3
 80133ba:	d90d      	bls.n	80133d8 <GUI_Text_E_Measure+0x2c0>
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
 80133bc:	2163      	movs	r1, #99	; 0x63
 80133be:	f105 031a 	add.w	r3, r5, #26
 80133c2:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80133c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80133ca:	9100      	str	r1, [sp, #0]
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	b292      	uxth	r2, r2
 80133d0:	4629      	mov	r1, r5
 80133d2:	b280      	uxth	r0, r0
 80133d4:	f008 fe13 	bl	801bffe <TFT_FillRectangle>
	buffer[8] = 0;
 80133d8:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80133da:	eb04 0009 	add.w	r0, r4, r9
		old_num_n = number;
 80133de:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80133e2:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 80133e4:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80133e8:	4629      	mov	r1, r5
 80133ea:	2303      	movs	r3, #3
 80133ec:	b280      	uxth	r0, r0
 80133ee:	f009 f951 	bl	801c694 <TFT_DisplayString>
 80133f2:	e738      	b.n	8013266 <GUI_Text_E_Measure+0x14e>
	else if(!energy_light && number < old_num_n)
 80133f4:	4b13      	ldr	r3, [pc, #76]	; (8013444 <GUI_Text_E_Measure+0x32c>)
 80133f6:	e7dd      	b.n	80133b4 <GUI_Text_E_Measure+0x29c>
			TFT_DrawCharRus(X+200, Y+4, 'л');
 80133f8:	22bb      	movs	r2, #187	; 0xbb
 80133fa:	4631      	mov	r1, r6
 80133fc:	b280      	uxth	r0, r0
 80133fe:	f009 f839 	bl	801c474 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 8013402:	22ba      	movs	r2, #186	; 0xba
 8013404:	4631      	mov	r1, r6
 8013406:	fa1f f089 	uxth.w	r0, r9
 801340a:	e769      	b.n	80132e0 <GUI_Text_E_Measure+0x1c8>
 801340c:	2000022a 	.word	0x2000022a
 8013410:	200056f1 	.word	0x200056f1
 8013414:	2000022d 	.word	0x2000022d
 8013418:	200001e8 	.word	0x200001e8
 801341c:	408f4000 	.word	0x408f4000
 8013420:	3ff00000 	.word	0x3ff00000
 8013424:	447a0000 	.word	0x447a0000
 8013428:	200001f0 	.word	0x200001f0
 801342c:	200056f3 	.word	0x200056f3
 8013430:	20000208 	.word	0x20000208
 8013434:	200001c0 	.word	0x200001c0
 8013438:	40240000 	.word	0x40240000
 801343c:	08031455 	.word	0x08031455
 8013440:	20000244 	.word	0x20000244
 8013444:	20000245 	.word	0x20000245
 8013448:	20005725 	.word	0x20005725
 801344c:	20005726 	.word	0x20005726
	} else if (Language_status == En && !energy_light)
 8013450:	2b01      	cmp	r3, #1
 8013452:	d16e      	bne.n	8013532 <GUI_Text_E_Measure+0x41a>
 8013454:	f1b8 0f00 	cmp.w	r8, #0
 8013458:	d166      	bne.n	8013528 <GUI_Text_E_Measure+0x410>
		if(deg != old_deg_e){
 801345a:	4b38      	ldr	r3, [pc, #224]	; (801353c <GUI_Text_E_Measure+0x424>)
 801345c:	781a      	ldrb	r2, [r3, #0]
 801345e:	42ba      	cmp	r2, r7
 8013460:	4699      	mov	r9, r3
 8013462:	d031      	beq.n	80134c8 <GUI_Text_E_Measure+0x3b0>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8013464:	2663      	movs	r6, #99	; 0x63
 8013466:	f105 031a 	add.w	r3, r5, #26
 801346a:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801346e:	1ce9      	adds	r1, r5, #3
 8013470:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 8013474:	9600      	str	r6, [sp, #0]
 8013476:	b280      	uxth	r0, r0
 8013478:	b29b      	uxth	r3, r3
 801347a:	b292      	uxth	r2, r2
 801347c:	b289      	uxth	r1, r1
 801347e:	f008 fdbe 	bl	801bffe <TFT_FillRectangle>
 8013482:	1d2e      	adds	r6, r5, #4
 8013484:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
			TFT_SetTextColor(TFT_White);
 8013488:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (deg){
 801348c:	b1ff      	cbz	r7, 80134ce <GUI_Text_E_Measure+0x3b6>
			TFT_SetTextColor(TFT_White);
 801348e:	f008 ffe5 	bl	801c45c <TFT_SetTextColor>
			TFT_SetFont(&Font26EN_arch_small);
 8013492:	482b      	ldr	r0, [pc, #172]	; (8013540 <GUI_Text_E_Measure+0x428>)
 8013494:	f008 ffdc 	bl	801c450 <TFT_SetFont>
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 8013498:	b2b6      	uxth	r6, r6
 801349a:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
 801349e:	222b      	movs	r2, #43	; 0x2b
 80134a0:	4631      	mov	r1, r6
 80134a2:	b280      	uxth	r0, r0
 80134a4:	f009 f89e 	bl	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X+200, Y+4, 'k'-65);
 80134a8:	222a      	movs	r2, #42	; 0x2a
 80134aa:	4631      	mov	r1, r6
 80134ac:	fa1f f08a 	uxth.w	r0, sl
 80134b0:	f009 f898 	bl	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X+226, Y+4, 'x'-65);
 80134b4:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
 80134b8:	2237      	movs	r2, #55	; 0x37
 80134ba:	4631      	mov	r1, r6
 80134bc:	b280      	uxth	r0, r0
 80134be:	f009 f891 	bl	801c5e4 <TFT_DrawChar>
			old_rulx = 0;
 80134c2:	4b20      	ldr	r3, [pc, #128]	; (8013544 <GUI_Text_E_Measure+0x42c>)
 80134c4:	f883 8000 	strb.w	r8, [r3]
		old_deg_e = deg;
 80134c8:	f889 7000 	strb.w	r7, [r9]
 80134cc:	e70c      	b.n	80132e8 <GUI_Text_E_Measure+0x1d0>
			TFT_SetTextColor(TFT_White);
 80134ce:	f008 ffc5 	bl	801c45c <TFT_SetTextColor>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 80134d2:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_small);
 80134d4:	481a      	ldr	r0, [pc, #104]	; (8013540 <GUI_Text_E_Measure+0x428>)
 80134d6:	f008 ffbb 	bl	801c450 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 80134da:	4631      	mov	r1, r6
 80134dc:	fa1f f08a 	uxth.w	r0, sl
 80134e0:	222b      	movs	r2, #43	; 0x2b
 80134e2:	f009 f87f 	bl	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 80134e6:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 80134ea:	2237      	movs	r2, #55	; 0x37
 80134ec:	4631      	mov	r1, r6
 80134ee:	b280      	uxth	r0, r0
 80134f0:	f009 f878 	bl	801c5e4 <TFT_DrawChar>
 80134f4:	e7e8      	b.n	80134c8 <GUI_Text_E_Measure+0x3b0>
		GUI_TextRu_W_m2(234, Y);
 80134f6:	4629      	mov	r1, r5
 80134f8:	20ea      	movs	r0, #234	; 0xea
 80134fa:	f005 fa53 	bl	80189a4 <GUI_TextRu_W_m2>
			TFT_SetTextColor(TFT_White);
 80134fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013502:	f008 ffab 	bl	801c45c <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_small);
 8013506:	4810      	ldr	r0, [pc, #64]	; (8013548 <GUI_Text_E_Measure+0x430>)
 8013508:	f008 ffa2 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 801350c:	f105 010e 	add.w	r1, r5, #14
 8013510:	f104 0014 	add.w	r0, r4, #20
 8013514:	2265      	movs	r2, #101	; 0x65
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8013516:	b289      	uxth	r1, r1
 8013518:	b280      	uxth	r0, r0
 801351a:	f009 f863 	bl	801c5e4 <TFT_DrawChar>
	}

}
 801351e:	b006      	add	sp, #24
 8013520:	ecbd 8b02 	vpop	{d8}
 8013524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		GUI_TextEn_W_m2(234, Y);
 8013528:	4629      	mov	r1, r5
 801352a:	20ea      	movs	r0, #234	; 0xea
 801352c:	f004 f8d2 	bl	80176d4 <GUI_TextEn_W_m2>
 8013530:	e7e5      	b.n	80134fe <GUI_Text_E_Measure+0x3e6>
		if(energy_light) {
 8013532:	f1b8 0f00 	cmp.w	r8, #0
 8013536:	d1e2      	bne.n	80134fe <GUI_Text_E_Measure+0x3e6>
 8013538:	e6d6      	b.n	80132e8 <GUI_Text_E_Measure+0x1d0>
 801353a:	bf00      	nop
 801353c:	2000022d 	.word	0x2000022d
 8013540:	200001f8 	.word	0x200001f8
 8013544:	20005731 	.word	0x20005731
 8013548:	200001c0 	.word	0x200001c0

0801354c <GUI_Text_L_Measure>:

uint8_t old_nan_Le = 0, old_nan_Ll = 0, old_deg_L = 0xFF;
void GUI_Text_L_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 801354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013550:	ed2d 8b02 	vpush	{d8}
 8013554:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8013556:	4bb7      	ldr	r3, [pc, #732]	; (8013834 <GUI_Text_L_Measure+0x2e8>)
{
 8013558:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 801355a:	781a      	ldrb	r2, [r3, #0]
 801355c:	4bb6      	ldr	r3, [pc, #728]	; (8013838 <GUI_Text_L_Measure+0x2ec>)
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	429a      	cmp	r2, r3
{
 8013562:	b086      	sub	sp, #24
 8013564:	4604      	mov	r4, r0
 8013566:	460d      	mov	r5, r1
 8013568:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 801356c:	d007      	beq.n	801357e <GUI_Text_L_Measure+0x32>
 801356e:	4ab3      	ldr	r2, [pc, #716]	; (801383c <GUI_Text_L_Measure+0x2f0>)
 8013570:	2300      	movs	r3, #0
 8013572:	7013      	strb	r3, [r2, #0]
 8013574:	4ab2      	ldr	r2, [pc, #712]	; (8013840 <GUI_Text_L_Measure+0x2f4>)
 8013576:	7013      	strb	r3, [r2, #0]
 8013578:	4bb2      	ldr	r3, [pc, #712]	; (8013844 <GUI_Text_L_Measure+0x2f8>)
 801357a:	22ff      	movs	r2, #255	; 0xff
 801357c:	701a      	strb	r2, [r3, #0]
	char buffer[9] = {0};
 801357e:	2300      	movs	r3, #0
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8013580:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 8013584:	9303      	str	r3, [sp, #12]
 8013586:	9304      	str	r3, [sp, #16]
 8013588:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 801358c:	f008 ff66 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013590:	2063      	movs	r0, #99	; 0x63
 8013592:	f008 ff69 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8013596:	48ac      	ldr	r0, [pc, #688]	; (8013848 <GUI_Text_L_Measure+0x2fc>)
 8013598:	f008 ff5a 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 801359c:	1ca9      	adds	r1, r5, #2
 801359e:	4620      	mov	r0, r4
 80135a0:	222b      	movs	r2, #43	; 0x2b
 80135a2:	b289      	uxth	r1, r1
 80135a4:	f009 f81e 	bl	801c5e4 <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 80135a8:	48a8      	ldr	r0, [pc, #672]	; (801384c <GUI_Text_L_Measure+0x300>)
	if(energy_light) {
 80135aa:	f1b9 0f00 	cmp.w	r9, #0
 80135ae:	f000 8097 	beq.w	80136e0 <GUI_Text_L_Measure+0x194>
	TFT_SetFont(&Font16EN_arch_small);
 80135b2:	f008 ff4d 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 80135b6:	f105 010e 	add.w	r1, r5, #14
 80135ba:	f104 0014 	add.w	r0, r4, #20
 80135be:	2265      	movs	r2, #101	; 0x65
 80135c0:	b289      	uxth	r1, r1
 80135c2:	b280      	uxth	r0, r0
 80135c4:	f009 f80e 	bl	801c5e4 <TFT_DrawChar>
 80135c8:	4f9c      	ldr	r7, [pc, #624]	; (801383c <GUI_Text_L_Measure+0x2f0>)
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
	}
	
	if(nope) 
 80135ca:	2e00      	cmp	r6, #0
 80135cc:	f040 8098 	bne.w	8013700 <GUI_Text_L_Measure+0x1b4>
			buffer[0] = '-';buffer[1] = '-';
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
			old_nan_Ll = 1;}
		}
	else{
	if(energy_light) {old_nan_Le = 0;}
 80135d0:	703e      	strb	r6, [r7, #0]
	if(!energy_light) {old_nan_Ll = 0;}
	Value = floor(Value*10)/10.0;
 80135d2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80135d6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80135da:	ee17 0a90 	vmov	r0, s15
 80135de:	f7ec ffcb 	bl	8000578 <__aeabi_f2d>
 80135e2:	ec41 0b10 	vmov	d0, r0, r1
 80135e6:	f00f f9bb 	bl	8022960 <floor>
 80135ea:	2200      	movs	r2, #0
 80135ec:	4b98      	ldr	r3, [pc, #608]	; (8013850 <GUI_Text_L_Measure+0x304>)
 80135ee:	ec51 0b10 	vmov	r0, r1, d0
 80135f2:	f7ed f93f 	bl	8000874 <__aeabi_ddiv>
 80135f6:	f7ed fb0b 	bl	8000c10 <__aeabi_d2f>
 80135fa:	ee08 0a10 	vmov	s16, r0
	
	if((Value/1000.0) >= 1.0)
 80135fe:	f7ec ffbb 	bl	8000578 <__aeabi_f2d>
 8013602:	2200      	movs	r2, #0
 8013604:	4b93      	ldr	r3, [pc, #588]	; (8013854 <GUI_Text_L_Measure+0x308>)
 8013606:	f7ed f935 	bl	8000874 <__aeabi_ddiv>
 801360a:	2200      	movs	r2, #0
 801360c:	4b92      	ldr	r3, [pc, #584]	; (8013858 <GUI_Text_L_Measure+0x30c>)
 801360e:	f7ed fa8d 	bl	8000b2c <__aeabi_dcmpge>
 8013612:	2800      	cmp	r0, #0
 8013614:	f000 80fb 	beq.w	801380e <GUI_Text_L_Measure+0x2c2>
	{
		Value = Value/(1000.0);
 8013618:	eddf 7a90 	vldr	s15, [pc, #576]	; 801385c <GUI_Text_L_Measure+0x310>
 801361c:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8013620:	2601      	movs	r6, #1
		meas_type = 1;
	}else {meas_type = 0;}
	
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013622:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8013626:	f249 43d2 	movw	r3, #38098	; 0x94d2
 801362a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801362e:	2800      	cmp	r0, #0
 8013630:	bf0c      	ite	eq
 8013632:	4610      	moveq	r0, r2
 8013634:	4618      	movne	r0, r3
 8013636:	f008 ff11 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801363a:	2063      	movs	r0, #99	; 0x63
 801363c:	f008 ff14 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013640:	4887      	ldr	r0, [pc, #540]	; (8013860 <GUI_Text_L_Measure+0x314>)
 8013642:	f008 ff05 	bl	801c450 <TFT_SetFont>
	
	sprintf (buffer, "%.1f", Value);
 8013646:	ee18 0a10 	vmov	r0, s16
 801364a:	f7ec ff95 	bl	8000578 <__aeabi_f2d>
 801364e:	4602      	mov	r2, r0
 8013650:	460b      	mov	r3, r1
 8013652:	a803      	add	r0, sp, #12
 8013654:	4983      	ldr	r1, [pc, #524]	; (8013864 <GUI_Text_L_Measure+0x318>)
 8013656:	f00c f9d7 	bl	801fa08 <sprintf>
	uint32_t dec = 10;
 801365a:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 801365c:	2304      	movs	r3, #4
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 801365e:	2700      	movs	r7, #0
 8013660:	f04f 0875 	mov.w	r8, #117	; 0x75


for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 8013664:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 8013668:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 801366a:	ee07 2a10 	vmov	s14, r2
 801366e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8013672:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8013676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801367e:	db06      	blt.n	801368e <GUI_Text_L_Measure+0x142>
			delta_pos-=23;
 8013680:	f1a8 0817 	sub.w	r8, r8, #23
			number++;
 8013684:	3701      	adds	r7, #1
			dec *= 10;
 8013686:	434a      	muls	r2, r1
			delta_pos-=23;
 8013688:	fa5f f888 	uxtb.w	r8, r8
			number++;
 801368c:	b2ff      	uxtb	r7, r7
 801368e:	3b01      	subs	r3, #1
for (uint8_t i = 1; i <= 4; i++)
 8013690:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8013694:	d1e9      	bne.n	801366a <GUI_Text_L_Measure+0x11e>
		}
	}
	
	if(energy_light && number < old_numL_e )
 8013696:	f1b9 0f00 	cmp.w	r9, #0
 801369a:	f000 80ba 	beq.w	8013812 <GUI_Text_L_Measure+0x2c6>
 801369e:	4b72      	ldr	r3, [pc, #456]	; (8013868 <GUI_Text_L_Measure+0x31c>)
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
	} 
	else if(!energy_light && number < old_numL_n)
 80136a0:	781a      	ldrb	r2, [r3, #0]
 80136a2:	42ba      	cmp	r2, r7
 80136a4:	469a      	mov	sl, r3
 80136a6:	d90d      	bls.n	80136c4 <GUI_Text_L_Measure+0x178>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 80136a8:	2163      	movs	r1, #99	; 0x63
 80136aa:	f105 031a 	add.w	r3, r5, #26
 80136ae:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80136b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80136b6:	9100      	str	r1, [sp, #0]
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	b292      	uxth	r2, r2
 80136bc:	4629      	mov	r1, r5
 80136be:	b280      	uxth	r0, r0
 80136c0:	f008 fc9d 	bl	801bffe <TFT_FillRectangle>
		old_numL_e = number;}
	else{
		old_numL_n = number;
	}
	
	buffer[8] = 0;
 80136c4:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80136c6:	eb04 0008 	add.w	r0, r4, r8
		old_numL_n = number;
 80136ca:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80136ce:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 80136d0:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80136d4:	4629      	mov	r1, r5
 80136d6:	2303      	movs	r3, #3
 80136d8:	b280      	uxth	r0, r0
 80136da:	f008 ffdb 	bl	801c694 <TFT_DisplayString>
 80136de:	e06c      	b.n	80137ba <GUI_Text_L_Measure+0x26e>
		TFT_SetFont(&Font16EN_arch_small);
 80136e0:	f008 feb6 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 80136e4:	f105 010d 	add.w	r1, r5, #13
 80136e8:	f104 0017 	add.w	r0, r4, #23
 80136ec:	227b      	movs	r2, #123	; 0x7b
 80136ee:	b289      	uxth	r1, r1
 80136f0:	b280      	uxth	r0, r0
 80136f2:	f008 ff77 	bl	801c5e4 <TFT_DrawChar>
	if(nope) 
 80136f6:	bb96      	cbnz	r6, 801375e <GUI_Text_L_Measure+0x212>
	if(!energy_light) {old_nan_Ll = 0;}
 80136f8:	4b51      	ldr	r3, [pc, #324]	; (8013840 <GUI_Text_L_Measure+0x2f4>)
 80136fa:	f883 9000 	strb.w	r9, [r3]
 80136fe:	e768      	b.n	80135d2 <GUI_Text_L_Measure+0x86>
			if(energy_light & !old_nan_Le){
 8013700:	783e      	ldrb	r6, [r7, #0]
 8013702:	2e00      	cmp	r6, #0
 8013704:	bf14      	ite	ne
 8013706:	2600      	movne	r6, #0
 8013708:	f009 0601 	andeq.w	r6, r9, #1
 801370c:	2e00      	cmp	r6, #0
 801370e:	d054      	beq.n	80137ba <GUI_Text_L_Measure+0x26e>
			TFT_SetTextColor(TFT_White);
 8013710:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013714:	f008 fea2 	bl	801c45c <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8013718:	2063      	movs	r0, #99	; 0x63
 801371a:	f008 fea5 	bl	801c468 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 801371e:	4850      	ldr	r0, [pc, #320]	; (8013860 <GUI_Text_L_Measure+0x314>)
 8013720:	f008 fe96 	bl	801c450 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013724:	2163      	movs	r1, #99	; 0x63
 8013726:	f105 031a 	add.w	r3, r5, #26
 801372a:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 801372e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013732:	9100      	str	r1, [sp, #0]
 8013734:	b29b      	uxth	r3, r3
 8013736:	b292      	uxth	r2, r2
 8013738:	4629      	mov	r1, r5
 801373a:	b280      	uxth	r0, r0
 801373c:	f008 fc5f 	bl	801bffe <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8013740:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013742:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8013746:	f88d 300c 	strb.w	r3, [sp, #12]
 801374a:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801374e:	aa03      	add	r2, sp, #12
 8013750:	2303      	movs	r3, #3
 8013752:	4629      	mov	r1, r5
 8013754:	b280      	uxth	r0, r0
 8013756:	f008 ff9d 	bl	801c694 <TFT_DisplayString>
			old_nan_Le = 1;}
 801375a:	2301      	movs	r3, #1
 801375c:	703b      	strb	r3, [r7, #0]
			if(!energy_light & !old_nan_Ll){
 801375e:	4e38      	ldr	r6, [pc, #224]	; (8013840 <GUI_Text_L_Measure+0x2f4>)
 8013760:	7833      	ldrb	r3, [r6, #0]
 8013762:	bb4b      	cbnz	r3, 80137b8 <GUI_Text_L_Measure+0x26c>
 8013764:	f1b9 0f00 	cmp.w	r9, #0
 8013768:	d126      	bne.n	80137b8 <GUI_Text_L_Measure+0x26c>
			TFT_SetTextColor(TFT_White);
 801376a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801376e:	f008 fe75 	bl	801c45c <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8013772:	2063      	movs	r0, #99	; 0x63
 8013774:	f008 fe78 	bl	801c468 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8013778:	4839      	ldr	r0, [pc, #228]	; (8013860 <GUI_Text_L_Measure+0x314>)
 801377a:	f008 fe69 	bl	801c450 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 801377e:	2163      	movs	r1, #99	; 0x63
 8013780:	f105 031a 	add.w	r3, r5, #26
 8013784:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013788:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801378c:	9100      	str	r1, [sp, #0]
 801378e:	b29b      	uxth	r3, r3
 8013790:	b292      	uxth	r2, r2
 8013792:	4629      	mov	r1, r5
 8013794:	b280      	uxth	r0, r0
 8013796:	f008 fc32 	bl	801bffe <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 801379a:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801379c:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 80137a0:	f88d 300c 	strb.w	r3, [sp, #12]
 80137a4:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80137a8:	aa03      	add	r2, sp, #12
 80137aa:	2303      	movs	r3, #3
 80137ac:	4629      	mov	r1, r5
 80137ae:	b280      	uxth	r0, r0
 80137b0:	f008 ff70 	bl	801c694 <TFT_DisplayString>
			old_nan_Ll = 1;}
 80137b4:	2301      	movs	r3, #1
 80137b6:	7033      	strb	r3, [r6, #0]
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 80137b8:	2600      	movs	r6, #0
	
}
	if (Language_status == Ru && !energy_light)
 80137ba:	4b2c      	ldr	r3, [pc, #176]	; (801386c <GUI_Text_L_Measure+0x320>)
 80137bc:	781f      	ldrb	r7, [r3, #0]
 80137be:	2f00      	cmp	r7, #0
 80137c0:	d158      	bne.n	8013874 <GUI_Text_L_Measure+0x328>
 80137c2:	f1b9 0f00 	cmp.w	r9, #0
 80137c6:	f040 808f 	bne.w	80138e8 <GUI_Text_L_Measure+0x39c>
 80137ca:	4b1e      	ldr	r3, [pc, #120]	; (8013844 <GUI_Text_L_Measure+0x2f8>)
	{
		if (deg && old_deg_L != 1){
 80137cc:	781a      	ldrb	r2, [r3, #0]
 80137ce:	b316      	cbz	r6, 8013816 <GUI_Text_L_Measure+0x2ca>
 80137d0:	2a01      	cmp	r2, #1
 80137d2:	d017      	beq.n	8013804 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 80137d4:	2601      	movs	r6, #1
 80137d6:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 80137d8:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80137dc:	f105 031a 	add.w	r3, r5, #26
 80137e0:	1ce9      	adds	r1, r5, #3
 80137e2:	2763      	movs	r7, #99	; 0x63
 80137e4:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 80137e8:	9700      	str	r7, [sp, #0]
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	b292      	uxth	r2, r2
 80137ee:	b289      	uxth	r1, r1
			GUI_TextRu_Cd_m2(X+205, Y, 1);
		}else if(!deg && old_deg_L != 0){
			old_deg_L = 0;
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 80137f0:	b280      	uxth	r0, r0
 80137f2:	f008 fc04 	bl	801bffe <TFT_FillRectangle>
			GUI_TextRu_Cd_m2(X+205, Y, 0);
 80137f6:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 80137fa:	4632      	mov	r2, r6
 80137fc:	4629      	mov	r1, r5
 80137fe:	b280      	uxth	r0, r0
 8013800:	f005 f974 	bl	8018aec <GUI_TextRu_Cd_m2>
		GUI_TextRu_W_m2_sr(X+210, Y);
	}else if (Language_status == En && energy_light)
	{
		GUI_TextEn_W_m2_sr(X+210, Y);
	}
}
 8013804:	b006      	add	sp, #24
 8013806:	ecbd 8b02 	vpop	{d8}
 801380a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 801380e:	4606      	mov	r6, r0
 8013810:	e707      	b.n	8013622 <GUI_Text_L_Measure+0xd6>
	else if(!energy_light && number < old_numL_n)
 8013812:	4b17      	ldr	r3, [pc, #92]	; (8013870 <GUI_Text_L_Measure+0x324>)
 8013814:	e744      	b.n	80136a0 <GUI_Text_L_Measure+0x154>
		}else if(!deg && old_deg_L != 0){
 8013816:	2a00      	cmp	r2, #0
 8013818:	d0f4      	beq.n	8013804 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 801381a:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 801381c:	2163      	movs	r1, #99	; 0x63
 801381e:	f105 031a 	add.w	r3, r5, #26
 8013822:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8013826:	9100      	str	r1, [sp, #0]
 8013828:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
 801382c:	b29b      	uxth	r3, r3
 801382e:	b292      	uxth	r2, r2
 8013830:	4629      	mov	r1, r5
 8013832:	e7dd      	b.n	80137f0 <GUI_Text_L_Measure+0x2a4>
 8013834:	2000022a 	.word	0x2000022a
 8013838:	200056f1 	.word	0x200056f1
 801383c:	20005728 	.word	0x20005728
 8013840:	20005729 	.word	0x20005729
 8013844:	2000022c 	.word	0x2000022c
 8013848:	200001e8 	.word	0x200001e8
 801384c:	200001c0 	.word	0x200001c0
 8013850:	40240000 	.word	0x40240000
 8013854:	408f4000 	.word	0x408f4000
 8013858:	3ff00000 	.word	0x3ff00000
 801385c:	447a0000 	.word	0x447a0000
 8013860:	200001f0 	.word	0x200001f0
 8013864:	08031455 	.word	0x08031455
 8013868:	20000232 	.word	0x20000232
 801386c:	200056f3 	.word	0x200056f3
 8013870:	20000233 	.word	0x20000233
	else if (Language_status == En && !energy_light)
 8013874:	2f01      	cmp	r7, #1
 8013876:	d1c5      	bne.n	8013804 <GUI_Text_L_Measure+0x2b8>
 8013878:	f1b9 0f00 	cmp.w	r9, #0
 801387c:	d13b      	bne.n	80138f6 <GUI_Text_L_Measure+0x3aa>
 801387e:	4b21      	ldr	r3, [pc, #132]	; (8013904 <GUI_Text_L_Measure+0x3b8>)
		if (deg && old_deg_L != 1){
 8013880:	781a      	ldrb	r2, [r3, #0]
 8013882:	b1d6      	cbz	r6, 80138ba <GUI_Text_L_Measure+0x36e>
 8013884:	2a01      	cmp	r2, #1
 8013886:	d0bd      	beq.n	8013804 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 8013888:	701f      	strb	r7, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 801388a:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 801388e:	f105 031a 	add.w	r3, r5, #26
 8013892:	1f69      	subs	r1, r5, #5
 8013894:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8013898:	2663      	movs	r6, #99	; 0x63
 801389a:	b292      	uxth	r2, r2
 801389c:	b289      	uxth	r1, r1
 801389e:	b280      	uxth	r0, r0
 80138a0:	9600      	str	r6, [sp, #0]
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	f008 fbab 	bl	801bffe <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+210, Y-4, 1);
 80138a8:	1f29      	subs	r1, r5, #4
 80138aa:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 80138ae:	463a      	mov	r2, r7
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 80138b0:	b289      	uxth	r1, r1
 80138b2:	b280      	uxth	r0, r0
 80138b4:	f003 ffa0 	bl	80177f8 <GUI_TextEn_cd_m2>
 80138b8:	e7a4      	b.n	8013804 <GUI_Text_L_Measure+0x2b8>
		}else if(!deg && old_deg_L != 0){
 80138ba:	2a00      	cmp	r2, #0
 80138bc:	d0a2      	beq.n	8013804 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 80138be:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 80138c0:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 80138c4:	f105 031a 	add.w	r3, r5, #26
 80138c8:	1f69      	subs	r1, r5, #5
 80138ca:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 80138ce:	2763      	movs	r7, #99	; 0x63
 80138d0:	b292      	uxth	r2, r2
 80138d2:	b289      	uxth	r1, r1
 80138d4:	b280      	uxth	r0, r0
 80138d6:	9700      	str	r7, [sp, #0]
 80138d8:	b29b      	uxth	r3, r3
 80138da:	f008 fb90 	bl	801bffe <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 80138de:	1f29      	subs	r1, r5, #4
 80138e0:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
 80138e4:	4632      	mov	r2, r6
 80138e6:	e7e3      	b.n	80138b0 <GUI_Text_L_Measure+0x364>
		GUI_TextRu_W_m2_sr(X+210, Y);
 80138e8:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 80138ec:	4629      	mov	r1, r5
 80138ee:	b280      	uxth	r0, r0
 80138f0:	f005 f89a 	bl	8018a28 <GUI_TextRu_W_m2_sr>
 80138f4:	e786      	b.n	8013804 <GUI_Text_L_Measure+0x2b8>
		GUI_TextEn_W_m2_sr(X+210, Y);
 80138f6:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 80138fa:	4629      	mov	r1, r5
 80138fc:	b280      	uxth	r0, r0
 80138fe:	f003 ff23 	bl	8017748 <GUI_TextEn_W_m2_sr>
}
 8013902:	e77f      	b.n	8013804 <GUI_Text_L_Measure+0x2b8>
 8013904:	2000022c 	.word	0x2000022c

08013908 <GUI_Text_PPF_Measure>:
uint8_t old_numPPF = 10, old_nan_PPF = 0;
void GUI_Text_PPF_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8013908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801390c:	ed2d 8b02 	vpush	{d8}
 8013910:	4616      	mov	r6, r2
 8013912:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8013914:	4ab0      	ldr	r2, [pc, #704]	; (8013bd8 <GUI_Text_PPF_Measure+0x2d0>)
 8013916:	4bb1      	ldr	r3, [pc, #708]	; (8013bdc <GUI_Text_PPF_Measure+0x2d4>)
 8013918:	4fb1      	ldr	r7, [pc, #708]	; (8013be0 <GUI_Text_PPF_Measure+0x2d8>)
{	
 801391a:	4604      	mov	r4, r0
 801391c:	460d      	mov	r5, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 801391e:	7810      	ldrb	r0, [r2, #0]
 8013920:	7819      	ldrb	r1, [r3, #0]
 8013922:	4288      	cmp	r0, r1
{	
 8013924:	b087      	sub	sp, #28
 8013926:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8013928:	bf1c      	itt	ne
 801392a:	2300      	movne	r3, #0
 801392c:	703b      	strbne	r3, [r7, #0]
	char buffer[9] = {0};
 801392e:	2300      	movs	r3, #0
{	
 8013930:	eeb0 8a40 	vmov.f32	s16, s0
 8013934:	4691      	mov	r9, r2
	char buffer[9] = {0};
 8013936:	9303      	str	r3, [sp, #12]
 8013938:	9304      	str	r3, [sp, #16]
 801393a:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 122, deg = 0, number;
	uint32_t dec = 10;
	
		if(nope) 
 801393e:	2e00      	cmp	r6, #0
 8013940:	d067      	beq.n	8013a12 <GUI_Text_PPF_Measure+0x10a>
		{	
			if(!old_nan_PPF){
 8013942:	783e      	ldrb	r6, [r7, #0]
 8013944:	2e00      	cmp	r6, #0
 8013946:	f040 80ef 	bne.w	8013b28 <GUI_Text_PPF_Measure+0x220>
				TFT_SetTextColor(TFT_White);
 801394a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801394e:	f008 fd85 	bl	801c45c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8013952:	2063      	movs	r0, #99	; 0x63
 8013954:	f008 fd88 	bl	801c468 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8013958:	48a2      	ldr	r0, [pc, #648]	; (8013be4 <GUI_Text_PPF_Measure+0x2dc>)
 801395a:	f008 fd79 	bl	801c450 <TFT_SetFont>
				TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 801395e:	2163      	movs	r1, #99	; 0x63
 8013960:	f105 031a 	add.w	r3, r5, #26
 8013964:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013968:	f104 0046 	add.w	r0, r4, #70	; 0x46
 801396c:	9100      	str	r1, [sp, #0]
 801396e:	b29b      	uxth	r3, r3
 8013970:	b292      	uxth	r2, r2
 8013972:	4629      	mov	r1, r5
 8013974:	b280      	uxth	r0, r0
 8013976:	f008 fb42 	bl	801bffe <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 801397a:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801397c:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8013980:	f88d 300c 	strb.w	r3, [sp, #12]
 8013984:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8013988:	aa03      	add	r2, sp, #12
 801398a:	2303      	movs	r3, #3
 801398c:	4629      	mov	r1, r5
 801398e:	b280      	uxth	r0, r0
 8013990:	f008 fe80 	bl	801c694 <TFT_DisplayString>
				old_nan_PPF = 1;
 8013994:	2301      	movs	r3, #1
 8013996:	703b      	strb	r3, [r7, #0]
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	
{
	TFT_SetTextColor(TFT_White);
 8013998:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801399c:	f008 fd5e 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80139a0:	2063      	movs	r0, #99	; 0x63
 80139a2:	f008 fd61 	bl	801c468 <TFT_SetBackColor>
	if(Language_status == Ru ){
 80139a6:	4b90      	ldr	r3, [pc, #576]	; (8013be8 <GUI_Text_PPF_Measure+0x2e0>)
 80139a8:	f8df b258 	ldr.w	fp, [pc, #600]	; 8013c04 <GUI_Text_PPF_Measure+0x2fc>
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	1caf      	adds	r7, r5, #2
 80139b0:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f040 80bf 	bne.w	8013b38 <GUI_Text_PPF_Measure+0x230>
			TFT_SetFont(&Font26RU_arch_big);
 80139ba:	488c      	ldr	r0, [pc, #560]	; (8013bec <GUI_Text_PPF_Measure+0x2e4>)
 80139bc:	f008 fd48 	bl	801c450 <TFT_SetFont>
			if(preGUI_screen_state != GUI_screen_state){
 80139c0:	f899 2000 	ldrb.w	r2, [r9]
 80139c4:	f898 3000 	ldrb.w	r3, [r8]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d012      	beq.n	80139f2 <GUI_Text_PPF_Measure+0xea>
				TFT_DrawCharRus(X, Y, 'Ф'-17);
 80139cc:	2293      	movs	r2, #147	; 0x93
 80139ce:	4629      	mov	r1, r5
 80139d0:	4620      	mov	r0, r4
 80139d2:	f008 fd4f 	bl	801c474 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+24, Y, 'А'-17);
 80139d6:	f104 0018 	add.w	r0, r4, #24
 80139da:	227f      	movs	r2, #127	; 0x7f
 80139dc:	4629      	mov	r1, r5
 80139de:	b280      	uxth	r0, r0
 80139e0:	f008 fd48 	bl	801c474 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+48, Y, 'Р'-17);}
 80139e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80139e8:	228f      	movs	r2, #143	; 0x8f
 80139ea:	4629      	mov	r1, r5
 80139ec:	b280      	uxth	r0, r0
 80139ee:	f008 fd41 	bl	801c474 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 80139f2:	f89b 3000 	ldrb.w	r3, [fp]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f000 8098 	beq.w	8013b2c <GUI_Text_PPF_Measure+0x224>
 80139fc:	4632      	mov	r2, r6
 80139fe:	b2b9      	uxth	r1, r7
 8013a00:	fa1f f08a 	uxth.w	r0, sl
 8013a04:	f004 feda 	bl	80187bc <GUI_TextRu_umol>
				TFT_DrawChar(X+5, Y+2, 'P');
				TFT_DrawChar(X+20, Y+2, 'L');}
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
			}
		}	}
}
 8013a08:	b007      	add	sp, #28
 8013a0a:	ecbd 8b02 	vpop	{d8}
 8013a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_PPF){TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);}
 8013a12:	783b      	ldrb	r3, [r7, #0]
 8013a14:	b16b      	cbz	r3, 8013a32 <GUI_Text_PPF_Measure+0x12a>
 8013a16:	2163      	movs	r1, #99	; 0x63
 8013a18:	f105 031a 	add.w	r3, r5, #26
 8013a1c:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013a20:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8013a24:	9100      	str	r1, [sp, #0]
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	b292      	uxth	r2, r2
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	b280      	uxth	r0, r0
 8013a2e:	f008 fae6 	bl	801bffe <TFT_FillRectangle>
	Value = floor(Value*10)/10.0;
 8013a32:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013a36:	ee68 7a27 	vmul.f32	s15, s16, s15
	old_nan_PPF = 0;
 8013a3a:	2300      	movs	r3, #0
	Value = floor(Value*10)/10.0;
 8013a3c:	ee17 0a90 	vmov	r0, s15
	old_nan_PPF = 0;
 8013a40:	703b      	strb	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 8013a42:	f7ec fd99 	bl	8000578 <__aeabi_f2d>
 8013a46:	ec41 0b10 	vmov	d0, r0, r1
 8013a4a:	f00e ff89 	bl	8022960 <floor>
 8013a4e:	2200      	movs	r2, #0
 8013a50:	ec51 0b10 	vmov	r0, r1, d0
 8013a54:	4b66      	ldr	r3, [pc, #408]	; (8013bf0 <GUI_Text_PPF_Measure+0x2e8>)
 8013a56:	f7ec ff0d 	bl	8000874 <__aeabi_ddiv>
 8013a5a:	f7ed f8d9 	bl	8000c10 <__aeabi_d2f>
	if((Value/1000) >= 1.0)
 8013a5e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013bf4 <GUI_Text_PPF_Measure+0x2ec>
	Value = floor(Value*10)/10.0;
 8013a62:	ee08 0a10 	vmov	s16, r0
	if((Value/1000) >= 1.0)
 8013a66:	eec8 7a07 	vdiv.f32	s15, s16, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a6e:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 122, deg = 0, number;
 8013a72:	277a      	movs	r7, #122	; 0x7a
	if((Value/1000) >= 1.0)
 8013a74:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		Value = Value/(1000);
 8013a78:	eef4 7a68 	vcmp.f32	s15, s17
 8013a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a80:	bfa8      	it	ge
 8013a82:	eeb0 8a67 	vmovge.f32	s16, s15
 8013a86:	bfa8      	it	ge
 8013a88:	2601      	movge	r6, #1
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013a8a:	f1bb 0f00 	cmp.w	fp, #0
 8013a8e:	bf08      	it	eq
 8013a90:	4618      	moveq	r0, r3
 8013a92:	f008 fce3 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013a96:	2063      	movs	r0, #99	; 0x63
 8013a98:	f008 fce6 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013a9c:	4851      	ldr	r0, [pc, #324]	; (8013be4 <GUI_Text_PPF_Measure+0x2dc>)
 8013a9e:	f008 fcd7 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8013aa2:	ee18 0a10 	vmov	r0, s16
 8013aa6:	f7ec fd67 	bl	8000578 <__aeabi_f2d>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	460b      	mov	r3, r1
 8013aae:	a803      	add	r0, sp, #12
 8013ab0:	4951      	ldr	r1, [pc, #324]	; (8013bf8 <GUI_Text_PPF_Measure+0x2f0>)
 8013ab2:	f00b ffa9 	bl	801fa08 <sprintf>
	uint32_t dec = 10;
 8013ab6:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8013ab8:	2304      	movs	r3, #4
			dec *= 10;
 8013aba:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8013abc:	ee07 2a90 	vmov	s15, r2
 8013ac0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013ac4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8013ac8:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad0:	db06      	blt.n	8013ae0 <GUI_Text_PPF_Measure+0x1d8>
			delta_pos-=23;
 8013ad2:	3f17      	subs	r7, #23
			number++;
 8013ad4:	f10a 0a01 	add.w	sl, sl, #1
			dec *= 10;
 8013ad8:	434a      	muls	r2, r1
			delta_pos-=23;
 8013ada:	b2ff      	uxtb	r7, r7
			number++;
 8013adc:	fa5f fa8a 	uxtb.w	sl, sl
 8013ae0:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8013ae2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8013ae6:	d1e9      	bne.n	8013abc <GUI_Text_PPF_Measure+0x1b4>
	if(number < old_numPPF )
 8013ae8:	4b44      	ldr	r3, [pc, #272]	; (8013bfc <GUI_Text_PPF_Measure+0x2f4>)
 8013aea:	781a      	ldrb	r2, [r3, #0]
 8013aec:	4552      	cmp	r2, sl
 8013aee:	469b      	mov	fp, r3
 8013af0:	d90d      	bls.n	8013b0e <GUI_Text_PPF_Measure+0x206>
		TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013af2:	2163      	movs	r1, #99	; 0x63
 8013af4:	f105 031a 	add.w	r3, r5, #26
 8013af8:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013afc:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8013b00:	9100      	str	r1, [sp, #0]
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	b292      	uxth	r2, r2
 8013b06:	4629      	mov	r1, r5
 8013b08:	b280      	uxth	r0, r0
 8013b0a:	f008 fa78 	bl	801bffe <TFT_FillRectangle>
	buffer[8] = 0;
 8013b0e:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013b10:	19e0      	adds	r0, r4, r7
	buffer[8] = 0;
 8013b12:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013b16:	aa03      	add	r2, sp, #12
 8013b18:	2303      	movs	r3, #3
 8013b1a:	4629      	mov	r1, r5
 8013b1c:	b280      	uxth	r0, r0
	old_numPPF = number;
 8013b1e:	f88b a000 	strb.w	sl, [fp]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013b22:	f008 fdb7 	bl	801c694 <TFT_DisplayString>
 8013b26:	e737      	b.n	8013998 <GUI_Text_PPF_Measure+0x90>
	uint8_t	delta_pos = 122, deg = 0, number;
 8013b28:	461e      	mov	r6, r3
 8013b2a:	e735      	b.n	8013998 <GUI_Text_PPF_Measure+0x90>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8013b2c:	b2b9      	uxth	r1, r7
 8013b2e:	fa1f f08a 	uxth.w	r0, sl
 8013b32:	f004 feb1 	bl	8018898 <GUI_TextRu_umol_sr>
 8013b36:	e767      	b.n	8013a08 <GUI_Text_PPF_Measure+0x100>
			TFT_SetFont(&Font16EN_arch_big);
 8013b38:	4831      	ldr	r0, [pc, #196]	; (8013c00 <GUI_Text_PPF_Measure+0x2f8>)
 8013b3a:	f008 fc89 	bl	801c450 <TFT_SetFont>
			if(Mode_EL){
 8013b3e:	f89b 3000 	ldrb.w	r3, [fp]
				if(preGUI_screen_state != GUI_screen_state){
 8013b42:	f899 2000 	ldrb.w	r2, [r9]
			if(Mode_EL){
 8013b46:	b333      	cbz	r3, 8013b96 <GUI_Text_PPF_Measure+0x28e>
				if(preGUI_screen_state != GUI_screen_state){
 8013b48:	f898 3000 	ldrb.w	r3, [r8]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d01b      	beq.n	8013b88 <GUI_Text_PPF_Measure+0x280>
				TFT_DrawChar(X-10, Y+2, 'P');
 8013b50:	b2bd      	uxth	r5, r7
 8013b52:	f1a4 000a 	sub.w	r0, r4, #10
 8013b56:	2250      	movs	r2, #80	; 0x50
 8013b58:	4629      	mov	r1, r5
 8013b5a:	b280      	uxth	r0, r0
 8013b5c:	f008 fd42 	bl	801c5e4 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8013b60:	1d60      	adds	r0, r4, #5
 8013b62:	2250      	movs	r2, #80	; 0x50
 8013b64:	4629      	mov	r1, r5
 8013b66:	b280      	uxth	r0, r0
 8013b68:	f008 fd3c 	bl	801c5e4 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'F');
 8013b6c:	f104 0014 	add.w	r0, r4, #20
 8013b70:	2246      	movs	r2, #70	; 0x46
 8013b72:	4629      	mov	r1, r5
 8013b74:	b280      	uxth	r0, r0
 8013b76:	f008 fd35 	bl	801c5e4 <TFT_DrawChar>
				TFT_DrawChar(X+35, Y+2, 'D');}
 8013b7a:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8013b7e:	2244      	movs	r2, #68	; 0x44
 8013b80:	4629      	mov	r1, r5
 8013b82:	b280      	uxth	r0, r0
 8013b84:	f008 fd2e 	bl	801c5e4 <TFT_DrawChar>
				GUI_TextEn_umol(X+200, Y+2, deg);
 8013b88:	4632      	mov	r2, r6
 8013b8a:	b2b9      	uxth	r1, r7
 8013b8c:	fa1f f08a 	uxth.w	r0, sl
 8013b90:	f002 feb4 	bl	80168fc <GUI_TextEn_umol>
 8013b94:	e738      	b.n	8013a08 <GUI_Text_PPF_Measure+0x100>
				if(preGUI_screen_state != GUI_screen_state){
 8013b96:	f898 3000 	ldrb.w	r3, [r8]
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d014      	beq.n	8013bc8 <GUI_Text_PPF_Measure+0x2c0>
				TFT_DrawChar(X-10, Y+2, 'P');
 8013b9e:	b2bd      	uxth	r5, r7
 8013ba0:	f1a4 000a 	sub.w	r0, r4, #10
 8013ba4:	2250      	movs	r2, #80	; 0x50
 8013ba6:	4629      	mov	r1, r5
 8013ba8:	b280      	uxth	r0, r0
 8013baa:	f008 fd1b 	bl	801c5e4 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8013bae:	1d60      	adds	r0, r4, #5
 8013bb0:	2250      	movs	r2, #80	; 0x50
 8013bb2:	4629      	mov	r1, r5
 8013bb4:	b280      	uxth	r0, r0
 8013bb6:	f008 fd15 	bl	801c5e4 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'L');}
 8013bba:	f104 0014 	add.w	r0, r4, #20
 8013bbe:	224c      	movs	r2, #76	; 0x4c
 8013bc0:	4629      	mov	r1, r5
 8013bc2:	b280      	uxth	r0, r0
 8013bc4:	f008 fd0e 	bl	801c5e4 <TFT_DrawChar>
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
 8013bc8:	4632      	mov	r2, r6
 8013bca:	b2b9      	uxth	r1, r7
 8013bcc:	fa1f f08a 	uxth.w	r0, sl
 8013bd0:	f002 fefa 	bl	80169c8 <GUI_TextEn_umol_sr>
}
 8013bd4:	e718      	b.n	8013a08 <GUI_Text_PPF_Measure+0x100>
 8013bd6:	bf00      	nop
 8013bd8:	2000022a 	.word	0x2000022a
 8013bdc:	200056f1 	.word	0x200056f1
 8013be0:	2000572a 	.word	0x2000572a
 8013be4:	200001f0 	.word	0x200001f0
 8013be8:	200056f3 	.word	0x200056f3
 8013bec:	20000200 	.word	0x20000200
 8013bf0:	40240000 	.word	0x40240000
 8013bf4:	447a0000 	.word	0x447a0000
 8013bf8:	08031455 	.word	0x08031455
 8013bfc:	20000234 	.word	0x20000234
 8013c00:	200001b0 	.word	0x200001b0
 8013c04:	20000ebc 	.word	0x20000ebc

08013c08 <GUI_Text_PPFRGB_Measure>:
uint8_t old_numPPFR = 10, old_numPPFG = 10, old_numPPFB = 10, old_numPPFFR = 10, test = 0, test2 = 0, delta_pos2 = 140, old_nan_PPFRGB = 0;
float ValueB2 = 10;
void GUI_Text_PPFRGB_Measure(uint16_t X, uint16_t Y, float ValueR, float ValueG, float ValueB, float ValueFR, uint8_t nope, uint8_t grey)
{
 8013c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c0c:	ed2d 8b08 	vpush	{d8-d11}
 8013c10:	4616      	mov	r6, r2
 8013c12:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8013c14:	4aad      	ldr	r2, [pc, #692]	; (8013ecc <GUI_Text_PPFRGB_Measure+0x2c4>)
 8013c16:	4bae      	ldr	r3, [pc, #696]	; (8013ed0 <GUI_Text_PPFRGB_Measure+0x2c8>)
 8013c18:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013eec <GUI_Text_PPFRGB_Measure+0x2e4>
{
 8013c1c:	4605      	mov	r5, r0
 8013c1e:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8013c20:	7810      	ldrb	r0, [r2, #0]
 8013c22:	7819      	ldrb	r1, [r3, #0]
{
 8013c24:	b089      	sub	sp, #36	; 0x24
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8013c26:	4288      	cmp	r0, r1
 8013c28:	9303      	str	r3, [sp, #12]
 8013c2a:	bf1c      	itt	ne
 8013c2c:	2300      	movne	r3, #0
 8013c2e:	f889 3000 	strbne.w	r3, [r9]
	
	char buffer[9] = {0};
 8013c32:	2300      	movs	r3, #0
{
 8013c34:	eeb0 ba40 	vmov.f32	s22, s0
 8013c38:	eef0 9a60 	vmov.f32	s19, s1
 8013c3c:	eeb0 8a41 	vmov.f32	s16, s2
 8013c40:	eef0 aa61 	vmov.f32	s21, s3
 8013c44:	9202      	str	r2, [sp, #8]
	char buffer[9] = {0};
 8013c46:	9305      	str	r3, [sp, #20]
 8013c48:	9306      	str	r3, [sp, #24]
 8013c4a:	f88d 301c 	strb.w	r3, [sp, #28]
	uint8_t	delta_pos = 140, deg = 0, number=0;
	uint32_t dec = 10;
		if(nope) 
 8013c4e:	2e00      	cmp	r6, #0
 8013c50:	f000 814e 	beq.w	8013ef0 <GUI_Text_PPFRGB_Measure+0x2e8>
		{	
			if(!old_nan_PPFRGB){
 8013c54:	f899 7000 	ldrb.w	r7, [r9]
 8013c58:	2f00      	cmp	r7, #0
 8013c5a:	f040 8379 	bne.w	8014350 <GUI_Text_PPFRGB_Measure+0x748>
				TFT_SetTextColor(TFT_White);
 8013c5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013c62:	f008 fbfb 	bl	801c45c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8013c66:	2063      	movs	r0, #99	; 0x63
 8013c68:	f008 fbfe 	bl	801c468 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013c6c:	f105 0662 	add.w	r6, r5, #98	; 0x62
				TFT_SetFont(&Font26EN_arch_digit);
 8013c70:	4898      	ldr	r0, [pc, #608]	; (8013ed4 <GUI_Text_PPFRGB_Measure+0x2cc>)
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013c72:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
				TFT_SetFont(&Font26EN_arch_digit);
 8013c76:	f008 fbeb 	bl	801c450 <TFT_SetFont>
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013c7a:	b2b6      	uxth	r6, r6
 8013c7c:	fa1f f888 	uxth.w	r8, r8
 8013c80:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8013c84:	f104 0314 	add.w	r3, r4, #20
 8013c88:	4630      	mov	r0, r6
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	4642      	mov	r2, r8
 8013c8e:	4621      	mov	r1, r4
 8013c90:	f8cd a000 	str.w	sl, [sp]
 8013c94:	f008 f9b3 	bl	801bffe <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8013c98:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8013c9c:	f104 0115 	add.w	r1, r4, #21
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	b29b      	uxth	r3, r3
 8013ca4:	4642      	mov	r2, r8
 8013ca6:	b289      	uxth	r1, r1
 8013ca8:	f8cd a000 	str.w	sl, [sp]
 8013cac:	f008 f9a7 	bl	801bffe <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8013cb0:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8013cb4:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8013cb8:	4630      	mov	r0, r6
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	4642      	mov	r2, r8
 8013cbe:	b289      	uxth	r1, r1
 8013cc0:	f8cd a000 	str.w	sl, [sp]
 8013cc4:	f008 f99b 	bl	801bffe <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8013cc8:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8013ccc:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8013cd0:	4630      	mov	r0, r6
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	4642      	mov	r2, r8
 8013cd6:	b289      	uxth	r1, r1
 8013cd8:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8013cdc:	f105 0675 	add.w	r6, r5, #117	; 0x75
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8013ce0:	f008 f98d 	bl	801bffe <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8013ce4:	b2b6      	uxth	r6, r6
				buffer[0] = '-';buffer[1] = '-';
 8013ce6:	232d      	movs	r3, #45	; 0x2d
 8013ce8:	f88d 3014 	strb.w	r3, [sp, #20]
 8013cec:	f88d 3015 	strb.w	r3, [sp, #21]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8013cf0:	aa05      	add	r2, sp, #20
 8013cf2:	2303      	movs	r3, #3
 8013cf4:	4621      	mov	r1, r4
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	f008 fccc 	bl	801c694 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8013cfc:	f104 0116 	add.w	r1, r4, #22
 8013d00:	2303      	movs	r3, #3
 8013d02:	aa05      	add	r2, sp, #20
 8013d04:	b289      	uxth	r1, r1
 8013d06:	4630      	mov	r0, r6
 8013d08:	f008 fcc4 	bl	801c694 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8013d0c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8013d10:	2303      	movs	r3, #3
 8013d12:	aa05      	add	r2, sp, #20
 8013d14:	b289      	uxth	r1, r1
 8013d16:	4630      	mov	r0, r6
 8013d18:	f008 fcbc 	bl	801c694 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8013d1c:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8013d20:	2303      	movs	r3, #3
 8013d22:	aa05      	add	r2, sp, #20
 8013d24:	b289      	uxth	r1, r1
 8013d26:	4630      	mov	r0, r6
 8013d28:	f008 fcb4 	bl	801c694 <TFT_DisplayString>
				old_nan_PPFRGB = 1;
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	f889 3000 	strb.w	r3, [r9]
	number = 0;
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8013d32:	9b02      	ldr	r3, [sp, #8]
 8013d34:	781a      	ldrb	r2, [r3, #0]
 8013d36:	9b03      	ldr	r3, [sp, #12]
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	f000 80c1 	beq.w	8013ec2 <GUI_Text_PPFRGB_Measure+0x2ba>
if (Language_status==Ru)
 8013d40:	4e65      	ldr	r6, [pc, #404]	; (8013ed8 <GUI_Text_PPFRGB_Measure+0x2d0>)
 8013d42:	7833      	ldrb	r3, [r6, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f040 830a 	bne.w	801435e <GUI_Text_PPFRGB_Measure+0x756>
	{	TFT_SetTextColor(TFT_White);
 8013d4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013d4e:	f008 fb85 	bl	801c45c <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
 8013d52:	4862      	ldr	r0, [pc, #392]	; (8013edc <GUI_Text_PPFRGB_Measure+0x2d4>)
 8013d54:	f008 fb7c 	bl	801c450 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y, 'С');
 8013d58:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8013d5c:	22a1      	movs	r2, #161	; 0xa1
 8013d5e:	4621      	mov	r1, r4
 8013d60:	b280      	uxth	r0, r0
 8013d62:	f008 fb87 	bl	801c474 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8013d66:	f104 0805 	add.w	r8, r4, #5
		TFT_SetFont(&Font16RU_arch_small);
 8013d6a:	485d      	ldr	r0, [pc, #372]	; (8013ee0 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8013d6c:	f008 fb70 	bl	801c450 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8013d70:	fa1f f888 	uxth.w	r8, r8
 8013d74:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8013d78:	22b8      	movs	r2, #184	; 0xb8
 8013d7a:	4641      	mov	r1, r8
 8013d7c:	b280      	uxth	r0, r0
 8013d7e:	f008 fb79 	bl	801c474 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+5, 'н');
 8013d82:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8013d86:	b280      	uxth	r0, r0
 8013d88:	22bd      	movs	r2, #189	; 0xbd
 8013d8a:	4641      	mov	r1, r8
 8013d8c:	f008 fb72 	bl	801c474 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8013d90:	4b54      	ldr	r3, [pc, #336]	; (8013ee4 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8013d92:	781b      	ldrb	r3, [r3, #0]
 8013d94:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	f000 82db 	beq.w	8014354 <GUI_Text_PPFRGB_Measure+0x74c>
 8013d9e:	463a      	mov	r2, r7
 8013da0:	4621      	mov	r1, r4
 8013da2:	b280      	uxth	r0, r0
 8013da4:	f004 fd0a 	bl	80187bc <GUI_TextRu_umol>
	{TFT_SetTextColor(TFT_White);
		GUI_TextEn_Blue(X+34, Y);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
	}
	
	if (Language_status==Ru)
 8013da8:	7833      	ldrb	r3, [r6, #0]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	f040 82f7 	bne.w	801439e <GUI_Text_PPFRGB_Measure+0x796>
	{	TFT_SetTextColor(TFT_White);
 8013db0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013db4:	f008 fb52 	bl	801c45c <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8013db8:	f104 0816 	add.w	r8, r4, #22
		TFT_SetFont(&Font16RU_arch_big);
 8013dbc:	4847      	ldr	r0, [pc, #284]	; (8013edc <GUI_Text_PPFRGB_Measure+0x2d4>)
 8013dbe:	f008 fb47 	bl	801c450 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8013dc2:	fa1f f888 	uxth.w	r8, r8
 8013dc6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8013dca:	2297      	movs	r2, #151	; 0x97
 8013dcc:	4641      	mov	r1, r8
 8013dce:	b280      	uxth	r0, r0
 8013dd0:	f008 fb50 	bl	801c474 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+27, 'е');
 8013dd4:	f104 091b 	add.w	r9, r4, #27
		TFT_SetFont(&Font16RU_arch_small);
 8013dd8:	4841      	ldr	r0, [pc, #260]	; (8013ee0 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8013dda:	f008 fb39 	bl	801c450 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+27, 'е');
 8013dde:	fa1f f989 	uxth.w	r9, r9
 8013de2:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8013de6:	22b5      	movs	r2, #181	; 0xb5
 8013de8:	4649      	mov	r1, r9
 8013dea:	b280      	uxth	r0, r0
 8013dec:	f008 fb42 	bl	801c474 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+27, 'л');
 8013df0:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8013df4:	b280      	uxth	r0, r0
 8013df6:	22bb      	movs	r2, #187	; 0xbb
 8013df8:	4649      	mov	r1, r9
 8013dfa:	f008 fb3b 	bl	801c474 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 8013dfe:	4b39      	ldr	r3, [pc, #228]	; (8013ee4 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	f000 82c4 	beq.w	8014394 <GUI_Text_PPFRGB_Measure+0x78c>
 8013e0c:	463a      	mov	r2, r7
 8013e0e:	4641      	mov	r1, r8
 8013e10:	b280      	uxth	r0, r0
 8013e12:	f004 fcd3 	bl	80187bc <GUI_TextRu_umol>
		GUI_TextEn_Green(X+17, Y+22);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
	}
	
	
	if (Language_status==Ru)
 8013e16:	7833      	ldrb	r3, [r6, #0]
 8013e18:	f105 0925 	add.w	r9, r5, #37	; 0x25
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	f040 82e2 	bne.w	80143e6 <GUI_Text_PPFRGB_Measure+0x7de>
	{	TFT_SetTextColor(TFT_White);
 8013e22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013e26:	f008 fb19 	bl	801c45c <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8013e2a:	f104 082c 	add.w	r8, r4, #44	; 0x2c
		TFT_SetFont(&Font16RU_arch_big);
 8013e2e:	482b      	ldr	r0, [pc, #172]	; (8013edc <GUI_Text_PPFRGB_Measure+0x2d4>)
 8013e30:	f008 fb0e 	bl	801c450 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8013e34:	fa1f f888 	uxth.w	r8, r8
 8013e38:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8013e3c:	229a      	movs	r2, #154	; 0x9a
 8013e3e:	4641      	mov	r1, r8
 8013e40:	b280      	uxth	r0, r0
 8013e42:	f008 fb17 	bl	801c474 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
 8013e46:	4826      	ldr	r0, [pc, #152]	; (8013ee0 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8013e48:	f008 fb02 	bl	801c450 <TFT_SetFont>
		TFT_DrawCharRus(X+55, Y+49, 'р');
 8013e4c:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8013e50:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8013e54:	b280      	uxth	r0, r0
 8013e56:	2280      	movs	r2, #128	; 0x80
 8013e58:	b289      	uxth	r1, r1
 8013e5a:	f008 fb0b 	bl	801c474 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 8013e5e:	4b21      	ldr	r3, [pc, #132]	; (8013ee4 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	f000 82b8 	beq.w	80143dc <GUI_Text_PPFRGB_Measure+0x7d4>
 8013e6c:	463a      	mov	r2, r7
 8013e6e:	4641      	mov	r1, r8
 8013e70:	b280      	uxth	r0, r0
 8013e72:	f004 fca3 	bl	80187bc <GUI_TextRu_umol>
	else if (Language_status==En)
	{	TFT_SetTextColor(TFT_White);
		GUI_TextEn_Red(X+37, Y+44);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
	}
	TFT_SetTextColor(TFT_White);
 8013e76:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+37, Y+66, 'F');
 8013e7a:	3442      	adds	r4, #66	; 0x42
	TFT_SetTextColor(TFT_White);
 8013e7c:	f008 faee 	bl	801c45c <TFT_SetTextColor>
	TFT_DrawChar(X+37, Y+66, 'F');
 8013e80:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_big);
 8013e82:	4819      	ldr	r0, [pc, #100]	; (8013ee8 <GUI_Text_PPFRGB_Measure+0x2e0>)
 8013e84:	f008 fae4 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+37, Y+66, 'F');
 8013e88:	2246      	movs	r2, #70	; 0x46
 8013e8a:	4621      	mov	r1, r4
 8013e8c:	fa1f f089 	uxth.w	r0, r9
 8013e90:	f008 fba8 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+66, 'R');
 8013e94:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8013e98:	2252      	movs	r2, #82	; 0x52
 8013e9a:	4621      	mov	r1, r4
 8013e9c:	b280      	uxth	r0, r0
 8013e9e:	f008 fba1 	bl	801c5e4 <TFT_DrawChar>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8013ea2:	7833      	ldrb	r3, [r6, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	f040 82c1 	bne.w	801442c <GUI_Text_PPFRGB_Measure+0x824>
 8013eaa:	4b0e      	ldr	r3, [pc, #56]	; (8013ee4 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	f000 82b5 	beq.w	8014422 <GUI_Text_PPFRGB_Measure+0x81a>
 8013eb8:	463a      	mov	r2, r7
 8013eba:	4621      	mov	r1, r4
 8013ebc:	b280      	uxth	r0, r0
 8013ebe:	f004 fc7d 	bl	80187bc <GUI_TextRu_umol>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
}
}
 8013ec2:	b009      	add	sp, #36	; 0x24
 8013ec4:	ecbd 8b08 	vpop	{d8-d11}
 8013ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ecc:	2000022a 	.word	0x2000022a
 8013ed0:	200056f1 	.word	0x200056f1
 8013ed4:	200001f0 	.word	0x200001f0
 8013ed8:	200056f3 	.word	0x200056f3
 8013edc:	200001d0 	.word	0x200001d0
 8013ee0:	200001d8 	.word	0x200001d8
 8013ee4:	20000ebc 	.word	0x20000ebc
 8013ee8:	200001b0 	.word	0x200001b0
 8013eec:	2000572b 	.word	0x2000572b
		if(old_nan_PPFRGB) 
 8013ef0:	f899 3000 	ldrb.w	r3, [r9]
 8013ef4:	b3b3      	cbz	r3, 8013f64 <GUI_Text_PPFRGB_Measure+0x35c>
			TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013ef6:	f105 0762 	add.w	r7, r5, #98	; 0x62
 8013efa:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
 8013efe:	b2bf      	uxth	r7, r7
 8013f00:	fa1f f888 	uxth.w	r8, r8
 8013f04:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8013f08:	f104 0314 	add.w	r3, r4, #20
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	4642      	mov	r2, r8
 8013f10:	4621      	mov	r1, r4
 8013f12:	4638      	mov	r0, r7
 8013f14:	f8cd a000 	str.w	sl, [sp]
 8013f18:	f008 f871 	bl	801bffe <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8013f1c:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8013f20:	f104 0115 	add.w	r1, r4, #21
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	4642      	mov	r2, r8
 8013f28:	b289      	uxth	r1, r1
 8013f2a:	4638      	mov	r0, r7
 8013f2c:	f8cd a000 	str.w	sl, [sp]
 8013f30:	f008 f865 	bl	801bffe <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8013f34:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8013f38:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	4642      	mov	r2, r8
 8013f40:	b289      	uxth	r1, r1
 8013f42:	4638      	mov	r0, r7
 8013f44:	f8cd a000 	str.w	sl, [sp]
 8013f48:	f008 f859 	bl	801bffe <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8013f4c:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8013f50:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8013f54:	f8cd a000 	str.w	sl, [sp]
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	4642      	mov	r2, r8
 8013f5c:	b289      	uxth	r1, r1
 8013f5e:	4638      	mov	r0, r7
 8013f60:	f008 f84d 	bl	801bffe <TFT_FillRectangle>
	ValueB = floor(ValueB*10)/10.0;
 8013f64:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
 8013f68:	ee68 7a28 	vmul.f32	s15, s16, s17
	old_nan_PPFRGB = 0;
 8013f6c:	2700      	movs	r7, #0
	ValueB = floor(ValueB*10)/10.0;
 8013f6e:	ee17 0a90 	vmov	r0, s15
	old_nan_PPFRGB = 0;
 8013f72:	f889 7000 	strb.w	r7, [r9]
	ValueB = floor(ValueB*10)/10.0;
 8013f76:	f7ec faff 	bl	8000578 <__aeabi_f2d>
 8013f7a:	ec41 0b10 	vmov	d0, r0, r1
 8013f7e:	f00e fcef 	bl	8022960 <floor>
 8013f82:	2200      	movs	r2, #0
 8013f84:	ec51 0b10 	vmov	r0, r1, d0
 8013f88:	4bd4      	ldr	r3, [pc, #848]	; (80142dc <GUI_Text_PPFRGB_Measure+0x6d4>)
 8013f8a:	f7ec fc73 	bl	8000874 <__aeabi_ddiv>
 8013f8e:	f7ec fe3f 	bl	8000c10 <__aeabi_d2f>
	if((ValueB/1000) > 1.0)
 8013f92:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 80142e0 <GUI_Text_PPFRGB_Measure+0x6d8>
	test = ValueB/(dec);
 8013f96:	4ad3      	ldr	r2, [pc, #844]	; (80142e4 <GUI_Text_PPFRGB_Measure+0x6dc>)
	ValueB = floor(ValueB*10)/10.0;
 8013f98:	ee09 0a10 	vmov	s18, r0
	if((ValueB/1000) > 1.0)
 8013f9c:	eec9 7a07 	vdiv.f32	s15, s18, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013fa0:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8013fa4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		ValueB = ValueB/(1000);
 8013fa8:	eef4 7a48 	vcmp.f32	s15, s16
 8013fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb0:	bfc8      	it	gt
 8013fb2:	eeb0 9a67 	vmovgt.f32	s18, s15
	test = ValueB/(dec);
 8013fb6:	eec9 7a28 	vdiv.f32	s15, s18, s17
 8013fba:	eeb0 aa47 	vmov.f32	s20, s14
 8013fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	test2 = ValueB/(dec*dec);
 8013fc2:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 80142e8 <GUI_Text_PPFRGB_Measure+0x6e0>
	test = ValueB/(dec);
 8013fc6:	ee17 3a90 	vmov	r3, s15
	test2 = ValueB/(dec*dec);
 8013fca:	eec9 7a07 	vdiv.f32	s15, s18, s14
	test = ValueB/(dec);
 8013fce:	7013      	strb	r3, [r2, #0]
	test2 = ValueB/(dec*dec);
 8013fd0:	4ac6      	ldr	r2, [pc, #792]	; (80142ec <GUI_Text_PPFRGB_Measure+0x6e4>)
 8013fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fd6:	ee17 3a90 	vmov	r3, s15
 8013fda:	7013      	strb	r3, [r2, #0]
	delta_pos2 = 140;
 8013fdc:	4bc4      	ldr	r3, [pc, #784]	; (80142f0 <GUI_Text_PPFRGB_Measure+0x6e8>)
 8013fde:	228c      	movs	r2, #140	; 0x8c
 8013fe0:	701a      	strb	r2, [r3, #0]
 8013fe2:	4698      	mov	r8, r3
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fe8:	45bb      	cmp	fp, r7
 8013fea:	bf08      	it	eq
 8013fec:	4618      	moveq	r0, r3
 8013fee:	f008 fa35 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013ff2:	2063      	movs	r0, #99	; 0x63
 8013ff4:	f008 fa38 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8013ff8:	48be      	ldr	r0, [pc, #760]	; (80142f4 <GUI_Text_PPFRGB_Measure+0x6ec>)
 8013ffa:	f008 fa29 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueB);
 8013ffe:	ee19 0a10 	vmov	r0, s18
 8014002:	f7ec fab9 	bl	8000578 <__aeabi_f2d>
 8014006:	4602      	mov	r2, r0
 8014008:	460b      	mov	r3, r1
 801400a:	a805      	add	r0, sp, #20
 801400c:	49ba      	ldr	r1, [pc, #744]	; (80142f8 <GUI_Text_PPFRGB_Measure+0x6f0>)
 801400e:	f00b fcfb 	bl	801fa08 <sprintf>
	uint32_t dec = 10;
 8014012:	210a      	movs	r1, #10
 8014014:	f898 3000 	ldrb.w	r3, [r8]
	sprintf (buffer, "%.1f", ValueB);
 8014018:	2204      	movs	r2, #4
 801401a:	4638      	mov	r0, r7
			dec *= 10;
 801401c:	468e      	mov	lr, r1
		if((ValueB/((float)dec)) >= 1.0)
 801401e:	ee07 1a90 	vmov	s15, r1
 8014022:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014026:	eec9 7a07 	vdiv.f32	s15, s18, s14
 801402a:	eef4 7ac8 	vcmpe.f32	s15, s16
 801402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014032:	db06      	blt.n	8014042 <GUI_Text_PPFRGB_Measure+0x43a>
			delta_pos2-=22;
 8014034:	3b16      	subs	r3, #22
			number++;
 8014036:	3701      	adds	r7, #1
			dec *= 10;
 8014038:	fb0e f101 	mul.w	r1, lr, r1
			delta_pos2-=22;
 801403c:	b2db      	uxtb	r3, r3
			number++;
 801403e:	b2ff      	uxtb	r7, r7
 8014040:	2001      	movs	r0, #1
 8014042:	3a01      	subs	r2, #1
	for (uint8_t i = 1; i <= 4; i++)
 8014044:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8014048:	d1e9      	bne.n	801401e <GUI_Text_PPFRGB_Measure+0x416>
 801404a:	b108      	cbz	r0, 8014050 <GUI_Text_PPFRGB_Measure+0x448>
 801404c:	f888 3000 	strb.w	r3, [r8]
	if(number < old_numPPFB )
 8014050:	4baa      	ldr	r3, [pc, #680]	; (80142fc <GUI_Text_PPFRGB_Measure+0x6f4>)
 8014052:	781a      	ldrb	r2, [r3, #0]
 8014054:	42ba      	cmp	r2, r7
 8014056:	4699      	mov	r9, r3
 8014058:	d90d      	bls.n	8014076 <GUI_Text_PPFRGB_Measure+0x46e>
		TFT_FillRectangle(X+98, Y, X+195, Y+20, TFT_Black_Bkgr);
 801405a:	2163      	movs	r1, #99	; 0x63
 801405c:	f104 0314 	add.w	r3, r4, #20
 8014060:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8014064:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8014068:	9100      	str	r1, [sp, #0]
 801406a:	b29b      	uxth	r3, r3
 801406c:	b292      	uxth	r2, r2
 801406e:	4621      	mov	r1, r4
 8014070:	b280      	uxth	r0, r0
 8014072:	f007 ffc4 	bl	801bffe <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 8014076:	f898 0000 	ldrb.w	r0, [r8]
	old_numPPFB = number;
 801407a:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 801407e:	4428      	add	r0, r5
 8014080:	2303      	movs	r3, #3
 8014082:	aa05      	add	r2, sp, #20
 8014084:	4621      	mov	r1, r4
 8014086:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8014088:	2700      	movs	r7, #0
 801408a:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 801408e:	f008 fb01 	bl	801c694 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 8014092:	ee6b 7a28 	vmul.f32	s15, s22, s17
	delta_pos = 140;
 8014096:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 801409a:	ee17 0a90 	vmov	r0, s15
 801409e:	f7ec fa6b 	bl	8000578 <__aeabi_f2d>
 80140a2:	ec41 0b10 	vmov	d0, r0, r1
 80140a6:	f00e fc5b 	bl	8022960 <floor>
 80140aa:	2200      	movs	r2, #0
 80140ac:	4b8b      	ldr	r3, [pc, #556]	; (80142dc <GUI_Text_PPFRGB_Measure+0x6d4>)
 80140ae:	ec51 0b10 	vmov	r0, r1, d0
 80140b2:	f7ec fbdf 	bl	8000874 <__aeabi_ddiv>
 80140b6:	f7ec fdab 	bl	8000c10 <__aeabi_d2f>
	if((ValueG/1000) > 1.0)
 80140ba:	eec9 7a8a 	vdiv.f32	s15, s19, s20
	ValueR = floor(ValueR*10)/10.0;
 80140be:	ee09 0a10 	vmov	s18, r0
		ValueG = ValueG/(1000);
 80140c2:	eef4 7a48 	vcmp.f32	s15, s16
 80140c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ca:	bfc8      	it	gt
 80140cc:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 80140d0:	4888      	ldr	r0, [pc, #544]	; (80142f4 <GUI_Text_PPFRGB_Measure+0x6ec>)
 80140d2:	f008 f9bd 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueG);
 80140d6:	ee19 0a90 	vmov	r0, s19
 80140da:	f7ec fa4d 	bl	8000578 <__aeabi_f2d>
 80140de:	4602      	mov	r2, r0
 80140e0:	460b      	mov	r3, r1
 80140e2:	a805      	add	r0, sp, #20
 80140e4:	4984      	ldr	r1, [pc, #528]	; (80142f8 <GUI_Text_PPFRGB_Measure+0x6f0>)
 80140e6:	f00b fc8f 	bl	801fa08 <sprintf>
	dec = 10;
 80140ea:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueG);
 80140ec:	2304      	movs	r3, #4
			dec *= 10;
 80140ee:	4611      	mov	r1, r2
		if((ValueG/(dec)) >= 1.0)
 80140f0:	ee07 2a90 	vmov	s15, r2
 80140f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80140f8:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80140fc:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014104:	db06      	blt.n	8014114 <GUI_Text_PPFRGB_Measure+0x50c>
			delta_pos-=22;
 8014106:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 801410a:	3701      	adds	r7, #1
			dec *= 10;
 801410c:	434a      	muls	r2, r1
			delta_pos-=22;
 801410e:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8014112:	b2ff      	uxtb	r7, r7
 8014114:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8014116:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801411a:	d1e9      	bne.n	80140f0 <GUI_Text_PPFRGB_Measure+0x4e8>
		if(number < old_numPPFG )
 801411c:	4b78      	ldr	r3, [pc, #480]	; (8014300 <GUI_Text_PPFRGB_Measure+0x6f8>)
 801411e:	781a      	ldrb	r2, [r3, #0]
 8014120:	42ba      	cmp	r2, r7
 8014122:	4699      	mov	r9, r3
 8014124:	d911      	bls.n	801414a <GUI_Text_PPFRGB_Measure+0x542>
		TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8014126:	f104 0329 	add.w	r3, r4, #41	; 0x29
 801412a:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 801412e:	f104 0115 	add.w	r1, r4, #21
 8014132:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8014136:	f04f 0e63 	mov.w	lr, #99	; 0x63
 801413a:	f8cd e000 	str.w	lr, [sp]
 801413e:	b29b      	uxth	r3, r3
 8014140:	b292      	uxth	r2, r2
 8014142:	b289      	uxth	r1, r1
 8014144:	b280      	uxth	r0, r0
 8014146:	f007 ff5a 	bl	801bffe <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 801414a:	eb05 0008 	add.w	r0, r5, r8
 801414e:	f104 0116 	add.w	r1, r4, #22
 8014152:	2303      	movs	r3, #3
 8014154:	aa05      	add	r2, sp, #20
	old_numPPFG = number;
 8014156:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 801415a:	b289      	uxth	r1, r1
 801415c:	b280      	uxth	r0, r0
	buffer[8] = 0;
 801415e:	2700      	movs	r7, #0
 8014160:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014164:	f008 fa96 	bl	801c694 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 8014168:	ee69 7a28 	vmul.f32	s15, s18, s17
	delta_pos = 140;
 801416c:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 8014170:	ee17 0a90 	vmov	r0, s15
 8014174:	f7ec fa00 	bl	8000578 <__aeabi_f2d>
 8014178:	ec41 0b10 	vmov	d0, r0, r1
 801417c:	f00e fbf0 	bl	8022960 <floor>
 8014180:	2200      	movs	r2, #0
 8014182:	4b56      	ldr	r3, [pc, #344]	; (80142dc <GUI_Text_PPFRGB_Measure+0x6d4>)
 8014184:	ec51 0b10 	vmov	r0, r1, d0
 8014188:	f7ec fb74 	bl	8000874 <__aeabi_ddiv>
 801418c:	f7ec fd40 	bl	8000c10 <__aeabi_d2f>
 8014190:	ee09 0a10 	vmov	s18, r0
	if((ValueR/1000) > 1.0)
 8014194:	eec9 7a0a 	vdiv.f32	s15, s18, s20
	TFT_SetFont(&Font16EN_arch_big);
 8014198:	4856      	ldr	r0, [pc, #344]	; (80142f4 <GUI_Text_PPFRGB_Measure+0x6ec>)
		ValueR = ValueR/(1000);
 801419a:	eef4 7a48 	vcmp.f32	s15, s16
 801419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a2:	bfc8      	it	gt
 80141a4:	eeb0 9a67 	vmovgt.f32	s18, s15
	TFT_SetFont(&Font16EN_arch_big);
 80141a8:	f008 f952 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueR);
 80141ac:	ee19 0a10 	vmov	r0, s18
 80141b0:	f7ec f9e2 	bl	8000578 <__aeabi_f2d>
 80141b4:	4602      	mov	r2, r0
 80141b6:	460b      	mov	r3, r1
 80141b8:	a805      	add	r0, sp, #20
 80141ba:	494f      	ldr	r1, [pc, #316]	; (80142f8 <GUI_Text_PPFRGB_Measure+0x6f0>)
 80141bc:	f00b fc24 	bl	801fa08 <sprintf>
	dec = 10;
 80141c0:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueR);
 80141c2:	2304      	movs	r3, #4
			dec *= 10;
 80141c4:	4611      	mov	r1, r2
		if((ValueR/(dec)) >= 1.0)
 80141c6:	ee07 2a90 	vmov	s15, r2
 80141ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80141ce:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80141d2:	eef4 7ac8 	vcmpe.f32	s15, s16
 80141d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141da:	db06      	blt.n	80141ea <GUI_Text_PPFRGB_Measure+0x5e2>
			delta_pos-=22;
 80141dc:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 80141e0:	3701      	adds	r7, #1
			dec *= 10;
 80141e2:	434a      	muls	r2, r1
			delta_pos-=22;
 80141e4:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80141e8:	b2ff      	uxtb	r7, r7
 80141ea:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80141ec:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80141f0:	d1e9      	bne.n	80141c6 <GUI_Text_PPFRGB_Measure+0x5be>
	if(number < old_numPPFR )
 80141f2:	4b44      	ldr	r3, [pc, #272]	; (8014304 <GUI_Text_PPFRGB_Measure+0x6fc>)
 80141f4:	781a      	ldrb	r2, [r3, #0]
 80141f6:	42ba      	cmp	r2, r7
 80141f8:	4699      	mov	r9, r3
 80141fa:	d911      	bls.n	8014220 <GUI_Text_PPFRGB_Measure+0x618>
		TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 80141fc:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8014200:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8014204:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8014208:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801420c:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014210:	f8cd e000 	str.w	lr, [sp]
 8014214:	b29b      	uxth	r3, r3
 8014216:	b292      	uxth	r2, r2
 8014218:	b289      	uxth	r1, r1
 801421a:	b280      	uxth	r0, r0
 801421c:	f007 feef 	bl	801bffe <TFT_FillRectangle>
	buffer[8] = 0;
 8014220:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014222:	eb05 0008 	add.w	r0, r5, r8
 8014226:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 801422a:	aa05      	add	r2, sp, #20
	buffer[8] = 0;
 801422c:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014230:	b289      	uxth	r1, r1
 8014232:	2303      	movs	r3, #3
 8014234:	b280      	uxth	r0, r0
	old_numPPFR = number;
 8014236:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 801423a:	f008 fa2b 	bl	801c694 <TFT_DisplayString>
	ValueFR = floor(ValueFR*10)/10.0;
 801423e:	ee6a 7aa8 	vmul.f32	s15, s21, s17
	delta_pos = 140;
 8014242:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueFR = floor(ValueFR*10)/10.0;
 8014246:	ee17 0a90 	vmov	r0, s15
 801424a:	f7ec f995 	bl	8000578 <__aeabi_f2d>
 801424e:	ec41 0b10 	vmov	d0, r0, r1
 8014252:	f00e fb85 	bl	8022960 <floor>
 8014256:	2200      	movs	r2, #0
 8014258:	4b20      	ldr	r3, [pc, #128]	; (80142dc <GUI_Text_PPFRGB_Measure+0x6d4>)
 801425a:	ec51 0b10 	vmov	r0, r1, d0
 801425e:	f7ec fb09 	bl	8000874 <__aeabi_ddiv>
 8014262:	f7ec fcd5 	bl	8000c10 <__aeabi_d2f>
 8014266:	ee08 0a90 	vmov	s17, r0
	if((ValueFR/1000) > 1.0)
 801426a:	eec8 7a8a 	vdiv.f32	s15, s17, s20
	TFT_SetFont(&Font16EN_arch_big);
 801426e:	4821      	ldr	r0, [pc, #132]	; (80142f4 <GUI_Text_PPFRGB_Measure+0x6ec>)
	else deg=0;
 8014270:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014278:	bfc8      	it	gt
 801427a:	eef0 8a67 	vmovgt.f32	s17, s15
 801427e:	bfcc      	ite	gt
 8014280:	2701      	movgt	r7, #1
 8014282:	2700      	movle	r7, #0
	TFT_SetFont(&Font16EN_arch_big);
 8014284:	f008 f8e4 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueFR);
 8014288:	ee18 0a90 	vmov	r0, s17
 801428c:	f7ec f974 	bl	8000578 <__aeabi_f2d>
 8014290:	4602      	mov	r2, r0
 8014292:	460b      	mov	r3, r1
 8014294:	a805      	add	r0, sp, #20
 8014296:	4918      	ldr	r1, [pc, #96]	; (80142f8 <GUI_Text_PPFRGB_Measure+0x6f0>)
 8014298:	f00b fbb6 	bl	801fa08 <sprintf>
	dec = 10;
 801429c:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueFR);
 801429e:	2304      	movs	r3, #4
			dec *= 10;
 80142a0:	4611      	mov	r1, r2
		if((ValueFR/(dec)) >= 1.0)
 80142a2:	ee07 2a90 	vmov	s15, r2
 80142a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80142aa:	eec8 7a87 	vdiv.f32	s15, s17, s14
 80142ae:	eef4 7ac8 	vcmpe.f32	s15, s16
 80142b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b6:	db06      	blt.n	80142c6 <GUI_Text_PPFRGB_Measure+0x6be>
			delta_pos-=22;
 80142b8:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 80142bc:	3601      	adds	r6, #1
			dec *= 10;
 80142be:	434a      	muls	r2, r1
			delta_pos-=22;
 80142c0:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80142c4:	b2f6      	uxtb	r6, r6
 80142c6:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80142c8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80142cc:	d1e9      	bne.n	80142a2 <GUI_Text_PPFRGB_Measure+0x69a>
	if(number < old_numPPFFR )
 80142ce:	4b0e      	ldr	r3, [pc, #56]	; (8014308 <GUI_Text_PPFRGB_Measure+0x700>)
 80142d0:	781a      	ldrb	r2, [r3, #0]
 80142d2:	42b2      	cmp	r2, r6
 80142d4:	4699      	mov	r9, r3
 80142d6:	d92b      	bls.n	8014330 <GUI_Text_PPFRGB_Measure+0x728>
 80142d8:	e018      	b.n	801430c <GUI_Text_PPFRGB_Measure+0x704>
 80142da:	bf00      	nop
 80142dc:	40240000 	.word	0x40240000
 80142e0:	447a0000 	.word	0x447a0000
 80142e4:	20005732 	.word	0x20005732
 80142e8:	42c80000 	.word	0x42c80000
 80142ec:	20005733 	.word	0x20005733
 80142f0:	2000022b 	.word	0x2000022b
 80142f4:	200001b0 	.word	0x200001b0
 80142f8:	08031455 	.word	0x08031455
 80142fc:	20000235 	.word	0x20000235
 8014300:	20000237 	.word	0x20000237
 8014304:	20000238 	.word	0x20000238
 8014308:	20000236 	.word	0x20000236
		TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 801430c:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8014310:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8014314:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8014318:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801431c:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014320:	f8cd e000 	str.w	lr, [sp]
 8014324:	b29b      	uxth	r3, r3
 8014326:	b292      	uxth	r2, r2
 8014328:	b289      	uxth	r1, r1
 801432a:	b280      	uxth	r0, r0
 801432c:	f007 fe67 	bl	801bffe <TFT_FillRectangle>
	buffer[8] = 0;
 8014330:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014332:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8014336:	eb05 0008 	add.w	r0, r5, r8
	buffer[8] = 0;
 801433a:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801433e:	aa05      	add	r2, sp, #20
 8014340:	2303      	movs	r3, #3
 8014342:	b289      	uxth	r1, r1
 8014344:	b280      	uxth	r0, r0
	old_numPPFFR = number;
 8014346:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801434a:	f008 f9a3 	bl	801c694 <TFT_DisplayString>
 801434e:	e4f0      	b.n	8013d32 <GUI_Text_PPFRGB_Measure+0x12a>
	uint8_t	delta_pos = 140, deg = 0, number=0;
 8014350:	461f      	mov	r7, r3
 8014352:	e4ee      	b.n	8013d32 <GUI_Text_PPFRGB_Measure+0x12a>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8014354:	4621      	mov	r1, r4
 8014356:	b280      	uxth	r0, r0
 8014358:	f004 fa9e 	bl	8018898 <GUI_TextRu_umol_sr>
 801435c:	e524      	b.n	8013da8 <GUI_Text_PPFRGB_Measure+0x1a0>
	else if (Language_status==En)
 801435e:	2b01      	cmp	r3, #1
 8014360:	f47f ad22 	bne.w	8013da8 <GUI_Text_PPFRGB_Measure+0x1a0>
	{TFT_SetTextColor(TFT_White);
 8014364:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014368:	f008 f878 	bl	801c45c <TFT_SetTextColor>
		GUI_TextEn_Blue(X+34, Y);
 801436c:	f105 0022 	add.w	r0, r5, #34	; 0x22
 8014370:	4621      	mov	r1, r4
 8014372:	b280      	uxth	r0, r0
 8014374:	f003 fae2 	bl	801793c <GUI_TextEn_Blue>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
 8014378:	4b35      	ldr	r3, [pc, #212]	; (8014450 <GUI_Text_PPFRGB_Measure+0x848>)
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014380:	463a      	mov	r2, r7
 8014382:	4621      	mov	r1, r4
 8014384:	b280      	uxth	r0, r0
 8014386:	b113      	cbz	r3, 801438e <GUI_Text_PPFRGB_Measure+0x786>
 8014388:	f002 fab8 	bl	80168fc <GUI_TextEn_umol>
 801438c:	e50c      	b.n	8013da8 <GUI_Text_PPFRGB_Measure+0x1a0>
 801438e:	f002 fb1b 	bl	80169c8 <GUI_TextEn_umol_sr>
 8014392:	e509      	b.n	8013da8 <GUI_Text_PPFRGB_Measure+0x1a0>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 8014394:	4641      	mov	r1, r8
 8014396:	b280      	uxth	r0, r0
 8014398:	f004 fa7e 	bl	8018898 <GUI_TextRu_umol_sr>
 801439c:	e53b      	b.n	8013e16 <GUI_Text_PPFRGB_Measure+0x20e>
	else if (Language_status==En)
 801439e:	2b01      	cmp	r3, #1
 80143a0:	f47f ad39 	bne.w	8013e16 <GUI_Text_PPFRGB_Measure+0x20e>
	{	TFT_SetTextColor(TFT_White);
 80143a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Green(X+17, Y+22);
 80143a8:	f104 0816 	add.w	r8, r4, #22
	{	TFT_SetTextColor(TFT_White);
 80143ac:	f008 f856 	bl	801c45c <TFT_SetTextColor>
		GUI_TextEn_Green(X+17, Y+22);
 80143b0:	fa1f f888 	uxth.w	r8, r8
 80143b4:	f105 0011 	add.w	r0, r5, #17
 80143b8:	4641      	mov	r1, r8
 80143ba:	b280      	uxth	r0, r0
 80143bc:	f003 fa8c 	bl	80178d8 <GUI_TextEn_Green>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
 80143c0:	4b23      	ldr	r3, [pc, #140]	; (8014450 <GUI_Text_PPFRGB_Measure+0x848>)
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80143c8:	463a      	mov	r2, r7
 80143ca:	4641      	mov	r1, r8
 80143cc:	b280      	uxth	r0, r0
 80143ce:	b113      	cbz	r3, 80143d6 <GUI_Text_PPFRGB_Measure+0x7ce>
 80143d0:	f002 fa94 	bl	80168fc <GUI_TextEn_umol>
 80143d4:	e51f      	b.n	8013e16 <GUI_Text_PPFRGB_Measure+0x20e>
 80143d6:	f002 faf7 	bl	80169c8 <GUI_TextEn_umol_sr>
 80143da:	e51c      	b.n	8013e16 <GUI_Text_PPFRGB_Measure+0x20e>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 80143dc:	4641      	mov	r1, r8
 80143de:	b280      	uxth	r0, r0
 80143e0:	f004 fa5a 	bl	8018898 <GUI_TextRu_umol_sr>
 80143e4:	e547      	b.n	8013e76 <GUI_Text_PPFRGB_Measure+0x26e>
	else if (Language_status==En)
 80143e6:	2b01      	cmp	r3, #1
 80143e8:	f47f ad45 	bne.w	8013e76 <GUI_Text_PPFRGB_Measure+0x26e>
		GUI_TextEn_Red(X+37, Y+44);
 80143ec:	f104 082c 	add.w	r8, r4, #44	; 0x2c
	{	TFT_SetTextColor(TFT_White);
 80143f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Red(X+37, Y+44);
 80143f4:	fa1f f888 	uxth.w	r8, r8
	{	TFT_SetTextColor(TFT_White);
 80143f8:	f008 f830 	bl	801c45c <TFT_SetTextColor>
		GUI_TextEn_Red(X+37, Y+44);
 80143fc:	4641      	mov	r1, r8
 80143fe:	fa1f f089 	uxth.w	r0, r9
 8014402:	f003 fac7 	bl	8017994 <GUI_TextEn_Red>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
 8014406:	4b12      	ldr	r3, [pc, #72]	; (8014450 <GUI_Text_PPFRGB_Measure+0x848>)
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 801440e:	463a      	mov	r2, r7
 8014410:	4641      	mov	r1, r8
 8014412:	b280      	uxth	r0, r0
 8014414:	b113      	cbz	r3, 801441c <GUI_Text_PPFRGB_Measure+0x814>
 8014416:	f002 fa71 	bl	80168fc <GUI_TextEn_umol>
 801441a:	e52c      	b.n	8013e76 <GUI_Text_PPFRGB_Measure+0x26e>
 801441c:	f002 fad4 	bl	80169c8 <GUI_TextEn_umol_sr>
 8014420:	e529      	b.n	8013e76 <GUI_Text_PPFRGB_Measure+0x26e>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8014422:	4621      	mov	r1, r4
 8014424:	b280      	uxth	r0, r0
 8014426:	f004 fa37 	bl	8018898 <GUI_TextRu_umol_sr>
 801442a:	e54a      	b.n	8013ec2 <GUI_Text_PPFRGB_Measure+0x2ba>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
 801442c:	2b01      	cmp	r3, #1
 801442e:	f47f ad48 	bne.w	8013ec2 <GUI_Text_PPFRGB_Measure+0x2ba>
 8014432:	4b07      	ldr	r3, [pc, #28]	; (8014450 <GUI_Text_PPFRGB_Measure+0x848>)
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 801443a:	463a      	mov	r2, r7
 801443c:	4621      	mov	r1, r4
 801443e:	b280      	uxth	r0, r0
 8014440:	b113      	cbz	r3, 8014448 <GUI_Text_PPFRGB_Measure+0x840>
 8014442:	f002 fa5b 	bl	80168fc <GUI_TextEn_umol>
 8014446:	e53c      	b.n	8013ec2 <GUI_Text_PPFRGB_Measure+0x2ba>
 8014448:	f002 fabe 	bl	80169c8 <GUI_TextEn_umol_sr>
}
 801444c:	e539      	b.n	8013ec2 <GUI_Text_PPFRGB_Measure+0x2ba>
 801444e:	bf00      	nop
 8014450:	20000ebc 	.word	0x20000ebc

08014454 <GUI_Text_XYZ_Measure>:
uint8_t old_numX = 10, old_numY = 10, old_numZ = 10, old_nanXYZ = 0;
void GUI_Text_XYZ_Measure(uint16_t X, uint16_t Y, uint16_t ValueX, uint16_t ValueY, uint16_t ValueZ, uint8_t nope, uint8_t grey)
{
 8014454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014458:	b087      	sub	sp, #28
 801445a:	4605      	mov	r5, r0
 801445c:	9302      	str	r3, [sp, #8]
 801445e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014462:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
 8014464:	2300      	movs	r3, #0
{
 8014466:	460c      	mov	r4, r1
 8014468:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
	char buffer[5] = {0};
 801446c:	9304      	str	r3, [sp, #16]
 801446e:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 190, number = 0;
	uint32_t dec = 10;
	
	if((ValueX ==0 && ValueY ==100 && ValueZ ==0)||nope)
 8014472:	4693      	mov	fp, r2
 8014474:	b922      	cbnz	r2, 8014480 <GUI_Text_XYZ_Measure+0x2c>
 8014476:	9b02      	ldr	r3, [sp, #8]
 8014478:	2b64      	cmp	r3, #100	; 0x64
 801447a:	d101      	bne.n	8014480 <GUI_Text_XYZ_Measure+0x2c>
 801447c:	9b03      	ldr	r3, [sp, #12]
 801447e:	b10b      	cbz	r3, 8014484 <GUI_Text_XYZ_Measure+0x30>
 8014480:	2e00      	cmp	r6, #0
 8014482:	d07c      	beq.n	801457e <GUI_Text_XYZ_Measure+0x12a>
	{
		if(!old_nanXYZ){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8014484:	4bb2      	ldr	r3, [pc, #712]	; (8014750 <GUI_Text_XYZ_Measure+0x2fc>)
 8014486:	781a      	ldrb	r2, [r3, #0]
 8014488:	469a      	mov	sl, r3
 801448a:	b96a      	cbnz	r2, 80144a8 <GUI_Text_XYZ_Measure+0x54>
 801448c:	2163      	movs	r1, #99	; 0x63
 801448e:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 8014492:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8014496:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801449a:	9100      	str	r1, [sp, #0]
 801449c:	b29b      	uxth	r3, r3
 801449e:	b292      	uxth	r2, r2
 80144a0:	4621      	mov	r1, r4
 80144a2:	b280      	uxth	r0, r0
 80144a4:	f007 fdab 	bl	801bffe <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 80144a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80144ac:	f007 ffd6 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80144b0:	f105 0987 	add.w	r9, r5, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 80144b4:	2063      	movs	r0, #99	; 0x63
 80144b6:	f007 ffd7 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80144ba:	fa1f f989 	uxth.w	r9, r9
 80144be:	48a5      	ldr	r0, [pc, #660]	; (8014754 <GUI_Text_XYZ_Measure+0x300>)
 80144c0:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 80144c4:	f007 ffc4 	bl	801c450 <TFT_SetFont>
 80144c8:	fa1f f888 	uxth.w	r8, r8
 80144cc:	222d      	movs	r2, #45	; 0x2d
 80144ce:	4621      	mov	r1, r4
 80144d0:	4648      	mov	r0, r9
 80144d2:	f105 06b9 	add.w	r6, r5, #185	; 0xb9
 80144d6:	f008 f885 	bl	801c5e4 <TFT_DrawChar>
 80144da:	b2b6      	uxth	r6, r6
 80144dc:	2220      	movs	r2, #32
 80144de:	4621      	mov	r1, r4
 80144e0:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80144e2:	f104 0723 	add.w	r7, r4, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80144e6:	f008 f87d 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80144ea:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80144ec:	222d      	movs	r2, #45	; 0x2d
 80144ee:	4621      	mov	r1, r4
 80144f0:	4630      	mov	r0, r6
 80144f2:	f008 f877 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80144f6:	4639      	mov	r1, r7
 80144f8:	222d      	movs	r2, #45	; 0x2d
 80144fa:	4648      	mov	r0, r9
 80144fc:	f008 f872 	bl	801c5e4 <TFT_DrawChar>
 8014500:	4639      	mov	r1, r7
 8014502:	2220      	movs	r2, #32
 8014504:	4640      	mov	r0, r8
 8014506:	f008 f86d 	bl	801c5e4 <TFT_DrawChar>
 801450a:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 801450c:	f104 0746 	add.w	r7, r4, #70	; 0x46
 8014510:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014512:	222d      	movs	r2, #45	; 0x2d
 8014514:	4630      	mov	r0, r6
 8014516:	f008 f865 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 801451a:	222d      	movs	r2, #45	; 0x2d
 801451c:	4639      	mov	r1, r7
 801451e:	4648      	mov	r0, r9
 8014520:	f008 f860 	bl	801c5e4 <TFT_DrawChar>
 8014524:	2220      	movs	r2, #32
 8014526:	4639      	mov	r1, r7
 8014528:	4640      	mov	r0, r8
 801452a:	f008 f85b 	bl	801c5e4 <TFT_DrawChar>
 801452e:	222d      	movs	r2, #45	; 0x2d
 8014530:	4639      	mov	r1, r7
 8014532:	4630      	mov	r0, r6
 8014534:	f008 f856 	bl	801c5e4 <TFT_DrawChar>
		old_nanXYZ = 1;
 8014538:	2301      	movs	r3, #1
 801453a:	f88a 3000 	strb.w	r3, [sl]
	old_numZ = number;
	number = 0;
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
	old_nanXYZ = 0;
}
			TFT_SetTextColor(TFT_White);
 801453e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014542:	f007 ff8b 	bl	801c45c <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8014546:	2063      	movs	r0, #99	; 0x63
 8014548:	f007 ff8e 	bl	801c468 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 801454c:	4881      	ldr	r0, [pc, #516]	; (8014754 <GUI_Text_XYZ_Measure+0x300>)
 801454e:	f007 ff7f 	bl	801c450 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'X'-34);
 8014552:	4621      	mov	r1, r4
 8014554:	4628      	mov	r0, r5
 8014556:	2236      	movs	r2, #54	; 0x36
 8014558:	f008 f844 	bl	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X, Y+35, 'Y'-34);
 801455c:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8014560:	4628      	mov	r0, r5
 8014562:	2237      	movs	r2, #55	; 0x37
 8014564:	b289      	uxth	r1, r1
 8014566:	f008 f83d 	bl	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'Z'-34);
 801456a:	f104 0146 	add.w	r1, r4, #70	; 0x46
 801456e:	2238      	movs	r2, #56	; 0x38
 8014570:	b289      	uxth	r1, r1
 8014572:	4628      	mov	r0, r5
 8014574:	f008 f836 	bl	801c5e4 <TFT_DrawChar>
}	
 8014578:	b007      	add	sp, #28
 801457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801457e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8014582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014586:	f249 42d2 	movw	r2, #38098	; 0x94d2
 801458a:	2800      	cmp	r0, #0
 801458c:	bf14      	ite	ne
 801458e:	4610      	movne	r0, r2
 8014590:	4618      	moveq	r0, r3
 8014592:	f007 ff63 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014596:	2063      	movs	r0, #99	; 0x63
 8014598:	f007 ff66 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801459c:	486e      	ldr	r0, [pc, #440]	; (8014758 <GUI_Text_XYZ_Measure+0x304>)
 801459e:	f007 ff57 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%d", ValueX);
 80145a2:	465a      	mov	r2, fp
 80145a4:	496d      	ldr	r1, [pc, #436]	; (801475c <GUI_Text_XYZ_Measure+0x308>)
 80145a6:	a804      	add	r0, sp, #16
 80145a8:	f00b fa2e 	bl	801fa08 <sprintf>
	uint8_t	delta_pos = 190, number = 0;
 80145ac:	46b0      	mov	r8, r6
	sprintf (buffer, "%d", ValueX);
 80145ae:	f04f 0904 	mov.w	r9, #4
	uint32_t dec = 10;
 80145b2:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 190, number = 0;
 80145b6:	27be      	movs	r7, #190	; 0xbe
		if((ValueX/(dec)) >= 1.0)
 80145b8:	fbbb f0fa 	udiv	r0, fp, sl
 80145bc:	f7eb ffba 	bl	8000534 <__aeabi_ui2d>
 80145c0:	2200      	movs	r2, #0
 80145c2:	4b67      	ldr	r3, [pc, #412]	; (8014760 <GUI_Text_XYZ_Measure+0x30c>)
 80145c4:	f7ec fab2 	bl	8000b2c <__aeabi_dcmpge>
 80145c8:	b140      	cbz	r0, 80145dc <GUI_Text_XYZ_Measure+0x188>
			dec *= 10;
 80145ca:	230a      	movs	r3, #10
			delta_pos-=23;
 80145cc:	3f17      	subs	r7, #23
			number++;
 80145ce:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80145d2:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80145d6:	b2ff      	uxtb	r7, r7
			number++;
 80145d8:	fa5f f888 	uxtb.w	r8, r8
 80145dc:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 80145e0:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 80145e4:	d1e8      	bne.n	80145b8 <GUI_Text_XYZ_Measure+0x164>
	if(number < old_numX || old_nanXYZ )
 80145e6:	4b5f      	ldr	r3, [pc, #380]	; (8014764 <GUI_Text_XYZ_Measure+0x310>)
 80145e8:	781a      	ldrb	r2, [r3, #0]
 80145ea:	4542      	cmp	r2, r8
 80145ec:	4699      	mov	r9, r3
 80145ee:	d802      	bhi.n	80145f6 <GUI_Text_XYZ_Measure+0x1a2>
 80145f0:	4b57      	ldr	r3, [pc, #348]	; (8014750 <GUI_Text_XYZ_Measure+0x2fc>)
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	b16b      	cbz	r3, 8014612 <GUI_Text_XYZ_Measure+0x1be>
		TFT_FillRectangle(X+40, Y, X+197, Y+24, TFT_Black_Bkgr);
 80145f6:	2163      	movs	r1, #99	; 0x63
 80145f8:	f104 0318 	add.w	r3, r4, #24
 80145fc:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014600:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014604:	9100      	str	r1, [sp, #0]
 8014606:	b29b      	uxth	r3, r3
 8014608:	b292      	uxth	r2, r2
 801460a:	4621      	mov	r1, r4
 801460c:	b280      	uxth	r0, r0
 801460e:	f007 fcf6 	bl	801bffe <TFT_FillRectangle>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014612:	19e8      	adds	r0, r5, r7
 8014614:	2303      	movs	r3, #3
 8014616:	aa04      	add	r2, sp, #16
 8014618:	4621      	mov	r1, r4
 801461a:	b280      	uxth	r0, r0
	old_numX = number;
 801461c:	f889 8000 	strb.w	r8, [r9]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014620:	f008 f838 	bl	801c694 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8014624:	484c      	ldr	r0, [pc, #304]	; (8014758 <GUI_Text_XYZ_Measure+0x304>)
 8014626:	f007 ff13 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%d", ValueY);
 801462a:	9a02      	ldr	r2, [sp, #8]
 801462c:	494b      	ldr	r1, [pc, #300]	; (801475c <GUI_Text_XYZ_Measure+0x308>)
 801462e:	a804      	add	r0, sp, #16
 8014630:	f00b f9ea 	bl	801fa08 <sprintf>
	dec = 10;
 8014634:	f04f 0a0a 	mov.w	sl, #10
	number = 0;
 8014638:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueY);
 801463c:	f04f 0904 	mov.w	r9, #4
	delta_pos = 190;
 8014640:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8014642:	46d3      	mov	fp, sl
		if((ValueY/(dec)) >= 1.0)
 8014644:	9b02      	ldr	r3, [sp, #8]
 8014646:	fbb3 f0fa 	udiv	r0, r3, sl
 801464a:	f7eb ff73 	bl	8000534 <__aeabi_ui2d>
 801464e:	2200      	movs	r2, #0
 8014650:	4b43      	ldr	r3, [pc, #268]	; (8014760 <GUI_Text_XYZ_Measure+0x30c>)
 8014652:	f7ec fa6b 	bl	8000b2c <__aeabi_dcmpge>
 8014656:	b138      	cbz	r0, 8014668 <GUI_Text_XYZ_Measure+0x214>
			delta_pos-=23;
 8014658:	3f17      	subs	r7, #23
			number++;
 801465a:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 801465e:	fb0b fa0a 	mul.w	sl, fp, sl
			delta_pos-=23;
 8014662:	b2ff      	uxtb	r7, r7
			number++;
 8014664:	fa5f f888 	uxtb.w	r8, r8
 8014668:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 801466c:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8014670:	d1e8      	bne.n	8014644 <GUI_Text_XYZ_Measure+0x1f0>
	if(number < old_numY || old_nanXYZ)
 8014672:	4b3d      	ldr	r3, [pc, #244]	; (8014768 <GUI_Text_XYZ_Measure+0x314>)
 8014674:	781a      	ldrb	r2, [r3, #0]
 8014676:	4542      	cmp	r2, r8
 8014678:	f104 0923 	add.w	r9, r4, #35	; 0x23
 801467c:	469a      	mov	sl, r3
 801467e:	d802      	bhi.n	8014686 <GUI_Text_XYZ_Measure+0x232>
 8014680:	4b33      	ldr	r3, [pc, #204]	; (8014750 <GUI_Text_XYZ_Measure+0x2fc>)
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	b173      	cbz	r3, 80146a4 <GUI_Text_XYZ_Measure+0x250>
		TFT_FillRectangle(X+40, Y+35, X+197, Y+59, TFT_Black_Bkgr);
 8014686:	2163      	movs	r1, #99	; 0x63
 8014688:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801468c:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014690:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014694:	9100      	str	r1, [sp, #0]
 8014696:	b29b      	uxth	r3, r3
 8014698:	b292      	uxth	r2, r2
 801469a:	fa1f f189 	uxth.w	r1, r9
 801469e:	b280      	uxth	r0, r0
 80146a0:	f007 fcad 	bl	801bffe <TFT_FillRectangle>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80146a4:	19e8      	adds	r0, r5, r7
 80146a6:	fa1f f189 	uxth.w	r1, r9
 80146aa:	2303      	movs	r3, #3
 80146ac:	aa04      	add	r2, sp, #16
 80146ae:	b280      	uxth	r0, r0
	old_numY = number;
 80146b0:	f88a 8000 	strb.w	r8, [sl]
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80146b4:	f007 ffee 	bl	801c694 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 80146b8:	4827      	ldr	r0, [pc, #156]	; (8014758 <GUI_Text_XYZ_Measure+0x304>)
 80146ba:	f007 fec9 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%d", ValueZ);
 80146be:	9a03      	ldr	r2, [sp, #12]
 80146c0:	4926      	ldr	r1, [pc, #152]	; (801475c <GUI_Text_XYZ_Measure+0x308>)
 80146c2:	a804      	add	r0, sp, #16
 80146c4:	f00b f9a0 	bl	801fa08 <sprintf>
	 dec = 10;
 80146c8:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueZ);
 80146cc:	f04f 0804 	mov.w	r8, #4
		delta_pos = 190;
 80146d0:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 80146d2:	46ca      	mov	sl, r9
		if((ValueZ/(dec)) >= 1.0)
 80146d4:	9b03      	ldr	r3, [sp, #12]
 80146d6:	fbb3 f0f9 	udiv	r0, r3, r9
 80146da:	f7eb ff2b 	bl	8000534 <__aeabi_ui2d>
 80146de:	2200      	movs	r2, #0
 80146e0:	4b1f      	ldr	r3, [pc, #124]	; (8014760 <GUI_Text_XYZ_Measure+0x30c>)
 80146e2:	f7ec fa23 	bl	8000b2c <__aeabi_dcmpge>
 80146e6:	b128      	cbz	r0, 80146f4 <GUI_Text_XYZ_Measure+0x2a0>
			delta_pos-=23;
 80146e8:	3f17      	subs	r7, #23
			number++;
 80146ea:	3601      	adds	r6, #1
			dec *= 10;
 80146ec:	fb0a f909 	mul.w	r9, sl, r9
			delta_pos-=23;
 80146f0:	b2ff      	uxtb	r7, r7
			number++;
 80146f2:	b2f6      	uxtb	r6, r6
 80146f4:	f108 38ff 	add.w	r8, r8, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 80146f8:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 80146fc:	d1ea      	bne.n	80146d4 <GUI_Text_XYZ_Measure+0x280>
	if(number < old_numZ || old_nanXYZ)
 80146fe:	4b1b      	ldr	r3, [pc, #108]	; (801476c <GUI_Text_XYZ_Measure+0x318>)
 8014700:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8014750 <GUI_Text_XYZ_Measure+0x2fc>
 8014704:	781a      	ldrb	r2, [r3, #0]
 8014706:	42b2      	cmp	r2, r6
 8014708:	f104 0a46 	add.w	sl, r4, #70	; 0x46
 801470c:	4698      	mov	r8, r3
 801470e:	d802      	bhi.n	8014716 <GUI_Text_XYZ_Measure+0x2c2>
 8014710:	f899 3000 	ldrb.w	r3, [r9]
 8014714:	b173      	cbz	r3, 8014734 <GUI_Text_XYZ_Measure+0x2e0>
		TFT_FillRectangle(X+40, Y+70, X+197, Y+94, TFT_Black_Bkgr);
 8014716:	2163      	movs	r1, #99	; 0x63
 8014718:	f104 035e 	add.w	r3, r4, #94	; 0x5e
 801471c:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014720:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014724:	9100      	str	r1, [sp, #0]
 8014726:	b29b      	uxth	r3, r3
 8014728:	b292      	uxth	r2, r2
 801472a:	fa1f f18a 	uxth.w	r1, sl
 801472e:	b280      	uxth	r0, r0
 8014730:	f007 fc65 	bl	801bffe <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014734:	19e8      	adds	r0, r5, r7
 8014736:	2303      	movs	r3, #3
 8014738:	aa04      	add	r2, sp, #16
 801473a:	fa1f f18a 	uxth.w	r1, sl
 801473e:	b280      	uxth	r0, r0
	old_numZ = number;
 8014740:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014744:	f007 ffa6 	bl	801c694 <TFT_DisplayString>
	old_nanXYZ = 0;
 8014748:	2300      	movs	r3, #0
 801474a:	f889 3000 	strb.w	r3, [r9]
 801474e:	e6f6      	b.n	801453e <GUI_Text_XYZ_Measure+0xea>
 8014750:	20005722 	.word	0x20005722
 8014754:	200001e8 	.word	0x200001e8
 8014758:	200001f0 	.word	0x200001f0
 801475c:	08024679 	.word	0x08024679
 8014760:	3ff00000 	.word	0x3ff00000
 8014764:	20000239 	.word	0x20000239
 8014768:	2000023a 	.word	0x2000023a
 801476c:	2000023b 	.word	0x2000023b

08014770 <GUI_Text_xy_Measure>:
uint8_t old_nanxy = 0;
void GUI_Text_xy_Measure(uint16_t X, uint16_t Y, float Valuex, float Valuey, uint8_t nope, uint8_t grey)
{
 8014770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014774:	ed2d 8b02 	vpush	{d8}
 8014778:	b085      	sub	sp, #20
 801477a:	4604      	mov	r4, r0
 801477c:	4691      	mov	r9, r2
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 801477e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8014782:	2200      	movs	r2, #0
{
 8014784:	460d      	mov	r5, r1
 8014786:	eef0 8a40 	vmov.f32	s17, s0
 801478a:	eeb0 8a60 	vmov.f32	s16, s1
 801478e:	461e      	mov	r6, r3
	char buffer[5] = {0};
 8014790:	9202      	str	r2, [sp, #8]
 8014792:	f88d 200c 	strb.w	r2, [sp, #12]
	TFT_SetTextColor(TFT_White);
 8014796:	f007 fe61 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801479a:	2063      	movs	r0, #99	; 0x63
 801479c:	f007 fe64 	bl	801c468 <TFT_SetBackColor>

	if((Valuex == 0 && Valuey ==1) || nope){
 80147a0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80147a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a8:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80148f0 <GUI_Text_xy_Measure+0x180>
 80147ac:	f105 0723 	add.w	r7, r5, #35	; 0x23
 80147b0:	d106      	bne.n	80147c0 <GUI_Text_xy_Measure+0x50>
 80147b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80147b6:	eeb4 8a67 	vcmp.f32	s16, s15
 80147ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147be:	d002      	beq.n	80147c6 <GUI_Text_xy_Measure+0x56>
 80147c0:	f1b9 0f00 	cmp.w	r9, #0
 80147c4:	d05a      	beq.n	801487c <GUI_Text_xy_Measure+0x10c>
		if(!old_nanxy){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 80147c6:	f898 3000 	ldrb.w	r3, [r8]
 80147ca:	b96b      	cbnz	r3, 80147e8 <GUI_Text_xy_Measure+0x78>
 80147cc:	2163      	movs	r1, #99	; 0x63
 80147ce:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 80147d2:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80147d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80147da:	9100      	str	r1, [sp, #0]
 80147dc:	b29b      	uxth	r3, r3
 80147de:	b292      	uxth	r2, r2
 80147e0:	4629      	mov	r1, r5
 80147e2:	b280      	uxth	r0, r0
 80147e4:	f007 fc0b 	bl	801bffe <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80147e8:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 80147ec:	483c      	ldr	r0, [pc, #240]	; (80148e0 <GUI_Text_xy_Measure+0x170>)
 80147ee:	fa1f fb8b 	uxth.w	fp, fp
 80147f2:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 80147f6:	f007 fe2b 	bl	801c450 <TFT_SetFont>
 80147fa:	fa1f fa8a 	uxth.w	sl, sl
 80147fe:	222d      	movs	r2, #45	; 0x2d
 8014800:	4629      	mov	r1, r5
 8014802:	4658      	mov	r0, fp
 8014804:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8014808:	f007 feec 	bl	801c5e4 <TFT_DrawChar>
 801480c:	fa1f f989 	uxth.w	r9, r9
 8014810:	2220      	movs	r2, #32
 8014812:	4629      	mov	r1, r5
 8014814:	4650      	mov	r0, sl
 8014816:	f007 fee5 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 801481a:	b2be      	uxth	r6, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801481c:	222d      	movs	r2, #45	; 0x2d
 801481e:	4629      	mov	r1, r5
 8014820:	4648      	mov	r0, r9
 8014822:	f007 fedf 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014826:	222d      	movs	r2, #45	; 0x2d
 8014828:	4631      	mov	r1, r6
 801482a:	4658      	mov	r0, fp
 801482c:	f007 feda 	bl	801c5e4 <TFT_DrawChar>
 8014830:	2220      	movs	r2, #32
 8014832:	4631      	mov	r1, r6
 8014834:	4650      	mov	r0, sl
 8014836:	f007 fed5 	bl	801c5e4 <TFT_DrawChar>
 801483a:	222d      	movs	r2, #45	; 0x2d
 801483c:	4631      	mov	r1, r6
 801483e:	4648      	mov	r0, r9
 8014840:	f007 fed0 	bl	801c5e4 <TFT_DrawChar>
		old_nanxy = 1;
 8014844:	2301      	movs	r3, #1
 8014846:	f888 3000 	strb.w	r3, [r8]
		
		sprintf (buffer, "%.4f", Valuey);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanxy = 0;
	}
	TFT_SetTextColor(TFT_White);
 801484a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801484e:	f007 fe05 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014852:	2063      	movs	r0, #99	; 0x63
 8014854:	f007 fe08 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 8014858:	4822      	ldr	r0, [pc, #136]	; (80148e4 <GUI_Text_xy_Measure+0x174>)
 801485a:	f007 fdf9 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'x'-65);
 801485e:	4629      	mov	r1, r5
 8014860:	4620      	mov	r0, r4
 8014862:	2237      	movs	r2, #55	; 0x37
 8014864:	f007 febe 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'y'-65);
 8014868:	2238      	movs	r2, #56	; 0x38
 801486a:	b2b9      	uxth	r1, r7
 801486c:	4620      	mov	r0, r4
 801486e:	f007 feb9 	bl	801c5e4 <TFT_DrawChar>
	
}	
 8014872:	b005      	add	sp, #20
 8014874:	ecbd 8b02 	vpop	{d8}
 8014878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801487c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014880:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8014884:	2e00      	cmp	r6, #0
 8014886:	bf08      	it	eq
 8014888:	4610      	moveq	r0, r2
 801488a:	f007 fde7 	bl	801c45c <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 801488e:	4816      	ldr	r0, [pc, #88]	; (80148e8 <GUI_Text_xy_Measure+0x178>)
 8014890:	f007 fdde 	bl	801c450 <TFT_SetFont>
		sprintf (buffer, "%.4f", Valuex);
 8014894:	ee18 0a90 	vmov	r0, s17
 8014898:	f7eb fe6e 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801489c:	f104 0646 	add.w	r6, r4, #70	; 0x46
		sprintf (buffer, "%.4f", Valuex);
 80148a0:	4602      	mov	r2, r0
 80148a2:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80148a4:	b2b6      	uxth	r6, r6
		sprintf (buffer, "%.4f", Valuex);
 80148a6:	4911      	ldr	r1, [pc, #68]	; (80148ec <GUI_Text_xy_Measure+0x17c>)
 80148a8:	a802      	add	r0, sp, #8
 80148aa:	f00b f8ad 	bl	801fa08 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80148ae:	2303      	movs	r3, #3
 80148b0:	aa02      	add	r2, sp, #8
 80148b2:	4629      	mov	r1, r5
 80148b4:	4630      	mov	r0, r6
 80148b6:	f007 feed 	bl	801c694 <TFT_DisplayString>
		sprintf (buffer, "%.4f", Valuey);
 80148ba:	ee18 0a10 	vmov	r0, s16
 80148be:	f7eb fe5b 	bl	8000578 <__aeabi_f2d>
 80148c2:	4602      	mov	r2, r0
 80148c4:	460b      	mov	r3, r1
 80148c6:	a802      	add	r0, sp, #8
 80148c8:	4908      	ldr	r1, [pc, #32]	; (80148ec <GUI_Text_xy_Measure+0x17c>)
 80148ca:	f00b f89d 	bl	801fa08 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80148ce:	2303      	movs	r3, #3
 80148d0:	aa02      	add	r2, sp, #8
 80148d2:	b2b9      	uxth	r1, r7
 80148d4:	4630      	mov	r0, r6
 80148d6:	f007 fedd 	bl	801c694 <TFT_DisplayString>
		old_nanxy = 0;
 80148da:	f888 9000 	strb.w	r9, [r8]
 80148de:	e7b4      	b.n	801484a <GUI_Text_xy_Measure+0xda>
 80148e0:	200001e8 	.word	0x200001e8
 80148e4:	200001f8 	.word	0x200001f8
 80148e8:	200001f0 	.word	0x200001f0
 80148ec:	0803145f 	.word	0x0803145f
 80148f0:	20005730 	.word	0x20005730
 80148f4:	00000000 	.word	0x00000000

080148f8 <GUI_Text_uv_Measure>:
uint8_t old_nanuv = 0;
void GUI_Text_uv_Measure(uint16_t X, uint16_t Y, float ValueU, float ValueV, uint8_t nope, uint8_t grey)
{
 80148f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148fc:	ed2d 8b02 	vpush	{d8}
 8014900:	b087      	sub	sp, #28
 8014902:	4604      	mov	r4, r0
 8014904:	469a      	mov	sl, r3
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 8014906:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801490a:	2300      	movs	r3, #0
{
 801490c:	460d      	mov	r5, r1
 801490e:	eeb0 8a40 	vmov.f32	s16, s0
 8014912:	ee10 9a90 	vmov	r9, s1
 8014916:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8014918:	9304      	str	r3, [sp, #16]
 801491a:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 801491e:	f007 fd9d 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014922:	2063      	movs	r0, #99	; 0x63
 8014924:	f007 fda0 	bl	801c468 <TFT_SetBackColor>
	
	if((ValueU == 0 && (ValueV >0.6 && ValueV <0.6001)) || nope){
 8014928:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801492c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014930:	4f5d      	ldr	r7, [pc, #372]	; (8014aa8 <GUI_Text_uv_Measure+0x1b0>)
 8014932:	f105 0623 	add.w	r6, r5, #35	; 0x23
 8014936:	d112      	bne.n	801495e <GUI_Text_uv_Measure+0x66>
 8014938:	4648      	mov	r0, r9
 801493a:	f7eb fe1d 	bl	8000578 <__aeabi_f2d>
 801493e:	a356      	add	r3, pc, #344	; (adr r3, 8014a98 <GUI_Text_uv_Measure+0x1a0>)
 8014940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014948:	f7ec f8fa 	bl	8000b40 <__aeabi_dcmpgt>
 801494c:	b138      	cbz	r0, 801495e <GUI_Text_uv_Measure+0x66>
 801494e:	a354      	add	r3, pc, #336	; (adr r3, 8014aa0 <GUI_Text_uv_Measure+0x1a8>)
 8014950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014958:	f7ec f8d4 	bl	8000b04 <__aeabi_dcmplt>
 801495c:	b910      	cbnz	r0, 8014964 <GUI_Text_uv_Measure+0x6c>
 801495e:	f1b8 0f00 	cmp.w	r8, #0
 8014962:	d064      	beq.n	8014a2e <GUI_Text_uv_Measure+0x136>
		if(!old_nanuv){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8014964:	783b      	ldrb	r3, [r7, #0]
 8014966:	b96b      	cbnz	r3, 8014984 <GUI_Text_uv_Measure+0x8c>
 8014968:	2163      	movs	r1, #99	; 0x63
 801496a:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 801496e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8014972:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014976:	9100      	str	r1, [sp, #0]
 8014978:	b29b      	uxth	r3, r3
 801497a:	b292      	uxth	r2, r2
 801497c:	4629      	mov	r1, r5
 801497e:	b280      	uxth	r0, r0
 8014980:	f007 fb3d 	bl	801bffe <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014984:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8014988:	4848      	ldr	r0, [pc, #288]	; (8014aac <GUI_Text_uv_Measure+0x1b4>)
 801498a:	fa1f fb8b 	uxth.w	fp, fp
 801498e:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8014992:	f007 fd5d 	bl	801c450 <TFT_SetFont>
 8014996:	fa1f fa8a 	uxth.w	sl, sl
 801499a:	222d      	movs	r2, #45	; 0x2d
 801499c:	4629      	mov	r1, r5
 801499e:	4658      	mov	r0, fp
 80149a0:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 80149a4:	f007 fe1e 	bl	801c5e4 <TFT_DrawChar>
 80149a8:	fa1f f989 	uxth.w	r9, r9
 80149ac:	2220      	movs	r2, #32
 80149ae:	4629      	mov	r1, r5
 80149b0:	4650      	mov	r0, sl
 80149b2:	f007 fe17 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80149b6:	fa1f f886 	uxth.w	r8, r6
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80149ba:	222d      	movs	r2, #45	; 0x2d
 80149bc:	4629      	mov	r1, r5
 80149be:	4648      	mov	r0, r9
 80149c0:	f007 fe10 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80149c4:	222d      	movs	r2, #45	; 0x2d
 80149c6:	4641      	mov	r1, r8
 80149c8:	4658      	mov	r0, fp
 80149ca:	f007 fe0b 	bl	801c5e4 <TFT_DrawChar>
 80149ce:	2220      	movs	r2, #32
 80149d0:	4641      	mov	r1, r8
 80149d2:	4650      	mov	r0, sl
 80149d4:	f007 fe06 	bl	801c5e4 <TFT_DrawChar>
 80149d8:	222d      	movs	r2, #45	; 0x2d
 80149da:	4641      	mov	r1, r8
 80149dc:	4648      	mov	r0, r9
 80149de:	f007 fe01 	bl	801c5e4 <TFT_DrawChar>
		old_nanuv = 1;
 80149e2:	2301      	movs	r3, #1
 80149e4:	703b      	strb	r3, [r7, #0]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
		sprintf (buffer, "%.4f", ValueV);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanuv = 0;
	}
	TFT_SetTextColor(TFT_White);
 80149e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font26EN_arch_small);
	TFT_DrawChar(X+15, Y, 'z'-64);
 80149ea:	f104 070f 	add.w	r7, r4, #15
	TFT_SetTextColor(TFT_White);
 80149ee:	f007 fd35 	bl	801c45c <TFT_SetTextColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 80149f2:	b2bf      	uxth	r7, r7
	TFT_SetFont(&Font26EN_arch_small);
 80149f4:	482e      	ldr	r0, [pc, #184]	; (8014ab0 <GUI_Text_uv_Measure+0x1b8>)
 80149f6:	f007 fd2b 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, 'z'-64);
 80149fa:	4629      	mov	r1, r5
 80149fc:	4638      	mov	r0, r7
 80149fe:	223a      	movs	r2, #58	; 0x3a
 8014a00:	f007 fdf0 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'u'-65);
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 8014a04:	b2b6      	uxth	r6, r6
	TFT_DrawChar(X, Y, 'u'-65);
 8014a06:	4629      	mov	r1, r5
 8014a08:	4620      	mov	r0, r4
 8014a0a:	2234      	movs	r2, #52	; 0x34
 8014a0c:	f007 fdea 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 8014a10:	4631      	mov	r1, r6
 8014a12:	4638      	mov	r0, r7
 8014a14:	223a      	movs	r2, #58	; 0x3a
 8014a16:	f007 fde5 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'v'-65);
 8014a1a:	2235      	movs	r2, #53	; 0x35
 8014a1c:	4631      	mov	r1, r6
 8014a1e:	4620      	mov	r0, r4
 8014a20:	f007 fde0 	bl	801c5e4 <TFT_DrawChar>
}	
 8014a24:	b007      	add	sp, #28
 8014a26:	ecbd 8b02 	vpop	{d8}
 8014a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014a32:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8014a36:	f1ba 0f00 	cmp.w	sl, #0
 8014a3a:	bf08      	it	eq
 8014a3c:	4618      	moveq	r0, r3
 8014a3e:	f007 fd0d 	bl	801c45c <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 8014a42:	481c      	ldr	r0, [pc, #112]	; (8014ab4 <GUI_Text_uv_Measure+0x1bc>)
 8014a44:	f007 fd04 	bl	801c450 <TFT_SetFont>
		sprintf (buffer, "%.4f", ValueU);
 8014a48:	ee18 0a10 	vmov	r0, s16
 8014a4c:	f7eb fd94 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014a50:	f104 0a46 	add.w	sl, r4, #70	; 0x46
		sprintf (buffer, "%.4f", ValueU);
 8014a54:	4602      	mov	r2, r0
 8014a56:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014a58:	fa1f fa8a 	uxth.w	sl, sl
		sprintf (buffer, "%.4f", ValueU);
 8014a5c:	4916      	ldr	r1, [pc, #88]	; (8014ab8 <GUI_Text_uv_Measure+0x1c0>)
 8014a5e:	a804      	add	r0, sp, #16
 8014a60:	f00a ffd2 	bl	801fa08 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014a64:	2303      	movs	r3, #3
 8014a66:	aa04      	add	r2, sp, #16
 8014a68:	4629      	mov	r1, r5
 8014a6a:	4650      	mov	r0, sl
 8014a6c:	f007 fe12 	bl	801c694 <TFT_DisplayString>
		sprintf (buffer, "%.4f", ValueV);
 8014a70:	4648      	mov	r0, r9
 8014a72:	f7eb fd81 	bl	8000578 <__aeabi_f2d>
 8014a76:	4602      	mov	r2, r0
 8014a78:	460b      	mov	r3, r1
 8014a7a:	a804      	add	r0, sp, #16
 8014a7c:	490e      	ldr	r1, [pc, #56]	; (8014ab8 <GUI_Text_uv_Measure+0x1c0>)
 8014a7e:	f00a ffc3 	bl	801fa08 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8014a82:	2303      	movs	r3, #3
 8014a84:	aa04      	add	r2, sp, #16
 8014a86:	b2b1      	uxth	r1, r6
 8014a88:	4650      	mov	r0, sl
 8014a8a:	f007 fe03 	bl	801c694 <TFT_DisplayString>
		old_nanuv = 0;
 8014a8e:	f887 8000 	strb.w	r8, [r7]
 8014a92:	e7a8      	b.n	80149e6 <GUI_Text_uv_Measure+0xee>
 8014a94:	f3af 8000 	nop.w
 8014a98:	33333333 	.word	0x33333333
 8014a9c:	3fe33333 	.word	0x3fe33333
 8014aa0:	ea4a8c15 	.word	0xea4a8c15
 8014aa4:	3fe33404 	.word	0x3fe33404
 8014aa8:	2000572f 	.word	0x2000572f
 8014aac:	200001e8 	.word	0x200001e8
 8014ab0:	200001f8 	.word	0x200001f8
 8014ab4:	200001f0 	.word	0x200001f0
 8014ab8:	0803145f 	.word	0x0803145f

08014abc <GUI_Text_CCT_Measure>:

uint8_t old_numCCT = 10, old_nan_CCT = 0;
void GUI_Text_CCT_Measure(uint16_t X, uint16_t Y, uint16_t Value, uint8_t nope, uint8_t grey)
{	
 8014abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac0:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8014ac2:	4b71      	ldr	r3, [pc, #452]	; (8014c88 <GUI_Text_CCT_Measure+0x1cc>)
{	
 8014ac4:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8014ac6:	781a      	ldrb	r2, [r3, #0]
 8014ac8:	4b70      	ldr	r3, [pc, #448]	; (8014c8c <GUI_Text_CCT_Measure+0x1d0>)
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	429a      	cmp	r2, r3
{	
 8014ace:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8014ad0:	bf1c      	itt	ne
 8014ad2:	4b6f      	ldrne	r3, [pc, #444]	; (8014c90 <GUI_Text_CCT_Measure+0x1d4>)
 8014ad4:	2200      	movne	r2, #0
	char buffer[9] = {0};
 8014ad6:	f04f 0600 	mov.w	r6, #0
{	
 8014ada:	4605      	mov	r5, r0
	uint8_t	delta_pos = 160, number = 0;
	uint32_t dec = 10;
	
	
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014adc:	f04f 0063 	mov.w	r0, #99	; 0x63
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8014ae0:	bf18      	it	ne
 8014ae2:	701a      	strbne	r2, [r3, #0]
{	
 8014ae4:	460c      	mov	r4, r1
	char buffer[9] = {0};
 8014ae6:	9603      	str	r6, [sp, #12]
 8014ae8:	9604      	str	r6, [sp, #16]
 8014aea:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014aee:	f007 fcbb 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014af2:	4868      	ldr	r0, [pc, #416]	; (8014c94 <GUI_Text_CCT_Measure+0x1d8>)
 8014af4:	f007 fcac 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%d", Value);
 8014af8:	464a      	mov	r2, r9
 8014afa:	4967      	ldr	r1, [pc, #412]	; (8014c98 <GUI_Text_CCT_Measure+0x1dc>)
 8014afc:	a803      	add	r0, sp, #12
 8014afe:	f00a ff83 	bl	801fa08 <sprintf>
 8014b02:	f04f 0804 	mov.w	r8, #4
	uint32_t dec = 10;
 8014b06:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 160, number = 0;
 8014b0a:	27a0      	movs	r7, #160	; 0xa0
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 8014b0c:	fbb9 f0fa 	udiv	r0, r9, sl
 8014b10:	f7eb fd10 	bl	8000534 <__aeabi_ui2d>
 8014b14:	2200      	movs	r2, #0
 8014b16:	4b61      	ldr	r3, [pc, #388]	; (8014c9c <GUI_Text_CCT_Measure+0x1e0>)
 8014b18:	f7ec f808 	bl	8000b2c <__aeabi_dcmpge>
 8014b1c:	b130      	cbz	r0, 8014b2c <GUI_Text_CCT_Measure+0x70>
		{
			dec *= 10;
 8014b1e:	230a      	movs	r3, #10
			delta_pos-=23;
 8014b20:	3f17      	subs	r7, #23
			number++;
 8014b22:	3601      	adds	r6, #1
			dec *= 10;
 8014b24:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8014b28:	b2ff      	uxtb	r7, r7
			number++;
 8014b2a:	b2f6      	uxtb	r6, r6
 8014b2c:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014b30:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8014b34:	d1ea      	bne.n	8014b0c <GUI_Text_CCT_Measure+0x50>
		}
	}
	
	if((Value == 0 || nope) & !old_nan_CCT){old_nan_CCT = 1; TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);TFT_SetTextColor(TFT_White); TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+100, Y+4, 'N'-33);TFT_DrawChar(X+125, Y+4, 'A'-33);TFT_DrawChar(X+150, Y+4, 'N'-33);}
 8014b36:	f1b9 0f00 	cmp.w	r9, #0
 8014b3a:	d063      	beq.n	8014c04 <GUI_Text_CCT_Measure+0x148>
 8014b3c:	f11b 0200 	adds.w	r2, fp, #0
 8014b40:	bf18      	it	ne
 8014b42:	2201      	movne	r2, #1
 8014b44:	4b52      	ldr	r3, [pc, #328]	; (8014c90 <GUI_Text_CCT_Measure+0x1d4>)
 8014b46:	7819      	ldrb	r1, [r3, #0]
 8014b48:	4698      	mov	r8, r3
 8014b4a:	2900      	cmp	r1, #0
 8014b4c:	d15c      	bne.n	8014c08 <GUI_Text_CCT_Measure+0x14c>
 8014b4e:	2a00      	cmp	r2, #0
 8014b50:	d05a      	beq.n	8014c08 <GUI_Text_CCT_Measure+0x14c>
 8014b52:	2201      	movs	r2, #1
 8014b54:	701a      	strb	r2, [r3, #0]
 8014b56:	2163      	movs	r1, #99	; 0x63
 8014b58:	f104 0319 	add.w	r3, r4, #25
 8014b5c:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014b60:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	b292      	uxth	r2, r2
 8014b68:	9100      	str	r1, [sp, #0]
 8014b6a:	b280      	uxth	r0, r0
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	f007 fa46 	bl	801bffe <TFT_FillRectangle>
 8014b72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014b76:	f007 fc71 	bl	801c45c <TFT_SetTextColor>
 8014b7a:	1d26      	adds	r6, r4, #4
 8014b7c:	4848      	ldr	r0, [pc, #288]	; (8014ca0 <GUI_Text_CCT_Measure+0x1e4>)
 8014b7e:	f007 fc67 	bl	801c450 <TFT_SetFont>
 8014b82:	b2b6      	uxth	r6, r6
 8014b84:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8014b88:	222d      	movs	r2, #45	; 0x2d
 8014b8a:	4631      	mov	r1, r6
 8014b8c:	b280      	uxth	r0, r0
 8014b8e:	f007 fd29 	bl	801c5e4 <TFT_DrawChar>
 8014b92:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8014b96:	2220      	movs	r2, #32
 8014b98:	4631      	mov	r1, r6
 8014b9a:	b280      	uxth	r0, r0
 8014b9c:	f007 fd22 	bl	801c5e4 <TFT_DrawChar>
 8014ba0:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8014ba4:	222d      	movs	r2, #45	; 0x2d
 8014ba6:	4631      	mov	r1, r6
 8014ba8:	b280      	uxth	r0, r0
 8014baa:	f007 fd1b 	bl	801c5e4 <TFT_DrawChar>
	old_numCCT = number;
		
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
	}
	
	TFT_SetTextColor(TFT_White);
 8014bae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014bb2:	f007 fc53 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014bb6:	2063      	movs	r0, #99	; 0x63
 8014bb8:	f007 fc56 	bl	801c468 <TFT_SetBackColor>
	if(Language_status == Ru ){
 8014bbc:	4b39      	ldr	r3, [pc, #228]	; (8014ca4 <GUI_Text_CCT_Measure+0x1e8>)
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	f105 06c8 	add.w	r6, r5, #200	; 0xc8
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d152      	bne.n	8014c6e <GUI_Text_CCT_Measure+0x1b2>
			TFT_SetFont(&Font26RU_arch_big);
 8014bc8:	4837      	ldr	r0, [pc, #220]	; (8014ca8 <GUI_Text_CCT_Measure+0x1ec>)
 8014bca:	f007 fc41 	bl	801c450 <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'К'-17);
 8014bce:	2289      	movs	r2, #137	; 0x89
 8014bd0:	4621      	mov	r1, r4
 8014bd2:	4628      	mov	r0, r5
 8014bd4:	f007 fc4e 	bl	801c474 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'Ц'-17);
 8014bd8:	f105 0018 	add.w	r0, r5, #24
 8014bdc:	2295      	movs	r2, #149	; 0x95
 8014bde:	4621      	mov	r1, r4
 8014be0:	b280      	uxth	r0, r0
 8014be2:	f007 fc47 	bl	801c474 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+45, Y, 'Т'-17);
 8014be6:	f105 002d 	add.w	r0, r5, #45	; 0x2d
 8014bea:	2291      	movs	r2, #145	; 0x91
 8014bec:	4621      	mov	r1, r4
 8014bee:	b280      	uxth	r0, r0
 8014bf0:	f007 fc40 	bl	801c474 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+200, Y, 'К'-17);
 8014bf4:	2289      	movs	r2, #137	; 0x89
 8014bf6:	4621      	mov	r1, r4
 8014bf8:	b2b0      	uxth	r0, r6
 8014bfa:	f007 fc3b 	bl	801c474 <TFT_DrawCharRus>
		{
			GUI_TextEn_CCT(X, Y+4);

			TFT_DrawChar(X+200, Y+4, 'K'-33);
		}	
}
 8014bfe:	b007      	add	sp, #28
 8014c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c04:	2201      	movs	r2, #1
 8014c06:	e79d      	b.n	8014b44 <GUI_Text_CCT_Measure+0x88>
	else if(!nope & Value != 0){
 8014c08:	f1bb 0f00 	cmp.w	fp, #0
 8014c0c:	d1cf      	bne.n	8014bae <GUI_Text_CCT_Measure+0xf2>
 8014c0e:	f1b9 0f00 	cmp.w	r9, #0
 8014c12:	d0cc      	beq.n	8014bae <GUI_Text_CCT_Measure+0xf2>
	if(number < old_numCCT )
 8014c14:	4b25      	ldr	r3, [pc, #148]	; (8014cac <GUI_Text_CCT_Measure+0x1f0>)
 8014c16:	781a      	ldrb	r2, [r3, #0]
 8014c18:	42b2      	cmp	r2, r6
 8014c1a:	4699      	mov	r9, r3
 8014c1c:	d90d      	bls.n	8014c3a <GUI_Text_CCT_Measure+0x17e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8014c1e:	2163      	movs	r1, #99	; 0x63
 8014c20:	f104 0319 	add.w	r3, r4, #25
 8014c24:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014c28:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014c2c:	9100      	str	r1, [sp, #0]
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	b292      	uxth	r2, r2
 8014c32:	4621      	mov	r1, r4
 8014c34:	b280      	uxth	r0, r0
 8014c36:	f007 f9e2 	bl	801bffe <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014c3a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8014c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c42:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8014c46:	2800      	cmp	r0, #0
 8014c48:	bf14      	ite	ne
 8014c4a:	4610      	movne	r0, r2
 8014c4c:	4618      	moveq	r0, r3
 8014c4e:	f007 fc05 	bl	801c45c <TFT_SetTextColor>
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8014c52:	1ca1      	adds	r1, r4, #2
 8014c54:	19e8      	adds	r0, r5, r7
 8014c56:	2303      	movs	r3, #3
 8014c58:	aa03      	add	r2, sp, #12
 8014c5a:	b289      	uxth	r1, r1
 8014c5c:	b280      	uxth	r0, r0
	old_numCCT = number;
 8014c5e:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8014c62:	f007 fd17 	bl	801c694 <TFT_DisplayString>
 8014c66:	2300      	movs	r3, #0
 8014c68:	f888 3000 	strb.w	r3, [r8]
 8014c6c:	e79f      	b.n	8014bae <GUI_Text_CCT_Measure+0xf2>
			GUI_TextEn_CCT(X, Y+4);
 8014c6e:	3404      	adds	r4, #4
 8014c70:	b2a4      	uxth	r4, r4
 8014c72:	4621      	mov	r1, r4
 8014c74:	4628      	mov	r0, r5
 8014c76:	f002 fd09 	bl	801768c <GUI_TextEn_CCT>
			TFT_DrawChar(X+200, Y+4, 'K'-33);
 8014c7a:	222a      	movs	r2, #42	; 0x2a
 8014c7c:	4621      	mov	r1, r4
 8014c7e:	b2b0      	uxth	r0, r6
 8014c80:	f007 fcb0 	bl	801c5e4 <TFT_DrawChar>
}
 8014c84:	e7bb      	b.n	8014bfe <GUI_Text_CCT_Measure+0x142>
 8014c86:	bf00      	nop
 8014c88:	2000022a 	.word	0x2000022a
 8014c8c:	200056f1 	.word	0x200056f1
 8014c90:	20005723 	.word	0x20005723
 8014c94:	200001f0 	.word	0x200001f0
 8014c98:	08024679 	.word	0x08024679
 8014c9c:	3ff00000 	.word	0x3ff00000
 8014ca0:	200001e8 	.word	0x200001e8
 8014ca4:	200056f3 	.word	0x200056f3
 8014ca8:	20000200 	.word	0x20000200
 8014cac:	20000231 	.word	0x20000231

08014cb0 <GUI_Text_lambdaD_Measure>:
uint8_t old_lambdaD = 10, old_nan_lambdaD = 0;
void GUI_Text_lambdaD_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8014cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cb4:	ed2d 8b02 	vpush	{d8}
 8014cb8:	4616      	mov	r6, r2
 8014cba:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014cbc:	4a71      	ldr	r2, [pc, #452]	; (8014e84 <GUI_Text_lambdaD_Measure+0x1d4>)
 8014cbe:	4b72      	ldr	r3, [pc, #456]	; (8014e88 <GUI_Text_lambdaD_Measure+0x1d8>)
 8014cc0:	4f72      	ldr	r7, [pc, #456]	; (8014e8c <GUI_Text_lambdaD_Measure+0x1dc>)
{	
 8014cc2:	4605      	mov	r5, r0
 8014cc4:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014cc6:	7818      	ldrb	r0, [r3, #0]
 8014cc8:	7811      	ldrb	r1, [r2, #0]
	Value = floor(Value*10)/10.0;
 8014cca:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014cce:	4288      	cmp	r0, r1
	Value = floor(Value*10)/10.0;
 8014cd0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014cd4:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014cd6:	bf18      	it	ne
 8014cd8:	2300      	movne	r3, #0
{	
 8014cda:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014cdc:	bf18      	it	ne
 8014cde:	703b      	strbne	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 8014ce0:	ee17 0a90 	vmov	r0, s15
 8014ce4:	4690      	mov	r8, r2
 8014ce6:	f7eb fc47 	bl	8000578 <__aeabi_f2d>
 8014cea:	ec41 0b10 	vmov	d0, r0, r1
 8014cee:	f00d fe37 	bl	8022960 <floor>
	char buffer[9] = {0};
 8014cf2:	2200      	movs	r2, #0
	Value = floor(Value*10)/10.0;
 8014cf4:	ec51 0b10 	vmov	r0, r1, d0
	char buffer[9] = {0};
 8014cf8:	9203      	str	r2, [sp, #12]
 8014cfa:	9204      	str	r2, [sp, #16]
 8014cfc:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
 8014d00:	2e00      	cmp	r6, #0
 8014d02:	d054      	beq.n	8014dae <GUI_Text_lambdaD_Measure+0xfe>
		{	
			if(!old_nan_lambdaD){
 8014d04:	783b      	ldrb	r3, [r7, #0]
 8014d06:	bb33      	cbnz	r3, 8014d56 <GUI_Text_lambdaD_Measure+0xa6>
				TFT_SetTextColor(TFT_White);
 8014d08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014d0c:	f007 fba6 	bl	801c45c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8014d10:	2063      	movs	r0, #99	; 0x63
 8014d12:	f007 fba9 	bl	801c468 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8014d16:	485e      	ldr	r0, [pc, #376]	; (8014e90 <GUI_Text_lambdaD_Measure+0x1e0>)
 8014d18:	f007 fb9a 	bl	801c450 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8014d1c:	2163      	movs	r1, #99	; 0x63
 8014d1e:	f104 031a 	add.w	r3, r4, #26
 8014d22:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014d26:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014d2a:	9100      	str	r1, [sp, #0]
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	b292      	uxth	r2, r2
 8014d30:	4621      	mov	r1, r4
 8014d32:	b280      	uxth	r0, r0
 8014d34:	f007 f963 	bl	801bffe <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8014d38:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014d3a:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8014d3e:	f88d 300c 	strb.w	r3, [sp, #12]
 8014d42:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014d46:	aa03      	add	r2, sp, #12
 8014d48:	2303      	movs	r3, #3
 8014d4a:	4621      	mov	r1, r4
 8014d4c:	b280      	uxth	r0, r0
 8014d4e:	f007 fca1 	bl	801c694 <TFT_DisplayString>
				old_nan_lambdaD = 1;
 8014d52:	2301      	movs	r3, #1
 8014d54:	703b      	strb	r3, [r7, #0]
	} 
	old_lambdaD = number;
	
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8014d56:	f899 2000 	ldrb.w	r2, [r9]
 8014d5a:	f898 3000 	ldrb.w	r3, [r8]
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d020      	beq.n	8014da4 <GUI_Text_lambdaD_Measure+0xf4>
	TFT_SetTextColor(TFT_White);
 8014d62:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_d(X, Y+5);
 8014d66:	1d66      	adds	r6, r4, #5
	TFT_SetTextColor(TFT_White);
 8014d68:	f007 fb78 	bl	801c45c <TFT_SetTextColor>
	GUI_Text_lambda_d(X, Y+5);
 8014d6c:	b2b6      	uxth	r6, r6
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014d6e:	2063      	movs	r0, #99	; 0x63
 8014d70:	f007 fb7a 	bl	801c468 <TFT_SetBackColor>
	GUI_Text_lambda_d(X, Y+5);
 8014d74:	4628      	mov	r0, r5
 8014d76:	4631      	mov	r1, r6
 8014d78:	f001 fd28 	bl	80167cc <GUI_Text_lambda_d>
	if(Language_status == Ru ){
 8014d7c:	4b45      	ldr	r3, [pc, #276]	; (8014e94 <GUI_Text_lambdaD_Measure+0x1e4>)
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 8014d84:	35d8      	adds	r5, #216	; 0xd8
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d16c      	bne.n	8014e64 <GUI_Text_lambdaD_Measure+0x1b4>
			TFT_SetFont(&Font26RU_arch_small);
 8014d8a:	4843      	ldr	r0, [pc, #268]	; (8014e98 <GUI_Text_lambdaD_Measure+0x1e8>)
 8014d8c:	f007 fb60 	bl	801c450 <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 8014d90:	22bd      	movs	r2, #189	; 0xbd
 8014d92:	4631      	mov	r1, r6
 8014d94:	b2b8      	uxth	r0, r7
 8014d96:	f007 fb6d 	bl	801c474 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 8014d9a:	22bc      	movs	r2, #188	; 0xbc
 8014d9c:	4631      	mov	r1, r6
 8014d9e:	b2a8      	uxth	r0, r5
 8014da0:	f007 fb68 	bl	801c474 <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y+10, 'n');
			TFT_DrawChar(X+216, Y+10, 'm');
		}	
	}
}
 8014da4:	b006      	add	sp, #24
 8014da6:	ecbd 8b02 	vpop	{d8}
 8014daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	old_nan_lambdaD = 0;
 8014dae:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014db4:	f249 47d2 	movw	r7, #38098	; 0x94d2
	Value = floor(Value*10)/10.0;
 8014db8:	2200      	movs	r2, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014dba:	f1ba 0f00 	cmp.w	sl, #0
 8014dbe:	bf08      	it	eq
 8014dc0:	461f      	moveq	r7, r3
	Value = floor(Value*10)/10.0;
 8014dc2:	4b36      	ldr	r3, [pc, #216]	; (8014e9c <GUI_Text_lambdaD_Measure+0x1ec>)
 8014dc4:	f7eb fd56 	bl	8000874 <__aeabi_ddiv>
 8014dc8:	f7eb ff22 	bl	8000c10 <__aeabi_d2f>
 8014dcc:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014dd0:	4638      	mov	r0, r7
 8014dd2:	f007 fb43 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014dd6:	2063      	movs	r0, #99	; 0x63
 8014dd8:	f007 fb46 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014ddc:	482c      	ldr	r0, [pc, #176]	; (8014e90 <GUI_Text_lambdaD_Measure+0x1e0>)
 8014dde:	f007 fb37 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8014de2:	ee18 0a10 	vmov	r0, s16
 8014de6:	f7eb fbc7 	bl	8000578 <__aeabi_f2d>
 8014dea:	4602      	mov	r2, r0
 8014dec:	460b      	mov	r3, r1
 8014dee:	a803      	add	r0, sp, #12
 8014df0:	492b      	ldr	r1, [pc, #172]	; (8014ea0 <GUI_Text_lambdaD_Measure+0x1f0>)
 8014df2:	f00a fe09 	bl	801fa08 <sprintf>
	uint32_t dec = 10;
 8014df6:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8014df8:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 8014dfa:	277a      	movs	r7, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 8014dfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8014e00:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8014e02:	ee07 2a10 	vmov	s14, r2
 8014e06:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8014e0a:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8014e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e16:	db04      	blt.n	8014e22 <GUI_Text_lambdaD_Measure+0x172>
			delta_pos-=23;
 8014e18:	3f17      	subs	r7, #23
			number++;
 8014e1a:	3601      	adds	r6, #1
			dec *= 10;
 8014e1c:	434a      	muls	r2, r1
			delta_pos-=23;
 8014e1e:	b2ff      	uxtb	r7, r7
			number++;
 8014e20:	b2f6      	uxtb	r6, r6
 8014e22:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 8014e24:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014e28:	d1eb      	bne.n	8014e02 <GUI_Text_lambdaD_Measure+0x152>
	if(number < old_lambdaD )
 8014e2a:	4b1e      	ldr	r3, [pc, #120]	; (8014ea4 <GUI_Text_lambdaD_Measure+0x1f4>)
 8014e2c:	781a      	ldrb	r2, [r3, #0]
 8014e2e:	42b2      	cmp	r2, r6
 8014e30:	469a      	mov	sl, r3
 8014e32:	d90d      	bls.n	8014e50 <GUI_Text_lambdaD_Measure+0x1a0>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8014e34:	2163      	movs	r1, #99	; 0x63
 8014e36:	f104 0319 	add.w	r3, r4, #25
 8014e3a:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014e3e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014e42:	9100      	str	r1, [sp, #0]
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	b292      	uxth	r2, r2
 8014e48:	4621      	mov	r1, r4
 8014e4a:	b280      	uxth	r0, r0
 8014e4c:	f007 f8d7 	bl	801bffe <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014e50:	19e8      	adds	r0, r5, r7
 8014e52:	2303      	movs	r3, #3
 8014e54:	aa03      	add	r2, sp, #12
 8014e56:	4621      	mov	r1, r4
 8014e58:	b280      	uxth	r0, r0
	old_lambdaD = number;
 8014e5a:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014e5e:	f007 fc19 	bl	801c694 <TFT_DisplayString>
 8014e62:	e778      	b.n	8014d56 <GUI_Text_lambdaD_Measure+0xa6>
			TFT_DrawChar(X+200, Y+10, 'n');
 8014e64:	340a      	adds	r4, #10
 8014e66:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font16EN_arch_small);
 8014e68:	480f      	ldr	r0, [pc, #60]	; (8014ea8 <GUI_Text_lambdaD_Measure+0x1f8>)
 8014e6a:	f007 faf1 	bl	801c450 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+10, 'n');
 8014e6e:	4621      	mov	r1, r4
 8014e70:	b2b8      	uxth	r0, r7
 8014e72:	226e      	movs	r2, #110	; 0x6e
 8014e74:	f007 fbb6 	bl	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X+216, Y+10, 'm');
 8014e78:	226d      	movs	r2, #109	; 0x6d
 8014e7a:	4621      	mov	r1, r4
 8014e7c:	b2a8      	uxth	r0, r5
 8014e7e:	f007 fbb1 	bl	801c5e4 <TFT_DrawChar>
}
 8014e82:	e78f      	b.n	8014da4 <GUI_Text_lambdaD_Measure+0xf4>
 8014e84:	200056f1 	.word	0x200056f1
 8014e88:	2000022a 	.word	0x2000022a
 8014e8c:	2000572e 	.word	0x2000572e
 8014e90:	200001f0 	.word	0x200001f0
 8014e94:	200056f3 	.word	0x200056f3
 8014e98:	20000208 	.word	0x20000208
 8014e9c:	40240000 	.word	0x40240000
 8014ea0:	08031455 	.word	0x08031455
 8014ea4:	2000022f 	.word	0x2000022f
 8014ea8:	200001c0 	.word	0x200001c0

08014eac <GUI_Text_deltaE_Measure>:
}


uint8_t old_deltaE = 10, old_nan_deltaE = 0;
void GUI_Text_deltaE_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8014eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014eb0:	ed2d 8b02 	vpush	{d8}
 8014eb4:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8014eb6:	4b76      	ldr	r3, [pc, #472]	; (8015090 <GUI_Text_deltaE_Measure+0x1e4>)
 8014eb8:	4e76      	ldr	r6, [pc, #472]	; (8015094 <GUI_Text_deltaE_Measure+0x1e8>)
{	
 8014eba:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8014ebc:	781a      	ldrb	r2, [r3, #0]
 8014ebe:	4b76      	ldr	r3, [pc, #472]	; (8015098 <GUI_Text_deltaE_Measure+0x1ec>)
 8014ec0:	781b      	ldrb	r3, [r3, #0]
 8014ec2:	429a      	cmp	r2, r3
{	
 8014ec4:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8014ec6:	bf1c      	itt	ne
 8014ec8:	2300      	movne	r3, #0
 8014eca:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8014ecc:	2300      	movs	r3, #0
 8014ece:	9303      	str	r3, [sp, #12]
 8014ed0:	9304      	str	r3, [sp, #16]
 8014ed2:	f88d 3014 	strb.w	r3, [sp, #20]
{	
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	460d      	mov	r5, r1
 8014eda:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t	delta_pos = 140, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_deltaE){
 8014ede:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8014ee0:	2f00      	cmp	r7, #0
 8014ee2:	d047      	beq.n	8014f74 <GUI_Text_deltaE_Measure+0xc8>
			if(!old_nan_deltaE){
 8014ee4:	bb33      	cbnz	r3, 8014f34 <GUI_Text_deltaE_Measure+0x88>
				TFT_SetTextColor(TFT_White);
 8014ee6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014eea:	f007 fab7 	bl	801c45c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8014eee:	2063      	movs	r0, #99	; 0x63
 8014ef0:	f007 faba 	bl	801c468 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8014ef4:	4869      	ldr	r0, [pc, #420]	; (801509c <GUI_Text_deltaE_Measure+0x1f0>)
 8014ef6:	f007 faab 	bl	801c450 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8014efa:	2163      	movs	r1, #99	; 0x63
 8014efc:	f105 031a 	add.w	r3, r5, #26
 8014f00:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8014f04:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014f08:	9100      	str	r1, [sp, #0]
 8014f0a:	b29b      	uxth	r3, r3
 8014f0c:	b292      	uxth	r2, r2
 8014f0e:	4629      	mov	r1, r5
 8014f10:	b280      	uxth	r0, r0
 8014f12:	f007 f874 	bl	801bffe <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8014f16:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014f18:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8014f1c:	f88d 300c 	strb.w	r3, [sp, #12]
 8014f20:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014f24:	aa03      	add	r2, sp, #12
 8014f26:	2303      	movs	r3, #3
 8014f28:	4629      	mov	r1, r5
 8014f2a:	b280      	uxth	r0, r0
 8014f2c:	f007 fbb2 	bl	801c694 <TFT_DisplayString>
				old_nan_deltaE = 1;
 8014f30:	2301      	movs	r3, #1
 8014f32:	7033      	strb	r3, [r6, #0]
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8014f34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014f38:	f007 fa90 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014f3c:	2063      	movs	r0, #99	; 0x63
 8014f3e:	f007 fa93 	bl	801c468 <TFT_SetBackColor>

	TFT_SetFont(&Font16EN_arch_big);
 8014f42:	4857      	ldr	r0, [pc, #348]	; (80150a0 <GUI_Text_deltaE_Measure+0x1f4>)
 8014f44:	f007 fa84 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y+6, '~'+2);
 8014f48:	1da9      	adds	r1, r5, #6
 8014f4a:	2280      	movs	r2, #128	; 0x80
 8014f4c:	b289      	uxth	r1, r1
 8014f4e:	4620      	mov	r0, r4
 8014f50:	f007 fb48 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8014f54:	4853      	ldr	r0, [pc, #332]	; (80150a4 <GUI_Text_deltaE_Measure+0x1f8>)
 8014f56:	f007 fa7b 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'E'-33);
 8014f5a:	1ca9      	adds	r1, r5, #2
 8014f5c:	f104 0012 	add.w	r0, r4, #18
 8014f60:	2224      	movs	r2, #36	; 0x24
 8014f62:	b289      	uxth	r1, r1
 8014f64:	b280      	uxth	r0, r0
 8014f66:	f007 fb3d 	bl	801c5e4 <TFT_DrawChar>

}
 8014f6a:	b007      	add	sp, #28
 8014f6c:	ecbd 8b02 	vpop	{d8}
 8014f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(old_nan_deltaE){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);}
 8014f74:	b163      	cbz	r3, 8014f90 <GUI_Text_deltaE_Measure+0xe4>
 8014f76:	f101 031a 	add.w	r3, r1, #26
 8014f7a:	f100 02fa 	add.w	r2, r0, #250	; 0xfa
 8014f7e:	2163      	movs	r1, #99	; 0x63
 8014f80:	3028      	adds	r0, #40	; 0x28
 8014f82:	9100      	str	r1, [sp, #0]
 8014f84:	b29b      	uxth	r3, r3
 8014f86:	b292      	uxth	r2, r2
 8014f88:	4629      	mov	r1, r5
 8014f8a:	b280      	uxth	r0, r0
 8014f8c:	f007 f837 	bl	801bffe <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
	old_nan_deltaE = 0;
 8014f94:	f04f 0800 	mov.w	r8, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014f98:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8014f9c:	45c1      	cmp	r9, r8
 8014f9e:	bf08      	it	eq
 8014fa0:	4618      	moveq	r0, r3
	old_nan_deltaE = 0;
 8014fa2:	f886 8000 	strb.w	r8, [r6]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014fa6:	f007 fa59 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014faa:	2063      	movs	r0, #99	; 0x63
 8014fac:	f007 fa5c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014fb0:	483a      	ldr	r0, [pc, #232]	; (801509c <GUI_Text_deltaE_Measure+0x1f0>)
 8014fb2:	f007 fa4d 	bl	801c450 <TFT_SetFont>
	Value = floor(Value*10)/10.0;
 8014fb6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014fba:	ee68 7a27 	vmul.f32	s15, s16, s15
	uint8_t	delta_pos = 140, sign = 0, number = 0;
 8014fbe:	268c      	movs	r6, #140	; 0x8c
	Value = floor(Value*10)/10.0;
 8014fc0:	ee17 0a90 	vmov	r0, s15
 8014fc4:	f7eb fad8 	bl	8000578 <__aeabi_f2d>
 8014fc8:	ec41 0b10 	vmov	d0, r0, r1
 8014fcc:	f00d fcc8 	bl	8022960 <floor>
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	4b35      	ldr	r3, [pc, #212]	; (80150a8 <GUI_Text_deltaE_Measure+0x1fc>)
 8014fd4:	ec51 0b10 	vmov	r0, r1, d0
 8014fd8:	f7eb fc4c 	bl	8000874 <__aeabi_ddiv>
 8014fdc:	f7eb fe18 	bl	8000c10 <__aeabi_d2f>
 8014fe0:	ee08 0a10 	vmov	s16, r0
	if(Value < 0){Value *= -1; sign = 1;}
 8014fe4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fec:	bf48      	it	mi
 8014fee:	eeb1 8a48 	vnegmi.f32	s16, s16
	sprintf (buffer, "%.2f", Value);
 8014ff2:	ee18 0a10 	vmov	r0, s16
	if(Value < 0){Value *= -1; sign = 1;}
 8014ff6:	bf48      	it	mi
 8014ff8:	f04f 0801 	movmi.w	r8, #1
	sprintf (buffer, "%.2f", Value);
 8014ffc:	f7eb fabc 	bl	8000578 <__aeabi_f2d>
 8015000:	4602      	mov	r2, r0
 8015002:	460b      	mov	r3, r1
 8015004:	a803      	add	r0, sp, #12
 8015006:	4929      	ldr	r1, [pc, #164]	; (80150ac <GUI_Text_deltaE_Measure+0x200>)
 8015008:	f00a fcfe 	bl	801fa08 <sprintf>
	uint32_t dec = 10;
 801500c:	220a      	movs	r2, #10
	sprintf (buffer, "%.2f", Value);
 801500e:	2304      	movs	r3, #4
		if((Value/(dec)) >= 1.0)
 8015010:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8015014:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015016:	ee07 2a10 	vmov	s14, r2
 801501a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801501e:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801502a:	db04      	blt.n	8015036 <GUI_Text_deltaE_Measure+0x18a>
			delta_pos-=23;
 801502c:	3e17      	subs	r6, #23
			number++;
 801502e:	3701      	adds	r7, #1
			dec *= 10;
 8015030:	434a      	muls	r2, r1
			delta_pos-=23;
 8015032:	b2f6      	uxtb	r6, r6
			number++;
 8015034:	b2ff      	uxtb	r7, r7
 8015036:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015038:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801503c:	d1eb      	bne.n	8015016 <GUI_Text_deltaE_Measure+0x16a>
	if(number < old_deltaE )
 801503e:	4b1c      	ldr	r3, [pc, #112]	; (80150b0 <GUI_Text_deltaE_Measure+0x204>)
 8015040:	781a      	ldrb	r2, [r3, #0]
 8015042:	42ba      	cmp	r2, r7
 8015044:	4699      	mov	r9, r3
 8015046:	d90d      	bls.n	8015064 <GUI_Text_deltaE_Measure+0x1b8>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015048:	2163      	movs	r1, #99	; 0x63
 801504a:	f105 0319 	add.w	r3, r5, #25
 801504e:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015052:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015056:	9100      	str	r1, [sp, #0]
 8015058:	b29b      	uxth	r3, r3
 801505a:	b292      	uxth	r2, r2
 801505c:	4629      	mov	r1, r5
 801505e:	b280      	uxth	r0, r0
 8015060:	f006 ffcd 	bl	801bffe <TFT_FillRectangle>
	old_deltaE = number;
 8015064:	f889 7000 	strb.w	r7, [r9]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}
 8015068:	f1b8 0f00 	cmp.w	r8, #0
 801506c:	d007      	beq.n	801507e <GUI_Text_deltaE_Measure+0x1d2>
 801506e:	f1a4 0012 	sub.w	r0, r4, #18
 8015072:	4430      	add	r0, r6
 8015074:	222d      	movs	r2, #45	; 0x2d
 8015076:	4629      	mov	r1, r5
 8015078:	b280      	uxth	r0, r0
 801507a:	f007 fab3 	bl	801c5e4 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801507e:	19a0      	adds	r0, r4, r6
 8015080:	2303      	movs	r3, #3
 8015082:	aa03      	add	r2, sp, #12
 8015084:	4629      	mov	r1, r5
 8015086:	b280      	uxth	r0, r0
 8015088:	f007 fb04 	bl	801c694 <TFT_DisplayString>
 801508c:	e752      	b.n	8014f34 <GUI_Text_deltaE_Measure+0x88>
 801508e:	bf00      	nop
 8015090:	2000022a 	.word	0x2000022a
 8015094:	2000572d 	.word	0x2000572d
 8015098:	200056f1 	.word	0x200056f1
 801509c:	200001f0 	.word	0x200001f0
 80150a0:	200001b0 	.word	0x200001b0
 80150a4:	200001e8 	.word	0x200001e8
 80150a8:	40240000 	.word	0x40240000
 80150ac:	0803145a 	.word	0x0803145a
 80150b0:	2000022e 	.word	0x2000022e

080150b4 <GUI_Text_EbEr_Measure>:
uint8_t old_num_EB = 10, old_num_ER = 10, old_nan_EBER = 0;
void GUI_Text_EbEr_Measure(uint16_t X, uint16_t Y, float ValueEB, float ValueER, uint8_t nope, uint8_t grey)
{
 80150b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150b8:	ed2d 8b04 	vpush	{d8-d9}
 80150bc:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 80150be:	4bb6      	ldr	r3, [pc, #728]	; (8015398 <GUI_Text_EbEr_Measure+0x2e4>)
 80150c0:	4eb6      	ldr	r6, [pc, #728]	; (801539c <GUI_Text_EbEr_Measure+0x2e8>)
{
 80150c2:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 80150c4:	781a      	ldrb	r2, [r3, #0]
 80150c6:	4bb6      	ldr	r3, [pc, #728]	; (80153a0 <GUI_Text_EbEr_Measure+0x2ec>)
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	429a      	cmp	r2, r3
{
 80150cc:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 80150ce:	bf1c      	itt	ne
 80150d0:	2300      	movne	r3, #0
 80150d2:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80150d4:	2300      	movs	r3, #0
 80150d6:	9303      	str	r3, [sp, #12]
 80150d8:	9304      	str	r3, [sp, #16]
 80150da:	f88d 3014 	strb.w	r3, [sp, #20]
{
 80150de:	4605      	mov	r5, r0
 80150e0:	460c      	mov	r4, r1
 80150e2:	eef0 8a40 	vmov.f32	s17, s0
 80150e6:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_EBER){
 80150ea:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 80150ec:	f1b8 0f00 	cmp.w	r8, #0
 80150f0:	d06f      	beq.n	80151d2 <GUI_Text_EbEr_Measure+0x11e>
			if(!old_nan_EBER){
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d140      	bne.n	8015178 <GUI_Text_EbEr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 80150f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80150fa:	f007 f9af 	bl	801c45c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80150fe:	2063      	movs	r0, #99	; 0x63
 8015100:	f007 f9b2 	bl	801c468 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015104:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8015108:	48a6      	ldr	r0, [pc, #664]	; (80153a4 <GUI_Text_EbEr_Measure+0x2f0>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801510a:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 801510e:	f007 f99f 	bl	801c450 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015112:	b2bf      	uxth	r7, r7
 8015114:	fa1f f989 	uxth.w	r9, r9
 8015118:	f04f 0a63 	mov.w	sl, #99	; 0x63
 801511c:	f104 031a 	add.w	r3, r4, #26
 8015120:	4638      	mov	r0, r7
 8015122:	b29b      	uxth	r3, r3
 8015124:	464a      	mov	r2, r9
 8015126:	4621      	mov	r1, r4
 8015128:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801512c:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015130:	f006 ff65 	bl	801bffe <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015134:	fa1f f888 	uxth.w	r8, r8
 8015138:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801513c:	4638      	mov	r0, r7
 801513e:	b29b      	uxth	r3, r3
 8015140:	464a      	mov	r2, r9
 8015142:	4641      	mov	r1, r8
 8015144:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015148:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801514c:	f006 ff57 	bl	801bffe <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015150:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8015152:	232d      	movs	r3, #45	; 0x2d
 8015154:	f88d 300c 	strb.w	r3, [sp, #12]
 8015158:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801515c:	aa03      	add	r2, sp, #12
 801515e:	2303      	movs	r3, #3
 8015160:	4621      	mov	r1, r4
 8015162:	4638      	mov	r0, r7
 8015164:	f007 fa96 	bl	801c694 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015168:	2303      	movs	r3, #3
 801516a:	aa03      	add	r2, sp, #12
 801516c:	4641      	mov	r1, r8
 801516e:	4638      	mov	r0, r7
 8015170:	f007 fa90 	bl	801c694 <TFT_DisplayString>
				old_nan_EBER = 1;
 8015174:	2301      	movs	r3, #1
 8015176:	7033      	strb	r3, [r6, #0]
	old_num_ER = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8015178:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801517c:	f007 f96e 	bl	801c45c <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8015180:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8015184:	4888      	ldr	r0, [pc, #544]	; (80153a8 <GUI_Text_EbEr_Measure+0x2f4>)
 8015186:	f007 f963 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 801518a:	b2b6      	uxth	r6, r6
 801518c:	f104 010c 	add.w	r1, r4, #12
 8015190:	4630      	mov	r0, r6
 8015192:	2242      	movs	r2, #66	; 0x42
 8015194:	b289      	uxth	r1, r1
 8015196:	f007 fa25 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 801519a:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 801519e:	2252      	movs	r2, #82	; 0x52
 80151a0:	b289      	uxth	r1, r1
 80151a2:	4630      	mov	r0, r6
 80151a4:	f007 fa1e 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 80151a8:	4880      	ldr	r0, [pc, #512]	; (80153ac <GUI_Text_EbEr_Measure+0x2f8>)
 80151aa:	f007 f951 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 80151ae:	1ca1      	adds	r1, r4, #2
 80151b0:	4628      	mov	r0, r5
 80151b2:	2224      	movs	r2, #36	; 0x24
 80151b4:	b289      	uxth	r1, r1
 80151b6:	f007 fa15 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'E'-33);
 80151ba:	f104 0125 	add.w	r1, r4, #37	; 0x25
 80151be:	2224      	movs	r2, #36	; 0x24
 80151c0:	b289      	uxth	r1, r1
 80151c2:	4628      	mov	r0, r5
 80151c4:	f007 fa0e 	bl	801c5e4 <TFT_DrawChar>
}
 80151c8:	b007      	add	sp, #28
 80151ca:	ecbd 8b04 	vpop	{d8-d9}
 80151ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_EBER){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80151d2:	b1eb      	cbz	r3, 8015210 <GUI_Text_EbEr_Measure+0x15c>
 80151d4:	f100 0728 	add.w	r7, r0, #40	; 0x28
 80151d8:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 80151dc:	f101 031a 	add.w	r3, r1, #26
 80151e0:	b2bf      	uxth	r7, r7
 80151e2:	fa1f f989 	uxth.w	r9, r9
 80151e6:	f04f 0b63 	mov.w	fp, #99	; 0x63
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	464a      	mov	r2, r9
 80151ee:	4638      	mov	r0, r7
 80151f0:	f8cd b000 	str.w	fp, [sp]
 80151f4:	f006 ff03 	bl	801bffe <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 80151f8:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 80151fc:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015200:	f8cd b000 	str.w	fp, [sp]
 8015204:	b29b      	uxth	r3, r3
 8015206:	464a      	mov	r2, r9
 8015208:	b289      	uxth	r1, r1
 801520a:	4638      	mov	r0, r7
 801520c:	f006 fef7 	bl	801bffe <TFT_FillRectangle>
	ValueEB = floor(ValueEB*100)/100.0;
 8015210:	ed9f 8a67 	vldr	s16, [pc, #412]	; 80153b0 <GUI_Text_EbEr_Measure+0x2fc>
 8015214:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_EBER = 0;
 8015218:	2700      	movs	r7, #0
	ValueEB = floor(ValueEB*100)/100.0;
 801521a:	ee17 0a90 	vmov	r0, s15
	old_nan_EBER = 0;
 801521e:	7037      	strb	r7, [r6, #0]
	ValueEB = floor(ValueEB*100)/100.0;
 8015220:	f7eb f9aa 	bl	8000578 <__aeabi_f2d>
 8015224:	ec41 0b10 	vmov	d0, r0, r1
 8015228:	f00d fb9a 	bl	8022960 <floor>
 801522c:	2200      	movs	r2, #0
 801522e:	4b61      	ldr	r3, [pc, #388]	; (80153b4 <GUI_Text_EbEr_Measure+0x300>)
 8015230:	ec51 0b10 	vmov	r0, r1, d0
 8015234:	f7eb fb1e 	bl	8000874 <__aeabi_ddiv>
 8015238:	f7eb fcea 	bl	8000c10 <__aeabi_d2f>
	ValueER = floor(ValueER*100)/100.0;
 801523c:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueEB = floor(ValueEB*100)/100.0;
 8015240:	ee08 0a90 	vmov	s17, r0
	ValueER = floor(ValueER*100)/100.0;
 8015244:	ee17 0a90 	vmov	r0, s15
 8015248:	f7eb f996 	bl	8000578 <__aeabi_f2d>
 801524c:	ec41 0b10 	vmov	d0, r0, r1
 8015250:	f00d fb86 	bl	8022960 <floor>
 8015254:	2200      	movs	r2, #0
 8015256:	ec51 0b10 	vmov	r0, r1, d0
 801525a:	4b56      	ldr	r3, [pc, #344]	; (80153b4 <GUI_Text_EbEr_Measure+0x300>)
 801525c:	f7eb fb0a 	bl	8000874 <__aeabi_ddiv>
 8015260:	f7eb fcd6 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015264:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueER = floor(ValueER*100)/100.0;
 8015268:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801526c:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015270:	45ba      	cmp	sl, r7
 8015272:	bf08      	it	eq
 8015274:	4618      	moveq	r0, r3
 8015276:	f007 f8f1 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801527a:	2063      	movs	r0, #99	; 0x63
 801527c:	f007 f8f4 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015280:	4848      	ldr	r0, [pc, #288]	; (80153a4 <GUI_Text_EbEr_Measure+0x2f0>)
 8015282:	f007 f8e5 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueEB);
 8015286:	ee18 0a90 	vmov	r0, s17
 801528a:	f7eb f975 	bl	8000578 <__aeabi_f2d>
 801528e:	4602      	mov	r2, r0
 8015290:	460b      	mov	r3, r1
 8015292:	a803      	add	r0, sp, #12
 8015294:	4948      	ldr	r1, [pc, #288]	; (80153b8 <GUI_Text_EbEr_Measure+0x304>)
 8015296:	f00a fbb7 	bl	801fa08 <sprintf>
	uint32_t dec = 10;
 801529a:	f04f 090a 	mov.w	r9, #10
		if((ValueEB/(dec)) >= 1.0)
 801529e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueEB);
 80152a2:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 80152a4:	2696      	movs	r6, #150	; 0x96
 80152a6:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 80152aa:	464a      	mov	r2, r9
		if((ValueEB/(dec)) >= 1.0)
 80152ac:	ee07 9a10 	vmov	s14, r9
 80152b0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80152b4:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 80152b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c0:	db05      	blt.n	80152ce <GUI_Text_EbEr_Measure+0x21a>
			delta_pos-=23;
 80152c2:	3e17      	subs	r6, #23
			number++;
 80152c4:	3701      	adds	r7, #1
			dec *= 10;
 80152c6:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 80152ca:	b2f6      	uxtb	r6, r6
			number++;
 80152cc:	b2ff      	uxtb	r7, r7
 80152ce:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80152d0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80152d4:	d1ea      	bne.n	80152ac <GUI_Text_EbEr_Measure+0x1f8>
	if(number < old_num_EB )
 80152d6:	4b39      	ldr	r3, [pc, #228]	; (80153bc <GUI_Text_EbEr_Measure+0x308>)
 80152d8:	781a      	ldrb	r2, [r3, #0]
 80152da:	42ba      	cmp	r2, r7
 80152dc:	469a      	mov	sl, r3
 80152de:	d90d      	bls.n	80152fc <GUI_Text_EbEr_Measure+0x248>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80152e0:	2163      	movs	r1, #99	; 0x63
 80152e2:	f104 0319 	add.w	r3, r4, #25
 80152e6:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80152ea:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80152ee:	9100      	str	r1, [sp, #0]
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	b292      	uxth	r2, r2
 80152f4:	4621      	mov	r1, r4
 80152f6:	b280      	uxth	r0, r0
 80152f8:	f006 fe81 	bl	801bffe <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80152fc:	19a8      	adds	r0, r5, r6
 80152fe:	2303      	movs	r3, #3
 8015300:	aa03      	add	r2, sp, #12
 8015302:	4621      	mov	r1, r4
 8015304:	b280      	uxth	r0, r0
	old_num_EB = number;
 8015306:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801530a:	f007 f9c3 	bl	801c694 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueER);
 801530e:	ee18 0a10 	vmov	r0, s16
 8015312:	f7eb f931 	bl	8000578 <__aeabi_f2d>
 8015316:	4602      	mov	r2, r0
 8015318:	460b      	mov	r3, r1
 801531a:	a803      	add	r0, sp, #12
 801531c:	4926      	ldr	r1, [pc, #152]	; (80153b8 <GUI_Text_EbEr_Measure+0x304>)
 801531e:	f00a fb73 	bl	801fa08 <sprintf>
 8015322:	2304      	movs	r3, #4
			dec *= 10;
 8015324:	220a      	movs	r2, #10
		if((ValueER/(dec)) >= 1.0)
 8015326:	ee07 9a90 	vmov	s15, r9
 801532a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801532e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015332:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801533a:	db07      	blt.n	801534c <GUI_Text_EbEr_Measure+0x298>
			delta_pos-=23;
 801533c:	3e17      	subs	r6, #23
			number++;
 801533e:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015342:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015346:	b2f6      	uxtb	r6, r6
			number++;
 8015348:	fa5f f888 	uxtb.w	r8, r8
 801534c:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 801534e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015352:	d1e8      	bne.n	8015326 <GUI_Text_EbEr_Measure+0x272>
	if(number < old_num_ER )
 8015354:	4f1a      	ldr	r7, [pc, #104]	; (80153c0 <GUI_Text_EbEr_Measure+0x30c>)
 8015356:	783b      	ldrb	r3, [r7, #0]
 8015358:	4543      	cmp	r3, r8
 801535a:	d911      	bls.n	8015380 <GUI_Text_EbEr_Measure+0x2cc>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 801535c:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015360:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015364:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015368:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801536c:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015370:	f8cd e000 	str.w	lr, [sp]
 8015374:	b29b      	uxth	r3, r3
 8015376:	b292      	uxth	r2, r2
 8015378:	b289      	uxth	r1, r1
 801537a:	b280      	uxth	r0, r0
 801537c:	f006 fe3f 	bl	801bffe <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015380:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015384:	19a8      	adds	r0, r5, r6
 8015386:	2303      	movs	r3, #3
 8015388:	aa03      	add	r2, sp, #12
 801538a:	b289      	uxth	r1, r1
 801538c:	b280      	uxth	r0, r0
	old_num_ER = number;
 801538e:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015392:	f007 f97f 	bl	801c694 <TFT_DisplayString>
 8015396:	e6ef      	b.n	8015178 <GUI_Text_EbEr_Measure+0xc4>
 8015398:	2000022a 	.word	0x2000022a
 801539c:	20005724 	.word	0x20005724
 80153a0:	200056f1 	.word	0x200056f1
 80153a4:	200001f0 	.word	0x200001f0
 80153a8:	200001b0 	.word	0x200001b0
 80153ac:	200001e8 	.word	0x200001e8
 80153b0:	42c80000 	.word	0x42c80000
 80153b4:	40590000 	.word	0x40590000
 80153b8:	0803145a 	.word	0x0803145a
 80153bc:	2000023e 	.word	0x2000023e
 80153c0:	2000023f 	.word	0x2000023f

080153c4 <GUI_Text_LbLr_Measure>:
uint8_t old_num_LB = 10, old_num_LR = 10, old_nan_LBLR = 0;
void GUI_Text_LbLr_Measure(uint16_t X, uint16_t Y, float ValueLB, float ValueLR, uint8_t nope, uint8_t grey)
{
 80153c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153c8:	ed2d 8b04 	vpush	{d8-d9}
 80153cc:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80153ce:	4bb8      	ldr	r3, [pc, #736]	; (80156b0 <GUI_Text_LbLr_Measure+0x2ec>)
 80153d0:	4eb8      	ldr	r6, [pc, #736]	; (80156b4 <GUI_Text_LbLr_Measure+0x2f0>)
{
 80153d2:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80153d4:	781a      	ldrb	r2, [r3, #0]
 80153d6:	4bb8      	ldr	r3, [pc, #736]	; (80156b8 <GUI_Text_LbLr_Measure+0x2f4>)
 80153d8:	781b      	ldrb	r3, [r3, #0]
 80153da:	429a      	cmp	r2, r3
{
 80153dc:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80153de:	bf1c      	itt	ne
 80153e0:	2300      	movne	r3, #0
 80153e2:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80153e4:	2300      	movs	r3, #0
 80153e6:	9303      	str	r3, [sp, #12]
 80153e8:	9304      	str	r3, [sp, #16]
 80153ea:	f88d 3014 	strb.w	r3, [sp, #20]
{
 80153ee:	4605      	mov	r5, r0
 80153f0:	460c      	mov	r4, r1
 80153f2:	eef0 8a40 	vmov.f32	s17, s0
 80153f6:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	if(nope) 
		{	
			if(!old_nan_LBLR){
 80153fa:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 80153fc:	f1b8 0f00 	cmp.w	r8, #0
 8015400:	d072      	beq.n	80154e8 <GUI_Text_LbLr_Measure+0x124>
			if(!old_nan_LBLR){
 8015402:	2b00      	cmp	r3, #0
 8015404:	d140      	bne.n	8015488 <GUI_Text_LbLr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 8015406:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801540a:	f007 f827 	bl	801c45c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801540e:	2063      	movs	r0, #99	; 0x63
 8015410:	f007 f82a 	bl	801c468 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015414:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8015418:	48a8      	ldr	r0, [pc, #672]	; (80156bc <GUI_Text_LbLr_Measure+0x2f8>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801541a:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 801541e:	f007 f817 	bl	801c450 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015422:	b2bf      	uxth	r7, r7
 8015424:	fa1f f989 	uxth.w	r9, r9
 8015428:	f04f 0a63 	mov.w	sl, #99	; 0x63
 801542c:	f104 031a 	add.w	r3, r4, #26
 8015430:	4638      	mov	r0, r7
 8015432:	b29b      	uxth	r3, r3
 8015434:	464a      	mov	r2, r9
 8015436:	4621      	mov	r1, r4
 8015438:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801543c:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015440:	f006 fddd 	bl	801bffe <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015444:	fa1f f888 	uxth.w	r8, r8
 8015448:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801544c:	4638      	mov	r0, r7
 801544e:	b29b      	uxth	r3, r3
 8015450:	464a      	mov	r2, r9
 8015452:	4641      	mov	r1, r8
 8015454:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015458:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801545c:	f006 fdcf 	bl	801bffe <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015460:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8015462:	232d      	movs	r3, #45	; 0x2d
 8015464:	f88d 300c 	strb.w	r3, [sp, #12]
 8015468:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801546c:	aa03      	add	r2, sp, #12
 801546e:	2303      	movs	r3, #3
 8015470:	4621      	mov	r1, r4
 8015472:	4638      	mov	r0, r7
 8015474:	f007 f90e 	bl	801c694 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015478:	2303      	movs	r3, #3
 801547a:	aa03      	add	r2, sp, #12
 801547c:	4641      	mov	r1, r8
 801547e:	4638      	mov	r0, r7
 8015480:	f007 f908 	bl	801c694 <TFT_DisplayString>
				old_nan_LBLR = 1;
 8015484:	2301      	movs	r3, #1
 8015486:	7033      	strb	r3, [r6, #0]
	old_num_LR = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetFont(&Font26EN_arch_digit);
 8015488:	488c      	ldr	r0, [pc, #560]	; (80156bc <GUI_Text_LbLr_Measure+0x2f8>)
 801548a:	f006 ffe1 	bl	801c450 <TFT_SetFont>

	TFT_SetTextColor(TFT_White);
 801548e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015492:	f006 ffe3 	bl	801c45c <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8015496:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 801549a:	4889      	ldr	r0, [pc, #548]	; (80156c0 <GUI_Text_LbLr_Measure+0x2fc>)
 801549c:	f006 ffd8 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 80154a0:	b2b6      	uxth	r6, r6
 80154a2:	f104 010c 	add.w	r1, r4, #12
 80154a6:	4630      	mov	r0, r6
 80154a8:	2242      	movs	r2, #66	; 0x42
 80154aa:	b289      	uxth	r1, r1
 80154ac:	f007 f89a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 80154b0:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 80154b4:	2252      	movs	r2, #82	; 0x52
 80154b6:	b289      	uxth	r1, r1
 80154b8:	4630      	mov	r0, r6
 80154ba:	f007 f893 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 80154be:	4881      	ldr	r0, [pc, #516]	; (80156c4 <GUI_Text_LbLr_Measure+0x300>)
 80154c0:	f006 ffc6 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 80154c4:	1ca1      	adds	r1, r4, #2
 80154c6:	4628      	mov	r0, r5
 80154c8:	222b      	movs	r2, #43	; 0x2b
 80154ca:	b289      	uxth	r1, r1
 80154cc:	f007 f88a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'L'-33);
 80154d0:	f104 0125 	add.w	r1, r4, #37	; 0x25
 80154d4:	222b      	movs	r2, #43	; 0x2b
 80154d6:	b289      	uxth	r1, r1
 80154d8:	4628      	mov	r0, r5
 80154da:	f007 f883 	bl	801c5e4 <TFT_DrawChar>
}
 80154de:	b007      	add	sp, #28
 80154e0:	ecbd 8b04 	vpop	{d8-d9}
 80154e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(old_nan_LBLR){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80154e8:	b1eb      	cbz	r3, 8015526 <GUI_Text_LbLr_Measure+0x162>
 80154ea:	f100 0728 	add.w	r7, r0, #40	; 0x28
 80154ee:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 80154f2:	f101 031a 	add.w	r3, r1, #26
 80154f6:	b2bf      	uxth	r7, r7
 80154f8:	fa1f f989 	uxth.w	r9, r9
 80154fc:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8015500:	b29b      	uxth	r3, r3
 8015502:	464a      	mov	r2, r9
 8015504:	4638      	mov	r0, r7
 8015506:	f8cd b000 	str.w	fp, [sp]
 801550a:	f006 fd78 	bl	801bffe <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 801550e:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015512:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015516:	f8cd b000 	str.w	fp, [sp]
 801551a:	b29b      	uxth	r3, r3
 801551c:	464a      	mov	r2, r9
 801551e:	b289      	uxth	r1, r1
 8015520:	4638      	mov	r0, r7
 8015522:	f006 fd6c 	bl	801bffe <TFT_FillRectangle>
	ValueLB = floor(ValueLB*100)/100.0;
 8015526:	ed9f 8a68 	vldr	s16, [pc, #416]	; 80156c8 <GUI_Text_LbLr_Measure+0x304>
 801552a:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_LBLR = 0;
 801552e:	2700      	movs	r7, #0
	ValueLB = floor(ValueLB*100)/100.0;
 8015530:	ee17 0a90 	vmov	r0, s15
	old_nan_LBLR = 0;
 8015534:	7037      	strb	r7, [r6, #0]
	ValueLB = floor(ValueLB*100)/100.0;
 8015536:	f7eb f81f 	bl	8000578 <__aeabi_f2d>
 801553a:	ec41 0b10 	vmov	d0, r0, r1
 801553e:	f00d fa0f 	bl	8022960 <floor>
 8015542:	2200      	movs	r2, #0
 8015544:	4b61      	ldr	r3, [pc, #388]	; (80156cc <GUI_Text_LbLr_Measure+0x308>)
 8015546:	ec51 0b10 	vmov	r0, r1, d0
 801554a:	f7eb f993 	bl	8000874 <__aeabi_ddiv>
 801554e:	f7eb fb5f 	bl	8000c10 <__aeabi_d2f>
	ValueLR = floor(ValueLR*100)/100.0;
 8015552:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueLB = floor(ValueLB*100)/100.0;
 8015556:	ee08 0a90 	vmov	s17, r0
	ValueLR = floor(ValueLR*100)/100.0;
 801555a:	ee17 0a90 	vmov	r0, s15
 801555e:	f7eb f80b 	bl	8000578 <__aeabi_f2d>
 8015562:	ec41 0b10 	vmov	d0, r0, r1
 8015566:	f00d f9fb 	bl	8022960 <floor>
 801556a:	2200      	movs	r2, #0
 801556c:	ec51 0b10 	vmov	r0, r1, d0
 8015570:	4b56      	ldr	r3, [pc, #344]	; (80156cc <GUI_Text_LbLr_Measure+0x308>)
 8015572:	f7eb f97f 	bl	8000874 <__aeabi_ddiv>
 8015576:	f7eb fb4b 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801557a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueLR = floor(ValueLR*100)/100.0;
 801557e:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015582:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015586:	45ba      	cmp	sl, r7
 8015588:	bf08      	it	eq
 801558a:	4618      	moveq	r0, r3
 801558c:	f006 ff66 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015590:	2063      	movs	r0, #99	; 0x63
 8015592:	f006 ff69 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015596:	4849      	ldr	r0, [pc, #292]	; (80156bc <GUI_Text_LbLr_Measure+0x2f8>)
 8015598:	f006 ff5a 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueLB);
 801559c:	ee18 0a90 	vmov	r0, s17
 80155a0:	f7ea ffea 	bl	8000578 <__aeabi_f2d>
 80155a4:	4602      	mov	r2, r0
 80155a6:	460b      	mov	r3, r1
 80155a8:	a803      	add	r0, sp, #12
 80155aa:	4949      	ldr	r1, [pc, #292]	; (80156d0 <GUI_Text_LbLr_Measure+0x30c>)
 80155ac:	f00a fa2c 	bl	801fa08 <sprintf>
	uint32_t dec = 10;
 80155b0:	f04f 090a 	mov.w	r9, #10
		if((ValueLB/(dec)) >= 1.0)
 80155b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueLB);
 80155b8:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 80155ba:	2696      	movs	r6, #150	; 0x96
 80155bc:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 80155c0:	464a      	mov	r2, r9
		if((ValueLB/(dec)) >= 1.0)
 80155c2:	ee07 9a10 	vmov	s14, r9
 80155c6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80155ca:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 80155ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80155d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155d6:	db05      	blt.n	80155e4 <GUI_Text_LbLr_Measure+0x220>
			delta_pos-=23;
 80155d8:	3e17      	subs	r6, #23
			number++;
 80155da:	3701      	adds	r7, #1
			dec *= 10;
 80155dc:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 80155e0:	b2f6      	uxtb	r6, r6
			number++;
 80155e2:	b2ff      	uxtb	r7, r7
 80155e4:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80155e6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80155ea:	d1ea      	bne.n	80155c2 <GUI_Text_LbLr_Measure+0x1fe>
	if(number < old_num_LB )
 80155ec:	4b39      	ldr	r3, [pc, #228]	; (80156d4 <GUI_Text_LbLr_Measure+0x310>)
 80155ee:	781a      	ldrb	r2, [r3, #0]
 80155f0:	42ba      	cmp	r2, r7
 80155f2:	469a      	mov	sl, r3
 80155f4:	d90d      	bls.n	8015612 <GUI_Text_LbLr_Measure+0x24e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80155f6:	2163      	movs	r1, #99	; 0x63
 80155f8:	f104 0319 	add.w	r3, r4, #25
 80155fc:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015600:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015604:	9100      	str	r1, [sp, #0]
 8015606:	b29b      	uxth	r3, r3
 8015608:	b292      	uxth	r2, r2
 801560a:	4621      	mov	r1, r4
 801560c:	b280      	uxth	r0, r0
 801560e:	f006 fcf6 	bl	801bffe <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015612:	19a8      	adds	r0, r5, r6
 8015614:	2303      	movs	r3, #3
 8015616:	aa03      	add	r2, sp, #12
 8015618:	4621      	mov	r1, r4
 801561a:	b280      	uxth	r0, r0
	old_num_LB = number;
 801561c:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015620:	f007 f838 	bl	801c694 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueLR);
 8015624:	ee18 0a10 	vmov	r0, s16
 8015628:	f7ea ffa6 	bl	8000578 <__aeabi_f2d>
 801562c:	4602      	mov	r2, r0
 801562e:	460b      	mov	r3, r1
 8015630:	a803      	add	r0, sp, #12
 8015632:	4927      	ldr	r1, [pc, #156]	; (80156d0 <GUI_Text_LbLr_Measure+0x30c>)
 8015634:	f00a f9e8 	bl	801fa08 <sprintf>
 8015638:	2304      	movs	r3, #4
			dec *= 10;
 801563a:	220a      	movs	r2, #10
		if((ValueLR/(dec)) >= 1.0)
 801563c:	ee07 9a90 	vmov	s15, r9
 8015640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015644:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015648:	eef4 7ac9 	vcmpe.f32	s15, s18
 801564c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015650:	db07      	blt.n	8015662 <GUI_Text_LbLr_Measure+0x29e>
			delta_pos-=23;
 8015652:	3e17      	subs	r6, #23
			number++;
 8015654:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015658:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 801565c:	b2f6      	uxtb	r6, r6
			number++;
 801565e:	fa5f f888 	uxtb.w	r8, r8
 8015662:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015664:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015668:	d1e8      	bne.n	801563c <GUI_Text_LbLr_Measure+0x278>
	if(number < old_num_LR )
 801566a:	4f1b      	ldr	r7, [pc, #108]	; (80156d8 <GUI_Text_LbLr_Measure+0x314>)
 801566c:	783b      	ldrb	r3, [r7, #0]
 801566e:	4543      	cmp	r3, r8
 8015670:	d911      	bls.n	8015696 <GUI_Text_LbLr_Measure+0x2d2>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8015672:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015676:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801567a:	f104 0121 	add.w	r1, r4, #33	; 0x21
 801567e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015682:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015686:	f8cd e000 	str.w	lr, [sp]
 801568a:	b29b      	uxth	r3, r3
 801568c:	b292      	uxth	r2, r2
 801568e:	b289      	uxth	r1, r1
 8015690:	b280      	uxth	r0, r0
 8015692:	f006 fcb4 	bl	801bffe <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015696:	f104 0123 	add.w	r1, r4, #35	; 0x23
 801569a:	19a8      	adds	r0, r5, r6
 801569c:	2303      	movs	r3, #3
 801569e:	aa03      	add	r2, sp, #12
 80156a0:	b289      	uxth	r1, r1
 80156a2:	b280      	uxth	r0, r0
	old_num_LR = number;
 80156a4:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80156a8:	f006 fff4 	bl	801c694 <TFT_DisplayString>
 80156ac:	e6ec      	b.n	8015488 <GUI_Text_LbLr_Measure+0xc4>
 80156ae:	bf00      	nop
 80156b0:	2000022a 	.word	0x2000022a
 80156b4:	20005727 	.word	0x20005727
 80156b8:	200056f1 	.word	0x200056f1
 80156bc:	200001f0 	.word	0x200001f0
 80156c0:	200001b0 	.word	0x200001b0
 80156c4:	200001e8 	.word	0x200001e8
 80156c8:	42c80000 	.word	0x42c80000
 80156cc:	40590000 	.word	0x40590000
 80156d0:	0803145a 	.word	0x0803145a
 80156d4:	20000241 	.word	0x20000241
 80156d8:	20000242 	.word	0x20000242

080156dc <GUI_Text_S_P_Measure>:

uint8_t old_num_SP = 10, old_nan_SP = 0;
void GUI_Text_S_P_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{
 80156dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156e0:	ed2d 8b02 	vpush	{d8}
 80156e4:	4616      	mov	r6, r2
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 80156e6:	4a59      	ldr	r2, [pc, #356]	; (801584c <GUI_Text_S_P_Measure+0x170>)
 80156e8:	4f59      	ldr	r7, [pc, #356]	; (8015850 <GUI_Text_S_P_Measure+0x174>)
{
 80156ea:	460c      	mov	r4, r1
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 80156ec:	7811      	ldrb	r1, [r2, #0]
 80156ee:	4a59      	ldr	r2, [pc, #356]	; (8015854 <GUI_Text_S_P_Measure+0x178>)
 80156f0:	7812      	ldrb	r2, [r2, #0]
 80156f2:	4291      	cmp	r1, r2
{
 80156f4:	b086      	sub	sp, #24
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 80156f6:	bf1c      	itt	ne
 80156f8:	2200      	movne	r2, #0
 80156fa:	703a      	strbne	r2, [r7, #0]
	char buffer[9] = {0};
 80156fc:	2200      	movs	r2, #0
{
 80156fe:	4605      	mov	r5, r0
 8015700:	eeb0 8a40 	vmov.f32	s16, s0
	char buffer[9] = {0};
 8015704:	9203      	str	r2, [sp, #12]
 8015706:	9204      	str	r2, [sp, #16]
 8015708:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 100, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 801570c:	2e00      	cmp	r6, #0
 801570e:	d04c      	beq.n	80157aa <GUI_Text_S_P_Measure+0xce>
		{	
			if(!old_nan_SP){
 8015710:	783b      	ldrb	r3, [r7, #0]
 8015712:	bb33      	cbnz	r3, 8015762 <GUI_Text_S_P_Measure+0x86>
				TFT_SetTextColor(TFT_White);
 8015714:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015718:	f006 fea0 	bl	801c45c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801571c:	2063      	movs	r0, #99	; 0x63
 801571e:	f006 fea3 	bl	801c468 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015722:	484d      	ldr	r0, [pc, #308]	; (8015858 <GUI_Text_S_P_Measure+0x17c>)
 8015724:	f006 fe94 	bl	801c450 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015728:	2163      	movs	r1, #99	; 0x63
 801572a:	f104 031a 	add.w	r3, r4, #26
 801572e:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8015732:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015736:	9100      	str	r1, [sp, #0]
 8015738:	b29b      	uxth	r3, r3
 801573a:	b292      	uxth	r2, r2
 801573c:	4621      	mov	r1, r4
 801573e:	b280      	uxth	r0, r0
 8015740:	f006 fc5d 	bl	801bffe <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015744:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015746:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 801574a:	f88d 300c 	strb.w	r3, [sp, #12]
 801574e:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015752:	aa03      	add	r2, sp, #12
 8015754:	2303      	movs	r3, #3
 8015756:	4621      	mov	r1, r4
 8015758:	b280      	uxth	r0, r0
 801575a:	f006 ff9b 	bl	801c694 <TFT_DisplayString>
				old_nan_SP = 1;
 801575e:	2301      	movs	r3, #1
 8015760:	703b      	strb	r3, [r7, #0]
	} 
	old_num_SP = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}	
	TFT_SetTextColor(TFT_White);
 8015762:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015766:	f006 fe79 	bl	801c45c <TFT_SetTextColor>
	TFT_SetFont(&Font26EN_arch_digit);
	TFT_DrawChar(X+22, Y+2, '/');
 801576a:	3402      	adds	r4, #2
	TFT_SetFont(&Font26EN_arch_digit);
 801576c:	483a      	ldr	r0, [pc, #232]	; (8015858 <GUI_Text_S_P_Measure+0x17c>)
 801576e:	f006 fe6f 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+22, Y+2, '/');
 8015772:	b2a4      	uxth	r4, r4
 8015774:	f105 0016 	add.w	r0, r5, #22
 8015778:	4621      	mov	r1, r4
 801577a:	222f      	movs	r2, #47	; 0x2f
 801577c:	b280      	uxth	r0, r0
 801577e:	f006 ff31 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015782:	4836      	ldr	r0, [pc, #216]	; (801585c <GUI_Text_S_P_Measure+0x180>)
 8015784:	f006 fe64 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'S'-33);
 8015788:	4621      	mov	r1, r4
 801578a:	4628      	mov	r0, r5
 801578c:	2232      	movs	r2, #50	; 0x32
 801578e:	f006 ff29 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'P'-33);
 8015792:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8015796:	222f      	movs	r2, #47	; 0x2f
 8015798:	4621      	mov	r1, r4
 801579a:	b280      	uxth	r0, r0
 801579c:	f006 ff22 	bl	801c5e4 <TFT_DrawChar>
}
 80157a0:	b006      	add	sp, #24
 80157a2:	ecbd 8b02 	vpop	{d8}
 80157a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80157aa:	f249 41d2 	movw	r1, #38098	; 0x94d2
 80157ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	bf18      	it	ne
 80157b6:	4608      	movne	r0, r1
	old_nan_SP = 0;
 80157b8:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80157ba:	f006 fe4f 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80157be:	2063      	movs	r0, #99	; 0x63
 80157c0:	f006 fe52 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80157c4:	4824      	ldr	r0, [pc, #144]	; (8015858 <GUI_Text_S_P_Measure+0x17c>)
 80157c6:	f006 fe43 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%.4f", Value);
 80157ca:	ee18 0a10 	vmov	r0, s16
 80157ce:	f7ea fed3 	bl	8000578 <__aeabi_f2d>
 80157d2:	4602      	mov	r2, r0
 80157d4:	460b      	mov	r3, r1
 80157d6:	a803      	add	r0, sp, #12
 80157d8:	4921      	ldr	r1, [pc, #132]	; (8015860 <GUI_Text_S_P_Measure+0x184>)
 80157da:	f00a f915 	bl	801fa08 <sprintf>
	uint32_t dec = 10;
 80157de:	220a      	movs	r2, #10
	sprintf (buffer, "%.4f", Value);
 80157e0:	2304      	movs	r3, #4
	uint8_t	delta_pos = 100, number = 0;
 80157e2:	2764      	movs	r7, #100	; 0x64
		if((Value/(dec)) >= 1.0)
 80157e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80157e8:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80157ea:	ee07 2a10 	vmov	s14, r2
 80157ee:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80157f2:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80157f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80157fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157fe:	db04      	blt.n	801580a <GUI_Text_S_P_Measure+0x12e>
			delta_pos-=23;
 8015800:	3f17      	subs	r7, #23
			number++;
 8015802:	3601      	adds	r6, #1
			dec *= 10;
 8015804:	434a      	muls	r2, r1
			delta_pos-=23;
 8015806:	b2ff      	uxtb	r7, r7
			number++;
 8015808:	b2f6      	uxtb	r6, r6
 801580a:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 801580c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015810:	d1eb      	bne.n	80157ea <GUI_Text_S_P_Measure+0x10e>
	if(number < old_num_SP )
 8015812:	4b14      	ldr	r3, [pc, #80]	; (8015864 <GUI_Text_S_P_Measure+0x188>)
 8015814:	781a      	ldrb	r2, [r3, #0]
 8015816:	42b2      	cmp	r2, r6
 8015818:	4698      	mov	r8, r3
 801581a:	d90d      	bls.n	8015838 <GUI_Text_S_P_Measure+0x15c>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 801581c:	2163      	movs	r1, #99	; 0x63
 801581e:	f104 0319 	add.w	r3, r4, #25
 8015822:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015826:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801582a:	9100      	str	r1, [sp, #0]
 801582c:	b29b      	uxth	r3, r3
 801582e:	b292      	uxth	r2, r2
 8015830:	4621      	mov	r1, r4
 8015832:	b280      	uxth	r0, r0
 8015834:	f006 fbe3 	bl	801bffe <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015838:	19e8      	adds	r0, r5, r7
 801583a:	2303      	movs	r3, #3
 801583c:	aa03      	add	r2, sp, #12
 801583e:	4621      	mov	r1, r4
 8015840:	b280      	uxth	r0, r0
	old_num_SP = number;
 8015842:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015846:	f006 ff25 	bl	801c694 <TFT_DisplayString>
 801584a:	e78a      	b.n	8015762 <GUI_Text_S_P_Measure+0x86>
 801584c:	2000022a 	.word	0x2000022a
 8015850:	2000572c 	.word	0x2000572c
 8015854:	200056f1 	.word	0x200056f1
 8015858:	200001f0 	.word	0x200001f0
 801585c:	200001e8 	.word	0x200001e8
 8015860:	0803145f 	.word	0x0803145f
 8015864:	20000243 	.word	0x20000243

08015868 <GUI_Text_LAB_Measure>:

uint8_t old_num_L = 10, old_num_A = 10, old_num_B = 10, old_nan = 0;
void GUI_Text_LAB_Measure(uint16_t X, uint16_t Y, int16_t ValueL, int16_t ValueA, int16_t ValueB, uint8_t nope, uint8_t grey)
{
 8015868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801586c:	b089      	sub	sp, #36	; 0x24
 801586e:	461f      	mov	r7, r3
 8015870:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8015874:	9304      	str	r3, [sp, #16]
 8015876:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801587a:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
	uint8_t	delta_pos = 180, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(ValueA <= -431 || nope){
 801587c:	f517 7fd7 	cmn.w	r7, #430	; 0x1ae
	char buffer[5] = {0};
 8015880:	f04f 0300 	mov.w	r3, #0
{
 8015884:	4604      	mov	r4, r0
 8015886:	460d      	mov	r5, r1
 8015888:	4690      	mov	r8, r2
	char buffer[5] = {0};
 801588a:	9306      	str	r3, [sp, #24]
 801588c:	f88d 301c 	strb.w	r3, [sp, #28]
	if(ValueA <= -431 || nope){
 8015890:	db03      	blt.n	801589a <GUI_Text_LAB_Measure+0x32>
 8015892:	9b03      	ldr	r3, [sp, #12]
 8015894:	2b00      	cmp	r3, #0
 8015896:	f000 80a9 	beq.w	80159ec <GUI_Text_LAB_Measure+0x184>
		if(!old_nan){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 801589a:	4b4e      	ldr	r3, [pc, #312]	; (80159d4 <GUI_Text_LAB_Measure+0x16c>)
 801589c:	781a      	ldrb	r2, [r3, #0]
 801589e:	469a      	mov	sl, r3
 80158a0:	b96a      	cbnz	r2, 80158be <GUI_Text_LAB_Measure+0x56>
 80158a2:	2163      	movs	r1, #99	; 0x63
 80158a4:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 80158a8:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80158ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80158b0:	9100      	str	r1, [sp, #0]
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	b292      	uxth	r2, r2
 80158b6:	4629      	mov	r1, r5
 80158b8:	b280      	uxth	r0, r0
 80158ba:	f006 fba0 	bl	801bffe <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 80158be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80158c2:	f006 fdcb 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80158c6:	f104 0987 	add.w	r9, r4, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 80158ca:	2063      	movs	r0, #99	; 0x63
 80158cc:	f006 fdcc 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80158d0:	fa1f f989 	uxth.w	r9, r9
 80158d4:	4840      	ldr	r0, [pc, #256]	; (80159d8 <GUI_Text_LAB_Measure+0x170>)
 80158d6:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 80158da:	f006 fdb9 	bl	801c450 <TFT_SetFont>
 80158de:	fa1f f888 	uxth.w	r8, r8
 80158e2:	222d      	movs	r2, #45	; 0x2d
 80158e4:	4629      	mov	r1, r5
 80158e6:	4648      	mov	r0, r9
 80158e8:	f104 06b9 	add.w	r6, r4, #185	; 0xb9
 80158ec:	f006 fe7a 	bl	801c5e4 <TFT_DrawChar>
 80158f0:	b2b6      	uxth	r6, r6
 80158f2:	2220      	movs	r2, #32
 80158f4:	4629      	mov	r1, r5
 80158f6:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 80158f8:	f105 0723 	add.w	r7, r5, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80158fc:	f006 fe72 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015900:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015902:	222d      	movs	r2, #45	; 0x2d
 8015904:	4629      	mov	r1, r5
 8015906:	4630      	mov	r0, r6
 8015908:	f006 fe6c 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 801590c:	4639      	mov	r1, r7
 801590e:	222d      	movs	r2, #45	; 0x2d
 8015910:	4648      	mov	r0, r9
 8015912:	f006 fe67 	bl	801c5e4 <TFT_DrawChar>
 8015916:	4639      	mov	r1, r7
 8015918:	2220      	movs	r2, #32
 801591a:	4640      	mov	r0, r8
 801591c:	f006 fe62 	bl	801c5e4 <TFT_DrawChar>
 8015920:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8015922:	f105 0746 	add.w	r7, r5, #70	; 0x46
 8015926:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015928:	222d      	movs	r2, #45	; 0x2d
 801592a:	4630      	mov	r0, r6
 801592c:	f006 fe5a 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8015930:	222d      	movs	r2, #45	; 0x2d
 8015932:	4639      	mov	r1, r7
 8015934:	4648      	mov	r0, r9
 8015936:	f006 fe55 	bl	801c5e4 <TFT_DrawChar>
 801593a:	2220      	movs	r2, #32
 801593c:	4639      	mov	r1, r7
 801593e:	4640      	mov	r0, r8
 8015940:	f006 fe50 	bl	801c5e4 <TFT_DrawChar>
 8015944:	222d      	movs	r2, #45	; 0x2d
 8015946:	4639      	mov	r1, r7
 8015948:	4630      	mov	r0, r6
 801594a:	f006 fe4b 	bl	801c5e4 <TFT_DrawChar>
		old_nan = 1;
 801594e:	2301      	movs	r3, #1
 8015950:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
		old_nan = 0;
	} 
	
	if(preGUI_screen_state != GUI_screen_state || GUI_screen_state == Color_Screen){
 8015954:	4b21      	ldr	r3, [pc, #132]	; (80159dc <GUI_Text_LAB_Measure+0x174>)
 8015956:	781a      	ldrb	r2, [r3, #0]
 8015958:	4b21      	ldr	r3, [pc, #132]	; (80159e0 <GUI_Text_LAB_Measure+0x178>)
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	4293      	cmp	r3, r2
 801595e:	d101      	bne.n	8015964 <GUI_Text_LAB_Measure+0xfc>
 8015960:	2b05      	cmp	r3, #5
 8015962:	d134      	bne.n	80159ce <GUI_Text_LAB_Measure+0x166>
			TFT_SetTextColor(TFT_White);
 8015964:	f64f 70ff 	movw	r0, #65535	; 0xffff
			TFT_SetFont(&Font26EN_arch_digit);
			TFT_DrawChar(X+17, Y, '*');
 8015968:	f104 0611 	add.w	r6, r4, #17
			TFT_SetTextColor(TFT_White);
 801596c:	f006 fd76 	bl	801c45c <TFT_SetTextColor>
			TFT_DrawChar(X+17, Y, '*');
 8015970:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_digit);
 8015972:	481c      	ldr	r0, [pc, #112]	; (80159e4 <GUI_Text_LAB_Measure+0x17c>)
			TFT_DrawChar(X+17, Y+35, '*');
 8015974:	f105 0823 	add.w	r8, r5, #35	; 0x23
			TFT_SetFont(&Font26EN_arch_digit);
 8015978:	f006 fd6a 	bl	801c450 <TFT_SetFont>
			TFT_DrawChar(X+17, Y+35, '*');
 801597c:	fa1f f888 	uxth.w	r8, r8
			TFT_DrawChar(X+17, Y, '*');
 8015980:	222a      	movs	r2, #42	; 0x2a
 8015982:	4629      	mov	r1, r5
 8015984:	4630      	mov	r0, r6
			TFT_DrawChar(X+17, Y+70, '*');
 8015986:	f105 0746 	add.w	r7, r5, #70	; 0x46
			TFT_DrawChar(X+17, Y, '*');
 801598a:	f006 fe2b 	bl	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 801598e:	b2bf      	uxth	r7, r7
			TFT_DrawChar(X+17, Y+35, '*');
 8015990:	222a      	movs	r2, #42	; 0x2a
 8015992:	4641      	mov	r1, r8
 8015994:	4630      	mov	r0, r6
 8015996:	f006 fe25 	bl	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 801599a:	222a      	movs	r2, #42	; 0x2a
 801599c:	4639      	mov	r1, r7
 801599e:	4630      	mov	r0, r6
 80159a0:	f006 fe20 	bl	801c5e4 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_big);
 80159a4:	480c      	ldr	r0, [pc, #48]	; (80159d8 <GUI_Text_LAB_Measure+0x170>)
 80159a6:	f006 fd53 	bl	801c450 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'L'-33);
 80159aa:	222b      	movs	r2, #43	; 0x2b
 80159ac:	4629      	mov	r1, r5
 80159ae:	4620      	mov	r0, r4
 80159b0:	f006 fe18 	bl	801c5e4 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_small);
 80159b4:	480c      	ldr	r0, [pc, #48]	; (80159e8 <GUI_Text_LAB_Measure+0x180>)
 80159b6:	f006 fd4b 	bl	801c450 <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'a'-65);
 80159ba:	2220      	movs	r2, #32
 80159bc:	4641      	mov	r1, r8
 80159be:	4620      	mov	r0, r4
 80159c0:	f006 fe10 	bl	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'b'-65);}
 80159c4:	2221      	movs	r2, #33	; 0x21
 80159c6:	4639      	mov	r1, r7
 80159c8:	4620      	mov	r0, r4
 80159ca:	f006 fe0b 	bl	801c5e4 <TFT_DrawChar>
}	
 80159ce:	b009      	add	sp, #36	; 0x24
 80159d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d4:	20005721 	.word	0x20005721
 80159d8:	200001e8 	.word	0x200001e8
 80159dc:	2000022a 	.word	0x2000022a
 80159e0:	200056f1 	.word	0x200056f1
 80159e4:	200001f0 	.word	0x200001f0
 80159e8:	200001f8 	.word	0x200001f8
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80159ec:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80159f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159f4:	f249 42d2 	movw	r2, #38098	; 0x94d2
 80159f8:	2800      	cmp	r0, #0
 80159fa:	bf14      	ite	ne
 80159fc:	4610      	movne	r0, r2
 80159fe:	4618      	moveq	r0, r3
 8015a00:	f006 fd2c 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015a04:	2063      	movs	r0, #99	; 0x63
 8015a06:	f006 fd2f 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015a0a:	488e      	ldr	r0, [pc, #568]	; (8015c44 <GUI_Text_LAB_Measure+0x3dc>)
 8015a0c:	f006 fd20 	bl	801c450 <TFT_SetFont>
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 8015a10:	f1b8 0f00 	cmp.w	r8, #0
 8015a14:	bfbd      	ittte	lt
 8015a16:	f1c8 0800 	rsblt	r8, r8, #0
 8015a1a:	fa0f f888 	sxthlt.w	r8, r8
 8015a1e:	2301      	movlt	r3, #1
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015a20:	9b03      	ldrge	r3, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 8015a22:	4989      	ldr	r1, [pc, #548]	; (8015c48 <GUI_Text_LAB_Measure+0x3e0>)
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015a24:	9305      	str	r3, [sp, #20]
	sprintf (buffer, "%d", ValueL);
 8015a26:	4642      	mov	r2, r8
 8015a28:	a806      	add	r0, sp, #24
 8015a2a:	f009 ffed 	bl	801fa08 <sprintf>
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015a2e:	f04f 0900 	mov.w	r9, #0
	sprintf (buffer, "%d", ValueL);
 8015a32:	f04f 0b04 	mov.w	fp, #4
	uint32_t dec = 10;
 8015a36:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015a3a:	26b4      	movs	r6, #180	; 0xb4
		if((ValueL/(dec)) >= 1.0)
 8015a3c:	fbb8 f0fa 	udiv	r0, r8, sl
 8015a40:	f7ea fd78 	bl	8000534 <__aeabi_ui2d>
 8015a44:	2200      	movs	r2, #0
 8015a46:	4b81      	ldr	r3, [pc, #516]	; (8015c4c <GUI_Text_LAB_Measure+0x3e4>)
 8015a48:	f7eb f870 	bl	8000b2c <__aeabi_dcmpge>
 8015a4c:	b140      	cbz	r0, 8015a60 <GUI_Text_LAB_Measure+0x1f8>
			dec *= 10;
 8015a4e:	230a      	movs	r3, #10
			delta_pos-=23;
 8015a50:	3e17      	subs	r6, #23
			number++;
 8015a52:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 8015a56:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8015a5a:	b2f6      	uxtb	r6, r6
			number++;
 8015a5c:	fa5f f989 	uxtb.w	r9, r9
 8015a60:	f10b 3bff 	add.w	fp, fp, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8015a64:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 8015a68:	d1e8      	bne.n	8015a3c <GUI_Text_LAB_Measure+0x1d4>
	if(number < old_num_L || old_nan == 1 )
 8015a6a:	4b79      	ldr	r3, [pc, #484]	; (8015c50 <GUI_Text_LAB_Measure+0x3e8>)
 8015a6c:	781a      	ldrb	r2, [r3, #0]
 8015a6e:	454a      	cmp	r2, r9
 8015a70:	4698      	mov	r8, r3
 8015a72:	d803      	bhi.n	8015a7c <GUI_Text_LAB_Measure+0x214>
 8015a74:	4b77      	ldr	r3, [pc, #476]	; (8015c54 <GUI_Text_LAB_Measure+0x3ec>)
 8015a76:	781b      	ldrb	r3, [r3, #0]
 8015a78:	2b01      	cmp	r3, #1
 8015a7a:	d10d      	bne.n	8015a98 <GUI_Text_LAB_Measure+0x230>
		TFT_FillRectangle(X+40, Y, X+250, Y+25, TFT_Black_Bkgr);
 8015a7c:	2163      	movs	r1, #99	; 0x63
 8015a7e:	f105 0319 	add.w	r3, r5, #25
 8015a82:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015a86:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015a8a:	9100      	str	r1, [sp, #0]
 8015a8c:	b29b      	uxth	r3, r3
 8015a8e:	b292      	uxth	r2, r2
 8015a90:	4629      	mov	r1, r5
 8015a92:	b280      	uxth	r0, r0
 8015a94:	f006 fab3 	bl	801bffe <TFT_FillRectangle>
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8015a98:	9b05      	ldr	r3, [sp, #20]
	old_num_L = number;
 8015a9a:	f888 9000 	strb.w	r9, [r8]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8015a9e:	b13b      	cbz	r3, 8015ab0 <GUI_Text_LAB_Measure+0x248>
 8015aa0:	f1a4 0012 	sub.w	r0, r4, #18
 8015aa4:	4430      	add	r0, r6
 8015aa6:	222d      	movs	r2, #45	; 0x2d
 8015aa8:	4629      	mov	r1, r5
 8015aaa:	b280      	uxth	r0, r0
 8015aac:	f006 fd9a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ab0:	19a0      	adds	r0, r4, r6
 8015ab2:	2303      	movs	r3, #3
 8015ab4:	aa06      	add	r2, sp, #24
 8015ab6:	4629      	mov	r1, r5
 8015ab8:	b280      	uxth	r0, r0
 8015aba:	f006 fdeb 	bl	801c694 <TFT_DisplayString>
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 8015abe:	2f00      	cmp	r7, #0
 8015ac0:	bfbc      	itt	lt
 8015ac2:	427f      	neglt	r7, r7
 8015ac4:	b23f      	sxthlt	r7, r7
	TFT_SetFont(&Font26EN_arch_digit);
 8015ac6:	485f      	ldr	r0, [pc, #380]	; (8015c44 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 8015ac8:	bfb4      	ite	lt
 8015aca:	f04f 0b01 	movlt.w	fp, #1
 8015ace:	f04f 0b00 	movge.w	fp, #0
	TFT_SetFont(&Font26EN_arch_digit);
 8015ad2:	f006 fcbd 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%d", ValueA);
 8015ad6:	463a      	mov	r2, r7
 8015ad8:	495b      	ldr	r1, [pc, #364]	; (8015c48 <GUI_Text_LAB_Measure+0x3e0>)
 8015ada:	a806      	add	r0, sp, #24
 8015adc:	f009 ff94 	bl	801fa08 <sprintf>
	number = 0;
 8015ae0:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueA);
 8015ae4:	f04f 0904 	mov.w	r9, #4
	dec = 10;
 8015ae8:	f04f 0a0a 	mov.w	sl, #10
	delta_pos = 180;
 8015aec:	26b4      	movs	r6, #180	; 0xb4
		if((ValueA/(dec)) >= 1.0)
 8015aee:	fbb7 f0fa 	udiv	r0, r7, sl
 8015af2:	f7ea fd1f 	bl	8000534 <__aeabi_ui2d>
 8015af6:	2200      	movs	r2, #0
 8015af8:	4b54      	ldr	r3, [pc, #336]	; (8015c4c <GUI_Text_LAB_Measure+0x3e4>)
 8015afa:	f7eb f817 	bl	8000b2c <__aeabi_dcmpge>
 8015afe:	b140      	cbz	r0, 8015b12 <GUI_Text_LAB_Measure+0x2aa>
			dec *= 10;
 8015b00:	230a      	movs	r3, #10
			delta_pos-=23;
 8015b02:	3e17      	subs	r6, #23
			number++;
 8015b04:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015b08:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8015b0c:	b2f6      	uxtb	r6, r6
			number++;
 8015b0e:	fa5f f888 	uxtb.w	r8, r8
 8015b12:	f109 39ff 	add.w	r9, r9, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 8015b16:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8015b1a:	d1e8      	bne.n	8015aee <GUI_Text_LAB_Measure+0x286>
	if(number < old_num_A || old_nan == 1 )
 8015b1c:	4b4e      	ldr	r3, [pc, #312]	; (8015c58 <GUI_Text_LAB_Measure+0x3f0>)
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	4543      	cmp	r3, r8
 8015b22:	f105 0723 	add.w	r7, r5, #35	; 0x23
 8015b26:	d803      	bhi.n	8015b30 <GUI_Text_LAB_Measure+0x2c8>
 8015b28:	4b4a      	ldr	r3, [pc, #296]	; (8015c54 <GUI_Text_LAB_Measure+0x3ec>)
 8015b2a:	781b      	ldrb	r3, [r3, #0]
 8015b2c:	2b01      	cmp	r3, #1
 8015b2e:	d10d      	bne.n	8015b4c <GUI_Text_LAB_Measure+0x2e4>
		TFT_FillRectangle(X+40, Y+35, X+250, Y+62, TFT_Black_Bkgr);
 8015b30:	2163      	movs	r1, #99	; 0x63
 8015b32:	f105 033e 	add.w	r3, r5, #62	; 0x3e
 8015b36:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015b3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015b3e:	9100      	str	r1, [sp, #0]
 8015b40:	b29b      	uxth	r3, r3
 8015b42:	b292      	uxth	r2, r2
 8015b44:	b2b9      	uxth	r1, r7
 8015b46:	b280      	uxth	r0, r0
 8015b48:	f006 fa59 	bl	801bffe <TFT_FillRectangle>
	old_num_A = number;
 8015b4c:	4b42      	ldr	r3, [pc, #264]	; (8015c58 <GUI_Text_LAB_Measure+0x3f0>)
 8015b4e:	f883 8000 	strb.w	r8, [r3]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 8015b52:	f1bb 0f00 	cmp.w	fp, #0
 8015b56:	d007      	beq.n	8015b68 <GUI_Text_LAB_Measure+0x300>
 8015b58:	f1a4 0012 	sub.w	r0, r4, #18
 8015b5c:	4430      	add	r0, r6
 8015b5e:	222d      	movs	r2, #45	; 0x2d
 8015b60:	b2b9      	uxth	r1, r7
 8015b62:	b280      	uxth	r0, r0
 8015b64:	f006 fd3e 	bl	801c5e4 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015b68:	19a0      	adds	r0, r4, r6
 8015b6a:	b2b9      	uxth	r1, r7
 8015b6c:	aa06      	add	r2, sp, #24
 8015b6e:	2303      	movs	r3, #3
 8015b70:	b280      	uxth	r0, r0
 8015b72:	f006 fd8f 	bl	801c694 <TFT_DisplayString>
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8015b76:	9b04      	ldr	r3, [sp, #16]
	TFT_SetFont(&Font26EN_arch_digit);
 8015b78:	4832      	ldr	r0, [pc, #200]	; (8015c44 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	bfbf      	itttt	lt
 8015b7e:	425b      	neglt	r3, r3
 8015b80:	b21b      	sxthlt	r3, r3
 8015b82:	9304      	strlt	r3, [sp, #16]
 8015b84:	f04f 0901 	movlt.w	r9, #1
 8015b88:	bfa8      	it	ge
 8015b8a:	f04f 0900 	movge.w	r9, #0
	TFT_SetFont(&Font26EN_arch_digit);
 8015b8e:	f006 fc5f 	bl	801c450 <TFT_SetFont>
	sprintf (buffer, "%d", ValueB);
 8015b92:	9a04      	ldr	r2, [sp, #16]
 8015b94:	492c      	ldr	r1, [pc, #176]	; (8015c48 <GUI_Text_LAB_Measure+0x3e0>)
 8015b96:	a806      	add	r0, sp, #24
 8015b98:	f009 ff36 	bl	801fa08 <sprintf>
	 dec = 10;
 8015b9c:	f04f 080a 	mov.w	r8, #10
	sprintf (buffer, "%d", ValueB);
 8015ba0:	2704      	movs	r7, #4
		delta_pos = 180;
 8015ba2:	26b4      	movs	r6, #180	; 0xb4
			dec *= 10;
 8015ba4:	46c2      	mov	sl, r8
		if(abs((ValueB/(dec))) >= 1.0)
 8015ba6:	9b04      	ldr	r3, [sp, #16]
 8015ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8015bac:	2800      	cmp	r0, #0
 8015bae:	bfb8      	it	lt
 8015bb0:	4240      	neglt	r0, r0
 8015bb2:	f7ea fccf 	bl	8000554 <__aeabi_i2d>
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	4b24      	ldr	r3, [pc, #144]	; (8015c4c <GUI_Text_LAB_Measure+0x3e4>)
 8015bba:	f7ea ffb7 	bl	8000b2c <__aeabi_dcmpge>
 8015bbe:	b138      	cbz	r0, 8015bd0 <GUI_Text_LAB_Measure+0x368>
			number++;
 8015bc0:	9b03      	ldr	r3, [sp, #12]
 8015bc2:	3301      	adds	r3, #1
			delta_pos-=23;
 8015bc4:	3e17      	subs	r6, #23
			number++;
 8015bc6:	b2db      	uxtb	r3, r3
			dec *= 10;
 8015bc8:	fb0a f808 	mul.w	r8, sl, r8
			delta_pos-=23;
 8015bcc:	b2f6      	uxtb	r6, r6
			number++;
 8015bce:	9303      	str	r3, [sp, #12]
 8015bd0:	3f01      	subs	r7, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015bd2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8015bd6:	d1e6      	bne.n	8015ba6 <GUI_Text_LAB_Measure+0x33e>
	if(number < old_num_B || old_nan == 1)
 8015bd8:	4b20      	ldr	r3, [pc, #128]	; (8015c5c <GUI_Text_LAB_Measure+0x3f4>)
 8015bda:	9903      	ldr	r1, [sp, #12]
 8015bdc:	781a      	ldrb	r2, [r3, #0]
 8015bde:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8015c54 <GUI_Text_LAB_Measure+0x3ec>
 8015be2:	428a      	cmp	r2, r1
 8015be4:	f105 0746 	add.w	r7, r5, #70	; 0x46
 8015be8:	469a      	mov	sl, r3
 8015bea:	d803      	bhi.n	8015bf4 <GUI_Text_LAB_Measure+0x38c>
 8015bec:	f898 3000 	ldrb.w	r3, [r8]
 8015bf0:	2b01      	cmp	r3, #1
 8015bf2:	d10d      	bne.n	8015c10 <GUI_Text_LAB_Measure+0x3a8>
		TFT_FillRectangle(X+40, Y+70, X+250, Y+95, TFT_Black_Bkgr);
 8015bf4:	2163      	movs	r1, #99	; 0x63
 8015bf6:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8015bfa:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015bfe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015c02:	9100      	str	r1, [sp, #0]
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	b292      	uxth	r2, r2
 8015c08:	b2b9      	uxth	r1, r7
 8015c0a:	b280      	uxth	r0, r0
 8015c0c:	f006 f9f7 	bl	801bffe <TFT_FillRectangle>
	old_num_B = number;
 8015c10:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015c14:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
 8015c18:	f1b9 0f00 	cmp.w	r9, #0
 8015c1c:	d007      	beq.n	8015c2e <GUI_Text_LAB_Measure+0x3c6>
 8015c1e:	f1a4 0012 	sub.w	r0, r4, #18
 8015c22:	4430      	add	r0, r6
 8015c24:	222d      	movs	r2, #45	; 0x2d
 8015c26:	b2b9      	uxth	r1, r7
 8015c28:	b280      	uxth	r0, r0
 8015c2a:	f006 fcdb 	bl	801c5e4 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8015c2e:	19a0      	adds	r0, r4, r6
 8015c30:	2303      	movs	r3, #3
 8015c32:	aa06      	add	r2, sp, #24
 8015c34:	b2b9      	uxth	r1, r7
 8015c36:	b280      	uxth	r0, r0
 8015c38:	f006 fd2c 	bl	801c694 <TFT_DisplayString>
		old_nan = 0;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	f888 3000 	strb.w	r3, [r8]
 8015c42:	e687      	b.n	8015954 <GUI_Text_LAB_Measure+0xec>
 8015c44:	200001f0 	.word	0x200001f0
 8015c48:	08024679 	.word	0x08024679
 8015c4c:	3ff00000 	.word	0x3ff00000
 8015c50:	20000240 	.word	0x20000240
 8015c54:	20005721 	.word	0x20005721
 8015c58:	2000023c 	.word	0x2000023c
 8015c5c:	2000023d 	.word	0x2000023d

08015c60 <GUI_Battery_Level>:
			

			

void GUI_Battery_Level(uint16_t X, uint16_t Y, double charge)
{
 8015c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c64:	b085      	sub	sp, #20
	char buffer[5] = {0};
 8015c66:	2300      	movs	r3, #0
	
	
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015c68:	f100 082d 	add.w	r8, r0, #45	; 0x2d
{
 8015c6c:	460c      	mov	r4, r1
 8015c6e:	4605      	mov	r5, r0
	char buffer[5] = {0};
 8015c70:	9302      	str	r3, [sp, #8]
 8015c72:	f88d 300c 	strb.w	r3, [sp, #12]
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015c76:	fa1f f888 	uxth.w	r8, r8
 8015c7a:	f101 031a 	add.w	r3, r1, #26
 8015c7e:	f241 3976 	movw	r9, #4982	; 0x1376
 8015c82:	310a      	adds	r1, #10
 8015c84:	300a      	adds	r0, #10
 8015c86:	b29b      	uxth	r3, r3
 8015c88:	4642      	mov	r2, r8
 8015c8a:	b289      	uxth	r1, r1
 8015c8c:	b280      	uxth	r0, r0
 8015c8e:	f8cd 9000 	str.w	r9, [sp]
{
 8015c92:	ec57 6b10 	vmov	r6, r7, d0
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015c96:	f006 f9b2 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(X+45, Y+15, X+48, Y+20, TFT_Blue_Off); //small battery rect
 8015c9a:	f104 0314 	add.w	r3, r4, #20
 8015c9e:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8015ca2:	f104 010f 	add.w	r1, r4, #15
 8015ca6:	b29b      	uxth	r3, r3
 8015ca8:	b292      	uxth	r2, r2
 8015caa:	b289      	uxth	r1, r1
 8015cac:	4640      	mov	r0, r8
 8015cae:	f8cd 9000 	str.w	r9, [sp]
 8015cb2:	f006 f9a4 	bl	801bffe <TFT_FillRectangle>

		if(charge < 12)
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	4b4c      	ldr	r3, [pc, #304]	; (8015dec <GUI_Battery_Level+0x18c>)
 8015cba:	4630      	mov	r0, r6
 8015cbc:	4639      	mov	r1, r7
 8015cbe:	f7ea ff21 	bl	8000b04 <__aeabi_dcmplt>
 8015cc2:	b188      	cbz	r0, 8015ce8 <GUI_Battery_Level+0x88>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_Red);
 8015cc4:	f104 0318 	add.w	r3, r4, #24
 8015cc8:	f105 0213 	add.w	r2, r5, #19
 8015ccc:	f104 010c 	add.w	r1, r4, #12
 8015cd0:	f105 000f 	add.w	r0, r5, #15
 8015cd4:	f44f 4e78 	mov.w	lr, #63488	; 0xf800
 8015cd8:	f8cd e000 	str.w	lr, [sp]
 8015cdc:	b29b      	uxth	r3, r3
 8015cde:	b292      	uxth	r2, r2
 8015ce0:	b289      	uxth	r1, r1
 8015ce2:	b280      	uxth	r0, r0
 8015ce4:	f006 f98b 	bl	801bffe <TFT_FillRectangle>
		}		
		if(charge >= 12)
 8015ce8:	2200      	movs	r2, #0
 8015cea:	4b40      	ldr	r3, [pc, #256]	; (8015dec <GUI_Battery_Level+0x18c>)
 8015cec:	4630      	mov	r0, r6
 8015cee:	4639      	mov	r1, r7
 8015cf0:	f7ea ff1c 	bl	8000b2c <__aeabi_dcmpge>
 8015cf4:	b188      	cbz	r0, 8015d1a <GUI_Battery_Level+0xba>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_White);
 8015cf6:	f104 0318 	add.w	r3, r4, #24
 8015cfa:	f105 0213 	add.w	r2, r5, #19
 8015cfe:	f104 010c 	add.w	r1, r4, #12
 8015d02:	f105 000f 	add.w	r0, r5, #15
 8015d06:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8015d0a:	f8cd e000 	str.w	lr, [sp]
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	b292      	uxth	r2, r2
 8015d12:	b289      	uxth	r1, r1
 8015d14:	b280      	uxth	r0, r0
 8015d16:	f006 f972 	bl	801bffe <TFT_FillRectangle>
		}		
		if(charge >= 25)
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	4b34      	ldr	r3, [pc, #208]	; (8015df0 <GUI_Battery_Level+0x190>)
 8015d1e:	4630      	mov	r0, r6
 8015d20:	4639      	mov	r1, r7
 8015d22:	f7ea ff03 	bl	8000b2c <__aeabi_dcmpge>
 8015d26:	b188      	cbz	r0, 8015d4c <GUI_Battery_Level+0xec>
		{
			TFT_FillRectangle(X+22, Y+12, X+26, Y+24, TFT_White);
 8015d28:	f104 0318 	add.w	r3, r4, #24
 8015d2c:	f105 021a 	add.w	r2, r5, #26
 8015d30:	f104 010c 	add.w	r1, r4, #12
 8015d34:	f105 0016 	add.w	r0, r5, #22
 8015d38:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8015d3c:	f8cd e000 	str.w	lr, [sp]
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	b292      	uxth	r2, r2
 8015d44:	b289      	uxth	r1, r1
 8015d46:	b280      	uxth	r0, r0
 8015d48:	f006 f959 	bl	801bffe <TFT_FillRectangle>
		}		
		if(charge >= 50)
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	4b29      	ldr	r3, [pc, #164]	; (8015df4 <GUI_Battery_Level+0x194>)
 8015d50:	4630      	mov	r0, r6
 8015d52:	4639      	mov	r1, r7
 8015d54:	f7ea feea 	bl	8000b2c <__aeabi_dcmpge>
 8015d58:	b188      	cbz	r0, 8015d7e <GUI_Battery_Level+0x11e>
		{
			TFT_FillRectangle(X+29, Y+12, X+33, Y+24, TFT_White);
 8015d5a:	f104 0318 	add.w	r3, r4, #24
 8015d5e:	f105 0221 	add.w	r2, r5, #33	; 0x21
 8015d62:	f104 010c 	add.w	r1, r4, #12
 8015d66:	f105 001d 	add.w	r0, r5, #29
 8015d6a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8015d6e:	f8cd e000 	str.w	lr, [sp]
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	b292      	uxth	r2, r2
 8015d76:	b289      	uxth	r1, r1
 8015d78:	b280      	uxth	r0, r0
 8015d7a:	f006 f940 	bl	801bffe <TFT_FillRectangle>
		}
		if(charge >= 85)
 8015d7e:	2200      	movs	r2, #0
 8015d80:	4b1d      	ldr	r3, [pc, #116]	; (8015df8 <GUI_Battery_Level+0x198>)
 8015d82:	4630      	mov	r0, r6
 8015d84:	4639      	mov	r1, r7
 8015d86:	f7ea fed1 	bl	8000b2c <__aeabi_dcmpge>
 8015d8a:	b188      	cbz	r0, 8015db0 <GUI_Battery_Level+0x150>
		{
			TFT_FillRectangle(X+36, Y+12, X+40, Y+24, TFT_White);
 8015d8c:	f104 0318 	add.w	r3, r4, #24
 8015d90:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8015d94:	f104 010c 	add.w	r1, r4, #12
 8015d98:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8015d9c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8015da0:	f8cd e000 	str.w	lr, [sp]
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	b292      	uxth	r2, r2
 8015da8:	b289      	uxth	r1, r1
 8015daa:	b280      	uxth	r0, r0
 8015dac:	f006 f927 	bl	801bffe <TFT_FillRectangle>
		}
		
		sprintf (buffer, "%.1f%%", charge);
 8015db0:	4632      	mov	r2, r6
 8015db2:	463b      	mov	r3, r7
 8015db4:	4911      	ldr	r1, [pc, #68]	; (8015dfc <GUI_Battery_Level+0x19c>)
 8015db6:	a802      	add	r0, sp, #8
 8015db8:	f009 fe26 	bl	801fa08 <sprintf>
		TFT_SetFont(&Font8);
 8015dbc:	4810      	ldr	r0, [pc, #64]	; (8015e00 <GUI_Battery_Level+0x1a0>)
 8015dbe:	f006 fb47 	bl	801c450 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8015dc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015dc6:	f006 fb49 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015dca:	2063      	movs	r0, #99	; 0x63
 8015dcc:	f006 fb4c 	bl	801c468 <TFT_SetBackColor>
		TFT_DisplayString(X+52, Y+14, (uint8_t *)buffer, LEFT_MODE);
 8015dd0:	f104 010e 	add.w	r1, r4, #14
 8015dd4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8015dd8:	2303      	movs	r3, #3
 8015dda:	aa02      	add	r2, sp, #8
 8015ddc:	b289      	uxth	r1, r1
 8015dde:	b280      	uxth	r0, r0
 8015de0:	f006 fc58 	bl	801c694 <TFT_DisplayString>

}
 8015de4:	b005      	add	sp, #20
 8015de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dea:	bf00      	nop
 8015dec:	40280000 	.word	0x40280000
 8015df0:	40390000 	.word	0x40390000
 8015df4:	40490000 	.word	0x40490000
 8015df8:	40554000 	.word	0x40554000
 8015dfc:	0803144e 	.word	0x0803144e
 8015e00:	20000218 	.word	0x20000218

08015e04 <GUI_Axes_Locus_XY>:

void GUI_Axes_Locus_XY(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8015e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015e06:	1e86      	subs	r6, r0, #2
{
 8015e08:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015e0a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015e0e:	b2b6      	uxth	r6, r6
 8015e10:	39fa      	subs	r1, #250	; 0xfa
{
 8015e12:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015e14:	4623      	mov	r3, r4
 8015e16:	4602      	mov	r2, r0
 8015e18:	9700      	str	r7, [sp, #0]
 8015e1a:	4630      	mov	r0, r6
 8015e1c:	b289      	uxth	r1, r1
 8015e1e:	f006 f8ee 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+XY2_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8015e22:	1ce3      	adds	r3, r4, #3
 8015e24:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 8015e28:	1c61      	adds	r1, r4, #1
 8015e2a:	4630      	mov	r0, r6
 8015e2c:	9700      	str	r7, [sp, #0]
 8015e2e:	b29b      	uxth	r3, r3
 8015e30:	b292      	uxth	r2, r2
 8015e32:	b289      	uxth	r1, r1
 8015e34:	f006 f8e3 	bl	801bffe <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-300/2, X_center+3, Y_center-300/2, TFT_White);
 8015e38:	f1a4 0396 	sub.w	r3, r4, #150	; 0x96
 8015e3c:	b29b      	uxth	r3, r3
 8015e3e:	1cea      	adds	r2, r5, #3
 8015e40:	1f68      	subs	r0, r5, #5
 8015e42:	4619      	mov	r1, r3
 8015e44:	9700      	str	r7, [sp, #0]
 8015e46:	b292      	uxth	r2, r2
 8015e48:	b280      	uxth	r0, r0
 8015e4a:	f006 f87b 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(X_center+295/2, Y_center-3, X_center+295/2, Y_center+6, TFT_White);
 8015e4e:	1da6      	adds	r6, r4, #6
 8015e50:	f105 0293 	add.w	r2, r5, #147	; 0x93
 8015e54:	b292      	uxth	r2, r2
 8015e56:	b2b6      	uxth	r6, r6
 8015e58:	1ee1      	subs	r1, r4, #3
 8015e5a:	4633      	mov	r3, r6
 8015e5c:	4610      	mov	r0, r2
 8015e5e:	b289      	uxth	r1, r1
 8015e60:	9700      	str	r7, [sp, #0]
 8015e62:	f006 f86f 	bl	801bf44 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8015e66:	4819      	ldr	r0, [pc, #100]	; (8015ecc <GUI_Axes_Locus_XY+0xc8>)
 8015e68:	f006 faf2 	bl	801c450 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8015e6c:	3c98      	subs	r4, #152	; 0x98
		TFT_SetTextColor(TFT_White);
 8015e6e:	4638      	mov	r0, r7
 8015e70:	f006 faf4 	bl	801c45c <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8015e74:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015e76:	2063      	movs	r0, #99	; 0x63
 8015e78:	f006 faf6 	bl	801c468 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8015e7c:	4621      	mov	r1, r4
 8015e7e:	222e      	movs	r2, #46	; 0x2e
 8015e80:	2004      	movs	r0, #4
 8015e82:	f006 fbaf 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-300/2-2, '0');
 8015e86:	4621      	mov	r1, r4
 8015e88:	2230      	movs	r2, #48	; 0x30
 8015e8a:	2000      	movs	r0, #0
 8015e8c:	f006 fbaa 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-300/2-2, '5');
 8015e90:	4621      	mov	r1, r4
 8015e92:	2235      	movs	r2, #53	; 0x35
 8015e94:	2008      	movs	r0, #8
 8015e96:	f006 fba5 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+295/2-6+4,  Y_center+6, '.');
 8015e9a:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8015e9e:	4631      	mov	r1, r6
 8015ea0:	222e      	movs	r2, #46	; 0x2e
 8015ea2:	b280      	uxth	r0, r0
 8015ea4:	f006 fb9e 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+0,  Y_center+6, '0');
 8015ea8:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 8015eac:	4631      	mov	r1, r6
 8015eae:	2230      	movs	r2, #48	; 0x30
 8015eb0:	b280      	uxth	r0, r0
 8015eb2:	f006 fb97 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8015eb6:	f105 0095 	add.w	r0, r5, #149	; 0x95
 8015eba:	2235      	movs	r2, #53	; 0x35
 8015ebc:	4631      	mov	r1, r6
 8015ebe:	b280      	uxth	r0, r0
}
 8015ec0:	b003      	add	sp, #12
 8015ec2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8015ec6:	f006 bb8d 	b.w	801c5e4 <TFT_DrawChar>
 8015eca:	bf00      	nop
 8015ecc:	20000210 	.word	0x20000210

08015ed0 <GUI_Axes_Locus_LUV>:

void GUI_Axes_Locus_LUV(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8015ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015ed2:	1e86      	subs	r6, r0, #2
{
 8015ed4:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015ed6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015eda:	b2b6      	uxth	r6, r6
 8015edc:	39ea      	subs	r1, #234	; 0xea
{
 8015ede:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8015ee0:	4623      	mov	r3, r4
 8015ee2:	4602      	mov	r2, r0
 8015ee4:	9700      	str	r7, [sp, #0]
 8015ee6:	4630      	mov	r0, r6
 8015ee8:	b289      	uxth	r1, r1
 8015eea:	f006 f888 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+LUV_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8015eee:	1ce3      	adds	r3, r4, #3
 8015ef0:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8015ef4:	1c61      	adds	r1, r4, #1
 8015ef6:	4630      	mov	r0, r6
 8015ef8:	9700      	str	r7, [sp, #0]
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	b292      	uxth	r2, r2
 8015efe:	b289      	uxth	r1, r1
 8015f00:	f006 f87d 	bl	801bffe <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-396/2, X_center+3, Y_center-396/2, TFT_White);
 8015f04:	f1a4 03c6 	sub.w	r3, r4, #198	; 0xc6
 8015f08:	b29b      	uxth	r3, r3
 8015f0a:	1cea      	adds	r2, r5, #3
 8015f0c:	1f68      	subs	r0, r5, #5
 8015f0e:	4619      	mov	r1, r3
 8015f10:	9700      	str	r7, [sp, #0]
 8015f12:	b292      	uxth	r2, r2
 8015f14:	b280      	uxth	r0, r0
 8015f16:	f006 f815 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(X_center+403/2, Y_center-3, X_center+403/2, Y_center+6, TFT_White);
 8015f1a:	1da6      	adds	r6, r4, #6
 8015f1c:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
 8015f20:	b292      	uxth	r2, r2
 8015f22:	b2b6      	uxth	r6, r6
 8015f24:	1ee1      	subs	r1, r4, #3
 8015f26:	4633      	mov	r3, r6
 8015f28:	4610      	mov	r0, r2
 8015f2a:	b289      	uxth	r1, r1
 8015f2c:	9700      	str	r7, [sp, #0]
 8015f2e:	f006 f809 	bl	801bf44 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8015f32:	4819      	ldr	r0, [pc, #100]	; (8015f98 <GUI_Axes_Locus_LUV+0xc8>)
 8015f34:	f006 fa8c 	bl	801c450 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8015f38:	3cc8      	subs	r4, #200	; 0xc8
		TFT_SetTextColor(TFT_White);
 8015f3a:	4638      	mov	r0, r7
 8015f3c:	f006 fa8e 	bl	801c45c <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8015f40:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015f42:	2063      	movs	r0, #99	; 0x63
 8015f44:	f006 fa90 	bl	801c468 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8015f48:	4621      	mov	r1, r4
 8015f4a:	222e      	movs	r2, #46	; 0x2e
 8015f4c:	2004      	movs	r0, #4
 8015f4e:	f006 fb49 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-396/2-2, '0');
 8015f52:	4621      	mov	r1, r4
 8015f54:	2230      	movs	r2, #48	; 0x30
 8015f56:	2000      	movs	r0, #0
 8015f58:	f006 fb44 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-396/2-2, '5');
 8015f5c:	4621      	mov	r1, r4
 8015f5e:	2235      	movs	r2, #53	; 0x35
 8015f60:	2008      	movs	r0, #8
 8015f62:	f006 fb3f 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+403/2-6+4,  Y_center+6, '.');
 8015f66:	f105 00c7 	add.w	r0, r5, #199	; 0xc7
 8015f6a:	4631      	mov	r1, r6
 8015f6c:	222e      	movs	r2, #46	; 0x2e
 8015f6e:	b280      	uxth	r0, r0
 8015f70:	f006 fb38 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+0,  Y_center+6, '0');
 8015f74:	f105 00c3 	add.w	r0, r5, #195	; 0xc3
 8015f78:	4631      	mov	r1, r6
 8015f7a:	2230      	movs	r2, #48	; 0x30
 8015f7c:	b280      	uxth	r0, r0
 8015f7e:	f006 fb31 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8015f82:	f105 00cb 	add.w	r0, r5, #203	; 0xcb
 8015f86:	2235      	movs	r2, #53	; 0x35
 8015f88:	4631      	mov	r1, r6
 8015f8a:	b280      	uxth	r0, r0
}
 8015f8c:	b003      	add	sp, #12
 8015f8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8015f92:	f006 bb27 	b.w	801c5e4 <TFT_DrawChar>
 8015f96:	bf00      	nop
 8015f98:	20000210 	.word	0x20000210

08015f9c <GUI_Axes_Locus_Lab>:

void GUI_Axes_Locus_Lab(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8015f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015fa0:	f100 037d 	add.w	r3, r0, #125	; 0x7d
{
 8015fa4:	b087      	sub	sp, #28
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015fa6:	b29b      	uxth	r3, r3
{
 8015fa8:	4604      	mov	r4, r0
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015faa:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
 8015fae:	460d      	mov	r5, r1
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015fb0:	9303      	str	r3, [sp, #12]
 8015fb2:	387f      	subs	r0, #127	; 0x7f
 8015fb4:	1c4b      	adds	r3, r1, #1
 8015fb6:	3901      	subs	r1, #1
 8015fb8:	9a03      	ldr	r2, [sp, #12]
 8015fba:	9700      	str	r7, [sp, #0]
 8015fbc:	b29b      	uxth	r3, r3
 8015fbe:	b289      	uxth	r1, r1
 8015fc0:	b280      	uxth	r0, r0
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 8015fc2:	f1a5 067d 	sub.w	r6, r5, #125	; 0x7d
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8015fc6:	f006 f81a 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 8015fca:	b2b6      	uxth	r6, r6
 8015fcc:	f105 037d 	add.w	r3, r5, #125	; 0x7d
 8015fd0:	1ea0      	subs	r0, r4, #2
 8015fd2:	b29b      	uxth	r3, r3
 8015fd4:	4622      	mov	r2, r4
 8015fd6:	4631      	mov	r1, r6
 8015fd8:	9700      	str	r7, [sp, #0]
 8015fda:	b280      	uxth	r0, r0
 8015fdc:	9304      	str	r3, [sp, #16]
 8015fde:	f006 f80e 	bl	801bffe <TFT_FillRectangle>
		

		TFT_SetFont(&Font6EN_arch_big);
 8015fe2:	4850      	ldr	r0, [pc, #320]	; (8016124 <GUI_Axes_Locus_Lab+0x188>)
 8015fe4:	f006 fa34 	bl	801c450 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8015fe8:	4638      	mov	r0, r7
 8015fea:	f006 fa37 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015fee:	2063      	movs	r0, #99	; 0x63
 8015ff0:	f006 fa3a 	bl	801c468 <TFT_SetBackColor>
	
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8015ff4:	f1a4 031e 	sub.w	r3, r4, #30
 8015ff8:	b29b      	uxth	r3, r3
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8015ffa:	f1a4 0b19 	sub.w	fp, r4, #25
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8015ffe:	4618      	mov	r0, r3
 8016000:	4631      	mov	r1, r6
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8016002:	fa1f fb8b 	uxth.w	fp, fp
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8016006:	222b      	movs	r2, #43	; 0x2b
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8016008:	f1a4 0a14 	sub.w	sl, r4, #20
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 801600c:	9305      	str	r3, [sp, #20]
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 801600e:	fa1f fa8a 	uxth.w	sl, sl
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8016012:	f006 fae7 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8016016:	f1a4 090e 	sub.w	r9, r4, #14
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 801601a:	4631      	mov	r1, r6
 801601c:	4658      	mov	r0, fp
 801601e:	2231      	movs	r2, #49	; 0x31
 8016020:	f006 fae0 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8016024:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8016028:	4631      	mov	r1, r6
 801602a:	4650      	mov	r0, sl
 801602c:	2232      	movs	r2, #50	; 0x32
 801602e:	f006 fad9 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8016032:	4631      	mov	r1, r6
 8016034:	4648      	mov	r0, r9
 8016036:	2238      	movs	r2, #56	; 0x38
 8016038:	f006 fad4 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(X_center-35+5,  Y_center+LAB_LOCUS_SIZEY/2-8, '-');
 801603c:	f105 0875 	add.w	r8, r5, #117	; 0x75
 8016040:	9b05      	ldr	r3, [sp, #20]
 8016042:	fa1f f888 	uxth.w	r8, r8
 8016046:	4618      	mov	r0, r3
 8016048:	4641      	mov	r1, r8
 801604a:	222d      	movs	r2, #45	; 0x2d
 801604c:	f006 faca 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+10,  Y_center+LAB_LOCUS_SIZEY/2-8, '1');
 8016050:	4641      	mov	r1, r8
 8016052:	4658      	mov	r0, fp
 8016054:	2231      	movs	r2, #49	; 0x31
 8016056:	f006 fac5 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+15,  Y_center+LAB_LOCUS_SIZEY/2-8, '2');
 801605a:	4641      	mov	r1, r8
 801605c:	4650      	mov	r0, sl
 801605e:	2232      	movs	r2, #50	; 0x32
 8016060:	f006 fac0 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8016064:	4641      	mov	r1, r8
		
		TFT_DrawChar(0,  Y_center-11, '-');
 8016066:	f1a5 080b 	sub.w	r8, r5, #11
 801606a:	fa1f f888 	uxth.w	r8, r8
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 801606e:	4648      	mov	r0, r9
 8016070:	2238      	movs	r2, #56	; 0x38
 8016072:	f006 fab7 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-11, '-');
 8016076:	4641      	mov	r1, r8
 8016078:	222d      	movs	r2, #45	; 0x2d
 801607a:	2000      	movs	r0, #0
 801607c:	f006 fab2 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(5,  Y_center-11, '1');
 8016080:	4641      	mov	r1, r8
 8016082:	2231      	movs	r2, #49	; 0x31
 8016084:	2005      	movs	r0, #5
 8016086:	f006 faad 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(10,  Y_center-11, '2');
 801608a:	4641      	mov	r1, r8
 801608c:	2232      	movs	r2, #50	; 0x32
 801608e:	200a      	movs	r0, #10
 8016090:	f006 faa8 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(16,  Y_center-11, '8');
 8016094:	4641      	mov	r1, r8
 8016096:	2238      	movs	r2, #56	; 0x38
 8016098:	2010      	movs	r0, #16
 801609a:	f006 faa3 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(260-15,  Y_center-11, '+');
 801609e:	4641      	mov	r1, r8
 80160a0:	222b      	movs	r2, #43	; 0x2b
 80160a2:	20f5      	movs	r0, #245	; 0xf5
 80160a4:	f006 fa9e 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(260-10,  Y_center-11, '1');
 80160a8:	4641      	mov	r1, r8
 80160aa:	2231      	movs	r2, #49	; 0x31
 80160ac:	20fa      	movs	r0, #250	; 0xfa
 80160ae:	f006 fa99 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(260-5,  Y_center-11, '2');
 80160b2:	4641      	mov	r1, r8
 80160b4:	2232      	movs	r2, #50	; 0x32
 80160b6:	20ff      	movs	r0, #255	; 0xff
 80160b8:	f006 fa94 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(260,  Y_center-11, '8');
		
		//		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/4, X_center+3, Y_center-LAB_LOCUS_SIZEY/4, TFT_White);
//		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/4, X_center+3, Y_center+LAB_LOCUS_SIZEY/4, TFT_White);
		
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 80160bc:	f104 0903 	add.w	r9, r4, #3
		TFT_DrawChar(260,  Y_center-11, '8');
 80160c0:	4641      	mov	r1, r8
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 80160c2:	f1a4 0805 	sub.w	r8, r4, #5
 80160c6:	fa1f f888 	uxth.w	r8, r8
 80160ca:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(260,  Y_center-11, '8');
 80160ce:	2238      	movs	r2, #56	; 0x38
 80160d0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80160d4:	f006 fa86 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 80160d8:	4633      	mov	r3, r6
 80160da:	464a      	mov	r2, r9
 80160dc:	4631      	mov	r1, r6
 80160de:	4640      	mov	r0, r8
 80160e0:	9700      	str	r7, [sp, #0]
 80160e2:	f005 ff2f 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/2, X_center+3, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);
 80160e6:	9b04      	ldr	r3, [sp, #16]
 80160e8:	9700      	str	r7, [sp, #0]
 80160ea:	464a      	mov	r2, r9
 80160ec:	4619      	mov	r1, r3
 80160ee:	4640      	mov	r0, r8
 80160f0:	f005 ff28 	bl	801bf44 <TFT_DrawLine>
	
//		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/4, Y_center-3, X_center-LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
//		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/4, Y_center-3, X_center+LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
		
		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/2+1, Y_center-3, X_center-LAB_LOCUS_SIZEX/2+1, Y_center+6, TFT_White);
 80160f4:	f1a4 027c 	sub.w	r2, r4, #124	; 0x7c
 80160f8:	1eec      	subs	r4, r5, #3
 80160fa:	3506      	adds	r5, #6
 80160fc:	b292      	uxth	r2, r2
 80160fe:	b2a4      	uxth	r4, r4
 8016100:	b2ad      	uxth	r5, r5
 8016102:	462b      	mov	r3, r5
 8016104:	4621      	mov	r1, r4
 8016106:	4610      	mov	r0, r2
 8016108:	9700      	str	r7, [sp, #0]
 801610a:	f005 ff1b 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/2, Y_center-3, X_center+LAB_LOCUS_SIZEX/2, Y_center+6, TFT_White);
 801610e:	9a03      	ldr	r2, [sp, #12]
 8016110:	9700      	str	r7, [sp, #0]
 8016112:	462b      	mov	r3, r5
 8016114:	4621      	mov	r1, r4
 8016116:	4610      	mov	r0, r2
 8016118:	f005 ff14 	bl	801bf44 <TFT_DrawLine>
}
 801611c:	b007      	add	sp, #28
 801611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016122:	bf00      	nop
 8016124:	20000210 	.word	0x20000210

08016128 <GUI_Text_CIE_XYZ>:
#include "stdio.h"
#include "GUI_Text_Elements_EN.h"


void GUI_Text_CIE_XYZ(uint16_t X, uint16_t Y)
{
 8016128:	b538      	push	{r3, r4, r5, lr}
 801612a:	4604      	mov	r4, r0
TFT_SetTextColor(TFT_White);
 801612c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016130:	460d      	mov	r5, r1
TFT_SetTextColor(TFT_White);
 8016132:	f006 f993 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016136:	2063      	movs	r0, #99	; 0x63
 8016138:	f006 f996 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801613c:	4816      	ldr	r0, [pc, #88]	; (8016198 <GUI_Text_CIE_XYZ+0x70>)
 801613e:	f006 f987 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016142:	4629      	mov	r1, r5
 8016144:	4620      	mov	r0, r4
 8016146:	2243      	movs	r2, #67	; 0x43
 8016148:	f006 fa4c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801614c:	f104 000d 	add.w	r0, r4, #13
 8016150:	4629      	mov	r1, r5
 8016152:	2249      	movs	r2, #73	; 0x49
 8016154:	b280      	uxth	r0, r0
 8016156:	f006 fa45 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801615a:	f104 001b 	add.w	r0, r4, #27
 801615e:	4629      	mov	r1, r5
 8016160:	2245      	movs	r2, #69	; 0x45
 8016162:	b280      	uxth	r0, r0
 8016164:	f006 fa3e 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'X');
 8016168:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801616c:	4629      	mov	r1, r5
 801616e:	2258      	movs	r2, #88	; 0x58
 8016170:	b280      	uxth	r0, r0
 8016172:	f006 fa37 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y, 'Y');
 8016176:	f104 0041 	add.w	r0, r4, #65	; 0x41
 801617a:	4629      	mov	r1, r5
 801617c:	2259      	movs	r2, #89	; 0x59
 801617e:	b280      	uxth	r0, r0
 8016180:	f006 fa30 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y, 'Z');
 8016184:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8016188:	4629      	mov	r1, r5
 801618a:	225a      	movs	r2, #90	; 0x5a
 801618c:	b280      	uxth	r0, r0
}
 801618e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+81, Y, 'Z');
 8016192:	f006 ba27 	b.w	801c5e4 <TFT_DrawChar>
 8016196:	bf00      	nop
 8016198:	200001b0 	.word	0x200001b0

0801619c <GUI_Text_CIE_xy_1931>:
	TFT_DrawChar(X+49, Y+1, 'x');
	TFT_DrawChar(X+72, Y+1, 'y');
}

void GUI_Text_CIE_xy_1931(uint16_t X, uint16_t Y)
{
 801619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801619e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 80161a0:	4f2c      	ldr	r7, [pc, #176]	; (8016254 <GUI_Text_CIE_xy_1931+0xb8>)
	TFT_SetTextColor(TFT_White);
 80161a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80161a6:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80161a8:	f006 f958 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80161ac:	2063      	movs	r0, #99	; 0x63
 80161ae:	f006 f95b 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80161b2:	4638      	mov	r0, r7
 80161b4:	f006 f94c 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80161b8:	4629      	mov	r1, r5
 80161ba:	4620      	mov	r0, r4
 80161bc:	2243      	movs	r2, #67	; 0x43
 80161be:	f006 fa11 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80161c2:	f104 000d 	add.w	r0, r4, #13
 80161c6:	4629      	mov	r1, r5
 80161c8:	2249      	movs	r2, #73	; 0x49
 80161ca:	b280      	uxth	r0, r0
 80161cc:	f006 fa0a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80161d0:	f104 001b 	add.w	r0, r4, #27
 80161d4:	4629      	mov	r1, r5
 80161d6:	2245      	movs	r2, #69	; 0x45
 80161d8:	b280      	uxth	r0, r0
 80161da:	f006 fa03 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 80161de:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80161e2:	4629      	mov	r1, r5
 80161e4:	222c      	movs	r2, #44	; 0x2c
 80161e6:	b280      	uxth	r0, r0
 80161e8:	f006 f9fc 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80161ec:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 80161ee:	481a      	ldr	r0, [pc, #104]	; (8016258 <GUI_Text_CIE_xy_1931+0xbc>)
 80161f0:	f006 f92e 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80161f4:	b2b6      	uxth	r6, r6
 80161f6:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80161fa:	4631      	mov	r1, r6
 80161fc:	2278      	movs	r2, #120	; 0x78
 80161fe:	b280      	uxth	r0, r0
 8016200:	f006 f9f0 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8016204:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016208:	4631      	mov	r1, r6
 801620a:	2279      	movs	r2, #121	; 0x79
 801620c:	b280      	uxth	r0, r0
 801620e:	f006 f9e9 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016212:	4638      	mov	r0, r7
 8016214:	f006 f91c 	bl	801c450 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8016218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801621c:	4629      	mov	r1, r5
 801621e:	2231      	movs	r2, #49	; 0x31
 8016220:	b280      	uxth	r0, r0
 8016222:	f006 f9df 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+133, Y, '1');
 8016226:	f104 0085 	add.w	r0, r4, #133	; 0x85
 801622a:	4629      	mov	r1, r5
 801622c:	2231      	movs	r2, #49	; 0x31
 801622e:	b280      	uxth	r0, r0
 8016230:	f006 f9d8 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8016234:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8016238:	4629      	mov	r1, r5
 801623a:	2239      	movs	r2, #57	; 0x39
 801623c:	b280      	uxth	r0, r0
 801623e:	f006 f9d1 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+121, Y, '3');
 8016242:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8016246:	4629      	mov	r1, r5
 8016248:	2233      	movs	r2, #51	; 0x33
 801624a:	b280      	uxth	r0, r0


}
 801624c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+121, Y, '3');
 8016250:	f006 b9c8 	b.w	801c5e4 <TFT_DrawChar>
 8016254:	200001b0 	.word	0x200001b0
 8016258:	200001c0 	.word	0x200001c0

0801625c <GUI_Text_CIE_xy_1964>:

void GUI_Text_CIE_xy_1964(uint16_t X, uint16_t Y)
{
 801625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801625e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8016260:	4f2c      	ldr	r7, [pc, #176]	; (8016314 <GUI_Text_CIE_xy_1964+0xb8>)
	TFT_SetTextColor(TFT_White);
 8016262:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016266:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016268:	f006 f8f8 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801626c:	2063      	movs	r0, #99	; 0x63
 801626e:	f006 f8fb 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016272:	4638      	mov	r0, r7
 8016274:	f006 f8ec 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016278:	4629      	mov	r1, r5
 801627a:	4620      	mov	r0, r4
 801627c:	2243      	movs	r2, #67	; 0x43
 801627e:	f006 f9b1 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016282:	f104 000d 	add.w	r0, r4, #13
 8016286:	4629      	mov	r1, r5
 8016288:	2249      	movs	r2, #73	; 0x49
 801628a:	b280      	uxth	r0, r0
 801628c:	f006 f9aa 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016290:	f104 001b 	add.w	r0, r4, #27
 8016294:	4629      	mov	r1, r5
 8016296:	2245      	movs	r2, #69	; 0x45
 8016298:	b280      	uxth	r0, r0
 801629a:	f006 f9a3 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 801629e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80162a2:	4629      	mov	r1, r5
 80162a4:	222c      	movs	r2, #44	; 0x2c
 80162a6:	b280      	uxth	r0, r0
 80162a8:	f006 f99c 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80162ac:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 80162ae:	481a      	ldr	r0, [pc, #104]	; (8016318 <GUI_Text_CIE_xy_1964+0xbc>)
 80162b0:	f006 f8ce 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80162b4:	b2b6      	uxth	r6, r6
 80162b6:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80162ba:	4631      	mov	r1, r6
 80162bc:	2278      	movs	r2, #120	; 0x78
 80162be:	b280      	uxth	r0, r0
 80162c0:	f006 f990 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 80162c4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80162c8:	4631      	mov	r1, r6
 80162ca:	2279      	movs	r2, #121	; 0x79
 80162cc:	b280      	uxth	r0, r0
 80162ce:	f006 f989 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80162d2:	4638      	mov	r0, r7
 80162d4:	f006 f8bc 	bl	801c450 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 80162d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80162dc:	4629      	mov	r1, r5
 80162de:	2231      	movs	r2, #49	; 0x31
 80162e0:	b280      	uxth	r0, r0
 80162e2:	f006 f97f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 80162e6:	f104 0069 	add.w	r0, r4, #105	; 0x69
 80162ea:	4629      	mov	r1, r5
 80162ec:	2239      	movs	r2, #57	; 0x39
 80162ee:	b280      	uxth	r0, r0
 80162f0:	f006 f978 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y, '6');
 80162f4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80162f8:	4629      	mov	r1, r5
 80162fa:	2236      	movs	r2, #54	; 0x36
 80162fc:	b280      	uxth	r0, r0
 80162fe:	f006 f971 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+135, Y, '4');
 8016302:	f104 0087 	add.w	r0, r4, #135	; 0x87
 8016306:	4629      	mov	r1, r5
 8016308:	2234      	movs	r2, #52	; 0x34
 801630a:	b280      	uxth	r0, r0
}
 801630c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+135, Y, '4');
 8016310:	f006 b968 	b.w	801c5e4 <TFT_DrawChar>
 8016314:	200001b0 	.word	0x200001b0
 8016318:	200001c0 	.word	0x200001c0

0801631c <GUI_Text_CIE_Luv>:



void GUI_Text_CIE_Luv(uint16_t X, uint16_t Y)
{
 801631c:	b538      	push	{r3, r4, r5, lr}
 801631e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016320:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016324:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016326:	f006 f899 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801632a:	2063      	movs	r0, #99	; 0x63
 801632c:	f006 f89c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016330:	481f      	ldr	r0, [pc, #124]	; (80163b0 <GUI_Text_CIE_Luv+0x94>)
 8016332:	f006 f88d 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016336:	4621      	mov	r1, r4
 8016338:	4628      	mov	r0, r5
 801633a:	2243      	movs	r2, #67	; 0x43
 801633c:	f006 f952 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016340:	f105 000d 	add.w	r0, r5, #13
 8016344:	4621      	mov	r1, r4
 8016346:	2249      	movs	r2, #73	; 0x49
 8016348:	b280      	uxth	r0, r0
 801634a:	f006 f94b 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801634e:	f105 001b 	add.w	r0, r5, #27
 8016352:	4621      	mov	r1, r4
 8016354:	2245      	movs	r2, #69	; 0x45
 8016356:	b280      	uxth	r0, r0
 8016358:	f006 f944 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 801635c:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016360:	4621      	mov	r1, r4
 8016362:	224c      	movs	r2, #76	; 0x4c
 8016364:	b280      	uxth	r0, r0
 8016366:	f006 f93d 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '('-1);
 801636a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801636e:	4621      	mov	r1, r4
 8016370:	2227      	movs	r2, #39	; 0x27
 8016372:	b280      	uxth	r0, r0
 8016374:	f006 f936 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+106, Y, '('-1);
 8016378:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 801637c:	4621      	mov	r1, r4
 801637e:	2227      	movs	r2, #39	; 0x27
 8016380:	b280      	uxth	r0, r0
 8016382:	f006 f92f 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'u');
 8016386:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016388:	480a      	ldr	r0, [pc, #40]	; (80163b4 <GUI_Text_CIE_Luv+0x98>)
 801638a:	f006 f861 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'u');
 801638e:	b2a4      	uxth	r4, r4
 8016390:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8016394:	4621      	mov	r1, r4
 8016396:	2275      	movs	r2, #117	; 0x75
 8016398:	b280      	uxth	r0, r0
 801639a:	f006 f923 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'v');
 801639e:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 80163a2:	4621      	mov	r1, r4
 80163a4:	2276      	movs	r2, #118	; 0x76
 80163a6:	b280      	uxth	r0, r0
}
 80163a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'v');
 80163ac:	f006 b91a 	b.w	801c5e4 <TFT_DrawChar>
 80163b0:	200001b0 	.word	0x200001b0
 80163b4:	200001c0 	.word	0x200001c0

080163b8 <GUI_Text_CIE_Lab>:

void GUI_Text_CIE_Lab(uint16_t X, uint16_t Y)
{
 80163b8:	b538      	push	{r3, r4, r5, lr}
 80163ba:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80163bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80163c0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80163c2:	f006 f84b 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80163c6:	2063      	movs	r0, #99	; 0x63
 80163c8:	f006 f84e 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80163cc:	481f      	ldr	r0, [pc, #124]	; (801644c <GUI_Text_CIE_Lab+0x94>)
 80163ce:	f006 f83f 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80163d2:	4621      	mov	r1, r4
 80163d4:	4628      	mov	r0, r5
 80163d6:	2243      	movs	r2, #67	; 0x43
 80163d8:	f006 f904 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80163dc:	f105 000d 	add.w	r0, r5, #13
 80163e0:	4621      	mov	r1, r4
 80163e2:	2249      	movs	r2, #73	; 0x49
 80163e4:	b280      	uxth	r0, r0
 80163e6:	f006 f8fd 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80163ea:	f105 001b 	add.w	r0, r5, #27
 80163ee:	4621      	mov	r1, r4
 80163f0:	2245      	movs	r2, #69	; 0x45
 80163f2:	b280      	uxth	r0, r0
 80163f4:	f006 f8f6 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 80163f8:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80163fc:	4621      	mov	r1, r4
 80163fe:	224c      	movs	r2, #76	; 0x4c
 8016400:	b280      	uxth	r0, r0
 8016402:	f006 f8ef 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '*');
 8016406:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801640a:	4621      	mov	r1, r4
 801640c:	222a      	movs	r2, #42	; 0x2a
 801640e:	b280      	uxth	r0, r0
 8016410:	f006 f8e8 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '*');
 8016414:	f105 0069 	add.w	r0, r5, #105	; 0x69
 8016418:	4621      	mov	r1, r4
 801641a:	222a      	movs	r2, #42	; 0x2a
 801641c:	b280      	uxth	r0, r0
 801641e:	f006 f8e1 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'a');
 8016422:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016424:	480a      	ldr	r0, [pc, #40]	; (8016450 <GUI_Text_CIE_Lab+0x98>)
 8016426:	f006 f813 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'a');
 801642a:	b2a4      	uxth	r4, r4
 801642c:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8016430:	4621      	mov	r1, r4
 8016432:	2261      	movs	r2, #97	; 0x61
 8016434:	b280      	uxth	r0, r0
 8016436:	f006 f8d5 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'b');
 801643a:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 801643e:	4621      	mov	r1, r4
 8016440:	2262      	movs	r2, #98	; 0x62
 8016442:	b280      	uxth	r0, r0
}
 8016444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'b');
 8016448:	f006 b8cc 	b.w	801c5e4 <TFT_DrawChar>
 801644c:	200001b0 	.word	0x200001b0
 8016450:	200001c0 	.word	0x200001c0

08016454 <GUI_Text_Bluetooth>:

void GUI_Text_Bluetooth(uint16_t X, uint16_t Y)
{
 8016454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016456:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_small);
 8016458:	4e29      	ldr	r6, [pc, #164]	; (8016500 <GUI_Text_Bluetooth+0xac>)
	TFT_SetTextColor(TFT_White);
 801645a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801645e:	460f      	mov	r7, r1
	TFT_SetTextColor(TFT_White);
 8016460:	f005 fffc 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016464:	2063      	movs	r0, #99	; 0x63
 8016466:	f005 ffff 	bl	801c468 <TFT_SetBackColor>
	TFT_DrawChar(X+13, Y+2, 'l');
 801646a:	1cbd      	adds	r5, r7, #2
	TFT_SetFont(&Font16EN_arch_small);
 801646c:	4630      	mov	r0, r6
	TFT_DrawChar(X+13, Y+2, 'l');
 801646e:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16EN_arch_small);
 8016470:	f005 ffee 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'l');
 8016474:	f104 000d 	add.w	r0, r4, #13
 8016478:	4629      	mov	r1, r5
 801647a:	226c      	movs	r2, #108	; 0x6c
 801647c:	b280      	uxth	r0, r0
 801647e:	f006 f8b1 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 't');
 8016482:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 8016486:	4629      	mov	r1, r5
 8016488:	2274      	movs	r2, #116	; 0x74
 801648a:	b280      	uxth	r0, r0
 801648c:	f006 f8aa 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y+2, 't');
 8016490:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8016494:	4629      	mov	r1, r5
 8016496:	2274      	movs	r2, #116	; 0x74
 8016498:	b280      	uxth	r0, r0
 801649a:	f006 f8a3 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 801649e:	4819      	ldr	r0, [pc, #100]	; (8016504 <GUI_Text_Bluetooth+0xb0>)
 80164a0:	f005 ffd6 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'B');
 80164a4:	4639      	mov	r1, r7
 80164a6:	2242      	movs	r2, #66	; 0x42
 80164a8:	4620      	mov	r0, r4
 80164aa:	f006 f89b 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80164ae:	4630      	mov	r0, r6
 80164b0:	f005 ffce 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+23, Y+2, 'u');
 80164b4:	f104 0017 	add.w	r0, r4, #23
 80164b8:	4629      	mov	r1, r5
 80164ba:	2275      	movs	r2, #117	; 0x75
 80164bc:	b280      	uxth	r0, r0
 80164be:	f006 f891 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+36, Y+2, 'e');
 80164c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80164c6:	4629      	mov	r1, r5
 80164c8:	2265      	movs	r2, #101	; 0x65
 80164ca:	b280      	uxth	r0, r0
 80164cc:	f006 f88a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'o');
 80164d0:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80164d4:	4629      	mov	r1, r5
 80164d6:	226f      	movs	r2, #111	; 0x6f
 80164d8:	b280      	uxth	r0, r0
 80164da:	f006 f883 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'o');
 80164de:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80164e2:	4629      	mov	r1, r5
 80164e4:	226f      	movs	r2, #111	; 0x6f
 80164e6:	b280      	uxth	r0, r0
 80164e8:	f006 f87c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y+2, 'h');
 80164ec:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 80164f0:	4629      	mov	r1, r5
 80164f2:	2268      	movs	r2, #104	; 0x68
 80164f4:	b280      	uxth	r0, r0
}
 80164f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+91, Y+2, 'h');
 80164fa:	f006 b873 	b.w	801c5e4 <TFT_DrawChar>
 80164fe:	bf00      	nop
 8016500:	200001c0 	.word	0x200001c0
 8016504:	200001b0 	.word	0x200001b0

08016508 <GUI_Text_A>:

void GUI_Text_A(uint16_t X, uint16_t Y)
{
 8016508:	b538      	push	{r3, r4, r5, lr}
 801650a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801650c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016510:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016512:	f005 ffa3 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016516:	2063      	movs	r0, #99	; 0x63
 8016518:	f005 ffa6 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801651c:	4804      	ldr	r0, [pc, #16]	; (8016530 <GUI_Text_A+0x28>)
 801651e:	f005 ff97 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'A');
 8016522:	4629      	mov	r1, r5
 8016524:	4620      	mov	r0, r4
 8016526:	2241      	movs	r2, #65	; 0x41
}
 8016528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'A');
 801652c:	f006 b85a 	b.w	801c5e4 <TFT_DrawChar>
 8016530:	200001b0 	.word	0x200001b0

08016534 <GUI_Text_D65>:

void GUI_Text_D65(uint16_t X, uint16_t Y)
{
 8016534:	b538      	push	{r3, r4, r5, lr}
 8016536:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016538:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801653c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801653e:	f005 ff8d 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016542:	2063      	movs	r0, #99	; 0x63
 8016544:	f005 ff90 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016548:	480b      	ldr	r0, [pc, #44]	; (8016578 <GUI_Text_D65+0x44>)
 801654a:	f005 ff81 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 801654e:	4629      	mov	r1, r5
 8016550:	4620      	mov	r0, r4
 8016552:	2244      	movs	r2, #68	; 0x44
 8016554:	f006 f846 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '6');
 8016558:	f104 000f 	add.w	r0, r4, #15
 801655c:	4629      	mov	r1, r5
 801655e:	2236      	movs	r2, #54	; 0x36
 8016560:	b280      	uxth	r0, r0
 8016562:	f006 f83f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, '5');
 8016566:	f104 0020 	add.w	r0, r4, #32
 801656a:	4629      	mov	r1, r5
 801656c:	2235      	movs	r2, #53	; 0x35
 801656e:	b280      	uxth	r0, r0
}
 8016570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+32, Y, '5');
 8016574:	f006 b836 	b.w	801c5e4 <TFT_DrawChar>
 8016578:	200001b0 	.word	0x200001b0

0801657c <GUI_Text_C>:

void GUI_Text_C(uint16_t X, uint16_t Y)
{
 801657c:	b538      	push	{r3, r4, r5, lr}
 801657e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016580:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016584:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016586:	f005 ff69 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801658a:	2063      	movs	r0, #99	; 0x63
 801658c:	f005 ff6c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016590:	4804      	ldr	r0, [pc, #16]	; (80165a4 <GUI_Text_C+0x28>)
 8016592:	f005 ff5d 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016596:	4629      	mov	r1, r5
 8016598:	4620      	mov	r0, r4
 801659a:	2243      	movs	r2, #67	; 0x43
}
 801659c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'C');
 80165a0:	f006 b820 	b.w	801c5e4 <TFT_DrawChar>
 80165a4:	200001b0 	.word	0x200001b0

080165a8 <GUI_Text_D50>:

void GUI_Text_D50(uint16_t X, uint16_t Y)
{
 80165a8:	b538      	push	{r3, r4, r5, lr}
 80165aa:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80165ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80165b0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80165b2:	f005 ff53 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80165b6:	2063      	movs	r0, #99	; 0x63
 80165b8:	f005 ff56 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80165bc:	480b      	ldr	r0, [pc, #44]	; (80165ec <GUI_Text_D50+0x44>)
 80165be:	f005 ff47 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 80165c2:	4629      	mov	r1, r5
 80165c4:	4620      	mov	r0, r4
 80165c6:	2244      	movs	r2, #68	; 0x44
 80165c8:	f006 f80c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 80165cc:	f104 000f 	add.w	r0, r4, #15
 80165d0:	4629      	mov	r1, r5
 80165d2:	2235      	movs	r2, #53	; 0x35
 80165d4:	b280      	uxth	r0, r0
 80165d6:	f006 f805 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '0');
 80165da:	f104 001f 	add.w	r0, r4, #31
 80165de:	4629      	mov	r1, r5
 80165e0:	2230      	movs	r2, #48	; 0x30
 80165e2:	b280      	uxth	r0, r0
}
 80165e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '0');
 80165e8:	f005 bffc 	b.w	801c5e4 <TFT_DrawChar>
 80165ec:	200001b0 	.word	0x200001b0

080165f0 <GUI_Text_D55>:

void GUI_Text_D55(uint16_t X, uint16_t Y)
{
 80165f0:	b538      	push	{r3, r4, r5, lr}
 80165f2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80165f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80165f8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80165fa:	f005 ff2f 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80165fe:	2063      	movs	r0, #99	; 0x63
 8016600:	f005 ff32 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016604:	480b      	ldr	r0, [pc, #44]	; (8016634 <GUI_Text_D55+0x44>)
 8016606:	f005 ff23 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 801660a:	4629      	mov	r1, r5
 801660c:	4620      	mov	r0, r4
 801660e:	2244      	movs	r2, #68	; 0x44
 8016610:	f005 ffe8 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8016614:	f104 000f 	add.w	r0, r4, #15
 8016618:	4629      	mov	r1, r5
 801661a:	2235      	movs	r2, #53	; 0x35
 801661c:	b280      	uxth	r0, r0
 801661e:	f005 ffe1 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8016622:	f104 001f 	add.w	r0, r4, #31
 8016626:	4629      	mov	r1, r5
 8016628:	2235      	movs	r2, #53	; 0x35
 801662a:	b280      	uxth	r0, r0
}
 801662c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016630:	f005 bfd8 	b.w	801c5e4 <TFT_DrawChar>
 8016634:	200001b0 	.word	0x200001b0

08016638 <GUI_Text_D75>:

void GUI_Text_D75(uint16_t X, uint16_t Y)
{
 8016638:	b538      	push	{r3, r4, r5, lr}
 801663a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801663c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016640:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016642:	f005 ff0b 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016646:	2063      	movs	r0, #99	; 0x63
 8016648:	f005 ff0e 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801664c:	480b      	ldr	r0, [pc, #44]	; (801667c <GUI_Text_D75+0x44>)
 801664e:	f005 feff 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016652:	4629      	mov	r1, r5
 8016654:	4620      	mov	r0, r4
 8016656:	2244      	movs	r2, #68	; 0x44
 8016658:	f005 ffc4 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '7');
 801665c:	f104 000f 	add.w	r0, r4, #15
 8016660:	4629      	mov	r1, r5
 8016662:	2237      	movs	r2, #55	; 0x37
 8016664:	b280      	uxth	r0, r0
 8016666:	f005 ffbd 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 801666a:	f104 001f 	add.w	r0, r4, #31
 801666e:	4629      	mov	r1, r5
 8016670:	2235      	movs	r2, #53	; 0x35
 8016672:	b280      	uxth	r0, r0
}
 8016674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016678:	f005 bfb4 	b.w	801c5e4 <TFT_DrawChar>
 801667c:	200001b0 	.word	0x200001b0

08016680 <GUI_Text_CIE_xy>:


void GUI_Text_CIE_xy(uint16_t X, uint16_t Y)
{
 8016680:	b538      	push	{r3, r4, r5, lr}
 8016682:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016684:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016688:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801668a:	f005 fee7 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801668e:	2063      	movs	r0, #99	; 0x63
 8016690:	f005 feea 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016694:	4815      	ldr	r0, [pc, #84]	; (80166ec <GUI_Text_CIE_xy+0x6c>)
 8016696:	f005 fedb 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801669a:	4621      	mov	r1, r4
 801669c:	4628      	mov	r0, r5
 801669e:	2243      	movs	r2, #67	; 0x43
 80166a0:	f005 ffa0 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80166a4:	f105 000d 	add.w	r0, r5, #13
 80166a8:	4621      	mov	r1, r4
 80166aa:	2249      	movs	r2, #73	; 0x49
 80166ac:	b280      	uxth	r0, r0
 80166ae:	f005 ff99 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80166b2:	f105 001b 	add.w	r0, r5, #27
 80166b6:	4621      	mov	r1, r4
 80166b8:	2245      	movs	r2, #69	; 0x45
 80166ba:	b280      	uxth	r0, r0
 80166bc:	f005 ff92 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80166c0:	3401      	adds	r4, #1
	TFT_SetFont(&Font16EN_arch_small);
 80166c2:	480b      	ldr	r0, [pc, #44]	; (80166f0 <GUI_Text_CIE_xy+0x70>)
 80166c4:	f005 fec4 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80166c8:	b2a4      	uxth	r4, r4
 80166ca:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80166ce:	4621      	mov	r1, r4
 80166d0:	2278      	movs	r2, #120	; 0x78
 80166d2:	b280      	uxth	r0, r0
 80166d4:	f005 ff86 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+61, Y+1, 'y');
 80166d8:	f105 003d 	add.w	r0, r5, #61	; 0x3d
 80166dc:	4621      	mov	r1, r4
 80166de:	2279      	movs	r2, #121	; 0x79
 80166e0:	b280      	uxth	r0, r0
}
 80166e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+61, Y+1, 'y');
 80166e6:	f005 bf7d 	b.w	801c5e4 <TFT_DrawChar>
 80166ea:	bf00      	nop
 80166ec:	200001b0 	.word	0x200001b0
 80166f0:	200001c0 	.word	0x200001c0

080166f4 <GUI_Text_CRI>:

void GUI_Text_CRI(uint16_t X, uint16_t Y)
{
 80166f4:	b538      	push	{r3, r4, r5, lr}
 80166f6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80166f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80166fc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80166fe:	f005 fead 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016702:	2063      	movs	r0, #99	; 0x63
 8016704:	f005 feb0 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016708:	480b      	ldr	r0, [pc, #44]	; (8016738 <GUI_Text_CRI+0x44>)
 801670a:	f005 fea1 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+27, Y, 'I');
 801670e:	f104 001b 	add.w	r0, r4, #27
 8016712:	4629      	mov	r1, r5
 8016714:	2249      	movs	r2, #73	; 0x49
 8016716:	b280      	uxth	r0, r0
 8016718:	f005 ff64 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'C');
 801671c:	4629      	mov	r1, r5
 801671e:	4620      	mov	r0, r4
 8016720:	2243      	movs	r2, #67	; 0x43
 8016722:	f005 ff5f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'R');
 8016726:	f104 000d 	add.w	r0, r4, #13
 801672a:	4629      	mov	r1, r5
 801672c:	2252      	movs	r2, #82	; 0x52
 801672e:	b280      	uxth	r0, r0
}
 8016730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+13, Y, 'R');
 8016734:	f005 bf56 	b.w	801c5e4 <TFT_DrawChar>
 8016738:	200001b0 	.word	0x200001b0

0801673c <GUI_Text_CQS>:

void GUI_Text_CQS(uint16_t X, uint16_t Y)
{
 801673c:	b538      	push	{r3, r4, r5, lr}
 801673e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016740:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016744:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016746:	f005 fe89 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801674a:	2063      	movs	r0, #99	; 0x63
 801674c:	f005 fe8c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016750:	480b      	ldr	r0, [pc, #44]	; (8016780 <GUI_Text_CQS+0x44>)
 8016752:	f005 fe7d 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016756:	4629      	mov	r1, r5
 8016758:	4620      	mov	r0, r4
 801675a:	2243      	movs	r2, #67	; 0x43
 801675c:	f005 ff42 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'Q');
 8016760:	f104 000d 	add.w	r0, r4, #13
 8016764:	4629      	mov	r1, r5
 8016766:	2251      	movs	r2, #81	; 0x51
 8016768:	b280      	uxth	r0, r0
 801676a:	f005 ff3b 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'S');
 801676e:	f104 001c 	add.w	r0, r4, #28
 8016772:	4629      	mov	r1, r5
 8016774:	2253      	movs	r2, #83	; 0x53
 8016776:	b280      	uxth	r0, r0
}
 8016778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'S');
 801677c:	f005 bf32 	b.w	801c5e4 <TFT_DrawChar>
 8016780:	200001b0 	.word	0x200001b0

08016784 <GUI_Text_SP>:



void GUI_Text_SP(uint16_t X, uint16_t Y)
{
 8016784:	b538      	push	{r3, r4, r5, lr}
 8016786:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016788:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801678c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801678e:	f005 fe65 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016792:	2063      	movs	r0, #99	; 0x63
 8016794:	f005 fe68 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016798:	480b      	ldr	r0, [pc, #44]	; (80167c8 <GUI_Text_SP+0x44>)
 801679a:	f005 fe59 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+13, Y, '/');
 801679e:	f104 000d 	add.w	r0, r4, #13
 80167a2:	4629      	mov	r1, r5
 80167a4:	222f      	movs	r2, #47	; 0x2f
 80167a6:	b280      	uxth	r0, r0
 80167a8:	f005 ff1c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'S');
 80167ac:	4629      	mov	r1, r5
 80167ae:	4620      	mov	r0, r4
 80167b0:	2253      	movs	r2, #83	; 0x53
 80167b2:	f005 ff17 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'P');
 80167b6:	f104 001c 	add.w	r0, r4, #28
 80167ba:	4629      	mov	r1, r5
 80167bc:	2250      	movs	r2, #80	; 0x50
 80167be:	b280      	uxth	r0, r0
}
 80167c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'P');
 80167c4:	f005 bf0e 	b.w	801c5e4 <TFT_DrawChar>
 80167c8:	200001b0 	.word	0x200001b0

080167cc <GUI_Text_lambda_d>:



void GUI_Text_lambda_d(uint16_t X, uint16_t Y)
{
 80167cc:	b538      	push	{r3, r4, r5, lr}
 80167ce:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80167d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80167d4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80167d6:	f005 fe41 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80167da:	2063      	movs	r0, #99	; 0x63
 80167dc:	f005 fe44 	bl	801c468 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 80167e0:	480a      	ldr	r0, [pc, #40]	; (801680c <GUI_Text_lambda_d+0x40>)
 80167e2:	f005 fe35 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 80167e6:	4629      	mov	r1, r5
 80167e8:	227f      	movs	r2, #127	; 0x7f
 80167ea:	4620      	mov	r0, r4
 80167ec:	f005 fefa 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80167f0:	4807      	ldr	r0, [pc, #28]	; (8016810 <GUI_Text_lambda_d+0x44>)
 80167f2:	f005 fe2d 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'd');
 80167f6:	1de9      	adds	r1, r5, #7
 80167f8:	f104 000f 	add.w	r0, r4, #15
 80167fc:	2264      	movs	r2, #100	; 0x64
 80167fe:	b289      	uxth	r1, r1
 8016800:	b280      	uxth	r0, r0
}
 8016802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'd');
 8016806:	f005 beed 	b.w	801c5e4 <TFT_DrawChar>
 801680a:	bf00      	nop
 801680c:	200001b0 	.word	0x200001b0
 8016810:	200001c0 	.word	0x200001c0

08016814 <GUI_Text_V_lambda>:
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+15, Y+7, 'c');
}

void GUI_Text_V_lambda(uint16_t X, uint16_t Y)
{
 8016814:	b538      	push	{r3, r4, r5, lr}
 8016816:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016818:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801681c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801681e:	f005 fe1d 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016822:	2063      	movs	r0, #99	; 0x63
 8016824:	f005 fe20 	bl	801c468 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8016828:	4824      	ldr	r0, [pc, #144]	; (80168bc <GUI_Text_V_lambda+0xa8>)
 801682a:	f005 fe11 	bl	801c450 <TFT_SetFont>

	TFT_DrawChar(X+13, Y, '(');
 801682e:	f104 000d 	add.w	r0, r4, #13
 8016832:	4629      	mov	r1, r5
 8016834:	2228      	movs	r2, #40	; 0x28
 8016836:	b280      	uxth	r0, r0
 8016838:	f005 fed4 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y, ')');
 801683c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016840:	4629      	mov	r1, r5
 8016842:	2229      	movs	r2, #41	; 0x29
 8016844:	b280      	uxth	r0, r0
 8016846:	f005 fecd 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'V');
 801684a:	4629      	mov	r1, r5
 801684c:	4620      	mov	r0, r4
 801684e:	2256      	movs	r2, #86	; 0x56
 8016850:	f005 fec8 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y, '~'+1);
 8016854:	f104 001a 	add.w	r0, r4, #26
 8016858:	4629      	mov	r1, r5
 801685a:	227f      	movs	r2, #127	; 0x7f
 801685c:	b280      	uxth	r0, r0
 801685e:	f005 fec1 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y, '/');
 8016862:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8016866:	4629      	mov	r1, r5
 8016868:	222f      	movs	r2, #47	; 0x2f
 801686a:	b280      	uxth	r0, r0
 801686c:	f005 feba 	bl	801c5e4 <TFT_DrawChar>
		
	TFT_DrawChar(X+80, Y, '('-1);
 8016870:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016874:	4629      	mov	r1, r5
 8016876:	2227      	movs	r2, #39	; 0x27
 8016878:	b280      	uxth	r0, r0
 801687a:	f005 feb3 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y, '(');
 801687e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8016882:	4629      	mov	r1, r5
 8016884:	2228      	movs	r2, #40	; 0x28
 8016886:	b280      	uxth	r0, r0
 8016888:	f005 feac 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+117, Y, ')');
 801688c:	f104 0075 	add.w	r0, r4, #117	; 0x75
 8016890:	4629      	mov	r1, r5
 8016892:	2229      	movs	r2, #41	; 0x29
 8016894:	b280      	uxth	r0, r0
 8016896:	f005 fea5 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+68, Y, 'V');
 801689a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801689e:	4629      	mov	r1, r5
 80168a0:	2256      	movs	r2, #86	; 0x56
 80168a2:	b280      	uxth	r0, r0
 80168a4:	f005 fe9e 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, '~'+1);
 80168a8:	f104 0067 	add.w	r0, r4, #103	; 0x67
 80168ac:	4629      	mov	r1, r5
 80168ae:	227f      	movs	r2, #127	; 0x7f
 80168b0:	b280      	uxth	r0, r0
		
}
 80168b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, '~'+1);
 80168b6:	f005 be95 	b.w	801c5e4 <TFT_DrawChar>
 80168ba:	bf00      	nop
 80168bc:	200001b0 	.word	0x200001b0

080168c0 <GUI_Text_deltaE>:

void GUI_Text_deltaE(uint16_t X, uint16_t Y)
{
 80168c0:	b538      	push	{r3, r4, r5, lr}
 80168c2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80168c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80168c8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80168ca:	f005 fdc7 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80168ce:	2063      	movs	r0, #99	; 0x63
 80168d0:	f005 fdca 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80168d4:	4808      	ldr	r0, [pc, #32]	; (80168f8 <GUI_Text_deltaE+0x38>)
 80168d6:	f005 fdbb 	bl	801c450 <TFT_SetFont>

	TFT_DrawChar(X, Y, '~'+2);
 80168da:	4629      	mov	r1, r5
 80168dc:	4620      	mov	r0, r4
 80168de:	2280      	movs	r2, #128	; 0x80
 80168e0:	f005 fe80 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+14, Y, 'E');
 80168e4:	f104 000e 	add.w	r0, r4, #14
 80168e8:	4629      	mov	r1, r5
 80168ea:	2245      	movs	r2, #69	; 0x45
 80168ec:	b280      	uxth	r0, r0
}
 80168ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+14, Y, 'E');
 80168f2:	f005 be77 	b.w	801c5e4 <TFT_DrawChar>
 80168f6:	bf00      	nop
 80168f8:	200001b0 	.word	0x200001b0

080168fc <GUI_TextEn_umol>:

void GUI_TextEn_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 80168fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016900:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016902:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016906:	4616      	mov	r6, r2
 8016908:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801690a:	f005 fda7 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801690e:	2063      	movs	r0, #99	; 0x63
 8016910:	f005 fdaa 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8016914:	482b      	ldr	r0, [pc, #172]	; (80169c4 <GUI_TextEn_umol+0xc8>)
 8016916:	f005 fd9b 	bl	801c450 <TFT_SetFont>
	
	if(deg){
 801691a:	2e00      	cmp	r6, #0
 801691c:	d050      	beq.n	80169c0 <GUI_TextEn_umol+0xc4>
			TFT_DrawChar(X, Y, 'm'-65);
 801691e:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X, Y, 'z'-64);
 8016920:	4629      	mov	r1, r5
 8016922:	4620      	mov	r0, r4
 8016924:	f005 fe5e 	bl	801c5e4 <TFT_DrawChar>
	}
	TFT_DrawChar(X+8, Y, 'm'-65);
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016928:	f104 0710 	add.w	r7, r4, #16
	TFT_DrawChar(X+8, Y, 'm'-65);
 801692c:	f104 0008 	add.w	r0, r4, #8
 8016930:	4629      	mov	r1, r5
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016932:	b2bf      	uxth	r7, r7
	TFT_DrawChar(X+8, Y, 'm'-65);
 8016934:	222c      	movs	r2, #44	; 0x2c
 8016936:	b280      	uxth	r0, r0
 8016938:	f005 fe54 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'o'-65);
 801693c:	4629      	mov	r1, r5
 801693e:	4638      	mov	r0, r7
 8016940:	222e      	movs	r2, #46	; 0x2e
 8016942:	f005 fe4f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+22, Y, 'l'-65);
 8016946:	f104 0016 	add.w	r0, r4, #22
 801694a:	4629      	mov	r1, r5
 801694c:	222b      	movs	r2, #43	; 0x2b
 801694e:	b280      	uxth	r0, r0
 8016950:	f005 fe48 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8016954:	f105 030a 	add.w	r3, r5, #10
 8016958:	b29b      	uxth	r3, r3
 801695a:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801695e:	f104 0219 	add.w	r2, r4, #25
 8016962:	4619      	mov	r1, r3
 8016964:	4620      	mov	r0, r4
 8016966:	f8cd 8000 	str.w	r8, [sp]
 801696a:	b292      	uxth	r2, r2
	
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 801696c:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8016970:	f005 fae8 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8016974:	b2b6      	uxth	r6, r6
 8016976:	f104 000a 	add.w	r0, r4, #10
 801697a:	4631      	mov	r1, r6
 801697c:	223b      	movs	r2, #59	; 0x3b
 801697e:	b280      	uxth	r0, r0
 8016980:	f005 fe30 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+2, Y+11, 'm'-65);
 8016984:	1ca0      	adds	r0, r4, #2
 8016986:	4631      	mov	r1, r6
 8016988:	222c      	movs	r2, #44	; 0x2c
 801698a:	b280      	uxth	r0, r0
 801698c:	f005 fe2a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawRectangle(X+16, Y+14, X+17, Y+15, TFT_White);
 8016990:	f105 030f 	add.w	r3, r5, #15
 8016994:	f104 0211 	add.w	r2, r4, #17
 8016998:	f105 010e 	add.w	r1, r5, #14
 801699c:	4638      	mov	r0, r7
 801699e:	f8cd 8000 	str.w	r8, [sp]
 80169a2:	b29b      	uxth	r3, r3
 80169a4:	b292      	uxth	r2, r2
 80169a6:	b289      	uxth	r1, r1
 80169a8:	f005 fb41 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawChar(X+19, Y+11, 's'-65);
 80169ac:	f104 0013 	add.w	r0, r4, #19
 80169b0:	2232      	movs	r2, #50	; 0x32
 80169b2:	4631      	mov	r1, r6
 80169b4:	b280      	uxth	r0, r0
}
 80169b6:	b002      	add	sp, #8
 80169b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+19, Y+11, 's'-65);
 80169bc:	f005 be12 	b.w	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X, Y, 'z'-64);
 80169c0:	223a      	movs	r2, #58	; 0x3a
 80169c2:	e7ad      	b.n	8016920 <GUI_TextEn_umol+0x24>
 80169c4:	20000190 	.word	0x20000190

080169c8 <GUI_TextEn_umol_sr>:

void GUI_TextEn_umol_sr(uint16_t X, uint16_t Y, uint8_t deg)
{
 80169c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80169cc:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80169ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80169d2:	460d      	mov	r5, r1
 80169d4:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 80169d6:	f005 fd41 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80169da:	2063      	movs	r0, #99	; 0x63
 80169dc:	f005 fd44 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 80169e0:	483b      	ldr	r0, [pc, #236]	; (8016ad0 <GUI_TextEn_umol_sr+0x108>)
 80169e2:	f005 fd35 	bl	801c450 <TFT_SetFont>
 80169e6:	f104 0009 	add.w	r0, r4, #9
	
	if(deg){
 80169ea:	2e00      	cmp	r6, #0
 80169ec:	d06d      	beq.n	8016aca <GUI_TextEn_umol_sr+0x102>
			TFT_DrawChar(X+9, Y, 'm'-65);
 80169ee:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X+9, Y, 'z'-64);
 80169f0:	4629      	mov	r1, r5
 80169f2:	b280      	uxth	r0, r0
 80169f4:	f005 fdf6 	bl	801c5e4 <TFT_DrawChar>
	}
	TFT_DrawChar(X+17, Y, 'm'-65);
 80169f8:	f104 0011 	add.w	r0, r4, #17
 80169fc:	4629      	mov	r1, r5
 80169fe:	222c      	movs	r2, #44	; 0x2c
 8016a00:	b280      	uxth	r0, r0
 8016a02:	f005 fdef 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+25, Y, 'o'-65);
 8016a06:	f104 0019 	add.w	r0, r4, #25
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	222e      	movs	r2, #46	; 0x2e
 8016a0e:	b280      	uxth	r0, r0
 8016a10:	f005 fde8 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'l'-65);
 8016a14:	f104 001f 	add.w	r0, r4, #31
 8016a18:	4629      	mov	r1, r5
 8016a1a:	222b      	movs	r2, #43	; 0x2b
 8016a1c:	b280      	uxth	r0, r0
 8016a1e:	f005 fde1 	bl	801c5e4 <TFT_DrawChar>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8016a22:	f105 030a 	add.w	r3, r5, #10
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016a2c:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 8016a30:	1ce0      	adds	r0, r4, #3
 8016a32:	4619      	mov	r1, r3
 8016a34:	f8cd 8000 	str.w	r8, [sp]
 8016a38:	b292      	uxth	r2, r2
 8016a3a:	b280      	uxth	r0, r0
	
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 8016a3c:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8016a40:	f005 fa80 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 8016a44:	b2b6      	uxth	r6, r6
 8016a46:	f104 000d 	add.w	r0, r4, #13
 8016a4a:	4631      	mov	r1, r6
 8016a4c:	223b      	movs	r2, #59	; 0x3b
 8016a4e:	b280      	uxth	r0, r0
 8016a50:	f005 fdc8 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 8016a54:	1d60      	adds	r0, r4, #5
 8016a56:	4631      	mov	r1, r6
 8016a58:	222c      	movs	r2, #44	; 0x2c
 8016a5a:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8016a5c:	f105 070e 	add.w	r7, r5, #14
 8016a60:	350f      	adds	r5, #15
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 8016a62:	f005 fdbf 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8016a66:	b2bf      	uxth	r7, r7
 8016a68:	b2ad      	uxth	r5, r5
 8016a6a:	f104 0214 	add.w	r2, r4, #20
 8016a6e:	f104 0013 	add.w	r0, r4, #19
 8016a72:	462b      	mov	r3, r5
 8016a74:	4639      	mov	r1, r7
 8016a76:	f8cd 8000 	str.w	r8, [sp]
 8016a7a:	b292      	uxth	r2, r2
 8016a7c:	b280      	uxth	r0, r0
 8016a7e:	f005 fad6 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawChar(X+22, Y+11, 's'-65);
 8016a82:	f104 0016 	add.w	r0, r4, #22
 8016a86:	4631      	mov	r1, r6
 8016a88:	2232      	movs	r2, #50	; 0x32
 8016a8a:	b280      	uxth	r0, r0
 8016a8c:	f005 fdaa 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawRectangle(X+30, Y+14, X+36, Y+15, TFT_White);
 8016a90:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8016a94:	f104 001e 	add.w	r0, r4, #30
 8016a98:	462b      	mov	r3, r5
 8016a9a:	4639      	mov	r1, r7
 8016a9c:	f8cd 8000 	str.w	r8, [sp]
 8016aa0:	b292      	uxth	r2, r2
 8016aa2:	b280      	uxth	r0, r0
 8016aa4:	f005 fac3 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawChar(X+32, Y+11, 's'-65);
 8016aa8:	f104 0020 	add.w	r0, r4, #32
 8016aac:	4631      	mov	r1, r6
 8016aae:	2232      	movs	r2, #50	; 0x32
 8016ab0:	b280      	uxth	r0, r0
 8016ab2:	f005 fd97 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 8016ab6:	f104 0027 	add.w	r0, r4, #39	; 0x27
 8016aba:	2231      	movs	r2, #49	; 0x31
 8016abc:	4631      	mov	r1, r6
 8016abe:	b280      	uxth	r0, r0
}
 8016ac0:	b002      	add	sp, #8
 8016ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 8016ac6:	f005 bd8d 	b.w	801c5e4 <TFT_DrawChar>
			TFT_DrawChar(X+9, Y, 'z'-64);
 8016aca:	223a      	movs	r2, #58	; 0x3a
 8016acc:	e790      	b.n	80169f0 <GUI_TextEn_umol_sr+0x28>
 8016ace:	bf00      	nop
 8016ad0:	20000190 	.word	0x20000190

08016ad4 <GUI_Text_On>:


void GUI_Text_On(uint16_t X, uint16_t Y)
{
 8016ad4:	b538      	push	{r3, r4, r5, lr}
 8016ad6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016ad8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016adc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016ade:	f005 fcbd 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016ae2:	2063      	movs	r0, #99	; 0x63
 8016ae4:	f005 fcc0 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016ae8:	480a      	ldr	r0, [pc, #40]	; (8016b14 <GUI_Text_On+0x40>)
 8016aea:	f005 fcb1 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 8016aee:	4629      	mov	r1, r5
 8016af0:	224f      	movs	r2, #79	; 0x4f
 8016af2:	4620      	mov	r0, r4
 8016af4:	f005 fd76 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016af8:	4807      	ldr	r0, [pc, #28]	; (8016b18 <GUI_Text_On+0x44>)
 8016afa:	f005 fca9 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8016afe:	1ca9      	adds	r1, r5, #2
 8016b00:	f104 0010 	add.w	r0, r4, #16
 8016b04:	226e      	movs	r2, #110	; 0x6e
 8016b06:	b289      	uxth	r1, r1
 8016b08:	b280      	uxth	r0, r0
	
}
 8016b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+16, Y+2, 'n');
 8016b0e:	f005 bd69 	b.w	801c5e4 <TFT_DrawChar>
 8016b12:	bf00      	nop
 8016b14:	200001b0 	.word	0x200001b0
 8016b18:	200001c0 	.word	0x200001c0

08016b1c <GUI_Text_Off>:

void GUI_Text_Off(uint16_t X, uint16_t Y)
{
 8016b1c:	b570      	push	{r4, r5, r6, lr}
 8016b1e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016b20:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016b24:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 8016b26:	f005 fc99 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b2a:	2063      	movs	r0, #99	; 0x63
 8016b2c:	f005 fc9c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+13, Y+2, 'f');
 8016b30:	1cb4      	adds	r4, r6, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016b32:	480e      	ldr	r0, [pc, #56]	; (8016b6c <GUI_Text_Off+0x50>)
 8016b34:	f005 fc8c 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'f');
 8016b38:	b2a4      	uxth	r4, r4
 8016b3a:	f105 000d 	add.w	r0, r5, #13
 8016b3e:	4621      	mov	r1, r4
 8016b40:	2266      	movs	r2, #102	; 0x66
 8016b42:	b280      	uxth	r0, r0
 8016b44:	f005 fd4e 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y+2, 'f');
 8016b48:	f105 0017 	add.w	r0, r5, #23
 8016b4c:	4621      	mov	r1, r4
 8016b4e:	2266      	movs	r2, #102	; 0x66
 8016b50:	b280      	uxth	r0, r0
 8016b52:	f005 fd47 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016b56:	4806      	ldr	r0, [pc, #24]	; (8016b70 <GUI_Text_Off+0x54>)
 8016b58:	f005 fc7a 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 8016b5c:	4631      	mov	r1, r6
 8016b5e:	4628      	mov	r0, r5
 8016b60:	224f      	movs	r2, #79	; 0x4f
}
 8016b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X, Y, 'O');
 8016b66:	f005 bd3d 	b.w	801c5e4 <TFT_DrawChar>
 8016b6a:	bf00      	nop
 8016b6c:	200001c0 	.word	0x200001c0
 8016b70:	200001b0 	.word	0x200001b0

08016b74 <GUI_Text_EbEr>:

void GUI_Text_EbEr(uint16_t X, uint16_t Y)
{
 8016b74:	b538      	push	{r3, r4, r5, lr}
 8016b76:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016b78:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016b7c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016b7e:	f005 fc6d 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b82:	2063      	movs	r0, #99	; 0x63
 8016b84:	f005 fc70 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016b88:	4815      	ldr	r0, [pc, #84]	; (8016be0 <GUI_Text_EbEr+0x6c>)
 8016b8a:	f005 fc61 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8016b8e:	1ca1      	adds	r1, r4, #2
 8016b90:	f105 0013 	add.w	r0, r5, #19
 8016b94:	222c      	movs	r2, #44	; 0x2c
 8016b96:	b289      	uxth	r1, r1
 8016b98:	b280      	uxth	r0, r0
 8016b9a:	f005 fd23 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'E');
 8016b9e:	4621      	mov	r1, r4
 8016ba0:	4628      	mov	r0, r5
 8016ba2:	2245      	movs	r2, #69	; 0x45
 8016ba4:	f005 fd1e 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, 'E');
 8016ba8:	f105 0020 	add.w	r0, r5, #32
 8016bac:	4621      	mov	r1, r4
 8016bae:	2245      	movs	r2, #69	; 0x45
 8016bb0:	b280      	uxth	r0, r0
 8016bb2:	f005 fd17 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8016bb6:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8016bb8:	480a      	ldr	r0, [pc, #40]	; (8016be4 <GUI_Text_EbEr+0x70>)
 8016bba:	f005 fc49 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8016bbe:	b2a4      	uxth	r4, r4
 8016bc0:	f105 0012 	add.w	r0, r5, #18
 8016bc4:	4621      	mov	r1, r4
 8016bc6:	2242      	movs	r2, #66	; 0x42
 8016bc8:	b280      	uxth	r0, r0
 8016bca:	f005 fd0b 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+12, 'R');
 8016bce:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8016bd2:	4621      	mov	r1, r4
 8016bd4:	2252      	movs	r2, #82	; 0x52
 8016bd6:	b280      	uxth	r0, r0
}
 8016bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+50, Y+12, 'R');
 8016bdc:	f005 bd02 	b.w	801c5e4 <TFT_DrawChar>
 8016be0:	200001b0 	.word	0x200001b0
 8016be4:	20000218 	.word	0x20000218

08016be8 <GUI_Text_LbLr>:

void GUI_Text_LbLr(uint16_t X, uint16_t Y)
{
 8016be8:	b538      	push	{r3, r4, r5, lr}
 8016bea:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016bec:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016bf0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016bf2:	f005 fc33 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016bf6:	2063      	movs	r0, #99	; 0x63
 8016bf8:	f005 fc36 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016bfc:	4815      	ldr	r0, [pc, #84]	; (8016c54 <GUI_Text_LbLr+0x6c>)
 8016bfe:	f005 fc27 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8016c02:	1ca1      	adds	r1, r4, #2
 8016c04:	f105 0013 	add.w	r0, r5, #19
 8016c08:	222c      	movs	r2, #44	; 0x2c
 8016c0a:	b289      	uxth	r1, r1
 8016c0c:	b280      	uxth	r0, r0
 8016c0e:	f005 fce9 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'L');
 8016c12:	4621      	mov	r1, r4
 8016c14:	4628      	mov	r0, r5
 8016c16:	224c      	movs	r2, #76	; 0x4c
 8016c18:	f005 fce4 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y, 'L');
 8016c1c:	f105 001e 	add.w	r0, r5, #30
 8016c20:	4621      	mov	r1, r4
 8016c22:	224c      	movs	r2, #76	; 0x4c
 8016c24:	b280      	uxth	r0, r0
 8016c26:	f005 fcdd 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8016c2a:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8016c2c:	480a      	ldr	r0, [pc, #40]	; (8016c58 <GUI_Text_LbLr+0x70>)
 8016c2e:	f005 fc0f 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8016c32:	b2a4      	uxth	r4, r4
 8016c34:	f105 0012 	add.w	r0, r5, #18
 8016c38:	4621      	mov	r1, r4
 8016c3a:	2242      	movs	r2, #66	; 0x42
 8016c3c:	b280      	uxth	r0, r0
 8016c3e:	f005 fcd1 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+48, Y+12, 'R');
 8016c42:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8016c46:	4621      	mov	r1, r4
 8016c48:	2252      	movs	r2, #82	; 0x52
 8016c4a:	b280      	uxth	r0, r0
}
 8016c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+48, Y+12, 'R');
 8016c50:	f005 bcc8 	b.w	801c5e4 <TFT_DrawChar>
 8016c54:	200001b0 	.word	0x200001b0
 8016c58:	20000218 	.word	0x20000218

08016c5c <GUI_TextEn_Language>:
///////////////////////////////////////////////////////////////////////
void GUI_TextEn_Language(uint16_t X, uint16_t Y)
{	/* Print word 'Language' */
 8016c5c:	b538      	push	{r3, r4, r5, lr}
 8016c5e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016c60:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	/* Print word 'Language' */
 8016c64:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016c66:	f005 fbf9 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c6a:	2063      	movs	r0, #99	; 0x63
 8016c6c:	f005 fbfc 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016c70:	481f      	ldr	r0, [pc, #124]	; (8016cf0 <GUI_TextEn_Language+0x94>)
 8016c72:	f005 fbed 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8016c76:	4621      	mov	r1, r4
 8016c78:	224c      	movs	r2, #76	; 0x4c
 8016c7a:	4628      	mov	r0, r5
 8016c7c:	f005 fcb2 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+14, Y+2, 'a');
 8016c80:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016c82:	481c      	ldr	r0, [pc, #112]	; (8016cf4 <GUI_TextEn_Language+0x98>)
	TFT_DrawChar(X+14, Y+2, 'a');
 8016c84:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016c86:	f005 fbe3 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+14, Y+2, 'a');
 8016c8a:	f105 000e 	add.w	r0, r5, #14
 8016c8e:	4621      	mov	r1, r4
 8016c90:	2261      	movs	r2, #97	; 0x61
 8016c92:	b280      	uxth	r0, r0
 8016c94:	f005 fca6 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y+2, 'n');
 8016c98:	f105 001a 	add.w	r0, r5, #26
 8016c9c:	4621      	mov	r1, r4
 8016c9e:	226e      	movs	r2, #110	; 0x6e
 8016ca0:	b280      	uxth	r0, r0
 8016ca2:	f005 fc9f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+2, 'g');
 8016ca6:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8016caa:	4621      	mov	r1, r4
 8016cac:	2267      	movs	r2, #103	; 0x67
 8016cae:	b280      	uxth	r0, r0
 8016cb0:	f005 fc98 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'a');
 8016cb4:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8016cb8:	4621      	mov	r1, r4
 8016cba:	2261      	movs	r2, #97	; 0x61
 8016cbc:	b280      	uxth	r0, r0
 8016cbe:	f005 fc91 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+52, Y+2, 'u');
 8016cc2:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8016cc6:	4621      	mov	r1, r4
 8016cc8:	2275      	movs	r2, #117	; 0x75
 8016cca:	b280      	uxth	r0, r0
 8016ccc:	f005 fc8a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+77, Y+2, 'g');
 8016cd0:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8016cd4:	4621      	mov	r1, r4
 8016cd6:	2267      	movs	r2, #103	; 0x67
 8016cd8:	b280      	uxth	r0, r0
 8016cda:	f005 fc83 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y+2, 'e');
 8016cde:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8016ce2:	4621      	mov	r1, r4
 8016ce4:	2265      	movs	r2, #101	; 0x65
 8016ce6:	b280      	uxth	r0, r0
}
 8016ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+90, Y+2, 'e');
 8016cec:	f005 bc7a 	b.w	801c5e4 <TFT_DrawChar>
 8016cf0:	200001b8 	.word	0x200001b8
 8016cf4:	200001c8 	.word	0x200001c8

08016cf8 <GUI_TextEn_English>:
void GUI_TextEn_English(uint16_t X, uint16_t Y)
{
 8016cf8:	b538      	push	{r3, r4, r5, lr}
 8016cfa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016cfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016d00:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016d02:	f005 fbab 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016d06:	2063      	movs	r0, #99	; 0x63
 8016d08:	f005 fbae 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016d0c:	481c      	ldr	r0, [pc, #112]	; (8016d80 <GUI_TextEn_English+0x88>)
 8016d0e:	f005 fb9f 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'E');
 8016d12:	4621      	mov	r1, r4
 8016d14:	2245      	movs	r2, #69	; 0x45
 8016d16:	4628      	mov	r0, r5
 8016d18:	f005 fc64 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'n');
 8016d1c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016d1e:	4819      	ldr	r0, [pc, #100]	; (8016d84 <GUI_TextEn_English+0x8c>)
	TFT_DrawChar(X+16, Y+2, 'n');
 8016d20:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016d22:	f005 fb95 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8016d26:	f105 0010 	add.w	r0, r5, #16
 8016d2a:	4621      	mov	r1, r4
 8016d2c:	226e      	movs	r2, #110	; 0x6e
 8016d2e:	b280      	uxth	r0, r0
 8016d30:	f005 fc58 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'g');
 8016d34:	f105 001d 	add.w	r0, r5, #29
 8016d38:	4621      	mov	r1, r4
 8016d3a:	2267      	movs	r2, #103	; 0x67
 8016d3c:	b280      	uxth	r0, r0
 8016d3e:	f005 fc51 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'l');
 8016d42:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8016d46:	4621      	mov	r1, r4
 8016d48:	226c      	movs	r2, #108	; 0x6c
 8016d4a:	b280      	uxth	r0, r0
 8016d4c:	f005 fc4a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 'i');
 8016d50:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 8016d54:	4621      	mov	r1, r4
 8016d56:	2269      	movs	r2, #105	; 0x69
 8016d58:	b280      	uxth	r0, r0
 8016d5a:	f005 fc43 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 's');
 8016d5e:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8016d62:	4621      	mov	r1, r4
 8016d64:	2273      	movs	r2, #115	; 0x73
 8016d66:	b280      	uxth	r0, r0
 8016d68:	f005 fc3c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'h');
 8016d6c:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8016d70:	4621      	mov	r1, r4
 8016d72:	2268      	movs	r2, #104	; 0x68
 8016d74:	b280      	uxth	r0, r0
	

}
 8016d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+65, Y+2, 'h');
 8016d7a:	f005 bc33 	b.w	801c5e4 <TFT_DrawChar>
 8016d7e:	bf00      	nop
 8016d80:	200001b8 	.word	0x200001b8
 8016d84:	200001c8 	.word	0x200001c8

08016d88 <GUI_TextEn_Info>:
void GUI_TextEn_Info(uint16_t X, uint16_t Y)
{
 8016d88:	b538      	push	{r3, r4, r5, lr}
 8016d8a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016d8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016d90:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016d92:	f005 fb63 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016d96:	2063      	movs	r0, #99	; 0x63
 8016d98:	f005 fb66 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016d9c:	4811      	ldr	r0, [pc, #68]	; (8016de4 <GUI_TextEn_Info+0x5c>)
 8016d9e:	f005 fb57 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8016da2:	4621      	mov	r1, r4
 8016da4:	2249      	movs	r2, #73	; 0x49
 8016da6:	4628      	mov	r0, r5
 8016da8:	f005 fc1c 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+18, Y+2, 'f');
 8016dac:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016dae:	480e      	ldr	r0, [pc, #56]	; (8016de8 <GUI_TextEn_Info+0x60>)
 8016db0:	f005 fb4e 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'f');
 8016db4:	b2a4      	uxth	r4, r4
 8016db6:	f105 0012 	add.w	r0, r5, #18
 8016dba:	4621      	mov	r1, r4
 8016dbc:	2266      	movs	r2, #102	; 0x66
 8016dbe:	b280      	uxth	r0, r0
 8016dc0:	f005 fc10 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+8, Y+2, 'n');
 8016dc4:	f105 0008 	add.w	r0, r5, #8
 8016dc8:	4621      	mov	r1, r4
 8016dca:	226e      	movs	r2, #110	; 0x6e
 8016dcc:	b280      	uxth	r0, r0
 8016dce:	f005 fc09 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'o');
 8016dd2:	f105 001d 	add.w	r0, r5, #29
 8016dd6:	4621      	mov	r1, r4
 8016dd8:	226f      	movs	r2, #111	; 0x6f
 8016dda:	b280      	uxth	r0, r0
}
 8016ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+29, Y+2, 'o');
 8016de0:	f005 bc00 	b.w	801c5e4 <TFT_DrawChar>
 8016de4:	200001b8 	.word	0x200001b8
 8016de8:	200001c8 	.word	0x200001c8

08016dec <GUI_TextEn_Radiance>:
void GUI_TextEn_Radiance(uint16_t X, uint16_t Y)
{
 8016dec:	b538      	push	{r3, r4, r5, lr}
 8016dee:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016df0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016df4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016df6:	f005 fb31 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016dfa:	2063      	movs	r0, #99	; 0x63
 8016dfc:	f005 fb34 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016e00:	481f      	ldr	r0, [pc, #124]	; (8016e80 <GUI_TextEn_Radiance+0x94>)
 8016e02:	f005 fb25 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'R');
 8016e06:	4621      	mov	r1, r4
 8016e08:	2252      	movs	r2, #82	; 0x52
 8016e0a:	4628      	mov	r0, r5
 8016e0c:	f005 fbea 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'a');
 8016e10:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016e12:	481c      	ldr	r0, [pc, #112]	; (8016e84 <GUI_TextEn_Radiance+0x98>)
	TFT_DrawChar(X+16, Y+2, 'a');
 8016e14:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016e16:	f005 fb1b 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 8016e1a:	f105 0010 	add.w	r0, r5, #16
 8016e1e:	4621      	mov	r1, r4
 8016e20:	2261      	movs	r2, #97	; 0x61
 8016e22:	b280      	uxth	r0, r0
 8016e24:	f005 fbde 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'd');
 8016e28:	f105 001c 	add.w	r0, r5, #28
 8016e2c:	4621      	mov	r1, r4
 8016e2e:	2264      	movs	r2, #100	; 0x64
 8016e30:	b280      	uxth	r0, r0
 8016e32:	f005 fbd7 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8016e36:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8016e3a:	4621      	mov	r1, r4
 8016e3c:	2269      	movs	r2, #105	; 0x69
 8016e3e:	b280      	uxth	r0, r0
 8016e40:	f005 fbd0 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'a');
 8016e44:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8016e48:	4621      	mov	r1, r4
 8016e4a:	2261      	movs	r2, #97	; 0x61
 8016e4c:	b280      	uxth	r0, r0
 8016e4e:	f005 fbc9 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y+2, 'n');
 8016e52:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8016e56:	4621      	mov	r1, r4
 8016e58:	226e      	movs	r2, #110	; 0x6e
 8016e5a:	b280      	uxth	r0, r0
 8016e5c:	f005 fbc2 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'c');
 8016e60:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8016e64:	4621      	mov	r1, r4
 8016e66:	2263      	movs	r2, #99	; 0x63
 8016e68:	b280      	uxth	r0, r0
 8016e6a:	f005 fbbb 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+83, Y+2, 'e');
 8016e6e:	f105 0053 	add.w	r0, r5, #83	; 0x53
 8016e72:	4621      	mov	r1, r4
 8016e74:	2265      	movs	r2, #101	; 0x65
 8016e76:	b280      	uxth	r0, r0
}
 8016e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+83, Y+2, 'e');
 8016e7c:	f005 bbb2 	b.w	801c5e4 <TFT_DrawChar>
 8016e80:	200001b8 	.word	0x200001b8
 8016e84:	200001c8 	.word	0x200001c8

08016e88 <GUI_TextEn_Irradiance>:
void GUI_TextEn_Irradiance(uint16_t X, uint16_t Y)
{
 8016e88:	b538      	push	{r3, r4, r5, lr}
 8016e8a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016e8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e90:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016e92:	f005 fae3 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e96:	2063      	movs	r0, #99	; 0x63
 8016e98:	f005 fae6 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016e9c:	4826      	ldr	r0, [pc, #152]	; (8016f38 <GUI_TextEn_Irradiance+0xb0>)
 8016e9e:	f005 fad7 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8016ea2:	4621      	mov	r1, r4
 8016ea4:	2249      	movs	r2, #73	; 0x49
 8016ea6:	4628      	mov	r0, r5
 8016ea8:	f005 fb9c 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+9, Y+2, 'r');
 8016eac:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016eae:	4823      	ldr	r0, [pc, #140]	; (8016f3c <GUI_TextEn_Irradiance+0xb4>)
	TFT_DrawChar(X+9, Y+2, 'r');
 8016eb0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016eb2:	f005 facd 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+9, Y+2, 'r');
 8016eb6:	f105 0009 	add.w	r0, r5, #9
 8016eba:	4621      	mov	r1, r4
 8016ebc:	2272      	movs	r2, #114	; 0x72
 8016ebe:	b280      	uxth	r0, r0
 8016ec0:	f005 fb90 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+2, 'r');
 8016ec4:	f105 0015 	add.w	r0, r5, #21
 8016ec8:	4621      	mov	r1, r4
 8016eca:	2272      	movs	r2, #114	; 0x72
 8016ecc:	b280      	uxth	r0, r0
 8016ece:	f005 fb89 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'a');
 8016ed2:	f105 0020 	add.w	r0, r5, #32
 8016ed6:	4621      	mov	r1, r4
 8016ed8:	2261      	movs	r2, #97	; 0x61
 8016eda:	b280      	uxth	r0, r0
 8016edc:	f005 fb82 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y+2, 'd');
 8016ee0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8016ee4:	4621      	mov	r1, r4
 8016ee6:	2264      	movs	r2, #100	; 0x64
 8016ee8:	b280      	uxth	r0, r0
 8016eea:	f005 fb7b 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'i');
 8016eee:	f105 0039 	add.w	r0, r5, #57	; 0x39
 8016ef2:	4621      	mov	r1, r4
 8016ef4:	2269      	movs	r2, #105	; 0x69
 8016ef6:	b280      	uxth	r0, r0
 8016ef8:	f005 fb74 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+62, Y+2, 'a');
 8016efc:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 8016f00:	4621      	mov	r1, r4
 8016f02:	2261      	movs	r2, #97	; 0x61
 8016f04:	b280      	uxth	r0, r0
 8016f06:	f005 fb6d 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y+2, 'n');
 8016f0a:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8016f0e:	4621      	mov	r1, r4
 8016f10:	226e      	movs	r2, #110	; 0x6e
 8016f12:	b280      	uxth	r0, r0
 8016f14:	f005 fb66 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'c');
 8016f18:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8016f1c:	4621      	mov	r1, r4
 8016f1e:	2263      	movs	r2, #99	; 0x63
 8016f20:	b280      	uxth	r0, r0
 8016f22:	f005 fb5f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8016f26:	f105 0063 	add.w	r0, r5, #99	; 0x63
 8016f2a:	4621      	mov	r1, r4
 8016f2c:	2265      	movs	r2, #101	; 0x65
 8016f2e:	b280      	uxth	r0, r0
}
 8016f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+99, Y+2, 'e');
 8016f34:	f005 bb56 	b.w	801c5e4 <TFT_DrawChar>
 8016f38:	200001b8 	.word	0x200001b8
 8016f3c:	200001c8 	.word	0x200001c8

08016f40 <GUI_TextMsgEn_HighIrradiance>:

void GUI_TextMsgEn_HighIrradiance(uint16_t X, uint16_t Y)
{
 8016f40:	b538      	push	{r3, r4, r5, lr}
 8016f42:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016f44:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016f48:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016f4a:	f005 fa87 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f4e:	2063      	movs	r0, #99	; 0x63
 8016f50:	f005 fa8a 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016f54:	4834      	ldr	r0, [pc, #208]	; (8017028 <GUI_TextMsgEn_HighIrradiance+0xe8>)
 8016f56:	f005 fa7b 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 8016f5a:	4621      	mov	r1, r4
 8016f5c:	2248      	movs	r2, #72	; 0x48
 8016f5e:	4628      	mov	r0, r5
 8016f60:	f005 fb40 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8016f64:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016f66:	4831      	ldr	r0, [pc, #196]	; (801702c <GUI_TextMsgEn_HighIrradiance+0xec>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8016f68:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016f6a:	f005 fa71 	bl	801c450 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 8016f6e:	f105 0010 	add.w	r0, r5, #16
 8016f72:	4621      	mov	r1, r4
 8016f74:	2269      	movs	r2, #105	; 0x69
 8016f76:	b280      	uxth	r0, r0
 8016f78:	f005 fb34 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8016f7c:	f105 0017 	add.w	r0, r5, #23
 8016f80:	4621      	mov	r1, r4
 8016f82:	2267      	movs	r2, #103	; 0x67
 8016f84:	b280      	uxth	r0, r0
 8016f86:	f005 fb2d 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 8016f8a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8016f8e:	4621      	mov	r1, r4
 8016f90:	2268      	movs	r2, #104	; 0x68
 8016f92:	b280      	uxth	r0, r0
 8016f94:	f005 fb26 	bl	801c5e4 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'i');
 8016f98:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8016f9c:	4621      	mov	r1, r4
 8016f9e:	2269      	movs	r2, #105	; 0x69
 8016fa0:	b280      	uxth	r0, r0
 8016fa2:	f005 fb1f 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+67, Y+2, 'r');
 8016fa6:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8016faa:	4621      	mov	r1, r4
 8016fac:	2272      	movs	r2, #114	; 0x72
 8016fae:	b280      	uxth	r0, r0
 8016fb0:	f005 fb18 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+79, Y+2, 'r');
 8016fb4:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8016fb8:	4621      	mov	r1, r4
 8016fba:	2272      	movs	r2, #114	; 0x72
 8016fbc:	b280      	uxth	r0, r0
 8016fbe:	f005 fb11 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'a');
 8016fc2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8016fc6:	4621      	mov	r1, r4
 8016fc8:	2261      	movs	r2, #97	; 0x61
 8016fca:	b280      	uxth	r0, r0
 8016fcc:	f005 fb0a 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+102, Y+2, 'd');
 8016fd0:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	2264      	movs	r2, #100	; 0x64
 8016fd8:	b280      	uxth	r0, r0
 8016fda:	f005 fb03 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+115, Y+2, 'i');
 8016fde:	f105 0073 	add.w	r0, r5, #115	; 0x73
 8016fe2:	4621      	mov	r1, r4
 8016fe4:	2269      	movs	r2, #105	; 0x69
 8016fe6:	b280      	uxth	r0, r0
 8016fe8:	f005 fafc 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'a');
 8016fec:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8016ff0:	4621      	mov	r1, r4
 8016ff2:	2261      	movs	r2, #97	; 0x61
 8016ff4:	b280      	uxth	r0, r0
 8016ff6:	f005 faf5 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'n');
 8016ffa:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8016ffe:	4621      	mov	r1, r4
 8017000:	226e      	movs	r2, #110	; 0x6e
 8017002:	b280      	uxth	r0, r0
 8017004:	f005 faee 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+145, Y+2, 'c');
 8017008:	f105 0091 	add.w	r0, r5, #145	; 0x91
 801700c:	4621      	mov	r1, r4
 801700e:	2263      	movs	r2, #99	; 0x63
 8017010:	b280      	uxth	r0, r0
 8017012:	f005 fae7 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+157, Y+2, 'e');
 8017016:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 801701a:	4621      	mov	r1, r4
 801701c:	2265      	movs	r2, #101	; 0x65
 801701e:	b280      	uxth	r0, r0
}
 8017020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+157, Y+2, 'e');
 8017024:	f005 bade 	b.w	801c5e4 <TFT_DrawChar>
 8017028:	200001b8 	.word	0x200001b8
 801702c:	200001c8 	.word	0x200001c8

08017030 <GUI_TextMsgEn_HighRadiance>:

void GUI_TextMsgEn_HighRadiance(uint16_t X, uint16_t Y)
{
 8017030:	b538      	push	{r3, r4, r5, lr}
 8017032:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017034:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017038:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801703a:	f005 fa0f 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801703e:	2063      	movs	r0, #99	; 0x63
 8017040:	f005 fa12 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017044:	482d      	ldr	r0, [pc, #180]	; (80170fc <GUI_TextMsgEn_HighRadiance+0xcc>)
 8017046:	f005 fa03 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 801704a:	4621      	mov	r1, r4
 801704c:	2248      	movs	r2, #72	; 0x48
 801704e:	4628      	mov	r0, r5
 8017050:	f005 fac8 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8017054:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017056:	482a      	ldr	r0, [pc, #168]	; (8017100 <GUI_TextMsgEn_HighRadiance+0xd0>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8017058:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801705a:	f005 f9f9 	bl	801c450 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 801705e:	f105 0010 	add.w	r0, r5, #16
 8017062:	4621      	mov	r1, r4
 8017064:	2269      	movs	r2, #105	; 0x69
 8017066:	b280      	uxth	r0, r0
 8017068:	f005 fabc 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 801706c:	f105 0017 	add.w	r0, r5, #23
 8017070:	4621      	mov	r1, r4
 8017072:	2267      	movs	r2, #103	; 0x67
 8017074:	b280      	uxth	r0, r0
 8017076:	f005 fab5 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 801707a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801707e:	4621      	mov	r1, r4
 8017080:	2268      	movs	r2, #104	; 0x68
 8017082:	b280      	uxth	r0, r0
 8017084:	f005 faae 	bl	801c5e4 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'r');
 8017088:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 801708c:	4621      	mov	r1, r4
 801708e:	2272      	movs	r2, #114	; 0x72
 8017090:	b280      	uxth	r0, r0
 8017092:	f005 faa7 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+70, Y+2, 'a');
 8017096:	f105 0046 	add.w	r0, r5, #70	; 0x46
 801709a:	4621      	mov	r1, r4
 801709c:	2261      	movs	r2, #97	; 0x61
 801709e:	b280      	uxth	r0, r0
 80170a0:	f005 faa0 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+82, Y+2, 'd');
 80170a4:	f105 0052 	add.w	r0, r5, #82	; 0x52
 80170a8:	4621      	mov	r1, r4
 80170aa:	2264      	movs	r2, #100	; 0x64
 80170ac:	b280      	uxth	r0, r0
 80170ae:	f005 fa99 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'i');
 80170b2:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 80170b6:	4621      	mov	r1, r4
 80170b8:	2269      	movs	r2, #105	; 0x69
 80170ba:	b280      	uxth	r0, r0
 80170bc:	f005 fa92 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+100, Y+2, 'a');
 80170c0:	f105 0064 	add.w	r0, r5, #100	; 0x64
 80170c4:	4621      	mov	r1, r4
 80170c6:	2261      	movs	r2, #97	; 0x61
 80170c8:	b280      	uxth	r0, r0
 80170ca:	f005 fa8b 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+112, Y+2, 'n');
 80170ce:	f105 0070 	add.w	r0, r5, #112	; 0x70
 80170d2:	4621      	mov	r1, r4
 80170d4:	226e      	movs	r2, #110	; 0x6e
 80170d6:	b280      	uxth	r0, r0
 80170d8:	f005 fa84 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+125, Y+2, 'c');
 80170dc:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 80170e0:	4621      	mov	r1, r4
 80170e2:	2263      	movs	r2, #99	; 0x63
 80170e4:	b280      	uxth	r0, r0
 80170e6:	f005 fa7d 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+137, Y+2, 'e');
 80170ea:	f105 0089 	add.w	r0, r5, #137	; 0x89
 80170ee:	4621      	mov	r1, r4
 80170f0:	2265      	movs	r2, #101	; 0x65
 80170f2:	b280      	uxth	r0, r0
}
 80170f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+137, Y+2, 'e');
 80170f8:	f005 ba74 	b.w	801c5e4 <TFT_DrawChar>
 80170fc:	200001b8 	.word	0x200001b8
 8017100:	200001c8 	.word	0x200001c8

08017104 <GUI_TextMsgEn_LowRadiance>:

void GUI_TextMsgEn_LowRadiance(uint16_t X, uint16_t Y)
{
 8017104:	b538      	push	{r3, r4, r5, lr}
 8017106:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017108:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801710c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801710e:	f005 f9a5 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017112:	2063      	movs	r0, #99	; 0x63
 8017114:	f005 f9a8 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017118:	482a      	ldr	r0, [pc, #168]	; (80171c4 <GUI_TextMsgEn_LowRadiance+0xc0>)
 801711a:	f005 f999 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 801711e:	4621      	mov	r1, r4
 8017120:	224c      	movs	r2, #76	; 0x4c
 8017122:	4628      	mov	r0, r5
 8017124:	f005 fa5e 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 8017128:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801712a:	4827      	ldr	r0, [pc, #156]	; (80171c8 <GUI_TextMsgEn_LowRadiance+0xc4>)
  TFT_DrawChar(X+16, Y+2, 'o');
 801712c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801712e:	f005 f98f 	bl	801c450 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8017132:	f105 0010 	add.w	r0, r5, #16
 8017136:	4621      	mov	r1, r4
 8017138:	226f      	movs	r2, #111	; 0x6f
 801713a:	b280      	uxth	r0, r0
 801713c:	f005 fa52 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8017140:	f105 001d 	add.w	r0, r5, #29
 8017144:	4621      	mov	r1, r4
 8017146:	2277      	movs	r2, #119	; 0x77
 8017148:	b280      	uxth	r0, r0
 801714a:	f005 fa4b 	bl	801c5e4 <TFT_DrawChar>
  
  TFT_DrawChar(X+54, Y+2, 'r');
 801714e:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8017152:	4621      	mov	r1, r4
 8017154:	2272      	movs	r2, #114	; 0x72
 8017156:	b280      	uxth	r0, r0
 8017158:	f005 fa44 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+65, Y+2, 'a');
 801715c:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8017160:	4621      	mov	r1, r4
 8017162:	2261      	movs	r2, #97	; 0x61
 8017164:	b280      	uxth	r0, r0
 8017166:	f005 fa3d 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+77, Y+2, 'd');
 801716a:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 801716e:	4621      	mov	r1, r4
 8017170:	2264      	movs	r2, #100	; 0x64
 8017172:	b280      	uxth	r0, r0
 8017174:	f005 fa36 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'i');
 8017178:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801717c:	4621      	mov	r1, r4
 801717e:	2269      	movs	r2, #105	; 0x69
 8017180:	b280      	uxth	r0, r0
 8017182:	f005 fa2f 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'a');
 8017186:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 801718a:	4621      	mov	r1, r4
 801718c:	2261      	movs	r2, #97	; 0x61
 801718e:	b280      	uxth	r0, r0
 8017190:	f005 fa28 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+107, Y+2, 'n');
 8017194:	f105 006b 	add.w	r0, r5, #107	; 0x6b
 8017198:	4621      	mov	r1, r4
 801719a:	226e      	movs	r2, #110	; 0x6e
 801719c:	b280      	uxth	r0, r0
 801719e:	f005 fa21 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'c');
 80171a2:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80171a6:	4621      	mov	r1, r4
 80171a8:	2263      	movs	r2, #99	; 0x63
 80171aa:	b280      	uxth	r0, r0
 80171ac:	f005 fa1a 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'e');
 80171b0:	f105 0084 	add.w	r0, r5, #132	; 0x84
 80171b4:	4621      	mov	r1, r4
 80171b6:	2265      	movs	r2, #101	; 0x65
 80171b8:	b280      	uxth	r0, r0
}
 80171ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+132, Y+2, 'e');
 80171be:	f005 ba11 	b.w	801c5e4 <TFT_DrawChar>
 80171c2:	bf00      	nop
 80171c4:	200001b8 	.word	0x200001b8
 80171c8:	200001c8 	.word	0x200001c8

080171cc <GUI_TextMsgEn_LowIrradiance>:

void GUI_TextMsgEn_LowIrradiance(uint16_t X, uint16_t Y)
{
 80171cc:	b538      	push	{r3, r4, r5, lr}
 80171ce:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80171d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80171d4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80171d6:	f005 f941 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80171da:	2063      	movs	r0, #99	; 0x63
 80171dc:	f005 f944 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80171e0:	4831      	ldr	r0, [pc, #196]	; (80172a8 <GUI_TextMsgEn_LowIrradiance+0xdc>)
 80171e2:	f005 f935 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80171e6:	4621      	mov	r1, r4
 80171e8:	224c      	movs	r2, #76	; 0x4c
 80171ea:	4628      	mov	r0, r5
 80171ec:	f005 f9fa 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 80171f0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80171f2:	482e      	ldr	r0, [pc, #184]	; (80172ac <GUI_TextMsgEn_LowIrradiance+0xe0>)
  TFT_DrawChar(X+16, Y+2, 'o');
 80171f4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80171f6:	f005 f92b 	bl	801c450 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 80171fa:	f105 0010 	add.w	r0, r5, #16
 80171fe:	4621      	mov	r1, r4
 8017200:	226f      	movs	r2, #111	; 0x6f
 8017202:	b280      	uxth	r0, r0
 8017204:	f005 f9ee 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8017208:	f105 001d 	add.w	r0, r5, #29
 801720c:	4621      	mov	r1, r4
 801720e:	2277      	movs	r2, #119	; 0x77
 8017210:	b280      	uxth	r0, r0
 8017212:	f005 f9e7 	bl	801c5e4 <TFT_DrawChar>
	
  TFT_DrawChar(X+55, Y+2, 'i');
 8017216:	f105 0037 	add.w	r0, r5, #55	; 0x37
 801721a:	4621      	mov	r1, r4
 801721c:	2269      	movs	r2, #105	; 0x69
 801721e:	b280      	uxth	r0, r0
 8017220:	f005 f9e0 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+63, Y+2, 'r');
 8017224:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8017228:	4621      	mov	r1, r4
 801722a:	2272      	movs	r2, #114	; 0x72
 801722c:	b280      	uxth	r0, r0
 801722e:	f005 f9d9 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+75, Y+2, 'r');
 8017232:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8017236:	4621      	mov	r1, r4
 8017238:	2272      	movs	r2, #114	; 0x72
 801723a:	b280      	uxth	r0, r0
 801723c:	f005 f9d2 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+86, Y+2, 'a');
 8017240:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8017244:	4621      	mov	r1, r4
 8017246:	2261      	movs	r2, #97	; 0x61
 8017248:	b280      	uxth	r0, r0
 801724a:	f005 f9cb 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+98, Y+2, 'd');
 801724e:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8017252:	4621      	mov	r1, r4
 8017254:	2264      	movs	r2, #100	; 0x64
 8017256:	b280      	uxth	r0, r0
 8017258:	f005 f9c4 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+111, Y+2, 'i');
 801725c:	f105 006f 	add.w	r0, r5, #111	; 0x6f
 8017260:	4621      	mov	r1, r4
 8017262:	2269      	movs	r2, #105	; 0x69
 8017264:	b280      	uxth	r0, r0
 8017266:	f005 f9bd 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+116, Y+2, 'a');
 801726a:	f105 0074 	add.w	r0, r5, #116	; 0x74
 801726e:	4621      	mov	r1, r4
 8017270:	2261      	movs	r2, #97	; 0x61
 8017272:	b280      	uxth	r0, r0
 8017274:	f005 f9b6 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+128, Y+2, 'n');
 8017278:	f105 0080 	add.w	r0, r5, #128	; 0x80
 801727c:	4621      	mov	r1, r4
 801727e:	226e      	movs	r2, #110	; 0x6e
 8017280:	b280      	uxth	r0, r0
 8017282:	f005 f9af 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+141, Y+2, 'c');
 8017286:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 801728a:	4621      	mov	r1, r4
 801728c:	2263      	movs	r2, #99	; 0x63
 801728e:	b280      	uxth	r0, r0
 8017290:	f005 f9a8 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawChar(X+153, Y+2, 'e');
 8017294:	f105 0099 	add.w	r0, r5, #153	; 0x99
 8017298:	4621      	mov	r1, r4
 801729a:	2265      	movs	r2, #101	; 0x65
 801729c:	b280      	uxth	r0, r0
	
	
}
 801729e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+153, Y+2, 'e');
 80172a2:	f005 b99f 	b.w	801c5e4 <TFT_DrawChar>
 80172a6:	bf00      	nop
 80172a8:	200001b8 	.word	0x200001b8
 80172ac:	200001c8 	.word	0x200001c8

080172b0 <GUI_TextEn_Luminance>:
void GUI_TextEn_Luminance(uint16_t X, uint16_t Y)
{
 80172b0:	b538      	push	{r3, r4, r5, lr}
 80172b2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80172b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80172b8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80172ba:	f005 f8cf 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80172be:	2063      	movs	r0, #99	; 0x63
 80172c0:	f005 f8d2 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80172c4:	4823      	ldr	r0, [pc, #140]	; (8017354 <GUI_TextEn_Luminance+0xa4>)
 80172c6:	f005 f8c3 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80172ca:	4621      	mov	r1, r4
 80172cc:	224c      	movs	r2, #76	; 0x4c
 80172ce:	4628      	mov	r0, r5
 80172d0:	f005 f988 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+13, Y+2, 'u');
 80172d4:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80172d6:	4820      	ldr	r0, [pc, #128]	; (8017358 <GUI_TextEn_Luminance+0xa8>)
	TFT_DrawChar(X+13, Y+2, 'u');
 80172d8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80172da:	f005 f8b9 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'u');
 80172de:	f105 000d 	add.w	r0, r5, #13
 80172e2:	4621      	mov	r1, r4
 80172e4:	2275      	movs	r2, #117	; 0x75
 80172e6:	b280      	uxth	r0, r0
 80172e8:	f005 f97c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'm');
 80172ec:	f105 001b 	add.w	r0, r5, #27
 80172f0:	4621      	mov	r1, r4
 80172f2:	226d      	movs	r2, #109	; 0x6d
 80172f4:	b280      	uxth	r0, r0
 80172f6:	f005 f975 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 80172fa:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80172fe:	4621      	mov	r1, r4
 8017300:	2269      	movs	r2, #105	; 0x69
 8017302:	b280      	uxth	r0, r0
 8017304:	f005 f96e 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y+2, 'a');
 8017308:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 801730c:	4621      	mov	r1, r4
 801730e:	2261      	movs	r2, #97	; 0x61
 8017310:	b280      	uxth	r0, r0
 8017312:	f005 f967 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'n');
 8017316:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 801731a:	4621      	mov	r1, r4
 801731c:	226e      	movs	r2, #110	; 0x6e
 801731e:	b280      	uxth	r0, r0
 8017320:	f005 f960 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'n');
 8017324:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8017328:	4621      	mov	r1, r4
 801732a:	226e      	movs	r2, #110	; 0x6e
 801732c:	b280      	uxth	r0, r0
 801732e:	f005 f959 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+84, Y+2, 'c');
 8017332:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8017336:	4621      	mov	r1, r4
 8017338:	2263      	movs	r2, #99	; 0x63
 801733a:	b280      	uxth	r0, r0
 801733c:	f005 f952 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+96, Y+2, 'e');
 8017340:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8017344:	4621      	mov	r1, r4
 8017346:	2265      	movs	r2, #101	; 0x65
 8017348:	b280      	uxth	r0, r0
}
 801734a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+96, Y+2, 'e');
 801734e:	f005 b949 	b.w	801c5e4 <TFT_DrawChar>
 8017352:	bf00      	nop
 8017354:	200001b8 	.word	0x200001b8
 8017358:	200001c8 	.word	0x200001c8

0801735c <GUI_TextEn_Illuminance>:

void GUI_TextEn_Illuminance(uint16_t X, uint16_t Y)
{
 801735c:	b538      	push	{r3, r4, r5, lr}
 801735e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017360:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017364:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017366:	f005 f879 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801736a:	2063      	movs	r0, #99	; 0x63
 801736c:	f005 f87c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017370:	482a      	ldr	r0, [pc, #168]	; (801741c <GUI_TextEn_Illuminance+0xc0>)
 8017372:	f005 f86d 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8017376:	4621      	mov	r1, r4
 8017378:	2249      	movs	r2, #73	; 0x49
 801737a:	4628      	mov	r0, r5
 801737c:	f005 f932 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+8, Y+2, 'l');
 8017380:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017382:	4827      	ldr	r0, [pc, #156]	; (8017420 <GUI_TextEn_Illuminance+0xc4>)
	TFT_DrawChar(X+8, Y+2, 'l');
 8017384:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017386:	f005 f863 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+8, Y+2, 'l');
 801738a:	f105 0008 	add.w	r0, r5, #8
 801738e:	4621      	mov	r1, r4
 8017390:	226c      	movs	r2, #108	; 0x6c
 8017392:	b280      	uxth	r0, r0
 8017394:	f005 f926 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y+2, 'l');
 8017398:	f105 000d 	add.w	r0, r5, #13
 801739c:	4621      	mov	r1, r4
 801739e:	226c      	movs	r2, #108	; 0x6c
 80173a0:	b280      	uxth	r0, r0
 80173a2:	f005 f91f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+18, Y+2, 'u');
 80173a6:	f105 0012 	add.w	r0, r5, #18
 80173aa:	4621      	mov	r1, r4
 80173ac:	2275      	movs	r2, #117	; 0x75
 80173ae:	b280      	uxth	r0, r0
 80173b0:	f005 f918 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'm');
 80173b4:	f105 0020 	add.w	r0, r5, #32
 80173b8:	4621      	mov	r1, r4
 80173ba:	226d      	movs	r2, #109	; 0x6d
 80173bc:	b280      	uxth	r0, r0
 80173be:	f005 f911 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'i');
 80173c2:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80173c6:	4621      	mov	r1, r4
 80173c8:	2269      	movs	r2, #105	; 0x69
 80173ca:	b280      	uxth	r0, r0
 80173cc:	f005 f90a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+64, Y+2, 'a');
 80173d0:	f105 0040 	add.w	r0, r5, #64	; 0x40
 80173d4:	4621      	mov	r1, r4
 80173d6:	2261      	movs	r2, #97	; 0x61
 80173d8:	b280      	uxth	r0, r0
 80173da:	f005 f903 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+51, Y+2, 'n');
 80173de:	f105 0033 	add.w	r0, r5, #51	; 0x33
 80173e2:	4621      	mov	r1, r4
 80173e4:	226e      	movs	r2, #110	; 0x6e
 80173e6:	b280      	uxth	r0, r0
 80173e8:	f005 f8fc 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'n');
 80173ec:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 80173f0:	4621      	mov	r1, r4
 80173f2:	226e      	movs	r2, #110	; 0x6e
 80173f4:	b280      	uxth	r0, r0
 80173f6:	f005 f8f5 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'c');
 80173fa:	f105 0059 	add.w	r0, r5, #89	; 0x59
 80173fe:	4621      	mov	r1, r4
 8017400:	2263      	movs	r2, #99	; 0x63
 8017402:	b280      	uxth	r0, r0
 8017404:	f005 f8ee 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017408:	f105 0065 	add.w	r0, r5, #101	; 0x65
 801740c:	4621      	mov	r1, r4
 801740e:	2265      	movs	r2, #101	; 0x65
 8017410:	b280      	uxth	r0, r0
}
 8017412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+101, Y+2, 'e');
 8017416:	f005 b8e5 	b.w	801c5e4 <TFT_DrawChar>
 801741a:	bf00      	nop
 801741c:	200001b8 	.word	0x200001b8
 8017420:	200001c8 	.word	0x200001c8

08017424 <GUI_TextEn_Mode>:
void GUI_TextEn_Mode(uint16_t X, uint16_t Y)
{
 8017424:	b538      	push	{r3, r4, r5, lr}
 8017426:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017428:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801742c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801742e:	f005 f815 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017432:	2063      	movs	r0, #99	; 0x63
 8017434:	f005 f818 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017438:	4811      	ldr	r0, [pc, #68]	; (8017480 <GUI_TextEn_Mode+0x5c>)
 801743a:	f005 f809 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'M');
 801743e:	4621      	mov	r1, r4
 8017440:	224d      	movs	r2, #77	; 0x4d
 8017442:	4628      	mov	r0, r5
 8017444:	f005 f8ce 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+19, Y+2, 'o');
 8017448:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801744a:	480e      	ldr	r0, [pc, #56]	; (8017484 <GUI_TextEn_Mode+0x60>)
 801744c:	f005 f800 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, 'o');
 8017450:	b2a4      	uxth	r4, r4
 8017452:	f105 0013 	add.w	r0, r5, #19
 8017456:	4621      	mov	r1, r4
 8017458:	226f      	movs	r2, #111	; 0x6f
 801745a:	b280      	uxth	r0, r0
 801745c:	f005 f8c2 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'd');
 8017460:	f105 001e 	add.w	r0, r5, #30
 8017464:	4621      	mov	r1, r4
 8017466:	2264      	movs	r2, #100	; 0x64
 8017468:	b280      	uxth	r0, r0
 801746a:	f005 f8bb 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+43, Y+2, 'e');
 801746e:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 8017472:	4621      	mov	r1, r4
 8017474:	2265      	movs	r2, #101	; 0x65
 8017476:	b280      	uxth	r0, r0
}
 8017478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+43, Y+2, 'e');
 801747c:	f005 b8b2 	b.w	801c5e4 <TFT_DrawChar>
 8017480:	200001b8 	.word	0x200001b8
 8017484:	200001c8 	.word	0x200001c8

08017488 <GUI_TextEn_PPFD>:

void GUI_TextEn_PPFD(uint16_t X, uint16_t Y)
{
 8017488:	b538      	push	{r3, r4, r5, lr}
 801748a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801748c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017490:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017492:	f004 ffe3 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017496:	2063      	movs	r0, #99	; 0x63
 8017498:	f004 ffe6 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801749c:	480f      	ldr	r0, [pc, #60]	; (80174dc <GUI_TextEn_PPFD+0x54>)
 801749e:	f004 ffd7 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+48, Y, 'D');
 80174a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80174a6:	4629      	mov	r1, r5
 80174a8:	2244      	movs	r2, #68	; 0x44
 80174aa:	b280      	uxth	r0, r0
 80174ac:	f005 f89a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'F');
 80174b0:	f104 001f 	add.w	r0, r4, #31
 80174b4:	4629      	mov	r1, r5
 80174b6:	2246      	movs	r2, #70	; 0x46
 80174b8:	b280      	uxth	r0, r0
 80174ba:	f005 f893 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 80174be:	f104 0010 	add.w	r0, r4, #16
 80174c2:	4629      	mov	r1, r5
 80174c4:	2250      	movs	r2, #80	; 0x50
 80174c6:	b280      	uxth	r0, r0
 80174c8:	f005 f88c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 80174cc:	4629      	mov	r1, r5
 80174ce:	4620      	mov	r0, r4
 80174d0:	2250      	movs	r2, #80	; 0x50
}
 80174d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 80174d6:	f005 b885 	b.w	801c5e4 <TFT_DrawChar>
 80174da:	bf00      	nop
 80174dc:	200001b8 	.word	0x200001b8

080174e0 <GUI_TextEn_PPL>:
void GUI_TextEn_PPL(uint16_t X, uint16_t Y)
{
 80174e0:	b538      	push	{r3, r4, r5, lr}
 80174e2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80174e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80174e8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80174ea:	f004 ffb7 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80174ee:	2063      	movs	r0, #99	; 0x63
 80174f0:	f004 ffba 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80174f4:	480b      	ldr	r0, [pc, #44]	; (8017524 <GUI_TextEn_PPL+0x44>)
 80174f6:	f004 ffab 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+31, Y, 'L');
 80174fa:	f104 001f 	add.w	r0, r4, #31
 80174fe:	4629      	mov	r1, r5
 8017500:	224c      	movs	r2, #76	; 0x4c
 8017502:	b280      	uxth	r0, r0
 8017504:	f005 f86e 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8017508:	f104 0010 	add.w	r0, r4, #16
 801750c:	4629      	mov	r1, r5
 801750e:	2250      	movs	r2, #80	; 0x50
 8017510:	b280      	uxth	r0, r0
 8017512:	f005 f867 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017516:	4629      	mov	r1, r5
 8017518:	4620      	mov	r0, r4
 801751a:	2250      	movs	r2, #80	; 0x50
}
 801751c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8017520:	f005 b860 	b.w	801c5e4 <TFT_DrawChar>
 8017524:	200001b8 	.word	0x200001b8

08017528 <GUI_TextEn_PARwavebands>:
void GUI_TextEn_PARwavebands(uint16_t X, uint16_t Y)
{
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801752c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017530:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017532:	f004 ff93 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017536:	2063      	movs	r0, #99	; 0x63
 8017538:	f004 ff96 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801753c:	482d      	ldr	r0, [pc, #180]	; (80175f4 <GUI_TextEn_PARwavebands+0xcc>)
 801753e:	f004 ff87 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+32, Y, 'R');
 8017542:	f105 0020 	add.w	r0, r5, #32
 8017546:	4621      	mov	r1, r4
 8017548:	2252      	movs	r2, #82	; 0x52
 801754a:	b280      	uxth	r0, r0
 801754c:	f005 f84a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'A');
 8017550:	f105 0010 	add.w	r0, r5, #16
 8017554:	4621      	mov	r1, r4
 8017556:	2241      	movs	r2, #65	; 0x41
 8017558:	b280      	uxth	r0, r0
 801755a:	f005 f843 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 801755e:	4621      	mov	r1, r4
 8017560:	2250      	movs	r2, #80	; 0x50
 8017562:	4628      	mov	r0, r5
 8017564:	f005 f83e 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+75, Y+2, 'a');
 8017568:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801756a:	4823      	ldr	r0, [pc, #140]	; (80175f8 <GUI_TextEn_PARwavebands+0xd0>)
	TFT_DrawChar(X+75, Y+2, 'a');
 801756c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801756e:	f004 ff6f 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+75, Y+2, 'a');
 8017572:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8017576:	4621      	mov	r1, r4
 8017578:	2261      	movs	r2, #97	; 0x61
 801757a:	b280      	uxth	r0, r0
 801757c:	f005 f832 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+60, Y+2, 'w');
 8017580:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8017584:	4621      	mov	r1, r4
 8017586:	2277      	movs	r2, #119	; 0x77
 8017588:	b280      	uxth	r0, r0
 801758a:	f005 f82b 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 801758e:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8017592:	4621      	mov	r1, r4
 8017594:	2265      	movs	r2, #101	; 0x65
 8017596:	b280      	uxth	r0, r0
 8017598:	f005 f824 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'v');
 801759c:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80175a0:	4621      	mov	r1, r4
 80175a2:	2276      	movs	r2, #118	; 0x76
 80175a4:	b280      	uxth	r0, r0
 80175a6:	f005 f81d 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+126, Y+2, 'a');
 80175aa:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 80175ae:	4621      	mov	r1, r4
 80175b0:	2261      	movs	r2, #97	; 0x61
 80175b2:	b280      	uxth	r0, r0
 80175b4:	f005 f816 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+113, Y+2, 'b');
 80175b8:	f105 0071 	add.w	r0, r5, #113	; 0x71
 80175bc:	4621      	mov	r1, r4
 80175be:	2262      	movs	r2, #98	; 0x62
 80175c0:	b280      	uxth	r0, r0
 80175c2:	f005 f80f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+138, Y+2, 'n');
 80175c6:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 80175ca:	4621      	mov	r1, r4
 80175cc:	226e      	movs	r2, #110	; 0x6e
 80175ce:	b280      	uxth	r0, r0
 80175d0:	f005 f808 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+151, Y+2, 'd');
 80175d4:	f105 0097 	add.w	r0, r5, #151	; 0x97
 80175d8:	4621      	mov	r1, r4
 80175da:	2264      	movs	r2, #100	; 0x64
 80175dc:	b280      	uxth	r0, r0
 80175de:	f005 f801 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+165, Y+2, 's');
 80175e2:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
 80175e6:	4621      	mov	r1, r4
 80175e8:	2273      	movs	r2, #115	; 0x73
 80175ea:	b280      	uxth	r0, r0
}
 80175ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+165, Y+2, 's');
 80175f0:	f004 bff8 	b.w	801c5e4 <TFT_DrawChar>
 80175f4:	200001b8 	.word	0x200001b8
 80175f8:	200001c8 	.word	0x200001c8

080175fc <GUI_TextEn_B_G_R_FR>:
void GUI_TextEn_B_G_R_FR(uint16_t X, uint16_t Y)
{
 80175fc:	b538      	push	{r3, r4, r5, lr}
 80175fe:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017600:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017604:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017606:	f004 ff29 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801760a:	2063      	movs	r0, #99	; 0x63
 801760c:	f004 ff2c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017610:	481d      	ldr	r0, [pc, #116]	; (8017688 <GUI_TextEn_B_G_R_FR+0x8c>)
 8017612:	f004 ff1d 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, '-');
 8017616:	f104 000f 	add.w	r0, r4, #15
 801761a:	4629      	mov	r1, r5
 801761c:	222d      	movs	r2, #45	; 0x2d
 801761e:	b280      	uxth	r0, r0
 8017620:	f004 ffe0 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'B');
 8017624:	4629      	mov	r1, r5
 8017626:	4620      	mov	r0, r4
 8017628:	2242      	movs	r2, #66	; 0x42
 801762a:	f004 ffdb 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y, '-');
 801762e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8017632:	4629      	mov	r1, r5
 8017634:	222d      	movs	r2, #45	; 0x2d
 8017636:	b280      	uxth	r0, r0
 8017638:	f004 ffd4 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y, 'G');
 801763c:	f104 001d 	add.w	r0, r4, #29
 8017640:	4629      	mov	r1, r5
 8017642:	2247      	movs	r2, #71	; 0x47
 8017644:	b280      	uxth	r0, r0
 8017646:	f004 ffcd 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y, '-');
 801764a:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 801764e:	4629      	mov	r1, r5
 8017650:	222d      	movs	r2, #45	; 0x2d
 8017652:	b280      	uxth	r0, r0
 8017654:	f004 ffc6 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y, 'R');	
 8017658:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 801765c:	4629      	mov	r1, r5
 801765e:	2252      	movs	r2, #82	; 0x52
 8017660:	b280      	uxth	r0, r0
 8017662:	f004 ffbf 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y, 'F');
 8017666:	f104 0057 	add.w	r0, r4, #87	; 0x57
 801766a:	4629      	mov	r1, r5
 801766c:	2246      	movs	r2, #70	; 0x46
 801766e:	b280      	uxth	r0, r0
 8017670:	f004 ffb8 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, 'R');
 8017674:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8017678:	4629      	mov	r1, r5
 801767a:	2252      	movs	r2, #82	; 0x52
 801767c:	b280      	uxth	r0, r0
}
 801767e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, 'R');
 8017682:	f004 bfaf 	b.w	801c5e4 <TFT_DrawChar>
 8017686:	bf00      	nop
 8017688:	200001b8 	.word	0x200001b8

0801768c <GUI_TextEn_CCT>:
	TFT_DrawChar(X, Y, 'L');
	TFT_SetFont(&Font11EN_arch_big);
	TFT_DrawChar(X+17, Y+7, 'R');
}
void GUI_TextEn_CCT(uint16_t X, uint16_t Y)
{
 801768c:	b538      	push	{r3, r4, r5, lr}
 801768e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017690:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017694:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017696:	f004 fee1 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801769a:	2063      	movs	r0, #99	; 0x63
 801769c:	f004 fee4 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 80176a0:	480b      	ldr	r0, [pc, #44]	; (80176d0 <GUI_TextEn_CCT+0x44>)
 80176a2:	f004 fed5 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C'-33);
 80176a6:	4629      	mov	r1, r5
 80176a8:	4620      	mov	r0, r4
 80176aa:	2222      	movs	r2, #34	; 0x22
 80176ac:	f004 ff9a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y, 'C'-33);
 80176b0:	f104 0017 	add.w	r0, r4, #23
 80176b4:	4629      	mov	r1, r5
 80176b6:	2222      	movs	r2, #34	; 0x22
 80176b8:	b280      	uxth	r0, r0
 80176ba:	f004 ff93 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y, 'T'-33);
 80176be:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 80176c2:	4629      	mov	r1, r5
 80176c4:	2233      	movs	r2, #51	; 0x33
 80176c6:	b280      	uxth	r0, r0
}
 80176c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+46, Y, 'T'-33);
 80176cc:	f004 bf8a 	b.w	801c5e4 <TFT_DrawChar>
 80176d0:	200001e8 	.word	0x200001e8

080176d4 <GUI_TextEn_W_m2>:

/* Measure dimensions */
void GUI_TextEn_W_m2(uint16_t X, uint16_t Y)
{
 80176d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176d6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80176d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80176dc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80176de:	f004 febd 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80176e2:	2063      	movs	r0, #99	; 0x63
 80176e4:	f004 fec0 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 80176e8:	4815      	ldr	r0, [pc, #84]	; (8017740 <GUI_TextEn_W_m2+0x6c>)
 80176ea:	f004 feb1 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+3, Y, 'W');
 80176ee:	1ce8      	adds	r0, r5, #3
 80176f0:	4621      	mov	r1, r4
 80176f2:	2257      	movs	r2, #87	; 0x57
 80176f4:	b280      	uxth	r0, r0
 80176f6:	f004 ff75 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 80176fa:	f104 0111 	add.w	r1, r4, #17
 80176fe:	1c68      	adds	r0, r5, #1
 8017700:	226d      	movs	r2, #109	; 0x6d
 8017702:	b289      	uxth	r1, r1
 8017704:	b280      	uxth	r0, r0
 8017706:	f004 ff6d 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 801770a:	480e      	ldr	r0, [pc, #56]	; (8017744 <GUI_TextEn_W_m2+0x70>)
 801770c:	f004 fea0 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');	
 8017710:	f104 0110 	add.w	r1, r4, #16
 8017714:	f105 000b 	add.w	r0, r5, #11
 8017718:	2232      	movs	r2, #50	; 0x32
 801771a:	b289      	uxth	r1, r1
 801771c:	b280      	uxth	r0, r0
 801771e:	f004 ff61 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8017722:	f104 030e 	add.w	r3, r4, #14
 8017726:	b29b      	uxth	r3, r3
 8017728:	f105 0211 	add.w	r2, r5, #17
 801772c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017730:	9100      	str	r1, [sp, #0]
 8017732:	b292      	uxth	r2, r2
 8017734:	4619      	mov	r1, r3
 8017736:	4628      	mov	r0, r5
 8017738:	f004 fc04 	bl	801bf44 <TFT_DrawLine>
}
 801773c:	b003      	add	sp, #12
 801773e:	bd30      	pop	{r4, r5, pc}
 8017740:	20000220 	.word	0x20000220
 8017744:	20000210 	.word	0x20000210

08017748 <GUI_TextEn_W_m2_sr>:
void GUI_TextEn_W_m2_sr(uint16_t X, uint16_t Y)
{
 8017748:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801774a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801774c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017750:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017752:	f004 fe83 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017756:	2063      	movs	r0, #99	; 0x63
 8017758:	f004 fe86 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 801775c:	4824      	ldr	r0, [pc, #144]	; (80177f0 <GUI_TextEn_W_m2_sr+0xa8>)
 801775e:	f004 fe77 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+12, Y, 'W');
 8017762:	f105 000c 	add.w	r0, r5, #12
 8017766:	4621      	mov	r1, r4
 8017768:	2257      	movs	r2, #87	; 0x57
 801776a:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 801776c:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+12, Y, 'W');
 8017770:	f004 ff38 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8017774:	b2b6      	uxth	r6, r6
 8017776:	f105 0014 	add.w	r0, r5, #20
 801777a:	4631      	mov	r1, r6
 801777c:	226d      	movs	r2, #109	; 0x6d
 801777e:	b280      	uxth	r0, r0
 8017780:	f004 ff30 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8017784:	4631      	mov	r1, r6
 8017786:	4628      	mov	r0, r5
 8017788:	2273      	movs	r2, #115	; 0x73
 801778a:	f004 ff2b 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 801778e:	1de8      	adds	r0, r5, #7
 8017790:	4631      	mov	r1, r6
 8017792:	2272      	movs	r2, #114	; 0x72
 8017794:	b280      	uxth	r0, r0
 8017796:	f004 ff25 	bl	801c5e4 <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 801779a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801779e:	f104 0318 	add.w	r3, r4, #24
 80177a2:	f105 0212 	add.w	r2, r5, #18
 80177a6:	f104 0117 	add.w	r1, r4, #23
 80177aa:	f105 0011 	add.w	r0, r5, #17
 80177ae:	b29b      	uxth	r3, r3
 80177b0:	b292      	uxth	r2, r2
 80177b2:	b289      	uxth	r1, r1
 80177b4:	9600      	str	r6, [sp, #0]
 80177b6:	b280      	uxth	r0, r0
 80177b8:	f004 fc21 	bl	801bffe <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 80177bc:	480d      	ldr	r0, [pc, #52]	; (80177f4 <GUI_TextEn_W_m2_sr+0xac>)
 80177be:	f004 fe47 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');	
 80177c2:	f104 0110 	add.w	r1, r4, #16
 80177c6:	f105 001e 	add.w	r0, r5, #30
 80177ca:	2232      	movs	r2, #50	; 0x32
 80177cc:	b289      	uxth	r1, r1
 80177ce:	b280      	uxth	r0, r0
 80177d0:	f004 ff08 	bl	801c5e4 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 80177d4:	f104 030e 	add.w	r3, r4, #14
 80177d8:	b29b      	uxth	r3, r3
 80177da:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80177de:	9600      	str	r6, [sp, #0]
 80177e0:	b292      	uxth	r2, r2
 80177e2:	4619      	mov	r1, r3
 80177e4:	4628      	mov	r0, r5
 80177e6:	f004 fbad 	bl	801bf44 <TFT_DrawLine>
}
 80177ea:	b002      	add	sp, #8
 80177ec:	bd70      	pop	{r4, r5, r6, pc}
 80177ee:	bf00      	nop
 80177f0:	20000220 	.word	0x20000220
 80177f4:	20000210 	.word	0x20000210

080177f8 <GUI_TextEn_cd_m2>:
void GUI_TextEn_cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 80177f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80177fc:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80177fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017802:	460d      	mov	r5, r1
 8017804:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 8017806:	f004 fe29 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801780a:	2063      	movs	r0, #99	; 0x63
 801780c:	f004 fe2c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017810:	482f      	ldr	r0, [pc, #188]	; (80178d0 <GUI_TextEn_cd_m2+0xd8>)
 8017812:	f004 fe1d 	bl	801c450 <TFT_SetFont>
	
	if (deg==1)
 8017816:	2e01      	cmp	r6, #1
 8017818:	f105 0911 	add.w	r9, r5, #17
 801781c:	f105 0810 	add.w	r8, r5, #16
 8017820:	f105 060e 	add.w	r6, r5, #14
 8017824:	d131      	bne.n	801788a <GUI_TextEn_cd_m2+0x92>
	{
		TFT_DrawChar(X, Y, 'k');
 8017826:	226b      	movs	r2, #107	; 0x6b
 8017828:	4629      	mov	r1, r5
 801782a:	4620      	mov	r0, r4
 801782c:	f004 feda 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+7, Y, 'c');
 8017830:	1de0      	adds	r0, r4, #7
 8017832:	2263      	movs	r2, #99	; 0x63
 8017834:	4629      	mov	r1, r5
 8017836:	b280      	uxth	r0, r0
 8017838:	f004 fed4 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+14, Y, 'd');
 801783c:	f104 000e 	add.w	r0, r4, #14
 8017840:	2264      	movs	r2, #100	; 0x64
 8017842:	4629      	mov	r1, r5
 8017844:	b280      	uxth	r0, r0
 8017846:	f004 fecd 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(X+5, Y+17, 'm');
 801784a:	1d60      	adds	r0, r4, #5
 801784c:	226d      	movs	r2, #109	; 0x6d
 801784e:	fa1f f189 	uxth.w	r1, r9
 8017852:	b280      	uxth	r0, r0
 8017854:	f004 fec6 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8017858:	481e      	ldr	r0, [pc, #120]	; (80178d4 <GUI_TextEn_cd_m2+0xdc>)
 801785a:	f004 fdf9 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+16, '2');	
 801785e:	f104 000f 	add.w	r0, r4, #15
 8017862:	2232      	movs	r2, #50	; 0x32
 8017864:	fa1f f188 	uxth.w	r1, r8
 8017868:	b280      	uxth	r0, r0
 801786a:	f004 febb 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+22, Y+14, TFT_White);
 801786e:	b2b3      	uxth	r3, r6
 8017870:	f104 0216 	add.w	r2, r4, #22
		TFT_DrawChar(X+9, Y, 'd');
		
		TFT_DrawChar(X+2, Y+17, 'm');
		TFT_SetFont(&Font6EN_arch_big);
		TFT_DrawChar(X+12, Y+16, '2');	
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8017874:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017878:	9100      	str	r1, [sp, #0]
 801787a:	b292      	uxth	r2, r2
 801787c:	4619      	mov	r1, r3
 801787e:	4620      	mov	r0, r4
 8017880:	f004 fb60 	bl	801bf44 <TFT_DrawLine>
	}
}
 8017884:	b003      	add	sp, #12
 8017886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		TFT_DrawChar(X+2, Y, 'c');
 801788a:	1ca7      	adds	r7, r4, #2
 801788c:	b2bf      	uxth	r7, r7
 801788e:	2263      	movs	r2, #99	; 0x63
 8017890:	4629      	mov	r1, r5
 8017892:	4638      	mov	r0, r7
 8017894:	f004 fea6 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+9, Y, 'd');
 8017898:	f104 0009 	add.w	r0, r4, #9
 801789c:	2264      	movs	r2, #100	; 0x64
 801789e:	4629      	mov	r1, r5
 80178a0:	b280      	uxth	r0, r0
 80178a2:	f004 fe9f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+2, Y+17, 'm');
 80178a6:	226d      	movs	r2, #109	; 0x6d
 80178a8:	fa1f f189 	uxth.w	r1, r9
 80178ac:	4638      	mov	r0, r7
 80178ae:	f004 fe99 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 80178b2:	4808      	ldr	r0, [pc, #32]	; (80178d4 <GUI_TextEn_cd_m2+0xdc>)
 80178b4:	f004 fdcc 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X+12, Y+16, '2');	
 80178b8:	f104 000c 	add.w	r0, r4, #12
 80178bc:	2232      	movs	r2, #50	; 0x32
 80178be:	fa1f f188 	uxth.w	r1, r8
 80178c2:	b280      	uxth	r0, r0
 80178c4:	f004 fe8e 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 80178c8:	b2b3      	uxth	r3, r6
 80178ca:	f104 0213 	add.w	r2, r4, #19
 80178ce:	e7d1      	b.n	8017874 <GUI_TextEn_cd_m2+0x7c>
 80178d0:	20000220 	.word	0x20000220
 80178d4:	20000210 	.word	0x20000210

080178d8 <GUI_TextEn_Green>:
	TFT_DrawChar(X+23, Y+16, '2');

  TFT_DrawLine(X, Y+14, X+30, Y+14, TFT_White);	
}
void GUI_TextEn_Green(uint16_t X, uint16_t Y)
{
 80178d8:	b538      	push	{r3, r4, r5, lr}
 80178da:	4605      	mov	r5, r0
 80178dc:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 80178de:	4815      	ldr	r0, [pc, #84]	; (8017934 <GUI_TextEn_Green+0x5c>)
 80178e0:	f004 fdb6 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'G');
 80178e4:	4621      	mov	r1, r4
 80178e6:	2247      	movs	r2, #71	; 0x47
 80178e8:	4628      	mov	r0, r5
 80178ea:	f004 fe7b 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+15, Y+2, 'r');
 80178ee:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 80178f0:	4811      	ldr	r0, [pc, #68]	; (8017938 <GUI_TextEn_Green+0x60>)
 80178f2:	f004 fdad 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'r');
 80178f6:	b2a4      	uxth	r4, r4
 80178f8:	f105 000f 	add.w	r0, r5, #15
 80178fc:	4621      	mov	r1, r4
 80178fe:	2272      	movs	r2, #114	; 0x72
 8017900:	b280      	uxth	r0, r0
 8017902:	f004 fe6f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+26, Y+2, 'e');
 8017906:	f105 001a 	add.w	r0, r5, #26
 801790a:	4621      	mov	r1, r4
 801790c:	2265      	movs	r2, #101	; 0x65
 801790e:	b280      	uxth	r0, r0
 8017910:	f004 fe68 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+38, Y+2, 'e');
 8017914:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8017918:	4621      	mov	r1, r4
 801791a:	2265      	movs	r2, #101	; 0x65
 801791c:	b280      	uxth	r0, r0
 801791e:	f004 fe61 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+50, Y+2, 'n');
 8017922:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8017926:	4621      	mov	r1, r4
 8017928:	226e      	movs	r2, #110	; 0x6e
 801792a:	b280      	uxth	r0, r0
}
 801792c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+50, Y+2, 'n');
 8017930:	f004 be58 	b.w	801c5e4 <TFT_DrawChar>
 8017934:	200001b0 	.word	0x200001b0
 8017938:	200001c0 	.word	0x200001c0

0801793c <GUI_TextEn_Blue>:
void GUI_TextEn_Blue(uint16_t X, uint16_t Y)
{
 801793c:	b538      	push	{r3, r4, r5, lr}
 801793e:	4605      	mov	r5, r0
 8017940:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8017942:	4812      	ldr	r0, [pc, #72]	; (801798c <GUI_TextEn_Blue+0x50>)
 8017944:	f004 fd84 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'B');
 8017948:	4621      	mov	r1, r4
 801794a:	2242      	movs	r2, #66	; 0x42
 801794c:	4628      	mov	r0, r5
 801794e:	f004 fe49 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small_A);
		TFT_DrawChar(X+15, Y+2, 'l');
 8017952:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small_A);
 8017954:	480e      	ldr	r0, [pc, #56]	; (8017990 <GUI_TextEn_Blue+0x54>)
 8017956:	f004 fd7b 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'l');
 801795a:	b2a4      	uxth	r4, r4
 801795c:	f105 000f 	add.w	r0, r5, #15
 8017960:	4621      	mov	r1, r4
 8017962:	226c      	movs	r2, #108	; 0x6c
 8017964:	b280      	uxth	r0, r0
 8017966:	f004 fe3d 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+20, Y+2, 'u');
 801796a:	f105 0014 	add.w	r0, r5, #20
 801796e:	4621      	mov	r1, r4
 8017970:	2275      	movs	r2, #117	; 0x75
 8017972:	b280      	uxth	r0, r0
 8017974:	f004 fe36 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+33, Y+2, 'e');
 8017978:	f105 0021 	add.w	r0, r5, #33	; 0x21
 801797c:	4621      	mov	r1, r4
 801797e:	2265      	movs	r2, #101	; 0x65
 8017980:	b280      	uxth	r0, r0
}
 8017982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+33, Y+2, 'e');
 8017986:	f004 be2d 	b.w	801c5e4 <TFT_DrawChar>
 801798a:	bf00      	nop
 801798c:	200001b0 	.word	0x200001b0
 8017990:	200001c8 	.word	0x200001c8

08017994 <GUI_TextEn_Red>:
void GUI_TextEn_Red(uint16_t X, uint16_t Y)
{
 8017994:	b538      	push	{r3, r4, r5, lr}
 8017996:	4605      	mov	r5, r0
 8017998:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 801799a:	480e      	ldr	r0, [pc, #56]	; (80179d4 <GUI_TextEn_Red+0x40>)
 801799c:	f004 fd58 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'R');
 80179a0:	4621      	mov	r1, r4
 80179a2:	2252      	movs	r2, #82	; 0x52
 80179a4:	4628      	mov	r0, r5
 80179a6:	f004 fe1d 	bl	801c5e4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+16, Y+2, 'e');
 80179aa:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 80179ac:	480a      	ldr	r0, [pc, #40]	; (80179d8 <GUI_TextEn_Red+0x44>)
 80179ae:	f004 fd4f 	bl	801c450 <TFT_SetFont>
		TFT_DrawChar(X+16, Y+2, 'e');
 80179b2:	b2a4      	uxth	r4, r4
 80179b4:	f105 0010 	add.w	r0, r5, #16
 80179b8:	4621      	mov	r1, r4
 80179ba:	2265      	movs	r2, #101	; 0x65
 80179bc:	b280      	uxth	r0, r0
 80179be:	f004 fe11 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(X+29, Y+2, 'd');
 80179c2:	f105 001d 	add.w	r0, r5, #29
 80179c6:	4621      	mov	r1, r4
 80179c8:	2264      	movs	r2, #100	; 0x64
 80179ca:	b280      	uxth	r0, r0
}
 80179cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+29, Y+2, 'd');
 80179d0:	f004 be08 	b.w	801c5e4 <TFT_DrawChar>
 80179d4:	200001b0 	.word	0x200001b0
 80179d8:	200001c0 	.word	0x200001c0

080179dc <GUI_TextEn_WriteSD>:

void GUI_TextEn_WriteSD(uint16_t X, uint16_t Y)
{
 80179dc:	b538      	push	{r3, r4, r5, lr}
 80179de:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80179e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80179e4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80179e6:	f004 fd39 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80179ea:	2063      	movs	r0, #99	; 0x63
 80179ec:	f004 fd3c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80179f0:	4815      	ldr	r0, [pc, #84]	; (8017a48 <GUI_TextEn_WriteSD+0x6c>)
 80179f2:	f004 fd2d 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'W');
 80179f6:	4621      	mov	r1, r4
 80179f8:	2257      	movs	r2, #87	; 0x57
 80179fa:	4628      	mov	r0, r5
 80179fc:	f004 fdf2 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+17, Y+2, 'r');
 8017a00:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8017a02:	4812      	ldr	r0, [pc, #72]	; (8017a4c <GUI_TextEn_WriteSD+0x70>)
 8017a04:	f004 fd24 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'r');
 8017a08:	b2a4      	uxth	r4, r4
 8017a0a:	f105 0011 	add.w	r0, r5, #17
 8017a0e:	4621      	mov	r1, r4
 8017a10:	2272      	movs	r2, #114	; 0x72
 8017a12:	b280      	uxth	r0, r0
 8017a14:	f004 fde6 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'i');
 8017a18:	f105 001c 	add.w	r0, r5, #28
 8017a1c:	4621      	mov	r1, r4
 8017a1e:	2269      	movs	r2, #105	; 0x69
 8017a20:	b280      	uxth	r0, r0
 8017a22:	f004 fddf 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 't');
 8017a26:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017a2a:	4621      	mov	r1, r4
 8017a2c:	2274      	movs	r2, #116	; 0x74
 8017a2e:	b280      	uxth	r0, r0
 8017a30:	f004 fdd8 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 'e');
 8017a34:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8017a38:	4621      	mov	r1, r4
 8017a3a:	2265      	movs	r2, #101	; 0x65
 8017a3c:	b280      	uxth	r0, r0
}
 8017a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+53, Y+2, 'e');
 8017a42:	f004 bdcf 	b.w	801c5e4 <TFT_DrawChar>
 8017a46:	bf00      	nop
 8017a48:	200001b0 	.word	0x200001b0
 8017a4c:	200001c0 	.word	0x200001c0

08017a50 <GUI_TextEn_Info_Callibration>:


void GUI_TextEn_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8017a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a52:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8017a54:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017a58:	2300      	movs	r3, #0
 8017a5a:	9300      	str	r3, [sp, #0]
 8017a5c:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8017a60:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 8017a62:	f004 fcfb 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017a66:	2063      	movs	r0, #99	; 0x63
 8017a68:	f004 fcfe 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017a6c:	4834      	ldr	r0, [pc, #208]	; (8017b40 <GUI_TextEn_Info_Callibration+0xf0>)
	TFT_DrawChar(X+89, Y+2, 't');
	TFT_DrawChar(X+97, Y+2, 'i');
	TFT_DrawChar(X+108, Y+2, 'o');
	TFT_DrawChar(X+120, Y+2, 'n');
	
	sprintf (buffer, "%02u",  date);
 8017a6e:	4d35      	ldr	r5, [pc, #212]	; (8017b44 <GUI_TextEn_Info_Callibration+0xf4>)
	TFT_SetFont(&Font16EN_arch_big);
 8017a70:	f004 fcee 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8017a74:	2243      	movs	r2, #67	; 0x43
 8017a76:	2164      	movs	r1, #100	; 0x64
 8017a78:	2046      	movs	r0, #70	; 0x46
 8017a7a:	f004 fdb3 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017a7e:	4832      	ldr	r0, [pc, #200]	; (8017b48 <GUI_TextEn_Info_Callibration+0xf8>)
 8017a80:	f004 fce6 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 8017a84:	2261      	movs	r2, #97	; 0x61
 8017a86:	2166      	movs	r1, #102	; 0x66
 8017a88:	2056      	movs	r0, #86	; 0x56
 8017a8a:	f004 fdab 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'l');
 8017a8e:	226c      	movs	r2, #108	; 0x6c
 8017a90:	2166      	movs	r1, #102	; 0x66
 8017a92:	2063      	movs	r0, #99	; 0x63
 8017a94:	f004 fda6 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+38, Y+2, 'i');
 8017a98:	2269      	movs	r2, #105	; 0x69
 8017a9a:	2166      	movs	r1, #102	; 0x66
 8017a9c:	206c      	movs	r0, #108	; 0x6c
 8017a9e:	f004 fda1 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+2, 'b');
 8017aa2:	2262      	movs	r2, #98	; 0x62
 8017aa4:	2166      	movs	r1, #102	; 0x66
 8017aa6:	2078      	movs	r0, #120	; 0x78
 8017aa8:	f004 fd9c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y+2, 'r');
 8017aac:	2272      	movs	r2, #114	; 0x72
 8017aae:	2166      	movs	r1, #102	; 0x66
 8017ab0:	2085      	movs	r0, #133	; 0x85
 8017ab2:	f004 fd97 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'a');
 8017ab6:	2261      	movs	r2, #97	; 0x61
 8017ab8:	2166      	movs	r1, #102	; 0x66
 8017aba:	2092      	movs	r0, #146	; 0x92
 8017abc:	f004 fd92 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 't');
 8017ac0:	2274      	movs	r2, #116	; 0x74
 8017ac2:	2166      	movs	r1, #102	; 0x66
 8017ac4:	209f      	movs	r0, #159	; 0x9f
 8017ac6:	f004 fd8d 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+97, Y+2, 'i');
 8017aca:	2269      	movs	r2, #105	; 0x69
 8017acc:	2166      	movs	r1, #102	; 0x66
 8017ace:	20a7      	movs	r0, #167	; 0xa7
 8017ad0:	f004 fd88 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+108, Y+2, 'o');
 8017ad4:	226f      	movs	r2, #111	; 0x6f
 8017ad6:	2166      	movs	r1, #102	; 0x66
 8017ad8:	20b2      	movs	r0, #178	; 0xb2
 8017ada:	f004 fd83 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y+2, 'n');
 8017ade:	226e      	movs	r2, #110	; 0x6e
 8017ae0:	2166      	movs	r1, #102	; 0x66
 8017ae2:	20be      	movs	r0, #190	; 0xbe
 8017ae4:	f004 fd7e 	bl	801c5e4 <TFT_DrawChar>
	sprintf (buffer, "%02u",  date);
 8017ae8:	4622      	mov	r2, r4
 8017aea:	4629      	mov	r1, r5
 8017aec:	4668      	mov	r0, sp
 8017aee:	f007 ff8b 	bl	801fa08 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8017af2:	4816      	ldr	r0, [pc, #88]	; (8017b4c <GUI_TextEn_Info_Callibration+0xfc>)
 8017af4:	f004 fcac 	bl	801c450 <TFT_SetFont>
	buffer[2] = '.';
 8017af8:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017afa:	2303      	movs	r3, #3
 8017afc:	466a      	mov	r2, sp
 8017afe:	2182      	movs	r1, #130	; 0x82
 8017b00:	201e      	movs	r0, #30
	buffer[2] = '.';
 8017b02:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017b06:	f004 fdc5 	bl	801c694 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 8017b0a:	4632      	mov	r2, r6
 8017b0c:	4629      	mov	r1, r5
 8017b0e:	4668      	mov	r0, sp
 8017b10:	f007 ff7a 	bl	801fa08 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017b14:	2303      	movs	r3, #3
 8017b16:	466a      	mov	r2, sp
 8017b18:	2182      	movs	r1, #130	; 0x82
 8017b1a:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 8017b1c:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017b20:	f004 fdb8 	bl	801c694 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 8017b24:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8017b28:	4909      	ldr	r1, [pc, #36]	; (8017b50 <GUI_TextEn_Info_Callibration+0x100>)
 8017b2a:	4668      	mov	r0, sp
 8017b2c:	f007 ff6c 	bl	801fa08 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017b30:	2303      	movs	r3, #3
 8017b32:	466a      	mov	r2, sp
 8017b34:	2182      	movs	r1, #130	; 0x82
 8017b36:	209b      	movs	r0, #155	; 0x9b
 8017b38:	f004 fdac 	bl	801c694 <TFT_DisplayString>
}
 8017b3c:	b002      	add	sp, #8
 8017b3e:	bd70      	pop	{r4, r5, r6, pc}
 8017b40:	200001b0 	.word	0x200001b0
 8017b44:	08031464 	.word	0x08031464
 8017b48:	200001c0 	.word	0x200001c0
 8017b4c:	200001f0 	.word	0x200001f0
 8017b50:	08031469 	.word	0x08031469

08017b54 <GUI_TextEn_Info_Serial>:

void GUI_TextEn_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 8017b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b56:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 8017b58:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	9300      	str	r3, [sp, #0]
 8017b60:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8017b64:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 8017b66:	f004 fc79 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017b6a:	2063      	movs	r0, #99	; 0x63
 8017b6c:	f004 fc7c 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017b70:	482e      	ldr	r0, [pc, #184]	; (8017c2c <GUI_TextEn_Info_Serial+0xd8>)
 8017b72:	f004 fc6d 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'S');
 8017b76:	2253      	movs	r2, #83	; 0x53
 8017b78:	21c8      	movs	r1, #200	; 0xc8
 8017b7a:	203c      	movs	r0, #60	; 0x3c
 8017b7c:	f004 fd32 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017b80:	482b      	ldr	r0, [pc, #172]	; (8017c30 <GUI_TextEn_Info_Serial+0xdc>)
 8017b82:	f004 fc65 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'e');
 8017b86:	2265      	movs	r2, #101	; 0x65
 8017b88:	21ca      	movs	r1, #202	; 0xca
 8017b8a:	204d      	movs	r0, #77	; 0x4d
 8017b8c:	f004 fd2a 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'r');
 8017b90:	2272      	movs	r2, #114	; 0x72
 8017b92:	21ca      	movs	r1, #202	; 0xca
 8017b94:	205a      	movs	r0, #90	; 0x5a
 8017b96:	f004 fd25 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'i');
 8017b9a:	2269      	movs	r2, #105	; 0x69
 8017b9c:	21ca      	movs	r1, #202	; 0xca
 8017b9e:	2066      	movs	r0, #102	; 0x66
 8017ba0:	f004 fd20 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+54, Y+2, 'a');
 8017ba4:	2261      	movs	r2, #97	; 0x61
 8017ba6:	21ca      	movs	r1, #202	; 0xca
 8017ba8:	2072      	movs	r0, #114	; 0x72
 8017baa:	f004 fd1b 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+67, Y+2, 'l');
 8017bae:	226c      	movs	r2, #108	; 0x6c
 8017bb0:	21ca      	movs	r1, #202	; 0xca
 8017bb2:	207f      	movs	r0, #127	; 0x7f
 8017bb4:	f004 fd16 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'n');
 8017bb8:	226e      	movs	r2, #110	; 0x6e
 8017bba:	21ca      	movs	r1, #202	; 0xca
 8017bbc:	2095      	movs	r0, #149	; 0x95
 8017bbe:	f004 fd11 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+102, Y+2, 'u');
 8017bc2:	2275      	movs	r2, #117	; 0x75
 8017bc4:	21ca      	movs	r1, #202	; 0xca
 8017bc6:	20a2      	movs	r0, #162	; 0xa2
 8017bc8:	f004 fd0c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+115, Y+2, 'm');
 8017bcc:	226d      	movs	r2, #109	; 0x6d
 8017bce:	21ca      	movs	r1, #202	; 0xca
 8017bd0:	20af      	movs	r0, #175	; 0xaf
 8017bd2:	f004 fd07 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+128, Y+2, 'b');
 8017bd6:	2262      	movs	r2, #98	; 0x62
 8017bd8:	21ca      	movs	r1, #202	; 0xca
 8017bda:	20bc      	movs	r0, #188	; 0xbc
 8017bdc:	f004 fd02 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+141, Y+2, 'e');
 8017be0:	2265      	movs	r2, #101	; 0x65
 8017be2:	21ca      	movs	r1, #202	; 0xca
 8017be4:	20c9      	movs	r0, #201	; 0xc9
 8017be6:	f004 fcfd 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+154, Y+2, 'r');
 8017bea:	2272      	movs	r2, #114	; 0x72
 8017bec:	21ca      	movs	r1, #202	; 0xca
 8017bee:	20d6      	movs	r0, #214	; 0xd6
 8017bf0:	f004 fcf8 	bl	801c5e4 <TFT_DrawChar>

	
	sprintf (buffer, "%u",  Part);
 8017bf4:	462a      	mov	r2, r5
 8017bf6:	490f      	ldr	r1, [pc, #60]	; (8017c34 <GUI_TextEn_Info_Serial+0xe0>)
 8017bf8:	4668      	mov	r0, sp
 8017bfa:	f007 ff05 	bl	801fa08 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8017bfe:	480e      	ldr	r0, [pc, #56]	; (8017c38 <GUI_TextEn_Info_Serial+0xe4>)
 8017c00:	f004 fc26 	bl	801c450 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017c04:	2303      	movs	r3, #3
 8017c06:	466a      	mov	r2, sp
 8017c08:	21e6      	movs	r1, #230	; 0xe6
 8017c0a:	2028      	movs	r0, #40	; 0x28
 8017c0c:	f004 fd42 	bl	801c694 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 8017c10:	4622      	mov	r2, r4
 8017c12:	490a      	ldr	r1, [pc, #40]	; (8017c3c <GUI_TextEn_Info_Serial+0xe8>)
 8017c14:	4668      	mov	r0, sp
 8017c16:	f007 fef7 	bl	801fa08 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017c1a:	2303      	movs	r3, #3
 8017c1c:	466a      	mov	r2, sp
 8017c1e:	21e6      	movs	r1, #230	; 0xe6
 8017c20:	2087      	movs	r0, #135	; 0x87
 8017c22:	f004 fd37 	bl	801c694 <TFT_DisplayString>
}
 8017c26:	b003      	add	sp, #12
 8017c28:	bd30      	pop	{r4, r5, pc}
 8017c2a:	bf00      	nop
 8017c2c:	200001b0 	.word	0x200001b0
 8017c30:	200001c0 	.word	0x200001c0
 8017c34:	0803146d 	.word	0x0803146d
 8017c38:	200001f0 	.word	0x200001f0
 8017c3c:	08031470 	.word	0x08031470

08017c40 <GUI_TextEn_Info_Ver>:

void GUI_TextEn_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 8017c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 8017c42:	2300      	movs	r3, #0
	
	X = 20;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8017c44:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017c48:	9302      	str	r3, [sp, #8]
 8017c4a:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8017c4e:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 8017c52:	f004 fc03 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017c56:	2063      	movs	r0, #99	; 0x63
 8017c58:	f004 fc06 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017c5c:	482e      	ldr	r0, [pc, #184]	; (8017d18 <GUI_TextEn_Info_Ver+0xd8>)
	TFT_DrawChar(X+55, Y+2, 'w');
	TFT_DrawChar(X+70, Y+2, 'a');
	TFT_DrawChar(X+86, Y+2, 'r');
	TFT_DrawChar(X+99, Y+2, 'e');
	
	TFT_SetFont(&Font16);
 8017c5e:	4c2f      	ldr	r4, [pc, #188]	; (8017d1c <GUI_TextEn_Info_Ver+0xdc>)
	TFT_SetFont(&Font16EN_arch_big);
 8017c60:	f004 fbf6 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'F');
 8017c64:	2246      	movs	r2, #70	; 0x46
 8017c66:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017c6a:	2014      	movs	r0, #20
 8017c6c:	f004 fcba 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017c70:	482b      	ldr	r0, [pc, #172]	; (8017d20 <GUI_TextEn_Info_Ver+0xe0>)
 8017c72:	f004 fbed 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'i');
 8017c76:	2269      	movs	r2, #105	; 0x69
 8017c78:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017c7c:	2024      	movs	r0, #36	; 0x24
 8017c7e:	f004 fcb1 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'r');
 8017c82:	2272      	movs	r2, #114	; 0x72
 8017c84:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017c88:	202f      	movs	r0, #47	; 0x2f
 8017c8a:	f004 fcab 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y+2, 'm');
 8017c8e:	226d      	movs	r2, #109	; 0x6d
 8017c90:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017c94:	203c      	movs	r0, #60	; 0x3c
 8017c96:	f004 fca5 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+55, Y+2, 'w');
 8017c9a:	2277      	movs	r2, #119	; 0x77
 8017c9c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017ca0:	204b      	movs	r0, #75	; 0x4b
 8017ca2:	f004 fc9f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'a');
 8017ca6:	2261      	movs	r2, #97	; 0x61
 8017ca8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017cac:	205a      	movs	r0, #90	; 0x5a
 8017cae:	f004 fc99 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+86, Y+2, 'r');
 8017cb2:	2272      	movs	r2, #114	; 0x72
 8017cb4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017cb8:	206a      	movs	r0, #106	; 0x6a
 8017cba:	f004 fc93 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8017cbe:	2265      	movs	r2, #101	; 0x65
 8017cc0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8017cc4:	2077      	movs	r0, #119	; 0x77
 8017cc6:	f004 fc8d 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16);
 8017cca:	4620      	mov	r0, r4
 8017ccc:	f004 fbc0 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+152, Y, '.');
 8017cd0:	222e      	movs	r2, #46	; 0x2e
 8017cd2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017cd6:	20ac      	movs	r0, #172	; 0xac
 8017cd8:	f004 fc84 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+142, Y, 'v');
 8017cdc:	2276      	movs	r2, #118	; 0x76
 8017cde:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017ce2:	20a2      	movs	r0, #162	; 0xa2
 8017ce4:	f004 fc7e 	bl	801c5e4 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 8017ce8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017cec:	ee10 0a10 	vmov	r0, s0
 8017cf0:	f7e8 fc42 	bl	8000578 <__aeabi_f2d>
 8017cf4:	4602      	mov	r2, r0
 8017cf6:	460b      	mov	r3, r1
 8017cf8:	a802      	add	r0, sp, #8
 8017cfa:	490a      	ldr	r1, [pc, #40]	; (8017d24 <GUI_TextEn_Info_Ver+0xe4>)
 8017cfc:	f007 fe84 	bl	801fa08 <sprintf>
	TFT_SetFont(&Font16);
 8017d00:	4620      	mov	r0, r4
 8017d02:	f004 fba5 	bl	801c450 <TFT_SetFont>
	TFT_DisplayString(X+172, Y, (uint8_t *)buffer, LEFT_MODE);
 8017d06:	2303      	movs	r3, #3
 8017d08:	aa02      	add	r2, sp, #8
 8017d0a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8017d0e:	20c0      	movs	r0, #192	; 0xc0
 8017d10:	f004 fcc0 	bl	801c694 <TFT_DisplayString>
 8017d14:	b004      	add	sp, #16
 8017d16:	bd10      	pop	{r4, pc}
 8017d18:	200001b0 	.word	0x200001b0
 8017d1c:	200001a8 	.word	0x200001a8
 8017d20:	200001c0 	.word	0x200001c0
 8017d24:	08031455 	.word	0x08031455

08017d28 <GUI_TitleString_Name>:
#include "stdio.h"
#include "GUI_Text_Elements_RU.h"

void GUI_TitleString_Name(uint16_t X, uint16_t Y)
{
 8017d28:	b538      	push	{r3, r4, r5, lr}
 8017d2a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017d2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017d30:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017d32:	f004 fb93 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 8017d36:	2084      	movs	r0, #132	; 0x84
 8017d38:	f004 fb96 	bl	801c468 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8017d3c:	4825      	ldr	r0, [pc, #148]	; (8017dd4 <GUI_TitleString_Name+0xac>)
 8017d3e:	f004 fb87 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'T');
 8017d42:	4629      	mov	r1, r5
 8017d44:	4620      	mov	r0, r4
 8017d46:	2254      	movs	r2, #84	; 0x54
 8017d48:	f004 fc4c 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+15, 	Y, 'K');
 8017d4c:	f104 000f 	add.w	r0, r4, #15
 8017d50:	4629      	mov	r1, r5
 8017d52:	224b      	movs	r2, #75	; 0x4b
 8017d54:	b280      	uxth	r0, r0
 8017d56:	f004 fc45 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+30, 	Y, 'A');
 8017d5a:	f104 001e 	add.w	r0, r4, #30
 8017d5e:	4629      	mov	r1, r5
 8017d60:	2241      	movs	r2, #65	; 0x41
 8017d62:	b280      	uxth	r0, r0
 8017d64:	f004 fc3e 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+45, 	Y, '-');
 8017d68:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 8017d6c:	4629      	mov	r1, r5
 8017d6e:	222d      	movs	r2, #45	; 0x2d
 8017d70:	b280      	uxth	r0, r0
 8017d72:	f004 fc37 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+60, 	Y, 'S');
 8017d76:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8017d7a:	4629      	mov	r1, r5
 8017d7c:	2253      	movs	r2, #83	; 0x53
 8017d7e:	b280      	uxth	r0, r0
 8017d80:	f004 fc30 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017d84:	4814      	ldr	r0, [pc, #80]	; (8017dd8 <GUI_TitleString_Name+0xb0>)
 8017d86:	f004 fb63 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+75, 	Y, 'p');
 8017d8a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8017d8e:	4629      	mov	r1, r5
 8017d90:	2270      	movs	r2, #112	; 0x70
 8017d92:	b280      	uxth	r0, r0
 8017d94:	f004 fc26 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+88, 	Y, 'e');
 8017d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017d9c:	4629      	mov	r1, r5
 8017d9e:	2265      	movs	r2, #101	; 0x65
 8017da0:	b280      	uxth	r0, r0
 8017da2:	f004 fc1f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+99, 	Y, 'c');
 8017da6:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8017daa:	4629      	mov	r1, r5
 8017dac:	2263      	movs	r2, #99	; 0x63
 8017dae:	b280      	uxth	r0, r0
 8017db0:	f004 fc18 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+109, 	Y, 't');
 8017db4:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8017db8:	4629      	mov	r1, r5
 8017dba:	2274      	movs	r2, #116	; 0x74
 8017dbc:	b280      	uxth	r0, r0
 8017dbe:	f004 fc11 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+120, 	Y, 'r');
 8017dc2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8017dc6:	4629      	mov	r1, r5
 8017dc8:	2272      	movs	r2, #114	; 0x72
 8017dca:	b280      	uxth	r0, r0
}
 8017dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+120, 	Y, 'r');
 8017dd0:	f004 bc08 	b.w	801c5e4 <TFT_DrawChar>
 8017dd4:	200001b0 	.word	0x200001b0
 8017dd8:	200001c0 	.word	0x200001c0

08017ddc <GUI_TitleString_Version>:

void GUI_TitleString_Version(uint16_t X, uint16_t Y, float Version)
{
 8017ddc:	b530      	push	{r4, r5, lr}
 8017dde:	b085      	sub	sp, #20
	char buffer[5] = {0};
 8017de0:	2300      	movs	r3, #0
{
 8017de2:	4604      	mov	r4, r0
	
	TFT_SetTextColor(TFT_White);
 8017de4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017de8:	9302      	str	r3, [sp, #8]
 8017dea:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8017dee:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017df2:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017df4:	f004 fb32 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 8017df8:	2084      	movs	r0, #132	; 0x84
 8017dfa:	f004 fb35 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
 8017dfe:	4815      	ldr	r0, [pc, #84]	; (8017e54 <GUI_TitleString_Version+0x78>)
 8017e00:	f004 fb26 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'v');
 8017e04:	4629      	mov	r1, r5
 8017e06:	2276      	movs	r2, #118	; 0x76
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f004 fbeb 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8017e0e:	4812      	ldr	r0, [pc, #72]	; (8017e58 <GUI_TitleString_Version+0x7c>)
 8017e10:	f004 fb1e 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+13, 		Y, '.');
 8017e14:	f104 000d 	add.w	r0, r4, #13
 8017e18:	222e      	movs	r2, #46	; 0x2e
 8017e1a:	4629      	mov	r1, r5
 8017e1c:	b280      	uxth	r0, r0
 8017e1e:	f004 fbe1 	bl	801c5e4 <TFT_DrawChar>
	sprintf (buffer, "%.1f",  Version);
 8017e22:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017e26:	ee10 0a10 	vmov	r0, s0
 8017e2a:	f7e8 fba5 	bl	8000578 <__aeabi_f2d>
 8017e2e:	4602      	mov	r2, r0
 8017e30:	460b      	mov	r3, r1
 8017e32:	a802      	add	r0, sp, #8
 8017e34:	4909      	ldr	r1, [pc, #36]	; (8017e5c <GUI_TitleString_Version+0x80>)
 8017e36:	f007 fde7 	bl	801fa08 <sprintf>
	TFT_SetFont(&Font16);
 8017e3a:	4809      	ldr	r0, [pc, #36]	; (8017e60 <GUI_TitleString_Version+0x84>)
 8017e3c:	f004 fb08 	bl	801c450 <TFT_SetFont>
	TFT_DisplayString(X+24, Y, (uint8_t *)buffer, LEFT_MODE);
 8017e40:	f104 0018 	add.w	r0, r4, #24
 8017e44:	2303      	movs	r3, #3
 8017e46:	aa02      	add	r2, sp, #8
 8017e48:	4629      	mov	r1, r5
 8017e4a:	b280      	uxth	r0, r0
 8017e4c:	f004 fc22 	bl	801c694 <TFT_DisplayString>
}
 8017e50:	b005      	add	sp, #20
 8017e52:	bd30      	pop	{r4, r5, pc}
 8017e54:	200001c0 	.word	0x200001c0
 8017e58:	200001b0 	.word	0x200001b0
 8017e5c:	08031455 	.word	0x08031455
 8017e60:	200001a8 	.word	0x200001a8

08017e64 <GUI_TextRu_Language>:

void GUI_TextRu_Language(uint16_t X, uint16_t Y)
{
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017e68:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017e6c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017e6e:	f004 faf5 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017e72:	2063      	movs	r0, #99	; 0x63
 8017e74:	f004 faf8 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017e78:	4811      	ldr	r0, [pc, #68]	; (8017ec0 <GUI_TextRu_Language+0x5c>)
 8017e7a:	f004 fae9 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 8017e7e:	4621      	mov	r1, r4
 8017e80:	22af      	movs	r2, #175	; 0xaf
 8017e82:	4628      	mov	r0, r5
 8017e84:	f004 faf6 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8017e88:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017e8a:	480e      	ldr	r0, [pc, #56]	; (8017ec4 <GUI_TextRu_Language+0x60>)
 8017e8c:	f004 fae0 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'з');
 8017e90:	b2a4      	uxth	r4, r4
 8017e92:	f105 000f 	add.w	r0, r5, #15
 8017e96:	4621      	mov	r1, r4
 8017e98:	22b7      	movs	r2, #183	; 0xb7
 8017e9a:	b280      	uxth	r0, r0
 8017e9c:	f004 faea 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ы');
 8017ea0:	f105 001c 	add.w	r0, r5, #28
 8017ea4:	4621      	mov	r1, r4
 8017ea6:	228b      	movs	r2, #139	; 0x8b
 8017ea8:	b280      	uxth	r0, r0
 8017eaa:	f004 fae3 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8017eae:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017eb2:	4621      	mov	r1, r4
 8017eb4:	22ba      	movs	r2, #186	; 0xba
 8017eb6:	b280      	uxth	r0, r0
}
 8017eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8017ebc:	f004 bada 	b.w	801c474 <TFT_DrawCharRus>
 8017ec0:	200001d0 	.word	0x200001d0
 8017ec4:	200001d8 	.word	0x200001d8

08017ec8 <GUI_TextRu_Russian>:

void GUI_TextRu_Russian(uint16_t X, uint16_t Y)
{
 8017ec8:	b538      	push	{r3, r4, r5, lr}
 8017eca:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017ecc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017ed0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017ed2:	f004 fac3 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017ed6:	2063      	movs	r0, #99	; 0x63
 8017ed8:	f004 fac6 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017edc:	481c      	ldr	r0, [pc, #112]	; (8017f50 <GUI_TextRu_Russian+0x88>)
 8017ede:	f004 fab7 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 8017ee2:	4621      	mov	r1, r4
 8017ee4:	22a0      	movs	r2, #160	; 0xa0
 8017ee6:	4628      	mov	r0, r5
 8017ee8:	f004 fac4 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8017eec:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017eee:	4819      	ldr	r0, [pc, #100]	; (8017f54 <GUI_TextRu_Russian+0x8c>)
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8017ef0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8017ef2:	f004 faad 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8017ef6:	f105 000f 	add.w	r0, r5, #15
 8017efa:	4621      	mov	r1, r4
 8017efc:	2283      	movs	r2, #131	; 0x83
 8017efe:	b280      	uxth	r0, r0
 8017f00:	f004 fab8 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'с');
 8017f04:	f105 001c 	add.w	r0, r5, #28
 8017f08:	4621      	mov	r1, r4
 8017f0a:	2281      	movs	r2, #129	; 0x81
 8017f0c:	b280      	uxth	r0, r0
 8017f0e:	f004 fab1 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'с');
 8017f12:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017f16:	4621      	mov	r1, r4
 8017f18:	2281      	movs	r2, #129	; 0x81
 8017f1a:	b280      	uxth	r0, r0
 8017f1c:	f004 faaa 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'к');
 8017f20:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8017f24:	4621      	mov	r1, r4
 8017f26:	22ba      	movs	r2, #186	; 0xba
 8017f28:	b280      	uxth	r0, r0
 8017f2a:	f004 faa3 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+64, Y+5, 'и');
 8017f2e:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8017f32:	4621      	mov	r1, r4
 8017f34:	22b8      	movs	r2, #184	; 0xb8
 8017f36:	b280      	uxth	r0, r0
 8017f38:	f004 fa9c 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+77, Y+5, 'й');
 8017f3c:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8017f40:	4621      	mov	r1, r4
 8017f42:	22b9      	movs	r2, #185	; 0xb9
 8017f44:	b280      	uxth	r0, r0
}
 8017f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+77, Y+5, 'й');
 8017f4a:	f004 ba93 	b.w	801c474 <TFT_DrawCharRus>
 8017f4e:	bf00      	nop
 8017f50:	200001d0 	.word	0x200001d0
 8017f54:	200001d8 	.word	0x200001d8

08017f58 <GUI_TextRu_Info>:



void GUI_TextRu_Info(uint16_t X, uint16_t Y)
{
 8017f58:	b538      	push	{r3, r4, r5, lr}
 8017f5a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017f5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017f60:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017f62:	f004 fa7b 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017f66:	2063      	movs	r0, #99	; 0x63
 8017f68:	f004 fa7e 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8017f6c:	4849      	ldr	r0, [pc, #292]	; (8018094 <GUI_TextRu_Info+0x13c>)
 8017f6e:	f004 fa6f 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'И');
 8017f72:	4621      	mov	r1, r4
 8017f74:	2298      	movs	r2, #152	; 0x98
 8017f76:	4628      	mov	r0, r5
 8017f78:	f004 fa7c 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8017f7c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8017f7e:	4846      	ldr	r0, [pc, #280]	; (8018098 <GUI_TextRu_Info+0x140>)
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8017f80:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8017f82:	f004 fa65 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'н');
 8017f86:	f105 000f 	add.w	r0, r5, #15
 8017f8a:	4621      	mov	r1, r4
 8017f8c:	22bd      	movs	r2, #189	; 0xbd
 8017f8e:	b280      	uxth	r0, r0
 8017f90:	f004 fa70 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ф');
 8017f94:	f105 001c 	add.w	r0, r5, #28
 8017f98:	4621      	mov	r1, r4
 8017f9a:	2284      	movs	r2, #132	; 0x84
 8017f9c:	b280      	uxth	r0, r0
 8017f9e:	f004 fa69 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'о');
 8017fa2:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017fa6:	4621      	mov	r1, r4
 8017fa8:	22be      	movs	r2, #190	; 0xbe
 8017faa:	b280      	uxth	r0, r0
 8017fac:	f004 fa62 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'р');
 8017fb0:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8017fb4:	4621      	mov	r1, r4
 8017fb6:	2280      	movs	r2, #128	; 0x80
 8017fb8:	b280      	uxth	r0, r0
 8017fba:	f004 fa5b 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'м');
 8017fbe:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8017fc2:	4621      	mov	r1, r4
 8017fc4:	22bc      	movs	r2, #188	; 0xbc
 8017fc6:	b280      	uxth	r0, r0
 8017fc8:	f004 fa54 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+78, Y+5, 'а');
 8017fcc:	f105 004e 	add.w	r0, r5, #78	; 0x4e
 8017fd0:	4621      	mov	r1, r4
 8017fd2:	22b0      	movs	r2, #176	; 0xb0
 8017fd4:	b280      	uxth	r0, r0
 8017fd6:	f004 fa4d 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+90, Y+5, 'ц');
 8017fda:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8017fde:	4621      	mov	r1, r4
 8017fe0:	2286      	movs	r2, #134	; 0x86
 8017fe2:	b280      	uxth	r0, r0
 8017fe4:	f004 fa46 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+102, Y+5, 'и');
 8017fe8:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8017fec:	4621      	mov	r1, r4
 8017fee:	22b8      	movs	r2, #184	; 0xb8
 8017ff0:	b280      	uxth	r0, r0
 8017ff2:	f004 fa3f 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+114, Y+5, 'я');
 8017ff6:	f105 0072 	add.w	r0, r5, #114	; 0x72
 8017ffa:	4621      	mov	r1, r4
 8017ffc:	228f      	movs	r2, #143	; 0x8f
 8017ffe:	b280      	uxth	r0, r0
 8018000:	f004 fa38 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+126, Y+5, 0x01);
 8018004:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8018008:	4621      	mov	r1, r4
 801800a:	2201      	movs	r2, #1
 801800c:	b280      	uxth	r0, r0
 801800e:	f004 fa31 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+138, Y+5, 'о');
 8018012:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8018016:	4621      	mov	r1, r4
 8018018:	22be      	movs	r2, #190	; 0xbe
 801801a:	b280      	uxth	r0, r0
 801801c:	f004 fa2a 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+150, Y+5, 0x01);
 8018020:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8018024:	4621      	mov	r1, r4
 8018026:	2201      	movs	r2, #1
 8018028:	b280      	uxth	r0, r0
 801802a:	f004 fa23 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+5, 'п');
 801802e:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 8018032:	4621      	mov	r1, r4
 8018034:	22bf      	movs	r2, #191	; 0xbf
 8018036:	b280      	uxth	r0, r0
 8018038:	f004 fa1c 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+174, Y+5, 'р');
 801803c:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 8018040:	4621      	mov	r1, r4
 8018042:	2280      	movs	r2, #128	; 0x80
 8018044:	b280      	uxth	r0, r0
 8018046:	f004 fa15 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+186, Y+5, 'и');
 801804a:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 801804e:	4621      	mov	r1, r4
 8018050:	22b8      	movs	r2, #184	; 0xb8
 8018052:	b280      	uxth	r0, r0
 8018054:	f004 fa0e 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+198, Y+5, 'б');
 8018058:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801805c:	4621      	mov	r1, r4
 801805e:	22b1      	movs	r2, #177	; 0xb1
 8018060:	b280      	uxth	r0, r0
 8018062:	f004 fa07 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+210, Y+5, 'о');
 8018066:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 801806a:	4621      	mov	r1, r4
 801806c:	22be      	movs	r2, #190	; 0xbe
 801806e:	b280      	uxth	r0, r0
 8018070:	f004 fa00 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+222, Y+5, 'р');
 8018074:	f105 00de 	add.w	r0, r5, #222	; 0xde
 8018078:	4621      	mov	r1, r4
 801807a:	2280      	movs	r2, #128	; 0x80
 801807c:	b280      	uxth	r0, r0
 801807e:	f004 f9f9 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+234, Y+5, 'е');
 8018082:	f105 00ea 	add.w	r0, r5, #234	; 0xea
 8018086:	4621      	mov	r1, r4
 8018088:	22b5      	movs	r2, #181	; 0xb5
 801808a:	b280      	uxth	r0, r0
}
 801808c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+234, Y+5, 'е');
 8018090:	f004 b9f0 	b.w	801c474 <TFT_DrawCharRus>
 8018094:	200001d0 	.word	0x200001d0
 8018098:	200001d8 	.word	0x200001d8

0801809c <GUI_TextRu_Mode>:

void GUI_TextRu_Mode(uint16_t X, uint16_t Y)
{
 801809c:	b538      	push	{r3, r4, r5, lr}
 801809e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80180a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80180a4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80180a6:	f004 f9d9 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80180aa:	2063      	movs	r0, #99	; 0x63
 80180ac:	f004 f9dc 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80180b0:	4815      	ldr	r0, [pc, #84]	; (8018108 <GUI_TextRu_Mode+0x6c>)
 80180b2:	f004 f9cd 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 80180b6:	4621      	mov	r1, r4
 80180b8:	22a0      	movs	r2, #160	; 0xa0
 80180ba:	4628      	mov	r0, r5
 80180bc:	f004 f9da 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'е');
 80180c0:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 80180c2:	4812      	ldr	r0, [pc, #72]	; (801810c <GUI_TextRu_Mode+0x70>)
 80180c4:	f004 f9c4 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'е');
 80180c8:	b2a4      	uxth	r4, r4
 80180ca:	f105 000f 	add.w	r0, r5, #15
 80180ce:	4621      	mov	r1, r4
 80180d0:	22b5      	movs	r2, #181	; 0xb5
 80180d2:	b280      	uxth	r0, r0
 80180d4:	f004 f9ce 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ж');
 80180d8:	f105 001c 	add.w	r0, r5, #28
 80180dc:	4621      	mov	r1, r4
 80180de:	22b6      	movs	r2, #182	; 0xb6
 80180e0:	b280      	uxth	r0, r0
 80180e2:	f004 f9c7 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 80180e6:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80180ea:	4621      	mov	r1, r4
 80180ec:	22b8      	movs	r2, #184	; 0xb8
 80180ee:	b280      	uxth	r0, r0
 80180f0:	f004 f9c0 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+54, Y+5, 'м');
 80180f4:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80180f8:	4621      	mov	r1, r4
 80180fa:	22bc      	movs	r2, #188	; 0xbc
 80180fc:	b280      	uxth	r0, r0
}
 80180fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+54, Y+5, 'м');
 8018102:	f004 b9b7 	b.w	801c474 <TFT_DrawCharRus>
 8018106:	bf00      	nop
 8018108:	200001d0 	.word	0x200001d0
 801810c:	200001d8 	.word	0x200001d8

08018110 <GUI_TextRu_Illuminance>:

void GUI_TextRu_Illuminance(uint16_t X, uint16_t Y)
{
 8018110:	b538      	push	{r3, r4, r5, lr}
 8018112:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018114:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018118:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801811a:	f004 f99f 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801811e:	2063      	movs	r0, #99	; 0x63
 8018120:	f004 f9a2 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018124:	482d      	ldr	r0, [pc, #180]	; (80181dc <GUI_TextRu_Illuminance+0xcc>)
 8018126:	f004 f993 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 801812a:	4621      	mov	r1, r4
 801812c:	229e      	movs	r2, #158	; 0x9e
 801812e:	4628      	mov	r0, r5
 8018130:	f004 f9a0 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018134:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018136:	482a      	ldr	r0, [pc, #168]	; (80181e0 <GUI_TextRu_Illuminance+0xd0>)
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018138:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801813a:	f004 f989 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801813e:	f105 000f 	add.w	r0, r5, #15
 8018142:	4621      	mov	r1, r4
 8018144:	2281      	movs	r2, #129	; 0x81
 8018146:	b280      	uxth	r0, r0
 8018148:	f004 f994 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+26, Y+5, 'в');
 801814c:	f105 001a 	add.w	r0, r5, #26
 8018150:	4621      	mov	r1, r4
 8018152:	22b2      	movs	r2, #178	; 0xb2
 8018154:	b280      	uxth	r0, r0
 8018156:	f004 f98d 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+38, Y+5, 'е');
 801815a:	f105 0026 	add.w	r0, r5, #38	; 0x26
 801815e:	4621      	mov	r1, r4
 8018160:	22b5      	movs	r2, #181	; 0xb5
 8018162:	b280      	uxth	r0, r0
 8018164:	f004 f986 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+50, Y+5, 'щ');
 8018168:	f105 0032 	add.w	r0, r5, #50	; 0x32
 801816c:	4621      	mov	r1, r4
 801816e:	2289      	movs	r2, #137	; 0x89
 8018170:	b280      	uxth	r0, r0
 8018172:	f004 f97f 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+62, Y+5, 'е');
 8018176:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 801817a:	4621      	mov	r1, r4
 801817c:	22b5      	movs	r2, #181	; 0xb5
 801817e:	b280      	uxth	r0, r0
 8018180:	f004 f978 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'н');
 8018184:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8018188:	4621      	mov	r1, r4
 801818a:	22bd      	movs	r2, #189	; 0xbd
 801818c:	b280      	uxth	r0, r0
 801818e:	f004 f971 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'н');
 8018192:	f105 0055 	add.w	r0, r5, #85	; 0x55
 8018196:	4621      	mov	r1, r4
 8018198:	22bd      	movs	r2, #189	; 0xbd
 801819a:	b280      	uxth	r0, r0
 801819c:	f004 f96a 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 80181a0:	f105 0061 	add.w	r0, r5, #97	; 0x61
 80181a4:	4621      	mov	r1, r4
 80181a6:	22be      	movs	r2, #190	; 0xbe
 80181a8:	b280      	uxth	r0, r0
 80181aa:	f004 f963 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 80181ae:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 80181b2:	4621      	mov	r1, r4
 80181b4:	2281      	movs	r2, #129	; 0x81
 80181b6:	b280      	uxth	r0, r0
 80181b8:	f004 f95c 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+5, 'т');
 80181bc:	f105 0076 	add.w	r0, r5, #118	; 0x76
 80181c0:	4621      	mov	r1, r4
 80181c2:	2282      	movs	r2, #130	; 0x82
 80181c4:	b280      	uxth	r0, r0
 80181c6:	f004 f955 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 80181ca:	f105 0082 	add.w	r0, r5, #130	; 0x82
 80181ce:	4621      	mov	r1, r4
 80181d0:	228c      	movs	r2, #140	; 0x8c
 80181d2:	b280      	uxth	r0, r0
}
 80181d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 80181d8:	f004 b94c 	b.w	801c474 <TFT_DrawCharRus>
 80181dc:	200001d0 	.word	0x200001d0
 80181e0:	200001d8 	.word	0x200001d8

080181e4 <GUI_TextRu_PPF>:

void GUI_TextRu_PPF(uint16_t X, uint16_t Y)
{
 80181e4:	b538      	push	{r3, r4, r5, lr}
 80181e6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80181e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80181ec:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80181ee:	f004 f935 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80181f2:	2063      	movs	r0, #99	; 0x63
 80181f4:	f004 f938 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80181f8:	480b      	ldr	r0, [pc, #44]	; (8018228 <GUI_TextRu_PPF+0x44>)
 80181fa:	f004 f929 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 80181fe:	4629      	mov	r1, r5
 8018200:	4620      	mov	r0, r4
 8018202:	22a4      	movs	r2, #164	; 0xa4
 8018204:	f004 f936 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 8018208:	f104 0011 	add.w	r0, r4, #17
 801820c:	4629      	mov	r1, r5
 801820e:	2290      	movs	r2, #144	; 0x90
 8018210:	b280      	uxth	r0, r0
 8018212:	f004 f92f 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 8018216:	f104 0020 	add.w	r0, r4, #32
 801821a:	4629      	mov	r1, r5
 801821c:	22a0      	movs	r2, #160	; 0xa0
 801821e:	b280      	uxth	r0, r0
}
 8018220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+32, Y, 'Р');
 8018224:	f004 b926 	b.w	801c474 <TFT_DrawCharRus>
 8018228:	200001d0 	.word	0x200001d0

0801822c <GUI_TextRu_PPF_RGB>:

void GUI_TextRu_PPF_RGB(uint16_t X, uint16_t Y)
{
 801822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018230:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16RU_arch_big);
 8018232:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8018340 <GUI_TextRu_PPF_RGB+0x114>
	TFT_DrawCharRus(X, Y, 'С');
	TFT_SetFont(&Font16RU_arch_small);
 8018236:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8018344 <GUI_TextRu_PPF_RGB+0x118>
	TFT_DrawCharRus(X+15, Y+5, 'и');
	TFT_DrawCharRus(X+27, Y+5, 'н');
	TFT_SetFont(&Font16EN_arch_big);
 801823a:	4f40      	ldr	r7, [pc, #256]	; (801833c <GUI_TextRu_PPF_RGB+0x110>)
	TFT_SetTextColor(TFT_White);
 801823c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018240:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018242:	f004 f90b 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018246:	2063      	movs	r0, #99	; 0x63
 8018248:	f004 f90e 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801824c:	4648      	mov	r0, r9
 801824e:	f004 f8ff 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'С');
 8018252:	4629      	mov	r1, r5
 8018254:	22a1      	movs	r2, #161	; 0xa1
 8018256:	4620      	mov	r0, r4
 8018258:	f004 f90c 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801825c:	1d6e      	adds	r6, r5, #5
	TFT_SetFont(&Font16RU_arch_small);
 801825e:	4640      	mov	r0, r8
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018260:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font16RU_arch_small);
 8018262:	f004 f8f5 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 8018266:	f104 000f 	add.w	r0, r4, #15
 801826a:	4631      	mov	r1, r6
 801826c:	22b8      	movs	r2, #184	; 0xb8
 801826e:	b280      	uxth	r0, r0
 8018270:	f004 f900 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'н');
 8018274:	f104 001b 	add.w	r0, r4, #27
 8018278:	4631      	mov	r1, r6
 801827a:	22bd      	movs	r2, #189	; 0xbd
 801827c:	b280      	uxth	r0, r0
 801827e:	f004 f8f9 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018282:	4638      	mov	r0, r7
 8018284:	f004 f8e4 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+40, Y, '-');
 8018288:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801828c:	4629      	mov	r1, r5
 801828e:	222d      	movs	r2, #45	; 0x2d
 8018290:	b280      	uxth	r0, r0
 8018292:	f004 f9a7 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 8018296:	4648      	mov	r0, r9
 8018298:	f004 f8da 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+55, Y, 'З');
 801829c:	f104 0037 	add.w	r0, r4, #55	; 0x37
 80182a0:	4629      	mov	r1, r5
 80182a2:	2297      	movs	r2, #151	; 0x97
 80182a4:	b280      	uxth	r0, r0
 80182a6:	f004 f8e5 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80182aa:	4640      	mov	r0, r8
 80182ac:	f004 f8d0 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+70, Y+5, 'е');
 80182b0:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80182b4:	4631      	mov	r1, r6
 80182b6:	22b5      	movs	r2, #181	; 0xb5
 80182b8:	b280      	uxth	r0, r0
 80182ba:	f004 f8db 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+5, 'л');
 80182be:	f104 0052 	add.w	r0, r4, #82	; 0x52
 80182c2:	4631      	mov	r1, r6
 80182c4:	22bb      	movs	r2, #187	; 0xbb
 80182c6:	b280      	uxth	r0, r0
 80182c8:	f004 f8d4 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 80182cc:	4638      	mov	r0, r7
 80182ce:	f004 f8bf 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+94, Y, '-');
 80182d2:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 80182d6:	4629      	mov	r1, r5
 80182d8:	222d      	movs	r2, #45	; 0x2d
 80182da:	b280      	uxth	r0, r0
 80182dc:	f004 f982 	bl	801c5e4 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 80182e0:	4648      	mov	r0, r9
 80182e2:	f004 f8b5 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+109, Y, 'К');
 80182e6:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 80182ea:	4629      	mov	r1, r5
 80182ec:	229a      	movs	r2, #154	; 0x9a
 80182ee:	b280      	uxth	r0, r0
 80182f0:	f004 f8c0 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80182f4:	4640      	mov	r0, r8
 80182f6:	f004 f8ab 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+124, Y+5, 'р');
 80182fa:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80182fe:	4631      	mov	r1, r6
 8018300:	2280      	movs	r2, #128	; 0x80
 8018302:	b280      	uxth	r0, r0
 8018304:	f004 f8b6 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018308:	4638      	mov	r0, r7
 801830a:	f004 f8a1 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+136, Y, '-');
 801830e:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8018312:	4629      	mov	r1, r5
 8018314:	222d      	movs	r2, #45	; 0x2d
 8018316:	b280      	uxth	r0, r0
 8018318:	f004 f964 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+152, Y, 'F');
 801831c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8018320:	4629      	mov	r1, r5
 8018322:	2246      	movs	r2, #70	; 0x46
 8018324:	b280      	uxth	r0, r0
 8018326:	f004 f95d 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+167, Y, 'R');
 801832a:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 801832e:	4629      	mov	r1, r5
 8018330:	2252      	movs	r2, #82	; 0x52
 8018332:	b280      	uxth	r0, r0
}
 8018334:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TFT_DrawChar(X+167, Y, 'R');
 8018338:	f004 b954 	b.w	801c5e4 <TFT_DrawChar>
 801833c:	200001b0 	.word	0x200001b0
 8018340:	200001d0 	.word	0x200001d0
 8018344:	200001d8 	.word	0x200001d8

08018348 <GUI_TextRu_PPF_bands>:
void GUI_TextRu_PPF_bands(uint16_t X, uint16_t Y)
{
 8018348:	b538      	push	{r3, r4, r5, lr}
 801834a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801834c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018350:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018352:	f004 f883 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018356:	2063      	movs	r0, #99	; 0x63
 8018358:	f004 f886 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801835c:	482d      	ldr	r0, [pc, #180]	; (8018414 <GUI_TextRu_PPF_bands+0xcc>)
 801835e:	f004 f877 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 8018362:	4621      	mov	r1, r4
 8018364:	4628      	mov	r0, r5
 8018366:	22a4      	movs	r2, #164	; 0xa4
 8018368:	f004 f884 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 801836c:	f105 0011 	add.w	r0, r5, #17
 8018370:	4621      	mov	r1, r4
 8018372:	2290      	movs	r2, #144	; 0x90
 8018374:	b280      	uxth	r0, r0
 8018376:	f004 f87d 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801837a:	f105 0020 	add.w	r0, r5, #32
 801837e:	4621      	mov	r1, r4
 8018380:	22a0      	movs	r2, #160	; 0xa0
 8018382:	b280      	uxth	r0, r0
 8018384:	f004 f876 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018388:	3402      	adds	r4, #2
	TFT_SetFont(&Font16RU_arch_small);
 801838a:	4823      	ldr	r0, [pc, #140]	; (8018418 <GUI_TextRu_PPF_bands+0xd0>)
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801838c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801838e:	f004 f85f 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+57, Y+2, 'д');
 8018392:	f105 0039 	add.w	r0, r5, #57	; 0x39
 8018396:	4621      	mov	r1, r4
 8018398:	22b4      	movs	r2, #180	; 0xb4
 801839a:	b280      	uxth	r0, r0
 801839c:	f004 f86a 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+70, Y+2, 'и');
 80183a0:	f105 0046 	add.w	r0, r5, #70	; 0x46
 80183a4:	4621      	mov	r1, r4
 80183a6:	22b8      	movs	r2, #184	; 0xb8
 80183a8:	b280      	uxth	r0, r0
 80183aa:	f004 f863 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+83, Y+2, 'а');
 80183ae:	f105 0053 	add.w	r0, r5, #83	; 0x53
 80183b2:	4621      	mov	r1, r4
 80183b4:	22b0      	movs	r2, #176	; 0xb0
 80183b6:	b280      	uxth	r0, r0
 80183b8:	f004 f85c 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+96, Y+2, 'п');
 80183bc:	f105 0060 	add.w	r0, r5, #96	; 0x60
 80183c0:	4621      	mov	r1, r4
 80183c2:	22bf      	movs	r2, #191	; 0xbf
 80183c4:	b280      	uxth	r0, r0
 80183c6:	f004 f855 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+2, 'а');
 80183ca:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 80183ce:	4621      	mov	r1, r4
 80183d0:	22b0      	movs	r2, #176	; 0xb0
 80183d2:	b280      	uxth	r0, r0
 80183d4:	f004 f84e 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+122, Y+2, 'з');
 80183d8:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 80183dc:	4621      	mov	r1, r4
 80183de:	22b7      	movs	r2, #183	; 0xb7
 80183e0:	b280      	uxth	r0, r0
 80183e2:	f004 f847 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+135, Y+2, 'о');
 80183e6:	f105 0087 	add.w	r0, r5, #135	; 0x87
 80183ea:	4621      	mov	r1, r4
 80183ec:	22be      	movs	r2, #190	; 0xbe
 80183ee:	b280      	uxth	r0, r0
 80183f0:	f004 f840 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+148, Y+2, 'н');
 80183f4:	f105 0094 	add.w	r0, r5, #148	; 0x94
 80183f8:	4621      	mov	r1, r4
 80183fa:	22bd      	movs	r2, #189	; 0xbd
 80183fc:	b280      	uxth	r0, r0
 80183fe:	f004 f839 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018402:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 8018406:	4621      	mov	r1, r4
 8018408:	228b      	movs	r2, #139	; 0x8b
 801840a:	b280      	uxth	r0, r0
}
 801840c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018410:	f004 b830 	b.w	801c474 <TFT_DrawCharRus>
 8018414:	200001d0 	.word	0x200001d0
 8018418:	200001d8 	.word	0x200001d8

0801841c <GUI_TextRu_Info_Callibration>:

void GUI_TextRu_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 801841c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801841e:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8018420:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018424:	2300      	movs	r3, #0
 8018426:	9300      	str	r3, [sp, #0]
 8018428:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801842c:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801842e:	f004 f815 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018432:	2063      	movs	r0, #99	; 0x63
 8018434:	f004 f818 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018438:	4832      	ldr	r0, [pc, #200]	; (8018504 <GUI_TextRu_Info_Callibration+0xe8>)
	TFT_DrawCharRus(X+82, Y+2, 'о');
	TFT_DrawCharRus(X+95, Y+2, 'в');
	TFT_DrawCharRus(X+108, Y+2, 'к');
	TFT_DrawCharRus(X+118, Y+2, 'а');
	
	sprintf (buffer, "%02u",  date);
 801843a:	4d33      	ldr	r5, [pc, #204]	; (8018508 <GUI_TextRu_Info_Callibration+0xec>)
	TFT_SetFont(&Font16RU_arch_big);
 801843c:	f004 f808 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'К');
 8018440:	229a      	movs	r2, #154	; 0x9a
 8018442:	2160      	movs	r1, #96	; 0x60
 8018444:	2046      	movs	r0, #70	; 0x46
 8018446:	f004 f815 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801844a:	4830      	ldr	r0, [pc, #192]	; (801850c <GUI_TextRu_Info_Callibration+0xf0>)
 801844c:	f004 f800 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'а');
 8018450:	22b0      	movs	r2, #176	; 0xb0
 8018452:	2166      	movs	r1, #102	; 0x66
 8018454:	2057      	movs	r0, #87	; 0x57
 8018456:	f004 f80d 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'л');
 801845a:	22bb      	movs	r2, #187	; 0xbb
 801845c:	2166      	movs	r1, #102	; 0x66
 801845e:	2064      	movs	r0, #100	; 0x64
 8018460:	f004 f808 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 8018464:	22b8      	movs	r2, #184	; 0xb8
 8018466:	2166      	movs	r1, #102	; 0x66
 8018468:	2071      	movs	r0, #113	; 0x71
 801846a:	f004 f803 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'б');
 801846e:	22b1      	movs	r2, #177	; 0xb1
 8018470:	2166      	movs	r1, #102	; 0x66
 8018472:	207e      	movs	r0, #126	; 0x7e
 8018474:	f003 fffe 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'р');
 8018478:	2280      	movs	r2, #128	; 0x80
 801847a:	2166      	movs	r1, #102	; 0x66
 801847c:	208b      	movs	r0, #139	; 0x8b
 801847e:	f003 fff9 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'о');
 8018482:	22be      	movs	r2, #190	; 0xbe
 8018484:	2166      	movs	r1, #102	; 0x66
 8018486:	2098      	movs	r0, #152	; 0x98
 8018488:	f003 fff4 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'в');
 801848c:	22b2      	movs	r2, #178	; 0xb2
 801848e:	2166      	movs	r1, #102	; 0x66
 8018490:	20a5      	movs	r0, #165	; 0xa5
 8018492:	f003 ffef 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+108, Y+2, 'к');
 8018496:	22ba      	movs	r2, #186	; 0xba
 8018498:	2166      	movs	r1, #102	; 0x66
 801849a:	20b2      	movs	r0, #178	; 0xb2
 801849c:	f003 ffea 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+2, 'а');
 80184a0:	22b0      	movs	r2, #176	; 0xb0
 80184a2:	2166      	movs	r1, #102	; 0x66
 80184a4:	20bc      	movs	r0, #188	; 0xbc
 80184a6:	f003 ffe5 	bl	801c474 <TFT_DrawCharRus>
	sprintf (buffer, "%02u",  date);
 80184aa:	4622      	mov	r2, r4
 80184ac:	4629      	mov	r1, r5
 80184ae:	4668      	mov	r0, sp
 80184b0:	f007 faaa 	bl	801fa08 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 80184b4:	4816      	ldr	r0, [pc, #88]	; (8018510 <GUI_TextRu_Info_Callibration+0xf4>)
 80184b6:	f003 ffcb 	bl	801c450 <TFT_SetFont>
	buffer[2] = '.';
 80184ba:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184bc:	2303      	movs	r3, #3
 80184be:	466a      	mov	r2, sp
 80184c0:	2182      	movs	r1, #130	; 0x82
 80184c2:	201e      	movs	r0, #30
	buffer[2] = '.';
 80184c4:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184c8:	f004 f8e4 	bl	801c694 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 80184cc:	4632      	mov	r2, r6
 80184ce:	4629      	mov	r1, r5
 80184d0:	4668      	mov	r0, sp
 80184d2:	f007 fa99 	bl	801fa08 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184d6:	2303      	movs	r3, #3
 80184d8:	466a      	mov	r2, sp
 80184da:	2182      	movs	r1, #130	; 0x82
 80184dc:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 80184de:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184e2:	f004 f8d7 	bl	801c694 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 80184e6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80184ea:	490a      	ldr	r1, [pc, #40]	; (8018514 <GUI_TextRu_Info_Callibration+0xf8>)
 80184ec:	4668      	mov	r0, sp
 80184ee:	f007 fa8b 	bl	801fa08 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 80184f2:	2303      	movs	r3, #3
 80184f4:	466a      	mov	r2, sp
 80184f6:	2182      	movs	r1, #130	; 0x82
 80184f8:	209b      	movs	r0, #155	; 0x9b
 80184fa:	f004 f8cb 	bl	801c694 <TFT_DisplayString>
}
 80184fe:	b002      	add	sp, #8
 8018500:	bd70      	pop	{r4, r5, r6, pc}
 8018502:	bf00      	nop
 8018504:	200001d0 	.word	0x200001d0
 8018508:	08031464 	.word	0x08031464
 801850c:	200001d8 	.word	0x200001d8
 8018510:	200001f0 	.word	0x200001f0
 8018514:	08031469 	.word	0x08031469

08018518 <GUI_TextRu_WriteSD>:

void GUI_TextRu_WriteSD(uint16_t X, uint16_t Y)
{
 8018518:	b538      	push	{r3, r4, r5, lr}
 801851a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801851c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018520:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018522:	f003 ff9b 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018526:	2063      	movs	r0, #99	; 0x63
 8018528:	f003 ff9e 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801852c:	4818      	ldr	r0, [pc, #96]	; (8018590 <GUI_TextRu_WriteSD+0x78>)
 801852e:	f003 ff8f 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'З');
 8018532:	4621      	mov	r1, r4
 8018534:	2297      	movs	r2, #151	; 0x97
 8018536:	4628      	mov	r0, r5
 8018538:	f003 ff9c 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801853c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801853e:	4815      	ldr	r0, [pc, #84]	; (8018594 <GUI_TextRu_WriteSD+0x7c>)
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018540:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018542:	f003 ff85 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018546:	f105 000f 	add.w	r0, r5, #15
 801854a:	4621      	mov	r1, r4
 801854c:	22b0      	movs	r2, #176	; 0xb0
 801854e:	b280      	uxth	r0, r0
 8018550:	f003 ff90 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'п');
 8018554:	f105 001c 	add.w	r0, r5, #28
 8018558:	4621      	mov	r1, r4
 801855a:	22bf      	movs	r2, #191	; 0xbf
 801855c:	b280      	uxth	r0, r0
 801855e:	f003 ff89 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 8018562:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8018566:	4621      	mov	r1, r4
 8018568:	22b8      	movs	r2, #184	; 0xb8
 801856a:	b280      	uxth	r0, r0
 801856c:	f003 ff82 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'с');
 8018570:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8018574:	4621      	mov	r1, r4
 8018576:	2281      	movs	r2, #129	; 0x81
 8018578:	b280      	uxth	r0, r0
 801857a:	f003 ff7b 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801857e:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8018582:	4621      	mov	r1, r4
 8018584:	228c      	movs	r2, #140	; 0x8c
 8018586:	b280      	uxth	r0, r0
}
 8018588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801858c:	f003 bf72 	b.w	801c474 <TFT_DrawCharRus>
 8018590:	200001d0 	.word	0x200001d0
 8018594:	200001d8 	.word	0x200001d8

08018598 <GUI_TextRu_Info_Serial>:

void GUI_TextRu_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 8018598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801859a:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 801859c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 80185a0:	2300      	movs	r3, #0
 80185a2:	9300      	str	r3, [sp, #0]
 80185a4:	f88d 3004 	strb.w	r3, [sp, #4]
{
 80185a8:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 80185aa:	f003 ff57 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80185ae:	2063      	movs	r0, #99	; 0x63
 80185b0:	f003 ff5a 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80185b4:	4830      	ldr	r0, [pc, #192]	; (8018678 <GUI_TextRu_Info_Serial+0xe0>)
 80185b6:	f003 ff4b 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'С');
 80185ba:	22a1      	movs	r2, #161	; 0xa1
 80185bc:	21c4      	movs	r1, #196	; 0xc4
 80185be:	203c      	movs	r0, #60	; 0x3c
 80185c0:	f003 ff58 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80185c4:	482d      	ldr	r0, [pc, #180]	; (801867c <GUI_TextRu_Info_Serial+0xe4>)
 80185c6:	f003 ff43 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'е');
 80185ca:	22b5      	movs	r2, #181	; 0xb5
 80185cc:	21ca      	movs	r1, #202	; 0xca
 80185ce:	204d      	movs	r0, #77	; 0x4d
 80185d0:	f003 ff50 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'р');
 80185d4:	2280      	movs	r2, #128	; 0x80
 80185d6:	21ca      	movs	r1, #202	; 0xca
 80185d8:	205a      	movs	r0, #90	; 0x5a
 80185da:	f003 ff4b 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 80185de:	22b8      	movs	r2, #184	; 0xb8
 80185e0:	21ca      	movs	r1, #202	; 0xca
 80185e2:	2067      	movs	r0, #103	; 0x67
 80185e4:	f003 ff46 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'й');
 80185e8:	22b9      	movs	r2, #185	; 0xb9
 80185ea:	21ca      	movs	r1, #202	; 0xca
 80185ec:	2074      	movs	r0, #116	; 0x74
 80185ee:	f003 ff41 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'н');
 80185f2:	22bd      	movs	r2, #189	; 0xbd
 80185f4:	21ca      	movs	r1, #202	; 0xca
 80185f6:	2081      	movs	r0, #129	; 0x81
 80185f8:	f003 ff3c 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'ы');
 80185fc:	228b      	movs	r2, #139	; 0x8b
 80185fe:	21ca      	movs	r1, #202	; 0xca
 8018600:	208e      	movs	r0, #142	; 0x8e
 8018602:	f003 ff37 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'й');
 8018606:	22b9      	movs	r2, #185	; 0xb9
 8018608:	21ca      	movs	r1, #202	; 0xca
 801860a:	209b      	movs	r0, #155	; 0x9b
 801860c:	f003 ff32 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+115, Y+2, 'н');
 8018610:	22bd      	movs	r2, #189	; 0xbd
 8018612:	21ca      	movs	r1, #202	; 0xca
 8018614:	20af      	movs	r0, #175	; 0xaf
 8018616:	f003 ff2d 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+128, Y+2, 'о');
 801861a:	22be      	movs	r2, #190	; 0xbe
 801861c:	21ca      	movs	r1, #202	; 0xca
 801861e:	20bc      	movs	r0, #188	; 0xbc
 8018620:	f003 ff28 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+141, Y+2, 'м');
 8018624:	22bc      	movs	r2, #188	; 0xbc
 8018626:	21ca      	movs	r1, #202	; 0xca
 8018628:	20c9      	movs	r0, #201	; 0xc9
 801862a:	f003 ff23 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+154, Y+2, 'е');
 801862e:	22b5      	movs	r2, #181	; 0xb5
 8018630:	21ca      	movs	r1, #202	; 0xca
 8018632:	20d6      	movs	r0, #214	; 0xd6
 8018634:	f003 ff1e 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+165, Y+2, 'р');
 8018638:	2280      	movs	r2, #128	; 0x80
 801863a:	21ca      	movs	r1, #202	; 0xca
 801863c:	20e1      	movs	r0, #225	; 0xe1
 801863e:	f003 ff19 	bl	801c474 <TFT_DrawCharRus>

	sprintf (buffer, "%u",  Part);
 8018642:	462a      	mov	r2, r5
 8018644:	490e      	ldr	r1, [pc, #56]	; (8018680 <GUI_TextRu_Info_Serial+0xe8>)
 8018646:	4668      	mov	r0, sp
 8018648:	f007 f9de 	bl	801fa08 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801864c:	480d      	ldr	r0, [pc, #52]	; (8018684 <GUI_TextRu_Info_Serial+0xec>)
 801864e:	f003 feff 	bl	801c450 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018652:	2303      	movs	r3, #3
 8018654:	466a      	mov	r2, sp
 8018656:	21e6      	movs	r1, #230	; 0xe6
 8018658:	2028      	movs	r0, #40	; 0x28
 801865a:	f004 f81b 	bl	801c694 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 801865e:	4622      	mov	r2, r4
 8018660:	4909      	ldr	r1, [pc, #36]	; (8018688 <GUI_TextRu_Info_Serial+0xf0>)
 8018662:	4668      	mov	r0, sp
 8018664:	f007 f9d0 	bl	801fa08 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018668:	2303      	movs	r3, #3
 801866a:	466a      	mov	r2, sp
 801866c:	21e6      	movs	r1, #230	; 0xe6
 801866e:	2087      	movs	r0, #135	; 0x87
 8018670:	f004 f810 	bl	801c694 <TFT_DisplayString>
}
 8018674:	b003      	add	sp, #12
 8018676:	bd30      	pop	{r4, r5, pc}
 8018678:	200001d0 	.word	0x200001d0
 801867c:	200001d8 	.word	0x200001d8
 8018680:	0803146d 	.word	0x0803146d
 8018684:	200001f0 	.word	0x200001f0
 8018688:	08031470 	.word	0x08031470

0801868c <GUI_TextRu_Info_Ver>:

void GUI_TextRu_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 801868c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801868e:	2300      	movs	r3, #0
	
	X = 120;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8018690:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018694:	9302      	str	r3, [sp, #8]
 8018696:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801869a:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801869e:	f003 fedd 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80186a2:	2063      	movs	r0, #99	; 0x63
 80186a4:	f003 fee0 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80186a8:	481b      	ldr	r0, [pc, #108]	; (8018718 <GUI_TextRu_Info_Ver+0x8c>)
	TFT_DrawCharRus(X, Y-1, 'П');
	TFT_DrawCharRus(X+18, Y-1, 'О');
	
	TFT_SetFont(&Font16);
 80186aa:	4c1c      	ldr	r4, [pc, #112]	; (801871c <GUI_TextRu_Info_Ver+0x90>)
	TFT_SetFont(&Font16RU_arch_big);
 80186ac:	f003 fed0 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-1, 'П');
 80186b0:	229f      	movs	r2, #159	; 0x9f
 80186b2:	f240 115d 	movw	r1, #349	; 0x15d
 80186b6:	2078      	movs	r0, #120	; 0x78
 80186b8:	f003 fedc 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+18, Y-1, 'О');
 80186bc:	229e      	movs	r2, #158	; 0x9e
 80186be:	f240 115d 	movw	r1, #349	; 0x15d
 80186c2:	208a      	movs	r0, #138	; 0x8a
 80186c4:	f003 fed6 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16);
 80186c8:	4620      	mov	r0, r4
 80186ca:	f003 fec1 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+52, Y, '.');
 80186ce:	222e      	movs	r2, #46	; 0x2e
 80186d0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80186d4:	20ac      	movs	r0, #172	; 0xac
 80186d6:	f003 ff85 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y, 'v');
 80186da:	2276      	movs	r2, #118	; 0x76
 80186dc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80186e0:	20a2      	movs	r0, #162	; 0xa2
 80186e2:	f003 ff7f 	bl	801c5e4 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 80186e6:	ed9d 0a01 	vldr	s0, [sp, #4]
 80186ea:	ee10 0a10 	vmov	r0, s0
 80186ee:	f7e7 ff43 	bl	8000578 <__aeabi_f2d>
 80186f2:	4602      	mov	r2, r0
 80186f4:	460b      	mov	r3, r1
 80186f6:	a802      	add	r0, sp, #8
 80186f8:	4909      	ldr	r1, [pc, #36]	; (8018720 <GUI_TextRu_Info_Ver+0x94>)
 80186fa:	f007 f985 	bl	801fa08 <sprintf>
	TFT_SetFont(&Font16);
 80186fe:	4620      	mov	r0, r4
 8018700:	f003 fea6 	bl	801c450 <TFT_SetFont>
	TFT_DisplayString(185, Y, (uint8_t *)buffer, LEFT_MODE);
 8018704:	2303      	movs	r3, #3
 8018706:	aa02      	add	r2, sp, #8
 8018708:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801870c:	20b9      	movs	r0, #185	; 0xb9
 801870e:	f003 ffc1 	bl	801c694 <TFT_DisplayString>
}
 8018712:	b004      	add	sp, #16
 8018714:	bd10      	pop	{r4, pc}
 8018716:	bf00      	nop
 8018718:	200001d0 	.word	0x200001d0
 801871c:	200001a8 	.word	0x200001a8
 8018720:	08031455 	.word	0x08031455

08018724 <GUI_TextRu_CCT>:

void GUI_TextRu_CCT(uint16_t X, uint16_t Y)
{
 8018724:	b538      	push	{r3, r4, r5, lr}
 8018726:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018728:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801872c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801872e:	f003 fe95 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018732:	2063      	movs	r0, #99	; 0x63
 8018734:	f003 fe98 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018738:	481e      	ldr	r0, [pc, #120]	; (80187b4 <GUI_TextRu_CCT+0x90>)
 801873a:	f003 fe89 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'К');
 801873e:	4629      	mov	r1, r5
 8018740:	4620      	mov	r0, r4
 8018742:	229a      	movs	r2, #154	; 0x9a
 8018744:	f003 fe96 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'Ц');
 8018748:	f104 0011 	add.w	r0, r4, #17
 801874c:	4629      	mov	r1, r5
 801874e:	22a6      	movs	r2, #166	; 0xa6
 8018750:	b280      	uxth	r0, r0
 8018752:	f003 fe8f 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+33, Y, 'Т');
 8018756:	f104 0021 	add.w	r0, r4, #33	; 0x21
 801875a:	4629      	mov	r1, r5
 801875c:	22a2      	movs	r2, #162	; 0xa2
 801875e:	b280      	uxth	r0, r0
 8018760:	f003 fe88 	bl	801c474 <TFT_DrawCharRus>

	TFT_SetFont(&Font16EN_arch_big);
 8018764:	4814      	ldr	r0, [pc, #80]	; (80187b8 <GUI_TextRu_CCT+0x94>)
 8018766:	f003 fe73 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+49, Y, '(');
 801876a:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801876e:	4629      	mov	r1, r5
 8018770:	2228      	movs	r2, #40	; 0x28
 8018772:	b280      	uxth	r0, r0
 8018774:	f003 ff36 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+104, Y, ')');
 8018778:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801877c:	4629      	mov	r1, r5
 801877e:	2229      	movs	r2, #41	; 0x29
 8018780:	b280      	uxth	r0, r0
 8018782:	f003 ff2f 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y, 'C');
 8018786:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 801878a:	4629      	mov	r1, r5
 801878c:	2243      	movs	r2, #67	; 0x43
 801878e:	b280      	uxth	r0, r0
 8018790:	f003 ff28 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y, 'C');
 8018794:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018798:	4629      	mov	r1, r5
 801879a:	2243      	movs	r2, #67	; 0x43
 801879c:	b280      	uxth	r0, r0
 801879e:	f003 ff21 	bl	801c5e4 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y, 'T');
 80187a2:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 80187a6:	4629      	mov	r1, r5
 80187a8:	2254      	movs	r2, #84	; 0x54
 80187aa:	b280      	uxth	r0, r0
}
 80187ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+91, Y, 'T');
 80187b0:	f003 bf18 	b.w	801c5e4 <TFT_DrawChar>
 80187b4:	200001d0 	.word	0x200001d0
 80187b8:	200001b0 	.word	0x200001b0

080187bc <GUI_TextRu_umol>:

void GUI_TextRu_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 80187bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80187c0:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80187c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80187c6:	4616      	mov	r6, r2
 80187c8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80187ca:	f003 fe47 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80187ce:	2063      	movs	r0, #99	; 0x63
 80187d0:	f003 fe4a 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 80187d4:	482f      	ldr	r0, [pc, #188]	; (8018894 <GUI_TextRu_umol+0xd8>)
 80187d6:	f003 fe3b 	bl	801c450 <TFT_SetFont>
	
	if(deg){
 80187da:	2e00      	cmp	r6, #0
 80187dc:	d057      	beq.n	801888e <GUI_TextRu_umol+0xd2>
		TFT_DrawCharRus(X, Y, 'м');
 80187de:	22bc      	movs	r2, #188	; 0xbc
	} else{
		TFT_DrawCharRus(X, Y, 'я'+1);
 80187e0:	4629      	mov	r1, r5
 80187e2:	4620      	mov	r0, r4
 80187e4:	f003 fe46 	bl	801c474 <TFT_DrawCharRus>
	}

	TFT_DrawCharRus(X+8, Y, 'м');
 80187e8:	f104 0008 	add.w	r0, r4, #8
 80187ec:	4629      	mov	r1, r5
 80187ee:	22bc      	movs	r2, #188	; 0xbc
 80187f0:	b280      	uxth	r0, r0
 80187f2:	f003 fe3f 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y, 'о');
	TFT_DrawCharRus(X+22, Y, 'л');
 80187f6:	f104 0716 	add.w	r7, r4, #22
	TFT_DrawCharRus(X+16, Y, 'о');
 80187fa:	f104 0010 	add.w	r0, r4, #16
 80187fe:	4629      	mov	r1, r5
	TFT_DrawCharRus(X+22, Y, 'л');
 8018800:	b2bf      	uxth	r7, r7
	TFT_DrawCharRus(X+16, Y, 'о');
 8018802:	22be      	movs	r2, #190	; 0xbe
 8018804:	b280      	uxth	r0, r0
 8018806:	f003 fe35 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+22, Y, 'л');
 801880a:	4629      	mov	r1, r5
 801880c:	4638      	mov	r0, r7
 801880e:	22bb      	movs	r2, #187	; 0xbb
 8018810:	f003 fe30 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y, 'ь');
 8018814:	f104 001c 	add.w	r0, r4, #28
 8018818:	4629      	mov	r1, r5
 801881a:	228c      	movs	r2, #140	; 0x8c
 801881c:	b280      	uxth	r0, r0
 801881e:	f003 fe29 	bl	801c474 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018822:	f105 030a 	add.w	r3, r5, #10
 8018826:	b29b      	uxth	r3, r3
 8018828:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801882c:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8018830:	4619      	mov	r1, r3
 8018832:	4620      	mov	r0, r4
 8018834:	f8cd 8000 	str.w	r8, [sp]
 8018838:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801883a:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801883e:	f003 fb81 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 8018842:	b2b6      	uxth	r6, r6
 8018844:	f104 000d 	add.w	r0, r4, #13
 8018848:	4631      	mov	r1, r6
 801884a:	2291      	movs	r2, #145	; 0x91
 801884c:	b280      	uxth	r0, r0
 801884e:	f003 fe11 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+11, 'м');
 8018852:	1d60      	adds	r0, r4, #5
 8018854:	4631      	mov	r1, r6
 8018856:	22bc      	movs	r2, #188	; 0xbc
 8018858:	b280      	uxth	r0, r0
 801885a:	f003 fe0b 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801885e:	f105 030f 	add.w	r3, r5, #15
 8018862:	f104 0214 	add.w	r2, r4, #20
 8018866:	f105 010e 	add.w	r1, r5, #14
 801886a:	f104 0013 	add.w	r0, r4, #19
 801886e:	f8cd 8000 	str.w	r8, [sp]
 8018872:	b29b      	uxth	r3, r3
 8018874:	b292      	uxth	r2, r2
 8018876:	b289      	uxth	r1, r1
 8018878:	b280      	uxth	r0, r0
 801887a:	f003 fbd8 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801887e:	2281      	movs	r2, #129	; 0x81
 8018880:	4631      	mov	r1, r6
 8018882:	4638      	mov	r0, r7
}
 8018884:	b002      	add	sp, #8
 8018886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801888a:	f003 bdf3 	b.w	801c474 <TFT_DrawCharRus>
		TFT_DrawCharRus(X, Y, 'я'+1);
 801888e:	2290      	movs	r2, #144	; 0x90
 8018890:	e7a6      	b.n	80187e0 <GUI_TextRu_umol+0x24>
 8018892:	bf00      	nop
 8018894:	200001a0 	.word	0x200001a0

08018898 <GUI_TextRu_umol_sr>:

void GUI_TextRu_umol_sr(uint16_t X, uint16_t Y)
{
 8018898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801889c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801889e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80188a2:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80188a4:	f003 fdda 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80188a8:	2063      	movs	r0, #99	; 0x63
 80188aa:	f003 fddd 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 80188ae:	483c      	ldr	r0, [pc, #240]	; (80189a0 <GUI_TextRu_umol_sr+0x108>)
 80188b0:	f003 fdce 	bl	801c450 <TFT_SetFont>
	
	TFT_DrawCharRus(X+7, Y, 'я'+1);
 80188b4:	1de0      	adds	r0, r4, #7
 80188b6:	4629      	mov	r1, r5
 80188b8:	2290      	movs	r2, #144	; 0x90
 80188ba:	b280      	uxth	r0, r0
 80188bc:	f003 fdda 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y, 'м');
 80188c0:	f104 000f 	add.w	r0, r4, #15
 80188c4:	4629      	mov	r1, r5
 80188c6:	22bc      	movs	r2, #188	; 0xbc
 80188c8:	b280      	uxth	r0, r0
 80188ca:	f003 fdd3 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+23, Y, 'о');
 80188ce:	f104 0017 	add.w	r0, r4, #23
 80188d2:	4629      	mov	r1, r5
 80188d4:	22be      	movs	r2, #190	; 0xbe
 80188d6:	b280      	uxth	r0, r0
 80188d8:	f003 fdcc 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y, 'л');
 80188dc:	f104 001d 	add.w	r0, r4, #29
 80188e0:	4629      	mov	r1, r5
 80188e2:	22bb      	movs	r2, #187	; 0xbb
 80188e4:	b280      	uxth	r0, r0
 80188e6:	f003 fdc5 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+35, Y, 'ь');
 80188ea:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80188ee:	4629      	mov	r1, r5
 80188f0:	228c      	movs	r2, #140	; 0x8c
 80188f2:	b280      	uxth	r0, r0
 80188f4:	f003 fdbe 	bl	801c474 <TFT_DrawCharRus>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 80188f8:	f105 030a 	add.w	r3, r5, #10
 80188fc:	b29b      	uxth	r3, r3
 80188fe:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018902:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 8018906:	1ce0      	adds	r0, r4, #3
 8018908:	4619      	mov	r1, r3
 801890a:	f8cd 8000 	str.w	r8, [sp]
 801890e:	b292      	uxth	r2, r2
 8018910:	b280      	uxth	r0, r0
	
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 8018912:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8018916:	f003 fb15 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 801891a:	b2b6      	uxth	r6, r6
 801891c:	f104 000d 	add.w	r0, r4, #13
 8018920:	4631      	mov	r1, r6
 8018922:	2291      	movs	r2, #145	; 0x91
 8018924:	b280      	uxth	r0, r0
 8018926:	f003 fda5 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+12, 'м');
 801892a:	1d60      	adds	r0, r4, #5
 801892c:	4631      	mov	r1, r6
 801892e:	22bc      	movs	r2, #188	; 0xbc
 8018930:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 8018932:	f105 0710 	add.w	r7, r5, #16
 8018936:	350f      	adds	r5, #15
	TFT_DrawCharRus(X+5, Y+12, 'м');
 8018938:	f003 fd9c 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801893c:	b2bf      	uxth	r7, r7
 801893e:	b2ad      	uxth	r5, r5
 8018940:	f104 0214 	add.w	r2, r4, #20
 8018944:	f104 0013 	add.w	r0, r4, #19
 8018948:	462b      	mov	r3, r5
 801894a:	4639      	mov	r1, r7
 801894c:	f8cd 8000 	str.w	r8, [sp]
 8018950:	b292      	uxth	r2, r2
 8018952:	b280      	uxth	r0, r0
 8018954:	f003 fb6b 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+12, 'с');
 8018958:	f104 0016 	add.w	r0, r4, #22
 801895c:	4631      	mov	r1, r6
 801895e:	2281      	movs	r2, #129	; 0x81
 8018960:	b280      	uxth	r0, r0
 8018962:	f003 fd87 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+30, Y+16, X+31, Y+15, TFT_White);
 8018966:	f104 021f 	add.w	r2, r4, #31
 801896a:	f104 001e 	add.w	r0, r4, #30
 801896e:	462b      	mov	r3, r5
 8018970:	4639      	mov	r1, r7
 8018972:	f8cd 8000 	str.w	r8, [sp]
 8018976:	b292      	uxth	r2, r2
 8018978:	b280      	uxth	r0, r0
 801897a:	f003 fb58 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawCharRus(X+32, Y+12, 'с');
 801897e:	f104 0020 	add.w	r0, r4, #32
 8018982:	4631      	mov	r1, r6
 8018984:	2281      	movs	r2, #129	; 0x81
 8018986:	b280      	uxth	r0, r0
 8018988:	f003 fd74 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801898c:	f104 0027 	add.w	r0, r4, #39	; 0x27
 8018990:	2280      	movs	r2, #128	; 0x80
 8018992:	4631      	mov	r1, r6
 8018994:	b280      	uxth	r0, r0
	
}
 8018996:	b002      	add	sp, #8
 8018998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801899c:	f003 bd6a 	b.w	801c474 <TFT_DrawCharRus>
 80189a0:	200001a0 	.word	0x200001a0

080189a4 <GUI_TextRu_W_m2>:

void GUI_TextRu_W_m2(uint16_t X, uint16_t Y)
{
 80189a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80189a6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80189a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80189ac:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80189ae:	f003 fd55 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80189b2:	2063      	movs	r0, #99	; 0x63
 80189b4:	f003 fd58 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 80189b8:	4819      	ldr	r0, [pc, #100]	; (8018a20 <GUI_TextRu_W_m2+0x7c>)
 80189ba:	f003 fd49 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+3, Y, 'В'-17);
 80189be:	1ce8      	adds	r0, r5, #3
 80189c0:	4621      	mov	r1, r4
 80189c2:	2281      	movs	r2, #129	; 0x81
 80189c4:	b280      	uxth	r0, r0
 80189c6:	f003 fd55 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 80189ca:	4816      	ldr	r0, [pc, #88]	; (8018a24 <GUI_TextRu_W_m2+0x80>)
 80189cc:	f003 fd40 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+13, Y+2, 'т');
 80189d0:	1ca1      	adds	r1, r4, #2
 80189d2:	f105 000d 	add.w	r0, r5, #13
 80189d6:	2282      	movs	r2, #130	; 0x82
 80189d8:	b289      	uxth	r1, r1
 80189da:	b280      	uxth	r0, r0
 80189dc:	f003 fd4a 	bl	801c474 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 80189e0:	f104 030a 	add.w	r3, r4, #10
 80189e4:	b29b      	uxth	r3, r3
 80189e6:	f105 0214 	add.w	r2, r5, #20
 80189ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80189ee:	9100      	str	r1, [sp, #0]
 80189f0:	4628      	mov	r0, r5
 80189f2:	4619      	mov	r1, r3
 80189f4:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 80189f6:	340c      	adds	r4, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 80189f8:	f003 faa4 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 80189fc:	b2a4      	uxth	r4, r4
 80189fe:	f105 000c 	add.w	r0, r5, #12
 8018a02:	4621      	mov	r1, r4
 8018a04:	2291      	movs	r2, #145	; 0x91
 8018a06:	b280      	uxth	r0, r0
 8018a08:	f003 fd34 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8018a0c:	1d28      	adds	r0, r5, #4
 8018a0e:	22bc      	movs	r2, #188	; 0xbc
 8018a10:	4621      	mov	r1, r4
 8018a12:	b280      	uxth	r0, r0
}
 8018a14:	b003      	add	sp, #12
 8018a16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8018a1a:	f003 bd2b 	b.w	801c474 <TFT_DrawCharRus>
 8018a1e:	bf00      	nop
 8018a20:	20000198 	.word	0x20000198
 8018a24:	200001a0 	.word	0x200001a0

08018a28 <GUI_TextRu_W_m2_sr>:

void GUI_TextRu_W_m2_sr(uint16_t X, uint16_t Y)
{
 8018a28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018a2c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018a2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018a32:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018a34:	f003 fd12 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018a38:	2063      	movs	r0, #99	; 0x63
 8018a3a:	f003 fd15 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 8018a3e:	4829      	ldr	r0, [pc, #164]	; (8018ae4 <GUI_TextRu_W_m2_sr+0xbc>)
 8018a40:	f003 fd06 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+8, Y, 'В'-17);
 8018a44:	f104 0008 	add.w	r0, r4, #8
 8018a48:	4629      	mov	r1, r5
 8018a4a:	2281      	movs	r2, #129	; 0x81
 8018a4c:	b280      	uxth	r0, r0
 8018a4e:	f003 fd11 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
	TFT_DrawCharRus(X+18, Y+2, 'т');
 8018a52:	f104 0712 	add.w	r7, r4, #18
	TFT_SetFont(&Font12RU_arch_small);
 8018a56:	4824      	ldr	r0, [pc, #144]	; (8018ae8 <GUI_TextRu_W_m2_sr+0xc0>)
 8018a58:	f003 fcfa 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+18, Y+2, 'т');
 8018a5c:	b2bf      	uxth	r7, r7
 8018a5e:	1ca9      	adds	r1, r5, #2
 8018a60:	4638      	mov	r0, r7
 8018a62:	2282      	movs	r2, #130	; 0x82
 8018a64:	b289      	uxth	r1, r1
 8018a66:	f003 fd05 	bl	801c474 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018a6a:	f105 030a 	add.w	r3, r5, #10
 8018a6e:	b29b      	uxth	r3, r3
 8018a70:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018a74:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8018a78:	4619      	mov	r1, r3
 8018a7a:	4620      	mov	r0, r4
 8018a7c:	f8cd 8000 	str.w	r8, [sp]
 8018a80:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 8018a82:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018a86:	f003 fa5d 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 8018a8a:	b2b6      	uxth	r6, r6
 8018a8c:	f104 000a 	add.w	r0, r4, #10
 8018a90:	4631      	mov	r1, r6
 8018a92:	2291      	movs	r2, #145	; 0x91
 8018a94:	b280      	uxth	r0, r0
 8018a96:	f003 fced 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 8018a9a:	1ca0      	adds	r0, r4, #2
 8018a9c:	4631      	mov	r1, r6
 8018a9e:	22bc      	movs	r2, #188	; 0xbc
 8018aa0:	b280      	uxth	r0, r0
 8018aa2:	f003 fce7 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 8018aa6:	f105 030f 	add.w	r3, r5, #15
 8018aaa:	f105 0110 	add.w	r1, r5, #16
 8018aae:	f104 0011 	add.w	r0, r4, #17
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	463a      	mov	r2, r7
 8018ab6:	f8cd 8000 	str.w	r8, [sp]
 8018aba:	b289      	uxth	r1, r1
 8018abc:	b280      	uxth	r0, r0
 8018abe:	f003 fab6 	bl	801c02e <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 8018ac2:	f104 0015 	add.w	r0, r4, #21
 8018ac6:	4631      	mov	r1, r6
 8018ac8:	2281      	movs	r2, #129	; 0x81
 8018aca:	b280      	uxth	r0, r0
 8018acc:	f003 fcd2 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8018ad0:	f104 001c 	add.w	r0, r4, #28
 8018ad4:	2280      	movs	r2, #128	; 0x80
 8018ad6:	4631      	mov	r1, r6
 8018ad8:	b280      	uxth	r0, r0
}
 8018ada:	b002      	add	sp, #8
 8018adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8018ae0:	f003 bcc8 	b.w	801c474 <TFT_DrawCharRus>
 8018ae4:	20000198 	.word	0x20000198
 8018ae8:	200001a0 	.word	0x200001a0

08018aec <GUI_TextRu_Cd_m2>:

void GUI_TextRu_Cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 8018aec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018af0:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018af2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018af6:	460e      	mov	r6, r1
 8018af8:	4692      	mov	sl, r2
	TFT_SetTextColor(TFT_White);
 8018afa:	f003 fcaf 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018afe:	2063      	movs	r0, #99	; 0x63
 8018b00:	f003 fcb2 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 8018b04:	482f      	ldr	r0, [pc, #188]	; (8018bc4 <GUI_TextRu_Cd_m2+0xd8>)
 8018b06:	f003 fca3 	bl	801c450 <TFT_SetFont>
 8018b0a:	f104 0008 	add.w	r0, r4, #8
 8018b0e:	f104 0810 	add.w	r8, r4, #16
 8018b12:	f106 070a 	add.w	r7, r6, #10
 8018b16:	f104 0906 	add.w	r9, r4, #6
 8018b1a:	f106 050c 	add.w	r5, r6, #12
	
	if(deg){
		TFT_DrawCharRus(X+8, Y, 'к');
 8018b1e:	22ba      	movs	r2, #186	; 0xba
 8018b20:	4631      	mov	r1, r6
 8018b22:	b280      	uxth	r0, r0
	if(deg){
 8018b24:	f1ba 0f00 	cmp.w	sl, #0
 8018b28:	d02c      	beq.n	8018b84 <GUI_TextRu_Cd_m2+0x98>
		TFT_DrawCharRus(X+8, Y, 'к');
 8018b2a:	f003 fca3 	bl	801c474 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'к');
 8018b2e:	22ba      	movs	r2, #186	; 0xba
 8018b30:	4631      	mov	r1, r6
 8018b32:	fa1f f088 	uxth.w	r0, r8
 8018b36:	f003 fc9d 	bl	801c474 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+24, Y, 'д');
 8018b3a:	f104 0018 	add.w	r0, r4, #24
 8018b3e:	22b4      	movs	r2, #180	; 0xb4
 8018b40:	4631      	mov	r1, r6
 8018b42:	b280      	uxth	r0, r0
 8018b44:	f003 fc96 	bl	801c474 <TFT_DrawCharRus>
		
		TFT_DrawLine(X+6, Y+10, X+31, Y+10, TFT_White);
 8018b48:	b2bb      	uxth	r3, r7
 8018b4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018b4e:	f104 021f 	add.w	r2, r4, #31
 8018b52:	9100      	str	r1, [sp, #0]
 8018b54:	b292      	uxth	r2, r2
 8018b56:	4619      	mov	r1, r3
 8018b58:	fa1f f089 	uxth.w	r0, r9
 8018b5c:	f003 f9f2 	bl	801bf44 <TFT_DrawLine>
		
		TFT_DrawCharRus(X+20, Y+12, 'я'+2);
 8018b60:	b2ad      	uxth	r5, r5
 8018b62:	f104 0014 	add.w	r0, r4, #20
 8018b66:	b280      	uxth	r0, r0
 8018b68:	2291      	movs	r2, #145	; 0x91
 8018b6a:	4629      	mov	r1, r5
 8018b6c:	f003 fc82 	bl	801c474 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+12, Y+12, 'м');}
 8018b70:	f104 000c 	add.w	r0, r4, #12
		TFT_DrawCharRus(X+16, Y, 'д');
		
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
		
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8018b74:	22bc      	movs	r2, #188	; 0xbc
 8018b76:	4629      	mov	r1, r5
 8018b78:	b280      	uxth	r0, r0
		
}
 8018b7a:	b002      	add	sp, #8
 8018b7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8018b80:	f003 bc78 	b.w	801c474 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+8, Y, 'к');
 8018b84:	f003 fc76 	bl	801c474 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'д');
 8018b88:	22b4      	movs	r2, #180	; 0xb4
 8018b8a:	4631      	mov	r1, r6
 8018b8c:	fa1f f088 	uxth.w	r0, r8
 8018b90:	f003 fc70 	bl	801c474 <TFT_DrawCharRus>
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
 8018b94:	b2bb      	uxth	r3, r7
 8018b96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018b9a:	f104 0217 	add.w	r2, r4, #23
 8018b9e:	9100      	str	r1, [sp, #0]
 8018ba0:	b292      	uxth	r2, r2
 8018ba2:	4619      	mov	r1, r3
 8018ba4:	fa1f f089 	uxth.w	r0, r9
 8018ba8:	f003 f9cc 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
 8018bac:	b2ad      	uxth	r5, r5
 8018bae:	f104 0011 	add.w	r0, r4, #17
 8018bb2:	b280      	uxth	r0, r0
 8018bb4:	2291      	movs	r2, #145	; 0x91
 8018bb6:	4629      	mov	r1, r5
 8018bb8:	f003 fc5c 	bl	801c474 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8018bbc:	f104 0009 	add.w	r0, r4, #9
 8018bc0:	e7d8      	b.n	8018b74 <GUI_TextRu_Cd_m2+0x88>
 8018bc2:	bf00      	nop
 8018bc4:	200001a0 	.word	0x200001a0

08018bc8 <GUI_TextRu_Irradiance>:

void GUI_TextRu_Irradiance(uint16_t X, uint16_t Y)
{
 8018bc8:	b538      	push	{r3, r4, r5, lr}
 8018bca:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018bcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018bd0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018bd2:	f003 fc43 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018bd6:	2063      	movs	r0, #99	; 0x63
 8018bd8:	f003 fc46 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018bdc:	482d      	ldr	r0, [pc, #180]	; (8018c94 <GUI_TextRu_Irradiance+0xcc>)
 8018bde:	f003 fc37 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 8018be2:	4621      	mov	r1, r4
 8018be4:	229e      	movs	r2, #158	; 0x9e
 8018be6:	4628      	mov	r0, r5
 8018be8:	f003 fc44 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8018bec:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018bee:	482a      	ldr	r0, [pc, #168]	; (8018c98 <GUI_TextRu_Irradiance+0xd0>)
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8018bf0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018bf2:	f003 fc2d 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'б');
 8018bf6:	f105 0010 	add.w	r0, r5, #16
 8018bfa:	4621      	mov	r1, r4
 8018bfc:	22b1      	movs	r2, #177	; 0xb1
 8018bfe:	b280      	uxth	r0, r0
 8018c00:	f003 fc38 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'л');
 8018c04:	f105 001b 	add.w	r0, r5, #27
 8018c08:	4621      	mov	r1, r4
 8018c0a:	22bb      	movs	r2, #187	; 0xbb
 8018c0c:	b280      	uxth	r0, r0
 8018c0e:	f003 fc31 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+5, 'у');
 8018c12:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8018c16:	4621      	mov	r1, r4
 8018c18:	2283      	movs	r2, #131	; 0x83
 8018c1a:	b280      	uxth	r0, r0
 8018c1c:	f003 fc2a 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+51, Y+5, 'ч');
 8018c20:	f105 0033 	add.w	r0, r5, #51	; 0x33
 8018c24:	4621      	mov	r1, r4
 8018c26:	2287      	movs	r2, #135	; 0x87
 8018c28:	b280      	uxth	r0, r0
 8018c2a:	f003 fc23 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'е');
 8018c2e:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8018c32:	4621      	mov	r1, r4
 8018c34:	22b5      	movs	r2, #181	; 0xb5
 8018c36:	b280      	uxth	r0, r0
 8018c38:	f003 fc1c 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'н');
 8018c3c:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8018c40:	4621      	mov	r1, r4
 8018c42:	22bd      	movs	r2, #189	; 0xbd
 8018c44:	b280      	uxth	r0, r0
 8018c46:	f003 fc15 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+86, Y+5, 'н');
 8018c4a:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8018c4e:	4621      	mov	r1, r4
 8018c50:	22bd      	movs	r2, #189	; 0xbd
 8018c52:	b280      	uxth	r0, r0
 8018c54:	f003 fc0e 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+98, Y+5, 'о');
 8018c58:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8018c5c:	4621      	mov	r1, r4
 8018c5e:	22be      	movs	r2, #190	; 0xbe
 8018c60:	b280      	uxth	r0, r0
 8018c62:	f003 fc07 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+110, Y+5, 'с');
 8018c66:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 8018c6a:	4621      	mov	r1, r4
 8018c6c:	2281      	movs	r2, #129	; 0x81
 8018c6e:	b280      	uxth	r0, r0
 8018c70:	f003 fc00 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+119, Y+5, 'т');
 8018c74:	f105 0077 	add.w	r0, r5, #119	; 0x77
 8018c78:	4621      	mov	r1, r4
 8018c7a:	2282      	movs	r2, #130	; 0x82
 8018c7c:	b280      	uxth	r0, r0
 8018c7e:	f003 fbf9 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018c82:	f105 0083 	add.w	r0, r5, #131	; 0x83
 8018c86:	4621      	mov	r1, r4
 8018c88:	228c      	movs	r2, #140	; 0x8c
 8018c8a:	b280      	uxth	r0, r0
}
 8018c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018c90:	f003 bbf0 	b.w	801c474 <TFT_DrawCharRus>
 8018c94:	200001d0 	.word	0x200001d0
 8018c98:	200001d8 	.word	0x200001d8

08018c9c <GUI_TextRu_Luminance>:

void GUI_TextRu_Luminance(uint16_t X, uint16_t Y)
{
 8018c9c:	b538      	push	{r3, r4, r5, lr}
 8018c9e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018ca0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018ca4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018ca6:	f003 fbd9 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018caa:	2063      	movs	r0, #99	; 0x63
 8018cac:	f003 fbdc 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018cb0:	481c      	ldr	r0, [pc, #112]	; (8018d24 <GUI_TextRu_Luminance+0x88>)
 8018cb2:	f003 fbcd 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 8018cb6:	4621      	mov	r1, r4
 8018cb8:	22af      	movs	r2, #175	; 0xaf
 8018cba:	4628      	mov	r0, r5
 8018cbc:	f003 fbda 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8018cc0:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018cc2:	4819      	ldr	r0, [pc, #100]	; (8018d28 <GUI_TextRu_Luminance+0x8c>)
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8018cc4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018cc6:	f003 fbc3 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8018cca:	f105 0010 	add.w	r0, r5, #16
 8018cce:	4621      	mov	r1, r4
 8018cd0:	2280      	movs	r2, #128	; 0x80
 8018cd2:	b280      	uxth	r0, r0
 8018cd4:	f003 fbce 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'к');
 8018cd8:	f105 001c 	add.w	r0, r5, #28
 8018cdc:	4621      	mov	r1, r4
 8018cde:	22ba      	movs	r2, #186	; 0xba
 8018ce0:	b280      	uxth	r0, r0
 8018ce2:	f003 fbc7 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'о');
 8018ce6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018cea:	4621      	mov	r1, r4
 8018cec:	22be      	movs	r2, #190	; 0xbe
 8018cee:	b280      	uxth	r0, r0
 8018cf0:	f003 fbc0 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'с');
 8018cf4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8018cf8:	4621      	mov	r1, r4
 8018cfa:	2281      	movs	r2, #129	; 0x81
 8018cfc:	b280      	uxth	r0, r0
 8018cfe:	f003 fbb9 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'т');
 8018d02:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8018d06:	4621      	mov	r1, r4
 8018d08:	2282      	movs	r2, #130	; 0x82
 8018d0a:	b280      	uxth	r0, r0
 8018d0c:	f003 fbb2 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 8018d10:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8018d14:	4621      	mov	r1, r4
 8018d16:	228c      	movs	r2, #140	; 0x8c
 8018d18:	b280      	uxth	r0, r0
}
 8018d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 8018d1e:	f003 bba9 	b.w	801c474 <TFT_DrawCharRus>
 8018d22:	bf00      	nop
 8018d24:	200001d0 	.word	0x200001d0
 8018d28:	200001d8 	.word	0x200001d8

08018d2c <GUI_TextRu_Radiance>:

void GUI_TextRu_Radiance(uint16_t X, uint16_t Y)
{
 8018d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d2e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018d30:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018d34:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 8018d36:	f003 fb91 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018d3a:	2063      	movs	r0, #99	; 0x63
 8018d3c:	f003 fb94 	bl	801c468 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
	TFT_DrawCharRus(X, Y, 'Э');
	TFT_SetFont(&Font16RU_arch_small);
 8018d40:	4f31      	ldr	r7, [pc, #196]	; (8018e08 <GUI_TextRu_Radiance+0xdc>)
	TFT_SetFont(&Font16RU_arch_big);
 8018d42:	4832      	ldr	r0, [pc, #200]	; (8018e0c <GUI_TextRu_Radiance+0xe0>)
 8018d44:	f003 fb84 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Э');
 8018d48:	4631      	mov	r1, r6
 8018d4a:	22ad      	movs	r2, #173	; 0xad
 8018d4c:	4620      	mov	r0, r4
 8018d4e:	f003 fb91 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8018d52:	1d75      	adds	r5, r6, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018d54:	4638      	mov	r0, r7
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8018d56:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16RU_arch_small);
 8018d58:	f003 fb7a 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8018d5c:	f104 0010 	add.w	r0, r4, #16
 8018d60:	4629      	mov	r1, r5
 8018d62:	22bd      	movs	r2, #189	; 0xbd
 8018d64:	b280      	uxth	r0, r0
 8018d66:	f003 fb85 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y+5, 'е');
 8018d6a:	f104 001d 	add.w	r0, r4, #29
 8018d6e:	4629      	mov	r1, r5
 8018d70:	22b5      	movs	r2, #181	; 0xb5
 8018d72:	b280      	uxth	r0, r0
 8018d74:	f003 fb7e 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018d78:	4825      	ldr	r0, [pc, #148]	; (8018e10 <GUI_TextRu_Radiance+0xe4>)
 8018d7a:	f003 fb69 	bl	801c450 <TFT_SetFont>
	TFT_DrawChar(X+46, 		Y, '.');
 8018d7e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8018d82:	4631      	mov	r1, r6
 8018d84:	222e      	movs	r2, #46	; 0x2e
 8018d86:	b280      	uxth	r0, r0
 8018d88:	f003 fc2c 	bl	801c5e4 <TFT_DrawChar>

	TFT_SetFont(&Font16RU_arch_small);
 8018d8c:	4638      	mov	r0, r7
 8018d8e:	f003 fb5f 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X+41, Y+5, 'р');
 8018d92:	f104 0029 	add.w	r0, r4, #41	; 0x29
 8018d96:	4629      	mov	r1, r5
 8018d98:	2280      	movs	r2, #128	; 0x80
 8018d9a:	b280      	uxth	r0, r0
 8018d9c:	f003 fb6a 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+61, Y+5, 'я');
 8018da0:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8018da4:	4629      	mov	r1, r5
 8018da6:	228f      	movs	r2, #143	; 0x8f
 8018da8:	b280      	uxth	r0, r0
 8018daa:	f003 fb63 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'р');
 8018dae:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8018db2:	4629      	mov	r1, r5
 8018db4:	2280      	movs	r2, #128	; 0x80
 8018db6:	b280      	uxth	r0, r0
 8018db8:	f003 fb5c 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'к');
 8018dbc:	f104 0055 	add.w	r0, r4, #85	; 0x55
 8018dc0:	4629      	mov	r1, r5
 8018dc2:	22ba      	movs	r2, #186	; 0xba
 8018dc4:	b280      	uxth	r0, r0
 8018dc6:	f003 fb55 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 8018dca:	f104 0061 	add.w	r0, r4, #97	; 0x61
 8018dce:	4629      	mov	r1, r5
 8018dd0:	22be      	movs	r2, #190	; 0xbe
 8018dd2:	b280      	uxth	r0, r0
 8018dd4:	f003 fb4e 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 8018dd8:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8018ddc:	4629      	mov	r1, r5
 8018dde:	2281      	movs	r2, #129	; 0x81
 8018de0:	b280      	uxth	r0, r0
 8018de2:	f003 fb47 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+120, Y+5, 'т');
 8018de6:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8018dea:	4629      	mov	r1, r5
 8018dec:	2282      	movs	r2, #130	; 0x82
 8018dee:	b280      	uxth	r0, r0
 8018df0:	f003 fb40 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018df4:	f104 0083 	add.w	r0, r4, #131	; 0x83
 8018df8:	4629      	mov	r1, r5
 8018dfa:	228c      	movs	r2, #140	; 0x8c
 8018dfc:	b280      	uxth	r0, r0

}
 8018dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8018e02:	f003 bb37 	b.w	801c474 <TFT_DrawCharRus>
 8018e06:	bf00      	nop
 8018e08:	200001d8 	.word	0x200001d8
 8018e0c:	200001d0 	.word	0x200001d0
 8018e10:	200001b0 	.word	0x200001b0

08018e14 <GUI_TextMsgRu_LowIrradiance>:

void GUI_TextMsgRu_LowIrradiance(uint16_t X, uint16_t Y)
{
 8018e14:	b538      	push	{r3, r4, r5, lr}
 8018e16:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018e18:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018e1c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018e1e:	f003 fb1d 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018e22:	2063      	movs	r0, #99	; 0x63
 8018e24:	f003 fb20 	bl	801c468 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8018e28:	483f      	ldr	r0, [pc, #252]	; (8018f28 <GUI_TextMsgRu_LowIrradiance+0x114>)
 8018e2a:	f003 fb11 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 8018e2e:	4621      	mov	r1, r4
 8018e30:	229c      	movs	r2, #156	; 0x9c
 8018e32:	4628      	mov	r0, r5
 8018e34:	f003 fb1e 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018e38:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018e3a:	483c      	ldr	r0, [pc, #240]	; (8018f2c <GUI_TextMsgRu_LowIrradiance+0x118>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018e3c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018e3e:	f003 fb07 	bl	801c450 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018e42:	f105 0010 	add.w	r0, r5, #16
 8018e46:	4621      	mov	r1, r4
 8018e48:	22b0      	movs	r2, #176	; 0xb0
 8018e4a:	b280      	uxth	r0, r0
 8018e4c:	f003 fb12 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8018e50:	f105 001c 	add.w	r0, r5, #28
 8018e54:	4621      	mov	r1, r4
 8018e56:	22bb      	movs	r2, #187	; 0xbb
 8018e58:	b280      	uxth	r0, r0
 8018e5a:	f003 fb0b 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 8018e5e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018e62:	4621      	mov	r1, r4
 8018e64:	22b0      	movs	r2, #176	; 0xb0
 8018e66:	b280      	uxth	r0, r0
 8018e68:	f003 fb04 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 8018e6c:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8018e70:	4621      	mov	r1, r4
 8018e72:	228f      	movs	r2, #143	; 0x8f
 8018e74:	b280      	uxth	r0, r0
 8018e76:	f003 fafd 	bl	801c474 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'о');
 8018e7a:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8018e7e:	4621      	mov	r1, r4
 8018e80:	22be      	movs	r2, #190	; 0xbe
 8018e82:	b280      	uxth	r0, r0
 8018e84:	f003 faf6 	bl	801c474 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+87, Y+5, 'б');
 8018e88:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8018e8c:	4621      	mov	r1, r4
 8018e8e:	22b1      	movs	r2, #177	; 0xb1
 8018e90:	b280      	uxth	r0, r0
 8018e92:	f003 faef 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+98, Y+5, 'л');
 8018e96:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8018e9a:	4621      	mov	r1, r4
 8018e9c:	22bb      	movs	r2, #187	; 0xbb
 8018e9e:	b280      	uxth	r0, r0
 8018ea0:	f003 fae8 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+110, Y+5, 'у');
 8018ea4:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 8018ea8:	4621      	mov	r1, r4
 8018eaa:	2283      	movs	r2, #131	; 0x83
 8018eac:	b280      	uxth	r0, r0
 8018eae:	f003 fae1 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+122, Y+5, 'ч');
 8018eb2:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 8018eb6:	4621      	mov	r1, r4
 8018eb8:	2287      	movs	r2, #135	; 0x87
 8018eba:	b280      	uxth	r0, r0
 8018ebc:	f003 fada 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+134, Y+5, 'е');
 8018ec0:	f105 0086 	add.w	r0, r5, #134	; 0x86
 8018ec4:	4621      	mov	r1, r4
 8018ec6:	22b5      	movs	r2, #181	; 0xb5
 8018ec8:	b280      	uxth	r0, r0
 8018eca:	f003 fad3 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+145, Y+5, 'н');
 8018ece:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8018ed2:	4621      	mov	r1, r4
 8018ed4:	22bd      	movs	r2, #189	; 0xbd
 8018ed6:	b280      	uxth	r0, r0
 8018ed8:	f003 facc 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+157, Y+5, 'н');
 8018edc:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 8018ee0:	4621      	mov	r1, r4
 8018ee2:	22bd      	movs	r2, #189	; 0xbd
 8018ee4:	b280      	uxth	r0, r0
 8018ee6:	f003 fac5 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+169, Y+5, 'о');
 8018eea:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
 8018eee:	4621      	mov	r1, r4
 8018ef0:	22be      	movs	r2, #190	; 0xbe
 8018ef2:	b280      	uxth	r0, r0
 8018ef4:	f003 fabe 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+181, Y+5, 'с');
 8018ef8:	f105 00b5 	add.w	r0, r5, #181	; 0xb5
 8018efc:	4621      	mov	r1, r4
 8018efe:	2281      	movs	r2, #129	; 0x81
 8018f00:	b280      	uxth	r0, r0
 8018f02:	f003 fab7 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+190, Y+5, 'т');
 8018f06:	f105 00be 	add.w	r0, r5, #190	; 0xbe
 8018f0a:	4621      	mov	r1, r4
 8018f0c:	2282      	movs	r2, #130	; 0x82
 8018f0e:	b280      	uxth	r0, r0
 8018f10:	f003 fab0 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 8018f14:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8018f18:	4621      	mov	r1, r4
 8018f1a:	228c      	movs	r2, #140	; 0x8c
 8018f1c:	b280      	uxth	r0, r0
}
 8018f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 8018f22:	f003 baa7 	b.w	801c474 <TFT_DrawCharRus>
 8018f26:	bf00      	nop
 8018f28:	200001d0 	.word	0x200001d0
 8018f2c:	200001d8 	.word	0x200001d8

08018f30 <GUI_TextMsgRu_LowRadiance>:

void GUI_TextMsgRu_LowRadiance(uint16_t X, uint16_t Y)
{
 8018f30:	b538      	push	{r3, r4, r5, lr}
 8018f32:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018f34:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018f38:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018f3a:	f003 fa8f 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018f3e:	2063      	movs	r0, #99	; 0x63
 8018f40:	f003 fa92 	bl	801c468 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8018f44:	482d      	ldr	r0, [pc, #180]	; (8018ffc <GUI_TextMsgRu_LowRadiance+0xcc>)
 8018f46:	f003 fa83 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 8018f4a:	4621      	mov	r1, r4
 8018f4c:	229c      	movs	r2, #156	; 0x9c
 8018f4e:	4628      	mov	r0, r5
 8018f50:	f003 fa90 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018f54:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018f56:	482a      	ldr	r0, [pc, #168]	; (8019000 <GUI_TextMsgRu_LowRadiance+0xd0>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018f58:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018f5a:	f003 fa79 	bl	801c450 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8018f5e:	f105 0010 	add.w	r0, r5, #16
 8018f62:	4621      	mov	r1, r4
 8018f64:	22b0      	movs	r2, #176	; 0xb0
 8018f66:	b280      	uxth	r0, r0
 8018f68:	f003 fa84 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8018f6c:	f105 001c 	add.w	r0, r5, #28
 8018f70:	4621      	mov	r1, r4
 8018f72:	22bb      	movs	r2, #187	; 0xbb
 8018f74:	b280      	uxth	r0, r0
 8018f76:	f003 fa7d 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 8018f7a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018f7e:	4621      	mov	r1, r4
 8018f80:	22b0      	movs	r2, #176	; 0xb0
 8018f82:	b280      	uxth	r0, r0
 8018f84:	f003 fa76 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 8018f88:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8018f8c:	4621      	mov	r1, r4
 8018f8e:	228f      	movs	r2, #143	; 0x8f
 8018f90:	b280      	uxth	r0, r0
 8018f92:	f003 fa6f 	bl	801c474 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'я');
 8018f96:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8018f9a:	4621      	mov	r1, r4
 8018f9c:	228f      	movs	r2, #143	; 0x8f
 8018f9e:	b280      	uxth	r0, r0
 8018fa0:	f003 fa68 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+85, Y+5, 'р');
 8018fa4:	f105 0055 	add.w	r0, r5, #85	; 0x55
 8018fa8:	4621      	mov	r1, r4
 8018faa:	2280      	movs	r2, #128	; 0x80
 8018fac:	b280      	uxth	r0, r0
 8018fae:	f003 fa61 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+97, Y+5, 'к');
 8018fb2:	f105 0061 	add.w	r0, r5, #97	; 0x61
 8018fb6:	4621      	mov	r1, r4
 8018fb8:	22ba      	movs	r2, #186	; 0xba
 8018fba:	b280      	uxth	r0, r0
 8018fbc:	f003 fa5a 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+109, Y+5, 'о');
 8018fc0:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 8018fc4:	4621      	mov	r1, r4
 8018fc6:	22be      	movs	r2, #190	; 0xbe
 8018fc8:	b280      	uxth	r0, r0
 8018fca:	f003 fa53 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+121, Y+5, 'с');
 8018fce:	f105 0079 	add.w	r0, r5, #121	; 0x79
 8018fd2:	4621      	mov	r1, r4
 8018fd4:	2281      	movs	r2, #129	; 0x81
 8018fd6:	b280      	uxth	r0, r0
 8018fd8:	f003 fa4c 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+132, Y+5, 'т');
 8018fdc:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8018fe0:	4621      	mov	r1, r4
 8018fe2:	2282      	movs	r2, #130	; 0x82
 8018fe4:	b280      	uxth	r0, r0
 8018fe6:	f003 fa45 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 8018fea:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 8018fee:	4621      	mov	r1, r4
 8018ff0:	228c      	movs	r2, #140	; 0x8c
 8018ff2:	b280      	uxth	r0, r0
}
 8018ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 8018ff8:	f003 ba3c 	b.w	801c474 <TFT_DrawCharRus>
 8018ffc:	200001d0 	.word	0x200001d0
 8019000:	200001d8 	.word	0x200001d8

08019004 <GUI_TextMsgRu_HighIrradiance>:

void GUI_TextMsgRu_HighIrradiance(uint16_t X, uint16_t Y)
{
 8019004:	b538      	push	{r3, r4, r5, lr}
 8019006:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019008:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801900c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801900e:	f003 fa25 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019012:	2063      	movs	r0, #99	; 0x63
 8019014:	f003 fa28 	bl	801c468 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019018:	4846      	ldr	r0, [pc, #280]	; (8019134 <GUI_TextMsgRu_HighIrradiance+0x130>)
 801901a:	f003 fa19 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 801901e:	4621      	mov	r1, r4
 8019020:	2291      	movs	r2, #145	; 0x91
 8019022:	4628      	mov	r0, r5
 8019024:	f003 fa26 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019028:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801902a:	4843      	ldr	r0, [pc, #268]	; (8019138 <GUI_TextMsgRu_HighIrradiance+0x134>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801902c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801902e:	f003 fa0f 	bl	801c450 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019032:	f105 0010 	add.w	r0, r5, #16
 8019036:	4621      	mov	r1, r4
 8019038:	22be      	movs	r2, #190	; 0xbe
 801903a:	b280      	uxth	r0, r0
 801903c:	f003 fa1a 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019040:	f105 001c 	add.w	r0, r5, #28
 8019044:	4621      	mov	r1, r4
 8019046:	22bb      	movs	r2, #187	; 0xbb
 8019048:	b280      	uxth	r0, r0
 801904a:	f003 fa13 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 801904e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8019052:	4621      	mov	r1, r4
 8019054:	228c      	movs	r2, #140	; 0x8c
 8019056:	b280      	uxth	r0, r0
 8019058:	f003 fa0c 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 801905c:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019060:	4621      	mov	r1, r4
 8019062:	2288      	movs	r2, #136	; 0x88
 8019064:	b280      	uxth	r0, r0
 8019066:	f003 fa05 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 801906a:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801906e:	4621      	mov	r1, r4
 8019070:	22b0      	movs	r2, #176	; 0xb0
 8019072:	b280      	uxth	r0, r0
 8019074:	f003 f9fe 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 8019078:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 801907c:	4621      	mov	r1, r4
 801907e:	228f      	movs	r2, #143	; 0x8f
 8019080:	b280      	uxth	r0, r0
 8019082:	f003 f9f7 	bl	801c474 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'о');
 8019086:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801908a:	4621      	mov	r1, r4
 801908c:	22be      	movs	r2, #190	; 0xbe
 801908e:	b280      	uxth	r0, r0
 8019090:	f003 f9f0 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+116, Y+5, 'б');
 8019094:	f105 0074 	add.w	r0, r5, #116	; 0x74
 8019098:	4621      	mov	r1, r4
 801909a:	22b1      	movs	r2, #177	; 0xb1
 801909c:	b280      	uxth	r0, r0
 801909e:	f003 f9e9 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+127, Y+5, 'л');
 80190a2:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 80190a6:	4621      	mov	r1, r4
 80190a8:	22bb      	movs	r2, #187	; 0xbb
 80190aa:	b280      	uxth	r0, r0
 80190ac:	f003 f9e2 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+139, Y+5, 'у');
 80190b0:	f105 008b 	add.w	r0, r5, #139	; 0x8b
 80190b4:	4621      	mov	r1, r4
 80190b6:	2283      	movs	r2, #131	; 0x83
 80190b8:	b280      	uxth	r0, r0
 80190ba:	f003 f9db 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+151, Y+5, 'ч');
 80190be:	f105 0097 	add.w	r0, r5, #151	; 0x97
 80190c2:	4621      	mov	r1, r4
 80190c4:	2287      	movs	r2, #135	; 0x87
 80190c6:	b280      	uxth	r0, r0
 80190c8:	f003 f9d4 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+163, Y+5, 'е');
 80190cc:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
 80190d0:	4621      	mov	r1, r4
 80190d2:	22b5      	movs	r2, #181	; 0xb5
 80190d4:	b280      	uxth	r0, r0
 80190d6:	f003 f9cd 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+174, Y+5, 'н');
 80190da:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 80190de:	4621      	mov	r1, r4
 80190e0:	22bd      	movs	r2, #189	; 0xbd
 80190e2:	b280      	uxth	r0, r0
 80190e4:	f003 f9c6 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+186, Y+5, 'н');
 80190e8:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 80190ec:	4621      	mov	r1, r4
 80190ee:	22bd      	movs	r2, #189	; 0xbd
 80190f0:	b280      	uxth	r0, r0
 80190f2:	f003 f9bf 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+198, Y+5, 'о');
 80190f6:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 80190fa:	4621      	mov	r1, r4
 80190fc:	22be      	movs	r2, #190	; 0xbe
 80190fe:	b280      	uxth	r0, r0
 8019100:	f003 f9b8 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+210, Y+5, 'с');
 8019104:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 8019108:	4621      	mov	r1, r4
 801910a:	2281      	movs	r2, #129	; 0x81
 801910c:	b280      	uxth	r0, r0
 801910e:	f003 f9b1 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+219, Y+5, 'т');
 8019112:	f105 00db 	add.w	r0, r5, #219	; 0xdb
 8019116:	4621      	mov	r1, r4
 8019118:	2282      	movs	r2, #130	; 0x82
 801911a:	b280      	uxth	r0, r0
 801911c:	f003 f9aa 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 8019120:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
 8019124:	4621      	mov	r1, r4
 8019126:	228c      	movs	r2, #140	; 0x8c
 8019128:	b280      	uxth	r0, r0
}
 801912a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 801912e:	f003 b9a1 	b.w	801c474 <TFT_DrawCharRus>
 8019132:	bf00      	nop
 8019134:	200001d0 	.word	0x200001d0
 8019138:	200001d8 	.word	0x200001d8

0801913c <GUI_TextMsgRu_HighRadiance>:

void GUI_TextMsgRu_HighRadiance(uint16_t X, uint16_t Y)
{
 801913c:	b538      	push	{r3, r4, r5, lr}
 801913e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019140:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019144:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019146:	f003 f989 	bl	801c45c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801914a:	2063      	movs	r0, #99	; 0x63
 801914c:	f003 f98c 	bl	801c468 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019150:	4834      	ldr	r0, [pc, #208]	; (8019224 <GUI_TextMsgRu_HighRadiance+0xe8>)
 8019152:	f003 f97d 	bl	801c450 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 8019156:	4621      	mov	r1, r4
 8019158:	2291      	movs	r2, #145	; 0x91
 801915a:	4628      	mov	r0, r5
 801915c:	f003 f98a 	bl	801c474 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019160:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019162:	4831      	ldr	r0, [pc, #196]	; (8019228 <GUI_TextMsgRu_HighRadiance+0xec>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019164:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019166:	f003 f973 	bl	801c450 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801916a:	f105 0010 	add.w	r0, r5, #16
 801916e:	4621      	mov	r1, r4
 8019170:	22be      	movs	r2, #190	; 0xbe
 8019172:	b280      	uxth	r0, r0
 8019174:	f003 f97e 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019178:	f105 001c 	add.w	r0, r5, #28
 801917c:	4621      	mov	r1, r4
 801917e:	22bb      	movs	r2, #187	; 0xbb
 8019180:	b280      	uxth	r0, r0
 8019182:	f003 f977 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 8019186:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801918a:	4621      	mov	r1, r4
 801918c:	228c      	movs	r2, #140	; 0x8c
 801918e:	b280      	uxth	r0, r0
 8019190:	f003 f970 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 8019194:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019198:	4621      	mov	r1, r4
 801919a:	2288      	movs	r2, #136	; 0x88
 801919c:	b280      	uxth	r0, r0
 801919e:	f003 f969 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 80191a2:	f105 0043 	add.w	r0, r5, #67	; 0x43
 80191a6:	4621      	mov	r1, r4
 80191a8:	22b0      	movs	r2, #176	; 0xb0
 80191aa:	b280      	uxth	r0, r0
 80191ac:	f003 f962 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 80191b0:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 80191b4:	4621      	mov	r1, r4
 80191b6:	228f      	movs	r2, #143	; 0x8f
 80191b8:	b280      	uxth	r0, r0
 80191ba:	f003 f95b 	bl	801c474 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'я');
 80191be:	f105 0066 	add.w	r0, r5, #102	; 0x66
 80191c2:	4621      	mov	r1, r4
 80191c4:	228f      	movs	r2, #143	; 0x8f
 80191c6:	b280      	uxth	r0, r0
 80191c8:	f003 f954 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+114, Y+5, 'р');
 80191cc:	f105 0072 	add.w	r0, r5, #114	; 0x72
 80191d0:	4621      	mov	r1, r4
 80191d2:	2280      	movs	r2, #128	; 0x80
 80191d4:	b280      	uxth	r0, r0
 80191d6:	f003 f94d 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+126, Y+5, 'к');
 80191da:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 80191de:	4621      	mov	r1, r4
 80191e0:	22ba      	movs	r2, #186	; 0xba
 80191e2:	b280      	uxth	r0, r0
 80191e4:	f003 f946 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+138, Y+5, 'о');
 80191e8:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 80191ec:	4621      	mov	r1, r4
 80191ee:	22be      	movs	r2, #190	; 0xbe
 80191f0:	b280      	uxth	r0, r0
 80191f2:	f003 f93f 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+150, Y+5, 'с');
 80191f6:	f105 0096 	add.w	r0, r5, #150	; 0x96
 80191fa:	4621      	mov	r1, r4
 80191fc:	2281      	movs	r2, #129	; 0x81
 80191fe:	b280      	uxth	r0, r0
 8019200:	f003 f938 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+161, Y+5, 'т');
 8019204:	f105 00a1 	add.w	r0, r5, #161	; 0xa1
 8019208:	4621      	mov	r1, r4
 801920a:	2282      	movs	r2, #130	; 0x82
 801920c:	b280      	uxth	r0, r0
 801920e:	f003 f931 	bl	801c474 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 8019212:	f105 00ac 	add.w	r0, r5, #172	; 0xac
 8019216:	4621      	mov	r1, r4
 8019218:	228c      	movs	r2, #140	; 0x8c
 801921a:	b280      	uxth	r0, r0
 801921c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 8019220:	f003 b928 	b.w	801c474 <TFT_DrawCharRus>
 8019224:	200001d0 	.word	0x200001d0
 8019228:	200001d8 	.word	0x200001d8

0801922c <Set.part.0>:
void Set(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_SET);
 801922c:	2201      	movs	r2, #1
 801922e:	2102      	movs	r1, #2
 8019230:	4801      	ldr	r0, [pc, #4]	; (8019238 <Set.part.0+0xc>)
 8019232:	f7e9 bac5 	b.w	80027c0 <HAL_GPIO_WritePin>
 8019236:	bf00      	nop
 8019238:	48000400 	.word	0x48000400

0801923c <Reset.part.1>:
void Reset(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_RESET);
 801923c:	2200      	movs	r2, #0
 801923e:	2102      	movs	r1, #2
 8019240:	4801      	ldr	r0, [pc, #4]	; (8019248 <Reset.part.1+0xc>)
 8019242:	f7e9 babd 	b.w	80027c0 <HAL_GPIO_WritePin>
 8019246:	bf00      	nop
 8019248:	48000400 	.word	0x48000400

0801924c <GPIO_QSPI_Init>:
{
 801924c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019250:	4b39      	ldr	r3, [pc, #228]	; (8019338 <GPIO_QSPI_Init+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8019252:	4c3a      	ldr	r4, [pc, #232]	; (801933c <GPIO_QSPI_Init+0xf0>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019256:	4f3a      	ldr	r7, [pc, #232]	; (8019340 <GPIO_QSPI_Init+0xf4>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019258:	f042 0220 	orr.w	r2, r2, #32
 801925c:	64da      	str	r2, [r3, #76]	; 0x4c
 801925e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019260:	f002 0220 	and.w	r2, r2, #32
 8019264:	9201      	str	r2, [sp, #4]
 8019266:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801926a:	f042 0201 	orr.w	r2, r2, #1
 801926e:	64da      	str	r2, [r3, #76]	; 0x4c
 8019270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019272:	f002 0201 	and.w	r2, r2, #1
 8019276:	9202      	str	r2, [sp, #8]
 8019278:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801927a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801927c:	f042 0202 	orr.w	r2, r2, #2
 8019280:	64da      	str	r2, [r3, #76]	; 0x4c
 8019282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019284:	f003 0302 	and.w	r3, r3, #2
 8019288:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801928a:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801928c:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801928e:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019292:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019294:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019296:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019298:	4621      	mov	r1, r4
 801929a:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801929c:	e884 0048 	stmia.w	r4, {r3, r6}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80192a0:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80192a4:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80192a8:	f7e9 f914 	bl	80024d4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80192ac:	4621      	mov	r1, r4
 80192ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80192b2:	f8c4 9000 	str.w	r9, [r4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80192b6:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80192b8:	60a6      	str	r6, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80192ba:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80192be:	f7e9 f909 	bl	80024d4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80192c2:	4649      	mov	r1, r9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80192c4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8019344 <GPIO_QSPI_Init+0xf8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80192c8:	4632      	mov	r2, r6
 80192ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80192ce:	f7e9 fa77 	bl	80027c0 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80192d2:	4621      	mov	r1, r4
 80192d4:	4648      	mov	r0, r9
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80192d6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80192da:	f8c4 8000 	str.w	r8, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80192de:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192e0:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80192e2:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80192e6:	f7e9 f8f5 	bl	80024d4 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80192ea:	4621      	mov	r1, r4
 80192ec:	4638      	mov	r0, r7
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80192ee:	f8c4 a000 	str.w	sl, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80192f2:	6066      	str	r6, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192f4:	60a5      	str	r5, [r4, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80192f6:	f8c4 800c 	str.w	r8, [r4, #12]
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80192fa:	f7e9 f8eb 	bl	80024d4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80192fe:	462a      	mov	r2, r5
 8019300:	4631      	mov	r1, r6
 8019302:	4648      	mov	r0, r9
 8019304:	f7e9 fa5c 	bl	80027c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8019308:	462a      	mov	r2, r5
 801930a:	4648      	mov	r0, r9
 801930c:	2102      	movs	r1, #2
 801930e:	f7e9 fa57 	bl	80027c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8019312:	462a      	mov	r2, r5
 8019314:	4638      	mov	r0, r7
 8019316:	2140      	movs	r1, #64	; 0x40
 8019318:	f7e9 fa52 	bl	80027c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 801931c:	462a      	mov	r2, r5
 801931e:	4638      	mov	r0, r7
 8019320:	2180      	movs	r1, #128	; 0x80
 8019322:	f7e9 fa4d 	bl	80027c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8019326:	462a      	mov	r2, r5
 8019328:	4651      	mov	r1, sl
 801932a:	4638      	mov	r0, r7
 801932c:	f7e9 fa48 	bl	80027c0 <HAL_GPIO_WritePin>
}
 8019330:	b004      	add	sp, #16
 8019332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019336:	bf00      	nop
 8019338:	40021000 	.word	0x40021000
 801933c:	20005734 	.word	0x20005734
 8019340:	48001400 	.word	0x48001400
 8019344:	48000400 	.word	0x48000400

08019348 <Set>:
	switch(pin)
 8019348:	3801      	subs	r0, #1
 801934a:	2805      	cmp	r0, #5
 801934c:	d81b      	bhi.n	8019386 <Set+0x3e>
 801934e:	e8df f000 	tbb	[pc, r0]
 8019352:	0503      	.short	0x0503
 8019354:	16110e0a 	.word	0x16110e0a
 8019358:	f7ff bf68 	b.w	801922c <Set.part.0>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 801935c:	2201      	movs	r2, #1
 801935e:	480a      	ldr	r0, [pc, #40]	; (8019388 <Set+0x40>)
 8019360:	4611      	mov	r1, r2
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019362:	f7e9 ba2d 	b.w	80027c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_SET);
 8019366:	2201      	movs	r2, #1
 8019368:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801936a:	4808      	ldr	r0, [pc, #32]	; (801938c <Set+0x44>)
 801936c:	e7f9      	b.n	8019362 <Set+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 801936e:	2201      	movs	r2, #1
 8019370:	2140      	movs	r1, #64	; 0x40
 8019372:	e7fa      	b.n	801936a <Set+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 8019374:	2201      	movs	r2, #1
 8019376:	2104      	movs	r1, #4
 8019378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801937c:	e7f1      	b.n	8019362 <Set+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801937e:	2201      	movs	r2, #1
 8019380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019384:	e7f1      	b.n	801936a <Set+0x22>
 8019386:	4770      	bx	lr
 8019388:	48000400 	.word	0x48000400
 801938c:	48001400 	.word	0x48001400

08019390 <Reset>:
	switch(pin)
 8019390:	3801      	subs	r0, #1
 8019392:	2805      	cmp	r0, #5
 8019394:	d81b      	bhi.n	80193ce <Reset+0x3e>
 8019396:	e8df f000 	tbb	[pc, r0]
 801939a:	0503      	.short	0x0503
 801939c:	16110e0a 	.word	0x16110e0a
 80193a0:	f7ff bf4c 	b.w	801923c <Reset.part.1>
			break;
		case io1:
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_RESET);
 80193a4:	480a      	ldr	r0, [pc, #40]	; (80193d0 <Reset+0x40>)
 80193a6:	2200      	movs	r2, #0
 80193a8:	2101      	movs	r1, #1
			break;
		case cs:
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
			break;
		case clk:
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 80193aa:	f7e9 ba09 	b.w	80027c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_RESET);
 80193ae:	2200      	movs	r2, #0
 80193b0:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 80193b2:	4808      	ldr	r0, [pc, #32]	; (80193d4 <Reset+0x44>)
 80193b4:	e7f9      	b.n	80193aa <Reset+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_RESET);
 80193b6:	2200      	movs	r2, #0
 80193b8:	2140      	movs	r1, #64	; 0x40
 80193ba:	e7fa      	b.n	80193b2 <Reset+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 80193bc:	2200      	movs	r2, #0
 80193be:	2104      	movs	r1, #4
 80193c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80193c4:	e7f1      	b.n	80193aa <Reset+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 80193c6:	2200      	movs	r2, #0
 80193c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80193cc:	e7f1      	b.n	80193b2 <Reset+0x22>
 80193ce:	4770      	bx	lr
 80193d0:	48000400 	.word	0x48000400
 80193d4:	48001400 	.word	0x48001400

080193d8 <QSPI_Recieve_Init>:
	}
}

/* */
void QSPI_Recieve_Init(void)
{
 80193d8:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80193da:	4c09      	ldr	r4, [pc, #36]	; (8019400 <QSPI_Recieve_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80193dc:	4809      	ldr	r0, [pc, #36]	; (8019404 <QSPI_Recieve_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80193de:	2303      	movs	r3, #3
 80193e0:	2500      	movs	r5, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80193e2:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80193e4:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80193e8:	f7e9 f874 	bl	80024d4 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80193ec:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80193ee:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80193f2:	4621      	mov	r1, r4
 80193f4:	4804      	ldr	r0, [pc, #16]	; (8019408 <QSPI_Recieve_Init+0x30>)
}
 80193f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80193fa:	f7e9 b86b 	b.w	80024d4 <HAL_GPIO_Init>
 80193fe:	bf00      	nop
 8019400:	20005734 	.word	0x20005734
 8019404:	48000400 	.word	0x48000400
 8019408:	48001400 	.word	0x48001400

0801940c <QSPI_Transmit_Init>:
void QSPI_Transmit_Init(void)
{
 801940c:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801940e:	4c09      	ldr	r4, [pc, #36]	; (8019434 <QSPI_Transmit_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019410:	4809      	ldr	r0, [pc, #36]	; (8019438 <QSPI_Transmit_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019412:	2303      	movs	r3, #3
 8019414:	2501      	movs	r5, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019416:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019418:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801941c:	f7e9 f85a 	bl	80024d4 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8019420:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019422:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019426:	4621      	mov	r1, r4
 8019428:	4804      	ldr	r0, [pc, #16]	; (801943c <QSPI_Transmit_Init+0x30>)
}
 801942a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801942e:	f7e9 b851 	b.w	80024d4 <HAL_GPIO_Init>
 8019432:	bf00      	nop
 8019434:	20005734 	.word	0x20005734
 8019438:	48000400 	.word	0x48000400
 801943c:	48001400 	.word	0x48001400

08019440 <Single_Mode>:
void Single_Mode(void)
{
 8019440:	b570      	push	{r4, r5, r6, lr}
	/* PB1 (IO0) */
	GPIO_InitStruct.Pin = IO0_PIN;
 8019442:	4c0d      	ldr	r4, [pc, #52]	; (8019478 <Single_Mode+0x38>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019444:	4e0d      	ldr	r6, [pc, #52]	; (801947c <Single_Mode+0x3c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019446:	2501      	movs	r5, #1
 8019448:	2302      	movs	r3, #2
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801944a:	4621      	mov	r1, r4
 801944c:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801944e:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019452:	f7e9 f83f 	bl	80024d4 <HAL_GPIO_Init>
	
	/* PB0 (IO1) */
	GPIO_InitStruct.Pin = IO1_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019456:	2300      	movs	r3, #0
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019458:	4621      	mov	r1, r4
 801945a:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801945c:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pin = IO1_PIN;
 801945e:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019460:	f7e9 f838 	bl	80024d4 <HAL_GPIO_Init>
	
	/* PF7 (IO2) */
	GPIO_InitStruct.Pin = IO2_PIN;
 8019464:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019466:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 801946a:	4621      	mov	r1, r4
 801946c:	4804      	ldr	r0, [pc, #16]	; (8019480 <Single_Mode+0x40>)
}
 801946e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8019472:	f7e9 b82f 	b.w	80024d4 <HAL_GPIO_Init>
 8019476:	bf00      	nop
 8019478:	20005734 	.word	0x20005734
 801947c:	48000400 	.word	0x48000400
 8019480:	48001400 	.word	0x48001400

08019484 <SPI_Byte_T>:

/* Single mode SPI functions */

/* Byte transmit function */
void SPI_Byte_T(uint8_t byte)
{
 8019484:	b538      	push	{r3, r4, r5, lr}
 8019486:	4605      	mov	r5, r0
 8019488:	2408      	movs	r4, #8
	for(uint8_t i=0; i<8; i++)
	{
		if(0x80 & byte)
 801948a:	062b      	lsls	r3, r5, #24
 801948c:	d501      	bpl.n	8019492 <SPI_Byte_T+0xe>
 801948e:	f7ff fecd 	bl	801922c <Set.part.0>
		{
			Set(io0);
		}
		Set(clk);
 8019492:	2006      	movs	r0, #6
 8019494:	f7ff ff58 	bl	8019348 <Set>
 8019498:	3c01      	subs	r4, #1
 801949a:	f7ff fecf 	bl	801923c <Reset.part.1>
		Reset(io0);	
		byte=(byte<<1);
		Reset(clk);	
 801949e:	2006      	movs	r0, #6
		byte=(byte<<1);
 80194a0:	006d      	lsls	r5, r5, #1
		Reset(clk);	
 80194a2:	f7ff ff75 	bl	8019390 <Reset>
	for(uint8_t i=0; i<8; i++)
 80194a6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte=(byte<<1);
 80194aa:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<8; i++)
 80194ac:	d1ed      	bne.n	801948a <SPI_Byte_T+0x6>
	}	
}
 80194ae:	bd38      	pop	{r3, r4, r5, pc}

080194b0 <SPI_Byte_R>:
	
	SPI_Check_Busy();
}
/* Byte receive function */
uint8_t SPI_Byte_R(void)
{
 80194b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t byte=0;
	for(uint8_t i=0; i<8; i++)
 80194b2:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 80194b4:	4e0d      	ldr	r6, [pc, #52]	; (80194ec <SPI_Byte_R+0x3c>)
	uint8_t byte=0;
 80194b6:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 80194b8:	2101      	movs	r1, #1
 80194ba:	4630      	mov	r0, r6
 80194bc:	f7e9 f97a 	bl	80027b4 <HAL_GPIO_ReadPin>
 80194c0:	b108      	cbz	r0, 80194c6 <SPI_Byte_R+0x16>
 80194c2:	f044 0401 	orr.w	r4, r4, #1
		Set(clk);
 80194c6:	2006      	movs	r0, #6
 80194c8:	f7ff ff3e 	bl	8019348 <Set>
		if (i<7) byte=(byte<<1);
 80194cc:	2d07      	cmp	r5, #7
	for(uint8_t i=0; i<8; i++)
 80194ce:	f105 0501 	add.w	r5, r5, #1
		if (i<7) byte=(byte<<1);
 80194d2:	bf18      	it	ne
 80194d4:	0064      	lslne	r4, r4, #1
		Reset(clk);
 80194d6:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<8; i++)
 80194da:	b2ed      	uxtb	r5, r5
		if (i<7) byte=(byte<<1);
 80194dc:	bf18      	it	ne
 80194de:	b2e4      	uxtbne	r4, r4
		Reset(clk);
 80194e0:	f7ff ff56 	bl	8019390 <Reset>
	for(uint8_t i=0; i<8; i++)
 80194e4:	2d08      	cmp	r5, #8
 80194e6:	d1e7      	bne.n	80194b8 <SPI_Byte_R+0x8>
	}
	return byte;
}
 80194e8:	4620      	mov	r0, r4
 80194ea:	bd70      	pop	{r4, r5, r6, pc}
 80194ec:	48000400 	.word	0x48000400

080194f0 <SPI_Read_SR.part.2>:
	SPI_Address(address);
	Set(cs);
	SPI_Check_Busy();
}
/* Read status register */
uint8_t SPI_Read_SR(uint8_t sr)
 80194f0:	b510      	push	{r4, lr}
	uint8_t reg;
	
	switch(sr)
	{
		case 1:
			Reset(cs);
 80194f2:	2005      	movs	r0, #5
 80194f4:	f7ff ff4c 	bl	8019390 <Reset>
	SPI_Byte_T(cmd);
 80194f8:	2005      	movs	r0, #5
 80194fa:	f7ff ffc3 	bl	8019484 <SPI_Byte_T>
			SPI_Instruction(0x05);
			reg=SPI_Byte_R();
 80194fe:	f7ff ffd7 	bl	80194b0 <SPI_Byte_R>
 8019502:	4604      	mov	r4, r0
			Set(cs);
 8019504:	2005      	movs	r0, #5
 8019506:	f7ff ff1f 	bl	8019348 <Set>

	}
	return reg;

	SPI_Check_Busy();
}
 801950a:	4620      	mov	r0, r4
 801950c:	bd10      	pop	{r4, pc}

0801950e <SPI_Check_Busy>:
{
 801950e:	b508      	push	{r3, lr}
 8019510:	f7ff ffee 	bl	80194f0 <SPI_Read_SR.part.2>
	while( SPI_Read_SR(1)&0x01 )
 8019514:	07c3      	lsls	r3, r0, #31
 8019516:	d400      	bmi.n	801951a <SPI_Check_Busy+0xc>
}
 8019518:	bd08      	pop	{r3, pc}
		HAL_Delay(0);
 801951a:	2000      	movs	r0, #0
 801951c:	f7e7 fd86 	bl	800102c <HAL_Delay>
 8019520:	e7f6      	b.n	8019510 <SPI_Check_Busy+0x2>
	...

08019524 <QSPI_16_R>:
	}
	return byte;
}
/* Recieve 16 bit in quad mode  */
uint16_t QSPI_16_R(void)
{
 8019524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t byte=0;
	for(uint8_t i=0; i<4; i++)
 8019526:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 8019528:	4e18      	ldr	r6, [pc, #96]	; (801958c <QSPI_16_R+0x68>)
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801952a:	4f19      	ldr	r7, [pc, #100]	; (8019590 <QSPI_16_R+0x6c>)
	uint16_t byte=0;
 801952c:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801952e:	2102      	movs	r1, #2
 8019530:	4630      	mov	r0, r6
 8019532:	f7e9 f93f 	bl	80027b4 <HAL_GPIO_ReadPin>
 8019536:	b108      	cbz	r0, 801953c <QSPI_16_R+0x18>
 8019538:	f044 0401 	orr.w	r4, r4, #1
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 801953c:	2101      	movs	r1, #1
 801953e:	4630      	mov	r0, r6
 8019540:	f7e9 f938 	bl	80027b4 <HAL_GPIO_ReadPin>
 8019544:	b108      	cbz	r0, 801954a <QSPI_16_R+0x26>
 8019546:	f044 0402 	orr.w	r4, r4, #2
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801954a:	2180      	movs	r1, #128	; 0x80
 801954c:	4638      	mov	r0, r7
 801954e:	f7e9 f931 	bl	80027b4 <HAL_GPIO_ReadPin>
 8019552:	b108      	cbz	r0, 8019558 <QSPI_16_R+0x34>
 8019554:	f044 0404 	orr.w	r4, r4, #4
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 8019558:	2140      	movs	r1, #64	; 0x40
 801955a:	4638      	mov	r0, r7
 801955c:	f7e9 f92a 	bl	80027b4 <HAL_GPIO_ReadPin>
 8019560:	b108      	cbz	r0, 8019566 <QSPI_16_R+0x42>
 8019562:	f044 0408 	orr.w	r4, r4, #8
		Set(clk);
 8019566:	2006      	movs	r0, #6
 8019568:	f7ff feee 	bl	8019348 <Set>
		if (i<3) byte=(byte<<4);
 801956c:	2d03      	cmp	r5, #3
	for(uint8_t i=0; i<4; i++)
 801956e:	f105 0501 	add.w	r5, r5, #1
		if (i<3) byte=(byte<<4);
 8019572:	bf18      	it	ne
 8019574:	0124      	lslne	r4, r4, #4
		Reset(clk);
 8019576:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<4; i++)
 801957a:	b2ed      	uxtb	r5, r5
		if (i<3) byte=(byte<<4);
 801957c:	bf18      	it	ne
 801957e:	b2a4      	uxthne	r4, r4
		Reset(clk);
 8019580:	f7ff ff06 	bl	8019390 <Reset>
	for(uint8_t i=0; i<4; i++)
 8019584:	2d04      	cmp	r5, #4
 8019586:	d1d2      	bne.n	801952e <QSPI_16_R+0xa>
	}
	return byte;
}
 8019588:	4620      	mov	r0, r4
 801958a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801958c:	48000400 	.word	0x48000400
 8019590:	48001400 	.word	0x48001400

08019594 <QSPI_Byte_T>:
	}
	return byte;
}
/* Send byte in quad mode */
void QSPI_Byte_T(uint8_t byte)
{
 8019594:	b538      	push	{r3, r4, r5, lr}
 8019596:	4604      	mov	r4, r0
 8019598:	2502      	movs	r5, #2
	for(uint8_t i=0; i<2; i++)
	{
		if(0x80 & byte)	Set(io3);
 801959a:	0620      	lsls	r0, r4, #24
 801959c:	d502      	bpl.n	80195a4 <QSPI_Byte_T+0x10>
 801959e:	2004      	movs	r0, #4
 80195a0:	f7ff fed2 	bl	8019348 <Set>
		if(0x40 & byte)	Set(io2);
 80195a4:	0661      	lsls	r1, r4, #25
 80195a6:	d502      	bpl.n	80195ae <QSPI_Byte_T+0x1a>
 80195a8:	2003      	movs	r0, #3
 80195aa:	f7ff fecd 	bl	8019348 <Set>
		if(0x20 & byte)	Set(io1);
 80195ae:	06a2      	lsls	r2, r4, #26
 80195b0:	d502      	bpl.n	80195b8 <QSPI_Byte_T+0x24>
 80195b2:	2002      	movs	r0, #2
 80195b4:	f7ff fec8 	bl	8019348 <Set>
		if(0x10 & byte)	Set(io0);
 80195b8:	06e3      	lsls	r3, r4, #27
 80195ba:	d501      	bpl.n	80195c0 <QSPI_Byte_T+0x2c>
 80195bc:	f7ff fe36 	bl	801922c <Set.part.0>

		Set(clk);
 80195c0:	2006      	movs	r0, #6
 80195c2:	f7ff fec1 	bl	8019348 <Set>
		Reset(io3);	Reset(io2);	Reset(io1);	Reset(io0);	
 80195c6:	2004      	movs	r0, #4
 80195c8:	f7ff fee2 	bl	8019390 <Reset>
 80195cc:	2003      	movs	r0, #3
 80195ce:	f7ff fedf 	bl	8019390 <Reset>
 80195d2:	2002      	movs	r0, #2
 80195d4:	f7ff fedc 	bl	8019390 <Reset>
 80195d8:	3d01      	subs	r5, #1
 80195da:	f7ff fe2f 	bl	801923c <Reset.part.1>
		byte=(byte<<4);
		Reset(clk);	
 80195de:	2006      	movs	r0, #6
		byte=(byte<<4);
 80195e0:	0124      	lsls	r4, r4, #4
		Reset(clk);	
 80195e2:	f7ff fed5 	bl	8019390 <Reset>
	for(uint8_t i=0; i<2; i++)
 80195e6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte=(byte<<4);
 80195ea:	b2e4      	uxtb	r4, r4
	for(uint8_t i=0; i<2; i++)
 80195ec:	d1d5      	bne.n	801959a <QSPI_Byte_T+0x6>
	}	
}
 80195ee:	bd38      	pop	{r3, r4, r5, pc}

080195f0 <QSPI_Dummy>:
		Reset(clk);	
	}	
}
/* Dummy cycles in Quad Mode */
void QSPI_Dummy(uint8_t n) 	// n - number of dummy cycles
{
 80195f0:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i=0; i<(n*4); i++)
	{
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 80195f2:	4e07      	ldr	r6, [pc, #28]	; (8019610 <QSPI_Dummy+0x20>)
	for(uint8_t i=0; i<(n*4); i++)
 80195f4:	0085      	lsls	r5, r0, #2
 80195f6:	2400      	movs	r4, #0
 80195f8:	b2e3      	uxtb	r3, r4
 80195fa:	42ab      	cmp	r3, r5
 80195fc:	f104 0401 	add.w	r4, r4, #1
 8019600:	db00      	blt.n	8019604 <QSPI_Dummy+0x14>
	}
}
 8019602:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 8019604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019608:	4630      	mov	r0, r6
 801960a:	f7e9 f8de 	bl	80027ca <HAL_GPIO_TogglePin>
 801960e:	e7f3      	b.n	80195f8 <QSPI_Dummy+0x8>
 8019610:	48001400 	.word	0x48001400

08019614 <QSPI_Address>:
		arr[e]=QSPI_Byte_R();
	}
}
/* Address send in quad mode  */
void QSPI_Address(uint32_t addr)	// hasn't worked yet
{
 8019614:	b510      	push	{r4, lr}
 8019616:	4604      	mov	r4, r0
	uint8_t byte=0;
	
	for(uint8_t e=0; e<3; e++)
	{
		byte=(addr >> (8 * (2-e)));
		QSPI_Byte_T(byte);
 8019618:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801961c:	f7ff ffba 	bl	8019594 <QSPI_Byte_T>
 8019620:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8019624:	f7ff ffb6 	bl	8019594 <QSPI_Byte_T>
 8019628:	b2e0      	uxtb	r0, r4
	}
}
 801962a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		QSPI_Byte_T(byte);
 801962e:	f7ff bfb1 	b.w	8019594 <QSPI_Byte_T>

08019632 <QSPI_Recieve_IO_16>:
	SPI_Check_Busy();
}
/* Ψ祠𳭪򨨠嬿 16 蠳2 ⩲ */
/* Read 16 bit array from memory in quad mode */
void QSPI_Recieve_IO_16(uint16_t* arr, uint32_t address, uint32_t size)		// be aware that this function reconfigurates GPIO
{
 8019632:	b570      	push	{r4, r5, r6, lr}
 8019634:	460c      	mov	r4, r1
 8019636:	4615      	mov	r5, r2
 8019638:	4606      	mov	r6, r0
	QSPI_Transmit_Init();	
 801963a:	f7ff fee7 	bl	801940c <QSPI_Transmit_Init>
	Reset(cs);
 801963e:	2005      	movs	r0, #5
 8019640:	f7ff fea6 	bl	8019390 <Reset>
	SPI_Byte_T(cmd);
 8019644:	20eb      	movs	r0, #235	; 0xeb
 8019646:	f7ff ff1d 	bl	8019484 <SPI_Byte_T>
	SPI_Instruction(fastread_quad_io);
	QSPI_Address(address);
 801964a:	4620      	mov	r0, r4
 801964c:	f7ff ffe2 	bl	8019614 <QSPI_Address>
	QSPI_Dummy(3);	
 8019650:	2003      	movs	r0, #3
 8019652:	f7ff ffcd 	bl	80195f0 <QSPI_Dummy>
	
	QSPI_Recieve_Init();
 8019656:	f7ff febf 	bl	80193d8 <QSPI_Recieve_Init>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801965a:	2400      	movs	r4, #0
 801965c:	42ac      	cmp	r4, r5
 801965e:	d108      	bne.n	8019672 <QSPI_Recieve_IO_16+0x40>
	Set(cs);
 8019660:	2005      	movs	r0, #5
 8019662:	f7ff fe71 	bl	8019348 <Set>

	Single_Mode();
 8019666:	f7ff feeb 	bl	8019440 <Single_Mode>
	SPI_Check_Busy();
}
 801966a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPI_Check_Busy();
 801966e:	f7ff bf4e 	b.w	801950e <SPI_Check_Busy>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 8019672:	f7ff ff57 	bl	8019524 <QSPI_16_R>
 8019676:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 801967a:	3401      	adds	r4, #1
 801967c:	e7ee      	b.n	801965c <QSPI_Recieve_IO_16+0x2a>
	...

08019680 <Image_load>:
void Image_load(uint32_t address, uint32_t size){
 8019680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019684:	f5ad 6d2f 	sub.w	sp, sp, #2800	; 0xaf0
 8019688:	4680      	mov	r8, r0
 801968a:	460f      	mov	r7, r1
	uint16_t buff[1400] = {0};
 801968c:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8019690:	2100      	movs	r1, #0
 8019692:	4668      	mov	r0, sp
 8019694:	f006 f9af 	bl	801f9f6 <memset>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 8019698:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80196dc <Image_load+0x5c>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801969c:	2400      	movs	r4, #0
 801969e:	f44f 66af 	mov.w	r6, #1400	; 0x578
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 80196a2:	f44f 6a30 	mov.w	sl, #2816	; 0xb00
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 80196a6:	fb06 f304 	mul.w	r3, r6, r4
 80196aa:	429f      	cmp	r7, r3
 80196ac:	d803      	bhi.n	80196b6 <Image_load+0x36>
}
 80196ae:	f50d 6d2f 	add.w	sp, sp, #2800	; 0xaf0
 80196b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 80196b6:	b2a5      	uxth	r5, r4
 80196b8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80196bc:	fb0a 8105 	mla	r1, sl, r5, r8
 80196c0:	4668      	mov	r0, sp
 80196c2:	f7ff ffb6 	bl	8019632 <QSPI_Recieve_IO_16>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 80196c6:	fb06 f005 	mul.w	r0, r6, r5
 80196ca:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80196ce:	4669      	mov	r1, sp
 80196d0:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 80196d4:	f006 f984 	bl	801f9e0 <memcpy>
 80196d8:	3401      	adds	r4, #1
 80196da:	e7e4      	b.n	80196a6 <Image_load+0x26>
 80196dc:	20055942 	.word	0x20055942

080196e0 <Rabs_calc_Factor2_Settings_change>:
#include "Rabs_math.h"

float Rabs_calc_Factor2_Settings_change(float Kt, float P)
{
	return Kt * P;
}
 80196e0:	ee20 0a20 	vmul.f32	s0, s0, s1
 80196e4:	4770      	bx	lr
	...

080196e8 <Rabs_calc_Factor1>:

float Rabs_calc_Factor1(uint16_t Rdark, float Lt, uint16_t R_data[])
{
 80196e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t sum = 0;
	float Kl = 0;
	
	Kl = Lt/100.00;
 80196ea:	eddf 7a17 	vldr	s15, [pc, #92]	; 8019748 <Rabs_calc_Factor1+0x60>
{
 80196ee:	ed2d 8b02 	vpush	{d8}
	Kl = Lt/100.00;
 80196f2:	ee80 8a27 	vdiv.f32	s16, s0, s15
 80196f6:	1e8a      	subs	r2, r1, #2
	uint32_t sum = 0;
 80196f8:	2300      	movs	r3, #0
 80196fa:	f201 71fe 	addw	r1, r1, #2046	; 0x7fe
	for (uint16_t i = 0; i < 1024; i++)
	{
		sum = sum + (R_data[i] - Rdark);
 80196fe:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 8019702:	1a24      	subs	r4, r4, r0
	for (uint16_t i = 0; i < 1024; i++)
 8019704:	4291      	cmp	r1, r2
		sum = sum + (R_data[i] - Rdark);
 8019706:	4423      	add	r3, r4
	for (uint16_t i = 0; i < 1024; i++)
 8019708:	d1f9      	bne.n	80196fe <Rabs_calc_Factor1+0x16>
	}
	return Kl*(((float)sum)/1024.00);
 801970a:	ee07 3a90 	vmov	s15, r3
 801970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019712:	ee17 0a90 	vmov	r0, s15
 8019716:	f7e6 ff2f 	bl	8000578 <__aeabi_f2d>
 801971a:	2200      	movs	r2, #0
 801971c:	4b0b      	ldr	r3, [pc, #44]	; (801974c <Rabs_calc_Factor1+0x64>)
 801971e:	f7e6 ff7f 	bl	8000620 <__aeabi_dmul>
 8019722:	4604      	mov	r4, r0
 8019724:	ee18 0a10 	vmov	r0, s16
 8019728:	460d      	mov	r5, r1
 801972a:	f7e6 ff25 	bl	8000578 <__aeabi_f2d>
 801972e:	4602      	mov	r2, r0
 8019730:	460b      	mov	r3, r1
 8019732:	4620      	mov	r0, r4
 8019734:	4629      	mov	r1, r5
 8019736:	f7e6 ff73 	bl	8000620 <__aeabi_dmul>
 801973a:	f7e7 fa69 	bl	8000c10 <__aeabi_d2f>
}
 801973e:	ecbd 8b02 	vpop	{d8}
 8019742:	ee00 0a10 	vmov	s0, r0
 8019746:	bd38      	pop	{r3, r4, r5, pc}
 8019748:	42c80000 	.word	0x42c80000
 801974c:	3f500000 	.word	0x3f500000

08019750 <Rabs_calc_main>:
//		
//		r--;
//	}
//}
void Rabs_calc_main(uint16_t R_data[], uint16_t Rdark, float Factor1, float Factor2, float Sn[], float Rabs[])
{	
 8019750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			Rabs[1023-i] = (R_data[i] - Rdark)*Factor2*(Sn[r]);
			temp = Rabs[1023-i];
			Rabs[1023-i] = (Rabs[1023-i] + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
		}
		
		Rabs_prev[1023-i][n] = temp;
 8019754:	4f2f      	ldr	r7, [pc, #188]	; (8019814 <Rabs_calc_main+0xc4>)
 8019756:	4d30      	ldr	r5, [pc, #192]	; (8019818 <Rabs_calc_main+0xc8>)
 8019758:	783e      	ldrb	r6, [r7, #0]
			temp = 0;
 801975a:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801981c <Rabs_calc_main+0xcc>
 801975e:	3802      	subs	r0, #2
 8019760:	ea4f 0886 	mov.w	r8, r6, lsl #2
		Rabs_prev[1023-i][n] = temp;
 8019764:	f640 7efc 	movw	lr, #4092	; 0xffc
 8019768:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
		if(R_data[i] - Rdark <= Factor1)
 801976c:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 8019770:	1a64      	subs	r4, r4, r1
 8019772:	ee07 4a90 	vmov	s15, r4
 8019776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801977a:	eb03 0c0e 	add.w	ip, r3, lr
 801977e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8019782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019786:	d827      	bhi.n	80197d8 <Rabs_calc_main+0x88>
			Rabs[1023-i] = (Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3]) / 5;
 8019788:	ed95 7a01 	vldr	s14, [r5, #4]
 801978c:	edd5 7a00 	vldr	s15, [r5]
 8019790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019794:	ed95 7a02 	vldr	s14, [r5, #8]
 8019798:	ee77 7a87 	vadd.f32	s15, s15, s14
 801979c:	ed95 7a03 	vldr	s14, [r5, #12]
 80197a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80197a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			temp = 0;
 80197a8:	eef0 7a46 	vmov.f32	s15, s12
			Rabs[1023-i] = (Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3]) / 5;
 80197ac:	ed8c 7a00 	vstr	s14, [ip]
 80197b0:	f1ae 0e04 	sub.w	lr, lr, #4
		Rabs_prev[1023-i][n] = temp;
 80197b4:	eb05 0408 	add.w	r4, r5, r8
	for (uint16_t i = 0; i < 1024; i++)
 80197b8:	f11e 0f04 	cmn.w	lr, #4
		Rabs_prev[1023-i][n] = temp;
 80197bc:	edc4 7a00 	vstr	s15, [r4]
 80197c0:	f1a5 0510 	sub.w	r5, r5, #16
	for (uint16_t i = 0; i < 1024; i++)
 80197c4:	d1d2      	bne.n	801976c <Rabs_calc_main+0x1c>
//			Rabs[1023-i] = 0;
//		} 
		
		r--;
	}
	n++;
 80197c6:	3601      	adds	r6, #1
 80197c8:	b2f6      	uxtb	r6, r6
	if (n>3) n = 0;
 80197ca:	2e03      	cmp	r6, #3
 80197cc:	bf8a      	itet	hi
 80197ce:	2300      	movhi	r3, #0
	n++;
 80197d0:	703e      	strbls	r6, [r7, #0]
	if (n>3) n = 0;
 80197d2:	703b      	strbhi	r3, [r7, #0]
 80197d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			Rabs[1023-i] = (R_data[i] - Rdark)*Factor2*(Sn[r]);
 80197d8:	eb02 040e 	add.w	r4, r2, lr
 80197dc:	ed94 7a00 	vldr	s14, [r4]
			Rabs[1023-i] = (Rabs[1023-i] + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 80197e0:	edd5 5a01 	vldr	s11, [r5, #4]
			Rabs[1023-i] = (R_data[i] - Rdark)*Factor2*(Sn[r]);
 80197e4:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80197e8:	ee67 7a87 	vmul.f32	s15, s15, s14
			Rabs[1023-i] = (Rabs[1023-i] + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 80197ec:	ed95 7a00 	vldr	s14, [r5]
 80197f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80197f4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80197f8:	edd5 5a02 	vldr	s11, [r5, #8]
 80197fc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019800:	edd5 5a03 	vldr	s11, [r5, #12]
 8019804:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019808:	eec7 5a26 	vdiv.f32	s11, s14, s13
 801980c:	edcc 5a00 	vstr	s11, [ip]
 8019810:	e7ce      	b.n	80197b0 <Rabs_calc_main+0x60>
 8019812:	bf00      	nop
 8019814:	20009748 	.word	0x20009748
 8019818:	20009738 	.word	0x20009738
 801981c:	00000000 	.word	0x00000000

08019820 <Rabs_find_MAX>:
	return Factor3*Factor2;
}

float Rabs_find_MAX(float Rabs[], uint8_t direction)
{	
	uint8_t    step = (direction == 0x00)? 4 :3;
 8019820:	2900      	cmp	r1, #0

	float max = 0;
 8019822:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8019854 <Rabs_find_MAX+0x34>

	for (uint16_t i = 1023; i >= step; i-=step)
 8019826:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801982a:	bf0c      	ite	eq
 801982c:	2204      	moveq	r2, #4
 801982e:	2203      	movne	r2, #3
 8019830:	4293      	cmp	r3, r2
 8019832:	d200      	bcs.n	8019836 <Rabs_find_MAX+0x16>
	{
		max = Rabs[i] > max ? Rabs[i] : max;
	}
	return max;
}
 8019834:	4770      	bx	lr
		max = Rabs[i] > max ? Rabs[i] : max;
 8019836:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801983a:	edd1 7a00 	vldr	s15, [r1]
 801983e:	eeb4 0a67 	vcmp.f32	s0, s15
 8019842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019846:	eba3 0302 	sub.w	r3, r3, r2
 801984a:	bf48      	it	mi
 801984c:	eeb0 0a67 	vmovmi.f32	s0, s15
 8019850:	b29b      	uxth	r3, r3
 8019852:	e7ed      	b.n	8019830 <Rabs_find_MAX+0x10>
 8019854:	00000000 	.word	0x00000000

08019858 <Rabs_find_MAX_all>:

float Rabs_find_MAX_all(float Rabs[])
{	
	float max = 0;
 8019858:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8019878 <Rabs_find_MAX_all+0x20>
 801985c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000

	for (uint16_t i = 0; i < 1024; i++)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 8019860:	ecf0 7a01 	vldmia	r0!, {s15}
 8019864:	eef4 7a40 	vcmp.f32	s15, s0
 8019868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801986c:	bfc8      	it	gt
 801986e:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 0; i < 1024; i++)
 8019872:	4298      	cmp	r0, r3
 8019874:	d1f4      	bne.n	8019860 <Rabs_find_MAX_all+0x8>
	}
	return max;
}
 8019876:	4770      	bx	lr
 8019878:	00000000 	.word	0x00000000

0801987c <WriteSDFLASH_t>:
char buffer_sd[11];

FLASH_EraseInitTypeDef EraseInitStruct3;

void WriteSDFLASH_t(uint64_t filenum)
{
 801987c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019880:	4c52      	ldr	r4, [pc, #328]	; (80199cc <WriteSDFLASH_t+0x150>)
uint32_t PAGEError = 0;
 8019882:	f10d 0808 	add.w	r8, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019886:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801988a:	f04f 0900 	mov.w	r9, #0
 801988e:	f848 9d04 	str.w	r9, [r8, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019892:	6125      	str	r5, [r4, #16]
{
 8019894:	460f      	mov	r7, r1
 8019896:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 8019898:	f7e8 fc8e 	bl	80021b8 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801989c:	f7e8 fc8c 	bl	80021b8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80198a0:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 80198a2:	2064      	movs	r0, #100	; 0x64
 80198a4:	f7e7 fbc2 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 80198a8:	4849      	ldr	r0, [pc, #292]	; (80199d0 <WriteSDFLASH_t+0x154>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 80198aa:	2302      	movs	r3, #2
 80198ac:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)43;
 80198ae:	232b      	movs	r3, #43	; 0x2b
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 80198b0:	4641      	mov	r1, r8
		EraseInitStruct3.Page = (uint32_t)43;
 80198b2:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 80198b4:	2301      	movs	r3, #1
 80198b6:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 80198b8:	f8c0 9000 	str.w	r9, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 80198bc:	f7e8 fd96 	bl	80023ec <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 80198c0:	2032      	movs	r0, #50	; 0x32
 80198c2:	f7e7 fbb3 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80198c6:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 80198c8:	f7e8 fc88 	bl	80021dc <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 80198cc:	f7e8 fc74 	bl	80021b8 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80198d0:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)FILENUMBER, filenum);
 80198d2:	4d40      	ldr	r5, [pc, #256]	; (80199d4 <WriteSDFLASH_t+0x158>)
 80198d4:	4632      	mov	r2, r6
 80198d6:	463b      	mov	r3, r7
 80198d8:	4629      	mov	r1, r5
 80198da:	2000      	movs	r0, #0
 80198dc:	f7e8 fcc6 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80198e0:	2800      	cmp	r0, #0
 80198e2:	d1f7      	bne.n	80198d4 <WriteSDFLASH_t+0x58>
					}

				flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80198e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80198e8:	6123      	str	r3, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MODEEL, Mode_EL);
 80198ea:	4d3b      	ldr	r5, [pc, #236]	; (80199d8 <WriteSDFLASH_t+0x15c>)
 80198ec:	4c3b      	ldr	r4, [pc, #236]	; (80199dc <WriteSDFLASH_t+0x160>)
 80198ee:	782a      	ldrb	r2, [r5, #0]
 80198f0:	2300      	movs	r3, #0
 80198f2:	4621      	mov	r1, r4
 80198f4:	2000      	movs	r0, #0
 80198f6:	f7e8 fcb9 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80198fa:	2800      	cmp	r0, #0
 80198fc:	d1f7      	bne.n	80198ee <WriteSDFLASH_t+0x72>
					}
						
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80198fe:	4b33      	ldr	r3, [pc, #204]	; (80199cc <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 8019900:	4d37      	ldr	r5, [pc, #220]	; (80199e0 <WriteSDFLASH_t+0x164>)
 8019902:	4c38      	ldr	r4, [pc, #224]	; (80199e4 <WriteSDFLASH_t+0x168>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019904:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019908:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801990a:	882a      	ldrh	r2, [r5, #0]
 801990c:	2300      	movs	r3, #0
 801990e:	4621      	mov	r1, r4
 8019910:	2000      	movs	r0, #0
 8019912:	f7e8 fcab 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019916:	2800      	cmp	r0, #0
 8019918:	d1f7      	bne.n	801990a <WriteSDFLASH_t+0x8e>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801991a:	4b2c      	ldr	r3, [pc, #176]	; (80199cc <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801991c:	4d32      	ldr	r5, [pc, #200]	; (80199e8 <WriteSDFLASH_t+0x16c>)
 801991e:	4c33      	ldr	r4, [pc, #204]	; (80199ec <WriteSDFLASH_t+0x170>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019920:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019924:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 8019926:	782a      	ldrb	r2, [r5, #0]
 8019928:	2300      	movs	r3, #0
 801992a:	4621      	mov	r1, r4
 801992c:	2000      	movs	r0, #0
 801992e:	f7e8 fc9d 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019932:	2800      	cmp	r0, #0
 8019934:	d1f7      	bne.n	8019926 <WriteSDFLASH_t+0xaa>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019936:	4b25      	ldr	r3, [pc, #148]	; (80199cc <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 8019938:	4d2d      	ldr	r5, [pc, #180]	; (80199f0 <WriteSDFLASH_t+0x174>)
 801993a:	4c2e      	ldr	r4, [pc, #184]	; (80199f4 <WriteSDFLASH_t+0x178>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801993c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019940:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 8019942:	782a      	ldrb	r2, [r5, #0]
 8019944:	2300      	movs	r3, #0
 8019946:	4621      	mov	r1, r4
 8019948:	2000      	movs	r0, #0
 801994a:	f7e8 fc8f 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801994e:	2800      	cmp	r0, #0
 8019950:	d1f7      	bne.n	8019942 <WriteSDFLASH_t+0xc6>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019952:	4b1e      	ldr	r3, [pc, #120]	; (80199cc <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 8019954:	4d28      	ldr	r5, [pc, #160]	; (80199f8 <WriteSDFLASH_t+0x17c>)
 8019956:	4c29      	ldr	r4, [pc, #164]	; (80199fc <WriteSDFLASH_t+0x180>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801995c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801995e:	782a      	ldrb	r2, [r5, #0]
 8019960:	2300      	movs	r3, #0
 8019962:	4621      	mov	r1, r4
 8019964:	2000      	movs	r0, #0
 8019966:	f7e8 fc81 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801996a:	2800      	cmp	r0, #0
 801996c:	d1f7      	bne.n	801995e <WriteSDFLASH_t+0xe2>
						}
						flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801996e:	4b17      	ldr	r3, [pc, #92]	; (80199cc <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 8019970:	4d23      	ldr	r5, [pc, #140]	; (8019a00 <WriteSDFLASH_t+0x184>)
 8019972:	4c24      	ldr	r4, [pc, #144]	; (8019a04 <WriteSDFLASH_t+0x188>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019974:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019978:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801997a:	782a      	ldrb	r2, [r5, #0]
 801997c:	2300      	movs	r3, #0
 801997e:	4621      	mov	r1, r4
 8019980:	2000      	movs	r0, #0
 8019982:	f7e8 fc73 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019986:	2800      	cmp	r0, #0
 8019988:	d1f7      	bne.n	801997a <WriteSDFLASH_t+0xfe>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801998a:	4b10      	ldr	r3, [pc, #64]	; (80199cc <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801998c:	4d1e      	ldr	r5, [pc, #120]	; (8019a08 <WriteSDFLASH_t+0x18c>)
 801998e:	4c1f      	ldr	r4, [pc, #124]	; (8019a0c <WriteSDFLASH_t+0x190>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019990:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019994:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 8019996:	782a      	ldrb	r2, [r5, #0]
 8019998:	2300      	movs	r3, #0
 801999a:	4621      	mov	r1, r4
 801999c:	2000      	movs	r0, #0
 801999e:	f7e8 fc65 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80199a2:	2800      	cmp	r0, #0
 80199a4:	d1f7      	bne.n	8019996 <WriteSDFLASH_t+0x11a>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80199a6:	4b09      	ldr	r3, [pc, #36]	; (80199cc <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 80199a8:	4d19      	ldr	r5, [pc, #100]	; (8019a10 <WriteSDFLASH_t+0x194>)
 80199aa:	4c1a      	ldr	r4, [pc, #104]	; (8019a14 <WriteSDFLASH_t+0x198>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 80199ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80199b0:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 80199b2:	782a      	ldrb	r2, [r5, #0]
 80199b4:	2300      	movs	r3, #0
 80199b6:	4621      	mov	r1, r4
 80199b8:	2000      	movs	r0, #0
 80199ba:	f7e8 fc57 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 80199be:	2800      	cmp	r0, #0
 80199c0:	d1f7      	bne.n	80199b2 <WriteSDFLASH_t+0x136>
					}
						HAL_FLASH_Lock();
 80199c2:	f7e8 fc0b 	bl	80021dc <HAL_FLASH_Lock>
}
 80199c6:	b003      	add	sp, #12
 80199c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199cc:	40022000 	.word	0x40022000
 80199d0:	200925f0 	.word	0x200925f0
 80199d4:	0812b020 	.word	0x0812b020
 80199d8:	20000ebc 	.word	0x20000ebc
 80199dc:	0812b030 	.word	0x0812b030
 80199e0:	200056f6 	.word	0x200056f6
 80199e4:	0812b038 	.word	0x0812b038
 80199e8:	200056f2 	.word	0x200056f2
 80199ec:	0812b040 	.word	0x0812b040
 80199f0:	200056ef 	.word	0x200056ef
 80199f4:	0812b048 	.word	0x0812b048
 80199f8:	200056f0 	.word	0x200056f0
 80199fc:	0812b050 	.word	0x0812b050
 8019a00:	200056f3 	.word	0x200056f3
 8019a04:	0812b058 	.word	0x0812b058
 8019a08:	20090a69 	.word	0x20090a69
 8019a0c:	0812b060 	.word	0x0812b060
 8019a10:	20090a6a 	.word	0x20090a6a
 8019a14:	0812b068 	.word	0x0812b068

08019a18 <WriteFLASH_Screen>:


void WriteFLASH_Screen(uint8_t Screen)
{
 8019a18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019a1c:	4c1b      	ldr	r4, [pc, #108]	; (8019a8c <WriteFLASH_Screen+0x74>)
uint32_t PAGEError = 0;
 8019a1e:	af02      	add	r7, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019a20:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 8019a24:	f04f 0800 	mov.w	r8, #0
 8019a28:	f847 8d04 	str.w	r8, [r7, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019a2c:	6125      	str	r5, [r4, #16]
{
 8019a2e:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 8019a30:	f7e8 fbc2 	bl	80021b8 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 8019a34:	f7e8 fbc0 	bl	80021b8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019a38:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 8019a3a:	2064      	movs	r0, #100	; 0x64
 8019a3c:	f7e7 faf6 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 8019a40:	4813      	ldr	r0, [pc, #76]	; (8019a90 <WriteFLASH_Screen+0x78>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 8019a42:	2302      	movs	r3, #2
 8019a44:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)44;
 8019a46:	232c      	movs	r3, #44	; 0x2c
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 8019a48:	4639      	mov	r1, r7
		EraseInitStruct3.Page = (uint32_t)44;
 8019a4a:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 8019a4c:	2301      	movs	r3, #1
 8019a4e:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 8019a50:	f8c0 8000 	str.w	r8, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 8019a54:	f7e8 fcca 	bl	80023ec <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 8019a58:	2032      	movs	r0, #50	; 0x32
 8019a5a:	f7e7 fae7 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019a5e:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 8019a60:	f7e8 fbbc 	bl	80021dc <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 8019a64:	f7e8 fba8 	bl	80021b8 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019a68:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SCREENADDR, Screen);
 8019a6a:	b2f4      	uxtb	r4, r6
 8019a6c:	4e09      	ldr	r6, [pc, #36]	; (8019a94 <WriteFLASH_Screen+0x7c>)
 8019a6e:	2500      	movs	r5, #0
 8019a70:	4622      	mov	r2, r4
 8019a72:	462b      	mov	r3, r5
 8019a74:	4631      	mov	r1, r6
 8019a76:	2000      	movs	r0, #0
 8019a78:	f7e8 fbf8 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019a7c:	2800      	cmp	r0, #0
 8019a7e:	d1f7      	bne.n	8019a70 <WriteFLASH_Screen+0x58>
					}
		HAL_FLASH_Lock();
 8019a80:	f7e8 fbac 	bl	80021dc <HAL_FLASH_Lock>
}
 8019a84:	b002      	add	sp, #8
 8019a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a8a:	bf00      	nop
 8019a8c:	40022000 	.word	0x40022000
 8019a90:	200925f0 	.word	0x200925f0
 8019a94:	0812c020 	.word	0x0812c020

08019a98 <Calculate_SD_Data>:


void Calculate_SD_Data()
{
 8019a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	SDWr_Status_bar = 0;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8019a9a:	4c5b      	ldr	r4, [pc, #364]	; (8019c08 <Calculate_SD_Data+0x170>)
	SDWr_Status_bar = 0;
 8019a9c:	4e5b      	ldr	r6, [pc, #364]	; (8019c0c <Calculate_SD_Data+0x174>)
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8019a9e:	4d5c      	ldr	r5, [pc, #368]	; (8019c10 <Calculate_SD_Data+0x178>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019aa0:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8019c14 <Calculate_SD_Data+0x17c>
	Calculate_xy1931(colorimetry_XYZ1931);
 8019aa4:	4f5c      	ldr	r7, [pc, #368]	; (8019c18 <Calculate_SD_Data+0x180>)
	SDWr_Status_bar = 0;
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	2300      	movs	r3, #0
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019aaa:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019aae:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0;
 8019ab0:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019ab4:	f7f9 fb00 	bl	80130b8 <GUI_Bar_Measure>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8019ab8:	462a      	mov	r2, r5
 8019aba:	4b58      	ldr	r3, [pc, #352]	; (8019c1c <Calculate_SD_Data+0x184>)
 8019abc:	4958      	ldr	r1, [pc, #352]	; (8019c20 <Calculate_SD_Data+0x188>)
 8019abe:	4620      	mov	r0, r4
 8019ac0:	f7f4 fb64 	bl	800e18c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 8019ac4:	4638      	mov	r0, r7
 8019ac6:	f7f4 fbcd 	bl	800e264 <Calculate_xy1931>
	Calculate_uv1976(colorimetry_xy1931);
 8019aca:	4856      	ldr	r0, [pc, #344]	; (8019c24 <Calculate_SD_Data+0x18c>)
 8019acc:	f7f4 fc0c 	bl	800e2e8 <Calculate_uv1976>
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 8019ad0:	4b55      	ldr	r3, [pc, #340]	; (8019c28 <Calculate_SD_Data+0x190>)
 8019ad2:	781a      	ldrb	r2, [r3, #0]
 8019ad4:	4b55      	ldr	r3, [pc, #340]	; (8019c2c <Calculate_SD_Data+0x194>)
 8019ad6:	4638      	mov	r0, r7
 8019ad8:	7819      	ldrb	r1, [r3, #0]
	
	SDWr_Status_bar = 0.1;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	delta_Eab_Measure = Calculate_deltaEab();
	
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 8019ada:	4f55      	ldr	r7, [pc, #340]	; (8019c30 <Calculate_SD_Data+0x198>)
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 8019adc:	f7f4 fdc4 	bl	800e668 <Calculate_Lab>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	2101      	movs	r1, #1
 8019ae4:	f7f4 fc24 	bl	800e330 <Calculate_Tc>
 8019ae8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019aec:	4b51      	ldr	r3, [pc, #324]	; (8019c34 <Calculate_SD_Data+0x19c>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019aee:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8019c38 <Calculate_SD_Data+0x1a0>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 8019af2:	ee17 2a90 	vmov	r2, s15
 8019af6:	801a      	strh	r2, [r3, #0]
	SDWr_Status_bar = 0.1;
 8019af8:	a33d      	add	r3, pc, #244	; (adr r3, 8019bf0 <Calculate_SD_Data+0x158>)
 8019afa:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019afe:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019b02:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.1;
 8019b04:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019b08:	f7f9 fad6 	bl	80130b8 <GUI_Bar_Measure>
	delta_Eab_Measure = Calculate_deltaEab();
 8019b0c:	f7f4 ffec 	bl	800eae8 <Calculate_deltaEab>
 8019b10:	4b4a      	ldr	r3, [pc, #296]	; (8019c3c <Calculate_SD_Data+0x1a4>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 8019b12:	4629      	mov	r1, r5
	delta_Eab_Measure = Calculate_deltaEab();
 8019b14:	8018      	strh	r0, [r3, #0]
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 8019b16:	4620      	mov	r0, r4
 8019b18:	f7f4 f98c 	bl	800de34 <Calculate_EL_Day>
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 8019b1c:	4620      	mov	r0, r4
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019b1e:	4d48      	ldr	r5, [pc, #288]	; (8019c40 <Calculate_SD_Data+0x1a8>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 8019b20:	ed87 0a00 	vstr	s0, [r7]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 8019b24:	f7f4 f9a6 	bl	800de74 <Calculate_EL_Day_Wt>
 8019b28:	4b46      	ldr	r3, [pc, #280]	; (8019c44 <Calculate_SD_Data+0x1ac>)
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019b2a:	4629      	mov	r1, r5
 8019b2c:	4620      	mov	r0, r4
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 8019b2e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019b32:	f7f4 f9e5 	bl	800df00 <Calculate_PPFD_PPL>
 8019b36:	4b44      	ldr	r3, [pc, #272]	; (8019c48 <Calculate_SD_Data+0x1b0>)
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 8019b38:	4629      	mov	r1, r5
 8019b3a:	4620      	mov	r0, r4
 8019b3c:	2200      	movs	r2, #0
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 8019b3e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 8019b42:	f7f4 fa49 	bl	800dfd8 <Calculate_PPFD_PPL_Range>
 8019b46:	4b41      	ldr	r3, [pc, #260]	; (8019c4c <Calculate_SD_Data+0x1b4>)
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 8019b48:	4629      	mov	r1, r5
 8019b4a:	4620      	mov	r0, r4
 8019b4c:	2201      	movs	r2, #1
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 8019b4e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 8019b52:	f7f4 fa41 	bl	800dfd8 <Calculate_PPFD_PPL_Range>
 8019b56:	4b3e      	ldr	r3, [pc, #248]	; (8019c50 <Calculate_SD_Data+0x1b8>)
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 8019b58:	4629      	mov	r1, r5
 8019b5a:	4620      	mov	r0, r4
 8019b5c:	2202      	movs	r2, #2
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 8019b5e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 8019b62:	f7f4 fa39 	bl	800dfd8 <Calculate_PPFD_PPL_Range>
 8019b66:	4b3b      	ldr	r3, [pc, #236]	; (8019c54 <Calculate_SD_Data+0x1bc>)
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 8019b68:	4629      	mov	r1, r5
 8019b6a:	4620      	mov	r0, r4
 8019b6c:	2203      	movs	r2, #3
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 8019b6e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 8019b72:	f7f4 fa31 	bl	800dfd8 <Calculate_PPFD_PPL_Range>
 8019b76:	4b38      	ldr	r3, [pc, #224]	; (8019c58 <Calculate_SD_Data+0x1c0>)
 8019b78:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.3;
 8019b7c:	a31e      	add	r3, pc, #120	; (adr r3, 8019bf8 <Calculate_SD_Data+0x160>)
 8019b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019b82:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8019c5c <Calculate_SD_Data+0x1c4>
 8019b86:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019b8a:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.3;
 8019b8c:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019b90:	f7f9 fa92 	bl	80130b8 <GUI_Bar_Measure>
	E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 8019b94:	4620      	mov	r0, r4
 8019b96:	4932      	ldr	r1, [pc, #200]	; (8019c60 <Calculate_SD_Data+0x1c8>)
 8019b98:	f7f4 f984 	bl	800dea4 <Calculate_EL_Night>
 8019b9c:	4b31      	ldr	r3, [pc, #196]	; (8019c64 <Calculate_SD_Data+0x1cc>)
 8019b9e:	eef0 0a40 	vmov.f32	s1, s0
 8019ba2:	ed83 0a00 	vstr	s0, [r3]
	SP_Measure = (Calculate_SP(E_day, E_Night));
 8019ba6:	ed97 0a00 	vldr	s0, [r7]
 8019baa:	f7f4 f99b 	bl	800dee4 <Calculate_SP>
 8019bae:	4b2e      	ldr	r3, [pc, #184]	; (8019c68 <Calculate_SD_Data+0x1d0>)
	
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 8019bb0:	492e      	ldr	r1, [pc, #184]	; (8019c6c <Calculate_SD_Data+0x1d4>)
	SP_Measure = (Calculate_SP(E_day, E_Night));
 8019bb2:	ed83 0a00 	vstr	s0, [r3]
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 8019bb6:	4620      	mov	r0, r4
 8019bb8:	f7f4 fa98 	bl	800e0ec <Calculate_ELr>
 8019bbc:	4b2c      	ldr	r3, [pc, #176]	; (8019c70 <Calculate_SD_Data+0x1d8>)
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 8019bbe:	492d      	ldr	r1, [pc, #180]	; (8019c74 <Calculate_SD_Data+0x1dc>)
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 8019bc0:	ed83 0a00 	vstr	s0, [r3]
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	f7f4 fa77 	bl	800e0b8 <Calculate_ELb>
 8019bca:	4b2b      	ldr	r3, [pc, #172]	; (8019c78 <Calculate_SD_Data+0x1e0>)
 8019bcc:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.4;
 8019bd0:	a30b      	add	r3, pc, #44	; (adr r3, 8019c00 <Calculate_SD_Data+0x168>)
 8019bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019bd6:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8019c7c <Calculate_SD_Data+0x1e4>
	SDWr_Status_bar = 0.4;
 8019bda:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019bde:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019be2:	2055      	movs	r0, #85	; 0x55
}
 8019be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019be8:	f7f9 ba66 	b.w	80130b8 <GUI_Bar_Measure>
 8019bec:	f3af 8000 	nop.w
 8019bf0:	9999999a 	.word	0x9999999a
 8019bf4:	3fb99999 	.word	0x3fb99999
 8019bf8:	33333333 	.word	0x33333333
 8019bfc:	3fd33333 	.word	0x3fd33333
 8019c00:	9999999a 	.word	0x9999999a
 8019c04:	3fd99999 	.word	0x3fd99999
 8019c08:	2000c52c 	.word	0x2000c52c
 8019c0c:	20009750 	.word	0x20009750
 8019c10:	20052930 	.word	0x20052930
 8019c14:	00000000 	.word	0x00000000
 8019c18:	2008f512 	.word	0x2008f512
 8019c1c:	2008d504 	.word	0x2008d504
 8019c20:	2008a504 	.word	0x2008a504
 8019c24:	2008f530 	.word	0x2008f530
 8019c28:	20090a69 	.word	0x20090a69
 8019c2c:	200056f4 	.word	0x200056f4
 8019c30:	20095c5c 	.word	0x20095c5c
 8019c34:	20054930 	.word	0x20054930
 8019c38:	3dcccccd 	.word	0x3dcccccd
 8019c3c:	20090a66 	.word	0x20090a66
 8019c40:	20054938 	.word	0x20054938
 8019c44:	200956c8 	.word	0x200956c8
 8019c48:	200956d0 	.word	0x200956d0
 8019c4c:	200957b4 	.word	0x200957b4
 8019c50:	20095b38 	.word	0x20095b38
 8019c54:	20095a74 	.word	0x20095a74
 8019c58:	200956cc 	.word	0x200956cc
 8019c5c:	3e99999a 	.word	0x3e99999a
 8019c60:	20053930 	.word	0x20053930
 8019c64:	200956bc 	.word	0x200956bc
 8019c68:	200957b0 	.word	0x200957b0
 8019c6c:	2000ad28 	.word	0x2000ad28
 8019c70:	20095c58 	.word	0x20095c58
 8019c74:	20009d28 	.word	0x20009d28
 8019c78:	20095c54 	.word	0x20095c54
 8019c7c:	3ecccccd 	.word	0x3ecccccd

08019c80 <SD_Witer>:



uint8_t mount = 0;
void SD_Witer(uint16_t file_cnt, uint8_t Language_status, uint8_t Memory_Data_satus, uint8_t Mode_EL, uint8_t CRICQS_done)
{
 8019c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c84:	461f      	mov	r7, r3
	
	char digit_buff[3];
	char source_type[4];
	char measure_buff[12];

	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 8019c86:	4bb8      	ldr	r3, [pc, #736]	; (8019f68 <SD_Witer+0x2e8>)
 8019c88:	781b      	ldrb	r3, [r3, #0]
 8019c8a:	2b01      	cmp	r3, #1
{
 8019c8c:	b087      	sub	sp, #28
 8019c8e:	4605      	mov	r5, r0
 8019c90:	460c      	mov	r4, r1
 8019c92:	4690      	mov	r8, r2
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 8019c94:	f000 85fe 	beq.w	801a894 <SD_Witer+0xc14>
 8019c98:	2b02      	cmp	r3, #2
 8019c9a:	f000 85fe 	beq.w	801a89a <SD_Witer+0xc1a>
 8019c9e:	2b04      	cmp	r3, #4
 8019ca0:	f000 85fe 	beq.w	801a8a0 <SD_Witer+0xc20>
 8019ca4:	2b08      	cmp	r3, #8
 8019ca6:	f000 85fe 	beq.w	801a8a6 <SD_Witer+0xc26>
 8019caa:	2b10      	cmp	r3, #16
 8019cac:	f000 85fe 	beq.w	801a8ac <SD_Witer+0xc2c>
 8019cb0:	4aae      	ldr	r2, [pc, #696]	; (8019f6c <SD_Witer+0x2ec>)
 8019cb2:	49af      	ldr	r1, [pc, #700]	; (8019f70 <SD_Witer+0x2f0>)
 8019cb4:	2b20      	cmp	r3, #32
 8019cb6:	bf18      	it	ne
 8019cb8:	4611      	movne	r1, r2
 8019cba:	a802      	add	r0, sp, #8
 8019cbc:	f005 fed7 	bl	801fa6e <strcpy>
	
	memset(measure_buff, 0, 12);
 8019cc0:	2300      	movs	r3, #0
	
		sprintf(digit_buff, "%.3d", file_cnt );
 8019cc2:	462a      	mov	r2, r5
 8019cc4:	49ab      	ldr	r1, [pc, #684]	; (8019f74 <SD_Witer+0x2f4>)
	memset(measure_buff, 0, 12);
 8019cc6:	9303      	str	r3, [sp, #12]
		sprintf(digit_buff, "%.3d", file_cnt );
 8019cc8:	a801      	add	r0, sp, #4
	memset(measure_buff, 0, 12);
 8019cca:	9304      	str	r3, [sp, #16]
 8019ccc:	9305      	str	r3, [sp, #20]
		sprintf(digit_buff, "%.3d", file_cnt );
 8019cce:	f005 fe9b 	bl	801fa08 <sprintf>
		strcat(buffer_sd, digit_buff);
 8019cd2:	a901      	add	r1, sp, #4
 8019cd4:	48a8      	ldr	r0, [pc, #672]	; (8019f78 <SD_Witer+0x2f8>)
		strcat(buffer_sd, ".txt");

		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 8019cd6:	4da9      	ldr	r5, [pc, #676]	; (8019f7c <SD_Witer+0x2fc>)
 8019cd8:	4ea7      	ldr	r6, [pc, #668]	; (8019f78 <SD_Witer+0x2f8>)
		strcat(buffer_sd, digit_buff);
 8019cda:	f005 feb9 	bl	801fa50 <strcat>
		strcat(buffer_sd, ".txt");
 8019cde:	49a8      	ldr	r1, [pc, #672]	; (8019f80 <SD_Witer+0x300>)
 8019ce0:	48a5      	ldr	r0, [pc, #660]	; (8019f78 <SD_Witer+0x2f8>)
 8019ce2:	f005 feb5 	bl	801fa50 <strcat>
		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 8019ce6:	2201      	movs	r2, #1
 8019ce8:	49a6      	ldr	r1, [pc, #664]	; (8019f84 <SD_Witer+0x304>)
 8019cea:	48a7      	ldr	r0, [pc, #668]	; (8019f88 <SD_Witer+0x308>)
 8019cec:	f7ef fc76 	bl	80095dc <f_mount>
 8019cf0:	7028      	strb	r0, [r5, #0]
       if (res != FR_OK)
 8019cf2:	2800      	cmp	r0, #0
 8019cf4:	f040 85b1 	bne.w	801a85a <SD_Witer+0xbda>
        {
                //printf("Ошибка монтирования диска %d\r\n", result);
        }
			else
				{
				res = f_open(&MyFile, buffer_sd, FA_CREATE_ALWAYS | FA_WRITE);
 8019cf8:	220a      	movs	r2, #10
 8019cfa:	4631      	mov	r1, r6
 8019cfc:	48a3      	ldr	r0, [pc, #652]	; (8019f8c <SD_Witer+0x30c>)
 8019cfe:	f7ef fca1 	bl	8009644 <f_open>
 8019d02:	7028      	strb	r0, [r5, #0]
				if (res == FR_OK)
 8019d04:	2800      	cmp	r0, #0
 8019d06:	f040 85a8 	bne.w	801a85a <SD_Witer+0xbda>
					{
							
							SDWr_Status_bar = 0.5;
 8019d0a:	4ba1      	ldr	r3, [pc, #644]	; (8019f90 <SD_Witer+0x310>)
 8019d0c:	49a1      	ldr	r1, [pc, #644]	; (8019f94 <SD_Witer+0x314>)
 8019d0e:	2000      	movs	r0, #0
 8019d10:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019d14:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8019d18:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019d1c:	2055      	movs	r0, #85	; 0x55
 8019d1e:	f7f9 f9cb 	bl	80130b8 <GUI_Bar_Measure>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 8019d22:	4b9d      	ldr	r3, [pc, #628]	; (8019f98 <SD_Witer+0x318>)
 8019d24:	2c00      	cmp	r4, #0
 8019d26:	f040 85c4 	bne.w	801a8b2 <SD_Witer+0xc32>
 8019d2a:	499c      	ldr	r1, [pc, #624]	; (8019f9c <SD_Witer+0x31c>)
 8019d2c:	2235      	movs	r2, #53	; 0x35
 8019d2e:	4897      	ldr	r0, [pc, #604]	; (8019f8c <SD_Witer+0x30c>)
 8019d30:	f7ef fd9e 	bl	8009870 <f_write>
							sprintf(measure_buff, "%.4f", SP_Measure);
 8019d34:	4b9a      	ldr	r3, [pc, #616]	; (8019fa0 <SD_Witer+0x320>)
 8019d36:	6818      	ldr	r0, [r3, #0]
 8019d38:	f7e6 fc1e 	bl	8000578 <__aeabi_f2d>
 8019d3c:	4602      	mov	r2, r0
 8019d3e:	460b      	mov	r3, r1
 8019d40:	a803      	add	r0, sp, #12
 8019d42:	4998      	ldr	r1, [pc, #608]	; (8019fa4 <SD_Witer+0x324>)
 8019d44:	f005 fe60 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019d48:	220c      	movs	r2, #12
 8019d4a:	4b93      	ldr	r3, [pc, #588]	; (8019f98 <SD_Witer+0x318>)
 8019d4c:	488f      	ldr	r0, [pc, #572]	; (8019f8c <SD_Witer+0x30c>)
 8019d4e:	eb0d 0102 	add.w	r1, sp, r2
 8019d52:	f7ef fd8d 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 8019d56:	2300      	movs	r3, #0
 8019d58:	9303      	str	r3, [sp, #12]
 8019d5a:	9304      	str	r3, [sp, #16]
 8019d5c:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 8019d5e:	4b8e      	ldr	r3, [pc, #568]	; (8019f98 <SD_Witer+0x318>)
 8019d60:	2c00      	cmp	r4, #0
 8019d62:	f040 85aa 	bne.w	801a8ba <SD_Witer+0xc3a>
 8019d66:	4990      	ldr	r1, [pc, #576]	; (8019fa8 <SD_Witer+0x328>)
 8019d68:	2226      	movs	r2, #38	; 0x26
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 8019d6a:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8019fd0 <SD_Witer+0x350>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 8019d6e:	4887      	ldr	r0, [pc, #540]	; (8019f8c <SD_Witer+0x30c>)
 8019d70:	f7ef fd7e 	bl	8009870 <f_write>
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 8019d74:	f8b9 2000 	ldrh.w	r2, [r9]
 8019d78:	498c      	ldr	r1, [pc, #560]	; (8019fac <SD_Witer+0x32c>)
 8019d7a:	a803      	add	r0, sp, #12
 8019d7c:	f005 fe44 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019d80:	220c      	movs	r2, #12
 8019d82:	4b85      	ldr	r3, [pc, #532]	; (8019f98 <SD_Witer+0x318>)
 8019d84:	4881      	ldr	r0, [pc, #516]	; (8019f8c <SD_Witer+0x30c>)
 8019d86:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 8019d8a:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019d8c:	f7ef fd70 	bl	8009870 <f_write>
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 8019d90:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8019d94:	4985      	ldr	r1, [pc, #532]	; (8019fac <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 8019d96:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 8019d98:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 8019d9a:	9504      	str	r5, [sp, #16]
 8019d9c:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 8019d9e:	f005 fe33 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019da2:	220c      	movs	r2, #12
 8019da4:	4b7c      	ldr	r3, [pc, #496]	; (8019f98 <SD_Witer+0x318>)
 8019da6:	4879      	ldr	r0, [pc, #484]	; (8019f8c <SD_Witer+0x30c>)
 8019da8:	eb0d 0102 	add.w	r1, sp, r2
 8019dac:	f7ef fd60 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 8019db0:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8019db4:	497d      	ldr	r1, [pc, #500]	; (8019fac <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 8019db6:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 8019db8:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 8019dba:	9504      	str	r5, [sp, #16]
 8019dbc:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 8019dbe:	f005 fe23 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019dc2:	220c      	movs	r2, #12
 8019dc4:	4b74      	ldr	r3, [pc, #464]	; (8019f98 <SD_Witer+0x318>)
 8019dc6:	4871      	ldr	r0, [pc, #452]	; (8019f8c <SD_Witer+0x30c>)
 8019dc8:	eb0d 0102 	add.w	r1, sp, r2
 8019dcc:	f7ef fd50 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 8019dd0:	9503      	str	r5, [sp, #12]
 8019dd2:	9504      	str	r5, [sp, #16]
 8019dd4:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 8019dd6:	4b70      	ldr	r3, [pc, #448]	; (8019f98 <SD_Witer+0x318>)
 8019dd8:	2c00      	cmp	r4, #0
 8019dda:	f040 8572 	bne.w	801a8c2 <SD_Witer+0xc42>
 8019dde:	4974      	ldr	r1, [pc, #464]	; (8019fb0 <SD_Witer+0x330>)
 8019de0:	222e      	movs	r2, #46	; 0x2e
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 8019de2:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8019fd4 <SD_Witer+0x354>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 8019de6:	4869      	ldr	r0, [pc, #420]	; (8019f8c <SD_Witer+0x30c>)
 8019de8:	f7ef fd42 	bl	8009870 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 8019dec:	f8d9 0000 	ldr.w	r0, [r9]
 8019df0:	f7e6 fbc2 	bl	8000578 <__aeabi_f2d>
 8019df4:	4602      	mov	r2, r0
 8019df6:	460b      	mov	r3, r1
 8019df8:	a803      	add	r0, sp, #12
 8019dfa:	496e      	ldr	r1, [pc, #440]	; (8019fb4 <SD_Witer+0x334>)
 8019dfc:	f005 fe04 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e00:	220c      	movs	r2, #12
 8019e02:	4b65      	ldr	r3, [pc, #404]	; (8019f98 <SD_Witer+0x318>)
 8019e04:	4861      	ldr	r0, [pc, #388]	; (8019f8c <SD_Witer+0x30c>)
 8019e06:	eb0d 0102 	add.w	r1, sp, r2
 8019e0a:	f7ef fd31 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 8019e0e:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 8019e10:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 8019e14:	9503      	str	r5, [sp, #12]
 8019e16:	9504      	str	r5, [sp, #16]
 8019e18:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 8019e1a:	f7e6 fbad 	bl	8000578 <__aeabi_f2d>
 8019e1e:	4602      	mov	r2, r0
 8019e20:	460b      	mov	r3, r1
 8019e22:	a803      	add	r0, sp, #12
 8019e24:	495f      	ldr	r1, [pc, #380]	; (8019fa4 <SD_Witer+0x324>)
 8019e26:	f005 fdef 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e2a:	220c      	movs	r2, #12
 8019e2c:	4b5a      	ldr	r3, [pc, #360]	; (8019f98 <SD_Witer+0x318>)
 8019e2e:	4857      	ldr	r0, [pc, #348]	; (8019f8c <SD_Witer+0x30c>)
 8019e30:	eb0d 0102 	add.w	r1, sp, r2
 8019e34:	f7ef fd1c 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 8019e38:	9503      	str	r5, [sp, #12]
 8019e3a:	9504      	str	r5, [sp, #16]
 8019e3c:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 8019e3e:	4b56      	ldr	r3, [pc, #344]	; (8019f98 <SD_Witer+0x318>)
 8019e40:	2c00      	cmp	r4, #0
 8019e42:	f040 8542 	bne.w	801a8ca <SD_Witer+0xc4a>
 8019e46:	495c      	ldr	r1, [pc, #368]	; (8019fb8 <SD_Witer+0x338>)
 8019e48:	2230      	movs	r2, #48	; 0x30
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 8019e4a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8019fd8 <SD_Witer+0x358>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 8019e4e:	484f      	ldr	r0, [pc, #316]	; (8019f8c <SD_Witer+0x30c>)
 8019e50:	f7ef fd0e 	bl	8009870 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 8019e54:	f8d9 0000 	ldr.w	r0, [r9]
 8019e58:	f7e6 fb8e 	bl	8000578 <__aeabi_f2d>
 8019e5c:	4602      	mov	r2, r0
 8019e5e:	460b      	mov	r3, r1
 8019e60:	a803      	add	r0, sp, #12
 8019e62:	4954      	ldr	r1, [pc, #336]	; (8019fb4 <SD_Witer+0x334>)
 8019e64:	f005 fdd0 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e68:	220c      	movs	r2, #12
 8019e6a:	4b4b      	ldr	r3, [pc, #300]	; (8019f98 <SD_Witer+0x318>)
 8019e6c:	4847      	ldr	r0, [pc, #284]	; (8019f8c <SD_Witer+0x30c>)
 8019e6e:	eb0d 0102 	add.w	r1, sp, r2
 8019e72:	f7ef fcfd 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 8019e76:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 8019e78:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 8019e7c:	9503      	str	r5, [sp, #12]
 8019e7e:	9504      	str	r5, [sp, #16]
 8019e80:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 8019e82:	f7e6 fb79 	bl	8000578 <__aeabi_f2d>
 8019e86:	4602      	mov	r2, r0
 8019e88:	460b      	mov	r3, r1
 8019e8a:	a803      	add	r0, sp, #12
 8019e8c:	4945      	ldr	r1, [pc, #276]	; (8019fa4 <SD_Witer+0x324>)
 8019e8e:	f005 fdbb 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019e92:	220c      	movs	r2, #12
 8019e94:	4b40      	ldr	r3, [pc, #256]	; (8019f98 <SD_Witer+0x318>)
 8019e96:	483d      	ldr	r0, [pc, #244]	; (8019f8c <SD_Witer+0x30c>)
 8019e98:	eb0d 0102 	add.w	r1, sp, r2
 8019e9c:	f7ef fce8 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 8019ea0:	9503      	str	r5, [sp, #12]
 8019ea2:	9504      	str	r5, [sp, #16]
 8019ea4:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 8019ea6:	4b3c      	ldr	r3, [pc, #240]	; (8019f98 <SD_Witer+0x318>)
 8019ea8:	2c00      	cmp	r4, #0
 8019eaa:	f040 8512 	bne.w	801a8d2 <SD_Witer+0xc52>
 8019eae:	4943      	ldr	r1, [pc, #268]	; (8019fbc <SD_Witer+0x33c>)
 8019eb0:	220e      	movs	r2, #14
 8019eb2:	4836      	ldr	r0, [pc, #216]	; (8019f8c <SD_Witer+0x30c>)
 8019eb4:	f7ef fcdc 	bl	8009870 <f_write>
							if(Tc_Measure == 0xFFFF){f_write(&MyFile, "NAN", 3, &byteswritten);}
 8019eb8:	4b41      	ldr	r3, [pc, #260]	; (8019fc0 <SD_Witer+0x340>)
 8019eba:	881a      	ldrh	r2, [r3, #0]
 8019ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ec0:	429a      	cmp	r2, r3
 8019ec2:	f040 8537 	bne.w	801a934 <SD_Witer+0xcb4>
 8019ec6:	4b34      	ldr	r3, [pc, #208]	; (8019f98 <SD_Witer+0x318>)
 8019ec8:	4928      	ldr	r1, [pc, #160]	; (8019f6c <SD_Witer+0x2ec>)
 8019eca:	4830      	ldr	r0, [pc, #192]	; (8019f8c <SD_Witer+0x30c>)
 8019ecc:	2203      	movs	r2, #3
 8019ece:	f7ef fccf 	bl	8009870 <f_write>
										sprintf(measure_buff, "%.d", Tc_Measure);
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
										memset(measure_buff, 0, 12);
								}
						
								SDWr_Status_bar = 0.7;
 8019ed2:	a123      	add	r1, pc, #140	; (adr r1, 8019f60 <SD_Witer+0x2e0>)
 8019ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ed8:	4b2d      	ldr	r3, [pc, #180]	; (8019f90 <SD_Witer+0x310>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019eda:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8019fc4 <SD_Witer+0x344>
								SDWr_Status_bar = 0.7;
 8019ede:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 8019ee2:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019ee6:	2055      	movs	r0, #85	; 0x55
 8019ee8:	f7f9 f8e6 	bl	80130b8 <GUI_Bar_Measure>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 8019eec:	4b2a      	ldr	r3, [pc, #168]	; (8019f98 <SD_Witer+0x318>)
 8019eee:	2c00      	cmp	r4, #0
 8019ef0:	f040 8531 	bne.w	801a956 <SD_Witer+0xcd6>
 8019ef4:	4934      	ldr	r1, [pc, #208]	; (8019fc8 <SD_Witer+0x348>)
 8019ef6:	224a      	movs	r2, #74	; 0x4a
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 8019ef8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8019fdc <SD_Witer+0x35c>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 8019efc:	4823      	ldr	r0, [pc, #140]	; (8019f8c <SD_Witer+0x30c>)
 8019efe:	f7ef fcb7 	bl	8009870 <f_write>
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 8019f02:	f9b9 2000 	ldrsh.w	r2, [r9]
 8019f06:	4931      	ldr	r1, [pc, #196]	; (8019fcc <SD_Witer+0x34c>)
 8019f08:	a803      	add	r0, sp, #12
 8019f0a:	f005 fd7d 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f0e:	220c      	movs	r2, #12
 8019f10:	4b21      	ldr	r3, [pc, #132]	; (8019f98 <SD_Witer+0x318>)
 8019f12:	481e      	ldr	r0, [pc, #120]	; (8019f8c <SD_Witer+0x30c>)
 8019f14:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 8019f18:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f1a:	f7ef fca9 	bl	8009870 <f_write>
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 8019f1e:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 8019f22:	492a      	ldr	r1, [pc, #168]	; (8019fcc <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 8019f24:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 8019f26:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 8019f28:	9504      	str	r5, [sp, #16]
 8019f2a:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 8019f2c:	f005 fd6c 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f30:	220c      	movs	r2, #12
 8019f32:	4b19      	ldr	r3, [pc, #100]	; (8019f98 <SD_Witer+0x318>)
 8019f34:	4815      	ldr	r0, [pc, #84]	; (8019f8c <SD_Witer+0x30c>)
 8019f36:	eb0d 0102 	add.w	r1, sp, r2
 8019f3a:	f7ef fc99 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 8019f3e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019f42:	4922      	ldr	r1, [pc, #136]	; (8019fcc <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 8019f44:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 8019f46:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 8019f48:	9504      	str	r5, [sp, #16]
 8019f4a:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 8019f4c:	f005 fd5c 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 8019f50:	220c      	movs	r2, #12
 8019f52:	4b11      	ldr	r3, [pc, #68]	; (8019f98 <SD_Witer+0x318>)
 8019f54:	480d      	ldr	r0, [pc, #52]	; (8019f8c <SD_Witer+0x30c>)
 8019f56:	eb0d 0102 	add.w	r1, sp, r2
 8019f5a:	f7ef fc89 	bl	8009870 <f_write>
 8019f5e:	e03f      	b.n	8019fe0 <SD_Witer+0x360>
 8019f60:	66666666 	.word	0x66666666
 8019f64:	3fe66666 	.word	0x3fe66666
 8019f68:	20090a69 	.word	0x20090a69
 8019f6c:	08031483 	.word	0x08031483
 8019f70:	08031487 	.word	0x08031487
 8019f74:	0803148b 	.word	0x0803148b
 8019f78:	200925e4 	.word	0x200925e4
 8019f7c:	20093630 	.word	0x20093630
 8019f80:	08031490 	.word	0x08031490
 8019f84:	20093635 	.word	0x20093635
 8019f88:	200915b0 	.word	0x200915b0
 8019f8c:	20092600 	.word	0x20092600
 8019f90:	20009750 	.word	0x20009750
 8019f94:	3fe00000 	.word	0x3fe00000
 8019f98:	200915a8 	.word	0x200915a8
 8019f9c:	20000928 	.word	0x20000928
 8019fa0:	200957b0 	.word	0x200957b0
 8019fa4:	0803145f 	.word	0x0803145f
 8019fa8:	20000441 	.word	0x20000441
 8019fac:	080314b6 	.word	0x080314b6
 8019fb0:	200004bd 	.word	0x200004bd
 8019fb4:	08031495 	.word	0x08031495
 8019fb8:	2000047b 	.word	0x2000047b
 8019fbc:	2000024f 	.word	0x2000024f
 8019fc0:	20054930 	.word	0x20054930
 8019fc4:	3f333333 	.word	0x3f333333
 8019fc8:	20000613 	.word	0x20000613
 8019fcc:	0803149f 	.word	0x0803149f
 8019fd0:	2008f512 	.word	0x2008f512
 8019fd4:	2008f530 	.word	0x2008f530
 8019fd8:	2008f528 	.word	0x2008f528
 8019fdc:	2008f50c 	.word	0x2008f50c
							memset(measure_buff, 0, 12);
 8019fe0:	9503      	str	r5, [sp, #12]
 8019fe2:	9504      	str	r5, [sp, #16]
 8019fe4:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 8019fe6:	4bb4      	ldr	r3, [pc, #720]	; (801a2b8 <SD_Witer+0x638>)
 8019fe8:	2c00      	cmp	r4, #0
 8019fea:	f040 84b8 	bne.w	801a95e <SD_Witer+0xcde>
 8019fee:	49b3      	ldr	r1, [pc, #716]	; (801a2bc <SD_Witer+0x63c>)
 8019ff0:	222a      	movs	r2, #42	; 0x2a
 8019ff2:	48b3      	ldr	r0, [pc, #716]	; (801a2c0 <SD_Witer+0x640>)
 8019ff4:	f7ef fc3c 	bl	8009870 <f_write>
							f_write(&MyFile, &source_type, sizeof(source_type), &byteswritten);//SourceType
 8019ff8:	4baf      	ldr	r3, [pc, #700]	; (801a2b8 <SD_Witer+0x638>)
 8019ffa:	48b1      	ldr	r0, [pc, #708]	; (801a2c0 <SD_Witer+0x640>)
 8019ffc:	2204      	movs	r2, #4
 8019ffe:	a902      	add	r1, sp, #8
 801a000:	f7ef fc36 	bl	8009870 <f_write>
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801a004:	4bac      	ldr	r3, [pc, #688]	; (801a2b8 <SD_Witer+0x638>)
 801a006:	2c00      	cmp	r4, #0
 801a008:	f040 84ad 	bne.w	801a966 <SD_Witer+0xce6>
 801a00c:	49ad      	ldr	r1, [pc, #692]	; (801a2c4 <SD_Witer+0x644>)
 801a00e:	2235      	movs	r2, #53	; 0x35
 801a010:	48ab      	ldr	r0, [pc, #684]	; (801a2c0 <SD_Witer+0x640>)
 801a012:	f7ef fc2d 	bl	8009870 <f_write>
							sprintf(measure_buff, "%d\t", lambda_d_Measure); //Lambda D
 801a016:	4bac      	ldr	r3, [pc, #688]	; (801a2c8 <SD_Witer+0x648>)
 801a018:	49ac      	ldr	r1, [pc, #688]	; (801a2cc <SD_Witer+0x64c>)
 801a01a:	881a      	ldrh	r2, [r3, #0]
 801a01c:	a803      	add	r0, sp, #12
 801a01e:	f005 fcf3 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a022:	220c      	movs	r2, #12
 801a024:	4ba4      	ldr	r3, [pc, #656]	; (801a2b8 <SD_Witer+0x638>)
 801a026:	48a6      	ldr	r0, [pc, #664]	; (801a2c0 <SD_Witer+0x640>)
 801a028:	eb0d 0102 	add.w	r1, sp, r2
 801a02c:	f7ef fc20 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801a030:	2300      	movs	r3, #0
 801a032:	9303      	str	r3, [sp, #12]
 801a034:	9304      	str	r3, [sp, #16]
 801a036:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801a038:	4b9f      	ldr	r3, [pc, #636]	; (801a2b8 <SD_Witer+0x638>)
 801a03a:	2c00      	cmp	r4, #0
 801a03c:	f040 8497 	bne.w	801a96e <SD_Witer+0xcee>
 801a040:	49a3      	ldr	r1, [pc, #652]	; (801a2d0 <SD_Witer+0x650>)
 801a042:	223b      	movs	r2, #59	; 0x3b
 801a044:	489e      	ldr	r0, [pc, #632]	; (801a2c0 <SD_Witer+0x640>)
 801a046:	f7ef fc13 	bl	8009870 <f_write>
							sprintf(measure_buff, "%d\t", lambda_c_Measure); //Lambda C
 801a04a:	4ba2      	ldr	r3, [pc, #648]	; (801a2d4 <SD_Witer+0x654>)
 801a04c:	499f      	ldr	r1, [pc, #636]	; (801a2cc <SD_Witer+0x64c>)
 801a04e:	881a      	ldrh	r2, [r3, #0]
 801a050:	a803      	add	r0, sp, #12
 801a052:	f005 fcd9 	bl	801fa08 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a056:	220c      	movs	r2, #12
 801a058:	4b97      	ldr	r3, [pc, #604]	; (801a2b8 <SD_Witer+0x638>)
 801a05a:	4899      	ldr	r0, [pc, #612]	; (801a2c0 <SD_Witer+0x640>)
 801a05c:	eb0d 0102 	add.w	r1, sp, r2
 801a060:	f7ef fc06 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801a064:	2300      	movs	r3, #0
						
							if(Memory_Data_satus == 0x01)
 801a066:	f1b8 0f01 	cmp.w	r8, #1
							memset(measure_buff, 0, 12);
 801a06a:	9303      	str	r3, [sp, #12]
 801a06c:	9304      	str	r3, [sp, #16]
 801a06e:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a070:	4b91      	ldr	r3, [pc, #580]	; (801a2b8 <SD_Witer+0x638>)
							if(Memory_Data_satus == 0x01)
 801a072:	f040 8484 	bne.w	801a97e <SD_Witer+0xcfe>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a076:	2c00      	cmp	r4, #0
 801a078:	f040 847d 	bne.w	801a976 <SD_Witer+0xcf6>
 801a07c:	4996      	ldr	r1, [pc, #600]	; (801a2d8 <SD_Witer+0x658>)
 801a07e:	2224      	movs	r2, #36	; 0x24
 801a080:	488f      	ldr	r0, [pc, #572]	; (801a2c0 <SD_Witer+0x640>)
 801a082:	f7ef fbf5 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d\t", delta_Eab_Measure); //Delta E
 801a086:	4b95      	ldr	r3, [pc, #596]	; (801a2dc <SD_Witer+0x65c>)
 801a088:	4990      	ldr	r1, [pc, #576]	; (801a2cc <SD_Witer+0x64c>)
 801a08a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a08e:	a803      	add	r0, sp, #12
 801a090:	f005 fcba 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a094:	220c      	movs	r2, #12
 801a096:	4b88      	ldr	r3, [pc, #544]	; (801a2b8 <SD_Witer+0x638>)
 801a098:	4889      	ldr	r0, [pc, #548]	; (801a2c0 <SD_Witer+0x640>)
 801a09a:	eb0d 0102 	add.w	r1, sp, r2
 801a09e:	f7ef fbe7 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	9303      	str	r3, [sp, #12]
 801a0a6:	9304      	str	r3, [sp, #16]
 801a0a8:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
								f_write(&MyFile, "NAN", 3, &byteswritten);
							}
							
							SDWr_Status_bar = 0.8;
 801a0aa:	a181      	add	r1, pc, #516	; (adr r1, 801a2b0 <SD_Witer+0x630>)
 801a0ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0b0:	4b8b      	ldr	r3, [pc, #556]	; (801a2e0 <SD_Witer+0x660>)
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a0b2:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801a2e4 <SD_Witer+0x664>
 801a0b6:	f8df 8278 	ldr.w	r8, [pc, #632]	; 801a330 <SD_Witer+0x6b0>
							SDWr_Status_bar = 0.8;
 801a0ba:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a0be:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a0c2:	2055      	movs	r0, #85	; 0x55
 801a0c4:	f7f8 fff8 	bl	80130b8 <GUI_Bar_Measure>
							if(Mode_EL == 0x01) //E mode
 801a0c8:	2f01      	cmp	r7, #1
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801a0ca:	4b7b      	ldr	r3, [pc, #492]	; (801a2b8 <SD_Witer+0x638>)
							if(Mode_EL == 0x01) //E mode
 801a0cc:	f040 847d 	bne.w	801a9ca <SD_Witer+0xd4a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801a0d0:	2c00      	cmp	r4, #0
 801a0d2:	f040 8465 	bne.w	801a9a0 <SD_Witer+0xd20>
 801a0d6:	4984      	ldr	r1, [pc, #528]	; (801a2e8 <SD_Witer+0x668>)
 801a0d8:	2263      	movs	r2, #99	; 0x63
 801a0da:	4879      	ldr	r0, [pc, #484]	; (801a2c0 <SD_Witer+0x640>)
 801a0dc:	4f83      	ldr	r7, [pc, #524]	; (801a2ec <SD_Witer+0x66c>)
 801a0de:	f8df b254 	ldr.w	fp, [pc, #596]	; 801a334 <SD_Witer+0x6b4>
								
								for(uint16_t i=0; i < 1024; i++)
								{
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a0e2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801a2b8 <SD_Witer+0x638>
 801a0e6:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801a2c0 <SD_Witer+0x640>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801a0ea:	f7ef fbc1 	bl	8009870 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
 801a0ee:	f857 0b04 	ldr.w	r0, [r7], #4
 801a0f2:	f7e6 fa41 	bl	8000578 <__aeabi_f2d>
 801a0f6:	4602      	mov	r2, r0
 801a0f8:	460b      	mov	r3, r1
 801a0fa:	a803      	add	r0, sp, #12
 801a0fc:	497c      	ldr	r1, [pc, #496]	; (801a2f0 <SD_Witer+0x670>)
 801a0fe:	f005 fc83 	bl	801fa08 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a102:	220c      	movs	r2, #12
 801a104:	4653      	mov	r3, sl
 801a106:	eb0d 0102 	add.w	r1, sp, r2
 801a10a:	4648      	mov	r0, r9
 801a10c:	f7ef fbb0 	bl	8009870 <f_write>
									memset(measure_buff, 0, 12);
 801a110:	2500      	movs	r5, #0
									
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801a112:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801a116:	9503      	str	r5, [sp, #12]
 801a118:	9504      	str	r5, [sp, #16]
 801a11a:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801a11c:	f7e6 fa2c 	bl	8000578 <__aeabi_f2d>
 801a120:	4602      	mov	r2, r0
 801a122:	460b      	mov	r3, r1
 801a124:	a803      	add	r0, sp, #12
 801a126:	4973      	ldr	r1, [pc, #460]	; (801a2f4 <SD_Witer+0x674>)
 801a128:	f005 fc6e 	bl	801fa08 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a12c:	220c      	movs	r2, #12
 801a12e:	4653      	mov	r3, sl
 801a130:	eb0d 0102 	add.w	r1, sp, r2
 801a134:	4648      	mov	r0, r9
 801a136:	f7ef fb9b 	bl	8009870 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801a13a:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801a13c:	9503      	str	r5, [sp, #12]
 801a13e:	9504      	str	r5, [sp, #16]
 801a140:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801a142:	d1d4      	bne.n	801a0ee <SD_Witer+0x46e>
								}
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801a144:	4b5c      	ldr	r3, [pc, #368]	; (801a2b8 <SD_Witer+0x638>)
 801a146:	2c00      	cmp	r4, #0
 801a148:	f040 842e 	bne.w	801a9a8 <SD_Witer+0xd28>
 801a14c:	496a      	ldr	r1, [pc, #424]	; (801a2f8 <SD_Witer+0x678>)
 801a14e:	2224      	movs	r2, #36	; 0x24
 801a150:	485b      	ldr	r0, [pc, #364]	; (801a2c0 <SD_Witer+0x640>)
 801a152:	f7ef fb8d 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f",  E_day); //Ee
 801a156:	4b69      	ldr	r3, [pc, #420]	; (801a2fc <SD_Witer+0x67c>)
 801a158:	6818      	ldr	r0, [r3, #0]
 801a15a:	f7e6 fa0d 	bl	8000578 <__aeabi_f2d>
 801a15e:	4602      	mov	r2, r0
 801a160:	460b      	mov	r3, r1
 801a162:	a803      	add	r0, sp, #12
 801a164:	4966      	ldr	r1, [pc, #408]	; (801a300 <SD_Witer+0x680>)
 801a166:	f005 fc4f 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a16a:	220c      	movs	r2, #12
 801a16c:	4b52      	ldr	r3, [pc, #328]	; (801a2b8 <SD_Witer+0x638>)
 801a16e:	4854      	ldr	r0, [pc, #336]	; (801a2c0 <SD_Witer+0x640>)
 801a170:	eb0d 0102 	add.w	r1, sp, r2
 801a174:	f7ef fb7c 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801a178:	2300      	movs	r3, #0
 801a17a:	9303      	str	r3, [sp, #12]
 801a17c:	9304      	str	r3, [sp, #16]
 801a17e:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801a180:	4b4d      	ldr	r3, [pc, #308]	; (801a2b8 <SD_Witer+0x638>)
 801a182:	2c00      	cmp	r4, #0
 801a184:	f040 8414 	bne.w	801a9b0 <SD_Witer+0xd30>
 801a188:	495e      	ldr	r1, [pc, #376]	; (801a304 <SD_Witer+0x684>)
 801a18a:	2221      	movs	r2, #33	; 0x21
 801a18c:	484c      	ldr	r0, [pc, #304]	; (801a2c0 <SD_Witer+0x640>)
 801a18e:	f7ef fb6f 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.1f",  E_day_Wt); //Eu
 801a192:	4b5d      	ldr	r3, [pc, #372]	; (801a308 <SD_Witer+0x688>)
 801a194:	6818      	ldr	r0, [r3, #0]
 801a196:	f7e6 f9ef 	bl	8000578 <__aeabi_f2d>
 801a19a:	4602      	mov	r2, r0
 801a19c:	460b      	mov	r3, r1
 801a19e:	a803      	add	r0, sp, #12
 801a1a0:	495a      	ldr	r1, [pc, #360]	; (801a30c <SD_Witer+0x68c>)
 801a1a2:	f005 fc31 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a1a6:	220c      	movs	r2, #12
 801a1a8:	4b43      	ldr	r3, [pc, #268]	; (801a2b8 <SD_Witer+0x638>)
 801a1aa:	4845      	ldr	r0, [pc, #276]	; (801a2c0 <SD_Witer+0x640>)
 801a1ac:	eb0d 0102 	add.w	r1, sp, r2
 801a1b0:	f7ef fb5e 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	9303      	str	r3, [sp, #12]
 801a1b8:	9304      	str	r3, [sp, #16]
 801a1ba:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801a1bc:	4b3e      	ldr	r3, [pc, #248]	; (801a2b8 <SD_Witer+0x638>)
 801a1be:	2c00      	cmp	r4, #0
 801a1c0:	f040 83fa 	bne.w	801a9b8 <SD_Witer+0xd38>
 801a1c4:	4952      	ldr	r1, [pc, #328]	; (801a310 <SD_Witer+0x690>)
 801a1c6:	2223      	movs	r2, #35	; 0x23
 801a1c8:	483d      	ldr	r0, [pc, #244]	; (801a2c0 <SD_Witer+0x640>)
 801a1ca:	f7ef fb51 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPFD
 801a1ce:	4b51      	ldr	r3, [pc, #324]	; (801a314 <SD_Witer+0x694>)
 801a1d0:	6818      	ldr	r0, [r3, #0]
 801a1d2:	f7e6 f9d1 	bl	8000578 <__aeabi_f2d>
 801a1d6:	4602      	mov	r2, r0
 801a1d8:	460b      	mov	r3, r1
 801a1da:	a803      	add	r0, sp, #12
 801a1dc:	4948      	ldr	r1, [pc, #288]	; (801a300 <SD_Witer+0x680>)
 801a1de:	f005 fc13 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a1e2:	220c      	movs	r2, #12
 801a1e4:	4b34      	ldr	r3, [pc, #208]	; (801a2b8 <SD_Witer+0x638>)
 801a1e6:	4836      	ldr	r0, [pc, #216]	; (801a2c0 <SD_Witer+0x640>)
 801a1e8:	eb0d 0102 	add.w	r1, sp, r2
 801a1ec:	f7ef fb40 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	9303      	str	r3, [sp, #12]
 801a1f4:	9304      	str	r3, [sp, #16]
 801a1f6:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801a1f8:	4b2f      	ldr	r3, [pc, #188]	; (801a2b8 <SD_Witer+0x638>)
 801a1fa:	2c00      	cmp	r4, #0
 801a1fc:	f040 83df 	bne.w	801a9be <SD_Witer+0xd3e>
 801a200:	4945      	ldr	r1, [pc, #276]	; (801a318 <SD_Witer+0x698>)
 801a202:	2239      	movs	r2, #57	; 0x39
 801a204:	482e      	ldr	r0, [pc, #184]	; (801a2c0 <SD_Witer+0x640>)
 801a206:	f7ef fb33 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPFD B
 801a20a:	4b44      	ldr	r3, [pc, #272]	; (801a31c <SD_Witer+0x69c>)
 801a20c:	6818      	ldr	r0, [r3, #0]
 801a20e:	f7e6 f9b3 	bl	8000578 <__aeabi_f2d>
 801a212:	4602      	mov	r2, r0
 801a214:	460b      	mov	r3, r1
 801a216:	a803      	add	r0, sp, #12
 801a218:	4941      	ldr	r1, [pc, #260]	; (801a320 <SD_Witer+0x6a0>)
 801a21a:	f005 fbf5 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a21e:	220c      	movs	r2, #12
 801a220:	eb0d 0102 	add.w	r1, sp, r2
 801a224:	4b24      	ldr	r3, [pc, #144]	; (801a2b8 <SD_Witer+0x638>)
 801a226:	4826      	ldr	r0, [pc, #152]	; (801a2c0 <SD_Witer+0x640>)
 801a228:	f7ef fb22 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801a22c:	4b3d      	ldr	r3, [pc, #244]	; (801a324 <SD_Witer+0x6a4>)
								memset(measure_buff, 0, 12);
 801a22e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801a230:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a232:	9503      	str	r5, [sp, #12]
 801a234:	9504      	str	r5, [sp, #16]
 801a236:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801a238:	f7e6 f99e 	bl	8000578 <__aeabi_f2d>
 801a23c:	4602      	mov	r2, r0
 801a23e:	460b      	mov	r3, r1
 801a240:	a803      	add	r0, sp, #12
 801a242:	4937      	ldr	r1, [pc, #220]	; (801a320 <SD_Witer+0x6a0>)
 801a244:	f005 fbe0 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a248:	220c      	movs	r2, #12
 801a24a:	eb0d 0102 	add.w	r1, sp, r2
 801a24e:	4b1a      	ldr	r3, [pc, #104]	; (801a2b8 <SD_Witer+0x638>)
 801a250:	481b      	ldr	r0, [pc, #108]	; (801a2c0 <SD_Witer+0x640>)
 801a252:	f7ef fb0d 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801a256:	4b34      	ldr	r3, [pc, #208]	; (801a328 <SD_Witer+0x6a8>)
								memset(measure_buff, 0, 12);
 801a258:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801a25a:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a25c:	9504      	str	r5, [sp, #16]
 801a25e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801a260:	f7e6 f98a 	bl	8000578 <__aeabi_f2d>
 801a264:	4602      	mov	r2, r0
 801a266:	460b      	mov	r3, r1
 801a268:	a803      	add	r0, sp, #12
 801a26a:	492d      	ldr	r1, [pc, #180]	; (801a320 <SD_Witer+0x6a0>)
 801a26c:	f005 fbcc 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a270:	220c      	movs	r2, #12
 801a272:	eb0d 0102 	add.w	r1, sp, r2
 801a276:	4b10      	ldr	r3, [pc, #64]	; (801a2b8 <SD_Witer+0x638>)
 801a278:	4811      	ldr	r0, [pc, #68]	; (801a2c0 <SD_Witer+0x640>)
 801a27a:	f7ef faf9 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801a27e:	4b2b      	ldr	r3, [pc, #172]	; (801a32c <SD_Witer+0x6ac>)
								memset(measure_buff, 0, 12);
 801a280:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801a282:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a284:	9504      	str	r5, [sp, #16]
 801a286:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801a288:	f7e6 f976 	bl	8000578 <__aeabi_f2d>
 801a28c:	4602      	mov	r2, r0
 801a28e:	460b      	mov	r3, r1
 801a290:	a803      	add	r0, sp, #12
 801a292:	4923      	ldr	r1, [pc, #140]	; (801a320 <SD_Witer+0x6a0>)
 801a294:	f005 fbb8 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a298:	220c      	movs	r2, #12
 801a29a:	4b07      	ldr	r3, [pc, #28]	; (801a2b8 <SD_Witer+0x638>)
 801a29c:	4808      	ldr	r0, [pc, #32]	; (801a2c0 <SD_Witer+0x640>)
 801a29e:	eb0d 0102 	add.w	r1, sp, r2
 801a2a2:	f7ef fae5 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801a2a6:	9503      	str	r5, [sp, #12]
 801a2a8:	9504      	str	r5, [sp, #16]
 801a2aa:	9505      	str	r5, [sp, #20]
 801a2ac:	e044      	b.n	801a338 <SD_Witer+0x6b8>
 801a2ae:	bf00      	nop
 801a2b0:	9999999a 	.word	0x9999999a
 801a2b4:	3fe99999 	.word	0x3fe99999
 801a2b8:	200915a8 	.word	0x200915a8
 801a2bc:	200008e0 	.word	0x200008e0
 801a2c0:	20092600 	.word	0x20092600
 801a2c4:	20000a08 	.word	0x20000a08
 801a2c8:	20095b34 	.word	0x20095b34
 801a2cc:	080314b6 	.word	0x080314b6
 801a2d0:	200009b3 	.word	0x200009b3
 801a2d4:	200959f4 	.word	0x200959f4
 801a2d8:	20000970 	.word	0x20000970
 801a2dc:	20090a66 	.word	0x20090a66
 801a2e0:	20009750 	.word	0x20009750
 801a2e4:	3f4ccccd 	.word	0x3f4ccccd
 801a2e8:	20000568 	.word	0x20000568
 801a2ec:	2000c52c 	.word	0x2000c52c
 801a2f0:	080314a3 	.word	0x080314a3
 801a2f4:	080314a8 	.word	0x080314a8
 801a2f8:	2000051f 	.word	0x2000051f
 801a2fc:	20095c5c 	.word	0x20095c5c
 801a300:	0803145a 	.word	0x0803145a
 801a304:	200005dd 	.word	0x200005dd
 801a308:	200956c8 	.word	0x200956c8
 801a30c:	08031455 	.word	0x08031455
 801a310:	20000811 	.word	0x20000811
 801a314:	200956d0 	.word	0x200956d0
 801a318:	200007c5 	.word	0x200007c5
 801a31c:	200957b4 	.word	0x200957b4
 801a320:	080314af 	.word	0x080314af
 801a324:	20095b38 	.word	0x20095b38
 801a328:	20095a74 	.word	0x20095a74
 801a32c:	200956cc 	.word	0x200956cc
 801a330:	2000d52c 	.word	0x2000d52c
 801a334:	20054938 	.word	0x20054938
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801a338:	4baf      	ldr	r3, [pc, #700]	; (801a5f8 <SD_Witer+0x978>)
 801a33a:	2c00      	cmp	r4, #0
 801a33c:	f040 8342 	bne.w	801a9c4 <SD_Witer+0xd44>
 801a340:	49ae      	ldr	r1, [pc, #696]	; (801a5fc <SD_Witer+0x97c>)
 801a342:	2213      	movs	r2, #19
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801a344:	48ae      	ldr	r0, [pc, #696]	; (801a600 <SD_Witer+0x980>)
 801a346:	f7ef fa93 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", ELb_Measure); //Lb
 801a34a:	4bae      	ldr	r3, [pc, #696]	; (801a604 <SD_Witer+0x984>)
 801a34c:	6818      	ldr	r0, [r3, #0]
 801a34e:	f7e6 f913 	bl	8000578 <__aeabi_f2d>
 801a352:	4602      	mov	r2, r0
 801a354:	460b      	mov	r3, r1
 801a356:	a803      	add	r0, sp, #12
 801a358:	49ab      	ldr	r1, [pc, #684]	; (801a608 <SD_Witer+0x988>)
 801a35a:	f005 fb55 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a35e:	220c      	movs	r2, #12
 801a360:	eb0d 0102 	add.w	r1, sp, r2
 801a364:	4ba4      	ldr	r3, [pc, #656]	; (801a5f8 <SD_Witer+0x978>)
 801a366:	48a6      	ldr	r0, [pc, #664]	; (801a600 <SD_Witer+0x980>)
 801a368:	f7ef fa82 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);

								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801a36c:	4ba7      	ldr	r3, [pc, #668]	; (801a60c <SD_Witer+0x98c>)
								memset(measure_buff, 0, 12);
 801a36e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801a370:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a372:	9503      	str	r5, [sp, #12]
 801a374:	9504      	str	r5, [sp, #16]
 801a376:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801a378:	f7e6 f8fe 	bl	8000578 <__aeabi_f2d>
 801a37c:	4602      	mov	r2, r0
 801a37e:	460b      	mov	r3, r1
 801a380:	a803      	add	r0, sp, #12
 801a382:	49a3      	ldr	r1, [pc, #652]	; (801a610 <SD_Witer+0x990>)
 801a384:	f005 fb40 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a388:	220c      	movs	r2, #12
 801a38a:	eb0d 0102 	add.w	r1, sp, r2
 801a38e:	4b9a      	ldr	r3, [pc, #616]	; (801a5f8 <SD_Witer+0x978>)
 801a390:	489b      	ldr	r0, [pc, #620]	; (801a600 <SD_Witer+0x980>)
 801a392:	f7ef fa6d 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								SDWr_Status_bar = 0.9;
 801a396:	a196      	add	r1, pc, #600	; (adr r1, 801a5f0 <SD_Witer+0x970>)
 801a398:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a39c:	4b9d      	ldr	r3, [pc, #628]	; (801a614 <SD_Witer+0x994>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a39e:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801a618 <SD_Witer+0x998>
								memset(measure_buff, 0, 12);
 801a3a2:	9503      	str	r5, [sp, #12]
								SDWr_Status_bar = 0.9;
 801a3a4:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a3a8:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a3ac:	2055      	movs	r0, #85	; 0x55
								memset(measure_buff, 0, 12);
 801a3ae:	9504      	str	r5, [sp, #16]
 801a3b0:	9505      	str	r5, [sp, #20]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a3b2:	f7f8 fe81 	bl	80130b8 <GUI_Bar_Measure>
						
							}
							if(CRICQS_done == 0x01)
 801a3b6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801a3ba:	2b01      	cmp	r3, #1
 801a3bc:	f040 824d 	bne.w	801a85a <SD_Witer+0xbda>
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801a3c0:	4b8d      	ldr	r3, [pc, #564]	; (801a5f8 <SD_Witer+0x978>)
 801a3c2:	2c00      	cmp	r4, #0
 801a3c4:	f040 8407 	bne.w	801abd6 <SD_Witer+0xf56>
 801a3c8:	4994      	ldr	r1, [pc, #592]	; (801a61c <SD_Witer+0x99c>)
 801a3ca:	227d      	movs	r2, #125	; 0x7d
 801a3cc:	488c      	ldr	r0, [pc, #560]	; (801a600 <SD_Witer+0x980>)
 801a3ce:	f7ef fa4f 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d\t", 151); //Ra
 801a3d2:	2297      	movs	r2, #151	; 0x97
 801a3d4:	4992      	ldr	r1, [pc, #584]	; (801a620 <SD_Witer+0x9a0>)
 801a3d6:	a803      	add	r0, sp, #12
 801a3d8:	f005 fb16 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a3dc:	220c      	movs	r2, #12
 801a3de:	4b86      	ldr	r3, [pc, #536]	; (801a5f8 <SD_Witer+0x978>)
 801a3e0:	4887      	ldr	r0, [pc, #540]	; (801a600 <SD_Witer+0x980>)
 801a3e2:	eb0d 0102 	add.w	r1, sp, r2
								memset(measure_buff, 0, 12);
 801a3e6:	2500      	movs	r5, #0
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a3e8:	f7ef fa42 	bl	8009870 <f_write>
								
								sprintf(measure_buff, "%d", 231); //Rall
 801a3ec:	22e7      	movs	r2, #231	; 0xe7
 801a3ee:	498d      	ldr	r1, [pc, #564]	; (801a624 <SD_Witer+0x9a4>)
								memset(measure_buff, 0, 12);
 801a3f0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d", 231); //Rall
 801a3f2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a3f4:	9504      	str	r5, [sp, #16]
 801a3f6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d", 231); //Rall
 801a3f8:	f005 fb06 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a3fc:	220c      	movs	r2, #12
 801a3fe:	4b7e      	ldr	r3, [pc, #504]	; (801a5f8 <SD_Witer+0x978>)
 801a400:	487f      	ldr	r0, [pc, #508]	; (801a600 <SD_Witer+0x980>)
 801a402:	eb0d 0102 	add.w	r1, sp, r2
 801a406:	f7ef fa33 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801a40a:	220d      	movs	r2, #13
 801a40c:	4986      	ldr	r1, [pc, #536]	; (801a628 <SD_Witer+0x9a8>)
								memset(measure_buff, 0, 12);
 801a40e:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801a410:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a412:	9504      	str	r5, [sp, #16]
 801a414:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801a416:	f005 faf7 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a41a:	220c      	movs	r2, #12
 801a41c:	4b76      	ldr	r3, [pc, #472]	; (801a5f8 <SD_Witer+0x978>)
 801a41e:	4878      	ldr	r0, [pc, #480]	; (801a600 <SD_Witer+0x980>)
 801a420:	eb0d 0102 	add.w	r1, sp, r2
 801a424:	f7ef fa24 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 29); //R2
 801a428:	221d      	movs	r2, #29
 801a42a:	497d      	ldr	r1, [pc, #500]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a42c:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 29); //R2
 801a42e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a430:	9504      	str	r5, [sp, #16]
 801a432:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 29); //R2
 801a434:	f005 fae8 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a438:	220c      	movs	r2, #12
 801a43a:	4b6f      	ldr	r3, [pc, #444]	; (801a5f8 <SD_Witer+0x978>)
 801a43c:	4870      	ldr	r0, [pc, #448]	; (801a600 <SD_Witer+0x980>)
 801a43e:	eb0d 0102 	add.w	r1, sp, r2
 801a442:	f7ef fa15 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 49); //R3
 801a446:	2231      	movs	r2, #49	; 0x31
 801a448:	4975      	ldr	r1, [pc, #468]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a44a:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 49); //R3
 801a44c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a44e:	9504      	str	r5, [sp, #16]
 801a450:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 49); //R3
 801a452:	f005 fad9 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a456:	220c      	movs	r2, #12
 801a458:	4b67      	ldr	r3, [pc, #412]	; (801a5f8 <SD_Witer+0x978>)
 801a45a:	4869      	ldr	r0, [pc, #420]	; (801a600 <SD_Witer+0x980>)
 801a45c:	eb0d 0102 	add.w	r1, sp, r2
 801a460:	f7ef fa06 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 44); //R4
 801a464:	222c      	movs	r2, #44	; 0x2c
 801a466:	496e      	ldr	r1, [pc, #440]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a468:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 44); //R4
 801a46a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a46c:	9504      	str	r5, [sp, #16]
 801a46e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 44); //R4
 801a470:	f005 faca 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a474:	220c      	movs	r2, #12
 801a476:	4b60      	ldr	r3, [pc, #384]	; (801a5f8 <SD_Witer+0x978>)
 801a478:	4861      	ldr	r0, [pc, #388]	; (801a600 <SD_Witer+0x980>)
 801a47a:	eb0d 0102 	add.w	r1, sp, r2
 801a47e:	f7ef f9f7 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 55); //R5
 801a482:	2237      	movs	r2, #55	; 0x37
 801a484:	4966      	ldr	r1, [pc, #408]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a486:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 55); //R5
 801a488:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a48a:	9504      	str	r5, [sp, #16]
 801a48c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 55); //R5
 801a48e:	f005 fabb 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a492:	220c      	movs	r2, #12
 801a494:	4b58      	ldr	r3, [pc, #352]	; (801a5f8 <SD_Witer+0x978>)
 801a496:	485a      	ldr	r0, [pc, #360]	; (801a600 <SD_Witer+0x980>)
 801a498:	eb0d 0102 	add.w	r1, sp, r2
 801a49c:	f7ef f9e8 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 68); //R6
 801a4a0:	2244      	movs	r2, #68	; 0x44
 801a4a2:	495f      	ldr	r1, [pc, #380]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a4a4:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 68); //R6
 801a4a6:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a4a8:	9504      	str	r5, [sp, #16]
 801a4aa:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 68); //R6
 801a4ac:	f005 faac 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4b0:	220c      	movs	r2, #12
 801a4b2:	4b51      	ldr	r3, [pc, #324]	; (801a5f8 <SD_Witer+0x978>)
 801a4b4:	4852      	ldr	r0, [pc, #328]	; (801a600 <SD_Witer+0x980>)
 801a4b6:	eb0d 0102 	add.w	r1, sp, r2
 801a4ba:	f7ef f9d9 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",79); //R7
 801a4be:	224f      	movs	r2, #79	; 0x4f
 801a4c0:	4957      	ldr	r1, [pc, #348]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a4c2:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",79); //R7
 801a4c4:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a4c6:	9504      	str	r5, [sp, #16]
 801a4c8:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",79); //R7
 801a4ca:	f005 fa9d 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4ce:	220c      	movs	r2, #12
 801a4d0:	4b49      	ldr	r3, [pc, #292]	; (801a5f8 <SD_Witer+0x978>)
 801a4d2:	484b      	ldr	r0, [pc, #300]	; (801a600 <SD_Witer+0x980>)
 801a4d4:	eb0d 0102 	add.w	r1, sp, r2
 801a4d8:	f7ef f9ca 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",88); //R8
 801a4dc:	2258      	movs	r2, #88	; 0x58
 801a4de:	4950      	ldr	r1, [pc, #320]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a4e0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",88); //R8
 801a4e2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a4e4:	9504      	str	r5, [sp, #16]
 801a4e6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",88); //R8
 801a4e8:	f005 fa8e 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4ec:	220c      	movs	r2, #12
 801a4ee:	4b42      	ldr	r3, [pc, #264]	; (801a5f8 <SD_Witer+0x978>)
 801a4f0:	4843      	ldr	r0, [pc, #268]	; (801a600 <SD_Witer+0x980>)
 801a4f2:	eb0d 0102 	add.w	r1, sp, r2
 801a4f6:	f7ef f9bb 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",98); //R9
 801a4fa:	2262      	movs	r2, #98	; 0x62
 801a4fc:	4948      	ldr	r1, [pc, #288]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a4fe:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",98); //R9
 801a500:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a502:	9504      	str	r5, [sp, #16]
 801a504:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",98); //R9
 801a506:	f005 fa7f 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a50a:	220c      	movs	r2, #12
 801a50c:	4b3a      	ldr	r3, [pc, #232]	; (801a5f8 <SD_Witer+0x978>)
 801a50e:	483c      	ldr	r0, [pc, #240]	; (801a600 <SD_Witer+0x980>)
 801a510:	eb0d 0102 	add.w	r1, sp, r2
 801a514:	f7ef f9ac 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 105); //R10
 801a518:	2269      	movs	r2, #105	; 0x69
 801a51a:	4941      	ldr	r1, [pc, #260]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a51c:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 105); //R10
 801a51e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a520:	9504      	str	r5, [sp, #16]
 801a522:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 105); //R10
 801a524:	f005 fa70 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a528:	220c      	movs	r2, #12
 801a52a:	4b33      	ldr	r3, [pc, #204]	; (801a5f8 <SD_Witer+0x978>)
 801a52c:	4834      	ldr	r0, [pc, #208]	; (801a600 <SD_Witer+0x980>)
 801a52e:	eb0d 0102 	add.w	r1, sp, r2
 801a532:	f7ef f99d 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 112); //R11
 801a536:	2270      	movs	r2, #112	; 0x70
 801a538:	4939      	ldr	r1, [pc, #228]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a53a:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 112); //R11
 801a53c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a53e:	9504      	str	r5, [sp, #16]
 801a540:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 112); //R11
 801a542:	f005 fa61 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a546:	220c      	movs	r2, #12
 801a548:	4b2b      	ldr	r3, [pc, #172]	; (801a5f8 <SD_Witer+0x978>)
 801a54a:	482d      	ldr	r0, [pc, #180]	; (801a600 <SD_Witer+0x980>)
 801a54c:	eb0d 0102 	add.w	r1, sp, r2
 801a550:	f7ef f98e 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 127); //R12
 801a554:	227f      	movs	r2, #127	; 0x7f
 801a556:	4932      	ldr	r1, [pc, #200]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a558:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 127); //R12
 801a55a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a55c:	9504      	str	r5, [sp, #16]
 801a55e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 127); //R12
 801a560:	f005 fa52 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a564:	220c      	movs	r2, #12
 801a566:	4b24      	ldr	r3, [pc, #144]	; (801a5f8 <SD_Witer+0x978>)
 801a568:	4825      	ldr	r0, [pc, #148]	; (801a600 <SD_Witer+0x980>)
 801a56a:	eb0d 0102 	add.w	r1, sp, r2
 801a56e:	f7ef f97f 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 133); //R13
 801a572:	2285      	movs	r2, #133	; 0x85
 801a574:	492a      	ldr	r1, [pc, #168]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a576:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 133); //R13
 801a578:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a57a:	9504      	str	r5, [sp, #16]
 801a57c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 133); //R13
 801a57e:	f005 fa43 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a582:	220c      	movs	r2, #12
 801a584:	4b1c      	ldr	r3, [pc, #112]	; (801a5f8 <SD_Witer+0x978>)
 801a586:	481e      	ldr	r0, [pc, #120]	; (801a600 <SD_Witer+0x980>)
 801a588:	eb0d 0102 	add.w	r1, sp, r2
 801a58c:	f7ef f970 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 148); //R14
 801a590:	2294      	movs	r2, #148	; 0x94
 801a592:	4923      	ldr	r1, [pc, #140]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a594:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 148); //R14
 801a596:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a598:	9504      	str	r5, [sp, #16]
 801a59a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 148); //R14
 801a59c:	f005 fa34 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a5a0:	220c      	movs	r2, #12
 801a5a2:	4b15      	ldr	r3, [pc, #84]	; (801a5f8 <SD_Witer+0x978>)
 801a5a4:	4816      	ldr	r0, [pc, #88]	; (801a600 <SD_Witer+0x980>)
 801a5a6:	eb0d 0102 	add.w	r1, sp, r2
 801a5aa:	f7ef f961 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 152); //R15
 801a5ae:	2298      	movs	r2, #152	; 0x98
 801a5b0:	491b      	ldr	r1, [pc, #108]	; (801a620 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a5b2:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 152); //R15
 801a5b4:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a5b6:	9504      	str	r5, [sp, #16]
 801a5b8:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 152); //R15
 801a5ba:	f005 fa25 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a5be:	220c      	movs	r2, #12
 801a5c0:	4b0d      	ldr	r3, [pc, #52]	; (801a5f8 <SD_Witer+0x978>)
 801a5c2:	480f      	ldr	r0, [pc, #60]	; (801a600 <SD_Witer+0x980>)
 801a5c4:	eb0d 0102 	add.w	r1, sp, r2
 801a5c8:	f7ef f952 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801a5cc:	9503      	str	r5, [sp, #12]
 801a5ce:	9504      	str	r5, [sp, #16]
 801a5d0:	9505      	str	r5, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801a5d2:	4b09      	ldr	r3, [pc, #36]	; (801a5f8 <SD_Witer+0x978>)
 801a5d4:	2c00      	cmp	r4, #0
 801a5d6:	f040 8302 	bne.w	801abde <SD_Witer+0xf5e>
 801a5da:	4914      	ldr	r1, [pc, #80]	; (801a62c <SD_Witer+0x9ac>)
 801a5dc:	227f      	movs	r2, #127	; 0x7f
 801a5de:	4808      	ldr	r0, [pc, #32]	; (801a600 <SD_Witer+0x980>)
								
								sprintf(measure_buff, "%d", Qf); //Qf
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a5e0:	4d13      	ldr	r5, [pc, #76]	; (801a630 <SD_Witer+0x9b0>)
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801a5e2:	f7ef f945 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d\t", Qa); //Qa
 801a5e6:	4b13      	ldr	r3, [pc, #76]	; (801a634 <SD_Witer+0x9b4>)
 801a5e8:	e026      	b.n	801a638 <SD_Witer+0x9b8>
 801a5ea:	bf00      	nop
 801a5ec:	f3af 8000 	nop.w
 801a5f0:	cccccccd 	.word	0xcccccccd
 801a5f4:	3feccccc 	.word	0x3feccccc
 801a5f8:	200915a8 	.word	0x200915a8
 801a5fc:	200004fa 	.word	0x200004fa
 801a600:	20092600 	.word	0x20092600
 801a604:	20095c54 	.word	0x20095c54
 801a608:	080314af 	.word	0x080314af
 801a60c:	20095c58 	.word	0x20095c58
 801a610:	0803145a 	.word	0x0803145a
 801a614:	20009750 	.word	0x20009750
 801a618:	3f666666 	.word	0x3f666666
 801a61c:	200003b2 	.word	0x200003b2
 801a620:	080314b6 	.word	0x080314b6
 801a624:	08024679 	.word	0x08024679
 801a628:	080314b5 	.word	0x080314b5
 801a62c:	200002c8 	.word	0x200002c8
 801a630:	20003614 	.word	0x20003614
 801a634:	20003623 	.word	0x20003623
 801a638:	49a8      	ldr	r1, [pc, #672]	; (801a8dc <SD_Witer+0xc5c>)
 801a63a:	781a      	ldrb	r2, [r3, #0]
 801a63c:	a803      	add	r0, sp, #12
 801a63e:	f005 f9e3 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a642:	220c      	movs	r2, #12
 801a644:	eb0d 0102 	add.w	r1, sp, r2
 801a648:	4ba5      	ldr	r3, [pc, #660]	; (801a8e0 <SD_Witer+0xc60>)
 801a64a:	48a6      	ldr	r0, [pc, #664]	; (801a8e4 <SD_Witer+0xc64>)
 801a64c:	f7ef f910 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801a650:	4ba5      	ldr	r3, [pc, #660]	; (801a8e8 <SD_Witer+0xc68>)
 801a652:	49a2      	ldr	r1, [pc, #648]	; (801a8dc <SD_Witer+0xc5c>)
 801a654:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801a656:	2400      	movs	r4, #0
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801a658:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a65a:	9403      	str	r4, [sp, #12]
 801a65c:	9404      	str	r4, [sp, #16]
 801a65e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801a660:	f005 f9d2 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a664:	220c      	movs	r2, #12
 801a666:	eb0d 0102 	add.w	r1, sp, r2
 801a66a:	4b9d      	ldr	r3, [pc, #628]	; (801a8e0 <SD_Witer+0xc60>)
 801a66c:	489d      	ldr	r0, [pc, #628]	; (801a8e4 <SD_Witer+0xc64>)
 801a66e:	f7ef f8ff 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d", Qf); //Qf
 801a672:	4b9e      	ldr	r3, [pc, #632]	; (801a8ec <SD_Witer+0xc6c>)
 801a674:	499e      	ldr	r1, [pc, #632]	; (801a8f0 <SD_Witer+0xc70>)
 801a676:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801a678:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d", Qf); //Qf
 801a67a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a67c:	9404      	str	r4, [sp, #16]
 801a67e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d", Qf); //Qf
 801a680:	f005 f9c2 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a684:	220c      	movs	r2, #12
 801a686:	4b96      	ldr	r3, [pc, #600]	; (801a8e0 <SD_Witer+0xc60>)
 801a688:	4896      	ldr	r0, [pc, #600]	; (801a8e4 <SD_Witer+0xc64>)
 801a68a:	eb0d 0102 	add.w	r1, sp, r2
 801a68e:	f7ef f8ef 	bl	8009870 <f_write>
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a692:	782a      	ldrb	r2, [r5, #0]
 801a694:	4997      	ldr	r1, [pc, #604]	; (801a8f4 <SD_Witer+0xc74>)
								memset(measure_buff, 0, 12);
 801a696:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a698:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a69a:	9404      	str	r4, [sp, #16]
 801a69c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801a69e:	f005 f9b3 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6a2:	220c      	movs	r2, #12
 801a6a4:	4b8e      	ldr	r3, [pc, #568]	; (801a8e0 <SD_Witer+0xc60>)
 801a6a6:	488f      	ldr	r0, [pc, #572]	; (801a8e4 <SD_Witer+0xc64>)
 801a6a8:	eb0d 0102 	add.w	r1, sp, r2
 801a6ac:	f7ef f8e0 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801a6b0:	786a      	ldrb	r2, [r5, #1]
 801a6b2:	498a      	ldr	r1, [pc, #552]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a6b4:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801a6b6:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a6b8:	9404      	str	r4, [sp, #16]
 801a6ba:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801a6bc:	f005 f9a4 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6c0:	220c      	movs	r2, #12
 801a6c2:	4b87      	ldr	r3, [pc, #540]	; (801a8e0 <SD_Witer+0xc60>)
 801a6c4:	4887      	ldr	r0, [pc, #540]	; (801a8e4 <SD_Witer+0xc64>)
 801a6c6:	eb0d 0102 	add.w	r1, sp, r2
 801a6ca:	f7ef f8d1 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801a6ce:	78aa      	ldrb	r2, [r5, #2]
 801a6d0:	4982      	ldr	r1, [pc, #520]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a6d2:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801a6d4:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a6d6:	9404      	str	r4, [sp, #16]
 801a6d8:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801a6da:	f005 f995 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6de:	220c      	movs	r2, #12
 801a6e0:	4b7f      	ldr	r3, [pc, #508]	; (801a8e0 <SD_Witer+0xc60>)
 801a6e2:	4880      	ldr	r0, [pc, #512]	; (801a8e4 <SD_Witer+0xc64>)
 801a6e4:	eb0d 0102 	add.w	r1, sp, r2
 801a6e8:	f7ef f8c2 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801a6ec:	78ea      	ldrb	r2, [r5, #3]
 801a6ee:	497b      	ldr	r1, [pc, #492]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a6f0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801a6f2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a6f4:	9404      	str	r4, [sp, #16]
 801a6f6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801a6f8:	f005 f986 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6fc:	220c      	movs	r2, #12
 801a6fe:	4b78      	ldr	r3, [pc, #480]	; (801a8e0 <SD_Witer+0xc60>)
 801a700:	4878      	ldr	r0, [pc, #480]	; (801a8e4 <SD_Witer+0xc64>)
 801a702:	eb0d 0102 	add.w	r1, sp, r2
 801a706:	f7ef f8b3 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801a70a:	792a      	ldrb	r2, [r5, #4]
 801a70c:	4973      	ldr	r1, [pc, #460]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a70e:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801a710:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a712:	9404      	str	r4, [sp, #16]
 801a714:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801a716:	f005 f977 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a71a:	220c      	movs	r2, #12
 801a71c:	4b70      	ldr	r3, [pc, #448]	; (801a8e0 <SD_Witer+0xc60>)
 801a71e:	4871      	ldr	r0, [pc, #452]	; (801a8e4 <SD_Witer+0xc64>)
 801a720:	eb0d 0102 	add.w	r1, sp, r2
 801a724:	f7ef f8a4 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801a728:	796a      	ldrb	r2, [r5, #5]
 801a72a:	496c      	ldr	r1, [pc, #432]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a72c:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801a72e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a730:	9404      	str	r4, [sp, #16]
 801a732:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801a734:	f005 f968 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a738:	220c      	movs	r2, #12
 801a73a:	4b69      	ldr	r3, [pc, #420]	; (801a8e0 <SD_Witer+0xc60>)
 801a73c:	4869      	ldr	r0, [pc, #420]	; (801a8e4 <SD_Witer+0xc64>)
 801a73e:	eb0d 0102 	add.w	r1, sp, r2
 801a742:	f7ef f895 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801a746:	79aa      	ldrb	r2, [r5, #6]
 801a748:	4964      	ldr	r1, [pc, #400]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a74a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801a74c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a74e:	9404      	str	r4, [sp, #16]
 801a750:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801a752:	f005 f959 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a756:	220c      	movs	r2, #12
 801a758:	4b61      	ldr	r3, [pc, #388]	; (801a8e0 <SD_Witer+0xc60>)
 801a75a:	4862      	ldr	r0, [pc, #392]	; (801a8e4 <SD_Witer+0xc64>)
 801a75c:	eb0d 0102 	add.w	r1, sp, r2
 801a760:	f7ef f886 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801a764:	79ea      	ldrb	r2, [r5, #7]
 801a766:	495d      	ldr	r1, [pc, #372]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a768:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801a76a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a76c:	9404      	str	r4, [sp, #16]
 801a76e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801a770:	f005 f94a 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a774:	220c      	movs	r2, #12
 801a776:	4b5a      	ldr	r3, [pc, #360]	; (801a8e0 <SD_Witer+0xc60>)
 801a778:	485a      	ldr	r0, [pc, #360]	; (801a8e4 <SD_Witer+0xc64>)
 801a77a:	eb0d 0102 	add.w	r1, sp, r2
 801a77e:	f7ef f877 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801a782:	7a2a      	ldrb	r2, [r5, #8]
 801a784:	4955      	ldr	r1, [pc, #340]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a786:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801a788:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a78a:	9404      	str	r4, [sp, #16]
 801a78c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801a78e:	f005 f93b 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a792:	220c      	movs	r2, #12
 801a794:	4b52      	ldr	r3, [pc, #328]	; (801a8e0 <SD_Witer+0xc60>)
 801a796:	4853      	ldr	r0, [pc, #332]	; (801a8e4 <SD_Witer+0xc64>)
 801a798:	eb0d 0102 	add.w	r1, sp, r2
 801a79c:	f7ef f868 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801a7a0:	7a6a      	ldrb	r2, [r5, #9]
 801a7a2:	494e      	ldr	r1, [pc, #312]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a7a4:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801a7a6:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a7a8:	9404      	str	r4, [sp, #16]
 801a7aa:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801a7ac:	f005 f92c 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a7b0:	220c      	movs	r2, #12
 801a7b2:	4b4b      	ldr	r3, [pc, #300]	; (801a8e0 <SD_Witer+0xc60>)
 801a7b4:	484b      	ldr	r0, [pc, #300]	; (801a8e4 <SD_Witer+0xc64>)
 801a7b6:	eb0d 0102 	add.w	r1, sp, r2
 801a7ba:	f7ef f859 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801a7be:	7aaa      	ldrb	r2, [r5, #10]
 801a7c0:	4946      	ldr	r1, [pc, #280]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a7c2:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801a7c4:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a7c6:	9404      	str	r4, [sp, #16]
 801a7c8:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801a7ca:	f005 f91d 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a7ce:	220c      	movs	r2, #12
 801a7d0:	4b43      	ldr	r3, [pc, #268]	; (801a8e0 <SD_Witer+0xc60>)
 801a7d2:	4844      	ldr	r0, [pc, #272]	; (801a8e4 <SD_Witer+0xc64>)
 801a7d4:	eb0d 0102 	add.w	r1, sp, r2
 801a7d8:	f7ef f84a 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801a7dc:	7aea      	ldrb	r2, [r5, #11]
 801a7de:	493f      	ldr	r1, [pc, #252]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a7e0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801a7e2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a7e4:	9404      	str	r4, [sp, #16]
 801a7e6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801a7e8:	f005 f90e 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a7ec:	220c      	movs	r2, #12
 801a7ee:	4b3c      	ldr	r3, [pc, #240]	; (801a8e0 <SD_Witer+0xc60>)
 801a7f0:	483c      	ldr	r0, [pc, #240]	; (801a8e4 <SD_Witer+0xc64>)
 801a7f2:	eb0d 0102 	add.w	r1, sp, r2
 801a7f6:	f7ef f83b 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801a7fa:	7b2a      	ldrb	r2, [r5, #12]
 801a7fc:	4937      	ldr	r1, [pc, #220]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a7fe:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801a800:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a802:	9404      	str	r4, [sp, #16]
 801a804:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801a806:	f005 f8ff 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a80a:	220c      	movs	r2, #12
 801a80c:	4b34      	ldr	r3, [pc, #208]	; (801a8e0 <SD_Witer+0xc60>)
 801a80e:	4835      	ldr	r0, [pc, #212]	; (801a8e4 <SD_Witer+0xc64>)
 801a810:	eb0d 0102 	add.w	r1, sp, r2
 801a814:	f7ef f82c 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801a818:	7b6a      	ldrb	r2, [r5, #13]
 801a81a:	4930      	ldr	r1, [pc, #192]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a81c:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801a81e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a820:	9404      	str	r4, [sp, #16]
 801a822:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801a824:	f005 f8f0 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a828:	220c      	movs	r2, #12
 801a82a:	4b2d      	ldr	r3, [pc, #180]	; (801a8e0 <SD_Witer+0xc60>)
 801a82c:	482d      	ldr	r0, [pc, #180]	; (801a8e4 <SD_Witer+0xc64>)
 801a82e:	eb0d 0102 	add.w	r1, sp, r2
 801a832:	f7ef f81d 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801a836:	7baa      	ldrb	r2, [r5, #14]
 801a838:	4928      	ldr	r1, [pc, #160]	; (801a8dc <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801a83a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801a83c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a83e:	9404      	str	r4, [sp, #16]
 801a840:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801a842:	f005 f8e1 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a846:	220c      	movs	r2, #12
 801a848:	4b25      	ldr	r3, [pc, #148]	; (801a8e0 <SD_Witer+0xc60>)
 801a84a:	4826      	ldr	r0, [pc, #152]	; (801a8e4 <SD_Witer+0xc64>)
 801a84c:	eb0d 0102 	add.w	r1, sp, r2
 801a850:	f7ef f80e 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801a854:	9403      	str	r4, [sp, #12]
 801a856:	9404      	str	r4, [sp, #16]
 801a858:	9405      	str	r4, [sp, #20]
							}
					}
				}
				
			
				f_close(&MyFile);
 801a85a:	4822      	ldr	r0, [pc, #136]	; (801a8e4 <SD_Witer+0xc64>)
 801a85c:	f7ef f926 	bl	8009aac <f_close>
				memset(buffer_sd, 0, 11);
 801a860:	2200      	movs	r2, #0
				
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801a862:	4925      	ldr	r1, [pc, #148]	; (801a8f8 <SD_Witer+0xc78>)
 801a864:	4825      	ldr	r0, [pc, #148]	; (801a8fc <SD_Witer+0xc7c>)
				memset(buffer_sd, 0, 11);
 801a866:	6072      	str	r2, [r6, #4]
 801a868:	6032      	str	r2, [r6, #0]
 801a86a:	f8c6 2007 	str.w	r2, [r6, #7]
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801a86e:	f7ee feb5 	bl	80095dc <f_mount>
 801a872:	4b23      	ldr	r3, [pc, #140]	; (801a900 <SD_Witer+0xc80>)
				SDWr_Status_bar = 1.0;
 801a874:	4923      	ldr	r1, [pc, #140]	; (801a904 <SD_Witer+0xc84>)
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801a876:	7018      	strb	r0, [r3, #0]
				SDWr_Status_bar = 1.0;
 801a878:	4b23      	ldr	r3, [pc, #140]	; (801a908 <SD_Witer+0xc88>)
 801a87a:	2000      	movs	r0, #0
 801a87c:	e9c3 0100 	strd	r0, r1, [r3]
				GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a880:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a884:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a888:	2055      	movs	r0, #85	; 0x55
 801a88a:	f7f8 fc15 	bl	80130b8 <GUI_Bar_Measure>
	}
 801a88e:	b007      	add	sp, #28
 801a890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801a894:	491d      	ldr	r1, [pc, #116]	; (801a90c <SD_Witer+0xc8c>)
 801a896:	f7ff ba10 	b.w	8019cba <SD_Witer+0x3a>
 801a89a:	491d      	ldr	r1, [pc, #116]	; (801a910 <SD_Witer+0xc90>)
 801a89c:	f7ff ba0d 	b.w	8019cba <SD_Witer+0x3a>
 801a8a0:	491c      	ldr	r1, [pc, #112]	; (801a914 <SD_Witer+0xc94>)
 801a8a2:	f7ff ba0a 	b.w	8019cba <SD_Witer+0x3a>
 801a8a6:	491c      	ldr	r1, [pc, #112]	; (801a918 <SD_Witer+0xc98>)
 801a8a8:	f7ff ba07 	b.w	8019cba <SD_Witer+0x3a>
 801a8ac:	491b      	ldr	r1, [pc, #108]	; (801a91c <SD_Witer+0xc9c>)
 801a8ae:	f7ff ba04 	b.w	8019cba <SD_Witer+0x3a>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801a8b2:	221e      	movs	r2, #30
 801a8b4:	491a      	ldr	r1, [pc, #104]	; (801a920 <SD_Witer+0xca0>)
 801a8b6:	f7ff ba3a 	b.w	8019d2e <SD_Witer+0xae>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801a8ba:	2212      	movs	r2, #18
 801a8bc:	4919      	ldr	r1, [pc, #100]	; (801a924 <SD_Witer+0xca4>)
 801a8be:	f7ff ba54 	b.w	8019d6a <SD_Witer+0xea>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801a8c2:	2212      	movs	r2, #18
 801a8c4:	4918      	ldr	r1, [pc, #96]	; (801a928 <SD_Witer+0xca8>)
 801a8c6:	f7ff ba8c 	b.w	8019de2 <SD_Witer+0x162>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801a8ca:	2214      	movs	r2, #20
 801a8cc:	4917      	ldr	r1, [pc, #92]	; (801a92c <SD_Witer+0xcac>)
 801a8ce:	f7ff babc 	b.w	8019e4a <SD_Witer+0x1ca>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801a8d2:	2209      	movs	r2, #9
 801a8d4:	4916      	ldr	r1, [pc, #88]	; (801a930 <SD_Witer+0xcb0>)
 801a8d6:	f7ff baec 	b.w	8019eb2 <SD_Witer+0x232>
 801a8da:	bf00      	nop
 801a8dc:	080314b6 	.word	0x080314b6
 801a8e0:	200915a8 	.word	0x200915a8
 801a8e4:	20092600 	.word	0x20092600
 801a8e8:	20003625 	.word	0x20003625
 801a8ec:	20003624 	.word	0x20003624
 801a8f0:	08024679 	.word	0x08024679
 801a8f4:	080314b5 	.word	0x080314b5
 801a8f8:	20093635 	.word	0x20093635
 801a8fc:	200915b0 	.word	0x200915b0
 801a900:	20093630 	.word	0x20093630
 801a904:	3ff00000 	.word	0x3ff00000
 801a908:	20009750 	.word	0x20009750
 801a90c:	080315ba 	.word	0x080315ba
 801a910:	08031475 	.word	0x08031475
 801a914:	08031479 	.word	0x08031479
 801a918:	0803147b 	.word	0x0803147b
 801a91c:	0803147f 	.word	0x0803147f
 801a920:	2000090a 	.word	0x2000090a
 801a924:	2000042f 	.word	0x2000042f
 801a928:	200004ab 	.word	0x200004ab
 801a92c:	20000467 	.word	0x20000467
 801a930:	20000246 	.word	0x20000246
										sprintf(measure_buff, "%.d", Tc_Measure);
 801a934:	49ab      	ldr	r1, [pc, #684]	; (801abe4 <SD_Witer+0xf64>)
 801a936:	a803      	add	r0, sp, #12
 801a938:	f005 f866 	bl	801fa08 <sprintf>
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a93c:	220c      	movs	r2, #12
 801a93e:	4baa      	ldr	r3, [pc, #680]	; (801abe8 <SD_Witer+0xf68>)
 801a940:	48aa      	ldr	r0, [pc, #680]	; (801abec <SD_Witer+0xf6c>)
 801a942:	eb0d 0102 	add.w	r1, sp, r2
 801a946:	f7ee ff93 	bl	8009870 <f_write>
										memset(measure_buff, 0, 12);
 801a94a:	2300      	movs	r3, #0
 801a94c:	9303      	str	r3, [sp, #12]
 801a94e:	9304      	str	r3, [sp, #16]
 801a950:	9305      	str	r3, [sp, #20]
 801a952:	f7ff babe 	b.w	8019ed2 <SD_Witer+0x252>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801a956:	2215      	movs	r2, #21
 801a958:	49a5      	ldr	r1, [pc, #660]	; (801abf0 <SD_Witer+0xf70>)
 801a95a:	f7ff bacd 	b.w	8019ef8 <SD_Witer+0x278>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801a95e:	2213      	movs	r2, #19
 801a960:	49a4      	ldr	r1, [pc, #656]	; (801abf4 <SD_Witer+0xf74>)
 801a962:	f7ff bb46 	b.w	8019ff2 <SD_Witer+0x372>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801a966:	221a      	movs	r2, #26
 801a968:	49a3      	ldr	r1, [pc, #652]	; (801abf8 <SD_Witer+0xf78>)
 801a96a:	f7ff bb51 	b.w	801a010 <SD_Witer+0x390>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801a96e:	221f      	movs	r2, #31
 801a970:	49a2      	ldr	r1, [pc, #648]	; (801abfc <SD_Witer+0xf7c>)
 801a972:	f7ff bb67 	b.w	801a044 <SD_Witer+0x3c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a976:	2213      	movs	r2, #19
 801a978:	49a1      	ldr	r1, [pc, #644]	; (801ac00 <SD_Witer+0xf80>)
 801a97a:	f7ff bb81 	b.w	801a080 <SD_Witer+0x400>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a97e:	b964      	cbnz	r4, 801a99a <SD_Witer+0xd1a>
 801a980:	49a0      	ldr	r1, [pc, #640]	; (801ac04 <SD_Witer+0xf84>)
 801a982:	2224      	movs	r2, #36	; 0x24
 801a984:	4899      	ldr	r0, [pc, #612]	; (801abec <SD_Witer+0xf6c>)
 801a986:	f7ee ff73 	bl	8009870 <f_write>
								f_write(&MyFile, "NAN", 3, &byteswritten);
 801a98a:	4b97      	ldr	r3, [pc, #604]	; (801abe8 <SD_Witer+0xf68>)
 801a98c:	499e      	ldr	r1, [pc, #632]	; (801ac08 <SD_Witer+0xf88>)
 801a98e:	4897      	ldr	r0, [pc, #604]	; (801abec <SD_Witer+0xf6c>)
 801a990:	2203      	movs	r2, #3
 801a992:	f7ee ff6d 	bl	8009870 <f_write>
 801a996:	f7ff bb88 	b.w	801a0aa <SD_Witer+0x42a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a99a:	2213      	movs	r2, #19
 801a99c:	4998      	ldr	r1, [pc, #608]	; (801ac00 <SD_Witer+0xf80>)
 801a99e:	e7f1      	b.n	801a984 <SD_Witer+0xd04>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801a9a0:	2225      	movs	r2, #37	; 0x25
 801a9a2:	499a      	ldr	r1, [pc, #616]	; (801ac0c <SD_Witer+0xf8c>)
 801a9a4:	f7ff bb99 	b.w	801a0da <SD_Witer+0x45a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801a9a8:	2212      	movs	r2, #18
 801a9aa:	4999      	ldr	r1, [pc, #612]	; (801ac10 <SD_Witer+0xf90>)
 801a9ac:	f7ff bbd0 	b.w	801a150 <SD_Witer+0x4d0>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801a9b0:	2212      	movs	r2, #18
 801a9b2:	4998      	ldr	r1, [pc, #608]	; (801ac14 <SD_Witer+0xf94>)
 801a9b4:	f7ff bbea 	b.w	801a18c <SD_Witer+0x50c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801a9b8:	2213      	movs	r2, #19
 801a9ba:	4997      	ldr	r1, [pc, #604]	; (801ac18 <SD_Witer+0xf98>)
 801a9bc:	e404      	b.n	801a1c8 <SD_Witer+0x548>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801a9be:	221e      	movs	r2, #30
 801a9c0:	4996      	ldr	r1, [pc, #600]	; (801ac1c <SD_Witer+0xf9c>)
 801a9c2:	e41f      	b.n	801a204 <SD_Witer+0x584>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801a9c4:	220f      	movs	r2, #15
 801a9c6:	4996      	ldr	r1, [pc, #600]	; (801ac20 <SD_Witer+0xfa0>)
 801a9c8:	e4bc      	b.n	801a344 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801a9ca:	2c00      	cmp	r4, #0
 801a9cc:	f040 80f0 	bne.w	801abb0 <SD_Witer+0xf30>
 801a9d0:	4994      	ldr	r1, [pc, #592]	; (801ac24 <SD_Witer+0xfa4>)
 801a9d2:	2276      	movs	r2, #118	; 0x76
 801a9d4:	4885      	ldr	r0, [pc, #532]	; (801abec <SD_Witer+0xf6c>)
 801a9d6:	4f94      	ldr	r7, [pc, #592]	; (801ac28 <SD_Witer+0xfa8>)
 801a9d8:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801ac90 <SD_Witer+0x1010>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9dc:	f8df a208 	ldr.w	sl, [pc, #520]	; 801abe8 <SD_Witer+0xf68>
 801a9e0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 801abec <SD_Witer+0xf6c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801a9e4:	f7ee ff44 	bl	8009870 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //L(lambda)
 801a9e8:	f857 0b04 	ldr.w	r0, [r7], #4
 801a9ec:	f7e5 fdc4 	bl	8000578 <__aeabi_f2d>
 801a9f0:	4602      	mov	r2, r0
 801a9f2:	460b      	mov	r3, r1
 801a9f4:	a803      	add	r0, sp, #12
 801a9f6:	498d      	ldr	r1, [pc, #564]	; (801ac2c <SD_Witer+0xfac>)
 801a9f8:	f005 f806 	bl	801fa08 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9fc:	220c      	movs	r2, #12
 801a9fe:	4653      	mov	r3, sl
 801aa00:	eb0d 0102 	add.w	r1, sp, r2
 801aa04:	4648      	mov	r0, r9
 801aa06:	f7ee ff33 	bl	8009870 <f_write>
									memset(measure_buff, 0, 12);
 801aa0a:	2500      	movs	r5, #0
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801aa0c:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801aa10:	9503      	str	r5, [sp, #12]
 801aa12:	9504      	str	r5, [sp, #16]
 801aa14:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801aa16:	f7e5 fdaf 	bl	8000578 <__aeabi_f2d>
 801aa1a:	4602      	mov	r2, r0
 801aa1c:	460b      	mov	r3, r1
 801aa1e:	a803      	add	r0, sp, #12
 801aa20:	4983      	ldr	r1, [pc, #524]	; (801ac30 <SD_Witer+0xfb0>)
 801aa22:	f004 fff1 	bl	801fa08 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa26:	220c      	movs	r2, #12
 801aa28:	4653      	mov	r3, sl
 801aa2a:	eb0d 0102 	add.w	r1, sp, r2
 801aa2e:	4648      	mov	r0, r9
 801aa30:	f7ee ff1e 	bl	8009870 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801aa34:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801aa36:	9503      	str	r5, [sp, #12]
 801aa38:	9504      	str	r5, [sp, #16]
 801aa3a:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801aa3c:	d1d4      	bne.n	801a9e8 <SD_Witer+0xd68>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801aa3e:	4b6a      	ldr	r3, [pc, #424]	; (801abe8 <SD_Witer+0xf68>)
 801aa40:	2c00      	cmp	r4, #0
 801aa42:	f040 80b8 	bne.w	801abb6 <SD_Witer+0xf36>
 801aa46:	497b      	ldr	r1, [pc, #492]	; (801ac34 <SD_Witer+0xfb4>)
 801aa48:	223f      	movs	r2, #63	; 0x3f
 801aa4a:	4868      	ldr	r0, [pc, #416]	; (801abec <SD_Witer+0xf6c>)
 801aa4c:	f7ee ff10 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f", E_day); //Le
 801aa50:	4b79      	ldr	r3, [pc, #484]	; (801ac38 <SD_Witer+0xfb8>)
 801aa52:	6818      	ldr	r0, [r3, #0]
 801aa54:	f7e5 fd90 	bl	8000578 <__aeabi_f2d>
 801aa58:	4602      	mov	r2, r0
 801aa5a:	460b      	mov	r3, r1
 801aa5c:	a803      	add	r0, sp, #12
 801aa5e:	4977      	ldr	r1, [pc, #476]	; (801ac3c <SD_Witer+0xfbc>)
 801aa60:	f004 ffd2 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa64:	220c      	movs	r2, #12
 801aa66:	4b60      	ldr	r3, [pc, #384]	; (801abe8 <SD_Witer+0xf68>)
 801aa68:	4860      	ldr	r0, [pc, #384]	; (801abec <SD_Witer+0xf6c>)
 801aa6a:	eb0d 0102 	add.w	r1, sp, r2
 801aa6e:	f7ee feff 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801aa72:	2300      	movs	r3, #0
 801aa74:	9303      	str	r3, [sp, #12]
 801aa76:	9304      	str	r3, [sp, #16]
 801aa78:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801aa7a:	4b5b      	ldr	r3, [pc, #364]	; (801abe8 <SD_Witer+0xf68>)
 801aa7c:	2c00      	cmp	r4, #0
 801aa7e:	f040 809d 	bne.w	801abbc <SD_Witer+0xf3c>
 801aa82:	496f      	ldr	r1, [pc, #444]	; (801ac40 <SD_Witer+0xfc0>)
 801aa84:	221b      	movs	r2, #27
 801aa86:	4859      	ldr	r0, [pc, #356]	; (801abec <SD_Witer+0xf6c>)
 801aa88:	f7ee fef2 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.1f", E_day_Wt); //Lu
 801aa8c:	4b6d      	ldr	r3, [pc, #436]	; (801ac44 <SD_Witer+0xfc4>)
 801aa8e:	6818      	ldr	r0, [r3, #0]
 801aa90:	f7e5 fd72 	bl	8000578 <__aeabi_f2d>
 801aa94:	4602      	mov	r2, r0
 801aa96:	460b      	mov	r3, r1
 801aa98:	a803      	add	r0, sp, #12
 801aa9a:	496b      	ldr	r1, [pc, #428]	; (801ac48 <SD_Witer+0xfc8>)
 801aa9c:	f004 ffb4 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aaa0:	220c      	movs	r2, #12
 801aaa2:	4b51      	ldr	r3, [pc, #324]	; (801abe8 <SD_Witer+0xf68>)
 801aaa4:	4851      	ldr	r0, [pc, #324]	; (801abec <SD_Witer+0xf6c>)
 801aaa6:	eb0d 0102 	add.w	r1, sp, r2
 801aaaa:	f7ee fee1 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801aaae:	2300      	movs	r3, #0
 801aab0:	9303      	str	r3, [sp, #12]
 801aab2:	9304      	str	r3, [sp, #16]
 801aab4:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801aab6:	4b4c      	ldr	r3, [pc, #304]	; (801abe8 <SD_Witer+0xf68>)
 801aab8:	2c00      	cmp	r4, #0
 801aaba:	f040 8082 	bne.w	801abc2 <SD_Witer+0xf42>
 801aabe:	4963      	ldr	r1, [pc, #396]	; (801ac4c <SD_Witer+0xfcc>)
 801aac0:	2227      	movs	r2, #39	; 0x27
 801aac2:	484a      	ldr	r0, [pc, #296]	; (801abec <SD_Witer+0xf6c>)
 801aac4:	f7ee fed4 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPL
 801aac8:	4b61      	ldr	r3, [pc, #388]	; (801ac50 <SD_Witer+0xfd0>)
 801aaca:	6818      	ldr	r0, [r3, #0]
 801aacc:	f7e5 fd54 	bl	8000578 <__aeabi_f2d>
 801aad0:	4602      	mov	r2, r0
 801aad2:	460b      	mov	r3, r1
 801aad4:	a803      	add	r0, sp, #12
 801aad6:	4959      	ldr	r1, [pc, #356]	; (801ac3c <SD_Witer+0xfbc>)
 801aad8:	f004 ff96 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aadc:	220c      	movs	r2, #12
 801aade:	4b42      	ldr	r3, [pc, #264]	; (801abe8 <SD_Witer+0xf68>)
 801aae0:	4842      	ldr	r0, [pc, #264]	; (801abec <SD_Witer+0xf6c>)
 801aae2:	eb0d 0102 	add.w	r1, sp, r2
 801aae6:	f7ee fec3 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801aaea:	2300      	movs	r3, #0
 801aaec:	9303      	str	r3, [sp, #12]
 801aaee:	9304      	str	r3, [sp, #16]
 801aaf0:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801aaf2:	4b3d      	ldr	r3, [pc, #244]	; (801abe8 <SD_Witer+0xf68>)
 801aaf4:	2c00      	cmp	r4, #0
 801aaf6:	d167      	bne.n	801abc8 <SD_Witer+0xf48>
 801aaf8:	4956      	ldr	r1, [pc, #344]	; (801ac54 <SD_Witer+0xfd4>)
 801aafa:	223d      	movs	r2, #61	; 0x3d
 801aafc:	483b      	ldr	r0, [pc, #236]	; (801abec <SD_Witer+0xf6c>)
 801aafe:	f7ee feb7 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPL B
 801ab02:	4b55      	ldr	r3, [pc, #340]	; (801ac58 <SD_Witer+0xfd8>)
 801ab04:	6818      	ldr	r0, [r3, #0]
 801ab06:	f7e5 fd37 	bl	8000578 <__aeabi_f2d>
 801ab0a:	4602      	mov	r2, r0
 801ab0c:	460b      	mov	r3, r1
 801ab0e:	a803      	add	r0, sp, #12
 801ab10:	4952      	ldr	r1, [pc, #328]	; (801ac5c <SD_Witer+0xfdc>)
 801ab12:	f004 ff79 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab16:	220c      	movs	r2, #12
 801ab18:	eb0d 0102 	add.w	r1, sp, r2
 801ab1c:	4b32      	ldr	r3, [pc, #200]	; (801abe8 <SD_Witer+0xf68>)
 801ab1e:	4833      	ldr	r0, [pc, #204]	; (801abec <SD_Witer+0xf6c>)
 801ab20:	f7ee fea6 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801ab24:	4b4e      	ldr	r3, [pc, #312]	; (801ac60 <SD_Witer+0xfe0>)
								memset(measure_buff, 0, 12);
 801ab26:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801ab28:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801ab2a:	9503      	str	r5, [sp, #12]
 801ab2c:	9504      	str	r5, [sp, #16]
 801ab2e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801ab30:	f7e5 fd22 	bl	8000578 <__aeabi_f2d>
 801ab34:	4602      	mov	r2, r0
 801ab36:	460b      	mov	r3, r1
 801ab38:	a803      	add	r0, sp, #12
 801ab3a:	4948      	ldr	r1, [pc, #288]	; (801ac5c <SD_Witer+0xfdc>)
 801ab3c:	f004 ff64 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab40:	220c      	movs	r2, #12
 801ab42:	eb0d 0102 	add.w	r1, sp, r2
 801ab46:	4b28      	ldr	r3, [pc, #160]	; (801abe8 <SD_Witer+0xf68>)
 801ab48:	4828      	ldr	r0, [pc, #160]	; (801abec <SD_Witer+0xf6c>)
 801ab4a:	f7ee fe91 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801ab4e:	4b45      	ldr	r3, [pc, #276]	; (801ac64 <SD_Witer+0xfe4>)
								memset(measure_buff, 0, 12);
 801ab50:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801ab52:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801ab54:	9504      	str	r5, [sp, #16]
 801ab56:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801ab58:	f7e5 fd0e 	bl	8000578 <__aeabi_f2d>
 801ab5c:	4602      	mov	r2, r0
 801ab5e:	460b      	mov	r3, r1
 801ab60:	a803      	add	r0, sp, #12
 801ab62:	493e      	ldr	r1, [pc, #248]	; (801ac5c <SD_Witer+0xfdc>)
 801ab64:	f004 ff50 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab68:	220c      	movs	r2, #12
 801ab6a:	eb0d 0102 	add.w	r1, sp, r2
 801ab6e:	4b1e      	ldr	r3, [pc, #120]	; (801abe8 <SD_Witer+0xf68>)
 801ab70:	481e      	ldr	r0, [pc, #120]	; (801abec <SD_Witer+0xf6c>)
 801ab72:	f7ee fe7d 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801ab76:	4b3c      	ldr	r3, [pc, #240]	; (801ac68 <SD_Witer+0xfe8>)
								memset(measure_buff, 0, 12);
 801ab78:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801ab7a:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801ab7c:	9504      	str	r5, [sp, #16]
 801ab7e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801ab80:	f7e5 fcfa 	bl	8000578 <__aeabi_f2d>
 801ab84:	4602      	mov	r2, r0
 801ab86:	460b      	mov	r3, r1
 801ab88:	a803      	add	r0, sp, #12
 801ab8a:	4934      	ldr	r1, [pc, #208]	; (801ac5c <SD_Witer+0xfdc>)
 801ab8c:	f004 ff3c 	bl	801fa08 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab90:	220c      	movs	r2, #12
 801ab92:	4b15      	ldr	r3, [pc, #84]	; (801abe8 <SD_Witer+0xf68>)
 801ab94:	4815      	ldr	r0, [pc, #84]	; (801abec <SD_Witer+0xf6c>)
 801ab96:	eb0d 0102 	add.w	r1, sp, r2
 801ab9a:	f7ee fe69 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801ab9e:	9503      	str	r5, [sp, #12]
 801aba0:	9504      	str	r5, [sp, #16]
 801aba2:	9505      	str	r5, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801aba4:	4b10      	ldr	r3, [pc, #64]	; (801abe8 <SD_Witer+0xf68>)
 801aba6:	b994      	cbnz	r4, 801abce <SD_Witer+0xf4e>
 801aba8:	221a      	movs	r2, #26
 801abaa:	4930      	ldr	r1, [pc, #192]	; (801ac6c <SD_Witer+0xfec>)
 801abac:	f7ff bbca 	b.w	801a344 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801abb0:	2223      	movs	r2, #35	; 0x23
 801abb2:	492f      	ldr	r1, [pc, #188]	; (801ac70 <SD_Witer+0xff0>)
 801abb4:	e70e      	b.n	801a9d4 <SD_Witer+0xd54>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801abb6:	2216      	movs	r2, #22
 801abb8:	492e      	ldr	r1, [pc, #184]	; (801ac74 <SD_Witer+0xff4>)
 801abba:	e746      	b.n	801aa4a <SD_Witer+0xdca>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801abbc:	2213      	movs	r2, #19
 801abbe:	492e      	ldr	r1, [pc, #184]	; (801ac78 <SD_Witer+0xff8>)
 801abc0:	e761      	b.n	801aa86 <SD_Witer+0xe06>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801abc2:	2215      	movs	r2, #21
 801abc4:	492d      	ldr	r1, [pc, #180]	; (801ac7c <SD_Witer+0xffc>)
 801abc6:	e77c      	b.n	801aac2 <SD_Witer+0xe42>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801abc8:	2220      	movs	r2, #32
 801abca:	492d      	ldr	r1, [pc, #180]	; (801ac80 <SD_Witer+0x1000>)
 801abcc:	e796      	b.n	801aafc <SD_Witer+0xe7c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801abce:	2214      	movs	r2, #20
 801abd0:	492c      	ldr	r1, [pc, #176]	; (801ac84 <SD_Witer+0x1004>)
 801abd2:	f7ff bbb7 	b.w	801a344 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801abd6:	226b      	movs	r2, #107	; 0x6b
 801abd8:	492b      	ldr	r1, [pc, #172]	; (801ac88 <SD_Witer+0x1008>)
 801abda:	f7ff bbf7 	b.w	801a3cc <SD_Witer+0x74c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801abde:	226b      	movs	r2, #107	; 0x6b
 801abe0:	492a      	ldr	r1, [pc, #168]	; (801ac8c <SD_Witer+0x100c>)
 801abe2:	e4fc      	b.n	801a5de <SD_Witer+0x95e>
 801abe4:	0803149b 	.word	0x0803149b
 801abe8:	200915a8 	.word	0x200915a8
 801abec:	20092600 	.word	0x20092600
 801abf0:	200005fe 	.word	0x200005fe
 801abf4:	200008cd 	.word	0x200008cd
 801abf8:	200009ee 	.word	0x200009ee
 801abfc:	20000994 	.word	0x20000994
 801ac00:	2000095d 	.word	0x2000095d
 801ac04:	20000970 	.word	0x20000970
 801ac08:	08031483 	.word	0x08031483
 801ac0c:	20000543 	.word	0x20000543
 801ac10:	2000050d 	.word	0x2000050d
 801ac14:	200005cb 	.word	0x200005cb
 801ac18:	200007fe 	.word	0x200007fe
 801ac1c:	200007a7 	.word	0x200007a7
 801ac20:	200004eb 	.word	0x200004eb
 801ac24:	20000703 	.word	0x20000703
 801ac28:	2000c52c 	.word	0x2000c52c
 801ac2c:	080314a3 	.word	0x080314a3
 801ac30:	080314a8 	.word	0x080314a8
 801ac34:	200006a1 	.word	0x200006a1
 801ac38:	20095c5c 	.word	0x20095c5c
 801ac3c:	0803145a 	.word	0x0803145a
 801ac40:	2000078c 	.word	0x2000078c
 801ac44:	200956c8 	.word	0x200956c8
 801ac48:	08031455 	.word	0x08031455
 801ac4c:	200008a6 	.word	0x200008a6
 801ac50:	200956d0 	.word	0x200956d0
 801ac54:	20000854 	.word	0x20000854
 801ac58:	200957b4 	.word	0x200957b4
 801ac5c:	080314af 	.word	0x080314af
 801ac60:	20095b38 	.word	0x20095b38
 801ac64:	20095a74 	.word	0x20095a74
 801ac68:	200956cc 	.word	0x200956cc
 801ac6c:	20000671 	.word	0x20000671
 801ac70:	200006e0 	.word	0x200006e0
 801ac74:	2000068b 	.word	0x2000068b
 801ac78:	20000779 	.word	0x20000779
 801ac7c:	20000891 	.word	0x20000891
 801ac80:	20000834 	.word	0x20000834
 801ac84:	2000065d 	.word	0x2000065d
 801ac88:	20000347 	.word	0x20000347
 801ac8c:	2000025d 	.word	0x2000025d
 801ac90:	20054938 	.word	0x20054938

0801ac94 <Spectral_Axes>:
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,		};


void Spectral_Axes(uint8_t direction){
 801ac94:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (direction == 0x00)
 801ac96:	2800      	cmp	r0, #0
 801ac98:	d145      	bne.n	801ad26 <Spectral_Axes+0x92>
	{
//		TFT_FillRectangle(20, 95, 270, 412, TFT_Black_Bkgr);

		TFT_FillRectangle(18, 95, 20, 412, TFT_Grey); //Yline
 801ac9a:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801ac9e:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801aca2:	2214      	movs	r2, #20
 801aca4:	215f      	movs	r1, #95	; 0x5f
 801aca6:	2012      	movs	r0, #18
 801aca8:	9400      	str	r4, [sp, #0]
 801acaa:	f001 f9a8 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(18, 412, 270, 414, TFT_Grey);//XLine
 801acae:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 801acb2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801acb6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801acba:	2012      	movs	r0, #18
 801acbc:	9400      	str	r4, [sp, #0]
 801acbe:	f001 f99e 	bl	801bffe <TFT_FillRectangle>
		
		TFT_DrawLine(18, 334, 268, 334, TFT_Grey); //25
 801acc2:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 801acc6:	4619      	mov	r1, r3
 801acc8:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801accc:	2012      	movs	r0, #18
 801acce:	9400      	str	r4, [sp, #0]
 801acd0:	f001 f938 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(18, 257, 268, 257, TFT_Grey); //50
 801acd4:	f240 1301 	movw	r3, #257	; 0x101
 801acd8:	4619      	mov	r1, r3
 801acda:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801acde:	2012      	movs	r0, #18
 801ace0:	9400      	str	r4, [sp, #0]
 801ace2:	f001 f92f 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(18, 181, 268, 181, TFT_Grey); //75
 801ace6:	23b5      	movs	r3, #181	; 0xb5
 801ace8:	4619      	mov	r1, r3
 801acea:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801acee:	2012      	movs	r0, #18
 801acf0:	9400      	str	r4, [sp, #0]
 801acf2:	f001 f927 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(18, 105, 268, 105, TFT_Grey); //100
 801acf6:	2369      	movs	r3, #105	; 0x69
 801acf8:	9400      	str	r4, [sp, #0]
 801acfa:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801acfe:	4619      	mov	r1, r3
 801ad00:	2012      	movs	r0, #18
 801ad02:	f001 f91f 	bl	801bf44 <TFT_DrawLine>
 801ad06:	2538      	movs	r5, #56	; 0x38
		
		for(uint16_t i = 0; i < 210; i+=40){
			TFT_DrawLine(56+i, 95, 56+i, 412, TFT_Grey);
 801ad08:	462a      	mov	r2, r5
 801ad0a:	4628      	mov	r0, r5
 801ad0c:	3528      	adds	r5, #40	; 0x28
 801ad0e:	9400      	str	r4, [sp, #0]
 801ad10:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801ad14:	215f      	movs	r1, #95	; 0x5f
 801ad16:	b2ad      	uxth	r5, r5
 801ad18:	f001 f914 	bl	801bf44 <TFT_DrawLine>
		for(uint16_t i = 0; i < 210; i+=40){
 801ad1c:	f5b5 7f94 	cmp.w	r5, #296	; 0x128
 801ad20:	d1f2      	bne.n	801ad08 <Spectral_Axes+0x74>
		
		for(uint16_t i = 0; i < 260; i+=50){
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
		}
	}
}
 801ad22:	b003      	add	sp, #12
 801ad24:	bd30      	pop	{r4, r5, pc}
	} else if (direction == 0x01)
 801ad26:	2801      	cmp	r0, #1
 801ad28:	d140      	bne.n	801adac <Spectral_Axes+0x118>
		TFT_FillRectangle(253, 70, 255, 406, TFT_Grey); //XLine
 801ad2a:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801ad2e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ad32:	22ff      	movs	r2, #255	; 0xff
 801ad34:	2146      	movs	r1, #70	; 0x46
 801ad36:	20fd      	movs	r0, #253	; 0xfd
 801ad38:	9400      	str	r4, [sp, #0]
 801ad3a:	f001 f960 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_Grey); //Yline
 801ad3e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ad42:	22ff      	movs	r2, #255	; 0xff
 801ad44:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801ad48:	2028      	movs	r0, #40	; 0x28
 801ad4a:	9400      	str	r4, [sp, #0]
 801ad4c:	f001 f957 	bl	801bffe <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_Grey); //25
 801ad50:	22cc      	movs	r2, #204	; 0xcc
 801ad52:	4610      	mov	r0, r2
 801ad54:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ad58:	2146      	movs	r1, #70	; 0x46
 801ad5a:	9400      	str	r4, [sp, #0]
 801ad5c:	f001 f8f2 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_Grey); //50
 801ad60:	2297      	movs	r2, #151	; 0x97
 801ad62:	4610      	mov	r0, r2
 801ad64:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ad68:	2146      	movs	r1, #70	; 0x46
 801ad6a:	9400      	str	r4, [sp, #0]
 801ad6c:	f001 f8ea 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_Grey); //75
 801ad70:	2262      	movs	r2, #98	; 0x62
 801ad72:	4610      	mov	r0, r2
 801ad74:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ad78:	2146      	movs	r1, #70	; 0x46
 801ad7a:	9400      	str	r4, [sp, #0]
 801ad7c:	f001 f8e2 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_Grey); //100
 801ad80:	222d      	movs	r2, #45	; 0x2d
 801ad82:	9400      	str	r4, [sp, #0]
 801ad84:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ad88:	2146      	movs	r1, #70	; 0x46
 801ad8a:	4610      	mov	r0, r2
 801ad8c:	f001 f8da 	bl	801bf44 <TFT_DrawLine>
 801ad90:	f44f 75b1 	mov.w	r5, #354	; 0x162
			TFT_DrawLine(40, 354-i, 255, 354-i, TFT_Grey);
 801ad94:	462b      	mov	r3, r5
 801ad96:	4629      	mov	r1, r5
 801ad98:	3d32      	subs	r5, #50	; 0x32
 801ad9a:	9400      	str	r4, [sp, #0]
 801ad9c:	22ff      	movs	r2, #255	; 0xff
 801ad9e:	2028      	movs	r0, #40	; 0x28
 801ada0:	b2ad      	uxth	r5, r5
 801ada2:	f001 f8cf 	bl	801bf44 <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801ada6:	2d36      	cmp	r5, #54	; 0x36
 801ada8:	d1f4      	bne.n	801ad94 <Spectral_Axes+0x100>
 801adaa:	e7ba      	b.n	801ad22 <Spectral_Axes+0x8e>
	} else if (direction == 0x02)
 801adac:	2802      	cmp	r0, #2
 801adae:	d1b8      	bne.n	801ad22 <Spectral_Axes+0x8e>
		TFT_FillRectangle(18, 74, 16, 406, TFT_Grey); //XLine
 801adb0:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801adb4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801adb8:	2210      	movs	r2, #16
 801adba:	214a      	movs	r1, #74	; 0x4a
 801adbc:	2012      	movs	r0, #18
 801adbe:	9400      	str	r4, [sp, #0]
 801adc0:	f001 f91d 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_Grey); //Yline
 801adc4:	234c      	movs	r3, #76	; 0x4c
 801adc6:	22e8      	movs	r2, #232	; 0xe8
 801adc8:	214a      	movs	r1, #74	; 0x4a
 801adca:	2011      	movs	r0, #17
 801adcc:	9400      	str	r4, [sp, #0]
 801adce:	f001 f916 	bl	801bffe <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_Grey); //25
 801add2:	2244      	movs	r2, #68	; 0x44
 801add4:	4610      	mov	r0, r2
 801add6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801adda:	2146      	movs	r1, #70	; 0x46
 801addc:	9400      	str	r4, [sp, #0]
 801adde:	f001 f8b1 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_Grey); //50
 801ade2:	2279      	movs	r2, #121	; 0x79
 801ade4:	4610      	mov	r0, r2
 801ade6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801adea:	2146      	movs	r1, #70	; 0x46
 801adec:	9400      	str	r4, [sp, #0]
 801adee:	f001 f8a9 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_Grey); //75
 801adf2:	22ae      	movs	r2, #174	; 0xae
 801adf4:	4610      	mov	r0, r2
 801adf6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801adfa:	2146      	movs	r1, #70	; 0x46
 801adfc:	9400      	str	r4, [sp, #0]
 801adfe:	f001 f8a1 	bl	801bf44 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_Grey); //100
 801ae02:	22e3      	movs	r2, #227	; 0xe3
 801ae04:	9400      	str	r4, [sp, #0]
 801ae06:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801ae0a:	2146      	movs	r1, #70	; 0x46
 801ae0c:	4610      	mov	r0, r2
 801ae0e:	f001 f899 	bl	801bf44 <TFT_DrawLine>
 801ae12:	f44f 75bb 	mov.w	r5, #374	; 0x176
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
 801ae16:	462b      	mov	r3, r5
 801ae18:	4629      	mov	r1, r5
 801ae1a:	3d32      	subs	r5, #50	; 0x32
 801ae1c:	9400      	str	r4, [sp, #0]
 801ae1e:	22e8      	movs	r2, #232	; 0xe8
 801ae20:	2011      	movs	r0, #17
 801ae22:	b2ad      	uxth	r5, r5
 801ae24:	f001 f88e 	bl	801bf44 <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801ae28:	2d4a      	cmp	r5, #74	; 0x4a
 801ae2a:	d1f4      	bne.n	801ae16 <Spectral_Axes+0x182>
 801ae2c:	e779      	b.n	801ad22 <Spectral_Axes+0x8e>
	...

0801ae30 <Spectral_PAR_Range>:

void Spectral_PAR_Range(uint8_t direction){
 801ae30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ae34:	4d6b      	ldr	r5, [pc, #428]	; (801afe4 <Spectral_PAR_Range+0x1b4>)
 801ae36:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801aff0 <Spectral_PAR_Range+0x1c0>
 801ae3a:	4f6b      	ldr	r7, [pc, #428]	; (801afe8 <Spectral_PAR_Range+0x1b8>)
 801ae3c:	4e6b      	ldr	r6, [pc, #428]	; (801afec <Spectral_PAR_Range+0x1bc>)
	if (direction == 0x00)
 801ae3e:	2800      	cmp	r0, #0
 801ae40:	d146      	bne.n	801aed0 <Spectral_PAR_Range+0xa0>
	{
		TFT_FillRectangle(19, 105, 19+PARGraph_B/4, 411, TFT_Black_Bkgr);
 801ae42:	882a      	ldrh	r2, [r5, #0]
 801ae44:	2363      	movs	r3, #99	; 0x63
 801ae46:	0892      	lsrs	r2, r2, #2
 801ae48:	9300      	str	r3, [sp, #0]
 801ae4a:	3213      	adds	r2, #19
 801ae4c:	f240 139b 	movw	r3, #411	; 0x19b
 801ae50:	2169      	movs	r1, #105	; 0x69
 801ae52:	2013      	movs	r0, #19
 801ae54:	f001 f8d3 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_B/4, 105, 19+PARGraph_G/4, 411, TFT_PAR_Blue);
 801ae58:	8828      	ldrh	r0, [r5, #0]
 801ae5a:	f8b8 2000 	ldrh.w	r2, [r8]
 801ae5e:	f644 33d4 	movw	r3, #19412	; 0x4bd4
 801ae62:	0892      	lsrs	r2, r2, #2
 801ae64:	0880      	lsrs	r0, r0, #2
 801ae66:	9300      	str	r3, [sp, #0]
 801ae68:	3213      	adds	r2, #19
 801ae6a:	f240 139b 	movw	r3, #411	; 0x19b
 801ae6e:	2169      	movs	r1, #105	; 0x69
 801ae70:	3013      	adds	r0, #19
 801ae72:	f001 f8c4 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_G/4, 105, 19+PARGraph_R/4, 411, TFT_PAR_Green);
 801ae76:	883a      	ldrh	r2, [r7, #0]
 801ae78:	f8b8 0000 	ldrh.w	r0, [r8]
 801ae7c:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801ae80:	0892      	lsrs	r2, r2, #2
 801ae82:	0880      	lsrs	r0, r0, #2
 801ae84:	9300      	str	r3, [sp, #0]
 801ae86:	3213      	adds	r2, #19
 801ae88:	f240 139b 	movw	r3, #411	; 0x19b
 801ae8c:	2169      	movs	r1, #105	; 0x69
 801ae8e:	3013      	adds	r0, #19
 801ae90:	f001 f8b5 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_R/4, 105, 19+PARGraph_IR/4, 411, TFT_PAR_Red);
 801ae94:	8838      	ldrh	r0, [r7, #0]
 801ae96:	8832      	ldrh	r2, [r6, #0]
 801ae98:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801ae9c:	0892      	lsrs	r2, r2, #2
 801ae9e:	0880      	lsrs	r0, r0, #2
 801aea0:	9300      	str	r3, [sp, #0]
 801aea2:	3213      	adds	r2, #19
 801aea4:	f240 139b 	movw	r3, #411	; 0x19b
 801aea8:	2169      	movs	r1, #105	; 0x69
 801aeaa:	3013      	adds	r0, #19
 801aeac:	f001 f8a7 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_IR/4, 105, 19+1000/4, 411, TFT_PAR_IRed);
 801aeb0:	8830      	ldrh	r0, [r6, #0]
 801aeb2:	f646 0382 	movw	r3, #26754	; 0x6882
 801aeb6:	0880      	lsrs	r0, r0, #2
 801aeb8:	9300      	str	r3, [sp, #0]
 801aeba:	f240 120d 	movw	r2, #269	; 0x10d
 801aebe:	f240 139b 	movw	r3, #411	; 0x19b
 801aec2:	2169      	movs	r1, #105	; 0x69
 801aec4:	3013      	adds	r0, #19
	}else
	{
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801aec6:	f001 f89a 	bl	801bffe <TFT_FillRectangle>
	}
}
 801aeca:	b002      	add	sp, #8
 801aecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(direction == 0x01)
 801aed0:	2801      	cmp	r0, #1
 801aed2:	f04f 0403 	mov.w	r4, #3
 801aed6:	d142      	bne.n	801af5e <Spectral_PAR_Range+0x12e>
		TFT_FillRectangle( 45, 403-PARGraph_G/3, 253, 403-PARGraph_B/3, TFT_PAR_Blue);
 801aed8:	882b      	ldrh	r3, [r5, #0]
 801aeda:	f8b8 1000 	ldrh.w	r1, [r8]
 801aede:	fbb3 f3f4 	udiv	r3, r3, r4
 801aee2:	f240 1593 	movw	r5, #403	; 0x193
 801aee6:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801aeea:	1aeb      	subs	r3, r5, r3
 801aeec:	fbb1 f1f4 	udiv	r1, r1, r4
 801aef0:	1a69      	subs	r1, r5, r1
 801aef2:	9200      	str	r2, [sp, #0]
 801aef4:	b29b      	uxth	r3, r3
 801aef6:	22fd      	movs	r2, #253	; 0xfd
 801aef8:	b289      	uxth	r1, r1
 801aefa:	202d      	movs	r0, #45	; 0x2d
 801aefc:	f001 f87f 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_R/3, 253, 403-PARGraph_G/3, TFT_PAR_Green);
 801af00:	8839      	ldrh	r1, [r7, #0]
 801af02:	f8b8 3000 	ldrh.w	r3, [r8]
 801af06:	fbb1 f1f4 	udiv	r1, r1, r4
 801af0a:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801af0e:	fbb3 f3f4 	udiv	r3, r3, r4
 801af12:	1a69      	subs	r1, r5, r1
 801af14:	1aeb      	subs	r3, r5, r3
 801af16:	9200      	str	r2, [sp, #0]
 801af18:	b29b      	uxth	r3, r3
 801af1a:	22fd      	movs	r2, #253	; 0xfd
 801af1c:	b289      	uxth	r1, r1
 801af1e:	202d      	movs	r0, #45	; 0x2d
 801af20:	f001 f86d 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_IR/3, 253, 403-PARGraph_R/3, TFT_PAR_Red);
 801af24:	883b      	ldrh	r3, [r7, #0]
 801af26:	8831      	ldrh	r1, [r6, #0]
 801af28:	fbb3 f3f4 	udiv	r3, r3, r4
 801af2c:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801af30:	1aeb      	subs	r3, r5, r3
 801af32:	fbb1 f1f4 	udiv	r1, r1, r4
 801af36:	1a69      	subs	r1, r5, r1
 801af38:	9200      	str	r2, [sp, #0]
 801af3a:	b29b      	uxth	r3, r3
 801af3c:	22fd      	movs	r2, #253	; 0xfd
 801af3e:	b289      	uxth	r1, r1
 801af40:	202d      	movs	r0, #45	; 0x2d
 801af42:	f001 f85c 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-1000/3, 253, 403-PARGraph_IR/3, TFT_PAR_IRed);
 801af46:	f646 0282 	movw	r2, #26754	; 0x6882
 801af4a:	8833      	ldrh	r3, [r6, #0]
 801af4c:	fbb3 f3f4 	udiv	r3, r3, r4
 801af50:	1aeb      	subs	r3, r5, r3
 801af52:	9200      	str	r2, [sp, #0]
 801af54:	b29b      	uxth	r3, r3
 801af56:	22fd      	movs	r2, #253	; 0xfd
 801af58:	2146      	movs	r1, #70	; 0x46
 801af5a:	202d      	movs	r0, #45	; 0x2d
 801af5c:	e7b3      	b.n	801aec6 <Spectral_PAR_Range+0x96>
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
 801af5e:	8829      	ldrh	r1, [r5, #0]
 801af60:	f8b8 3000 	ldrh.w	r3, [r8]
 801af64:	fbb1 f1f4 	udiv	r1, r1, r4
 801af68:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801af6c:	fbb3 f3f4 	udiv	r3, r3, r4
 801af70:	314a      	adds	r1, #74	; 0x4a
 801af72:	334a      	adds	r3, #74	; 0x4a
 801af74:	9200      	str	r2, [sp, #0]
 801af76:	b29b      	uxth	r3, r3
 801af78:	22e3      	movs	r2, #227	; 0xe3
 801af7a:	b289      	uxth	r1, r1
 801af7c:	2013      	movs	r0, #19
 801af7e:	f001 f83e 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
 801af82:	883b      	ldrh	r3, [r7, #0]
 801af84:	f8b8 1000 	ldrh.w	r1, [r8]
 801af88:	fbb3 f3f4 	udiv	r3, r3, r4
 801af8c:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801af90:	334a      	adds	r3, #74	; 0x4a
 801af92:	fbb1 f1f4 	udiv	r1, r1, r4
 801af96:	314a      	adds	r1, #74	; 0x4a
 801af98:	9200      	str	r2, [sp, #0]
 801af9a:	b29b      	uxth	r3, r3
 801af9c:	22e3      	movs	r2, #227	; 0xe3
 801af9e:	b289      	uxth	r1, r1
 801afa0:	2013      	movs	r0, #19
 801afa2:	f001 f82c 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
 801afa6:	8839      	ldrh	r1, [r7, #0]
 801afa8:	8833      	ldrh	r3, [r6, #0]
 801afaa:	fbb1 f1f4 	udiv	r1, r1, r4
 801afae:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801afb2:	fbb3 f3f4 	udiv	r3, r3, r4
 801afb6:	314a      	adds	r1, #74	; 0x4a
 801afb8:	334a      	adds	r3, #74	; 0x4a
 801afba:	9200      	str	r2, [sp, #0]
 801afbc:	b29b      	uxth	r3, r3
 801afbe:	22e3      	movs	r2, #227	; 0xe3
 801afc0:	b289      	uxth	r1, r1
 801afc2:	2013      	movs	r0, #19
 801afc4:	f001 f81b 	bl	801bffe <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801afc8:	f646 0382 	movw	r3, #26754	; 0x6882
 801afcc:	8831      	ldrh	r1, [r6, #0]
 801afce:	fbb1 f1f4 	udiv	r1, r1, r4
 801afd2:	314a      	adds	r1, #74	; 0x4a
 801afd4:	9300      	str	r3, [sp, #0]
 801afd6:	22e3      	movs	r2, #227	; 0xe3
 801afd8:	f240 1397 	movw	r3, #407	; 0x197
 801afdc:	b289      	uxth	r1, r1
 801afde:	2013      	movs	r0, #19
 801afe0:	e771      	b.n	801aec6 <Spectral_PAR_Range+0x96>
 801afe2:	bf00      	nop
 801afe4:	20095a7a 	.word	0x20095a7a
 801afe8:	20095ca0 	.word	0x20095ca0
 801afec:	20095a78 	.word	0x20095a78
 801aff0:	20095b3c 	.word	0x20095b3c

0801aff4 <Spectral_Axes_Text>:


void Spectral_Axes_Text(uint8_t direction){
 801aff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char buffer[4] = {0};
 801aff6:	ac02      	add	r4, sp, #8
 801aff8:	2300      	movs	r3, #0
 801affa:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	if (direction == 0x00)
 801affe:	4606      	mov	r6, r0
 801b000:	4d67      	ldr	r5, [pc, #412]	; (801b1a0 <Spectral_Axes_Text+0x1ac>)
 801b002:	2800      	cmp	r0, #0
 801b004:	d162      	bne.n	801b0cc <Spectral_Axes_Text+0xd8>
	{
		TFT_SetTextColor(TFT_White);
 801b006:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b00a:	f001 fa27 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801b00e:	2063      	movs	r0, #99	; 0x63
 801b010:	f001 fa2a 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801b014:	4863      	ldr	r0, [pc, #396]	; (801b1a4 <Spectral_Axes_Text+0x1b0>)
 801b016:	f001 fa1b 	bl	801c450 <TFT_SetFont>

		TFT_DrawChar(5, 410, '0');
 801b01a:	2230      	movs	r2, #48	; 0x30
 801b01c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801b020:	2005      	movs	r0, #5
 801b022:	f001 fadf 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(7, 257, '.');
 801b026:	222e      	movs	r2, #46	; 0x2e
 801b028:	f240 1101 	movw	r1, #257	; 0x101
 801b02c:	2007      	movs	r0, #7
 801b02e:	f001 fad9 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(3, 257, '0');
 801b032:	2230      	movs	r2, #48	; 0x30
 801b034:	f240 1101 	movw	r1, #257	; 0x101
 801b038:	2003      	movs	r0, #3
 801b03a:	f001 fad3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(11, 257, '5');
 801b03e:	2235      	movs	r2, #53	; 0x35
 801b040:	f240 1101 	movw	r1, #257	; 0x101
 801b044:	200b      	movs	r0, #11
 801b046:	f001 facd 	bl	801c5e4 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 801b04a:	2231      	movs	r2, #49	; 0x31
 801b04c:	2169      	movs	r1, #105	; 0x69
 801b04e:	4630      	mov	r0, r6
 801b050:	f001 fac8 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '.');
 801b054:	222e      	movs	r2, #46	; 0x2e
 801b056:	2169      	movs	r1, #105	; 0x69
 801b058:	2004      	movs	r0, #4
 801b05a:	f001 fac3 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 801b05e:	2230      	movs	r2, #48	; 0x30
 801b060:	2169      	movs	r1, #105	; 0x69
 801b062:	2009      	movs	r0, #9
 801b064:	f001 fabe 	bl	801c5e4 <TFT_DrawChar>
		
		
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801b068:	882a      	ldrh	r2, [r5, #0]
 801b06a:	494f      	ldr	r1, [pc, #316]	; (801b1a8 <Spectral_Axes_Text+0x1b4>)
 801b06c:	4620      	mov	r0, r4
 801b06e:	f004 fccb 	bl	801fa08 <sprintf>
		TFT_DisplayString(11, 416, (uint8_t *)buffer, LEFT_MODE);
 801b072:	2303      	movs	r3, #3
 801b074:	4622      	mov	r2, r4
 801b076:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b07a:	200b      	movs	r0, #11
 801b07c:	f001 fb0a 	bl	801c694 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801b080:	886a      	ldrh	r2, [r5, #2]
 801b082:	4949      	ldr	r1, [pc, #292]	; (801b1a8 <Spectral_Axes_Text+0x1b4>)
 801b084:	4620      	mov	r0, r4
 801b086:	f004 fcbf 	bl	801fa08 <sprintf>
		TFT_DisplayString(85, 416, (uint8_t *)buffer, LEFT_MODE);
 801b08a:	2303      	movs	r3, #3
 801b08c:	4622      	mov	r2, r4
 801b08e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b092:	2055      	movs	r0, #85	; 0x55
 801b094:	f001 fafe 	bl	801c694 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801b098:	88aa      	ldrh	r2, [r5, #4]
 801b09a:	4943      	ldr	r1, [pc, #268]	; (801b1a8 <Spectral_Axes_Text+0x1b4>)
 801b09c:	4620      	mov	r0, r4
 801b09e:	f004 fcb3 	bl	801fa08 <sprintf>
		TFT_DisplayString(165, 416, (uint8_t *)buffer, LEFT_MODE);
 801b0a2:	2303      	movs	r3, #3
 801b0a4:	4622      	mov	r2, r4
 801b0a6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b0aa:	20a5      	movs	r0, #165	; 0xa5
 801b0ac:	f001 faf2 	bl	801c694 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801b0b0:	88ea      	ldrh	r2, [r5, #6]
 801b0b2:	493d      	ldr	r1, [pc, #244]	; (801b1a8 <Spectral_Axes_Text+0x1b4>)
 801b0b4:	4620      	mov	r0, r4
 801b0b6:	f004 fca7 	bl	801fa08 <sprintf>
		TFT_DisplayString(245, 416, (uint8_t *)buffer, LEFT_MODE);
 801b0ba:	2303      	movs	r3, #3
 801b0bc:	4622      	mov	r2, r4
 801b0be:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b0c2:	20f5      	movs	r0, #245	; 0xf5
 801b0c4:	f001 fae6 	bl	801c694 <TFT_DisplayString>
		TFT_DrawChar(62, 43, '.');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 801b0c8:	b003      	add	sp, #12
 801b0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0cc:	4f37      	ldr	r7, [pc, #220]	; (801b1ac <Spectral_Axes_Text+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 801b0ce:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 801b0d0:	bf14      	ite	ne
 801b0d2:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 801b0d4:	7038      	strbeq	r0, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801b0d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 801b0da:	bf18      	it	ne
 801b0dc:	703b      	strbne	r3, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801b0de:	f001 f9bd 	bl	801c45c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801b0e2:	2063      	movs	r0, #99	; 0x63
 801b0e4:	f001 f9c0 	bl	801c468 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801b0e8:	482e      	ldr	r0, [pc, #184]	; (801b1a4 <Spectral_Axes_Text+0x1b0>)
 801b0ea:	f001 f9b1 	bl	801c450 <TFT_SetFont>
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801b0ee:	882a      	ldrh	r2, [r5, #0]
 801b0f0:	492d      	ldr	r1, [pc, #180]	; (801b1a8 <Spectral_Axes_Text+0x1b4>)
 801b0f2:	4620      	mov	r0, r4
 801b0f4:	f004 fc88 	bl	801fa08 <sprintf>
		TFT_DisplayString(65, 258, (uint8_t *)buffer, LEFT_MODE);
 801b0f8:	2303      	movs	r3, #3
 801b0fa:	4622      	mov	r2, r4
 801b0fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 801b100:	2041      	movs	r0, #65	; 0x41
 801b102:	f001 fac7 	bl	801c694 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801b106:	886a      	ldrh	r2, [r5, #2]
 801b108:	4927      	ldr	r1, [pc, #156]	; (801b1a8 <Spectral_Axes_Text+0x1b4>)
 801b10a:	4620      	mov	r0, r4
 801b10c:	f004 fc7c 	bl	801fa08 <sprintf>
		TFT_DisplayString(165, 258, (uint8_t *)buffer, LEFT_MODE);
 801b110:	2303      	movs	r3, #3
 801b112:	4622      	mov	r2, r4
 801b114:	f44f 7181 	mov.w	r1, #258	; 0x102
 801b118:	20a5      	movs	r0, #165	; 0xa5
 801b11a:	f001 fabb 	bl	801c694 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801b11e:	88aa      	ldrh	r2, [r5, #4]
 801b120:	4921      	ldr	r1, [pc, #132]	; (801b1a8 <Spectral_Axes_Text+0x1b4>)
 801b122:	4620      	mov	r0, r4
 801b124:	f004 fc70 	bl	801fa08 <sprintf>
		TFT_DisplayString(265, 258, (uint8_t *)buffer, LEFT_MODE);
 801b128:	2303      	movs	r3, #3
 801b12a:	4622      	mov	r2, r4
 801b12c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801b130:	f240 1009 	movw	r0, #265	; 0x109
 801b134:	f001 faae 	bl	801c694 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801b138:	88ea      	ldrh	r2, [r5, #6]
 801b13a:	491b      	ldr	r1, [pc, #108]	; (801b1a8 <Spectral_Axes_Text+0x1b4>)
 801b13c:	4620      	mov	r0, r4
 801b13e:	f004 fc63 	bl	801fa08 <sprintf>
		TFT_DisplayString(365, 258, (uint8_t *)buffer, LEFT_MODE);
 801b142:	2303      	movs	r3, #3
 801b144:	4622      	mov	r2, r4
 801b146:	f44f 7181 	mov.w	r1, #258	; 0x102
 801b14a:	f240 106d 	movw	r0, #365	; 0x16d
 801b14e:	f001 faa1 	bl	801c694 <TFT_DisplayString>
		TFT_DrawChar(65, 250, '0');
 801b152:	2230      	movs	r2, #48	; 0x30
 801b154:	21fa      	movs	r1, #250	; 0xfa
 801b156:	2041      	movs	r0, #65	; 0x41
 801b158:	f001 fa44 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(57, 149, '0');
 801b15c:	2230      	movs	r2, #48	; 0x30
 801b15e:	2195      	movs	r1, #149	; 0x95
 801b160:	2039      	movs	r0, #57	; 0x39
 801b162:	f001 fa3f 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(62, 149, '.');
 801b166:	222e      	movs	r2, #46	; 0x2e
 801b168:	2195      	movs	r1, #149	; 0x95
 801b16a:	203e      	movs	r0, #62	; 0x3e
 801b16c:	f001 fa3a 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(67, 149, '5');
 801b170:	2235      	movs	r2, #53	; 0x35
 801b172:	2195      	movs	r1, #149	; 0x95
 801b174:	2043      	movs	r0, #67	; 0x43
 801b176:	f001 fa35 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 801b17a:	2231      	movs	r2, #49	; 0x31
 801b17c:	212b      	movs	r1, #43	; 0x2b
 801b17e:	2039      	movs	r0, #57	; 0x39
 801b180:	f001 fa30 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '.');
 801b184:	222e      	movs	r2, #46	; 0x2e
 801b186:	212b      	movs	r1, #43	; 0x2b
 801b188:	203e      	movs	r0, #62	; 0x3e
 801b18a:	f001 fa2b 	bl	801c5e4 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 801b18e:	2230      	movs	r2, #48	; 0x30
 801b190:	212b      	movs	r1, #43	; 0x2b
 801b192:	2043      	movs	r0, #67	; 0x43
 801b194:	f001 fa26 	bl	801c5e4 <TFT_DrawChar>
		TFT_direction = 0x00;
 801b198:	2300      	movs	r3, #0
 801b19a:	703b      	strb	r3, [r7, #0]
}
 801b19c:	e794      	b.n	801b0c8 <Spectral_Axes_Text+0xd4>
 801b19e:	bf00      	nop
 801b1a0:	20055938 	.word	0x20055938
 801b1a4:	20000210 	.word	0x20000210
 801b1a8:	080314ba 	.word	0x080314ba
 801b1ac:	20005690 	.word	0x20005690

0801b1b0 <Spectral_DrawGraph_Const>:
		memset(graph_data_old, 0, sizeof(graph_data_old));	
}


void Spectral_DrawGraph_Const(uint16_t ZeroX, uint16_t ZeroY, uint16_t *GraphData, uint16_t color, uint8_t direction)
{
 801b1b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1b4:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		uint16_t i, j = 0;
		uint16_t graph_data[335];
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b1b8:	f1b8 0f00 	cmp.w	r8, #0
 801b1bc:	bf0c      	ite	eq
 801b1be:	f04f 09f0 	moveq.w	r9, #240	; 0xf0
 801b1c2:	f44f 79a5 	movne.w	r9, #330	; 0x14a
{
 801b1c6:	4682      	mov	sl, r0
 801b1c8:	461f      	mov	r7, r3
 801b1ca:	4614      	mov	r4, r2
 801b1cc:	eb02 0649 	add.w	r6, r2, r9, lsl #1
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b1d0:	2500      	movs	r5, #0
		uint8_t	step = (direction == 0x00)? 4 :3;
	
		for(i = 0; i < graph_lenht; i++)
	{
		if(direction == 0x00){
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801b1d2:	f100 0b01 	add.w	fp, r0, #1
 801b1d6:	b2a8      	uxth	r0, r5
		if(direction == 0x00){
 801b1d8:	f1b8 0f00 	cmp.w	r8, #0
 801b1dc:	d10e      	bne.n	801b1fc <Spectral_DrawGraph_Const+0x4c>
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801b1de:	8863      	ldrh	r3, [r4, #2]
 801b1e0:	8821      	ldrh	r1, [r4, #0]
 801b1e2:	eb00 020b 	add.w	r2, r0, fp
 801b1e6:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b1ea:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801b1ee:	4450      	add	r0, sl
		else if(direction == 0x01)
		{
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801b1f0:	9700      	str	r7, [sp, #0]
 801b1f2:	b29b      	uxth	r3, r3
 801b1f4:	b292      	uxth	r2, r2
 801b1f6:	b289      	uxth	r1, r1
 801b1f8:	b280      	uxth	r0, r0
 801b1fa:	e013      	b.n	801b224 <Spectral_DrawGraph_Const+0x74>
		else if(direction == 0x01)
 801b1fc:	f1b8 0f01 	cmp.w	r8, #1
 801b200:	d11d      	bne.n	801b23e <Spectral_DrawGraph_Const+0x8e>
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801b202:	8872      	ldrh	r2, [r6, #2]
 801b204:	f8b6 e000 	ldrh.w	lr, [r6]
 801b208:	9700      	str	r7, [sp, #0]
 801b20a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801b20e:	f100 0149 	add.w	r1, r0, #73	; 0x49
 801b212:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801b216:	f1ce 0efd 	rsb	lr, lr, #253	; 0xfd
 801b21a:	b29b      	uxth	r3, r3
 801b21c:	b292      	uxth	r2, r2
 801b21e:	b289      	uxth	r1, r1
 801b220:	fa1f f08e 	uxth.w	r0, lr
 801b224:	3501      	adds	r5, #1
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801b226:	f000 fe8d 	bl	801bf44 <TFT_DrawLine>
		for(i = 0; i < graph_lenht; i++)
 801b22a:	b2ab      	uxth	r3, r5
 801b22c:	4599      	cmp	r9, r3
 801b22e:	f104 0402 	add.w	r4, r4, #2
 801b232:	f1a6 0602 	sub.w	r6, r6, #2
 801b236:	d8ce      	bhi.n	801b1d6 <Spectral_DrawGraph_Const+0x26>
	}
}
 801b238:	b003      	add	sp, #12
 801b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801b23e:	f100 034d 	add.w	r3, r0, #77	; 0x4d
 801b242:	8862      	ldrh	r2, [r4, #2]
 801b244:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 801b248:	8820      	ldrh	r0, [r4, #0]
 801b24a:	3212      	adds	r2, #18
 801b24c:	3012      	adds	r0, #18
 801b24e:	e7cf      	b.n	801b1f0 <Spectral_DrawGraph_Const+0x40>

0801b250 <Spectral_DrawGraph_Line2>:
				flag_spectral = 0;}
					}
}

void Spectral_DrawGraph_Line2(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint16_t color, uint8_t direction)
{
 801b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b254:	b087      	sub	sp, #28
 801b256:	4691      	mov	r9, r2
 801b258:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801b25c:	9004      	str	r0, [sp, #16]
    float buf_pix;
//    static uint16_t
    uint16_t i, j = 0;
    static uint16_t GraphData_Prev[355];
    uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b25e:	2e00      	cmp	r6, #0
 801b260:	bf0c      	ite	eq
 801b262:	23f0      	moveq	r3, #240	; 0xf0
 801b264:	f44f 73a5 	movne.w	r3, #330	; 0x14a
 801b268:	9303      	str	r3, [sp, #12]
    uint8_t    step = (direction == 0x00)? 4 :3;
    uint16_t  jj = 0, ii = 0;

//    screen_cnt++;
//	screen_cnt > 200 ||
    if( direction != Rotation_Screen_Spectral_Old2){
 801b26a:	4bc9      	ldr	r3, [pc, #804]	; (801b590 <Spectral_DrawGraph_Line2+0x340>)
 801b26c:	781a      	ldrb	r2, [r3, #0]
 801b26e:	42b2      	cmp	r2, r6
 801b270:	d01b      	beq.n	801b2aa <Spectral_DrawGraph_Line2+0x5a>
			Rotation_Screen_Spectral_Old2 = direction;
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801b272:	2463      	movs	r4, #99	; 0x63
			Rotation_Screen_Spectral_Old2 = direction;
 801b274:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801b276:	f240 120f 	movw	r2, #271	; 0x10f
 801b27a:	f240 13a5 	movw	r3, #421	; 0x1a5
 801b27e:	9400      	str	r4, [sp, #0]
 801b280:	2137      	movs	r1, #55	; 0x37
 801b282:	2001      	movs	r0, #1
 801b284:	f000 febb 	bl	801bffe <TFT_FillRectangle>

        if(Graph_Field&PPF_Bands)
 801b288:	4bc2      	ldr	r3, [pc, #776]	; (801b594 <Spectral_DrawGraph_Line2+0x344>)
 801b28a:	781b      	ldrb	r3, [r3, #0]
 801b28c:	07db      	lsls	r3, r3, #31
 801b28e:	f140 8087 	bpl.w	801b3a0 <Spectral_DrawGraph_Line2+0x150>
        {
            Spectral_PAR_Range(direction);
 801b292:	4630      	mov	r0, r6
 801b294:	f7ff fdcc 	bl	801ae30 <Spectral_PAR_Range>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
        }

//    Spectral_Axes(direction);
//    Spectral_Axes_Text(direction);
	memset(GraphData_Prev, 0, sizeof(GraphData_Prev));
 801b298:	f240 22c6 	movw	r2, #710	; 0x2c6
 801b29c:	2100      	movs	r1, #0
 801b29e:	48be      	ldr	r0, [pc, #760]	; (801b598 <Spectral_DrawGraph_Line2+0x348>)
 801b2a0:	f004 fba9 	bl	801f9f6 <memset>
    screen_cnt = 0;
 801b2a4:	4bbd      	ldr	r3, [pc, #756]	; (801b59c <Spectral_DrawGraph_Line2+0x34c>)
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	801a      	strh	r2, [r3, #0]
    }
    flag_refresh = 1;
 801b2aa:	4bbd      	ldr	r3, [pc, #756]	; (801b5a0 <Spectral_DrawGraph_Line2+0x350>)
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);

//          DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
            flag_spectral = 0;
        } else if(direction == 0x02)
				{flag_spectral = 1; 
 801b2ac:	f8df b300 	ldr.w	fp, [pc, #768]	; 801b5b0 <Spectral_DrawGraph_Line2+0x360>
 801b2b0:	4dbc      	ldr	r5, [pc, #752]	; (801b5a4 <Spectral_DrawGraph_Line2+0x354>)
    flag_refresh = 1;
 801b2b2:	2401      	movs	r4, #1
 801b2b4:	701c      	strb	r4, [r3, #0]
    i_coord = 0;
 801b2b6:	4bbc      	ldr	r3, [pc, #752]	; (801b5a8 <Spectral_DrawGraph_Line2+0x358>)
 801b2b8:	2200      	movs	r2, #0
 801b2ba:	801a      	strh	r2, [r3, #0]
 801b2bc:	1c63      	adds	r3, r4, #1
        if(direction == 0x00){
 801b2be:	2e00      	cmp	r6, #0
 801b2c0:	f040 8098 	bne.w	801b3f4 <Spectral_DrawGraph_Line2+0x1a4>
            flag_spectral = 1;
 801b2c4:	2201      	movs	r2, #1
            			if((i+4)%40 == 0) i++;
 801b2c6:	1d20      	adds	r0, r4, #4
 801b2c8:	2128      	movs	r1, #40	; 0x28
            flag_spectral = 1;
 801b2ca:	f88b 2000 	strb.w	r2, [fp]
            			if((i+4)%40 == 0) i++;
 801b2ce:	fb90 f2f1 	sdiv	r2, r0, r1
 801b2d2:	fb01 0212 	mls	r2, r1, r2, r0
 801b2d6:	b902      	cbnz	r2, 801b2da <Spectral_DrawGraph_Line2+0x8a>
 801b2d8:	b29c      	uxth	r4, r3
            			if(412-GraphData[i] < 181)
 801b2da:	0063      	lsls	r3, r4, #1
 801b2dc:	9305      	str	r3, [sp, #20]
 801b2de:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801b2e2:	9a04      	ldr	r2, [sp, #16]
 801b2e4:	4fb1      	ldr	r7, [pc, #708]	; (801b5ac <Spectral_DrawGraph_Line2+0x35c>)
 801b2e6:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b2ea:	2bb4      	cmp	r3, #180	; 0xb4
 801b2ec:	eb04 0a02 	add.w	sl, r4, r2
 801b2f0:	b299      	uxth	r1, r3
 801b2f2:	dc5f      	bgt.n	801b3b4 <Spectral_DrawGraph_Line2+0x164>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 180, Vertical_color_dara[i]);
 801b2f4:	fa1f f88a 	uxth.w	r8, sl
 801b2f8:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b2fc:	9300      	str	r3, [sp, #0]
 801b2fe:	4642      	mov	r2, r8
 801b300:	23b4      	movs	r3, #180	; 0xb4
 801b302:	4640      	mov	r0, r8
 801b304:	f001 fa0e 	bl	801c724 <DrawLineX>
            				DrawLineX(ZeroX+i, 182, ZeroX+i, 256, Vertical_color_dara[i]);
 801b308:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b30c:	9300      	str	r3, [sp, #0]
 801b30e:	4642      	mov	r2, r8
 801b310:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b314:	21b6      	movs	r1, #182	; 0xb6
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801b316:	4640      	mov	r0, r8
 801b318:	f001 fa04 	bl	801c724 <DrawLineX>
							DrawLineX(ZeroX+i, 258, ZeroX+i, 333, Vertical_color_dara[i]);
 801b31c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b320:	9300      	str	r3, [sp, #0]
 801b322:	4642      	mov	r2, r8
 801b324:	f240 134d 	movw	r3, #333	; 0x14d
 801b328:	f44f 7181 	mov.w	r1, #258	; 0x102
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801b32c:	4640      	mov	r0, r8
 801b32e:	f001 f9f9 	bl	801c724 <DrawLineX>
							DrawLineX(ZeroX+i, 335, ZeroX+i, 411, Vertical_color_dara[i]);
 801b332:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b336:	9300      	str	r3, [sp, #0]
 801b338:	4642      	mov	r2, r8
 801b33a:	f240 139b 	movw	r3, #411	; 0x19b
 801b33e:	f240 114f 	movw	r1, #335	; 0x14f
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801b342:	4610      	mov	r0, r2
 801b344:	f001 f9ee 	bl	801c724 <DrawLineX>
						if(GraphData_Prev[i]>GraphData[i])	DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 412 - GraphData_Prev[i], TFT_Black_Bkgr);
 801b348:	4b93      	ldr	r3, [pc, #588]	; (801b598 <Spectral_DrawGraph_Line2+0x348>)
 801b34a:	0062      	lsls	r2, r4, #1
 801b34c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801b350:	f839 1002 	ldrh.w	r1, [r9, r2]
 801b354:	428b      	cmp	r3, r1
 801b356:	d90c      	bls.n	801b372 <Spectral_DrawGraph_Line2+0x122>
 801b358:	2063      	movs	r0, #99	; 0x63
 801b35a:	fa1f f28a 	uxth.w	r2, sl
 801b35e:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b362:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801b366:	9000      	str	r0, [sp, #0]
 801b368:	b29b      	uxth	r3, r3
 801b36a:	b289      	uxth	r1, r1
 801b36c:	4610      	mov	r0, r2
				}

//				DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);


				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801b36e:	f001 f9d9 	bl	801c724 <DrawLineX>

//				DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
				flag_spectral = 0;}
 801b372:	2300      	movs	r3, #0
 801b374:	f88b 3000 	strb.w	r3, [fp]
    for(i = 1; i < graph_lenht; i++)
 801b378:	3401      	adds	r4, #1
 801b37a:	9b03      	ldr	r3, [sp, #12]
 801b37c:	b2a4      	uxth	r4, r4
 801b37e:	42a3      	cmp	r3, r4
 801b380:	d89c      	bhi.n	801b2bc <Spectral_DrawGraph_Line2+0x6c>
					}
    memcpy(GraphData_Prev, GraphData, sizeof(GraphData_Prev));
 801b382:	f240 22c6 	movw	r2, #710	; 0x2c6
 801b386:	4649      	mov	r1, r9
 801b388:	4883      	ldr	r0, [pc, #524]	; (801b598 <Spectral_DrawGraph_Line2+0x348>)
 801b38a:	f004 fb29 	bl	801f9e0 <memcpy>
    Spectral_Axes(direction);
 801b38e:	4630      	mov	r0, r6
 801b390:	f7ff fc80 	bl	801ac94 <Spectral_Axes>
	Spectral_Axes_Text(direction);
 801b394:	4630      	mov	r0, r6
}
 801b396:	b007      	add	sp, #28
 801b398:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Spectral_Axes_Text(direction);
 801b39c:	f7ff be2a 	b.w	801aff4 <Spectral_Axes_Text>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
 801b3a0:	9400      	str	r4, [sp, #0]
 801b3a2:	f240 13a5 	movw	r3, #421	; 0x1a5
 801b3a6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801b3aa:	2137      	movs	r1, #55	; 0x37
 801b3ac:	2005      	movs	r0, #5
 801b3ae:	f000 fe26 	bl	801bffe <TFT_FillRectangle>
 801b3b2:	e771      	b.n	801b298 <Spectral_DrawGraph_Line2+0x48>
            			else if(412-GraphData[i] < 257)
 801b3b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b3b8:	dc08      	bgt.n	801b3cc <Spectral_DrawGraph_Line2+0x17c>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801b3ba:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b3be:	9300      	str	r3, [sp, #0]
 801b3c0:	fa1f f88a 	uxth.w	r8, sl
 801b3c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b3c8:	4642      	mov	r2, r8
 801b3ca:	e7a4      	b.n	801b316 <Spectral_DrawGraph_Line2+0xc6>
            			else if(412-GraphData[i] < 334)
 801b3cc:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 801b3d0:	da08      	bge.n	801b3e4 <Spectral_DrawGraph_Line2+0x194>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801b3d2:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b3d6:	9300      	str	r3, [sp, #0]
 801b3d8:	fa1f f88a 	uxth.w	r8, sl
 801b3dc:	f240 134d 	movw	r3, #333	; 0x14d
 801b3e0:	4642      	mov	r2, r8
 801b3e2:	e7a3      	b.n	801b32c <Spectral_DrawGraph_Line2+0xdc>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801b3e4:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b3e8:	9300      	str	r3, [sp, #0]
 801b3ea:	fa1f f28a 	uxth.w	r2, sl
 801b3ee:	f240 139b 	movw	r3, #411	; 0x19b
 801b3f2:	e7a6      	b.n	801b342 <Spectral_DrawGraph_Line2+0xf2>
        else if(direction == 0x01)
 801b3f4:	2e01      	cmp	r6, #1
 801b3f6:	d16a      	bne.n	801b4ce <Spectral_DrawGraph_Line2+0x27e>
            if((i+18)%50 == 0) i++;
 801b3f8:	f104 0012 	add.w	r0, r4, #18
 801b3fc:	2132      	movs	r1, #50	; 0x32
 801b3fe:	fb90 f2f1 	sdiv	r2, r0, r1
 801b402:	fb01 0212 	mls	r2, r1, r2, r0
            flag_spectral = 1;
 801b406:	f88b 6000 	strb.w	r6, [fp]
            if((i+18)%50 == 0) i++;
 801b40a:	b902      	cbnz	r2, 801b40e <Spectral_DrawGraph_Line2+0x1be>
 801b40c:	b29c      	uxth	r4, r3
            if(253 - GraphData[graph_lenht-i] < 98)
 801b40e:	9b03      	ldr	r3, [sp, #12]
 801b410:	eba3 0804 	sub.w	r8, r3, r4
 801b414:	f104 0748 	add.w	r7, r4, #72	; 0x48
 801b418:	f839 3018 	ldrh.w	r3, [r9, r8, lsl #1]
 801b41c:	f1c3 03fd 	rsb	r3, r3, #253	; 0xfd
 801b420:	2b61      	cmp	r3, #97	; 0x61
 801b422:	b298      	uxth	r0, r3
 801b424:	dc38      	bgt.n	801b498 <Spectral_DrawGraph_Line2+0x248>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 97, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b426:	b2bf      	uxth	r7, r7
 801b428:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b42c:	9300      	str	r3, [sp, #0]
 801b42e:	2261      	movs	r2, #97	; 0x61
 801b430:	463b      	mov	r3, r7
 801b432:	4639      	mov	r1, r7
 801b434:	f001 f976 	bl	801c724 <DrawLineX>
            	DrawLineX(99, 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b438:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b43c:	9300      	str	r3, [sp, #0]
 801b43e:	2296      	movs	r2, #150	; 0x96
 801b440:	463b      	mov	r3, r7
 801b442:	4639      	mov	r1, r7
 801b444:	2063      	movs	r0, #99	; 0x63
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b446:	f001 f96d 	bl	801c724 <DrawLineX>
				DrawLineX(152, 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b44a:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b44e:	9300      	str	r3, [sp, #0]
 801b450:	22cb      	movs	r2, #203	; 0xcb
 801b452:	463b      	mov	r3, r7
 801b454:	4639      	mov	r1, r7
 801b456:	2098      	movs	r0, #152	; 0x98
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b458:	f001 f964 	bl	801c724 <DrawLineX>
				DrawLineX(205, 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b45c:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b460:	9300      	str	r3, [sp, #0]
 801b462:	22fc      	movs	r2, #252	; 0xfc
 801b464:	463b      	mov	r3, r7
 801b466:	4639      	mov	r1, r7
 801b468:	20cd      	movs	r0, #205	; 0xcd
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b46a:	f001 f95b 	bl	801c724 <DrawLineX>
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);
 801b46e:	4b4a      	ldr	r3, [pc, #296]	; (801b598 <Spectral_DrawGraph_Line2+0x348>)
 801b470:	f839 0018 	ldrh.w	r0, [r9, r8, lsl #1]
 801b474:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
 801b478:	4282      	cmp	r2, r0
 801b47a:	f67f af7a 	bls.w	801b372 <Spectral_DrawGraph_Line2+0x122>
 801b47e:	f104 0348 	add.w	r3, r4, #72	; 0x48
 801b482:	b29b      	uxth	r3, r3
 801b484:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801b488:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801b48c:	2163      	movs	r1, #99	; 0x63
 801b48e:	9100      	str	r1, [sp, #0]
 801b490:	b292      	uxth	r2, r2
 801b492:	4619      	mov	r1, r3
 801b494:	b280      	uxth	r0, r0
 801b496:	e76a      	b.n	801b36e <Spectral_DrawGraph_Line2+0x11e>
            else if(253 - GraphData[graph_lenht-i] < 151)
 801b498:	2b96      	cmp	r3, #150	; 0x96
 801b49a:	dc07      	bgt.n	801b4ac <Spectral_DrawGraph_Line2+0x25c>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b49c:	b2bf      	uxth	r7, r7
 801b49e:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b4a2:	9300      	str	r3, [sp, #0]
 801b4a4:	2296      	movs	r2, #150	; 0x96
 801b4a6:	463b      	mov	r3, r7
 801b4a8:	4639      	mov	r1, r7
 801b4aa:	e7cc      	b.n	801b446 <Spectral_DrawGraph_Line2+0x1f6>
            else if(253 - GraphData[graph_lenht-i] < 204)
 801b4ac:	2bcb      	cmp	r3, #203	; 0xcb
 801b4ae:	dc07      	bgt.n	801b4c0 <Spectral_DrawGraph_Line2+0x270>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b4b0:	b2bf      	uxth	r7, r7
 801b4b2:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b4b6:	9300      	str	r3, [sp, #0]
 801b4b8:	22cb      	movs	r2, #203	; 0xcb
 801b4ba:	463b      	mov	r3, r7
 801b4bc:	4639      	mov	r1, r7
 801b4be:	e7cb      	b.n	801b458 <Spectral_DrawGraph_Line2+0x208>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b4c0:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
 801b4c4:	9200      	str	r2, [sp, #0]
 801b4c6:	b2bb      	uxth	r3, r7
 801b4c8:	22fc      	movs	r2, #252	; 0xfc
 801b4ca:	4619      	mov	r1, r3
 801b4cc:	e7cd      	b.n	801b46a <Spectral_DrawGraph_Line2+0x21a>
        } else if(direction == 0x02)
 801b4ce:	2e02      	cmp	r6, #2
 801b4d0:	f47f af52 	bne.w	801b378 <Spectral_DrawGraph_Line2+0x128>
				{flag_spectral = 1; 
 801b4d4:	2201      	movs	r2, #1
				if((i+2)%50 == 0) i++;
 801b4d6:	1ca0      	adds	r0, r4, #2
 801b4d8:	2132      	movs	r1, #50	; 0x32
				{flag_spectral = 1; 
 801b4da:	f88b 2000 	strb.w	r2, [fp]
				if((i+2)%50 == 0) i++;
 801b4de:	fb90 f2f1 	sdiv	r2, r0, r1
 801b4e2:	fb01 0212 	mls	r2, r1, r2, r0
 801b4e6:	b902      	cbnz	r2, 801b4ea <Spectral_DrawGraph_Line2+0x29a>
 801b4e8:	b29c      	uxth	r4, r3
				if(GraphData[i]+18 > 174)
 801b4ea:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801b4ee:	2b9c      	cmp	r3, #156	; 0x9c
 801b4f0:	ea4f 0844 	mov.w	r8, r4, lsl #1
 801b4f4:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 801b4f8:	f103 0012 	add.w	r0, r3, #18
 801b4fc:	dd32      	ble.n	801b564 <Spectral_DrawGraph_Line2+0x314>
					DrawLineX(GraphData[i]+18, 76+i, 175, 76+i, Horizontal_color_dara[i]);
 801b4fe:	b2bf      	uxth	r7, r7
 801b500:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b504:	9300      	str	r3, [sp, #0]
 801b506:	22af      	movs	r2, #175	; 0xaf
 801b508:	463b      	mov	r3, r7
 801b50a:	4639      	mov	r1, r7
 801b50c:	b280      	uxth	r0, r0
 801b50e:	f001 f909 	bl	801c724 <DrawLineX>
					DrawLineX(173, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801b512:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b516:	9300      	str	r3, [sp, #0]
 801b518:	227a      	movs	r2, #122	; 0x7a
 801b51a:	463b      	mov	r3, r7
 801b51c:	4639      	mov	r1, r7
 801b51e:	20ad      	movs	r0, #173	; 0xad
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801b520:	f001 f900 	bl	801c724 <DrawLineX>
					DrawLineX(120, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801b524:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b528:	9300      	str	r3, [sp, #0]
 801b52a:	2245      	movs	r2, #69	; 0x45
 801b52c:	463b      	mov	r3, r7
 801b52e:	4639      	mov	r1, r7
 801b530:	2078      	movs	r0, #120	; 0x78
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801b532:	f001 f8f7 	bl	801c724 <DrawLineX>
					DrawLineX(67, 76+i, 19, 76+i, Horizontal_color_dara[i]);
 801b536:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b53a:	9300      	str	r3, [sp, #0]
 801b53c:	2213      	movs	r2, #19
 801b53e:	463b      	mov	r3, r7
 801b540:	4639      	mov	r1, r7
 801b542:	2043      	movs	r0, #67	; 0x43
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801b544:	f001 f8ee 	bl	801c724 <DrawLineX>
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801b548:	4b13      	ldr	r3, [pc, #76]	; (801b598 <Spectral_DrawGraph_Line2+0x348>)
 801b54a:	f839 0008 	ldrh.w	r0, [r9, r8]
 801b54e:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 801b552:	4282      	cmp	r2, r0
 801b554:	f67f af0d 	bls.w	801b372 <Spectral_DrawGraph_Line2+0x122>
 801b558:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 801b55c:	b29b      	uxth	r3, r3
 801b55e:	3212      	adds	r2, #18
 801b560:	3012      	adds	r0, #18
 801b562:	e793      	b.n	801b48c <Spectral_DrawGraph_Line2+0x23c>
				else if(GraphData[i]+18 > 121)
 801b564:	2b67      	cmp	r3, #103	; 0x67
 801b566:	dd08      	ble.n	801b57a <Spectral_DrawGraph_Line2+0x32a>
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801b568:	b2bf      	uxth	r7, r7
 801b56a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b56e:	9300      	str	r3, [sp, #0]
 801b570:	227a      	movs	r2, #122	; 0x7a
 801b572:	463b      	mov	r3, r7
 801b574:	4639      	mov	r1, r7
 801b576:	b280      	uxth	r0, r0
 801b578:	e7d2      	b.n	801b520 <Spectral_DrawGraph_Line2+0x2d0>
				else if(GraphData[i]+18 > 68)
 801b57a:	2b32      	cmp	r3, #50	; 0x32
 801b57c:	dd1a      	ble.n	801b5b4 <Spectral_DrawGraph_Line2+0x364>
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801b57e:	b2bf      	uxth	r7, r7
 801b580:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801b584:	9300      	str	r3, [sp, #0]
 801b586:	2245      	movs	r2, #69	; 0x45
 801b588:	463b      	mov	r3, r7
 801b58a:	4639      	mov	r1, r7
 801b58c:	b280      	uxth	r0, r0
 801b58e:	e7d0      	b.n	801b532 <Spectral_DrawGraph_Line2+0x2e2>
 801b590:	20093631 	.word	0x20093631
 801b594:	200056f2 	.word	0x200056f2
 801b598:	20009758 	.word	0x20009758
 801b59c:	20009ce8 	.word	0x20009ce8
 801b5a0:	20009ce4 	.word	0x20009ce4
 801b5a4:	20000a3e 	.word	0x20000a3e
 801b5a8:	20009ce6 	.word	0x20009ce6
 801b5ac:	20000cd2 	.word	0x20000cd2
 801b5b0:	20009ce5 	.word	0x20009ce5
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801b5b4:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 801b5b8:	9200      	str	r2, [sp, #0]
 801b5ba:	b2bb      	uxth	r3, r7
 801b5bc:	2212      	movs	r2, #18
 801b5be:	4619      	mov	r1, r3
 801b5c0:	b280      	uxth	r0, r0
 801b5c2:	e7bf      	b.n	801b544 <Spectral_DrawGraph_Line2+0x2f4>

0801b5c4 <Rabs_graph_to_display>:



uint16_t Line_Rabs_buff_graph2[355] = {0};
void Rabs_graph_to_display(uint8_t direction, float Line_Rabs_buff[])
{    
 801b5c4:	b570      	push	{r4, r5, r6, lr}
 801b5c6:	ed2d 8b02 	vpush	{d8}
	uint8_t    step = (direction == 0x00)? 4 :3;
 801b5ca:	eddf 7a23 	vldr	s15, [pc, #140]	; 801b658 <Rabs_graph_to_display+0x94>
 801b5ce:	ed9f 8a23 	vldr	s16, [pc, #140]	; 801b65c <Rabs_graph_to_display+0x98>
 801b5d2:	2800      	cmp	r0, #0
{    
 801b5d4:	b082      	sub	sp, #8
 801b5d6:	460e      	mov	r6, r1
	uint16_t  q = 0, res;
	float scale = (direction == 0x00)? 307 : 209; 
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801b5d8:	f240 22c6 	movw	r2, #710	; 0x2c6
 801b5dc:	f04f 0100 	mov.w	r1, #0
 801b5e0:	481f      	ldr	r0, [pc, #124]	; (801b660 <Rabs_graph_to_display+0x9c>)
	uint8_t    step = (direction == 0x00)? 4 :3;
 801b5e2:	bf14      	ite	ne
 801b5e4:	2403      	movne	r4, #3
 801b5e6:	2404      	moveq	r4, #4
 801b5e8:	bf08      	it	eq
 801b5ea:	eeb0 8a67 	vmoveq.f32	s16, s15
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801b5ee:	f004 fa02 	bl	801f9f6 <memset>

	for(uint16_t ic = 0; ic <= 1023; ic+=step){
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801b5f2:	4b1c      	ldr	r3, [pc, #112]	; (801b664 <Rabs_graph_to_display+0xa0>)
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801b5f4:	481a      	ldr	r0, [pc, #104]	; (801b660 <Rabs_graph_to_display+0x9c>)
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801b5f6:	ed93 7a00 	vldr	s14, [r3]
 801b5fa:	2100      	movs	r1, #0
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801b5fc:	460b      	mov	r3, r1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801b5fe:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801b602:	edd2 6a00 	vldr	s13, [r2]
 801b606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b60a:	4423      	add	r3, r4
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801b60c:	b28d      	uxth	r5, r1
 801b60e:	b29b      	uxth	r3, r3
 801b610:	3101      	adds	r1, #1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801b612:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b61a:	edcd 7a01 	vstr	s15, [sp, #4]
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801b61e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801b622:	ee07 2a90 	vmov	s15, r2
 801b626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b62a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b632:	bf4c      	ite	mi
 801b634:	eefc 7ac8 	vcvtmi.u32.f32	s15, s16
 801b638:	eefc 7ae7 	vcvtpl.u32.f32	s15, s15
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801b63c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801b640:	edcd 7a01 	vstr	s15, [sp, #4]
 801b644:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801b648:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801b64c:	d3d7      	bcc.n	801b5fe <Rabs_graph_to_display+0x3a>
		q++;
	}
}
 801b64e:	b002      	add	sp, #8
 801b650:	ecbd 8b02 	vpop	{d8}
 801b654:	bd70      	pop	{r4, r5, r6, pc}
 801b656:	bf00      	nop
 801b658:	43998000 	.word	0x43998000
 801b65c:	43510000 	.word	0x43510000
 801b660:	20009a1e 	.word	0x20009a1e
 801b664:	20095a90 	.word	0x20095a90

0801b668 <Refresh_screen_Graph>:

void Refresh_screen_Graph(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint8_t direction)
{   
 801b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b66c:	b085      	sub	sp, #20
	uint16_t i = 0;
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b66e:	461d      	mov	r5, r3
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);

        } else if(direction == 0x02)
				{
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801b670:	f8df 8350 	ldr.w	r8, [pc, #848]	; 801b9c4 <Refresh_screen_Graph+0x35c>
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b674:	2b00      	cmp	r3, #0
 801b676:	bf0c      	ite	eq
 801b678:	23f0      	moveq	r3, #240	; 0xf0
 801b67a:	f44f 73a5 	movne.w	r3, #330	; 0x14a
{   
 801b67e:	4682      	mov	sl, r0
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b680:	9303      	str	r3, [sp, #12]
 801b682:	4616      	mov	r6, r2
 801b684:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801b688:	2400      	movs	r4, #0
        if(direction == 0x00){
 801b68a:	2d00      	cmp	r5, #0
 801b68c:	f040 80a0 	bne.w	801b7d0 <Refresh_screen_Graph+0x168>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(68, 18+PARGraph_G/4, 375, 20+PARGraph_G/4, TFT_PAR_Green);
 801b690:	f898 3000 	ldrb.w	r3, [r8]
 801b694:	07db      	lsls	r3, r3, #31
 801b696:	d529      	bpl.n	801b6ec <Refresh_screen_Graph+0x84>
 801b698:	4bc6      	ldr	r3, [pc, #792]	; (801b9b4 <Refresh_screen_Graph+0x34c>)
 801b69a:	8819      	ldrh	r1, [r3, #0]
 801b69c:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801b6a0:	0889      	lsrs	r1, r1, #2
 801b6a2:	9300      	str	r3, [sp, #0]
 801b6a4:	f240 1277 	movw	r2, #375	; 0x177
 801b6a8:	f101 0314 	add.w	r3, r1, #20
 801b6ac:	2044      	movs	r0, #68	; 0x44
 801b6ae:	3112      	adds	r1, #18
 801b6b0:	f000 fa66 	bl	801bb80 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_R/4, 375, 20+PARGraph_R/4, TFT_PAR_Red);
 801b6b4:	4bc0      	ldr	r3, [pc, #768]	; (801b9b8 <Refresh_screen_Graph+0x350>)
 801b6b6:	8819      	ldrh	r1, [r3, #0]
 801b6b8:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801b6bc:	0889      	lsrs	r1, r1, #2
 801b6be:	9300      	str	r3, [sp, #0]
 801b6c0:	f240 1277 	movw	r2, #375	; 0x177
 801b6c4:	f101 0314 	add.w	r3, r1, #20
 801b6c8:	2044      	movs	r0, #68	; 0x44
 801b6ca:	3112      	adds	r1, #18
 801b6cc:	f000 fa58 	bl	801bb80 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_IR/4, 375, 20+PARGraph_IR/4, TFT_PAR_IRed);}
 801b6d0:	4bba      	ldr	r3, [pc, #744]	; (801b9bc <Refresh_screen_Graph+0x354>)
 801b6d2:	8819      	ldrh	r1, [r3, #0]
 801b6d4:	f646 0382 	movw	r3, #26754	; 0x6882
 801b6d8:	0889      	lsrs	r1, r1, #2
 801b6da:	9300      	str	r3, [sp, #0]
 801b6dc:	f240 1277 	movw	r2, #375	; 0x177
 801b6e0:	f101 0314 	add.w	r3, r1, #20
 801b6e4:	2044      	movs	r0, #68	; 0x44
 801b6e6:	3112      	adds	r1, #18
 801b6e8:	f000 fa4a 	bl	801bb80 <TFT_FillRectangle_DMA>
 801b6ec:	b2a2      	uxth	r2, r4
 801b6ee:	f10a 0301 	add.w	r3, sl, #1
 801b6f2:	eb02 000a 	add.w	r0, r2, sl
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801b6f6:	8831      	ldrh	r1, [r6, #0]
 801b6f8:	f898 7000 	ldrb.w	r7, [r8]
 801b6fc:	441a      	add	r2, r3
 801b6fe:	8873      	ldrh	r3, [r6, #2]
 801b700:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801b704:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b708:	07ff      	lsls	r7, r7, #31
 801b70a:	b280      	uxth	r0, r0
 801b70c:	b289      	uxth	r1, r1
 801b70e:	b292      	uxth	r2, r2
 801b710:	b29b      	uxth	r3, r3
 801b712:	f140 8161 	bpl.w	801b9d8 <Refresh_screen_Graph+0x370>
 801b716:	4faa      	ldr	r7, [pc, #680]	; (801b9c0 <Refresh_screen_Graph+0x358>)
 801b718:	883f      	ldrh	r7, [r7, #0]
 801b71a:	08bf      	lsrs	r7, r7, #2
 801b71c:	eb0a 0c04 	add.w	ip, sl, r4
 801b720:	3712      	adds	r7, #18
 801b722:	4567      	cmp	r7, ip
 801b724:	f280 8158 	bge.w	801b9d8 <Refresh_screen_Graph+0x370>
 801b728:	4fa2      	ldr	r7, [pc, #648]	; (801b9b4 <Refresh_screen_Graph+0x34c>)
 801b72a:	883f      	ldrh	r7, [r7, #0]
 801b72c:	08bf      	lsrs	r7, r7, #2
 801b72e:	3712      	adds	r7, #18
 801b730:	4567      	cmp	r7, ip
 801b732:	f280 8153 	bge.w	801b9dc <Refresh_screen_Graph+0x374>
																																							(ZeroX+i < 19+PARGraph_R/4) ? TFT_PAR_Green :
 801b736:	4fa0      	ldr	r7, [pc, #640]	; (801b9b8 <Refresh_screen_Graph+0x350>)
 801b738:	883f      	ldrh	r7, [r7, #0]
 801b73a:	08bf      	lsrs	r7, r7, #2
 801b73c:	3712      	adds	r7, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801b73e:	4567      	cmp	r7, ip
 801b740:	f280 814f 	bge.w	801b9e2 <Refresh_screen_Graph+0x37a>
																																							(ZeroX+i < 19+PARGraph_IR/4) ? TFT_PAR_Red : TFT_PAR_IRed) : TFT_Black_Bkgr);
 801b744:	4f9d      	ldr	r7, [pc, #628]	; (801b9bc <Refresh_screen_Graph+0x354>)
 801b746:	f8b7 e000 	ldrh.w	lr, [r7]
 801b74a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801b74e:	f10e 0e12 	add.w	lr, lr, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801b752:	f646 0b82 	movw	fp, #26754	; 0x6882
 801b756:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801b75a:	45e6      	cmp	lr, ip
 801b75c:	bfb8      	it	lt
 801b75e:	465f      	movlt	r7, fp
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
					
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b760:	9700      	str	r7, [sp, #0]
 801b762:	f000 ffdf 	bl	801c724 <DrawLineX>
 801b766:	3401      	adds	r4, #1
	 for(i = 0; i < graph_lenht; i++)
 801b768:	9a03      	ldr	r2, [sp, #12]
 801b76a:	b2a3      	uxth	r3, r4
 801b76c:	429a      	cmp	r2, r3
 801b76e:	f106 0602 	add.w	r6, r6, #2
 801b772:	f1a9 0902 	sub.w	r9, r9, #2
 801b776:	d888      	bhi.n	801b68a <Refresh_screen_Graph+0x22>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
           	:TFT_Black_Bkgr);
				}
			}
		Spectral_Axes(direction);
		 if(Graph_Field&V_lambda)
 801b778:	4c92      	ldr	r4, [pc, #584]	; (801b9c4 <Refresh_screen_Graph+0x35c>)
		Spectral_Axes(direction);
 801b77a:	4628      	mov	r0, r5
 801b77c:	f7ff fa8a 	bl	801ac94 <Spectral_Axes>
		 if(Graph_Field&V_lambda)
 801b780:	7822      	ldrb	r2, [r4, #0]
 801b782:	0752      	lsls	r2, r2, #29
 801b784:	d50e      	bpl.n	801b7a4 <Refresh_screen_Graph+0x13c>
			{
					Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, direction);
 801b786:	2114      	movs	r1, #20
 801b788:	4608      	mov	r0, r1
 801b78a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801b78e:	4a8e      	ldr	r2, [pc, #568]	; (801b9c8 <Refresh_screen_Graph+0x360>)
 801b790:	9500      	str	r5, [sp, #0]
 801b792:	f7ff fd0d 	bl	801b1b0 <Spectral_DrawGraph_Const>
					Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, direction);
 801b796:	2114      	movs	r1, #20
 801b798:	9500      	str	r5, [sp, #0]
 801b79a:	231f      	movs	r3, #31
 801b79c:	4a8b      	ldr	r2, [pc, #556]	; (801b9cc <Refresh_screen_Graph+0x364>)
 801b79e:	4608      	mov	r0, r1
 801b7a0:	f7ff fd06 	bl	801b1b0 <Spectral_DrawGraph_Const>
					}
			
			if(Graph_Field&EbEr_graph)
 801b7a4:	7823      	ldrb	r3, [r4, #0]
 801b7a6:	079b      	lsls	r3, r3, #30
 801b7a8:	d50f      	bpl.n	801b7ca <Refresh_screen_Graph+0x162>
					{
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, direction);
 801b7aa:	2114      	movs	r1, #20
 801b7ac:	4608      	mov	r0, r1
 801b7ae:	f240 33ef 	movw	r3, #1007	; 0x3ef
 801b7b2:	4a87      	ldr	r2, [pc, #540]	; (801b9d0 <Refresh_screen_Graph+0x368>)
 801b7b4:	9500      	str	r5, [sp, #0]
 801b7b6:	f7ff fcfb 	bl	801b1b0 <Spectral_DrawGraph_Const>
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, direction);
 801b7ba:	2114      	movs	r1, #20
 801b7bc:	9500      	str	r5, [sp, #0]
 801b7be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801b7c2:	4a84      	ldr	r2, [pc, #528]	; (801b9d4 <Refresh_screen_Graph+0x36c>)
 801b7c4:	4608      	mov	r0, r1
 801b7c6:	f7ff fcf3 	bl	801b1b0 <Spectral_DrawGraph_Const>
					}
}
 801b7ca:	b005      	add	sp, #20
 801b7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(direction == 0x01)
 801b7d0:	2d01      	cmp	r5, #1
 801b7d2:	d178      	bne.n	801b8c6 <Refresh_screen_Graph+0x25e>
				if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(76+PARGraph_G/3, 45, 79+PARGraph_G/3,253, TFT_PAR_Green);
 801b7d4:	f898 3000 	ldrb.w	r3, [r8]
 801b7d8:	07db      	lsls	r3, r3, #31
 801b7da:	d530      	bpl.n	801b83e <Refresh_screen_Graph+0x1d6>
 801b7dc:	4b75      	ldr	r3, [pc, #468]	; (801b9b4 <Refresh_screen_Graph+0x34c>)
 801b7de:	2703      	movs	r7, #3
 801b7e0:	8818      	ldrh	r0, [r3, #0]
 801b7e2:	fbb0 f0f7 	udiv	r0, r0, r7
 801b7e6:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801b7ea:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801b7ee:	304c      	adds	r0, #76	; 0x4c
 801b7f0:	9300      	str	r3, [sp, #0]
 801b7f2:	b292      	uxth	r2, r2
 801b7f4:	23fd      	movs	r3, #253	; 0xfd
 801b7f6:	212d      	movs	r1, #45	; 0x2d
 801b7f8:	b280      	uxth	r0, r0
 801b7fa:	f000 f9c1 	bl	801bb80 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_R/3, 45, 79+PARGraph_R/3,253, TFT_PAR_Red);
 801b7fe:	4b6e      	ldr	r3, [pc, #440]	; (801b9b8 <Refresh_screen_Graph+0x350>)
 801b800:	8818      	ldrh	r0, [r3, #0]
 801b802:	fbb0 f0f7 	udiv	r0, r0, r7
 801b806:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801b80a:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801b80e:	304c      	adds	r0, #76	; 0x4c
 801b810:	9300      	str	r3, [sp, #0]
 801b812:	b292      	uxth	r2, r2
 801b814:	23fd      	movs	r3, #253	; 0xfd
 801b816:	212d      	movs	r1, #45	; 0x2d
 801b818:	b280      	uxth	r0, r0
 801b81a:	f000 f9b1 	bl	801bb80 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_IR/3,45, 79+PARGraph_IR/3,253, TFT_PAR_IRed);}
 801b81e:	4b67      	ldr	r3, [pc, #412]	; (801b9bc <Refresh_screen_Graph+0x354>)
 801b820:	8818      	ldrh	r0, [r3, #0]
 801b822:	fbb0 f7f7 	udiv	r7, r0, r7
 801b826:	f646 0382 	movw	r3, #26754	; 0x6882
 801b82a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 801b82e:	374c      	adds	r7, #76	; 0x4c
 801b830:	9300      	str	r3, [sp, #0]
 801b832:	b292      	uxth	r2, r2
 801b834:	23fd      	movs	r3, #253	; 0xfd
 801b836:	212d      	movs	r1, #45	; 0x2d
 801b838:	b2b8      	uxth	r0, r7
 801b83a:	f000 f9a1 	bl	801bb80 <TFT_FillRectangle_DMA>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b83e:	f8b9 0000 	ldrh.w	r0, [r9]
 801b842:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801b846:	f898 7000 	ldrb.w	r7, [r8]
 801b84a:	b2a3      	uxth	r3, r4
 801b84c:	f103 0149 	add.w	r1, r3, #73	; 0x49
 801b850:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
 801b854:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801b858:	3348      	adds	r3, #72	; 0x48
 801b85a:	07ff      	lsls	r7, r7, #31
 801b85c:	b280      	uxth	r0, r0
 801b85e:	b289      	uxth	r1, r1
 801b860:	b292      	uxth	r2, r2
 801b862:	b29b      	uxth	r3, r3
 801b864:	f140 80b8 	bpl.w	801b9d8 <Refresh_screen_Graph+0x370>
											   72+i+1 < 403-PARGraph_IR/3 ? TFT_PAR_IRed:
 801b868:	4f54      	ldr	r7, [pc, #336]	; (801b9bc <Refresh_screen_Graph+0x354>)
 801b86a:	f8b7 c000 	ldrh.w	ip, [r7]
 801b86e:	f240 1793 	movw	r7, #403	; 0x193
 801b872:	f104 0b49 	add.w	fp, r4, #73	; 0x49
 801b876:	f04f 0e03 	mov.w	lr, #3
 801b87a:	fbbc fcfe 	udiv	ip, ip, lr
 801b87e:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b882:	45dc      	cmp	ip, fp
 801b884:	dc19      	bgt.n	801b8ba <Refresh_screen_Graph+0x252>
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
 801b886:	f8df c130 	ldr.w	ip, [pc, #304]	; 801b9b8 <Refresh_screen_Graph+0x350>
 801b88a:	f8bc c000 	ldrh.w	ip, [ip]
 801b88e:	fbbc fcfe 	udiv	ip, ip, lr
 801b892:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b896:	45dc      	cmp	ip, fp
 801b898:	dc12      	bgt.n	801b8c0 <Refresh_screen_Graph+0x258>
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801b89a:	f8df c118 	ldr.w	ip, [pc, #280]	; 801b9b4 <Refresh_screen_Graph+0x34c>
 801b89e:	f8bc c000 	ldrh.w	ip, [ip]
 801b8a2:	fbbc fefe 	udiv	lr, ip, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b8a6:	f644 3cd4 	movw	ip, #19412	; 0x4bd4
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801b8aa:	eba7 0e0e 	sub.w	lr, r7, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801b8ae:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801b8b2:	45de      	cmp	lr, fp
 801b8b4:	bfd8      	it	le
 801b8b6:	4667      	movle	r7, ip
 801b8b8:	e752      	b.n	801b760 <Refresh_screen_Graph+0xf8>
 801b8ba:	f646 0782 	movw	r7, #26754	; 0x6882
 801b8be:	e74f      	b.n	801b760 <Refresh_screen_Graph+0xf8>
 801b8c0:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801b8c4:	e74c      	b.n	801b760 <Refresh_screen_Graph+0xf8>
        } else if(direction == 0x02)
 801b8c6:	2d02      	cmp	r5, #2
 801b8c8:	f47f af4d 	bne.w	801b766 <Refresh_screen_Graph+0xfe>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801b8cc:	f898 3000 	ldrb.w	r3, [r8]
 801b8d0:	07db      	lsls	r3, r3, #31
 801b8d2:	d535      	bpl.n	801b940 <Refresh_screen_Graph+0x2d8>
 801b8d4:	4b37      	ldr	r3, [pc, #220]	; (801b9b4 <Refresh_screen_Graph+0x34c>)
 801b8d6:	f240 1795 	movw	r7, #405	; 0x195
 801b8da:	8818      	ldrh	r0, [r3, #0]
 801b8dc:	f04f 0b03 	mov.w	fp, #3
 801b8e0:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801b8e4:	fbb0 f0fb 	udiv	r0, r0, fp
 801b8e8:	1a3a      	subs	r2, r7, r0
 801b8ea:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801b8ee:	9300      	str	r3, [sp, #0]
 801b8f0:	b292      	uxth	r2, r2
 801b8f2:	23e3      	movs	r3, #227	; 0xe3
 801b8f4:	2113      	movs	r1, #19
 801b8f6:	b280      	uxth	r0, r0
 801b8f8:	f000 f942 	bl	801bb80 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
 801b8fc:	4b2e      	ldr	r3, [pc, #184]	; (801b9b8 <Refresh_screen_Graph+0x350>)
 801b8fe:	8818      	ldrh	r0, [r3, #0]
 801b900:	fbb0 f0fb 	udiv	r0, r0, fp
 801b904:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801b908:	1a3a      	subs	r2, r7, r0
 801b90a:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801b90e:	9300      	str	r3, [sp, #0]
 801b910:	b292      	uxth	r2, r2
 801b912:	23e3      	movs	r3, #227	; 0xe3
 801b914:	2113      	movs	r1, #19
 801b916:	b280      	uxth	r0, r0
 801b918:	f000 f932 	bl	801bb80 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
 801b91c:	4b27      	ldr	r3, [pc, #156]	; (801b9bc <Refresh_screen_Graph+0x354>)
 801b91e:	8818      	ldrh	r0, [r3, #0]
 801b920:	fbb0 fbfb 	udiv	fp, r0, fp
 801b924:	f646 0382 	movw	r3, #26754	; 0x6882
 801b928:	eba7 020b 	sub.w	r2, r7, fp
 801b92c:	f5cb 7bcc 	rsb	fp, fp, #408	; 0x198
 801b930:	9300      	str	r3, [sp, #0]
 801b932:	b292      	uxth	r2, r2
 801b934:	23e3      	movs	r3, #227	; 0xe3
 801b936:	2113      	movs	r1, #19
 801b938:	fa1f f08b 	uxth.w	r0, fp
 801b93c:	f000 f920 	bl	801bb80 <TFT_FillRectangle_DMA>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b940:	8830      	ldrh	r0, [r6, #0]
 801b942:	8872      	ldrh	r2, [r6, #2]
 801b944:	f898 7000 	ldrb.w	r7, [r8]
 801b948:	b2a3      	uxth	r3, r4
 801b94a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 801b94e:	3012      	adds	r0, #18
 801b950:	3212      	adds	r2, #18
 801b952:	334d      	adds	r3, #77	; 0x4d
 801b954:	07ff      	lsls	r7, r7, #31
 801b956:	b280      	uxth	r0, r0
 801b958:	b289      	uxth	r1, r1
 801b95a:	b292      	uxth	r2, r2
 801b95c:	b29b      	uxth	r3, r3
 801b95e:	d53b      	bpl.n	801b9d8 <Refresh_screen_Graph+0x370>
 801b960:	4f17      	ldr	r7, [pc, #92]	; (801b9c0 <Refresh_screen_Graph+0x358>)
 801b962:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801b966:	f8b7 e000 	ldrh.w	lr, [r7]
 801b96a:	2703      	movs	r7, #3
 801b96c:	fbbe fef7 	udiv	lr, lr, r7
 801b970:	45e6      	cmp	lr, ip
 801b972:	dc31      	bgt.n	801b9d8 <Refresh_screen_Graph+0x370>
           	(76+i < 74+PARGraph_G/3) ? TFT_PAR_Blue :
 801b974:	f8df c03c 	ldr.w	ip, [pc, #60]	; 801b9b4 <Refresh_screen_Graph+0x34c>
 801b978:	f104 0e02 	add.w	lr, r4, #2
 801b97c:	f8bc c000 	ldrh.w	ip, [ip]
 801b980:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b984:	45f4      	cmp	ip, lr
 801b986:	dc29      	bgt.n	801b9dc <Refresh_screen_Graph+0x374>
           	(76+i < 74+PARGraph_R/3) ? TFT_PAR_Green :
 801b988:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801b9b8 <Refresh_screen_Graph+0x350>
 801b98c:	f8bc c000 	ldrh.w	ip, [ip]
 801b990:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b994:	45f4      	cmp	ip, lr
 801b996:	dc24      	bgt.n	801b9e2 <Refresh_screen_Graph+0x37a>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801b998:	f8df c020 	ldr.w	ip, [pc, #32]	; 801b9bc <Refresh_screen_Graph+0x354>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b99c:	f646 0b82 	movw	fp, #26754	; 0x6882
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801b9a0:	f8bc c000 	ldrh.w	ip, [ip]
 801b9a4:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801b9a8:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801b9ac:	45f4      	cmp	ip, lr
 801b9ae:	bfd8      	it	le
 801b9b0:	465f      	movle	r7, fp
 801b9b2:	e6d5      	b.n	801b760 <Refresh_screen_Graph+0xf8>
 801b9b4:	20095b3c 	.word	0x20095b3c
 801b9b8:	20095ca0 	.word	0x20095ca0
 801b9bc:	20095a78 	.word	0x20095a78
 801b9c0:	20095a7a 	.word	0x20095a7a
 801b9c4:	200056f2 	.word	0x200056f2
 801b9c8:	20090d32 	.word	0x20090d32
 801b9cc:	200912d0 	.word	0x200912d0
 801b9d0:	2009100a 	.word	0x2009100a
 801b9d4:	20090a6c 	.word	0x20090a6c
 801b9d8:	2763      	movs	r7, #99	; 0x63
 801b9da:	e6c1      	b.n	801b760 <Refresh_screen_Graph+0xf8>
 801b9dc:	f644 37d4 	movw	r7, #19412	; 0x4bd4
 801b9e0:	e6be      	b.n	801b760 <Refresh_screen_Graph+0xf8>
 801b9e2:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801b9e6:	e6bb      	b.n	801b760 <Refresh_screen_Graph+0xf8>

0801b9e8 <TS_IO_Read>:
{

  }

uint8_t TS_IO_Read(uint8_t DeviceAddr, uint8_t Reg)
{
 801b9e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 801b9ea:	aa06      	add	r2, sp, #24
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x100);
 801b9f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b9f6:	9302      	str	r3, [sp, #8]
 801b9f8:	2301      	movs	r3, #1
 801b9fa:	e88d 000c 	stmia.w	sp, {r2, r3}
 801b9fe:	460a      	mov	r2, r1
 801ba00:	4601      	mov	r1, r0
 801ba02:	4804      	ldr	r0, [pc, #16]	; (801ba14 <TS_IO_Read+0x2c>)
 801ba04:	f7e7 f87e 	bl	8002b04 <HAL_I2C_Mem_Read>

  return read_value;
}
 801ba08:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801ba0c:	b007      	add	sp, #28
 801ba0e:	f85d fb04 	ldr.w	pc, [sp], #4
 801ba12:	bf00      	nop
 801ba14:	20095718 	.word	0x20095718

0801ba18 <TS_ReadID>:
  HAL_I2C_Mem_Write(&hi2c1, DeviceAddr, (uint8_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x100);
  if(status != HAL_OK) Error();
}

uint8_t TS_ReadID(uint8_t DeviceAddr)
{
 801ba18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 801ba1a:	2300      	movs	r3, #0
{
 801ba1c:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 801ba1e:	f88d 3007 	strb.w	r3, [sp, #7]
 801ba22:	2403      	movs	r4, #3
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;

  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
  {
    ucReadId = TS_IO_Read(DeviceAddr, ID_G_CIPHER);
 801ba24:	21a3      	movs	r1, #163	; 0xa3
 801ba26:	4628      	mov	r0, r5
 801ba28:	f7ff ffde 	bl	801b9e8 <TS_IO_Read>
 801ba2c:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == CHIP_ID)
 801ba30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ba34:	3c01      	subs	r4, #1
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801ba36:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    if(ucReadId == CHIP_ID)
 801ba3a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801ba3c:	d001      	beq.n	801ba42 <TS_ReadID+0x2a>
 801ba3e:	2b0a      	cmp	r3, #10
 801ba40:	d1f0      	bne.n	801ba24 <TS_ReadID+0xc>
    {
      bFoundDevice = 1;
    }
  }
  return (ucReadId);
 801ba42:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 801ba46:	b003      	add	sp, #12
 801ba48:	bd30      	pop	{r4, r5, pc}

0801ba4a <Touch_Ini>:

void Touch_Ini(void)
{
 801ba4a:	b508      	push	{r3, lr}
	if(TS_ReadID(TS_I2C_ADDRESS) != CHIP_ID) Error();
 801ba4c:	2070      	movs	r0, #112	; 0x70
 801ba4e:	f7ff ffe3 	bl	801ba18 <TS_ReadID>
  HAL_Delay(200);
 801ba52:	20c8      	movs	r0, #200	; 0xc8
}
 801ba54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
 801ba58:	f7e5 bae8 	b.w	800102c <HAL_Delay>

0801ba5c <TS_Get_XY1>:

void TS_Get_XY1(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801ba5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t coord = 0x0000;

	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801ba5e:	b2c5      	uxtb	r5, r0
{
 801ba60:	460e      	mov	r6, r1
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801ba62:	4628      	mov	r0, r5
 801ba64:	2103      	movs	r1, #3
{
 801ba66:	4617      	mov	r7, r2
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801ba68:	f7ff ffbe 	bl	801b9e8 <TS_IO_Read>
 801ba6c:	4c10      	ldr	r4, [pc, #64]	; (801bab0 <TS_Get_XY1+0x54>)
 801ba6e:	0200      	lsls	r0, r0, #8
 801ba70:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801ba72:	2104      	movs	r1, #4
 801ba74:	4628      	mov	r0, r5
 801ba76:	f7ff ffb7 	bl	801b9e8 <TS_IO_Read>
 801ba7a:	8823      	ldrh	r3, [r4, #0]
 801ba7c:	4318      	orrs	r0, r3
	
	if (Orientation90)
	{
//		*Y = (uint16_t)((X_SIZE_Touch - coord) * TS_Callib_x);
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801ba7e:	4b0d      	ldr	r3, [pc, #52]	; (801bab4 <TS_Get_XY1+0x58>)
 801ba80:	881b      	ldrh	r3, [r3, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801ba82:	b280      	uxth	r0, r0
 801ba84:	8020      	strh	r0, [r4, #0]
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801ba86:	1a18      	subs	r0, r3, r0
 801ba88:	8038      	strh	r0, [r7, #0]
	else{
//		*X = (uint16_t)(coord * TS_Callib_x);
		*X = coord * TS_Callib_x;
	}
	
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_YH) << 8) & 0xFF00;
 801ba8a:	2105      	movs	r1, #5
 801ba8c:	4628      	mov	r0, r5
 801ba8e:	f7ff ffab 	bl	801b9e8 <TS_IO_Read>
 801ba92:	0200      	lsls	r0, r0, #8
 801ba94:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801ba96:	2106      	movs	r1, #6
 801ba98:	4628      	mov	r0, r5
 801ba9a:	f7ff ffa5 	bl	801b9e8 <TS_IO_Read>
 801ba9e:	8823      	ldrh	r3, [r4, #0]
 801baa0:	4318      	orrs	r0, r3
	
		if (Orientation90)
	{
//		*X = (uint16_t)(coord * TS_Callib_y);
		*X = coord * TS_Callib_y;
		temporary_x = coord;
 801baa2:	4b05      	ldr	r3, [pc, #20]	; (801bab8 <TS_Get_XY1+0x5c>)
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801baa4:	b280      	uxth	r0, r0
		*X = coord * TS_Callib_y;
 801baa6:	8030      	strh	r0, [r6, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801baa8:	8020      	strh	r0, [r4, #0]
		temporary_x = coord;
 801baaa:	8018      	strh	r0, [r3, #0]
 801baac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801baae:	bf00      	nop
 801bab0:	20009cea 	.word	0x20009cea
 801bab4:	20000eb2 	.word	0x20000eb2
 801bab8:	20009cec 	.word	0x20009cec

0801babc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801babc:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 801babe:	2301      	movs	r3, #1
 801bac0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 801bac4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801bac8:	2b01      	cmp	r3, #1
 801baca:	d10e      	bne.n	801baea <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 801bacc:	4808      	ldr	r0, [pc, #32]	; (801baf0 <BSP_SD_Init+0x34>)
 801bace:	f7e9 fe25 	bl	800571c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801bad2:	b938      	cbnz	r0, 801bae4 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801bad4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801bad8:	4805      	ldr	r0, [pc, #20]	; (801baf0 <BSP_SD_Init+0x34>)
 801bada:	f7e9 fd9b 	bl	8005614 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 801bade:	3000      	adds	r0, #0
 801bae0:	bf18      	it	ne
 801bae2:	2001      	movne	r0, #1
}
 801bae4:	b003      	add	sp, #12
 801bae6:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 801baea:	2002      	movs	r0, #2
 801baec:	e7fa      	b.n	801bae4 <BSP_SD_Init+0x28>
 801baee:	bf00      	nop
 801baf0:	200957b8 	.word	0x200957b8

0801baf4 <BSP_SD_ReadBlocks_DMA>:
{
 801baf4:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801baf6:	4613      	mov	r3, r2
 801baf8:	460a      	mov	r2, r1
 801bafa:	4601      	mov	r1, r0
 801bafc:	4803      	ldr	r0, [pc, #12]	; (801bb0c <BSP_SD_ReadBlocks_DMA+0x18>)
 801bafe:	f7e9 f9c1 	bl	8004e84 <HAL_SD_ReadBlocks_DMA>
}
 801bb02:	3000      	adds	r0, #0
 801bb04:	bf18      	it	ne
 801bb06:	2001      	movne	r0, #1
 801bb08:	bd08      	pop	{r3, pc}
 801bb0a:	bf00      	nop
 801bb0c:	200957b8 	.word	0x200957b8

0801bb10 <BSP_SD_WriteBlocks_DMA>:
{
 801bb10:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801bb12:	4613      	mov	r3, r2
 801bb14:	460a      	mov	r2, r1
 801bb16:	4601      	mov	r1, r0
 801bb18:	4803      	ldr	r0, [pc, #12]	; (801bb28 <BSP_SD_WriteBlocks_DMA+0x18>)
 801bb1a:	f7e9 fa25 	bl	8004f68 <HAL_SD_WriteBlocks_DMA>
}
 801bb1e:	3000      	adds	r0, #0
 801bb20:	bf18      	it	ne
 801bb22:	2001      	movne	r0, #1
 801bb24:	bd08      	pop	{r3, pc}
 801bb26:	bf00      	nop
 801bb28:	200957b8 	.word	0x200957b8

0801bb2c <BSP_SD_GetCardState>:
{
 801bb2c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801bb2e:	4803      	ldr	r0, [pc, #12]	; (801bb3c <BSP_SD_GetCardState+0x10>)
 801bb30:	f7e9 fe2d 	bl	800578e <HAL_SD_GetCardState>
}
 801bb34:	3804      	subs	r0, #4
 801bb36:	bf18      	it	ne
 801bb38:	2001      	movne	r0, #1
 801bb3a:	bd08      	pop	{r3, pc}
 801bb3c:	200957b8 	.word	0x200957b8

0801bb40 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801bb40:	4601      	mov	r1, r0
 801bb42:	4801      	ldr	r0, [pc, #4]	; (801bb48 <BSP_SD_GetCardInfo+0x8>)
 801bb44:	f7e9 bd54 	b.w	80055f0 <HAL_SD_GetCardInfo>
 801bb48:	200957b8 	.word	0x200957b8

0801bb4c <BSP_SD_WriteCpltCallback>:
 801bb4c:	4770      	bx	lr

0801bb4e <HAL_SD_TxCpltCallback>:
{
 801bb4e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801bb50:	f7ff fffc 	bl	801bb4c <BSP_SD_WriteCpltCallback>
 801bb54:	bd08      	pop	{r3, pc}

0801bb56 <BSP_SD_ReadCpltCallback>:
{
 801bb56:	4770      	bx	lr

0801bb58 <HAL_SD_RxCpltCallback>:
{
 801bb58:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801bb5a:	f7ff fffc 	bl	801bb56 <BSP_SD_ReadCpltCallback>
 801bb5e:	bd08      	pop	{r3, pc}

0801bb60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801bb60:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801bb62:	4903      	ldr	r1, [pc, #12]	; (801bb70 <MX_FATFS_Init+0x10>)
 801bb64:	4803      	ldr	r0, [pc, #12]	; (801bb74 <MX_FATFS_Init+0x14>)
 801bb66:	f7ed ffd5 	bl	8009b14 <FATFS_LinkDriver>
 801bb6a:	4b03      	ldr	r3, [pc, #12]	; (801bb78 <MX_FATFS_Init+0x18>)
 801bb6c:	7018      	strb	r0, [r3, #0]
 801bb6e:	bd08      	pop	{r3, pc}
 801bb70:	20093635 	.word	0x20093635
 801bb74:	080314d4 	.word	0x080314d4
 801bb78:	20093634 	.word	0x20093634

0801bb7c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 801bb7c:	2000      	movs	r0, #0
 801bb7e:	4770      	bx	lr

0801bb80 <TFT_FillRectangle_DMA>:
    }
}

void TFT_FillRectangle_DMA(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
  if(x1>x2) swap(x1,x2);
 801bb80:	4290      	cmp	r0, r2
{
 801bb82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb86:	461d      	mov	r5, r3
  if(x1>x2) swap(x1,x2);
 801bb88:	bf88      	it	hi
 801bb8a:	4603      	movhi	r3, r0
{
 801bb8c:	4680      	mov	r8, r0
  if(x1>x2) swap(x1,x2);
 801bb8e:	bf84      	itt	hi
 801bb90:	4690      	movhi	r8, r2
 801bb92:	461a      	movhi	r2, r3
  if(y1>y2) swap(y1,y2);
 801bb94:	42a9      	cmp	r1, r5
 801bb96:	bf88      	it	hi
 801bb98:	460b      	movhi	r3, r1
{
 801bb9a:	460f      	mov	r7, r1
  if(y1>y2) swap(y1,y2);
 801bb9c:	bf84      	itt	hi
 801bb9e:	462f      	movhi	r7, r5
 801bba0:	461d      	movhi	r5, r3

  uint32_t addr = 0;
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801bba2:	4b15      	ldr	r3, [pc, #84]	; (801bbf8 <TFT_FillRectangle_DMA+0x78>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801bba4:	4e15      	ldr	r6, [pc, #84]	; (801bbfc <TFT_FillRectangle_DMA+0x7c>)
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801bba6:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 801bbaa:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
{
 801bbae:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_R2M;
 801bbb2:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801bbb6:	eba2 0408 	sub.w	r4, r2, r8
  hdma2d.Init.Mode = DMA2D_R2M;
 801bbba:	6073      	str	r3, [r6, #4]

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801bbbc:	4630      	mov	r0, r6
  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801bbbe:	eba9 0304 	sub.w	r3, r9, r4
 801bbc2:	60f3      	str	r3, [r6, #12]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801bbc4:	f7e6 f954 	bl	8001e70 <HAL_DMA2D_Init>
 801bbc8:	b990      	cbnz	r0, 801bbf0 <TFT_FillRectangle_DMA+0x70>
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801bbca:	fb09 8207 	mla	r2, r9, r7, r8
  {
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
 801bbce:	1bed      	subs	r5, r5, r7
 801bbd0:	9500      	str	r5, [sp, #0]
 801bbd2:	4623      	mov	r3, r4
 801bbd4:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801bbd8:	4651      	mov	r1, sl
 801bbda:	4630      	mov	r0, r6
 801bbdc:	f7e6 f992 	bl	8001f04 <HAL_DMA2D_Start>
 801bbe0:	b930      	cbnz	r0, 801bbf0 <TFT_FillRectangle_DMA+0x70>
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801bbe2:	210a      	movs	r1, #10
 801bbe4:	4630      	mov	r0, r6
    }
  }
}
 801bbe6:	b003      	add	sp, #12
 801bbe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801bbec:	f7e6 b9a3 	b.w	8001f36 <HAL_DMA2D_PollForTransfer>
}
 801bbf0:	b003      	add	sp, #12
 801bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbf6:	bf00      	nop
 801bbf8:	20095938 	.word	0x20095938
 801bbfc:	20095b4c 	.word	0x20095b4c

0801bc00 <TFT_FillScreen_DMA>:
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
	}
}

void TFT_FillScreen_DMA(uint16_t color)
{
 801bc00:	b573      	push	{r0, r1, r4, r5, r6, lr}
  hdma2d.Init.Mode = DMA2D_R2M;
 801bc02:	4c10      	ldr	r4, [pc, #64]	; (801bc44 <TFT_FillScreen_DMA+0x44>)
 801bc04:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 801bc08:	4606      	mov	r6, r0
  hdma2d.Init.Mode = DMA2D_R2M;
 801bc0a:	6063      	str	r3, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801bc0c:	2502      	movs	r5, #2
  hdma2d.Init.OutputOffset = 0;
 801bc0e:	2300      	movs	r3, #0
	
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801bc10:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0;
 801bc12:	60e3      	str	r3, [r4, #12]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801bc14:	60a5      	str	r5, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801bc16:	f7e6 f92b 	bl	8001e70 <HAL_DMA2D_Init>
 801bc1a:	b980      	cbnz	r0, 801bc3e <TFT_FillScreen_DMA+0x3e>
  {
    if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 801bc1c:	4a0a      	ldr	r2, [pc, #40]	; (801bc48 <TFT_FillScreen_DMA+0x48>)
 801bc1e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801bc20:	9300      	str	r3, [sp, #0]
 801bc22:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801bc24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801bc26:	4631      	mov	r1, r6
 801bc28:	4620      	mov	r0, r4
 801bc2a:	f7e6 f96b 	bl	8001f04 <HAL_DMA2D_Start>
 801bc2e:	b930      	cbnz	r0, 801bc3e <TFT_FillScreen_DMA+0x3e>
    hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801bc30:	4629      	mov	r1, r5
 801bc32:	4620      	mov	r0, r4
    }
  }
}
 801bc34:	b002      	add	sp, #8
 801bc36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801bc3a:	f7e6 b97c 	b.w	8001f36 <HAL_DMA2D_PollForTransfer>
}
 801bc3e:	b002      	add	sp, #8
 801bc40:	bd70      	pop	{r4, r5, r6, pc}
 801bc42:	bf00      	nop
 801bc44:	20095b4c 	.word	0x20095b4c
 801bc48:	20095938 	.word	0x20095938

0801bc4c <TFT_DrawPixel>:


//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 801bc4c:	b510      	push	{r4, lr}
	
//	tmp = Xpos;
//	Xpos = Ypos;
//	Ypos = X_SIZE - 1 - tmp;
////////////////////////////////////////////rotate -90
	if(TFT_direction == 0x00){
 801bc4e:	4b14      	ldr	r3, [pc, #80]	; (801bca0 <TFT_DrawPixel+0x54>)
 801bc50:	781c      	ldrb	r4, [r3, #0]
 801bc52:	b97c      	cbnz	r4, 801bc74 <TFT_DrawPixel+0x28>

	tmp = Xpos;
	Xpos = Ypos;
	Ypos = Y_SIZE - 1 - tmp;
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801bc54:	4b13      	ldr	r3, [pc, #76]	; (801bca4 <TFT_DrawPixel+0x58>)
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	1a5b      	subs	r3, r3, r1
	Ypos = Y_SIZE - 1 - tmp;
 801bc5a:	4913      	ldr	r1, [pc, #76]	; (801bca8 <TFT_DrawPixel+0x5c>)
 801bc5c:	8809      	ldrh	r1, [r1, #0]
 801bc5e:	3901      	subs	r1, #1
 801bc60:	1a09      	subs	r1, r1, r0
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801bc62:	4812      	ldr	r0, [pc, #72]	; (801bcac <TFT_DrawPixel+0x60>)
 801bc64:	6e04      	ldr	r4, [r0, #96]	; 0x60
 801bc66:	b289      	uxth	r1, r1
 801bc68:	fb04 3111 	mls	r1, r4, r1, r3
 801bc6c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	else	if (TFT_direction == 0x01){
//////////////////////////////////////////// 0 - no rotate
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
	}else	if (TFT_direction == 0x02){
////////////////////////////////////////////rotate -180
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801bc6e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801bc72:	bd10      	pop	{r4, pc}
	else	if (TFT_direction == 0x01){
 801bc74:	781c      	ldrb	r4, [r3, #0]
 801bc76:	2c01      	cmp	r4, #1
 801bc78:	d105      	bne.n	801bc86 <TFT_DrawPixel+0x3a>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 801bc7a:	4c0c      	ldr	r4, [pc, #48]	; (801bcac <TFT_DrawPixel+0x60>)
 801bc7c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801bc7e:	fb03 0101 	mla	r1, r3, r1, r0
 801bc82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801bc84:	e7f3      	b.n	801bc6e <TFT_DrawPixel+0x22>
	}else	if (TFT_direction == 0x02){
 801bc86:	781b      	ldrb	r3, [r3, #0]
 801bc88:	2b02      	cmp	r3, #2
 801bc8a:	d1f2      	bne.n	801bc72 <TFT_DrawPixel+0x26>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801bc8c:	4b05      	ldr	r3, [pc, #20]	; (801bca4 <TFT_DrawPixel+0x58>)
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	1a18      	subs	r0, r3, r0
 801bc92:	4b06      	ldr	r3, [pc, #24]	; (801bcac <TFT_DrawPixel+0x60>)
 801bc94:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801bc96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bc98:	fb04 0111 	mls	r1, r4, r1, r0
 801bc9c:	e7e7      	b.n	801bc6e <TFT_DrawPixel+0x22>
 801bc9e:	bf00      	nop
 801bca0:	20005690 	.word	0x20005690
 801bca4:	20000eb4 	.word	0x20000eb4
 801bca8:	20000eba 	.word	0x20000eba
 801bcac:	20095938 	.word	0x20095938

0801bcb0 <TFT_DrawCircleCorner>:
{
 801bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcb4:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 801bcb6:	b293      	uxth	r3, r2
 801bcb8:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 801bcbc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801bcc0:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 801bcc2:	005b      	lsls	r3, r3, #1
 801bcc4:	b21b      	sxth	r3, r3
 801bcc6:	9301      	str	r3, [sp, #4]
    while (x < y) {
 801bcc8:	2300      	movs	r3, #0
 801bcca:	9300      	str	r3, [sp, #0]
        if (corner & 0x01) {	
 801bccc:	f00a 0301 	and.w	r3, sl, #1
{
 801bcd0:	4689      	mov	r9, r1
 801bcd2:	4616      	mov	r6, r2
	int16_t f = 1 - r;
 801bcd4:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801bcd6:	9302      	str	r3, [sp, #8]
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801bcd8:	b287      	uxth	r7, r0
    while (x < y) {
 801bcda:	f9bd 3000 	ldrsh.w	r3, [sp]
 801bcde:	42b3      	cmp	r3, r6
 801bce0:	db02      	blt.n	801bce8 <TFT_DrawCircleCorner+0x38>
}
 801bce2:	b005      	add	sp, #20
 801bce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801bce8:	2c00      	cmp	r4, #0
 801bcea:	db08      	blt.n	801bcfe <TFT_DrawCircleCorner+0x4e>
            ddF_y += 2;
 801bcec:	9b01      	ldr	r3, [sp, #4]
 801bcee:	3302      	adds	r3, #2
 801bcf0:	b29b      	uxth	r3, r3
            y--;
 801bcf2:	3e01      	subs	r6, #1
            ddF_y += 2;
 801bcf4:	b21a      	sxth	r2, r3
            f += ddF_y;
 801bcf6:	441c      	add	r4, r3
            y--;
 801bcf8:	b236      	sxth	r6, r6
            ddF_y += 2;
 801bcfa:	9201      	str	r2, [sp, #4]
            f += ddF_y;
 801bcfc:	b224      	sxth	r4, r4
 801bcfe:	f8bd 5000 	ldrh.w	r5, [sp]
        if (corner & 0x01) {	
 801bd02:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801bd04:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801bd08:	3403      	adds	r4, #3
 801bd0a:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801bd0c:	b1e3      	cbz	r3, 801bd48 <TFT_DrawCircleCorner+0x98>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801bd0e:	fa1f f889 	uxth.w	r8, r9
 801bd12:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bd16:	9303      	str	r3, [sp, #12]
 801bd18:	fa1f fb86 	uxth.w	fp, r6
 801bd1c:	f108 3eff 	add.w	lr, r8, #4294967295
 801bd20:	ebae 0e05 	sub.w	lr, lr, r5
 801bd24:	eba7 000b 	sub.w	r0, r7, fp
 801bd28:	461a      	mov	r2, r3
 801bd2a:	fa1f f18e 	uxth.w	r1, lr
 801bd2e:	b280      	uxth	r0, r0
 801bd30:	f7ff ff8c 	bl	801bc4c <TFT_DrawPixel>
			TFT_DrawPixel(x0 - x, y0 - y, color);
 801bd34:	1e78      	subs	r0, r7, #1
 801bd36:	9b03      	ldr	r3, [sp, #12]
 801bd38:	eba8 010b 	sub.w	r1, r8, fp
 801bd3c:	1b40      	subs	r0, r0, r5
 801bd3e:	461a      	mov	r2, r3
 801bd40:	b289      	uxth	r1, r1
 801bd42:	b280      	uxth	r0, r0
 801bd44:	f7ff ff82 	bl	801bc4c <TFT_DrawPixel>
        if (corner & 0x02) {	
 801bd48:	f01a 0f02 	tst.w	sl, #2
 801bd4c:	d01a      	beq.n	801bd84 <TFT_DrawCircleCorner+0xd4>
			TFT_DrawPixel(x0 + x, y0 - y, color);
 801bd4e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bd52:	9303      	str	r3, [sp, #12]
 801bd54:	fa1f f889 	uxth.w	r8, r9
 801bd58:	fa1f fb86 	uxth.w	fp, r6
 801bd5c:	1c78      	adds	r0, r7, #1
 801bd5e:	eba8 010b 	sub.w	r1, r8, fp
 801bd62:	4428      	add	r0, r5
 801bd64:	461a      	mov	r2, r3
 801bd66:	b289      	uxth	r1, r1
 801bd68:	b280      	uxth	r0, r0
 801bd6a:	f7ff ff6f 	bl	801bc4c <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 - x, color);
 801bd6e:	f108 31ff 	add.w	r1, r8, #4294967295
 801bd72:	9b03      	ldr	r3, [sp, #12]
 801bd74:	1b49      	subs	r1, r1, r5
 801bd76:	eb07 000b 	add.w	r0, r7, fp
 801bd7a:	461a      	mov	r2, r3
 801bd7c:	b289      	uxth	r1, r1
 801bd7e:	b280      	uxth	r0, r0
 801bd80:	f7ff ff64 	bl	801bc4c <TFT_DrawPixel>
		if (corner & 0x04) {	
 801bd84:	f01a 0f04 	tst.w	sl, #4
 801bd88:	d01a      	beq.n	801bdc0 <TFT_DrawCircleCorner+0x110>
			TFT_DrawPixel(x0 + x, y0 + y, color);
 801bd8a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bd8e:	9303      	str	r3, [sp, #12]
 801bd90:	fa1f f889 	uxth.w	r8, r9
 801bd94:	fa1f fb86 	uxth.w	fp, r6
 801bd98:	1c78      	adds	r0, r7, #1
 801bd9a:	eb08 010b 	add.w	r1, r8, fp
 801bd9e:	4428      	add	r0, r5
 801bda0:	461a      	mov	r2, r3
 801bda2:	b289      	uxth	r1, r1
 801bda4:	b280      	uxth	r0, r0
 801bda6:	f7ff ff51 	bl	801bc4c <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 + x, color);
 801bdaa:	f108 0101 	add.w	r1, r8, #1
 801bdae:	9b03      	ldr	r3, [sp, #12]
 801bdb0:	4429      	add	r1, r5
 801bdb2:	eb07 000b 	add.w	r0, r7, fp
 801bdb6:	461a      	mov	r2, r3
 801bdb8:	b289      	uxth	r1, r1
 801bdba:	b280      	uxth	r0, r0
 801bdbc:	f7ff ff46 	bl	801bc4c <TFT_DrawPixel>
        if (corner & 0x08) {	
 801bdc0:	f01a 0f08 	tst.w	sl, #8
 801bdc4:	d01a      	beq.n	801bdfc <TFT_DrawCircleCorner+0x14c>
			TFT_DrawPixel(x0 - x, y0 + y, color);
 801bdc6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bdca:	9303      	str	r3, [sp, #12]
 801bdcc:	fa1f fb89 	uxth.w	fp, r9
 801bdd0:	fa1f f886 	uxth.w	r8, r6
 801bdd4:	1e78      	subs	r0, r7, #1
 801bdd6:	eb0b 0108 	add.w	r1, fp, r8
 801bdda:	1b40      	subs	r0, r0, r5
 801bddc:	461a      	mov	r2, r3
 801bdde:	b289      	uxth	r1, r1
 801bde0:	b280      	uxth	r0, r0
 801bde2:	f7ff ff33 	bl	801bc4c <TFT_DrawPixel>
			TFT_DrawPixel(x0 - y, y0 + x, color);
 801bde6:	f10b 0101 	add.w	r1, fp, #1
 801bdea:	9b03      	ldr	r3, [sp, #12]
 801bdec:	4429      	add	r1, r5
 801bdee:	eba7 0008 	sub.w	r0, r7, r8
 801bdf2:	461a      	mov	r2, r3
 801bdf4:	b289      	uxth	r1, r1
 801bdf6:	b280      	uxth	r0, r0
 801bdf8:	f7ff ff28 	bl	801bc4c <TFT_DrawPixel>
 801bdfc:	9b00      	ldr	r3, [sp, #0]
 801bdfe:	3301      	adds	r3, #1
 801be00:	9300      	str	r3, [sp, #0]
 801be02:	e76a      	b.n	801bcda <TFT_DrawCircleCorner+0x2a>

0801be04 <TFT_DrawCircle>:
{
 801be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801be08:	b295      	uxth	r5, r2
{
 801be0a:	b089      	sub	sp, #36	; 0x24
 801be0c:	4690      	mov	r8, r2
	int16_t f = 1 - r;
 801be0e:	f1c5 0201 	rsb	r2, r5, #1
 801be12:	b212      	sxth	r2, r2
 801be14:	9201      	str	r2, [sp, #4]
	int16_t ddF_y = -2 * r;
 801be16:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
    TFT_DrawPixel(x0, y0 + r, color);
 801be1a:	b28f      	uxth	r7, r1
	int16_t ddF_y = -2 * r;
 801be1c:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801be1e:	b29c      	uxth	r4, r3
 801be20:	b286      	uxth	r6, r0
	int16_t ddF_y = -2 * r;
 801be22:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801be24:	19e9      	adds	r1, r5, r7
	int16_t ddF_y = -2 * r;
 801be26:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801be28:	b289      	uxth	r1, r1
 801be2a:	4622      	mov	r2, r4
 801be2c:	4630      	mov	r0, r6
 801be2e:	f7ff ff0d 	bl	801bc4c <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801be32:	1b79      	subs	r1, r7, r5
 801be34:	4622      	mov	r2, r4
 801be36:	b289      	uxth	r1, r1
 801be38:	4630      	mov	r0, r6
 801be3a:	f7ff ff07 	bl	801bc4c <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801be3e:	19a8      	adds	r0, r5, r6
 801be40:	4622      	mov	r2, r4
 801be42:	4639      	mov	r1, r7
 801be44:	b280      	uxth	r0, r0
 801be46:	f7ff ff01 	bl	801bc4c <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801be4a:	1b70      	subs	r0, r6, r5
 801be4c:	4622      	mov	r2, r4
 801be4e:	4639      	mov	r1, r7
 801be50:	b280      	uxth	r0, r0
 801be52:	f7ff fefb 	bl	801bc4c <TFT_DrawPixel>
    while (x < y) {
 801be56:	2300      	movs	r3, #0
 801be58:	9302      	str	r3, [sp, #8]
 801be5a:	1c73      	adds	r3, r6, #1
 801be5c:	9304      	str	r3, [sp, #16]
 801be5e:	1e73      	subs	r3, r6, #1
 801be60:	9305      	str	r3, [sp, #20]
 801be62:	1c7b      	adds	r3, r7, #1
 801be64:	9306      	str	r3, [sp, #24]
 801be66:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801be6a:	4543      	cmp	r3, r8
 801be6c:	db02      	blt.n	801be74 <TFT_DrawCircle+0x70>
}
 801be6e:	b009      	add	sp, #36	; 0x24
 801be70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801be74:	9b01      	ldr	r3, [sp, #4]
 801be76:	2b00      	cmp	r3, #0
 801be78:	db0c      	blt.n	801be94 <TFT_DrawCircle+0x90>
            ddF_y += 2;
 801be7a:	9b03      	ldr	r3, [sp, #12]
 801be7c:	3302      	adds	r3, #2
 801be7e:	b29b      	uxth	r3, r3
 801be80:	b21a      	sxth	r2, r3
 801be82:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801be84:	9a01      	ldr	r2, [sp, #4]
 801be86:	4413      	add	r3, r2
            y--;
 801be88:	f108 38ff 	add.w	r8, r8, #4294967295
            f += ddF_y;
 801be8c:	b21b      	sxth	r3, r3
            y--;
 801be8e:	fa0f f888 	sxth.w	r8, r8
            f += ddF_y;
 801be92:	9301      	str	r3, [sp, #4]
 801be94:	f8bd 9008 	ldrh.w	r9, [sp, #8]
        f += ddF_x;
 801be98:	9b01      	ldr	r3, [sp, #4]
 801be9a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 801be9e:	3303      	adds	r3, #3
 801bea0:	b21b      	sxth	r3, r3
 801bea2:	9301      	str	r3, [sp, #4]
 801bea4:	9b04      	ldr	r3, [sp, #16]
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801bea6:	fa1f f588 	uxth.w	r5, r8
 801beaa:	444b      	add	r3, r9
 801beac:	eb07 0b05 	add.w	fp, r7, r5
 801beb0:	b29b      	uxth	r3, r3
 801beb2:	fa1f fb8b 	uxth.w	fp, fp
 801beb6:	4659      	mov	r1, fp
 801beb8:	4618      	mov	r0, r3
 801beba:	4622      	mov	r2, r4
 801bebc:	9307      	str	r3, [sp, #28]
 801bebe:	f7ff fec5 	bl	801bc4c <TFT_DrawPixel>
 801bec2:	9b05      	ldr	r3, [sp, #20]
 801bec4:	eba3 0a09 	sub.w	sl, r3, r9
 801bec8:	fa1f fa8a 	uxth.w	sl, sl
        TFT_DrawPixel(x0 - x, y0 + y, color);
 801becc:	4659      	mov	r1, fp
 801bece:	4650      	mov	r0, sl
 801bed0:	4622      	mov	r2, r4
 801bed2:	f7ff febb 	bl	801bc4c <TFT_DrawPixel>
        TFT_DrawPixel(x0 + x, y0 - y, color);
 801bed6:	eba7 0b05 	sub.w	fp, r7, r5
 801beda:	9b07      	ldr	r3, [sp, #28]
 801bedc:	fa1f fb8b 	uxth.w	fp, fp
 801bee0:	4618      	mov	r0, r3
 801bee2:	4659      	mov	r1, fp
 801bee4:	4622      	mov	r2, r4
 801bee6:	f7ff feb1 	bl	801bc4c <TFT_DrawPixel>
        TFT_DrawPixel(x0 - x, y0 - y, color);
 801beea:	4659      	mov	r1, fp
 801beec:	4650      	mov	r0, sl
 801beee:	4622      	mov	r2, r4
 801bef0:	f7ff feac 	bl	801bc4c <TFT_DrawPixel>
 801bef4:	9b06      	ldr	r3, [sp, #24]
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801bef6:	eb06 0a05 	add.w	sl, r6, r5
 801befa:	eb09 0b03 	add.w	fp, r9, r3
 801befe:	fa1f fa8a 	uxth.w	sl, sl
 801bf02:	fa1f fb8b 	uxth.w	fp, fp
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801bf06:	1b75      	subs	r5, r6, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801bf08:	4622      	mov	r2, r4
 801bf0a:	4659      	mov	r1, fp
 801bf0c:	4650      	mov	r0, sl
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801bf0e:	b2ad      	uxth	r5, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801bf10:	f7ff fe9c 	bl	801bc4c <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801bf14:	4622      	mov	r2, r4
 801bf16:	4659      	mov	r1, fp
 801bf18:	4628      	mov	r0, r5
 801bf1a:	f7ff fe97 	bl	801bc4c <TFT_DrawPixel>
 801bf1e:	1e7b      	subs	r3, r7, #1
 801bf20:	eba3 0909 	sub.w	r9, r3, r9
 801bf24:	fa1f f989 	uxth.w	r9, r9
        TFT_DrawPixel(x0 + y, y0 - x, color);
 801bf28:	4622      	mov	r2, r4
 801bf2a:	4649      	mov	r1, r9
 801bf2c:	4650      	mov	r0, sl
 801bf2e:	f7ff fe8d 	bl	801bc4c <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801bf32:	4622      	mov	r2, r4
 801bf34:	4649      	mov	r1, r9
 801bf36:	4628      	mov	r0, r5
 801bf38:	f7ff fe88 	bl	801bc4c <TFT_DrawPixel>
 801bf3c:	9b02      	ldr	r3, [sp, #8]
 801bf3e:	3301      	adds	r3, #1
 801bf40:	9302      	str	r3, [sp, #8]
 801bf42:	e790      	b.n	801be66 <TFT_DrawCircle+0x62>

0801bf44 <TFT_DrawLine>:


int16_t prev_x=0, prev_y=0; 
//----------------------------------------
void TFT_DrawLine(uint16_t x0, uint16_t y0,	uint16_t x1, uint16_t y1, uint16_t color)
{
 801bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf48:	b085      	sub	sp, #20
 801bf4a:	469a      	mov	sl, r3
	int16_t dx, dy, sx, sy, err, e2;
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bf4c:	4290      	cmp	r0, r2
{
 801bf4e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bf52:	9301      	str	r3, [sp, #4]
 801bf54:	4607      	mov	r7, r0
 801bf56:	460e      	mov	r6, r1
 801bf58:	4693      	mov	fp, r2
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bf5a:	d211      	bcs.n	801bf80 <TFT_DrawLine+0x3c>
 801bf5c:	eba2 0800 	sub.w	r8, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bf60:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bf62:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bf66:	d341      	bcc.n	801bfec <TFT_DrawLine+0xa8>
	sx = (x0 < x1) ? 1 : -1; 
 801bf68:	455f      	cmp	r7, fp
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bf6a:	eba6 050a 	sub.w	r5, r6, sl
 801bf6e:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801bf70:	bf2c      	ite	cs
 801bf72:	f04f 39ff 	movcs.w	r9, #4294967295
 801bf76:	f04f 0901 	movcc.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
 801bf7a:	f04f 33ff 	mov.w	r3, #4294967295
 801bf7e:	e00b      	b.n	801bf98 <TFT_DrawLine+0x54>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bf80:	eba0 0802 	sub.w	r8, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bf84:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801bf86:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bf8a:	d2ed      	bcs.n	801bf68 <TFT_DrawLine+0x24>
 801bf8c:	ebaa 0501 	sub.w	r5, sl, r1
 801bf90:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801bf92:	f04f 39ff 	mov.w	r9, #4294967295
	sy = (y0 < y1) ? 1 : -1; 
 801bf96:	2301      	movs	r3, #1
	err = ((dx > dy) ? dx : -dy) / 2; 
 801bf98:	45a8      	cmp	r8, r5
 801bf9a:	f04f 0402 	mov.w	r4, #2
 801bf9e:	dd20      	ble.n	801bfe2 <TFT_DrawLine+0x9e>
 801bfa0:	fb98 f4f4 	sdiv	r4, r8, r4

		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 801bfa4:	f1c8 0200 	rsb	r2, r8, #0
 801bfa8:	9202      	str	r2, [sp, #8]
		TFT_DrawPixel(x0, y0, color); 
 801bfaa:	9a01      	ldr	r2, [sp, #4]
 801bfac:	9303      	str	r3, [sp, #12]
 801bfae:	4631      	mov	r1, r6
 801bfb0:	4638      	mov	r0, r7
 801bfb2:	f7ff fe4b 	bl	801bc4c <TFT_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 801bfb6:	455f      	cmp	r7, fp
 801bfb8:	9b03      	ldr	r3, [sp, #12]
 801bfba:	d101      	bne.n	801bfc0 <TFT_DrawLine+0x7c>
 801bfbc:	4556      	cmp	r6, sl
 801bfbe:	d01b      	beq.n	801bff8 <TFT_DrawLine+0xb4>
		if (e2 > -dx) {
 801bfc0:	9a02      	ldr	r2, [sp, #8]
 801bfc2:	4294      	cmp	r4, r2
			err -= dy;
 801bfc4:	bfc1      	itttt	gt
 801bfc6:	1b62      	subgt	r2, r4, r5
			x0 += sx;
 801bfc8:	444f      	addgt	r7, r9
			err -= dy;
 801bfca:	b212      	sxthgt	r2, r2
			x0 += sx;
 801bfcc:	b2bf      	uxthgt	r7, r7
 801bfce:	bfd8      	it	le
 801bfd0:	4622      	movle	r2, r4
		} 
		if (e2 < dy) {
 801bfd2:	42ac      	cmp	r4, r5
 801bfd4:	da03      	bge.n	801bfde <TFT_DrawLine+0x9a>
			err += dx;
 801bfd6:	4442      	add	r2, r8
			y0 += sy;
 801bfd8:	441e      	add	r6, r3
			err += dx;
 801bfda:	b212      	sxth	r2, r2
			y0 += sy;
 801bfdc:	b2b6      	uxth	r6, r6
	sy = (y0 < y1) ? 1 : -1; 
 801bfde:	4614      	mov	r4, r2
 801bfe0:	e7e3      	b.n	801bfaa <TFT_DrawLine+0x66>
	err = ((dx > dy) ? dx : -dy) / 2; 
 801bfe2:	fb95 f4f4 	sdiv	r4, r5, r4
 801bfe6:	4264      	negs	r4, r4
 801bfe8:	b224      	sxth	r4, r4
 801bfea:	e7db      	b.n	801bfa4 <TFT_DrawLine+0x60>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801bfec:	ebaa 0501 	sub.w	r5, sl, r1
 801bff0:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801bff2:	f04f 0901 	mov.w	r9, #1
 801bff6:	e7ce      	b.n	801bf96 <TFT_DrawLine+0x52>
		} 
	}
}
 801bff8:	b005      	add	sp, #20
 801bffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bffe <TFT_FillRectangle>:
{
 801bffe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801c002:	f8bd 8020 	ldrh.w	r8, [sp, #32]
{
 801c006:	4606      	mov	r6, r0
 801c008:	460c      	mov	r4, r1
 801c00a:	4617      	mov	r7, r2
 801c00c:	461d      	mov	r5, r3
	for (; y0 <= y1; y0++) {
 801c00e:	42ac      	cmp	r4, r5
 801c010:	d902      	bls.n	801c018 <TFT_FillRectangle+0x1a>
}
 801c012:	b002      	add	sp, #8
 801c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801c018:	4623      	mov	r3, r4
 801c01a:	4621      	mov	r1, r4
 801c01c:	f8cd 8000 	str.w	r8, [sp]
 801c020:	463a      	mov	r2, r7
 801c022:	4630      	mov	r0, r6
	for (; y0 <= y1; y0++) {
 801c024:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801c026:	f7ff ff8d 	bl	801bf44 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801c02a:	b2a4      	uxth	r4, r4
 801c02c:	e7ef      	b.n	801c00e <TFT_FillRectangle+0x10>

0801c02e <TFT_DrawRectangle>:
{
 801c02e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801c032:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801c036:	9400      	str	r4, [sp, #0]
{
 801c038:	461f      	mov	r7, r3
 801c03a:	4605      	mov	r5, r0
 801c03c:	4688      	mov	r8, r1
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801c03e:	460b      	mov	r3, r1
{
 801c040:	4616      	mov	r6, r2
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801c042:	f7ff ff7f 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(x0, y0, x0, y1, color);	/* Left */
 801c046:	463b      	mov	r3, r7
 801c048:	462a      	mov	r2, r5
 801c04a:	4641      	mov	r1, r8
 801c04c:	4628      	mov	r0, r5
 801c04e:	9400      	str	r4, [sp, #0]
 801c050:	f7ff ff78 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(x1, y0, x1, y1, color);	/* Right */
 801c054:	463b      	mov	r3, r7
 801c056:	4632      	mov	r2, r6
 801c058:	4641      	mov	r1, r8
 801c05a:	4630      	mov	r0, r6
 801c05c:	9400      	str	r4, [sp, #0]
 801c05e:	f7ff ff71 	bl	801bf44 <TFT_DrawLine>
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801c062:	463b      	mov	r3, r7
 801c064:	4632      	mov	r2, r6
 801c066:	4639      	mov	r1, r7
 801c068:	4628      	mov	r0, r5
 801c06a:	9408      	str	r4, [sp, #32]
}
 801c06c:	b002      	add	sp, #8
 801c06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801c072:	f7ff bf67 	b.w	801bf44 <TFT_DrawLine>

0801c076 <TFT_DrawFilledCircle>:
{
 801c076:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801c07a:	b297      	uxth	r7, r2
{
 801c07c:	4691      	mov	r9, r2
	int16_t ddF_y = -2 * r;
 801c07e:	ebc7 32c7 	rsb	r2, r7, r7, lsl #15
{
 801c082:	b089      	sub	sp, #36	; 0x24
    TFT_DrawPixel(x0, y0 + r, color);
 801c084:	b28d      	uxth	r5, r1
	int16_t ddF_y = -2 * r;
 801c086:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801c088:	b29e      	uxth	r6, r3
 801c08a:	fa1f f880 	uxth.w	r8, r0
	int16_t ddF_y = -2 * r;
 801c08e:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801c090:	1979      	adds	r1, r7, r5
	int16_t ddF_y = -2 * r;
 801c092:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801c094:	b289      	uxth	r1, r1
 801c096:	4632      	mov	r2, r6
 801c098:	4640      	mov	r0, r8
 801c09a:	f7ff fdd7 	bl	801bc4c <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801c09e:	eb07 0a08 	add.w	sl, r7, r8
    TFT_DrawPixel(x0, y0 - r, color);
 801c0a2:	1be9      	subs	r1, r5, r7
	int16_t f = 1 - r;
 801c0a4:	f1c7 0401 	rsb	r4, r7, #1
    TFT_DrawPixel(x0, y0 - r, color);
 801c0a8:	4632      	mov	r2, r6
 801c0aa:	b289      	uxth	r1, r1
 801c0ac:	4640      	mov	r0, r8
    TFT_DrawPixel(x0 + r, y0, color);
 801c0ae:	fa1f fa8a 	uxth.w	sl, sl
    TFT_DrawPixel(x0 - r, y0, color);
 801c0b2:	eba8 0707 	sub.w	r7, r8, r7
    TFT_DrawPixel(x0, y0 - r, color);
 801c0b6:	f7ff fdc9 	bl	801bc4c <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801c0ba:	b2bf      	uxth	r7, r7
    TFT_DrawPixel(x0 + r, y0, color);
 801c0bc:	4632      	mov	r2, r6
 801c0be:	4629      	mov	r1, r5
 801c0c0:	4650      	mov	r0, sl
 801c0c2:	f7ff fdc3 	bl	801bc4c <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801c0c6:	4632      	mov	r2, r6
 801c0c8:	4629      	mov	r1, r5
 801c0ca:	4638      	mov	r0, r7
 801c0cc:	f7ff fdbe 	bl	801bc4c <TFT_DrawPixel>
    TFT_DrawLine(x0 - r, y0, x0 + r, y0, color);
 801c0d0:	462b      	mov	r3, r5
 801c0d2:	9600      	str	r6, [sp, #0]
 801c0d4:	4652      	mov	r2, sl
 801c0d6:	4629      	mov	r1, r5
 801c0d8:	4638      	mov	r0, r7
 801c0da:	f7ff ff33 	bl	801bf44 <TFT_DrawLine>
    while (x < y) {
 801c0de:	2300      	movs	r3, #0
 801c0e0:	9302      	str	r3, [sp, #8]
 801c0e2:	f108 33ff 	add.w	r3, r8, #4294967295
 801c0e6:	9305      	str	r3, [sp, #20]
 801c0e8:	f108 0301 	add.w	r3, r8, #1
 801c0ec:	9306      	str	r3, [sp, #24]
 801c0ee:	1c6b      	adds	r3, r5, #1
	int16_t f = 1 - r;
 801c0f0:	b224      	sxth	r4, r4
 801c0f2:	9307      	str	r3, [sp, #28]
    while (x < y) {
 801c0f4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c0f8:	454b      	cmp	r3, r9
 801c0fa:	db02      	blt.n	801c102 <TFT_DrawFilledCircle+0x8c>
}
 801c0fc:	b009      	add	sp, #36	; 0x24
 801c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c102:	2c00      	cmp	r4, #0
 801c104:	db0a      	blt.n	801c11c <TFT_DrawFilledCircle+0xa6>
            ddF_y += 2;
 801c106:	9b03      	ldr	r3, [sp, #12]
 801c108:	3302      	adds	r3, #2
 801c10a:	b29b      	uxth	r3, r3
            y--;
 801c10c:	f109 39ff 	add.w	r9, r9, #4294967295
            ddF_y += 2;
 801c110:	b21a      	sxth	r2, r3
            f += ddF_y;
 801c112:	441c      	add	r4, r3
            y--;
 801c114:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
 801c118:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801c11a:	b224      	sxth	r4, r4
 801c11c:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801c120:	9b05      	ldr	r3, [sp, #20]
 801c122:	9a06      	ldr	r2, [sp, #24]
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801c124:	9600      	str	r6, [sp, #0]
 801c126:	fa1f f789 	uxth.w	r7, r9
 801c12a:	eba3 0b0a 	sub.w	fp, r3, sl
 801c12e:	19eb      	adds	r3, r5, r7
 801c130:	fa1f fb8b 	uxth.w	fp, fp
 801c134:	b29b      	uxth	r3, r3
 801c136:	4452      	add	r2, sl
 801c138:	b292      	uxth	r2, r2
 801c13a:	4619      	mov	r1, r3
 801c13c:	4658      	mov	r0, fp
 801c13e:	9204      	str	r2, [sp, #16]
 801c140:	f7ff ff00 	bl	801bf44 <TFT_DrawLine>
        TFT_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 801c144:	1beb      	subs	r3, r5, r7
 801c146:	b29b      	uxth	r3, r3
 801c148:	465a      	mov	r2, fp
 801c14a:	4619      	mov	r1, r3
 801c14c:	9804      	ldr	r0, [sp, #16]
 801c14e:	9600      	str	r6, [sp, #0]
 801c150:	f7ff fef8 	bl	801bf44 <TFT_DrawLine>
 801c154:	9b07      	ldr	r3, [sp, #28]
        TFT_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 801c156:	9600      	str	r6, [sp, #0]
 801c158:	eb08 0b07 	add.w	fp, r8, r7
 801c15c:	4453      	add	r3, sl
 801c15e:	eba8 0707 	sub.w	r7, r8, r7
 801c162:	b29b      	uxth	r3, r3
 801c164:	fa1f fb8b 	uxth.w	fp, fp
 801c168:	b2bf      	uxth	r7, r7
 801c16a:	4619      	mov	r1, r3
 801c16c:	463a      	mov	r2, r7
 801c16e:	4658      	mov	r0, fp
 801c170:	f7ff fee8 	bl	801bf44 <TFT_DrawLine>
 801c174:	1e6b      	subs	r3, r5, #1
 801c176:	eba3 030a 	sub.w	r3, r3, sl
 801c17a:	b29b      	uxth	r3, r3
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801c17c:	4619      	mov	r1, r3
 801c17e:	9600      	str	r6, [sp, #0]
 801c180:	463a      	mov	r2, r7
 801c182:	4658      	mov	r0, fp
 801c184:	f7ff fede 	bl	801bf44 <TFT_DrawLine>
 801c188:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801c18a:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 801c18e:	3403      	adds	r4, #3
 801c190:	3301      	adds	r3, #1
 801c192:	b224      	sxth	r4, r4
 801c194:	9302      	str	r3, [sp, #8]
 801c196:	e7ad      	b.n	801c0f4 <TFT_DrawFilledCircle+0x7e>

0801c198 <TFT_DrawFilledCircleCorner>:
{
 801c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c19c:	4699      	mov	r9, r3
	int16_t f = 1 - r;
 801c19e:	b293      	uxth	r3, r2
 801c1a0:	f1c3 0601 	rsb	r6, r3, #1
	int16_t ddF_y = -2 * r;
 801c1a4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801c1a8:	b087      	sub	sp, #28
	int16_t ddF_y = -2 * r;
 801c1aa:	005b      	lsls	r3, r3, #1
 801c1ac:	b21b      	sxth	r3, r3
 801c1ae:	9304      	str	r3, [sp, #16]
    while (x < y) {
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	9302      	str	r3, [sp, #8]
        if (corner & 0x01) {
 801c1b4:	f009 0301 	and.w	r3, r9, #1
{
 801c1b8:	9103      	str	r1, [sp, #12]
 801c1ba:	4617      	mov	r7, r2
	int16_t f = 1 - r;
 801c1bc:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801c1be:	9305      	str	r3, [sp, #20]
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801c1c0:	b284      	uxth	r4, r0
    while (x < y) {
 801c1c2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c1c6:	42bb      	cmp	r3, r7
 801c1c8:	db02      	blt.n	801c1d0 <TFT_DrawFilledCircleCorner+0x38>
}
 801c1ca:	b007      	add	sp, #28
 801c1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c1d0:	2e00      	cmp	r6, #0
 801c1d2:	db08      	blt.n	801c1e6 <TFT_DrawFilledCircleCorner+0x4e>
            ddF_y += 2;
 801c1d4:	9b04      	ldr	r3, [sp, #16]
 801c1d6:	3302      	adds	r3, #2
 801c1d8:	b29b      	uxth	r3, r3
            y--;
 801c1da:	3f01      	subs	r7, #1
            ddF_y += 2;
 801c1dc:	b21a      	sxth	r2, r3
            f += ddF_y;
 801c1de:	441e      	add	r6, r3
            y--;
 801c1e0:	b23f      	sxth	r7, r7
            ddF_y += 2;
 801c1e2:	9204      	str	r2, [sp, #16]
            f += ddF_y;
 801c1e4:	b236      	sxth	r6, r6
 801c1e6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
        if (corner & 0x01) {
 801c1ea:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 801c1ec:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801c1f0:	3603      	adds	r6, #3
 801c1f2:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801c1f4:	b1f3      	cbz	r3, 801c234 <TFT_DrawFilledCircleCorner+0x9c>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801c1f6:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c1fa:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c1fe:	f8cd b000 	str.w	fp, [sp]
 801c202:	fa1f fa87 	uxth.w	sl, r7
 801c206:	eba8 030a 	sub.w	r3, r8, sl
 801c20a:	1e62      	subs	r2, r4, #1
 801c20c:	b29b      	uxth	r3, r3
 801c20e:	1b52      	subs	r2, r2, r5
 801c210:	4619      	mov	r1, r3
 801c212:	b292      	uxth	r2, r2
 801c214:	4620      	mov	r0, r4
 801c216:	f7ff fe95 	bl	801bf44 <TFT_DrawLine>
 801c21a:	f108 33ff 	add.w	r3, r8, #4294967295
 801c21e:	1b5b      	subs	r3, r3, r5
 801c220:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 801c222:	eba4 020a 	sub.w	r2, r4, sl
 801c226:	f8cd b000 	str.w	fp, [sp]
 801c22a:	b292      	uxth	r2, r2
 801c22c:	4619      	mov	r1, r3
 801c22e:	4620      	mov	r0, r4
 801c230:	f7ff fe88 	bl	801bf44 <TFT_DrawLine>
        if (corner & 0x02) {	
 801c234:	f019 0f02 	tst.w	r9, #2
 801c238:	d01e      	beq.n	801c278 <TFT_DrawFilledCircleCorner+0xe0>
			TFT_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 801c23a:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c23e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c242:	f8cd b000 	str.w	fp, [sp]
 801c246:	fa1f fa87 	uxth.w	sl, r7
 801c24a:	eba8 030a 	sub.w	r3, r8, sl
 801c24e:	1c60      	adds	r0, r4, #1
 801c250:	b29b      	uxth	r3, r3
 801c252:	4428      	add	r0, r5
 801c254:	4619      	mov	r1, r3
 801c256:	4622      	mov	r2, r4
 801c258:	b280      	uxth	r0, r0
 801c25a:	f7ff fe73 	bl	801bf44 <TFT_DrawLine>
 801c25e:	f108 33ff 	add.w	r3, r8, #4294967295
 801c262:	1b5b      	subs	r3, r3, r5
 801c264:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 801c266:	eb04 000a 	add.w	r0, r4, sl
 801c26a:	f8cd b000 	str.w	fp, [sp]
 801c26e:	4622      	mov	r2, r4
 801c270:	4619      	mov	r1, r3
 801c272:	b280      	uxth	r0, r0
 801c274:	f7ff fe66 	bl	801bf44 <TFT_DrawLine>
		if (corner & 0x04) {
 801c278:	f019 0f04 	tst.w	r9, #4
 801c27c:	d01e      	beq.n	801c2bc <TFT_DrawFilledCircleCorner+0x124>
			TFT_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 801c27e:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c282:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c286:	f8cd b000 	str.w	fp, [sp]
 801c28a:	fa1f fa87 	uxth.w	sl, r7
 801c28e:	eb08 030a 	add.w	r3, r8, sl
 801c292:	1c62      	adds	r2, r4, #1
 801c294:	b29b      	uxth	r3, r3
 801c296:	442a      	add	r2, r5
 801c298:	4619      	mov	r1, r3
 801c29a:	b292      	uxth	r2, r2
 801c29c:	4620      	mov	r0, r4
 801c29e:	f7ff fe51 	bl	801bf44 <TFT_DrawLine>
 801c2a2:	f108 0301 	add.w	r3, r8, #1
 801c2a6:	442b      	add	r3, r5
 801c2a8:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 801c2aa:	eb04 000a 	add.w	r0, r4, sl
 801c2ae:	f8cd b000 	str.w	fp, [sp]
 801c2b2:	4622      	mov	r2, r4
 801c2b4:	4619      	mov	r1, r3
 801c2b6:	b280      	uxth	r0, r0
 801c2b8:	f7ff fe44 	bl	801bf44 <TFT_DrawLine>
        if (corner & 0x08) {
 801c2bc:	f019 0f08 	tst.w	r9, #8
 801c2c0:	d01e      	beq.n	801c300 <TFT_DrawFilledCircleCorner+0x168>
			TFT_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 801c2c2:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c2c6:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c2ca:	f8cd b000 	str.w	fp, [sp]
 801c2ce:	fa1f fa87 	uxth.w	sl, r7
 801c2d2:	eb08 030a 	add.w	r3, r8, sl
 801c2d6:	1e60      	subs	r0, r4, #1
 801c2d8:	b29b      	uxth	r3, r3
 801c2da:	1b40      	subs	r0, r0, r5
 801c2dc:	4619      	mov	r1, r3
 801c2de:	4622      	mov	r2, r4
 801c2e0:	b280      	uxth	r0, r0
 801c2e2:	f7ff fe2f 	bl	801bf44 <TFT_DrawLine>
 801c2e6:	f108 0301 	add.w	r3, r8, #1
 801c2ea:	442b      	add	r3, r5
 801c2ec:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 801c2ee:	eba4 020a 	sub.w	r2, r4, sl
 801c2f2:	f8cd b000 	str.w	fp, [sp]
 801c2f6:	b292      	uxth	r2, r2
 801c2f8:	4619      	mov	r1, r3
 801c2fa:	4620      	mov	r0, r4
 801c2fc:	f7ff fe22 	bl	801bf44 <TFT_DrawLine>
 801c300:	9b02      	ldr	r3, [sp, #8]
 801c302:	3301      	adds	r3, #1
 801c304:	9302      	str	r3, [sp, #8]
 801c306:	e75c      	b.n	801c1c2 <TFT_DrawFilledCircleCorner+0x2a>

0801c308 <TFT_DrawFilledRoundedRectangle>:
{
 801c308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (x1 == x0 || y1 == y0) {
 801c30c:	4282      	cmp	r2, r0
{
 801c30e:	4683      	mov	fp, r0
 801c310:	460d      	mov	r5, r1
 801c312:	4692      	mov	sl, r2
 801c314:	461c      	mov	r4, r3
 801c316:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801c31a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (x1 == x0 || y1 == y0) {
 801c31e:	d06d      	beq.n	801c3fc <TFT_DrawFilledRoundedRectangle+0xf4>
 801c320:	428b      	cmp	r3, r1
 801c322:	d06b      	beq.n	801c3fc <TFT_DrawFilledRoundedRectangle+0xf4>
	if (r == 0) {
 801c324:	b91e      	cbnz	r6, 801c32e <TFT_DrawFilledRoundedRectangle+0x26>
		TFT_FillRectangle(x0, y0, x1, y1, color);
 801c326:	f8cd 8000 	str.w	r8, [sp]
 801c32a:	f7ff fe68 	bl	801bffe <TFT_FillRectangle>
	if (x0 > x1) {
 801c32e:	45da      	cmp	sl, fp
 801c330:	bf3e      	ittt	cc
 801c332:	465b      	movcc	r3, fp
 801c334:	46d3      	movcc	fp, sl
 801c336:	469a      	movcc	sl, r3
	if (y0 > y1) {
 801c338:	42ac      	cmp	r4, r5
 801c33a:	bf38      	it	cc
 801c33c:	462b      	movcc	r3, r5
	if (r > ((x1 - x0) / 2)) {
 801c33e:	ebaa 010b 	sub.w	r1, sl, fp
	if (y0 > y1) {
 801c342:	bf3c      	itt	cc
 801c344:	4625      	movcc	r5, r4
 801c346:	461c      	movcc	r4, r3
	if (r > ((x1 - x0) / 2)) {
 801c348:	2302      	movs	r3, #2
 801c34a:	fb91 f1f3 	sdiv	r1, r1, r3
 801c34e:	428e      	cmp	r6, r1
		r = (x1 - x0) / 2;
 801c350:	bfc8      	it	gt
 801c352:	b28e      	uxthgt	r6, r1
 801c354:	461a      	mov	r2, r3
	if (r > ((y1 - y0) / 2)) {
 801c356:	1b63      	subs	r3, r4, r5
 801c358:	fb93 f3f2 	sdiv	r3, r3, r2
 801c35c:	429e      	cmp	r6, r3
		r = (y1 - y0) / 2;
 801c35e:	bfc8      	it	gt
 801c360:	b29e      	uxthgt	r6, r3
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801c362:	eb0b 0706 	add.w	r7, fp, r6
 801c366:	ebaa 0906 	sub.w	r9, sl, r6
 801c36a:	b2bf      	uxth	r7, r7
 801c36c:	fa1f f989 	uxth.w	r9, r9
 801c370:	4623      	mov	r3, r4
 801c372:	4629      	mov	r1, r5
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801c374:	1ba4      	subs	r4, r4, r6
 801c376:	4435      	add	r5, r6
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801c378:	464a      	mov	r2, r9
 801c37a:	4638      	mov	r0, r7
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801c37c:	b2ad      	uxth	r5, r5
 801c37e:	b2a4      	uxth	r4, r4
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801c380:	f8cd 8000 	str.w	r8, [sp]
 801c384:	f7ff fe3b 	bl	801bffe <TFT_FillRectangle>
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801c388:	4623      	mov	r3, r4
 801c38a:	463a      	mov	r2, r7
 801c38c:	4629      	mov	r1, r5
 801c38e:	4658      	mov	r0, fp
 801c390:	f8cd 8000 	str.w	r8, [sp]
 801c394:	f7ff fe33 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c398:	b236      	sxth	r6, r6
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801c39a:	4623      	mov	r3, r4
 801c39c:	4652      	mov	r2, sl
 801c39e:	4629      	mov	r1, r5
 801c3a0:	4648      	mov	r0, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c3a2:	b23f      	sxth	r7, r7
 801c3a4:	b22d      	sxth	r5, r5
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801c3a6:	f8cd 8000 	str.w	r8, [sp]
 801c3aa:	f7ff fe28 	bl	801bffe <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801c3ae:	fa0f f989 	sxth.w	r9, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c3b2:	4632      	mov	r2, r6
 801c3b4:	4629      	mov	r1, r5
 801c3b6:	4638      	mov	r0, r7
 801c3b8:	f8cd 8000 	str.w	r8, [sp]
 801c3bc:	2301      	movs	r3, #1
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801c3be:	3c01      	subs	r4, #1
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c3c0:	f7ff feea 	bl	801c198 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801c3c4:	b224      	sxth	r4, r4
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801c3c6:	4632      	mov	r2, r6
 801c3c8:	4629      	mov	r1, r5
 801c3ca:	4648      	mov	r0, r9
 801c3cc:	f8cd 8000 	str.w	r8, [sp]
 801c3d0:	2302      	movs	r3, #2
 801c3d2:	f7ff fee1 	bl	801c198 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801c3d6:	4632      	mov	r2, r6
 801c3d8:	4621      	mov	r1, r4
 801c3da:	4648      	mov	r0, r9
 801c3dc:	f8cd 8000 	str.w	r8, [sp]
 801c3e0:	2304      	movs	r3, #4
 801c3e2:	f7ff fed9 	bl	801c198 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801c3e6:	2308      	movs	r3, #8
 801c3e8:	4632      	mov	r2, r6
 801c3ea:	4621      	mov	r1, r4
 801c3ec:	4638      	mov	r0, r7
 801c3ee:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 801c3f2:	b003      	add	sp, #12
 801c3f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801c3f8:	f7ff bece 	b.w	801c198 <TFT_DrawFilledCircleCorner>
}
 801c3fc:	b003      	add	sp, #12
 801c3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c402 <TFT_DrawBitmap>:
	}
}


void TFT_DrawBitmap(uint16_t X1, uint16_t Y1, sImage pbmp)
{
 801c402:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c406:	4688      	mov	r8, r1
 801c408:	a902      	add	r1, sp, #8
 801c40a:	e901 000c 	stmdb	r1, {r2, r3}
 801c40e:	4607      	mov	r7, r0
	uint16_t Xpos, Ypos;
	uint32_t i = 0;
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801c410:	4645      	mov	r5, r8
	uint32_t i = 0;
 801c412:	2400      	movs	r4, #0
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801c414:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c418:	4443      	add	r3, r8
 801c41a:	429d      	cmp	r5, r3
 801c41c:	da15      	bge.n	801c44a <TFT_DrawBitmap+0x48>
 801c41e:	0066      	lsls	r6, r4, #1
 801c420:	eba7 0904 	sub.w	r9, r7, r4
 801c424:	e006      	b.n	801c434 <TFT_DrawBitmap+0x32>
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801c426:	9b01      	ldr	r3, [sp, #4]
 801c428:	4629      	mov	r1, r5
 801c42a:	5b9a      	ldrh	r2, [r3, r6]
 801c42c:	f7ff fc0e 	bl	801bc4c <TFT_DrawPixel>
			i++;
 801c430:	3401      	adds	r4, #1
 801c432:	3602      	adds	r6, #2
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801c434:	f8bd 3000 	ldrh.w	r3, [sp]
 801c438:	eb09 0004 	add.w	r0, r9, r4
 801c43c:	b280      	uxth	r0, r0
 801c43e:	443b      	add	r3, r7
 801c440:	4298      	cmp	r0, r3
 801c442:	dbf0      	blt.n	801c426 <TFT_DrawBitmap+0x24>
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801c444:	3501      	adds	r5, #1
 801c446:	b2ad      	uxth	r5, r5
 801c448:	e7e4      	b.n	801c414 <TFT_DrawBitmap+0x12>
		}
	}
}
 801c44a:	b003      	add	sp, #12
 801c44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801c450 <TFT_SetFont>:

//----------------------------------------

void TFT_SetFont(sFONT *fonts)
{
  lcdprop.pFont=fonts;
 801c450:	4b01      	ldr	r3, [pc, #4]	; (801c458 <TFT_SetFont+0x8>)
 801c452:	6098      	str	r0, [r3, #8]
 801c454:	4770      	bx	lr
 801c456:	bf00      	nop
 801c458:	200956a4 	.word	0x200956a4

0801c45c <TFT_SetTextColor>:

//----------------------------------------

void TFT_SetTextColor(uint32_t color)
{
  lcdprop.TextColor=color;
 801c45c:	4b01      	ldr	r3, [pc, #4]	; (801c464 <TFT_SetTextColor+0x8>)
 801c45e:	6018      	str	r0, [r3, #0]
 801c460:	4770      	bx	lr
 801c462:	bf00      	nop
 801c464:	200956a4 	.word	0x200956a4

0801c468 <TFT_SetBackColor>:

//----------------------------------------

void TFT_SetBackColor(uint32_t color)
{
  lcdprop.BackColor=color;
 801c468:	4b01      	ldr	r3, [pc, #4]	; (801c470 <TFT_SetBackColor+0x8>)
 801c46a:	6058      	str	r0, [r3, #4]
 801c46c:	4770      	bx	lr
 801c46e:	bf00      	nop
 801c470:	200956a4 	.word	0x200956a4

0801c474 <TFT_DrawCharRus>:

//----------------------------------------
	//--------------------------------------------------------------

void TFT_DrawCharRus(uint16_t x, uint16_t y, const uint8_t c)
{
 801c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c478:	b085      	sub	sp, #20
  uint32_t i = 0, j = 0;
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
	if(c == 0x01)
 801c47a:	2a01      	cmp	r2, #1
{
 801c47c:	9001      	str	r0, [sp, #4]
 801c47e:	9102      	str	r1, [sp, #8]
 801c480:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801c538 <TFT_DrawCharRus+0xc4>
 801c484:	482b      	ldr	r0, [pc, #172]	; (801c534 <TFT_DrawCharRus+0xc0>)
	if(c == 0x01)
 801c486:	d11f      	bne.n	801c4c8 <TFT_DrawCharRus+0x54>
	{
		ch = &lcdprop.pFont->table[0];
 801c488:	6882      	ldr	r2, [r0, #8]
 801c48a:	6812      	ldr	r2, [r2, #0]
	}
	else
	{
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801c48c:	f8cb 2000 	str.w	r2, [fp]
	}
	
	height = lcdprop.pFont->Height;
 801c490:	6882      	ldr	r2, [r0, #8]
	width = lcdprop.pFont->Width;
 801c492:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	height = lcdprop.pFont->Height;
 801c496:	88d3      	ldrh	r3, [r2, #6]
 801c498:	9300      	str	r3, [sp, #0]
	offset = 8 *((width + 7)/8) - width ;
 801c49a:	f10a 0507 	add.w	r5, sl, #7
 801c49e:	10ed      	asrs	r5, r5, #3
 801c4a0:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
			break;
		}
		for (j = 0; j < width; j++)
		{
				if(line & (1 << (width- j + offset- 1)))
 801c4a4:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0; i < height; i++)
 801c4a8:	2600      	movs	r6, #0
				if(line & (1 << (width- j + offset- 1)))
 801c4aa:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0; i < height; i++)
 801c4ae:	46b0      	mov	r8, r6
				if(line & (1 << (width- j + offset- 1)))
 801c4b0:	9303      	str	r3, [sp, #12]
 801c4b2:	9b02      	ldr	r3, [sp, #8]
 801c4b4:	eb03 0908 	add.w	r9, r3, r8
	for(i = 0; i < height; i++)
 801c4b8:	9b00      	ldr	r3, [sp, #0]
 801c4ba:	4598      	cmp	r8, r3
 801c4bc:	fa1f f989 	uxth.w	r9, r9
 801c4c0:	d30e      	bcc.n	801c4e0 <TFT_DrawCharRus+0x6c>
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801c4c2:	b005      	add	sp, #20
 801c4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801c4c8:	6884      	ldr	r4, [r0, #8]
 801c4ca:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 801c4ce:	88e2      	ldrh	r2, [r4, #6]
 801c4d0:	434a      	muls	r2, r1
 801c4d2:	88a1      	ldrh	r1, [r4, #4]
 801c4d4:	6824      	ldr	r4, [r4, #0]
 801c4d6:	3107      	adds	r1, #7
 801c4d8:	10c9      	asrs	r1, r1, #3
 801c4da:	fb01 4202 	mla	r2, r1, r2, r4
 801c4de:	e7d5      	b.n	801c48c <TFT_DrawCharRus+0x18>
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801c4e0:	f8db 2000 	ldr.w	r2, [fp]
		switch((width + 7)/8)
 801c4e4:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801c4e6:	eb02 0106 	add.w	r1, r2, r6
 801c4ea:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801c4ec:	d00a      	beq.n	801c504 <TFT_DrawCharRus+0x90>
 801c4ee:	784a      	ldrb	r2, [r1, #1]
 801c4f0:	2d02      	cmp	r5, #2
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801c4f2:	bf1d      	ittte	ne
 801c4f4:	0212      	lslne	r2, r2, #8
 801c4f6:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801c4fa:	788a      	ldrbne	r2, [r1, #2]
				line = (pchar[0]<< 8) | pchar[1];
 801c4fc:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801c500:	bf18      	it	ne
 801c502:	4314      	orrne	r4, r2
		for (j = 0; j < width; j++)
 801c504:	2700      	movs	r7, #0
 801c506:	4557      	cmp	r7, sl
 801c508:	d303      	bcc.n	801c512 <TFT_DrawCharRus+0x9e>
	for(i = 0; i < height; i++)
 801c50a:	f108 0801 	add.w	r8, r8, #1
 801c50e:	442e      	add	r6, r5
 801c510:	e7cf      	b.n	801c4b2 <TFT_DrawCharRus+0x3e>
				if(line & (1 << (width- j + offset- 1)))
 801c512:	9b03      	ldr	r3, [sp, #12]
 801c514:	1bd9      	subs	r1, r3, r7
 801c516:	9b01      	ldr	r3, [sp, #4]
 801c518:	2201      	movs	r2, #1
 801c51a:	408a      	lsls	r2, r1
 801c51c:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801c51e:	4b05      	ldr	r3, [pc, #20]	; (801c534 <TFT_DrawCharRus+0xc0>)
				if(line & (1 << (width- j + offset- 1)))
 801c520:	4222      	tst	r2, r4
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801c522:	bf14      	ite	ne
 801c524:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801c526:	889a      	ldrheq	r2, [r3, #4]
 801c528:	4649      	mov	r1, r9
 801c52a:	b280      	uxth	r0, r0
 801c52c:	f7ff fb8e 	bl	801bc4c <TFT_DrawPixel>
		for (j = 0; j < width; j++)
 801c530:	3701      	adds	r7, #1
 801c532:	e7e8      	b.n	801c506 <TFT_DrawCharRus+0x92>
 801c534:	200956a4 	.word	0x200956a4
 801c538:	200956b4 	.word	0x200956b4

0801c53c <TFT_DrawCutBMP>:


	uint16_t Xpos, Ypos;
	uint32_t ip = 0;
void TFT_DrawCutBMP(uint16_t x_pos, uint16_t y_pos, uint16_t xs, uint16_t ys, uint16_t size, sImage pbmp)
{
 801c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c540:	b085      	sub	sp, #20
	uint16_t q = 1;
	ip = pbmp.Width*ys+xs-1;
 801c542:	4d25      	ldr	r5, [pc, #148]	; (801c5d8 <TFT_DrawCutBMP+0x9c>)
 801c544:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
{
 801c548:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
	
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c54c:	4c23      	ldr	r4, [pc, #140]	; (801c5dc <TFT_DrawCutBMP+0xa0>)
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c54e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801c5e0 <TFT_DrawCutBMP+0xa4>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c552:	8021      	strh	r1, [r4, #0]
	ip = pbmp.Width*ys+xs-1;
 801c554:	fb09 2303 	mla	r3, r9, r3, r2
 801c558:	1e5a      	subs	r2, r3, #1
 801c55a:	602a      	str	r2, [r5, #0]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c55c:	19ca      	adds	r2, r1, r7
{
 801c55e:	4683      	mov	fp, r0
	uint16_t q = 1;
 801c560:	2601      	movs	r6, #1
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c562:	9202      	str	r2, [sp, #8]
 801c564:	8822      	ldrh	r2, [r4, #0]
 801c566:	9902      	ldr	r1, [sp, #8]
 801c568:	428a      	cmp	r2, r1
 801c56a:	db02      	blt.n	801c572 <TFT_DrawCutBMP+0x36>
				{ip = ip + pbmp.Width-size+1; 
					q++;}
		}
	}
	
}
 801c56c:	b005      	add	sp, #20
 801c56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c572:	eb0b 0207 	add.w	r2, fp, r7
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801c576:	eb03 0a07 	add.w	sl, r3, r7
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c57a:	f8a8 b000 	strh.w	fp, [r8]
 801c57e:	9201      	str	r2, [sp, #4]
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801c580:	f1aa 0a02 	sub.w	sl, sl, #2
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c584:	f8b8 0000 	ldrh.w	r0, [r8]
 801c588:	9a01      	ldr	r2, [sp, #4]
 801c58a:	4290      	cmp	r0, r2
 801c58c:	db03      	blt.n	801c596 <TFT_DrawCutBMP+0x5a>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801c58e:	8822      	ldrh	r2, [r4, #0]
 801c590:	3201      	adds	r2, #1
 801c592:	8022      	strh	r2, [r4, #0]
 801c594:	e7e6      	b.n	801c564 <TFT_DrawCutBMP+0x28>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
 801c596:	6829      	ldr	r1, [r5, #0]
 801c598:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c59a:	9303      	str	r3, [sp, #12]
 801c59c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801c5a0:	8821      	ldrh	r1, [r4, #0]
 801c5a2:	f7ff fb53 	bl	801bc4c <TFT_DrawPixel>
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801c5a6:	682a      	ldr	r2, [r5, #0]
 801c5a8:	9b03      	ldr	r3, [sp, #12]
 801c5aa:	1e71      	subs	r1, r6, #1
 801c5ac:	fb09 a101 	mla	r1, r9, r1, sl
 801c5b0:	4291      	cmp	r1, r2
 801c5b2:	f102 0201 	add.w	r2, r2, #1
				{ip = ip + pbmp.Width-size+1; 
 801c5b6:	bf9b      	ittet	ls
 801c5b8:	444a      	addls	r2, r9
 801c5ba:	1bd2      	subls	r2, r2, r7
				{	ip++;} 
 801c5bc:	602a      	strhi	r2, [r5, #0]
				{ip = ip + pbmp.Width-size+1; 
 801c5be:	602a      	strls	r2, [r5, #0]
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c5c0:	f8b8 2000 	ldrh.w	r2, [r8]
					q++;}
 801c5c4:	bf98      	it	ls
 801c5c6:	3601      	addls	r6, #1
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c5c8:	f102 0201 	add.w	r2, r2, #1
					q++;}
 801c5cc:	bf98      	it	ls
 801c5ce:	b2b6      	uxthls	r6, r6
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801c5d0:	f8a8 2000 	strh.w	r2, [r8]
 801c5d4:	e7d6      	b.n	801c584 <TFT_DrawCutBMP+0x48>
 801c5d6:	bf00      	nop
 801c5d8:	20009d0c 	.word	0x20009d0c
 801c5dc:	200956a0 	.word	0x200956a0
 801c5e0:	200956b0 	.word	0x200956b0

0801c5e4 <TFT_DrawChar>:
		i++;
	}
}

void TFT_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 801c5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i=0, j=0;
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line;
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c5e8:	4b28      	ldr	r3, [pc, #160]	; (801c68c <TFT_DrawChar+0xa8>)
{
 801c5ea:	b085      	sub	sp, #20
 801c5ec:	e88d 0003 	stmia.w	sp, {r0, r1}
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c5f0:	6899      	ldr	r1, [r3, #8]
 801c5f2:	4827      	ldr	r0, [pc, #156]	; (801c690 <TFT_DrawChar+0xac>)
		((lcdprop.pFont->Width +7) / 8)];
 801c5f4:	f8b1 a004 	ldrh.w	sl, [r1, #4]
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c5f8:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 801c5fc:	6809      	ldr	r1, [r1, #0]
 801c5fe:	9002      	str	r0, [sp, #8]
		((lcdprop.pFont->Width +7) / 8)];
 801c600:	f10a 0507 	add.w	r5, sl, #7
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c604:	3a20      	subs	r2, #32
		((lcdprop.pFont->Width +7) / 8)];
 801c606:	10ed      	asrs	r5, r5, #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801c608:	fb0b f202 	mul.w	r2, fp, r2
 801c60c:	fb05 1202 	mla	r2, r5, r2, r1
 801c610:	6002      	str	r2, [r0, #0]
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 * ((width + 7)/8) - width;
 801c612:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
			break;
		}
		for(j = 0;j < width; j++)
		{
			if(line & (1 << (width - j + offset -1)))
 801c616:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0;i < height; i++)
 801c61a:	2600      	movs	r6, #0
			if(line & (1 << (width - j + offset -1)))
 801c61c:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0;i < height; i++)
 801c620:	46b0      	mov	r8, r6
			if(line & (1 << (width - j + offset -1)))
 801c622:	9303      	str	r3, [sp, #12]
 801c624:	9b01      	ldr	r3, [sp, #4]
	for(i = 0;i < height; i++)
 801c626:	45d8      	cmp	r8, fp
 801c628:	eb03 0908 	add.w	r9, r3, r8
 801c62c:	fa1f f989 	uxth.w	r9, r9
 801c630:	d302      	bcc.n	801c638 <TFT_DrawChar+0x54>
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801c632:	b005      	add	sp, #20
 801c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801c638:	9b02      	ldr	r3, [sp, #8]
 801c63a:	681a      	ldr	r2, [r3, #0]
		switch((width + 7)/8)
 801c63c:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801c63e:	eb02 0106 	add.w	r1, r2, r6
 801c642:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801c644:	d00a      	beq.n	801c65c <TFT_DrawChar+0x78>
 801c646:	784a      	ldrb	r2, [r1, #1]
 801c648:	2d02      	cmp	r5, #2
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801c64a:	bf1d      	ittte	ne
 801c64c:	0212      	lslne	r2, r2, #8
 801c64e:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801c652:	788a      	ldrbne	r2, [r1, #2]
			line = (pchar[0]<<8) | pchar[1];
 801c654:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801c658:	bf18      	it	ne
 801c65a:	4314      	orrne	r4, r2
		for(j = 0;j < width; j++)
 801c65c:	2700      	movs	r7, #0
 801c65e:	4557      	cmp	r7, sl
 801c660:	d303      	bcc.n	801c66a <TFT_DrawChar+0x86>
	for(i = 0;i < height; i++)
 801c662:	f108 0801 	add.w	r8, r8, #1
 801c666:	442e      	add	r6, r5
 801c668:	e7dc      	b.n	801c624 <TFT_DrawChar+0x40>
			if(line & (1 << (width - j + offset -1)))
 801c66a:	9b03      	ldr	r3, [sp, #12]
 801c66c:	1bd9      	subs	r1, r3, r7
 801c66e:	9b00      	ldr	r3, [sp, #0]
 801c670:	2201      	movs	r2, #1
 801c672:	408a      	lsls	r2, r1
 801c674:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801c676:	4b05      	ldr	r3, [pc, #20]	; (801c68c <TFT_DrawChar+0xa8>)
			if(line & (1 << (width - j + offset -1)))
 801c678:	4222      	tst	r2, r4
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801c67a:	bf14      	ite	ne
 801c67c:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801c67e:	889a      	ldrheq	r2, [r3, #4]
 801c680:	4649      	mov	r1, r9
 801c682:	b280      	uxth	r0, r0
 801c684:	f7ff fae2 	bl	801bc4c <TFT_DrawPixel>
		for(j = 0;j < width; j++)
 801c688:	3701      	adds	r7, #1
 801c68a:	e7e8      	b.n	801c65e <TFT_DrawChar+0x7a>
 801c68c:	200956a4 	.word	0x200956a4
 801c690:	200956b4 	.word	0x200956b4

0801c694 <TFT_DisplayString>:
//----------------------------------------
void TFT_DisplayString(uint16_t Xpos, uint16_t Ypos, const uint8_t *Text,	Text_AlignModeTypdef Mode)
{
 801c694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c698:	460e      	mov	r6, r1
 801c69a:	4604      	mov	r4, r0
 801c69c:	4615      	mov	r5, r2
	uint16_t ref_column = 1, i = 0;
	uint32_t size = 0, xsize = 0;
	const uint8_t *ptr = Text;
 801c69e:	4611      	mov	r1, r2
 801c6a0:	eba1 0e05 	sub.w	lr, r1, r5
	
	while(*ptr++) size++ ;
 801c6a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c6a8:	2a00      	cmp	r2, #0
 801c6aa:	d1f9      	bne.n	801c6a0 <TFT_DisplayString+0xc>
	xsize = (X_SIZE/lcdprop.pFont->Width);
 801c6ac:	4f1b      	ldr	r7, [pc, #108]	; (801c71c <TFT_DisplayString+0x88>)
 801c6ae:	f8df 8070 	ldr.w	r8, [pc, #112]	; 801c720 <TFT_DisplayString+0x8c>
 801c6b2:	68ba      	ldr	r2, [r7, #8]
 801c6b4:	f8b8 1000 	ldrh.w	r1, [r8]
 801c6b8:	8890      	ldrh	r0, [r2, #4]
 801c6ba:	fbb1 f2f0 	udiv	r2, r1, r0
	switch (Mode)
 801c6be:	2b01      	cmp	r3, #1
 801c6c0:	d017      	beq.n	801c6f2 <TFT_DisplayString+0x5e>
 801c6c2:	2b02      	cmp	r3, #2
 801c6c4:	d01c      	beq.n	801c700 <TFT_DisplayString+0x6c>
		{
			ref_column = Xpos;
			break;
		}
	}
	if((ref_column < 1) || (ref_column >= 0x8000))
 801c6c6:	b223      	sxth	r3, r4
	{
		ref_column = 1;
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	bfd8      	it	le
 801c6cc:	2401      	movle	r4, #1
 801c6ce:	46a9      	mov	r9, r5
	}
	
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801c6d0:	68b9      	ldr	r1, [r7, #8]
 801c6d2:	f8b8 0000 	ldrh.w	r0, [r8]
 801c6d6:	8889      	ldrh	r1, [r1, #4]
 801c6d8:	eba9 0305 	sub.w	r3, r9, r5
 801c6dc:	b29b      	uxth	r3, r3
 801c6de:	fb01 0313 	mls	r3, r1, r3, r0
 801c6e2:	b29b      	uxth	r3, r3
 801c6e4:	4299      	cmp	r1, r3
 801c6e6:	f819 2b01 	ldrb.w	r2, [r9], #1
 801c6ea:	dc00      	bgt.n	801c6ee <TFT_DisplayString+0x5a>
 801c6ec:	b96a      	cbnz	r2, 801c70a <TFT_DisplayString+0x76>
 801c6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width) / 2;
 801c6f2:	eba2 020e 	sub.w	r2, r2, lr
 801c6f6:	4342      	muls	r2, r0
 801c6f8:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801c6fc:	b2a4      	uxth	r4, r4
			break;
 801c6fe:	e7e2      	b.n	801c6c6 <TFT_DisplayString+0x32>
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801c700:	eba2 020e 	sub.w	r2, r2, lr
 801c704:	fb12 4400 	smlabb	r4, r2, r0, r4
 801c708:	e7f8      	b.n	801c6fc <TFT_DisplayString+0x68>
			lcdprop.pFont->Width))
	{
		TFT_DrawChar(ref_column, Ypos, *Text);
 801c70a:	4620      	mov	r0, r4
 801c70c:	4631      	mov	r1, r6
 801c70e:	f7ff ff69 	bl	801c5e4 <TFT_DrawChar>
		ref_column += lcdprop.pFont->Width;
 801c712:	68bb      	ldr	r3, [r7, #8]
 801c714:	889b      	ldrh	r3, [r3, #4]
 801c716:	441c      	add	r4, r3
 801c718:	b2a4      	uxth	r4, r4
 801c71a:	e7d9      	b.n	801c6d0 <TFT_DisplayString+0x3c>
 801c71c:	200956a4 	.word	0x200956a4
 801c720:	20000eb8 	.word	0x20000eb8

0801c724 <DrawLineX>:
		Text++;
		i++;
	}
}

void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801c724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801c728:	1a5f      	subs	r7, r3, r1
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801c72a:	4616      	mov	r6, r2
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801c72c:	eba6 0800 	sub.w	r8, r6, r0
 801c730:	2f00      	cmp	r7, #0
 801c732:	bfb8      	it	lt
 801c734:	427f      	neglt	r7, r7
 801c736:	f1b8 0f00 	cmp.w	r8, #0
 801c73a:	bfb8      	it	lt
 801c73c:	f1c8 0800 	rsblt	r8, r8, #0
    if (steep){
 801c740:	4547      	cmp	r7, r8
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801c742:	4604      	mov	r4, r0
 801c744:	460d      	mov	r5, r1
 801c746:	461a      	mov	r2, r3
 801c748:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    if (steep){
 801c74c:	dd04      	ble.n	801c758 <DrawLineX+0x34>
 801c74e:	4633      	mov	r3, r6
        swap(x1, y1);
 801c750:	460c      	mov	r4, r1
        swap(x2, y2);
 801c752:	4616      	mov	r6, r2
        swap(x1, y1);
 801c754:	4605      	mov	r5, r0
        swap(x2, y2);
 801c756:	461a      	mov	r2, r3
    }
    if(x1>x2){
 801c758:	42b4      	cmp	r4, r6
 801c75a:	d905      	bls.n	801c768 <DrawLineX+0x44>
 801c75c:	462b      	mov	r3, r5
        swap(x1, x2);
        swap(y1, y2);
 801c75e:	4615      	mov	r5, r2
 801c760:	461a      	mov	r2, r3
    if(x1>x2){
 801c762:	4623      	mov	r3, r4
 801c764:	4634      	mov	r4, r6
 801c766:	461e      	mov	r6, r3
    }
    int dx,dy;
    dx=x2-x1;
    dy=abs(y2-y1);
 801c768:	eba2 0905 	sub.w	r9, r2, r5
 801c76c:	464b      	mov	r3, r9
 801c76e:	2b00      	cmp	r3, #0
 801c770:	bfb8      	it	lt
 801c772:	425b      	neglt	r3, r3
    dx=x2-x1;
 801c774:	eba6 0a04 	sub.w	sl, r6, r4
    dy=abs(y2-y1);
 801c778:	9301      	str	r3, [sp, #4]
    int err=dx/2;
 801c77a:	2302      	movs	r3, #2
 801c77c:	fb9a f9f3 	sdiv	r9, sl, r3
    int ystep;
    if(y1<y2) ystep = 1;
    else  ystep = -1;
 801c780:	4295      	cmp	r5, r2
 801c782:	bf34      	ite	cc
 801c784:	2301      	movcc	r3, #1
 801c786:	f04f 33ff 	movcs.w	r3, #4294967295
 801c78a:	9300      	str	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801c78c:	42b4      	cmp	r4, r6
 801c78e:	d902      	bls.n	801c796 <DrawLineX+0x72>
        if (err<0){
            y1 += ystep;
            err+=dx;
        }
    }
}
 801c790:	b003      	add	sp, #12
 801c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801c796:	4547      	cmp	r7, r8
 801c798:	bfcb      	itete	gt
 801c79a:	4628      	movgt	r0, r5
        else {TFT_DrawPixel(x1, y1, color);
 801c79c:	4629      	movle	r1, r5
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801c79e:	4621      	movgt	r1, r4
        else {TFT_DrawPixel(x1, y1, color);
 801c7a0:	4620      	movle	r0, r4
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801c7a2:	465a      	mov	r2, fp
        else {TFT_DrawPixel(x1, y1, color);
 801c7a4:	f7ff fa52 	bl	801bc4c <TFT_DrawPixel>
        if (err<0){
 801c7a8:	9b01      	ldr	r3, [sp, #4]
 801c7aa:	ebb9 0903 	subs.w	r9, r9, r3
            y1 += ystep;
 801c7ae:	bf48      	it	mi
 801c7b0:	9b00      	ldrmi	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801c7b2:	f104 0401 	add.w	r4, r4, #1
            y1 += ystep;
 801c7b6:	bf42      	ittt	mi
 801c7b8:	18ed      	addmi	r5, r5, r3
 801c7ba:	b2ad      	uxthmi	r5, r5
            err+=dx;
 801c7bc:	44d1      	addmi	r9, sl
    for ( ; x1<=x2; x1++){
 801c7be:	b2a4      	uxth	r4, r4
 801c7c0:	e7e4      	b.n	801c78c <DrawLineX+0x68>
	...

0801c7c4 <MX_SDMMC1_SD_Init>:

/* SDMMC1 init function */
static void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 801c7c4:	4b06      	ldr	r3, [pc, #24]	; (801c7e0 <MX_SDMMC1_SD_Init+0x1c>)
 801c7c6:	4a07      	ldr	r2, [pc, #28]	; (801c7e4 <MX_SDMMC1_SD_Init+0x20>)
 801c7c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801c7ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801c7ce:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801c7d0:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 10;
 801c7d2:	210a      	movs	r1, #10
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801c7d4:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801c7d6:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801c7d8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 801c7da:	6159      	str	r1, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801c7dc:	619a      	str	r2, [r3, #24]
 801c7de:	4770      	bx	lr
 801c7e0:	200957b8 	.word	0x200957b8
 801c7e4:	50062400 	.word	0x50062400

0801c7e8 <MX_TIM2_Init>:
{
 801c7e8:	b510      	push	{r4, lr}
  htim2.Init.Period = exposure_timer_period[exp_num];
 801c7ea:	4a16      	ldr	r2, [pc, #88]	; (801c844 <MX_TIM2_Init+0x5c>)
  htim2.Instance = TIM2;
 801c7ec:	4c16      	ldr	r4, [pc, #88]	; (801c848 <MX_TIM2_Init+0x60>)
  htim2.Init.Period = exposure_timer_period[exp_num];
 801c7ee:	7811      	ldrb	r1, [r2, #0]
 801c7f0:	4a16      	ldr	r2, [pc, #88]	; (801c84c <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 10000;
 801c7f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801c7f6:	f242 7310 	movw	r3, #10000	; 0x2710
 801c7fa:	e884 0009 	stmia.w	r4, {r0, r3}
{
 801c7fe:	b088      	sub	sp, #32
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801c800:	2300      	movs	r3, #0
  htim2.Init.Period = exposure_timer_period[exp_num];
 801c802:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801c806:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801c808:	4620      	mov	r0, r4
  htim2.Init.Period = exposure_timer_period[exp_num];
 801c80a:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801c80c:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801c80e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801c810:	f7e9 fc3a 	bl	8006088 <HAL_TIM_Base_Init>
 801c814:	b100      	cbz	r0, 801c818 <MX_TIM2_Init+0x30>
 801c816:	e7fe      	b.n	801c816 <MX_TIM2_Init+0x2e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801c818:	a908      	add	r1, sp, #32
 801c81a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801c81e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801c822:	4620      	mov	r0, r4
 801c824:	f7e9 fd8c 	bl	8006340 <HAL_TIM_ConfigClockSource>
 801c828:	b100      	cbz	r0, 801c82c <MX_TIM2_Init+0x44>
 801c82a:	e7fe      	b.n	801c82a <MX_TIM2_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801c82c:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801c82e:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801c830:	a901      	add	r1, sp, #4
 801c832:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801c834:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801c836:	f7e9 fea7 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 801c83a:	b100      	cbz	r0, 801c83e <MX_TIM2_Init+0x56>
 801c83c:	e7fe      	b.n	801c83c <MX_TIM2_Init+0x54>
}
 801c83e:	b008      	add	sp, #32
 801c840:	bd10      	pop	{r4, pc}
 801c842:	bf00      	nop
 801c844:	200905a6 	.word	0x200905a6
 801c848:	20095c14 	.word	0x20095c14
 801c84c:	080314c0 	.word	0x080314c0

0801c850 <DWT_Init>:
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) 
 801c850:	4a07      	ldr	r2, [pc, #28]	; (801c870 <DWT_Init+0x20>)
 801c852:	68d3      	ldr	r3, [r2, #12]
 801c854:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 801c858:	d109      	bne.n	801c86e <DWT_Init+0x1e>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801c85a:	68d1      	ldr	r1, [r2, #12]
 801c85c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 801c860:	60d1      	str	r1, [r2, #12]
    DWT->CYCCNT = 0;
 801c862:	4a04      	ldr	r2, [pc, #16]	; (801c874 <DWT_Init+0x24>)
 801c864:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801c866:	6813      	ldr	r3, [r2, #0]
 801c868:	f043 0301 	orr.w	r3, r3, #1
 801c86c:	6013      	str	r3, [r2, #0]
 801c86e:	4770      	bx	lr
 801c870:	e000edf0 	.word	0xe000edf0
 801c874:	e0001000 	.word	0xe0001000

0801c878 <DWT_Delay>:
  return DWT->CYCCNT;
 801c878:	4a07      	ldr	r2, [pc, #28]	; (801c898 <DWT_Delay+0x20>)
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801c87a:	4b08      	ldr	r3, [pc, #32]	; (801c89c <DWT_Delay+0x24>)
  return DWT->CYCCNT;
 801c87c:	6851      	ldr	r1, [r2, #4]
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801c87e:	681b      	ldr	r3, [r3, #0]
{
 801c880:	b510      	push	{r4, lr}
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801c882:	4c07      	ldr	r4, [pc, #28]	; (801c8a0 <DWT_Delay+0x28>)
 801c884:	fbb3 f3f4 	udiv	r3, r3, r4
 801c888:	fb00 1003 	mla	r0, r0, r3, r1
  return DWT->CYCCNT;
 801c88c:	6853      	ldr	r3, [r2, #4]
  return (((int32_t)DWT_Get() - tp) < 0);
 801c88e:	1a1b      	subs	r3, r3, r0
  while (DWT_Compare(tp));
 801c890:	2b00      	cmp	r3, #0
 801c892:	dbfb      	blt.n	801c88c <DWT_Delay+0x14>
}
 801c894:	bd10      	pop	{r4, pc}
 801c896:	bf00      	nop
 801c898:	e0001000 	.word	0xe0001000
 801c89c:	20000ec4 	.word	0x20000ec4
 801c8a0:	000f4240 	.word	0x000f4240

0801c8a4 <Calculate_Data>:
{
 801c8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801c8a6:	4a78      	ldr	r2, [pc, #480]	; (801ca88 <Calculate_Data+0x1e4>)
 801c8a8:	4b78      	ldr	r3, [pc, #480]	; (801ca8c <Calculate_Data+0x1e8>)
 801c8aa:	4979      	ldr	r1, [pc, #484]	; (801ca90 <Calculate_Data+0x1ec>)
 801c8ac:	4879      	ldr	r0, [pc, #484]	; (801ca94 <Calculate_Data+0x1f0>)
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801c8ae:	4d7a      	ldr	r5, [pc, #488]	; (801ca98 <Calculate_Data+0x1f4>)
	if(GUI_screen_state == Color_Screen)
 801c8b0:	4f7a      	ldr	r7, [pc, #488]	; (801ca9c <Calculate_Data+0x1f8>)
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801c8b2:	f7f1 fc1d 	bl	800e0f0 <Calculate_XYZ1964>
	Calculate_xy1964(colorimetry_XYZ1964);
 801c8b6:	487a      	ldr	r0, [pc, #488]	; (801caa0 <Calculate_Data+0x1fc>)
 801c8b8:	f7f1 fcb6 	bl	800e228 <Calculate_xy1964>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801c8bc:	4b79      	ldr	r3, [pc, #484]	; (801caa4 <Calculate_Data+0x200>)
 801c8be:	4a7a      	ldr	r2, [pc, #488]	; (801caa8 <Calculate_Data+0x204>)
 801c8c0:	497a      	ldr	r1, [pc, #488]	; (801caac <Calculate_Data+0x208>)
 801c8c2:	4874      	ldr	r0, [pc, #464]	; (801ca94 <Calculate_Data+0x1f0>)
 801c8c4:	f7f1 fc62 	bl	800e18c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801c8c8:	4879      	ldr	r0, [pc, #484]	; (801cab0 <Calculate_Data+0x20c>)
 801c8ca:	f7f1 fccb 	bl	800e264 <Calculate_xy1931>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801c8ce:	7829      	ldrb	r1, [r5, #0]
 801c8d0:	4870      	ldr	r0, [pc, #448]	; (801ca94 <Calculate_Data+0x1f0>)
 801c8d2:	f7f1 fd2d 	bl	800e330 <Calculate_Tc>
 801c8d6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801c8da:	4b76      	ldr	r3, [pc, #472]	; (801cab4 <Calculate_Data+0x210>)
 801c8dc:	ee17 2a90 	vmov	r2, s15
 801c8e0:	801a      	strh	r2, [r3, #0]
	if(GUI_screen_state == Color_Screen)
 801c8e2:	783a      	ldrb	r2, [r7, #0]
 801c8e4:	2a05      	cmp	r2, #5
 801c8e6:	d114      	bne.n	801c912 <Calculate_Data+0x6e>
		if(Color_Field&Color_CIE_Luv) {Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);} else 
 801c8e8:	4b73      	ldr	r3, [pc, #460]	; (801cab8 <Calculate_Data+0x214>)
 801c8ea:	781b      	ldrb	r3, [r3, #0]
 801c8ec:	075a      	lsls	r2, r3, #29
 801c8ee:	f140 80ba 	bpl.w	801ca66 <Calculate_Data+0x1c2>
 801c8f2:	7828      	ldrb	r0, [r5, #0]
 801c8f4:	4e71      	ldr	r6, [pc, #452]	; (801cabc <Calculate_Data+0x218>)
 801c8f6:	4c72      	ldr	r4, [pc, #456]	; (801cac0 <Calculate_Data+0x21c>)
 801c8f8:	2800      	cmp	r0, #0
 801c8fa:	bf0c      	ite	eq
 801c8fc:	4630      	moveq	r0, r6
 801c8fe:	4620      	movne	r0, r4
 801c900:	f7f1 fcf2 	bl	800e2e8 <Calculate_uv1976>
 801c904:	7828      	ldrb	r0, [r5, #0]
 801c906:	2800      	cmp	r0, #0
 801c908:	bf0c      	ite	eq
 801c90a:	4630      	moveq	r0, r6
 801c90c:	4620      	movne	r0, r4
 801c90e:	f7f1 fcc7 	bl	800e2a0 <Calculate_uv>
	if(GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen|| GUI_screen_state == Measure3_Screen)
 801c912:	783b      	ldrb	r3, [r7, #0]
 801c914:	3b01      	subs	r3, #1
 801c916:	2b02      	cmp	r3, #2
 801c918:	f200 80a4 	bhi.w	801ca64 <Calculate_Data+0x1c0>
			if(Measure_Field&Illuminance) {E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);}
 801c91c:	4c69      	ldr	r4, [pc, #420]	; (801cac4 <Calculate_Data+0x220>)
 801c91e:	8823      	ldrh	r3, [r4, #0]
 801c920:	07de      	lsls	r6, r3, #31
 801c922:	d506      	bpl.n	801c932 <Calculate_Data+0x8e>
 801c924:	4960      	ldr	r1, [pc, #384]	; (801caa8 <Calculate_Data+0x204>)
 801c926:	485b      	ldr	r0, [pc, #364]	; (801ca94 <Calculate_Data+0x1f0>)
 801c928:	f7f1 fa84 	bl	800de34 <Calculate_EL_Day>
 801c92c:	4b66      	ldr	r3, [pc, #408]	; (801cac8 <Calculate_Data+0x224>)
 801c92e:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&Irradiance) {E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);}
 801c932:	8823      	ldrh	r3, [r4, #0]
 801c934:	0798      	lsls	r0, r3, #30
 801c936:	d505      	bpl.n	801c944 <Calculate_Data+0xa0>
 801c938:	4856      	ldr	r0, [pc, #344]	; (801ca94 <Calculate_Data+0x1f0>)
 801c93a:	f7f1 fa9b 	bl	800de74 <Calculate_EL_Day_Wt>
 801c93e:	4b63      	ldr	r3, [pc, #396]	; (801cacc <Calculate_Data+0x228>)
 801c940:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801c944:	8823      	ldrh	r3, [r4, #0]
 801c946:	0499      	lsls	r1, r3, #18
 801c948:	d519      	bpl.n	801c97e <Calculate_Data+0xda>
 801c94a:	4961      	ldr	r1, [pc, #388]	; (801cad0 <Calculate_Data+0x22c>)
 801c94c:	4851      	ldr	r0, [pc, #324]	; (801ca94 <Calculate_Data+0x1f0>)
 801c94e:	4e61      	ldr	r6, [pc, #388]	; (801cad4 <Calculate_Data+0x230>)
 801c950:	4f5d      	ldr	r7, [pc, #372]	; (801cac8 <Calculate_Data+0x224>)
 801c952:	f7f1 faa7 	bl	800dea4 <Calculate_EL_Night>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c956:	8822      	ldrh	r2, [r4, #0]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801c958:	ed86 0a00 	vstr	s0, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c95c:	f012 0f01 	tst.w	r2, #1
 801c960:	f040 808f 	bne.w	801ca82 <Calculate_Data+0x1de>
 801c964:	4950      	ldr	r1, [pc, #320]	; (801caa8 <Calculate_Data+0x204>)
 801c966:	484b      	ldr	r0, [pc, #300]	; (801ca94 <Calculate_Data+0x1f0>)
 801c968:	f7f1 fa64 	bl	800de34 <Calculate_EL_Day>
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801c96c:	edd6 0a00 	vldr	s1, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c970:	ed87 0a00 	vstr	s0, [r7]
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801c974:	f7f1 fab6 	bl	800dee4 <Calculate_SP>
 801c978:	4b57      	ldr	r3, [pc, #348]	; (801cad8 <Calculate_Data+0x234>)
 801c97a:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD) {PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));//*100000
 801c97e:	8823      	ldrh	r3, [r4, #0]
 801c980:	075a      	lsls	r2, r3, #29
 801c982:	d506      	bpl.n	801c992 <Calculate_Data+0xee>
 801c984:	4955      	ldr	r1, [pc, #340]	; (801cadc <Calculate_Data+0x238>)
 801c986:	4843      	ldr	r0, [pc, #268]	; (801ca94 <Calculate_Data+0x1f0>)
 801c988:	f7f1 faba 	bl	800df00 <Calculate_PPFD_PPL>
 801c98c:	4b54      	ldr	r3, [pc, #336]	; (801cae0 <Calculate_Data+0x23c>)
 801c98e:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801c992:	8823      	ldrh	r3, [r4, #0]
 801c994:	071b      	lsls	r3, r3, #28
 801c996:	d51f      	bpl.n	801c9d8 <Calculate_Data+0x134>
 801c998:	2200      	movs	r2, #0
 801c99a:	4950      	ldr	r1, [pc, #320]	; (801cadc <Calculate_Data+0x238>)
 801c99c:	483d      	ldr	r0, [pc, #244]	; (801ca94 <Calculate_Data+0x1f0>)
 801c99e:	f7f1 fb1b 	bl	800dfd8 <Calculate_PPFD_PPL_Range>
 801c9a2:	4b50      	ldr	r3, [pc, #320]	; (801cae4 <Calculate_Data+0x240>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801c9a4:	494d      	ldr	r1, [pc, #308]	; (801cadc <Calculate_Data+0x238>)
 801c9a6:	483b      	ldr	r0, [pc, #236]	; (801ca94 <Calculate_Data+0x1f0>)
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801c9a8:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801c9ac:	2201      	movs	r2, #1
 801c9ae:	f7f1 fb13 	bl	800dfd8 <Calculate_PPFD_PPL_Range>
 801c9b2:	4b4d      	ldr	r3, [pc, #308]	; (801cae8 <Calculate_Data+0x244>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801c9b4:	4949      	ldr	r1, [pc, #292]	; (801cadc <Calculate_Data+0x238>)
 801c9b6:	4837      	ldr	r0, [pc, #220]	; (801ca94 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801c9b8:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801c9bc:	2202      	movs	r2, #2
 801c9be:	f7f1 fb0b 	bl	800dfd8 <Calculate_PPFD_PPL_Range>
 801c9c2:	4b4a      	ldr	r3, [pc, #296]	; (801caec <Calculate_Data+0x248>)
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801c9c4:	4945      	ldr	r1, [pc, #276]	; (801cadc <Calculate_Data+0x238>)
 801c9c6:	4833      	ldr	r0, [pc, #204]	; (801ca94 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801c9c8:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801c9cc:	2203      	movs	r2, #3
 801c9ce:	f7f1 fb03 	bl	800dfd8 <Calculate_PPFD_PPL_Range>
 801c9d2:	4b47      	ldr	r3, [pc, #284]	; (801caf0 <Calculate_Data+0x24c>)
 801c9d4:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&delta_E){delta_Eab_Measure = Calculate_deltaEab();}
 801c9d8:	8823      	ldrh	r3, [r4, #0]
 801c9da:	051f      	lsls	r7, r3, #20
 801c9dc:	d503      	bpl.n	801c9e6 <Calculate_Data+0x142>
 801c9de:	f7f2 f883 	bl	800eae8 <Calculate_deltaEab>
 801c9e2:	4b44      	ldr	r3, [pc, #272]	; (801caf4 <Calculate_Data+0x250>)
 801c9e4:	8018      	strh	r0, [r3, #0]
			if(Measure_Field&CIE_Luv){Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);}
 801c9e6:	8823      	ldrh	r3, [r4, #0]
 801c9e8:	065e      	lsls	r6, r3, #25
 801c9ea:	d50f      	bpl.n	801ca0c <Calculate_Data+0x168>
 801c9ec:	7828      	ldrb	r0, [r5, #0]
 801c9ee:	4f33      	ldr	r7, [pc, #204]	; (801cabc <Calculate_Data+0x218>)
 801c9f0:	4e33      	ldr	r6, [pc, #204]	; (801cac0 <Calculate_Data+0x21c>)
 801c9f2:	2800      	cmp	r0, #0
 801c9f4:	bf0c      	ite	eq
 801c9f6:	4638      	moveq	r0, r7
 801c9f8:	4630      	movne	r0, r6
 801c9fa:	f7f1 fc75 	bl	800e2e8 <Calculate_uv1976>
 801c9fe:	7828      	ldrb	r0, [r5, #0]
 801ca00:	2800      	cmp	r0, #0
 801ca02:	bf0c      	ite	eq
 801ca04:	4638      	moveq	r0, r7
 801ca06:	4630      	movne	r0, r6
 801ca08:	f7f1 fc4a 	bl	800e2a0 <Calculate_uv>
			if(Measure_Field&CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801ca0c:	8823      	ldrh	r3, [r4, #0]
 801ca0e:	0618      	lsls	r0, r3, #24
 801ca10:	d509      	bpl.n	801ca26 <Calculate_Data+0x182>
 801ca12:	4b39      	ldr	r3, [pc, #228]	; (801caf8 <Calculate_Data+0x254>)
 801ca14:	7829      	ldrb	r1, [r5, #0]
 801ca16:	781a      	ldrb	r2, [r3, #0]
 801ca18:	4821      	ldr	r0, [pc, #132]	; (801caa0 <Calculate_Data+0x1fc>)
 801ca1a:	4b25      	ldr	r3, [pc, #148]	; (801cab0 <Calculate_Data+0x20c>)
 801ca1c:	2900      	cmp	r1, #0
 801ca1e:	bf18      	it	ne
 801ca20:	4618      	movne	r0, r3
 801ca22:	f7f1 fe21 	bl	800e668 <Calculate_Lab>
			if(Measure_Field&lambda_d){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801ca26:	8823      	ldrh	r3, [r4, #0]
 801ca28:	0599      	lsls	r1, r3, #22
 801ca2a:	d503      	bpl.n	801ca34 <Calculate_Data+0x190>
 801ca2c:	7829      	ldrb	r1, [r5, #0]
 801ca2e:	4819      	ldr	r0, [pc, #100]	; (801ca94 <Calculate_Data+0x1f0>)
 801ca30:	f7f1 ff50 	bl	800e8d4 <Calculate_Lambda_Dominant>
			if(Measure_Field&lambda_c){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801ca34:	8823      	ldrh	r3, [r4, #0]
 801ca36:	055a      	lsls	r2, r3, #21
 801ca38:	d503      	bpl.n	801ca42 <Calculate_Data+0x19e>
 801ca3a:	7829      	ldrb	r1, [r5, #0]
 801ca3c:	4815      	ldr	r0, [pc, #84]	; (801ca94 <Calculate_Data+0x1f0>)
 801ca3e:	f7f1 ff49 	bl	800e8d4 <Calculate_Lambda_Dominant>
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801ca42:	8823      	ldrh	r3, [r4, #0]
 801ca44:	04db      	lsls	r3, r3, #19
 801ca46:	d50d      	bpl.n	801ca64 <Calculate_Data+0x1c0>
 801ca48:	492c      	ldr	r1, [pc, #176]	; (801cafc <Calculate_Data+0x258>)
 801ca4a:	4812      	ldr	r0, [pc, #72]	; (801ca94 <Calculate_Data+0x1f0>)
 801ca4c:	f7f1 fb4e 	bl	800e0ec <Calculate_ELr>
 801ca50:	4b2b      	ldr	r3, [pc, #172]	; (801cb00 <Calculate_Data+0x25c>)
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801ca52:	492c      	ldr	r1, [pc, #176]	; (801cb04 <Calculate_Data+0x260>)
 801ca54:	480f      	ldr	r0, [pc, #60]	; (801ca94 <Calculate_Data+0x1f0>)
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801ca56:	ed83 0a00 	vstr	s0, [r3]
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801ca5a:	f7f1 fb2d 	bl	800e0b8 <Calculate_ELb>
 801ca5e:	4b2a      	ldr	r3, [pc, #168]	; (801cb08 <Calculate_Data+0x264>)
 801ca60:	ed83 0a00 	vstr	s0, [r3]
 801ca64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Color_Field&Color_CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801ca66:	079b      	lsls	r3, r3, #30
 801ca68:	f57f af53 	bpl.w	801c912 <Calculate_Data+0x6e>
 801ca6c:	4b22      	ldr	r3, [pc, #136]	; (801caf8 <Calculate_Data+0x254>)
 801ca6e:	7829      	ldrb	r1, [r5, #0]
 801ca70:	781a      	ldrb	r2, [r3, #0]
 801ca72:	480b      	ldr	r0, [pc, #44]	; (801caa0 <Calculate_Data+0x1fc>)
 801ca74:	4b0e      	ldr	r3, [pc, #56]	; (801cab0 <Calculate_Data+0x20c>)
 801ca76:	2900      	cmp	r1, #0
 801ca78:	bf18      	it	ne
 801ca7a:	4618      	movne	r0, r3
 801ca7c:	f7f1 fdf4 	bl	800e668 <Calculate_Lab>
 801ca80:	e747      	b.n	801c912 <Calculate_Data+0x6e>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801ca82:	ed97 0a00 	vldr	s0, [r7]
 801ca86:	e771      	b.n	801c96c <Calculate_Data+0xc8>
 801ca88:	2008c504 	.word	0x2008c504
 801ca8c:	2008e504 	.word	0x2008e504
 801ca90:	2008b504 	.word	0x2008b504
 801ca94:	2000c52c 	.word	0x2000c52c
 801ca98:	200056f4 	.word	0x200056f4
 801ca9c:	200056f1 	.word	0x200056f1
 801caa0:	2008f518 	.word	0x2008f518
 801caa4:	2008d504 	.word	0x2008d504
 801caa8:	20052930 	.word	0x20052930
 801caac:	2008a504 	.word	0x2008a504
 801cab0:	2008f512 	.word	0x2008f512
 801cab4:	20054930 	.word	0x20054930
 801cab8:	200056ef 	.word	0x200056ef
 801cabc:	2008f538 	.word	0x2008f538
 801cac0:	2008f530 	.word	0x2008f530
 801cac4:	200056f6 	.word	0x200056f6
 801cac8:	20095c5c 	.word	0x20095c5c
 801cacc:	200956c8 	.word	0x200956c8
 801cad0:	20053930 	.word	0x20053930
 801cad4:	200956bc 	.word	0x200956bc
 801cad8:	200957b0 	.word	0x200957b0
 801cadc:	20054938 	.word	0x20054938
 801cae0:	200956d0 	.word	0x200956d0
 801cae4:	200957b4 	.word	0x200957b4
 801cae8:	20095b38 	.word	0x20095b38
 801caec:	20095a74 	.word	0x20095a74
 801caf0:	200956cc 	.word	0x200956cc
 801caf4:	20090a66 	.word	0x20090a66
 801caf8:	20090a69 	.word	0x20090a69
 801cafc:	2000ad28 	.word	0x2000ad28
 801cb00:	20095c58 	.word	0x20095c58
 801cb04:	20009d28 	.word	0x20009d28
 801cb08:	20095c54 	.word	0x20095c54
 801cb0c:	00000000 	.word	0x00000000

0801cb10 <Get_Battery_Level>:
{
 801cb10:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 801cb12:	4c13      	ldr	r4, [pc, #76]	; (801cb60 <Get_Battery_Level+0x50>)
	adcResult = HAL_ADC_GetValue(&hadc1);
 801cb14:	4d13      	ldr	r5, [pc, #76]	; (801cb64 <Get_Battery_Level+0x54>)
	HAL_ADC_Start(&hadc1);
 801cb16:	4620      	mov	r0, r4
 801cb18:	f7e4 fe92 	bl	8001840 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 2);
 801cb1c:	2102      	movs	r1, #2
 801cb1e:	4620      	mov	r0, r4
 801cb20:	f7e4 fb88 	bl	8001234 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 801cb24:	4620      	mov	r0, r4
 801cb26:	f7e4 fbd3 	bl	80012d0 <HAL_ADC_GetValue>
 801cb2a:	7028      	strb	r0, [r5, #0]
	HAL_ADC_Stop(&hadc1);
 801cb2c:	4620      	mov	r0, r4
 801cb2e:	f7e4 ff06 	bl	800193e <HAL_ADC_Stop>
	return percentage_charge = 100.0*adcResult/190;
 801cb32:	7828      	ldrb	r0, [r5, #0]
 801cb34:	f7e3 fd0e 	bl	8000554 <__aeabi_i2d>
 801cb38:	2200      	movs	r2, #0
 801cb3a:	4b0b      	ldr	r3, [pc, #44]	; (801cb68 <Get_Battery_Level+0x58>)
 801cb3c:	f7e3 fd70 	bl	8000620 <__aeabi_dmul>
 801cb40:	a305      	add	r3, pc, #20	; (adr r3, 801cb58 <Get_Battery_Level+0x48>)
 801cb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb46:	f7e3 fe95 	bl	8000874 <__aeabi_ddiv>
 801cb4a:	4b08      	ldr	r3, [pc, #32]	; (801cb6c <Get_Battery_Level+0x5c>)
}
 801cb4c:	ec41 0b10 	vmov	d0, r0, r1
	return percentage_charge = 100.0*adcResult/190;
 801cb50:	e9c3 0100 	strd	r0, r1, [r3]
}
 801cb54:	bd38      	pop	{r3, r4, r5, pc}
 801cb56:	bf00      	nop
 801cb58:	00000000 	.word	0x00000000
 801cb5c:	4067c000 	.word	0x4067c000
 801cb60:	20095a08 	.word	0x20095a08
 801cb64:	20055940 	.word	0x20055940
 801cb68:	40590000 	.word	0x40590000
 801cb6c:	20095b40 	.word	0x20095b40

0801cb70 <packet_generator_data_send>:
{
 801cb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801cb74:	4c25      	ldr	r4, [pc, #148]	; (801cc0c <packet_generator_data_send+0x9c>)
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801cb76:	4f26      	ldr	r7, [pc, #152]	; (801cc10 <packet_generator_data_send+0xa0>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cb78:	f8df 909c 	ldr.w	r9, [pc, #156]	; 801cc18 <packet_generator_data_send+0xa8>
			memset(dataToSend, 0, sizeof(dataToSend));
 801cb7c:	2100      	movs	r1, #0
 801cb7e:	2240      	movs	r2, #64	; 0x40
 801cb80:	4620      	mov	r0, r4
 801cb82:	f002 ff38 	bl	801f9f6 <memset>
			dataToSend[0] = 0xAB;
 801cb86:	23ab      	movs	r3, #171	; 0xab
 801cb88:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801cb8a:	2312      	movs	r3, #18
			dataToSend[2] = 0x01;
 801cb8c:	2500      	movs	r5, #0
			dataToSend[1] = 0x12;
 801cb8e:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x01;
 801cb90:	2301      	movs	r3, #1
 801cb92:	70a3      	strb	r3, [r4, #2]
			packet_number = 0;
 801cb94:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801cb96:	4629      	mov	r1, r5
			q = 5;
 801cb98:	2305      	movs	r3, #5
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cb9a:	46a0      	mov	r8, r4
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801cb9c:	f837 2015 	ldrh.w	r2, [r7, r5, lsl #1]
				dataToSend[q+1] = byte_low;
 801cba0:	eb04 0e03 	add.w	lr, r4, r3
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801cba4:	0a10      	lsrs	r0, r2, #8
 801cba6:	54e0      	strb	r0, [r4, r3]
				q = q + 2;
 801cba8:	3302      	adds	r3, #2
				byte_low = Line_buff[cnt] & 0x00FF;
 801cbaa:	f88e 2001 	strb.w	r2, [lr, #1]
				q = q + 2;
 801cbae:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + byte_high + byte_low;
 801cbb0:	fa50 f282 	uxtab	r2, r0, r2
 801cbb4:	440a      	add	r2, r1
				if(q >= 62 || cnt == 1023){
 801cbb6:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + byte_high + byte_low;
 801cbb8:	b291      	uxth	r1, r2
				if(q >= 62 || cnt == 1023){
 801cbba:	d803      	bhi.n	801cbc4 <packet_generator_data_send+0x54>
 801cbbc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801cbc0:	4295      	cmp	r5, r2
 801cbc2:	d118      	bne.n	801cbf6 <packet_generator_data_send+0x86>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cbc4:	7860      	ldrb	r0, [r4, #1]
 801cbc6:	7822      	ldrb	r2, [r4, #0]
 801cbc8:	4402      	add	r2, r0
 801cbca:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801cbcc:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cbce:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801cbd0:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801cbd2:	b2f3      	uxtb	r3, r6
 801cbd4:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cbd6:	4413      	add	r3, r2
 801cbd8:	185a      	adds	r2, r3, r1
 801cbda:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cbde:	4641      	mov	r1, r8
 801cbe0:	2240      	movs	r2, #64	; 0x40
 801cbe2:	4648      	mov	r0, r9
 801cbe4:	f7eb fa5a 	bl	800809c <USBD_CUSTOM_HID_SendReport>
					packet_number = packet_number + 1;
 801cbe8:	3601      	adds	r6, #1
					HAL_Delay(3);
 801cbea:	2003      	movs	r0, #3
 801cbec:	f7e4 fa1e 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801cbf0:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801cbf2:	2100      	movs	r1, #0
					q = 5;
 801cbf4:	2305      	movs	r3, #5
 801cbf6:	3501      	adds	r5, #1
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801cbf8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801cbfc:	d1ce      	bne.n	801cb9c <packet_generator_data_send+0x2c>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801cbfe:	4b05      	ldr	r3, [pc, #20]	; (801cc14 <packet_generator_data_send+0xa4>)
 801cc00:	2200      	movs	r2, #0
 801cc02:	601a      	str	r2, [r3, #0]
 801cc04:	605a      	str	r2, [r3, #4]
 801cc06:	609a      	str	r2, [r3, #8]
 801cc08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc0c:	2008f54c 	.word	0x2008f54c
 801cc10:	2000e52c 	.word	0x2000e52c
 801cc14:	2008f540 	.word	0x2008f540
 801cc18:	20095ca8 	.word	0x20095ca8

0801cc1c <packet_generator_Rabs_data_send>:
{
 801cc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801cc20:	4c3b      	ldr	r4, [pc, #236]	; (801cd10 <packet_generator_Rabs_data_send+0xf4>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801cc22:	4d3c      	ldr	r5, [pc, #240]	; (801cd14 <packet_generator_Rabs_data_send+0xf8>)
 801cc24:	4f3c      	ldr	r7, [pc, #240]	; (801cd18 <packet_generator_Rabs_data_send+0xfc>)
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cc26:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801cd3c <packet_generator_Rabs_data_send+0x120>
			memset(dataToSend, 0, sizeof(dataToSend));
 801cc2a:	2240      	movs	r2, #64	; 0x40
 801cc2c:	2100      	movs	r1, #0
 801cc2e:	4620      	mov	r0, r4
 801cc30:	f002 fee1 	bl	801f9f6 <memset>
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801cc34:	4b39      	ldr	r3, [pc, #228]	; (801cd1c <packet_generator_Rabs_data_send+0x100>)
 801cc36:	8828      	ldrh	r0, [r5, #0]
 801cc38:	4939      	ldr	r1, [pc, #228]	; (801cd20 <packet_generator_Rabs_data_send+0x104>)
 801cc3a:	ed93 0a00 	vldr	s0, [r3]
 801cc3e:	f7fc fd53 	bl	80196e8 <Rabs_calc_Factor1>
 801cc42:	4b38      	ldr	r3, [pc, #224]	; (801cd24 <packet_generator_Rabs_data_send+0x108>)
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801cc44:	4938      	ldr	r1, [pc, #224]	; (801cd28 <packet_generator_Rabs_data_send+0x10c>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801cc46:	ed83 0a00 	vstr	s0, [r3]
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801cc4a:	edd1 0a00 	vldr	s1, [r1]
 801cc4e:	4b37      	ldr	r3, [pc, #220]	; (801cd2c <packet_generator_Rabs_data_send+0x110>)
 801cc50:	8829      	ldrh	r1, [r5, #0]
 801cc52:	4833      	ldr	r0, [pc, #204]	; (801cd20 <packet_generator_Rabs_data_send+0x104>)
 801cc54:	4a36      	ldr	r2, [pc, #216]	; (801cd30 <packet_generator_Rabs_data_send+0x114>)
 801cc56:	f7fc fd7b 	bl	8019750 <Rabs_calc_main>
			dataToSend[0] = 0xAB;
 801cc5a:	23ab      	movs	r3, #171	; 0xab
 801cc5c:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801cc5e:	2312      	movs	r3, #18
 801cc60:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x03;
 801cc62:	2303      	movs	r3, #3
 801cc64:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801cc66:	4b33      	ldr	r3, [pc, #204]	; (801cd34 <packet_generator_Rabs_data_send+0x118>)
 801cc68:	781b      	ldrb	r3, [r3, #0]
 801cc6a:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801cc6c:	f04f 0500 	mov.w	r5, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801cc70:	bf18      	it	ne
 801cc72:	2301      	movne	r3, #1
 801cc74:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801cc76:	71a5      	strb	r5, [r4, #6]
			packet_number = 0;
 801cc78:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801cc7a:	4628      	mov	r0, r5
			q = 7;
 801cc7c:	2307      	movs	r3, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cc7e:	46a0      	mov	r8, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801cc80:	f857 2d04 	ldr.w	r2, [r7, #-4]!
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801cc84:	f103 0c01 	add.w	ip, r3, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801cc88:	0e11      	lsrs	r1, r2, #24
 801cc8a:	54e1      	strb	r1, [r4, r3]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801cc8c:	f103 0e02 	add.w	lr, r3, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801cc90:	0c11      	lsrs	r1, r2, #16
 801cc92:	f804 100c 	strb.w	r1, [r4, ip]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801cc96:	0a11      	lsrs	r1, r2, #8
 801cc98:	f804 100e 	strb.w	r1, [r4, lr]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801cc9c:	18e1      	adds	r1, r4, r3
 801cc9e:	b2d2      	uxtb	r2, r2
 801cca0:	70ca      	strb	r2, [r1, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cca2:	5ce1      	ldrb	r1, [r4, r3]
 801cca4:	4401      	add	r1, r0
 801cca6:	f814 000c 	ldrb.w	r0, [r4, ip]
 801ccaa:	4401      	add	r1, r0
 801ccac:	f814 000e 	ldrb.w	r0, [r4, lr]
				q = q + 4;
 801ccb0:	3304      	adds	r3, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801ccb2:	4408      	add	r0, r1
				q = q + 4;
 801ccb4:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801ccb6:	fa12 f080 	uxtah	r0, r2, r0
				if(q >= 62 || cnt == 1023){
 801ccba:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801ccbc:	b280      	uxth	r0, r0
				if(q >= 62 || cnt == 1023){
 801ccbe:	d803      	bhi.n	801ccc8 <packet_generator_Rabs_data_send+0xac>
 801ccc0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801ccc4:	4295      	cmp	r5, r2
 801ccc6:	d116      	bne.n	801ccf6 <packet_generator_Rabs_data_send+0xda>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801ccc8:	7861      	ldrb	r1, [r4, #1]
 801ccca:	7822      	ldrb	r2, [r4, #0]
 801cccc:	440a      	add	r2, r1
 801ccce:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801ccd0:	0a33      	lsrs	r3, r6, #8
 801ccd2:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801ccd4:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801ccd6:	b2f3      	uxtb	r3, r6
 801ccd8:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801ccda:	4413      	add	r3, r2
 801ccdc:	4418      	add	r0, r3
					packet_number = packet_number + 1;
 801ccde:	3601      	adds	r6, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cce0:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801cce4:	b2b6      	uxth	r6, r6
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cce6:	2240      	movs	r2, #64	; 0x40
 801cce8:	4641      	mov	r1, r8
 801ccea:	4648      	mov	r0, r9
 801ccec:	f7eb f9d6 	bl	800809c <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801ccf0:	2800      	cmp	r0, #0
 801ccf2:	d1f8      	bne.n	801cce6 <packet_generator_Rabs_data_send+0xca>
					q = 7;
 801ccf4:	2307      	movs	r3, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801ccf6:	3501      	adds	r5, #1
 801ccf8:	b2ad      	uxth	r5, r5
 801ccfa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801ccfe:	d1bf      	bne.n	801cc80 <packet_generator_Rabs_data_send+0x64>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801cd00:	4b0d      	ldr	r3, [pc, #52]	; (801cd38 <packet_generator_Rabs_data_send+0x11c>)
 801cd02:	2200      	movs	r2, #0
 801cd04:	601a      	str	r2, [r3, #0]
 801cd06:	605a      	str	r2, [r3, #4]
 801cd08:	609a      	str	r2, [r3, #8]
 801cd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd0e:	bf00      	nop
 801cd10:	2008f54c 	.word	0x2008f54c
 801cd14:	20009d12 	.word	0x20009d12
 801cd18:	2000d52c 	.word	0x2000d52c
 801cd1c:	2005192c 	.word	0x2005192c
 801cd20:	2000e52c 	.word	0x2000e52c
 801cd24:	20009d20 	.word	0x20009d20
 801cd28:	20009d24 	.word	0x20009d24
 801cd2c:	2000c52c 	.word	0x2000c52c
 801cd30:	20051930 	.word	0x20051930
 801cd34:	20000ebc 	.word	0x20000ebc
 801cd38:	2008f540 	.word	0x2008f540
 801cd3c:	20095ca8 	.word	0x20095ca8

0801cd40 <packet_generator_Calculated_data_send>:
{
 801cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801cd44:	4c8a      	ldr	r4, [pc, #552]	; (801cf70 <packet_generator_Calculated_data_send+0x230>)
 801cd46:	f8df 9250 	ldr.w	r9, [pc, #592]	; 801cf98 <packet_generator_Calculated_data_send+0x258>
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cd4a:	f8df b244 	ldr.w	fp, [pc, #580]	; 801cf90 <packet_generator_Calculated_data_send+0x250>
{
 801cd4e:	b087      	sub	sp, #28
			memset(dataToSend, 0, sizeof(dataToSend));
 801cd50:	2240      	movs	r2, #64	; 0x40
 801cd52:	2100      	movs	r1, #0
 801cd54:	4620      	mov	r0, r4
 801cd56:	f002 fe4e 	bl	801f9f6 <memset>
			delta_Eab_Measure = Calculate_deltaEab();
 801cd5a:	f7f1 fec5 	bl	800eae8 <Calculate_deltaEab>
 801cd5e:	4b85      	ldr	r3, [pc, #532]	; (801cf74 <packet_generator_Calculated_data_send+0x234>)
 801cd60:	8018      	strh	r0, [r3, #0]
			dataToSend[0] = 0xAB;
 801cd62:	23ab      	movs	r3, #171	; 0xab
 801cd64:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801cd66:	2312      	movs	r3, #18
 801cd68:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801cd6a:	2304      	movs	r3, #4
 801cd6c:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801cd6e:	4b82      	ldr	r3, [pc, #520]	; (801cf78 <packet_generator_Calculated_data_send+0x238>)
 801cd70:	781b      	ldrb	r3, [r3, #0]
 801cd72:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801cd74:	f04f 0800 	mov.w	r8, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801cd78:	bf18      	it	ne
 801cd7a:	2301      	movne	r3, #1
 801cd7c:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801cd7e:	f884 8006 	strb.w	r8, [r4, #6]
			uint16_t CRC_pack = 0, packet_number = 0;
 801cd82:	4645      	mov	r5, r8
 801cd84:	4647      	mov	r7, r8
			q = 7;
 801cd86:	2607      	movs	r6, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cd88:	46a2      	mov	sl, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801cd8a:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801cd8e:	9305      	str	r3, [sp, #20]
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801cd90:	0e1a      	lsrs	r2, r3, #24
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801cd92:	1c70      	adds	r0, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801cd94:	55a2      	strb	r2, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801cd96:	1cb1      	adds	r1, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801cd98:	0c1a      	lsrs	r2, r3, #16
 801cd9a:	5422      	strb	r2, [r4, r0]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801cd9c:	0a1a      	lsrs	r2, r3, #8
 801cd9e:	5462      	strb	r2, [r4, r1]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801cda0:	19a2      	adds	r2, r4, r6
 801cda2:	b2db      	uxtb	r3, r3
 801cda4:	70d3      	strb	r3, [r2, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cda6:	5da2      	ldrb	r2, [r4, r6]
 801cda8:	443a      	add	r2, r7
 801cdaa:	5c27      	ldrb	r7, [r4, r0]
 801cdac:	443a      	add	r2, r7
 801cdae:	5c67      	ldrb	r7, [r4, r1]
				q = q + 4;
 801cdb0:	3604      	adds	r6, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cdb2:	4417      	add	r7, r2
				q = q + 4;
 801cdb4:	b2f6      	uxtb	r6, r6
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cdb6:	fa13 f787 	uxtah	r7, r3, r7
				if(q >= 62 || cnt == 1023){
 801cdba:	2e3d      	cmp	r6, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801cdbc:	b2bf      	uxth	r7, r7
				if(q >= 62 || cnt == 1023){
 801cdbe:	d803      	bhi.n	801cdc8 <packet_generator_Calculated_data_send+0x88>
 801cdc0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801cdc4:	4598      	cmp	r8, r3
 801cdc6:	d11a      	bne.n	801cdfe <packet_generator_Calculated_data_send+0xbe>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cdc8:	7861      	ldrb	r1, [r4, #1]
 801cdca:	7822      	ldrb	r2, [r4, #0]
 801cdcc:	440a      	add	r2, r1
 801cdce:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801cdd0:	0a2b      	lsrs	r3, r5, #8
 801cdd2:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cdd4:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801cdd6:	b2eb      	uxtb	r3, r5
 801cdd8:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cdda:	4413      	add	r3, r2
 801cddc:	441f      	add	r7, r3
					packet_number = packet_number + 1;
 801cdde:	3501      	adds	r5, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801cde0:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801cde4:	b2ad      	uxth	r5, r5
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cde6:	2240      	movs	r2, #64	; 0x40
 801cde8:	4651      	mov	r1, sl
 801cdea:	4658      	mov	r0, fp
 801cdec:	f7eb f956 	bl	800809c <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801cdf0:	4607      	mov	r7, r0
 801cdf2:	2800      	cmp	r0, #0
 801cdf4:	d1f7      	bne.n	801cde6 <packet_generator_Calculated_data_send+0xa6>
					HAL_Delay(3);
 801cdf6:	2003      	movs	r0, #3
 801cdf8:	f7e4 f918 	bl	800102c <HAL_Delay>
					q = 7;
 801cdfc:	2607      	movs	r6, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801cdfe:	f108 0801 	add.w	r8, r8, #1
 801ce02:	fa1f f888 	uxth.w	r8, r8
 801ce06:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 801ce0a:	d1be      	bne.n	801cd8a <packet_generator_Calculated_data_send+0x4a>
			memset(dataToSend, 0, sizeof(dataToSend));
 801ce0c:	2240      	movs	r2, #64	; 0x40
 801ce0e:	2100      	movs	r1, #0
 801ce10:	4857      	ldr	r0, [pc, #348]	; (801cf70 <packet_generator_Calculated_data_send+0x230>)
 801ce12:	f002 fdf0 	bl	801f9f6 <memset>
			dataToSend[0] = 0xAB;
 801ce16:	23ab      	movs	r3, #171	; 0xab
 801ce18:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801ce1a:	2312      	movs	r3, #18
 801ce1c:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801ce1e:	2304      	movs	r3, #4
 801ce20:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801ce22:	4b55      	ldr	r3, [pc, #340]	; (801cf78 <packet_generator_Calculated_data_send+0x238>)
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801ce24:	4a55      	ldr	r2, [pc, #340]	; (801cf7c <packet_generator_Calculated_data_send+0x23c>)
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801ce26:	781b      	ldrb	r3, [r3, #0]
 801ce28:	3300      	adds	r3, #0
 801ce2a:	bf18      	it	ne
 801ce2c:	2301      	movne	r3, #1
 801ce2e:	7163      	strb	r3, [r4, #5]
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801ce30:	6813      	ldr	r3, [r2, #0]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801ce32:	f106 0a01 	add.w	sl, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801ce36:	0e19      	lsrs	r1, r3, #24
 801ce38:	55a1      	strb	r1, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801ce3a:	f106 0902 	add.w	r9, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801ce3e:	0c19      	lsrs	r1, r3, #16
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801ce40:	f106 0803 	add.w	r8, r6, #3
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801ce44:	f804 100a 	strb.w	r1, [r4, sl]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801ce48:	0a19      	lsrs	r1, r3, #8
 801ce4a:	f804 1009 	strb.w	r1, [r4, r9]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801ce4e:	f804 3008 	strb.w	r3, [r4, r8]
				memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801ce52:	6853      	ldr	r3, [r2, #4]
 801ce54:	9305      	str	r3, [sp, #20]
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801ce56:	f106 0c04 	add.w	ip, r6, #4
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801ce5a:	f106 0e05 	add.w	lr, r6, #5
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801ce5e:	0e1a      	lsrs	r2, r3, #24
 801ce60:	f804 200c 	strb.w	r2, [r4, ip]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801ce64:	1db0      	adds	r0, r6, #6
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801ce66:	0c1a      	lsrs	r2, r3, #16
 801ce68:	f804 200e 	strb.w	r2, [r4, lr]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801ce6c:	0a1a      	lsrs	r2, r3, #8
 801ce6e:	5422      	strb	r2, [r4, r0]
				dataToSend[q+7] = (buff_float) & 0x000000FF;
 801ce70:	1df2      	adds	r2, r6, #7
 801ce72:	9203      	str	r2, [sp, #12]
 801ce74:	54a3      	strb	r3, [r4, r2]
				memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801ce76:	4b42      	ldr	r3, [pc, #264]	; (801cf80 <packet_generator_Calculated_data_send+0x240>)
 801ce78:	881b      	ldrh	r3, [r3, #0]
 801ce7a:	f8ad 3014 	strh.w	r3, [sp, #20]
				dataToSend[q+8]= (buff_float >> 8) & 0x000000FF;
 801ce7e:	f106 0308 	add.w	r3, r6, #8
 801ce82:	9300      	str	r3, [sp, #0]
 801ce84:	9b05      	ldr	r3, [sp, #20]
 801ce86:	9900      	ldr	r1, [sp, #0]
 801ce88:	0a1a      	lsrs	r2, r3, #8
 801ce8a:	5462      	strb	r2, [r4, r1]
				dataToSend[q+9] = (buff_float) & 0x000000FF;
 801ce8c:	f106 0209 	add.w	r2, r6, #9
 801ce90:	9201      	str	r2, [sp, #4]
 801ce92:	54a3      	strb	r3, [r4, r2]
				dataToSend[q+10]= Source_Type;
 801ce94:	f106 030a 	add.w	r3, r6, #10
 801ce98:	9302      	str	r3, [sp, #8]
 801ce9a:	4b3a      	ldr	r3, [pc, #232]	; (801cf84 <packet_generator_Calculated_data_send+0x244>)
 801ce9c:	9a02      	ldr	r2, [sp, #8]
 801ce9e:	781b      	ldrb	r3, [r3, #0]
 801cea0:	54a3      	strb	r3, [r4, r2]
			if(Calculate_deltaEab_Done == 0x01)
 801cea2:	4b39      	ldr	r3, [pc, #228]	; (801cf88 <packet_generator_Calculated_data_send+0x248>)
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801cea4:	4932      	ldr	r1, [pc, #200]	; (801cf70 <packet_generator_Calculated_data_send+0x230>)
			if(Calculate_deltaEab_Done == 0x01)
 801cea6:	781b      	ldrb	r3, [r3, #0]
 801cea8:	2b01      	cmp	r3, #1
				memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801ceaa:	bf01      	itttt	eq
 801ceac:	4b31      	ldreq	r3, [pc, #196]	; (801cf74 <packet_generator_Calculated_data_send+0x234>)
 801ceae:	881b      	ldrheq	r3, [r3, #0]
 801ceb0:	f8ad 3014 	strheq.w	r3, [sp, #20]
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801ceb4:	9b05      	ldreq	r3, [sp, #20]
 801ceb6:	4434      	add	r4, r6
 801ceb8:	bf0b      	itete	eq
 801ceba:	0a1a      	lsreq	r2, r3, #8
			} else {dataToSend[q+11] = 0;
 801cebc:	2300      	movne	r3, #0
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801cebe:	72e2      	strbeq	r2, [r4, #11]
			} else {dataToSend[q+11] = 0;
 801cec0:	72e3      	strbne	r3, [r4, #11]
				dataToSend[q+12] = 0;
 801cec2:	7323      	strb	r3, [r4, #12]
				memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801cec4:	4c31      	ldr	r4, [pc, #196]	; (801cf8c <packet_generator_Calculated_data_send+0x24c>)
 801cec6:	6822      	ldr	r2, [r4, #0]
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801cec8:	198b      	adds	r3, r1, r6
 801ceca:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801cece:	f883 b00d 	strb.w	fp, [r3, #13]
				dataToSend[q+14] = (buff_float >> 16) & 0x000000FF;
 801ced2:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ced6:	f883 b00e 	strb.w	fp, [r3, #14]
				dataToSend[q+16] = (buff_float) & 0x000000FF;
 801ceda:	741a      	strb	r2, [r3, #16]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801cedc:	ea4f 2b12 	mov.w	fp, r2, lsr #8
				memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801cee0:	6862      	ldr	r2, [r4, #4]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801cee2:	f883 b00f 	strb.w	fp, [r3, #15]
				dataToSend[q+17] = (buff_float >> 24) & 0x000000FF;
 801cee6:	0e14      	lsrs	r4, r2, #24
 801cee8:	745c      	strb	r4, [r3, #17]
				dataToSend[q+18] = (buff_float >> 16) & 0x000000FF;
 801ceea:	0c14      	lsrs	r4, r2, #16
 801ceec:	749c      	strb	r4, [r3, #18]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801ceee:	0a14      	lsrs	r4, r2, #8
				dataToSend[q+20] = (buff_float) & 0x000000FF;
 801cef0:	751a      	strb	r2, [r3, #20]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801cef2:	74dc      	strb	r4, [r3, #19]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801cef4:	0a2a      	lsrs	r2, r5, #8
 801cef6:	70ca      	strb	r2, [r1, #3]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801cef8:	780c      	ldrb	r4, [r1, #0]
 801cefa:	784a      	ldrb	r2, [r1, #1]
 801cefc:	4422      	add	r2, r4
 801cefe:	788c      	ldrb	r4, [r1, #2]
					dataToSend[4] = packet_number & 0x00FF;
 801cf00:	b2ed      	uxtb	r5, r5
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801cf02:	4422      	add	r2, r4
					dataToSend[4] = packet_number & 0x00FF;
 801cf04:	710d      	strb	r5, [r1, #4]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801cf06:	4415      	add	r5, r2
 801cf08:	19ea      	adds	r2, r5, r7
 801cf0a:	5d8d      	ldrb	r5, [r1, r6]
 801cf0c:	f811 4008 	ldrb.w	r4, [r1, r8]
 801cf10:	5c08      	ldrb	r0, [r1, r0]
 801cf12:	442a      	add	r2, r5
 801cf14:	f811 500a 	ldrb.w	r5, [r1, sl]
 801cf18:	442a      	add	r2, r5
 801cf1a:	f811 5009 	ldrb.w	r5, [r1, r9]
 801cf1e:	442a      	add	r2, r5
 801cf20:	4422      	add	r2, r4
 801cf22:	f811 400c 	ldrb.w	r4, [r1, ip]
 801cf26:	4422      	add	r2, r4
 801cf28:	f811 400e 	ldrb.w	r4, [r1, lr]
 801cf2c:	4422      	add	r2, r4
 801cf2e:	4402      	add	r2, r0
 801cf30:	9803      	ldr	r0, [sp, #12]
 801cf32:	5c08      	ldrb	r0, [r1, r0]
 801cf34:	4402      	add	r2, r0
 801cf36:	9800      	ldr	r0, [sp, #0]
 801cf38:	5c08      	ldrb	r0, [r1, r0]
 801cf3a:	4402      	add	r2, r0
 801cf3c:	9801      	ldr	r0, [sp, #4]
 801cf3e:	5c08      	ldrb	r0, [r1, r0]
 801cf40:	4402      	add	r2, r0
 801cf42:	9802      	ldr	r0, [sp, #8]
 801cf44:	7adb      	ldrb	r3, [r3, #11]
 801cf46:	5c08      	ldrb	r0, [r1, r0]
 801cf48:	4402      	add	r2, r0
 801cf4a:	4413      	add	r3, r2
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cf4c:	4810      	ldr	r0, [pc, #64]	; (801cf90 <packet_generator_Calculated_data_send+0x250>)
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + dataToSend[q]+dataToSend[q+1]+dataToSend[q+2] + dataToSend[q+3] + dataToSend[q+4]+
 801cf4e:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801cf52:	2240      	movs	r2, #64	; 0x40
 801cf54:	f7eb f8a2 	bl	800809c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(3);
 801cf58:	2003      	movs	r0, #3
 801cf5a:	f7e4 f867 	bl	800102c <HAL_Delay>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801cf5e:	4b0d      	ldr	r3, [pc, #52]	; (801cf94 <packet_generator_Calculated_data_send+0x254>)
 801cf60:	2200      	movs	r2, #0
 801cf62:	601a      	str	r2, [r3, #0]
 801cf64:	605a      	str	r2, [r3, #4]
 801cf66:	609a      	str	r2, [r3, #8]
}
 801cf68:	b007      	add	sp, #28
 801cf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf6e:	bf00      	nop
 801cf70:	2008f54c 	.word	0x2008f54c
 801cf74:	20090a66 	.word	0x20090a66
 801cf78:	20000ebc 	.word	0x20000ebc
 801cf7c:	2008f538 	.word	0x2008f538
 801cf80:	20054930 	.word	0x20054930
 801cf84:	20090a69 	.word	0x20090a69
 801cf88:	20005691 	.word	0x20005691
 801cf8c:	2008f530 	.word	0x2008f530
 801cf90:	20095ca8 	.word	0x20095ca8
 801cf94:	2008f540 	.word	0x2008f540
 801cf98:	2000d52c 	.word	0x2000d52c

0801cf9c <usb_receive_processing>:
{
 801cf9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(dataToReceive[0] == 0xAB)
 801cfa0:	4ca6      	ldr	r4, [pc, #664]	; (801d23c <usb_receive_processing+0x2a0>)
 801cfa2:	f894 9000 	ldrb.w	r9, [r4]
	uint32_t PAGEError = 0;
 801cfa6:	2500      	movs	r5, #0
		if(dataToReceive[0] == 0xAB)
 801cfa8:	f1b9 0fab 	cmp.w	r9, #171	; 0xab
	uint32_t PAGEError = 0;
 801cfac:	9501      	str	r5, [sp, #4]
 801cfae:	4626      	mov	r6, r4
		if(dataToReceive[0] == 0xAB)
 801cfb0:	d12a      	bne.n	801d008 <usb_receive_processing+0x6c>
			if(dataToReceive[1] == 0x12)
 801cfb2:	f894 8001 	ldrb.w	r8, [r4, #1]
 801cfb6:	f1b8 0f12 	cmp.w	r8, #18
 801cfba:	d117      	bne.n	801cfec <usb_receive_processing+0x50>
			switch(dataToReceive[2])
 801cfbc:	78a7      	ldrb	r7, [r4, #2]
 801cfbe:	2f0a      	cmp	r7, #10
 801cfc0:	f000 80dd 	beq.w	801d17e <usb_receive_processing+0x1e2>
 801cfc4:	d815      	bhi.n	801cff2 <usb_receive_processing+0x56>
 801cfc6:	2f02      	cmp	r7, #2
 801cfc8:	d023      	beq.n	801d012 <usb_receive_processing+0x76>
 801cfca:	2f04      	cmp	r7, #4
 801cfcc:	f000 81a2 	beq.w	801d314 <usb_receive_processing+0x378>
 801cfd0:	2f01      	cmp	r7, #1
 801cfd2:	d119      	bne.n	801d008 <usb_receive_processing+0x6c>
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801cfd4:	78f2      	ldrb	r2, [r6, #3]
						send_usb_block = 1;
 801cfd6:	4c9a      	ldr	r4, [pc, #616]	; (801d240 <usb_receive_processing+0x2a4>)
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801cfd8:	2a01      	cmp	r2, #1
						send_usb_block = 1;
 801cfda:	7027      	strb	r7, [r4, #0]
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801cfdc:	d116      	bne.n	801d00c <usb_receive_processing+0x70>
						packet_generator_Rabs_data_send();
 801cfde:	f7ff fe1d 	bl	801cc1c <packet_generator_Rabs_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	6033      	str	r3, [r6, #0]
 801cfe6:	6073      	str	r3, [r6, #4]
 801cfe8:	60b3      	str	r3, [r6, #8]
						send_usb_block = 0;
 801cfea:	7023      	strb	r3, [r4, #0]
}
 801cfec:	b002      	add	sp, #8
 801cfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch(dataToReceive[2])
 801cff2:	2f0c      	cmp	r7, #12
 801cff4:	f000 8146 	beq.w	801d284 <usb_receive_processing+0x2e8>
 801cff8:	f0c0 80d8 	bcc.w	801d1ac <usb_receive_processing+0x210>
 801cffc:	2f0d      	cmp	r7, #13
 801cffe:	f000 80a7 	beq.w	801d150 <usb_receive_processing+0x1b4>
 801d002:	2f66      	cmp	r7, #102	; 0x66
 801d004:	f000 816f 	beq.w	801d2e6 <usb_receive_processing+0x34a>
			__asm("nop");
 801d008:	bf00      	nop
}
 801d00a:	e7ef      	b.n	801cfec <usb_receive_processing+0x50>
						packet_generator_data_send();
 801d00c:	f7ff fdb0 	bl	801cb70 <packet_generator_data_send>
 801d010:	e7e7      	b.n	801cfe2 <usb_receive_processing+0x46>
						send_usb_block = 0;
 801d012:	4b8b      	ldr	r3, [pc, #556]	; (801d240 <usb_receive_processing+0x2a4>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801d014:	4c8b      	ldr	r4, [pc, #556]	; (801d244 <usb_receive_processing+0x2a8>)
						send_usb_block = 0;
 801d016:	701d      	strb	r5, [r3, #0]
						memset(dataToSend, 0, sizeof(dataToSend));
 801d018:	4629      	mov	r1, r5
						if (exp_num != dataToReceive[3]){
 801d01a:	4d8b      	ldr	r5, [pc, #556]	; (801d248 <usb_receive_processing+0x2ac>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801d01c:	2240      	movs	r2, #64	; 0x40
 801d01e:	4620      	mov	r0, r4
 801d020:	f002 fce9 	bl	801f9f6 <memset>
						if (exp_num != dataToReceive[3]){
 801d024:	78f3      	ldrb	r3, [r6, #3]
 801d026:	782a      	ldrb	r2, [r5, #0]
						dataToSend[0] = 0xAB;
 801d028:	f884 9000 	strb.w	r9, [r4]
						if (exp_num != dataToReceive[3]){
 801d02c:	4293      	cmp	r3, r2
						dataToSend[1] = 0x12;
 801d02e:	f884 8001 	strb.w	r8, [r4, #1]
						dataToSend[2] = CMD_CNFG;
 801d032:	70a7      	strb	r7, [r4, #2]
						if (exp_num != dataToReceive[3]){
 801d034:	d07a      	beq.n	801d12c <usb_receive_processing+0x190>
							exp_num = dataToReceive[3];
 801d036:	702b      	strb	r3, [r5, #0]
							htim2.Init.Period = exposure_timer_period[exp_num];
 801d038:	782a      	ldrb	r2, [r5, #0]
 801d03a:	4b84      	ldr	r3, [pc, #528]	; (801d24c <usb_receive_processing+0x2b0>)
 801d03c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801d040:	4b83      	ldr	r3, [pc, #524]	; (801d250 <usb_receive_processing+0x2b4>)
 801d042:	60da      	str	r2, [r3, #12]
							MX_TIM2_Init();
 801d044:	f7ff fbd0 	bl	801c7e8 <MX_TIM2_Init>
							Calibration_Exposure_Change(exp_num);
 801d048:	7828      	ldrb	r0, [r5, #0]
 801d04a:	f7f1 fe67 	bl	800ed1c <Calibration_Exposure_Change>
						if (LaserOnOff != dataToReceive[4]){
 801d04e:	4a81      	ldr	r2, [pc, #516]	; (801d254 <usb_receive_processing+0x2b8>)
 801d050:	7933      	ldrb	r3, [r6, #4]
 801d052:	7811      	ldrb	r1, [r2, #0]
 801d054:	428b      	cmp	r3, r1
 801d056:	4691      	mov	r9, r2
 801d058:	d06c      	beq.n	801d134 <usb_receive_processing+0x198>
							LaserOnOff = (dataToReceive[4] > 0) ? 1 : 0;
 801d05a:	3300      	adds	r3, #0
 801d05c:	bf18      	it	ne
 801d05e:	2301      	movne	r3, #1
 801d060:	7013      	strb	r3, [r2, #0]
							if(LaserOnOff == 0){
 801d062:	7813      	ldrb	r3, [r2, #0]
 801d064:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d161      	bne.n	801d130 <usb_receive_processing+0x194>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d06c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d070:	4879      	ldr	r0, [pc, #484]	; (801d258 <usb_receive_processing+0x2bc>)
 801d072:	f7e5 fba5 	bl	80027c0 <HAL_GPIO_WritePin>
						if (VGain != dataToReceive[5]){
 801d076:	4a79      	ldr	r2, [pc, #484]	; (801d25c <usb_receive_processing+0x2c0>)
 801d078:	7973      	ldrb	r3, [r6, #5]
 801d07a:	7811      	ldrb	r1, [r2, #0]
 801d07c:	428b      	cmp	r3, r1
 801d07e:	4690      	mov	r8, r2
 801d080:	d05c      	beq.n	801d13c <usb_receive_processing+0x1a0>
							VGain = (dataToReceive[5] > 0) ? 1 : 0;
 801d082:	3300      	adds	r3, #0
 801d084:	bf18      	it	ne
 801d086:	2301      	movne	r3, #1
 801d088:	7013      	strb	r3, [r2, #0]
							if(VGain == 0){
 801d08a:	7813      	ldrb	r3, [r2, #0]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d153      	bne.n	801d138 <usb_receive_processing+0x19c>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 801d090:	2201      	movs	r2, #1
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d092:	2120      	movs	r1, #32
 801d094:	4872      	ldr	r0, [pc, #456]	; (801d260 <usb_receive_processing+0x2c4>)
 801d096:	f7e5 fb93 	bl	80027c0 <HAL_GPIO_WritePin>
						if (TFT_ON_OFF != dataToReceive[6]){
 801d09a:	4f72      	ldr	r7, [pc, #456]	; (801d264 <usb_receive_processing+0x2c8>)
 801d09c:	79b3      	ldrb	r3, [r6, #6]
 801d09e:	783a      	ldrb	r2, [r7, #0]
 801d0a0:	4293      	cmp	r3, r2
 801d0a2:	d051      	beq.n	801d148 <usb_receive_processing+0x1ac>
							TFT_ON_OFF = (dataToReceive[6] > 0) ? 1 : 0;
 801d0a4:	3300      	adds	r3, #0
 801d0a6:	bf18      	it	ne
 801d0a8:	2301      	movne	r3, #1
 801d0aa:	703b      	strb	r3, [r7, #0]
							if(TFT_ON_OFF == 1){
 801d0ac:	f897 a000 	ldrb.w	sl, [r7]
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d0b0:	486d      	ldr	r0, [pc, #436]	; (801d268 <usb_receive_processing+0x2cc>)
							if(TFT_ON_OFF == 1){
 801d0b2:	fa5f fa8a 	uxtb.w	sl, sl
 801d0b6:	f1ba 0f01 	cmp.w	sl, #1
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d0ba:	f04f 0104 	mov.w	r1, #4
							if(TFT_ON_OFF == 1){
 801d0be:	d13f      	bne.n	801d140 <usb_receive_processing+0x1a4>
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d0c0:	f7e9 f9ee 	bl	80064a0 <HAL_TIM_PWM_Start>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801d0c4:	4652      	mov	r2, sl
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801d0c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801d0ca:	4865      	ldr	r0, [pc, #404]	; (801d260 <usb_receive_processing+0x2c4>)
 801d0cc:	f7e5 fb78 	bl	80027c0 <HAL_GPIO_WritePin>
						if (Mode_EL != dataToReceive[7]){
 801d0d0:	4866      	ldr	r0, [pc, #408]	; (801d26c <usb_receive_processing+0x2d0>)
 801d0d2:	79f3      	ldrb	r3, [r6, #7]
 801d0d4:	7802      	ldrb	r2, [r0, #0]
 801d0d6:	429a      	cmp	r2, r3
 801d0d8:	d038      	beq.n	801d14c <usb_receive_processing+0x1b0>
							Mode_EL = (dataToReceive[7] > 0) ? 1 : 0; //Mode_EL=1 -Rabs_E, Mode_EL=0 -Rabs_L
 801d0da:	3300      	adds	r3, #0
 801d0dc:	bf18      	it	ne
 801d0de:	2301      	movne	r3, #1
 801d0e0:	7003      	strb	r3, [r0, #0]
						dataToSend[3] = exp_num;
 801d0e2:	7829      	ldrb	r1, [r5, #0]
						dataToSend[4] = LaserOnOff;
 801d0e4:	f899 5000 	ldrb.w	r5, [r9]
						dataToSend[5] = VGain;
 801d0e8:	f898 3000 	ldrb.w	r3, [r8]
						dataToSend[7] = Mode_EL;
 801d0ec:	7800      	ldrb	r0, [r0, #0]
 801d0ee:	71e0      	strb	r0, [r4, #7]
						dataToSend[5] = VGain;
 801d0f0:	b2da      	uxtb	r2, r3
						dataToSend[3] = exp_num;
 801d0f2:	b2c9      	uxtb	r1, r1
						dataToSend[4] = LaserOnOff;
 801d0f4:	b2ed      	uxtb	r5, r5
						dataToSend[6] = TFT_ON_OFF;
 801d0f6:	783b      	ldrb	r3, [r7, #0]
						dataToSend[3] = exp_num;
 801d0f8:	70e1      	strb	r1, [r4, #3]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d0fa:	4429      	add	r1, r5
						dataToSend[5] = VGain;
 801d0fc:	7162      	strb	r2, [r4, #5]
						dataToSend[6] = TFT_ON_OFF;
 801d0fe:	b2db      	uxtb	r3, r3
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d100:	440a      	add	r2, r1
						dataToSend[6] = TFT_ON_OFF;
 801d102:	71a3      	strb	r3, [r4, #6]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d104:	4413      	add	r3, r2
 801d106:	7822      	ldrb	r2, [r4, #0]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d108:	494e      	ldr	r1, [pc, #312]	; (801d244 <usb_receive_processing+0x2a8>)
 801d10a:	4859      	ldr	r0, [pc, #356]	; (801d270 <usb_receive_processing+0x2d4>)
						dataToSend[4] = LaserOnOff;
 801d10c:	7125      	strb	r5, [r4, #4]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d10e:	4413      	add	r3, r2
 801d110:	7862      	ldrb	r2, [r4, #1]
 801d112:	4413      	add	r3, r2
 801d114:	78a2      	ldrb	r2, [r4, #2]
 801d116:	4413      	add	r3, r2
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d118:	2240      	movs	r2, #64	; 0x40
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d11a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d11e:	f7ea ffbd 	bl	800809c <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d122:	2300      	movs	r3, #0
 801d124:	6033      	str	r3, [r6, #0]
 801d126:	6073      	str	r3, [r6, #4]
 801d128:	60b3      	str	r3, [r6, #8]
					break;
 801d12a:	e75f      	b.n	801cfec <usb_receive_processing+0x50>
							__asm("nop");
 801d12c:	bf00      	nop
 801d12e:	e78e      	b.n	801d04e <usb_receive_processing+0xb2>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d130:	2201      	movs	r2, #1
 801d132:	e79b      	b.n	801d06c <usb_receive_processing+0xd0>
							__asm("nop");
 801d134:	bf00      	nop
 801d136:	e79e      	b.n	801d076 <usb_receive_processing+0xda>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d138:	2200      	movs	r2, #0
 801d13a:	e7aa      	b.n	801d092 <usb_receive_processing+0xf6>
							__asm("nop");
 801d13c:	bf00      	nop
 801d13e:	e7ac      	b.n	801d09a <usb_receive_processing+0xfe>
								HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801d140:	f7e9 f9e4 	bl	800650c <HAL_TIM_PWM_Stop>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801d144:	2200      	movs	r2, #0
 801d146:	e7be      	b.n	801d0c6 <usb_receive_processing+0x12a>
							__asm("nop");
 801d148:	bf00      	nop
 801d14a:	e7c1      	b.n	801d0d0 <usb_receive_processing+0x134>
							__asm("nop");
 801d14c:	bf00      	nop
 801d14e:	e7c8      	b.n	801d0e2 <usb_receive_processing+0x146>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801d150:	4e48      	ldr	r6, [pc, #288]	; (801d274 <usb_receive_processing+0x2d8>)
						EraseInitStruct.NbPages = 44; 
 801d152:	232c      	movs	r3, #44	; 0x2c
 801d154:	60f3      	str	r3, [r6, #12]
						EraseInitStruct.Banks = FLASH_BANK_2; 
 801d156:	2302      	movs	r3, #2
 801d158:	6073      	str	r3, [r6, #4]
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801d15a:	6035      	str	r5, [r6, #0]
						EraseInitStruct.Page = 0;
 801d15c:	60b5      	str	r5, [r6, #8]
						HAL_FLASH_Unlock(); 
 801d15e:	f7e5 f82b 	bl	80021b8 <HAL_FLASH_Unlock>
						if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 801d162:	a901      	add	r1, sp, #4
 801d164:	4630      	mov	r0, r6
 801d166:	f7e5 f941 	bl	80023ec <HAL_FLASHEx_Erase>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801d16a:	4b43      	ldr	r3, [pc, #268]	; (801d278 <usb_receive_processing+0x2dc>)
 801d16c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801d170:	611a      	str	r2, [r3, #16]
						HAL_FLASH_Lock();
 801d172:	f7e5 f833 	bl	80021dc <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d176:	6025      	str	r5, [r4, #0]
 801d178:	6065      	str	r5, [r4, #4]
 801d17a:	60a5      	str	r5, [r4, #8]
					break;
 801d17c:	e736      	b.n	801cfec <usb_receive_processing+0x50>
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801d17e:	7923      	ldrb	r3, [r4, #4]
 801d180:	78e2      	ldrb	r2, [r4, #3]
 801d182:	041b      	lsls	r3, r3, #16
 801d184:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801d188:	79a2      	ldrb	r2, [r4, #6]
 801d18a:	4313      	orrs	r3, r2
 801d18c:	7962      	ldrb	r2, [r4, #5]
 801d18e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d192:	4a3a      	ldr	r2, [pc, #232]	; (801d27c <usb_receive_processing+0x2e0>)
 801d194:	6013      	str	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801d196:	4b2b      	ldr	r3, [pc, #172]	; (801d244 <usb_receive_processing+0x2a8>)
						dataToSend[2] = 0x1A;
 801d198:	221a      	movs	r2, #26
						dataToSend[0] = 0xAB;
 801d19a:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801d19e:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x1A;
 801d1a2:	709a      	strb	r2, [r3, #2]
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d1a4:	6025      	str	r5, [r4, #0]
 801d1a6:	6065      	str	r5, [r4, #4]
 801d1a8:	60a5      	str	r5, [r4, #8]
 801d1aa:	e043      	b.n	801d234 <usb_receive_processing+0x298>
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801d1ac:	79e0      	ldrb	r0, [r4, #7]
 801d1ae:	f894 8008 	ldrb.w	r8, [r4, #8]
 801d1b2:	4e33      	ldr	r6, [pc, #204]	; (801d280 <usb_receive_processing+0x2e4>)
 801d1b4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 801d1b8:	0603      	lsls	r3, r0, #24
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801d1ba:	f894 8009 	ldrb.w	r8, [r4, #9]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d1be:	79a0      	ldrb	r0, [r4, #6]
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801d1c0:	462a      	mov	r2, r5
 801d1c2:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d1c4:	2100      	movs	r1, #0
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801d1c6:	432a      	orrs	r2, r5
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d1c8:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801d1ca:	ea4f 2108 	mov.w	r1, r8, lsl #8
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d1ce:	f894 8003 	ldrb.w	r8, [r4, #3]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d1d2:	4302      	orrs	r2, r0
 801d1d4:	432a      	orrs	r2, r5
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d1d6:	ea4f 6008 	mov.w	r0, r8, lsl #24
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d1da:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d1dc:	f894 8004 	ldrb.w	r8, [r4, #4]
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801d1e0:	7aa1      	ldrb	r1, [r4, #10]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d1e2:	432a      	orrs	r2, r5
 801d1e4:	430b      	orrs	r3, r1
 801d1e6:	4302      	orrs	r2, r0
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d1e8:	2100      	movs	r1, #0
 801d1ea:	ea4f 4008 	mov.w	r0, r8, lsl #16
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d1ee:	f894 8005 	ldrb.w	r8, [r4, #5]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801d1f2:	4d22      	ldr	r5, [pc, #136]	; (801d27c <usb_receive_processing+0x2e0>)
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d1f4:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d1f6:	2100      	movs	r1, #0
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d1f8:	4302      	orrs	r2, r0
 801d1fa:	430b      	orrs	r3, r1
 801d1fc:	ea4f 2008 	mov.w	r0, r8, lsl #8
 801d200:	2100      	movs	r1, #0
 801d202:	4310      	orrs	r0, r2
 801d204:	4319      	orrs	r1, r3
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801d206:	e9c6 0100 	strd	r0, r1, [r6]
						HAL_FLASH_Unlock();
 801d20a:	f7e4 ffd5 	bl	80021b8 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801d20e:	4b1a      	ldr	r3, [pc, #104]	; (801d278 <usb_receive_processing+0x2dc>)
 801d210:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801d214:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801d216:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d21a:	6829      	ldr	r1, [r5, #0]
 801d21c:	2000      	movs	r0, #0
 801d21e:	f7e5 f825 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801d222:	4604      	mov	r4, r0
 801d224:	2800      	cmp	r0, #0
 801d226:	d1f6      	bne.n	801d216 <usb_receive_processing+0x27a>
						HAL_FLASH_Lock();
 801d228:	f7e4 ffd8 	bl	80021dc <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d22c:	4b03      	ldr	r3, [pc, #12]	; (801d23c <usb_receive_processing+0x2a0>)
 801d22e:	601c      	str	r4, [r3, #0]
 801d230:	605c      	str	r4, [r3, #4]
 801d232:	609c      	str	r4, [r3, #8]
						HAL_Delay(3);
 801d234:	2003      	movs	r0, #3
 801d236:	f7e3 fef9 	bl	800102c <HAL_Delay>
					break;
 801d23a:	e6d7      	b.n	801cfec <usb_receive_processing+0x50>
 801d23c:	2008f540 	.word	0x2008f540
 801d240:	200905b9 	.word	0x200905b9
 801d244:	2008f54c 	.word	0x2008f54c
 801d248:	200905a6 	.word	0x200905a6
 801d24c:	080314c0 	.word	0x080314c0
 801d250:	20095c14 	.word	0x20095c14
 801d254:	2000bd28 	.word	0x2000bd28
 801d258:	48000800 	.word	0x48000800
 801d25c:	20000ebf 	.word	0x20000ebf
 801d260:	48001400 	.word	0x48001400
 801d264:	20000ebe 	.word	0x20000ebe
 801d268:	20095764 	.word	0x20095764
 801d26c:	20000ebc 	.word	0x20000ebc
 801d270:	20095ca8 	.word	0x20095ca8
 801d274:	200959e4 	.word	0x200959e4
 801d278:	40022000 	.word	0x40022000
 801d27c:	20095a8c 	.word	0x20095a8c
 801d280:	20095a80 	.word	0x20095a80
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801d284:	7920      	ldrb	r0, [r4, #4]
 801d286:	78e3      	ldrb	r3, [r4, #3]
 801d288:	0400      	lsls	r0, r0, #16
 801d28a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801d28e:	79a3      	ldrb	r3, [r4, #6]
 801d290:	4318      	orrs	r0, r3
 801d292:	7963      	ldrb	r3, [r4, #5]
 801d294:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801d298:	4b23      	ldr	r3, [pc, #140]	; (801d328 <usb_receive_processing+0x38c>)
 801d29a:	6018      	str	r0, [r3, #0]
						flash_data_read = flash_data_read_buff(flash_address);
 801d29c:	f7ee fd9f 	bl	800bdde <flash_data_read_buff>
 801d2a0:	4b22      	ldr	r3, [pc, #136]	; (801d32c <usb_receive_processing+0x390>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801d2a2:	4a23      	ldr	r2, [pc, #140]	; (801d330 <usb_receive_processing+0x394>)
						flash_data_read = flash_data_read_buff(flash_address);
 801d2a4:	e9c3 0100 	strd	r0, r1, [r3]
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801d2a8:	cb03      	ldmia	r3!, {r0, r1}
 801d2aa:	6051      	str	r1, [r2, #4]
						dataToSend[0] = 0xAB;
 801d2ac:	4921      	ldr	r1, [pc, #132]	; (801d334 <usb_receive_processing+0x398>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801d2ae:	6010      	str	r0, [r2, #0]
						dataToSend[2] = 0x1C;
 801d2b0:	231c      	movs	r3, #28
 801d2b2:	708b      	strb	r3, [r1, #2]
						dataToSend[7] = flash_data_read_SND[7];
 801d2b4:	79d3      	ldrb	r3, [r2, #7]
 801d2b6:	71cb      	strb	r3, [r1, #7]
						dataToSend[8] = flash_data_read_SND[6];
 801d2b8:	7993      	ldrb	r3, [r2, #6]
 801d2ba:	720b      	strb	r3, [r1, #8]
						dataToSend[9] = flash_data_read_SND[5];
 801d2bc:	7953      	ldrb	r3, [r2, #5]
 801d2be:	724b      	strb	r3, [r1, #9]
						dataToSend[10]= flash_data_read_SND[4];
 801d2c0:	7913      	ldrb	r3, [r2, #4]
 801d2c2:	728b      	strb	r3, [r1, #10]
						dataToSend[3] = flash_data_read_SND[3];
 801d2c4:	78d3      	ldrb	r3, [r2, #3]
 801d2c6:	70cb      	strb	r3, [r1, #3]
						dataToSend[4] = flash_data_read_SND[2];
 801d2c8:	7893      	ldrb	r3, [r2, #2]
 801d2ca:	710b      	strb	r3, [r1, #4]
						dataToSend[5] = flash_data_read_SND[1];
 801d2cc:	7853      	ldrb	r3, [r2, #1]
 801d2ce:	714b      	strb	r3, [r1, #5]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d2d0:	4819      	ldr	r0, [pc, #100]	; (801d338 <usb_receive_processing+0x39c>)
						dataToSend[6]	= flash_data_read_SND[0];
 801d2d2:	7813      	ldrb	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801d2d4:	f881 9000 	strb.w	r9, [r1]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d2d8:	2240      	movs	r2, #64	; 0x40
						dataToSend[1] = 0x12;
 801d2da:	f881 8001 	strb.w	r8, [r1, #1]
						dataToSend[6]	= flash_data_read_SND[0];
 801d2de:	718b      	strb	r3, [r1, #6]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d2e0:	f7ea fedc 	bl	800809c <USBD_CUSTOM_HID_SendReport>
 801d2e4:	e75e      	b.n	801d1a4 <usb_receive_processing+0x208>
						if(CRC_STATUS == CRC_OK){
 801d2e6:	4a15      	ldr	r2, [pc, #84]	; (801d33c <usb_receive_processing+0x3a0>)
						dataToSend[0] = 0xAB;
 801d2e8:	4b12      	ldr	r3, [pc, #72]	; (801d334 <usb_receive_processing+0x398>)
						if(CRC_STATUS == CRC_OK){
 801d2ea:	7812      	ldrb	r2, [r2, #0]
						dataToSend[0] = 0xAB;
 801d2ec:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801d2f0:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x66;
 801d2f4:	709f      	strb	r7, [r3, #2]
						if(CRC_STATUS == CRC_OK){
 801d2f6:	b95a      	cbnz	r2, 801d310 <usb_receive_processing+0x374>
							dataToSend[3] = 0x01;
 801d2f8:	2201      	movs	r2, #1
 801d2fa:	70da      	strb	r2, [r3, #3]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d2fc:	2240      	movs	r2, #64	; 0x40
 801d2fe:	490d      	ldr	r1, [pc, #52]	; (801d334 <usb_receive_processing+0x398>)
 801d300:	480d      	ldr	r0, [pc, #52]	; (801d338 <usb_receive_processing+0x39c>)
 801d302:	f7ea fecb 	bl	800809c <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d306:	2300      	movs	r3, #0
 801d308:	6033      	str	r3, [r6, #0]
 801d30a:	6073      	str	r3, [r6, #4]
 801d30c:	60b3      	str	r3, [r6, #8]
 801d30e:	e791      	b.n	801d234 <usb_receive_processing+0x298>
							dataToSend[3] = 0x00;
 801d310:	70dd      	strb	r5, [r3, #3]
 801d312:	e7f3      	b.n	801d2fc <usb_receive_processing+0x360>
						send_usb_block = 1;
 801d314:	4e0a      	ldr	r6, [pc, #40]	; (801d340 <usb_receive_processing+0x3a4>)
 801d316:	2301      	movs	r3, #1
 801d318:	7033      	strb	r3, [r6, #0]
						packet_generator_Calculated_data_send();
 801d31a:	f7ff fd11 	bl	801cd40 <packet_generator_Calculated_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d31e:	6025      	str	r5, [r4, #0]
 801d320:	6065      	str	r5, [r4, #4]
 801d322:	60a5      	str	r5, [r4, #8]
						send_usb_block = 0;
 801d324:	7035      	strb	r5, [r6, #0]
					break;
 801d326:	e661      	b.n	801cfec <usb_receive_processing+0x50>
 801d328:	20095a8c 	.word	0x20095a8c
 801d32c:	200957a8 	.word	0x200957a8
 801d330:	200905a7 	.word	0x200905a7
 801d334:	2008f54c 	.word	0x2008f54c
 801d338:	20095ca8 	.word	0x20095ca8
 801d33c:	200956c2 	.word	0x200956c2
 801d340:	200905b9 	.word	0x200905b9

0801d344 <auto_exposure>:
{ 
 801d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d346:	4d45      	ldr	r5, [pc, #276]	; (801d45c <auto_exposure+0x118>)
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801d348:	4c45      	ldr	r4, [pc, #276]	; (801d460 <auto_exposure+0x11c>)
 801d34a:	882b      	ldrh	r3, [r5, #0]
{ 
 801d34c:	2200      	movs	r2, #0
	for (uint16_t i = 5; i<1024; i++){
 801d34e:	f240 71f6 	movw	r1, #2038	; 0x7f6
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801d352:	18a0      	adds	r0, r4, r2
 801d354:	3202      	adds	r2, #2
 801d356:	8940      	ldrh	r0, [r0, #10]
 801d358:	4283      	cmp	r3, r0
 801d35a:	bf38      	it	cc
 801d35c:	4603      	movcc	r3, r0
	for (uint16_t i = 5; i<1024; i++){
 801d35e:	428a      	cmp	r2, r1
 801d360:	d1f7      	bne.n	801d352 <auto_exposure+0xe>
	if(max_el < 20000 && exp_num != 9)
 801d362:	f644 621f 	movw	r2, #19999	; 0x4e1f
 801d366:	4293      	cmp	r3, r2
 801d368:	802b      	strh	r3, [r5, #0]
 801d36a:	4c3e      	ldr	r4, [pc, #248]	; (801d464 <auto_exposure+0x120>)
 801d36c:	d840      	bhi.n	801d3f0 <auto_exposure+0xac>
 801d36e:	7823      	ldrb	r3, [r4, #0]
 801d370:	2b09      	cmp	r3, #9
 801d372:	d027      	beq.n	801d3c4 <auto_exposure+0x80>
		highSignal = 0;
 801d374:	4a3c      	ldr	r2, [pc, #240]	; (801d468 <auto_exposure+0x124>)
		send_usb_block =1;
 801d376:	4f3d      	ldr	r7, [pc, #244]	; (801d46c <auto_exposure+0x128>)
		highSignal = 0;
 801d378:	2300      	movs	r3, #0
 801d37a:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801d37c:	4a3c      	ldr	r2, [pc, #240]	; (801d470 <auto_exposure+0x12c>)
 801d37e:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801d380:	2301      	movs	r3, #1
 801d382:	703b      	strb	r3, [r7, #0]
		exp_num++;
 801d384:	7823      	ldrb	r3, [r4, #0]
 801d386:	3301      	adds	r3, #1
		exp_num--;
 801d388:	b2db      	uxtb	r3, r3
 801d38a:	7023      	strb	r3, [r4, #0]
		htim2.Init.Period = exposure_timer_period[exp_num];
 801d38c:	7822      	ldrb	r2, [r4, #0]
 801d38e:	4b39      	ldr	r3, [pc, #228]	; (801d474 <auto_exposure+0x130>)
 801d390:	4e39      	ldr	r6, [pc, #228]	; (801d478 <auto_exposure+0x134>)
 801d392:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801d396:	4b39      	ldr	r3, [pc, #228]	; (801d47c <auto_exposure+0x138>)
 801d398:	60da      	str	r2, [r3, #12]
		MX_TIM2_Init();
 801d39a:	f7ff fa25 	bl	801c7e8 <MX_TIM2_Init>
		Calibration_Exposure_Change(exp_num);
 801d39e:	7820      	ldrb	r0, [r4, #0]
 801d3a0:	f7f1 fcbc 	bl	800ed1c <Calibration_Exposure_Change>
		if(Mode_EL == 0){
 801d3a4:	4b36      	ldr	r3, [pc, #216]	; (801d480 <auto_exposure+0x13c>)
 801d3a6:	781a      	ldrb	r2, [r3, #0]
 801d3a8:	4b36      	ldr	r3, [pc, #216]	; (801d484 <auto_exposure+0x140>)
 801d3aa:	2a00      	cmp	r2, #0
 801d3ac:	d132      	bne.n	801d414 <auto_exposure+0xd0>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801d3ae:	4a36      	ldr	r2, [pc, #216]	; (801d488 <auto_exposure+0x144>)
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801d3b0:	ed93 0a00 	vldr	s0, [r3]
 801d3b4:	edd2 0a00 	vldr	s1, [r2]
 801d3b8:	f7fc f992 	bl	80196e0 <Rabs_calc_Factor2_Settings_change>
		send_usb_block =0;
 801d3bc:	2300      	movs	r3, #0
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801d3be:	ed86 0a00 	vstr	s0, [r6]
		send_usb_block =0;
 801d3c2:	703b      	strb	r3, [r7, #0]
	if(old_exp_num!=exp_num ){exp_set = 1; }else{exp_set = 0;}
 801d3c4:	4b31      	ldr	r3, [pc, #196]	; (801d48c <auto_exposure+0x148>)
 801d3c6:	7822      	ldrb	r2, [r4, #0]
 801d3c8:	7819      	ldrb	r1, [r3, #0]
 801d3ca:	4291      	cmp	r1, r2
 801d3cc:	4a30      	ldr	r2, [pc, #192]	; (801d490 <auto_exposure+0x14c>)
 801d3ce:	bf14      	ite	ne
 801d3d0:	2101      	movne	r1, #1
 801d3d2:	2100      	moveq	r1, #0
 801d3d4:	7011      	strb	r1, [r2, #0]
	old_exp_num = exp_num;
 801d3d6:	7822      	ldrb	r2, [r4, #0]
 801d3d8:	701a      	strb	r2, [r3, #0]
	if(exp_num ==0 && max_el >=50000)
 801d3da:	7823      	ldrb	r3, [r4, #0]
 801d3dc:	b9e3      	cbnz	r3, 801d418 <auto_exposure+0xd4>
 801d3de:	882a      	ldrh	r2, [r5, #0]
 801d3e0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801d3e4:	429a      	cmp	r2, r3
 801d3e6:	d917      	bls.n	801d418 <auto_exposure+0xd4>
		highSignal = 1;
 801d3e8:	2201      	movs	r2, #1
			highSignal = 0;
 801d3ea:	4b1f      	ldr	r3, [pc, #124]	; (801d468 <auto_exposure+0x124>)
			lowSignal = 0;
 801d3ec:	701a      	strb	r2, [r3, #0]
 801d3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if(max_el > 45000 && exp_num != 0)
 801d3f0:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 801d3f4:	4293      	cmp	r3, r2
 801d3f6:	d9e5      	bls.n	801d3c4 <auto_exposure+0x80>
 801d3f8:	7823      	ldrb	r3, [r4, #0]
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d0e2      	beq.n	801d3c4 <auto_exposure+0x80>
		highSignal = 0;
 801d3fe:	4a1a      	ldr	r2, [pc, #104]	; (801d468 <auto_exposure+0x124>)
		send_usb_block =1;
 801d400:	4f1a      	ldr	r7, [pc, #104]	; (801d46c <auto_exposure+0x128>)
		highSignal = 0;
 801d402:	2300      	movs	r3, #0
 801d404:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801d406:	4a1a      	ldr	r2, [pc, #104]	; (801d470 <auto_exposure+0x12c>)
 801d408:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801d40a:	2301      	movs	r3, #1
 801d40c:	703b      	strb	r3, [r7, #0]
		exp_num--;
 801d40e:	7823      	ldrb	r3, [r4, #0]
 801d410:	3b01      	subs	r3, #1
 801d412:	e7b9      	b.n	801d388 <auto_exposure+0x44>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801d414:	4a1f      	ldr	r2, [pc, #124]	; (801d494 <auto_exposure+0x150>)
 801d416:	e7cb      	b.n	801d3b0 <auto_exposure+0x6c>
	} else if((exp_num ==0 && max_el < 50000))
 801d418:	7823      	ldrb	r3, [r4, #0]
 801d41a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801d41e:	b923      	cbnz	r3, 801d42a <auto_exposure+0xe6>
 801d420:	8829      	ldrh	r1, [r5, #0]
 801d422:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801d426:	4299      	cmp	r1, r3
 801d428:	d9df      	bls.n	801d3ea <auto_exposure+0xa6>
	} else if((exp_num ==9 && max_el < DarkSignal+2000)) //20000
 801d42a:	7823      	ldrb	r3, [r4, #0]
 801d42c:	2b09      	cmp	r3, #9
 801d42e:	d109      	bne.n	801d444 <auto_exposure+0x100>
 801d430:	4b19      	ldr	r3, [pc, #100]	; (801d498 <auto_exposure+0x154>)
 801d432:	882a      	ldrh	r2, [r5, #0]
 801d434:	881b      	ldrh	r3, [r3, #0]
 801d436:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 801d43a:	4293      	cmp	r3, r2
 801d43c:	db02      	blt.n	801d444 <auto_exposure+0x100>
			lowSignal = 1;
 801d43e:	2201      	movs	r2, #1
			lowSignal = 0;
 801d440:	4b0b      	ldr	r3, [pc, #44]	; (801d470 <auto_exposure+0x12c>)
 801d442:	e7d3      	b.n	801d3ec <auto_exposure+0xa8>
	}else if((exp_num ==9 && max_el > DarkSignal+2000))
 801d444:	7823      	ldrb	r3, [r4, #0]
 801d446:	2b09      	cmp	r3, #9
 801d448:	d1d1      	bne.n	801d3ee <auto_exposure+0xaa>
 801d44a:	4b13      	ldr	r3, [pc, #76]	; (801d498 <auto_exposure+0x154>)
 801d44c:	882a      	ldrh	r2, [r5, #0]
 801d44e:	881b      	ldrh	r3, [r3, #0]
 801d450:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801d454:	429a      	cmp	r2, r3
 801d456:	ddca      	ble.n	801d3ee <auto_exposure+0xaa>
			lowSignal = 0;
 801d458:	2200      	movs	r2, #0
 801d45a:	e7f1      	b.n	801d440 <auto_exposure+0xfc>
 801d45c:	200905b4 	.word	0x200905b4
 801d460:	2000e52c 	.word	0x2000e52c
 801d464:	200905a6 	.word	0x200905a6
 801d468:	200905af 	.word	0x200905af
 801d46c:	200905b9 	.word	0x200905b9
 801d470:	200905b2 	.word	0x200905b2
 801d474:	080314c0 	.word	0x080314c0
 801d478:	20009d24 	.word	0x20009d24
 801d47c:	20095c14 	.word	0x20095c14
 801d480:	20000ebc 	.word	0x20000ebc
 801d484:	20009d1c 	.word	0x20009d1c
 801d488:	20009d18 	.word	0x20009d18
 801d48c:	200905b6 	.word	0x200905b6
 801d490:	20000ec0 	.word	0x20000ec0
 801d494:	20009d14 	.word	0x20009d14
 801d498:	20009d12 	.word	0x20009d12

0801d49c <TIM2_IRQHandler>:
{
 801d49c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 801d49e:	4d0d      	ldr	r5, [pc, #52]	; (801d4d4 <TIM2_IRQHandler+0x38>)
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	2110      	movs	r1, #16
 801d4a4:	4628      	mov	r0, r5
 801d4a6:	f7e5 f98b 	bl	80027c0 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 801d4aa:	200a      	movs	r0, #10
 801d4ac:	f7ff f9e4 	bl	801c878 <DWT_Delay>
	i = 0;
 801d4b0:	4b09      	ldr	r3, [pc, #36]	; (801d4d8 <TIM2_IRQHandler+0x3c>)
 801d4b2:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801d4b4:	4628      	mov	r0, r5
 801d4b6:	2201      	movs	r2, #1
 801d4b8:	2110      	movs	r1, #16
	i = 0;
 801d4ba:	801c      	strh	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801d4bc:	f7e5 f980 	bl	80027c0 <HAL_GPIO_WritePin>
  cnt_delay_bar = 0;
 801d4c0:	4b06      	ldr	r3, [pc, #24]	; (801d4dc <TIM2_IRQHandler+0x40>)
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801d4c2:	201c      	movs	r0, #28
  cnt_delay_bar = 0;
 801d4c4:	801c      	strh	r4, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801d4c6:	f7e4 facf 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim2);
 801d4ca:	4805      	ldr	r0, [pc, #20]	; (801d4e0 <TIM2_IRQHandler+0x44>)
}																					//	7.812ms	15.625ms	31.25ms	62.5ms	125ms	250ms	500ms	1s			2s			4s
 801d4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IRQHandler(&htim2);
 801d4d0:	f7e8 bcc3 	b.w	8005e5a <HAL_TIM_IRQHandler>
 801d4d4:	48000800 	.word	0x48000800
 801d4d8:	200905b0 	.word	0x200905b0
 801d4dc:	2008f504 	.word	0x2008f504
 801d4e0:	20095c14 	.word	0x20095c14

0801d4e4 <TIM6_DAC_IRQHandler>:
{
 801d4e4:	b508      	push	{r3, lr}
	pause_button = 0;
 801d4e6:	4b06      	ldr	r3, [pc, #24]	; (801d500 <TIM6_DAC_IRQHandler+0x1c>)
 801d4e8:	2200      	movs	r2, #0
 801d4ea:	701a      	strb	r2, [r3, #0]
	Get_Battery_Level();
 801d4ec:	f7ff fb10 	bl	801cb10 <Get_Battery_Level>
	HAL_NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 801d4f0:	2036      	movs	r0, #54	; 0x36
 801d4f2:	f7e4 fab9 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_TIM_IRQHandler(&htim6);
 801d4f6:	4803      	ldr	r0, [pc, #12]	; (801d504 <TIM6_DAC_IRQHandler+0x20>)
}
 801d4f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 801d4fc:	f7e8 bcad 	b.w	8005e5a <HAL_TIM_IRQHandler>
 801d500:	200905b7 	.word	0x200905b7
 801d504:	20095a94 	.word	0x20095a94

0801d508 <TIM7_IRQHandler>:
{
 801d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801d50a:	4b48      	ldr	r3, [pc, #288]	; (801d62c <TIM7_IRQHandler+0x124>)
 801d50c:	781b      	ldrb	r3, [r3, #0]
	if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen||
 801d50e:	3b01      	subs	r3, #1
 801d510:	2b04      	cmp	r3, #4
 801d512:	d81e      	bhi.n	801d552 <TIM7_IRQHandler+0x4a>
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801d514:	4b46      	ldr	r3, [pc, #280]	; (801d630 <TIM7_IRQHandler+0x128>)
 801d516:	781b      	ldrb	r3, [r3, #0]
 801d518:	b9db      	cbnz	r3, 801d552 <TIM7_IRQHandler+0x4a>
 801d51a:	4b46      	ldr	r3, [pc, #280]	; (801d634 <TIM7_IRQHandler+0x12c>)
 801d51c:	781b      	ldrb	r3, [r3, #0]
 801d51e:	b9c3      	cbnz	r3, 801d552 <TIM7_IRQHandler+0x4a>
			cnt_delay_bar++;
 801d520:	4a45      	ldr	r2, [pc, #276]	; (801d638 <TIM7_IRQHandler+0x130>)
			if(exp_num > 4){
 801d522:	4946      	ldr	r1, [pc, #280]	; (801d63c <TIM7_IRQHandler+0x134>)
			cnt_delay_bar++;
 801d524:	8813      	ldrh	r3, [r2, #0]
 801d526:	3301      	adds	r3, #1
 801d528:	b29b      	uxth	r3, r3
 801d52a:	8013      	strh	r3, [r2, #0]
			if(exp_num > 4){
 801d52c:	780a      	ldrb	r2, [r1, #0]
 801d52e:	2a04      	cmp	r2, #4
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801d530:	780a      	ldrb	r2, [r1, #0]
			if(exp_num > 4){
 801d532:	d96b      	bls.n	801d60c <TIM7_IRQHandler+0x104>
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801d534:	4842      	ldr	r0, [pc, #264]	; (801d640 <TIM7_IRQHandler+0x138>)
 801d536:	f241 7670 	movw	r6, #6000	; 0x1770
 801d53a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801d53e:	fbb2 f2f6 	udiv	r2, r2, r6
 801d542:	4293      	cmp	r3, r2
 801d544:	d12b      	bne.n	801d59e <TIM7_IRQHandler+0x96>
						GUI_Bar_Measure(85, 13, 0.2);
 801d546:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801d644 <TIM7_IRQHandler+0x13c>
						GUI_Bar_Measure(85, 13, 0.6);
 801d54a:	210d      	movs	r1, #13
 801d54c:	2055      	movs	r0, #85	; 0x55
 801d54e:	f7f5 fdb3 	bl	80130b8 <GUI_Bar_Measure>
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801d552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801d556:	483c      	ldr	r0, [pc, #240]	; (801d648 <TIM7_IRQHandler+0x140>)
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801d558:	4c3c      	ldr	r4, [pc, #240]	; (801d64c <TIM7_IRQHandler+0x144>)
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801d55a:	4d3d      	ldr	r5, [pc, #244]	; (801d650 <TIM7_IRQHandler+0x148>)
 801d55c:	f7e5 f92a 	bl	80027b4 <HAL_GPIO_ReadPin>
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801d560:	7823      	ldrb	r3, [r4, #0]
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801d562:	7028      	strb	r0, [r5, #0]
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801d564:	4283      	cmp	r3, r0
 801d566:	d012      	beq.n	801d58e <TIM7_IRQHandler+0x86>
 801d568:	4b3a      	ldr	r3, [pc, #232]	; (801d654 <TIM7_IRQHandler+0x14c>)
 801d56a:	781b      	ldrb	r3, [r3, #0]
 801d56c:	b97b      	cbnz	r3, 801d58e <TIM7_IRQHandler+0x86>
		GUI_Button_SD_Card(55, 426, !SD_Detect);
 801d56e:	fab0 f280 	clz	r2, r0
 801d572:	0952      	lsrs	r2, r2, #5
 801d574:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d578:	2037      	movs	r0, #55	; 0x37
 801d57a:	f7f5 f817 	bl	80125ac <GUI_Button_SD_Card>
		old_sd_detect = SD_Detect;
 801d57e:	782b      	ldrb	r3, [r5, #0]
 801d580:	7023      	strb	r3, [r4, #0]
		if(SD_Detect == 0){
 801d582:	2b00      	cmp	r3, #0
 801d584:	d14b      	bne.n	801d61e <TIM7_IRQHandler+0x116>
				MX_SDMMC1_SD_Init();
 801d586:	f7ff f91d 	bl	801c7c4 <MX_SDMMC1_SD_Init>
				MX_FATFS_Init();
 801d58a:	f7fe fae9 	bl	801bb60 <MX_FATFS_Init>
	HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
 801d58e:	2037      	movs	r0, #55	; 0x37
 801d590:	f7e4 fa6a 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim7);
 801d594:	4830      	ldr	r0, [pc, #192]	; (801d658 <TIM7_IRQHandler+0x150>)
}
 801d596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_IRQHandler(&htim7);
 801d59a:	f7e8 bc5e 	b.w	8005e5a <HAL_TIM_IRQHandler>
				else if (cnt_delay_bar == 2*(exposure_timer_period[exp_num]/12)/500)
 801d59e:	780a      	ldrb	r2, [r1, #0]
 801d5a0:	270c      	movs	r7, #12
 801d5a2:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 801d5a6:	fbb5 f5f7 	udiv	r5, r5, r7
 801d5aa:	22fa      	movs	r2, #250	; 0xfa
 801d5ac:	fb95 f5f2 	sdiv	r5, r5, r2
 801d5b0:	42ab      	cmp	r3, r5
 801d5b2:	d102      	bne.n	801d5ba <TIM7_IRQHandler+0xb2>
						GUI_Bar_Measure(85, 13, 0.4);
 801d5b4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801d65c <TIM7_IRQHandler+0x154>
 801d5b8:	e7c7      	b.n	801d54a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 3*(exposure_timer_period[exp_num]/12)/500)
 801d5ba:	780a      	ldrb	r2, [r1, #0]
 801d5bc:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 801d5c0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801d5c4:	fbb2 f2f7 	udiv	r2, r2, r7
 801d5c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d5cc:	fb92 f2f4 	sdiv	r2, r2, r4
 801d5d0:	4293      	cmp	r3, r2
 801d5d2:	d102      	bne.n	801d5da <TIM7_IRQHandler+0xd2>
						GUI_Bar_Measure(85, 13, 0.6);
 801d5d4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801d660 <TIM7_IRQHandler+0x158>
 801d5d8:	e7b7      	b.n	801d54a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 4*(exposure_timer_period[exp_num]/12)/500)
 801d5da:	780a      	ldrb	r2, [r1, #0]
 801d5dc:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 801d5e0:	fbb4 f4f7 	udiv	r4, r4, r7
 801d5e4:	227d      	movs	r2, #125	; 0x7d
 801d5e6:	fb94 f4f2 	sdiv	r4, r4, r2
 801d5ea:	42a3      	cmp	r3, r4
 801d5ec:	d102      	bne.n	801d5f4 <TIM7_IRQHandler+0xec>
						GUI_Bar_Measure(85, 13, 0.8);
 801d5ee:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801d664 <TIM7_IRQHandler+0x15c>
 801d5f2:	e7aa      	b.n	801d54a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 5*((exposure_timer_period[exp_num]/12)/500))
 801d5f4:	780a      	ldrb	r2, [r1, #0]
 801d5f6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801d5fa:	fbb2 f2f6 	udiv	r2, r2, r6
 801d5fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d602:	4293      	cmp	r3, r2
 801d604:	d1a5      	bne.n	801d552 <TIM7_IRQHandler+0x4a>
						GUI_Bar_Measure(85, 13, 1);
 801d606:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d60a:	e79e      	b.n	801d54a <TIM7_IRQHandler+0x42>
				} else if(exp_num > 2)
 801d60c:	2a02      	cmp	r2, #2
 801d60e:	d9fa      	bls.n	801d606 <TIM7_IRQHandler+0xfe>
							if(cnt_delay_bar == 1){
 801d610:	2b01      	cmp	r3, #1
 801d612:	d102      	bne.n	801d61a <TIM7_IRQHandler+0x112>
								GUI_Bar_Measure(85, 13, 0.5);
 801d614:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801d618:	e797      	b.n	801d54a <TIM7_IRQHandler+0x42>
							} else if(cnt_delay_bar == 2){
 801d61a:	2b02      	cmp	r3, #2
 801d61c:	e7f2      	b.n	801d604 <TIM7_IRQHandler+0xfc>
			FATFS_UnLinkDriver(SDPath);
 801d61e:	4812      	ldr	r0, [pc, #72]	; (801d668 <TIM7_IRQHandler+0x160>)
 801d620:	f7ec fa94 	bl	8009b4c <FATFS_UnLinkDriver>
				HAL_SD_DeInit(&hsd1);
 801d624:	4811      	ldr	r0, [pc, #68]	; (801d66c <TIM7_IRQHandler+0x164>)
 801d626:	f7e7 fc19 	bl	8004e5c <HAL_SD_DeInit>
 801d62a:	e7b0      	b.n	801d58e <TIM7_IRQHandler+0x86>
 801d62c:	200056f1 	.word	0x200056f1
 801d630:	20005718 	.word	0x20005718
 801d634:	20009ce5 	.word	0x20009ce5
 801d638:	2008f504 	.word	0x2008f504
 801d63c:	200905a6 	.word	0x200905a6
 801d640:	080314c0 	.word	0x080314c0
 801d644:	3e4ccccd 	.word	0x3e4ccccd
 801d648:	48000800 	.word	0x48000800
 801d64c:	20000ec2 	.word	0x20000ec2
 801d650:	20095c10 	.word	0x20095c10
 801d654:	200956c2 	.word	0x200956c2
 801d658:	20095c60 	.word	0x20095c60
 801d65c:	3ecccccd 	.word	0x3ecccccd
 801d660:	3f19999a 	.word	0x3f19999a
 801d664:	3f4ccccd 	.word	0x3f4ccccd
 801d668:	20093635 	.word	0x20093635
 801d66c:	200957b8 	.word	0x200957b8

0801d670 <EXTI9_5_IRQHandler>:
{
 801d670:	b513      	push	{r0, r1, r4, lr}
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801d672:	4c22      	ldr	r4, [pc, #136]	; (801d6fc <EXTI9_5_IRQHandler+0x8c>)
	DWT_Delay(1);
 801d674:	2001      	movs	r0, #1
 801d676:	f7ff f8ff 	bl	801c878 <DWT_Delay>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801d67a:	2300      	movs	r3, #0
 801d67c:	4622      	mov	r2, r4
 801d67e:	4621      	mov	r1, r4
 801d680:	9300      	str	r3, [sp, #0]
 801d682:	481f      	ldr	r0, [pc, #124]	; (801d700 <EXTI9_5_IRQHandler+0x90>)
 801d684:	2302      	movs	r3, #2
 801d686:	f7e8 f978 	bl	800597a <HAL_SPI_TransmitReceive>
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801d68a:	7823      	ldrb	r3, [r4, #0]
 801d68c:	7862      	ldrb	r2, [r4, #1]
 801d68e:	4c1d      	ldr	r4, [pc, #116]	; (801d704 <EXTI9_5_IRQHandler+0x94>)
 801d690:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Line[i] = Line[i-1]; 
 801d694:	8821      	ldrh	r1, [r4, #0]
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801d696:	f64c 73fe 	movw	r3, #53246	; 0xcffe
 801d69a:	429a      	cmp	r2, r3
		Line[i] = Line[i-1]; 
 801d69c:	b289      	uxth	r1, r1
 801d69e:	4b1a      	ldr	r3, [pc, #104]	; (801d708 <EXTI9_5_IRQHandler+0x98>)
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801d6a0:	dd05      	ble.n	801d6ae <EXTI9_5_IRQHandler+0x3e>
		Line[i] = Line[i-1]; 
 801d6a2:	8822      	ldrh	r2, [r4, #0]
 801d6a4:	b292      	uxth	r2, r2
 801d6a6:	3a01      	subs	r2, #1
 801d6a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801d6ac:	e002      	b.n	801d6b4 <EXTI9_5_IRQHandler+0x44>
	} else if((RxBuf[0] << 8 | RxBuf[1])<=0x0EFF)
 801d6ae:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 801d6b2:	dbf6      	blt.n	801d6a2 <EXTI9_5_IRQHandler+0x32>
		Line[i] = RxBuf[0] << 8 | RxBuf[1];
 801d6b4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(i >= 1023)
 801d6b8:	8823      	ldrh	r3, [r4, #0]
 801d6ba:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801d6be:	b29b      	uxth	r3, r3
 801d6c0:	4293      	cmp	r3, r2
 801d6c2:	d916      	bls.n	801d6f2 <EXTI9_5_IRQHandler+0x82>
		if(send_usb_block == 0 && (!pause))
 801d6c4:	4b11      	ldr	r3, [pc, #68]	; (801d70c <EXTI9_5_IRQHandler+0x9c>)
 801d6c6:	781b      	ldrb	r3, [r3, #0]
 801d6c8:	b943      	cbnz	r3, 801d6dc <EXTI9_5_IRQHandler+0x6c>
 801d6ca:	4b11      	ldr	r3, [pc, #68]	; (801d710 <EXTI9_5_IRQHandler+0xa0>)
 801d6cc:	781b      	ldrb	r3, [r3, #0]
 801d6ce:	b92b      	cbnz	r3, 801d6dc <EXTI9_5_IRQHandler+0x6c>
				memcpy(Line_buff, Line, sizeof(Line));
 801d6d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d6d4:	490c      	ldr	r1, [pc, #48]	; (801d708 <EXTI9_5_IRQHandler+0x98>)
 801d6d6:	480f      	ldr	r0, [pc, #60]	; (801d714 <EXTI9_5_IRQHandler+0xa4>)
 801d6d8:	f002 f982 	bl	801f9e0 <memcpy>
			i = 0;
 801d6dc:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801d6de:	2017      	movs	r0, #23
			i++;
 801d6e0:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801d6e2:	f7e4 f9c1 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801d6e6:	2080      	movs	r0, #128	; 0x80
}
 801d6e8:	b002      	add	sp, #8
 801d6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801d6ee:	f7e5 b871 	b.w	80027d4 <HAL_GPIO_EXTI_IRQHandler>
			i++;
 801d6f2:	8823      	ldrh	r3, [r4, #0]
 801d6f4:	3301      	adds	r3, #1
 801d6f6:	b29b      	uxth	r3, r3
 801d6f8:	e7f1      	b.n	801d6de <EXTI9_5_IRQHandler+0x6e>
 801d6fa:	bf00      	nop
 801d6fc:	20095b48 	.word	0x20095b48
 801d700:	20095bac 	.word	0x20095bac
 801d704:	200905b0 	.word	0x200905b0
 801d708:	2000bd2a 	.word	0x2000bd2a
 801d70c:	200905b9 	.word	0x200905b9
 801d710:	20005718 	.word	0x20005718
 801d714:	2000e52c 	.word	0x2000e52c

0801d718 <EXTI3_IRQHandler>:
{	
 801d718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cnt_touch_delay = cnt_touch_delay + 1;
 801d71a:	4b29      	ldr	r3, [pc, #164]	; (801d7c0 <EXTI3_IRQHandler+0xa8>)
	Touch_x = 0, Touch_y = 0;
 801d71c:	4e29      	ldr	r6, [pc, #164]	; (801d7c4 <EXTI3_IRQHandler+0xac>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801d71e:	681a      	ldr	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801d720:	4c29      	ldr	r4, [pc, #164]	; (801d7c8 <EXTI3_IRQHandler+0xb0>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801d722:	3201      	adds	r2, #1
 801d724:	601a      	str	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801d726:	2200      	movs	r2, #0
 801d728:	8032      	strh	r2, [r6, #0]
 801d72a:	8022      	strh	r2, [r4, #0]
	if((!TFT_ON_OFF) && (cnt_touch_delay >= 50))
 801d72c:	4a27      	ldr	r2, [pc, #156]	; (801d7cc <EXTI3_IRQHandler+0xb4>)
 801d72e:	7817      	ldrb	r7, [r2, #0]
 801d730:	461d      	mov	r5, r3
 801d732:	4611      	mov	r1, r2
 801d734:	b957      	cbnz	r7, 801d74c <EXTI3_IRQHandler+0x34>
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	2b31      	cmp	r3, #49	; 0x31
 801d73a:	d907      	bls.n	801d74c <EXTI3_IRQHandler+0x34>
			TFT_ON_OFF = 0x01;
 801d73c:	2301      	movs	r3, #1
 801d73e:	7013      	strb	r3, [r2, #0]
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d740:	2104      	movs	r1, #4
 801d742:	4823      	ldr	r0, [pc, #140]	; (801d7d0 <EXTI3_IRQHandler+0xb8>)
}
 801d744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d748:	f7e8 beaa 	b.w	80064a0 <HAL_TIM_PWM_Start>
		if(TFT_ON_OFF){
 801d74c:	780b      	ldrb	r3, [r1, #0]
 801d74e:	b36b      	cbz	r3, 801d7ac <EXTI3_IRQHandler+0x94>
			TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801d750:	4a1d      	ldr	r2, [pc, #116]	; (801d7c8 <EXTI3_IRQHandler+0xb0>)
 801d752:	491c      	ldr	r1, [pc, #112]	; (801d7c4 <EXTI3_IRQHandler+0xac>)
 801d754:	2070      	movs	r0, #112	; 0x70
 801d756:	f7fe f981 	bl	801ba5c <TS_Get_XY1>
			if((Mode_EL == 0x00) && ((Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) )))
 801d75a:	4b1e      	ldr	r3, [pc, #120]	; (801d7d4 <EXTI3_IRQHandler+0xbc>)
 801d75c:	781a      	ldrb	r2, [r3, #0]
 801d75e:	bb0a      	cbnz	r2, 801d7a4 <EXTI3_IRQHandler+0x8c>
 801d760:	8833      	ldrh	r3, [r6, #0]
 801d762:	3b6d      	subs	r3, #109	; 0x6d
 801d764:	b29b      	uxth	r3, r3
 801d766:	2b36      	cmp	r3, #54	; 0x36
 801d768:	d81c      	bhi.n	801d7a4 <EXTI3_IRQHandler+0x8c>
 801d76a:	8823      	ldrh	r3, [r4, #0]
 801d76c:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801d770:	b29b      	uxth	r3, r3
 801d772:	2b36      	cmp	r3, #54	; 0x36
 801d774:	d816      	bhi.n	801d7a4 <EXTI3_IRQHandler+0x8c>
				pause_button++;
 801d776:	4c18      	ldr	r4, [pc, #96]	; (801d7d8 <EXTI3_IRQHandler+0xc0>)
 801d778:	7823      	ldrb	r3, [r4, #0]
 801d77a:	3301      	adds	r3, #1
 801d77c:	b2db      	uxtb	r3, r3
				if(pause_button > 3)
 801d77e:	2b03      	cmp	r3, #3
				pause_button++;
 801d780:	7023      	strb	r3, [r4, #0]
				if(pause_button > 3)
 801d782:	d90f      	bls.n	801d7a4 <EXTI3_IRQHandler+0x8c>
					LaserOnOff = !LaserOnOff;
 801d784:	4915      	ldr	r1, [pc, #84]	; (801d7dc <EXTI3_IRQHandler+0xc4>)
 801d786:	780b      	ldrb	r3, [r1, #0]
 801d788:	fab3 f383 	clz	r3, r3
 801d78c:	095b      	lsrs	r3, r3, #5
 801d78e:	700b      	strb	r3, [r1, #0]
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d790:	780b      	ldrb	r3, [r1, #0]
 801d792:	b19b      	cbz	r3, 801d7bc <EXTI3_IRQHandler+0xa4>
 801d794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d798:	4811      	ldr	r0, [pc, #68]	; (801d7e0 <EXTI3_IRQHandler+0xc8>)
 801d79a:	f7e5 f811 	bl	80027c0 <HAL_GPIO_WritePin>
					cnt_touch_delay = 0;
 801d79e:	2300      	movs	r3, #0
 801d7a0:	602b      	str	r3, [r5, #0]
					pause_button = 0;
 801d7a2:	7023      	strb	r3, [r4, #0]
				GUI_Touch_Processing();
 801d7a4:	f7f3 fa28 	bl	8010bf8 <GUI_Touch_Processing>
				cnt_touch_delay = 0;
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	602b      	str	r3, [r5, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 801d7ac:	2009      	movs	r0, #9
 801d7ae:	f7e4 f95b 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801d7b2:	2008      	movs	r0, #8
}
 801d7b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801d7b8:	f7e5 b80c 	b.w	80027d4 <HAL_GPIO_EXTI_IRQHandler>
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d7bc:	2201      	movs	r2, #1
 801d7be:	e7e9      	b.n	801d794 <EXTI3_IRQHandler+0x7c>
 801d7c0:	2008f508 	.word	0x2008f508
 801d7c4:	20054932 	.word	0x20054932
 801d7c8:	20054934 	.word	0x20054934
 801d7cc:	20000ebe 	.word	0x20000ebe
 801d7d0:	20095764 	.word	0x20095764
 801d7d4:	20000ebc 	.word	0x20000ebc
 801d7d8:	200905b7 	.word	0x200905b7
 801d7dc:	2000bd28 	.word	0x2000bd28
 801d7e0:	48000800 	.word	0x48000800

0801d7e4 <SystemClock_Config>:
{
 801d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801d7e6:	2000      	movs	r0, #0
{
 801d7e8:	b0bf      	sub	sp, #252	; 0xfc
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801d7ea:	f7e6 faef 	bl	8003dcc <HAL_PWREx_ControlVoltageScaling>
 801d7ee:	b100      	cbz	r0, 801d7f2 <SystemClock_Config+0xe>
 801d7f0:	e7fe      	b.n	801d7f0 <SystemClock_Config+0xc>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801d7f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 801d7f6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801d7f8:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d7fa:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801d7fc:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801d7fe:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801d802:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801d804:	2705      	movs	r7, #5
  RCC_OscInitStruct.PLL.PLLN = 30;
 801d806:	231e      	movs	r3, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d808:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801d80a:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801d80c:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d80e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801d810:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 801d812:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 30;
 801d814:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801d816:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801d818:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801d81a:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d81c:	f7e6 fbcc 	bl	8003fb8 <HAL_RCC_OscConfig>
 801d820:	b100      	cbz	r0, 801d824 <SystemClock_Config+0x40>
 801d822:	e7fe      	b.n	801d822 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d824:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d826:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801d828:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801d82a:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801d82c:	4639      	mov	r1, r7
 801d82e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d830:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801d832:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801d834:	f7e6 fe12 	bl	800445c <HAL_RCC_ClockConfig>
 801d838:	b100      	cbz	r0, 801d83c <SystemClock_Config+0x58>
 801d83a:	e7fe      	b.n	801d83a <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
 801d83c:	4b1e      	ldr	r3, [pc, #120]	; (801d8b8 <SystemClock_Config+0xd4>)
 801d83e:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 801d840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d844:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801d846:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801d84a:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 801d84c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 801d850:	9337      	str	r3, [sp, #220]	; 0xdc
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 801d852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d856:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PLLSAI2.PLLSAI2N = 9;
 801d858:	2309      	movs	r3, #9
 801d85a:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 801d85c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801d860:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801d862:	230c      	movs	r3, #12
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801d864:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801d866:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801d868:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801d86a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 801d86e:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 801d870:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 801d872:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 801d874:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 801d876:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 801d878:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801d87a:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801d87c:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 801d87e:	963a      	str	r6, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 801d880:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 801d882:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801d884:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801d886:	f7e7 f81d 	bl	80048c4 <HAL_RCCEx_PeriphCLKConfig>
 801d88a:	4604      	mov	r4, r0
 801d88c:	b100      	cbz	r0, 801d890 <SystemClock_Config+0xac>
 801d88e:	e7fe      	b.n	801d88e <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 801d890:	f7e6 fede 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 801d894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d898:	fbb0 f0f3 	udiv	r0, r0, r3
 801d89c:	f7e4 f8ce 	bl	8001a3c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 801d8a0:	2004      	movs	r0, #4
 801d8a2:	f7e4 f8ef 	bl	8001a84 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801d8a6:	4622      	mov	r2, r4
 801d8a8:	4621      	mov	r1, r4
 801d8aa:	f04f 30ff 	mov.w	r0, #4294967295
 801d8ae:	f7e4 f877 	bl	80019a0 <HAL_NVIC_SetPriority>
}
 801d8b2:	b03f      	add	sp, #252	; 0xfc
 801d8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8b6:	bf00      	nop
 801d8b8:	00486060 	.word	0x00486060
 801d8bc:	00000000 	.word	0x00000000

0801d8c0 <main>:
{
 801d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8c4:	ed2d 8b02 	vpush	{d8}
 801d8c8:	b0a7      	sub	sp, #156	; 0x9c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801d8ca:	4db2      	ldr	r5, [pc, #712]	; (801db94 <main+0x2d4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d8cc:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 801dbb0 <main+0x2f0>
  HAL_Init();
 801d8d0:	f7e3 fb8e 	bl	8000ff0 <HAL_Init>
	HAL_Delay(1);
 801d8d4:	2001      	movs	r0, #1
 801d8d6:	f7e3 fba9 	bl	800102c <HAL_Delay>
  SystemClock_Config();
 801d8da:	f7ff ff83 	bl	801d7e4 <SystemClock_Config>
	HAL_Delay(1);
 801d8de:	2001      	movs	r0, #1
 801d8e0:	f7e3 fba4 	bl	800102c <HAL_Delay>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801d8e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d8e6:	f043 0310 	orr.w	r3, r3, #16
 801d8ea:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d8ec:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d8ee:	f003 0310 	and.w	r3, r3, #16
 801d8f2:	9307      	str	r3, [sp, #28]
 801d8f4:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801d8f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d8f8:	f043 0320 	orr.w	r3, r3, #32
 801d8fc:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d8fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d900:	f003 0320 	and.w	r3, r3, #32
 801d904:	9308      	str	r3, [sp, #32]
 801d906:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801d908:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d90e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d910:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d916:	9309      	str	r3, [sp, #36]	; 0x24
 801d918:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d91a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d91c:	f043 0301 	orr.w	r3, r3, #1
 801d920:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d922:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d924:	f003 0301 	and.w	r3, r3, #1
 801d928:	930a      	str	r3, [sp, #40]	; 0x28
 801d92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801d92c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d92e:	f043 0304 	orr.w	r3, r3, #4
 801d932:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d934:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d936:	f003 0304 	and.w	r3, r3, #4
 801d93a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d93c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801d93e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d940:	f043 0302 	orr.w	r3, r3, #2
 801d944:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d946:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d948:	f003 0302 	and.w	r3, r3, #2
 801d94c:	930c      	str	r3, [sp, #48]	; 0x30
 801d94e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801d950:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d952:	f043 0308 	orr.w	r3, r3, #8
 801d956:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d958:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d95a:	f003 0308 	and.w	r3, r3, #8
 801d95e:	930d      	str	r3, [sp, #52]	; 0x34
 801d960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801d962:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d968:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d96a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d970:	930e      	str	r3, [sp, #56]	; 0x38
 801d972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	  HAL_PWREx_EnableVddIO2();
 801d974:	f7e6 fa8c 	bl	8003e90 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 801d978:	2200      	movs	r2, #0
 801d97a:	f242 0110 	movw	r1, #8208	; 0x2010
 801d97e:	4886      	ldr	r0, [pc, #536]	; (801db98 <main+0x2d8>)
 801d980:	f7e4 ff1e 	bl	80027c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d984:	2200      	movs	r2, #0
 801d986:	2120      	movs	r1, #32
 801d988:	4884      	ldr	r0, [pc, #528]	; (801db9c <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d98a:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d98c:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d98e:	f7e4 ff17 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d992:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d994:	a919      	add	r1, sp, #100	; 0x64
 801d996:	4881      	ldr	r0, [pc, #516]	; (801db9c <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d998:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d99a:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d99c:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d99e:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d9a0:	f7e4 fd98 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); //VIDEO_GAIN ON
 801d9a4:	4622      	mov	r2, r4
 801d9a6:	4639      	mov	r1, r7
 801d9a8:	487c      	ldr	r0, [pc, #496]	; (801db9c <main+0x2dc>)
 801d9aa:	f7e4 ff09 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801d9ae:	f242 0310 	movw	r3, #8208	; 0x2010
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d9b2:	a919      	add	r1, sp, #100	; 0x64
 801d9b4:	4878      	ldr	r0, [pc, #480]	; (801db98 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801d9b6:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d9b8:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9ba:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d9bc:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d9be:	f7e4 fd89 	bl	80024d4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//ST init HIGH
 801d9c2:	4632      	mov	r2, r6
 801d9c4:	2110      	movs	r1, #16
 801d9c6:	4874      	ldr	r0, [pc, #464]	; (801db98 <main+0x2d8>)
 801d9c8:	f7e4 fefa 	bl	80027c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Laser init OFF
 801d9cc:	4622      	mov	r2, r4
 801d9ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d9d2:	4871      	ldr	r0, [pc, #452]	; (801db98 <main+0x2d8>)
 801d9d4:	f7e4 fef4 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801d9d8:	2380      	movs	r3, #128	; 0x80
 801d9da:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d9dc:	a919      	add	r1, sp, #100	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d9de:	4b70      	ldr	r3, [pc, #448]	; (801dba0 <main+0x2e0>)
 801d9e0:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d9e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9e6:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d9e8:	f7e4 fd74 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 801d9ec:	4622      	mov	r2, r4
 801d9ee:	2104      	movs	r1, #4
 801d9f0:	486a      	ldr	r0, [pc, #424]	; (801db9c <main+0x2dc>)
 801d9f2:	f7e4 fee5 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d9f6:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d9fa:	a919      	add	r1, sp, #100	; 0x64
 801d9fc:	4867      	ldr	r0, [pc, #412]	; (801db9c <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d9fe:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801da02:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da04:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801da06:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801da08:	f7e4 fd64 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801da0c:	4632      	mov	r2, r6
 801da0e:	4651      	mov	r1, sl
 801da10:	4862      	ldr	r0, [pc, #392]	; (801db9c <main+0x2dc>)
 801da12:	f7e4 fed5 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 801da16:	4622      	mov	r2, r4
 801da18:	2102      	movs	r1, #2
 801da1a:	4860      	ldr	r0, [pc, #384]	; (801db9c <main+0x2dc>)
 801da1c:	f7e4 fed0 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801da20:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801da22:	a919      	add	r1, sp, #100	; 0x64
 801da24:	485d      	ldr	r0, [pc, #372]	; (801db9c <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801da26:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801da28:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da2a:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801da2c:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801da2e:	f7e4 fd51 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 801da32:	4632      	mov	r2, r6
 801da34:	4639      	mov	r1, r7
 801da36:	4859      	ldr	r0, [pc, #356]	; (801db9c <main+0x2dc>)
 801da38:	f7e4 fec2 	bl	80027c0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801da3c:	f44f 6800 	mov.w	r8, #2048	; 0x800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801da40:	a919      	add	r1, sp, #100	; 0x64
 801da42:	4856      	ldr	r0, [pc, #344]	; (801db9c <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801da44:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801da48:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da4a:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801da4c:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801da4e:	f7e4 fd41 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 801da52:	4632      	mov	r2, r6
 801da54:	4641      	mov	r1, r8
 801da56:	4851      	ldr	r0, [pc, #324]	; (801db9c <main+0x2dc>)
 801da58:	f7e4 feb2 	bl	80027c0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801da5c:	f04f 0808 	mov.w	r8, #8
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801da60:	a919      	add	r1, sp, #100	; 0x64
 801da62:	484e      	ldr	r0, [pc, #312]	; (801db9c <main+0x2dc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801da64:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801da68:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da6c:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801da6e:	f7e4 fd31 	bl	80024d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801da72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801da76:	a919      	add	r1, sp, #100	; 0x64
 801da78:	4847      	ldr	r0, [pc, #284]	; (801db98 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801da7a:	9319      	str	r3, [sp, #100]	; 0x64
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801da7c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da80:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801da82:	f7e4 fd27 	bl	80024d4 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 2); //SDO IRQ
 801da86:	463a      	mov	r2, r7
 801da88:	4621      	mov	r1, r4
 801da8a:	2017      	movs	r0, #23
 801da8c:	f7e3 ff88 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0); //Touchscreen IRQ
 801da90:	4622      	mov	r2, r4
 801da92:	4639      	mov	r1, r7
 801da94:	2009      	movs	r0, #9
 801da96:	f7e3 ff83 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801da9a:	2017      	movs	r0, #23
 801da9c:	f7e3 ffb4 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801daa0:	2009      	movs	r0, #9
 801daa2:	f7e3 ffb1 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801daa6:	4630      	mov	r0, r6
 801daa8:	f7e3 fac0 	bl	800102c <HAL_Delay>
	DWT_Init();
 801daac:	f7fe fed0 	bl	801c850 <DWT_Init>
	HAL_Delay(1);
 801dab0:	4630      	mov	r0, r6
 801dab2:	f7e3 fabb 	bl	800102c <HAL_Delay>
	MX_TIM2_Init();
 801dab6:	f7fe fe97 	bl	801c7e8 <MX_TIM2_Init>

//PWM Timer for booster
static void MX_TIM15_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 801daba:	221c      	movs	r2, #28
 801dabc:	4621      	mov	r1, r4
 801dabe:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801dac0:	940f      	str	r4, [sp, #60]	; 0x3c
 801dac2:	9410      	str	r4, [sp, #64]	; 0x40
 801dac4:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 801dac6:	f001 ff96 	bl	801f9f6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801daca:	222c      	movs	r2, #44	; 0x2c
 801dacc:	4621      	mov	r1, r4
 801dace:	a819      	add	r0, sp, #100	; 0x64
 801dad0:	f001 ff91 	bl	801f9f6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 801dad4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 801dbb4 <main+0x2f4>
  htim15.Init.Prescaler = 1200;
 801dad8:	4b32      	ldr	r3, [pc, #200]	; (801dba4 <main+0x2e4>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 801dada:	f8c9 4008 	str.w	r4, [r9, #8]
  htim15.Init.Prescaler = 1200;
 801dade:	f44f 6b96 	mov.w	fp, #1200	; 0x4b0
 801dae2:	e889 0808 	stmia.w	r9, {r3, fp}
  htim15.Init.Period = 100;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801dae6:	4648      	mov	r0, r9
  htim15.Init.Period = 100;
 801dae8:	2364      	movs	r3, #100	; 0x64
 801daea:	f8c9 300c 	str.w	r3, [r9, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801daee:	f8c9 4010 	str.w	r4, [r9, #16]
  htim15.Init.RepetitionCounter = 0;
 801daf2:	f8c9 4014 	str.w	r4, [r9, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801daf6:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801dafa:	f7e8 faf9 	bl	80060f0 <HAL_TIM_PWM_Init>
 801dafe:	b100      	cbz	r0, 801db02 <main+0x242>
 801db00:	e7fe      	b.n	801db00 <main+0x240>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801db02:	900f      	str	r0, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801db04:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 801db06:	a90f      	add	r1, sp, #60	; 0x3c
 801db08:	4648      	mov	r0, r9
 801db0a:	f7e8 fd3d 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 801db0e:	b100      	cbz	r0, 801db12 <main+0x252>
 801db10:	e7fe      	b.n	801db10 <main+0x250>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801db12:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 801db14:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801db16:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801db18:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801db1a:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801db1c:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801db1e:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801db20:	4652      	mov	r2, sl
 801db22:	a912      	add	r1, sp, #72	; 0x48
 801db24:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801db26:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801db28:	f7e8 fb7a 	bl	8006220 <HAL_TIM_PWM_ConfigChannel>
 801db2c:	b100      	cbz	r0, 801db30 <main+0x270>
 801db2e:	e7fe      	b.n	801db2e <main+0x26e>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801db30:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801db32:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801db34:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = 0;
 801db36:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801db38:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801db3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 801db3e:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801db40:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801db42:	a919      	add	r1, sp, #100	; 0x64
 801db44:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801db46:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801db48:	f7e8 fd4a 	bl	80065e0 <HAL_TIMEx_ConfigBreakDeadTime>
 801db4c:	4682      	mov	sl, r0
 801db4e:	b100      	cbz	r0, 801db52 <main+0x292>
 801db50:	e7fe      	b.n	801db50 <main+0x290>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 801db52:	4648      	mov	r0, r9
 801db54:	f001 fb3c 	bl	801f1d0 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801db58:	4630      	mov	r0, r6
 801db5a:	f7e3 fa67 	bl	800102c <HAL_Delay>
	HAL_Delay(1);
 801db5e:	4630      	mov	r0, r6
 801db60:	f7e3 fa64 	bl	800102c <HAL_Delay>
  htim5.Instance = TIM5;
 801db64:	4c10      	ldr	r4, [pc, #64]	; (801dba8 <main+0x2e8>)
 801db66:	4b11      	ldr	r3, [pc, #68]	; (801dbac <main+0x2ec>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801db68:	f8c4 a010 	str.w	sl, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801db6c:	e884 0488 	stmia.w	r4, {r3, r7, sl}
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801db70:	4620      	mov	r0, r4
  htim5.Init.Period = 30;
 801db72:	231e      	movs	r3, #30
 801db74:	60e3      	str	r3, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801db76:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801db7a:	f7e8 fa9f 	bl	80060bc <HAL_TIM_OC_Init>
 801db7e:	b100      	cbz	r0, 801db82 <main+0x2c2>
 801db80:	e7fe      	b.n	801db80 <main+0x2c0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801db82:	9012      	str	r0, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801db84:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801db86:	a912      	add	r1, sp, #72	; 0x48
 801db88:	4620      	mov	r0, r4
 801db8a:	f7e8 fcfd 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 801db8e:	4602      	mov	r2, r0
 801db90:	b190      	cbz	r0, 801dbb8 <main+0x2f8>
 801db92:	e7fe      	b.n	801db92 <main+0x2d2>
 801db94:	40021000 	.word	0x40021000
 801db98:	48000800 	.word	0x48000800
 801db9c:	48001400 	.word	0x48001400
 801dba0:	10210000 	.word	0x10210000
 801dba4:	40014000 	.word	0x40014000
 801dba8:	2009584c 	.word	0x2009584c
 801dbac:	40000c00 	.word	0x40000c00
 801dbb0:	10110000 	.word	0x10110000
 801dbb4:	20095764 	.word	0x20095764
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801dbb8:	2330      	movs	r3, #48	; 0x30
 801dbba:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801dbbc:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 5;
 801dbbe:	2305      	movs	r3, #5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801dbc0:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801dbc2:	a919      	add	r1, sp, #100	; 0x64
 801dbc4:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5;
 801dbc6:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801dbc8:	f7e8 faf2 	bl	80061b0 <HAL_TIM_OC_ConfigChannel>
 801dbcc:	4681      	mov	r9, r0
 801dbce:	b100      	cbz	r0, 801dbd2 <main+0x312>
 801dbd0:	e7fe      	b.n	801dbd0 <main+0x310>
  HAL_TIM_MspPostInit(&htim5);
 801dbd2:	4620      	mov	r0, r4
 801dbd4:	f001 fafc 	bl	801f1d0 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801dbd8:	4630      	mov	r0, r6
 801dbda:	f7e3 fa27 	bl	800102c <HAL_Delay>
	MX_USB_DEVICE_Init();
 801dbde:	f001 fc79 	bl	801f4d4 <MX_USB_DEVICE_Init>
	HAL_Delay(1);
 801dbe2:	4630      	mov	r0, r6
 801dbe4:	f7e3 fa22 	bl	800102c <HAL_Delay>
  hdma2d.Instance = DMA2D;
 801dbe8:	4c8c      	ldr	r4, [pc, #560]	; (801de1c <main+0x55c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801dbea:	4b8d      	ldr	r3, [pc, #564]	; (801de20 <main+0x560>)
	hdma2d.LayerCfg[0].InputOffset = 0;
 801dbec:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hdma2d.Init.Mode = DMA2D_R2M;
 801dbf0:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
 801dbf4:	e884 0408 	stmia.w	r4, {r3, sl}
  hdma2d.LayerCfg[0].InputAlpha =125;
 801dbf8:	237d      	movs	r3, #125	; 0x7d
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 801dbfa:	62e7      	str	r7, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801dbfc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hdma2d.LayerCfg[0].InputAlpha =125;
 801dc00:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d.LayerCfg[1].InputOffset = 0;
 801dc02:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 801dc06:	6467      	str	r7, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801dc08:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 125;
 801dc0c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801dc0e:	4620      	mov	r0, r4
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801dc10:	60a7      	str	r7, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 801dc12:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801dc16:	f7e4 f92b 	bl	8001e70 <HAL_DMA2D_Init>
 801dc1a:	b100      	cbz	r0, 801dc1e <main+0x35e>
 801dc1c:	e7fe      	b.n	801dc1c <main+0x35c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801dc1e:	4631      	mov	r1, r6
 801dc20:	4620      	mov	r0, r4
 801dc22:	f7e4 fa0b 	bl	800203c <HAL_DMA2D_ConfigLayer>
 801dc26:	4681      	mov	r9, r0
 801dc28:	b100      	cbz	r0, 801dc2c <main+0x36c>
 801dc2a:	e7fe      	b.n	801dc2a <main+0x36a>
	HAL_Delay(1);
 801dc2c:	4630      	mov	r0, r6
 801dc2e:	f7e3 f9fd 	bl	800102c <HAL_Delay>
  hspi1.Instance = SPI1;
 801dc32:	4c7c      	ldr	r4, [pc, #496]	; (801de24 <main+0x564>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801dc34:	4b7c      	ldr	r3, [pc, #496]	; (801de28 <main+0x568>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801dc36:	f8c4 9008 	str.w	r9, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801dc3a:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801dc3e:	e884 1008 	stmia.w	r4, {r3, ip}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801dc42:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801dc46:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801dc48:	f44f 7300 	mov.w	r3, #512	; 0x200
 801dc4c:	61a3      	str	r3, [r4, #24]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 801dc4e:	2310      	movs	r3, #16
 801dc50:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801dc52:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 7;
 801dc54:	2307      	movs	r3, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801dc56:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801dc58:	6166      	str	r6, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 801dc5a:	f8c4 801c 	str.w	r8, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801dc5e:	f8c4 9020 	str.w	r9, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801dc62:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 801dc66:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801dc68:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801dc6c:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801dc70:	f7e7 fe32 	bl	80058d8 <HAL_SPI_Init>
 801dc74:	b100      	cbz	r0, 801dc78 <main+0x3b8>
 801dc76:	e7fe      	b.n	801dc76 <main+0x3b6>
	__HAL_SPI_ENABLE(&hspi1);
 801dc78:	6822      	ldr	r2, [r4, #0]
  hi2c1.Instance = I2C1;
 801dc7a:	4c6c      	ldr	r4, [pc, #432]	; (801de2c <main+0x56c>)
	__HAL_SPI_ENABLE(&hspi1);
 801dc7c:	6813      	ldr	r3, [r2, #0]
 801dc7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc82:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 801dc84:	2001      	movs	r0, #1
 801dc86:	f7e3 f9d1 	bl	800102c <HAL_Delay>
  hi2c1.Instance = I2C1;
 801dc8a:	4b69      	ldr	r3, [pc, #420]	; (801de30 <main+0x570>)
 801dc8c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 801dc8e:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 801dc92:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 801dc96:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 801dc9a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 112;
 801dc9c:	2370      	movs	r3, #112	; 0x70
 801dc9e:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801dca0:	2701      	movs	r7, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801dca2:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801dca4:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801dca6:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801dca8:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801dcaa:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801dcac:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801dcae:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801dcb0:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801dcb2:	f7e4 fed6 	bl	8002a62 <HAL_I2C_Init>
 801dcb6:	4601      	mov	r1, r0
 801dcb8:	b100      	cbz	r0, 801dcbc <main+0x3fc>
 801dcba:	e7fe      	b.n	801dcba <main+0x3fa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801dcbc:	4620      	mov	r0, r4
 801dcbe:	f7e5 fa39 	bl	8003134 <HAL_I2CEx_ConfigAnalogFilter>
 801dcc2:	4601      	mov	r1, r0
 801dcc4:	b100      	cbz	r0, 801dcc8 <main+0x408>
 801dcc6:	e7fe      	b.n	801dcc6 <main+0x406>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801dcc8:	4620      	mov	r0, r4
 801dcca:	f7e5 fa59 	bl	8003180 <HAL_I2CEx_ConfigDigitalFilter>
 801dcce:	4606      	mov	r6, r0
 801dcd0:	b100      	cbz	r0, 801dcd4 <main+0x414>
 801dcd2:	e7fe      	b.n	801dcd2 <main+0x412>
	HAL_Delay(1);
 801dcd4:	4638      	mov	r0, r7
 801dcd6:	f7e3 f9a9 	bl	800102c <HAL_Delay>

/* LPUART1 init function */
static void MX_LPUART1_UART_Init(void)
{

	hlpuart1.Instance = LPUART1;
 801dcda:	4c56      	ldr	r4, [pc, #344]	; (801de34 <main+0x574>)
  hlpuart1.Init.BaudRate = 9600;
 801dcdc:	4b56      	ldr	r3, [pc, #344]	; (801de38 <main+0x578>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801dcde:	60a6      	str	r6, [r4, #8]
  hlpuart1.Init.BaudRate = 9600;
 801dce0:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 801dce4:	e884 4008 	stmia.w	r4, {r3, lr}
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 801dce8:	4620      	mov	r0, r4
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801dcea:	230c      	movs	r3, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801dcec:	60e6      	str	r6, [r4, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 801dcee:	6126      	str	r6, [r4, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801dcf0:	6163      	str	r3, [r4, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801dcf2:	61a6      	str	r6, [r4, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801dcf4:	6226      	str	r6, [r4, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801dcf6:	6266      	str	r6, [r4, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801dcf8:	62a6      	str	r6, [r4, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 801dcfa:	66a6      	str	r6, [r4, #104]	; 0x68
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 801dcfc:	f7e9 f8cc 	bl	8006e98 <HAL_UART_Init>
 801dd00:	4601      	mov	r1, r0
 801dd02:	b100      	cbz	r0, 801dd06 <main+0x446>
 801dd04:	e7fe      	b.n	801dd04 <main+0x444>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801dd06:	4620      	mov	r0, r4
 801dd08:	f7e9 f93f 	bl	8006f8a <HAL_UARTEx_SetTxFifoThreshold>
 801dd0c:	4601      	mov	r1, r0
 801dd0e:	b100      	cbz	r0, 801dd12 <main+0x452>
 801dd10:	e7fe      	b.n	801dd10 <main+0x450>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801dd12:	4620      	mov	r0, r4
 801dd14:	f7e9 f95d 	bl	8006fd2 <HAL_UARTEx_SetRxFifoThreshold>
 801dd18:	4606      	mov	r6, r0
 801dd1a:	b100      	cbz	r0, 801dd1e <main+0x45e>
 801dd1c:	e7fe      	b.n	801dd1c <main+0x45c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }
	
	HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 3); 
 801dd1e:	2203      	movs	r2, #3
 801dd20:	4639      	mov	r1, r7
 801dd22:	2046      	movs	r0, #70	; 0x46
 801dd24:	f7e3 fe3c 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801dd28:	4638      	mov	r0, r7
 801dd2a:	f7e3 f97f 	bl	800102c <HAL_Delay>
  hltdc.Instance = LTDC;
 801dd2e:	4c43      	ldr	r4, [pc, #268]	; (801de3c <main+0x57c>)
 801dd30:	4b43      	ldr	r3, [pc, #268]	; (801de40 <main+0x580>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801dd32:	60a6      	str	r6, [r4, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801dd34:	e884 0048 	stmia.w	r4, {r3, r6}
  hltdc.Init.HorizontalSync = 5;
 801dd38:	2305      	movs	r3, #5
 801dd3a:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 30;
 801dd3c:	231e      	movs	r3, #30
 801dd3e:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 40;
 801dd40:	2328      	movs	r3, #40	; 0x28
 801dd42:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 8;
 801dd44:	2308      	movs	r3, #8
 801dd46:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 520;
 801dd48:	f44f 7302 	mov.w	r3, #520	; 0x208
 801dd4c:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 280;
 801dd4e:	f44f 738c 	mov.w	r3, #280	; 0x118
 801dd52:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 801dd54:	f240 230d 	movw	r3, #525	; 0x20d
 801dd58:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801dd5a:	4620      	mov	r0, r4
  hltdc.Init.TotalHeigh = 288;
 801dd5c:	f44f 7390 	mov.w	r3, #288	; 0x120
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801dd60:	60e6      	str	r6, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801dd62:	6126      	str	r6, [r4, #16]
  hltdc.Init.TotalHeigh = 288;
 801dd64:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801dd66:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801dd6a:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801dd6e:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801dd72:	f7e5 fab1 	bl	80032d8 <HAL_LTDC_Init>
 801dd76:	4602      	mov	r2, r0
 801dd78:	b100      	cbz	r0, 801dd7c <main+0x4bc>
 801dd7a:	e7fe      	b.n	801dd7a <main+0x4ba>
  pLayerCfg.WindowY1 = 272;
 801dd7c:	f44f 7188 	mov.w	r1, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 801dd80:	9019      	str	r0, [sp, #100]	; 0x64
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801dd82:	2302      	movs	r3, #2
  pLayerCfg.WindowX1 = 480;
 801dd84:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801dd88:	f44f 6680 	mov.w	r6, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 801dd8c:	901a      	str	r0, [sp, #104]	; 0x68
  pLayerCfg.WindowY1 = 272;
 801dd8e:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801dd90:	931d      	str	r3, [sp, #116]	; 0x74
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801dd92:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.Alpha = 255;
 801dd94:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801dd96:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = 480;
 801dd98:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.ImageHeight = 272;
 801dd9a:	9124      	str	r1, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801dd9c:	4620      	mov	r0, r4
 801dd9e:	a919      	add	r1, sp, #100	; 0x64
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801dda0:	9621      	str	r6, [sp, #132]	; 0x84
  pLayerCfg.WindowY0 = 0;
 801dda2:	921b      	str	r2, [sp, #108]	; 0x6c
  pLayerCfg.Alpha = 255;
 801dda4:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.Alpha0 = 0;
 801dda6:	921f      	str	r2, [sp, #124]	; 0x7c
  pLayerCfg.FBStartAdress = 0;
 801dda8:	9222      	str	r2, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 255;
 801ddaa:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
  pLayerCfg.Backcolor.Green = 255;
 801ddae:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
  pLayerCfg.Backcolor.Red = 255;
 801ddb2:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801ddb6:	f7e5 fafb 	bl	80033b0 <HAL_LTDC_ConfigLayer>
 801ddba:	4606      	mov	r6, r0
 801ddbc:	b100      	cbz	r0, 801ddc0 <main+0x500>
 801ddbe:	e7fe      	b.n	801ddbe <main+0x4fe>
	HAL_Delay(1);
 801ddc0:	4638      	mov	r0, r7
 801ddc2:	f7e3 f933 	bl	800102c <HAL_Delay>
  hadc1.Instance = ADC1;
 801ddc6:	4c1f      	ldr	r4, [pc, #124]	; (801de44 <main+0x584>)
 801ddc8:	4b1f      	ldr	r3, [pc, #124]	; (801de48 <main+0x588>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801ddca:	60e6      	str	r6, [r4, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 801ddcc:	e884 0048 	stmia.w	r4, {r3, r6}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801ddd0:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 801ddd4:	2310      	movs	r3, #16
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801ddd6:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 801ddd8:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801ddda:	6126      	str	r6, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801dddc:	f8c4 8014 	str.w	r8, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 801dde0:	61a6      	str	r6, [r4, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 801dde2:	61e7      	str	r7, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 801dde4:	6227      	str	r7, [r4, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801dde6:	6266      	str	r6, [r4, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 801dde8:	62a7      	str	r7, [r4, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801ddea:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801ddec:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801ddee:	6366      	str	r6, [r4, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801ddf0:	63a6      	str	r6, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 801ddf2:	63e6      	str	r6, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801ddf4:	f7e3 f950 	bl	8001098 <HAL_ADC_Init>
 801ddf8:	b100      	cbz	r0, 801ddfc <main+0x53c>
 801ddfa:	e7fe      	b.n	801ddfa <main+0x53a>
  sConfig.Channel = ADC_CHANNEL_3;
 801ddfc:	4b13      	ldr	r3, [pc, #76]	; (801de4c <main+0x58c>)
 801ddfe:	9319      	str	r3, [sp, #100]	; 0x64
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801de00:	2306      	movs	r3, #6
 801de02:	931a      	str	r3, [sp, #104]	; 0x68
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 801de04:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801de06:	237f      	movs	r3, #127	; 0x7f
  sConfig.Offset = 0;
 801de08:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801de0a:	a919      	add	r1, sp, #100	; 0x64
 801de0c:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801de0e:	931c      	str	r3, [sp, #112]	; 0x70
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801de10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801de14:	f7e3 fa60 	bl	80012d8 <HAL_ADC_ConfigChannel>
 801de18:	b1d0      	cbz	r0, 801de50 <main+0x590>
 801de1a:	e7fe      	b.n	801de1a <main+0x55a>
 801de1c:	20095b4c 	.word	0x20095b4c
 801de20:	4002b000 	.word	0x4002b000
 801de24:	20095bac 	.word	0x20095bac
 801de28:	40013000 	.word	0x40013000
 801de2c:	20095718 	.word	0x20095718
 801de30:	40005400 	.word	0x40005400
 801de34:	200958b0 	.word	0x200958b0
 801de38:	40008000 	.word	0x40008000
 801de3c:	20095938 	.word	0x20095938
 801de40:	40016800 	.word	0x40016800
 801de44:	20095a08 	.word	0x20095a08
 801de48:	50040000 	.word	0x50040000
 801de4c:	0c900008 	.word	0x0c900008
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 801de50:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim6.Instance = TIM6;
 801de52:	4c35      	ldr	r4, [pc, #212]	; (801df28 <main+0x668>)
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 801de54:	f043 0304 	orr.w	r3, r3, #4
 801de58:	64ab      	str	r3, [r5, #72]	; 0x48
 801de5a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801de5c:	f003 0304 	and.w	r3, r3, #4
 801de60:	930f      	str	r3, [sp, #60]	; 0x3c
 801de62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 801de64:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801de66:	f043 0301 	orr.w	r3, r3, #1
 801de6a:	64ab      	str	r3, [r5, #72]	; 0x48
 801de6c:	6cab      	ldr	r3, [r5, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801de6e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 801de70:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801de74:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 801de76:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801de78:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 801de7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801de7c:	f7e3 fd90 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 801de80:	200b      	movs	r0, #11
 801de82:	f7e3 fdc1 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801de86:	2001      	movs	r0, #1
 801de88:	f7e3 f8d0 	bl	800102c <HAL_Delay>
	HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_1);
 801de8c:	2100      	movs	r1, #0
 801de8e:	4827      	ldr	r0, [pc, #156]	; (801df2c <main+0x66c>)
 801de90:	f7e8 fb3a 	bl	8006508 <HAL_TIM_OC_Start>
	HAL_Delay(1);
 801de94:	2001      	movs	r0, #1
 801de96:	f7e3 f8c9 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);  //ST Signal
 801de9a:	2201      	movs	r2, #1
 801de9c:	2100      	movs	r1, #0
 801de9e:	201c      	movs	r0, #28
 801dea0:	f7e3 fd7e 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801dea4:	2002      	movs	r0, #2
 801dea6:	f7e3 f8c1 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801deaa:	201c      	movs	r0, #28
 801deac:	f7e3 fdac 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801deb0:	2001      	movs	r0, #1
 801deb2:	f7e3 f8bb 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 801deb6:	481e      	ldr	r0, [pc, #120]	; (801df30 <main+0x670>)
 801deb8:	f7e7 ffb2 	bl	8005e20 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 801debc:	2001      	movs	r0, #1
 801debe:	f7e3 f8b5 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(LTDC_IRQn, 1, 3);  //
 801dec2:	2203      	movs	r2, #3
 801dec4:	2101      	movs	r1, #1
 801dec6:	205b      	movs	r0, #91	; 0x5b
 801dec8:	f7e3 fd6a 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801decc:	2002      	movs	r0, #2
 801dece:	f7e3 f8ad 	bl	800102c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801ded2:	2104      	movs	r1, #4
 801ded4:	4817      	ldr	r0, [pc, #92]	; (801df34 <main+0x674>)
 801ded6:	f7e8 fae3 	bl	80064a0 <HAL_TIM_PWM_Start>
	TIM15->CCR2 = 50;
 801deda:	4b17      	ldr	r3, [pc, #92]	; (801df38 <main+0x678>)
 801dedc:	2232      	movs	r2, #50	; 0x32
 801dede:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1);
 801dee0:	2001      	movs	r0, #1
 801dee2:	f7e3 f8a3 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801dee6:	2201      	movs	r2, #1
 801dee8:	4814      	ldr	r0, [pc, #80]	; (801df3c <main+0x67c>)
 801deea:	2104      	movs	r1, #4
 801deec:	f7e4 fc68 	bl	80027c0 <HAL_GPIO_WritePin>
  htim6.Init.Prescaler = 48000;
 801def0:	4a13      	ldr	r2, [pc, #76]	; (801df40 <main+0x680>)
 801def2:	f64b 3580 	movw	r5, #48000	; 0xbb80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801def6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 48000;
 801def8:	e884 0024 	stmia.w	r4, {r2, r5}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801defc:	4620      	mov	r0, r4
  htim6.Init.Period = 3800;
 801defe:	f640 62d8 	movw	r2, #3800	; 0xed8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801df02:	9319      	str	r3, [sp, #100]	; 0x64
 801df04:	931a      	str	r3, [sp, #104]	; 0x68
 801df06:	931b      	str	r3, [sp, #108]	; 0x6c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801df08:	60a3      	str	r3, [r4, #8]
  htim6.Init.Period = 3800;
 801df0a:	60e2      	str	r2, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801df0c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801df0e:	f7e8 f8bb 	bl	8006088 <HAL_TIM_Base_Init>
 801df12:	b100      	cbz	r0, 801df16 <main+0x656>
 801df14:	e7fe      	b.n	801df14 <main+0x654>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801df16:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801df18:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801df1a:	a919      	add	r1, sp, #100	; 0x64
 801df1c:	4620      	mov	r0, r4
 801df1e:	f7e8 fb33 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 801df22:	4605      	mov	r5, r0
 801df24:	b170      	cbz	r0, 801df44 <main+0x684>
 801df26:	e7fe      	b.n	801df26 <main+0x666>
 801df28:	20095a94 	.word	0x20095a94
 801df2c:	2009584c 	.word	0x2009584c
 801df30:	20095c14 	.word	0x20095c14
 801df34:	20095764 	.word	0x20095764
 801df38:	40014000 	.word	0x40014000
 801df3c:	48001400 	.word	0x48001400
 801df40:	40001000 	.word	0x40001000
	HAL_Delay(1);
 801df44:	2001      	movs	r0, #1
 801df46:	f7e3 f871 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801df4a:	2036      	movs	r0, #54	; 0x36
 801df4c:	f7e3 fd5c 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801df50:	2001      	movs	r0, #1
 801df52:	f7e3 f86b 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 801df56:	4620      	mov	r0, r4
 801df58:	f7e7 ff62 	bl	8005e20 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 4);
 801df5c:	2204      	movs	r2, #4
 801df5e:	2101      	movs	r1, #1
 801df60:	201c      	movs	r0, #28
 801df62:	f7e3 fd1d 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801df66:	2001      	movs	r0, #1
 801df68:	f7e3 f860 	bl	800102c <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801df6c:	462a      	mov	r2, r5
 801df6e:	49d0      	ldr	r1, [pc, #832]	; (801e2b0 <main+0x9f0>)
 801df70:	48d0      	ldr	r0, [pc, #832]	; (801e2b4 <main+0x9f4>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801df72:	4cd1      	ldr	r4, [pc, #836]	; (801e2b8 <main+0x9f8>)
 801df74:	4fd1      	ldr	r7, [pc, #836]	; (801e2bc <main+0x9fc>)
 801df76:	4ed2      	ldr	r6, [pc, #840]	; (801e2c0 <main+0xa00>)
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801df78:	f8df 9400 	ldr.w	r9, [pc, #1024]	; 801e37c <main+0xabc>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801df7c:	f7e5 fa41 	bl	8003402 <HAL_LTDC_SetAddress>
	HAL_Delay(1);
 801df80:	2001      	movs	r0, #1
 801df82:	f7e3 f853 	bl	800102c <HAL_Delay>
	Touch_Ini();
 801df86:	f7fd fd60 	bl	801ba4a <Touch_Ini>
	MX_SDMMC1_SD_Init();
 801df8a:	f7fe fc1b 	bl	801c7c4 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 801df8e:	f7fd fde7 	bl	801bb60 <MX_FATFS_Init>
	GPIO_QSPI_Init();
 801df92:	f7fb f95b 	bl	801924c <GPIO_QSPI_Init>
	Single_Mode();	
 801df96:	f7fb fa53 	bl	8019440 <Single_Mode>
	HAL_Delay(20);
 801df9a:	2014      	movs	r0, #20
 801df9c:	f7e3 f846 	bl	800102c <HAL_Delay>
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801dfa0:	2103      	movs	r1, #3
 801dfa2:	48c8      	ldr	r0, [pc, #800]	; (801e2c4 <main+0xa04>)
 801dfa4:	f7f0 fe34 	bl	800ec10 <Calibration_Load_1byte>
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801dfa8:	4bc7      	ldr	r3, [pc, #796]	; (801e2c8 <main+0xa08>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801dfaa:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801dfac:	28ff      	cmp	r0, #255	; 0xff
 801dfae:	bf18      	it	ne
 801dfb0:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801dfb2:	f04f 0103 	mov.w	r1, #3
 801dfb6:	48c5      	ldr	r0, [pc, #788]	; (801e2cc <main+0xa0c>)
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801dfb8:	bf08      	it	eq
 801dfba:	701d      	strbeq	r5, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801dfbc:	f7f0 fe28 	bl	800ec10 <Calibration_Load_1byte>
 801dfc0:	4bc3      	ldr	r3, [pc, #780]	; (801e2d0 <main+0xa10>)
 801dfc2:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801dfc4:	28ff      	cmp	r0, #255	; 0xff
 801dfc6:	bf0c      	ite	eq
 801dfc8:	2200      	moveq	r2, #0
 801dfca:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801dfcc:	f04f 0103 	mov.w	r1, #3
 801dfd0:	48c0      	ldr	r0, [pc, #768]	; (801e2d4 <main+0xa14>)
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801dfd2:	bf08      	it	eq
 801dfd4:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801dfd6:	f7f0 fe1b 	bl	800ec10 <Calibration_Load_1byte>
 801dfda:	4bbf      	ldr	r3, [pc, #764]	; (801e2d8 <main+0xa18>)
 801dfdc:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801dfde:	28ff      	cmp	r0, #255	; 0xff
 801dfe0:	bf0a      	itet	eq
 801dfe2:	781a      	ldrbeq	r2, [r3, #0]
 801dfe4:	7018      	strbne	r0, [r3, #0]
 801dfe6:	f042 0201 	orreq.w	r2, r2, #1
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801dfea:	f04f 0103 	mov.w	r1, #3
 801dfee:	48bb      	ldr	r0, [pc, #748]	; (801e2dc <main+0xa1c>)
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801dff0:	bf08      	it	eq
 801dff2:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801dff4:	f7f0 fe0c 	bl	800ec10 <Calibration_Load_1byte>
 801dff8:	4bb9      	ldr	r3, [pc, #740]	; (801e2e0 <main+0xa20>)
 801dffa:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801dffc:	28ff      	cmp	r0, #255	; 0xff
 801dffe:	bf0c      	ite	eq
 801e000:	2200      	moveq	r2, #0
 801e002:	7018      	strbne	r0, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801e004:	f04f 0103 	mov.w	r1, #3
 801e008:	48b6      	ldr	r0, [pc, #728]	; (801e2e4 <main+0xa24>)
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801e00a:	bf08      	it	eq
 801e00c:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801e00e:	f7f0 fdff 	bl	800ec10 <Calibration_Load_1byte>
 801e012:	4bb5      	ldr	r3, [pc, #724]	; (801e2e8 <main+0xa28>)
 801e014:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801e016:	28ff      	cmp	r0, #255	; 0xff
 801e018:	bf0c      	ite	eq
 801e01a:	2200      	moveq	r2, #0
 801e01c:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801e01e:	f04f 0103 	mov.w	r1, #3
 801e022:	48b2      	ldr	r0, [pc, #712]	; (801e2ec <main+0xa2c>)
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801e024:	bf08      	it	eq
 801e026:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801e028:	f7f0 fdf2 	bl	800ec10 <Calibration_Load_1byte>
 801e02c:	4bb0      	ldr	r3, [pc, #704]	; (801e2f0 <main+0xa30>)
 801e02e:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801e030:	28ff      	cmp	r0, #255	; 0xff
 801e032:	bf0a      	itet	eq
 801e034:	781a      	ldrbeq	r2, [r3, #0]
 801e036:	7018      	strbne	r0, [r3, #0]
 801e038:	f042 0210 	orreq.w	r2, r2, #16
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801e03c:	f04f 0103 	mov.w	r1, #3
 801e040:	48ac      	ldr	r0, [pc, #688]	; (801e2f4 <main+0xa34>)
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801e042:	bf08      	it	eq
 801e044:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801e046:	f7f0 fde3 	bl	800ec10 <Calibration_Load_1byte>
 801e04a:	4bab      	ldr	r3, [pc, #684]	; (801e2f8 <main+0xa38>)
 801e04c:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801e04e:	28ff      	cmp	r0, #255	; 0xff
 801e050:	bf0c      	ite	eq
 801e052:	2200      	moveq	r2, #0
 801e054:	7018      	strbne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801e056:	f04f 0101 	mov.w	r1, #1
 801e05a:	48a8      	ldr	r0, [pc, #672]	; (801e2fc <main+0xa3c>)
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801e05c:	bf08      	it	eq
 801e05e:	701a      	strbeq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801e060:	f7f0 fdb2 	bl	800ebc8 <Calibration_Load_2byte>
 801e064:	4ca6      	ldr	r4, [pc, #664]	; (801e300 <main+0xa40>)
 801e066:	4ba7      	ldr	r3, [pc, #668]	; (801e304 <main+0xa44>)
 801e068:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801e06a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e06e:	4290      	cmp	r0, r2
 801e070:	bf0c      	ite	eq
 801e072:	2200      	moveq	r2, #0
 801e074:	8018      	strhne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801e076:	f04f 0101 	mov.w	r1, #1
 801e07a:	48a3      	ldr	r0, [pc, #652]	; (801e308 <main+0xa48>)
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801e07c:	bf08      	it	eq
 801e07e:	801a      	strheq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801e080:	f7f0 fda2 	bl	800ebc8 <Calibration_Load_2byte>
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801e084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e088:	4298      	cmp	r0, r3
 801e08a:	4ba0      	ldr	r3, [pc, #640]	; (801e30c <main+0xa4c>)
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801e08c:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801e08e:	bf06      	itte	eq
 801e090:	2200      	moveq	r2, #0
 801e092:	801a      	strheq	r2, [r3, #0]
 801e094:	8018      	strhne	r0, [r3, #0]
	Calibration_WaveLenght_Graph();
 801e096:	f7f0 fe7f 	bl	800ed98 <Calibration_WaveLenght_Graph>
	Calibration_Exposure_Change(exp_num);
 801e09a:	4b9d      	ldr	r3, [pc, #628]	; (801e310 <main+0xa50>)
 801e09c:	4d9d      	ldr	r5, [pc, #628]	; (801e314 <main+0xa54>)
 801e09e:	7818      	ldrb	r0, [r3, #0]
 801e0a0:	f7f0 fe3c 	bl	800ed1c <Calibration_Exposure_Change>
	Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 801e0a4:	4b88      	ldr	r3, [pc, #544]	; (801e2c8 <main+0xa08>)
 801e0a6:	489c      	ldr	r0, [pc, #624]	; (801e318 <main+0xa58>)
 801e0a8:	781c      	ldrb	r4, [r3, #0]
 801e0aa:	4b9c      	ldr	r3, [pc, #624]	; (801e31c <main+0xa5c>)
 801e0ac:	4a9c      	ldr	r2, [pc, #624]	; (801e320 <main+0xa60>)
 801e0ae:	2c00      	cmp	r4, #0
 801e0b0:	bf18      	it	ne
 801e0b2:	4618      	movne	r0, r3
 801e0b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e0b8:	f7f0 fdee 	bl	800ec98 <Calibration_Load_Pack>
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801e0bc:	4899      	ldr	r0, [pc, #612]	; (801e324 <main+0xa64>)
 801e0be:	f7f0 fdd9 	bl	800ec74 <Calibration_Load_float>
 801e0c2:	4b99      	ldr	r3, [pc, #612]	; (801e328 <main+0xa68>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801e0c4:	4899      	ldr	r0, [pc, #612]	; (801e32c <main+0xa6c>)
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801e0c6:	ed83 0a00 	vstr	s0, [r3]
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801e0ca:	f7f0 fdd3 	bl	800ec74 <Calibration_Load_float>
 801e0ce:	4b98      	ldr	r3, [pc, #608]	; (801e330 <main+0xa70>)
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801e0d0:	4a98      	ldr	r2, [pc, #608]	; (801e334 <main+0xa74>)
 801e0d2:	4899      	ldr	r0, [pc, #612]	; (801e338 <main+0xa78>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801e0d4:	ed83 0a00 	vstr	s0, [r3]
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801e0d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e0dc:	f7f0 fddc 	bl	800ec98 <Calibration_Load_Pack>
	Calibration_Load_Pack(SPECTRAL_NIGHT, 0x400, Spectral_night);
 801e0e0:	4a96      	ldr	r2, [pc, #600]	; (801e33c <main+0xa7c>)
 801e0e2:	4897      	ldr	r0, [pc, #604]	; (801e340 <main+0xa80>)
 801e0e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e0e8:	f7f0 fdd6 	bl	800ec98 <Calibration_Load_Pack>
	Calibration_Load_Pack(X10_CIE1964, 0x400, calibratre_x_1964);
 801e0ec:	4a95      	ldr	r2, [pc, #596]	; (801e344 <main+0xa84>)
 801e0ee:	4896      	ldr	r0, [pc, #600]	; (801e348 <main+0xa88>)
 801e0f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e0f4:	f7f0 fdd0 	bl	800ec98 <Calibration_Load_Pack>
	Calibration_Load_Pack(Y10_CIE1964, 0x400, calibratre_y_1964);
 801e0f8:	4a94      	ldr	r2, [pc, #592]	; (801e34c <main+0xa8c>)
 801e0fa:	4895      	ldr	r0, [pc, #596]	; (801e350 <main+0xa90>)
 801e0fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e100:	f7f0 fdca 	bl	800ec98 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z10_CIE1964, 0x400, calibratre_z_1964);
 801e104:	4a93      	ldr	r2, [pc, #588]	; (801e354 <main+0xa94>)
 801e106:	4894      	ldr	r0, [pc, #592]	; (801e358 <main+0xa98>)
 801e108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e10c:	f7f0 fdc4 	bl	800ec98 <Calibration_Load_Pack>
	Calibration_Load_Pack(X2_CIE1931, 0x400, calibratre_x_1931);
 801e110:	4a92      	ldr	r2, [pc, #584]	; (801e35c <main+0xa9c>)
 801e112:	4893      	ldr	r0, [pc, #588]	; (801e360 <main+0xaa0>)
 801e114:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e118:	f7f0 fdbe 	bl	800ec98 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z2_CIE1931, 0x400, calibratre_z_1931);
 801e11c:	4a91      	ldr	r2, [pc, #580]	; (801e364 <main+0xaa4>)
 801e11e:	4892      	ldr	r0, [pc, #584]	; (801e368 <main+0xaa8>)
 801e120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e124:	f7f0 fdb8 	bl	800ec98 <Calibration_Load_Pack>
 801e128:	4b90      	ldr	r3, [pc, #576]	; (801e36c <main+0xaac>)
 801e12a:	9303      	str	r3, [sp, #12]
 801e12c:	4b90      	ldr	r3, [pc, #576]	; (801e370 <main+0xab0>)
 801e12e:	9305      	str	r3, [sp, #20]
 801e130:	4b90      	ldr	r3, [pc, #576]	; (801e374 <main+0xab4>)
 801e132:	9304      	str	r3, [sp, #16]
 801e134:	46aa      	mov	sl, r5
 801e136:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801e13a:	f04f 0800 	mov.w	r8, #0
 801e13e:	2100      	movs	r1, #0
 801e140:	4620      	mov	r0, r4
 801e142:	f7f0 fd41 	bl	800ebc8 <Calibration_Load_2byte>
 801e146:	ee07 0a90 	vmov	s15, r0
 801e14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e14e:	f504 4b90 	add.w	fp, r4, #18432	; 0x4800
 801e152:	ee17 0a90 	vmov	r0, s15
 801e156:	f7e2 fa0f 	bl	8000578 <__aeabi_f2d>
 801e15a:	4642      	mov	r2, r8
 801e15c:	464b      	mov	r3, r9
 801e15e:	f7e2 fb89 	bl	8000874 <__aeabi_ddiv>
 801e162:	a351      	add	r3, pc, #324	; (adr r3, 801e2a8 <main+0x9e8>)
 801e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e168:	f7e2 f8a8 	bl	80002bc <__adddf3>
 801e16c:	f7e2 fd50 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801e170:	2101      	movs	r1, #1
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801e172:	f8ca 0000 	str.w	r0, [sl]
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801e176:	4620      	mov	r0, r4
 801e178:	f7f0 fd26 	bl	800ebc8 <Calibration_Load_2byte>
 801e17c:	ee07 0a90 	vmov	s15, r0
 801e180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e184:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801e188:	ee17 0a90 	vmov	r0, s15
 801e18c:	f7e2 f9f4 	bl	8000578 <__aeabi_f2d>
 801e190:	4642      	mov	r2, r8
 801e192:	464b      	mov	r3, r9
 801e194:	f7e2 fb6e 	bl	8000874 <__aeabi_ddiv>
 801e198:	a343      	add	r3, pc, #268	; (adr r3, 801e2a8 <main+0x9e8>)
 801e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e19e:	f7e2 f88d 	bl	80002bc <__adddf3>
 801e1a2:	f7e2 fd35 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801e1a6:	2102      	movs	r1, #2
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801e1a8:	f8ca 0004 	str.w	r0, [sl, #4]
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801e1ac:	4620      	mov	r0, r4
 801e1ae:	f7f0 fd0b 	bl	800ebc8 <Calibration_Load_2byte>
 801e1b2:	ee07 0a90 	vmov	s15, r0
 801e1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e1ba:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 801e378 <main+0xab8>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801e1be:	ee17 0a90 	vmov	r0, s15
 801e1c2:	f7e2 f9d9 	bl	8000578 <__aeabi_f2d>
 801e1c6:	4642      	mov	r2, r8
 801e1c8:	464b      	mov	r3, r9
 801e1ca:	f7e2 fb53 	bl	8000874 <__aeabi_ddiv>
 801e1ce:	a336      	add	r3, pc, #216	; (adr r3, 801e2a8 <main+0x9e8>)
 801e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1d4:	f7e2 f872 	bl	80002bc <__adddf3>
 801e1d8:	f7e2 fd1a 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801e1dc:	2103      	movs	r1, #3
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801e1de:	f8ca 0008 	str.w	r0, [sl, #8]
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801e1e2:	4620      	mov	r0, r4
 801e1e4:	f7f0 fcf0 	bl	800ebc8 <Calibration_Load_2byte>
 801e1e8:	ee07 0a90 	vmov	s15, r0
 801e1ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1f0:	f10a 0a10 	add.w	sl, sl, #16
 801e1f4:	ee17 0a90 	vmov	r0, s15
 801e1f8:	f7e2 f9be 	bl	8000578 <__aeabi_f2d>
 801e1fc:	4642      	mov	r2, r8
 801e1fe:	464b      	mov	r3, r9
 801e200:	f7e2 fb38 	bl	8000874 <__aeabi_ddiv>
 801e204:	a328      	add	r3, pc, #160	; (adr r3, 801e2a8 <main+0x9e8>)
 801e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e20a:	f7e2 f857 	bl	80002bc <__adddf3>
 801e20e:	f7e2 fcff 	bl	8000c10 <__aeabi_d2f>
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e212:	2100      	movs	r1, #0
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801e214:	f84a 0c04 	str.w	r0, [sl, #-4]
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e218:	4658      	mov	r0, fp
 801e21a:	f7f0 fcd5 	bl	800ebc8 <Calibration_Load_2byte>
 801e21e:	ee07 0a90 	vmov	s15, r0
 801e222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e226:	9b03      	ldr	r3, [sp, #12]
 801e228:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801e22c:	2101      	movs	r1, #1
 801e22e:	4658      	mov	r0, fp
 801e230:	3710      	adds	r7, #16
 801e232:	3610      	adds	r6, #16
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e234:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801e238:	f7f0 fcc6 	bl	800ebc8 <Calibration_Load_2byte>
 801e23c:	ee07 0a90 	vmov	s15, r0
 801e240:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e244:	9b03      	ldr	r3, [sp, #12]
 801e246:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801e24a:	2102      	movs	r1, #2
 801e24c:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801e24e:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801e252:	f7f0 fcb9 	bl	800ebc8 <Calibration_Load_2byte>
 801e256:	ee07 0a90 	vmov	s15, r0
 801e25a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e25e:	9b03      	ldr	r3, [sp, #12]
 801e260:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801e264:	2103      	movs	r1, #3
 801e266:	4658      	mov	r0, fp
 801e268:	f504 4ba0 	add.w	fp, r4, #20480	; 0x5000
 801e26c:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801e270:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801e274:	f7f0 fca8 	bl	800ebc8 <Calibration_Load_2byte>
 801e278:	ee07 0a90 	vmov	s15, r0
 801e27c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e280:	9b03      	ldr	r3, [sp, #12]
 801e282:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801e286:	2100      	movs	r1, #0
 801e288:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801e28a:	edc3 7a03 	vstr	s15, [r3, #12]
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801e28e:	f7f0 fc9b 	bl	800ebc8 <Calibration_Load_2byte>
 801e292:	ee07 0a90 	vmov	s15, r0
 801e296:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e29a:	9b05      	ldr	r3, [sp, #20]
 801e29c:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801e2a0:	2101      	movs	r1, #1
 801e2a2:	e06d      	b.n	801e380 <main+0xac0>
 801e2a4:	f3af 8000 	nop.w
 801e2a8:	00000000 	.word	0x00000000
 801e2ac:	4072c000 	.word	0x4072c000
 801e2b0:	2000ed2c 	.word	0x2000ed2c
 801e2b4:	20095938 	.word	0x20095938
 801e2b8:	200957a4 	.word	0x200957a4
 801e2bc:	2004e92c 	.word	0x2004e92c
 801e2c0:	2004f92c 	.word	0x2004f92c
 801e2c4:	0812b030 	.word	0x0812b030
 801e2c8:	20000ebc 	.word	0x20000ebc
 801e2cc:	0812b040 	.word	0x0812b040
 801e2d0:	200056f2 	.word	0x200056f2
 801e2d4:	0812b048 	.word	0x0812b048
 801e2d8:	200056ef 	.word	0x200056ef
 801e2dc:	0812b050 	.word	0x0812b050
 801e2e0:	200056f0 	.word	0x200056f0
 801e2e4:	0812b058 	.word	0x0812b058
 801e2e8:	200056f3 	.word	0x200056f3
 801e2ec:	0812b060 	.word	0x0812b060
 801e2f0:	20090a69 	.word	0x20090a69
 801e2f4:	0812b068 	.word	0x0812b068
 801e2f8:	20090a6a 	.word	0x20090a6a
 801e2fc:	0812b038 	.word	0x0812b038
 801e300:	20095838 	.word	0x20095838
 801e304:	200056f6 	.word	0x200056f6
 801e308:	0812b020 	.word	0x0812b020
 801e30c:	2000571e 	.word	0x2000571e
 801e310:	200905a6 	.word	0x200905a6
 801e314:	20054938 	.word	0x20054938
 801e318:	08101838 	.word	0x08101838
 801e31c:	08100838 	.word	0x08100838
 801e320:	20051930 	.word	0x20051930
 801e324:	08102838 	.word	0x08102838
 801e328:	20009d14 	.word	0x20009d14
 801e32c:	0810283c 	.word	0x0810283c
 801e330:	20009d18 	.word	0x20009d18
 801e334:	20052930 	.word	0x20052930
 801e338:	08102840 	.word	0x08102840
 801e33c:	20053930 	.word	0x20053930
 801e340:	08103844 	.word	0x08103844
 801e344:	2008b504 	.word	0x2008b504
 801e348:	08107840 	.word	0x08107840
 801e34c:	2008c504 	.word	0x2008c504
 801e350:	08108840 	.word	0x08108840
 801e354:	2008e504 	.word	0x2008e504
 801e358:	08109840 	.word	0x08109840
 801e35c:	2008a504 	.word	0x2008a504
 801e360:	08105840 	.word	0x08105840
 801e364:	2008d504 	.word	0x2008d504
 801e368:	08106840 	.word	0x08106840
 801e36c:	20009d28 	.word	0x20009d28
 801e370:	2000ad28 	.word	0x2000ad28
 801e374:	2005092c 	.word	0x2005092c
 801e378:	447a0000 	.word	0x447a0000
 801e37c:	40590000 	.word	0x40590000
 801e380:	4658      	mov	r0, fp
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801e382:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801e386:	f7f0 fc1f 	bl	800ebc8 <Calibration_Load_2byte>
 801e38a:	ee07 0a90 	vmov	s15, r0
 801e38e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e392:	9b05      	ldr	r3, [sp, #20]
 801e394:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801e398:	2102      	movs	r1, #2
 801e39a:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801e39c:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801e3a0:	f7f0 fc12 	bl	800ebc8 <Calibration_Load_2byte>
 801e3a4:	ee07 0a90 	vmov	s15, r0
 801e3a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e3ac:	9b05      	ldr	r3, [sp, #20]
 801e3ae:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801e3b2:	2103      	movs	r1, #3
 801e3b4:	4658      	mov	r0, fp
 801e3b6:	f504 4b28 	add.w	fp, r4, #43008	; 0xa800
 801e3ba:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801e3be:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801e3c2:	f7f0 fc01 	bl	800ebc8 <Calibration_Load_2byte>
 801e3c6:	ee07 0a90 	vmov	s15, r0
 801e3ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e3ce:	9b05      	ldr	r3, [sp, #20]
 801e3d0:	eec7 7a08 	vdiv.f32	s15, s14, s16
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801e3d4:	2100      	movs	r1, #0
 801e3d6:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801e3d8:	edc3 7a03 	vstr	s15, [r3, #12]
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801e3dc:	f7f0 fbf4 	bl	800ebc8 <Calibration_Load_2byte>
 801e3e0:	ee07 0a90 	vmov	s15, r0
 801e3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e3e8:	ee17 0a90 	vmov	r0, s15
 801e3ec:	f7e2 f8c4 	bl	8000578 <__aeabi_f2d>
 801e3f0:	4642      	mov	r2, r8
 801e3f2:	464b      	mov	r3, r9
 801e3f4:	f7e2 fa3e 	bl	8000874 <__aeabi_ddiv>
 801e3f8:	2200      	movs	r2, #0
 801e3fa:	4bda      	ldr	r3, [pc, #872]	; (801e764 <main+0xea4>)
 801e3fc:	f7e1 ff5c 	bl	80002b8 <__aeabi_dsub>
 801e400:	f7e2 fc06 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801e404:	2101      	movs	r1, #1
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801e406:	f847 0c10 	str.w	r0, [r7, #-16]
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801e40a:	4658      	mov	r0, fp
 801e40c:	f7f0 fbdc 	bl	800ebc8 <Calibration_Load_2byte>
 801e410:	ee07 0a90 	vmov	s15, r0
 801e414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e418:	ee17 0a90 	vmov	r0, s15
 801e41c:	f7e2 f8ac 	bl	8000578 <__aeabi_f2d>
 801e420:	4642      	mov	r2, r8
 801e422:	464b      	mov	r3, r9
 801e424:	f7e2 fa26 	bl	8000874 <__aeabi_ddiv>
 801e428:	2200      	movs	r2, #0
 801e42a:	4bce      	ldr	r3, [pc, #824]	; (801e764 <main+0xea4>)
 801e42c:	f7e1 ff44 	bl	80002b8 <__aeabi_dsub>
 801e430:	f7e2 fbee 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801e434:	2102      	movs	r1, #2
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801e436:	f847 0c0c 	str.w	r0, [r7, #-12]
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801e43a:	4658      	mov	r0, fp
 801e43c:	f7f0 fbc4 	bl	800ebc8 <Calibration_Load_2byte>
 801e440:	ee07 0a90 	vmov	s15, r0
 801e444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e448:	ee17 0a90 	vmov	r0, s15
 801e44c:	f7e2 f894 	bl	8000578 <__aeabi_f2d>
 801e450:	4642      	mov	r2, r8
 801e452:	464b      	mov	r3, r9
 801e454:	f7e2 fa0e 	bl	8000874 <__aeabi_ddiv>
 801e458:	2200      	movs	r2, #0
 801e45a:	4bc2      	ldr	r3, [pc, #776]	; (801e764 <main+0xea4>)
 801e45c:	f7e1 ff2c 	bl	80002b8 <__aeabi_dsub>
 801e460:	f7e2 fbd6 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801e464:	2103      	movs	r1, #3
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801e466:	f847 0c08 	str.w	r0, [r7, #-8]
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801e46a:	4658      	mov	r0, fp
 801e46c:	f7f0 fbac 	bl	800ebc8 <Calibration_Load_2byte>
 801e470:	ee07 0a90 	vmov	s15, r0
 801e474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e478:	f504 4b30 	add.w	fp, r4, #45056	; 0xb000
 801e47c:	ee17 0a90 	vmov	r0, s15
 801e480:	f7e2 f87a 	bl	8000578 <__aeabi_f2d>
 801e484:	4642      	mov	r2, r8
 801e486:	464b      	mov	r3, r9
 801e488:	f7e2 f9f4 	bl	8000874 <__aeabi_ddiv>
 801e48c:	2200      	movs	r2, #0
 801e48e:	4bb5      	ldr	r3, [pc, #724]	; (801e764 <main+0xea4>)
 801e490:	f7e1 ff12 	bl	80002b8 <__aeabi_dsub>
 801e494:	f7e2 fbbc 	bl	8000c10 <__aeabi_d2f>
 801e498:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801e49c:	f847 0c04 	str.w	r0, [r7, #-4]
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801e4a0:	2100      	movs	r1, #0
 801e4a2:	4658      	mov	r0, fp
 801e4a4:	f7f0 fb90 	bl	800ebc8 <Calibration_Load_2byte>
 801e4a8:	ee07 0a90 	vmov	s15, r0
 801e4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e4b0:	ee17 0a90 	vmov	r0, s15
 801e4b4:	f7e2 f860 	bl	8000578 <__aeabi_f2d>
 801e4b8:	4642      	mov	r2, r8
 801e4ba:	464b      	mov	r3, r9
 801e4bc:	f7e2 f9da 	bl	8000874 <__aeabi_ddiv>
 801e4c0:	2200      	movs	r2, #0
 801e4c2:	4ba8      	ldr	r3, [pc, #672]	; (801e764 <main+0xea4>)
 801e4c4:	f7e1 fef8 	bl	80002b8 <__aeabi_dsub>
 801e4c8:	f7e2 fba2 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801e4cc:	2101      	movs	r1, #1
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801e4ce:	f846 0c10 	str.w	r0, [r6, #-16]
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801e4d2:	4658      	mov	r0, fp
 801e4d4:	f7f0 fb78 	bl	800ebc8 <Calibration_Load_2byte>
 801e4d8:	ee07 0a90 	vmov	s15, r0
 801e4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e4e0:	ee17 0a90 	vmov	r0, s15
 801e4e4:	f7e2 f848 	bl	8000578 <__aeabi_f2d>
 801e4e8:	4642      	mov	r2, r8
 801e4ea:	464b      	mov	r3, r9
 801e4ec:	f7e2 f9c2 	bl	8000874 <__aeabi_ddiv>
 801e4f0:	2200      	movs	r2, #0
 801e4f2:	4b9c      	ldr	r3, [pc, #624]	; (801e764 <main+0xea4>)
 801e4f4:	f7e1 fee0 	bl	80002b8 <__aeabi_dsub>
 801e4f8:	f7e2 fb8a 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801e4fc:	2102      	movs	r1, #2
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801e4fe:	f846 0c0c 	str.w	r0, [r6, #-12]
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801e502:	4658      	mov	r0, fp
 801e504:	f7f0 fb60 	bl	800ebc8 <Calibration_Load_2byte>
 801e508:	ee07 0a90 	vmov	s15, r0
 801e50c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e510:	ee17 0a90 	vmov	r0, s15
 801e514:	f7e2 f830 	bl	8000578 <__aeabi_f2d>
 801e518:	4642      	mov	r2, r8
 801e51a:	464b      	mov	r3, r9
 801e51c:	f7e2 f9aa 	bl	8000874 <__aeabi_ddiv>
 801e520:	2200      	movs	r2, #0
 801e522:	4b90      	ldr	r3, [pc, #576]	; (801e764 <main+0xea4>)
 801e524:	f7e1 fec8 	bl	80002b8 <__aeabi_dsub>
 801e528:	f7e2 fb72 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801e52c:	2103      	movs	r1, #3
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801e52e:	f846 0c08 	str.w	r0, [r6, #-8]
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801e532:	4658      	mov	r0, fp
 801e534:	f7f0 fb48 	bl	800ebc8 <Calibration_Load_2byte>
 801e538:	ee07 0a90 	vmov	s15, r0
 801e53c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e540:	f504 4b38 	add.w	fp, r4, #47104	; 0xb800
 801e544:	ee17 0a90 	vmov	r0, s15
 801e548:	f7e2 f816 	bl	8000578 <__aeabi_f2d>
 801e54c:	4642      	mov	r2, r8
 801e54e:	464b      	mov	r3, r9
 801e550:	f7e2 f990 	bl	8000874 <__aeabi_ddiv>
 801e554:	2200      	movs	r2, #0
 801e556:	4b83      	ldr	r3, [pc, #524]	; (801e764 <main+0xea4>)
 801e558:	f7e1 feae 	bl	80002b8 <__aeabi_dsub>
 801e55c:	f7e2 fb58 	bl	8000c10 <__aeabi_d2f>
 801e560:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801e564:	f846 0c04 	str.w	r0, [r6, #-4]
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801e568:	2100      	movs	r1, #0
 801e56a:	4658      	mov	r0, fp
 801e56c:	f7f0 fb2c 	bl	800ebc8 <Calibration_Load_2byte>
 801e570:	ee07 0a90 	vmov	s15, r0
 801e574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e578:	3408      	adds	r4, #8
 801e57a:	ee17 0a90 	vmov	r0, s15
 801e57e:	f7e1 fffb 	bl	8000578 <__aeabi_f2d>
 801e582:	4642      	mov	r2, r8
 801e584:	464b      	mov	r3, r9
 801e586:	f7e2 f975 	bl	8000874 <__aeabi_ddiv>
 801e58a:	2200      	movs	r2, #0
 801e58c:	4b75      	ldr	r3, [pc, #468]	; (801e764 <main+0xea4>)
 801e58e:	f7e1 fe93 	bl	80002b8 <__aeabi_dsub>
 801e592:	f7e2 fb3d 	bl	8000c10 <__aeabi_d2f>
 801e596:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801e598:	2101      	movs	r1, #1
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801e59a:	6018      	str	r0, [r3, #0]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801e59c:	4658      	mov	r0, fp
 801e59e:	f7f0 fb13 	bl	800ebc8 <Calibration_Load_2byte>
 801e5a2:	ee07 0a90 	vmov	s15, r0
 801e5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e5aa:	ee17 0a90 	vmov	r0, s15
 801e5ae:	f7e1 ffe3 	bl	8000578 <__aeabi_f2d>
 801e5b2:	4642      	mov	r2, r8
 801e5b4:	464b      	mov	r3, r9
 801e5b6:	f7e2 f95d 	bl	8000874 <__aeabi_ddiv>
 801e5ba:	2200      	movs	r2, #0
 801e5bc:	4b69      	ldr	r3, [pc, #420]	; (801e764 <main+0xea4>)
 801e5be:	f7e1 fe7b 	bl	80002b8 <__aeabi_dsub>
 801e5c2:	f7e2 fb25 	bl	8000c10 <__aeabi_d2f>
 801e5c6:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801e5c8:	2102      	movs	r1, #2
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801e5ca:	6058      	str	r0, [r3, #4]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801e5cc:	4658      	mov	r0, fp
 801e5ce:	f7f0 fafb 	bl	800ebc8 <Calibration_Load_2byte>
 801e5d2:	ee07 0a90 	vmov	s15, r0
 801e5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e5da:	ee17 0a90 	vmov	r0, s15
 801e5de:	f7e1 ffcb 	bl	8000578 <__aeabi_f2d>
 801e5e2:	4642      	mov	r2, r8
 801e5e4:	464b      	mov	r3, r9
 801e5e6:	f7e2 f945 	bl	8000874 <__aeabi_ddiv>
 801e5ea:	2200      	movs	r2, #0
 801e5ec:	4b5d      	ldr	r3, [pc, #372]	; (801e764 <main+0xea4>)
 801e5ee:	f7e1 fe63 	bl	80002b8 <__aeabi_dsub>
 801e5f2:	f7e2 fb0d 	bl	8000c10 <__aeabi_d2f>
 801e5f6:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801e5f8:	2103      	movs	r1, #3
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801e5fa:	6098      	str	r0, [r3, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801e5fc:	4658      	mov	r0, fp
 801e5fe:	f7f0 fae3 	bl	800ebc8 <Calibration_Load_2byte>
 801e602:	ee07 0a90 	vmov	s15, r0
 801e606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e60a:	ee17 0a90 	vmov	r0, s15
 801e60e:	f7e1 ffb3 	bl	8000578 <__aeabi_f2d>
 801e612:	4642      	mov	r2, r8
 801e614:	464b      	mov	r3, r9
 801e616:	f7e2 f92d 	bl	8000874 <__aeabi_ddiv>
 801e61a:	4b52      	ldr	r3, [pc, #328]	; (801e764 <main+0xea4>)
 801e61c:	2200      	movs	r2, #0
 801e61e:	f7e1 fe4b 	bl	80002b8 <__aeabi_dsub>
 801e622:	f7e2 faf5 	bl	8000c10 <__aeabi_d2f>
 801e626:	9b04      	ldr	r3, [sp, #16]
 801e628:	60d8      	str	r0, [r3, #12]
 801e62a:	9b03      	ldr	r3, [sp, #12]
 801e62c:	3310      	adds	r3, #16
 801e62e:	9303      	str	r3, [sp, #12]
 801e630:	9b05      	ldr	r3, [sp, #20]
 801e632:	3310      	adds	r3, #16
 801e634:	9305      	str	r3, [sp, #20]
 801e636:	9b04      	ldr	r3, [sp, #16]
 801e638:	3310      	adds	r3, #16
 801e63a:	9304      	str	r3, [sp, #16]
	for(uint16_t i = 0; i < 2*1024; i=i+8){
 801e63c:	4b4a      	ldr	r3, [pc, #296]	; (801e768 <main+0xea8>)
 801e63e:	429c      	cmp	r4, r3
 801e640:	f47f ad7d 	bne.w	801e13e <main+0x87e>
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801e644:	2100      	movs	r1, #0
 801e646:	4849      	ldr	r0, [pc, #292]	; (801e76c <main+0xeac>)
 801e648:	f7f0 fabe 	bl	800ebc8 <Calibration_Load_2byte>
 801e64c:	4b48      	ldr	r3, [pc, #288]	; (801e770 <main+0xeb0>)
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801e64e:	2101      	movs	r1, #1
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801e650:	8018      	strh	r0, [r3, #0]
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801e652:	4846      	ldr	r0, [pc, #280]	; (801e76c <main+0xeac>)
 801e654:	f7f0 fab8 	bl	800ebc8 <Calibration_Load_2byte>
 801e658:	4b46      	ldr	r3, [pc, #280]	; (801e774 <main+0xeb4>)
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801e65a:	2100      	movs	r1, #0
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801e65c:	8018      	strh	r0, [r3, #0]
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801e65e:	4846      	ldr	r0, [pc, #280]	; (801e778 <main+0xeb8>)
 801e660:	f7f0 fab2 	bl	800ebc8 <Calibration_Load_2byte>
 801e664:	4b45      	ldr	r3, [pc, #276]	; (801e77c <main+0xebc>)
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801e666:	2100      	movs	r1, #0
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801e668:	8018      	strh	r0, [r3, #0]
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801e66a:	4845      	ldr	r0, [pc, #276]	; (801e780 <main+0xec0>)
 801e66c:	f7f0 faac 	bl	800ebc8 <Calibration_Load_2byte>
 801e670:	4b44      	ldr	r3, [pc, #272]	; (801e784 <main+0xec4>)
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801e672:	2101      	movs	r1, #1
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801e674:	8018      	strh	r0, [r3, #0]
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801e676:	4842      	ldr	r0, [pc, #264]	; (801e780 <main+0xec0>)
 801e678:	f7f0 faa6 	bl	800ebc8 <Calibration_Load_2byte>
 801e67c:	4b42      	ldr	r3, [pc, #264]	; (801e788 <main+0xec8>)
 801e67e:	4943      	ldr	r1, [pc, #268]	; (801e78c <main+0xecc>)
 801e680:	8018      	strh	r0, [r3, #0]
 801e682:	4b43      	ldr	r3, [pc, #268]	; (801e790 <main+0xed0>)
 801e684:	4a43      	ldr	r2, [pc, #268]	; (801e794 <main+0xed4>)
 801e686:	f8b3 e000 	ldrh.w	lr, [r3]
 801e68a:	4b43      	ldr	r3, [pc, #268]	; (801e798 <main+0xed8>)
 801e68c:	8810      	ldrh	r0, [r2, #0]
 801e68e:	f8b3 8000 	ldrh.w	r8, [r3]
 801e692:	880e      	ldrh	r6, [r1, #0]
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801e694:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801e79c <main+0xedc>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801e698:	eddf 6a41 	vldr	s13, [pc, #260]	; 801e7a0 <main+0xee0>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801e69c:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801e7a4 <main+0xee4>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801e6a0:	eddf 5a41 	vldr	s11, [pc, #260]	; 801e7a8 <main+0xee8>
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	461c      	mov	r4, r3
 801e6a8:	461f      	mov	r7, r3
 801e6aa:	469c      	mov	ip, r3
 801e6ac:	4699      	mov	r9, r3
 801e6ae:	468a      	mov	sl, r1
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801e6b0:	ecf5 7a01 	vldmia	r5!, {s15}
 801e6b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6bc:	b299      	uxth	r1, r3
 801e6be:	d807      	bhi.n	801e6d0 <main+0xe10>
 801e6c0:	ed95 5a00 	vldr	s10, [r5]
 801e6c4:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6cc:	f280 80f3 	bge.w	801e8b6 <main+0xff6>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801e6d0:	eef4 7ae6 	vcmpe.f32	s15, s13
 801e6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6d8:	d807      	bhi.n	801e6ea <main+0xe2a>
 801e6da:	ed95 5a00 	vldr	s10, [r5]
 801e6de:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801e6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6e6:	f280 80ea 	bge.w	801e8be <main+0xffe>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801e6ea:	eef4 7ac6 	vcmpe.f32	s15, s12
 801e6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6f2:	d807      	bhi.n	801e704 <main+0xe44>
 801e6f4:	ed95 5a00 	vldr	s10, [r5]
 801e6f8:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801e6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e700:	f280 80e1 	bge.w	801e8c6 <main+0x1006>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801e704:	eef4 7ae5 	vcmpe.f32	s15, s11
 801e708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e70c:	d808      	bhi.n	801e720 <main+0xe60>
 801e70e:	edd5 7a00 	vldr	s15, [r5]
			PARGraph_IR = i;
 801e712:	eef4 7a65 	vcmp.f32	s15, s11
 801e716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e71a:	bfa4      	itt	ge
 801e71c:	4608      	movge	r0, r1
 801e71e:	2401      	movge	r4, #1
 801e720:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++){
 801e722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e726:	d1c3      	bne.n	801e6b0 <main+0xdf0>
 801e728:	f1b9 0f00 	cmp.w	r9, #0
 801e72c:	d002      	beq.n	801e734 <main+0xe74>
 801e72e:	4b1a      	ldr	r3, [pc, #104]	; (801e798 <main+0xed8>)
 801e730:	f8a3 8000 	strh.w	r8, [r3]
 801e734:	f1bc 0f00 	cmp.w	ip, #0
 801e738:	d002      	beq.n	801e740 <main+0xe80>
 801e73a:	4b15      	ldr	r3, [pc, #84]	; (801e790 <main+0xed0>)
 801e73c:	f8a3 e000 	strh.w	lr, [r3]
 801e740:	b10f      	cbz	r7, 801e746 <main+0xe86>
 801e742:	f8aa 6000 	strh.w	r6, [sl]
 801e746:	b104      	cbz	r4, 801e74a <main+0xe8a>
 801e748:	8010      	strh	r0, [r2, #0]
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801e74a:	4b18      	ldr	r3, [pc, #96]	; (801e7ac <main+0xeec>)
 801e74c:	4a18      	ldr	r2, [pc, #96]	; (801e7b0 <main+0xef0>)
 801e74e:	edd3 7a00 	vldr	s15, [r3]
 801e752:	f8df 9060 	ldr.w	r9, [pc, #96]	; 801e7b4 <main+0xef4>
 801e756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e75a:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801e75e:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
 801e762:	e029      	b.n	801e7b8 <main+0xef8>
 801e764:	40490000 	.word	0x40490000
 801e768:	08100800 	.word	0x08100800
 801e76c:	0812a048 	.word	0x0812a048
 801e770:	200956c0 	.word	0x200956c0
 801e774:	200956d4 	.word	0x200956d4
 801e778:	0812a04c 	.word	0x0812a04c
 801e77c:	200959e0 	.word	0x200959e0
 801e780:	0812a040 	.word	0x0812a040
 801e784:	200956c4 	.word	0x200956c4
 801e788:	20095a88 	.word	0x20095a88
 801e78c:	20095ca0 	.word	0x20095ca0
 801e790:	20095b3c 	.word	0x20095b3c
 801e794:	20095a78 	.word	0x20095a78
 801e798:	20095a7a 	.word	0x20095a7a
 801e79c:	43c80000 	.word	0x43c80000
 801e7a0:	43fa0000 	.word	0x43fa0000
 801e7a4:	44160000 	.word	0x44160000
 801e7a8:	442f0000 	.word	0x442f0000
 801e7ac:	20054938 	.word	0x20054938
 801e7b0:	20055938 	.word	0x20055938
 801e7b4:	20009d24 	.word	0x20009d24
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801e7b8:	8011      	strh	r1, [r2, #0]
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801e7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e7be:	ee17 1a90 	vmov	r1, s15
 801e7c2:	8051      	strh	r1, [r2, #2]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801e7c4:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 801e7c8:	edd1 7a00 	vldr	s15, [r1]
 801e7cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801e7d0:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801e7d4:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801e7d8:	edd3 7a00 	vldr	s15, [r3]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801e7dc:	8091      	strh	r1, [r2, #4]
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801e7de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e7e2:	ee17 3a90 	vmov	r3, s15
 801e7e6:	80d3      	strh	r3, [r2, #6]
	if(Mode_EL == 0){
 801e7e8:	4b67      	ldr	r3, [pc, #412]	; (801e988 <main+0x10c8>)
 801e7ea:	781a      	ldrb	r2, [r3, #0]
 801e7ec:	4b67      	ldr	r3, [pc, #412]	; (801e98c <main+0x10cc>)
 801e7ee:	2a00      	cmp	r2, #0
 801e7f0:	d16c      	bne.n	801e8cc <main+0x100c>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801e7f2:	4a67      	ldr	r2, [pc, #412]	; (801e990 <main+0x10d0>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e7f4:	ed93 0a00 	vldr	s0, [r3]
 801e7f8:	edd2 0a00 	vldr	s1, [r2]
 801e7fc:	f7fa ff70 	bl	80196e0 <Rabs_calc_Factor2_Settings_change>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 801e800:	4b64      	ldr	r3, [pc, #400]	; (801e994 <main+0x10d4>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e802:	ed89 0a00 	vstr	s0, [r9]
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 801e806:	781b      	ldrb	r3, [r3, #0]
 801e808:	4863      	ldr	r0, [pc, #396]	; (801e998 <main+0x10d8>)
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d160      	bne.n	801e8d0 <main+0x1010>
 801e80e:	f000 fc1d 	bl	801f04c <HAL_UART_MspDeInit>
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801e812:	2103      	movs	r1, #3
 801e814:	4861      	ldr	r0, [pc, #388]	; (801e99c <main+0x10dc>)
 801e816:	4c62      	ldr	r4, [pc, #392]	; (801e9a0 <main+0x10e0>)
 801e818:	f7f0 f9fa 	bl	800ec10 <Calibration_Load_1byte>
 801e81c:	7020      	strb	r0, [r4, #0]
	Calculate_Data();
 801e81e:	f7fe f841 	bl	801c8a4 <Calculate_Data>
	Get_Battery_Level();
 801e822:	f7fe f975 	bl	801cb10 <Get_Battery_Level>
	HAL_Delay(1);
 801e826:	2001      	movs	r0, #1
 801e828:	f7e2 fc00 	bl	800102c <HAL_Delay>
	Image_load(TKA_LOGO_BMP, TKA_LOGO_BMP_SIZEX*TKA_LOGO_BMP_SIZEY);
 801e82c:	f64b 61e6 	movw	r1, #48870	; 0xbee6
 801e830:	2000      	movs	r0, #0
 801e832:	f7fa ff25 	bl	8019680 <Image_load>
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 801e836:	4a5b      	ldr	r2, [pc, #364]	; (801e9a4 <main+0x10e4>)
 801e838:	f245 410a 	movw	r1, #21514	; 0x540a
 801e83c:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 801e840:	f7ed fad0 	bl	800bde4 <CRC_Check>
 801e844:	4b58      	ldr	r3, [pc, #352]	; (801e9a8 <main+0x10e8>)
 801e846:	46a0      	mov	r8, r4
 801e848:	7018      	strb	r0, [r3, #0]
	if(CRC_STATUS == CRC_OK)
 801e84a:	2800      	cmp	r0, #0
 801e84c:	d143      	bne.n	801e8d6 <main+0x1016>
		GUI_Title_Screen();
 801e84e:	f7f0 fbbf 	bl	800efd0 <GUI_Title_Screen>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801e852:	4c56      	ldr	r4, [pc, #344]	; (801e9ac <main+0x10ec>)
		HAL_Delay(2000);	
 801e854:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801e858:	f7e2 fbe8 	bl	800102c <HAL_Delay>
		usb_receive_processing();
 801e85c:	f7fe fb9e 	bl	801cf9c <usb_receive_processing>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801e860:	7823      	ldrb	r3, [r4, #0]
 801e862:	07d8      	lsls	r0, r3, #31
 801e864:	d53c      	bpl.n	801e8e0 <main+0x1020>
 801e866:	4b52      	ldr	r3, [pc, #328]	; (801e9b0 <main+0x10f0>)
 801e868:	4852      	ldr	r0, [pc, #328]	; (801e9b4 <main+0x10f4>)
 801e86a:	781b      	ldrb	r3, [r3, #0]
 801e86c:	f013 0f01 	tst.w	r3, #1
 801e870:	bf18      	it	ne
 801e872:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 801e876:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 801e87a:	f7fa ff01 	bl	8019680 <Image_load>
		Locus.pData = (uint16_t *)bmp;
 801e87e:	4b4e      	ldr	r3, [pc, #312]	; (801e9b8 <main+0x10f8>)
 801e880:	4a4e      	ldr	r2, [pc, #312]	; (801e9bc <main+0x10fc>)
 801e882:	605a      	str	r2, [r3, #4]
		Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 801e884:	7822      	ldrb	r2, [r4, #0]
 801e886:	f002 0101 	and.w	r1, r2, #1
 801e88a:	2900      	cmp	r1, #0
 801e88c:	bf14      	ite	ne
 801e88e:	21d8      	movne	r1, #216	; 0xd8
 801e890:	21fa      	moveq	r1, #250	; 0xfa
 801e892:	8019      	strh	r1, [r3, #0]
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801e894:	d132      	bne.n	801e8fc <main+0x103c>
 801e896:	f012 0f04 	tst.w	r2, #4
 801e89a:	bf0c      	ite	eq
 801e89c:	22fa      	moveq	r2, #250	; 0xfa
 801e89e:	22ea      	movne	r2, #234	; 0xea
 801e8a0:	805a      	strh	r2, [r3, #2]
		switch(GUI_screen_state){
 801e8a2:	f898 3000 	ldrb.w	r3, [r8]
 801e8a6:	3b01      	subs	r3, #1
 801e8a8:	2b05      	cmp	r3, #5
 801e8aa:	d85d      	bhi.n	801e968 <main+0x10a8>
 801e8ac:	e8df f003 	tbb	[pc, r3]
 801e8b0:	4a40285f 	.word	0x4a40285f
 801e8b4:	5650      	.short	0x5650
			PARGraph_B = i;
 801e8b6:	4688      	mov	r8, r1
 801e8b8:	f04f 0901 	mov.w	r9, #1
 801e8bc:	e730      	b.n	801e720 <main+0xe60>
			PARGraph_G = i;
 801e8be:	468e      	mov	lr, r1
 801e8c0:	f04f 0c01 	mov.w	ip, #1
 801e8c4:	e72c      	b.n	801e720 <main+0xe60>
			PARGraph_R = i;
 801e8c6:	460e      	mov	r6, r1
 801e8c8:	2701      	movs	r7, #1
 801e8ca:	e729      	b.n	801e720 <main+0xe60>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801e8cc:	4a3c      	ldr	r2, [pc, #240]	; (801e9c0 <main+0x1100>)
 801e8ce:	e791      	b.n	801e7f4 <main+0xf34>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 801e8d0:	f000 fb70 	bl	801efb4 <HAL_UART_MspInit>
 801e8d4:	e79d      	b.n	801e812 <main+0xf52>
	} else{TFT_FillScreen_DMA(TFT_Red);}
 801e8d6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 801e8da:	f7fd f991 	bl	801bc00 <TFT_FillScreen_DMA>
 801e8de:	e7b8      	b.n	801e852 <main+0xf92>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801e8e0:	f003 0304 	and.w	r3, r3, #4
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	4b37      	ldr	r3, [pc, #220]	; (801e9c4 <main+0x1104>)
 801e8e8:	4837      	ldr	r0, [pc, #220]	; (801e9c8 <main+0x1108>)
 801e8ea:	bf08      	it	eq
 801e8ec:	4618      	moveq	r0, r3
 801e8ee:	f24f 4324 	movw	r3, #62500	; 0xf424
 801e8f2:	f24e 4184 	movw	r1, #58500	; 0xe484
 801e8f6:	bf08      	it	eq
 801e8f8:	4619      	moveq	r1, r3
 801e8fa:	e7be      	b.n	801e87a <main+0xfba>
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801e8fc:	22fa      	movs	r2, #250	; 0xfa
 801e8fe:	e7cf      	b.n	801e8a0 <main+0xfe0>
		case Measure2_Screen: preGUI_screen_state = Measure_Screen; GUI_Measure2_Screen();  break;
 801e900:	4b32      	ldr	r3, [pc, #200]	; (801e9cc <main+0x110c>)
 801e902:	2201      	movs	r2, #1
 801e904:	701a      	strb	r2, [r3, #0]
 801e906:	f7f1 fc9d 	bl	8010244 <GUI_Measure2_Screen>
  htim7.Instance = TIM7;
 801e90a:	4c31      	ldr	r4, [pc, #196]	; (801e9d0 <main+0x1110>)
  htim7.Init.Prescaler = 60000;
 801e90c:	4931      	ldr	r1, [pc, #196]	; (801e9d4 <main+0x1114>)
 801e90e:	f64e 2260 	movw	r2, #60000	; 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e912:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 60000;
 801e914:	e884 0006 	stmia.w	r4, {r1, r2}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801e918:	4620      	mov	r0, r4
  htim7.Init.Period = 200;
 801e91a:	22c8      	movs	r2, #200	; 0xc8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e91c:	9319      	str	r3, [sp, #100]	; 0x64
 801e91e:	931a      	str	r3, [sp, #104]	; 0x68
 801e920:	931b      	str	r3, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e922:	60a3      	str	r3, [r4, #8]
  htim7.Init.Period = 200;
 801e924:	60e2      	str	r2, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e926:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801e928:	f7e7 fbae 	bl	8006088 <HAL_TIM_Base_Init>
 801e92c:	b310      	cbz	r0, 801e974 <main+0x10b4>
 801e92e:	e7fe      	b.n	801e92e <main+0x106e>
		case Measure3_Screen: preGUI_screen_state = Measure2_Screen; GUI_Measure_Screen(); GUI_Measure2_Screen();GUI_Measure3_Screen();  break;
 801e930:	4b26      	ldr	r3, [pc, #152]	; (801e9cc <main+0x110c>)
 801e932:	2202      	movs	r2, #2
 801e934:	701a      	strb	r2, [r3, #0]
 801e936:	f7f1 fc57 	bl	80101e8 <GUI_Measure_Screen>
 801e93a:	f7f1 fc83 	bl	8010244 <GUI_Measure2_Screen>
 801e93e:	f7f1 fcb9 	bl	80102b4 <GUI_Measure3_Screen>
 801e942:	e7e2      	b.n	801e90a <main+0x104a>
		case Graph_Screen: preGUI_screen_state = Measure_Screen; GUI_Graph_Screen(); break;
 801e944:	4b21      	ldr	r3, [pc, #132]	; (801e9cc <main+0x110c>)
 801e946:	2201      	movs	r2, #1
 801e948:	701a      	strb	r2, [r3, #0]
 801e94a:	f7f1 fab1 	bl	800feb0 <GUI_Graph_Screen>
 801e94e:	e7dc      	b.n	801e90a <main+0x104a>
		case Color_Screen: preGUI_screen_state = ColorSet1_Screen; GUI_Color_Screen();  break; 
 801e950:	4b1e      	ldr	r3, [pc, #120]	; (801e9cc <main+0x110c>)
 801e952:	220e      	movs	r2, #14
 801e954:	701a      	strb	r2, [r3, #0]
 801e956:	f7f1 fce3 	bl	8010320 <GUI_Color_Screen>
 801e95a:	e7d6      	b.n	801e90a <main+0x104a>
		case Color_Rendition_Screen: preGUI_screen_state = Measure_Screen; GUI_ColorRend_Screen();	break;
 801e95c:	4b1b      	ldr	r3, [pc, #108]	; (801e9cc <main+0x110c>)
 801e95e:	2201      	movs	r2, #1
 801e960:	701a      	strb	r2, [r3, #0]
 801e962:	f7f2 f84b 	bl	80109fc <GUI_ColorRend_Screen>
 801e966:	e7d0      	b.n	801e90a <main+0x104a>
		default: GUI_screen_state =  Measure_Screen; GUI_Measure_Screen();  break;
 801e968:	2301      	movs	r3, #1
 801e96a:	f888 3000 	strb.w	r3, [r8]
 801e96e:	f7f1 fc3b 	bl	80101e8 <GUI_Measure_Screen>
 801e972:	e7ca      	b.n	801e90a <main+0x104a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e974:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e976:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801e978:	a919      	add	r1, sp, #100	; 0x64
 801e97a:	4620      	mov	r0, r4
 801e97c:	f7e7 fe04 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 801e980:	4607      	mov	r7, r0
 801e982:	b348      	cbz	r0, 801e9d8 <main+0x1118>
 801e984:	e7fe      	b.n	801e984 <main+0x10c4>
 801e986:	bf00      	nop
 801e988:	20000ebc 	.word	0x20000ebc
 801e98c:	20009d1c 	.word	0x20009d1c
 801e990:	20009d18 	.word	0x20009d18
 801e994:	20090a6a 	.word	0x20090a6a
 801e998:	200958b0 	.word	0x200958b0
 801e99c:	0812c020 	.word	0x0812c020
 801e9a0:	200056f1 	.word	0x200056f1
 801e9a4:	0812a050 	.word	0x0812a050
 801e9a8:	200956c2 	.word	0x200956c2
 801e9ac:	200056ef 	.word	0x200056ef
 801e9b0:	200056f4 	.word	0x200056f4
 801e9b4:	00051d00 	.word	0x00051d00
 801e9b8:	20091000 	.word	0x20091000
 801e9bc:	20055942 	.word	0x20055942
 801e9c0:	20009d14 	.word	0x20009d14
 801e9c4:	00018100 	.word	0x00018100
 801e9c8:	0006ca00 	.word	0x0006ca00
 801e9cc:	2000022a 	.word	0x2000022a
 801e9d0:	20095c60 	.word	0x20095c60
 801e9d4:	40001400 	.word	0x40001400
	HAL_Delay(1);
 801e9d8:	2001      	movs	r0, #1
 801e9da:	f7e2 fb27 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801e9de:	2037      	movs	r0, #55	; 0x37
 801e9e0:	f7e3 f812 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 801e9e4:	2046      	movs	r0, #70	; 0x46
 801e9e6:	f7e3 f80f 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e9ea:	2001      	movs	r0, #1
 801e9ec:	f7e2 fb1e 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start(&htim7);
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	f7e7 f9fb 	bl	8005dec <HAL_TIM_Base_Start>
	HAL_Delay(1);
 801e9f6:	2001      	movs	r0, #1
 801e9f8:	f7e2 fb18 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 801e9fc:	4620      	mov	r0, r4
 801e9fe:	f7e7 fa0f 	bl	8005e20 <HAL_TIM_Base_Start_IT>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801ea02:	4c91      	ldr	r4, [pc, #580]	; (801ec48 <main+0x1388>)
	uint8_t exp_stable = 0, start = 1;
 801ea04:	2301      	movs	r3, #1
	uint32_t cnt_delay = 0, scr_refresh = 0;
 801ea06:	463e      	mov	r6, r7
	uint8_t exp_stable = 0, start = 1;
 801ea08:	9303      	str	r3, [sp, #12]
 801ea0a:	46bb      	mov	fp, r7
	 if(send_bluetooth) 
 801ea0c:	4d8f      	ldr	r5, [pc, #572]	; (801ec4c <main+0x138c>)
	 usb_receive_processing();
 801ea0e:	f7fe fac5 	bl	801cf9c <usb_receive_processing>
	 if(send_bluetooth) 
 801ea12:	782b      	ldrb	r3, [r5, #0]
 801ea14:	b13b      	cbz	r3, 801ea26 <main+0x1166>
			HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*)&data_bluetooth_send, 4122);
 801ea16:	f241 021a 	movw	r2, #4122	; 0x101a
 801ea1a:	498d      	ldr	r1, [pc, #564]	; (801ec50 <main+0x1390>)
 801ea1c:	488d      	ldr	r0, [pc, #564]	; (801ec54 <main+0x1394>)
 801ea1e:	f7e7 fe33 	bl	8006688 <HAL_UART_Transmit_DMA>
			send_bluetooth = 0;
 801ea22:	2300      	movs	r3, #0
 801ea24:	702b      	strb	r3, [r5, #0]
 801ea26:	f8df a270 	ldr.w	sl, [pc, #624]	; 801ec98 <main+0x13d8>
		while(start)
 801ea2a:	9b03      	ldr	r3, [sp, #12]
 801ea2c:	1c75      	adds	r5, r6, #1
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d174      	bne.n	801eb1c <main+0x125c>
		if(!exp_set){
 801ea32:	4b89      	ldr	r3, [pc, #548]	; (801ec58 <main+0x1398>)
 801ea34:	781b      	ldrb	r3, [r3, #0]
 801ea36:	b993      	cbnz	r3, 801ea5e <main+0x119e>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ea38:	4b88      	ldr	r3, [pc, #544]	; (801ec5c <main+0x139c>)
 801ea3a:	4e89      	ldr	r6, [pc, #548]	; (801ec60 <main+0x13a0>)
 801ea3c:	4989      	ldr	r1, [pc, #548]	; (801ec64 <main+0x13a4>)
 801ea3e:	ed93 0a00 	vldr	s0, [r3]
 801ea42:	8830      	ldrh	r0, [r6, #0]
 801ea44:	f7fa fe50 	bl	80196e8 <Rabs_calc_Factor1>
 801ea48:	4b87      	ldr	r3, [pc, #540]	; (801ec68 <main+0x13a8>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801ea4a:	4a88      	ldr	r2, [pc, #544]	; (801ec6c <main+0x13ac>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ea4c:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801ea50:	edd9 0a00 	vldr	s1, [r9]
 801ea54:	4b86      	ldr	r3, [pc, #536]	; (801ec70 <main+0x13b0>)
 801ea56:	8831      	ldrh	r1, [r6, #0]
 801ea58:	4882      	ldr	r0, [pc, #520]	; (801ec64 <main+0x13a4>)
 801ea5a:	f7fa fe79 	bl	8019750 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801ea5e:	f89a 3000 	ldrb.w	r3, [sl]
 801ea62:	b92b      	cbnz	r3, 801ea70 <main+0x11b0>
 801ea64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ea68:	4981      	ldr	r1, [pc, #516]	; (801ec70 <main+0x13b0>)
 801ea6a:	4882      	ldr	r0, [pc, #520]	; (801ec74 <main+0x13b4>)
 801ea6c:	f000 ffb8 	bl	801f9e0 <memcpy>
			exp_start = 0;
 801ea70:	4b81      	ldr	r3, [pc, #516]	; (801ec78 <main+0x13b8>)
 801ea72:	2200      	movs	r2, #0
 801ea74:	701a      	strb	r2, [r3, #0]
		if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen) && !pause)
 801ea76:	f898 3000 	ldrb.w	r3, [r8]
 801ea7a:	1e5a      	subs	r2, r3, #1
 801ea7c:	2a02      	cmp	r2, #2
 801ea7e:	f200 80a6 	bhi.w	801ebce <main+0x130e>
 801ea82:	4b7e      	ldr	r3, [pc, #504]	; (801ec7c <main+0x13bc>)
 801ea84:	781b      	ldrb	r3, [r3, #0]
 801ea86:	2b00      	cmp	r3, #0
 801ea88:	f040 80c2 	bne.w	801ec10 <main+0x1350>
			if(!pause & !exp_set){Calculate_Data();}
 801ea8c:	4b72      	ldr	r3, [pc, #456]	; (801ec58 <main+0x1398>)
 801ea8e:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801ea90:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 801ea92:	b90b      	cbnz	r3, 801ea98 <main+0x11d8>
 801ea94:	f7fd ff06 	bl	801c8a4 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 801ea98:	2d28      	cmp	r5, #40	; 0x28
 801ea9a:	d908      	bls.n	801eaae <main+0x11ee>
 801ea9c:	7823      	ldrb	r3, [r4, #0]
 801ea9e:	2b05      	cmp	r3, #5
 801eaa0:	f200 8086 	bhi.w	801ebb0 <main+0x12f0>
								auto_exposure();
 801eaa4:	f7fe fc4e 	bl	801d344 <auto_exposure>
								max_el = 0;
 801eaa8:	4b75      	ldr	r3, [pc, #468]	; (801ec80 <main+0x13c0>)
 801eaaa:	2600      	movs	r6, #0
 801eaac:	801e      	strh	r6, [r3, #0]
        if(GUI_screen_state == Graph_Screen)
 801eaae:	f898 3000 	ldrb.w	r3, [r8]
 801eab2:	2b04      	cmp	r3, #4
 801eab4:	f040 80c6 	bne.w	801ec44 <main+0x1384>
            scr_refresh++;
 801eab8:	3701      	adds	r7, #1
            if(scr_refresh == 40 ){
 801eaba:	2f28      	cmp	r7, #40	; 0x28
 801eabc:	d12b      	bne.n	801eb16 <main+0x1256>
							block_graph = 1;
 801eabe:	2301      	movs	r3, #1
 801eac0:	f88a 3000 	strb.w	r3, [sl]
								if(preGUI_screen_state == Graph_Screen && Rotation_Screen_Spectral_Old3 == Rotation_Screen_Spectral){ Refresh_screen_Graph(20, 20, Line_Rabs_buff_graph2, Rotation_Screen_Spectral_Old3);}
 801eac4:	4b6f      	ldr	r3, [pc, #444]	; (801ec84 <main+0x13c4>)
 801eac6:	4d70      	ldr	r5, [pc, #448]	; (801ec88 <main+0x13c8>)
 801eac8:	781b      	ldrb	r3, [r3, #0]
 801eaca:	4f70      	ldr	r7, [pc, #448]	; (801ec8c <main+0x13cc>)
 801eacc:	2b04      	cmp	r3, #4
 801eace:	d108      	bne.n	801eae2 <main+0x1222>
 801ead0:	782a      	ldrb	r2, [r5, #0]
 801ead2:	783b      	ldrb	r3, [r7, #0]
 801ead4:	4293      	cmp	r3, r2
 801ead6:	d104      	bne.n	801eae2 <main+0x1222>
 801ead8:	2114      	movs	r1, #20
 801eada:	4a6d      	ldr	r2, [pc, #436]	; (801ec90 <main+0x13d0>)
 801eadc:	4608      	mov	r0, r1
 801eade:	f7fc fdc3 	bl	801b668 <Refresh_screen_Graph>
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801eae2:	7839      	ldrb	r1, [r7, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801eae4:	4863      	ldr	r0, [pc, #396]	; (801ec74 <main+0x13b4>)
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801eae6:	7029      	strb	r1, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801eae8:	f7fa fe9a 	bl	8019820 <Rabs_find_MAX>
 801eaec:	4b69      	ldr	r3, [pc, #420]	; (801ec94 <main+0x13d4>)
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801eaee:	4961      	ldr	r1, [pc, #388]	; (801ec74 <main+0x13b4>)
 801eaf0:	7828      	ldrb	r0, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801eaf2:	ed83 0a00 	vstr	s0, [r3]
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801eaf6:	f7fc fd65 	bl	801b5c4 <Rabs_graph_to_display>
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801eafa:	782b      	ldrb	r3, [r5, #0]
 801eafc:	9300      	str	r3, [sp, #0]
 801eafe:	2114      	movs	r1, #20
 801eb00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801eb04:	4a62      	ldr	r2, [pc, #392]	; (801ec90 <main+0x13d0>)
 801eb06:	4608      	mov	r0, r1
								block_graph = 0;
 801eb08:	2700      	movs	r7, #0
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801eb0a:	f7fc fba1 	bl	801b250 <Spectral_DrawGraph_Line2>
								block_graph = 0;
 801eb0e:	f88a 7000 	strb.w	r7, [sl]
								GUI_SignalLevel();
 801eb12:	f7f1 fb07 	bl	8010124 <GUI_SignalLevel>
        GUI_Display_Refresh();
 801eb16:	f7f2 f80f 	bl	8010b38 <GUI_Display_Refresh>
	 usb_receive_processing();
 801eb1a:	e777      	b.n	801ea0c <main+0x114c>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801eb1c:	4b4f      	ldr	r3, [pc, #316]	; (801ec5c <main+0x139c>)
 801eb1e:	4e50      	ldr	r6, [pc, #320]	; (801ec60 <main+0x13a0>)
 801eb20:	4950      	ldr	r1, [pc, #320]	; (801ec64 <main+0x13a4>)
 801eb22:	ed93 0a00 	vldr	s0, [r3]
 801eb26:	8830      	ldrh	r0, [r6, #0]
 801eb28:	f7fa fdde 	bl	80196e8 <Rabs_calc_Factor1>
 801eb2c:	4b4e      	ldr	r3, [pc, #312]	; (801ec68 <main+0x13a8>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801eb2e:	4a4f      	ldr	r2, [pc, #316]	; (801ec6c <main+0x13ac>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801eb30:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801eb34:	edd9 0a00 	vldr	s1, [r9]
 801eb38:	4b4d      	ldr	r3, [pc, #308]	; (801ec70 <main+0x13b0>)
 801eb3a:	8831      	ldrh	r1, [r6, #0]
 801eb3c:	4849      	ldr	r0, [pc, #292]	; (801ec64 <main+0x13a4>)
 801eb3e:	f7fa fe07 	bl	8019750 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801eb42:	f89a 3000 	ldrb.w	r3, [sl]
 801eb46:	b92b      	cbnz	r3, 801eb54 <main+0x1294>
 801eb48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801eb4c:	4948      	ldr	r1, [pc, #288]	; (801ec70 <main+0x13b0>)
 801eb4e:	4849      	ldr	r0, [pc, #292]	; (801ec74 <main+0x13b4>)
 801eb50:	f000 ff46 	bl	801f9e0 <memcpy>
			Calculate_Data();
 801eb54:	f7fd fea6 	bl	801c8a4 <Calculate_Data>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801eb58:	2d14      	cmp	r5, #20
			cnt_delay++;
 801eb5a:	462e      	mov	r6, r5
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801eb5c:	f67f af65 	bls.w	801ea2a <main+0x116a>
 801eb60:	7823      	ldrb	r3, [r4, #0]
 801eb62:	2b05      	cmp	r3, #5
 801eb64:	d910      	bls.n	801eb88 <main+0x12c8>
 801eb66:	2d32      	cmp	r5, #50	; 0x32
 801eb68:	f67f af5f 	bls.w	801ea2a <main+0x116a>
 801eb6c:	7823      	ldrb	r3, [r4, #0]
 801eb6e:	2b05      	cmp	r3, #5
 801eb70:	d902      	bls.n	801eb78 <main+0x12b8>
 801eb72:	7823      	ldrb	r3, [r4, #0]
 801eb74:	2b07      	cmp	r3, #7
 801eb76:	d907      	bls.n	801eb88 <main+0x12c8>
 801eb78:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 801eb7c:	f67f af55 	bls.w	801ea2a <main+0x116a>
 801eb80:	7823      	ldrb	r3, [r4, #0]
 801eb82:	2b07      	cmp	r3, #7
 801eb84:	f67f af51 	bls.w	801ea2a <main+0x116a>
								auto_exposure();
 801eb88:	f7fe fbdc 	bl	801d344 <auto_exposure>
								max_el = 0;
 801eb8c:	4b3c      	ldr	r3, [pc, #240]	; (801ec80 <main+0x13c0>)
 801eb8e:	2600      	movs	r6, #0
 801eb90:	801e      	strh	r6, [r3, #0]
								exp_stable = exp_stable+1;
 801eb92:	f10b 0301 	add.w	r3, fp, #1
 801eb96:	fa5f fb83 	uxtb.w	fp, r3
								exp_start = 1;
 801eb9a:	4b37      	ldr	r3, [pc, #220]	; (801ec78 <main+0x13b8>)
 801eb9c:	f1bb 0f0a 	cmp.w	fp, #10
 801eba0:	f04f 0201 	mov.w	r2, #1
 801eba4:	701a      	strb	r2, [r3, #0]
 801eba6:	bf8c      	ite	hi
 801eba8:	2300      	movhi	r3, #0
 801ebaa:	2301      	movls	r3, #1
 801ebac:	9303      	str	r3, [sp, #12]
 801ebae:	e73c      	b.n	801ea2a <main+0x116a>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 801ebb0:	2d46      	cmp	r5, #70	; 0x46
 801ebb2:	f67f af7c 	bls.w	801eaae <main+0x11ee>
 801ebb6:	7823      	ldrb	r3, [r4, #0]
 801ebb8:	2b05      	cmp	r3, #5
 801ebba:	d903      	bls.n	801ebc4 <main+0x1304>
 801ebbc:	7823      	ldrb	r3, [r4, #0]
 801ebbe:	2b07      	cmp	r3, #7
 801ebc0:	f67f af70 	bls.w	801eaa4 <main+0x11e4>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801ebc4:	7823      	ldrb	r3, [r4, #0]
 801ebc6:	2b07      	cmp	r3, #7
 801ebc8:	f63f af6c 	bhi.w	801eaa4 <main+0x11e4>
 801ebcc:	e76f      	b.n	801eaae <main+0x11ee>
		else	if((GUI_screen_state == Color_Screen) && !pause)
 801ebce:	2b05      	cmp	r3, #5
 801ebd0:	d11e      	bne.n	801ec10 <main+0x1350>
 801ebd2:	4b2a      	ldr	r3, [pc, #168]	; (801ec7c <main+0x13bc>)
 801ebd4:	781b      	ldrb	r3, [r3, #0]
 801ebd6:	b9db      	cbnz	r3, 801ec10 <main+0x1350>
			if(!pause & !exp_set){Calculate_Data();}
 801ebd8:	4b1f      	ldr	r3, [pc, #124]	; (801ec58 <main+0x1398>)
 801ebda:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801ebdc:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 801ebde:	bb7b      	cbnz	r3, 801ec40 <main+0x1380>
 801ebe0:	f7fd fe60 	bl	801c8a4 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801ebe4:	2d28      	cmp	r5, #40	; 0x28
 801ebe6:	f67f af62 	bls.w	801eaae <main+0x11ee>
 801ebea:	7823      	ldrb	r3, [r4, #0]
 801ebec:	2b05      	cmp	r3, #5
 801ebee:	f67f af59 	bls.w	801eaa4 <main+0x11e4>
 801ebf2:	2d46      	cmp	r5, #70	; 0x46
 801ebf4:	f67f af5b 	bls.w	801eaae <main+0x11ee>
 801ebf8:	7823      	ldrb	r3, [r4, #0]
 801ebfa:	2b05      	cmp	r3, #5
 801ebfc:	d903      	bls.n	801ec06 <main+0x1346>
 801ebfe:	7823      	ldrb	r3, [r4, #0]
 801ec00:	2b07      	cmp	r3, #7
 801ec02:	f67f af4f 	bls.w	801eaa4 <main+0x11e4>
 801ec06:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801ec0a:	f67f af50 	bls.w	801eaae <main+0x11ee>
 801ec0e:	e7d9      	b.n	801ebc4 <main+0x1304>
 801ec10:	2dfa      	cmp	r5, #250	; 0xfa
				cnt_delay++;
 801ec12:	462e      	mov	r6, r5
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801ec14:	f67f af4b 	bls.w	801eaae <main+0x11ee>
 801ec18:	7823      	ldrb	r3, [r4, #0]
 801ec1a:	2b05      	cmp	r3, #5
 801ec1c:	f67f af42 	bls.w	801eaa4 <main+0x11e4>
 801ec20:	f240 33b6 	movw	r3, #950	; 0x3b6
 801ec24:	429d      	cmp	r5, r3
 801ec26:	f67f af42 	bls.w	801eaae <main+0x11ee>
 801ec2a:	7823      	ldrb	r3, [r4, #0]
 801ec2c:	2b05      	cmp	r3, #5
 801ec2e:	d903      	bls.n	801ec38 <main+0x1378>
 801ec30:	7823      	ldrb	r3, [r4, #0]
 801ec32:	2b07      	cmp	r3, #7
 801ec34:	f67f af36 	bls.w	801eaa4 <main+0x11e4>
 801ec38:	f240 53aa 	movw	r3, #1450	; 0x5aa
 801ec3c:	429d      	cmp	r5, r3
 801ec3e:	e7e4      	b.n	801ec0a <main+0x134a>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801ec40:	2d28      	cmp	r5, #40	; 0x28
 801ec42:	d8d2      	bhi.n	801ebea <main+0x132a>
        } else{__asm("nop");}
 801ec44:	bf00      	nop
 801ec46:	e766      	b.n	801eb16 <main+0x1256>
 801ec48:	200905a6 	.word	0x200905a6
 801ec4c:	200905b8 	.word	0x200905b8
 801ec50:	2008f58c 	.word	0x2008f58c
 801ec54:	200958b0 	.word	0x200958b0
 801ec58:	20000ec0 	.word	0x20000ec0
 801ec5c:	2005192c 	.word	0x2005192c
 801ec60:	20009d12 	.word	0x20009d12
 801ec64:	2000e52c 	.word	0x2000e52c
 801ec68:	20009d20 	.word	0x20009d20
 801ec6c:	20051930 	.word	0x20051930
 801ec70:	2000c52c 	.word	0x2000c52c
 801ec74:	2000d52c 	.word	0x2000d52c
 801ec78:	20000ec1 	.word	0x20000ec1
 801ec7c:	20005718 	.word	0x20005718
 801ec80:	200905b4 	.word	0x200905b4
 801ec84:	2000022a 	.word	0x2000022a
 801ec88:	20000ebd 	.word	0x20000ebd
 801ec8c:	200056fa 	.word	0x200056fa
 801ec90:	20009a1e 	.word	0x20009a1e
 801ec94:	20095a90 	.word	0x20095a90
 801ec98:	20055941 	.word	0x20055941

0801ec9c <_Error_Handler>:
}
void _Error_Handler(char *file, int line)
{
 801ec9c:	e7fe      	b.n	801ec9c <_Error_Handler>
	...

0801eca0 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 801eca0:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 801eca2:	4c06      	ldr	r4, [pc, #24]	; (801ecbc <SD_CheckStatus.isra.0+0x1c>)
 801eca4:	2301      	movs	r3, #1
 801eca6:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801eca8:	f7fc ff40 	bl	801bb2c <BSP_SD_GetCardState>
 801ecac:	4623      	mov	r3, r4
 801ecae:	b918      	cbnz	r0, 801ecb8 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 801ecb0:	7822      	ldrb	r2, [r4, #0]
 801ecb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801ecb6:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 801ecb8:	7818      	ldrb	r0, [r3, #0]
}
 801ecba:	bd10      	pop	{r4, pc}
 801ecbc:	20000ec3 	.word	0x20000ec3

0801ecc0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801ecc0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801ecc2:	4c05      	ldr	r4, [pc, #20]	; (801ecd8 <SD_initialize+0x18>)
 801ecc4:	2301      	movs	r3, #1
 801ecc6:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801ecc8:	f7fc fef8 	bl	801babc <BSP_SD_Init>
 801eccc:	b910      	cbnz	r0, 801ecd4 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 801ecce:	f7ff ffe7 	bl	801eca0 <SD_CheckStatus.isra.0>
 801ecd2:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 801ecd4:	7820      	ldrb	r0, [r4, #0]
}
 801ecd6:	bd10      	pop	{r4, pc}
 801ecd8:	20000ec3 	.word	0x20000ec3

0801ecdc <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 801ecdc:	f7ff bfe0 	b.w	801eca0 <SD_CheckStatus.isra.0>

0801ece0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801ece0:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 801ece2:	4c16      	ldr	r4, [pc, #88]	; (801ed3c <SD_read+0x5c>)
{
 801ece4:	4608      	mov	r0, r1
 801ece6:	4611      	mov	r1, r2
  ReadStatus = 0;
 801ece8:	2200      	movs	r2, #0
 801ecea:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801ecec:	461a      	mov	r2, r3
 801ecee:	f7fc ff01 	bl	801baf4 <BSP_SD_ReadBlocks_DMA>
 801ecf2:	b108      	cbz	r0, 801ecf8 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 801ecf4:	2001      	movs	r0, #1
 801ecf6:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 801ecf8:	f7e2 f992 	bl	8001020 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801ecfc:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801ed00:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801ed02:	6823      	ldr	r3, [r4, #0]
 801ed04:	b19b      	cbz	r3, 801ed2e <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 801ed06:	6823      	ldr	r3, [r4, #0]
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d0f3      	beq.n	801ecf4 <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801ed10:	f7e2 f986 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801ed14:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801ed18:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801ed1a:	f7e2 f981 	bl	8001020 <HAL_GetTick>
 801ed1e:	1b40      	subs	r0, r0, r5
 801ed20:	42a0      	cmp	r0, r4
 801ed22:	d8e7      	bhi.n	801ecf4 <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801ed24:	f7fc ff02 	bl	801bb2c <BSP_SD_GetCardState>
 801ed28:	2800      	cmp	r0, #0
 801ed2a:	d1f6      	bne.n	801ed1a <SD_read+0x3a>
      }
    }
  }

  return res;
}
 801ed2c:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801ed2e:	f7e2 f977 	bl	8001020 <HAL_GetTick>
 801ed32:	1b80      	subs	r0, r0, r6
 801ed34:	42a8      	cmp	r0, r5
 801ed36:	d9e4      	bls.n	801ed02 <SD_read+0x22>
 801ed38:	e7e5      	b.n	801ed06 <SD_read+0x26>
 801ed3a:	bf00      	nop
 801ed3c:	200905bc 	.word	0x200905bc

0801ed40 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801ed40:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 801ed42:	4c16      	ldr	r4, [pc, #88]	; (801ed9c <SD_write+0x5c>)
{
 801ed44:	4608      	mov	r0, r1
 801ed46:	4611      	mov	r1, r2
  WriteStatus = 0;
 801ed48:	2200      	movs	r2, #0
 801ed4a:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801ed4c:	461a      	mov	r2, r3
 801ed4e:	f7fc fedf 	bl	801bb10 <BSP_SD_WriteBlocks_DMA>
 801ed52:	b108      	cbz	r0, 801ed58 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 801ed54:	2001      	movs	r0, #1
 801ed56:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 801ed58:	f7e2 f962 	bl	8001020 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801ed5c:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801ed60:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801ed62:	6823      	ldr	r3, [r4, #0]
 801ed64:	b19b      	cbz	r3, 801ed8e <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 801ed66:	6823      	ldr	r3, [r4, #0]
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d0f3      	beq.n	801ed54 <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 801ed6c:	2300      	movs	r3, #0
 801ed6e:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801ed70:	f7e2 f956 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801ed74:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801ed78:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801ed7a:	f7e2 f951 	bl	8001020 <HAL_GetTick>
 801ed7e:	1b40      	subs	r0, r0, r5
 801ed80:	42a0      	cmp	r0, r4
 801ed82:	d8e7      	bhi.n	801ed54 <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801ed84:	f7fc fed2 	bl	801bb2c <BSP_SD_GetCardState>
 801ed88:	2800      	cmp	r0, #0
 801ed8a:	d1f6      	bne.n	801ed7a <SD_write+0x3a>
      }
    }
  }

  return res;
}
 801ed8c:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801ed8e:	f7e2 f947 	bl	8001020 <HAL_GetTick>
 801ed92:	1b80      	subs	r0, r0, r6
 801ed94:	42a8      	cmp	r0, r5
 801ed96:	d9e4      	bls.n	801ed62 <SD_write+0x22>
 801ed98:	e7e5      	b.n	801ed66 <SD_write+0x26>
 801ed9a:	bf00      	nop
 801ed9c:	200905c0 	.word	0x200905c0

0801eda0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801eda0:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801eda2:	4b12      	ldr	r3, [pc, #72]	; (801edec <SD_ioctl+0x4c>)
 801eda4:	781b      	ldrb	r3, [r3, #0]
 801eda6:	07db      	lsls	r3, r3, #31
{
 801eda8:	b08a      	sub	sp, #40	; 0x28
 801edaa:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801edac:	d41b      	bmi.n	801ede6 <SD_ioctl+0x46>

  switch (cmd)
 801edae:	2903      	cmp	r1, #3
 801edb0:	d803      	bhi.n	801edba <SD_ioctl+0x1a>
 801edb2:	e8df f001 	tbb	[pc, r1]
 801edb6:	0510      	.short	0x0510
 801edb8:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 801edba:	2004      	movs	r0, #4
  }

  return res;
}
 801edbc:	b00a      	add	sp, #40	; 0x28
 801edbe:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801edc0:	a801      	add	r0, sp, #4
 801edc2:	f7fc febd 	bl	801bb40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801edc6:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801edc8:	6023      	str	r3, [r4, #0]
 801edca:	e004      	b.n	801edd6 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 801edcc:	a801      	add	r0, sp, #4
 801edce:	f7fc feb7 	bl	801bb40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801edd2:	9b08      	ldr	r3, [sp, #32]
 801edd4:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 801edd6:	2000      	movs	r0, #0
 801edd8:	e7f0      	b.n	801edbc <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 801edda:	a801      	add	r0, sp, #4
 801eddc:	f7fc feb0 	bl	801bb40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801ede0:	9b08      	ldr	r3, [sp, #32]
 801ede2:	0a5b      	lsrs	r3, r3, #9
 801ede4:	e7f0      	b.n	801edc8 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801ede6:	2003      	movs	r0, #3
 801ede8:	e7e8      	b.n	801edbc <SD_ioctl+0x1c>
 801edea:	bf00      	nop
 801edec:	20000ec3 	.word	0x20000ec3

0801edf0 <HAL_MspInit>:
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801edf0:	4b21      	ldr	r3, [pc, #132]	; (801ee78 <HAL_MspInit+0x88>)
{
 801edf2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801edf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801edf6:	f042 0201 	orr.w	r2, r2, #1
 801edfa:	661a      	str	r2, [r3, #96]	; 0x60
 801edfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801edfe:	f002 0201 	and.w	r2, r2, #1
 801ee02:	9200      	str	r2, [sp, #0]
 801ee04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801ee06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ee08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801ee0c:	659a      	str	r2, [r3, #88]	; 0x58
 801ee0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ee10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ee14:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801ee16:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 801ee18:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801ee1a:	f7e2 fdaf 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 801ee1e:	2200      	movs	r2, #0
 801ee20:	4611      	mov	r1, r2
 801ee22:	f06f 000b 	mvn.w	r0, #11
 801ee26:	f7e2 fdbb 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 801ee2a:	2200      	movs	r2, #0
 801ee2c:	4611      	mov	r1, r2
 801ee2e:	f06f 000a 	mvn.w	r0, #10
 801ee32:	f7e2 fdb5 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801ee36:	2200      	movs	r2, #0
 801ee38:	4611      	mov	r1, r2
 801ee3a:	f06f 0009 	mvn.w	r0, #9
 801ee3e:	f7e2 fdaf 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801ee42:	2200      	movs	r2, #0
 801ee44:	4611      	mov	r1, r2
 801ee46:	f06f 0004 	mvn.w	r0, #4
 801ee4a:	f7e2 fda9 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 801ee4e:	2200      	movs	r2, #0
 801ee50:	4611      	mov	r1, r2
 801ee52:	f06f 0003 	mvn.w	r0, #3
 801ee56:	f7e2 fda3 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 801ee5a:	2200      	movs	r2, #0
 801ee5c:	4611      	mov	r1, r2
 801ee5e:	f06f 0001 	mvn.w	r0, #1
 801ee62:	f7e2 fd9d 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801ee66:	2200      	movs	r2, #0
 801ee68:	4611      	mov	r1, r2
 801ee6a:	f04f 30ff 	mov.w	r0, #4294967295
 801ee6e:	f7e2 fd97 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ee72:	b003      	add	sp, #12
 801ee74:	f85d fb04 	ldr.w	pc, [sp], #4
 801ee78:	40021000 	.word	0x40021000

0801ee7c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 801ee7c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 801ee7e:	6802      	ldr	r2, [r0, #0]
 801ee80:	4b31      	ldr	r3, [pc, #196]	; (801ef48 <HAL_LTDC_MspInit+0xcc>)
 801ee82:	429a      	cmp	r2, r3
{
 801ee84:	b08a      	sub	sp, #40	; 0x28
  if(hltdc->Instance==LTDC)
 801ee86:	d15d      	bne.n	801ef44 <HAL_LTDC_MspInit+0xc8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801ee88:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ee8c:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 801ee8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801ee90:	482e      	ldr	r0, [pc, #184]	; (801ef4c <HAL_LTDC_MspInit+0xd0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 801ee92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801ee96:	661a      	str	r2, [r3, #96]	; 0x60
 801ee98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801ee9a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801ee9e:	9200      	str	r2, [sp, #0]
 801eea0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801eea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801eea4:	f042 0210 	orr.w	r2, r2, #16
 801eea8:	64da      	str	r2, [r3, #76]	; 0x4c
 801eeaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801eeac:	f002 0210 	and.w	r2, r2, #16
 801eeb0:	9201      	str	r2, [sp, #4]
 801eeb2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801eeb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801eeb6:	f042 0202 	orr.w	r2, r2, #2
 801eeba:	64da      	str	r2, [r3, #76]	; 0x4c
 801eebc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801eebe:	f002 0202 	and.w	r2, r2, #2
 801eec2:	9202      	str	r2, [sp, #8]
 801eec4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801eec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801eec8:	f042 0220 	orr.w	r2, r2, #32
 801eecc:	64da      	str	r2, [r3, #76]	; 0x4c
 801eece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801eed0:	f002 0220 	and.w	r2, r2, #32
 801eed4:	9203      	str	r2, [sp, #12]
 801eed6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801eed8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801eeda:	f042 0208 	orr.w	r2, r2, #8
 801eede:	64da      	str	r2, [r3, #76]	; 0x4c
 801eee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801eee2:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801eee4:	f003 0308 	and.w	r3, r3, #8
 801eee8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801eeea:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801eeec:	260b      	movs	r6, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801eeee:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801eef0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801eef2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801eef6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801eef8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801eefa:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801eefc:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801eefe:	f7e3 fae9 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801ef02:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ef04:	a905      	add	r1, sp, #20
 801ef06:	4812      	ldr	r0, [pc, #72]	; (801ef50 <HAL_LTDC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801ef08:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ef0a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ef0c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ef0e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801ef10:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ef12:	f7e3 fadf 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801ef16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ef1a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801ef1c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801ef1e:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801ef20:	480c      	ldr	r0, [pc, #48]	; (801ef54 <HAL_LTDC_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801ef22:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ef24:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ef26:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ef28:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801ef2a:	f7e3 fad3 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801ef2e:	f64d 730b 	movw	r3, #57099	; 0xdf0b
                          |GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801ef32:	a905      	add	r1, sp, #20
 801ef34:	4808      	ldr	r0, [pc, #32]	; (801ef58 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801ef36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ef38:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ef3a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ef3c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801ef3e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801ef40:	f7e3 fac8 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801ef44:	b00a      	add	sp, #40	; 0x28
 801ef46:	bd70      	pop	{r4, r5, r6, pc}
 801ef48:	40016800 	.word	0x40016800
 801ef4c:	48001000 	.word	0x48001000
 801ef50:	48000400 	.word	0x48000400
 801ef54:	48001400 	.word	0x48001400
 801ef58:	48000c00 	.word	0x48000c00

0801ef5c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801ef5c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 801ef5e:	6802      	ldr	r2, [r0, #0]
 801ef60:	4b13      	ldr	r3, [pc, #76]	; (801efb0 <HAL_SPI_MspInit+0x54>)
 801ef62:	429a      	cmp	r2, r3
{
 801ef64:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 801ef66:	d121      	bne.n	801efac <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801ef68:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ef6c:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 801ef6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801ef70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ef74:	661a      	str	r2, [r3, #96]	; 0x60
 801ef76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ef78:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 801ef7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ef7e:	9300      	str	r3, [sp, #0]
 801ef80:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 801ef82:	2342      	movs	r3, #66	; 0x42
 801ef84:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ef86:	2302      	movs	r3, #2
 801ef88:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ef8a:	2303      	movs	r3, #3
 801ef8c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ef8e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801ef90:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ef92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801ef96:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ef98:	f7e3 fa9c 	bl	80024d4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 801ef9c:	2023      	movs	r0, #35	; 0x23
 801ef9e:	4622      	mov	r2, r4
 801efa0:	4621      	mov	r1, r4
 801efa2:	f7e2 fcfd 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 801efa6:	2023      	movs	r0, #35	; 0x23
 801efa8:	f7e2 fd2e 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 801efac:	b006      	add	sp, #24
 801efae:	bd10      	pop	{r4, pc}
 801efb0:	40013000 	.word	0x40013000

0801efb4 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801efb4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==LPUART1)
 801efb6:	6802      	ldr	r2, [r0, #0]
 801efb8:	4b1f      	ldr	r3, [pc, #124]	; (801f038 <HAL_UART_MspInit+0x84>)
 801efba:	429a      	cmp	r2, r3
{
 801efbc:	b086      	sub	sp, #24
 801efbe:	4606      	mov	r6, r0
  if(huart->Instance==LPUART1)
 801efc0:	d137      	bne.n	801f032 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801efc2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801efc6:	2500      	movs	r5, #0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801efc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801efca:	481c      	ldr	r0, [pc, #112]	; (801f03c <HAL_UART_MspInit+0x88>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801efcc:	f042 0201 	orr.w	r2, r2, #1
 801efd0:	65da      	str	r2, [r3, #92]	; 0x5c
 801efd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801efd4:	9503      	str	r5, [sp, #12]
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801efd6:	f003 0301 	and.w	r3, r3, #1
 801efda:	9300      	str	r3, [sp, #0]
 801efdc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801efde:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801efe0:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801efe2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801efe4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801efe6:	2308      	movs	r3, #8
 801efe8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801efea:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801efec:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801efee:	f7e3 fa71 	bl	80024d4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 3);
 801eff2:	4622      	mov	r2, r4
 801eff4:	2101      	movs	r1, #1
 801eff6:	2046      	movs	r0, #70	; 0x46
 801eff8:	f7e2 fcd2 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 801effc:	2046      	movs	r0, #70	; 0x46
 801effe:	f7e2 fd03 	bl	8001a08 <HAL_NVIC_EnableIRQ>
		
		  /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 801f002:	4c0f      	ldr	r4, [pc, #60]	; (801f040 <HAL_UART_MspInit+0x8c>)
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801f004:	490f      	ldr	r1, [pc, #60]	; (801f044 <HAL_UART_MspInit+0x90>)
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801f006:	60e5      	str	r5, [r4, #12]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801f008:	2310      	movs	r3, #16
 801f00a:	2223      	movs	r2, #35	; 0x23
 801f00c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 801f010:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 801f012:	2380      	movs	r3, #128	; 0x80
 801f014:	6123      	str	r3, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801f016:	6165      	str	r5, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801f018:	61a5      	str	r5, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 801f01a:	61e5      	str	r5, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 801f01c:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 801f01e:	f7e2 fd81 	bl	8001b24 <HAL_DMA_Init>
 801f022:	b120      	cbz	r0, 801f02e <HAL_UART_MspInit+0x7a>
    {
      Error_Handler();
 801f024:	f240 1109 	movw	r1, #265	; 0x109
 801f028:	4807      	ldr	r0, [pc, #28]	; (801f048 <HAL_UART_MspInit+0x94>)
 801f02a:	f7ff fe37 	bl	801ec9c <_Error_Handler>
    }

		
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 801f02e:	67b4      	str	r4, [r6, #120]	; 0x78
 801f030:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 801f032:	b006      	add	sp, #24
 801f034:	bd70      	pop	{r4, r5, r6, pc}
 801f036:	bf00      	nop
 801f038:	40008000 	.word	0x40008000
 801f03c:	48000800 	.word	0x48000800
 801f040:	20095ad4 	.word	0x20095ad4
 801f044:	40020008 	.word	0x40020008
 801f048:	080314e8 	.word	0x080314e8

0801f04c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{

  if(huart->Instance==LPUART1)
 801f04c:	6802      	ldr	r2, [r0, #0]
 801f04e:	4b0b      	ldr	r3, [pc, #44]	; (801f07c <HAL_UART_MspDeInit+0x30>)
 801f050:	429a      	cmp	r2, r3
{
 801f052:	b510      	push	{r4, lr}
 801f054:	4604      	mov	r4, r0
  if(huart->Instance==LPUART1)
 801f056:	d110      	bne.n	801f07a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801f058:	4a09      	ldr	r2, [pc, #36]	; (801f080 <HAL_UART_MspDeInit+0x34>)
  
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801f05a:	480a      	ldr	r0, [pc, #40]	; (801f084 <HAL_UART_MspDeInit+0x38>)
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801f05c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801f05e:	f023 0301 	bic.w	r3, r3, #1
 801f062:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801f064:	2103      	movs	r1, #3
 801f066:	f7e3 fb0d 	bl	8002684 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 801f06a:	2046      	movs	r0, #70	; 0x46
 801f06c:	f7e2 fcd8 	bl	8001a20 <HAL_NVIC_DisableIRQ>
		/* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 801f070:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 801f072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmatx);
 801f076:	f7e2 bdc5 	b.w	8001c04 <HAL_DMA_DeInit>
 801f07a:	bd10      	pop	{r4, pc}
 801f07c:	40008000 	.word	0x40008000
 801f080:	40021000 	.word	0x40021000
 801f084:	48000800 	.word	0x48000800

0801f088 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801f088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 801f08a:	6802      	ldr	r2, [r0, #0]
 801f08c:	4b0e      	ldr	r3, [pc, #56]	; (801f0c8 <HAL_ADC_MspInit+0x40>)
 801f08e:	429a      	cmp	r2, r3
 801f090:	d116      	bne.n	801f0c0 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801f092:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 801f096:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f09a:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 801f09c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f09e:	480b      	ldr	r0, [pc, #44]	; (801f0cc <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 801f0a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f0a4:	64da      	str	r2, [r3, #76]	; 0x4c
 801f0a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f0a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801f0ac:	9300      	str	r3, [sp, #0]
 801f0ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801f0b0:	2304      	movs	r3, #4
 801f0b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801f0b4:	230b      	movs	r3, #11
 801f0b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f0b8:	2300      	movs	r3, #0
 801f0ba:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f0bc:	f7e3 fa0a 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801f0c0:	b007      	add	sp, #28
 801f0c2:	f85d fb04 	ldr.w	pc, [sp], #4
 801f0c6:	bf00      	nop
 801f0c8:	50040000 	.word	0x50040000
 801f0cc:	48000800 	.word	0x48000800

0801f0d0 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801f0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 801f0d2:	6803      	ldr	r3, [r0, #0]
 801f0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 801f0d8:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2)
 801f0da:	d112      	bne.n	801f102 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801f0dc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801f0e0:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 801f0e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f0e4:	f042 0201 	orr.w	r2, r2, #1
 801f0e8:	659a      	str	r2, [r3, #88]	; 0x58
 801f0ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801f0ec:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 801f0ee:	f003 0301 	and.w	r3, r3, #1
 801f0f2:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801f0f4:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 801f0f6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801f0f8:	f7e2 fc52 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801f0fc:	201c      	movs	r0, #28
 801f0fe:	f7e2 fc83 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
	
	if(htim_base->Instance==TIM7)
 801f102:	6822      	ldr	r2, [r4, #0]
 801f104:	4b20      	ldr	r3, [pc, #128]	; (801f188 <HAL_TIM_Base_MspInit+0xb8>)
 801f106:	429a      	cmp	r2, r3
 801f108:	d10d      	bne.n	801f126 <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 801f10a:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f10e:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 801f110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f112:	f042 0220 	orr.w	r2, r2, #32
 801f116:	659a      	str	r2, [r3, #88]	; 0x58
 801f118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f11a:	f003 0320 	and.w	r3, r3, #32
 801f11e:	9301      	str	r3, [sp, #4]
 801f120:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f122:	f7e2 fc71 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
	
	 if(htim_base->Instance==TIM4)
 801f126:	6822      	ldr	r2, [r4, #0]
 801f128:	4b18      	ldr	r3, [pc, #96]	; (801f18c <HAL_TIM_Base_MspInit+0xbc>)
 801f12a:	429a      	cmp	r2, r3
 801f12c:	d112      	bne.n	801f154 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801f12e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801f132:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 801f134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f136:	f042 0204 	orr.w	r2, r2, #4
 801f13a:	659a      	str	r2, [r3, #88]	; 0x58
 801f13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801f13e:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 801f140:	f003 0304 	and.w	r3, r3, #4
 801f144:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801f146:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 801f148:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801f14a:	f7e2 fc29 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801f14e:	201e      	movs	r0, #30
 801f150:	f7e2 fc5a 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
	}
		if(htim_base->Instance==TIM6)
 801f154:	6822      	ldr	r2, [r4, #0]
 801f156:	4b0e      	ldr	r3, [pc, #56]	; (801f190 <HAL_TIM_Base_MspInit+0xc0>)
 801f158:	429a      	cmp	r2, r3
 801f15a:	d112      	bne.n	801f182 <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801f15c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801f160:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 801f162:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f164:	f042 0210 	orr.w	r2, r2, #16
 801f168:	659a      	str	r2, [r3, #88]	; 0x58
 801f16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f16c:	f003 0310 	and.w	r3, r3, #16
 801f170:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801f172:	2200      	movs	r2, #0
 801f174:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 801f176:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801f178:	f7e2 fc12 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801f17c:	2036      	movs	r0, #54	; 0x36
 801f17e:	f7e2 fc43 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 801f182:	b004      	add	sp, #16
 801f184:	bd10      	pop	{r4, pc}
 801f186:	bf00      	nop
 801f188:	40001400 	.word	0x40001400
 801f18c:	40000800 	.word	0x40000800
 801f190:	40001000 	.word	0x40001000

0801f194 <HAL_TIM_OC_MspInit>:


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 801f194:	b507      	push	{r0, r1, r2, lr}

  if(htim_oc->Instance==TIM5)
 801f196:	4b0d      	ldr	r3, [pc, #52]	; (801f1cc <HAL_TIM_OC_MspInit+0x38>)
 801f198:	6802      	ldr	r2, [r0, #0]
 801f19a:	429a      	cmp	r2, r3
 801f19c:	d112      	bne.n	801f1c4 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 801f19e:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801f1a2:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 801f1a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f1a6:	f042 0208 	orr.w	r2, r2, #8
 801f1aa:	659a      	str	r2, [r3, #88]	; 0x58
 801f1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801f1ae:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 801f1b0:	f003 0308 	and.w	r3, r3, #8
 801f1b4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801f1b6:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 801f1b8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801f1ba:	f7e2 fbf1 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801f1be:	2032      	movs	r0, #50	; 0x32
 801f1c0:	f7e2 fc22 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 801f1c4:	b003      	add	sp, #12
 801f1c6:	f85d fb04 	ldr.w	pc, [sp], #4
 801f1ca:	bf00      	nop
 801f1cc:	40000c00 	.word	0x40000c00

0801f1d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801f1d0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 801f1d2:	6802      	ldr	r2, [r0, #0]
 801f1d4:	4b19      	ldr	r3, [pc, #100]	; (801f23c <HAL_TIM_MspPostInit+0x6c>)
 801f1d6:	429a      	cmp	r2, r3
{
 801f1d8:	b086      	sub	sp, #24
 801f1da:	4604      	mov	r4, r0
  if(htim->Instance==TIM5)
 801f1dc:	d10c      	bne.n	801f1f8 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM5_MspPostInit 0 */
  
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801f1de:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f1e0:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801f1e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f1e4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f1e6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f1e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f1ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f1ee:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f1f0:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801f1f2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f1f4:	f7e3 f96e 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

  if(htim->Instance==TIM15)
 801f1f8:	6822      	ldr	r2, [r4, #0]
 801f1fa:	4b11      	ldr	r3, [pc, #68]	; (801f240 <HAL_TIM_MspPostInit+0x70>)
 801f1fc:	429a      	cmp	r2, r3
 801f1fe:	d11a      	bne.n	801f236 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801f200:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801f204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801f20a:	64da      	str	r2, [r3, #76]	; 0x4c
 801f20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f212:	9300      	str	r3, [sp, #0]
 801f214:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableVddIO2();
 801f216:	f7e4 fe3b 	bl	8003e90 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration    
    PG11     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801f21a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f21e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f220:	2302      	movs	r3, #2
 801f222:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f224:	2300      	movs	r3, #0
 801f226:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f228:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801f22a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 801f22c:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801f22e:	4805      	ldr	r0, [pc, #20]	; (801f244 <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 801f230:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801f232:	f7e3 f94f 	bl	80024d4 <HAL_GPIO_Init>
	}
}
 801f236:	b006      	add	sp, #24
 801f238:	bd10      	pop	{r4, pc}
 801f23a:	bf00      	nop
 801f23c:	40000c00 	.word	0x40000c00
 801f240:	40014000 	.word	0x40014000
 801f244:	48001800 	.word	0x48001800

0801f248 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 801f248:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 801f24a:	4b0d      	ldr	r3, [pc, #52]	; (801f280 <HAL_DMA2D_MspInit+0x38>)
 801f24c:	6802      	ldr	r2, [r0, #0]
 801f24e:	429a      	cmp	r2, r3
 801f250:	d112      	bne.n	801f278 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801f252:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801f256:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801f258:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f25a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801f25e:	649a      	str	r2, [r3, #72]	; 0x48
 801f260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801f262:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801f264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f268:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801f26a:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801f26c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801f26e:	f7e2 fb97 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801f272:	205a      	movs	r0, #90	; 0x5a
 801f274:	f7e2 fbc8 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 801f278:	b003      	add	sp, #12
 801f27a:	f85d fb04 	ldr.w	pc, [sp], #4
 801f27e:	bf00      	nop
 801f280:	4002b000 	.word	0x4002b000

0801f284 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801f284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 801f286:	6802      	ldr	r2, [r0, #0]
 801f288:	4b17      	ldr	r3, [pc, #92]	; (801f2e8 <HAL_I2C_MspInit+0x64>)
 801f28a:	429a      	cmp	r2, r3
 801f28c:	d128      	bne.n	801f2e0 <HAL_I2C_MspInit+0x5c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801f28e:	23c0      	movs	r3, #192	; 0xc0
 801f290:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801f292:	2312      	movs	r3, #18
 801f294:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801f296:	2301      	movs	r3, #1
 801f298:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f29a:	2303      	movs	r3, #3
 801f29c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801f29e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801f2a0:	eb0d 0103 	add.w	r1, sp, r3
 801f2a4:	4811      	ldr	r0, [pc, #68]	; (801f2ec <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801f2a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801f2a8:	f7e3 f914 	bl	80024d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801f2ac:	4b10      	ldr	r3, [pc, #64]	; (801f2f0 <HAL_I2C_MspInit+0x6c>)
 801f2ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f2b0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801f2b4:	659a      	str	r2, [r3, #88]	; 0x58
 801f2b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801f2b8:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 801f2ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801f2be:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 801f2c0:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801f2c2:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 801f2c4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801f2c6:	f7e2 fb6b 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 801f2ca:	201f      	movs	r0, #31
 801f2cc:	f7e2 fb9c 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 801f2d0:	2200      	movs	r2, #0
 801f2d2:	2020      	movs	r0, #32
 801f2d4:	4611      	mov	r1, r2
 801f2d6:	f7e2 fb63 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 801f2da:	2020      	movs	r0, #32
 801f2dc:	f7e2 fb94 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 801f2e0:	b007      	add	sp, #28
 801f2e2:	f85d fb04 	ldr.w	pc, [sp], #4
 801f2e6:	bf00      	nop
 801f2e8:	40005400 	.word	0x40005400
 801f2ec:	48000400 	.word	0x48000400
 801f2f0:	40021000 	.word	0x40021000

0801f2f4 <HAL_SD_MspInit>:

}


void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 801f2f4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 801f2f6:	6802      	ldr	r2, [r0, #0]
 801f2f8:	4b18      	ldr	r3, [pc, #96]	; (801f35c <HAL_SD_MspInit+0x68>)
 801f2fa:	429a      	cmp	r2, r3
{
 801f2fc:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 801f2fe:	d12b      	bne.n	801f358 <HAL_SD_MspInit+0x64>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801f300:	4b17      	ldr	r3, [pc, #92]	; (801f360 <HAL_SD_MspInit+0x6c>)
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f302:	4818      	ldr	r0, [pc, #96]	; (801f364 <HAL_SD_MspInit+0x70>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801f304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f306:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801f30a:	64da      	str	r2, [r3, #76]	; 0x4c
 801f30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f30e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f312:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f314:	2400      	movs	r4, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801f316:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f318:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f31a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f31e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f320:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801f322:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f324:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f326:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f328:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f32a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801f32c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f32e:	f7e3 f8d1 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801f332:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801f334:	eb0d 0103 	add.w	r1, sp, r3
 801f338:	480b      	ldr	r0, [pc, #44]	; (801f368 <HAL_SD_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801f33a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f33c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f33e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f340:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801f342:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801f344:	f7e3 f8c6 	bl	80024d4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 801f348:	2031      	movs	r0, #49	; 0x31
 801f34a:	4622      	mov	r2, r4
 801f34c:	4621      	mov	r1, r4
 801f34e:	f7e2 fb27 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 801f352:	2031      	movs	r0, #49	; 0x31
 801f354:	f7e2 fb58 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 801f358:	b007      	add	sp, #28
 801f35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f35c:	50062400 	.word	0x50062400
 801f360:	40021000 	.word	0x40021000
 801f364:	48000800 	.word	0x48000800
 801f368:	48000c00 	.word	0x48000c00

0801f36c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 801f36c:	6802      	ldr	r2, [r0, #0]
 801f36e:	4b08      	ldr	r3, [pc, #32]	; (801f390 <HAL_TIM_PWM_MspInit+0x24>)
 801f370:	429a      	cmp	r2, r3
{
 801f372:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM15)
 801f374:	d10a      	bne.n	801f38c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 801f376:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801f37a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f37c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801f380:	661a      	str	r2, [r3, #96]	; 0x60
 801f382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801f388:	9301      	str	r3, [sp, #4]
 801f38a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 801f38c:	b002      	add	sp, #8
 801f38e:	4770      	bx	lr
 801f390:	40014000 	.word	0x40014000

0801f394 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 801f394:	b508      	push	{r3, lr}

  if(hsd->Instance==SDMMC1)
 801f396:	6802      	ldr	r2, [r0, #0]
 801f398:	4b0b      	ldr	r3, [pc, #44]	; (801f3c8 <HAL_SD_MspDeInit+0x34>)
 801f39a:	429a      	cmp	r2, r3
 801f39c:	d112      	bne.n	801f3c4 <HAL_SD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 801f39e:	4a0b      	ldr	r2, [pc, #44]	; (801f3cc <HAL_SD_MspDeInit+0x38>)
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f3a0:	480b      	ldr	r0, [pc, #44]	; (801f3d0 <HAL_SD_MspDeInit+0x3c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 801f3a2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801f3a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 801f3a8:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f3aa:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 801f3ae:	f7e3 f969 	bl	8002684 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 801f3b2:	4808      	ldr	r0, [pc, #32]	; (801f3d4 <HAL_SD_MspDeInit+0x40>)
 801f3b4:	2104      	movs	r1, #4
 801f3b6:	f7e3 f965 	bl	8002684 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 801f3ba:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 801f3bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 801f3c0:	f7e2 bb2e 	b.w	8001a20 <HAL_NVIC_DisableIRQ>
 801f3c4:	bd08      	pop	{r3, pc}
 801f3c6:	bf00      	nop
 801f3c8:	50062400 	.word	0x50062400
 801f3cc:	40021000 	.word	0x40021000
 801f3d0:	48000800 	.word	0x48000800
 801f3d4:	48000c00 	.word	0x48000c00

0801f3d8 <DMA1_Channel1_IRQHandler>:
*/

void DMA1_Channel1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 801f3d8:	4801      	ldr	r0, [pc, #4]	; (801f3e0 <DMA1_Channel1_IRQHandler+0x8>)
 801f3da:	f7e2 bce4 	b.w	8001da6 <HAL_DMA_IRQHandler>
 801f3de:	bf00      	nop
 801f3e0:	20095ad4 	.word	0x20095ad4

0801f3e4 <NMI_Handler>:
 801f3e4:	4770      	bx	lr

0801f3e6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 801f3e6:	e7fe      	b.n	801f3e6 <HardFault_Handler>

0801f3e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 801f3e8:	e7fe      	b.n	801f3e8 <MemManage_Handler>

0801f3ea <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 801f3ea:	e7fe      	b.n	801f3ea <BusFault_Handler>

0801f3ec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 801f3ec:	e7fe      	b.n	801f3ec <UsageFault_Handler>

0801f3ee <SVC_Handler>:
 801f3ee:	4770      	bx	lr

0801f3f0 <DebugMon_Handler>:
 801f3f0:	4770      	bx	lr

0801f3f2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 801f3f2:	4770      	bx	lr

0801f3f4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 801f3f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801f3f6:	f7e1 fe0b 	bl	8001010 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801f3fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 801f3fe:	f7e2 bb4e 	b.w	8001a9e <HAL_SYSTICK_IRQHandler>
	...

0801f404 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 801f404:	4801      	ldr	r0, [pc, #4]	; (801f40c <SPI1_IRQHandler+0x8>)
 801f406:	f7e6 bb47 	b.w	8005a98 <HAL_SPI_IRQHandler>
 801f40a:	bf00      	nop
 801f40c:	20095bac 	.word	0x20095bac

0801f410 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 801f410:	4801      	ldr	r0, [pc, #4]	; (801f418 <TIM5_IRQHandler+0x8>)
 801f412:	f7e6 bd22 	b.w	8005e5a <HAL_TIM_IRQHandler>
 801f416:	bf00      	nop
 801f418:	2009584c 	.word	0x2009584c

0801f41c <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 801f41c:	4801      	ldr	r0, [pc, #4]	; (801f424 <LPUART1_IRQHandler+0x8>)
 801f41e:	f7e7 b9bb 	b.w	8006798 <HAL_UART_IRQHandler>
 801f422:	bf00      	nop
 801f424:	200958b0 	.word	0x200958b0

0801f428 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 801f428:	4801      	ldr	r0, [pc, #4]	; (801f430 <OTG_FS_IRQHandler+0x8>)
 801f42a:	f7e4 b89d 	b.w	8003568 <HAL_PCD_IRQHandler>
 801f42e:	bf00      	nop
 801f430:	20095f44 	.word	0x20095f44

0801f434 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 801f434:	4801      	ldr	r0, [pc, #4]	; (801f43c <I2C1_EV_IRQHandler+0x8>)
 801f436:	f7e3 bc23 	b.w	8002c80 <HAL_I2C_EV_IRQHandler>
 801f43a:	bf00      	nop
 801f43c:	20095718 	.word	0x20095718

0801f440 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 801f440:	4801      	ldr	r0, [pc, #4]	; (801f448 <I2C1_ER_IRQHandler+0x8>)
 801f442:	f7e3 be33 	b.w	80030ac <HAL_I2C_ER_IRQHandler>
 801f446:	bf00      	nop
 801f448:	20095718 	.word	0x20095718

0801f44c <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 801f44c:	4801      	ldr	r0, [pc, #4]	; (801f454 <SDMMC1_IRQHandler+0x8>)
 801f44e:	f7e5 be01 	b.w	8005054 <HAL_SD_IRQHandler>
 801f452:	bf00      	nop
 801f454:	200957b8 	.word	0x200957b8

0801f458 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 801f458:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801f45a:	4b0a      	ldr	r3, [pc, #40]	; (801f484 <_sbrk+0x2c>)
 801f45c:	6819      	ldr	r1, [r3, #0]
{
 801f45e:	4602      	mov	r2, r0
	if (heap_end == 0)
 801f460:	b909      	cbnz	r1, 801f466 <_sbrk+0xe>
		heap_end = &end;
 801f462:	4909      	ldr	r1, [pc, #36]	; (801f488 <_sbrk+0x30>)
 801f464:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 801f466:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 801f468:	4669      	mov	r1, sp
 801f46a:	4402      	add	r2, r0
 801f46c:	428a      	cmp	r2, r1
 801f46e:	d906      	bls.n	801f47e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801f470:	f000 fa8c 	bl	801f98c <__errno>
 801f474:	230c      	movs	r3, #12
 801f476:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 801f478:	f04f 30ff 	mov.w	r0, #4294967295
 801f47c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 801f47e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 801f480:	bd08      	pop	{r3, pc}
 801f482:	bf00      	nop
 801f484:	200905c4 	.word	0x200905c4
 801f488:	2009655c 	.word	0x2009655c

0801f48c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801f48c:	490f      	ldr	r1, [pc, #60]	; (801f4cc <SystemInit+0x40>)
 801f48e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801f492:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801f496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801f49a:	4b0d      	ldr	r3, [pc, #52]	; (801f4d0 <SystemInit+0x44>)
 801f49c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801f49e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 801f4a0:	f042 0201 	orr.w	r2, r2, #1
 801f4a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 801f4a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801f4a8:	681a      	ldr	r2, [r3, #0]
 801f4aa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 801f4ae:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 801f4b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801f4b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f4b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801f4ba:	681a      	ldr	r2, [r3, #0]
 801f4bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801f4c0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 801f4c2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801f4c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801f4c8:	608b      	str	r3, [r1, #8]
 801f4ca:	4770      	bx	lr
 801f4cc:	e000ed00 	.word	0xe000ed00
 801f4d0:	40021000 	.word	0x40021000

0801f4d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f4d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 801f4d6:	2200      	movs	r2, #0
 801f4d8:	490a      	ldr	r1, [pc, #40]	; (801f504 <MX_USB_DEVICE_Init+0x30>)
 801f4da:	480b      	ldr	r0, [pc, #44]	; (801f508 <MX_USB_DEVICE_Init+0x34>)
 801f4dc:	f7e8 fdf9 	bl	80080d2 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 801f4e0:	490a      	ldr	r1, [pc, #40]	; (801f50c <MX_USB_DEVICE_Init+0x38>)
 801f4e2:	4809      	ldr	r0, [pc, #36]	; (801f508 <MX_USB_DEVICE_Init+0x34>)
 801f4e4:	f7e8 fe0a 	bl	80080fc <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 801f4e8:	4909      	ldr	r1, [pc, #36]	; (801f510 <MX_USB_DEVICE_Init+0x3c>)
 801f4ea:	4807      	ldr	r0, [pc, #28]	; (801f508 <MX_USB_DEVICE_Init+0x34>)
 801f4ec:	f7e8 fdea 	bl	80080c4 <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 801f4f0:	4805      	ldr	r0, [pc, #20]	; (801f508 <MX_USB_DEVICE_Init+0x34>)
 801f4f2:	f000 f9ac 	bl	801f84e <USBD_LL_BatteryCharging>
 801f4f6:	b120      	cbz	r0, 801f502 <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 801f4f8:	4803      	ldr	r0, [pc, #12]	; (801f508 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f4fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 801f4fe:	f7e8 be04 	b.w	800810a <USBD_Start>
 801f502:	bd08      	pop	{r3, pc}
 801f504:	20000efc 	.word	0x20000efc
 801f508:	20095ca8 	.word	0x20095ca8
 801f50c:	20000020 	.word	0x20000020
 801f510:	20000eec 	.word	0x20000eec

0801f514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801f514:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 801f516:	6803      	ldr	r3, [r0, #0]
 801f518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801f51c:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 801f51e:	d133      	bne.n	801f588 <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801f520:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801f524:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f526:	2302      	movs	r3, #2
 801f528:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f52a:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f52c:	4c19      	ldr	r4, [pc, #100]	; (801f594 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f52e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f530:	2303      	movs	r3, #3
 801f532:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f534:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f536:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f53c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f53e:	f7e2 ffc9 	bl	80024d4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f542:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801f544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801f548:	64e3      	str	r3, [r4, #76]	; 0x4c
 801f54a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801f54c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801f550:	9301      	str	r3, [sp, #4]
 801f552:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f554:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f556:	00db      	lsls	r3, r3, #3
 801f558:	d418      	bmi.n	801f58c <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f55a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f55c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f560:	65a3      	str	r3, [r4, #88]	; 0x58
 801f562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f568:	9302      	str	r3, [sp, #8]
 801f56a:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 801f56c:	f7e4 fc88 	bl	8003e80 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801f570:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801f576:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801f578:	2200      	movs	r2, #0
 801f57a:	2043      	movs	r0, #67	; 0x43
 801f57c:	4611      	mov	r1, r2
 801f57e:	f7e2 fa0f 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f582:	2043      	movs	r0, #67	; 0x43
 801f584:	f7e2 fa40 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f588:	b008      	add	sp, #32
 801f58a:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 801f58c:	f7e4 fc78 	bl	8003e80 <HAL_PWREx_EnableVddUSB>
 801f590:	e7f2      	b.n	801f578 <HAL_PCD_MspInit+0x64>
 801f592:	bf00      	nop
 801f594:	40021000 	.word	0x40021000

0801f598 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f598:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 801f59c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f5a0:	f7e8 bdca 	b.w	8008138 <USBD_LL_SetupStage>

0801f5a4 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f5a4:	231c      	movs	r3, #28
 801f5a6:	fb03 0301 	mla	r3, r3, r1, r0
 801f5aa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f5ae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801f5b2:	f7e8 bdee 	b.w	8008192 <USBD_LL_DataOutStage>

0801f5b6 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f5b6:	231c      	movs	r3, #28
 801f5b8:	fb03 0301 	mla	r3, r3, r1, r0
 801f5bc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f5c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f5c2:	f7e8 be1e 	b.w	8008202 <USBD_LL_DataInStage>

0801f5c6 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f5c6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f5ca:	f7e8 beaf 	b.w	800832c <USBD_LL_SOF>

0801f5ce <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 801f5ce:	b510      	push	{r4, lr}
 801f5d0:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f5d2:	2101      	movs	r1, #1
 801f5d4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f5d8:	f7e8 fe96 	bl	8008308 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f5dc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 801f5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f5e4:	f7e8 be69 	b.w	80082ba <USBD_LL_Reset>

0801f5e8 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f5e8:	6802      	ldr	r2, [r0, #0]
 801f5ea:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 801f5ee:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f5f0:	f043 0301 	orr.w	r3, r3, #1
{
 801f5f4:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f5f6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f5fa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f5fe:	f7e8 fe86 	bl	800830e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f602:	6a23      	ldr	r3, [r4, #32]
 801f604:	b123      	cbz	r3, 801f610 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f606:	4a03      	ldr	r2, [pc, #12]	; (801f614 <HAL_PCD_SuspendCallback+0x2c>)
 801f608:	6913      	ldr	r3, [r2, #16]
 801f60a:	f043 0306 	orr.w	r3, r3, #6
 801f60e:	6113      	str	r3, [r2, #16]
 801f610:	bd10      	pop	{r4, pc}
 801f612:	bf00      	nop
 801f614:	e000ed00 	.word	0xe000ed00

0801f618 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f618:	6802      	ldr	r2, [r0, #0]
 801f61a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f61e:	f023 0301 	bic.w	r3, r3, #1
{
 801f622:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f624:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801f628:	6a03      	ldr	r3, [r0, #32]
{
 801f62a:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 801f62c:	b133      	cbz	r3, 801f63c <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f62e:	4a06      	ldr	r2, [pc, #24]	; (801f648 <HAL_PCD_ResumeCallback+0x30>)
 801f630:	6913      	ldr	r3, [r2, #16]
 801f632:	f023 0306 	bic.w	r3, r3, #6
 801f636:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 801f638:	f7fe f8d4 	bl	801d7e4 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f63c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 801f640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f644:	f7e8 be6c 	b.w	8008320 <USBD_LL_Resume>
 801f648:	e000ed00 	.word	0xe000ed00

0801f64c <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f64c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f650:	f7e8 be7a 	b.w	8008348 <USBD_LL_IsoOUTIncomplete>

0801f654 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f654:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f658:	f7e8 be74 	b.w	8008344 <USBD_LL_IsoINIncomplete>

0801f65c <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801f65c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f660:	f7e8 be74 	b.w	800834c <USBD_LL_DevConnected>

0801f664 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801f664:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801f668:	f7e8 be72 	b.w	8008350 <USBD_LL_DevDisconnected>

0801f66c <USBD_LL_Init>:
{
 801f66c:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 801f66e:	7802      	ldrb	r2, [r0, #0]
 801f670:	bb4a      	cbnz	r2, 801f6c6 <USBD_LL_Init+0x5a>
  hpcd_USB_OTG_FS.pData = pdev;
 801f672:	4b16      	ldr	r3, [pc, #88]	; (801f6cc <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f674:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 801f676:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801f67a:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f67e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801f682:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801f686:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f688:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 801f68a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801f68c:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801f68e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801f690:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801f692:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801f694:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801f696:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801f698:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f69a:	f7e3 fed2 	bl	8003442 <HAL_PCD_Init>
 801f69e:	b120      	cbz	r0, 801f6aa <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 801f6a0:	f240 116b 	movw	r1, #363	; 0x16b
 801f6a4:	480a      	ldr	r0, [pc, #40]	; (801f6d0 <USBD_LL_Init+0x64>)
 801f6a6:	f7ff faf9 	bl	801ec9c <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801f6aa:	2180      	movs	r1, #128	; 0x80
 801f6ac:	4807      	ldr	r0, [pc, #28]	; (801f6cc <USBD_LL_Init+0x60>)
 801f6ae:	f7e4 fb59 	bl	8003d64 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801f6b2:	2240      	movs	r2, #64	; 0x40
 801f6b4:	2100      	movs	r1, #0
 801f6b6:	4805      	ldr	r0, [pc, #20]	; (801f6cc <USBD_LL_Init+0x60>)
 801f6b8:	f7e4 fb33 	bl	8003d22 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801f6bc:	2280      	movs	r2, #128	; 0x80
 801f6be:	2101      	movs	r1, #1
 801f6c0:	4802      	ldr	r0, [pc, #8]	; (801f6cc <USBD_LL_Init+0x60>)
 801f6c2:	f7e4 fb2e 	bl	8003d22 <HAL_PCDEx_SetTxFiFo>
}
 801f6c6:	2000      	movs	r0, #0
 801f6c8:	bd08      	pop	{r3, pc}
 801f6ca:	bf00      	nop
 801f6cc:	20095f44 	.word	0x20095f44
 801f6d0:	08031550 	.word	0x08031550

0801f6d4 <USBD_LL_Start>:
{
 801f6d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 801f6d6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f6da:	f7e3 ff2f 	bl	800353c <HAL_PCD_Start>
 801f6de:	2803      	cmp	r0, #3
 801f6e0:	bf9a      	itte	ls
 801f6e2:	4b02      	ldrls	r3, [pc, #8]	; (801f6ec <USBD_LL_Start+0x18>)
 801f6e4:	5c18      	ldrbls	r0, [r3, r0]
 801f6e6:	2002      	movhi	r0, #2
}
 801f6e8:	bd08      	pop	{r3, pc}
 801f6ea:	bf00      	nop
 801f6ec:	0803154c 	.word	0x0803154c

0801f6f0 <USBD_LL_OpenEP>:
{
 801f6f0:	b510      	push	{r4, lr}
 801f6f2:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f6f4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f6f8:	4613      	mov	r3, r2
 801f6fa:	4622      	mov	r2, r4
 801f6fc:	f7e4 fa0e 	bl	8003b1c <HAL_PCD_EP_Open>
 801f700:	2803      	cmp	r0, #3
 801f702:	bf9a      	itte	ls
 801f704:	4b01      	ldrls	r3, [pc, #4]	; (801f70c <USBD_LL_OpenEP+0x1c>)
 801f706:	5c18      	ldrbls	r0, [r3, r0]
 801f708:	2002      	movhi	r0, #2
}
 801f70a:	bd10      	pop	{r4, pc}
 801f70c:	0803154c 	.word	0x0803154c

0801f710 <USBD_LL_CloseEP>:
{
 801f710:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f712:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f716:	f7e4 fa36 	bl	8003b86 <HAL_PCD_EP_Close>
 801f71a:	2803      	cmp	r0, #3
 801f71c:	bf9a      	itte	ls
 801f71e:	4b02      	ldrls	r3, [pc, #8]	; (801f728 <USBD_LL_CloseEP+0x18>)
 801f720:	5c18      	ldrbls	r0, [r3, r0]
 801f722:	2002      	movhi	r0, #2
}
 801f724:	bd08      	pop	{r3, pc}
 801f726:	bf00      	nop
 801f728:	0803154c 	.word	0x0803154c

0801f72c <USBD_LL_StallEP>:
{
 801f72c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f72e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f732:	f7e4 fa8b 	bl	8003c4c <HAL_PCD_EP_SetStall>
 801f736:	2803      	cmp	r0, #3
 801f738:	bf9a      	itte	ls
 801f73a:	4b02      	ldrls	r3, [pc, #8]	; (801f744 <USBD_LL_StallEP+0x18>)
 801f73c:	5c18      	ldrbls	r0, [r3, r0]
 801f73e:	2002      	movhi	r0, #2
}
 801f740:	bd08      	pop	{r3, pc}
 801f742:	bf00      	nop
 801f744:	0803154c 	.word	0x0803154c

0801f748 <USBD_LL_ClearStallEP>:
{
 801f748:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 801f74a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f74e:	f7e4 fab6 	bl	8003cbe <HAL_PCD_EP_ClrStall>
 801f752:	2803      	cmp	r0, #3
 801f754:	bf9a      	itte	ls
 801f756:	4b02      	ldrls	r3, [pc, #8]	; (801f760 <USBD_LL_ClearStallEP+0x18>)
 801f758:	5c18      	ldrbls	r0, [r3, r0]
 801f75a:	2002      	movhi	r0, #2
}
 801f75c:	bd08      	pop	{r3, pc}
 801f75e:	bf00      	nop
 801f760:	0803154c 	.word	0x0803154c

0801f764 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 801f764:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801f768:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801f76c:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801f770:	bf1b      	ittet	ne
 801f772:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 801f776:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801f77a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801f77e:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801f782:	bf08      	it	eq
 801f784:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 801f788:	4770      	bx	lr
	...

0801f78c <USBD_LL_SetUSBAddress>:
{
 801f78c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f78e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f792:	f7e4 f9af 	bl	8003af4 <HAL_PCD_SetAddress>
 801f796:	2803      	cmp	r0, #3
 801f798:	bf9a      	itte	ls
 801f79a:	4b02      	ldrls	r3, [pc, #8]	; (801f7a4 <USBD_LL_SetUSBAddress+0x18>)
 801f79c:	5c18      	ldrbls	r0, [r3, r0]
 801f79e:	2002      	movhi	r0, #2
}
 801f7a0:	bd08      	pop	{r3, pc}
 801f7a2:	bf00      	nop
 801f7a4:	0803154c 	.word	0x0803154c

0801f7a8 <USBD_LL_Transmit>:
{
 801f7a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f7aa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f7ae:	f7e4 fa32 	bl	8003c16 <HAL_PCD_EP_Transmit>
 801f7b2:	2803      	cmp	r0, #3
 801f7b4:	bf9a      	itte	ls
 801f7b6:	4b02      	ldrls	r3, [pc, #8]	; (801f7c0 <USBD_LL_Transmit+0x18>)
 801f7b8:	5c18      	ldrbls	r0, [r3, r0]
 801f7ba:	2002      	movhi	r0, #2
}
 801f7bc:	bd08      	pop	{r3, pc}
 801f7be:	bf00      	nop
 801f7c0:	0803154c 	.word	0x0803154c

0801f7c4 <USBD_LL_PrepareReceive>:
{
 801f7c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f7c6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801f7ca:	f7e4 fa06 	bl	8003bda <HAL_PCD_EP_Receive>
 801f7ce:	2803      	cmp	r0, #3
 801f7d0:	bf9a      	itte	ls
 801f7d2:	4b02      	ldrls	r3, [pc, #8]	; (801f7dc <USBD_LL_PrepareReceive+0x18>)
 801f7d4:	5c18      	ldrbls	r0, [r3, r0]
 801f7d6:	2002      	movhi	r0, #2
}
 801f7d8:	bd08      	pop	{r3, pc}
 801f7da:	bf00      	nop
 801f7dc:	0803154c 	.word	0x0803154c

0801f7e0 <HAL_PCDEx_LPM_Callback>:
{
 801f7e0:	b510      	push	{r4, lr}
 801f7e2:	4604      	mov	r4, r0
  switch (msg)
 801f7e4:	b111      	cbz	r1, 801f7ec <HAL_PCDEx_LPM_Callback+0xc>
 801f7e6:	2901      	cmp	r1, #1
 801f7e8:	d016      	beq.n	801f818 <HAL_PCDEx_LPM_Callback+0x38>
 801f7ea:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 801f7ec:	6a03      	ldr	r3, [r0, #32]
 801f7ee:	b133      	cbz	r3, 801f7fe <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 801f7f0:	f7fd fff8 	bl	801d7e4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f7f4:	4a12      	ldr	r2, [pc, #72]	; (801f840 <HAL_PCDEx_LPM_Callback+0x60>)
 801f7f6:	6913      	ldr	r3, [r2, #16]
 801f7f8:	f023 0306 	bic.w	r3, r3, #6
 801f7fc:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f7fe:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 801f800:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f804:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f808:	f023 0301 	bic.w	r3, r3, #1
 801f80c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 801f810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 801f814:	f7e8 bd84 	b.w	8008320 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f818:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 801f81a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f81e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f822:	f043 0301 	orr.w	r3, r3, #1
 801f826:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 801f82a:	f7e8 fd70 	bl	800830e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801f82e:	6a23      	ldr	r3, [r4, #32]
 801f830:	b123      	cbz	r3, 801f83c <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f832:	4a03      	ldr	r2, [pc, #12]	; (801f840 <HAL_PCDEx_LPM_Callback+0x60>)
 801f834:	6913      	ldr	r3, [r2, #16]
 801f836:	f043 0306 	orr.w	r3, r3, #6
 801f83a:	6113      	str	r3, [r2, #16]
 801f83c:	bd10      	pop	{r4, pc}
 801f83e:	bf00      	nop
 801f840:	e000ed00 	.word	0xe000ed00

0801f844 <USBD_static_malloc>:
}
 801f844:	4800      	ldr	r0, [pc, #0]	; (801f848 <USBD_static_malloc+0x4>)
 801f846:	4770      	bx	lr
 801f848:	200905c8 	.word	0x200905c8

0801f84c <USBD_static_free>:
{
 801f84c:	4770      	bx	lr

0801f84e <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 801f84e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801f852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f854:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 801f856:	bf14      	ite	ne
 801f858:	2002      	movne	r0, #2
 801f85a:	2000      	moveq	r0, #0
 801f85c:	4770      	bx	lr

0801f85e <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 801f85e:	2000      	movs	r0, #0
 801f860:	4770      	bx	lr
	...

0801f864 <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 801f864:	4b05      	ldr	r3, [pc, #20]	; (801f87c <CUSTOM_HID_OutEvent_FS+0x18>)
 
  for (uint8_t i = 0; i < 12; i++)
  {
    dataToReceive[i] = hhid->Report_buf[i];
 801f866:	4a06      	ldr	r2, [pc, #24]	; (801f880 <CUSTOM_HID_OutEvent_FS+0x1c>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 801f868:	f8d3 0290 	ldr.w	r0, [r3, #656]	; 0x290
 801f86c:	2300      	movs	r3, #0
    dataToReceive[i] = hhid->Report_buf[i];
 801f86e:	5cc1      	ldrb	r1, [r0, r3]
 801f870:	5499      	strb	r1, [r3, r2]
 801f872:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 12; i++)
 801f874:	2b0c      	cmp	r3, #12
 801f876:	d1fa      	bne.n	801f86e <CUSTOM_HID_OutEvent_FS+0xa>
  }
 
 
  return (USBD_OK);
}
 801f878:	2000      	movs	r0, #0
 801f87a:	4770      	bx	lr
 801f87c:	20095ca8 	.word	0x20095ca8
 801f880:	2008f540 	.word	0x2008f540

0801f884 <CUSTOM_HID_Init_FS>:
 801f884:	2000      	movs	r0, #0
 801f886:	4770      	bx	lr

0801f888 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 801f888:	2312      	movs	r3, #18
 801f88a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 801f88c:	4800      	ldr	r0, [pc, #0]	; (801f890 <USBD_FS_DeviceDescriptor+0x8>)
 801f88e:	4770      	bx	lr
 801f890:	20000f28 	.word	0x20000f28

0801f894 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 801f894:	2304      	movs	r3, #4
 801f896:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 801f898:	4800      	ldr	r0, [pc, #0]	; (801f89c <USBD_FS_LangIDStrDescriptor+0x8>)
 801f89a:	4770      	bx	lr
 801f89c:	20000f3c 	.word	0x20000f3c

0801f8a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 801f8a0:	230c      	movs	r3, #12
 801f8a2:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 801f8a4:	4800      	ldr	r0, [pc, #0]	; (801f8a8 <USBD_FS_USR_BOSDescriptor+0x8>)
 801f8a6:	4770      	bx	lr
 801f8a8:	20000f1c 	.word	0x20000f1c

0801f8ac <USBD_FS_ManufacturerStrDescriptor>:
{
 801f8ac:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f8ae:	4c04      	ldr	r4, [pc, #16]	; (801f8c0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 801f8b0:	4804      	ldr	r0, [pc, #16]	; (801f8c4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801f8b2:	460a      	mov	r2, r1
 801f8b4:	4621      	mov	r1, r4
 801f8b6:	f7e8 ff57 	bl	8008768 <USBD_GetString>
}
 801f8ba:	4620      	mov	r0, r4
 801f8bc:	bd10      	pop	{r4, pc}
 801f8be:	bf00      	nop
 801f8c0:	2009634c 	.word	0x2009634c
 801f8c4:	0803158a 	.word	0x0803158a

0801f8c8 <USBD_FS_ProductStrDescriptor>:
{
 801f8c8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f8ca:	4c04      	ldr	r4, [pc, #16]	; (801f8dc <USBD_FS_ProductStrDescriptor+0x14>)
 801f8cc:	4804      	ldr	r0, [pc, #16]	; (801f8e0 <USBD_FS_ProductStrDescriptor+0x18>)
 801f8ce:	460a      	mov	r2, r1
 801f8d0:	4621      	mov	r1, r4
 801f8d2:	f7e8 ff49 	bl	8008768 <USBD_GetString>
}
 801f8d6:	4620      	mov	r0, r4
 801f8d8:	bd10      	pop	{r4, pc}
 801f8da:	bf00      	nop
 801f8dc:	2009634c 	.word	0x2009634c
 801f8e0:	08031591 	.word	0x08031591

0801f8e4 <USBD_FS_SerialStrDescriptor>:
{
 801f8e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 801f8e6:	4c04      	ldr	r4, [pc, #16]	; (801f8f8 <USBD_FS_SerialStrDescriptor+0x14>)
 801f8e8:	4804      	ldr	r0, [pc, #16]	; (801f8fc <USBD_FS_SerialStrDescriptor+0x18>)
 801f8ea:	460a      	mov	r2, r1
 801f8ec:	4621      	mov	r1, r4
 801f8ee:	f7e8 ff3b 	bl	8008768 <USBD_GetString>
}
 801f8f2:	4620      	mov	r0, r4
 801f8f4:	bd10      	pop	{r4, pc}
 801f8f6:	bf00      	nop
 801f8f8:	2009634c 	.word	0x2009634c
 801f8fc:	080315af 	.word	0x080315af

0801f900 <USBD_FS_ConfigStrDescriptor>:
{
 801f900:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f902:	4c04      	ldr	r4, [pc, #16]	; (801f914 <USBD_FS_ConfigStrDescriptor+0x14>)
 801f904:	4804      	ldr	r0, [pc, #16]	; (801f918 <USBD_FS_ConfigStrDescriptor+0x18>)
 801f906:	460a      	mov	r2, r1
 801f908:	4621      	mov	r1, r4
 801f90a:	f7e8 ff2d 	bl	8008768 <USBD_GetString>
}
 801f90e:	4620      	mov	r0, r4
 801f910:	bd10      	pop	{r4, pc}
 801f912:	bf00      	nop
 801f914:	2009634c 	.word	0x2009634c
 801f918:	08031563 	.word	0x08031563

0801f91c <USBD_FS_InterfaceStrDescriptor>:
{
 801f91c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f91e:	4c04      	ldr	r4, [pc, #16]	; (801f930 <USBD_FS_InterfaceStrDescriptor+0x14>)
 801f920:	4804      	ldr	r0, [pc, #16]	; (801f934 <USBD_FS_InterfaceStrDescriptor+0x18>)
 801f922:	460a      	mov	r2, r1
 801f924:	4621      	mov	r1, r4
 801f926:	f7e8 ff1f 	bl	8008768 <USBD_GetString>
}
 801f92a:	4620      	mov	r0, r4
 801f92c:	bd10      	pop	{r4, pc}
 801f92e:	bf00      	nop
 801f930:	2009634c 	.word	0x2009634c
 801f934:	08031575 	.word	0x08031575

0801f938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801f938:	f8df d034 	ldr.w	sp, [pc, #52]	; 801f970 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801f93c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801f93e:	e003      	b.n	801f948 <LoopCopyDataInit>

0801f940 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 801f940:	4b0c      	ldr	r3, [pc, #48]	; (801f974 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801f942:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801f944:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801f946:	3104      	adds	r1, #4

0801f948 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801f948:	480b      	ldr	r0, [pc, #44]	; (801f978 <LoopForever+0xa>)
	ldr	r3, =_edata
 801f94a:	4b0c      	ldr	r3, [pc, #48]	; (801f97c <LoopForever+0xe>)
	adds	r2, r0, r1
 801f94c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801f94e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 801f950:	d3f6      	bcc.n	801f940 <CopyDataInit>
	ldr	r2, =_sbss
 801f952:	4a0b      	ldr	r2, [pc, #44]	; (801f980 <LoopForever+0x12>)
	b	LoopFillZerobss
 801f954:	e002      	b.n	801f95c <LoopFillZerobss>

0801f956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801f956:	2300      	movs	r3, #0
	str	r3, [r2], #4
 801f958:	f842 3b04 	str.w	r3, [r2], #4

0801f95c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801f95c:	4b09      	ldr	r3, [pc, #36]	; (801f984 <LoopForever+0x16>)
	cmp	r2, r3
 801f95e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801f960:	d3f9      	bcc.n	801f956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801f962:	f7ff fd93 	bl	801f48c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801f966:	f000 f817 	bl	801f998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801f96a:	f7fd ffa9 	bl	801d8c0 <main>

0801f96e <LoopForever>:

LoopForever:
    b LoopForever
 801f96e:	e7fe      	b.n	801f96e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801f970:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 801f974:	080318b8 	.word	0x080318b8
	ldr	r0, =_sdata
 801f978:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801f97c:	200015b4 	.word	0x200015b4
	ldr	r2, =_sbss
 801f980:	200015b8 	.word	0x200015b8
	ldr	r3, = _ebss
 801f984:	2009655c 	.word	0x2009655c

0801f988 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801f988:	e7fe      	b.n	801f988 <ADC1_IRQHandler>
	...

0801f98c <__errno>:
 801f98c:	4b01      	ldr	r3, [pc, #4]	; (801f994 <__errno+0x8>)
 801f98e:	6818      	ldr	r0, [r3, #0]
 801f990:	4770      	bx	lr
 801f992:	bf00      	nop
 801f994:	20000f40 	.word	0x20000f40

0801f998 <__libc_init_array>:
 801f998:	b570      	push	{r4, r5, r6, lr}
 801f99a:	4e0d      	ldr	r6, [pc, #52]	; (801f9d0 <__libc_init_array+0x38>)
 801f99c:	4c0d      	ldr	r4, [pc, #52]	; (801f9d4 <__libc_init_array+0x3c>)
 801f99e:	1ba4      	subs	r4, r4, r6
 801f9a0:	10a4      	asrs	r4, r4, #2
 801f9a2:	2500      	movs	r5, #0
 801f9a4:	42a5      	cmp	r5, r4
 801f9a6:	d109      	bne.n	801f9bc <__libc_init_array+0x24>
 801f9a8:	4e0b      	ldr	r6, [pc, #44]	; (801f9d8 <__libc_init_array+0x40>)
 801f9aa:	4c0c      	ldr	r4, [pc, #48]	; (801f9dc <__libc_init_array+0x44>)
 801f9ac:	f004 fdfc 	bl	80245a8 <_init>
 801f9b0:	1ba4      	subs	r4, r4, r6
 801f9b2:	10a4      	asrs	r4, r4, #2
 801f9b4:	2500      	movs	r5, #0
 801f9b6:	42a5      	cmp	r5, r4
 801f9b8:	d105      	bne.n	801f9c6 <__libc_init_array+0x2e>
 801f9ba:	bd70      	pop	{r4, r5, r6, pc}
 801f9bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f9c0:	4798      	blx	r3
 801f9c2:	3501      	adds	r5, #1
 801f9c4:	e7ee      	b.n	801f9a4 <__libc_init_array+0xc>
 801f9c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f9ca:	4798      	blx	r3
 801f9cc:	3501      	adds	r5, #1
 801f9ce:	e7f2      	b.n	801f9b6 <__libc_init_array+0x1e>
 801f9d0:	080318b0 	.word	0x080318b0
 801f9d4:	080318b0 	.word	0x080318b0
 801f9d8:	080318b0 	.word	0x080318b0
 801f9dc:	080318b4 	.word	0x080318b4

0801f9e0 <memcpy>:
 801f9e0:	b510      	push	{r4, lr}
 801f9e2:	1e43      	subs	r3, r0, #1
 801f9e4:	440a      	add	r2, r1
 801f9e6:	4291      	cmp	r1, r2
 801f9e8:	d100      	bne.n	801f9ec <memcpy+0xc>
 801f9ea:	bd10      	pop	{r4, pc}
 801f9ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f9f4:	e7f7      	b.n	801f9e6 <memcpy+0x6>

0801f9f6 <memset>:
 801f9f6:	4402      	add	r2, r0
 801f9f8:	4603      	mov	r3, r0
 801f9fa:	4293      	cmp	r3, r2
 801f9fc:	d100      	bne.n	801fa00 <memset+0xa>
 801f9fe:	4770      	bx	lr
 801fa00:	f803 1b01 	strb.w	r1, [r3], #1
 801fa04:	e7f9      	b.n	801f9fa <memset+0x4>
	...

0801fa08 <sprintf>:
 801fa08:	b40e      	push	{r1, r2, r3}
 801fa0a:	b500      	push	{lr}
 801fa0c:	b09c      	sub	sp, #112	; 0x70
 801fa0e:	f44f 7102 	mov.w	r1, #520	; 0x208
 801fa12:	ab1d      	add	r3, sp, #116	; 0x74
 801fa14:	f8ad 1014 	strh.w	r1, [sp, #20]
 801fa18:	9002      	str	r0, [sp, #8]
 801fa1a:	9006      	str	r0, [sp, #24]
 801fa1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fa20:	480a      	ldr	r0, [pc, #40]	; (801fa4c <sprintf+0x44>)
 801fa22:	9104      	str	r1, [sp, #16]
 801fa24:	9107      	str	r1, [sp, #28]
 801fa26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fa2a:	f853 2b04 	ldr.w	r2, [r3], #4
 801fa2e:	f8ad 1016 	strh.w	r1, [sp, #22]
 801fa32:	6800      	ldr	r0, [r0, #0]
 801fa34:	9301      	str	r3, [sp, #4]
 801fa36:	a902      	add	r1, sp, #8
 801fa38:	f000 f822 	bl	801fa80 <_svfprintf_r>
 801fa3c:	9b02      	ldr	r3, [sp, #8]
 801fa3e:	2200      	movs	r2, #0
 801fa40:	701a      	strb	r2, [r3, #0]
 801fa42:	b01c      	add	sp, #112	; 0x70
 801fa44:	f85d eb04 	ldr.w	lr, [sp], #4
 801fa48:	b003      	add	sp, #12
 801fa4a:	4770      	bx	lr
 801fa4c:	20000f40 	.word	0x20000f40

0801fa50 <strcat>:
 801fa50:	b510      	push	{r4, lr}
 801fa52:	4602      	mov	r2, r0
 801fa54:	4613      	mov	r3, r2
 801fa56:	3201      	adds	r2, #1
 801fa58:	781c      	ldrb	r4, [r3, #0]
 801fa5a:	2c00      	cmp	r4, #0
 801fa5c:	d1fa      	bne.n	801fa54 <strcat+0x4>
 801fa5e:	3b01      	subs	r3, #1
 801fa60:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fa64:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fa68:	2a00      	cmp	r2, #0
 801fa6a:	d1f9      	bne.n	801fa60 <strcat+0x10>
 801fa6c:	bd10      	pop	{r4, pc}

0801fa6e <strcpy>:
 801fa6e:	4603      	mov	r3, r0
 801fa70:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fa74:	f803 2b01 	strb.w	r2, [r3], #1
 801fa78:	2a00      	cmp	r2, #0
 801fa7a:	d1f9      	bne.n	801fa70 <strcpy+0x2>
 801fa7c:	4770      	bx	lr
	...

0801fa80 <_svfprintf_r>:
 801fa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa84:	b0bd      	sub	sp, #244	; 0xf4
 801fa86:	468a      	mov	sl, r1
 801fa88:	4615      	mov	r5, r2
 801fa8a:	461f      	mov	r7, r3
 801fa8c:	4683      	mov	fp, r0
 801fa8e:	f001 fe25 	bl	80216dc <_localeconv_r>
 801fa92:	6803      	ldr	r3, [r0, #0]
 801fa94:	930d      	str	r3, [sp, #52]	; 0x34
 801fa96:	4618      	mov	r0, r3
 801fa98:	f7e0 fc02 	bl	80002a0 <strlen>
 801fa9c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801faa0:	9008      	str	r0, [sp, #32]
 801faa2:	061b      	lsls	r3, r3, #24
 801faa4:	d518      	bpl.n	801fad8 <_svfprintf_r+0x58>
 801faa6:	f8da 3010 	ldr.w	r3, [sl, #16]
 801faaa:	b9ab      	cbnz	r3, 801fad8 <_svfprintf_r+0x58>
 801faac:	2140      	movs	r1, #64	; 0x40
 801faae:	4658      	mov	r0, fp
 801fab0:	f001 fe2a 	bl	8021708 <_malloc_r>
 801fab4:	f8ca 0000 	str.w	r0, [sl]
 801fab8:	f8ca 0010 	str.w	r0, [sl, #16]
 801fabc:	b948      	cbnz	r0, 801fad2 <_svfprintf_r+0x52>
 801fabe:	230c      	movs	r3, #12
 801fac0:	f8cb 3000 	str.w	r3, [fp]
 801fac4:	f04f 33ff 	mov.w	r3, #4294967295
 801fac8:	9309      	str	r3, [sp, #36]	; 0x24
 801faca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801facc:	b03d      	add	sp, #244	; 0xf4
 801face:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fad2:	2340      	movs	r3, #64	; 0x40
 801fad4:	f8ca 3014 	str.w	r3, [sl, #20]
 801fad8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 801fd40 <_svfprintf_r+0x2c0>
 801fadc:	ed8d 7b06 	vstr	d7, [sp, #24]
 801fae0:	2300      	movs	r3, #0
 801fae2:	ac2c      	add	r4, sp, #176	; 0xb0
 801fae4:	941f      	str	r4, [sp, #124]	; 0x7c
 801fae6:	9321      	str	r3, [sp, #132]	; 0x84
 801fae8:	9320      	str	r3, [sp, #128]	; 0x80
 801faea:	9505      	str	r5, [sp, #20]
 801faec:	9303      	str	r3, [sp, #12]
 801faee:	9311      	str	r3, [sp, #68]	; 0x44
 801faf0:	9310      	str	r3, [sp, #64]	; 0x40
 801faf2:	9309      	str	r3, [sp, #36]	; 0x24
 801faf4:	9d05      	ldr	r5, [sp, #20]
 801faf6:	462b      	mov	r3, r5
 801faf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fafc:	b112      	cbz	r2, 801fb04 <_svfprintf_r+0x84>
 801fafe:	2a25      	cmp	r2, #37	; 0x25
 801fb00:	f040 8083 	bne.w	801fc0a <_svfprintf_r+0x18a>
 801fb04:	9b05      	ldr	r3, [sp, #20]
 801fb06:	1aee      	subs	r6, r5, r3
 801fb08:	d00d      	beq.n	801fb26 <_svfprintf_r+0xa6>
 801fb0a:	e884 0048 	stmia.w	r4, {r3, r6}
 801fb0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fb10:	4433      	add	r3, r6
 801fb12:	9321      	str	r3, [sp, #132]	; 0x84
 801fb14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fb16:	3301      	adds	r3, #1
 801fb18:	2b07      	cmp	r3, #7
 801fb1a:	9320      	str	r3, [sp, #128]	; 0x80
 801fb1c:	dc77      	bgt.n	801fc0e <_svfprintf_r+0x18e>
 801fb1e:	3408      	adds	r4, #8
 801fb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb22:	4433      	add	r3, r6
 801fb24:	9309      	str	r3, [sp, #36]	; 0x24
 801fb26:	782b      	ldrb	r3, [r5, #0]
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	f000 8729 	beq.w	8020980 <_svfprintf_r+0xf00>
 801fb2e:	2300      	movs	r3, #0
 801fb30:	1c69      	adds	r1, r5, #1
 801fb32:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801fb36:	461a      	mov	r2, r3
 801fb38:	f04f 39ff 	mov.w	r9, #4294967295
 801fb3c:	930a      	str	r3, [sp, #40]	; 0x28
 801fb3e:	461d      	mov	r5, r3
 801fb40:	200a      	movs	r0, #10
 801fb42:	1c4e      	adds	r6, r1, #1
 801fb44:	7809      	ldrb	r1, [r1, #0]
 801fb46:	9605      	str	r6, [sp, #20]
 801fb48:	9102      	str	r1, [sp, #8]
 801fb4a:	9902      	ldr	r1, [sp, #8]
 801fb4c:	3920      	subs	r1, #32
 801fb4e:	2958      	cmp	r1, #88	; 0x58
 801fb50:	f200 8418 	bhi.w	8020384 <_svfprintf_r+0x904>
 801fb54:	e8df f011 	tbh	[pc, r1, lsl #1]
 801fb58:	041600a6 	.word	0x041600a6
 801fb5c:	00ab0416 	.word	0x00ab0416
 801fb60:	04160416 	.word	0x04160416
 801fb64:	04160416 	.word	0x04160416
 801fb68:	04160416 	.word	0x04160416
 801fb6c:	006500ae 	.word	0x006500ae
 801fb70:	00b70416 	.word	0x00b70416
 801fb74:	041600ba 	.word	0x041600ba
 801fb78:	00da00d7 	.word	0x00da00d7
 801fb7c:	00da00da 	.word	0x00da00da
 801fb80:	00da00da 	.word	0x00da00da
 801fb84:	00da00da 	.word	0x00da00da
 801fb88:	00da00da 	.word	0x00da00da
 801fb8c:	04160416 	.word	0x04160416
 801fb90:	04160416 	.word	0x04160416
 801fb94:	04160416 	.word	0x04160416
 801fb98:	04160416 	.word	0x04160416
 801fb9c:	04160416 	.word	0x04160416
 801fba0:	012b0115 	.word	0x012b0115
 801fba4:	012b0416 	.word	0x012b0416
 801fba8:	04160416 	.word	0x04160416
 801fbac:	04160416 	.word	0x04160416
 801fbb0:	041600ed 	.word	0x041600ed
 801fbb4:	03400416 	.word	0x03400416
 801fbb8:	04160416 	.word	0x04160416
 801fbbc:	04160416 	.word	0x04160416
 801fbc0:	03a80416 	.word	0x03a80416
 801fbc4:	04160416 	.word	0x04160416
 801fbc8:	04160086 	.word	0x04160086
 801fbcc:	04160416 	.word	0x04160416
 801fbd0:	04160416 	.word	0x04160416
 801fbd4:	04160416 	.word	0x04160416
 801fbd8:	04160416 	.word	0x04160416
 801fbdc:	01070416 	.word	0x01070416
 801fbe0:	012b006b 	.word	0x012b006b
 801fbe4:	012b012b 	.word	0x012b012b
 801fbe8:	006b00f0 	.word	0x006b00f0
 801fbec:	04160416 	.word	0x04160416
 801fbf0:	041600fa 	.word	0x041600fa
 801fbf4:	03420322 	.word	0x03420322
 801fbf8:	01010376 	.word	0x01010376
 801fbfc:	03870416 	.word	0x03870416
 801fc00:	03aa0416 	.word	0x03aa0416
 801fc04:	04160416 	.word	0x04160416
 801fc08:	03c2      	.short	0x03c2
 801fc0a:	461d      	mov	r5, r3
 801fc0c:	e773      	b.n	801faf6 <_svfprintf_r+0x76>
 801fc0e:	aa1f      	add	r2, sp, #124	; 0x7c
 801fc10:	4651      	mov	r1, sl
 801fc12:	4658      	mov	r0, fp
 801fc14:	f002 fa72 	bl	80220fc <__ssprint_r>
 801fc18:	2800      	cmp	r0, #0
 801fc1a:	f040 8692 	bne.w	8020942 <_svfprintf_r+0xec2>
 801fc1e:	ac2c      	add	r4, sp, #176	; 0xb0
 801fc20:	e77e      	b.n	801fb20 <_svfprintf_r+0xa0>
 801fc22:	2301      	movs	r3, #1
 801fc24:	222b      	movs	r2, #43	; 0x2b
 801fc26:	9905      	ldr	r1, [sp, #20]
 801fc28:	e78b      	b.n	801fb42 <_svfprintf_r+0xc2>
 801fc2a:	460f      	mov	r7, r1
 801fc2c:	e7fb      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fc2e:	b10b      	cbz	r3, 801fc34 <_svfprintf_r+0x1b4>
 801fc30:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801fc34:	06ae      	lsls	r6, r5, #26
 801fc36:	f140 80aa 	bpl.w	801fd8e <_svfprintf_r+0x30e>
 801fc3a:	3707      	adds	r7, #7
 801fc3c:	f027 0707 	bic.w	r7, r7, #7
 801fc40:	f107 0308 	add.w	r3, r7, #8
 801fc44:	e9d7 6700 	ldrd	r6, r7, [r7]
 801fc48:	9304      	str	r3, [sp, #16]
 801fc4a:	2e00      	cmp	r6, #0
 801fc4c:	f177 0300 	sbcs.w	r3, r7, #0
 801fc50:	da06      	bge.n	801fc60 <_svfprintf_r+0x1e0>
 801fc52:	4276      	negs	r6, r6
 801fc54:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801fc58:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801fc5c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801fc60:	2301      	movs	r3, #1
 801fc62:	e2ca      	b.n	80201fa <_svfprintf_r+0x77a>
 801fc64:	b10b      	cbz	r3, 801fc6a <_svfprintf_r+0x1ea>
 801fc66:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801fc6a:	4b37      	ldr	r3, [pc, #220]	; (801fd48 <_svfprintf_r+0x2c8>)
 801fc6c:	9311      	str	r3, [sp, #68]	; 0x44
 801fc6e:	06ab      	lsls	r3, r5, #26
 801fc70:	f140 8339 	bpl.w	80202e6 <_svfprintf_r+0x866>
 801fc74:	3707      	adds	r7, #7
 801fc76:	f027 0707 	bic.w	r7, r7, #7
 801fc7a:	f107 0308 	add.w	r3, r7, #8
 801fc7e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801fc82:	9304      	str	r3, [sp, #16]
 801fc84:	07e8      	lsls	r0, r5, #31
 801fc86:	d50b      	bpl.n	801fca0 <_svfprintf_r+0x220>
 801fc88:	ea56 0307 	orrs.w	r3, r6, r7
 801fc8c:	d008      	beq.n	801fca0 <_svfprintf_r+0x220>
 801fc8e:	2330      	movs	r3, #48	; 0x30
 801fc90:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 801fc94:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801fc98:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 801fc9c:	f045 0502 	orr.w	r5, r5, #2
 801fca0:	2302      	movs	r3, #2
 801fca2:	e2a7      	b.n	80201f4 <_svfprintf_r+0x774>
 801fca4:	2a00      	cmp	r2, #0
 801fca6:	d1be      	bne.n	801fc26 <_svfprintf_r+0x1a6>
 801fca8:	2301      	movs	r3, #1
 801fcaa:	2220      	movs	r2, #32
 801fcac:	e7bb      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fcae:	f045 0501 	orr.w	r5, r5, #1
 801fcb2:	e7b8      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fcb4:	683e      	ldr	r6, [r7, #0]
 801fcb6:	960a      	str	r6, [sp, #40]	; 0x28
 801fcb8:	2e00      	cmp	r6, #0
 801fcba:	f107 0104 	add.w	r1, r7, #4
 801fcbe:	dab4      	bge.n	801fc2a <_svfprintf_r+0x1aa>
 801fcc0:	4276      	negs	r6, r6
 801fcc2:	960a      	str	r6, [sp, #40]	; 0x28
 801fcc4:	460f      	mov	r7, r1
 801fcc6:	f045 0504 	orr.w	r5, r5, #4
 801fcca:	e7ac      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fccc:	9905      	ldr	r1, [sp, #20]
 801fcce:	1c4e      	adds	r6, r1, #1
 801fcd0:	7809      	ldrb	r1, [r1, #0]
 801fcd2:	9102      	str	r1, [sp, #8]
 801fcd4:	292a      	cmp	r1, #42	; 0x2a
 801fcd6:	d010      	beq.n	801fcfa <_svfprintf_r+0x27a>
 801fcd8:	f04f 0900 	mov.w	r9, #0
 801fcdc:	9605      	str	r6, [sp, #20]
 801fcde:	9902      	ldr	r1, [sp, #8]
 801fce0:	3930      	subs	r1, #48	; 0x30
 801fce2:	2909      	cmp	r1, #9
 801fce4:	f63f af31 	bhi.w	801fb4a <_svfprintf_r+0xca>
 801fce8:	fb00 1909 	mla	r9, r0, r9, r1
 801fcec:	9905      	ldr	r1, [sp, #20]
 801fcee:	460e      	mov	r6, r1
 801fcf0:	f816 1b01 	ldrb.w	r1, [r6], #1
 801fcf4:	9102      	str	r1, [sp, #8]
 801fcf6:	9605      	str	r6, [sp, #20]
 801fcf8:	e7f1      	b.n	801fcde <_svfprintf_r+0x25e>
 801fcfa:	6839      	ldr	r1, [r7, #0]
 801fcfc:	9605      	str	r6, [sp, #20]
 801fcfe:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 801fd02:	3704      	adds	r7, #4
 801fd04:	e78f      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fd06:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 801fd0a:	e78c      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fd0c:	2100      	movs	r1, #0
 801fd0e:	910a      	str	r1, [sp, #40]	; 0x28
 801fd10:	9902      	ldr	r1, [sp, #8]
 801fd12:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fd14:	3930      	subs	r1, #48	; 0x30
 801fd16:	fb00 1106 	mla	r1, r0, r6, r1
 801fd1a:	910a      	str	r1, [sp, #40]	; 0x28
 801fd1c:	9905      	ldr	r1, [sp, #20]
 801fd1e:	460e      	mov	r6, r1
 801fd20:	f816 1b01 	ldrb.w	r1, [r6], #1
 801fd24:	9102      	str	r1, [sp, #8]
 801fd26:	9902      	ldr	r1, [sp, #8]
 801fd28:	9605      	str	r6, [sp, #20]
 801fd2a:	3930      	subs	r1, #48	; 0x30
 801fd2c:	2909      	cmp	r1, #9
 801fd2e:	d9ef      	bls.n	801fd10 <_svfprintf_r+0x290>
 801fd30:	e70b      	b.n	801fb4a <_svfprintf_r+0xca>
 801fd32:	f045 0508 	orr.w	r5, r5, #8
 801fd36:	e776      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fd38:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 801fd3c:	e773      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fd3e:	bf00      	nop
	...
 801fd48:	080315c8 	.word	0x080315c8
 801fd4c:	9905      	ldr	r1, [sp, #20]
 801fd4e:	7809      	ldrb	r1, [r1, #0]
 801fd50:	296c      	cmp	r1, #108	; 0x6c
 801fd52:	d105      	bne.n	801fd60 <_svfprintf_r+0x2e0>
 801fd54:	9905      	ldr	r1, [sp, #20]
 801fd56:	3101      	adds	r1, #1
 801fd58:	9105      	str	r1, [sp, #20]
 801fd5a:	f045 0520 	orr.w	r5, r5, #32
 801fd5e:	e762      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fd60:	f045 0510 	orr.w	r5, r5, #16
 801fd64:	e75f      	b.n	801fc26 <_svfprintf_r+0x1a6>
 801fd66:	1d3b      	adds	r3, r7, #4
 801fd68:	9304      	str	r3, [sp, #16]
 801fd6a:	2600      	movs	r6, #0
 801fd6c:	683b      	ldr	r3, [r7, #0]
 801fd6e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801fd72:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801fd76:	f04f 0901 	mov.w	r9, #1
 801fd7a:	4637      	mov	r7, r6
 801fd7c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 801fd80:	e11b      	b.n	801ffba <_svfprintf_r+0x53a>
 801fd82:	b10b      	cbz	r3, 801fd88 <_svfprintf_r+0x308>
 801fd84:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801fd88:	f045 0510 	orr.w	r5, r5, #16
 801fd8c:	e752      	b.n	801fc34 <_svfprintf_r+0x1b4>
 801fd8e:	f015 0f10 	tst.w	r5, #16
 801fd92:	f107 0304 	add.w	r3, r7, #4
 801fd96:	d003      	beq.n	801fda0 <_svfprintf_r+0x320>
 801fd98:	683e      	ldr	r6, [r7, #0]
 801fd9a:	9304      	str	r3, [sp, #16]
 801fd9c:	17f7      	asrs	r7, r6, #31
 801fd9e:	e754      	b.n	801fc4a <_svfprintf_r+0x1ca>
 801fda0:	683e      	ldr	r6, [r7, #0]
 801fda2:	9304      	str	r3, [sp, #16]
 801fda4:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fda8:	bf18      	it	ne
 801fdaa:	b236      	sxthne	r6, r6
 801fdac:	e7f6      	b.n	801fd9c <_svfprintf_r+0x31c>
 801fdae:	b10b      	cbz	r3, 801fdb4 <_svfprintf_r+0x334>
 801fdb0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801fdb4:	3707      	adds	r7, #7
 801fdb6:	f027 0707 	bic.w	r7, r7, #7
 801fdba:	f107 0308 	add.w	r3, r7, #8
 801fdbe:	9304      	str	r3, [sp, #16]
 801fdc0:	ed97 7b00 	vldr	d7, [r7]
 801fdc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801fdc8:	9b06      	ldr	r3, [sp, #24]
 801fdca:	9312      	str	r3, [sp, #72]	; 0x48
 801fdcc:	9b07      	ldr	r3, [sp, #28]
 801fdce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fdd2:	9313      	str	r3, [sp, #76]	; 0x4c
 801fdd4:	f04f 32ff 	mov.w	r2, #4294967295
 801fdd8:	4b4a      	ldr	r3, [pc, #296]	; (801ff04 <_svfprintf_r+0x484>)
 801fdda:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801fdde:	f7e0 feb9 	bl	8000b54 <__aeabi_dcmpun>
 801fde2:	2800      	cmp	r0, #0
 801fde4:	f040 85d5 	bne.w	8020992 <_svfprintf_r+0xf12>
 801fde8:	f04f 32ff 	mov.w	r2, #4294967295
 801fdec:	4b45      	ldr	r3, [pc, #276]	; (801ff04 <_svfprintf_r+0x484>)
 801fdee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801fdf2:	f7e0 fe91 	bl	8000b18 <__aeabi_dcmple>
 801fdf6:	2800      	cmp	r0, #0
 801fdf8:	f040 85cb 	bne.w	8020992 <_svfprintf_r+0xf12>
 801fdfc:	2200      	movs	r2, #0
 801fdfe:	2300      	movs	r3, #0
 801fe00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fe04:	f7e0 fe7e 	bl	8000b04 <__aeabi_dcmplt>
 801fe08:	b110      	cbz	r0, 801fe10 <_svfprintf_r+0x390>
 801fe0a:	232d      	movs	r3, #45	; 0x2d
 801fe0c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801fe10:	4b3d      	ldr	r3, [pc, #244]	; (801ff08 <_svfprintf_r+0x488>)
 801fe12:	4a3e      	ldr	r2, [pc, #248]	; (801ff0c <_svfprintf_r+0x48c>)
 801fe14:	9902      	ldr	r1, [sp, #8]
 801fe16:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 801fe1a:	2947      	cmp	r1, #71	; 0x47
 801fe1c:	bfcc      	ite	gt
 801fe1e:	4690      	movgt	r8, r2
 801fe20:	4698      	movle	r8, r3
 801fe22:	f04f 0903 	mov.w	r9, #3
 801fe26:	2600      	movs	r6, #0
 801fe28:	4637      	mov	r7, r6
 801fe2a:	e0c6      	b.n	801ffba <_svfprintf_r+0x53a>
 801fe2c:	f1b9 3fff 	cmp.w	r9, #4294967295
 801fe30:	d022      	beq.n	801fe78 <_svfprintf_r+0x3f8>
 801fe32:	9b02      	ldr	r3, [sp, #8]
 801fe34:	f023 0320 	bic.w	r3, r3, #32
 801fe38:	2b47      	cmp	r3, #71	; 0x47
 801fe3a:	d104      	bne.n	801fe46 <_svfprintf_r+0x3c6>
 801fe3c:	f1b9 0f00 	cmp.w	r9, #0
 801fe40:	bf08      	it	eq
 801fe42:	f04f 0901 	moveq.w	r9, #1
 801fe46:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 801fe4a:	930c      	str	r3, [sp, #48]	; 0x30
 801fe4c:	9b07      	ldr	r3, [sp, #28]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	da15      	bge.n	801fe7e <_svfprintf_r+0x3fe>
 801fe52:	9b06      	ldr	r3, [sp, #24]
 801fe54:	930e      	str	r3, [sp, #56]	; 0x38
 801fe56:	9b07      	ldr	r3, [sp, #28]
 801fe58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801fe5c:	930f      	str	r3, [sp, #60]	; 0x3c
 801fe5e:	232d      	movs	r3, #45	; 0x2d
 801fe60:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe62:	9b02      	ldr	r3, [sp, #8]
 801fe64:	f023 0720 	bic.w	r7, r3, #32
 801fe68:	2f46      	cmp	r7, #70	; 0x46
 801fe6a:	d00e      	beq.n	801fe8a <_svfprintf_r+0x40a>
 801fe6c:	2f45      	cmp	r7, #69	; 0x45
 801fe6e:	d146      	bne.n	801fefe <_svfprintf_r+0x47e>
 801fe70:	f109 0601 	add.w	r6, r9, #1
 801fe74:	2102      	movs	r1, #2
 801fe76:	e00a      	b.n	801fe8e <_svfprintf_r+0x40e>
 801fe78:	f04f 0906 	mov.w	r9, #6
 801fe7c:	e7e3      	b.n	801fe46 <_svfprintf_r+0x3c6>
 801fe7e:	ed9d 7b06 	vldr	d7, [sp, #24]
 801fe82:	2300      	movs	r3, #0
 801fe84:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801fe88:	e7ea      	b.n	801fe60 <_svfprintf_r+0x3e0>
 801fe8a:	464e      	mov	r6, r9
 801fe8c:	2103      	movs	r1, #3
 801fe8e:	ab1d      	add	r3, sp, #116	; 0x74
 801fe90:	9301      	str	r3, [sp, #4]
 801fe92:	ab1a      	add	r3, sp, #104	; 0x68
 801fe94:	9300      	str	r3, [sp, #0]
 801fe96:	4632      	mov	r2, r6
 801fe98:	ab19      	add	r3, sp, #100	; 0x64
 801fe9a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 801fe9e:	4658      	mov	r0, fp
 801fea0:	f000 fe4e 	bl	8020b40 <_dtoa_r>
 801fea4:	2f47      	cmp	r7, #71	; 0x47
 801fea6:	4680      	mov	r8, r0
 801fea8:	d102      	bne.n	801feb0 <_svfprintf_r+0x430>
 801feaa:	07e8      	lsls	r0, r5, #31
 801feac:	f140 857e 	bpl.w	80209ac <_svfprintf_r+0xf2c>
 801feb0:	eb08 0306 	add.w	r3, r8, r6
 801feb4:	2f46      	cmp	r7, #70	; 0x46
 801feb6:	9303      	str	r3, [sp, #12]
 801feb8:	d111      	bne.n	801fede <_svfprintf_r+0x45e>
 801feba:	f898 3000 	ldrb.w	r3, [r8]
 801febe:	2b30      	cmp	r3, #48	; 0x30
 801fec0:	d109      	bne.n	801fed6 <_svfprintf_r+0x456>
 801fec2:	2200      	movs	r2, #0
 801fec4:	2300      	movs	r3, #0
 801fec6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801feca:	f7e0 fe11 	bl	8000af0 <__aeabi_dcmpeq>
 801fece:	b910      	cbnz	r0, 801fed6 <_svfprintf_r+0x456>
 801fed0:	f1c6 0601 	rsb	r6, r6, #1
 801fed4:	9619      	str	r6, [sp, #100]	; 0x64
 801fed6:	9a03      	ldr	r2, [sp, #12]
 801fed8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801feda:	441a      	add	r2, r3
 801fedc:	9203      	str	r2, [sp, #12]
 801fede:	2200      	movs	r2, #0
 801fee0:	2300      	movs	r3, #0
 801fee2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801fee6:	f7e0 fe03 	bl	8000af0 <__aeabi_dcmpeq>
 801feea:	b988      	cbnz	r0, 801ff10 <_svfprintf_r+0x490>
 801feec:	2230      	movs	r2, #48	; 0x30
 801feee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fef0:	9903      	ldr	r1, [sp, #12]
 801fef2:	4299      	cmp	r1, r3
 801fef4:	d90e      	bls.n	801ff14 <_svfprintf_r+0x494>
 801fef6:	1c59      	adds	r1, r3, #1
 801fef8:	911d      	str	r1, [sp, #116]	; 0x74
 801fefa:	701a      	strb	r2, [r3, #0]
 801fefc:	e7f7      	b.n	801feee <_svfprintf_r+0x46e>
 801fefe:	464e      	mov	r6, r9
 801ff00:	e7b8      	b.n	801fe74 <_svfprintf_r+0x3f4>
 801ff02:	bf00      	nop
 801ff04:	7fefffff 	.word	0x7fefffff
 801ff08:	080315bc 	.word	0x080315bc
 801ff0c:	080315c0 	.word	0x080315c0
 801ff10:	9b03      	ldr	r3, [sp, #12]
 801ff12:	931d      	str	r3, [sp, #116]	; 0x74
 801ff14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ff16:	2f47      	cmp	r7, #71	; 0x47
 801ff18:	eba3 0308 	sub.w	r3, r3, r8
 801ff1c:	9303      	str	r3, [sp, #12]
 801ff1e:	f040 80fa 	bne.w	8020116 <_svfprintf_r+0x696>
 801ff22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ff24:	1cd9      	adds	r1, r3, #3
 801ff26:	db02      	blt.n	801ff2e <_svfprintf_r+0x4ae>
 801ff28:	4599      	cmp	r9, r3
 801ff2a:	f280 8120 	bge.w	802016e <_svfprintf_r+0x6ee>
 801ff2e:	9b02      	ldr	r3, [sp, #8]
 801ff30:	3b02      	subs	r3, #2
 801ff32:	9302      	str	r3, [sp, #8]
 801ff34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ff36:	f89d 1008 	ldrb.w	r1, [sp, #8]
 801ff3a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 801ff3e:	1e53      	subs	r3, r2, #1
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	9319      	str	r3, [sp, #100]	; 0x64
 801ff44:	bfb6      	itet	lt
 801ff46:	f1c2 0301 	rsblt	r3, r2, #1
 801ff4a:	222b      	movge	r2, #43	; 0x2b
 801ff4c:	222d      	movlt	r2, #45	; 0x2d
 801ff4e:	2b09      	cmp	r3, #9
 801ff50:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 801ff54:	f340 80fb 	ble.w	802014e <_svfprintf_r+0x6ce>
 801ff58:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801ff5c:	260a      	movs	r6, #10
 801ff5e:	fb93 f0f6 	sdiv	r0, r3, r6
 801ff62:	fb06 3310 	mls	r3, r6, r0, r3
 801ff66:	3330      	adds	r3, #48	; 0x30
 801ff68:	2809      	cmp	r0, #9
 801ff6a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ff6e:	f102 31ff 	add.w	r1, r2, #4294967295
 801ff72:	4603      	mov	r3, r0
 801ff74:	f300 80e4 	bgt.w	8020140 <_svfprintf_r+0x6c0>
 801ff78:	3330      	adds	r3, #48	; 0x30
 801ff7a:	f801 3c01 	strb.w	r3, [r1, #-1]
 801ff7e:	3a02      	subs	r2, #2
 801ff80:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 801ff84:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 801ff88:	4282      	cmp	r2, r0
 801ff8a:	4619      	mov	r1, r3
 801ff8c:	f0c0 80da 	bcc.w	8020144 <_svfprintf_r+0x6c4>
 801ff90:	9a03      	ldr	r2, [sp, #12]
 801ff92:	ab1b      	add	r3, sp, #108	; 0x6c
 801ff94:	1acb      	subs	r3, r1, r3
 801ff96:	2a01      	cmp	r2, #1
 801ff98:	9310      	str	r3, [sp, #64]	; 0x40
 801ff9a:	eb03 0902 	add.w	r9, r3, r2
 801ff9e:	dc02      	bgt.n	801ffa6 <_svfprintf_r+0x526>
 801ffa0:	f015 0701 	ands.w	r7, r5, #1
 801ffa4:	d002      	beq.n	801ffac <_svfprintf_r+0x52c>
 801ffa6:	9b08      	ldr	r3, [sp, #32]
 801ffa8:	2700      	movs	r7, #0
 801ffaa:	4499      	add	r9, r3
 801ffac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ffae:	b113      	cbz	r3, 801ffb6 <_svfprintf_r+0x536>
 801ffb0:	232d      	movs	r3, #45	; 0x2d
 801ffb2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801ffb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ffb8:	2600      	movs	r6, #0
 801ffba:	454e      	cmp	r6, r9
 801ffbc:	4633      	mov	r3, r6
 801ffbe:	bfb8      	it	lt
 801ffc0:	464b      	movlt	r3, r9
 801ffc2:	930b      	str	r3, [sp, #44]	; 0x2c
 801ffc4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801ffc8:	b113      	cbz	r3, 801ffd0 <_svfprintf_r+0x550>
 801ffca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ffcc:	3301      	adds	r3, #1
 801ffce:	930b      	str	r3, [sp, #44]	; 0x2c
 801ffd0:	f015 0302 	ands.w	r3, r5, #2
 801ffd4:	9314      	str	r3, [sp, #80]	; 0x50
 801ffd6:	bf1e      	ittt	ne
 801ffd8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 801ffda:	3302      	addne	r3, #2
 801ffdc:	930b      	strne	r3, [sp, #44]	; 0x2c
 801ffde:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 801ffe2:	9315      	str	r3, [sp, #84]	; 0x54
 801ffe4:	d118      	bne.n	8020018 <_svfprintf_r+0x598>
 801ffe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ffea:	1a9b      	subs	r3, r3, r2
 801ffec:	2b00      	cmp	r3, #0
 801ffee:	930c      	str	r3, [sp, #48]	; 0x30
 801fff0:	dd12      	ble.n	8020018 <_svfprintf_r+0x598>
 801fff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fff4:	2b10      	cmp	r3, #16
 801fff6:	4ba9      	ldr	r3, [pc, #676]	; (802029c <_svfprintf_r+0x81c>)
 801fff8:	6023      	str	r3, [r4, #0]
 801fffa:	f300 81d5 	bgt.w	80203a8 <_svfprintf_r+0x928>
 801fffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020000:	6063      	str	r3, [r4, #4]
 8020002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020006:	4413      	add	r3, r2
 8020008:	9321      	str	r3, [sp, #132]	; 0x84
 802000a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802000c:	3301      	adds	r3, #1
 802000e:	2b07      	cmp	r3, #7
 8020010:	9320      	str	r3, [sp, #128]	; 0x80
 8020012:	f300 81e2 	bgt.w	80203da <_svfprintf_r+0x95a>
 8020016:	3408      	adds	r4, #8
 8020018:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 802001c:	b173      	cbz	r3, 802003c <_svfprintf_r+0x5bc>
 802001e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8020022:	6023      	str	r3, [r4, #0]
 8020024:	2301      	movs	r3, #1
 8020026:	6063      	str	r3, [r4, #4]
 8020028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802002a:	3301      	adds	r3, #1
 802002c:	9321      	str	r3, [sp, #132]	; 0x84
 802002e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020030:	3301      	adds	r3, #1
 8020032:	2b07      	cmp	r3, #7
 8020034:	9320      	str	r3, [sp, #128]	; 0x80
 8020036:	f300 81da 	bgt.w	80203ee <_svfprintf_r+0x96e>
 802003a:	3408      	adds	r4, #8
 802003c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802003e:	b16b      	cbz	r3, 802005c <_svfprintf_r+0x5dc>
 8020040:	ab18      	add	r3, sp, #96	; 0x60
 8020042:	6023      	str	r3, [r4, #0]
 8020044:	2302      	movs	r3, #2
 8020046:	6063      	str	r3, [r4, #4]
 8020048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802004a:	3302      	adds	r3, #2
 802004c:	9321      	str	r3, [sp, #132]	; 0x84
 802004e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020050:	3301      	adds	r3, #1
 8020052:	2b07      	cmp	r3, #7
 8020054:	9320      	str	r3, [sp, #128]	; 0x80
 8020056:	f300 81d4 	bgt.w	8020402 <_svfprintf_r+0x982>
 802005a:	3408      	adds	r4, #8
 802005c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802005e:	2b80      	cmp	r3, #128	; 0x80
 8020060:	d114      	bne.n	802008c <_svfprintf_r+0x60c>
 8020062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020066:	1a9b      	subs	r3, r3, r2
 8020068:	2b00      	cmp	r3, #0
 802006a:	dd0f      	ble.n	802008c <_svfprintf_r+0x60c>
 802006c:	4a8c      	ldr	r2, [pc, #560]	; (80202a0 <_svfprintf_r+0x820>)
 802006e:	6022      	str	r2, [r4, #0]
 8020070:	2b10      	cmp	r3, #16
 8020072:	f300 81d0 	bgt.w	8020416 <_svfprintf_r+0x996>
 8020076:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020078:	6063      	str	r3, [r4, #4]
 802007a:	4413      	add	r3, r2
 802007c:	9321      	str	r3, [sp, #132]	; 0x84
 802007e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020080:	3301      	adds	r3, #1
 8020082:	2b07      	cmp	r3, #7
 8020084:	9320      	str	r3, [sp, #128]	; 0x80
 8020086:	f300 81df 	bgt.w	8020448 <_svfprintf_r+0x9c8>
 802008a:	3408      	adds	r4, #8
 802008c:	eba6 0609 	sub.w	r6, r6, r9
 8020090:	2e00      	cmp	r6, #0
 8020092:	dd0f      	ble.n	80200b4 <_svfprintf_r+0x634>
 8020094:	4b82      	ldr	r3, [pc, #520]	; (80202a0 <_svfprintf_r+0x820>)
 8020096:	6023      	str	r3, [r4, #0]
 8020098:	2e10      	cmp	r6, #16
 802009a:	f300 81df 	bgt.w	802045c <_svfprintf_r+0x9dc>
 802009e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80200a0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80200a2:	6066      	str	r6, [r4, #4]
 80200a4:	3301      	adds	r3, #1
 80200a6:	4406      	add	r6, r0
 80200a8:	2b07      	cmp	r3, #7
 80200aa:	9621      	str	r6, [sp, #132]	; 0x84
 80200ac:	9320      	str	r3, [sp, #128]	; 0x80
 80200ae:	f300 81ec 	bgt.w	802048a <_svfprintf_r+0xa0a>
 80200b2:	3408      	adds	r4, #8
 80200b4:	05eb      	lsls	r3, r5, #23
 80200b6:	f100 81f2 	bmi.w	802049e <_svfprintf_r+0xa1e>
 80200ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80200bc:	e884 0300 	stmia.w	r4, {r8, r9}
 80200c0:	444b      	add	r3, r9
 80200c2:	9321      	str	r3, [sp, #132]	; 0x84
 80200c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80200c6:	3301      	adds	r3, #1
 80200c8:	2b07      	cmp	r3, #7
 80200ca:	9320      	str	r3, [sp, #128]	; 0x80
 80200cc:	f340 8419 	ble.w	8020902 <_svfprintf_r+0xe82>
 80200d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80200d2:	4651      	mov	r1, sl
 80200d4:	4658      	mov	r0, fp
 80200d6:	f002 f811 	bl	80220fc <__ssprint_r>
 80200da:	2800      	cmp	r0, #0
 80200dc:	f040 8431 	bne.w	8020942 <_svfprintf_r+0xec2>
 80200e0:	ac2c      	add	r4, sp, #176	; 0xb0
 80200e2:	076b      	lsls	r3, r5, #29
 80200e4:	f100 8410 	bmi.w	8020908 <_svfprintf_r+0xe88>
 80200e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80200ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80200ee:	428a      	cmp	r2, r1
 80200f0:	bfac      	ite	ge
 80200f2:	189b      	addge	r3, r3, r2
 80200f4:	185b      	addlt	r3, r3, r1
 80200f6:	9309      	str	r3, [sp, #36]	; 0x24
 80200f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80200fa:	b13b      	cbz	r3, 802010c <_svfprintf_r+0x68c>
 80200fc:	aa1f      	add	r2, sp, #124	; 0x7c
 80200fe:	4651      	mov	r1, sl
 8020100:	4658      	mov	r0, fp
 8020102:	f001 fffb 	bl	80220fc <__ssprint_r>
 8020106:	2800      	cmp	r0, #0
 8020108:	f040 841b 	bne.w	8020942 <_svfprintf_r+0xec2>
 802010c:	2300      	movs	r3, #0
 802010e:	9320      	str	r3, [sp, #128]	; 0x80
 8020110:	9f04      	ldr	r7, [sp, #16]
 8020112:	ac2c      	add	r4, sp, #176	; 0xb0
 8020114:	e4ee      	b.n	801faf4 <_svfprintf_r+0x74>
 8020116:	9b02      	ldr	r3, [sp, #8]
 8020118:	2b65      	cmp	r3, #101	; 0x65
 802011a:	f77f af0b 	ble.w	801ff34 <_svfprintf_r+0x4b4>
 802011e:	9b02      	ldr	r3, [sp, #8]
 8020120:	2b66      	cmp	r3, #102	; 0x66
 8020122:	d124      	bne.n	802016e <_svfprintf_r+0x6ee>
 8020124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020126:	2b00      	cmp	r3, #0
 8020128:	dd19      	ble.n	802015e <_svfprintf_r+0x6de>
 802012a:	f1b9 0f00 	cmp.w	r9, #0
 802012e:	d101      	bne.n	8020134 <_svfprintf_r+0x6b4>
 8020130:	07ea      	lsls	r2, r5, #31
 8020132:	d502      	bpl.n	802013a <_svfprintf_r+0x6ba>
 8020134:	9a08      	ldr	r2, [sp, #32]
 8020136:	4413      	add	r3, r2
 8020138:	444b      	add	r3, r9
 802013a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 802013c:	4699      	mov	r9, r3
 802013e:	e735      	b.n	801ffac <_svfprintf_r+0x52c>
 8020140:	460a      	mov	r2, r1
 8020142:	e70c      	b.n	801ff5e <_svfprintf_r+0x4de>
 8020144:	f812 1b01 	ldrb.w	r1, [r2], #1
 8020148:	f803 1b01 	strb.w	r1, [r3], #1
 802014c:	e71c      	b.n	801ff88 <_svfprintf_r+0x508>
 802014e:	2230      	movs	r2, #48	; 0x30
 8020150:	4413      	add	r3, r2
 8020152:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8020156:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 802015a:	a91c      	add	r1, sp, #112	; 0x70
 802015c:	e718      	b.n	801ff90 <_svfprintf_r+0x510>
 802015e:	f1b9 0f00 	cmp.w	r9, #0
 8020162:	d101      	bne.n	8020168 <_svfprintf_r+0x6e8>
 8020164:	07eb      	lsls	r3, r5, #31
 8020166:	d515      	bpl.n	8020194 <_svfprintf_r+0x714>
 8020168:	9b08      	ldr	r3, [sp, #32]
 802016a:	3301      	adds	r3, #1
 802016c:	e7e4      	b.n	8020138 <_svfprintf_r+0x6b8>
 802016e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020170:	9b03      	ldr	r3, [sp, #12]
 8020172:	429a      	cmp	r2, r3
 8020174:	db06      	blt.n	8020184 <_svfprintf_r+0x704>
 8020176:	07ef      	lsls	r7, r5, #31
 8020178:	d50e      	bpl.n	8020198 <_svfprintf_r+0x718>
 802017a:	9b08      	ldr	r3, [sp, #32]
 802017c:	4413      	add	r3, r2
 802017e:	2267      	movs	r2, #103	; 0x67
 8020180:	9202      	str	r2, [sp, #8]
 8020182:	e7da      	b.n	802013a <_svfprintf_r+0x6ba>
 8020184:	9b03      	ldr	r3, [sp, #12]
 8020186:	9908      	ldr	r1, [sp, #32]
 8020188:	2a00      	cmp	r2, #0
 802018a:	440b      	add	r3, r1
 802018c:	dcf7      	bgt.n	802017e <_svfprintf_r+0x6fe>
 802018e:	f1c2 0201 	rsb	r2, r2, #1
 8020192:	e7f3      	b.n	802017c <_svfprintf_r+0x6fc>
 8020194:	2301      	movs	r3, #1
 8020196:	e7d0      	b.n	802013a <_svfprintf_r+0x6ba>
 8020198:	4613      	mov	r3, r2
 802019a:	e7f0      	b.n	802017e <_svfprintf_r+0x6fe>
 802019c:	b10b      	cbz	r3, 80201a2 <_svfprintf_r+0x722>
 802019e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80201a2:	f015 0f20 	tst.w	r5, #32
 80201a6:	f107 0304 	add.w	r3, r7, #4
 80201aa:	d008      	beq.n	80201be <_svfprintf_r+0x73e>
 80201ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80201ae:	683a      	ldr	r2, [r7, #0]
 80201b0:	17ce      	asrs	r6, r1, #31
 80201b2:	4608      	mov	r0, r1
 80201b4:	4631      	mov	r1, r6
 80201b6:	e9c2 0100 	strd	r0, r1, [r2]
 80201ba:	461f      	mov	r7, r3
 80201bc:	e49a      	b.n	801faf4 <_svfprintf_r+0x74>
 80201be:	06ee      	lsls	r6, r5, #27
 80201c0:	d503      	bpl.n	80201ca <_svfprintf_r+0x74a>
 80201c2:	683a      	ldr	r2, [r7, #0]
 80201c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80201c6:	6011      	str	r1, [r2, #0]
 80201c8:	e7f7      	b.n	80201ba <_svfprintf_r+0x73a>
 80201ca:	0668      	lsls	r0, r5, #25
 80201cc:	d5f9      	bpl.n	80201c2 <_svfprintf_r+0x742>
 80201ce:	683a      	ldr	r2, [r7, #0]
 80201d0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80201d4:	8011      	strh	r1, [r2, #0]
 80201d6:	e7f0      	b.n	80201ba <_svfprintf_r+0x73a>
 80201d8:	f045 0510 	orr.w	r5, r5, #16
 80201dc:	f015 0320 	ands.w	r3, r5, #32
 80201e0:	d022      	beq.n	8020228 <_svfprintf_r+0x7a8>
 80201e2:	3707      	adds	r7, #7
 80201e4:	f027 0707 	bic.w	r7, r7, #7
 80201e8:	f107 0308 	add.w	r3, r7, #8
 80201ec:	e9d7 6700 	ldrd	r6, r7, [r7]
 80201f0:	9304      	str	r3, [sp, #16]
 80201f2:	2300      	movs	r3, #0
 80201f4:	2200      	movs	r2, #0
 80201f6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80201fa:	f1b9 3fff 	cmp.w	r9, #4294967295
 80201fe:	f000 83db 	beq.w	80209b8 <_svfprintf_r+0xf38>
 8020202:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8020206:	920b      	str	r2, [sp, #44]	; 0x2c
 8020208:	ea56 0207 	orrs.w	r2, r6, r7
 802020c:	f040 83d9 	bne.w	80209c2 <_svfprintf_r+0xf42>
 8020210:	f1b9 0f00 	cmp.w	r9, #0
 8020214:	f000 80aa 	beq.w	802036c <_svfprintf_r+0x8ec>
 8020218:	2b01      	cmp	r3, #1
 802021a:	d076      	beq.n	802030a <_svfprintf_r+0x88a>
 802021c:	2b02      	cmp	r3, #2
 802021e:	f000 8091 	beq.w	8020344 <_svfprintf_r+0x8c4>
 8020222:	2600      	movs	r6, #0
 8020224:	2700      	movs	r7, #0
 8020226:	e3d2      	b.n	80209ce <_svfprintf_r+0xf4e>
 8020228:	1d3a      	adds	r2, r7, #4
 802022a:	f015 0110 	ands.w	r1, r5, #16
 802022e:	9204      	str	r2, [sp, #16]
 8020230:	d002      	beq.n	8020238 <_svfprintf_r+0x7b8>
 8020232:	683e      	ldr	r6, [r7, #0]
 8020234:	2700      	movs	r7, #0
 8020236:	e7dd      	b.n	80201f4 <_svfprintf_r+0x774>
 8020238:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 802023c:	d0f9      	beq.n	8020232 <_svfprintf_r+0x7b2>
 802023e:	883e      	ldrh	r6, [r7, #0]
 8020240:	2700      	movs	r7, #0
 8020242:	e7d6      	b.n	80201f2 <_svfprintf_r+0x772>
 8020244:	1d3b      	adds	r3, r7, #4
 8020246:	9304      	str	r3, [sp, #16]
 8020248:	2330      	movs	r3, #48	; 0x30
 802024a:	2278      	movs	r2, #120	; 0x78
 802024c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8020250:	4b14      	ldr	r3, [pc, #80]	; (80202a4 <_svfprintf_r+0x824>)
 8020252:	683e      	ldr	r6, [r7, #0]
 8020254:	9311      	str	r3, [sp, #68]	; 0x44
 8020256:	2700      	movs	r7, #0
 8020258:	f045 0502 	orr.w	r5, r5, #2
 802025c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8020260:	2302      	movs	r3, #2
 8020262:	9202      	str	r2, [sp, #8]
 8020264:	e7c6      	b.n	80201f4 <_svfprintf_r+0x774>
 8020266:	1d3b      	adds	r3, r7, #4
 8020268:	2600      	movs	r6, #0
 802026a:	f1b9 3fff 	cmp.w	r9, #4294967295
 802026e:	9304      	str	r3, [sp, #16]
 8020270:	f8d7 8000 	ldr.w	r8, [r7]
 8020274:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8020278:	d00a      	beq.n	8020290 <_svfprintf_r+0x810>
 802027a:	464a      	mov	r2, r9
 802027c:	4631      	mov	r1, r6
 802027e:	4640      	mov	r0, r8
 8020280:	f7df ffbe 	bl	8000200 <memchr>
 8020284:	2800      	cmp	r0, #0
 8020286:	f000 808d 	beq.w	80203a4 <_svfprintf_r+0x924>
 802028a:	eba0 0908 	sub.w	r9, r0, r8
 802028e:	e5cb      	b.n	801fe28 <_svfprintf_r+0x3a8>
 8020290:	4640      	mov	r0, r8
 8020292:	f7e0 f805 	bl	80002a0 <strlen>
 8020296:	4681      	mov	r9, r0
 8020298:	e5c6      	b.n	801fe28 <_svfprintf_r+0x3a8>
 802029a:	bf00      	nop
 802029c:	080315ea 	.word	0x080315ea
 80202a0:	080315fa 	.word	0x080315fa
 80202a4:	080315d9 	.word	0x080315d9
 80202a8:	f045 0510 	orr.w	r5, r5, #16
 80202ac:	06a9      	lsls	r1, r5, #26
 80202ae:	d509      	bpl.n	80202c4 <_svfprintf_r+0x844>
 80202b0:	3707      	adds	r7, #7
 80202b2:	f027 0707 	bic.w	r7, r7, #7
 80202b6:	f107 0308 	add.w	r3, r7, #8
 80202ba:	e9d7 6700 	ldrd	r6, r7, [r7]
 80202be:	9304      	str	r3, [sp, #16]
 80202c0:	2301      	movs	r3, #1
 80202c2:	e797      	b.n	80201f4 <_svfprintf_r+0x774>
 80202c4:	1d3b      	adds	r3, r7, #4
 80202c6:	f015 0f10 	tst.w	r5, #16
 80202ca:	9304      	str	r3, [sp, #16]
 80202cc:	d001      	beq.n	80202d2 <_svfprintf_r+0x852>
 80202ce:	683e      	ldr	r6, [r7, #0]
 80202d0:	e002      	b.n	80202d8 <_svfprintf_r+0x858>
 80202d2:	066a      	lsls	r2, r5, #25
 80202d4:	d5fb      	bpl.n	80202ce <_svfprintf_r+0x84e>
 80202d6:	883e      	ldrh	r6, [r7, #0]
 80202d8:	2700      	movs	r7, #0
 80202da:	e7f1      	b.n	80202c0 <_svfprintf_r+0x840>
 80202dc:	b10b      	cbz	r3, 80202e2 <_svfprintf_r+0x862>
 80202de:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80202e2:	4ba3      	ldr	r3, [pc, #652]	; (8020570 <_svfprintf_r+0xaf0>)
 80202e4:	e4c2      	b.n	801fc6c <_svfprintf_r+0x1ec>
 80202e6:	1d3b      	adds	r3, r7, #4
 80202e8:	f015 0f10 	tst.w	r5, #16
 80202ec:	9304      	str	r3, [sp, #16]
 80202ee:	d001      	beq.n	80202f4 <_svfprintf_r+0x874>
 80202f0:	683e      	ldr	r6, [r7, #0]
 80202f2:	e002      	b.n	80202fa <_svfprintf_r+0x87a>
 80202f4:	066e      	lsls	r6, r5, #25
 80202f6:	d5fb      	bpl.n	80202f0 <_svfprintf_r+0x870>
 80202f8:	883e      	ldrh	r6, [r7, #0]
 80202fa:	2700      	movs	r7, #0
 80202fc:	e4c2      	b.n	801fc84 <_svfprintf_r+0x204>
 80202fe:	4643      	mov	r3, r8
 8020300:	e366      	b.n	80209d0 <_svfprintf_r+0xf50>
 8020302:	2f00      	cmp	r7, #0
 8020304:	bf08      	it	eq
 8020306:	2e0a      	cmpeq	r6, #10
 8020308:	d205      	bcs.n	8020316 <_svfprintf_r+0x896>
 802030a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 802030e:	3630      	adds	r6, #48	; 0x30
 8020310:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8020314:	e377      	b.n	8020a06 <_svfprintf_r+0xf86>
 8020316:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 802031a:	4630      	mov	r0, r6
 802031c:	4639      	mov	r1, r7
 802031e:	220a      	movs	r2, #10
 8020320:	2300      	movs	r3, #0
 8020322:	f7e0 fcc5 	bl	8000cb0 <__aeabi_uldivmod>
 8020326:	3230      	adds	r2, #48	; 0x30
 8020328:	f808 2d01 	strb.w	r2, [r8, #-1]!
 802032c:	2300      	movs	r3, #0
 802032e:	4630      	mov	r0, r6
 8020330:	4639      	mov	r1, r7
 8020332:	220a      	movs	r2, #10
 8020334:	f7e0 fcbc 	bl	8000cb0 <__aeabi_uldivmod>
 8020338:	4606      	mov	r6, r0
 802033a:	460f      	mov	r7, r1
 802033c:	ea56 0307 	orrs.w	r3, r6, r7
 8020340:	d1eb      	bne.n	802031a <_svfprintf_r+0x89a>
 8020342:	e360      	b.n	8020a06 <_svfprintf_r+0xf86>
 8020344:	2600      	movs	r6, #0
 8020346:	2700      	movs	r7, #0
 8020348:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 802034c:	f006 030f 	and.w	r3, r6, #15
 8020350:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020352:	5cd3      	ldrb	r3, [r2, r3]
 8020354:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8020358:	0933      	lsrs	r3, r6, #4
 802035a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 802035e:	093a      	lsrs	r2, r7, #4
 8020360:	461e      	mov	r6, r3
 8020362:	4617      	mov	r7, r2
 8020364:	ea56 0307 	orrs.w	r3, r6, r7
 8020368:	d1f0      	bne.n	802034c <_svfprintf_r+0x8cc>
 802036a:	e34c      	b.n	8020a06 <_svfprintf_r+0xf86>
 802036c:	b93b      	cbnz	r3, 802037e <_svfprintf_r+0x8fe>
 802036e:	07ea      	lsls	r2, r5, #31
 8020370:	d505      	bpl.n	802037e <_svfprintf_r+0x8fe>
 8020372:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8020376:	2330      	movs	r3, #48	; 0x30
 8020378:	f808 3d41 	strb.w	r3, [r8, #-65]!
 802037c:	e343      	b.n	8020a06 <_svfprintf_r+0xf86>
 802037e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8020382:	e340      	b.n	8020a06 <_svfprintf_r+0xf86>
 8020384:	b10b      	cbz	r3, 802038a <_svfprintf_r+0x90a>
 8020386:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 802038a:	9b02      	ldr	r3, [sp, #8]
 802038c:	2b00      	cmp	r3, #0
 802038e:	f000 82f7 	beq.w	8020980 <_svfprintf_r+0xf00>
 8020392:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8020396:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 802039a:	2600      	movs	r6, #0
 802039c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80203a0:	9704      	str	r7, [sp, #16]
 80203a2:	e4e8      	b.n	801fd76 <_svfprintf_r+0x2f6>
 80203a4:	4606      	mov	r6, r0
 80203a6:	e53f      	b.n	801fe28 <_svfprintf_r+0x3a8>
 80203a8:	2310      	movs	r3, #16
 80203aa:	6063      	str	r3, [r4, #4]
 80203ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80203ae:	3310      	adds	r3, #16
 80203b0:	9321      	str	r3, [sp, #132]	; 0x84
 80203b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80203b4:	3301      	adds	r3, #1
 80203b6:	2b07      	cmp	r3, #7
 80203b8:	9320      	str	r3, [sp, #128]	; 0x80
 80203ba:	dc04      	bgt.n	80203c6 <_svfprintf_r+0x946>
 80203bc:	3408      	adds	r4, #8
 80203be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80203c0:	3b10      	subs	r3, #16
 80203c2:	930c      	str	r3, [sp, #48]	; 0x30
 80203c4:	e615      	b.n	801fff2 <_svfprintf_r+0x572>
 80203c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80203c8:	4651      	mov	r1, sl
 80203ca:	4658      	mov	r0, fp
 80203cc:	f001 fe96 	bl	80220fc <__ssprint_r>
 80203d0:	2800      	cmp	r0, #0
 80203d2:	f040 82b6 	bne.w	8020942 <_svfprintf_r+0xec2>
 80203d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80203d8:	e7f1      	b.n	80203be <_svfprintf_r+0x93e>
 80203da:	aa1f      	add	r2, sp, #124	; 0x7c
 80203dc:	4651      	mov	r1, sl
 80203de:	4658      	mov	r0, fp
 80203e0:	f001 fe8c 	bl	80220fc <__ssprint_r>
 80203e4:	2800      	cmp	r0, #0
 80203e6:	f040 82ac 	bne.w	8020942 <_svfprintf_r+0xec2>
 80203ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80203ec:	e614      	b.n	8020018 <_svfprintf_r+0x598>
 80203ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80203f0:	4651      	mov	r1, sl
 80203f2:	4658      	mov	r0, fp
 80203f4:	f001 fe82 	bl	80220fc <__ssprint_r>
 80203f8:	2800      	cmp	r0, #0
 80203fa:	f040 82a2 	bne.w	8020942 <_svfprintf_r+0xec2>
 80203fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8020400:	e61c      	b.n	802003c <_svfprintf_r+0x5bc>
 8020402:	aa1f      	add	r2, sp, #124	; 0x7c
 8020404:	4651      	mov	r1, sl
 8020406:	4658      	mov	r0, fp
 8020408:	f001 fe78 	bl	80220fc <__ssprint_r>
 802040c:	2800      	cmp	r0, #0
 802040e:	f040 8298 	bne.w	8020942 <_svfprintf_r+0xec2>
 8020412:	ac2c      	add	r4, sp, #176	; 0xb0
 8020414:	e622      	b.n	802005c <_svfprintf_r+0x5dc>
 8020416:	2210      	movs	r2, #16
 8020418:	6062      	str	r2, [r4, #4]
 802041a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802041c:	3210      	adds	r2, #16
 802041e:	9221      	str	r2, [sp, #132]	; 0x84
 8020420:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020422:	3201      	adds	r2, #1
 8020424:	2a07      	cmp	r2, #7
 8020426:	9220      	str	r2, [sp, #128]	; 0x80
 8020428:	dc02      	bgt.n	8020430 <_svfprintf_r+0x9b0>
 802042a:	3408      	adds	r4, #8
 802042c:	3b10      	subs	r3, #16
 802042e:	e61d      	b.n	802006c <_svfprintf_r+0x5ec>
 8020430:	aa1f      	add	r2, sp, #124	; 0x7c
 8020432:	4651      	mov	r1, sl
 8020434:	4658      	mov	r0, fp
 8020436:	930c      	str	r3, [sp, #48]	; 0x30
 8020438:	f001 fe60 	bl	80220fc <__ssprint_r>
 802043c:	2800      	cmp	r0, #0
 802043e:	f040 8280 	bne.w	8020942 <_svfprintf_r+0xec2>
 8020442:	ac2c      	add	r4, sp, #176	; 0xb0
 8020444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020446:	e7f1      	b.n	802042c <_svfprintf_r+0x9ac>
 8020448:	aa1f      	add	r2, sp, #124	; 0x7c
 802044a:	4651      	mov	r1, sl
 802044c:	4658      	mov	r0, fp
 802044e:	f001 fe55 	bl	80220fc <__ssprint_r>
 8020452:	2800      	cmp	r0, #0
 8020454:	f040 8275 	bne.w	8020942 <_svfprintf_r+0xec2>
 8020458:	ac2c      	add	r4, sp, #176	; 0xb0
 802045a:	e617      	b.n	802008c <_svfprintf_r+0x60c>
 802045c:	2310      	movs	r3, #16
 802045e:	6063      	str	r3, [r4, #4]
 8020460:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020462:	3310      	adds	r3, #16
 8020464:	9321      	str	r3, [sp, #132]	; 0x84
 8020466:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020468:	3301      	adds	r3, #1
 802046a:	2b07      	cmp	r3, #7
 802046c:	9320      	str	r3, [sp, #128]	; 0x80
 802046e:	dc02      	bgt.n	8020476 <_svfprintf_r+0x9f6>
 8020470:	3408      	adds	r4, #8
 8020472:	3e10      	subs	r6, #16
 8020474:	e60e      	b.n	8020094 <_svfprintf_r+0x614>
 8020476:	aa1f      	add	r2, sp, #124	; 0x7c
 8020478:	4651      	mov	r1, sl
 802047a:	4658      	mov	r0, fp
 802047c:	f001 fe3e 	bl	80220fc <__ssprint_r>
 8020480:	2800      	cmp	r0, #0
 8020482:	f040 825e 	bne.w	8020942 <_svfprintf_r+0xec2>
 8020486:	ac2c      	add	r4, sp, #176	; 0xb0
 8020488:	e7f3      	b.n	8020472 <_svfprintf_r+0x9f2>
 802048a:	aa1f      	add	r2, sp, #124	; 0x7c
 802048c:	4651      	mov	r1, sl
 802048e:	4658      	mov	r0, fp
 8020490:	f001 fe34 	bl	80220fc <__ssprint_r>
 8020494:	2800      	cmp	r0, #0
 8020496:	f040 8254 	bne.w	8020942 <_svfprintf_r+0xec2>
 802049a:	ac2c      	add	r4, sp, #176	; 0xb0
 802049c:	e60a      	b.n	80200b4 <_svfprintf_r+0x634>
 802049e:	9b02      	ldr	r3, [sp, #8]
 80204a0:	2b65      	cmp	r3, #101	; 0x65
 80204a2:	f340 81a9 	ble.w	80207f8 <_svfprintf_r+0xd78>
 80204a6:	2200      	movs	r2, #0
 80204a8:	2300      	movs	r3, #0
 80204aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80204ae:	f7e0 fb1f 	bl	8000af0 <__aeabi_dcmpeq>
 80204b2:	2800      	cmp	r0, #0
 80204b4:	d062      	beq.n	802057c <_svfprintf_r+0xafc>
 80204b6:	4b2f      	ldr	r3, [pc, #188]	; (8020574 <_svfprintf_r+0xaf4>)
 80204b8:	6023      	str	r3, [r4, #0]
 80204ba:	2301      	movs	r3, #1
 80204bc:	6063      	str	r3, [r4, #4]
 80204be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80204c0:	3301      	adds	r3, #1
 80204c2:	9321      	str	r3, [sp, #132]	; 0x84
 80204c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80204c6:	3301      	adds	r3, #1
 80204c8:	2b07      	cmp	r3, #7
 80204ca:	9320      	str	r3, [sp, #128]	; 0x80
 80204cc:	dc25      	bgt.n	802051a <_svfprintf_r+0xa9a>
 80204ce:	3408      	adds	r4, #8
 80204d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80204d2:	9a03      	ldr	r2, [sp, #12]
 80204d4:	4293      	cmp	r3, r2
 80204d6:	db02      	blt.n	80204de <_svfprintf_r+0xa5e>
 80204d8:	07ee      	lsls	r6, r5, #31
 80204da:	f57f ae02 	bpl.w	80200e2 <_svfprintf_r+0x662>
 80204de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80204e0:	6023      	str	r3, [r4, #0]
 80204e2:	9b08      	ldr	r3, [sp, #32]
 80204e4:	6063      	str	r3, [r4, #4]
 80204e6:	9a08      	ldr	r2, [sp, #32]
 80204e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80204ea:	4413      	add	r3, r2
 80204ec:	9321      	str	r3, [sp, #132]	; 0x84
 80204ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80204f0:	3301      	adds	r3, #1
 80204f2:	2b07      	cmp	r3, #7
 80204f4:	9320      	str	r3, [sp, #128]	; 0x80
 80204f6:	dc1a      	bgt.n	802052e <_svfprintf_r+0xaae>
 80204f8:	3408      	adds	r4, #8
 80204fa:	9b03      	ldr	r3, [sp, #12]
 80204fc:	1e5e      	subs	r6, r3, #1
 80204fe:	2e00      	cmp	r6, #0
 8020500:	f77f adef 	ble.w	80200e2 <_svfprintf_r+0x662>
 8020504:	4f1c      	ldr	r7, [pc, #112]	; (8020578 <_svfprintf_r+0xaf8>)
 8020506:	f04f 0810 	mov.w	r8, #16
 802050a:	2e10      	cmp	r6, #16
 802050c:	6027      	str	r7, [r4, #0]
 802050e:	dc18      	bgt.n	8020542 <_svfprintf_r+0xac2>
 8020510:	6066      	str	r6, [r4, #4]
 8020512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020514:	441e      	add	r6, r3
 8020516:	9621      	str	r6, [sp, #132]	; 0x84
 8020518:	e5d4      	b.n	80200c4 <_svfprintf_r+0x644>
 802051a:	aa1f      	add	r2, sp, #124	; 0x7c
 802051c:	4651      	mov	r1, sl
 802051e:	4658      	mov	r0, fp
 8020520:	f001 fdec 	bl	80220fc <__ssprint_r>
 8020524:	2800      	cmp	r0, #0
 8020526:	f040 820c 	bne.w	8020942 <_svfprintf_r+0xec2>
 802052a:	ac2c      	add	r4, sp, #176	; 0xb0
 802052c:	e7d0      	b.n	80204d0 <_svfprintf_r+0xa50>
 802052e:	aa1f      	add	r2, sp, #124	; 0x7c
 8020530:	4651      	mov	r1, sl
 8020532:	4658      	mov	r0, fp
 8020534:	f001 fde2 	bl	80220fc <__ssprint_r>
 8020538:	2800      	cmp	r0, #0
 802053a:	f040 8202 	bne.w	8020942 <_svfprintf_r+0xec2>
 802053e:	ac2c      	add	r4, sp, #176	; 0xb0
 8020540:	e7db      	b.n	80204fa <_svfprintf_r+0xa7a>
 8020542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020544:	f8c4 8004 	str.w	r8, [r4, #4]
 8020548:	3310      	adds	r3, #16
 802054a:	9321      	str	r3, [sp, #132]	; 0x84
 802054c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802054e:	3301      	adds	r3, #1
 8020550:	2b07      	cmp	r3, #7
 8020552:	9320      	str	r3, [sp, #128]	; 0x80
 8020554:	dc02      	bgt.n	802055c <_svfprintf_r+0xadc>
 8020556:	3408      	adds	r4, #8
 8020558:	3e10      	subs	r6, #16
 802055a:	e7d6      	b.n	802050a <_svfprintf_r+0xa8a>
 802055c:	aa1f      	add	r2, sp, #124	; 0x7c
 802055e:	4651      	mov	r1, sl
 8020560:	4658      	mov	r0, fp
 8020562:	f001 fdcb 	bl	80220fc <__ssprint_r>
 8020566:	2800      	cmp	r0, #0
 8020568:	f040 81eb 	bne.w	8020942 <_svfprintf_r+0xec2>
 802056c:	ac2c      	add	r4, sp, #176	; 0xb0
 802056e:	e7f3      	b.n	8020558 <_svfprintf_r+0xad8>
 8020570:	080315d9 	.word	0x080315d9
 8020574:	0803147d 	.word	0x0803147d
 8020578:	080315fa 	.word	0x080315fa
 802057c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802057e:	2b00      	cmp	r3, #0
 8020580:	dc7a      	bgt.n	8020678 <_svfprintf_r+0xbf8>
 8020582:	4b9b      	ldr	r3, [pc, #620]	; (80207f0 <_svfprintf_r+0xd70>)
 8020584:	6023      	str	r3, [r4, #0]
 8020586:	2301      	movs	r3, #1
 8020588:	6063      	str	r3, [r4, #4]
 802058a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802058c:	3301      	adds	r3, #1
 802058e:	9321      	str	r3, [sp, #132]	; 0x84
 8020590:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020592:	3301      	adds	r3, #1
 8020594:	2b07      	cmp	r3, #7
 8020596:	9320      	str	r3, [sp, #128]	; 0x80
 8020598:	dc44      	bgt.n	8020624 <_svfprintf_r+0xba4>
 802059a:	3408      	adds	r4, #8
 802059c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802059e:	b923      	cbnz	r3, 80205aa <_svfprintf_r+0xb2a>
 80205a0:	9b03      	ldr	r3, [sp, #12]
 80205a2:	b913      	cbnz	r3, 80205aa <_svfprintf_r+0xb2a>
 80205a4:	07e8      	lsls	r0, r5, #31
 80205a6:	f57f ad9c 	bpl.w	80200e2 <_svfprintf_r+0x662>
 80205aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80205ac:	6023      	str	r3, [r4, #0]
 80205ae:	9b08      	ldr	r3, [sp, #32]
 80205b0:	6063      	str	r3, [r4, #4]
 80205b2:	9a08      	ldr	r2, [sp, #32]
 80205b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80205b6:	4413      	add	r3, r2
 80205b8:	9321      	str	r3, [sp, #132]	; 0x84
 80205ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80205bc:	3301      	adds	r3, #1
 80205be:	2b07      	cmp	r3, #7
 80205c0:	9320      	str	r3, [sp, #128]	; 0x80
 80205c2:	dc39      	bgt.n	8020638 <_svfprintf_r+0xbb8>
 80205c4:	f104 0308 	add.w	r3, r4, #8
 80205c8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80205ca:	2e00      	cmp	r6, #0
 80205cc:	da19      	bge.n	8020602 <_svfprintf_r+0xb82>
 80205ce:	4f89      	ldr	r7, [pc, #548]	; (80207f4 <_svfprintf_r+0xd74>)
 80205d0:	4276      	negs	r6, r6
 80205d2:	2410      	movs	r4, #16
 80205d4:	2e10      	cmp	r6, #16
 80205d6:	601f      	str	r7, [r3, #0]
 80205d8:	dc38      	bgt.n	802064c <_svfprintf_r+0xbcc>
 80205da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80205dc:	605e      	str	r6, [r3, #4]
 80205de:	4416      	add	r6, r2
 80205e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80205e2:	9621      	str	r6, [sp, #132]	; 0x84
 80205e4:	3201      	adds	r2, #1
 80205e6:	2a07      	cmp	r2, #7
 80205e8:	f103 0308 	add.w	r3, r3, #8
 80205ec:	9220      	str	r2, [sp, #128]	; 0x80
 80205ee:	dd08      	ble.n	8020602 <_svfprintf_r+0xb82>
 80205f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80205f2:	4651      	mov	r1, sl
 80205f4:	4658      	mov	r0, fp
 80205f6:	f001 fd81 	bl	80220fc <__ssprint_r>
 80205fa:	2800      	cmp	r0, #0
 80205fc:	f040 81a1 	bne.w	8020942 <_svfprintf_r+0xec2>
 8020600:	ab2c      	add	r3, sp, #176	; 0xb0
 8020602:	9a03      	ldr	r2, [sp, #12]
 8020604:	605a      	str	r2, [r3, #4]
 8020606:	9903      	ldr	r1, [sp, #12]
 8020608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802060a:	f8c3 8000 	str.w	r8, [r3]
 802060e:	440a      	add	r2, r1
 8020610:	9221      	str	r2, [sp, #132]	; 0x84
 8020612:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020614:	3201      	adds	r2, #1
 8020616:	2a07      	cmp	r2, #7
 8020618:	9220      	str	r2, [sp, #128]	; 0x80
 802061a:	f73f ad59 	bgt.w	80200d0 <_svfprintf_r+0x650>
 802061e:	f103 0408 	add.w	r4, r3, #8
 8020622:	e55e      	b.n	80200e2 <_svfprintf_r+0x662>
 8020624:	aa1f      	add	r2, sp, #124	; 0x7c
 8020626:	4651      	mov	r1, sl
 8020628:	4658      	mov	r0, fp
 802062a:	f001 fd67 	bl	80220fc <__ssprint_r>
 802062e:	2800      	cmp	r0, #0
 8020630:	f040 8187 	bne.w	8020942 <_svfprintf_r+0xec2>
 8020634:	ac2c      	add	r4, sp, #176	; 0xb0
 8020636:	e7b1      	b.n	802059c <_svfprintf_r+0xb1c>
 8020638:	aa1f      	add	r2, sp, #124	; 0x7c
 802063a:	4651      	mov	r1, sl
 802063c:	4658      	mov	r0, fp
 802063e:	f001 fd5d 	bl	80220fc <__ssprint_r>
 8020642:	2800      	cmp	r0, #0
 8020644:	f040 817d 	bne.w	8020942 <_svfprintf_r+0xec2>
 8020648:	ab2c      	add	r3, sp, #176	; 0xb0
 802064a:	e7bd      	b.n	80205c8 <_svfprintf_r+0xb48>
 802064c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802064e:	605c      	str	r4, [r3, #4]
 8020650:	3210      	adds	r2, #16
 8020652:	9221      	str	r2, [sp, #132]	; 0x84
 8020654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020656:	3201      	adds	r2, #1
 8020658:	2a07      	cmp	r2, #7
 802065a:	9220      	str	r2, [sp, #128]	; 0x80
 802065c:	dc02      	bgt.n	8020664 <_svfprintf_r+0xbe4>
 802065e:	3308      	adds	r3, #8
 8020660:	3e10      	subs	r6, #16
 8020662:	e7b7      	b.n	80205d4 <_svfprintf_r+0xb54>
 8020664:	aa1f      	add	r2, sp, #124	; 0x7c
 8020666:	4651      	mov	r1, sl
 8020668:	4658      	mov	r0, fp
 802066a:	f001 fd47 	bl	80220fc <__ssprint_r>
 802066e:	2800      	cmp	r0, #0
 8020670:	f040 8167 	bne.w	8020942 <_svfprintf_r+0xec2>
 8020674:	ab2c      	add	r3, sp, #176	; 0xb0
 8020676:	e7f3      	b.n	8020660 <_svfprintf_r+0xbe0>
 8020678:	9b03      	ldr	r3, [sp, #12]
 802067a:	42bb      	cmp	r3, r7
 802067c:	bfa8      	it	ge
 802067e:	463b      	movge	r3, r7
 8020680:	2b00      	cmp	r3, #0
 8020682:	461e      	mov	r6, r3
 8020684:	dd0b      	ble.n	802069e <_svfprintf_r+0xc1e>
 8020686:	6063      	str	r3, [r4, #4]
 8020688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802068a:	f8c4 8000 	str.w	r8, [r4]
 802068e:	4433      	add	r3, r6
 8020690:	9321      	str	r3, [sp, #132]	; 0x84
 8020692:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020694:	3301      	adds	r3, #1
 8020696:	2b07      	cmp	r3, #7
 8020698:	9320      	str	r3, [sp, #128]	; 0x80
 802069a:	dc5f      	bgt.n	802075c <_svfprintf_r+0xcdc>
 802069c:	3408      	adds	r4, #8
 802069e:	2e00      	cmp	r6, #0
 80206a0:	bfac      	ite	ge
 80206a2:	1bbe      	subge	r6, r7, r6
 80206a4:	463e      	movlt	r6, r7
 80206a6:	2e00      	cmp	r6, #0
 80206a8:	dd0f      	ble.n	80206ca <_svfprintf_r+0xc4a>
 80206aa:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80207f4 <_svfprintf_r+0xd74>
 80206ae:	f8c4 9000 	str.w	r9, [r4]
 80206b2:	2e10      	cmp	r6, #16
 80206b4:	dc5c      	bgt.n	8020770 <_svfprintf_r+0xcf0>
 80206b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80206b8:	6066      	str	r6, [r4, #4]
 80206ba:	441e      	add	r6, r3
 80206bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80206be:	9621      	str	r6, [sp, #132]	; 0x84
 80206c0:	3301      	adds	r3, #1
 80206c2:	2b07      	cmp	r3, #7
 80206c4:	9320      	str	r3, [sp, #128]	; 0x80
 80206c6:	dc6a      	bgt.n	802079e <_svfprintf_r+0xd1e>
 80206c8:	3408      	adds	r4, #8
 80206ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80206cc:	9a03      	ldr	r2, [sp, #12]
 80206ce:	4293      	cmp	r3, r2
 80206d0:	db01      	blt.n	80206d6 <_svfprintf_r+0xc56>
 80206d2:	07e9      	lsls	r1, r5, #31
 80206d4:	d50d      	bpl.n	80206f2 <_svfprintf_r+0xc72>
 80206d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80206d8:	6023      	str	r3, [r4, #0]
 80206da:	9b08      	ldr	r3, [sp, #32]
 80206dc:	6063      	str	r3, [r4, #4]
 80206de:	9a08      	ldr	r2, [sp, #32]
 80206e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80206e2:	4413      	add	r3, r2
 80206e4:	9321      	str	r3, [sp, #132]	; 0x84
 80206e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80206e8:	3301      	adds	r3, #1
 80206ea:	2b07      	cmp	r3, #7
 80206ec:	9320      	str	r3, [sp, #128]	; 0x80
 80206ee:	dc60      	bgt.n	80207b2 <_svfprintf_r+0xd32>
 80206f0:	3408      	adds	r4, #8
 80206f2:	9b03      	ldr	r3, [sp, #12]
 80206f4:	9a03      	ldr	r2, [sp, #12]
 80206f6:	1bde      	subs	r6, r3, r7
 80206f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80206fa:	1ad3      	subs	r3, r2, r3
 80206fc:	429e      	cmp	r6, r3
 80206fe:	bfa8      	it	ge
 8020700:	461e      	movge	r6, r3
 8020702:	2e00      	cmp	r6, #0
 8020704:	dd0b      	ble.n	802071e <_svfprintf_r+0xc9e>
 8020706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020708:	6066      	str	r6, [r4, #4]
 802070a:	4433      	add	r3, r6
 802070c:	9321      	str	r3, [sp, #132]	; 0x84
 802070e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020710:	3301      	adds	r3, #1
 8020712:	4447      	add	r7, r8
 8020714:	2b07      	cmp	r3, #7
 8020716:	6027      	str	r7, [r4, #0]
 8020718:	9320      	str	r3, [sp, #128]	; 0x80
 802071a:	dc54      	bgt.n	80207c6 <_svfprintf_r+0xd46>
 802071c:	3408      	adds	r4, #8
 802071e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020720:	9a03      	ldr	r2, [sp, #12]
 8020722:	2e00      	cmp	r6, #0
 8020724:	eba2 0303 	sub.w	r3, r2, r3
 8020728:	bfac      	ite	ge
 802072a:	1b9e      	subge	r6, r3, r6
 802072c:	461e      	movlt	r6, r3
 802072e:	2e00      	cmp	r6, #0
 8020730:	f77f acd7 	ble.w	80200e2 <_svfprintf_r+0x662>
 8020734:	4f2f      	ldr	r7, [pc, #188]	; (80207f4 <_svfprintf_r+0xd74>)
 8020736:	f04f 0810 	mov.w	r8, #16
 802073a:	2e10      	cmp	r6, #16
 802073c:	6027      	str	r7, [r4, #0]
 802073e:	f77f aee7 	ble.w	8020510 <_svfprintf_r+0xa90>
 8020742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020744:	f8c4 8004 	str.w	r8, [r4, #4]
 8020748:	3310      	adds	r3, #16
 802074a:	9321      	str	r3, [sp, #132]	; 0x84
 802074c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802074e:	3301      	adds	r3, #1
 8020750:	2b07      	cmp	r3, #7
 8020752:	9320      	str	r3, [sp, #128]	; 0x80
 8020754:	dc41      	bgt.n	80207da <_svfprintf_r+0xd5a>
 8020756:	3408      	adds	r4, #8
 8020758:	3e10      	subs	r6, #16
 802075a:	e7ee      	b.n	802073a <_svfprintf_r+0xcba>
 802075c:	aa1f      	add	r2, sp, #124	; 0x7c
 802075e:	4651      	mov	r1, sl
 8020760:	4658      	mov	r0, fp
 8020762:	f001 fccb 	bl	80220fc <__ssprint_r>
 8020766:	2800      	cmp	r0, #0
 8020768:	f040 80eb 	bne.w	8020942 <_svfprintf_r+0xec2>
 802076c:	ac2c      	add	r4, sp, #176	; 0xb0
 802076e:	e796      	b.n	802069e <_svfprintf_r+0xc1e>
 8020770:	2310      	movs	r3, #16
 8020772:	6063      	str	r3, [r4, #4]
 8020774:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020776:	3310      	adds	r3, #16
 8020778:	9321      	str	r3, [sp, #132]	; 0x84
 802077a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802077c:	3301      	adds	r3, #1
 802077e:	2b07      	cmp	r3, #7
 8020780:	9320      	str	r3, [sp, #128]	; 0x80
 8020782:	dc02      	bgt.n	802078a <_svfprintf_r+0xd0a>
 8020784:	3408      	adds	r4, #8
 8020786:	3e10      	subs	r6, #16
 8020788:	e791      	b.n	80206ae <_svfprintf_r+0xc2e>
 802078a:	aa1f      	add	r2, sp, #124	; 0x7c
 802078c:	4651      	mov	r1, sl
 802078e:	4658      	mov	r0, fp
 8020790:	f001 fcb4 	bl	80220fc <__ssprint_r>
 8020794:	2800      	cmp	r0, #0
 8020796:	f040 80d4 	bne.w	8020942 <_svfprintf_r+0xec2>
 802079a:	ac2c      	add	r4, sp, #176	; 0xb0
 802079c:	e7f3      	b.n	8020786 <_svfprintf_r+0xd06>
 802079e:	aa1f      	add	r2, sp, #124	; 0x7c
 80207a0:	4651      	mov	r1, sl
 80207a2:	4658      	mov	r0, fp
 80207a4:	f001 fcaa 	bl	80220fc <__ssprint_r>
 80207a8:	2800      	cmp	r0, #0
 80207aa:	f040 80ca 	bne.w	8020942 <_svfprintf_r+0xec2>
 80207ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80207b0:	e78b      	b.n	80206ca <_svfprintf_r+0xc4a>
 80207b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80207b4:	4651      	mov	r1, sl
 80207b6:	4658      	mov	r0, fp
 80207b8:	f001 fca0 	bl	80220fc <__ssprint_r>
 80207bc:	2800      	cmp	r0, #0
 80207be:	f040 80c0 	bne.w	8020942 <_svfprintf_r+0xec2>
 80207c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80207c4:	e795      	b.n	80206f2 <_svfprintf_r+0xc72>
 80207c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80207c8:	4651      	mov	r1, sl
 80207ca:	4658      	mov	r0, fp
 80207cc:	f001 fc96 	bl	80220fc <__ssprint_r>
 80207d0:	2800      	cmp	r0, #0
 80207d2:	f040 80b6 	bne.w	8020942 <_svfprintf_r+0xec2>
 80207d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80207d8:	e7a1      	b.n	802071e <_svfprintf_r+0xc9e>
 80207da:	aa1f      	add	r2, sp, #124	; 0x7c
 80207dc:	4651      	mov	r1, sl
 80207de:	4658      	mov	r0, fp
 80207e0:	f001 fc8c 	bl	80220fc <__ssprint_r>
 80207e4:	2800      	cmp	r0, #0
 80207e6:	f040 80ac 	bne.w	8020942 <_svfprintf_r+0xec2>
 80207ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80207ec:	e7b4      	b.n	8020758 <_svfprintf_r+0xcd8>
 80207ee:	bf00      	nop
 80207f0:	0803147d 	.word	0x0803147d
 80207f4:	080315fa 	.word	0x080315fa
 80207f8:	9b03      	ldr	r3, [sp, #12]
 80207fa:	2b01      	cmp	r3, #1
 80207fc:	dc01      	bgt.n	8020802 <_svfprintf_r+0xd82>
 80207fe:	07ea      	lsls	r2, r5, #31
 8020800:	d576      	bpl.n	80208f0 <_svfprintf_r+0xe70>
 8020802:	2301      	movs	r3, #1
 8020804:	6063      	str	r3, [r4, #4]
 8020806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020808:	f8c4 8000 	str.w	r8, [r4]
 802080c:	3301      	adds	r3, #1
 802080e:	9321      	str	r3, [sp, #132]	; 0x84
 8020810:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020812:	3301      	adds	r3, #1
 8020814:	2b07      	cmp	r3, #7
 8020816:	9320      	str	r3, [sp, #128]	; 0x80
 8020818:	dc36      	bgt.n	8020888 <_svfprintf_r+0xe08>
 802081a:	3408      	adds	r4, #8
 802081c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802081e:	6023      	str	r3, [r4, #0]
 8020820:	9b08      	ldr	r3, [sp, #32]
 8020822:	6063      	str	r3, [r4, #4]
 8020824:	9a08      	ldr	r2, [sp, #32]
 8020826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020828:	4413      	add	r3, r2
 802082a:	9321      	str	r3, [sp, #132]	; 0x84
 802082c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802082e:	3301      	adds	r3, #1
 8020830:	2b07      	cmp	r3, #7
 8020832:	9320      	str	r3, [sp, #128]	; 0x80
 8020834:	dc31      	bgt.n	802089a <_svfprintf_r+0xe1a>
 8020836:	3408      	adds	r4, #8
 8020838:	2300      	movs	r3, #0
 802083a:	2200      	movs	r2, #0
 802083c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020840:	f7e0 f956 	bl	8000af0 <__aeabi_dcmpeq>
 8020844:	9b03      	ldr	r3, [sp, #12]
 8020846:	1e5e      	subs	r6, r3, #1
 8020848:	2800      	cmp	r0, #0
 802084a:	d12f      	bne.n	80208ac <_svfprintf_r+0xe2c>
 802084c:	f108 0301 	add.w	r3, r8, #1
 8020850:	e884 0048 	stmia.w	r4, {r3, r6}
 8020854:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020856:	9a03      	ldr	r2, [sp, #12]
 8020858:	3b01      	subs	r3, #1
 802085a:	4413      	add	r3, r2
 802085c:	9321      	str	r3, [sp, #132]	; 0x84
 802085e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020860:	3301      	adds	r3, #1
 8020862:	2b07      	cmp	r3, #7
 8020864:	9320      	str	r3, [sp, #128]	; 0x80
 8020866:	dd4a      	ble.n	80208fe <_svfprintf_r+0xe7e>
 8020868:	aa1f      	add	r2, sp, #124	; 0x7c
 802086a:	4651      	mov	r1, sl
 802086c:	4658      	mov	r0, fp
 802086e:	f001 fc45 	bl	80220fc <__ssprint_r>
 8020872:	2800      	cmp	r0, #0
 8020874:	d165      	bne.n	8020942 <_svfprintf_r+0xec2>
 8020876:	ac2c      	add	r4, sp, #176	; 0xb0
 8020878:	ab1b      	add	r3, sp, #108	; 0x6c
 802087a:	6023      	str	r3, [r4, #0]
 802087c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802087e:	6063      	str	r3, [r4, #4]
 8020880:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020884:	4413      	add	r3, r2
 8020886:	e41c      	b.n	80200c2 <_svfprintf_r+0x642>
 8020888:	aa1f      	add	r2, sp, #124	; 0x7c
 802088a:	4651      	mov	r1, sl
 802088c:	4658      	mov	r0, fp
 802088e:	f001 fc35 	bl	80220fc <__ssprint_r>
 8020892:	2800      	cmp	r0, #0
 8020894:	d155      	bne.n	8020942 <_svfprintf_r+0xec2>
 8020896:	ac2c      	add	r4, sp, #176	; 0xb0
 8020898:	e7c0      	b.n	802081c <_svfprintf_r+0xd9c>
 802089a:	aa1f      	add	r2, sp, #124	; 0x7c
 802089c:	4651      	mov	r1, sl
 802089e:	4658      	mov	r0, fp
 80208a0:	f001 fc2c 	bl	80220fc <__ssprint_r>
 80208a4:	2800      	cmp	r0, #0
 80208a6:	d14c      	bne.n	8020942 <_svfprintf_r+0xec2>
 80208a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80208aa:	e7c5      	b.n	8020838 <_svfprintf_r+0xdb8>
 80208ac:	2e00      	cmp	r6, #0
 80208ae:	dde3      	ble.n	8020878 <_svfprintf_r+0xdf8>
 80208b0:	4f59      	ldr	r7, [pc, #356]	; (8020a18 <_svfprintf_r+0xf98>)
 80208b2:	f04f 0810 	mov.w	r8, #16
 80208b6:	2e10      	cmp	r6, #16
 80208b8:	6027      	str	r7, [r4, #0]
 80208ba:	dc04      	bgt.n	80208c6 <_svfprintf_r+0xe46>
 80208bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208be:	6066      	str	r6, [r4, #4]
 80208c0:	441e      	add	r6, r3
 80208c2:	9621      	str	r6, [sp, #132]	; 0x84
 80208c4:	e7cb      	b.n	802085e <_svfprintf_r+0xdde>
 80208c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208c8:	f8c4 8004 	str.w	r8, [r4, #4]
 80208cc:	3310      	adds	r3, #16
 80208ce:	9321      	str	r3, [sp, #132]	; 0x84
 80208d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80208d2:	3301      	adds	r3, #1
 80208d4:	2b07      	cmp	r3, #7
 80208d6:	9320      	str	r3, [sp, #128]	; 0x80
 80208d8:	dc02      	bgt.n	80208e0 <_svfprintf_r+0xe60>
 80208da:	3408      	adds	r4, #8
 80208dc:	3e10      	subs	r6, #16
 80208de:	e7ea      	b.n	80208b6 <_svfprintf_r+0xe36>
 80208e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80208e2:	4651      	mov	r1, sl
 80208e4:	4658      	mov	r0, fp
 80208e6:	f001 fc09 	bl	80220fc <__ssprint_r>
 80208ea:	bb50      	cbnz	r0, 8020942 <_svfprintf_r+0xec2>
 80208ec:	ac2c      	add	r4, sp, #176	; 0xb0
 80208ee:	e7f5      	b.n	80208dc <_svfprintf_r+0xe5c>
 80208f0:	2301      	movs	r3, #1
 80208f2:	6063      	str	r3, [r4, #4]
 80208f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208f6:	f8c4 8000 	str.w	r8, [r4]
 80208fa:	3301      	adds	r3, #1
 80208fc:	e7ae      	b.n	802085c <_svfprintf_r+0xddc>
 80208fe:	3408      	adds	r4, #8
 8020900:	e7ba      	b.n	8020878 <_svfprintf_r+0xdf8>
 8020902:	3408      	adds	r4, #8
 8020904:	f7ff bbed 	b.w	80200e2 <_svfprintf_r+0x662>
 8020908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802090a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802090c:	1a9d      	subs	r5, r3, r2
 802090e:	2d00      	cmp	r5, #0
 8020910:	f77f abea 	ble.w	80200e8 <_svfprintf_r+0x668>
 8020914:	2610      	movs	r6, #16
 8020916:	4b41      	ldr	r3, [pc, #260]	; (8020a1c <_svfprintf_r+0xf9c>)
 8020918:	6023      	str	r3, [r4, #0]
 802091a:	2d10      	cmp	r5, #16
 802091c:	dc1b      	bgt.n	8020956 <_svfprintf_r+0xed6>
 802091e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020920:	6065      	str	r5, [r4, #4]
 8020922:	441d      	add	r5, r3
 8020924:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020926:	9521      	str	r5, [sp, #132]	; 0x84
 8020928:	3301      	adds	r3, #1
 802092a:	2b07      	cmp	r3, #7
 802092c:	9320      	str	r3, [sp, #128]	; 0x80
 802092e:	f77f abdb 	ble.w	80200e8 <_svfprintf_r+0x668>
 8020932:	aa1f      	add	r2, sp, #124	; 0x7c
 8020934:	4651      	mov	r1, sl
 8020936:	4658      	mov	r0, fp
 8020938:	f001 fbe0 	bl	80220fc <__ssprint_r>
 802093c:	2800      	cmp	r0, #0
 802093e:	f43f abd3 	beq.w	80200e8 <_svfprintf_r+0x668>
 8020942:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8020946:	f013 0f40 	tst.w	r3, #64	; 0x40
 802094a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802094c:	bf18      	it	ne
 802094e:	f04f 33ff 	movne.w	r3, #4294967295
 8020952:	f7ff b8b9 	b.w	801fac8 <_svfprintf_r+0x48>
 8020956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020958:	6066      	str	r6, [r4, #4]
 802095a:	3310      	adds	r3, #16
 802095c:	9321      	str	r3, [sp, #132]	; 0x84
 802095e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020960:	3301      	adds	r3, #1
 8020962:	2b07      	cmp	r3, #7
 8020964:	9320      	str	r3, [sp, #128]	; 0x80
 8020966:	dc02      	bgt.n	802096e <_svfprintf_r+0xeee>
 8020968:	3408      	adds	r4, #8
 802096a:	3d10      	subs	r5, #16
 802096c:	e7d3      	b.n	8020916 <_svfprintf_r+0xe96>
 802096e:	aa1f      	add	r2, sp, #124	; 0x7c
 8020970:	4651      	mov	r1, sl
 8020972:	4658      	mov	r0, fp
 8020974:	f001 fbc2 	bl	80220fc <__ssprint_r>
 8020978:	2800      	cmp	r0, #0
 802097a:	d1e2      	bne.n	8020942 <_svfprintf_r+0xec2>
 802097c:	ac2c      	add	r4, sp, #176	; 0xb0
 802097e:	e7f4      	b.n	802096a <_svfprintf_r+0xeea>
 8020980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020982:	2b00      	cmp	r3, #0
 8020984:	d0dd      	beq.n	8020942 <_svfprintf_r+0xec2>
 8020986:	aa1f      	add	r2, sp, #124	; 0x7c
 8020988:	4651      	mov	r1, sl
 802098a:	4658      	mov	r0, fp
 802098c:	f001 fbb6 	bl	80220fc <__ssprint_r>
 8020990:	e7d7      	b.n	8020942 <_svfprintf_r+0xec2>
 8020992:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020996:	4610      	mov	r0, r2
 8020998:	4619      	mov	r1, r3
 802099a:	f7e0 f8db 	bl	8000b54 <__aeabi_dcmpun>
 802099e:	2800      	cmp	r0, #0
 80209a0:	f43f aa44 	beq.w	801fe2c <_svfprintf_r+0x3ac>
 80209a4:	4b1e      	ldr	r3, [pc, #120]	; (8020a20 <_svfprintf_r+0xfa0>)
 80209a6:	4a1f      	ldr	r2, [pc, #124]	; (8020a24 <_svfprintf_r+0xfa4>)
 80209a8:	f7ff ba34 	b.w	801fe14 <_svfprintf_r+0x394>
 80209ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80209ae:	eba3 0308 	sub.w	r3, r3, r8
 80209b2:	9303      	str	r3, [sp, #12]
 80209b4:	f7ff bab5 	b.w	801ff22 <_svfprintf_r+0x4a2>
 80209b8:	ea56 0207 	orrs.w	r2, r6, r7
 80209bc:	950b      	str	r5, [sp, #44]	; 0x2c
 80209be:	f43f ac2b 	beq.w	8020218 <_svfprintf_r+0x798>
 80209c2:	2b01      	cmp	r3, #1
 80209c4:	f43f ac9d 	beq.w	8020302 <_svfprintf_r+0x882>
 80209c8:	2b02      	cmp	r3, #2
 80209ca:	f43f acbd 	beq.w	8020348 <_svfprintf_r+0x8c8>
 80209ce:	ab2c      	add	r3, sp, #176	; 0xb0
 80209d0:	08f1      	lsrs	r1, r6, #3
 80209d2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80209d6:	08f8      	lsrs	r0, r7, #3
 80209d8:	f006 0207 	and.w	r2, r6, #7
 80209dc:	4607      	mov	r7, r0
 80209de:	460e      	mov	r6, r1
 80209e0:	3230      	adds	r2, #48	; 0x30
 80209e2:	ea56 0107 	orrs.w	r1, r6, r7
 80209e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80209ea:	f803 2c01 	strb.w	r2, [r3, #-1]
 80209ee:	f47f ac86 	bne.w	80202fe <_svfprintf_r+0x87e>
 80209f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80209f4:	07c9      	lsls	r1, r1, #31
 80209f6:	d506      	bpl.n	8020a06 <_svfprintf_r+0xf86>
 80209f8:	2a30      	cmp	r2, #48	; 0x30
 80209fa:	d004      	beq.n	8020a06 <_svfprintf_r+0xf86>
 80209fc:	2230      	movs	r2, #48	; 0x30
 80209fe:	f808 2c01 	strb.w	r2, [r8, #-1]
 8020a02:	f1a3 0802 	sub.w	r8, r3, #2
 8020a06:	464e      	mov	r6, r9
 8020a08:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8020a0c:	eba9 0908 	sub.w	r9, r9, r8
 8020a10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020a12:	2700      	movs	r7, #0
 8020a14:	f7ff bad1 	b.w	801ffba <_svfprintf_r+0x53a>
 8020a18:	080315fa 	.word	0x080315fa
 8020a1c:	080315ea 	.word	0x080315ea
 8020a20:	08031483 	.word	0x08031483
 8020a24:	080315c4 	.word	0x080315c4

08020a28 <quorem>:
 8020a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a2c:	6903      	ldr	r3, [r0, #16]
 8020a2e:	690c      	ldr	r4, [r1, #16]
 8020a30:	429c      	cmp	r4, r3
 8020a32:	4680      	mov	r8, r0
 8020a34:	f300 8082 	bgt.w	8020b3c <quorem+0x114>
 8020a38:	3c01      	subs	r4, #1
 8020a3a:	f101 0714 	add.w	r7, r1, #20
 8020a3e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8020a42:	f100 0614 	add.w	r6, r0, #20
 8020a46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8020a4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8020a4e:	eb06 030e 	add.w	r3, r6, lr
 8020a52:	3501      	adds	r5, #1
 8020a54:	eb07 090e 	add.w	r9, r7, lr
 8020a58:	9301      	str	r3, [sp, #4]
 8020a5a:	fbb0 f5f5 	udiv	r5, r0, r5
 8020a5e:	b395      	cbz	r5, 8020ac6 <quorem+0x9e>
 8020a60:	f04f 0a00 	mov.w	sl, #0
 8020a64:	4638      	mov	r0, r7
 8020a66:	46b4      	mov	ip, r6
 8020a68:	46d3      	mov	fp, sl
 8020a6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8020a6e:	b293      	uxth	r3, r2
 8020a70:	fb05 a303 	mla	r3, r5, r3, sl
 8020a74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020a78:	b29b      	uxth	r3, r3
 8020a7a:	ebab 0303 	sub.w	r3, fp, r3
 8020a7e:	0c12      	lsrs	r2, r2, #16
 8020a80:	f8bc b000 	ldrh.w	fp, [ip]
 8020a84:	fb05 a202 	mla	r2, r5, r2, sl
 8020a88:	fa13 f38b 	uxtah	r3, r3, fp
 8020a8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8020a90:	fa1f fb82 	uxth.w	fp, r2
 8020a94:	f8dc 2000 	ldr.w	r2, [ip]
 8020a98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8020a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020aa0:	b29b      	uxth	r3, r3
 8020aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020aa6:	4581      	cmp	r9, r0
 8020aa8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8020aac:	f84c 3b04 	str.w	r3, [ip], #4
 8020ab0:	d2db      	bcs.n	8020a6a <quorem+0x42>
 8020ab2:	f856 300e 	ldr.w	r3, [r6, lr]
 8020ab6:	b933      	cbnz	r3, 8020ac6 <quorem+0x9e>
 8020ab8:	9b01      	ldr	r3, [sp, #4]
 8020aba:	3b04      	subs	r3, #4
 8020abc:	429e      	cmp	r6, r3
 8020abe:	461a      	mov	r2, r3
 8020ac0:	d330      	bcc.n	8020b24 <quorem+0xfc>
 8020ac2:	f8c8 4010 	str.w	r4, [r8, #16]
 8020ac6:	4640      	mov	r0, r8
 8020ac8:	f001 fa41 	bl	8021f4e <__mcmp>
 8020acc:	2800      	cmp	r0, #0
 8020ace:	db25      	blt.n	8020b1c <quorem+0xf4>
 8020ad0:	3501      	adds	r5, #1
 8020ad2:	4630      	mov	r0, r6
 8020ad4:	f04f 0e00 	mov.w	lr, #0
 8020ad8:	f857 2b04 	ldr.w	r2, [r7], #4
 8020adc:	f8d0 c000 	ldr.w	ip, [r0]
 8020ae0:	b293      	uxth	r3, r2
 8020ae2:	ebae 0303 	sub.w	r3, lr, r3
 8020ae6:	0c12      	lsrs	r2, r2, #16
 8020ae8:	fa13 f38c 	uxtah	r3, r3, ip
 8020aec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8020af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020af4:	b29b      	uxth	r3, r3
 8020af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020afa:	45b9      	cmp	r9, r7
 8020afc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8020b00:	f840 3b04 	str.w	r3, [r0], #4
 8020b04:	d2e8      	bcs.n	8020ad8 <quorem+0xb0>
 8020b06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8020b0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8020b0e:	b92a      	cbnz	r2, 8020b1c <quorem+0xf4>
 8020b10:	3b04      	subs	r3, #4
 8020b12:	429e      	cmp	r6, r3
 8020b14:	461a      	mov	r2, r3
 8020b16:	d30b      	bcc.n	8020b30 <quorem+0x108>
 8020b18:	f8c8 4010 	str.w	r4, [r8, #16]
 8020b1c:	4628      	mov	r0, r5
 8020b1e:	b003      	add	sp, #12
 8020b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b24:	6812      	ldr	r2, [r2, #0]
 8020b26:	3b04      	subs	r3, #4
 8020b28:	2a00      	cmp	r2, #0
 8020b2a:	d1ca      	bne.n	8020ac2 <quorem+0x9a>
 8020b2c:	3c01      	subs	r4, #1
 8020b2e:	e7c5      	b.n	8020abc <quorem+0x94>
 8020b30:	6812      	ldr	r2, [r2, #0]
 8020b32:	3b04      	subs	r3, #4
 8020b34:	2a00      	cmp	r2, #0
 8020b36:	d1ef      	bne.n	8020b18 <quorem+0xf0>
 8020b38:	3c01      	subs	r4, #1
 8020b3a:	e7ea      	b.n	8020b12 <quorem+0xea>
 8020b3c:	2000      	movs	r0, #0
 8020b3e:	e7ee      	b.n	8020b1e <quorem+0xf6>

08020b40 <_dtoa_r>:
 8020b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b44:	ec57 6b10 	vmov	r6, r7, d0
 8020b48:	b097      	sub	sp, #92	; 0x5c
 8020b4a:	e9cd 6700 	strd	r6, r7, [sp]
 8020b4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020b50:	9107      	str	r1, [sp, #28]
 8020b52:	4604      	mov	r4, r0
 8020b54:	920a      	str	r2, [sp, #40]	; 0x28
 8020b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b58:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8020b5a:	b93e      	cbnz	r6, 8020b6c <_dtoa_r+0x2c>
 8020b5c:	2010      	movs	r0, #16
 8020b5e:	f000 fdcb 	bl	80216f8 <malloc>
 8020b62:	6260      	str	r0, [r4, #36]	; 0x24
 8020b64:	6046      	str	r6, [r0, #4]
 8020b66:	6086      	str	r6, [r0, #8]
 8020b68:	6006      	str	r6, [r0, #0]
 8020b6a:	60c6      	str	r6, [r0, #12]
 8020b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020b6e:	6819      	ldr	r1, [r3, #0]
 8020b70:	b151      	cbz	r1, 8020b88 <_dtoa_r+0x48>
 8020b72:	685a      	ldr	r2, [r3, #4]
 8020b74:	604a      	str	r2, [r1, #4]
 8020b76:	2301      	movs	r3, #1
 8020b78:	4093      	lsls	r3, r2
 8020b7a:	608b      	str	r3, [r1, #8]
 8020b7c:	4620      	mov	r0, r4
 8020b7e:	f001 f811 	bl	8021ba4 <_Bfree>
 8020b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020b84:	2200      	movs	r2, #0
 8020b86:	601a      	str	r2, [r3, #0]
 8020b88:	9b01      	ldr	r3, [sp, #4]
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	bfbf      	itttt	lt
 8020b8e:	2301      	movlt	r3, #1
 8020b90:	602b      	strlt	r3, [r5, #0]
 8020b92:	9b01      	ldrlt	r3, [sp, #4]
 8020b94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8020b98:	bfb2      	itee	lt
 8020b9a:	9301      	strlt	r3, [sp, #4]
 8020b9c:	2300      	movge	r3, #0
 8020b9e:	602b      	strge	r3, [r5, #0]
 8020ba0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020ba4:	4ba8      	ldr	r3, [pc, #672]	; (8020e48 <_dtoa_r+0x308>)
 8020ba6:	ea33 0308 	bics.w	r3, r3, r8
 8020baa:	d11b      	bne.n	8020be4 <_dtoa_r+0xa4>
 8020bac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020bae:	f242 730f 	movw	r3, #9999	; 0x270f
 8020bb2:	6013      	str	r3, [r2, #0]
 8020bb4:	9b00      	ldr	r3, [sp, #0]
 8020bb6:	b923      	cbnz	r3, 8020bc2 <_dtoa_r+0x82>
 8020bb8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8020bbc:	2800      	cmp	r0, #0
 8020bbe:	f000 8578 	beq.w	80216b2 <_dtoa_r+0xb72>
 8020bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020bc4:	b953      	cbnz	r3, 8020bdc <_dtoa_r+0x9c>
 8020bc6:	4ba1      	ldr	r3, [pc, #644]	; (8020e4c <_dtoa_r+0x30c>)
 8020bc8:	e021      	b.n	8020c0e <_dtoa_r+0xce>
 8020bca:	4ba1      	ldr	r3, [pc, #644]	; (8020e50 <_dtoa_r+0x310>)
 8020bcc:	9302      	str	r3, [sp, #8]
 8020bce:	3308      	adds	r3, #8
 8020bd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020bd2:	6013      	str	r3, [r2, #0]
 8020bd4:	9802      	ldr	r0, [sp, #8]
 8020bd6:	b017      	add	sp, #92	; 0x5c
 8020bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bdc:	4b9b      	ldr	r3, [pc, #620]	; (8020e4c <_dtoa_r+0x30c>)
 8020bde:	9302      	str	r3, [sp, #8]
 8020be0:	3303      	adds	r3, #3
 8020be2:	e7f5      	b.n	8020bd0 <_dtoa_r+0x90>
 8020be4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020be8:	2200      	movs	r2, #0
 8020bea:	2300      	movs	r3, #0
 8020bec:	4630      	mov	r0, r6
 8020bee:	4639      	mov	r1, r7
 8020bf0:	f7df ff7e 	bl	8000af0 <__aeabi_dcmpeq>
 8020bf4:	4681      	mov	r9, r0
 8020bf6:	b160      	cbz	r0, 8020c12 <_dtoa_r+0xd2>
 8020bf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020bfa:	2301      	movs	r3, #1
 8020bfc:	6013      	str	r3, [r2, #0]
 8020bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	f000 8553 	beq.w	80216ac <_dtoa_r+0xb6c>
 8020c06:	4b93      	ldr	r3, [pc, #588]	; (8020e54 <_dtoa_r+0x314>)
 8020c08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020c0a:	6013      	str	r3, [r2, #0]
 8020c0c:	3b01      	subs	r3, #1
 8020c0e:	9302      	str	r3, [sp, #8]
 8020c10:	e7e0      	b.n	8020bd4 <_dtoa_r+0x94>
 8020c12:	aa14      	add	r2, sp, #80	; 0x50
 8020c14:	a915      	add	r1, sp, #84	; 0x54
 8020c16:	ec47 6b10 	vmov	d0, r6, r7
 8020c1a:	4620      	mov	r0, r4
 8020c1c:	f001 fa0f 	bl	802203e <__d2b>
 8020c20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8020c24:	4682      	mov	sl, r0
 8020c26:	2d00      	cmp	r5, #0
 8020c28:	d07e      	beq.n	8020d28 <_dtoa_r+0x1e8>
 8020c2a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020c2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8020c32:	4630      	mov	r0, r6
 8020c34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8020c38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020c3c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8020c40:	2200      	movs	r2, #0
 8020c42:	4b85      	ldr	r3, [pc, #532]	; (8020e58 <_dtoa_r+0x318>)
 8020c44:	f7df fb38 	bl	80002b8 <__aeabi_dsub>
 8020c48:	a379      	add	r3, pc, #484	; (adr r3, 8020e30 <_dtoa_r+0x2f0>)
 8020c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c4e:	f7df fce7 	bl	8000620 <__aeabi_dmul>
 8020c52:	a379      	add	r3, pc, #484	; (adr r3, 8020e38 <_dtoa_r+0x2f8>)
 8020c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c58:	f7df fb30 	bl	80002bc <__adddf3>
 8020c5c:	4606      	mov	r6, r0
 8020c5e:	4628      	mov	r0, r5
 8020c60:	460f      	mov	r7, r1
 8020c62:	f7df fc77 	bl	8000554 <__aeabi_i2d>
 8020c66:	a376      	add	r3, pc, #472	; (adr r3, 8020e40 <_dtoa_r+0x300>)
 8020c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c6c:	f7df fcd8 	bl	8000620 <__aeabi_dmul>
 8020c70:	4602      	mov	r2, r0
 8020c72:	460b      	mov	r3, r1
 8020c74:	4630      	mov	r0, r6
 8020c76:	4639      	mov	r1, r7
 8020c78:	f7df fb20 	bl	80002bc <__adddf3>
 8020c7c:	4606      	mov	r6, r0
 8020c7e:	460f      	mov	r7, r1
 8020c80:	f7df ff7e 	bl	8000b80 <__aeabi_d2iz>
 8020c84:	2200      	movs	r2, #0
 8020c86:	4683      	mov	fp, r0
 8020c88:	2300      	movs	r3, #0
 8020c8a:	4630      	mov	r0, r6
 8020c8c:	4639      	mov	r1, r7
 8020c8e:	f7df ff39 	bl	8000b04 <__aeabi_dcmplt>
 8020c92:	b158      	cbz	r0, 8020cac <_dtoa_r+0x16c>
 8020c94:	4658      	mov	r0, fp
 8020c96:	f7df fc5d 	bl	8000554 <__aeabi_i2d>
 8020c9a:	4602      	mov	r2, r0
 8020c9c:	460b      	mov	r3, r1
 8020c9e:	4630      	mov	r0, r6
 8020ca0:	4639      	mov	r1, r7
 8020ca2:	f7df ff25 	bl	8000af0 <__aeabi_dcmpeq>
 8020ca6:	b908      	cbnz	r0, 8020cac <_dtoa_r+0x16c>
 8020ca8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020cac:	f1bb 0f16 	cmp.w	fp, #22
 8020cb0:	d859      	bhi.n	8020d66 <_dtoa_r+0x226>
 8020cb2:	496a      	ldr	r1, [pc, #424]	; (8020e5c <_dtoa_r+0x31c>)
 8020cb4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8020cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020cc0:	f7df ff3e 	bl	8000b40 <__aeabi_dcmpgt>
 8020cc4:	2800      	cmp	r0, #0
 8020cc6:	d050      	beq.n	8020d6a <_dtoa_r+0x22a>
 8020cc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020ccc:	2300      	movs	r3, #0
 8020cce:	930e      	str	r3, [sp, #56]	; 0x38
 8020cd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020cd2:	1b5d      	subs	r5, r3, r5
 8020cd4:	1e6b      	subs	r3, r5, #1
 8020cd6:	9306      	str	r3, [sp, #24]
 8020cd8:	bf45      	ittet	mi
 8020cda:	f1c5 0301 	rsbmi	r3, r5, #1
 8020cde:	9305      	strmi	r3, [sp, #20]
 8020ce0:	2300      	movpl	r3, #0
 8020ce2:	2300      	movmi	r3, #0
 8020ce4:	bf4c      	ite	mi
 8020ce6:	9306      	strmi	r3, [sp, #24]
 8020ce8:	9305      	strpl	r3, [sp, #20]
 8020cea:	f1bb 0f00 	cmp.w	fp, #0
 8020cee:	db3e      	blt.n	8020d6e <_dtoa_r+0x22e>
 8020cf0:	9b06      	ldr	r3, [sp, #24]
 8020cf2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8020cf6:	445b      	add	r3, fp
 8020cf8:	9306      	str	r3, [sp, #24]
 8020cfa:	2300      	movs	r3, #0
 8020cfc:	9308      	str	r3, [sp, #32]
 8020cfe:	9b07      	ldr	r3, [sp, #28]
 8020d00:	2b09      	cmp	r3, #9
 8020d02:	f200 80af 	bhi.w	8020e64 <_dtoa_r+0x324>
 8020d06:	2b05      	cmp	r3, #5
 8020d08:	bfc4      	itt	gt
 8020d0a:	3b04      	subgt	r3, #4
 8020d0c:	9307      	strgt	r3, [sp, #28]
 8020d0e:	9b07      	ldr	r3, [sp, #28]
 8020d10:	f1a3 0302 	sub.w	r3, r3, #2
 8020d14:	bfcc      	ite	gt
 8020d16:	2600      	movgt	r6, #0
 8020d18:	2601      	movle	r6, #1
 8020d1a:	2b03      	cmp	r3, #3
 8020d1c:	f200 80ae 	bhi.w	8020e7c <_dtoa_r+0x33c>
 8020d20:	e8df f003 	tbb	[pc, r3]
 8020d24:	772f8482 	.word	0x772f8482
 8020d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020d2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020d2c:	441d      	add	r5, r3
 8020d2e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020d32:	2b20      	cmp	r3, #32
 8020d34:	dd11      	ble.n	8020d5a <_dtoa_r+0x21a>
 8020d36:	9a00      	ldr	r2, [sp, #0]
 8020d38:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8020d3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8020d40:	fa22 f000 	lsr.w	r0, r2, r0
 8020d44:	fa08 f303 	lsl.w	r3, r8, r3
 8020d48:	4318      	orrs	r0, r3
 8020d4a:	f7df fbf3 	bl	8000534 <__aeabi_ui2d>
 8020d4e:	2301      	movs	r3, #1
 8020d50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8020d54:	3d01      	subs	r5, #1
 8020d56:	9312      	str	r3, [sp, #72]	; 0x48
 8020d58:	e772      	b.n	8020c40 <_dtoa_r+0x100>
 8020d5a:	f1c3 0020 	rsb	r0, r3, #32
 8020d5e:	9b00      	ldr	r3, [sp, #0]
 8020d60:	fa03 f000 	lsl.w	r0, r3, r0
 8020d64:	e7f1      	b.n	8020d4a <_dtoa_r+0x20a>
 8020d66:	2301      	movs	r3, #1
 8020d68:	e7b1      	b.n	8020cce <_dtoa_r+0x18e>
 8020d6a:	900e      	str	r0, [sp, #56]	; 0x38
 8020d6c:	e7b0      	b.n	8020cd0 <_dtoa_r+0x190>
 8020d6e:	9b05      	ldr	r3, [sp, #20]
 8020d70:	eba3 030b 	sub.w	r3, r3, fp
 8020d74:	9305      	str	r3, [sp, #20]
 8020d76:	f1cb 0300 	rsb	r3, fp, #0
 8020d7a:	9308      	str	r3, [sp, #32]
 8020d7c:	2300      	movs	r3, #0
 8020d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020d80:	e7bd      	b.n	8020cfe <_dtoa_r+0x1be>
 8020d82:	2301      	movs	r3, #1
 8020d84:	9309      	str	r3, [sp, #36]	; 0x24
 8020d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	dd7a      	ble.n	8020e82 <_dtoa_r+0x342>
 8020d8c:	9304      	str	r3, [sp, #16]
 8020d8e:	9303      	str	r3, [sp, #12]
 8020d90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8020d92:	2200      	movs	r2, #0
 8020d94:	606a      	str	r2, [r5, #4]
 8020d96:	2104      	movs	r1, #4
 8020d98:	f101 0214 	add.w	r2, r1, #20
 8020d9c:	429a      	cmp	r2, r3
 8020d9e:	d975      	bls.n	8020e8c <_dtoa_r+0x34c>
 8020da0:	6869      	ldr	r1, [r5, #4]
 8020da2:	4620      	mov	r0, r4
 8020da4:	f000 feca 	bl	8021b3c <_Balloc>
 8020da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020daa:	6028      	str	r0, [r5, #0]
 8020dac:	681b      	ldr	r3, [r3, #0]
 8020dae:	9302      	str	r3, [sp, #8]
 8020db0:	9b03      	ldr	r3, [sp, #12]
 8020db2:	2b0e      	cmp	r3, #14
 8020db4:	f200 80e5 	bhi.w	8020f82 <_dtoa_r+0x442>
 8020db8:	2e00      	cmp	r6, #0
 8020dba:	f000 80e2 	beq.w	8020f82 <_dtoa_r+0x442>
 8020dbe:	ed9d 7b00 	vldr	d7, [sp]
 8020dc2:	f1bb 0f00 	cmp.w	fp, #0
 8020dc6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8020dca:	dd74      	ble.n	8020eb6 <_dtoa_r+0x376>
 8020dcc:	4a23      	ldr	r2, [pc, #140]	; (8020e5c <_dtoa_r+0x31c>)
 8020dce:	f00b 030f 	and.w	r3, fp, #15
 8020dd2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8020dd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020dda:	06f0      	lsls	r0, r6, #27
 8020ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020de0:	d559      	bpl.n	8020e96 <_dtoa_r+0x356>
 8020de2:	4b1f      	ldr	r3, [pc, #124]	; (8020e60 <_dtoa_r+0x320>)
 8020de4:	ec51 0b17 	vmov	r0, r1, d7
 8020de8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020dec:	f7df fd42 	bl	8000874 <__aeabi_ddiv>
 8020df0:	e9cd 0100 	strd	r0, r1, [sp]
 8020df4:	f006 060f 	and.w	r6, r6, #15
 8020df8:	2503      	movs	r5, #3
 8020dfa:	4f19      	ldr	r7, [pc, #100]	; (8020e60 <_dtoa_r+0x320>)
 8020dfc:	2e00      	cmp	r6, #0
 8020dfe:	d14c      	bne.n	8020e9a <_dtoa_r+0x35a>
 8020e00:	4642      	mov	r2, r8
 8020e02:	464b      	mov	r3, r9
 8020e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020e08:	f7df fd34 	bl	8000874 <__aeabi_ddiv>
 8020e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8020e10:	e06a      	b.n	8020ee8 <_dtoa_r+0x3a8>
 8020e12:	2301      	movs	r3, #1
 8020e14:	9309      	str	r3, [sp, #36]	; 0x24
 8020e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e18:	445b      	add	r3, fp
 8020e1a:	9304      	str	r3, [sp, #16]
 8020e1c:	3301      	adds	r3, #1
 8020e1e:	2b01      	cmp	r3, #1
 8020e20:	9303      	str	r3, [sp, #12]
 8020e22:	bfb8      	it	lt
 8020e24:	2301      	movlt	r3, #1
 8020e26:	e7b3      	b.n	8020d90 <_dtoa_r+0x250>
 8020e28:	2300      	movs	r3, #0
 8020e2a:	e7ab      	b.n	8020d84 <_dtoa_r+0x244>
 8020e2c:	2300      	movs	r3, #0
 8020e2e:	e7f1      	b.n	8020e14 <_dtoa_r+0x2d4>
 8020e30:	636f4361 	.word	0x636f4361
 8020e34:	3fd287a7 	.word	0x3fd287a7
 8020e38:	8b60c8b3 	.word	0x8b60c8b3
 8020e3c:	3fc68a28 	.word	0x3fc68a28
 8020e40:	509f79fb 	.word	0x509f79fb
 8020e44:	3fd34413 	.word	0x3fd34413
 8020e48:	7ff00000 	.word	0x7ff00000
 8020e4c:	08031613 	.word	0x08031613
 8020e50:	0803160a 	.word	0x0803160a
 8020e54:	0803147e 	.word	0x0803147e
 8020e58:	3ff80000 	.word	0x3ff80000
 8020e5c:	08031640 	.word	0x08031640
 8020e60:	08031618 	.word	0x08031618
 8020e64:	2601      	movs	r6, #1
 8020e66:	2300      	movs	r3, #0
 8020e68:	9307      	str	r3, [sp, #28]
 8020e6a:	9609      	str	r6, [sp, #36]	; 0x24
 8020e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8020e70:	9304      	str	r3, [sp, #16]
 8020e72:	9303      	str	r3, [sp, #12]
 8020e74:	2200      	movs	r2, #0
 8020e76:	2312      	movs	r3, #18
 8020e78:	920a      	str	r2, [sp, #40]	; 0x28
 8020e7a:	e789      	b.n	8020d90 <_dtoa_r+0x250>
 8020e7c:	2301      	movs	r3, #1
 8020e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8020e80:	e7f4      	b.n	8020e6c <_dtoa_r+0x32c>
 8020e82:	2301      	movs	r3, #1
 8020e84:	9304      	str	r3, [sp, #16]
 8020e86:	9303      	str	r3, [sp, #12]
 8020e88:	461a      	mov	r2, r3
 8020e8a:	e7f5      	b.n	8020e78 <_dtoa_r+0x338>
 8020e8c:	686a      	ldr	r2, [r5, #4]
 8020e8e:	3201      	adds	r2, #1
 8020e90:	606a      	str	r2, [r5, #4]
 8020e92:	0049      	lsls	r1, r1, #1
 8020e94:	e780      	b.n	8020d98 <_dtoa_r+0x258>
 8020e96:	2502      	movs	r5, #2
 8020e98:	e7af      	b.n	8020dfa <_dtoa_r+0x2ba>
 8020e9a:	07f1      	lsls	r1, r6, #31
 8020e9c:	d508      	bpl.n	8020eb0 <_dtoa_r+0x370>
 8020e9e:	4640      	mov	r0, r8
 8020ea0:	4649      	mov	r1, r9
 8020ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020ea6:	f7df fbbb 	bl	8000620 <__aeabi_dmul>
 8020eaa:	3501      	adds	r5, #1
 8020eac:	4680      	mov	r8, r0
 8020eae:	4689      	mov	r9, r1
 8020eb0:	1076      	asrs	r6, r6, #1
 8020eb2:	3708      	adds	r7, #8
 8020eb4:	e7a2      	b.n	8020dfc <_dtoa_r+0x2bc>
 8020eb6:	f000 809d 	beq.w	8020ff4 <_dtoa_r+0x4b4>
 8020eba:	f1cb 0600 	rsb	r6, fp, #0
 8020ebe:	4b9f      	ldr	r3, [pc, #636]	; (802113c <_dtoa_r+0x5fc>)
 8020ec0:	4f9f      	ldr	r7, [pc, #636]	; (8021140 <_dtoa_r+0x600>)
 8020ec2:	f006 020f 	and.w	r2, r6, #15
 8020ec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020ed2:	f7df fba5 	bl	8000620 <__aeabi_dmul>
 8020ed6:	e9cd 0100 	strd	r0, r1, [sp]
 8020eda:	1136      	asrs	r6, r6, #4
 8020edc:	2300      	movs	r3, #0
 8020ede:	2502      	movs	r5, #2
 8020ee0:	2e00      	cmp	r6, #0
 8020ee2:	d17c      	bne.n	8020fde <_dtoa_r+0x49e>
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	d191      	bne.n	8020e0c <_dtoa_r+0x2cc>
 8020ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	f000 8084 	beq.w	8020ff8 <_dtoa_r+0x4b8>
 8020ef0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8020ef4:	2200      	movs	r2, #0
 8020ef6:	4b93      	ldr	r3, [pc, #588]	; (8021144 <_dtoa_r+0x604>)
 8020ef8:	4640      	mov	r0, r8
 8020efa:	4649      	mov	r1, r9
 8020efc:	f7df fe02 	bl	8000b04 <__aeabi_dcmplt>
 8020f00:	2800      	cmp	r0, #0
 8020f02:	d079      	beq.n	8020ff8 <_dtoa_r+0x4b8>
 8020f04:	9b03      	ldr	r3, [sp, #12]
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d076      	beq.n	8020ff8 <_dtoa_r+0x4b8>
 8020f0a:	9b04      	ldr	r3, [sp, #16]
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	dd34      	ble.n	8020f7a <_dtoa_r+0x43a>
 8020f10:	2200      	movs	r2, #0
 8020f12:	4b8d      	ldr	r3, [pc, #564]	; (8021148 <_dtoa_r+0x608>)
 8020f14:	4640      	mov	r0, r8
 8020f16:	4649      	mov	r1, r9
 8020f18:	f7df fb82 	bl	8000620 <__aeabi_dmul>
 8020f1c:	e9cd 0100 	strd	r0, r1, [sp]
 8020f20:	9e04      	ldr	r6, [sp, #16]
 8020f22:	f10b 37ff 	add.w	r7, fp, #4294967295
 8020f26:	3501      	adds	r5, #1
 8020f28:	4628      	mov	r0, r5
 8020f2a:	f7df fb13 	bl	8000554 <__aeabi_i2d>
 8020f2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020f32:	f7df fb75 	bl	8000620 <__aeabi_dmul>
 8020f36:	2200      	movs	r2, #0
 8020f38:	4b84      	ldr	r3, [pc, #528]	; (802114c <_dtoa_r+0x60c>)
 8020f3a:	f7df f9bf 	bl	80002bc <__adddf3>
 8020f3e:	4680      	mov	r8, r0
 8020f40:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8020f44:	2e00      	cmp	r6, #0
 8020f46:	d15a      	bne.n	8020ffe <_dtoa_r+0x4be>
 8020f48:	2200      	movs	r2, #0
 8020f4a:	4b81      	ldr	r3, [pc, #516]	; (8021150 <_dtoa_r+0x610>)
 8020f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020f50:	f7df f9b2 	bl	80002b8 <__aeabi_dsub>
 8020f54:	4642      	mov	r2, r8
 8020f56:	464b      	mov	r3, r9
 8020f58:	e9cd 0100 	strd	r0, r1, [sp]
 8020f5c:	f7df fdf0 	bl	8000b40 <__aeabi_dcmpgt>
 8020f60:	2800      	cmp	r0, #0
 8020f62:	f040 829b 	bne.w	802149c <_dtoa_r+0x95c>
 8020f66:	4642      	mov	r2, r8
 8020f68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8020f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020f70:	f7df fdc8 	bl	8000b04 <__aeabi_dcmplt>
 8020f74:	2800      	cmp	r0, #0
 8020f76:	f040 828f 	bne.w	8021498 <_dtoa_r+0x958>
 8020f7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8020f7e:	e9cd 2300 	strd	r2, r3, [sp]
 8020f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	f2c0 8150 	blt.w	802122a <_dtoa_r+0x6ea>
 8020f8a:	f1bb 0f0e 	cmp.w	fp, #14
 8020f8e:	f300 814c 	bgt.w	802122a <_dtoa_r+0x6ea>
 8020f92:	4b6a      	ldr	r3, [pc, #424]	; (802113c <_dtoa_r+0x5fc>)
 8020f94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8020f98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	f280 80da 	bge.w	8021158 <_dtoa_r+0x618>
 8020fa4:	9b03      	ldr	r3, [sp, #12]
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	f300 80d6 	bgt.w	8021158 <_dtoa_r+0x618>
 8020fac:	f040 8273 	bne.w	8021496 <_dtoa_r+0x956>
 8020fb0:	2200      	movs	r2, #0
 8020fb2:	4b67      	ldr	r3, [pc, #412]	; (8021150 <_dtoa_r+0x610>)
 8020fb4:	4640      	mov	r0, r8
 8020fb6:	4649      	mov	r1, r9
 8020fb8:	f7df fb32 	bl	8000620 <__aeabi_dmul>
 8020fbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020fc0:	f7df fdb4 	bl	8000b2c <__aeabi_dcmpge>
 8020fc4:	9e03      	ldr	r6, [sp, #12]
 8020fc6:	4637      	mov	r7, r6
 8020fc8:	2800      	cmp	r0, #0
 8020fca:	f040 824a 	bne.w	8021462 <_dtoa_r+0x922>
 8020fce:	9b02      	ldr	r3, [sp, #8]
 8020fd0:	9a02      	ldr	r2, [sp, #8]
 8020fd2:	1c5d      	adds	r5, r3, #1
 8020fd4:	2331      	movs	r3, #49	; 0x31
 8020fd6:	7013      	strb	r3, [r2, #0]
 8020fd8:	f10b 0b01 	add.w	fp, fp, #1
 8020fdc:	e245      	b.n	802146a <_dtoa_r+0x92a>
 8020fde:	07f2      	lsls	r2, r6, #31
 8020fe0:	d505      	bpl.n	8020fee <_dtoa_r+0x4ae>
 8020fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020fe6:	f7df fb1b 	bl	8000620 <__aeabi_dmul>
 8020fea:	3501      	adds	r5, #1
 8020fec:	2301      	movs	r3, #1
 8020fee:	1076      	asrs	r6, r6, #1
 8020ff0:	3708      	adds	r7, #8
 8020ff2:	e775      	b.n	8020ee0 <_dtoa_r+0x3a0>
 8020ff4:	2502      	movs	r5, #2
 8020ff6:	e777      	b.n	8020ee8 <_dtoa_r+0x3a8>
 8020ff8:	465f      	mov	r7, fp
 8020ffa:	9e03      	ldr	r6, [sp, #12]
 8020ffc:	e794      	b.n	8020f28 <_dtoa_r+0x3e8>
 8020ffe:	9a02      	ldr	r2, [sp, #8]
 8021000:	4b4e      	ldr	r3, [pc, #312]	; (802113c <_dtoa_r+0x5fc>)
 8021002:	4432      	add	r2, r6
 8021004:	9213      	str	r2, [sp, #76]	; 0x4c
 8021006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021008:	1e71      	subs	r1, r6, #1
 802100a:	2a00      	cmp	r2, #0
 802100c:	d048      	beq.n	80210a0 <_dtoa_r+0x560>
 802100e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8021012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021016:	2000      	movs	r0, #0
 8021018:	494e      	ldr	r1, [pc, #312]	; (8021154 <_dtoa_r+0x614>)
 802101a:	f7df fc2b 	bl	8000874 <__aeabi_ddiv>
 802101e:	4642      	mov	r2, r8
 8021020:	464b      	mov	r3, r9
 8021022:	f7df f949 	bl	80002b8 <__aeabi_dsub>
 8021026:	9d02      	ldr	r5, [sp, #8]
 8021028:	4680      	mov	r8, r0
 802102a:	4689      	mov	r9, r1
 802102c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021030:	f7df fda6 	bl	8000b80 <__aeabi_d2iz>
 8021034:	4606      	mov	r6, r0
 8021036:	f7df fa8d 	bl	8000554 <__aeabi_i2d>
 802103a:	4602      	mov	r2, r0
 802103c:	460b      	mov	r3, r1
 802103e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021042:	f7df f939 	bl	80002b8 <__aeabi_dsub>
 8021046:	3630      	adds	r6, #48	; 0x30
 8021048:	f805 6b01 	strb.w	r6, [r5], #1
 802104c:	4642      	mov	r2, r8
 802104e:	464b      	mov	r3, r9
 8021050:	e9cd 0100 	strd	r0, r1, [sp]
 8021054:	f7df fd56 	bl	8000b04 <__aeabi_dcmplt>
 8021058:	2800      	cmp	r0, #0
 802105a:	d165      	bne.n	8021128 <_dtoa_r+0x5e8>
 802105c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021060:	2000      	movs	r0, #0
 8021062:	4938      	ldr	r1, [pc, #224]	; (8021144 <_dtoa_r+0x604>)
 8021064:	f7df f928 	bl	80002b8 <__aeabi_dsub>
 8021068:	4642      	mov	r2, r8
 802106a:	464b      	mov	r3, r9
 802106c:	f7df fd4a 	bl	8000b04 <__aeabi_dcmplt>
 8021070:	2800      	cmp	r0, #0
 8021072:	f040 80ba 	bne.w	80211ea <_dtoa_r+0x6aa>
 8021076:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021078:	429d      	cmp	r5, r3
 802107a:	f43f af7e 	beq.w	8020f7a <_dtoa_r+0x43a>
 802107e:	2200      	movs	r2, #0
 8021080:	4b31      	ldr	r3, [pc, #196]	; (8021148 <_dtoa_r+0x608>)
 8021082:	4640      	mov	r0, r8
 8021084:	4649      	mov	r1, r9
 8021086:	f7df facb 	bl	8000620 <__aeabi_dmul>
 802108a:	2200      	movs	r2, #0
 802108c:	4680      	mov	r8, r0
 802108e:	4689      	mov	r9, r1
 8021090:	4b2d      	ldr	r3, [pc, #180]	; (8021148 <_dtoa_r+0x608>)
 8021092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021096:	f7df fac3 	bl	8000620 <__aeabi_dmul>
 802109a:	e9cd 0100 	strd	r0, r1, [sp]
 802109e:	e7c5      	b.n	802102c <_dtoa_r+0x4ec>
 80210a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80210a4:	4642      	mov	r2, r8
 80210a6:	464b      	mov	r3, r9
 80210a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80210ac:	f7df fab8 	bl	8000620 <__aeabi_dmul>
 80210b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80210b4:	9d02      	ldr	r5, [sp, #8]
 80210b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80210ba:	f7df fd61 	bl	8000b80 <__aeabi_d2iz>
 80210be:	4606      	mov	r6, r0
 80210c0:	f7df fa48 	bl	8000554 <__aeabi_i2d>
 80210c4:	3630      	adds	r6, #48	; 0x30
 80210c6:	4602      	mov	r2, r0
 80210c8:	460b      	mov	r3, r1
 80210ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80210ce:	f7df f8f3 	bl	80002b8 <__aeabi_dsub>
 80210d2:	f805 6b01 	strb.w	r6, [r5], #1
 80210d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80210d8:	42ab      	cmp	r3, r5
 80210da:	4680      	mov	r8, r0
 80210dc:	4689      	mov	r9, r1
 80210de:	f04f 0200 	mov.w	r2, #0
 80210e2:	d125      	bne.n	8021130 <_dtoa_r+0x5f0>
 80210e4:	4b1b      	ldr	r3, [pc, #108]	; (8021154 <_dtoa_r+0x614>)
 80210e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80210ea:	f7df f8e7 	bl	80002bc <__adddf3>
 80210ee:	4602      	mov	r2, r0
 80210f0:	460b      	mov	r3, r1
 80210f2:	4640      	mov	r0, r8
 80210f4:	4649      	mov	r1, r9
 80210f6:	f7df fd23 	bl	8000b40 <__aeabi_dcmpgt>
 80210fa:	2800      	cmp	r0, #0
 80210fc:	d175      	bne.n	80211ea <_dtoa_r+0x6aa>
 80210fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8021102:	2000      	movs	r0, #0
 8021104:	4913      	ldr	r1, [pc, #76]	; (8021154 <_dtoa_r+0x614>)
 8021106:	f7df f8d7 	bl	80002b8 <__aeabi_dsub>
 802110a:	4602      	mov	r2, r0
 802110c:	460b      	mov	r3, r1
 802110e:	4640      	mov	r0, r8
 8021110:	4649      	mov	r1, r9
 8021112:	f7df fcf7 	bl	8000b04 <__aeabi_dcmplt>
 8021116:	2800      	cmp	r0, #0
 8021118:	f43f af2f 	beq.w	8020f7a <_dtoa_r+0x43a>
 802111c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021120:	2b30      	cmp	r3, #48	; 0x30
 8021122:	f105 32ff 	add.w	r2, r5, #4294967295
 8021126:	d001      	beq.n	802112c <_dtoa_r+0x5ec>
 8021128:	46bb      	mov	fp, r7
 802112a:	e04d      	b.n	80211c8 <_dtoa_r+0x688>
 802112c:	4615      	mov	r5, r2
 802112e:	e7f5      	b.n	802111c <_dtoa_r+0x5dc>
 8021130:	4b05      	ldr	r3, [pc, #20]	; (8021148 <_dtoa_r+0x608>)
 8021132:	f7df fa75 	bl	8000620 <__aeabi_dmul>
 8021136:	e9cd 0100 	strd	r0, r1, [sp]
 802113a:	e7bc      	b.n	80210b6 <_dtoa_r+0x576>
 802113c:	08031640 	.word	0x08031640
 8021140:	08031618 	.word	0x08031618
 8021144:	3ff00000 	.word	0x3ff00000
 8021148:	40240000 	.word	0x40240000
 802114c:	401c0000 	.word	0x401c0000
 8021150:	40140000 	.word	0x40140000
 8021154:	3fe00000 	.word	0x3fe00000
 8021158:	e9dd 6700 	ldrd	r6, r7, [sp]
 802115c:	9d02      	ldr	r5, [sp, #8]
 802115e:	4642      	mov	r2, r8
 8021160:	464b      	mov	r3, r9
 8021162:	4630      	mov	r0, r6
 8021164:	4639      	mov	r1, r7
 8021166:	f7df fb85 	bl	8000874 <__aeabi_ddiv>
 802116a:	f7df fd09 	bl	8000b80 <__aeabi_d2iz>
 802116e:	9000      	str	r0, [sp, #0]
 8021170:	f7df f9f0 	bl	8000554 <__aeabi_i2d>
 8021174:	4642      	mov	r2, r8
 8021176:	464b      	mov	r3, r9
 8021178:	f7df fa52 	bl	8000620 <__aeabi_dmul>
 802117c:	4602      	mov	r2, r0
 802117e:	460b      	mov	r3, r1
 8021180:	4630      	mov	r0, r6
 8021182:	4639      	mov	r1, r7
 8021184:	f7df f898 	bl	80002b8 <__aeabi_dsub>
 8021188:	9e00      	ldr	r6, [sp, #0]
 802118a:	9f03      	ldr	r7, [sp, #12]
 802118c:	3630      	adds	r6, #48	; 0x30
 802118e:	f805 6b01 	strb.w	r6, [r5], #1
 8021192:	9e02      	ldr	r6, [sp, #8]
 8021194:	1bae      	subs	r6, r5, r6
 8021196:	42b7      	cmp	r7, r6
 8021198:	4602      	mov	r2, r0
 802119a:	460b      	mov	r3, r1
 802119c:	d138      	bne.n	8021210 <_dtoa_r+0x6d0>
 802119e:	f7df f88d 	bl	80002bc <__adddf3>
 80211a2:	4606      	mov	r6, r0
 80211a4:	460f      	mov	r7, r1
 80211a6:	4602      	mov	r2, r0
 80211a8:	460b      	mov	r3, r1
 80211aa:	4640      	mov	r0, r8
 80211ac:	4649      	mov	r1, r9
 80211ae:	f7df fca9 	bl	8000b04 <__aeabi_dcmplt>
 80211b2:	b9c8      	cbnz	r0, 80211e8 <_dtoa_r+0x6a8>
 80211b4:	4632      	mov	r2, r6
 80211b6:	463b      	mov	r3, r7
 80211b8:	4640      	mov	r0, r8
 80211ba:	4649      	mov	r1, r9
 80211bc:	f7df fc98 	bl	8000af0 <__aeabi_dcmpeq>
 80211c0:	b110      	cbz	r0, 80211c8 <_dtoa_r+0x688>
 80211c2:	9b00      	ldr	r3, [sp, #0]
 80211c4:	07db      	lsls	r3, r3, #31
 80211c6:	d40f      	bmi.n	80211e8 <_dtoa_r+0x6a8>
 80211c8:	4651      	mov	r1, sl
 80211ca:	4620      	mov	r0, r4
 80211cc:	f000 fcea 	bl	8021ba4 <_Bfree>
 80211d0:	2300      	movs	r3, #0
 80211d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80211d4:	702b      	strb	r3, [r5, #0]
 80211d6:	f10b 0301 	add.w	r3, fp, #1
 80211da:	6013      	str	r3, [r2, #0]
 80211dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80211de:	2b00      	cmp	r3, #0
 80211e0:	f43f acf8 	beq.w	8020bd4 <_dtoa_r+0x94>
 80211e4:	601d      	str	r5, [r3, #0]
 80211e6:	e4f5      	b.n	8020bd4 <_dtoa_r+0x94>
 80211e8:	465f      	mov	r7, fp
 80211ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80211ee:	2a39      	cmp	r2, #57	; 0x39
 80211f0:	f105 33ff 	add.w	r3, r5, #4294967295
 80211f4:	d106      	bne.n	8021204 <_dtoa_r+0x6c4>
 80211f6:	9a02      	ldr	r2, [sp, #8]
 80211f8:	429a      	cmp	r2, r3
 80211fa:	d107      	bne.n	802120c <_dtoa_r+0x6cc>
 80211fc:	2330      	movs	r3, #48	; 0x30
 80211fe:	7013      	strb	r3, [r2, #0]
 8021200:	3701      	adds	r7, #1
 8021202:	4613      	mov	r3, r2
 8021204:	781a      	ldrb	r2, [r3, #0]
 8021206:	3201      	adds	r2, #1
 8021208:	701a      	strb	r2, [r3, #0]
 802120a:	e78d      	b.n	8021128 <_dtoa_r+0x5e8>
 802120c:	461d      	mov	r5, r3
 802120e:	e7ec      	b.n	80211ea <_dtoa_r+0x6aa>
 8021210:	2200      	movs	r2, #0
 8021212:	4ba4      	ldr	r3, [pc, #656]	; (80214a4 <_dtoa_r+0x964>)
 8021214:	f7df fa04 	bl	8000620 <__aeabi_dmul>
 8021218:	2200      	movs	r2, #0
 802121a:	2300      	movs	r3, #0
 802121c:	4606      	mov	r6, r0
 802121e:	460f      	mov	r7, r1
 8021220:	f7df fc66 	bl	8000af0 <__aeabi_dcmpeq>
 8021224:	2800      	cmp	r0, #0
 8021226:	d09a      	beq.n	802115e <_dtoa_r+0x61e>
 8021228:	e7ce      	b.n	80211c8 <_dtoa_r+0x688>
 802122a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802122c:	2a00      	cmp	r2, #0
 802122e:	f000 80cd 	beq.w	80213cc <_dtoa_r+0x88c>
 8021232:	9a07      	ldr	r2, [sp, #28]
 8021234:	2a01      	cmp	r2, #1
 8021236:	f300 80af 	bgt.w	8021398 <_dtoa_r+0x858>
 802123a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802123c:	2a00      	cmp	r2, #0
 802123e:	f000 80a7 	beq.w	8021390 <_dtoa_r+0x850>
 8021242:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8021246:	9e08      	ldr	r6, [sp, #32]
 8021248:	9d05      	ldr	r5, [sp, #20]
 802124a:	9a05      	ldr	r2, [sp, #20]
 802124c:	441a      	add	r2, r3
 802124e:	9205      	str	r2, [sp, #20]
 8021250:	9a06      	ldr	r2, [sp, #24]
 8021252:	2101      	movs	r1, #1
 8021254:	441a      	add	r2, r3
 8021256:	4620      	mov	r0, r4
 8021258:	9206      	str	r2, [sp, #24]
 802125a:	f000 fd43 	bl	8021ce4 <__i2b>
 802125e:	4607      	mov	r7, r0
 8021260:	2d00      	cmp	r5, #0
 8021262:	dd0c      	ble.n	802127e <_dtoa_r+0x73e>
 8021264:	9b06      	ldr	r3, [sp, #24]
 8021266:	2b00      	cmp	r3, #0
 8021268:	dd09      	ble.n	802127e <_dtoa_r+0x73e>
 802126a:	42ab      	cmp	r3, r5
 802126c:	9a05      	ldr	r2, [sp, #20]
 802126e:	bfa8      	it	ge
 8021270:	462b      	movge	r3, r5
 8021272:	1ad2      	subs	r2, r2, r3
 8021274:	9205      	str	r2, [sp, #20]
 8021276:	9a06      	ldr	r2, [sp, #24]
 8021278:	1aed      	subs	r5, r5, r3
 802127a:	1ad3      	subs	r3, r2, r3
 802127c:	9306      	str	r3, [sp, #24]
 802127e:	9b08      	ldr	r3, [sp, #32]
 8021280:	b1f3      	cbz	r3, 80212c0 <_dtoa_r+0x780>
 8021282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021284:	2b00      	cmp	r3, #0
 8021286:	f000 80a5 	beq.w	80213d4 <_dtoa_r+0x894>
 802128a:	2e00      	cmp	r6, #0
 802128c:	dd10      	ble.n	80212b0 <_dtoa_r+0x770>
 802128e:	4639      	mov	r1, r7
 8021290:	4632      	mov	r2, r6
 8021292:	4620      	mov	r0, r4
 8021294:	f000 fdbc 	bl	8021e10 <__pow5mult>
 8021298:	4652      	mov	r2, sl
 802129a:	4601      	mov	r1, r0
 802129c:	4607      	mov	r7, r0
 802129e:	4620      	mov	r0, r4
 80212a0:	f000 fd29 	bl	8021cf6 <__multiply>
 80212a4:	4651      	mov	r1, sl
 80212a6:	4680      	mov	r8, r0
 80212a8:	4620      	mov	r0, r4
 80212aa:	f000 fc7b 	bl	8021ba4 <_Bfree>
 80212ae:	46c2      	mov	sl, r8
 80212b0:	9b08      	ldr	r3, [sp, #32]
 80212b2:	1b9a      	subs	r2, r3, r6
 80212b4:	d004      	beq.n	80212c0 <_dtoa_r+0x780>
 80212b6:	4651      	mov	r1, sl
 80212b8:	4620      	mov	r0, r4
 80212ba:	f000 fda9 	bl	8021e10 <__pow5mult>
 80212be:	4682      	mov	sl, r0
 80212c0:	2101      	movs	r1, #1
 80212c2:	4620      	mov	r0, r4
 80212c4:	f000 fd0e 	bl	8021ce4 <__i2b>
 80212c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	4606      	mov	r6, r0
 80212ce:	f340 8083 	ble.w	80213d8 <_dtoa_r+0x898>
 80212d2:	461a      	mov	r2, r3
 80212d4:	4601      	mov	r1, r0
 80212d6:	4620      	mov	r0, r4
 80212d8:	f000 fd9a 	bl	8021e10 <__pow5mult>
 80212dc:	9b07      	ldr	r3, [sp, #28]
 80212de:	2b01      	cmp	r3, #1
 80212e0:	4606      	mov	r6, r0
 80212e2:	dd7c      	ble.n	80213de <_dtoa_r+0x89e>
 80212e4:	f04f 0800 	mov.w	r8, #0
 80212e8:	6933      	ldr	r3, [r6, #16]
 80212ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80212ee:	6918      	ldr	r0, [r3, #16]
 80212f0:	f000 fcaa 	bl	8021c48 <__hi0bits>
 80212f4:	f1c0 0020 	rsb	r0, r0, #32
 80212f8:	9b06      	ldr	r3, [sp, #24]
 80212fa:	4418      	add	r0, r3
 80212fc:	f010 001f 	ands.w	r0, r0, #31
 8021300:	f000 8096 	beq.w	8021430 <_dtoa_r+0x8f0>
 8021304:	f1c0 0320 	rsb	r3, r0, #32
 8021308:	2b04      	cmp	r3, #4
 802130a:	f340 8087 	ble.w	802141c <_dtoa_r+0x8dc>
 802130e:	9b05      	ldr	r3, [sp, #20]
 8021310:	f1c0 001c 	rsb	r0, r0, #28
 8021314:	4403      	add	r3, r0
 8021316:	9305      	str	r3, [sp, #20]
 8021318:	9b06      	ldr	r3, [sp, #24]
 802131a:	4405      	add	r5, r0
 802131c:	4403      	add	r3, r0
 802131e:	9306      	str	r3, [sp, #24]
 8021320:	9b05      	ldr	r3, [sp, #20]
 8021322:	2b00      	cmp	r3, #0
 8021324:	dd05      	ble.n	8021332 <_dtoa_r+0x7f2>
 8021326:	4651      	mov	r1, sl
 8021328:	461a      	mov	r2, r3
 802132a:	4620      	mov	r0, r4
 802132c:	f000 fdbe 	bl	8021eac <__lshift>
 8021330:	4682      	mov	sl, r0
 8021332:	9b06      	ldr	r3, [sp, #24]
 8021334:	2b00      	cmp	r3, #0
 8021336:	dd05      	ble.n	8021344 <_dtoa_r+0x804>
 8021338:	4631      	mov	r1, r6
 802133a:	461a      	mov	r2, r3
 802133c:	4620      	mov	r0, r4
 802133e:	f000 fdb5 	bl	8021eac <__lshift>
 8021342:	4606      	mov	r6, r0
 8021344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021346:	2b00      	cmp	r3, #0
 8021348:	d074      	beq.n	8021434 <_dtoa_r+0x8f4>
 802134a:	4631      	mov	r1, r6
 802134c:	4650      	mov	r0, sl
 802134e:	f000 fdfe 	bl	8021f4e <__mcmp>
 8021352:	2800      	cmp	r0, #0
 8021354:	da6e      	bge.n	8021434 <_dtoa_r+0x8f4>
 8021356:	2300      	movs	r3, #0
 8021358:	4651      	mov	r1, sl
 802135a:	220a      	movs	r2, #10
 802135c:	4620      	mov	r0, r4
 802135e:	f000 fc38 	bl	8021bd2 <__multadd>
 8021362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021364:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021368:	4682      	mov	sl, r0
 802136a:	2b00      	cmp	r3, #0
 802136c:	f000 81a8 	beq.w	80216c0 <_dtoa_r+0xb80>
 8021370:	2300      	movs	r3, #0
 8021372:	4639      	mov	r1, r7
 8021374:	220a      	movs	r2, #10
 8021376:	4620      	mov	r0, r4
 8021378:	f000 fc2b 	bl	8021bd2 <__multadd>
 802137c:	9b04      	ldr	r3, [sp, #16]
 802137e:	2b00      	cmp	r3, #0
 8021380:	4607      	mov	r7, r0
 8021382:	f300 80c8 	bgt.w	8021516 <_dtoa_r+0x9d6>
 8021386:	9b07      	ldr	r3, [sp, #28]
 8021388:	2b02      	cmp	r3, #2
 802138a:	f340 80c4 	ble.w	8021516 <_dtoa_r+0x9d6>
 802138e:	e059      	b.n	8021444 <_dtoa_r+0x904>
 8021390:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021392:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021396:	e756      	b.n	8021246 <_dtoa_r+0x706>
 8021398:	9b03      	ldr	r3, [sp, #12]
 802139a:	1e5e      	subs	r6, r3, #1
 802139c:	9b08      	ldr	r3, [sp, #32]
 802139e:	42b3      	cmp	r3, r6
 80213a0:	bfbf      	itttt	lt
 80213a2:	9b08      	ldrlt	r3, [sp, #32]
 80213a4:	9608      	strlt	r6, [sp, #32]
 80213a6:	1af2      	sublt	r2, r6, r3
 80213a8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80213aa:	bfb6      	itet	lt
 80213ac:	189b      	addlt	r3, r3, r2
 80213ae:	1b9e      	subge	r6, r3, r6
 80213b0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80213b2:	9b03      	ldr	r3, [sp, #12]
 80213b4:	bfb8      	it	lt
 80213b6:	2600      	movlt	r6, #0
 80213b8:	2b00      	cmp	r3, #0
 80213ba:	bfb9      	ittee	lt
 80213bc:	9b05      	ldrlt	r3, [sp, #20]
 80213be:	9a03      	ldrlt	r2, [sp, #12]
 80213c0:	9d05      	ldrge	r5, [sp, #20]
 80213c2:	9b03      	ldrge	r3, [sp, #12]
 80213c4:	bfbc      	itt	lt
 80213c6:	1a9d      	sublt	r5, r3, r2
 80213c8:	2300      	movlt	r3, #0
 80213ca:	e73e      	b.n	802124a <_dtoa_r+0x70a>
 80213cc:	9e08      	ldr	r6, [sp, #32]
 80213ce:	9d05      	ldr	r5, [sp, #20]
 80213d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80213d2:	e745      	b.n	8021260 <_dtoa_r+0x720>
 80213d4:	9a08      	ldr	r2, [sp, #32]
 80213d6:	e76e      	b.n	80212b6 <_dtoa_r+0x776>
 80213d8:	9b07      	ldr	r3, [sp, #28]
 80213da:	2b01      	cmp	r3, #1
 80213dc:	dc19      	bgt.n	8021412 <_dtoa_r+0x8d2>
 80213de:	9b00      	ldr	r3, [sp, #0]
 80213e0:	b9bb      	cbnz	r3, 8021412 <_dtoa_r+0x8d2>
 80213e2:	9b01      	ldr	r3, [sp, #4]
 80213e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80213e8:	b99b      	cbnz	r3, 8021412 <_dtoa_r+0x8d2>
 80213ea:	9b01      	ldr	r3, [sp, #4]
 80213ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80213f0:	0d1b      	lsrs	r3, r3, #20
 80213f2:	051b      	lsls	r3, r3, #20
 80213f4:	b183      	cbz	r3, 8021418 <_dtoa_r+0x8d8>
 80213f6:	9b05      	ldr	r3, [sp, #20]
 80213f8:	3301      	adds	r3, #1
 80213fa:	9305      	str	r3, [sp, #20]
 80213fc:	9b06      	ldr	r3, [sp, #24]
 80213fe:	3301      	adds	r3, #1
 8021400:	9306      	str	r3, [sp, #24]
 8021402:	f04f 0801 	mov.w	r8, #1
 8021406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021408:	2b00      	cmp	r3, #0
 802140a:	f47f af6d 	bne.w	80212e8 <_dtoa_r+0x7a8>
 802140e:	2001      	movs	r0, #1
 8021410:	e772      	b.n	80212f8 <_dtoa_r+0x7b8>
 8021412:	f04f 0800 	mov.w	r8, #0
 8021416:	e7f6      	b.n	8021406 <_dtoa_r+0x8c6>
 8021418:	4698      	mov	r8, r3
 802141a:	e7f4      	b.n	8021406 <_dtoa_r+0x8c6>
 802141c:	d080      	beq.n	8021320 <_dtoa_r+0x7e0>
 802141e:	9a05      	ldr	r2, [sp, #20]
 8021420:	331c      	adds	r3, #28
 8021422:	441a      	add	r2, r3
 8021424:	9205      	str	r2, [sp, #20]
 8021426:	9a06      	ldr	r2, [sp, #24]
 8021428:	441a      	add	r2, r3
 802142a:	441d      	add	r5, r3
 802142c:	4613      	mov	r3, r2
 802142e:	e776      	b.n	802131e <_dtoa_r+0x7de>
 8021430:	4603      	mov	r3, r0
 8021432:	e7f4      	b.n	802141e <_dtoa_r+0x8de>
 8021434:	9b03      	ldr	r3, [sp, #12]
 8021436:	2b00      	cmp	r3, #0
 8021438:	dc36      	bgt.n	80214a8 <_dtoa_r+0x968>
 802143a:	9b07      	ldr	r3, [sp, #28]
 802143c:	2b02      	cmp	r3, #2
 802143e:	dd33      	ble.n	80214a8 <_dtoa_r+0x968>
 8021440:	9b03      	ldr	r3, [sp, #12]
 8021442:	9304      	str	r3, [sp, #16]
 8021444:	9b04      	ldr	r3, [sp, #16]
 8021446:	b963      	cbnz	r3, 8021462 <_dtoa_r+0x922>
 8021448:	4631      	mov	r1, r6
 802144a:	2205      	movs	r2, #5
 802144c:	4620      	mov	r0, r4
 802144e:	f000 fbc0 	bl	8021bd2 <__multadd>
 8021452:	4601      	mov	r1, r0
 8021454:	4606      	mov	r6, r0
 8021456:	4650      	mov	r0, sl
 8021458:	f000 fd79 	bl	8021f4e <__mcmp>
 802145c:	2800      	cmp	r0, #0
 802145e:	f73f adb6 	bgt.w	8020fce <_dtoa_r+0x48e>
 8021462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021464:	9d02      	ldr	r5, [sp, #8]
 8021466:	ea6f 0b03 	mvn.w	fp, r3
 802146a:	2300      	movs	r3, #0
 802146c:	9303      	str	r3, [sp, #12]
 802146e:	4631      	mov	r1, r6
 8021470:	4620      	mov	r0, r4
 8021472:	f000 fb97 	bl	8021ba4 <_Bfree>
 8021476:	2f00      	cmp	r7, #0
 8021478:	f43f aea6 	beq.w	80211c8 <_dtoa_r+0x688>
 802147c:	9b03      	ldr	r3, [sp, #12]
 802147e:	b12b      	cbz	r3, 802148c <_dtoa_r+0x94c>
 8021480:	42bb      	cmp	r3, r7
 8021482:	d003      	beq.n	802148c <_dtoa_r+0x94c>
 8021484:	4619      	mov	r1, r3
 8021486:	4620      	mov	r0, r4
 8021488:	f000 fb8c 	bl	8021ba4 <_Bfree>
 802148c:	4639      	mov	r1, r7
 802148e:	4620      	mov	r0, r4
 8021490:	f000 fb88 	bl	8021ba4 <_Bfree>
 8021494:	e698      	b.n	80211c8 <_dtoa_r+0x688>
 8021496:	2600      	movs	r6, #0
 8021498:	4637      	mov	r7, r6
 802149a:	e7e2      	b.n	8021462 <_dtoa_r+0x922>
 802149c:	46bb      	mov	fp, r7
 802149e:	4637      	mov	r7, r6
 80214a0:	e595      	b.n	8020fce <_dtoa_r+0x48e>
 80214a2:	bf00      	nop
 80214a4:	40240000 	.word	0x40240000
 80214a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214aa:	bb93      	cbnz	r3, 8021512 <_dtoa_r+0x9d2>
 80214ac:	9b03      	ldr	r3, [sp, #12]
 80214ae:	9304      	str	r3, [sp, #16]
 80214b0:	9d02      	ldr	r5, [sp, #8]
 80214b2:	4631      	mov	r1, r6
 80214b4:	4650      	mov	r0, sl
 80214b6:	f7ff fab7 	bl	8020a28 <quorem>
 80214ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80214be:	f805 9b01 	strb.w	r9, [r5], #1
 80214c2:	9b02      	ldr	r3, [sp, #8]
 80214c4:	9a04      	ldr	r2, [sp, #16]
 80214c6:	1aeb      	subs	r3, r5, r3
 80214c8:	429a      	cmp	r2, r3
 80214ca:	f300 80dc 	bgt.w	8021686 <_dtoa_r+0xb46>
 80214ce:	9b02      	ldr	r3, [sp, #8]
 80214d0:	2a01      	cmp	r2, #1
 80214d2:	bfac      	ite	ge
 80214d4:	189b      	addge	r3, r3, r2
 80214d6:	3301      	addlt	r3, #1
 80214d8:	4698      	mov	r8, r3
 80214da:	2300      	movs	r3, #0
 80214dc:	9303      	str	r3, [sp, #12]
 80214de:	4651      	mov	r1, sl
 80214e0:	2201      	movs	r2, #1
 80214e2:	4620      	mov	r0, r4
 80214e4:	f000 fce2 	bl	8021eac <__lshift>
 80214e8:	4631      	mov	r1, r6
 80214ea:	4682      	mov	sl, r0
 80214ec:	f000 fd2f 	bl	8021f4e <__mcmp>
 80214f0:	2800      	cmp	r0, #0
 80214f2:	f300 808d 	bgt.w	8021610 <_dtoa_r+0xad0>
 80214f6:	d103      	bne.n	8021500 <_dtoa_r+0x9c0>
 80214f8:	f019 0f01 	tst.w	r9, #1
 80214fc:	f040 8088 	bne.w	8021610 <_dtoa_r+0xad0>
 8021500:	4645      	mov	r5, r8
 8021502:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021506:	2b30      	cmp	r3, #48	; 0x30
 8021508:	f105 32ff 	add.w	r2, r5, #4294967295
 802150c:	d1af      	bne.n	802146e <_dtoa_r+0x92e>
 802150e:	4615      	mov	r5, r2
 8021510:	e7f7      	b.n	8021502 <_dtoa_r+0x9c2>
 8021512:	9b03      	ldr	r3, [sp, #12]
 8021514:	9304      	str	r3, [sp, #16]
 8021516:	2d00      	cmp	r5, #0
 8021518:	dd05      	ble.n	8021526 <_dtoa_r+0x9e6>
 802151a:	4639      	mov	r1, r7
 802151c:	462a      	mov	r2, r5
 802151e:	4620      	mov	r0, r4
 8021520:	f000 fcc4 	bl	8021eac <__lshift>
 8021524:	4607      	mov	r7, r0
 8021526:	f1b8 0f00 	cmp.w	r8, #0
 802152a:	d04c      	beq.n	80215c6 <_dtoa_r+0xa86>
 802152c:	6879      	ldr	r1, [r7, #4]
 802152e:	4620      	mov	r0, r4
 8021530:	f000 fb04 	bl	8021b3c <_Balloc>
 8021534:	693a      	ldr	r2, [r7, #16]
 8021536:	3202      	adds	r2, #2
 8021538:	4605      	mov	r5, r0
 802153a:	0092      	lsls	r2, r2, #2
 802153c:	f107 010c 	add.w	r1, r7, #12
 8021540:	300c      	adds	r0, #12
 8021542:	f7fe fa4d 	bl	801f9e0 <memcpy>
 8021546:	2201      	movs	r2, #1
 8021548:	4629      	mov	r1, r5
 802154a:	4620      	mov	r0, r4
 802154c:	f000 fcae 	bl	8021eac <__lshift>
 8021550:	9b00      	ldr	r3, [sp, #0]
 8021552:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8021556:	9703      	str	r7, [sp, #12]
 8021558:	f003 0301 	and.w	r3, r3, #1
 802155c:	4607      	mov	r7, r0
 802155e:	9305      	str	r3, [sp, #20]
 8021560:	4631      	mov	r1, r6
 8021562:	4650      	mov	r0, sl
 8021564:	f7ff fa60 	bl	8020a28 <quorem>
 8021568:	9903      	ldr	r1, [sp, #12]
 802156a:	4605      	mov	r5, r0
 802156c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8021570:	4650      	mov	r0, sl
 8021572:	f000 fcec 	bl	8021f4e <__mcmp>
 8021576:	463a      	mov	r2, r7
 8021578:	9000      	str	r0, [sp, #0]
 802157a:	4631      	mov	r1, r6
 802157c:	4620      	mov	r0, r4
 802157e:	f000 fd00 	bl	8021f82 <__mdiff>
 8021582:	68c3      	ldr	r3, [r0, #12]
 8021584:	4602      	mov	r2, r0
 8021586:	bb03      	cbnz	r3, 80215ca <_dtoa_r+0xa8a>
 8021588:	4601      	mov	r1, r0
 802158a:	9006      	str	r0, [sp, #24]
 802158c:	4650      	mov	r0, sl
 802158e:	f000 fcde 	bl	8021f4e <__mcmp>
 8021592:	9a06      	ldr	r2, [sp, #24]
 8021594:	4603      	mov	r3, r0
 8021596:	4611      	mov	r1, r2
 8021598:	4620      	mov	r0, r4
 802159a:	9306      	str	r3, [sp, #24]
 802159c:	f000 fb02 	bl	8021ba4 <_Bfree>
 80215a0:	9b06      	ldr	r3, [sp, #24]
 80215a2:	b9a3      	cbnz	r3, 80215ce <_dtoa_r+0xa8e>
 80215a4:	9a07      	ldr	r2, [sp, #28]
 80215a6:	b992      	cbnz	r2, 80215ce <_dtoa_r+0xa8e>
 80215a8:	9a05      	ldr	r2, [sp, #20]
 80215aa:	b982      	cbnz	r2, 80215ce <_dtoa_r+0xa8e>
 80215ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80215b0:	d029      	beq.n	8021606 <_dtoa_r+0xac6>
 80215b2:	9b00      	ldr	r3, [sp, #0]
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	dd01      	ble.n	80215bc <_dtoa_r+0xa7c>
 80215b8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80215bc:	f108 0501 	add.w	r5, r8, #1
 80215c0:	f888 9000 	strb.w	r9, [r8]
 80215c4:	e753      	b.n	802146e <_dtoa_r+0x92e>
 80215c6:	4638      	mov	r0, r7
 80215c8:	e7c2      	b.n	8021550 <_dtoa_r+0xa10>
 80215ca:	2301      	movs	r3, #1
 80215cc:	e7e3      	b.n	8021596 <_dtoa_r+0xa56>
 80215ce:	9a00      	ldr	r2, [sp, #0]
 80215d0:	2a00      	cmp	r2, #0
 80215d2:	db04      	blt.n	80215de <_dtoa_r+0xa9e>
 80215d4:	d125      	bne.n	8021622 <_dtoa_r+0xae2>
 80215d6:	9a07      	ldr	r2, [sp, #28]
 80215d8:	bb1a      	cbnz	r2, 8021622 <_dtoa_r+0xae2>
 80215da:	9a05      	ldr	r2, [sp, #20]
 80215dc:	bb0a      	cbnz	r2, 8021622 <_dtoa_r+0xae2>
 80215de:	2b00      	cmp	r3, #0
 80215e0:	ddec      	ble.n	80215bc <_dtoa_r+0xa7c>
 80215e2:	4651      	mov	r1, sl
 80215e4:	2201      	movs	r2, #1
 80215e6:	4620      	mov	r0, r4
 80215e8:	f000 fc60 	bl	8021eac <__lshift>
 80215ec:	4631      	mov	r1, r6
 80215ee:	4682      	mov	sl, r0
 80215f0:	f000 fcad 	bl	8021f4e <__mcmp>
 80215f4:	2800      	cmp	r0, #0
 80215f6:	dc03      	bgt.n	8021600 <_dtoa_r+0xac0>
 80215f8:	d1e0      	bne.n	80215bc <_dtoa_r+0xa7c>
 80215fa:	f019 0f01 	tst.w	r9, #1
 80215fe:	d0dd      	beq.n	80215bc <_dtoa_r+0xa7c>
 8021600:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8021604:	d1d8      	bne.n	80215b8 <_dtoa_r+0xa78>
 8021606:	2339      	movs	r3, #57	; 0x39
 8021608:	f888 3000 	strb.w	r3, [r8]
 802160c:	f108 0801 	add.w	r8, r8, #1
 8021610:	4645      	mov	r5, r8
 8021612:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021616:	2b39      	cmp	r3, #57	; 0x39
 8021618:	f105 32ff 	add.w	r2, r5, #4294967295
 802161c:	d03b      	beq.n	8021696 <_dtoa_r+0xb56>
 802161e:	3301      	adds	r3, #1
 8021620:	e040      	b.n	80216a4 <_dtoa_r+0xb64>
 8021622:	2b00      	cmp	r3, #0
 8021624:	f108 0501 	add.w	r5, r8, #1
 8021628:	dd05      	ble.n	8021636 <_dtoa_r+0xaf6>
 802162a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802162e:	d0ea      	beq.n	8021606 <_dtoa_r+0xac6>
 8021630:	f109 0901 	add.w	r9, r9, #1
 8021634:	e7c4      	b.n	80215c0 <_dtoa_r+0xa80>
 8021636:	9b02      	ldr	r3, [sp, #8]
 8021638:	9a04      	ldr	r2, [sp, #16]
 802163a:	f805 9c01 	strb.w	r9, [r5, #-1]
 802163e:	1aeb      	subs	r3, r5, r3
 8021640:	4293      	cmp	r3, r2
 8021642:	46a8      	mov	r8, r5
 8021644:	f43f af4b 	beq.w	80214de <_dtoa_r+0x99e>
 8021648:	4651      	mov	r1, sl
 802164a:	2300      	movs	r3, #0
 802164c:	220a      	movs	r2, #10
 802164e:	4620      	mov	r0, r4
 8021650:	f000 fabf 	bl	8021bd2 <__multadd>
 8021654:	9b03      	ldr	r3, [sp, #12]
 8021656:	9903      	ldr	r1, [sp, #12]
 8021658:	42bb      	cmp	r3, r7
 802165a:	4682      	mov	sl, r0
 802165c:	f04f 0300 	mov.w	r3, #0
 8021660:	f04f 020a 	mov.w	r2, #10
 8021664:	4620      	mov	r0, r4
 8021666:	d104      	bne.n	8021672 <_dtoa_r+0xb32>
 8021668:	f000 fab3 	bl	8021bd2 <__multadd>
 802166c:	9003      	str	r0, [sp, #12]
 802166e:	4607      	mov	r7, r0
 8021670:	e776      	b.n	8021560 <_dtoa_r+0xa20>
 8021672:	f000 faae 	bl	8021bd2 <__multadd>
 8021676:	2300      	movs	r3, #0
 8021678:	9003      	str	r0, [sp, #12]
 802167a:	220a      	movs	r2, #10
 802167c:	4639      	mov	r1, r7
 802167e:	4620      	mov	r0, r4
 8021680:	f000 faa7 	bl	8021bd2 <__multadd>
 8021684:	e7f3      	b.n	802166e <_dtoa_r+0xb2e>
 8021686:	4651      	mov	r1, sl
 8021688:	2300      	movs	r3, #0
 802168a:	220a      	movs	r2, #10
 802168c:	4620      	mov	r0, r4
 802168e:	f000 faa0 	bl	8021bd2 <__multadd>
 8021692:	4682      	mov	sl, r0
 8021694:	e70d      	b.n	80214b2 <_dtoa_r+0x972>
 8021696:	9b02      	ldr	r3, [sp, #8]
 8021698:	4293      	cmp	r3, r2
 802169a:	d105      	bne.n	80216a8 <_dtoa_r+0xb68>
 802169c:	9a02      	ldr	r2, [sp, #8]
 802169e:	f10b 0b01 	add.w	fp, fp, #1
 80216a2:	2331      	movs	r3, #49	; 0x31
 80216a4:	7013      	strb	r3, [r2, #0]
 80216a6:	e6e2      	b.n	802146e <_dtoa_r+0x92e>
 80216a8:	4615      	mov	r5, r2
 80216aa:	e7b2      	b.n	8021612 <_dtoa_r+0xad2>
 80216ac:	4b09      	ldr	r3, [pc, #36]	; (80216d4 <_dtoa_r+0xb94>)
 80216ae:	f7ff baae 	b.w	8020c0e <_dtoa_r+0xce>
 80216b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80216b4:	2b00      	cmp	r3, #0
 80216b6:	f47f aa88 	bne.w	8020bca <_dtoa_r+0x8a>
 80216ba:	4b07      	ldr	r3, [pc, #28]	; (80216d8 <_dtoa_r+0xb98>)
 80216bc:	f7ff baa7 	b.w	8020c0e <_dtoa_r+0xce>
 80216c0:	9b04      	ldr	r3, [sp, #16]
 80216c2:	2b00      	cmp	r3, #0
 80216c4:	f73f aef4 	bgt.w	80214b0 <_dtoa_r+0x970>
 80216c8:	9b07      	ldr	r3, [sp, #28]
 80216ca:	2b02      	cmp	r3, #2
 80216cc:	f77f aef0 	ble.w	80214b0 <_dtoa_r+0x970>
 80216d0:	e6b8      	b.n	8021444 <_dtoa_r+0x904>
 80216d2:	bf00      	nop
 80216d4:	0803147d 	.word	0x0803147d
 80216d8:	0803160a 	.word	0x0803160a

080216dc <_localeconv_r>:
 80216dc:	4b04      	ldr	r3, [pc, #16]	; (80216f0 <_localeconv_r+0x14>)
 80216de:	681b      	ldr	r3, [r3, #0]
 80216e0:	6a18      	ldr	r0, [r3, #32]
 80216e2:	4b04      	ldr	r3, [pc, #16]	; (80216f4 <_localeconv_r+0x18>)
 80216e4:	2800      	cmp	r0, #0
 80216e6:	bf08      	it	eq
 80216e8:	4618      	moveq	r0, r3
 80216ea:	30f0      	adds	r0, #240	; 0xf0
 80216ec:	4770      	bx	lr
 80216ee:	bf00      	nop
 80216f0:	20000f40 	.word	0x20000f40
 80216f4:	20001444 	.word	0x20001444

080216f8 <malloc>:
 80216f8:	4b02      	ldr	r3, [pc, #8]	; (8021704 <malloc+0xc>)
 80216fa:	4601      	mov	r1, r0
 80216fc:	6818      	ldr	r0, [r3, #0]
 80216fe:	f000 b803 	b.w	8021708 <_malloc_r>
 8021702:	bf00      	nop
 8021704:	20000f40 	.word	0x20000f40

08021708 <_malloc_r>:
 8021708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802170c:	f101 040b 	add.w	r4, r1, #11
 8021710:	2c16      	cmp	r4, #22
 8021712:	4681      	mov	r9, r0
 8021714:	d907      	bls.n	8021726 <_malloc_r+0x1e>
 8021716:	f034 0407 	bics.w	r4, r4, #7
 802171a:	d505      	bpl.n	8021728 <_malloc_r+0x20>
 802171c:	230c      	movs	r3, #12
 802171e:	f8c9 3000 	str.w	r3, [r9]
 8021722:	2600      	movs	r6, #0
 8021724:	e131      	b.n	802198a <_malloc_r+0x282>
 8021726:	2410      	movs	r4, #16
 8021728:	428c      	cmp	r4, r1
 802172a:	d3f7      	bcc.n	802171c <_malloc_r+0x14>
 802172c:	4648      	mov	r0, r9
 802172e:	f000 f9f9 	bl	8021b24 <__malloc_lock>
 8021732:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8021736:	4d9c      	ldr	r5, [pc, #624]	; (80219a8 <_malloc_r+0x2a0>)
 8021738:	d236      	bcs.n	80217a8 <_malloc_r+0xa0>
 802173a:	f104 0208 	add.w	r2, r4, #8
 802173e:	442a      	add	r2, r5
 8021740:	f1a2 0108 	sub.w	r1, r2, #8
 8021744:	6856      	ldr	r6, [r2, #4]
 8021746:	428e      	cmp	r6, r1
 8021748:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 802174c:	d102      	bne.n	8021754 <_malloc_r+0x4c>
 802174e:	68d6      	ldr	r6, [r2, #12]
 8021750:	42b2      	cmp	r2, r6
 8021752:	d010      	beq.n	8021776 <_malloc_r+0x6e>
 8021754:	6873      	ldr	r3, [r6, #4]
 8021756:	68f2      	ldr	r2, [r6, #12]
 8021758:	68b1      	ldr	r1, [r6, #8]
 802175a:	f023 0303 	bic.w	r3, r3, #3
 802175e:	60ca      	str	r2, [r1, #12]
 8021760:	4433      	add	r3, r6
 8021762:	6091      	str	r1, [r2, #8]
 8021764:	685a      	ldr	r2, [r3, #4]
 8021766:	f042 0201 	orr.w	r2, r2, #1
 802176a:	605a      	str	r2, [r3, #4]
 802176c:	4648      	mov	r0, r9
 802176e:	f000 f9df 	bl	8021b30 <__malloc_unlock>
 8021772:	3608      	adds	r6, #8
 8021774:	e109      	b.n	802198a <_malloc_r+0x282>
 8021776:	3302      	adds	r3, #2
 8021778:	4a8c      	ldr	r2, [pc, #560]	; (80219ac <_malloc_r+0x2a4>)
 802177a:	692e      	ldr	r6, [r5, #16]
 802177c:	4296      	cmp	r6, r2
 802177e:	4611      	mov	r1, r2
 8021780:	d06d      	beq.n	802185e <_malloc_r+0x156>
 8021782:	6870      	ldr	r0, [r6, #4]
 8021784:	f020 0003 	bic.w	r0, r0, #3
 8021788:	1b07      	subs	r7, r0, r4
 802178a:	2f0f      	cmp	r7, #15
 802178c:	dd47      	ble.n	802181e <_malloc_r+0x116>
 802178e:	1933      	adds	r3, r6, r4
 8021790:	f044 0401 	orr.w	r4, r4, #1
 8021794:	6074      	str	r4, [r6, #4]
 8021796:	616b      	str	r3, [r5, #20]
 8021798:	612b      	str	r3, [r5, #16]
 802179a:	60da      	str	r2, [r3, #12]
 802179c:	609a      	str	r2, [r3, #8]
 802179e:	f047 0201 	orr.w	r2, r7, #1
 80217a2:	605a      	str	r2, [r3, #4]
 80217a4:	5037      	str	r7, [r6, r0]
 80217a6:	e7e1      	b.n	802176c <_malloc_r+0x64>
 80217a8:	0a63      	lsrs	r3, r4, #9
 80217aa:	d02a      	beq.n	8021802 <_malloc_r+0xfa>
 80217ac:	2b04      	cmp	r3, #4
 80217ae:	d812      	bhi.n	80217d6 <_malloc_r+0xce>
 80217b0:	09a3      	lsrs	r3, r4, #6
 80217b2:	3338      	adds	r3, #56	; 0x38
 80217b4:	1c5a      	adds	r2, r3, #1
 80217b6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80217ba:	f1a2 0008 	sub.w	r0, r2, #8
 80217be:	6856      	ldr	r6, [r2, #4]
 80217c0:	4286      	cmp	r6, r0
 80217c2:	d006      	beq.n	80217d2 <_malloc_r+0xca>
 80217c4:	6872      	ldr	r2, [r6, #4]
 80217c6:	f022 0203 	bic.w	r2, r2, #3
 80217ca:	1b11      	subs	r1, r2, r4
 80217cc:	290f      	cmp	r1, #15
 80217ce:	dd1c      	ble.n	802180a <_malloc_r+0x102>
 80217d0:	3b01      	subs	r3, #1
 80217d2:	3301      	adds	r3, #1
 80217d4:	e7d0      	b.n	8021778 <_malloc_r+0x70>
 80217d6:	2b14      	cmp	r3, #20
 80217d8:	d801      	bhi.n	80217de <_malloc_r+0xd6>
 80217da:	335b      	adds	r3, #91	; 0x5b
 80217dc:	e7ea      	b.n	80217b4 <_malloc_r+0xac>
 80217de:	2b54      	cmp	r3, #84	; 0x54
 80217e0:	d802      	bhi.n	80217e8 <_malloc_r+0xe0>
 80217e2:	0b23      	lsrs	r3, r4, #12
 80217e4:	336e      	adds	r3, #110	; 0x6e
 80217e6:	e7e5      	b.n	80217b4 <_malloc_r+0xac>
 80217e8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80217ec:	d802      	bhi.n	80217f4 <_malloc_r+0xec>
 80217ee:	0be3      	lsrs	r3, r4, #15
 80217f0:	3377      	adds	r3, #119	; 0x77
 80217f2:	e7df      	b.n	80217b4 <_malloc_r+0xac>
 80217f4:	f240 5254 	movw	r2, #1364	; 0x554
 80217f8:	4293      	cmp	r3, r2
 80217fa:	d804      	bhi.n	8021806 <_malloc_r+0xfe>
 80217fc:	0ca3      	lsrs	r3, r4, #18
 80217fe:	337c      	adds	r3, #124	; 0x7c
 8021800:	e7d8      	b.n	80217b4 <_malloc_r+0xac>
 8021802:	233f      	movs	r3, #63	; 0x3f
 8021804:	e7d6      	b.n	80217b4 <_malloc_r+0xac>
 8021806:	237e      	movs	r3, #126	; 0x7e
 8021808:	e7d4      	b.n	80217b4 <_malloc_r+0xac>
 802180a:	2900      	cmp	r1, #0
 802180c:	68f1      	ldr	r1, [r6, #12]
 802180e:	db04      	blt.n	802181a <_malloc_r+0x112>
 8021810:	68b3      	ldr	r3, [r6, #8]
 8021812:	60d9      	str	r1, [r3, #12]
 8021814:	608b      	str	r3, [r1, #8]
 8021816:	18b3      	adds	r3, r6, r2
 8021818:	e7a4      	b.n	8021764 <_malloc_r+0x5c>
 802181a:	460e      	mov	r6, r1
 802181c:	e7d0      	b.n	80217c0 <_malloc_r+0xb8>
 802181e:	2f00      	cmp	r7, #0
 8021820:	616a      	str	r2, [r5, #20]
 8021822:	612a      	str	r2, [r5, #16]
 8021824:	db05      	blt.n	8021832 <_malloc_r+0x12a>
 8021826:	4430      	add	r0, r6
 8021828:	6843      	ldr	r3, [r0, #4]
 802182a:	f043 0301 	orr.w	r3, r3, #1
 802182e:	6043      	str	r3, [r0, #4]
 8021830:	e79c      	b.n	802176c <_malloc_r+0x64>
 8021832:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8021836:	d244      	bcs.n	80218c2 <_malloc_r+0x1ba>
 8021838:	08c0      	lsrs	r0, r0, #3
 802183a:	1087      	asrs	r7, r0, #2
 802183c:	2201      	movs	r2, #1
 802183e:	fa02 f707 	lsl.w	r7, r2, r7
 8021842:	686a      	ldr	r2, [r5, #4]
 8021844:	3001      	adds	r0, #1
 8021846:	433a      	orrs	r2, r7
 8021848:	606a      	str	r2, [r5, #4]
 802184a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 802184e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8021852:	60b7      	str	r7, [r6, #8]
 8021854:	3a08      	subs	r2, #8
 8021856:	60f2      	str	r2, [r6, #12]
 8021858:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 802185c:	60fe      	str	r6, [r7, #12]
 802185e:	2001      	movs	r0, #1
 8021860:	109a      	asrs	r2, r3, #2
 8021862:	fa00 f202 	lsl.w	r2, r0, r2
 8021866:	6868      	ldr	r0, [r5, #4]
 8021868:	4282      	cmp	r2, r0
 802186a:	f200 80a1 	bhi.w	80219b0 <_malloc_r+0x2a8>
 802186e:	4202      	tst	r2, r0
 8021870:	d106      	bne.n	8021880 <_malloc_r+0x178>
 8021872:	f023 0303 	bic.w	r3, r3, #3
 8021876:	0052      	lsls	r2, r2, #1
 8021878:	4202      	tst	r2, r0
 802187a:	f103 0304 	add.w	r3, r3, #4
 802187e:	d0fa      	beq.n	8021876 <_malloc_r+0x16e>
 8021880:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8021884:	46e0      	mov	r8, ip
 8021886:	469e      	mov	lr, r3
 8021888:	f8d8 600c 	ldr.w	r6, [r8, #12]
 802188c:	4546      	cmp	r6, r8
 802188e:	d153      	bne.n	8021938 <_malloc_r+0x230>
 8021890:	f10e 0e01 	add.w	lr, lr, #1
 8021894:	f01e 0f03 	tst.w	lr, #3
 8021898:	f108 0808 	add.w	r8, r8, #8
 802189c:	d1f4      	bne.n	8021888 <_malloc_r+0x180>
 802189e:	0798      	lsls	r0, r3, #30
 80218a0:	d179      	bne.n	8021996 <_malloc_r+0x28e>
 80218a2:	686b      	ldr	r3, [r5, #4]
 80218a4:	ea23 0302 	bic.w	r3, r3, r2
 80218a8:	606b      	str	r3, [r5, #4]
 80218aa:	6868      	ldr	r0, [r5, #4]
 80218ac:	0052      	lsls	r2, r2, #1
 80218ae:	4282      	cmp	r2, r0
 80218b0:	d87e      	bhi.n	80219b0 <_malloc_r+0x2a8>
 80218b2:	2a00      	cmp	r2, #0
 80218b4:	d07c      	beq.n	80219b0 <_malloc_r+0x2a8>
 80218b6:	4673      	mov	r3, lr
 80218b8:	4202      	tst	r2, r0
 80218ba:	d1e1      	bne.n	8021880 <_malloc_r+0x178>
 80218bc:	3304      	adds	r3, #4
 80218be:	0052      	lsls	r2, r2, #1
 80218c0:	e7fa      	b.n	80218b8 <_malloc_r+0x1b0>
 80218c2:	0a42      	lsrs	r2, r0, #9
 80218c4:	2a04      	cmp	r2, #4
 80218c6:	d815      	bhi.n	80218f4 <_malloc_r+0x1ec>
 80218c8:	0982      	lsrs	r2, r0, #6
 80218ca:	3238      	adds	r2, #56	; 0x38
 80218cc:	1c57      	adds	r7, r2, #1
 80218ce:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80218d2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80218d6:	45be      	cmp	lr, r7
 80218d8:	d126      	bne.n	8021928 <_malloc_r+0x220>
 80218da:	2001      	movs	r0, #1
 80218dc:	1092      	asrs	r2, r2, #2
 80218de:	fa00 f202 	lsl.w	r2, r0, r2
 80218e2:	6868      	ldr	r0, [r5, #4]
 80218e4:	4310      	orrs	r0, r2
 80218e6:	6068      	str	r0, [r5, #4]
 80218e8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80218ec:	60b7      	str	r7, [r6, #8]
 80218ee:	f8ce 6008 	str.w	r6, [lr, #8]
 80218f2:	e7b3      	b.n	802185c <_malloc_r+0x154>
 80218f4:	2a14      	cmp	r2, #20
 80218f6:	d801      	bhi.n	80218fc <_malloc_r+0x1f4>
 80218f8:	325b      	adds	r2, #91	; 0x5b
 80218fa:	e7e7      	b.n	80218cc <_malloc_r+0x1c4>
 80218fc:	2a54      	cmp	r2, #84	; 0x54
 80218fe:	d802      	bhi.n	8021906 <_malloc_r+0x1fe>
 8021900:	0b02      	lsrs	r2, r0, #12
 8021902:	326e      	adds	r2, #110	; 0x6e
 8021904:	e7e2      	b.n	80218cc <_malloc_r+0x1c4>
 8021906:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 802190a:	d802      	bhi.n	8021912 <_malloc_r+0x20a>
 802190c:	0bc2      	lsrs	r2, r0, #15
 802190e:	3277      	adds	r2, #119	; 0x77
 8021910:	e7dc      	b.n	80218cc <_malloc_r+0x1c4>
 8021912:	f240 5754 	movw	r7, #1364	; 0x554
 8021916:	42ba      	cmp	r2, r7
 8021918:	bf9a      	itte	ls
 802191a:	0c82      	lsrls	r2, r0, #18
 802191c:	327c      	addls	r2, #124	; 0x7c
 802191e:	227e      	movhi	r2, #126	; 0x7e
 8021920:	e7d4      	b.n	80218cc <_malloc_r+0x1c4>
 8021922:	68bf      	ldr	r7, [r7, #8]
 8021924:	45be      	cmp	lr, r7
 8021926:	d004      	beq.n	8021932 <_malloc_r+0x22a>
 8021928:	687a      	ldr	r2, [r7, #4]
 802192a:	f022 0203 	bic.w	r2, r2, #3
 802192e:	4290      	cmp	r0, r2
 8021930:	d3f7      	bcc.n	8021922 <_malloc_r+0x21a>
 8021932:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8021936:	e7d7      	b.n	80218e8 <_malloc_r+0x1e0>
 8021938:	6870      	ldr	r0, [r6, #4]
 802193a:	68f7      	ldr	r7, [r6, #12]
 802193c:	f020 0003 	bic.w	r0, r0, #3
 8021940:	eba0 0a04 	sub.w	sl, r0, r4
 8021944:	f1ba 0f0f 	cmp.w	sl, #15
 8021948:	dd10      	ble.n	802196c <_malloc_r+0x264>
 802194a:	68b2      	ldr	r2, [r6, #8]
 802194c:	1933      	adds	r3, r6, r4
 802194e:	f044 0401 	orr.w	r4, r4, #1
 8021952:	6074      	str	r4, [r6, #4]
 8021954:	60d7      	str	r7, [r2, #12]
 8021956:	60ba      	str	r2, [r7, #8]
 8021958:	f04a 0201 	orr.w	r2, sl, #1
 802195c:	616b      	str	r3, [r5, #20]
 802195e:	612b      	str	r3, [r5, #16]
 8021960:	60d9      	str	r1, [r3, #12]
 8021962:	6099      	str	r1, [r3, #8]
 8021964:	605a      	str	r2, [r3, #4]
 8021966:	f846 a000 	str.w	sl, [r6, r0]
 802196a:	e6ff      	b.n	802176c <_malloc_r+0x64>
 802196c:	f1ba 0f00 	cmp.w	sl, #0
 8021970:	db0f      	blt.n	8021992 <_malloc_r+0x28a>
 8021972:	4430      	add	r0, r6
 8021974:	6843      	ldr	r3, [r0, #4]
 8021976:	f043 0301 	orr.w	r3, r3, #1
 802197a:	6043      	str	r3, [r0, #4]
 802197c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8021980:	4648      	mov	r0, r9
 8021982:	60df      	str	r7, [r3, #12]
 8021984:	60bb      	str	r3, [r7, #8]
 8021986:	f000 f8d3 	bl	8021b30 <__malloc_unlock>
 802198a:	4630      	mov	r0, r6
 802198c:	b003      	add	sp, #12
 802198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021992:	463e      	mov	r6, r7
 8021994:	e77a      	b.n	802188c <_malloc_r+0x184>
 8021996:	f85c 0908 	ldr.w	r0, [ip], #-8
 802199a:	4584      	cmp	ip, r0
 802199c:	f103 33ff 	add.w	r3, r3, #4294967295
 80219a0:	f43f af7d 	beq.w	802189e <_malloc_r+0x196>
 80219a4:	e781      	b.n	80218aa <_malloc_r+0x1a2>
 80219a6:	bf00      	nop
 80219a8:	20001034 	.word	0x20001034
 80219ac:	2000103c 	.word	0x2000103c
 80219b0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80219b4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80219b8:	f026 0603 	bic.w	r6, r6, #3
 80219bc:	42b4      	cmp	r4, r6
 80219be:	d803      	bhi.n	80219c8 <_malloc_r+0x2c0>
 80219c0:	1b33      	subs	r3, r6, r4
 80219c2:	2b0f      	cmp	r3, #15
 80219c4:	f300 8096 	bgt.w	8021af4 <_malloc_r+0x3ec>
 80219c8:	4a4f      	ldr	r2, [pc, #316]	; (8021b08 <_malloc_r+0x400>)
 80219ca:	6817      	ldr	r7, [r2, #0]
 80219cc:	4a4f      	ldr	r2, [pc, #316]	; (8021b0c <_malloc_r+0x404>)
 80219ce:	6811      	ldr	r1, [r2, #0]
 80219d0:	3710      	adds	r7, #16
 80219d2:	3101      	adds	r1, #1
 80219d4:	eb0b 0306 	add.w	r3, fp, r6
 80219d8:	4427      	add	r7, r4
 80219da:	d005      	beq.n	80219e8 <_malloc_r+0x2e0>
 80219dc:	494c      	ldr	r1, [pc, #304]	; (8021b10 <_malloc_r+0x408>)
 80219de:	3901      	subs	r1, #1
 80219e0:	440f      	add	r7, r1
 80219e2:	3101      	adds	r1, #1
 80219e4:	4249      	negs	r1, r1
 80219e6:	400f      	ands	r7, r1
 80219e8:	4639      	mov	r1, r7
 80219ea:	4648      	mov	r0, r9
 80219ec:	9201      	str	r2, [sp, #4]
 80219ee:	9300      	str	r3, [sp, #0]
 80219f0:	f000 fb74 	bl	80220dc <_sbrk_r>
 80219f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80219f8:	4680      	mov	r8, r0
 80219fa:	d056      	beq.n	8021aaa <_malloc_r+0x3a2>
 80219fc:	9b00      	ldr	r3, [sp, #0]
 80219fe:	9a01      	ldr	r2, [sp, #4]
 8021a00:	4283      	cmp	r3, r0
 8021a02:	d901      	bls.n	8021a08 <_malloc_r+0x300>
 8021a04:	45ab      	cmp	fp, r5
 8021a06:	d150      	bne.n	8021aaa <_malloc_r+0x3a2>
 8021a08:	4842      	ldr	r0, [pc, #264]	; (8021b14 <_malloc_r+0x40c>)
 8021a0a:	6801      	ldr	r1, [r0, #0]
 8021a0c:	4543      	cmp	r3, r8
 8021a0e:	eb07 0e01 	add.w	lr, r7, r1
 8021a12:	f8c0 e000 	str.w	lr, [r0]
 8021a16:	4940      	ldr	r1, [pc, #256]	; (8021b18 <_malloc_r+0x410>)
 8021a18:	4682      	mov	sl, r0
 8021a1a:	d113      	bne.n	8021a44 <_malloc_r+0x33c>
 8021a1c:	420b      	tst	r3, r1
 8021a1e:	d111      	bne.n	8021a44 <_malloc_r+0x33c>
 8021a20:	68ab      	ldr	r3, [r5, #8]
 8021a22:	443e      	add	r6, r7
 8021a24:	f046 0601 	orr.w	r6, r6, #1
 8021a28:	605e      	str	r6, [r3, #4]
 8021a2a:	4a3c      	ldr	r2, [pc, #240]	; (8021b1c <_malloc_r+0x414>)
 8021a2c:	f8da 3000 	ldr.w	r3, [sl]
 8021a30:	6811      	ldr	r1, [r2, #0]
 8021a32:	428b      	cmp	r3, r1
 8021a34:	bf88      	it	hi
 8021a36:	6013      	strhi	r3, [r2, #0]
 8021a38:	4a39      	ldr	r2, [pc, #228]	; (8021b20 <_malloc_r+0x418>)
 8021a3a:	6811      	ldr	r1, [r2, #0]
 8021a3c:	428b      	cmp	r3, r1
 8021a3e:	bf88      	it	hi
 8021a40:	6013      	strhi	r3, [r2, #0]
 8021a42:	e032      	b.n	8021aaa <_malloc_r+0x3a2>
 8021a44:	6810      	ldr	r0, [r2, #0]
 8021a46:	3001      	adds	r0, #1
 8021a48:	bf1b      	ittet	ne
 8021a4a:	eba8 0303 	subne.w	r3, r8, r3
 8021a4e:	4473      	addne	r3, lr
 8021a50:	f8c2 8000 	streq.w	r8, [r2]
 8021a54:	f8ca 3000 	strne.w	r3, [sl]
 8021a58:	f018 0007 	ands.w	r0, r8, #7
 8021a5c:	bf1c      	itt	ne
 8021a5e:	f1c0 0008 	rsbne	r0, r0, #8
 8021a62:	4480      	addne	r8, r0
 8021a64:	4b2a      	ldr	r3, [pc, #168]	; (8021b10 <_malloc_r+0x408>)
 8021a66:	4447      	add	r7, r8
 8021a68:	4418      	add	r0, r3
 8021a6a:	400f      	ands	r7, r1
 8021a6c:	1bc7      	subs	r7, r0, r7
 8021a6e:	4639      	mov	r1, r7
 8021a70:	4648      	mov	r0, r9
 8021a72:	f000 fb33 	bl	80220dc <_sbrk_r>
 8021a76:	1c43      	adds	r3, r0, #1
 8021a78:	bf08      	it	eq
 8021a7a:	4640      	moveq	r0, r8
 8021a7c:	f8da 3000 	ldr.w	r3, [sl]
 8021a80:	f8c5 8008 	str.w	r8, [r5, #8]
 8021a84:	bf08      	it	eq
 8021a86:	2700      	moveq	r7, #0
 8021a88:	eba0 0008 	sub.w	r0, r0, r8
 8021a8c:	443b      	add	r3, r7
 8021a8e:	4407      	add	r7, r0
 8021a90:	f047 0701 	orr.w	r7, r7, #1
 8021a94:	45ab      	cmp	fp, r5
 8021a96:	f8ca 3000 	str.w	r3, [sl]
 8021a9a:	f8c8 7004 	str.w	r7, [r8, #4]
 8021a9e:	d0c4      	beq.n	8021a2a <_malloc_r+0x322>
 8021aa0:	2e0f      	cmp	r6, #15
 8021aa2:	d810      	bhi.n	8021ac6 <_malloc_r+0x3be>
 8021aa4:	2301      	movs	r3, #1
 8021aa6:	f8c8 3004 	str.w	r3, [r8, #4]
 8021aaa:	68ab      	ldr	r3, [r5, #8]
 8021aac:	685a      	ldr	r2, [r3, #4]
 8021aae:	f022 0203 	bic.w	r2, r2, #3
 8021ab2:	4294      	cmp	r4, r2
 8021ab4:	eba2 0304 	sub.w	r3, r2, r4
 8021ab8:	d801      	bhi.n	8021abe <_malloc_r+0x3b6>
 8021aba:	2b0f      	cmp	r3, #15
 8021abc:	dc1a      	bgt.n	8021af4 <_malloc_r+0x3ec>
 8021abe:	4648      	mov	r0, r9
 8021ac0:	f000 f836 	bl	8021b30 <__malloc_unlock>
 8021ac4:	e62d      	b.n	8021722 <_malloc_r+0x1a>
 8021ac6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8021aca:	3e0c      	subs	r6, #12
 8021acc:	f026 0607 	bic.w	r6, r6, #7
 8021ad0:	f003 0301 	and.w	r3, r3, #1
 8021ad4:	4333      	orrs	r3, r6
 8021ad6:	f8cb 3004 	str.w	r3, [fp, #4]
 8021ada:	eb0b 0306 	add.w	r3, fp, r6
 8021ade:	2205      	movs	r2, #5
 8021ae0:	2e0f      	cmp	r6, #15
 8021ae2:	605a      	str	r2, [r3, #4]
 8021ae4:	609a      	str	r2, [r3, #8]
 8021ae6:	d9a0      	bls.n	8021a2a <_malloc_r+0x322>
 8021ae8:	f10b 0108 	add.w	r1, fp, #8
 8021aec:	4648      	mov	r0, r9
 8021aee:	f000 fc03 	bl	80222f8 <_free_r>
 8021af2:	e79a      	b.n	8021a2a <_malloc_r+0x322>
 8021af4:	68ae      	ldr	r6, [r5, #8]
 8021af6:	f044 0201 	orr.w	r2, r4, #1
 8021afa:	4434      	add	r4, r6
 8021afc:	f043 0301 	orr.w	r3, r3, #1
 8021b00:	6072      	str	r2, [r6, #4]
 8021b02:	60ac      	str	r4, [r5, #8]
 8021b04:	6063      	str	r3, [r4, #4]
 8021b06:	e631      	b.n	802176c <_malloc_r+0x64>
 8021b08:	2009061c 	.word	0x2009061c
 8021b0c:	2000143c 	.word	0x2000143c
 8021b10:	00000080 	.word	0x00000080
 8021b14:	200905ec 	.word	0x200905ec
 8021b18:	0000007f 	.word	0x0000007f
 8021b1c:	20090614 	.word	0x20090614
 8021b20:	20090618 	.word	0x20090618

08021b24 <__malloc_lock>:
 8021b24:	4801      	ldr	r0, [pc, #4]	; (8021b2c <__malloc_lock+0x8>)
 8021b26:	f000 bca3 	b.w	8022470 <__retarget_lock_acquire_recursive>
 8021b2a:	bf00      	nop
 8021b2c:	20096550 	.word	0x20096550

08021b30 <__malloc_unlock>:
 8021b30:	4801      	ldr	r0, [pc, #4]	; (8021b38 <__malloc_unlock+0x8>)
 8021b32:	f000 bc9e 	b.w	8022472 <__retarget_lock_release_recursive>
 8021b36:	bf00      	nop
 8021b38:	20096550 	.word	0x20096550

08021b3c <_Balloc>:
 8021b3c:	b570      	push	{r4, r5, r6, lr}
 8021b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021b40:	4604      	mov	r4, r0
 8021b42:	460e      	mov	r6, r1
 8021b44:	b93d      	cbnz	r5, 8021b56 <_Balloc+0x1a>
 8021b46:	2010      	movs	r0, #16
 8021b48:	f7ff fdd6 	bl	80216f8 <malloc>
 8021b4c:	6260      	str	r0, [r4, #36]	; 0x24
 8021b4e:	6045      	str	r5, [r0, #4]
 8021b50:	6085      	str	r5, [r0, #8]
 8021b52:	6005      	str	r5, [r0, #0]
 8021b54:	60c5      	str	r5, [r0, #12]
 8021b56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8021b58:	68eb      	ldr	r3, [r5, #12]
 8021b5a:	b183      	cbz	r3, 8021b7e <_Balloc+0x42>
 8021b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021b5e:	68db      	ldr	r3, [r3, #12]
 8021b60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8021b64:	b9b8      	cbnz	r0, 8021b96 <_Balloc+0x5a>
 8021b66:	2101      	movs	r1, #1
 8021b68:	fa01 f506 	lsl.w	r5, r1, r6
 8021b6c:	1d6a      	adds	r2, r5, #5
 8021b6e:	0092      	lsls	r2, r2, #2
 8021b70:	4620      	mov	r0, r4
 8021b72:	f000 fb3d 	bl	80221f0 <_calloc_r>
 8021b76:	b160      	cbz	r0, 8021b92 <_Balloc+0x56>
 8021b78:	6046      	str	r6, [r0, #4]
 8021b7a:	6085      	str	r5, [r0, #8]
 8021b7c:	e00e      	b.n	8021b9c <_Balloc+0x60>
 8021b7e:	2221      	movs	r2, #33	; 0x21
 8021b80:	2104      	movs	r1, #4
 8021b82:	4620      	mov	r0, r4
 8021b84:	f000 fb34 	bl	80221f0 <_calloc_r>
 8021b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021b8a:	60e8      	str	r0, [r5, #12]
 8021b8c:	68db      	ldr	r3, [r3, #12]
 8021b8e:	2b00      	cmp	r3, #0
 8021b90:	d1e4      	bne.n	8021b5c <_Balloc+0x20>
 8021b92:	2000      	movs	r0, #0
 8021b94:	bd70      	pop	{r4, r5, r6, pc}
 8021b96:	6802      	ldr	r2, [r0, #0]
 8021b98:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8021b9c:	2300      	movs	r3, #0
 8021b9e:	6103      	str	r3, [r0, #16]
 8021ba0:	60c3      	str	r3, [r0, #12]
 8021ba2:	bd70      	pop	{r4, r5, r6, pc}

08021ba4 <_Bfree>:
 8021ba4:	b570      	push	{r4, r5, r6, lr}
 8021ba6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8021ba8:	4606      	mov	r6, r0
 8021baa:	460d      	mov	r5, r1
 8021bac:	b93c      	cbnz	r4, 8021bbe <_Bfree+0x1a>
 8021bae:	2010      	movs	r0, #16
 8021bb0:	f7ff fda2 	bl	80216f8 <malloc>
 8021bb4:	6270      	str	r0, [r6, #36]	; 0x24
 8021bb6:	6044      	str	r4, [r0, #4]
 8021bb8:	6084      	str	r4, [r0, #8]
 8021bba:	6004      	str	r4, [r0, #0]
 8021bbc:	60c4      	str	r4, [r0, #12]
 8021bbe:	b13d      	cbz	r5, 8021bd0 <_Bfree+0x2c>
 8021bc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8021bc2:	686a      	ldr	r2, [r5, #4]
 8021bc4:	68db      	ldr	r3, [r3, #12]
 8021bc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021bca:	6029      	str	r1, [r5, #0]
 8021bcc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8021bd0:	bd70      	pop	{r4, r5, r6, pc}

08021bd2 <__multadd>:
 8021bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021bd6:	690d      	ldr	r5, [r1, #16]
 8021bd8:	461f      	mov	r7, r3
 8021bda:	4606      	mov	r6, r0
 8021bdc:	460c      	mov	r4, r1
 8021bde:	f101 0e14 	add.w	lr, r1, #20
 8021be2:	2300      	movs	r3, #0
 8021be4:	f8de 0000 	ldr.w	r0, [lr]
 8021be8:	b281      	uxth	r1, r0
 8021bea:	fb02 7101 	mla	r1, r2, r1, r7
 8021bee:	0c0f      	lsrs	r7, r1, #16
 8021bf0:	0c00      	lsrs	r0, r0, #16
 8021bf2:	fb02 7000 	mla	r0, r2, r0, r7
 8021bf6:	b289      	uxth	r1, r1
 8021bf8:	3301      	adds	r3, #1
 8021bfa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8021bfe:	429d      	cmp	r5, r3
 8021c00:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8021c04:	f84e 1b04 	str.w	r1, [lr], #4
 8021c08:	dcec      	bgt.n	8021be4 <__multadd+0x12>
 8021c0a:	b1d7      	cbz	r7, 8021c42 <__multadd+0x70>
 8021c0c:	68a3      	ldr	r3, [r4, #8]
 8021c0e:	429d      	cmp	r5, r3
 8021c10:	db12      	blt.n	8021c38 <__multadd+0x66>
 8021c12:	6861      	ldr	r1, [r4, #4]
 8021c14:	4630      	mov	r0, r6
 8021c16:	3101      	adds	r1, #1
 8021c18:	f7ff ff90 	bl	8021b3c <_Balloc>
 8021c1c:	6922      	ldr	r2, [r4, #16]
 8021c1e:	3202      	adds	r2, #2
 8021c20:	f104 010c 	add.w	r1, r4, #12
 8021c24:	4680      	mov	r8, r0
 8021c26:	0092      	lsls	r2, r2, #2
 8021c28:	300c      	adds	r0, #12
 8021c2a:	f7fd fed9 	bl	801f9e0 <memcpy>
 8021c2e:	4621      	mov	r1, r4
 8021c30:	4630      	mov	r0, r6
 8021c32:	f7ff ffb7 	bl	8021ba4 <_Bfree>
 8021c36:	4644      	mov	r4, r8
 8021c38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021c3c:	3501      	adds	r5, #1
 8021c3e:	615f      	str	r7, [r3, #20]
 8021c40:	6125      	str	r5, [r4, #16]
 8021c42:	4620      	mov	r0, r4
 8021c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021c48 <__hi0bits>:
 8021c48:	0c02      	lsrs	r2, r0, #16
 8021c4a:	0412      	lsls	r2, r2, #16
 8021c4c:	4603      	mov	r3, r0
 8021c4e:	b9b2      	cbnz	r2, 8021c7e <__hi0bits+0x36>
 8021c50:	0403      	lsls	r3, r0, #16
 8021c52:	2010      	movs	r0, #16
 8021c54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8021c58:	bf04      	itt	eq
 8021c5a:	021b      	lsleq	r3, r3, #8
 8021c5c:	3008      	addeq	r0, #8
 8021c5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8021c62:	bf04      	itt	eq
 8021c64:	011b      	lsleq	r3, r3, #4
 8021c66:	3004      	addeq	r0, #4
 8021c68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8021c6c:	bf04      	itt	eq
 8021c6e:	009b      	lsleq	r3, r3, #2
 8021c70:	3002      	addeq	r0, #2
 8021c72:	2b00      	cmp	r3, #0
 8021c74:	db06      	blt.n	8021c84 <__hi0bits+0x3c>
 8021c76:	005b      	lsls	r3, r3, #1
 8021c78:	d503      	bpl.n	8021c82 <__hi0bits+0x3a>
 8021c7a:	3001      	adds	r0, #1
 8021c7c:	4770      	bx	lr
 8021c7e:	2000      	movs	r0, #0
 8021c80:	e7e8      	b.n	8021c54 <__hi0bits+0xc>
 8021c82:	2020      	movs	r0, #32
 8021c84:	4770      	bx	lr

08021c86 <__lo0bits>:
 8021c86:	6803      	ldr	r3, [r0, #0]
 8021c88:	f013 0207 	ands.w	r2, r3, #7
 8021c8c:	4601      	mov	r1, r0
 8021c8e:	d00b      	beq.n	8021ca8 <__lo0bits+0x22>
 8021c90:	07da      	lsls	r2, r3, #31
 8021c92:	d423      	bmi.n	8021cdc <__lo0bits+0x56>
 8021c94:	0798      	lsls	r0, r3, #30
 8021c96:	bf49      	itett	mi
 8021c98:	085b      	lsrmi	r3, r3, #1
 8021c9a:	089b      	lsrpl	r3, r3, #2
 8021c9c:	2001      	movmi	r0, #1
 8021c9e:	600b      	strmi	r3, [r1, #0]
 8021ca0:	bf5c      	itt	pl
 8021ca2:	600b      	strpl	r3, [r1, #0]
 8021ca4:	2002      	movpl	r0, #2
 8021ca6:	4770      	bx	lr
 8021ca8:	b298      	uxth	r0, r3
 8021caa:	b9a8      	cbnz	r0, 8021cd8 <__lo0bits+0x52>
 8021cac:	0c1b      	lsrs	r3, r3, #16
 8021cae:	2010      	movs	r0, #16
 8021cb0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021cb4:	bf04      	itt	eq
 8021cb6:	0a1b      	lsreq	r3, r3, #8
 8021cb8:	3008      	addeq	r0, #8
 8021cba:	071a      	lsls	r2, r3, #28
 8021cbc:	bf04      	itt	eq
 8021cbe:	091b      	lsreq	r3, r3, #4
 8021cc0:	3004      	addeq	r0, #4
 8021cc2:	079a      	lsls	r2, r3, #30
 8021cc4:	bf04      	itt	eq
 8021cc6:	089b      	lsreq	r3, r3, #2
 8021cc8:	3002      	addeq	r0, #2
 8021cca:	07da      	lsls	r2, r3, #31
 8021ccc:	d402      	bmi.n	8021cd4 <__lo0bits+0x4e>
 8021cce:	085b      	lsrs	r3, r3, #1
 8021cd0:	d006      	beq.n	8021ce0 <__lo0bits+0x5a>
 8021cd2:	3001      	adds	r0, #1
 8021cd4:	600b      	str	r3, [r1, #0]
 8021cd6:	4770      	bx	lr
 8021cd8:	4610      	mov	r0, r2
 8021cda:	e7e9      	b.n	8021cb0 <__lo0bits+0x2a>
 8021cdc:	2000      	movs	r0, #0
 8021cde:	4770      	bx	lr
 8021ce0:	2020      	movs	r0, #32
 8021ce2:	4770      	bx	lr

08021ce4 <__i2b>:
 8021ce4:	b510      	push	{r4, lr}
 8021ce6:	460c      	mov	r4, r1
 8021ce8:	2101      	movs	r1, #1
 8021cea:	f7ff ff27 	bl	8021b3c <_Balloc>
 8021cee:	2201      	movs	r2, #1
 8021cf0:	6144      	str	r4, [r0, #20]
 8021cf2:	6102      	str	r2, [r0, #16]
 8021cf4:	bd10      	pop	{r4, pc}

08021cf6 <__multiply>:
 8021cf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cfa:	4614      	mov	r4, r2
 8021cfc:	690a      	ldr	r2, [r1, #16]
 8021cfe:	6923      	ldr	r3, [r4, #16]
 8021d00:	429a      	cmp	r2, r3
 8021d02:	bfb8      	it	lt
 8021d04:	460b      	movlt	r3, r1
 8021d06:	4689      	mov	r9, r1
 8021d08:	bfbc      	itt	lt
 8021d0a:	46a1      	movlt	r9, r4
 8021d0c:	461c      	movlt	r4, r3
 8021d0e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8021d12:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8021d16:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021d1a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8021d1e:	eb07 060a 	add.w	r6, r7, sl
 8021d22:	429e      	cmp	r6, r3
 8021d24:	bfc8      	it	gt
 8021d26:	3101      	addgt	r1, #1
 8021d28:	f7ff ff08 	bl	8021b3c <_Balloc>
 8021d2c:	f100 0514 	add.w	r5, r0, #20
 8021d30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021d34:	462b      	mov	r3, r5
 8021d36:	2200      	movs	r2, #0
 8021d38:	4543      	cmp	r3, r8
 8021d3a:	d316      	bcc.n	8021d6a <__multiply+0x74>
 8021d3c:	f104 0214 	add.w	r2, r4, #20
 8021d40:	f109 0114 	add.w	r1, r9, #20
 8021d44:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8021d48:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8021d4c:	9301      	str	r3, [sp, #4]
 8021d4e:	9c01      	ldr	r4, [sp, #4]
 8021d50:	4294      	cmp	r4, r2
 8021d52:	4613      	mov	r3, r2
 8021d54:	d80c      	bhi.n	8021d70 <__multiply+0x7a>
 8021d56:	2e00      	cmp	r6, #0
 8021d58:	dd03      	ble.n	8021d62 <__multiply+0x6c>
 8021d5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d054      	beq.n	8021e0c <__multiply+0x116>
 8021d62:	6106      	str	r6, [r0, #16]
 8021d64:	b003      	add	sp, #12
 8021d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d6a:	f843 2b04 	str.w	r2, [r3], #4
 8021d6e:	e7e3      	b.n	8021d38 <__multiply+0x42>
 8021d70:	f8b3 a000 	ldrh.w	sl, [r3]
 8021d74:	3204      	adds	r2, #4
 8021d76:	f1ba 0f00 	cmp.w	sl, #0
 8021d7a:	d020      	beq.n	8021dbe <__multiply+0xc8>
 8021d7c:	46ae      	mov	lr, r5
 8021d7e:	4689      	mov	r9, r1
 8021d80:	f04f 0c00 	mov.w	ip, #0
 8021d84:	f859 4b04 	ldr.w	r4, [r9], #4
 8021d88:	f8be b000 	ldrh.w	fp, [lr]
 8021d8c:	b2a3      	uxth	r3, r4
 8021d8e:	fb0a b303 	mla	r3, sl, r3, fp
 8021d92:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8021d96:	f8de 4000 	ldr.w	r4, [lr]
 8021d9a:	4463      	add	r3, ip
 8021d9c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8021da0:	fb0a c40b 	mla	r4, sl, fp, ip
 8021da4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8021da8:	b29b      	uxth	r3, r3
 8021daa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8021dae:	454f      	cmp	r7, r9
 8021db0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8021db4:	f84e 3b04 	str.w	r3, [lr], #4
 8021db8:	d8e4      	bhi.n	8021d84 <__multiply+0x8e>
 8021dba:	f8ce c000 	str.w	ip, [lr]
 8021dbe:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8021dc2:	f1b9 0f00 	cmp.w	r9, #0
 8021dc6:	d01f      	beq.n	8021e08 <__multiply+0x112>
 8021dc8:	682b      	ldr	r3, [r5, #0]
 8021dca:	46ae      	mov	lr, r5
 8021dcc:	468c      	mov	ip, r1
 8021dce:	f04f 0a00 	mov.w	sl, #0
 8021dd2:	f8bc 4000 	ldrh.w	r4, [ip]
 8021dd6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021dda:	fb09 b404 	mla	r4, r9, r4, fp
 8021dde:	44a2      	add	sl, r4
 8021de0:	b29b      	uxth	r3, r3
 8021de2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8021de6:	f84e 3b04 	str.w	r3, [lr], #4
 8021dea:	f85c 3b04 	ldr.w	r3, [ip], #4
 8021dee:	f8be 4000 	ldrh.w	r4, [lr]
 8021df2:	0c1b      	lsrs	r3, r3, #16
 8021df4:	fb09 4303 	mla	r3, r9, r3, r4
 8021df8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8021dfc:	4567      	cmp	r7, ip
 8021dfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021e02:	d8e6      	bhi.n	8021dd2 <__multiply+0xdc>
 8021e04:	f8ce 3000 	str.w	r3, [lr]
 8021e08:	3504      	adds	r5, #4
 8021e0a:	e7a0      	b.n	8021d4e <__multiply+0x58>
 8021e0c:	3e01      	subs	r6, #1
 8021e0e:	e7a2      	b.n	8021d56 <__multiply+0x60>

08021e10 <__pow5mult>:
 8021e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021e14:	4615      	mov	r5, r2
 8021e16:	f012 0203 	ands.w	r2, r2, #3
 8021e1a:	4606      	mov	r6, r0
 8021e1c:	460f      	mov	r7, r1
 8021e1e:	d007      	beq.n	8021e30 <__pow5mult+0x20>
 8021e20:	3a01      	subs	r2, #1
 8021e22:	4c21      	ldr	r4, [pc, #132]	; (8021ea8 <__pow5mult+0x98>)
 8021e24:	2300      	movs	r3, #0
 8021e26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021e2a:	f7ff fed2 	bl	8021bd2 <__multadd>
 8021e2e:	4607      	mov	r7, r0
 8021e30:	10ad      	asrs	r5, r5, #2
 8021e32:	d035      	beq.n	8021ea0 <__pow5mult+0x90>
 8021e34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021e36:	b93c      	cbnz	r4, 8021e48 <__pow5mult+0x38>
 8021e38:	2010      	movs	r0, #16
 8021e3a:	f7ff fc5d 	bl	80216f8 <malloc>
 8021e3e:	6270      	str	r0, [r6, #36]	; 0x24
 8021e40:	6044      	str	r4, [r0, #4]
 8021e42:	6084      	str	r4, [r0, #8]
 8021e44:	6004      	str	r4, [r0, #0]
 8021e46:	60c4      	str	r4, [r0, #12]
 8021e48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021e50:	b94c      	cbnz	r4, 8021e66 <__pow5mult+0x56>
 8021e52:	f240 2171 	movw	r1, #625	; 0x271
 8021e56:	4630      	mov	r0, r6
 8021e58:	f7ff ff44 	bl	8021ce4 <__i2b>
 8021e5c:	2300      	movs	r3, #0
 8021e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8021e62:	4604      	mov	r4, r0
 8021e64:	6003      	str	r3, [r0, #0]
 8021e66:	f04f 0800 	mov.w	r8, #0
 8021e6a:	07eb      	lsls	r3, r5, #31
 8021e6c:	d50a      	bpl.n	8021e84 <__pow5mult+0x74>
 8021e6e:	4639      	mov	r1, r7
 8021e70:	4622      	mov	r2, r4
 8021e72:	4630      	mov	r0, r6
 8021e74:	f7ff ff3f 	bl	8021cf6 <__multiply>
 8021e78:	4639      	mov	r1, r7
 8021e7a:	4681      	mov	r9, r0
 8021e7c:	4630      	mov	r0, r6
 8021e7e:	f7ff fe91 	bl	8021ba4 <_Bfree>
 8021e82:	464f      	mov	r7, r9
 8021e84:	106d      	asrs	r5, r5, #1
 8021e86:	d00b      	beq.n	8021ea0 <__pow5mult+0x90>
 8021e88:	6820      	ldr	r0, [r4, #0]
 8021e8a:	b938      	cbnz	r0, 8021e9c <__pow5mult+0x8c>
 8021e8c:	4622      	mov	r2, r4
 8021e8e:	4621      	mov	r1, r4
 8021e90:	4630      	mov	r0, r6
 8021e92:	f7ff ff30 	bl	8021cf6 <__multiply>
 8021e96:	6020      	str	r0, [r4, #0]
 8021e98:	f8c0 8000 	str.w	r8, [r0]
 8021e9c:	4604      	mov	r4, r0
 8021e9e:	e7e4      	b.n	8021e6a <__pow5mult+0x5a>
 8021ea0:	4638      	mov	r0, r7
 8021ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021ea6:	bf00      	nop
 8021ea8:	08031708 	.word	0x08031708

08021eac <__lshift>:
 8021eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021eb0:	460c      	mov	r4, r1
 8021eb2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021eb6:	6923      	ldr	r3, [r4, #16]
 8021eb8:	6849      	ldr	r1, [r1, #4]
 8021eba:	eb0a 0903 	add.w	r9, sl, r3
 8021ebe:	68a3      	ldr	r3, [r4, #8]
 8021ec0:	4607      	mov	r7, r0
 8021ec2:	4616      	mov	r6, r2
 8021ec4:	f109 0501 	add.w	r5, r9, #1
 8021ec8:	42ab      	cmp	r3, r5
 8021eca:	db31      	blt.n	8021f30 <__lshift+0x84>
 8021ecc:	4638      	mov	r0, r7
 8021ece:	f7ff fe35 	bl	8021b3c <_Balloc>
 8021ed2:	2200      	movs	r2, #0
 8021ed4:	4680      	mov	r8, r0
 8021ed6:	f100 0314 	add.w	r3, r0, #20
 8021eda:	4611      	mov	r1, r2
 8021edc:	4552      	cmp	r2, sl
 8021ede:	db2a      	blt.n	8021f36 <__lshift+0x8a>
 8021ee0:	6920      	ldr	r0, [r4, #16]
 8021ee2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021ee6:	f104 0114 	add.w	r1, r4, #20
 8021eea:	f016 021f 	ands.w	r2, r6, #31
 8021eee:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8021ef2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8021ef6:	d022      	beq.n	8021f3e <__lshift+0x92>
 8021ef8:	f1c2 0c20 	rsb	ip, r2, #32
 8021efc:	2000      	movs	r0, #0
 8021efe:	680e      	ldr	r6, [r1, #0]
 8021f00:	4096      	lsls	r6, r2
 8021f02:	4330      	orrs	r0, r6
 8021f04:	f843 0b04 	str.w	r0, [r3], #4
 8021f08:	f851 0b04 	ldr.w	r0, [r1], #4
 8021f0c:	458e      	cmp	lr, r1
 8021f0e:	fa20 f00c 	lsr.w	r0, r0, ip
 8021f12:	d8f4      	bhi.n	8021efe <__lshift+0x52>
 8021f14:	6018      	str	r0, [r3, #0]
 8021f16:	b108      	cbz	r0, 8021f1c <__lshift+0x70>
 8021f18:	f109 0502 	add.w	r5, r9, #2
 8021f1c:	3d01      	subs	r5, #1
 8021f1e:	4638      	mov	r0, r7
 8021f20:	f8c8 5010 	str.w	r5, [r8, #16]
 8021f24:	4621      	mov	r1, r4
 8021f26:	f7ff fe3d 	bl	8021ba4 <_Bfree>
 8021f2a:	4640      	mov	r0, r8
 8021f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f30:	3101      	adds	r1, #1
 8021f32:	005b      	lsls	r3, r3, #1
 8021f34:	e7c8      	b.n	8021ec8 <__lshift+0x1c>
 8021f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8021f3a:	3201      	adds	r2, #1
 8021f3c:	e7ce      	b.n	8021edc <__lshift+0x30>
 8021f3e:	3b04      	subs	r3, #4
 8021f40:	f851 2b04 	ldr.w	r2, [r1], #4
 8021f44:	f843 2f04 	str.w	r2, [r3, #4]!
 8021f48:	458e      	cmp	lr, r1
 8021f4a:	d8f9      	bhi.n	8021f40 <__lshift+0x94>
 8021f4c:	e7e6      	b.n	8021f1c <__lshift+0x70>

08021f4e <__mcmp>:
 8021f4e:	6903      	ldr	r3, [r0, #16]
 8021f50:	690a      	ldr	r2, [r1, #16]
 8021f52:	1a9b      	subs	r3, r3, r2
 8021f54:	b530      	push	{r4, r5, lr}
 8021f56:	d10c      	bne.n	8021f72 <__mcmp+0x24>
 8021f58:	0092      	lsls	r2, r2, #2
 8021f5a:	3014      	adds	r0, #20
 8021f5c:	3114      	adds	r1, #20
 8021f5e:	1884      	adds	r4, r0, r2
 8021f60:	4411      	add	r1, r2
 8021f62:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8021f66:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8021f6a:	4295      	cmp	r5, r2
 8021f6c:	d003      	beq.n	8021f76 <__mcmp+0x28>
 8021f6e:	d305      	bcc.n	8021f7c <__mcmp+0x2e>
 8021f70:	2301      	movs	r3, #1
 8021f72:	4618      	mov	r0, r3
 8021f74:	bd30      	pop	{r4, r5, pc}
 8021f76:	42a0      	cmp	r0, r4
 8021f78:	d3f3      	bcc.n	8021f62 <__mcmp+0x14>
 8021f7a:	e7fa      	b.n	8021f72 <__mcmp+0x24>
 8021f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8021f80:	e7f7      	b.n	8021f72 <__mcmp+0x24>

08021f82 <__mdiff>:
 8021f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f86:	460d      	mov	r5, r1
 8021f88:	4607      	mov	r7, r0
 8021f8a:	4611      	mov	r1, r2
 8021f8c:	4628      	mov	r0, r5
 8021f8e:	4614      	mov	r4, r2
 8021f90:	f7ff ffdd 	bl	8021f4e <__mcmp>
 8021f94:	1e06      	subs	r6, r0, #0
 8021f96:	d108      	bne.n	8021faa <__mdiff+0x28>
 8021f98:	4631      	mov	r1, r6
 8021f9a:	4638      	mov	r0, r7
 8021f9c:	f7ff fdce 	bl	8021b3c <_Balloc>
 8021fa0:	2301      	movs	r3, #1
 8021fa2:	6103      	str	r3, [r0, #16]
 8021fa4:	6146      	str	r6, [r0, #20]
 8021fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021faa:	bfa4      	itt	ge
 8021fac:	4623      	movge	r3, r4
 8021fae:	462c      	movge	r4, r5
 8021fb0:	4638      	mov	r0, r7
 8021fb2:	6861      	ldr	r1, [r4, #4]
 8021fb4:	bfa6      	itte	ge
 8021fb6:	461d      	movge	r5, r3
 8021fb8:	2600      	movge	r6, #0
 8021fba:	2601      	movlt	r6, #1
 8021fbc:	f7ff fdbe 	bl	8021b3c <_Balloc>
 8021fc0:	692b      	ldr	r3, [r5, #16]
 8021fc2:	60c6      	str	r6, [r0, #12]
 8021fc4:	6926      	ldr	r6, [r4, #16]
 8021fc6:	f105 0914 	add.w	r9, r5, #20
 8021fca:	f104 0214 	add.w	r2, r4, #20
 8021fce:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8021fd2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8021fd6:	f100 0514 	add.w	r5, r0, #20
 8021fda:	f04f 0c00 	mov.w	ip, #0
 8021fde:	f852 ab04 	ldr.w	sl, [r2], #4
 8021fe2:	f859 4b04 	ldr.w	r4, [r9], #4
 8021fe6:	fa1c f18a 	uxtah	r1, ip, sl
 8021fea:	b2a3      	uxth	r3, r4
 8021fec:	1ac9      	subs	r1, r1, r3
 8021fee:	0c23      	lsrs	r3, r4, #16
 8021ff0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8021ff4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8021ff8:	b289      	uxth	r1, r1
 8021ffa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8021ffe:	45c8      	cmp	r8, r9
 8022000:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8022004:	4696      	mov	lr, r2
 8022006:	f845 3b04 	str.w	r3, [r5], #4
 802200a:	d8e8      	bhi.n	8021fde <__mdiff+0x5c>
 802200c:	45be      	cmp	lr, r7
 802200e:	d305      	bcc.n	802201c <__mdiff+0x9a>
 8022010:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8022014:	b18b      	cbz	r3, 802203a <__mdiff+0xb8>
 8022016:	6106      	str	r6, [r0, #16]
 8022018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802201c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8022020:	fa1c f381 	uxtah	r3, ip, r1
 8022024:	141a      	asrs	r2, r3, #16
 8022026:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802202a:	b29b      	uxth	r3, r3
 802202c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022030:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022034:	f845 3b04 	str.w	r3, [r5], #4
 8022038:	e7e8      	b.n	802200c <__mdiff+0x8a>
 802203a:	3e01      	subs	r6, #1
 802203c:	e7e8      	b.n	8022010 <__mdiff+0x8e>

0802203e <__d2b>:
 802203e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022042:	460e      	mov	r6, r1
 8022044:	2101      	movs	r1, #1
 8022046:	ec59 8b10 	vmov	r8, r9, d0
 802204a:	4615      	mov	r5, r2
 802204c:	f7ff fd76 	bl	8021b3c <_Balloc>
 8022050:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8022054:	4607      	mov	r7, r0
 8022056:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802205a:	bb34      	cbnz	r4, 80220aa <__d2b+0x6c>
 802205c:	9301      	str	r3, [sp, #4]
 802205e:	f1b8 0f00 	cmp.w	r8, #0
 8022062:	d027      	beq.n	80220b4 <__d2b+0x76>
 8022064:	a802      	add	r0, sp, #8
 8022066:	f840 8d08 	str.w	r8, [r0, #-8]!
 802206a:	f7ff fe0c 	bl	8021c86 <__lo0bits>
 802206e:	9900      	ldr	r1, [sp, #0]
 8022070:	b1f0      	cbz	r0, 80220b0 <__d2b+0x72>
 8022072:	9a01      	ldr	r2, [sp, #4]
 8022074:	f1c0 0320 	rsb	r3, r0, #32
 8022078:	fa02 f303 	lsl.w	r3, r2, r3
 802207c:	430b      	orrs	r3, r1
 802207e:	40c2      	lsrs	r2, r0
 8022080:	617b      	str	r3, [r7, #20]
 8022082:	9201      	str	r2, [sp, #4]
 8022084:	9b01      	ldr	r3, [sp, #4]
 8022086:	61bb      	str	r3, [r7, #24]
 8022088:	2b00      	cmp	r3, #0
 802208a:	bf14      	ite	ne
 802208c:	2102      	movne	r1, #2
 802208e:	2101      	moveq	r1, #1
 8022090:	6139      	str	r1, [r7, #16]
 8022092:	b1c4      	cbz	r4, 80220c6 <__d2b+0x88>
 8022094:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8022098:	4404      	add	r4, r0
 802209a:	6034      	str	r4, [r6, #0]
 802209c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80220a0:	6028      	str	r0, [r5, #0]
 80220a2:	4638      	mov	r0, r7
 80220a4:	b003      	add	sp, #12
 80220a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80220aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80220ae:	e7d5      	b.n	802205c <__d2b+0x1e>
 80220b0:	6179      	str	r1, [r7, #20]
 80220b2:	e7e7      	b.n	8022084 <__d2b+0x46>
 80220b4:	a801      	add	r0, sp, #4
 80220b6:	f7ff fde6 	bl	8021c86 <__lo0bits>
 80220ba:	9b01      	ldr	r3, [sp, #4]
 80220bc:	617b      	str	r3, [r7, #20]
 80220be:	2101      	movs	r1, #1
 80220c0:	6139      	str	r1, [r7, #16]
 80220c2:	3020      	adds	r0, #32
 80220c4:	e7e5      	b.n	8022092 <__d2b+0x54>
 80220c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80220ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80220ce:	6030      	str	r0, [r6, #0]
 80220d0:	6918      	ldr	r0, [r3, #16]
 80220d2:	f7ff fdb9 	bl	8021c48 <__hi0bits>
 80220d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80220da:	e7e1      	b.n	80220a0 <__d2b+0x62>

080220dc <_sbrk_r>:
 80220dc:	b538      	push	{r3, r4, r5, lr}
 80220de:	4c06      	ldr	r4, [pc, #24]	; (80220f8 <_sbrk_r+0x1c>)
 80220e0:	2300      	movs	r3, #0
 80220e2:	4605      	mov	r5, r0
 80220e4:	4608      	mov	r0, r1
 80220e6:	6023      	str	r3, [r4, #0]
 80220e8:	f7fd f9b6 	bl	801f458 <_sbrk>
 80220ec:	1c43      	adds	r3, r0, #1
 80220ee:	d102      	bne.n	80220f6 <_sbrk_r+0x1a>
 80220f0:	6823      	ldr	r3, [r4, #0]
 80220f2:	b103      	cbz	r3, 80220f6 <_sbrk_r+0x1a>
 80220f4:	602b      	str	r3, [r5, #0]
 80220f6:	bd38      	pop	{r3, r4, r5, pc}
 80220f8:	20096558 	.word	0x20096558

080220fc <__ssprint_r>:
 80220fc:	6893      	ldr	r3, [r2, #8]
 80220fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022102:	4681      	mov	r9, r0
 8022104:	460c      	mov	r4, r1
 8022106:	4617      	mov	r7, r2
 8022108:	2b00      	cmp	r3, #0
 802210a:	d060      	beq.n	80221ce <__ssprint_r+0xd2>
 802210c:	f04f 0b00 	mov.w	fp, #0
 8022110:	f8d2 a000 	ldr.w	sl, [r2]
 8022114:	465e      	mov	r6, fp
 8022116:	b356      	cbz	r6, 802216e <__ssprint_r+0x72>
 8022118:	68a3      	ldr	r3, [r4, #8]
 802211a:	429e      	cmp	r6, r3
 802211c:	d344      	bcc.n	80221a8 <__ssprint_r+0xac>
 802211e:	89a2      	ldrh	r2, [r4, #12]
 8022120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022124:	d03e      	beq.n	80221a4 <__ssprint_r+0xa8>
 8022126:	6825      	ldr	r5, [r4, #0]
 8022128:	6921      	ldr	r1, [r4, #16]
 802212a:	eba5 0801 	sub.w	r8, r5, r1
 802212e:	6965      	ldr	r5, [r4, #20]
 8022130:	2302      	movs	r3, #2
 8022132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022136:	fb95 f5f3 	sdiv	r5, r5, r3
 802213a:	f108 0301 	add.w	r3, r8, #1
 802213e:	4433      	add	r3, r6
 8022140:	429d      	cmp	r5, r3
 8022142:	bf38      	it	cc
 8022144:	461d      	movcc	r5, r3
 8022146:	0553      	lsls	r3, r2, #21
 8022148:	d546      	bpl.n	80221d8 <__ssprint_r+0xdc>
 802214a:	4629      	mov	r1, r5
 802214c:	4648      	mov	r0, r9
 802214e:	f7ff fadb 	bl	8021708 <_malloc_r>
 8022152:	b998      	cbnz	r0, 802217c <__ssprint_r+0x80>
 8022154:	230c      	movs	r3, #12
 8022156:	f8c9 3000 	str.w	r3, [r9]
 802215a:	89a3      	ldrh	r3, [r4, #12]
 802215c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022160:	81a3      	strh	r3, [r4, #12]
 8022162:	2300      	movs	r3, #0
 8022164:	60bb      	str	r3, [r7, #8]
 8022166:	607b      	str	r3, [r7, #4]
 8022168:	f04f 30ff 	mov.w	r0, #4294967295
 802216c:	e031      	b.n	80221d2 <__ssprint_r+0xd6>
 802216e:	f8da b000 	ldr.w	fp, [sl]
 8022172:	f8da 6004 	ldr.w	r6, [sl, #4]
 8022176:	f10a 0a08 	add.w	sl, sl, #8
 802217a:	e7cc      	b.n	8022116 <__ssprint_r+0x1a>
 802217c:	4642      	mov	r2, r8
 802217e:	6921      	ldr	r1, [r4, #16]
 8022180:	9001      	str	r0, [sp, #4]
 8022182:	f7fd fc2d 	bl	801f9e0 <memcpy>
 8022186:	89a2      	ldrh	r2, [r4, #12]
 8022188:	9b01      	ldr	r3, [sp, #4]
 802218a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 802218e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022192:	81a2      	strh	r2, [r4, #12]
 8022194:	6123      	str	r3, [r4, #16]
 8022196:	6165      	str	r5, [r4, #20]
 8022198:	4443      	add	r3, r8
 802219a:	eba5 0508 	sub.w	r5, r5, r8
 802219e:	6023      	str	r3, [r4, #0]
 80221a0:	60a5      	str	r5, [r4, #8]
 80221a2:	4633      	mov	r3, r6
 80221a4:	429e      	cmp	r6, r3
 80221a6:	d200      	bcs.n	80221aa <__ssprint_r+0xae>
 80221a8:	4633      	mov	r3, r6
 80221aa:	461a      	mov	r2, r3
 80221ac:	4659      	mov	r1, fp
 80221ae:	6820      	ldr	r0, [r4, #0]
 80221b0:	9301      	str	r3, [sp, #4]
 80221b2:	f000 f971 	bl	8022498 <memmove>
 80221b6:	68a2      	ldr	r2, [r4, #8]
 80221b8:	9b01      	ldr	r3, [sp, #4]
 80221ba:	1ad2      	subs	r2, r2, r3
 80221bc:	60a2      	str	r2, [r4, #8]
 80221be:	6822      	ldr	r2, [r4, #0]
 80221c0:	4413      	add	r3, r2
 80221c2:	6023      	str	r3, [r4, #0]
 80221c4:	68bb      	ldr	r3, [r7, #8]
 80221c6:	1b9e      	subs	r6, r3, r6
 80221c8:	60be      	str	r6, [r7, #8]
 80221ca:	2e00      	cmp	r6, #0
 80221cc:	d1cf      	bne.n	802216e <__ssprint_r+0x72>
 80221ce:	2000      	movs	r0, #0
 80221d0:	6078      	str	r0, [r7, #4]
 80221d2:	b003      	add	sp, #12
 80221d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221d8:	462a      	mov	r2, r5
 80221da:	4648      	mov	r0, r9
 80221dc:	f000 f976 	bl	80224cc <_realloc_r>
 80221e0:	4603      	mov	r3, r0
 80221e2:	2800      	cmp	r0, #0
 80221e4:	d1d6      	bne.n	8022194 <__ssprint_r+0x98>
 80221e6:	6921      	ldr	r1, [r4, #16]
 80221e8:	4648      	mov	r0, r9
 80221ea:	f000 f885 	bl	80222f8 <_free_r>
 80221ee:	e7b1      	b.n	8022154 <__ssprint_r+0x58>

080221f0 <_calloc_r>:
 80221f0:	b510      	push	{r4, lr}
 80221f2:	4351      	muls	r1, r2
 80221f4:	f7ff fa88 	bl	8021708 <_malloc_r>
 80221f8:	4604      	mov	r4, r0
 80221fa:	b198      	cbz	r0, 8022224 <_calloc_r+0x34>
 80221fc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022200:	f022 0203 	bic.w	r2, r2, #3
 8022204:	3a04      	subs	r2, #4
 8022206:	2a24      	cmp	r2, #36	; 0x24
 8022208:	d81b      	bhi.n	8022242 <_calloc_r+0x52>
 802220a:	2a13      	cmp	r2, #19
 802220c:	d917      	bls.n	802223e <_calloc_r+0x4e>
 802220e:	2100      	movs	r1, #0
 8022210:	2a1b      	cmp	r2, #27
 8022212:	6001      	str	r1, [r0, #0]
 8022214:	6041      	str	r1, [r0, #4]
 8022216:	d807      	bhi.n	8022228 <_calloc_r+0x38>
 8022218:	f100 0308 	add.w	r3, r0, #8
 802221c:	2200      	movs	r2, #0
 802221e:	601a      	str	r2, [r3, #0]
 8022220:	605a      	str	r2, [r3, #4]
 8022222:	609a      	str	r2, [r3, #8]
 8022224:	4620      	mov	r0, r4
 8022226:	bd10      	pop	{r4, pc}
 8022228:	2a24      	cmp	r2, #36	; 0x24
 802222a:	6081      	str	r1, [r0, #8]
 802222c:	60c1      	str	r1, [r0, #12]
 802222e:	bf11      	iteee	ne
 8022230:	f100 0310 	addne.w	r3, r0, #16
 8022234:	6101      	streq	r1, [r0, #16]
 8022236:	f100 0318 	addeq.w	r3, r0, #24
 802223a:	6141      	streq	r1, [r0, #20]
 802223c:	e7ee      	b.n	802221c <_calloc_r+0x2c>
 802223e:	4603      	mov	r3, r0
 8022240:	e7ec      	b.n	802221c <_calloc_r+0x2c>
 8022242:	2100      	movs	r1, #0
 8022244:	f7fd fbd7 	bl	801f9f6 <memset>
 8022248:	e7ec      	b.n	8022224 <_calloc_r+0x34>
	...

0802224c <_malloc_trim_r>:
 802224c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022250:	4f25      	ldr	r7, [pc, #148]	; (80222e8 <_malloc_trim_r+0x9c>)
 8022252:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80222f4 <_malloc_trim_r+0xa8>
 8022256:	4689      	mov	r9, r1
 8022258:	4606      	mov	r6, r0
 802225a:	f7ff fc63 	bl	8021b24 <__malloc_lock>
 802225e:	68bb      	ldr	r3, [r7, #8]
 8022260:	685d      	ldr	r5, [r3, #4]
 8022262:	f1a8 0411 	sub.w	r4, r8, #17
 8022266:	f025 0503 	bic.w	r5, r5, #3
 802226a:	eba4 0409 	sub.w	r4, r4, r9
 802226e:	442c      	add	r4, r5
 8022270:	fbb4 f4f8 	udiv	r4, r4, r8
 8022274:	3c01      	subs	r4, #1
 8022276:	fb08 f404 	mul.w	r4, r8, r4
 802227a:	4544      	cmp	r4, r8
 802227c:	da05      	bge.n	802228a <_malloc_trim_r+0x3e>
 802227e:	4630      	mov	r0, r6
 8022280:	f7ff fc56 	bl	8021b30 <__malloc_unlock>
 8022284:	2000      	movs	r0, #0
 8022286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802228a:	2100      	movs	r1, #0
 802228c:	4630      	mov	r0, r6
 802228e:	f7ff ff25 	bl	80220dc <_sbrk_r>
 8022292:	68bb      	ldr	r3, [r7, #8]
 8022294:	442b      	add	r3, r5
 8022296:	4298      	cmp	r0, r3
 8022298:	d1f1      	bne.n	802227e <_malloc_trim_r+0x32>
 802229a:	4261      	negs	r1, r4
 802229c:	4630      	mov	r0, r6
 802229e:	f7ff ff1d 	bl	80220dc <_sbrk_r>
 80222a2:	3001      	adds	r0, #1
 80222a4:	d110      	bne.n	80222c8 <_malloc_trim_r+0x7c>
 80222a6:	2100      	movs	r1, #0
 80222a8:	4630      	mov	r0, r6
 80222aa:	f7ff ff17 	bl	80220dc <_sbrk_r>
 80222ae:	68ba      	ldr	r2, [r7, #8]
 80222b0:	1a83      	subs	r3, r0, r2
 80222b2:	2b0f      	cmp	r3, #15
 80222b4:	dde3      	ble.n	802227e <_malloc_trim_r+0x32>
 80222b6:	490d      	ldr	r1, [pc, #52]	; (80222ec <_malloc_trim_r+0xa0>)
 80222b8:	6809      	ldr	r1, [r1, #0]
 80222ba:	1a40      	subs	r0, r0, r1
 80222bc:	490c      	ldr	r1, [pc, #48]	; (80222f0 <_malloc_trim_r+0xa4>)
 80222be:	f043 0301 	orr.w	r3, r3, #1
 80222c2:	6008      	str	r0, [r1, #0]
 80222c4:	6053      	str	r3, [r2, #4]
 80222c6:	e7da      	b.n	802227e <_malloc_trim_r+0x32>
 80222c8:	68bb      	ldr	r3, [r7, #8]
 80222ca:	4a09      	ldr	r2, [pc, #36]	; (80222f0 <_malloc_trim_r+0xa4>)
 80222cc:	1b2d      	subs	r5, r5, r4
 80222ce:	f045 0501 	orr.w	r5, r5, #1
 80222d2:	605d      	str	r5, [r3, #4]
 80222d4:	6813      	ldr	r3, [r2, #0]
 80222d6:	4630      	mov	r0, r6
 80222d8:	1b1c      	subs	r4, r3, r4
 80222da:	6014      	str	r4, [r2, #0]
 80222dc:	f7ff fc28 	bl	8021b30 <__malloc_unlock>
 80222e0:	2001      	movs	r0, #1
 80222e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80222e6:	bf00      	nop
 80222e8:	20001034 	.word	0x20001034
 80222ec:	2000143c 	.word	0x2000143c
 80222f0:	200905ec 	.word	0x200905ec
 80222f4:	00000080 	.word	0x00000080

080222f8 <_free_r>:
 80222f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222fc:	4604      	mov	r4, r0
 80222fe:	4688      	mov	r8, r1
 8022300:	2900      	cmp	r1, #0
 8022302:	f000 80ab 	beq.w	802245c <_free_r+0x164>
 8022306:	f7ff fc0d 	bl	8021b24 <__malloc_lock>
 802230a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 802230e:	4d54      	ldr	r5, [pc, #336]	; (8022460 <_free_r+0x168>)
 8022310:	f022 0001 	bic.w	r0, r2, #1
 8022314:	f1a8 0308 	sub.w	r3, r8, #8
 8022318:	181f      	adds	r7, r3, r0
 802231a:	68a9      	ldr	r1, [r5, #8]
 802231c:	687e      	ldr	r6, [r7, #4]
 802231e:	428f      	cmp	r7, r1
 8022320:	f026 0603 	bic.w	r6, r6, #3
 8022324:	f002 0201 	and.w	r2, r2, #1
 8022328:	d11b      	bne.n	8022362 <_free_r+0x6a>
 802232a:	4430      	add	r0, r6
 802232c:	b93a      	cbnz	r2, 802233e <_free_r+0x46>
 802232e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8022332:	1a9b      	subs	r3, r3, r2
 8022334:	4410      	add	r0, r2
 8022336:	6899      	ldr	r1, [r3, #8]
 8022338:	68da      	ldr	r2, [r3, #12]
 802233a:	60ca      	str	r2, [r1, #12]
 802233c:	6091      	str	r1, [r2, #8]
 802233e:	f040 0201 	orr.w	r2, r0, #1
 8022342:	605a      	str	r2, [r3, #4]
 8022344:	60ab      	str	r3, [r5, #8]
 8022346:	4b47      	ldr	r3, [pc, #284]	; (8022464 <_free_r+0x16c>)
 8022348:	681b      	ldr	r3, [r3, #0]
 802234a:	4298      	cmp	r0, r3
 802234c:	d304      	bcc.n	8022358 <_free_r+0x60>
 802234e:	4b46      	ldr	r3, [pc, #280]	; (8022468 <_free_r+0x170>)
 8022350:	4620      	mov	r0, r4
 8022352:	6819      	ldr	r1, [r3, #0]
 8022354:	f7ff ff7a 	bl	802224c <_malloc_trim_r>
 8022358:	4620      	mov	r0, r4
 802235a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802235e:	f7ff bbe7 	b.w	8021b30 <__malloc_unlock>
 8022362:	607e      	str	r6, [r7, #4]
 8022364:	2a00      	cmp	r2, #0
 8022366:	d139      	bne.n	80223dc <_free_r+0xe4>
 8022368:	f858 1c08 	ldr.w	r1, [r8, #-8]
 802236c:	1a5b      	subs	r3, r3, r1
 802236e:	4408      	add	r0, r1
 8022370:	6899      	ldr	r1, [r3, #8]
 8022372:	f105 0e08 	add.w	lr, r5, #8
 8022376:	4571      	cmp	r1, lr
 8022378:	d032      	beq.n	80223e0 <_free_r+0xe8>
 802237a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 802237e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8022382:	f8ce 1008 	str.w	r1, [lr, #8]
 8022386:	19b9      	adds	r1, r7, r6
 8022388:	6849      	ldr	r1, [r1, #4]
 802238a:	07c9      	lsls	r1, r1, #31
 802238c:	d40a      	bmi.n	80223a4 <_free_r+0xac>
 802238e:	4430      	add	r0, r6
 8022390:	68b9      	ldr	r1, [r7, #8]
 8022392:	bb3a      	cbnz	r2, 80223e4 <_free_r+0xec>
 8022394:	4e35      	ldr	r6, [pc, #212]	; (802246c <_free_r+0x174>)
 8022396:	42b1      	cmp	r1, r6
 8022398:	d124      	bne.n	80223e4 <_free_r+0xec>
 802239a:	616b      	str	r3, [r5, #20]
 802239c:	612b      	str	r3, [r5, #16]
 802239e:	2201      	movs	r2, #1
 80223a0:	60d9      	str	r1, [r3, #12]
 80223a2:	6099      	str	r1, [r3, #8]
 80223a4:	f040 0101 	orr.w	r1, r0, #1
 80223a8:	6059      	str	r1, [r3, #4]
 80223aa:	5018      	str	r0, [r3, r0]
 80223ac:	2a00      	cmp	r2, #0
 80223ae:	d1d3      	bne.n	8022358 <_free_r+0x60>
 80223b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80223b4:	d21a      	bcs.n	80223ec <_free_r+0xf4>
 80223b6:	08c0      	lsrs	r0, r0, #3
 80223b8:	1081      	asrs	r1, r0, #2
 80223ba:	2201      	movs	r2, #1
 80223bc:	408a      	lsls	r2, r1
 80223be:	6869      	ldr	r1, [r5, #4]
 80223c0:	3001      	adds	r0, #1
 80223c2:	430a      	orrs	r2, r1
 80223c4:	606a      	str	r2, [r5, #4]
 80223c6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80223ca:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80223ce:	6099      	str	r1, [r3, #8]
 80223d0:	3a08      	subs	r2, #8
 80223d2:	60da      	str	r2, [r3, #12]
 80223d4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80223d8:	60cb      	str	r3, [r1, #12]
 80223da:	e7bd      	b.n	8022358 <_free_r+0x60>
 80223dc:	2200      	movs	r2, #0
 80223de:	e7d2      	b.n	8022386 <_free_r+0x8e>
 80223e0:	2201      	movs	r2, #1
 80223e2:	e7d0      	b.n	8022386 <_free_r+0x8e>
 80223e4:	68fe      	ldr	r6, [r7, #12]
 80223e6:	60ce      	str	r6, [r1, #12]
 80223e8:	60b1      	str	r1, [r6, #8]
 80223ea:	e7db      	b.n	80223a4 <_free_r+0xac>
 80223ec:	0a42      	lsrs	r2, r0, #9
 80223ee:	2a04      	cmp	r2, #4
 80223f0:	d813      	bhi.n	802241a <_free_r+0x122>
 80223f2:	0982      	lsrs	r2, r0, #6
 80223f4:	3238      	adds	r2, #56	; 0x38
 80223f6:	1c51      	adds	r1, r2, #1
 80223f8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80223fc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8022400:	428e      	cmp	r6, r1
 8022402:	d124      	bne.n	802244e <_free_r+0x156>
 8022404:	2001      	movs	r0, #1
 8022406:	1092      	asrs	r2, r2, #2
 8022408:	fa00 f202 	lsl.w	r2, r0, r2
 802240c:	6868      	ldr	r0, [r5, #4]
 802240e:	4302      	orrs	r2, r0
 8022410:	606a      	str	r2, [r5, #4]
 8022412:	60de      	str	r6, [r3, #12]
 8022414:	6099      	str	r1, [r3, #8]
 8022416:	60b3      	str	r3, [r6, #8]
 8022418:	e7de      	b.n	80223d8 <_free_r+0xe0>
 802241a:	2a14      	cmp	r2, #20
 802241c:	d801      	bhi.n	8022422 <_free_r+0x12a>
 802241e:	325b      	adds	r2, #91	; 0x5b
 8022420:	e7e9      	b.n	80223f6 <_free_r+0xfe>
 8022422:	2a54      	cmp	r2, #84	; 0x54
 8022424:	d802      	bhi.n	802242c <_free_r+0x134>
 8022426:	0b02      	lsrs	r2, r0, #12
 8022428:	326e      	adds	r2, #110	; 0x6e
 802242a:	e7e4      	b.n	80223f6 <_free_r+0xfe>
 802242c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8022430:	d802      	bhi.n	8022438 <_free_r+0x140>
 8022432:	0bc2      	lsrs	r2, r0, #15
 8022434:	3277      	adds	r2, #119	; 0x77
 8022436:	e7de      	b.n	80223f6 <_free_r+0xfe>
 8022438:	f240 5154 	movw	r1, #1364	; 0x554
 802243c:	428a      	cmp	r2, r1
 802243e:	bf9a      	itte	ls
 8022440:	0c82      	lsrls	r2, r0, #18
 8022442:	327c      	addls	r2, #124	; 0x7c
 8022444:	227e      	movhi	r2, #126	; 0x7e
 8022446:	e7d6      	b.n	80223f6 <_free_r+0xfe>
 8022448:	6889      	ldr	r1, [r1, #8]
 802244a:	428e      	cmp	r6, r1
 802244c:	d004      	beq.n	8022458 <_free_r+0x160>
 802244e:	684a      	ldr	r2, [r1, #4]
 8022450:	f022 0203 	bic.w	r2, r2, #3
 8022454:	4290      	cmp	r0, r2
 8022456:	d3f7      	bcc.n	8022448 <_free_r+0x150>
 8022458:	68ce      	ldr	r6, [r1, #12]
 802245a:	e7da      	b.n	8022412 <_free_r+0x11a>
 802245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022460:	20001034 	.word	0x20001034
 8022464:	20001440 	.word	0x20001440
 8022468:	2009061c 	.word	0x2009061c
 802246c:	2000103c 	.word	0x2000103c

08022470 <__retarget_lock_acquire_recursive>:
 8022470:	4770      	bx	lr

08022472 <__retarget_lock_release_recursive>:
 8022472:	4770      	bx	lr

08022474 <__ascii_mbtowc>:
 8022474:	b082      	sub	sp, #8
 8022476:	b901      	cbnz	r1, 802247a <__ascii_mbtowc+0x6>
 8022478:	a901      	add	r1, sp, #4
 802247a:	b142      	cbz	r2, 802248e <__ascii_mbtowc+0x1a>
 802247c:	b14b      	cbz	r3, 8022492 <__ascii_mbtowc+0x1e>
 802247e:	7813      	ldrb	r3, [r2, #0]
 8022480:	600b      	str	r3, [r1, #0]
 8022482:	7812      	ldrb	r2, [r2, #0]
 8022484:	1c10      	adds	r0, r2, #0
 8022486:	bf18      	it	ne
 8022488:	2001      	movne	r0, #1
 802248a:	b002      	add	sp, #8
 802248c:	4770      	bx	lr
 802248e:	4610      	mov	r0, r2
 8022490:	e7fb      	b.n	802248a <__ascii_mbtowc+0x16>
 8022492:	f06f 0001 	mvn.w	r0, #1
 8022496:	e7f8      	b.n	802248a <__ascii_mbtowc+0x16>

08022498 <memmove>:
 8022498:	4288      	cmp	r0, r1
 802249a:	b510      	push	{r4, lr}
 802249c:	eb01 0302 	add.w	r3, r1, r2
 80224a0:	d803      	bhi.n	80224aa <memmove+0x12>
 80224a2:	1e42      	subs	r2, r0, #1
 80224a4:	4299      	cmp	r1, r3
 80224a6:	d10c      	bne.n	80224c2 <memmove+0x2a>
 80224a8:	bd10      	pop	{r4, pc}
 80224aa:	4298      	cmp	r0, r3
 80224ac:	d2f9      	bcs.n	80224a2 <memmove+0xa>
 80224ae:	1881      	adds	r1, r0, r2
 80224b0:	1ad2      	subs	r2, r2, r3
 80224b2:	42d3      	cmn	r3, r2
 80224b4:	d100      	bne.n	80224b8 <memmove+0x20>
 80224b6:	bd10      	pop	{r4, pc}
 80224b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80224bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80224c0:	e7f7      	b.n	80224b2 <memmove+0x1a>
 80224c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80224c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80224ca:	e7eb      	b.n	80224a4 <memmove+0xc>

080224cc <_realloc_r>:
 80224cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224d0:	4682      	mov	sl, r0
 80224d2:	460c      	mov	r4, r1
 80224d4:	b929      	cbnz	r1, 80224e2 <_realloc_r+0x16>
 80224d6:	4611      	mov	r1, r2
 80224d8:	b003      	add	sp, #12
 80224da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224de:	f7ff b913 	b.w	8021708 <_malloc_r>
 80224e2:	9201      	str	r2, [sp, #4]
 80224e4:	f7ff fb1e 	bl	8021b24 <__malloc_lock>
 80224e8:	9a01      	ldr	r2, [sp, #4]
 80224ea:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80224ee:	f102 080b 	add.w	r8, r2, #11
 80224f2:	f1b8 0f16 	cmp.w	r8, #22
 80224f6:	f1a4 0908 	sub.w	r9, r4, #8
 80224fa:	f025 0603 	bic.w	r6, r5, #3
 80224fe:	d90a      	bls.n	8022516 <_realloc_r+0x4a>
 8022500:	f038 0807 	bics.w	r8, r8, #7
 8022504:	d509      	bpl.n	802251a <_realloc_r+0x4e>
 8022506:	230c      	movs	r3, #12
 8022508:	f8ca 3000 	str.w	r3, [sl]
 802250c:	2700      	movs	r7, #0
 802250e:	4638      	mov	r0, r7
 8022510:	b003      	add	sp, #12
 8022512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022516:	f04f 0810 	mov.w	r8, #16
 802251a:	4590      	cmp	r8, r2
 802251c:	d3f3      	bcc.n	8022506 <_realloc_r+0x3a>
 802251e:	45b0      	cmp	r8, r6
 8022520:	f340 8145 	ble.w	80227ae <_realloc_r+0x2e2>
 8022524:	4ba8      	ldr	r3, [pc, #672]	; (80227c8 <_realloc_r+0x2fc>)
 8022526:	f8d3 e008 	ldr.w	lr, [r3, #8]
 802252a:	eb09 0106 	add.w	r1, r9, r6
 802252e:	4571      	cmp	r1, lr
 8022530:	469b      	mov	fp, r3
 8022532:	684b      	ldr	r3, [r1, #4]
 8022534:	d005      	beq.n	8022542 <_realloc_r+0x76>
 8022536:	f023 0001 	bic.w	r0, r3, #1
 802253a:	4408      	add	r0, r1
 802253c:	6840      	ldr	r0, [r0, #4]
 802253e:	07c7      	lsls	r7, r0, #31
 8022540:	d447      	bmi.n	80225d2 <_realloc_r+0x106>
 8022542:	f023 0303 	bic.w	r3, r3, #3
 8022546:	4571      	cmp	r1, lr
 8022548:	eb06 0703 	add.w	r7, r6, r3
 802254c:	d119      	bne.n	8022582 <_realloc_r+0xb6>
 802254e:	f108 0010 	add.w	r0, r8, #16
 8022552:	4287      	cmp	r7, r0
 8022554:	db3f      	blt.n	80225d6 <_realloc_r+0x10a>
 8022556:	eb09 0308 	add.w	r3, r9, r8
 802255a:	eba7 0708 	sub.w	r7, r7, r8
 802255e:	f047 0701 	orr.w	r7, r7, #1
 8022562:	f8cb 3008 	str.w	r3, [fp, #8]
 8022566:	605f      	str	r7, [r3, #4]
 8022568:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802256c:	f003 0301 	and.w	r3, r3, #1
 8022570:	ea43 0308 	orr.w	r3, r3, r8
 8022574:	f844 3c04 	str.w	r3, [r4, #-4]
 8022578:	4650      	mov	r0, sl
 802257a:	f7ff fad9 	bl	8021b30 <__malloc_unlock>
 802257e:	4627      	mov	r7, r4
 8022580:	e7c5      	b.n	802250e <_realloc_r+0x42>
 8022582:	45b8      	cmp	r8, r7
 8022584:	dc27      	bgt.n	80225d6 <_realloc_r+0x10a>
 8022586:	68cb      	ldr	r3, [r1, #12]
 8022588:	688a      	ldr	r2, [r1, #8]
 802258a:	60d3      	str	r3, [r2, #12]
 802258c:	609a      	str	r2, [r3, #8]
 802258e:	eba7 0008 	sub.w	r0, r7, r8
 8022592:	280f      	cmp	r0, #15
 8022594:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8022598:	eb09 0207 	add.w	r2, r9, r7
 802259c:	f240 8109 	bls.w	80227b2 <_realloc_r+0x2e6>
 80225a0:	eb09 0108 	add.w	r1, r9, r8
 80225a4:	f003 0301 	and.w	r3, r3, #1
 80225a8:	ea43 0308 	orr.w	r3, r3, r8
 80225ac:	f040 0001 	orr.w	r0, r0, #1
 80225b0:	f8c9 3004 	str.w	r3, [r9, #4]
 80225b4:	6048      	str	r0, [r1, #4]
 80225b6:	6853      	ldr	r3, [r2, #4]
 80225b8:	f043 0301 	orr.w	r3, r3, #1
 80225bc:	6053      	str	r3, [r2, #4]
 80225be:	3108      	adds	r1, #8
 80225c0:	4650      	mov	r0, sl
 80225c2:	f7ff fe99 	bl	80222f8 <_free_r>
 80225c6:	4650      	mov	r0, sl
 80225c8:	f7ff fab2 	bl	8021b30 <__malloc_unlock>
 80225cc:	f109 0708 	add.w	r7, r9, #8
 80225d0:	e79d      	b.n	802250e <_realloc_r+0x42>
 80225d2:	2300      	movs	r3, #0
 80225d4:	4619      	mov	r1, r3
 80225d6:	07e8      	lsls	r0, r5, #31
 80225d8:	f100 8084 	bmi.w	80226e4 <_realloc_r+0x218>
 80225dc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80225e0:	eba9 0505 	sub.w	r5, r9, r5
 80225e4:	6868      	ldr	r0, [r5, #4]
 80225e6:	f020 0003 	bic.w	r0, r0, #3
 80225ea:	4430      	add	r0, r6
 80225ec:	2900      	cmp	r1, #0
 80225ee:	d076      	beq.n	80226de <_realloc_r+0x212>
 80225f0:	4571      	cmp	r1, lr
 80225f2:	d150      	bne.n	8022696 <_realloc_r+0x1ca>
 80225f4:	4403      	add	r3, r0
 80225f6:	f108 0110 	add.w	r1, r8, #16
 80225fa:	428b      	cmp	r3, r1
 80225fc:	db6f      	blt.n	80226de <_realloc_r+0x212>
 80225fe:	462f      	mov	r7, r5
 8022600:	68ea      	ldr	r2, [r5, #12]
 8022602:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8022606:	60ca      	str	r2, [r1, #12]
 8022608:	6091      	str	r1, [r2, #8]
 802260a:	1f32      	subs	r2, r6, #4
 802260c:	2a24      	cmp	r2, #36	; 0x24
 802260e:	d83b      	bhi.n	8022688 <_realloc_r+0x1bc>
 8022610:	2a13      	cmp	r2, #19
 8022612:	d936      	bls.n	8022682 <_realloc_r+0x1b6>
 8022614:	6821      	ldr	r1, [r4, #0]
 8022616:	60a9      	str	r1, [r5, #8]
 8022618:	6861      	ldr	r1, [r4, #4]
 802261a:	60e9      	str	r1, [r5, #12]
 802261c:	2a1b      	cmp	r2, #27
 802261e:	d81c      	bhi.n	802265a <_realloc_r+0x18e>
 8022620:	f105 0210 	add.w	r2, r5, #16
 8022624:	f104 0108 	add.w	r1, r4, #8
 8022628:	6808      	ldr	r0, [r1, #0]
 802262a:	6010      	str	r0, [r2, #0]
 802262c:	6848      	ldr	r0, [r1, #4]
 802262e:	6050      	str	r0, [r2, #4]
 8022630:	6889      	ldr	r1, [r1, #8]
 8022632:	6091      	str	r1, [r2, #8]
 8022634:	eb05 0208 	add.w	r2, r5, r8
 8022638:	eba3 0308 	sub.w	r3, r3, r8
 802263c:	f043 0301 	orr.w	r3, r3, #1
 8022640:	f8cb 2008 	str.w	r2, [fp, #8]
 8022644:	6053      	str	r3, [r2, #4]
 8022646:	686b      	ldr	r3, [r5, #4]
 8022648:	f003 0301 	and.w	r3, r3, #1
 802264c:	ea43 0308 	orr.w	r3, r3, r8
 8022650:	606b      	str	r3, [r5, #4]
 8022652:	4650      	mov	r0, sl
 8022654:	f7ff fa6c 	bl	8021b30 <__malloc_unlock>
 8022658:	e759      	b.n	802250e <_realloc_r+0x42>
 802265a:	68a1      	ldr	r1, [r4, #8]
 802265c:	6129      	str	r1, [r5, #16]
 802265e:	68e1      	ldr	r1, [r4, #12]
 8022660:	6169      	str	r1, [r5, #20]
 8022662:	2a24      	cmp	r2, #36	; 0x24
 8022664:	bf01      	itttt	eq
 8022666:	6922      	ldreq	r2, [r4, #16]
 8022668:	61aa      	streq	r2, [r5, #24]
 802266a:	6960      	ldreq	r0, [r4, #20]
 802266c:	61e8      	streq	r0, [r5, #28]
 802266e:	bf19      	ittee	ne
 8022670:	f105 0218 	addne.w	r2, r5, #24
 8022674:	f104 0110 	addne.w	r1, r4, #16
 8022678:	f105 0220 	addeq.w	r2, r5, #32
 802267c:	f104 0118 	addeq.w	r1, r4, #24
 8022680:	e7d2      	b.n	8022628 <_realloc_r+0x15c>
 8022682:	463a      	mov	r2, r7
 8022684:	4621      	mov	r1, r4
 8022686:	e7cf      	b.n	8022628 <_realloc_r+0x15c>
 8022688:	4621      	mov	r1, r4
 802268a:	4638      	mov	r0, r7
 802268c:	9301      	str	r3, [sp, #4]
 802268e:	f7ff ff03 	bl	8022498 <memmove>
 8022692:	9b01      	ldr	r3, [sp, #4]
 8022694:	e7ce      	b.n	8022634 <_realloc_r+0x168>
 8022696:	18c7      	adds	r7, r0, r3
 8022698:	45b8      	cmp	r8, r7
 802269a:	dc20      	bgt.n	80226de <_realloc_r+0x212>
 802269c:	68cb      	ldr	r3, [r1, #12]
 802269e:	688a      	ldr	r2, [r1, #8]
 80226a0:	60d3      	str	r3, [r2, #12]
 80226a2:	609a      	str	r2, [r3, #8]
 80226a4:	4628      	mov	r0, r5
 80226a6:	68eb      	ldr	r3, [r5, #12]
 80226a8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80226ac:	60d3      	str	r3, [r2, #12]
 80226ae:	609a      	str	r2, [r3, #8]
 80226b0:	1f32      	subs	r2, r6, #4
 80226b2:	2a24      	cmp	r2, #36	; 0x24
 80226b4:	d842      	bhi.n	802273c <_realloc_r+0x270>
 80226b6:	2a13      	cmp	r2, #19
 80226b8:	d93e      	bls.n	8022738 <_realloc_r+0x26c>
 80226ba:	6823      	ldr	r3, [r4, #0]
 80226bc:	60ab      	str	r3, [r5, #8]
 80226be:	6863      	ldr	r3, [r4, #4]
 80226c0:	60eb      	str	r3, [r5, #12]
 80226c2:	2a1b      	cmp	r2, #27
 80226c4:	d824      	bhi.n	8022710 <_realloc_r+0x244>
 80226c6:	f105 0010 	add.w	r0, r5, #16
 80226ca:	f104 0308 	add.w	r3, r4, #8
 80226ce:	681a      	ldr	r2, [r3, #0]
 80226d0:	6002      	str	r2, [r0, #0]
 80226d2:	685a      	ldr	r2, [r3, #4]
 80226d4:	6042      	str	r2, [r0, #4]
 80226d6:	689b      	ldr	r3, [r3, #8]
 80226d8:	6083      	str	r3, [r0, #8]
 80226da:	46a9      	mov	r9, r5
 80226dc:	e757      	b.n	802258e <_realloc_r+0xc2>
 80226de:	4580      	cmp	r8, r0
 80226e0:	4607      	mov	r7, r0
 80226e2:	dddf      	ble.n	80226a4 <_realloc_r+0x1d8>
 80226e4:	4611      	mov	r1, r2
 80226e6:	4650      	mov	r0, sl
 80226e8:	f7ff f80e 	bl	8021708 <_malloc_r>
 80226ec:	4607      	mov	r7, r0
 80226ee:	2800      	cmp	r0, #0
 80226f0:	d0af      	beq.n	8022652 <_realloc_r+0x186>
 80226f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80226f6:	f023 0301 	bic.w	r3, r3, #1
 80226fa:	f1a0 0208 	sub.w	r2, r0, #8
 80226fe:	444b      	add	r3, r9
 8022700:	429a      	cmp	r2, r3
 8022702:	d11f      	bne.n	8022744 <_realloc_r+0x278>
 8022704:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8022708:	f027 0703 	bic.w	r7, r7, #3
 802270c:	4437      	add	r7, r6
 802270e:	e73e      	b.n	802258e <_realloc_r+0xc2>
 8022710:	68a3      	ldr	r3, [r4, #8]
 8022712:	612b      	str	r3, [r5, #16]
 8022714:	68e3      	ldr	r3, [r4, #12]
 8022716:	616b      	str	r3, [r5, #20]
 8022718:	2a24      	cmp	r2, #36	; 0x24
 802271a:	bf01      	itttt	eq
 802271c:	6923      	ldreq	r3, [r4, #16]
 802271e:	61ab      	streq	r3, [r5, #24]
 8022720:	6962      	ldreq	r2, [r4, #20]
 8022722:	61ea      	streq	r2, [r5, #28]
 8022724:	bf19      	ittee	ne
 8022726:	f105 0018 	addne.w	r0, r5, #24
 802272a:	f104 0310 	addne.w	r3, r4, #16
 802272e:	f105 0020 	addeq.w	r0, r5, #32
 8022732:	f104 0318 	addeq.w	r3, r4, #24
 8022736:	e7ca      	b.n	80226ce <_realloc_r+0x202>
 8022738:	4623      	mov	r3, r4
 802273a:	e7c8      	b.n	80226ce <_realloc_r+0x202>
 802273c:	4621      	mov	r1, r4
 802273e:	f7ff feab 	bl	8022498 <memmove>
 8022742:	e7ca      	b.n	80226da <_realloc_r+0x20e>
 8022744:	1f32      	subs	r2, r6, #4
 8022746:	2a24      	cmp	r2, #36	; 0x24
 8022748:	d82d      	bhi.n	80227a6 <_realloc_r+0x2da>
 802274a:	2a13      	cmp	r2, #19
 802274c:	d928      	bls.n	80227a0 <_realloc_r+0x2d4>
 802274e:	6823      	ldr	r3, [r4, #0]
 8022750:	6003      	str	r3, [r0, #0]
 8022752:	6863      	ldr	r3, [r4, #4]
 8022754:	6043      	str	r3, [r0, #4]
 8022756:	2a1b      	cmp	r2, #27
 8022758:	d80e      	bhi.n	8022778 <_realloc_r+0x2ac>
 802275a:	f100 0308 	add.w	r3, r0, #8
 802275e:	f104 0208 	add.w	r2, r4, #8
 8022762:	6811      	ldr	r1, [r2, #0]
 8022764:	6019      	str	r1, [r3, #0]
 8022766:	6851      	ldr	r1, [r2, #4]
 8022768:	6059      	str	r1, [r3, #4]
 802276a:	6892      	ldr	r2, [r2, #8]
 802276c:	609a      	str	r2, [r3, #8]
 802276e:	4621      	mov	r1, r4
 8022770:	4650      	mov	r0, sl
 8022772:	f7ff fdc1 	bl	80222f8 <_free_r>
 8022776:	e76c      	b.n	8022652 <_realloc_r+0x186>
 8022778:	68a3      	ldr	r3, [r4, #8]
 802277a:	6083      	str	r3, [r0, #8]
 802277c:	68e3      	ldr	r3, [r4, #12]
 802277e:	60c3      	str	r3, [r0, #12]
 8022780:	2a24      	cmp	r2, #36	; 0x24
 8022782:	bf01      	itttt	eq
 8022784:	6923      	ldreq	r3, [r4, #16]
 8022786:	6103      	streq	r3, [r0, #16]
 8022788:	6961      	ldreq	r1, [r4, #20]
 802278a:	6141      	streq	r1, [r0, #20]
 802278c:	bf19      	ittee	ne
 802278e:	f100 0310 	addne.w	r3, r0, #16
 8022792:	f104 0210 	addne.w	r2, r4, #16
 8022796:	f100 0318 	addeq.w	r3, r0, #24
 802279a:	f104 0218 	addeq.w	r2, r4, #24
 802279e:	e7e0      	b.n	8022762 <_realloc_r+0x296>
 80227a0:	4603      	mov	r3, r0
 80227a2:	4622      	mov	r2, r4
 80227a4:	e7dd      	b.n	8022762 <_realloc_r+0x296>
 80227a6:	4621      	mov	r1, r4
 80227a8:	f7ff fe76 	bl	8022498 <memmove>
 80227ac:	e7df      	b.n	802276e <_realloc_r+0x2a2>
 80227ae:	4637      	mov	r7, r6
 80227b0:	e6ed      	b.n	802258e <_realloc_r+0xc2>
 80227b2:	f003 0301 	and.w	r3, r3, #1
 80227b6:	431f      	orrs	r7, r3
 80227b8:	f8c9 7004 	str.w	r7, [r9, #4]
 80227bc:	6853      	ldr	r3, [r2, #4]
 80227be:	f043 0301 	orr.w	r3, r3, #1
 80227c2:	6053      	str	r3, [r2, #4]
 80227c4:	e6ff      	b.n	80225c6 <_realloc_r+0xfa>
 80227c6:	bf00      	nop
 80227c8:	20001034 	.word	0x20001034

080227cc <__ascii_wctomb>:
 80227cc:	b149      	cbz	r1, 80227e2 <__ascii_wctomb+0x16>
 80227ce:	2aff      	cmp	r2, #255	; 0xff
 80227d0:	bf85      	ittet	hi
 80227d2:	238a      	movhi	r3, #138	; 0x8a
 80227d4:	6003      	strhi	r3, [r0, #0]
 80227d6:	700a      	strbls	r2, [r1, #0]
 80227d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80227dc:	bf98      	it	ls
 80227de:	2001      	movls	r0, #1
 80227e0:	4770      	bx	lr
 80227e2:	4608      	mov	r0, r1
 80227e4:	4770      	bx	lr
	...

080227e8 <cbrt>:
 80227e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80227ec:	ec51 0b10 	vmov	r0, r1, d0
 80227f0:	4a59      	ldr	r2, [pc, #356]	; (8022958 <cbrt+0x170>)
 80227f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80227f6:	4293      	cmp	r3, r2
 80227f8:	468a      	mov	sl, r1
 80227fa:	ee10 2a10 	vmov	r2, s0
 80227fe:	d907      	bls.n	8022810 <cbrt+0x28>
 8022800:	460b      	mov	r3, r1
 8022802:	f7dd fd5b 	bl	80002bc <__adddf3>
 8022806:	ec41 0b10 	vmov	d0, r0, r1
 802280a:	b002      	add	sp, #8
 802280c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022810:	431a      	orrs	r2, r3
 8022812:	d0f8      	beq.n	8022806 <cbrt+0x1e>
 8022814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8022818:	4619      	mov	r1, r3
 802281a:	4606      	mov	r6, r0
 802281c:	461f      	mov	r7, r3
 802281e:	d27c      	bcs.n	802291a <cbrt+0x132>
 8022820:	2200      	movs	r2, #0
 8022822:	4b4e      	ldr	r3, [pc, #312]	; (802295c <cbrt+0x174>)
 8022824:	f7dd fefc 	bl	8000620 <__aeabi_dmul>
 8022828:	2203      	movs	r2, #3
 802282a:	fbb1 f3f2 	udiv	r3, r1, r2
 802282e:	f103 5525 	add.w	r5, r3, #692060160	; 0x29400000
 8022832:	f505 157d 	add.w	r5, r5, #4145152	; 0x3f4000
 8022836:	f505 5562 	add.w	r5, r5, #14464	; 0x3880
 802283a:	4604      	mov	r4, r0
 802283c:	3513      	adds	r5, #19
 802283e:	4622      	mov	r2, r4
 8022840:	462b      	mov	r3, r5
 8022842:	4620      	mov	r0, r4
 8022844:	4629      	mov	r1, r5
 8022846:	f7dd feeb 	bl	8000620 <__aeabi_dmul>
 802284a:	4632      	mov	r2, r6
 802284c:	463b      	mov	r3, r7
 802284e:	f7de f811 	bl	8000874 <__aeabi_ddiv>
 8022852:	4622      	mov	r2, r4
 8022854:	462b      	mov	r3, r5
 8022856:	f7dd fee3 	bl	8000620 <__aeabi_dmul>
 802285a:	a335      	add	r3, pc, #212	; (adr r3, 8022930 <cbrt+0x148>)
 802285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022860:	f7dd fd2c 	bl	80002bc <__adddf3>
 8022864:	a334      	add	r3, pc, #208	; (adr r3, 8022938 <cbrt+0x150>)
 8022866:	e9d3 2300 	ldrd	r2, r3, [r3]
 802286a:	e9cd 0100 	strd	r0, r1, [sp]
 802286e:	f7dd fd25 	bl	80002bc <__adddf3>
 8022872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022876:	4680      	mov	r8, r0
 8022878:	4689      	mov	r9, r1
 802287a:	a131      	add	r1, pc, #196	; (adr r1, 8022940 <cbrt+0x158>)
 802287c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022880:	f7dd fff8 	bl	8000874 <__aeabi_ddiv>
 8022884:	4602      	mov	r2, r0
 8022886:	460b      	mov	r3, r1
 8022888:	4640      	mov	r0, r8
 802288a:	4649      	mov	r1, r9
 802288c:	f7dd fd16 	bl	80002bc <__adddf3>
 8022890:	4602      	mov	r2, r0
 8022892:	460b      	mov	r3, r1
 8022894:	a12c      	add	r1, pc, #176	; (adr r1, 8022948 <cbrt+0x160>)
 8022896:	e9d1 0100 	ldrd	r0, r1, [r1]
 802289a:	f7dd ffeb 	bl	8000874 <__aeabi_ddiv>
 802289e:	a32c      	add	r3, pc, #176	; (adr r3, 8022950 <cbrt+0x168>)
 80228a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228a4:	f7dd fd0a 	bl	80002bc <__adddf3>
 80228a8:	4622      	mov	r2, r4
 80228aa:	462b      	mov	r3, r5
 80228ac:	f7dd feb8 	bl	8000620 <__aeabi_dmul>
 80228b0:	2400      	movs	r4, #0
 80228b2:	1c4d      	adds	r5, r1, #1
 80228b4:	4622      	mov	r2, r4
 80228b6:	462b      	mov	r3, r5
 80228b8:	4620      	mov	r0, r4
 80228ba:	4629      	mov	r1, r5
 80228bc:	f7dd feb0 	bl	8000620 <__aeabi_dmul>
 80228c0:	4602      	mov	r2, r0
 80228c2:	460b      	mov	r3, r1
 80228c4:	4630      	mov	r0, r6
 80228c6:	4639      	mov	r1, r7
 80228c8:	f7dd ffd4 	bl	8000874 <__aeabi_ddiv>
 80228cc:	4622      	mov	r2, r4
 80228ce:	462b      	mov	r3, r5
 80228d0:	4680      	mov	r8, r0
 80228d2:	4689      	mov	r9, r1
 80228d4:	f7dd fcf0 	bl	80002b8 <__aeabi_dsub>
 80228d8:	4622      	mov	r2, r4
 80228da:	4606      	mov	r6, r0
 80228dc:	460f      	mov	r7, r1
 80228de:	462b      	mov	r3, r5
 80228e0:	4620      	mov	r0, r4
 80228e2:	4629      	mov	r1, r5
 80228e4:	f7dd fcea 	bl	80002bc <__adddf3>
 80228e8:	4642      	mov	r2, r8
 80228ea:	464b      	mov	r3, r9
 80228ec:	f7dd fce6 	bl	80002bc <__adddf3>
 80228f0:	4602      	mov	r2, r0
 80228f2:	460b      	mov	r3, r1
 80228f4:	4630      	mov	r0, r6
 80228f6:	4639      	mov	r1, r7
 80228f8:	f7dd ffbc 	bl	8000874 <__aeabi_ddiv>
 80228fc:	4622      	mov	r2, r4
 80228fe:	462b      	mov	r3, r5
 8022900:	f7dd fe8e 	bl	8000620 <__aeabi_dmul>
 8022904:	4602      	mov	r2, r0
 8022906:	460b      	mov	r3, r1
 8022908:	4620      	mov	r0, r4
 802290a:	4629      	mov	r1, r5
 802290c:	f7dd fcd6 	bl	80002bc <__adddf3>
 8022910:	f00a 4a00 	and.w	sl, sl, #2147483648	; 0x80000000
 8022914:	ea4a 0101 	orr.w	r1, sl, r1
 8022918:	e775      	b.n	8022806 <cbrt+0x1e>
 802291a:	2203      	movs	r2, #3
 802291c:	fb93 f3f2 	sdiv	r3, r3, r2
 8022920:	f103 552c 	add.w	r5, r3, #721420288	; 0x2b000000
 8022924:	f5a5 05c1 	sub.w	r5, r5, #6324224	; 0x608000
 8022928:	2400      	movs	r4, #0
 802292a:	f2a5 756d 	subw	r5, r5, #1901	; 0x76d
 802292e:	e786      	b.n	802283e <cbrt+0x56>
 8022930:	f15f15f1 	.word	0xf15f15f1
 8022934:	3fe15f15 	.word	0x3fe15f15
 8022938:	0ea0ea0f 	.word	0x0ea0ea0f
 802293c:	3ff6a0ea 	.word	0x3ff6a0ea
 8022940:	2532c834 	.word	0x2532c834
 8022944:	bfe691de 	.word	0xbfe691de
 8022948:	6db6db6e 	.word	0x6db6db6e
 802294c:	3ff9b6db 	.word	0x3ff9b6db
 8022950:	b6db6db7 	.word	0xb6db6db7
 8022954:	3fd6db6d 	.word	0x3fd6db6d
 8022958:	7fefffff 	.word	0x7fefffff
 802295c:	43500000 	.word	0x43500000

08022960 <floor>:
 8022960:	ec51 0b10 	vmov	r0, r1, d0
 8022964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022968:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802296c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022970:	2e13      	cmp	r6, #19
 8022972:	ee10 8a10 	vmov	r8, s0
 8022976:	460c      	mov	r4, r1
 8022978:	ee10 5a10 	vmov	r5, s0
 802297c:	dc35      	bgt.n	80229ea <floor+0x8a>
 802297e:	2e00      	cmp	r6, #0
 8022980:	da17      	bge.n	80229b2 <floor+0x52>
 8022982:	a335      	add	r3, pc, #212	; (adr r3, 8022a58 <floor+0xf8>)
 8022984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022988:	f7dd fc98 	bl	80002bc <__adddf3>
 802298c:	2200      	movs	r2, #0
 802298e:	2300      	movs	r3, #0
 8022990:	f7de f8d6 	bl	8000b40 <__aeabi_dcmpgt>
 8022994:	b150      	cbz	r0, 80229ac <floor+0x4c>
 8022996:	2c00      	cmp	r4, #0
 8022998:	da5a      	bge.n	8022a50 <floor+0xf0>
 802299a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802299e:	ea53 0308 	orrs.w	r3, r3, r8
 80229a2:	4b2f      	ldr	r3, [pc, #188]	; (8022a60 <floor+0x100>)
 80229a4:	f04f 0500 	mov.w	r5, #0
 80229a8:	bf18      	it	ne
 80229aa:	461c      	movne	r4, r3
 80229ac:	4621      	mov	r1, r4
 80229ae:	4628      	mov	r0, r5
 80229b0:	e025      	b.n	80229fe <floor+0x9e>
 80229b2:	4f2c      	ldr	r7, [pc, #176]	; (8022a64 <floor+0x104>)
 80229b4:	4137      	asrs	r7, r6
 80229b6:	ea01 0307 	and.w	r3, r1, r7
 80229ba:	4303      	orrs	r3, r0
 80229bc:	d01f      	beq.n	80229fe <floor+0x9e>
 80229be:	a326      	add	r3, pc, #152	; (adr r3, 8022a58 <floor+0xf8>)
 80229c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229c4:	f7dd fc7a 	bl	80002bc <__adddf3>
 80229c8:	2200      	movs	r2, #0
 80229ca:	2300      	movs	r3, #0
 80229cc:	f7de f8b8 	bl	8000b40 <__aeabi_dcmpgt>
 80229d0:	2800      	cmp	r0, #0
 80229d2:	d0eb      	beq.n	80229ac <floor+0x4c>
 80229d4:	2c00      	cmp	r4, #0
 80229d6:	bfbe      	ittt	lt
 80229d8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80229dc:	fa43 f606 	asrlt.w	r6, r3, r6
 80229e0:	19a4      	addlt	r4, r4, r6
 80229e2:	ea24 0407 	bic.w	r4, r4, r7
 80229e6:	2500      	movs	r5, #0
 80229e8:	e7e0      	b.n	80229ac <floor+0x4c>
 80229ea:	2e33      	cmp	r6, #51	; 0x33
 80229ec:	dd0b      	ble.n	8022a06 <floor+0xa6>
 80229ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80229f2:	d104      	bne.n	80229fe <floor+0x9e>
 80229f4:	ee10 2a10 	vmov	r2, s0
 80229f8:	460b      	mov	r3, r1
 80229fa:	f7dd fc5f 	bl	80002bc <__adddf3>
 80229fe:	ec41 0b10 	vmov	d0, r0, r1
 8022a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a06:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8022a0e:	fa23 f707 	lsr.w	r7, r3, r7
 8022a12:	4238      	tst	r0, r7
 8022a14:	d0f3      	beq.n	80229fe <floor+0x9e>
 8022a16:	a310      	add	r3, pc, #64	; (adr r3, 8022a58 <floor+0xf8>)
 8022a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a1c:	f7dd fc4e 	bl	80002bc <__adddf3>
 8022a20:	2200      	movs	r2, #0
 8022a22:	2300      	movs	r3, #0
 8022a24:	f7de f88c 	bl	8000b40 <__aeabi_dcmpgt>
 8022a28:	2800      	cmp	r0, #0
 8022a2a:	d0bf      	beq.n	80229ac <floor+0x4c>
 8022a2c:	2c00      	cmp	r4, #0
 8022a2e:	da02      	bge.n	8022a36 <floor+0xd6>
 8022a30:	2e14      	cmp	r6, #20
 8022a32:	d103      	bne.n	8022a3c <floor+0xdc>
 8022a34:	3401      	adds	r4, #1
 8022a36:	ea25 0507 	bic.w	r5, r5, r7
 8022a3a:	e7b7      	b.n	80229ac <floor+0x4c>
 8022a3c:	2301      	movs	r3, #1
 8022a3e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8022a42:	fa03 f606 	lsl.w	r6, r3, r6
 8022a46:	4435      	add	r5, r6
 8022a48:	45a8      	cmp	r8, r5
 8022a4a:	bf88      	it	hi
 8022a4c:	18e4      	addhi	r4, r4, r3
 8022a4e:	e7f2      	b.n	8022a36 <floor+0xd6>
 8022a50:	2500      	movs	r5, #0
 8022a52:	462c      	mov	r4, r5
 8022a54:	e7aa      	b.n	80229ac <floor+0x4c>
 8022a56:	bf00      	nop
 8022a58:	8800759c 	.word	0x8800759c
 8022a5c:	7e37e43c 	.word	0x7e37e43c
 8022a60:	bff00000 	.word	0xbff00000
 8022a64:	000fffff 	.word	0x000fffff

08022a68 <exp>:
 8022a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a6a:	ed2d 8b02 	vpush	{d8}
 8022a6e:	4e38      	ldr	r6, [pc, #224]	; (8022b50 <exp+0xe8>)
 8022a70:	b08b      	sub	sp, #44	; 0x2c
 8022a72:	ec55 4b10 	vmov	r4, r5, d0
 8022a76:	f000 fb17 	bl	80230a8 <__ieee754_exp>
 8022a7a:	f996 3000 	ldrsb.w	r3, [r6]
 8022a7e:	eeb0 8a40 	vmov.f32	s16, s0
 8022a82:	eef0 8a60 	vmov.f32	s17, s1
 8022a86:	3301      	adds	r3, #1
 8022a88:	d02c      	beq.n	8022ae4 <exp+0x7c>
 8022a8a:	ec45 4b10 	vmov	d0, r4, r5
 8022a8e:	f001 fc67 	bl	8024360 <finite>
 8022a92:	b338      	cbz	r0, 8022ae4 <exp+0x7c>
 8022a94:	a32a      	add	r3, pc, #168	; (adr r3, 8022b40 <exp+0xd8>)
 8022a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a9a:	4620      	mov	r0, r4
 8022a9c:	4629      	mov	r1, r5
 8022a9e:	f7de f84f 	bl	8000b40 <__aeabi_dcmpgt>
 8022aa2:	4607      	mov	r7, r0
 8022aa4:	2800      	cmp	r0, #0
 8022aa6:	d030      	beq.n	8022b0a <exp+0xa2>
 8022aa8:	2303      	movs	r3, #3
 8022aaa:	9300      	str	r3, [sp, #0]
 8022aac:	4b29      	ldr	r3, [pc, #164]	; (8022b54 <exp+0xec>)
 8022aae:	9301      	str	r3, [sp, #4]
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	9308      	str	r3, [sp, #32]
 8022ab4:	f996 3000 	ldrsb.w	r3, [r6]
 8022ab8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8022abc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022ac0:	b9c3      	cbnz	r3, 8022af4 <exp+0x8c>
 8022ac2:	4b25      	ldr	r3, [pc, #148]	; (8022b58 <exp+0xf0>)
 8022ac4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022ac8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022acc:	4668      	mov	r0, sp
 8022ace:	f001 fc4f 	bl	8024370 <matherr>
 8022ad2:	b1a8      	cbz	r0, 8022b00 <exp+0x98>
 8022ad4:	9b08      	ldr	r3, [sp, #32]
 8022ad6:	b11b      	cbz	r3, 8022ae0 <exp+0x78>
 8022ad8:	f7fc ff58 	bl	801f98c <__errno>
 8022adc:	9b08      	ldr	r3, [sp, #32]
 8022ade:	6003      	str	r3, [r0, #0]
 8022ae0:	ed9d 8b06 	vldr	d8, [sp, #24]
 8022ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8022ae8:	eef0 0a68 	vmov.f32	s1, s17
 8022aec:	b00b      	add	sp, #44	; 0x2c
 8022aee:	ecbd 8b02 	vpop	{d8}
 8022af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022af4:	4919      	ldr	r1, [pc, #100]	; (8022b5c <exp+0xf4>)
 8022af6:	2000      	movs	r0, #0
 8022af8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022afc:	2b02      	cmp	r3, #2
 8022afe:	d1e5      	bne.n	8022acc <exp+0x64>
 8022b00:	f7fc ff44 	bl	801f98c <__errno>
 8022b04:	2322      	movs	r3, #34	; 0x22
 8022b06:	6003      	str	r3, [r0, #0]
 8022b08:	e7e4      	b.n	8022ad4 <exp+0x6c>
 8022b0a:	a30f      	add	r3, pc, #60	; (adr r3, 8022b48 <exp+0xe0>)
 8022b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b10:	4620      	mov	r0, r4
 8022b12:	4629      	mov	r1, r5
 8022b14:	f7dd fff6 	bl	8000b04 <__aeabi_dcmplt>
 8022b18:	2800      	cmp	r0, #0
 8022b1a:	d0e3      	beq.n	8022ae4 <exp+0x7c>
 8022b1c:	2304      	movs	r3, #4
 8022b1e:	9300      	str	r3, [sp, #0]
 8022b20:	4b0c      	ldr	r3, [pc, #48]	; (8022b54 <exp+0xec>)
 8022b22:	9301      	str	r3, [sp, #4]
 8022b24:	2200      	movs	r2, #0
 8022b26:	2300      	movs	r3, #0
 8022b28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022b2c:	9708      	str	r7, [sp, #32]
 8022b2e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8022b32:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022b36:	f996 3000 	ldrsb.w	r3, [r6]
 8022b3a:	e7df      	b.n	8022afc <exp+0x94>
 8022b3c:	f3af 8000 	nop.w
 8022b40:	fefa39ef 	.word	0xfefa39ef
 8022b44:	40862e42 	.word	0x40862e42
 8022b48:	d52d3051 	.word	0xd52d3051
 8022b4c:	c0874910 	.word	0xc0874910
 8022b50:	200015b0 	.word	0x200015b0
 8022b54:	0803181d 	.word	0x0803181d
 8022b58:	47efffff 	.word	0x47efffff
 8022b5c:	7ff00000 	.word	0x7ff00000

08022b60 <log>:
 8022b60:	b570      	push	{r4, r5, r6, lr}
 8022b62:	ed2d 8b02 	vpush	{d8}
 8022b66:	b08a      	sub	sp, #40	; 0x28
 8022b68:	ec55 4b10 	vmov	r4, r5, d0
 8022b6c:	f000 fc10 	bl	8023390 <__ieee754_log>
 8022b70:	4b36      	ldr	r3, [pc, #216]	; (8022c4c <log+0xec>)
 8022b72:	eeb0 8a40 	vmov.f32	s16, s0
 8022b76:	eef0 8a60 	vmov.f32	s17, s1
 8022b7a:	f993 6000 	ldrsb.w	r6, [r3]
 8022b7e:	1c73      	adds	r3, r6, #1
 8022b80:	d05b      	beq.n	8022c3a <log+0xda>
 8022b82:	4622      	mov	r2, r4
 8022b84:	462b      	mov	r3, r5
 8022b86:	4620      	mov	r0, r4
 8022b88:	4629      	mov	r1, r5
 8022b8a:	f7dd ffe3 	bl	8000b54 <__aeabi_dcmpun>
 8022b8e:	2800      	cmp	r0, #0
 8022b90:	d153      	bne.n	8022c3a <log+0xda>
 8022b92:	2200      	movs	r2, #0
 8022b94:	2300      	movs	r3, #0
 8022b96:	4620      	mov	r0, r4
 8022b98:	4629      	mov	r1, r5
 8022b9a:	f7dd ffd1 	bl	8000b40 <__aeabi_dcmpgt>
 8022b9e:	2800      	cmp	r0, #0
 8022ba0:	d14b      	bne.n	8022c3a <log+0xda>
 8022ba2:	4b2b      	ldr	r3, [pc, #172]	; (8022c50 <log+0xf0>)
 8022ba4:	9301      	str	r3, [sp, #4]
 8022ba6:	9008      	str	r0, [sp, #32]
 8022ba8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022bac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8022bb0:	b9a6      	cbnz	r6, 8022bdc <log+0x7c>
 8022bb2:	4b28      	ldr	r3, [pc, #160]	; (8022c54 <log+0xf4>)
 8022bb4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022bb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022bbc:	4620      	mov	r0, r4
 8022bbe:	2200      	movs	r2, #0
 8022bc0:	2300      	movs	r3, #0
 8022bc2:	4629      	mov	r1, r5
 8022bc4:	f7dd ff94 	bl	8000af0 <__aeabi_dcmpeq>
 8022bc8:	bb40      	cbnz	r0, 8022c1c <log+0xbc>
 8022bca:	2301      	movs	r3, #1
 8022bcc:	2e02      	cmp	r6, #2
 8022bce:	9300      	str	r3, [sp, #0]
 8022bd0:	d119      	bne.n	8022c06 <log+0xa6>
 8022bd2:	f7fc fedb 	bl	801f98c <__errno>
 8022bd6:	2321      	movs	r3, #33	; 0x21
 8022bd8:	6003      	str	r3, [r0, #0]
 8022bda:	e019      	b.n	8022c10 <log+0xb0>
 8022bdc:	4b1e      	ldr	r3, [pc, #120]	; (8022c58 <log+0xf8>)
 8022bde:	2200      	movs	r2, #0
 8022be0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022be4:	4620      	mov	r0, r4
 8022be6:	2200      	movs	r2, #0
 8022be8:	2300      	movs	r3, #0
 8022bea:	4629      	mov	r1, r5
 8022bec:	f7dd ff80 	bl	8000af0 <__aeabi_dcmpeq>
 8022bf0:	2800      	cmp	r0, #0
 8022bf2:	d0ea      	beq.n	8022bca <log+0x6a>
 8022bf4:	2302      	movs	r3, #2
 8022bf6:	429e      	cmp	r6, r3
 8022bf8:	9300      	str	r3, [sp, #0]
 8022bfa:	d111      	bne.n	8022c20 <log+0xc0>
 8022bfc:	f7fc fec6 	bl	801f98c <__errno>
 8022c00:	2322      	movs	r3, #34	; 0x22
 8022c02:	6003      	str	r3, [r0, #0]
 8022c04:	e011      	b.n	8022c2a <log+0xca>
 8022c06:	4668      	mov	r0, sp
 8022c08:	f001 fbb2 	bl	8024370 <matherr>
 8022c0c:	2800      	cmp	r0, #0
 8022c0e:	d0e0      	beq.n	8022bd2 <log+0x72>
 8022c10:	4812      	ldr	r0, [pc, #72]	; (8022c5c <log+0xfc>)
 8022c12:	f001 fbb1 	bl	8024378 <nan>
 8022c16:	ed8d 0b06 	vstr	d0, [sp, #24]
 8022c1a:	e006      	b.n	8022c2a <log+0xca>
 8022c1c:	2302      	movs	r3, #2
 8022c1e:	9300      	str	r3, [sp, #0]
 8022c20:	4668      	mov	r0, sp
 8022c22:	f001 fba5 	bl	8024370 <matherr>
 8022c26:	2800      	cmp	r0, #0
 8022c28:	d0e8      	beq.n	8022bfc <log+0x9c>
 8022c2a:	9b08      	ldr	r3, [sp, #32]
 8022c2c:	b11b      	cbz	r3, 8022c36 <log+0xd6>
 8022c2e:	f7fc fead 	bl	801f98c <__errno>
 8022c32:	9b08      	ldr	r3, [sp, #32]
 8022c34:	6003      	str	r3, [r0, #0]
 8022c36:	ed9d 8b06 	vldr	d8, [sp, #24]
 8022c3a:	eeb0 0a48 	vmov.f32	s0, s16
 8022c3e:	eef0 0a68 	vmov.f32	s1, s17
 8022c42:	b00a      	add	sp, #40	; 0x28
 8022c44:	ecbd 8b02 	vpop	{d8}
 8022c48:	bd70      	pop	{r4, r5, r6, pc}
 8022c4a:	bf00      	nop
 8022c4c:	200015b0 	.word	0x200015b0
 8022c50:	08031821 	.word	0x08031821
 8022c54:	c7efffff 	.word	0xc7efffff
 8022c58:	fff00000 	.word	0xfff00000
 8022c5c:	080314b9 	.word	0x080314b9

08022c60 <pow>:
 8022c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c64:	ed2d 8b04 	vpush	{d8-d9}
 8022c68:	b08d      	sub	sp, #52	; 0x34
 8022c6a:	ec57 6b10 	vmov	r6, r7, d0
 8022c6e:	ec55 4b11 	vmov	r4, r5, d1
 8022c72:	f000 fd65 	bl	8023740 <__ieee754_pow>
 8022c76:	4bae      	ldr	r3, [pc, #696]	; (8022f30 <pow+0x2d0>)
 8022c78:	eeb0 8a40 	vmov.f32	s16, s0
 8022c7c:	eef0 8a60 	vmov.f32	s17, s1
 8022c80:	f993 9000 	ldrsb.w	r9, [r3]
 8022c84:	f1b9 3fff 	cmp.w	r9, #4294967295
 8022c88:	4698      	mov	r8, r3
 8022c8a:	d05f      	beq.n	8022d4c <pow+0xec>
 8022c8c:	4622      	mov	r2, r4
 8022c8e:	462b      	mov	r3, r5
 8022c90:	4620      	mov	r0, r4
 8022c92:	4629      	mov	r1, r5
 8022c94:	f7dd ff5e 	bl	8000b54 <__aeabi_dcmpun>
 8022c98:	4683      	mov	fp, r0
 8022c9a:	2800      	cmp	r0, #0
 8022c9c:	d156      	bne.n	8022d4c <pow+0xec>
 8022c9e:	4632      	mov	r2, r6
 8022ca0:	463b      	mov	r3, r7
 8022ca2:	4630      	mov	r0, r6
 8022ca4:	4639      	mov	r1, r7
 8022ca6:	f7dd ff55 	bl	8000b54 <__aeabi_dcmpun>
 8022caa:	9001      	str	r0, [sp, #4]
 8022cac:	b1e8      	cbz	r0, 8022cea <pow+0x8a>
 8022cae:	2200      	movs	r2, #0
 8022cb0:	2300      	movs	r3, #0
 8022cb2:	4620      	mov	r0, r4
 8022cb4:	4629      	mov	r1, r5
 8022cb6:	f7dd ff1b 	bl	8000af0 <__aeabi_dcmpeq>
 8022cba:	2800      	cmp	r0, #0
 8022cbc:	d046      	beq.n	8022d4c <pow+0xec>
 8022cbe:	2301      	movs	r3, #1
 8022cc0:	9302      	str	r3, [sp, #8]
 8022cc2:	4b9c      	ldr	r3, [pc, #624]	; (8022f34 <pow+0x2d4>)
 8022cc4:	9303      	str	r3, [sp, #12]
 8022cc6:	4b9c      	ldr	r3, [pc, #624]	; (8022f38 <pow+0x2d8>)
 8022cc8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8022ccc:	2200      	movs	r2, #0
 8022cce:	f1b9 0f02 	cmp.w	r9, #2
 8022cd2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022cd6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022cda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022cde:	d033      	beq.n	8022d48 <pow+0xe8>
 8022ce0:	a802      	add	r0, sp, #8
 8022ce2:	f001 fb45 	bl	8024370 <matherr>
 8022ce6:	bb48      	cbnz	r0, 8022d3c <pow+0xdc>
 8022ce8:	e05e      	b.n	8022da8 <pow+0x148>
 8022cea:	f04f 0a00 	mov.w	sl, #0
 8022cee:	f04f 0b00 	mov.w	fp, #0
 8022cf2:	4652      	mov	r2, sl
 8022cf4:	465b      	mov	r3, fp
 8022cf6:	4630      	mov	r0, r6
 8022cf8:	4639      	mov	r1, r7
 8022cfa:	f7dd fef9 	bl	8000af0 <__aeabi_dcmpeq>
 8022cfe:	ec4b ab19 	vmov	d9, sl, fp
 8022d02:	2800      	cmp	r0, #0
 8022d04:	d055      	beq.n	8022db2 <pow+0x152>
 8022d06:	4652      	mov	r2, sl
 8022d08:	465b      	mov	r3, fp
 8022d0a:	4620      	mov	r0, r4
 8022d0c:	4629      	mov	r1, r5
 8022d0e:	f7dd feef 	bl	8000af0 <__aeabi_dcmpeq>
 8022d12:	4680      	mov	r8, r0
 8022d14:	b318      	cbz	r0, 8022d5e <pow+0xfe>
 8022d16:	2301      	movs	r3, #1
 8022d18:	9302      	str	r3, [sp, #8]
 8022d1a:	4b86      	ldr	r3, [pc, #536]	; (8022f34 <pow+0x2d4>)
 8022d1c:	9303      	str	r3, [sp, #12]
 8022d1e:	9b01      	ldr	r3, [sp, #4]
 8022d20:	930a      	str	r3, [sp, #40]	; 0x28
 8022d22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022d26:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022d2a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022d2e:	f1b9 0f00 	cmp.w	r9, #0
 8022d32:	d0d5      	beq.n	8022ce0 <pow+0x80>
 8022d34:	4b80      	ldr	r3, [pc, #512]	; (8022f38 <pow+0x2d8>)
 8022d36:	2200      	movs	r2, #0
 8022d38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d3e:	b11b      	cbz	r3, 8022d48 <pow+0xe8>
 8022d40:	f7fc fe24 	bl	801f98c <__errno>
 8022d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d46:	6003      	str	r3, [r0, #0]
 8022d48:	ed9d 8b08 	vldr	d8, [sp, #32]
 8022d4c:	eeb0 0a48 	vmov.f32	s0, s16
 8022d50:	eef0 0a68 	vmov.f32	s1, s17
 8022d54:	b00d      	add	sp, #52	; 0x34
 8022d56:	ecbd 8b04 	vpop	{d8-d9}
 8022d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d5e:	ec45 4b10 	vmov	d0, r4, r5
 8022d62:	f001 fafd 	bl	8024360 <finite>
 8022d66:	2800      	cmp	r0, #0
 8022d68:	d0f0      	beq.n	8022d4c <pow+0xec>
 8022d6a:	4652      	mov	r2, sl
 8022d6c:	465b      	mov	r3, fp
 8022d6e:	4620      	mov	r0, r4
 8022d70:	4629      	mov	r1, r5
 8022d72:	f7dd fec7 	bl	8000b04 <__aeabi_dcmplt>
 8022d76:	2800      	cmp	r0, #0
 8022d78:	d0e8      	beq.n	8022d4c <pow+0xec>
 8022d7a:	2301      	movs	r3, #1
 8022d7c:	9302      	str	r3, [sp, #8]
 8022d7e:	4b6d      	ldr	r3, [pc, #436]	; (8022f34 <pow+0x2d4>)
 8022d80:	9303      	str	r3, [sp, #12]
 8022d82:	4b6b      	ldr	r3, [pc, #428]	; (8022f30 <pow+0x2d0>)
 8022d84:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8022d88:	f993 3000 	ldrsb.w	r3, [r3]
 8022d8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022d90:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022d94:	b913      	cbnz	r3, 8022d9c <pow+0x13c>
 8022d96:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022d9a:	e7a1      	b.n	8022ce0 <pow+0x80>
 8022d9c:	4967      	ldr	r1, [pc, #412]	; (8022f3c <pow+0x2dc>)
 8022d9e:	2000      	movs	r0, #0
 8022da0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022da4:	2b02      	cmp	r3, #2
 8022da6:	d19b      	bne.n	8022ce0 <pow+0x80>
 8022da8:	f7fc fdf0 	bl	801f98c <__errno>
 8022dac:	2321      	movs	r3, #33	; 0x21
 8022dae:	6003      	str	r3, [r0, #0]
 8022db0:	e7c4      	b.n	8022d3c <pow+0xdc>
 8022db2:	eeb0 0a48 	vmov.f32	s0, s16
 8022db6:	eef0 0a68 	vmov.f32	s1, s17
 8022dba:	f001 fad1 	bl	8024360 <finite>
 8022dbe:	9001      	str	r0, [sp, #4]
 8022dc0:	2800      	cmp	r0, #0
 8022dc2:	f040 808a 	bne.w	8022eda <pow+0x27a>
 8022dc6:	ec47 6b10 	vmov	d0, r6, r7
 8022dca:	f001 fac9 	bl	8024360 <finite>
 8022dce:	2800      	cmp	r0, #0
 8022dd0:	f000 8083 	beq.w	8022eda <pow+0x27a>
 8022dd4:	ec45 4b10 	vmov	d0, r4, r5
 8022dd8:	f001 fac2 	bl	8024360 <finite>
 8022ddc:	2800      	cmp	r0, #0
 8022dde:	d07c      	beq.n	8022eda <pow+0x27a>
 8022de0:	ec53 2b18 	vmov	r2, r3, d8
 8022de4:	ee18 0a10 	vmov	r0, s16
 8022de8:	4619      	mov	r1, r3
 8022dea:	f7dd feb3 	bl	8000b54 <__aeabi_dcmpun>
 8022dee:	f998 9000 	ldrsb.w	r9, [r8]
 8022df2:	4b50      	ldr	r3, [pc, #320]	; (8022f34 <pow+0x2d4>)
 8022df4:	b1b0      	cbz	r0, 8022e24 <pow+0x1c4>
 8022df6:	2201      	movs	r2, #1
 8022df8:	9303      	str	r3, [sp, #12]
 8022dfa:	9b01      	ldr	r3, [sp, #4]
 8022dfc:	9202      	str	r2, [sp, #8]
 8022dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8022e00:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022e04:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022e08:	f1b9 0f00 	cmp.w	r9, #0
 8022e0c:	d0c3      	beq.n	8022d96 <pow+0x136>
 8022e0e:	4652      	mov	r2, sl
 8022e10:	465b      	mov	r3, fp
 8022e12:	4650      	mov	r0, sl
 8022e14:	4659      	mov	r1, fp
 8022e16:	f7dd fd2d 	bl	8000874 <__aeabi_ddiv>
 8022e1a:	f1b9 0f02 	cmp.w	r9, #2
 8022e1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022e22:	e7c0      	b.n	8022da6 <pow+0x146>
 8022e24:	2203      	movs	r2, #3
 8022e26:	9202      	str	r2, [sp, #8]
 8022e28:	9303      	str	r3, [sp, #12]
 8022e2a:	900a      	str	r0, [sp, #40]	; 0x28
 8022e2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022e30:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022e34:	f1b9 0f00 	cmp.w	r9, #0
 8022e38:	d12c      	bne.n	8022e94 <pow+0x234>
 8022e3a:	4b41      	ldr	r3, [pc, #260]	; (8022f40 <pow+0x2e0>)
 8022e3c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022e40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022e44:	4630      	mov	r0, r6
 8022e46:	4652      	mov	r2, sl
 8022e48:	465b      	mov	r3, fp
 8022e4a:	4639      	mov	r1, r7
 8022e4c:	f7dd fe5a 	bl	8000b04 <__aeabi_dcmplt>
 8022e50:	2800      	cmp	r0, #0
 8022e52:	d066      	beq.n	8022f22 <pow+0x2c2>
 8022e54:	2200      	movs	r2, #0
 8022e56:	4b3b      	ldr	r3, [pc, #236]	; (8022f44 <pow+0x2e4>)
 8022e58:	4620      	mov	r0, r4
 8022e5a:	4629      	mov	r1, r5
 8022e5c:	f7dd fbe0 	bl	8000620 <__aeabi_dmul>
 8022e60:	4604      	mov	r4, r0
 8022e62:	460d      	mov	r5, r1
 8022e64:	ec45 4b10 	vmov	d0, r4, r5
 8022e68:	f001 fa8e 	bl	8024388 <rint>
 8022e6c:	4620      	mov	r0, r4
 8022e6e:	ec53 2b10 	vmov	r2, r3, d0
 8022e72:	4629      	mov	r1, r5
 8022e74:	f7dd fe3c 	bl	8000af0 <__aeabi_dcmpeq>
 8022e78:	b920      	cbnz	r0, 8022e84 <pow+0x224>
 8022e7a:	4b33      	ldr	r3, [pc, #204]	; (8022f48 <pow+0x2e8>)
 8022e7c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022e80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022e84:	f998 3000 	ldrsb.w	r3, [r8]
 8022e88:	2b02      	cmp	r3, #2
 8022e8a:	d14a      	bne.n	8022f22 <pow+0x2c2>
 8022e8c:	f7fc fd7e 	bl	801f98c <__errno>
 8022e90:	2322      	movs	r3, #34	; 0x22
 8022e92:	e78c      	b.n	8022dae <pow+0x14e>
 8022e94:	4b2d      	ldr	r3, [pc, #180]	; (8022f4c <pow+0x2ec>)
 8022e96:	2200      	movs	r2, #0
 8022e98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022e9c:	4630      	mov	r0, r6
 8022e9e:	4652      	mov	r2, sl
 8022ea0:	465b      	mov	r3, fp
 8022ea2:	4639      	mov	r1, r7
 8022ea4:	f7dd fe2e 	bl	8000b04 <__aeabi_dcmplt>
 8022ea8:	2800      	cmp	r0, #0
 8022eaa:	d0eb      	beq.n	8022e84 <pow+0x224>
 8022eac:	2200      	movs	r2, #0
 8022eae:	4b25      	ldr	r3, [pc, #148]	; (8022f44 <pow+0x2e4>)
 8022eb0:	4620      	mov	r0, r4
 8022eb2:	4629      	mov	r1, r5
 8022eb4:	f7dd fbb4 	bl	8000620 <__aeabi_dmul>
 8022eb8:	4604      	mov	r4, r0
 8022eba:	460d      	mov	r5, r1
 8022ebc:	ec45 4b10 	vmov	d0, r4, r5
 8022ec0:	f001 fa62 	bl	8024388 <rint>
 8022ec4:	4620      	mov	r0, r4
 8022ec6:	ec53 2b10 	vmov	r2, r3, d0
 8022eca:	4629      	mov	r1, r5
 8022ecc:	f7dd fe10 	bl	8000af0 <__aeabi_dcmpeq>
 8022ed0:	2800      	cmp	r0, #0
 8022ed2:	d1d7      	bne.n	8022e84 <pow+0x224>
 8022ed4:	2200      	movs	r2, #0
 8022ed6:	4b19      	ldr	r3, [pc, #100]	; (8022f3c <pow+0x2dc>)
 8022ed8:	e7d2      	b.n	8022e80 <pow+0x220>
 8022eda:	2200      	movs	r2, #0
 8022edc:	2300      	movs	r3, #0
 8022ede:	ec51 0b18 	vmov	r0, r1, d8
 8022ee2:	f7dd fe05 	bl	8000af0 <__aeabi_dcmpeq>
 8022ee6:	2800      	cmp	r0, #0
 8022ee8:	f43f af30 	beq.w	8022d4c <pow+0xec>
 8022eec:	ec47 6b10 	vmov	d0, r6, r7
 8022ef0:	f001 fa36 	bl	8024360 <finite>
 8022ef4:	2800      	cmp	r0, #0
 8022ef6:	f43f af29 	beq.w	8022d4c <pow+0xec>
 8022efa:	ec45 4b10 	vmov	d0, r4, r5
 8022efe:	f001 fa2f 	bl	8024360 <finite>
 8022f02:	2800      	cmp	r0, #0
 8022f04:	f43f af22 	beq.w	8022d4c <pow+0xec>
 8022f08:	2304      	movs	r3, #4
 8022f0a:	9302      	str	r3, [sp, #8]
 8022f0c:	4b09      	ldr	r3, [pc, #36]	; (8022f34 <pow+0x2d4>)
 8022f0e:	9303      	str	r3, [sp, #12]
 8022f10:	2300      	movs	r3, #0
 8022f12:	930a      	str	r3, [sp, #40]	; 0x28
 8022f14:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022f18:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022f1c:	ed8d 9b08 	vstr	d9, [sp, #32]
 8022f20:	e7b0      	b.n	8022e84 <pow+0x224>
 8022f22:	a802      	add	r0, sp, #8
 8022f24:	f001 fa24 	bl	8024370 <matherr>
 8022f28:	2800      	cmp	r0, #0
 8022f2a:	f47f af07 	bne.w	8022d3c <pow+0xdc>
 8022f2e:	e7ad      	b.n	8022e8c <pow+0x22c>
 8022f30:	200015b0 	.word	0x200015b0
 8022f34:	08031825 	.word	0x08031825
 8022f38:	3ff00000 	.word	0x3ff00000
 8022f3c:	fff00000 	.word	0xfff00000
 8022f40:	47efffff 	.word	0x47efffff
 8022f44:	3fe00000 	.word	0x3fe00000
 8022f48:	c7efffff 	.word	0xc7efffff
 8022f4c:	7ff00000 	.word	0x7ff00000

08022f50 <sqrt>:
 8022f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f54:	ed2d 8b02 	vpush	{d8}
 8022f58:	b08b      	sub	sp, #44	; 0x2c
 8022f5a:	ec55 4b10 	vmov	r4, r5, d0
 8022f5e:	f001 f901 	bl	8024164 <__ieee754_sqrt>
 8022f62:	4b26      	ldr	r3, [pc, #152]	; (8022ffc <sqrt+0xac>)
 8022f64:	eeb0 8a40 	vmov.f32	s16, s0
 8022f68:	eef0 8a60 	vmov.f32	s17, s1
 8022f6c:	f993 6000 	ldrsb.w	r6, [r3]
 8022f70:	1c73      	adds	r3, r6, #1
 8022f72:	d02a      	beq.n	8022fca <sqrt+0x7a>
 8022f74:	4622      	mov	r2, r4
 8022f76:	462b      	mov	r3, r5
 8022f78:	4620      	mov	r0, r4
 8022f7a:	4629      	mov	r1, r5
 8022f7c:	f7dd fdea 	bl	8000b54 <__aeabi_dcmpun>
 8022f80:	4607      	mov	r7, r0
 8022f82:	bb10      	cbnz	r0, 8022fca <sqrt+0x7a>
 8022f84:	f04f 0800 	mov.w	r8, #0
 8022f88:	f04f 0900 	mov.w	r9, #0
 8022f8c:	4642      	mov	r2, r8
 8022f8e:	464b      	mov	r3, r9
 8022f90:	4620      	mov	r0, r4
 8022f92:	4629      	mov	r1, r5
 8022f94:	f7dd fdb6 	bl	8000b04 <__aeabi_dcmplt>
 8022f98:	b1b8      	cbz	r0, 8022fca <sqrt+0x7a>
 8022f9a:	2301      	movs	r3, #1
 8022f9c:	9300      	str	r3, [sp, #0]
 8022f9e:	4b18      	ldr	r3, [pc, #96]	; (8023000 <sqrt+0xb0>)
 8022fa0:	9301      	str	r3, [sp, #4]
 8022fa2:	9708      	str	r7, [sp, #32]
 8022fa4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8022fa8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022fac:	b9b6      	cbnz	r6, 8022fdc <sqrt+0x8c>
 8022fae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8022fb2:	4668      	mov	r0, sp
 8022fb4:	f001 f9dc 	bl	8024370 <matherr>
 8022fb8:	b1d0      	cbz	r0, 8022ff0 <sqrt+0xa0>
 8022fba:	9b08      	ldr	r3, [sp, #32]
 8022fbc:	b11b      	cbz	r3, 8022fc6 <sqrt+0x76>
 8022fbe:	f7fc fce5 	bl	801f98c <__errno>
 8022fc2:	9b08      	ldr	r3, [sp, #32]
 8022fc4:	6003      	str	r3, [r0, #0]
 8022fc6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8022fca:	eeb0 0a48 	vmov.f32	s0, s16
 8022fce:	eef0 0a68 	vmov.f32	s1, s17
 8022fd2:	b00b      	add	sp, #44	; 0x2c
 8022fd4:	ecbd 8b02 	vpop	{d8}
 8022fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022fdc:	4642      	mov	r2, r8
 8022fde:	464b      	mov	r3, r9
 8022fe0:	4640      	mov	r0, r8
 8022fe2:	4649      	mov	r1, r9
 8022fe4:	f7dd fc46 	bl	8000874 <__aeabi_ddiv>
 8022fe8:	2e02      	cmp	r6, #2
 8022fea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022fee:	d1e0      	bne.n	8022fb2 <sqrt+0x62>
 8022ff0:	f7fc fccc 	bl	801f98c <__errno>
 8022ff4:	2321      	movs	r3, #33	; 0x21
 8022ff6:	6003      	str	r3, [r0, #0]
 8022ff8:	e7df      	b.n	8022fba <sqrt+0x6a>
 8022ffa:	bf00      	nop
 8022ffc:	200015b0 	.word	0x200015b0
 8023000:	08031829 	.word	0x08031829

08023004 <sqrtf>:
 8023004:	b510      	push	{r4, lr}
 8023006:	ed2d 8b02 	vpush	{d8}
 802300a:	b08a      	sub	sp, #40	; 0x28
 802300c:	eeb0 8a40 	vmov.f32	s16, s0
 8023010:	f001 f958 	bl	80242c4 <__ieee754_sqrtf>
 8023014:	4b21      	ldr	r3, [pc, #132]	; (802309c <sqrtf+0x98>)
 8023016:	f993 4000 	ldrsb.w	r4, [r3]
 802301a:	1c63      	adds	r3, r4, #1
 802301c:	d02c      	beq.n	8023078 <sqrtf+0x74>
 802301e:	eeb4 8a48 	vcmp.f32	s16, s16
 8023022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023026:	d627      	bvs.n	8023078 <sqrtf+0x74>
 8023028:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023030:	d522      	bpl.n	8023078 <sqrtf+0x74>
 8023032:	2301      	movs	r3, #1
 8023034:	9300      	str	r3, [sp, #0]
 8023036:	4b1a      	ldr	r3, [pc, #104]	; (80230a0 <sqrtf+0x9c>)
 8023038:	9301      	str	r3, [sp, #4]
 802303a:	ee18 0a10 	vmov	r0, s16
 802303e:	2300      	movs	r3, #0
 8023040:	9308      	str	r3, [sp, #32]
 8023042:	f7dd fa99 	bl	8000578 <__aeabi_f2d>
 8023046:	2200      	movs	r2, #0
 8023048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802304c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023050:	2300      	movs	r3, #0
 8023052:	b9ac      	cbnz	r4, 8023080 <sqrtf+0x7c>
 8023054:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023058:	4668      	mov	r0, sp
 802305a:	f001 f989 	bl	8024370 <matherr>
 802305e:	b1b8      	cbz	r0, 8023090 <sqrtf+0x8c>
 8023060:	9b08      	ldr	r3, [sp, #32]
 8023062:	b11b      	cbz	r3, 802306c <sqrtf+0x68>
 8023064:	f7fc fc92 	bl	801f98c <__errno>
 8023068:	9b08      	ldr	r3, [sp, #32]
 802306a:	6003      	str	r3, [r0, #0]
 802306c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023070:	f7dd fdce 	bl	8000c10 <__aeabi_d2f>
 8023074:	ee00 0a10 	vmov	s0, r0
 8023078:	b00a      	add	sp, #40	; 0x28
 802307a:	ecbd 8b02 	vpop	{d8}
 802307e:	bd10      	pop	{r4, pc}
 8023080:	4610      	mov	r0, r2
 8023082:	4619      	mov	r1, r3
 8023084:	f7dd fbf6 	bl	8000874 <__aeabi_ddiv>
 8023088:	2c02      	cmp	r4, #2
 802308a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802308e:	d1e3      	bne.n	8023058 <sqrtf+0x54>
 8023090:	f7fc fc7c 	bl	801f98c <__errno>
 8023094:	2321      	movs	r3, #33	; 0x21
 8023096:	6003      	str	r3, [r0, #0]
 8023098:	e7e2      	b.n	8023060 <sqrtf+0x5c>
 802309a:	bf00      	nop
 802309c:	200015b0 	.word	0x200015b0
 80230a0:	0803182e 	.word	0x0803182e
 80230a4:	00000000 	.word	0x00000000

080230a8 <__ieee754_exp>:
 80230a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230ac:	ec55 4b10 	vmov	r4, r5, d0
 80230b0:	4aad      	ldr	r2, [pc, #692]	; (8023368 <__ieee754_exp+0x2c0>)
 80230b2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80230b6:	4297      	cmp	r7, r2
 80230b8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80230bc:	f240 80af 	bls.w	802321e <__ieee754_exp+0x176>
 80230c0:	4aaa      	ldr	r2, [pc, #680]	; (802336c <__ieee754_exp+0x2c4>)
 80230c2:	4297      	cmp	r7, r2
 80230c4:	d915      	bls.n	80230f2 <__ieee754_exp+0x4a>
 80230c6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80230ca:	4323      	orrs	r3, r4
 80230cc:	d009      	beq.n	80230e2 <__ieee754_exp+0x3a>
 80230ce:	ee10 2a10 	vmov	r2, s0
 80230d2:	462b      	mov	r3, r5
 80230d4:	4620      	mov	r0, r4
 80230d6:	4629      	mov	r1, r5
 80230d8:	f7dd f8f0 	bl	80002bc <__adddf3>
 80230dc:	4604      	mov	r4, r0
 80230de:	460d      	mov	r5, r1
 80230e0:	e002      	b.n	80230e8 <__ieee754_exp+0x40>
 80230e2:	b10e      	cbz	r6, 80230e8 <__ieee754_exp+0x40>
 80230e4:	2400      	movs	r4, #0
 80230e6:	2500      	movs	r5, #0
 80230e8:	ec45 4b10 	vmov	d0, r4, r5
 80230ec:	b003      	add	sp, #12
 80230ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230f2:	a387      	add	r3, pc, #540	; (adr r3, 8023310 <__ieee754_exp+0x268>)
 80230f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230f8:	ee10 0a10 	vmov	r0, s0
 80230fc:	4629      	mov	r1, r5
 80230fe:	f7dd fd1f 	bl	8000b40 <__aeabi_dcmpgt>
 8023102:	b138      	cbz	r0, 8023114 <__ieee754_exp+0x6c>
 8023104:	a384      	add	r3, pc, #528	; (adr r3, 8023318 <__ieee754_exp+0x270>)
 8023106:	e9d3 2300 	ldrd	r2, r3, [r3]
 802310a:	4610      	mov	r0, r2
 802310c:	4619      	mov	r1, r3
 802310e:	f7dd fa87 	bl	8000620 <__aeabi_dmul>
 8023112:	e7e3      	b.n	80230dc <__ieee754_exp+0x34>
 8023114:	a382      	add	r3, pc, #520	; (adr r3, 8023320 <__ieee754_exp+0x278>)
 8023116:	e9d3 2300 	ldrd	r2, r3, [r3]
 802311a:	4620      	mov	r0, r4
 802311c:	4629      	mov	r1, r5
 802311e:	f7dd fcf1 	bl	8000b04 <__aeabi_dcmplt>
 8023122:	2800      	cmp	r0, #0
 8023124:	d1de      	bne.n	80230e4 <__ieee754_exp+0x3c>
 8023126:	4b92      	ldr	r3, [pc, #584]	; (8023370 <__ieee754_exp+0x2c8>)
 8023128:	429f      	cmp	r7, r3
 802312a:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 802312e:	f200 808e 	bhi.w	802324e <__ieee754_exp+0x1a6>
 8023132:	4b90      	ldr	r3, [pc, #576]	; (8023374 <__ieee754_exp+0x2cc>)
 8023134:	443b      	add	r3, r7
 8023136:	e9d3 2300 	ldrd	r2, r3, [r3]
 802313a:	4620      	mov	r0, r4
 802313c:	4629      	mov	r1, r5
 802313e:	f7dd f8bb 	bl	80002b8 <__aeabi_dsub>
 8023142:	4b8d      	ldr	r3, [pc, #564]	; (8023378 <__ieee754_exp+0x2d0>)
 8023144:	441f      	add	r7, r3
 8023146:	ed97 7b00 	vldr	d7, [r7]
 802314a:	ed8d 7b00 	vstr	d7, [sp]
 802314e:	4682      	mov	sl, r0
 8023150:	f1c6 0001 	rsb	r0, r6, #1
 8023154:	468b      	mov	fp, r1
 8023156:	1b86      	subs	r6, r0, r6
 8023158:	e9dd 2300 	ldrd	r2, r3, [sp]
 802315c:	4650      	mov	r0, sl
 802315e:	4659      	mov	r1, fp
 8023160:	f7dd f8aa 	bl	80002b8 <__aeabi_dsub>
 8023164:	4604      	mov	r4, r0
 8023166:	460d      	mov	r5, r1
 8023168:	4622      	mov	r2, r4
 802316a:	462b      	mov	r3, r5
 802316c:	4620      	mov	r0, r4
 802316e:	4629      	mov	r1, r5
 8023170:	f7dd fa56 	bl	8000620 <__aeabi_dmul>
 8023174:	a36c      	add	r3, pc, #432	; (adr r3, 8023328 <__ieee754_exp+0x280>)
 8023176:	e9d3 2300 	ldrd	r2, r3, [r3]
 802317a:	4680      	mov	r8, r0
 802317c:	4689      	mov	r9, r1
 802317e:	f7dd fa4f 	bl	8000620 <__aeabi_dmul>
 8023182:	a36b      	add	r3, pc, #428	; (adr r3, 8023330 <__ieee754_exp+0x288>)
 8023184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023188:	f7dd f896 	bl	80002b8 <__aeabi_dsub>
 802318c:	4642      	mov	r2, r8
 802318e:	464b      	mov	r3, r9
 8023190:	f7dd fa46 	bl	8000620 <__aeabi_dmul>
 8023194:	a368      	add	r3, pc, #416	; (adr r3, 8023338 <__ieee754_exp+0x290>)
 8023196:	e9d3 2300 	ldrd	r2, r3, [r3]
 802319a:	f7dd f88f 	bl	80002bc <__adddf3>
 802319e:	4642      	mov	r2, r8
 80231a0:	464b      	mov	r3, r9
 80231a2:	f7dd fa3d 	bl	8000620 <__aeabi_dmul>
 80231a6:	a366      	add	r3, pc, #408	; (adr r3, 8023340 <__ieee754_exp+0x298>)
 80231a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ac:	f7dd f884 	bl	80002b8 <__aeabi_dsub>
 80231b0:	4642      	mov	r2, r8
 80231b2:	464b      	mov	r3, r9
 80231b4:	f7dd fa34 	bl	8000620 <__aeabi_dmul>
 80231b8:	a363      	add	r3, pc, #396	; (adr r3, 8023348 <__ieee754_exp+0x2a0>)
 80231ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231be:	f7dd f87d 	bl	80002bc <__adddf3>
 80231c2:	4642      	mov	r2, r8
 80231c4:	464b      	mov	r3, r9
 80231c6:	f7dd fa2b 	bl	8000620 <__aeabi_dmul>
 80231ca:	4602      	mov	r2, r0
 80231cc:	460b      	mov	r3, r1
 80231ce:	4620      	mov	r0, r4
 80231d0:	4629      	mov	r1, r5
 80231d2:	f7dd f871 	bl	80002b8 <__aeabi_dsub>
 80231d6:	4680      	mov	r8, r0
 80231d8:	4689      	mov	r9, r1
 80231da:	4602      	mov	r2, r0
 80231dc:	460b      	mov	r3, r1
 80231de:	4620      	mov	r0, r4
 80231e0:	4629      	mov	r1, r5
 80231e2:	2e00      	cmp	r6, #0
 80231e4:	d162      	bne.n	80232ac <__ieee754_exp+0x204>
 80231e6:	f7dd fa1b 	bl	8000620 <__aeabi_dmul>
 80231ea:	2200      	movs	r2, #0
 80231ec:	4606      	mov	r6, r0
 80231ee:	460f      	mov	r7, r1
 80231f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80231f4:	4640      	mov	r0, r8
 80231f6:	4649      	mov	r1, r9
 80231f8:	f7dd f85e 	bl	80002b8 <__aeabi_dsub>
 80231fc:	4602      	mov	r2, r0
 80231fe:	460b      	mov	r3, r1
 8023200:	4630      	mov	r0, r6
 8023202:	4639      	mov	r1, r7
 8023204:	f7dd fb36 	bl	8000874 <__aeabi_ddiv>
 8023208:	4622      	mov	r2, r4
 802320a:	462b      	mov	r3, r5
 802320c:	f7dd f854 	bl	80002b8 <__aeabi_dsub>
 8023210:	4602      	mov	r2, r0
 8023212:	460b      	mov	r3, r1
 8023214:	2000      	movs	r0, #0
 8023216:	4959      	ldr	r1, [pc, #356]	; (802337c <__ieee754_exp+0x2d4>)
 8023218:	f7dd f84e 	bl	80002b8 <__aeabi_dsub>
 802321c:	e75e      	b.n	80230dc <__ieee754_exp+0x34>
 802321e:	4b58      	ldr	r3, [pc, #352]	; (8023380 <__ieee754_exp+0x2d8>)
 8023220:	429f      	cmp	r7, r3
 8023222:	d880      	bhi.n	8023126 <__ieee754_exp+0x7e>
 8023224:	4b57      	ldr	r3, [pc, #348]	; (8023384 <__ieee754_exp+0x2dc>)
 8023226:	429f      	cmp	r7, r3
 8023228:	d83c      	bhi.n	80232a4 <__ieee754_exp+0x1fc>
 802322a:	a33b      	add	r3, pc, #236	; (adr r3, 8023318 <__ieee754_exp+0x270>)
 802322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023230:	ee10 0a10 	vmov	r0, s0
 8023234:	4629      	mov	r1, r5
 8023236:	f7dd f841 	bl	80002bc <__adddf3>
 802323a:	2200      	movs	r2, #0
 802323c:	4b4f      	ldr	r3, [pc, #316]	; (802337c <__ieee754_exp+0x2d4>)
 802323e:	f7dd fc7f 	bl	8000b40 <__aeabi_dcmpgt>
 8023242:	b388      	cbz	r0, 80232a8 <__ieee754_exp+0x200>
 8023244:	2200      	movs	r2, #0
 8023246:	4b4d      	ldr	r3, [pc, #308]	; (802337c <__ieee754_exp+0x2d4>)
 8023248:	4620      	mov	r0, r4
 802324a:	4629      	mov	r1, r5
 802324c:	e744      	b.n	80230d8 <__ieee754_exp+0x30>
 802324e:	4e4e      	ldr	r6, [pc, #312]	; (8023388 <__ieee754_exp+0x2e0>)
 8023250:	a33f      	add	r3, pc, #252	; (adr r3, 8023350 <__ieee754_exp+0x2a8>)
 8023252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023256:	443e      	add	r6, r7
 8023258:	4620      	mov	r0, r4
 802325a:	4629      	mov	r1, r5
 802325c:	f7dd f9e0 	bl	8000620 <__aeabi_dmul>
 8023260:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023264:	f7dd f82a 	bl	80002bc <__adddf3>
 8023268:	f7dd fc8a 	bl	8000b80 <__aeabi_d2iz>
 802326c:	4606      	mov	r6, r0
 802326e:	f7dd f971 	bl	8000554 <__aeabi_i2d>
 8023272:	a339      	add	r3, pc, #228	; (adr r3, 8023358 <__ieee754_exp+0x2b0>)
 8023274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023278:	4680      	mov	r8, r0
 802327a:	4689      	mov	r9, r1
 802327c:	f7dd f9d0 	bl	8000620 <__aeabi_dmul>
 8023280:	4602      	mov	r2, r0
 8023282:	460b      	mov	r3, r1
 8023284:	4620      	mov	r0, r4
 8023286:	4629      	mov	r1, r5
 8023288:	f7dd f816 	bl	80002b8 <__aeabi_dsub>
 802328c:	a334      	add	r3, pc, #208	; (adr r3, 8023360 <__ieee754_exp+0x2b8>)
 802328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023292:	4682      	mov	sl, r0
 8023294:	468b      	mov	fp, r1
 8023296:	4640      	mov	r0, r8
 8023298:	4649      	mov	r1, r9
 802329a:	f7dd f9c1 	bl	8000620 <__aeabi_dmul>
 802329e:	e9cd 0100 	strd	r0, r1, [sp]
 80232a2:	e759      	b.n	8023158 <__ieee754_exp+0xb0>
 80232a4:	2600      	movs	r6, #0
 80232a6:	e75f      	b.n	8023168 <__ieee754_exp+0xc0>
 80232a8:	4606      	mov	r6, r0
 80232aa:	e75d      	b.n	8023168 <__ieee754_exp+0xc0>
 80232ac:	f7dd f9b8 	bl	8000620 <__aeabi_dmul>
 80232b0:	4642      	mov	r2, r8
 80232b2:	4604      	mov	r4, r0
 80232b4:	460d      	mov	r5, r1
 80232b6:	464b      	mov	r3, r9
 80232b8:	2000      	movs	r0, #0
 80232ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80232be:	f7dc fffb 	bl	80002b8 <__aeabi_dsub>
 80232c2:	4602      	mov	r2, r0
 80232c4:	460b      	mov	r3, r1
 80232c6:	4620      	mov	r0, r4
 80232c8:	4629      	mov	r1, r5
 80232ca:	f7dd fad3 	bl	8000874 <__aeabi_ddiv>
 80232ce:	4602      	mov	r2, r0
 80232d0:	460b      	mov	r3, r1
 80232d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80232d6:	f7dc ffef 	bl	80002b8 <__aeabi_dsub>
 80232da:	4652      	mov	r2, sl
 80232dc:	465b      	mov	r3, fp
 80232de:	f7dc ffeb 	bl	80002b8 <__aeabi_dsub>
 80232e2:	460b      	mov	r3, r1
 80232e4:	4602      	mov	r2, r0
 80232e6:	4925      	ldr	r1, [pc, #148]	; (802337c <__ieee754_exp+0x2d4>)
 80232e8:	2000      	movs	r0, #0
 80232ea:	f7dc ffe5 	bl	80002b8 <__aeabi_dsub>
 80232ee:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 80232f2:	429e      	cmp	r6, r3
 80232f4:	db02      	blt.n	80232fc <__ieee754_exp+0x254>
 80232f6:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 80232fa:	e6ef      	b.n	80230dc <__ieee754_exp+0x34>
 80232fc:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8023300:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8023304:	2200      	movs	r2, #0
 8023306:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 802330a:	e700      	b.n	802310e <__ieee754_exp+0x66>
 802330c:	f3af 8000 	nop.w
 8023310:	fefa39ef 	.word	0xfefa39ef
 8023314:	40862e42 	.word	0x40862e42
 8023318:	8800759c 	.word	0x8800759c
 802331c:	7e37e43c 	.word	0x7e37e43c
 8023320:	d52d3051 	.word	0xd52d3051
 8023324:	c0874910 	.word	0xc0874910
 8023328:	72bea4d0 	.word	0x72bea4d0
 802332c:	3e663769 	.word	0x3e663769
 8023330:	c5d26bf1 	.word	0xc5d26bf1
 8023334:	3ebbbd41 	.word	0x3ebbbd41
 8023338:	af25de2c 	.word	0xaf25de2c
 802333c:	3f11566a 	.word	0x3f11566a
 8023340:	16bebd93 	.word	0x16bebd93
 8023344:	3f66c16c 	.word	0x3f66c16c
 8023348:	5555553e 	.word	0x5555553e
 802334c:	3fc55555 	.word	0x3fc55555
 8023350:	652b82fe 	.word	0x652b82fe
 8023354:	3ff71547 	.word	0x3ff71547
 8023358:	fee00000 	.word	0xfee00000
 802335c:	3fe62e42 	.word	0x3fe62e42
 8023360:	35793c76 	.word	0x35793c76
 8023364:	3dea39ef 	.word	0x3dea39ef
 8023368:	40862e41 	.word	0x40862e41
 802336c:	7fefffff 	.word	0x7fefffff
 8023370:	3ff0a2b1 	.word	0x3ff0a2b1
 8023374:	08031848 	.word	0x08031848
 8023378:	08031858 	.word	0x08031858
 802337c:	3ff00000 	.word	0x3ff00000
 8023380:	3fd62e42 	.word	0x3fd62e42
 8023384:	3e2fffff 	.word	0x3e2fffff
 8023388:	08031838 	.word	0x08031838
 802338c:	00000000 	.word	0x00000000

08023390 <__ieee754_log>:
 8023390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023394:	ec51 0b10 	vmov	r0, r1, d0
 8023398:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802339c:	b087      	sub	sp, #28
 802339e:	ee10 3a10 	vmov	r3, s0
 80233a2:	460d      	mov	r5, r1
 80233a4:	da27      	bge.n	80233f6 <__ieee754_log+0x66>
 80233a6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80233aa:	4313      	orrs	r3, r2
 80233ac:	d10a      	bne.n	80233c4 <__ieee754_log+0x34>
 80233ae:	49cc      	ldr	r1, [pc, #816]	; (80236e0 <__ieee754_log+0x350>)
 80233b0:	2200      	movs	r2, #0
 80233b2:	2300      	movs	r3, #0
 80233b4:	2000      	movs	r0, #0
 80233b6:	f7dd fa5d 	bl	8000874 <__aeabi_ddiv>
 80233ba:	ec41 0b10 	vmov	d0, r0, r1
 80233be:	b007      	add	sp, #28
 80233c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233c4:	2900      	cmp	r1, #0
 80233c6:	da07      	bge.n	80233d8 <__ieee754_log+0x48>
 80233c8:	ee10 2a10 	vmov	r2, s0
 80233cc:	460b      	mov	r3, r1
 80233ce:	f7dc ff73 	bl	80002b8 <__aeabi_dsub>
 80233d2:	2200      	movs	r2, #0
 80233d4:	2300      	movs	r3, #0
 80233d6:	e7ee      	b.n	80233b6 <__ieee754_log+0x26>
 80233d8:	4bc2      	ldr	r3, [pc, #776]	; (80236e4 <__ieee754_log+0x354>)
 80233da:	2200      	movs	r2, #0
 80233dc:	f7dd f920 	bl	8000620 <__aeabi_dmul>
 80233e0:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80233e4:	460d      	mov	r5, r1
 80233e6:	4ac0      	ldr	r2, [pc, #768]	; (80236e8 <__ieee754_log+0x358>)
 80233e8:	4295      	cmp	r5, r2
 80233ea:	dd06      	ble.n	80233fa <__ieee754_log+0x6a>
 80233ec:	4602      	mov	r2, r0
 80233ee:	460b      	mov	r3, r1
 80233f0:	f7dc ff64 	bl	80002bc <__adddf3>
 80233f4:	e7e1      	b.n	80233ba <__ieee754_log+0x2a>
 80233f6:	2300      	movs	r3, #0
 80233f8:	e7f5      	b.n	80233e6 <__ieee754_log+0x56>
 80233fa:	152c      	asrs	r4, r5, #20
 80233fc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8023400:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8023404:	441c      	add	r4, r3
 8023406:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 802340a:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 802340e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023412:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8023416:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 802341a:	ea42 0105 	orr.w	r1, r2, r5
 802341e:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8023422:	2200      	movs	r2, #0
 8023424:	4bb1      	ldr	r3, [pc, #708]	; (80236ec <__ieee754_log+0x35c>)
 8023426:	f7dc ff47 	bl	80002b8 <__aeabi_dsub>
 802342a:	1cab      	adds	r3, r5, #2
 802342c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023430:	2b02      	cmp	r3, #2
 8023432:	4682      	mov	sl, r0
 8023434:	468b      	mov	fp, r1
 8023436:	f04f 0200 	mov.w	r2, #0
 802343a:	dc5b      	bgt.n	80234f4 <__ieee754_log+0x164>
 802343c:	2300      	movs	r3, #0
 802343e:	f7dd fb57 	bl	8000af0 <__aeabi_dcmpeq>
 8023442:	b1d0      	cbz	r0, 802347a <__ieee754_log+0xea>
 8023444:	2c00      	cmp	r4, #0
 8023446:	f000 8170 	beq.w	802372a <__ieee754_log+0x39a>
 802344a:	4620      	mov	r0, r4
 802344c:	f7dd f882 	bl	8000554 <__aeabi_i2d>
 8023450:	a38f      	add	r3, pc, #572	; (adr r3, 8023690 <__ieee754_log+0x300>)
 8023452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023456:	4606      	mov	r6, r0
 8023458:	460f      	mov	r7, r1
 802345a:	f7dd f8e1 	bl	8000620 <__aeabi_dmul>
 802345e:	a38e      	add	r3, pc, #568	; (adr r3, 8023698 <__ieee754_log+0x308>)
 8023460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023464:	4604      	mov	r4, r0
 8023466:	460d      	mov	r5, r1
 8023468:	4630      	mov	r0, r6
 802346a:	4639      	mov	r1, r7
 802346c:	f7dd f8d8 	bl	8000620 <__aeabi_dmul>
 8023470:	4602      	mov	r2, r0
 8023472:	460b      	mov	r3, r1
 8023474:	4620      	mov	r0, r4
 8023476:	4629      	mov	r1, r5
 8023478:	e7ba      	b.n	80233f0 <__ieee754_log+0x60>
 802347a:	a389      	add	r3, pc, #548	; (adr r3, 80236a0 <__ieee754_log+0x310>)
 802347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023480:	4650      	mov	r0, sl
 8023482:	4659      	mov	r1, fp
 8023484:	f7dd f8cc 	bl	8000620 <__aeabi_dmul>
 8023488:	4602      	mov	r2, r0
 802348a:	460b      	mov	r3, r1
 802348c:	2000      	movs	r0, #0
 802348e:	4998      	ldr	r1, [pc, #608]	; (80236f0 <__ieee754_log+0x360>)
 8023490:	f7dc ff12 	bl	80002b8 <__aeabi_dsub>
 8023494:	4652      	mov	r2, sl
 8023496:	4606      	mov	r6, r0
 8023498:	460f      	mov	r7, r1
 802349a:	465b      	mov	r3, fp
 802349c:	4650      	mov	r0, sl
 802349e:	4659      	mov	r1, fp
 80234a0:	f7dd f8be 	bl	8000620 <__aeabi_dmul>
 80234a4:	4602      	mov	r2, r0
 80234a6:	460b      	mov	r3, r1
 80234a8:	4630      	mov	r0, r6
 80234aa:	4639      	mov	r1, r7
 80234ac:	f7dd f8b8 	bl	8000620 <__aeabi_dmul>
 80234b0:	4606      	mov	r6, r0
 80234b2:	460f      	mov	r7, r1
 80234b4:	b934      	cbnz	r4, 80234c4 <__ieee754_log+0x134>
 80234b6:	4602      	mov	r2, r0
 80234b8:	460b      	mov	r3, r1
 80234ba:	4650      	mov	r0, sl
 80234bc:	4659      	mov	r1, fp
 80234be:	f7dc fefb 	bl	80002b8 <__aeabi_dsub>
 80234c2:	e77a      	b.n	80233ba <__ieee754_log+0x2a>
 80234c4:	4620      	mov	r0, r4
 80234c6:	f7dd f845 	bl	8000554 <__aeabi_i2d>
 80234ca:	a371      	add	r3, pc, #452	; (adr r3, 8023690 <__ieee754_log+0x300>)
 80234cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234d0:	4680      	mov	r8, r0
 80234d2:	4689      	mov	r9, r1
 80234d4:	f7dd f8a4 	bl	8000620 <__aeabi_dmul>
 80234d8:	a36f      	add	r3, pc, #444	; (adr r3, 8023698 <__ieee754_log+0x308>)
 80234da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234de:	4604      	mov	r4, r0
 80234e0:	460d      	mov	r5, r1
 80234e2:	4640      	mov	r0, r8
 80234e4:	4649      	mov	r1, r9
 80234e6:	f7dd f89b 	bl	8000620 <__aeabi_dmul>
 80234ea:	4602      	mov	r2, r0
 80234ec:	460b      	mov	r3, r1
 80234ee:	4630      	mov	r0, r6
 80234f0:	4639      	mov	r1, r7
 80234f2:	e0b2      	b.n	802365a <__ieee754_log+0x2ca>
 80234f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80234f8:	f7dc fee0 	bl	80002bc <__adddf3>
 80234fc:	4602      	mov	r2, r0
 80234fe:	460b      	mov	r3, r1
 8023500:	4650      	mov	r0, sl
 8023502:	4659      	mov	r1, fp
 8023504:	f7dd f9b6 	bl	8000874 <__aeabi_ddiv>
 8023508:	e9cd 0100 	strd	r0, r1, [sp]
 802350c:	4620      	mov	r0, r4
 802350e:	f7dd f821 	bl	8000554 <__aeabi_i2d>
 8023512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802351a:	4610      	mov	r0, r2
 802351c:	4619      	mov	r1, r3
 802351e:	f7dd f87f 	bl	8000620 <__aeabi_dmul>
 8023522:	4602      	mov	r2, r0
 8023524:	460b      	mov	r3, r1
 8023526:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802352a:	f7dd f879 	bl	8000620 <__aeabi_dmul>
 802352e:	a35e      	add	r3, pc, #376	; (adr r3, 80236a8 <__ieee754_log+0x318>)
 8023530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023534:	4606      	mov	r6, r0
 8023536:	460f      	mov	r7, r1
 8023538:	f7dd f872 	bl	8000620 <__aeabi_dmul>
 802353c:	a35c      	add	r3, pc, #368	; (adr r3, 80236b0 <__ieee754_log+0x320>)
 802353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023542:	f7dc febb 	bl	80002bc <__adddf3>
 8023546:	4632      	mov	r2, r6
 8023548:	463b      	mov	r3, r7
 802354a:	f7dd f869 	bl	8000620 <__aeabi_dmul>
 802354e:	a35a      	add	r3, pc, #360	; (adr r3, 80236b8 <__ieee754_log+0x328>)
 8023550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023554:	f7dc feb2 	bl	80002bc <__adddf3>
 8023558:	4632      	mov	r2, r6
 802355a:	463b      	mov	r3, r7
 802355c:	f7dd f860 	bl	8000620 <__aeabi_dmul>
 8023560:	a357      	add	r3, pc, #348	; (adr r3, 80236c0 <__ieee754_log+0x330>)
 8023562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023566:	f7dc fea9 	bl	80002bc <__adddf3>
 802356a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802356e:	f7dd f857 	bl	8000620 <__aeabi_dmul>
 8023572:	a355      	add	r3, pc, #340	; (adr r3, 80236c8 <__ieee754_log+0x338>)
 8023574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802357c:	4630      	mov	r0, r6
 802357e:	4639      	mov	r1, r7
 8023580:	f7dd f84e 	bl	8000620 <__aeabi_dmul>
 8023584:	a352      	add	r3, pc, #328	; (adr r3, 80236d0 <__ieee754_log+0x340>)
 8023586:	e9d3 2300 	ldrd	r2, r3, [r3]
 802358a:	f7dc fe97 	bl	80002bc <__adddf3>
 802358e:	4632      	mov	r2, r6
 8023590:	463b      	mov	r3, r7
 8023592:	f7dd f845 	bl	8000620 <__aeabi_dmul>
 8023596:	a350      	add	r3, pc, #320	; (adr r3, 80236d8 <__ieee754_log+0x348>)
 8023598:	e9d3 2300 	ldrd	r2, r3, [r3]
 802359c:	f7dc fe8e 	bl	80002bc <__adddf3>
 80235a0:	4632      	mov	r2, r6
 80235a2:	463b      	mov	r3, r7
 80235a4:	f7dd f83c 	bl	8000620 <__aeabi_dmul>
 80235a8:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80235ac:	4602      	mov	r2, r0
 80235ae:	460b      	mov	r3, r1
 80235b0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80235b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80235b8:	f7dc fe80 	bl	80002bc <__adddf3>
 80235bc:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80235c0:	3551      	adds	r5, #81	; 0x51
 80235c2:	ea45 0508 	orr.w	r5, r5, r8
 80235c6:	2d00      	cmp	r5, #0
 80235c8:	4606      	mov	r6, r0
 80235ca:	460f      	mov	r7, r1
 80235cc:	dd50      	ble.n	8023670 <__ieee754_log+0x2e0>
 80235ce:	2200      	movs	r2, #0
 80235d0:	4b47      	ldr	r3, [pc, #284]	; (80236f0 <__ieee754_log+0x360>)
 80235d2:	4650      	mov	r0, sl
 80235d4:	4659      	mov	r1, fp
 80235d6:	f7dd f823 	bl	8000620 <__aeabi_dmul>
 80235da:	4652      	mov	r2, sl
 80235dc:	465b      	mov	r3, fp
 80235de:	f7dd f81f 	bl	8000620 <__aeabi_dmul>
 80235e2:	4680      	mov	r8, r0
 80235e4:	4689      	mov	r9, r1
 80235e6:	b994      	cbnz	r4, 802360e <__ieee754_log+0x27e>
 80235e8:	4602      	mov	r2, r0
 80235ea:	460b      	mov	r3, r1
 80235ec:	4630      	mov	r0, r6
 80235ee:	4639      	mov	r1, r7
 80235f0:	f7dc fe64 	bl	80002bc <__adddf3>
 80235f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80235f8:	f7dd f812 	bl	8000620 <__aeabi_dmul>
 80235fc:	4602      	mov	r2, r0
 80235fe:	460b      	mov	r3, r1
 8023600:	4640      	mov	r0, r8
 8023602:	4649      	mov	r1, r9
 8023604:	f7dc fe58 	bl	80002b8 <__aeabi_dsub>
 8023608:	4602      	mov	r2, r0
 802360a:	460b      	mov	r3, r1
 802360c:	e755      	b.n	80234ba <__ieee754_log+0x12a>
 802360e:	a320      	add	r3, pc, #128	; (adr r3, 8023690 <__ieee754_log+0x300>)
 8023610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023618:	f7dd f802 	bl	8000620 <__aeabi_dmul>
 802361c:	4642      	mov	r2, r8
 802361e:	464b      	mov	r3, r9
 8023620:	4604      	mov	r4, r0
 8023622:	460d      	mov	r5, r1
 8023624:	4630      	mov	r0, r6
 8023626:	4639      	mov	r1, r7
 8023628:	f7dc fe48 	bl	80002bc <__adddf3>
 802362c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023630:	f7dc fff6 	bl	8000620 <__aeabi_dmul>
 8023634:	a318      	add	r3, pc, #96	; (adr r3, 8023698 <__ieee754_log+0x308>)
 8023636:	e9d3 2300 	ldrd	r2, r3, [r3]
 802363a:	4606      	mov	r6, r0
 802363c:	460f      	mov	r7, r1
 802363e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023642:	f7dc ffed 	bl	8000620 <__aeabi_dmul>
 8023646:	4602      	mov	r2, r0
 8023648:	460b      	mov	r3, r1
 802364a:	4630      	mov	r0, r6
 802364c:	4639      	mov	r1, r7
 802364e:	f7dc fe35 	bl	80002bc <__adddf3>
 8023652:	4602      	mov	r2, r0
 8023654:	460b      	mov	r3, r1
 8023656:	4640      	mov	r0, r8
 8023658:	4649      	mov	r1, r9
 802365a:	f7dc fe2d 	bl	80002b8 <__aeabi_dsub>
 802365e:	4652      	mov	r2, sl
 8023660:	465b      	mov	r3, fp
 8023662:	f7dc fe29 	bl	80002b8 <__aeabi_dsub>
 8023666:	4602      	mov	r2, r0
 8023668:	460b      	mov	r3, r1
 802366a:	4620      	mov	r0, r4
 802366c:	4629      	mov	r1, r5
 802366e:	e726      	b.n	80234be <__ieee754_log+0x12e>
 8023670:	2c00      	cmp	r4, #0
 8023672:	d13f      	bne.n	80236f4 <__ieee754_log+0x364>
 8023674:	4602      	mov	r2, r0
 8023676:	460b      	mov	r3, r1
 8023678:	4650      	mov	r0, sl
 802367a:	4659      	mov	r1, fp
 802367c:	f7dc fe1c 	bl	80002b8 <__aeabi_dsub>
 8023680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023684:	f7dc ffcc 	bl	8000620 <__aeabi_dmul>
 8023688:	e7be      	b.n	8023608 <__ieee754_log+0x278>
 802368a:	bf00      	nop
 802368c:	f3af 8000 	nop.w
 8023690:	fee00000 	.word	0xfee00000
 8023694:	3fe62e42 	.word	0x3fe62e42
 8023698:	35793c76 	.word	0x35793c76
 802369c:	3dea39ef 	.word	0x3dea39ef
 80236a0:	55555555 	.word	0x55555555
 80236a4:	3fd55555 	.word	0x3fd55555
 80236a8:	df3e5244 	.word	0xdf3e5244
 80236ac:	3fc2f112 	.word	0x3fc2f112
 80236b0:	96cb03de 	.word	0x96cb03de
 80236b4:	3fc74664 	.word	0x3fc74664
 80236b8:	94229359 	.word	0x94229359
 80236bc:	3fd24924 	.word	0x3fd24924
 80236c0:	55555593 	.word	0x55555593
 80236c4:	3fe55555 	.word	0x3fe55555
 80236c8:	d078c69f 	.word	0xd078c69f
 80236cc:	3fc39a09 	.word	0x3fc39a09
 80236d0:	1d8e78af 	.word	0x1d8e78af
 80236d4:	3fcc71c5 	.word	0x3fcc71c5
 80236d8:	9997fa04 	.word	0x9997fa04
 80236dc:	3fd99999 	.word	0x3fd99999
 80236e0:	c3500000 	.word	0xc3500000
 80236e4:	43500000 	.word	0x43500000
 80236e8:	7fefffff 	.word	0x7fefffff
 80236ec:	3ff00000 	.word	0x3ff00000
 80236f0:	3fe00000 	.word	0x3fe00000
 80236f4:	a30e      	add	r3, pc, #56	; (adr r3, 8023730 <__ieee754_log+0x3a0>)
 80236f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80236fe:	f7dc ff8f 	bl	8000620 <__aeabi_dmul>
 8023702:	4632      	mov	r2, r6
 8023704:	463b      	mov	r3, r7
 8023706:	4604      	mov	r4, r0
 8023708:	460d      	mov	r5, r1
 802370a:	4650      	mov	r0, sl
 802370c:	4659      	mov	r1, fp
 802370e:	f7dc fdd3 	bl	80002b8 <__aeabi_dsub>
 8023712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023716:	f7dc ff83 	bl	8000620 <__aeabi_dmul>
 802371a:	a307      	add	r3, pc, #28	; (adr r3, 8023738 <__ieee754_log+0x3a8>)
 802371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023720:	4606      	mov	r6, r0
 8023722:	460f      	mov	r7, r1
 8023724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023728:	e6dd      	b.n	80234e6 <__ieee754_log+0x156>
 802372a:	2000      	movs	r0, #0
 802372c:	2100      	movs	r1, #0
 802372e:	e644      	b.n	80233ba <__ieee754_log+0x2a>
 8023730:	fee00000 	.word	0xfee00000
 8023734:	3fe62e42 	.word	0x3fe62e42
 8023738:	35793c76 	.word	0x35793c76
 802373c:	3dea39ef 	.word	0x3dea39ef

08023740 <__ieee754_pow>:
 8023740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023744:	b091      	sub	sp, #68	; 0x44
 8023746:	ed8d 1b00 	vstr	d1, [sp]
 802374a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 802374e:	ec57 6b10 	vmov	r6, r7, d0
 8023752:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8023756:	ea58 0302 	orrs.w	r3, r8, r2
 802375a:	ee10 aa10 	vmov	sl, s0
 802375e:	463d      	mov	r5, r7
 8023760:	f000 84bd 	beq.w	80240de <__ieee754_pow+0x99e>
 8023764:	4b78      	ldr	r3, [pc, #480]	; (8023948 <__ieee754_pow+0x208>)
 8023766:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802376a:	429c      	cmp	r4, r3
 802376c:	dc09      	bgt.n	8023782 <__ieee754_pow+0x42>
 802376e:	d103      	bne.n	8023778 <__ieee754_pow+0x38>
 8023770:	b93e      	cbnz	r6, 8023782 <__ieee754_pow+0x42>
 8023772:	45a0      	cmp	r8, r4
 8023774:	dc0d      	bgt.n	8023792 <__ieee754_pow+0x52>
 8023776:	e001      	b.n	802377c <__ieee754_pow+0x3c>
 8023778:	4598      	cmp	r8, r3
 802377a:	dc02      	bgt.n	8023782 <__ieee754_pow+0x42>
 802377c:	4598      	cmp	r8, r3
 802377e:	d10e      	bne.n	802379e <__ieee754_pow+0x5e>
 8023780:	b16a      	cbz	r2, 802379e <__ieee754_pow+0x5e>
 8023782:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8023786:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802378a:	ea54 030a 	orrs.w	r3, r4, sl
 802378e:	f000 84a6 	beq.w	80240de <__ieee754_pow+0x99e>
 8023792:	486e      	ldr	r0, [pc, #440]	; (802394c <__ieee754_pow+0x20c>)
 8023794:	b011      	add	sp, #68	; 0x44
 8023796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802379a:	f000 bded 	b.w	8024378 <nan>
 802379e:	2d00      	cmp	r5, #0
 80237a0:	da53      	bge.n	802384a <__ieee754_pow+0x10a>
 80237a2:	4b6b      	ldr	r3, [pc, #428]	; (8023950 <__ieee754_pow+0x210>)
 80237a4:	4598      	cmp	r8, r3
 80237a6:	dc4d      	bgt.n	8023844 <__ieee754_pow+0x104>
 80237a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80237ac:	4598      	cmp	r8, r3
 80237ae:	dd4c      	ble.n	802384a <__ieee754_pow+0x10a>
 80237b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80237b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80237b8:	2b14      	cmp	r3, #20
 80237ba:	dd26      	ble.n	802380a <__ieee754_pow+0xca>
 80237bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80237c0:	fa22 f103 	lsr.w	r1, r2, r3
 80237c4:	fa01 f303 	lsl.w	r3, r1, r3
 80237c8:	429a      	cmp	r2, r3
 80237ca:	d13e      	bne.n	802384a <__ieee754_pow+0x10a>
 80237cc:	f001 0101 	and.w	r1, r1, #1
 80237d0:	f1c1 0b02 	rsb	fp, r1, #2
 80237d4:	2a00      	cmp	r2, #0
 80237d6:	d15b      	bne.n	8023890 <__ieee754_pow+0x150>
 80237d8:	4b5b      	ldr	r3, [pc, #364]	; (8023948 <__ieee754_pow+0x208>)
 80237da:	4598      	cmp	r8, r3
 80237dc:	d124      	bne.n	8023828 <__ieee754_pow+0xe8>
 80237de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80237e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80237e6:	ea53 030a 	orrs.w	r3, r3, sl
 80237ea:	f000 8478 	beq.w	80240de <__ieee754_pow+0x99e>
 80237ee:	4b59      	ldr	r3, [pc, #356]	; (8023954 <__ieee754_pow+0x214>)
 80237f0:	429c      	cmp	r4, r3
 80237f2:	dd2d      	ble.n	8023850 <__ieee754_pow+0x110>
 80237f4:	f1b9 0f00 	cmp.w	r9, #0
 80237f8:	f280 8475 	bge.w	80240e6 <__ieee754_pow+0x9a6>
 80237fc:	2000      	movs	r0, #0
 80237fe:	2100      	movs	r1, #0
 8023800:	ec41 0b10 	vmov	d0, r0, r1
 8023804:	b011      	add	sp, #68	; 0x44
 8023806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802380a:	2a00      	cmp	r2, #0
 802380c:	d13e      	bne.n	802388c <__ieee754_pow+0x14c>
 802380e:	f1c3 0314 	rsb	r3, r3, #20
 8023812:	fa48 f103 	asr.w	r1, r8, r3
 8023816:	fa01 f303 	lsl.w	r3, r1, r3
 802381a:	4598      	cmp	r8, r3
 802381c:	f040 846b 	bne.w	80240f6 <__ieee754_pow+0x9b6>
 8023820:	f001 0101 	and.w	r1, r1, #1
 8023824:	f1c1 0b02 	rsb	fp, r1, #2
 8023828:	4b4b      	ldr	r3, [pc, #300]	; (8023958 <__ieee754_pow+0x218>)
 802382a:	4598      	cmp	r8, r3
 802382c:	d118      	bne.n	8023860 <__ieee754_pow+0x120>
 802382e:	f1b9 0f00 	cmp.w	r9, #0
 8023832:	f280 845c 	bge.w	80240ee <__ieee754_pow+0x9ae>
 8023836:	4948      	ldr	r1, [pc, #288]	; (8023958 <__ieee754_pow+0x218>)
 8023838:	4632      	mov	r2, r6
 802383a:	463b      	mov	r3, r7
 802383c:	2000      	movs	r0, #0
 802383e:	f7dd f819 	bl	8000874 <__aeabi_ddiv>
 8023842:	e7dd      	b.n	8023800 <__ieee754_pow+0xc0>
 8023844:	f04f 0b02 	mov.w	fp, #2
 8023848:	e7c4      	b.n	80237d4 <__ieee754_pow+0x94>
 802384a:	f04f 0b00 	mov.w	fp, #0
 802384e:	e7c1      	b.n	80237d4 <__ieee754_pow+0x94>
 8023850:	f1b9 0f00 	cmp.w	r9, #0
 8023854:	dad2      	bge.n	80237fc <__ieee754_pow+0xbc>
 8023856:	e89d 0009 	ldmia.w	sp, {r0, r3}
 802385a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802385e:	e7cf      	b.n	8023800 <__ieee754_pow+0xc0>
 8023860:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8023864:	d106      	bne.n	8023874 <__ieee754_pow+0x134>
 8023866:	4632      	mov	r2, r6
 8023868:	463b      	mov	r3, r7
 802386a:	4610      	mov	r0, r2
 802386c:	4619      	mov	r1, r3
 802386e:	f7dc fed7 	bl	8000620 <__aeabi_dmul>
 8023872:	e7c5      	b.n	8023800 <__ieee754_pow+0xc0>
 8023874:	4b39      	ldr	r3, [pc, #228]	; (802395c <__ieee754_pow+0x21c>)
 8023876:	4599      	cmp	r9, r3
 8023878:	d10a      	bne.n	8023890 <__ieee754_pow+0x150>
 802387a:	2d00      	cmp	r5, #0
 802387c:	db08      	blt.n	8023890 <__ieee754_pow+0x150>
 802387e:	ec47 6b10 	vmov	d0, r6, r7
 8023882:	b011      	add	sp, #68	; 0x44
 8023884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023888:	f000 bc6c 	b.w	8024164 <__ieee754_sqrt>
 802388c:	f04f 0b00 	mov.w	fp, #0
 8023890:	ec47 6b10 	vmov	d0, r6, r7
 8023894:	f000 fd5d 	bl	8024352 <fabs>
 8023898:	ec51 0b10 	vmov	r0, r1, d0
 802389c:	f1ba 0f00 	cmp.w	sl, #0
 80238a0:	d127      	bne.n	80238f2 <__ieee754_pow+0x1b2>
 80238a2:	b124      	cbz	r4, 80238ae <__ieee754_pow+0x16e>
 80238a4:	4b2c      	ldr	r3, [pc, #176]	; (8023958 <__ieee754_pow+0x218>)
 80238a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80238aa:	429a      	cmp	r2, r3
 80238ac:	d121      	bne.n	80238f2 <__ieee754_pow+0x1b2>
 80238ae:	f1b9 0f00 	cmp.w	r9, #0
 80238b2:	da05      	bge.n	80238c0 <__ieee754_pow+0x180>
 80238b4:	4602      	mov	r2, r0
 80238b6:	460b      	mov	r3, r1
 80238b8:	2000      	movs	r0, #0
 80238ba:	4927      	ldr	r1, [pc, #156]	; (8023958 <__ieee754_pow+0x218>)
 80238bc:	f7dc ffda 	bl	8000874 <__aeabi_ddiv>
 80238c0:	2d00      	cmp	r5, #0
 80238c2:	da9d      	bge.n	8023800 <__ieee754_pow+0xc0>
 80238c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80238c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80238cc:	ea54 030b 	orrs.w	r3, r4, fp
 80238d0:	d108      	bne.n	80238e4 <__ieee754_pow+0x1a4>
 80238d2:	4602      	mov	r2, r0
 80238d4:	460b      	mov	r3, r1
 80238d6:	4610      	mov	r0, r2
 80238d8:	4619      	mov	r1, r3
 80238da:	f7dc fced 	bl	80002b8 <__aeabi_dsub>
 80238de:	4602      	mov	r2, r0
 80238e0:	460b      	mov	r3, r1
 80238e2:	e7ac      	b.n	802383e <__ieee754_pow+0xfe>
 80238e4:	f1bb 0f01 	cmp.w	fp, #1
 80238e8:	d18a      	bne.n	8023800 <__ieee754_pow+0xc0>
 80238ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80238ee:	4619      	mov	r1, r3
 80238f0:	e786      	b.n	8023800 <__ieee754_pow+0xc0>
 80238f2:	0fed      	lsrs	r5, r5, #31
 80238f4:	1e6b      	subs	r3, r5, #1
 80238f6:	930d      	str	r3, [sp, #52]	; 0x34
 80238f8:	ea5b 0303 	orrs.w	r3, fp, r3
 80238fc:	d102      	bne.n	8023904 <__ieee754_pow+0x1c4>
 80238fe:	4632      	mov	r2, r6
 8023900:	463b      	mov	r3, r7
 8023902:	e7e8      	b.n	80238d6 <__ieee754_pow+0x196>
 8023904:	4b16      	ldr	r3, [pc, #88]	; (8023960 <__ieee754_pow+0x220>)
 8023906:	4598      	cmp	r8, r3
 8023908:	f340 80fe 	ble.w	8023b08 <__ieee754_pow+0x3c8>
 802390c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8023910:	4598      	cmp	r8, r3
 8023912:	dd0a      	ble.n	802392a <__ieee754_pow+0x1ea>
 8023914:	4b0f      	ldr	r3, [pc, #60]	; (8023954 <__ieee754_pow+0x214>)
 8023916:	429c      	cmp	r4, r3
 8023918:	dc0d      	bgt.n	8023936 <__ieee754_pow+0x1f6>
 802391a:	f1b9 0f00 	cmp.w	r9, #0
 802391e:	f6bf af6d 	bge.w	80237fc <__ieee754_pow+0xbc>
 8023922:	a307      	add	r3, pc, #28	; (adr r3, 8023940 <__ieee754_pow+0x200>)
 8023924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023928:	e79f      	b.n	802386a <__ieee754_pow+0x12a>
 802392a:	4b0e      	ldr	r3, [pc, #56]	; (8023964 <__ieee754_pow+0x224>)
 802392c:	429c      	cmp	r4, r3
 802392e:	ddf4      	ble.n	802391a <__ieee754_pow+0x1da>
 8023930:	4b09      	ldr	r3, [pc, #36]	; (8023958 <__ieee754_pow+0x218>)
 8023932:	429c      	cmp	r4, r3
 8023934:	dd18      	ble.n	8023968 <__ieee754_pow+0x228>
 8023936:	f1b9 0f00 	cmp.w	r9, #0
 802393a:	dcf2      	bgt.n	8023922 <__ieee754_pow+0x1e2>
 802393c:	e75e      	b.n	80237fc <__ieee754_pow+0xbc>
 802393e:	bf00      	nop
 8023940:	8800759c 	.word	0x8800759c
 8023944:	7e37e43c 	.word	0x7e37e43c
 8023948:	7ff00000 	.word	0x7ff00000
 802394c:	080314b9 	.word	0x080314b9
 8023950:	433fffff 	.word	0x433fffff
 8023954:	3fefffff 	.word	0x3fefffff
 8023958:	3ff00000 	.word	0x3ff00000
 802395c:	3fe00000 	.word	0x3fe00000
 8023960:	41e00000 	.word	0x41e00000
 8023964:	3feffffe 	.word	0x3feffffe
 8023968:	2200      	movs	r2, #0
 802396a:	4b63      	ldr	r3, [pc, #396]	; (8023af8 <__ieee754_pow+0x3b8>)
 802396c:	f7dc fca4 	bl	80002b8 <__aeabi_dsub>
 8023970:	a355      	add	r3, pc, #340	; (adr r3, 8023ac8 <__ieee754_pow+0x388>)
 8023972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023976:	4604      	mov	r4, r0
 8023978:	460d      	mov	r5, r1
 802397a:	f7dc fe51 	bl	8000620 <__aeabi_dmul>
 802397e:	a354      	add	r3, pc, #336	; (adr r3, 8023ad0 <__ieee754_pow+0x390>)
 8023980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023984:	4606      	mov	r6, r0
 8023986:	460f      	mov	r7, r1
 8023988:	4620      	mov	r0, r4
 802398a:	4629      	mov	r1, r5
 802398c:	f7dc fe48 	bl	8000620 <__aeabi_dmul>
 8023990:	2200      	movs	r2, #0
 8023992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023996:	4b59      	ldr	r3, [pc, #356]	; (8023afc <__ieee754_pow+0x3bc>)
 8023998:	4620      	mov	r0, r4
 802399a:	4629      	mov	r1, r5
 802399c:	f7dc fe40 	bl	8000620 <__aeabi_dmul>
 80239a0:	4602      	mov	r2, r0
 80239a2:	460b      	mov	r3, r1
 80239a4:	a14c      	add	r1, pc, #304	; (adr r1, 8023ad8 <__ieee754_pow+0x398>)
 80239a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239aa:	f7dc fc85 	bl	80002b8 <__aeabi_dsub>
 80239ae:	4622      	mov	r2, r4
 80239b0:	462b      	mov	r3, r5
 80239b2:	f7dc fe35 	bl	8000620 <__aeabi_dmul>
 80239b6:	4602      	mov	r2, r0
 80239b8:	460b      	mov	r3, r1
 80239ba:	2000      	movs	r0, #0
 80239bc:	4950      	ldr	r1, [pc, #320]	; (8023b00 <__ieee754_pow+0x3c0>)
 80239be:	f7dc fc7b 	bl	80002b8 <__aeabi_dsub>
 80239c2:	4622      	mov	r2, r4
 80239c4:	462b      	mov	r3, r5
 80239c6:	4680      	mov	r8, r0
 80239c8:	4689      	mov	r9, r1
 80239ca:	4620      	mov	r0, r4
 80239cc:	4629      	mov	r1, r5
 80239ce:	f7dc fe27 	bl	8000620 <__aeabi_dmul>
 80239d2:	4602      	mov	r2, r0
 80239d4:	460b      	mov	r3, r1
 80239d6:	4640      	mov	r0, r8
 80239d8:	4649      	mov	r1, r9
 80239da:	f7dc fe21 	bl	8000620 <__aeabi_dmul>
 80239de:	a340      	add	r3, pc, #256	; (adr r3, 8023ae0 <__ieee754_pow+0x3a0>)
 80239e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239e4:	f7dc fe1c 	bl	8000620 <__aeabi_dmul>
 80239e8:	4602      	mov	r2, r0
 80239ea:	460b      	mov	r3, r1
 80239ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80239f0:	f7dc fc62 	bl	80002b8 <__aeabi_dsub>
 80239f4:	4602      	mov	r2, r0
 80239f6:	460b      	mov	r3, r1
 80239f8:	4604      	mov	r4, r0
 80239fa:	460d      	mov	r5, r1
 80239fc:	4630      	mov	r0, r6
 80239fe:	4639      	mov	r1, r7
 8023a00:	f7dc fc5c 	bl	80002bc <__adddf3>
 8023a04:	2000      	movs	r0, #0
 8023a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023a0a:	4632      	mov	r2, r6
 8023a0c:	463b      	mov	r3, r7
 8023a0e:	f7dc fc53 	bl	80002b8 <__aeabi_dsub>
 8023a12:	4602      	mov	r2, r0
 8023a14:	460b      	mov	r3, r1
 8023a16:	4620      	mov	r0, r4
 8023a18:	4629      	mov	r1, r5
 8023a1a:	f7dc fc4d 	bl	80002b8 <__aeabi_dsub>
 8023a1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023a20:	f10b 33ff 	add.w	r3, fp, #4294967295
 8023a24:	4313      	orrs	r3, r2
 8023a26:	4606      	mov	r6, r0
 8023a28:	460f      	mov	r7, r1
 8023a2a:	f040 81eb 	bne.w	8023e04 <__ieee754_pow+0x6c4>
 8023a2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8023ae8 <__ieee754_pow+0x3a8>
 8023a32:	e9dd 4500 	ldrd	r4, r5, [sp]
 8023a36:	2400      	movs	r4, #0
 8023a38:	4622      	mov	r2, r4
 8023a3a:	462b      	mov	r3, r5
 8023a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023a40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023a44:	f7dc fc38 	bl	80002b8 <__aeabi_dsub>
 8023a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023a4c:	f7dc fde8 	bl	8000620 <__aeabi_dmul>
 8023a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023a54:	4680      	mov	r8, r0
 8023a56:	4689      	mov	r9, r1
 8023a58:	4630      	mov	r0, r6
 8023a5a:	4639      	mov	r1, r7
 8023a5c:	f7dc fde0 	bl	8000620 <__aeabi_dmul>
 8023a60:	4602      	mov	r2, r0
 8023a62:	460b      	mov	r3, r1
 8023a64:	4640      	mov	r0, r8
 8023a66:	4649      	mov	r1, r9
 8023a68:	f7dc fc28 	bl	80002bc <__adddf3>
 8023a6c:	4622      	mov	r2, r4
 8023a6e:	462b      	mov	r3, r5
 8023a70:	4680      	mov	r8, r0
 8023a72:	4689      	mov	r9, r1
 8023a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023a78:	f7dc fdd2 	bl	8000620 <__aeabi_dmul>
 8023a7c:	460b      	mov	r3, r1
 8023a7e:	4604      	mov	r4, r0
 8023a80:	460d      	mov	r5, r1
 8023a82:	4602      	mov	r2, r0
 8023a84:	4649      	mov	r1, r9
 8023a86:	4640      	mov	r0, r8
 8023a88:	e9cd 4500 	strd	r4, r5, [sp]
 8023a8c:	f7dc fc16 	bl	80002bc <__adddf3>
 8023a90:	4b1c      	ldr	r3, [pc, #112]	; (8023b04 <__ieee754_pow+0x3c4>)
 8023a92:	4299      	cmp	r1, r3
 8023a94:	4606      	mov	r6, r0
 8023a96:	460f      	mov	r7, r1
 8023a98:	468b      	mov	fp, r1
 8023a9a:	f340 82f7 	ble.w	802408c <__ieee754_pow+0x94c>
 8023a9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8023aa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8023aa6:	4303      	orrs	r3, r0
 8023aa8:	f000 81ea 	beq.w	8023e80 <__ieee754_pow+0x740>
 8023aac:	a310      	add	r3, pc, #64	; (adr r3, 8023af0 <__ieee754_pow+0x3b0>)
 8023aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ab6:	f7dc fdb3 	bl	8000620 <__aeabi_dmul>
 8023aba:	a30d      	add	r3, pc, #52	; (adr r3, 8023af0 <__ieee754_pow+0x3b0>)
 8023abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ac0:	e6d5      	b.n	802386e <__ieee754_pow+0x12e>
 8023ac2:	bf00      	nop
 8023ac4:	f3af 8000 	nop.w
 8023ac8:	60000000 	.word	0x60000000
 8023acc:	3ff71547 	.word	0x3ff71547
 8023ad0:	f85ddf44 	.word	0xf85ddf44
 8023ad4:	3e54ae0b 	.word	0x3e54ae0b
 8023ad8:	55555555 	.word	0x55555555
 8023adc:	3fd55555 	.word	0x3fd55555
 8023ae0:	652b82fe 	.word	0x652b82fe
 8023ae4:	3ff71547 	.word	0x3ff71547
 8023ae8:	00000000 	.word	0x00000000
 8023aec:	bff00000 	.word	0xbff00000
 8023af0:	8800759c 	.word	0x8800759c
 8023af4:	7e37e43c 	.word	0x7e37e43c
 8023af8:	3ff00000 	.word	0x3ff00000
 8023afc:	3fd00000 	.word	0x3fd00000
 8023b00:	3fe00000 	.word	0x3fe00000
 8023b04:	408fffff 	.word	0x408fffff
 8023b08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8023b0c:	f04f 0200 	mov.w	r2, #0
 8023b10:	da05      	bge.n	8023b1e <__ieee754_pow+0x3de>
 8023b12:	4bd3      	ldr	r3, [pc, #844]	; (8023e60 <__ieee754_pow+0x720>)
 8023b14:	f7dc fd84 	bl	8000620 <__aeabi_dmul>
 8023b18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8023b1c:	460c      	mov	r4, r1
 8023b1e:	1523      	asrs	r3, r4, #20
 8023b20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023b24:	4413      	add	r3, r2
 8023b26:	9307      	str	r3, [sp, #28]
 8023b28:	4bce      	ldr	r3, [pc, #824]	; (8023e64 <__ieee754_pow+0x724>)
 8023b2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8023b2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8023b32:	429c      	cmp	r4, r3
 8023b34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8023b38:	dd08      	ble.n	8023b4c <__ieee754_pow+0x40c>
 8023b3a:	4bcb      	ldr	r3, [pc, #812]	; (8023e68 <__ieee754_pow+0x728>)
 8023b3c:	429c      	cmp	r4, r3
 8023b3e:	f340 815e 	ble.w	8023dfe <__ieee754_pow+0x6be>
 8023b42:	9b07      	ldr	r3, [sp, #28]
 8023b44:	3301      	adds	r3, #1
 8023b46:	9307      	str	r3, [sp, #28]
 8023b48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8023b4c:	f04f 0a00 	mov.w	sl, #0
 8023b50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8023b54:	930c      	str	r3, [sp, #48]	; 0x30
 8023b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023b58:	4bc4      	ldr	r3, [pc, #784]	; (8023e6c <__ieee754_pow+0x72c>)
 8023b5a:	4413      	add	r3, r2
 8023b5c:	ed93 7b00 	vldr	d7, [r3]
 8023b60:	4629      	mov	r1, r5
 8023b62:	ec53 2b17 	vmov	r2, r3, d7
 8023b66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8023b6a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023b6e:	f7dc fba3 	bl	80002b8 <__aeabi_dsub>
 8023b72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023b76:	4606      	mov	r6, r0
 8023b78:	460f      	mov	r7, r1
 8023b7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023b7e:	f7dc fb9d 	bl	80002bc <__adddf3>
 8023b82:	4602      	mov	r2, r0
 8023b84:	460b      	mov	r3, r1
 8023b86:	2000      	movs	r0, #0
 8023b88:	49b9      	ldr	r1, [pc, #740]	; (8023e70 <__ieee754_pow+0x730>)
 8023b8a:	f7dc fe73 	bl	8000874 <__aeabi_ddiv>
 8023b8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8023b92:	4602      	mov	r2, r0
 8023b94:	460b      	mov	r3, r1
 8023b96:	4630      	mov	r0, r6
 8023b98:	4639      	mov	r1, r7
 8023b9a:	f7dc fd41 	bl	8000620 <__aeabi_dmul>
 8023b9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023ba2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8023ba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8023baa:	2300      	movs	r3, #0
 8023bac:	9302      	str	r3, [sp, #8]
 8023bae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8023bb2:	106d      	asrs	r5, r5, #1
 8023bb4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8023bb8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023bbc:	2200      	movs	r2, #0
 8023bbe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8023bc2:	4640      	mov	r0, r8
 8023bc4:	4649      	mov	r1, r9
 8023bc6:	4614      	mov	r4, r2
 8023bc8:	461d      	mov	r5, r3
 8023bca:	f7dc fd29 	bl	8000620 <__aeabi_dmul>
 8023bce:	4602      	mov	r2, r0
 8023bd0:	460b      	mov	r3, r1
 8023bd2:	4630      	mov	r0, r6
 8023bd4:	4639      	mov	r1, r7
 8023bd6:	f7dc fb6f 	bl	80002b8 <__aeabi_dsub>
 8023bda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023bde:	4606      	mov	r6, r0
 8023be0:	460f      	mov	r7, r1
 8023be2:	4620      	mov	r0, r4
 8023be4:	4629      	mov	r1, r5
 8023be6:	f7dc fb67 	bl	80002b8 <__aeabi_dsub>
 8023bea:	4602      	mov	r2, r0
 8023bec:	460b      	mov	r3, r1
 8023bee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023bf2:	f7dc fb61 	bl	80002b8 <__aeabi_dsub>
 8023bf6:	4642      	mov	r2, r8
 8023bf8:	464b      	mov	r3, r9
 8023bfa:	f7dc fd11 	bl	8000620 <__aeabi_dmul>
 8023bfe:	4602      	mov	r2, r0
 8023c00:	460b      	mov	r3, r1
 8023c02:	4630      	mov	r0, r6
 8023c04:	4639      	mov	r1, r7
 8023c06:	f7dc fb57 	bl	80002b8 <__aeabi_dsub>
 8023c0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8023c0e:	f7dc fd07 	bl	8000620 <__aeabi_dmul>
 8023c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023c16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023c1a:	4610      	mov	r0, r2
 8023c1c:	4619      	mov	r1, r3
 8023c1e:	f7dc fcff 	bl	8000620 <__aeabi_dmul>
 8023c22:	a37b      	add	r3, pc, #492	; (adr r3, 8023e10 <__ieee754_pow+0x6d0>)
 8023c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c28:	4604      	mov	r4, r0
 8023c2a:	460d      	mov	r5, r1
 8023c2c:	f7dc fcf8 	bl	8000620 <__aeabi_dmul>
 8023c30:	a379      	add	r3, pc, #484	; (adr r3, 8023e18 <__ieee754_pow+0x6d8>)
 8023c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c36:	f7dc fb41 	bl	80002bc <__adddf3>
 8023c3a:	4622      	mov	r2, r4
 8023c3c:	462b      	mov	r3, r5
 8023c3e:	f7dc fcef 	bl	8000620 <__aeabi_dmul>
 8023c42:	a377      	add	r3, pc, #476	; (adr r3, 8023e20 <__ieee754_pow+0x6e0>)
 8023c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c48:	f7dc fb38 	bl	80002bc <__adddf3>
 8023c4c:	4622      	mov	r2, r4
 8023c4e:	462b      	mov	r3, r5
 8023c50:	f7dc fce6 	bl	8000620 <__aeabi_dmul>
 8023c54:	a374      	add	r3, pc, #464	; (adr r3, 8023e28 <__ieee754_pow+0x6e8>)
 8023c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c5a:	f7dc fb2f 	bl	80002bc <__adddf3>
 8023c5e:	4622      	mov	r2, r4
 8023c60:	462b      	mov	r3, r5
 8023c62:	f7dc fcdd 	bl	8000620 <__aeabi_dmul>
 8023c66:	a372      	add	r3, pc, #456	; (adr r3, 8023e30 <__ieee754_pow+0x6f0>)
 8023c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c6c:	f7dc fb26 	bl	80002bc <__adddf3>
 8023c70:	4622      	mov	r2, r4
 8023c72:	462b      	mov	r3, r5
 8023c74:	f7dc fcd4 	bl	8000620 <__aeabi_dmul>
 8023c78:	a36f      	add	r3, pc, #444	; (adr r3, 8023e38 <__ieee754_pow+0x6f8>)
 8023c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c7e:	f7dc fb1d 	bl	80002bc <__adddf3>
 8023c82:	4622      	mov	r2, r4
 8023c84:	4606      	mov	r6, r0
 8023c86:	460f      	mov	r7, r1
 8023c88:	462b      	mov	r3, r5
 8023c8a:	4620      	mov	r0, r4
 8023c8c:	4629      	mov	r1, r5
 8023c8e:	f7dc fcc7 	bl	8000620 <__aeabi_dmul>
 8023c92:	4602      	mov	r2, r0
 8023c94:	460b      	mov	r3, r1
 8023c96:	4630      	mov	r0, r6
 8023c98:	4639      	mov	r1, r7
 8023c9a:	f7dc fcc1 	bl	8000620 <__aeabi_dmul>
 8023c9e:	4642      	mov	r2, r8
 8023ca0:	4604      	mov	r4, r0
 8023ca2:	460d      	mov	r5, r1
 8023ca4:	464b      	mov	r3, r9
 8023ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023caa:	f7dc fb07 	bl	80002bc <__adddf3>
 8023cae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8023cb2:	f7dc fcb5 	bl	8000620 <__aeabi_dmul>
 8023cb6:	4622      	mov	r2, r4
 8023cb8:	462b      	mov	r3, r5
 8023cba:	f7dc faff 	bl	80002bc <__adddf3>
 8023cbe:	4642      	mov	r2, r8
 8023cc0:	4606      	mov	r6, r0
 8023cc2:	460f      	mov	r7, r1
 8023cc4:	464b      	mov	r3, r9
 8023cc6:	4640      	mov	r0, r8
 8023cc8:	4649      	mov	r1, r9
 8023cca:	f7dc fca9 	bl	8000620 <__aeabi_dmul>
 8023cce:	2200      	movs	r2, #0
 8023cd0:	4b68      	ldr	r3, [pc, #416]	; (8023e74 <__ieee754_pow+0x734>)
 8023cd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8023cd6:	f7dc faf1 	bl	80002bc <__adddf3>
 8023cda:	4632      	mov	r2, r6
 8023cdc:	463b      	mov	r3, r7
 8023cde:	f7dc faed 	bl	80002bc <__adddf3>
 8023ce2:	9802      	ldr	r0, [sp, #8]
 8023ce4:	460d      	mov	r5, r1
 8023ce6:	4604      	mov	r4, r0
 8023ce8:	4602      	mov	r2, r0
 8023cea:	460b      	mov	r3, r1
 8023cec:	4640      	mov	r0, r8
 8023cee:	4649      	mov	r1, r9
 8023cf0:	f7dc fc96 	bl	8000620 <__aeabi_dmul>
 8023cf4:	2200      	movs	r2, #0
 8023cf6:	4680      	mov	r8, r0
 8023cf8:	4689      	mov	r9, r1
 8023cfa:	4b5e      	ldr	r3, [pc, #376]	; (8023e74 <__ieee754_pow+0x734>)
 8023cfc:	4620      	mov	r0, r4
 8023cfe:	4629      	mov	r1, r5
 8023d00:	f7dc fada 	bl	80002b8 <__aeabi_dsub>
 8023d04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023d08:	f7dc fad6 	bl	80002b8 <__aeabi_dsub>
 8023d0c:	4602      	mov	r2, r0
 8023d0e:	460b      	mov	r3, r1
 8023d10:	4630      	mov	r0, r6
 8023d12:	4639      	mov	r1, r7
 8023d14:	f7dc fad0 	bl	80002b8 <__aeabi_dsub>
 8023d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023d1c:	f7dc fc80 	bl	8000620 <__aeabi_dmul>
 8023d20:	4622      	mov	r2, r4
 8023d22:	4606      	mov	r6, r0
 8023d24:	460f      	mov	r7, r1
 8023d26:	462b      	mov	r3, r5
 8023d28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023d2c:	f7dc fc78 	bl	8000620 <__aeabi_dmul>
 8023d30:	4602      	mov	r2, r0
 8023d32:	460b      	mov	r3, r1
 8023d34:	4630      	mov	r0, r6
 8023d36:	4639      	mov	r1, r7
 8023d38:	f7dc fac0 	bl	80002bc <__adddf3>
 8023d3c:	4606      	mov	r6, r0
 8023d3e:	460f      	mov	r7, r1
 8023d40:	4602      	mov	r2, r0
 8023d42:	460b      	mov	r3, r1
 8023d44:	4640      	mov	r0, r8
 8023d46:	4649      	mov	r1, r9
 8023d48:	f7dc fab8 	bl	80002bc <__adddf3>
 8023d4c:	9802      	ldr	r0, [sp, #8]
 8023d4e:	a33c      	add	r3, pc, #240	; (adr r3, 8023e40 <__ieee754_pow+0x700>)
 8023d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d54:	4604      	mov	r4, r0
 8023d56:	460d      	mov	r5, r1
 8023d58:	f7dc fc62 	bl	8000620 <__aeabi_dmul>
 8023d5c:	4642      	mov	r2, r8
 8023d5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023d62:	464b      	mov	r3, r9
 8023d64:	4620      	mov	r0, r4
 8023d66:	4629      	mov	r1, r5
 8023d68:	f7dc faa6 	bl	80002b8 <__aeabi_dsub>
 8023d6c:	4602      	mov	r2, r0
 8023d6e:	460b      	mov	r3, r1
 8023d70:	4630      	mov	r0, r6
 8023d72:	4639      	mov	r1, r7
 8023d74:	f7dc faa0 	bl	80002b8 <__aeabi_dsub>
 8023d78:	a333      	add	r3, pc, #204	; (adr r3, 8023e48 <__ieee754_pow+0x708>)
 8023d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d7e:	f7dc fc4f 	bl	8000620 <__aeabi_dmul>
 8023d82:	a333      	add	r3, pc, #204	; (adr r3, 8023e50 <__ieee754_pow+0x710>)
 8023d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d88:	4606      	mov	r6, r0
 8023d8a:	460f      	mov	r7, r1
 8023d8c:	4620      	mov	r0, r4
 8023d8e:	4629      	mov	r1, r5
 8023d90:	f7dc fc46 	bl	8000620 <__aeabi_dmul>
 8023d94:	4602      	mov	r2, r0
 8023d96:	460b      	mov	r3, r1
 8023d98:	4630      	mov	r0, r6
 8023d9a:	4639      	mov	r1, r7
 8023d9c:	f7dc fa8e 	bl	80002bc <__adddf3>
 8023da0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023da2:	4b35      	ldr	r3, [pc, #212]	; (8023e78 <__ieee754_pow+0x738>)
 8023da4:	4413      	add	r3, r2
 8023da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023daa:	f7dc fa87 	bl	80002bc <__adddf3>
 8023dae:	4604      	mov	r4, r0
 8023db0:	9807      	ldr	r0, [sp, #28]
 8023db2:	460d      	mov	r5, r1
 8023db4:	f7dc fbce 	bl	8000554 <__aeabi_i2d>
 8023db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023dba:	4b30      	ldr	r3, [pc, #192]	; (8023e7c <__ieee754_pow+0x73c>)
 8023dbc:	4413      	add	r3, r2
 8023dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023dc2:	4606      	mov	r6, r0
 8023dc4:	460f      	mov	r7, r1
 8023dc6:	4622      	mov	r2, r4
 8023dc8:	462b      	mov	r3, r5
 8023dca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023dce:	f7dc fa75 	bl	80002bc <__adddf3>
 8023dd2:	4642      	mov	r2, r8
 8023dd4:	464b      	mov	r3, r9
 8023dd6:	f7dc fa71 	bl	80002bc <__adddf3>
 8023dda:	4632      	mov	r2, r6
 8023ddc:	463b      	mov	r3, r7
 8023dde:	f7dc fa6d 	bl	80002bc <__adddf3>
 8023de2:	9802      	ldr	r0, [sp, #8]
 8023de4:	4632      	mov	r2, r6
 8023de6:	463b      	mov	r3, r7
 8023de8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023dec:	f7dc fa64 	bl	80002b8 <__aeabi_dsub>
 8023df0:	4642      	mov	r2, r8
 8023df2:	464b      	mov	r3, r9
 8023df4:	f7dc fa60 	bl	80002b8 <__aeabi_dsub>
 8023df8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8023dfc:	e607      	b.n	8023a0e <__ieee754_pow+0x2ce>
 8023dfe:	f04f 0a01 	mov.w	sl, #1
 8023e02:	e6a5      	b.n	8023b50 <__ieee754_pow+0x410>
 8023e04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8023e58 <__ieee754_pow+0x718>
 8023e08:	e613      	b.n	8023a32 <__ieee754_pow+0x2f2>
 8023e0a:	bf00      	nop
 8023e0c:	f3af 8000 	nop.w
 8023e10:	4a454eef 	.word	0x4a454eef
 8023e14:	3fca7e28 	.word	0x3fca7e28
 8023e18:	93c9db65 	.word	0x93c9db65
 8023e1c:	3fcd864a 	.word	0x3fcd864a
 8023e20:	a91d4101 	.word	0xa91d4101
 8023e24:	3fd17460 	.word	0x3fd17460
 8023e28:	518f264d 	.word	0x518f264d
 8023e2c:	3fd55555 	.word	0x3fd55555
 8023e30:	db6fabff 	.word	0xdb6fabff
 8023e34:	3fdb6db6 	.word	0x3fdb6db6
 8023e38:	33333303 	.word	0x33333303
 8023e3c:	3fe33333 	.word	0x3fe33333
 8023e40:	e0000000 	.word	0xe0000000
 8023e44:	3feec709 	.word	0x3feec709
 8023e48:	dc3a03fd 	.word	0xdc3a03fd
 8023e4c:	3feec709 	.word	0x3feec709
 8023e50:	145b01f5 	.word	0x145b01f5
 8023e54:	be3e2fe0 	.word	0xbe3e2fe0
 8023e58:	00000000 	.word	0x00000000
 8023e5c:	3ff00000 	.word	0x3ff00000
 8023e60:	43400000 	.word	0x43400000
 8023e64:	0003988e 	.word	0x0003988e
 8023e68:	000bb679 	.word	0x000bb679
 8023e6c:	08031868 	.word	0x08031868
 8023e70:	3ff00000 	.word	0x3ff00000
 8023e74:	40080000 	.word	0x40080000
 8023e78:	08031888 	.word	0x08031888
 8023e7c:	08031878 	.word	0x08031878
 8023e80:	a3b6      	add	r3, pc, #728	; (adr r3, 802415c <__ieee754_pow+0xa1c>)
 8023e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e86:	4640      	mov	r0, r8
 8023e88:	4649      	mov	r1, r9
 8023e8a:	f7dc fa17 	bl	80002bc <__adddf3>
 8023e8e:	4622      	mov	r2, r4
 8023e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023e94:	462b      	mov	r3, r5
 8023e96:	4630      	mov	r0, r6
 8023e98:	4639      	mov	r1, r7
 8023e9a:	f7dc fa0d 	bl	80002b8 <__aeabi_dsub>
 8023e9e:	4602      	mov	r2, r0
 8023ea0:	460b      	mov	r3, r1
 8023ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023ea6:	f7dc fe4b 	bl	8000b40 <__aeabi_dcmpgt>
 8023eaa:	2800      	cmp	r0, #0
 8023eac:	f47f adfe 	bne.w	8023aac <__ieee754_pow+0x36c>
 8023eb0:	4aa5      	ldr	r2, [pc, #660]	; (8024148 <__ieee754_pow+0xa08>)
 8023eb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023eb6:	4293      	cmp	r3, r2
 8023eb8:	f340 810c 	ble.w	80240d4 <__ieee754_pow+0x994>
 8023ebc:	151b      	asrs	r3, r3, #20
 8023ebe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023ec2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8023ec6:	fa4a f303 	asr.w	r3, sl, r3
 8023eca:	445b      	add	r3, fp
 8023ecc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023ed0:	4e9e      	ldr	r6, [pc, #632]	; (802414c <__ieee754_pow+0xa0c>)
 8023ed2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8023ed6:	4116      	asrs	r6, r2
 8023ed8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023edc:	2000      	movs	r0, #0
 8023ede:	ea23 0106 	bic.w	r1, r3, r6
 8023ee2:	f1c2 0214 	rsb	r2, r2, #20
 8023ee6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8023eea:	fa4a fa02 	asr.w	sl, sl, r2
 8023eee:	f1bb 0f00 	cmp.w	fp, #0
 8023ef2:	4602      	mov	r2, r0
 8023ef4:	460b      	mov	r3, r1
 8023ef6:	4620      	mov	r0, r4
 8023ef8:	4629      	mov	r1, r5
 8023efa:	bfb8      	it	lt
 8023efc:	f1ca 0a00 	rsblt	sl, sl, #0
 8023f00:	f7dc f9da 	bl	80002b8 <__aeabi_dsub>
 8023f04:	e9cd 0100 	strd	r0, r1, [sp]
 8023f08:	4642      	mov	r2, r8
 8023f0a:	464b      	mov	r3, r9
 8023f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023f10:	f7dc f9d4 	bl	80002bc <__adddf3>
 8023f14:	2000      	movs	r0, #0
 8023f16:	a37a      	add	r3, pc, #488	; (adr r3, 8024100 <__ieee754_pow+0x9c0>)
 8023f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f1c:	4604      	mov	r4, r0
 8023f1e:	460d      	mov	r5, r1
 8023f20:	f7dc fb7e 	bl	8000620 <__aeabi_dmul>
 8023f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023f28:	4606      	mov	r6, r0
 8023f2a:	460f      	mov	r7, r1
 8023f2c:	4620      	mov	r0, r4
 8023f2e:	4629      	mov	r1, r5
 8023f30:	f7dc f9c2 	bl	80002b8 <__aeabi_dsub>
 8023f34:	4602      	mov	r2, r0
 8023f36:	460b      	mov	r3, r1
 8023f38:	4640      	mov	r0, r8
 8023f3a:	4649      	mov	r1, r9
 8023f3c:	f7dc f9bc 	bl	80002b8 <__aeabi_dsub>
 8023f40:	a371      	add	r3, pc, #452	; (adr r3, 8024108 <__ieee754_pow+0x9c8>)
 8023f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f46:	f7dc fb6b 	bl	8000620 <__aeabi_dmul>
 8023f4a:	a371      	add	r3, pc, #452	; (adr r3, 8024110 <__ieee754_pow+0x9d0>)
 8023f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f50:	4680      	mov	r8, r0
 8023f52:	4689      	mov	r9, r1
 8023f54:	4620      	mov	r0, r4
 8023f56:	4629      	mov	r1, r5
 8023f58:	f7dc fb62 	bl	8000620 <__aeabi_dmul>
 8023f5c:	4602      	mov	r2, r0
 8023f5e:	460b      	mov	r3, r1
 8023f60:	4640      	mov	r0, r8
 8023f62:	4649      	mov	r1, r9
 8023f64:	f7dc f9aa 	bl	80002bc <__adddf3>
 8023f68:	4604      	mov	r4, r0
 8023f6a:	460d      	mov	r5, r1
 8023f6c:	4602      	mov	r2, r0
 8023f6e:	460b      	mov	r3, r1
 8023f70:	4630      	mov	r0, r6
 8023f72:	4639      	mov	r1, r7
 8023f74:	f7dc f9a2 	bl	80002bc <__adddf3>
 8023f78:	4632      	mov	r2, r6
 8023f7a:	463b      	mov	r3, r7
 8023f7c:	4680      	mov	r8, r0
 8023f7e:	4689      	mov	r9, r1
 8023f80:	f7dc f99a 	bl	80002b8 <__aeabi_dsub>
 8023f84:	4602      	mov	r2, r0
 8023f86:	460b      	mov	r3, r1
 8023f88:	4620      	mov	r0, r4
 8023f8a:	4629      	mov	r1, r5
 8023f8c:	f7dc f994 	bl	80002b8 <__aeabi_dsub>
 8023f90:	4642      	mov	r2, r8
 8023f92:	4606      	mov	r6, r0
 8023f94:	460f      	mov	r7, r1
 8023f96:	464b      	mov	r3, r9
 8023f98:	4640      	mov	r0, r8
 8023f9a:	4649      	mov	r1, r9
 8023f9c:	f7dc fb40 	bl	8000620 <__aeabi_dmul>
 8023fa0:	a35d      	add	r3, pc, #372	; (adr r3, 8024118 <__ieee754_pow+0x9d8>)
 8023fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fa6:	4604      	mov	r4, r0
 8023fa8:	460d      	mov	r5, r1
 8023faa:	f7dc fb39 	bl	8000620 <__aeabi_dmul>
 8023fae:	a35c      	add	r3, pc, #368	; (adr r3, 8024120 <__ieee754_pow+0x9e0>)
 8023fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fb4:	f7dc f980 	bl	80002b8 <__aeabi_dsub>
 8023fb8:	4622      	mov	r2, r4
 8023fba:	462b      	mov	r3, r5
 8023fbc:	f7dc fb30 	bl	8000620 <__aeabi_dmul>
 8023fc0:	a359      	add	r3, pc, #356	; (adr r3, 8024128 <__ieee754_pow+0x9e8>)
 8023fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fc6:	f7dc f979 	bl	80002bc <__adddf3>
 8023fca:	4622      	mov	r2, r4
 8023fcc:	462b      	mov	r3, r5
 8023fce:	f7dc fb27 	bl	8000620 <__aeabi_dmul>
 8023fd2:	a357      	add	r3, pc, #348	; (adr r3, 8024130 <__ieee754_pow+0x9f0>)
 8023fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fd8:	f7dc f96e 	bl	80002b8 <__aeabi_dsub>
 8023fdc:	4622      	mov	r2, r4
 8023fde:	462b      	mov	r3, r5
 8023fe0:	f7dc fb1e 	bl	8000620 <__aeabi_dmul>
 8023fe4:	a354      	add	r3, pc, #336	; (adr r3, 8024138 <__ieee754_pow+0x9f8>)
 8023fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fea:	f7dc f967 	bl	80002bc <__adddf3>
 8023fee:	4622      	mov	r2, r4
 8023ff0:	462b      	mov	r3, r5
 8023ff2:	f7dc fb15 	bl	8000620 <__aeabi_dmul>
 8023ff6:	4602      	mov	r2, r0
 8023ff8:	460b      	mov	r3, r1
 8023ffa:	4640      	mov	r0, r8
 8023ffc:	4649      	mov	r1, r9
 8023ffe:	f7dc f95b 	bl	80002b8 <__aeabi_dsub>
 8024002:	4604      	mov	r4, r0
 8024004:	460d      	mov	r5, r1
 8024006:	4602      	mov	r2, r0
 8024008:	460b      	mov	r3, r1
 802400a:	4640      	mov	r0, r8
 802400c:	4649      	mov	r1, r9
 802400e:	f7dc fb07 	bl	8000620 <__aeabi_dmul>
 8024012:	2200      	movs	r2, #0
 8024014:	e9cd 0100 	strd	r0, r1, [sp]
 8024018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802401c:	4620      	mov	r0, r4
 802401e:	4629      	mov	r1, r5
 8024020:	f7dc f94a 	bl	80002b8 <__aeabi_dsub>
 8024024:	4602      	mov	r2, r0
 8024026:	460b      	mov	r3, r1
 8024028:	e9dd 0100 	ldrd	r0, r1, [sp]
 802402c:	f7dc fc22 	bl	8000874 <__aeabi_ddiv>
 8024030:	4632      	mov	r2, r6
 8024032:	4604      	mov	r4, r0
 8024034:	460d      	mov	r5, r1
 8024036:	463b      	mov	r3, r7
 8024038:	4640      	mov	r0, r8
 802403a:	4649      	mov	r1, r9
 802403c:	f7dc faf0 	bl	8000620 <__aeabi_dmul>
 8024040:	4632      	mov	r2, r6
 8024042:	463b      	mov	r3, r7
 8024044:	f7dc f93a 	bl	80002bc <__adddf3>
 8024048:	4602      	mov	r2, r0
 802404a:	460b      	mov	r3, r1
 802404c:	4620      	mov	r0, r4
 802404e:	4629      	mov	r1, r5
 8024050:	f7dc f932 	bl	80002b8 <__aeabi_dsub>
 8024054:	4642      	mov	r2, r8
 8024056:	464b      	mov	r3, r9
 8024058:	f7dc f92e 	bl	80002b8 <__aeabi_dsub>
 802405c:	4602      	mov	r2, r0
 802405e:	460b      	mov	r3, r1
 8024060:	2000      	movs	r0, #0
 8024062:	493b      	ldr	r1, [pc, #236]	; (8024150 <__ieee754_pow+0xa10>)
 8024064:	f7dc f928 	bl	80002b8 <__aeabi_dsub>
 8024068:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 802406c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8024070:	4602      	mov	r2, r0
 8024072:	460b      	mov	r3, r1
 8024074:	da31      	bge.n	80240da <__ieee754_pow+0x99a>
 8024076:	4650      	mov	r0, sl
 8024078:	ec43 2b10 	vmov	d0, r2, r3
 802407c:	f000 fa0c 	bl	8024498 <scalbn>
 8024080:	ec51 0b10 	vmov	r0, r1, d0
 8024084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024088:	f7ff bbf1 	b.w	802386e <__ieee754_pow+0x12e>
 802408c:	4b31      	ldr	r3, [pc, #196]	; (8024154 <__ieee754_pow+0xa14>)
 802408e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8024092:	429e      	cmp	r6, r3
 8024094:	f77f af0c 	ble.w	8023eb0 <__ieee754_pow+0x770>
 8024098:	4b2f      	ldr	r3, [pc, #188]	; (8024158 <__ieee754_pow+0xa18>)
 802409a:	440b      	add	r3, r1
 802409c:	4303      	orrs	r3, r0
 802409e:	d00b      	beq.n	80240b8 <__ieee754_pow+0x978>
 80240a0:	a327      	add	r3, pc, #156	; (adr r3, 8024140 <__ieee754_pow+0xa00>)
 80240a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80240aa:	f7dc fab9 	bl	8000620 <__aeabi_dmul>
 80240ae:	a324      	add	r3, pc, #144	; (adr r3, 8024140 <__ieee754_pow+0xa00>)
 80240b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240b4:	f7ff bbdb 	b.w	802386e <__ieee754_pow+0x12e>
 80240b8:	4622      	mov	r2, r4
 80240ba:	462b      	mov	r3, r5
 80240bc:	f7dc f8fc 	bl	80002b8 <__aeabi_dsub>
 80240c0:	4602      	mov	r2, r0
 80240c2:	460b      	mov	r3, r1
 80240c4:	4640      	mov	r0, r8
 80240c6:	4649      	mov	r1, r9
 80240c8:	f7dc fd26 	bl	8000b18 <__aeabi_dcmple>
 80240cc:	2800      	cmp	r0, #0
 80240ce:	f43f aeef 	beq.w	8023eb0 <__ieee754_pow+0x770>
 80240d2:	e7e5      	b.n	80240a0 <__ieee754_pow+0x960>
 80240d4:	f04f 0a00 	mov.w	sl, #0
 80240d8:	e716      	b.n	8023f08 <__ieee754_pow+0x7c8>
 80240da:	4621      	mov	r1, r4
 80240dc:	e7d2      	b.n	8024084 <__ieee754_pow+0x944>
 80240de:	2000      	movs	r0, #0
 80240e0:	491b      	ldr	r1, [pc, #108]	; (8024150 <__ieee754_pow+0xa10>)
 80240e2:	f7ff bb8d 	b.w	8023800 <__ieee754_pow+0xc0>
 80240e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80240ea:	f7ff bb89 	b.w	8023800 <__ieee754_pow+0xc0>
 80240ee:	4630      	mov	r0, r6
 80240f0:	4639      	mov	r1, r7
 80240f2:	f7ff bb85 	b.w	8023800 <__ieee754_pow+0xc0>
 80240f6:	4693      	mov	fp, r2
 80240f8:	f7ff bb96 	b.w	8023828 <__ieee754_pow+0xe8>
 80240fc:	f3af 8000 	nop.w
 8024100:	00000000 	.word	0x00000000
 8024104:	3fe62e43 	.word	0x3fe62e43
 8024108:	fefa39ef 	.word	0xfefa39ef
 802410c:	3fe62e42 	.word	0x3fe62e42
 8024110:	0ca86c39 	.word	0x0ca86c39
 8024114:	be205c61 	.word	0xbe205c61
 8024118:	72bea4d0 	.word	0x72bea4d0
 802411c:	3e663769 	.word	0x3e663769
 8024120:	c5d26bf1 	.word	0xc5d26bf1
 8024124:	3ebbbd41 	.word	0x3ebbbd41
 8024128:	af25de2c 	.word	0xaf25de2c
 802412c:	3f11566a 	.word	0x3f11566a
 8024130:	16bebd93 	.word	0x16bebd93
 8024134:	3f66c16c 	.word	0x3f66c16c
 8024138:	5555553e 	.word	0x5555553e
 802413c:	3fc55555 	.word	0x3fc55555
 8024140:	c2f8f359 	.word	0xc2f8f359
 8024144:	01a56e1f 	.word	0x01a56e1f
 8024148:	3fe00000 	.word	0x3fe00000
 802414c:	000fffff 	.word	0x000fffff
 8024150:	3ff00000 	.word	0x3ff00000
 8024154:	4090cbff 	.word	0x4090cbff
 8024158:	3f6f3400 	.word	0x3f6f3400
 802415c:	652b82fe 	.word	0x652b82fe
 8024160:	3c971547 	.word	0x3c971547

08024164 <__ieee754_sqrt>:
 8024164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024168:	ec55 4b10 	vmov	r4, r5, d0
 802416c:	4e54      	ldr	r6, [pc, #336]	; (80242c0 <__ieee754_sqrt+0x15c>)
 802416e:	43ae      	bics	r6, r5
 8024170:	ee10 0a10 	vmov	r0, s0
 8024174:	462b      	mov	r3, r5
 8024176:	462a      	mov	r2, r5
 8024178:	4621      	mov	r1, r4
 802417a:	d113      	bne.n	80241a4 <__ieee754_sqrt+0x40>
 802417c:	ee10 2a10 	vmov	r2, s0
 8024180:	462b      	mov	r3, r5
 8024182:	ee10 0a10 	vmov	r0, s0
 8024186:	4629      	mov	r1, r5
 8024188:	f7dc fa4a 	bl	8000620 <__aeabi_dmul>
 802418c:	4602      	mov	r2, r0
 802418e:	460b      	mov	r3, r1
 8024190:	4620      	mov	r0, r4
 8024192:	4629      	mov	r1, r5
 8024194:	f7dc f892 	bl	80002bc <__adddf3>
 8024198:	4604      	mov	r4, r0
 802419a:	460d      	mov	r5, r1
 802419c:	ec45 4b10 	vmov	d0, r4, r5
 80241a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241a4:	2d00      	cmp	r5, #0
 80241a6:	dc10      	bgt.n	80241ca <__ieee754_sqrt+0x66>
 80241a8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80241ac:	4330      	orrs	r0, r6
 80241ae:	d0f5      	beq.n	802419c <__ieee754_sqrt+0x38>
 80241b0:	b15d      	cbz	r5, 80241ca <__ieee754_sqrt+0x66>
 80241b2:	ee10 2a10 	vmov	r2, s0
 80241b6:	462b      	mov	r3, r5
 80241b8:	4620      	mov	r0, r4
 80241ba:	4629      	mov	r1, r5
 80241bc:	f7dc f87c 	bl	80002b8 <__aeabi_dsub>
 80241c0:	4602      	mov	r2, r0
 80241c2:	460b      	mov	r3, r1
 80241c4:	f7dc fb56 	bl	8000874 <__aeabi_ddiv>
 80241c8:	e7e6      	b.n	8024198 <__ieee754_sqrt+0x34>
 80241ca:	151b      	asrs	r3, r3, #20
 80241cc:	d10c      	bne.n	80241e8 <__ieee754_sqrt+0x84>
 80241ce:	2a00      	cmp	r2, #0
 80241d0:	d06d      	beq.n	80242ae <__ieee754_sqrt+0x14a>
 80241d2:	2000      	movs	r0, #0
 80241d4:	02d6      	lsls	r6, r2, #11
 80241d6:	d56e      	bpl.n	80242b6 <__ieee754_sqrt+0x152>
 80241d8:	1e44      	subs	r4, r0, #1
 80241da:	1b1b      	subs	r3, r3, r4
 80241dc:	f1c0 0420 	rsb	r4, r0, #32
 80241e0:	fa21 f404 	lsr.w	r4, r1, r4
 80241e4:	4322      	orrs	r2, r4
 80241e6:	4081      	lsls	r1, r0
 80241e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80241ec:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80241f0:	07dd      	lsls	r5, r3, #31
 80241f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80241f6:	bf42      	ittt	mi
 80241f8:	0052      	lslmi	r2, r2, #1
 80241fa:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80241fe:	0049      	lslmi	r1, r1, #1
 8024200:	1058      	asrs	r0, r3, #1
 8024202:	2500      	movs	r5, #0
 8024204:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8024208:	441a      	add	r2, r3
 802420a:	0049      	lsls	r1, r1, #1
 802420c:	2316      	movs	r3, #22
 802420e:	462c      	mov	r4, r5
 8024210:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8024214:	19a7      	adds	r7, r4, r6
 8024216:	4297      	cmp	r7, r2
 8024218:	bfde      	ittt	le
 802421a:	1bd2      	suble	r2, r2, r7
 802421c:	19bc      	addle	r4, r7, r6
 802421e:	19ad      	addle	r5, r5, r6
 8024220:	0052      	lsls	r2, r2, #1
 8024222:	3b01      	subs	r3, #1
 8024224:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8024228:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802422c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024230:	d1f0      	bne.n	8024214 <__ieee754_sqrt+0xb0>
 8024232:	f04f 0e20 	mov.w	lr, #32
 8024236:	469c      	mov	ip, r3
 8024238:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802423c:	42a2      	cmp	r2, r4
 802423e:	eb06 070c 	add.w	r7, r6, ip
 8024242:	dc02      	bgt.n	802424a <__ieee754_sqrt+0xe6>
 8024244:	d112      	bne.n	802426c <__ieee754_sqrt+0x108>
 8024246:	428f      	cmp	r7, r1
 8024248:	d810      	bhi.n	802426c <__ieee754_sqrt+0x108>
 802424a:	2f00      	cmp	r7, #0
 802424c:	eb07 0c06 	add.w	ip, r7, r6
 8024250:	da34      	bge.n	80242bc <__ieee754_sqrt+0x158>
 8024252:	f1bc 0f00 	cmp.w	ip, #0
 8024256:	db31      	blt.n	80242bc <__ieee754_sqrt+0x158>
 8024258:	f104 0801 	add.w	r8, r4, #1
 802425c:	1b12      	subs	r2, r2, r4
 802425e:	428f      	cmp	r7, r1
 8024260:	bf88      	it	hi
 8024262:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8024266:	1bc9      	subs	r1, r1, r7
 8024268:	4433      	add	r3, r6
 802426a:	4644      	mov	r4, r8
 802426c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8024270:	f1be 0e01 	subs.w	lr, lr, #1
 8024274:	443a      	add	r2, r7
 8024276:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802427a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802427e:	d1dd      	bne.n	802423c <__ieee754_sqrt+0xd8>
 8024280:	430a      	orrs	r2, r1
 8024282:	d006      	beq.n	8024292 <__ieee754_sqrt+0x12e>
 8024284:	1c5c      	adds	r4, r3, #1
 8024286:	bf13      	iteet	ne
 8024288:	3301      	addne	r3, #1
 802428a:	3501      	addeq	r5, #1
 802428c:	4673      	moveq	r3, lr
 802428e:	f023 0301 	bicne.w	r3, r3, #1
 8024292:	106a      	asrs	r2, r5, #1
 8024294:	085b      	lsrs	r3, r3, #1
 8024296:	07e9      	lsls	r1, r5, #31
 8024298:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 802429c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80242a0:	bf48      	it	mi
 80242a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80242a6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80242aa:	461c      	mov	r4, r3
 80242ac:	e776      	b.n	802419c <__ieee754_sqrt+0x38>
 80242ae:	0aca      	lsrs	r2, r1, #11
 80242b0:	3b15      	subs	r3, #21
 80242b2:	0549      	lsls	r1, r1, #21
 80242b4:	e78b      	b.n	80241ce <__ieee754_sqrt+0x6a>
 80242b6:	0052      	lsls	r2, r2, #1
 80242b8:	3001      	adds	r0, #1
 80242ba:	e78b      	b.n	80241d4 <__ieee754_sqrt+0x70>
 80242bc:	46a0      	mov	r8, r4
 80242be:	e7cd      	b.n	802425c <__ieee754_sqrt+0xf8>
 80242c0:	7ff00000 	.word	0x7ff00000

080242c4 <__ieee754_sqrtf>:
 80242c4:	ee10 2a10 	vmov	r2, s0
 80242c8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80242cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80242d0:	b570      	push	{r4, r5, r6, lr}
 80242d2:	d302      	bcc.n	80242da <__ieee754_sqrtf+0x16>
 80242d4:	eea0 0a00 	vfma.f32	s0, s0, s0
 80242d8:	bd70      	pop	{r4, r5, r6, pc}
 80242da:	b3b1      	cbz	r1, 802434a <__ieee754_sqrtf+0x86>
 80242dc:	2a00      	cmp	r2, #0
 80242de:	da04      	bge.n	80242ea <__ieee754_sqrtf+0x26>
 80242e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80242e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80242e8:	bd70      	pop	{r4, r5, r6, pc}
 80242ea:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80242ee:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80242f2:	d204      	bcs.n	80242fe <__ieee754_sqrtf+0x3a>
 80242f4:	2100      	movs	r1, #0
 80242f6:	0210      	lsls	r0, r2, #8
 80242f8:	d528      	bpl.n	802434c <__ieee754_sqrtf+0x88>
 80242fa:	3901      	subs	r1, #1
 80242fc:	1a5b      	subs	r3, r3, r1
 80242fe:	3b7f      	subs	r3, #127	; 0x7f
 8024300:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8024304:	07d9      	lsls	r1, r3, #31
 8024306:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 802430a:	bf48      	it	mi
 802430c:	0052      	lslmi	r2, r2, #1
 802430e:	1059      	asrs	r1, r3, #1
 8024310:	2300      	movs	r3, #0
 8024312:	0052      	lsls	r2, r2, #1
 8024314:	2419      	movs	r4, #25
 8024316:	461e      	mov	r6, r3
 8024318:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 802431c:	1835      	adds	r5, r6, r0
 802431e:	4295      	cmp	r5, r2
 8024320:	bfde      	ittt	le
 8024322:	182e      	addle	r6, r5, r0
 8024324:	1b52      	suble	r2, r2, r5
 8024326:	181b      	addle	r3, r3, r0
 8024328:	3c01      	subs	r4, #1
 802432a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802432e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8024332:	d1f3      	bne.n	802431c <__ieee754_sqrtf+0x58>
 8024334:	b112      	cbz	r2, 802433c <__ieee754_sqrtf+0x78>
 8024336:	3301      	adds	r3, #1
 8024338:	f023 0301 	bic.w	r3, r3, #1
 802433c:	105b      	asrs	r3, r3, #1
 802433e:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8024342:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8024346:	ee00 3a10 	vmov	s0, r3
 802434a:	bd70      	pop	{r4, r5, r6, pc}
 802434c:	0052      	lsls	r2, r2, #1
 802434e:	3101      	adds	r1, #1
 8024350:	e7d1      	b.n	80242f6 <__ieee754_sqrtf+0x32>

08024352 <fabs>:
 8024352:	ec53 2b10 	vmov	r2, r3, d0
 8024356:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802435a:	ec43 2b10 	vmov	d0, r2, r3
 802435e:	4770      	bx	lr

08024360 <finite>:
 8024360:	ee10 3a90 	vmov	r3, s1
 8024364:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8024368:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802436c:	0fc0      	lsrs	r0, r0, #31
 802436e:	4770      	bx	lr

08024370 <matherr>:
 8024370:	2000      	movs	r0, #0
 8024372:	4770      	bx	lr
 8024374:	0000      	movs	r0, r0
	...

08024378 <nan>:
 8024378:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024380 <nan+0x8>
 802437c:	4770      	bx	lr
 802437e:	bf00      	nop
 8024380:	00000000 	.word	0x00000000
 8024384:	7ff80000 	.word	0x7ff80000

08024388 <rint>:
 8024388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802438a:	ec51 0b10 	vmov	r0, r1, d0
 802438e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8024392:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8024396:	2e13      	cmp	r6, #19
 8024398:	ee10 7a10 	vmov	r7, s0
 802439c:	460b      	mov	r3, r1
 802439e:	4602      	mov	r2, r0
 80243a0:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80243a4:	dc58      	bgt.n	8024458 <rint+0xd0>
 80243a6:	2e00      	cmp	r6, #0
 80243a8:	da2b      	bge.n	8024402 <rint+0x7a>
 80243aa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80243ae:	4302      	orrs	r2, r0
 80243b0:	d023      	beq.n	80243fa <rint+0x72>
 80243b2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80243b6:	4302      	orrs	r2, r0
 80243b8:	4251      	negs	r1, r2
 80243ba:	4311      	orrs	r1, r2
 80243bc:	0b09      	lsrs	r1, r1, #12
 80243be:	0c5b      	lsrs	r3, r3, #17
 80243c0:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80243c4:	045b      	lsls	r3, r3, #17
 80243c6:	ea41 0703 	orr.w	r7, r1, r3
 80243ca:	4b31      	ldr	r3, [pc, #196]	; (8024490 <rint+0x108>)
 80243cc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80243d0:	4639      	mov	r1, r7
 80243d2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80243d6:	ee10 0a10 	vmov	r0, s0
 80243da:	4632      	mov	r2, r6
 80243dc:	463b      	mov	r3, r7
 80243de:	f7db ff6d 	bl	80002bc <__adddf3>
 80243e2:	e9cd 0100 	strd	r0, r1, [sp]
 80243e6:	463b      	mov	r3, r7
 80243e8:	4632      	mov	r2, r6
 80243ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80243ee:	f7db ff63 	bl	80002b8 <__aeabi_dsub>
 80243f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80243f6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 80243fa:	ec41 0b10 	vmov	d0, r0, r1
 80243fe:	b003      	add	sp, #12
 8024400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024402:	4c24      	ldr	r4, [pc, #144]	; (8024494 <rint+0x10c>)
 8024404:	4134      	asrs	r4, r6
 8024406:	ea01 0704 	and.w	r7, r1, r4
 802440a:	4307      	orrs	r7, r0
 802440c:	d0f5      	beq.n	80243fa <rint+0x72>
 802440e:	0861      	lsrs	r1, r4, #1
 8024410:	ea03 0001 	and.w	r0, r3, r1
 8024414:	4302      	orrs	r2, r0
 8024416:	d00b      	beq.n	8024430 <rint+0xa8>
 8024418:	ea23 0101 	bic.w	r1, r3, r1
 802441c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024420:	2e13      	cmp	r6, #19
 8024422:	fa43 f306 	asr.w	r3, r3, r6
 8024426:	bf0c      	ite	eq
 8024428:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 802442c:	2200      	movne	r2, #0
 802442e:	430b      	orrs	r3, r1
 8024430:	4619      	mov	r1, r3
 8024432:	4b17      	ldr	r3, [pc, #92]	; (8024490 <rint+0x108>)
 8024434:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8024438:	e9d5 4500 	ldrd	r4, r5, [r5]
 802443c:	4610      	mov	r0, r2
 802443e:	462b      	mov	r3, r5
 8024440:	4622      	mov	r2, r4
 8024442:	f7db ff3b 	bl	80002bc <__adddf3>
 8024446:	e9cd 0100 	strd	r0, r1, [sp]
 802444a:	4622      	mov	r2, r4
 802444c:	462b      	mov	r3, r5
 802444e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024452:	f7db ff31 	bl	80002b8 <__aeabi_dsub>
 8024456:	e7d0      	b.n	80243fa <rint+0x72>
 8024458:	2e33      	cmp	r6, #51	; 0x33
 802445a:	dd08      	ble.n	802446e <rint+0xe6>
 802445c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024460:	d1cb      	bne.n	80243fa <rint+0x72>
 8024462:	ee10 2a10 	vmov	r2, s0
 8024466:	460b      	mov	r3, r1
 8024468:	f7db ff28 	bl	80002bc <__adddf3>
 802446c:	e7c5      	b.n	80243fa <rint+0x72>
 802446e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8024472:	f04f 34ff 	mov.w	r4, #4294967295
 8024476:	40f4      	lsrs	r4, r6
 8024478:	4220      	tst	r0, r4
 802447a:	d0be      	beq.n	80243fa <rint+0x72>
 802447c:	0861      	lsrs	r1, r4, #1
 802447e:	420f      	tst	r7, r1
 8024480:	bf1f      	itttt	ne
 8024482:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8024486:	ea27 0101 	bicne.w	r1, r7, r1
 802448a:	4132      	asrne	r2, r6
 802448c:	430a      	orrne	r2, r1
 802448e:	e7cf      	b.n	8024430 <rint+0xa8>
 8024490:	08031898 	.word	0x08031898
 8024494:	000fffff 	.word	0x000fffff

08024498 <scalbn>:
 8024498:	b570      	push	{r4, r5, r6, lr}
 802449a:	ec55 4b10 	vmov	r4, r5, d0
 802449e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80244a2:	4606      	mov	r6, r0
 80244a4:	462b      	mov	r3, r5
 80244a6:	b9b2      	cbnz	r2, 80244d6 <scalbn+0x3e>
 80244a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80244ac:	4323      	orrs	r3, r4
 80244ae:	d03c      	beq.n	802452a <scalbn+0x92>
 80244b0:	2200      	movs	r2, #0
 80244b2:	4b33      	ldr	r3, [pc, #204]	; (8024580 <scalbn+0xe8>)
 80244b4:	4629      	mov	r1, r5
 80244b6:	ee10 0a10 	vmov	r0, s0
 80244ba:	f7dc f8b1 	bl	8000620 <__aeabi_dmul>
 80244be:	4a31      	ldr	r2, [pc, #196]	; (8024584 <scalbn+0xec>)
 80244c0:	4296      	cmp	r6, r2
 80244c2:	4604      	mov	r4, r0
 80244c4:	460d      	mov	r5, r1
 80244c6:	460b      	mov	r3, r1
 80244c8:	da13      	bge.n	80244f2 <scalbn+0x5a>
 80244ca:	a329      	add	r3, pc, #164	; (adr r3, 8024570 <scalbn+0xd8>)
 80244cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244d0:	f7dc f8a6 	bl	8000620 <__aeabi_dmul>
 80244d4:	e00a      	b.n	80244ec <scalbn+0x54>
 80244d6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80244da:	428a      	cmp	r2, r1
 80244dc:	d10c      	bne.n	80244f8 <scalbn+0x60>
 80244de:	ee10 2a10 	vmov	r2, s0
 80244e2:	462b      	mov	r3, r5
 80244e4:	4620      	mov	r0, r4
 80244e6:	4629      	mov	r1, r5
 80244e8:	f7db fee8 	bl	80002bc <__adddf3>
 80244ec:	4604      	mov	r4, r0
 80244ee:	460d      	mov	r5, r1
 80244f0:	e01b      	b.n	802452a <scalbn+0x92>
 80244f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80244f6:	3a36      	subs	r2, #54	; 0x36
 80244f8:	4432      	add	r2, r6
 80244fa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80244fe:	428a      	cmp	r2, r1
 8024500:	dd0b      	ble.n	802451a <scalbn+0x82>
 8024502:	ec45 4b11 	vmov	d1, r4, r5
 8024506:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8024578 <scalbn+0xe0>
 802450a:	f000 f83f 	bl	802458c <copysign>
 802450e:	a31a      	add	r3, pc, #104	; (adr r3, 8024578 <scalbn+0xe0>)
 8024510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024514:	ec51 0b10 	vmov	r0, r1, d0
 8024518:	e7da      	b.n	80244d0 <scalbn+0x38>
 802451a:	2a00      	cmp	r2, #0
 802451c:	dd08      	ble.n	8024530 <scalbn+0x98>
 802451e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024522:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024526:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802452a:	ec45 4b10 	vmov	d0, r4, r5
 802452e:	bd70      	pop	{r4, r5, r6, pc}
 8024530:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024534:	da0d      	bge.n	8024552 <scalbn+0xba>
 8024536:	f24c 3350 	movw	r3, #50000	; 0xc350
 802453a:	429e      	cmp	r6, r3
 802453c:	ec45 4b11 	vmov	d1, r4, r5
 8024540:	dce1      	bgt.n	8024506 <scalbn+0x6e>
 8024542:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8024570 <scalbn+0xd8>
 8024546:	f000 f821 	bl	802458c <copysign>
 802454a:	a309      	add	r3, pc, #36	; (adr r3, 8024570 <scalbn+0xd8>)
 802454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024550:	e7e0      	b.n	8024514 <scalbn+0x7c>
 8024552:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024556:	3236      	adds	r2, #54	; 0x36
 8024558:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802455c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024560:	4620      	mov	r0, r4
 8024562:	4629      	mov	r1, r5
 8024564:	2200      	movs	r2, #0
 8024566:	4b08      	ldr	r3, [pc, #32]	; (8024588 <scalbn+0xf0>)
 8024568:	e7b2      	b.n	80244d0 <scalbn+0x38>
 802456a:	bf00      	nop
 802456c:	f3af 8000 	nop.w
 8024570:	c2f8f359 	.word	0xc2f8f359
 8024574:	01a56e1f 	.word	0x01a56e1f
 8024578:	8800759c 	.word	0x8800759c
 802457c:	7e37e43c 	.word	0x7e37e43c
 8024580:	43500000 	.word	0x43500000
 8024584:	ffff3cb0 	.word	0xffff3cb0
 8024588:	3c900000 	.word	0x3c900000

0802458c <copysign>:
 802458c:	ec53 2b10 	vmov	r2, r3, d0
 8024590:	ee11 0a90 	vmov	r0, s3
 8024594:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024598:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 802459c:	ea41 0300 	orr.w	r3, r1, r0
 80245a0:	ec43 2b10 	vmov	d0, r2, r3
 80245a4:	4770      	bx	lr
	...

080245a8 <_init>:
 80245a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245aa:	bf00      	nop
 80245ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80245ae:	bc08      	pop	{r3}
 80245b0:	469e      	mov	lr, r3
 80245b2:	4770      	bx	lr

080245b4 <_fini>:
 80245b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245b6:	bf00      	nop
 80245b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80245ba:	bc08      	pop	{r3}
 80245bc:	469e      	mov	lr, r3
 80245be:	4770      	bx	lr
